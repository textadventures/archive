{
  "Topic": {
    "TopicId": "3lndplfhi0wcnbd7ie8alq",
    "ForumId": "24",
    "Title": "Re-usable Global Passage ",
    "LastUpdated": "2020-11-25T00:38:18.4525908Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c7a9ddb7-9b6e-45cc-9b02-03acd91f6f67",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my story, I have this one section where there are a bunch of if statements that do different things based on some flags.  The only purpose of this section is to complete the if statements - it's not to forward the story. \r\n\r\nNow, I want to get to this section from different places, but then I need them to get back to where they were.  Basically, I need a passage, not a section, but I need a passage that can be gotten to from *any* section.  And I'd like to have several of these.\r\n\r\nFor example, I have a chickenhouse, and there are several sections in the chickenhouse where you can snag some corn.  But I don't want to copy and paste the same pick-up-corn passage into several sections; rather, I want several sections to lead to the same passage.\r\n\r\nCan I do that?",
      "EditableFormat": "markdown",
      "HTML": "<p>In my story, I have this one section where there are a bunch of if statements that do different things based on some flags.  The only purpose of this section is to complete the if statements - it's not to forward the story.</p>\n<p>Now, I want to get to this section from different places, but then I need them to get back to where they were.  Basically, I need a passage, not a section, but I need a passage that can be gotten to from <em>any</em> section.  And I'd like to have several of these.</p>\n<p>For example, I have a chickenhouse, and there are several sections in the chickenhouse where you can snag some corn.  But I don't want to copy and paste the same pick-up-corn passage into several sections; rather, I want several sections to lead to the same passage.</p>\n<p>Can I do that?</p>\n\n",
      "PostDate": "2020-11-25T00:38:18.4525908Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "439c870f-5d60-4ca8-8f1e-89c627fbcf3c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A while back I posted a modified version of the built in `passage` function, which would allow passages in the master section to be accessed from any section.\r\n\r\nThe modified passage function looks something like this:\r\n<pre><code>\r\n    squiffy.story.passage = function(passageName) {\r\n        var passage = squiffy.story.section.passages[passageName];\r\n        var masterSection = squiffy.story.sections[''];\r\n<b style=\"color: green;\">        if (!passage && masterSection) passage = masterSection.passages[passageName];</b>\r\n<b style=\"color: orange;\">        if (!passage) return;\r\n        setSeen(passageName);</b>\r\n        if (masterSection) {\r\n            var masterPassage = masterSection.passages[''];\r\n            if (masterPassage) {\r\n                squiffy.story.run(masterPassage);\r\n                squiffy.ui.write(masterPassage.text);\r\n            }\r\n        }\r\n        var master = squiffy.story.section.passages[''];\r\n        if (master) {\r\n            squiffy.story.run(master);\r\n            squiffy.ui.write(master.text);\r\n        }\r\n        squiffy.story.run(passage);\r\n        squiffy.ui.write(passage.text);\r\n        squiffy.story.save();\r\n    };\r\n</code></pre>\r\nThat's one line added, and two lines moved to later in the function.\r\nIf you use this to replace the built-in definition of `squiffy.story.passage` in story.js it should work fine. I believe you can do this after compiling your game.\r\n\r\nDoing this on the web version of Squiffy, or if you want to do it entirely within the Squiffy file, is a little harder. Unfortunately, it seems necessary to include the javascript for this change in the master section itself, meaning that when you resume a saved game, the changes won't work until the player clicks on an actual section link. I'm trying to work around this by abusing the `_transition` function, and I think I've got it working on a test game now. Unfortunately, this also means we would need to include the `setSeen` function, as this is a local variable and not accessible from user code.\r\n\r\nThis is how the first section looks:\r\n<pre><code>[[ui init]]:\r\n    squiffy.story.save = function() {\r\n      squiffy.set('_output', squiffy.ui.output.html());\r\n      if (!squiffy.get('_transition')) {\r\n        squiffy.set('_transition', \"squiffy.story.sections['ui init'].js\");\r\n      }\r\n    };\r\n\r\n    <b style=\"color: blue; font-family: initial;\">// Game-specific code goes here</b>\r\n\r\n    // This moves the player on to the actual first section of the game after the weird script stuff\r\n    //   is done. change <b style=\"color: purple; font-family: initial;\">Start</b> to your section name, or remove this and put your first section\r\n    //   text here (but remember that any javascript in this first section will be run again when\r\n    //   resuming a saved game)\r\n    if (squiffy.get('_section') == \"ui init\") {\r\n      squiffy.story.go('<b style=\"color: purple; font-family: initial;\">Start</b>');\r\n    }</code></pre>\r\n\r\nThis allows me to modify the Squiffy javascript for a single game. The line <b style=\"color: blue; font-family: initial;\">// Game-specific code goes here</b> can be replaced with the modified `passage` function above. Although in the case of changing `passage` there is another small issue because of the private function `setSeen`.\r\n\r\nYou would need to either remove this line:\r\n<pre><code style=\"color: brown\">        setSeen(passageName);</code></pre>\r\nor replace it with:\r\n```\r\n        var seenSections = squiffy.get('_seen_sections');\r\n        if (!seenSections) seenSections = [];\r\n        if (seenSections.indexOf(passageName) == -1) {\r\n            seenSections.push(passageName);\r\n            squiffy.set('_seen_sections', seenSections);\r\n        }\r\n```\r\n\r\n(I should note that I have tested the modified `passage` function, and I have tested the system for modifying Squiffy's built-in functions, but I haven't tested the two bits of code together. Still, I expect it would work without any problems)",
      "EditableFormat": "markdown",
      "HTML": "<p>A while back I posted a modified version of the built in <code>passage</code> function, which would allow passages in the master section to be accessed from any section.</p>\n<p>The modified passage function looks something like this:</p>\n<pre><code>\n    squiffy.story.passage = function(passageName) {\n        var passage = squiffy.story.section.passages[passageName];\n        var masterSection = squiffy.story.sections[''];\n<b style=\"color: green\">        if (!passage &amp;&amp; masterSection) passage = masterSection.passages[passageName];</b>\n<b style=\"color: orange\">        if (!passage) return;\n        setSeen(passageName);</b>\n        if (masterSection) {\n            var masterPassage = masterSection.passages[''];\n            if (masterPassage) {\n                squiffy.story.run(masterPassage);\n                squiffy.ui.write(masterPassage.text);\n            }\n        }\n        var master = squiffy.story.section.passages[''];\n        if (master) {\n            squiffy.story.run(master);\n            squiffy.ui.write(master.text);\n        }\n        squiffy.story.run(passage);\n        squiffy.ui.write(passage.text);\n        squiffy.story.save();\n    };\n</code></pre>\n<p>That's one line added, and two lines moved to later in the function.<br>\nIf you use this to replace the built-in definition of <code>squiffy.story.passage</code> in story.js it should work fine. I believe you can do this after compiling your game.</p>\n<p>Doing this on the web version of Squiffy, or if you want to do it entirely within the Squiffy file, is a little harder. Unfortunately, it seems necessary to include the javascript for this change in the master section itself, meaning that when you resume a saved game, the changes won't work until the player clicks on an actual section link. I'm trying to work around this by abusing the <code>_transition</code> function, and I think I've got it working on a test game now. Unfortunately, this also means we would need to include the <code>setSeen</code> function, as this is a local variable and not accessible from user code.</p>\n<p>This is how the first section looks:</p>\n<pre><code>[[ui init]]:\n    squiffy.story.save = function() {\n      squiffy.set('_output', squiffy.ui.output.html());\n      if (!squiffy.get('_transition')) {\n        squiffy.set('_transition', \"squiffy.story.sections['ui init'].js\");\n      }\n    };\n\n    <b style=\"color: blue; font-family: initial\">// Game-specific code goes here</b>\n\n    // This moves the player on to the actual first section of the game after the weird script stuff\n    //   is done. change <b style=\"color: purple; font-family: initial\">Start</b> to your section name, or remove this and put your first section\n    //   text here (but remember that any javascript in this first section will be run again when\n    //   resuming a saved game)\n    if (squiffy.get('_section') == \"ui init\") {\n      squiffy.story.go('<b style=\"color: purple; font-family: initial\">Start</b>');\n    }</code></pre>\n<p>This allows me to modify the Squiffy javascript for a single game. The line <b style=\"color: blue; font-family: initial\">// Game-specific code goes here</b> can be replaced with the modified <code>passage</code> function above. Although in the case of changing <code>passage</code> there is another small issue because of the private function <code>setSeen</code>.</p>\n<p>You would need to either remove this line:</p>\n<pre><code style=\"color: brown\">        setSeen(passageName);</code></pre>\n<p>or replace it with:</p>\n<pre><code>        var seenSections = squiffy.get('_seen_sections');\n        if (!seenSections) seenSections = [];\n        if (seenSections.indexOf(passageName) == -1) {\n            seenSections.push(passageName);\n            squiffy.set('_seen_sections', seenSections);\n        }\n</code></pre>\n<p>(I should note that I have tested the modified <code>passage</code> function, and I have tested the system for modifying Squiffy's built-in functions, but I haven't tested the two bits of code together. Still, I expect it would work without any problems)</p>\n\n",
      "PostDate": "2020-11-25T14:19:35.5662863Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a4b52243-81a0-4e71-8557-a05365918cbe",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to make this change permanent - that is, to work for all stories?  Maybe I could modify one of the files in ````C:\\Program Files (x86)\\Squiffy\\resources\\app\\```` ?  (or maybe not; I'm still not sure where squiffy compiler is) I don't see any reason for not making it available to all my games.  \r\n\r\nWhen you say \"a while back I posted\" - are you referring to posts in this squiffy forum or somewhere else?  I've been using extensive searches through this forum for anything and everything I can find.  I wish there were a wiki for all these tricks.  \r\n\r\nYou are very wise in the ways of squiffy, and I wish I could tap into your exploits without you having to answer all of my posts!  (You are kind to pay me your attention, and I'm very glad)\r\n\r\n@mrangel maybe you have a github page I could explore?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to make this change permanent - that is, to work for all stories?  Maybe I could modify one of the files in <code>C:\\Program Files (x86)\\Squiffy\\resources\\app\\</code> ?  (or maybe not; I'm still not sure where squiffy compiler is) I don't see any reason for not making it available to all my games.</p>\n<p>When you say \"a while back I posted\" - are you referring to posts in this squiffy forum or somewhere else?  I've been using extensive searches through this forum for anything and everything I can find.  I wish there were a wiki for all these tricks.</p>\n<p>You are very wise in the ways of squiffy, and I wish I could tap into your exploits without you having to answer all of my posts!  (You are kind to pay me your attention, and I'm very glad)</p>\n<p>@mrangel maybe you have a github page I could explore?</p>\n\n",
      "PostDate": "2020-11-25T14:45:04.3494344Z",
      "LastEditDate": "2020-11-25T14:52:13.2723854Z",
      "link": null
    },
    {
      "PostId": "9305ab1c-ce32-4751-aac3-553c06cdead1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know that much; I've pretty much taught myself by trial and error while answering people's questions on the forum. All my answers are on here, but searching for them might be hard because many of the thread titles aren't particularly informative.\r\n\r\nMy first attempt at this particular problem was trying to fix someone else's code in a thread. At that point I didn't know about passages, so instead I made a suffix that could be added to a section link, so that it would display the section without leaving the current one (effectively making a section act like a passage). You can see this in <a href=\"http://textadventures.co.uk/games/view/tvbrarouses9gs0xjlnpjg/very-silly-squiffy-sidebar-test-game\">my very silly test game</a>, which I've only recently (today) modified so that it behaves correctly after refreshing the page, or returning to a previously started game.\r\n\r\nI can't find the thread with the modified passage function in it, but I think the simpler modification I posted here might be better.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know that much; I've pretty much taught myself by trial and error while answering people's questions on the forum. All my answers are on here, but searching for them might be hard because many of the thread titles aren't particularly informative.</p>\n<p>My first attempt at this particular problem was trying to fix someone else's code in a thread. At that point I didn't know about passages, so instead I made a suffix that could be added to a section link, so that it would display the section without leaving the current one (effectively making a section act like a passage). You can see this in <a href=\"http://textadventures.co.uk/games/view/tvbrarouses9gs0xjlnpjg/very-silly-squiffy-sidebar-test-game\">my very silly test game</a>, which I've only recently (today) modified so that it behaves correctly after refreshing the page, or returning to a previously started game.</p>\n<p>I can't find the thread with the modified passage function in it, but I think the simpler modification I posted here might be better.</p>\n\n",
      "PostDate": "2020-11-25T15:03:08.9133145Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ed03c33f-c9b8-40c8-b961-9f552e323e0d",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That \"silly\" game is right smart!  Would you share the squiffy with with me?  I learn best by looking at other people's code.  \r\n\r\nAs for the subject at hand, I don't want to modify story.js, because I still have a lot to do with the story itself and editing story.js is not a good thing to do at this point.  Besides that, if I ever want to make updates or edits to the story, I'll lose any modifications I made in story.js.  So, I'd rather make modifications to the squiffy compiler.\r\n\r\nAh, I found your source (didn't read closely enough on the pre-story page)\r\nhttp://textadventures.co.uk/forum/squiffy/topic/twsu7sqjoegndwy3_g_qxq/inventory-show-hide ",
      "EditableFormat": "markdown",
      "HTML": "<p>That \"silly\" game is right smart!  Would you share the squiffy with with me?  I learn best by looking at other people's code.</p>\n<p>As for the subject at hand, I don't want to modify story.js, because I still have a lot to do with the story itself and editing story.js is not a good thing to do at this point.  Besides that, if I ever want to make updates or edits to the story, I'll lose any modifications I made in story.js.  So, I'd rather make modifications to the squiffy compiler.</p>\n<p>Ah, I found your source (didn't read closely enough on the pre-story page)<br>\nhttp://textadventures.co.uk/forum/squiffy/topic/twsu7sqjoegndwy3_g_qxq/inventory-show-hide</p>\n\n",
      "PostDate": "2020-11-25T15:11:21.1174302Z",
      "LastEditDate": "2020-11-25T15:16:59.6592551Z",
      "link": null
    },
    {
      "PostId": "8b34a5bc-633d-4764-a1c8-fe0d80754a2a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there a way to make this change permanent - that is, to work for all stories? Maybe I could modify one of the files in `C:\\Program Files (x86)\\Squiffy\\resources\\app\\`?\r\n\r\nI have the Linux version of the desktop editor, but not the Windows one (and have only actually used the web editor). But assuming the layout is the same, it looks like you could search for `squiffy.story.passage` in the file `Squiffy/resources/app/node_modules/squiffy/squiffy.template.js`.\r\n\r\nIf you're changing it there, you probably don't need to mess around with`setSeen` at all, which will make it easier :)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there a way to make this change permanent - that is, to work for all stories? Maybe I could modify one of the files in <code>C:\\Program Files (x86)\\Squiffy\\resources\\app\\</code>?</p>\n</blockquote>\n<p>I have the Linux version of the desktop editor, but not the Windows one (and have only actually used the web editor). But assuming the layout is the same, it looks like you could search for <code>squiffy.story.passage</code> in the file <code>Squiffy/resources/app/node_modules/squiffy/squiffy.template.js</code>.</p>\n<p>If you're changing it there, you probably don't need to mess around with<code>setSeen</code> at all, which will make it easier :)</p>\n\n",
      "PostDate": "2020-11-25T15:13:37.3491908Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "74b4a4dc-8285-4ccf-8342-86f1fe1794df",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> That \"silly\" game is right smart! Would you share the squiffy with with me? I learn best by looking at other people's code.\r\n\r\nThere's a link in the game description to the forum thread that inspired it, where I posted all the code.\r\n\r\nBe warned that some of the code is pretty bad, because I didn't know about passages when I was doing it (trial and error, having never used Squiffy before)\r\n\r\nI modified it again today, and haven't updated the code in that thread. But the changes I made there were basically wrapping it in the `[[ui init]]:` code I posted above, so that it doesn't stop working when you resume a saved game.\r\n\r\nHere's the current code (including `console.log` breadcrumbs from when I was trying to understand why it wasn't working):\r\n\r\n<details><summary>click to expand</summary>\r\n\r\n```\r\n@title Inventory test game\r\n\r\n[[ui init]]:\r\n    console.log (\"Running init...\")\r\n    if (!window.sq) {\r\n      console.log (\"Doing functions...\")\r\n      window.sq = squiffy;\r\n      squiffy.story.save = function() {\r\n        console.log (\"Saving...\")\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n        if (!squiffy.get('_transition')) {\r\n          console.log (\"Setting _transition...\")\r\n          squiffy.set('_transition', \"squiffy.story.sections['ui init'].js\");\r\n        }\r\n      };\r\n\r\n      // Any code you put here will be run once at the start of the game, and again when the\r\n      //   game is reloaded so you can use it to define functions and stuff, or anything else\r\n      //   that you want to be done as soon as the `sq` variable is available\r\n      $(function() {\r\n        var updateSidebar = function () {\r\n          if (!$('#sidebar').length) {\r\n            squiffy.ui.write(squiffy.story.sections['sidebar container'].text);\r\n            // Ugly hack to stop the sidebar being hidden by the top/bottom bars in the editor\r\n            // and allow you to remove the sidebar so you can look at the code while testing\r\n            //     (it will reappear as soon as you visit another section in the game)\r\n            if ($('.ui-layout-north:visible').length) {\r\n              $('#showinv').css('top', $('#showinv').offset()['top']+92);\r\n              $('#sidebar').css('top', $('#sidebar').offset()['top']+92);\r\n              $('#sidebar').css('bottom', '100px');\r\n              $('<button>', {id: 'killsidebar', style: 'position: absolute; bottom: 4px; right: 4px'}).click(function () {\r\n                $('#killsidebar,#sidebar,#showinv').remove();\r\n              }).text('kill sidebar').appendTo('#sidebar');\r\n            }\r\n            $('#showinv').click(e => $('#sidebar').animate({left: 0}));\r\n            $('#hideinv').click(e => $('#sidebar').animate({left: 5-$('#sidebar').width()}));\r\n          }\r\n          if ($('#sidebar:visible').length) {\r\n            $('#sidebar').children(':not(#hideinv,#killsidebar)').remove();\r\n            $('#sidebar').append(squiffy.ui.processText(squiffy.story.sections['sidebar contents'].text));\r\n            if (squiffy.get('gameover')) {\r\n              $('#sidebar a').remove();\r\n            }\r\n          }\r\n        };\r\n        squiffy.story.originalGo = squiffy.story.go;\r\n        squiffy.story.go = function (section) {\r\n          console.log(\"go called for \"+section);\r\n          if (section.match(/^quick:/)) {\r\n            var sec = squiffy.story.sections[section.replace(/^quick:\\s*/, '')];\r\n            if (!sec) {\r\n              console.log(\"No such section: \"+section);\r\n              return;\r\n            }\r\n            squiffy.story.run(sec);\r\n            squiffy.ui.write('<blockquote style=\"display: block; left: 2em; right: 2em; border: 1px dotted grey;\">' + sec.text + '</blockquote>');\r\n            squiffy.story.save();\r\n          } else {\r\n            console.log(\"Running originalGo\");\r\n            squiffy.story.originalGo (section);\r\n          }\r\n          if (squiffy.afterText) {\r\n            var after = squiffy.afterText;\r\n            delete(squiffy['afterText']);\r\n            after();\r\n          }\r\n          updateSidebar();\r\n        };\r\n        updateSidebar();\r\n      });\r\n      // End of game-specific code\r\n\r\n    }\r\n    if (squiffy.get('_section') == \"ui init\") {\r\n      console.log (\"Moving to first section...\")\r\n      squiffy.story.go('Start');\r\n    }\r\n\r\n[[Start]]:\r\n    squiffy.story.go('Continue');\r\n\r\n@set potions = 0\r\n@set bottles = 1\r\n@set acid = 0\r\n    \r\nThis is the starting page! Is it working?\r\n\r\n[[Continue]]\r\n\r\n[[sidebar container]]:\r\n<button style=\"position: fixed; top: 6px; left: 2px;\" id=\"showinv\" type=\"button\">Show sidebar</button>\r\n<div id=\"sidebar\" style=\"background-color: white; position: fixed; left: 1px; top: 4px; bottom: 4px; width: 20%; overflow-y: auto; border: 1px double blue;\"><button style=\"position: absolute; top: 2px; right: 2px;\" id=\"hideinv\"  type=\"button\">Hide sidebar</button></div>\r\n\r\n[[sidebar contents]]:\r\n\r\n<p style=\"font-weight: bold;\">Inventory</p>\r\n\r\n<p>You are {if health=true:healthy}{else: unhealthy}.</p>\r\n\r\n{if potions>0:<p>{if potions>1:Has {potions} potions}{else:Has a potion}. [[Drink potion]](quick:drink potion)</p>}\r\n{if acid>0:<p>{if acid>1:Has {acid} flasks of acid}{else:Has an acid flask}. [[Drink acid]](quick:drink acid)</p>}\r\n{if bottles>0:<p>{if bottles>1:Has {bottles} empty flasks}{else:Has an empty flask}.</p>}\r\n{if mixbottle>0:<p>{if mixbottle>1:Has {mixbottle} flasks}{else:Has a flask} filled with a weird goop you can't pour out. [[Discard]](quick:discard mix)</p>}\r\n{if key=true:<p>Has {if dissolvedkey:partially dissolved }key {if not eatenkey:[[Swallow]](quick:eat key)}{else:(swallowed)}</p>}\r\n{if soot:<p>Covered in soot.</p>}\r\n{if talisman=true:<p>Has weird glowing talisman [[Rub]](quick:rub talisman)</p>}\r\n\r\n[[rub talisman]]:\r\n@set not talisman\r\n\r\nYou rub the talisman, and your hair seems to stand on end. You feel like an epic vision-quest is about to begin. {if bottles>0:{@bottles-=1}{@potions+=1}Suddenly, with a sloshing sound, one of your empty bottles fills up with a rainbow-coloured liquid. }Then the talisman vanishes.\r\n\r\n[[eat key]]:\r\n@set eatenkey\r\n\r\nYou know it's a really bad idea, but you swallow the key.\r\n\r\n[[Continue]]:\r\n<p>You see a potion and a key.</p>\r\n<p>[[Get the potion]](get potion,takenpotion=true)</p>\r\n<p>[[Get the key]](get key)</p>\r\n<p>[[Move on]](hallway)</p>\r\n\r\n[[get potion]]:\r\n\r\n<p>You pick up the potion</p>\r\n@set potions = 1\r\n{if key=true:}{else:<p>[[Get the key]](get key)</p>}\r\n<p>[[Move on]](hallway)</p>\r\n\r\n[[get key]]:\r\n\r\n@set key=true\r\n\r\n<p>you pick up the key</p>\r\n{if not takenpotion:<p>[[Get the potion]](get potion,takenpotion=true)</p>}\r\n\r\n<p>[[Move on]](hallway)</p>\r\n\r\n[[hallway]]:\r\n\r\nYou are in a hallway.\r\n\r\nDoorways lead to the [[zoo]] and the [[kitchen]].\r\n\r\n[[zoo]]:\r\n\r\nYou are in the zoo.\r\n\r\nYou can go to the [[science lab]] or the [[hallway]].\r\n\r\nThere is also a heavily locked cage door{if corroded: with acid burns on it}. You could kick it with all your strength and never make a dent. {if acid>0:Or you could try to [[melt through it with acid]].}{if key=true:Or [[use the key]] to open it.}\r\n\r\n[[melt through it with acid]]:\r\n@dec acid\r\n@inc bottles\r\n\r\n{if corroded:The bars are already melted, and drop right away. But security is charging angrily towards you, so your only option is to proceed [[into the cage]].}{else:{@corroded}The bars start to melt, but one bottle of acid isn't enough to remove them completely. And the zookeeper has called security, chasing you back towards the [[hallway]].}\r\n\r\n[[into the cage]]:\r\n    var completion = 30;\r\n    $.each(\"bottles potions acid key health talisman eatenkey dissolvedkey mixbottle soot\".split(/ /), function (i, attr) {\r\n      if (squiffy.get(attr)) {completion+=7};\r\n    });\r\n    squiffy.set('complete', completion);\r\n\r\n@set gameover\r\n\r\nYou step nervously into the zoo cage, wondering what kind of terrifying beast could lie beyond. A second later you see the cutest, most beautiful kitten you have ever laid eyes on, purring happily.\r\n\r\nCongratulations, this is as close as this game gets to an ending. I hope you've not found any bugs along the way.\r\n\r\nYou achieved {complete}% completion on this play through.\r\n\r\n[[use the key]]:\r\n{if eatenkey:You stick your fingers down your throat and attempt to regurgitate the key. Unfortunately, this doesn't seem to work so well.}{else:The key doesn't seem to fit this door. But the zookeeper has seen you fiddling around, and is charging towards you. You'll have to come back later, once you found the right key.}\r\n\r\nWould you like to flee towards the [[hallway]], or the [[science lab]]?\r\n\r\n[[science lab]]:\r\nYou are in a science lab.\r\n\r\nThere is a huge vat of acid against one wall. If you want to, you could try [[jumping in]]{if bottles>0:, or [[fill a bottle with acid]]}.\r\n\r\nAlternatively, you could go back up the stairs to the [[zoo]], or take the back passage to the [[carnival]].\r\n\r\n[[jumping in]]:\r\n    squiffy.afterText = function () {\r\n      squiffy.story.go('gameover');\r\n    };\r\n\r\nThat was a very silly thing to do. You are dead. In fact, you are very quickly dissolving.\r\n\r\n[[fill a bottle with acid]]:\r\nYou reach down to the acid vat, and attempt to collect some.\r\n\r\n{if bottles>0:{@acid+=1,bottles-=1}You quickly fill {if bottles=0:your empty bottle}{else:one of your bottles} with acid from the bath, being extra careful not to burn yourself.}{else:{@potions-=1,mixbottle+=1}But as you try to fill the bottle, it seems to be full of some sparkling rainbow liquid, very much like a health potion. You end up with a bottle filled with a weird mixture, which quickly solidifies.}\r\n\r\nNow you can {if bottles>0:[[fill another]](fill a bottle with acid) or }go to the [[zoo]] or the [[carnival]].\r\n\r\n[[carnival]]:\r\n    if (!squiffy.get('talisman') && squiffy.get('bottles')) { setTimeout(function () {squiffy.story.go('quick:fortune teller');}, 4000); }\r\n\r\nYou are in some kind of carnival or circus. You don't see much of interest, but there are all kinds of snake-oil salesmen trying to sell you weird stuff, and dancers so exotic you don't know where to look.\r\n\r\n{if tellerconfused:{if not talisman:{@talisman}A confused-looking fortune teller hands you a strange, mystic talisman. They seem to assume you will know what it means.}}\r\n\r\nFrom here, crowds block most of the exits but you can see a way to get inside to either the [[science lab]] or the [[kitchen]].\r\n\r\n[[fortune teller]]:\r\n    squiffy.set('tellerconfused', squiffy.get('bottles')==0);\r\n    squiffy.set('potions', squiffy.get('potions')+squiffy.get('bottles'));\r\n    squiffy.set('bottles', 0);\r\n\r\nAs you walk away, one of the carnival fortune tellers makes a strange gesture towards your back. You're not sure what happened, but you get a strange urge to look at the bottles you were carrying.\r\n\r\n{if tellerconfused:The bottles are exactly in the state you left them.{if not talisman: A second later, he calls out to you.}}\r\n\r\n[[drink potion]]:\r\n@dec potions\r\n@inc bottles\r\n\r\n@set health = true\r\n\r\n<p>Gulp! you are now healthy!</p>\r\n\r\n[[kitchen]]:\r\n\r\nYou are in a small galley kitchen that lies just off the main [[hallway]]. A back door leads outside, where there seems to be a [[carnival]] going on.\r\n\r\nThere is also a large sink, and a pile of glass [[bottles]](take bottle) which look like they have just been cleaned.\r\n\r\n[[take bottle]]:\r\n    if (squiffy.get('potions')+squiffy.get('bottles')+squiffy.get('acid') > 3) {\r\n      squiffy.story.go(\"handsfull\");\r\n    } else {\r\n      squiffy.set('bottles', squiffy.get('bottles')+1);\r\n    }\r\n    \r\nYou pick up a{if bottles>1:nother} bottle from the pile.\r\n\r\nWould yout like to [[take another]](take bottle), or go back to the [[hallway]], or out to the [[carnival]]?\r\n\r\n[[handsfull]]:\r\nYou're not some kind of octopus! Your hands are full\r\n\r\nYou can go to the [[hallway]], or the [[carnival]].\r\n\r\n[[drink acid]]:\r\n    squiffy.afterText = function () {\r\n      if (!squiffy.get('health')) {\r\n        squiffy.story.go('gameover');\r\n      } else {\r\n        squiffy.set('health', false);\r\n      }\r\n    };\r\n\r\n@dec acid\r\n@inc bottles\r\n\r\nYou drink a bottle of acid. That was a bit dumb.\r\n{if health=true:You are no longer healthy.{if eatenkey:{@not eatenkey,dissolvedkey} You immediately throw up, and can recover a rather corroded key from the pool on the floor.}}{else:You were already sick, and now you are dead.}\r\n\r\n[[discard mix]]:\r\n@set mixbottle = 0\r\n@set potions = 0\r\n@set acid = 0\r\n@set not health\r\n@set soot\r\n\r\n{if not eatenkey:{@not key}}\r\n\r\nYou throw the weird mixture away and it explodes, scorching your clothes and burning up most of the things you were carrying.\r\n\r\n[[gameover]]:\r\n\r\n@set gameover = true\r\n\r\nGAME OVER\r\n\r\nThis is the end of the game for now, but there should be a restart link somewhere in the top right.\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>That \"silly\" game is right smart! Would you share the squiffy with with me? I learn best by looking at other people's code.</p>\n</blockquote>\n<p>There's a link in the game description to the forum thread that inspired it, where I posted all the code.</p>\n<p>Be warned that some of the code is pretty bad, because I didn't know about passages when I was doing it (trial and error, having never used Squiffy before)</p>\n<p>I modified it again today, and haven't updated the code in that thread. But the changes I made there were basically wrapping it in the <code>[[ui init]]:</code> code I posted above, so that it doesn't stop working when you resume a saved game.</p>\n<p>Here's the current code (including <code>console.log</code> breadcrumbs from when I was trying to understand why it wasn't working):</p>\n<details><summary>click to expand</summary>\n<pre><code>@title Inventory test game\n\n[[ui init]]:\n    console.log (\"Running init...\")\n    if (!window.sq) {\n      console.log (\"Doing functions...\")\n      window.sq = squiffy;\n      squiffy.story.save = function() {\n        console.log (\"Saving...\")\n        squiffy.set('_output', squiffy.ui.output.html());\n        if (!squiffy.get('_transition')) {\n          console.log (\"Setting _transition...\")\n          squiffy.set('_transition', \"squiffy.story.sections['ui init'].js\");\n        }\n      };\n\n      // Any code you put here will be run once at the start of the game, and again when the\n      //   game is reloaded so you can use it to define functions and stuff, or anything else\n      //   that you want to be done as soon as the `sq` variable is available\n      $(function() {\n        var updateSidebar = function () {\n          if (!$('#sidebar').length) {\n            squiffy.ui.write(squiffy.story.sections['sidebar container'].text);\n            // Ugly hack to stop the sidebar being hidden by the top/bottom bars in the editor\n            // and allow you to remove the sidebar so you can look at the code while testing\n            //     (it will reappear as soon as you visit another section in the game)\n            if ($('.ui-layout-north:visible').length) {\n              $('#showinv').css('top', $('#showinv').offset()['top']+92);\n              $('#sidebar').css('top', $('#sidebar').offset()['top']+92);\n              $('#sidebar').css('bottom', '100px');\n              $('&lt;button&gt;', {id: 'killsidebar', style: 'position: absolute; bottom: 4px; right: 4px'}).click(function () {\n                $('#killsidebar,#sidebar,#showinv').remove();\n              }).text('kill sidebar').appendTo('#sidebar');\n            }\n            $('#showinv').click(e =&gt; $('#sidebar').animate({left: 0}));\n            $('#hideinv').click(e =&gt; $('#sidebar').animate({left: 5-$('#sidebar').width()}));\n          }\n          if ($('#sidebar:visible').length) {\n            $('#sidebar').children(':not(#hideinv,#killsidebar)').remove();\n            $('#sidebar').append(squiffy.ui.processText(squiffy.story.sections['sidebar contents'].text));\n            if (squiffy.get('gameover')) {\n              $('#sidebar a').remove();\n            }\n          }\n        };\n        squiffy.story.originalGo = squiffy.story.go;\n        squiffy.story.go = function (section) {\n          console.log(\"go called for \"+section);\n          if (section.match(/^quick:/)) {\n            var sec = squiffy.story.sections[section.replace(/^quick:\\s*/, '')];\n            if (!sec) {\n              console.log(\"No such section: \"+section);\n              return;\n            }\n            squiffy.story.run(sec);\n            squiffy.ui.write('&lt;blockquote style=\"display: block; left: 2em; right: 2em; border: 1px dotted grey;\"&gt;' + sec.text + '&lt;/blockquote&gt;');\n            squiffy.story.save();\n          } else {\n            console.log(\"Running originalGo\");\n            squiffy.story.originalGo (section);\n          }\n          if (squiffy.afterText) {\n            var after = squiffy.afterText;\n            delete(squiffy['afterText']);\n            after();\n          }\n          updateSidebar();\n        };\n        updateSidebar();\n      });\n      // End of game-specific code\n\n    }\n    if (squiffy.get('_section') == \"ui init\") {\n      console.log (\"Moving to first section...\")\n      squiffy.story.go('Start');\n    }\n\n[[Start]]:\n    squiffy.story.go('Continue');\n\n@set potions = 0\n@set bottles = 1\n@set acid = 0\n    \nThis is the starting page! Is it working?\n\n[[Continue]]\n\n[[sidebar container]]:\n&lt;button style=\"position: fixed; top: 6px; left: 2px;\" id=\"showinv\" type=\"button\"&gt;Show sidebar&lt;/button&gt;\n&lt;div id=\"sidebar\" style=\"background-color: white; position: fixed; left: 1px; top: 4px; bottom: 4px; width: 20%; overflow-y: auto; border: 1px double blue;\"&gt;&lt;button style=\"position: absolute; top: 2px; right: 2px;\" id=\"hideinv\"  type=\"button\"&gt;Hide sidebar&lt;/button&gt;&lt;/div&gt;\n\n[[sidebar contents]]:\n\n&lt;p style=\"font-weight: bold;\"&gt;Inventory&lt;/p&gt;\n\n&lt;p&gt;You are {if health=true:healthy}{else: unhealthy}.&lt;/p&gt;\n\n{if potions&gt;0:&lt;p&gt;{if potions&gt;1:Has {potions} potions}{else:Has a potion}. [[Drink potion]](quick:drink potion)&lt;/p&gt;}\n{if acid&gt;0:&lt;p&gt;{if acid&gt;1:Has {acid} flasks of acid}{else:Has an acid flask}. [[Drink acid]](quick:drink acid)&lt;/p&gt;}\n{if bottles&gt;0:&lt;p&gt;{if bottles&gt;1:Has {bottles} empty flasks}{else:Has an empty flask}.&lt;/p&gt;}\n{if mixbottle&gt;0:&lt;p&gt;{if mixbottle&gt;1:Has {mixbottle} flasks}{else:Has a flask} filled with a weird goop you can't pour out. [[Discard]](quick:discard mix)&lt;/p&gt;}\n{if key=true:&lt;p&gt;Has {if dissolvedkey:partially dissolved }key {if not eatenkey:[[Swallow]](quick:eat key)}{else:(swallowed)}&lt;/p&gt;}\n{if soot:&lt;p&gt;Covered in soot.&lt;/p&gt;}\n{if talisman=true:&lt;p&gt;Has weird glowing talisman [[Rub]](quick:rub talisman)&lt;/p&gt;}\n\n[[rub talisman]]:\n@set not talisman\n\nYou rub the talisman, and your hair seems to stand on end. You feel like an epic vision-quest is about to begin. {if bottles&gt;0:{@bottles-=1}{@potions+=1}Suddenly, with a sloshing sound, one of your empty bottles fills up with a rainbow-coloured liquid. }Then the talisman vanishes.\n\n[[eat key]]:\n@set eatenkey\n\nYou know it's a really bad idea, but you swallow the key.\n\n[[Continue]]:\n&lt;p&gt;You see a potion and a key.&lt;/p&gt;\n&lt;p&gt;[[Get the potion]](get potion,takenpotion=true)&lt;/p&gt;\n&lt;p&gt;[[Get the key]](get key)&lt;/p&gt;\n&lt;p&gt;[[Move on]](hallway)&lt;/p&gt;\n\n[[get potion]]:\n\n&lt;p&gt;You pick up the potion&lt;/p&gt;\n@set potions = 1\n{if key=true:}{else:&lt;p&gt;[[Get the key]](get key)&lt;/p&gt;}\n&lt;p&gt;[[Move on]](hallway)&lt;/p&gt;\n\n[[get key]]:\n\n@set key=true\n\n&lt;p&gt;you pick up the key&lt;/p&gt;\n{if not takenpotion:&lt;p&gt;[[Get the potion]](get potion,takenpotion=true)&lt;/p&gt;}\n\n&lt;p&gt;[[Move on]](hallway)&lt;/p&gt;\n\n[[hallway]]:\n\nYou are in a hallway.\n\nDoorways lead to the [[zoo]] and the [[kitchen]].\n\n[[zoo]]:\n\nYou are in the zoo.\n\nYou can go to the [[science lab]] or the [[hallway]].\n\nThere is also a heavily locked cage door{if corroded: with acid burns on it}. You could kick it with all your strength and never make a dent. {if acid&gt;0:Or you could try to [[melt through it with acid]].}{if key=true:Or [[use the key]] to open it.}\n\n[[melt through it with acid]]:\n@dec acid\n@inc bottles\n\n{if corroded:The bars are already melted, and drop right away. But security is charging angrily towards you, so your only option is to proceed [[into the cage]].}{else:{@corroded}The bars start to melt, but one bottle of acid isn't enough to remove them completely. And the zookeeper has called security, chasing you back towards the [[hallway]].}\n\n[[into the cage]]:\n    var completion = 30;\n    $.each(\"bottles potions acid key health talisman eatenkey dissolvedkey mixbottle soot\".split(/ /), function (i, attr) {\n      if (squiffy.get(attr)) {completion+=7};\n    });\n    squiffy.set('complete', completion);\n\n@set gameover\n\nYou step nervously into the zoo cage, wondering what kind of terrifying beast could lie beyond. A second later you see the cutest, most beautiful kitten you have ever laid eyes on, purring happily.\n\nCongratulations, this is as close as this game gets to an ending. I hope you've not found any bugs along the way.\n\nYou achieved {complete}% completion on this play through.\n\n[[use the key]]:\n{if eatenkey:You stick your fingers down your throat and attempt to regurgitate the key. Unfortunately, this doesn't seem to work so well.}{else:The key doesn't seem to fit this door. But the zookeeper has seen you fiddling around, and is charging towards you. You'll have to come back later, once you found the right key.}\n\nWould you like to flee towards the [[hallway]], or the [[science lab]]?\n\n[[science lab]]:\nYou are in a science lab.\n\nThere is a huge vat of acid against one wall. If you want to, you could try [[jumping in]]{if bottles&gt;0:, or [[fill a bottle with acid]]}.\n\nAlternatively, you could go back up the stairs to the [[zoo]], or take the back passage to the [[carnival]].\n\n[[jumping in]]:\n    squiffy.afterText = function () {\n      squiffy.story.go('gameover');\n    };\n\nThat was a very silly thing to do. You are dead. In fact, you are very quickly dissolving.\n\n[[fill a bottle with acid]]:\nYou reach down to the acid vat, and attempt to collect some.\n\n{if bottles&gt;0:{@acid+=1,bottles-=1}You quickly fill {if bottles=0:your empty bottle}{else:one of your bottles} with acid from the bath, being extra careful not to burn yourself.}{else:{@potions-=1,mixbottle+=1}But as you try to fill the bottle, it seems to be full of some sparkling rainbow liquid, very much like a health potion. You end up with a bottle filled with a weird mixture, which quickly solidifies.}\n\nNow you can {if bottles&gt;0:[[fill another]](fill a bottle with acid) or }go to the [[zoo]] or the [[carnival]].\n\n[[carnival]]:\n    if (!squiffy.get('talisman') &amp;&amp; squiffy.get('bottles')) { setTimeout(function () {squiffy.story.go('quick:fortune teller');}, 4000); }\n\nYou are in some kind of carnival or circus. You don't see much of interest, but there are all kinds of snake-oil salesmen trying to sell you weird stuff, and dancers so exotic you don't know where to look.\n\n{if tellerconfused:{if not talisman:{@talisman}A confused-looking fortune teller hands you a strange, mystic talisman. They seem to assume you will know what it means.}}\n\nFrom here, crowds block most of the exits but you can see a way to get inside to either the [[science lab]] or the [[kitchen]].\n\n[[fortune teller]]:\n    squiffy.set('tellerconfused', squiffy.get('bottles')==0);\n    squiffy.set('potions', squiffy.get('potions')+squiffy.get('bottles'));\n    squiffy.set('bottles', 0);\n\nAs you walk away, one of the carnival fortune tellers makes a strange gesture towards your back. You're not sure what happened, but you get a strange urge to look at the bottles you were carrying.\n\n{if tellerconfused:The bottles are exactly in the state you left them.{if not talisman: A second later, he calls out to you.}}\n\n[[drink potion]]:\n@dec potions\n@inc bottles\n\n@set health = true\n\n&lt;p&gt;Gulp! you are now healthy!&lt;/p&gt;\n\n[[kitchen]]:\n\nYou are in a small galley kitchen that lies just off the main [[hallway]]. A back door leads outside, where there seems to be a [[carnival]] going on.\n\nThere is also a large sink, and a pile of glass [[bottles]](take bottle) which look like they have just been cleaned.\n\n[[take bottle]]:\n    if (squiffy.get('potions')+squiffy.get('bottles')+squiffy.get('acid') &gt; 3) {\n      squiffy.story.go(\"handsfull\");\n    } else {\n      squiffy.set('bottles', squiffy.get('bottles')+1);\n    }\n    \nYou pick up a{if bottles&gt;1:nother} bottle from the pile.\n\nWould yout like to [[take another]](take bottle), or go back to the [[hallway]], or out to the [[carnival]]?\n\n[[handsfull]]:\nYou're not some kind of octopus! Your hands are full\n\nYou can go to the [[hallway]], or the [[carnival]].\n\n[[drink acid]]:\n    squiffy.afterText = function () {\n      if (!squiffy.get('health')) {\n        squiffy.story.go('gameover');\n      } else {\n        squiffy.set('health', false);\n      }\n    };\n\n@dec acid\n@inc bottles\n\nYou drink a bottle of acid. That was a bit dumb.\n{if health=true:You are no longer healthy.{if eatenkey:{@not eatenkey,dissolvedkey} You immediately throw up, and can recover a rather corroded key from the pool on the floor.}}{else:You were already sick, and now you are dead.}\n\n[[discard mix]]:\n@set mixbottle = 0\n@set potions = 0\n@set acid = 0\n@set not health\n@set soot\n\n{if not eatenkey:{@not key}}\n\nYou throw the weird mixture away and it explodes, scorching your clothes and burning up most of the things you were carrying.\n\n[[gameover]]:\n\n@set gameover = true\n\nGAME OVER\n\nThis is the end of the game for now, but there should be a restart link somewhere in the top right.\n</code></pre>\n</details>\n\n",
      "PostDate": "2020-11-25T15:21:24.2609478Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "42dbebc4-3cb2-42bb-9533-dc02506404f3",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I made the change there in that quiffy.template.js file, and the global passage works!  The story works great that way.  The only thing about that is when you run the story in the editor, it gives you a nice warning for each call to that global passage:\r\n\r\n    WARNING: null line 9: In section 'another' there is a link to a passage called [globalpassage], which doesn't exist\r\n\r\nSo, I'm looking in that same folder at ````compiler.js```` at line 499 where it has the code for showing the warning.  Ah, but this would take me hours to figure out.  I'm thinking we have to add that global passage to some link list.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I made the change there in that quiffy.template.js file, and the global passage works!  The story works great that way.  The only thing about that is when you run the story in the editor, it gives you a nice warning for each call to that global passage:</p>\n<pre><code>WARNING: null line 9: In section 'another' there is a link to a passage called [globalpassage], which doesn't exist\n</code></pre>\n<p>So, I'm looking in that same folder at <code>compiler.js</code> at line 499 where it has the code for showing the warning.  Ah, but this would take me hours to figure out.  I'm thinking we have to add that global passage to some link list.</p>\n\n",
      "PostDate": "2020-11-25T15:44:15.9079514Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "072d40a9-e184-4ea3-803b-767d3ca483f0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One more thing to remember: If moving to a new computer, you'll have to remember to make the same changes :p\r\nAnd remember that this isn't standard functionality when helping other people on the forum.\r\n\r\n> The only thing about that is when you run the story in the editor, it gives you a nice warning for each call to that global passage:\r\n\r\nI guess the online editor doesn't do that, because I've never seen anything like that. I've spent too long trying to debug something, and it turns out to be I've mistyped a section or passage name.\r\n\r\nIn any case, it would be nice to tidy up the warning.\r\n\r\n> So, I'm looking in that same folder at `compiler.js` at line 499 where it has the code for showing the warning. Ah, but this would take me hours to figure out. I'm thinking we have to add that global passage to some link list.\r\n\r\nLooks like the change needs to be at line 470 above,  where it gets the list of names to check against.\r\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\r\n            if (!story) return;\r\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b>section.passages</b>); }, this);\r\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\r\n        };</code></pre>\r\n\r\nThe parameter `section.passages` there is the list that the current links should be checked against. A similar function `checkSectionLinks` uses `story.sections`.\r\n\r\nDepending what version of javascript we're using here, we might be able to replace `section.passages` in that line as follows:\r\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\r\n            if (!story) return;\r\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b style=\"color:green\">{...section.passages, ...story.sections[''].passages}</b>); }, this);\r\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\r\n        };</code></pre>\r\nHowever, I'm not sure if that would cause an error if you don't have a global section.\r\nMight be better to do:\r\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\r\n            if (!story) return;\r\n            <b style=\"color:green\">var validPassages = section.passages;\r\n            if (story.sections['']) {\r\n                if (story.sections[''].passages) {\r\n                    validPassages = Object.assign({}, validPassages, story.sections[''].passages);\r\n                }\r\n            }</b>\r\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b style=\"color:green\">validPassages</b>); }, this);\r\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\r\n        };</code></pre>\r\n\r\n(this is off the top of my head, so make a backup before testing)\r\n\r\n(for reference, ways to combine multiple plain objects would include:\r\nSpread syntax: `{...object1, ...object2}` (only in recent versions of javascript)\r\nUsing assign: `Object.assign({}, object1, object2)` (if you omit the `{},` it would modify the first object, which probably isn't desirable)",
      "EditableFormat": "markdown",
      "HTML": "<p>One more thing to remember: If moving to a new computer, you'll have to remember to make the same changes :p<br>\nAnd remember that this isn't standard functionality when helping other people on the forum.</p>\n<blockquote>\n<p>The only thing about that is when you run the story in the editor, it gives you a nice warning for each call to that global passage:</p>\n</blockquote>\n<p>I guess the online editor doesn't do that, because I've never seen anything like that. I've spent too long trying to debug something, and it turns out to be I've mistyped a section or passage name.</p>\n<p>In any case, it would be nice to tidy up the warning.</p>\n<blockquote>\n<p>So, I'm looking in that same folder at <code>compiler.js</code> at line 499 where it has the code for showing the warning. Ah, but this would take me hours to figure out. I'm thinking we have to add that global passage to some link list.</p>\n</blockquote>\n<p>Looks like the change needs to be at line 470 above,  where it gets the list of names to check against.</p>\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\n            if (!story) return;\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b>section.passages</b>); }, this);\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\n        };</code></pre>\n<p>The parameter <code>section.passages</code> there is the list that the current links should be checked against. A similar function <code>checkSectionLinks</code> uses <code>story.sections</code>.</p>\n<p>Depending what version of javascript we're using here, we might be able to replace <code>section.passages</code> in that line as follows:</p>\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\n            if (!story) return;\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b style=\"color: green\">{...section.passages, ...story.sections[''].passages}</b>); }, this);\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\n        };</code></pre>\n<p>However, I'm not sure if that would cause an error if you don't have a global section.<br>\nMight be better to do:</p>\n<pre><code>        this.checkPassageLinks = function(story, links, section, passage) {\n            if (!story) return;\n            <b style=\"color: green\">var validPassages = section.passages;\n            if (story.sections['']) {\n                if (story.sections[''].passages) {\n                    validPassages = Object.assign({}, validPassages, story.sections[''].passages);\n                }\n            }</b>\n            var badLinks = _.filter(links, function(m) { return !this.linkDestinationExists(m, <b style=\"color: green\">validPassages</b>); }, this);\n            this.showBadLinksWarning(badLinks, 'passage', '[', ']', section, passage);\n        };</code></pre>\n<p>(this is off the top of my head, so make a backup before testing)</p>\n<p>(for reference, ways to combine multiple plain objects would include:<br>\nSpread syntax: <code>{...object1, ...object2}</code> (only in recent versions of javascript)<br>\nUsing assign: <code>Object.assign({}, object1, object2)</code> (if you omit the <code>{},</code> it would modify the first object, which probably isn't desirable)</p>\n\n",
      "PostDate": "2020-11-25T17:02:25.1792946Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cfdd9fa8-c12a-40e4-af31-d9b8fe1d80a4",
      "UserId": 516366,
      "Username": "bgmCoder",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5180c64c64547804d4a874dcd681e980?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, I'm aware that a new computer or even a program update or reinstall will undo this tinkering.\r\n\r\nI made the changes to compiler.js as you proposed and it works like a charm!\r\n\r\nYou know, the desktop editor gives warnings about your silly game, too.  When you build it, it works just fine, but the editor gives errors when you load it.   Similar situation.  It doesn't like the \"quick:\" prefixes for your passages, saying they don't exist.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, I'm aware that a new computer or even a program update or reinstall will undo this tinkering.</p>\n<p>I made the changes to compiler.js as you proposed and it works like a charm!</p>\n<p>You know, the desktop editor gives warnings about your silly game, too.  When you build it, it works just fine, but the editor gives errors when you load it.   Similar situation.  It doesn't like the \"quick:\" prefixes for your passages, saying they don't exist.</p>\n\n",
      "PostDate": "2020-11-25T20:00:21.0904704Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "50d46a28-48f2-4e47-9da3-70d39b097f70",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I expected it would. As I've only used the online editor, I've not seen those messages. I've just been trying things to see what  works.\r\n\r\nIf I was building that game now, I would probably just use passages in the master section for the inventory sections; which would be a lot easier. It was an experiment, really; poking around in the engine to get the requested result.\r\n\r\n<hr />\r\n\r\nOne thing I do need to do, though, is make the script-initialising script work correctly if the `_transition` attribute is used for its intended purpose. I'm not quite sure what `_transition` was meant for, but it probably wasn't this.\r\n\r\nTo make my modified functions load (so that I can add extra features as needed to any specific game), while still allowing `squiffy.ui.transition` to behave as originally designed, I think it would look something like this:\r\n```\r\n[[ui init]]:\r\n    squiffy.story.save = function() {\r\n      squiffy.set('_output', squiffy.ui.output.html());\r\n      var initialiser = \"squiffy.story.sections['ui init'].js\";\r\n      var transition = squiffy.get('_transition');\r\n      if (transition != initialiser) {\r\n        squiffy.set('_real_transition', transition);\r\n      }\r\n      squiffy.set('_transition', initialiser);\r\n    };\r\n\r\n    // Game-specific code goes here\r\n\r\n    var realtransition = squiffy.get('_real_transition');\r\n    if (realtransition) {\r\n      eval('(' + realtransition + ')()');\r\n    }\r\n\r\n    // redirect to the real first section if necessary:\r\n    squiffy.story.go('intro');\r\n```\r\n\r\nThis means that other sections should be able to have code like:\r\n```\r\n    squiffy.ui.transition(function () {\r\n      // some code here that changes the colour scheme during this section, perhaps?\r\n      // or whatever the intended use of this function was\r\n\r\n      // It will be run immediately,\r\n      // and again on if the game is refreshed/resumed while in this section\r\n    });\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I expected it would. As I've only used the online editor, I've not seen those messages. I've just been trying things to see what  works.</p>\n<p>If I was building that game now, I would probably just use passages in the master section for the inventory sections; which would be a lot easier. It was an experiment, really; poking around in the engine to get the requested result.</p>\n<hr>\n<p>One thing I do need to do, though, is make the script-initialising script work correctly if the <code>_transition</code> attribute is used for its intended purpose. I'm not quite sure what <code>_transition</code> was meant for, but it probably wasn't this.</p>\n<p>To make my modified functions load (so that I can add extra features as needed to any specific game), while still allowing <code>squiffy.ui.transition</code> to behave as originally designed, I think it would look something like this:</p>\n<pre><code>[[ui init]]:\n    squiffy.story.save = function() {\n      squiffy.set('_output', squiffy.ui.output.html());\n      var initialiser = \"squiffy.story.sections['ui init'].js\";\n      var transition = squiffy.get('_transition');\n      if (transition != initialiser) {\n        squiffy.set('_real_transition', transition);\n      }\n      squiffy.set('_transition', initialiser);\n    };\n\n    // Game-specific code goes here\n\n    var realtransition = squiffy.get('_real_transition');\n    if (realtransition) {\n      eval('(' + realtransition + ')()');\n    }\n\n    // redirect to the real first section if necessary:\n    squiffy.story.go('intro');\n</code></pre>\n<p>This means that other sections should be able to have code like:</p>\n<pre><code>    squiffy.ui.transition(function () {\n      // some code here that changes the colour scheme during this section, perhaps?\n      // or whatever the intended use of this function was\n\n      // It will be run immediately,\n      // and again on if the game is refreshed/resumed while in this section\n    });\n</code></pre>\n\n",
      "PostDate": "2020-11-25T20:54:20.2333734Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c428eb10-b52a-497e-9c45-fa160cf2b11e",
      "UserId": 484065,
      "Username": "User72",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7c7b830e0b68f60e9caaf69fd55389e4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Maybe you could just do this:\r\n(I haven't tried it, but it will probably work)\r\n```[[]]:\r\n[Global Passage]:\r\ncode here\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Maybe you could just do this:<br>\n(I haven't tried it, but it will probably work)</p>\n<pre><code>[Global Passage]:\ncode here\n</code></pre>\n\n",
      "PostDate": "2020-11-29T04:11:05.7205437Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d7d6846-dcc7-4dc2-b4f3-9e4f1801311f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@User72:\r\nNo, that only works if it's in the same section as the link.\r\n\r\nI would have expected this to work, but on looking at the code it seems not. So I created the code above to make it work :)",
      "EditableFormat": "markdown",
      "HTML": "<p>@User72:<br>\nNo, that only works if it's in the same section as the link.</p>\n<p>I would have expected this to work, but on looking at the code it seems not. So I created the code above to make it work :)</p>\n\n",
      "PostDate": "2020-11-29T10:14:17.8263286Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5fd84bb8-2ee1-43d5-9e53-fe4f5ac9cba5",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Came in late in this one. You pretty much want a reusable section. I've done something like that before, and I'm going to try to remember how it works...\r\n\r\n```\r\n[[firstSec]]:\r\nWe are in the first section.\r\n\r\n{@retAddr=firstSec}\r\n\r\n[[Go to the special section]](mulituse)\r\n\r\n[[Go to the next section]](nextSec)\r\n\r\n[[nextSec]]:\r\n\r\nHere we are in the second section.\r\n\r\n{@retAddr=nextSec}\r\n\r\n[[Go to the special section]](mulituse)\r\n\r\n[[mulituse]]:\r\n\r\nWe are now in the multiuse section.\r\n\r\n[[Go home]]({retAddr})\r\n```\r\nWhenever you call multiuse, you need to make sure you've set retAddr to where you want to return to. It dosn't have to be the calling section (I just did that to make it obvious). Odds are you'll want to advance the plot and move forward. But this let's you reuse the same code can come back easily.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Came in late in this one. You pretty much want a reusable section. I've done something like that before, and I'm going to try to remember how it works...</p>\n<pre><code>[[firstSec]]:\nWe are in the first section.\n\n{@retAddr=firstSec}\n\n[[Go to the special section]](mulituse)\n\n[[Go to the next section]](nextSec)\n\n[[nextSec]]:\n\nHere we are in the second section.\n\n{@retAddr=nextSec}\n\n[[Go to the special section]](mulituse)\n\n[[mulituse]]:\n\nWe are now in the multiuse section.\n\n[[Go home]]({retAddr})\n</code></pre>\n<p>Whenever you call multiuse, you need to make sure you've set retAddr to where you want to return to. It dosn't have to be the calling section (I just did that to make it obvious). Odds are you'll want to advance the plot and move forward. But this let's you reuse the same code can come back easily.</p>\n\n",
      "PostDate": "2020-12-02T20:44:33.8814104Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "115bd415-10ce-4c37-b765-631ba5547421",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Whenever you call multiuse, you need to make sure you've set retAddr to where you want to return to.\r\n\r\nThat's another way of doing it, but ends up a little clunky setting an attribute in every section.\r\n\r\nYou could simplify this with something like:\r\n```\r\n[[]]:\r\n    if(!squiffy.story.section.text.match(/\\{@?retAddr/)) {\r\n      squiffy.set ('retAddr', squiffy.get('_section'));\r\n    }\r\n```\r\n\r\nIf I got that right off the top of my head, it should set retAddr to the current section name whenever you visit a section that doesn't contain a link to it. Could be improved, but it should mean you don't always need to remember to include the `{@retAddr=nextSec}` line. But you can if you want to override it to return somewhere else (for example if the current section has effects that you don't want to repeat on returning).\r\n\r\nI think I prefer the 'global passages' approach myself, but that's probably a personal preference thing.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Whenever you call multiuse, you need to make sure you've set retAddr to where you want to return to.</p>\n</blockquote>\n<p>That's another way of doing it, but ends up a little clunky setting an attribute in every section.</p>\n<p>You could simplify this with something like:</p>\n<pre><code>[[]]:\n    if(!squiffy.story.section.text.match(/\\{@?retAddr/)) {\n      squiffy.set ('retAddr', squiffy.get('_section'));\n    }\n</code></pre>\n<p>If I got that right off the top of my head, it should set retAddr to the current section name whenever you visit a section that doesn't contain a link to it. Could be improved, but it should mean you don't always need to remember to include the <code>{@retAddr=nextSec}</code> line. But you can if you want to override it to return somewhere else (for example if the current section has effects that you don't want to repeat on returning).</p>\n<p>I think I prefer the 'global passages' approach myself, but that's probably a personal preference thing.</p>\n\n",
      "PostDate": "2020-12-03T01:41:42.3783229Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ba8290eb-1031-4840-9ab8-1acba46fcd6d",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, I try to stay as much in squiffy as I can. The editor isn't very good and if you use JS code, you have to handle it very carefully.\r\n\r\nSometimes, I have to admit, it feels a little weird hopping from JS to squiffy and back in one block of code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, I try to stay as much in squiffy as I can. The editor isn't very good and if you use JS code, you have to handle it very carefully.</p>\n<p>Sometimes, I have to admit, it feels a little weird hopping from JS to squiffy and back in one block of code.</p>\n\n",
      "PostDate": "2020-12-04T03:32:09.1108398Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
