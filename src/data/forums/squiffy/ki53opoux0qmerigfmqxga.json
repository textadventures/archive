{
  "Topic": {
    "TopicId": "ki53opoux0qmerigfmqxga",
    "ForumId": "24",
    "Title": "A word of warning to squiffy users using JS",
    "LastUpdated": "2022-02-21T16:10:56.2597471Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3a98eca1-01a3-4e69-8f34-6c51b5fa782c",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've found a little gotcha that I'm aware of when you use JS in squiffy.\r\n\r\nLet's say you are using a randomizer to figure out where to go, in solid JS...\r\n\r\n```\r\n    set(\"path2\",squiffy.getRndInteger(1,3));\r\n\r\n    if (get(\"path2\")==1){squiffy.story.go(\"Section 1\");}\r\n    if (get(\"path2\")==2){squiffy.story.go(\"Section 2\");}\r\n    if (get(\"path2\")==3){squiffy.story.go(\"Section 3\");}\r\n```\r\nI suddenly had this start to crash. Forced the randomizer to go down different paths (by giving it, say, a range of (2,2)) and even that would crash from time to time. Worse, it would occasionally run the wrong section.\r\n\r\nThis baffled me until I was out on a walk and suddenly know what the reason was. Can you guess?\r\n\r\nAnswer: Some of my sections I went to ALSO reused the variable \"path2\". This mean that even through I was in the initial section and had jumped to Section1, Section1 might rerandomize path2. Since I think there are threads involved here, I was still in the original section. So, if this piece made path2 1, and it ran Section1, which stated by rolling rath2 to 3, suddenly you'd go into Section3. Worse, you might even randomize to something you didn't want at all.\r\n\r\nSo yes, be careful reusing variables and note that it seams that squiffy might be doing a squiffy.story.go, I think it's still in the original  code until it completes.\r\n\r\nNote that I have no solid basis for this - I certainly don't know how the internals of squiffy works. All I know is that when I changed all my path2 variable to path2X, it never failed again...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I've found a little gotcha that I'm aware of when you use JS in squiffy.</p>\n<p>Let's say you are using a randomizer to figure out where to go, in solid JS...</p>\n<pre><code>    set(\"path2\",squiffy.getRndInteger(1,3));\n\n    if (get(\"path2\")==1){squiffy.story.go(\"Section 1\");}\n    if (get(\"path2\")==2){squiffy.story.go(\"Section 2\");}\n    if (get(\"path2\")==3){squiffy.story.go(\"Section 3\");}\n</code></pre>\n<p>I suddenly had this start to crash. Forced the randomizer to go down different paths (by giving it, say, a range of (2,2)) and even that would crash from time to time. Worse, it would occasionally run the wrong section.</p>\n<p>This baffled me until I was out on a walk and suddenly know what the reason was. Can you guess?</p>\n<p>Answer: Some of my sections I went to ALSO reused the variable \"path2\". This mean that even through I was in the initial section and had jumped to Section1, Section1 might rerandomize path2. Since I think there are threads involved here, I was still in the original section. So, if this piece made path2 1, and it ran Section1, which stated by rolling rath2 to 3, suddenly you'd go into Section3. Worse, you might even randomize to something you didn't want at all.</p>\n<p>So yes, be careful reusing variables and note that it seams that squiffy might be doing a squiffy.story.go, I think it's still in the original  code until it completes.</p>\n<p>Note that I have no solid basis for this - I certainly don't know how the internals of squiffy works. All I know is that when I changed all my path2 variable to path2X, it never failed again...</p>\n\n",
      "PostDate": "2022-02-21T16:10:56.2597471Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e89de590-2a39-40ae-b60b-ec8574f72820",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Since I think there are threads involved here, I was still in the original section.\r\n\r\nNo threads. But `squiffy.story.go` runs all the JS in the specified section and displays its text. So your call to `squiffy.story.go` finishes after the page has finished displaying.\r\n\r\nThis is exactly what `else if` is for. Although in this case, I'm not sure why you are using a Squiffy attribute at all. If you just used a variable:\r\n```\r\n    var path = squiffy.getRndInteger(1,3);\r\n\r\n    if (path == 1){squiffy.story.go(\"Section 1\");}\r\n    if (path == 2){squiffy.story.go(\"Section 2\");}\r\n    if (path == 3){squiffy.story.go(\"Section 3\");}\r\n```\r\nyour code is faster, and avoids this bug.\r\n\r\nThe only reason to use `squiffy.set` and `squiffy.get` is if you are generating a number for use in the next section.\r\n(yes, I know that's only semi-relevant. But if you use JS variables for stuff within a script, and Squiffy attributes for passing values between sections, you're less likely to run into this situation.\r\n\r\nDepending on your structure, it may be more efficient (and no less readable) to do something like:\r\n```\r\n    squiffy.story.go([\"Section 1\",\"Section 2\",\"Section 3\"][squiffy.getRndInteger(0,2)]);\r\n```\r\nor even:\r\n```\r\n    squiffy.story.go(\"Section \" + squiffy.getRndInteger(1,3));\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Since I think there are threads involved here, I was still in the original section.</p>\n</blockquote>\n<p>No threads. But <code>squiffy.story.go</code> runs all the JS in the specified section and displays its text. So your call to <code>squiffy.story.go</code> finishes after the page has finished displaying.</p>\n<p>This is exactly what <code>else if</code> is for. Although in this case, I'm not sure why you are using a Squiffy attribute at all. If you just used a variable:</p>\n<pre><code>    var path = squiffy.getRndInteger(1,3);\n\n    if (path == 1){squiffy.story.go(\"Section 1\");}\n    if (path == 2){squiffy.story.go(\"Section 2\");}\n    if (path == 3){squiffy.story.go(\"Section 3\");}\n</code></pre>\n<p>your code is faster, and avoids this bug.</p>\n<p>The only reason to use <code>squiffy.set</code> and <code>squiffy.get</code> is if you are generating a number for use in the next section.<br>\n(yes, I know that's only semi-relevant. But if you use JS variables for stuff within a script, and Squiffy attributes for passing values between sections, you're less likely to run into this situation.</p>\n<p>Depending on your structure, it may be more efficient (and no less readable) to do something like:</p>\n<pre><code>    squiffy.story.go([\"Section 1\",\"Section 2\",\"Section 3\"][squiffy.getRndInteger(0,2)]);\n</code></pre>\n<p>or even:</p>\n<pre><code>    squiffy.story.go(\"Section \" + squiffy.getRndInteger(1,3));\n</code></pre>\n\n",
      "PostDate": "2022-02-21T16:31:04.1908329Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "70ab0d0b-1d4e-4792-b158-e12baba7f6c6",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is a pretty slick trick...\r\n\r\n```\r\nsquiffy.story.go([\"Section 1\",\"Section 2\",\"Section 3\"][squiffy.getRndInteger(0,2)]);\r\n```\r\nLike most squiffy users, I use JS when I have to. If squiffy came up with a couple more things I needed (like a good randomizer and a couple of other things) I'd be happy not using it at all. As it stands, all I can do is google solutions and be wary of pitfalls.\r\n\r\nThe one danger for someone like me, using JS in the editor, is that failures don't identify. You only know something is wrong. And this is why I do only a couple of JS lines at a time, carefully recompiling.\r\n\r\nThanks for the feedback!",
      "EditableFormat": "markdown",
      "HTML": "<p>This is a pretty slick trick...</p>\n<pre><code>squiffy.story.go([\"Section 1\",\"Section 2\",\"Section 3\"][squiffy.getRndInteger(0,2)]);\n</code></pre>\n<p>Like most squiffy users, I use JS when I have to. If squiffy came up with a couple more things I needed (like a good randomizer and a couple of other things) I'd be happy not using it at all. As it stands, all I can do is google solutions and be wary of pitfalls.</p>\n<p>The one danger for someone like me, using JS in the editor, is that failures don't identify. You only know something is wrong. And this is why I do only a couple of JS lines at a time, carefully recompiling.</p>\n<p>Thanks for the feedback!</p>\n\n",
      "PostDate": "2022-02-22T18:39:19.6437589Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63b26a97-e96b-4763-a89f-00e58741c5c3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The one danger for someone like me, using JS in the editor, is that failures don't identify. You only know something is wrong. And this is why I do only a couple of JS lines at a time, carefully recompiling.\r\n\r\nI don't know about the desktop editor, but on the web JS errors are reasonably well documented. You usually have to press something (I'm used to Ctrl+Shift+J, but I've heard people saying F12 in some browsers) to view the JS errors. Sadly it doesn't give a useful line number (or gives a line number in `story.js`, which doesn't always look much like your original code); but it will at least tell you what the problem is.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The one danger for someone like me, using JS in the editor, is that failures don't identify. You only know something is wrong. And this is why I do only a couple of JS lines at a time, carefully recompiling.</p>\n</blockquote>\n<p>I don't know about the desktop editor, but on the web JS errors are reasonably well documented. You usually have to press something (I'm used to Ctrl+Shift+J, but I've heard people saying F12 in some browsers) to view the JS errors. Sadly it doesn't give a useful line number (or gives a line number in <code>story.js</code>, which doesn't always look much like your original code); but it will at least tell you what the problem is.</p>\n\n",
      "PostDate": "2022-02-22T21:28:28.6383538Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d18219d0-8329-488d-bb09-653b9adfe2a3",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The offline editor will tell you what the problem is, like \"expected ')' \". Of course, I'm looking at a sea of nested parens. No line numbers. Compile early, compile often.",
      "EditableFormat": "markdown",
      "HTML": "<p>The offline editor will tell you what the problem is, like \"expected ')' \". Of course, I'm looking at a sea of nested parens. No line numbers. Compile early, compile often.</p>\n\n",
      "PostDate": "2022-02-25T14:44:16.119795Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
