{
  "Topic": {
    "TopicId": "5016",
    "ForumId": "24",
    "Title": "Squiffy: Basic Javascript Help",
    "LastUpdated": "2015-02-01T19:22:50+00:00",
    "ReplyCount": 1
  },
  "Posts": [
    {
      "PostId": "34361",
      "UserId": 0,
      "Username": "pzolla",
      "UserAvatar": null,
      "UserGravatar": "7b4b436eab19d6b8493f0483f302d010",
      "EditableText": "I was wondering if someone could assist in explaining something.  I am learning JavaScript and am working my way through the Squiffy code.  This function:\n\nString.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/{(\\d+)}/g, function(match, number) { \n      return typeof args[number] != 'undefined'\n        ? args[number]\n        : match\n      ;\n    });\n};\n\nWhat I believe I understand is that this is a method added to the String prototype that assigns the arguments object which delivers the arguments in an 'array-esque' style where you can use index to reference but it is not an array.  It then looks at the string and replaces everything between the { } with the unnamed function.  Within the function I understand that it is basically returns the result of an 'if then else' statement'.\n\nWhat I am struggling with is where the values of (match, number) originate from?  If I console them out they are {0} and (0).\n\nI know I am missing something at a pretty basic level and would appreciate if someone could point me in the right direction.",
      "EditableFormat": "bbcode",
      "HTML": "I was wondering if someone could assist in explaining something.  I am learning JavaScript and am working my way through the Squiffy code.  This function:<br/><br/>String.prototype.format = function() {<br/>    var args = arguments;<br/>    return this.replace(/{(\\d+)}/g, function(match, number) { <br/>      return typeof args[number] != 'undefined'<br/>        ? args[number]<br/>        : match<br/>      ;<br/>    });<br/>};<br/><br/>What I believe I understand is that this is a method added to the String prototype that assigns the arguments object which delivers the arguments in an 'array-esque' style where you can use index to reference but it is not an array.  It then looks at the string and replaces everything between the { } with the unnamed function.  Within the function I understand that it is basically returns the result of an 'if then else' statement'.<br/><br/>What I am struggling with is where the values of (match, number) originate from?  If I console them out they are {0} and (0).<br/><br/>I know I am missing something at a pretty basic level and would appreciate if someone could point me in the right direction.",
      "PostDate": "2015-02-01T16:42:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34370",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "That code is actually from here: <!-- m --><a class=\"postlink\" href=\"http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\">http://stackoverflow.com/questions/6104 ... ing-format</a><!-- m -->\n\nIt's a JavaScript implementation of something like string.Format which exists in C#. It makes it easier to interpolate strings. For example, if I wanted to greet somebody by their first and last name, and tell them their age, normally I would have to do something like this...\n\n[code:2l7cb4iw]\nvar greeting = &quot;Hello &quot; + firstName + &quot; &quot; + lastName + &quot;, you are &quot; + age + &quot;&#46;&quot;;\n[/code:2l7cb4iw]\n\nBy adding this &quot;format&quot; function to strings, I can do it like this:\n\n[code:2l7cb4iw]\nvar greeting = &quot;Hello {0} {1}, you are {2}&quot;&#46;format(firstName, lastName, age);\n[/code:2l7cb4iw]\n\nThe way it works is: the variable &quot;args&quot; is an array of all arguments passed to the format function. So in the example above, the array is [firstName, lastName, age]. Then it calls this.replace with a regular expression that finds digits inside braces. It runs a function for every occurrence, and this function pulls the relevant value out of the arguments array.\n\nThe latest version of JavaScript allows for template strings (<!-- m --><a class=\"postlink\" href=\"http://tc39wiki.calculist.org/es6/template-strings/\">http://tc39wiki.calculist.org/es6/template-strings/</a><!-- m -->), so in the future we'll be able to do this easily without having to create our own format function.",
      "EditableFormat": "bbcode",
      "HTML": "That code is actually from here: <!-- m --><a class=\"postlink\" href=\"http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\">http://stackoverflow.com/questions/6104 ... ing-format</a><!-- m --><br/><br/>It's a JavaScript implementation of something like string.Format which exists in C#. It makes it easier to interpolate strings. For example, if I wanted to greet somebody by their first and last name, and tell them their age, normally I would have to do something like this...<br/><br/><pre><code><br/>var greeting = &quot;Hello &quot; + firstName + &quot; &quot; + lastName + &quot;, you are &quot; + age + &quot;&#46;&quot;;<br/></code></pre><br/><br/>By adding this &quot;format&quot; function to strings, I can do it like this:<br/><br/><pre><code><br/>var greeting = &quot;Hello {0} {1}, you are {2}&quot;&#46;format(firstName, lastName, age);<br/></code></pre><br/><br/>The way it works is: the variable &quot;args&quot; is an array of all arguments passed to the format function. So in the example above, the array is [firstName, lastName, age]. Then it calls this.replace with a regular expression that finds digits inside braces. It runs a function for every occurrence, and this function pulls the relevant value out of the arguments array.<br/><br/>The latest version of JavaScript allows for template strings (<!-- m --><a class=\"postlink\" href=\"http://tc39wiki.calculist.org/es6/template-strings/\">http://tc39wiki.calculist.org/es6/template-strings/</a><!-- m -->), so in the future we'll be able to do this easily without having to create our own format function.",
      "PostDate": "2015-02-01T19:22:50+00:00",
      "LastEditDate": null
    }
  ]
}
