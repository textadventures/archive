{
  "Topic": {
    "TopicId": "14p5poor5eq1sxhzhrkpma",
    "ForumId": "24",
    "Title": "More Squiffy Loops by one None-Too-Bright for people who want to make Squiffy more automatic",
    "LastUpdated": "2021-09-25T04:43:17.9402751Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c537a1b2-130f-41e5-9357-d4319313edcf",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```<input>```s, ```<textarea>```s, and ```<span contenteditable=\"true\">``` let the player have their say, but it's bothersome to make Squiffy get the input. When I made a parser-based game, I got really tired of repeatedly needing to copy>paste>change labels and variables>copy>paste>change>copy>paste>change. \r\n\r\nWhile the below, unholy illegitimate son of Squiffy and JS, does not parse or interpret the input, at least it keeps one from having to mess with JS for each and every basic input. \r\n\r\nOf course I'll be delighted if any of our friendly neighborhood JS heroes (Here's lookin' at you K.V., Bluevoss, and the magnificent mrangel.) want to magically turn this cancerous frog into a healthy Prince(ss) of ```[[]]:``` or  Gender-Neutral Heir to the Throne of ```story.js```!\r\n\r\n```@start start\r\n\r\n[[start]]:\r\n\r\nFirst Name: <input id=\"fname\" value=\"John\"><br>\r\nMiddle Name:  <input id=\"mname\" value=\"Jacob\"><br>\r\nSurname: <input id=\"sname\" value=\"Jingleheimer\"><br>\r\nMother's Maiden Name: <input id=\"mmname\" value=\"Schmidt\"> [[Go]](enterInputs, next=second)\r\n\r\n\r\n[[second]]:\r\n\r\n\r\nFull name: {fname} {mname} {sname} {mmname} (His name is my name, too!)\r\n\r\n\r\n[[enterInputs]]:\r\n@inc loops\r\n@inc id\r\n@inc value\r\n    var id = get(\"id\");\r\n    var value = get(\"value\");\r\n    var loops = get(\"loops\");\r\n\r\n    var inputs = document.getElementsByTagName(\"input\").length;\r\n    var id = document.getElementsByTagName(\"input\")[inputs - loops].id;\r\n    var value = document.getElementsByTagName(\"input\")[inputs - loops].value;\r\n    set(id, value);\r\n    \r\n    var next = get(\"next\");\r\n    if (loops == inputs ){squiffy.story.go(next);}\r\n    else{squiffy.story.go(\"enterInputs\");}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p><code>&lt;input&gt;</code>s, <code>&lt;textarea&gt;</code>s, and <code>&lt;span contenteditable=\"true\"&gt;</code> let the player have their say, but it's bothersome to make Squiffy get the input. When I made a parser-based game, I got really tired of repeatedly needing to copy&gt;paste&gt;change labels and variables&gt;copy&gt;paste&gt;change&gt;copy&gt;paste&gt;change.</p>\n<p>While the below, unholy illegitimate son of Squiffy and JS, does not parse or interpret the input, at least it keeps one from having to mess with JS for each and every basic input.</p>\n<p>Of course I'll be delighted if any of our friendly neighborhood JS heroes (Here's lookin' at you K.V., Bluevoss, and the magnificent mrangel.) want to magically turn this cancerous frog into a healthy Prince(ss) of <code>[[]]:</code> or  Gender-Neutral Heir to the Throne of <code>story.js</code>!</p>\n<pre><code>\n[[start]]:\n\nFirst Name: &lt;input id=\"fname\" value=\"John\"&gt;&lt;br&gt;\nMiddle Name:  &lt;input id=\"mname\" value=\"Jacob\"&gt;&lt;br&gt;\nSurname: &lt;input id=\"sname\" value=\"Jingleheimer\"&gt;&lt;br&gt;\nMother's Maiden Name: &lt;input id=\"mmname\" value=\"Schmidt\"&gt; [[Go]](enterInputs, next=second)\n\n\n[[second]]:\n\n\nFull name: {fname} {mname} {sname} {mmname} (His name is my name, too!)\n\n\n[[enterInputs]]:\n@inc loops\n@inc id\n@inc value\n    var id = get(\"id\");\n    var value = get(\"value\");\n    var loops = get(\"loops\");\n\n    var inputs = document.getElementsByTagName(\"input\").length;\n    var id = document.getElementsByTagName(\"input\")[inputs - loops].id;\n    var value = document.getElementsByTagName(\"input\")[inputs - loops].value;\n    set(id, value);\n    \n    var next = get(\"next\");\n    if (loops == inputs ){squiffy.story.go(next);}\n    else{squiffy.story.go(\"enterInputs\");}\n</code></pre>\n\n",
      "PostDate": "2021-09-25T04:43:17.9402751Z",
      "LastEditDate": "2021-09-25T05:46:18.4845785Z",
      "link": null
    },
    {
      "PostId": "1d8919e8-6668-446e-b7e7-b5fa0195210d",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can even abbreviate the HTML portion with Squiffy.\r\n\r\n```\r\n@set MY = <input id=\"\r\n@set IS = \"/>\r\n\r\nFirst Name: {MY}first name{IS}<br>\r\nMiddle Name:  {MY}middle name{IS}<br>\r\nSurname: {MY}surname{IS}<br>\r\nMother's Maiden Name: {MY}mothers maiden name{IS}\r\n\r\n[[Go]](enterInputs, next=second)\r\n\r\n\r\n[[second]]:\r\nFull name: {first name} {middle name} {surname} {mothers maiden name}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You can even abbreviate the HTML portion with Squiffy.</p>\n<pre><code>@set MY = &lt;input id=\"\n@set IS = \"/&gt;\n\nFirst Name: {MY}first name{IS}&lt;br&gt;\nMiddle Name:  {MY}middle name{IS}&lt;br&gt;\nSurname: {MY}surname{IS}&lt;br&gt;\nMother's Maiden Name: {MY}mothers maiden name{IS}\n\n[[Go]](enterInputs, next=second)\n\n\n[[second]]:\nFull name: {first name} {middle name} {surname} {mothers maiden name}\n</code></pre>\n\n",
      "PostDate": "2021-09-25T05:29:21.2715835Z",
      "LastEditDate": "2021-09-25T05:30:47.3697423Z",
      "link": null
    },
    {
      "PostId": "d1ac47d6-45e9-4fc9-8f1a-a652f200dc24",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think your JS could be abbreviated to:\r\n```\r\n    $(\"input\").each(function () {\r\n        set (this.id, this.value);\r\n    });\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think your JS could be abbreviated to:</p>\n<pre><code>    $(\"input\").each(function () {\n        set (this.id, this.value);\n    });\n</code></pre>\n\n",
      "PostDate": "2021-09-25T08:59:43.5382294Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "133e4e19-ca72-4d14-994a-599b90fa87b0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you don't mind modifying `story.js`, you could add 4 lines to this function:\r\n<pre><code>    var newSection = function() {\r\n        if (currentSection) {\r\n            disableLink(jQuery('.squiffy-link', currentSection));\r\n<b style=\"color:green\">            currentSection.find('input').each(function () {\r\n                set ($(this).data('attribute') || this.id, this.value);\r\n                this.disabled = true;\r\n            });</b>\r\n        }\r\n        var sectionCount = squiffy.get('_section-count') + 1;\r\n        squiffy.set('_section-count', sectionCount);\r\n        var id = 'squiffy-section-' + sectionCount;\r\n        currentSection = jQuery('<div/>', {\r\n            id: id,\r\n        }).appendTo(squiffy.ui.output);\r\n        squiffy.set('_output-section', id);\r\n    };</code></pre>\r\nso that all input elements are automatically processed at the same time as disabling links (when you leave a section).\r\n\r\nYou could also add something like:\r\n<pre><code>        function processTextCommand(text, data) {\r\n            if (startsWith(text, 'if ')) {\r\n                return processTextCommand_If(text, data);\r\n            }\r\n            else if (startsWith(text, 'else:')) {\r\n                return processTextCommand_Else(text, data);\r\n            }\r\n            else if (startsWith(text, 'label:')) {\r\n                return processTextCommand_Label(text, data);\r\n            }\r\n<b style=\"color: green\">            else if (startsWith(text, 'input:')) {\r\n                var attribute = text.replace(/^input:\\s*/,\"\").replace(/\\s*$/,\"\");\r\n                var value = squiffy.get(attribute) || \"\";\r\n                if (attribute.match(\":\")) {\r\n                    value ||= attribute.replace(/^.*?\\s*:\\s*/,\"\");\r\n                    attribute = attribute.replace(/\\s*:.*$/, \"\");\r\n                }\r\n                var id = text.replace(/\\W/g, \"\");\r\n                return $('&lt;input>', {id: id, value: value, 'data-attribute': attribute}).get(0).outerHTML;\r\n            }</b>\r\n            else if (/^rotate[: ]/.test(text)) {\r\n                return processTextCommand_Rotate('rotate', text, data);\r\n            }\r\n            else if (/^sequence[: ]/.test(text)) {</code></pre>\r\nso that you can just do:\r\n```\r\n[[start]]:\r\n\r\nFirst Name: {input:fname:Elric}<br>\r\nMiddle Name:  {input:mname:Middlename}<br>\r\nSurname: {input:sname:Spongehammer}<br>\r\nMother's Maiden Name: {input:mmname:Sporf} [[Go]](enterInputs)\r\n```\r\n(This code should fill the form with the existing values if those attributes have values; and the defaults otherwise. But I've not tested it as I'm replying on my phone)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you don't mind modifying <code>story.js</code>, you could add 4 lines to this function:</p>\n<pre><code>    var newSection = function() {\n        if (currentSection) {\n            disableLink(jQuery('.squiffy-link', currentSection));\n<b style=\"color: green\">            currentSection.find('input').each(function () {\n                set ($(this).data('attribute') || this.id, this.value);\n                this.disabled = true;\n            });</b>\n        }\n        var sectionCount = squiffy.get('_section-count') + 1;\n        squiffy.set('_section-count', sectionCount);\n        var id = 'squiffy-section-' + sectionCount;\n        currentSection = jQuery('</code><div><code>', {\n            id: id,\n        }).appendTo(squiffy.ui.output);\n        squiffy.set('_output-section', id);\n    };</code></div></pre>\n<p>so that all input elements are automatically processed at the same time as disabling links (when you leave a section).</p>\n<p>You could also add something like:</p>\n<pre><code>        function processTextCommand(text, data) {\n            if (startsWith(text, 'if ')) {\n                return processTextCommand_If(text, data);\n            }\n            else if (startsWith(text, 'else:')) {\n                return processTextCommand_Else(text, data);\n            }\n            else if (startsWith(text, 'label:')) {\n                return processTextCommand_Label(text, data);\n            }\n<b style=\"color: green\">            else if (startsWith(text, 'input:')) {\n                var attribute = text.replace(/^input:\\s*/,\"\").replace(/\\s*$/,\"\");\n                var value = squiffy.get(attribute) || \"\";\n                if (attribute.match(\":\")) {\n                    value ||= attribute.replace(/^.*?\\s*:\\s*/,\"\");\n                    attribute = attribute.replace(/\\s*:.*$/, \"\");\n                }\n                var id = text.replace(/\\W/g, \"\");\n                return $('&lt;input&gt;', {id: id, value: value, 'data-attribute': attribute}).get(0).outerHTML;\n            }</b>\n            else if (/^rotate[: ]/.test(text)) {\n                return processTextCommand_Rotate('rotate', text, data);\n            }\n            else if (/^sequence[: ]/.test(text)) {</code></pre>\n<p>so that you can just do:</p>\n<pre><code>[[start]]:\n\nFirst Name: {input:fname:Elric}&lt;br&gt;\nMiddle Name:  {input:mname:Middlename}&lt;br&gt;\nSurname: {input:sname:Spongehammer}&lt;br&gt;\nMother's Maiden Name: {input:mmname:Sporf} [[Go]](enterInputs)\n</code></pre>\n<p>(This code should fill the form with the existing values if those attributes have values; and the defaults otherwise. But I've not tested it as I'm replying on my phone)</p>\n\n",
      "PostDate": "2021-09-25T09:42:43.8965649Z",
      "LastEditDate": "2021-09-25T09:45:10.6979707Z",
      "link": null
    },
    {
      "PostId": "9911552b-fae8-44b5-a302-ede23922e2a5",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mrangel,\r\n\r\nI pasted\r\n\r\n```\r\n    $(\"input\").each(function () {\r\n        set (this.id, this.value);\r\n    });\r\n```\r\ninto ```[[]]:```, *and it worked perfectly...*\r\n\r\nBut then I got greedy. I changed ```$(\"input\")``` to ```$(\"span\")``` (I had already changed the inputs into contenteditable spans in my original Squiffy-JS mule recipe. I wanted to freely stylize  with markups and .GIF carets and such, you see.)  The ```$(\"span\")``` version created a massively long list of nameless true Squiffy attributes before nulling the outputs.\r\n\r\nAnd how odd, I feel as thought I ought to apologize. Very odd.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mrangel,</p>\n<p>I pasted</p>\n<pre><code>    $(\"input\").each(function () {\n        set (this.id, this.value);\n    });\n</code></pre>\n<p>into <code>[[]]:</code>, <em>and it worked perfectly...</em></p>\n<p>But then I got greedy. I changed <code>$(\"input\")</code> to <code>$(\"span\")</code> (I had already changed the inputs into contenteditable spans in my original Squiffy-JS mule recipe. I wanted to freely stylize  with markups and .GIF carets and such, you see.)  The <code>$(\"span\")</code> version created a massively long list of nameless true Squiffy attributes before nulling the outputs.</p>\n<p>And how odd, I feel as thought I ought to apologize. Very odd.</p>\n\n",
      "PostDate": "2021-09-25T12:54:21.0460028Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "efd3db8e-30ea-451d-84f1-4405d57365d5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah… you don't want it to treat every span as an input.\r\n\r\nIn that case, your selector will be `$(\"[contenteditable]\")` or `$(\"span[contenteditable]\")` which matches all elements with that attribute.\r\n\r\nYou probably also want to put `$(this).removeProp(\"contenteditable\")` inside the loop, so that they cease to be editable once the JS has read their value.\r\nSo:\r\n```\r\n    $(\"span[contenteditable]\").each(function () {\r\n        $(this).removeProp(\"contenteditable\");\r\n        set (this.id, this.innerHTML);\r\n    });\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah… you don't want it to treat every span as an input.</p>\n<p>In that case, your selector will be <code>$(\"[contenteditable]\")</code> or <code>$(\"span[contenteditable]\")</code> which matches all elements with that attribute.</p>\n<p>You probably also want to put <code>$(this).removeProp(\"contenteditable\")</code> inside the loop, so that they cease to be editable once the JS has read their value.<br>\nSo:</p>\n<pre><code>    $(\"span[contenteditable]\").each(function () {\n        $(this).removeProp(\"contenteditable\");\n        set (this.id, this.innerHTML);\n    });\n</code></pre>\n\n",
      "PostDate": "2021-09-25T13:17:35.2227154Z",
      "LastEditDate": "2021-09-26T06:46:36.1878617Z",
      "link": null
    },
    {
      "PostId": "79c199bd-9643-4988-8ce5-56b911ca8ce8",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That works well. At first, I couldn't figure it out. But then I remembered a kind and wise person [once told me](https://textadventures.co.uk/forum/squiffy/topic/4l5oa54j9us-n0gwddgltw/retrieve-contenteditable-changes-like-an-input-field) ```this.value``` needs to be ```this.innerHTML``` or ```this.innerText```. You've helped me far more with JS for free than many people I pay have helped me with house and car maintenance.",
      "EditableFormat": "markdown",
      "HTML": "<p>That works well. At first, I couldn't figure it out. But then I remembered a kind and wise person <a href=\"https://textadventures.co.uk/forum/squiffy/topic/4l5oa54j9us-n0gwddgltw/retrieve-contenteditable-changes-like-an-input-field\">once told me</a> <code>this.value</code> needs to be <code>this.innerHTML</code> or <code>this.innerText</code>. You've helped me far more with JS for free than many people I pay have helped me with house and car maintenance.</p>\n\n",
      "PostDate": "2021-09-26T05:49:01.8317165Z",
      "LastEditDate": "2021-09-26T14:10:38.4713325Z",
      "link": null
    }
  ]
}
