{
  "Topic": {
    "TopicId": "zh_qrfis9u_c3psih9izug",
    "ForumId": "24",
    "Title": "main.js issue in Squiffy program",
    "LastUpdated": "2017-09-09T09:50:14.7512733Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "51409203-ba24-4396-8d20-38ae3c69f0af",
      "UserId": 197771,
      "Username": "LA-Laker",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3af86cbc947df7133ff42a46b8c525b3?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a problem starting my Squiffy program. Is there a way to fix this main.js issue?\r\n\r\nThe error message reads: A javascript error occurred in the main process\r\nUncaught Exception:\r\nSyntaxError: Unexpected token\r\n\r\nHere is the source code:\r\n\r\n/* global __dirname */\r\n/* global process */\r\n\r\nvar app = require('app');  // Module to control application life.\r\nvar BrowserWindow = require('browser-window');  // Module to create native browser window.\r\nvar storage = require('./storage');\r\n\r\n// Report crashes to our server.\r\nrequire('crash-reporter').start();\r\n\r\nvar argv = process.argv;\r\n\r\nvar openFile;\r\n\r\nif (process.platform !== 'darwin') {\r\n  openFile = process.argv[1];\r\n}\r\n\r\napp.on('open-file', function (event, path) {\r\n    event.preventDefault();\r\n    openFile = path;\r\n    if (mainWindow) {\r\n      mainWindow.webContents.executeJavaScript('loadFile(' + JSON.stringify(path) + ')');\r\n    }\r\n});\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the javascript object is GCed.\r\nvar mainWindow = null;\r\n\r\nvar init = function() {\r\n  var lastWindowState = storage.get('lastWindowState');\r\n  if (lastWindowState === null) {\r\n    lastWindowState = {\r\n      width: 1200,\r\n      height: 600,\r\n      maximized: false \r\n    }; \r\n  }\r\n  \r\n  mainWindow = new BrowserWindow({\r\n    x: lastWindowState.x,\r\n    y: lastWindowState.y,\r\n    width: lastWindowState.width, \r\n    height: lastWindowState.height,\r\n    icon: __dirname + '/squiffy.png'\r\n  });\r\n  \r\n  if (lastWindowState.maximized) {\r\n    mainWindow.maximize();\r\n  }\r\n\r\n  mainWindow.openFile = openFile;\r\n\r\n  // and load the index.html of the app.\r\n  mainWindow.loadUrl('file://' + __dirname + '/index.html');\r\n  \r\n  mainWindow.on('close', function () {\r\n    var bounds = mainWindow.getBounds(); \r\n    storage.set('lastWindowState', {\r\n      x: bounds.x,\r\n      y: bounds.y,\r\n      width: bounds.width,\r\n      height: bounds.height,\r\n      maximized: mainWindow.isMaximized()\r\n    });\r\n  });\r\n\r\n  // Emitted when the window is closed.\r\n  mainWindow.on('closed', function() {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    mainWindow = null;\r\n  });\r\n};\r\n\r\n// Quit when all windows are closed, except on OS X.\r\napp.on('window-all-closed', function() {\r\n  if (process.platform != 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\n// On OS X, this is called when the app is running in the Dock with no open windows.\r\napp.on('activate-with-no-open-windows', init);\r\n\r\n// This method will be called when Electron has done everything\r\n// initialization and ready for creating browser windows.\r\napp.on('ready', init);\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a problem starting my Squiffy program. Is there a way to fix this main.js issue?</p>\n<p>The error message reads: A javascript error occurred in the main process<br>\nUncaught Exception:<br>\nSyntaxError: Unexpected token</p>\n<p>Here is the source code:</p>\n<p>/* global __dirname <em>/<br>\n/</em> global process */</p>\n<p>var app = require('app');  // Module to control application life.<br>\nvar BrowserWindow = require('browser-window');  // Module to create native browser window.<br>\nvar storage = require('./storage');</p>\n<p>// Report crashes to our server.<br>\nrequire('crash-reporter').start();</p>\n<p>var argv = process.argv;</p>\n<p>var openFile;</p>\n<p>if (process.platform !== 'darwin') {<br>\nopenFile = process.argv[1];<br>\n}</p>\n<p>app.on('open-file', function (event, path) {<br>\nevent.preventDefault();<br>\nopenFile = path;<br>\nif (mainWindow) {<br>\nmainWindow.webContents.executeJavaScript('loadFile(' + JSON.stringify(path) + ')');<br>\n}<br>\n});</p>\n<p>// Keep a global reference of the window object, if you don't, the window will<br>\n// be closed automatically when the javascript object is GCed.<br>\nvar mainWindow = null;</p>\n<p>var init = function() {<br>\nvar lastWindowState = storage.get('lastWindowState');<br>\nif (lastWindowState === null) {<br>\nlastWindowState = {<br>\nwidth: 1200,<br>\nheight: 600,<br>\nmaximized: false<br>\n};<br>\n}</p>\n<p>mainWindow = new BrowserWindow({<br>\nx: lastWindowState.x,<br>\ny: lastWindowState.y,<br>\nwidth: lastWindowState.width,<br>\nheight: lastWindowState.height,<br>\nicon: __dirname + '/squiffy.png'<br>\n});</p>\n<p>if (lastWindowState.maximized) {<br>\nmainWindow.maximize();<br>\n}</p>\n<p>mainWindow.openFile = openFile;</p>\n<p>// and load the index.html of the app.<br>\nmainWindow.loadUrl('file://' + __dirname + '/index.html');</p>\n<p>mainWindow.on('close', function () {<br>\nvar bounds = mainWindow.getBounds();<br>\nstorage.set('lastWindowState', {<br>\nx: bounds.x,<br>\ny: bounds.y,<br>\nwidth: bounds.width,<br>\nheight: bounds.height,<br>\nmaximized: mainWindow.isMaximized()<br>\n});<br>\n});</p>\n<p>// Emitted when the window is closed.<br>\nmainWindow.on('closed', function() {<br>\n// Dereference the window object, usually you would store windows<br>\n// in an array if your app supports multi windows, this is the time<br>\n// when you should delete the corresponding element.<br>\nmainWindow = null;<br>\n});<br>\n};</p>\n<p>// Quit when all windows are closed, except on OS X.<br>\napp.on('window-all-closed', function() {<br>\nif (process.platform != 'darwin') {<br>\napp.quit();<br>\n}<br>\n});</p>\n<p>// On OS X, this is called when the app is running in the Dock with no open windows.<br>\napp.on('activate-with-no-open-windows', init);</p>\n<p>// This method will be called when Electron has done everything<br>\n// initialization and ready for creating browser windows.<br>\napp.on('ready', init);</p>\n\n",
      "PostDate": "2017-09-09T09:50:14.7512733Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
