{
  "Topic": {
    "TopicId": "qtcio2g1h0me_kchseu8eq",
    "ForumId": "20",
    "Title": "A compromise which prevents creating multiple objects",
    "LastUpdated": "2016-12-05T14:34:48.7954184Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2ea50ee0-505f-4aa5-8910-8ccc887bb99b",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I know I'm not alone in feeling that whatever I describe in a room, must be made into an object in case the player wants to look at it. I'm looking at you, Xan.\r\n\r\nSome of you may say so we should - that's the responsibility of a good game designer, but what if we could allow for this 'scenery' without having to create it as an object?\r\n\r\nMy compromise (and I don't claim this is some great hack that no one's ever thought of before) is to go into the libraries, search for **UnresolvedObject** and change **I Can't see that** to **Nothing out of the ordinary.**\r\n\r\nNow I accept that with  this method, if someone were to type **look at shark** while inside a living room, they would get **Nothing out of the ordinary**, suggesting there _is_ a shark in the living room. But I think there is far more chance of a player wanting to look at a piece of scenery which _does_ exist, than them typing **Look at [random word here]** just for the hell of it.\r\n\r\nWith this method, you can be as elaborate with your descriptions as you please, knowing that every minute detail you describe can be effectively 'looked at' or e(x)amined.\r\n\r\nOne minor flaw with this, maybe, is that an important object which gives vital clues, would get this default response if the player typed it incorrectly or called it something slightly different to the names you've given it, effectively meaning they'd disregard it as insignificant.",
      "EditableFormat": "markdown",
      "HTML": "<p>I know I'm not alone in feeling that whatever I describe in a room, must be made into an object in case the player wants to look at it. I'm looking at you, Xan.</p>\n<p>Some of you may say so we should - that's the responsibility of a good game designer, but what if we could allow for this 'scenery' without having to create it as an object?</p>\n<p>My compromise (and I don't claim this is some great hack that no one's ever thought of before) is to go into the libraries, search for <strong>UnresolvedObject</strong> and change <strong>I Can't see that</strong> to <strong>Nothing out of the ordinary.</strong></p>\n<p>Now I accept that with  this method, if someone were to type <strong>look at shark</strong> while inside a living room, they would get <strong>Nothing out of the ordinary</strong>, suggesting there <em>is</em> a shark in the living room. But I think there is far more chance of a player wanting to look at a piece of scenery which <em>does</em> exist, than them typing <strong>Look at [random word here]</strong> just for the hell of it.</p>\n<p>With this method, you can be as elaborate with your descriptions as you please, knowing that every minute detail you describe can be effectively 'looked at' or e(x)amined.</p>\n<p>One minor flaw with this, maybe, is that an important object which gives vital clues, would get this default response if the player typed it incorrectly or called it something slightly different to the names you've given it, effectively meaning they'd disregard it as insignificant.</p>\n\n",
      "PostDate": "2016-12-05T14:34:48.7954184Z",
      "LastEditDate": "2016-12-05T14:43:37.9128595Z"
    },
    {
      "PostId": "4c1d2872-57b4-4bff-8882-823429bf213f",
      "UserId": 236857,
      "Username": "felixp7",
      "AvatarUrl": "http://i.imgur.com/KMhOzNPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.\r\n\r\nFor this reason, Inform 6 has a way to let you specify \"unimportant\" nouns. (Pretty sure other authoring systems do as well, but I can't remember which now.) But Alan 3 for example doesn't, so what I did there was to create one \"catch-all\" object per room, that responds to all those extra nouns and has no description or any other interaction set, so players will soon figure out it's just a boring prop.",
      "EditableFormat": "markdown",
      "HTML": "<p>A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.</p>\n<p>For this reason, Inform 6 has a way to let you specify \"unimportant\" nouns. (Pretty sure other authoring systems do as well, but I can't remember which now.) But Alan 3 for example doesn't, so what I did there was to create one \"catch-all\" object per room, that responds to all those extra nouns and has no description or any other interaction set, so players will soon figure out it's just a boring prop.</p>\n\n",
      "PostDate": "2016-12-05T15:36:27.0044026Z",
      "LastEditDate": null
    },
    {
      "PostId": "bf9b4b41-44d7-45f8-b540-f4c66e220282",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.\r\n>\r\n\r\nYou clearly didn't read my whole post. I covered this. And in any case, my game features lots of fnurglewitzs as scenery so it's not a problem if they type that.\r\n\r\nAnd yet another flaw is that **use [scenery object]** also gets this response. As does **take [scenery object]**, and I suspect, anytime a default verb is used for an object which is scenery/doesn't exist.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.</p>\n</blockquote>\n<p>You clearly didn't read my whole post. I covered this. And in any case, my game features lots of fnurglewitzs as scenery so it's not a problem if they type that.</p>\n<p>And yet another flaw is that <strong>use [scenery object]</strong> also gets this response. As does <strong>take [scenery object]</strong>, and I suspect, anytime a default verb is used for an object which is scenery/doesn't exist.</p>\n\n",
      "PostDate": "2016-12-05T15:48:42.2133749Z",
      "LastEditDate": "2016-12-05T16:14:48.1725437Z"
    },
    {
      "PostId": "5fba3d7f-534a-4a0c-93af-7c8870548481",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A better way to do this, if anyone's remotely interested, is to bring up the library list, search for the **lookat** command and add **Nothing out of the ordinary.** in the **Unresolved object text field.**",
      "EditableFormat": "markdown",
      "HTML": "<p>A better way to do this, if anyone's remotely interested, is to bring up the library list, search for the <strong>lookat</strong> command and add <strong>Nothing out of the ordinary.</strong> in the <strong>Unresolved object text field.</strong></p>\n\n",
      "PostDate": "2016-12-06T00:29:34.0651984Z",
      "LastEditDate": null
    },
    {
      "PostId": "953089b9-d8dd-4c14-9c64-3e5939a08b94",
      "UserId": 240598,
      "Username": "robinjohnson",
      "AvatarUrl": "http://i.imgur.com/UIo6EcOb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Felix wrote:\r\n>A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.\r\n\r\nBut the player already broke the illusion by typing fnurglewitz. If you assume good faith from the player, it works fine. And I find \"the fnurglewitz is nothing out of the ordinary\" - when you were deliberately goading the parser - much less jarring than \"The floor isn't there\" when you were playing along nicely.\r\n\r\nI played an old Level 9 game, Knight Orc, recently, which compromises on the compromise by saying \"That's probably just scenery.\" In my own games I use \"Nothing special.\" (Which is technically true of the fnurglewitz too.)\r\n\r\nImplementing as many objects as you can is good practice of course, but there'll always be some that slip through the net.",
      "EditableFormat": "markdown",
      "HTML": "<p>Felix wrote:</p>\n<blockquote>\n<p>A bigger flaw is that now the player can type \"examine fnurglewitz\", or any random string of characters not once mentioned in the room description, and they'll still get the \"nothing out of the ordinary\" response. At which point the illusion is shattered.</p>\n</blockquote>\n<p>But the player already broke the illusion by typing fnurglewitz. If you assume good faith from the player, it works fine. And I find \"the fnurglewitz is nothing out of the ordinary\" - when you were deliberately goading the parser - much less jarring than \"The floor isn't there\" when you were playing along nicely.</p>\n<p>I played an old Level 9 game, Knight Orc, recently, which compromises on the compromise by saying \"That's probably just scenery.\" In my own games I use \"Nothing special.\" (Which is technically true of the fnurglewitz too.)</p>\n<p>Implementing as many objects as you can is good practice of course, but there'll always be some that slip through the net.</p>\n\n",
      "PostDate": "2016-12-22T11:46:15.5075633Z",
      "LastEditDate": "2016-12-22T11:54:13.1439566Z"
    },
    {
      "PostId": "1c61e9a9-bcdb-4d3a-a299-69712b6535f0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's scripting that can handle all of this very well, but it's more advanced coding stuff...",
      "EditableFormat": "markdown",
      "HTML": "<p>there's scripting that can handle all of this very well, but it's more advanced coding stuff...</p>\n\n",
      "PostDate": "2016-12-22T16:17:52.4203715Z",
      "LastEditDate": null
    },
    {
      "PostId": "28a8f268-cb5d-4a8a-b143-961bdf27dc48",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, robin, I'm glad others can see my reasoning. I had Detectiveland recommended to me by a fellow member - thetruespin if memory serves - and it really is a cut above.\r\n\r\nHege, my brain doesn't do advanced. You should know that by now :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, robin, I'm glad others can see my reasoning. I had Detectiveland recommended to me by a fellow member - thetruespin if memory serves - and it really is a cut above.</p>\n<p>Hege, my brain doesn't do advanced. You should know that by now :)</p>\n\n",
      "PostDate": "2016-12-22T18:17:33.3720567Z",
      "LastEditDate": "2016-12-22T18:20:46.3119335Z"
    },
    {
      "PostId": "eaa7a250-d732-4317-b58d-624edc5ebce1",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I suppose it depends on how much you use it. If you want to use it as a safety net to catch things you miss, then fine. If you use it to avoid providing your player with a rich experience, then I'm not so keen on it. An important question would be, \"Is this providing a better experience for the user, or is it just making it easier for me as the game author?\" If it's the former, as it avoids the player seeing \"I can't see that\" when I goof up, then great! If it's the latter and it actually makes for a *worse* experience for the user (in terms of being able to explore the world you're creating) just so I don't have to bother implementing things, then it has no appeal for me. It's not even a question of the loss of illusion. For me, being able to examine objects mentioned is not about just preserving the game illusion (over \"I can't see that\" for something mentioned). It's about having a world with more than one dimension (where that one \"dimension\" is just the bits needed to complete the game).\r\n\r\nAnother question to ponder as you design your games is whether the destination is more important than the journey. Sometimes it's all an author can do to be able to create enough content just to get a player from point A to point B. But the truly enjoyable games are the ones (for me) that make the journey a delight as well, with things to explore along the way, even if it's just having really cool things to look at.\r\n\r\nOn the other side, providing default responses can help the player identify what's important and what isn't. Something with a default response tells the player \"don't worry about this\". (Some even use \"That's not important right now\" as a default response, which has its own philosophical issues.)\r\n\r\nSo, in the end, it all comes down to what kind of game you want to make and what your design choices are. The tip you offer is one that's good for people to know (as long as it's not abused - ok, I couldn't avoid the last minute bias :) ).",
      "EditableFormat": "markdown",
      "HTML": "<p>I suppose it depends on how much you use it. If you want to use it as a safety net to catch things you miss, then fine. If you use it to avoid providing your player with a rich experience, then I'm not so keen on it. An important question would be, \"Is this providing a better experience for the user, or is it just making it easier for me as the game author?\" If it's the former, as it avoids the player seeing \"I can't see that\" when I goof up, then great! If it's the latter and it actually makes for a <em>worse</em> experience for the user (in terms of being able to explore the world you're creating) just so I don't have to bother implementing things, then it has no appeal for me. It's not even a question of the loss of illusion. For me, being able to examine objects mentioned is not about just preserving the game illusion (over \"I can't see that\" for something mentioned). It's about having a world with more than one dimension (where that one \"dimension\" is just the bits needed to complete the game).</p>\n<p>Another question to ponder as you design your games is whether the destination is more important than the journey. Sometimes it's all an author can do to be able to create enough content just to get a player from point A to point B. But the truly enjoyable games are the ones (for me) that make the journey a delight as well, with things to explore along the way, even if it's just having really cool things to look at.</p>\n<p>On the other side, providing default responses can help the player identify what's important and what isn't. Something with a default response tells the player \"don't worry about this\". (Some even use \"That's not important right now\" as a default response, which has its own philosophical issues.)</p>\n<p>So, in the end, it all comes down to what kind of game you want to make and what your design choices are. The tip you offer is one that's good for people to know (as long as it's not abused - ok, I couldn't avoid the last minute bias :) ).</p>\n\n",
      "PostDate": "2016-12-23T09:42:41.8104229Z",
      "LastEditDate": null
    },
    {
      "PostId": "fddd9903-5a10-49bf-83b3-c5e14f3f3a4d",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for such a late response, Jay.\r\n\r\nI understand the points you're making, but I'm in agreement with robin that constantly being told I can't see something (that has just been mentioned in the room's description) is far more irritating than seeing an obvious default response.\r\n\r\nAnd then as game designers we have to ask where we stop? How much of the scenery we describe in a richly detailed room do we make into objects just in case the player wants to examine them? Do we make the curtains an object? The walls? Ceiling?  Windows? What if we say there's a layer of dust lying on every surface - do we then have to make a dust object?\r\n\r\nIn my opinion, _suggesting_ that an item a player wants to examine is indeed present, though not important, would enrich my experience as a player, even if it does mean that a player could effectively examine a rumfellerhogalight (or other nonsensical/non-existent object)\r\n\r\nIt's also worth noting, just in case I didn't make it clear, that my idea is really only there to cater for those who try to examine things that any seasoned TA would know didn't matter. If a room has an item that a player may naturally want to look at, I make it into a object and give it its own description and, when required, functionality.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for such a late response, Jay.</p>\n<p>I understand the points you're making, but I'm in agreement with robin that constantly being told I can't see something (that has just been mentioned in the room's description) is far more irritating than seeing an obvious default response.</p>\n<p>And then as game designers we have to ask where we stop? How much of the scenery we describe in a richly detailed room do we make into objects just in case the player wants to examine them? Do we make the curtains an object? The walls? Ceiling?  Windows? What if we say there's a layer of dust lying on every surface - do we then have to make a dust object?</p>\n<p>In my opinion, <em>suggesting</em> that an item a player wants to examine is indeed present, though not important, would enrich my experience as a player, even if it does mean that a player could effectively examine a rumfellerhogalight (or other nonsensical/non-existent object)</p>\n<p>It's also worth noting, just in case I didn't make it clear, that my idea is really only there to cater for those who try to examine things that any seasoned TA would know didn't matter. If a room has an item that a player may naturally want to look at, I make it into a object and give it its own description and, when required, functionality.</p>\n\n",
      "PostDate": "2016-12-28T16:29:43.3949675Z",
      "LastEditDate": "2016-12-28T16:35:13.273831Z"
    },
    {
      "PostId": "9fc7d362-2a71-4cf2-9b36-636ff1656f3b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you could always do the best of both... have default responses to let the person playing know what's going on, but you can have/give multiple random default responses so it's not the same default message every time, and to make them even less boring, be creative with them, be funny, maybe also give a hint or tell about various features or some background info, etc etc etc, be creative ...",
      "EditableFormat": "markdown",
      "HTML": "<p>you could always do the best of both... have default responses to let the person playing know what's going on, but you can have/give multiple random default responses so it's not the same default message every time, and to make them even less boring, be creative with them, be funny, maybe also give a hint or tell about various features or some background info, etc etc etc, be creative ...</p>\n\n",
      "PostDate": "2016-12-28T17:16:28.1462475Z",
      "LastEditDate": null
    },
    {
      "PostId": "844e0130-f27e-4125-850b-7241e440f399",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nA better way to do this, if anyone's remotely interested, is to bring up the library list, search for the lookat command and add Nothing out of the ordinary. in the Unresolved object text field.\r\n```\r\nThe Unresolved object text field is a string attribute but with little changes you could add an unresolved object script. So you could add a string list to every room containing all of the \"scenery objects\" of this room and within the unresolved object script you could check these sceneries and output your own template",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>A better way to do this, if anyone's remotely interested, is to bring up the library list, search for the lookat command and add Nothing out of the ordinary. in the Unresolved object text field.\n</code></pre>\n<p>The Unresolved object text field is a string attribute but with little changes you could add an unresolved object script. So you could add a string list to every room containing all of the \"scenery objects\" of this room and within the unresolved object script you could check these sceneries and output your own template</p>\n\n",
      "PostDate": "2016-12-28T22:55:16.773336Z",
      "LastEditDate": null
    },
    {
      "PostId": "0f6d3da0-3eeb-4b70-97e9-78675377b60d",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The rule of thumb I've read for how deep to define objects is three, if that helps. In other words, a *seasoned TA player* (to use your phrase!) would expect that you would have objects defined that deep.\r\n1) Any objects mentioned in the room description have descriptions.\r\n2) Any objects mentioned in the descriptions for those objects would have descriptions.\r\n3) And once more for any objects mentioned in *those* descriptions.\r\n\r\nI'm not 100% positive if the third level is 3) or if the the initial room mention counts as one. But the point is, it's not just all objects in the initial description that need descriptions themselves, but any objects then mentioned in (minimally) *those* descriptions.\r\n\r\nIn my reading of the int fic forums, that's the expected behavior by people who play a lot of TA. It's up to you how much you wish to follow that!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The rule of thumb I've read for how deep to define objects is three, if that helps. In other words, a <em>seasoned TA player</em> (to use your phrase!) would expect that you would have objects defined that deep.</p>\n<ol>\n<li>Any objects mentioned in the room description have descriptions.</li>\n<li>Any objects mentioned in the descriptions for those objects would have descriptions.</li>\n<li>And once more for any objects mentioned in <em>those</em> descriptions.</li>\n</ol>\n<p>I'm not 100% positive if the third level is 3) or if the the initial room mention counts as one. But the point is, it's not just all objects in the initial description that need descriptions themselves, but any objects then mentioned in (minimally) <em>those</em> descriptions.</p>\n<p>In my reading of the int fic forums, that's the expected behavior by people who play a lot of TA. It's up to you how much you wish to follow that!</p>\n\n",
      "PostDate": "2016-12-29T10:08:17.2687498Z",
      "LastEditDate": "2016-12-29T10:09:00.2063212Z"
    },
    {
      "PostId": "2c853afb-430f-4791-8e6a-29d06c2fc0f8",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That doesn't mean there isn't plenty of debate and room for opinions. Here's a link I just found with IF discussions in general:\r\n\r\nhttp://www.ifwiki.org/index.php/Past_raif_topics:_IF_Theory:_part_1\r\n\r\nIf you search for \"descr\" on that page, you can find a number of discussion threads about descriptions. And I haven't even read them all myself (or many perhaps).\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>That doesn't mean there isn't plenty of debate and room for opinions. Here's a link I just found with IF discussions in general:</p>\n<p>http://www.ifwiki.org/index.php/Past_raif_topics:_IF_Theory:_part_1</p>\n<p>If you search for \"descr\" on that page, you can find a number of discussion threads about descriptions. And I haven't even read them all myself (or many perhaps).</p>\n\n",
      "PostDate": "2016-12-29T10:26:10.9455727Z",
      "LastEditDate": "2016-12-29T10:31:29.8579994Z"
    },
    {
      "PostId": "01f09e02-b1b7-4cbd-9767-1d4d8f5fd9b3",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well that's certainly worth scouring through when I have the time.\r\n\r\nAs for your three rule system, I suppose it depends on individuals' definition of 'object'. Are the floor, ceiling and walls objects? Are the panes of glass in a window, described as 'a small window with four panes of glass, objects? Like I say, depending on the individuals' definition of object, expectations could get very silly indeed.\r\n\r\nPertex, I'm not sure I understand your post, and how your method would differ from creating objects that would naturally want to be examined and letting my custom default response take care of the scenery?",
      "EditableFormat": "markdown",
      "HTML": "<p>Well that's certainly worth scouring through when I have the time.</p>\n<p>As for your three rule system, I suppose it depends on individuals' definition of 'object'. Are the floor, ceiling and walls objects? Are the panes of glass in a window, described as 'a small window with four panes of glass, objects? Like I say, depending on the individuals' definition of object, expectations could get very silly indeed.</p>\n<p>Pertex, I'm not sure I understand your post, and how your method would differ from creating objects that would naturally want to be examined and letting my custom default response take care of the scenery?</p>\n\n",
      "PostDate": "2016-12-29T18:48:33.9961933Z",
      "LastEditDate": "2016-12-29T20:02:43.8198294Z"
    },
    {
      "PostId": "f4e6b953-2630-48d5-8419-b6cc6273905d",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's really easy: every noun in your game should have a description. This would be optimum but is not really achievable.\r\n\r\nI have created a demo for my idea here : https://gist.github.com/Pertex/82bb79cc37e983e50e88b63681e7a28a\r\n\r\nI imported the UnresolvedCommand function and the lookat command and changed it a bit (you will find the changes). So now you only need the string attribute \"sceneryobjects\" in  your rooms with a list of all words which should be handled like scenery objects.  If the player looks at one of this \"objects\" it prints one of the answers from the dictionary game.lookanswers\r\n\r\nThis is just a  fast written demo and you can't edit the lookat command in the Quest editor any more. ",
      "EditableFormat": "markdown",
      "HTML": "<p>It's really easy: every noun in your game should have a description. This would be optimum but is not really achievable.</p>\n<p>I have created a demo for my idea here : https://gist.github.com/Pertex/82bb79cc37e983e50e88b63681e7a28a</p>\n<p>I imported the UnresolvedCommand function and the lookat command and changed it a bit (you will find the changes). So now you only need the string attribute \"sceneryobjects\" in  your rooms with a list of all words which should be handled like scenery objects.  If the player looks at one of this \"objects\" it prints one of the answers from the dictionary game.lookanswers</p>\n<p>This is just a  fast written demo and you can't edit the lookat command in the Quest editor any more.</p>\n\n",
      "PostDate": "2016-12-29T21:50:10.8597319Z",
      "LastEditDate": "2016-12-29T22:07:34.7453069Z"
    },
    {
      "PostId": "cb24a057-ae0b-4358-ab77-94fe5b1277d3",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"Are the floor, ceiling and walls objects? Are the panes of glass in a window, described as 'a small window with four panes of glass, objects? \"\r\n\r\nGenerally, yes. If you give the words to the player, then the player will use the words. If you say there are four panes of glass, then you have explicitly called out the panes of glass, and the player will want to explore them, since you as the author felt they were interesting enough to mention. I know as a player, that would indicate something to me, and so I would try to examine them.  And I don't consider that unreasonable. Whether you decide to actually author a description for something you yourself mention depends on whether you want to run the risk of disappointing the player.\r\n\r\nI don't know if when you refer to walls, floor and ceiling if you mean something the player implicitly knows or something you have mentioned in your description. I would think that if you haven't mentioned them, then the player should not expect much from them. If you have explicitly mentioned them in your description, then it's not unreasonable for the player to want to explore them further and expect the author to have implemented that obvious exploration.\r\n\r\nOne thing you may notice if you read through some of those articles is a recurring point by some which is that if something isn't important enough to have a description, then perhaps it shouldn't be in the room description to begin with. That can be a bit harsh, but it has some validity as a *thought* (not necessarily a dictate). It might end up, then, that room descriptions would be considered too bare without something to flesh them out, at which point it becomes, yes, you do want to flesh them out. So then flesh them out!\r\n\r\n(It's quite possible that this discussion will reach no conclusion as I feel we're approaching it from different points of view. Assuming I can speak to my interpretation of your viewpoint, you're coming at it from an authorial point of view whereas I'm looking at if from the player's point of view. They're both valid viewpoints, but they can conflict if it comes down to the finite time an author has vs the infinite world a player would love to have. Obviously, an author can't implement everything, but it does pay to consider what a player will expect in terms of basic things like nouns mentioned in a room description being further defined. Yes, it can be a pain, but that's part of the job of creating IF/TA if you want to create something that others will consider well crafted. Others in some of those threads have mentioned parallel ideas in other languages to what you have mentioned. The response is generally (to the extent I have grok'ed it all) that it's ok as a safeguard, but not necessarily as a design principle, especially when it comes to things mentioned in a main room description.)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>\"Are the floor, ceiling and walls objects? Are the panes of glass in a window, described as 'a small window with four panes of glass, objects? \"</p>\n<p>Generally, yes. If you give the words to the player, then the player will use the words. If you say there are four panes of glass, then you have explicitly called out the panes of glass, and the player will want to explore them, since you as the author felt they were interesting enough to mention. I know as a player, that would indicate something to me, and so I would try to examine them.  And I don't consider that unreasonable. Whether you decide to actually author a description for something you yourself mention depends on whether you want to run the risk of disappointing the player.</p>\n<p>I don't know if when you refer to walls, floor and ceiling if you mean something the player implicitly knows or something you have mentioned in your description. I would think that if you haven't mentioned them, then the player should not expect much from them. If you have explicitly mentioned them in your description, then it's not unreasonable for the player to want to explore them further and expect the author to have implemented that obvious exploration.</p>\n<p>One thing you may notice if you read through some of those articles is a recurring point by some which is that if something isn't important enough to have a description, then perhaps it shouldn't be in the room description to begin with. That can be a bit harsh, but it has some validity as a <em>thought</em> (not necessarily a dictate). It might end up, then, that room descriptions would be considered too bare without something to flesh them out, at which point it becomes, yes, you do want to flesh them out. So then flesh them out!</p>\n<p>(It's quite possible that this discussion will reach no conclusion as I feel we're approaching it from different points of view. Assuming I can speak to my interpretation of your viewpoint, you're coming at it from an authorial point of view whereas I'm looking at if from the player's point of view. They're both valid viewpoints, but they can conflict if it comes down to the finite time an author has vs the infinite world a player would love to have. Obviously, an author can't implement everything, but it does pay to consider what a player will expect in terms of basic things like nouns mentioned in a room description being further defined. Yes, it can be a pain, but that's part of the job of creating IF/TA if you want to create something that others will consider well crafted. Others in some of those threads have mentioned parallel ideas in other languages to what you have mentioned. The response is generally (to the extent I have grok'ed it all) that it's ok as a safeguard, but not necessarily as a design principle, especially when it comes to things mentioned in a main room description.)</p>\n\n",
      "PostDate": "2016-12-29T22:51:30.3616989Z",
      "LastEditDate": "2016-12-29T23:09:19.6753098Z"
    },
    {
      "PostId": "e3d372f9-a6a3-4f1a-a4f8-4267b86c71d9",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well I've learned a fair bit in this thread alone, relating to an author vs player viewpoint. What I can take from this, is that a compromise between the game's descriptions and what in that room the player should be able to examine, must be met.\r\n\r\nI'd also agree your 'rule of thumb' which states that as an author, if you don't want your player examining certain objects, don't mention them, is a good one, but it's by no means ideal. \"A fully-furnished living room\" doesn't mention ANY objects, but wouldn't a player find it odd to get a response of \"I can't see that.\" if they tried 'x couch' ?\r\n\r\nI think all I was ever saying when I started this thread, is that \"I can't see that.\" is perhaps not the best default response to have been used, as it only ever works and makes sense when a player tries to examine an object that explicitly doesn't exist.\r\n\r\nPertex, I'm just about to load that game up to see what's going on. Thank you.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well I've learned a fair bit in this thread alone, relating to an author vs player viewpoint. What I can take from this, is that a compromise between the game's descriptions and what in that room the player should be able to examine, must be met.</p>\n<p>I'd also agree your 'rule of thumb' which states that as an author, if you don't want your player examining certain objects, don't mention them, is a good one, but it's by no means ideal. \"A fully-furnished living room\" doesn't mention ANY objects, but wouldn't a player find it odd to get a response of \"I can't see that.\" if they tried 'x couch' ?</p>\n<p>I think all I was ever saying when I started this thread, is that \"I can't see that.\" is perhaps not the best default response to have been used, as it only ever works and makes sense when a player tries to examine an object that explicitly doesn't exist.</p>\n<p>Pertex, I'm just about to load that game up to see what's going on. Thank you.</p>\n\n",
      "PostDate": "2016-12-30T00:13:33.8801233Z",
      "LastEditDate": null
    },
    {
      "PostId": "d0fda23f-2eb2-4044-8c48-9a574006c67b",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Pertex, just tried your game and immediately found problems - not by way of errors, but logic.\r\n\r\nIn the very first room, for which the description is:\r\n```\r\nYou are standing in an wonderful forest, old trees are standing along a dark path, squirrels are hunting butterflies and a near well spots water on mushrooms.\r\n```\r\nI'm told I can see neither the trees nor the mushrooms.\r\n\r\nThis is exactly what my custom 'unresolved' response avoids.",
      "EditableFormat": "markdown",
      "HTML": "<p>Pertex, just tried your game and immediately found problems - not by way of errors, but logic.</p>\n<p>In the very first room, for which the description is:</p>\n<pre><code>You are standing in an wonderful forest, old trees are standing along a dark path, squirrels are hunting butterflies and a near well spots water on mushrooms.\n</code></pre>\n<p>I'm told I can see neither the trees nor the mushrooms.</p>\n<p>This is exactly what my custom 'unresolved' response avoids.</p>\n\n",
      "PostDate": "2016-12-30T00:21:53.7698111Z",
      "LastEditDate": null
    },
    {
      "PostId": "8a78367c-d3dc-4047-a69c-a21388ccf070",
      "UserId": 176750,
      "Username": "alice-blue",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4499e85f6b9744622fe437b185b6fba6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's my approach (and I'm not sure how this works in Quest, as I haven't used it).\r\n\r\nThere are a few all-purpose scenery objects to catch unmentioned but presumably present things like sky, ceiling, floor, and so on. In Inform it's possible to make an object (called a backdrop) that is present in multiple locations, or in every location, so you only have to make these objects once.\r\n\r\nIf an object is mentioned in the room description, or in a description of another object, there should be some sort of non-generic response for examining it. If an object is important, it gets its own description. If it's mentioned, but not important in its own right, it can become a synonym for the thing it's part of. For instance:\r\n\r\n    >look\r\n    You're in a cramped garden shed. A broken wheelbarrow lies in one corner.\r\n\r\n    >x wheelbarrow\r\n    This wheelbarrow has seen better days. The wheel has come completely off.\r\n\r\n    >x wheel\r\n    This wheelbarrow has seen better days. The wheel has come completely off.\r\n\r\n\r\nBy making \"wheel\" a synonym for \"wheelbarrow,\" you get a non-generic response for examining the wheel, but you don't have to write a separate description for it. And it also acts as a subtle hint to players that the wheel is not something they need to interact with separately.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's my approach (and I'm not sure how this works in Quest, as I haven't used it).</p>\n<p>There are a few all-purpose scenery objects to catch unmentioned but presumably present things like sky, ceiling, floor, and so on. In Inform it's possible to make an object (called a backdrop) that is present in multiple locations, or in every location, so you only have to make these objects once.</p>\n<p>If an object is mentioned in the room description, or in a description of another object, there should be some sort of non-generic response for examining it. If an object is important, it gets its own description. If it's mentioned, but not important in its own right, it can become a synonym for the thing it's part of. For instance:</p>\n<pre><code>&gt;look\nYou're in a cramped garden shed. A broken wheelbarrow lies in one corner.\n\n&gt;x wheelbarrow\nThis wheelbarrow has seen better days. The wheel has come completely off.\n\n&gt;x wheel\nThis wheelbarrow has seen better days. The wheel has come completely off.\n</code></pre>\n<p>By making \"wheel\" a synonym for \"wheelbarrow,\" you get a non-generic response for examining the wheel, but you don't have to write a separate description for it. And it also acts as a subtle hint to players that the wheel is not something they need to interact with separately.</p>\n\n",
      "PostDate": "2016-12-30T02:10:12.3865727Z",
      "LastEditDate": "2016-12-30T02:26:42.1707634Z"
    },
    {
      "PostId": "057582cd-457a-4fa5-b0d1-b1178aff0dc2",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "But this only gives the same response because Quest sees **x wheel** as the same thing as **x wheelbarrow**, in exactly the same way it would see **go li** as the same thing as **go living room**\r\n\r\nIn fact, in your example, you wouldn't need to give **wheelbarrow** the synonym of **wheel** to get this response.\r\n\r\nIf you use a different example and say:\r\n```\r\n>look\r\nYou're in a cramped garden shed. There's an old box here with an ornate latch.\r\n\r\n>x box\r\nIt's a small box, about the size of a jewellery box, and features an ornate latch.\r\n\r\n>x latch\r\nIt's a small box, about the size of a jewellery box, and features an ornate latch.\r\n```\r\nIn other words making latch a synonym of box won't work.",
      "EditableFormat": "markdown",
      "HTML": "<p>But this only gives the same response because Quest sees <strong>x wheel</strong> as the same thing as <strong>x wheelbarrow</strong>, in exactly the same way it would see <strong>go li</strong> as the same thing as <strong>go living room</strong></p>\n<p>In fact, in your example, you wouldn't need to give <strong>wheelbarrow</strong> the synonym of <strong>wheel</strong> to get this response.</p>\n<p>If you use a different example and say:</p>\n<pre><code>&gt;look\nYou're in a cramped garden shed. There's an old box here with an ornate latch.\n\n&gt;x box\nIt's a small box, about the size of a jewellery box, and features an ornate latch.\n\n&gt;x latch\nIt's a small box, about the size of a jewellery box, and features an ornate latch.\n</code></pre>\n<p>In other words making latch a synonym of box won't work.</p>\n\n",
      "PostDate": "2016-12-30T04:04:53.0639694Z",
      "LastEditDate": "2016-12-30T04:09:39.2433338Z"
    },
    {
      "PostId": "a3efbfc3-ac55-4965-aaca-418377c21a81",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"I'd also agree your 'rule of thumb' which states that as an author, if you don't want your player examining certain objects, don't mention them, is a good one, but it's by no means ideal. \"A fully-furnished living room\" doesn't mention ANY objects, but wouldn't a player find it odd to get a response of \"I can't see that.\" if they tried 'x couch' ?\"\r\n\r\nI definitely agree with you that \"I can't see that.\"  is not a good default response, for all the reasons you've stated and more! (\"That\" implies that the game has understood and is replying to the content of what you said. But if you type nonsense like \"x tywqksdmn\", then \"I can't see that\" is a nonsense response, because the game is acting as if it knew what you were talking about when it's actually gibberish. A human being would reply, \"What the heck are you talking about?\" But it can only do so much.)\r\n\r\nAnother thing I'll mention just since I've read it (but I have a hard time agreeing completely, though I can see the wisdom at times) is avoiding being a slave to realism. Sometimes authors will completely populate a room with items just because they would be there in real life even though they have absolutely no function in the game. It is a fine line to walk, between having enough detail to make it interesting (and \"realistic\") without having to add every single detail the real world would have. A parallel example for me is how the Enterprise seems completely real in Star Trek even though we never see a toilet, presumably because they play no part in the stories. We can assume they're there, but there's no loss of realism if we don't actually see them. :)",
      "EditableFormat": "markdown",
      "HTML": "<p>\"I'd also agree your 'rule of thumb' which states that as an author, if you don't want your player examining certain objects, don't mention them, is a good one, but it's by no means ideal. \"A fully-furnished living room\" doesn't mention ANY objects, but wouldn't a player find it odd to get a response of \"I can't see that.\" if they tried 'x couch' ?\"</p>\n<p>I definitely agree with you that \"I can't see that.\"  is not a good default response, for all the reasons you've stated and more! (\"That\" implies that the game has understood and is replying to the content of what you said. But if you type nonsense like \"x tywqksdmn\", then \"I can't see that\" is a nonsense response, because the game is acting as if it knew what you were talking about when it's actually gibberish. A human being would reply, \"What the heck are you talking about?\" But it can only do so much.)</p>\n<p>Another thing I'll mention just since I've read it (but I have a hard time agreeing completely, though I can see the wisdom at times) is avoiding being a slave to realism. Sometimes authors will completely populate a room with items just because they would be there in real life even though they have absolutely no function in the game. It is a fine line to walk, between having enough detail to make it interesting (and \"realistic\") without having to add every single detail the real world would have. A parallel example for me is how the Enterprise seems completely real in Star Trek even though we never see a toilet, presumably because they play no part in the stories. We can assume they're there, but there's no loss of realism if we don't actually see them. :)</p>\n\n",
      "PostDate": "2016-12-30T10:37:39.6860825Z",
      "LastEditDate": "2016-12-30T10:40:59.1441513Z"
    },
    {
      "PostId": "0e09787b-1607-4aec-9032-ef368e821d47",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's probably better designs, but here's something you can do, an example:\r\n\r\n```\r\n<command name=\"response_command\">\r\n  <pattern>response #text#</pattern>\r\n  <script>\r\n    if (Contains (game.pov.parent, text)) {\r\n      object_variable = GetObject (text)\r\n      if (HasAttribute (object_variable, \"look\")) {\r\n        if (TypeOf (object_variable, \"look\") = \"string\") {\r\n          msg (object_variable.look)\r\n        } else if (TypeOf (object_variable, \"look\") = \"script\") {\r\n          invoke (object_variable.look)\r\n        }\r\n      } else if (HasAttribute (object_variable, \"description\")) {\r\n        if (TypeOf (object_variable, \"description\") = \"string\") {\r\n          msg (object_variable.description)\r\n        } else if (TypeOf (object_variable, \"description\") = \"script\") {\r\n          invoke (object_variable.description)\r\n        }\r\n      } else {\r\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\r\n      }\r\n    } else if (HasAttribute (game.pov.parent, response_stringdictionary_attribute)) {\r\n      if (DictionaryContains (game.pov.parent, response_stringdictionary_attribute, text)) {\r\n        msg (StringDictionaryItem (game.pov.parent.response_stringdictionary_attribute, text))\r\n      } else {\r\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\r\n      }\r\n    } else {\r\n      boolean_variable = true\r\n      foreach (object_placeholder_variable, GetDirectChildren (game.pov.parent)) {\r\n        if (HasAttribute (object_placeholder_variable, response_stringdictionary_attribute)) {\r\n          if (DictionaryContains (object_placeholder_variable, response_stringdictionary_attribute, text)) {\r\n            boolean_variable = false\r\n            msg (StringDictionaryItem (object_placeholder_variable.response_stringdictionary_attribute, text))\r\n          }\r\n        }\r\n      }\r\n      if (boolean_variable) {\r\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\r\n      }\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<object name=\"response_object\">\r\n  <attr name=\"default_response_stringlist_attribute\" type=\"list\">\r\n    <value>YOUR_CREATIVE_DEFAULT_RESPONSE_1</value>\r\n    <value>YOUR_CREATIVE_DEFAULT_RESPONSE_2</value>\r\n    // etc <values>\r\n  </attr>\r\n</object>\r\n\r\n// your various Objects (if desired for them) would need a 'response_stringdictionary_attribute' Stringdictionary Attribute. I can try to explain how to set up and how they work and what they do, if you need help on using Dictionary Attributes. The various 'text' inputs would be your 'keys' for the Dictionary Attribute, and then you give them their responses as the 'values' for each of those 'keys'\r\n\r\n// I can include code for handling the use of a Scriptdictionary Attribute as well, if interested",
      "EditableFormat": "markdown",
      "HTML": "<p>there's probably better designs, but here's something you can do, an example:</p>\n<pre><code>&lt;command name=\"response_command\"&gt;\n  &lt;pattern&gt;response #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    if (Contains (game.pov.parent, text)) {\n      object_variable = GetObject (text)\n      if (HasAttribute (object_variable, \"look\")) {\n        if (TypeOf (object_variable, \"look\") = \"string\") {\n          msg (object_variable.look)\n        } else if (TypeOf (object_variable, \"look\") = \"script\") {\n          invoke (object_variable.look)\n        }\n      } else if (HasAttribute (object_variable, \"description\")) {\n        if (TypeOf (object_variable, \"description\") = \"string\") {\n          msg (object_variable.description)\n        } else if (TypeOf (object_variable, \"description\") = \"script\") {\n          invoke (object_variable.description)\n        }\n      } else {\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\n      }\n    } else if (HasAttribute (game.pov.parent, response_stringdictionary_attribute)) {\n      if (DictionaryContains (game.pov.parent, response_stringdictionary_attribute, text)) {\n        msg (StringDictionaryItem (game.pov.parent.response_stringdictionary_attribute, text))\n      } else {\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\n      }\n    } else {\n      boolean_variable = true\n      foreach (object_placeholder_variable, GetDirectChildren (game.pov.parent)) {\n        if (HasAttribute (object_placeholder_variable, response_stringdictionary_attribute)) {\n          if (DictionaryContains (object_placeholder_variable, response_stringdictionary_attribute, text)) {\n            boolean_variable = false\n            msg (StringDictionaryItem (object_placeholder_variable.response_stringdictionary_attribute, text))\n          }\n        }\n      }\n      if (boolean_variable) {\n        msg (StringListItem (response_object.default_response_stringlist_attribute, GetRandomInt (0, ListCount (response_object.default_response_stringlist_attribute) - 1)))\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;object name=\"response_object\"&gt;\n  &lt;attr name=\"default_response_stringlist_attribute\" type=\"list\"&gt;\n    &lt;value&gt;YOUR_CREATIVE_DEFAULT_RESPONSE_1&lt;/value&gt;\n    &lt;value&gt;YOUR_CREATIVE_DEFAULT_RESPONSE_2&lt;/value&gt;\n    // etc &lt;values&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// your various Objects (if desired for them) would need a 'response_stringdictionary_attribute' Stringdictionary Attribute. I can try to explain how to set up and how they work and what they do, if you need help on using Dictionary Attributes. The various 'text' inputs would be your 'keys' for the Dictionary Attribute, and then you give them their responses as the 'values' for each of those 'keys'\n\n// I can include code for handling the use of a Scriptdictionary Attribute as well, if interested\n</code></pre>\n\n",
      "PostDate": "2016-12-30T11:06:03.0581215Z",
      "LastEditDate": "2016-12-30T21:26:17.9744013Z"
    },
    {
      "PostId": "b0ea3b61-7893-4d2a-b685-21a0bb457db6",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, hege. Without wanting to sound lazy and as though I want results without putting the work in, I was originally looking for way to simply have Quest handle objects in a more logical way.\r\n\r\nI clearly haven't achieved that when you look at the thread and how many different opinions there are relating to what the response should be, what should and shouldn't be considered an object, what the author's responsibilities are, etc etc.\r\n\r\nHowever, when you consider how laborious a task making these games is, I really don't want a method which requires me to do even more work on objects each time I create them, such as adding a Stringdictionary Attribute. If I could just make a one-off global command with the above and leave it at that, then maybe it would be worth implementing, but I'm really not prepared to start adding more scripts and conditions to each and every object I create.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, hege. Without wanting to sound lazy and as though I want results without putting the work in, I was originally looking for way to simply have Quest handle objects in a more logical way.</p>\n<p>I clearly haven't achieved that when you look at the thread and how many different opinions there are relating to what the response should be, what should and shouldn't be considered an object, what the author's responsibilities are, etc etc.</p>\n<p>However, when you consider how laborious a task making these games is, I really don't want a method which requires me to do even more work on objects each time I create them, such as adding a Stringdictionary Attribute. If I could just make a one-off global command with the above and leave it at that, then maybe it would be worth implementing, but I'm really not prepared to start adding more scripts and conditions to each and every object I create.</p>\n\n",
      "PostDate": "2016-12-30T15:59:43.4409575Z",
      "LastEditDate": null
    },
    {
      "PostId": "19ee1010-5d9f-40f4-a646-e61a2cef010e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this actually reduces the work greatly (assuming it works perfectly, lol), as this is really versatile. If you want, you can just add default responses to the 'response_object' Object's 'default_response_stringlist_attribute' Stringlist Attribute. Or, you can add terms (what someone would type in for the 'response #text#', our 'look/examine' custom 'response_command' Command) to the Room Object's 'response_stringdictionary_attribute' Stringdictionary Attribute, and add in the response for those terms, as well. Lastly, you can have your Objects within the Room Object have the same as the prior sentence. You can decide on how much detail (how many Objects and/or layer of Objects have info/details/descriptions/responses/default-repsonses to them). Also, I can add/adjust my code for also being able to do the same for the 'response_object' Object, having a Stringdictionary Attribute with terms and their responses, if you only want to deal with a single Object to handle all of the possible terms one playing the game might try or that you mention about as terms they can get more details (or a default response) about.",
      "EditableFormat": "markdown",
      "HTML": "<p>this actually reduces the work greatly (assuming it works perfectly, lol), as this is really versatile. If you want, you can just add default responses to the 'response_object' Object's 'default_response_stringlist_attribute' Stringlist Attribute. Or, you can add terms (what someone would type in for the 'response #text#', our 'look/examine' custom 'response_command' Command) to the Room Object's 'response_stringdictionary_attribute' Stringdictionary Attribute, and add in the response for those terms, as well. Lastly, you can have your Objects within the Room Object have the same as the prior sentence. You can decide on how much detail (how many Objects and/or layer of Objects have info/details/descriptions/responses/default-repsonses to them). Also, I can add/adjust my code for also being able to do the same for the 'response_object' Object, having a Stringdictionary Attribute with terms and their responses, if you only want to deal with a single Object to handle all of the possible terms one playing the game might try or that you mention about as terms they can get more details (or a default response) about.</p>\n\n",
      "PostDate": "2016-12-30T21:15:35.3252503Z",
      "LastEditDate": "2016-12-30T21:18:58.0997709Z"
    },
    {
      "PostId": "d7366099-c011-4010-8d5b-3782de7246bc",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nI'm told I can see neither the trees nor the mushrooms.\r\nThis is exactly what my custom 'unresolved' response avoids.\r\n```\r\nIf you would check the code and would add 2 letters to the attribute everything would work fine. But you don't seem to be interested in the idea how to do it but to get the complete solution on a silver platter. Sorry, in that case I am out.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>I'm told I can see neither the trees nor the mushrooms.\nThis is exactly what my custom 'unresolved' response avoids.\n</code></pre>\n<p>If you would check the code and would add 2 letters to the attribute everything would work fine. But you don't seem to be interested in the idea how to do it but to get the complete solution on a silver platter. Sorry, in that case I am out.</p>\n\n",
      "PostDate": "2016-12-30T22:38:37.5008648Z",
      "LastEditDate": null
    },
    {
      "PostId": "623ef39e-d001-4000-a31a-9b4fcf91aaf6",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Fair enough, but perhaps if you'd made this clear in your post I'd have known. I'm not a mind-reader.\r\n\r\nYou shouldn't assume everyone knows and understands the inner workings of Quest to the extent you do.",
      "EditableFormat": "markdown",
      "HTML": "<p>Fair enough, but perhaps if you'd made this clear in your post I'd have known. I'm not a mind-reader.</p>\n<p>You shouldn't assume everyone knows and understands the inner workings of Quest to the extent you do.</p>\n\n",
      "PostDate": "2016-12-31T01:48:16.9498698Z",
      "LastEditDate": "2016-12-31T01:52:34.209213Z"
    },
    {
      "PostId": "e690fc45-fb1c-4804-9f2b-c4001d5e72ed",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "http://i.imgur.com/3AxpbN7b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**I know I'm not alone in feeling that whatever I describe in a room, must be made into an object in case the player wants to look at it.**\r\n\r\nUnless I want someone to be able to pick something up and do stuff to it, I just use keywords for those sorts of objects. That way, there aren't a ton of objects in my room, but if they see something in a description, they can still look at it. Example is:\r\n\r\nYou are standing in a room. Red curtains hang on one window, a coffee table stands in a corner, and a ratty couch leans against the far wall. \r\n\r\nin that I would use keywords for red, curtains, hang, window, coffee, corner, ratty, couch, wall. Because people might reasonably want to type  look ratty  look far  look corner\r\n\r\nBut the only thing I want them to actually interact with is the table, so it's the only actual object in the room.\r\n\r\nlook table\r\nYou see a table\r\nlook at table\r\nThere's a letter on the table\r\nget letter\r\nyou can't get it\r\nlook letter\r\nIt's addressed to ...\r\n\r\nlike that",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>I know I'm not alone in feeling that whatever I describe in a room, must be made into an object in case the player wants to look at it.</strong></p>\n<p>Unless I want someone to be able to pick something up and do stuff to it, I just use keywords for those sorts of objects. That way, there aren't a ton of objects in my room, but if they see something in a description, they can still look at it. Example is:</p>\n<p>You are standing in a room. Red curtains hang on one window, a coffee table stands in a corner, and a ratty couch leans against the far wall.</p>\n<p>in that I would use keywords for red, curtains, hang, window, coffee, corner, ratty, couch, wall. Because people might reasonably want to type  look ratty  look far  look corner</p>\n<p>But the only thing I want them to actually interact with is the table, so it's the only actual object in the room.</p>\n<p>look table<br>\nYou see a table<br>\nlook at table<br>\nThere's a letter on the table<br>\nget letter<br>\nyou can't get it<br>\nlook letter<br>\nIt's addressed to ...</p>\n<p>like that</p>\n\n",
      "PostDate": "2017-02-05T01:17:47.290477Z",
      "LastEditDate": null
    }
  ]
}
