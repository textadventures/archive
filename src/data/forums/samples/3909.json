{
  "Topic": {
    "TopicId": "3909",
    "ForumId": "18",
    "Title": "Response Library",
    "LastUpdated": "2014-12-25T00:23:10+00:00",
    "ReplyCount": 37
  },
  "Posts": [
    {
      "PostId": "26194",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "What started out as that long &quot;Conversations&quot; thread back in April has now culminated in a Beta version of my &quot;Response&quot; library. The attached is the current beta version. The drop includes:\n- The response library ResponseLib.aslx\n- A sample game, in the Sample folder\n- An Integrator's Guide, which describes the few steps needed to integrate the library and get up and running.\n- A User's Guide, which describes the elements that can be used in responses.\n\nThe documentation is undoubtedly incomplete. It is in beta form as well.\n\nWhat I would hope is that at least somebody wishes to try this out. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> And the more the merrier. What I'm looking for in terms of feedback is:\n- Are the docs clear? What areas need improving? \n- How easy is the library to integrate into a game?\n- Are there cases that the response library doesn't handle well? I'm looking for new features to add for common and perhaps not-so-common cases.\n- Do you like it? Does it make sense?\n\nThe basic idea behind this library is that of creating rich, dynamic responses for all the typical game events - commands, verbs, descriptions, conversation, etc. This a highly data-driven approach. In the sample game, beyond the minimal code needed to integrate the library, there are only handful of code lines in the responses, despite there being standard game mechanics like keys-in-holes, conversation, appearing exits, and a simple combat scene.\n\nIt is a different way of designing a game. I hope, at least for some, it will be a better way. There are capabilities of this library that the sample game does not exercise. I plan to show off some of those in later postings.\n\nI hope this can be useful to someone. I'll be posting updates to this, as well as further samples. I was working on a game for IFComp that didn't come together in the end. So there is a bit of testing on the library in terms of the real-world case of my game. I may post that later as well.\n\n(Why oh why does this forum not allow .PDF files? And a data size limit of 200-someodd K, and only three attachments...)\n\nEdit: Version 0.6 (2013-09-12)\nUpdated Library and Sample\n- Worked around a Quest issue with serializing Boolean values stored in dictionaries.\n- Made isgroup not needed for top-level response set.\n- Added handlers and corresponding topics to ResponseLib_Room for beforeenter, enter, onexit, beforefirstenter, and firstenter. Topics are upper-cased form of the attribute.\n- Added ability to reset a response's use count, to allow recurring behavior (e.g. a traffic light). ResponseLib_ResetUseCount(response)\n- Made required topics be &quot;or&quot; (fixed code).\n- Added a command to the sample game for exercising the menu (a bit lame): &quot;speak/talk to mirror&quot;. (I just saw the response has a typo. Ah well, a todo for next time.)\n\nEdit: Version 0.7 (2013-09-27)\nUpdated Library\n- Added support for modular response handling (support inheritance):\n   - Added &quot;&lt;includes&gt;responseobjectname&lt;/includes&gt;&quot; attribute to allow sharing of response sets. \n   - &quot;action&quot; scripts are now passed the responding object as &quot;responder&quot;. &quot;this&quot; still refers to the response itself.",
      "EditableFormat": "bbcode",
      "HTML": "What started out as that long &quot;Conversations&quot; thread back in April has now culminated in a Beta version of my &quot;Response&quot; library. The attached is the current beta version. The drop includes:<br/>- The response library ResponseLib.aslx<br/>- A sample game, in the Sample folder<br/>- An Integrator's Guide, which describes the few steps needed to integrate the library and get up and running.<br/>- A User's Guide, which describes the elements that can be used in responses.<br/><br/>The documentation is undoubtedly incomplete. It is in beta form as well.<br/><br/>What I would hope is that at least somebody wishes to try this out. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> And the more the merrier. What I'm looking for in terms of feedback is:<br/>- Are the docs clear? What areas need improving? <br/>- How easy is the library to integrate into a game?<br/>- Are there cases that the response library doesn't handle well? I'm looking for new features to add for common and perhaps not-so-common cases.<br/>- Do you like it? Does it make sense?<br/><br/>The basic idea behind this library is that of creating rich, dynamic responses for all the typical game events - commands, verbs, descriptions, conversation, etc. This a highly data-driven approach. In the sample game, beyond the minimal code needed to integrate the library, there are only handful of code lines in the responses, despite there being standard game mechanics like keys-in-holes, conversation, appearing exits, and a simple combat scene.<br/><br/>It is a different way of designing a game. I hope, at least for some, it will be a better way. There are capabilities of this library that the sample game does not exercise. I plan to show off some of those in later postings.<br/><br/>I hope this can be useful to someone. I'll be posting updates to this, as well as further samples. I was working on a game for IFComp that didn't come together in the end. So there is a bit of testing on the library in terms of the real-world case of my game. I may post that later as well.<br/><br/>(Why oh why does this forum not allow .PDF files? And a data size limit of 200-someodd K, and only three attachments...)<br/><br/>Edit: Version 0.6 (2013-09-12)<br/>Updated Library and Sample<br/>- Worked around a Quest issue with serializing Boolean values stored in dictionaries.<br/>- Made isgroup not needed for top-level response set.<br/>- Added handlers and corresponding topics to ResponseLib_Room for beforeenter, enter, onexit, beforefirstenter, and firstenter. Topics are upper-cased form of the attribute.<br/>- Added ability to reset a response's use count, to allow recurring behavior (e.g. a traffic light). ResponseLib_ResetUseCount(response)<br/>- Made required topics be &quot;or&quot; (fixed code).<br/>- Added a command to the sample game for exercising the menu (a bit lame): &quot;speak/talk to mirror&quot;. (I just saw the response has a typo. Ah well, a todo for next time.)<br/><br/>Edit: Version 0.7 (2013-09-27)<br/>Updated Library<br/>- Added support for modular response handling (support inheritance):<br/>   - Added &quot;&lt;includes&gt;responseobjectname&lt;/includes&gt;&quot; attribute to allow sharing of response sets. <br/>   - &quot;action&quot; scripts are now passed the responding object as &quot;responder&quot;. &quot;this&quot; still refers to the response itself.<div><a href=\"/forumattachments/1121/ResponseLib.aslx\">ResponseLib.aslx</a></div><div><a href=\"/forumattachments/730/Library and Sample.zip\">Library and Sample.zip</a></div><div><a href=\"/forumattachments/711/Response Library User's Guide.zip\">Response Library User's Guide.zip</a></div><div><a href=\"/forumattachments/710/Response Library Integrator's Guide.zip\">Response Library Integrator's Guide.zip</a></div>",
      "PostDate": "2013-09-09T23:38:21+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26196",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Can you explain why this approach is better than what Quest already offers? I think it is this &quot;big picture&quot; overview that is missing from the docs. I had a quick look at the game, and all the functionality I saw looked pretty easy to code without your library, and probably with less typing too.\n\nBy the way, the readme says &quot;To talk to the Janitor, use &quot;ask janitor about XXX&quot;.&quot; I tried talking about the bat and the mirror, the only obvious topics, and got no reply.\n\nAlso, the &quot;show topic&quot; command is misleading. I was expecting to see topics available for the player. I suggest another command phrase.",
      "EditableFormat": "bbcode",
      "HTML": "Can you explain why this approach is better than what Quest already offers? I think it is this &quot;big picture&quot; overview that is missing from the docs. I had a quick look at the game, and all the functionality I saw looked pretty easy to code without your library, and probably with less typing too.<br/><br/>By the way, the readme says &quot;To talk to the Janitor, use &quot;ask janitor about XXX&quot;.&quot; I tried talking about the bat and the mirror, the only obvious topics, and got no reply.<br/><br/>Also, the &quot;show topic&quot; command is misleading. I was expecting to see topics available for the player. I suggest another command phrase.",
      "PostDate": "2013-09-10T11:53:21+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26197",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Let's get the short ones out of the way first.\n\nAs far as talking to the Janitor, I can see how this simple game has design flaws. The mirror and bat were actually added in just so I could show how verbs and commands hook in. They're absolutely irrelevant to the completion of the game, which involves the machine in the room and its missing key. Try asking about those. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I'll add in some response to mirror and bat in the next rev of the sample.\n\nThe &quot;show topics&quot; command is a debugging command that would not normally be part of a game (more &quot;test app&quot;-itis). It shows the topics sent to the engine for the commmands typed. It provides an easy way to determine what topic keywords a specific command will input, which should make creating responses easier. It could be called anything. (I just happened to pick that.)\n\nNow on to the tougher question: why is it better? The answer varies - perhaps for some it isn't. And I don't really want to get into such comparisons in the docs, since it really all depends. I hope that if the library will work better for someone, they will see it and embrace it for that reason.\n\nThe test app does do things that a standard Quest game would do. That was intentional, in that I wanted to show how you do the things you normally do in Quest &quot;the response way.&quot; Unfortunately, some things can be better done the way they currently are done. For example, the &quot;bat&quot; description can more easily be done by just typing in its &quot;description&quot; field than by creating a response. There are reasons *to* create a response if you're already using the library, two of them being consistency and ease of later expansion, but you're right - some things are better done the current way. And the library is designed to allow you to only use it for what you want.\n\nThe basic idea behind the library is that (if taken to the limit) your game would consist of responses to events that are occurring in the game world. I chose the word &quot;call&quot; for such an event (from &quot;call and respond&quot;), which is a bit weird at times, but I had to call it something... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> For each &quot;call&quot; that comes in, all the current responses are checked, and the highest scoring ones that match are processed. The library generalizes what happens in Quest, and that is one advantage for me - I can treat everything the same, whether it be an object description, a conversation topic, the processing of a verb or command, or background (idle turn script) processing. It's all the same thing. Once I know how to create responses, I can respond to anything, with all the same flexibility in all cases.\n\nThe library attempts to address all the common beginner questions that are posted in the forums by Quest game creators:\n- How can I output random text?\n- How can I output text that varies depending on game conditions?\n- How can I output text that changes each time it is shown?\n- How can I make things happen at certain times?\n- How can I change what happens when a player tries to exit?\n- and many more...\n\nSo far I have mentioned two advantages to the library: consistency and expandability. A third is that it hides messy details under the covers. Let's look at an example that I hope will show some of the problems I wanted to solve.\n\nLet's say you have created a room that has a window. Let's focus on the window. You assign it a description, and all is well. Here is the same as a response.\n\n[code:32vw7bg1]&lt;object name=&quot;WindowLook&quot;&gt;\n  &lt;topics&gt;*LOOKAT&lt;/topics&gt;\n  &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;\n&lt;/object&gt;[/code:32vw7bg1]\n\nMore typing for sure. And probably not worth it for that.\n\nNow, let's say later in the game, you want to incorporate the passage of time - you want morning, afternoon and night, with corresponding changes to the window description. How do you do it? Well, in the standard Quest approach, now you have to switch - you have to convert your text description to a script one. Then you have to take the text you had in your description, and you have to put it into an &quot;msg&quot; command and wrap that in an &quot;if&quot; and then add the other cases. Now you're happy. You have morning, afternoon and evening descriptions.\n\nAs responses:\n[code:32vw7bg1]&lt;object name=&quot;WindowLookMorning&quot;&gt;\n  &lt;topics&gt;*LOOKAT&lt;/topics&gt;\n  &lt;needs&gt;morning&lt;/needs&gt;\n  &lt;text&gt;The ground outside is wet with the morning dew&#46;&#46;&lt;/text&gt;\n&lt;/object&gt;\n&lt;object name=&quot;WindowLookAfternoon&quot;&gt;\n  &lt;topics&gt;*LOOKAT&lt;/topics&gt;\n  &lt;needs&gt;afternoon&lt;/needs&gt;\n  &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;\n&lt;/object&gt;\n&lt;object name=&quot;WindowLookNight&quot;&gt;\n  &lt;topics&gt;*LOOKAT&lt;/topics&gt;\n  &lt;needs&gt;night&lt;/needs&gt;\n  &lt;text&gt;The sky is black and filled with stars&#46;&lt;/text&gt;\n&lt;/object&gt;[/code:32vw7bg1]\n\n(There are other ways to group this, such that the LOOKAT topic is checked first with nested children, and that would reduce the amount of text, but that's not essential for this example.)\n\nAs you can see, the case above is just more of the same - we now have three responses instead of one, each with its own condition. We did not need to shift gears from text to script. We're doing the same thing now we did before.\n\nYou also need to somehow advance time. There are libraries for that, but it's not necessarily a simple drop in. You would (minimally) need to create a turn script and then set up the varible(s) to use and then advance them. For this example, let's assume that time will be turn-based. Let's say after 50 turns, it's afternoon, and after 100 it's night. In the standard case, you need to dip down into variables, initializing them, creating a turn script to increment them. It's not a big deal for someone who codes, but for math-phobes, it can be imposing.\n\nHere is the response for handling the passage of time. Assume that &quot;morning&quot; is initially set.\n\n[code:32vw7bg1]&lt;object name=&quot;TimePassage&quot;&gt;\n  &lt;topics&gt;IDLE&lt;/topics&gt;\n  &lt;sets50&gt;afternoon !morning&lt;/sets50&gt;\n  &lt;sets100&gt;night !afternoon&lt;/sets100&gt;\n&lt;/object&gt;[/code:32vw7bg1]\n\nThat's it. We say &quot;on the 50th time, set afternoon and clear morning. On the 100th set night and clear afternoon.&quot; No need to learn about turn scripts, no math to set and increment variables, no scripts whatsoever.\n\nNow we do have a conceptual shift. Now we need to think about things like &quot;When should this response happen? What are the conditions? What should it do?&quot; as opposed to &quot;How do I code a script? How do I work with variables?&quot; \n\nLet's say we're getting adventurous now. We want to have random events occur when we look out the window, but only in the afternoon. How do we do it? In the standard Quest case, we would need to dive into GetRandomInt. More math (well, numbers, but it's all the same for some). The author is saying, &quot;I just want to randomly choose between some things.&quot; Those are words, but they need to be translated into numbers. They would need to call GetRandomInt and then either use a switch statement or an &quot;if-then-else&quot; to choose different paths based on that number. Let's look at the response for this:\n\n[code:32vw7bg1]&lt;object name=&quot;WindowLookAfternoon&quot;&gt;\n  &lt;topics&gt;*LOOKAT&lt;/topics&gt;\n  &lt;needs&gt;afternoon&lt;/needs&gt;\n  &lt;usechildren&gt;random&lt;/usechildren&gt;\n  &lt;object name=&quot;WindowLookAfternoon_Normal&quot;&gt;\n    &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;WindowLookAfternoon_ManComing&quot;&gt;\n    &lt;text&gt;You see a man coming up the walkway&#46;&lt;/text&gt;\n    &lt;sets&gt;mancoming&lt;/sets&gt;\n  &lt;/object&gt;\n&lt;/object&gt;[/code:32vw7bg1]\n\nSome things to note: we now have nested responses, but the concepts are all the same. And we just said &quot;choose a random child&quot;. No need to learn how random numbers are generated; no need to get into if/then/else or switches. Just &quot;choose randomly between these two.&quot; And we could add more choices, and it would just work. Note was well that the response need not only have text - it can set variables, it can call scripts (&quot;action&quot; fields), it can make &quot;calls&quot; out to other objects for other responses.\n\nI could go on, and perhaps I should, in some sort of design document or a tutorial. I'd love to put the latter together. But for now, I hope at least some of the flavor is coming through.\n\nThere are also more advanced uses that the sample game didn't show. I kept it simple to not overwhelm people, but in the game I was working on, I had features like:\n\n- If you look at the holes in the wall, the first time (only) the old man would say, &quot;Don't put your hand in the hole. You might not get it back.&quot; This required having the old man *know* that you were looking at the holes. That would be tricky to do with standard Quest scripting. In the response library, all you had to do was add &quot;&lt;suggests&gt;holes&lt;/suggests&gt;&quot; to the description (LOOKAT) for the holes and then add a response for the old man during IDLE time for that topic. \n- The old man would initiate conversation. There is a part of the library that allows for &quot;callers&quot;. These are object/characters that call their own topics out into the world. In my game, the old man would offer you a cigarette or inquire about why you're in the prison. You could, in theory, have two NPCs engaging in a conversation with each other! Each would call topics that the other would respond to.\n- Different output styles. The sample game shows some of this - you can assign classes to the responses and then handle them differently at output time, to show them in different order, in different styles.\n- Advanced class usage. I wanted the old man to ask you questions, but only at quiet times. If you were conversing with the old man, asking him questions, etc I didn't want him to suddenly shift topics to something else. So I wanted him to only initiate during reflective times, not interactive times. I did this by having two classes for response, &quot;reflect&quot; and &quot;interact&quot;. (A reponse could also be neither.) Then during output, I would manage the counts, bumping the &quot;reflect&quot; count each time I got one of those (e.g. looking at the room, sitting, standing) and setting it back to 0 when you interacted (e.g. asked the old man a question or got a response from him). Then the &lt;cond&gt; for my calls would require a reflect count of at least 1. Otherwise, you were interacting, and he waited. Again, you could do this in Quest (I mean, my library does, and it's written in Quest), but trying to do it with standard scripts might end up being a bit clumsy.\n- Referencing responses within other responses. There is a simple text markup wherein one response can incorporate other responses in. This allows you to break your text up into common piece and then thread them together at output time. This is especially useful if you're trying to have a variable narrative depending on the path the player takes. And it keeps you from duplicating text, actions, etc. The sample game shows this a little with the SMASH_MIRROR common piece.\n\nA final advantage to me is the ability to consolidate everything together and make it all uniform. I can handle everything about a character or object in one spot. I don't have some in the object, some in a turn script, some in verbs or commands. It allows for a nice modular design.\n\nPerhaps more than you wanted to know (and I could probably ramble on much longer), but I hope that helps somewhat.\n\nI would love to see if the *concepts* of the response library - having a rule-based approach to at least some of what goes on in a game - could be incorporated into future versions of Quest more naturally in the UI. Then, in addition to a script editor, you'd have a response editor...\n\nIn standard Quest, it's easy to add text to objects. If you want to do anything beyond simple text, you have to learn how to code scripts. So it's either simple (boring) text, or you must be a coder. This library allows you to do almost everything you can do in Quest now, with minimal dives into script. It's a bit clunky to set up in the GUI editor (but not impossible - it's designed to be &quot;editor friendly), but the *concepts* (I believe) are clean.\n\nThis library might not be for everyone or even for many. But for those for whom it works, it can be very powerful, liberating and a heck of a lot of fun. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Let's get the short ones out of the way first.<br/><br/>As far as talking to the Janitor, I can see how this simple game has design flaws. The mirror and bat were actually added in just so I could show how verbs and commands hook in. They're absolutely irrelevant to the completion of the game, which involves the machine in the room and its missing key. Try asking about those. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I'll add in some response to mirror and bat in the next rev of the sample.<br/><br/>The &quot;show topics&quot; command is a debugging command that would not normally be part of a game (more &quot;test app&quot;-itis). It shows the topics sent to the engine for the commmands typed. It provides an easy way to determine what topic keywords a specific command will input, which should make creating responses easier. It could be called anything. (I just happened to pick that.)<br/><br/>Now on to the tougher question: why is it better? The answer varies - perhaps for some it isn't. And I don't really want to get into such comparisons in the docs, since it really all depends. I hope that if the library will work better for someone, they will see it and embrace it for that reason.<br/><br/>The test app does do things that a standard Quest game would do. That was intentional, in that I wanted to show how you do the things you normally do in Quest &quot;the response way.&quot; Unfortunately, some things can be better done the way they currently are done. For example, the &quot;bat&quot; description can more easily be done by just typing in its &quot;description&quot; field than by creating a response. There are reasons *to* create a response if you're already using the library, two of them being consistency and ease of later expansion, but you're right - some things are better done the current way. And the library is designed to allow you to only use it for what you want.<br/><br/>The basic idea behind the library is that (if taken to the limit) your game would consist of responses to events that are occurring in the game world. I chose the word &quot;call&quot; for such an event (from &quot;call and respond&quot;), which is a bit weird at times, but I had to call it something... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> For each &quot;call&quot; that comes in, all the current responses are checked, and the highest scoring ones that match are processed. The library generalizes what happens in Quest, and that is one advantage for me - I can treat everything the same, whether it be an object description, a conversation topic, the processing of a verb or command, or background (idle turn script) processing. It's all the same thing. Once I know how to create responses, I can respond to anything, with all the same flexibility in all cases.<br/><br/>The library attempts to address all the common beginner questions that are posted in the forums by Quest game creators:<br/>- How can I output random text?<br/>- How can I output text that varies depending on game conditions?<br/>- How can I output text that changes each time it is shown?<br/>- How can I make things happen at certain times?<br/>- How can I change what happens when a player tries to exit?<br/>- and many more...<br/><br/>So far I have mentioned two advantages to the library: consistency and expandability. A third is that it hides messy details under the covers. Let's look at an example that I hope will show some of the problems I wanted to solve.<br/><br/>Let's say you have created a room that has a window. Let's focus on the window. You assign it a description, and all is well. Here is the same as a response.<br/><br/><pre><code>&lt;object name=&quot;WindowLook&quot;&gt;<br/>  &lt;topics&gt;*LOOKAT&lt;/topics&gt;<br/>  &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>More typing for sure. And probably not worth it for that.<br/><br/>Now, let's say later in the game, you want to incorporate the passage of time - you want morning, afternoon and night, with corresponding changes to the window description. How do you do it? Well, in the standard Quest approach, now you have to switch - you have to convert your text description to a script one. Then you have to take the text you had in your description, and you have to put it into an &quot;msg&quot; command and wrap that in an &quot;if&quot; and then add the other cases. Now you're happy. You have morning, afternoon and evening descriptions.<br/><br/>As responses:<br/><pre><code>&lt;object name=&quot;WindowLookMorning&quot;&gt;<br/>  &lt;topics&gt;*LOOKAT&lt;/topics&gt;<br/>  &lt;needs&gt;morning&lt;/needs&gt;<br/>  &lt;text&gt;The ground outside is wet with the morning dew&#46;&#46;&lt;/text&gt;<br/>&lt;/object&gt;<br/>&lt;object name=&quot;WindowLookAfternoon&quot;&gt;<br/>  &lt;topics&gt;*LOOKAT&lt;/topics&gt;<br/>  &lt;needs&gt;afternoon&lt;/needs&gt;<br/>  &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;<br/>&lt;/object&gt;<br/>&lt;object name=&quot;WindowLookNight&quot;&gt;<br/>  &lt;topics&gt;*LOOKAT&lt;/topics&gt;<br/>  &lt;needs&gt;night&lt;/needs&gt;<br/>  &lt;text&gt;The sky is black and filled with stars&#46;&lt;/text&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>(There are other ways to group this, such that the LOOKAT topic is checked first with nested children, and that would reduce the amount of text, but that's not essential for this example.)<br/><br/>As you can see, the case above is just more of the same - we now have three responses instead of one, each with its own condition. We did not need to shift gears from text to script. We're doing the same thing now we did before.<br/><br/>You also need to somehow advance time. There are libraries for that, but it's not necessarily a simple drop in. You would (minimally) need to create a turn script and then set up the varible(s) to use and then advance them. For this example, let's assume that time will be turn-based. Let's say after 50 turns, it's afternoon, and after 100 it's night. In the standard case, you need to dip down into variables, initializing them, creating a turn script to increment them. It's not a big deal for someone who codes, but for math-phobes, it can be imposing.<br/><br/>Here is the response for handling the passage of time. Assume that &quot;morning&quot; is initially set.<br/><br/><pre><code>&lt;object name=&quot;TimePassage&quot;&gt;<br/>  &lt;topics&gt;IDLE&lt;/topics&gt;<br/>  &lt;sets50&gt;afternoon !morning&lt;/sets50&gt;<br/>  &lt;sets100&gt;night !afternoon&lt;/sets100&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>That's it. We say &quot;on the 50th time, set afternoon and clear morning. On the 100th set night and clear afternoon.&quot; No need to learn about turn scripts, no math to set and increment variables, no scripts whatsoever.<br/><br/>Now we do have a conceptual shift. Now we need to think about things like &quot;When should this response happen? What are the conditions? What should it do?&quot; as opposed to &quot;How do I code a script? How do I work with variables?&quot; <br/><br/>Let's say we're getting adventurous now. We want to have random events occur when we look out the window, but only in the afternoon. How do we do it? In the standard Quest case, we would need to dive into GetRandomInt. More math (well, numbers, but it's all the same for some). The author is saying, &quot;I just want to randomly choose between some things.&quot; Those are words, but they need to be translated into numbers. They would need to call GetRandomInt and then either use a switch statement or an &quot;if-then-else&quot; to choose different paths based on that number. Let's look at the response for this:<br/><br/><pre><code>&lt;object name=&quot;WindowLookAfternoon&quot;&gt;<br/>  &lt;topics&gt;*LOOKAT&lt;/topics&gt;<br/>  &lt;needs&gt;afternoon&lt;/needs&gt;<br/>  &lt;usechildren&gt;random&lt;/usechildren&gt;<br/>  &lt;object name=&quot;WindowLookAfternoon_Normal&quot;&gt;<br/>    &lt;text&gt;You look out onto a sunny day&#46;&lt;/text&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;WindowLookAfternoon_ManComing&quot;&gt;<br/>    &lt;text&gt;You see a man coming up the walkway&#46;&lt;/text&gt;<br/>    &lt;sets&gt;mancoming&lt;/sets&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>Some things to note: we now have nested responses, but the concepts are all the same. And we just said &quot;choose a random child&quot;. No need to learn how random numbers are generated; no need to get into if/then/else or switches. Just &quot;choose randomly between these two.&quot; And we could add more choices, and it would just work. Note was well that the response need not only have text - it can set variables, it can call scripts (&quot;action&quot; fields), it can make &quot;calls&quot; out to other objects for other responses.<br/><br/>I could go on, and perhaps I should, in some sort of design document or a tutorial. I'd love to put the latter together. But for now, I hope at least some of the flavor is coming through.<br/><br/>There are also more advanced uses that the sample game didn't show. I kept it simple to not overwhelm people, but in the game I was working on, I had features like:<br/><br/>- If you look at the holes in the wall, the first time (only) the old man would say, &quot;Don't put your hand in the hole. You might not get it back.&quot; This required having the old man *know* that you were looking at the holes. That would be tricky to do with standard Quest scripting. In the response library, all you had to do was add &quot;&lt;suggests&gt;holes&lt;/suggests&gt;&quot; to the description (LOOKAT) for the holes and then add a response for the old man during IDLE time for that topic. <br/>- The old man would initiate conversation. There is a part of the library that allows for &quot;callers&quot;. These are object/characters that call their own topics out into the world. In my game, the old man would offer you a cigarette or inquire about why you're in the prison. You could, in theory, have two NPCs engaging in a conversation with each other! Each would call topics that the other would respond to.<br/>- Different output styles. The sample game shows some of this - you can assign classes to the responses and then handle them differently at output time, to show them in different order, in different styles.<br/>- Advanced class usage. I wanted the old man to ask you questions, but only at quiet times. If you were conversing with the old man, asking him questions, etc I didn't want him to suddenly shift topics to something else. So I wanted him to only initiate during reflective times, not interactive times. I did this by having two classes for response, &quot;reflect&quot; and &quot;interact&quot;. (A reponse could also be neither.) Then during output, I would manage the counts, bumping the &quot;reflect&quot; count each time I got one of those (e.g. looking at the room, sitting, standing) and setting it back to 0 when you interacted (e.g. asked the old man a question or got a response from him). Then the &lt;cond&gt; for my calls would require a reflect count of at least 1. Otherwise, you were interacting, and he waited. Again, you could do this in Quest (I mean, my library does, and it's written in Quest), but trying to do it with standard scripts might end up being a bit clumsy.<br/>- Referencing responses within other responses. There is a simple text markup wherein one response can incorporate other responses in. This allows you to break your text up into common piece and then thread them together at output time. This is especially useful if you're trying to have a variable narrative depending on the path the player takes. And it keeps you from duplicating text, actions, etc. The sample game shows this a little with the SMASH_MIRROR common piece.<br/><br/>A final advantage to me is the ability to consolidate everything together and make it all uniform. I can handle everything about a character or object in one spot. I don't have some in the object, some in a turn script, some in verbs or commands. It allows for a nice modular design.<br/><br/>Perhaps more than you wanted to know (and I could probably ramble on much longer), but I hope that helps somewhat.<br/><br/>I would love to see if the *concepts* of the response library - having a rule-based approach to at least some of what goes on in a game - could be incorporated into future versions of Quest more naturally in the UI. Then, in addition to a script editor, you'd have a response editor...<br/><br/>In standard Quest, it's easy to add text to objects. If you want to do anything beyond simple text, you have to learn how to code scripts. So it's either simple (boring) text, or you must be a coder. This library allows you to do almost everything you can do in Quest now, with minimal dives into script. It's a bit clunky to set up in the GUI editor (but not impossible - it's designed to be &quot;editor friendly), but the *concepts* (I believe) are clean.<br/><br/>This library might not be for everyone or even for many. But for those for whom it works, it can be very powerful, liberating and a heck of a lot of fun. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-09-10T16:12:00+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26204",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote:jfg0nnab]As far as talking to the Janitor, I can see how this simple game has design flaws. The mirror and bat were actually added in just so I could show how verbs and commands hook in. They're absolutely irrelevant to the completion of the game, which involves the machine in the room and its missing key. Try asking about those. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I'll add in some response to mirror and bat in the next rev of the sample.[/quote:jfg0nnab]\nOkay. I happened to look at the wrong things.\n[quote:jfg0nnab]The &quot;show topics&quot; command is a debugging command that would not normally be part of a game (more &quot;test app&quot;-itis). It shows the topics sent to the engine for the commmands typed. It provides an easy way to determine what topic keywords a specific command will input, which should make creating responses easier. It could be called anything. (I just happened to pick that.)[/quote:jfg0nnab]\nI realised it was a debugging command - the problem is that it does not sound like one.\n\nAs for the rest, I will think more on it, but your explanation does help. And I think that that is what is missing from the documentation. A tutorial will be useful too.\n\nSo how stable is it? If I use the library to create a game now, how likely is it to work in six months?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>As far as talking to the Janitor, I can see how this simple game has design flaws. The mirror and bat were actually added in just so I could show how verbs and commands hook in. They're absolutely irrelevant to the completion of the game, which involves the machine in the room and its missing key. Try asking about those. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I'll add in some response to mirror and bat in the next rev of the sample.</p></blockquote><br/>Okay. I happened to look at the wrong things.<br/><blockquote><p>The &quot;show topics&quot; command is a debugging command that would not normally be part of a game (more &quot;test app&quot;-itis). It shows the topics sent to the engine for the commmands typed. It provides an easy way to determine what topic keywords a specific command will input, which should make creating responses easier. It could be called anything. (I just happened to pick that.)</p></blockquote><br/>I realised it was a debugging command - the problem is that it does not sound like one.<br/><br/>As for the rest, I will think more on it, but your explanation does help. And I think that that is what is missing from the documentation. A tutorial will be useful too.<br/><br/>So how stable is it? If I use the library to create a game now, how likely is it to work in six months?",
      "PostDate": "2013-09-10T22:20:59+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26205",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I would consider it very stable, especially in terms of the definitions of things and expected behaviors. I happen to consider it stable code-wise as well, since I've been evolving and using it myself in a real-world game situation, but I know that bugs always exist. At this point, for me it's particularly a question of whether I have covered the sorts of things people would want covered. For example, &quot;use children - first&quot; was a more recent addition, since I began running into cases where the definitions were getting a bit unwieldy. So... I'm happy to take feature suggestions and feedback on where things work and where they don't. I believe the current set is a good starting point, so it should just be forward motion from here.\n\nOne area I haven't used much (strange as it sounds) is the Quest integration - the hooked verbs and commands. The game I was working on was using the library as the entire parser. While that gave me lots of insight into how well the library was working in different situations, it ended up not being very viable in terms of user experience (it would match too much when it shouldn't). So getting it integrated with the more rigid (relatively speaking) Quest parser is a good thing, but I haven't used it much in that way. There may be issues there. \n\nI want to work up a sample with more conversation in it. Another thought is to take the game I was working on and convert it to using the new Quest parser integration. That should fix a number of things in the game and will give me experience with how well that works.\n\nIf you give it a try and have any problems or questions, please let me know. I look forward to what you'll discover. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I would consider it very stable, especially in terms of the definitions of things and expected behaviors. I happen to consider it stable code-wise as well, since I've been evolving and using it myself in a real-world game situation, but I know that bugs always exist. At this point, for me it's particularly a question of whether I have covered the sorts of things people would want covered. For example, &quot;use children - first&quot; was a more recent addition, since I began running into cases where the definitions were getting a bit unwieldy. So... I'm happy to take feature suggestions and feedback on where things work and where they don't. I believe the current set is a good starting point, so it should just be forward motion from here.<br/><br/>One area I haven't used much (strange as it sounds) is the Quest integration - the hooked verbs and commands. The game I was working on was using the library as the entire parser. While that gave me lots of insight into how well the library was working in different situations, it ended up not being very viable in terms of user experience (it would match too much when it shouldn't). So getting it integrated with the more rigid (relatively speaking) Quest parser is a good thing, but I haven't used it much in that way. There may be issues there. <br/><br/>I want to work up a sample with more conversation in it. Another thought is to take the game I was working on and convert it to using the new Quest parser integration. That should fix a number of things in the game and will give me experience with how well that works.<br/><br/>If you give it a try and have any problems or questions, please let me know. I look forward to what you'll discover. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-09-11T00:05:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26206",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "More comments and questions.\n\nIn the Integrator's guide, you say it is a good idea to inherit from response library types, but you do not do that in the demo (because the demo is not integrated?), or in the examples later in that doc.\n\n\n\nIn the demo, you have this:\n[code:19bdg6et]    &lt;object name=&quot;RoomLook&quot;&gt;\n      &lt;topics&gt;LOOK&lt;/topics&gt;\n      &lt;usechildren&gt;first&lt;/usechildren&gt;\n      &lt;object name=&quot;RoomLook_MachineOn&quot;&gt;\n        &lt;needs&gt;machine_on&lt;/needs&gt;\n        &lt;text&gt;The room is a bit less depressing now&#46;&lt;/text&gt;\n      &lt;/object&gt;\n      &lt;object name=&quot;RoomLook_MachineOff&quot;&gt;\n        &lt;text&gt;The room is quiet and depressing&#46;&lt;/text&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;[/code:19bdg6et]\nThis seems to assume that a certain order is preserved, that RoomLook_MachineOn is always before RoomLook_MachineOff (as only the former has the condition). Is that a sagfe assumption? I considered doing something similar some time ago, but got the impression it was not. In particular, when you save the game and reload it, can you be sure the order is preserved?\n\n\n\nFor topics, I see LOOk and LOOKAT used as examples. Are these topics hardcoded into Quest/ResponseLib? If so, is there a full list of topics somewhere? Or does response lib actually send this value to the Quest parser?\n\n\n\nIs &quot;isgroup&quot; ever false? Would it save typing if group is the default (so the flag is &quot;issingle&quot;)?\n\n\n\nYou have:\n[code:19bdg6et]&lt;needs&gt;!mirror_smashed&lt;/needs&gt;[/code:19bdg6et]\nQuest uses &quot;not&quot;, might be better as &lt;needs&gt;not mirror_smashed&lt;/needs&gt;\n\n\n\nAny GUI support? Looks like the answer is no; would be good, even for coders, as it saves typing the XML tags.",
      "EditableFormat": "bbcode",
      "HTML": "More comments and questions.<br/><br/>In the Integrator's guide, you say it is a good idea to inherit from response library types, but you do not do that in the demo (because the demo is not integrated?), or in the examples later in that doc.<br/><br/><br/><br/>In the demo, you have this:<br/><pre><code>    &lt;object name=&quot;RoomLook&quot;&gt;<br/>      &lt;topics&gt;LOOK&lt;/topics&gt;<br/>      &lt;usechildren&gt;first&lt;/usechildren&gt;<br/>      &lt;object name=&quot;RoomLook_MachineOn&quot;&gt;<br/>        &lt;needs&gt;machine_on&lt;/needs&gt;<br/>        &lt;text&gt;The room is a bit less depressing now&#46;&lt;/text&gt;<br/>      &lt;/object&gt;<br/>      &lt;object name=&quot;RoomLook_MachineOff&quot;&gt;<br/>        &lt;text&gt;The room is quiet and depressing&#46;&lt;/text&gt;<br/>      &lt;/object&gt;<br/>    &lt;/object&gt;</code></pre><br/>This seems to assume that a certain order is preserved, that RoomLook_MachineOn is always before RoomLook_MachineOff (as only the former has the condition). Is that a sagfe assumption? I considered doing something similar some time ago, but got the impression it was not. In particular, when you save the game and reload it, can you be sure the order is preserved?<br/><br/><br/><br/>For topics, I see LOOk and LOOKAT used as examples. Are these topics hardcoded into Quest/ResponseLib? If so, is there a full list of topics somewhere? Or does response lib actually send this value to the Quest parser?<br/><br/><br/><br/>Is &quot;isgroup&quot; ever false? Would it save typing if group is the default (so the flag is &quot;issingle&quot;)?<br/><br/><br/><br/>You have:<br/><pre><code>&lt;needs&gt;!mirror_smashed&lt;/needs&gt;</code></pre><br/>Quest uses &quot;not&quot;, might be better as &lt;needs&gt;not mirror_smashed&lt;/needs&gt;<br/><br/><br/><br/>Any GUI support? Looks like the answer is no; would be good, even for coders, as it saves typing the XML tags.",
      "PostDate": "2013-09-11T09:01:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26207",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote:3midzthf]In the Integrator's guide, you say it is a good idea to inherit from response library types, but you do not do that in the demo (because the demo is not integrated?), or in the examples later in that doc.[/quote:3midzthf]\nActually all standard Quest objects in the demo aslx do: the room inherits from ResponseLib_Room, the bat inherits from ResponseLib_Object, the player inherits from ResponseLib_Player, etc. The responses themselves have no base types. They're just pure data objects. (For some reason, in the demo, I inherited &quot;machine&quot; from ResponseLib_Responder. That's actually wrong. It should be ResponseLib_Object.)\n\n[quote:3midzthf]This seems to assume that a certain order is preserved, that RoomLook_MachineOn is always before RoomLook_MachineOff (as only the former has the condition). Is that a safe assumption?[/quote:3midzthf] \nI really hope so. If not, then everything falls apart. I will do a &quot;save&quot; test. I'll also ask Alex. \n\n[quote:3midzthf]For topics, I see LOOk and LOOKAT used as examples. Are these topics hardcoded into Quest/ResponseLib? If so, is there a full list of topics somewhere? Or does response lib actually send this value to the Quest parser?[/quote:3midzthf]\nI'll have to make that stand out more in the Integrator's Guide. For verbs, the topic that comes in is the verb's &quot;property&quot; attribute upper-cased. For commands, it's the upper-case form of the command's name. I decided to go with upper-cased forms of verbs/commands and lower-cased forms of verb/command *text* (e.g. the text value for &quot;ask/tell&quot;) as a canonical form. That actually causes a conflict with &quot;sit&quot; and &quot;siton&quot; (why the property for &quot;siton&quot; is &quot;sit&quot; is a mystery to me). I had contemplated going through each of the standard Quest verbs and listing what that would be in the doc. I think I'll still do that. I had figured that if people could figure out what attribute to use for a verb, they could work out the corresponding topic, but why not be comprehensive? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> As a fallback, you can use &quot;show topics&quot; to see what the verb or command causes to be injected.\n\n[quote:3midzthf]Is &quot;isgroup&quot; ever false? Would it save typing if group is the default (so the flag is &quot;issingle&quot;)?[/quote:3midzthf]\nActually, out of the 60 response objects in that file, only 7 are groups. But this does raise a point: the &quot;isgroup&quot; is more or less typically necessary for the top level set of responses that an object refers to. Hmm... Originally, that top level set of objects was just an object list of responses. So you didn't need &quot;isgroup&quot;, since it wasn't the same thing as a response; it was just a list of responses. For some reason, I eventually realized I could make the top level object a response in its own right, to make it all consistent. But then you had to mark it as &quot;isgroup&quot; unless you just wanted a single response at the top (but who would?). Let me think about that. I could easily change it back to where the top level object is just a container for the responses, where &quot;isgroup&quot; is no longer needed at the top. It will be a data structure inconsistency, but it will make it simpler. Or perhaps I can work out a way to special-case the top-level set. Thanks!\n\n[quote:3midzthf]Quest uses &quot;not&quot;, might be better as &lt;needs&gt;not mirror_smashed&lt;/needs&gt;[/quote:3midzthf]\nThe reason for this is that it might not be a single word. For example, if a topic has multiple needs, then you just list them there:\n\n&lt;needs&gt;sawfigure !conversing&lt;needs&gt;\n\nmeans &quot;needs sawfigure and not conversing&quot;. I just do a split on the string and then check each word, with &quot;!&quot; being a convenient first character to look for. If I wanted to switch to &quot;not&quot;, I'd have to parse the words more to look for words to pair up. Let me think about that. I do understand what you mean. I was also contemplating allowing things like &quot;and&quot; and &quot;or&quot;, as the default now is always &quot;and&quot;, but then you need to get into parentheses to really be full-featured, and it felt more complicated. But... the ability to have &quot;or&quot; might be handy.\n\n[quote:3midzthf]Any GUI support? Looks like the answer is no; would be good, even for coders, as it saves typing the XML tags.[/quote:3midzthf]\nThe only real GUI support is via the Attributes tab of the object. Fortunately, Quest puts the object-defined attributes up front (as opposed to the inherited ones), so you don't have to paw through the list. You could, in theory, do it all in the GUI that way. At least you wouldn't have to type the XML! I had initially considered showing in the doc both the GUI and non-GUI ways to set up objects, especially in the Integrator's Guide for the top-level object inheritance and the response attributes. Perhaps there can be a separate &quot;Using the GUI&quot; section.\n\nThis is great feedback. I really appreciate it.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>In the Integrator's guide, you say it is a good idea to inherit from response library types, but you do not do that in the demo (because the demo is not integrated?), or in the examples later in that doc.</p></blockquote><br/>Actually all standard Quest objects in the demo aslx do: the room inherits from ResponseLib_Room, the bat inherits from ResponseLib_Object, the player inherits from ResponseLib_Player, etc. The responses themselves have no base types. They're just pure data objects. (For some reason, in the demo, I inherited &quot;machine&quot; from ResponseLib_Responder. That's actually wrong. It should be ResponseLib_Object.)<br/><br/><blockquote><p>This seems to assume that a certain order is preserved, that RoomLook_MachineOn is always before RoomLook_MachineOff (as only the former has the condition). Is that a safe assumption?</p></blockquote> <br/>I really hope so. If not, then everything falls apart. I will do a &quot;save&quot; test. I'll also ask Alex. <br/><br/><blockquote><p>For topics, I see LOOk and LOOKAT used as examples. Are these topics hardcoded into Quest/ResponseLib? If so, is there a full list of topics somewhere? Or does response lib actually send this value to the Quest parser?</p></blockquote><br/>I'll have to make that stand out more in the Integrator's Guide. For verbs, the topic that comes in is the verb's &quot;property&quot; attribute upper-cased. For commands, it's the upper-case form of the command's name. I decided to go with upper-cased forms of verbs/commands and lower-cased forms of verb/command *text* (e.g. the text value for &quot;ask/tell&quot;) as a canonical form. That actually causes a conflict with &quot;sit&quot; and &quot;siton&quot; (why the property for &quot;siton&quot; is &quot;sit&quot; is a mystery to me). I had contemplated going through each of the standard Quest verbs and listing what that would be in the doc. I think I'll still do that. I had figured that if people could figure out what attribute to use for a verb, they could work out the corresponding topic, but why not be comprehensive? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> As a fallback, you can use &quot;show topics&quot; to see what the verb or command causes to be injected.<br/><br/><blockquote><p>Is &quot;isgroup&quot; ever false? Would it save typing if group is the default (so the flag is &quot;issingle&quot;)?</p></blockquote><br/>Actually, out of the 60 response objects in that file, only 7 are groups. But this does raise a point: the &quot;isgroup&quot; is more or less typically necessary for the top level set of responses that an object refers to. Hmm... Originally, that top level set of objects was just an object list of responses. So you didn't need &quot;isgroup&quot;, since it wasn't the same thing as a response; it was just a list of responses. For some reason, I eventually realized I could make the top level object a response in its own right, to make it all consistent. But then you had to mark it as &quot;isgroup&quot; unless you just wanted a single response at the top (but who would?). Let me think about that. I could easily change it back to where the top level object is just a container for the responses, where &quot;isgroup&quot; is no longer needed at the top. It will be a data structure inconsistency, but it will make it simpler. Or perhaps I can work out a way to special-case the top-level set. Thanks!<br/><br/><blockquote><p>Quest uses &quot;not&quot;, might be better as &lt;needs&gt;not mirror_smashed&lt;/needs&gt;</p></blockquote><br/>The reason for this is that it might not be a single word. For example, if a topic has multiple needs, then you just list them there:<br/><br/>&lt;needs&gt;sawfigure !conversing&lt;needs&gt;<br/><br/>means &quot;needs sawfigure and not conversing&quot;. I just do a split on the string and then check each word, with &quot;!&quot; being a convenient first character to look for. If I wanted to switch to &quot;not&quot;, I'd have to parse the words more to look for words to pair up. Let me think about that. I do understand what you mean. I was also contemplating allowing things like &quot;and&quot; and &quot;or&quot;, as the default now is always &quot;and&quot;, but then you need to get into parentheses to really be full-featured, and it felt more complicated. But... the ability to have &quot;or&quot; might be handy.<br/><br/><blockquote><p>Any GUI support? Looks like the answer is no; would be good, even for coders, as it saves typing the XML tags.</p></blockquote><br/>The only real GUI support is via the Attributes tab of the object. Fortunately, Quest puts the object-defined attributes up front (as opposed to the inherited ones), so you don't have to paw through the list. You could, in theory, do it all in the GUI that way. At least you wouldn't have to type the XML! I had initially considered showing in the doc both the GUI and non-GUI ways to set up objects, especially in the Integrator's Guide for the top-level object inheritance and the response attributes. Perhaps there can be a separate &quot;Using the GUI&quot; section.<br/><br/>This is great feedback. I really appreciate it.",
      "PostDate": "2013-09-11T10:04:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26208",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I did a Save test, and it seems to work fine as far as object order goes.\n\nI did run into a Save problem that Alex has reported as bug - that Boolean values in dictionaries don't serialize properly. I have  made a change to the library to work around this, and the new version is attached.\n\nEdit: Attachment deleted as the initial posting now has the latest version.",
      "EditableFormat": "bbcode",
      "HTML": "I did a Save test, and it seems to work fine as far as object order goes.<br/><br/>I did run into a Save problem that Alex has reported as bug - that Boolean values in dictionaries don't serialize properly. I have  made a change to the library to work around this, and the new version is attached.<br/><br/>Edit: Attachment deleted as the initial posting now has the latest version.",
      "PostDate": "2013-09-11T10:57:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26209",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "A further update: I asked Alex about object order, and he said the order should be preserved across saves. He even went so far as to say that if the order was not preserved, it should be considered a bug to be fixed. (Whew!)",
      "EditableFormat": "bbcode",
      "HTML": "A further update: I asked Alex about object order, and he said the order should be preserved across saves. He even went so far as to say that if the order was not preserved, it should be considered a bug to be fixed. (Whew!)",
      "PostDate": "2013-09-11T12:00:19+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26210",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Todo list:",
      "EditableFormat": "bbcode",
      "HTML": "Todo list:",
      "PostDate": "2013-09-11T12:14:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26212",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Thinking about this further, I would be inclined to use &quot;!&quot; rather than &quot;not&quot;. It feels better when you have &lt;sets&gt; as well. And saves typing.\n\n\nYou could have a &lt;needsone&gt; tag to indicate an OR situation; the response just needs one flag to be set from those given.\n\n\n&quot;Selection phase: Only the responses with the top score are selected. There may be more than one response selected if they have equal scores.&quot;\nI cannot imagine when I would want more than one response. Always giving a prompt is a way around thas however.\n\n\n&quot;In the following example, “HIT” is marked as a required keyword. If that keyword does not exist in the call, then the response is discarded during the eligibility phase. Its score it not even computed.&quot;\nI am uncertain how well this would work. I can see requiring something for my response, but I would want to allow a number of synonyms. What if the player types &quot;strike&quot; or &quot;attack&quot;? I want them handled with the same response. But I still only want that response to be seen if one of those is present. Can you have multiple words flagged with *, and only one is required?",
      "EditableFormat": "bbcode",
      "HTML": "Thinking about this further, I would be inclined to use &quot;!&quot; rather than &quot;not&quot;. It feels better when you have &lt;sets&gt; as well. And saves typing.<br/><br/><br/>You could have a &lt;needsone&gt; tag to indicate an OR situation; the response just needs one flag to be set from those given.<br/><br/><br/>&quot;Selection phase: Only the responses with the top score are selected. There may be more than one response selected if they have equal scores.&quot;<br/>I cannot imagine when I would want more than one response. Always giving a prompt is a way around thas however.<br/><br/><br/>&quot;In the following example, “HIT” is marked as a required keyword. If that keyword does not exist in the call, then the response is discarded during the eligibility phase. Its score it not even computed.&quot;<br/>I am uncertain how well this would work. I can see requiring something for my response, but I would want to allow a number of synonyms. What if the player types &quot;strike&quot; or &quot;attack&quot;? I want them handled with the same response. But I still only want that response to be seen if one of those is present. Can you have multiple words flagged with *, and only one is required?",
      "PostDate": "2013-09-11T16:00:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26214",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote:25qvdi9b]Thinking about this further, I would be inclined to use &quot;!&quot; rather than &quot;not&quot;. It feels better when you have &lt;sets&gt; as well. And saves typing.[/quote:25qvdi9b]\n\nOk, good. Less work for me. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n[quote:25qvdi9b]&quot;Selection phase: Only the responses with the top score are selected. There may be more than one response selected if they have equal scores.&quot; I cannot imagine when I would want more than one response.[/quote:25qvdi9b]\n\nI have encountered some uses for that. One is in the case of the room description. The sample game shows this (the machine adds its own description into the room description).\n\nThe other case is when using prompts as multiple choice options (like a menu):\n\n[code:25qvdi9b]&lt;object name=&quot;GenderLeadin&quot;&gt;\n  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;\n  &lt;text&gt;The elf leans in closer&#46; &quot;Be ye male or be ye female?&quot;&lt;/text&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;GenderMale&quot;&gt;\n  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;\n  &lt;prompt&gt;I'm a red-blooded male&lt;/prompt&gt;\n  &lt;sets&gt;male&lt;/sets&gt;\n  &lt;calls&gt;GENDER_SET&lt;/calls&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;GenderFemale&quot;&gt;\n  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;\n  &lt;prompt&gt;I'm all woman&lt;/prompt&gt;\n  &lt;sets&gt;female&lt;/sets&gt;\n  &lt;calls&gt;GENDER_SET&lt;/calls&gt;\n &lt;/object&gt;[/code:25qvdi9b]\nThis will print out the lead-in and then the two menu choices.\n\n(You can invoke this by either calling ResponseLib_Call(&quot;GENDER_QUERY&quot;) in a script, or by using:\n\n[code:25qvdi9b]&lt;calls&gt;GENDER_QUERY&lt;/calls&gt;[/code:25qvdi9b]\nin a response.)\n\n[quote:25qvdi9b]Can you have multiple words flagged with *, and only one is required?[/quote:25qvdi9b]\nI was going to answer that it is that way, but then I looked at the code and realized I had done it the other way. I actually do want it to be an &quot;or&quot; situation, since topics are already non-exclusive. So I'll change the code.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Thinking about this further, I would be inclined to use &quot;!&quot; rather than &quot;not&quot;. It feels better when you have &lt;sets&gt; as well. And saves typing.</p></blockquote><br/><br/>Ok, good. Less work for me. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/><blockquote><p>&quot;Selection phase: Only the responses with the top score are selected. There may be more than one response selected if they have equal scores.&quot; I cannot imagine when I would want more than one response.</p></blockquote><br/><br/>I have encountered some uses for that. One is in the case of the room description. The sample game shows this (the machine adds its own description into the room description).<br/><br/>The other case is when using prompts as multiple choice options (like a menu):<br/><br/><pre><code>&lt;object name=&quot;GenderLeadin&quot;&gt;<br/>  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;<br/>  &lt;text&gt;The elf leans in closer&#46; &quot;Be ye male or be ye female?&quot;&lt;/text&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;GenderMale&quot;&gt;<br/>  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;<br/>  &lt;prompt&gt;I'm a red-blooded male&lt;/prompt&gt;<br/>  &lt;sets&gt;male&lt;/sets&gt;<br/>  &lt;calls&gt;GENDER_SET&lt;/calls&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;GenderFemale&quot;&gt;<br/>  &lt;topics&gt;GENDER_QUERY&lt;/topics&gt;<br/>  &lt;prompt&gt;I'm all woman&lt;/prompt&gt;<br/>  &lt;sets&gt;female&lt;/sets&gt;<br/>  &lt;calls&gt;GENDER_SET&lt;/calls&gt;<br/> &lt;/object&gt;</code></pre><br/>This will print out the lead-in and then the two menu choices.<br/><br/>(You can invoke this by either calling ResponseLib_Call(&quot;GENDER_QUERY&quot;) in a script, or by using:<br/><br/><pre><code>&lt;calls&gt;GENDER_QUERY&lt;/calls&gt;</code></pre><br/>in a response.)<br/><br/><blockquote><p>Can you have multiple words flagged with *, and only one is required?</p></blockquote><br/>I was going to answer that it is that way, but then I looked at the code and realized I had done it the other way. I actually do want it to be an &quot;or&quot; situation, since topics are already non-exclusive. So I'll change the code.",
      "PostDate": "2013-09-11T20:16:01+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26215",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Thinking about it, I guess you could also do my menu example as:\n\n[code:2uv3uklh]&lt;object name=&quot;GenderQuery&quot;&gt;\n  &lt;topics&gt;*GENDER_QUERY&lt;/topics&gt;\n  &lt;isgroup/&gt;\n  &lt;object name=&quot;GenderLeadin&quot;&gt;\n    &lt;text&gt;The elf leans in closer&#46; &quot;Be ye male or be ye female?&quot;&lt;/text&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;GenderMale&quot;&gt;\n    &lt;prompt&gt;I'm a red-blooded male&lt;/prompt&gt;\n    &lt;text&gt;&quot;I'm a man, thank you&#46;&quot;&lt;/text&gt;\n    &lt;sets&gt;male&lt;/sets&gt;\n    &lt;calls&gt;GENDER_SET&lt;/calls&gt;\n   &lt;/object&gt;\n  &lt;object name=&quot;GenderFemale&quot;&gt;\n    &lt;prompt&gt;I'm all woman&lt;/prompt&gt;\n    &lt;text&gt;&quot;I'm a woman, you twit&#46;&quot;&lt;/text&gt;\n    &lt;sets&gt;female&lt;/sets&gt;\n    &lt;calls&gt;GENDER_SET&lt;/calls&gt;\n   &lt;/object&gt;\n&lt;/object&gt;[/code:2uv3uklh]\n\nIt's still invoking multiple responses, but they're more nicely grouped.",
      "EditableFormat": "bbcode",
      "HTML": "Thinking about it, I guess you could also do my menu example as:<br/><br/><pre><code>&lt;object name=&quot;GenderQuery&quot;&gt;<br/>  &lt;topics&gt;*GENDER_QUERY&lt;/topics&gt;<br/>  &lt;isgroup/&gt;<br/>  &lt;object name=&quot;GenderLeadin&quot;&gt;<br/>    &lt;text&gt;The elf leans in closer&#46; &quot;Be ye male or be ye female?&quot;&lt;/text&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;GenderMale&quot;&gt;<br/>    &lt;prompt&gt;I'm a red-blooded male&lt;/prompt&gt;<br/>    &lt;text&gt;&quot;I'm a man, thank you&#46;&quot;&lt;/text&gt;<br/>    &lt;sets&gt;male&lt;/sets&gt;<br/>    &lt;calls&gt;GENDER_SET&lt;/calls&gt;<br/>   &lt;/object&gt;<br/>  &lt;object name=&quot;GenderFemale&quot;&gt;<br/>    &lt;prompt&gt;I'm all woman&lt;/prompt&gt;<br/>    &lt;text&gt;&quot;I'm a woman, you twit&#46;&quot;&lt;/text&gt;<br/>    &lt;sets&gt;female&lt;/sets&gt;<br/>    &lt;calls&gt;GENDER_SET&lt;/calls&gt;<br/>   &lt;/object&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>It's still invoking multiple responses, but they're more nicely grouped.",
      "PostDate": "2013-09-11T20:34:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26216",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Here's something to ponder... Given the above &quot;menu&quot; (the second one with text), if you add this to the GenderMale:\n\n[code:i12v3loc]&lt;needs&gt;!female&lt;/needs&gt;[/code:i12v3loc]\nand this to the GenderFemale\n\n[code:i12v3loc]&lt;needs&gt;!male&lt;/needs&gt;[/code:i12v3loc]\nthen something interesting happens if &quot;male&quot; or &quot;female&quot; is already defined: the &quot;other&quot; response doesn't match, you end up with only a single response with a prompt, and that single response will just be executed directly. \n\nSo if &quot;male&quot; were already set, you'd just see:\n\n[quote:i12v3loc]The elf leans in closer. &quot;Be ye male or be ye female?&quot;\n&quot;I'm a man, thank you.&quot;[/quote:i12v3loc]",
      "EditableFormat": "bbcode",
      "HTML": "Here's something to ponder... Given the above &quot;menu&quot; (the second one with text), if you add this to the GenderMale:<br/><br/><pre><code>&lt;needs&gt;!female&lt;/needs&gt;</code></pre><br/>and this to the GenderFemale<br/><br/><pre><code>&lt;needs&gt;!male&lt;/needs&gt;</code></pre><br/>then something interesting happens if &quot;male&quot; or &quot;female&quot; is already defined: the &quot;other&quot; response doesn't match, you end up with only a single response with a prompt, and that single response will just be executed directly. <br/><br/>So if &quot;male&quot; were already set, you'd just see:<br/><br/><blockquote><p>The elf leans in closer. &quot;Be ye male or be ye female?&quot;<br/>&quot;I'm a man, thank you.&quot;</p></blockquote>",
      "PostDate": "2013-09-11T20:50:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26234",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote:elz27sn0]I have encountered some uses for that. One is in the case of the room description. The sample game shows this (the machine adds its own description into the room description).\n\nThe other case is when using prompts as multiple choice options (like a menu):[/quote:elz27sn0]\nI was guessing the machine adding its own description was a recursive call back to the response library, rather than two competing responses.\n\nWith regards to menus, it would be good to put that in the demo. It is an aspect that appeals and is not at all obvious.\n\nI would like to have a play around. Do you intend to release a new version in the near future?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I have encountered some uses for that. One is in the case of the room description. The sample game shows this (the machine adds its own description into the room description).<br/><br/>The other case is when using prompts as multiple choice options (like a menu):</p></blockquote><br/>I was guessing the machine adding its own description was a recursive call back to the response library, rather than two competing responses.<br/><br/>With regards to menus, it would be good to put that in the demo. It is an aspect that appeals and is not at all obvious.<br/><br/>I would like to have a play around. Do you intend to release a new version in the near future?",
      "PostDate": "2013-09-12T08:26:19+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26235",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Let me update it by this weekend with the changes we've discussed. It may be sooner (perhaps even tonight), but it depends on work.",
      "EditableFormat": "bbcode",
      "HTML": "Let me update it by this weekend with the changes we've discussed. It may be sooner (perhaps even tonight), but it depends on work.",
      "PostDate": "2013-09-12T09:05:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26240",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "New version of Library and Sample uploaded to initial posting. Changes listed in initial posting.",
      "EditableFormat": "bbcode",
      "HTML": "New version of Library and Sample uploaded to initial posting. Changes listed in initial posting.",
      "PostDate": "2013-09-12T23:16:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26398",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "New library posted (docs to come later). Support added to allow for inheritance via &quot;includes&quot; of common responses as well as the responder object being passed into action scripts so that shared actions can apply to different objects.",
      "EditableFormat": "bbcode",
      "HTML": "New library posted (docs to come later). Support added to allow for inheritance via &quot;includes&quot; of common responses as well as the responder object being passed into action scripts so that shared actions can apply to different objects.",
      "PostDate": "2013-09-27T11:17:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "27811",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "This is probably a dumb question, but I didn't see it stated explicitly in the docs -- if you're writing a response, say like this, \n\n[code:3eptwv0n]\n    &lt;object name=&quot;BatLook&quot;&gt;\n      &lt;topics&gt;LOOKAT&lt;/topics&gt;\n      &lt;text&gt;Louisville never made a slugger like this&#46;&lt;/text&gt;\n    &lt;/object&gt;\n[/code:3eptwv0n]\n\nDoes the QRL know to call this response because you've named it 'BatLook'? For example naming it 'Bat_Look' wouldn't work?",
      "EditableFormat": "bbcode",
      "HTML": "This is probably a dumb question, but I didn't see it stated explicitly in the docs -- if you're writing a response, say like this, <br/><br/><pre><code><br/>    &lt;object name=&quot;BatLook&quot;&gt;<br/>      &lt;topics&gt;LOOKAT&lt;/topics&gt;<br/>      &lt;text&gt;Louisville never made a slugger like this&#46;&lt;/text&gt;<br/>    &lt;/object&gt;<br/></code></pre><br/><br/>Does the QRL know to call this response because you've named it 'BatLook'? For example naming it 'Bat_Look' wouldn't work?",
      "PostDate": "2014-02-11T02:51:03+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27812",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "The only object names that are critical are the top-level response sets: for example, &quot;bat responses&quot; for the &quot;bat&quot; object, &quot;room responses&quot; for the &quot;room&quot; object, etc. All the other object names can  be anything you like, and I wish, in fact, that you didn't have to give them at all, as they're not used by the library. But every object in Quest needs a name, so you have to provide one.\n\nIn the example you gave, fleshing out a bit more, you have:\n\n[code:27xh02tu]  &lt;object name=&quot;bat responses&quot;&gt;\n    &lt;object name=&quot;BatLook&quot;&gt;\n      &lt;topics&gt;LOOKAT&lt;/topics&gt;\n      &lt;text&gt;Louisville never made a slugger like this&#46;&lt;/text&gt;\n    &lt;/object&gt;\n   &#46;&#46;&#46;\n  &lt;/object&gt;[/code:27xh02tu]\n\nIt's part of the &quot;bat responses&quot; set, so it will be looked up whenever &quot;bat&quot; is the target (e.g. &quot;look bat&quot;, &quot;use bat&quot;, etc). And the LOOKAT topic means it will be the response when &quot;x bat&quot; or &quot;look at bat&quot; are input. The &quot;BatLook&quot; name could be anything.",
      "EditableFormat": "bbcode",
      "HTML": "The only object names that are critical are the top-level response sets: for example, &quot;bat responses&quot; for the &quot;bat&quot; object, &quot;room responses&quot; for the &quot;room&quot; object, etc. All the other object names can  be anything you like, and I wish, in fact, that you didn't have to give them at all, as they're not used by the library. But every object in Quest needs a name, so you have to provide one.<br/><br/>In the example you gave, fleshing out a bit more, you have:<br/><br/><pre><code>  &lt;object name=&quot;bat responses&quot;&gt;<br/>    &lt;object name=&quot;BatLook&quot;&gt;<br/>      &lt;topics&gt;LOOKAT&lt;/topics&gt;<br/>      &lt;text&gt;Louisville never made a slugger like this&#46;&lt;/text&gt;<br/>    &lt;/object&gt;<br/>   &#46;&#46;&#46;<br/>  &lt;/object&gt;</code></pre><br/><br/>It's part of the &quot;bat responses&quot; set, so it will be looked up whenever &quot;bat&quot; is the target (e.g. &quot;look bat&quot;, &quot;use bat&quot;, etc). And the LOOKAT topic means it will be the response when &quot;x bat&quot; or &quot;look at bat&quot; are input. The &quot;BatLook&quot; name could be anything.",
      "PostDate": "2014-02-11T06:46:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27822",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "Thanks Jay, that makes much more sense!\n\nReally cool work on the library by the way, I'm going to use it in my game.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks Jay, that makes much more sense!<br/><br/>Really cool work on the library by the way, I'm going to use it in my game.",
      "PostDate": "2014-02-11T15:39:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27836",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Great! If you have any questions at all, drop me a PM. I'm curious to see where there may be holes or things not so easily understood. Also, I might have thought of ways of doing things that weren't made clear in the examples.",
      "EditableFormat": "bbcode",
      "HTML": "Great! If you have any questions at all, drop me a PM. I'm curious to see where there may be holes or things not so easily understood. Also, I might have thought of ways of doing things that weren't made clear in the examples.",
      "PostDate": "2014-02-12T20:54:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "29887",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "I'm interested in this for what I think it might do. \n\nFor instance, if I look at the monkey in the cage it might be eating an apple. If I look again ten seconds later it will still be eating the apple. But if I leave the room and come back it might be swinging off the rope or have gone to bed. Is this the sort of thing the code deals with? \n\nAlso, does this then replace quest's code completely? If so is there an interface or are coding skills needed in order to use this?",
      "EditableFormat": "bbcode",
      "HTML": "I'm interested in this for what I think it might do. <br/><br/>For instance, if I look at the monkey in the cage it might be eating an apple. If I look again ten seconds later it will still be eating the apple. But if I leave the room and come back it might be swinging off the rope or have gone to bed. Is this the sort of thing the code deals with? <br/><br/>Also, does this then replace quest's code completely? If so is there an interface or are coding skills needed in order to use this?",
      "PostDate": "2014-08-26T19:25:11+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29892",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote=&quot;Silver&quot;:2st7gv46]I'm interested in this for what I think it might do. \n\nFor instance, if I look at the monkey in the cage it might be eating an apple. If I look again ten seconds later it will still be eating the apple. But if I leave the room and come back it might be swinging off the rope or have gone to bed. Is this the sort of thing the code deals with? [/quote:2st7gv46]\n\nThat is the idea, yes. A general purpose way to have responses to user input that vary depending on game state, etc. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n[quote=&quot;Silver&quot;:2st7gv46]Also, does this then replace quest's code completely? If so is there an interface or are coding skills needed in order to use this?[/quote:2st7gv46]\n\nThe latest code has been integrated with the Quest object model. So you can define responses for objects easily and set up the responses to handle verbs and commands without having to write script for most things.\n\nThe only downside is that it's based around response data definitions, which use Quest objects as responses - and it's not so easy to do that through the GUI interface, since the attributes edit mechanism doesn't lend itself well for this. You can use it, but I prefer looking at the raw text myself. If you do give it a try, I'm curious to see if the GUI would work for you. (I keep meaning to find out if I can create custom editor pages.)\n\nI'm actually using this library in my own current game work. I have a game in development that I'm desperate to get done, but it's that last 20% that seems to take the longest. I'm hoping to submit it for IFComp, but it's looking a bit grim at the moment. (I missed last year's IFComp as well. Then I gave up on it, then I came back to it, then I eventually came up with a new way of looking at the UI that solved a number of problems, and now I'm working on it again. lol)\n\nIf you'd like to try the library out, I'd be happy to help. I don't know if it will work for you or not, but you never know!",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Silver wrote:</cite>I'm interested in this for what I think it might do. <br/><br/>For instance, if I look at the monkey in the cage it might be eating an apple. If I look again ten seconds later it will still be eating the apple. But if I leave the room and come back it might be swinging off the rope or have gone to bed. Is this the sort of thing the code deals with? </blockquote><br/><br/>That is the idea, yes. A general purpose way to have responses to user input that vary depending on game state, etc. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/><blockquote><cite>Silver wrote:</cite>Also, does this then replace quest's code completely? If so is there an interface or are coding skills needed in order to use this?</blockquote><br/><br/>The latest code has been integrated with the Quest object model. So you can define responses for objects easily and set up the responses to handle verbs and commands without having to write script for most things.<br/><br/>The only downside is that it's based around response data definitions, which use Quest objects as responses - and it's not so easy to do that through the GUI interface, since the attributes edit mechanism doesn't lend itself well for this. You can use it, but I prefer looking at the raw text myself. If you do give it a try, I'm curious to see if the GUI would work for you. (I keep meaning to find out if I can create custom editor pages.)<br/><br/>I'm actually using this library in my own current game work. I have a game in development that I'm desperate to get done, but it's that last 20% that seems to take the longest. I'm hoping to submit it for IFComp, but it's looking a bit grim at the moment. (I missed last year's IFComp as well. Then I gave up on it, then I came back to it, then I eventually came up with a new way of looking at the UI that solved a number of problems, and now I'm working on it again. lol)<br/><br/>If you'd like to try the library out, I'd be happy to help. I don't know if it will work for you or not, but you never know!",
      "PostDate": "2014-08-26T21:23:57+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29895",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Well I'm in a position where I've started writing two games (literally the opening scenes, the easiest bit lol) but have plotted them out on paper and looking at having a good overall grasp of the software before hammering them down. So I'll have a play with your script but I really am a complete newbie when it comes to coding (even more than I am IF, but at least I understand the basic principles of that) but maybe now is a good time to learn? I'm in no hurry to get anything finished. I'm a perfectionist (nothing ever gets finished but they would have been good).",
      "EditableFormat": "bbcode",
      "HTML": "Well I'm in a position where I've started writing two games (literally the opening scenes, the easiest bit lol) but have plotted them out on paper and looking at having a good overall grasp of the software before hammering them down. So I'll have a play with your script but I really am a complete newbie when it comes to coding (even more than I am IF, but at least I understand the basic principles of that) but maybe now is a good time to learn? I'm in no hurry to get anything finished. I'm a perfectionist (nothing ever gets finished but they would have been good).",
      "PostDate": "2014-08-26T21:58:12+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "33069",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "I'm interested in downloading these and seeing what they can do, but all the zip files are reading as corrupted and won't open.  Could someone please check and see if they are working right, so at least I'll know if the problem is on my end or not?",
      "EditableFormat": "bbcode",
      "HTML": "I'm interested in downloading these and seeing what they can do, but all the zip files are reading as corrupted and won't open.  Could someone please check and see if they are working right, so at least I'll know if the problem is on my end or not?",
      "PostDate": "2014-12-22T06:01:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33072",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Thanks for pointing that out - I moved the forum to a different server over the weekend and this was one of the casualties. It is fixed now, so please try again!",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for pointing that out - I moved the forum to a different server over the weekend and this was one of the casualties. It is fixed now, so please try again!",
      "PostDate": "2014-12-22T09:27:46+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33107",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "Works fine now, thank you!\n\nI've only played with it a bit... will return later with questions/comments.",
      "EditableFormat": "bbcode",
      "HTML": "Works fine now, thank you!<br/><br/>I've only played with it a bit... will return later with questions/comments.",
      "PostDate": "2014-12-22T22:43:40+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33108",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you want to see it in action, you can look at the &quot;spondre&quot; source as well. The game was written using the library. (In fact, the library in that game source is more up-to-date than this one.)",
      "EditableFormat": "bbcode",
      "HTML": "If you want to see it in action, you can look at the &quot;spondre&quot; source as well. The game was written using the library. (In fact, the library in that game source is more up-to-date than this one.)",
      "PostDate": "2014-12-22T22:58:41+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33111",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "Well, I've only just started with the most preliminary aspects of the library and I've encountered a problem.  When you take or drop an object, it does it successfully, but not without displaying the following:\n\nError running script&#058; Error compiling expression 'value': Unknown object or variable 'value'\n\nI even tried dropping the bat in the included demo, just to make sure it wasn't something I'd messed up... same result.  Am I missing something?  I want to make sure there's some easy fix for this before I delve any deeper...",
      "EditableFormat": "bbcode",
      "HTML": "Well, I've only just started with the most preliminary aspects of the library and I've encountered a problem.  When you take or drop an object, it does it successfully, but not without displaying the following:<br/><br/>Error running script&#058; Error compiling expression 'value': Unknown object or variable 'value'<br/><br/>I even tried dropping the bat in the included demo, just to make sure it wasn't something I'd messed up... same result.  Am I missing something?  I want to make sure there's some easy fix for this before I delve any deeper...",
      "PostDate": "2014-12-23T05:33:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33112",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It was fixed but not uploaded as part of the sample. You can either grab the response library from the spondre source or I have attached the latest response library as a separate attachment in the first posting in this thread. Sorry about that!\n\nIf you wish to manually fix the version you have, search for the function &quot;ResponseLib_AddObjectParam&quot; and change:\n\n[code:2d0niuu2]foreach (obj, value)[/code:2d0niuu2]\nto\n\n[code:2d0niuu2]foreach (obj, o)[/code:2d0niuu2]\n\nThe new version gives you some nifty new features, though (like being able to have numeric values and use &quot;needs&quot; with some small set of expressions, so you can have value-based responses in addition to binary &quot;is this set&quot; sort of conditions), so you might want to switch to it anyway! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "It was fixed but not uploaded as part of the sample. You can either grab the response library from the spondre source or I have attached the latest response library as a separate attachment in the first posting in this thread. Sorry about that!<br/><br/>If you wish to manually fix the version you have, search for the function &quot;ResponseLib_AddObjectParam&quot; and change:<br/><br/><pre><code>foreach (obj, value)</code></pre><br/>to<br/><br/><pre><code>foreach (obj, o)</code></pre><br/><br/>The new version gives you some nifty new features, though (like being able to have numeric values and use &quot;needs&quot; with some small set of expressions, so you can have value-based responses in addition to binary &quot;is this set&quot; sort of conditions), so you might want to switch to it anyway! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-12-23T09:39:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33122",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "I had already downloaded the spondre source -- which you told me had a newer, better version of the library -- but I was using the older one!  My bad.  I'll make the switch.  Thanks!",
      "EditableFormat": "bbcode",
      "HTML": "I had already downloaded the spondre source -- which you told me had a newer, better version of the library -- but I was using the older one!  My bad.  I'll make the switch.  Thanks!",
      "PostDate": "2014-12-23T18:11:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33125",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "The response library can be used for either parser-based games (like the demo) or hypertext-type games (like spondre). If you're going parser-based, then the demo is a good start. If you'd like a setup like spondre, let me know. I could provide a stripped-down &quot;starter kit&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "The response library can be used for either parser-based games (like the demo) or hypertext-type games (like spondre). If you're going parser-based, then the demo is a good start. If you'd like a setup like spondre, let me know. I could provide a stripped-down &quot;starter kit&quot;.",
      "PostDate": "2014-12-23T20:34:47+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33128",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "I'm going the parser route, for now.  I was actually working on a hypertext sort of thing, but I've put it on the backburner.  Maybe if I can get a proper handle on this library I'll give it a go after all!\n\nAnyway, I like what I'm seeing, in particular the fact that I can utilize the functions I want but use the editor for things it does easier (like basic, unconditional verb/object pairings).\n\nOne thing has me confused, and that's &quot;suggests&quot; and &quot;listeners&quot;.  How I think it works, and PLEASE correct me if I'm wrong: a response is given a &quot;suggests&quot; attribute.  This is a keyword or words that have now been &quot;suggested&quot; to any listeners in the current context.  If the player inputs one of those keywords subsequently, the listener will produce a particular response.  Is that the basic idea?  And, if so, how do you create the response the listener will produce?  Is it just a regular response keyed to that word?  If so, then why do you need &quot;suggests&quot; at all?\n\nAs you can see I'm a little turned around.  Sorry if my questions are a bit dense, my understanding of code is minimal.  I greatly appreciate the willingness to help me out, though.",
      "EditableFormat": "bbcode",
      "HTML": "I'm going the parser route, for now.  I was actually working on a hypertext sort of thing, but I've put it on the backburner.  Maybe if I can get a proper handle on this library I'll give it a go after all!<br/><br/>Anyway, I like what I'm seeing, in particular the fact that I can utilize the functions I want but use the editor for things it does easier (like basic, unconditional verb/object pairings).<br/><br/>One thing has me confused, and that's &quot;suggests&quot; and &quot;listeners&quot;.  How I think it works, and PLEASE correct me if I'm wrong: a response is given a &quot;suggests&quot; attribute.  This is a keyword or words that have now been &quot;suggested&quot; to any listeners in the current context.  If the player inputs one of those keywords subsequently, the listener will produce a particular response.  Is that the basic idea?  And, if so, how do you create the response the listener will produce?  Is it just a regular response keyed to that word?  If so, then why do you need &quot;suggests&quot; at all?<br/><br/>As you can see I'm a little turned around.  Sorry if my questions are a bit dense, my understanding of code is minimal.  I greatly appreciate the willingness to help me out, though.",
      "PostDate": "2014-12-23T21:18:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33153",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I don't know how I missed this before, but apologies for not responding sooner. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nYou have the right idea in general. Topics suggested by responses are broadcast to all available listeners. The default behavior for a listener is to add the received topics to its &quot;short term topics&quot; list. Short term topics differ from long term topics in that short term topics fade away over time. They're meant to be contextual, representing the current topics of discussion or activity, as opposed to long term topics which are meant to be more permanent. (The italicized topics shown in spondre in the bottom bar are short term topics.)\n\nRight now, short term topics are used by &quot;callers&quot;. These are responders that can trigger their own topic queries (the same as the player does either by clicking links or typing at the prompt). The Spon character is a caller - he has his own actions, prompts his own conversation, asks questions, etc based on long and short term topics. For example, if you have looked at the holes once you've begun speaking to him, then he'll say &quot;Be sure you don't put your hand in those. You might not get it back.&quot; Stuff like that. It's supposed to allow characters that have their own independent actions to track the conversation to inject their own relevant topics.\n\nCallers have their own set of responses. If you look in the spondre source, in spondre.aslx, you'll see that &quot;TheOther&quot; character looks like this:\n\n[code:3eo6us6b]    &lt;object name=&quot;TheOther&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;ResponseLib_Caller&quot; /&gt;\n      &lt;alias&gt;the strange figure&lt;/alias&gt;\n      &lt;capalias&gt;The strange figure&lt;/capalias&gt;\n      &lt;longtermtopics type=&quot;dictionary&quot; /&gt;\n      &lt;reflectcount type=&quot;int&quot;&gt;0&lt;/reflectcount&gt;\n      &lt;responses type=&quot;object&quot;&gt;TheOtherResponses&lt;/responses&gt;\n      &lt;calls type=&quot;object&quot;&gt;TheOtherCalls&lt;/calls&gt;\n      &lt;changedalias type=&quot;script&quot;&gt;\n        this&#46;capalias = CapFirst(this&#46;alias)\n      &lt;/changedalias&gt;\n    &lt;/object&gt;[/code:3eo6us6b]\nIt has both &quot;responses&quot; (which are the responses to the player's queries, etc) and &quot;calls&quot;, which are what it prompts on its own based on its own internal long- and short-term topics.\n\nCallers are triggered to &quot;do their thing&quot; by a custom topic called &quot;CALL&quot;. You don't need to worry about matching that topic - it's used internally. You just need to provide caller responses. This caller topic is sent via a turn script, after the IDLE topic is sent. So callers get a chance to contribute to things on each turn. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> So you could have a caller response with topics of &quot;cat&quot;, and if the topic &quot;cat&quot; comes up via a suggests, then the next time the calls are requested, it will trigger that response (if it's eligible). That way the &quot;caller&quot; NPC can appear to respond to the current conversation - or whatever the player happens to be doing, if the response suggests the appropriate thing.",
      "EditableFormat": "bbcode",
      "HTML": "I don't know how I missed this before, but apologies for not responding sooner. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>You have the right idea in general. Topics suggested by responses are broadcast to all available listeners. The default behavior for a listener is to add the received topics to its &quot;short term topics&quot; list. Short term topics differ from long term topics in that short term topics fade away over time. They're meant to be contextual, representing the current topics of discussion or activity, as opposed to long term topics which are meant to be more permanent. (The italicized topics shown in spondre in the bottom bar are short term topics.)<br/><br/>Right now, short term topics are used by &quot;callers&quot;. These are responders that can trigger their own topic queries (the same as the player does either by clicking links or typing at the prompt). The Spon character is a caller - he has his own actions, prompts his own conversation, asks questions, etc based on long and short term topics. For example, if you have looked at the holes once you've begun speaking to him, then he'll say &quot;Be sure you don't put your hand in those. You might not get it back.&quot; Stuff like that. It's supposed to allow characters that have their own independent actions to track the conversation to inject their own relevant topics.<br/><br/>Callers have their own set of responses. If you look in the spondre source, in spondre.aslx, you'll see that &quot;TheOther&quot; character looks like this:<br/><br/><pre><code>    &lt;object name=&quot;TheOther&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;ResponseLib_Caller&quot; /&gt;<br/>      &lt;alias&gt;the strange figure&lt;/alias&gt;<br/>      &lt;capalias&gt;The strange figure&lt;/capalias&gt;<br/>      &lt;longtermtopics type=&quot;dictionary&quot; /&gt;<br/>      &lt;reflectcount type=&quot;int&quot;&gt;0&lt;/reflectcount&gt;<br/>      &lt;responses type=&quot;object&quot;&gt;TheOtherResponses&lt;/responses&gt;<br/>      &lt;calls type=&quot;object&quot;&gt;TheOtherCalls&lt;/calls&gt;<br/>      &lt;changedalias type=&quot;script&quot;&gt;<br/>        this&#46;capalias = CapFirst(this&#46;alias)<br/>      &lt;/changedalias&gt;<br/>    &lt;/object&gt;</code></pre><br/>It has both &quot;responses&quot; (which are the responses to the player's queries, etc) and &quot;calls&quot;, which are what it prompts on its own based on its own internal long- and short-term topics.<br/><br/>Callers are triggered to &quot;do their thing&quot; by a custom topic called &quot;CALL&quot;. You don't need to worry about matching that topic - it's used internally. You just need to provide caller responses. This caller topic is sent via a turn script, after the IDLE topic is sent. So callers get a chance to contribute to things on each turn. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> So you could have a caller response with topics of &quot;cat&quot;, and if the topic &quot;cat&quot; comes up via a suggests, then the next time the calls are requested, it will trigger that response (if it's eligible). That way the &quot;caller&quot; NPC can appear to respond to the current conversation - or whatever the player happens to be doing, if the response suggests the appropriate thing.",
      "PostDate": "2014-12-24T22:04:54+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33154",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "And the reason why I put this in (as opposed to just having the responders respond directly) is that the suggested topics might not be what the player has initiated. For example, asking a character where they're from might elicit a response like &quot;I lived with my family on a farm in Foobiebush.&quot;, which might then suggest topics like &quot;family father farm Foobiebush&quot;. Later, during a post-turn call, the NPC (depending on design) could pick up on any of those topics, depending on strength (the more you suggest a topic, the higher priority it is) and generate subsequent conversation. Continuing our example, the NPC might on its own then later prompt (as you look at the apple on the table), &quot;Our farm was quite small, but I always loved it there&quot; based on the short term topic &quot;farm&quot; still being in the list, injected by the response suggestion two turns back.",
      "EditableFormat": "bbcode",
      "HTML": "And the reason why I put this in (as opposed to just having the responders respond directly) is that the suggested topics might not be what the player has initiated. For example, asking a character where they're from might elicit a response like &quot;I lived with my family on a farm in Foobiebush.&quot;, which might then suggest topics like &quot;family father farm Foobiebush&quot;. Later, during a post-turn call, the NPC (depending on design) could pick up on any of those topics, depending on strength (the more you suggest a topic, the higher priority it is) and generate subsequent conversation. Continuing our example, the NPC might on its own then later prompt (as you look at the apple on the table), &quot;Our farm was quite small, but I always loved it there&quot; based on the short term topic &quot;farm&quot; still being in the list, injected by the response suggestion two turns back.",
      "PostDate": "2014-12-24T22:10:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33155",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "And if it's not clear, the whole calling/suggesting thing is more advanced. You could probably get away with a fairly complex game without using it at all. It really has specific uses as far as having NPCs having more autonomous actions and reactions.",
      "EditableFormat": "bbcode",
      "HTML": "And if it's not clear, the whole calling/suggesting thing is more advanced. You could probably get away with a fairly complex game without using it at all. It really has specific uses as far as having NPCs having more autonomous actions and reactions.",
      "PostDate": "2014-12-24T22:22:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33158",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "[quote=&quot;jaynabonne&quot;:vuxhkhmy]And if it's not clear, the whole calling/suggesting thing is more advanced.[/quote:vuxhkhmy]\n\nYeah it's pretty clear. <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> \n\nI think I've got a better handle on some of it.  Gonna move forward on my current game plans without implementing that, but I've got a test game set up with it installed so I can keep playing with it and (hopefully) figure more of it out.  I've never made a game before, so this entire thing is one big learning experience.  Thanks for the library and the help... it's great to see people around here are so willing to offer their wisdom to those of us who need it!",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>And if it's not clear, the whole calling/suggesting thing is more advanced.</blockquote><br/><br/>Yeah it's pretty clear. <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> <br/><br/>I think I've got a better handle on some of it.  Gonna move forward on my current game plans without implementing that, but I've got a test game set up with it installed so I can keep playing with it and (hopefully) figure more of it out.  I've never made a game before, so this entire thing is one big learning experience.  Thanks for the library and the help... it's great to see people around here are so willing to offer their wisdom to those of us who need it!",
      "PostDate": "2014-12-25T00:23:10+00:00",
      "LastEditDate": null
    }
  ]
}