{
  "Topic": {
    "TopicId": "gv5dskxe-u_9moq7bnt21a",
    "ForumId": "18",
    "Title": "Suppressing Turn Scripts",
    "LastUpdated": "2018-05-16T22:15:24.6227401Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d85b52e7-21dc-40a0-873a-b54a15ef98d0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest 5.8 will have a new attribute on the game object: ```suppressturnscripts```, which is set to false by default.\r\n\r\nThe ```FinishTurn``` function has been modified to check this value before calling ```RunTurnScripts```:\r\n\r\n## UPDATE: DO NOT USE THIS IN QUEST 5.8!\r\n```\r\n  <function name=\"FinishTurn\">\r\n    if (not GetBoolean(game, \"suppressturnscripts\")) {\r\n      RunTurnScripts\r\n    }\r\n    game.suppressturnscripts = false\r\n    UpdateStatusAttributes\r\n    CheckDarkness\r\n    UpdateObjectLinks\r\n  </function>\r\n```\r\n\r\n---\r\n\r\nIf you are scripting something which will cause the turn scripts to fire an extra time (like a call to ASLEvent), you can add this to the script to suppress the turn scripts once:\r\n\r\n```game.suppressturnscripts = true```\r\n\r\nNote that this will not prevent the turn scripts from firing when using in conjunction with a call to ```ASLEvent```.  It will prevent the turn scripts from firing TWICE in one turn.  This is because of the way ```ASLEvent``` calls are setup.  Initially, they were only used for sending commands when clicking on the buttons or the hyperlinks, so they are hard-coded to call ```FinishTurn```.\r\n\r\nAlso note that setting **game.suppressturnscripts** to true in a normal script (without a call to ```ASLEvent``` or ```Handle*Command```, or something of that nature) will prevent the turn scripts from firing at all.\r\n\r\n---\r\nConfused yet?\r\n\r\nGood!  Now, let's add a turn count to the mix!\r\n\r\n---\r\n# FOR DESKTOP USERS ONLY!!!\r\n\r\nSorry, online users!  I will be overriding a Quest function in this code, and you can't do that.  If you can't use the desktop version of Quest, reading any more of this will be a waste of your time.  (This is only because of all of the crazy things I'm doing at once in this example game, mind you.  I will make myself a note to post a different example for those of you using the web editor.)\r\n\r\n\r\n---\r\n## Suppressing Turn Scripts and Turn Counts\r\n\r\n### An example game, piece by piece\r\n\r\n---\r\n#### The game object\r\n\r\nHere is the game object in full code view:\r\n\r\n```\r\n  <game name=\"Suppressing the Turn Scripts\">\r\n    <gameid>65c36394-fcd4-4abf-89a5-4d0659cb4ef7</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <turns type=\"int\">0</turns>\r\n    <statusattributes type=\"stringdictionary\">\r\n      <item>\r\n        <key>turns</key>\r\n        <value>Turns: !</value>\r\n      </item>\r\n    </statusattributes>\r\n  </game>\r\n```\r\n\r\n---\r\n#### The turns attributes (on the game object)\r\n\r\nI have an integer attribute named \"turns\", which is initially set to 0.\r\n\r\n```    <turns type=\"int\">0</turns>```\r\n\r\nI also have a ```statusattributes``` dictionary attribute set up on the game object:\r\n\r\n```\r\n    <statusattributes type=\"stringdictionary\">\r\n      <item>\r\n        <key>turns</key>\r\n        <value>Turns: !</value>\r\n      </item>\r\n    </statusattributes>\r\n```\r\n\r\n---\r\n### Turn Scripts, Commands, Quest Functions, Javascript Functions, and ASLEvents\r\n\r\n#### The turn count\r\n\r\nI have to set up a function which is called by a modified ```HandleSingleCommand``` to make all of this work together correctly:\r\n\r\n```\r\n  <function name=\"TurnCount\">\r\n    if (not GetBoolean(game, \"notarealturn\")) {\r\n      IncreaseObjectCounter (game, \"turns\")\r\n    }\r\n    game.notarealturn = false\r\n  </function>\r\n```\r\n\r\n---\r\n#### Modifying ```HandleSingleCommand```\r\n\r\nI simply add the line ```TurnCount``` to the very end of the ```HandleSingleCommand``` function's script.\r\n\r\nIf you'd like to see the entire function in code view, click here:\r\n\r\n<details>\r\n\r\n```\r\n  <function name=\"HandleSingleCommand\" parameters=\"command\"><![CDATA[\r\n    if (LCase(command) = \"again\" or LCase(command) = \"g\") {\r\n      // First handle AGAIN\r\n      if (not game.pov.currentcommand = null) {\r\n        HandleSingleCommand (game.pov.currentcommand)\r\n      }\r\n      else {\r\n        msg (\"There is nothing to repeat.\")\r\n      }\r\n    }\r\n    else {\r\n      // Check through all commands for any that match\r\n      candidates = NewObjectList()\r\n      foreach (cmd, ScopeCommands()) {\r\n        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\r\n          list add (candidates, cmd)\r\n        }\r\n      }\r\n      maxstrength = -1\r\n      thiscommand = null\r\n      // Pick the best match\r\n      foreach (candidate, candidates) {\r\n        strength = GetMatchStrength(candidate.pattern, command, candidate.name)\r\n        // favour commands defined later, so an author can override a library command...\r\n        if (strength >= maxstrength) {\r\n          // ... except if the command defined later (candidate) has no parent, and the current best\r\n          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms\r\n          // over global candidates.\r\n          skip = false\r\n          if (thiscommand <> null) {\r\n            if (thiscommand.parent <> null and candidate.parent = null) {\r\n              skip = true\r\n            }\r\n          }\r\n          if (not skip) {\r\n            thiscommand = candidate\r\n            maxstrength = strength\r\n          }\r\n        }\r\n      }\r\n      if (thiscommand = null) {\r\n        if (HasScript(game, \"unresolvedcommandhandler\")) {\r\n          params = NewDictionary()\r\n          dictionary add (params, \"command\", command)\r\n          do (game, \"unresolvedcommandhandler\", params)\r\n        }\r\n        else {\r\n          msg (Template(\"UnrecognisedCommand\"))\r\n        }\r\n        HandleNextCommandQueueItem\r\n      }\r\n      else {\r\n        varlist = Populate(thiscommand.pattern, command, thiscommand.name)\r\n        HandleSingleCommandPattern (command, thiscommand, varlist)\r\n      }\r\n    }\r\n    TurnCount\r\n  ]]></function>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\nIf I wish to suppress the turn count during out of world commands (such as HELP, HINT, etc.), I add this line to the command's script:\r\n\r\n```game.notarealturn = true```\r\n\r\nMy ```TurnCount``` function will automatically set **game.notarealturn** back to false when called, so the turn count will be increased (as it normally would) on the next turn (unless I suppress the turn count again).\r\n\r\n---\r\n#### Suppressing turns scripts while suppressing the turn count\r\n\r\nNow I can suppress the turn scripts and the turn count, even while calling an ASLEvent.\r\n\r\nI have four test commands to play with:\r\n\r\n```\r\n  <command name=\"hint\">\r\n    <pattern>hint;hints</pattern>\r\n    <script>\r\n      game.suppressturnscripts = true\r\n      game.notarealturn = true\r\n      msg (\"This story has no hints.\")\r\n    </script>\r\n  </command>\r\n```\r\n\r\n---\r\n```\r\n  <command name=\"testone\">\r\n    <pattern>test one</pattern>\r\n    <script>\r\n      JS.testOne ()\r\n    </script>\r\n  </command>\r\n```\r\n```\r\n  <command name=\"testtwo\">\r\n    <pattern>test two</pattern>\r\n    <script>\r\n      game.suppressturnscripts = true\r\n      JS.testTwo ()\r\n    </script>\r\n  </command>\r\n```\r\n```\r\n  <command name=\"testthree\">\r\n    <pattern>test three</pattern>\r\n    <script>\r\n      game.notarealturn = true\r\n      game.suppressturnscripts = true\r\n      JS.testThree ()\r\n    </script>\r\n  </command>\r\n```\r\n\r\n---\r\nNote that the HINT command doesn't require anything extra, but each of the TEST commands are calling a JS function, each of which call an ```ASLEvent``` , which each call a Quest function:\r\n\r\n```\r\n  <function name=\"CallMeWithASL\" parameters=\"data\">\r\n    msg (data)\r\n  </function>\r\n```\r\n\r\n---\r\n#### Javascript functions\r\n\r\nI would normally show how to do this in ```JS.eval()```, but, since we are already overriding functions to pull all of this off, we might as well just use the desktop player to our advantage and include a Javascript file.\r\n\r\n```<javascript src=\"javascript.js\" />```\r\n\r\n\r\n**javascript.js**\r\n```\r\n// I am using a setTimeout so the text will actually print online.\r\n// I am adding additional setTimout so the web player scrolls to the end after if finally decides to print the message.\r\n\r\nfunction testOne(){\r\n\tsetTimeout(function(){\r\n\t\tASLEvent('CallMeWithASL','The turn scripts fired twice!');\r\n\t\tif (webPlayer){\r\n\t\t  setTimeout(function(){\r\n\t\t    scrollToEnd();\r\n\t\t  },500);\r\n\t\t}\r\n\t},1);\r\n};\r\n\r\nfunction testTwo(){\r\n\tsetTimeout(function(){\r\n\t\tASLEvent('CallMeWithASL','This did not cause the turn scripts to fire an extra time.  The turn scripts only fired once, as expected.');\r\n\t\tif (webPlayer){\r\n\t\t  setTimeout(function(){\r\n\t\t    scrollToEnd();\r\n\t\t  },500);\r\n\t\t}\r\n\t},1);\r\n};\r\n\r\nfunction testThree(){\r\n\tsetTimeout(function(){\r\n\t    ASLEvent('CallMeWithASL','This did not cause the turn scripts to fire an extra time, and the turn count stayed the same.');\r\n\t    if (webPlayer){\r\n\t\t  setTimeout(function(){\r\n\t\t    scrollToEnd();\r\n\t\t  },500);\r\n\t\t}\r\n\t},1);\r\n};\r\n```\r\n\r\n---\r\n# The Example Game\r\n\r\nIt's very boring and dumb, but it's working correctly.\r\n\r\nhttp://textadventures.co.uk/games/view/wojva_z2wu2hh5r8kiernq/suppressing-the-turn-scripts\r\n\r\nThe Code:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Suppressing the Turn Scripts\">\r\n    <gameid>65c36394-fcd4-4abf-89a5-4d0659cb4ef7</gameid>\r\n    <version>0.5</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <turns type=\"int\">0</turns>\r\n    <statusattributes type=\"stringdictionary\">\r\n      <item>\r\n        <key>turns</key>\r\n        <value>Turns: !</value>\r\n      </item>\r\n    </statusattributes>\r\n    <description><![CDATA[A test game.<br/><br/>Enter HINT:  no turn scripts, and no turn count<br/><br/>Enter TEST ONE: turn scripts fire twice in one turn, and the turn count increases by 2<br/><br/>Enter TEST TWO:  turns scripts fire once, and the turn count increases by 1<br/><br/>Enter TEST THREE: no turn scripts, and no turn count]]></description>\r\n    <author>KV</author>\r\n  </game>\r\n  <turnscript name=\"test_turnscript\">\r\n    <enabled />\r\n    <script><![CDATA[\r\n      msg (\"<b><center><br/>I AM THE TEST TURNSCRIPT!<br/></center></b>\")\r\n    ]]></script>\r\n  </turnscript>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <description><![CDATA[<br/>Enter (or click):<br/> {command:TEST ONE},  {command:TEST TWO}, or  {command:TEST THREE}]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"hint\">\r\n    <pattern>hint;hints</pattern>\r\n    <script>\r\n      game.suppressturnscripts = true\r\n      game.notarealturn = true\r\n      msg (\"This story has no hints.\")\r\n    </script>\r\n  </command>\r\n  <command name=\"testone\">\r\n    <pattern>test one</pattern>\r\n    <script>\r\n      JS.testOne ()\r\n    </script>\r\n  </command>\r\n  <command name=\"testtwo\">\r\n    <pattern>test two</pattern>\r\n    <script>\r\n      game.suppressturnscripts = true\r\n      JS.testTwo ()\r\n    </script>\r\n  </command>\r\n  <command name=\"testthree\">\r\n    <pattern>test three</pattern>\r\n    <script>\r\n      game.notarealturn = true\r\n      game.suppressturnscripts = true\r\n      JS.testThree ()\r\n    </script>\r\n  </command>\r\n  <function name=\"HandleSingleCommand\" parameters=\"command\"><![CDATA[\r\n    if (LCase(command) = \"again\" or LCase(command) = \"g\") {\r\n      // First handle AGAIN\r\n      if (not game.pov.currentcommand = null) {\r\n        HandleSingleCommand (game.pov.currentcommand)\r\n      }\r\n      else {\r\n        msg (\"There is nothing to repeat.\")\r\n      }\r\n    }\r\n    else {\r\n      // Check through all commands for any that match\r\n      candidates = NewObjectList()\r\n      foreach (cmd, ScopeCommands()) {\r\n        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\r\n          list add (candidates, cmd)\r\n        }\r\n      }\r\n      maxstrength = -1\r\n      thiscommand = null\r\n      // Pick the best match\r\n      foreach (candidate, candidates) {\r\n        strength = GetMatchStrength(candidate.pattern, command, candidate.name)\r\n        // favour commands defined later, so an author can override a library command...\r\n        if (strength >= maxstrength) {\r\n          // ... except if the command defined later (candidate) has no parent, and the current best\r\n          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms\r\n          // over global candidates.\r\n          skip = false\r\n          if (thiscommand <> null) {\r\n            if (thiscommand.parent <> null and candidate.parent = null) {\r\n              skip = true\r\n            }\r\n          }\r\n          if (not skip) {\r\n            thiscommand = candidate\r\n            maxstrength = strength\r\n          }\r\n        }\r\n      }\r\n      if (thiscommand = null) {\r\n        if (HasScript(game, \"unresolvedcommandhandler\")) {\r\n          params = NewDictionary()\r\n          dictionary add (params, \"command\", command)\r\n          do (game, \"unresolvedcommandhandler\", params)\r\n        }\r\n        else {\r\n          msg (Template(\"UnrecognisedCommand\"))\r\n        }\r\n        HandleNextCommandQueueItem\r\n      }\r\n      else {\r\n        varlist = Populate(thiscommand.pattern, command, thiscommand.name)\r\n        HandleSingleCommandPattern (command, thiscommand, varlist)\r\n      }\r\n    }\r\n    TurnCount\r\n  ]]></function>\r\n  <function name=\"TurnCount\">\r\n    if (not GetBoolean(game, \"notarealturn\")) {\r\n      IncreaseObjectCounter (game, \"turns\")\r\n    }\r\n    game.notarealturn = false\r\n  </function>\r\n  <function name=\"FinishTurn\">\r\n    if (not GetBoolean(game, \"suppressturnscripts\")) {\r\n      RunTurnScripts\r\n    }\r\n    game.suppressturnscripts = false\r\n    UpdateStatusAttributes\r\n    CheckDarkness\r\n    UpdateObjectLinks\r\n  </function>\r\n  <function name=\"CallMeWithASL\" parameters=\"data\">\r\n    msg (data)\r\n  </function>\r\n  <javascript src=\"javascript.js\" />\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\nNOTE:  I didn't use a turn script for the turn count because the ASLEvent caused it to increase no matter what I did.  In the end, I decided ```HandleSingleCommand``` was probably the best place to put it, anyway.",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest 5.8 will have a new attribute on the game object: <code>suppressturnscripts</code>, which is set to false by default.</p>\n<p>The <code>FinishTurn</code> function has been modified to check this value before calling <code>RunTurnScripts</code>:</p>\n<h2>UPDATE: DO NOT USE THIS IN QUEST 5.8!</h2>\n<pre><code>  &lt;function name=\"FinishTurn\"&gt;\n    if (not GetBoolean(game, \"suppressturnscripts\")) {\n      RunTurnScripts\n    }\n    game.suppressturnscripts = false\n    UpdateStatusAttributes\n    CheckDarkness\n    UpdateObjectLinks\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>If you are scripting something which will cause the turn scripts to fire an extra time (like a call to ASLEvent), you can add this to the script to suppress the turn scripts once:</p>\n<p><code>game.suppressturnscripts = true</code></p>\n<p>Note that this will not prevent the turn scripts from firing when using in conjunction with a call to <code>ASLEvent</code>.  It will prevent the turn scripts from firing TWICE in one turn.  This is because of the way <code>ASLEvent</code> calls are setup.  Initially, they were only used for sending commands when clicking on the buttons or the hyperlinks, so they are hard-coded to call <code>FinishTurn</code>.</p>\n<p>Also note that setting <strong>game.suppressturnscripts</strong> to true in a normal script (without a call to <code>ASLEvent</code> or <code>Handle*Command</code>, or something of that nature) will prevent the turn scripts from firing at all.</p>\n<hr>\n<p>Confused yet?</p>\n<p>Good!  Now, let's add a turn count to the mix!</p>\n<hr>\n<h1>FOR DESKTOP USERS ONLY!!!</h1>\n<p>Sorry, online users!  I will be overriding a Quest function in this code, and you can't do that.  If you can't use the desktop version of Quest, reading any more of this will be a waste of your time.  (This is only because of all of the crazy things I'm doing at once in this example game, mind you.  I will make myself a note to post a different example for those of you using the web editor.)</p>\n<hr>\n<h2>Suppressing Turn Scripts and Turn Counts</h2>\n<h3>An example game, piece by piece</h3>\n<hr>\n<h4>The game object</h4>\n<p>Here is the game object in full code view:</p>\n<pre><code>  &lt;game name=\"Suppressing the Turn Scripts\"&gt;\n    &lt;gameid&gt;65c36394-fcd4-4abf-89a5-4d0659cb4ef7&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;turns type=\"int\"&gt;0&lt;/turns&gt;\n    &lt;statusattributes type=\"stringdictionary\"&gt;\n      &lt;item&gt;\n        &lt;key&gt;turns&lt;/key&gt;\n        &lt;value&gt;Turns: !&lt;/value&gt;\n      &lt;/item&gt;\n    &lt;/statusattributes&gt;\n  &lt;/game&gt;\n</code></pre>\n<hr>\n<h4>The turns attributes (on the game object)</h4>\n<p>I have an integer attribute named \"turns\", which is initially set to 0.</p>\n<p><code>&lt;turns type=\"int\"&gt;0&lt;/turns&gt;</code></p>\n<p>I also have a <code>statusattributes</code> dictionary attribute set up on the game object:</p>\n<pre><code>    &lt;statusattributes type=\"stringdictionary\"&gt;\n      &lt;item&gt;\n        &lt;key&gt;turns&lt;/key&gt;\n        &lt;value&gt;Turns: !&lt;/value&gt;\n      &lt;/item&gt;\n    &lt;/statusattributes&gt;\n</code></pre>\n<hr>\n<h3>Turn Scripts, Commands, Quest Functions, Javascript Functions, and ASLEvents</h3>\n<h4>The turn count</h4>\n<p>I have to set up a function which is called by a modified <code>HandleSingleCommand</code> to make all of this work together correctly:</p>\n<pre><code>  &lt;function name=\"TurnCount\"&gt;\n    if (not GetBoolean(game, \"notarealturn\")) {\n      IncreaseObjectCounter (game, \"turns\")\n    }\n    game.notarealturn = false\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<h4>Modifying <code>HandleSingleCommand</code></h4>\n<p>I simply add the line <code>TurnCount</code> to the very end of the <code>HandleSingleCommand</code> function's script.</p>\n<p>If you'd like to see the entire function in code view, click here:</p>\n<details>\n<pre><code>  &lt;function name=\"HandleSingleCommand\" parameters=\"command\"&gt;&lt;![CDATA[\n    if (LCase(command) = \"again\" or LCase(command) = \"g\") {\n      // First handle AGAIN\n      if (not game.pov.currentcommand = null) {\n        HandleSingleCommand (game.pov.currentcommand)\n      }\n      else {\n        msg (\"There is nothing to repeat.\")\n      }\n    }\n    else {\n      // Check through all commands for any that match\n      candidates = NewObjectList()\n      foreach (cmd, ScopeCommands()) {\n        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\n          list add (candidates, cmd)\n        }\n      }\n      maxstrength = -1\n      thiscommand = null\n      // Pick the best match\n      foreach (candidate, candidates) {\n        strength = GetMatchStrength(candidate.pattern, command, candidate.name)\n        // favour commands defined later, so an author can override a library command...\n        if (strength &gt;= maxstrength) {\n          // ... except if the command defined later (candidate) has no parent, and the current best\n          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms\n          // over global candidates.\n          skip = false\n          if (thiscommand &lt;&gt; null) {\n            if (thiscommand.parent &lt;&gt; null and candidate.parent = null) {\n              skip = true\n            }\n          }\n          if (not skip) {\n            thiscommand = candidate\n            maxstrength = strength\n          }\n        }\n      }\n      if (thiscommand = null) {\n        if (HasScript(game, \"unresolvedcommandhandler\")) {\n          params = NewDictionary()\n          dictionary add (params, \"command\", command)\n          do (game, \"unresolvedcommandhandler\", params)\n        }\n        else {\n          msg (Template(\"UnrecognisedCommand\"))\n        }\n        HandleNextCommandQueueItem\n      }\n      else {\n        varlist = Populate(thiscommand.pattern, command, thiscommand.name)\n        HandleSingleCommandPattern (command, thiscommand, varlist)\n      }\n    }\n    TurnCount\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n</details>\n<hr>\n<p>If I wish to suppress the turn count during out of world commands (such as HELP, HINT, etc.), I add this line to the command's script:</p>\n<p><code>game.notarealturn = true</code></p>\n<p>My <code>TurnCount</code> function will automatically set <strong>game.notarealturn</strong> back to false when called, so the turn count will be increased (as it normally would) on the next turn (unless I suppress the turn count again).</p>\n<hr>\n<h4>Suppressing turns scripts while suppressing the turn count</h4>\n<p>Now I can suppress the turn scripts and the turn count, even while calling an ASLEvent.</p>\n<p>I have four test commands to play with:</p>\n<pre><code>  &lt;command name=\"hint\"&gt;\n    &lt;pattern&gt;hint;hints&lt;/pattern&gt;\n    &lt;script&gt;\n      game.suppressturnscripts = true\n      game.notarealturn = true\n      msg (\"This story has no hints.\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n<hr>\n<pre><code>  &lt;command name=\"testone\"&gt;\n    &lt;pattern&gt;test one&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.testOne ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n<pre><code>  &lt;command name=\"testtwo\"&gt;\n    &lt;pattern&gt;test two&lt;/pattern&gt;\n    &lt;script&gt;\n      game.suppressturnscripts = true\n      JS.testTwo ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n<pre><code>  &lt;command name=\"testthree\"&gt;\n    &lt;pattern&gt;test three&lt;/pattern&gt;\n    &lt;script&gt;\n      game.notarealturn = true\n      game.suppressturnscripts = true\n      JS.testThree ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n<hr>\n<p>Note that the HINT command doesn't require anything extra, but each of the TEST commands are calling a JS function, each of which call an <code>ASLEvent</code> , which each call a Quest function:</p>\n<pre><code>  &lt;function name=\"CallMeWithASL\" parameters=\"data\"&gt;\n    msg (data)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<h4>Javascript functions</h4>\n<p>I would normally show how to do this in <code>JS.eval()</code>, but, since we are already overriding functions to pull all of this off, we might as well just use the desktop player to our advantage and include a Javascript file.</p>\n<p><code>&lt;javascript src=\"javascript.js\" /&gt;</code></p>\n<p><strong>javascript.js</strong></p>\n<pre><code>// I am using a setTimeout so the text will actually print online.\n// I am adding additional setTimout so the web player scrolls to the end after if finally decides to print the message.\n\nfunction testOne(){\n\tsetTimeout(function(){\n\t\tASLEvent('CallMeWithASL','The turn scripts fired twice!');\n\t\tif (webPlayer){\n\t\t  setTimeout(function(){\n\t\t    scrollToEnd();\n\t\t  },500);\n\t\t}\n\t},1);\n};\n\nfunction testTwo(){\n\tsetTimeout(function(){\n\t\tASLEvent('CallMeWithASL','This did not cause the turn scripts to fire an extra time.  The turn scripts only fired once, as expected.');\n\t\tif (webPlayer){\n\t\t  setTimeout(function(){\n\t\t    scrollToEnd();\n\t\t  },500);\n\t\t}\n\t},1);\n};\n\nfunction testThree(){\n\tsetTimeout(function(){\n\t    ASLEvent('CallMeWithASL','This did not cause the turn scripts to fire an extra time, and the turn count stayed the same.');\n\t    if (webPlayer){\n\t\t  setTimeout(function(){\n\t\t    scrollToEnd();\n\t\t  },500);\n\t\t}\n\t},1);\n};\n</code></pre>\n<hr>\n<h1>The Example Game</h1>\n<p>It's very boring and dumb, but it's working correctly.</p>\n<p>http://textadventures.co.uk/games/view/wojva_z2wu2hh5r8kiernq/suppressing-the-turn-scripts</p>\n<p>The Code:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Suppressing the Turn Scripts\"&gt;\n    &lt;gameid&gt;65c36394-fcd4-4abf-89a5-4d0659cb4ef7&lt;/gameid&gt;\n    &lt;version&gt;0.5&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;turns type=\"int\"&gt;0&lt;/turns&gt;\n    &lt;statusattributes type=\"stringdictionary\"&gt;\n      &lt;item&gt;\n        &lt;key&gt;turns&lt;/key&gt;\n        &lt;value&gt;Turns: !&lt;/value&gt;\n      &lt;/item&gt;\n    &lt;/statusattributes&gt;\n    &lt;description&gt;&lt;![CDATA[A test game.&lt;br/&gt;&lt;br/&gt;Enter HINT:  no turn scripts, and no turn count&lt;br/&gt;&lt;br/&gt;Enter TEST ONE: turn scripts fire twice in one turn, and the turn count increases by 2&lt;br/&gt;&lt;br/&gt;Enter TEST TWO:  turns scripts fire once, and the turn count increases by 1&lt;br/&gt;&lt;br/&gt;Enter TEST THREE: no turn scripts, and no turn count]]&gt;&lt;/description&gt;\n    &lt;author&gt;KV&lt;/author&gt;\n  &lt;/game&gt;\n  &lt;turnscript name=\"test_turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;&lt;![CDATA[\n      msg (\"&lt;b&gt;&lt;center&gt;&lt;br/&gt;I AM THE TEST TURNSCRIPT!&lt;br/&gt;&lt;/center&gt;&lt;/b&gt;\")\n    ]]&gt;&lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;br/&gt;Enter (or click):&lt;br/&gt; {command:TEST ONE},  {command:TEST TWO}, or  {command:TEST THREE}]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"hint\"&gt;\n    &lt;pattern&gt;hint;hints&lt;/pattern&gt;\n    &lt;script&gt;\n      game.suppressturnscripts = true\n      game.notarealturn = true\n      msg (\"This story has no hints.\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"testone\"&gt;\n    &lt;pattern&gt;test one&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.testOne ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"testtwo\"&gt;\n    &lt;pattern&gt;test two&lt;/pattern&gt;\n    &lt;script&gt;\n      game.suppressturnscripts = true\n      JS.testTwo ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"testthree\"&gt;\n    &lt;pattern&gt;test three&lt;/pattern&gt;\n    &lt;script&gt;\n      game.notarealturn = true\n      game.suppressturnscripts = true\n      JS.testThree ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"HandleSingleCommand\" parameters=\"command\"&gt;&lt;![CDATA[\n    if (LCase(command) = \"again\" or LCase(command) = \"g\") {\n      // First handle AGAIN\n      if (not game.pov.currentcommand = null) {\n        HandleSingleCommand (game.pov.currentcommand)\n      }\n      else {\n        msg (\"There is nothing to repeat.\")\n      }\n    }\n    else {\n      // Check through all commands for any that match\n      candidates = NewObjectList()\n      foreach (cmd, ScopeCommands()) {\n        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\n          list add (candidates, cmd)\n        }\n      }\n      maxstrength = -1\n      thiscommand = null\n      // Pick the best match\n      foreach (candidate, candidates) {\n        strength = GetMatchStrength(candidate.pattern, command, candidate.name)\n        // favour commands defined later, so an author can override a library command...\n        if (strength &gt;= maxstrength) {\n          // ... except if the command defined later (candidate) has no parent, and the current best\n          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms\n          // over global candidates.\n          skip = false\n          if (thiscommand &lt;&gt; null) {\n            if (thiscommand.parent &lt;&gt; null and candidate.parent = null) {\n              skip = true\n            }\n          }\n          if (not skip) {\n            thiscommand = candidate\n            maxstrength = strength\n          }\n        }\n      }\n      if (thiscommand = null) {\n        if (HasScript(game, \"unresolvedcommandhandler\")) {\n          params = NewDictionary()\n          dictionary add (params, \"command\", command)\n          do (game, \"unresolvedcommandhandler\", params)\n        }\n        else {\n          msg (Template(\"UnrecognisedCommand\"))\n        }\n        HandleNextCommandQueueItem\n      }\n      else {\n        varlist = Populate(thiscommand.pattern, command, thiscommand.name)\n        HandleSingleCommandPattern (command, thiscommand, varlist)\n      }\n    }\n    TurnCount\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"TurnCount\"&gt;\n    if (not GetBoolean(game, \"notarealturn\")) {\n      IncreaseObjectCounter (game, \"turns\")\n    }\n    game.notarealturn = false\n  &lt;/function&gt;\n  &lt;function name=\"FinishTurn\"&gt;\n    if (not GetBoolean(game, \"suppressturnscripts\")) {\n      RunTurnScripts\n    }\n    game.suppressturnscripts = false\n    UpdateStatusAttributes\n    CheckDarkness\n    UpdateObjectLinks\n  &lt;/function&gt;\n  &lt;function name=\"CallMeWithASL\" parameters=\"data\"&gt;\n    msg (data)\n  &lt;/function&gt;\n  &lt;javascript src=\"javascript.js\" /&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>NOTE:  I didn't use a turn script for the turn count because the ASLEvent caused it to increase no matter what I did.  In the end, I decided <code>HandleSingleCommand</code> was probably the best place to put it, anyway.</p>\n\n",
      "PostDate": "2018-05-16T22:15:24.6227401Z",
      "LastEditDate": "2018-06-04T01:17:48.1741105Z",
      "link": null
    },
    {
      "PostId": "2c58a5ec-0c35-4932-98c0-f4f62bfffd24",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "These commands should suppress turn scripts:\r\n\r\noops\r\n\r\nhelp\r\n\r\nsave\r\n\r\nversion\r\n\r\nlog\r\n\r\nall transcript commands",
      "EditableFormat": "markdown",
      "HTML": "<p>These commands should suppress turn scripts:</p>\n<p>oops</p>\n<p>help</p>\n<p>save</p>\n<p>version</p>\n<p>log</p>\n<p>all transcript commands</p>\n\n",
      "PostDate": "2018-05-18T05:29:10.7131329Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
