{
  "Topic": {
    "TopicId": "5058",
    "ForumId": "18",
    "Title": "How to use functions",
    "LastUpdated": "2015-02-19T07:55:26+00:00",
    "ReplyCount": 1
  },
  "Posts": [
    {
      "PostId": "34827",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Quest has a whole load of functions built in, many of them will be used in your game without you even knowing about it. You can see a full list here:\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m -->\n\nQuest also &quot;script commands&quot;, which in many ways are like functions. One difference is that script commands are all named in lower case, while functions are all in CamelCase.\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m -->\n\n\n[b:afklxs6e][i:afklxs6e]Using Functions and Script Commands[/i:afklxs6e][/b:afklxs6e]\n\nSome functions return a value, some require one or more values. The values it requires are called parameters. For example, the GetBoolean function requires an object and the name of an attribute, and it returns true if that attribute is present and set to true, and false if the attribute is set to false or missing.\n\nIn this example, my_object and &quot;flag&quot; are the two parameters, and they go inside brackets. The brackets tell Quest these are the parameters.\n[code:afklxs6e]return_value = GetBoolean(my_object, &quot;flag&quot;)[/code:afklxs6e]\nSome functions take parameters, but do not return a value:\n[code:afklxs6e]LockExit(vault_exit)[/code:afklxs6e]\nSometimes a function has no return value and no parameters:\n[code:afklxs6e]ClearScreen()[/code:afklxs6e]\nYou might wonder why you need the brackets, if there are no parameters. Actually, you do not. \n[code:afklxs6e]ClearScreen[/code:afklxs6e]\nWell, not always. If the function is on a line on its own with nothing else, Quest will handle it fine. Otherwise, you may need the brackets to ensure Quest will realise this is a function and not something else.\n\n\n[b:afklxs6e][i:afklxs6e]The Type Signature and Error Messages[/i:afklxs6e][/b:afklxs6e]\n\nThe type of the value a function returns and the parameters it needs is called its &quot;type signature&quot;, and Quest will complain if you get is wrong. Here are some examples when the number of parameters are wrong, so you know what to expect. GetBoolean is a fundamental function, so gives different errors to most of the rest; it expects specific types or values for its parameters:\n[code:afklxs6e]return_value = GetBoolean(my_object, &quot;flag&quot;, 4)\nError running script&#058; Error compiling expression 'GetBoolean(my_object, &quot;flag&quot;, 4)'&#58; FunctionCallElement&#58; Could find not function 'GetBoolean(Element, String, Int32)'\n\nreturn_value = GetBoolean(my_object)\nError running script&#058; Error compiling expression 'GetBoolean(my_object)'&#58; FunctionCallElement&#58; Could find not function 'GetBoolean(Element)'[/code:afklxs6e]\nMost functions will give errors like this, which just checks the number of parameters:\n[code:afklxs6e]ClearScreen(4)\nError running script&#058; Too many parameters passed to ClearScreen function - 1 passed, but only 0 expected[/code:afklxs6e]\nIf the function returns a value and you do not do anything with that value, it will complain:\n[code:afklxs6e]GetBoolean(my_object, &quot;flag&quot;)\nError&#58; Error adding script attribute 'start' to element 'game'&#58; Function not found&#58; 'GetBoolean'[/code:afklxs6e]\nOr if it does not return a value, and you still try to use it:\n[code:afklxs6e]b = ClearScreen\nError running script&#058; Error compiling expression 'ClearScreen'&#58; Unknown object or variable 'ClearScreen'[/code:afklxs6e]\n\n\n[b:afklxs6e][i:afklxs6e]Custom Functions[/i:afklxs6e][/b:afklxs6e]\n\nThe power of Quest is that it lets you do so much. It has dozens of built in functions, but you can easily create your own.\n\nSo why would you want to use a function? The basic reason is because you want to do the same thing is two or more different places. As an example, let us say you have a room with a bench and another room with a chair, and you want the player to be able to type SIT, SIT ON BENCH and SIT ON CHAIR. One way would be to have a function that takes the seat as a parameter. You can set up a SIT command in each room that sends it the right seat depending on the room, and you can create SIT ON verbs for the chair and the bench that use the Sit function.\n\nSo how do we create a command? Right-click in the left pane, and select &quot;Add function&quot;. Your new function will appear. Set the return type. in this case the function will not return anything, so we can leave it as &quot;None&quot;. Then you can add the parameters.\n\nYou can use any names you like here; there is no need for them to correspond to the names in the commands or verbs. In this case there is only one parameter, and I am going to call it &quot;seat&quot;.\n\nThen put in your script. In this example, all it does is print a message. Whatever values are sent as parameters will automatically go into the variables in the same order. In this function we are expecting to be sent some kind of seat, and whatever it is will be held in the &quot;seat&quot; variable. If this function is called by the &quot;siton&quot; verb of the bench, then the &quot;seat&quot; variable will contain the bench object.\n\n[attachment=1:afklxs6e]<!-- ia1 -->func1.png<!-- ia1 -->[/attachment:afklxs6e]\n\n\n[b:afklxs6e][i:afklxs6e]Assumptions and Unexpected Values[/i:afklxs6e][/b:afklxs6e]\n\nYou need to think about what will happen if the function is sent the wrong sort of variable. Or more specifically, what assumptions are you making about the values the function receives?\n\nIn the example we are expecting an object, we are expecting it to be something that can be sat on and we are expecting it to be there. You might assume it has a certain attribute, such as &quot;alias&quot; (I used the GetDisplayAlias function to avoid that assumption). It is important to think carefully about those assumptions - and I would recommend putting a comment in your code so they are explicitly stated. Just because we called it seat is no guarantee it really is a seat.\n\nIf we cannot be sure, then it may be a good idea to test what the thing is before doing anything else; otherwise you can end up with some obscure bugs. In this case, the assumptions are fair. There are four places the function is called, and in each case we can be sure the assumptions are sound. No need to do [i:afklxs6e]unnecessary [/i:afklxs6e]testing.\n\n\n[b:afklxs6e][i:afklxs6e]Overriding Functions[/i:afklxs6e][/b:afklxs6e]\n\nDid I mention that the power of Quest is that it lets you do so much? Not only can you create your own functions, you can replace the existing ones (though not the script commands or some of the more fundamental functions). In the off-line editor anyway.\n\nLet us suppose you want you want room descriptions to have some novel formatting (perhaps the letter 'A' in blue, to pick a common example). Click on &quot;Filter&quot; at the bottom left of the screen, and select &quot;Show Library Elements&quot;. In the left pane you will see all the built in functions, commands and so in, all in grey. Find the one you want, in this case ShowRoomDescription (atthe top of the pane is a filtering function, which makes the search easier). The function will appear in the right pane. You can click the &quot;Copy&quot; button at top left to get the function copied into your game, and then edit it as you see fit.\n\nJust do not change the name, return type or parameters.\n\nOf course, you can really mess Quest up by overriding functions, so some care is required...\n\n[attachment=0:afklxs6e]<!-- ia0 -->count.aslx<!-- ia0 -->[/attachment:afklxs6e]",
      "EditableFormat": "bbcode",
      "HTML": "Quest has a whole load of functions built in, many of them will be used in your game without you even knowing about it. You can see a full list here:<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m --><br/><br/>Quest also &quot;script commands&quot;, which in many ways are like functions. One difference is that script commands are all named in lower case, while functions are all in CamelCase.<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m --><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Using Functions and Script Commands</span></span><br/><br/>Some functions return a value, some require one or more values. The values it requires are called parameters. For example, the GetBoolean function requires an object and the name of an attribute, and it returns true if that attribute is present and set to true, and false if the attribute is set to false or missing.<br/><br/>In this example, my_object and &quot;flag&quot; are the two parameters, and they go inside brackets. The brackets tell Quest these are the parameters.<br/><pre><code>return_value = GetBoolean(my_object, &quot;flag&quot;)</code></pre><br/>Some functions take parameters, but do not return a value:<br/><pre><code>LockExit(vault_exit)</code></pre><br/>Sometimes a function has no return value and no parameters:<br/><pre><code>ClearScreen()</code></pre><br/>You might wonder why you need the brackets, if there are no parameters. Actually, you do not. <br/><pre><code>ClearScreen</code></pre><br/>Well, not always. If the function is on a line on its own with nothing else, Quest will handle it fine. Otherwise, you may need the brackets to ensure Quest will realise this is a function and not something else.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">The Type Signature and Error Messages</span></span><br/><br/>The type of the value a function returns and the parameters it needs is called its &quot;type signature&quot;, and Quest will complain if you get is wrong. Here are some examples when the number of parameters are wrong, so you know what to expect. GetBoolean is a fundamental function, so gives different errors to most of the rest; it expects specific types or values for its parameters:<br/><pre><code>return_value = GetBoolean(my_object, &quot;flag&quot;, 4)<br/>Error running script&#058; Error compiling expression 'GetBoolean(my_object, &quot;flag&quot;, 4)'&#58; FunctionCallElement&#58; Could find not function 'GetBoolean(Element, String, Int32)'<br/><br/>return_value = GetBoolean(my_object)<br/>Error running script&#058; Error compiling expression 'GetBoolean(my_object)'&#58; FunctionCallElement&#58; Could find not function 'GetBoolean(Element)'</code></pre><br/>Most functions will give errors like this, which just checks the number of parameters:<br/><pre><code>ClearScreen(4)<br/>Error running script&#058; Too many parameters passed to ClearScreen function - 1 passed, but only 0 expected</code></pre><br/>If the function returns a value and you do not do anything with that value, it will complain:<br/><pre><code>GetBoolean(my_object, &quot;flag&quot;)<br/>Error&#58; Error adding script attribute 'start' to element 'game'&#58; Function not found&#58; 'GetBoolean'</code></pre><br/>Or if it does not return a value, and you still try to use it:<br/><pre><code>b = ClearScreen<br/>Error running script&#058; Error compiling expression 'ClearScreen'&#58; Unknown object or variable 'ClearScreen'</code></pre><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Custom Functions</span></span><br/><br/>The power of Quest is that it lets you do so much. It has dozens of built in functions, but you can easily create your own.<br/><br/>So why would you want to use a function? The basic reason is because you want to do the same thing is two or more different places. As an example, let us say you have a room with a bench and another room with a chair, and you want the player to be able to type SIT, SIT ON BENCH and SIT ON CHAIR. One way would be to have a function that takes the seat as a parameter. You can set up a SIT command in each room that sends it the right seat depending on the room, and you can create SIT ON verbs for the chair and the bench that use the Sit function.<br/><br/>So how do we create a command? Right-click in the left pane, and select &quot;Add function&quot;. Your new function will appear. Set the return type. in this case the function will not return anything, so we can leave it as &quot;None&quot;. Then you can add the parameters.<br/><br/>You can use any names you like here; there is no need for them to correspond to the names in the commands or verbs. In this case there is only one parameter, and I am going to call it &quot;seat&quot;.<br/><br/>Then put in your script. In this example, all it does is print a message. Whatever values are sent as parameters will automatically go into the variables in the same order. In this function we are expecting to be sent some kind of seat, and whatever it is will be held in the &quot;seat&quot; variable. If this function is called by the &quot;siton&quot; verb of the bench, then the &quot;seat&quot; variable will contain the bench object.<br/><br/><div><img src=\"/forumattachments/1162/func1.png\" alt=\"func1.png\" /></div><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Assumptions and Unexpected Values</span></span><br/><br/>You need to think about what will happen if the function is sent the wrong sort of variable. Or more specifically, what assumptions are you making about the values the function receives?<br/><br/>In the example we are expecting an object, we are expecting it to be something that can be sat on and we are expecting it to be there. You might assume it has a certain attribute, such as &quot;alias&quot; (I used the GetDisplayAlias function to avoid that assumption). It is important to think carefully about those assumptions - and I would recommend putting a comment in your code so they are explicitly stated. Just because we called it seat is no guarantee it really is a seat.<br/><br/>If we cannot be sure, then it may be a good idea to test what the thing is before doing anything else; otherwise you can end up with some obscure bugs. In this case, the assumptions are fair. There are four places the function is called, and in each case we can be sure the assumptions are sound. No need to do <span style=\"font-style:italic;\">unnecessary </span>testing.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Overriding Functions</span></span><br/><br/>Did I mention that the power of Quest is that it lets you do so much? Not only can you create your own functions, you can replace the existing ones (though not the script commands or some of the more fundamental functions). In the off-line editor anyway.<br/><br/>Let us suppose you want you want room descriptions to have some novel formatting (perhaps the letter 'A' in blue, to pick a common example). Click on &quot;Filter&quot; at the bottom left of the screen, and select &quot;Show Library Elements&quot;. In the left pane you will see all the built in functions, commands and so in, all in grey. Find the one you want, in this case ShowRoomDescription (atthe top of the pane is a filtering function, which makes the search easier). The function will appear in the right pane. You can click the &quot;Copy&quot; button at top left to get the function copied into your game, and then edit it as you see fit.<br/><br/>Just do not change the name, return type or parameters.<br/><br/>Of course, you can really mess Quest up by overriding functions, so some care is required...<br/><br/><div><a href=\"/forumattachments/1163/count.aslx\">count.aslx</a></div>",
      "PostDate": "2015-02-18T13:46:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34834",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Thanks again Pixie for more posted help, I've learned a lot from all of your posts~guides, including this one (along with some more coding terminolgy of labeling conventions~systems, CamelCase, hehe. I just didn't know this is what it is called, but knew about the structure, of course obviously, and a bit deeper understanding of coding, too).",
      "EditableFormat": "bbcode",
      "HTML": "Thanks again Pixie for more posted help, I've learned a lot from all of your posts~guides, including this one (along with some more coding terminolgy of labeling conventions~systems, CamelCase, hehe. I just didn't know this is what it is called, but knew about the structure, of course obviously, and a bit deeper understanding of coding, too).",
      "PostDate": "2015-02-19T07:55:26+00:00",
      "LastEditDate": null
    }
  ]
}