{
  "Topic": {
    "TopicId": "3shsiaguzuw7n9vfhd5uaw",
    "ForumId": "18",
    "Title": "An alternative to compass directions",
    "LastUpdated": "2018-06-22T11:02:59.8065604Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "362fac30-501a-4443-9ed3-41171cbeeb3e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Virtually all parser games use the compass directions to allow the player to navigate the map. It is a good system, but perhaps it lacks some realism; what if the player has no compass, how would she know which way is north? And if the action takes place in a big city, you might want to give the option for the player to get directly to the bank, without having to map every intersection on the way.\r\n\r\nAn alternative approach is to give the player a list of destinations. You can do that in Quest (desktop version anyway!) just by giving an exit a new alias. The place will then appear in the list of objects.\r\n\r\nWhat I present here, however, is an alternative approach. This puts all the destinations in their own pane. Furthermore, rather than using a new alias on the exit, it uses the name of the destination room. This means you can paste these into your existing game, and it will just work.\r\n\r\nYou really need to paste these chunks of code into your game in full code view, and I would very much recommend backing up your game before doing anything in full code view - it has the potential to get you game in a state Quest cannot load.\r\n\r\nThe first chunk of code needs to be inserted just before this line:\r\n\r\n```\r\n  </game>\r\n```\r\n\r\nYou should find that about a dozen lines from the top. The code below needs to go just above it:\r\n\r\n```\r\n    <turnoffcompass />\r\n    <gotoplaceshtml><![CDATA[\r\n            <h3 id=\"gotoPlacesLabel\" class=\"ui-accordion-header ui-helper-reset ui-state-active ui-corner-top\" style=\"\"><span class=\"ui-icon ui-icon-triangle-1-s\"></span><span class=\"accordion-header-text\">Go to places</span></h3>\r\n            <div id=\"gotoPlacesAccordion\" class=\"ui-accordion-content-active ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\" style=\"\">\r\n                <div id=\"gotoPlacesWrapper\" class=\"elementListWrapper\">\r\n                    <ol id=\"lstGotoPlaces\" class=\"elementList ui-selectable\" size=\"3\"></ol>\r\n                </div>\r\n                <div id=\"gotoPlacesButtons\" class=\"verbButtons\">\r\n                    <button id=\"cmdGotoPlaces1\" type=\"button\" onclick=\"ButtonClickGoto();\" style=\"display: none;\" class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\"><span class=\"ui-button-text\">Go to</span></button>\r\n                </div>\r\n            </div>\r\n            <script>\r\n              function SelectGoto(item) {\r\n                $('#lstGotoPlaces').children().removeClass('ui-selected');\r\n                $('#' + item.id).addClass('ui-selected');\r\n                $('#cmdGotoPlaces1').show();\r\n              }\r\n              function ButtonClickGoto() {\r\n                el = $('#lstGotoPlaces').children('.ui-selected')[0];\r\n                ASLEvent(\"GotoPlace\", el.innerHTML);\r\n              }\r\n              function ClearGotoLinks() {\r\n                links = $('[data-elementid=\"go\"]');\r\n                links.contents().unwrap();\r\n              }\r\n            </script>\r\n                                                                ]]></gotoplaceshtml>\r\n    <inituserinterface type=\"script\">\r\n      JS.addScript (game.gotoplaceshtml)\r\n      JS.eval (\"$('#gotoPlacesLabel').appendTo('#gamePanesRunning');\")\r\n      JS.eval (\"$('#gotoPlacesAccordion').appendTo('#gamePanesRunning');\")\r\n      if (not game.pov = null) {\r\n        UpdateGotoPlaces\r\n      }\r\n    </inituserinterface>\r\n    <start type=\"script\">\r\n      UpdateGotoPlaces\r\n    </start>\r\n```\r\n\r\nThe second chunk needs to go just before this line:\r\n\r\n```\r\n</asl>\r\n```\r\n\r\nYou will find that right at the very end. Paste the code before just above that line.\r\n\r\n```\r\n  <function name=\"FormatExitList\" parameters=\"preList, list, preFinal, postList\" type=\"string\"><![CDATA[\r\n    result = \"\"\r\n    listLength = ListCount(list)\r\n    if (listLength > 0) {\r\n      count = 0\r\n      result = \"You can go to \"\r\n      foreach (item, list) {\r\n        s = GetDestinationName(item, null)\r\n        if (game.enablehyperlinks) {\r\n          result = result + \"{command:go to \" + s + \":\" + s + \"}\"\r\n        }\r\n        else {\r\n          result = result + s\r\n        }\r\n        count = count + 1\r\n        if (count = listLength - 1) {\r\n          result = result + \" \" + preFinal + \" \"\r\n        }\r\n        else if (count < listLength) {\r\n          result = result + \", \"\r\n        }\r\n      }\r\n      result = result + postList\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"UpdateGotoPlaces\"><![CDATA[\r\n    s = \"\"\r\n    count = 0\r\n    player.destination_list = NewObjectList()\r\n    foreach (o, ScopeExits()) {\r\n      s = s + \"<li class=\\\"ui-selectee\\\" onclick=\\\"SelectGoto(this);\\\" id=\\\"goto\" + count + \"\\\">\" + GetDestinationName(o, game.pov.destination_list) + \"</li>\"\r\n      count = count + 1\r\n    }\r\n    JS.eval (\"$('#lstGotoPlaces').html('\" + s + \"');\")\r\n    JS.eval (\"$('#cmdGotoPlaces1').hide();\")\r\n  ]]></function>\r\n  <function name=\"GotoPlace\" parameters=\"name\">\r\n    exit = null\r\n    foreach (o, ScopeExits()) {\r\n      if (GetDestinationName(o, null) = name) {\r\n        exit = o\r\n      }\r\n    }\r\n    if (exit = null) {\r\n      error (\"Hmm, that failed. Should be going to \" + name + \" but cannot find an exit that way.\")\r\n    }\r\n    MovePlayer (if(HasAttribute(exit, \"destination\"), exit.destination, exit.to))\r\n  </function>\r\n  <function name=\"GetDestinationName\" parameters=\"exit, list\" type=\"string\">\r\n    // Has to return the display name for this exit, and add the destination to the list, if given\r\n    // Whatever goes in the list must be identifiable for the command\r\n    if (not list = null) {\r\n      list add (list, exit.to)\r\n    }\r\n    return (GetDisplayAlias(exit.to))\r\n  </function>\r\n  <function name=\"MovePlayer\" parameters=\"loc\">\r\n    JS.ClearGotoLinks ()\r\n    game.pov.parent = loc\r\n    UpdateGotoPlaces\r\n  </function>\r\n```\r\n\r\nHopefully when you go back to the normal GUI view, Quest will load you modified game. You should be able to go in-game, and it just works.\r\n\r\n### Code\r\n\r\nThere is some extra book-keeping that needs to be done when the player moves or when an exit is created, destroyed, made visible or made invisible in the current room.\r\n\r\nTo move the player, use the `MovePlayer` function, together with the destination. This is done automatically for normal movement, but you will need to do this yourself if there are any points where you have code to do it.\r\n\r\nIf the exits are changing (this does not apply to locking and unlocking), you need to call `UpdateGotoPlaces`, which will update the list in the pane on the right.\r\n\r\nYou may want to call `JS.ClearGotoLinks ()`, which will clear all the existing hyperlinks for going to other rooms. You would then need to print a new list of exits, with links (probably using `FormatExitList`). You will need to think about what works best for you; it may be reasonable to leave the links. If you do not use hyperlinks, you can ignore this issue altogether (but you still need `UpdateGotoPlaces`).\r\n\r\n\r\n### Style\r\n\r\nIf you have stylised your panes, you will want the new pane to match it. The way to do that is to modify the first chunk of code in full code view. In both the top two lines you will see this, towards the end:\r\n\r\n```\r\nstyle=\"\"\r\n```\r\n\r\nYou can insert your own style, in CSS, between the double quotes. Sorry, I could not find a more convenient way!\r\n\r\n\r\n### Redirecting\r\n\r\nOccasionally you might want one thing displayed, but the destination to be something else. Perhaps you want the player to see \"Outside\", but the player ends up in a location called \"High Street\". The way to handle this is to create a new room called \"Outside\", and have the exit point to that. But then give the exit a new attribute, \"destination\", set it to be an object, and point it to the \"High Street\" room. Now when the player selects outside, she will get taken to the High Street.\r\n\r\nYou can have any number of exits to the \"Outside\" room from different rooms, each re-directing the player to a different location.",
      "EditableFormat": "markdown",
      "HTML": "<p>Virtually all parser games use the compass directions to allow the player to navigate the map. It is a good system, but perhaps it lacks some realism; what if the player has no compass, how would she know which way is north? And if the action takes place in a big city, you might want to give the option for the player to get directly to the bank, without having to map every intersection on the way.</p>\n<p>An alternative approach is to give the player a list of destinations. You can do that in Quest (desktop version anyway!) just by giving an exit a new alias. The place will then appear in the list of objects.</p>\n<p>What I present here, however, is an alternative approach. This puts all the destinations in their own pane. Furthermore, rather than using a new alias on the exit, it uses the name of the destination room. This means you can paste these into your existing game, and it will just work.</p>\n<p>You really need to paste these chunks of code into your game in full code view, and I would very much recommend backing up your game before doing anything in full code view - it has the potential to get you game in a state Quest cannot load.</p>\n<p>The first chunk of code needs to be inserted just before this line:</p>\n<pre><code>  &lt;/game&gt;\n</code></pre>\n<p>You should find that about a dozen lines from the top. The code below needs to go just above it:</p>\n<pre><code>    &lt;turnoffcompass /&gt;\n    &lt;gotoplaceshtml&gt;&lt;![CDATA[\n            &lt;h3 id=\"gotoPlacesLabel\" class=\"ui-accordion-header ui-helper-reset ui-state-active ui-corner-top\" style=\"\"&gt;&lt;span class=\"ui-icon ui-icon-triangle-1-s\"&gt;&lt;/span&gt;&lt;span class=\"accordion-header-text\"&gt;Go to places&lt;/span&gt;&lt;/h3&gt;\n            &lt;div id=\"gotoPlacesAccordion\" class=\"ui-accordion-content-active ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\" style=\"\"&gt;\n                &lt;div id=\"gotoPlacesWrapper\" class=\"elementListWrapper\"&gt;\n                    &lt;ol id=\"lstGotoPlaces\" class=\"elementList ui-selectable\" size=\"3\"&gt;&lt;/ol&gt;\n                &lt;/div&gt;\n                &lt;div id=\"gotoPlacesButtons\" class=\"verbButtons\"&gt;\n                    &lt;button id=\"cmdGotoPlaces1\" type=\"button\" onclick=\"ButtonClickGoto();\" style=\"display: none;\" class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\"&gt;&lt;span class=\"ui-button-text\"&gt;Go to&lt;/span&gt;&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;script&gt;\n              function SelectGoto(item) {\n                $('#lstGotoPlaces').children().removeClass('ui-selected');\n                $('#' + item.id).addClass('ui-selected');\n                $('#cmdGotoPlaces1').show();\n              }\n              function ButtonClickGoto() {\n                el = $('#lstGotoPlaces').children('.ui-selected')[0];\n                ASLEvent(\"GotoPlace\", el.innerHTML);\n              }\n              function ClearGotoLinks() {\n                links = $('[data-elementid=\"go\"]');\n                links.contents().unwrap();\n              }\n            &lt;/script&gt;\n                                                                ]]&gt;&lt;/gotoplaceshtml&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n      JS.addScript (game.gotoplaceshtml)\n      JS.eval (\"$('#gotoPlacesLabel').appendTo('#gamePanesRunning');\")\n      JS.eval (\"$('#gotoPlacesAccordion').appendTo('#gamePanesRunning');\")\n      if (not game.pov = null) {\n        UpdateGotoPlaces\n      }\n    &lt;/inituserinterface&gt;\n    &lt;start type=\"script\"&gt;\n      UpdateGotoPlaces\n    &lt;/start&gt;\n</code></pre>\n<p>The second chunk needs to go just before this line:</p>\n<pre><code>&lt;/asl&gt;\n</code></pre>\n<p>You will find that right at the very end. Paste the code before just above that line.</p>\n<pre><code>  &lt;function name=\"FormatExitList\" parameters=\"preList, list, preFinal, postList\" type=\"string\"&gt;&lt;![CDATA[\n    result = \"\"\n    listLength = ListCount(list)\n    if (listLength &gt; 0) {\n      count = 0\n      result = \"You can go to \"\n      foreach (item, list) {\n        s = GetDestinationName(item, null)\n        if (game.enablehyperlinks) {\n          result = result + \"{command:go to \" + s + \":\" + s + \"}\"\n        }\n        else {\n          result = result + s\n        }\n        count = count + 1\n        if (count = listLength - 1) {\n          result = result + \" \" + preFinal + \" \"\n        }\n        else if (count &lt; listLength) {\n          result = result + \", \"\n        }\n      }\n      result = result + postList\n    }\n    return (result)\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"UpdateGotoPlaces\"&gt;&lt;![CDATA[\n    s = \"\"\n    count = 0\n    player.destination_list = NewObjectList()\n    foreach (o, ScopeExits()) {\n      s = s + \"&lt;li class=\\\"ui-selectee\\\" onclick=\\\"SelectGoto(this);\\\" id=\\\"goto\" + count + \"\\\"&gt;\" + GetDestinationName(o, game.pov.destination_list) + \"&lt;/li&gt;\"\n      count = count + 1\n    }\n    JS.eval (\"$('#lstGotoPlaces').html('\" + s + \"');\")\n    JS.eval (\"$('#cmdGotoPlaces1').hide();\")\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"GotoPlace\" parameters=\"name\"&gt;\n    exit = null\n    foreach (o, ScopeExits()) {\n      if (GetDestinationName(o, null) = name) {\n        exit = o\n      }\n    }\n    if (exit = null) {\n      error (\"Hmm, that failed. Should be going to \" + name + \" but cannot find an exit that way.\")\n    }\n    MovePlayer (if(HasAttribute(exit, \"destination\"), exit.destination, exit.to))\n  &lt;/function&gt;\n  &lt;function name=\"GetDestinationName\" parameters=\"exit, list\" type=\"string\"&gt;\n    // Has to return the display name for this exit, and add the destination to the list, if given\n    // Whatever goes in the list must be identifiable for the command\n    if (not list = null) {\n      list add (list, exit.to)\n    }\n    return (GetDisplayAlias(exit.to))\n  &lt;/function&gt;\n  &lt;function name=\"MovePlayer\" parameters=\"loc\"&gt;\n    JS.ClearGotoLinks ()\n    game.pov.parent = loc\n    UpdateGotoPlaces\n  &lt;/function&gt;\n</code></pre>\n<p>Hopefully when you go back to the normal GUI view, Quest will load you modified game. You should be able to go in-game, and it just works.</p>\n<h3>Code</h3>\n<p>There is some extra book-keeping that needs to be done when the player moves or when an exit is created, destroyed, made visible or made invisible in the current room.</p>\n<p>To move the player, use the <code>MovePlayer</code> function, together with the destination. This is done automatically for normal movement, but you will need to do this yourself if there are any points where you have code to do it.</p>\n<p>If the exits are changing (this does not apply to locking and unlocking), you need to call <code>UpdateGotoPlaces</code>, which will update the list in the pane on the right.</p>\n<p>You may want to call <code>JS.ClearGotoLinks ()</code>, which will clear all the existing hyperlinks for going to other rooms. You would then need to print a new list of exits, with links (probably using <code>FormatExitList</code>). You will need to think about what works best for you; it may be reasonable to leave the links. If you do not use hyperlinks, you can ignore this issue altogether (but you still need <code>UpdateGotoPlaces</code>).</p>\n<h3>Style</h3>\n<p>If you have stylised your panes, you will want the new pane to match it. The way to do that is to modify the first chunk of code in full code view. In both the top two lines you will see this, towards the end:</p>\n<pre><code>style=\"\"\n</code></pre>\n<p>You can insert your own style, in CSS, between the double quotes. Sorry, I could not find a more convenient way!</p>\n<h3>Redirecting</h3>\n<p>Occasionally you might want one thing displayed, but the destination to be something else. Perhaps you want the player to see \"Outside\", but the player ends up in a location called \"High Street\". The way to handle this is to create a new room called \"Outside\", and have the exit point to that. But then give the exit a new attribute, \"destination\", set it to be an object, and point it to the \"High Street\" room. Now when the player selects outside, she will get taken to the High Street.</p>\n<p>You can have any number of exits to the \"Outside\" room from different rooms, each re-directing the player to a different location.</p>\n\n",
      "PostDate": "2018-06-22T11:02:59.8065604Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f3a187ef-3374-4b73-9279-605eb06f8090",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How does your alternative compare to KV's Nautical Directions Library?  (Trying to decide which one to use)",
      "EditableFormat": "markdown",
      "HTML": "<p>How does your alternative compare to KV's Nautical Directions Library?  (Trying to decide which one to use)</p>\n\n",
      "PostDate": "2018-06-23T01:32:13.5564818Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "98d14991-f80c-4c3d-8cce-2eb840ad1668",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Entirely different really. His is a replacement for compass directions, so \"port\" replaces \"west\", and is for use on a ship or spaceship. \r\n\r\nMy replaces the compass road altogether with a pane that looks like the inventory pane, and lists the destinations by name, and I would suggest using it when the player can go to places without caring where they are, like in a big city, and you want to go to the park, but without worrying about the route.",
      "EditableFormat": "markdown",
      "HTML": "<p>Entirely different really. His is a replacement for compass directions, so \"port\" replaces \"west\", and is for use on a ship or spaceship.</p>\n<p>My replaces the compass road altogether with a pane that looks like the inventory pane, and lists the destinations by name, and I would suggest using it when the player can go to places without caring where they are, like in a big city, and you want to go to the park, but without worrying about the route.</p>\n\n",
      "PostDate": "2018-06-23T09:13:10.0844995Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
