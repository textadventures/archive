{
  "Topic": {
    "TopicId": "pwl5gipzfe2js33j2icq7g",
    "ForumId": "18",
    "Title": "A couple of utility constructors",
    "LastUpdated": "2020-02-22T11:22:03.3893606Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "34c963f8-0f93-4809-9668-21b565a8dec2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I notice that in a lot of example code for ShowMenu, the `Split` function is used to generate a stringlist; but there's no equally easy way to make other types of data structures.\r\n\r\nI use functions like these quite often (especially for easy testing), and I figure I should share them in case anyone else finds them useful.\r\n\r\n<h2>Stringlist</h2>\r\n\r\nWe've already got `Split` for this.\r\n\r\n<h2>Objectlist</h2>\r\n\r\n**Usage:** `characters = GetObjectlist (\"player;bob;eve;ivy\")`\r\n\r\n```\r\n<function name=\"GetObjectlist\" params=\"input\" type=\"objectlist\">\r\n  output = NewObjectList()\r\n  foreach (obj, Split(input)) {\r\n    list add (output, GetObject(obj))\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n\r\n<h2>Arbitrary lists</h2>\r\n\r\nMaybe not so useful to many people; but I quite often end up needing a list of numbers, or a list whose members are of different types. Easiest way to do that:\r\n\r\n**Usage:** `somelist=SplitEval(\"7;5;3;game.pov;\\\"string element\\\";SomeFunction()\")`\r\n\r\n```\r\n<function name=\"SplitEval\" params=\"input, params\" type=\"list\">\r\n  output = NewList()\r\n  if (not IsDefined(\"params\")) {\r\n    params = NewDictionary()\r\n  }\r\n  foreach (expr, Split(input)) {\r\n    list add (output, Eval(expr, params))\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n\r\n<h2>Stringdictionary</h2>\r\n\r\nThis could be useful to give the arguments to ShowMenu in a conversation system.\r\n\r\n**Usage:** `mydict = SplitDict(\"greeting=Hello, how are you today?;weather=Have you noticed that it's raining a lot the last few days?;exit=Sorry, no time to chat. See you around.\")`\r\n\r\n```\r\n<function name=\"SplitDict\" parameters=\"input\" type=\"stringdictionary\">\r\n  output = NewStringDictionary()\r\n  foreach (expr, Split(input)) {\r\n    pos = Instr (expr, \"=\")\r\n    if (pos = 0) {\r\n       if (not DictionaryContains(output, expr)) dictionary add (output, expr, \"\")\r\n    }\r\n    else {\r\n      DictionaryAdd (output, Left (expr, pos-1), Right (expr, LegthOf(expr) - pos))\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n\r\n<h2>Objectdictionary</h2>\r\n\r\n**Usage:** `objectdict = GetObjectdict(\"key1=objectname1;key2=objectname2;key3=objectname3\")`\r\n\r\n```\r\n<function name=\"GetObjectdict\" params=\"input\" type=\"objectdictionary\">\r\n  output = NewObjectDictionary()\r\n  foreach (obj, Split(input)) {\r\n    parts = split (obj, \"=\")\r\n    if (ListCount (parts) = 2) {\r\n      dictionary add (output, parts[0], GetObject(parts[1]))\r\n    }\r\n    else {\r\n      error (\"Invalid element “\"+obj+\"” passed to GetObjectdict\")\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n\r\n<h2>Arbitrary dictionary</h2>\r\n\r\nYou can already do this using `QuickParams`, up to a certain number of elements.\r\n\r\n```\r\n<function name=\"SplitDict\" parameters=\"input, params\" type=\"dictionary\">\r\n  output = NewDictionary()\r\n  if (not IsDefined(\"params\")) {\r\n    params = NewDictionary()\r\n  }\r\n  foreach (expr, Split(input)) {\r\n    pos = Instr (expr, \"=\")\r\n    if (pos = 0) {\r\n       if (not DictionaryContains(output, expr)) dictionary add (output, expr, null)\r\n    }\r\n    else {\r\n      DictionaryAdd (output, Left (expr, pos-1), Eval (Right (expr, LegthOf(expr) - pos), params))\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I notice that in a lot of example code for ShowMenu, the <code>Split</code> function is used to generate a stringlist; but there's no equally easy way to make other types of data structures.</p>\n<p>I use functions like these quite often (especially for easy testing), and I figure I should share them in case anyone else finds them useful.</p>\n<p></p><h2>Stringlist</h2><p></p>\n<p>We've already got <code>Split</code> for this.</p>\n<p></p><h2>Objectlist</h2><p></p>\n<p><strong>Usage:</strong> <code>characters = GetObjectlist (\"player;bob;eve;ivy\")</code></p>\n<pre><code>&lt;function name=\"GetObjectlist\" params=\"input\" type=\"objectlist\"&gt;\n  output = NewObjectList()\n  foreach (obj, Split(input)) {\n    list add (output, GetObject(obj))\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p></p><h2>Arbitrary lists</h2><p></p>\n<p>Maybe not so useful to many people; but I quite often end up needing a list of numbers, or a list whose members are of different types. Easiest way to do that:</p>\n<p><strong>Usage:</strong> <code>somelist=SplitEval(\"7;5;3;game.pov;\\\"string element\\\";SomeFunction()\")</code></p>\n<pre><code>&lt;function name=\"SplitEval\" params=\"input, params\" type=\"list\"&gt;\n  output = NewList()\n  if (not IsDefined(\"params\")) {\n    params = NewDictionary()\n  }\n  foreach (expr, Split(input)) {\n    list add (output, Eval(expr, params))\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p></p><h2>Stringdictionary</h2><p></p>\n<p>This could be useful to give the arguments to ShowMenu in a conversation system.</p>\n<p><strong>Usage:</strong> <code>mydict = SplitDict(\"greeting=Hello, how are you today?;weather=Have you noticed that it's raining a lot the last few days?;exit=Sorry, no time to chat. See you around.\")</code></p>\n<pre><code>&lt;function name=\"SplitDict\" parameters=\"input\" type=\"stringdictionary\"&gt;\n  output = NewStringDictionary()\n  foreach (expr, Split(input)) {\n    pos = Instr (expr, \"=\")\n    if (pos = 0) {\n       if (not DictionaryContains(output, expr)) dictionary add (output, expr, \"\")\n    }\n    else {\n      DictionaryAdd (output, Left (expr, pos-1), Right (expr, LegthOf(expr) - pos))\n    }\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p></p><h2>Objectdictionary</h2><p></p>\n<p><strong>Usage:</strong> <code>objectdict = GetObjectdict(\"key1=objectname1;key2=objectname2;key3=objectname3\")</code></p>\n<pre><code>&lt;function name=\"GetObjectdict\" params=\"input\" type=\"objectdictionary\"&gt;\n  output = NewObjectDictionary()\n  foreach (obj, Split(input)) {\n    parts = split (obj, \"=\")\n    if (ListCount (parts) = 2) {\n      dictionary add (output, parts[0], GetObject(parts[1]))\n    }\n    else {\n      error (\"Invalid element “\"+obj+\"” passed to GetObjectdict\")\n    }\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p></p><h2>Arbitrary dictionary</h2><p></p>\n<p>You can already do this using <code>QuickParams</code>, up to a certain number of elements.</p>\n<pre><code>&lt;function name=\"SplitDict\" parameters=\"input, params\" type=\"dictionary\"&gt;\n  output = NewDictionary()\n  if (not IsDefined(\"params\")) {\n    params = NewDictionary()\n  }\n  foreach (expr, Split(input)) {\n    pos = Instr (expr, \"=\")\n    if (pos = 0) {\n       if (not DictionaryContains(output, expr)) dictionary add (output, expr, null)\n    }\n    else {\n      DictionaryAdd (output, Left (expr, pos-1), Eval (Right (expr, LegthOf(expr) - pos), params))\n    }\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2020-02-22T11:22:03.3893606Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
