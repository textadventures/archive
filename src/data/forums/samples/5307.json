{
  "Topic": {
    "TopicId": "5307",
    "ForumId": "18",
    "Title": "How To Use Change Scripts",
    "LastUpdated": "2015-06-25T14:58:08+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "36709",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "A change script is a script linked to an attribute. The script runs whenever the attribute changes. It is most useful when you have an attribute that can change in several different situations, but in all of them, you want the same thing to happen. A good example is in an RPG-style game, where you want to check the player's hit points to see if he is dead. The hit points might change when the player is attacked, drinks a poison or sets off a trap. Each of those events can modify the hits, but you have one just one change script that checks if the player is alive.\n\nQuest has some change scripts already built in. If you change the parent attribute of the player, a change script fires that calls the OnEnterRoom function. This ensures the function gets called every time, rather than replying on game creators calling it each time the player moves.\n\nChange scripts can be created for attributes on any object, not just the player, by the way.\n\nAs an example, let us create an attribute called &quot;hitpoints&quot; on the player object. You can do that on the Attributes tab by clicking Add just above the bottom box. Set it to be an integer. Once it is in the list, click on it and then click the &quot;Add Change Script button. Quest will add a new attribute, &quot;changedhitpoints&quot;. Easy as that.\n\nNow make the script display the new hit points:\n[code:1jih8wlc]msg (&quot;Hits points now &quot; + player&#46;hitpoints)[/code:1jih8wlc]\n\nHere is an example of a change script in action in action:\n[code:1jih8wlc]&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;test_change&quot;&gt;\n    &lt;gameid&gt;cd4d850f-af71-4e87-ba68-f97fb87284ee&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;description&gt;Type &quot;drink poison&quot; to see the change script in action!&lt;/description&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;hitpoints type=&quot;int&quot;&gt;55&lt;/hitpoints&gt;\n      &lt;changedhitpoints type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n        if (player&#46;hitpoints &gt; 0) {\n          msg (&quot;Hits points now &quot; + player&#46;hitpoints)\n        }\n        else {\n          msg (&quot;You died!!!&quot;)\n          finish\n        }\n      &#93;&#93;&gt;&lt;/changedhitpoints&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;poison&quot;&gt;\n    &lt;pattern&gt;drink poison&lt;/pattern&gt;\n    &lt;script&gt;\n      player&#46;hitpoints = player&#46;hitpoints - 10\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;[/code:1jih8wlc]\n\nQuest recognises an attribute as a change script if it is a script and its name starts with &quot;changed&quot;. There are just standard scripts, and you can use them as such:\n[code:1jih8wlc]do (player, &quot;changedhitpoints&quot;)[/code:1jih8wlc]\n\n\n[b:1jih8wlc][i:1jih8wlc]Lists[/i:1jih8wlc][/b:1jih8wlc]\n\nChanging the contents of a list does not trigger a change script. Quest will consider it to be the same list. Say we have an attribute called &quot;listofstuff&quot;. \n[code:1jih8wlc]// This will not trigger a change script\nlist add (player&#46;listofstuff, &quot;item&quot;)\n// This will\nplayer&#46;listofstuff = NewStringList()\nplayer&#46;listofstuff = Split(&quot;first item,item&quot;, &quot;,&quot;)[/code:1jih8wlc]\n\n\n[b:1jih8wlc][i:1jih8wlc]Ordering[/i:1jih8wlc][/b:1jih8wlc]\n\nThe change script will fire when the attribute changes, so be careful where you make the change in your code. In the hit points example, this is wrong:\n[code:1jih8wlc]player&#46;hitpoints = player&#46;hitpoints - 20\nmsg(&quot;You drink the liquid&#46;&#46;&#46; and realised it was poison!&quot;)[/code:1jih8wlc]\nIf it kills the player, she will see this:\n[quote:1jih8wlc]You have died!!!\nYou drink the liquid... and realised it was poison![/quote:1jih8wlc]\nYou need to adjust the hit points after the message.\n\n[b:1jih8wlc][i:1jih8wlc]\nChange inside change[/i:1jih8wlc][/b:1jih8wlc]\n\nBe careful changing an attribute inside its own change script, you can easily end up in an infinite loop!\n\n\n[b:1jih8wlc][i:1jih8wlc]The &quot;parent&quot; Attribute[/i:1jih8wlc][/b:1jih8wlc]\n\nAn attribute you may well want to react to if it changes is the &quot;parent&quot; attribute, as this determines where an object is, what room it is currently in. You will find, however, that it already exist. You will need to click on &quot;Make Editable Copy&quot; to be able to do anything with it.\n\nIf the object in question is not the &quot;player&quot; object and will never be the player, you can just delete the existing code, and put n your own. If this is the &quot;player&quot; object or can be the player, you will need to add your code to the end of the existing code.\n\n\n[i:1jih8wlc][b:1jih8wlc]The oldvalue variable[/b:1jih8wlc][/i:1jih8wlc]\n\nThere is a special variable that holds the previous value of the attribute your change script is following, and this is called &quot;oldvalue&quot;. A good example of that in use is the change script on the &quot;parent&quot; attribute that was just mentioned:\n[code:1jih8wlc]if (game&#46;pov = this) {\n  if (IsDefined(&quot;oldvalue&quot;)) {\n    OnEnterRoom (oldvalue)\n  }\n  else {\n    OnEnterRoom (null)\n  }\n  if (game&#46;gridmap) {\n    MergePOVCoordinates\n  }\n}[/code:1jih8wlc]\nThe first line means that this code only applies if this object is the current player point-of-view (usually that is the &quot;player&quot; object). If this is the player, then the player has moved. It checks to see if [i:1jih8wlc]oldvalue[/i:1jih8wlc] exists (which it should do, but is good to check). If it exists, it is passed to OnEnterRoom, which can then run the leaving script for the old room if necessary.",
      "EditableFormat": "bbcode",
      "HTML": "A change script is a script linked to an attribute. The script runs whenever the attribute changes. It is most useful when you have an attribute that can change in several different situations, but in all of them, you want the same thing to happen. A good example is in an RPG-style game, where you want to check the player's hit points to see if he is dead. The hit points might change when the player is attacked, drinks a poison or sets off a trap. Each of those events can modify the hits, but you have one just one change script that checks if the player is alive.<br/><br/>Quest has some change scripts already built in. If you change the parent attribute of the player, a change script fires that calls the OnEnterRoom function. This ensures the function gets called every time, rather than replying on game creators calling it each time the player moves.<br/><br/>Change scripts can be created for attributes on any object, not just the player, by the way.<br/><br/>As an example, let us create an attribute called &quot;hitpoints&quot; on the player object. You can do that on the Attributes tab by clicking Add just above the bottom box. Set it to be an integer. Once it is in the list, click on it and then click the &quot;Add Change Script button. Quest will add a new attribute, &quot;changedhitpoints&quot;. Easy as that.<br/><br/>Now make the script display the new hit points:<br/><pre><code>msg (&quot;Hits points now &quot; + player&#46;hitpoints)</code></pre><br/><br/>Here is an example of a change script in action in action:<br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;test_change&quot;&gt;<br/>    &lt;gameid&gt;cd4d850f-af71-4e87-ba68-f97fb87284ee&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;description&gt;Type &quot;drink poison&quot; to see the change script in action!&lt;/description&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;hitpoints type=&quot;int&quot;&gt;55&lt;/hitpoints&gt;<br/>      &lt;changedhitpoints type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>        if (player&#46;hitpoints &gt; 0) {<br/>          msg (&quot;Hits points now &quot; + player&#46;hitpoints)<br/>        }<br/>        else {<br/>          msg (&quot;You died!!!&quot;)<br/>          finish<br/>        }<br/>      &#93;&#93;&gt;&lt;/changedhitpoints&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;poison&quot;&gt;<br/>    &lt;pattern&gt;drink poison&lt;/pattern&gt;<br/>    &lt;script&gt;<br/>      player&#46;hitpoints = player&#46;hitpoints - 10<br/>    &lt;/script&gt;<br/>  &lt;/command&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>Quest recognises an attribute as a change script if it is a script and its name starts with &quot;changed&quot;. There are just standard scripts, and you can use them as such:<br/><pre><code>do (player, &quot;changedhitpoints&quot;)</code></pre><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Lists</span></span><br/><br/>Changing the contents of a list does not trigger a change script. Quest will consider it to be the same list. Say we have an attribute called &quot;listofstuff&quot;. <br/><pre><code>// This will not trigger a change script<br/>list add (player&#46;listofstuff, &quot;item&quot;)<br/>// This will<br/>player&#46;listofstuff = NewStringList()<br/>player&#46;listofstuff = Split(&quot;first item,item&quot;, &quot;,&quot;)</code></pre><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Ordering</span></span><br/><br/>The change script will fire when the attribute changes, so be careful where you make the change in your code. In the hit points example, this is wrong:<br/><pre><code>player&#46;hitpoints = player&#46;hitpoints - 20<br/>msg(&quot;You drink the liquid&#46;&#46;&#46; and realised it was poison!&quot;)</code></pre><br/>If it kills the player, she will see this:<br/><blockquote><p>You have died!!!<br/>You drink the liquid... and realised it was poison!</p></blockquote><br/>You need to adjust the hit points after the message.<br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\"><br/>Change inside change</span></span><br/><br/>Be careful changing an attribute inside its own change script, you can easily end up in an infinite loop!<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">The &quot;parent&quot; Attribute</span></span><br/><br/>An attribute you may well want to react to if it changes is the &quot;parent&quot; attribute, as this determines where an object is, what room it is currently in. You will find, however, that it already exist. You will need to click on &quot;Make Editable Copy&quot; to be able to do anything with it.<br/><br/>If the object in question is not the &quot;player&quot; object and will never be the player, you can just delete the existing code, and put n your own. If this is the &quot;player&quot; object or can be the player, you will need to add your code to the end of the existing code.<br/><br/><br/><span style=\"font-style:italic;\"><span style=\"font-weight:bold;\">The oldvalue variable</span></span><br/><br/>There is a special variable that holds the previous value of the attribute your change script is following, and this is called &quot;oldvalue&quot;. A good example of that in use is the change script on the &quot;parent&quot; attribute that was just mentioned:<br/><pre><code>if (game&#46;pov = this) {<br/>  if (IsDefined(&quot;oldvalue&quot;)) {<br/>    OnEnterRoom (oldvalue)<br/>  }<br/>  else {<br/>    OnEnterRoom (null)<br/>  }<br/>  if (game&#46;gridmap) {<br/>    MergePOVCoordinates<br/>  }<br/>}</code></pre><br/>The first line means that this code only applies if this object is the current player point-of-view (usually that is the &quot;player&quot; object). If this is the player, then the player has moved. It checks to see if <span style=\"font-style:italic;\">oldvalue</span> exists (which it should do, but is good to check). If it exists, it is passed to OnEnterRoom, which can then run the leaving script for the old room if necessary.",
      "PostDate": "2015-06-25T09:28:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "36716",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Are there any conflicts when using 'changed' Scripts' and global Turnscripts' operations, such as in how~when they're activated~work ???\n\nfor example if you have a bunch of complex stuff in a global Turnscript, and you also got 'changed' Scripts, do those 'change' Scripts activate instantly upon the changing of the Attribute (no matter the source of the cause of the change of the Attribute) or do they only activate just as the Turnscripts do via the 'internal turns', which, especially if the former, could interfere~disrupt with your Turnscript's operations, or vice versa, your Turnscripts interfere with your 'changed' Scripts' operations.\n\n--------\n\nhmm... this might not be the best example, meh..., oh well...\n\nlet's say the game ends when your main character dies (and you use a 'changed' Script for that). But, you also got party~team members too (though you don't care about them being alive or dead, only the main character dying ends the game. You don't want the game to end when your entire party~team is dead, as is common in most rpgs), and you want them to be able to revive the main character (or the other party~team members too) before the end of the Turnscript (and then if the main character isn't revived, its game over).\n\nwill you have a conflict: the 'changed' Script ends the game, before the Turnscripts gives you the chance (if you can do so) to revive the main character ??\n\nor other common examples would be complex mathematical expressions~operations, would the 'changed' Script intefere with those (depending on when~how it activates) ???\n\n----\n\nP.S.\n\nthanks again for another library~guide! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\npixie the library~guide SPAMMER! (the good kind of spamming, hehe)",
      "EditableFormat": "bbcode",
      "HTML": "Are there any conflicts when using 'changed' Scripts' and global Turnscripts' operations, such as in how~when they're activated~work ???<br/><br/>for example if you have a bunch of complex stuff in a global Turnscript, and you also got 'changed' Scripts, do those 'change' Scripts activate instantly upon the changing of the Attribute (no matter the source of the cause of the change of the Attribute) or do they only activate just as the Turnscripts do via the 'internal turns', which, especially if the former, could interfere~disrupt with your Turnscript's operations, or vice versa, your Turnscripts interfere with your 'changed' Scripts' operations.<br/><br/>--------<br/><br/>hmm... this might not be the best example, meh..., oh well...<br/><br/>let's say the game ends when your main character dies (and you use a 'changed' Script for that). But, you also got party~team members too (though you don't care about them being alive or dead, only the main character dying ends the game. You don't want the game to end when your entire party~team is dead, as is common in most rpgs), and you want them to be able to revive the main character (or the other party~team members too) before the end of the Turnscript (and then if the main character isn't revived, its game over).<br/><br/>will you have a conflict: the 'changed' Script ends the game, before the Turnscripts gives you the chance (if you can do so) to revive the main character ??<br/><br/>or other common examples would be complex mathematical expressions~operations, would the 'changed' Script intefere with those (depending on when~how it activates) ???<br/><br/>----<br/><br/>P.S.<br/><br/>thanks again for another library~guide! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/>pixie the library~guide SPAMMER! (the good kind of spamming, hehe)",
      "PostDate": "2015-06-25T12:59:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "36717",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "A change script fires when the attribute is changed. If that is in another script, then that script will stop while the change script runs. Once the change script has finished, the original script will resume from that point (just like calling a function).\n\nA turn script fires at the end of a turn. If it changes an attribute with a change  script, the same thing will happen. The turn script will stop, and the change script will run through. Once over, the turn scrip will resume.\n\nI am not sure I follow your RPG example. Does the game only terminate when everyone is dead? Probably the best way to do that would be to have change scripts on the hit points for each character, and set them all to call the same function, and then that function tests whether everyone is dead, and only end the game then.",
      "EditableFormat": "bbcode",
      "HTML": "A change script fires when the attribute is changed. If that is in another script, then that script will stop while the change script runs. Once the change script has finished, the original script will resume from that point (just like calling a function).<br/><br/>A turn script fires at the end of a turn. If it changes an attribute with a change  script, the same thing will happen. The turn script will stop, and the change script will run through. Once over, the turn scrip will resume.<br/><br/>I am not sure I follow your RPG example. Does the game only terminate when everyone is dead? Probably the best way to do that would be to have change scripts on the hit points for each character, and set them all to call the same function, and then that function tests whether everyone is dead, and only end the game then.",
      "PostDate": "2015-06-25T14:12:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "36718",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "no, my scenario was just for when the main character dies, the game ends (I was trying to emphasive that it wasn't the more common design of the, 'game over' occuring when the entire party~team dies ~ my badly worded post ended up having the opposite effect, you thought I meant having the scenerio of the entire party~team death resulting in the game over, sighs, Anyways, I just wanted to use the scenario~example to set up my question about the possible conflict, which was my point in my post, as I wasn't sure of how they worked. The 'changed' Script basically takes priority, everything~anything else stops~pauses, until the 'changed' Scripts are done executing. thank you for the answer.\n\nPeople~I do still need to be careful though in setting up our systems, as you explain in your answer, or we~I can indeed have issues~conflicts in terms of the proper operations and~or order of operations.",
      "EditableFormat": "bbcode",
      "HTML": "no, my scenario was just for when the main character dies, the game ends (I was trying to emphasive that it wasn't the more common design of the, 'game over' occuring when the entire party~team dies ~ my badly worded post ended up having the opposite effect, you thought I meant having the scenerio of the entire party~team death resulting in the game over, sighs, Anyways, I just wanted to use the scenario~example to set up my question about the possible conflict, which was my point in my post, as I wasn't sure of how they worked. The 'changed' Script basically takes priority, everything~anything else stops~pauses, until the 'changed' Scripts are done executing. thank you for the answer.<br/><br/>People~I do still need to be careful though in setting up our systems, as you explain in your answer, or we~I can indeed have issues~conflicts in terms of the proper operations and~or order of operations.",
      "PostDate": "2015-06-25T14:58:08+01:00",
      "LastEditDate": null
    }
  ]
}
