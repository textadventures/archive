{
  "Topic": {
    "TopicId": "5nwc3eltt02p2bwh_5zdaw",
    "ForumId": "18",
    "Title": "Integrating favourite libraries into the core of quest 5.8  \"core3\"",
    "LastUpdated": "2023-11-11T15:20:10.9396546Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ce463b91-4458-4bde-aa81-384fe33023c8",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I realized that I've been sort of cataloging my journey on integrating my favourite libraries into the core on my \"too many tabs\" topic, and that was foolish.  Now someone who only cared about making tabs toggle-able instead of permanent has all sorts of stuff they might not care about reading that relates to integrating a whole set of libraries into the core.  SMH\r\n\r\nAnyway, that's here:  https://textadventures.co.uk/forum/samples/topic/y_eruu9bp0mq498lw7tknq/too-many-tabs-adding-your-library-tabs-to-the-features-tabs-so-they-can-be-to\r\n\r\nBut now I'll put stuff in a real topic devoted to integrating your favourite libraries into the core.  \r\n\r\nThis process can:\r\n       1. reduce the number of tabs altogether, placing controls on pre-existant tabs (eg. LiquidLib)\r\n       2. inspire you to create new controls in the editor for overriding/working with your fav modifications on your fav libraries \r\n            (eg. mana, player-stats, or customisable monster scripts, etc. in CombatLib)\r\n       3. reduce/nullify the setup a library needs before it will work (eg CombatInitialise, InitInv2, Scopebackdrop, & WeatherLib \r\n             setup)\r\n       4. reduce the amount of things the library user needs to remember, or go to documentation for, when they want to  use the \r\n            library (because they're added to the editor and controls)\r\n\r\nRemember before editing the core to save a copy of it somewhere pristine, especially the \"core.aslx\" file itself, as the others can be renamed to sit side-by-side one another comfortably, but this one can't easily and so modified versions will replace eachother.  Simply add a number to the edited core file for version, and update the \"includeref\" code in \"core\".\r\n\r\nSo far, I've updated these files in my \"core3\" (\"core2\" was for just integrating the tabs onto the \"features\"):\r\n\r\n           \"CoreCommands3.aslx (now includes many commands added by libraries)\r\n           \"CoreFunctions3.aslx (now includes many functions added by libraries)\r\n            \"CoreTypes3.aslx\" (now includes many types added by libraries)\r\n            \"CoreStatusAttributes3.aslx\"  (Auto-adds additional CombatLib attributes when enabled, hitpoints, mana, xp)\r\n            \"CoreOutput3.aslx\"  (includes integrations of Output Text Paragraph, and MessagePlus libraries, etc created by EightOne)\r\n            \"CoreCombat3.aslx\" (includes surprisingly few integration components as most of CombatLib actually ended up being \r\n                                                         included in other areas of the core)\r\n            \"CoreEditor3.aslx\" (calls updated editors and additional editors \"tabs\"  from libraries)\r\n            \"CoreWearable3.aslx\" (includes some portions of CombatLib which are needed for wearable types)\r\n            \"CoreEditorGame3.aslx\" (Includes features checkboxes to enable libraries/tabs, also statnames string dictionary editor on \r\n                                                               the player tab--WhenCombatLib enabled)\r\n            \"CoreEditorObject3.aslx\" (updated to call the modified and integrated editor tabs)\r\n            \"CoreEditorExit3.aslx\"  (includes calling descriptions tab if some of my personal libraries are added/enabled--intend to \r\n                                                            eventually determine what happened to MrAngel's ExitDescriptionsLib when the other libraries \r\n                                                            were enabled that killed it and integrate his awesome checkboxes too this is one is not neccessary \r\n                                                            really as it stands) \r\n            \"CoreEditorScripts3.aslx\" (includes integration of some of EightOne's editor libraries)\r\n            \"CoreEditorObjectSetup3.aslx\" (now includes some additional checkboxes and type dropdowns depending upon \r\n                                library/feature integration)\r\n            \"CoreEditorObjectRoom3.aslx\"(now includes smell and listen scripts for the room ambiance)\r\n            \"CoreEditorObjectFeatures3.aslx\" (Includes checkboxes for toggling those tabs/enabling integrated library \r\n                                features as discussed in the other forum post)\r\n            \"CoreEditorObjectUseGive3.aslx\" (integrates the editions of  EightOne's \"UseAllRound\" library)\r\n            \"CoreEditorObjectContainer3.aslx\" (includes the LiquidLib tab portions for objects)\r\n            \"CoreEditorObjectWearable3.aslx\"(now includes wearable types from CombatLib and relevant editor pieces)\r\n            \"CoreEditorObjectOptions3.aslx\" (I honestly can't remember what--if anything-- I updated here)\r\n             \"CoreEditorObjectLift3.aslx\" (this is what's left of LiftLib's tab after integrating the rest of the library--only appears if a \r\n                                                                         room or object given a \"Lift type\" with dropdown on the setup tab)\r\n             \"CoreEditorObjectStack3.aslx\" (same as above, remaining bits of a tab from a Pixie library)\r\n             \"CoreEditorObjectWeather3.aslx\" (same as above, remaining bits of the tab from latest upgraded WeatherLib)\r\n             \"CoreEditorObjectHoly3.aslx\" (Tab from one of my personal libraries for a game I'm working on. It wouldn't be in \r\n                                something posted to the site as a finished product and probably wouldn't interest most folks to use it.)\r\n             \"CoreEditorObjectNpcandPostures3.aslx\" (All that's left of editor tabs from Pixie's various NPC and Postures \r\n                                libraries)\r\n             \"CoreEditorObjectConversation3.aslx (all that's left of ConversationLib is the Conversation tab as this file... as I \r\n                              make this list, I wonder if this can disappear altogether by integrating it with \"CoreEditorObjectAskTell\"... I'll be \r\n                              looking into that)\r\n\r\n            For CoreEditorScripts, I plan to eventually learn and integrate further some very commonly called functions and used \r\n                                                           attributes from libraries (like CombatLib) but I'm not there yet.\r\n             \"CoreEditorScriptsOutput3.aslx\" (Includes EightOne library integrations)\r\n             \"CoreEditorScriptsObjects3.aslx\"(Includes EightOne library integrations)\r\n             \"CoreEditorScriptsScripts3.aslx\" (Includes EightOne library integrations)\r\n\r\n\r\nAdvanced folks can do their own versions of things to make their lives easier.  \r\n\r\nNewbies could conceivably use a polished version of these updates as a standard set to just have more available to them without much coding... although I LOVE how Quest and all the current documentation and using these libraries has taught me what little I know about coding.\r\n\r\nStill working this project, but having a blast!",
      "EditableFormat": "markdown",
      "HTML": "<p>So I realized that I've been sort of cataloging my journey on integrating my favourite libraries into the core on my \"too many tabs\" topic, and that was foolish.  Now someone who only cared about making tabs toggle-able instead of permanent has all sorts of stuff they might not care about reading that relates to integrating a whole set of libraries into the core.  SMH</p>\n<p>Anyway, that's here:  https://textadventures.co.uk/forum/samples/topic/y_eruu9bp0mq498lw7tknq/too-many-tabs-adding-your-library-tabs-to-the-features-tabs-so-they-can-be-to</p>\n<p>But now I'll put stuff in a real topic devoted to integrating your favourite libraries into the core.</p>\n<p>This process can:<br>\n1. reduce the number of tabs altogether, placing controls on pre-existant tabs (eg. LiquidLib)<br>\n2. inspire you to create new controls in the editor for overriding/working with your fav modifications on your fav libraries<br>\n(eg. mana, player-stats, or customisable monster scripts, etc. in CombatLib)<br>\n3. reduce/nullify the setup a library needs before it will work (eg CombatInitialise, InitInv2, Scopebackdrop, &amp; WeatherLib<br>\nsetup)<br>\n4. reduce the amount of things the library user needs to remember, or go to documentation for, when they want to  use the<br>\nlibrary (because they're added to the editor and controls)</p>\n<p>Remember before editing the core to save a copy of it somewhere pristine, especially the \"core.aslx\" file itself, as the others can be renamed to sit side-by-side one another comfortably, but this one can't easily and so modified versions will replace eachother.  Simply add a number to the edited core file for version, and update the \"includeref\" code in \"core\".</p>\n<p>So far, I've updated these files in my \"core3\" (\"core2\" was for just integrating the tabs onto the \"features\"):</p>\n<pre><code>       \"CoreCommands3.aslx (now includes many commands added by libraries)\n       \"CoreFunctions3.aslx (now includes many functions added by libraries)\n        \"CoreTypes3.aslx\" (now includes many types added by libraries)\n        \"CoreStatusAttributes3.aslx\"  (Auto-adds additional CombatLib attributes when enabled, hitpoints, mana, xp)\n        \"CoreOutput3.aslx\"  (includes integrations of Output Text Paragraph, and MessagePlus libraries, etc created by EightOne)\n        \"CoreCombat3.aslx\" (includes surprisingly few integration components as most of CombatLib actually ended up being \n                                                     included in other areas of the core)\n        \"CoreEditor3.aslx\" (calls updated editors and additional editors \"tabs\"  from libraries)\n        \"CoreWearable3.aslx\" (includes some portions of CombatLib which are needed for wearable types)\n        \"CoreEditorGame3.aslx\" (Includes features checkboxes to enable libraries/tabs, also statnames string dictionary editor on \n                                                           the player tab--WhenCombatLib enabled)\n        \"CoreEditorObject3.aslx\" (updated to call the modified and integrated editor tabs)\n        \"CoreEditorExit3.aslx\"  (includes calling descriptions tab if some of my personal libraries are added/enabled--intend to \n                                                        eventually determine what happened to MrAngel's ExitDescriptionsLib when the other libraries \n                                                        were enabled that killed it and integrate his awesome checkboxes too this is one is not neccessary \n                                                        really as it stands) \n        \"CoreEditorScripts3.aslx\" (includes integration of some of EightOne's editor libraries)\n        \"CoreEditorObjectSetup3.aslx\" (now includes some additional checkboxes and type dropdowns depending upon \n                            library/feature integration)\n        \"CoreEditorObjectRoom3.aslx\"(now includes smell and listen scripts for the room ambiance)\n        \"CoreEditorObjectFeatures3.aslx\" (Includes checkboxes for toggling those tabs/enabling integrated library \n                            features as discussed in the other forum post)\n        \"CoreEditorObjectUseGive3.aslx\" (integrates the editions of  EightOne's \"UseAllRound\" library)\n        \"CoreEditorObjectContainer3.aslx\" (includes the LiquidLib tab portions for objects)\n        \"CoreEditorObjectWearable3.aslx\"(now includes wearable types from CombatLib and relevant editor pieces)\n        \"CoreEditorObjectOptions3.aslx\" (I honestly can't remember what--if anything-- I updated here)\n         \"CoreEditorObjectLift3.aslx\" (this is what's left of LiftLib's tab after integrating the rest of the library--only appears if a \n                                                                     room or object given a \"Lift type\" with dropdown on the setup tab)\n         \"CoreEditorObjectStack3.aslx\" (same as above, remaining bits of a tab from a Pixie library)\n         \"CoreEditorObjectWeather3.aslx\" (same as above, remaining bits of the tab from latest upgraded WeatherLib)\n         \"CoreEditorObjectHoly3.aslx\" (Tab from one of my personal libraries for a game I'm working on. It wouldn't be in \n                            something posted to the site as a finished product and probably wouldn't interest most folks to use it.)\n         \"CoreEditorObjectNpcandPostures3.aslx\" (All that's left of editor tabs from Pixie's various NPC and Postures \n                            libraries)\n         \"CoreEditorObjectConversation3.aslx (all that's left of ConversationLib is the Conversation tab as this file... as I \n                          make this list, I wonder if this can disappear altogether by integrating it with \"CoreEditorObjectAskTell\"... I'll be \n                          looking into that)\n\n        For CoreEditorScripts, I plan to eventually learn and integrate further some very commonly called functions and used \n                                                       attributes from libraries (like CombatLib) but I'm not there yet.\n         \"CoreEditorScriptsOutput3.aslx\" (Includes EightOne library integrations)\n         \"CoreEditorScriptsObjects3.aslx\"(Includes EightOne library integrations)\n         \"CoreEditorScriptsScripts3.aslx\" (Includes EightOne library integrations)\n</code></pre>\n<p>Advanced folks can do their own versions of things to make their lives easier.</p>\n<p>Newbies could conceivably use a polished version of these updates as a standard set to just have more available to them without much coding... although I LOVE how Quest and all the current documentation and using these libraries has taught me what little I know about coding.</p>\n<p>Still working this project, but having a blast!</p>\n\n",
      "PostDate": "2023-11-11T15:20:10.9396546Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c735a91-bed2-4f38-8556-faea7c2b5bc9",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, it uglified the part in the box there :/",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, it uglified the part in the box there :/</p>\n\n",
      "PostDate": "2023-11-11T15:21:50.3983316Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fdb754b0-acfd-43f3-8d59-1c3e27fc693d",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Latest little side-quest as I work on this.  Pixie's CombatLib mentions fungi, but didn't actually have any...\r\nSince I was a Moria/Angband/Zangband player before windows stopped handling it well, I have an affinity for mushrooms that do stuff in games.\r\n\r\nSo.... I added a Fungus Type which works with some of Pixie's (modified) functionality in my core3 update.\r\n\r\nFirst thing was to update the \"edible\" type slightly.  (Some of the edits are merely to incorporate other features of Pixie's CombatLib like Hitpoints and Mana)  It can be found in CoreTypes3.aslx\r\n\r\n```\r\n  <type name=\"edible\">\r\n    <displayverbs type=\"listextend\">[Eat]</displayverbs>\r\n    <inventoryverbs type=\"listextend\">[Eat]</inventoryverbs>\r\n    <eat type=\"script\">\r\n      if (HasInt(this, \"lastsfor\")) {\r\n        do (this, \"starteateffect\")\r\n      }\r\n      else if (HasScript(this, \"eateffect\")) {\r\n        do (this, \"eateffect\")\r\n      }\r\n      if (HasInt(game.pov, \"health\")) {\r\n        game.pov.health = game.pov.health + this.eathealth\r\n      }\r\n      if (HasInt(game.pov, \"hitpoints\")) {\r\n        game.pov.hitpoints = game.pov.hitpoints + this.eathealth\r\n      }\r\n      if (HasInt(game.pov, \"mana\")) {\r\n        game.pov.mana = game.pov.mana + this.eatmana\r\n      }\r\n      if (HasString(this, \"eatmsg\")) {\r\n        msg (this.eatmsg)\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(\"Eaten\", this))\r\n      }\r\n      if (HasScript(this, \"tastedesc\")) {\r\n        do (this, \"tastedesc\")\r\n      }\r\n      if (HasInt(this, \"lastsfor\")) {\r\n        MakeObjectInvisible (this)\r\n      }\r\n      else {\r\n        destroy (this.name)\r\n      }\r\n    </eat>\r\n    <eathealth type=\"int\">0</eathealth>\r\n    <eatmana type=\"int\">0</eatmana>\r\n  </type>\r\n```\r\nNext (conceptually) was to make a Fungus Type, which could be selected from the Edible Tab's dropdown:\r\n\r\n```\r\n  <type name=\"fungus\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <inherit name=\"merchandise\" />\r\n      <inherit name=\"useasother\" />\r\n      <feature_edible />\r\n      <feature_combat />\r\n      <scenery type=\"boolean\">false</scenery>\r\n      <feature_usegive />\r\n      <useasotherverb>eat</useasotherverb>\r\n      <sense_able />\r\n      <attr name=\"status_descriptions\" type=\"boolean\">false</attr>\r\n      <destroyonsale />\r\n      <starteateffect type=\"script\">\r\n        do (this, \"eateffect\")\r\n        game.pov.currentbelly = this\r\n        game.pov.eateffcountdown = this.lastsfor\r\n        if (GetBoolean(this, \"cannothold\")) {\r\n          DropEverything\r\n        }\r\n        if (HasObject(this, \"specialattack\")) {\r\n          game.pov.equipped = this.specialattack\r\n        }\r\n      </starteateffect>\r\n      <endeateffect type=\"script\">\r\n        game.pov.currentbelly = null\r\n        if (HasScript(this, \"terminate\")) {\r\n          do (this, \"terminate\")\r\n        }\r\n        if (HasObject(this, \"specialattack\")) {\r\n          game.pov.equipped = fists\r\n        }\r\n        destroy (this.name)\r\n      </endeateffect>\r\n  </type>\r\n```\r\nThe Edible Tab now needs updated as such to better include CombatLib... It can be found in CoreEditorObjectOptions3:\r\n\r\n```\r\n  <tab>\r\n    <parent>_ObjectEditor</parent>\r\n    <caption>[EditorObjectOptionsEdible]</caption>\r\n    <mustnotinherit>editor_room</mustnotinherit>\r\n    <onlydisplayif>this.feature_edible</onlydisplayif>\r\n\r\n    <control>\r\n      <controltype>dropdowntypes</controltype>\r\n      <caption>[EditorObjectOptionsEdible2]</caption>\r\n      <types>*=[TypeCannotEaten]; edible=[TypeCanEaten]; fungus=Fungus</types>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <attribute>eathealth</attribute>\r\n      <caption>[EditorObjectOptionsChangehealth]</caption>\r\n      <mustinherit>edible</mustinherit>\r\n      <onlydisplayif>game.showhealth or game.feature_DescriptionsTab</onlydisplayif>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <attribute>eatmana</attribute>\r\n      <caption>Change Mana by</caption>\r\n      <mustinherit>edible</mustinherit>\r\n      <onlydisplayif>game.feature_mana</onlydisplayif>\r\n    </control>\r\n    <control>\r\n      <controltype>textbox</controltype>\r\n      <attribute>eatmsg</attribute>\r\n      <caption>[EditorObjectOptionsMessageEat]</caption>\r\n      <nullable/>\r\n      <mustinherit>edible</mustinherit>\r\n    </control>\r\n\r\n    <control>\r\n      <controltype>script</controltype>\r\n      <caption>Eat Effect (what happens when eaten)</caption>\r\n      <attribute>eateffect</attribute>\r\n      <mustinherit>edible</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>label</controltype>\r\n      <caption>Below are for use if the fungus has a turn-limited effect.</caption>\r\n      <mustinherit>fungus</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Last for (turns)</caption>\r\n      <attribute>lastsfor</attribute>\r\n      <width>100</width>\r\n      <mustinherit>fungus</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>script</controltype>\r\n      <caption>Script to run when the effect has finished (remember to also include a message to describe any changes)</caption>\r\n      <attribute>terminate</attribute>\r\n      <mustinherit>fungus</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>checkbox</controltype>\r\n      <caption>Cannot hold anything during effect?</caption>\r\n      <attribute>cannothold</attribute>\r\n      <mustinherit>fungus</mustinherit>\r\n      <nullable/>\r\n    </control>\r\n\r\n\r\n  </tab>\r\n```\r\nAnd so as you review these type and tab changes (if you're familiar with CombatLib)  you can see that it uses something very similar to his lasting magic effect/potion effect system.\r\n\r\nThe scripts on the fungus starteateffect and endeateffect are versions of startmagiceffect and endmagiceffect from the type \"magicaleffectprovider\"\r\n\r\nThis means that in CombatStuff3.xml in the  \"attacktheplayerturnscript\"  you need to add some code similar to that which handles \"magiccountdown\"\r\n\r\n```\r\n        // Check for Edible effect expiring\r\n        if (not HasInt(game.pov, \"eateffcountdown\")) {\r\n          game.pov.eateffcountdown = 0\r\n        }\r\n        if (game.pov.eateffcountdown > 0) {\r\n          game.pov.eateffcountdown = game.pov.eateffcountdown - 1\r\n          if (game.pov.eateffcountdown < 1) {\r\n            do (game.pov.currentbelly, \"endeateffect\")\r\n          }\r\n        }\r\n```\r\n\r\net voila!  You now have several CombatLib options related to your edibles which are easily adjustable in the editor:\r\n\r\nYou can use the same exact health attribute to add/subtract from Hitpoints that was already in the core\r\nYou can perform the same behaviors with a mana attribute \r\nYou can give any edible an \"eateffect\" script\r\n\r\nYou can turn your edible into a fungus by selecting \"fungus\" instead of \"edible\" in the dropdown and add the additional functionality of making the \"eateffect\" last a specified number of turns like a spell or potion.\r\n\r\nIt also includes \"tastedesc\" description/script if you're using my senses or the updated weatherlib. You can delete that row if not wanting to use or change it if you've got your own senses worked out in your game.\r\n\r\nAlso, to have the game recognize whether you've selected to use Shops, Combat, or Mana, etc. and update the appropriate attributes I've modified CoreStatusAttributes3 as follows:\r\n```\r\n  <function name=\"InitStatusAttributes\">\r\n    <![CDATA[\r\n    if (game.showscore) {\r\n      game.score = 0\r\n      if (game.statusattributes = null) {\r\n        game.statusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.statusattributes, \"score\", \"[Score]: !\")\r\n    }\r\n\r\n    if (game.feature_DescriptionsTab) {\r\n      game.pov.xp = 0\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"xp\", \"XP: !\")\r\n    }\r\n\r\n    if (game.showhealth) {\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"health\", \"[Health]: !%\")\r\n    }\r\n\r\n    if (game.feature_DescriptionsTab) {\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"hitpoints\", \"Hitpoints: !\")\r\n    }\r\n\r\n    if (game.feature_mana) {\r\n      game.pov.mana = 0\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"mana\", \"MP: !\")\r\n    }\r\n\r\n    if (game.showmoney) {\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"money\", \"[Money]: !\")\r\n    }\r\n    if (HasAttribute(game, \"feature_ShopLib\")) {\r\n      set (game, \"moneyformat\", \"£!1.2!\")\r\n    }\r\n    ]]>\r\n  </function>\r\n```\r\n\r\nI've also added some \"player\" combat controls to the combat tab based on following Pixie's documentation and attributes he tells you are available.\r\n\r\n```\r\n    <!-- Player -->\r\n    <control>\r\n      <controltype>checkbox</controltype>\r\n      <caption>Has venom glands?</caption>\r\n      <attribute>haspoisonglands</attribute>\r\n      <mustinherit>editor_player</mustinherit>\r\n    </control> \r\n    <control>\r\n      <controltype>textbox</controltype>\r\n      <caption>Display when player tries to talk if this player object cannot talk</caption>\r\n      <attribute>gagstring</attribute>\r\n      <mustinherit>editor_player</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>objects</controltype>\r\n      <caption>Starting Weapon</caption>\r\n      <attribute>equipped</attribute>\r\n      <mustinherit>editor_player</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>objects</controltype>\r\n      <caption>Starting Shield</caption>\r\n      <attribute>shield</attribute>\r\n      <mustinherit>editor_player</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>textbox</controltype>\r\n      <caption>Starting Status effect</caption>\r\n      <attribute>status</attribute>\r\n      <mustinherit>editor_player</mustinherit>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Starting Hitpoints</caption>\r\n      <attribute>hitpoints</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Starting Mana Points</caption>\r\n      <attribute>mana</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <onlydisplayif>game.feature_mana</onlydisplayif> \r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Starting Mana Max</caption>\r\n      <attribute>mana_max</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <onlydisplayif>game.feature_mana</onlydisplayif> \r\n      <minimum>1</minimum>\r\n    </control>\t\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Starting Mana Bonus</caption>\r\n      <attribute>mana_bonus</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <onlydisplayif>game.feature_mana</onlydisplayif> \r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Default Strength</caption>\r\n      <attribute>strength</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Default Agility</caption>\r\n      <attribute>agility</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Default Stamina</caption>\r\n      <attribute>stamina</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n    <control>\r\n      <controltype>number</controltype>\r\n      <caption>Default Intelligence</caption>\r\n      <attribute>intelligence</attribute>\r\n      <width>100</width>\r\n      <mustinherit>editor_player</mustinherit>\r\n      <minimum>1</minimum>\r\n    </control>\r\n```\r\nEventually I'll work out the best way to integrate the recipe/venom system so that creators who wish to use that functionality that Pixie created don't have to work so hard to made additional recipes and venom.  It's on a to-do list, but so are many other things that look more fun to me.  For now, player venom is easy to toggle, congratulations, you can spit on your weapon now.\r\n\r\nI'm also planning to work out the best way to deal with \"fists\" in case creators want to easily change/modify the default \"unequipped\" attack object.\r\n\r\nHave added to the editor on \"CoreEditorGame3.aslx\" so that you can easily add/remove status attribute names in the dictionary that Pixie has you set up in the documentation.  It's now on the Player tab:\r\n\r\n```\r\n    <tab>\r\n      <caption>[EditorGamePlayer]</caption>\r\n      <advanced/>\r\n\r\n      <control>\r\n        <caption>[EditorGamePlayerobject]</caption>\r\n        <attribute>pov</attribute>\r\n        <controltype>objects</controltype>\r\n        <advanced/>\r\n      </control>\r\n\r\n      <control>\r\n        <onlydisplayif>game.pov = null</onlydisplayif>\r\n        <advanced/>\r\n        <controltype>label</controltype>\r\n        <caption>[EditorGameIfnoplayer]</caption>\r\n      </control>\r\n\r\n      <control>\r\n        <controltype>script</controltype>\r\n        <attribute>onhealthzero</attribute>\r\n        <onlydisplayif>game.showhealth</onlydisplayif>\r\n        <caption>[EditorGameScripttorun]</caption>\r\n      </control>\r\n\r\n      <control>\r\n        <controltype>textbox</controltype>\r\n        <caption>[EditorGameMoneyformat]</caption>\r\n        <attribute>moneyformat</attribute>\r\n        <onlydisplayif>game.showmoney</onlydisplayif>\r\n        <width>50</width>\r\n      </control>\r\n      \r\n      <control>\r\n        <controltype>stringdictionary</controltype>\r\n        <caption>[EditorGamePlayerobjectStatus]</caption>\r\n        <keyprompt>[EditorGameAttributesPleaseenter]</keyprompt>\r\n        <valueprompt>[EditorGameAttributesPleaseenter2]</valueprompt>\r\n        <attribute>povstatusattributes</attribute>\r\n        <advanced/>\r\n      </control>\r\n      <control>\r\n        <controltype>stringdictionary</controltype>\r\n        <caption>Stat Names</caption>\r\n        <keyprompt>attribute name</keyprompt>\r\n        <valueprompt>Name for attribute player sees</valueprompt>\r\n        <attribute>statnames</attribute>\r\n        <advanced/>\r\n      </control>\r\n    </tab>\r\n```\r\nAnd checked that ondeath mechanism incorporates xp \r\n\r\nI wanted to make a help commands editor, but it's currently beyond me.  If anyone knows how to create controls in the game object editors that would be able to override commands?  Otherwise, it might just be that people have to override those the \"hard\" way.\r\n\r\nBut if Pixie mentioned in his documentation to create or override a script, I've already added them or plan to add them to the editors in the appropriate places.\r\n\r\nAnyway, here's hoping that this stuff is interesting/useful to someone.   ",
      "EditableFormat": "markdown",
      "HTML": "<p>Latest little side-quest as I work on this.  Pixie's CombatLib mentions fungi, but didn't actually have any...<br>\nSince I was a Moria/Angband/Zangband player before windows stopped handling it well, I have an affinity for mushrooms that do stuff in games.</p>\n<p>So.... I added a Fungus Type which works with some of Pixie's (modified) functionality in my core3 update.</p>\n<p>First thing was to update the \"edible\" type slightly.  (Some of the edits are merely to incorporate other features of Pixie's CombatLib like Hitpoints and Mana)  It can be found in CoreTypes3.aslx</p>\n<pre><code>  &lt;type name=\"edible\"&gt;\n    &lt;displayverbs type=\"listextend\"&gt;[Eat]&lt;/displayverbs&gt;\n    &lt;inventoryverbs type=\"listextend\"&gt;[Eat]&lt;/inventoryverbs&gt;\n    &lt;eat type=\"script\"&gt;\n      if (HasInt(this, \"lastsfor\")) {\n        do (this, \"starteateffect\")\n      }\n      else if (HasScript(this, \"eateffect\")) {\n        do (this, \"eateffect\")\n      }\n      if (HasInt(game.pov, \"health\")) {\n        game.pov.health = game.pov.health + this.eathealth\n      }\n      if (HasInt(game.pov, \"hitpoints\")) {\n        game.pov.hitpoints = game.pov.hitpoints + this.eathealth\n      }\n      if (HasInt(game.pov, \"mana\")) {\n        game.pov.mana = game.pov.mana + this.eatmana\n      }\n      if (HasString(this, \"eatmsg\")) {\n        msg (this.eatmsg)\n      }\n      else {\n        msg (DynamicTemplate(\"Eaten\", this))\n      }\n      if (HasScript(this, \"tastedesc\")) {\n        do (this, \"tastedesc\")\n      }\n      if (HasInt(this, \"lastsfor\")) {\n        MakeObjectInvisible (this)\n      }\n      else {\n        destroy (this.name)\n      }\n    &lt;/eat&gt;\n    &lt;eathealth type=\"int\"&gt;0&lt;/eathealth&gt;\n    &lt;eatmana type=\"int\"&gt;0&lt;/eatmana&gt;\n  &lt;/type&gt;\n</code></pre>\n<p>Next (conceptually) was to make a Fungus Type, which could be selected from the Edible Tab's dropdown:</p>\n<pre><code>  &lt;type name=\"fungus\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;inherit name=\"merchandise\" /&gt;\n      &lt;inherit name=\"useasother\" /&gt;\n      &lt;feature_edible /&gt;\n      &lt;feature_combat /&gt;\n      &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n      &lt;feature_usegive /&gt;\n      &lt;useasotherverb&gt;eat&lt;/useasotherverb&gt;\n      &lt;sense_able /&gt;\n      &lt;attr name=\"status_descriptions\" type=\"boolean\"&gt;false&lt;/attr&gt;\n      &lt;destroyonsale /&gt;\n      &lt;starteateffect type=\"script\"&gt;\n        do (this, \"eateffect\")\n        game.pov.currentbelly = this\n        game.pov.eateffcountdown = this.lastsfor\n        if (GetBoolean(this, \"cannothold\")) {\n          DropEverything\n        }\n        if (HasObject(this, \"specialattack\")) {\n          game.pov.equipped = this.specialattack\n        }\n      &lt;/starteateffect&gt;\n      &lt;endeateffect type=\"script\"&gt;\n        game.pov.currentbelly = null\n        if (HasScript(this, \"terminate\")) {\n          do (this, \"terminate\")\n        }\n        if (HasObject(this, \"specialattack\")) {\n          game.pov.equipped = fists\n        }\n        destroy (this.name)\n      &lt;/endeateffect&gt;\n  &lt;/type&gt;\n</code></pre>\n<p>The Edible Tab now needs updated as such to better include CombatLib... It can be found in CoreEditorObjectOptions3:</p>\n<pre><code>  &lt;tab&gt;\n    &lt;parent&gt;_ObjectEditor&lt;/parent&gt;\n    &lt;caption&gt;[EditorObjectOptionsEdible]&lt;/caption&gt;\n    &lt;mustnotinherit&gt;editor_room&lt;/mustnotinherit&gt;\n    &lt;onlydisplayif&gt;this.feature_edible&lt;/onlydisplayif&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;\n      &lt;caption&gt;[EditorObjectOptionsEdible2]&lt;/caption&gt;\n      &lt;types&gt;*=[TypeCannotEaten]; edible=[TypeCanEaten]; fungus=Fungus&lt;/types&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;attribute&gt;eathealth&lt;/attribute&gt;\n      &lt;caption&gt;[EditorObjectOptionsChangehealth]&lt;/caption&gt;\n      &lt;mustinherit&gt;edible&lt;/mustinherit&gt;\n      &lt;onlydisplayif&gt;game.showhealth or game.feature_DescriptionsTab&lt;/onlydisplayif&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;attribute&gt;eatmana&lt;/attribute&gt;\n      &lt;caption&gt;Change Mana by&lt;/caption&gt;\n      &lt;mustinherit&gt;edible&lt;/mustinherit&gt;\n      &lt;onlydisplayif&gt;game.feature_mana&lt;/onlydisplayif&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;attribute&gt;eatmsg&lt;/attribute&gt;\n      &lt;caption&gt;[EditorObjectOptionsMessageEat]&lt;/caption&gt;\n      &lt;nullable/&gt;\n      &lt;mustinherit&gt;edible&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;script&lt;/controltype&gt;\n      &lt;caption&gt;Eat Effect (what happens when eaten)&lt;/caption&gt;\n      &lt;attribute&gt;eateffect&lt;/attribute&gt;\n      &lt;mustinherit&gt;edible&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;label&lt;/controltype&gt;\n      &lt;caption&gt;Below are for use if the fungus has a turn-limited effect.&lt;/caption&gt;\n      &lt;mustinherit&gt;fungus&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Last for (turns)&lt;/caption&gt;\n      &lt;attribute&gt;lastsfor&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;fungus&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;script&lt;/controltype&gt;\n      &lt;caption&gt;Script to run when the effect has finished (remember to also include a message to describe any changes)&lt;/caption&gt;\n      &lt;attribute&gt;terminate&lt;/attribute&gt;\n      &lt;mustinherit&gt;fungus&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;checkbox&lt;/controltype&gt;\n      &lt;caption&gt;Cannot hold anything during effect?&lt;/caption&gt;\n      &lt;attribute&gt;cannothold&lt;/attribute&gt;\n      &lt;mustinherit&gt;fungus&lt;/mustinherit&gt;\n      &lt;nullable/&gt;\n    &lt;/control&gt;\n\n\n  &lt;/tab&gt;\n</code></pre>\n<p>And so as you review these type and tab changes (if you're familiar with CombatLib)  you can see that it uses something very similar to his lasting magic effect/potion effect system.</p>\n<p>The scripts on the fungus starteateffect and endeateffect are versions of startmagiceffect and endmagiceffect from the type \"magicaleffectprovider\"</p>\n<p>This means that in CombatStuff3.xml in the  \"attacktheplayerturnscript\"  you need to add some code similar to that which handles \"magiccountdown\"</p>\n<pre><code>        // Check for Edible effect expiring\n        if (not HasInt(game.pov, \"eateffcountdown\")) {\n          game.pov.eateffcountdown = 0\n        }\n        if (game.pov.eateffcountdown &gt; 0) {\n          game.pov.eateffcountdown = game.pov.eateffcountdown - 1\n          if (game.pov.eateffcountdown &lt; 1) {\n            do (game.pov.currentbelly, \"endeateffect\")\n          }\n        }\n</code></pre>\n<p>et voila!  You now have several CombatLib options related to your edibles which are easily adjustable in the editor:</p>\n<p>You can use the same exact health attribute to add/subtract from Hitpoints that was already in the core<br>\nYou can perform the same behaviors with a mana attribute<br>\nYou can give any edible an \"eateffect\" script</p>\n<p>You can turn your edible into a fungus by selecting \"fungus\" instead of \"edible\" in the dropdown and add the additional functionality of making the \"eateffect\" last a specified number of turns like a spell or potion.</p>\n<p>It also includes \"tastedesc\" description/script if you're using my senses or the updated weatherlib. You can delete that row if not wanting to use or change it if you've got your own senses worked out in your game.</p>\n<p>Also, to have the game recognize whether you've selected to use Shops, Combat, or Mana, etc. and update the appropriate attributes I've modified CoreStatusAttributes3 as follows:</p>\n<pre><code>  &lt;function name=\"InitStatusAttributes\"&gt;\n    &lt;![CDATA[\n    if (game.showscore) {\n      game.score = 0\n      if (game.statusattributes = null) {\n        game.statusattributes = NewStringDictionary()\n      }\n      dictionary add (game.statusattributes, \"score\", \"[Score]: !\")\n    }\n\n    if (game.feature_DescriptionsTab) {\n      game.pov.xp = 0\n      if (game.povstatusattributes = null) {\n        game.povstatusattributes = NewStringDictionary()\n      }\n      dictionary add (game.povstatusattributes, \"xp\", \"XP: !\")\n    }\n\n    if (game.showhealth) {\n      if (game.povstatusattributes = null) {\n        game.povstatusattributes = NewStringDictionary()\n      }\n      dictionary add (game.povstatusattributes, \"health\", \"[Health]: !%\")\n    }\n\n    if (game.feature_DescriptionsTab) {\n      if (game.povstatusattributes = null) {\n        game.povstatusattributes = NewStringDictionary()\n      }\n      dictionary add (game.povstatusattributes, \"hitpoints\", \"Hitpoints: !\")\n    }\n\n    if (game.feature_mana) {\n      game.pov.mana = 0\n      if (game.povstatusattributes = null) {\n        game.povstatusattributes = NewStringDictionary()\n      }\n      dictionary add (game.povstatusattributes, \"mana\", \"MP: !\")\n    }\n\n    if (game.showmoney) {\n      if (game.povstatusattributes = null) {\n        game.povstatusattributes = NewStringDictionary()\n      }\n      dictionary add (game.povstatusattributes, \"money\", \"[Money]: !\")\n    }\n    if (HasAttribute(game, \"feature_ShopLib\")) {\n      set (game, \"moneyformat\", \"£!1.2!\")\n    }\n    ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<p>I've also added some \"player\" combat controls to the combat tab based on following Pixie's documentation and attributes he tells you are available.</p>\n<pre><code>    &lt;!-- Player --&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;checkbox&lt;/controltype&gt;\n      &lt;caption&gt;Has venom glands?&lt;/caption&gt;\n      &lt;attribute&gt;haspoisonglands&lt;/attribute&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n    &lt;/control&gt; \n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Display when player tries to talk if this player object cannot talk&lt;/caption&gt;\n      &lt;attribute&gt;gagstring&lt;/attribute&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;objects&lt;/controltype&gt;\n      &lt;caption&gt;Starting Weapon&lt;/caption&gt;\n      &lt;attribute&gt;equipped&lt;/attribute&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;objects&lt;/controltype&gt;\n      &lt;caption&gt;Starting Shield&lt;/caption&gt;\n      &lt;attribute&gt;shield&lt;/attribute&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Starting Status effect&lt;/caption&gt;\n      &lt;attribute&gt;status&lt;/attribute&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Starting Hitpoints&lt;/caption&gt;\n      &lt;attribute&gt;hitpoints&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Starting Mana Points&lt;/caption&gt;\n      &lt;attribute&gt;mana&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;onlydisplayif&gt;game.feature_mana&lt;/onlydisplayif&gt; \n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Starting Mana Max&lt;/caption&gt;\n      &lt;attribute&gt;mana_max&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;onlydisplayif&gt;game.feature_mana&lt;/onlydisplayif&gt; \n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\t\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Starting Mana Bonus&lt;/caption&gt;\n      &lt;attribute&gt;mana_bonus&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;onlydisplayif&gt;game.feature_mana&lt;/onlydisplayif&gt; \n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Default Strength&lt;/caption&gt;\n      &lt;attribute&gt;strength&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Default Agility&lt;/caption&gt;\n      &lt;attribute&gt;agility&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Default Stamina&lt;/caption&gt;\n      &lt;attribute&gt;stamina&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Default Intelligence&lt;/caption&gt;\n      &lt;attribute&gt;intelligence&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;editor_player&lt;/mustinherit&gt;\n      &lt;minimum&gt;1&lt;/minimum&gt;\n    &lt;/control&gt;\n</code></pre>\n<p>Eventually I'll work out the best way to integrate the recipe/venom system so that creators who wish to use that functionality that Pixie created don't have to work so hard to made additional recipes and venom.  It's on a to-do list, but so are many other things that look more fun to me.  For now, player venom is easy to toggle, congratulations, you can spit on your weapon now.</p>\n<p>I'm also planning to work out the best way to deal with \"fists\" in case creators want to easily change/modify the default \"unequipped\" attack object.</p>\n<p>Have added to the editor on \"CoreEditorGame3.aslx\" so that you can easily add/remove status attribute names in the dictionary that Pixie has you set up in the documentation.  It's now on the Player tab:</p>\n<pre><code>    &lt;tab&gt;\n      &lt;caption&gt;[EditorGamePlayer]&lt;/caption&gt;\n      &lt;advanced/&gt;\n\n      &lt;control&gt;\n        &lt;caption&gt;[EditorGamePlayerobject]&lt;/caption&gt;\n        &lt;attribute&gt;pov&lt;/attribute&gt;\n        &lt;controltype&gt;objects&lt;/controltype&gt;\n        &lt;advanced/&gt;\n      &lt;/control&gt;\n\n      &lt;control&gt;\n        &lt;onlydisplayif&gt;game.pov = null&lt;/onlydisplayif&gt;\n        &lt;advanced/&gt;\n        &lt;controltype&gt;label&lt;/controltype&gt;\n        &lt;caption&gt;[EditorGameIfnoplayer]&lt;/caption&gt;\n      &lt;/control&gt;\n\n      &lt;control&gt;\n        &lt;controltype&gt;script&lt;/controltype&gt;\n        &lt;attribute&gt;onhealthzero&lt;/attribute&gt;\n        &lt;onlydisplayif&gt;game.showhealth&lt;/onlydisplayif&gt;\n        &lt;caption&gt;[EditorGameScripttorun]&lt;/caption&gt;\n      &lt;/control&gt;\n\n      &lt;control&gt;\n        &lt;controltype&gt;textbox&lt;/controltype&gt;\n        &lt;caption&gt;[EditorGameMoneyformat]&lt;/caption&gt;\n        &lt;attribute&gt;moneyformat&lt;/attribute&gt;\n        &lt;onlydisplayif&gt;game.showmoney&lt;/onlydisplayif&gt;\n        &lt;width&gt;50&lt;/width&gt;\n      &lt;/control&gt;\n      \n      &lt;control&gt;\n        &lt;controltype&gt;stringdictionary&lt;/controltype&gt;\n        &lt;caption&gt;[EditorGamePlayerobjectStatus]&lt;/caption&gt;\n        &lt;keyprompt&gt;[EditorGameAttributesPleaseenter]&lt;/keyprompt&gt;\n        &lt;valueprompt&gt;[EditorGameAttributesPleaseenter2]&lt;/valueprompt&gt;\n        &lt;attribute&gt;povstatusattributes&lt;/attribute&gt;\n        &lt;advanced/&gt;\n      &lt;/control&gt;\n      &lt;control&gt;\n        &lt;controltype&gt;stringdictionary&lt;/controltype&gt;\n        &lt;caption&gt;Stat Names&lt;/caption&gt;\n        &lt;keyprompt&gt;attribute name&lt;/keyprompt&gt;\n        &lt;valueprompt&gt;Name for attribute player sees&lt;/valueprompt&gt;\n        &lt;attribute&gt;statnames&lt;/attribute&gt;\n        &lt;advanced/&gt;\n      &lt;/control&gt;\n    &lt;/tab&gt;\n</code></pre>\n<p>And checked that ondeath mechanism incorporates xp</p>\n<p>I wanted to make a help commands editor, but it's currently beyond me.  If anyone knows how to create controls in the game object editors that would be able to override commands?  Otherwise, it might just be that people have to override those the \"hard\" way.</p>\n<p>But if Pixie mentioned in his documentation to create or override a script, I've already added them or plan to add them to the editors in the appropriate places.</p>\n<p>Anyway, here's hoping that this stuff is interesting/useful to someone.</p>\n\n",
      "PostDate": "2023-11-27T05:08:48.7331539Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1ca68dfa-fa01-4805-aca6-63e5d680ee99",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Finally having some time to work on these integrations again.  So much fun and so much of a learning experience for me personally!\r\n\r\nSo the ChangePOV function was created without the full CombatLib from Pixie in mind.  In order to switch to another player object when using CombatLib, you need to update InitPOV function so that it does the portions of CombatInitialise function from Pixie's library that set important attributes from game.pov .\r\n\r\nAlso, in my integrated library, I've created controls for the Combat Tab on \"Player\" objects so that you can now have a default attack other than fists.   This is great for creating something like an animal or monster that the player can become.  Took a little figuring, out, but now I can set \"claws\" as an invisible object-weapon-attribute with the cat as a parent and when player becomes parent, game.pov \"defaultunequipped\" is now \"claws\" instead of whatever it used to be.  I also added for fun a \"defaultequipped\" in case you want someone to start out with a sword, etc.\r\n\r\nThis of course also required an update to the ChangeEquiped change script on weapon types so that it checks for the new attribute \"defaultunequipped\" and modification to the player type so that it's defaultunequipped is \"fists\"\r\n\r\nI'll also need to update DropEverything to check defaultunequipped, and Endmagiceffect and the weapon-type's unequip script.  maybe scriptholder's changedequip.  But it's worth the initial setup to add this feature I think.",
      "EditableFormat": "markdown",
      "HTML": "<p>Finally having some time to work on these integrations again.  So much fun and so much of a learning experience for me personally!</p>\n<p>So the ChangePOV function was created without the full CombatLib from Pixie in mind.  In order to switch to another player object when using CombatLib, you need to update InitPOV function so that it does the portions of CombatInitialise function from Pixie's library that set important attributes from game.pov .</p>\n<p>Also, in my integrated library, I've created controls for the Combat Tab on \"Player\" objects so that you can now have a default attack other than fists.   This is great for creating something like an animal or monster that the player can become.  Took a little figuring, out, but now I can set \"claws\" as an invisible object-weapon-attribute with the cat as a parent and when player becomes parent, game.pov \"defaultunequipped\" is now \"claws\" instead of whatever it used to be.  I also added for fun a \"defaultequipped\" in case you want someone to start out with a sword, etc.</p>\n<p>This of course also required an update to the ChangeEquiped change script on weapon types so that it checks for the new attribute \"defaultunequipped\" and modification to the player type so that it's defaultunequipped is \"fists\"</p>\n<p>I'll also need to update DropEverything to check defaultunequipped, and Endmagiceffect and the weapon-type's unequip script.  maybe scriptholder's changedequip.  But it's worth the initial setup to add this feature I think.</p>\n\n",
      "PostDate": "2024-01-07T04:48:21.3575122Z",
      "LastEditDate": "2024-01-07T04:55:47.5459971Z",
      "link": null
    },
    {
      "PostId": "f69067a2-e596-4e5a-9c15-ee084d789ad5",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looking at updating initPOV, I decided it might actually better to create a function which acts like a sort of patch.  It can be called just after changePOV to do the additional needed \"housekeeping.\"   I'll do upgrades to it as I find more things that need to be added to game.pov after the switch with all the libraries integrated.  For now it looks like this:\r\n\r\n```\r\n  <function name=\"Core3InitPOVpatch\">\r\n    if (game.showmoney) {\r\n      if (not HasScript (game.pov, \"changedmoney\")) {\r\n        game.pov.changedmoney = scriptholder.changedmoney\r\n      }\r\n    }\r\n    if (game.feature_DescriptionsTab) {\r\n      if (not HasScript (game.pov, \"changedhitpoints\")) {\r\n        game.pov.changedhitpoints = scriptholder.changedhitpoints\r\n      }\r\n      if (not HasScript (game.pov, \"changedequipped\")) {\r\n        game.pov.changedequipped = scriptholder.changedequipped\r\n      }\r\n      if (not HasScript (game.pov, \"changedshield\")) {\r\n        game.pov.changedshield = scriptholder.changedshield\r\n      }\r\n      atts = \"money;turncount;armour;armour10;stamina;xp;ob_bonus;next_round_ob_bonus;db_bonus;defence;magiccurse;sneaklevel;magiccountdown\"\r\n      atts = atts + \";attackbonus;defencebonus;armourbonus;magicbonus;damagebonus\"\r\n      atts = atts + \";strength;agility;stamina;intelligence;pointsleft\"\r\n      foreach (s, Split(atts, \";\")) {\r\n        if (not HasInt (game.pov, s)) {\r\n          set (game.pov, s, 0)\r\n        }\r\n      }\r\n      foreach (att, game.statnames) {\r\n        if (not HasInt(game.pov, att)) {\r\n          set (game.pov, att, 0)\r\n        }\r\n      }\r\n      game.pov.immunities = NewStringList()\r\n      game.pov.dead = false\r\n      UpdateStatusAttributes\r\n      UpdateStatus\r\n      UpdateArmour\r\n      UpdateHitPoints\r\n    }\r\n    if (game.feature_mana) {\r\n      SetMana\r\n    }\r\n  </function>\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Looking at updating initPOV, I decided it might actually better to create a function which acts like a sort of patch.  It can be called just after changePOV to do the additional needed \"housekeeping.\"   I'll do upgrades to it as I find more things that need to be added to game.pov after the switch with all the libraries integrated.  For now it looks like this:</p>\n<pre><code>  &lt;function name=\"Core3InitPOVpatch\"&gt;\n    if (game.showmoney) {\n      if (not HasScript (game.pov, \"changedmoney\")) {\n        game.pov.changedmoney = scriptholder.changedmoney\n      }\n    }\n    if (game.feature_DescriptionsTab) {\n      if (not HasScript (game.pov, \"changedhitpoints\")) {\n        game.pov.changedhitpoints = scriptholder.changedhitpoints\n      }\n      if (not HasScript (game.pov, \"changedequipped\")) {\n        game.pov.changedequipped = scriptholder.changedequipped\n      }\n      if (not HasScript (game.pov, \"changedshield\")) {\n        game.pov.changedshield = scriptholder.changedshield\n      }\n      atts = \"money;turncount;armour;armour10;stamina;xp;ob_bonus;next_round_ob_bonus;db_bonus;defence;magiccurse;sneaklevel;magiccountdown\"\n      atts = atts + \";attackbonus;defencebonus;armourbonus;magicbonus;damagebonus\"\n      atts = atts + \";strength;agility;stamina;intelligence;pointsleft\"\n      foreach (s, Split(atts, \";\")) {\n        if (not HasInt (game.pov, s)) {\n          set (game.pov, s, 0)\n        }\n      }\n      foreach (att, game.statnames) {\n        if (not HasInt(game.pov, att)) {\n          set (game.pov, att, 0)\n        }\n      }\n      game.pov.immunities = NewStringList()\n      game.pov.dead = false\n      UpdateStatusAttributes\n      UpdateStatus\n      UpdateArmour\n      UpdateHitPoints\n    }\n    if (game.feature_mana) {\n      SetMana\n    }\n  &lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2024-01-09T05:42:37.5108971Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b230ab4d-b3e2-4b63-8f1a-803110f4ea6a",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm making notes to update the above function with checks for creator-added attributes on the new POV as well.  There will have to be editor-tab updates to include scriptdictionary and something like a \"specatts\" attribute to have the change add and update as well.  This allows creators to make something like a \"cat\" which might have different attributes and stats than the original POV.\r\n\r\nNow that I see that the Core3InitPOVpatch function is essentially acting like the CombatInitialise for a POV switch, it might be something like having ChangePOV call specialized initialisation scripts after checking whether a library is being utilized via a checkbox on the Features tab.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm making notes to update the above function with checks for creator-added attributes on the new POV as well.  There will have to be editor-tab updates to include scriptdictionary and something like a \"specatts\" attribute to have the change add and update as well.  This allows creators to make something like a \"cat\" which might have different attributes and stats than the original POV.</p>\n<p>Now that I see that the Core3InitPOVpatch function is essentially acting like the CombatInitialise for a POV switch, it might be something like having ChangePOV call specialized initialisation scripts after checking whether a library is being utilized via a checkbox on the Features tab.</p>\n\n",
      "PostDate": "2024-03-03T01:31:40.7737784Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91e87381-d205-4869-aea3-302994cc9224",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> it might be something like having ChangePOV call specialized initialisation scripts after checking whether a library is being utilized via a checkbox on the Features tab.\r\n\r\nI think it shouldn't be called from ChangePOV.\r\n\r\nIf your function needs to be called whenever the pov changes, you should call it from `game.changedpov`",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>it might be something like having ChangePOV call specialized initialisation scripts after checking whether a library is being utilized via a checkbox on the Features tab.</p>\n</blockquote>\n<p>I think it shouldn't be called from ChangePOV.</p>\n<p>If your function needs to be called whenever the pov changes, you should call it from <code>game.changedpov</code></p>\n\n",
      "PostDate": "2024-03-03T14:10:37.6911215Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "224e83fa-791b-414a-9a76-b42d315aa616",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you MrAngel!\r\n\r\nThe changedPOV script on the defaultgame type had eluded me as part of this equation for so long!\r\n\r\nI think you're right.  Whatever patch function(s) end up being used should be added to the changed script on the game object.  \r\n\r\nI didn't even consider that there's a \"game\" type!  I'd been wondering how to update the game object with core integration changes, and have been doing weird things in initialisation scripts and start scripts.  These can maybe all be moved over to the game object as an attribute of the type like ChangedPOV.  These ChangedPOV patches called from ChangedPOV. (I don't know if anything other than CombatLib needs to be integrated that way yet, but I don't think so.)\r\n\r\nIt looks like these things need something like at least 2 components:\r\n an initialisation at game start if they're adding attributes to player/game that the library is constantly checking for\r\nsomething like an update to the changedpov script on the game object which makes sure needed attributes are updated upon POV change as well.\r\n\r\nThe example is from Pixie's CombatInitialise, but I do want to make it so that attributes any creator adds are also added to the POV during a change if they're needed.\r\n\r\nMrAngel, you're truly a gem and hero!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you MrAngel!</p>\n<p>The changedPOV script on the defaultgame type had eluded me as part of this equation for so long!</p>\n<p>I think you're right.  Whatever patch function(s) end up being used should be added to the changed script on the game object.</p>\n<p>I didn't even consider that there's a \"game\" type!  I'd been wondering how to update the game object with core integration changes, and have been doing weird things in initialisation scripts and start scripts.  These can maybe all be moved over to the game object as an attribute of the type like ChangedPOV.  These ChangedPOV patches called from ChangedPOV. (I don't know if anything other than CombatLib needs to be integrated that way yet, but I don't think so.)</p>\n<p>It looks like these things need something like at least 2 components:<br>\nan initialisation at game start if they're adding attributes to player/game that the library is constantly checking for<br>\nsomething like an update to the changedpov script on the game object which makes sure needed attributes are updated upon POV change as well.</p>\n<p>The example is from Pixie's CombatInitialise, but I do want to make it so that attributes any creator adds are also added to the POV during a change if they're needed.</p>\n<p>MrAngel, you're truly a gem and hero!</p>\n\n",
      "PostDate": "2024-03-03T20:19:25.6143074Z",
      "LastEditDate": "2024-03-03T20:47:48.9428445Z",
      "link": null
    },
    {
      "PostId": "78cdd8cd-807b-4524-b955-ba76365bc541",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One problem I've been working on is allowing the game creator to modify extant help commands from the integrated libraries.\r\n\r\nOne way might be to incorporate a system of delivering instructions in-editor for overriding the commands when feature checkboxes are ticked.  (maybe part of the tabs that go with those libraries).\r\n\r\nI was thinking of a \"Help Commands\" tab or an \"overrides\" tab on the game object.\r\n\r\nBut just recently I was seeing how Pixie's \"scriptholder\" object works in his CombatLib and wondered.\r\n\r\nIf copies of the script portion of the commands were attributes on the Game Object, and then there was a function that ran at start which \"initiated\" the custom commands by changing the extant command to incorporate the creator's script changes...\r\n\r\nwould that be easier or harder for the average user than simply overriding the commands and modifying them in the built-in editor?\r\n\r\nOr is there a way to automatically make an editable copy of a command when a feature checkbox is checked (overriding it)?\r\n\r\nIt took me an embarrassingly long amount of time to discover the override feature, and I was going back to original files to change things and see if it worked and saving test version files rather than overriding within a test game. (SMH)\r\n\r\nI feel like there's a few things I'm learning backwards or in less-efficient order than maybe I should.  But it's simply fun for me to learn either way.",
      "EditableFormat": "markdown",
      "HTML": "<p>One problem I've been working on is allowing the game creator to modify extant help commands from the integrated libraries.</p>\n<p>One way might be to incorporate a system of delivering instructions in-editor for overriding the commands when feature checkboxes are ticked.  (maybe part of the tabs that go with those libraries).</p>\n<p>I was thinking of a \"Help Commands\" tab or an \"overrides\" tab on the game object.</p>\n<p>But just recently I was seeing how Pixie's \"scriptholder\" object works in his CombatLib and wondered.</p>\n<p>If copies of the script portion of the commands were attributes on the Game Object, and then there was a function that ran at start which \"initiated\" the custom commands by changing the extant command to incorporate the creator's script changes...</p>\n<p>would that be easier or harder for the average user than simply overriding the commands and modifying them in the built-in editor?</p>\n<p>Or is there a way to automatically make an editable copy of a command when a feature checkbox is checked (overriding it)?</p>\n<p>It took me an embarrassingly long amount of time to discover the override feature, and I was going back to original files to change things and see if it worked and saving test version files rather than overriding within a test game. (SMH)</p>\n<p>I feel like there's a few things I'm learning backwards or in less-efficient order than maybe I should.  But it's simply fun for me to learn either way.</p>\n\n",
      "PostDate": "2024-03-03T20:29:20.0890815Z",
      "LastEditDate": "2024-03-03T20:31:12.4365234Z",
      "link": null
    },
    {
      "PostId": "ec631d5f-75c9-4003-a850-80495d7c86de",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, had been overthinking a bit with the idea of creating a separate patch for the POV changing.\r\n\r\nAfter re-looking at MrAngel's  advice and where to stick the patch, and re-looking at what the patch is made of, essentially rather than a \"patch\" the game.changedpov would only need to call the initialisation functions from any library like CombatLib's Combatinitialise again.  Or maybe call a modified version of them.  \r\n\r\nI'll have to check carefully, but I think it might be as simple as adding combatinitialise to be called by changedpov in this case.",
      "EditableFormat": "markdown",
      "HTML": "<p>So, had been overthinking a bit with the idea of creating a separate patch for the POV changing.</p>\n<p>After re-looking at MrAngel's  advice and where to stick the patch, and re-looking at what the patch is made of, essentially rather than a \"patch\" the game.changedpov would only need to call the initialisation functions from any library like CombatLib's Combatinitialise again.  Or maybe call a modified version of them.</p>\n<p>I'll have to check carefully, but I think it might be as simple as adding combatinitialise to be called by changedpov in this case.</p>\n\n",
      "PostDate": "2024-03-10T19:48:00.7423275Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "39ff6887-497c-45ce-b32c-805841fdf951",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mr. Angel was giving me some advice on integrating the WeatherLib into the core in a thread on a different topic here https://textadventures.co.uk/forum/quest/topic/tdkgofzjmeyuet_c10vvta/no-verb-objectobject-on-hover\r\n\r\nI also just remembered as I was about to start work the entire reason why the weather objects follow the POV around in the game.  they're background objects where the look scripts read attributes off of game.currentweather.   That's how the game creator customizes the different \"lightning\" or \"rain\" or whatever interactions to line up with their weather room.  Then whatever \"currentweather\" is set, a \"look\", \"touch,\" \"taste,\" etc. for these objects reads off game.currentweather's settings for the weather.\r\n\r\nSo customizing whether these objects move into the room with the player or not for an individual room may or may not be redundant.  If someone didn't set the weather room's \"taste rainbow\" script to either print something, or do something, then the default is already pre-programmed as if there's no rainbow in the room for any actions on the rainbow.\r\n\r\nStill, it might be handy if someone wanted to simply not have the objects there, rather than have a bunch of pre-programmed defaults in case the user tried to look at the snow, etc.  It would go back to the game default for looking at things that aren't objects in the room.  At any rate, I'm liking the idea of moving many of the weather turnscripts and functions to outside or windowed typed rooms rather than having them set to run every game turn by default and do nothing only if a room is flagged \"inside.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>Mr. Angel was giving me some advice on integrating the WeatherLib into the core in a thread on a different topic here https://textadventures.co.uk/forum/quest/topic/tdkgofzjmeyuet_c10vvta/no-verb-objectobject-on-hover</p>\n<p>I also just remembered as I was about to start work the entire reason why the weather objects follow the POV around in the game.  they're background objects where the look scripts read attributes off of game.currentweather.   That's how the game creator customizes the different \"lightning\" or \"rain\" or whatever interactions to line up with their weather room.  Then whatever \"currentweather\" is set, a \"look\", \"touch,\" \"taste,\" etc. for these objects reads off game.currentweather's settings for the weather.</p>\n<p>So customizing whether these objects move into the room with the player or not for an individual room may or may not be redundant.  If someone didn't set the weather room's \"taste rainbow\" script to either print something, or do something, then the default is already pre-programmed as if there's no rainbow in the room for any actions on the rainbow.</p>\n<p>Still, it might be handy if someone wanted to simply not have the objects there, rather than have a bunch of pre-programmed defaults in case the user tried to look at the snow, etc.  It would go back to the game default for looking at things that aren't objects in the room.  At any rate, I'm liking the idea of moving many of the weather turnscripts and functions to outside or windowed typed rooms rather than having them set to run every game turn by default and do nothing only if a room is flagged \"inside.\"</p>\n\n",
      "PostDate": "2024-03-29T20:21:46.6099125Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cc209b5b-197a-4b18-9093-aaf41bc631bd",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok!  So I've done a very lot of integrating CombatLib into the Core3.  Creating the features checkboxes and calling the combatinitialise if checked.\r\n\r\nThen I integrated the correct core files to call what was left of the original html files after much of it was moved to other places, like core functions, etc. \r\n\r\nI created editor controls for the non-coders to update hitpoints, mana, etc.  I created controls on the \"Descriptions\" and \"Combat\" tabs that toggle on based on whether advanced descriptions and combat is enabled, and also whether each individual object has the feature \"combat object.\"\r\n\r\nFunctions that Pixie describes in the documentation as \"should\" or \"optional\" to override are added to the editors with his instructions.\r\n\r\nAlso, I created \"ammo\" and \"rangedweapon\" types, so that the barely-started ammo system can be added.  Plus additional controls.  At the moment, these weapons don't have a system which modifies attack based on range and cover.  But the system is designed to utilize the \"out of ammo\" idea that Pixie made.   \r\n\r\nModified \"outofammo\" and also created \"Load firearm\" and \"Charge Magicweapon/item\" functions that are called by a load/charge command.\r\n\r\nRanged weapons that are flagged \"bowtype\" or \"projectiletype\" instead of magic or firearm have an auto-load 1 by 1 system which is inherent on the types changedammo, ammosource, changedhasammosource types.   A \"nothingammo\" object has been added to be the new \"empty\" ammosource for rangedweapon types.    \r\n\r\nAlso modified slightly the \"doattack\" script on the monster type, adding \"FireRangedWeapon\" function.\r\n\r\nStill polishing and double-checking a bit.  Will test before I share/release the whole thing with credits to all library creators and code contributors.\r\n\r\nAlso working on adding some of the other best libraries of Pixie et al as integrated \"feature\" choices.  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok!  So I've done a very lot of integrating CombatLib into the Core3.  Creating the features checkboxes and calling the combatinitialise if checked.</p>\n<p>Then I integrated the correct core files to call what was left of the original html files after much of it was moved to other places, like core functions, etc.</p>\n<p>I created editor controls for the non-coders to update hitpoints, mana, etc.  I created controls on the \"Descriptions\" and \"Combat\" tabs that toggle on based on whether advanced descriptions and combat is enabled, and also whether each individual object has the feature \"combat object.\"</p>\n<p>Functions that Pixie describes in the documentation as \"should\" or \"optional\" to override are added to the editors with his instructions.</p>\n<p>Also, I created \"ammo\" and \"rangedweapon\" types, so that the barely-started ammo system can be added.  Plus additional controls.  At the moment, these weapons don't have a system which modifies attack based on range and cover.  But the system is designed to utilize the \"out of ammo\" idea that Pixie made.</p>\n<p>Modified \"outofammo\" and also created \"Load firearm\" and \"Charge Magicweapon/item\" functions that are called by a load/charge command.</p>\n<p>Ranged weapons that are flagged \"bowtype\" or \"projectiletype\" instead of magic or firearm have an auto-load 1 by 1 system which is inherent on the types changedammo, ammosource, changedhasammosource types.   A \"nothingammo\" object has been added to be the new \"empty\" ammosource for rangedweapon types.</p>\n<p>Also modified slightly the \"doattack\" script on the monster type, adding \"FireRangedWeapon\" function.</p>\n<p>Still polishing and double-checking a bit.  Will test before I share/release the whole thing with credits to all library creators and code contributors.</p>\n<p>Also working on adding some of the other best libraries of Pixie et al as integrated \"feature\" choices.</p>\n\n",
      "PostDate": "2024-05-14T03:28:09.0292428Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8250b11d-d429-4ba2-8627-843dc588615c",
      "UserId": 698839,
      "Username": "John Dino",
      "AvatarUrl": "https://secure.gravatar.com/avatar/de801aa651a293b06e7ff7518009db9b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Integrating libraries into the core of Quest sounds like a fantastic way to enhance the gaming experience! I love how libraries can bring depth and richness to interactive storytelling. It’s always fun to see how different elements can be combined to create something unique. I’ve been tinkering with some projects myself, and sometimes the writing https://99papers.com/ side can be a bit overwhelming. When I was in that boat, I found a great resource that helped streamline my writing process and improve my overall workflow. It made a huge difference in getting my ideas down clearly and effectively. It’s all about finding the right tools to help you focus on what you love most—creating amazing content! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Integrating libraries into the core of Quest sounds like a fantastic way to enhance the gaming experience! I love how libraries can bring depth and richness to interactive storytelling. It’s always fun to see how different elements can be combined to create something unique. I’ve been tinkering with some projects myself, and sometimes the writing https://99papers.com/ side can be a bit overwhelming. When I was in that boat, I found a great resource that helped streamline my writing process and improve my overall workflow. It made a huge difference in getting my ideas down clearly and effectively. It’s all about finding the right tools to help you focus on what you love most—creating amazing content!</p>\n\n",
      "PostDate": "2024-10-16T22:09:16.0923932Z",
      "LastEditDate": "2024-10-22T09:26:26.1558989Z",
      "link": null
    }
  ]
}
