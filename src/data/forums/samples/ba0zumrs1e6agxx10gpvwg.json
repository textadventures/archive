{
  "Topic": {
    "TopicId": "ba0zumrs1e6agxx10gpvwg",
    "ForumId": "18",
    "Title": "Messing about with inventory panes",
    "LastUpdated": "2018-02-14T19:45:54.8265302Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9fa17b8c-4ffc-45c5-b8a6-af65262018d2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey :D\r\n\r\nI've been playing around with the character creation system for my latest game. In this game, the character classes are objects you can pick up, and when you use the \"Wake up\" command, all the ones currently in your inventory have their stats applied to the player.\r\n\r\nAs part of this, I've done some mucking about with the JS function updateList. I'm sure nobody will want to use this as it is; but my modified updateList might be useful as a base for building other things. Basically, the inventory pane is renamed \"character creation\", and the \"Places and Objects\" pane is hidden. Instead of being added to a list in the sidebar, it creates a `<div/>` for each available object.\r\n\r\nThe default updateList clears the pane and then fills it with the current items every time you refresh. But as chargen is a trippy dream sequence (\"pick yourself from the images swirling around you\") I decided to make the items swirl around the screen. So I modified it to only create new elements for new items, and to remove them when you can no longer see them. This allows me to give these divs to the jQuery `.spiral` animation plugin, and not have them be destroyed and recreated every turn.\r\n\r\n```\r\n(function() {\r\n  var realUpdateList = updateList;\r\n  startCharGen = function () {\r\n    $(\"#inventoryLabel .accordion-header-text\").text(\"Character Creation\");\r\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").hide();\r\n    updateList = function (listName, listData) {\r\n      console.log(\"Update called for \"+listName+\"\\n\");\r\n      if (listName == \"inventory\") {\r\n        console.log(\"  Calling real list\\n\");\r\n        realUpdateList(listName, listData);\r\n      } else {\r\n        console.log(\"Is this called?\\n\");\r\n        $(\".cc-spiral\").attr(\"toremove\", \"true\");\r\n        $.each(listData, function (key, value) {\r\n          var data = JSON.parse(value);\r\n          var objectid = \"cc_object_\" + data[\"ElementId\"].replace(/\\W/g, \"\");\r\n          console.log(\" searching for \"+objectid+\"!\\n\");\r\n          var item = $(\"#\"+objectid);\r\n          if (item.length » 0) {\r\n            console.log(\"  found element \"+objectid+\"!\\n\");\r\n            item.removeAttr(\"toremove\");\r\n          } else {\r\n            console.log(\"  Not found element \"+objectid+\"!\\n\");\r\n            item = $(\"«div/»\", {class: \"cc-spiral\", id: objectid}).appendTo(\"#gameBorder\");\r\n            console.log (item);\r\n            console.log (\"Did that work?\\n\");\r\n          }\r\n          item.data(data).html(data[\"Text\"]);\r\n        });\r\n        $(\".cc-spiral[toremove]\").each(function (i) {console.log(\"Removing element \"+this.id+\"!\\n\");} );\r\n        $(\".cc-spiral[toremove]\").remove();\r\n      }\r\n    };\r\n  };\r\n  endCharGen = function () {\r\n    $(\"#inventoryLabel .accordion-header-text\").text(\"I'm holding…\");\r\n    $(\"#placesObjectsLabel .accordion-header-text\").text(\"I can see…\");\r\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").show();\r\n    $(\".cc-spiral\").remove();\r\n    updateList = realUpdateList;\r\n    delete startCharGen;\r\n    delete endCharGen;\r\n  };\r\n})();\r\n```\r\n\r\nNext challenge will be the verbs list :-p",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey :D</p>\n<p>I've been playing around with the character creation system for my latest game. In this game, the character classes are objects you can pick up, and when you use the \"Wake up\" command, all the ones currently in your inventory have their stats applied to the player.</p>\n<p>As part of this, I've done some mucking about with the JS function updateList. I'm sure nobody will want to use this as it is; but my modified updateList might be useful as a base for building other things. Basically, the inventory pane is renamed \"character creation\", and the \"Places and Objects\" pane is hidden. Instead of being added to a list in the sidebar, it creates a <code>&lt;div/&gt;</code> for each available object.</p>\n<p>The default updateList clears the pane and then fills it with the current items every time you refresh. But as chargen is a trippy dream sequence (\"pick yourself from the images swirling around you\") I decided to make the items swirl around the screen. So I modified it to only create new elements for new items, and to remove them when you can no longer see them. This allows me to give these divs to the jQuery <code>.spiral</code> animation plugin, and not have them be destroyed and recreated every turn.</p>\n<pre><code>(function() {\n  var realUpdateList = updateList;\n  startCharGen = function () {\n    $(\"#inventoryLabel .accordion-header-text\").text(\"Character Creation\");\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").hide();\n    updateList = function (listName, listData) {\n      console.log(\"Update called for \"+listName+\"\\n\");\n      if (listName == \"inventory\") {\n        console.log(\"  Calling real list\\n\");\n        realUpdateList(listName, listData);\n      } else {\n        console.log(\"Is this called?\\n\");\n        $(\".cc-spiral\").attr(\"toremove\", \"true\");\n        $.each(listData, function (key, value) {\n          var data = JSON.parse(value);\n          var objectid = \"cc_object_\" + data[\"ElementId\"].replace(/\\W/g, \"\");\n          console.log(\" searching for \"+objectid+\"!\\n\");\n          var item = $(\"#\"+objectid);\n          if (item.length » 0) {\n            console.log(\"  found element \"+objectid+\"!\\n\");\n            item.removeAttr(\"toremove\");\n          } else {\n            console.log(\"  Not found element \"+objectid+\"!\\n\");\n            item = $(\"«div/»\", {class: \"cc-spiral\", id: objectid}).appendTo(\"#gameBorder\");\n            console.log (item);\n            console.log (\"Did that work?\\n\");\n          }\n          item.data(data).html(data[\"Text\"]);\n        });\n        $(\".cc-spiral[toremove]\").each(function (i) {console.log(\"Removing element \"+this.id+\"!\\n\");} );\n        $(\".cc-spiral[toremove]\").remove();\n      }\n    };\n  };\n  endCharGen = function () {\n    $(\"#inventoryLabel .accordion-header-text\").text(\"I'm holding…\");\n    $(\"#placesObjectsLabel .accordion-header-text\").text(\"I can see…\");\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").show();\n    $(\".cc-spiral\").remove();\n    updateList = realUpdateList;\n    delete startCharGen;\n    delete endCharGen;\n  };\n})();\n</code></pre>\n<p>Next challenge will be the verbs list :-p</p>\n\n",
      "PostDate": "2018-02-14T19:45:54.8265302Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "138dc7ed-647c-4b3d-af4c-d0e0cae67e58",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(in pseudocode, it may be clearer to understand what I'm doing.\r\n\r\nExisting updateList:\r\n* Get the name of the currently selected item\r\n* Empty the pane\r\n* Loop over the items in listData\r\n  * Create a new `<li/>` for each\r\n  * If its name matches the selected one…\r\n    * …make it selected\r\n* If we didn't select one\r\n  * Hide the verbsList\r\n\r\nMy version (excluding all the stuff to call the default version for the inventory, etc):\r\n* Set a `toremove` attribute on all `<div/>`s that have the appropriate class\r\n* Loop over the items in listData\r\n  * If a `<div/>` exists for each\r\n    * Remove its \"toremove\" attribute\r\n  * else\r\n    * Create that `<div/>`\r\n* Delete everything that still has a \"toremove\" attribute\r\n\r\nI figure that this way could be useful in some cases, because if you're doing any kind of javascripty thing (or even just have an animated GIF as part of the listalias), it doesn't delete and then recreate items that are still visible.\r\nHeck, you could even 'animate' it so that objects removed from 'Places and Objects' and added to 'Inventory' fly from one list to the other :p That's a bit of silliness that would take more effort than it's worth for me, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>(in pseudocode, it may be clearer to understand what I'm doing.</p>\n<p>Existing updateList:</p>\n<ul>\n<li>Get the name of the currently selected item</li>\n<li>Empty the pane</li>\n<li>Loop over the items in listData\n<ul>\n<li>Create a new <code>&lt;li/&gt;</code> for each</li>\n<li>If its name matches the selected one…\n<ul>\n<li>…make it selected</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If we didn't select one\n<ul>\n<li>Hide the verbsList</li>\n</ul>\n</li>\n</ul>\n<p>My version (excluding all the stuff to call the default version for the inventory, etc):</p>\n<ul>\n<li>Set a <code>toremove</code> attribute on all <code>&lt;div/&gt;</code>s that have the appropriate class</li>\n<li>Loop over the items in listData\n<ul>\n<li>If a <code>&lt;div/&gt;</code> exists for each\n<ul>\n<li>Remove its \"toremove\" attribute</li>\n</ul>\n</li>\n<li>else\n<ul>\n<li>Create that <code>&lt;div/&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Delete everything that still has a \"toremove\" attribute</li>\n</ul>\n<p>I figure that this way could be useful in some cases, because if you're doing any kind of javascripty thing (or even just have an animated GIF as part of the listalias), it doesn't delete and then recreate items that are still visible.<br>\nHeck, you could even 'animate' it so that objects removed from 'Places and Objects' and added to 'Inventory' fly from one list to the other :p That's a bit of silliness that would take more effort than it's worth for me, though.</p>\n\n",
      "PostDate": "2018-02-14T20:31:41.3393571Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff55b4b1-0b59-4ba3-a9d4-af70258a09a5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK :D This is pretty much as I want it.\r\n\r\nI know it's not a common thing, but maybe someone will appreciate it :p Try putting this in a game, then calling `JS.startCharGen()` and `JS.endCharGen()`. Kind of trippy? I think it works for me because it fits the theme of my game.\r\n\r\n(Note - using my version of the JS-in-web-editor script. So searchreplace `«` to `<` and `»` to `>` to make this work in a standard JS file)\r\n```\r\n(function() {\r\n  var realUpdateList = updateList;\r\n  startCharGen = function () {\r\n    $(\"#inventoryLabel .accordion-header-text\").text(\"Character Creation\");\r\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").hide();\r\n\r\n    updateList = function (listName, listData) {\r\n      if (listName == \"inventory\") {\r\n        realUpdateList(listName, listData);\r\n      } else {\r\n        $(\".cc-spiral\").attr(\"toremove\", \"true\");\r\n        $.each(listData, function (key, value) {\r\n          var data = JSON.parse(value);\r\n          var objectid = \"cc_object_\" + data[\"ElementId\"].replace(/\\W/g, \"\");\r\n          var item = $(\"#\"+objectid);\r\n          if (item.length » 0) {\r\n            item.removeAttr(\"toremove\").data(data).html(data[\"Text\"]);\r\n          } else {\r\n            item = $(\"«div/»\", {class: \"cc-spiral\", id: objectid}).data(data).html(data[\"Text\"]).appendTo(\"#gameBorder\");\r\n            startSpiral(item);\r\n          }\r\n        });\r\n        $(\".cc-spiral[toremove]\").attr(\"toremove\", \"confirmed\");\r\n      }\r\n    };\r\n\r\n  };\r\n\r\n  endCharGen = function () {\r\n    $(\"#inventoryLabel .accordion-header-text\").text(\"I'm holding…\");\r\n    $(\"#placesObjectsLabel .accordion-header-text\").text(\"I can see…\");\r\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").show();\r\n    $(\".cc-spiral\").hide();\r\n    updateList = realUpdateList;\r\n    delete startCharGen;\r\n    delete endCharGen;\r\n  };\r\n\r\n  var startpos = $(\"#inventoryAccordion\").offset();\r\n  function startSpiral(element) {\r\n    element.css({position:\"fixed\", left: startpos[\"left\"], top: startpos[\"top\"]});\r\n    var outer = $(\"«div/»\", {id: element.attr(\"id\")+\"_outer\"}).appendTo(element.parent());\r\n    outer.css({position:\"fixed\", left: startpos[\"left\"]+element.width()/2, top: startpos[\"top\"]+element.height(), marginTop: 0, marginBottom: Math.random() * 720});\r\n    var angle = Math.random() * 360;\r\n    startpos[\"top\"] += element.height();\r\n\r\n    function respiral() {\r\n      var top_limit = element.height() / 2;\r\n      var left_limit = element.width() / 2;\r\n      var bottom_limit = window.innerHeight - top_limit;\r\n      var right_limit = window.innerWidth - left_limit;\r\n\r\n      var width_avail = right_limit - left_limit;\r\n      var height_avail = bottom_limit - top_limit;\r\n      // using marginTop as radius, and marginBottom as delta-angle (in degrees)\r\n      angle = (angle + parseInt(outer.css(\"marginBottom\"))) % 360;\r\n      var mb = parseInt(outer.css(\"marginBottom\"));\r\n      var targets = {\r\n        top: top_limit + (0.5 + Math.random()) * (bottom_limit - top_limit) / 2,\r\n        left: left_limit + (0.5 + Math.random()) * (right_limit - left_limit) / 2,\r\n        marginBottom: ((mb«360)? 0 : 360) + Math.random() * 360\r\n      };\r\n      outer.css(\"marginBottom\", 360);\r\n      targets[\"marginTop\"] = Math.min(\r\n        right_limit - targets[\"left\"],\r\n        targets[\"left\"] - left_limit,\r\n        targets[\"top\"] - top_limit,\r\n        bottom_limit - targets[\"top\"]\r\n      );\r\n\r\n      outer.animate(targets, {\r\n        specialEasing: {top: \"swing\", left: \"swing\", marginTop: \"swing\", marginBottom: \"linear\"},\r\n        duration: 2000 + Math.random() * 3000,\r\n        progress: function (promise, i) {\r\n          var radius = parseInt(outer.css(\"marginTop\"));\r\n          var delta = parseInt(outer.css(\"marginBottom\"));\r\n          if (element.attr(\"toremove\") == \"confirmed\") {\r\n            outer.stop();\r\n            outer.remove();\r\n            element.remove();\r\n          } else {\r\n            var setting = {\r\n              top: parseInt(outer.css(\"top\")) + radius*Math.sin((angle+delta) * Math.PI/180) - element.height()/2,\r\n              left: parseInt(outer.css(\"left\")) + radius*Math.cos((angle+delta) * Math.PI/180) - element.width()/2\r\n            };\r\n            element.css(setting);\r\n          }\r\n        },\r\n        complete: function() {\r\n          if (element.attr(\"toremove\") == \"confirmed\") {\r\nconsole.log(\"Stopping \"+outer.attr(\"id\")+\" weirdly!\\n\");\r\n            outer.remove();\r\n            element.remove();\r\n          } else {\r\n            respiral();\r\n          }\r\n        }\r\n      });\r\n    }\r\n    respiral();\r\n  }\r\n})();\r\n```\r\n\r\n(Also, if you haven't played with a language that does closures before, see if you can understand what I'm doing here. And I _know_ that this has a horrible memory leak; I need to fix that still)\r\n\r\nEDIT: No it doesn't. I _think_ everything's in scope where it should be.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK :D This is pretty much as I want it.</p>\n<p>I know it's not a common thing, but maybe someone will appreciate it :p Try putting this in a game, then calling <code>JS.startCharGen()</code> and <code>JS.endCharGen()</code>. Kind of trippy? I think it works for me because it fits the theme of my game.</p>\n<p>(Note - using my version of the JS-in-web-editor script. So searchreplace <code>«</code> to <code>&lt;</code> and <code>»</code> to <code>&gt;</code> to make this work in a standard JS file)</p>\n<pre><code>(function() {\n  var realUpdateList = updateList;\n  startCharGen = function () {\n    $(\"#inventoryLabel .accordion-header-text\").text(\"Character Creation\");\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").hide();\n\n    updateList = function (listName, listData) {\n      if (listName == \"inventory\") {\n        realUpdateList(listName, listData);\n      } else {\n        $(\".cc-spiral\").attr(\"toremove\", \"true\");\n        $.each(listData, function (key, value) {\n          var data = JSON.parse(value);\n          var objectid = \"cc_object_\" + data[\"ElementId\"].replace(/\\W/g, \"\");\n          var item = $(\"#\"+objectid);\n          if (item.length » 0) {\n            item.removeAttr(\"toremove\").data(data).html(data[\"Text\"]);\n          } else {\n            item = $(\"«div/»\", {class: \"cc-spiral\", id: objectid}).data(data).html(data[\"Text\"]).appendTo(\"#gameBorder\");\n            startSpiral(item);\n          }\n        });\n        $(\".cc-spiral[toremove]\").attr(\"toremove\", \"confirmed\");\n      }\n    };\n\n  };\n\n  endCharGen = function () {\n    $(\"#inventoryLabel .accordion-header-text\").text(\"I'm holding…\");\n    $(\"#placesObjectsLabel .accordion-header-text\").text(\"I can see…\");\n    $(\"#placesObjectsLabel,#placesObjectsAccordion\").show();\n    $(\".cc-spiral\").hide();\n    updateList = realUpdateList;\n    delete startCharGen;\n    delete endCharGen;\n  };\n\n  var startpos = $(\"#inventoryAccordion\").offset();\n  function startSpiral(element) {\n    element.css({position:\"fixed\", left: startpos[\"left\"], top: startpos[\"top\"]});\n    var outer = $(\"«div/»\", {id: element.attr(\"id\")+\"_outer\"}).appendTo(element.parent());\n    outer.css({position:\"fixed\", left: startpos[\"left\"]+element.width()/2, top: startpos[\"top\"]+element.height(), marginTop: 0, marginBottom: Math.random() * 720});\n    var angle = Math.random() * 360;\n    startpos[\"top\"] += element.height();\n\n    function respiral() {\n      var top_limit = element.height() / 2;\n      var left_limit = element.width() / 2;\n      var bottom_limit = window.innerHeight - top_limit;\n      var right_limit = window.innerWidth - left_limit;\n\n      var width_avail = right_limit - left_limit;\n      var height_avail = bottom_limit - top_limit;\n      // using marginTop as radius, and marginBottom as delta-angle (in degrees)\n      angle = (angle + parseInt(outer.css(\"marginBottom\"))) % 360;\n      var mb = parseInt(outer.css(\"marginBottom\"));\n      var targets = {\n        top: top_limit + (0.5 + Math.random()) * (bottom_limit - top_limit) / 2,\n        left: left_limit + (0.5 + Math.random()) * (right_limit - left_limit) / 2,\n        marginBottom: ((mb«360)? 0 : 360) + Math.random() * 360\n      };\n      outer.css(\"marginBottom\", 360);\n      targets[\"marginTop\"] = Math.min(\n        right_limit - targets[\"left\"],\n        targets[\"left\"] - left_limit,\n        targets[\"top\"] - top_limit,\n        bottom_limit - targets[\"top\"]\n      );\n\n      outer.animate(targets, {\n        specialEasing: {top: \"swing\", left: \"swing\", marginTop: \"swing\", marginBottom: \"linear\"},\n        duration: 2000 + Math.random() * 3000,\n        progress: function (promise, i) {\n          var radius = parseInt(outer.css(\"marginTop\"));\n          var delta = parseInt(outer.css(\"marginBottom\"));\n          if (element.attr(\"toremove\") == \"confirmed\") {\n            outer.stop();\n            outer.remove();\n            element.remove();\n          } else {\n            var setting = {\n              top: parseInt(outer.css(\"top\")) + radius*Math.sin((angle+delta) * Math.PI/180) - element.height()/2,\n              left: parseInt(outer.css(\"left\")) + radius*Math.cos((angle+delta) * Math.PI/180) - element.width()/2\n            };\n            element.css(setting);\n          }\n        },\n        complete: function() {\n          if (element.attr(\"toremove\") == \"confirmed\") {\nconsole.log(\"Stopping \"+outer.attr(\"id\")+\" weirdly!\\n\");\n            outer.remove();\n            element.remove();\n          } else {\n            respiral();\n          }\n        }\n      });\n    }\n    respiral();\n  }\n})();\n</code></pre>\n<p>(Also, if you haven't played with a language that does closures before, see if you can understand what I'm doing here. And I <em>know</em> that this has a horrible memory leak; I need to fix that still)</p>\n<p>EDIT: No it doesn't. I <em>think</em> everything's in scope where it should be.</p>\n\n",
      "PostDate": "2018-02-15T15:56:12.1993879Z",
      "LastEditDate": "2018-02-15T16:12:55.604485Z",
      "link": null
    }
  ]
}
