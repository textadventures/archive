{
  "Topic": {
    "TopicId": "4953",
    "ForumId": "18",
    "Title": "How to use verbs",
    "LastUpdated": "2015-01-08T17:52:49+00:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "33604",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Verbs are an alternative to commands that can be simplier to use, but do seem to lead to some confusion.\n\nVerbs are always used in conjuction an object, so ROTATE KNOB could be set up as a verb, but STAND UP or JUMP will require commands. You [i:38ewnrnq]could[/i:38ewnrnq] use a command for ROTATE KNOB, but using a verb is probably simpler.\n\nTo create a verb, select the appropriate object, and go to the Verbs tab. Click add, and type in your verb. Your verb will appear in the upper box, and the response can be set in the section below, either &quot;Print a message&quot; or &quot;Run a script&quot;. Let us suppose we set this up with a script to make things happen when the dial is turned (how to do scripts is not something I will be dealing with here).\n\nThere are actually two parts to a verb. The verb object and the script on our object. The script on our object is just an attribute, which is called &quot;rotate&quot; in this example, but that is really just a name for Quest; the player never sees it.\n\n\n[b:38ewnrnq][i:38ewnrnq][size=120:38ewnrnq]The Verb Object[/size:38ewnrnq][/i:38ewnrnq][/b:38ewnrnq]\n\nThe text Quest uses to match against goes into the verb object, and as Quest quietly creates these for you it is easy to miss they even exist. Look for them under the game object. Here is one for our ROTATE verb.\n\n[code:38ewnrnq]  &lt;verb&gt;\n    &lt;property&gt;rotate&lt;/property&gt;\n    &lt;pattern&gt;rotate&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't rotate &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;[/code:38ewnrnq]\n\nThere are three parts to it. The first is the property element (if you are looking in the GUI, it is called &quot;Attribute&quot;, which makes more sense), this is the name of the attribute on the object. The second is the text that Quest will match against. You can change this, to allow for synonyms, with each word separated by semi-colons, like this:\n\n[code:38ewnrnq]  &lt;verb&gt;\n    &lt;property&gt;rotate&lt;/property&gt;\n    &lt;pattern&gt;rotate; turn; twist&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't rotate &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;[/code:38ewnrnq]\n\nThe third part is what Quest will use if the player tries this verb on something you have not implemented it for (and Quest will even generate this default text for you). You can, of course, change this to your liking. In the GUI you will see more options, but these are the important ones.\n\nOnce you have the ROTATE verb set up, Quest will use that for all objects (that have that verb).\n\nRemember that you can also set up synonyms for all your objects on the Object tab, so we could have &quot;dial&quot; and &quot;tuner&quot; for our knob object. The player can TURN DIAL, TWIST TUNER, or any combination. Plus, those synonyms for rotate are there for every object, and those synonyms for the knob are there for every verb. This may not seem a big deal as you start to create your masterpiece, but if you get to beta-testing, and someone wants to use REVOLVE, it is trivial to add that to the ROTATE verb. It could be a real pain to have to update every combination of synonym for every turnable object.\n\nIf you start to use types, verbs become even more useful, but that is beyond this discussion...\n\n\n[b:38ewnrnq][i:38ewnrnq][size=120:38ewnrnq]Verbs are just script[/size:38ewnrnq][/i:38ewnrnq][/b:38ewnrnq]\n\nWhen you create a verb for an object, it is just a script attribute of the object, and scripts can be called whenever you like. Let us suppose you have an object that is a chair, and you create a &quot;sit on&quot; verb, with an appropriate script. That works fine if the player types SIT ON CHAIR, but what if she just types SIT? You need a command to handle that, but you can still use your verb here. Create your command, then, in the script, have it first test that sitting is appropriate (that the chair is in the current room), and if it is, invoke the script on the chair object.\n\nHere is the script for the command:\n\n[code:38ewnrnq]if (chair&#46;parent = player&#46;parent) {\n  do (chair, &quot;sit&quot;)\n}\nelse {\n  msg (&quot;Nothing to sit on here!&quot;)\n}[/code:38ewnrnq]\n\nThe second line is where the &quot;sit on&quot; verb is invoked.\n\nBy the way, if your verb is multiple words (such as &quot;sit on&quot;) Quest will run them together into one long word, &quot;siton&quot;. However, some built-in verbs have been set up differently, so in this case the attribute name is just &quot;sit&quot;. You can check what name Quest is using by looking on the Attributes tab.\n\nThis trick is also useful when you have a verb that can mean different things. You might want your game to handle these:\n\nLIGHT MATCH\nSTRIKE MATCH\nPUNCH MAN\nSTRIKE MAN\n\nWhat you can do is set up match with a &quot;light&quot; verb, and man with a &quot;punch&quot; verb. Then add a second verb to each for &quot;strike&quot;. All the second verb does is invoke the other verb. So on the match, the &quot;strike&quot; verb does this:\n\n[code:38ewnrnq]do(this, &quot;light&quot;)[/code:38ewnrnq]\n\nOn the man, the &quot;strike&quot; verb does this:\n\n[code:38ewnrnq]do(this, &quot;punch&quot;)[/code:38ewnrnq]\n\nIn case you are wondering, Quest understands &quot;this&quot; to mean the object to which the script is attached. It is good practice to use &quot;this&quot; rather than the name of the object; for one thing, you may later rename an object, perhaps giving the man a proper name.\n\n\n[b:38ewnrnq][i:38ewnrnq][size=120:38ewnrnq]Multiple Objects[/size:38ewnrnq][/i:38ewnrnq][/b:38ewnrnq]\n\nYou can also set up verbs to handle multiple objects, so we could use them for ATTACK GOBLIN WITH KNIFE. Whether this is preferable to using a command is debatable (if there are several things you can attack the goblin with, all doing pretty much the same thing, use a command), but we will look at how it is done.\n\nThe first step is to add the verb to the object, in this case the goblin. However, instead of setting &quot;attack&quot; to use a script, set it to &quot;Require another object&quot;. this will then put up a list of objects (currently empty) to which you can add the knife by clicking Add. You will then get a new dialogue box, into which you can put your script.\n\nNow go to the verb object. In the lower half of the data, you will see the &quot;Multiple Objects&quot; section. Perhaps the most important is the &quot;Object separator&quot;, which defaults to &quot;with; using&quot;. This is a list, separated by semi-colons, of words that will go between the two objects, i.e., between GOBLIN and KNIFE. In this case the default is what we want.\n\nIf the player just types ATTACK GOBLIN, she will be presented with a menu of appropriate objects, and the &quot;Menu caption&quot; will be the caption for that menu. If there are no such objects around, the &quot;If no objects available...&quot; text is shown.\n\nIf there are several monsters that can be attacked with the knife, you would do well to create a new [i:38ewnrnq]type[/i:38ewnrnq], say &quot;monster&quot;, and have the verb set up on that, and then set your goblin and other foes to be on the &quot;monster&quot; [i:38ewnrnq]type[/i:38ewnrnq]. For more on types, see here:\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m -->\n\n\n[b:38ewnrnq][i:38ewnrnq][size=120:38ewnrnq]Notes[/size:38ewnrnq][/i:38ewnrnq][/b:38ewnrnq]\n\nSome verbs are already implemented, such as &quot;speak to&quot; and &quot;sit on&quot;. If you start to type in the Add Verb box, you will see these appear as options. If this is the case, check what the attribute name is. If you add &quot;talk to&quot; as a verb, it will get added as an attribute called &quot;speak&quot;, for example.\n\nA few verbs cannot be implements, as they already mean something in Quest. Open and close, and switch/turn on/off are the main examples.\n\nThanks to those who have commented on this topic. I have updated this post to reflect some of those comments, to keep all the ideas together in one post.",
      "EditableFormat": "bbcode",
      "HTML": "Verbs are an alternative to commands that can be simplier to use, but do seem to lead to some confusion.<br/><br/>Verbs are always used in conjuction an object, so ROTATE KNOB could be set up as a verb, but STAND UP or JUMP will require commands. You <span style=\"font-style:italic;\">could</span> use a command for ROTATE KNOB, but using a verb is probably simpler.<br/><br/>To create a verb, select the appropriate object, and go to the Verbs tab. Click add, and type in your verb. Your verb will appear in the upper box, and the response can be set in the section below, either &quot;Print a message&quot; or &quot;Run a script&quot;. Let us suppose we set this up with a script to make things happen when the dial is turned (how to do scripts is not something I will be dealing with here).<br/><br/>There are actually two parts to a verb. The verb object and the script on our object. The script on our object is just an attribute, which is called &quot;rotate&quot; in this example, but that is really just a name for Quest; the player never sees it.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\"><span style=\"font-size:120\">The Verb Object</span></span></span><br/><br/>The text Quest uses to match against goes into the verb object, and as Quest quietly creates these for you it is easy to miss they even exist. Look for them under the game object. Here is one for our ROTATE verb.<br/><br/><pre><code>  &lt;verb&gt;<br/>    &lt;property&gt;rotate&lt;/property&gt;<br/>    &lt;pattern&gt;rotate&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't rotate &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;</code></pre><br/><br/>There are three parts to it. The first is the property element (if you are looking in the GUI, it is called &quot;Attribute&quot;, which makes more sense), this is the name of the attribute on the object. The second is the text that Quest will match against. You can change this, to allow for synonyms, with each word separated by semi-colons, like this:<br/><br/><pre><code>  &lt;verb&gt;<br/>    &lt;property&gt;rotate&lt;/property&gt;<br/>    &lt;pattern&gt;rotate; turn; twist&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't rotate &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;</code></pre><br/><br/>The third part is what Quest will use if the player tries this verb on something you have not implemented it for (and Quest will even generate this default text for you). You can, of course, change this to your liking. In the GUI you will see more options, but these are the important ones.<br/><br/>Once you have the ROTATE verb set up, Quest will use that for all objects (that have that verb).<br/><br/>Remember that you can also set up synonyms for all your objects on the Object tab, so we could have &quot;dial&quot; and &quot;tuner&quot; for our knob object. The player can TURN DIAL, TWIST TUNER, or any combination. Plus, those synonyms for rotate are there for every object, and those synonyms for the knob are there for every verb. This may not seem a big deal as you start to create your masterpiece, but if you get to beta-testing, and someone wants to use REVOLVE, it is trivial to add that to the ROTATE verb. It could be a real pain to have to update every combination of synonym for every turnable object.<br/><br/>If you start to use types, verbs become even more useful, but that is beyond this discussion...<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\"><span style=\"font-size:120\">Verbs are just script</span></span></span><br/><br/>When you create a verb for an object, it is just a script attribute of the object, and scripts can be called whenever you like. Let us suppose you have an object that is a chair, and you create a &quot;sit on&quot; verb, with an appropriate script. That works fine if the player types SIT ON CHAIR, but what if she just types SIT? You need a command to handle that, but you can still use your verb here. Create your command, then, in the script, have it first test that sitting is appropriate (that the chair is in the current room), and if it is, invoke the script on the chair object.<br/><br/>Here is the script for the command:<br/><br/><pre><code>if (chair&#46;parent = player&#46;parent) {<br/>  do (chair, &quot;sit&quot;)<br/>}<br/>else {<br/>  msg (&quot;Nothing to sit on here!&quot;)<br/>}</code></pre><br/><br/>The second line is where the &quot;sit on&quot; verb is invoked.<br/><br/>By the way, if your verb is multiple words (such as &quot;sit on&quot;) Quest will run them together into one long word, &quot;siton&quot;. However, some built-in verbs have been set up differently, so in this case the attribute name is just &quot;sit&quot;. You can check what name Quest is using by looking on the Attributes tab.<br/><br/>This trick is also useful when you have a verb that can mean different things. You might want your game to handle these:<br/><br/>LIGHT MATCH<br/>STRIKE MATCH<br/>PUNCH MAN<br/>STRIKE MAN<br/><br/>What you can do is set up match with a &quot;light&quot; verb, and man with a &quot;punch&quot; verb. Then add a second verb to each for &quot;strike&quot;. All the second verb does is invoke the other verb. So on the match, the &quot;strike&quot; verb does this:<br/><br/><pre><code>do(this, &quot;light&quot;)</code></pre><br/><br/>On the man, the &quot;strike&quot; verb does this:<br/><br/><pre><code>do(this, &quot;punch&quot;)</code></pre><br/><br/>In case you are wondering, Quest understands &quot;this&quot; to mean the object to which the script is attached. It is good practice to use &quot;this&quot; rather than the name of the object; for one thing, you may later rename an object, perhaps giving the man a proper name.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\"><span style=\"font-size:120\">Multiple Objects</span></span></span><br/><br/>You can also set up verbs to handle multiple objects, so we could use them for ATTACK GOBLIN WITH KNIFE. Whether this is preferable to using a command is debatable (if there are several things you can attack the goblin with, all doing pretty much the same thing, use a command), but we will look at how it is done.<br/><br/>The first step is to add the verb to the object, in this case the goblin. However, instead of setting &quot;attack&quot; to use a script, set it to &quot;Require another object&quot;. this will then put up a list of objects (currently empty) to which you can add the knife by clicking Add. You will then get a new dialogue box, into which you can put your script.<br/><br/>Now go to the verb object. In the lower half of the data, you will see the &quot;Multiple Objects&quot; section. Perhaps the most important is the &quot;Object separator&quot;, which defaults to &quot;with; using&quot;. This is a list, separated by semi-colons, of words that will go between the two objects, i.e., between GOBLIN and KNIFE. In this case the default is what we want.<br/><br/>If the player just types ATTACK GOBLIN, she will be presented with a menu of appropriate objects, and the &quot;Menu caption&quot; will be the caption for that menu. If there are no such objects around, the &quot;If no objects available...&quot; text is shown.<br/><br/>If there are several monsters that can be attacked with the knife, you would do well to create a new <span style=\"font-style:italic;\">type</span>, say &quot;monster&quot;, and have the verb set up on that, and then set your goblin and other foes to be on the &quot;monster&quot; <span style=\"font-style:italic;\">type</span>. For more on types, see here:<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m --><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\"><span style=\"font-size:120\">Notes</span></span></span><br/><br/>Some verbs are already implemented, such as &quot;speak to&quot; and &quot;sit on&quot;. If you start to type in the Add Verb box, you will see these appear as options. If this is the case, check what the attribute name is. If you add &quot;talk to&quot; as a verb, it will get added as an attribute called &quot;speak&quot;, for example.<br/><br/>A few verbs cannot be implements, as they already mean something in Quest. Open and close, and switch/turn on/off are the main examples.<br/><br/>Thanks to those who have commented on this topic. I have updated this post to reflect some of those comments, to keep all the ideas together in one post.",
      "PostDate": "2015-01-06T22:17:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33616",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "It's a shame the aliases can't be attached specifically to an object rather than them being universal like commands. Because of English and how one word can mean more than one thing.\n\nI might want to light a match so aliases could be strike; ignite etc. \nI may also want to hit a person so aliases might be punch; and strike again.",
      "EditableFormat": "bbcode",
      "HTML": "It's a shame the aliases can't be attached specifically to an object rather than them being universal like commands. Because of English and how one word can mean more than one thing.<br/><br/>I might want to light a match so aliases could be strike; ignite etc. <br/>I may also want to hit a person so aliases might be punch; and strike again.",
      "PostDate": "2015-01-07T13:15:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33620",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "no problem. You can do the following:\n\n[code:33yrr2at]\n&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;test551e&quot;&gt;\n    &lt;gameid&gt;e5eb024a-c76c-4ab7-b74c-858fefdcb825&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2014&lt;/firstpublished&gt;\n    &lt;defaultlinkforeground&gt;IndianRed &lt;/defaultlinkforeground&gt;\n    &lt;underlinehyperlinks type=&quot;boolean&quot;&gt;false&lt;/underlinehyperlinks&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;alias&gt;room&lt;/alias&gt;\n    &lt;description type=&quot;script&quot;&gt;\n      msg (&quot;You can 'light match', 'strike match' or 'ignite match'&quot;)\n    &lt;/description&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;match&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;light&gt;match is burning&lt;/light&gt;    \n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;light&lt;/property&gt;\n    &lt;pattern&gt;light&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't light &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;command name=&quot;light&quot;&gt;\n        &lt;unresolved&gt;blabla&lt;/unresolved&gt;\n        &lt;pattern&gt;strike #text#;ignite #text#&lt;/pattern&gt;\n        &lt;script&gt;\n          HandleSingleCommand (&quot;light &quot;+ text)\n        &lt;/script&gt;\n   &lt;/command&gt;\n&lt;/asl&gt;\n[/code:33yrr2at]",
      "EditableFormat": "bbcode",
      "HTML": "no problem. You can do the following:<br/><br/><pre><code><br/>&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;test551e&quot;&gt;<br/>    &lt;gameid&gt;e5eb024a-c76c-4ab7-b74c-858fefdcb825&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2014&lt;/firstpublished&gt;<br/>    &lt;defaultlinkforeground&gt;IndianRed &lt;/defaultlinkforeground&gt;<br/>    &lt;underlinehyperlinks type=&quot;boolean&quot;&gt;false&lt;/underlinehyperlinks&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;alias&gt;room&lt;/alias&gt;<br/>    &lt;description type=&quot;script&quot;&gt;<br/>      msg (&quot;You can 'light match', 'strike match' or 'ignite match'&quot;)<br/>    &lt;/description&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;match&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;light&gt;match is burning&lt;/light&gt;    <br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;light&lt;/property&gt;<br/>    &lt;pattern&gt;light&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't light &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  &lt;command name=&quot;light&quot;&gt;<br/>        &lt;unresolved&gt;blabla&lt;/unresolved&gt;<br/>        &lt;pattern&gt;strike #text#;ignite #text#&lt;/pattern&gt;<br/>        &lt;script&gt;<br/>          HandleSingleCommand (&quot;light &quot;+ text)<br/>        &lt;/script&gt;<br/>   &lt;/command&gt;<br/>&lt;/asl&gt;<br/></code></pre>",
      "PostDate": "2015-01-07T14:38:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33621",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Cheers!",
      "EditableFormat": "bbcode",
      "HTML": "Cheers!",
      "PostDate": "2015-01-07T15:05:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33625",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "The way I would do it is to have two verbs for each, and have the strike verb call either the punch script or the light script&#058;\n\n[code:1mwmwile]do(this,&quot;punch&quot;)[/code:1mwmwile]\n\nFull demo:\n\n[code:1mwmwile]&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;verb_test&quot;&gt;\n    &lt;gameid&gt;6bf48f9b-cbc7-42ed-b8e2-eb6e4de9a39b&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;match&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;light type=&quot;script&quot;&gt;\n        msg (&quot;You light the match&#46;&quot;)\n      &lt;/light&gt;\n      &lt;strike type=&quot;script&quot;&gt;\n        do (this, &quot;light&quot;)\n      &lt;/strike&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;person&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;punch type=&quot;script&quot;&gt;\n        msg (&quot;You punch the guy&#46;&quot;)\n      &lt;/punch&gt;\n      &lt;strike type=&quot;script&quot;&gt;\n        do (this, &quot;punch&quot;)\n      &lt;/strike&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;punch&lt;/property&gt;\n    &lt;pattern&gt;punch&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't punch &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;light&lt;/property&gt;\n    &lt;pattern&gt;light&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't light &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;strike&lt;/property&gt;\n    &lt;pattern&gt;strike&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't strike &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;[/code:1mwmwile]",
      "EditableFormat": "bbcode",
      "HTML": "The way I would do it is to have two verbs for each, and have the strike verb call either the punch script or the light script&#058;<br/><br/><pre><code>do(this,&quot;punch&quot;)</code></pre><br/><br/>Full demo:<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;verb_test&quot;&gt;<br/>    &lt;gameid&gt;6bf48f9b-cbc7-42ed-b8e2-eb6e4de9a39b&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;match&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;light type=&quot;script&quot;&gt;<br/>        msg (&quot;You light the match&#46;&quot;)<br/>      &lt;/light&gt;<br/>      &lt;strike type=&quot;script&quot;&gt;<br/>        do (this, &quot;light&quot;)<br/>      &lt;/strike&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;person&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;punch type=&quot;script&quot;&gt;<br/>        msg (&quot;You punch the guy&#46;&quot;)<br/>      &lt;/punch&gt;<br/>      &lt;strike type=&quot;script&quot;&gt;<br/>        do (this, &quot;punch&quot;)<br/>      &lt;/strike&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;punch&lt;/property&gt;<br/>    &lt;pattern&gt;punch&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't punch &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;light&lt;/property&gt;<br/>    &lt;pattern&gt;light&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't light &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;strike&lt;/property&gt;<br/>    &lt;pattern&gt;strike&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't strike &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-01-07T17:13:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33627",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Yeah, I thought that having a script that could be called upon would be the way around it, but didn't know how. The way I'm doing it now means if I need to edit a script for any reason, I have to remember to edit several.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, I thought that having a script that could be called upon would be the way around it, but didn't know how. The way I'm doing it now means if I need to edit a script for any reason, I have to remember to edit several.",
      "PostDate": "2015-01-07T17:32:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33637",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "You can do &quot;attack goblin with knife&quot; with verbs as well. Here is a sample game that does it:\n\n[code:1de7q34g]&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;verbytest&quot;&gt;\n    &lt;gameid&gt;c6cd0f76-f213-4c91-b687-1f4c6777e8c3&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;object name=&quot;knife&quot;&gt;\n        &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;goblin&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;attack type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;knife&quot;&gt;\n          msg (&quot;You stab the goblin with the knife&#46;&quot;)\n        &lt;/item&gt;\n      &lt;/attack&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;pattern&gt;attack #object#&lt;/pattern&gt;\n    &lt;property&gt;attack&lt;/property&gt;\n    &lt;defaulttext&gt;You can't attack&#46;&lt;/defaulttext&gt;\n    &lt;multiobjectdefault&gt;You can't attack with that&#46;&lt;/multiobjectdefault&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;[/code:1de7q34g]\nThe key parts:\n- There is an &quot;attack&quot; verb with pattern &quot;attack #object#&quot;. The Mulitple Objects section has the default object separator of &quot;with; using&quot;. \n- The &quot;attack&quot; verb has been added to the goblin. It is set to &quot;require another object&quot;.\n- There is an entry for the knife, with specific script for the &quot;attack goblin with/using knife&quot;.\n\nClearly, if you use verbs, you have to have a unique separate case for each combination. A command would work better if you wanted to make the handling common to several objects.",
      "EditableFormat": "bbcode",
      "HTML": "You can do &quot;attack goblin with knife&quot; with verbs as well. Here is a sample game that does it:<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;5&#46;5328&#46;26617--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;verbytest&quot;&gt;<br/>    &lt;gameid&gt;c6cd0f76-f213-4c91-b687-1f4c6777e8c3&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;object name=&quot;knife&quot;&gt;<br/>        &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;/object&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;goblin&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;attack type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;knife&quot;&gt;<br/>          msg (&quot;You stab the goblin with the knife&#46;&quot;)<br/>        &lt;/item&gt;<br/>      &lt;/attack&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;verb&gt;<br/>    &lt;pattern&gt;attack #object#&lt;/pattern&gt;<br/>    &lt;property&gt;attack&lt;/property&gt;<br/>    &lt;defaulttext&gt;You can't attack&#46;&lt;/defaulttext&gt;<br/>    &lt;multiobjectdefault&gt;You can't attack with that&#46;&lt;/multiobjectdefault&gt;<br/>  &lt;/verb&gt;<br/>&lt;/asl&gt;</code></pre><br/>The key parts:<br/>- There is an &quot;attack&quot; verb with pattern &quot;attack #object#&quot;. The Mulitple Objects section has the default object separator of &quot;with; using&quot;. <br/>- The &quot;attack&quot; verb has been added to the goblin. It is set to &quot;require another object&quot;.<br/>- There is an entry for the knife, with specific script for the &quot;attack goblin with/using knife&quot;.<br/><br/>Clearly, if you use verbs, you have to have a unique separate case for each combination. A command would work better if you wanted to make the handling common to several objects.",
      "PostDate": "2015-01-07T20:36:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33652",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Thanks for comments, I have updated the OP to reflect some of your ideas.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for comments, I have updated the OP to reflect some of your ideas.",
      "PostDate": "2015-01-08T09:01:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33653",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Right, I understand this now I think. So in the object tab under verbs I set up the primary verb as normal, and then instead of copying the entire script to each alias I set up I just enter: do (this, &quot;primary verb&quot;) in the aliases script under code view.",
      "EditableFormat": "bbcode",
      "HTML": "Right, I understand this now I think. So in the object tab under verbs I set up the primary verb as normal, and then instead of copying the entire script to each alias I set up I just enter: do (this, &quot;primary verb&quot;) in the aliases script under code view.",
      "PostDate": "2015-01-08T09:18:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33660",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Yes.",
      "EditableFormat": "bbcode",
      "HTML": "Yes.",
      "PostDate": "2015-01-08T14:54:13+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33664",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Yeah it works great. Cheers. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "Yeah it works great. Cheers. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2015-01-08T17:52:49+00:00",
      "LastEditDate": null
    }
  ]
}
