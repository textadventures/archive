{
  "Topic": {
    "TopicId": "3120",
    "ForumId": "18",
    "Title": "My two penneth",
    "LastUpdated": "2013-10-02T09:25:57+01:00",
    "ReplyCount": 19
  },
  "Posts": [
    {
      "PostId": "21013",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "After something of a hiatus, I have been dabbling with Quest again recently. I thought I would leave you a few suggestions and comments about Quest 5.2. From the development thread, I see Alex is working on a map and changing the POV, both of which will be excellent features for Quest.\n\n\n1. &quot;on ready&quot; is not documented. Are any other functions not documented in the latest version?\n\n2. I would like to see a way to add inventory verbs to types; it should be extendable too. For example, a clothing type should have Wear and Remove, so all garments get them automatically, but some might get other verbs as well. I was also unable to add inventory verb programmatically at start-up, by the way. To me, this is a bug, but others may disagree.\n\n3. A FormatList method that takes an ObjectList as a parameter would be useful. Most of the code is already in the library, but inside FormatObjectList. Should be easy to break into two functions, with FormatObjectList calling FormatList (indeed, see library of my demo).\n\n4. On the status bar &quot;A &quot; is prepended to the room name. Is there a way to stop that? Again, this looks like a bug to me.\n\n5. Spinner for setting an integer attribute does not update properly. Another bug.\n\n6. Quality testing functions: A spell checker, something that highlights rooms and objects without aliases, a way to check every room has &quot;look&quot;, &quot;smell&quot; and &quot;listen&quot; implemented. These things will help raise the quality of Quest games, which in turn will help Quest's reputation.\n\n7. Comments in the code should be preserved.\n\n8. An easy way to have scenery objects that are common to a whole set of rooms (say a sky object for any room of type &quot;outside&quot;). I hacked this by moving objects around with the player, but it was not pretty, and likely to break with multiple POV.\n\n\n\n\nI have created a demo with some further ideas. Run the walkthrough, and see what happens!\n\n[attachment=0:35udvct8]<!-- ia0 -->PixDemo.zip<!-- ia0 -->[/attachment:35udvct8]\n\nFeaturing...\nassertions\ncomments\nvariable text\nshowme/valueof\nwalkthough/about/help/commands\nsave/load/transcript\nnew dictionary functions (look at the code to see what these do)\n\nI like to use black text for narrative text, and grey for meta-game text, by the way; that is deliberate. All the interesting stuff is in the file PixFuncLib, because I like to put comments in, and Quest just quietly erases them. Some of these could (and I think should) go straight into 5.3 though some would require modifying. The variable text and saving last line output might be better coded in the msg function in C#. Some things should be disabled in the published adventure, too.",
      "EditableFormat": "bbcode",
      "HTML": "After something of a hiatus, I have been dabbling with Quest again recently. I thought I would leave you a few suggestions and comments about Quest 5.2. From the development thread, I see Alex is working on a map and changing the POV, both of which will be excellent features for Quest.<br/><br/><br/>1. &quot;on ready&quot; is not documented. Are any other functions not documented in the latest version?<br/><br/>2. I would like to see a way to add inventory verbs to types; it should be extendable too. For example, a clothing type should have Wear and Remove, so all garments get them automatically, but some might get other verbs as well. I was also unable to add inventory verb programmatically at start-up, by the way. To me, this is a bug, but others may disagree.<br/><br/>3. A FormatList method that takes an ObjectList as a parameter would be useful. Most of the code is already in the library, but inside FormatObjectList. Should be easy to break into two functions, with FormatObjectList calling FormatList (indeed, see library of my demo).<br/><br/>4. On the status bar &quot;A &quot; is prepended to the room name. Is there a way to stop that? Again, this looks like a bug to me.<br/><br/>5. Spinner for setting an integer attribute does not update properly. Another bug.<br/><br/>6. Quality testing functions: A spell checker, something that highlights rooms and objects without aliases, a way to check every room has &quot;look&quot;, &quot;smell&quot; and &quot;listen&quot; implemented. These things will help raise the quality of Quest games, which in turn will help Quest's reputation.<br/><br/>7. Comments in the code should be preserved.<br/><br/>8. An easy way to have scenery objects that are common to a whole set of rooms (say a sky object for any room of type &quot;outside&quot;). I hacked this by moving objects around with the player, but it was not pretty, and likely to break with multiple POV.<br/><br/><br/><br/><br/>I have created a demo with some further ideas. Run the walkthrough, and see what happens!<br/><br/><div><a href=\"/forumattachments/327/PixDemo.zip\">PixDemo.zip</a></div><br/><br/>Featuring...<br/>assertions<br/>comments<br/>variable text<br/>showme/valueof<br/>walkthough/about/help/commands<br/>save/load/transcript<br/>new dictionary functions (look at the code to see what these do)<br/><br/>I like to use black text for narrative text, and grey for meta-game text, by the way; that is deliberate. All the interesting stuff is in the file PixFuncLib, because I like to put comments in, and Quest just quietly erases them. Some of these could (and I think should) go straight into 5.3 though some would require modifying. The variable text and saving last line output might be better coded in the msg function in C#. Some things should be disabled in the published adventure, too.",
      "PostDate": "2012-07-20T14:41:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21022",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Thank you very much <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nLots of awesome stuff here which it's going to take me a little while to go through properly. I'll take a look and try to post a follow up today if I get some time.",
      "EditableFormat": "bbcode",
      "HTML": "Thank you very much <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Lots of awesome stuff here which it's going to take me a little while to go through properly. I'll take a look and try to post a follow up today if I get some time.",
      "PostDate": "2012-07-21T09:40:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21034",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "You can remove the &quot;A&quot; prefix to the rooms on the room tab. Just uncheck the box that says &quot;Use default prefix/suffix&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "You can remove the &quot;A&quot; prefix to the rooms on the room tab. Just uncheck the box that says &quot;Use default prefix/suffix&quot;.",
      "PostDate": "2012-07-22T10:15:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21051",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Version 1.1 of the PixLib and Demo\n\n[attachment=0:1l2w06un]<!-- ia0 -->PixLib.zip<!-- ia0 -->[/attachment:1l2w06un]\n\nNow with language support - uses templates (but not for debugging functionality). The walk-though has been expanded to make clearer what is going on. Also, I have pulled out the grey/black-and-indented text style into a separate library PrettyPrintLib, which is included in the zip. A demo, PrettyPrintDemo, is included which is exactly the same as PixDemo, except that it also includes this library.\n\nI have also added more print options, this is the full list:\n\n  RANDOM      chosen at random\n  NEAR_RANDOM chosen at random, but not repeating the one last time\n  PREVIOUS    use the same random number as the previous one in this string\n  CYCLE       cycle through the options in order, then back to the beginning\n  ITERATE     cycle through the options in order, then stick on the last one\n  FIRST_ONLY  show the first option the first time, nothing after that\n  FIRST_THEN  show the first option the first time, the second option every time after that\n  STICKY      one is chosen at random the first time, but this same one is used thereafter\n  NAME        prints the alias for the player object\n  GAME        prints the name of the game\n  VERSION     prints the version of the game\n  ROOM        prints the alias of the current room, if there is one, or otherwise the name\n  CHAR        prints the alias of a character in the room (no guarantee who that is if more than one is present)\n  EVAL        evaluates the expression after the vertical bar (eg an object's property or a function call; no guarantee complicated expressions will work)\n  TIME        puts in the time (if clock_lib is included)\n  TIME_IN_WORDS  puts in the time in words (if a new version clock_lib is included)\n\nThe last few options are useful if you want to store a string in a stringlist, but want to have values inserted into it when it gets displayed. If this was incorporated into msg, you could then use them in room and object descriptions too (just as you can in Inform), and in templates, default responses, etc. I would be prepared to code this in C# if that was helpful, just as a simple method that takes a string and returns a string.\n\nETA: Having thought about this more, and looked at the Ques source code, I am not so sure my meagre knowledge of C# is up to this (accessing attributes in particular). So here is a new idea...\n\nHave msg as a function, rather than a script command, that calls some other script command, which does the same thing. The impact of this indirection would be negligable to any existing game, but it would allow creators (or the core library even) to over-write msg to do the stuff above. With room description and error returns and whatever all calling msg, they would now be calling the over-written version, to do whatever we want before invoking the script command.",
      "EditableFormat": "bbcode",
      "HTML": "Version 1.1 of the PixLib and Demo<br/><br/><div><a href=\"/forumattachments/330/PixLib.zip\">PixLib.zip</a></div><br/><br/>Now with language support - uses templates (but not for debugging functionality). The walk-though has been expanded to make clearer what is going on. Also, I have pulled out the grey/black-and-indented text style into a separate library PrettyPrintLib, which is included in the zip. A demo, PrettyPrintDemo, is included which is exactly the same as PixDemo, except that it also includes this library.<br/><br/>I have also added more print options, this is the full list:<br/><br/>  RANDOM      chosen at random<br/>  NEAR_RANDOM chosen at random, but not repeating the one last time<br/>  PREVIOUS    use the same random number as the previous one in this string<br/>  CYCLE       cycle through the options in order, then back to the beginning<br/>  ITERATE     cycle through the options in order, then stick on the last one<br/>  FIRST_ONLY  show the first option the first time, nothing after that<br/>  FIRST_THEN  show the first option the first time, the second option every time after that<br/>  STICKY      one is chosen at random the first time, but this same one is used thereafter<br/>  NAME        prints the alias for the player object<br/>  GAME        prints the name of the game<br/>  VERSION     prints the version of the game<br/>  ROOM        prints the alias of the current room, if there is one, or otherwise the name<br/>  CHAR        prints the alias of a character in the room (no guarantee who that is if more than one is present)<br/>  EVAL        evaluates the expression after the vertical bar (eg an object's property or a function call; no guarantee complicated expressions will work)<br/>  TIME        puts in the time (if clock_lib is included)<br/>  TIME_IN_WORDS  puts in the time in words (if a new version clock_lib is included)<br/><br/>The last few options are useful if you want to store a string in a stringlist, but want to have values inserted into it when it gets displayed. If this was incorporated into msg, you could then use them in room and object descriptions too (just as you can in Inform), and in templates, default responses, etc. I would be prepared to code this in C# if that was helpful, just as a simple method that takes a string and returns a string.<br/><br/>ETA: Having thought about this more, and looked at the Ques source code, I am not so sure my meagre knowledge of C# is up to this (accessing attributes in particular). So here is a new idea...<br/><br/>Have msg as a function, rather than a script command, that calls some other script command, which does the same thing. The impact of this indirection would be negligable to any existing game, but it would allow creators (or the core library even) to over-write msg to do the stuff above. With room description and error returns and whatever all calling msg, they would now be calling the over-written version, to do whatever we want before invoking the script command.",
      "PostDate": "2012-07-25T08:20:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21074",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "I like the print options, and the idea of msg indirection is interesting. I'll have a think about this for Q5.3 (logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1122\">http://quest.codeplex.com/workitem/1122</a><!-- m -->) - maybe I could include some of the code from this library?\n\nAssertions to test the last printed string are a good idea. May be better to incorporate this into the existing assert functionality within a walkthrough (<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Walkthroughs#Assertions\">http://quest5.net/wiki/Walkthroughs#Assertions</a><!-- m -->) - you can use &quot;assert:expression&quot;, so maybe you could have\n\n[code:3nlgd9w8]\nassert&#58;LastPrint(&quot;some text&quot;)\n[/code:3nlgd9w8]\n\nBy using the built-in walkthrough assert functionality you have the advantage that the walkthrough will stop if the assertion fails.\n\nTo answer your questions...\n\n1. &quot;on ready&quot; is only needed by the Core library I think. It runs the nested script only if there are no callbacks pending. A callback will be pending if Quest is waiting for the user to press a key for example. With &quot;on ready&quot; it means the script for triggering the room description when the player moves will only be printed when all other scripts have finished running, which fixes some confusing behaviour caused by the move to asynchronous scripts in Quest 5.1. There is probably some other stuff undocumented from both the 5.1 and 5.2 releases - I will go through the documentation soon to ensure it's up to date before the 5.3 release.\n\n2. You can do this the same way the Core library does, using a &quot;listextend&quot; type.\n\n3. Yes this seems to be a sensible refactoring.\n\n4. As sgreig says, this is just the prefix for the room which can be easily removed.\n\n5. Yes I've noticed the spinner is occasionally dodgy. Can you reproduce anything consistently?\n\n6. May be good to have a spell checker. I couldn't find a good free one the last time I looked. Less of an issue on the web version as most web browsers spell check text fields automatically. Not sure why rooms and objects without aliases should be highlighted though - surely that's perfectly legitimate?\n\n7. Comments within scripts (using &quot;//&quot;) are preserved. Comments in XML are ignored when loading a game in the Editor. But maybe internally they could be stored as meta-attributes of their parent elements, which would allow them to be saved out again. Logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1123\">http://quest.codeplex.com/workitem/1123</a><!-- m -->\n\n8. The best way to implement this would be to modify the Scope functions. If we can come up with some common usage patterns for this it could be turned into a Core library feature.",
      "EditableFormat": "bbcode",
      "HTML": "I like the print options, and the idea of msg indirection is interesting. I'll have a think about this for Q5.3 (logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1122\">http://quest.codeplex.com/workitem/1122</a><!-- m -->) - maybe I could include some of the code from this library?<br/><br/>Assertions to test the last printed string are a good idea. May be better to incorporate this into the existing assert functionality within a walkthrough (<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Walkthroughs#Assertions\">http://quest5.net/wiki/Walkthroughs#Assertions</a><!-- m -->) - you can use &quot;assert:expression&quot;, so maybe you could have<br/><br/><pre><code><br/>assert&#58;LastPrint(&quot;some text&quot;)<br/></code></pre><br/><br/>By using the built-in walkthrough assert functionality you have the advantage that the walkthrough will stop if the assertion fails.<br/><br/>To answer your questions...<br/><br/>1. &quot;on ready&quot; is only needed by the Core library I think. It runs the nested script only if there are no callbacks pending. A callback will be pending if Quest is waiting for the user to press a key for example. With &quot;on ready&quot; it means the script for triggering the room description when the player moves will only be printed when all other scripts have finished running, which fixes some confusing behaviour caused by the move to asynchronous scripts in Quest 5.1. There is probably some other stuff undocumented from both the 5.1 and 5.2 releases - I will go through the documentation soon to ensure it's up to date before the 5.3 release.<br/><br/>2. You can do this the same way the Core library does, using a &quot;listextend&quot; type.<br/><br/>3. Yes this seems to be a sensible refactoring.<br/><br/>4. As sgreig says, this is just the prefix for the room which can be easily removed.<br/><br/>5. Yes I've noticed the spinner is occasionally dodgy. Can you reproduce anything consistently?<br/><br/>6. May be good to have a spell checker. I couldn't find a good free one the last time I looked. Less of an issue on the web version as most web browsers spell check text fields automatically. Not sure why rooms and objects without aliases should be highlighted though - surely that's perfectly legitimate?<br/><br/>7. Comments within scripts (using &quot;//&quot;) are preserved. Comments in XML are ignored when loading a game in the Editor. But maybe internally they could be stored as meta-attributes of their parent elements, which would allow them to be saved out again. Logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1123\">http://quest.codeplex.com/workitem/1123</a><!-- m --><br/><br/>8. The best way to implement this would be to modify the Scope functions. If we can come up with some common usage patterns for this it could be turned into a Core library feature.",
      "PostDate": "2012-07-29T19:05:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21188",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Hi Alex\n\nVersion 3\n[attachment=0:1li6sdi4]<!-- ia0 -->PixLib.zip<!-- ia0 -->[/attachment:1li6sdi4]\n\n[quote:1li6sdi4]I like the print options, and the idea of msg indirection is interesting. I'll have a think about this for Q5.3 (logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1122\">http://quest.codeplex.com/workitem/1122</a><!-- m -->) - maybe I could include some of the code from this library?[/quote:1li6sdi4]\nI would love to see it included in 5.3.\n\nI have slightly modified the print options in version 3 so they can be extended later. If you want to add a new directive, say MY_OPTIONS, create a function BasePrintMyOptions.\n[quote:1li6sdi4]Assertions to test the last printed string are a good idea. May be better to incorporate this into the existing assert functionality within a walkthrough (<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Walkthroughs#Assertions\">http://quest5.net/wiki/Walkthroughs#Assertions</a><!-- m -->) - you can use &quot;assert:expression&quot;, so maybe you could have\n[code:1li6sdi4]assert&#58;LastPrint(&quot;some text&quot;)[/code:1li6sdi4]\nBy using the built-in walkthrough assert functionality you have the advantage that the walkthrough will stop if the assertion fails.[/quote:1li6sdi4]\nOkay, I had no idea assertions were already in Quest...\n\nThe new version now has a LastPrint function that does just that.\n[quote:1li6sdi4]5. Yes I've noticed the spinner is occasionally dodgy. Can you reproduce anything consistently?[/quote:1li6sdi4]\nSadly, no!\n[quote:1li6sdi4]8. The best way to implement this would be to modify the Scope functions. If we can come up with some common usage patterns for this it could be turned into a Core library feature.[/quote:1li6sdi4]\nYes, I think scope is the way to go.\n\nThis is something Inform does very easily, and in contrast is a nightmare for Quest. And really it is vital for a game going into a competition, as people will expect to be able to examine walls, look at the sky, etc.",
      "EditableFormat": "bbcode",
      "HTML": "Hi Alex<br/><br/>Version 3<br/><div><a href=\"/forumattachments/341/PixLib.zip\">PixLib.zip</a></div><br/><br/><blockquote><p>I like the print options, and the idea of msg indirection is interesting. I'll have a think about this for Q5.3 (logged <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1122\">http://quest.codeplex.com/workitem/1122</a><!-- m -->) - maybe I could include some of the code from this library?</p></blockquote><br/>I would love to see it included in 5.3.<br/><br/>I have slightly modified the print options in version 3 so they can be extended later. If you want to add a new directive, say MY_OPTIONS, create a function BasePrintMyOptions.<br/><blockquote><p>Assertions to test the last printed string are a good idea. May be better to incorporate this into the existing assert functionality within a walkthrough (<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Walkthroughs#Assertions\">http://quest5.net/wiki/Walkthroughs#Assertions</a><!-- m -->) - you can use &quot;assert:expression&quot;, so maybe you could have<br/><pre><code>assert&#58;LastPrint(&quot;some text&quot;)</code></pre><br/>By using the built-in walkthrough assert functionality you have the advantage that the walkthrough will stop if the assertion fails.</p></blockquote><br/>Okay, I had no idea assertions were already in Quest...<br/><br/>The new version now has a LastPrint function that does just that.<br/><blockquote><p>5. Yes I've noticed the spinner is occasionally dodgy. Can you reproduce anything consistently?</p></blockquote><br/>Sadly, no!<br/><blockquote><p>8. The best way to implement this would be to modify the Scope functions. If we can come up with some common usage patterns for this it could be turned into a Core library feature.</p></blockquote><br/>Yes, I think scope is the way to go.<br/><br/>This is something Inform does very easily, and in contrast is a nightmare for Quest. And really it is vital for a game going into a competition, as people will expect to be able to examine walls, look at the sky, etc.",
      "PostDate": "2012-08-13T11:01:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21202",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Okay, this may well be the final version!\n\n[attachment=0:18jwcpsi]<!-- ia0 -->PixLib.zip<!-- ia0 -->[/attachment:18jwcpsi]\n\nThis version has a few changes in the code to make it more robust, but no new functionality. All functions in PixLib now have comments, and a file PixLib.txt has those collected together in a format for QuestWiki. I have also included a unit-test adventure for some of the functions in PixLib.\n\nThe zip file contains:\n\nPixLib.aslx: A library with several useful functions and commands. All functions are documented (but not commands) and use templates for language support. Some functions are unit tested.\n\nPixDemo.aslx: A game that demos of some of the functions and commands in PixLib. Run the walk-through to see it all.\n\nPixTest.aslx: A game that unit tests some of the functions and commands in PixLib. Run the walk-through.\n\nPrettyPrintLib.aslx: A library that builds on PixLib, to format output so that the narrative text is in black and indented, and room names appear as sub-headings, while meta-game text is grey. This will not be to everyone's taste, so I have made it separate.\n\nPrettyPrintDemo.aslx: This file is exactly the same as PixDemo.aslx except that it also invokes the PrettyPrintLib library. Run the walk-though to see the effect of the additional library.\n\nPixLib.txt: Documentation for all the functions in PixLib, hopefully formatted for QuestWiki.\n\n\nI think the comment functionality could be done better another way. As it is, comments stumble over full stops, as (I assume) Quest uses the fullstop to break sentences when parsing input. Also, any commands added after the comment (which would be any added by the author if this is in a standard library) may get a match with text in the comment, which could be bad. A far better way would be like assert, but to do nothing (which I guess is in a C# code, and certainly at a more basic level than I know how to access), which I would [i:18jwcpsi]guess [/i:18jwcpsi]was fairly easy. A think a reliable comment system is a must if Quest adventures are to compete successfully in competitions, as judges do like this facility, and take it for granted as it is built into Inform.",
      "EditableFormat": "bbcode",
      "HTML": "Okay, this may well be the final version!<br/><br/><div><a href=\"/forumattachments/342/PixLib.zip\">PixLib.zip</a></div><br/><br/>This version has a few changes in the code to make it more robust, but no new functionality. All functions in PixLib now have comments, and a file PixLib.txt has those collected together in a format for QuestWiki. I have also included a unit-test adventure for some of the functions in PixLib.<br/><br/>The zip file contains:<br/><br/>PixLib.aslx: A library with several useful functions and commands. All functions are documented (but not commands) and use templates for language support. Some functions are unit tested.<br/><br/>PixDemo.aslx: A game that demos of some of the functions and commands in PixLib. Run the walk-through to see it all.<br/><br/>PixTest.aslx: A game that unit tests some of the functions and commands in PixLib. Run the walk-through.<br/><br/>PrettyPrintLib.aslx: A library that builds on PixLib, to format output so that the narrative text is in black and indented, and room names appear as sub-headings, while meta-game text is grey. This will not be to everyone's taste, so I have made it separate.<br/><br/>PrettyPrintDemo.aslx: This file is exactly the same as PixDemo.aslx except that it also invokes the PrettyPrintLib library. Run the walk-though to see the effect of the additional library.<br/><br/>PixLib.txt: Documentation for all the functions in PixLib, hopefully formatted for QuestWiki.<br/><br/><br/>I think the comment functionality could be done better another way. As it is, comments stumble over full stops, as (I assume) Quest uses the fullstop to break sentences when parsing input. Also, any commands added after the comment (which would be any added by the author if this is in a standard library) may get a match with text in the comment, which could be bad. A far better way would be like assert, but to do nothing (which I guess is in a C# code, and certainly at a more basic level than I know how to access), which I would <span style=\"font-style:italic;\">guess </span>was fairly easy. A think a reliable comment system is a must if Quest adventures are to compete successfully in competitions, as judges do like this facility, and take it for granted as it is built into Inform.",
      "PostDate": "2012-08-16T10:34:07+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21359",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Quick additional function. This gives a method, ToWords, that will take an integer and return it as a string, with the number written in words if it is between -2000 and +2000 exclusive.\n\nToWords(101) -&gt; &quot;one hundred and one&quot;\nToWords(2000) -&gt; &quot;2000&quot;\netc.\n\n[code:1nthyccw] &lt;function name=&quot;ToWords&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    if (not TypeOf(number) = &quot;int&quot;) {\n      error (&quot;NumberInWords can only handle ints&quot;)\n    }\n\n    s = &quot;&quot;\n    if (number &lt; 0) {\n      s = &quot;minus &quot;\n      number = -number\n    }\n    if (number &lt; 2000) {\n      hundreds = number / 100\n      number = number % 100\n      if (hundreds &gt; 0) {\n        s = s + StringListItem(printer_struct&#46;number_units, hundreds) + &quot; hundred &quot;\n        if (number &gt; 0) {\n          s = s + &quot;and &quot;\n        }\n      }\n      if (number &lt; 20) {\n        if (not number = 0 or s = &quot;&quot;) {\n          s = s + StringListItem(printer_struct&#46;number_units, number)\n        }\n      }\n      else {\n        units = number % 10\n        tens = (number / 10) % 10\n        s = s + StringListItem(printer_struct&#46;number_tens, tens - 2)\n        if (not units = 0) {\n          s = s + StringListItem(printer_struct&#46;number_units, units)\n        }\n      }\n    }\n    else {\n      s = ToString(number)\n    }\n    return (Trim(s))\n  &#93;&#93;&gt;&lt;/function&gt;\n\n  &lt;object name=&quot;number_struct&quot;&gt;\n    &lt;number_units type=&quot;list&quot;&gt;zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty&lt;/number_units&gt;\n    &lt;number_tens type=&quot;list&quot;&gt;twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety&lt;/number_tens&gt;\n  &lt;/object&gt;[/code:1nthyccw]",
      "EditableFormat": "bbcode",
      "HTML": "Quick additional function. This gives a method, ToWords, that will take an integer and return it as a string, with the number written in words if it is between -2000 and +2000 exclusive.<br/><br/>ToWords(101) -&gt; &quot;one hundred and one&quot;<br/>ToWords(2000) -&gt; &quot;2000&quot;<br/>etc.<br/><br/><pre><code> &lt;function name=&quot;ToWords&quot; parameters=&quot;number&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    if (not TypeOf(number) = &quot;int&quot;) {<br/>      error (&quot;NumberInWords can only handle ints&quot;)<br/>    }<br/><br/>    s = &quot;&quot;<br/>    if (number &lt; 0) {<br/>      s = &quot;minus &quot;<br/>      number = -number<br/>    }<br/>    if (number &lt; 2000) {<br/>      hundreds = number / 100<br/>      number = number % 100<br/>      if (hundreds &gt; 0) {<br/>        s = s + StringListItem(printer_struct&#46;number_units, hundreds) + &quot; hundred &quot;<br/>        if (number &gt; 0) {<br/>          s = s + &quot;and &quot;<br/>        }<br/>      }<br/>      if (number &lt; 20) {<br/>        if (not number = 0 or s = &quot;&quot;) {<br/>          s = s + StringListItem(printer_struct&#46;number_units, number)<br/>        }<br/>      }<br/>      else {<br/>        units = number % 10<br/>        tens = (number / 10) % 10<br/>        s = s + StringListItem(printer_struct&#46;number_tens, tens - 2)<br/>        if (not units = 0) {<br/>          s = s + StringListItem(printer_struct&#46;number_units, units)<br/>        }<br/>      }<br/>    }<br/>    else {<br/>      s = ToString(number)<br/>    }<br/>    return (Trim(s))<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/>  &lt;object name=&quot;number_struct&quot;&gt;<br/>    &lt;number_units type=&quot;list&quot;&gt;zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty&lt;/number_units&gt;<br/>    &lt;number_tens type=&quot;list&quot;&gt;twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety&lt;/number_tens&gt;<br/>  &lt;/object&gt;</code></pre>",
      "PostDate": "2012-09-12T15:45:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21517",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[attachment=1:2v6fqk3j]<!-- ia1 -->PathLib.aslx<!-- ia1 -->[/attachment:2v6fqk3j]\n[attachment=0:2v6fqk3j]<!-- ia0 -->EventDemo.aslx<!-- ia0 -->[/attachment:2v6fqk3j]\n\nAnother library and demo. This allows objects (especially characters) to have a life of their own to some degree. Set up a string dictionary on your object of turn numbers (as strings) for the keys and function names (as strings) for the values. On the turn, the function gets called. Each object can be paused and unpaused.\n\nResponses giving meta-data (help, etc. ad error reports) do not count as a turn (requires Pixlib and PrettyPrintLib for this to work).\n\nI have to admit that the creator input is not that slick; you need to create a function for every action (well, not necesssary, but...). I would be interested to hear of any ideas how this could be improved (even in general terms without looking at my efforts).",
      "EditableFormat": "bbcode",
      "HTML": "<div><a href=\"/forumattachments/386/PathLib.aslx\">PathLib.aslx</a></div><br/><div><a href=\"/forumattachments/387/EventDemo.aslx\">EventDemo.aslx</a></div><br/><br/>Another library and demo. This allows objects (especially characters) to have a life of their own to some degree. Set up a string dictionary on your object of turn numbers (as strings) for the keys and function names (as strings) for the values. On the turn, the function gets called. Each object can be paused and unpaused.<br/><br/>Responses giving meta-data (help, etc. ad error reports) do not count as a turn (requires Pixlib and PrettyPrintLib for this to work).<br/><br/>I have to admit that the creator input is not that slick; you need to create a function for every action (well, not necesssary, but...). I would be interested to hear of any ideas how this could be improved (even in general terms without looking at my efforts).",
      "PostDate": "2012-10-06T14:27:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21518",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "Could you zip all necesary files in the correct filestructure and post it here? Thanks",
      "EditableFormat": "bbcode",
      "HTML": "Could you zip all necesary files in the correct filestructure and post it here? Thanks",
      "PostDate": "2012-10-07T14:27:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21522",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[attachment=0:248cb5va]<!-- ia0 -->pathlib.zip<!-- ia0 -->[/attachment:248cb5va]\n\nTry this",
      "EditableFormat": "bbcode",
      "HTML": "<div><a href=\"/forumattachments/388/pathlib.zip\">pathlib.zip</a></div><br/><br/>Try this",
      "PostDate": "2012-10-08T22:17:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21537",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "SInce you asked for feedback, here are a few thoughts I had looking at PathLib:\n\n1) It's probably just my object-oriented background, but my preference for the code (if it were mine) would be to lean toward trying to encapsulate the actions into the objects somehow. Toward that end, I'd prefer to have the actions be scripts on the object itself (which are invoked with &quot;do&quot;) rather than global functions. That puts the behavior in the same place as the object.\n\nNow, in your demo, you actually share behavior among a couple of objects. If there were the need for such a thing in a game, then I'd assume they'd be instances of the same thing (e.g. robot1 and robot2) since they have the same behaviorial possibilities. Regardless, either way, you could solve that with a base type which holds the common scripts.\n\n2) The way it's set up suffices for many applications, where you have fixed behaviors. If you ever wanted to vary the behavior, then it gets much harder, or the code wouldn't be usable as is. One possibiity would be to have different dictionaries for different sequences. Then when a path object is active, it would have a &quot;current sequence&quot; string attribute, which names the dictionary in effect. (In other words, not only would you start up an object, but you'd tell it what it's supposed to be doing.) That's a simple change that would expand the possibilities for the code a bit.\n\n3) This one is more a heads-up than anything. I had a similar set up to yours (a list of objects doing things), and the straightforward &quot;add, remove, foreach&quot; paradigm didn't end up working in the end, in real world situations. There are problems if you ever have one of the objects try to start up or shut down another object (or itself). For example, let's say you want your button to be itself a path object. When you press it, it goes through several states before the robot starts up (e.g. a stupid example: &quot;The button flickers&quot;, &quot;The button blinks several times, with increasing speed&quot;, &quot;The button glows solid&quot;, and then the button activates the robot on the last state), you'll find that you get these annoying messages about modifying the list being enumerated. The same happens if, say, on the last state of the robot movement, it wants to shut itself down and remove itself from the list. Again, list modified while enumerating.\n\nThe solution I came up with (and any better suggestions are appreciated!) was to have a main list which is enumerated and then have a &quot;pending&quot; list for new adds and a way to mark objects in the list that have been removed. Then on each cycle, before the foreach, I would add all the pending additions and remove all the marked removals. \n\nIt's possible you'd never run into that. But I bet if this is used (and used to its fullest potential), you will run into it, and the hoops you have to go through to work around it are a bit ugly. (Another possibility I toyed with was to use a while loop with a variable.  That avoids the modified message and works well for additions - assuming they're added at the end, and that you check the list length each time in case it grows - but it doesn't work for removals. In the case where the object you're removing comes before the current object in the list, everything would shift down, and most likely you'd end up skipping an object on that turn. So I nixed that idea.)\n\nHope this all helps!",
      "EditableFormat": "bbcode",
      "HTML": "SInce you asked for feedback, here are a few thoughts I had looking at PathLib:<br/><br/>1) It's probably just my object-oriented background, but my preference for the code (if it were mine) would be to lean toward trying to encapsulate the actions into the objects somehow. Toward that end, I'd prefer to have the actions be scripts on the object itself (which are invoked with &quot;do&quot;) rather than global functions. That puts the behavior in the same place as the object.<br/><br/>Now, in your demo, you actually share behavior among a couple of objects. If there were the need for such a thing in a game, then I'd assume they'd be instances of the same thing (e.g. robot1 and robot2) since they have the same behaviorial possibilities. Regardless, either way, you could solve that with a base type which holds the common scripts.<br/><br/>2) The way it's set up suffices for many applications, where you have fixed behaviors. If you ever wanted to vary the behavior, then it gets much harder, or the code wouldn't be usable as is. One possibiity would be to have different dictionaries for different sequences. Then when a path object is active, it would have a &quot;current sequence&quot; string attribute, which names the dictionary in effect. (In other words, not only would you start up an object, but you'd tell it what it's supposed to be doing.) That's a simple change that would expand the possibilities for the code a bit.<br/><br/>3) This one is more a heads-up than anything. I had a similar set up to yours (a list of objects doing things), and the straightforward &quot;add, remove, foreach&quot; paradigm didn't end up working in the end, in real world situations. There are problems if you ever have one of the objects try to start up or shut down another object (or itself). For example, let's say you want your button to be itself a path object. When you press it, it goes through several states before the robot starts up (e.g. a stupid example: &quot;The button flickers&quot;, &quot;The button blinks several times, with increasing speed&quot;, &quot;The button glows solid&quot;, and then the button activates the robot on the last state), you'll find that you get these annoying messages about modifying the list being enumerated. The same happens if, say, on the last state of the robot movement, it wants to shut itself down and remove itself from the list. Again, list modified while enumerating.<br/><br/>The solution I came up with (and any better suggestions are appreciated!) was to have a main list which is enumerated and then have a &quot;pending&quot; list for new adds and a way to mark objects in the list that have been removed. Then on each cycle, before the foreach, I would add all the pending additions and remove all the marked removals. <br/><br/>It's possible you'd never run into that. But I bet if this is used (and used to its fullest potential), you will run into it, and the hoops you have to go through to work around it are a bit ugly. (Another possibility I toyed with was to use a while loop with a variable.  That avoids the modified message and works well for additions - assuming they're added at the end, and that you check the list length each time in case it grows - but it doesn't work for removals. In the case where the object you're removing comes before the current object in the list, everything would shift down, and most likely you'd end up skipping an object on that turn. So I nixed that idea.)<br/><br/>Hope this all helps!",
      "PostDate": "2012-10-10T10:55:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21538",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Oh, and I really like your &quot;ToWords&quot; function! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Oh, and I really like your &quot;ToWords&quot; function! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2012-10-10T11:09:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21541",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[attachment=0:1do0dq57]<!-- ia0 -->pathlib.zip<!-- ia0 -->[/attachment:1do0dq57]\n\nOkay, second version.\n\nHad not thought about using scripts, but it turns out to be neater as you can access the object through this, and no return type.\n\nYou can now start up new paths for an object, as you suggest. You can also set a path to wait until a script gives a true.\n\nFinally, I have included a warning about not beginning or terminating a path from a path (unless you have large numbers of objects with paths, just pause them instead, I suggest).",
      "EditableFormat": "bbcode",
      "HTML": "<div><a href=\"/forumattachments/390/pathlib.zip\">pathlib.zip</a></div><br/><br/>Okay, second version.<br/><br/>Had not thought about using scripts, but it turns out to be neater as you can access the object through this, and no return type.<br/><br/>You can now start up new paths for an object, as you suggest. You can also set a path to wait until a script gives a true.<br/><br/>Finally, I have included a warning about not beginning or terminating a path from a path (unless you have large numbers of objects with paths, just pause them instead, I suggest).",
      "PostDate": "2012-10-10T20:10:29+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21578",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Another library function that might be a useful addition to 5.3:\n\n[code:vh6dmaky]  &lt;function name=&quot;MoveChildObjects&quot; parameters=&quot;from, to&quot;&gt;\n    foreach (obj, GetDirectChildren (from)) {\n      obj&#46;parent = to\n    }\n  &lt;/function&gt;[/code:vh6dmaky]\n\nAlso, a library for adding a lift (or elevator) to your game. \n[attachment=0:vh6dmaky]<!-- ia0 -->lift.zip<!-- ia0 -->[/attachment:vh6dmaky]\n\nTo implement, create a room that will be the lift, and in it put a number of objects that will be buttons. You will obviously need one button per floor. For each floor, create an exit that goes to the lift room (but not the other way), also create a single exit for the lift room (does not matter where to).\n\nThe library adds a new tab to the editor. On the lift tab, set all the exits from each floor to the lift to be &quot;Lift Entance&quot; (do not do this for the exit in the lift room).  Still on the lift tab, set the buttons to be &quot;Lift Button&quot;, assign a floor number and a destination for each.  For the lift room itself, set it to be a &quot;Lift&quot;, and type in messages the player will see when buttons are pressed.  You can use ### in these strings and this will be replaced by the destination floor.\n\nSee the included demo for an example.\n\nNote that as implemented the player does not have to press a button to call the lift - the lift is automatically  at whatever floor the player wants to get on at. You might want to have the lift entrances locked, and require the  player to press a button to call the lift, which then unlocks the exit. Have the exit lock when the player goes that way.\n\nFloors must be numbers (so no &quot;ground&quot; and &quot;basement&quot; I am afraid), as the system compares the current floor  to the destination floor to decide if it is going up or down. Feel free to modify this if you prefer it otherwise.\n\nShould be able to handle multiple lifts in one game (but I have to admit not testing that!).",
      "EditableFormat": "bbcode",
      "HTML": "Another library function that might be a useful addition to 5.3:<br/><br/><pre><code>  &lt;function name=&quot;MoveChildObjects&quot; parameters=&quot;from, to&quot;&gt;<br/>    foreach (obj, GetDirectChildren (from)) {<br/>      obj&#46;parent = to<br/>    }<br/>  &lt;/function&gt;</code></pre><br/><br/>Also, a library for adding a lift (or elevator) to your game. <br/><div><a href=\"/forumattachments/391/lift.zip\">lift.zip</a></div><br/><br/>To implement, create a room that will be the lift, and in it put a number of objects that will be buttons. You will obviously need one button per floor. For each floor, create an exit that goes to the lift room (but not the other way), also create a single exit for the lift room (does not matter where to).<br/><br/>The library adds a new tab to the editor. On the lift tab, set all the exits from each floor to the lift to be &quot;Lift Entance&quot; (do not do this for the exit in the lift room).  Still on the lift tab, set the buttons to be &quot;Lift Button&quot;, assign a floor number and a destination for each.  For the lift room itself, set it to be a &quot;Lift&quot;, and type in messages the player will see when buttons are pressed.  You can use ### in these strings and this will be replaced by the destination floor.<br/><br/>See the included demo for an example.<br/><br/>Note that as implemented the player does not have to press a button to call the lift - the lift is automatically  at whatever floor the player wants to get on at. You might want to have the lift entrances locked, and require the  player to press a button to call the lift, which then unlocks the exit. Have the exit lock when the player goes that way.<br/><br/>Floors must be numbers (so no &quot;ground&quot; and &quot;basement&quot; I am afraid), as the system compares the current floor  to the destination floor to decide if it is going up or down. Feel free to modify this if you prefer it otherwise.<br/><br/>Should be able to handle multiple lifts in one game (but I have to admit not testing that!).",
      "PostDate": "2012-10-17T09:43:34+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21597",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Here is another one, this time for a computer network.\n\n[attachment=0:2yknzr8b]<!-- ia0 -->terminal.zip<!-- ia0 -->[/attachment:2yknzr8b] (version 2, 1340 BST 20/Oct/12)\n\nUsing this library you can easily implement one or more computer terminals in your game. This is quite a specific implementation, and may not be suitable for all games. All terminals are connected to the same network, and the same data can be access from all. The player's character is assigned a security level (which can be changed during the game), and this determines what data is accessible. Optionally, the player can hack a terminal for a higher security level.\n\nThe player is not required to give a password or access code, but it is assumed the character uses this when logging on. What you can do is give the player object a security level when a password is found.\n\nInstructions for setting up are included in the library file, and there is a demo too, but all setting up is through a new &quot;Terminal&quot; tab, so fairly straightforward.\n\nEdit: Updated as I found a couple of issues, mainly about handling different settings on the game object. New version uses PixLib (because ultimately this is for my benefit, and I use it), but the library files has instructions for modfying it so it does not, just comment out one line, uncomment another.",
      "EditableFormat": "bbcode",
      "HTML": "Here is another one, this time for a computer network.<br/><br/><div><a href=\"/forumattachments/394/terminal.zip\">terminal.zip</a></div> (version 2, 1340 BST 20/Oct/12)<br/><br/>Using this library you can easily implement one or more computer terminals in your game. This is quite a specific implementation, and may not be suitable for all games. All terminals are connected to the same network, and the same data can be access from all. The player's character is assigned a security level (which can be changed during the game), and this determines what data is accessible. Optionally, the player can hack a terminal for a higher security level.<br/><br/>The player is not required to give a password or access code, but it is assumed the character uses this when logging on. What you can do is give the player object a security level when a password is found.<br/><br/>Instructions for setting up are included in the library file, and there is a demo too, but all setting up is through a new &quot;Terminal&quot; tab, so fairly straightforward.<br/><br/>Edit: Updated as I found a couple of issues, mainly about handling different settings on the game object. New version uses PixLib (because ultimately this is for my benefit, and I use it), but the library files has instructions for modfying it so it does not, just comment out one line, uncomment another.",
      "PostDate": "2012-10-19T14:34:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21757",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I have decided to put some of my libraries on the Wiki, where they will be easier to find, and I can provide a proper tutorial in their use.\n\nOnly done two so far, as I am not sure how 5.3 will impact on the rest.\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Dynamic_Menus_for_Conversations\">http://quest5.net/wiki/Dynamic_Menus_for_Conversations</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Implement_a_Lift\">http://quest5.net/wiki/Implement_a_Lift</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "I have decided to put some of my libraries on the Wiki, where they will be easier to find, and I can provide a proper tutorial in their use.<br/><br/>Only done two so far, as I am not sure how 5.3 will impact on the rest.<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Dynamic_Menus_for_Conversations\">http://quest5.net/wiki/Dynamic_Menus_for_Conversations</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Implement_a_Lift\">http://quest5.net/wiki/Implement_a_Lift</a><!-- m -->",
      "PostDate": "2012-11-13T12:04:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26473",
      "UserId": 0,
      "Username": "dgparryuk",
      "UserAvatar": null,
      "UserGravatar": "5a2a88854f678a2563d0b873da1e84ad",
      "EditableText": "I know it's a year &amp; .2 versions later...\nand i've only just started trying to make a game\nbut this looks perfect for part of mine..\nunfortionatly it doesn't work <!-- s:-( --><img src=\"{SMILIES_PATH}/icon_sad.gif\" alt=\":-(\" title=\"Sad\" /><!-- s:-( -->\n\ni get an error of\n\n[code:n10re6sg]System&#46;Exception&#58; Unknown source list for dropdown\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;DropDownControl&#46;m_helper_Initialise()\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;ControlDataHelper`1&#46;DoInitialise(EditorController controller, IEditorControl definition)\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;InitialiseEditorControl(IEditorControl ctl)\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;AddControlToGrid(Grid grid, IEditorControl ctl, Boolean firstControl)\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;InitialiseTab(IEditorTab tab)\n   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;Initialise(EditorController controller, IEditorDefinition definition)\n   at TextAdventures&#46;Quest&#46;WPFElementEditor&#46;Initialise(EditorController controller, IEditorDefinition definition)\n   at TextAdventures&#46;Quest&#46;Editor&#46;AddEditor(String name)\n   at TextAdventures&#46;Quest&#46;Editor&#46;SetUpEditors()\n   at TextAdventures&#46;Quest&#46;Editor&#46;_Closure$__1&#46;_Lambda$__4()[/code:n10re6sg]\n\ni saw a sugestion of &quot;list&quot; to &quot;script list&quot; but that didn't work...",
      "EditableFormat": "bbcode",
      "HTML": "I know it's a year &amp; .2 versions later...<br/>and i've only just started trying to make a game<br/>but this looks perfect for part of mine..<br/>unfortionatly it doesn't work <!-- s:-( --><img src=\"{SMILIES_PATH}/icon_sad.gif\" alt=\":-(\" title=\"Sad\" /><!-- s:-( --><br/><br/>i get an error of<br/><br/><pre><code>System&#46;Exception&#58; Unknown source list for dropdown<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;DropDownControl&#46;m_helper_Initialise()<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;ControlDataHelper`1&#46;DoInitialise(EditorController controller, IEditorControl definition)<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;InitialiseEditorControl(IEditorControl ctl)<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;AddControlToGrid(Grid grid, IEditorControl ctl, Boolean firstControl)<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;InitialiseTab(IEditorTab tab)<br/>   at TextAdventures&#46;Quest&#46;EditorControls&#46;ElementEditor&#46;Initialise(EditorController controller, IEditorDefinition definition)<br/>   at TextAdventures&#46;Quest&#46;WPFElementEditor&#46;Initialise(EditorController controller, IEditorDefinition definition)<br/>   at TextAdventures&#46;Quest&#46;Editor&#46;AddEditor(String name)<br/>   at TextAdventures&#46;Quest&#46;Editor&#46;SetUpEditors()<br/>   at TextAdventures&#46;Quest&#46;Editor&#46;_Closure$__1&#46;_Lambda$__4()</code></pre><br/><br/>i saw a sugestion of &quot;list&quot; to &quot;script list&quot; but that didn't work...",
      "PostDate": "2013-10-01T10:36:29+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26476",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "due to v5.4 of quest, code syntax+format is different for some things\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m -->\n\nthis is probably the case of the error, unles you made a simple mistake or typo with your code causing that large script block to be the (presuming) source of your error.\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/List\">http://quest5.net/wiki/List</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Dictionaries\">http://quest5.net/wiki/Using_Dictionaries</a><!-- m -->\n\n------\n\nit's not:\n\nlist -&gt; script list\n\nIT&quot;S:\n\nlist -&gt; simplestringlist\n\n---------\n\nthere is no &quot;scriptlist&quot;, but there is a &quot;scriptdictionary&quot;\n\nLists:\n\n1. stringlist ~ list ~ simplestringlist\n2. objectlist\n\nDictionaries:\n\n1. stringdictionary ~ simplestringdictionary\n2. objectdictionary\n3. scriptdictionary",
      "EditableFormat": "bbcode",
      "HTML": "due to v5.4 of quest, code syntax+format is different for some things<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m --><br/><br/>this is probably the case of the error, unles you made a simple mistake or typo with your code causing that large script block to be the (presuming) source of your error.<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/List\">http://quest5.net/wiki/List</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Dictionaries\">http://quest5.net/wiki/Using_Dictionaries</a><!-- m --><br/><br/>------<br/><br/>it's not:<br/><br/>list -&gt; script list<br/><br/>IT&quot;S:<br/><br/>list -&gt; simplestringlist<br/><br/>---------<br/><br/>there is no &quot;scriptlist&quot;, but there is a &quot;scriptdictionary&quot;<br/><br/>Lists:<br/><br/>1. stringlist ~ list ~ simplestringlist<br/>2. objectlist<br/><br/>Dictionaries:<br/><br/>1. stringdictionary ~ simplestringdictionary<br/>2. objectdictionary<br/>3. scriptdictionary",
      "PostDate": "2013-10-02T03:43:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26478",
      "UserId": 0,
      "Username": "dgparryuk",
      "UserAvatar": null,
      "UserGravatar": "5a2a88854f678a2563d0b873da1e84ad",
      "EditableText": "Cheers i'll try that later...\n\nI'm not a programmer but i can program (a little)\nso it's just learning the syntax etc..",
      "EditableFormat": "bbcode",
      "HTML": "Cheers i'll try that later...<br/><br/>I'm not a programmer but i can program (a little)<br/>so it's just learning the syntax etc..",
      "PostDate": "2013-10-02T09:25:57+01:00",
      "LastEditDate": null
    }
  ]
}