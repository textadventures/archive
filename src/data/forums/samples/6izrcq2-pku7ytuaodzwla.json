{
  "Topic": {
    "TopicId": "6izrcq2-pku7ytuaodzwla",
    "ForumId": "18",
    "Title": "ExitDescriptions v1.0 Release - Give exits in-room descriptions just like objects!",
    "LastUpdated": "2020-06-28T07:36:18.711166Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "47f3b9db-8ad0-4a50-b041-3257b49e96a7",
      "UserId": 185695,
      "Username": "hjk321",
      "AvatarUrl": "https://secure.gravatar.com/avatar/1c4dd9e21eac6ce8c78df75f8e70c42d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<h1>ExitDescriptions v1.0</h1>\r\n<a href=\"http://textadventures.co.uk/games/view/83ejfltzyuwsqhqyqj0_ew/library-tech-demo-exit-descriptions\">Online Playable Demo</a>\r\n\r\n<a href=\"https://drive.google.com/file/d/1MC0Sv9aqvO493ON_xnD_jZwTwKIaRX61/view?usp=sharing\">v1.0 Download</a>\r\n\r\nIf you're using the automatically-generated room description system in Quest (and why wouldn't you be), the list of exits look something like this:\r\n````\r\nYou can go north, south, east, or west.\r\n````\r\nThat seems a little bland. What if you wanted to say, **\"To the north you see a path leading towards a giant ferris wheel\"?**\r\nUnfortunately, in Quest the only way to add flavor text to exits is to disable  the exits list altogether and manually insert your exit list into the room description. But what if there was a better way, one that allowed you to describe an exit however you darn well please while still using the built-in room description system?\r\n\r\nExitDescriptions is a lightweight library that adds a tab to an exit's editor window, which allows you to add custom text to a room's description without the need to override or disable the built-in room description feature. The system is very similar to Quest's built-in object in-room descriptions, and when the two systems are used together you can really give the player a vibrant, detailed picture of their surroundings. \r\n\r\nThe system can handle any combination of exits in a room that have or don't have custom descriptions, handling exits without custom text the normal way. You can see how these situations are handled in the online demo, linked above. You can write flavor text for the important directions and ignore the mundane ones, no problem.\r\n\r\n**Installation**\r\nYou install this like any other library. Like all custom libraries, this does not work with the web editor, so you'll need to be using desktop. Download the library from the link above and import it into your project. The load order does not matter as long as it is after the core libraries. Save and reload your project when prompted.\r\n\r\n**How to use**\r\nWhen you select an exit in the editor, a new tab labeled \"Description\" will appear. Simply enter the text you want to use to describe that exit into the text box. You can also leave it blank, and the exit will display the regular way (e.g. \"You can go north\"). If you don't want an exit to appear in the description at all, check the \"Scenery\" option in the exit's main editor tab.\r\n\r\n**Compatibility**\r\nExitDescriptions is extremely lightweight, overriding only one core function, **FormatExitList**. Therefore it will be compatible with 99.99% of libraries. The only incompatibilities are libraries that also edit **FormatExitList**, and libraries that give exits the attribute **inroomdescription**.\r\n\r\n**By the way...**\r\nThis probably should go without saying but I will put it here just in case. This library doesn't magically create scenery objects for you or allow players to interact with objects that are technically in a different room. So if, say, one of your exit descriptions happens to mention a ferris wheel, it might be a good idea to create a ferris wheel scenery object in case players try to interact with it.\r\n\r\n**Known Bugs**\r\nNone so far :)\r\n\r\n**Planned Features**\r\nPlease make suggestions below :)",
      "EditableFormat": "markdown",
      "HTML": "<h1>ExitDescriptions v1.0</h1>\n<a href=\"http://textadventures.co.uk/games/view/83ejfltzyuwsqhqyqj0_ew/library-tech-demo-exit-descriptions\">Online Playable Demo</a>\n<p><a href=\"https://drive.google.com/file/d/1MC0Sv9aqvO493ON_xnD_jZwTwKIaRX61/view?usp=sharing\">v1.0 Download</a></p>\n<p>If you're using the automatically-generated room description system in Quest (and why wouldn't you be), the list of exits look something like this:</p>\n<pre><code>You can go north, south, east, or west.\n</code></pre>\n<p>That seems a little bland. What if you wanted to say, <strong>\"To the north you see a path leading towards a giant ferris wheel\"?</strong><br>\nUnfortunately, in Quest the only way to add flavor text to exits is to disable  the exits list altogether and manually insert your exit list into the room description. But what if there was a better way, one that allowed you to describe an exit however you darn well please while still using the built-in room description system?</p>\n<p>ExitDescriptions is a lightweight library that adds a tab to an exit's editor window, which allows you to add custom text to a room's description without the need to override or disable the built-in room description feature. The system is very similar to Quest's built-in object in-room descriptions, and when the two systems are used together you can really give the player a vibrant, detailed picture of their surroundings.</p>\n<p>The system can handle any combination of exits in a room that have or don't have custom descriptions, handling exits without custom text the normal way. You can see how these situations are handled in the online demo, linked above. You can write flavor text for the important directions and ignore the mundane ones, no problem.</p>\n<p><strong>Installation</strong><br>\nYou install this like any other library. Like all custom libraries, this does not work with the web editor, so you'll need to be using desktop. Download the library from the link above and import it into your project. The load order does not matter as long as it is after the core libraries. Save and reload your project when prompted.</p>\n<p><strong>How to use</strong><br>\nWhen you select an exit in the editor, a new tab labeled \"Description\" will appear. Simply enter the text you want to use to describe that exit into the text box. You can also leave it blank, and the exit will display the regular way (e.g. \"You can go north\"). If you don't want an exit to appear in the description at all, check the \"Scenery\" option in the exit's main editor tab.</p>\n<p><strong>Compatibility</strong><br>\nExitDescriptions is extremely lightweight, overriding only one core function, <strong>FormatExitList</strong>. Therefore it will be compatible with 99.99% of libraries. The only incompatibilities are libraries that also edit <strong>FormatExitList</strong>, and libraries that give exits the attribute <strong>inroomdescription</strong>.</p>\n<p><strong>By the way...</strong><br>\nThis probably should go without saying but I will put it here just in case. This library doesn't magically create scenery objects for you or allow players to interact with objects that are technically in a different room. So if, say, one of your exit descriptions happens to mention a ferris wheel, it might be a good idea to create a ferris wheel scenery object in case players try to interact with it.</p>\n<p><strong>Known Bugs</strong><br>\nNone so far :)</p>\n<p><strong>Planned Features</strong><br>\nPlease make suggestions below :)</p>\n\n",
      "PostDate": "2020-06-28T07:36:18.711166Z",
      "LastEditDate": "2020-06-28T13:57:09.3427847Z",
      "link": null
    },
    {
      "PostId": "13d1eb5f-c865-4193-b998-3cf6211cc54d",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's a nice little library, but unfortunately, it disables the direction hyperlinks, and I quite like those! Whereas before 'you can go north' would allow the player to click on north and boom, now they're just text, regardless of whether or not a description was added.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's a nice little library, but unfortunately, it disables the direction hyperlinks, and I quite like those! Whereas before 'you can go north' would allow the player to click on north and boom, now they're just text, regardless of whether or not a description was added.</p>\n\n",
      "PostDate": "2020-07-07T17:58:14.3197137Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "343107e8-f364-430b-a674-70cf939bdaff",
      "UserId": 185695,
      "Username": "hjk321",
      "AvatarUrl": "https://i.imgur.com/JjQC2R6b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep, that's unfortunately a side effect. Working on an update in the next few days, will update with an option to enable/disable.\r\n\r\nIn the meantime, the exit descriptions are text-processor enabled however so I suppose you could add the command links manually until I can get the update out.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep, that's unfortunately a side effect. Working on an update in the next few days, will update with an option to enable/disable.</p>\n<p>In the meantime, the exit descriptions are text-processor enabled however so I suppose you could add the command links manually until I can get the update out.</p>\n\n",
      "PostDate": "2020-07-13T07:36:02.3745304Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "341eccef-8968-4f2f-adc0-b26fb972b807",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That looks pretty neat.\r\n\r\n<details><summary style=\"text-decoration: underline; cursor: pointer\">This is how I'd add links</summary>\r\n\r\nProbably not the most efficient way to do it.\r\n```\r\n  <function name=\"FormatExitList\" type=\"string\" parameters=\"preList, list, preFinal, postList\">\r\n    <![CDATA[\r\n    result = \"\"\r\n    // first, the ones with descriptions\r\n    foreach (item, list) {\r\n      linkedexits = NewObjectList()\r\n      if (HasString (item, \"inroomdescription\")) {\r\n        desc = item.inroomdescription\r\n        if (IsRegexMatch (\"\\{.+\\}\", desc)) {\r\n          game.text_processor_this = item\r\n          desc =  ProcessTextSection (desc, QuickParams (\"linked_exits\", linkedexits))\r\n        }\r\n        if (not ListContains (linkedexits, item)) {\r\n          if (GetBoolean (item, \"inroomdescriptionlink\")) {\r\n            if (Instr (desc, item.alias) > 0) desc = Replace (desc, item.alias, \"{exit:\" + item.name + \"}\")\r\n            else desc = \"{exit:\" + item.name + \":\" + desc + \"}\"\r\n            list add (linkedexits, item)\r\n          }\r\n          else if (GetBoolean (item, \"nolonk\")) {\r\n            list add (linkedexits, item)\r\n          }\r\n        }\r\n        result = result + desc + \" \"\r\n      }\r\n    }\r\n    result = LTrim(result)\r\n    list = ListExclude (list, linkedexits)\r\n\r\n    // Process exits without descriptions\r\n    listLength = ListCount(listFiltered)\r\n    if (listLength > 0) {\r\n      count = 0\r\n      result = result + \" \" + preList + \" \"\r\n      foreach (item, listFiltered) {\r\n        result = result + item.alias\r\n        count = count + 1\r\n        if (count = listLength - 1) {\r\n          result = result + \" \" + preFinal + \" \"\r\n        }\r\n        else if (count < listLength) {\r\n          result = result + \", \"\r\n        }\r\n      }\r\n      result = result + postList\r\n    }\r\n    return (result)\r\n  ]]>\r\n  </function>\r\n```\r\n\r\nThis also expects a slight change of the text processor's \"{exit:\" command; which I've been using for other things anyway. This basically causes the text processor to maintain a list of exits that it's generated a link to.\r\n<pre><code>  &lt;function name=\"ProcessTextCommand_Exit\" type=\"string\" parameters=\"section, data\">\r\n    &lt;![CDATA[\r\n    exitname = Mid(section, 6)\r\n    <em style=\"color: green\">// Was 'GetObject', which is silly. Should use the more appropriate function</em>\r\n    exit = <em style=\"color: blue\">ObjectForTextProcessor</em>(exitname)\r\n    if (exit = null) {\r\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\r\n    }\r\n    else {\r\n      <em style=\"color: green\">// Makes a list of linked exits that the calling function can check</em>\r\n<em style=\"color: blue\">      if (not DictionaryContains (data, \"linked_exits\")) dictionary add (data, \"linked_exits\", NewObjectList())\r\n      list add  (DictionaryItem (data, \"linked_exits\"), exit)</em>\r\n      verbs = GetDisplayVerbs(exit)\r\n      alias = GetDisplayAlias(exit)\r\n      command = LCase(StringListItem(verbs, 0)) + \" \" + alias\r\n      style = GetCurrentLinkTextFormat()\r\n      return (\"&lt;a style=\\\"\" + style + \"\\\" class=\\\"cmdlink exitlink\\\" data-elementid=\\\"\" + exit.name + \"\\\" data-command=\\\"\" + command + \"\\\">\" + alias + \"&lt;/a>\")\r\n    }\r\n    ]]>\r\n  &lt;/function></code></pre>\r\n\r\n</details>\r\n\r\n(sorry to reply with code off the top of my head; my internet went down right after loading this page, so I'm not in a position to test it, upload the file somewhere, or do my job for a while. So thought it might be worth scribbling down the first thing that came to my mind)\r\n\r\nThis one provides some flexibility to your links:\r\n* The in-room description can be something like `A dark tunnel leads {exit:this}.` or `There is a heavy {exit:this:oaken door} opposite the fireplace.` (I figured making it work with 'this' would make it easier than messing about with named exits)\r\n* If it doesn't have an exit link in the description, setting the exit's `inroomdescriptionlink` attribute to true will create a link. Either linking the item's alias if it appears in the in-room description, or the whole description otherwise.\r\n* The list of exits without detailed descriptions will also include any that don't have a link in their description, unless they have the attribute `nolink`. I can see a few edge cases where this could be useful, and none where it would be a problem.\r\n    * One example; `A stone staircase in one corner leads {exit:up_staircase3:up} and {exit:this:down}.` - allows the in-room description of one exit to mention another, so two exits can share a description.\r\n* I'll leave it to someone with library experience to add checkboxes for those two attributes, if necessary.",
      "EditableFormat": "markdown",
      "HTML": "<p>That looks pretty neat.</p>\n<details><summary style=\"text-decoration: underline; cursor: pointer\">This is how I'd add links</summary>\n<p>Probably not the most efficient way to do it.</p>\n<pre><code>  &lt;function name=\"FormatExitList\" type=\"string\" parameters=\"preList, list, preFinal, postList\"&gt;\n    &lt;![CDATA[\n    result = \"\"\n    // first, the ones with descriptions\n    foreach (item, list) {\n      linkedexits = NewObjectList()\n      if (HasString (item, \"inroomdescription\")) {\n        desc = item.inroomdescription\n        if (IsRegexMatch (\"\\{.+\\}\", desc)) {\n          game.text_processor_this = item\n          desc =  ProcessTextSection (desc, QuickParams (\"linked_exits\", linkedexits))\n        }\n        if (not ListContains (linkedexits, item)) {\n          if (GetBoolean (item, \"inroomdescriptionlink\")) {\n            if (Instr (desc, item.alias) &gt; 0) desc = Replace (desc, item.alias, \"{exit:\" + item.name + \"}\")\n            else desc = \"{exit:\" + item.name + \":\" + desc + \"}\"\n            list add (linkedexits, item)\n          }\n          else if (GetBoolean (item, \"nolonk\")) {\n            list add (linkedexits, item)\n          }\n        }\n        result = result + desc + \" \"\n      }\n    }\n    result = LTrim(result)\n    list = ListExclude (list, linkedexits)\n\n    // Process exits without descriptions\n    listLength = ListCount(listFiltered)\n    if (listLength &gt; 0) {\n      count = 0\n      result = result + \" \" + preList + \" \"\n      foreach (item, listFiltered) {\n        result = result + item.alias\n        count = count + 1\n        if (count = listLength - 1) {\n          result = result + \" \" + preFinal + \" \"\n        }\n        else if (count &lt; listLength) {\n          result = result + \", \"\n        }\n      }\n      result = result + postList\n    }\n    return (result)\n  ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<p>This also expects a slight change of the text processor's \"{exit:\" command; which I've been using for other things anyway. This basically causes the text processor to maintain a list of exits that it's generated a link to.</p>\n<pre><code>  &lt;function name=\"ProcessTextCommand_Exit\" type=\"string\" parameters=\"section, data\"&gt;\n    &lt;![CDATA[\n    exitname = Mid(section, 6)\n    <em style=\"color: green\">// Was 'GetObject', which is silly. Should use the more appropriate function</em>\n    exit = <em style=\"color: blue\">ObjectForTextProcessor</em>(exitname)\n    if (exit = null) {\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\n    }\n    else {\n      <em style=\"color: green\">// Makes a list of linked exits that the calling function can check</em>\n<em style=\"color: blue\">      if (not DictionaryContains (data, \"linked_exits\")) dictionary add (data, \"linked_exits\", NewObjectList())\n      list add  (DictionaryItem (data, \"linked_exits\"), exit)</em>\n      verbs = GetDisplayVerbs(exit)\n      alias = GetDisplayAlias(exit)\n      command = LCase(StringListItem(verbs, 0)) + \" \" + alias\n      style = GetCurrentLinkTextFormat()\n      return (\"&lt;a style=\\\"\" + style + \"\\\" class=\\\"cmdlink exitlink\\\" data-elementid=\\\"\" + exit.name + \"\\\" data-command=\\\"\" + command + \"\\\"&gt;\" + alias + \"&lt;/a&gt;\")\n    }\n    ]]&gt;\n  &lt;/function&gt;</code></pre>\n</details>\n<p>(sorry to reply with code off the top of my head; my internet went down right after loading this page, so I'm not in a position to test it, upload the file somewhere, or do my job for a while. So thought it might be worth scribbling down the first thing that came to my mind)</p>\n<p>This one provides some flexibility to your links:</p>\n<ul>\n<li>The in-room description can be something like <code>A dark tunnel leads {exit:this}.</code> or <code>There is a heavy {exit:this:oaken door} opposite the fireplace.</code> (I figured making it work with 'this' would make it easier than messing about with named exits)</li>\n<li>If it doesn't have an exit link in the description, setting the exit's <code>inroomdescriptionlink</code> attribute to true will create a link. Either linking the item's alias if it appears in the in-room description, or the whole description otherwise.</li>\n<li>The list of exits without detailed descriptions will also include any that don't have a link in their description, unless they have the attribute <code>nolink</code>. I can see a few edge cases where this could be useful, and none where it would be a problem.\n<ul>\n<li>One example; <code>A stone staircase in one corner leads {exit:up_staircase3:up} and {exit:this:down}.</code> - allows the in-room description of one exit to mention another, so two exits can share a description.</li>\n</ul>\n</li>\n<li>I'll leave it to someone with library experience to add checkboxes for those two attributes, if necessary.</li>\n</ul>\n\n",
      "PostDate": "2020-07-13T14:20:34.2957164Z",
      "LastEditDate": "2023-05-13T23:10:07.9454533Z",
      "link": null
    }
  ]
}
