{
  "Topic": {
    "TopicId": "xwjqkxo0s0atcp16ku9foq",
    "ForumId": "3",
    "Title": "Downloadable Mac Version of Quest?",
    "LastUpdated": "2017-09-14T23:46:18.4680911Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "25ccba34-d011-41a3-9c7d-d85e51a51e3e",
      "UserId": 292235,
      "Username": "MurderPie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7e8349957f37b560ca88457800ce60e2?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, everyone! I'm super-duper new here (like, I've been working on my first text adventure for just a week), and I'm really excited to  get into the more complex parts of working with Quest. \r\n\r\nMy first setback today was the servers being down, haha, and I didn't get to work on my game at all today. So now I'm definitely wanting a desktop version so I can work on it even when servers are down! I see that there's a desktop version of Quest, but it's for Windows only. Are there plans to come out with a Mac version sometime? Or should I just keep plugging away at the browser version? (I mean, either way, I'll keep plugging away at the browser version for now.)\r\n\r\nAnyway, I'm _loving_ the Quest format so far. It's great for someone like me with zero experience coding, but an interest in learning a little. Thanks everyone for contributing to this great program!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, everyone! I'm super-duper new here (like, I've been working on my first text adventure for just a week), and I'm really excited to  get into the more complex parts of working with Quest.</p>\n<p>My first setback today was the servers being down, haha, and I didn't get to work on my game at all today. So now I'm definitely wanting a desktop version so I can work on it even when servers are down! I see that there's a desktop version of Quest, but it's for Windows only. Are there plans to come out with a Mac version sometime? Or should I just keep plugging away at the browser version? (I mean, either way, I'll keep plugging away at the browser version for now.)</p>\n<p>Anyway, I'm <em>loving</em> the Quest format so far. It's great for someone like me with zero experience coding, but an interest in learning a little. Thanks everyone for contributing to this great program!</p>\n\n",
      "PostDate": "2017-09-14T23:46:18.4680911Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fc770c29-78b8-48ae-b582-8a432f9657fd",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/FBcxPJRb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Uhh...I think there wasn't a plan for a mac version, but if I understand it correctly, plans for Quest Kit was to make Quest entirely browser based so it wouldn't need an operating system----just a browser window. I could be mistaken on this and I'm not sure if Quest Kit has been dropped but there ya go ^_^ Jay, Pixie and Pertex would be the best people to ask in my opinion as they are all expert programmers who have been around here for a very long time. \r\n\r\nAnonynn. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Uhh...I think there wasn't a plan for a mac version, but if I understand it correctly, plans for Quest Kit was to make Quest entirely browser based so it wouldn't need an operating system----just a browser window. I could be mistaken on this and I'm not sure if Quest Kit has been dropped but there ya go ^_^ Jay, Pixie and Pertex would be the best people to ask in my opinion as they are all expert programmers who have been around here for a very long time.</p>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2017-09-16T22:11:04.2449241Z",
      "LastEditDate": "2017-09-16T22:11:28.179465Z",
      "link": null
    },
    {
      "PostId": "7e84be8c-ffa4-457d-bc61-99949873d988",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is the latest news I've found regarding QuestKit:\r\n\r\nhttp://textadventures.co.uk/forum/questkit/topic/5852/is-questkit-still-happening",
      "EditableFormat": "markdown",
      "HTML": "<p>This is the latest news I've found regarding QuestKit:</p>\n<p>http://textadventures.co.uk/forum/questkit/topic/5852/is-questkit-still-happening</p>\n\n",
      "PostDate": "2017-09-17T04:40:42.3257021Z",
      "LastEditDate": "2017-09-17T04:46:21.1790543Z",
      "link": null
    },
    {
      "PostId": "247fc9aa-4553-4cea-80c5-b897344d578a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "QuestKit (\"quest v6.0\") is abandoned as Alex moved on before he completed it. Sometime, in the far future, when/if Pixie learns quest enough, he might finish it, but again, that's in the far future, as Alex created quest using a bunch of different programming languages and etc, so it'll take Pixie a long time. Alex has been developing quest for like 10 (or was it 20) years. That's a lot of stuff for Pixie to have to learn.\r\n\r\nhere: https://blog.textadventures.co.uk (scroll down a few articles, starting with 'meet the new team' article, and keep reading the articles after that for a bit, to learn about what is needed to learn quest, to be able to then have enough knowledge to continue on the QuestKit development)",
      "EditableFormat": "markdown",
      "HTML": "<p>QuestKit (\"quest v6.0\") is abandoned as Alex moved on before he completed it. Sometime, in the far future, when/if Pixie learns quest enough, he might finish it, but again, that's in the far future, as Alex created quest using a bunch of different programming languages and etc, so it'll take Pixie a long time. Alex has been developing quest for like 10 (or was it 20) years. That's a lot of stuff for Pixie to have to learn.</p>\n<p>here: https://blog.textadventures.co.uk (scroll down a few articles, starting with 'meet the new team' article, and keep reading the articles after that for a bit, to learn about what is needed to learn quest, to be able to then have enough knowledge to continue on the QuestKit development)</p>\n\n",
      "PostDate": "2017-09-27T07:36:01.5998384Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c48b8b36-3139-4636-8ffa-448e93f089fa",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Alex has been developing quest for like 10 (or was it 20) years. \r\n\r\nI have just been looking back at old blog posts; Quest 1.0 was released 7/Nov/98, so nearly 20.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Alex has been developing quest for like 10 (or was it 20) years.</p>\n</blockquote>\n<p>I have just been looking back at old blog posts; Quest 1.0 was released 7/Nov/98, so nearly 20.</p>\n\n",
      "PostDate": "2017-09-27T07:44:31.3707582Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "338c6428-1853-4ee7-b4e5-c2a522dbc351",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "1998 is 20 years... Almost. I was born in 1997. I'm 20 now...",
      "EditableFormat": "markdown",
      "HTML": "<p>1998 is 20 years... Almost. I was born in 1997. I'm 20 now...</p>\n\n",
      "PostDate": "2017-09-27T14:23:11.3558969Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2af471aa-5d4f-4c31-b804-d973a7e59730",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 20s go by so fast, sighs. In the blink of an eye, you're now in your 30s going on 40... and it hits you, that you're no longer young.\r\n\r\n(under 30 is young, in my own personal view)\r\n\r\n(and the years just go faster and faster, finding yourself... 40, 50, 60, 70, etc. You're left wondering where all the time as gone...)\r\n\r\n(0 to 20 seems like forever, 1 year feels like 10 years from 0 to 10, and then 1 year feels like 5 years from 10 to 20)\r\n\r\n(from 20 on, 10 years feel like 1 year...)\r\n\r\n(Time truly is the most valuable resource to organisms, at least until technology provides aging-immunity/immortality)\r\n\r\n(Jupiter Ascending movie has this plot/theme to it, but it's done insignificantly/poorly, and is a poor rip-off of Wolf's Rain anime series)",
      "EditableFormat": "markdown",
      "HTML": "<p>the 20s go by so fast, sighs. In the blink of an eye, you're now in your 30s going on 40... and it hits you, that you're no longer young.</p>\n<p>(under 30 is young, in my own personal view)</p>\n<p>(and the years just go faster and faster, finding yourself... 40, 50, 60, 70, etc. You're left wondering where all the time as gone...)</p>\n<p>(0 to 20 seems like forever, 1 year feels like 10 years from 0 to 10, and then 1 year feels like 5 years from 10 to 20)</p>\n<p>(from 20 on, 10 years feel like 1 year...)</p>\n<p>(Time truly is the most valuable resource to organisms, at least until technology provides aging-immunity/immortality)</p>\n<p>(Jupiter Ascending movie has this plot/theme to it, but it's done insignificantly/poorly, and is a poor rip-off of Wolf's Rain anime series)</p>\n\n",
      "PostDate": "2017-09-28T06:59:55.4472215Z",
      "LastEditDate": "2017-09-28T07:08:02.4388962Z",
      "link": null
    },
    {
      "PostId": "9699692d-8ab6-492c-80b0-e118844e6269",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Has anyone figured out how Alex built Quest 6 outside of Windows?\r\n\r\n---\r\nI've followed these steps (after navigating to the Player directory):\r\n\r\nhttps://github.com/textadventures/quest/tree/v6#quest-6\r\n\r\nThis runs the player in your browser.\r\n\r\nIt works in Arch Linux and Linux Mint.  (I have no Mac.)\r\n\r\nIt will load blank.aslx.  You can 'play' it, but none of the exits lead anywhere (it's blank.aslx)...\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/31053281-bdc8439c-a65f-11e7-94a9-81d2eaa1362a.png)\r\n\r\n---\r\n\r\nAnyway, I'm in Linux, so I opened blank.aslx in Notepadqq, and I added an object in the one room that existed...  and that rendered the game unplayable.  \r\n\r\n(I guess it needs to be built using Quest 6?  I'm about to log back into Windows and test this out.)\r\n\r\n---\r\nAlso, every time I edit the game, I have to stop **npm run web**, then run **gulp asl4**, **gulp**, and **npm run web** again.  Then refreshing the browser starts the game back up.  (I'm sure I'm probably missing something...)\r\n\r\n---\r\nHas anyone (besides Alex) had any success building Quest 6 under Linux or Mac?\r\n\r\n---\r\n>Jupiter Ascending movie has this plot/theme to it, but it's done insignificantly/poorly\r\n\r\n...and that's sugar-coated.  I like bad movies, and that movie is unwatchable.  I mean... I watched the whole thing once, attentively, expecting ***something*** to not be bad... but, the Honest Trailer guys are right:  those guys couldn't even kill Sean Bean right!  (If you've suffered that 'movie', and you haven't seen the Honest Trailer for it, go search!  It's on YouTube, and it almost makes it worth having watched the 'film'.)\r\n\r\n---\r\nIt seems to me, and this is a WILD theory, that I need to learn to compile a Visual Basic project using MonoDevelop, or Mono-something...\r\n\r\n...and I wonder if the Quest 6 Editor ever ran under any OS other than Windows...\r\n\r\nThe screenshot Alex posted is of a game running, not being edited.\r\n\r\n![image](http://textadventures.co.uk/attachment/1460)\r\n\r\nhttp://textadventures.co.uk/forum/questkit/topic/5852/is-questkit-still-happening#40529\r\n\r\n---\r\nUPDATE:\r\n\r\nI made a game with Quest 6, then copied it to the player directory, ran all of the commands, and it loaded in the browser.  No commands work that way though (although they do work when I play in the offline player (5.7), but the compass throws errors).\r\n\r\n\r\n<details><summary>Game Code</summary>\r\n\r\n<details><summary>This is a SERIOUSLY long code!</summary>\r\n```\r\n<!--Saved by Quest 6.0.6482.3921-->\r\n<asl version=\"550\">\r\n  <implied element=\"object\" property=\"alt\" type=\"simplestringlist\" />\r\n  <implied element=\"command\" property=\"pattern\" type=\"simplepattern\" />\r\n  <implied element=\"command\" property=\"script\" type=\"script\" />\r\n  <implied element=\"command\" property=\"multiple\" type=\"AssociatedScope\" />\r\n  <implied element=\"object\" property=\"displayverbs\" type=\"simplestringlist\" />\r\n  <implied element=\"object\" property=\"inventoryverbs\" type=\"simplestringlist\" />\r\n  <implied element=\"walkthrough\" property=\"steps\" type=\"simplestringlist\" />\r\n  <implied element=\"timer\" property=\"interval\" type=\"int\" />\r\n  <implied element=\"timer\" property=\"script\" type=\"script\" />\r\n  <implied element=\"turnscript\" property=\"script\" type=\"script\" />\r\n  <template name=\"LanguageId\">en</template>\r\n  <template name=\"UnresolvedObject\">I can't see that.</template>\r\n  <template name=\"UnresolvedLocation\">You can't go there.</template>\r\n  <template name=\"DefaultObjectDescription\">Nothing out of the ordinary.</template>\r\n  <template name=\"DefaultSelfDescription\">Looking good.</template>\r\n  <template name=\"SeeListHeader\">You can see</template>\r\n  <template name=\"GoListHeader\">You can go</template>\r\n  <template name=\"And\">and</template>\r\n  <template name=\"Or\">or</template>\r\n  <template name=\"NothingToUndo\">Nothing to undo!</template>\r\n  <template name=\"NotCarryingAnything\">You are not carrying anything.</template>\r\n  <template name=\"CarryingListHeader\">You are carrying</template>\r\n  <template name=\"UnrecognisedCommand\">I don't understand your command.</template>\r\n  <template name=\"YouAreIn\">You are in</template>\r\n  <template name=\"LookAt\">Look at</template>\r\n  <template name=\"Take\">Take</template>\r\n  <template name=\"SpeakTo\">Speak to</template>\r\n  <template name=\"Use\">Use</template>\r\n  <template name=\"Drop\">Drop</template>\r\n  <template name=\"GoTo\">Go to</template>\r\n  <template name=\"Go\">Go</template>\r\n  <template name=\"SwitchOn\">Switch on</template>\r\n  <template name=\"SwitchOff\">Switch off</template>\r\n  <template name=\"Open\">Open</template>\r\n  <template name=\"Close\">Close</template>\r\n  <template name=\"Eat\">Eat</template>\r\n  <template name=\"NeutralGender\">it</template>\r\n  <template name=\"MaleGender\">he</template>\r\n  <template name=\"FemaleGender\">she</template>\r\n  <template name=\"SelfGender\">you</template>\r\n  <template name=\"NeutralPluralGender\">they</template>\r\n  <template name=\"MalePluralGender\">they</template>\r\n  <template name=\"FemalePluralGender\">they</template>\r\n  <template name=\"NeutralArticle\">it</template>\r\n  <template name=\"MaleArticle\">him</template>\r\n  <template name=\"FemaleArticle\">her</template>\r\n  <template name=\"SelfArticle\">yourself</template>\r\n  <template name=\"NeutralPluralArticle\">them</template>\r\n  <template name=\"MalePluralArticle\">them</template>\r\n  <template name=\"FemalePluralArticle\">them</template>\r\n  <template name=\"SelfAlias\">me</template>\r\n  <template name=\"SelfAlt\">myself; self</template>\r\n  <template name=\"AllObjects\">all; everything</template>\r\n  <template name=\"ParserIgnorePrefixes\">the; a; an</template>\r\n  <template name=\"CannotDoThat\">You can't do that.</template>\r\n  <template name=\"Done\">Done.</template>\r\n  <template name=\"ContainerContentsPrefix\">containing</template>\r\n  <template name=\"SurfaceContentsPrefix\">on which there is</template>\r\n  <template name=\"LockedExit\">That way is locked.</template>\r\n  <template name=\"NoKey\">You do not have the key.</template>\r\n  <template name=\"UnlockMessage\">Unlocked.</template>\r\n  <template name=\"LockMessage\">Locked.</template>\r\n  <template name=\"DefaultOops\">There is nothing to correct.</template>\r\n  <template name=\"VerbObjectSeparator\">with; using</template>\r\n  <template name=\"DefaultMultiObjectVerb\">That doesn't work.</template>\r\n  <template name=\"MultiObjectVerbMenu\">With which object?</template>\r\n  <template name=\"UseOnMenu\">On which object?</template>\r\n  <template name=\"GiveToMenu\">To which object?</template>\r\n  <template name=\"NoObjectsAvailable\">There are no objects available to do that with.</template>\r\n  <template name=\"Yes\">Yes</template>\r\n  <template name=\"No\">No</template>\r\n  <template name=\"By\">by</template>\r\n  <template name=\"CompassNW\">northwest</template>\r\n  <template name=\"CompassN\">north</template>\r\n  <template name=\"CompassNE\">northeast</template>\r\n  <template name=\"CompassW\">west</template>\r\n  <template name=\"CompassE\">east</template>\r\n  <template name=\"CompassSW\">southwest</template>\r\n  <template name=\"CompassS\">south</template>\r\n  <template name=\"CompassSE\">southeast</template>\r\n  <template name=\"CompassUp\">up</template>\r\n  <template name=\"CompassDown\">down</template>\r\n  <template name=\"CompassIn\">in</template>\r\n  <template name=\"CompassOut\">out</template>\r\n  <template name=\"CompassDirectionPrefix\"></template>\r\n  <template name=\"CompassDirectionSuffix\"></template>\r\n  <template name=\"UpDownDirectionPrefix\"></template>\r\n  <template name=\"UpDownDirectionSuffix\"></template>\r\n  <template name=\"InOutDirectionPrefix\"></template>\r\n  <template name=\"InOutDirectionSuffix\"></template>\r\n  <template name=\"CompassNWShort\">nw</template>\r\n  <template name=\"CompassNShort\">n</template>\r\n  <template name=\"CompassNEShort\">ne</template>\r\n  <template name=\"CompassWShort\">w</template>\r\n  <template name=\"CompassEShort\">e</template>\r\n  <template name=\"CompassSWShort\">sw</template>\r\n  <template name=\"CompassSShort\">s</template>\r\n  <template name=\"CompassSEShort\">se</template>\r\n  <template name=\"CompassUpShort\">u</template>\r\n  <template name=\"CompassDownShort\">d</template>\r\n  <template name=\"CompassInShort\"></template>\r\n  <template name=\"CompassOutShort\">o</template>\r\n  <template name=\"InventoryLabel\">Inventory</template>\r\n  <template name=\"StatusLabel\">Status</template>\r\n  <template name=\"PlacesObjectsLabel\">Places and Objects</template>\r\n  <template name=\"CompassLabel\">Compass</template>\r\n  <template name=\"InButtonLabel\">in</template>\r\n  <template name=\"OutButtonLabel\">out</template>\r\n  <template name=\"EmptyListLabel\">(empty)</template>\r\n  <template name=\"NothingSelectedLabel\">(nothing selected)</template>\r\n  <template name=\"TypeHereLabel\">Type here...</template>\r\n  <template name=\"ContinueLabel\">Continue...</template>\r\n  <template name=\"go\"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>\r\n  <template name=\"lookdir\"><![CDATA[^look (?<exit>(?:n|s)(?:e|w)?)|out|up|down|(?:nor|sou)th(?:east|west)?$]]></template>\r\n  <template name=\"look\">^(?:l|look)(?: around(?: you(?:rself)?)?)?$</template>\r\n  <template name=\"lookat\">look at; x; examine; exam; ex</template>\r\n  <template name=\"take\">take; get; pick up</template>\r\n  <template name=\"undo\">^undo$</template>\r\n  <template name=\"inventory\">^i$|^inv$|^inventory$</template>\r\n  <template name=\"quit\">^quit$</template>\r\n  <template name=\"drop\">drop</template>\r\n  <template name=\"use\">use</template>\r\n  <template name=\"speakto\">speak to; speak; talk to; talk</template>\r\n  <template name=\"open\">open</template>\r\n  <template name=\"close\">close</template>\r\n  <template name=\"put\"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></template>\r\n  <template name=\"removefrom\"><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></template>\r\n  <template name=\"ask\"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></template>\r\n  <template name=\"tell\"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></template>\r\n  <template name=\"oops\"><![CDATA[^oops (?<text>.*)$]]></template>\r\n  <template name=\"buy\">buy</template>\r\n  <template name=\"climb\">climb</template>\r\n  <template name=\"drink\">drink</template>\r\n  <template name=\"eat\">eat</template>\r\n  <template name=\"givesingle\">give</template>\r\n  <template name=\"give\"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></template>\r\n  <template name=\"hit\">hit</template>\r\n  <template name=\"kill\">kill</template>\r\n  <template name=\"kiss\">kiss</template>\r\n  <template name=\"knock\">knock</template>\r\n  <template name=\"lick\">lick</template>\r\n  <template name=\"lie\">lie on; lie upon; lie down on; lie down upon</template>\r\n  <template name=\"listento\">listen to</template>\r\n  <template name=\"lock\">lock</template>\r\n  <template name=\"move\">move</template>\r\n  <template name=\"pull\">pull</template>\r\n  <template name=\"push\">push</template>\r\n  <template name=\"read\">read</template>\r\n  <template name=\"search\">search</template>\r\n  <template name=\"show\">show</template>\r\n  <template name=\"sit\">sit on; sit upon; sit down on; sit down upon</template>\r\n  <template name=\"smell\">smell; sniff</template>\r\n  <template name=\"taste\">taste</template>\r\n  <template name=\"throw\">throw</template>\r\n  <template name=\"tie\">tie</template>\r\n  <template name=\"touch\">touch</template>\r\n  <template name=\"turnon\">turn on; turn #object# on; switch on; switch #object# on</template>\r\n  <template name=\"turnoff\">turn off; turn #object# off; switch off; switch #object# off</template>\r\n  <template name=\"turn\">turn</template>\r\n  <template name=\"unlock\">unlock</template>\r\n  <template name=\"untie\">untie</template>\r\n  <template name=\"useon\"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></template>\r\n  <template name=\"wear\">wear</template>\r\n  <template name=\"listen\">^listen$</template>\r\n  <template name=\"DefaultListen\">You can't hear much.</template>\r\n  <template name=\"jump\">^jump$</template>\r\n  <template name=\"DefaultJump\">You jump, but nothing happens.</template>\r\n  <template name=\"sitdown\">^sit$|^sit down$</template>\r\n  <template name=\"DefaultSitDown\">No time for lounging about now.</template>\r\n  <template name=\"liedown\">^lie$|^lie down$</template>\r\n  <template name=\"DefaultLieDown\">No time for lounging about now.</template>\r\n  <template name=\"sleep\">^sleep$|^rest$</template>\r\n  <template name=\"DefaultSleep\">No time for lounging about now.</template>\r\n  <template name=\"wait\">^wait$|^z$</template>\r\n  <template name=\"DefaultWait\">Time passes.</template>\r\n  <template name=\"xyzzy\">^xyzzy$</template>\r\n  <template name=\"DefaultXyzzy\">Surprisingly, absolutely nothing happens.</template>\r\n  <template name=\"help\">^help$|^\\?$</template>\r\n  <template name=\"save\">^save$</template>\r\n  <template name=\"DefaultHelp\"><![CDATA[<u>Quick Help</u><br/><br/>\r\n<b>- Objects:</b>  Try LOOK AT..., SPEAK TO..., TAKE..., DROP..., OPEN..., GIVE... TO..., USE... ON/WITH...<br/>\r\n<b>- Inventory:</b>  See which items you are carrying by typing I, INV or INVENTORY.<br/>\r\n<b>- Moving around:</b>  Press the compass buttons, or type GO NORTH, SOUTH, E, GO TO...<br/>\r\n<b>- Shortcuts:</b>  Press the up arrow and down arrow to scroll through commands you have already typed in. Try X... as a shortcut for LOOK AT...]]></template>\r\n  <template name=\"LanguageSpecificObjectTypes\"></template>\r\n  <template name=\"EditorVerbDefaultExpression\">\"You can't #verb# \" + object.article + \".\"</template>\r\n  <dynamictemplate name=\"TakeSuccessful\">\"You pick \" + object.article + \" up.\"</dynamictemplate>\r\n  <dynamictemplate name=\"TakeUnsuccessful\">\"You can't take \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"FullInventory\">WriteVerb(object, \"be\") + \" too heavy to be taken.\"</dynamictemplate>\r\n  <dynamictemplate name=\"MaxObjectsInInventory\">\"You can't carry any more items.\"</dynamictemplate>\r\n  <dynamictemplate name=\"MaxObjectsInContainer\">\"You can't put more items in \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DropSuccessful\">\"You drop \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DropUnsuccessful\">\"You can't drop \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyTaken\">\"You are already carrying \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"NotCarrying\">\"You are not carrying \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"CantUse\">\"You can't use \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"CantGive\">\"You can't give \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultSpeakTo\">WriteVerb(object, \"say\") + \" nothing.\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectNotOpen\">CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyOpen\">WriteVerb(object, \"be\") + \" already open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyClosed\">WriteVerb(object, \"be\") + \" already closed.\"</dynamictemplate>\r\n  <dynamictemplate name=\"CantOpen\">\"You can't open \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"CantClose\">\"You can't close \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"OpenSuccessful\">\"You open \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"CloseSuccessful\">\"You close \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyThere\">WriteVerb(object, \"be\") + \" already there.\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectContains\">WriteVerb(object, \"contain\")</dynamictemplate>\r\n  <dynamictemplate name=\"ContainerFull\">WriteVerb(object, \"be\") + \" full.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DisambiguateMenu\">\"Please choose which '\" + text + \"' you mean:\"</dynamictemplate>\r\n  <dynamictemplate name=\"UndoTurn\">\"Undo: \" + text</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultAsk\">WriteVerb(object, \"do\") + \" not reply.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTell\">WriteVerb(object, \"do\") + \" not reply.\"</dynamictemplate>\r\n  <dynamictemplate name=\"LockedObject\">WriteVerb(object, \"be\") + \" locked.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyLocked\">WriteVerb(object, \"be\") + \" already locked.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadyUnlocked\">WriteVerb(object, \"be\") + \" already unlocked.\"</dynamictemplate>\r\n  <dynamictemplate name=\"CannotLockOpen\">\"You cannot lock \" + object.article + \" when \" + object.gender + \" \" + Conjugate(object, \"be\") + \" open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadySwitchedOn\">WriteVerb(object, \"be\") + \" already switched on.\"</dynamictemplate>\r\n  <dynamictemplate name=\"AlreadySwitchedOff\">WriteVerb(object, \"be\") + \" already switched off.\"</dynamictemplate>\r\n  <dynamictemplate name=\"SwitchedOn\">\"You switch \" + object.article + \" on.\"</dynamictemplate>\r\n  <dynamictemplate name=\"SwitchedOff\">\"You switch \" + object.article + \" off.\"</dynamictemplate>\r\n  <dynamictemplate name=\"Eaten\">\"You eat \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectDoesNotContain\">CapFirst(GetDisplayAlias(object1)) + \" \" + Conjugate(object1, \"do\") + \" not contain \" + GetDisplayAlias(object2) + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"YouLooking\">\"You are looking \" + text +\".\"</dynamictemplate>\r\n  <dynamictemplate name=\"LookAtDarkness\">\"It is too dark to make anything out.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultBuy\">\"You can't buy \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultClimb\">\"You can't climb \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultDrink\">\"You can't drink \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultEat\">\"You can't eat \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultGive\">WriteVerb(object1, \"do\") + \" not want \" + object2.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultHit\">\"You can't hit \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultKill\">\"You can't kill \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultKiss\">\"You can't kiss \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultKnock\">\"You can't knock \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultLick\">\"You can't lick \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultLie\">\"You can't lie on \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultListenTo\">\"You listen, but \" + object.article + \" makes no sound.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultLock\">\"You can't lock \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultMove\">\"You can't move \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultPull\">\"You can't pull \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultPush\">\"You can't push \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultRead\">\"You can't read \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultSearch\">\"You can't search \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultShow\">\"You can't show \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultSit\">\"You can't sit on \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultSmell\">\"You sniff, but \" + object.article + \" doesn't smell of much.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTaste\">\"You can't taste \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultThrow\">\"You can't throw \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTie\">\"You can't tie \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTouch\">\"You can't touch \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTurnOn\">\"You can't turn \" + object.article + \" on.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTurnOff\">\"You can't turn \" + object.article + \" off.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultTurn\">\"You can't turn \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultUnlock\">\"You can't unlock \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultUntie\">\"You can't untie \" + object.article + \".\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultUseOn\">\"You can't use \" + object2.article + \" that way.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultWear\">\"You can't wear \" + object.article + \".\"</dynamictemplate>\r\n  <delegate name=\"AddScript\" parameters=\"object\" type=\"\" />\r\n  <delegate name=\"AssociatedScope\" parameters=\"\" type=\"objectlist\" />\r\n  <game name=\"test-q6\">\r\n    <gameid>55014cac-607a-4546-ba6c-94ccfc348e61</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <showpanes />\r\n  </game>\r\n  <command name=\"lookat\">\r\n    <pattern>look at #object#; x #object#; examine #object#; exam #object#; ex #object#</pattern>\r\n    <script>\r\n      if (GetBoolean(object, \"hidechildren\")) {\r\n        object.hidechildren = false\r\n      }\r\n      if (TypeOf(object, \"look\") = \"script\") {\r\n        do (object, \"look\")\r\n      }\r\n      else {\r\n        lookdesc = \"\"\r\n        if (HasString(object, \"look\")) {\r\n          lookdesc = object.look\r\n        }\r\n        if (LengthOf(lookdesc) = 0) {\r\n          lookdesc = Template(\"DefaultObjectDescription\")\r\n        }\r\n        if (GetBoolean(object, \"switchedon\")) {\r\n          if (HasString(object, \"switchedondesc\")) {\r\n            lookdesc = lookdesc + \" \" + object.switchedondesc\r\n          }\r\n        }\r\n        else {\r\n          if (HasString(object, \"switchedoffdesc\")) {\r\n            lookdesc = lookdesc + \" \" + object.switchedoffdesc\r\n          }\r\n        }\r\n        isDark = CheckDarkness()\r\n        if (isDark and not GetBoolean(object, \"lightsource\")) {\r\n          lookdesc = DynamicTemplate(\"LookAtDarkness\", object)\r\n        }\r\n        msg (lookdesc)\r\n      }\r\n      ListObjectContents (object)\r\n    </script>\r\n  </command>\r\n  <command name=\"take\">\r\n    <pattern>take #object#; get #object#; pick up #object#</pattern>\r\n    <multiple>\r\n      takeList = NewObjectList()\r\n      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {\r\n        if (obj.parent = game.pov.parent) {\r\n          list add (takeList, obj)\r\n        }\r\n      }\r\n      return (takeList)\r\n    </multiple>\r\n    <script>\r\n      foreach (obj, object) {\r\n        DoTake (obj, multiple)\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"drop\">\r\n    <pattern>drop #object#</pattern>\r\n    <multiple>\r\n      return (GetDirectChildren(game.pov))\r\n    </multiple>\r\n    <script>\r\n      foreach (obj, object) {\r\n        DoDrop (obj, multiple)\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"use\">\r\n    <pattern>use #object#</pattern>\r\n    <script><![CDATA[\r\n      if (HasScript(object, \"use\")) {\r\n        do (object, \"use\")\r\n      }\r\n      else {\r\n        if (GetBoolean(object, \"use\")) {\r\n          menu = NewStringDictionary()\r\n          candidates = NewObjectList()\r\n          candidates = CreateUseMenuList (object)\r\n          if (ListCount(candidates) = 0) {\r\n            msg (Template(\"NoObjectsAvailable\"))\r\n          }\r\n          else {\r\n            GenerateMenuChoices (menu, candidates)\r\n            game.pov.usemenuobject = object\r\n            if (HasString(object, \"usemenuprompt\")) {\r\n              menucaption = object.usemenuprompt\r\n            }\r\n            else {\r\n              menucaption = Template(\"UseOnMenu\")\r\n            }\r\n            ShowMenu (menucaption, menu, true) {\r\n              if (result <> null) {\r\n                HandleUseOn (game.pov.usemenuobject, GetObject(result))\r\n                game.pov.usemenuobject = null\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          msg (DynamicTemplate(\"CantUse\", object))\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <command name=\"undo\">\r\n    <pattern type=\"string\">^undo$</pattern>\r\n    <isundo />\r\n    <script>\r\n      undo\r\n    </script>\r\n  </command>\r\n  <command name=\"inventory\">\r\n    <pattern type=\"string\">^i$|^inv$|^inventory$</pattern>\r\n    <script>\r\n      list = FormatObjectList(Template(\"CarryingListHeader\"), game.pov, Template(\"And\"), \".\")\r\n      if (list = \"\") {\r\n        msg (Template(\"NotCarryingAnything\"))\r\n      }\r\n      else {\r\n        msg (list)\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"look\">\r\n    <pattern type=\"string\">^(?:l|look)(?: around(?: you(?:rself)?)?)?$</pattern>\r\n    <script>\r\n      ShowRoomDescription\r\n    </script>\r\n  </command>\r\n  <command name=\"lookdir\">\r\n    <pattern type=\"string\"><![CDATA[^look (?<exit>(?:n|s)(?:e|w)?)|out|up|down|(?:nor|sou)th(?:east|west)?$]]></pattern>\r\n    <script><![CDATA[\r\n      if (HasScript(exit, \"look\")) {\r\n        do (exit, \"look\")\r\n      }\r\n      else {\r\n        message = DynamicTemplate(\"YouLooking\",exit.alias)\r\n        if (HasString(exit, \"look\")) {\r\n          if (exit.look <> \"\") {\r\n            message = exit.look\r\n          }\r\n        }\r\n        if (exit.locked) {\r\n          if (HasString(exit,\"lockmessage\")) {\r\n            lockmessage = exit.lockmessage\r\n          }\r\n          else {\r\n            lockmessage = Template(\"LockedExit\")\r\n          }\r\n          msg (message+\" \"+lockmessage)\r\n        }\r\n        else {\r\n          msg (message)\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <command name=\"quit\">\r\n    <pattern type=\"string\">^quit$</pattern>\r\n    <script>\r\n      request (Quit, \"\")\r\n    </script>\r\n  </command>\r\n  <command name=\"go\">\r\n    <pattern type=\"string\"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <unresolved>You can't go there.</unresolved>\r\n    <script>\r\n      if (exit.visible) {\r\n        if (exit.locked) {\r\n          msg (exit.lockmessage)\r\n        }\r\n        else if (exit.runscript) {\r\n          if (HasScript(exit, \"script\")) {\r\n            do (exit, \"script\")\r\n          }\r\n        }\r\n        else if (exit.lookonly) {\r\n          msg (\"You can't go there.\")\r\n        }\r\n        else {\r\n          game.pov.parent = exit.to\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You can't go there.\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"open\">\r\n    <pattern>open #object#</pattern>\r\n    <script>\r\n      TryOpenClose (true, object)\r\n    </script>\r\n  </command>\r\n  <command name=\"close\">\r\n    <pattern>close #object#</pattern>\r\n    <script>\r\n      TryOpenClose (false, object)\r\n    </script>\r\n  </command>\r\n  <command name=\"put\">\r\n    <pattern type=\"string\"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      // put object1 in/on object 2\r\n      if (object1.parent = object2) {\r\n        msg (DynamicTemplate(\"AlreadyThere\", object1))\r\n      }\r\n      else if (not ListContains(ScopeInventory(), object1)) {\r\n        msg (DynamicTemplate(\"NotCarrying\", object1))\r\n      }\r\n      else if (not ListContains(ScopeReachable(), object1)) {\r\n        msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object1)))\r\n      }\r\n      else if (not ListContains(ScopeReachable(), object2)) {\r\n        msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object2)))\r\n      }\r\n      else if (not object2.container) {\r\n        msg (Template(\"CannotDoThat\"))\r\n      }\r\n      else if (not object2.isopen) {\r\n        msg (DynamicTemplate(\"ObjectNotOpen\", object2))\r\n      }\r\n      else {\r\n        if (GetBoolean(object2, \"hidechildren\")) {\r\n          object2.hidechildren = false\r\n        }\r\n        if (HasDelegateImplementation(object2, \"addscript\")) {\r\n          rundelegate (object2, \"addscript\", object1)\r\n        }\r\n        else {\r\n          object1.parent = object2\r\n          msg (Template(\"Done\"))\r\n        }\r\n      }\r\n      // must be carrying object1\r\n      // object1 must not be inside a closed container\r\n      // object2 must not be inside a closed container\r\n      // object2 must be an open container or surface\r\n    </script>\r\n  </command>\r\n  <command name=\"removefrom\">\r\n    <pattern type=\"string\"><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      // remove object1 from object2\r\n      // if object2 does indeed contain object1, this is a synonym for \"take object1\"\r\n      if (not Contains(object2, object1)) {\r\n        msg (DynamicTemplate(\"ObjectDoesNotContain\", object2, object1))\r\n      }\r\n      else {\r\n        DoTake (object1, false)\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"givesingle\">\r\n    <pattern>give #object#</pattern>\r\n    <script><![CDATA[\r\n      if (HasScript(object, \"givesingle\")) {\r\n        do (object, \"givesingle\")\r\n      }\r\n      else {\r\n        if (GetBoolean(object, \"givesingle\")) {\r\n          menu = NewStringDictionary()\r\n          candidates = NewObjectList()\r\n          candidates = CreateGiveMenuList (object)\r\n          if (ListCount(candidates) = 0) {\r\n            msg (Template(\"NoObjectsAvailable\"))\r\n          }\r\n          else {\r\n            GenerateMenuChoices (menu, candidates)\r\n            game.pov.givemenuobject = object\r\n            if (HasString(object, \"givemenuprompt\")) {\r\n              menucaption = object.givemenuprompt\r\n            }\r\n            else {\r\n              menucaption = Template(\"GiveToMenu\")\r\n            }\r\n            ShowMenu (menucaption, menu, true) {\r\n              if (result <> null) {\r\n                HandleGiveTo (game.pov.givemenuobject, GetObject(result))\r\n                game.pov.givemenuobject = null\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          msg (DynamicTemplate(\"CantGive\", object))\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <command name=\"give\">\r\n    <pattern type=\"string\"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      HandleGiveTo (object1, object2)\r\n    </script>\r\n  </command>\r\n  <command name=\"useon\">\r\n    <pattern type=\"string\"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      HandleUseOn (object1, object2)\r\n    </script>\r\n  </command>\r\n  <command name=\"ask\">\r\n    <pattern type=\"string\"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></pattern>\r\n    <script>\r\n      DoAskTell (object, text, \"ask\", \"askdefault\", \"DefaultAsk\")\r\n    </script>\r\n  </command>\r\n  <command name=\"tell\">\r\n    <pattern type=\"string\"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></pattern>\r\n    <script>\r\n      DoAskTell (object, text, \"tell\", \"telldefault\", \"DefaultTell\")\r\n    </script>\r\n  </command>\r\n  <command name=\"oops\">\r\n    <pattern type=\"string\"><![CDATA[^oops (?<text>.*)$]]></pattern>\r\n    <isoops />\r\n    <script><![CDATA[\r\n      hasoops = false\r\n      if (HasAttribute(game, \"unresolvedcommand\")) {\r\n        if (game.unresolvedcommand <> null) {\r\n          hasoops = true\r\n        }\r\n      }\r\n      if (not hasoops) {\r\n        msg (Template(\"DefaultOops\"))\r\n      }\r\n      else {\r\n        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)\r\n        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)\r\n        HandleSingleCommandPattern (\"\", game.unresolvedcommand, game.unresolvedcommandvarlist)\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <verb name=\"speak\">\r\n    <pattern>speak to #object#; speak #object#; talk to #object#; talk #object#</pattern>\r\n    <property>speak</property>\r\n    <defaulttemplate>DefaultSpeakTo</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"buy\">\r\n    <pattern>buy #object#</pattern>\r\n    <property>buy</property>\r\n    <defaulttemplate>DefaultBuy</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"climb\">\r\n    <pattern>climb #object#</pattern>\r\n    <property>climb</property>\r\n    <defaulttemplate>DefaultClimb</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"drink\">\r\n    <pattern>drink #object#</pattern>\r\n    <property>drink</property>\r\n    <defaulttemplate>DefaultDrink</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"eat\">\r\n    <pattern>eat #object#</pattern>\r\n    <property>eat</property>\r\n    <defaulttemplate>DefaultEat</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"hit\">\r\n    <pattern>hit #object#</pattern>\r\n    <property>hit</property>\r\n    <defaulttemplate>DefaultHit</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"kill\">\r\n    <pattern>kill #object#</pattern>\r\n    <property>kill</property>\r\n    <defaulttemplate>DefaultKill</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"kiss\">\r\n    <pattern>kiss #object#</pattern>\r\n    <property>kiss</property>\r\n    <defaulttemplate>DefaultKiss</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"knock\">\r\n    <pattern>knock #object#</pattern>\r\n    <property>knock</property>\r\n    <defaulttemplate>DefaultKnock</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"lick\">\r\n    <pattern>lick #object#</pattern>\r\n    <property>lick</property>\r\n    <defaulttemplate>DefaultLick</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"lieon\">\r\n    <pattern>lie on #object#; lie upon #object#; lie down on #object#; lie down upon #object#</pattern>\r\n    <property>lie</property>\r\n    <defaulttemplate>DefaultLie</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"listento\">\r\n    <pattern>listen to #object#</pattern>\r\n    <property>listen</property>\r\n    <defaulttemplate>DefaultListenTo</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"lock\">\r\n    <pattern>lock #object#</pattern>\r\n    <property>lock</property>\r\n    <defaulttemplate>DefaultLock</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"move\">\r\n    <pattern>move #object#</pattern>\r\n    <property>move</property>\r\n    <defaulttemplate>DefaultMove</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"pull\">\r\n    <pattern>pull #object#</pattern>\r\n    <property>pull</property>\r\n    <defaulttemplate>DefaultPull</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"push\">\r\n    <pattern>push #object#</pattern>\r\n    <property>push</property>\r\n    <defaulttemplate>DefaultPush</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"read\">\r\n    <pattern>read #object#</pattern>\r\n    <property>read</property>\r\n    <defaulttemplate>DefaultRead</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"search\">\r\n    <pattern>search #object#</pattern>\r\n    <property>search</property>\r\n    <defaulttemplate>DefaultSearch</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"show\">\r\n    <pattern>show #object#</pattern>\r\n    <property>show</property>\r\n    <defaulttemplate>DefaultShow</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"siton\">\r\n    <pattern>sit on #object#; sit upon #object#; sit down on #object#; sit down upon #object#</pattern>\r\n    <property>sit</property>\r\n    <defaulttemplate>DefaultSit</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"smell\">\r\n    <pattern>smell #object#; sniff #object#</pattern>\r\n    <property>smell</property>\r\n    <defaulttemplate>DefaultSmell</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"taste\">\r\n    <pattern>taste #object#</pattern>\r\n    <property>taste</property>\r\n    <defaulttemplate>DefaultTaste</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"throw\">\r\n    <pattern>throw #object#</pattern>\r\n    <property>throw</property>\r\n    <defaulttemplate>DefaultThrow</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"tie\">\r\n    <pattern>tie #object#</pattern>\r\n    <property>tie</property>\r\n    <defaulttemplate>DefaultTie</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"touch\">\r\n    <pattern>touch #object#</pattern>\r\n    <property>touch</property>\r\n    <defaulttemplate>DefaultTouch</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"turnon\">\r\n    <pattern>turn on #object#; turn #object# on; switch on #object#; switch #object# on</pattern>\r\n    <property>turnon</property>\r\n    <defaulttemplate>DefaultTurnOn</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"turnoff\">\r\n    <pattern>turn off #object#; turn #object# off; switch off #object#; switch #object# off</pattern>\r\n    <property>turnoff</property>\r\n    <defaulttemplate>DefaultTurnOff</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"turn\">\r\n    <pattern>turn #object#</pattern>\r\n    <property>turn</property>\r\n    <defaulttemplate>DefaultTurn</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"unlock\">\r\n    <pattern>unlock #object#</pattern>\r\n    <property>unlock</property>\r\n    <defaulttemplate>DefaultUnlock</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"untie\">\r\n    <pattern>untie #object#</pattern>\r\n    <property>untie</property>\r\n    <defaulttemplate>DefaultUntie</defaulttemplate>\r\n  </verb>\r\n  <verb name=\"wear\">\r\n    <pattern>wear #object#</pattern>\r\n    <property>wear</property>\r\n    <defaulttemplate>DefaultWear</defaulttemplate>\r\n  </verb>\r\n  <command name=\"listen\">\r\n    <pattern type=\"string\">^listen$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultListen\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"jump\">\r\n    <pattern type=\"string\">^jump$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultJump\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"sit\">\r\n    <pattern type=\"string\">^sit$|^sit down$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultSitDown\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"lie\">\r\n    <pattern type=\"string\">^lie$|^lie down$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultLieDown\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"sleep\">\r\n    <pattern type=\"string\">^sleep$|^rest$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultSleep\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"wait\">\r\n    <pattern type=\"string\">^wait$|^z$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultWait\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"xyzzy\">\r\n    <pattern type=\"string\">^xyzzy$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultXyzzy\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"help\">\r\n    <pattern type=\"string\">^help$|^\\?$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultHelp\"))\r\n    </script>\r\n  </command>\r\n  <command name=\"save\">\r\n    <pattern type=\"string\">^save$</pattern>\r\n    <script>\r\n      request (RequestSave, \"\")\r\n    </script>\r\n  </command>\r\n  <object name=\"room\">\r\n    <description>You are in a big room.</description>\r\n    <object name=\"player\" />\r\n    <exit alias=\"north\" to=\"another room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <object name=\"thing\">\r\n      <take />\r\n    </object>\r\n  </object>\r\n  <object name=\"another room\">\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <type name=\"defaultverb\">\r\n    <separator>with; using</separator>\r\n    <multiobjectmenu>With which object?</multiobjectmenu>\r\n    <multiobjectdefault>That doesn't work.</multiobjectdefault>\r\n    <multiobjectmenuempty>There are no objects available to do that with.</multiobjectmenuempty>\r\n    <script type=\"script\"><![CDATA[\r\n      if (not IsDefined(\"object2\")) {\r\n        object2 = null\r\n      }\r\n      switch (TypeOf(object, this.property)) {\r\n        case (\"script\") {\r\n          if (object2 = null) {\r\n            do (object, this.property)\r\n          }\r\n          else {\r\n            msg (this.multiobjectdefault)\r\n          }\r\n        }\r\n        case (\"string\") {\r\n          if (object2 = null) {\r\n            msg (GetString(object, this.property))\r\n          }\r\n          else {\r\n            msg (this.multiobjectdefault)\r\n          }\r\n        }\r\n        case (\"scriptdictionary\") {\r\n          if (object2 <> null) {\r\n            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)\r\n          }\r\n          else {\r\n            menu = NewStringDictionary()\r\n            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())\r\n            excludelist = NewObjectList()\r\n            list add (excludelist, game.pov)\r\n            list add (excludelist, object)\r\n            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\n            if (ListCount(candidates) = 0) {\r\n              msg (this.multiobjectmenuempty)\r\n            }\r\n            else {\r\n              GenerateMenuChoices (menu, candidates)\r\n              game.pov.multiverb = this.property\r\n              game.pov.multiverbobject = object\r\n              game.pov.multiverbobjectdefault = this.multiobjectdefault\r\n              ShowMenu (this.multiobjectmenu, menu, true) {\r\n                if (result <> null) {\r\n                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)\r\n                  game.pov.multiverb = null\r\n                  game.pov.multiverbobject = null\r\n                  game.pov.multiverbobjectdefault = null\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        case (\"null\") {\r\n          if (this.defaulttext <> null) {\r\n            msg (this.defaulttext)\r\n          }\r\n          else if (this.defaulttemplate <> null) {\r\n            msg (DynamicTemplate(this.defaulttemplate, object))\r\n          }\r\n          else if (this.defaultexpression <> null) {\r\n            params = NewDictionary()\r\n            dictionary add (params, \"object\", object)\r\n            msg (Eval(this.defaultexpression, params))\r\n          }\r\n          else {\r\n            error (\"No verb response defined\")\r\n          }\r\n        }\r\n        default {\r\n          error (\"No verb response defined\")\r\n        }\r\n      }\r\n    ]]></script>\r\n  </type>\r\n  <type name=\"defaultgame\">\r\n    <enablehyperlinks />\r\n    <echocommand />\r\n    <echohyperlinks />\r\n    <showdescriptiononenter />\r\n    <autodescription />\r\n    <defaultfont>Georgia, serif</defaultfont>\r\n    <defaultfontsize type=\"int\">12</defaultfontsize>\r\n    <defaultbackground>White</defaultbackground>\r\n    <defaultforeground>Black</defaultforeground>\r\n    <defaultlinkforeground>Blue</defaultlinkforeground>\r\n    <backgroundimage type=\"string\"></backgroundimage>\r\n    <setbackgroundopacity type=\"boolean\">false</setbackgroundopacity>\r\n    <backgroundopacity type=\"double\">0.5</backgroundopacity>\r\n    <menufont>Arial</menufont>\r\n    <menufontsize type=\"int\">9</menufontsize>\r\n    <menubackground>White</menubackground>\r\n    <menuforeground>Black</menuforeground>\r\n    <menuhoverbackground>LightGrey</menuhoverbackground>\r\n    <menuhoverforeground>Black</menuhoverforeground>\r\n    <underlinehyperlinks />\r\n    <compassdirections type=\"stringlist\">\r\n      <value>northwest</value>\r\n      <value>north</value>\r\n      <value>northeast</value>\r\n      <value>west</value>\r\n      <value>east</value>\r\n      <value>southwest</value>\r\n      <value>south</value>\r\n      <value>southeast</value>\r\n      <value>up</value>\r\n      <value>down</value>\r\n      <value>in</value>\r\n      <value>out</value>\r\n    </compassdirections>\r\n    <clearframe />\r\n    <timeelapsed type=\"int\">0</timeelapsed>\r\n    <appendobjectdescription type=\"boolean\">false</appendobjectdescription>\r\n    <allobjects type=\"stringlist\">\r\n      <value>all</value>\r\n      <value>everything</value>\r\n    </allobjects>\r\n    <parserignoreprefixes type=\"stringlist\">\r\n      <value>the</value>\r\n      <value>a</value>\r\n      <value>an</value>\r\n    </parserignoreprefixes>\r\n    <displayroomdescriptiononstart />\r\n    <showpanes />\r\n    <showcommandbar />\r\n    <showlocation />\r\n    <setcustomwidth type=\"boolean\">false</setcustomwidth>\r\n    <customwidth type=\"int\">950</customwidth>\r\n    <setcustompadding type=\"boolean\">false</setcustompadding>\r\n    <custompaddingtop type=\"int\">30</custompaddingtop>\r\n    <custompaddingbottom type=\"int\">0</custompaddingbottom>\r\n    <custompaddingleft type=\"int\">20</custompaddingleft>\r\n    <custompaddingright type=\"int\">20</custompaddingright>\r\n    <showborder />\r\n    <showscore type=\"boolean\">false</showscore>\r\n    <showhealth type=\"boolean\">false</showhealth>\r\n    <showtitle />\r\n    <autodisplayverbs />\r\n    <attr name=\"autodescription_youarein\" type=\"int\">1</attr>\r\n    <attr name=\"autodescription_youcansee\" type=\"int\">2</attr>\r\n    <attr name=\"autodescription_youcango\" type=\"int\">3</attr>\r\n    <attr name=\"autodescription_description\" type=\"int\">4</attr>\r\n    <autodescription_youarein_useprefix />\r\n    <attr name=\"autodescription_youarein_newline\" type=\"boolean\">false</attr>\r\n    <attr name=\"autodescription_youcansee_newline\" type=\"boolean\">false</attr>\r\n    <attr name=\"autodescription_youcango_newline\" type=\"boolean\">false</attr>\r\n    <attr name=\"autodescription_description_newline\" type=\"boolean\">false</attr>\r\n    <changeroom_newline />\r\n    <attr name=\"command_newline\" type=\"boolean\">false</attr>\r\n    <description type=\"string\"></description>\r\n    <languageid>en</languageid>\r\n    <gridmap type=\"boolean\">false</gridmap>\r\n    <mapscale type=\"int\">30</mapscale>\r\n    <mapsize type=\"int\">300</mapsize>\r\n    <attr name=\"feature_lightdark\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_pictureframe\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_limitinventory\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_asktell\" type=\"boolean\">false</attr>\r\n    <deactivatecommandlinks type=\"boolean\">false</deactivatecommandlinks>\r\n    <multiplecommands type=\"boolean\">false</multiplecommands>\r\n    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg</publishfileextensions>\r\n    <changedpov type=\"script\">\r\n      InitPOV (oldvalue, game.pov)\r\n    </changedpov>\r\n  </type>\r\n  <type name=\"theme_novella\">\r\n    <setcustompadding />\r\n    <showborder type=\"boolean\">false</showborder>\r\n    <showpanes type=\"boolean\">false</showpanes>\r\n    <showlocation type=\"boolean\">false</showlocation>\r\n    <setcustomwidth />\r\n    <customwidth type=\"int\">650</customwidth>\r\n    <custompaddingtop type=\"int\">60</custompaddingtop>\r\n  </type>\r\n  <type name=\"theme_retro\">\r\n    <defaultbackground>Black</defaultbackground>\r\n    <defaultforeground>White</defaultforeground>\r\n    <defaultlinkforeground>White</defaultlinkforeground>\r\n    <defaultfont>'Lucida Console', Monaco, monospace</defaultfont>\r\n    <defaultwebfont>Press Start 2P</defaultwebfont>\r\n    <menufontsize type=\"int\">14</menufontsize>\r\n    <menufont>'Lucida Console', Monaco, monospace</menufont>\r\n    <menubackground>Black</menubackground>\r\n    <menuforeground>White</menuforeground>\r\n    <menuhoverbackground>GreenYellow</menuhoverbackground>\r\n  </type>\r\n  <type name=\"theme_typewriter\">\r\n    <setcustompadding />\r\n    <showborder type=\"boolean\">false</showborder>\r\n    <showpanes type=\"boolean\">false</showpanes>\r\n    <showlocation type=\"boolean\">false</showlocation>\r\n    <setcustomwidth />\r\n    <customwidth type=\"int\">650</customwidth>\r\n    <custompaddingtop type=\"int\">60</custompaddingtop>\r\n    <defaultfont>'Courier New', Courier, monospace</defaultfont>\r\n    <defaultwebfont>Special Elite</defaultwebfont>\r\n  </type>\r\n  <type name=\"theme_hotdogstand\">\r\n    <defaultbackground>Red</defaultbackground>\r\n    <defaultforeground>Yellow</defaultforeground>\r\n    <defaultlinkforeground>Yellow</defaultlinkforeground>\r\n    <defaultfont>'Comic Sans MS', cursive, sans-serif</defaultfont>\r\n    <menufontsize type=\"int\">14</menufontsize>\r\n    <menufont>Impact, Charcoal, sans-serif</menufont>\r\n    <menubackground>Red</menubackground>\r\n    <menuforeground>Yellow</menuforeground>\r\n    <menuhoverbackground>Black</menuhoverbackground>\r\n    <menuhoverforeground>Yellow</menuhoverforeground>\r\n  </type>\r\n  <type name=\"defaultobject\">\r\n    <visible />\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Take</value>\r\n    </displayverbs>\r\n    <inventoryverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Use</value>\r\n      <value>Drop</value>\r\n    </inventoryverbs>\r\n    <take type=\"boolean\">false</take>\r\n    <use type=\"boolean\">false</use>\r\n    <givesingle type=\"boolean\">false</givesingle>\r\n    <drop />\r\n    <gender>it</gender>\r\n    <article>it</article>\r\n    <isopen type=\"boolean\">false</isopen>\r\n    <open type=\"boolean\">false</open>\r\n    <close type=\"boolean\">false</close>\r\n    <container type=\"boolean\">false</container>\r\n    <descprefix>You are in</descprefix>\r\n    <objectslistprefix>You can see</objectslistprefix>\r\n    <exitslistprefix>You can go</exitslistprefix>\r\n    <contentsprefix>containing</contentsprefix>\r\n    <description type=\"string\"></description>\r\n    <scenery type=\"boolean\">false</scenery>\r\n    <hidechildren type=\"boolean\">false</hidechildren>\r\n    <listchildren type=\"boolean\">false</listchildren>\r\n    <usedefaultprefix />\r\n    <volume type=\"int\">0</volume>\r\n    <dark type=\"boolean\">false</dark>\r\n    <lightstrength type=\"string\"></lightstrength>\r\n    <darklevel type=\"boolean\">false</darklevel>\r\n    <attr name=\"grid_width\" type=\"int\">1</attr>\r\n    <attr name=\"grid_length\" type=\"int\">1</attr>\r\n    <attr name=\"grid_fill\">White</attr>\r\n    <attr name=\"grid_border\">Black</attr>\r\n    <attr name=\"grid_borderwidth\" type=\"int\">1</attr>\r\n    <attr name=\"grid_bordersides\" type=\"int\">15</attr>\r\n    <attr name=\"grid_render\" type=\"boolean\">false</attr>\r\n    <attr name=\"grid_label\" type=\"string\"></attr>\r\n    <grid_parent_offset_auto />\r\n    <attr name=\"grid_parent_offset_x\" type=\"int\">0</attr>\r\n    <attr name=\"grid_parent_offset_y\" type=\"int\">0</attr>\r\n    <attr name=\"pov_alias\">me</attr>\r\n    <pov_alt type=\"stringlist\">\r\n      <value>myself</value>\r\n      <value>self</value>\r\n    </pov_alt>\r\n    <attr name=\"pov_look\">Looking good.</attr>\r\n    <attr name=\"pov_gender\">you</attr>\r\n    <attr name=\"pov_article\">yourself</attr>\r\n    <attr name=\"feature_usegive\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_container\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_switchable\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_edible\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_player\" type=\"boolean\">false</attr>\r\n    <attr name=\"feature_lightdark\" type=\"boolean\">false</attr>\r\n    <changedparent type=\"script\">\r\n      if (game.pov = this) {\r\n        if (IsDefined(\"oldvalue\")) {\r\n          OnEnterRoom (oldvalue)\r\n        }\r\n        else {\r\n          OnEnterRoom (null)\r\n        }\r\n        if (game.gridmap) {\r\n          MergePOVCoordinates\r\n        }\r\n      }\r\n    </changedparent>\r\n    <changedisopen type=\"script\">\r\n      if (this.isopen and HasScript(this, \"onopen\")) {\r\n        do (this, \"onopen\")\r\n      }\r\n      if (not this.isopen and HasScript(this, \"onclose\")) {\r\n        do (this, \"onclose\")\r\n      }\r\n    </changedisopen>\r\n    <changedlocked type=\"script\">\r\n      if (this.locked and HasScript(this, \"onlock\")) {\r\n        do (this, \"onlock\")\r\n      }\r\n      if (not this.locked and HasScript(this, \"onunlock\")) {\r\n        do (this, \"onunlock\")\r\n      }\r\n    </changedlocked>\r\n    <changedswitchedon type=\"script\">\r\n      if (this.switchedon and HasScript(this, \"onswitchon\")) {\r\n        do (this, \"onswitchon\")\r\n      }\r\n      if (not this.switchedon and HasScript(this, \"onswitchoff\")) {\r\n        do (this, \"onswitchoff\")\r\n      }\r\n    </changedswitchedon>\r\n  </type>\r\n  <type name=\"defaultexit\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Go to</value>\r\n    </displayverbs>\r\n    <visible />\r\n    <scenery type=\"boolean\">false</scenery>\r\n    <locked type=\"boolean\">false</locked>\r\n    <lockmessage>That way is locked.</lockmessage>\r\n    <lookonly type=\"boolean\">false</lookonly>\r\n    <runscript type=\"boolean\">false</runscript>\r\n    <lightstrength type=\"string\"></lightstrength>\r\n    <attr name=\"grid_length\" type=\"int\">1</attr>\r\n    <attr name=\"grid_render\" type=\"boolean\">false</attr>\r\n    <attr name=\"grid_offset_x\" type=\"int\">0</attr>\r\n    <attr name=\"grid_offset_y\" type=\"int\">0</attr>\r\n  </type>\r\n  <type name=\"direction\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Go</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"compassdirection\">\r\n    <inherit name=\"direction\" />\r\n    <prefix type=\"string\"></prefix>\r\n    <suffix type=\"string\"></suffix>\r\n  </type>\r\n  <type name=\"updowndirection\">\r\n    <inherit name=\"direction\" />\r\n    <prefix type=\"string\"></prefix>\r\n    <suffix type=\"string\"></suffix>\r\n  </type>\r\n  <type name=\"inoutdirection\">\r\n    <inherit name=\"direction\" />\r\n    <prefix type=\"string\"></prefix>\r\n    <suffix type=\"string\"></suffix>\r\n  </type>\r\n  <type name=\"northwestdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>northwest</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>nw</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"northdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>north</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>n</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"northeastdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>northeast</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>ne</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"westdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>west</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>w</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"eastdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>east</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>e</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"southwestdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>southwest</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>sw</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"southdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>south</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>s</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"southeastdirection\">\r\n    <inherit name=\"compassdirection\" />\r\n    <alias>southeast</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>se</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"updirection\">\r\n    <inherit name=\"updowndirection\" />\r\n    <alias>up</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>u</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"downdirection\">\r\n    <inherit name=\"updowndirection\" />\r\n    <alias>down</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>d</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"indirection\">\r\n    <inherit name=\"inoutdirection\" />\r\n    <alias>in</alias>\r\n    <alt type=\"stringlist\">\r\n      <value></value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"outdirection\">\r\n    <inherit name=\"inoutdirection\" />\r\n    <alias>out</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>o</value>\r\n    </alt>\r\n  </type>\r\n  <type name=\"defaultcommand\">\r\n    <pattern type=\"simplepattern\"></pattern>\r\n  </type>\r\n  <type name=\"male\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Speak to</value>\r\n    </displayverbs>\r\n    <gender>he</gender>\r\n    <article>him</article>\r\n  </type>\r\n  <type name=\"namedmale\">\r\n    <inherit name=\"male\" />\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n  </type>\r\n  <type name=\"female\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Speak to</value>\r\n    </displayverbs>\r\n    <gender>she</gender>\r\n    <article>her</article>\r\n  </type>\r\n  <type name=\"namedfemale\">\r\n    <inherit name=\"female\" />\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n  </type>\r\n  <type name=\"plural\">\r\n    <gender>they</gender>\r\n    <article>them</article>\r\n  </type>\r\n  <type name=\"maleplural\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Speak to</value>\r\n    </displayverbs>\r\n    <gender>they</gender>\r\n    <article>them</article>\r\n  </type>\r\n  <type name=\"femaleplural\">\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Speak to</value>\r\n    </displayverbs>\r\n    <gender>they</gender>\r\n    <article>them</article>\r\n  </type>\r\n  <type name=\"openable\">\r\n    <open />\r\n    <close />\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Open</value>\r\n      <value>Close</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"container_base\">\r\n    <container />\r\n  </type>\r\n  <type name=\"container_closed\">\r\n    <inherit name=\"container_base\" />\r\n    <open />\r\n    <close />\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Open</value>\r\n      <value>Close</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"container_open\">\r\n    <inherit name=\"container_base\" />\r\n    <isopen />\r\n    <open />\r\n    <close />\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Open</value>\r\n      <value>Close</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"surface\">\r\n    <inherit name=\"container_base\" />\r\n    <isopen />\r\n    <transparent />\r\n    <contentsprefix>on which there is</contentsprefix>\r\n  </type>\r\n  <type name=\"container\">\r\n    <inherit name=\"container_open\" />\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Open</value>\r\n      <value>Close</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"container_limited\">\r\n    <inherit name=\"container\" />\r\n    <maxobjects type=\"int\">1</maxobjects>\r\n    <maxvolume type=\"int\">100</maxvolume>\r\n    <addscript type=\"AddScript\"><![CDATA[\r\n      activecontainer = this\r\n      correct = true\r\n      while (DoesInherit(activecontainer, \"container_base\")) {\r\n        if (HasInt(activecontainer, \"maxvolume\")) {\r\n          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {\r\n            correct = false\r\n            if (HasString(this, \"containerfullmessage\")) {\r\n              message = this.containerfullmessage\r\n            }\r\n            else {\r\n              message = DynamicTemplate(\"ContainerFull\", this)\r\n            }\r\n          }\r\n        }\r\n        activecontainer = activecontainer.parent\r\n      }\r\n      children = GetDirectChildren(this)\r\n      if (listcount(children) >= this.maxobjects) {\r\n        correct = false\r\n        if (HasString(this, \"containerfullmessage\")) {\r\n          message = this.containerfullmessage\r\n        }\r\n        else {\r\n          message = DynamicTemplate(\"MaxObjectsInContainer\", this)\r\n        }\r\n      }\r\n      if (correct = false) {\r\n        msg (message)\r\n      }\r\n      else {\r\n        object.parent = this\r\n        msg (Template(\"Done\"))\r\n      }\r\n    ]]></addscript>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Open</value>\r\n      <value>Close</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"container_lockable\">\r\n    <locked />\r\n    <nokeymessage>You do not have the key.</nokeymessage>\r\n    <unlockmessage>Unlocked.</unlockmessage>\r\n    <lockmessage>Locked.</lockmessage>\r\n    <canlockopen type=\"boolean\">false</canlockopen>\r\n    <autoopen />\r\n    <autounlock />\r\n    <openscript type=\"script\">\r\n      if (this.locked) {\r\n        if (this.autounlock and AllKeysAvailable(this)) {\r\n          do (this, \"unlock\")\r\n          if (not this.isopen) {\r\n            OpenObject (this)\r\n          }\r\n        }\r\n        else {\r\n          msg (DynamicTemplate(\"LockedObject\", this))\r\n        }\r\n      }\r\n      else {\r\n        OpenObject (this)\r\n      }\r\n    </openscript>\r\n    <closescript type=\"script\">\r\n      if (this.locked) {\r\n        msg (DynamicTemplate(\"LockedObject\", this))\r\n      }\r\n      else {\r\n        CloseObject (this)\r\n      }\r\n    </closescript>\r\n    <lock type=\"script\">\r\n      if (this.locked) {\r\n        msg (DynamicTemplate(\"AlreadyLocked\", this))\r\n      }\r\n      else if (this.isopen and not this.canlockopen) {\r\n        msg (DynamicTemplate(\"CannotLockOpen\", this))\r\n      }\r\n      else {\r\n        if (AllKeysAvailable(this)) {\r\n          msg (this.lockmessage)\r\n          this.locked = true\r\n        }\r\n        else {\r\n          msg (this.nokeymessage)\r\n        }\r\n      }\r\n    </lock>\r\n    <unlock type=\"script\">\r\n      if (not this.locked) {\r\n        msg (DynamicTemplate(\"AlreadyUnlocked\", this))\r\n      }\r\n      else {\r\n        if (AllKeysAvailable(this)) {\r\n          msg (this.unlockmessage)\r\n          this.locked = false\r\n          if (this.autoopen and not this.isopen) {\r\n            TryOpenClose (true, this)\r\n          }\r\n        }\r\n        else {\r\n          msg (this.nokeymessage)\r\n        }\r\n      }\r\n    </unlock>\r\n  </type>\r\n  <type name=\"defaultplayer\" />\r\n  <type name=\"switchable\">\r\n    <switchedon type=\"boolean\">false</switchedon>\r\n    <turnon type=\"script\">\r\n      if (ListContains(ScopeReachable(), this)) {\r\n        if (this.switchedon) {\r\n          msg (DynamicTemplate(\"AlreadySwitchedOn\", this))\r\n        }\r\n        else {\r\n          if (HasString(this, \"switchonmsg\")) {\r\n            msg (this.switchonmsg)\r\n          }\r\n          else {\r\n            msg (DynamicTemplate(\"SwitchedOn\", this))\r\n          }\r\n          this.switchedon = true\r\n        }\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(\"DefaultTurnOn\", this))\r\n      }\r\n    </turnon>\r\n    <turnoff type=\"script\">\r\n      if (ListContains(ScopeReachable(), this)) {\r\n        if (not this.switchedon) {\r\n          msg (DynamicTemplate(\"AlreadySwitchedOff\", this))\r\n        }\r\n        else {\r\n          if (HasString(this, \"switchoffmsg\")) {\r\n            msg (this.switchoffmsg)\r\n          }\r\n          else {\r\n            msg (DynamicTemplate(\"SwitchedOff\", this))\r\n          }\r\n          this.switchedon = false\r\n        }\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(\"DefaultTurnOff\", this))\r\n      }\r\n    </turnoff>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Switch on</value>\r\n      <value>Switch off</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"edible\">\r\n    <eathealth type=\"int\">0</eathealth>\r\n    <eat type=\"script\">\r\n      if (HasString(this, \"eatmsg\")) {\r\n        msg (this.eatmsg)\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(\"Eaten\", this))\r\n      }\r\n      if (HasInt(game.pov, \"health\")) {\r\n        game.pov.health = game.pov.health + this.eathealth\r\n      }\r\n      destroy (this.name)\r\n    </eat>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Eat</value>\r\n    </displayverbs>\r\n  </type>\r\n  <type name=\"gridborder_path_ew\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">10</attr>\r\n  </type>\r\n  <type name=\"gridborder_path_e\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">11</attr>\r\n  </type>\r\n  <type name=\"gridborder_path_w\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">14</attr>\r\n  </type>\r\n  <type name=\"gridborder_path_ns\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">5</attr>\r\n  </type>\r\n  <type name=\"gridborder_path_n\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">7</attr>\r\n  </type>\r\n  <type name=\"gridborder_path_s\">\r\n    <attr name=\"grid_bordersides\" type=\"int\">13</attr>\r\n  </type>\r\n  <function name=\"GetDefaultPrefix\" parameters=\"obj\" type=\"string\"><![CDATA[\r\n    if (Instr(\"aeiou\", LCase(Left(GetDisplayAlias(obj), 1))) > 0) {\r\n      return (\"an\")\r\n    }\r\n    else {\r\n      return (\"a\")\r\n    }\r\n  ]]></function>\r\n  <function name=\"WriteVerb\" parameters=\"obj, verb\" type=\"string\">\r\n    return (CapFirst(obj.gender) + \" \" + Conjugate(obj, verb))\r\n  </function>\r\n  <function name=\"Conjugate\" parameters=\"obj, verb\" type=\"string\">\r\n    gender = obj.gender\r\n    if (gender = \"he\" or gender = \"she\") {\r\n      gender = \"it\"\r\n    }\r\n    switch (verb) {\r\n      case (\"be\") {\r\n        switch (gender) {\r\n          case (\"i\") {\r\n            return (\"am\")\r\n          }\r\n          case (\"you\") {\r\n            return (\"are\")\r\n          }\r\n          case (\"it\") {\r\n            return (\"is\")\r\n          }\r\n          case (\"we\") {\r\n            return (\"are\")\r\n          }\r\n          case (\"they\") {\r\n            return (\"are\")\r\n          }\r\n          default {\r\n            return (\"is\")\r\n          }\r\n        }\r\n      }\r\n      case (\"do\") {\r\n        switch (gender) {\r\n          case (\"i\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"you\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"it\") {\r\n            return (\"does\")\r\n          }\r\n          case (\"we\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"they\") {\r\n            return (\"do\")\r\n          }\r\n          default {\r\n            return (\"do\")\r\n          }\r\n        }\r\n      }\r\n      default {\r\n        if (gender = \"it\") {\r\n          return (verb + \"s\")\r\n        }\r\n        else {\r\n          return (verb)\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"ListObjectContents\" parameters=\"object\"><![CDATA[\r\n    if (GetBoolean(object, \"isopen\") and GetBoolean(object, \"listchildren\")) {\r\n      if (GetBoolean(object, \"hidechildren\")) {\r\n        object.hidechildren = false\r\n      }\r\n      if (HasString(object, \"listchildrenprefix\")) {\r\n        listprefix = object.listchildrenprefix\r\n      }\r\n      else {\r\n        listprefix = DynamicTemplate(\"ObjectContains\", object)\r\n      }\r\n      list = FormatObjectList(listprefix, object, Template(\"And\"), \".\")\r\n      if (list <> \"\") {\r\n        msg (list)\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"DoTake\" parameters=\"object, ismultiple\"><![CDATA[\r\n    prefix = \"\"\r\n    if (ismultiple) {\r\n      prefix = GetDisplayAlias(object) + \": \"\r\n    }\r\n    if (object.parent = game.pov) {\r\n      msg (prefix + DynamicTemplate(\"AlreadyTaken\", object))\r\n    }\r\n    else if (not ListContains(ScopeReachable(), object)) {\r\n      msg (prefix + DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object)))\r\n    }\r\n    else {\r\n      volume = 0\r\n      continue = true\r\n      foreach (obj, GetAllChildObjects(game.pov)) {\r\n        if (HasInt(obj, \"volume\")) {\r\n          volume = volume + obj.volume\r\n        }\r\n      }\r\n      if (not Contains(game.pov, object)) {\r\n        volume = volume + GetVolume(object,true)\r\n      }\r\n      if (HasInt(game.pov, \"maxvolume\")) {\r\n        if (volume > game.pov.maxvolume) {\r\n          continue = false\r\n          if (HasString(game.pov, \"containerfullmessage\")) {\r\n            message = prefix + game.pov.containerfullmessage\r\n          }\r\n          else {\r\n            message = prefix + DynamicTemplate(\"FullInventory\", object)\r\n          }\r\n        }\r\n      }\r\n      children = GetDirectChildren(game.pov)\r\n      if (HasInt(game.pov, \"maxobjects\")) {\r\n        if (game.pov.maxobjects > 0) {\r\n          if (ListCount(children) >= game.pov.maxobjects) {\r\n            continue = false\r\n            if (HasString(game.pov, \"containermaxobjects\")) {\r\n              message = prefix + game.pov.containermaxobjects\r\n            }\r\n            else {\r\n              message = prefix + DynamicTemplate(\"MaxObjectsInInventory\", object)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (continue = false) {\r\n        msg (message)\r\n      }\r\n      else {\r\n        found = true\r\n        takemsg = object.takemsg\r\n        switch (TypeOf(object, \"take\")) {\r\n          case (\"script\") {\r\n            if (ismultiple) {\r\n              OutputTextNoBr (prefix)\r\n            }\r\n            do (object, \"take\")\r\n            takemsg = \"\"\r\n          }\r\n          case (\"boolean\") {\r\n            if (object.take = true) {\r\n              object.parent = game.pov\r\n              if (takemsg = null) {\r\n                takemsg = DynamicTemplate(\"TakeSuccessful\", object)\r\n              }\r\n            }\r\n            else {\r\n              found = false\r\n            }\r\n          }\r\n          case (\"string\") {\r\n            object.parent = game.pov\r\n            takemsg = object.take\r\n          }\r\n          default {\r\n            found = false\r\n          }\r\n        }\r\n        if (not found and takemsg = null) {\r\n          takemsg = DynamicTemplate(\"TakeUnsuccessful\", object)\r\n        }\r\n        if (LengthOf(takemsg) > 0) {\r\n          msg (prefix + takemsg)\r\n        }\r\n        if (HasScript(object, \"ontake\")) {\r\n          do (object, \"ontake\")\r\n        }\r\n        if (found and GetBoolean (object, \"scenery\") and object.parent = game.pov) {\r\n          object.scenery = false\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"DoDrop\" parameters=\"object, ismultiple\"><![CDATA[\r\n    prefix = \"\"\r\n    if (ismultiple) {\r\n      prefix = GetDisplayAlias(object) + \": \"\r\n    }\r\n    if (not ListContains(ScopeInventory(), object)) {\r\n      msg (prefix + DynamicTemplate(\"NotCarrying\", object))\r\n    }\r\n    else if (not ListContains(ScopeReachable(), object)) {\r\n      msg (prefix + DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object)))\r\n    }\r\n    else {\r\n      found = true\r\n      dropmsg = object.dropmsg\r\n      switch (TypeOf(object, \"drop\")) {\r\n        case (\"script\") {\r\n          if (ismultiple) {\r\n            OutputTextNoBr (prefix)\r\n          }\r\n          do (object, \"drop\")\r\n          dropmsg = \"\"\r\n        }\r\n        case (\"boolean\") {\r\n          if (object.drop = true) {\r\n            object.parent = game.pov.parent\r\n            if (dropmsg = null) {\r\n              dropmsg = DynamicTemplate(\"DropSuccessful\", object)\r\n            }\r\n          }\r\n          else {\r\n            found = false\r\n          }\r\n        }\r\n        case (\"string\") {\r\n          object.parent = game.pov.parent\r\n          dropmsg = object.drop\r\n        }\r\n        default {\r\n          found = false\r\n        }\r\n      }\r\n      if (not found and dropmsg = null) {\r\n        dropmsg = DynamicTemplate(\"DropUnsuccessful\", object)\r\n      }\r\n      if (LengthOf(dropmsg) > 0) {\r\n        msg (prefix + dropmsg)\r\n      }\r\n      if (HasScript(object, \"ondrop\")) {\r\n        do (object, \"ondrop\")\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"CreateUseMenuList\" parameters=\"object\" type=\"objectlist\">\r\n    objectlist = NewObjectList()\r\n    objectlist = ScopeReachableInventory()\r\n    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())\r\n    excludelist = NewObjectList()\r\n    list add (excludelist, game.pov)\r\n    list add (excludelist, object)\r\n    candidates = NewObjectList()\r\n    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\n    return (candidates)\r\n  </function>\r\n  <function name=\"TryOpenClose\" parameters=\"doopen, object\">\r\n    if (doopen) {\r\n      action = \"open\"\r\n      scriptaction = \"openscript\"\r\n    }\r\n    else {\r\n      action = \"close\"\r\n      scriptaction = \"closescript\"\r\n    }\r\n    if (not ListContains(ScopeReachable(), object)) {\r\n      msg (DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object)))\r\n    }\r\n    else {\r\n      found = false\r\n      if (GetBoolean(object, action)) {\r\n        if (doopen) {\r\n          if (object.isopen) {\r\n            msg (DynamicTemplate(\"AlreadyOpen\", object))\r\n          }\r\n          else {\r\n            if (HasScript(object, scriptaction)) {\r\n              do (object, scriptaction)\r\n            }\r\n            else {\r\n              OpenObject (object)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (not object.isopen) {\r\n            msg (DynamicTemplate(\"AlreadyClosed\", object))\r\n          }\r\n          else {\r\n            if (HasScript(object, scriptaction)) {\r\n              do (object, scriptaction)\r\n            }\r\n            else {\r\n              CloseObject (object)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (doopen) {\r\n          msg (DynamicTemplate(\"CantOpen\", object))\r\n        }\r\n        else {\r\n          msg (DynamicTemplate(\"CantClose\", object))\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"OpenObject\" parameters=\"object\">\r\n    if (HasString(object, \"openmsg\")) {\r\n      msg (object.openmsg)\r\n    }\r\n    else {\r\n      msg (DynamicTemplate(\"OpenSuccessful\", object))\r\n    }\r\n    object.isopen = true\r\n    ListObjectContents (object)\r\n  </function>\r\n  <function name=\"CloseObject\" parameters=\"object\">\r\n    if (HasString(object, \"closemsg\")) {\r\n      msg (object.closemsg)\r\n    }\r\n    else {\r\n      msg (DynamicTemplate(\"CloseSuccessful\", object))\r\n    }\r\n    object.isopen = false\r\n  </function>\r\n  <function name=\"CreateGiveMenuList\" parameters=\"object\" type=\"objectlist\">\r\n    objectlist = NewObjectList()\r\n    objectlist = ScopeReachableInventory()\r\n    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())\r\n    excludelist = NewObjectList()\r\n    list add (excludelist, game.pov)\r\n    list add (excludelist, object)\r\n    candidates = NewObjectList()\r\n    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\n    return (candidates)\r\n  </function>\r\n  <function name=\"HandleGiveTo\" parameters=\"object1, object2\">\r\n    handled = false\r\n    if (HasString(object2, \"give\")) {\r\n      msg (object2.give)\r\n      handled = true\r\n    }\r\n    else if (TypeOf(object2, \"give\") = \"scriptdictionary\") {\r\n      if (DictionaryContains(object2.give, object1.name)) {\r\n        parameters = NewObjectDictionary()\r\n        dictionary add (parameters, \"this\", object2)\r\n        dictionary add (parameters, \"object\", object1)\r\n        invoke (ScriptDictionaryItem(object2.give, object1.name), parameters)\r\n        handled = true\r\n      }\r\n      if (not handled) {\r\n        if (HasScript(object2, \"giveanything\")) {\r\n          // TO DO: Would be better to use a delegate for giveanything, but need to implement Editor support first\r\n          parameters = NewObjectDictionary()\r\n          dictionary add (parameters, \"object\", object1)\r\n          do (object2, \"giveanything\", parameters)\r\n          handled = true\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (HasString(object1, \"giveto\")) {\r\n        msg (object1.giveto)\r\n        handled = true\r\n      }\r\n      else if (TypeOf(object1, \"giveto\") = \"scriptdictionary\") {\r\n        if (DictionaryContains(object1.giveto, object2.name)) {\r\n          parameters = NewObjectDictionary()\r\n          dictionary add (parameters, \"this\", object1)\r\n          dictionary add (parameters, \"object\", object2)\r\n          invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters)\r\n          handled = true\r\n        }\r\n        else {\r\n          if (HasScript(object1, \"givetoanything\")) {\r\n            // TO DO: Would be better to use a delegate for givetoanything, but need to implement Editor support first\r\n            parameters = NewObjectDictionary()\r\n            dictionary add (parameters, \"object\", object2)\r\n            do (object1, \"givetoanything\", parameters)\r\n            handled = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      msg (DynamicTemplate(\"DefaultGive\", object2, object1))\r\n    }\r\n  </function>\r\n  <function name=\"HandleUseOn\" parameters=\"object1, object2\">\r\n    handled = false\r\n    if (HasString(object2, \"useon\")) {\r\n      msg (object2.useon)\r\n      handled = true\r\n    }\r\n    else if (TypeOf(object2, \"useon\") = \"scriptdictionary\") {\r\n      if (DictionaryContains(object2.useon, object1.name)) {\r\n        parameters = NewObjectDictionary()\r\n        dictionary add (parameters, \"this\", object2)\r\n        dictionary add (parameters, \"object\", object1)\r\n        invoke (ScriptDictionaryItem(object2.useon, object1.name), parameters)\r\n        handled = true\r\n      }\r\n      else {\r\n        if (HasScript(object2, \"useanything\")) {\r\n          // TO DO: Would be better to use a delegate for useanything, but need to implement Editor support first\r\n          parameters = NewObjectDictionary()\r\n          dictionary add (parameters, \"object\", object1)\r\n          do (object2, \"useanything\", parameters)\r\n          handled = true\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (HasString(object1, \"selfuseon\")) {\r\n        msg (object1.selfuseon)\r\n        handled = true\r\n      }\r\n      else if (TypeOf(object1, \"selfuseon\") = \"scriptdictionary\") {\r\n        if (DictionaryContains(object1.selfuseon, object2.name)) {\r\n          parameters = NewObjectDictionary()\r\n          dictionary add (parameters, \"this\", object1)\r\n          dictionary add (parameters, \"object\", object2)\r\n          invoke (ScriptDictionaryItem(object1.selfuseon, object2.name), parameters)\r\n          handled = true\r\n        }\r\n        else {\r\n          if (HasScript(object1, \"selfuseanything\")) {\r\n            // TO DO: Would be better to use a delegate for selfuseanything, but need to implement Editor support first\r\n            parameters = NewObjectDictionary()\r\n            dictionary add (parameters, \"object\", object2)\r\n            do (object1, \"selfuseanything\", parameters)\r\n            handled = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      msg (DynamicTemplate(\"DefaultUseOn\", object2, object1))\r\n    }\r\n  </function>\r\n  <function name=\"DoAskTell\" parameters=\"object, text, property, defaultscript, defaulttemplate\"><![CDATA[\r\n    handled = false\r\n    maxstrength = 0\r\n    match = null\r\n    text = LCase(text)\r\n    if (TypeOf(object, property) = \"scriptdictionary\") {\r\n      dictionary = GetAttribute(object, property)\r\n      foreach (keywords, dictionary) {\r\n        strength = GetKeywordsMatchStrength(LCase(keywords), text)\r\n        if (strength >= maxstrength and strength>0) {\r\n          match = ScriptDictionaryItem(dictionary, keywords)\r\n          maxstrength = strength\r\n        }\r\n      }\r\n      if (match <> null) {\r\n        parameters = NewObjectDictionary()\r\n        dictionary add (parameters, \"this\", object)\r\n        invoke (match, parameters)\r\n        handled = true\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (HasScript(object, defaultscript)) {\r\n        do (object, defaultscript)\r\n      }\r\n      else {\r\n        msg (DynamicTemplate(defaulttemplate, object))\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"GetKeywordsMatchStrength\" parameters=\"keywords, input\" type=\"int\">\r\n    // Keywords is the subject. We split it into individual words, and then see how well\r\n    // the words in the input match the keywords.\r\n    keywordlist = Split(keywords, \" \")\r\n    inputlist = Split(input, \" \")\r\n    strength = 0\r\n    foreach (word, inputlist) {\r\n      foreach (keyword, keywordlist) {\r\n        if (StartsWith(word, keyword)) {\r\n          strength = strength + LengthOf(keyword)\r\n        }\r\n      }\r\n    }\r\n    return (strength)\r\n  </function>\r\n  <function name=\"CompareNames\" parameters=\"name, value, obj, fullmatches, partialmatches\"><![CDATA[\r\n    if (name = value) {\r\n      if (not ListContains(fullmatches, obj)) {\r\n        list add (fullmatches, obj)\r\n      }\r\n    }\r\n    else {\r\n      if (StartsWith(name, value)) {\r\n        if (not ListContains(partialmatches, obj)) {\r\n          list add (partialmatches, obj)\r\n        }\r\n      }\r\n      else {\r\n        // check if input matches the start of any word in the name\r\n        if (Instr(name, \" \" + value) > 0) {\r\n          if (not ListContains(partialmatches, obj)) {\r\n            list add (partialmatches, obj)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"GenerateMenuChoices\" parameters=\"dictionary, objects\">\r\n    foreach (obj, objects) {\r\n      if (not DictionaryContains(dictionary, obj.name)) {\r\n        dictionary add (dictionary, obj.name, GetDisplayAlias(obj))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"ResolveName\" parameters=\"variable, value, objtype\" type=\"object\"><![CDATA[\r\n    found = false\r\n    if (game.pov.commandmetadata <> null) {\r\n      if (DictionaryContains(game.pov.commandmetadata, value)) {\r\n        result = GetObject(StringDictionaryItem(game.pov.commandmetadata, value))\r\n        if (result <> null) {\r\n          if (ListContains(ScopeVisible(), result)) {\r\n            found = true\r\n            return (result)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (not found) {\r\n      value = LCase(value)\r\n      result = ResolveNameInternal(variable, value, objtype)\r\n      if (result <> null) {\r\n        return (result)\r\n      }\r\n      else {\r\n        // TO DO: Check this behaviour. We only want to try ignoring prefixes if we have definitely got an unresolved name.\r\n        foreach (prefix, game.parserignoreprefixes) {\r\n          if (StartsWith(value, prefix + \" \")) {\r\n            result = ResolveNameInternal(variable, Mid(value, LengthOf(prefix) + 1), objtype)\r\n          }\r\n        }\r\n        if (result = null and LengthOf(variable) = 0 and not GetBoolean(game.pov, \"currentcommandmultiobjectpending\")) {\r\n          UnresolvedCommand (value, game.pov.currentcommandpendingvariable)\r\n        }\r\n        return (result)\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameInternal\" parameters=\"variable, value, objtype\" type=\"object\"><![CDATA[\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n    game.pov.currentcommandmultiobjectpending = false\r\n    if (objtype = \"object\") {\r\n      scope = ScopeVisible()\r\n    }\r\n    else if (objtype = \"exit\") {\r\n      scope = ScopeExits()\r\n    }\r\n    value = Trim(value)\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt <> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }\r\n    // allow referring to objects from the previous command by gender or article\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }\r\n    }\r\n    if (ListCount(fullmatches) = 1) {\r\n      return (ListItem(fullmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {\r\n      return (ListItem(partialmatches, 0))\r\n    }\r\n    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {\r\n      return (null)\r\n    }\r\n    else {\r\n      menu = NewStringDictionary()\r\n      GenerateMenuChoices (menu, fullmatches)\r\n      GenerateMenuChoices (menu, partialmatches)\r\n      if (LengthOf(variable) > 0) {\r\n        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements\r\n        game.pov.currentcommandpendingvariable = variable\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), menu, true) {\r\n          varname = game.pov.currentcommandpendingvariable\r\n          game.pov.currentcommandpendingvariable = null\r\n          if (result <> null) {\r\n            AddToResolvedNames (varname, GetObject(result))\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // multi-object command, so after showing the menu, add the object to the list\r\n        game.pov.currentcommandmultiobjectpending = true\r\n        ShowMenu (DynamicTemplate(\"DisambiguateMenu\", value), menu, true) {\r\n          if (result <> null) {\r\n            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))\r\n            ResolveNextNameListItem\r\n          }\r\n        }\r\n      }\r\n      return (null)\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameList\" parameters=\"value, scope, objtype\">\r\n    game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n    game.pov.currentcommandpendingobjectlistunresolved = NewStringList()\r\n    game.pov.currentcommandpendingobjectscope = scope\r\n    game.pov.currentcommandpendingobjecttype = objtype\r\n    inputlist = Split(value, \",\")\r\n    foreach (inputbase, inputlist) {\r\n      inputlist2 = Split(inputbase, \" \" + Template(\"And\") + \" \")\r\n      foreach (input, inputlist2) {\r\n        list add (game.pov.currentcommandpendingobjectlistunresolved, input)\r\n      }\r\n    }\r\n    ResolveNextNameListItem\r\n  </function>\r\n  <function name=\"ResolveNextNameListItem\"><![CDATA[\r\n    resolvedall = false\r\n    if (TypeOf(game.pov, \"currentcommandpendingobjectlistunresolved\") = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandpendingobjectlistunresolved)\r\n      if (queuelength > 0) {\r\n        thisitem = Trim(StringListItem(game.pov.currentcommandpendingobjectlistunresolved, 0))\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandpendingobjectlistunresolved = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandpendingobjectlistunresolved, i))\r\n          }\r\n          game.pov.currentcommandpendingobjectlistunresolved = newqueue\r\n        }\r\n        ResolveNameListItem (Trim(thisitem))\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else {\r\n      resolvedall = true\r\n    }\r\n    if (resolvedall) {\r\n      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectlist)\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameListItem\" parameters=\"value\"><![CDATA[\r\n    if (ListContains(game.allobjects, value)) {\r\n      // value is \"all\"\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", true)\r\n      }\r\n      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectscope)\r\n    }\r\n    else {\r\n      object = ResolveName(\"\", value, game.pov.currentcommandpendingobjecttype)\r\n      if (object <> null) {\r\n        if (not ListContains(game.pov.currentcommandpendingobjectlist, object)) {\r\n          list add (game.pov.currentcommandpendingobjectlist, object)\r\n        }\r\n        ResolveNextNameListItem\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"ResolveNameListItemFinished\" parameters=\"result\"><![CDATA[\r\n    if (ListCount(result) > 1) {\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", true)\r\n      }\r\n    }\r\n    AddToResolvedNames (game.pov.currentcommandpendingvariable, result)\r\n  ]]></function>\r\n  <function name=\"HandleCommand\" parameters=\"command, metadata\"><![CDATA[\r\n    handled = false\r\n    if (game.menucallback <> null) {\r\n      if (HandleMenuTextResponse(command)) {\r\n        handled = true\r\n      }\r\n      else {\r\n        if (game.menuallowcancel) {\r\n          ClearMenu\r\n        }\r\n        else {\r\n          handled = true\r\n        }\r\n      }\r\n    }\r\n    if (not handled) {\r\n      StartTurnOutputSection\r\n      if (StartsWith (command, \"*\")) {\r\n        msg (\"\")\r\n        msg (SafeXML (command))\r\n      }\r\n      else {\r\n        shownlink = false\r\n        if (game.echocommand) {\r\n          if (metadata <> null and game.enablehyperlinks and game.echohyperlinks) {\r\n            foreach (key, metadata) {\r\n              if (EndsWith(command, key)) {\r\n                objectname = StringDictionaryItem(metadata, key)\r\n                object = GetObject(objectname)\r\n                if (object <> null) {\r\n                  msg (\"\")\r\n                  msg (\"&gt; \" + Left(command, LengthOf(command) - LengthOf(key)) + \"{object:\" + object.name + \"}\")\r\n                  shownlink = true\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (not shownlink) {\r\n            msg (\"\")\r\n            OutputTextRaw (\"&gt; \" + SafeXML(command))\r\n          }\r\n        }\r\n        if (game.command_newline) {\r\n          msg (\"\")\r\n        }\r\n        game.pov.commandmetadata = metadata\r\n        if (game.multiplecommands) {\r\n          commands = Split(command, \".\")\r\n          if (ListCount(commands) = 1) {\r\n            game.pov.commandqueue = null\r\n            HandleSingleCommand (Trim(command))\r\n          }\r\n          else {\r\n            game.pov.commandqueue = commands\r\n            HandleNextCommandQueueItem\r\n          }\r\n        }\r\n        else {\r\n          game.pov.commandqueue = null\r\n          HandleSingleCommand (Trim(command))\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"HandleNextCommandQueueItem\"><![CDATA[\r\n    if (TypeOf(game.pov, \"commandqueue\") = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.commandqueue)\r\n      if (queuelength > 0) {\r\n        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))\r\n        if (queuelength = 1) {\r\n          game.pov.commandqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.commandqueue, i))\r\n          }\r\n          game.pov.commandqueue = newqueue\r\n        }\r\n        if (LengthOf(thiscommand) > 0) {\r\n          HandleSingleCommand (thiscommand)\r\n        }\r\n        else {\r\n          HandleNextCommandQueueItem\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"HandleSingleCommand\" parameters=\"command\"><![CDATA[\r\n    candidates = NewObjectList()\r\n    foreach (cmd, ScopeCommands()) {\r\n      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\r\n        list add (candidates, cmd)\r\n      }\r\n    }\r\n    maxstrength = -1\r\n    thiscommand = null\r\n    foreach (candidate, candidates) {\r\n      strength = GetMatchStrength(candidate.pattern, command, candidate.name)\r\n      // favour commands defined later, so an author can override a library command...\r\n      if (strength >= maxstrength) {\r\n        // ... except if the command defined later (candidate) has no parent, and the current best\r\n        // match (thiscommand) does have a parent. We want to favour any commands defined in rooms\r\n        // over global candidates.\r\n        skip = false\r\n        if (thiscommand <> null) {\r\n          if (thiscommand.parent <> null and candidate.parent = null) {\r\n            skip = true\r\n          }\r\n        }\r\n        if (not skip) {\r\n          thiscommand = candidate\r\n          maxstrength = strength\r\n        }\r\n      }\r\n    }\r\n    if (thiscommand = null) {\r\n      if (HasScript(game, \"unresolvedcommandhandler\")) {\r\n        params = NewDictionary()\r\n        dictionary add (params, \"command\", command)\r\n        do (game, \"unresolvedcommandhandler\", params)\r\n      }\r\n      else {\r\n        msg (Template(\"UnrecognisedCommand\"))\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n    else {\r\n      varlist = Populate(thiscommand.pattern, command, thiscommand.name)\r\n      HandleSingleCommandPattern (command, thiscommand, varlist)\r\n    }\r\n  ]]></function>\r\n  <function name=\"FinishTurn\">\r\n    RunTurnScripts\r\n    UpdateStatusAttributes\r\n    CheckDarkness\r\n    UpdateObjectLinks\r\n  </function>\r\n  <function name=\"HandleSingleCommandPattern\" parameters=\"command, thiscommand, varlist\">\r\n    // current command string\r\n    game.pov.currentcommand = command\r\n    // current command object\r\n    game.pov.currentcommandpattern = thiscommand\r\n    // string dictionary of variables, e.g. object1=\"book\"; object2=\"table\"\r\n    game.pov.currentcommandvarlist = varlist\r\n    // string list of variables left to resolve\r\n    game.pov.currentcommandvarlistqueue = NewStringList()\r\n    foreach (key, varlist) {\r\n      list add (game.pov.currentcommandvarlistqueue, key)\r\n    }\r\n    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object\r\n    game.pov.currentcommandresolvedelements = NewDictionary()\r\n    // list of resolved elements, e.g. book_object; table_object\r\n    game.pov.currentcommandresolvedobjects = NewObjectList()\r\n    game.pov.currentcommandunresolvedobject = null\r\n    game.pov.currentcommandpendingvariable = null\r\n    ResolveNextName\r\n  </function>\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          if (StartsWith(var, \"object\")) {\r\n            if (HasDelegateImplementation(game.pov.currentcommandpattern, \"multiple\")) {\r\n              game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n              game.pov.currentcommandpendingvariable = var\r\n              ResolveNameList (value, RunDelegateFunction(game.pov.currentcommandpattern, \"multiple\"), \"object\")\r\n              resolvinglist = true\r\n            }\r\n            else {\r\n              result = ResolveName(var, value, \"object\")\r\n            }\r\n          }\r\n          else if (StartsWith(var, \"exit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          else if (StartsWith(var, \"text\")) {\r\n            result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n          }\r\n          else {\r\n            error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      game.lastobjects = game.pov.currentcommandresolvedobjects\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n  <function name=\"AddToResolvedNames\" parameters=\"var, result\">\r\n    if (TypeOf(result) = \"object\") {\r\n      if (result.type = \"object\") {\r\n        list add (game.pov.currentcommandresolvedobjects, result)\r\n      }\r\n    }\r\n    else if (TypeOf(result) = \"objectlist\") {\r\n      foreach (obj, result) {\r\n        if (obj.type = \"object\") {\r\n          list add (game.pov.currentcommandresolvedobjects, obj)\r\n        }\r\n      }\r\n    }\r\n    dictionary add (game.pov.currentcommandresolvedelements, var, result)\r\n    ResolveNextName\r\n  </function>\r\n  <function name=\"UnresolvedCommand\" parameters=\"objectname, varname\"><![CDATA[\r\n    // TO DO: Update names below, we don't need these two variables\r\n    unresolvedobject = objectname\r\n    unresolvedkey = varname\r\n    if (HasString(game.pov.currentcommandpattern, \"unresolved\")) {\r\n      if (ListCount(game.pov.currentcommandvarlist) > 1) {\r\n        msg (game.pov.currentcommandpattern.unresolved + \" (\" + unresolvedobject + \")\")\r\n      }\r\n      else {\r\n        msg (game.pov.currentcommandpattern.unresolved)\r\n      }\r\n    }\r\n    else {\r\n      if (ListCount(game.pov.currentcommandvarlist) > 1) {\r\n        msg (Template(\"UnresolvedObject\") + \" (\" + unresolvedobject + \")\")\r\n      }\r\n      else {\r\n        msg (Template(\"UnresolvedObject\"))\r\n      }\r\n    }\r\n    game.unresolvedcommand = game.pov.currentcommandpattern\r\n    game.unresolvedcommandvarlist = game.pov.currentcommandvarlist\r\n    game.unresolvedcommandkey = unresolvedkey\r\n  ]]></function>\r\n  <function name=\"HandleMultiVerb\" parameters=\"object, property, object2, default\">\r\n    dictionary = GetAttribute(object, property)\r\n    if (DictionaryContains(dictionary, object2.name)) {\r\n      parameters = NewDictionary()\r\n      dictionary add (parameters, \"this\", object)\r\n      dictionary add (parameters, \"object\", object2)\r\n      invoke (ScriptDictionaryItem(dictionary, object2.name), parameters)\r\n    }\r\n    else {\r\n      parameters = NewDictionary()\r\n      dictionary add (parameters, \"this\", object)\r\n      dictionary add (parameters, \"object\", object2)\r\n      if (DictionaryContains(dictionary, \"default\")) {\r\n        invoke (ScriptDictionaryItem(dictionary, \"default\"), parameters)\r\n      }\r\n      else {\r\n        msg (default)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"GetPlacesObjectsList\" type=\"objectlist\">\r\n    return (ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov))\r\n  </function>\r\n  <function name=\"GetExitsList\" type=\"objectlist\">\r\n    return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())))\r\n  </function>\r\n  <function name=\"ScopeInventory\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(game.pov)) {\r\n      if (ContainsVisible(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"ScopeReachableInventory\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(game.pov)) {\r\n      if (ContainsReachable(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"ScopeVisibleNotHeld\" type=\"objectlist\">\r\n    return (ScopeVisibleNotHeldForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeVisibleNotHeldForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    if (room = game.pov.parent) {\r\n      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))\r\n      list add (result, game.pov)\r\n      return (result)\r\n    }\r\n    else {\r\n      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))\r\n    }\r\n  </function>\r\n  <function name=\"ScopeVisibleNotHeldNotScenery\" type=\"objectlist\">\r\n    return (ScopeVisibleNotHeldNotSceneryForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeVisibleNotHeldNotSceneryForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))\r\n  </function>\r\n  <function name=\"ScopeReachable\" type=\"objectlist\">\r\n    return (ScopeReachableForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeReachableForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    if (room = game.pov.parent) {\r\n      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())\r\n      list add (result, game.pov)\r\n    }\r\n    else {\r\n      result = ScopeReachableNotHeldForRoom(room)\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"ScopeVisibleNotReachable\" type=\"objectlist\">\r\n    return (ScopeVisibleNotReachableForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeVisibleNotReachableForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    exclude = ScopeReachableForRoom(room)\r\n    list add (exclude, game.pov)\r\n    newParent = GetNonTransparentParent(room)\r\n    foreach (obj, GetAllChildObjects(newParent)) {\r\n      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"GetNonTransparentParent\" parameters=\"room\" type=\"object\">\r\n    if (GetBoolean(room, \"transparent\")) {\r\n      if (room.parent = null) {\r\n        return (room)\r\n      }\r\n      else {\r\n        return (GetNonTransparentParent(room.parent))\r\n      }\r\n    }\r\n    else {\r\n      return (room)\r\n    }\r\n  </function>\r\n  <function name=\"ScopeReachableNotHeld\" type=\"objectlist\">\r\n    return (ScopeReachableNotHeldForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeVisibleLightsource\" parameters=\"lightstrength\" type=\"objectlist\">\r\n    result = ScopeVisible()\r\n    lightobjects = NewObjectList()\r\n    foreach (obj, result) {\r\n      if (GetBoolean(obj, \"lightsource\") and GetString(obj, \"lightstrength\") = lightstrength) {\r\n        list add (lightobjects, obj)\r\n      }\r\n    }\r\n    exits = ScopeExits()\r\n    foreach (obj, exits) {\r\n      if (GetBoolean(obj, \"lightsource\") and GetString(obj, \"lightstrength\") = lightstrength) {\r\n        list add (lightobjects, obj)\r\n      }\r\n    }\r\n    return (lightobjects)\r\n  </function>\r\n  <function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\"><![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"ScopeVisible\" type=\"objectlist\">\r\n    return (ScopeVisibleForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeVisibleForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    if (room = game.pov.parent) {\r\n      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))\r\n    }\r\n    else {\r\n      return (ScopeVisibleNotHeldForRoom(room))\r\n    }\r\n  </function>\r\n  <function name=\"ScopeExits\" type=\"objectlist\">\r\n    return (ScopeExitsForRoom(game.pov.parent))\r\n  </function>\r\n  <function name=\"ScopeExitsForRoom\" parameters=\"room\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (exit, AllExits()) {\r\n      if (exit.parent = room) {\r\n        if (exit.visible) {\r\n          if (GetBoolean(room, \"darklevel\")) {\r\n            if (GetBoolean(exit, \"lightsource\")) {\r\n              list add (result, exit)\r\n            }\r\n          }\r\n          else {\r\n            list add (result, exit)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"ScopeCommands\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (command, AllCommands()) {\r\n      if (command.parent = null or command.parent = game.pov.parent) {\r\n        list add (result, command)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"GetBlockingObject\" parameters=\"obj\" type=\"object\">\r\n    result = null\r\n    foreach (obj, ListParents(obj)) {\r\n      if (result = null and not CanReachThrough(obj)) {\r\n        result = obj\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"ListParents\" parameters=\"obj\" type=\"objectlist\"><![CDATA[\r\n    result = NewObjectList()\r\n    if (obj.parent <> null) {\r\n      parent_as_list = NewObjectList()\r\n      list add (parent_as_list, obj.parent)\r\n      result = ListCombine(parent_as_list, ListParents(obj.parent))\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"ContainsVisible\" parameters=\"parentObj, searchObj\" type=\"boolean\">\r\n    return (ContainsAccessible(parentObj, searchObj, false))\r\n  </function>\r\n  <function name=\"ContainsReachable\" parameters=\"parentObj, searchObj\" type=\"boolean\">\r\n    return (ContainsAccessible(parentObj, searchObj, true))\r\n  </function>\r\n  <function name=\"ContainsAccessible\" parameters=\"parentObj, searchObj, onlyReachable\" type=\"boolean\">\r\n    if (not HasObject(searchObj, \"parent\")) {\r\n      return (false)\r\n    }\r\n    else if (not searchObj.visible) {\r\n      return (false)\r\n    }\r\n    else if (GetBoolean(parentObj, \"darklevel\") and not GetBoolean(searchObj, \"lightsource\")) {\r\n      return (false)\r\n    }\r\n    else {\r\n      if (searchObj.parent = null) {\r\n        return (false)\r\n      }\r\n      else if (searchObj.parent = parentObj) {\r\n        return (true)\r\n      }\r\n      else {\r\n        if (onlyReachable) {\r\n          canAdd = CanReachThrough(searchObj.parent)\r\n        }\r\n        else {\r\n          canAdd = CanSeeThrough(searchObj.parent)\r\n        }\r\n        if (canAdd) {\r\n          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))\r\n        }\r\n        else {\r\n          return (false)\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"GetVolume\" parameters=\"obj, allinclusive\" type=\"int\">\r\n    result = 0\r\n    foreach (object, GetAllChildObjects ( obj )) {\r\n      if (HasInt(object, \"volume\")) {\r\n        result = result + object.volume\r\n      }\r\n    }\r\n    if (allinclusive and HasInt(obj, \"volume\")) {\r\n      result = result + obj.volume\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"CanSeeThrough\" parameters=\"obj\" type=\"boolean\">\r\n    return ((GetBoolean(obj, \"transparent\") or CanReachThrough(obj)) and not GetBoolean(obj, \"hidechildren\"))\r\n  </function>\r\n  <function name=\"CanReachThrough\" parameters=\"obj\" type=\"boolean\">\r\n    return (GetBoolean(obj, \"isopen\") and not GetBoolean(obj, \"hidechildren\"))\r\n  </function>\r\n  <function name=\"Got\" parameters=\"obj\" type=\"boolean\">\r\n    return (ListContains(ScopeInventory(), obj))\r\n  </function>\r\n  <function name=\"UpdateObjectLinks\">\r\n    if (game.enablehyperlinks) {\r\n      data = NewStringDictionary()\r\n      foreach (object, ScopeVisible()) {\r\n        dictionary add (data, object.name, Join(GetDisplayVerbs(object), \"/\"))\r\n      }\r\n      JS.updateObjectLinks (data)\r\n      exits = NewStringList()\r\n      foreach (exit, ScopeExits()) {\r\n        list add (exits, exit.name)\r\n      }\r\n      JS.updateExitLinks (exits)\r\n      commands = NewStringList()\r\n      foreach (cmd, ScopeCommands()) {\r\n        list add (commands, cmd.name)\r\n      }\r\n      JS.updateCommandLinks (commands)\r\n    }\r\n  </function>\r\n  <function name=\"ShowRoomDescription\"><![CDATA[\r\n    isDark = CheckDarkness()\r\n    if (isDark) {\r\n      descriptionfield = \"darkroomdescription\"\r\n    }\r\n    else {\r\n      descriptionfield = \"description\"\r\n    }\r\n    if (game.autodescription) {\r\n      desc = \"\"\r\n      for (i, 1, 4) {\r\n        if (i = game.autodescription_youarein) {\r\n          if (game.autodescription_youarein_useprefix) {\r\n            youarein = game.pov.parent.descprefix\r\n            desc = AddDescriptionLine (desc, youarein + \" \" + GetDisplayName(game.pov.parent) + \".\")\r\n          }\r\n          else {\r\n            desc = AddDescriptionLine (desc, \"<b>\" + CapFirst(GetDisplayName(game.pov.parent)) + \"</b>\")\r\n          }\r\n          if (game.autodescription_youarein_newline) {\r\n            msg (desc + \"<br/>\")\r\n            desc = \"\"\r\n          }\r\n        }\r\n        if (i = game.autodescription_youcansee) {\r\n          objects = FormatObjectList(game.pov.parent.objectslistprefix, GetNonTransparentParent(game.pov.parent), Template(\"And\"), \".\")\r\n          desc = AddDescriptionLine(desc, objects)\r\n          if (game.autodescription_youcansee_newline) {\r\n            msg (desc + \"<br/>\")\r\n            desc = \"\"\r\n          }\r\n        }\r\n        if (i = game.autodescription_youcango) {\r\n          exits = FormatExitList(game.pov.parent.exitslistprefix, GetExitsList(), Template(\"Or\"), \".\")\r\n          desc = AddDescriptionLine(desc, exits)\r\n          if (game.autodescription_youcango_newline) {\r\n            msg (desc + \"<br/>\")\r\n            desc = \"\"\r\n          }\r\n        }\r\n        if (i = game.autodescription_description) {\r\n          if (HasScript(game.pov.parent, descriptionfield)) {\r\n            if (LengthOf(desc) > 0) {\r\n              msg (desc)\r\n              desc = \"\"\r\n            }\r\n            do (game.pov.parent, descriptionfield)\r\n            if (game.autodescription_description_newline) {\r\n              msg (\"\")\r\n            }\r\n          }\r\n          else {\r\n            desc = AddDescriptionLine(desc, GetRoomDescription())\r\n            if (game.autodescription_description_newline) {\r\n              msg (desc + \"<br/>\")\r\n              desc = \"\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (LengthOf(desc) > 0) {\r\n        msg (desc)\r\n      }\r\n    }\r\n    else {\r\n      if (HasScript(game.pov.parent, descriptionfield)) {\r\n        do (game.pov.parent, descriptionfield)\r\n      }\r\n      else {\r\n        fulldesc = GetRoomDescription()\r\n        if (LengthOf(fulldesc) > 0) {\r\n          msg (fulldesc)\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"AddDescriptionLine\" parameters=\"desc, line\" type=\"string\"><![CDATA[\r\n    if (LengthOf(line) > 0) {\r\n      if (LengthOf(desc) > 0) {\r\n        msg (desc)\r\n        desc = \"\"\r\n      }\r\n      desc = desc + line\r\n    }\r\n    return (desc)\r\n  ]]></function>\r\n  <function name=\"GetRoomDescription\" type=\"string\"><![CDATA[\r\n    fulldesc = \"\"\r\n    if (CheckDarkness()) {\r\n      if (HasString(game.pov.parent, \"darkroomdescription\")) {\r\n        if (LengthOf(game.pov.parent.darkroomdescription) > 0) {\r\n          fulldesc = game.pov.parent.darkroomdescription\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      if (HasString(game.pov.parent, \"description\")) {\r\n        if (LengthOf(game.pov.parent.description) > 0) {\r\n          fulldesc = game.pov.parent.description\r\n        }\r\n      }\r\n    }\r\n    if (game.appendobjectdescription) {\r\n      foreach (val, ScopeVisibleNotHeld()) {\r\n        if (HasString(val, \"inroomdescription\")) {\r\n          if (LengthOf(val.inroomdescription) > 0 and val <> game.pov) {\r\n            fulldesc = fulldesc + \" \" + val.inroomdescription\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (Trim(fulldesc))\r\n  ]]></function>\r\n  <function name=\"OnEnterRoom\" parameters=\"oldRoom\"><![CDATA[\r\n    game.displayroomdescriptiononstart = false\r\n    if (IsDefined(\"oldRoom\")) {\r\n      if (oldRoom <> null) {\r\n        if (HasScript(oldRoom, \"onexit\")) {\r\n          do (oldRoom, \"onexit\")\r\n        }\r\n      }\r\n    }\r\n    on ready {\r\n      if ((not GetBoolean(game.pov.parent, \"visited\")) and HasScript(game.pov.parent, \"beforefirstenter\")) {\r\n        do (game.pov.parent, \"beforefirstenter\")\r\n      }\r\n      on ready {\r\n        if (HasScript(game.pov.parent, \"beforeenter\")) {\r\n          do (game.pov.parent, \"beforeenter\")\r\n        }\r\n        on ready {\r\n          if (game.gridmap) {\r\n            Grid_CalculateMapCoordinates (game.pov.parent, game.pov)\r\n            Grid_DrawPlayerInRoom (game.pov.parent)\r\n          }\r\n          if (IsDefined(\"oldRoom\")) {\r\n            if (oldRoom <> null and game.changeroom_newline and not game.command_newline) {\r\n              msg (\"\")\r\n            }\r\n          }\r\n          request (UpdateLocation, CapFirst(GetDisplayName(game.pov.parent)))\r\n          roomFrameExists = false\r\n          if (HasString(game.pov.parent, \"picture\")) {\r\n            if (LengthOf(game.pov.parent.picture) > 0) {\r\n              roomFrameExists = true\r\n              SetFramePicture (game.pov.parent.picture)\r\n            }\r\n          }\r\n          if (game.clearframe and not roomFrameExists) {\r\n            ClearFramePicture\r\n          }\r\n          if (game.showdescriptiononenter) {\r\n            ShowRoomDescription\r\n          }\r\n          if (HasScript( game, \"roomenter\")) {\r\n            do (game, \"roomenter\")\r\n          }\r\n          on ready {\r\n            if ((not GetBoolean(game.pov.parent, \"visited\")) and HasScript(game.pov.parent, \"firstenter\")) {\r\n              do (game.pov.parent, \"firstenter\")\r\n            }\r\n            on ready {\r\n              if (HasScript(game.pov.parent, \"enter\")) {\r\n                do (game.pov.parent, \"enter\")\r\n              }\r\n            }\r\n            set (game.pov.parent, \"visited\", true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"FormatObjectList\" parameters=\"preList, parent, preFinal, postList\" type=\"string\"><![CDATA[\r\n    result = \"\"\r\n    count = 0\r\n    list = RemoveSceneryObjects(GetDirectChildren(parent))\r\n    if (CheckDarkness()) {\r\n      list = RemoveDarkObjects(list)\r\n    }\r\n    listLength = ListCount(list)\r\n    foreach (item, list) {\r\n      if (LengthOf(result) = 0) {\r\n        result = preList + \" \"\r\n      }\r\n      result = result + GetDisplayNameLink(item, \"object\")\r\n      if (CanSeeThrough(item)) {\r\n        result = result + FormatObjectList(\" (\" + item.contentsprefix, item, preFinal, \")\")\r\n      }\r\n      count = count + 1\r\n      if (count = listLength - 1) {\r\n        result = result + \" \" + preFinal + \" \"\r\n      }\r\n      else if (count < listLength) {\r\n        result = result + \", \"\r\n      }\r\n      else {\r\n        result = result + postList\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"RemoveSceneryObjects\" parameters=\"list\" type=\"objectlist\"><![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, list) {\r\n      if (not obj.scenery and obj <> game.pov and obj.visible) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"RemoveLookOnlyExits\" parameters=\"list\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (obj, list) {\r\n      if (not obj.lookonly) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"RemoveDarkObjects\" parameters=\"list\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    foreach (obj, list) {\r\n      if (GetBoolean(obj, \"lightsource\") or obj.parent = game.pov) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"FormatExitList\" parameters=\"preList, list, preFinal, postList\" type=\"string\"><![CDATA[\r\n    result = \"\"\r\n    listLength = ListCount(list)\r\n    if (listLength > 0) {\r\n      count = 0\r\n      result = preList + \" \"\r\n      foreach (item, list) {\r\n        result = result + GetDisplayNameLink(item, \"exit\")\r\n        count = count + 1\r\n        if (count = listLength - 1) {\r\n          result = result + \" \" + preFinal + \" \"\r\n        }\r\n        else if (count < listLength) {\r\n          result = result + \", \"\r\n        }\r\n      }\r\n      result = result + postList\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"GetDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"alias\")) {\r\n      result = obj.alias\r\n    }\r\n    else {\r\n      result = obj.name\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"GetDisplayName\" parameters=\"obj\" type=\"string\">\r\n    return (GetDisplayNameLink(obj, \"\"))\r\n  </function>\r\n  <function name=\"GetDisplayNameLink\" parameters=\"obj, type\" type=\"string\"><![CDATA[\r\n    verbs = GetDisplayVerbs(obj)\r\n    if (verbs <> null) {\r\n      verbCount = ListCount(verbs)\r\n    }\r\n    else {\r\n      verbCount = 0\r\n    }\r\n    if (type = \"exit\" and verbCount = 1) {\r\n      if (not game.enablehyperlinks) {\r\n        result = GetDisplayAlias(obj)\r\n      }\r\n      else {\r\n        result = \"{exit:\" + obj.name + \"}\"\r\n      }\r\n    }\r\n    else if (type = \"\") {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    else {\r\n      result = \"{object:\" + obj.name + \"}\"\r\n    }\r\n    if (not GetBoolean(obj, \"usedefaultprefix\")) {\r\n      if (obj.prefix = null) {\r\n        prefix = \"\"\r\n      }\r\n      else {\r\n        prefix = obj.prefix\r\n      }\r\n    }\r\n    else if (type = \"exit\") {\r\n      prefix = \"\"\r\n    }\r\n    else {\r\n      prefix = GetDefaultPrefix(obj)\r\n    }\r\n    if (LengthOf(prefix) > 0) {\r\n      prefix = prefix + \" \"\r\n    }\r\n    result = prefix + result\r\n    if (not GetBoolean(obj, \"usedefaultprefix\") and HasString(obj, \"suffix\")) {\r\n      if (LengthOf(obj.suffix) > 0) {\r\n        result = result + \" \" + obj.suffix\r\n      }\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"ObjectLink\" parameters=\"obj\" type=\"string\">\r\n    return (\"{object:\" + obj.name + \"}\")\r\n  </function>\r\n  <function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = obj.listalias\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"CheckDarkness\" type=\"boolean\"><![CDATA[\r\n    roomCheckDarkness = true\r\n    if (GetBoolean(game.pov.parent, \"dark\")) {\r\n      if (ListCount(ScopeVisibleLightsource(\"strong\")) > 0) {\r\n        roomCheckDarkness = false\r\n      }\r\n    }\r\n    else {\r\n      roomCheckDarkness = false\r\n    }\r\n    game.pov.parent.darklevel = roomCheckDarkness\r\n    return (roomCheckDarkness)\r\n  ]]></function>\r\n  <function name=\"EnableTimer\" parameters=\"timer\">\r\n    timer.enabled = true\r\n    timer.trigger = game.timeelapsed + timer.interval\r\n  </function>\r\n  <function name=\"DisableTimer\" parameters=\"timer\">\r\n    timer.enabled = false\r\n  </function>\r\n  <function name=\"SetTimerInterval\" parameters=\"timer, interval\">\r\n    timer.interval = interval\r\n  </function>\r\n  <function name=\"SetTimerScript\" parameters=\"timer, script\">\r\n    timer.script = script\r\n  </function>\r\n  <function name=\"SetTimeout\" parameters=\"interval, script\">\r\n    SetTimeoutID (interval, \"\", script)\r\n  </function>\r\n  <function name=\"SetTimeoutID\" parameters=\"interval, name, script\">\r\n    timername = \"\"\r\n    if (name = \"\") {\r\n      timername = GetUniqueElementName(\"timeout\")\r\n    }\r\n    else {\r\n      if (GetTimer(name) = null and GetObject(name) = null) {\r\n        timername = name\r\n      }\r\n      else {\r\n        error (\"Error creating timer: There is already an existing object named \" + name)\r\n      }\r\n    }\r\n    if (not timername = \"\") {\r\n      create timer (timername)\r\n      timer = GetTimer(timername)\r\n      SetTimerInterval (timer, interval)\r\n      timer.timeoutscript = script\r\n      SetTimerScript (timer) {\r\n        this.enabled = false\r\n        invoke (this.timeoutscript)\r\n        destroy (this.name)\r\n      }\r\n      EnableTimer (timer)\r\n    }\r\n  </function>\r\n  <function name=\"Pause\" parameters=\"interval\">\r\n    request (Pause, ToString(interval * 1000))\r\n  </function>\r\n  <function name=\"RunTurnScripts\">\r\n    if (IsGameRunning()) {\r\n      if (game.menucallback = null) {\r\n        foreach (turnscript, AllTurnScripts()) {\r\n          if (GetBoolean(turnscript, \"enabled\")) {\r\n            inscope = false\r\n            if (turnscript.parent = game or turnscript.parent = null) {\r\n              inscope = true\r\n            }\r\n            else {\r\n              if (Contains(turnscript.parent, game.pov)) {\r\n                inscope = true\r\n              }\r\n            }\r\n            if (inscope) {\r\n              do (turnscript, \"script\")\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"EnableTurnScript\" parameters=\"turnscript\">\r\n    turnscript.enabled = true\r\n  </function>\r\n  <function name=\"DisableTurnScript\" parameters=\"turnscript\">\r\n    turnscript.enabled = false\r\n  </function>\r\n  <function name=\"SetTurnScript\" parameters=\"turnscript, script\">\r\n    turnscript.script = script\r\n  </function>\r\n  <function name=\"SetTurnTimeout\" parameters=\"turncount, script\">\r\n    SetTurnTimeoutID (turncount, \"\", script)\r\n  </function>\r\n  <function name=\"SetTurnTimeoutID\" parameters=\"turncount, name, script\"><![CDATA[\r\n    turnscriptname = \"\"\r\n    if (name = \"\") {\r\n      turnscriptname = GetUniqueElementName(\"turnscript\")\r\n    }\r\n    else {\r\n      if (GetObject(name) = null and GetTimer(name) = null) {\r\n        turnscriptname = name\r\n      }\r\n      else {\r\n        error (\"Error creating turnscript: There is already an existing object named \" + name)\r\n      }\r\n    }\r\n    if (not turnscriptname=\"\") {\r\n      create turnscript (turnscriptname)\r\n      turnscript = GetObject(turnscriptname)\r\n      turnscript.turncount = 0\r\n      turnscript.triggerturncount = turncount\r\n      turnscript.timeoutscript = script\r\n      SetTurnScript (turnscript) {\r\n        this.turncount = this.turncount + 1\r\n        if (this.turncount >= this.triggerturncount) {\r\n          this.enabled = false\r\n          invoke (this.timeoutscript)\r\n          destroy (this.name)\r\n        }\r\n      }\r\n      EnableTurnScript (turnscript)\r\n    }\r\n  ]]></function>\r\n  <function name=\"UpdateStatusAttributes\">\r\n    status = AddStatusAttributesForElement(\"\", game, game.statusattributes)\r\n    status = AddStatusAttributesForElement(status, game.pov, game.povstatusattributes)\r\n    status = AddStatusAttributesForElement(status, game.pov, game.pov.statusattributes)\r\n    request (SetStatus, status)\r\n  </function>\r\n  <function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"><![CDATA[\r\n    if (statusAttributes <> null) {\r\n      foreach (attr, statusAttributes) {\r\n        if (LengthOf(status) > 0) {\r\n          status = status + \"\\n\"\r\n        }\r\n        status = status + FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(statusAttributes, attr))\r\n      }\r\n    }\r\n    return (status)\r\n  ]]></function>\r\n  <function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\">\r\n    if (LengthOf(format) = 0) {\r\n      return (CapFirst(attr) + \": \" + value)\r\n    }\r\n    else {\r\n      if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\r\n        value = ToString(value)\r\n      }\r\n      if (TypeOf(value) = \"null\") {\r\n        value = \"\"\r\n      }\r\n      return (Replace(format, \"!\", value))\r\n    }\r\n  </function>\r\n  <function name=\"InitStatusAttributes\">\r\n    if (game.showscore) {\r\n      game.score = 0\r\n      if (game.statusattributes = null) {\r\n        game.statusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.statusattributes, \"score\", \"Score: !\")\r\n    }\r\n    if (game.showhealth) {\r\n      if (game.povstatusattributes = null) {\r\n        game.povstatusattributes = NewStringDictionary()\r\n      }\r\n      dictionary add (game.povstatusattributes, \"health\", \"Health: !%\")\r\n    }\r\n  </function>\r\n  <function name=\"IncreaseScore\" parameters=\"amount\">\r\n    if (not HasInt(game, \"score\")) {\r\n      error (\"Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.\")\r\n    }\r\n    game.score = game.score + amount\r\n  </function>\r\n  <function name=\"DecreaseScore\" parameters=\"amount\">\r\n    if (not HasInt(game, \"score\")) {\r\n      error (\"Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.\")\r\n    }\r\n    game.score = game.score - amount\r\n  </function>\r\n  <function name=\"IncreaseHealth\" parameters=\"amount\">\r\n    if (not HasInt(game.pov, \"health\")) {\r\n      error (\"Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.\")\r\n    }\r\n    game.pov.health = game.pov.health + amount\r\n  </function>\r\n  <function name=\"DecreaseHealth\" parameters=\"amount\">\r\n    if (not HasInt(game.pov, \"health\")) {\r\n      error (\"Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.\")\r\n    }\r\n    game.pov.health = game.pov.health - amount\r\n  </function>\r\n  <function name=\"OutputText\" parameters=\"text\">\r\n    data = NewDictionary()\r\n    dictionary add (data, \"fulltext\", text)\r\n    text = ProcessTextSection(text, data)\r\n    OutputTextRaw (text)\r\n  </function>\r\n  <function name=\"OutputTextRaw\" parameters=\"text\"><![CDATA[\r\n    format = GetCurrentTextFormat(\"\")\r\n    JS.addText (\"<span style=\\\"\" + format + \"\\\">\" + text + \"</span><br/>\")\r\n    if (GetString(game, \"commandbarformat\") <> format) {\r\n      ResetCommandBarFormat\r\n    }\r\n    request (Speak, text)\r\n  ]]></function>\r\n  <function name=\"ResetCommandBarFormat\">\r\n    format = GetCurrentTextFormat(\"\") + \";background:\" + game.defaultbackground\r\n    game.commandbarformat = format\r\n    JS.setCommandBarStyle (format)\r\n  </function>\r\n  <function name=\"OutputTextNoBr\" parameters=\"text\">\r\n    data = NewDictionary()\r\n    dictionary add (data, \"fulltext\", text)\r\n    text = ProcessTextSection(text, data)\r\n    OutputTextRawNoBr (text)\r\n  </function>\r\n  <function name=\"OutputTextRawNoBr\" parameters=\"text\"><![CDATA[\r\n    JS.addText (\"<span style=\\\"\" + GetCurrentTextFormat(\"\") + \"\\\">\" + text + \"</span>\")\r\n    request (Speak, text)\r\n  ]]></function>\r\n  <function name=\"GetCurrentTextFormat\" parameters=\"colour\" type=\"string\"><![CDATA[\r\n    style = \"\"\r\n    if (UIOptionUseGameFont()) {\r\n      font = GetCurrentFontFamily()\r\n    }\r\n    else {\r\n      font = GetUIOption(\"OverrideFontName\")\r\n    }\r\n    if (LengthOf(font) > 0) {\r\n      style = style + \"font-family:\" + font + \";\"\r\n    }\r\n    if (LengthOf(colour) = 0) {\r\n      if (UIOptionUseGameColours()) {\r\n        colour = game.defaultforeground\r\n      }\r\n      else {\r\n        colour = GetUIOption(\"OverrideForeground\")\r\n      }\r\n    }\r\n    if (LengthOf(colour) > 0) {\r\n      style = style + \"color:\" + colour + \";\"\r\n    }\r\n    if (UIOptionUseGameFont()) {\r\n      size = game.defaultfontsize\r\n    }\r\n    else {\r\n      size = ToDouble(GetUIOption(\"OverrideFontSize\"))\r\n    }\r\n    if (size > 0) {\r\n      style = style + \"font-size:\" + ToString(size) + \"pt;\"\r\n    }\r\n    return (style)\r\n  ]]></function>\r\n  <function name=\"GetCurrentLinkTextFormat\" type=\"string\">\r\n    return (GetCurrentTextFormat(GetLinkTextColour()))\r\n  </function>\r\n  <function name=\"UIOptionUseGameFont\" type=\"boolean\">\r\n    value = GetUIOption(\"UseGameFont\")\r\n    if (value = null or value = \"true\") {\r\n      return (true)\r\n    }\r\n    else {\r\n      return (false)\r\n    }\r\n  </function>\r\n  <function name=\"UIOptionUseGameColours\" type=\"boolean\">\r\n    value = GetUIOption(\"UseGameColours\")\r\n    if (value = null or value = \"true\") {\r\n      return (true)\r\n    }\r\n    else {\r\n      return (false)\r\n    }\r\n  </function>\r\n  <function name=\"GetLinkTextColour\" type=\"string\">\r\n    if (UIOptionUseGameColours()) {\r\n      return (game.defaultlinkforeground)\r\n    }\r\n    else {\r\n      return (GetUIOption(\"OverrideLinkForeground\"))\r\n    }\r\n  </function>\r\n  <function name=\"ProcessTextSection\" parameters=\"text, data\" type=\"string\"><![CDATA[\r\n    containsUnprocessedSection = false\r\n    open = Instr(text, \"{\")\r\n      if (open > 0) {\r\n        nestCount = 1\r\n        searchStart = open + 1\r\n        finished = false\r\n        while (not finished) {\r\n          nextOpen = Instr(searchStart, text, \"{\")\r\n            nextClose = Instr(searchStart, text, \"}\")\r\n          if (nextClose > 0) {\r\n            if (nextOpen > 0 and nextOpen < nextClose) {\r\n              nestCount = nestCount + 1\r\n              searchStart = nextOpen + 1\r\n            }\r\n            else {\r\n              nestCount = nestCount - 1\r\n              searchStart = nextClose + 1\r\n              if (nestCount = 0) {\r\n                close = nextClose\r\n                containsUnprocessedSection = true\r\n                finished = true\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            finished = true\r\n          }\r\n        }\r\n      }\r\n      if (containsUnprocessedSection) {\r\n        section = Mid(text, open + 1, close - open - 1)\r\n        value = ProcessTextCommand(section, data)\r\n        text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data)\r\n      }\r\n      return (text)\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand\" parameters=\"section, data\" type=\"string\">\r\n    if (StartsWith(section, \"if \")) {\r\n      return (ProcessTextCommand_If(section, data))\r\n    }\r\n    else if (StartsWith(section, \"object:\")) {\r\n      return (ProcessTextCommand_Object(section, data))\r\n    }\r\n    else if (StartsWith(section, \"command:\")) {\r\n      return (ProcessTextCommand_Command(Mid(section, 9), data))\r\n    }\r\n    else if (StartsWith(section, \"page:\")) {\r\n      return (ProcessTextCommand_Command(Mid(section, 6), data))\r\n    }\r\n    else if (StartsWith(section, \"exit:\")) {\r\n      return (ProcessTextCommand_Exit(section, data))\r\n    }\r\n    else if (StartsWith(section, \"once:\")) {\r\n      return (ProcessTextCommand_Once(section, data))\r\n    }\r\n    else if (StartsWith(section, \"notfirst:\")) {\r\n      return (ProcessTextCommand_NotFirst(section, data))\r\n    }\r\n    else if (StartsWith(section, \"random:\")) {\r\n      return (ProcessTextCommand_Random(section, data))\r\n    }\r\n    else if (StartsWith(section, \"rndalt:\")) {\r\n      return (ProcessTextCommand_RandomAlias(section, data))\r\n    }\r\n    else if (StartsWith(section, \"img:\")) {\r\n      return (ProcessTextCommand_Img(section, data))\r\n    }\r\n    else if (StartsWith(section, \"counter:\")) {\r\n      return (ProcessTextCommand_Counter(Mid(section, 9), data))\r\n    }\r\n    else if (StartsWith(section, \"select:\")) {\r\n      return (ProcessTextCommand_Select(section, data))\r\n    }\r\n    else {\r\n      dot = Instr(section, \".\")\r\n      if (dot = 0) {\r\n        return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n      }\r\n      else {\r\n        objectname = Left(section, dot - 1)\r\n        attributename = Mid(section, dot + 1)\r\n        object = GetObject(objectname)\r\n        if (object = null) {\r\n          return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n        }\r\n        else {\r\n          if (HasAttribute(object, attributename)) {\r\n            type = TypeOf(object, attributename)\r\n            switch (type) {\r\n              case (\"string\", \"int\", \"double\") {\r\n                return (ToString(GetAttribute(object, attributename)))\r\n              }\r\n              case (\"boolean\") {\r\n                result = GetAttribute(object, attributename)\r\n                if (result) {\r\n                  return (\"true\")\r\n                }\r\n                else {\r\n                  return (\"false\")\r\n                }\r\n              }\r\n              default {\r\n                return (\"(\" + type + \")\")\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            return (\"\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"ProcessTextCommand_Object\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    objectname = Mid(section, 8)\r\n    text = \"\"\r\n    colon = Instr(objectname, \":\")\r\n    if (colon > 0) {\r\n      text = Mid(objectname, colon + 1)\r\n      objectname = Left(objectname, colon - 1)\r\n    }\r\n    object = GetObject(objectname)\r\n    if (object = null) {\r\n      return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n    }\r\n    else {\r\n      if (LengthOf(text) = 0) {\r\n        text = SafeXML(GetDisplayAlias(object))\r\n      }\r\n      if (game.enablehyperlinks) {\r\n        linkid = ProcessTextCommand_GetNextLinkId()\r\n        colour = \"\"\r\n        if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = object.linkcolour\r\n        }\r\n        else {\r\n          colour = GetLinkTextColour()\r\n        }\r\n        style = GetCurrentTextFormat(colour)\r\n        return (\"<a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\">\" + text + \"</a>\")\r\n      }\r\n      else {\r\n        return (text)\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_GetNextLinkId\" type=\"string\">\r\n    if (not HasInt(game, \"lastlinkid\")) {\r\n      game.lastlinkid = 0\r\n    }\r\n    game.lastlinkid = game.lastlinkid + 1\r\n    return (\"verblink\" + game.lastlinkid)\r\n  </function>\r\n  <function name=\"ProcessTextCommand_Command\" parameters=\"command, data\" type=\"string\"><![CDATA[\r\n    text = command\r\n    colon = Instr(command, \":\")\r\n    if (colon > 0) {\r\n      text = Mid(command, colon + 1)\r\n      command = Left(command, colon - 1)\r\n    }\r\n    style = GetCurrentLinkTextFormat()\r\n    candidates = NewObjectList()\r\n    foreach (cmd, ScopeCommands()) {\r\n      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {\r\n        list add (candidates, cmd)\r\n      }\r\n    }\r\n    elementid = \"\"\r\n    if (ListCount(candidates) = 1) {\r\n      cmd = ObjectListItem(candidates, 0)\r\n      elementid = cmd.name\r\n    }\r\n    linkid = ProcessTextCommand_GetNextLinkId()\r\n    dataattrs = \"\"\r\n    if (game.deactivatecommandlinks) {\r\n      dataattrs = dataattrs + \"data-deactivateonclick=\\\"true\\\" \"\r\n    }\r\n    dataattrs = dataattrs + \"data-command=\\\"\" + command + \"\\\"\"\r\n    return (\"<a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink commandlink\\\" data-elementid=\\\"\" + elementid + \"\\\" \" + dataattrs + \">\" + ProcessTextSection(text, data) + \"</a>\")\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_Exit\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    exitname = Mid(section, 6)\r\n    exit = GetObject(exitname)\r\n    if (exit = null) {\r\n      return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n    }\r\n    else {\r\n      verbs = GetDisplayVerbs(exit)\r\n      alias = GetDisplayAlias(exit)\r\n      command = LCase(StringListItem(verbs, 0)) + \" \" + alias\r\n      style = GetCurrentLinkTextFormat()\r\n      return (\"<a style=\\\"\" + style + \"\\\" class=\\\"cmdlink exitlink\\\" data-elementid=\\\"\" + exit.name + \"\\\" data-command=\\\"\" + command + \"\\\">\" + alias + \"</a>\")\r\n    }\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_Once\" parameters=\"section, data\" type=\"string\">\r\n    if (not HasAttribute(game, \"textprocessor_seen\")) {\r\n      game.textprocessor_seen = NewDictionary()\r\n    }\r\n    fulltext = StringDictionaryItem(data, \"fulltext\")\r\n    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {\r\n      onceSectionsInThisText = NewList()\r\n      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)\r\n    }\r\n    else {\r\n      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)\r\n    }\r\n    if (not ListContains(onceSectionsInThisText, section)) {\r\n      list add (onceSectionsInThisText, section)\r\n      return (ProcessTextSection(Mid(section, 6), data))\r\n    }\r\n    else {\r\n      return (\"\")\r\n    }\r\n  </function>\r\n  <function name=\"ProcessTextCommand_NotFirst\" parameters=\"section, data\" type=\"string\">\r\n    if (not HasAttribute(game, \"textprocessor_seen\")) {\r\n      game.textprocessor_seen = NewDictionary()\r\n    }\r\n    fulltext = StringDictionaryItem(data, \"fulltext\")\r\n    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {\r\n      onceSectionsInThisText = NewList()\r\n      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)\r\n    }\r\n    else {\r\n      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)\r\n    }\r\n    if (not ListContains(onceSectionsInThisText, section)) {\r\n      list add (onceSectionsInThisText, section)\r\n      return (\"\")\r\n    }\r\n    else {\r\n      return (ProcessTextSection(Mid(section, 10), data))\r\n    }\r\n  </function>\r\n  <function name=\"ProcessTextCommand_Random\" parameters=\"section, data\" type=\"string\">\r\n    elements = Mid(section, 8)\r\n    elementslist = Tsplit(elements)\r\n    index = GetRandomInt(0, ListCount(elementslist) - 1)\r\n    return (ProcessTextSection(ListItem(elementslist, index), data))\r\n  </function>\r\n  <function name=\"Tsplit\" parameters=\"splittext\" type=\"stringlist\"><![CDATA[\r\n    itemlist = NewStringList()\r\n    sections = 0\r\n    startpos = 1\r\n    for (i, 1, LengthOf(splittext)) {\r\n      if (Mid(splittext, i, 1) = \"{\") {\r\n          sections = sections + 1\r\n        }\r\n        if (Mid(splittext, i, 1) = \"}\") {\r\n        sections = sections - 1\r\n      }\r\n      if (Mid(splittext, i, 1) = \":\" and 0 >= sections) {\r\n        item = Mid(splittext, startpos, i - startpos)\r\n        list add (itemlist, item)\r\n        startpos = i + 1\r\n      }\r\n    }\r\n    item = Mid(splittext, startpos)\r\n    list add (itemlist, item)\r\n    return (itemlist)\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_RandomAlias\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    objectname = Mid(section, 8)\r\n    object = GetObject(objectname)\r\n    if (object = null) {\r\n      return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n    }\r\n    else {\r\n      count = ListCount(object.alt)\r\n      if (count > 0) {\r\n        return (ListItem(object.alt, GetRandomInt(0, count - 1)))\r\n      }\r\n      else {\r\n        return (\"\")\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_If\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    command = Mid(section, 4)\r\n    colon = Instr(command, \":\")\r\n    if (colon = 0) {\r\n      return (\"{if \" + command + \"}\")\r\n    }\r\n    else {\r\n      text = Mid(command, colon + 1)\r\n      condition = Left(command, colon - 1)\r\n      operator = Instr(condition, \"<=\")\r\n      if (operator <> 0) {\r\n        operatorlength = 2\r\n      }\r\n      if (operator = 0) {\r\n        operator = Instr(condition, \">=\")\r\n        if (operator <> 0) {\r\n          operatorlength = 2\r\n        }\r\n      }\r\n      if (operator = 0) {\r\n        operator = Instr(condition, \"<>\")\r\n        if (operator <> 0) {\r\n          operatorlength = 2\r\n        }\r\n      }\r\n      if (operator = 0) {\r\n        operator = Instr(condition, \"<\")\r\n        if (operator <> 0) {\r\n          operatorlength = 1\r\n        }\r\n      }\r\n      if (operator = 0) {\r\n        operator = Instr(condition, \">\")\r\n        if (operator <> 0) {\r\n          operatorlength = 1\r\n        }\r\n      }\r\n      if (operator = 0) {\r\n        operator = Instr(condition, \"=\")\r\n        if (operator <> 0) {\r\n          operatorlength = 1\r\n        }\r\n      }\r\n      if (operator = 0) {\r\n        checkfor = true\r\n        if (StartsWith(condition, \"not \")) {\r\n          checkfor = false\r\n          condition = Mid(condition, 5)\r\n        }\r\n        dot = Instr(condition, \".\")\r\n        if (dot = 0) {\r\n          result = GetBoolean(game, condition)\r\n        }\r\n        else {\r\n          objectname = Left(condition, dot - 1)\r\n          attributename = Mid(condition, dot + 1)\r\n          object = GetObject(objectname)\r\n          if (object = null) {\r\n            result = false\r\n          }\r\n          else {\r\n            result = GetBoolean(object, attributename)\r\n          }\r\n        }\r\n        if (result = checkfor) {\r\n          return (ProcessTextSection(text, data))\r\n        }\r\n        else {\r\n          return (\"\")\r\n        }\r\n      }\r\n      else {\r\n        lhs = Left(condition, operator - 1)\r\n        rhs = Mid(condition, operator + operatorlength)\r\n        op = Mid(condition, operator, operatorlength)\r\n        dot = Instr(lhs, \".\")\r\n        if (dot = 0) {\r\n          objectname = \"\"\r\n          attributename = \"\"\r\n          if (HasInt(game, lhs)) {\r\n            objectname = \"game\"\r\n            attributename = lhs\r\n          }\r\n          else {\r\n            return (\"{if \" + command + \"}\")\r\n          }\r\n        }\r\n        else {\r\n          objectname = Left(lhs, dot - 1)\r\n          attributename = Mid(lhs, dot + 1)\r\n        }\r\n        object = GetObject(objectname)\r\n        if (object = null) {\r\n          return (\"{if \" + command + \"}\")\r\n        }\r\n        else {\r\n          value = GetAttribute(object, attributename)\r\n          // The next three lines added by The Pixie\r\n          if (TypeOf(value) = \"object\") {\r\n            value = value.name\r\n          }\r\n          if (op = \"=\") {\r\n            if (ToString(value) = rhs) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n          else if (op = \"<>\") {\r\n            if (not ToString(value) = rhs) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n          else if (op = \">\") {\r\n            if (ToDouble(ToString(value)) > ToDouble(rhs)) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n          else if (op = \"<\") {\r\n            if (ToDouble(ToString(value)) < ToDouble(rhs)) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n          else if (op = \">=\") {\r\n            if (ToDouble(ToString(value)) >= ToDouble(rhs)) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n          else if (op = \"<=\") {\r\n            if (ToDouble(ToString(value)) <= ToDouble(rhs)) {\r\n              return (ProcessTextSection(text, data))\r\n            }\r\n            else {\r\n              return (\"\")\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_Img\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    filename = Mid(section, 5)\r\n    return (\"<img src=\\\"\" + GetFileURL(filename) + \"\\\" />\")\r\n  ]]></function>\r\n  <function name=\"ProcessTextCommand_Counter\" parameters=\"section, data\" type=\"string\">\r\n    if (HasAttribute(game, section)) {\r\n      return (ToString(GetAttribute(game, section)))\r\n    }\r\n    else {\r\n      return (\"0\")\r\n    }\r\n  </function>\r\n  <function name=\"ProcessTextCommand_Select\" parameters=\"section, data\" type=\"string\"><![CDATA[\r\n    elements = Mid(section, 8)\r\n    elementslist = Split(elements, \":\")\r\n    objectandatt = StringListItem (elementslist, 0)\r\n    list remove (elementslist, objectandatt)\r\n    objectandattlist = Split(objectandatt, \".\")\r\n    if (not ListCount (objectandattlist) = 2) {\r\n      return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n    }\r\n    else {\r\n      object = GetObject(StringListItem(objectandattlist, 0))\r\n      if (object = null) {\r\n        return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n      }\r\n      else if (not HasInt (object, StringListItem(objectandattlist, 1))) {\r\n        return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n      }\r\n      else {\r\n        index = GetInt(object, StringListItem(objectandattlist, 1))\r\n        if ((0 > index) or (index >= Listcount(elementslist))) {\r\n          return (\"{\" + ProcessTextSection(section, data) + \"}\")\r\n        }\r\n        else {\r\n          return (ProcessTextSection(ListItem(elementslist, index), data))\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"SetFramePicture\" parameters=\"filename\"><![CDATA[\r\n    request (SetPanelContents, \"<img src=\\\"\" + GetFileURL(filename) + \"\\\" onload=\\\"setPanelHeight()\\\"/>\")\r\n    game.panelcontents = filename\r\n  ]]></function>\r\n  <function name=\"ClearFramePicture\">\r\n    request (SetPanelContents, \"\")\r\n    game.panelcontents = null\r\n  </function>\r\n  <function name=\"ClearScreen\">\r\n    request (ClearScreen, \"\")\r\n  </function>\r\n  <function name=\"SetForegroundColour\" parameters=\"colour\">\r\n    request (Foreground, colour)\r\n    game.defaultforeground = colour\r\n  </function>\r\n  <function name=\"SetBackgroundColour\" parameters=\"colour\">\r\n    request (Background, colour)\r\n    game.defaultbackground = colour\r\n  </function>\r\n  <function name=\"SetFontName\" parameters=\"font\">\r\n    game.defaultfont = font\r\n    game.defaultwebfont = \"\"\r\n  </function>\r\n  <function name=\"SetWebFontName\" parameters=\"font\">\r\n    AddExternalStylesheet (\"https://fonts.googleapis.com/css?family=\" + Replace(font, \" \", \"+\"))\r\n    game.defaultwebfont = font\r\n  </function>\r\n  <function name=\"AddExternalStylesheet\" parameters=\"stylesheet\">\r\n    if (game.externalstylesheets = null) {\r\n      game.externalstylesheets = NewStringList()\r\n    }\r\n    if (not ListContains(game.externalstylesheets, stylesheet)) {\r\n      list add (game.externalstylesheets, stylesheet)\r\n      JS.addExternalStylesheet (stylesheet)\r\n    }\r\n  </function>\r\n  <function name=\"SetFontSize\" parameters=\"size\">\r\n    game.defaultfontsize = size\r\n  </function>\r\n  <function name=\"PrintCentered\" parameters=\"text\">\r\n    SetAlignment (\"center\")\r\n    msg (text)\r\n    SetAlignment (\"left\")\r\n  </function>\r\n  <function name=\"ShowYouTube\" parameters=\"id\">\r\n    JS.AddYouTube (id)\r\n  </function>\r\n  <function name=\"ShowVimeo\" parameters=\"id\">\r\n    JS.AddVimeo (id)\r\n  </function>\r\n  <function name=\"WaitForKeyPress\">\r\n    request (Wait, \"\")\r\n  </function>\r\n  <function name=\"DisplayHttpLink\" parameters=\"text, url, https\"><![CDATA[\r\n    pos = Instr(url, \"://\")\r\n    if (pos > 0) {\r\n      url = Mid(url, pos + 3)\r\n    }\r\n    if (https) {\r\n      url = \"https://\" + url\r\n    }\r\n    else {\r\n      url = \"http://\" + url\r\n    }\r\n    msg (\"<a style=\\\"\" + GetCurrentLinkTextFormat() + \"\\\" href=\\\"\" + url + \"\\\">\" + text + \"</a>\")\r\n  ]]></function>\r\n  <function name=\"DisplayMailtoLink\" parameters=\"text, url\"><![CDATA[\r\n    if (Instr(url, \"mailto:\") = 0) {\r\n      url = \"mailto:\" + url\r\n    }\r\n    msg (\"<a style=\\\"\" + GetCurrentLinkTextFormat() + \"\\\" href=\\\"\" + url + \"\\\">\" + text + \"</a>\")\r\n  ]]></function>\r\n  <function name=\"CommandLink\" parameters=\"cmd, text\" type=\"string\">\r\n    return (\"{command:\" + cmd + \":\" + text + \"}\")\r\n  </function>\r\n  <function name=\"Log\" parameters=\"text\">\r\n    request (Log, text)\r\n  </function>\r\n  <function name=\"SetBackgroundImage\" parameters=\"filename\">\r\n    JS.SetBackgroundImage (GetFileURL(filename))\r\n    game.backgroundimage = filename\r\n  </function>\r\n  <function name=\"SetBackgroundOpacity\" parameters=\"opacity\">\r\n    JS.SetBackgroundOpacity (opacity)\r\n    game.backgroundopacity = opacity\r\n    game.setbackgroundopacity = true\r\n  </function>\r\n  <function name=\"DisplayList\" parameters=\"list, numbers\"><![CDATA[\r\n    if (numbers) {\r\n      result = \"<ol>\"\r\n    }\r\n    else {\r\n      result = \"<ul>\"\r\n    }\r\n    foreach (item, list) {\r\n      result = result + \"<li>\" + item + \"</li>\"\r\n    }\r\n    if (numbers) {\r\n      result = result + \"</ol>\"\r\n    }\r\n    else {\r\n      result = result + \"</ul>\"\r\n    }\r\n    msg (result)\r\n  ]]></function>\r\n  <function name=\"SetAlignment\" parameters=\"align\">\r\n    JS.createNewDiv (align)\r\n  </function>\r\n  <function name=\"GetCurrentFontFamily\" type=\"string\">\r\n    if (game.defaultwebfont = null) {\r\n      return (game.defaultfont)\r\n    }\r\n    else {\r\n      if (game.defaultwebfont = \"\") {\r\n        return (game.defaultfont)\r\n      }\r\n      else {\r\n        return (\"'\" + game.defaultwebfont + \"', \" + game.defaultfont)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Grid_SetScale\" parameters=\"scale\">\r\n    JS.Grid_SetScale (scale)\r\n  </function>\r\n  <function name=\"Grid_CalculateMapCoordinates\" parameters=\"room, playerobject\"><![CDATA[\r\n    if (room.parent <> null) {\r\n      if (room.grid_parent_offset_auto) {\r\n        room.grid_parent_offset_x = (room.parent.grid_width - room.grid_width) /2.0\r\n        room.grid_parent_offset_y = (room.parent.grid_length - room.grid_length) /2.0\r\n      }\r\n      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") - room.grid_parent_offset_x)\r\n      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") - room.grid_parent_offset_y)\r\n      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n      room.parent.grid_render = true\r\n      Grid_CalculateMapCoordinates (room.parent, playerobject)\r\n    }\r\n    // go through all exits in room, set x,y co-ordinates for the rooms they point to\r\n    foreach (exit, AllExits()) {\r\n      if (exit.parent = room and not GetBoolean(exit, \"lookonly\")) {\r\n        if (DoesInherit(exit, \"northdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width/2.0 + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.to.grid_width/2.0)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.to.grid_length) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"eastdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length/2.0 + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.to.grid_length/2.0)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\"))\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"southdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width/2.0 + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.to.grid_width/2.0)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"westdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length/2.0 + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.to.grid_width) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.to.grid_length/2.0)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\"))\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"northwestdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.to.grid_width) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.to.grid_length) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"northeastdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.to.grid_length) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") - exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"southwestdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", (Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.to.grid_width) - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") - exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"southeastdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_x\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"x\") + exit.grid_length)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit, \"end_y\", Grid_GetGridCoordinateForPlayer(playerobject, exit, \"y\") + exit.grid_length)\r\n          exit.grid_render = true\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"updirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\") + exit.grid_length)\r\n          exit.grid_render = false\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"downdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\") - exit.grid_length)\r\n          exit.grid_render = false\r\n          exit.to.grid_render = true\r\n        }\r\n        else if (DoesInherit(exit, \"indirection\") or DoesInherit(exit, \"outdirection\")) {\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"x\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"x\") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"y\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"y\") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)\r\n          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, \"z\", Grid_GetGridCoordinateForPlayer(playerobject, room, \"z\"))\r\n          exit.grid_render = false\r\n          exit.to.grid_render = true\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"Grid_DrawPlayerInRoom\" parameters=\"room\">\r\n    if (room.grid_render) {\r\n      Grid_DrawRoom (room, false, game.pov)\r\n      player_x = Grid_GetGridCoordinateForPlayer(game.pov, room, \"x\") + room.grid_width/2.0\r\n      player_y = Grid_GetGridCoordinateForPlayer(game.pov, room, \"y\") + room.grid_length/2.0\r\n      player_z = Grid_GetGridCoordinateForPlayer(game.pov, room, \"z\")\r\n      // Grid_DrawPlayer(x, y, z, radius, border, borderWidth, fill)\r\n      JS.Grid_DrawPlayer (player_x, player_y, player_z, 5, \"black\", 2, \"yellow\")\r\n    }\r\n  </function>\r\n  <function name=\"Grid_DrawRoom\" parameters=\"room, redraw, playerobject\"><![CDATA[\r\n    if (room.grid_render) {\r\n      if (redraw or not Grid_GetRoomBooleanForPlayer(playerobject, room, \"grid_isdrawn\")) {\r\n        if (room.parent <> null) {\r\n          Grid_DrawRoom (room.parent, redraw, playerobject)\r\n        }\r\n        JS.Grid_DrawBox (Grid_GetGridCoordinateForPlayer(game.pov, room, \"x\"), Grid_GetGridCoordinateForPlayer(game.pov, room, \"y\"), Grid_GetGridCoordinateForPlayer(game.pov, room, \"z\"), room.grid_width, room.grid_length, room.grid_border, room.grid_borderwidth, room.grid_fill, room.grid_bordersides)\r\n        if (LengthOf(room.grid_label) > 0) {\r\n          label_x = Grid_GetGridCoordinateForPlayer(game.pov, room, \"x\") + room.grid_width/2.0\r\n          label_y = (Grid_GetGridCoordinateForPlayer(game.pov, room, \"y\") + room.grid_length/2.0) - 0.5\r\n          JS.Grid_DrawLabel (label_x, label_y, Grid_GetGridCoordinateForPlayer(game.pov, room, \"z\"), room.grid_label)\r\n        }\r\n        foreach (exit, AllExits()) {\r\n          if (exit.grid_render and exit.parent = room and exit.grid_length > 0) {\r\n            Grid_DrawLine (Grid_GetGridCoordinateForPlayer(game.pov, exit, \"x\"), Grid_GetGridCoordinateForPlayer(game.pov, exit, \"y\"), Grid_GetGridCoordinateForPlayer(game.pov, exit, \"end_x\"), Grid_GetGridCoordinateForPlayer(game.pov, exit, \"end_y\"), \"black\", 1)\r\n          }\r\n        }\r\n        Grid_SetRoomBooleanForPlayer (playerobject, room, \"grid_isdrawn\", true)\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"Grid_ShowCustomLayer\" parameters=\"visible\">\r\n    if (visible) {\r\n      JS.Grid_ShowCustomLayer (true)\r\n    }\r\n    else {\r\n      JS.Grid_ShowCustomLayer (false)\r\n    }\r\n  </function>\r\n  <function name=\"Grid_ClearCustomLayer\">\r\n    JS.Grid_ClearCustomLayer ()\r\n  </function>\r\n  <function name=\"Grid_DrawLine\" parameters=\"x1, y1, x2, y2, border, borderWidth\">\r\n    JS.Grid_DrawLine (x1, y1, x2, y2, border, borderWidth)\r\n  </function>\r\n  <function name=\"Grid_DrawArrow\" parameters=\"id, x1, y1, x2, y2, border, borderWidth\">\r\n    JS.Grid_DrawArrow (id, x1, y1, x2, y2, border, borderWidth)\r\n  </function>\r\n  <function name=\"Grid_DrawGridLines\" parameters=\"x1, y1, x2, y2, border\">\r\n    JS.Grid_DrawGridLines (x1, y1, x2, y2, border)\r\n  </function>\r\n  <function name=\"Grid_SetCentre\" parameters=\"x, y\">\r\n    JS.Grid_SetCentre (x, y)\r\n  </function>\r\n  <function name=\"Grid_DrawSquare\" parameters=\"id, x, y, width, height, text, fill\">\r\n    JS.Grid_DrawSquare (id, x, y, width, height, text, fill)\r\n  </function>\r\n  <function name=\"Grid_LoadSvg\" parameters=\"data, id\">\r\n    JS.Grid_LoadSvg (data, id)\r\n  </function>\r\n  <function name=\"Grid_DrawSvg\" parameters=\"id, symbolid, x, y, width, height\">\r\n    JS.Grid_DrawSvg (id, symbolid, x, y, width, height)\r\n  </function>\r\n  <function name=\"Grid_DrawImage\" parameters=\"id, url, x, y, width, height\">\r\n    JS.Grid_DrawImage (id, url, x, y, width, height)\r\n  </function>\r\n  <function name=\"Grid_AddNewShapePoint\" parameters=\"x, y\">\r\n    JS.Grid_AddNewShapePoint (x, y)\r\n  </function>\r\n  <function name=\"Grid_DrawShape\" parameters=\"id, border, fill, opacity\">\r\n    JS.Grid_DrawShape (id, border, fill, opacity)\r\n  </function>\r\n  <function name=\"JS_GridSquareClick\" parameters=\"parameterstring\">\r\n    parameters = Split(parameterstring, \";\")\r\n    x = ToInt(StringListItem(parameters, 0))\r\n    y = ToInt(StringListItem(parameters, 1))\r\n    GridSquareClick (x, y)\r\n  </function>\r\n  <function name=\"GridSquareClick\" parameters=\"x, y\">\r\n    // Copy this function into your game to handle grid square clicks\r\n  </function>\r\n  <function name=\"Grid_Redraw\">\r\n    foreach (object, AllObjects()) {\r\n      if (Grid_GetRoomBooleanForPlayer(game.pov, object, \"grid_isdrawn\")) {\r\n        Grid_DrawRoom (object, true, game.pov)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Grid_SetGridCoordinateForPlayer\" parameters=\"playerobject, room, coordinate, value\">\r\n    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)\r\n    if (DictionaryContains(coordinates, coordinate)) {\r\n      dictionary remove (coordinates, coordinate)\r\n    }\r\n    dictionary add (coordinates, coordinate, value * 1.0)\r\n  </function>\r\n  <function name=\"Grid_GetGridCoordinateForPlayer\" parameters=\"playerobject, room, coordinate\" type=\"double\">\r\n    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)\r\n    return (DictionaryItem(coordinates, coordinate))\r\n  </function>\r\n  <function name=\"Grid_SetRoomBooleanForPlayer\" parameters=\"playerobject, room, coordinate, value\">\r\n    datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)\r\n    if (DictionaryContains(datadictionary, coordinate)) {\r\n      dictionary remove (datadictionary, coordinate)\r\n    }\r\n    dictionary add (datadictionary, coordinate, value)\r\n  </function>\r\n  <function name=\"Grid_GetRoomBooleanForPlayer\" parameters=\"playerobject, room, attribute\" type=\"boolean\">\r\n    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)\r\n    if (not DictionaryContains(coordinatedata, room.name)) {\r\n      return (false)\r\n    }\r\n    else {\r\n      datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)\r\n      if (DictionaryContains(datadictionary, attribute)) {\r\n        return (DictionaryItem(datadictionary, attribute))\r\n      }\r\n      else {\r\n        return (false)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Grid_GetPlayerCoordinateDictionary\" parameters=\"playerobject\" type=\"dictionary\">\r\n    if (HasAttribute(playerobject, \"grid_coordinates_delegate\")) {\r\n      return (Grid_GetPlayerCoordinateDictionary(playerobject.grid_coordinates_delegate))\r\n    }\r\n    else {\r\n      if (not HasAttribute(playerobject, \"grid_coordinates\")) {\r\n        playerobject.grid_coordinates = NewDictionary()\r\n        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, \"x\", 0)\r\n        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, \"y\", 0)\r\n        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, \"z\", 0)\r\n        playerobject.parent.grid_render = true\r\n        Grid_CalculateMapCoordinates (playerobject.parent, playerobject)\r\n      }\r\n      return (playerobject.grid_coordinates)\r\n    }\r\n  </function>\r\n  <function name=\"Grid_GetPlayerCoordinatesForRoom\" parameters=\"playerobject, room\" type=\"dictionary\">\r\n    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)\r\n    if (not DictionaryContains(coordinatedata, room.name)) {\r\n      dictionary add (coordinatedata, room.name, NewDictionary())\r\n    }\r\n    return (DictionaryItem(coordinatedata, room.name))\r\n  </function>\r\n  <function name=\"MergePOVCoordinates\"><![CDATA[\r\n    coordinateowner = GetCoordinateOwner(game.pov)\r\n    foreach (obj, GetDirectChildren(game.pov.parent)) {\r\n      if (obj <> game.pov and HasAttribute(obj, \"grid_coordinates\")) {\r\n        objcoordinateowner = GetCoordinateOwner(obj)\r\n        if (coordinateowner <> objcoordinateowner) {\r\n          MapPOVCoordinates (objcoordinateowner, coordinateowner)\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"GetCoordinateOwner\" parameters=\"playerobject\" type=\"object\">\r\n    if (HasAttribute(playerobject, \"grid_coordinates_delegate\")) {\r\n      return (GetCoordinateOwner(playerobject.grid_coordinates_delegate))\r\n    }\r\n    else {\r\n      return (playerobject)\r\n    }\r\n  </function>\r\n  <function name=\"MapPOVCoordinates\" parameters=\"source, target\">\r\n    sourcecoordinates = Grid_GetPlayerCoordinateDictionary(source)\r\n    targetcoordinates = Grid_GetPlayerCoordinateDictionary(target)\r\n    xoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, \"x\") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, \"x\")\r\n    yoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, \"y\") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, \"y\")\r\n    zoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, \"z\") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, \"z\")\r\n    foreach (roomname, sourcecoordinates) {\r\n      coordinatedata = DictionaryItem(sourcecoordinates, roomname)\r\n      if (not DictionaryContains(targetcoordinates, roomname)) {\r\n        newroomdata = NewDictionary()\r\n        dictionary add (targetcoordinates, roomname, newroomdata)\r\n        MapPOVCoordinate (coordinatedata, newroomdata, \"x\", xoffset)\r\n        MapPOVCoordinate (coordinatedata, newroomdata, \"y\", yoffset)\r\n        MapPOVCoordinate (coordinatedata, newroomdata, \"z\", zoffset)\r\n        MapPOVCoordinate (coordinatedata, newroomdata, \"end_x\", xoffset)\r\n        MapPOVCoordinate (coordinatedata, newroomdata, \"end_y\", yoffset)\r\n      }\r\n      else {\r\n        newroomdata = DictionaryItem(targetcoordinates, roomname)\r\n      }\r\n      if (DictionaryContains(coordinatedata, \"grid_isdrawn\")) {\r\n        if (DictionaryContains(newroomdata, \"grid_isdrawn\")) {\r\n          dictionary remove (newroomdata, \"grid_isdrawn\")\r\n        }\r\n        dictionary add (newroomdata, \"grid_isdrawn\", DictionaryItem(coordinatedata, \"grid_isdrawn\"))\r\n      }\r\n    }\r\n    source.grid_coordinates_delegate = target\r\n    Grid_Redraw\r\n    Grid_DrawPlayerInRoom (game.pov.parent)\r\n  </function>\r\n  <function name=\"MapPOVCoordinate\" parameters=\"sourcedata, targetdata, name, offset\">\r\n    if (DictionaryContains(sourcedata, name)) {\r\n      value = DictionaryItem(sourcedata, name)\r\n      dictionary add (targetdata, name, value + offset)\r\n    }\r\n  </function>\r\n  <function name=\"DiceRoll\" parameters=\"dicetype\" type=\"int\">\r\n    dpos = Instr(dicetype, \"d\")\r\n    if (dpos = 0) {\r\n      error (\"Invalid dice type: \" + dicetype)\r\n    }\r\n    else {\r\n      number_string = Left(dicetype, dpos - 1)\r\n      sides_string = Mid(dicetype, dpos + 1)\r\n      if (not (IsNumeric(number_string) and IsNumeric(sides_string))) {\r\n        error (\"Invalid dice type: \" + dicetype)\r\n      }\r\n      else {\r\n        number = ToInt(number_string)\r\n        sides = ToInt(sides_string)\r\n        total = 0\r\n        for (i, 1, number) {\r\n          total = total + GetRandomInt(1, sides)\r\n        }\r\n        return (total)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"TextFX_Typewriter\" parameters=\"text, speed\">\r\n    TextFX_Typewriter_Internal (text, speed, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)\r\n  </function>\r\n  <function name=\"TextFX_Typewriter_Internal\" parameters=\"text, speed, font, color, size\">\r\n    JS.TextFX.Typewriter (text, speed, font, color, size)\r\n  </function>\r\n  <function name=\"TextFX_Unscramble\" parameters=\"text, speed, reveal\">\r\n    TextFX_Unscramble_Internal (text, speed, reveal, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)\r\n  </function>\r\n  <function name=\"TextFX_Unscramble_Internal\" parameters=\"text, speed, reveal, font, color, size\">\r\n    JS.TextFX.Unscramble (text, speed, reveal, font, color, size)\r\n  </function>\r\n  <function name=\"InitInterface\"><![CDATA[\r\n    if (game.setcustomwidth) {\r\n      JS.setGameWidth (game.customwidth)\r\n    }\r\n    if (not game.showborder) {\r\n      JS.hideBorder ()\r\n    }\r\n    if (game.setcustompadding) {\r\n      JS.setGamePadding (game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)\r\n    }\r\n    if (game.externalstylesheets <> null) {\r\n      foreach (stylesheet, game.externalstylesheets) {\r\n        JS.addExternalStylesheet (stylesheet)\r\n      }\r\n    }\r\n    if (game.setbackgroundopacity) {\r\n      SetBackgroundOpacity (game.backgroundopacity)\r\n    }\r\n    request (Background, game.defaultbackground)\r\n    request (Foreground, game.defaultforeground)\r\n    request (LinkForeground, game.defaultlinkforeground)\r\n    if (LengthOf(game.backgroundimage) > 0) {\r\n      SetBackgroundImage (game.backgroundimage)\r\n    }\r\n    request (SetCompassDirections, Join(game.compassdirections, \";\"))\r\n    request (SetInterfaceString, \"InventoryLabel=Inventory\")\r\n    request (SetInterfaceString, \"StatusLabel=Status\")\r\n    request (SetInterfaceString, \"PlacesObjectsLabel=Places and Objects\")\r\n    request (SetInterfaceString, \"CompassLabel=Compass\")\r\n    request (SetInterfaceString, \"InButtonLabel=in\")\r\n    request (SetInterfaceString, \"OutButtonLabel=out\")\r\n    request (SetInterfaceString, \"EmptyListLabel=(empty)\")\r\n    request (SetInterfaceString, \"NothingSelectedLabel=(nothing selected)\")\r\n    request (SetInterfaceString, \"TypeHereLabel=Type here...\")\r\n    request (SetInterfaceString, \"ContinueLabel=Continue...\")\r\n    JS.SetMenuBackground (game.menubackground)\r\n    JS.SetMenuForeground (game.menuforeground)\r\n    JS.SetMenuHoverBackground (game.menuhoverbackground)\r\n    JS.SetMenuHoverForeground (game.menuhoverforeground)\r\n    JS.SetMenuFontName (game.menufont)\r\n    JS.SetMenuFontSize (game.menufontsize + \"pt\")\r\n    if (not game.underlinehyperlinks) {\r\n      JS.TurnOffHyperlinksUnderline ()\r\n    }\r\n    if (game.showpanes) {\r\n      request (Show, \"Panes\")\r\n    }\r\n    else {\r\n      request (Hide, \"Panes\")\r\n    }\r\n    ResetCommandBarFormat\r\n    if (game.showcommandbar) {\r\n      request (Show, \"Command\")\r\n    }\r\n    else {\r\n      request (Hide, \"Command\")\r\n    }\r\n    if (game.showlocation) {\r\n      request (Show, \"Location\")\r\n    }\r\n    else {\r\n      request (Hide, \"Location\")\r\n    }\r\n    if (HasString(game, \"panelcontents\")) {\r\n      SetFramePicture (game.panelcontents)\r\n    }\r\n    if (game.gridmap) {\r\n      JS.ShowGrid (game.mapsize)\r\n      Grid_SetScale (game.mapscale)\r\n      if (game.pov <> null) {\r\n        if (game.pov.parent <> null) {\r\n          Grid_Redraw\r\n          Grid_DrawPlayerInRoom (game.pov.parent)\r\n        }\r\n      }\r\n    }\r\n    InitUserInterface\r\n  ]]></function>\r\n  <function name=\"InitUserInterface\">\r\n  </function>\r\n  <function name=\"StartGame\"><![CDATA[\r\n    StartTurnOutputSection\r\n    if (game.showtitle) {\r\n      JS.StartOutputSection (\"title\")\r\n      PrintCentered (\"<span style=\\\"font-size:260%\\\">\" + game.gamename + \"</span>\")\r\n      if (game.subtitle <> null) {\r\n        if (LengthOf(game.subtitle) > 0) {\r\n          PrintCentered (\"<span style=\\\"font-size:130%\\\">\" + game.subtitle + \"</span>\")\r\n        }\r\n      }\r\n      if (game.author <> null) {\r\n        if (LengthOf(game.author) > 0) {\r\n          PrintCentered (\"<br/><span style=\\\"font-size:140%\\\">by \" + game.author + \"</span>\")\r\n        }\r\n      }\r\n      msg (\"<div style=\\\"margin-top:20px\\\"></div>\")\r\n      JS.EndOutputSection (\"title\")\r\n    }\r\n    if (game.pov = null) {\r\n      playerObject = GetObject(\"player\")\r\n      if (playerObject = null) {\r\n        if (ListCount(AllObjects()) > 0) {\r\n          firstRoom = ObjectListItem(AllObjects(), 0)\r\n        }\r\n        else {\r\n          create (\"room\")\r\n          firstRoom = room\r\n        }\r\n        create (\"player\")\r\n        player.parent = firstRoom\r\n      }\r\n      game.pov = player\r\n    }\r\n    else {\r\n      InitPOV (null, game.pov)\r\n    }\r\n    InitStatusAttributes\r\n    UpdateStatusAttributes\r\n    InitVerbsList\r\n    if (HasScript(game, \"start\")) {\r\n      do (game, \"start\")\r\n    }\r\n    UpdateStatusAttributes\r\n    UpdateObjectLinks\r\n    on ready {\r\n      if (game.gridmap) {\r\n        Grid_DrawPlayerInRoom (game.pov.parent)\r\n      }\r\n      if (game.displayroomdescriptiononstart) {\r\n        OnEnterRoom (null)\r\n      }\r\n      UpdateStatusAttributes\r\n      UpdateObjectLinks\r\n    }\r\n  ]]></function>\r\n  <function name=\"RandomChance\" parameters=\"percentile\" type=\"boolean\"><![CDATA[\r\n    return (GetRandomInt(1,100) <= percentile)\r\n  ]]></function>\r\n  <function name=\"SetObjectFlagOn\" parameters=\"object, flag\">\r\n    set (object, flag, true)\r\n  </function>\r\n  <function name=\"SetObjectFlagOff\" parameters=\"object, flag\">\r\n    set (object, flag, false)\r\n  </function>\r\n  <function name=\"IncreaseObjectCounter\" parameters=\"object, counter\">\r\n    if (not HasInt(object, counter)) {\r\n      set (object, counter, 0)\r\n    }\r\n    set (object, counter, GetInt(object, counter) + 1)\r\n  </function>\r\n  <function name=\"DecreaseObjectCounter\" parameters=\"object, counter\">\r\n    if (not HasInt(object, counter)) {\r\n      set (object, counter, 0)\r\n    }\r\n    set (object, counter, GetInt(object, counter) - 1)\r\n  </function>\r\n  <function name=\"IsSwitchedOn\" parameters=\"object\" type=\"boolean\">\r\n    return (GetBoolean(object, \"switchedon\"))\r\n  </function>\r\n  <function name=\"AddToInventory\" parameters=\"object\">\r\n    object.parent = game.pov\r\n  </function>\r\n  <function name=\"MoveObject\" parameters=\"object, parent\">\r\n    object.parent = parent\r\n  </function>\r\n  <function name=\"MoveObjectHere\" parameters=\"object\">\r\n    object.parent = game.pov.parent\r\n  </function>\r\n  <function name=\"RemoveObject\" parameters=\"object\">\r\n    object.parent = null\r\n  </function>\r\n  <function name=\"MakeObjectVisible\" parameters=\"object\">\r\n    object.visible = true\r\n  </function>\r\n  <function name=\"MakeObjectInvisible\" parameters=\"object\">\r\n    object.visible = false\r\n  </function>\r\n  <function name=\"MakeExitVisible\" parameters=\"object\">\r\n    object.visible = true\r\n  </function>\r\n  <function name=\"MakeExitInvisible\" parameters=\"object\">\r\n    object.visible = false\r\n  </function>\r\n  <function name=\"HelperOpenObject\" parameters=\"object\">\r\n    object.isopen = true\r\n  </function>\r\n  <function name=\"HelperCloseObject\" parameters=\"object\">\r\n    object.isopen = false\r\n  </function>\r\n  <function name=\"CloneObject\" parameters=\"object\" type=\"object\">\r\n    newobject = Clone(object)\r\n    if (not HasString(object, \"alias\")) {\r\n      newobject.alias = object.name\r\n    }\r\n    return (newobject)\r\n  </function>\r\n  <function name=\"CloneObjectAndMove\" parameters=\"object, newparent\" type=\"object\">\r\n    newobject = CloneObject(object)\r\n    newobject.parent = newparent\r\n    return (newobject)\r\n  </function>\r\n  <function name=\"LockExit\" parameters=\"exit\">\r\n    exit.locked = true\r\n  </function>\r\n  <function name=\"UnlockExit\" parameters=\"exit\">\r\n    exit.locked = false\r\n  </function>\r\n  <function name=\"SwitchOn\" parameters=\"object\">\r\n    object.switchedon = true\r\n  </function>\r\n  <function name=\"SwitchOff\" parameters=\"object\">\r\n    object.switchedon = false\r\n  </function>\r\n  <function name=\"SetDark\" parameters=\"object\">\r\n    object.dark = true\r\n  </function>\r\n  <function name=\"SetLight\" parameters=\"object\">\r\n    object.dark = false\r\n  </function>\r\n  <function name=\"SetObjectLightstrength\" parameters=\"object, strength\">\r\n    if (LengthOf(strength) = 0) {\r\n      object.lightsource = false\r\n    }\r\n    else {\r\n      object.lightsource = true\r\n    }\r\n    object.lightstrength = strength\r\n  </function>\r\n  <function name=\"SetExitLightstrength\" parameters=\"exit, strength\">\r\n    if (LengthOf(strength) = 0) {\r\n      exit.lightsource = false\r\n    }\r\n    else {\r\n      exit.lightsource = true\r\n    }\r\n    exit.lightstrength = strength\r\n  </function>\r\n  <function name=\"ChangePOV\" parameters=\"object\"><![CDATA[\r\n    if (game.pov <> object) {\r\n      game.pov = object\r\n      if (game.gridmap) {\r\n        JS.Grid_ClearAllLayers ()\r\n        Grid_Redraw\r\n      }\r\n      OnEnterRoom (null)\r\n    }\r\n  ]]></function>\r\n  <function name=\"InitPOV\" parameters=\"oldPOV, newPOV\"><![CDATA[\r\n    if (oldPOV <> null) {\r\n      oldPOV.alias = oldPOV.external_alias\r\n      oldPOV.alt = oldPOV.external_alt\r\n      oldPOV.look = oldPOV.external_look\r\n      oldPOV.gender = oldPOV.external_gender\r\n      oldPOV.article = oldPOV.external_article\r\n    }\r\n    newPOV.external_alias = newPOV.alias\r\n    newPOV.external_alt = newPOV.alt\r\n    newPOV.external_look = newPOV.look\r\n    newPOV.external_gender = newPOV.gender\r\n    newPOV.external_article = newPOV.article\r\n    if (not GetBoolean(newPOV, \"pov_used\")) {\r\n      if (newPOV.alt = null) {\r\n        newPOV.pov_alt = newPOV.pov_alt\r\n      }\r\n      else {\r\n        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)\r\n      }\r\n      if (newPOV.alias <> null) {\r\n        list add (newPOV.pov_alt, newPOV.alias)\r\n      }\r\n      if (game.showhealth) {\r\n        newPOV.health = 100\r\n        newPOV.changedhealth => {\r\n          if (this.health > 100) {\r\n            this.health = 100\r\n          }\r\n          else if (this.health = 0) {\r\n            if (HasScript(game, \"onhealthzero\")) {\r\n              do (game, \"onhealthzero\")\r\n            }\r\n          }\r\n          else if (this.health < 0) {\r\n            this.health = 0\r\n            // changedhealth will be called again so the onhealthzero script will run\r\n          }\r\n        }\r\n      }\r\n      newPOV.pov_used = true\r\n    }\r\n    newPOV.alias = newPOV.pov_alias\r\n    newPOV.alt = newPOV.pov_alt\r\n    newPOV.look = newPOV.pov_look\r\n    newPOV.gender = newPOV.pov_gender\r\n    newPOV.article = newPOV.pov_article\r\n  ]]></function>\r\n  <function name=\"InitVerbsList\">\r\n    game.verbattributes = NewStringList()\r\n    game.verbattributeslookup = NewObjectDictionary()\r\n    foreach (cmd, AllCommands()) {\r\n      if (HasString(cmd, \"property\")) {\r\n        list add (game.verbattributes, cmd.property)\r\n        dictionary add (game.verbattributeslookup, cmd.property, cmd)\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"GetDisplayVerbs\" parameters=\"object\" type=\"stringlist\">\r\n    if (Contains(game.pov, object)) {\r\n      baselist = object.inventoryverbs\r\n    }\r\n    else {\r\n      baselist = object.displayverbs\r\n    }\r\n    if (not game.autodisplayverbs or GetBoolean(object, \"usestandardverblist\")) {\r\n      return (baselist)\r\n    }\r\n    else {\r\n      if (HasAttribute(object, \"generatedverbslist\")) {\r\n        verbs = object.generatedverbslist\r\n      }\r\n      else {\r\n        verbs = NewStringList()\r\n        foreach (attr, GetAttributeNames(object, false)) {\r\n          if (ListContains(game.verbattributes, attr)) {\r\n            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)\r\n            if (HasString(cmd, \"displayverb\")) {\r\n              displayverb = CapFirst(cmd.displayverb)\r\n            }\r\n            else {\r\n              displayverb = CapFirst(attr)\r\n            }\r\n            if (not ListContains(baselist, displayverb)) {\r\n              list add (verbs, displayverb)\r\n            }\r\n          }\r\n        }\r\n        object.generatedverbslist = verbs\r\n      }\r\n      if (GetBoolean(object, \"useindividualverblist\")) {\r\n        return (verbs)\r\n      }\r\n      else {\r\n        return (ListCombine(baselist, verbs))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\"><![CDATA[\r\n    outputsection = StartNewOutputSection()\r\n    msg (caption)\r\n    count = 0\r\n    game.menuoptionskeys = NewStringList()\r\n    foreach (option, options) {\r\n      list add (game.menuoptionskeys, option)\r\n      count = count + 1\r\n      if (TypeOf(options) = \"stringlist\") {\r\n        optionText = option\r\n      }\r\n      else {\r\n        optionText = StringDictionaryItem(options, option)\r\n      }\r\n      msg (count + \": <a class=\\\"cmdlink\\\" style=\\\"\" + GetCurrentLinkTextFormat() + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + option + \"')\\\">\" + optionText + \"</a>\")\r\n    }\r\n    EndOutputSection (outputsection)\r\n    game.menuoptions = options\r\n    game.menuallowcancel = allowCancel\r\n    game.menucallback = callback\r\n    game.menuoutputsection = outputsection\r\n  ]]></function>\r\n  <function name=\"ShowMenuResponse\" parameters=\"option\">\r\n    if (game.menucallback = null) {\r\n      error (\"Unexpected menu response\")\r\n    }\r\n    else {\r\n      parameters = NewStringDictionary()\r\n      dictionary add (parameters, \"result\", option)\r\n      script = game.menucallback\r\n      ClearMenu\r\n      invoke (script, parameters)\r\n    }\r\n  </function>\r\n  <function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\"><![CDATA[\r\n    handled = false\r\n    if (IsInt(input)) {\r\n      number = ToInt(input)\r\n      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {\r\n        handled = true\r\n        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))\r\n      }\r\n    }\r\n    return (handled)\r\n  ]]></function>\r\n  <function name=\"ClearMenu\">\r\n    HideOutputSection (game.menuoutputsection)\r\n    game.menuoutputsection = null\r\n    game.menuoptions = null\r\n    game.menucallback = null\r\n  </function>\r\n  <function name=\"StartNewOutputSection\" type=\"string\">\r\n    if (not HasInt(game, \"lastoutputsection\")) {\r\n      game.lastoutputsection = 0\r\n    }\r\n    game.lastoutputsection = game.lastoutputsection + 1\r\n    name = \"section\" + game.lastoutputsection\r\n    JS.StartOutputSection (name)\r\n    return (name)\r\n  </function>\r\n  <function name=\"EndOutputSection\" parameters=\"name\">\r\n    JS.EndOutputSection (name)\r\n  </function>\r\n  <function name=\"HideOutputSection\" parameters=\"name\">\r\n    JS.HideOutputSection (name)\r\n  </function>\r\n  <function name=\"StartTurnOutputSection\">\r\n    if (HasString(game, \"currentturnoutputsection\")) {\r\n      game.lastturnoutputsection = game.currentturnoutputsection\r\n      EndOutputSection (game.currentturnoutputsection)\r\n    }\r\n    game.currentturnoutputsection = StartNewOutputSection()\r\n  </function>\r\n  <function name=\"HidePreviousTurnOutput\">\r\n    if (HasString(game, \"lastturnoutputsection\")) {\r\n      HideOutputSection (game.lastturnoutputsection)\r\n    }\r\n  </function>\r\n  <function name=\"Ask\" parameters=\"question, callback\">\r\n    options = NewStringList()\r\n    list add (options, \"Yes\")\r\n    list add (options, \"No\")\r\n    game.askcallback = callback\r\n    ShowMenu (question, options, false) {\r\n      parameters = NewDictionary()\r\n      if (result = \"Yes\") {\r\n        boolresult = true\r\n      }\r\n      else {\r\n        boolresult = false\r\n      }\r\n      dictionary add (parameters, \"result\", boolresult)\r\n      callback = game.askcallback\r\n      game.askcallback = null\r\n      invoke (callback, parameters)\r\n    }\r\n  </function>\r\n  <function name=\"AllKeysAvailable\" parameters=\"object\" type=\"boolean\">\r\n    if (HasObject(object, \"key\")) {\r\n      if (not HasInt(object,\"keycount\")) {\r\n        object.keycount = 1\r\n        object.key1 = object.key\r\n      }\r\n      if (not HasObject(object, \"key1\")) {\r\n        object.key1 = object.key\r\n      }\r\n    }\r\n    for (x, 1, object.keycount) {\r\n      keyname = \"key\" + ToString(x)\r\n      if (HasObject(object, keyname)) {\r\n        if (not ListContains(ScopeInventory(), GetAttribute(object, keyname))) {\r\n          return (false)\r\n        }\r\n      }\r\n    }\r\n    return (true)\r\n  </function>\r\n</asl>\r\n```\r\n</details>\r\n\r\n---\r\nAfter the example game didn't work when running it from the Quest 6 folder the way Alex instructed, I took out everything but the player object (making my game just like blank.aslx, but with my title), and it will work that, as long as you don't try to use the compass.  You can't add **anything**, though.  Not even a room description.  And you have to get game.aslx out of the .quest file you publish, then copy that into the Player directory.  Then run the three commands to run the game in your browser. \r\n\r\nNOTE:  I'm making the game using Quest 6 in Windows, then playing by running Alex's commands in Linux.  (Doing the same thing in Windows has the same results, though.)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Has anyone figured out how Alex built Quest 6 outside of Windows?</p>\n<hr>\n<p>I've followed these steps (after navigating to the Player directory):</p>\n<p>https://github.com/textadventures/quest/tree/v6#quest-6</p>\n<p>This runs the player in your browser.</p>\n<p>It works in Arch Linux and Linux Mint.  (I have no Mac.)</p>\n<p>It will load blank.aslx.  You can 'play' it, but none of the exits lead anywhere (it's blank.aslx)...</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/31053281-bdc8439c-a65f-11e7-94a9-81d2eaa1362a.png\" alt=\"image\"></p>\n<hr>\n<p>Anyway, I'm in Linux, so I opened blank.aslx in Notepadqq, and I added an object in the one room that existed...  and that rendered the game unplayable.</p>\n<p>(I guess it needs to be built using Quest 6?  I'm about to log back into Windows and test this out.)</p>\n<hr>\n<p>Also, every time I edit the game, I have to stop <strong>npm run web</strong>, then run <strong>gulp asl4</strong>, <strong>gulp</strong>, and <strong>npm run web</strong> again.  Then refreshing the browser starts the game back up.  (I'm sure I'm probably missing something...)</p>\n<hr>\n<p>Has anyone (besides Alex) had any success building Quest 6 under Linux or Mac?</p>\n<hr>\n<blockquote>\n<p>Jupiter Ascending movie has this plot/theme to it, but it's done insignificantly/poorly</p>\n</blockquote>\n<p>...and that's sugar-coated.  I like bad movies, and that movie is unwatchable.  I mean... I watched the whole thing once, attentively, expecting <strong><em>something</em></strong> to not be bad... but, the Honest Trailer guys are right:  those guys couldn't even kill Sean Bean right!  (If you've suffered that 'movie', and you haven't seen the Honest Trailer for it, go search!  It's on YouTube, and it almost makes it worth having watched the 'film'.)</p>\n<hr>\n<p>It seems to me, and this is a WILD theory, that I need to learn to compile a Visual Basic project using MonoDevelop, or Mono-something...</p>\n<p>...and I wonder if the Quest 6 Editor ever ran under any OS other than Windows...</p>\n<p>The screenshot Alex posted is of a game running, not being edited.</p>\n<p><img src=\"http://textadventures.co.uk/attachment/1460\" alt=\"image\"></p>\n<p>http://textadventures.co.uk/forum/questkit/topic/5852/is-questkit-still-happening#40529</p>\n<hr>\n<p>UPDATE:</p>\n<p>I made a game with Quest 6, then copied it to the player directory, ran all of the commands, and it loaded in the browser.  No commands work that way though (although they do work when I play in the offline player (5.7), but the compass throws errors).</p>\n<details><summary>Game Code</summary>\n<details><summary>This is a SERIOUSLY long code!</summary>\n```\n\n</details></details>",
      "PostDate": "2017-10-01T09:14:51.4134592Z",
      "LastEditDate": "2017-10-01T10:33:27.3573138Z",
      "link": null
    }
  ]
}
