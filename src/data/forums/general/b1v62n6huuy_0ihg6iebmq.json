{
  "Topic": {
    "TopicId": "b1v62n6huuy_0ihg6iebmq",
    "ForumId": "3",
    "Title": "Need Help with flags / Switching lights off - Gamebook",
    "LastUpdated": "2016-11-05T08:09:28.0006987Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fed0f8c7-0430-48ff-afc2-68db5723e348",
      "UserId": 270918,
      "Username": "charlie_kb",
      "AvatarUrl": "http://i.imgur.com/98RTAQXb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I've  got 2/3 through my first game and realised that something is really broken. I need the ability to walk into a room, switch off a light, walk out, and the light to be off. On top of that, I don't want the option to be able to switch out the light in the room after it's done.\r\n\r\nFor Example, Start Room One (you can go to Room2 which has the flag set on) So Go to Room 2, switch off the light (you are then sent to a copy of Room2 with the flag set off) \r\n\r\nThat's fine, but when I return to room one I end up having 2 options; Go to room2 light on & Go to room 2 Light Off when really I want the game to remember what happened in Room2\r\n\r\nThe script I use is \r\nIf Flag is set - go to room2 light on\r\nElse go to room 2 light off\r\n\r\nI hope I've made myself clear as this is an integral part of my game and won't function if it doesn't remember when a light is on or off. If anyone can explain a better way of doing this in layman's terms that would be much appreciated, I don't know how to code so there's no point in getting me to change that, I only use the preset functionality for dummies like me :D\r\n\r\nCheers",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I've  got 2/3 through my first game and realised that something is really broken. I need the ability to walk into a room, switch off a light, walk out, and the light to be off. On top of that, I don't want the option to be able to switch out the light in the room after it's done.</p>\n<p>For Example, Start Room One (you can go to Room2 which has the flag set on) So Go to Room 2, switch off the light (you are then sent to a copy of Room2 with the flag set off)</p>\n<p>That's fine, but when I return to room one I end up having 2 options; Go to room2 light on &amp; Go to room 2 Light Off when really I want the game to remember what happened in Room2</p>\n<p>The script I use is<br>\nIf Flag is set - go to room2 light on<br>\nElse go to room 2 light off</p>\n<p>I hope I've made myself clear as this is an integral part of my game and won't function if it doesn't remember when a light is on or off. If anyone can explain a better way of doing this in layman's terms that would be much appreciated, I don't know how to code so there's no point in getting me to change that, I only use the preset functionality for dummies like me :D</p>\n<p>Cheers</p>\n\n",
      "PostDate": "2016-11-05T08:09:28.0006987Z",
      "LastEditDate": "2016-11-05T08:41:54.4351015Z"
    },
    {
      "PostId": "a78f5f33-ba44-48a3-bc9d-d1352cb9813d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the Game Book can create/add Attributes, but only through scripting, and also you only got two Objects you can add Attributes to: the 'game' Game Object and the 'player' Player Object. I think you are able to add Attributes for your Page Objects too.\r\n\r\nAttributes:\r\n\r\n'whatever' Page -> 'Page' Tab -> Page Type: [script] or [script+text] -> (see below)\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION\r\n\r\nsome examples:\r\n\r\nset variable player.strength = [EXPRESSION] 100\r\nset variable game.orc_strength = [EXPRESSION] 10\r\nset variable player.alias = [EXPRESSION] \"HK\"\r\nset variable game.state = [EXPRESSION] 0\r\nset variable game.orc_dead = [EXPRESSION] false\r\nset variable game.orc_dead = [EXPRESSION] true\r\nset variable game.greeting = [EXPRESSION] \"Welcome, to my game, I hope you enjoy it!\"\r\n\r\nset variable page_0.is_light_on = [EXPRESSION] false\r\nset variable page_0.is_light_on = [EXPRESSION] true\r\n\r\nthe 'if' Script:\r\n\r\n'whatever' Page -> 'Page' Tab -> Page Type: [script] or [script+text] -> (see below)\r\n\r\nrun as script -> add new script -> 'script' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION\r\n\r\nsome examples:\r\n\r\n```\r\nif (page_0.is_light_on = true) {\r\n  msg (\"The the light is on within page_0\")\r\n} else if (page_0.is_light_on = false) {\r\n  msg (\"The light is not on within page_0\")\r\n}\r\n```\r\n\r\n-----------------\r\n\r\nsee this link for much more detailed guide on Attribute usage and the 'if Script:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\n\r\n(its on the Text Adventure, but the scripting itself is the same for both Text Adventure and Game Book, aside from how you access the scripting and what you can do)\r\n\r\n---------\r\n\r\nAlso, the Text Adventure has a built-in room light-dark feature, but I don't know if the Game Book does or not (probably doesn't), so you'll have to create your own light on/off Boolean Attributes and/or a page light-dark system yourself.",
      "EditableFormat": "markdown",
      "HTML": "<p>the Game Book can create/add Attributes, but only through scripting, and also you only got two Objects you can add Attributes to: the 'game' Game Object and the 'player' Player Object. I think you are able to add Attributes for your Page Objects too.</p>\n<p>Attributes:</p>\n<p>'whatever' Page -&gt; 'Page' Tab -&gt; Page Type: [script] or [script+text] -&gt; (see below)</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION</p>\n<p>some examples:</p>\n<p>set variable player.strength = [EXPRESSION] 100<br>\nset variable game.orc_strength = [EXPRESSION] 10<br>\nset variable player.alias = [EXPRESSION] \"HK\"<br>\nset variable game.state = [EXPRESSION] 0<br>\nset variable game.orc_dead = [EXPRESSION] false<br>\nset variable game.orc_dead = [EXPRESSION] true<br>\nset variable game.greeting = [EXPRESSION] \"Welcome, to my game, I hope you enjoy it!\"</p>\n<p>set variable page_0.is_light_on = [EXPRESSION] false<br>\nset variable page_0.is_light_on = [EXPRESSION] true</p>\n<p>the 'if' Script:</p>\n<p>'whatever' Page -&gt; 'Page' Tab -&gt; Page Type: [script] or [script+text] -&gt; (see below)</p>\n<p>run as script -&gt; add new script -&gt; 'script' section/category -&gt; 'if' Script -&gt; (see below)</p>\n<p>if [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION</p>\n<p>some examples:</p>\n<pre><code>if (page_0.is_light_on = true) {\n  msg (\"The the light is on within page_0\")\n} else if (page_0.is_light_on = false) {\n  msg (\"The light is not on within page_0\")\n}\n</code></pre>\n<hr>\n<p>see this link for much more detailed guide on Attribute usage and the 'if Script:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n<p>(its on the Text Adventure, but the scripting itself is the same for both Text Adventure and Game Book, aside from how you access the scripting and what you can do)</p>\n<hr>\n<p>Also, the Text Adventure has a built-in room light-dark feature, but I don't know if the Game Book does or not (probably doesn't), so you'll have to create your own light on/off Boolean Attributes and/or a page light-dark system yourself.</p>\n\n",
      "PostDate": "2016-11-05T08:41:31.7053123Z",
      "LastEditDate": "2016-11-05T08:45:07.5969382Z"
    },
    {
      "PostId": "1b788325-cf83-4094-9e15-0892c2e027f9",
      "UserId": 270918,
      "Username": "charlie_kb",
      "AvatarUrl": "http://i.imgur.com/98RTAQXb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, Hegemonkhan, so if I've understood you correctly I can do away with having 2 copies of 1 room (lights on & lights off) give the room an attribute, then if the attribute is on display an option to switch it off? Is that right?\r\n\r\nPS 'so you'll have to create your own light on/off Boolean Attributes and/or a page light-dark system yourself.' Trust me to make things difficult for myself!\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Hegemonkhan, so if I've understood you correctly I can do away with having 2 copies of 1 room (lights on &amp; lights off) give the room an attribute, then if the attribute is on display an option to switch it off? Is that right?</p>\n<p>PS 'so you'll have to create your own light on/off Boolean Attributes and/or a page light-dark system yourself.' Trust me to make things difficult for myself!</p>\n\n",
      "PostDate": "2016-11-05T08:55:28.1256737Z",
      "LastEditDate": null
    },
    {
      "PostId": "1610967c-8457-45d4-8f71-8fb751cc58f8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Room Objects are used in Text Adventure, Page Objects are used in Game Book, but you can of course name your Objects whatever you want (if you want to name your Page Objects as 'room1', 'room2', etc, that's perfectly fine, and vice versa too). The Game Book is much more limited though than the Text Adventure, as the Game Book was created to be mostly a CYOA, and not be that code/scripting heavy in terms of game features/functionalities (such as RPG aspects type stuff).\r\n\r\nYou are using Game Book, right? Or, are you using a Text Adventure? Or, are you using Pixie's Text Adventure hybrid as it looks like a Game Book? I just want to be clear on which quest type you're using.\r\n\r\nThis post's content will be on Game Book. (Let me know if you're doing a Text Adventure or Pixie's Text Adventure hybrid as it looks like a Game Book).\r\n\r\nIf you can add/create Attributes to your Page Objects, you're able can be specific as to which Pages have which Attributes and what is done with scripting.\r\n\r\nHowever, I think for what you want, it'd be best to just create/add a single Boolean Attribute to your 'game' Game Object, used to be the 'light-dark' state of your game, which you can toggle on(true)/off(false), as you need to as the person playing the game progresses through it (visits your Pages). See below.\r\n\r\n-------------------------------------\r\n\r\ngenerally you want your first page to set up (create/add) all of your Attributes and their initial values, but you could have some intro text pages first, if you want. But, before you do anything with Attributes and scripting, you need to have those Attributes created/added. So you need a Page to add/create/set-up those Attributes, before you can have your next pages do stuff with those Attributes.\r\n\r\n'whatever' Page Object -> 'Page' Tab -> Page Type: [script] or [script+text] -> (see below)\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n\r\n// conceptual understanding of simple boolean (true/false) Attribute logic involved:\r\n//\r\n// game.dark = true ---> effectively dark\r\n// game.dark = false ---> effectively light\r\n// or\r\n// game.light = true ---> effectively light\r\n// game.light = false ---> effectively dark\r\n\r\n// I'm going to use 'dark', instead of 'light' and also instead of my own more descriptive naming/labeling system/convention, such as my use of 'is_light_on' in my previous post, I think. To keep the naming/labeling simple for you.\r\n\r\n// I chose 'game.dark = false' assuming you want most (more than half) pages being initially light\r\n// if you want most (more than half) of your Pages to be dark initially, then, it's better and more logical to use: game.light = false\r\n//\r\n// the logic/reasoning involved is like this:\r\n// let's say you ask a 100 people to raise their hand if they have a dog\r\n// and let's say 70 of them raised their hands\r\n// would you rather count 70 hands, or...\r\n// would you instead (seeing that most, more than half, of them raised their hands in having a dog), ask them instead to raise their hands if they don't have a dog (the opposite/inverse-reciprical whatever it is), having to only count 30 hands instead of 70 ?\r\n// obviously, it's easier to count 30 hands than to count 70 hands, and so you'd rather be counting the 30 hands instead of 70, and so, you ask them to raise their hands if they don't have a dog, instead of asking them to raise their hands if they have a dog.\r\n\r\n```\r\nset variable game.dark = [EXPRESSION] false // deciding that the default state is for no darkness\r\n```\r\n\r\n// so, if you want your Pages to be dark, you need change your 'dark' Attribute's Value to 'true', and when you want your Pages to be light again, you need to change your 'dark' Attribute's Value to being 'false' again.\r\n\r\n-------------------------\r\n\r\nnow, with your Pages you can do various scripting using your 'dark' Attribute, for some (simple-quick) examples:\r\n\r\n```\r\n// our page has different options/links/states/displayment/stuff based upon whether the dark-light game state is dark (game.dark = true) or light (game.dark = false):\r\nif (game.dark) {\r\n  msg (\"The page is dark\")\r\n} else {\r\n  msg (\"The page is light\")\r\n}\r\n\r\n// we want our page to initially be dark when going to it (this must be the first/top script added/created for the Page):\r\nif (not game.dark) {\r\n  game.dark = true\r\n}\r\n\r\n// before we go to another page, we change the dark-light game state to being back to light (this must be the last/bottom script added/created for the Page):\r\nif (game.dark) {\r\n  game.dark = false\r\n}\r\n```\r\n\r\n------------------\r\n\r\nthe 'if' Script is done like this:\r\n\r\n```\r\n'whatever' Page -> 'Page' Tab -> Page Type: [script] or [script+text] -> (see below)\r\n\r\nrun as script -> add new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION\r\n```\r\n\r\nsome (more) examples:\r\n\r\n```\r\nif [EXPRESSION] game.dark // this is understood (shortened) by quest as being 'game.dark = true'\r\n-> then, -> add new script -> (whatever script/s you want to do)\r\n(optionally):\r\nelse,\r\n-> add new script -> (whatever script/s you want to do)\r\n\r\nif [EXPRESSION] not game.dark // or you can do this (same thing) instead (though using the 'not' is better): game.dark = false\r\n-> then, -> add new script -> (whatever script/s you want to do)\r\n(optionally):\r\nelse,\r\n-> add new script -> (whatever script/s you want to do)\r\n\r\nif [EXPRESSION] player.strength > 66\r\n-> then, -> add new script -> (whatever script/s you want to do)\r\n(optionally):\r\nelse if [EXPRESSION] player.strength > 33\r\n -> then, -> add new script -> (whatever script/s you want to do)\r\n// optionally: as many more (or less) 'else ifs' as you want\r\n(optionally):\r\nelse,\r\n-> add new script -> (whatever script/s you want to do)\r\n```\r\n\r\n-------------\r\n\r\nas for the person playing the game, being able to control the toggling of the 'game.dark = false/true'... hopefully you can use the 'get input' Script or use Commands, or to have clickable hyperlinks be able to do the scripting, otherwise, you may have to use page's scripting (Page Type: [script] or [script+text]) to do so... which would be more of a pain... I'm not that familiar with what the Game Book can do (or has) and can't do (or don't have).",
      "EditableFormat": "markdown",
      "HTML": "<p>Room Objects are used in Text Adventure, Page Objects are used in Game Book, but you can of course name your Objects whatever you want (if you want to name your Page Objects as 'room1', 'room2', etc, that's perfectly fine, and vice versa too). The Game Book is much more limited though than the Text Adventure, as the Game Book was created to be mostly a CYOA, and not be that code/scripting heavy in terms of game features/functionalities (such as RPG aspects type stuff).</p>\n<p>You are using Game Book, right? Or, are you using a Text Adventure? Or, are you using Pixie's Text Adventure hybrid as it looks like a Game Book? I just want to be clear on which quest type you're using.</p>\n<p>This post's content will be on Game Book. (Let me know if you're doing a Text Adventure or Pixie's Text Adventure hybrid as it looks like a Game Book).</p>\n<p>If you can add/create Attributes to your Page Objects, you're able can be specific as to which Pages have which Attributes and what is done with scripting.</p>\n<p>However, I think for what you want, it'd be best to just create/add a single Boolean Attribute to your 'game' Game Object, used to be the 'light-dark' state of your game, which you can toggle on(true)/off(false), as you need to as the person playing the game progresses through it (visits your Pages). See below.</p>\n<hr>\n<p>generally you want your first page to set up (create/add) all of your Attributes and their initial values, but you could have some intro text pages first, if you want. But, before you do anything with Attributes and scripting, you need to have those Attributes created/added. So you need a Page to add/create/set-up those Attributes, before you can have your next pages do stuff with those Attributes.</p>\n<p>'whatever' Page Object -&gt; 'Page' Tab -&gt; Page Type: [script] or [script+text] -&gt; (see below)</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION</p>\n<p>// conceptual understanding of simple boolean (true/false) Attribute logic involved:<br>\n//<br>\n// game.dark = true ---&gt; effectively dark<br>\n// game.dark = false ---&gt; effectively light<br>\n// or<br>\n// game.light = true ---&gt; effectively light<br>\n// game.light = false ---&gt; effectively dark</p>\n<p>// I'm going to use 'dark', instead of 'light' and also instead of my own more descriptive naming/labeling system/convention, such as my use of 'is_light_on' in my previous post, I think. To keep the naming/labeling simple for you.</p>\n<p>// I chose 'game.dark = false' assuming you want most (more than half) pages being initially light<br>\n// if you want most (more than half) of your Pages to be dark initially, then, it's better and more logical to use: game.light = false<br>\n//<br>\n// the logic/reasoning involved is like this:<br>\n// let's say you ask a 100 people to raise their hand if they have a dog<br>\n// and let's say 70 of them raised their hands<br>\n// would you rather count 70 hands, or...<br>\n// would you instead (seeing that most, more than half, of them raised their hands in having a dog), ask them instead to raise their hands if they don't have a dog (the opposite/inverse-reciprical whatever it is), having to only count 30 hands instead of 70 ?<br>\n// obviously, it's easier to count 30 hands than to count 70 hands, and so you'd rather be counting the 30 hands instead of 70, and so, you ask them to raise their hands if they don't have a dog, instead of asking them to raise their hands if they have a dog.</p>\n<pre><code>set variable game.dark = [EXPRESSION] false // deciding that the default state is for no darkness\n</code></pre>\n<p>// so, if you want your Pages to be dark, you need change your 'dark' Attribute's Value to 'true', and when you want your Pages to be light again, you need to change your 'dark' Attribute's Value to being 'false' again.</p>\n<hr>\n<p>now, with your Pages you can do various scripting using your 'dark' Attribute, for some (simple-quick) examples:</p>\n<pre><code>// our page has different options/links/states/displayment/stuff based upon whether the dark-light game state is dark (game.dark = true) or light (game.dark = false):\nif (game.dark) {\n  msg (\"The page is dark\")\n} else {\n  msg (\"The page is light\")\n}\n\n// we want our page to initially be dark when going to it (this must be the first/top script added/created for the Page):\nif (not game.dark) {\n  game.dark = true\n}\n\n// before we go to another page, we change the dark-light game state to being back to light (this must be the last/bottom script added/created for the Page):\nif (game.dark) {\n  game.dark = false\n}\n</code></pre>\n<hr>\n<p>the 'if' Script is done like this:</p>\n<pre><code>'whatever' Page -&gt; 'Page' Tab -&gt; Page Type: [script] or [script+text] -&gt; (see below)\n\nrun as script -&gt; add new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION\n</code></pre>\n<p>some (more) examples:</p>\n<pre><code>if [EXPRESSION] game.dark // this is understood (shortened) by quest as being 'game.dark = true'\n-&gt; then, -&gt; add new script -&gt; (whatever script/s you want to do)\n(optionally):\nelse,\n-&gt; add new script -&gt; (whatever script/s you want to do)\n\nif [EXPRESSION] not game.dark // or you can do this (same thing) instead (though using the 'not' is better): game.dark = false\n-&gt; then, -&gt; add new script -&gt; (whatever script/s you want to do)\n(optionally):\nelse,\n-&gt; add new script -&gt; (whatever script/s you want to do)\n\nif [EXPRESSION] player.strength &gt; 66\n-&gt; then, -&gt; add new script -&gt; (whatever script/s you want to do)\n(optionally):\nelse if [EXPRESSION] player.strength &gt; 33\n -&gt; then, -&gt; add new script -&gt; (whatever script/s you want to do)\n// optionally: as many more (or less) 'else ifs' as you want\n(optionally):\nelse,\n-&gt; add new script -&gt; (whatever script/s you want to do)\n</code></pre>\n<hr>\n<p>as for the person playing the game, being able to control the toggling of the 'game.dark = false/true'... hopefully you can use the 'get input' Script or use Commands, or to have clickable hyperlinks be able to do the scripting, otherwise, you may have to use page's scripting (Page Type: [script] or [script+text]) to do so... which would be more of a pain... I'm not that familiar with what the Game Book can do (or has) and can't do (or don't have).</p>\n\n",
      "PostDate": "2016-11-05T23:13:04.4168583Z",
      "LastEditDate": "2016-11-05T23:20:58.6388571Z"
    },
    {
      "PostId": "504f5d68-d2c9-4a08-be60-d31ee1fe1462",
      "UserId": 270918,
      "Username": "charlie_kb",
      "AvatarUrl": "http://i.imgur.com/98RTAQXb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, thanks for your help. I've been trying to get my head around it for a while, nearly gave up on the whole endeavour because actually, I think I might be trying to walk before I can crawl. This is my very first attempt at making a game, which is why I opted for the reduced functionality of the Gamebook in the first place as there is a lot less to learn before you can get started. So I'm just going to strip the lights on/off feature out, and then do a lot more homework before attempting to do a similar thing as a Text Adventure instead. I know the gameplay won't be exactly what I was looking for, but even as it is its got some cool features (IMO)\r\nI appreciate your help though bud\r\nCheers",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, thanks for your help. I've been trying to get my head around it for a while, nearly gave up on the whole endeavour because actually, I think I might be trying to walk before I can crawl. This is my very first attempt at making a game, which is why I opted for the reduced functionality of the Gamebook in the first place as there is a lot less to learn before you can get started. So I'm just going to strip the lights on/off feature out, and then do a lot more homework before attempting to do a similar thing as a Text Adventure instead. I know the gameplay won't be exactly what I was looking for, but even as it is its got some cool features (IMO)<br>\nI appreciate your help though bud<br>\nCheers</p>\n\n",
      "PostDate": "2016-11-06T18:44:33.2257128Z",
      "LastEditDate": null
    },
    {
      "PostId": "9d483d8c-f96a-48dd-ab35-f569c2688cef",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**Please feel free to ignore this, I thought you were using Squiffy**\r\n\r\nSorry, isn't this just over complicating things. \r\n\r\nWhy not just use attributes and if statements within sections. So:\r\n\r\n    Set room1light = 1\r\n    Set room2light = 0\r\n    Set room3light = 1\r\n\r\nSo we will use 1 for a light that is on, and a 0 for a light that is off. \r\n\r\nThen within the section you could have something like\r\n\r\n    [[room1]]:\r\n    {if room1light=1:You can put your content for if the light is on here}\r\n    {if room1light=0:You can put your content for if the light is off here}\r\n\r\nThen within the content for each room, your link to turn a light off (or on if you wanted) would simply be:\r\n\r\n    [[Turn off the light]](room1, room1light=0)}\r\n\r\nThe above would change the attribute via the link, and then loop you back around into the same section, where your if statements will come into play.\r\n\r\nOr have I misunderstood what you are trying to do?",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>Please feel free to ignore this, I thought you were using Squiffy</strong></p>\n<p>Sorry, isn't this just over complicating things.</p>\n<p>Why not just use attributes and if statements within sections. So:</p>\n<pre><code>Set room1light = 1\nSet room2light = 0\nSet room3light = 1\n</code></pre>\n<p>So we will use 1 for a light that is on, and a 0 for a light that is off.</p>\n<p>Then within the section you could have something like</p>\n<pre><code>[[room1]]:\n{if room1light=1:You can put your content for if the light is on here}\n{if room1light=0:You can put your content for if the light is off here}\n</code></pre>\n<p>Then within the content for each room, your link to turn a light off (or on if you wanted) would simply be:</p>\n<pre><code>[[Turn off the light]](room1, room1light=0)}\n</code></pre>\n<p>The above would change the attribute via the link, and then loop you back around into the same section, where your if statements will come into play.</p>\n<p>Or have I misunderstood what you are trying to do?</p>\n\n",
      "PostDate": "2016-11-06T21:05:58.1463571Z",
      "LastEditDate": "2016-11-06T21:32:55.9805399Z"
    },
    {
      "PostId": "c8c034a4-54ac-448c-ab64-5f88df79d94a",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm very sorry, I've just realised that you're using Quest to make a Gamebook, not Squiffy.\r\n\r\nMy mistake. In case anyone wants to have some fun with turning lights on and off in various rooms in Squiffy, you could use something like the following:\r\n\r\n    @set room1light = 1\r\n    @set room2light = 0\r\n\r\n    You are in a hallway. Do you go in room 1 or 2?\r\n\r\n    [[Room1]]<br>\r\n    [[Room2]]\r\n\r\n    [[Room1]]:\r\n    @clear\r\n    {if room1light=1:You are in room 1. It is nice and bright in here. Why don't you [[turn off the light]](Room1dosomething, room1light-=1) or [[go back to the hallway]](Hall)}\r\n    {if room1light=0:You are in room 1. It is really dark in here. Why don't you [[turn on the light]](Room1dosomething, room1light+=1) or [[go back to the hallway]](Hall)}\r\n\r\n    [[Room1dosomething]]:\r\n    @clear\r\n    {if room1light=0:You turned off the light... [[Continue]](Room1)}\r\n    {if room1light=1:You turned on the light... [[Continue]](Room1)}\r\n\r\n    [[Room2]]:\r\n    @clear\r\n    {if room2light=1:You are in room 2. It is nice and bright in here. Why don't you [[turn off the light]](Room2dosomething,     room2light-=1) or [[go back to the hallway]](Hall)}\r\n    {if room2light=0:You are in room 2. It is really dark in here. Why don't you [[turn on the light]](Room2dosomething, room2light+=1) or [[go back to the hallway]](Hall)}\r\n\r\n    [[Room2dosomething]]:\r\n    @clear\r\n    {if room2light=0:You turned off the light... [[Continue]](Room2)}\r\n    {if room2light=1:You turned on the light... [[Continue]](Room2)}\r\n\r\n    [[Hall]]:\r\n    @clear\r\n    You are back in the hallway. Do you go in room 1 or 2?\r\n\r\n    [[Room1]]<br>\r\n    [[Room2]]\r\n\r\nThe RoomXdosomething section has to be used as Squiffy doesn't seemingly let you loop directly back into the same section whilst changing a variable, which is a bit odd.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm very sorry, I've just realised that you're using Quest to make a Gamebook, not Squiffy.</p>\n<p>My mistake. In case anyone wants to have some fun with turning lights on and off in various rooms in Squiffy, you could use something like the following:</p>\n<pre><code>@set room1light = 1\n@set room2light = 0\n\nYou are in a hallway. Do you go in room 1 or 2?\n\n[[Room1]]&lt;br&gt;\n[[Room2]]\n\n[[Room1]]:\n@clear\n{if room1light=1:You are in room 1. It is nice and bright in here. Why don't you [[turn off the light]](Room1dosomething, room1light-=1) or [[go back to the hallway]](Hall)}\n{if room1light=0:You are in room 1. It is really dark in here. Why don't you [[turn on the light]](Room1dosomething, room1light+=1) or [[go back to the hallway]](Hall)}\n\n[[Room1dosomething]]:\n@clear\n{if room1light=0:You turned off the light... [[Continue]](Room1)}\n{if room1light=1:You turned on the light... [[Continue]](Room1)}\n\n[[Room2]]:\n@clear\n{if room2light=1:You are in room 2. It is nice and bright in here. Why don't you [[turn off the light]](Room2dosomething,     room2light-=1) or [[go back to the hallway]](Hall)}\n{if room2light=0:You are in room 2. It is really dark in here. Why don't you [[turn on the light]](Room2dosomething, room2light+=1) or [[go back to the hallway]](Hall)}\n\n[[Room2dosomething]]:\n@clear\n{if room2light=0:You turned off the light... [[Continue]](Room2)}\n{if room2light=1:You turned on the light... [[Continue]](Room2)}\n\n[[Hall]]:\n@clear\nYou are back in the hallway. Do you go in room 1 or 2?\n\n[[Room1]]&lt;br&gt;\n[[Room2]]\n</code></pre>\n<p>The RoomXdosomething section has to be used as Squiffy doesn't seemingly let you loop directly back into the same section whilst changing a variable, which is a bit odd.</p>\n\n",
      "PostDate": "2016-11-06T21:25:51.7446095Z",
      "LastEditDate": "2016-11-06T21:29:00.2224858Z"
    }
  ]
}
