{
  "Topic": {
    "TopicId": "-3k0f7uu10ikdhymulk6kq",
    "ForumId": "10",
    "Title": "Preventing the player from typing things like go path instead of typing a direcion",
    "LastUpdated": "2020-03-01T11:34:19.06063Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0a3812b2-915b-43c7-a376-1224e6c51957",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm creating an adventure that reads like a book and have removed the direction indicator, inventory list information, etc.\r\nTo tell the player of possible directions I have put this in the room description text such as \"To the north is a forest and you notice a cottage towards the east.\r\nIf the player types N or North then the player will go to the forest, but the player may type \"GO TO FOREST\" or \"GO FOREST\". I could create commands to cover for this but it would be a lot of work as there are 67 locations. The other way would be to tell the player to type only directions rather than \"GO TO...\" commands using 'go #object#' as the word pattern with a message, but in the game there are situations when the player must type commands such as \"GO CAVE\" or \"ENTER CAVE\" so suggesting that the player only use directions would prevent the player from typing \"GO..\" commands.\r\nAny suggestions are welcome thanks.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm creating an adventure that reads like a book and have removed the direction indicator, inventory list information, etc.<br>\nTo tell the player of possible directions I have put this in the room description text such as \"To the north is a forest and you notice a cottage towards the east.<br>\nIf the player types N or North then the player will go to the forest, but the player may type \"GO TO FOREST\" or \"GO FOREST\". I could create commands to cover for this but it would be a lot of work as there are 67 locations. The other way would be to tell the player to type only directions rather than \"GO TO...\" commands using 'go #object#' as the word pattern with a message, but in the game there are situations when the player must type commands such as \"GO CAVE\" or \"ENTER CAVE\" so suggesting that the player only use directions would prevent the player from typing \"GO..\" commands.<br>\nAny suggestions are welcome thanks.</p>\n\n",
      "PostDate": "2020-03-01T11:34:19.06063Z",
      "LastEditDate": "2020-03-01T11:36:29.771434Z",
      "link": null
    },
    {
      "PostId": "5229a7c0-c28d-47b3-846d-3259bbe25e34",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would suggest that if the description says that a path goes to the forest, then 'forest' should be in the exit's list of alternate names.\r\n\r\nIf adding these names is too much effort, you could have a script to do it automatically. The first thing that comes to mind would be:\r\n```\r\nforeach (exit, AllExits()) {\r\n  if (DoesInherit (exit, \"compassdirection\") and HasObject (exit, \"to\")) {\r\n    if (HasAttribute (exit, \"alt\")) {\r\n      // You can't modify a list that's inherited from a type\r\n      //    so we need to create a copy of the list first\r\n      exit.alt = exit.alt\r\n    }\r\n    else {\r\n      exit.alt = NewStringList()\r\n    }\r\n    list add (exit.alt, GetDisplayAlias (exit.to))\r\n  }\r\n}\r\n```\r\nRun in the start script, this would add the name of each exit's destination available as an alias for the exit (effectively making \"go forest\" equivalent to \"go north\" as long as the room on the other end has 'forest' in its name.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would suggest that if the description says that a path goes to the forest, then 'forest' should be in the exit's list of alternate names.</p>\n<p>If adding these names is too much effort, you could have a script to do it automatically. The first thing that comes to mind would be:</p>\n<pre><code>foreach (exit, AllExits()) {\n  if (DoesInherit (exit, \"compassdirection\") and HasObject (exit, \"to\")) {\n    if (HasAttribute (exit, \"alt\")) {\n      // You can't modify a list that's inherited from a type\n      //    so we need to create a copy of the list first\n      exit.alt = exit.alt\n    }\n    else {\n      exit.alt = NewStringList()\n    }\n    list add (exit.alt, GetDisplayAlias (exit.to))\n  }\n}\n</code></pre>\n<p>Run in the start script, this would add the name of each exit's destination available as an alias for the exit (effectively making \"go forest\" equivalent to \"go north\" as long as the room on the other end has 'forest' in its name.</p>\n\n",
      "PostDate": "2020-03-01T14:16:31.7101754Z",
      "LastEditDate": "2020-03-02T02:42:09.8421544Z",
      "link": null
    },
    {
      "PostId": "d2e030d4-e699-4ab5-ae74-9b171cc8f557",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mrangel.\r\nI was hoping your suggested code would work but I get the following error:\r\n\r\nError running script: Cannot modify the contents of this list as it is defined by an inherited type. Clone it before attempting to modify.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mrangel.<br>\nI was hoping your suggested code would work but I get the following error:</p>\n<p>Error running script: Cannot modify the contents of this list as it is defined by an inherited type. Clone it before attempting to modify.</p>\n\n",
      "PostDate": "2020-03-02T02:38:54.3256351Z",
      "LastEditDate": "2020-03-02T02:40:28.1166584Z",
      "link": null
    },
    {
      "PostId": "53f7c3f3-749a-48ff-ab00-ff785cbf6d8d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I missed out a line :p Will edit it now",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I missed out a line :p Will edit it now</p>\n\n",
      "PostDate": "2020-03-02T02:40:16.4138038Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "578cb877-6cf1-4940-99c1-2448184e131d",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Excellent thanks mrangel.\r\n\r\nI'm very pleased with the result. \r\nIt will save me a lot of time and work.",
      "EditableFormat": "markdown",
      "HTML": "<p>Excellent thanks mrangel.</p>\n<p>I'm very pleased with the result.<br>\nIt will save me a lot of time and work.</p>\n\n",
      "PostDate": "2020-03-02T02:46:04.6524487Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca2d2568-3aa4-426a-8839-d7778c108244",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mrangel.\r\n\r\nIt's difficult to understand your code as I'm new to Quest code but one thing I found strange in the code was:\r\nexit.alt = exit.alt\r\nIts like saying A = A but like I said I'm still getting use to the Quest code.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mrangel.</p>\n<p>It's difficult to understand your code as I'm new to Quest code but one thing I found strange in the code was:<br>\nexit.alt = exit.alt<br>\nIts like saying A = A but like I said I'm still getting use to the Quest code.</p>\n\n",
      "PostDate": "2020-03-02T03:11:31.2347781Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13161e95-1620-4c92-ba39-30a2427bdf1c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, I added a comment to that in the hope it would make it clearer.\r\n\r\nBasically, if you try to look at an attribute and the object doesn't have it, then Quest will return the same attribute from a type instead.\r\n\r\nSo *if it exists*, `exit.alt` gets the `alt` attribute of that exit. If the exit *doesn't* have an attribute by that name, it returns the `alt` attribute of the type instead. (the types \"northdirection\", \"southdirection\", etc all have an `lat` attribute).\r\n\r\nThis means that a command like `list add (exit.alt, somevalue)` will fail - because `exit.alt` returns *northdirection's* `alt` attribute, not the exit's. And the attributes of a type can't be modified in play.\r\n\r\nSo `exit.alt = exit.alt` gets the `alt` attribute which the exit inherits from its type, and *copies the list*, saving it as an attribute of the actual exit. This means that every exit has its own copy of the `alt` list, so we can safely add an element to it without modifying the type.\r\n\r\nThe error message \"Cannot modify the contents of this list as it is defined by an inherited type\" is one of the most counterintuitive bits of Quest's scripting.\r\n\r\n(when you use the `=` statement to assign a list or dictionary to a variable, the behaviour is a little weird. `somevariable = somelist` sets somevariable as a pointer to an existing list, so using \"list add\" or \"list remove\" on somevariable will modify somelist and vice versa. But `someobject.attribute = somelist` creates a copy of the list, which is now separate from the original variable)",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, I added a comment to that in the hope it would make it clearer.</p>\n<p>Basically, if you try to look at an attribute and the object doesn't have it, then Quest will return the same attribute from a type instead.</p>\n<p>So <em>if it exists</em>, <code>exit.alt</code> gets the <code>alt</code> attribute of that exit. If the exit <em>doesn't</em> have an attribute by that name, it returns the <code>alt</code> attribute of the type instead. (the types \"northdirection\", \"southdirection\", etc all have an <code>lat</code> attribute).</p>\n<p>This means that a command like <code>list add (exit.alt, somevalue)</code> will fail - because <code>exit.alt</code> returns <em>northdirection's</em> <code>alt</code> attribute, not the exit's. And the attributes of a type can't be modified in play.</p>\n<p>So <code>exit.alt = exit.alt</code> gets the <code>alt</code> attribute which the exit inherits from its type, and <em>copies the list</em>, saving it as an attribute of the actual exit. This means that every exit has its own copy of the <code>alt</code> list, so we can safely add an element to it without modifying the type.</p>\n<p>The error message \"Cannot modify the contents of this list as it is defined by an inherited type\" is one of the most counterintuitive bits of Quest's scripting.</p>\n<p>(when you use the <code>=</code> statement to assign a list or dictionary to a variable, the behaviour is a little weird. <code>somevariable = somelist</code> sets somevariable as a pointer to an existing list, so using \"list add\" or \"list remove\" on somevariable will modify somelist and vice versa. But <code>someobject.attribute = somelist</code> creates a copy of the list, which is now separate from the original variable)</p>\n\n",
      "PostDate": "2020-03-02T09:15:56.4983139Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
