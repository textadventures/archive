{
  "Topic": {
    "TopicId": "9utjy2oa8u6n_uspxrsbvq",
    "ForumId": "10",
    "Title": "Strange arithmetic error",
    "LastUpdated": "2017-01-02T06:58:26.2719166Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6dc65664-2dbe-4d3d-826f-b13752632648",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've encountered a strange error. I have a script that randomly spawns animals into rooms that the player enters. As part of this script I have a script attribute on the animals that spawn that gives them a random size \r\n\r\n```\r\nsize = this.animal_size\r\nsize_max = this.animal_size_max\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio <= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = null\r\n}\r\nif (not GetString (this, \"animal_size_adj\") = null) {\r\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\r\n}\r\n```\r\n\r\nThat script works, using 'do', as part of a script that runs when the player enters a room. However, it seems to always produce results that are 'small' for some reason.\r\n\r\nAlso, when I try to run an almost identical script, to randomise another adjective which describes how healthy the animal is, it gives me this error: 'Error running script: Error compiling expression 'hp / hp_max': ArithmeticElement: Operation 'Divide' is not defined for types 'LazyLoadScript' and 'Int32''\r\n\r\nThis script looks like this, and immediately follows the previous one, run using 'do'.\r\n\r\n```\r\nhp = this.animal_hp\r\nsize_max = this.animal_hp_max\r\nratio = hp / hp_max\r\nif (ratio >= 0.75) {\r\n  this.animal_size_adj = \"Strong\"\r\n}\r\nelse if (ratio <= 0.25) {\r\n  this.animal_size_adj = \"Weak\"\r\n}\r\nelse {\r\n  this.animal_size_adj = null\r\n}\r\nif (not GetString (this, \"animal_hp_adj\") = null) {\r\n  this.alias = this.animal_hp_adj + \" \" + GetDisplayAlias (this)\r\n}\r\n```\r\n\r\nI can't see any reason why division should work for one of these scripts and not for the other. Any ideas?\r\n\r\n\r\nEDIT: I'm beginning to suspect that there might be an issue with using decimals. Does quest have an issue with non-whole numbers?",
      "EditableFormat": "markdown",
      "HTML": "<p>I've encountered a strange error. I have a script that randomly spawns animals into rooms that the player enters. As part of this script I have a script attribute on the animals that spawn that gives them a random size</p>\n<pre><code>size = this.animal_size\nsize_max = this.animal_size_max\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &lt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = null\n}\nif (not GetString (this, \"animal_size_adj\") = null) {\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\n}\n</code></pre>\n<p>That script works, using 'do', as part of a script that runs when the player enters a room. However, it seems to always produce results that are 'small' for some reason.</p>\n<p>Also, when I try to run an almost identical script, to randomise another adjective which describes how healthy the animal is, it gives me this error: 'Error running script: Error compiling expression 'hp / hp_max': ArithmeticElement: Operation 'Divide' is not defined for types 'LazyLoadScript' and 'Int32''</p>\n<p>This script looks like this, and immediately follows the previous one, run using 'do'.</p>\n<pre><code>hp = this.animal_hp\nsize_max = this.animal_hp_max\nratio = hp / hp_max\nif (ratio &gt;= 0.75) {\n  this.animal_size_adj = \"Strong\"\n}\nelse if (ratio &lt;= 0.25) {\n  this.animal_size_adj = \"Weak\"\n}\nelse {\n  this.animal_size_adj = null\n}\nif (not GetString (this, \"animal_hp_adj\") = null) {\n  this.alias = this.animal_hp_adj + \" \" + GetDisplayAlias (this)\n}\n</code></pre>\n<p>I can't see any reason why division should work for one of these scripts and not for the other. Any ideas?</p>\n<p>EDIT: I'm beginning to suspect that there might be an issue with using decimals. Does quest have an issue with non-whole numbers?</p>\n\n",
      "PostDate": "2017-01-02T06:58:26.2719166Z",
      "LastEditDate": "2017-01-02T09:06:12.3269192Z"
    },
    {
      "PostId": "29b6af0c-8056-4d0b-a421-beada92df353",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "From the error message, sounds like `hp` (and therefore `this.animal_hp`) is a script not a number.",
      "EditableFormat": "markdown",
      "HTML": "<p>From the error message, sounds like <code>hp</code> (and therefore <code>this.animal_hp</code>) is a script not a number.</p>\n\n",
      "PostDate": "2017-01-02T08:46:00.1831003Z",
      "LastEditDate": null
    },
    {
      "PostId": "f8a3eca2-8539-4e07-87c1-a7fb19a07578",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nope, definitely an integer.\r\n\r\nEDIT: I've found the solution. On the test animal I was spawning I had forgotten that I had set the hp attribute to 'null' instead of 0. To fix it I just deleted the attribute from the animal object, so that it inherited the default hp attribute from it's parent.\r\n\r\nHowever, almost all the animals that I spawn still seem to be categorised as 'small' for some reason. Only if the animal spawned is the maximum possible size will it be categorised as 'large'. It will never generate anything that is neither small or large.\r\n\r\nMy guess is that two things are happening. Firstly in the instances in which I want the animals to spawn with no adjective, they're spawning with a 'small' adjective instead. That might be because I'm misusing 'null' somehow. Secondly, the 'ratio' is being rounded to a whole integer. If the numbers are always being rounded down, then that would explain why the spawned animals are only ever 'large' if their size is the maximum.\r\n\r\nAny idea why this might be happening?\r\n\r\n\r\nSide note, I also realised there was a mistake in my math. Since the minimum value of size or hp isn't zero, dividing the current size by the maximum size doesn't give the correct ratio. My new script subtracts the minimum value from both the maximum and current sizes, which should make the ratio accurate. Like so\r\n\r\n```\r\nsize_min = this.animal_size_min\r\nsize_original = this.animal_size\r\nsize_max_original = this.animal_size_max\r\nsize = size_original - size_min\r\nsize_max = size_max_original - size_min\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio <= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = \"Normal\"\r\n}\r\nif (not GetString (this, \"animal_size_adj\") = null) {\r\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Nope, definitely an integer.</p>\n<p>EDIT: I've found the solution. On the test animal I was spawning I had forgotten that I had set the hp attribute to 'null' instead of 0. To fix it I just deleted the attribute from the animal object, so that it inherited the default hp attribute from it's parent.</p>\n<p>However, almost all the animals that I spawn still seem to be categorised as 'small' for some reason. Only if the animal spawned is the maximum possible size will it be categorised as 'large'. It will never generate anything that is neither small or large.</p>\n<p>My guess is that two things are happening. Firstly in the instances in which I want the animals to spawn with no adjective, they're spawning with a 'small' adjective instead. That might be because I'm misusing 'null' somehow. Secondly, the 'ratio' is being rounded to a whole integer. If the numbers are always being rounded down, then that would explain why the spawned animals are only ever 'large' if their size is the maximum.</p>\n<p>Any idea why this might be happening?</p>\n<p>Side note, I also realised there was a mistake in my math. Since the minimum value of size or hp isn't zero, dividing the current size by the maximum size doesn't give the correct ratio. My new script subtracts the minimum value from both the maximum and current sizes, which should make the ratio accurate. Like so</p>\n<pre><code>size_min = this.animal_size_min\nsize_original = this.animal_size\nsize_max_original = this.animal_size_max\nsize = size_original - size_min\nsize_max = size_max_original - size_min\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &lt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = \"Normal\"\n}\nif (not GetString (this, \"animal_size_adj\") = null) {\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-02T08:52:45.2087657Z",
      "LastEditDate": "2017-01-02T09:23:33.7901341Z"
    },
    {
      "PostId": "9097e7fc-35c0-4e40-9f91-a9f19bf9a204",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem is because they are integers, and integer division truncates to integers. If you want floating point arithmetic, the values need to be double or converted to doubles. In other words:\r\n\r\n1 / 2  = 0\r\n1.0 / 2.0 = 0.5\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem is because they are integers, and integer division truncates to integers. If you want floating point arithmetic, the values need to be double or converted to doubles. In other words:</p>\n<p>1 / 2  = 0<br>\n1.0 / 2.0 = 0.5</p>\n\n",
      "PostDate": "2017-01-02T09:21:35.3909495Z",
      "LastEditDate": null
    },
    {
      "PostId": "da4c015d-8d85-4229-8d3b-ca3597f88729",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Unfortunately, the method to convert an int to a double is not pretty:\r\n```\r\n      x = 1\r\n      y = 2\r\n      msg(x/y)\r\n      xd = ToDouble(ToString(x))\r\n      msg(xd/y)\r\n```\r\nOutputs:\r\n0\r\n0.5\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Unfortunately, the method to convert an int to a double is not pretty:</p>\n<pre><code>      x = 1\n      y = 2\n      msg(x/y)\n      xd = ToDouble(ToString(x))\n      msg(xd/y)\n</code></pre>\n<p>Outputs:<br>\n0<br>\n0.5</p>\n\n",
      "PostDate": "2017-01-02T09:28:29.1121575Z",
      "LastEditDate": "2017-01-02T09:28:41.5476731Z"
    },
    {
      "PostId": "e6743010-bddf-4146-a4e4-a23c388ad165",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah so that's what a double is! Pardon my ignorance. :P\r\n\r\nThanks a bunch! Pretty doesn't matter, so long as it works.\r\n\r\nEDIT: Here's the new script, which seems to work:\r\n\r\n```\r\nsize_min = this.animal_size_min\r\nsize_original = this.animal_size\r\nsize_max_original = this.animal_size_max\r\nsize_int = size_original - size_min\r\nsize_max = size_max_original - size_min\r\nsize = ToDouble(ToString(size_int))\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio <= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = null\r\n}\r\nif (not GetString (this, \"animal_size_adj\") = null) {\r\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah so that's what a double is! Pardon my ignorance. :P</p>\n<p>Thanks a bunch! Pretty doesn't matter, so long as it works.</p>\n<p>EDIT: Here's the new script, which seems to work:</p>\n<pre><code>size_min = this.animal_size_min\nsize_original = this.animal_size\nsize_max_original = this.animal_size_max\nsize_int = size_original - size_min\nsize_max = size_max_original - size_min\nsize = ToDouble(ToString(size_int))\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &lt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = null\n}\nif (not GetString (this, \"animal_size_adj\") = null) {\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-02T09:30:31.9631011Z",
      "LastEditDate": "2017-01-02T09:41:16.3887754Z"
    },
    {
      "PostId": "f0a92f4b-d15a-4ee4-bce2-cab2d63b6e5f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, so it was just a problem of how quest handling int division, didn't recognize that this was causing scrim's problem. A generally rare case of when the truncating with int division was causing a problem.\r\n\r\nya, dealing with fractions/decimal values is messy and confusing, each language handles it in different ways or different functions, that gets you confused between them, lol.\r\n\r\nif you can, it's better to not work with decimal/fractional values (in quest: Double Attributes), as they take more work underneath (though you won't notice any difference in performance most likely), as well as the issue of how they are and their roudning handled (truncated, floor, ceiling, etc etc etc ??? do you have to have them all be the same data/attribute type or can you use integers with doubles without having to convert them all to ints or doubles, etc etc etc)\r\n\r\n------------\r\n\r\nbtw, with programming, they have a seperate operator for handling the remainder, as in programming, you actually have to do two operations, one to get the quotient and one to get the remainder.\r\n\r\nin quest (and many/some other languages too), it's the: %, and is known as the 'modulus' operator\r\n\r\n9 / 4 = 2 // (quest truncates int/integer division result, so that the result is also an int/integer, as 2.5 is a double/decimal/fraction/float/floating-point)\r\n9 % 4 = R:1\r\n\r\n// 'R' for remainder\r\n\r\n-------------\r\n\r\nthe modulus (remainder division) operator actually has two really useful abilities:\r\n\r\n1. cyclic (seconds, minutes, hours, months, days, seasons, etc etc etc)\r\n2. factors / divisibles / odd vs even\r\n\r\nCyclic example:\r\n\r\n```\r\nmilitary_hour_clock_time = hour / 24\r\n// it'll be one of these values: 0-23\r\n\r\nfor examples:\r\n\r\nhour = 0\r\nmilitary_hour_clock_time = 0\r\n\r\nhour = 12\r\nmilitary_hour_clock_time = 12\r\n\r\nhour = 23\r\nmilitary_hour_clock_time = 23\r\n\r\nhour = 24\r\nmilitary_hour_clock_time = 0\r\n\r\nhour = 25\r\nmilitary_hour_clock_time = 1\r\n\r\nhour = 71\r\nmilitary_hour_clock_time = 23\r\n\r\nhour = 72\r\nmilitary_hour_clock_time = 0\r\n\r\nhour = 73\r\nmilitary_hour_clock_time = 1\r\n\r\n-------------\r\n\r\ncivilian hours:\r\n\r\ncivilian_hour_clock_time = hour % 12\r\n// the values will be one of these: 0-11\r\n\r\nhour = 0\r\ncivilian_hour_clock_time = 0\r\n\r\nhour = 6\r\ncivilian_hour_clock_time = 6\r\n\r\nhour = 11\r\ncivilian_hour_clock_time = 11\r\n\r\nhour = 12\r\ncivilian_hour_clock_time = 0\r\n\r\nhour = 13\r\ncivilian_hour_clock_time = 1\r\n\r\nhour = 23\r\ncivilian_hour_clock_time = 11\r\n\r\nhour = 24\r\ncivilian_hour_clock_time = 0\r\n\r\nhour = 25\r\ncivilian_hour_clock_time = 1\r\n\r\nhour = 71\r\ncivilian_hour_clock_time = 11\r\n\r\nhour = 72\r\ncivilian_hour_clock_time = 0\r\n\r\nhour = 73\r\ncivilian_hour_clock_time = 1\r\n```\r\n\r\n-----------\r\n\r\nFactors-Divisibles / Odd vs Even, example:\r\n\r\n```\r\nif (number % 2 = 0) {\r\n  msg (\"The number is an even number\")\r\n} else { // every/any number divided by 2, will have R:1 (odd) or R:0 (even), so we can just use an 'else', as this is a dualistic (2 choice) outcome\r\n  msg (\"The number is an odd number\")\r\n}\r\n\r\nor\r\n\r\nif (number % 2 = 1) {\r\n  msg (\"The number is an odd number\")\r\n} else { // every/any number divided by 2, will have R:1 (odd) or R:0 (even), so we can just use an 'else', as this is a dualistic (2 choice) outcome\r\n  msg (\"The number is an even number\")\r\n}\r\n\r\n----\r\n\r\nif (number % 3 = 0) {\r\n  msg (\"The number is divisible by 3\")\r\n}\r\nif (number % 7 = 0) {\r\n  msg (\"The number is divisible by 7\")\r\n}\r\nif (number % 11 = 0) {\r\n  msg (\"The number is divisible by 11\")\r\n}\r\n// etc etc etc we can do any 'number % N = 0' to determine if it's divisible by N, or to say it different: if N is a factor of number\r\n\r\nnumber = 56\r\n// 56 = 7 * 8 = 7 * 2 * 4 = 7 * 2 * 2 * 2\r\nif (number % 3 = 0) {\r\n  msg (\"The number is divisible by 3\")\r\n}\r\nif (number % 7 = 0) {\r\n  msg (\"The number is divisible by 7\")\r\n}\r\nif (number % 11 = 0) {\r\n  msg (\"The number is divisible by 11\")\r\n}\r\n// output:\r\nThe number is divisible by 7\r\n// or to say it differently:\r\n// 7 is a factor of 56\r\n\r\nnumber = 231\r\n// 231 = 77 * 3 = 11 * 7 * 3\r\nif (number % 3 = 0) {\r\n  msg (\"The number is divisible by 3\")\r\n}\r\nif (number % 7 = 0) {\r\n  msg (\"The number is divisible by 7\")\r\n}\r\nif (number % 11 = 0) {\r\n  msg (\"The number is divisible by 11\")\r\n}\r\n// output:\r\nThe number is divisible by 3\r\nThe number is divisible by 7\r\nThe number is divisible by 11\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, so it was just a problem of how quest handling int division, didn't recognize that this was causing scrim's problem. A generally rare case of when the truncating with int division was causing a problem.</p>\n<p>ya, dealing with fractions/decimal values is messy and confusing, each language handles it in different ways or different functions, that gets you confused between them, lol.</p>\n<p>if you can, it's better to not work with decimal/fractional values (in quest: Double Attributes), as they take more work underneath (though you won't notice any difference in performance most likely), as well as the issue of how they are and their roudning handled (truncated, floor, ceiling, etc etc etc ??? do you have to have them all be the same data/attribute type or can you use integers with doubles without having to convert them all to ints or doubles, etc etc etc)</p>\n<hr>\n<p>btw, with programming, they have a seperate operator for handling the remainder, as in programming, you actually have to do two operations, one to get the quotient and one to get the remainder.</p>\n<p>in quest (and many/some other languages too), it's the: %, and is known as the 'modulus' operator</p>\n<p>9 / 4 = 2 // (quest truncates int/integer division result, so that the result is also an int/integer, as 2.5 is a double/decimal/fraction/float/floating-point)<br>\n9 % 4 = R:1</p>\n<p>// 'R' for remainder</p>\n<hr>\n<p>the modulus (remainder division) operator actually has two really useful abilities:</p>\n<ol>\n<li>cyclic (seconds, minutes, hours, months, days, seasons, etc etc etc)</li>\n<li>factors / divisibles / odd vs even</li>\n</ol>\n<p>Cyclic example:</p>\n<pre><code>military_hour_clock_time = hour / 24\n// it'll be one of these values: 0-23\n\nfor examples:\n\nhour = 0\nmilitary_hour_clock_time = 0\n\nhour = 12\nmilitary_hour_clock_time = 12\n\nhour = 23\nmilitary_hour_clock_time = 23\n\nhour = 24\nmilitary_hour_clock_time = 0\n\nhour = 25\nmilitary_hour_clock_time = 1\n\nhour = 71\nmilitary_hour_clock_time = 23\n\nhour = 72\nmilitary_hour_clock_time = 0\n\nhour = 73\nmilitary_hour_clock_time = 1\n\n-------------\n\ncivilian hours:\n\ncivilian_hour_clock_time = hour % 12\n// the values will be one of these: 0-11\n\nhour = 0\ncivilian_hour_clock_time = 0\n\nhour = 6\ncivilian_hour_clock_time = 6\n\nhour = 11\ncivilian_hour_clock_time = 11\n\nhour = 12\ncivilian_hour_clock_time = 0\n\nhour = 13\ncivilian_hour_clock_time = 1\n\nhour = 23\ncivilian_hour_clock_time = 11\n\nhour = 24\ncivilian_hour_clock_time = 0\n\nhour = 25\ncivilian_hour_clock_time = 1\n\nhour = 71\ncivilian_hour_clock_time = 11\n\nhour = 72\ncivilian_hour_clock_time = 0\n\nhour = 73\ncivilian_hour_clock_time = 1\n</code></pre>\n<hr>\n<p>Factors-Divisibles / Odd vs Even, example:</p>\n<pre><code>if (number % 2 = 0) {\n  msg (\"The number is an even number\")\n} else { // every/any number divided by 2, will have R:1 (odd) or R:0 (even), so we can just use an 'else', as this is a dualistic (2 choice) outcome\n  msg (\"The number is an odd number\")\n}\n\nor\n\nif (number % 2 = 1) {\n  msg (\"The number is an odd number\")\n} else { // every/any number divided by 2, will have R:1 (odd) or R:0 (even), so we can just use an 'else', as this is a dualistic (2 choice) outcome\n  msg (\"The number is an even number\")\n}\n\n----\n\nif (number % 3 = 0) {\n  msg (\"The number is divisible by 3\")\n}\nif (number % 7 = 0) {\n  msg (\"The number is divisible by 7\")\n}\nif (number % 11 = 0) {\n  msg (\"The number is divisible by 11\")\n}\n// etc etc etc we can do any 'number % N = 0' to determine if it's divisible by N, or to say it different: if N is a factor of number\n\nnumber = 56\n// 56 = 7 * 8 = 7 * 2 * 4 = 7 * 2 * 2 * 2\nif (number % 3 = 0) {\n  msg (\"The number is divisible by 3\")\n}\nif (number % 7 = 0) {\n  msg (\"The number is divisible by 7\")\n}\nif (number % 11 = 0) {\n  msg (\"The number is divisible by 11\")\n}\n// output:\nThe number is divisible by 7\n// or to say it differently:\n// 7 is a factor of 56\n\nnumber = 231\n// 231 = 77 * 3 = 11 * 7 * 3\nif (number % 3 = 0) {\n  msg (\"The number is divisible by 3\")\n}\nif (number % 7 = 0) {\n  msg (\"The number is divisible by 7\")\n}\nif (number % 11 = 0) {\n  msg (\"The number is divisible by 11\")\n}\n// output:\nThe number is divisible by 3\nThe number is divisible by 7\nThe number is divisible by 11\n</code></pre>\n\n",
      "PostDate": "2017-01-07T10:28:15.2964171Z",
      "LastEditDate": "2017-01-07T11:21:55.2808876Z"
    }
  ]
}
