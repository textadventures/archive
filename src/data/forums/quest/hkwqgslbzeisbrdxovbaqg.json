{
  "Topic": {
    "TopicId": "hkwqgslbzeisbrdxovbaqg",
    "ForumId": "10",
    "Title": "Working, but an utter mess of conflicting IFs and Flags",
    "LastUpdated": "2016-11-01T23:24:09.6195421Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "df1ca53c-e8ab-4104-b406-fd6400c3ce9b",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This works, but because I will never get my head around the logic of Quest's IF nesting etc, I suspect this is littered with conflicting rules and conditions.\r\n\r\nWould anyone be kind enough to load it up and let me know just how bad it is?\r\n\r\n```\r\n\r\n  <object name=\"Shelter\">\r\n    <inherit name=\"editor_room\" />\r\n    <exitslistprefix type=\"string\"></exitslistprefix>\r\n    <description type=\"script\">\r\n      stop sound\r\n      if (GetBoolean(player, \"firelit\")) {\r\n        play sound (\"firecrackling3.mp3\", false, true)\r\n        msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\r\n        MakeExitInvisible (firetrue)\r\n      }\r\n      else {\r\n        msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\r\n        if (Got(fuel)) {\r\n          MakeExitVisible (firetrue)\r\n        }\r\n        else {\r\n          MakeExitInvisible (firetrue)\r\n        }\r\n      }\r\n      if (Got(fuel) and not Got(hunting bow)) {\r\n        MakeExitVisible (gotwood)\r\n      }\r\n      else {\r\n        MakeExitInvisible (gotwood)\r\n      }\r\n      if (GetBoolean(player, \"gotfood\")) {\r\n        MakeExitVisible (havefood)\r\n      }\r\n    </description>\r\n    <beforeenter type=\"script\">\r\n    </beforeenter>\r\n    <beforefirstenter type=\"script\">\r\n    </beforefirstenter>\r\n    <enter type=\"script\">\r\n      if (Got(hunting bow)) {\r\n        MakeExitInvisible (gotwood)\r\n      }\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit name=\"firetrue\" alias=\"Fire\">\r\n      <runscript />\r\n      <visible type=\"boolean\">false</visible>\r\n      <script type=\"script\">\r\n        if (Got(fuel)) {\r\n          msg (\"The dry wood begins to crack and pop in the fire and the room grows steadily warmer.\")\r\n          play sound (\"firecrackling3.mp3\", false, true)\r\n          SetObjectFlagOn (player, \"firelit\")\r\n          MakeExitInvisible (firetrue)\r\n        }\r\n        else if (not Got(fuel)) {\r\n          msg (\"No firewood.\")\r\n        }\r\n      </script>\r\n    </exit>\r\n    <exit alias=\"Explore\" to=\"forest\" />\r\n    <exit name=\"gotwood\" alias=\"Weapon\">\r\n      <runscript />\r\n      <visible type=\"boolean\">false</visible>\r\n      <script type=\"script\">\r\n        if (Got(wood)) {\r\n          msg (\"It's not great but should act as a deterent. Okay for small mammals.\")\r\n          MoveObject (hunting bow, player)\r\n          MakeExitInvisible (gotwood)\r\n          MoveObject (wood, forest)\r\n        }\r\n        else if (not Got(wood)) {\r\n          msg (\"No wood.\")\r\n        }\r\n        else if (not Got(hunting bow)) {\r\n          MakeExitInvisible (gotwood)\r\n        }\r\n      </script>\r\n    </exit>\r\n    <object name=\"hunting bow\">\r\n      <inherit name=\"editor_object\" />\r\n    </object>\r\n    <exit name=\"havefood\" alias=\"Eat\">\r\n      <visible type=\"boolean\">false</visible>\r\n      <runscript />\r\n      <script type=\"script\">\r\n        if (GetBoolean(player, \"firelit\")) {\r\n          msg (\"Not much, but hot and delicious.\")\r\n          SetObjectFlagOff (player, \"gotfood\")\r\n          MakeExitInvisible (havefood)\r\n          MoveObject (hunting bow, bin)\r\n          SetObjectFlagOn (player, \"villageunlocked\")\r\n        }\r\n        else {\r\n          msg (\"No means of cooking.\")\r\n        }\r\n      </script>\r\n    </exit>\r\n  </object>\r\n  <object name=\"forest\">\r\n    <inherit name=\"editor_room\" />\r\n    <exitslistprefix type=\"string\"></exitslistprefix>\r\n    <description type=\"script\">\r\n      msg (\"Forest. Most of the trees are dead or dying.\")\r\n      play sound (\"forest_wind.mp3\", false, true)\r\n      if (Got(hunting bow)) {\r\n        MakeExitVisible (havebow)\r\n      }\r\n      if (GetBoolean(player, \"villageunlocked\")) {\r\n        MakeExitVisible (explore)\r\n      }\r\n    </description>\r\n    <enter type=\"script\">\r\n      if (GetBoolean(player, \"gotfood\")) {\r\n        MakeExitInvisible (havebow)\r\n      }\r\n    </enter>\r\n    <object name=\"wood\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <takemsg>Firewood collected</takemsg>\r\n      <dropmsg>Firewood dropped</dropmsg>\r\n    </object>\r\n    <exit name=\"woodnotneeded\" alias=\"Gather\">\r\n      <prefix type=\"string\"></prefix>\r\n      <runscript />\r\n      <visible />\r\n      <script type=\"script\">\r\n        msg (\"Wood collected.\")\r\n        MoveObject (fuel, player)\r\n        MoveObject (wood, player)\r\n        MakeExitInvisible (woodnotneeded)\r\n      </script>\r\n    </exit>\r\n    <exit alias=\"Shelter\" to=\"Shelter\" />\r\n    <exit name=\"havebow\" alias=\"Hunt\">\r\n      <runscript />\r\n      <visible type=\"boolean\">false</visible>\r\n      <script type=\"script\"><![CDATA[\r\n        msg (\"It was a long day, but a {random:scrawny rabbit:small hare:fish:squirrel} was eventually caught.<br/>\")\r\n        SetObjectFlagOn (player, \"gotfood\")\r\n        MakeExitInvisible (havebow)\r\n        MoveObject (hunting bow, player)\r\n      ]]></script>\r\n    </exit>\r\n    <exit name=\"explore\" alias=\"Explore\" to=\"village\">\r\n      <visible type=\"boolean\">false</visible>\r\n      <runscript type=\"boolean\">false</runscript>\r\n      <script type=\"script\">\r\n        if (GetBoolean(player, \"gotfood\")) {\r\n          MakeExitVisible (explore)\r\n        }\r\n      </script>\r\n    </exit>\r\n    <object name=\"fuel\">\r\n      <inherit name=\"editor_object\" />\r\n    </object>\r\n  </object>\r\n  <object name=\"village\">\r\n    <inherit name=\"editor_room\" />\r\n    <description type=\"script\">\r\n      if (GetBoolean(player, \"villageunlocked\")) {\r\n        msg (\"No signs of life or infected. Cold winds. A dirt road slopes away into the distance.\")\r\n      }\r\n    </description>\r\n  </object>\r\n  <object name=\"bin\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <function name=\"ClearScreen\">\r\n    request (ClearScreen, \"\")\r\n    OutputTextNoBr (game.css)\r\n  </function>\r\n  <function name=\"InitUserInterface\"><![CDATA[\r\n    JS.setCommandBarStyle (GetCurrentTextFormat(\"\") + \";border:\" + game.defaultbackground)\r\n    JS.eval (\"$('#status').hide();\")\r\n    JS.SetBackgroundCol (\"black\")\r\n    JS.eval (\"$('#txtCommandDiv').prepend('&gt;&nbsp;')\")\r\n    JS.OutputTextNoBr (game.css)\r\n    OutputTextNoBr (game.css)\r\n    request (SetInterfaceString, \"TypeHereLabel=\")\r\n    if (GetBoolean(game, \"inprogress\")) {\r\n    }\r\n    else {\r\n      game.inprogress = true\r\n    }\r\n  ]]></function>\r\n  <function name=\"HideCommandBar\">\r\n    request (Hide, \"Command\")\r\n  </function>\r\n  <function name=\"ShowCommandBar\">\r\n    request (Show, \"Command\")\r\n  </function>\r\n</asl>\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This works, but because I will never get my head around the logic of Quest's IF nesting etc, I suspect this is littered with conflicting rules and conditions.</p>\n<p>Would anyone be kind enough to load it up and let me know just how bad it is?</p>\n<pre><code>\n  &lt;object name=\"Shelter\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exitslistprefix type=\"string\"&gt;&lt;/exitslistprefix&gt;\n    &lt;description type=\"script\"&gt;\n      stop sound\n      if (GetBoolean(player, \"firelit\")) {\n        play sound (\"firecrackling3.mp3\", false, true)\n        msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\n        MakeExitInvisible (firetrue)\n      }\n      else {\n        msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\n        if (Got(fuel)) {\n          MakeExitVisible (firetrue)\n        }\n        else {\n          MakeExitInvisible (firetrue)\n        }\n      }\n      if (Got(fuel) and not Got(hunting bow)) {\n        MakeExitVisible (gotwood)\n      }\n      else {\n        MakeExitInvisible (gotwood)\n      }\n      if (GetBoolean(player, \"gotfood\")) {\n        MakeExitVisible (havefood)\n      }\n    &lt;/description&gt;\n    &lt;beforeenter type=\"script\"&gt;\n    &lt;/beforeenter&gt;\n    &lt;beforefirstenter type=\"script\"&gt;\n    &lt;/beforefirstenter&gt;\n    &lt;enter type=\"script\"&gt;\n      if (Got(hunting bow)) {\n        MakeExitInvisible (gotwood)\n      }\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"firetrue\" alias=\"Fire\"&gt;\n      &lt;runscript /&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;script type=\"script\"&gt;\n        if (Got(fuel)) {\n          msg (\"The dry wood begins to crack and pop in the fire and the room grows steadily warmer.\")\n          play sound (\"firecrackling3.mp3\", false, true)\n          SetObjectFlagOn (player, \"firelit\")\n          MakeExitInvisible (firetrue)\n        }\n        else if (not Got(fuel)) {\n          msg (\"No firewood.\")\n        }\n      &lt;/script&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"Explore\" to=\"forest\" /&gt;\n    &lt;exit name=\"gotwood\" alias=\"Weapon\"&gt;\n      &lt;runscript /&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;script type=\"script\"&gt;\n        if (Got(wood)) {\n          msg (\"It's not great but should act as a deterent. Okay for small mammals.\")\n          MoveObject (hunting bow, player)\n          MakeExitInvisible (gotwood)\n          MoveObject (wood, forest)\n        }\n        else if (not Got(wood)) {\n          msg (\"No wood.\")\n        }\n        else if (not Got(hunting bow)) {\n          MakeExitInvisible (gotwood)\n        }\n      &lt;/script&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"hunting bow\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"havefood\" alias=\"Eat\"&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;runscript /&gt;\n      &lt;script type=\"script\"&gt;\n        if (GetBoolean(player, \"firelit\")) {\n          msg (\"Not much, but hot and delicious.\")\n          SetObjectFlagOff (player, \"gotfood\")\n          MakeExitInvisible (havefood)\n          MoveObject (hunting bow, bin)\n          SetObjectFlagOn (player, \"villageunlocked\")\n        }\n        else {\n          msg (\"No means of cooking.\")\n        }\n      &lt;/script&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"forest\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exitslistprefix type=\"string\"&gt;&lt;/exitslistprefix&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"Forest. Most of the trees are dead or dying.\")\n      play sound (\"forest_wind.mp3\", false, true)\n      if (Got(hunting bow)) {\n        MakeExitVisible (havebow)\n      }\n      if (GetBoolean(player, \"villageunlocked\")) {\n        MakeExitVisible (explore)\n      }\n    &lt;/description&gt;\n    &lt;enter type=\"script\"&gt;\n      if (GetBoolean(player, \"gotfood\")) {\n        MakeExitInvisible (havebow)\n      }\n    &lt;/enter&gt;\n    &lt;object name=\"wood\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;takemsg&gt;Firewood collected&lt;/takemsg&gt;\n      &lt;dropmsg&gt;Firewood dropped&lt;/dropmsg&gt;\n    &lt;/object&gt;\n    &lt;exit name=\"woodnotneeded\" alias=\"Gather\"&gt;\n      &lt;prefix type=\"string\"&gt;&lt;/prefix&gt;\n      &lt;runscript /&gt;\n      &lt;visible /&gt;\n      &lt;script type=\"script\"&gt;\n        msg (\"Wood collected.\")\n        MoveObject (fuel, player)\n        MoveObject (wood, player)\n        MakeExitInvisible (woodnotneeded)\n      &lt;/script&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"Shelter\" to=\"Shelter\" /&gt;\n    &lt;exit name=\"havebow\" alias=\"Hunt\"&gt;\n      &lt;runscript /&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;script type=\"script\"&gt;&lt;![CDATA[\n        msg (\"It was a long day, but a {random:scrawny rabbit:small hare:fish:squirrel} was eventually caught.&lt;br/&gt;\")\n        SetObjectFlagOn (player, \"gotfood\")\n        MakeExitInvisible (havebow)\n        MoveObject (hunting bow, player)\n      ]]&gt;&lt;/script&gt;\n    &lt;/exit&gt;\n    &lt;exit name=\"explore\" alias=\"Explore\" to=\"village\"&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;runscript type=\"boolean\"&gt;false&lt;/runscript&gt;\n      &lt;script type=\"script\"&gt;\n        if (GetBoolean(player, \"gotfood\")) {\n          MakeExitVisible (explore)\n        }\n      &lt;/script&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"fuel\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"village\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description type=\"script\"&gt;\n      if (GetBoolean(player, \"villageunlocked\")) {\n        msg (\"No signs of life or infected. Cold winds. A dirt road slopes away into the distance.\")\n      }\n    &lt;/description&gt;\n  &lt;/object&gt;\n  &lt;object name=\"bin\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ClearScreen\"&gt;\n    request (ClearScreen, \"\")\n    OutputTextNoBr (game.css)\n  &lt;/function&gt;\n  &lt;function name=\"InitUserInterface\"&gt;&lt;![CDATA[\n    JS.setCommandBarStyle (GetCurrentTextFormat(\"\") + \";border:\" + game.defaultbackground)\n    JS.eval (\"$('#status').hide();\")\n    JS.SetBackgroundCol (\"black\")\n    JS.eval (\"$('#txtCommandDiv').prepend('&amp;gt;&amp;nbsp;')\")\n    JS.OutputTextNoBr (game.css)\n    OutputTextNoBr (game.css)\n    request (SetInterfaceString, \"TypeHereLabel=\")\n    if (GetBoolean(game, \"inprogress\")) {\n    }\n    else {\n      game.inprogress = true\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"HideCommandBar\"&gt;\n    request (Hide, \"Command\")\n  &lt;/function&gt;\n  &lt;function name=\"ShowCommandBar\"&gt;\n    request (Show, \"Command\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n\n</code></pre>\n\n",
      "PostDate": "2016-11-01T23:24:09.6195421Z",
      "LastEditDate": "2016-11-01T23:27:53.9174438Z"
    },
    {
      "PostId": "8319dca8-6be8-481d-beba-dd2fe98bbe0b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Congrats on getting it to work! Revel (celebrate/be happy/be proud!) in your success! Understanding 'if' logic is not easy. If you're really bothered by it... then you learn more about coding and understand more 'if' and etc logic needed, to make better/clean'er/more-efficient code, but that isn't easy, to learn even more coding and its needed understanding of complex concepts/logic/ideas/structures.\r\n\r\nSometimes, nesting is just messy, and it's better to keep it simple and straight-forward, even if it might be more verbose codage.\r\n\r\nIn my quick/brief scan, the code looks good!\r\n\r\n(yes, the code design/structure can be better, and the logic a little better too, but that means taking your ability up to another, or a few/many more, level/s)\r\n\r\n(code can always be better... if you're like me, you get obsessed with it, and never just go with it and progress on with the rest of your game, lol)\r\n\r\nSomething I need to heed: if it works, that's all that matters! Move on to doing more things for your game-making completion. At a later time, if/when you're able to, then, you can come back and make your code/game-code, or parts of your code/game-code, better. Or, if you're code is needed for the rest of your game, but it's just too poor-inefficient/messy/spagetti to work with, then, well... you got to go clean it up, for you to then use/apply it to the other stuff it's needed for in your game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Congrats on getting it to work! Revel (celebrate/be happy/be proud!) in your success! Understanding 'if' logic is not easy. If you're really bothered by it... then you learn more about coding and understand more 'if' and etc logic needed, to make better/clean'er/more-efficient code, but that isn't easy, to learn even more coding and its needed understanding of complex concepts/logic/ideas/structures.</p>\n<p>Sometimes, nesting is just messy, and it's better to keep it simple and straight-forward, even if it might be more verbose codage.</p>\n<p>In my quick/brief scan, the code looks good!</p>\n<p>(yes, the code design/structure can be better, and the logic a little better too, but that means taking your ability up to another, or a few/many more, level/s)</p>\n<p>(code can always be better... if you're like me, you get obsessed with it, and never just go with it and progress on with the rest of your game, lol)</p>\n<p>Something I need to heed: if it works, that's all that matters! Move on to doing more things for your game-making completion. At a later time, if/when you're able to, then, you can come back and make your code/game-code, or parts of your code/game-code, better. Or, if you're code is needed for the rest of your game, but it's just too poor-inefficient/messy/spagetti to work with, then, well... you got to go clean it up, for you to then use/apply it to the other stuff it's needed for in your game.</p>\n\n",
      "PostDate": "2016-11-01T23:41:34.3413283Z",
      "LastEditDate": "2016-11-01T23:50:33.4553367Z"
    },
    {
      "PostId": "753d1d46-a811-459a-95ff-7f19ae3fac7f",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Scary thing is this is probably about 3% of the whole game. Hopefully each new location will be treated as a separate game, so I can essentially put this first section to bed and forget about it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Scary thing is this is probably about 3% of the whole game. Hopefully each new location will be treated as a separate game, so I can essentially put this first section to bed and forget about it.</p>\n\n",
      "PostDate": "2016-11-01T23:47:48.4218709Z",
      "LastEditDate": null
    },
    {
      "PostId": "9045fcbe-1f30-47f0-b861-5427d271b9f1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "yep.. small steps... the famous quote, paraphrased: \"A journey of a thousand miles, starts with a small single step, then another, and another, and another...\"\r\n\r\nEVERY SUCCESS IS A *BIG* SUCCESS!!! hehe :D (a good mindset to have)\r\n\r\n-------\r\n\r\nmore advanced coding, deals with scalability... how well does my code expand to other aspects of my game/program that requires it.\r\n\r\nfor example... does my combat code only works for a single monster or does it work for the entire game's monsters, scalability stuff like this... and other-like stuff\r\n\r\ndoes it only work for physical/weapon damage, or is it able to handle all aspects of combat (physical/weapon, melee vs ranged, magic/casting, ST vs MT, friend vs foe, items, escaping, different weapons/magics-spells, etc etc etc).\r\n\r\nif your code is such a hassle to figure out how to get it to work for the rest of your game's stuff or macro/game/global usage, then you need to go back and craft a better design of code. Or, if you have to keep writing new code for doing pretty much the same thing for different stuff in your game, then you want to go back and try to write a more universal/advanced/scalable code.",
      "EditableFormat": "markdown",
      "HTML": "<p>yep.. small steps... the famous quote, paraphrased: \"A journey of a thousand miles, starts with a small single step, then another, and another, and another...\"</p>\n<p>EVERY SUCCESS IS A <em>BIG</em> SUCCESS!!! hehe :D (a good mindset to have)</p>\n<hr>\n<p>more advanced coding, deals with scalability... how well does my code expand to other aspects of my game/program that requires it.</p>\n<p>for example... does my combat code only works for a single monster or does it work for the entire game's monsters, scalability stuff like this... and other-like stuff</p>\n<p>does it only work for physical/weapon damage, or is it able to handle all aspects of combat (physical/weapon, melee vs ranged, magic/casting, ST vs MT, friend vs foe, items, escaping, different weapons/magics-spells, etc etc etc).</p>\n<p>if your code is such a hassle to figure out how to get it to work for the rest of your game's stuff or macro/game/global usage, then you need to go back and craft a better design of code. Or, if you have to keep writing new code for doing pretty much the same thing for different stuff in your game, then you want to go back and try to write a more universal/advanced/scalable code.</p>\n\n",
      "PostDate": "2016-11-01T23:51:50.9373069Z",
      "LastEditDate": "2016-11-02T00:02:58.5127547Z"
    },
    {
      "PostId": "6b71ff14-4332-432e-9b6a-62940a9f505a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would put the bit in the `enter` script into the description with the rest, to keep it together. That also needs an `else` to hide the exit when the food is eaten.\r\n\r\nAn alternative approach would be to have a function that sets all the exits for the current room invisible, and then your code just checks which need to then be made visible\r\n\r\n      stop sound\r\n      ResetExits\r\n      MakeExitVisible (outside)\r\n      if (GetBoolean(player, \"firelit\")) {\r\n        play sound (\"firecrackling3.mp3\", false, true)\r\n        msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\r\n      }\r\n      else {\r\n        msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\r\n        if (Got(fuel)) {\r\n          MakeExitVisible (firetrue)\r\n        }\r\n      }\r\n      if (Got(fuel) and not Got(hunting bow)) {\r\n        MakeExitVisible (gotwood)\r\n      }\r\n      if (GetBoolean(player, \"gotfood\")) {\r\n        MakeExitVisible (havefood)\r\n      }\r\n      if (GetBoolean(player, \"gotfood\")) {\r\n        MakeExitVisible (explore)\r\n      }\r\n\r\nThe ResetExits function looks like this:\r\n```\r\nforeach (exit, AllExits()) {\r\n  if (exit.parent = room) {\r\n    exit.visible = false\r\n  }\r\n}\r\n```\r\nYou would have to remember to set visible all permanent exits, like the one to outside. However, I think you would find it easier to follow the code without the (majority or) `else` blocks.\r\n\r\nA second alternative, which would require some re-thinking, would be to set the visibility when the action is performed. For example, when the firewood is picked up, you set the \"Start fire\" exit to be visible back in the shack, rather than in the room description.\r\n\r\nThe script for the gathering wood exit would then be this:\r\n```\r\nmsg (\"Wood collected.\")\r\nMoveObject (wood, player)\r\nif (not GetBoolean(player, \"firelit\")) {\r\n  MakeExitVisible (firetrue)\r\n}\r\nif (not Got(hunting bow)) {\r\n  MakeExitVisible (gotwood)\r\n}\r\n```\r\nWhile the script for the room would just be:\r\n```\r\nstop sound\r\nif (GetBoolean(player, \"firelit\")) {\r\n  play sound (\"firecrackling3.mp3\", false, true)\r\n  msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\r\n}\r\nelse {\r\n  msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I would put the bit in the <code>enter</code> script into the description with the rest, to keep it together. That also needs an <code>else</code> to hide the exit when the food is eaten.</p>\n<p>An alternative approach would be to have a function that sets all the exits for the current room invisible, and then your code just checks which need to then be made visible</p>\n<pre><code>  stop sound\n  ResetExits\n  MakeExitVisible (outside)\n  if (GetBoolean(player, \"firelit\")) {\n    play sound (\"firecrackling3.mp3\", false, true)\n    msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\n  }\n  else {\n    msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\n    if (Got(fuel)) {\n      MakeExitVisible (firetrue)\n    }\n  }\n  if (Got(fuel) and not Got(hunting bow)) {\n    MakeExitVisible (gotwood)\n  }\n  if (GetBoolean(player, \"gotfood\")) {\n    MakeExitVisible (havefood)\n  }\n  if (GetBoolean(player, \"gotfood\")) {\n    MakeExitVisible (explore)\n  }\n</code></pre>\n<p>The ResetExits function looks like this:</p>\n<pre><code>foreach (exit, AllExits()) {\n  if (exit.parent = room) {\n    exit.visible = false\n  }\n}\n</code></pre>\n<p>You would have to remember to set visible all permanent exits, like the one to outside. However, I think you would find it easier to follow the code without the (majority or) <code>else</code> blocks.</p>\n<p>A second alternative, which would require some re-thinking, would be to set the visibility when the action is performed. For example, when the firewood is picked up, you set the \"Start fire\" exit to be visible back in the shack, rather than in the room description.</p>\n<p>The script for the gathering wood exit would then be this:</p>\n<pre><code>msg (\"Wood collected.\")\nMoveObject (wood, player)\nif (not GetBoolean(player, \"firelit\")) {\n  MakeExitVisible (firetrue)\n}\nif (not Got(hunting bow)) {\n  MakeExitVisible (gotwood)\n}\n</code></pre>\n<p>While the script for the room would just be:</p>\n<pre><code>stop sound\nif (GetBoolean(player, \"firelit\")) {\n  play sound (\"firecrackling3.mp3\", false, true)\n  msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\n}\nelse {\n  msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\n}\n</code></pre>\n\n",
      "PostDate": "2016-11-02T08:23:47.3188892Z",
      "LastEditDate": null
    },
    {
      "PostId": "b01feac3-2382-452a-9e38-58fb6bb75acb",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you, TP. I like the idea of not having to worry about all the ELSE blocks.\r\n\r\nWhere would that ResetExits function go, in my Game's Start Script?\r\n\r\nAlso, how would I over-ride that code so that the Shack and Outside exits remain permanently visible?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, TP. I like the idea of not having to worry about all the ELSE blocks.</p>\n<p>Where would that ResetExits function go, in my Game's Start Script?</p>\n<p>Also, how would I over-ride that code so that the Shack and Outside exits remain permanently visible?</p>\n\n",
      "PostDate": "2016-11-02T15:56:04.2457469Z",
      "LastEditDate": null
    },
    {
      "PostId": "a320a864-3ea4-432d-8850-f35353b9d776",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You put `ResetExits` at the start of the description (second line in the code above), then set the ones that are \"permanently\" visible to be visible (third line above), and then go though the rest and see if the conditions are right for them.",
      "EditableFormat": "markdown",
      "HTML": "<p>You put <code>ResetExits</code> at the start of the description (second line in the code above), then set the ones that are \"permanently\" visible to be visible (third line above), and then go though the rest and see if the conditions are right for them.</p>\n\n",
      "PostDate": "2016-11-02T17:57:19.072758Z",
      "LastEditDate": null
    },
    {
      "PostId": "576a9ddb-d11f-4221-9535-ac2298670b89",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I know I test patience around here with my inability to understand, but do you mean I just put **ResetExits** at the start of the description, or that I put the actual function code? And at the start of which description? All of them or just the **Shack**?",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I know I test patience around here with my inability to understand, but do you mean I just put <strong>ResetExits</strong> at the start of the description, or that I put the actual function code? And at the start of which description? All of them or just the <strong>Shack</strong>?</p>\n\n",
      "PostDate": "2016-11-02T19:00:42.734009Z",
      "LastEditDate": "2016-11-02T19:01:48.5873535Z"
    },
    {
      "PostId": "985521e2-9ac6-4f1f-8909-c7b0a5299233",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You need to create the function first. Click on Functions at the left, then on Add, then type in ResetExits. Then paste in the code.\r\n\r\nThen you can just put ResetExits at the start of the description. Do that every description. First turn off the sound it nercessary, then ResetExits, then show the message, then the always on exits, and then the `if`s for the optional exits.  Here is the code again with comments to make that clearer, but the general format should work in every room:\r\n```\r\n   stop sound\r\n\r\n  // set all exits invisible\r\n  ResetExits\r\n\r\n  // Do the message\r\n  if (GetBoolean(player, \"firelit\")) {\r\n    play sound (\"firecrackling3.mp3\", false, true)\r\n    msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\r\n  }\r\n  else {\r\n    msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\r\n  }\r\n\r\n  // This one should always be visible\r\n  MakeExitVisible (outside)\r\n\r\n  //  The light fire exit\r\n  if (Got(fuel) and not GetBoolean(player, \"firelit\")) {\r\n    MakeExitVisible (firetrue)\r\n  }\r\n\r\n  // The make bow exit\r\n  if (Got(fuel) and not Got(hunting bow)) {\r\n    MakeExitVisible (gotwood)\r\n  }\r\n\r\n  // The eat food exit\r\n  if (GetBoolean(player, \"gotfood\")) {\r\n    MakeExitVisible (havefood)\r\n  }\r\n\r\n  // The explore exit\r\n  if (GetBoolean(player, \"gotfood\")) {\r\n    MakeExitVisible (explore)\r\n  }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You need to create the function first. Click on Functions at the left, then on Add, then type in ResetExits. Then paste in the code.</p>\n<p>Then you can just put ResetExits at the start of the description. Do that every description. First turn off the sound it nercessary, then ResetExits, then show the message, then the always on exits, and then the <code>if</code>s for the optional exits.  Here is the code again with comments to make that clearer, but the general format should work in every room:</p>\n<pre><code>   stop sound\n\n  // set all exits invisible\n  ResetExits\n\n  // Do the message\n  if (GetBoolean(player, \"firelit\")) {\n    play sound (\"firecrackling3.mp3\", false, true)\n    msg (\"Inside a shack. Another winter is drawing in. Room is warm.\")\n  }\n  else {\n    msg (\"Inside a shack. Another winter is drawing in. Room is freezing.\")\n  }\n\n  // This one should always be visible\n  MakeExitVisible (outside)\n\n  //  The light fire exit\n  if (Got(fuel) and not GetBoolean(player, \"firelit\")) {\n    MakeExitVisible (firetrue)\n  }\n\n  // The make bow exit\n  if (Got(fuel) and not Got(hunting bow)) {\n    MakeExitVisible (gotwood)\n  }\n\n  // The eat food exit\n  if (GetBoolean(player, \"gotfood\")) {\n    MakeExitVisible (havefood)\n  }\n\n  // The explore exit\n  if (GetBoolean(player, \"gotfood\")) {\n    MakeExitVisible (explore)\n  }\n</code></pre>\n\n",
      "PostDate": "2016-11-02T19:44:21.4735818Z",
      "LastEditDate": null
    },
    {
      "PostId": "0929e34f-2906-45de-8fa6-0e5a967f9478",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for your patience. I'll try and implement it now.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for your patience. I'll try and implement it now.</p>\n\n",
      "PostDate": "2016-11-02T20:29:20.1259948Z",
      "LastEditDate": null
    }
  ]
}
