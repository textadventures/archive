{
  "Topic": {
    "TopicId": "5643",
    "ForumId": "10",
    "Title": "Re: Ocean 23",
    "LastUpdated": "2015-11-23T14:27:35+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "38817",
      "UserId": 0,
      "Username": "Vega",
      "UserAvatar": null,
      "UserGravatar": "d076b6ac253d30ea1a2e408dec7e770e",
      "EditableText": "Hey All,\n\nI'm working on a text-based adventure game. My game is a resource gathering game. \n\nI've just begun to read all the documentation. I do not know any Javascript, I am learning some basic Python atm. \n\nMy map is an ocean (5x5 tiles of rooms), and the character is a boat; which moves from tile to tile to catch fish. \n\nThe fish need to swim from room to room. The boat will find the fish throughout the map, and use another object to catch them (harpoon, net, rod).\n\nHow can I make the fish?\n\nCan anyone explain it? \n\nOr direct me to a specific tutorial?\n\nI've tried using the UI script options and I cannot find any options that will create a group of fish, and have them move around, and have them be caught in some numbers by the boat (player). \n\nThanks\n\nps. Here are some pics",
      "EditableFormat": "bbcode",
      "HTML": "Hey All,<br/><br/>I'm working on a text-based adventure game. My game is a resource gathering game. <br/><br/>I've just begun to read all the documentation. I do not know any Javascript, I am learning some basic Python atm. <br/><br/>My map is an ocean (5x5 tiles of rooms), and the character is a boat; which moves from tile to tile to catch fish. <br/><br/>The fish need to swim from room to room. The boat will find the fish throughout the map, and use another object to catch them (harpoon, net, rod).<br/><br/>How can I make the fish?<br/><br/>Can anyone explain it? <br/><br/>Or direct me to a specific tutorial?<br/><br/>I've tried using the UI script options and I cannot find any options that will create a group of fish, and have them move around, and have them be caught in some numbers by the boat (player). <br/><br/>Thanks<br/><br/>ps. Here are some pics<div><img src=\"/forumattachments/1384/3.png\" alt=\"3.png\" /></div>",
      "PostDate": "2015-11-23T09:36:16+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38818",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'd look into the 4 Randomization Functions (for moving your Objects~fish room to room), and also maybe Jay's (Jaynabonne's) Map~Grid generation too:\n\nthe general (very basic) idea is to use the special 'changed' Script (with the 'parent' Object Attribute of the 'player' Player Object) and a Randomization Function for its scripting, to randomly move~set the 'fishX' Objects to different rooms each time the 'player' Player Object moves to a different room.\n\n-------\n\nquest's structure is similar to Python's, but quest's scripting is more similar to C++ and/or Java, but it shouldn't be too hard to pick it up, if you're decent at coding with Python, and even if you're not good with Python's scripting, it's still pretty &quot;easy&quot; to pick up. And the &quot;physically existing things&quot; in quest's code, use XML, which is at least somewhat akin to HTML (web languages).\n\nfor example:\n\nXML: the &quot;physically existing things&quot; in quest's code: what I call the &quot;creation&quot; tag lines~blocks:\n\nnotice the tag usage:\n\nhorizontal tag code lines:\n\n&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;'\n\nvertical tag code blocks:\n\n&lt;xxx&gt;\n// xxx\n&lt;/xxx&gt;\n\n[code:1xdbk0qf]&lt;asl version=&quot;550&quot;&gt;\n  // your entire game code~contents must go between~inside of the 'asl' creation tag block&#46;\n&lt;/asl&gt;\n\n// ------------\n\n&lt;asl version=&quot;550&quot;&gt;\n\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt; // default library file added~included, to create the quest engine\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt; // default library file (actually this is a collection of lots of &quot;Core&quot; files) added~included, to create the quest engine\n  // you can create your own library files (simple extra code such as a single Object, to an entire game engine), to add~include them into your games\n  // or you can use other's publically available library files\n\n  &lt;game name=&quot;blah&quot;&gt;\n    // the 'game' Game Object, is a special Object, which holds game-wide and unique settings and etc-like stuff&#46; This corresponds to the 'game' Game Object in the GUI~Editor's left side's &quot;tree of stuff (Elements)&quot; and its various Attributes~settings~options in its various Tabs (on the right side)&#46;\n  &lt;/game&gt;\n  \n  &lt;Object name=&quot;blah&quot;&gt;\n    // contents (Attributes and~or other Objects&#46; The Script Attributes are the same as the GUI~Editor's Verbs)\n  &lt;/object&gt;\n  \n  &lt;function name=&quot;blah&quot;&gt;\n    // contents&#58; scriptings (scripts, in the GUI~Editor&#58; Functions -&gt; Add -&gt; add new script -&gt; etc)\n  &lt;/function&gt;\n  \n  &lt;command name=&quot;blah&quot;&gt;\n    // contents&#58; Attributes and scriptings\n  &lt;/command&gt;\n  \n  &lt;turnscript name=&quot;blah&quot;&gt;\n    // contents&#58; Attributes and scriptings\n  &lt;/turnscript&gt;\n  \n  &lt;type name=&quot;blah&quot;&gt;\n    \n  &lt;/type&gt;\n  \n  // etc etc etc Elements\n  \n&lt;/asl&gt;\n\n// ----------------------\n\n// Attributes&#58;\n\n&lt;attr name=&quot;blah1&quot; type=&quot;blah2&quot;&gt;blah3&lt;/attr&gt;\n\nAttribute Types (blah2)&#58; int (integer), string, double (decimal number), boolean (true/false), script, object, lists, dictionaries, etc\n\nAttribute Value (blah3)&#58; whatever, but depends upon Attribute Type, of course\n\n// ----------------\n\n&lt;object name=&quot;player&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;\n  &lt;attr name=&quot;species&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;\n  &lt;attr name=&quot;race&quot; type=&quot;string&quot;&gt;european&lt;/attr&gt;\n  &lt;attr name=&quot;class&quot; type=&quot;string&quot;&gt;warrior&lt;/attr&gt;\n  &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;attr name=&quot;right_hand&quot; type=&quot;object&quot;&gt;sword&lt;/attr&gt;\n  &lt;attr name=&quot;left_hand&quot; type=&quot;object&quot;&gt;shield&lt;/attr&gt;\n  &lt;attr name=&quot;condition&quot; type=&quot;simplestringlist&quot;&gt;normal;alive&lt;/attr&gt;\n  &lt;attr name=&quot;locomotion&quot; type=&quot;simplestringlist&quot;&gt;bipedal&lt;/attr&gt;\n  &lt;attr name=&quot;action_state&quot; type=&quot;simplestringlist&quot;&gt;sitting;typing&lt;/attr&gt;\n  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;sword&quot;&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;shield&quot;&gt;\n&lt;/object&gt;\n\n[/code:1xdbk0qf]\n\n------------\n\nquest has 3 Types of VARIABLES:\n\nVARIABLES:\n-&gt; Variables: local VARIABLES (can only be used within where they exist), no &quot;attachment&quot; (dot~period) to Objects. Example: strength = 100\n-&gt; Attributes: global VARIABLES (so long as the Object exists, of course. Can be used anwhere. Example: player.strength = 100)\n-&gt; Parameters: variables used with Functions, Commands, and etc Elements~stuff.\n\n----------\n\nand the scripting is pretty simple:\n\n(notice the LACK of the tags)\n\nUse Attributes as your VARIABLES, as Attributes are global VARIABLES, you can use them anywhere, so long as the Object that holds them exists, of course, as Attributes are the basis for your scripting:\n\nObject_name.Attribute_name = Value_or_Expression\n\nexamples:\n\nplayer.alias = &quot;HK&quot;\norc.alias = &quot;gorak&quot;\nplayer.strength = 100\nplayer.strength = 0\nplayer.strength = player.strength + 5\nplayer.undead = false\nplayer.undead = true\nplayer.right_hand = sword\nplayer.parent = room_1\nplayer.parent = room_9\ntown.population = 3000\ngame.state = 0\ngame.state = 1\ngame.state = &quot;0&quot;\nplayer.state = &quot;1&quot;\n\nplayer.condition = split (&quot;poisoned;petrified&quot;, &quot;;&quot;)\nlist remove (player.condition, &quot;poisoned&quot;)\nlist remove (player.condition, &quot;petrified&quot;)\nlist add (player.condition, &quot;normal&quot;)\n\nplayer.damage = (player.sword.damage + player.sword.damage * player.strength / 100) - (orc.cuirass.resistance + orc.cuirass.resistance * orc.endurance / 100)\n\n[code:1xdbk0qf]// an 'orc' Object's 'fight' Verb's scripting, for simple quick incomplete example\n\nif (orc&#46;dead = false)\n{\n\torc&#46;current_life = orc&#46;current_life - player&#46;damage\n\tmsg (&quot;You attack and damage the orc&#46;&quot;)\n\t\n\tif (orc&#46;current_life &lt;= 0)\n\t{\n\t\torc&#46;dead = true\n\t\tmsg (&quot;You killed the orc&#46;&quot;)\n\t}\n\telse\n\t{\n\t\tplayer&#46;current_life = player&#46;current_life - orc&#46;damage\n\t\tmsg (&quot;The orc attacks and damages you&#46;&quot;)\n\t\t\n\t\tif (player&#46;current_life &lt;= 0)\n\t\t{\n\t\t\tmsg (&quot;You were killed by the orc&#46;&quot;)\n\t\t\tmsg (&quot;GAME OVER&quot;)\n\t\t\tfinish\n\t\t}\n\t}\n}\nelse\n{\n\tmsg (&quot;The orc is already dead, silly&#46;&quot;)\n}[/code:1xdbk0qf]\n\n---------\n\nif you need the links (if you can't find to what I'm refering to above), let me know.",
      "EditableFormat": "bbcode",
      "HTML": "I'd look into the 4 Randomization Functions (for moving your Objects~fish room to room), and also maybe Jay's (Jaynabonne's) Map~Grid generation too:<br/><br/>the general (very basic) idea is to use the special 'changed' Script (with the 'parent' Object Attribute of the 'player' Player Object) and a Randomization Function for its scripting, to randomly move~set the 'fishX' Objects to different rooms each time the 'player' Player Object moves to a different room.<br/><br/>-------<br/><br/>quest's structure is similar to Python's, but quest's scripting is more similar to C++ and/or Java, but it shouldn't be too hard to pick it up, if you're decent at coding with Python, and even if you're not good with Python's scripting, it's still pretty &quot;easy&quot; to pick up. And the &quot;physically existing things&quot; in quest's code, use XML, which is at least somewhat akin to HTML (web languages).<br/><br/>for example:<br/><br/>XML: the &quot;physically existing things&quot; in quest's code: what I call the &quot;creation&quot; tag lines~blocks:<br/><br/>notice the tag usage:<br/><br/>horizontal tag code lines:<br/><br/>&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;'<br/><br/>vertical tag code blocks:<br/><br/>&lt;xxx&gt;<br/>// xxx<br/>&lt;/xxx&gt;<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  // your entire game code~contents must go between~inside of the 'asl' creation tag block&#46;<br/>&lt;/asl&gt;<br/><br/>// ------------<br/><br/>&lt;asl version=&quot;550&quot;&gt;<br/><br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt; // default library file added~included, to create the quest engine<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt; // default library file (actually this is a collection of lots of &quot;Core&quot; files) added~included, to create the quest engine<br/>  // you can create your own library files (simple extra code such as a single Object, to an entire game engine), to add~include them into your games<br/>  // or you can use other's publically available library files<br/><br/>  &lt;game name=&quot;blah&quot;&gt;<br/>    // the 'game' Game Object, is a special Object, which holds game-wide and unique settings and etc-like stuff&#46; This corresponds to the 'game' Game Object in the GUI~Editor's left side's &quot;tree of stuff (Elements)&quot; and its various Attributes~settings~options in its various Tabs (on the right side)&#46;<br/>  &lt;/game&gt;<br/>  <br/>  &lt;Object name=&quot;blah&quot;&gt;<br/>    // contents (Attributes and~or other Objects&#46; The Script Attributes are the same as the GUI~Editor's Verbs)<br/>  &lt;/object&gt;<br/>  <br/>  &lt;function name=&quot;blah&quot;&gt;<br/>    // contents&#58; scriptings (scripts, in the GUI~Editor&#58; Functions -&gt; Add -&gt; add new script -&gt; etc)<br/>  &lt;/function&gt;<br/>  <br/>  &lt;command name=&quot;blah&quot;&gt;<br/>    // contents&#58; Attributes and scriptings<br/>  &lt;/command&gt;<br/>  <br/>  &lt;turnscript name=&quot;blah&quot;&gt;<br/>    // contents&#58; Attributes and scriptings<br/>  &lt;/turnscript&gt;<br/>  <br/>  &lt;type name=&quot;blah&quot;&gt;<br/>    <br/>  &lt;/type&gt;<br/>  <br/>  // etc etc etc Elements<br/>  <br/>&lt;/asl&gt;<br/><br/>// ----------------------<br/><br/>// Attributes&#58;<br/><br/>&lt;attr name=&quot;blah1&quot; type=&quot;blah2&quot;&gt;blah3&lt;/attr&gt;<br/><br/>Attribute Types (blah2)&#58; int (integer), string, double (decimal number), boolean (true/false), script, object, lists, dictionaries, etc<br/><br/>Attribute Value (blah3)&#58; whatever, but depends upon Attribute Type, of course<br/><br/>// ----------------<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;<br/>  &lt;attr name=&quot;species&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;<br/>  &lt;attr name=&quot;race&quot; type=&quot;string&quot;&gt;european&lt;/attr&gt;<br/>  &lt;attr name=&quot;class&quot; type=&quot;string&quot;&gt;warrior&lt;/attr&gt;<br/>  &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;attr name=&quot;right_hand&quot; type=&quot;object&quot;&gt;sword&lt;/attr&gt;<br/>  &lt;attr name=&quot;left_hand&quot; type=&quot;object&quot;&gt;shield&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition&quot; type=&quot;simplestringlist&quot;&gt;normal;alive&lt;/attr&gt;<br/>  &lt;attr name=&quot;locomotion&quot; type=&quot;simplestringlist&quot;&gt;bipedal&lt;/attr&gt;<br/>  &lt;attr name=&quot;action_state&quot; type=&quot;simplestringlist&quot;&gt;sitting;typing&lt;/attr&gt;<br/>  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;sword&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;shield&quot;&gt;<br/>&lt;/object&gt;<br/><br/></code></pre><br/><br/>------------<br/><br/>quest has 3 Types of VARIABLES:<br/><br/>VARIABLES:<br/>-&gt; Variables: local VARIABLES (can only be used within where they exist), no &quot;attachment&quot; (dot~period) to Objects. Example: strength = 100<br/>-&gt; Attributes: global VARIABLES (so long as the Object exists, of course. Can be used anwhere. Example: player.strength = 100)<br/>-&gt; Parameters: variables used with Functions, Commands, and etc Elements~stuff.<br/><br/>----------<br/><br/>and the scripting is pretty simple:<br/><br/>(notice the LACK of the tags)<br/><br/>Use Attributes as your VARIABLES, as Attributes are global VARIABLES, you can use them anywhere, so long as the Object that holds them exists, of course, as Attributes are the basis for your scripting:<br/><br/>Object_name.Attribute_name = Value_or_Expression<br/><br/>examples:<br/><br/>player.alias = &quot;HK&quot;<br/>orc.alias = &quot;gorak&quot;<br/>player.strength = 100<br/>player.strength = 0<br/>player.strength = player.strength + 5<br/>player.undead = false<br/>player.undead = true<br/>player.right_hand = sword<br/>player.parent = room_1<br/>player.parent = room_9<br/>town.population = 3000<br/>game.state = 0<br/>game.state = 1<br/>game.state = &quot;0&quot;<br/>player.state = &quot;1&quot;<br/><br/>player.condition = split (&quot;poisoned;petrified&quot;, &quot;;&quot;)<br/>list remove (player.condition, &quot;poisoned&quot;)<br/>list remove (player.condition, &quot;petrified&quot;)<br/>list add (player.condition, &quot;normal&quot;)<br/><br/>player.damage = (player.sword.damage + player.sword.damage * player.strength / 100) - (orc.cuirass.resistance + orc.cuirass.resistance * orc.endurance / 100)<br/><br/><pre><code>// an 'orc' Object's 'fight' Verb's scripting, for simple quick incomplete example<br/><br/>if (orc&#46;dead = false)<br/>{<br/>\torc&#46;current_life = orc&#46;current_life - player&#46;damage<br/>\tmsg (&quot;You attack and damage the orc&#46;&quot;)<br/>\t<br/>\tif (orc&#46;current_life &lt;= 0)<br/>\t{<br/>\t\torc&#46;dead = true<br/>\t\tmsg (&quot;You killed the orc&#46;&quot;)<br/>\t}<br/>\telse<br/>\t{<br/>\t\tplayer&#46;current_life = player&#46;current_life - orc&#46;damage<br/>\t\tmsg (&quot;The orc attacks and damages you&#46;&quot;)<br/>\t\t<br/>\t\tif (player&#46;current_life &lt;= 0)<br/>\t\t{<br/>\t\t\tmsg (&quot;You were killed by the orc&#46;&quot;)<br/>\t\t\tmsg (&quot;GAME OVER&quot;)<br/>\t\t\tfinish<br/>\t\t}<br/>\t}<br/>}<br/>else<br/>{<br/>\tmsg (&quot;The orc is already dead, silly&#46;&quot;)<br/>}</code></pre><br/><br/>---------<br/><br/>if you need the links (if you can't find to what I'm refering to above), let me know.",
      "PostDate": "2015-11-23T10:16:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38822",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote=&quot;Vega&quot;:p0zna999]I'm working on a text-based adventure game. My game is a resource gathering game. \n\nI've just begun to read all the documentation. I do not know any Javascript, I am learning some basic Python atm. \n\nMy map is an ocean (5x5 tiles of rooms), and the character is a boat; which moves from tile to tile to catch fish. \n\nThe fish need to swim from room to room. The boat will find the fish throughout the map, and use another object to catch them (harpoon, net, rod).\n\nHow can I make the fish?\n\nCan anyone explain it? \n\nOr direct me to a specific tutorial?\n\nI've tried using the UI script options and I cannot find any options that will create a group of fish, and have them move around, and have them be caught in some numbers by the boat (player).[/quote:p0zna999]\nI am not aware of anyone doing anything like this so well done on the originality, but do not expect to find any tutorials covering it.\n\nWith regards to the fish moving, I would use the ScopeExitsForRoom to get a list of exits, pick one at random, and move them.\n[code:p0zna999]exits = ScopeExitsForRoom(fish&#46;parent)\nindex = GetRandomInt(0, ListCount(exits) - 1)\nexit = ObjectListItem(exits, index)\nfish&#46;parent = exit&#46;to[/code:p0zna999]\n\nIf you want to display the fish on a map of the ocean, that is a rather bigger problem, which depends on what you want to see and how good your JavaScript and CSS are. I would have two images, one for the map, one for the fish, and change the position of the fish image. This might get you started:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5566#p38372\">viewtopic.php?f=18&amp;t=5566#p38372</a><!-- l -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Vega wrote:</cite>I'm working on a text-based adventure game. My game is a resource gathering game. <br/><br/>I've just begun to read all the documentation. I do not know any Javascript, I am learning some basic Python atm. <br/><br/>My map is an ocean (5x5 tiles of rooms), and the character is a boat; which moves from tile to tile to catch fish. <br/><br/>The fish need to swim from room to room. The boat will find the fish throughout the map, and use another object to catch them (harpoon, net, rod).<br/><br/>How can I make the fish?<br/><br/>Can anyone explain it? <br/><br/>Or direct me to a specific tutorial?<br/><br/>I've tried using the UI script options and I cannot find any options that will create a group of fish, and have them move around, and have them be caught in some numbers by the boat (player).</blockquote><br/>I am not aware of anyone doing anything like this so well done on the originality, but do not expect to find any tutorials covering it.<br/><br/>With regards to the fish moving, I would use the ScopeExitsForRoom to get a list of exits, pick one at random, and move them.<br/><pre><code>exits = ScopeExitsForRoom(fish&#46;parent)<br/>index = GetRandomInt(0, ListCount(exits) - 1)<br/>exit = ObjectListItem(exits, index)<br/>fish&#46;parent = exit&#46;to</code></pre><br/><br/>If you want to display the fish on a map of the ocean, that is a rather bigger problem, which depends on what you want to see and how good your JavaScript and CSS are. I would have two images, one for the map, one for the fish, and change the position of the fish image. This might get you started:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=5566#p38372\">viewtopic.php?f=18&amp;t=5566#p38372</a><!-- l -->",
      "PostDate": "2015-11-23T14:27:35+00:00",
      "LastEditDate": null
    }
  ]
}