{
  "Topic": {
    "TopicId": "br2wcmnfue_ar142pugg4a",
    "ForumId": "10",
    "Title": "2 Status Attributes on same line",
    "LastUpdated": "2023-11-09T19:34:36.5081617Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7ffad8fd-02a4-4f0f-b7dd-5d76ce309b17",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If someone wants to put two status attributes on the same line (like player. Alias followed by player. Score), how is that done?",
      "EditableFormat": "markdown",
      "HTML": "<p>If someone wants to put two status attributes on the same line (like player. Alias followed by player. Score), how is that done?</p>\n\n",
      "PostDate": "2023-11-09T19:34:36.5081617Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2ab4f0db-31f4-4463-8b87-7c0ee59037f3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Usually by making an attribute which contains the other two connected together; and using a changescript to update it. For example, you could set both the player's `changedalias` and `changedscore` script attributes to be:\r\n```\r\nthis.aliasandscore = this.alias + \" \" + this.score\r\n```\r\nAnd then add the new `aliasandscore` attribute as a status attribute.",
      "EditableFormat": "markdown",
      "HTML": "<p>Usually by making an attribute which contains the other two connected together; and using a changescript to update it. For example, you could set both the player's <code>changedalias</code> and <code>changedscore</code> script attributes to be:</p>\n<pre><code>this.aliasandscore = this.alias + \" \" + this.score\n</code></pre>\n<p>And then add the new <code>aliasandscore</code> attribute as a status attribute.</p>\n\n",
      "PostDate": "2023-11-10T02:39:46.9592797Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3ca1d23d-6e32-4c02-944f-89920e85190f",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Excellent! And so easy as that! Thank you.\r\n\r\n(okay, so I tried it, but I made some mistake.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Excellent! And so easy as that! Thank you.</p>\n<p>(okay, so I tried it, but I made some mistake.)</p>\n\n",
      "PostDate": "2023-11-10T14:56:08.20191Z",
      "LastEditDate": "2023-11-10T15:20:08.2984193Z",
      "link": null
    },
    {
      "PostId": "a2c89e92-a8af-46dc-97ee-e8033efb9845",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\r\nI pasted the code into a player script attribute called ```aliasandscore```, changed every ```this``` to ```player```, then, made ```aliasandscore``` a status attribute that would display  only ```!``` .\r\nError running script: Error compiling expression 'Replace(format, \"!\", value)': FunctionCallElement: Could find not function 'Replace(String, String, LazyLoadScript)'",
      "EditableFormat": "markdown",
      "HTML": "<p>I pasted the code into a player script attribute called <code>aliasandscore</code>, changed every <code>this</code> to <code>player</code>, then, made <code>aliasandscore</code> a status attribute that would display  only <code>!</code> .<br>\nError running script: Error compiling expression 'Replace(format, \"!\", value)': FunctionCallElement: Could find not function 'Replace(String, String, LazyLoadScript)'</p>\n\n",
      "PostDate": "2023-11-10T15:23:54.5857379Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b9dee54-6b9f-448f-9403-d8dec06be6e0",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know.</p>\n\n",
      "PostDate": "2023-11-10T15:37:25.8532123Z",
      "LastEditDate": "2023-11-10T15:39:23.2275052Z",
      "link": null
    },
    {
      "PostId": "b8b1e1da-4383-4fa3-86da-7047c690116c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I said:\r\n> set both the player's `changedalias` and `changedscore` script attributes \r\n\r\nyou said:\r\n> I pasted the code into a player script attribute called `aliasandscore`\r\n\r\nThose aren't the same names. The Quest engine will automatically run a script attribute named `changedalias` when the player's `alias` changes; and run an attribute named `changedscore` when their `score` attribute changes.\r\n\r\nThe `aliasandscore` attribute is the one that these scripts set; so you can use it as a status attribute.\r\n\r\nAlso:\r\n>  changed every `this` to `player`, \r\n\r\nThat won't break anything, but it's also not necessary. `this` is a reserved word meaning \"the object that has this script attribute\". I tend to use it, because it makes the script more resilient and less likely to be broken by future changes (guarding against hard-to-understand errors later in development)\r\n\r\nGenerally, if I'm posting bits of code, I'll use a different colour to highlight any names you need to change :)",
      "EditableFormat": "markdown",
      "HTML": "<p>I said:</p>\n<blockquote>\n<p>set both the player's <code>changedalias</code> and <code>changedscore</code> script attributes</p>\n</blockquote>\n<p>you said:</p>\n<blockquote>\n<p>I pasted the code into a player script attribute called <code>aliasandscore</code></p>\n</blockquote>\n<p>Those aren't the same names. The Quest engine will automatically run a script attribute named <code>changedalias</code> when the player's <code>alias</code> changes; and run an attribute named <code>changedscore</code> when their <code>score</code> attribute changes.</p>\n<p>The <code>aliasandscore</code> attribute is the one that these scripts set; so you can use it as a status attribute.</p>\n<p>Also:</p>\n<blockquote>\n<p>changed every <code>this</code> to <code>player</code>,</p>\n</blockquote>\n<p>That won't break anything, but it's also not necessary. <code>this</code> is a reserved word meaning \"the object that has this script attribute\". I tend to use it, because it makes the script more resilient and less likely to be broken by future changes (guarding against hard-to-understand errors later in development)</p>\n<p>Generally, if I'm posting bits of code, I'll use a different colour to highlight any names you need to change :)</p>\n\n",
      "PostDate": "2023-11-10T18:04:37.4119988Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a11c1d9-04dc-45c8-bc12-9322896e5173",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel, this looks very similar to an error I'm working on in Pixie's combatlib.   He's got something called a multi-attack monster.  You drop several objects inside the monster, and his library scripts are meant to randomly pick one of the objects and then run the attack script using those attributes.\r\n\r\nThe error that comes back when the second attack comes in is like this:\r\n\r\nError running script: Error compiling expression 'Replace(this.attackdesc, \"%\", CapFirst(GetDisplayAlias (owner))) + \" and misses.\"': FunctionCallElement: Could find not function 'Replace(Object, String, String)'\r\n\r\nWhich looks very like what Jennifer Wren's error is saying.... but reading this combined with your discussion here gives me an idea!\r\n\r\nWhat if it's missing a required attribute?    \"attackdesc\" isn't filled out on that second attack.... let me check... \r\n\r\nYes!  That was it!  You solved one of my problems while solving Ms. Jennifer's!  all the library wants is an addition to the editor here \"Required for multi-attack types\" and probably also to be also on the appropriate combat tabs in the editor instead of only the \"description\" tab.  That way when it is a monster attack, it's right with all the other fields that define it.\r\n\r\nThanks Mr. Angel.  You're a hero in this forum!  And also thanks Jennifer for your part in the inspiration and encouragement.  It's encouraging to also see other folks learning as they try to build games!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel, this looks very similar to an error I'm working on in Pixie's combatlib.   He's got something called a multi-attack monster.  You drop several objects inside the monster, and his library scripts are meant to randomly pick one of the objects and then run the attack script using those attributes.</p>\n<p>The error that comes back when the second attack comes in is like this:</p>\n<p>Error running script: Error compiling expression 'Replace(this.attackdesc, \"%\", CapFirst(GetDisplayAlias (owner))) + \" and misses.\"': FunctionCallElement: Could find not function 'Replace(Object, String, String)'</p>\n<p>Which looks very like what Jennifer Wren's error is saying.... but reading this combined with your discussion here gives me an idea!</p>\n<p>What if it's missing a required attribute?    \"attackdesc\" isn't filled out on that second attack.... let me check...</p>\n<p>Yes!  That was it!  You solved one of my problems while solving Ms. Jennifer's!  all the library wants is an addition to the editor here \"Required for multi-attack types\" and probably also to be also on the appropriate combat tabs in the editor instead of only the \"description\" tab.  That way when it is a monster attack, it's right with all the other fields that define it.</p>\n<p>Thanks Mr. Angel.  You're a hero in this forum!  And also thanks Jennifer for your part in the inspiration and encouragement.  It's encouraging to also see other folks learning as they try to build games!</p>\n\n",
      "PostDate": "2023-11-10T21:11:34.7876979Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c505bdd1-28c0-435b-9a75-f80e0df92dc3",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I am a little bit confused. Can I make two identical player attributes, name one changealias and one changescore, set both to script, paste the script for this.aliasandscore into both, alike?\r\nThen, if I do that, what would the \"aliasandscore\" attribute be?\r\nAnd how would I express that in the status attribute? With just a ! ? Or with another copy of the same script? Or something else?\r\nI have never had to create a changealias or changescore attribute, before. I have never created a changeattribute of any kind. I'm sorry if I am unusually confused. I do really want to know this and use it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I am a little bit confused. Can I make two identical player attributes, name one changealias and one changescore, set both to script, paste the script for this.aliasandscore into both, alike?<br>\nThen, if I do that, what would the \"aliasandscore\" attribute be?<br>\nAnd how would I express that in the status attribute? With just a ! ? Or with another copy of the same script? Or something else?<br>\nI have never had to create a changealias or changescore attribute, before. I have never created a changeattribute of any kind. I'm sorry if I am unusually confused. I do really want to know this and use it.</p>\n\n",
      "PostDate": "2023-11-11T02:02:25.2560583Z",
      "LastEditDate": "2023-11-11T02:10:54.9041236Z",
      "link": null
    },
    {
      "PostId": "01931b81-de73-4894-a6f6-c41cc37df460",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, okay, I think I have it working. Amazing!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, okay, I think I have it working. Amazing!!!</p>\n\n",
      "PostDate": "2023-11-11T02:19:33.1693337Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bc3a8fe8-62d5-415f-8b58-b201e2121b14",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm so excited for you Jennifer!\r\n\r\nFor folks who saw this post and were completely confused, I found the place in the documentation that talks about Status Attributes and that also links over to documentation on change scripts at that bottom under \"advanced options\"\r\n\r\nThat means Jennifer is becoming advanced!!\r\n\r\nhttps://docs.textadventures.co.uk/quest/status_attributes.html  \r\n\r\nhttps://docs.textadventures.co.uk/quest/change_scripts.html",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm so excited for you Jennifer!</p>\n<p>For folks who saw this post and were completely confused, I found the place in the documentation that talks about Status Attributes and that also links over to documentation on change scripts at that bottom under \"advanced options\"</p>\n<p>That means Jennifer is becoming advanced!!</p>\n<p>https://docs.textadventures.co.uk/quest/status_attributes.html</p>\n<p>https://docs.textadventures.co.uk/quest/change_scripts.html</p>\n\n",
      "PostDate": "2023-11-11T05:23:46.5333878Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "44417ec0-17d6-473f-8525-8ac583dd05bc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Okay, I am a little bit confused. Can I make two identical player attributes, name one changealias and one changescore, set both to script, paste the script for this.aliasandscore into both, alike?\r\n\r\nYes. That's what I said you should do. But I should point out that the names are `changedalias` and `changedscore`; the word \"changed\" at the start of a script attribute's name has special behaviour.\r\n\r\n> And how would I express that in the status attribute? With just a ! ? Or with another copy of the same script? Or something else?\r\n\r\nLook at what the script does - it creates an attribute whose name is `aliasandscore`, and whose value is the alias and the score joined together.\r\n\r\nSo you can add `aliasandscore` to be a status attribute, treating it like any other attribute. In this case, `!` is probably exactly what you want.\r\n\r\n<hr />\r\n\r\n**Alternate answer:**\r\nIt may be worth noting that a while ago I posted a piece of code in the forums which makes it easier to do complex stuff with status attributes, not needing changescripts at all… could be worth looking up if there's more than one attribute you want to do this kind of stuff with\r\n\r\nIf you include <a href=\"https://textadventures.co.uk/forum/samples/topic/wlg1jitzueaazqtztcvd0a/flexible-status-attributes\">this function</a> in your game, then you could just use `alias + \" \" + score` as an attribute name in the list of status attributes, and it should just work. (The function mentioned in that post replaces one of the ones in the core library, changing the way status attributes are processed)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Okay, I am a little bit confused. Can I make two identical player attributes, name one changealias and one changescore, set both to script, paste the script for this.aliasandscore into both, alike?</p>\n</blockquote>\n<p>Yes. That's what I said you should do. But I should point out that the names are <code>changedalias</code> and <code>changedscore</code>; the word \"changed\" at the start of a script attribute's name has special behaviour.</p>\n<blockquote>\n<p>And how would I express that in the status attribute? With just a ! ? Or with another copy of the same script? Or something else?</p>\n</blockquote>\n<p>Look at what the script does - it creates an attribute whose name is <code>aliasandscore</code>, and whose value is the alias and the score joined together.</p>\n<p>So you can add <code>aliasandscore</code> to be a status attribute, treating it like any other attribute. In this case, <code>!</code> is probably exactly what you want.</p>\n<hr>\n<p><strong>Alternate answer:</strong><br>\nIt may be worth noting that a while ago I posted a piece of code in the forums which makes it easier to do complex stuff with status attributes, not needing changescripts at all… could be worth looking up if there's more than one attribute you want to do this kind of stuff with</p>\n<p>If you include <a href=\"https://textadventures.co.uk/forum/samples/topic/wlg1jitzueaazqtztcvd0a/flexible-status-attributes\">this function</a> in your game, then you could just use <code>alias + \" \" + score</code> as an attribute name in the list of status attributes, and it should just work. (The function mentioned in that post replaces one of the ones in the core library, changing the way status attributes are processed)</p>\n\n",
      "PostDate": "2023-11-11T21:43:47.0804855Z",
      "LastEditDate": "2023-11-11T21:50:59.1830893Z",
      "link": null
    },
    {
      "PostId": "41455f3d-cd08-48ef-b0e7-97377ac5edcf",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thankyou, mrangel, for the link. I will look into that. In the meantime, I was just surprised that it would take creating \"changedscore\", \"changedalias\", and \"aliasandscore\", on top of \"score\" and \"alias\". I was also unsure of needing to paste the same script in three attributes with nothing but name being different in them.  (And I knew there could be something else I had to do with it, but what.)\r\nHowever, I did try it out. Notice I posted that right after the previous reply. And was I ever surprised that it actually worked!\r\nThanks, again. Sorry it took me a while to figure out what you were saying, when it was actually not not in code, but entirely clear, and all of the instructions were right there in front of me. I just didn't believe they were.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thankyou, mrangel, for the link. I will look into that. In the meantime, I was just surprised that it would take creating \"changedscore\", \"changedalias\", and \"aliasandscore\", on top of \"score\" and \"alias\". I was also unsure of needing to paste the same script in three attributes with nothing but name being different in them.  (And I knew there could be something else I had to do with it, but what.)<br>\nHowever, I did try it out. Notice I posted that right after the previous reply. And was I ever surprised that it actually worked!<br>\nThanks, again. Sorry it took me a while to figure out what you were saying, when it was actually not not in code, but entirely clear, and all of the instructions were right there in front of me. I just didn't believe they were.</p>\n\n",
      "PostDate": "2023-11-12T01:17:14.878463Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ece0491d-2d9c-44aa-8b6e-a52fc77cc6fc",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "MrAngel\r\n\r\nThank you for linking to that code.  I must have missed it when you first posted.  You're something of a coding genius, and I don't understand exactly what the code says and does.  But I save your suggestions, and look at them to see if new things I've learned can help me understand.\r\n\r\nI've really only just discovered changedscripts and am seeing how they really work to make status attributes effective when combined with something like calling a function, or checking to see if the attribute is at a certain level.\r\n\r\nYour brilliant code from the other post... does it essentially create a way for people to use status attributes more directly in the functions and scripts instead of using a change script to fire the functions and scripts?\r\n\r\nAre you able to translate your code down to newbie language and say what the different parts of it do?\r\n\r\nThe first line, for example.  It looks like it creates a function and gives it a name, then sets the names for what the expected parameters will be.  Then sets the function to return a string?  \r\n\r\nWith function \"returns,\"  I'm not really sure what goes on.  The parts of the functions I sort of understand are that you tell them to do something with the parameters, or do something on their own.  \r\n\r\nSo it seems to check and if statusAttributes already exists in the next line\r\n\r\nand if it does, it creates a new dictionary named params \r\n\r\nthen uses a foreach which if I understand it correctly reads a list based on understanding what's in all those parenthesis. \r\nand in this case adds whatever it was looking for to the the new dictionary.\r\n\r\nThe second foreach reads the statusAttributes dictionary and finds every \"attri\" for attribute?\r\nand looks like it's adding the attributes to a list with a very complicated name that really must be some sort of parsing behavior?\r\n\r\nSometimes I imagine that thinking out loud in front of a genius can help them see how much we are or are not understanding about what they're saying.  \r\n\r\nThanks for all that you do MrAngel.  You really are a hero in these forums.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>MrAngel</p>\n<p>Thank you for linking to that code.  I must have missed it when you first posted.  You're something of a coding genius, and I don't understand exactly what the code says and does.  But I save your suggestions, and look at them to see if new things I've learned can help me understand.</p>\n<p>I've really only just discovered changedscripts and am seeing how they really work to make status attributes effective when combined with something like calling a function, or checking to see if the attribute is at a certain level.</p>\n<p>Your brilliant code from the other post... does it essentially create a way for people to use status attributes more directly in the functions and scripts instead of using a change script to fire the functions and scripts?</p>\n<p>Are you able to translate your code down to newbie language and say what the different parts of it do?</p>\n<p>The first line, for example.  It looks like it creates a function and gives it a name, then sets the names for what the expected parameters will be.  Then sets the function to return a string?</p>\n<p>With function \"returns,\"  I'm not really sure what goes on.  The parts of the functions I sort of understand are that you tell them to do something with the parameters, or do something on their own.</p>\n<p>So it seems to check and if statusAttributes already exists in the next line</p>\n<p>and if it does, it creates a new dictionary named params</p>\n<p>then uses a foreach which if I understand it correctly reads a list based on understanding what's in all those parenthesis.<br>\nand in this case adds whatever it was looking for to the the new dictionary.</p>\n<p>The second foreach reads the statusAttributes dictionary and finds every \"attri\" for attribute?<br>\nand looks like it's adding the attributes to a list with a very complicated name that really must be some sort of parsing behavior?</p>\n<p>Sometimes I imagine that thinking out loud in front of a genius can help them see how much we are or are not understanding about what they're saying.</p>\n<p>Thanks for all that you do MrAngel.  You really are a hero in these forums.</p>\n\n",
      "PostDate": "2023-11-12T21:57:54.4475861Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4601922f-731f-4a0e-b22c-7f3664619a4b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Are you able to translate your code down to newbie language and say what the different parts of it do?\r\n\r\nThat one is a little tough to explain; because it's designed to replace one of the core functions; so it has to be similar enough to the original that it will work as one part of an existing system.\r\nIt's actually a really inefficient way to solve that problem, but making it work efficiently would also mean making the code much more complex.\r\n\r\nI can come up with a step-by-step explanation if you want; but not sure how newbie friendly I can make it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Are you able to translate your code down to newbie language and say what the different parts of it do?</p>\n</blockquote>\n<p>That one is a little tough to explain; because it's designed to replace one of the core functions; so it has to be similar enough to the original that it will work as one part of an existing system.<br>\nIt's actually a really inefficient way to solve that problem, but making it work efficiently would also mean making the code much more complex.</p>\n<p>I can come up with a step-by-step explanation if you want; but not sure how newbie friendly I can make it.</p>\n\n",
      "PostDate": "2023-11-13T11:30:55.1210672Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "906ddea5-1c67-4802-8909-645f1d5603af",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll take the complicated one, then, and keep it in my \"study\" pile for homework haha\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll take the complicated one, then, and keep it in my \"study\" pile for homework haha</p>\n\n",
      "PostDate": "2023-11-16T04:38:58.5372744Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05a502f8-1b8c-42b1-ac6f-dcb49f49cfea",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Are you able to translate your code down to newbie language and say what the different parts of it do?\r\n\r\nOK :)\r\n\r\nHere's a brief explanation of how that function works…\r\n\r\n<details><summary style=\"text-decoration: underline; cursor: pointer\">Click to expand</summary>\r\n<pre><code>&lt;function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"></pre></code> We're overriding one of the default functions here. AddStatusAttributesForElement is called once for each statusattributes dictionary (of which there are 3 in different places). Its parameters are:\r\n  * `status` - a stringlist, containing the lines of HTML for the status attributes panel. The function is expected to modify this list\r\n  * `element` - the object whose attributes are being examined; this will usually be either `game` or the player object\r\n  * `statusAttribute` - the statusattributes dictionary for that object\r\n\r\n* <pre><code> if (not statusAttributes = null) {</code></pre> Fairly obvious - don't do all the expensive processing if there are no status attributes\r\n* <pre><code>  params = NewDictionary()\r\n    foreach (attr, GetAttributeNames (element, true)) {\r\n      dictionary add (params, attr, GetAttribute (element, attr))\r\n    }</code></pre> Here we're making a dictionary of all the attributes of the specified object. This is pretty inefficient with regards to memory; but only finding the attributes we need could be more complex than you would expect.\r\n\r\n* <pre><code>  foreach (attr, statusAttributes) {\r\n      list add (status, FormatStatusAttribute(attr, eval (attr, params), StringDictionaryItem(statusAttributes, attr)))\r\n    }</code></pre> Then we loop over the entries in the status attributes dictionary, calling another built-in function, and adding the HTML it returns to the list.\r\n  * The normal invocation of this function would be something like: `FormatStatusAttribute (\"health\", 95, \"Health: !%\")` - it formats the line for one status attribute, putting the value into the format string.\r\n  * The change here is the second attribute:<pre><code>eval (attr, params)</code></pre>\r\n    * `eval` takes a string and evaluates it as a Quest expression. So it could be something like `3+5` or `health`.\r\n    * If you pass a second dictionary parameter to `eval`, its keys become local variables for evaluating that bit of code; just like the optional final parameter to `invoke` or `do`. In this case, we're passing it the key from the statusattributes dictionary, and a dictionary of all the attributes of the chosen object. So in the health example, the expression could be `health` and the dictionary contains all the attributes of the player object, so it just returns the local variable `health` - the same as the default behaviour\r\n    * If the key is something like `alias + \" \" + score`, the expression is processed normally - and the attributes of the appropriate object are accessible as if they were local variables. That means you can put functions in here, or anything you want. It can be any function that returns a string ☺\r\n    * And FormatStatusAttribute gets the result of that expression, instead of just a single attribute\r\n\r\nHope that makes some sense!\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Are you able to translate your code down to newbie language and say what the different parts of it do?</p>\n</blockquote>\n<p>OK :)</p>\n<p>Here's a brief explanation of how that function works…</p>\n<details><summary style=\"text-decoration: underline; cursor: pointer\">Click to expand</summary>\n<pre><code>&lt;function name=\"AddStatusAttributesForElement\" parameters=\"status, element, statusAttributes\" type=\"string\"&gt;</code></pre> We're overriding one of the default functions here. AddStatusAttributesForElement is called once for each statusattributes dictionary (of which there are 3 in different places). Its parameters are:\n  * `status` - a stringlist, containing the lines of HTML for the status attributes panel. The function is expected to modify this list\n  * `element` - the object whose attributes are being examined; this will usually be either `game` or the player object\n  * `statusAttribute` - the statusattributes dictionary for that object\n<ul>\n<li><pre><code> if (not statusAttributes = null) {</code></pre> Fairly obvious - don't do all the expensive processing if there are no status attributes\n</li>\n<li><pre><code>  params = NewDictionary()\n  foreach (attr, GetAttributeNames (element, true)) {\n    dictionary add (params, attr, GetAttribute (element, attr))\n  }</code></pre> Here we're making a dictionary of all the attributes of the specified object. This is pretty inefficient with regards to memory; but only finding the attributes we need could be more complex than you would expect.\n</li>\n<li><pre><code>  foreach (attr, statusAttributes) {\n    list add (status, FormatStatusAttribute(attr, eval (attr, params), StringDictionaryItem(statusAttributes, attr)))\n  }</code></pre> Then we loop over the entries in the status attributes dictionary, calling another built-in function, and adding the HTML it returns to the list.\n<ul>\n<li>The normal invocation of this function would be something like: <code>FormatStatusAttribute (\"health\", 95, \"Health: !%\")</code> - it formats the line for one status attribute, putting the value into the format string.</li>\n<li>The change here is the second attribute:<pre><code>eval (attr, params)</code></pre>\n<ul>\n<li><code>eval</code> takes a string and evaluates it as a Quest expression. So it could be something like <code>3+5</code> or <code>health</code>.</li>\n<li>If you pass a second dictionary parameter to <code>eval</code>, its keys become local variables for evaluating that bit of code; just like the optional final parameter to <code>invoke</code> or <code>do</code>. In this case, we're passing it the key from the statusattributes dictionary, and a dictionary of all the attributes of the chosen object. So in the health example, the expression could be <code>health</code> and the dictionary contains all the attributes of the player object, so it just returns the local variable <code>health</code> - the same as the default behaviour</li>\n<li>If the key is something like <code>alias + \" \" + score</code>, the expression is processed normally - and the attributes of the appropriate object are accessible as if they were local variables. That means you can put functions in here, or anything you want. It can be any function that returns a string ☺</li>\n<li>And FormatStatusAttribute gets the result of that expression, instead of just a single attribute</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Hope that makes some sense!</p>\n</details>\n\n",
      "PostDate": "2023-11-17T09:30:49.8301822Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "528abb2d-3e9a-4dc7-8046-f331c1f5d181",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Fascinating!  It does make some sense, though I need to learn a little bit more to understand all of it.  I can see I would want to look at the original function to compare with what's changing.   I did learn something immediately:  I'd misunderstood the \r\n'''\r\n if (not statusAttributes = null) {\r\n'''\r\nline before.  My brain was reading \"If status attributes don't equal null\"  But your explanation reminds me that I have to read these lines \"If there are no statusAttributes then 'null'.\"   Which 'null'  translates to \"stop processing this function\"\r\n\r\nSometimes I misread lines like that, and it takes me a while to figure out what it's actually saying on my own.  So I'm very glad you shared your explanation.  I'll continue to study it, and also return to it as I learn more about dictionaries.",
      "EditableFormat": "markdown",
      "HTML": "<p>Fascinating!  It does make some sense, though I need to learn a little bit more to understand all of it.  I can see I would want to look at the original function to compare with what's changing.   I did learn something immediately:  I'd misunderstood the<br>\n'''<br>\nif (not statusAttributes = null) {<br>\n'''<br>\nline before.  My brain was reading \"If status attributes don't equal null\"  But your explanation reminds me that I have to read these lines \"If there are no statusAttributes then 'null'.\"   Which 'null'  translates to \"stop processing this function\"</p>\n<p>Sometimes I misread lines like that, and it takes me a while to figure out what it's actually saying on my own.  So I'm very glad you shared your explanation.  I'll continue to study it, and also return to it as I learn more about dictionaries.</p>\n\n",
      "PostDate": "2023-11-19T01:34:53.1170931Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
