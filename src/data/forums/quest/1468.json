{
  "Topic": {
    "TopicId": "1468",
    "ForumId": "10",
    "Title": "Containers",
    "LastUpdated": "2006-12-17T15:45:29+00:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "11740",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Let's talk about containers - I'd like some feedback as to whether you think they're implemented sensibly.\n\nI've just thought of a refinement about adding/removing objects from a container. Currently, if you have a container and you've set the &quot;add&quot; option so you can add anything, you really can add absolutely anything to the container.\n\nThis means that if you have a room called kitchen, with a &quot;fridge&quot; object that's a container, you can put everything inside the fridge. Including the window and the kitchen sink.\n\nThis I think is a bit silly. Would it make more sense to only allow players to put objects in/on something if they're currently carrying the object? That way you would have to take something first before you could put it in the fridge.\n\nWould this make puzzles a bit tedious though, having to take the object each time?\n\nWould it be even better if, when &quot;add&quot; is on, you can by default only add take-able objects? That way you don't [i:1xcwlmq2]need[/i:1xcwlmq2] to pick up an object before putting it somewhere, but you would have to at least be able to.\n\nWhat do you think?",
      "EditableFormat": "bbcode",
      "HTML": "Let's talk about containers - I'd like some feedback as to whether you think they're implemented sensibly.<br/><br/>I've just thought of a refinement about adding/removing objects from a container. Currently, if you have a container and you've set the &quot;add&quot; option so you can add anything, you really can add absolutely anything to the container.<br/><br/>This means that if you have a room called kitchen, with a &quot;fridge&quot; object that's a container, you can put everything inside the fridge. Including the window and the kitchen sink.<br/><br/>This I think is a bit silly. Would it make more sense to only allow players to put objects in/on something if they're currently carrying the object? That way you would have to take something first before you could put it in the fridge.<br/><br/>Would this make puzzles a bit tedious though, having to take the object each time?<br/><br/>Would it be even better if, when &quot;add&quot; is on, you can by default only add take-able objects? That way you don't <span style=\"font-style:italic;\">need</span> to pick up an object before putting it somewhere, but you would have to at least be able to.<br/><br/>What do you think?",
      "PostDate": "2006-11-29T16:40:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11741",
      "UserId": 0,
      "Username": "AnssiRaisanen",
      "UserAvatar": null,
      "UserGravatar": "bbd8133d08a0ffb68549da37907367e1",
      "EditableText": "It definitely makes sense to restrict the kind of objects to put into a container - the 'takeable' criterion is a good one to use. \nThe common convention in IF seems to be that you have to have a thing in your hands before you can put it anywhere, so not having this as a criterion in Quest might go unnoticed - more or less everybody will try to take the object first before putting it anywhere anyway.",
      "EditableFormat": "bbcode",
      "HTML": "It definitely makes sense to restrict the kind of objects to put into a container - the 'takeable' criterion is a good one to use. <br/>The common convention in IF seems to be that you have to have a thing in your hands before you can put it anywhere, so not having this as a criterion in Quest might go unnoticed - more or less everybody will try to take the object first before putting it anywhere anyway.",
      "PostDate": "2006-11-29T17:14:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11746",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Could there be a size property (and also a weight property)..\n\nObjects larger than the container's size would stop it going in - while weight would be a running total/maximum.\n\nIe, with just takeable objects, you would still be able to put the garden pole in the jewelery box..",
      "EditableFormat": "bbcode",
      "HTML": "Could there be a size property (and also a weight property)..<br/><br/>Objects larger than the container's size would stop it going in - while weight would be a running total/maximum.<br/><br/>Ie, with just takeable objects, you would still be able to put the garden pole in the jewelery box..",
      "PostDate": "2006-11-29T22:58:20+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11747",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "You could use a script for that though - the jewellery box's &quot;add&quot; script could check #(quest.add.object.name):size# or whatever and then add the object or not as appropriate.",
      "EditableFormat": "bbcode",
      "HTML": "You could use a script for that though - the jewellery box's &quot;add&quot; script could check #(quest.add.object.name):size# or whatever and then add the object or not as appropriate.",
      "PostDate": "2006-11-29T23:17:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11748",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "I think it is something that should be left to game developers. In the end most people are going to handle inventory on a case by case basis, and a universal standard predefined would just put up more roadblocks for customization. Some people may want bags/sacks and such for bags, others may want a magical &quot;You are carrying: Everything&quot; type system, people may want each of the player's hands to be a container, it's just too varying by person.\n\nContainers aren't at all difficult to implement, and having to override built in things would just make it harder for people already capable, when others could just use a library.",
      "EditableFormat": "bbcode",
      "HTML": "I think it is something that should be left to game developers. In the end most people are going to handle inventory on a case by case basis, and a universal standard predefined would just put up more roadblocks for customization. Some people may want bags/sacks and such for bags, others may want a magical &quot;You are carrying: Everything&quot; type system, people may want each of the player's hands to be a container, it's just too varying by person.<br/><br/>Containers aren't at all difficult to implement, and having to override built in things would just make it harder for people already capable, when others could just use a library.",
      "PostDate": "2006-11-29T23:43:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11756",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Hi\n\nIn my (defunct as of Q4) 'typelib.qlb' I used a type called 'TLTcontainable' to indicate if an object could be put inside a 'TLTcontainer' type object.\n\nIt might be a good move to use a similar idea now, making anything you want to be able to 'contain' a 'containable' type, this type could then have size/weight properties.\n\nThen for 'containers' you'd just need to test anything you tried to put in to check it was not too big/heavy by reading the size/weight properties. As these would not exist for non-containable types, you'd automatically prevent silliness like being able to put the garden shed in your backpack or whatever.\n\nAl",
      "EditableFormat": "bbcode",
      "HTML": "Hi<br/><br/>In my (defunct as of Q4) 'typelib.qlb' I used a type called 'TLTcontainable' to indicate if an object could be put inside a 'TLTcontainer' type object.<br/><br/>It might be a good move to use a similar idea now, making anything you want to be able to 'contain' a 'containable' type, this type could then have size/weight properties.<br/><br/>Then for 'containers' you'd just need to test anything you tried to put in to check it was not too big/heavy by reading the size/weight properties. As these would not exist for non-containable types, you'd automatically prevent silliness like being able to put the garden shed in your backpack or whatever.<br/><br/>Al",
      "PostDate": "2006-11-30T13:04:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11757",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "^^\n(ITID)\n\nI was going to say this too - but was unsure which was better:\n1) A single default form, which can be overridden easily by setting a number to 0.\n2) A more general one where coders need to create the code.\n\nOh, I guess to answer the direct question Alex gave, I'd opt for both in the room, and in items in your inventory should both be able to be put in containers... I guess takeable objects would actually be the only objects you can put in other objects.. I can only think of water as being an objects which you *wouldn't* be able to just 'take', without putting it *in* a cup.\n\n(actually, in that situation - would typing &quot;drink water&quot; be suitable? Would it check inside the 'cup' container object for the 'water' object? Then it'd check the 'verbs' or whatever? I'll check it out tonight if I can.. As you don't want to keep coding ways of checking objects inside containers for commands... and you don't want commands like &quot;drink cup&quot; ... Does quest automatically parse &quot;#do_something# from #object#&quot; - in which case you can just have a &quot;#do_something#&quot; command..)\n\n.. Just a couple of idea's I can't try out right now..",
      "EditableFormat": "bbcode",
      "HTML": "^^<br/>(ITID)<br/><br/>I was going to say this too - but was unsure which was better:<br/>1) A single default form, which can be overridden easily by setting a number to 0.<br/>2) A more general one where coders need to create the code.<br/><br/>Oh, I guess to answer the direct question Alex gave, I'd opt for both in the room, and in items in your inventory should both be able to be put in containers... I guess takeable objects would actually be the only objects you can put in other objects.. I can only think of water as being an objects which you *wouldn't* be able to just 'take', without putting it *in* a cup.<br/><br/>(actually, in that situation - would typing &quot;drink water&quot; be suitable? Would it check inside the 'cup' container object for the 'water' object? Then it'd check the 'verbs' or whatever? I'll check it out tonight if I can.. As you don't want to keep coding ways of checking objects inside containers for commands... and you don't want commands like &quot;drink cup&quot; ... Does quest automatically parse &quot;#do_something# from #object#&quot; - in which case you can just have a &quot;#do_something#&quot; command..)<br/><br/>.. Just a couple of idea's I can't try out right now..",
      "PostDate": "2006-11-30T13:10:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "11981",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Here's how the issue is resolved in Beta 3:\n\n[u:23136gby][b:23136gby]Putting an object in/on a container/surface[/b:23136gby][/u:23136gby]\n\nFor example, &quot;put eggs in fridge&quot;.\n\nUnless you're using a script for &quot;add&quot;, here is the logic:\n- When putting an object in or on another object, the player must be carrying the object. (e.g. you must be carrying the eggs)\n- If the player is not carrying an object, but the object is in the same room, then Quest will try to pick the object up first using the &quot;take&quot; command. (e.g. it will run &quot;take eggs&quot;)\n- If this succeeds (i.e. if the object ends up in the inventory), it will then put the object in/on the container/surface.\n\nThis means that the new logic is essentially transparent - if the eggs are take-able, and the fridge accepts objects, you can put the eggs in the fridge without having to explicitly type &quot;take eggs&quot;.\n\nThis logic works even if you override the &quot;take&quot; command completely, or specify a &quot;take&quot; script, since Quest checks the inventory to see whether the take was successful or not.\n\n[u:23136gby][b:23136gby]Taking an object that is in/on a container/surface[/b:23136gby][/u:23136gby]\n\ne.g. &quot;take eggs&quot;, when the eggs are in the fridge\n\nUnless you're using a script for &quot;take&quot;, the change in logic is similar to the above:\n- If an object is inside a container, it cannot be taken. It must be removed first.\n- If the player tries to take an object which is inside a container, and the object is take-able, Quest will try to remove the object first using the &quot;remove&quot; command. If this succeeds (i.e. the object is no longer inside a container), it will then take the object.\n\nHope this makes sense (both my description and the actual logic itself) - any questions, thoughts or suggestions please let me know.",
      "EditableFormat": "bbcode",
      "HTML": "Here's how the issue is resolved in Beta 3:<br/><br/><span style=\"text-decoration:underline;\"><span style=\"font-weight:bold;\">Putting an object in/on a container/surface</span></span><br/><br/>For example, &quot;put eggs in fridge&quot;.<br/><br/>Unless you're using a script for &quot;add&quot;, here is the logic:<br/>- When putting an object in or on another object, the player must be carrying the object. (e.g. you must be carrying the eggs)<br/>- If the player is not carrying an object, but the object is in the same room, then Quest will try to pick the object up first using the &quot;take&quot; command. (e.g. it will run &quot;take eggs&quot;)<br/>- If this succeeds (i.e. if the object ends up in the inventory), it will then put the object in/on the container/surface.<br/><br/>This means that the new logic is essentially transparent - if the eggs are take-able, and the fridge accepts objects, you can put the eggs in the fridge without having to explicitly type &quot;take eggs&quot;.<br/><br/>This logic works even if you override the &quot;take&quot; command completely, or specify a &quot;take&quot; script, since Quest checks the inventory to see whether the take was successful or not.<br/><br/><span style=\"text-decoration:underline;\"><span style=\"font-weight:bold;\">Taking an object that is in/on a container/surface</span></span><br/><br/>e.g. &quot;take eggs&quot;, when the eggs are in the fridge<br/><br/>Unless you're using a script for &quot;take&quot;, the change in logic is similar to the above:<br/>- If an object is inside a container, it cannot be taken. It must be removed first.<br/>- If the player tries to take an object which is inside a container, and the object is take-able, Quest will try to remove the object first using the &quot;remove&quot; command. If this succeeds (i.e. the object is no longer inside a container), it will then take the object.<br/><br/>Hope this makes sense (both my description and the actual logic itself) - any questions, thoughts or suggestions please let me know.",
      "PostDate": "2006-12-17T15:45:29+00:00",
      "LastEditDate": null
    }
  ]
}
