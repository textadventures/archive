{
  "Topic": {
    "TopicId": "m4nfunuxxe_msiy7ogi5dq",
    "ForumId": "10",
    "Title": "Function",
    "LastUpdated": "2018-09-06T04:12:51.2296512Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "00ab63b0-588e-47ec-a5a3-6ccf638bdd54",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It was my understanding that a variable created in a script could not be carried over to a function when called in that same script. Hope that makes sense.\r\n\r\nI was looking at the DoTake function and see the object being taken is referenced several times.\r\n```\r\nif (HasScript(object, \"ontake\")) {\r\n      do (object, \"ontake\")\r\n    }\r\n    if (found and GetBoolean (object, \"scenery\") and object.parent = game.pov) {\r\n      object.scenery = false\r\n```\r\nHow does the function know what object is being referenced?\r\nI have been gone awhile and need some refreshing.",
      "EditableFormat": "markdown",
      "HTML": "<p>It was my understanding that a variable created in a script could not be carried over to a function when called in that same script. Hope that makes sense.</p>\n<p>I was looking at the DoTake function and see the object being taken is referenced several times.</p>\n<pre><code>if (HasScript(object, \"ontake\")) {\n      do (object, \"ontake\")\n    }\n    if (found and GetBoolean (object, \"scenery\") and object.parent = game.pov) {\n      object.scenery = false\n</code></pre>\n<p>How does the function know what object is being referenced?<br>\nI have been gone awhile and need some refreshing.</p>\n\n",
      "PostDate": "2018-09-06T04:12:51.2296512Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "00ab7bfc-6184-4d36-bb18-451ceaf7983c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`object` is one of the function's parameters.",
      "EditableFormat": "markdown",
      "HTML": "<p><code>object</code> is one of the function's parameters.</p>\n\n",
      "PostDate": "2018-09-06T06:00:30.9162969Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "02530bcd-1922-4979-b200-28d72872c1b7",
      "UserId": 372999,
      "Username": "Nakita Block",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3bae1b35d822d93e538260a988f64861?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A variable can't be carried over, but an object's parameters can because they're a part of the object itself. So I've learned if I'm going to need a global variable, I will create an invisible object named \"temp\" and use its parameters as variables to carry over to other areas of the game.",
      "EditableFormat": "markdown",
      "HTML": "<p>A variable can't be carried over, but an object's parameters can because they're a part of the object itself. So I've learned if I'm going to need a global variable, I will create an invisible object named \"temp\" and use its parameters as variables to carry over to other areas of the game.</p>\n\n",
      "PostDate": "2018-09-08T20:20:55.2832442Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5c7fada0-c6fa-4750-8a54-f1e5e66d7bf7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think you mean \"attributes\". An object has attributes; a function has parameters.\r\nRather than creating an invisible object, it's common to use attributes of the game element itself.\r\n\r\nHowever, I would suggest using actual parameters wherever possible. This is what they're designed for, after all, and makes it easier to keep your code organised.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think you mean \"attributes\". An object has attributes; a function has parameters.<br>\nRather than creating an invisible object, it's common to use attributes of the game element itself.</p>\n<p>However, I would suggest using actual parameters wherever possible. This is what they're designed for, after all, and makes it easier to keep your code organised.</p>\n\n",
      "PostDate": "2018-09-08T22:51:07.4595659Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
