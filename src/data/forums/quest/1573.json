{
  "Topic": {
    "TopicId": "1573",
    "ForumId": "10",
    "Title": "3 Requests",
    "LastUpdated": "2007-01-24T18:32:43+00:00",
    "ReplyCount": 9
  },
  "Posts": [
    {
      "PostId": "12288",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "1. Make the alt property read and write\n\n2. More direct control over the disambiguation popup - perhaps create a built-in string array that gets filled\n\n3. Direct control of quest.lastobject",
      "EditableFormat": "bbcode",
      "HTML": "1. Make the alt property read and write<br/><br/>2. More direct control over the disambiguation popup - perhaps create a built-in string array that gets filled<br/><br/>3. Direct control of quest.lastobject",
      "PostDate": "2007-01-20T00:01:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12315",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "1. for each property on &lt;object&gt; - stored in #quest.property# \n2. for each action on &lt;object&gt; - stored in #quest.action# \n3. for each type on &lt;object&gt; - stored in #quest.type#\n\nI thought of maybe only using one variable, such as #quest.element# for all three of these, but then I couldn't nest one inside of the other.  Well, actually I [i:1xoi58gl]could[/i:1xoi58gl] by setting some variables in-loop, but...\n\n[code:1xoi58gl]for each object in game &#123;\n    set string &lt;object; #quest&#46;thing#&gt;\n    for each object in &lt;$locationof&#40;#object#&#41;$&gt; &#123;\n        msg &lt;#object# says hello to #quest&#46;thing#&gt;\n    &#125;\n&#125;[/code:1xoi58gl]\n\nI wonder if that works.",
      "EditableFormat": "bbcode",
      "HTML": "1. for each property on &lt;object&gt; - stored in #quest.property# <br/>2. for each action on &lt;object&gt; - stored in #quest.action# <br/>3. for each type on &lt;object&gt; - stored in #quest.type#<br/><br/>I thought of maybe only using one variable, such as #quest.element# for all three of these, but then I couldn't nest one inside of the other.  Well, actually I <span style=\"font-style:italic;\">could</span> by setting some variables in-loop, but...<br/><br/><pre><code>for each object in game &#123;<br/>    set string &lt;object; #quest&#46;thing#&gt;<br/>    for each object in &lt;$locationof&#40;#object#&#41;$&gt; &#123;<br/>        msg &lt;#object# says hello to #quest&#46;thing#&gt;<br/>    &#125;<br/>&#125;</code></pre><br/><br/>I wonder if that works.",
      "PostDate": "2007-01-22T12:23:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12372",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "[quote:dibnc8oj][code:dibnc8oj]for each object in game &#123;\n    set string &lt;object; #quest&#46;thing#&gt;\n    for each object in &lt;$locationof&#40;#object#&#41;$&gt; &#123;\n        msg &lt;#object# says hello to #quest&#46;thing#&gt;\n    &#125;\n&#125;[/code:dibnc8oj][/quote:dibnc8oj]That should work, seeing as quest.thing is set in the outside loop once it iterates to each object - and re-set in the inside loop for each iterative object.\n.. I'd be fascinated to hear the outcome.\n\n[quote:dibnc8oj]1. for each property on &lt;object&gt; - stored in #quest.property#\n2. for each action on &lt;object&gt; - stored in #quest.action#\n3. for each type on &lt;object&gt; - stored in #quest.type# [/quote:dibnc8oj]I'd have to agree with you there - except with point 3.\nQuest simply applies the types by giving the objects each property/action/etc. (at least, that's the way I'd assume)\nI can't remember seeing anything about removing types from objects.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p><pre><code>for each object in game &#123;<br/>    set string &lt;object; #quest&#46;thing#&gt;<br/>    for each object in &lt;$locationof&#40;#object#&#41;$&gt; &#123;<br/>        msg &lt;#object# says hello to #quest&#46;thing#&gt;<br/>    &#125;<br/>&#125;</code></pre></p></blockquote>That should work, seeing as quest.thing is set in the outside loop once it iterates to each object - and re-set in the inside loop for each iterative object.<br/>.. I'd be fascinated to hear the outcome.<br/><br/><blockquote><p>1. for each property on &lt;object&gt; - stored in #quest.property#<br/>2. for each action on &lt;object&gt; - stored in #quest.action#<br/>3. for each type on &lt;object&gt; - stored in #quest.type# </p></blockquote>I'd have to agree with you there - except with point 3.<br/>Quest simply applies the types by giving the objects each property/action/etc. (at least, that's the way I'd assume)<br/>I can't remember seeing anything about removing types from objects.",
      "PostDate": "2007-01-23T11:00:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12378",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Can I remove a type dynamically?\n\n[code:3fryxv0e]type &lt;#object#; not Type&gt;[/code:3fryxv0e]\n\nNot sure if this would remove all of the associated properties and actions, though.  How would Quest know if an action contained in the type was exclusive to that type, or was overwritten as a process of inheritance.  (Not sure if my terminology is right here.  I think this is the point you were making.)",
      "EditableFormat": "bbcode",
      "HTML": "Can I remove a type dynamically?<br/><br/><pre><code>type &lt;#object#; not Type&gt;</code></pre><br/><br/>Not sure if this would remove all of the associated properties and actions, though.  How would Quest know if an action contained in the type was exclusive to that type, or was overwritten as a process of inheritance.  (Not sure if my terminology is right here.  I think this is the point you were making.)",
      "PostDate": "2007-01-23T12:41:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12388",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Sorry - you lost me with the inheritance.\n\nWhen you apply a type, I think Quest simply takes the actions/properties assigned to that type and applies them to the object.\nIf it is a child of another type - then it (the type) inherits the actions/properties of it's parent, overwrites it with it's own defined actions/props, then applies them to the object (also overwriting anything there).\n\nDo not try to think of this as something similar to C++/java/etc. Objects are already defined in ASL to be specific.. all you are doing is assigning values which can change.\n\nI wonder if this is even on Alex's coding schedule... I wonder how he would implement it exactly.",
      "EditableFormat": "bbcode",
      "HTML": "Sorry - you lost me with the inheritance.<br/><br/>When you apply a type, I think Quest simply takes the actions/properties assigned to that type and applies them to the object.<br/>If it is a child of another type - then it (the type) inherits the actions/properties of it's parent, overwrites it with it's own defined actions/props, then applies them to the object (also overwriting anything there).<br/><br/>Do not try to think of this as something similar to C++/java/etc. Objects are already defined in ASL to be specific.. all you are doing is assigning values which can change.<br/><br/>I wonder if this is even on Alex's coding schedule... I wonder how he would implement it exactly.",
      "PostDate": "2007-01-23T17:35:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12398",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Maybe I'm semantically challenged.\n\nBut right.  So if I add a bunch of properties and actions by applying a type, Quest wouldn't remove those properties and actions if I were to remove the type.  Because it can't know if those properties and actions were inherited from the type being removed, or from another type, or if they were just on the object to begin with.",
      "EditableFormat": "bbcode",
      "HTML": "Maybe I'm semantically challenged.<br/><br/>But right.  So if I add a bunch of properties and actions by applying a type, Quest wouldn't remove those properties and actions if I were to remove the type.  Because it can't know if those properties and actions were inherited from the type being removed, or from another type, or if they were just on the object to begin with.",
      "PostDate": "2007-01-23T22:21:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12407",
      "UserId": 0,
      "Username": "Elexxorine",
      "UserAvatar": null,
      "UserGravatar": "a220ee44d8fe2f07029cf1f61b98bf40",
      "EditableText": "You could use your property string for types, as type is a property saying to write all the properties listed above... I don't use types, I use property, lots of properties. lol. Just make a procedure that checks if an object has a type property, and add all the real properties. That's what I did!",
      "EditableFormat": "bbcode",
      "HTML": "You could use your property string for types, as type is a property saying to write all the properties listed above... I don't use types, I use property, lots of properties. lol. Just make a procedure that checks if an object has a type property, and add all the real properties. That's what I did!",
      "PostDate": "2007-01-24T09:20:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12412",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Why is it that you don't use types, elex?  Same for you, tr0n, you mentioned you didn't like them, or something to that effect.\n\nOne of the main benefits I see is the organization of the actual ASL.  I can have a bunch of neat and tidy types in a .lib file.  I don't know.  Someone give me some arguments/opinions here.",
      "EditableFormat": "bbcode",
      "HTML": "Why is it that you don't use types, elex?  Same for you, tr0n, you mentioned you didn't like them, or something to that effect.<br/><br/>One of the main benefits I see is the organization of the actual ASL.  I can have a bunch of neat and tidy types in a .lib file.  I don't know.  Someone give me some arguments/opinions here.",
      "PostDate": "2007-01-24T12:24:27+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12413",
      "UserId": 0,
      "Username": "MerryCo",
      "UserAvatar": null,
      "UserGravatar": "43b01fa25609213b9ca17fba3804cf1a",
      "EditableText": "I find types, especially for use in an MMORPG/MUD, invaluable. Take, for instance, the following:\n[code:3nvcvy3e]\ndefine type Creature\n   eyes\n   nose\n   ears\nend define\n\ndefine type Human\n   hands\n   feet\nend define\n\ndefine type Feline\n   paws\n   tail\nend define\n[/code:3nvcvy3e]\n\nYou could assign the type Creature to a player's character object and, based upon their choices during character creation, further define the character object by assigning Human or Feline.[/code]",
      "EditableFormat": "bbcode",
      "HTML": "I find types, especially for use in an MMORPG/MUD, invaluable. Take, for instance, the following:<br/><pre><code><br/>define type Creature<br/>   eyes<br/>   nose<br/>   ears<br/>end define<br/><br/>define type Human<br/>   hands<br/>   feet<br/>end define<br/><br/>define type Feline<br/>   paws<br/>   tail<br/>end define<br/></code></pre><br/><br/>You could assign the type Creature to a player's character object and, based upon their choices during character creation, further define the character object by assigning Human or Feline.</code></pre>",
      "PostDate": "2007-01-24T13:49:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12419",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I don't use types because I prefer to customize an object (even if it is each object).\n\nIf you have an object type of human, then assigned it to a fair amount of people - everything would get so similar for the player..\nAnd what's the point in adding a type to something and then customizing it some more unless you're having very similar things with [i:2jmhy0ba]minor[/i:2jmhy0ba] changes.\n\nI could see some things which may be useful, say for being a sock type, or shoe type, or shirt type... which could hold certain things (takeable, could hold things of certain sizes, could be wearable) as demonstrated by Al's library... But I don't like types myself..\n\nIt also leads to something similar to spaghetti code - where you need to keep going back and forth between an extra point/file to understand what's happening (I have a terrible memory!).\n\nAs for removing types from objects, I don't think it's possible because it doesn't layer it like that.. Quest simply see's an &quot;apply type #&quot; command and just adds those features to the object and toddles onwards. It doesn't even note what types it has applied (as far as I can see in documentation/practice/logical thought).\nFirst it would need to record which types it had applied - and then it would need to sort these into some sort of hierarchy where properties are owned by the highest type and can only be removed when removing that type (ie, types which are already applied - are owned)... except that still means that if you remove type A (owner), then type B may still have a missing property just because it was applied lastly and wasn't an inheritance child.",
      "EditableFormat": "bbcode",
      "HTML": "I don't use types because I prefer to customize an object (even if it is each object).<br/><br/>If you have an object type of human, then assigned it to a fair amount of people - everything would get so similar for the player..<br/>And what's the point in adding a type to something and then customizing it some more unless you're having very similar things with <span style=\"font-style:italic;\">minor</span> changes.<br/><br/>I could see some things which may be useful, say for being a sock type, or shoe type, or shirt type... which could hold certain things (takeable, could hold things of certain sizes, could be wearable) as demonstrated by Al's library... But I don't like types myself..<br/><br/>It also leads to something similar to spaghetti code - where you need to keep going back and forth between an extra point/file to understand what's happening (I have a terrible memory!).<br/><br/>As for removing types from objects, I don't think it's possible because it doesn't layer it like that.. Quest simply see's an &quot;apply type #&quot; command and just adds those features to the object and toddles onwards. It doesn't even note what types it has applied (as far as I can see in documentation/practice/logical thought).<br/>First it would need to record which types it had applied - and then it would need to sort these into some sort of hierarchy where properties are owned by the highest type and can only be removed when removing that type (ie, types which are already applied - are owned)... except that still means that if you remove type A (owner), then type B may still have a missing property just because it was applied lastly and wasn't an inheritance child.",
      "PostDate": "2007-01-24T18:32:43+00:00",
      "LastEditDate": null
    }
  ]
}
