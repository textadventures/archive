{
  "Topic": {
    "TopicId": "tcpsmryvveaziirhnhfltg",
    "ForumId": "10",
    "Title": "Ending game when all necessary items are found",
    "LastUpdated": "2017-11-15T22:22:18.4259975Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "843f2f8d-0053-457b-a18f-08b200fd1062",
      "UserId": 332357,
      "Username": "PotetoPie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/06dd712e4257599e23fc29545649ccd8?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So i am almost finishing my game, and i need one last thing to finish it.\r\n\r\nSo in the game you need to find the necessary items, then it'll finish (yep, it is pretty easy).\r\nBut i don't know how to do this! Help!\r\n\r\nIf someone can, please tell me how to do it.",
      "EditableFormat": "markdown",
      "HTML": "<p>So i am almost finishing my game, and i need one last thing to finish it.</p>\n<p>So in the game you need to find the necessary items, then it'll finish (yep, it is pretty easy).<br>\nBut i don't know how to do this! Help!</p>\n<p>If someone can, please tell me how to do it.</p>\n\n",
      "PostDate": "2017-11-15T22:22:18.4259975Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "97007fc4-9f48-4b65-b231-48f9360099da",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, Take a look at the following threads, they might give you some ideas on how this problem can be achieved.\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/am3sb25pokopvsrndjkkbg/multiple-item-requirements\r\nhttp://textadventures.co.uk/forum/quest/topic/7ubpqkoud0kqgppbza5azg/end-game-when-player-has-certain-items-picked-up-in-a-random-order\r\nhttp://textadventures.co.uk/forum/quest/topic/z3z_6lw3vuwigm7tnc5fcq/adding-objectx-to-list\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, Take a look at the following threads, they might give you some ideas on how this problem can be achieved.</p>\n<p>http://textadventures.co.uk/forum/quest/topic/am3sb25pokopvsrndjkkbg/multiple-item-requirements<br>\nhttp://textadventures.co.uk/forum/quest/topic/7ubpqkoud0kqgppbza5azg/end-game-when-player-has-certain-items-picked-up-in-a-random-order<br>\nhttp://textadventures.co.uk/forum/quest/topic/z3z_6lw3vuwigm7tnc5fcq/adding-objectx-to-list</p>\n\n",
      "PostDate": "2017-11-15T23:59:46.9908327Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7cfe666b-7e96-43ea-81b4-4c6d83eb867f",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here is what I do.  There is a bit of code at the end of this if you want to look at that.  \r\n\r\n1.  On 'objectA' click on the attributes tab.\r\n2.  Click the + (add) button next to attributes.  Name it something like 'ItemsCollected'.\r\n3.  At the drop down box below, select 'integer' and set it equal to the number of necessary items your player will need to find.  I'm going to pretend there are 5, so I will set the integer attribute to 5.\r\n4.  You will now see on this attribute an option to select 'Add Change Script'.  Click it.  Something will pop up in theattribute box.  Ignore for now.\r\nI will assume also that the player will pick up these objects.  If they are not taking the object, you can place the scripts below wherever you need them.\r\n5.  Go to each of the objects the player needs to find and click on the inventory tab  and click on the  default behavior under 'Take' and change it to Run Script.\r\n6.  Choose a 'First Time' script.  This is CRUCIAL because if the player drops the item and picks it back up the script will repeat!!\r\n7.  In the first time script, you will need to add a script to 'add to inventory'.  Then add the object to inventory.  \r\n8.  Also to add to the First Time script above, you will want to add a 'Set Variable' script.  \r\n9.  In this set variable box, type this -->   **objectA.ItemsCollected**\r\n10.  Make sure the drop down box is clicked to expression.\r\n11.  In the last box here next to expression, type this -->  **objectA.ItemsCollected - 1**\r\n12.  Do this for each of the objects the player needs to collect to end the game.\r\n13.  Go back to the changedItemsCollected attribute on 'objectA' from step 3b.\r\n14.  OPTIONAL:  If you want, add a print message script here and change it to expression.  Type something like the following in the box --> **\"The still need to collect this many items: \" +  jigsaw puzzle.MissingPieceCount**  --> this will print a message telling how many objects still need to be found.\r\n15.  Add an If script here as well.     Select object attribute equals from the options.  In the next box select 'object'.  In the next box select 'objectA'.  In the attribute box type in -->  **ItemsCollected** and in the ='s box type in --> 0\r\n16.  For the then script, you can run whatever scripts you want to end the game.\r\n17.  OPTIONAL:  Add the same stuff above (#14) but add it to the 'Else If' section of this if script.  Except, change the 0 (ZERO) above to a 1 and a 2 and a 3 for however many else if scripts you want to add.  You can choose to print messages here letting the player know how awesome they are for finding another item!  Print message \"You have found another piece!  Well done!  There can't be too many left!\"\r\n\r\n\r\nLet me know if you have questions.",
      "EditableFormat": "markdown",
      "HTML": "<p>Here is what I do.  There is a bit of code at the end of this if you want to look at that.</p>\n<ol>\n<li>On 'objectA' click on the attributes tab.</li>\n<li>Click the + (add) button next to attributes.  Name it something like 'ItemsCollected'.</li>\n<li>At the drop down box below, select 'integer' and set it equal to the number of necessary items your player will need to find.  I'm going to pretend there are 5, so I will set the integer attribute to 5.</li>\n<li>You will now see on this attribute an option to select 'Add Change Script'.  Click it.  Something will pop up in theattribute box.  Ignore for now.<br>\nI will assume also that the player will pick up these objects.  If they are not taking the object, you can place the scripts below wherever you need them.</li>\n<li>Go to each of the objects the player needs to find and click on the inventory tab  and click on the  default behavior under 'Take' and change it to Run Script.</li>\n<li>Choose a 'First Time' script.  This is CRUCIAL because if the player drops the item and picks it back up the script will repeat!!</li>\n<li>In the first time script, you will need to add a script to 'add to inventory'.  Then add the object to inventory.</li>\n<li>Also to add to the First Time script above, you will want to add a 'Set Variable' script.</li>\n<li>In this set variable box, type this --&gt;   <strong>objectA.ItemsCollected</strong></li>\n<li>Make sure the drop down box is clicked to expression.</li>\n<li>In the last box here next to expression, type this --&gt;  <strong>objectA.ItemsCollected - 1</strong></li>\n<li>Do this for each of the objects the player needs to collect to end the game.</li>\n<li>Go back to the changedItemsCollected attribute on 'objectA' from step 3b.</li>\n<li>OPTIONAL:  If you want, add a print message script here and change it to expression.  Type something like the following in the box --&gt; <strong>\"The still need to collect this many items: \" +  jigsaw puzzle.MissingPieceCount</strong>  --&gt; this will print a message telling how many objects still need to be found.</li>\n<li>Add an If script here as well.     Select object attribute equals from the options.  In the next box select 'object'.  In the next box select 'objectA'.  In the attribute box type in --&gt;  <strong>ItemsCollected</strong> and in the ='s box type in --&gt; 0</li>\n<li>For the then script, you can run whatever scripts you want to end the game.</li>\n<li>OPTIONAL:  Add the same stuff above (#14) but add it to the 'Else If' section of this if script.  Except, change the 0 (ZERO) above to a 1 and a 2 and a 3 for however many else if scripts you want to add.  You can choose to print messages here letting the player know how awesome they are for finding another item!  Print message \"You have found another piece!  Well done!  There can't be too many left!\"</li>\n</ol>\n<p>Let me know if you have questions.</p>\n\n",
      "PostDate": "2017-11-16T01:19:46.9856748Z",
      "LastEditDate": "2017-11-16T01:21:42.0147333Z",
      "link": null
    },
    {
      "PostId": "65f6a511-4e88-4a93-9901-1860682cbe14",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That seems quite a complex way to go about it.\r\n\r\nI'd likely add an attribute to all the pieces. For example an attribute with the name \"collection\" and the value \"jigsaw pieces\"; or whatever they are. Or just a boolean.\r\nThen a turn script looking something like:\r\n```\r\nif (ListCount(FilterByAttribute(ScopeInventory(), \"collection\", \"jigsaw pieces\")) = 6) {\r\n  msg (\"Congratulations, you found all 6 jigsaw pieces!\")\r\n  finish()\r\n}\r\n```\r\n\r\n(or if you don't want to explicitly specify the number of pieces, you could use `if (ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) > 0)`)",
      "EditableFormat": "markdown",
      "HTML": "<p>That seems quite a complex way to go about it.</p>\n<p>I'd likely add an attribute to all the pieces. For example an attribute with the name \"collection\" and the value \"jigsaw pieces\"; or whatever they are. Or just a boolean.<br>\nThen a turn script looking something like:</p>\n<pre><code>if (ListCount(FilterByAttribute(ScopeInventory(), \"collection\", \"jigsaw pieces\")) = 6) {\n  msg (\"Congratulations, you found all 6 jigsaw pieces!\")\n  finish()\n}\n</code></pre>\n<p>(or if you don't want to explicitly specify the number of pieces, you could use <code>if (ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) &gt; 0)</code>)</p>\n\n",
      "PostDate": "2017-11-16T11:28:04.6308444Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f4b94adf-dc47-459d-b448-f6a1e7e9eda5",
      "UserId": 329383,
      "Username": "J_J",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d6dcf2651a8e3cfe546c1fe096981552?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Doctor Agan already posted some great links, so not sure if you need more... but if all you need is the player to be <I>carrying</I> all the objects you can just use a simple if script. Essentially: if player is carrying object, object, and object, end game. To do this in the editor just pick the if script , and then choose \"expression\" and type in (Got(objectname) and Got(otherobjectname))\r\n\r\nHere is what it would look like attached to a room exit (as in exiting any room carrying all the objects triggers the end game.) \r\n```<object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <onexit type=\"script\">\r\n      if ((Got(mouse) and Got(sunflowers))) {\r\n        finish\r\n        msg (\"You have found all objects. The game is over.\")\r\n      }\r\n    </onexit>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Doctor Agan already posted some great links, so not sure if you need more... but if all you need is the player to be <i>carrying</i> all the objects you can just use a simple if script. Essentially: if player is carrying object, object, and object, end game. To do this in the editor just pick the if script , and then choose \"expression\" and type in (Got(objectname) and Got(otherobjectname))</p>\n<p>Here is what it would look like attached to a room exit (as in exiting any room carrying all the objects triggers the end game.)</p>\n<pre><code>    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;onexit type=\"script\"&gt;\n      if ((Got(mouse) and Got(sunflowers))) {\n        finish\n        msg (\"You have found all objects. The game is over.\")\n      }\n    &lt;/onexit&gt;\n</code></pre>\n\n",
      "PostDate": "2017-11-16T13:31:10.2924882Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0301f0b9-9297-4bea-b886-633bca915443",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) > 0))\r\n\r\nThat stuff makes no sense to me.  I'm sure it is easier but I am uncomfortable with that type of code.  Probably because I learned it that way when I started and that's what I can do.  =)\r\n\r\nAnyway, I'll fiddle with this when I get a chance.\r\n\r\nCan you use something like this if it is NOT an inventory object?  I use this method when certain things get achieved during a game.  Does that make sense?",
      "EditableFormat": "markdown",
      "HTML": "<p>(ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) &gt; 0))</p>\n<p>That stuff makes no sense to me.  I'm sure it is easier but I am uncomfortable with that type of code.  Probably because I learned it that way when I started and that's what I can do.  =)</p>\n<p>Anyway, I'll fiddle with this when I get a chance.</p>\n<p>Can you use something like this if it is NOT an inventory object?  I use this method when certain things get achieved during a game.  Does that make sense?</p>\n\n",
      "PostDate": "2017-11-16T17:39:13.8360032Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6f115e2c-6741-4178-ae30-72486c6411ff",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I got used to using functions to scan the inventory, to avoid different variables being out of sync with each other. If the player has to be carrying five items, then any other script that could move one of those objects around (a pickpocket stealing stuff from the player? a shop?) would need to update the count variable.\r\n\r\nIn this case, it's looking to see if you have all the puzzle pieces.\r\n* `ListExclude (AllObjects(), ScopeInventory())` gives you a list of all the objects that are *not* in the player's inventory.\r\n* `FilterByAttribute(`ListExclude (AllObjects(), ScopeInventory())`, \"collection\", \"jigsaw pieces\")` filters the list down to just the ones that are jigsaw pieces\r\n* So `ListCount(`FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")`) = 0` checks if there are zero pieces you haven't got. \"Player has all the jigsaw pieces\" and \"There are no jigsaw pieces outside your inventory\" are likely to be the same condition.\r\n\r\nKeeping a variable to count the things you've done is a good method, but increases in complexity the more ways there are to accomplish the goal. If you're looking at a game where the items you need might be found, bought, or crafted, you end up having to add code to adjust your variable in every case, which makes it easier to miss something.\r\n\r\nSo where possible, I try to have collect quests evaluated by checking if the items are in your inventory, rather than maintaining a separate variable to track them. Whether that's using an attribute to identify the items for a particular quest, or just `if (Got(vase) and Got(fish heads) and Got(magic sword))`.",
      "EditableFormat": "markdown",
      "HTML": "<p>I got used to using functions to scan the inventory, to avoid different variables being out of sync with each other. If the player has to be carrying five items, then any other script that could move one of those objects around (a pickpocket stealing stuff from the player? a shop?) would need to update the count variable.</p>\n<p>In this case, it's looking to see if you have all the puzzle pieces.</p>\n<ul>\n<li><code>ListExclude (AllObjects(), ScopeInventory())</code> gives you a list of all the objects that are <em>not</em> in the player's inventory.</li>\n<li><code>FilterByAttribute(</code>ListExclude (AllObjects(), ScopeInventory())<code>, \"collection\", \"jigsaw pieces\")</code> filters the list down to just the ones that are jigsaw pieces</li>\n<li>So <code>ListCount(</code>FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")<code>) = 0</code> checks if there are zero pieces you haven't got. \"Player has all the jigsaw pieces\" and \"There are no jigsaw pieces outside your inventory\" are likely to be the same condition.</li>\n</ul>\n<p>Keeping a variable to count the things you've done is a good method, but increases in complexity the more ways there are to accomplish the goal. If you're looking at a game where the items you need might be found, bought, or crafted, you end up having to add code to adjust your variable in every case, which makes it easier to miss something.</p>\n<p>So where possible, I try to have collect quests evaluated by checking if the items are in your inventory, rather than maintaining a separate variable to track them. Whether that's using an attribute to identify the items for a particular quest, or just <code>if (Got(vase) and Got(fish heads) and Got(magic sword))</code>.</p>\n\n",
      "PostDate": "2017-11-16T18:09:38.9455985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5dee05d0-7936-4e36-8b2d-7216b9170106",
      "UserId": 332357,
      "Username": "PotetoPie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/06dd712e4257599e23fc29545649ccd8?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the help y'all. I'll try some of these to see which one works.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the help y'all. I'll try some of these to see which one works.</p>\n\n",
      "PostDate": "2017-11-16T18:37:39.9395985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2a848bec-e383-446c-b7d8-95ed03c91833",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, that is a cool code!\r\n\r\n@ XanMag:\r\n\r\nif I understand it myself, lol....\r\n\r\nyou're checking every Object in the game (but EX-cluding within your inventory), seeing if any of the required Objects are still needed (if they're found, they're not in your inventory, and thus you still need to find/get/take that item, before you can satisfy your requirement).\r\n\r\naka (this might be worded better): instead of checking your inventory if you have all of the needed items, you're checking outside of your inventory (checking the otherwise entire game), because if you don't have yet any of the needed items: if a needed item still exists outside of your inventory, then you're missing that item, and thus have to find/get/take that item, before you can complete your requirement of needed all of the required items.\r\n\r\ndoes this makes sense in what it is doing? the code is still a bit hard to follow (though mrangel breaks it down for you), but this is what it is doing.",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, that is a cool code!</p>\n<p>@ XanMag:</p>\n<p>if I understand it myself, lol....</p>\n<p>you're checking every Object in the game (but EX-cluding within your inventory), seeing if any of the required Objects are still needed (if they're found, they're not in your inventory, and thus you still need to find/get/take that item, before you can satisfy your requirement).</p>\n<p>aka (this might be worded better): instead of checking your inventory if you have all of the needed items, you're checking outside of your inventory (checking the otherwise entire game), because if you don't have yet any of the needed items: if a needed item still exists outside of your inventory, then you're missing that item, and thus have to find/get/take that item, before you can complete your requirement of needed all of the required items.</p>\n<p>does this makes sense in what it is doing? the code is still a bit hard to follow (though mrangel breaks it down for you), but this is what it is doing.</p>\n\n",
      "PostDate": "2017-11-17T03:15:53.0552607Z",
      "LastEditDate": "2017-11-17T03:17:39.0085148Z",
      "link": null
    },
    {
      "PostId": "a5bbda65-cda5-4c84-850d-ca6288ef063a",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I totally understand what the goal of the code is.  That was never really the question.  My issue is the lack of comfort I have CREATING that code.  Is that even possible through the GUI or is knowledge of code required for that. \r\n\r\nI'm still buggered by all the ()'<\"&/ symbols... and no, that is not intended to replace foul language although it most certainly would be appropriate!  =)\r\n\r\nI have a lot of respect for those of you who can work well in code.  I am definitely NOT one of them but am learning... at a glacial speed.",
      "EditableFormat": "markdown",
      "HTML": "<p>I totally understand what the goal of the code is.  That was never really the question.  My issue is the lack of comfort I have CREATING that code.  Is that even possible through the GUI or is knowledge of code required for that.</p>\n<p>I'm still buggered by all the ()'&lt;\"&amp;/ symbols... and no, that is not intended to replace foul language although it most certainly would be appropriate!  =)</p>\n<p>I have a lot of respect for those of you who can work well in code.  I am definitely NOT one of them but am learning... at a glacial speed.</p>\n\n",
      "PostDate": "2017-11-17T19:25:22.2665207Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d776939c-1bdc-472c-b8f6-fc7fb960d819",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n---------------------\r\n\r\nI have the same difficulty with all of the other symbols (&xxx^ and etc) used in code, such as with the html/xml and the regex stuff, laughs.\r\n\r\nIt just takes awhile getting used to them... not easy... it's kinda like just remembering stuff, like for a biology test... the more you do it... the slowly it starts to become 'muscle-memory'...\r\n\r\n----------\r\n\r\nwell, understanding what the code is doing, is the first battle, so that's good you already got this, but the other half of the battle is understanding the code itself, being able to create/craft your own code, which is not easy, took me many years, since I found quest and started to try to learn to code from/with quest. Indeed, this is not an easy task.\r\n\r\n---------\r\n\r\nthis probably doesn't help much, but in general:\r\n\r\nthe parenthesis, '(xxx)', is used for either: 'conditions' (something you want to compare/check: 'if (conditions)', think of it as your science experiment itself and its hypothesis) or to pass in inputs/data, to be used by the scripting.\r\n\r\nthe curly braces, '{ xxx }', are used for what (separate: nothing to do with the \"science-experiment / hypothesis\") action(s) (aka, the scripting) you want done, based upon your 'hypothesis/science-experiment' (the parenthesis stuff) be successful and/or not.\r\n\r\n```\r\nthe tags, '<xxx>xxx</xxx>' or '<xxx />', are the \"physical/tangible things\" (non-scripting: known in quest as: Elements), such as, an Object, a Function, an Exit, a Command, a Verb, a Turnscript, a Timer, an Attribute, etc etc etc.\r\n```\r\n\r\n------------------------------------------\r\n\r\nexamples...\r\n\r\n```\r\n<ELEMENT_TYPE NAME=\"xxx\" optional_other_special_parameters>\r\n  // content/body: Attributes, Objects, and/or scripting --- depends on the Element type\r\n</ELEMENT_TYPE>\r\n\r\n// just guessing at these... (I'm totally off... need to go into their actual code and study it... at some point):\r\n\r\n<function name=\"if\" parameters=\"condition\">\r\n  Eval (condition)\r\n</function>\r\n\r\n<function name=\"msg\" type=\"string\" parameters=\"message\">\r\n  return (message)\r\n</function>\r\n\r\n<function name=\"MoveObject\" parameters=\"object_1, object_2\">\r\n  object_1.parent = object_2\r\n</function>\r\n\r\n// scripting (using the functions or attribute creation/alteration/usage or whatever else):\r\n\r\nif (orc.dead) {\r\n  msg (\"The orc is dead\")\r\n} else {\r\n  msg (\"The orc is alive\")\r\n}\r\n\r\nMoveObject (player, room99)\r\n\r\nmsg (\"hi\")\r\n\r\nthe 'if', 'MoveObject', and 'msg' are all built-in Functions/Scripts\r\n\r\n//-----------\r\n\r\nVARIABLE (as an Attribute or a Variable) = VALUE_OR_EXPRESSION\r\n\r\nhandled = false\r\ncount = 0\r\nmodifier = GetAttribute (player.weapon, \"damage\") * my_critical_hit_function\r\n\r\nplayer.strength = 100\r\nplayer.weapon = katana\r\nkatana.damage = 50\r\nplayer.damage = player.weapon.damage * player.strength / 100\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>I have the same difficulty with all of the other symbols (&amp;xxx^ and etc) used in code, such as with the html/xml and the regex stuff, laughs.</p>\n<p>It just takes awhile getting used to them... not easy... it's kinda like just remembering stuff, like for a biology test... the more you do it... the slowly it starts to become 'muscle-memory'...</p>\n<hr>\n<p>well, understanding what the code is doing, is the first battle, so that's good you already got this, but the other half of the battle is understanding the code itself, being able to create/craft your own code, which is not easy, took me many years, since I found quest and started to try to learn to code from/with quest. Indeed, this is not an easy task.</p>\n<hr>\n<p>this probably doesn't help much, but in general:</p>\n<p>the parenthesis, '(xxx)', is used for either: 'conditions' (something you want to compare/check: 'if (conditions)', think of it as your science experiment itself and its hypothesis) or to pass in inputs/data, to be used by the scripting.</p>\n<p>the curly braces, '{ xxx }', are used for what (separate: nothing to do with the \"science-experiment / hypothesis\") action(s) (aka, the scripting) you want done, based upon your 'hypothesis/science-experiment' (the parenthesis stuff) be successful and/or not.</p>\n<pre><code>the tags, '&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;', are the \"physical/tangible things\" (non-scripting: known in quest as: Elements), such as, an Object, a Function, an Exit, a Command, a Verb, a Turnscript, a Timer, an Attribute, etc etc etc.\n</code></pre>\n<hr>\n<p>examples...</p>\n<pre><code>&lt;ELEMENT_TYPE NAME=\"xxx\" optional_other_special_parameters&gt;\n  // content/body: Attributes, Objects, and/or scripting --- depends on the Element type\n&lt;/ELEMENT_TYPE&gt;\n\n// just guessing at these... (I'm totally off... need to go into their actual code and study it... at some point):\n\n&lt;function name=\"if\" parameters=\"condition\"&gt;\n  Eval (condition)\n&lt;/function&gt;\n\n&lt;function name=\"msg\" type=\"string\" parameters=\"message\"&gt;\n  return (message)\n&lt;/function&gt;\n\n&lt;function name=\"MoveObject\" parameters=\"object_1, object_2\"&gt;\n  object_1.parent = object_2\n&lt;/function&gt;\n\n// scripting (using the functions or attribute creation/alteration/usage or whatever else):\n\nif (orc.dead) {\n  msg (\"The orc is dead\")\n} else {\n  msg (\"The orc is alive\")\n}\n\nMoveObject (player, room99)\n\nmsg (\"hi\")\n\nthe 'if', 'MoveObject', and 'msg' are all built-in Functions/Scripts\n\n//-----------\n\nVARIABLE (as an Attribute or a Variable) = VALUE_OR_EXPRESSION\n\nhandled = false\ncount = 0\nmodifier = GetAttribute (player.weapon, \"damage\") * my_critical_hit_function\n\nplayer.strength = 100\nplayer.weapon = katana\nkatana.damage = 50\nplayer.damage = player.weapon.damage * player.strength / 100\n</code></pre>\n\n",
      "PostDate": "2017-11-18T04:30:26.343591Z",
      "LastEditDate": "2017-11-18T04:32:34.1605322Z",
      "link": null
    },
    {
      "PostId": "e203fe91-43f2-4765-968c-630e3dfdea9b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> (ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) > 0))\r\n>\r\n> That stuff makes no sense to me. I'm sure it is easier but I am uncomfortable with that type of code. Probably because I learned it that way when I started and that's what I can do. =)\r\n\r\nSo do it one step at a time\r\n\r\n```\r\nlistcarried = ScopeInventory()\r\nlistnotcarried = ListExclude(AllObjects(), listcarried)\r\nlistnotcarriedandrequired = FilterByAttribute(listnotcarried , \"collection\", \"jigsaw pieces\")\r\ncount = ListCount(listnotcarriedandrequired)\r\nif (count > 0)) {\r\n   ...\r\n```\r\nIt does the same thing, but spread over several lines so you can see what is going on at each stage.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(ListCount(FilterByAttribute(ListExclude(AllObjects(), ScopeInventory()), \"collection\", \"jigsaw pieces\")) &gt; 0))</p>\n<p>That stuff makes no sense to me. I'm sure it is easier but I am uncomfortable with that type of code. Probably because I learned it that way when I started and that's what I can do. =)</p>\n</blockquote>\n<p>So do it one step at a time</p>\n<pre><code>listcarried = ScopeInventory()\nlistnotcarried = ListExclude(AllObjects(), listcarried)\nlistnotcarriedandrequired = FilterByAttribute(listnotcarried , \"collection\", \"jigsaw pieces\")\ncount = ListCount(listnotcarriedandrequired)\nif (count &gt; 0)) {\n   ...\n</code></pre>\n<p>It does the same thing, but spread over several lines so you can see what is going on at each stage.</p>\n\n",
      "PostDate": "2017-11-18T08:40:20.4785441Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
