{
  "Topic": {
    "TopicId": "ekd6qbktekcdn-ztaaeywa",
    "ForumId": "10",
    "Title": "Custom Help command?",
    "LastUpdated": "2016-09-21T06:37:17.3857982Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2dd1a467-2965-4238-a4cc-9b8ce8533219",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello again. Quick question i hope, any way was wanting to know if theres a way to change print out of the 'Default Help' command? I have searched forums and found same like topics but with no answers(that i found). Reason I ask is because I am using Pixie's custom UI script \r\n```\r\nhttp://textadventures.co.uk/forum/samples/topic/6456/no-longer-failing-to-customise-the-compass-rose \r\n```\r\nand it has a custom 'Help' button which is awesome but want it to better suit my game like show a list of my commands.\r\n\r\nThanks for any help on this\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello again. Quick question i hope, any way was wanting to know if theres a way to change print out of the 'Default Help' command? I have searched forums and found same like topics but with no answers(that i found). Reason I ask is because I am using Pixie's custom UI script</p>\n<pre><code>http://textadventures.co.uk/forum/samples/topic/6456/no-longer-failing-to-customise-the-compass-rose \n</code></pre>\n<p>and it has a custom 'Help' button which is awesome but want it to better suit my game like show a list of my commands.</p>\n<p>Thanks for any help on this<br>\nMike</p>\n\n",
      "PostDate": "2016-09-21T06:37:17.3857982Z",
      "LastEditDate": null
    },
    {
      "PostId": "69985f09-5b23-4192-bacc-4a89a8a889e5",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just create a new command with the same pattern, a regular expression like this:\r\n```\r\n^help$|^\\?$\r\n```\r\nWhen the player types a command, Quest searches through your game from the bottom until it finds a matching command. As libraries are at the top, any command you put in will get matched in preference.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just create a new command with the same pattern, a regular expression like this:</p>\n<pre><code>^help$|^\\?$\n</code></pre>\n<p>When the player types a command, Quest searches through your game from the bottom until it finds a matching command. As libraries are at the top, any command you put in will get matched in preference.</p>\n\n",
      "PostDate": "2016-09-21T06:56:22.8654465Z",
      "LastEditDate": null
    },
    {
      "PostId": "047813f3-e995-49a8-a52b-61ba1340e561",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Does quest have a way to reference/use any inheritance level/layer and/or level/layer of-when over-riding occurs (if these are two separate things, lol) ???\r\n\r\nfor (a lame and pretend) example:\r\n\r\nbase quest: 'talk' Function/Command/Verb: msg (\"base\") // root level/layer: main parent/super\r\n\r\nlibrary over-riding of base quest: 'talk' Function/Command/Verb: msg (\"library\") // parent/super\r\n\r\ncustom over-riding of library (and also base quest obviously): 'talk' Function/Command/Verb: msg (\"custom\") // child/sub\r\n\r\nis there any way I can I use/reference the library over-riding, getting/using the 'msg (\"library\")', and not just the custom over-riding of 'msg (\"custom\")' ???\r\n\r\nand the same for the base quest, can I use/reference the base quest, getting/using the 'msg (\"base\"), and not the custom over-riding of 'msg (\"custom\")' ???\r\n\r\nor, are we stuck with: 'talk' Function/Command/Verb ---> msg (\"custom\"), ????",
      "EditableFormat": "markdown",
      "HTML": "<p>Does quest have a way to reference/use any inheritance level/layer and/or level/layer of-when over-riding occurs (if these are two separate things, lol) ???</p>\n<p>for (a lame and pretend) example:</p>\n<p>base quest: 'talk' Function/Command/Verb: msg (\"base\") // root level/layer: main parent/super</p>\n<p>library over-riding of base quest: 'talk' Function/Command/Verb: msg (\"library\") // parent/super</p>\n<p>custom over-riding of library (and also base quest obviously): 'talk' Function/Command/Verb: msg (\"custom\") // child/sub</p>\n<p>is there any way I can I use/reference the library over-riding, getting/using the 'msg (\"library\")', and not just the custom over-riding of 'msg (\"custom\")' ???</p>\n<p>and the same for the base quest, can I use/reference the base quest, getting/using the 'msg (\"base\"), and not the custom over-riding of 'msg (\"custom\")' ???</p>\n<p>or, are we stuck with: 'talk' Function/Command/Verb ---&gt; msg (\"custom\"), ????</p>\n\n",
      "PostDate": "2016-09-21T09:04:37.8496287Z",
      "LastEditDate": "2016-09-21T09:11:34.4399776Z"
    },
    {
      "PostId": "451be667-987f-4057-81fd-c455f32bed40",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sadly, no.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sadly, no.</p>\n\n",
      "PostDate": "2016-09-21T09:54:42.3257672Z",
      "LastEditDate": null
    },
    {
      "PostId": "80f88663-838e-4891-82b3-9d90c9672d77",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for answering/letting me know, Pixie.\r\n\r\n----------------------\r\n\r\nin the same ?vein?, about polymorphism and quest:\r\n\r\nWhile I still don't understand polymorphism well/fully, I think it's a moot (not an) issue with quest (in whether or not quest can do polymorphism), as there's intentionally less encapsulation (which works well for quest games/making games) or that the less encapsulation is a greater use/effect of polymorphism --- meh (I said I still don't understand polymorphism that well, lol), is this correct, or am I missing some understanding/aspect of polymorphism, which makes it important for quest, even with quest's less encapsulation, and thus the question matters of whether quest can do polymorphism or not?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for answering/letting me know, Pixie.</p>\n<hr>\n<p>in the same ?vein?, about polymorphism and quest:</p>\n<p>While I still don't understand polymorphism well/fully, I think it's a moot (not an) issue with quest (in whether or not quest can do polymorphism), as there's intentionally less encapsulation (which works well for quest games/making games) or that the less encapsulation is a greater use/effect of polymorphism --- meh (I said I still don't understand polymorphism that well, lol), is this correct, or am I missing some understanding/aspect of polymorphism, which makes it important for quest, even with quest's less encapsulation, and thus the question matters of whether quest can do polymorphism or not?</p>\n\n",
      "PostDate": "2016-09-21T14:42:01.1294236Z",
      "LastEditDate": "2016-09-21T14:42:21.8110045Z"
    },
    {
      "PostId": "36e6d6b7-344b-4ff4-bf20-e82eaec75534",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks again Pixie you are epic, and good to know there is no override function as it's kinda what I wanted lol.\r\nThanks again and HK you're leaps and bounds ahead of meðŸ˜€\r\n\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks again Pixie you are epic, and good to know there is no override function as it's kinda what I wanted lol.<br>\nThanks again and HK you're leaps and bounds ahead of meðŸ˜€</p>\n<p>Mike</p>\n\n",
      "PostDate": "2016-09-21T14:50:03.1784297Z",
      "LastEditDate": null
    },
    {
      "PostId": "615bfcb8-c76a-405a-9b7d-50ab3392f8ff",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "don't worry about encapsulation/polymorphism, it's from my programming school classes, getting into the details of learning to code/program more seriously... slowly...\r\n\r\nif interested...\r\n\r\n(obviously a lot more to/about all this stuff, but here's a very simple/gist description)\r\n\r\nencapsulation: is generally the use of Objects/Classes, being able to contain everything that it needs (if you've got a 'ball' Object, it can hold it's own details/content/traits/characteristics/abilities/capabilities/etc: a 'color' String Attribute, a 'throw' Script Attribute, etc etc etc, so you're not looking all over the place, everything that the 'ball' Object needs, it, itself right there has/contains/holds it all. It's basically a part of grouping/organization/specializing/compartmentalizing. An airport offers flight travel, a harbor offers shipping, a market offers food, a mathematician does math, a teacher teachs, etc etc etc),\r\n\r\ninheritance: quest does have this to a degree at the user-friendly level (the Object Types / Types and their Inherited Attributes)\r\n\r\npolymorphism: some thing or some action can be or do many different things.\r\n\r\n-------\r\n\r\nthis stuff doesn't apply too much with Quest, this stuff is more for the programming languages usage and programming, actual programming/professional level programming (software), such as how Quest was created, under-neath the user-friendly level we work at.",
      "EditableFormat": "markdown",
      "HTML": "<p>don't worry about encapsulation/polymorphism, it's from my programming school classes, getting into the details of learning to code/program more seriously... slowly...</p>\n<p>if interested...</p>\n<p>(obviously a lot more to/about all this stuff, but here's a very simple/gist description)</p>\n<p>encapsulation: is generally the use of Objects/Classes, being able to contain everything that it needs (if you've got a 'ball' Object, it can hold it's own details/content/traits/characteristics/abilities/capabilities/etc: a 'color' String Attribute, a 'throw' Script Attribute, etc etc etc, so you're not looking all over the place, everything that the 'ball' Object needs, it, itself right there has/contains/holds it all. It's basically a part of grouping/organization/specializing/compartmentalizing. An airport offers flight travel, a harbor offers shipping, a market offers food, a mathematician does math, a teacher teachs, etc etc etc),</p>\n<p>inheritance: quest does have this to a degree at the user-friendly level (the Object Types / Types and their Inherited Attributes)</p>\n<p>polymorphism: some thing or some action can be or do many different things.</p>\n<hr>\n<p>this stuff doesn't apply too much with Quest, this stuff is more for the programming languages usage and programming, actual programming/professional level programming (software), such as how Quest was created, under-neath the user-friendly level we work at.</p>\n\n",
      "PostDate": "2016-09-22T05:20:15.2990637Z",
      "LastEditDate": "2016-09-22T05:28:34.1991799Z"
    },
    {
      "PostId": "9655c1d4-01c0-476e-80f9-d3ebde32d76d",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Polymorphism is really about being able to interact with objects without caring what type they are. In Quest, you can do this using script attributes. If you had a \"death\" script attribute on each object, for example, each doing something custom for that object, then you can simply do:\r\n\r\ndo(object, \"death\")\r\n\r\nto invoke the script. You don't care what the object's actual implementation of \"death\" does (it might just print \"The spider flips over on its back, and its legs curl in.\"), and you don't care even what object or object type it is. You can treat all objects (of that \"kind\" (which might be all objects that have such a script attribute) the same. And you can add new objects at any time without having to go back and change the calling code. The code becomes \"closed for modification but open for extension\".\r\n\r\nI have mainly used script and delegate attributes for polymorphism in Quest. Quest internally uses polymorphism for a lot of things: think about the room \"enter\" and \"exit\" scripts, for example. The fact the \"guts\" of every object is hanging out for all to see (so no \"data hiding\") doesn't really help with wanting to have a uniform way to treat objects. By having each object handle its own logic, you can avoid all those \"if (object = Wolf) do this else if (object = Red) do that\" tightly coupled sections of code, where you need to explicitly list and handle each object kind everywhere you use them.\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Polymorphism is really about being able to interact with objects without caring what type they are. In Quest, you can do this using script attributes. If you had a \"death\" script attribute on each object, for example, each doing something custom for that object, then you can simply do:</p>\n<p>do(object, \"death\")</p>\n<p>to invoke the script. You don't care what the object's actual implementation of \"death\" does (it might just print \"The spider flips over on its back, and its legs curl in.\"), and you don't care even what object or object type it is. You can treat all objects (of that \"kind\" (which might be all objects that have such a script attribute) the same. And you can add new objects at any time without having to go back and change the calling code. The code becomes \"closed for modification but open for extension\".</p>\n<p>I have mainly used script and delegate attributes for polymorphism in Quest. Quest internally uses polymorphism for a lot of things: think about the room \"enter\" and \"exit\" scripts, for example. The fact the \"guts\" of every object is hanging out for all to see (so no \"data hiding\") doesn't really help with wanting to have a uniform way to treat objects. By having each object handle its own logic, you can avoid all those \"if (object = Wolf) do this else if (object = Red) do that\" tightly coupled sections of code, where you need to explicitly list and handle each object kind everywhere you use them.</p>\n\n",
      "PostDate": "2016-09-22T11:34:22.9323159Z",
      "LastEditDate": null
    },
    {
      "PostId": "ba49ff92-29da-4dc6-bc74-8feefd94e03a",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "And HK, to answer your other question, there's no way to access a level of the code you've replaced. I've wished that myself on numerous occasions. I resorted once to having a \"prototype\" object attached to the derived object so that I could explicitly call the overridden functions from the base type.",
      "EditableFormat": "markdown",
      "HTML": "<p>And HK, to answer your other question, there's no way to access a level of the code you've replaced. I've wished that myself on numerous occasions. I resorted once to having a \"prototype\" object attached to the derived object so that I could explicitly call the overridden functions from the base type.</p>\n\n",
      "PostDate": "2016-09-22T11:36:20.7335408Z",
      "LastEditDate": null
    },
    {
      "PostId": "6c2c07e5-8181-4c06-81bf-963a82c993ac",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah okay, so there's really not too much use for polymorphism for users of quest, if I'm understanding you Jay, as the open/global/public nature of quest's OBJECTS (Elements) and its Data/Content/Methods/members (Attributes), which is wonderful for making quest games unlike in normal programming where such global/public variables/objects-classes/etc is generally a very bad practice, makes polymorphism a bit of a moot point (as polymorphism is for the most part about allowing such global/public/open usage without actually have an open/global/public structure/design; aka polymorphism allows encapsulation to be public in terms of usage but-while keeping the actual encapsulation structure in place --- If I understand polymorphmis --- I was just wondering if there's anything else that polymorphism can do which would be useful in/for quest, and then if such polymorphism could be done in quest), I was just wondering if there's any aspect of polymorphism that could be of use in quest, and then whether quest can thus do polymorphism or not for that aspect of polymorphism that quest's open-ness/global-ness of its Objects doesn't nullify.\r\n\r\n(Definately underneath, polymorphism makes quest into the wonderful engine that it is --- Alex and co have done an amazing job --- quest is really so user-friendly-seemless, I'm really amazed at how well quest is built --- they really created a such great amazing engine! --- I'm just talking about the user-level of quest in whether there's any uses for polymorphism, and if so, if quest can do that type of polymorphism or not)\r\n\r\n-------\r\n\r\nI was just trying to describe 'polymorphism' and encapsulation' in layman's terms for the non-programmers in my previous post, without getting into their real/full aspects/usage, which are much more technical/complex, as they're not familiar/learned in programming like us who know some (or a lot/all/most of) programming (early stages:me or expert:Jay, Pixie, Pertex, etc).\r\n\r\n-------\r\n\r\nand, that's very a creative solution! having an Object contain Objects for their 'parent/root/super classes and their members/methods/etc'",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah okay, so there's really not too much use for polymorphism for users of quest, if I'm understanding you Jay, as the open/global/public nature of quest's OBJECTS (Elements) and its Data/Content/Methods/members (Attributes), which is wonderful for making quest games unlike in normal programming where such global/public variables/objects-classes/etc is generally a very bad practice, makes polymorphism a bit of a moot point (as polymorphism is for the most part about allowing such global/public/open usage without actually have an open/global/public structure/design; aka polymorphism allows encapsulation to be public in terms of usage but-while keeping the actual encapsulation structure in place --- If I understand polymorphmis --- I was just wondering if there's anything else that polymorphism can do which would be useful in/for quest, and then if such polymorphism could be done in quest), I was just wondering if there's any aspect of polymorphism that could be of use in quest, and then whether quest can thus do polymorphism or not for that aspect of polymorphism that quest's open-ness/global-ness of its Objects doesn't nullify.</p>\n<p>(Definately underneath, polymorphism makes quest into the wonderful engine that it is --- Alex and co have done an amazing job --- quest is really so user-friendly-seemless, I'm really amazed at how well quest is built --- they really created a such great amazing engine! --- I'm just talking about the user-level of quest in whether there's any uses for polymorphism, and if so, if quest can do that type of polymorphism or not)</p>\n<hr>\n<p>I was just trying to describe 'polymorphism' and encapsulation' in layman's terms for the non-programmers in my previous post, without getting into their real/full aspects/usage, which are much more technical/complex, as they're not familiar/learned in programming like us who know some (or a lot/all/most of) programming (early stages:me or expert:Jay, Pixie, Pertex, etc).</p>\n<hr>\n<p>and, that's very a creative solution! having an Object contain Objects for their 'parent/root/super classes and their members/methods/etc'</p>\n\n",
      "PostDate": "2016-09-22T19:54:58.4494002Z",
      "LastEditDate": "2016-09-22T20:15:23.8078652Z"
    },
    {
      "PostId": "1ac74374-bc0e-44c3-bff0-09b721ba3152",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, that's not what I said. :) You can use polymorphism anywhere you can attach functions to objects that you can reference by name, but where the function invoked is different for each object based on that name. It's about pushing the handling of objects into the objects themselves rather than having it by the higher-level code. Something like this:\r\n\r\n```\r\nif (object = \"apple\") {\r\n   msg(\"The apple tastes good!\")\r\n} else if (object = \"banana\") {\r\n  msg(\"Yuck, I hate bananas!\"\r\n} else if (object = \"grape\") {\r\n   msg(\"I'll save this to make some wine.\")\r\n} \r\netc\r\n```\r\nis called \"simulated polymorphism\", because rather than handing off control to the object, you're peering into the object itself and deciding what to do. It would be better to have a script attribute on each object and move the various implementations into the objects themselves (where the call at the top level becomes \"do (object, \"eat\")\" or whatever you want to call it. Then the calling code doesn't have to care what the object is - the object handles it.\r\n\r\nAnd there's plenty of room and support for this in Quest. As I said, I have used it, and the core code uses it. Those were meant to be two examples showing it's a viable approach in Quest.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, that's not what I said. :) You can use polymorphism anywhere you can attach functions to objects that you can reference by name, but where the function invoked is different for each object based on that name. It's about pushing the handling of objects into the objects themselves rather than having it by the higher-level code. Something like this:</p>\n<pre><code>if (object = \"apple\") {\n   msg(\"The apple tastes good!\")\n} else if (object = \"banana\") {\n  msg(\"Yuck, I hate bananas!\"\n} else if (object = \"grape\") {\n   msg(\"I'll save this to make some wine.\")\n} \netc\n</code></pre>\n<p>is called \"simulated polymorphism\", because rather than handing off control to the object, you're peering into the object itself and deciding what to do. It would be better to have a script attribute on each object and move the various implementations into the objects themselves (where the call at the top level becomes \"do (object, \"eat\")\" or whatever you want to call it. Then the calling code doesn't have to care what the object is - the object handles it.</p>\n<p>And there's plenty of room and support for this in Quest. As I said, I have used it, and the core code uses it. Those were meant to be two examples showing it's a viable approach in Quest.</p>\n\n",
      "PostDate": "2016-09-23T11:14:26.5711211Z",
      "LastEditDate": null
    },
    {
      "PostId": "c38efcc4-9a91-41ca-b677-febe5b08bc3a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah okay, thanks for explaining, as I wrongly generalized my understanding of polymorphism as being able to bypass the encapsulation without removing the actual encapsulation (for example: a derived Object acting as and/or using a parent Object and its members/methods, aka a 'magicbox' Object/Class acting as its parent 'plainbox' Object/Class from my text book example, lol), as this is what my limited understanding of polymorphism is, as I still struggle a bit with it, obviously sighs, and in/with understanding it and its implementations/applications.",
      "EditableFormat": "markdown",
      "HTML": "<p>ah okay, thanks for explaining, as I wrongly generalized my understanding of polymorphism as being able to bypass the encapsulation without removing the actual encapsulation (for example: a derived Object acting as and/or using a parent Object and its members/methods, aka a 'magicbox' Object/Class acting as its parent 'plainbox' Object/Class from my text book example, lol), as this is what my limited understanding of polymorphism is, as I still struggle a bit with it, obviously sighs, and in/with understanding it and its implementations/applications.</p>\n\n",
      "PostDate": "2016-09-24T04:32:49.32372Z",
      "LastEditDate": "2016-09-24T04:34:42.6841617Z"
    }
  ]
}
