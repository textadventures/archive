{
  "Topic": {
    "TopicId": "oxrxrqxure65oxwh2it4wg",
    "ForumId": "10",
    "Title": "object links with hover effect",
    "LastUpdated": "2021-07-20T11:17:04.6776341Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6f7410a2-494e-4362-85c5-5aef9b44af53",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it possible with Javascript or Quest core file changes that object links in the game already show the object description when you just hover over it?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it possible with Javascript or Quest core file changes that object links in the game already show the object description when you just hover over it?</p>\n\n",
      "PostDate": "2021-07-20T11:17:04.6776341Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6bfa6cdb-0e5e-4897-9d51-4d246ecfadd7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It should be possible, but I'd be careful about it. The delay taken to request a description from the server would mean that the description takes some time to appear, unless you send all the descriptions to the client in a turnscript or similar.\r\n\r\nIt shouldn't be too hard to make a turnscript that sends object descriptions, so the JS code has them ready to display. The only disadvantage of doing it this way is that description *scripts* wouldn't work properly. You would have to either omit them from the hover thing, or run them whenever the object comes into sight. Or possibly run them using an ASLEvent call when necessary… but then the description wouldn't appear immediately for those objects.\r\n\r\nAfter a little more thought, I think the simplest solution might be to do something like this:\r\n<pre><code>  &lt;function name=\"ProcessTextCommand_Object\" type=\"string\" parameters=\"section, data\">\r\n    &lt;![CDATA[\r\n    objectname = Mid(section, 8)\r\n    text = \"\"\r\n    colon = Instr(objectname, \":\")\r\n    if (colon > 0) {\r\n      text = Mid(objectname, colon + 1)\r\n      objectname = Left(objectname, colon - 1)\r\n    }\r\n    object = ObjectForTextProcessor(objectname)\r\n    if (object = null) {\r\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\r\n    }\r\n    else {\r\n      if (LengthOf(text) = 0) {\r\n        text = SafeXML(GetDisplayAlias(object))\r\n      }\r\n      if (game.enablehyperlinks) {\r\n        linkid = ProcessTextCommand_GetNextLinkId()\r\n        colour = \"\"\r\n        if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = object.linkcolour\r\n        }\r\n        else {\r\n          colour = GetLinkTextColour()\r\n        }\r\n        style = GetCurrentTextFormat(colour)\r\n        <b style=\"color: green\">if (HasString (object, \"quick_look\")) {\r\n          description = \"&lt;span class=\"objdescription\">\" + ProcessTextSection(object.quick_look, data) + \"&lt;/span>\"\r\n        }\r\n        else if (HasString (object, \"look\")) {\r\n          description = \"&lt;span class=\"objdescription\">\" + ProcessTextSection(object.look, data) + \"&lt;/span>\"\r\n        }\r\n        else {\r\n          description = \"\"\r\n        }</b>\r\n        return (\"&lt;a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\">\" + text + <b style=\"color: green\">description + </b>\"&lt;/a>\")\r\n      }\r\n      else {\r\n        return (text)\r\n      }\r\n    }\r\n    ]]>\r\n  &lt;/function></code></pre>\r\n\r\nThis adds the description to each object link, allowing a second description attribute `quick_look` as an alternative for objects that do something when the player looks at them.\r\n\r\nYou could then use CSS to position the hovering box:\r\n<pre><code>&lt;style>\r\n  .objdescription {\r\n    <b>position: absolute;\r\n    z-index: 1;\r\n    visibility: hidden;</b>\r\n    background-color: pink;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 3px;\r\n    padding: 2px;\r\n  }\r\n\r\n<b>  a:hover:not(.disabled) .objdescription {\r\n    visibility: visible;\r\n  }</b>\r\n&lt;/style></code></pre>\r\n\r\n(might need a little playing around with the position so that the description doesn't obscure the verb menu; or even move the verbs into the description box)\r\n\r\nIf an object's description changes, it might be a good idea to update the description boxes of any links currently onscreen. You could do this with a turnscript, but now I think about it:\r\n```\r\n  <changedlook type=\"script\">\r\n    if (not HasString (this, \"quick_look\")) {\r\n      if (HasString (this, \"look\")) {\r\n        JS.UpdateObjectDescription(this.name, ProcessText (this.look))\r\n      }\r\n      else {\r\n        JS.UpdateObjectDescription(this.name)\r\n      }\r\n    }\r\n  </changedlook>\r\n\r\n  <changedquick_look type=\"script\">\r\n    if (HasString (this, \"quick_look\")) {\r\n      JS.UpdateObjectDescription(this.name, ProcessText (this.quick_look))\r\n    }\r\n    else if (HasString (this, \"look\")) {\r\n      JS.UpdateObjectDescription(this.name, ProcessText (this.look))\r\n    }\r\n    else {\r\n      JS.UpdateObjectDescription(this.name)\r\n    }\r\n  </changedquick_look>\r\n```\r\n\r\nbacked up by some JS functions:\r\n```\r\nUpdateObjectDescription = function (id, desc) {\r\n  $(\".cmdlink\").each(function (i, e) {\r\n    if (id == $(e).data(\"elementid\")) {\r\n      if (desc) {\r\n        var box = $(e).find(\".objdescription\");\r\n        if (box.length == 0) {\r\n          box = $(\"<span>\", {class: \"objdescription\"}).appendTo(e);\r\n        }\r\n        box.html(desc);\r\n      } else {\r\n        $(e).find(\".objdescription\").remove();\r\n      }\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n(off the top of my head, not tested. So feel free to point out any errors)",
      "EditableFormat": "markdown",
      "HTML": "<p>It should be possible, but I'd be careful about it. The delay taken to request a description from the server would mean that the description takes some time to appear, unless you send all the descriptions to the client in a turnscript or similar.</p>\n<p>It shouldn't be too hard to make a turnscript that sends object descriptions, so the JS code has them ready to display. The only disadvantage of doing it this way is that description <em>scripts</em> wouldn't work properly. You would have to either omit them from the hover thing, or run them whenever the object comes into sight. Or possibly run them using an ASLEvent call when necessary… but then the description wouldn't appear immediately for those objects.</p>\n<p>After a little more thought, I think the simplest solution might be to do something like this:</p>\n<pre><code>  &lt;function name=\"ProcessTextCommand_Object\" type=\"string\" parameters=\"section, data\"&gt;\n    &lt;![CDATA[\n    objectname = Mid(section, 8)\n    text = \"\"\n    colon = Instr(objectname, \":\")\n    if (colon &gt; 0) {\n      text = Mid(objectname, colon + 1)\n      objectname = Left(objectname, colon - 1)\n    }\n    object = ObjectForTextProcessor(objectname)\n    if (object = null) {\n      return (\"@@@open@@@\" + ProcessTextSection(section, data) + \"@@@close@@@\")\n    }\n    else {\n      if (LengthOf(text) = 0) {\n        text = SafeXML(GetDisplayAlias(object))\n      }\n      if (game.enablehyperlinks) {\n        linkid = ProcessTextCommand_GetNextLinkId()\n        colour = \"\"\n        if (HasString(object, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n          colour = object.linkcolour\n        }\n        else {\n          colour = GetLinkTextColour()\n        }\n        style = GetCurrentTextFormat(colour)\n        <b style=\"color: green\">if (HasString (object, \"quick_look\")) {\n          description = \"&lt;span class=\"objdescription\"&gt;\" + ProcessTextSection(object.quick_look, data) + \"&lt;/span&gt;\"\n        }\n        else if (HasString (object, \"look\")) {\n          description = \"&lt;span class=\"objdescription\"&gt;\" + ProcessTextSection(object.look, data) + \"&lt;/span&gt;\"\n        }\n        else {\n          description = \"\"\n        }</b>\n        return (\"&lt;a id=\\\"\" + linkid + \"\\\" style=\\\"\" + style + \"\\\" class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + object.name + \"\\\"&gt;\" + text + <b style=\"color: green\">description + </b>\"&lt;/a&gt;\")\n      }\n      else {\n        return (text)\n      }\n    }\n    ]]&gt;\n  &lt;/function&gt;</code></pre>\n<p>This adds the description to each object link, allowing a second description attribute <code>quick_look</code> as an alternative for objects that do something when the player looks at them.</p>\n<p>You could then use CSS to position the hovering box:</p>\n<pre><code>&lt;style&gt;\n  .objdescription {\n    <b>position: absolute;\n    z-index: 1;\n    visibility: hidden;</b>\n    background-color: pink;\n    color: #fff;\n    text-align: center;\n    border-radius: 3px;\n    padding: 2px;\n  }\n\n<b>  a:hover:not(.disabled) .objdescription {\n    visibility: visible;\n  }</b>\n&lt;/style&gt;</code></pre>\n<p>(might need a little playing around with the position so that the description doesn't obscure the verb menu; or even move the verbs into the description box)</p>\n<p>If an object's description changes, it might be a good idea to update the description boxes of any links currently onscreen. You could do this with a turnscript, but now I think about it:</p>\n<pre><code>  &lt;changedlook type=\"script\"&gt;\n    if (not HasString (this, \"quick_look\")) {\n      if (HasString (this, \"look\")) {\n        JS.UpdateObjectDescription(this.name, ProcessText (this.look))\n      }\n      else {\n        JS.UpdateObjectDescription(this.name)\n      }\n    }\n  &lt;/changedlook&gt;\n\n  &lt;changedquick_look type=\"script\"&gt;\n    if (HasString (this, \"quick_look\")) {\n      JS.UpdateObjectDescription(this.name, ProcessText (this.quick_look))\n    }\n    else if (HasString (this, \"look\")) {\n      JS.UpdateObjectDescription(this.name, ProcessText (this.look))\n    }\n    else {\n      JS.UpdateObjectDescription(this.name)\n    }\n  &lt;/changedquick_look&gt;\n</code></pre>\n<p>backed up by some JS functions:</p>\n<pre><code>UpdateObjectDescription = function (id, desc) {\n  $(\".cmdlink\").each(function (i, e) {\n    if (id == $(e).data(\"elementid\")) {\n      if (desc) {\n        var box = $(e).find(\".objdescription\");\n        if (box.length == 0) {\n          box = $(\"&lt;span&gt;\", {class: \"objdescription\"}).appendTo(e);\n        }\n        box.html(desc);\n      } else {\n        $(e).find(\".objdescription\").remove();\n      }\n    }\n  });\n}\n</code></pre>\n<p>(off the top of my head, not tested. So feel free to point out any errors)</p>\n\n",
      "PostDate": "2021-07-20T12:14:14.1805127Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b642a33a-05ed-4d2a-9e54-846598ce475a",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow, this is all off the top of your head? Respect! Thank you, I will test it",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow, this is all off the top of your head? Respect! Thank you, I will test it</p>\n\n",
      "PostDate": "2021-07-21T05:20:04.1238043Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
