{
  "Topic": {
    "TopicId": "2070",
    "ForumId": "10",
    "Title": "Selection menus",
    "LastUpdated": "2009-06-14T20:06:55+01:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "16709",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Hi\n\nWhile considering the possibilities for a conversation system, I was reminded of a limitation I'd noticed in the past but (AFAIK) have never got around to requesting a fix for. \n\nSelection menus have to be 'hard coded'.  As authors we cannot embed variables in, or dynamically change the 'choice' messages, nor can we change/replace the scripts associated with them.\n\nI can't imagine it would be too hard to allow us to use variables as info &amp; choice options, that would make them much more useful, especially if the script could read the variable choice associated with it.  We could then use the information for our own purposes.\n\n[code:2567nw7m]define selection &lt;selectionname&gt;\n\tinfo &lt;#variable# | Text&gt;\n\tchoice &lt; #variable# |Text&gt; (script)\n\t\t\t\t&#46;\nend define[/code:2567nw7m]\n\nThe script could then do whatever we required using a select case on the variable - so we'd have dynamically variable menus.  I can see this being very useful for those who like the conversation tree approach to NPC interaction. By setting a choice variable to an empty string, it could be not diplayed so menu's could shrink if needed.\n\nBetter still if we could replace the choice text of a selection menu, and it's script by referring to it by an index number. So having coded\n\n[code:2567nw7m]define selection &lt;Fred_Talk&gt;\n\tinfo &lt;Talking to Fred&#46;&#46;&#46;&gt;\n\tchoice &lt; What do you know about Porsches?&gt; msg &lt;&quot;Naff all mate&#46;!&quot;&gt;\n\tchoice &lt;etc&gt;&#46;&#46;&#46;\t\t\t&#46;\nend define[/code:2567nw7m]\n\nPerhaps we could then amend the menu with something like;\n\n[code:2567nw7m]Fred_Talk&#46;info = &quot;Talking to Boris&#46;&#46;&#46;&quot;\nFred_Talk&#46;choice&#91;1&#93; = &quot;Ask him about his tap dancing skills&#46;&gt;&quot;\nFred_Talk&#46;script&#91;1&#93; = do &lt;run_before_he_beats_you_to_a_pulp_procedure&gt;[/code:2567nw7m]\n\nI can see how it might have to only allow a procedure call or a simple message as 'script' here.  I also see that this could be a LOT more work to implement than the former method.\n\nAny comments?\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Hi<br/><br/>While considering the possibilities for a conversation system, I was reminded of a limitation I'd noticed in the past but (AFAIK) have never got around to requesting a fix for. <br/><br/>Selection menus have to be 'hard coded'.  As authors we cannot embed variables in, or dynamically change the 'choice' messages, nor can we change/replace the scripts associated with them.<br/><br/>I can't imagine it would be too hard to allow us to use variables as info &amp; choice options, that would make them much more useful, especially if the script could read the variable choice associated with it.  We could then use the information for our own purposes.<br/><br/><pre><code>define selection &lt;selectionname&gt;<br/>\tinfo &lt;#variable# | Text&gt;<br/>\tchoice &lt; #variable# |Text&gt; (script)<br/>\t\t\t\t&#46;<br/>end define</code></pre><br/><br/>The script could then do whatever we required using a select case on the variable - so we'd have dynamically variable menus.  I can see this being very useful for those who like the conversation tree approach to NPC interaction. By setting a choice variable to an empty string, it could be not diplayed so menu's could shrink if needed.<br/><br/>Better still if we could replace the choice text of a selection menu, and it's script by referring to it by an index number. So having coded<br/><br/><pre><code>define selection &lt;Fred_Talk&gt;<br/>\tinfo &lt;Talking to Fred&#46;&#46;&#46;&gt;<br/>\tchoice &lt; What do you know about Porsches?&gt; msg &lt;&quot;Naff all mate&#46;!&quot;&gt;<br/>\tchoice &lt;etc&gt;&#46;&#46;&#46;\t\t\t&#46;<br/>end define</code></pre><br/><br/>Perhaps we could then amend the menu with something like;<br/><br/><pre><code>Fred_Talk&#46;info = &quot;Talking to Boris&#46;&#46;&#46;&quot;<br/>Fred_Talk&#46;choice&#91;1&#93; = &quot;Ask him about his tap dancing skills&#46;&gt;&quot;<br/>Fred_Talk&#46;script&#91;1&#93; = do &lt;run_before_he_beats_you_to_a_pulp_procedure&gt;</code></pre><br/><br/>I can see how it might have to only allow a procedure call or a simple message as 'script' here.  I also see that this could be a LOT more work to implement than the former method.<br/><br/>Any comments?<br/><br/>Al (MaDbRiT)",
      "PostDate": "2009-06-12T15:51:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16713",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I think this is one of the first limitations that I noticed after finding Quest.\nCompletely agree.\n\nNot sure about the solution though, and I can't quite get my mind round to this.. Maybe later..",
      "EditableFormat": "bbcode",
      "HTML": "I think this is one of the first limitations that I noticed after finding Quest.<br/>Completely agree.<br/><br/>Not sure about the solution though, and I can't quite get my mind round to this.. Maybe later..",
      "PostDate": "2009-06-12T21:31:40+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16716",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "[quote=&quot;paul_one&quot;:2vznl5as]Not sure about the solution though, and I can't quite get my mind round to this[/quote:2vznl5as]\n\nNot sure of the best way to fix it either, just floated a couple of ideas <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->  I daresay that the way Alex has implemented the selections will pretty much dictate the solution - assuming we get one!\n\nCheers\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>paul_one wrote:</cite>Not sure about the solution though, and I can't quite get my mind round to this</blockquote><br/><br/>Not sure of the best way to fix it either, just floated a couple of ideas <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->  I daresay that the way Alex has implemented the selections will pretty much dictate the solution - assuming we get one!<br/><br/>Cheers<br/><br/>Al (MaDbRiT)",
      "PostDate": "2009-06-12T22:48:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16718",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Ok, just re-read your post and am a bit more tech-minded today.\nGood to have you back BTW Al <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> .\n\nRiiight, the main downside with your approach would be a limit to the changes in the menu structure... For instance:\n[code:20h54no7]define menu &lt;menu&gt;\ninfo &lt;What do you say?&gt;\nchoice &lt;#one#&gt; stuff&#46;&#46;\nchoice &lt;#two#&gt; stuff&#46;&#46;\nchoice &lt;#three#&gt; stuff&#46;&#46;\nend define[/code:20h54no7]\n\nOf course you can change the menu contents (and possibly the &quot;stuff&quot; part too).. But what happens if you want to add 6 or 10 or 'x' number of choices?\n\nWith a text-based menu all you'd do is have an index variable, output the choices to one or two arrays and then when reading the input, match the index with the 'script' part of the array/s. (which I have *just* realized you do say anyway)\nI see the tough part here being loads of variables etc. Plus removing stuff from the array isn't all that easy.\n\nI think adding / removing actions would be far more suitable.\nHaving the menu as more of an (I daresay it) object!\nThis might allow you to do something similar to actions:\n[code:20h54no7]define object &lt;menu&gt;\n description &lt;what do you want to say?&gt;\n action &lt;Oh no - not again!&gt; stuff&#46;&#46;\n action &lt;*pokie* *pokie* *pokie*&gt; stuff&#46;&#46;\nend define[/code:20h54no7]\n\nI was also thinking about somehow scripting a menu - but that would just be silly.\nI'm thinking a proper data structure which you can change would be MUCH better.\n\nThoughts?",
      "EditableFormat": "bbcode",
      "HTML": "Ok, just re-read your post and am a bit more tech-minded today.<br/>Good to have you back BTW Al <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> .<br/><br/>Riiight, the main downside with your approach would be a limit to the changes in the menu structure... For instance:<br/><pre><code>define menu &lt;menu&gt;<br/>info &lt;What do you say?&gt;<br/>choice &lt;#one#&gt; stuff&#46;&#46;<br/>choice &lt;#two#&gt; stuff&#46;&#46;<br/>choice &lt;#three#&gt; stuff&#46;&#46;<br/>end define</code></pre><br/><br/>Of course you can change the menu contents (and possibly the &quot;stuff&quot; part too).. But what happens if you want to add 6 or 10 or 'x' number of choices?<br/><br/>With a text-based menu all you'd do is have an index variable, output the choices to one or two arrays and then when reading the input, match the index with the 'script' part of the array/s. (which I have *just* realized you do say anyway)<br/>I see the tough part here being loads of variables etc. Plus removing stuff from the array isn't all that easy.<br/><br/>I think adding / removing actions would be far more suitable.<br/>Having the menu as more of an (I daresay it) object!<br/>This might allow you to do something similar to actions:<br/><pre><code>define object &lt;menu&gt;<br/> description &lt;what do you want to say?&gt;<br/> action &lt;Oh no - not again!&gt; stuff&#46;&#46;<br/> action &lt;*pokie* *pokie* *pokie*&gt; stuff&#46;&#46;<br/>end define</code></pre><br/><br/>I was also thinking about somehow scripting a menu - but that would just be silly.<br/>I'm thinking a proper data structure which you can change would be MUCH better.<br/><br/>Thoughts?",
      "PostDate": "2009-06-13T11:49:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16719",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[edited June 13th 12:31 pm eastern Canadian time]\n\nI've always been a GUI minimalist with Quest.  Don't like the panes, nor any kind of popup.  Would love disambiguation control.  But, as you (Al) said you are choosing Quest over other IF authoring options specifically because of the GUI, I could see where the functionality you've described would make a huge difference.  \n\nAs an alternative, (and I see Paul is thinking exactly along the same lines) I think you may be able to structure your own dynamic conversation nodes (that work similarly to how you've described selection menus working) using objects.  These wouldn't have a GUI popup, but you could control color, formatting, and all the rest.\n\nI am thinking of something like the following:\n\n[code:6jiu77i7]!library\n!asl-version &lt;400&gt;\n\ndefine type &lt;ConversationNode&gt;\n\n\tinfo = UNDEFINED\n\tchoice_1 = NULL\n\n\tlastChoice = NULL    \n\n\t'hook for gatekeeping OnChoosing, may be overwritten\n\taction &lt;BeforeChoosing&gt; {\n\t\n\t\tdoaction &lt;$thisobject$; OnChoosing&gt;\n\t}\n\n\t'internal functionality, should not be overwritten\n\taction &lt;OnChoosing&gt; {\t\t\n\t\t\n\t\tset string &lt;this; $thisobject$&gt;\n\t\tmsg &lt;#(this)&#58;info#&gt;\n\t\tmsg &lt;&gt;\n\t\t\n\t\tset numeric &lt;i; 1&gt;\n\t\tset string &lt;strChoice; $objectproperty(#this#; choice_%i%)$&gt;\n\t\trepeat until (#strChoice# = NULL) or (#strChoice# = !) {\n\t\t\n\t\t\tmsg &lt;    %i%&#46; #strChoice#&gt;\n\t\t\tinc &lt;i&gt;\n\t\t\tif property &lt;#this#; choice_%i%&gt; then {\n\t\t\t\t\n\t\t\t\tset &lt;strChoice; $objectproperty(#this#; choice_%i%)$&gt;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tset &lt;strChoice; NULL&gt;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmsg &lt;&gt;\n\t\tdec &lt;i&gt;\n\t\t\n\t\tset string &lt;playerChoice; &gt;\n\t\tset numeric &lt;n; 0&gt;\n\t\trepeat until (%n% &gt;= 1) and (%n% &lt;= %i%) {\n\t\t\n\t\t\tenter &lt;playerChoice&gt;\n\t\t\tset &lt;n; #playerChoice#&gt;\n\t\t\t\n\t\t\t'if (%n% &lt; 1) or (%n% &gt; %i%) then msg &lt;    Invalid choice&#46; Choose again&#46;&gt;\n\t\t}\n\t\t\n\t\tproperty &lt;#this#; lastChoice = %n%&gt;\n\t\t\n\t\tif action &lt;#this#; choice_%n%&gt; then {\n\t\t\t\n\t\t\tdoaction &lt;#this#; choice_%n%&gt;\n\t\t}\n\t\telse {\n\t\t\tif property &lt;#this#; choiceMsg_%n%&gt; then {\n\t\t\t\t\n\t\t\t\tmsg  &lt;$objectproperty(#this#; choiceMsg_%n%)$&gt;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdebug &lt;Conversation Node &quot;#this#&quot; has no message or state change for choice %n%, which is set to &quot;$objectproperty(#this#; choice_%n%)$&quot;&#46;&gt;\n\t\t\t}\n\t\t}\n\t\t\n\t\tdoaction &lt;#this#; AfterChoosing&gt;\n\t}  \t\n\n\t'hook for additional consequence logic for having made a choice,\n\t'may be overwritten\t\n\taction &lt;AfterChoosing&gt; {\n\t}\n\n\t'called when the node is first encountered, add property flag\n\t'&quot;node_initialized&quot; to ensure this only fires once, may be\n\t'overwritten\n\taction &lt;initialize_node&gt; {\n\t}\n\nend define[/code:6jiu77i7]\n\nThen the main file with an object:\n\n[code:6jiu77i7]!include &lt;convNode&#46;lib&gt;\n\ndefine options\n\n\tdebug on\n\tpanes disabled\t\n\t\nend define\n\ndefine game &lt;ConversationNodeTypeTest&gt;\n\t\n\tasl-version &lt;400&gt;\n\tforeground &lt;white&gt;\n\tbackground &lt;black&gt;\n\tdefault fontname &lt;Courier&gt;\n\tdefault fontsize &lt;12&gt;\t\n\t\n\tstartscript {\n\t\n\t\tfor each object in game {\n\t\t\n\t\t\tif action &lt;#quest&#46;thing#; initialize_node&gt; then doaction &lt;#quest&#46;thing#; initialize_node&gt;\n\t\t}\n\t}\n\t\n\tstart room &lt;StartRoom&gt;\n\t\n\tcommand &lt;do conv #cmd1#&gt; {\n\t\n\t\tif real &lt;convNode_#cmd1#&gt; then {\n\t\t\t\n\t\t\tdoaction &lt;convNode_#cmd1#; BeforeChoosing&gt;\n\t\t}\n\t\telse {\n\t\t\n\t\t\tmsg &lt;No such conversation node exists&#46;&gt;\n\t\t}\n\t}\n\t\n\tcommand &lt;jump&gt; {\n\t\n\t\tmsg &lt;You jump&#46;&gt;\n\t\tproperty &lt;game; jumped&gt;\n\t}\n\t\nend define\n\ndefine room &lt;StartRoom&gt;\n\n\talias &lt;Start&gt;\n\tlook &lt;A very boring location, indeed&#46;&gt;\n\t\n\tdefine object &lt;convNode_1&gt;\n\t\n\t\ttype &lt;ConversationNode&gt;\n\t\tproperties &lt;info = Which do |byou|xb like best&#58;&gt;\n\t\tproperties &lt;choice_1 = |crred|cb; choice_2 = |clblue|cb; choice_3 = |cggreen|cb&gt;\n\t\t\n\t\taction &lt;choice_1&gt; {\n\t\t\n\t\t\tset string &lt;this; $thisobject$&gt;\t\t\n\t\t\tmsg &lt;You chose #(this)&#58;choice_1#&#46;&gt;\n\t\t}\n\t\t\n\t\tproperties &lt;choiceMsg_2 = You chose blue&#46;&gt;\n\t\t\n\t\taction &lt;BeforeChoosing&gt; {\n\t\t\n\t\t\tif not property &lt;game; jumped&gt; then {\n\t\t\t\tmsg &lt;You must jump first&#46;&gt;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdoaction &lt;$thisobject$; OnChoosing&gt;\n\t\t\t}\n\t\t}\n\t\t\n\t\taction &lt;AfterChoosing&gt; {\n\t\t\n\t\t\tset string &lt;this; $thisobject$&gt;\n\t\t\tmsg &lt;Your last choice was #(this)&#58;lastChoice#&#46;&gt;\n\t\t}\n\t\t\n\t\taction &lt;initialize_node&gt; {\n\t\t\n\t\t\tproperty &lt;game; not jumped&gt;\n\t\t\tdebug &lt;node $thisobject$ initialized&gt;\n\t\t}\n\t\n\tend define\t\nend define[/code:6jiu77i7]\n\nAs Paul mentioned, since you can add and remove properties/types at run-time, each conversation node can be dynamic to plot progression.  To see how the above works, run the main file and type the command 'do conv 1'.  It'll say 'You need to jump first.'.  So do that, and then retype the command.  For the third choice in the example menu I 'accidentally' forgot to code a reaction - a suitable debug message prints in this case.\n\n[attachment=0:6jiu77i7]<!-- ia0 -->convTest.zip<!-- ia0 -->[/attachment:6jiu77i7]\n\n[quote:6jiu77i7]Having the menu as more of an (I daresay it) object![/quote:6jiu77i7]\n\nI [i:6jiu77i7]knew[/i:6jiu77i7] you'd see the light!  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "EditableFormat": "bbcode",
      "HTML": "[edited June 13th 12:31 pm eastern Canadian time]<br/><br/>I've always been a GUI minimalist with Quest.  Don't like the panes, nor any kind of popup.  Would love disambiguation control.  But, as you (Al) said you are choosing Quest over other IF authoring options specifically because of the GUI, I could see where the functionality you've described would make a huge difference.  <br/><br/>As an alternative, (and I see Paul is thinking exactly along the same lines) I think you may be able to structure your own dynamic conversation nodes (that work similarly to how you've described selection menus working) using objects.  These wouldn't have a GUI popup, but you could control color, formatting, and all the rest.<br/><br/>I am thinking of something like the following:<br/><br/><pre><code>!library<br/>!asl-version &lt;400&gt;<br/><br/>define type &lt;ConversationNode&gt;<br/><br/>\tinfo = UNDEFINED<br/>\tchoice_1 = NULL<br/><br/>\tlastChoice = NULL    <br/><br/>\t'hook for gatekeeping OnChoosing, may be overwritten<br/>\taction &lt;BeforeChoosing&gt; {<br/>\t<br/>\t\tdoaction &lt;$thisobject$; OnChoosing&gt;<br/>\t}<br/><br/>\t'internal functionality, should not be overwritten<br/>\taction &lt;OnChoosing&gt; {\t\t<br/>\t\t<br/>\t\tset string &lt;this; $thisobject$&gt;<br/>\t\tmsg &lt;#(this)&#58;info#&gt;<br/>\t\tmsg &lt;&gt;<br/>\t\t<br/>\t\tset numeric &lt;i; 1&gt;<br/>\t\tset string &lt;strChoice; $objectproperty(#this#; choice_%i%)$&gt;<br/>\t\trepeat until (#strChoice# = NULL) or (#strChoice# = !) {<br/>\t\t<br/>\t\t\tmsg &lt;    %i%&#46; #strChoice#&gt;<br/>\t\t\tinc &lt;i&gt;<br/>\t\t\tif property &lt;#this#; choice_%i%&gt; then {<br/>\t\t\t\t<br/>\t\t\t\tset &lt;strChoice; $objectproperty(#this#; choice_%i%)$&gt;<br/>\t\t\t}<br/>\t\t\telse {<br/>\t\t\t\tset &lt;strChoice; NULL&gt;<br/>\t\t\t}<br/>\t\t}<br/>\t\t<br/>\t\tmsg &lt;&gt;<br/>\t\tdec &lt;i&gt;<br/>\t\t<br/>\t\tset string &lt;playerChoice; &gt;<br/>\t\tset numeric &lt;n; 0&gt;<br/>\t\trepeat until (%n% &gt;= 1) and (%n% &lt;= %i%) {<br/>\t\t<br/>\t\t\tenter &lt;playerChoice&gt;<br/>\t\t\tset &lt;n; #playerChoice#&gt;<br/>\t\t\t<br/>\t\t\t'if (%n% &lt; 1) or (%n% &gt; %i%) then msg &lt;    Invalid choice&#46; Choose again&#46;&gt;<br/>\t\t}<br/>\t\t<br/>\t\tproperty &lt;#this#; lastChoice = %n%&gt;<br/>\t\t<br/>\t\tif action &lt;#this#; choice_%n%&gt; then {<br/>\t\t\t<br/>\t\t\tdoaction &lt;#this#; choice_%n%&gt;<br/>\t\t}<br/>\t\telse {<br/>\t\t\tif property &lt;#this#; choiceMsg_%n%&gt; then {<br/>\t\t\t\t<br/>\t\t\t\tmsg  &lt;$objectproperty(#this#; choiceMsg_%n%)$&gt;<br/>\t\t\t}<br/>\t\t\telse {<br/>\t\t\t\tdebug &lt;Conversation Node &quot;#this#&quot; has no message or state change for choice %n%, which is set to &quot;$objectproperty(#this#; choice_%n%)$&quot;&#46;&gt;<br/>\t\t\t}<br/>\t\t}<br/>\t\t<br/>\t\tdoaction &lt;#this#; AfterChoosing&gt;<br/>\t}  \t<br/><br/>\t'hook for additional consequence logic for having made a choice,<br/>\t'may be overwritten\t<br/>\taction &lt;AfterChoosing&gt; {<br/>\t}<br/><br/>\t'called when the node is first encountered, add property flag<br/>\t'&quot;node_initialized&quot; to ensure this only fires once, may be<br/>\t'overwritten<br/>\taction &lt;initialize_node&gt; {<br/>\t}<br/><br/>end define</code></pre><br/><br/>Then the main file with an object:<br/><br/><pre><code>!include &lt;convNode&#46;lib&gt;<br/><br/>define options<br/><br/>\tdebug on<br/>\tpanes disabled\t<br/>\t<br/>end define<br/><br/>define game &lt;ConversationNodeTypeTest&gt;<br/>\t<br/>\tasl-version &lt;400&gt;<br/>\tforeground &lt;white&gt;<br/>\tbackground &lt;black&gt;<br/>\tdefault fontname &lt;Courier&gt;<br/>\tdefault fontsize &lt;12&gt;\t<br/>\t<br/>\tstartscript {<br/>\t<br/>\t\tfor each object in game {<br/>\t\t<br/>\t\t\tif action &lt;#quest&#46;thing#; initialize_node&gt; then doaction &lt;#quest&#46;thing#; initialize_node&gt;<br/>\t\t}<br/>\t}<br/>\t<br/>\tstart room &lt;StartRoom&gt;<br/>\t<br/>\tcommand &lt;do conv #cmd1#&gt; {<br/>\t<br/>\t\tif real &lt;convNode_#cmd1#&gt; then {<br/>\t\t\t<br/>\t\t\tdoaction &lt;convNode_#cmd1#; BeforeChoosing&gt;<br/>\t\t}<br/>\t\telse {<br/>\t\t<br/>\t\t\tmsg &lt;No such conversation node exists&#46;&gt;<br/>\t\t}<br/>\t}<br/>\t<br/>\tcommand &lt;jump&gt; {<br/>\t<br/>\t\tmsg &lt;You jump&#46;&gt;<br/>\t\tproperty &lt;game; jumped&gt;<br/>\t}<br/>\t<br/>end define<br/><br/>define room &lt;StartRoom&gt;<br/><br/>\talias &lt;Start&gt;<br/>\tlook &lt;A very boring location, indeed&#46;&gt;<br/>\t<br/>\tdefine object &lt;convNode_1&gt;<br/>\t<br/>\t\ttype &lt;ConversationNode&gt;<br/>\t\tproperties &lt;info = Which do |byou|xb like best&#58;&gt;<br/>\t\tproperties &lt;choice_1 = |crred|cb; choice_2 = |clblue|cb; choice_3 = |cggreen|cb&gt;<br/>\t\t<br/>\t\taction &lt;choice_1&gt; {<br/>\t\t<br/>\t\t\tset string &lt;this; $thisobject$&gt;\t\t<br/>\t\t\tmsg &lt;You chose #(this)&#58;choice_1#&#46;&gt;<br/>\t\t}<br/>\t\t<br/>\t\tproperties &lt;choiceMsg_2 = You chose blue&#46;&gt;<br/>\t\t<br/>\t\taction &lt;BeforeChoosing&gt; {<br/>\t\t<br/>\t\t\tif not property &lt;game; jumped&gt; then {<br/>\t\t\t\tmsg &lt;You must jump first&#46;&gt;<br/>\t\t\t}<br/>\t\t\telse {<br/>\t\t\t\tdoaction &lt;$thisobject$; OnChoosing&gt;<br/>\t\t\t}<br/>\t\t}<br/>\t\t<br/>\t\taction &lt;AfterChoosing&gt; {<br/>\t\t<br/>\t\t\tset string &lt;this; $thisobject$&gt;<br/>\t\t\tmsg &lt;Your last choice was #(this)&#58;lastChoice#&#46;&gt;<br/>\t\t}<br/>\t\t<br/>\t\taction &lt;initialize_node&gt; {<br/>\t\t<br/>\t\t\tproperty &lt;game; not jumped&gt;<br/>\t\t\tdebug &lt;node $thisobject$ initialized&gt;<br/>\t\t}<br/>\t<br/>\tend define\t<br/>end define</code></pre><br/><br/>As Paul mentioned, since you can add and remove properties/types at run-time, each conversation node can be dynamic to plot progression.  To see how the above works, run the main file and type the command 'do conv 1'.  It'll say 'You need to jump first.'.  So do that, and then retype the command.  For the third choice in the example menu I 'accidentally' forgot to code a reaction - a suitable debug message prints in this case.<br/><br/><div><a href=\"/forumattachments/21/convTest.zip\">convTest.zip</a></div><br/><br/><blockquote><p>Having the menu as more of an (I daresay it) object!</p></blockquote><br/><br/>I <span style=\"font-style:italic;\">knew</span> you'd see the light!  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "PostDate": "2009-06-13T14:17:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "16725",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "That all seems a bit TOO messy, plus you only have 1 selection there, where I would actually imagine a tree-structure.\n\nI suppose you could combine several nodes to achieve that, but I would prefer to keep a whole tree in a single 'object' myself.",
      "EditableFormat": "bbcode",
      "HTML": "That all seems a bit TOO messy, plus you only have 1 selection there, where I would actually imagine a tree-structure.<br/><br/>I suppose you could combine several nodes to achieve that, but I would prefer to keep a whole tree in a single 'object' myself.",
      "PostDate": "2009-06-14T20:06:55+01:00",
      "LastEditDate": null
    }
  ]
}