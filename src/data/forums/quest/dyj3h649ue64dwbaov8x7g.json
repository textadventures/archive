{
  "Topic": {
    "TopicId": "dyj3h649ue64dwbaov8x7g",
    "ForumId": "10",
    "Title": "Lengthening Game Panes [Solved]",
    "LastUpdated": "2019-02-17T06:40:34.8971115Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9ab374ac-2df4-46d9-b607-f278d81dd196",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This must have been discussed before but I've not found anything with a quick search. Apologies, if it is 'obvious'.\r\n\r\nFor one-room puzzles, there may be more items in a room than can be shown without scrolling. Is there a way to lengthen the Inventory and Places and Objects game panes? ...making sure, of course, to stay within the available screen size!",
      "EditableFormat": "markdown",
      "HTML": "<p>This must have been discussed before but I've not found anything with a quick search. Apologies, if it is 'obvious'.</p>\n<p>For one-room puzzles, there may be more items in a room than can be shown without scrolling. Is there a way to lengthen the Inventory and Places and Objects game panes? ...making sure, of course, to stay within the available screen size!</p>\n\n",
      "PostDate": "2019-02-17T06:40:34.8971115Z",
      "LastEditDate": "2019-02-22T09:28:31.994072Z",
      "link": null
    },
    {
      "PostId": "c939254c-c09e-4d85-b9c2-ac9d7fd975f3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello, DavyB!\r\n\r\nThis might be what you're looking for:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/oppns_i2cech0laswcyuca/resizing-the-panes",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello, DavyB!</p>\n<p>This might be what you're looking for:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/oppns_i2cech0laswcyuca/resizing-the-panes</p>\n\n",
      "PostDate": "2019-02-17T13:20:42.2247903Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "01defab4-738a-4b3e-b6db-a440382fb582",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks KV, that addresses my worry about the panes 'overflowing' but is there a way to increase the length of panes before they start scrolling? I'vm just using the Inventory and Places and Objects panes as it is a single room and the scrolling starts earlier than necessaary for most screens.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks KV, that addresses my worry about the panes 'overflowing' but is there a way to increase the length of panes before they start scrolling? I'vm just using the Inventory and Places and Objects panes as it is a single room and the scrolling starts earlier than necessaary for most screens.</p>\n\n",
      "PostDate": "2019-02-18T09:27:30.6616876Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1d1c392a-a9dd-49c3-8d55-21baf1643245",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The `updateList` javascript function (called every turn to make sure the lists are displayed correctly) sets the logical size of the list to the number of items in it, subject to a minimum of 3 and a maximum of 12. That means that setting the height of the list wrapper will only work to reduce it.\r\n\r\nThe offending piece of code is:\r\n```\r\n    var selectSize = count;\r\n    if (selectSize < 3) selectSize = 3;\r\n    if (selectSize > 12) selectSize = 12;\r\n    $(listElement).attr(\"size\", selectSize);\r\n```\r\n\r\nFairly recently (some time this year?) I posted a piece of code on a thread, changing this so that it just sets the size to the count, and then loops `while(sidebar is taller than the screen) { reduce the size of the longest list by 1; }`.\r\nI can't find the post right now, and it really needs some more work, but it might be a good starting point to look at.\r\n\r\nOff the top of my head, it would be something like:\r\n```\r\n$(function() {\r\n  var originalUpdateList = updateList;\r\n  updateList = function (n, d) {\r\n    // run the standard function\r\n    originalUpdateList (n, d);\r\n\r\n    var inventorySize = $('#lstInventory').children('li').length;\r\n    var placesObjectsSize = $('#lstPlacesObjects').children('li').length;\r\n    $('#lstInventory').attr('size', inventorySize);\r\n    $('#lstPlacesObjects').attr('size', placesObjectsSize);\r\n\r\n    // You might need to tweak this to allow for margins etc:\r\n    while ($('#gamePanesRunning').height > window.innerHeight) {\r\n      var maxSize = Math.max(inventorySize, placesObjectsSize);\r\n      if (maxSize == inventorySize) { $('#lstInventory').attr('size', --inventorySize); }\r\n      if (maxSize == placesObjectsSize) { $('#lstPlacesObjects').attr('size', --placesObjectsSize); }\r\n\r\n      // if we're playing in a window that's stupidly small, don't shrink the lists any more\r\n      // the sensible behaviour here would probably be to set the sizes back to the actual number of items in the list, and diaplay a scrollbar for the whole sidebar\r\n      if (maxSize < 3) { break; }\r\n    }\r\n  };\r\n});\r\n```\r\n(all off the top of my head. I vaguely remember there were some other style issues last time, so that might need some tweaking)\r\n(and I just realised that you'd also want to add some code when the verb buttons are displayed to make sure that the list is resized to fit on the screen)",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>updateList</code> javascript function (called every turn to make sure the lists are displayed correctly) sets the logical size of the list to the number of items in it, subject to a minimum of 3 and a maximum of 12. That means that setting the height of the list wrapper will only work to reduce it.</p>\n<p>The offending piece of code is:</p>\n<pre><code>    var selectSize = count;\n    if (selectSize &lt; 3) selectSize = 3;\n    if (selectSize &gt; 12) selectSize = 12;\n    $(listElement).attr(\"size\", selectSize);\n</code></pre>\n<p>Fairly recently (some time this year?) I posted a piece of code on a thread, changing this so that it just sets the size to the count, and then loops <code>while(sidebar is taller than the screen) { reduce the size of the longest list by 1; }</code>.<br>\nI can't find the post right now, and it really needs some more work, but it might be a good starting point to look at.</p>\n<p>Off the top of my head, it would be something like:</p>\n<pre><code>$(function() {\n  var originalUpdateList = updateList;\n  updateList = function (n, d) {\n    // run the standard function\n    originalUpdateList (n, d);\n\n    var inventorySize = $('#lstInventory').children('li').length;\n    var placesObjectsSize = $('#lstPlacesObjects').children('li').length;\n    $('#lstInventory').attr('size', inventorySize);\n    $('#lstPlacesObjects').attr('size', placesObjectsSize);\n\n    // You might need to tweak this to allow for margins etc:\n    while ($('#gamePanesRunning').height &gt; window.innerHeight) {\n      var maxSize = Math.max(inventorySize, placesObjectsSize);\n      if (maxSize == inventorySize) { $('#lstInventory').attr('size', --inventorySize); }\n      if (maxSize == placesObjectsSize) { $('#lstPlacesObjects').attr('size', --placesObjectsSize); }\n\n      // if we're playing in a window that's stupidly small, don't shrink the lists any more\n      // the sensible behaviour here would probably be to set the sizes back to the actual number of items in the list, and diaplay a scrollbar for the whole sidebar\n      if (maxSize &lt; 3) { break; }\n    }\n  };\n});\n</code></pre>\n<p>(all off the top of my head. I vaguely remember there were some other style issues last time, so that might need some tweaking)<br>\n(and I just realised that you'd also want to add some code when the verb buttons are displayed to make sure that the list is resized to fit on the screen)</p>\n\n",
      "PostDate": "2019-02-18T10:46:28.2912095Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cde0f30a-e81f-40d3-85a6-cefb4a632196",
      "UserId": 232787,
      "Username": "RobBronson",
      "AvatarUrl": "https://graph.facebook.com/10206073401859041/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel...That was me that you were helping with this issue. What you gave me seemed to be working alright...until once again one of my testers piled too much stuff in one area.\r\nhttp://textadventures.co.uk/forum/quest/topic/1tx_vegry0usmwpv1g8udq/too-many-items-cant-scroll-resolved\r\n\r\nI had marked it as resolved...but seems I am still having issues. The only thing I can find to do in order to get to the verb buttons at the bottom when it is too long, is to close up panes above it. Which is a terrible way to play.",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel...That was me that you were helping with this issue. What you gave me seemed to be working alright...until once again one of my testers piled too much stuff in one area.<br>\nhttp://textadventures.co.uk/forum/quest/topic/1tx_vegry0usmwpv1g8udq/too-many-items-cant-scroll-resolved</p>\n<p>I had marked it as resolved...but seems I am still having issues. The only thing I can find to do in order to get to the verb buttons at the bottom when it is too long, is to close up panes above it. Which is a terrible way to play.</p>\n\n",
      "PostDate": "2019-02-19T20:14:24.2162374Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "45975964-bf49-4708-a249-92ca3338fe08",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for identifying the original posting Rob. That seems to be addressing the problem of pane overflow but I can't see how to increase the size of a pane up to the overflow point. In a one-room puzzle, the Places and Objects pane is much larger than any other and I'm currently finding that scrolling begins when the number of items is 10 or more. The only other pane is the Inventory and is typically one third the size, so I'd like to carve the screen up to give a quarter to the inventory and three quarters to Places and Objects, calculated on the size of the screen.\r\n\r\nI don't know enough about JS to work at that level so something that can be dropped into Quest would be ideal  :)  Sorry for asking for this on a plate but there are other like me!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for identifying the original posting Rob. That seems to be addressing the problem of pane overflow but I can't see how to increase the size of a pane up to the overflow point. In a one-room puzzle, the Places and Objects pane is much larger than any other and I'm currently finding that scrolling begins when the number of items is 10 or more. The only other pane is the Inventory and is typically one third the size, so I'd like to carve the screen up to give a quarter to the inventory and three quarters to Places and Objects, calculated on the size of the screen.</p>\n<p>I don't know enough about JS to work at that level so something that can be dropped into Quest would be ideal  :)  Sorry for asking for this on a plate but there are other like me!</p>\n\n",
      "PostDate": "2019-02-19T23:25:04.0789658Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "deb22bc2-bfb0-4e64-9d91-73d69da33c46",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I thought it was mostly working.\r\n\r\nSo we've got 2 threads where I've posted different javascript attempts at the same idea. I think between the two of them, all the code we need is there. It's just a case of properly integrating them. I'm going to take another look through playercore.css to see if there's anything in there I'm missing with regard to how the panes are laid out.\r\n\r\nCan someone link me to a game I can use for testing? I've written chunks of code on my phone, but to test them I'll likely be using my browser's javascript console. So it'd be easier to test if someone can recommend a game where I can quickly get to a point with tons of items in the placesObjects pane.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I thought it was mostly working.</p>\n<p>So we've got 2 threads where I've posted different javascript attempts at the same idea. I think between the two of them, all the code we need is there. It's just a case of properly integrating them. I'm going to take another look through playercore.css to see if there's anything in there I'm missing with regard to how the panes are laid out.</p>\n<p>Can someone link me to a game I can use for testing? I've written chunks of code on my phone, but to test them I'll likely be using my browser's javascript console. So it'd be easier to test if someone can recommend a game where I can quickly get to a point with tons of items in the placesObjects pane.</p>\n\n",
      "PostDate": "2019-02-20T10:40:16.9126785Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2401f058-ee7b-406c-8e5c-246c145277e0",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel, happy to send you a game. Can you PM an email address to me?",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel, happy to send you a game. Can you PM an email address to me?</p>\n\n",
      "PostDate": "2019-02-20T17:46:41.3905232Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "39ea5824-24bb-4aa8-bc06-5344975fe56f",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...if you can work from a published game see:\r\nhttp://textadventures.co.uk/games/view/4vyqhsn-fe_izwyfrtgj5g/escape-this-podcast-episode-1-alexs-bathroom",
      "EditableFormat": "markdown",
      "HTML": "<p>...if you can work from a published game see:<br>\nhttp://textadventures.co.uk/games/view/4vyqhsn-fe_izwyfrtgj5g/escape-this-podcast-episode-1-alexs-bathroom</p>\n\n",
      "PostDate": "2019-02-20T17:51:49.3078788Z",
      "LastEditDate": "2019-02-20T19:21:32.5975493Z",
      "link": null
    },
    {
      "PostId": "0017fdb9-2577-45c8-b829-8a12c5df8ca3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, that's perfect.\r\n\r\nOoops.\r\nI was tweaking the `size` attribute because that's what Quest's built in JS does – but it looks like that might be legacy code that doesn't do anything. (I assumed that because Quest sets a `size` attribute on it, `#lstPlacesObjects` would be a `<select>`. But it isn't, it's an `<ol>` that acts like a selectable list, so the size attribute does nothing. Maybe it used to be a `<select>`, and this bit of code is now meaningless?)\r\n\r\n\r\nOne line of javascript:\r\n```\r\n$('.elementListWrapper').css({maxHeight: 'initial'});\r\n```\r\n(\"initial\" in this case means the default value for an element of that type, which is to make it as big as all the items in the list)\r\n\r\nHowever, this causes problems if the number of items in the two panes is larger than the window.\r\nWhat would you like to happen in this case?\r\n\r\n1. Shrink the two panes proportionally. (so if placesObjects contains twice as many items as the inventory, its pane will be twice the size, and both will have scroll bars)\r\n2. Shrink the larger pane and give it a scroll bar.\r\n3. Display a single scroll bar for the whole sidebar.\r\n\r\nI think all 3 are viable choices, so it's a case of which one you prefer.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, that's perfect.</p>\n<p>Ooops.<br>\nI was tweaking the <code>size</code> attribute because that's what Quest's built in JS does – but it looks like that might be legacy code that doesn't do anything. (I assumed that because Quest sets a <code>size</code> attribute on it, <code>#lstPlacesObjects</code> would be a <code>&lt;select&gt;</code>. But it isn't, it's an <code>&lt;ol&gt;</code> that acts like a selectable list, so the size attribute does nothing. Maybe it used to be a <code>&lt;select&gt;</code>, and this bit of code is now meaningless?)</p>\n<p>One line of javascript:</p>\n<pre><code>$('.elementListWrapper').css({maxHeight: 'initial'});\n</code></pre>\n<p>(\"initial\" in this case means the default value for an element of that type, which is to make it as big as all the items in the list)</p>\n<p>However, this causes problems if the number of items in the two panes is larger than the window.<br>\nWhat would you like to happen in this case?</p>\n<ol>\n<li>Shrink the two panes proportionally. (so if placesObjects contains twice as many items as the inventory, its pane will be twice the size, and both will have scroll bars)</li>\n<li>Shrink the larger pane and give it a scroll bar.</li>\n<li>Display a single scroll bar for the whole sidebar.</li>\n</ol>\n<p>I think all 3 are viable choices, so it's a case of which one you prefer.</p>\n\n",
      "PostDate": "2019-02-20T20:09:54.7556251Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5c93f2aa-a51f-4e1c-9b0a-6c724870d523",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow mrangel, options! ...I'm not sure what 3. means?...but perhaps a more restricted structure is safer in case the Inventory pane is squeezed too much? In some of these games the Places and Objects pane may need to scroll before there are any items in the Inventory and indeed could in principle scroll when the game starts. To protect against Inventory feeling too small, it could have a fixed size of say 5, and scroll after that, with the remaining space, based on screen size, given over to Places and Objects, which then scrolls when full?\r\n\r\nPerhaps what I'm suggesting is covered by option 2 anyway? ...in a better way!",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow mrangel, options! ...I'm not sure what 3. means?...but perhaps a more restricted structure is safer in case the Inventory pane is squeezed too much? In some of these games the Places and Objects pane may need to scroll before there are any items in the Inventory and indeed could in principle scroll when the game starts. To protect against Inventory feeling too small, it could have a fixed size of say 5, and scroll after that, with the remaining space, based on screen size, given over to Places and Objects, which then scrolls when full?</p>\n<p>Perhaps what I'm suggesting is covered by option 2 anyway? ...in a better way!</p>\n\n",
      "PostDate": "2019-02-20T22:31:43.2319546Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "14733c00-139c-451b-b313-ccb39cac7d29",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another option; I didn't think of that one :)\r\n\r\nShouldn't be too hard to do; I'll take another look in the morning, because I should really be working now.\r\n\r\nI think the best approach is to create a function which adjusts the pane sizes. It should be called whenever the list of visible items is updated, when an item is selected (to account for the space taken up by newly-displayed verb buttons), and whenever the window is resized.\r\n\r\nMy initial thoughts for layout are to set:\r\n`$('#gamePanes').css({height: 'auto', minHeight: 'initial', bottom: 1});`\r\nThat prevents the sidebar from being taller than the screen, so that we can then use `$('#gamePanes').height()` to get the available space for panes, and `$('#gamePanesRunning').outerHeight(true)` will give the space currently taken up by the panes.\r\n\r\nSo…\r\n```\r\nfunction resizePanes() {\r\n  // enlarge both panes to fit their contents\r\n  $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n  // Work out how much we need to shrink the panes by.\r\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n  if (spaceNeeded > 0) {\r\n\r\n    // First see if the inventory pane can be shrunk\r\n    if ($('#lstInventory li').length > 5) {\r\n      // Work out how large (in pixels) the inventory can be to limit it to 5 items\r\n      var targetSize = $('#lstInventory li').first().outerHeight(true) * 5;\r\n\r\n      // If the window is really small, we don't want to limit the inventory to 5 items and the placesObjects to 2\r\n      // So in this case, make them both half of the available space\r\n      targetSize = Math.min(targetSize, ($('#inventoryWrapper').outerHeight(true) + $('#placesObjectsWrapper').outerHeight(true) - spaceNeeded)/2 - 1);\r\n\r\n      // reduce the spaceNeeded by the amount of space we're saving shrinking the inventory\r\n      spaceNeeded += targetSize - $('#inventoryWrapper').height();\r\n      // and if reducing the inventory to 5 items would leave a space at the bottom of the sidebar, reduce it by less\r\n      if (spaceNeeded < -1) {\r\n        targetSize -= spaceNeeded;\r\n      }\r\n      // And finally, shrink the inventory list\r\n      $('#inventoryWrapper').css({maxHeight: targetSize});\r\n    }\r\n\r\n    // Do we still need to save space?\r\n    if (spaceNeeded > 0) {\r\n      // This time it's simple: Just shrink the placesObjects list by exactly enough to fit it on the screen\r\n      $('#placesObjectsWrapper').css({maxHeight: $('#placesObjectsWrapper').height() - spaceNeeded -1});\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAll off the top of my head, but fingers crossed it might work :)\r\n\r\nIf you need the code to modify updateList and updateVerbButtons so that they call that function, I can do that in the morning when I have less work-stuff pending.",
      "EditableFormat": "markdown",
      "HTML": "<p>Another option; I didn't think of that one :)</p>\n<p>Shouldn't be too hard to do; I'll take another look in the morning, because I should really be working now.</p>\n<p>I think the best approach is to create a function which adjusts the pane sizes. It should be called whenever the list of visible items is updated, when an item is selected (to account for the space taken up by newly-displayed verb buttons), and whenever the window is resized.</p>\n<p>My initial thoughts for layout are to set:<br>\n<code>$('#gamePanes').css({height: 'auto', minHeight: 'initial', bottom: 1});</code><br>\nThat prevents the sidebar from being taller than the screen, so that we can then use <code>$('#gamePanes').height()</code> to get the available space for panes, and <code>$('#gamePanesRunning').outerHeight(true)</code> will give the space currently taken up by the panes.</p>\n<p>So…</p>\n<pre><code>function resizePanes() {\n  // enlarge both panes to fit their contents\n  $('.elementListWrapper').css({maxHeight: 'initial'});\n\n  // Work out how much we need to shrink the panes by.\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n  if (spaceNeeded &gt; 0) {\n\n    // First see if the inventory pane can be shrunk\n    if ($('#lstInventory li').length &gt; 5) {\n      // Work out how large (in pixels) the inventory can be to limit it to 5 items\n      var targetSize = $('#lstInventory li').first().outerHeight(true) * 5;\n\n      // If the window is really small, we don't want to limit the inventory to 5 items and the placesObjects to 2\n      // So in this case, make them both half of the available space\n      targetSize = Math.min(targetSize, ($('#inventoryWrapper').outerHeight(true) + $('#placesObjectsWrapper').outerHeight(true) - spaceNeeded)/2 - 1);\n\n      // reduce the spaceNeeded by the amount of space we're saving shrinking the inventory\n      spaceNeeded += targetSize - $('#inventoryWrapper').height();\n      // and if reducing the inventory to 5 items would leave a space at the bottom of the sidebar, reduce it by less\n      if (spaceNeeded &lt; -1) {\n        targetSize -= spaceNeeded;\n      }\n      // And finally, shrink the inventory list\n      $('#inventoryWrapper').css({maxHeight: targetSize});\n    }\n\n    // Do we still need to save space?\n    if (spaceNeeded &gt; 0) {\n      // This time it's simple: Just shrink the placesObjects list by exactly enough to fit it on the screen\n      $('#placesObjectsWrapper').css({maxHeight: $('#placesObjectsWrapper').height() - spaceNeeded -1});\n    }\n  }\n}\n</code></pre>\n<p>All off the top of my head, but fingers crossed it might work :)</p>\n<p>If you need the code to modify updateList and updateVerbButtons so that they call that function, I can do that in the morning when I have less work-stuff pending.</p>\n\n",
      "PostDate": "2019-02-20T23:58:31.9707834Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "75bcaee3-66f7-448e-bd88-956f56be1db1",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Many thanks mrangel, it feels like that is getting close but my lack of JS knowledge and of how inject this function into a Quest game is catching me out. I've tried using ```JS.eval (\"...\")``` around the above (taking out end of lines) and putting it into the user interface initialisation but nothing happens?",
      "EditableFormat": "markdown",
      "HTML": "<p>Many thanks mrangel, it feels like that is getting close but my lack of JS knowledge and of how inject this function into a Quest game is catching me out. I've tried using <code>JS.eval (\"...\")</code> around the above (taking out end of lines) and putting it into the user interface initialisation but nothing happens?</p>\n\n",
      "PostDate": "2019-02-21T10:52:41.0208469Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e443f84b-92f6-46c5-baa4-208b48fdc733",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you remove the line breaks, that code is one long comment.  In JS, anything after ```//1`` on a line is considered a comment.\r\n\r\nThis function begins with a comment (and has a few other comments throughout).\r\n\r\n```\r\nfunction resizePanes() {\r\n  // enlarge both panes to fit their contents\r\n  $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n  MORE CODE;\r\n}\r\n```\r\n---\r\nSo, when you remove the line breaks, you get this:\r\n\r\n```\r\nfunction resizePanes() {  // enlarge both panes to fit their contents  $('.elementListWrapper').css({maxHeight: 'initial'}); MORE CODE; }\r\n```\r\n\r\nThat may as well be this: ```function resizePanes() { // Lots of notes, and that's all. }```\r\n\r\nThe function does nothing.  Everything in the script is considered a comment, so nothing runs.\r\n\r\nIf it makes you feel better, I learned this by doing exactly what you did: I copied one of mrangel's JS functions into a ```JS.eval()``` and removed all the line breaks.  It took me quite a while to figure out why nothing was happening.  It was so frustrating, I'll never forget the lesson.  Anyway. . .\r\n\r\n---\r\nOne way to fix this is to change each line like ```// Comment text``` to ```/* Comment text */``` before removing the line breaks.\r\n\r\nAnother is to simply remove the lines that are comments before removing the line breaks.\r\n\r\nAnother is to paste mrangel's unaltered code directly into the game's Javascript in the desktop editor.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you remove the line breaks, that code is one long comment.  In JS, anything after ```//1`` on a line is considered a comment.</p>\n<p>This function begins with a comment (and has a few other comments throughout).</p>\n<pre><code>function resizePanes() {\n  // enlarge both panes to fit their contents\n  $('.elementListWrapper').css({maxHeight: 'initial'});\n\n  MORE CODE;\n}\n</code></pre>\n<hr>\n<p>So, when you remove the line breaks, you get this:</p>\n<pre><code>function resizePanes() {  // enlarge both panes to fit their contents  $('.elementListWrapper').css({maxHeight: 'initial'}); MORE CODE; }\n</code></pre>\n<p>That may as well be this: <code>function resizePanes() { // Lots of notes, and that's all. }</code></p>\n<p>The function does nothing.  Everything in the script is considered a comment, so nothing runs.</p>\n<p>If it makes you feel better, I learned this by doing exactly what you did: I copied one of mrangel's JS functions into a <code>JS.eval()</code> and removed all the line breaks.  It took me quite a while to figure out why nothing was happening.  It was so frustrating, I'll never forget the lesson.  Anyway. . .</p>\n<hr>\n<p>One way to fix this is to change each line like <code>// Comment text</code> to <code>/* Comment text */</code> before removing the line breaks.</p>\n<p>Another is to simply remove the lines that are comments before removing the line breaks.</p>\n<p>Another is to paste mrangel's unaltered code directly into the game's Javascript in the desktop editor.</p>\n\n",
      "PostDate": "2019-02-21T12:48:44.5912125Z",
      "LastEditDate": "2019-02-21T13:03:21.8414999Z",
      "link": null
    },
    {
      "PostId": "97168f2b-908f-4917-b0d4-7866299f52ba",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry KV, I did remove the comments as well, editing in Notepad++.\r\n\r\nI would like to paste the code directly into Javascript in the desktop editor, so now is the time to learn! When I try to add it,  Quest looks for a file name. Presumably this is sorting out the initial state. I couldn't see a description of how to set that up when I looked before?\r\n\r\nApologies for the 'hand-holding'!",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry KV, I did remove the comments as well, editing in Notepad++.</p>\n<p>I would like to paste the code directly into Javascript in the desktop editor, so now is the time to learn! When I try to add it,  Quest looks for a file name. Presumably this is sorting out the initial state. I couldn't see a description of how to set that up when I looked before?</p>\n<p>Apologies for the 'hand-holding'!</p>\n\n",
      "PostDate": "2019-02-21T13:04:57.324249Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca5c52e5-4a11-46d0-a6d8-b575d0f15473",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have no Windows access at the moment, but I'm pretty sure the steps are:\r\n\r\n1. Click on \"Advanced\" in the object tree (this will show you the Javascript object)\r\n\r\n2. Click on the \"Javascript\" object (you may have to name and save a JS file, but Quest will automatically initiate this for you - the name does not matter)\r\n\r\n3. Paste mrangel's code directly into the text field\r\n\r\n---\r\nEDIT\r\n\r\nTo call the function from Quest, use this line of code (probably in the game's UI Init script):\r\n\r\n```\r\nJS.resizePanes()\r\n```\r\n\r\n---\r\nEDIT 2\r\n\r\nTo call the function during play in the Quest desktop player, open the HTML tools, go to the Console tab, and enter ```resizePanes()```.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have no Windows access at the moment, but I'm pretty sure the steps are:</p>\n<ol>\n<li>\n<p>Click on \"Advanced\" in the object tree (this will show you the Javascript object)</p>\n</li>\n<li>\n<p>Click on the \"Javascript\" object (you may have to name and save a JS file, but Quest will automatically initiate this for you - the name does not matter)</p>\n</li>\n<li>\n<p>Paste mrangel's code directly into the text field</p>\n</li>\n</ol>\n<hr>\n<p>EDIT</p>\n<p>To call the function from Quest, use this line of code (probably in the game's UI Init script):</p>\n<pre><code>JS.resizePanes()\n</code></pre>\n<hr>\n<p>EDIT 2</p>\n<p>To call the function during play in the Quest desktop player, open the HTML tools, go to the Console tab, and enter <code>resizePanes()</code>.</p>\n\n",
      "PostDate": "2019-02-21T13:56:37.9484053Z",
      "LastEditDate": "2019-02-21T14:12:22.754487Z",
      "link": null
    },
    {
      "PostId": "5759372b-008d-4c7f-a59a-a0f850828ebe",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As far as I understand it, in the desktop editor javascript is like images. Save the script in a file on its own, change the file extension from `.txt` to `.js`, and then add that file to your Quest project.\r\n\r\nThat function should adjust the sizes of everything each time it is run. (if it works - I haven't debugged it yet).\r\nSo once you've got it in the game, you can go to the javascript console (Ctrl+Shift+J on Chrome) and type `resizePanes()` and it should set your panes to a sensible size. Might be worth trying resizing the window, and trying it with more or fewer items in the placesObjects and the inventory, to make sure it behaves will in different situations.\r\n\r\nOnce you've got the resizePanes function debugged and you know it works well, you can set up the code to call the function automatically each time it's needed. Something like:\r\n\r\n```\r\n// This little piece of voodoo programming encloses our \"var\" definitions so that they won't\r\n//   conflict with any of my other libraries that use this structure. As well as delaying this code's\r\n//   execution until all the javascripts have loaded. and the function definition has been executed:\r\n$(function() {\r\n\r\n  // Make a copy of the default functions\r\n  // Your game probably doesn't need all of these, but they're included so this code can be used\r\n  //   without modification in other games\r\n  var originalUpdateList = updateList;\r\n  var originalUpdateVerbButtons = updateVerbButtons;\r\n  var originalUpdateStatus = updateStatus;\r\n  var originalSetCustomStatus = setCustomStatus;\r\n  var originalUpdateStatusVisibility = updateStatusVisibility;\r\n  var originalShowStatusVisible = showStatusVisible;\r\n\r\n  // Then we replace each of those functions with one that calls the original version,\r\n  //   and then calls resizePanes()\r\n  updateList = function(name, data) {\r\n    originalUpdateList(name, data);\r\n    resizePanes();\r\n  };\r\n  updateVerbButtons = function(item, arr, prefix) {\r\n    originalUpdateVerbButtons(item, arr, prefix);\r\n    resizePanes();\r\n  };\r\n  updateStatus = function(txt) {\r\n    originalUpdateStatus(txt);\r\n    resizePanes();\r\n  };\r\n  setCustomStatus = function(txt) {\r\n    originalSetCustomStatus(txt);\r\n    resizePanes();\r\n  };\r\n  updateStatusVisibility = function() {\r\n    originalUpdateStatusVisibility();\r\n    resizePanes();\r\n  };\r\n  showStatusVisible = function(t) {\r\n    originalShowStatusVisible(t);\r\n    resizePanes();\r\n  };\r\n\r\n  // And we might also need to adjust the scroll bars when the window is resized\r\n  $(window).resize( resizePanes );\r\n});\r\n```\r\n\r\nAgain, sorry if there's any errors in there.",
      "EditableFormat": "markdown",
      "HTML": "<p>As far as I understand it, in the desktop editor javascript is like images. Save the script in a file on its own, change the file extension from <code>.txt</code> to <code>.js</code>, and then add that file to your Quest project.</p>\n<p>That function should adjust the sizes of everything each time it is run. (if it works - I haven't debugged it yet).<br>\nSo once you've got it in the game, you can go to the javascript console (Ctrl+Shift+J on Chrome) and type <code>resizePanes()</code> and it should set your panes to a sensible size. Might be worth trying resizing the window, and trying it with more or fewer items in the placesObjects and the inventory, to make sure it behaves will in different situations.</p>\n<p>Once you've got the resizePanes function debugged and you know it works well, you can set up the code to call the function automatically each time it's needed. Something like:</p>\n<pre><code>// This little piece of voodoo programming encloses our \"var\" definitions so that they won't\n//   conflict with any of my other libraries that use this structure. As well as delaying this code's\n//   execution until all the javascripts have loaded. and the function definition has been executed:\n$(function() {\n\n  // Make a copy of the default functions\n  // Your game probably doesn't need all of these, but they're included so this code can be used\n  //   without modification in other games\n  var originalUpdateList = updateList;\n  var originalUpdateVerbButtons = updateVerbButtons;\n  var originalUpdateStatus = updateStatus;\n  var originalSetCustomStatus = setCustomStatus;\n  var originalUpdateStatusVisibility = updateStatusVisibility;\n  var originalShowStatusVisible = showStatusVisible;\n\n  // Then we replace each of those functions with one that calls the original version,\n  //   and then calls resizePanes()\n  updateList = function(name, data) {\n    originalUpdateList(name, data);\n    resizePanes();\n  };\n  updateVerbButtons = function(item, arr, prefix) {\n    originalUpdateVerbButtons(item, arr, prefix);\n    resizePanes();\n  };\n  updateStatus = function(txt) {\n    originalUpdateStatus(txt);\n    resizePanes();\n  };\n  setCustomStatus = function(txt) {\n    originalSetCustomStatus(txt);\n    resizePanes();\n  };\n  updateStatusVisibility = function() {\n    originalUpdateStatusVisibility();\n    resizePanes();\n  };\n  showStatusVisible = function(t) {\n    originalShowStatusVisible(t);\n    resizePanes();\n  };\n\n  // And we might also need to adjust the scroll bars when the window is resized\n  $(window).resize( resizePanes );\n});\n</code></pre>\n<p>Again, sorry if there's any errors in there.</p>\n\n",
      "PostDate": "2019-02-21T14:03:10.9445374Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c2d83aa8-b5b6-4472-ac0c-9fbeffc8f219",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Excellent! Playing these games no longer feels like keyhole surgery!\r\n\r\nI've just played on a desktop so far and the games now play through fully without the need to scroll.  Only issue I've noticed so far  is in connection with indentation of the names in the panes, which needs a bit more exploration.\r\n\r\nI also tried tackling the second stage, of including the above code in the JS file as well. I did that to see what would happen if if I resized the window. The answer is 'nothing' at the moment, with panes simply overrunning the bottom of the page.\r\n\r\nI'll experiment further but progress so far is extremely encouraging!",
      "EditableFormat": "markdown",
      "HTML": "<p>Excellent! Playing these games no longer feels like keyhole surgery!</p>\n<p>I've just played on a desktop so far and the games now play through fully without the need to scroll.  Only issue I've noticed so far  is in connection with indentation of the names in the panes, which needs a bit more exploration.</p>\n<p>I also tried tackling the second stage, of including the above code in the JS file as well. I did that to see what would happen if if I resized the window. The answer is 'nothing' at the moment, with panes simply overrunning the bottom of the page.</p>\n<p>I'll experiment further but progress so far is extremely encouraging!</p>\n\n",
      "PostDate": "2019-02-21T16:22:44.159025Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b77a4a1b-70d1-4503-88ae-233b088c12f5",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...on a laptop the game I'm trying does build up to exceed the pane size and there is no auto-scrolling when that happens? Ignore the indentation problem for the moment...that may be me!",
      "EditableFormat": "markdown",
      "HTML": "<p>...on a laptop the game I'm trying does build up to exceed the pane size and there is no auto-scrolling when that happens? Ignore the indentation problem for the moment...that may be me!</p>\n\n",
      "PostDate": "2019-02-21T16:52:47.2615497Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b74c34a5-7ba2-42c0-ae27-079c248ade1d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… strange.\r\n\r\nIf you run `resizePanes()` from the console does it size correctly?\r\n\r\n**Edit: slightly streamlined the code below**\r\n\r\nI'm just playing with the game you linked above. The resizePanes function appears to be working, though a few of the sizes are slightly off. I think my calculations might be omitting the width of the borders or something. Pasting the second chunk of code I posted today appears to make it work. The panes are appropriately resized when I resize the window, when more items become visible, when I take or drop items, and when I select a different item which changes the number of rows of verb buttons visible.\r\n\r\nThe complete JS I'm using is:\r\n```\r\n$('#gamePanes').css({bottom: 9, minHeight: 'initial', height: 'auto'});\r\n$(function() {\r\n  // The resize function - replace this if you want to change your mind about the size\r\n  //   of each pane.\r\n  // Remove the \"var\" from this line if you need to call `JS.resizePanes()` from Quest\r\n  var resizePanes = function() {\r\n    // enlarge both panes to fit their contents\r\n    $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n    // Work out how much we need to shrink the panes by.\r\n    var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n    if (spaceNeeded > 0) {\r\n\r\n      // First see if the inventory pane can be shrunk\r\n      if ($('#lstInventory li').length > 5) {\r\n        // Work out how large (in pixels) the inventory can be to limit it to 5 items\r\n        var targetSize = $('#lstInventory li').first().outerHeight(true) * 5;\r\n\r\n        // If the window is really small, we don't want to limit the inventory to 5 items and the placesObjects to 2\r\n        // So in this case, make them both half of the available space\r\n        targetSize = Math.min(targetSize, ($('#inventoryWrapper').outerHeight(true) + $('#placesObjectsWrapper').outerHeight(true) - spaceNeeded)/2 - 1);\r\n\r\n        // reduce the spaceNeeded by the amount of space we're saving shrinking the inventory\r\n        spaceNeeded += targetSize - $('#inventoryWrapper').height();\r\n        // and if reducing the inventory to 5 items would leave a space at the bottom of the sidebar, reduce it by less\r\n        if (spaceNeeded < -1) {\r\n          targetSize -= spaceNeeded;\r\n        }\r\n        // And finally, shrink the inventory list\r\n        $('#inventoryWrapper').css({maxHeight: targetSize});\r\n      }\r\n\r\n      // Do we still need to save space?\r\n      if (spaceNeeded > 0) {\r\n        // This time it's simple: Just shrink the placesObjects list by exactly enough to fit it on the screen\r\n        $('#placesObjectsWrapper').css({maxHeight: $('#placesObjectsWrapper').height() - spaceNeeded -1});\r\n      }\r\n    }\r\n  };\r\n\r\n  // Make a copy of the default functions\r\n  // Your game probably doesn't need all of these, but they're included so this code can be used\r\n  //   without modification in other games\r\n  var originalUpdateList = updateList;\r\n  var originalUpdateVerbButtons = updateVerbButtons;\r\n  var originalUpdateStatus = updateStatus;\r\n  var originalSetCustomStatus = setCustomStatus;\r\n  var originalUpdateStatusVisibility = updateStatusVisibility;\r\n  var originalShowStatusVisible = showStatusVisible;\r\n  var originalShow = uiShow;\r\n  var originalHide = uiHide;\r\n\r\n  // Then we replace each of those functions with one that calls the original version,\r\n  //   and then calls resizePanes()\r\n  updateList = function(name, data) {\r\n    originalUpdateList(name, data);\r\n    resizePanes();\r\n  };\r\n  updateVerbButtons = function(item, arr, prefix) {\r\n    originalUpdateVerbButtons(item, arr, prefix);\r\n    resizePanes();\r\n  };\r\n  updateStatus = function(txt) {\r\n    originalUpdateStatus(txt);\r\n    resizePanes();\r\n  };\r\n  setCustomStatus = function(txt) {\r\n    originalSetCustomStatus(txt);\r\n    resizePanes();\r\n  };\r\n  updateStatusVisibility = function() {\r\n    originalUpdateStatusVisibility();\r\n    resizePanes();\r\n  };\r\n  showStatusVisible = function(t) {\r\n    originalShowStatusVisible(t);\r\n    resizePanes();\r\n  };\r\n  uiShow = function(elem) {\r\n    originalShow(elem);\r\n    resizePanes();\r\n  };\r\n  uiHide = function(elem) {\r\n    originalHide(elem);\r\n    resizePanes();\r\n  };\r\n\r\n  // And we might also need to adjust the scroll bars when the window is resized\r\n  $(window).resize( resizePanes );\r\n});\r\n```\r\n\r\nOr minified for easier pasting into Quest's UI init:\r\n```\r\nJS.eval(\"$('#gamePanes').css({bottom:9,minHeight:'initial',height:'auto'}),$(function(){var n=function(){$('.elementListWrapper').css({maxHeight:'initial'});var t=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0<t){if(5<$('#lstInventory li').length){var e=5*$('#lstInventory li').first().outerHeight(!0);(t+=(e=Math.min(e,($('#inventoryWrapper').outerHeight(!0)+$('#placesObjectsWrapper').outerHeight(!0)-t)/2-1))-$('#inventoryWrapper').height())<-1&&(e-=t),$('#inventoryWrapper').css({maxHeight:e})}0<t&&$('#placesObjectsWrapper').css({maxHeight:$('#placesObjectsWrapper').height()-t-1})}},i=updateList,s=updateVerbButtons,e=updateStatus,a=setCustomStatus,t=updateStatusVisibility,u=showStatusVisible,o=uiShow,r=uiHide;updateList=function(t,e){i(t,e),n()},updateVerbButtons=function(t,e,i){s(t,e,i),n()},updateStatus=function(t){e(t),n()},setCustomStatus=function(t){a(t),n()},updateStatusVisibility=function(){t(),n()},showStatusVisible=function(t){u(t),n()},uiShow=function(t){o(t),n()},uiHide=function(t){r(t),n()},$(window).resize(n)});\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… strange.</p>\n<p>If you run <code>resizePanes()</code> from the console does it size correctly?</p>\n<p><strong>Edit: slightly streamlined the code below</strong></p>\n<p>I'm just playing with the game you linked above. The resizePanes function appears to be working, though a few of the sizes are slightly off. I think my calculations might be omitting the width of the borders or something. Pasting the second chunk of code I posted today appears to make it work. The panes are appropriately resized when I resize the window, when more items become visible, when I take or drop items, and when I select a different item which changes the number of rows of verb buttons visible.</p>\n<p>The complete JS I'm using is:</p>\n<pre><code>$('#gamePanes').css({bottom: 9, minHeight: 'initial', height: 'auto'});\n$(function() {\n  // The resize function - replace this if you want to change your mind about the size\n  //   of each pane.\n  // Remove the \"var\" from this line if you need to call `JS.resizePanes()` from Quest\n  var resizePanes = function() {\n    // enlarge both panes to fit their contents\n    $('.elementListWrapper').css({maxHeight: 'initial'});\n\n    // Work out how much we need to shrink the panes by.\n    var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n    if (spaceNeeded &gt; 0) {\n\n      // First see if the inventory pane can be shrunk\n      if ($('#lstInventory li').length &gt; 5) {\n        // Work out how large (in pixels) the inventory can be to limit it to 5 items\n        var targetSize = $('#lstInventory li').first().outerHeight(true) * 5;\n\n        // If the window is really small, we don't want to limit the inventory to 5 items and the placesObjects to 2\n        // So in this case, make them both half of the available space\n        targetSize = Math.min(targetSize, ($('#inventoryWrapper').outerHeight(true) + $('#placesObjectsWrapper').outerHeight(true) - spaceNeeded)/2 - 1);\n\n        // reduce the spaceNeeded by the amount of space we're saving shrinking the inventory\n        spaceNeeded += targetSize - $('#inventoryWrapper').height();\n        // and if reducing the inventory to 5 items would leave a space at the bottom of the sidebar, reduce it by less\n        if (spaceNeeded &lt; -1) {\n          targetSize -= spaceNeeded;\n        }\n        // And finally, shrink the inventory list\n        $('#inventoryWrapper').css({maxHeight: targetSize});\n      }\n\n      // Do we still need to save space?\n      if (spaceNeeded &gt; 0) {\n        // This time it's simple: Just shrink the placesObjects list by exactly enough to fit it on the screen\n        $('#placesObjectsWrapper').css({maxHeight: $('#placesObjectsWrapper').height() - spaceNeeded -1});\n      }\n    }\n  };\n\n  // Make a copy of the default functions\n  // Your game probably doesn't need all of these, but they're included so this code can be used\n  //   without modification in other games\n  var originalUpdateList = updateList;\n  var originalUpdateVerbButtons = updateVerbButtons;\n  var originalUpdateStatus = updateStatus;\n  var originalSetCustomStatus = setCustomStatus;\n  var originalUpdateStatusVisibility = updateStatusVisibility;\n  var originalShowStatusVisible = showStatusVisible;\n  var originalShow = uiShow;\n  var originalHide = uiHide;\n\n  // Then we replace each of those functions with one that calls the original version,\n  //   and then calls resizePanes()\n  updateList = function(name, data) {\n    originalUpdateList(name, data);\n    resizePanes();\n  };\n  updateVerbButtons = function(item, arr, prefix) {\n    originalUpdateVerbButtons(item, arr, prefix);\n    resizePanes();\n  };\n  updateStatus = function(txt) {\n    originalUpdateStatus(txt);\n    resizePanes();\n  };\n  setCustomStatus = function(txt) {\n    originalSetCustomStatus(txt);\n    resizePanes();\n  };\n  updateStatusVisibility = function() {\n    originalUpdateStatusVisibility();\n    resizePanes();\n  };\n  showStatusVisible = function(t) {\n    originalShowStatusVisible(t);\n    resizePanes();\n  };\n  uiShow = function(elem) {\n    originalShow(elem);\n    resizePanes();\n  };\n  uiHide = function(elem) {\n    originalHide(elem);\n    resizePanes();\n  };\n\n  // And we might also need to adjust the scroll bars when the window is resized\n  $(window).resize( resizePanes );\n});\n</code></pre>\n<p>Or minified for easier pasting into Quest's UI init:</p>\n<pre><code>JS.eval(\"$('#gamePanes').css({bottom:9,minHeight:'initial',height:'auto'}),$(function(){var n=function(){$('.elementListWrapper').css({maxHeight:'initial'});var t=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0&lt;t){if(5&lt;$('#lstInventory li').length){var e=5*$('#lstInventory li').first().outerHeight(!0);(t+=(e=Math.min(e,($('#inventoryWrapper').outerHeight(!0)+$('#placesObjectsWrapper').outerHeight(!0)-t)/2-1))-$('#inventoryWrapper').height())&lt;-1&amp;&amp;(e-=t),$('#inventoryWrapper').css({maxHeight:e})}0&lt;t&amp;&amp;$('#placesObjectsWrapper').css({maxHeight:$('#placesObjectsWrapper').height()-t-1})}},i=updateList,s=updateVerbButtons,e=updateStatus,a=setCustomStatus,t=updateStatusVisibility,u=showStatusVisible,o=uiShow,r=uiHide;updateList=function(t,e){i(t,e),n()},updateVerbButtons=function(t,e,i){s(t,e,i),n()},updateStatus=function(t){e(t),n()},setCustomStatus=function(t){a(t),n()},updateStatusVisibility=function(){t(),n()},showStatusVisible=function(t){u(t),n()},uiShow=function(t){o(t),n()},uiHide=function(t){r(t),n()},$(window).resize(n)});\")\n</code></pre>\n\n",
      "PostDate": "2019-02-21T18:19:34.9477756Z",
      "LastEditDate": "2019-02-22T09:44:48.685105Z",
      "link": null
    },
    {
      "PostId": "104a9a87-6f62-4cfd-aee7-00c445dbc648",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure what the issue is here mrangel, probably something simple. I used your latest code and still have the same problem. When I try it from the console the response is a very unhelpful ```< undefined``` with a dot in the middle of the < symbol. No idea what it means nor how to find out more.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure what the issue is here mrangel, probably something simple. I used your latest code and still have the same problem. When I try it from the console the response is a very unhelpful <code>&lt; undefined</code> with a dot in the middle of the &lt; symbol. No idea what it means nor how to find out more.</p>\n\n",
      "PostDate": "2019-02-21T18:55:13.2922424Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2fa8dea-7bfd-4a67-90b1-db7af0f09dc5",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...tried the minimised version and it works!",
      "EditableFormat": "markdown",
      "HTML": "<p>...tried the minimised version and it works!</p>\n\n",
      "PostDate": "2019-02-21T18:59:27.739253Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d407368-cce1-4408-b34c-c5a792a634bd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The console displays the return value from any function you specify there. In the case of `resizePanes()` that will give `undefined` because the function doesn't return a value. It should still resize the panes.\r\n\r\nIf not, I'm not sure of the difference. I tried pasting the whole thing into the JS console on the game you linked, and it seemed to be working as intended.",
      "EditableFormat": "markdown",
      "HTML": "<p>The console displays the return value from any function you specify there. In the case of <code>resizePanes()</code> that will give <code>undefined</code> because the function doesn't return a value. It should still resize the panes.</p>\n<p>If not, I'm not sure of the difference. I tried pasting the whole thing into the JS console on the game you linked, and it seemed to be working as intended.</p>\n\n",
      "PostDate": "2019-02-21T22:41:11.653738Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c3425701-20f3-4ce2-9031-60ee046fdf50",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Maybe the function is running before the panes are created?  (Just a wild guess.  Seems like I recall running into an issue like that before.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Maybe the function is running before the panes are created?  (Just a wild guess.  Seems like I recall running into an issue like that before.)</p>\n\n",
      "PostDate": "2019-02-22T00:02:38.4015304Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5ed125b7-c658-4fb5-b4ab-4795099d308b",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mea Culpa!! I am working on several games at the same time and said there was a problem based on one that wasn't set up properly. Apologies for wasting everyone's time. I've now gone over everything more carefully, played the games, and both options seem perfect. I'll use the embedded version, even though I can't read it. Thanks mrangel and K.V. for your support...as always!",
      "EditableFormat": "markdown",
      "HTML": "<p>Mea Culpa!! I am working on several games at the same time and said there was a problem based on one that wasn't set up properly. Apologies for wasting everyone's time. I've now gone over everything more carefully, played the games, and both options seem perfect. I'll use the embedded version, even though I can't read it. Thanks mrangel and K.V. for your support...as always!</p>\n\n",
      "PostDate": "2019-02-22T09:27:58.7862737Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "753845ad-e152-4ab8-a00e-f5fb9b5f34a8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Maybe the function is running before the panes are created? (Just a wild guess. Seems like I recall running into an issue like that before.)\r\n\r\nShouldn't be. The panes are in `playercore.htm`, so they exist even if they're not visible. The `$(`…`);` block ensures that the code inside it runs after the original function definitions are loaded, so that it can override them. So the modified `updateList` will adjust the panes to the correct size as soon as Quest core sends the initial placesObjects list.\r\n\r\nHmm… it could be that the `$(`…`);` block is being run *after* the first browser sync block, so the panes aren't resized immediately.\r\n\r\nAlso, I think that in the list of overridden functions, I should probably have included `uiHide` and `uiShow`. That makes sure that the panes will resize correctly if any other element in the sidebar is shown or hidden.\r\n(When the sidebar is hidden, `resizePanes` will still be called but both the heights of the elements will be 0, meaning that `spaceNeeded` is 0 too, so nothing is resized)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Maybe the function is running before the panes are created? (Just a wild guess. Seems like I recall running into an issue like that before.)</p>\n</blockquote>\n<p>Shouldn't be. The panes are in <code>playercore.htm</code>, so they exist even if they're not visible. The <code>$(</code>…<code>);</code> block ensures that the code inside it runs after the original function definitions are loaded, so that it can override them. So the modified <code>updateList</code> will adjust the panes to the correct size as soon as Quest core sends the initial placesObjects list.</p>\n<p>Hmm… it could be that the <code>$(</code>…<code>);</code> block is being run <em>after</em> the first browser sync block, so the panes aren't resized immediately.</p>\n<p>Also, I think that in the list of overridden functions, I should probably have included <code>uiHide</code> and <code>uiShow</code>. That makes sure that the panes will resize correctly if any other element in the sidebar is shown or hidden.<br>\n(When the sidebar is hidden, <code>resizePanes</code> will still be called but both the heights of the elements will be 0, meaning that <code>spaceNeeded</code> is 0 too, so nothing is resized)</p>\n\n",
      "PostDate": "2019-02-22T09:34:35.2688268Z",
      "LastEditDate": "2019-02-22T09:35:35.7236763Z",
      "link": null
    },
    {
      "PostId": "7ea2ff54-e775-4854-bcc0-f7caa5174c85",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks again for the code! The first two games in the EtP series (Escape this Podcast) have been updated to use it, and others will follow:\r\nhttp://textadventures.co.uk/games/view/4vyqhsn-fe_izwyfrtgj5g/escape-this-podcast-episode-1-alexs-bathroom\r\nhttp://textadventures.co.uk/games/view/vd0ovejhm0_vykxj4cjhlq/escape-this-podcast-episode-2-the-speakeasy\r\n\r\nI also updated a different type of game that had been putting the panes under pressure because of a large Inventory:\r\nhttp://textadventures.co.uk/games/view/dsi4artkceuko4rslaxzlq/woo-rebooted\r\n\r\nThis has 4 panes but all worked well when the screen limit was hit. Excellent and a clear improvement to the game. \r\n\r\nThis code must be a strong candidate for inclusion in standard Quest!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks again for the code! The first two games in the EtP series (Escape this Podcast) have been updated to use it, and others will follow:<br>\nhttp://textadventures.co.uk/games/view/4vyqhsn-fe_izwyfrtgj5g/escape-this-podcast-episode-1-alexs-bathroom<br>\nhttp://textadventures.co.uk/games/view/vd0ovejhm0_vykxj4cjhlq/escape-this-podcast-episode-2-the-speakeasy</p>\n<p>I also updated a different type of game that had been putting the panes under pressure because of a large Inventory:<br>\nhttp://textadventures.co.uk/games/view/dsi4artkceuko4rslaxzlq/woo-rebooted</p>\n<p>This has 4 panes but all worked well when the screen limit was hit. Excellent and a clear improvement to the game.</p>\n<p>This code must be a strong candidate for inclusion in standard Quest!</p>\n\n",
      "PostDate": "2019-02-24T12:12:44.0551199Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "14f456c4-2efa-49f7-8833-a83a4e969b8b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> This code must be a strong candidate for inclusion in standard Quest!\r\n\r\nIf you're doing that, you'd want to give the option of adjusting the sizes of the panes in different ways.\r\n\r\nThe ones I thought of:\r\n1. Proportional sizing\r\n```\r\nfunction resizePanes() {\r\n  // enlarge both panes to fit their contents\r\n  $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n  // Work out how much we need to shrink the panes by.\r\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n  if (spaceNeeded > 0) {\r\n    // determine the total size available for the panes\r\n    var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\r\n    var availableSpace = totalHeight - spaceNeeded;\r\n\r\n    // and how much space each list should be sized to\r\n    var inventoryHeight = Math.floor($('#inventoryWrapper').height() * availableSpace / totalHeight);\r\n    var placesObjectsHeight = Math.floor($('#placesObjectsWrapper').height() * availableSpace / totalHeight);\r\n\r\n    // make sure that there's actually space for both lists\r\n    //   (if the window is really small or there are other panes that are huge, don't shrink the lists)\r\n    var sizeMinimum = $('.elementList').children('li').outerHeight() * 2;\r\n    if (availableSpace > sizeMinimum * 2) {\r\n      if (inventoryHeight < sizeMinimum) {\r\n        inventoryHeight = sizeMinimum;\r\n        placesObjectsHeight = availableSpace - inventoryHeight;\r\n      } elsif (placesObjectsHeight < sizeMinimum) {\r\n        placesObjectsHeight = sizeMinimum;\r\n        inventoryHeight = availableSpace - placesObjectsHeight;\r\n      }\r\n      $('#placesObjectsWrapper').css({maxHeight: placesObjectsHeight});\r\n      $('#inventoryWrapper').css({maxHeight: inventoryHeight});\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. \"largest first\" sizing\r\n```\r\nfunction resizePanes() {\r\n  // enlarge both panes to fit their contents\r\n  $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n  // Work out how much we need to shrink the panes by.\r\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n  if (spaceNeeded > 0) {\r\n\r\n    // find out if shrinking the larger pane to the size of the smaller one would be sufficient\r\n    var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\r\n    var smallerHeight = Math.min($('#inventoryWrapper').height(), $('placesObjectsWrapper').height());\r\n\r\n    var targetHeight = (totalHeight - spaceNeeded > smallerHeight * 2) ? (totalHeight - smallerHeight - spaceNeeded) : Math.floor((totalHeight - spaceNeeded) / 2);\r\n\r\n    // And make sure there's enough space before shrinking\r\n    if (targetHeight > $('.elementList').children('li').outerHeight() * 3) {\r\n      $('.elementListWrapper').css({maxHeight: targetHeight});\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\nI think either of those should work with the script I posted before.\r\nBut if you add:\r\n```\r\n$('#gamePanes').css({width: 250, overflowX: 'hidden', overflowY: 'auto'});\r\n$('#gamePanesRunning #gamePanesFinished').css({width: 216, right: 32});\r\n```\r\nto the start of the script, I *think* that should fix the issues with very small windows.\r\n(if resizePanes can't shrink the panes by adding a scroll bar to one or both, for example because a very small window is entirely taken up by the compass and status panes, a single long scroll bar will appear to let you scroll the entire sidebar)\r\n\r\nThis would allow my option 3 from the ones I suggested above:\r\n3. No individual scroll bars.\r\n```\r\nfunction resizePanes() {\r\n  $('.elementListWrapper').css({maxHeight: 'initial'});\r\n}\r\n```\r\n\r\nI think if this was part of the core, you'd probably want to include a couple of different resize functions, and maybe use a global variable to choose between them.\r\n\r\nI'm also trying to think of ways to make this work with an arbitrary number of panes (for example, I believe there's a mod out there that adds a new pane for a spellbook or similar, or gives separate inventory and backpack panes.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This code must be a strong candidate for inclusion in standard Quest!</p>\n</blockquote>\n<p>If you're doing that, you'd want to give the option of adjusting the sizes of the panes in different ways.</p>\n<p>The ones I thought of:</p>\n<ol>\n<li>Proportional sizing</li>\n</ol>\n<pre><code>function resizePanes() {\n  // enlarge both panes to fit their contents\n  $('.elementListWrapper').css({maxHeight: 'initial'});\n\n  // Work out how much we need to shrink the panes by.\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n  if (spaceNeeded &gt; 0) {\n    // determine the total size available for the panes\n    var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\n    var availableSpace = totalHeight - spaceNeeded;\n\n    // and how much space each list should be sized to\n    var inventoryHeight = Math.floor($('#inventoryWrapper').height() * availableSpace / totalHeight);\n    var placesObjectsHeight = Math.floor($('#placesObjectsWrapper').height() * availableSpace / totalHeight);\n\n    // make sure that there's actually space for both lists\n    //   (if the window is really small or there are other panes that are huge, don't shrink the lists)\n    var sizeMinimum = $('.elementList').children('li').outerHeight() * 2;\n    if (availableSpace &gt; sizeMinimum * 2) {\n      if (inventoryHeight &lt; sizeMinimum) {\n        inventoryHeight = sizeMinimum;\n        placesObjectsHeight = availableSpace - inventoryHeight;\n      } elsif (placesObjectsHeight &lt; sizeMinimum) {\n        placesObjectsHeight = sizeMinimum;\n        inventoryHeight = availableSpace - placesObjectsHeight;\n      }\n      $('#placesObjectsWrapper').css({maxHeight: placesObjectsHeight});\n      $('#inventoryWrapper').css({maxHeight: inventoryHeight});\n    }\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>\"largest first\" sizing</li>\n</ol>\n<pre><code>function resizePanes() {\n  // enlarge both panes to fit their contents\n  $('.elementListWrapper').css({maxHeight: 'initial'});\n\n  // Work out how much we need to shrink the panes by.\n  var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n  if (spaceNeeded &gt; 0) {\n\n    // find out if shrinking the larger pane to the size of the smaller one would be sufficient\n    var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\n    var smallerHeight = Math.min($('#inventoryWrapper').height(), $('placesObjectsWrapper').height());\n\n    var targetHeight = (totalHeight - spaceNeeded &gt; smallerHeight * 2) ? (totalHeight - smallerHeight - spaceNeeded) : Math.floor((totalHeight - spaceNeeded) / 2);\n\n    // And make sure there's enough space before shrinking\n    if (targetHeight &gt; $('.elementList').children('li').outerHeight() * 3) {\n      $('.elementListWrapper').css({maxHeight: targetHeight});\n    }\n  }\n}\n</code></pre>\n<p>I think either of those should work with the script I posted before.<br>\nBut if you add:</p>\n<pre><code>$('#gamePanes').css({width: 250, overflowX: 'hidden', overflowY: 'auto'});\n$('#gamePanesRunning #gamePanesFinished').css({width: 216, right: 32});\n</code></pre>\n<p>to the start of the script, I <em>think</em> that should fix the issues with very small windows.<br>\n(if resizePanes can't shrink the panes by adding a scroll bar to one or both, for example because a very small window is entirely taken up by the compass and status panes, a single long scroll bar will appear to let you scroll the entire sidebar)</p>\n<p>This would allow my option 3 from the ones I suggested above:</p>\n<ol start=\"3\">\n<li>No individual scroll bars.</li>\n</ol>\n<pre><code>function resizePanes() {\n  $('.elementListWrapper').css({maxHeight: 'initial'});\n}\n</code></pre>\n<p>I think if this was part of the core, you'd probably want to include a couple of different resize functions, and maybe use a global variable to choose between them.</p>\n<p>I'm also trying to think of ways to make this work with an arbitrary number of panes (for example, I believe there's a mod out there that adds a new pane for a spellbook or similar, or gives separate inventory and backpack panes.)</p>\n\n",
      "PostDate": "2019-02-25T21:25:12.3626428Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13f6b7b3-bd66-4da7-81a8-9007d452f466",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, trying to put all that together…\r\n```\r\n$(function() {\r\n  $('#gamePanes').css({bottom: 9, minHeight: 'initial', height: 'auto', width: 250, overflowX: 'hidden', overflowY: 'auto'});\r\n  $('#gamePanesRunning #gamePanesFinished').css({width: 216, right: 32});\r\n\r\n  // Include a set of resize functions to choose from\r\n  var builtInResizeFunctions = {\r\n    proportional: function() {\r\n      // enlarge both panes to fit their contents\r\n      $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n      // Work out how much we need to shrink the panes by.\r\n      var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n      if (spaceNeeded > 0) {\r\n        // determine the total size available for the panes\r\n        var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\r\n        var availableSpace = totalHeight - spaceNeeded;\r\n\r\n        // and how much space each list should be sized to\r\n        var inventoryHeight = Math.floor($('#inventoryWrapper').height() * availableSpace / totalHeight);\r\n        var placesObjectsHeight = Math.floor($('#placesObjectsWrapper').height() * availableSpace / totalHeight);\r\n\r\n        // make sure that there's actually space for both lists\r\n        //   (if the window is really small or there are other panes that are huge, don't shrink the lists)\r\n        var sizeMinimum = $('.elementList').children('li').outerHeight() * 2;\r\n        if (availableSpace > sizeMinimum * 2) {\r\n          if (inventoryHeight < sizeMinimum) {\r\n            inventoryHeight = sizeMinimum;\r\n            placesObjectsHeight = availableSpace - inventoryHeight;\r\n          } else if (placesObjectsHeight < sizeMinimum) {\r\n            placesObjectsHeight = sizeMinimum;\r\n            inventoryHeight = availableSpace - placesObjectsHeight;\r\n          }\r\n          $('#placesObjectsWrapper').css({maxHeight: placesObjectsHeight});\r\n          $('#inventoryWrapper').css({maxHeight: inventoryHeight});\r\n        }\r\n      }\r\n    },\r\n    equal: function() {\r\n      // enlarge both panes to fit their contents\r\n      $('.elementListWrapper').css({maxHeight: 'initial'});\r\n\r\n      // Work out how much we need to shrink the panes by.\r\n      var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\r\n      if (spaceNeeded > 0) {\r\n\r\n        // find out if shrinking the larger pane to the size of the smaller one would be sufficient\r\n        var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\r\n        var smallerHeight = Math.min($('#inventoryWrapper').height(), $('placesObjectsWrapper').height());\r\n\r\n        var targetHeight = (totalHeight - spaceNeeded > smallerHeight * 2) ?\r\n          (totalHeight - smallerHeight - spaceNeeded) :\r\n          Math.floor((totalHeight - spaceNeeded) / 2);\r\n\r\n        // And make sure there's enough space before shrinking\r\n        if (targetHeight > $('.elementList').children('li').outerHeight() * 3) {\r\n          $('.elementListWrapper').css({maxHeight: targetHeight});\r\n        }\r\n      }\r\n    },\r\n    'global': function() {\r\n      $('.elementListWrapper').css({maxHeight: 'initial'});\r\n    }\r\n  };\r\n\r\n  // The resize function is in a framed variable to let it be modified.\r\n  // By default it does nothing\r\n  var resizePanes = function() {};\r\n\r\n  changePaneResizeMode = function (mode) {\r\n    if (typeof mode == 'function') {\r\n      resizePanes = mode;\r\n    } else if (builtInResizeFunctions[mode]) {\r\n      resizePanes = builtInResizeFunctions[mode];\r\n    } else if (mode) {\r\n      resizePanes = eval(mode);\r\n    } else {\r\n      resizePanes = builtInResizeFunctions['equal'];\r\n    }\r\n    // And resize now, to make sure everything is initially set up right\r\n    resizePanes();\r\n  };\r\n\r\n  // Make a copy of the default functions\r\n  // Your game probably doesn't need all of these, but they're included so this code can be used\r\n  //   without modification in other games\r\n  var originalUpdateList = updateList;\r\n  var originalUpdateVerbButtons = updateVerbButtons;\r\n  var originalUpdateStatus = updateStatus;\r\n  var originalSetCustomStatus = setCustomStatus;\r\n  var originalUpdateStatusVisibility = updateStatusVisibility;\r\n  var originalShowStatusVisible = showStatusVisible;\r\n  var originalShow = uiShow;\r\n  var originalHide = uiHide;\r\n\r\n  // Then we replace each of those functions with one that calls the original version,\r\n  //   and then calls resizePanes()\r\n  updateList = function(name, data) {\r\n    originalUpdateList(name, data);\r\n    resizePanes();\r\n  };\r\n  updateVerbButtons = function(item, arr, prefix) {\r\n    originalUpdateVerbButtons(item, arr, prefix);\r\n    resizePanes();\r\n  };\r\n  updateStatus = function(txt) {\r\n    originalUpdateStatus(txt);\r\n    resizePanes();\r\n  };\r\n  setCustomStatus = function(txt) {\r\n    originalSetCustomStatus(txt);\r\n    resizePanes();\r\n  };\r\n  updateStatusVisibility = function() {\r\n    originalUpdateStatusVisibility();\r\n    resizePanes();\r\n  };\r\n  showStatusVisible = function(t) {\r\n    originalShowStatusVisible(t);\r\n    resizePanes();\r\n  };\r\n  uiShow = function(elem) {\r\n    originalShow(elem);\r\n    resizePanes();\r\n  };\r\n  uiHide = function(elem) {\r\n    originalHide(elem);\r\n    resizePanes();\r\n  };\r\n\r\n  // And we might also need to adjust the scroll bars when the window is resized\r\n  $(window).resize( function() { resizePanes(); } );\r\n});\r\n```\r\n\r\nHaven't tested that yet, but it would minify to:\r\n```\r\nJS.eval(\"$(function(){$('#gamePanes').css({bottom:9,minHeight:'initial',height:'auto',width:250,overflowX:'hidden',overflowY:'auto'}),$('#gamePanesRunning #gamePanesFinished').css({width:216,right:32});var t={proportional:function(){$('.elementListWrapper').css({maxHeight:'initial'});var e=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0<e){var t=$('#inventoryWrapper').height()+$('placesObjectsWrapper').height(),i=t-e,n=Math.floor($('#inventoryWrapper').height()*i/t),a=Math.floor($('#placesObjectsWrapper').height()*i/t),s=2*$('.elementList').children('li').outerHeight();2*s<i&&(n<s?a=i-(n=s):a<s&&(n=i-(a=s)),$('#placesObjectsWrapper').css({maxHeight:a}),$('#inventoryWrapper').css({maxHeight:n}))}},equal:function(){$('.elementListWrapper').css({maxHeight:'initial'});var e=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0<e){var t=$('#inventoryWrapper').height()+$('placesObjectsWrapper').height(),i=Math.min($('#inventoryWrapper').height(),$('placesObjectsWrapper').height()),n=2*i<t-e?t-i-e:Math.floor((t-e)/2);n>3*$('.elementList').children('li').outerHeight()&&$('.elementListWrapper').css({maxHeight:n})}},global:function(){$('.elementListWrapper').css({maxHeight:'initial'})}},n=function(){};changePaneResizeMode=function(e){(n='function'==typeof e?e:t[e]?t[e]:e?eval(e):t.equal)()};var i=updateList,a=updateVerbButtons,s=updateStatus,r=setCustomStatus,e=updateStatusVisibility,o=showStatusVisible,u=uiShow,h=uiHide;updateList=function(e,t){i(e,t),n()},updateVerbButtons=function(e,t,i){a(e,t,i),n()},updateStatus=function(e){s(e),n()},setCustomStatus=function(e){r(e),n()},updateStatusVisibility=function(){e(),n()},showStatusVisible=function(e){o(e),n()},uiShow=function(e){u(e),n()},uiHide=function(e){h(e),n()},$(window).resize(function(){n()})});\")\r\n```\r\nAnd you could then adjust the resizing mode of the panes by doing one of:\r\n* `JS.changePaneResizeMode(\"proportional\")`\r\n* `JS.changePaneResizeMode(\"equal\")`\r\n* `JS.changePaneResizeMode(\"global\")`\r\n\r\n\r\nHave I made any dumb mistakes there?",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, trying to put all that together…</p>\n<pre><code>$(function() {\n  $('#gamePanes').css({bottom: 9, minHeight: 'initial', height: 'auto', width: 250, overflowX: 'hidden', overflowY: 'auto'});\n  $('#gamePanesRunning #gamePanesFinished').css({width: 216, right: 32});\n\n  // Include a set of resize functions to choose from\n  var builtInResizeFunctions = {\n    proportional: function() {\n      // enlarge both panes to fit their contents\n      $('.elementListWrapper').css({maxHeight: 'initial'});\n\n      // Work out how much we need to shrink the panes by.\n      var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n      if (spaceNeeded &gt; 0) {\n        // determine the total size available for the panes\n        var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\n        var availableSpace = totalHeight - spaceNeeded;\n\n        // and how much space each list should be sized to\n        var inventoryHeight = Math.floor($('#inventoryWrapper').height() * availableSpace / totalHeight);\n        var placesObjectsHeight = Math.floor($('#placesObjectsWrapper').height() * availableSpace / totalHeight);\n\n        // make sure that there's actually space for both lists\n        //   (if the window is really small or there are other panes that are huge, don't shrink the lists)\n        var sizeMinimum = $('.elementList').children('li').outerHeight() * 2;\n        if (availableSpace &gt; sizeMinimum * 2) {\n          if (inventoryHeight &lt; sizeMinimum) {\n            inventoryHeight = sizeMinimum;\n            placesObjectsHeight = availableSpace - inventoryHeight;\n          } else if (placesObjectsHeight &lt; sizeMinimum) {\n            placesObjectsHeight = sizeMinimum;\n            inventoryHeight = availableSpace - placesObjectsHeight;\n          }\n          $('#placesObjectsWrapper').css({maxHeight: placesObjectsHeight});\n          $('#inventoryWrapper').css({maxHeight: inventoryHeight});\n        }\n      }\n    },\n    equal: function() {\n      // enlarge both panes to fit their contents\n      $('.elementListWrapper').css({maxHeight: 'initial'});\n\n      // Work out how much we need to shrink the panes by.\n      var spaceNeeded = $('#gamePanesRunning').outerHeight(true) - $('#gamePanes').height();\n      if (spaceNeeded &gt; 0) {\n\n        // find out if shrinking the larger pane to the size of the smaller one would be sufficient\n        var totalHeight = $('#inventoryWrapper').height() + $('placesObjectsWrapper').height();\n        var smallerHeight = Math.min($('#inventoryWrapper').height(), $('placesObjectsWrapper').height());\n\n        var targetHeight = (totalHeight - spaceNeeded &gt; smallerHeight * 2) ?\n          (totalHeight - smallerHeight - spaceNeeded) :\n          Math.floor((totalHeight - spaceNeeded) / 2);\n\n        // And make sure there's enough space before shrinking\n        if (targetHeight &gt; $('.elementList').children('li').outerHeight() * 3) {\n          $('.elementListWrapper').css({maxHeight: targetHeight});\n        }\n      }\n    },\n    'global': function() {\n      $('.elementListWrapper').css({maxHeight: 'initial'});\n    }\n  };\n\n  // The resize function is in a framed variable to let it be modified.\n  // By default it does nothing\n  var resizePanes = function() {};\n\n  changePaneResizeMode = function (mode) {\n    if (typeof mode == 'function') {\n      resizePanes = mode;\n    } else if (builtInResizeFunctions[mode]) {\n      resizePanes = builtInResizeFunctions[mode];\n    } else if (mode) {\n      resizePanes = eval(mode);\n    } else {\n      resizePanes = builtInResizeFunctions['equal'];\n    }\n    // And resize now, to make sure everything is initially set up right\n    resizePanes();\n  };\n\n  // Make a copy of the default functions\n  // Your game probably doesn't need all of these, but they're included so this code can be used\n  //   without modification in other games\n  var originalUpdateList = updateList;\n  var originalUpdateVerbButtons = updateVerbButtons;\n  var originalUpdateStatus = updateStatus;\n  var originalSetCustomStatus = setCustomStatus;\n  var originalUpdateStatusVisibility = updateStatusVisibility;\n  var originalShowStatusVisible = showStatusVisible;\n  var originalShow = uiShow;\n  var originalHide = uiHide;\n\n  // Then we replace each of those functions with one that calls the original version,\n  //   and then calls resizePanes()\n  updateList = function(name, data) {\n    originalUpdateList(name, data);\n    resizePanes();\n  };\n  updateVerbButtons = function(item, arr, prefix) {\n    originalUpdateVerbButtons(item, arr, prefix);\n    resizePanes();\n  };\n  updateStatus = function(txt) {\n    originalUpdateStatus(txt);\n    resizePanes();\n  };\n  setCustomStatus = function(txt) {\n    originalSetCustomStatus(txt);\n    resizePanes();\n  };\n  updateStatusVisibility = function() {\n    originalUpdateStatusVisibility();\n    resizePanes();\n  };\n  showStatusVisible = function(t) {\n    originalShowStatusVisible(t);\n    resizePanes();\n  };\n  uiShow = function(elem) {\n    originalShow(elem);\n    resizePanes();\n  };\n  uiHide = function(elem) {\n    originalHide(elem);\n    resizePanes();\n  };\n\n  // And we might also need to adjust the scroll bars when the window is resized\n  $(window).resize( function() { resizePanes(); } );\n});\n</code></pre>\n<p>Haven't tested that yet, but it would minify to:</p>\n<pre><code>JS.eval(\"$(function(){$('#gamePanes').css({bottom:9,minHeight:'initial',height:'auto',width:250,overflowX:'hidden',overflowY:'auto'}),$('#gamePanesRunning #gamePanesFinished').css({width:216,right:32});var t={proportional:function(){$('.elementListWrapper').css({maxHeight:'initial'});var e=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0&lt;e){var t=$('#inventoryWrapper').height()+$('placesObjectsWrapper').height(),i=t-e,n=Math.floor($('#inventoryWrapper').height()*i/t),a=Math.floor($('#placesObjectsWrapper').height()*i/t),s=2*$('.elementList').children('li').outerHeight();2*s&lt;i&amp;&amp;(n&lt;s?a=i-(n=s):a&lt;s&amp;&amp;(n=i-(a=s)),$('#placesObjectsWrapper').css({maxHeight:a}),$('#inventoryWrapper').css({maxHeight:n}))}},equal:function(){$('.elementListWrapper').css({maxHeight:'initial'});var e=$('#gamePanesRunning').outerHeight(!0)-$('#gamePanes').height();if(0&lt;e){var t=$('#inventoryWrapper').height()+$('placesObjectsWrapper').height(),i=Math.min($('#inventoryWrapper').height(),$('placesObjectsWrapper').height()),n=2*i&lt;t-e?t-i-e:Math.floor((t-e)/2);n&gt;3*$('.elementList').children('li').outerHeight()&amp;&amp;$('.elementListWrapper').css({maxHeight:n})}},global:function(){$('.elementListWrapper').css({maxHeight:'initial'})}},n=function(){};changePaneResizeMode=function(e){(n='function'==typeof e?e:t[e]?t[e]:e?eval(e):t.equal)()};var i=updateList,a=updateVerbButtons,s=updateStatus,r=setCustomStatus,e=updateStatusVisibility,o=showStatusVisible,u=uiShow,h=uiHide;updateList=function(e,t){i(e,t),n()},updateVerbButtons=function(e,t,i){a(e,t,i),n()},updateStatus=function(e){s(e),n()},setCustomStatus=function(e){r(e),n()},updateStatusVisibility=function(){e(),n()},showStatusVisible=function(e){o(e),n()},uiShow=function(e){u(e),n()},uiHide=function(e){h(e),n()},$(window).resize(function(){n()})});\")\n</code></pre>\n<p>And you could then adjust the resizing mode of the panes by doing one of:</p>\n<ul>\n<li><code>JS.changePaneResizeMode(\"proportional\")</code></li>\n<li><code>JS.changePaneResizeMode(\"equal\")</code></li>\n<li><code>JS.changePaneResizeMode(\"global\")</code></li>\n</ul>\n<p>Have I made any dumb mistakes there?</p>\n\n",
      "PostDate": "2019-02-25T22:28:58.8676299Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1185c803-4046-4322-bcd7-4505617be5ef",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Tried it out. Just one issue. Should the 250 in ```$('#gamePanes').css({width: 250, overflowX: 'hidden', overflowY: 'auto'});``` be 216?\r\n\r\nAll three modes feel like a huge step forward from the current restricted sizes! ...and I'd be happy with any of them in the games I've worked on.",
      "EditableFormat": "markdown",
      "HTML": "<p>Tried it out. Just one issue. Should the 250 in <code>$('#gamePanes').css({width: 250, overflowX: 'hidden', overflowY: 'auto'});</code> be 216?</p>\n<p>All three modes feel like a huge step forward from the current restricted sizes! ...and I'd be happy with any of them in the games I've worked on.</p>\n\n",
      "PostDate": "2019-02-27T08:03:07.0445931Z",
      "LastEditDate": "2019-02-27T16:37:21.449263Z",
      "link": null
    }
  ]
}
