{
  "Topic": {
    "TopicId": "1199",
    "ForumId": "10",
    "Title": "Containers",
    "LastUpdated": "2006-07-25T14:42:07+01:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "9101",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "How would you like to see containers implemented?\n\nMy initial thoughts would be to have ASL like the following:\n\n[code:12fq6jcr]\ndefine object &lt;backpack&gt;\n\tadd &#123;\n\t\tif &#40; #&#40;quest&#46;thing&#41;&#58;size# &gt; 50 &#41; then msg &lt;That's way too big&#46;&gt;\n\t\telse &#123;\n\t\t\tmove &lt;#quest&#46;thing#; backpack&gt;\n\t\t\tmsg &lt;You add #&#40;quest&#46;thing&#41;&#58;article# to the backpack&#46;&gt;\n\t\t&#125;\n\t&#125;\n\t\n\tremove &#123;\n\t\tmove &lt;#quest&#46;thing#; #quest&#46;currentroom#&gt;\n\t\tmsg &lt;You take #&#40;quest&#46;thing&#41;&#58;article# out of the backpack&#46;&gt;\n\t&#125;\n\t\n\tlook empty &lt;It's an empty backpack&#46;&gt;\n\tlook contents &lt;It's a backpack, containing #quest&#46;contents#&gt;\n\nend define\n[/code:12fq6jcr]\n\nThe &quot;add&quot; tag defines code for when things are added to the object, and &quot;remove&quot; defines code for when things are taken out. As with other Quest tags, you could also use:\n\n[code:12fq6jcr]\nadd &lt;You put it in the bag&#46;&gt;\n[/code:12fq6jcr]\n\nor just\n\n[code:12fq6jcr]\nadd\n[/code:12fq6jcr]\n\nto allow things to be added automatically.\n\nIs this flexible and easy enough? Is there any functionality that I have missed?",
      "EditableFormat": "bbcode",
      "HTML": "How would you like to see containers implemented?<br/><br/>My initial thoughts would be to have ASL like the following:<br/><br/><pre><code><br/>define object &lt;backpack&gt;<br/>\tadd &#123;<br/>\t\tif &#40; #&#40;quest&#46;thing&#41;&#58;size# &gt; 50 &#41; then msg &lt;That's way too big&#46;&gt;<br/>\t\telse &#123;<br/>\t\t\tmove &lt;#quest&#46;thing#; backpack&gt;<br/>\t\t\tmsg &lt;You add #&#40;quest&#46;thing&#41;&#58;article# to the backpack&#46;&gt;<br/>\t\t&#125;<br/>\t&#125;<br/>\t<br/>\tremove &#123;<br/>\t\tmove &lt;#quest&#46;thing#; #quest&#46;currentroom#&gt;<br/>\t\tmsg &lt;You take #&#40;quest&#46;thing&#41;&#58;article# out of the backpack&#46;&gt;<br/>\t&#125;<br/>\t<br/>\tlook empty &lt;It's an empty backpack&#46;&gt;<br/>\tlook contents &lt;It's a backpack, containing #quest&#46;contents#&gt;<br/><br/>end define<br/></code></pre><br/><br/>The &quot;add&quot; tag defines code for when things are added to the object, and &quot;remove&quot; defines code for when things are taken out. As with other Quest tags, you could also use:<br/><br/><pre><code><br/>add &lt;You put it in the bag&#46;&gt;<br/></code></pre><br/><br/>or just<br/><br/><pre><code><br/>add<br/></code></pre><br/><br/>to allow things to be added automatically.<br/><br/>Is this flexible and easy enough? Is there any functionality that I have missed?",
      "PostDate": "2006-07-05T21:37:11+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9115",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "We'll obviously get a couple of questions saying &quot;how do you limit by weight&quot; or &quot;limit by number&quot;.. Which should be easy to add via coding.\n\nJust saw the #quest.contents# bit..\nWhat does this actually refer to?\nAlso, what format does it come out as?\n\nSay we have a backpack and a toybox - both containing objects.. You the toybox be inside #quest.thing# and the contents be inside #quest.contents#?\nWould it not be easier having something like #object:contents# ?\nOr perhaps an array of some sort, which would be good for custom descriptions, quickly getting a count of how many objects there are inside a container, etc. All [i:wldim4fc]could[/i:wldim4fc] be stored as properties...\nHow are we to check if an object's inside a container?\nis it going to be able to be treated as a room?\n\nSo if we use the $getloc(teddybear)$ we get the &quot;toybox&quot; room returned?\n\nHow about the useful verbs - will look automatically look inside container objects in the current room?\n\nIe:\n[code:wldim4fc]&gt; look in toybox\nThe toybox contains a teddybear and a transformer!\n&gt; look at transformer\nThe transformer is an old one you recieved for your 10th birthday&#46; This one is an airplane at the moment&#46;[/code:wldim4fc]\n\nAs far as I know, there isn't a real 'function' you've missed out there...\n\nI take it you'll have &quot;empty&quot; to remove everything from a container? Perhaps fill to take everything from inventory (one at a time I hope) and put it into a container (just incase the object won't fit/etc).\n\nI hope this has given you something to think about.",
      "EditableFormat": "bbcode",
      "HTML": "We'll obviously get a couple of questions saying &quot;how do you limit by weight&quot; or &quot;limit by number&quot;.. Which should be easy to add via coding.<br/><br/>Just saw the #quest.contents# bit..<br/>What does this actually refer to?<br/>Also, what format does it come out as?<br/><br/>Say we have a backpack and a toybox - both containing objects.. You the toybox be inside #quest.thing# and the contents be inside #quest.contents#?<br/>Would it not be easier having something like #object:contents# ?<br/>Or perhaps an array of some sort, which would be good for custom descriptions, quickly getting a count of how many objects there are inside a container, etc. All <span style=\"font-style:italic;\">could</span> be stored as properties...<br/>How are we to check if an object's inside a container?<br/>is it going to be able to be treated as a room?<br/><br/>So if we use the $getloc(teddybear)$ we get the &quot;toybox&quot; room returned?<br/><br/>How about the useful verbs - will look automatically look inside container objects in the current room?<br/><br/>Ie:<br/><pre><code>&gt; look in toybox<br/>The toybox contains a teddybear and a transformer!<br/>&gt; look at transformer<br/>The transformer is an old one you recieved for your 10th birthday&#46; This one is an airplane at the moment&#46;</code></pre><br/><br/>As far as I know, there isn't a real 'function' you've missed out there...<br/><br/>I take it you'll have &quot;empty&quot; to remove everything from a container? Perhaps fill to take everything from inventory (one at a time I hope) and put it into a container (just incase the object won't fit/etc).<br/><br/>I hope this has given you something to think about.",
      "PostDate": "2006-07-05T23:07:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9922",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:2qj6gkqi]is it going to be able to be treated as a room? [/quote:2qj6gkqi]\n\nand\n\n[quote:2qj6gkqi]How about the useful verbs - will look automatically look inside container objects in the current room?[/quote:2qj6gkqi]\n\nI am interested in the answer to these questions myself.  If container objects are to have correlated inventory rooms, then verbs such as 'look' will have to check each 'open', 'accessible' container.  Here's a scenario:\n\nI enter a room where there is a bucket container.  This container is always 'open', but it is hidden underneath a table.  I 'look under the table'.  This makes the bucket 'accessible'.  But I have not looked in the bucket yet.  There is a key in it.  I 'look in the bucket'.  Now the key can be made accessible to common verbs 1) here, 2) when I discovered the 'open' bucket, or 3) right from the get go.\n\nI guess it all depends on how I want to structure the room.  Is finding the key a puzzle, albeit simplistic?  Perhaps I want the key accessible immediately.  If the container is [i:2qj6gkqi]transparent[/i:2qj6gkqi], then at point 2 I'd want the key made accessible to common verbs (such as get, look, etc.)  In any case, I'm interested in how this would work for Quest 4.0.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>is it going to be able to be treated as a room? </p></blockquote><br/><br/>and<br/><br/><blockquote><p>How about the useful verbs - will look automatically look inside container objects in the current room?</p></blockquote><br/><br/>I am interested in the answer to these questions myself.  If container objects are to have correlated inventory rooms, then verbs such as 'look' will have to check each 'open', 'accessible' container.  Here's a scenario:<br/><br/>I enter a room where there is a bucket container.  This container is always 'open', but it is hidden underneath a table.  I 'look under the table'.  This makes the bucket 'accessible'.  But I have not looked in the bucket yet.  There is a key in it.  I 'look in the bucket'.  Now the key can be made accessible to common verbs 1) here, 2) when I discovered the 'open' bucket, or 3) right from the get go.<br/><br/>I guess it all depends on how I want to structure the room.  Is finding the key a puzzle, albeit simplistic?  Perhaps I want the key accessible immediately.  If the container is <span style=\"font-style:italic;\">transparent</span>, then at point 2 I'd want the key made accessible to common verbs (such as get, look, etc.)  In any case, I'm interested in how this would work for Quest 4.0.",
      "PostDate": "2006-07-22T02:25:08+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9953",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Any chance you'll loosen the distinction between rooms and objects?",
      "EditableFormat": "bbcode",
      "HTML": "Any chance you'll loosen the distinction between rooms and objects?",
      "PostDate": "2006-07-24T05:19:01+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9954",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "In what sense were you thinking the distinction could be loosened?",
      "EditableFormat": "bbcode",
      "HTML": "In what sense were you thinking the distinction could be loosened?",
      "PostDate": "2006-07-24T10:42:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9955",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Take a look at Inform, TADS, Hugo, or even AGT.",
      "EditableFormat": "bbcode",
      "HTML": "Take a look at Inform, TADS, Hugo, or even AGT.",
      "PostDate": "2006-07-24T12:45:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9957",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Well, rather than me go through all that, it would be most pleasant if you could just elucidate.  A sentence or two.",
      "EditableFormat": "bbcode",
      "HTML": "Well, rather than me go through all that, it would be most pleasant if you could just elucidate.  A sentence or two.",
      "PostDate": "2006-07-24T22:11:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9958",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Okay, in Inform, object has a more general meaning.  Every room is an object.  Every noun is an object.  The player is an object.\n\nObject A is in room B:  parent(A) == B\nObject A is held by player:  parent(A) == player\nObject A is in object C:  parent(A) == C\n\nThere's no need to create special rooms corresponding to the inventory or contens of a box.",
      "EditableFormat": "bbcode",
      "HTML": "Okay, in Inform, object has a more general meaning.  Every room is an object.  Every noun is an object.  The player is an object.<br/><br/>Object A is in room B:  parent(A) == B<br/>Object A is held by player:  parent(A) == player<br/>Object A is in object C:  parent(A) == C<br/><br/>There's no need to create special rooms corresponding to the inventory or contens of a box.",
      "PostDate": "2006-07-24T22:26:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9959",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "You don't need to code a separate room for inventory - it exists whether you've got a &quot;define room &lt;inventory&gt;&quot; or not.\n\nSimilarly the implementation of containers won't mean having to code up a separate room for each object that can contain something.",
      "EditableFormat": "bbcode",
      "HTML": "You don't need to code a separate room for inventory - it exists whether you've got a &quot;define room &lt;inventory&gt;&quot; or not.<br/><br/>Similarly the implementation of containers won't mean having to code up a separate room for each object that can contain something.",
      "PostDate": "2006-07-24T22:52:28+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9960",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "So in ASL you could code a parent property for each object.  That is, object:parent.  This could work with a second property, a la object:parent_type to distinguish if the object is &quot;in&quot;, &quot;held by&quot;, &quot;worn by&quot;, etc.\n\nI take it Inform distinguishes automatically, &quot;under the hood&quot;?.",
      "EditableFormat": "bbcode",
      "HTML": "So in ASL you could code a parent property for each object.  That is, object:parent.  This could work with a second property, a la object:parent_type to distinguish if the object is &quot;in&quot;, &quot;held by&quot;, &quot;worn by&quot;, etc.<br/><br/>I take it Inform distinguishes automatically, &quot;under the hood&quot;?.",
      "PostDate": "2006-07-25T00:07:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9963",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "In the case of Inform:\n\nParent object has container attribute:  A is in B\nParent object has supporter attribute:  A is on B\n(Objects must not have both the container and supporter attribute, though there are ways to get the effect of an object that is both container and supporter; see _A Nasal Twinge_.)\nParent object is player, child object has worn attribute:  A is worn by player.\nParent object is player, child object hasn't worn attribute:  A is carried by player.\nParent object is not player, has animate attribute:  A is carried by B.\nParent object does not have container, supporter, or animate, and isn't the player:  A is a &quot;subobject&quot; of B.  (For example, the buttons on a keypad would be subobjects of the keypad.)",
      "EditableFormat": "bbcode",
      "HTML": "In the case of Inform:<br/><br/>Parent object has container attribute:  A is in B<br/>Parent object has supporter attribute:  A is on B<br/>(Objects must not have both the container and supporter attribute, though there are ways to get the effect of an object that is both container and supporter; see _A Nasal Twinge_.)<br/>Parent object is player, child object has worn attribute:  A is worn by player.<br/>Parent object is player, child object hasn't worn attribute:  A is carried by player.<br/>Parent object is not player, has animate attribute:  A is carried by B.<br/>Parent object does not have container, supporter, or animate, and isn't the player:  A is a &quot;subobject&quot; of B.  (For example, the buttons on a keypad would be subobjects of the keypad.)",
      "PostDate": "2006-07-25T14:42:07+01:00",
      "LastEditDate": null
    }
  ]
}
