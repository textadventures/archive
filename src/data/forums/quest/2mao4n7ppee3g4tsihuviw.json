{
  "Topic": {
    "TopicId": "2mao4n7ppee3g4tsihuviw",
    "ForumId": "10",
    "Title": "How to handle complex / sub-objects?",
    "LastUpdated": "2024-11-11T12:45:40.6912118Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f37ea97a-2e40-4b44-ac09-15bfcecc452f",
      "UserId": 701328,
      "Username": "Woodhouse3D",
      "AvatarUrl": "https://i.imgur.com/dSwnnufb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How would you handle complex / sub-objects? I mean, something like a NPC having a face or other body parts. The player could then use a command like \"Shave John's face\" or \"shoot Jake in chest\". Or maybe like a puzzle box with multiple disks and knobs.\r\n(This is a QuestJS question but I imagine the answer may be similar to that in Quest5.)",
      "EditableFormat": "markdown",
      "HTML": "<p>How would you handle complex / sub-objects? I mean, something like a NPC having a face or other body parts. The player could then use a command like \"Shave John's face\" or \"shoot Jake in chest\". Or maybe like a puzzle box with multiple disks and knobs.<br>\n(This is a QuestJS question but I imagine the answer may be similar to that in Quest5.)</p>\n\n",
      "PostDate": "2024-11-11T12:45:40.6912118Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb0710a1-cd98-4d39-b1bf-26365377c125",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "1. create object `john`\r\n2. go to verbs tab of `john`,  add `shave` verb, at assignment column, switch to `require another object`\r\n3. add `face` object inside the assignment column, then add in script\r\n```\r\nmsg (\"clean shaven<br/>\")\r\n```\r\n4. create object `face`, drag it and put it inside of john\r\n5. at `john`, go to features tab, tick `container`, go to container tab, choose `container`, tick hide children until looked at\r\n6. at `john`, go to object tab, delete `open` and `close` from display and inventory verbs\r\n7. play test the game, if you type in \"shave john\", it is not possible\r\nif you type in \"shave john face\", it is not possible\r\nif you type in \"look john\", \"shave john\", it would list out a possible list of options, when you click on `1. face`,\r\nyou will finally shave john's face, receiving a confirmation message \"clean shaven\"\r\n8. additionally, if you feel like hiding the sub-objects afterwards, go to `john`, setup tab, at `look at`, switch to run script and add this\r\n```\r\nSetTimeout (9) {\r\n  MakeObjectInvisible (face)\r\n}\r\n```\r\n\r\n__________________________________________________\r\nQuick demo/ Sample code\r\n\r\nTo paste the code\r\nStartup your quest gamebook/textadventure, on the right side of the big play button, you can see a code view button\r\nCopy my code to replace the code in the text box, click code view button again.\r\nViola, it is done, press play button to test out the game and modify the code to your preference.\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"test15\">\r\n    <gameid>cb2655e4-6bfc-4dd5-be83-b7cab36b49af</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2024</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"john\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_open\" />\r\n      <shave type=\"scriptdictionary\">\r\n        <item key=\"face\"><![CDATA[\r\n          msg (\"clean shaven<br/>\")\r\n        ]]></item>\r\n      </shave>\r\n      <feature_container />\r\n      <hidechildren />\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Take</value>\r\n      </displayverbs>\r\n      <inventoryverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Use</value>\r\n        <value>Drop</value>\r\n      </inventoryverbs>\r\n      <onopen type=\"script\">\r\n      </onopen>\r\n      <look type=\"script\">\r\n        SetTimeout (9) {\r\n          MakeObjectInvisible (face)\r\n        }\r\n      </look>\r\n      <object name=\"face\">\r\n        <inherit name=\"editor_object\" />\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>shave</property>\r\n    <pattern>shave</pattern>\r\n    <defaultexpression>\"You can't shave \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n</asl>\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<ol>\n<li>create object <code>john</code></li>\n<li>go to verbs tab of <code>john</code>,  add <code>shave</code> verb, at assignment column, switch to <code>require another object</code></li>\n<li>add <code>face</code> object inside the assignment column, then add in script</li>\n</ol>\n<pre><code>msg (\"clean shaven&lt;br/&gt;\")\n</code></pre>\n<ol start=\"4\">\n<li>create object <code>face</code>, drag it and put it inside of john</li>\n<li>at <code>john</code>, go to features tab, tick <code>container</code>, go to container tab, choose <code>container</code>, tick hide children until looked at</li>\n<li>at <code>john</code>, go to object tab, delete <code>open</code> and <code>close</code> from display and inventory verbs</li>\n<li>play test the game, if you type in \"shave john\", it is not possible<br>\nif you type in \"shave john face\", it is not possible<br>\nif you type in \"look john\", \"shave john\", it would list out a possible list of options, when you click on <code>1. face</code>,<br>\nyou will finally shave john's face, receiving a confirmation message \"clean shaven\"</li>\n<li>additionally, if you feel like hiding the sub-objects afterwards, go to <code>john</code>, setup tab, at <code>look at</code>, switch to run script and add this</li>\n</ol>\n<pre><code>SetTimeout (9) {\n  MakeObjectInvisible (face)\n}\n</code></pre>\n<hr>\n<p>Quick demo/ Sample code</p>\n<p>To paste the code<br>\nStartup your quest gamebook/textadventure, on the right side of the big play button, you can see a code view button<br>\nCopy my code to replace the code in the text box, click code view button again.<br>\nViola, it is done, press play button to test out the game and modify the code to your preference.</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"test15\"&gt;\n    &lt;gameid&gt;cb2655e4-6bfc-4dd5-be83-b7cab36b49af&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2024&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"john\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_open\" /&gt;\n      &lt;shave type=\"scriptdictionary\"&gt;\n        &lt;item key=\"face\"&gt;&lt;![CDATA[\n          msg (\"clean shaven&lt;br/&gt;\")\n        ]]&gt;&lt;/item&gt;\n      &lt;/shave&gt;\n      &lt;feature_container /&gt;\n      &lt;hidechildren /&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Take&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;inventoryverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Use&lt;/value&gt;\n        &lt;value&gt;Drop&lt;/value&gt;\n      &lt;/inventoryverbs&gt;\n      &lt;onopen type=\"script\"&gt;\n      &lt;/onopen&gt;\n      &lt;look type=\"script\"&gt;\n        SetTimeout (9) {\n          MakeObjectInvisible (face)\n        }\n      &lt;/look&gt;\n      &lt;object name=\"face\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;shave&lt;/property&gt;\n    &lt;pattern&gt;shave&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't shave \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2024-11-15T17:44:30.4459432Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78d07cc0-3a7a-4c66-a636-54f586f8e578",
      "UserId": 701328,
      "Username": "Woodhouse3D",
      "AvatarUrl": "https://i.imgur.com/dSwnnufb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very interesting, thank you.\r\nUnfortunately I've decided to refactor the code to use QuestJS' respond() function, and potentially remove these sub-objects entirely, replacing them with dictionaries. For posterity,  I will add that QuestJS has built in support for component objects with the COMPONENT() object type.",
      "EditableFormat": "markdown",
      "HTML": "<p>Very interesting, thank you.<br>\nUnfortunately I've decided to refactor the code to use QuestJS' respond() function, and potentially remove these sub-objects entirely, replacing them with dictionaries. For posterity,  I will add that QuestJS has built in support for component objects with the COMPONENT() object type.</p>\n\n",
      "PostDate": "2024-11-22T15:52:41.8784087Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
