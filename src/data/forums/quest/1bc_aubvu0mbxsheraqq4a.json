{
  "Topic": {
    "TopicId": "1bc_aubvu0mbxsheraqq4a",
    "ForumId": "10",
    "Title": "Comparing more than 2 variables and making the greater one a new variable",
    "LastUpdated": "2022-06-17T07:59:16.5340634Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a6b817d4-08e1-4abd-a842-951d64d76038",
      "UserId": 554565,
      "Username": "Local_Redditor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d399e24d4df00712ccd605ca2550624d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Imagine there being about 3-5 variables that track the player's behavior. What would be the best way to compare all the variables to pick the one with the highest value, and then put that value into a new variable?",
      "EditableFormat": "markdown",
      "HTML": "<p>Imagine there being about 3-5 variables that track the player's behavior. What would be the best way to compare all the variables to pick the one with the highest value, and then put that value into a new variable?</p>\n\n",
      "PostDate": "2022-06-17T07:59:16.5340634Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8bc4a575-94f7-4285-8b42-1a3a6b5062ae",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Put all the values into a list, sort by whatever (ascending, descending etc.) and then pick the first entry on the list.\r\n\r\nE.g.\r\n```\r\nx=NewStringList(this.sorter)\r\nn=ToString(player.attribute1)\r\nlist add(x, n)\r\nn=ToString(player.attribute2)\r\nlist add(x, n)\r\nn=ToString(player.attribute3)\r\nlist add(x, n)\r\n```\r\nthen sort (or sort descending) and retrieve the first entry\r\n\r\n```\r\nStringListSort(this.sorter)\r\ny=StringListItem (this.sorter, 0)\r\n```\r\nThen you have to match y back to the attribute it came from. This is messy and I'm sure there's a cleaner way to do it.\r\n```\r\nif(y=player.attribute1) {\r\n   player.newvariable=player.attribute1\r\n}\r\netc...\r\n```\r\nYou might need to use ToInt() to get the string back to a number for comparing. Depending on what you want the new variable to do, you might want to set the new variable to the name of attribute1 instead if it's for displaying rather than just keeping track of which is on top.\r\nI haven't tested this, but I think the concept is sound? Happy to be corrected though.",
      "EditableFormat": "markdown",
      "HTML": "<p>Put all the values into a list, sort by whatever (ascending, descending etc.) and then pick the first entry on the list.</p>\n<p>E.g.</p>\n<pre><code>x=NewStringList(this.sorter)\nn=ToString(player.attribute1)\nlist add(x, n)\nn=ToString(player.attribute2)\nlist add(x, n)\nn=ToString(player.attribute3)\nlist add(x, n)\n</code></pre>\n<p>then sort (or sort descending) and retrieve the first entry</p>\n<pre><code>StringListSort(this.sorter)\ny=StringListItem (this.sorter, 0)\n</code></pre>\n<p>Then you have to match y back to the attribute it came from. This is messy and I'm sure there's a cleaner way to do it.</p>\n<pre><code>if(y=player.attribute1) {\n   player.newvariable=player.attribute1\n}\netc...\n</code></pre>\n<p>You might need to use ToInt() to get the string back to a number for comparing. Depending on what you want the new variable to do, you might want to set the new variable to the name of attribute1 instead if it's for displaying rather than just keeping track of which is on top.<br>\nI haven't tested this, but I think the concept is sound? Happy to be corrected though.</p>\n\n",
      "PostDate": "2022-06-18T11:53:48.985476Z",
      "LastEditDate": "2022-06-18T12:01:35.0837758Z",
      "link": null
    },
    {
      "PostId": "0d86becb-3b8e-4800-bd3f-73ac0f0c279d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If the attributes you are comparing are all numeric, it seems awkward to convert them all top strings. Not least because sorting like that might put 15 between 1 and 2. (String sorts usually compare the first character of each strong; if those are the same, it compares the second digit, and so on until it finds one that is different)\r\n\r\nI would suggest something like this (for the example, I assume that you're trying to find the highest stat of a player who has dnd-like stats in attributes)\r\n```\r\nhighest_stat_name = \"none\"\r\nhighest_stat_value = 0\r\nforeach (attr, Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\r\n  if (HasInt (game.pov, attr)) {\r\n    if (GetInt (game.pov, attr) > highest_stat_value) {\r\n      highest_stat_name = attr\r\n      highest_stat_value = GetInt (game.pov, attr)\r\n    }\r\n  }\r\n}\r\n\r\n// You can do whatever you want with those variables here,\r\n//     such as putting them in an attribute to refer to later\r\n\r\nmsg (\"Your highest stat is \" + highest_stat_name + \", which has a score of \" + highest_stat_value + \".\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>If the attributes you are comparing are all numeric, it seems awkward to convert them all top strings. Not least because sorting like that might put 15 between 1 and 2. (String sorts usually compare the first character of each strong; if those are the same, it compares the second digit, and so on until it finds one that is different)</p>\n<p>I would suggest something like this (for the example, I assume that you're trying to find the highest stat of a player who has dnd-like stats in attributes)</p>\n<pre><code>highest_stat_name = \"none\"\nhighest_stat_value = 0\nforeach (attr, Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\n  if (HasInt (game.pov, attr)) {\n    if (GetInt (game.pov, attr) &gt; highest_stat_value) {\n      highest_stat_name = attr\n      highest_stat_value = GetInt (game.pov, attr)\n    }\n  }\n}\n\n// You can do whatever you want with those variables here,\n//     such as putting them in an attribute to refer to later\n\nmsg (\"Your highest stat is \" + highest_stat_name + \", which has a score of \" + highest_stat_value + \".\")\n</code></pre>\n\n",
      "PostDate": "2022-06-18T21:34:21.8347262Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "87763703-3cff-4c0b-bd2a-ced0c67e8104",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh ok, yeah that makes sense. Didn't realise about 1, 15, 2, though it's obvious in hindsight. That is a much more elegant solution.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh ok, yeah that makes sense. Didn't realise about 1, 15, 2, though it's obvious in hindsight. That is a much more elegant solution.</p>\n\n",
      "PostDate": "2022-06-18T22:07:32.9862217Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "98d55820-aec3-441e-bc7d-52963a0bd89d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Also a little more efficient; because sorting a list involves comparing every element to every other element (well… it's linearithmic, but some principle), when you really only need to compare each element to the highest one found so far. This method also allows you to find which stat was highest, rather than just its value.\r\n\r\nIf there were situations where you might need to know which is the 4th highest or similar, then sorting would be useful. But in that case I'd probably make it something like…\r\n```\r\nstatistics = NewStringList()\r\nforeach (attr,  Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\r\n  value = GetInt (game.pov, attr) + 1000000\r\n  value = Mid (ToString (value) + \";\" + attr, 2)\r\n  list add (statistics, value)\r\n}\r\ngame.pov.stats_in_order = StringListSortDescending (statistics)\r\n```\r\nThis adds 1000000 onto each stat, the stat name on the end, and then chops off the first character. So the `stats_in_order` attribute ends up being a list of values that look like `000012;strength`. You can then use `Split` and `ToInt` to get the actual numbers back.\r\n\r\nAlternatively, you could do a somewhat inelegant indirect insertion sort:\r\n```\r\nsorted = NewStringList()\r\nforeach (attr,  Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\r\n  value = GetInt (game.pov, attr)\r\n  newlist = NewStringList()\r\n  found = false\r\n  foreach (comparison, sorted) {\r\n    if (not found) {\r\n      if (GetInt (game.pov, comparison) > value) {\r\n        list add (newlist, comparison)\r\n      }\r\n      else {\r\n        found = true\r\n        list add (newlist, attr)\r\n        list add (newlist, comparison)\r\n      }\r\n    }\r\n    else {\r\n      list add (newlist, comparison)\r\n    }\r\n  }\r\n  sorted = newlist\r\n}\r\ngame.pov.sorted_stats = sorted\r\n```\r\nThis is a little inefficient because Quest doesn't provide the usual functions to manipulate lists. But if I got it right off the top of my head, it would give a list of the stat names in order. So `ListItem (player.sorted_stats, 0)` would be the name of the highest stat; `ListItem (player.sorted_stats, 2)` would be the one with 2 higher than it, and so on. And `GetInt (player, ListItem (player.sorted_stats, 0))` could get the actual value of the highest stat.\r\n\r\nObviously, this is a lot more complex than my earlier suggestion. But I think if you regularly need to know a player's 3rd highest stat or something, it could be useful.\r\n\r\n(Oh, note: I used `game.pov` to refer to the player object in all these examples, because this always works. If somebody finds this post a few months later, I don't want my code to break because they've renamed the player object to `Player` or `ego` or something, or have more than one playable character. Doing things the \"always works\" way to start with is a good habit to get into)\r\n\r\n(Also: Sorry for using the word \"sorted\" to mean \"ordered\". I think most people will find it easier to read that way)",
      "EditableFormat": "markdown",
      "HTML": "<p>Also a little more efficient; because sorting a list involves comparing every element to every other element (well… it's linearithmic, but some principle), when you really only need to compare each element to the highest one found so far. This method also allows you to find which stat was highest, rather than just its value.</p>\n<p>If there were situations where you might need to know which is the 4th highest or similar, then sorting would be useful. But in that case I'd probably make it something like…</p>\n<pre><code>statistics = NewStringList()\nforeach (attr,  Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\n  value = GetInt (game.pov, attr) + 1000000\n  value = Mid (ToString (value) + \";\" + attr, 2)\n  list add (statistics, value)\n}\ngame.pov.stats_in_order = StringListSortDescending (statistics)\n</code></pre>\n<p>This adds 1000000 onto each stat, the stat name on the end, and then chops off the first character. So the <code>stats_in_order</code> attribute ends up being a list of values that look like <code>000012;strength</code>. You can then use <code>Split</code> and <code>ToInt</code> to get the actual numbers back.</p>\n<p>Alternatively, you could do a somewhat inelegant indirect insertion sort:</p>\n<pre><code>sorted = NewStringList()\nforeach (attr,  Split(\"strength;intelligence;wisdom;dexterity;constitution;charisma\")) {\n  value = GetInt (game.pov, attr)\n  newlist = NewStringList()\n  found = false\n  foreach (comparison, sorted) {\n    if (not found) {\n      if (GetInt (game.pov, comparison) &gt; value) {\n        list add (newlist, comparison)\n      }\n      else {\n        found = true\n        list add (newlist, attr)\n        list add (newlist, comparison)\n      }\n    }\n    else {\n      list add (newlist, comparison)\n    }\n  }\n  sorted = newlist\n}\ngame.pov.sorted_stats = sorted\n</code></pre>\n<p>This is a little inefficient because Quest doesn't provide the usual functions to manipulate lists. But if I got it right off the top of my head, it would give a list of the stat names in order. So <code>ListItem (player.sorted_stats, 0)</code> would be the name of the highest stat; <code>ListItem (player.sorted_stats, 2)</code> would be the one with 2 higher than it, and so on. And <code>GetInt (player, ListItem (player.sorted_stats, 0))</code> could get the actual value of the highest stat.</p>\n<p>Obviously, this is a lot more complex than my earlier suggestion. But I think if you regularly need to know a player's 3rd highest stat or something, it could be useful.</p>\n<p>(Oh, note: I used <code>game.pov</code> to refer to the player object in all these examples, because this always works. If somebody finds this post a few months later, I don't want my code to break because they've renamed the player object to <code>Player</code> or <code>ego</code> or something, or have more than one playable character. Doing things the \"always works\" way to start with is a good habit to get into)</p>\n<p>(Also: Sorry for using the word \"sorted\" to mean \"ordered\". I think most people will find it easier to read that way)</p>\n\n",
      "PostDate": "2022-06-19T07:57:48.0480288Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
