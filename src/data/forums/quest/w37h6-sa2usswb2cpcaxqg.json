{
  "Topic": {
    "TopicId": "w37h6-sa2usswb2cpcaxqg",
    "ForumId": "10",
    "Title": "{if flag:} help",
    "LastUpdated": "2017-05-20T09:46:00.8106139Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "16876643-40a4-4e30-8741-ed0c3fc2e720",
      "UserId": 293464,
      "Username": "Celia Silverose",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5c7d96bc29ef4dde88666fd358b05a34?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am a beginner here and I want to know how the flag works. I don't know any coding whatsoever and I have no idea what that is for.",
      "EditableFormat": "markdown",
      "HTML": "<p>I am a beginner here and I want to know how the flag works. I don't know any coding whatsoever and I have no idea what that is for.</p>\n\n",
      "PostDate": "2017-05-20T09:46:00.8106139Z",
      "LastEditDate": null
    },
    {
      "PostId": "ee1e237b-8744-4737-8dcf-cad678cdad36",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A flag is used to indicate if an object in your game is one state or another. Doors and containers have a flag callled \"locked\", when it is _on_, the exit or container is locked, when it is _off_, the thing is unlocked. There are several other flags built-in: Containers also have \"isopen\", objects and exits have \"visible\", rooms have \"visited\".\r\n\r\nYou can add your own too. It the tutorial (I think) a flag is used for the dead guy; it gets turned on when he is brought back to life.\r\n\r\nBy the way, flags are also called Booleans, and said to be true or false. Just different words for the same thing.\r\n\r\nLooks like you want to use a flag in the text processor. You could do this for the description of an old chest (just the first line - the rest is explanation!):\r\n```\r\nThe chest is old. {if chest.isopen:The lid is open.}\r\n                  ^ Start of the text processor directive\r\n                        ^ \"chest\" is the name of the object\r\n                              ^ \"isopen\" is the flag\r\n                                        ^ The bit after the colon is what is displayed, if the flag is set (true)\r\n                                                   ^ End  of the text processor directive\r\n```\r\nIf the \"isopen\" flag is on (true), the player sees:\r\n\r\n> The chest is old. The lid is open.\r\n\r\nOtherwise she sees this:\r\n\r\n> The chest is old.\r\n\r\nIf you want text for when the flag is off, you can use `not`:\r\n```\r\nThe chest is old. {if chest.isopen:The lid is open.}{if not chest.isopen:The lid is closed.}\r\n```\r\nNow the player will see this if the chest is closed:\r\n\r\n> The chest is old. The lid is closed.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>A flag is used to indicate if an object in your game is one state or another. Doors and containers have a flag callled \"locked\", when it is <em>on</em>, the exit or container is locked, when it is <em>off</em>, the thing is unlocked. There are several other flags built-in: Containers also have \"isopen\", objects and exits have \"visible\", rooms have \"visited\".</p>\n<p>You can add your own too. It the tutorial (I think) a flag is used for the dead guy; it gets turned on when he is brought back to life.</p>\n<p>By the way, flags are also called Booleans, and said to be true or false. Just different words for the same thing.</p>\n<p>Looks like you want to use a flag in the text processor. You could do this for the description of an old chest (just the first line - the rest is explanation!):</p>\n<pre><code>The chest is old. {if chest.isopen:The lid is open.}\n                  ^ Start of the text processor directive\n                        ^ \"chest\" is the name of the object\n                              ^ \"isopen\" is the flag\n                                        ^ The bit after the colon is what is displayed, if the flag is set (true)\n                                                   ^ End  of the text processor directive\n</code></pre>\n<p>If the \"isopen\" flag is on (true), the player sees:</p>\n<blockquote>\n<p>The chest is old. The lid is open.</p>\n</blockquote>\n<p>Otherwise she sees this:</p>\n<blockquote>\n<p>The chest is old.</p>\n</blockquote>\n<p>If you want text for when the flag is off, you can use <code>not</code>:</p>\n<pre><code>The chest is old. {if chest.isopen:The lid is open.}{if not chest.isopen:The lid is closed.}\n</code></pre>\n<p>Now the player will see this if the chest is closed:</p>\n<blockquote>\n<p>The chest is old. The lid is closed.</p>\n</blockquote>\n\n",
      "PostDate": "2017-05-20T11:50:20.3065618Z",
      "LastEditDate": null
    },
    {
      "PostId": "ea20ef1c-d6d1-4bd2-b23c-79976ca9c28b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not the best at explaining stuff... but I'll try to help... (ignore/forget my post if it confuses you more! Pixie or others will help you better than I can)\r\n\r\nthis might be more difficult without getting into explaining more than just this (as it'll confuse you)... but I'll try to help you with understanding how the '{if flag:}' works\r\n\r\nthe format (known as 'syntax' in programming and maybe human languages too --- not an English major, lol) is this (from here: http://docs.textadventures.co.uk/quest/text_processor.html -- scroll down to the 'Game Book' section):\r\n\r\n```\r\n{if flag:text}\r\nDisplay text only if flag is set\r\n\r\nand (the opposite, 'negation', aka 'not'):\r\n\r\n{if not flag:text}\r\nDisplay text only if flag is not set\r\n```\r\n\r\n-------\r\n\r\nI think starting with some conceptual examples, will better help with trying to help this make sense to you, as I try to explain it/them...\r\n\r\n{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}\r\n\r\n-----\r\n\r\nplayer.flying = true\r\nmsg (\"{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}\")\r\n// output: You are flying, weeee!\r\n\r\nplayer.flying = false\r\nmsg (\"{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}\")\r\n// output: You are NOT flying, boo hoo\r\n\r\n// conceptually:\r\n{if player.flying = true, then output: You are flying, weeee!} {if player.flying = false (not true = false: if false), then output: You are NOT flying, boo hoo}\r\n\r\n--------\r\n\r\nabout Booleans (true/false), basic Boolean Logic:\r\n\r\n(I don't like the term 'flags' being used specifically for Booleans, but in this case, for the '{if flag:text/string output}' it is, sighs) \r\n\r\n dragon.dead = true // conceptually/effectively/logically: the dragon is dead\r\ndragon.dead = false // conceptually/effectively/logically: the dragon is alive\r\n\r\nnot dragon.dead = true // conceptually/effectively/logically: the dragon is alive\r\nnot dragon.dead = false // conceptually/effectively/logically: the dragon is dead\r\n\r\ndragon.alive = true // conceptually/effectively/logically: the dragon is alive\r\ndragon.alive = false // conceptually/effectively/logically: the dragon is dead\r\n\r\nnot dragon.alive = true // conceptually/effectively/logically: the dragon is dead\r\nnot dragon.alive = false // conceptually/effectively/logically: the dragon is alive\r\n\r\nyou can choose to use 'dead' or 'alive' for your Boolean Attribute Name, but not both (pick one or the other), as they do the same thing, just a matter of which you prefer (such as which makes more sense to you) and/or for the situation, of whether to use 'alive' or 'dead' for this example.\r\n\r\n--------------------\r\n\r\nso....\r\n\r\nmsg (\"{if NAME_OF_OBJECT.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")\r\n\r\nreplace my capitolized stuff with what you created/got/want in your game, for example...\r\n\r\nFor the Game Book, you only got two Objects that you can add Attributes to:\r\n\r\nthe 'player' Player Object and the 'game' Game Settings Object\r\n\r\nmsg (\"{if player.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")\r\nor\r\nmsg (\"{if game.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")\r\n\r\nlet's say you want/created this custom (your own) Boolean (Flag) Attribute: 'rich', which can be added to either the 'player' Player Object or the 'game' Game Settings Object or even added/given to both the 'player' Player Object and the 'game' Game Settings Object:\r\n\r\nmsg (\"{if player.rich: YOUR_TEXT(STRING)_OUTPUT}\")\r\nand/or\r\nmsg (\"{if game.rich: YOUR_TEXT(STRING)_OUTPUT}\")\r\n\r\nlastly, you put in what you want your text (string) output to be for if that condition (if player/game.rich) is true:\r\n\r\nmsg (\"{if player.rich: being rich, you buy yourself a beautiful diamond ring}\")\r\nand/or\r\nmsg (\"{if game.rich: being rich, you buy yourself a beautiful diamond ring}\")\r\n\r\n--------------------\r\n\r\nunfortunately, this is a bit confusing:\r\n\r\n'player.flying = true' can be written as 'player.flying', as quest is programmed to understand that this means '=true'\r\n\r\nwhereas, if you want something to be false, you got to do this 'player.flying = false' or 'not player.flying'\r\n\r\nso, it gets a bit confusing... just try to rmember that 'OBJECT_NAME.BOOLEAN(FLAG)_ATTRIBUTE_NAME' is a shortened form  of this: 'OBJECT_NAME.BOOLEAN(FLAG)_ATTRIBUTE_NAME = true'\r\n\r\n--------\r\n\r\nalso, about the 'msg (\"xxxxxxxxx\")'\r\n\r\nthis is just how the 'print a message' Script looks in code, the use of the '{if flag:text}' has to be used within a 'print a message' script, but I think the GUI/Editor handles this already for you, as you're likely already choosen the 'print a message' Script before you're able to choose the '{if flag:text}' or if you're trying to use it yourself if it's not a Script option in the GUI/Editor.\r\n\r\nI think you can use the '{if flag:text}' with the 'print a message -> print [MESSAGE]' Script option... but if not, then you need to change it to this script option: 'print a message -> print [EXPRESSION]'\r\n\r\n------\r\n\r\nalso note that we can do something more complex to, for an example:\r\n\r\nmsg (\"Hi, my name is {player.alias}, {if player.sex = male: a male} {if player.sex = female: a female}, and I am {player.age} years old. I like playing {random:soccer:football:baseball:basketball}. {if game.state=0: What is your name?} {if game.state=1: Would you like hang out some time?} {if game.state=2: Would you like to go to a movie with me some time?}\")\r\n\r\n-----------\r\n\r\nthe text processor commands are a much more simple way of doing complex string expressions/outputs/concatenations (fancy programming term for literally putting stuff together, so it's not the same as math addition/adding), whereas the 'normal' (non text processor commands) way, looks like this:\r\n\r\n```\r\nstring_variable = \"Hi, my name is \" + player.alias + \",\"\r\nif (player.sex = \"male\") {\r\n  string_variable = string_variable + \" a male, \"\r\n} else if (player.sex = \"female\") {\r\n  string_variable = string_variable + \" a female, \"\r\n}\r\nstring_variable = string_variable + \" and I am \" + player.age + \" years old. I like playing \"\r\nstringlist_variable = split (\"soccer;football;baseball;basketball\", \";\")\r\ninteger_variable = GetRandomInt (0, ListCount (stringlist_variable) - 1)\r\nsport_string_variable = StringListItem (stringlist_variable, integer_variable)\r\nstring_variable = string_variable + sport_string_variable + \". \"\r\nif (game.state = 0) {\r\n  string_variable = string_variable + \"What is your name?\"\r\n} else if (game.state = 1) {\r\n  string_variable = string_variable + \"Would you like to hang out some time?\"\r\n} else if (game.state = 2) {\r\n  string_variable = string_variable + \"Would you like to go to a movie with me some time?\"\r\n}\r\nmsg (string_variable)\r\n```\r\n\r\nso, you can see, if you can use them, the text processor commands are much much more nice... though this way gives you the full functionality, but it's a lot more complex (for the most part), than using text processor commands.\r\n\r\n--------\r\n\r\ndoes this kinda help with understanding how to use the '{if FLAG:text}' Game Book text processor command, or did I just completely confuse you more?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not the best at explaining stuff... but I'll try to help... (ignore/forget my post if it confuses you more! Pixie or others will help you better than I can)</p>\n<p>this might be more difficult without getting into explaining more than just this (as it'll confuse you)... but I'll try to help you with understanding how the '{if flag:}' works</p>\n<p>the format (known as 'syntax' in programming and maybe human languages too --- not an English major, lol) is this (from here: http://docs.textadventures.co.uk/quest/text_processor.html -- scroll down to the 'Game Book' section):</p>\n<pre><code>{if flag:text}\nDisplay text only if flag is set\n\nand (the opposite, 'negation', aka 'not'):\n\n{if not flag:text}\nDisplay text only if flag is not set\n</code></pre>\n<hr>\n<p>I think starting with some conceptual examples, will better help with trying to help this make sense to you, as I try to explain it/them...</p>\n<p>{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}</p>\n<hr>\n<p>player.flying = true<br>\nmsg (\"{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}\")<br>\n// output: You are flying, weeee!</p>\n<p>player.flying = false<br>\nmsg (\"{if player.flying: You are flying, weeee!} {if not player.flying: You are NOT flying, boo hoo}\")<br>\n// output: You are NOT flying, boo hoo</p>\n<p>// conceptually:<br>\n{if player.flying = true, then output: You are flying, weeee!} {if player.flying = false (not true = false: if false), then output: You are NOT flying, boo hoo}</p>\n<hr>\n<p>about Booleans (true/false), basic Boolean Logic:</p>\n<p>(I don't like the term 'flags' being used specifically for Booleans, but in this case, for the '{if flag:text/string output}' it is, sighs)</p>\n<p>dragon.dead = true // conceptually/effectively/logically: the dragon is dead<br>\ndragon.dead = false // conceptually/effectively/logically: the dragon is alive</p>\n<p>not dragon.dead = true // conceptually/effectively/logically: the dragon is alive<br>\nnot dragon.dead = false // conceptually/effectively/logically: the dragon is dead</p>\n<p>dragon.alive = true // conceptually/effectively/logically: the dragon is alive<br>\ndragon.alive = false // conceptually/effectively/logically: the dragon is dead</p>\n<p>not dragon.alive = true // conceptually/effectively/logically: the dragon is dead<br>\nnot dragon.alive = false // conceptually/effectively/logically: the dragon is alive</p>\n<p>you can choose to use 'dead' or 'alive' for your Boolean Attribute Name, but not both (pick one or the other), as they do the same thing, just a matter of which you prefer (such as which makes more sense to you) and/or for the situation, of whether to use 'alive' or 'dead' for this example.</p>\n<hr>\n<p>so....</p>\n<p>msg (\"{if NAME_OF_OBJECT.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")</p>\n<p>replace my capitolized stuff with what you created/got/want in your game, for example...</p>\n<p>For the Game Book, you only got two Objects that you can add Attributes to:</p>\n<p>the 'player' Player Object and the 'game' Game Settings Object</p>\n<p>msg (\"{if player.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")<br>\nor<br>\nmsg (\"{if game.NAME_OF_BOOLEAN(FLAG)_ATTRIBUTE: YOUR_TEXT(STRING)_OUTPUT}\")</p>\n<p>let's say you want/created this custom (your own) Boolean (Flag) Attribute: 'rich', which can be added to either the 'player' Player Object or the 'game' Game Settings Object or even added/given to both the 'player' Player Object and the 'game' Game Settings Object:</p>\n<p>msg (\"{if player.rich: YOUR_TEXT(STRING)_OUTPUT}\")<br>\nand/or<br>\nmsg (\"{if game.rich: YOUR_TEXT(STRING)_OUTPUT}\")</p>\n<p>lastly, you put in what you want your text (string) output to be for if that condition (if player/game.rich) is true:</p>\n<p>msg (\"{if player.rich: being rich, you buy yourself a beautiful diamond ring}\")<br>\nand/or<br>\nmsg (\"{if game.rich: being rich, you buy yourself a beautiful diamond ring}\")</p>\n<hr>\n<p>unfortunately, this is a bit confusing:</p>\n<p>'player.flying = true' can be written as 'player.flying', as quest is programmed to understand that this means '=true'</p>\n<p>whereas, if you want something to be false, you got to do this 'player.flying = false' or 'not player.flying'</p>\n<p>so, it gets a bit confusing... just try to rmember that 'OBJECT_NAME.BOOLEAN(FLAG)_ATTRIBUTE_NAME' is a shortened form  of this: 'OBJECT_NAME.BOOLEAN(FLAG)_ATTRIBUTE_NAME = true'</p>\n<hr>\n<p>also, about the 'msg (\"xxxxxxxxx\")'</p>\n<p>this is just how the 'print a message' Script looks in code, the use of the '{if flag:text}' has to be used within a 'print a message' script, but I think the GUI/Editor handles this already for you, as you're likely already choosen the 'print a message' Script before you're able to choose the '{if flag:text}' or if you're trying to use it yourself if it's not a Script option in the GUI/Editor.</p>\n<p>I think you can use the '{if flag:text}' with the 'print a message -&gt; print [MESSAGE]' Script option... but if not, then you need to change it to this script option: 'print a message -&gt; print [EXPRESSION]'</p>\n<hr>\n<p>also note that we can do something more complex to, for an example:</p>\n<p>msg (\"Hi, my name is {player.alias}, {if player.sex = male: a male} {if player.sex = female: a female}, and I am {player.age} years old. I like playing {random:soccer:football:baseball:basketball}. {if game.state=0: What is your name?} {if game.state=1: Would you like hang out some time?} {if game.state=2: Would you like to go to a movie with me some time?}\")</p>\n<hr>\n<p>the text processor commands are a much more simple way of doing complex string expressions/outputs/concatenations (fancy programming term for literally putting stuff together, so it's not the same as math addition/adding), whereas the 'normal' (non text processor commands) way, looks like this:</p>\n<pre><code>string_variable = \"Hi, my name is \" + player.alias + \",\"\nif (player.sex = \"male\") {\n  string_variable = string_variable + \" a male, \"\n} else if (player.sex = \"female\") {\n  string_variable = string_variable + \" a female, \"\n}\nstring_variable = string_variable + \" and I am \" + player.age + \" years old. I like playing \"\nstringlist_variable = split (\"soccer;football;baseball;basketball\", \";\")\ninteger_variable = GetRandomInt (0, ListCount (stringlist_variable) - 1)\nsport_string_variable = StringListItem (stringlist_variable, integer_variable)\nstring_variable = string_variable + sport_string_variable + \". \"\nif (game.state = 0) {\n  string_variable = string_variable + \"What is your name?\"\n} else if (game.state = 1) {\n  string_variable = string_variable + \"Would you like to hang out some time?\"\n} else if (game.state = 2) {\n  string_variable = string_variable + \"Would you like to go to a movie with me some time?\"\n}\nmsg (string_variable)\n</code></pre>\n<p>so, you can see, if you can use them, the text processor commands are much much more nice... though this way gives you the full functionality, but it's a lot more complex (for the most part), than using text processor commands.</p>\n<hr>\n<p>does this kinda help with understanding how to use the '{if FLAG:text}' Game Book text processor command, or did I just completely confuse you more?</p>\n\n",
      "PostDate": "2017-05-20T12:33:50.0833949Z",
      "LastEditDate": "2017-05-20T13:34:24.8991444Z"
    },
    {
      "PostId": "2b6dd9cc-04d1-4552-a2cf-943129a24b5c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Data Types:\r\n\r\ncomputers are stupid, you have to tell them what you're working with, and these types have to match up too, whereas we humans do/understand this stuff naturally.\r\n\r\nString Values:\r\n\r\n(you can use most symbols/characters but not all of them)\r\n(anything with the double quotes, is a String)\r\n\r\n\"a\"\r\n\"abc\"\r\n\"dragon\"\r\n\"dog_cat_1\"\r\n\"fkd3o_nno_weo2n2n dno3 seja_wa\"\r\n\r\nBoolean Values:\r\n\r\ntrue\r\nfalse\r\n\r\nInteger (int - quest uses this shortened form) (non-decimal numbers) Values:\r\n\r\n-999999999, -100, -3, 0, 5, 300, 666666666\r\n\r\nDouble (Floats/Floating Points: decimal numbers) Values:\r\n\r\n-9999.123, -1.7, 0.0, 4.95867565466, 9999999999.8\r\n\r\nObject Values:\r\n\r\nany non-numerical (non-Integer and non-Double) and any non-special/non-reserved words (such as 'true' and 'false', 'this', and etc..) that is NOT encased in the double quotes, and that already actually exists within your game, for example:\r\n\r\n```\r\n<object name=\"player\">\r\n  <attr name=\"right_hand\" type=\"object\">unarmed</attr>\r\n</object>\r\n\r\n<object name=\"unarmed\">\r\n</object>\r\n\r\n<object name=\"sword\">\r\n</object>\r\n\r\n// pretend we got scripting somewhere that changes our weapon (stored in our 'player.right_hand' Object Attribute) from 'unarmed' to 'sword':\r\n\r\nplayer.right_hand = sword // NO error\r\n\r\n-------------\r\n\r\nvs\r\n\r\n<object name=\"player\">\r\n  <attr name=\"right_hand\" type=\"object\">unarmed</attr>\r\n</object>\r\n\r\n<object name=\"unarmed\">\r\n</object>\r\n\r\n// pretend we got scripting somewhere that changes our weapon (stored in our 'player.right_hand' Object Attribute) from 'unarmed' to 'sword':\r\n\r\nplayer.right_hand = sword // ERROR! there is no 'sword' Object!\r\n```\r\n\r\n----------\r\n\r\nand the more complex Data Types:\r\n\r\nLists, Dictionaries, and etc... but too tired to get into them now...",
      "EditableFormat": "markdown",
      "HTML": "<p>Data Types:</p>\n<p>computers are stupid, you have to tell them what you're working with, and these types have to match up too, whereas we humans do/understand this stuff naturally.</p>\n<p>String Values:</p>\n<p>(you can use most symbols/characters but not all of them)<br>\n(anything with the double quotes, is a String)</p>\n<p>\"a\"<br>\n\"abc\"<br>\n\"dragon\"<br>\n\"dog_cat_1\"<br>\n\"fkd3o_nno_weo2n2n dno3 seja_wa\"</p>\n<p>Boolean Values:</p>\n<p>true<br>\nfalse</p>\n<p>Integer (int - quest uses this shortened form) (non-decimal numbers) Values:</p>\n<p>-999999999, -100, -3, 0, 5, 300, 666666666</p>\n<p>Double (Floats/Floating Points: decimal numbers) Values:</p>\n<p>-9999.123, -1.7, 0.0, 4.95867565466, 9999999999.8</p>\n<p>Object Values:</p>\n<p>any non-numerical (non-Integer and non-Double) and any non-special/non-reserved words (such as 'true' and 'false', 'this', and etc..) that is NOT encased in the double quotes, and that already actually exists within your game, for example:</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  &lt;attr name=\"right_hand\" type=\"object\"&gt;unarmed&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"unarmed\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"sword\"&gt;\n&lt;/object&gt;\n\n// pretend we got scripting somewhere that changes our weapon (stored in our 'player.right_hand' Object Attribute) from 'unarmed' to 'sword':\n\nplayer.right_hand = sword // NO error\n\n-------------\n\nvs\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"right_hand\" type=\"object\"&gt;unarmed&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"unarmed\"&gt;\n&lt;/object&gt;\n\n// pretend we got scripting somewhere that changes our weapon (stored in our 'player.right_hand' Object Attribute) from 'unarmed' to 'sword':\n\nplayer.right_hand = sword // ERROR! there is no 'sword' Object!\n</code></pre>\n<hr>\n<p>and the more complex Data Types:</p>\n<p>Lists, Dictionaries, and etc... but too tired to get into them now...</p>\n\n",
      "PostDate": "2017-05-20T13:02:08.8504834Z",
      "LastEditDate": null
    },
    {
      "PostId": "196d9413-7288-40b6-bad1-0387af39bed5",
      "UserId": 293464,
      "Username": "Celia Silverose",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5c7d96bc29ef4dde88666fd358b05a34?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks everyone! I think I understand now. But how do you set what the flag is. I get the options, like how something is or isn't in this particular condition by using true and false. But how do you switch it on and off? In hegemonkhan's example involving whether or not you're flying, there was player.flying = true.  How do you set that into the code? Like do I have to put in extra commands or surround it in a bracket or something?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks everyone! I think I understand now. But how do you set what the flag is. I get the options, like how something is or isn't in this particular condition by using true and false. But how do you switch it on and off? In hegemonkhan's example involving whether or not you're flying, there was player.flying = true.  How do you set that into the code? Like do I have to put in extra commands or surround it in a bracket or something?</p>\n\n",
      "PostDate": "2017-05-22T07:51:53.2608558Z",
      "LastEditDate": "2017-05-22T08:08:10.6980688Z"
    },
    {
      "PostId": "e67f8f3b-47a4-4d2e-b4ab-a8c3235976bf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you do so by setting/re-setting/changing/altering/adjusting the Boolean Attribute's Value to 'true' (toggled 'on' state/condition) or 'false' (toggled 'off' state/condition)\r\n\r\nBoolean Attribute:\r\n\r\nNAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = VALUE\r\n\r\nVALUE is either: 'true' or 'false'\r\n\r\nNAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = true // conceptually: your Boolean Attribute is toggled as being in the 'on' state/condition\r\nNAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = false // conceptually: your Boolean Attribute is toggled as being in the 'off' state/condition\r\n\r\n-------------\r\n\r\nin/via the GUI/Editor:\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set object flag' for '=true', or: 'unset object flag' for '=false'\r\n\r\nin code (using a Function for the scripting Element, but you can use whatever Element you want: a Verb, Command, Turnscript, etc):\r\n\r\nyou can do so like this directly (the 'dot' notation/scripting --- has to be put within an Element/location which can do scripting):\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = true // it's is currently set/re-set to being 'on'\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = false // it's is currently set/re-set to being 'off'\r\n\r\n```\r\n<function name=\"example_function\">\r\n  player.flying = true // the player is now effectively set/re-set to be flying\r\n  player.flying = false // the player is now effectively set/re-set to be NOT flying\r\n  player.flying = true // the player is now effectively set/re-set to be flying again\r\n  player.flying = false // the player is now effectively set/re-set to be NOT flying again\r\n  // etc etc etc (not that you'd be endlessly switching the 'flying' state/condition back and forth like this, lol)\r\n</function>\r\n```\r\n\r\nor, you can use the 'set' Function (has to be put within an Element/location which can do scripting):\r\n\r\nset (player, \"flying\", true)\r\nset (player, \"flying\", false)\r\n\r\n```\r\n<function name=\"example_function\">\r\n  set (player, \"flying\", true)\r\n  set (player, \"flying\", false)\r\n  set (player, \"flying\", true)\r\n  set (player, \"flying\", false)\r\n  // etc etc etc (not that you'd be endlessly switching the 'flying' state/condition back and forth like this, lol)\r\n</function>\r\n```\r\n\r\nor, you can use the GUI/Editor's helper Functions (I think these do exist)... but too lazy to open up the GUI/Editor, and see what they're called...",
      "EditableFormat": "markdown",
      "HTML": "<p>you do so by setting/re-setting/changing/altering/adjusting the Boolean Attribute's Value to 'true' (toggled 'on' state/condition) or 'false' (toggled 'off' state/condition)</p>\n<p>Boolean Attribute:</p>\n<p>NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = VALUE</p>\n<p>VALUE is either: 'true' or 'false'</p>\n<p>NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = true // conceptually: your Boolean Attribute is toggled as being in the 'on' state/condition<br>\nNAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE = false // conceptually: your Boolean Attribute is toggled as being in the 'off' state/condition</p>\n<hr>\n<p>in/via the GUI/Editor:</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set object flag' for '=true', or: 'unset object flag' for '=false'</p>\n<p>in code (using a Function for the scripting Element, but you can use whatever Element you want: a Verb, Command, Turnscript, etc):</p>\n<p>you can do so like this directly (the 'dot' notation/scripting --- has to be put within an Element/location which can do scripting):</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = true // it's is currently set/re-set to being 'on'<br>\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = false // it's is currently set/re-set to being 'off'</p>\n<pre><code>&lt;function name=\"example_function\"&gt;\n  player.flying = true // the player is now effectively set/re-set to be flying\n  player.flying = false // the player is now effectively set/re-set to be NOT flying\n  player.flying = true // the player is now effectively set/re-set to be flying again\n  player.flying = false // the player is now effectively set/re-set to be NOT flying again\n  // etc etc etc (not that you'd be endlessly switching the 'flying' state/condition back and forth like this, lol)\n&lt;/function&gt;\n</code></pre>\n<p>or, you can use the 'set' Function (has to be put within an Element/location which can do scripting):</p>\n<p>set (player, \"flying\", true)<br>\nset (player, \"flying\", false)</p>\n<pre><code>&lt;function name=\"example_function\"&gt;\n  set (player, \"flying\", true)\n  set (player, \"flying\", false)\n  set (player, \"flying\", true)\n  set (player, \"flying\", false)\n  // etc etc etc (not that you'd be endlessly switching the 'flying' state/condition back and forth like this, lol)\n&lt;/function&gt;\n</code></pre>\n<p>or, you can use the GUI/Editor's helper Functions (I think these do exist)... but too lazy to open up the GUI/Editor, and see what they're called...</p>\n\n",
      "PostDate": "2017-05-22T09:25:29.1502825Z",
      "LastEditDate": "2017-05-22T09:50:55.4432828Z"
    },
    {
      "PostId": "401c9c34-4bfe-4eba-8efd-c07d1219889d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you're somewhat understanding this code/scripting stuff and are interested in learning more in coding/scripting ... you can try taking a look here for a more detailed guide on this type of stuff:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk",
      "EditableFormat": "markdown",
      "HTML": "<p>if you're somewhat understanding this code/scripting stuff and are interested in learning more in coding/scripting ... you can try taking a look here for a more detailed guide on this type of stuff:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n\n",
      "PostDate": "2017-05-22T09:40:14.420507Z",
      "LastEditDate": null
    },
    {
      "PostId": "05183b03-044d-4974-bc13-0d6ec9172ec4",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's an example of showing the differences between setting/re-setting/changing/altering a (Boolean) Attribute's Value and doing an action (the 'if' Script) based upon that (Boolean) Attribute's Value:\r\n\r\n```\r\n<object name=\"tv\">\r\n\r\n  <attr name=\"is_turned_on\" type=\"boolean\">false</attr> // it's initial state (as code scripting it'd look like this): tv.is_turned_on = false\r\n\r\n  <attr name=\"watch_tv\" type=\"script\">\r\n    if (tv.is_turned_on = true) {\r\n      msg (\"You watch the local news that is on tv\")\r\n    } else if (tv.is_turned_on = false) {\r\n      msg (\"You stare at the blank black screen, as you never turned the tv on... (you dummy!)\")\r\n    }\r\n  </attr>\r\n\r\n  <attr name=\"turn_on_tv\" type=\"script\">\r\n    if (tv.is_turned_on = true) {\r\n      msg (\"The tv is already turned on, silly!\")\r\n    } else if (tv.is_turned_on = false) {\r\n      tv.is_turned_on = true\r\n      msg (\"You turn on the tv\")\r\n    }\r\n  </attr>\r\n\r\n   <attr name=\"turn_off_tv\" type=\"script\">\r\n    if (tv.is_turned_on = true) {\r\n      tv.is_turned_on = false\r\n      msg (\"You turn off the tv\")\r\n    } else if (tv.is_turned_on = false) {\r\n      msg (\"The tv is already turned off, silly!\")\r\n    }\r\n  </attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's an example of showing the differences between setting/re-setting/changing/altering a (Boolean) Attribute's Value and doing an action (the 'if' Script) based upon that (Boolean) Attribute's Value:</p>\n<pre><code>&lt;object name=\"tv\"&gt;\n\n  &lt;attr name=\"is_turned_on\" type=\"boolean\"&gt;false&lt;/attr&gt; // it's initial state (as code scripting it'd look like this): tv.is_turned_on = false\n\n  &lt;attr name=\"watch_tv\" type=\"script\"&gt;\n    if (tv.is_turned_on = true) {\n      msg (\"You watch the local news that is on tv\")\n    } else if (tv.is_turned_on = false) {\n      msg (\"You stare at the blank black screen, as you never turned the tv on... (you dummy!)\")\n    }\n  &lt;/attr&gt;\n\n  &lt;attr name=\"turn_on_tv\" type=\"script\"&gt;\n    if (tv.is_turned_on = true) {\n      msg (\"The tv is already turned on, silly!\")\n    } else if (tv.is_turned_on = false) {\n      tv.is_turned_on = true\n      msg (\"You turn on the tv\")\n    }\n  &lt;/attr&gt;\n\n   &lt;attr name=\"turn_off_tv\" type=\"script\"&gt;\n    if (tv.is_turned_on = true) {\n      tv.is_turned_on = false\n      msg (\"You turn off the tv\")\n    } else if (tv.is_turned_on = false) {\n      msg (\"The tv is already turned off, silly!\")\n    }\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-05-22T10:09:28.4668775Z",
      "LastEditDate": "2017-05-22T18:45:01.4570747Z"
    }
  ]
}
