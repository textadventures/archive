{
  "Topic": {
    "TopicId": "fz2he4hly0a6_zyjyy7uwg",
    "ForumId": "10",
    "Title": "Complex Commands",
    "LastUpdated": "2018-03-24T22:41:03.8387314Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "430f25dc-4805-49f6-b2fc-605b073ef54b",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " ```\r\n^(get|pick up|take) (?<object1>.*) (using|holding|with) (the |)(?<object2>.*)$\r\n```\r\n\r\nFrom what I understand, this will take whatever follows the first word (get|pick up|take) and reference whatever the second word is (object1) as the noun.  \r\n\r\nIf I want object1 to be something specific, like 'bucket', do I do `(<bucket>)`?  or what?\r\n\r\nI know that's a dumb question, but I yam what I yam... Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>^(get|pick up|take) (?&lt;object1&gt;.*) (using|holding|with) (the |)(?&lt;object2&gt;.*)$\n</code></pre>\n<p>From what I understand, this will take whatever follows the first word (get|pick up|take) and reference whatever the second word is (object1) as the noun.</p>\n<p>If I want object1 to be something specific, like 'bucket', do I do <code>(&lt;bucket&gt;)</code>?  or what?</p>\n<p>I know that's a dumb question, but I yam what I yam... Thanks!</p>\n\n",
      "PostDate": "2018-03-24T22:41:03.8387314Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cb18bb48-6a22-4653-8bb6-7143542b9ac7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "To warn you up front, I don't know what will happen if you enter an object other than bucket*, but here's the code (untested):\r\n\r\n```\r\n^(get|pick up|take) (?<object1>bucket) (using|holding|with) (?<object2>.*)$\r\n```\r\n\r\n---\r\nOr did I get that backwards?  Do you want to pick up something with the bucket?\r\n\r\n```\r\n^(get|pick up|take) (?<object1>.*) (using|holding|with) (?<object2>bucket)$\r\n```\r\n\r\n\r\n---\r\n\\*  If you specify the object in the command pattern, using any other object in that place will output:\r\n\r\nI can't see that.\r\n\r\n---\r\n### You'd be better off with this, then checking the input in the command's script:\r\n\r\n```\r\n^(get|pick up|take) (?<object1>.*) (using|holding|with) (?<object2>.*)$\r\n```\r\n\r\n```\r\nif (not object2 = bucket) {\r\n  msg(\"You can't do that.\")\r\n}\r\nelse {\r\n  // Do the damn thing.\r\n}\r\n```\r\n\r\n---\r\n**NOTES:**\r\n\r\n---\r\n\r\nThe difference between these two?\r\n\r\n```\r\n^(get|pick up|take) (?<object1>bucket) (using|holding|with) (?<object2>.*)$\r\n```\r\n\r\n```\r\n^(get|pick up|take) bucket (using|holding|with) (?<object2>.*)$\r\n```\r\n\r\nUsing the former, the player could enter:\r\n\r\nGET BUCK WITH HOOK\r\n\r\nor\r\n\r\nGET THE BUCKET WITH THE HOOK\r\n\r\n\r\nUsing the latter, they would have to specifically start with:\r\n\r\nGET BUCKET ...\r\n\r\nor\r\n\r\nPICK UP BUCKET ...\r\n\r\nor \r\n\r\nTAKE BUCKET ...\r\n\r\n---\r\nUsing the regex capture ```(?<object>bucket)``` will allow the object to be matched to its alternates (or synonyms, or whatever), just like commands normally would.\r\n\r\n---\r\nAlso, when using regex capture, you don't need ```(the|)``` in front of an object capture, since Quest will weed that out anyway.",
      "EditableFormat": "markdown",
      "HTML": "<p>To warn you up front, I don't know what will happen if you enter an object other than bucket*, but here's the code (untested):</p>\n<pre><code>^(get|pick up|take) (?&lt;object1&gt;bucket) (using|holding|with) (?&lt;object2&gt;.*)$\n</code></pre>\n<hr>\n<p>Or did I get that backwards?  Do you want to pick up something with the bucket?</p>\n<pre><code>^(get|pick up|take) (?&lt;object1&gt;.*) (using|holding|with) (?&lt;object2&gt;bucket)$\n</code></pre>\n<hr>\n<p>*  If you specify the object in the command pattern, using any other object in that place will output:</p>\n<p>I can't see that.</p>\n<hr>\n<h3>You'd be better off with this, then checking the input in the command's script:</h3>\n<pre><code>^(get|pick up|take) (?&lt;object1&gt;.*) (using|holding|with) (?&lt;object2&gt;.*)$\n</code></pre>\n<pre><code>if (not object2 = bucket) {\n  msg(\"You can't do that.\")\n}\nelse {\n  // Do the damn thing.\n}\n</code></pre>\n<hr>\n<p><strong>NOTES:</strong></p>\n<hr>\n<p>The difference between these two?</p>\n<pre><code>^(get|pick up|take) (?&lt;object1&gt;bucket) (using|holding|with) (?&lt;object2&gt;.*)$\n</code></pre>\n<pre><code>^(get|pick up|take) bucket (using|holding|with) (?&lt;object2&gt;.*)$\n</code></pre>\n<p>Using the former, the player could enter:</p>\n<p>GET BUCK WITH HOOK</p>\n<p>or</p>\n<p>GET THE BUCKET WITH THE HOOK</p>\n<p>Using the latter, they would have to specifically start with:</p>\n<p>GET BUCKET ...</p>\n<p>or</p>\n<p>PICK UP BUCKET ...</p>\n<p>or</p>\n<p>TAKE BUCKET ...</p>\n<hr>\n<p>Using the regex capture <code>(?&lt;object&gt;bucket)</code> will allow the object to be matched to its alternates (or synonyms, or whatever), just like commands normally would.</p>\n<hr>\n<p>Also, when using regex capture, you don't need <code>(the|)</code> in front of an object capture, since Quest will weed that out anyway.</p>\n\n",
      "PostDate": "2018-03-25T00:05:31.672734Z",
      "LastEditDate": "2018-03-25T00:34:47.4369056Z",
      "link": null
    },
    {
      "PostId": "65363bad-3add-4ef9-a184-924dde9ce88d",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, \r\n```(?<object1>.*)``` is equivalent to #object1#; in a regex it is called a “capture group, because it groups some characters together, and captures them for use elsewhere.\r\nSo, if you want your ```object1``` to be something specific, like a bucket you'd just put that into the expression instead.\r\neg:\r\nRegular Expression\r\n```^(get|pick up|take) (?<object_bucket>.*) (using|holding|with) (the |)(?<object2>.*)$```\r\n\r\nSee link: (which someone called XanMag features) \r\nhttps://textadventures.co.uk/forum/samples/topic/5862/complex-commands\r\n\r\nhttp://docs.textadventures.co.uk/quest/complex_commands.html\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,<br>\n<code>(?&lt;object1&gt;.*)</code> is equivalent to #object1#; in a regex it is called a “capture group, because it groups some characters together, and captures them for use elsewhere.<br>\nSo, if you want your <code>object1</code> to be something specific, like a bucket you'd just put that into the expression instead.<br>\neg:<br>\nRegular Expression<br>\n<code>^(get|pick up|take) (?&lt;object_bucket&gt;.*) (using|holding|with) (the |)(?&lt;object2&gt;.*)$</code></p>\n<p>See link: (which someone called XanMag features)<br>\nhttps://textadventures.co.uk/forum/samples/topic/5862/complex-commands</p>\n<p>http://docs.textadventures.co.uk/quest/complex_commands.html</p>\n\n",
      "PostDate": "2018-03-25T00:19:37.938867Z",
      "LastEditDate": "2018-03-25T00:41:40.2924268Z",
      "link": null
    },
    {
      "PostId": "34286bc1-22fe-4169-8965-e16fa45c45f8",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I guess I probably should go with the `(?<object1>.*)` because using Agon's method I would not be able to account for all other objects, right?  And, I'd still have to use an 'If' script to deal with whatever object 2 is.  If I understand that right, I'll apologize now for being a little bit...\r\nhttps://www.youtube.com/watch?v=KWYAuxBgk_0\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I guess I probably should go with the <code>(?&lt;object1&gt;.*)</code> because using Agon's method I would not be able to account for all other objects, right?  And, I'd still have to use an 'If' script to deal with whatever object 2 is.  If I understand that right, I'll apologize now for being a little bit...<br>\nhttps://www.youtube.com/watch?v=KWYAuxBgk_0</p>\n\n",
      "PostDate": "2018-03-25T00:40:51.2871383Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05a3e717-d83b-4e3b-9888-e8f8db95a8e8",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " I'd definitely just use ```(?<object1>.*)``` and ```(?<object2>.*)```, then do everything in the script.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd definitely just use <code>(?&lt;object1&gt;.*)</code> and <code>(?&lt;object2&gt;.*)</code>, then do everything in the script.</p>\n\n",
      "PostDate": "2018-03-25T00:47:24.7403846Z",
      "LastEditDate": "2018-03-25T00:48:05.9870705Z",
      "link": null
    },
    {
      "PostId": "6e45521c-2e04-4c10-a71a-8c598f759e60",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Keep the pattern as it is, but check if object1 is the bucket in code. You can then set synoyms for the bucket, like pail, on the bucket object, and the command will still work.\r\n```\r\nif (not object1 = bucket) {\r\n  msg(\"You need a bucket to do that.\"\r\n}\r\nelse {\r\n  ...\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>Keep the pattern as it is, but check if object1 is the bucket in code. You can then set synoyms for the bucket, like pail, on the bucket object, and the command will still work.</p>\n<pre><code>if (not object1 = bucket) {\n  msg(\"You need a bucket to do that.\"\n}\nelse {\n  ...\n}\n</code></pre>\n\n",
      "PostDate": "2018-03-25T09:05:22.0139074Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c7688f6a-bd68-4ef5-a646-405a54a0931c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are two stages to command parsing. First the regex pattern, then *after* that is executed, it checks all capture groups whose names start with \"object\" or \"exit\" to make sure that a matching object is in the room.\r\n\r\nSo if you put `pass (?<object>bucket)` and the player types \"pass buck\", the regular expression *won't match*. It will act like the command didn't exist.\r\n(In your example with 'get', this command would fail to match and it would fall back on the default 'get' command. So if you type \"get water with buck\", it then tries to find an object named \"water with buck\" and responds \"I can't see that\")\r\n\r\n\r\nIn some cases, it may be important to watch out for this two phase execution. One thing I noticed in your initial pattern:\r\n\r\n`^(get|pick up|take) (?<object1>.*) (using|holding|with) (the |)(?<object2>.*)$`\r\nis that you need to be careful you don't have any objects whose aliases contain the words \"using\", \"holding\", or \"with\".\r\n\r\nFor (a rather silly) example:\r\n`==> get bucket using string with a hook on the end`\r\nThat matches the pattern. It populates the variables with: `object1 = \"bucket using string\"` and `object2 = \"a hook on the end\"`. Then it compares these two strings against the command's scope to convert them into object, finds nothing, and tells the player \"I can't see that\".\r\n\r\n(In that example, you could make it work using `(?<object1>.*?)` - which means that object1 ends with the *first* instance of 'with', 'using', or 'holding' rather than the *last*. But that would be a problem if the player wanted to use an object containing one of those as the first parameter)",
      "EditableFormat": "markdown",
      "HTML": "<p>There are two stages to command parsing. First the regex pattern, then <em>after</em> that is executed, it checks all capture groups whose names start with \"object\" or \"exit\" to make sure that a matching object is in the room.</p>\n<p>So if you put <code>pass (?&lt;object&gt;bucket)</code> and the player types \"pass buck\", the regular expression <em>won't match</em>. It will act like the command didn't exist.<br>\n(In your example with 'get', this command would fail to match and it would fall back on the default 'get' command. So if you type \"get water with buck\", it then tries to find an object named \"water with buck\" and responds \"I can't see that\")</p>\n<p>In some cases, it may be important to watch out for this two phase execution. One thing I noticed in your initial pattern:</p>\n<p><code>^(get|pick up|take) (?&lt;object1&gt;.*) (using|holding|with) (the |)(?&lt;object2&gt;.*)$</code><br>\nis that you need to be careful you don't have any objects whose aliases contain the words \"using\", \"holding\", or \"with\".</p>\n<p>For (a rather silly) example:<br>\n<code>==&gt; get bucket using string with a hook on the end</code><br>\nThat matches the pattern. It populates the variables with: <code>object1 = \"bucket using string\"</code> and <code>object2 = \"a hook on the end\"</code>. Then it compares these two strings against the command's scope to convert them into object, finds nothing, and tells the player \"I can't see that\".</p>\n<p>(In that example, you could make it work using <code>(?&lt;object1&gt;.*?)</code> - which means that object1 ends with the <em>first</em> instance of 'with', 'using', or 'holding' rather than the <em>last</em>. But that would be a problem if the player wanted to use an object containing one of those as the first parameter)</p>\n\n",
      "PostDate": "2018-03-25T13:38:57.727276Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
