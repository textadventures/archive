{
  "Topic": {
    "TopicId": "ziodob_y1umbyglrocrfyw",
    "ForumId": "10",
    "Title": "can somone help me with a command",
    "LastUpdated": "2017-03-18T17:51:16.8181298Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4a399d33-cee5-4786-82a7-2d721db43e21",
      "UserId": 226106,
      "Username": "rocket20001010",
      "AvatarUrl": "https://secure.gravatar.com/avatar/612df01f778480f454e52a6f3b1fe3f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "i am new to coding and don't have much experince but i do know he basics of quest.\r\ni want to make a \"wear\" command where i can wear clothes, and if i try to put on other clothes while already wearing something then it will switch, and i want to make a system where i can't  go in a certain area while wearing certain clothes. \r\n\r\nbut if someone want's to be kind and has the time can they explain to how coding works and explain how the wear command works, because i not only want to know how to make a wear command but also want to know a bit more about coding so i don't have to ask someome everytime i make a new command.",
      "EditableFormat": "markdown",
      "HTML": "<p>i am new to coding and don't have much experince but i do know he basics of quest.<br>\ni want to make a \"wear\" command where i can wear clothes, and if i try to put on other clothes while already wearing something then it will switch, and i want to make a system where i can't  go in a certain area while wearing certain clothes.</p>\n<p>but if someone want's to be kind and has the time can they explain to how coding works and explain how the wear command works, because i not only want to know how to make a wear command but also want to know a bit more about coding so i don't have to ask someome everytime i make a new command.</p>\n\n",
      "PostDate": "2017-03-18T17:51:16.8181298Z",
      "LastEditDate": null
    },
    {
      "PostId": "ad002bc1-0d4c-4d80-b69c-c1a1f2aff693",
      "UserId": 25543,
      "Username": "Silver",
      "AvatarUrl": "https://secure.gravatar.com/avatar/13024be5ccbb463906b024d5bd3cb5e8?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's a wearables library in the Quest documentation you could use. \r\n\r\nhttp://docs.textadventures.co.uk/quest/libraries.html\r\n\r\nIn terms of the clothes being worn having a game changing effect you'd need to set flags. \r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/more_things_to_do_with_objects.html",
      "EditableFormat": "markdown",
      "HTML": "<p>There's a wearables library in the Quest documentation you could use.</p>\n<p>http://docs.textadventures.co.uk/quest/libraries.html</p>\n<p>In terms of the clothes being worn having a game changing effect you'd need to set flags.</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/more_things_to_do_with_objects.html</p>\n\n",
      "PostDate": "2017-03-18T19:06:12.1196271Z",
      "LastEditDate": null
    },
    {
      "PostId": "a33d4c58-d88d-4ce6-8020-ee899b813afd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's a link where I think I explain how Commands work in detail:\r\n\r\nhttps://textadventures.co.uk/forum/quest/topic/ij9pztcxquaeiozydrxi_a/allow-a-command-to-require-object1-for-an-action-on-object2#0547f1d4-8c6e-4cdc-a314-460e03274e6c\r\n\r\n(if the link doesn't work, you just need to remove the 's' in 'https' in the url, and then hopefully it should work for you)\r\n\r\n--------\r\n\r\nhere's a link for a guide on the basics ('bread and butter') of starting to learn coding/programming (for quest):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\n\r\n---------\r\n\r\nquest's 'aslx' coding is similar to 'xml'/'html' (web/browser programming languages), where you use 'tags' to make code lines/blocks (your Objects/frames/windows):\r\n\r\ncode can be written vertically and/or horizontally, depending on how well the language/engine is programmed in parsing\r\n\r\nquest is able to handle horizontal and vertical\r\n\r\nvertical for more complex/larger code ('blocks' --- multiple lines) is easier for humans to read and for organization, an example:\r\n\r\n```\r\n<attr name=\"area_description\" type=\"stringdictionary\">\r\n  <item>\r\n    <key>swamp</key>\r\n    <value>blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</value>\r\n  </item>\r\n <item>\r\n    <key>desert</key>\r\n    <value>blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</value>\r\n  </item>\r\n <item>\r\n    <key>tundra</key>\r\n    <value>blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</value>\r\n  </item>\r\n <item>\r\n    <key>forest</key>\r\n    <value>blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</value\r\n  </item>\r\n</attr>\r\n```\r\n\r\nhorizontal is more suited for more simple code that can fit on a single line:\r\n\r\n```\r\n<attr name=\"color_list\" type=\"simplestringlist\">red;blue;green;yellow;black;white;grey;orange;purple;brown</attr>\r\n```\r\n\r\n-------\r\n\r\nnew default game code:\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  </include ref=\"Core.aslx\" />\r\n  <game name=\"XXX\">\r\n    <gameid>SOME_ALGORITHM_RANDOM_GENERATED_HASH/STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  <game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n------------\r\n\r\nseparated (easier for us humans, and has no effect on the computer, no ERRORS), so you can get a better sense of it's structure:\r\n\r\n(though, usually you want to limit the amount of lines, usually blank lines, too... where you can... preferably, without compromising readability and/or organization for humans)\r\n\r\n```\r\n// your entire/full game code (your game) is the 'asl' tag block\r\n\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  </include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"NAME_OF_YOUR_GAME\">\r\n\r\n    <gameid>SOME_ALGORITHM_GENERATED_RANDOM_HASH/STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\n-------------\r\n\r\nthe 'asl' block:\r\n\r\nthis is your entire game code (your game / your main/root GAME OBJECT which contains the entire contents/code of your game)\r\n\r\n```\r\n<asl version=\"550\"> // beginning of your 'asl' tag block, and is also the 'signature/header' line of the 'asl' tag block\r\n  // your mass of game code/content\r\n</asl> // end of your 'asl' tag block\r\n\r\n--------\r\n\r\nthe, version=\"###\", has to match up with version of the 'quest.exe' quest software/engine that you've downloaded or with the server if using quest online/web (current version: 550/560/570 ... one of those, lol. Only the first 2 digits from the left matter, and the 3rd digit from the left is always a zero for putting into code: <asl version=\"###\">, even though the actual version used by the engine will be longer, for example: quest v5.5.351.23.35.111 ---> version=\"553\". You can see the quest version by click on the 'help' in the menu bar at the top of the screen, and selecting the 'about' option)\r\n```\r\n\r\n---------------\r\n\r\nthe 'library' Files:\r\n\r\n```\r\n// the default library files:\r\n\r\n<include ref=\"English.aslx\" />\r\n</include ref=\"Core.aslx\" />\r\n```\r\n\r\nthese are the files that are used to build-up ('initialized') your game, BEFORE the rest of your stuff from the 'asl' tag block's coding is put into the game. Quest's underlying engine is very powerful, as it uses a bunch of library files, so if you're a good programmer, you can even create your own custom user-level engine! Look at the 'english.aslx' and the numerous individual 'core' files in the quest folder (the 'core.aslx' is just a hub file to link to all the numerous individual 'core' files in the quest folder).\r\n\r\nthe order (top:first, bottom:last) matters here, as this is how your game is 'initialized' (built-up), as maybe you're familiar already with if you've tried having/using lots of mods at the same time for other games (and there's also the issue of compatibility amongst them, lol).\r\n\r\nhere's how to create a library file:\r\n\r\n(they have/use the same 'xxx.aslx' extension as your game files: 'xxx.aslx')\r\n\r\n```\r\n<library>\r\n  // your code, which will be used to initialize (build-up your game), before your game file's own code is used.\r\n  // this code can be as simple as a single Object to a combat system+GUI-Editor-controls (such as Pixie's combat 2.0/3.0 library file) to translation to another human-language to an entire new engine\r\n  // so, think of a library file as like a 'mod', 'patch', and/or 'xpac' for your game (or even a user-level engine itself for your game).\r\n</library>\r\n```\r\n\r\n----------------\r\n\r\nthe special 'game' GAME SETTINGS (and global controls and etc stuff) Object:\r\n\r\nthis too likely has to come after the 'include ref' tag lines\r\n\r\n```\r\n<game name=\"NAME_OF_YOUR_GAME\">\r\n  <gameid>SOME_ALGORITHM_GENERATED_RANDOM_HASH/STRING</gameid>\r\n  <version>1.0</version>\r\n  <firstpublished>2017</firstpublished>\r\n  <category>RPG</category>\r\n  <attr name=\"start\" type=\"script\">\r\n    // this built-in 'start' Script Attribute is the very first thing run/fired/activated/executed when your game starts\r\n  </attr>\r\n</game>\r\n```\r\n\r\n-------\r\n\r\nthe rest of your content: Objects, Verbs, Functions, Turnscripts, Timers, Object Types, etc ( http://docs.textadventures.co.uk/quest/elements/ )\r\n\r\nand note that the underlying engine has some requirements:\r\n\r\nhttp://docs.textadventures.co.uk/quest/asl_requirements.html (mostly for programming trying to create their own engines and/or doing translating into other human-languages, or why quest isn't working --- as you accidentally don't have a 'player' Player Object in a Room Object due to deleting, it for examples)\r\n\r\n---------\r\n\r\n```\r\nalso note that over the versions, the coding structure/format/syntax has changed (mainly the List/Dictionary Attribute's code syntax/format/structure) a bit (so old code doesn't work any longer and has to be updated and also remember you got to change the: <asl version=\"###\">, to match with the 'quest.exe' too\r\n```\r\n\r\nalso, note that over the versions more and more GUI/Editor Tabs have been added... cluttering it up to much, so now by default many of them are toggled off/hidden, which you have to toggle them back on to see them:\r\n\r\nhttp://docs.textadventures.co.uk/quest/upgrade_notes.html\r\n\r\n------\r\n\r\nask if you've got questions about anything or if need help with anything or whatever you might need....",
      "EditableFormat": "markdown",
      "HTML": "<p>here's a link where I think I explain how Commands work in detail:</p>\n<p>https://textadventures.co.uk/forum/quest/topic/ij9pztcxquaeiozydrxi_a/allow-a-command-to-require-object1-for-an-action-on-object2#0547f1d4-8c6e-4cdc-a314-460e03274e6c</p>\n<p>(if the link doesn't work, you just need to remove the 's' in 'https' in the url, and then hopefully it should work for you)</p>\n<hr>\n<p>here's a link for a guide on the basics ('bread and butter') of starting to learn coding/programming (for quest):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n<hr>\n<p>quest's 'aslx' coding is similar to 'xml'/'html' (web/browser programming languages), where you use 'tags' to make code lines/blocks (your Objects/frames/windows):</p>\n<p>code can be written vertically and/or horizontally, depending on how well the language/engine is programmed in parsing</p>\n<p>quest is able to handle horizontal and vertical</p>\n<p>vertical for more complex/larger code ('blocks' --- multiple lines) is easier for humans to read and for organization, an example:</p>\n<pre><code>&lt;attr name=\"area_description\" type=\"stringdictionary\"&gt;\n  &lt;item&gt;\n    &lt;key&gt;swamp&lt;/key&gt;\n    &lt;value&gt;blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&lt;/value&gt;\n  &lt;/item&gt;\n &lt;item&gt;\n    &lt;key&gt;desert&lt;/key&gt;\n    &lt;value&gt;blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&lt;/value&gt;\n  &lt;/item&gt;\n &lt;item&gt;\n    &lt;key&gt;tundra&lt;/key&gt;\n    &lt;value&gt;blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&lt;/value&gt;\n  &lt;/item&gt;\n &lt;item&gt;\n    &lt;key&gt;forest&lt;/key&gt;\n    &lt;value&gt;blah blah blah bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&lt;/value\n  &lt;/item&gt;\n&lt;/attr&gt;\n</code></pre>\n<p>horizontal is more suited for more simple code that can fit on a single line:</p>\n<pre><code>&lt;attr name=\"color_list\" type=\"simplestringlist\"&gt;red;blue;green;yellow;black;white;grey;orange;purple;brown&lt;/attr&gt;\n</code></pre>\n<hr>\n<p>new default game code:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;/include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"XXX\"&gt;\n    &lt;gameid&gt;SOME_ALGORITHM_RANDOM_GENERATED_HASH/STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>separated (easier for us humans, and has no effect on the computer, no ERRORS), so you can get a better sense of it's structure:</p>\n<p>(though, usually you want to limit the amount of lines, usually blank lines, too... where you can... preferably, without compromising readability and/or organization for humans)</p>\n<pre><code>// your entire/full game code (your game) is the 'asl' tag block\n\n&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;/include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n\n    &lt;gameid&gt;SOME_ALGORITHM_GENERATED_RANDOM_HASH/STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>the 'asl' block:</p>\n<p>this is your entire game code (your game / your main/root GAME OBJECT which contains the entire contents/code of your game)</p>\n<pre><code>&lt;asl version=\"550\"&gt; // beginning of your 'asl' tag block, and is also the 'signature/header' line of the 'asl' tag block\n  // your mass of game code/content\n&lt;/asl&gt; // end of your 'asl' tag block\n\n--------\n\nthe, version=\"###\", has to match up with version of the 'quest.exe' quest software/engine that you've downloaded or with the server if using quest online/web (current version: 550/560/570 ... one of those, lol. Only the first 2 digits from the left matter, and the 3rd digit from the left is always a zero for putting into code: &lt;asl version=\"###\"&gt;, even though the actual version used by the engine will be longer, for example: quest v5.5.351.23.35.111 ---&gt; version=\"553\". You can see the quest version by click on the 'help' in the menu bar at the top of the screen, and selecting the 'about' option)\n</code></pre>\n<hr>\n<p>the 'library' Files:</p>\n<pre><code>// the default library files:\n\n&lt;include ref=\"English.aslx\" /&gt;\n&lt;/include ref=\"Core.aslx\" /&gt;\n</code></pre>\n<p>these are the files that are used to build-up ('initialized') your game, BEFORE the rest of your stuff from the 'asl' tag block's coding is put into the game. Quest's underlying engine is very powerful, as it uses a bunch of library files, so if you're a good programmer, you can even create your own custom user-level engine! Look at the 'english.aslx' and the numerous individual 'core' files in the quest folder (the 'core.aslx' is just a hub file to link to all the numerous individual 'core' files in the quest folder).</p>\n<p>the order (top:first, bottom:last) matters here, as this is how your game is 'initialized' (built-up), as maybe you're familiar already with if you've tried having/using lots of mods at the same time for other games (and there's also the issue of compatibility amongst them, lol).</p>\n<p>here's how to create a library file:</p>\n<p>(they have/use the same 'xxx.aslx' extension as your game files: 'xxx.aslx')</p>\n<pre><code>&lt;library&gt;\n  // your code, which will be used to initialize (build-up your game), before your game file's own code is used.\n  // this code can be as simple as a single Object to a combat system+GUI-Editor-controls (such as Pixie's combat 2.0/3.0 library file) to translation to another human-language to an entire new engine\n  // so, think of a library file as like a 'mod', 'patch', and/or 'xpac' for your game (or even a user-level engine itself for your game).\n&lt;/library&gt;\n</code></pre>\n<hr>\n<p>the special 'game' GAME SETTINGS (and global controls and etc stuff) Object:</p>\n<p>this too likely has to come after the 'include ref' tag lines</p>\n<pre><code>&lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n  &lt;gameid&gt;SOME_ALGORITHM_GENERATED_RANDOM_HASH/STRING&lt;/gameid&gt;\n  &lt;version&gt;1.0&lt;/version&gt;\n  &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;category&gt;RPG&lt;/category&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    // this built-in 'start' Script Attribute is the very first thing run/fired/activated/executed when your game starts\n  &lt;/attr&gt;\n&lt;/game&gt;\n</code></pre>\n<hr>\n<p>the rest of your content: Objects, Verbs, Functions, Turnscripts, Timers, Object Types, etc ( http://docs.textadventures.co.uk/quest/elements/ )</p>\n<p>and note that the underlying engine has some requirements:</p>\n<p>http://docs.textadventures.co.uk/quest/asl_requirements.html (mostly for programming trying to create their own engines and/or doing translating into other human-languages, or why quest isn't working --- as you accidentally don't have a 'player' Player Object in a Room Object due to deleting, it for examples)</p>\n<hr>\n<pre><code>also note that over the versions, the coding structure/format/syntax has changed (mainly the List/Dictionary Attribute's code syntax/format/structure) a bit (so old code doesn't work any longer and has to be updated and also remember you got to change the: &lt;asl version=\"###\"&gt;, to match with the 'quest.exe' too\n</code></pre>\n<p>also, note that over the versions more and more GUI/Editor Tabs have been added... cluttering it up to much, so now by default many of them are toggled off/hidden, which you have to toggle them back on to see them:</p>\n<p>http://docs.textadventures.co.uk/quest/upgrade_notes.html</p>\n<hr>\n<p>ask if you've got questions about anything or if need help with anything or whatever you might need....</p>\n\n",
      "PostDate": "2017-03-18T20:59:57.9513406Z",
      "LastEditDate": "2017-03-18T22:24:16.7895464Z"
    },
    {
      "PostId": "e5d632b6-a8e2-4e57-91e4-049fda978dcd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nto see/get-at your (entire/full) game code:\r\n\r\n1. just right click on your 'xxx.aslx' file and open it with a text editor software (notepad, wordpad, notepad++, Apple: texteditor, etc)\r\n\r\n2. in the GUI/Editor, at the top of the screen in the menu bar, is a notepaper-like button, between the 'play' and 'help buttons. This notepaper-like button is a toggle between the GUI/editor mode and the Code View mode. Note that there's also on the 'add new script' buttons' windows that pop up in the middle of the screen, which the scripting editing controls, have notepaper-like buttons too, these allow you to go into code just for this local 'add new script' scripting (it is NOT your entire game code).\r\n\r\n-------\r\n\r\nif you're interested in learning to code, I'd highly recommend downloading this much more advanced text editor:\r\n\r\nnotepad++ ( https://notepad-plus-plus.org/ )\r\n\r\nas it has a lot of useful editing features (that I still need to learn to use... myself, lol) and even more impotantly, has most of the programming languages, which you can select via the menu bar at the top of the screen, under 'languages', and it'll color code the lines for you, making it easier to read, write, and troubleshoot your/others' code.\r\n\r\n--------------\r\n\r\na really good site for software (not just for programming software):\r\n\r\nhttps://ninite.com/\r\n\r\n-------------\r\n\r\nand if you're ready/more serious (interested in learning the main programming languages, such as: C++, Java, Python), then you'll obviously want to get the IDEs/SDKs for them, so you can run/test/compile/debug your programs/code.\r\n\r\n----------\r\n\r\nand there's also tons fo sites/forums for coding/programming too, such as:\r\n\r\nhttps://www.codecademy.com/",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>to see/get-at your (entire/full) game code:</p>\n<ol>\n<li>\n<p>just right click on your 'xxx.aslx' file and open it with a text editor software (notepad, wordpad, notepad++, Apple: texteditor, etc)</p>\n</li>\n<li>\n<p>in the GUI/Editor, at the top of the screen in the menu bar, is a notepaper-like button, between the 'play' and 'help buttons. This notepaper-like button is a toggle between the GUI/editor mode and the Code View mode. Note that there's also on the 'add new script' buttons' windows that pop up in the middle of the screen, which the scripting editing controls, have notepaper-like buttons too, these allow you to go into code just for this local 'add new script' scripting (it is NOT your entire game code).</p>\n</li>\n</ol>\n<hr>\n<p>if you're interested in learning to code, I'd highly recommend downloading this much more advanced text editor:</p>\n<p>notepad++ ( https://notepad-plus-plus.org/ )</p>\n<p>as it has a lot of useful editing features (that I still need to learn to use... myself, lol) and even more impotantly, has most of the programming languages, which you can select via the menu bar at the top of the screen, under 'languages', and it'll color code the lines for you, making it easier to read, write, and troubleshoot your/others' code.</p>\n<hr>\n<p>a really good site for software (not just for programming software):</p>\n<p>https://ninite.com/</p>\n<hr>\n<p>and if you're ready/more serious (interested in learning the main programming languages, such as: C++, Java, Python), then you'll obviously want to get the IDEs/SDKs for them, so you can run/test/compile/debug your programs/code.</p>\n<hr>\n<p>and there's also tons fo sites/forums for coding/programming too, such as:</p>\n<p>https://www.codecademy.com/</p>\n\n",
      "PostDate": "2017-03-18T22:37:28.5242171Z",
      "LastEditDate": "2017-03-18T22:39:31.1840792Z"
    }
  ]
}
