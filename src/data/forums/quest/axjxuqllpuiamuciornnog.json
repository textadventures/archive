{
  "Topic": {
    "TopicId": "axjxuqllpuiamuciornnog",
    "ForumId": "10",
    "Title": "Non-infinite loops freezing the program.",
    "LastUpdated": "2017-05-29T02:43:16.4150176Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a8132201-ad93-4e16-8ede-c67cc36822a4",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi,\r\n\r\nI know that if you set the Boolean condition for any kind of loop or any method of recursion (aren't loops and recursion the same thing?) to true, always, then it will cause an infinite loop, and thus a runtime error. It is a logic error that causes the loop condition to remain true, and I fully understand that.\r\n\r\nHowever, what I don't understand is why if I have more than 10 nested loops (each doing a specific thing that is checked in a specific order) and it produces more than 100 messages on the screen, that the entire program freezes, much like if I had created an infinite loop. I have a specific gameplay purpose in mind for creating these 100+ messages (and I use it for debugging purposes to find \"edge cases\" where my logic is failing in spectacular ways), which is why I'm asking this here question. I've found that if I reduce the number of loops OR reduce the number of messages outputted onto the screen, I can use the program without it freezing, but I kind of need those large numbers of messages in order to produce the correct experience for the player.\r\n\r\nI'm just wondering why it is that, I have a 6-core 3.5ghz machine, with 16 gb ddr4 ram, a 512 ssd, and a titan x 12gb graphics card, how it is that these calculations are freezing up my machine. With my understanding of C++, each character should be using between 1 byte to 8 bytes... and so I'd expect that my game logic is using up maybe a couple 100 megabytes of ram, but surely not several gb of ram to perform these calculations.\r\n\r\nThe odd thing is that these game logics are able to function correctly when they produce fewer messages and the exact same code then fails when its over 100 messages; what I mean is that you have an attribute that gets increased by +1 for certain activities and this attribute is what determines how many messages will be produced. So when this attribute is in the range of 400-500, and this code is producing less than 100 messages, everything is fine, but the moment this attribute gets above 500, any time the code is run it freezes the program, attempting to produce more than 100 messages.\r\n\r\nWhy is it doing this?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,</p>\n<p>I know that if you set the Boolean condition for any kind of loop or any method of recursion (aren't loops and recursion the same thing?) to true, always, then it will cause an infinite loop, and thus a runtime error. It is a logic error that causes the loop condition to remain true, and I fully understand that.</p>\n<p>However, what I don't understand is why if I have more than 10 nested loops (each doing a specific thing that is checked in a specific order) and it produces more than 100 messages on the screen, that the entire program freezes, much like if I had created an infinite loop. I have a specific gameplay purpose in mind for creating these 100+ messages (and I use it for debugging purposes to find \"edge cases\" where my logic is failing in spectacular ways), which is why I'm asking this here question. I've found that if I reduce the number of loops OR reduce the number of messages outputted onto the screen, I can use the program without it freezing, but I kind of need those large numbers of messages in order to produce the correct experience for the player.</p>\n<p>I'm just wondering why it is that, I have a 6-core 3.5ghz machine, with 16 gb ddr4 ram, a 512 ssd, and a titan x 12gb graphics card, how it is that these calculations are freezing up my machine. With my understanding of C++, each character should be using between 1 byte to 8 bytes... and so I'd expect that my game logic is using up maybe a couple 100 megabytes of ram, but surely not several gb of ram to perform these calculations.</p>\n<p>The odd thing is that these game logics are able to function correctly when they produce fewer messages and the exact same code then fails when its over 100 messages; what I mean is that you have an attribute that gets increased by +1 for certain activities and this attribute is what determines how many messages will be produced. So when this attribute is in the range of 400-500, and this code is producing less than 100 messages, everything is fine, but the moment this attribute gets above 500, any time the code is run it freezes the program, attempting to produce more than 100 messages.</p>\n<p>Why is it doing this?</p>\n\n",
      "PostDate": "2017-05-29T02:43:16.4150176Z",
      "LastEditDate": null
    },
    {
      "PostId": "e9e4f160-08a5-4b24-827a-781377694757",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "loops and recursion are not the same thing:\r\n\r\nloops:\r\n\r\nis merely jumping from one line to another line (as a 'loop' you're jumping from the end line of something back to its beginning line)\r\n\r\nrecursion:\r\n\r\nis actually doing something, getting interupted with having to do something else and which you go do that thing (but also remembering/storing/saving what you still have to finish up doing before you got interupted with doing this other task), and then you come back to finish up what you were doing before you had gotten interupted... and now imagine that you're getting interupted with having to do another task before you can do the interupted task... it quickly builds up... the amount of unfinished and thus remembered/stored/saved tasks you still got to go back to and do... (recursion IS very powerful/useful, but it comes at a cost, in that it requires a lot of resources to remember to still do all those unfinished tasks...), for example:\r\n\r\n1. make your bed!\r\n2. you start to make your bed... when you get another order...\r\n3. clean up your room!\r\n4. you stop making your bed and start to clean your room... when you get yet another order...\r\n5. put your dirty clothes in the washer/laundry!\r\n6. you stop cleaning your room and start to take your dirty clothes to the washer/laundry.... when you get yet another order...\r\n7. take out the trash!\r\n8. you stop putting your dirty clothes in the laundry, and go to take out the trash... (and since I think you get the idea now), and thankfully there's no more orders, and you're able to finish taking out the trash.\r\n9. you then go back to finishing up putting your dirty clothes in the laundry.\r\n10. you then go back to finishing cleaning your room\r\n11. you then go back to finishing making your bed... finally you're done... and can go play now!\r\n\r\nhttps://www.cs.utah.edu/~germain/PPS/Topics/recursion.html\r\n\r\nhttp://www.geeksforgeeks.org/recursion/ (scroll down to the 'four boxes  with the dashed blue path lines' picture, to see what is going on, the steps, with recursion)\r\n\r\nhttps://en.wikipedia.org/wiki/Tower_of_Hanoi\r\n\r\n------------\r\n\r\nthe most likely issue is that you do have a coding mistake/typo/logic_issue/infinite_looping\r\n\r\nis only removing a certain part of code, making it work without error? if yes, then you likely got a mistake in that code part\r\n\r\nif there is indeed no specfiic part of code that is causing the error, and thus removing any part of code, now allows it to work, then it does look like you hit a crash from it using up to much resources\r\n\r\n------\r\n\r\nI'm not good at math... but having 10 recursive loops would at least generate:\r\n\r\n10! (10 factorial): 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 3,628,800 activation records\r\n\r\nif not more... if you got each of those 10 nested loops being their own recursion loops...\r\n\r\nwe could be talking about maybe (again, I suck at math) ....\r\n\r\n10! x 10! = 3,628,800 x 3,628,800 = HUGE (lol)\r\nor maybe it's even more HUGE: (3,628,800 x 3,628,799 x 3,628,798 x ... x 2) x (3,628,800) = ... YIKES!...\r\n\r\n------\r\n\r\nthe quest software can have limits on itself too, such as restricting/limiting how many activation records (or for example your 100 messages) it creates...\r\n\r\n-----\r\n\r\nanother issue is the order of the scripts being run, could be causing conflicts\r\n\r\n-----\r\n\r\nanother issue with quest:\r\n\r\nif you loop/recursion something using a popup window or the get input... it'll crash/freeze, as it'll be still waiting for an input for these (the first one) by the person playing, when it creates another popup window or get input (much faster than the human can input for the prior one), which causes the crash, as you can't have two popup windows or 'get inputs' running at the same time.\r\n\r\nso, unfortunately, you got to be a lot more creative or better in your design of the scripting... which isn't always easy...\r\n\r\n-----------\r\n\r\nif you post your code, we can scour through it and see if we can find any issues with it",
      "EditableFormat": "markdown",
      "HTML": "<p>loops and recursion are not the same thing:</p>\n<p>loops:</p>\n<p>is merely jumping from one line to another line (as a 'loop' you're jumping from the end line of something back to its beginning line)</p>\n<p>recursion:</p>\n<p>is actually doing something, getting interupted with having to do something else and which you go do that thing (but also remembering/storing/saving what you still have to finish up doing before you got interupted with doing this other task), and then you come back to finish up what you were doing before you had gotten interupted... and now imagine that you're getting interupted with having to do another task before you can do the interupted task... it quickly builds up... the amount of unfinished and thus remembered/stored/saved tasks you still got to go back to and do... (recursion IS very powerful/useful, but it comes at a cost, in that it requires a lot of resources to remember to still do all those unfinished tasks...), for example:</p>\n<ol>\n<li>make your bed!</li>\n<li>you start to make your bed... when you get another order...</li>\n<li>clean up your room!</li>\n<li>you stop making your bed and start to clean your room... when you get yet another order...</li>\n<li>put your dirty clothes in the washer/laundry!</li>\n<li>you stop cleaning your room and start to take your dirty clothes to the washer/laundry.... when you get yet another order...</li>\n<li>take out the trash!</li>\n<li>you stop putting your dirty clothes in the laundry, and go to take out the trash... (and since I think you get the idea now), and thankfully there's no more orders, and you're able to finish taking out the trash.</li>\n<li>you then go back to finishing up putting your dirty clothes in the laundry.</li>\n<li>you then go back to finishing cleaning your room</li>\n<li>you then go back to finishing making your bed... finally you're done... and can go play now!</li>\n</ol>\n<p>https://www.cs.utah.edu/~germain/PPS/Topics/recursion.html</p>\n<p>http://www.geeksforgeeks.org/recursion/ (scroll down to the 'four boxes  with the dashed blue path lines' picture, to see what is going on, the steps, with recursion)</p>\n<p>https://en.wikipedia.org/wiki/Tower_of_Hanoi</p>\n<hr>\n<p>the most likely issue is that you do have a coding mistake/typo/logic_issue/infinite_looping</p>\n<p>is only removing a certain part of code, making it work without error? if yes, then you likely got a mistake in that code part</p>\n<p>if there is indeed no specfiic part of code that is causing the error, and thus removing any part of code, now allows it to work, then it does look like you hit a crash from it using up to much resources</p>\n<hr>\n<p>I'm not good at math... but having 10 recursive loops would at least generate:</p>\n<p>10! (10 factorial): 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 3,628,800 activation records</p>\n<p>if not more... if you got each of those 10 nested loops being their own recursion loops...</p>\n<p>we could be talking about maybe (again, I suck at math) ....</p>\n<p>10! x 10! = 3,628,800 x 3,628,800 = HUGE (lol)<br>\nor maybe it's even more HUGE: (3,628,800 x 3,628,799 x 3,628,798 x ... x 2) x (3,628,800) = ... YIKES!...</p>\n<hr>\n<p>the quest software can have limits on itself too, such as restricting/limiting how many activation records (or for example your 100 messages) it creates...</p>\n<hr>\n<p>another issue is the order of the scripts being run, could be causing conflicts</p>\n<hr>\n<p>another issue with quest:</p>\n<p>if you loop/recursion something using a popup window or the get input... it'll crash/freeze, as it'll be still waiting for an input for these (the first one) by the person playing, when it creates another popup window or get input (much faster than the human can input for the prior one), which causes the crash, as you can't have two popup windows or 'get inputs' running at the same time.</p>\n<p>so, unfortunately, you got to be a lot more creative or better in your design of the scripting... which isn't always easy...</p>\n<hr>\n<p>if you post your code, we can scour through it and see if we can find any issues with it</p>\n\n",
      "PostDate": "2017-05-29T03:17:50.7696779Z",
      "LastEditDate": "2017-05-29T03:44:23.3152635Z"
    },
    {
      "PostId": "b1b6a692-f51b-4bb9-9b58-91f72219b5c8",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, when the controlling attribute is a number below 500, then the code works completely fine, but above 500, it doesn't. When under 500, the code executes flawlessly, doing precisely what I coded it to do. When above 500, it freezes the entire game, forcing me to CTRL+ALT+DEL the program with Task Manager. The order of the scripts being run weren't the issue. I wasn't using a popup window OR the get input function; though on an unrelated note I have had two get inputs occur at the same time before so I know that error quite well.\r\n\r\nWell, if each record was say using up say 64 bytes (which is a lot for strings or character variable types) and it had 3,628,800 records, the total number of bytes would be 232,243,200 bytes... as there is 1024 in a kilo byte, that would be 226,800 kb... as there is 1024 in a mega byte that would be 221.4844 mb. I doubt its making 3.63 million records, and even if it was, I have 16 gb of ram or 16384 mb of ram available to me. Even if the program was 32bit and restricted memory usage to ~3.2 to ~3.3 GB, I'd still have sufficient RAM to create and store all those records. So, unless there is a way for me to output to a log file at the time of program freeze / crash to find out how many records are being produced, I'd say that it is a different issue causing the problem.\r\n\r\n Yah, you are probably right; I'll have to get more creative on how to do what I want to do.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, when the controlling attribute is a number below 500, then the code works completely fine, but above 500, it doesn't. When under 500, the code executes flawlessly, doing precisely what I coded it to do. When above 500, it freezes the entire game, forcing me to CTRL+ALT+DEL the program with Task Manager. The order of the scripts being run weren't the issue. I wasn't using a popup window OR the get input function; though on an unrelated note I have had two get inputs occur at the same time before so I know that error quite well.</p>\n<p>Well, if each record was say using up say 64 bytes (which is a lot for strings or character variable types) and it had 3,628,800 records, the total number of bytes would be 232,243,200 bytes... as there is 1024 in a kilo byte, that would be 226,800 kb... as there is 1024 in a mega byte that would be 221.4844 mb. I doubt its making 3.63 million records, and even if it was, I have 16 gb of ram or 16384 mb of ram available to me. Even if the program was 32bit and restricted memory usage to ~3.2 to ~3.3 GB, I'd still have sufficient RAM to create and store all those records. So, unless there is a way for me to output to a log file at the time of program freeze / crash to find out how many records are being produced, I'd say that it is a different issue causing the problem.</p>\n<p>Yah, you are probably right; I'll have to get more creative on how to do what I want to do.</p>\n\n",
      "PostDate": "2017-05-29T03:43:47.0137231Z",
      "LastEditDate": null
    },
    {
      "PostId": "2e76bde3-f810-4cca-8dbd-5e44534b9661",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have never used it, but you can do this to log text:\r\n```\r\nrequest(Log, \"This is a message\")\r\n```\r\nNote the `Log` has no quotes and starts with a capital.\r\n\r\nIt is possible that Quest has a limit on the number of nested loops it supports; I have never done more than three (and I am curious why ten might be required).",
      "EditableFormat": "markdown",
      "HTML": "<p>I have never used it, but you can do this to log text:</p>\n<pre><code>request(Log, \"This is a message\")\n</code></pre>\n<p>Note the <code>Log</code> has no quotes and starts with a capital.</p>\n<p>It is possible that Quest has a limit on the number of nested loops it supports; I have never done more than three (and I am curious why ten might be required).</p>\n\n",
      "PostDate": "2017-05-29T08:55:32.54163Z",
      "LastEditDate": null
    },
    {
      "PostId": "bba82b2f-c049-444b-b364-1463764f754f",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, the way I had it setup, is that while the loop is active, turn scripts outside of it do not fire... which is logical as the while loop is its own contained system with its own local variable, but this creates a problem if the player expects those turn scripts to fire. So, if you have a turn script that say levels the player's skill up, and then adds +1 skill increase and that skill increases would help you out within that loop, then you have to nest that bit of code within this larger loop. So what kind of system would require nesting of loops?\r\n\r\nAn auto-attack option. The player activates the auto-attack command, and then the loop ends if the creature is dead, or if the player reaches 25% or less HP, and keeps looping until one of those conditions stop being true. So, if you have several skills, such as Sword skill, Armor skill, and Block skill, each of them is a separate loop nested within the larger loop of auto-attack. Whenever you get enough sword skill xp, you get a skill up, and as that skill up would improve your odds of success within the auto-attack, you'd want to receive that skill up while auto-attack is looping. So, as a result, you have several loops and nested if/elses, all within one loop, and so the auto-attack loop is fairly big with a lot of logic that gets checked in a specific order before the auto-attack loop condition is checked. It may be possible to reduce the loops or if/elses in some way, but as I've only been doing Quest for the past couple weeks, the system works and so I've not taken the time to refactor it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, the way I had it setup, is that while the loop is active, turn scripts outside of it do not fire... which is logical as the while loop is its own contained system with its own local variable, but this creates a problem if the player expects those turn scripts to fire. So, if you have a turn script that say levels the player's skill up, and then adds +1 skill increase and that skill increases would help you out within that loop, then you have to nest that bit of code within this larger loop. So what kind of system would require nesting of loops?</p>\n<p>An auto-attack option. The player activates the auto-attack command, and then the loop ends if the creature is dead, or if the player reaches 25% or less HP, and keeps looping until one of those conditions stop being true. So, if you have several skills, such as Sword skill, Armor skill, and Block skill, each of them is a separate loop nested within the larger loop of auto-attack. Whenever you get enough sword skill xp, you get a skill up, and as that skill up would improve your odds of success within the auto-attack, you'd want to receive that skill up while auto-attack is looping. So, as a result, you have several loops and nested if/elses, all within one loop, and so the auto-attack loop is fairly big with a lot of logic that gets checked in a specific order before the auto-attack loop condition is checked. It may be possible to reduce the loops or if/elses in some way, but as I've only been doing Quest for the past couple weeks, the system works and so I've not taken the time to refactor it.</p>\n\n",
      "PostDate": "2017-05-29T18:06:30.9492447Z",
      "LastEditDate": null
    },
    {
      "PostId": "2dd5836e-f565-4322-aefe-dd4661816ad2",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That should just be one loop. In each iteration:\r\n- player attacks\r\n- determine if skills increase\r\n- determine if level up\r\n- run turn scripts\r\n- test to see if you should continue\r\n\r\nThe `RunTurnScripts` function will run the turn scripts. Enemies attacking the player should be handled there so they get an attack if the player  does something else (and that would be another loop going through each enemy in tirn).",
      "EditableFormat": "markdown",
      "HTML": "<p>That should just be one loop. In each iteration:</p>\n<ul>\n<li>player attacks</li>\n<li>determine if skills increase</li>\n<li>determine if level up</li>\n<li>run turn scripts</li>\n<li>test to see if you should continue</li>\n</ul>\n<p>The <code>RunTurnScripts</code> function will run the turn scripts. Enemies attacking the player should be handled there so they get an attack if the player  does something else (and that would be another loop going through each enemy in tirn).</p>\n\n",
      "PostDate": "2017-05-29T21:03:32.41357Z",
      "LastEditDate": null
    },
    {
      "PostId": "968ac826-172d-408d-b6dc-9d8f5d0bd277",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's two ways of doing 'constantly checking' operations:\r\n\r\n1. Turnscripts/Timers:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/turnscript.html\r\nhttp://docs.textadventures.co.uk/quest/elements/timer.html\r\n\r\n* controlable for when/where it does the constant checking (enabled:true/false and local/global)\r\n* managed/controlled timing as the scripting is within the Turnscript/Timer and thus you're able to control/set the 'order of operations'\r\n* however, working with Turnscripts/Timers (and especially a lot of them) can be quite a hassle too...\r\n\r\n2. the special 'changedNAME_OF_ATTRIBUTE' change Script Attribute\r\n\r\nhttp://docs.textadventures.co.uk/quest/change_scripts.html\r\nhttp://docs.textadventures.co.uk/quest/guides/running_a_script_when_an_attribute_changes.html\r\n\r\n* it activates immediately upon the specified Attribute's Value changing, so you can have timing issues/conflicts...\r\n* however, it's also nice because it does immediately activate when the specified Attribute's Value changes, which can avoid the hassle of the issues with using Turnscripts/Timers",
      "EditableFormat": "markdown",
      "HTML": "<p>there's two ways of doing 'constantly checking' operations:</p>\n<ol>\n<li>Turnscripts/Timers:</li>\n</ol>\n<p>http://docs.textadventures.co.uk/quest/elements/turnscript.html<br>\nhttp://docs.textadventures.co.uk/quest/elements/timer.html</p>\n<ul>\n<li>controlable for when/where it does the constant checking (enabled:true/false and local/global)</li>\n<li>managed/controlled timing as the scripting is within the Turnscript/Timer and thus you're able to control/set the 'order of operations'</li>\n<li>however, working with Turnscripts/Timers (and especially a lot of them) can be quite a hassle too...</li>\n</ul>\n<ol start=\"2\">\n<li>the special 'changedNAME_OF_ATTRIBUTE' change Script Attribute</li>\n</ol>\n<p>http://docs.textadventures.co.uk/quest/change_scripts.html<br>\nhttp://docs.textadventures.co.uk/quest/guides/running_a_script_when_an_attribute_changes.html</p>\n<ul>\n<li>it activates immediately upon the specified Attribute's Value changing, so you can have timing issues/conflicts...</li>\n<li>however, it's also nice because it does immediately activate when the specified Attribute's Value changes, which can avoid the hassle of the issues with using Turnscripts/Timers</li>\n</ul>\n\n",
      "PostDate": "2017-05-29T21:54:01.3314348Z",
      "LastEditDate": null
    },
    {
      "PostId": "8c8b4e09-3a59-4dc3-a4cc-15998ec00467",
      "UserId": 307193,
      "Username": "lordpalandus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/637feacf8e8a52834eaa284e96f879bf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, clearly I have some refactoring to do then. Thanks for the advice/input.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, clearly I have some refactoring to do then. Thanks for the advice/input.</p>\n\n",
      "PostDate": "2017-05-30T06:09:13.0922116Z",
      "LastEditDate": null
    }
  ]
}
