{
  "Topic": {
    "TopicId": "eytqqdiu90q1npuqt-i7iw",
    "ForumId": "10",
    "Title": "Messing around with the map",
    "LastUpdated": "2018-03-09T13:26:15.1946029Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b2ad9fa2-9879-48c7-a233-533aea00f2fc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey folks!\r\n\r\nIt's me again, coming up with some really dumb ideas.\r\nI've been thinking about building a completely new map system. I don't know much about JS canvases, so for now I'm just playing with SVG. But I'm wondering if it would be worth trying to get my head around it enough to integrate this with the current Grid system.\r\n\r\nAnyway… what I'm looking at is a simple physics engine. Rooms are light rigid bodies with a constant \"friction\". Exits are ideal elastic springs with a given natural length and identical mass. The physics algorithm runs in javascript, and only knows about rooms that have been visited. So if rooms are connected in a way that doesn't make a perfect loop (like the \"don't do this\" examples on the map page), they'll bounce around a little until everything lines up.\r\n\r\nPossible problems with this:\r\n* Making a complex map match up might need a lot of iterations of the algorithm.\r\n  * Means walking along an exit can be slow if the algorithm is forced to run to completion; or could even freeze in some impossible layouts\r\n  * If you allow the algorithm to run continuously, the player could see rooms on the map bouncing around as they adjust\r\n* Rooms might not always assume the same final layout, depending on the order you visit them in.\r\n* Couldn't be used as a drop-in replacement for the existing grid system\r\n  * Would work in most cases, but not if a game or library assumes that the same grid dictionaries will be there\r\n* Guaranteeing that rooms won't overlap is *hard*\r\n  * Actually, not that hard. But if you use the simplest solution, you can get rooms that 'snag' on each other as they're moving around and then get stuck in ugly layouts.\r\n\r\nSo… anyone think it's worth playing with?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey folks!</p>\n<p>It's me again, coming up with some really dumb ideas.<br>\nI've been thinking about building a completely new map system. I don't know much about JS canvases, so for now I'm just playing with SVG. But I'm wondering if it would be worth trying to get my head around it enough to integrate this with the current Grid system.</p>\n<p>Anyway… what I'm looking at is a simple physics engine. Rooms are light rigid bodies with a constant \"friction\". Exits are ideal elastic springs with a given natural length and identical mass. The physics algorithm runs in javascript, and only knows about rooms that have been visited. So if rooms are connected in a way that doesn't make a perfect loop (like the \"don't do this\" examples on the map page), they'll bounce around a little until everything lines up.</p>\n<p>Possible problems with this:</p>\n<ul>\n<li>Making a complex map match up might need a lot of iterations of the algorithm.\n<ul>\n<li>Means walking along an exit can be slow if the algorithm is forced to run to completion; or could even freeze in some impossible layouts</li>\n<li>If you allow the algorithm to run continuously, the player could see rooms on the map bouncing around as they adjust</li>\n</ul>\n</li>\n<li>Rooms might not always assume the same final layout, depending on the order you visit them in.</li>\n<li>Couldn't be used as a drop-in replacement for the existing grid system\n<ul>\n<li>Would work in most cases, but not if a game or library assumes that the same grid dictionaries will be there</li>\n</ul>\n</li>\n<li>Guaranteeing that rooms won't overlap is <em>hard</em>\n<ul>\n<li>Actually, not that hard. But if you use the simplest solution, you can get rooms that 'snag' on each other as they're moving around and then get stuck in ugly layouts.</li>\n</ul>\n</li>\n</ul>\n<p>So… anyone think it's worth playing with?</p>\n\n",
      "PostDate": "2018-03-09T13:26:15.1946029Z",
      "LastEditDate": "2018-03-09T13:29:21.1628787Z",
      "link": null
    }
  ]
}
