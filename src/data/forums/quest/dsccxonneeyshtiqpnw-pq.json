{
  "Topic": {
    "TopicId": "dsccxonneeyshtiqpnw-pq",
    "ForumId": "10",
    "Title": "Word counter",
    "LastUpdated": "2024-10-27T21:25:22.4442633Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e7dbfe3f-67b0-4c97-9db7-aff13bf7dc05",
      "UserId": 518493,
      "Username": "Aogbogcog",
      "AvatarUrl": "https://secure.gravatar.com/avatar/597ec12e075116e029cd3e49910f83fa?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "?",
      "EditableFormat": "markdown",
      "HTML": "<p>?</p>\n\n",
      "PostDate": "2024-10-27T21:25:22.4442633Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f95c41bf-c256-4c04-bbb1-b96f1022fcbf",
      "UserId": 702645,
      "Username": "ice4",
      "AvatarUrl": "https://secure.gravatar.com/avatar/122083a5b03d84dfa5f4d06a01abd573?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "?",
      "EditableFormat": "markdown",
      "HTML": "<p>?</p>\n\n",
      "PostDate": "2024-11-03T16:14:37.8489814Z",
      "LastEditDate": "2024-11-03T16:16:05.1466768Z",
      "link": null
    },
    {
      "PostId": "ad2bca18-95b2-4fc2-adab-0e6339a5c416",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "in room object,\r\nat after entering the room column,\r\nclick the code view,\r\ntype\r\n```\r\nget input {\r\n  text = result\r\n  totalLength = LengthOf(text)\r\n  textWithoutSpaces = Replace(text, \" \", \"\")\r\n  lengthWithoutSpaces = LengthOf(textWithoutSpaces)\r\n  spaceCount = totalLength - lengthWithoutSpaces\r\n  msg (\"Number of spaces: \" + spaceCount)\r\n  numberofwords = spaceCount+1\r\n  msg (\"Number of words: \" + numberofwords)\r\n}\r\n```\r\nTest the code, \r\ntype in \"test test test\",\r\nyou will get\r\nNumber of spaces: 2\r\nNumber of words: 3\r\n\r\nObviously, the number of spaces are redundant but I need to showcase you how the method works\r\n\r\n___________________________________________\r\n\r\nCreate a function named wordcounter\r\ntype in the slim down code without msg player about number of spaces\r\n```\r\nget input {\r\n  text = result\r\n  totalLength = LengthOf(text)\r\n  textWithoutSpaces = Replace(text, \" \", \"\")\r\n  lengthWithoutSpaces = LengthOf(textWithoutSpaces)\r\n  spaceCount = totalLength - lengthWithoutSpaces\r\n  numberofwords = spaceCount+1\r\n  msg (\"Number of words: \" + numberofwords)\r\n}\r\n```\r\nThis is for a more flexible wordcounter so you can just call the function whenever you need it",
      "EditableFormat": "markdown",
      "HTML": "<p>in room object,<br>\nat after entering the room column,<br>\nclick the code view,<br>\ntype</p>\n<pre><code>get input {\n  text = result\n  totalLength = LengthOf(text)\n  textWithoutSpaces = Replace(text, \" \", \"\")\n  lengthWithoutSpaces = LengthOf(textWithoutSpaces)\n  spaceCount = totalLength - lengthWithoutSpaces\n  msg (\"Number of spaces: \" + spaceCount)\n  numberofwords = spaceCount+1\n  msg (\"Number of words: \" + numberofwords)\n}\n</code></pre>\n<p>Test the code,<br>\ntype in \"test test test\",<br>\nyou will get<br>\nNumber of spaces: 2<br>\nNumber of words: 3</p>\n<p>Obviously, the number of spaces are redundant but I need to showcase you how the method works</p>\n<hr>\n<p>Create a function named wordcounter<br>\ntype in the slim down code without msg player about number of spaces</p>\n<pre><code>get input {\n  text = result\n  totalLength = LengthOf(text)\n  textWithoutSpaces = Replace(text, \" \", \"\")\n  lengthWithoutSpaces = LengthOf(textWithoutSpaces)\n  spaceCount = totalLength - lengthWithoutSpaces\n  numberofwords = spaceCount+1\n  msg (\"Number of words: \" + numberofwords)\n}\n</code></pre>\n<p>This is for a more flexible wordcounter so you can just call the function whenever you need it</p>\n\n",
      "PostDate": "2024-11-03T16:19:03.8370459Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fa78d73d-ac1b-4624-8a22-50499a3a9b6f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Counting words isn't necessarily the same as counting spaces. This function will give odd counts if you feed it a string with multiple spaces between words; or with spaces at the beginning or end. Or punctuation marks instead of spaces.\r\n\r\nHere's a (somewhat slower) way to count words in a string:\r\n```\r\n<function name=\"CountWords\" parameters=\"input\" type=\"int\"><![CDATA[\r\n  result = 0\r\n  while (IsRegexMatch (\"\\\\w\", input)) {\r\n    result = result + 1\r\n    split = Populate (\"^\\\\W*\\\\w++\\\\W*(?<remainder>.*)\", input, \"firstword\")\r\n    input = DictionaryItem (split, \"remainder\")\r\n  }\r\n  return (result)\r\n]]></function>\r\n```\r\n\r\nThis uses the regular expression patterns `\\w++` (matches any complete word) and `\\W*` (matches a block of nonword characters - including spaces and punctuation). So the call to `IsRegexMatch` checks if there is a word character (`\\w`, any letter or digit) in the string. If so, `Populate` removes the first word and any spaces/punctuation from either side of it, and stores the part of the string that still needs to be counted in the `remainder` subpattern.",
      "EditableFormat": "markdown",
      "HTML": "<p>Counting words isn't necessarily the same as counting spaces. This function will give odd counts if you feed it a string with multiple spaces between words; or with spaces at the beginning or end. Or punctuation marks instead of spaces.</p>\n<p>Here's a (somewhat slower) way to count words in a string:</p>\n<pre><code>&lt;function name=\"CountWords\" parameters=\"input\" type=\"int\"&gt;&lt;![CDATA[\n  result = 0\n  while (IsRegexMatch (\"\\\\w\", input)) {\n    result = result + 1\n    split = Populate (\"^\\\\W*\\\\w++\\\\W*(?&lt;remainder&gt;.*)\", input, \"firstword\")\n    input = DictionaryItem (split, \"remainder\")\n  }\n  return (result)\n]]&gt;&lt;/function&gt;\n</code></pre>\n<p>This uses the regular expression patterns <code>\\w++</code> (matches any complete word) and <code>\\W*</code> (matches a block of nonword characters - including spaces and punctuation). So the call to <code>IsRegexMatch</code> checks if there is a word character (<code>\\w</code>, any letter or digit) in the string. If so, <code>Populate</code> removes the first word and any spaces/punctuation from either side of it, and stores the part of the string that still needs to be counted in the <code>remainder</code> subpattern.</p>\n\n",
      "PostDate": "2024-11-04T09:50:40.604465Z",
      "LastEditDate": "2024-11-05T08:13:57.4291053Z",
      "link": null
    },
    {
      "PostId": "dac007f8-61cb-4850-b6e6-dc24b5f19adc",
      "UserId": 702645,
      "Username": "ice4",
      "AvatarUrl": "https://secure.gravatar.com/avatar/122083a5b03d84dfa5f4d06a01abd573?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I changed mrangel's coding into the following copy and paste code view code,\r\nI am not sure if I did it right,\r\n1. I rearranged the 'input' and 'result' as quest app recognize 'result' instead\r\n2. I added in get input {} function\r\n3. Quest app sounds an error, so I changed `\\++` to `\\+`\r\n\r\n```\r\nget input {\r\n  text = result\r\n  count = 0\r\n  while (IsRegexMatch(\"\\\\w\", text)) {\r\n    count = count + 1\r\n    split = Populate(\"^\\\\W*\\\\w+\\\\W*(?<remainder>.*)\", text, \"firstword\")\r\n    text = DictionaryItem(split, \"remainder\")\r\n  }\r\n  msg (\"Number of words: \" + count)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I changed mrangel's coding into the following copy and paste code view code,<br>\nI am not sure if I did it right,</p>\n<ol>\n<li>I rearranged the 'input' and 'result' as quest app recognize 'result' instead</li>\n<li>I added in get input {} function</li>\n<li>Quest app sounds an error, so I changed <code>\\++</code> to <code>\\+</code></li>\n</ol>\n<pre><code>get input {\n  text = result\n  count = 0\n  while (IsRegexMatch(\"\\\\w\", text)) {\n    count = count + 1\n    split = Populate(\"^\\\\W*\\\\w+\\\\W*(?&lt;remainder&gt;.*)\", text, \"firstword\")\n    text = DictionaryItem(split, \"remainder\")\n  }\n  msg (\"Number of words: \" + count)\n}\n</code></pre>\n\n",
      "PostDate": "2024-11-04T14:07:16.8549176Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05575adf-ade9-467c-a0f9-cd7f78fb1be7",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could also probably add his function, then just use it in your code like this:\r\n\r\n```\r\nget input {\r\n  msg(\"Number of words: \" + CountWords(result))\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You could also probably add his function, then just use it in your code like this:</p>\n<pre><code>get input {\n  msg(\"Number of words: \" + CountWords(result))\n}\n</code></pre>\n\n",
      "PostDate": "2024-11-04T14:13:15.9929587Z",
      "LastEditDate": "2024-11-04T22:12:34.9946653Z",
      "link": null
    },
    {
      "PostId": "ad74729b-9046-4f0c-bef2-bf090e1c65ae",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Huhâ€¦ an error? Does that mean the regex engine that Quest uses doesn't support possessive (sticky) quantifiers?\r\nI don't think it'll make any difference in this case, `\\w+` should work just as well. But I thought that had been part of the regex standard for a very long time.\r\n\r\nIn anyone is wondering about the distinction:\r\n* `\\w` matches a single word character\r\n* `\\w+` matches one or more word characters\r\n* `\\w++` matches one or more word characters that are *not followed by* any more word characters\r\n* (`\\W` is the opposite of `\\w`, matching non-word characters in the same way that `\\S` matches non-space characters, and `\\D` matches non-digits)",
      "EditableFormat": "markdown",
      "HTML": "<p>Huhâ€¦ an error? Does that mean the regex engine that Quest uses doesn't support possessive (sticky) quantifiers?<br>\nI don't think it'll make any difference in this case, <code>\\w+</code> should work just as well. But I thought that had been part of the regex standard for a very long time.</p>\n<p>In anyone is wondering about the distinction:</p>\n<ul>\n<li><code>\\w</code> matches a single word character</li>\n<li><code>\\w+</code> matches one or more word characters</li>\n<li><code>\\w++</code> matches one or more word characters that are <em>not followed by</em> any more word characters</li>\n<li>(<code>\\W</code> is the opposite of <code>\\w</code>, matching non-word characters in the same way that <code>\\S</code> matches non-space characters, and <code>\\D</code> matches non-digits)</li>\n</ul>\n\n",
      "PostDate": "2024-11-04T19:17:13.1778094Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d04a1eaf-e7eb-4630-adc1-331aa98db800",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT: I initially copied and pasted the wrong thing here.**\r\n\r\nThis is nifty.\r\n\r\nI made that one change and wrapped it in `<![CDATA[[]]>`, and it seems to work flawlessly.",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT: I initially copied and pasted the wrong thing here.</strong></p>\n<p>This is nifty.</p>\n<p>I made that one change and wrapped it in <code>&lt;![CDATA[[]]&gt;</code>, and it seems to work flawlessly.</p>\n\n",
      "PostDate": "2024-11-04T22:31:07.6962477Z",
      "LastEditDate": "2024-11-04T22:48:59.7707353Z",
      "link": null
    },
    {
      "PostId": "75a320ea-86d2-4c18-91ee-ea245b083c0e",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\r\n\r\n> \\w matches a single word character\r\n> \\w+ matches one or more word characters\r\n> \\w++ matches one or more word characters that are not followed by any more word characters\r\n> (\\W is the opposite of \\w, matching non-word characters in the same way that \\S matches non-space characters, and \\D matches non-digits)\r\n\r\nWe need more tutorials on regular expression ._.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>\\w matches a single word character<br>\n\\w+ matches one or more word characters<br>\n\\w++ matches one or more word characters that are not followed by any more word characters<br>\n(\\W is the opposite of \\w, matching non-word characters in the same way that \\S matches non-space characters, and \\D matches non-digits)</p>\n</blockquote>\n<p>We need more tutorials on regular expression ._.</p>\n\n",
      "PostDate": "2024-11-05T07:53:31.9591361Z",
      "LastEditDate": "2024-11-05T07:54:43.4564293Z",
      "link": null
    }
  ]
}
