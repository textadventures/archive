{
  "Topic": {
    "TopicId": "i7v9uxesle_uu0zl7yfyeq",
    "ForumId": "10",
    "Title": "Should I be using Turn Script for this?",
    "LastUpdated": "2017-06-23T10:22:59.5933112Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "80d78bf1-11e0-4bec-b600-eb67e89e539e",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya all,\r\n\r\nI've got a question about something I'm trying to do.\r\n\r\nPregnancy. Because going Alien and xenomorph in a game is always fun. Anyway, we have our father, that for now, we will reference as a Goblin.\r\n\r\nPlayer currently becomes pregnant through a verb, because I'm still testing.\r\n\r\n```msg (\"You're overwhelmed by the goblin and are now pregnant. RIP.\")\r\nSetInc (500)\r\nif (player.race = \"Human\") {\r\n  if (not GetBoolean(player, \"Contra\")) {\r\n    if (RandomChance(75)) {\r\n      set (player, \"pregnantwith\", \"Goblin\")\r\n      set (player, \"pregnant\", True)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThat works fine and dandy. The event takes 500 minutes, only affects those playing as a human with compatible DNA, and there's a 75% chance they are going to get a goblin 'chest burster' due to the chance of having your systems fight it off (Something I plan to give stat boosts later)\r\n\r\nNow we move onto actually trying to get the Pregnancy. Now it's not just one cutscene where the player is defeated, RIP and doom, but they get the chance to be able to unpregnate themselves, either by system boosters or surgery pods, etc. If they can get there in time or figure it out.\r\n\r\nFor this, I've been using a Turn Script.\r\n\r\n```\r\nif (player.pregnant = True) {\r\n  CreateEvent (1000, \"pregnancy\") {\r\n    if (player.race = \"human\") {\r\n      msg (\"You've given birth to a {player.pregnantwith}.\")\r\n    }\r\n  }\r\n  firsttime {\r\n    msg (\"You can feel something writhing around in your chest.\")\r\n  }\r\n}\r\nelse {\r\n}\r\n```\r\n\r\nThis gives the playe 1000 minutes to do something about it. I've not gotten that far yet, which brings me to my issues here. I've not used turn scripts much because they seem a pain, especially when printing messages. Like I was getting the \"You feel something writhing around in your chest.\" Every turn, which was annoying, so I put it as a first time. But, the player will likely have this same event happen to them multiple times in play, as its a defeat when fighting a boss. \r\n\r\nAnd now I get the 'You've given birth to a goblin message every turn, and if I keep playing the encounter, I manage to even get burst by four at once. Oh dear.\r\n\r\nNow I know this is probably down to the turn script being something looked at every turn, so my question is, should I be using a different feature of Quest for this? I'm still quite a novice and rarely go into code mode unless I have to, which is what made this a little harder for me. \r\n\r\nI'd like to add a function too that, as the pregnancy trait progresses, various messages of increasing urgency come up.\r\n\r\n\"You feel something small squirming in your chest.\" \"There's a painful spiking between your lungs.\" \"Breathing is getting difficult.\" Etc. They could come up every 200 minutes of in-game time or so. I'm using Pixie's time and date library, and currently the numbers are more of a placeholder until I get things balanced properly. Anyway, if my rambling can be understood, if any advice on how to lay this out is about, it would be greatly appreciated!",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya all,</p>\n<p>I've got a question about something I'm trying to do.</p>\n<p>Pregnancy. Because going Alien and xenomorph in a game is always fun. Anyway, we have our father, that for now, we will reference as a Goblin.</p>\n<p>Player currently becomes pregnant through a verb, because I'm still testing.</p>\n<pre><code>SetInc (500)\nif (player.race = \"Human\") {\n  if (not GetBoolean(player, \"Contra\")) {\n    if (RandomChance(75)) {\n      set (player, \"pregnantwith\", \"Goblin\")\n      set (player, \"pregnant\", True)\n    }\n  }\n}\n</code></pre>\n<p>That works fine and dandy. The event takes 500 minutes, only affects those playing as a human with compatible DNA, and there's a 75% chance they are going to get a goblin 'chest burster' due to the chance of having your systems fight it off (Something I plan to give stat boosts later)</p>\n<p>Now we move onto actually trying to get the Pregnancy. Now it's not just one cutscene where the player is defeated, RIP and doom, but they get the chance to be able to unpregnate themselves, either by system boosters or surgery pods, etc. If they can get there in time or figure it out.</p>\n<p>For this, I've been using a Turn Script.</p>\n<pre><code>if (player.pregnant = True) {\n  CreateEvent (1000, \"pregnancy\") {\n    if (player.race = \"human\") {\n      msg (\"You've given birth to a {player.pregnantwith}.\")\n    }\n  }\n  firsttime {\n    msg (\"You can feel something writhing around in your chest.\")\n  }\n}\nelse {\n}\n</code></pre>\n<p>This gives the playe 1000 minutes to do something about it. I've not gotten that far yet, which brings me to my issues here. I've not used turn scripts much because they seem a pain, especially when printing messages. Like I was getting the \"You feel something writhing around in your chest.\" Every turn, which was annoying, so I put it as a first time. But, the player will likely have this same event happen to them multiple times in play, as its a defeat when fighting a boss.</p>\n<p>And now I get the 'You've given birth to a goblin message every turn, and if I keep playing the encounter, I manage to even get burst by four at once. Oh dear.</p>\n<p>Now I know this is probably down to the turn script being something looked at every turn, so my question is, should I be using a different feature of Quest for this? I'm still quite a novice and rarely go into code mode unless I have to, which is what made this a little harder for me.</p>\n<p>I'd like to add a function too that, as the pregnancy trait progresses, various messages of increasing urgency come up.</p>\n<p>\"You feel something small squirming in your chest.\" \"There's a painful spiking between your lungs.\" \"Breathing is getting difficult.\" Etc. They could come up every 200 minutes of in-game time or so. I'm using Pixie's time and date library, and currently the numbers are more of a placeholder until I get things balanced properly. Anyway, if my rambling can be understood, if any advice on how to lay this out is about, it would be greatly appreciated!</p>\n\n",
      "PostDate": "2017-06-23T10:22:59.5933112Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e6b4186-de3c-4b10-a4f6-86036759930f",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I did something similar in X3 (WIP) and _I think_ I used a turnscript coupled with a random chance.  Basically, after every turn, there was a percent chance that a message would print.  To complicate matters more, the percent chance was set on Booleans through If/Else If scripts.\r\n\r\nIn my game, I have 'time of day' linked to number of turns via a turn script and my object 'bats'.  If the time of day was midnight, the messages about bats popped up more frequently and during the day, much less so.  It seems you could do something similar with pregnancy.  Messages increase based on flags set as the months draw closer to your birth date.\r\n\r\nI'm not 100% sure this helps with your question but... there you have it.  Best of luck!\r\n\r\nIf you have questions, let me know and I'll dig through my code and see if I can clarify!  =)\r\n\r\nEDIT:  as I think about this a little more, I'm not sure if _you_ would even need a turnscript?  It's too early for me.  Forgive me.  haha",
      "EditableFormat": "markdown",
      "HTML": "<p>I did something similar in X3 (WIP) and <em>I think</em> I used a turnscript coupled with a random chance.  Basically, after every turn, there was a percent chance that a message would print.  To complicate matters more, the percent chance was set on Booleans through If/Else If scripts.</p>\n<p>In my game, I have 'time of day' linked to number of turns via a turn script and my object 'bats'.  If the time of day was midnight, the messages about bats popped up more frequently and during the day, much less so.  It seems you could do something similar with pregnancy.  Messages increase based on flags set as the months draw closer to your birth date.</p>\n<p>I'm not 100% sure this helps with your question but... there you have it.  Best of luck!</p>\n<p>If you have questions, let me know and I'll dig through my code and see if I can clarify!  =)</p>\n<p>EDIT:  as I think about this a little more, I'm not sure if <em>you</em> would even need a turnscript?  It's too early for me.  Forgive me.  haha</p>\n\n",
      "PostDate": "2017-06-23T11:14:55.9352287Z",
      "LastEditDate": "2017-06-23T11:18:07.2335757Z",
      "link": null
    },
    {
      "PostId": "d90efdf0-49a6-40b7-82ab-af5e81226432",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is a turn script aready running in the game (in ClockLib), and that will handle this.\r\n\r\nDelete the `SetInc (500)` - that will just make 500 minutes pass before the player can do anything. What you really want to do is create events that will fire at the right time. Here is an example:\r\n\r\n```\r\nif (player.race = \"Human\") {\r\n  if (not GetBoolean(player, \"Contra\")) {\r\n    if (RandomChance(75)) {\r\n      set (player, \"pregnantwith\", \"Goblin\")\r\n      set (player, \"pregnant\", True)\r\n\r\n      CreateEvent (250, \"pregnancy1\") {\r\n        if (player.pregnant) {\r\n          msg (\"You feel something small squirming in your chest.\")\r\n        }\r\n        else {\r\n          Quiet\r\n        }\r\n      }\r\n\r\n      CreateEvent (500, \"pregnancy2\") {\r\n        if (player.pregnant) {\r\n          msg (\"There's a painful spiking between your lungs.\")\r\n        }\r\n        else {\r\n          Quiet\r\n        }\r\n      }\r\n\r\n      CreateEvent (750, \"pregnancy3\") {\r\n        if (player.pregnant) {\r\n          msg (\"Breathing is getting difficult.\")\r\n        }\r\n        else {\r\n          Quiet\r\n        }\r\n      }\r\n\r\n      CreateEvent (1000, \"pregnancy4\") {\r\n        if (player.pregnant) {\r\n          msg (\"You've given birth to a {player.pregnantwith}.\")\r\n          msg(\"... and now you are dead.\")\r\n          finish\r\n        }\r\n        else {\r\n          Quiet\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nJust looking at the last event to explain:\r\n```\r\n      CreateEvent (1000, \"pregnancy\") {\r\n        if (player.pregnant) {\r\n          msg (\"You've given birth to a {player.pregnantwith}.\")\r\n          msg(\"... and now you are dead.\")\r\n          finish\r\n        }\r\n        else {\r\n          Quiet\r\n        }\r\n      }\r\n```\r\nThis create an event that will happen in 1000 turns (minutes). If the player is still pregnant, the messages are displayed, and the game ends. If the player is not pregnant, do nothing (Quiet means that if the player is waiting, the wait will not get interrupted by a non-event).",
      "EditableFormat": "markdown",
      "HTML": "<p>There is a turn script aready running in the game (in ClockLib), and that will handle this.</p>\n<p>Delete the <code>SetInc (500)</code> - that will just make 500 minutes pass before the player can do anything. What you really want to do is create events that will fire at the right time. Here is an example:</p>\n<pre><code>if (player.race = \"Human\") {\n  if (not GetBoolean(player, \"Contra\")) {\n    if (RandomChance(75)) {\n      set (player, \"pregnantwith\", \"Goblin\")\n      set (player, \"pregnant\", True)\n\n      CreateEvent (250, \"pregnancy1\") {\n        if (player.pregnant) {\n          msg (\"You feel something small squirming in your chest.\")\n        }\n        else {\n          Quiet\n        }\n      }\n\n      CreateEvent (500, \"pregnancy2\") {\n        if (player.pregnant) {\n          msg (\"There's a painful spiking between your lungs.\")\n        }\n        else {\n          Quiet\n        }\n      }\n\n      CreateEvent (750, \"pregnancy3\") {\n        if (player.pregnant) {\n          msg (\"Breathing is getting difficult.\")\n        }\n        else {\n          Quiet\n        }\n      }\n\n      CreateEvent (1000, \"pregnancy4\") {\n        if (player.pregnant) {\n          msg (\"You've given birth to a {player.pregnantwith}.\")\n          msg(\"... and now you are dead.\")\n          finish\n        }\n        else {\n          Quiet\n        }\n      }\n\n    }\n  }\n}\n</code></pre>\n<p>Just looking at the last event to explain:</p>\n<pre><code>      CreateEvent (1000, \"pregnancy\") {\n        if (player.pregnant) {\n          msg (\"You've given birth to a {player.pregnantwith}.\")\n          msg(\"... and now you are dead.\")\n          finish\n        }\n        else {\n          Quiet\n        }\n      }\n</code></pre>\n<p>This create an event that will happen in 1000 turns (minutes). If the player is still pregnant, the messages are displayed, and the game ends. If the player is not pregnant, do nothing (Quiet means that if the player is waiting, the wait will not get interrupted by a non-event).</p>\n\n",
      "PostDate": "2017-06-23T11:38:33.238376Z",
      "LastEditDate": "2017-06-23T11:39:27.3541055Z",
      "link": null
    },
    {
      "PostId": "2d94635a-cce1-4103-bced-2c1ae809d9c5",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "About:\r\n\r\nthere's only 3 ways of doing \"constantly/automatically-repeatedly checking/activating/firing/running\" (turnscripts and timers can be controlled for when you're doing the constantly checking and not doing it. The special 'changed' Script Attribute can only be \"controlled\" for when you're doing the constantly checking and not doing it, via NOT changing the specified Attribute's value vs doing so, thus it's not much of a \"control\", lol. Also, the 'changed' Script Attribute activates immediately upon the specfiied Attribute's value being changed, and thus again, no control and/or possible 'order of operation' conflicts/issues. But, using the 'changed' Script Attribute is often more simple/easy then trying to mess with using turnscripts/timers due to their good/many control/handling capabilities, which the 'changed' Script Attribute lacks)\r\n\r\n1. the 'turnscript' Element\r\n2. the 'timer' Element\r\n3. the special 'changedNAME_OF_ATTRIBUTE' Script Attribute\r\n\r\n-------------\r\n\r\nlet me know if and/or which ones you need explained on how to use them, as I'm too lazy right now and also am busy right now (got to go somewhere soon).",
      "EditableFormat": "markdown",
      "HTML": "<p>About:</p>\n<p>there's only 3 ways of doing \"constantly/automatically-repeatedly checking/activating/firing/running\" (turnscripts and timers can be controlled for when you're doing the constantly checking and not doing it. The special 'changed' Script Attribute can only be \"controlled\" for when you're doing the constantly checking and not doing it, via NOT changing the specified Attribute's value vs doing so, thus it's not much of a \"control\", lol. Also, the 'changed' Script Attribute activates immediately upon the specfiied Attribute's value being changed, and thus again, no control and/or possible 'order of operation' conflicts/issues. But, using the 'changed' Script Attribute is often more simple/easy then trying to mess with using turnscripts/timers due to their good/many control/handling capabilities, which the 'changed' Script Attribute lacks)</p>\n<ol>\n<li>the 'turnscript' Element</li>\n<li>the 'timer' Element</li>\n<li>the special 'changedNAME_OF_ATTRIBUTE' Script Attribute</li>\n</ol>\n<hr>\n<p>let me know if and/or which ones you need explained on how to use them, as I'm too lazy right now and also am busy right now (got to go somewhere soon).</p>\n\n",
      "PostDate": "2017-06-23T19:03:25.2671898Z",
      "LastEditDate": "2017-06-23T19:10:25.7522456Z",
      "link": null
    }
  ]
}
