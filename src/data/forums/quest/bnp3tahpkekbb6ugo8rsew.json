{
  "Topic": {
    "TopicId": "bnp3tahpkekbb6ugo8rsew",
    "ForumId": "10",
    "Title": "Container that will only take specific items?",
    "LastUpdated": "2016-08-05T20:48:12.2259165Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e4426bfb-4f1c-4071-93a4-0081fb703875",
      "UserId": 257270,
      "Username": "Benjymite",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I'm fairly new to this program and have been fiddling around with containers. I made a coatrack, and was wondering if it was possible to limit the specific items a player can store on it. Since it's a coatrack, it doesn't make a whole lot of sense that the player can put their wallet on it. Can I somehow make it so that only certain items (a hat, a coat) can be placed on the coatrack, or is this not possible?\r\n\r\nThanks in advanced.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I'm fairly new to this program and have been fiddling around with containers. I made a coatrack, and was wondering if it was possible to limit the specific items a player can store on it. Since it's a coatrack, it doesn't make a whole lot of sense that the player can put their wallet on it. Can I somehow make it so that only certain items (a hat, a coat) can be placed on the coatrack, or is this not possible?</p>\n<p>Thanks in advanced.</p>\n\n",
      "PostDate": "2016-08-05T20:48:12.2259165Z",
      "LastEditDate": null
    },
    {
      "PostId": "db9cac0b-474b-4b25-9e3d-92044cd01377",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I had a similar issue about a week ago.  It is not a real simple solution but it's not too complex either.\r\n\r\nCheck this thread out and if you can't make sense of the solution, ask again and I'll give you a walk through.  :)\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/iujt33cap0masdrym25qyw/different-objects-in-a-container-raising-different-flags",
      "EditableFormat": "markdown",
      "HTML": "<p>I had a similar issue about a week ago.  It is not a real simple solution but it's not too complex either.</p>\n<p>Check this thread out and if you can't make sense of the solution, ask again and I'll give you a walk through.  :)</p>\n<p>http://textadventures.co.uk/forum/quest/topic/iujt33cap0masdrym25qyw/different-objects-in-a-container-raising-different-flags</p>\n\n",
      "PostDate": "2016-08-05T21:49:06.9564823Z",
      "LastEditDate": null
    },
    {
      "PostId": "49eaa890-b373-4e6b-a816-ebe44af0de14",
      "UserId": 257270,
      "Username": "Benjymite",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the response. I might need a little help interpreting the solution, yes. If I'm understanding what's going on here, my problem is a little bit simpler in theory (though I don't know if it's any simpler to be executed). All I need is to prevent players from putting most items EXCEPT for ones that make sense on the coatrack.\r\n\r\nSo if the player tries to put their keys or wallet on the coatrack, they would get a message like, \"I can't put that on a coatrack.\"\r\nBut if they try something that makes sense like a coat or hat, it just lets them use the container normally.\r\n\r\nAgain, this might be just as complicated as your problem was when it comes to actual implementation. If you can help me figure this out, I would be very grateful.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the response. I might need a little help interpreting the solution, yes. If I'm understanding what's going on here, my problem is a little bit simpler in theory (though I don't know if it's any simpler to be executed). All I need is to prevent players from putting most items EXCEPT for ones that make sense on the coatrack.</p>\n<p>So if the player tries to put their keys or wallet on the coatrack, they would get a message like, \"I can't put that on a coatrack.\"<br>\nBut if they try something that makes sense like a coat or hat, it just lets them use the container normally.</p>\n<p>Again, this might be just as complicated as your problem was when it comes to actual implementation. If you can help me figure this out, I would be very grateful.</p>\n\n",
      "PostDate": "2016-08-05T22:29:38.6198862Z",
      "LastEditDate": null
    },
    {
      "PostId": "71c3d378-91db-4392-8afb-9d4e434679f3",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's my \"hacky\" solution assuming the coat rack cannot be moved from room to room.\r\n\r\n1.  Right click on the room containing the coat rack.\r\n2.  Choose add command.\r\n3.  Choose 'regular expression.\r\n4.  Type this in the box under 'regular expression':  ^(put|place|hang) (?<.object>.*) (in|into|on) (coat rack)$ - (note - you may want to change the verbs and prepositions and/or the noun there, I just wrote what I thought made sense).  <b>Also, remove the period before the word object in the code above!</b>  =)\r\n5.  For the script, choose an If.  \r\n6.  Select expression.  \r\n7.  In the box next to that, type object = coat\r\n8.  Then, print message indicating that the coat has been placed on the coat rack.  Also add here the move object script to move coat to object coat rack.\r\n9.  For every item that you want place on the coat rack, repeat the process above (changing object 'coat' to whatever object you wish.\r\n10.  In the Else, you'll need to add a message indicating that the object being placed there does not make sense, example: \"Why would you try and put that on a coat rack?\"\r\n\r\nNOTE:  I have not tried this out.  I know that everything up to the 'Else' script will work.  I'm not sure exactly what to put in there.  I will try this out when I get in front of my computer.\r\n\r\nSomeone more knowledgeable may come around and suggest an easier/more logical solution.\r\n\r\nGood luck!",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's my \"hacky\" solution assuming the coat rack cannot be moved from room to room.</p>\n<ol>\n<li>Right click on the room containing the coat rack.</li>\n<li>Choose add command.</li>\n<li>Choose 'regular expression.</li>\n<li>Type this in the box under 'regular expression':  ^(put|place|hang) (?&lt;.object&gt;.*) (in|into|on) (coat rack)$ - (note - you may want to change the verbs and prepositions and/or the noun there, I just wrote what I thought made sense).  <b>Also, remove the period before the word object in the code above!</b>  =)</li>\n<li>For the script, choose an If.</li>\n<li>Select expression.</li>\n<li>In the box next to that, type object = coat</li>\n<li>Then, print message indicating that the coat has been placed on the coat rack.  Also add here the move object script to move coat to object coat rack.</li>\n<li>For every item that you want place on the coat rack, repeat the process above (changing object 'coat' to whatever object you wish.</li>\n<li>In the Else, you'll need to add a message indicating that the object being placed there does not make sense, example: \"Why would you try and put that on a coat rack?\"</li>\n</ol>\n<p>NOTE:  I have not tried this out.  I know that everything up to the 'Else' script will work.  I'm not sure exactly what to put in there.  I will try this out when I get in front of my computer.</p>\n<p>Someone more knowledgeable may come around and suggest an easier/more logical solution.</p>\n<p>Good luck!</p>\n\n",
      "PostDate": "2016-08-05T23:47:34.9535528Z",
      "LastEditDate": "2016-08-06T05:25:28.5809389Z"
    },
    {
      "PostId": "90b2eccf-39c5-4733-bb82-265a6a3f5ec1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this is probably talked about in the other thread-link, maybe by me myself lol, but oh well, here it is (maybe again):\r\n\r\nthe basic idea/concept, is to have something that identifies/flags each Object as: what type of Object it is / what it is, which you can then use 'if' scripting to check if that type of items matches up (or doesn't match up) with what you want to go into the container object vs what you don't want to go into that container object.\r\n\r\nor/also maybe try thinking of it like this:\r\n\r\nlet's say we've got two trash containers, such as one for trash and one for recycling (as everyone is probably familiar with):\r\n\r\nyou need to be able to tell/check whether each trash item is trash or recycle'able, to determine which trash container (trash or recycle) to put the trash item/object into.\r\n\r\nin real life, we can just look at the trash item (and with our common knwledge) to see what type of trash it is  and which trash container it goes into (ah, it's an aluminum soda can, that goes into the recycle bin. Ah, that's an old piece of food, it goes into the trash bin). Through our eyesight and common knowledge, this is our natural indicators/flags of what type of trash item it is, and thus which trash container (trash or recycle) it goes into.\r\n\r\nwith programming, we need to define an indicator, and then using conditional (if) scripting along with that indicator/flag, to determine where to put something (or not) / what to do (or not do).\r\n\r\nSo, for an example:\r\n\r\ngive every Object a String Attribute or Boolean Attribute (or Integer Attribute - but let's just use a String or Boolean here), which indicates what type of Object it is:\r\n\r\n```\r\n<object name=\"soda_can\">\r\n   // using a String Attribute:\r\n  <attr name=\"our_indicator\" type=\"string\">recycle</attr>\r\n  // or, using a Boolean Attribute:\r\n  // <attr name=\"our_indicator_as_is_this_recycle\" type=\"boolean\">true</attr>\r\n</object>\r\n\r\n<object name=\"old_rotten_food\">\r\n   // using a String Attribute:\r\n  <attr name=\"our_indicator\" type=\"string\">trash</attr>\r\n  // or, using a Boolean Attribute:\r\n  // <attr name=\"our_indicator_as_is_this_recycle\" type=\"boolean\">false</attr>\r\n</object>\r\n\r\n// let's say for this example, this is our: 'trash_bin' Object's 'put/putin/use/useon/whatever lol' Verb/Command:\r\n\r\n// for with using the String Attribute:\r\nobject = (your_inputted_object: soda_can or old_rotten_food) \r\nif (object.our_indicator = \"trash\") {\r\n  MoveObject (object, trash_bin)\r\n} else {\r\n  msg (\"sorry, but you can only put trash into the trash bin.\")\r\n}\r\n\r\n// or, for with using the Boolean Attribute:\r\nobject = (your_inputted_object: soda_can or old_rotten_food)\r\nif (object.our_indicator_as_is_this_recycle = false) {\r\n  MoveObject (object, trash_bin)\r\n} else {\r\n  msg (\"sorry, but you can only put trash into the trash bin.\")\r\n}\r\n\r\n// let's say for this example, this is our: 'recycle_bin' Object's 'put/putin/use/useon/whatever lol' Verb/Command:\r\n\r\n// for with using the String Attribute:\r\nobject = (your_inputted_object: soda_can or old_rotten_food) \r\nif (object.our_indicator = \"recycle\") {\r\n  MoveObject (object, recycle_bin)\r\n} else {\r\n  msg (\"sorry, but you can only put recycle'ables into the recycle bin.\")\r\n}\r\n\r\n// or, for with using the Boolean Attribute:\r\nobject = (your_inputted_object: soda_can or old_rotten_food) \r\nif (object.our_indicator_as_is_this_recycle = true) {\r\n  MoveObject (object, recycle_bin)\r\n} else {\r\n  msg (\"sorry, but you can only put recycle'ables into the recycle bin.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>this is probably talked about in the other thread-link, maybe by me myself lol, but oh well, here it is (maybe again):</p>\n<p>the basic idea/concept, is to have something that identifies/flags each Object as: what type of Object it is / what it is, which you can then use 'if' scripting to check if that type of items matches up (or doesn't match up) with what you want to go into the container object vs what you don't want to go into that container object.</p>\n<p>or/also maybe try thinking of it like this:</p>\n<p>let's say we've got two trash containers, such as one for trash and one for recycling (as everyone is probably familiar with):</p>\n<p>you need to be able to tell/check whether each trash item is trash or recycle'able, to determine which trash container (trash or recycle) to put the trash item/object into.</p>\n<p>in real life, we can just look at the trash item (and with our common knwledge) to see what type of trash it is  and which trash container it goes into (ah, it's an aluminum soda can, that goes into the recycle bin. Ah, that's an old piece of food, it goes into the trash bin). Through our eyesight and common knowledge, this is our natural indicators/flags of what type of trash item it is, and thus which trash container (trash or recycle) it goes into.</p>\n<p>with programming, we need to define an indicator, and then using conditional (if) scripting along with that indicator/flag, to determine where to put something (or not) / what to do (or not do).</p>\n<p>So, for an example:</p>\n<p>give every Object a String Attribute or Boolean Attribute (or Integer Attribute - but let's just use a String or Boolean here), which indicates what type of Object it is:</p>\n<pre><code>&lt;object name=\"soda_can\"&gt;\n   // using a String Attribute:\n  &lt;attr name=\"our_indicator\" type=\"string\"&gt;recycle&lt;/attr&gt;\n  // or, using a Boolean Attribute:\n  // &lt;attr name=\"our_indicator_as_is_this_recycle\" type=\"boolean\"&gt;true&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"old_rotten_food\"&gt;\n   // using a String Attribute:\n  &lt;attr name=\"our_indicator\" type=\"string\"&gt;trash&lt;/attr&gt;\n  // or, using a Boolean Attribute:\n  // &lt;attr name=\"our_indicator_as_is_this_recycle\" type=\"boolean\"&gt;false&lt;/attr&gt;\n&lt;/object&gt;\n\n// let's say for this example, this is our: 'trash_bin' Object's 'put/putin/use/useon/whatever lol' Verb/Command:\n\n// for with using the String Attribute:\nobject = (your_inputted_object: soda_can or old_rotten_food) \nif (object.our_indicator = \"trash\") {\n  MoveObject (object, trash_bin)\n} else {\n  msg (\"sorry, but you can only put trash into the trash bin.\")\n}\n\n// or, for with using the Boolean Attribute:\nobject = (your_inputted_object: soda_can or old_rotten_food)\nif (object.our_indicator_as_is_this_recycle = false) {\n  MoveObject (object, trash_bin)\n} else {\n  msg (\"sorry, but you can only put trash into the trash bin.\")\n}\n\n// let's say for this example, this is our: 'recycle_bin' Object's 'put/putin/use/useon/whatever lol' Verb/Command:\n\n// for with using the String Attribute:\nobject = (your_inputted_object: soda_can or old_rotten_food) \nif (object.our_indicator = \"recycle\") {\n  MoveObject (object, recycle_bin)\n} else {\n  msg (\"sorry, but you can only put recycle'ables into the recycle bin.\")\n}\n\n// or, for with using the Boolean Attribute:\nobject = (your_inputted_object: soda_can or old_rotten_food) \nif (object.our_indicator_as_is_this_recycle = true) {\n  MoveObject (object, recycle_bin)\n} else {\n  msg (\"sorry, but you can only put recycle'ables into the recycle bin.\")\n}\n</code></pre>\n\n",
      "PostDate": "2016-08-06T02:20:45.424277Z",
      "LastEditDate": "2016-08-06T02:28:12.6151693Z"
    },
    {
      "PostId": "7bd22738-faef-43e6-9b49-215995a6e778",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Does someone with some coding knowledge know if step 10 above works as I have written it or will the OP need something like If object = #object# then print desired message?  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Does someone with some coding knowledge know if step 10 above works as I have written it or will the OP need something like If object = #object# then print desired message?</p>\n\n",
      "PostDate": "2016-08-06T05:23:57.0145858Z",
      "LastEditDate": null
    },
    {
      "PostId": "b3c6dcf2-22ba-46e5-90fb-403922153806",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "'else' does not care about anything except whether the same 'if' block's 'else if/s' and 'if' is met or not. If the same 'if' block's 'else if/s' and 'if' is not met, then the 'else' activates/runs, nothing stops/prevents/blocks it from running/activating at this point. So, it should work fine.\r\n\r\n```\r\nif (ball.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball.color = \"blue\")\r\n  msg (\"blue\")\r\n} else {\r\n  msg (\"11111111111111111\")\r\n}\r\n\r\nif (player.strength_integer > 66) {\r\n  player.strength_string = \"strong\"\r\n} else if (player.strength_integer > 33) {\r\n  player.strength_string = \"average\"\r\n} else {\r\n  player.strength_string = \"weak\"\r\n}\r\n```\r\n\r\nthe '1111111111111' will be displayed if both the, 'if (ball.color = \"red\")' and 'else if (ball.color = \"blue\")', fails, regardless of the 2nd 'if block' below it. If 'red' or 'blue' is displayed, then the '1111111111' is NOT displayed.\r\n\r\nthe 'player.strength_string' will be set to 'weak', if both the, 'if (player.strength_integer > 66)' and 'else if (player.strength_integer > 33)', fails, regardless of whatever happens in/with the first/upper 'if' block. If 'player.strength_string' is not set to neither: 'strong' or 'average', then it IS set to 'weak'.\r\n\r\n(also, the 2nd/lower 'if' block will always run, regardless of what happens in/with the first/upper 'if' block)\r\n\r\nP.S.\r\n\r\nwhen I say the 'if' block, I mean the entire block, not just the first 'if (.....)' code line of it (if it has the additional 'else ifs' and/or 'else' conditional code lines of it. If the 'if' block is just a/the single 'if (....)' code line, then that's the entire 'if' block)\r\n\r\nthe different forms/types of the 'if' block:\r\n\r\n```\r\n1. an 'if', 'if' block:\r\n\r\nif (conditional) {\r\n  // scripting\r\n}\r\n\r\n2. an 'if + else', 'if' block:\r\n\r\nif (conditional) {\r\n  // scripting\r\n} else {\r\n  // scripting\r\n}\r\n\r\n3. an 'if + else if', 'if' block:\r\n\r\nif (conditional) {\r\n  // scripting\r\n} else if (conditional) {\r\n  // scripting\r\n} // optionally extra/more 'else ifs'\r\n\r\n4. an 'if + else if + else', 'if' block:\r\n\r\nif (conditional) {\r\n  // scripting\r\n} else if (conditional) {\r\n // scripting\r\n} // optionally extra/more 'else ifs'\r\n} else {\r\n  // scripting\r\n}\r\n```\r\n\r\n----------------------\r\n\r\nalso, this is an important concept to understand about 'if' scripting:\r\n\r\nwhy is an 'if' block important, why does this concept matter?\r\n\r\n```\r\nball_1.color = \"red\"\r\nball_2.color = \"blue\"\r\nball_3.color = \"purple\"\r\nball_4.color = \"green\"\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n}\r\n\r\nif (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n}\r\n\r\nif (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n}\r\n\r\nif (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n```\r\n\r\n in the above design, we've got 4 ('if) 'if' blocks, which will result in this output:\r\n\r\nred\r\nblue\r\npurple\r\ngreen\r\n\r\nbecause each ('if') 'if' block is independant of the other ('if') 'if' blocks.\r\n\r\n-------\r\n\r\nbut now let's change the design:\r\n\r\n ```\r\nball_1.color = \"red\"\r\nball_2.color = \"blue\"\r\nball_3.color = \"purple\"\r\nball_4.color = \"green\"\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n```\r\n\r\nwhat happens now?\r\n\r\nAnswer:\r\n\r\nred\r\n\r\nthis is because we now got a single ('if + else ifs') 'if' block, which means that since it's first condition of 'if (ball_1.color = \"red\")' is met, then the other conditions (the 3 'else ifs') are NOT even checked/run/activated. And so, despite that we're (still: unchanged model part) looking at 4 different Objects (ball_1, ball_2, ball_3, ball_4) and as well as having all of their conditions (still: unchanged model part) being true/met, it still will only display 'red', and not the: 'blue' (ball_2), 'purple' (ball_3), and 'green' (ball_4), as again it's a single 'if' block, once a condition is met, NONE of the following/after/latter/other conditions are looked at, and thus no displayment of 'blue', 'purple', and 'green' for this example.\r\n\r\n---------\r\n\r\nlet's change the design again:\r\n\r\n ```\r\nball_1.color = \"red\"\r\nball_2.color = \"blue\"\r\nball_3.color = \"purple\"\r\nball_4.color = \"green\"\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n\r\nif (ball_1.color = \"red\") {\r\n  msg (\"red\")\r\n} else if (ball_2.color = \"blue\") {\r\n  msg (\"blue\")\r\n} else if (ball_3.color = \"purple\") {\r\n  msg (\"purple\")\r\n} else if (ball_4.color = \"green\") {\r\n  msg (\"green\")\r\n}\r\n```\r\n\r\nnow what happens?? (this hopefully isn't challenging...)\r\n\r\nanswer:\r\n\r\nred\r\nred\r\nblue\r\nred\r\npurple\r\nred\r\ngreen\r\nred\r\n\r\n-----------\r\n\r\nso, sometimes you want multiple if blocks for your conditions, and sometimes you want a single if block for your conditions, so it depends on what scripting logic (or rather just: logic) you want to happen, as to how to design your scripting.\r\n\r\n-------------------------\r\n\r\nso, pretend you're me (SCARY!), and thus you're super lazy!\r\n\r\nwould you rather have to do all of these chores:\r\n\r\nclean your room, mow the lawn, take the trash out, wash your clothes, iron your clothes, and clean the dishes\r\n\r\nor, would you rather get out of all the latter chores upon doing a prior choir? (that is, IF YOU CAN, of course)\r\n\r\nas me, you like being able to get out of from doing all of the following chores upon doing whatever prior choir!\r\n\r\nwell, computers/processors/CPUs/software/quest is just like me, it doesn't want to do more chores (operations) if it can be helped / not have to do them. It wants to do as few as possible too. If humans had to do endless chores/work, they'd die. Well, when a computer/CPUs/prcoessors/software/quest has to do endless operations (such as an endless/infinite loop), it dies too! (there are safegaurds now, so you can't actually destroy your computer, but with the early computers, there weren't... and you would destroy your computer: even if pretending that a computer had infinite resources/storage/memory - which nothing has - it doesn't exist anywhere at least for our practical world - not getting into crazy stuff with blackholes/void:nothingness/pre-big-bang, the endless/infinite energy being produced/released from doing those endless/infinite operations would fry/melt/burn up the computer --- I never realized how hot computers can get until I learned about repairing them - opening them up and being able to touch the parts inside - burning my fingers lol - they get REALLY hot! And thus computers try to have as much cooling systems as they can  and if you can afford it too, lol. Computers do catch on fire and melt/burn/fry up when the heat/energy exceeds the cooling systems or the cooling systems fail or there's no cooling systems, lol. It's actually similiar to nuclear power plants, as expensive powerful prcoessing computers even use, must use, a similiar liquid cooling system as do nuclear reactors for their radioactive rods). any action (operation) that a computer does, is actually just electrical circuitry/currents, and thus the more actions (operations) a computer does, the more electrical currents of flowing, and thus the hotter it gets, which is bad for computer performance, and ultimately the computer's physical existence itself too (as it actually catches on fire and burns up/melts).",
      "EditableFormat": "markdown",
      "HTML": "<p>'else' does not care about anything except whether the same 'if' block's 'else if/s' and 'if' is met or not. If the same 'if' block's 'else if/s' and 'if' is not met, then the 'else' activates/runs, nothing stops/prevents/blocks it from running/activating at this point. So, it should work fine.</p>\n<pre><code>if (ball.color = \"red\") {\n  msg (\"red\")\n} else if (ball.color = \"blue\")\n  msg (\"blue\")\n} else {\n  msg (\"11111111111111111\")\n}\n\nif (player.strength_integer &gt; 66) {\n  player.strength_string = \"strong\"\n} else if (player.strength_integer &gt; 33) {\n  player.strength_string = \"average\"\n} else {\n  player.strength_string = \"weak\"\n}\n</code></pre>\n<p>the '1111111111111' will be displayed if both the, 'if (ball.color = \"red\")' and 'else if (ball.color = \"blue\")', fails, regardless of the 2nd 'if block' below it. If 'red' or 'blue' is displayed, then the '1111111111' is NOT displayed.</p>\n<p>the 'player.strength_string' will be set to 'weak', if both the, 'if (player.strength_integer &gt; 66)' and 'else if (player.strength_integer &gt; 33)', fails, regardless of whatever happens in/with the first/upper 'if' block. If 'player.strength_string' is not set to neither: 'strong' or 'average', then it IS set to 'weak'.</p>\n<p>(also, the 2nd/lower 'if' block will always run, regardless of what happens in/with the first/upper 'if' block)</p>\n<p>P.S.</p>\n<p>when I say the 'if' block, I mean the entire block, not just the first 'if (.....)' code line of it (if it has the additional 'else ifs' and/or 'else' conditional code lines of it. If the 'if' block is just a/the single 'if (....)' code line, then that's the entire 'if' block)</p>\n<p>the different forms/types of the 'if' block:</p>\n<pre><code>1. an 'if', 'if' block:\n\nif (conditional) {\n  // scripting\n}\n\n2. an 'if + else', 'if' block:\n\nif (conditional) {\n  // scripting\n} else {\n  // scripting\n}\n\n3. an 'if + else if', 'if' block:\n\nif (conditional) {\n  // scripting\n} else if (conditional) {\n  // scripting\n} // optionally extra/more 'else ifs'\n\n4. an 'if + else if + else', 'if' block:\n\nif (conditional) {\n  // scripting\n} else if (conditional) {\n // scripting\n} // optionally extra/more 'else ifs'\n} else {\n  // scripting\n}\n</code></pre>\n<hr>\n<p>also, this is an important concept to understand about 'if' scripting:</p>\n<p>why is an 'if' block important, why does this concept matter?</p>\n<pre><code>ball_1.color = \"red\"\nball_2.color = \"blue\"\nball_3.color = \"purple\"\nball_4.color = \"green\"\n\nif (ball_1.color = \"red\") {\n  msg (\"red\")\n}\n\nif (ball_2.color = \"blue\") {\n  msg (\"blue\")\n}\n\nif (ball_3.color = \"purple\") {\n  msg (\"purple\")\n}\n\nif (ball_4.color = \"green\") {\n  msg (\"green\")\n}\n</code></pre>\n<p>in the above design, we've got 4 ('if) 'if' blocks, which will result in this output:</p>\n<p>red<br>\nblue<br>\npurple<br>\ngreen</p>\n<p>because each ('if') 'if' block is independant of the other ('if') 'if' blocks.</p>\n<hr>\n<p>but now let's change the design:</p>\n<pre><code>ball_1.color = \"red\"\nball_2.color = \"blue\"\nball_3.color = \"purple\"\nball_4.color = \"green\"\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n</code></pre>\n<p>what happens now?</p>\n<p>Answer:</p>\n<p>red</p>\n<p>this is because we now got a single ('if + else ifs') 'if' block, which means that since it's first condition of 'if (ball_1.color = \"red\")' is met, then the other conditions (the 3 'else ifs') are NOT even checked/run/activated. And so, despite that we're (still: unchanged model part) looking at 4 different Objects (ball_1, ball_2, ball_3, ball_4) and as well as having all of their conditions (still: unchanged model part) being true/met, it still will only display 'red', and not the: 'blue' (ball_2), 'purple' (ball_3), and 'green' (ball_4), as again it's a single 'if' block, once a condition is met, NONE of the following/after/latter/other conditions are looked at, and thus no displayment of 'blue', 'purple', and 'green' for this example.</p>\n<hr>\n<p>let's change the design again:</p>\n<pre><code>ball_1.color = \"red\"\nball_2.color = \"blue\"\nball_3.color = \"purple\"\nball_4.color = \"green\"\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_4.color = \"green\") {\n msg (\"green\")\n}\n\nif (ball_1.color = \"red\") {\n msg (\"red\")\n} else if (ball_2.color = \"blue\") {\n msg (\"blue\")\n} else if (ball_3.color = \"purple\") {\n msg (\"purple\")\n} else if (ball_4.color = \"green\") {\n msg (\"green\")\n}\n</code></pre>\n<p>now what happens?? (this hopefully isn't challenging...)</p>\n<p>answer:</p>\n<p>red<br>\nred<br>\nblue<br>\nred<br>\npurple<br>\nred<br>\ngreen<br>\nred</p>\n<hr>\n<p>so, sometimes you want multiple if blocks for your conditions, and sometimes you want a single if block for your conditions, so it depends on what scripting logic (or rather just: logic) you want to happen, as to how to design your scripting.</p>\n<hr>\n<p>so, pretend you're me (SCARY!), and thus you're super lazy!</p>\n<p>would you rather have to do all of these chores:</p>\n<p>clean your room, mow the lawn, take the trash out, wash your clothes, iron your clothes, and clean the dishes</p>\n<p>or, would you rather get out of all the latter chores upon doing a prior choir? (that is, IF YOU CAN, of course)</p>\n<p>as me, you like being able to get out of from doing all of the following chores upon doing whatever prior choir!</p>\n<p>well, computers/processors/CPUs/software/quest is just like me, it doesn't want to do more chores (operations) if it can be helped / not have to do them. It wants to do as few as possible too. If humans had to do endless chores/work, they'd die. Well, when a computer/CPUs/prcoessors/software/quest has to do endless operations (such as an endless/infinite loop), it dies too! (there are safegaurds now, so you can't actually destroy your computer, but with the early computers, there weren't... and you would destroy your computer: even if pretending that a computer had infinite resources/storage/memory - which nothing has - it doesn't exist anywhere at least for our practical world - not getting into crazy stuff with blackholes/void:nothingness/pre-big-bang, the endless/infinite energy being produced/released from doing those endless/infinite operations would fry/melt/burn up the computer --- I never realized how hot computers can get until I learned about repairing them - opening them up and being able to touch the parts inside - burning my fingers lol - they get REALLY hot! And thus computers try to have as much cooling systems as they can  and if you can afford it too, lol. Computers do catch on fire and melt/burn/fry up when the heat/energy exceeds the cooling systems or the cooling systems fail or there's no cooling systems, lol. It's actually similiar to nuclear power plants, as expensive powerful prcoessing computers even use, must use, a similiar liquid cooling system as do nuclear reactors for their radioactive rods). any action (operation) that a computer does, is actually just electrical circuitry/currents, and thus the more actions (operations) a computer does, the more electrical currents of flowing, and thus the hotter it gets, which is bad for computer performance, and ultimately the computer's physical existence itself too (as it actually catches on fire and burns up/melts).</p>\n\n",
      "PostDate": "2016-08-06T06:37:01.4039163Z",
      "LastEditDate": "2016-08-06T09:13:47.7859373Z"
    },
    {
      "PostId": "ffc4c5e3-bdbb-4a3e-9272-3b1f97c61910",
      "UserId": 257270,
      "Username": "Benjymite",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks guys, this is really helpful. By sort of looking at both of your answers I figured out how to get it setup, and now it works great! Now I just have to remember to add the attribute to all the items that can be picked up.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks guys, this is really helpful. By sort of looking at both of your answers I figured out how to get it setup, and now it works great! Now I just have to remember to add the attribute to all the items that can be picked up.</p>\n\n",
      "PostDate": "2016-08-06T07:51:25.7459721Z",
      "LastEditDate": null
    },
    {
      "PostId": "2bda6f9e-1773-43ba-83cc-a801c93f7d31",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "awesome, you understand! (my posts usually end up confusing people even more, lol. Good thing you had XanMag's post/s to read, lol)\r\n\r\n----\r\n\r\njust a quick note:\r\n\r\n```\r\nunfortunately the distinctions/indicators/flags of: 'Object Type: [Room Object]', 'Object Type: [Object]', 'Object Type: [Player Object]', '<inherit name=\"editor_player\" />', '<inherit name=\"editor_room\" />', and '<inherit name=\"editor_object\" />' that you may have noticed in the GUI~Editor and/or in code, are deleted/removed when the game starts (they're merely for creating the GUI~Editor that you're using, providing you with its options/tabs/drop down menus/etc). So, if you thought that you could use scripting to check upon these as your indicators/flags as to what to do, you're going to have failure. You got to create your own indicator/flag Attribute on each of the Objects.\r\n```\r\n\r\nfor example:\r\n\r\n```\r\n<object name=\"room_2\">\r\n  <attr name=\"alias\" type=\"string\">tavern</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">room</attr>\r\n</object>\r\n\r\n<object name=\"room_3\">\r\n  <attr name=\"alias\" type=\"string\">forest</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">room</attr>\r\n</object>\r\n\r\n<object name=\"room_99\">\r\n  <attr name=\"alias\" type=\"string\">final room of the final dungeon (you're going to die here! muahaha!)</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">room</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"parent\" type=\"object\">room_3</attr>\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">monster</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n</object>\r\n\r\n<object name=\"dragon_99\">\r\n  <attr name=\"parent\" type=\"object\">room_99</attr>\r\n  <attr name=\"alias\" type=\"string\">Bahamut (King of Dragons)</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">monster</attr>\r\n  <attr name=\"dead\" type=\"boolean\">false</attr>\r\n</object>\r\n\r\n<object name=\"tavernmaid_5\">\r\n  <attr name=\"parent\" type=\"object\">room_2</attr>\r\n  <attr name=\"alias\" type=\"string\">Hag (an ugly old woman)</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">npc</attr>\r\n</object>\r\n\r\n<object name=\"tavernmaid_3\">\r\n  <attr name=\"parent\" type=\"object\">room_2</attr>\r\n  <attr name=\"alias\" type=\"string\">Jasmine (a beautiful young woman)</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">npc</attr>\r\n</object>\r\n\r\n<object name=\"table_8\">\r\n  <attr name=\"parent\" type=\"object\">room_2</attr>\r\n  <attr name=\"alias\" type=\"string\">table</attr>\r\n  <attr name=\"type_of_object\" type=\"string\">furniture</attr>\r\n</object>\r\n\r\n// scripting, using a Command for quick example:\r\n\r\n<command name=\"cheat_command\">\r\n  <pattern>cheat #text#</pattern>\r\n  <script>\r\n    foreach (object, AllObjects()) {\r\n      if (object.name = text or object.alias = text) {\r\n        if (object.type_of_object = \"room\") {\r\n          player.parent = object\r\n          msg (\"You discovered a cheat input, allowing you to warp/teleport to whatever location you inputted! doh, I forgot to take this out upon releasing the game to the public, doh!\")\r\n        } else if (object.type_of_object = \"monster\") {\r\n          object.dead = true\r\n          msg (\"You discovered a cheat input, killing the monster you inputted! doh, I forgot to take this out upon releasing the game to the public, doh!\")\r\n        } else if (object.type_of_object = \"npc\") {\r\n          if (object.alias = \"jasmine (a beautiful young woman)\") {\r\n            msg (\"(you found a cheat input, which wins the game for you! doh, I forgot to take this out upon releasing the game to the public, doh!)\")\r\n            msg (\"You marry Jasmine, and live happily ever after!\")\r\n            msg (\"You won the game, congratulations!\")\r\n            msg (\"GAME OVER\")\r\n            finish\r\n          } else {\r\n            msg (\"No, you don't want to marry this person!\")\r\n          }\r\n        } else {\r\n          msg (\"Wrong input, try again.\")\r\n        }\r\n      } else {\r\n        msg (\"Wrong input, try again.\")\r\n      }\r\n    }\r\n  </script>\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>awesome, you understand! (my posts usually end up confusing people even more, lol. Good thing you had XanMag's post/s to read, lol)</p>\n<hr>\n<p>just a quick note:</p>\n<pre><code>unfortunately the distinctions/indicators/flags of: 'Object Type: [Room Object]', 'Object Type: [Object]', 'Object Type: [Player Object]', '&lt;inherit name=\"editor_player\" /&gt;', '&lt;inherit name=\"editor_room\" /&gt;', and '&lt;inherit name=\"editor_object\" /&gt;' that you may have noticed in the GUI~Editor and/or in code, are deleted/removed when the game starts (they're merely for creating the GUI~Editor that you're using, providing you with its options/tabs/drop down menus/etc). So, if you thought that you could use scripting to check upon these as your indicators/flags as to what to do, you're going to have failure. You got to create your own indicator/flag Attribute on each of the Objects.\n</code></pre>\n<p>for example:</p>\n<pre><code>&lt;object name=\"room_2\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;tavern&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room_3\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;forest&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room_99\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;final room of the final dungeon (you're going to die here! muahaha!)&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_3&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;monster&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_99\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_99&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;Bahamut (King of Dragons)&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;monster&lt;/attr&gt;\n  &lt;attr name=\"dead\" type=\"boolean\"&gt;false&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"tavernmaid_5\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_2&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;Hag (an ugly old woman)&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;npc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"tavernmaid_3\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_2&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;Jasmine (a beautiful young woman)&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;npc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"table_8\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_2&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;table&lt;/attr&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;furniture&lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting, using a Command for quick example:\n\n&lt;command name=\"cheat_command\"&gt;\n  &lt;pattern&gt;cheat #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    foreach (object, AllObjects()) {\n      if (object.name = text or object.alias = text) {\n        if (object.type_of_object = \"room\") {\n          player.parent = object\n          msg (\"You discovered a cheat input, allowing you to warp/teleport to whatever location you inputted! doh, I forgot to take this out upon releasing the game to the public, doh!\")\n        } else if (object.type_of_object = \"monster\") {\n          object.dead = true\n          msg (\"You discovered a cheat input, killing the monster you inputted! doh, I forgot to take this out upon releasing the game to the public, doh!\")\n        } else if (object.type_of_object = \"npc\") {\n          if (object.alias = \"jasmine (a beautiful young woman)\") {\n            msg (\"(you found a cheat input, which wins the game for you! doh, I forgot to take this out upon releasing the game to the public, doh!)\")\n            msg (\"You marry Jasmine, and live happily ever after!\")\n            msg (\"You won the game, congratulations!\")\n            msg (\"GAME OVER\")\n            finish\n          } else {\n            msg (\"No, you don't want to marry this person!\")\n          }\n        } else {\n          msg (\"Wrong input, try again.\")\n        }\n      } else {\n        msg (\"Wrong input, try again.\")\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2016-08-06T08:52:40.382475Z",
      "LastEditDate": "2016-08-06T14:47:33.9342441Z"
    }
  ]
}
