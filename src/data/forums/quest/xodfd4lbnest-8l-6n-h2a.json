{
  "Topic": {
    "TopicId": "xodfd4lbnest-8l-6n-h2a",
    "ForumId": "10",
    "Title": "Gamebook - How do I make certian text trigger (Solved)",
    "LastUpdated": "2017-06-20T22:51:11.4632084Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4bbc1d7e-5144-4341-9431-c9d92c388852",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "i'm a bit new so i'm not sure how to make it work.  I want to make it so if you go into a page(in this case a sort of center room), and have not gone through 'the bathroom' then some text wouldn't be printed and others would in it place. or just not appear at all.\r\n\r\nEdit: figure out thanks to help below. still using flags to set when text appears or not. \r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>i'm a bit new so i'm not sure how to make it work.  I want to make it so if you go into a page(in this case a sort of center room), and have not gone through 'the bathroom' then some text wouldn't be printed and others would in it place. or just not appear at all.</p>\n<p>Edit: figure out thanks to help below. still using flags to set when text appears or not.</p>\n\n",
      "PostDate": "2017-06-20T22:51:11.4632084Z",
      "LastEditDate": "2017-06-25T01:16:50.5989662Z",
      "link": null
    },
    {
      "PostId": "82fd1543-c3b8-4b9e-997e-d8abdaea1eab",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe the Game Book does also (Text Adventure does have it) have the built-in 'visited' Boolean Attribute\r\n\r\nwhich you can use with the 'if' Script:\r\n\r\n```\r\nif (NAME_OF_PAGE.visited) {\r\n  // scripting for having visited the specified page\r\n}\r\n<!--\r\n// or:\r\nif (not NAME_OF_PAGE.visited) {\r\n  // scripting for NOT having visited the specified page\r\n}\r\n// optionally:\r\nelse { // if (not NAME_OF_PAGE.visited) {\r\n   // scripting for NOT having visited the specified page\r\n}\r\n// or:\r\nelse { // if (NAME_OF_PAGE.visited) {\r\n   // scripting for having visited the specified page\r\n}\r\n-->\r\n```\r\n\r\n---------------\r\n\r\n'NAME_OF_PAGE' Page Object -> 'Page' Tab -> Page Type: [SCRIPT] or [TEXT+SCRIPT] -> (see below)\r\n\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] NAME_OF_PAGE.visited\r\n-> then, -> add new script -> (whatever script/s you want)\r\nelse,\r\n-> add new script -> (whatever script/s you want)\r\n\r\nor\r\n\r\nif [EXPRESSION] not NAME_OF_PAGE.visited\r\n-> then, -> add new script -> (whatever script/s you want)\r\nelse,\r\n-> add new script -> (whatever script/s you want)",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe the Game Book does also (Text Adventure does have it) have the built-in 'visited' Boolean Attribute</p>\n<p>which you can use with the 'if' Script:</p>\n<pre><code>if (NAME_OF_PAGE.visited) {\n  // scripting for having visited the specified page\n}\n&lt;!--\n// or:\nif (not NAME_OF_PAGE.visited) {\n  // scripting for NOT having visited the specified page\n}\n// optionally:\nelse { // if (not NAME_OF_PAGE.visited) {\n   // scripting for NOT having visited the specified page\n}\n// or:\nelse { // if (NAME_OF_PAGE.visited) {\n   // scripting for having visited the specified page\n}\n--&gt;\n</code></pre>\n<hr>\n<p>'NAME_OF_PAGE' Page Object -&gt; 'Page' Tab -&gt; Page Type: [SCRIPT] or [TEXT+SCRIPT] -&gt; (see below)</p>\n<p>add new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)</p>\n<p>if [EXPRESSION] NAME_OF_PAGE.visited<br>\n-&gt; then, -&gt; add new script -&gt; (whatever script/s you want)<br>\nelse,<br>\n-&gt; add new script -&gt; (whatever script/s you want)</p>\n<p>or</p>\n<p>if [EXPRESSION] not NAME_OF_PAGE.visited<br>\n-&gt; then, -&gt; add new script -&gt; (whatever script/s you want)<br>\nelse,<br>\n-&gt; add new script -&gt; (whatever script/s you want)</p>\n\n",
      "PostDate": "2017-06-20T23:27:40.6216042Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "141a1806-7c41-464b-878b-7e16d04b3d38",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "also, you can create an Object Attribute to store your old location (Room Object):\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/cbqdk1cjk0evyjqptdweqw/gamebook-back-to-previous-page\r\n\r\nand use it in an 'if' Script, if you want specifically to check if you just came from some Page Object",
      "EditableFormat": "markdown",
      "HTML": "<p>also, you can create an Object Attribute to store your old location (Room Object):</p>\n<p>http://textadventures.co.uk/forum/quest/topic/cbqdk1cjk0evyjqptdweqw/gamebook-back-to-previous-page</p>\n<p>and use it in an 'if' Script, if you want specifically to check if you just came from some Page Object</p>\n\n",
      "PostDate": "2017-06-20T23:31:38.4177545Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8db0eacb-cb47-4a33-8f0a-0cd494dfd2a0",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to add in an AND command in casei want to check for mulipte flags.  LIke if i have hat AND cape then an option appears.  I tried else IF but didn't seem to work",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to add in an AND command in casei want to check for mulipte flags.  LIke if i have hat AND cape then an option appears.  I tried else IF but didn't seem to work</p>\n\n",
      "PostDate": "2017-06-21T05:44:54.5774873Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77f29963-0336-4706-89ff-7ac9d7825992",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "an example:\r\n\r\n```\r\n'NAME_OF_STARTING_PAGE' Page Object -> Page Type: [script] or [text+script]:\r\n\r\n(creating your Attributes and their initial values, so you can thus have them, and thus be able to adjust/change/manipulate their values and check them via the 'if' Script)\r\n\r\n(add new script -> 'variables' category/section -> 'set a variable or attribute' Script -> see below, repeat as needed)\r\n\r\nset variable game.state = [EXPRESSION] 0\r\nset variable player.strength = [EXPRESSION] 0\r\nset variable game.dragon_dead = [EXPRESSION] false\r\nset variable player.right_hand = [EXPRESSION] \"unarmed\"\r\n\r\n'WHATEVER' Page Object -> Page Type: [script] or [text+script]:\r\n\r\n(add new script -> 'scripts' category/section -> 'if' Script -> see below)\r\n\r\nif [EXPRESSION] NAME_OF_PAGE.visited and game.state = 3 and player.strength = 100 and game.dragon_dead and player.right_hand = \"sword\"\r\n-> then, -> add new script -> (whatever script/s)\r\n\r\n// or, nested 'ifs' also produce the same 'and' logic too:\r\n\r\nif [EXPRESSION] NAME_OF_PAGE.visited\r\n-> if [EXPRSSION] game.state = 3\r\n->-> if [EXPRESSION] player.strength = 100\r\n->->-> if [EXPRESSION] game.dragon_dead\r\n->->->-> if [EXPRESSION] player.right_hand = \"sword\"\r\n->->->->-> then, -> add new script -> (whatever script/s)\r\n->->->-> else,\r\n->->->->-> msg (\"You still need the sword\")\r\n->->-> else,\r\n->->->-> msg (\"You still have to kill the dragon\")\r\n->-> else,\r\n->->-> msg (\"You still need 100 strength\")\r\n-> else,\r\n->-> msg (\"The game state needs to be 3\")\r\nelse,\r\n-> msg (\"You've not visited the WHATEVER page yet\")\r\n```\r\n\r\n-----------------\r\n\r\nthe 'else if' is (mostly similiar to) 'or' logic, an example:\r\n\r\n\r\n\r\n```\r\nif [EXPRESSION] player.test_score > 89 // maybe an 'A' grade, or ... (goto first else if)\r\n  set variable player.test_grade = [EXPRESSION] \"A\"\r\nelse if [EXPRESSION] player.test_score > 79 // maybe a 'B' grade, or... (goto next else if)\r\n  set variable player.test_grade = [EXPRESSION] \"B\"\r\nelse if [EXPRESSION] player.test_score > 69 // maybe a 'C' grade, or... (goto next else if)\r\n  set variable player.test_grade = [EXPRESSION] \"C\"\r\nelse if [EXPRESSION] player.test_score > 59 // maybe a 'D' grade, or... (goto else)\r\n  set variable player.test_grade = [EXPRESSION] \"D\"\r\nelse // an 'F' grade\r\n  set variable player.test_grade = [EXPRESSION] \"F\"\r\n```\r\n\r\n--------------------\r\n\r\nbasic Boolean Logic:\r\n\r\ndefinition logic:\r\n\r\ntrue = TRUE\r\nfalse = FALSE\r\n\r\nnegation (not) logic:\r\n\r\nnot true = FALSE\r\nnot false = TRUE\r\n\r\n'and' logic:\r\n\r\ntrue and true = TRUE\r\ntrue and false = FALSE\r\nfalse and true = FALSE\r\nfalse and false = FALSE\r\n\r\n'or' logic:\r\n\r\ntrue or true = TRUE\r\ntrue or false = TRUE\r\nfalse or true = TRUE\r\nfalse or false = FALSE\r\n\r\n------------\r\n\r\nask if you need help with anything or need stuff explained more/better or ask about whatever",
      "EditableFormat": "markdown",
      "HTML": "<p>an example:</p>\n<pre><code>'NAME_OF_STARTING_PAGE' Page Object -&gt; Page Type: [script] or [text+script]:\n\n(creating your Attributes and their initial values, so you can thus have them, and thus be able to adjust/change/manipulate their values and check them via the 'if' Script)\n\n(add new script -&gt; 'variables' category/section -&gt; 'set a variable or attribute' Script -&gt; see below, repeat as needed)\n\nset variable game.state = [EXPRESSION] 0\nset variable player.strength = [EXPRESSION] 0\nset variable game.dragon_dead = [EXPRESSION] false\nset variable player.right_hand = [EXPRESSION] \"unarmed\"\n\n'WHATEVER' Page Object -&gt; Page Type: [script] or [text+script]:\n\n(add new script -&gt; 'scripts' category/section -&gt; 'if' Script -&gt; see below)\n\nif [EXPRESSION] NAME_OF_PAGE.visited and game.state = 3 and player.strength = 100 and game.dragon_dead and player.right_hand = \"sword\"\n-&gt; then, -&gt; add new script -&gt; (whatever script/s)\n\n// or, nested 'ifs' also produce the same 'and' logic too:\n\nif [EXPRESSION] NAME_OF_PAGE.visited\n-&gt; if [EXPRSSION] game.state = 3\n-&gt;-&gt; if [EXPRESSION] player.strength = 100\n-&gt;-&gt;-&gt; if [EXPRESSION] game.dragon_dead\n-&gt;-&gt;-&gt;-&gt; if [EXPRESSION] player.right_hand = \"sword\"\n-&gt;-&gt;-&gt;-&gt;-&gt; then, -&gt; add new script -&gt; (whatever script/s)\n-&gt;-&gt;-&gt;-&gt; else,\n-&gt;-&gt;-&gt;-&gt;-&gt; msg (\"You still need the sword\")\n-&gt;-&gt;-&gt; else,\n-&gt;-&gt;-&gt;-&gt; msg (\"You still have to kill the dragon\")\n-&gt;-&gt; else,\n-&gt;-&gt;-&gt; msg (\"You still need 100 strength\")\n-&gt; else,\n-&gt;-&gt; msg (\"The game state needs to be 3\")\nelse,\n-&gt; msg (\"You've not visited the WHATEVER page yet\")\n</code></pre>\n<hr>\n<p>the 'else if' is (mostly similiar to) 'or' logic, an example:</p>\n<pre><code>if [EXPRESSION] player.test_score &gt; 89 // maybe an 'A' grade, or ... (goto first else if)\n  set variable player.test_grade = [EXPRESSION] \"A\"\nelse if [EXPRESSION] player.test_score &gt; 79 // maybe a 'B' grade, or... (goto next else if)\n  set variable player.test_grade = [EXPRESSION] \"B\"\nelse if [EXPRESSION] player.test_score &gt; 69 // maybe a 'C' grade, or... (goto next else if)\n  set variable player.test_grade = [EXPRESSION] \"C\"\nelse if [EXPRESSION] player.test_score &gt; 59 // maybe a 'D' grade, or... (goto else)\n  set variable player.test_grade = [EXPRESSION] \"D\"\nelse // an 'F' grade\n  set variable player.test_grade = [EXPRESSION] \"F\"\n</code></pre>\n<hr>\n<p>basic Boolean Logic:</p>\n<p>definition logic:</p>\n<p>true = TRUE<br>\nfalse = FALSE</p>\n<p>negation (not) logic:</p>\n<p>not true = FALSE<br>\nnot false = TRUE</p>\n<p>'and' logic:</p>\n<p>true and true = TRUE<br>\ntrue and false = FALSE<br>\nfalse and true = FALSE<br>\nfalse and false = FALSE</p>\n<p>'or' logic:</p>\n<p>true or true = TRUE<br>\ntrue or false = TRUE<br>\nfalse or true = TRUE<br>\nfalse or false = FALSE</p>\n<hr>\n<p>ask if you need help with anything or need stuff explained more/better or ask about whatever</p>\n\n",
      "PostDate": "2017-06-21T08:52:38.8856305Z",
      "LastEditDate": "2017-06-21T09:23:51.3636397Z",
      "link": null
    },
    {
      "PostId": "bdec11e4-ceff-48dd-b55f-d02f976aa0ae",
      "UserId": 185415,
      "Username": "major powers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5a2fab185e3766767ad57fd12f0b369a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As delineated by HK:\r\n\r\n```\r\nSetFlagOn (\"Flag1\")\r\nSetFlagOn (\"Flag2\")\r\nif (GetBoolean (game, \"Flag1\") and (GetBoolean (game, \"Flag2\"))) {\r\n  msg (\"good job\")\r\n}\r\n```\r\n\r\nYou can also use \"or\" instead of \"and.\"\r\n\r\nUPDATED: to put more close-parentheses in there, oops!  :)  Anyway if you just paste the code above into a blank text+script page (code view), it works.  Take it from there.  Set those flags on preceding pages, and use GetBoolean when needed.  And call them whatever you want, obviously.",
      "EditableFormat": "markdown",
      "HTML": "<p>As delineated by HK:</p>\n<pre><code>SetFlagOn (\"Flag1\")\nSetFlagOn (\"Flag2\")\nif (GetBoolean (game, \"Flag1\") and (GetBoolean (game, \"Flag2\"))) {\n  msg (\"good job\")\n}\n</code></pre>\n<p>You can also use \"or\" instead of \"and.\"</p>\n<p>UPDATED: to put more close-parentheses in there, oops!  :)  Anyway if you just paste the code above into a blank text+script page (code view), it works.  Take it from there.  Set those flags on preceding pages, and use GetBoolean when needed.  And call them whatever you want, obviously.</p>\n\n",
      "PostDate": "2017-06-22T03:03:09.4808486Z",
      "LastEditDate": "2017-06-22T20:26:22.597811Z",
      "link": null
    },
    {
      "PostId": "43ba2f0f-cecb-4c9b-9060-df56d94ac431",
      "UserId": 185415,
      "Username": "major powers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5a2fab185e3766767ad57fd12f0b369a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Adding on, if you use \"or\" it means if **either** flag is on.\r\n\r\nIf you use \"and\" it means if **both flags** are on.\r\n\r\nAnd you can use as many as you like, including a mix of and/or.  As long as you contain them in the right parantheses in the right places.",
      "EditableFormat": "markdown",
      "HTML": "<p>Adding on, if you use \"or\" it means if <strong>either</strong> flag is on.</p>\n<p>If you use \"and\" it means if <strong>both flags</strong> are on.</p>\n<p>And you can use as many as you like, including a mix of and/or.  As long as you contain them in the right parantheses in the right places.</p>\n\n",
      "PostDate": "2017-06-22T20:13:58.0623912Z",
      "LastEditDate": "2017-06-22T20:29:29.8630522Z",
      "link": null
    },
    {
      "PostId": "e475e7e7-698b-4448-825a-562d915a875b",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "i've been using flags but I want to use the once command too. In text not script+text area.\r\n\r\nfor example {once: {if A=1: TEST} other words here {if flag: words}}\r\n\r\nbut then it glitches and won't work right as I intend. unless Gamebook can't do that sort of stacking",
      "EditableFormat": "markdown",
      "HTML": "<p>i've been using flags but I want to use the once command too. In text not script+text area.</p>\n<p>for example {once: {if A=1: TEST} other words here {if flag: words}}</p>\n<p>but then it glitches and won't work right as I intend. unless Gamebook can't do that sort of stacking</p>\n\n",
      "PostDate": "2017-06-22T20:58:59.5390795Z",
      "LastEditDate": "2017-06-22T21:00:32.0377351Z",
      "link": null
    },
    {
      "PostId": "b9532a30-0c18-41d1-a787-6b5cdfd5fe49",
      "UserId": 185415,
      "Username": "major powers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5a2fab185e3766767ad57fd12f0b369a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It can!  Using just generic \"Flag1\" and \"Flag2\" this worked for me using Once, and then didn't show up at all when I revisited the page:\r\n\r\n```\r\n{once:{if Flag1:Hello!} How are you doing? {if Flag2:I'm fine!}}\r\n```\r\nWhich, on the page, just looks like:\r\n\r\n```\r\nHello! How are you doing? I'm fine!\r\n```\r\n(If Flag1 and Flag2 are on, of course)",
      "EditableFormat": "markdown",
      "HTML": "<p>It can!  Using just generic \"Flag1\" and \"Flag2\" this worked for me using Once, and then didn't show up at all when I revisited the page:</p>\n<pre><code>{once:{if Flag1:Hello!} How are you doing? {if Flag2:I'm fine!}}\n</code></pre>\n<p>Which, on the page, just looks like:</p>\n<pre><code>Hello! How are you doing? I'm fine!\n</code></pre>\n<p>(If Flag1 and Flag2 are on, of course)</p>\n\n",
      "PostDate": "2017-06-22T21:12:33.7435453Z",
      "LastEditDate": "2017-06-22T21:16:58.552225Z",
      "link": null
    },
    {
      "PostId": "902e5d30-1d2a-4e19-b5a8-1394163ab924",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, okay for some reason when I try to use {if counter<=2:words} and I don't trigger enough of the counter for it to appear, it just appears as text within the paragraph. resorted to turning a flag on when the counter at 2 or higher and using that flag for text replacing\r\n\r\n{once:{if A<=1: A} more text {if B: B!} more text.}\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, okay for some reason when I try to use {if counter&lt;=2:words} and I don't trigger enough of the counter for it to appear, it just appears as text within the paragraph. resorted to turning a flag on when the counter at 2 or higher and using that flag for text replacing</p>\n<p>{once:{if A&lt;=1: A} more text {if B: B!} more text.}</p>\n\n",
      "PostDate": "2017-06-22T21:33:55.3119991Z",
      "LastEditDate": "2017-06-22T21:36:39.9527329Z",
      "link": null
    },
    {
      "PostId": "00ccdbd9-a428-46ee-8a17-e28c82131d02",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "true/false is determined by string comparisons:\r\n\r\n(each letter/character is checked/compared)\r\n\r\nplayer.alias = \"hk\"\r\nif  ( (player.alias) = (\"hk\") )\r\n// does (\"h\") = (\"h\") --->  true / suceeds\r\n// does (\"k\") = (\"k\") ---> true / suceeds\r\n// all trues ----> TRUE // \"hk\" = \"hk\" \r\n\r\nplayer.alias = \"hk\"\r\nif  ( (player.alias) = (\"hm\") )\r\n// does (\"h\") = (\"h\") --->  true / suceeds\r\n// does (\"k\") = (\"m\") ---> false / fails\r\n// NOT all trues ----> FALSE // \"hk\" <> \"hm\"\r\n\r\nplayer.alias = \"hm\"\r\nif  ( (player.alias) = (\"hk\") )\r\n// does (\"h\") = (\"h\") --->  true / suceeds\r\n// does (\"m\") = (\"k\") ---> false / fails\r\n// NOT all trues ----> FALSE // \"hm\" <> \"hk\"\r\n\r\nquest IS case sensitive:\r\n\r\nplayer.alias = \"hk\"\r\nif  ( (player.alias) = (\"hK\") )\r\n// does (\"h\") = (\"h\") --->  true / suceeds\r\n// does (\"k\") = (\"K\") ---> false / fails\r\n// NOT all trues ----> FALSE // \"hk\" <> \"hK\"\r\n\r\n(but you can use the built-in converter-helper Functions/Scripts: LCase (STRING), UCase (STRING), etc)\r\n\r\n-------------------\r\n\r\ntechnically Boolean Attributes (\"flags\") are like this, for example:\r\n\r\nif orc.dead = true\r\nor\r\nif orc.dead = false\r\n\r\nbut, quest is programmed to understand (and use) this shortened form for true:\r\n\r\nif orc.dead\r\n\r\nand (based upon the above) for 'false', you can thus do this:\r\n\r\nif not orc.dead\r\n\r\nor, for 'false', you can also do its normal syntax:\r\n\r\nif orc.dead = false\r\n\r\nhowever, there's no reason to do the normal syntax for Booleans for 'true' (if orc.dead = true), as that's an extra and un-needed operation\r\n\r\nbut the point is that regardless of the Attribute Type, it's doing the same string comparisons:\r\n\r\nif orc.dead // Boolean Attribute // a \"flag\"\r\n// is the same as\r\nif orc.dead = true // Boolean Attribute // a \"flag\"\r\n// which is same value comparison as all the other Types of Attributes:\r\nif player.alias = \"HK\" // String Attribute\r\nif dragon.life = 999 // Integer Attribute\r\nif player.right_hand = sword // Object Attribute\r\n\r\n------------\r\n\r\nthere's 3 types of VARIABLES (keeping this simple):\r\n\r\nVARIABLES:\r\n-> 1. Variables: local/temporary: only exist within their parent scripting\r\n-> 2. Attributes: global/permanent (so long as its parent Object exists / still exists): you can use them anywhere in your game, but do note that when you change their values, you change their values (those new/changed values are now the values the Attribute stores, so when you use that Attribute somewhere else, it's using those new/changed values, as the old values are lost/over-written... unless you store them in another/seperate Attribute before you change/over-write them, hehe)\r\n-> 3. Parameters: deals with Functions, Commands, and Delegates-Script Attributes",
      "EditableFormat": "markdown",
      "HTML": "<p>true/false is determined by string comparisons:</p>\n<p>(each letter/character is checked/compared)</p>\n<p>player.alias = \"hk\"<br>\nif  ( (player.alias) = (\"hk\") )<br>\n// does (\"h\") = (\"h\") ---&gt;  true / suceeds<br>\n// does (\"k\") = (\"k\") ---&gt; true / suceeds<br>\n// all trues ----&gt; TRUE // \"hk\" = \"hk\"</p>\n<p>player.alias = \"hk\"<br>\nif  ( (player.alias) = (\"hm\") )<br>\n// does (\"h\") = (\"h\") ---&gt;  true / suceeds<br>\n// does (\"k\") = (\"m\") ---&gt; false / fails<br>\n// NOT all trues ----&gt; FALSE // \"hk\" &lt;&gt; \"hm\"</p>\n<p>player.alias = \"hm\"<br>\nif  ( (player.alias) = (\"hk\") )<br>\n// does (\"h\") = (\"h\") ---&gt;  true / suceeds<br>\n// does (\"m\") = (\"k\") ---&gt; false / fails<br>\n// NOT all trues ----&gt; FALSE // \"hm\" &lt;&gt; \"hk\"</p>\n<p>quest IS case sensitive:</p>\n<p>player.alias = \"hk\"<br>\nif  ( (player.alias) = (\"hK\") )<br>\n// does (\"h\") = (\"h\") ---&gt;  true / suceeds<br>\n// does (\"k\") = (\"K\") ---&gt; false / fails<br>\n// NOT all trues ----&gt; FALSE // \"hk\" &lt;&gt; \"hK\"</p>\n<p>(but you can use the built-in converter-helper Functions/Scripts: LCase (STRING), UCase (STRING), etc)</p>\n<hr>\n<p>technically Boolean Attributes (\"flags\") are like this, for example:</p>\n<p>if orc.dead = true<br>\nor<br>\nif orc.dead = false</p>\n<p>but, quest is programmed to understand (and use) this shortened form for true:</p>\n<p>if orc.dead</p>\n<p>and (based upon the above) for 'false', you can thus do this:</p>\n<p>if not orc.dead</p>\n<p>or, for 'false', you can also do its normal syntax:</p>\n<p>if orc.dead = false</p>\n<p>however, there's no reason to do the normal syntax for Booleans for 'true' (if orc.dead = true), as that's an extra and un-needed operation</p>\n<p>but the point is that regardless of the Attribute Type, it's doing the same string comparisons:</p>\n<p>if orc.dead // Boolean Attribute // a \"flag\"<br>\n// is the same as<br>\nif orc.dead = true // Boolean Attribute // a \"flag\"<br>\n// which is same value comparison as all the other Types of Attributes:<br>\nif player.alias = \"HK\" // String Attribute<br>\nif dragon.life = 999 // Integer Attribute<br>\nif player.right_hand = sword // Object Attribute</p>\n<hr>\n<p>there's 3 types of VARIABLES (keeping this simple):</p>\n<p>VARIABLES:<br>\n-&gt; 1. Variables: local/temporary: only exist within their parent scripting<br>\n-&gt; 2. Attributes: global/permanent (so long as its parent Object exists / still exists): you can use them anywhere in your game, but do note that when you change their values, you change their values (those new/changed values are now the values the Attribute stores, so when you use that Attribute somewhere else, it's using those new/changed values, as the old values are lost/over-written... unless you store them in another/seperate Attribute before you change/over-write them, hehe)<br>\n-&gt; 3. Parameters: deals with Functions, Commands, and Delegates-Script Attributes</p>\n\n",
      "PostDate": "2017-06-22T22:01:20.9445106Z",
      "LastEditDate": "2017-06-22T22:25:21.9967351Z",
      "link": null
    },
    {
      "PostId": "9cf3791b-73db-4430-bba0-16618fca44ca",
      "UserId": 185415,
      "Username": "major powers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5a2fab185e3766767ad57fd12f0b369a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh I see sorry, you wanted to check a counter **and** a flag, etc.\r\n\r\nAnother way is in Text+Script.  Go into codeview and paste this in:\r\n\r\n```\r\nSetCounter (\"Counter1\", 2)\r\nSetFlagOn (\"Flag1\")\r\nSetFlagOn (\"Flag2\")\r\nif (GetBoolean (game, \"Flag1\") and (GetBoolean (game, \"Flag2\"))) {\r\n  if (GetInt(game, \"Counter1\") <= 2) {\r\n  }\r\n  msg (\"Nailed it!\")\r\n}\r\n```\r\nAnd you can wrap all that in\r\n\r\n```\r\nfirsttime {\r\n}\r\n```\r\n\r\nIf you only want them to see it once, the first time they visit the page.\r\n\r\nBut I see what you're saying about having it in one line of text.  I'm pretty sure that can be done.  I'll check back in later if you haven't figured it out (though it looks like your interim solution of setting a flag if the counter is a certain value will get that done --- and may even be the best solution!).\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh I see sorry, you wanted to check a counter <strong>and</strong> a flag, etc.</p>\n<p>Another way is in Text+Script.  Go into codeview and paste this in:</p>\n<pre><code>SetCounter (\"Counter1\", 2)\nSetFlagOn (\"Flag1\")\nSetFlagOn (\"Flag2\")\nif (GetBoolean (game, \"Flag1\") and (GetBoolean (game, \"Flag2\"))) {\n  if (GetInt(game, \"Counter1\") &lt;= 2) {\n  }\n  msg (\"Nailed it!\")\n}\n</code></pre>\n<p>And you can wrap all that in</p>\n<pre><code>firsttime {\n}\n</code></pre>\n<p>If you only want them to see it once, the first time they visit the page.</p>\n<p>But I see what you're saying about having it in one line of text.  I'm pretty sure that can be done.  I'll check back in later if you haven't figured it out (though it looks like your interim solution of setting a flag if the counter is a certain value will get that done --- and may even be the best solution!).</p>\n\n",
      "PostDate": "2017-06-22T22:13:02.8732691Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb5abea5-210f-4b8e-b6b6-1e49455335db",
      "UserId": 185415,
      "Username": "major powers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5a2fab185e3766767ad57fd12f0b369a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**Hey wait a minute I just got exactly that to work just in Text mode:**\r\n<br>\r\n\r\n```\r\n{once:{if Counter1<=2:this text} also this text {if Flag1:and this text, too}}\r\n```\r\n<br>\r\nMind the spacing and capital letters matter, too.\r\n\r\n(and nothing appears if the counter value isn't met)",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>Hey wait a minute I just got exactly that to work just in Text mode:</strong><br>\n<br></p>\n<pre><code>{once:{if Counter1&lt;=2:this text} also this text {if Flag1:and this text, too}}\n</code></pre>\n<br>\nMind the spacing and capital letters matter, too.\n<p>(and nothing appears if the counter value isn't met)</p>\n\n",
      "PostDate": "2017-06-22T22:24:21.7828876Z",
      "LastEditDate": "2017-06-22T22:29:30.6059185Z",
      "link": null
    },
    {
      "PostId": "02e17014-a867-4bc3-a03b-0fcc46225f02",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nin code, it's using the 'msg' Script/Function regardless of whether in the GUI/Editor, you set it to a String Type (or are typing in your text into a text box, as underneath that's a String Type, which uses the 'msg' Script) or a Script Type (the 'msg / print a message' Script):\r\n\r\nprint [MESSAGE] hi, my name is HK.\r\nmsg (\"hi, my name is HK.\")\r\n\r\nprint [MESSAGE] \"hi, my name is HK.\"\r\nmsg (\"\\\"hi, my name is HK.\\\"\")\r\n\r\nprint [EXPRESSION] \"\\\"hi, my name is HK.\\\"\"\r\nmsg (\"\\\"hi, my name is HK.\\\"\")\r\n\r\nplayer.alias = \"HK\"\r\nprint [EXPRESSION] \"hi, my name is \" + player.alias + \".\"\r\nmsg (\"hi, my name is \" + player.alias + \".\")\r\n\r\nplayer.alias = \"HK\"\r\nprint [EXPRESSION] \"hi, my name is {player.alias}.\"\r\nmsg (\"hi, my name is {player.alias}.\")\r\n\r\nplayer.alias = \"HK\"\r\nprint [EXPRESSION] player.alias\r\nmsg (player.alias)\r\n\r\nprint [EXPRESSION] \"hi, my name is HK.\"\r\nmsg (\"hi, my name is HK.\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>in code, it's using the 'msg' Script/Function regardless of whether in the GUI/Editor, you set it to a String Type (or are typing in your text into a text box, as underneath that's a String Type, which uses the 'msg' Script) or a Script Type (the 'msg / print a message' Script):\n\nprint [MESSAGE] hi, my name is HK.\nmsg (\"hi, my name is HK.\")\n\nprint [MESSAGE] \"hi, my name is HK.\"\nmsg (\"\\\"hi, my name is HK.\\\"\")\n\nprint [EXPRESSION] \"\\\"hi, my name is HK.\\\"\"\nmsg (\"\\\"hi, my name is HK.\\\"\")\n\nplayer.alias = \"HK\"\nprint [EXPRESSION] \"hi, my name is \" + player.alias + \".\"\nmsg (\"hi, my name is \" + player.alias + \".\")\n\nplayer.alias = \"HK\"\nprint [EXPRESSION] \"hi, my name is {player.alias}.\"\nmsg (\"hi, my name is {player.alias}.\")\n\nplayer.alias = \"HK\"\nprint [EXPRESSION] player.alias\nmsg (player.alias)\n\nprint [EXPRESSION] \"hi, my name is HK.\"\nmsg (\"hi, my name is HK.\")\n</code></pre>\n\n",
      "PostDate": "2017-06-22T22:32:43.4771926Z",
      "LastEditDate": "2017-06-22T22:38:45.0085037Z",
      "link": null
    },
    {
      "PostId": "e64d2fd9-8e0b-4f68-bd01-a920d514ce1d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can put it all as one line:\r\n\r\n```\r\n// 'and' logic:\r\nif (GetBoolean (game, \"Flag1\") and GetBoolean (game, \"Flag2\") and GetInt (game, \"Counter1\") <= 2) {\r\n  // scripting\r\n}\r\n\r\n// 'or' logic:\r\nif (GetBoolean (game, \"Flag1\") or GetBoolean (game, \"Flag2\") or GetInt (game, \"Counter1\") <= 2) {\r\n  // scripting\r\n}\r\n\r\n// if you got 'or' and 'and' logic together... the 'order of operations' matter, so you got to control it to be doing what you want, via using parenthesis, just like you would with a math problem, for example:\r\n\r\n1 + 3 * 5:\r\n \r\n(1 + 3) * 5 = 20\r\nvs\r\n1 + (3 * 5) = 16\r\n\r\nby the way, '+ (plus: addition symbol)' is used for 'or' logic when writing Boolean Logic as arithmetic equations, and '* (asterisks: computer multiplication symbol) is used for 'and' logic\r\n\r\n-------\r\n\r\nthe Boolean arithmetic identites/rules:\r\n\r\n(this gets into circuitry/digital-design, Logic/Boolean Gates, and etc)\r\n\r\n0 : false\r\n1 : true\r\n\r\n+ : or\r\n* : and\r\n\r\nX * Y = XY\r\nXY = X * Y\r\n\r\nX : 0 or 1 // \"don't cares\"\r\n\r\n' : negation/not/complement/opposite // 0 <---> 1\r\n\r\n// these are similar to ordinary math alegebra:\r\n0 * X = 0\r\n0 + X = X\r\n1 * X = X\r\n1 + X = 1\r\n0' = 1\r\n1' = 0\r\n(X')' = X\r\nX + X = X\r\nX * X = X\r\nX + X' = 1\r\nX * X' = 0\r\nX + Y = Y + X\r\nX * Y = Y * X\r\nX + (Y + Z) = (X + Y) + Z\r\nX * (Y * Z) = (X * Y) * Z\r\nX * (Y + Z) = (X * Y) + (X * Z)\r\n// these are Boolean Arithmetic only:\r\n(X + Y)' = (X') * (Y') // De Morgan\r\n(X * Y)' = (X') + (Y') // De Morgan\r\nX + (Y * X) = (X + Y) * (X + Z) // the weird rule, but it works in terms of Boolean logic arithmetic/manipulation\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>you can put it all as one line:</p>\n<pre><code>// 'and' logic:\nif (GetBoolean (game, \"Flag1\") and GetBoolean (game, \"Flag2\") and GetInt (game, \"Counter1\") &lt;= 2) {\n  // scripting\n}\n\n// 'or' logic:\nif (GetBoolean (game, \"Flag1\") or GetBoolean (game, \"Flag2\") or GetInt (game, \"Counter1\") &lt;= 2) {\n  // scripting\n}\n\n// if you got 'or' and 'and' logic together... the 'order of operations' matter, so you got to control it to be doing what you want, via using parenthesis, just like you would with a math problem, for example:\n\n1 + 3 * 5:\n \n(1 + 3) * 5 = 20\nvs\n1 + (3 * 5) = 16\n\nby the way, '+ (plus: addition symbol)' is used for 'or' logic when writing Boolean Logic as arithmetic equations, and '* (asterisks: computer multiplication symbol) is used for 'and' logic\n\n-------\n\nthe Boolean arithmetic identites/rules:\n\n(this gets into circuitry/digital-design, Logic/Boolean Gates, and etc)\n\n0 : false\n1 : true\n\n+ : or\n* : and\n\nX * Y = XY\nXY = X * Y\n\nX : 0 or 1 // \"don't cares\"\n\n' : negation/not/complement/opposite // 0 &lt;---&gt; 1\n\n// these are similar to ordinary math alegebra:\n0 * X = 0\n0 + X = X\n1 * X = X\n1 + X = 1\n0' = 1\n1' = 0\n(X')' = X\nX + X = X\nX * X = X\nX + X' = 1\nX * X' = 0\nX + Y = Y + X\nX * Y = Y * X\nX + (Y + Z) = (X + Y) + Z\nX * (Y * Z) = (X * Y) * Z\nX * (Y + Z) = (X * Y) + (X * Z)\n// these are Boolean Arithmetic only:\n(X + Y)' = (X') * (Y') // De Morgan\n(X * Y)' = (X') + (Y') // De Morgan\nX + (Y * X) = (X + Y) * (X + Z) // the weird rule, but it works in terms of Boolean logic arithmetic/manipulation\n</code></pre>\n\n",
      "PostDate": "2017-06-22T23:22:10.240256Z",
      "LastEditDate": "2017-06-22T23:25:51.2825519Z",
      "link": null
    },
    {
      "PostId": "aee13b62-91b3-4208-a1c2-2e5f97b502bd",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@major powers: Yeah, trigging a flag when the counter reaches X in Script+text and using that flag in the text section seems to be the only way to avoid bugs.  I don't really need functions(don't really understand them quite yet)  thanks for the help ",
      "EditableFormat": "markdown",
      "HTML": "<p>@major powers: Yeah, trigging a flag when the counter reaches X in Script+text and using that flag in the text section seems to be the only way to avoid bugs.  I don't really need functions(don't really understand them quite yet)  thanks for the help</p>\n\n",
      "PostDate": "2017-06-22T23:30:40.9676862Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "809e1904-847b-4f6c-9463-fc0f7c01f092",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "About the 'Function' Element:\r\n\r\nFunctions work just like Verbs, except you can use inputs (your inputs, aka values, are the \"Arguments\", aka values, and the Arguments are stored into the position-matching Parameters, aka Variables, which can be used by/within the Function's scripting) in their scripting and it can return a value too, and they're not contained within Objects, you can use/\"call\" them anywhere\r\n\r\nto use (\"call\") a Function:\r\n\r\nGUI/Editor: run as script (Game Book: Page Type: [script] or [text+script]) -> add new script -> 'scripts' categegory/section -> 'call function' Script -> Name text box: NAME_OF_FUNCTION, add box: add in your Arguments/inputs/values if you got Parameters\r\n\r\nin code:\r\n\r\nNAME_OF_FUNCTION // having NO Parameters\r\nor\r\nNAME_OF_FUNCTION (Argument_1, Argument_2, etc more or less arguments)\r\n\r\n------------\r\n\r\nto create/define your Function:\r\n\r\nGUI/Editor: Functions -> Add -> Name text box: NAME_OF_FUNCTION, add Parameters box: add in your Parameters (NAMES OF YOUR Variables TO BE USED BY THE FUNCTION'S SCRIPTING), and lastly, add in your script(s) for the Function's scripting\r\n\r\nin code, an example (using both Parameters and returning a Value):\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"number_1\" type=\"int\">0</attr>\r\n  <attr name=\"number_2\" type=\"int\">0</attr>\r\n  <attr name=\"sum\" type=\"int\">0</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (\"Number 1?\")\r\n    get input {\r\n      game.number_1 = ToInt (result)\r\n      msg (\"Number 2?\")\r\n      get input {\r\n        game.number_2 = ToInt (result)\r\n        game.sum = addition_of_two_integers_function (game.number_1, game.number_2) // Argument Position 1: game.number_1 // Argument Position 2: game.number_2\r\n      }\r\n    }\r\n  </attr>\r\n</game>\r\n\r\n// Argument Position 1's Value (stored in an Attribute in this example) is matched to (and thus stored within) Parameter Position 1's Variable // num_1 = game.number_1 = (your first input)\r\n// Argument Position 2's Value (stored in an Attribute in this example) is matched to (and thus stored within) Parameter Position 2's Variable // num_2 = game.number_2 = (your second input)\r\n\r\n<function name=\"addition_of_two_integers_function\" parameters=\"num_1, num_2\" type=\"int\"> // Parameter Position 1: num_1 // Parameter Position 2: num_2\r\n  return (num_1 + num_2)\r\n</function>\r\n\r\n// example inputs and output:\r\ngame.number_1 = 4\r\ngame.number_2 = 3\r\ngame.sum = 7\r\n```\r\n\r\n--------\r\n\r\nif you don't have a return value, then you just call the function, you don't need to set the Function (the 'call function') to be stored within a VARIABLE, but if you do have a return value, then you MUST do something with that returned value: store it into a VARIABLE (like in my example above) or have it be used by another Function (aka it's returned value is used as an input/argument in another Function's function call) or use it within whatever other scripting Element.\r\n\r\n------\r\n\r\nfor example of a Function with no return value (and no Parameters as well):\r\n\r\n(probably the most simple Function there is, lol)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    hi_function\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"hi_function\">\r\n  msg (\"hi\")\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>About the 'Function' Element:</p>\n<p>Functions work just like Verbs, except you can use inputs (your inputs, aka values, are the \"Arguments\", aka values, and the Arguments are stored into the position-matching Parameters, aka Variables, which can be used by/within the Function's scripting) in their scripting and it can return a value too, and they're not contained within Objects, you can use/\"call\" them anywhere</p>\n<p>to use (\"call\") a Function:</p>\n<p>GUI/Editor: run as script (Game Book: Page Type: [script] or [text+script]) -&gt; add new script -&gt; 'scripts' categegory/section -&gt; 'call function' Script -&gt; Name text box: NAME_OF_FUNCTION, add box: add in your Arguments/inputs/values if you got Parameters</p>\n<p>in code:</p>\n<p>NAME_OF_FUNCTION // having NO Parameters<br>\nor<br>\nNAME_OF_FUNCTION (Argument_1, Argument_2, etc more or less arguments)</p>\n<hr>\n<p>to create/define your Function:</p>\n<p>GUI/Editor: Functions -&gt; Add -&gt; Name text box: NAME_OF_FUNCTION, add Parameters box: add in your Parameters (NAMES OF YOUR Variables TO BE USED BY THE FUNCTION'S SCRIPTING), and lastly, add in your script(s) for the Function's scripting</p>\n<p>in code, an example (using both Parameters and returning a Value):</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"number_1\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"number_2\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"sum\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (\"Number 1?\")\n    get input {\n      game.number_1 = ToInt (result)\n      msg (\"Number 2?\")\n      get input {\n        game.number_2 = ToInt (result)\n        game.sum = addition_of_two_integers_function (game.number_1, game.number_2) // Argument Position 1: game.number_1 // Argument Position 2: game.number_2\n      }\n    }\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n// Argument Position 1's Value (stored in an Attribute in this example) is matched to (and thus stored within) Parameter Position 1's Variable // num_1 = game.number_1 = (your first input)\n// Argument Position 2's Value (stored in an Attribute in this example) is matched to (and thus stored within) Parameter Position 2's Variable // num_2 = game.number_2 = (your second input)\n\n&lt;function name=\"addition_of_two_integers_function\" parameters=\"num_1, num_2\" type=\"int\"&gt; // Parameter Position 1: num_1 // Parameter Position 2: num_2\n  return (num_1 + num_2)\n&lt;/function&gt;\n\n// example inputs and output:\ngame.number_1 = 4\ngame.number_2 = 3\ngame.sum = 7\n</code></pre>\n<hr>\n<p>if you don't have a return value, then you just call the function, you don't need to set the Function (the 'call function') to be stored within a VARIABLE, but if you do have a return value, then you MUST do something with that returned value: store it into a VARIABLE (like in my example above) or have it be used by another Function (aka it's returned value is used as an input/argument in another Function's function call) or use it within whatever other scripting Element.</p>\n<hr>\n<p>for example of a Function with no return value (and no Parameters as well):</p>\n<p>(probably the most simple Function there is, lol)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    hi_function\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"hi_function\"&gt;\n  msg (\"hi\")\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-06-22T23:58:54.6166613Z",
      "LastEditDate": "2017-06-23T00:05:57.4538587Z",
      "link": null
    },
    {
      "PostId": "c1ec19b1-a821-47ac-a313-6a91debe97c8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"@major powers: Yeah, trigging a flag when the counter reaches X in Script+text and using that flag in the text section seems to be the only way to avoid bugs. I don't really need functions(don't really understand them quite yet) thanks for the help (Zubric)\"\r\n\r\n-------------------------------------------\r\n\r\nah, this sounds like you're using a Variable VARIABLE... and since it doesn't exist outside of its parent scripting (it gets DESTROYED when it's parent scripting is done/finished), hence your error, as you're trying to use your Variable, which no longer exists, obviously an error, lol.\r\n\r\nyou want to be using an Attribute VARIABLE... I don't know the GUI/Editor script options for Integer Attribute (\"counters\") addition by '+1' that well... so hopefully Major Powers can explain how to use Attributes with the GUI/Editor's script  options for counters and their increasing/decreasing by 1 operations/Functions.\r\n\r\n---------\r\n\r\nhere's an example that works (uses Attributes):\r\n\r\n(oops, I used an Boolean Attribute / \"flag\", instead of an Integer Attribute / \"counter\"... well, it does still demonstrate the difference between using an Attribute vs a Variable, and thus the same applies for an Integer Attribute / \"counter\", too)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=hard_mode\" type=\"boolean\">false</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    ask (\"Do you want to play in hard mode? (yes: hard mode, no: easy mode)\") {\r\n      game.hard_mode = result // result = (true or false) // true <--- yes // false <--- no\r\n    }\r\n  </attr>\r\n\r\n<object name=\"room\">\r\n  <object name=\"player\">\r\n  </object>\r\n  <object name=\"wise_wizard\">\r\n    <attr name=\"displayverbs\" type=\"simplestringlist\">talk</attr>\r\n    <attr name=\"talk\" type=\"script\">\r\n      msg (\"{if game.hard_mode:You're playing the game in hard mode}{if not game.hard_mode:You're playing the game in easy mode}\")\r\n    </attr>\r\n  </object>\r\n</object>\r\n\r\n<verb>\r\n  <property>talk</property>\r\n  <pattern>talk</pattern>\r\n  <defaultexpression>You can't talk to that!</defaultexpression>\r\n</verb>\r\n```\r\n\r\n-------------\r\n\r\nhere's an example of using a Variable which WILL cause an ERROR:\r\n\r\n(oops, I used an Boolean Attribute / \"flag\", instead of an Integer Attribute / \"counter\"... well, it does still demonstrate the difference between using an Attribute vs a Variable, and thus the same applies for an Integer Attribute / \"counter\", too)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    ask (\"Do you want to play in hard mode? (yes: hard mode, no: easy mode)\") {\r\n      hard_mode = result // result = (true or false) // true <--- yes // false <--- no\r\n      // the 'hard_mode' VARIABLE is a Variable VARIABLE, and a Variable is local/temporary, as soon as this 'start' Script finishes, our 'hard_mode' Variable gets DESTROYED\r\n    }\r\n  </attr>\r\n\r\n<object name=\"room\">\r\n  <object name=\"player\">\r\n  </object>\r\n  <object name=\"wise_wizard\">\r\n    <attr name=\"displayverbs\" type=\"simplestringlist\">talk</attr>\r\n    <attr name=\"talk\" type=\"script\">\r\n      msg (\"{if hard_mode:You're playing the game in hard mode}{if not hard_mode:You're playing the game in easy mode}\")\r\n      // ERROR: there is no 'hard_mode' Variable VARIABLE (as it was DESTROYED, as the 'start' Script of the 'game' Game Settings Object has finished already)\r\n    </attr>\r\n  </object>\r\n</object>\r\n\r\n<verb>\r\n  <property>talk</property>\r\n  <pattern>talk</pattern>\r\n  <defaultexpression>You can't talk to that!</defaultexpression>\r\n</verb>\r\n```\r\n\r\n---------------\r\n\r\npeople new to quest and to programming, should only/always use quest's Attribute VARIABLES, as we don't run into the problems of trying to use the Variables \"out of scope\" (as they don't exist \"out of scope\", as they're DESTROYED upon its parent scripting being finished/done)\r\n\r\nAttribute VARIABLES = Attributes:\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE\r\nor\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\nor\r\nif (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION) { /* scripting */ }\r\n\r\n------ vs -------\r\n\r\nVariables VARIABLES = Variables:\r\n\r\nNAME_OF_Variable\r\nor\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\nor\r\nif (NAME_OF_Variable OPERATOR VALUE_OR_EXPRESSION) { /* scripting */ }\r\n\r\n----------\r\n\r\nask if you need help or got questions with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>\"@major powers: Yeah, trigging a flag when the counter reaches X in Script+text and using that flag in the text section seems to be the only way to avoid bugs. I don't really need functions(don't really understand them quite yet) thanks for the help (Zubric)\"</p>\n<hr>\n<p>ah, this sounds like you're using a Variable VARIABLE... and since it doesn't exist outside of its parent scripting (it gets DESTROYED when it's parent scripting is done/finished), hence your error, as you're trying to use your Variable, which no longer exists, obviously an error, lol.</p>\n<p>you want to be using an Attribute VARIABLE... I don't know the GUI/Editor script options for Integer Attribute (\"counters\") addition by '+1' that well... so hopefully Major Powers can explain how to use Attributes with the GUI/Editor's script  options for counters and their increasing/decreasing by 1 operations/Functions.</p>\n<hr>\n<p>here's an example that works (uses Attributes):</p>\n<p>(oops, I used an Boolean Attribute / \"flag\", instead of an Integer Attribute / \"counter\"... well, it does still demonstrate the difference between using an Attribute vs a Variable, and thus the same applies for an Integer Attribute / \"counter\", too)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=hard_mode\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    ask (\"Do you want to play in hard mode? (yes: hard mode, no: easy mode)\") {\n      game.hard_mode = result // result = (true or false) // true &lt;--- yes // false &lt;--- no\n    }\n  &lt;/attr&gt;\n\n&lt;object name=\"room\"&gt;\n  &lt;object name=\"player\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"wise_wizard\"&gt;\n    &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;talk&lt;/attr&gt;\n    &lt;attr name=\"talk\" type=\"script\"&gt;\n      msg (\"{if game.hard_mode:You're playing the game in hard mode}{if not game.hard_mode:You're playing the game in easy mode}\")\n    &lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk&lt;/property&gt;\n  &lt;pattern&gt;talk&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't talk to that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>here's an example of using a Variable which WILL cause an ERROR:</p>\n<p>(oops, I used an Boolean Attribute / \"flag\", instead of an Integer Attribute / \"counter\"... well, it does still demonstrate the difference between using an Attribute vs a Variable, and thus the same applies for an Integer Attribute / \"counter\", too)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    ask (\"Do you want to play in hard mode? (yes: hard mode, no: easy mode)\") {\n      hard_mode = result // result = (true or false) // true &lt;--- yes // false &lt;--- no\n      // the 'hard_mode' VARIABLE is a Variable VARIABLE, and a Variable is local/temporary, as soon as this 'start' Script finishes, our 'hard_mode' Variable gets DESTROYED\n    }\n  &lt;/attr&gt;\n\n&lt;object name=\"room\"&gt;\n  &lt;object name=\"player\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"wise_wizard\"&gt;\n    &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;talk&lt;/attr&gt;\n    &lt;attr name=\"talk\" type=\"script\"&gt;\n      msg (\"{if hard_mode:You're playing the game in hard mode}{if not hard_mode:You're playing the game in easy mode}\")\n      // ERROR: there is no 'hard_mode' Variable VARIABLE (as it was DESTROYED, as the 'start' Script of the 'game' Game Settings Object has finished already)\n    &lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk&lt;/property&gt;\n  &lt;pattern&gt;talk&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't talk to that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>people new to quest and to programming, should only/always use quest's Attribute VARIABLES, as we don't run into the problems of trying to use the Variables \"out of scope\" (as they don't exist \"out of scope\", as they're DESTROYED upon its parent scripting being finished/done)</p>\n<p>Attribute VARIABLES = Attributes:</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE<br>\nor<br>\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION<br>\nor<br>\nif (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE OPERATOR VALUE_OR_EXPRESSION) { /* scripting */ }</p>\n<p>------ vs -------</p>\n<p>Variables VARIABLES = Variables:</p>\n<p>NAME_OF_Variable<br>\nor<br>\nNAME_OF_Variable = VALUE_OR_EXPRESSION<br>\nor<br>\nif (NAME_OF_Variable OPERATOR VALUE_OR_EXPRESSION) { /* scripting */ }</p>\n<hr>\n<p>ask if you need help or got questions with anything</p>\n\n",
      "PostDate": "2017-06-23T00:15:28.95097Z",
      "LastEditDate": "2017-06-23T00:40:35.9540231Z",
      "link": null
    },
    {
      "PostId": "3ce36118-5f3c-460b-8a97-fc213bfb11c5",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Should read as this:\r\nSam walked to the cookie jar but it was empty.\r\nbut if said counter never reached the set value I get\r\nSam walked to the cookie jar {if counter<=3:but it was empty.}\r\n\r\nI was using in script+text area when I needed to track it\r\nIncreaseCounter (\"flag\")\r\n\r\nSo not sure why it did that. there no error message that i can see",
      "EditableFormat": "markdown",
      "HTML": "<p>Should read as this:<br>\nSam walked to the cookie jar but it was empty.<br>\nbut if said counter never reached the set value I get<br>\nSam walked to the cookie jar {if counter&lt;=3:but it was empty.}</p>\n<p>I was using in script+text area when I needed to track it<br>\nIncreaseCounter (\"flag\")</p>\n<p>So not sure why it did that. there no error message that i can see</p>\n\n",
      "PostDate": "2017-06-23T01:02:17.1668292Z",
      "LastEditDate": "2017-06-23T01:05:13.2953277Z",
      "link": null
    },
    {
      "PostId": "9a1ab91a-256f-487e-b954-ea4d04968550",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "template:\r\n\r\n(replace my upper case stuff with what you're using as your labels/names for them)\r\n\r\n```\r\n// 'NAME_OF_YOUR_STARTING_PAGE' Page Object -> 'Page' Tab -> Page Type: [script] or [text+script] -> (see below)\r\n\r\n// in code:\r\nNAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = YOUR_STARTING_VALUE\r\n\r\n// or, via the GUI/Editor:\r\n\r\nadd new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = [EXPRESSION] YOUR_STARTING_VALUE\r\n\r\n// -------------\r\n\r\n'WHATEVER' Page Object: 'Page' Tab -> Page Type: [script] or [text+script] -> (see below)\r\n\r\n// in code:\r\nmsg (\"Sam walked to the {NAME_OF_COOKIE_JAR_OBJECT.name}, {if NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE=0: but it was empty.}{if NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE>0: and takes a cookie and eats it}\")\r\nif (NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE > 0) {\r\n  NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE - 1\r\n}\r\n\r\n// as hopefully you can see from the above... in this case, it's easier to just do the normal scripting (instead of the text processor commands):\r\n\r\nif (NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE > 0) {\r\n  NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE - 1\r\n  msg (\"Sam walks up to the \" + NAME_OF_YOUR_COOKIE_JAR_OBJECT.name + \", and takes a cookie and eats it.\")\r\n} else {\r\n  msg (\"Sam walks up to the \" + NAME_OF_YOUR_COOKIE_JAR_OBJECT.name + \", but it was empty.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>template:</p>\n<p>(replace my upper case stuff with what you're using as your labels/names for them)</p>\n<pre><code>// 'NAME_OF_YOUR_STARTING_PAGE' Page Object -&gt; 'Page' Tab -&gt; Page Type: [script] or [text+script] -&gt; (see below)\n\n// in code:\nNAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = YOUR_STARTING_VALUE\n\n// or, via the GUI/Editor:\n\nadd new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = [EXPRESSION] YOUR_STARTING_VALUE\n\n// -------------\n\n'WHATEVER' Page Object: 'Page' Tab -&gt; Page Type: [script] or [text+script] -&gt; (see below)\n\n// in code:\nmsg (\"Sam walked to the {NAME_OF_COOKIE_JAR_OBJECT.name}, {if NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE=0: but it was empty.}{if NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE&gt;0: and takes a cookie and eats it}\")\nif (NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE &gt; 0) {\n  NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE - 1\n}\n\n// as hopefully you can see from the above... in this case, it's easier to just do the normal scripting (instead of the text processor commands):\n\nif (NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE &gt; 0) {\n  NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE = NAME_OF_YOUR_COOKIE_JAR_OBJECT.NAME_OF_YOUR_COUNTER/INTEGER_ATTRIBUTE - 1\n  msg (\"Sam walks up to the \" + NAME_OF_YOUR_COOKIE_JAR_OBJECT.name + \", and takes a cookie and eats it.\")\n} else {\n  msg (\"Sam walks up to the \" + NAME_OF_YOUR_COOKIE_JAR_OBJECT.name + \", but it was empty.\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-06-23T01:47:57.07332Z",
      "LastEditDate": "2017-06-23T01:57:51.8720493Z",
      "link": null
    },
    {
      "PostId": "c54ea04d-a33c-4c88-be87-3fa61fe210d6",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good to know that for the future.  Although sounds like it get really lengthy if i had a long paragraph with various factors that can change the words.",
      "EditableFormat": "markdown",
      "HTML": "<p>Good to know that for the future.  Although sounds like it get really lengthy if i had a long paragraph with various factors that can change the words.</p>\n\n",
      "PostDate": "2017-06-23T03:37:45.9703566Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca6e2f67-e23a-4f4e-b55f-07597d018037",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there anyway to avoid every msg being put on a new line?\r\n\r\nWell he/she is pretty nice  (he/she being the if command,) or do I literally have to make different sentences for every possibility?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there anyway to avoid every msg being put on a new line?</p>\n<p>Well he/she is pretty nice  (he/she being the if command,) or do I literally have to make different sentences for every possibility?</p>\n\n",
      "PostDate": "2017-06-23T04:01:46.1078249Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c2b8684-23ae-4aee-81cf-06324bc0ddd0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can do concatenation (literally putting things, aka strings, together)... and I left this out of my previous posts, as it'd take it's own post to explain what and how concatenation works.\r\n\r\n------\r\n\r\nlet me know if interested, and I'll help you with concatenation (I'm lazy right now and I got to go somewhere soon)\r\n\r\nhere's a quick look at it:\r\n\r\n(you can use the 'if' block with it, for answering your question, as this may not be apparent from me just briefly giving you a quick look at the concatenation itself)\r\n\r\n```\r\nmy_string = \"Hi, what is you name?\"\r\nmsg (my_string)\r\nmy_string = my_string + \" My name is HK.\"\r\nmsg (my_string)\r\nmy_string = my_string + \" You seem nice, let's be friends!\"\r\nmsg (my_string)\r\n\r\n// results/ouputs/displayment:\r\n\r\nHi, what is your name? // first 'msg' Script\r\nHi, what is your name? My name is HK. // second 'msg' Script\r\nHi, what is your name? My name is HK. You seem nice, let's be friends! // third/last 'msg' Script\r\n```\r\n\r\n-----\r\n\r\nmath arithmetic addition vs string concatenation:\r\n\r\n5 + 5 = 10\r\n55 + 55 = 110\r\n\r\n\"5\" + \"5\" = \"55\"\r\n\"55\" + \"55\" = \"5555\"\r\n\"mama\" + \"mia\" = \"mamamia\"\r\n\"mama\" + \"5\" = \"mama5\"\r\n\r\n-------------\r\n\r\nusing concatenation (which means you're also doing the 'normal' scripting) and the text processor commands, together, is the most powerful/useful scripting you can do: MAX functionality! hehe :D\r\n\r\n--------------------\r\n\r\nif you got a lot of combinations/options/outcomes/etc... you got a lot of them... there's  no way to reduce them (as you want them, lol).\r\n\r\ncode-wise though in how you implement those combinations/etc can be more or less efficient than other code designs... but this is only code-wise-design, you can't do anything about the number/types of conbinations themselves, you're stuck with them.\r\n\r\n------------\r\n\r\nyour OS (operating system) software (windows version, MacOS whatever) is at least 50 million code lines... just to give you an idea...\r\n\r\ncomputers are stupid, it takes a lot more instructions for a computer to do something than a person:\r\n\r\nif I want to say hi, I jsut say hi (1 process)\r\nif I want a computer to say hi, for pretend example, it'll take the computer 6 processes to say that same: hi\r\n\r\n-----\r\n\r\nreally smart/good programmers/genius'es can make the most concise code possible, but even then, it can still be really lengthy.\r\n\r\nso, it's not so much about length (though if you can make something concise, do so!), but rather more about organization (easy to read and use).",
      "EditableFormat": "markdown",
      "HTML": "<p>you can do concatenation (literally putting things, aka strings, together)... and I left this out of my previous posts, as it'd take it's own post to explain what and how concatenation works.</p>\n<hr>\n<p>let me know if interested, and I'll help you with concatenation (I'm lazy right now and I got to go somewhere soon)</p>\n<p>here's a quick look at it:</p>\n<p>(you can use the 'if' block with it, for answering your question, as this may not be apparent from me just briefly giving you a quick look at the concatenation itself)</p>\n<pre><code>my_string = \"Hi, what is you name?\"\nmsg (my_string)\nmy_string = my_string + \" My name is HK.\"\nmsg (my_string)\nmy_string = my_string + \" You seem nice, let's be friends!\"\nmsg (my_string)\n\n// results/ouputs/displayment:\n\nHi, what is your name? // first 'msg' Script\nHi, what is your name? My name is HK. // second 'msg' Script\nHi, what is your name? My name is HK. You seem nice, let's be friends! // third/last 'msg' Script\n</code></pre>\n<hr>\n<p>math arithmetic addition vs string concatenation:</p>\n<p>5 + 5 = 10<br>\n55 + 55 = 110</p>\n<p>\"5\" + \"5\" = \"55\"<br>\n\"55\" + \"55\" = \"5555\"<br>\n\"mama\" + \"mia\" = \"mamamia\"<br>\n\"mama\" + \"5\" = \"mama5\"</p>\n<hr>\n<p>using concatenation (which means you're also doing the 'normal' scripting) and the text processor commands, together, is the most powerful/useful scripting you can do: MAX functionality! hehe :D</p>\n<hr>\n<p>if you got a lot of combinations/options/outcomes/etc... you got a lot of them... there's  no way to reduce them (as you want them, lol).</p>\n<p>code-wise though in how you implement those combinations/etc can be more or less efficient than other code designs... but this is only code-wise-design, you can't do anything about the number/types of conbinations themselves, you're stuck with them.</p>\n<hr>\n<p>your OS (operating system) software (windows version, MacOS whatever) is at least 50 million code lines... just to give you an idea...</p>\n<p>computers are stupid, it takes a lot more instructions for a computer to do something than a person:</p>\n<p>if I want to say hi, I jsut say hi (1 process)<br>\nif I want a computer to say hi, for pretend example, it'll take the computer 6 processes to say that same: hi</p>\n<hr>\n<p>really smart/good programmers/genius'es can make the most concise code possible, but even then, it can still be really lengthy.</p>\n<p>so, it's not so much about length (though if you can make something concise, do so!), but rather more about organization (easy to read and use).</p>\n\n",
      "PostDate": "2017-06-23T19:23:33.8134886Z",
      "LastEditDate": "2017-06-23T19:47:05.2742215Z",
      "link": null
    },
    {
      "PostId": "b8dd6b10-fe1c-4434-9ebb-fe87bbe00f6d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "also, some really useful Functions: the string manipulation Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom: the 'string functions' section/category)\r\n\r\nAsc, CapFirst, etc etc etc",
      "EditableFormat": "markdown",
      "HTML": "<p>also, some really useful Functions: the string manipulation Functions:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom: the 'string functions' section/category)</p>\n<p>Asc, CapFirst, etc etc etc</p>\n\n",
      "PostDate": "2017-06-23T19:50:05.8353679Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5305639b-39d2-4e2b-9eab-64c646ff2064",
      "UserId": 108697,
      "Username": "Zubric",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e428485714dc1d5dc3000bb3bc4ef0f1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks solved",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks solved</p>\n\n",
      "PostDate": "2017-06-25T00:14:34.883742Z",
      "LastEditDate": "2017-06-25T01:13:48.8227042Z",
      "link": null
    }
  ]
}
