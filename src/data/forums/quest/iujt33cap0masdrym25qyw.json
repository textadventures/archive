{
  "Topic": {
    "TopicId": "iujt33cap0masdrym25qyw",
    "ForumId": "10",
    "Title": "Different objects in a container raising different flags",
    "LastUpdated": "2016-07-23T14:45:32.2150467Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "30b784e4-3d39-4c13-8e81-0c0c88a78cc0",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've spilled a can of beans here and I'm not sure how to clean it up...\r\n\r\nIf you helped with a previous post, forgive this brief summation:\r\n\r\nI have a metal barrel container.  For the barrel to be useful, I need the proper objects placed in this container.  They are:\r\n**moss2, planks2, and glass crescent**.  (the final object can only be placed in/on the container at the very end so I'm not concerned with that.  The player can however place **moss1 and planks1** in the container as well.\r\n\r\nHere are the container possibilities and corresponding flags on the metal barrel:\r\n1.  moss2, planks2(ready)\r\n2.  moss1, planks2 (lacksdrymoss)\r\n3.  moss2, planks1 (lacksoil)\r\n4.  moss1, planks1 (farfromready)\r\n5.  Any combination other than mentioned above - one of the three are lacking = no flag set.\r\n\r\nGOAL 1:  I think the best way to do this is to only allow the glass crescent to be added to the metal barrel IF some version of moss and planks are already in the metal barrel.  \r\n\r\nSo, 1st question... Is the easiest way to achieve goal 1 to place an 'If' statement in the 'put glass crescent in barrel' command to check and see if the barrel contains two items (know that it is set up so that ONLY moss1, moss2, planks1, and planks2 can be placed in the barrel)?\r\n\r\n2nd question:  What is the easiest way to script checking if there are two items in the metal barrel?  I was thinking that in the 'put crescent in barrel' command, I use the AND option to check if metal barrel contains moss2 AND planks2 then ..., else if moss1 AND planks2, then ..., etc, Else then print message hinting to the player that the barrel is not ready for the glass crescent.\r\n\r\n3rd question:  I think I also need to constantly check the barrel contents to raise the appropriate flag, right?  Example, If two items are in the barrel, say moss1 and planks2, and the player decides to 'put crescent in barrel', nothing happens in the barrel because it is not ready (lacksdrymoss).  In this script, the player returns the crescent to their inventory, but upon doing so, there is a hint indicating that there is something not quite right about the moss.  The player should then know to remove moss and take some action on it.  So... where would I run this constant check on the barrel?  Do I put it in the game start up script?  If metal barrel contains moss2 AND planks2, then set flag ready?  Else If moss1 AND planks1 then set flag farfromready, etc?\r\n\r\nSorry for the long-winded explanation, but it drives me nutty when I realize after four hours of tinkering that there was a much easier way to do it!  Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>I've spilled a can of beans here and I'm not sure how to clean it up...</p>\n<p>If you helped with a previous post, forgive this brief summation:</p>\n<p>I have a metal barrel container.  For the barrel to be useful, I need the proper objects placed in this container.  They are:<br>\n<strong>moss2, planks2, and glass crescent</strong>.  (the final object can only be placed in/on the container at the very end so I'm not concerned with that.  The player can however place <strong>moss1 and planks1</strong> in the container as well.</p>\n<p>Here are the container possibilities and corresponding flags on the metal barrel:</p>\n<ol>\n<li>moss2, planks2(ready)</li>\n<li>moss1, planks2 (lacksdrymoss)</li>\n<li>moss2, planks1 (lacksoil)</li>\n<li>moss1, planks1 (farfromready)</li>\n<li>Any combination other than mentioned above - one of the three are lacking = no flag set.</li>\n</ol>\n<p>GOAL 1:  I think the best way to do this is to only allow the glass crescent to be added to the metal barrel IF some version of moss and planks are already in the metal barrel.</p>\n<p>So, 1st question... Is the easiest way to achieve goal 1 to place an 'If' statement in the 'put glass crescent in barrel' command to check and see if the barrel contains two items (know that it is set up so that ONLY moss1, moss2, planks1, and planks2 can be placed in the barrel)?</p>\n<p>2nd question:  What is the easiest way to script checking if there are two items in the metal barrel?  I was thinking that in the 'put crescent in barrel' command, I use the AND option to check if metal barrel contains moss2 AND planks2 then ..., else if moss1 AND planks2, then ..., etc, Else then print message hinting to the player that the barrel is not ready for the glass crescent.</p>\n<p>3rd question:  I think I also need to constantly check the barrel contents to raise the appropriate flag, right?  Example, If two items are in the barrel, say moss1 and planks2, and the player decides to 'put crescent in barrel', nothing happens in the barrel because it is not ready (lacksdrymoss).  In this script, the player returns the crescent to their inventory, but upon doing so, there is a hint indicating that there is something not quite right about the moss.  The player should then know to remove moss and take some action on it.  So... where would I run this constant check on the barrel?  Do I put it in the game start up script?  If metal barrel contains moss2 AND planks2, then set flag ready?  Else If moss1 AND planks1 then set flag farfromready, etc?</p>\n<p>Sorry for the long-winded explanation, but it drives me nutty when I realize after four hours of tinkering that there was a much easier way to do it!  Thanks!</p>\n\n",
      "PostDate": "2016-07-23T14:45:32.2150467Z",
      "LastEditDate": null
    },
    {
      "PostId": "db75e9bc-35c8-4fbf-990b-c3e23be9851a",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ea7c0eff71476cd165c31f2605b2f755?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm, are you sure you need flags? That would make sense if you need to check them at several places. If however the only place you need this for is when the user lights the moss up, you might as well only check the 'readyness' at that time.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm, are you sure you need flags? That would make sense if you need to check them at several places. If however the only place you need this for is when the user lights the moss up, you might as well only check the 'readyness' at that time.</p>\n\n",
      "PostDate": "2016-07-23T19:13:19.9589239Z",
      "LastEditDate": null
    },
    {
      "PostId": "c7be4a10-b389-4efb-aaab-e7127edf799c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here I go again, probably another fail post, but I like trying to help regardless (as well as it being more code practice for me), so if this post is of no use, wait for Pixie's, Jay's, and/or whoever else's, of course. Also, my method probably won't be as efficient as theirs, as I'm still learning to code better.\r\n\r\n------------------\r\n\r\npersonally, for me, you don't need any Booleans (or 'flags' as you call them), as they're unneccessary/extra Attributes. Your conditionals (if new_ingredient_object = or not = blah_object and if container_object contains  previous/old_ingredient_object/s, move new_ingredient_object into container_object), will handle it all for you, so you don't need any of Booleans stating the same thing/states (ie: moss1_and_moss2_are_contained_boolean_attribute = true). Though, for using the completed container with other scripts (aka: having your final/last glass cresent ingredient object inside of the container object), you can have a Boolean for this if you want, ie: completed_container_object_boolean = true.\r\n\r\n---------------------\r\n\r\nthe code can probably be made more efficient with how it's logically ordered... and/or you could also use Lists too, but there were only 5 ingredient/mixing objects, so don't really need lists (not sure if using/checking lists would be more efficient than just the checking of the 'Contains' of the 5 various mixing ingredient/item Objects that I did in the code below, meh)\r\n\r\n-------------------\r\n\r\nlastly, I did NOT handle for the use of clones... as it would take a bit more code work to add in the needed scripting for the handling of the clones (checking of/for their names via 'StartsWith (CLONE) = OBJECTS_NAME') and etc whatever other possibly needed scripting.\r\n\r\n--------------------\r\n\r\nHK edit:\r\n\r\noptionally, if you want/need, I forgot to put in what would be an initial check of the 'mixing_completed_boolean_attribute' (flag/indicator use of in this case, a) Boolean Attribute, to prevent you from being able to do the mixing again after you've completed the mixing... maybe you want this or maybe you don't. Let me know if you want to prevent from being able to do the mixing again after completion of the mixing.\r\n\r\n--------------------\r\n\r\n```\r\n<object name=\"barrel_1\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"string\">metal barrel</attr>\r\n  <attr name=\"mixing_completed_boolean_attribute\" type=\"boolean\">false</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take;mix</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop;mix</attr>\r\n  <attr name=\"mix\" type=\"script\">\r\n    barrel_1_mixing_function\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"moss_1\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"object\">wet moss</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop</attr>\r\n</object>\r\n\r\n<object name=\"moss_2\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"string\">dry moss</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop</attr>\r\n</object>\r\n\r\n<object name=\"planks_1\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"string\">xxx</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop</attr>\r\n</object>\r\n\r\n<object name=\"planks_2\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"string\">soil</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop</attr>\r\n</object>\r\n\r\n<object name=\"cresent_1\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n  <attr name=\"alias\" type=\"string\">glass cresent</attr>\r\n  <attr name=\"take\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <take />\r\n  <attr name=\"drop\" type=\"boolean\">true</attr> // quest shortens this (to the left) syntax to: <drop />\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">look;take</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">look;drop</attr>\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n</object>\r\n\r\n<object name=\"room_1\">\r\n  <attr name=\"alias\" type=\"string\">room</attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>mix</property>\r\n  <pattern>mix</property>\r\n  <defaultexpression>You can't mix that!</defaultexpression>\r\n</verb>\r\n\r\n<function name=\"barrel_1_mixing_function\">\r\n  if (Contains (barrel_1, null)) {\r\n    if (Contains (player, moss_1)) {\r\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\r\n    } else if (Contains (player, planks_1)) {\r\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\r\n    } else if (Contains (player, moss_1) and Contains (player, planks_1)) {\r\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\r\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\r\n    } else if (Contains (player, moss_2) or Contains (player, planks_2)) {\r\n      msg (\"Sorry, but you first need to add the 'dry moss (moss_1)' and 'xxx (planks_1)' into the 'barrel_1', before you can add the 'wet moss (moss_2)' or 'soil (planks_2)' into the 'barrel_1'.\")\r\n    } else if (Contains (player, cresent_1)) {\r\n      msg (\"Sorry, but you first need to add the 'wet moss (moss_2)' and 'soil (planks_2)' into the 'barrel_1', before you can add the 'glass cresent (cresent_1)' into the 'barrel_1'.\")\r\n    } else {\r\n      msg (\"You can only initially mix 'dry moss (moss_1)' and 'xxx (planks_1)' into the 'barrel_1'.\")\r\n    }\r\n  } else if (not Contains (barrel_1, moss_1)) {\r\n    if (Contains (player, moss_1)) {\r\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\r\n    } else {\r\n      msg (\"You need to mix 'dry moss (moss_1)' into the 'barrel_1' before you can mix the next set of ingredients, 'wet moss (moss_2)' and 'soil (planks_2)', into the 'barrel_1'.\")\r\n    }\r\n  } else if (not Contains (barrel_1, planks_1)) {\r\n    if (Contains (player, planks_1)) {\r\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\r\n    } else {\r\n      msg (\"You need to mix 'xxx (planks_1)' into the 'barrel_1' before you can mix the next set of ingredients, 'wet moss (moss_2)' and 'soil (planks_2)', into the 'barrel_1'.\")\r\n    }\r\n  } else if (Contains (barrel_1, moss_1) and Contains (barrel_1, planks_1)) { // actually, this code line can just be an 'else', you don't need the 'if' contional part of it, so it could just be this: } else {\r\n    if (not Contains (barrel_1, moss_2)) {\r\n      if (Contains (player, moss_2)) {\r\n        moss_2.parent = barrel_1 // or if you like better: MoveObject (moss_2, barrel_1)\r\n      } else {\r\n        msg (\"You need to mix the 'wet moss (moss_2)' into the 'barrel_1' before you can mix the last ingredient stage, 'glass cresent (cresent_1)', into the 'barrel_1'.\")\r\n      }\r\n    } else if (not Contains (barrel_1, planks_2)) {\r\n      if (Contains (player, planks_2)) {\r\n        planks_2.parent = barrel_1 // or if you like better: MoveObject (planks_2, barrel_1)\r\n      } else {\r\n        msg (\"You need to mix the 'soil (planks_2)' into the 'barrel_1' before you can mix the last ingredient stage, 'glass cresent (cresent_1)', into the 'barrel_1'.\")\r\n      }\r\n    } else if (Contains (barrel_1, moss_2) and Contains (barrel, planks2)) { // actually, this code line can just be an 'else', you don't need the 'if' contional part of it, so it could just be this: } else {\r\n      if (Contains (player, cresent_1)) {\r\n        cresent_1.parent = barrel_1 // or if you like better: MoveObject (cresent_1, barrel_1)\r\n        barrel.mixing_completed_boolean_attribute = true\r\n        msg (\"You've completed the mixing process for the 'barrel_1'.\")\r\n      } else {\r\n        msg (\"You're missing the last mixing ingredient, 'glass cresent (cresent_1)', needed for the last stage of the mixing process with the using of the 'barrel_1'.\")\r\n      }\r\n    }\r\n  }\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here I go again, probably another fail post, but I like trying to help regardless (as well as it being more code practice for me), so if this post is of no use, wait for Pixie's, Jay's, and/or whoever else's, of course. Also, my method probably won't be as efficient as theirs, as I'm still learning to code better.</p>\n<hr>\n<p>personally, for me, you don't need any Booleans (or 'flags' as you call them), as they're unneccessary/extra Attributes. Your conditionals (if new_ingredient_object = or not = blah_object and if container_object contains  previous/old_ingredient_object/s, move new_ingredient_object into container_object), will handle it all for you, so you don't need any of Booleans stating the same thing/states (ie: moss1_and_moss2_are_contained_boolean_attribute = true). Though, for using the completed container with other scripts (aka: having your final/last glass cresent ingredient object inside of the container object), you can have a Boolean for this if you want, ie: completed_container_object_boolean = true.</p>\n<hr>\n<p>the code can probably be made more efficient with how it's logically ordered... and/or you could also use Lists too, but there were only 5 ingredient/mixing objects, so don't really need lists (not sure if using/checking lists would be more efficient than just the checking of the 'Contains' of the 5 various mixing ingredient/item Objects that I did in the code below, meh)</p>\n<hr>\n<p>lastly, I did NOT handle for the use of clones... as it would take a bit more code work to add in the needed scripting for the handling of the clones (checking of/for their names via 'StartsWith (CLONE) = OBJECTS_NAME') and etc whatever other possibly needed scripting.</p>\n<hr>\n<p>HK edit:</p>\n<p>optionally, if you want/need, I forgot to put in what would be an initial check of the 'mixing_completed_boolean_attribute' (flag/indicator use of in this case, a) Boolean Attribute, to prevent you from being able to do the mixing again after you've completed the mixing... maybe you want this or maybe you don't. Let me know if you want to prevent from being able to do the mixing again after completion of the mixing.</p>\n<hr>\n<pre><code>&lt;object name=\"barrel_1\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;metal barrel&lt;/attr&gt;\n  &lt;attr name=\"mixing_completed_boolean_attribute\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take;mix&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop;mix&lt;/attr&gt;\n  &lt;attr name=\"mix\" type=\"script\"&gt;\n    barrel_1_mixing_function\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"moss_1\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"object\"&gt;wet moss&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"moss_2\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;dry moss&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"planks_1\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;xxx&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"planks_2\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;soil&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"cresent_1\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;glass cresent&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;take /&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt; // quest shortens this (to the left) syntax to: &lt;drop /&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;look;take&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;look;drop&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room_1\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;mix&lt;/property&gt;\n  &lt;pattern&gt;mix&lt;/property&gt;\n  &lt;defaultexpression&gt;You can't mix that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;function name=\"barrel_1_mixing_function\"&gt;\n  if (Contains (barrel_1, null)) {\n    if (Contains (player, moss_1)) {\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\n    } else if (Contains (player, planks_1)) {\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\n    } else if (Contains (player, moss_1) and Contains (player, planks_1)) {\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\n    } else if (Contains (player, moss_2) or Contains (player, planks_2)) {\n      msg (\"Sorry, but you first need to add the 'dry moss (moss_1)' and 'xxx (planks_1)' into the 'barrel_1', before you can add the 'wet moss (moss_2)' or 'soil (planks_2)' into the 'barrel_1'.\")\n    } else if (Contains (player, cresent_1)) {\n      msg (\"Sorry, but you first need to add the 'wet moss (moss_2)' and 'soil (planks_2)' into the 'barrel_1', before you can add the 'glass cresent (cresent_1)' into the 'barrel_1'.\")\n    } else {\n      msg (\"You can only initially mix 'dry moss (moss_1)' and 'xxx (planks_1)' into the 'barrel_1'.\")\n    }\n  } else if (not Contains (barrel_1, moss_1)) {\n    if (Contains (player, moss_1)) {\n      moss_1.parent = barrel_1 // or if you like better: MoveObject (moss_1, barrel_1)\n    } else {\n      msg (\"You need to mix 'dry moss (moss_1)' into the 'barrel_1' before you can mix the next set of ingredients, 'wet moss (moss_2)' and 'soil (planks_2)', into the 'barrel_1'.\")\n    }\n  } else if (not Contains (barrel_1, planks_1)) {\n    if (Contains (player, planks_1)) {\n      planks_1.parent = barrel_1 // or if you like better: MoveObject (planks_1, barrel_1)\n    } else {\n      msg (\"You need to mix 'xxx (planks_1)' into the 'barrel_1' before you can mix the next set of ingredients, 'wet moss (moss_2)' and 'soil (planks_2)', into the 'barrel_1'.\")\n    }\n  } else if (Contains (barrel_1, moss_1) and Contains (barrel_1, planks_1)) { // actually, this code line can just be an 'else', you don't need the 'if' contional part of it, so it could just be this: } else {\n    if (not Contains (barrel_1, moss_2)) {\n      if (Contains (player, moss_2)) {\n        moss_2.parent = barrel_1 // or if you like better: MoveObject (moss_2, barrel_1)\n      } else {\n        msg (\"You need to mix the 'wet moss (moss_2)' into the 'barrel_1' before you can mix the last ingredient stage, 'glass cresent (cresent_1)', into the 'barrel_1'.\")\n      }\n    } else if (not Contains (barrel_1, planks_2)) {\n      if (Contains (player, planks_2)) {\n        planks_2.parent = barrel_1 // or if you like better: MoveObject (planks_2, barrel_1)\n      } else {\n        msg (\"You need to mix the 'soil (planks_2)' into the 'barrel_1' before you can mix the last ingredient stage, 'glass cresent (cresent_1)', into the 'barrel_1'.\")\n      }\n    } else if (Contains (barrel_1, moss_2) and Contains (barrel, planks2)) { // actually, this code line can just be an 'else', you don't need the 'if' contional part of it, so it could just be this: } else {\n      if (Contains (player, cresent_1)) {\n        cresent_1.parent = barrel_1 // or if you like better: MoveObject (cresent_1, barrel_1)\n        barrel.mixing_completed_boolean_attribute = true\n        msg (\"You've completed the mixing process for the 'barrel_1'.\")\n      } else {\n        msg (\"You're missing the last mixing ingredient, 'glass cresent (cresent_1)', needed for the last stage of the mixing process with the using of the 'barrel_1'.\")\n      }\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-23T19:19:10.4936603Z",
      "LastEditDate": "2016-07-23T20:14:48.5653307Z"
    },
    {
      "PostId": "2b718da3-c9f7-42a6-83f4-606196b893e7",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, I think I need flags.  The puzzle solution essentially is:\r\n<details> You must dry moss1 on a hot rock up on a cliff.\r\nuse oil from a plant on planks1 to help 'combust' the planks.\r\nThe dried moss (moss2) will ignite and catch the oiled planks (planks2) on fire so you can cook.\r\nMoss1 is too wet for kindling.  Moss2 makes perfect kindling.  planks1 won't burn unless covered in the oil.  planks2 will ignite readily once the glass is in with moss2.\r\n</details>\r\nSo, if the player hasn't done the proper things to ignite the fire, I want to offer hints when they try it and it doesn't go well.  That where the flags come in.  Does that make sense?\r\n\r\nThanks.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, I think I need flags.  The puzzle solution essentially is:</p>\n<details> You must dry moss1 on a hot rock up on a cliff.\nuse oil from a plant on planks1 to help 'combust' the planks.\nThe dried moss (moss2) will ignite and catch the oiled planks (planks2) on fire so you can cook.\nMoss1 is too wet for kindling.  Moss2 makes perfect kindling.  planks1 won't burn unless covered in the oil.  planks2 will ignite readily once the glass is in with moss2.\n</details>\nSo, if the player hasn't done the proper things to ignite the fire, I want to offer hints when they try it and it doesn't go well.  That where the flags come in.  Does that make sense?\n<p>Thanks.</p>\n\n",
      "PostDate": "2016-07-23T19:27:12.3351256Z",
      "LastEditDate": null
    },
    {
      "PostId": "26e6d0eb-558c-453d-891e-cd4035c1d4d2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, yes, that would be a good reason/use of (additional/sub) flags. You can add in those (additional/sub) flags (for the various combinations of what you currently have in my use of 'barrel_1') easily into my code.",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, yes, that would be a good reason/use of (additional/sub) flags. You can add in those (additional/sub) flags (for the various combinations of what you currently have in my use of 'barrel_1') easily into my code.</p>\n\n",
      "PostDate": "2016-07-23T19:31:40.5429648Z",
      "LastEditDate": "2016-07-23T19:37:57.1532204Z"
    },
    {
      "PostId": "cdfc90ea-a2fc-4511-b1f0-c712f808f7f0",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ea7c0eff71476cd165c31f2605b2f755?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I guess it's a matter of personal taste. You certainly need to compute if things are ready (and if not why not) at some point. You could do that computation always when something relevant changes and save the results in flags that you can use for finding out what hints to give. Or you could just do the computation on the fly when you need to know what hint (if any) to give. I'd prefer the on thy fly method, because I'd be worried to miss something in the 'when something relevant changes' part.\r\n\r\nhegemonkhan seems to have thoughts similar to mine. I haven't looked at his code in detail, but I think it is an example for the 'on the fly' method. \r\n\r\nBut again: it certainly can be done with flags too.",
      "EditableFormat": "markdown",
      "HTML": "<p>I guess it's a matter of personal taste. You certainly need to compute if things are ready (and if not why not) at some point. You could do that computation always when something relevant changes and save the results in flags that you can use for finding out what hints to give. Or you could just do the computation on the fly when you need to know what hint (if any) to give. I'd prefer the on thy fly method, because I'd be worried to miss something in the 'when something relevant changes' part.</p>\n<p>hegemonkhan seems to have thoughts similar to mine. I haven't looked at his code in detail, but I think it is an example for the 'on the fly' method.</p>\n<p>But again: it certainly can be done with flags too.</p>\n\n",
      "PostDate": "2016-07-23T19:38:46.3068653Z",
      "LastEditDate": null
    },
    {
      "PostId": "3d253eba-5993-4ccb-976e-903a1dbced34",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@bergedorfcacher:\r\n\r\nmy code allows for easily putting in the needed 'sub' (flags/indicators as in this case) Boolean Attributes, but it doesn't have them in the code now.\r\n\r\nmost of my code is just the handling of all the different conditions/combinations of the 'mixing' effect/Verb itself and/or the prompting of the user of what's going on with the mixing effect/Verb (why and/or if something succeeds and/or fails).\r\n\r\n-------\r\n\r\nP.S.\r\n\r\n@XanMag:\r\n\r\nI think I mixed (messed) up (lol, I'm using 'mixed' too much, haha. sorry bad pun usage) the 'moss_2' as 'wet moss (whereas I think you want it to be 'dry moss') and the 'moss_1' as 'dry moss' (whereas I think you want it to be 'wet moss'. Also, I've no idea what you're 'planks_1' is suppose to be, lol. I don't know botany/biology that well, so no idea what this 'plank' stuff is... (I know of a 'Planck's constant' and 'Plankton organisms ~ what baleen/most whales eat' --- can't spell, meh)",
      "EditableFormat": "markdown",
      "HTML": "<p>@bergedorfcacher:</p>\n<p>my code allows for easily putting in the needed 'sub' (flags/indicators as in this case) Boolean Attributes, but it doesn't have them in the code now.</p>\n<p>most of my code is just the handling of all the different conditions/combinations of the 'mixing' effect/Verb itself and/or the prompting of the user of what's going on with the mixing effect/Verb (why and/or if something succeeds and/or fails).</p>\n<hr>\n<p>P.S.</p>\n<p>@XanMag:</p>\n<p>I think I mixed (messed) up (lol, I'm using 'mixed' too much, haha. sorry bad pun usage) the 'moss_2' as 'wet moss (whereas I think you want it to be 'dry moss') and the 'moss_1' as 'dry moss' (whereas I think you want it to be 'wet moss'. Also, I've no idea what you're 'planks_1' is suppose to be, lol. I don't know botany/biology that well, so no idea what this 'plank' stuff is... (I know of a 'Planck's constant' and 'Plankton organisms ~ what baleen/most whales eat' --- can't spell, meh)</p>\n\n",
      "PostDate": "2016-07-23T19:54:51.2635101Z",
      "LastEditDate": "2016-07-23T20:06:38.3422234Z"
    },
    {
      "PostId": "cd602be0-838b-43ce-8329-6e4e43d57121",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ha. A plank is just like a 2x4.\r\n<details> 'planks1' is just a piece of wood.  'planks2' is the piece of wood covered in flammable plant oil.</details>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Ha. A plank is just like a 2x4.</p>\n<details> 'planks1' is just a piece of wood.  'planks2' is the piece of wood covered in flammable plant oil.</details>\n\n",
      "PostDate": "2016-07-23T20:22:22.3622772Z",
      "LastEditDate": null
    },
    {
      "PostId": "d7cefb1b-d93a-429e-985b-a5580ae648dd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oh... haha... a wooden plank / a plank of wood.... HK always over thinks stuff, laughs! HAHA... HK is an idiot... but hey, this was a funny mistake on my part, hehe. A plank of wood... LAUGHS. I was trying to think of what some specific meaning of 'plank' was, completely forgetting that there's its general usage, a 2x4 or whatever: NxM (rectangle), a plank/rectangle of (whatever), etc etc etc, lol.\r\n\r\n-----------\r\n\r\nP.S.\r\n\r\ndoes my code make sense XanMag? it's mainly just trying to account for all the different combination possibilities, and also prompting the user if needed about what's going on or not going on. You can adjust it as you want, it was just a sample example.\r\n\r\n(Also, I've probably got some errors and/or logic errors in my code... if you find any, let me know and I'll fix it up)",
      "EditableFormat": "markdown",
      "HTML": "<p>oh... haha... a wooden plank / a plank of wood.... HK always over thinks stuff, laughs! HAHA... HK is an idiot... but hey, this was a funny mistake on my part, hehe. A plank of wood... LAUGHS. I was trying to think of what some specific meaning of 'plank' was, completely forgetting that there's its general usage, a 2x4 or whatever: NxM (rectangle), a plank/rectangle of (whatever), etc etc etc, lol.</p>\n<hr>\n<p>P.S.</p>\n<p>does my code make sense XanMag? it's mainly just trying to account for all the different combination possibilities, and also prompting the user if needed about what's going on or not going on. You can adjust it as you want, it was just a sample example.</p>\n<p>(Also, I've probably got some errors and/or logic errors in my code... if you find any, let me know and I'll fix it up)</p>\n\n",
      "PostDate": "2016-07-23T20:41:33.942432Z",
      "LastEditDate": "2016-07-23T20:50:13.7480272Z"
    },
    {
      "PostId": "f4718ca0-6cbd-49bf-94f7-5fb5a3511004",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep.  I'll mess with it when I get home.  Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep.  I'll mess with it when I get home.  Thanks!</p>\n\n",
      "PostDate": "2016-07-23T21:12:38.7637948Z",
      "LastEditDate": null
    },
    {
      "PostId": "bde76bda-eb8e-430f-82e1-44849a76572d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "noticed a typo mistake in my code (in case you're using parts of it, aka copy+pasting, into your code):\r\n\r\non my last 'else if' line, the second 'barrel' is missing the '_1' on it. But, this is only a typo error for my ( / my code's) own naming/labeling of stuff",
      "EditableFormat": "markdown",
      "HTML": "<p>noticed a typo mistake in my code (in case you're using parts of it, aka copy+pasting, into your code):</p>\n<p>on my last 'else if' line, the second 'barrel' is missing the '_1' on it. But, this is only a typo error for my ( / my code's) own naming/labeling of stuff</p>\n\n",
      "PostDate": "2016-07-24T09:16:31.6325294Z",
      "LastEditDate": null
    },
    {
      "PostId": "a1358f30-b8a9-4d90-8209-421cafd26923",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">So, 1st question... Is the easiest way to achieve goal 1 to place an 'If' statement in the 'put glass crescent in barrel' command to check and see if the barrel contains two items (know that it is set up so that ONLY moss1, moss2, planks1, and planks2 can be placed in the barrel)?\r\n\r\nYes.\r\n\r\n>2nd question: What is the easiest way to script checking if there are two items in the metal barrel? I was thinking that in the 'put crescent in barrel' command, I use the AND option to check if metal barrel contains moss2 AND planks2 then ..., else if moss1 AND planks2, then ..., etc, Else then print message hinting to the player that the barrel is not ready for the glass crescent.\r\n\r\nI am with bergerdorfcacher, that you do not need flags. Check the parent attributes to see if something is present, something like this:\r\n```\r\nif (moss2.parent = barrel and planks2.parent = barrel) {\r\n  msg(\"That works fine.\")\r\n}\r\nelse if (moss1.parent = barrel and (planks2.parent = barrel or planks1.parent = barrel)) {\r\n  msg(\"The moss is too damp.\")\r\n}\r\nelse if (moss2.parent = barrel and planks1.parent = barrel) {\r\n  msg(\"There's no soil.\")\r\n}\r\nelse {\r\n  msg(\"That does not do anything.\")\r\n}\r\n```\r\n>3rd question: I think I also need to constantly check the barrel contents to raise the appropriate flag, right? Example, If two items are in the barrel, say moss1 and planks2, and the player decides to 'put crescent in barrel', nothing happens in the barrel because it is not ready (lacksdrymoss). In this script, the player returns the crescent to their inventory, but upon doing so, there is a hint indicating that there is something not quite right about the moss. The player should then know to remove moss and take some action on it. So... where would I run this constant check on the barrel? Do I put it in the game start up script? If metal barrel contains moss2 AND planks2, then set flag ready? Else If moss1 AND planks1 then set flag farfromready, etc?\r\n\r\nI see no reason to do this. Quest is already tracking what is in the barrel. he only time the player needs a message is when she tries to put the cresent in the barrel, which is covered above.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So, 1st question... Is the easiest way to achieve goal 1 to place an 'If' statement in the 'put glass crescent in barrel' command to check and see if the barrel contains two items (know that it is set up so that ONLY moss1, moss2, planks1, and planks2 can be placed in the barrel)?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>2nd question: What is the easiest way to script checking if there are two items in the metal barrel? I was thinking that in the 'put crescent in barrel' command, I use the AND option to check if metal barrel contains moss2 AND planks2 then ..., else if moss1 AND planks2, then ..., etc, Else then print message hinting to the player that the barrel is not ready for the glass crescent.</p>\n</blockquote>\n<p>I am with bergerdorfcacher, that you do not need flags. Check the parent attributes to see if something is present, something like this:</p>\n<pre><code>if (moss2.parent = barrel and planks2.parent = barrel) {\n  msg(\"That works fine.\")\n}\nelse if (moss1.parent = barrel and (planks2.parent = barrel or planks1.parent = barrel)) {\n  msg(\"The moss is too damp.\")\n}\nelse if (moss2.parent = barrel and planks1.parent = barrel) {\n  msg(\"There's no soil.\")\n}\nelse {\n  msg(\"That does not do anything.\")\n}\n</code></pre>\n<blockquote>\n<p>3rd question: I think I also need to constantly check the barrel contents to raise the appropriate flag, right? Example, If two items are in the barrel, say moss1 and planks2, and the player decides to 'put crescent in barrel', nothing happens in the barrel because it is not ready (lacksdrymoss). In this script, the player returns the crescent to their inventory, but upon doing so, there is a hint indicating that there is something not quite right about the moss. The player should then know to remove moss and take some action on it. So... where would I run this constant check on the barrel? Do I put it in the game start up script? If metal barrel contains moss2 AND planks2, then set flag ready? Else If moss1 AND planks1 then set flag farfromready, etc?</p>\n</blockquote>\n<p>I see no reason to do this. Quest is already tracking what is in the barrel. he only time the player needs a message is when she tries to put the cresent in the barrel, which is covered above.</p>\n\n",
      "PostDate": "2016-07-24T13:20:18.0281346Z",
      "LastEditDate": null
    }
  ]
}
