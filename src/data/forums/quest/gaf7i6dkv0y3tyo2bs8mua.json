{
  "Topic": {
    "TopicId": "gaf7i6dkv0y3tyo2bs8mua",
    "ForumId": "10",
    "Title": "Random Generation? ",
    "LastUpdated": "2016-08-12T21:17:13.3538454Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e5849c0b-fde0-4d92-99d6-1ab813b11cb4",
      "UserId": 46352,
      "Username": "SnowyOxygen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello! I'm a bit too ambitious and I thought I'd have a go at some random generation, but I'm not entirely sure on how. Firstly does anyone know how to randomly pick a value out of a string list/dictionary? And secondly, does anyone know of any tutorials or good methods on making a generated world (or several)?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello! I'm a bit too ambitious and I thought I'd have a go at some random generation, but I'm not entirely sure on how. Firstly does anyone know how to randomly pick a value out of a string list/dictionary? And secondly, does anyone know of any tutorials or good methods on making a generated world (or several)?</p>\n\n",
      "PostDate": "2016-08-12T21:17:13.3538454Z",
      "LastEditDate": null
    },
    {
      "PostId": "c2fe15ca-5a18-4df3-b7ec-f5c3bed726f9",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Randomly picking stuff is covered in some functions on this page:\r\nhttp://textadventures.co.uk/forum/samples/topic/5614/some-useful-functions\r\n\r\nRandom stuff is covered here:\r\nhttp://textadventures.co.uk/forum/samples/topic/6263/generating-stuff\r\n\r\nGenerating rooms is pretty much the same (there is really no difference between a room and an object). Use \"create exit\" to generate the exits. The tricky bit is getting the rooms to relate to each other in a way that makes sense.\r\n\r\nHere it is in practice.\r\nhttp://textadventures.co.uk/games/view/em15b32xd0o-y-ysvgrtcg/deeper",
      "EditableFormat": "markdown",
      "HTML": "<p>Randomly picking stuff is covered in some functions on this page:<br>\nhttp://textadventures.co.uk/forum/samples/topic/5614/some-useful-functions</p>\n<p>Random stuff is covered here:<br>\nhttp://textadventures.co.uk/forum/samples/topic/6263/generating-stuff</p>\n<p>Generating rooms is pretty much the same (there is really no difference between a room and an object). Use \"create exit\" to generate the exits. The tricky bit is getting the rooms to relate to each other in a way that makes sense.</p>\n<p>Here it is in practice.<br>\nhttp://textadventures.co.uk/games/view/em15b32xd0o-y-ysvgrtcg/deeper</p>\n\n",
      "PostDate": "2016-08-12T23:57:25.4130036Z",
      "LastEditDate": null
    },
    {
      "PostId": "3741f81f-9c73-4544-9a16-e13fc4a5d05a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's 4 built-in Randomization Functions, which Pixie has shown are to implement them into doing the fancy stuff you're asking about already, but here are the 4 Randomization Functions:\r\n\r\n1. Dice Roll ( http://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html )\r\n\r\n2. GetRandomInt ( http://docs.textadventures.co.uk/quest/functions/getrandomint.html )\r\n3. GetRandomDouble ( http://docs.textadventures.co.uk/quest/functions/getrandomdouble.html)\r\n\r\n4. RandomChance ( http://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html )\r\n\r\nexamples:\r\n\r\n1. DiceRoll (\"1d6\") // a normal 6 sided single dice roll\r\n\r\n2. GetRandomInt (1,10) // it \"randomly\" selects a number from 1 to 10, I think inclusively for both min and max: aka, including 1 and 10\r\n\r\n3. GetRandomDouble () // it selects a value from 0 to 1, I'm not sure about this, as I've never used it lol, but I think it is exclusive: it won't pick '0.0' and not '1.0'\r\n\r\n4. RandomChance (50) // you got a 50% random chance of returning TRUE, so a 50% chance of doing your script(s) for TRUE (and thus a 50% of doing your FALSE script/s)\r\n\r\n```\r\nif (RandomChance (50)) {\r\n  msg (\"You rolled TRUE, and thus you see this message\")\r\n} else {\r\n  msg (\"You rolled FALSE, and thus you see this message\")\r\n}\r\n```\r\n\r\nRandomChance (20) // you got a 20% random chance of returning TRUE, so a 20% chance of doing your script(s) for TRUE (and thus a 80% of doing your FALSE script/s):\r\n\r\n```\r\nif (RandomChance (20)) {\r\n  msg (\"You rolled TRUE, and thus you see this message\")\r\n} else {\r\n  msg (\"You rolled FALSE, and thus you see this message\")\r\n}\r\n```\r\n\r\nRandomChance (80) // you got a 80% random chance of returning TRUE, so a 80% chance of doing your script(s) for TRUE (and thus a 20% of doing your FALSE script/s):\r\n\r\n```\r\nif (RandomChance (80)) {\r\n  msg (\"You rolled TRUE, and thus you see this message\")\r\n} else {\r\n  msg (\"You rolled FALSE, and thus you see this message\")\r\n}\r\n```\r\n\r\n---------------\r\n\r\nhere's an example of a syntax for using the 'GetRandomInt' Function using a String List Attribute (I can't remember if you can do with Dictionary Attributes or not):\r\n\r\n```\r\ngame.color_list = split (\"red;blue;yellow\", \";\")\r\n\r\n// if you don't know, Lists start at 0 for their indexing, so:\r\n// 0 index number: red\r\n// 1 index number: blue\r\n// 2 index number: yellow\r\n// 3 index number: ERROR! as there is no 4th color item in your list!\r\n\r\n// VARIABLE = StringListItem (LIST, INDEX_NUMBER)\r\ngame.selected_color = StringListItem (game.color_list, GetRandomInt (0, ListCount (game.color_list) - 1))\r\n```\r\n\r\n-------------\r\n\r\nand here's my guide on using lists/dictionaries, if you want to take a look at it, if you don't know how to use lists/dictionaries, and if Pixie's links don't already help with it:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\n\r\nand here's me using this stuff to do travel without Exits (be warned though, the code is old, when I was just learning this stuff, so it's not the best code, lol):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk\r\n\r\nask if you got any questions.",
      "EditableFormat": "markdown",
      "HTML": "<p>there's 4 built-in Randomization Functions, which Pixie has shown are to implement them into doing the fancy stuff you're asking about already, but here are the 4 Randomization Functions:</p>\n<ol>\n<li>\n<p>Dice Roll ( http://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html )</p>\n</li>\n<li>\n<p>GetRandomInt ( http://docs.textadventures.co.uk/quest/functions/getrandomint.html )</p>\n</li>\n<li>\n<p>GetRandomDouble ( http://docs.textadventures.co.uk/quest/functions/getrandomdouble.html)</p>\n</li>\n<li>\n<p>RandomChance ( http://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html )</p>\n</li>\n</ol>\n<p>examples:</p>\n<ol>\n<li>\n<p>DiceRoll (\"1d6\") // a normal 6 sided single dice roll</p>\n</li>\n<li>\n<p>GetRandomInt (1,10) // it \"randomly\" selects a number from 1 to 10, I think inclusively for both min and max: aka, including 1 and 10</p>\n</li>\n<li>\n<p>GetRandomDouble () // it selects a value from 0 to 1, I'm not sure about this, as I've never used it lol, but I think it is exclusive: it won't pick '0.0' and not '1.0'</p>\n</li>\n<li>\n<p>RandomChance (50) // you got a 50% random chance of returning TRUE, so a 50% chance of doing your script(s) for TRUE (and thus a 50% of doing your FALSE script/s)</p>\n</li>\n</ol>\n<pre><code>if (RandomChance (50)) {\n  msg (\"You rolled TRUE, and thus you see this message\")\n} else {\n  msg (\"You rolled FALSE, and thus you see this message\")\n}\n</code></pre>\n<p>RandomChance (20) // you got a 20% random chance of returning TRUE, so a 20% chance of doing your script(s) for TRUE (and thus a 80% of doing your FALSE script/s):</p>\n<pre><code>if (RandomChance (20)) {\n  msg (\"You rolled TRUE, and thus you see this message\")\n} else {\n  msg (\"You rolled FALSE, and thus you see this message\")\n}\n</code></pre>\n<p>RandomChance (80) // you got a 80% random chance of returning TRUE, so a 80% chance of doing your script(s) for TRUE (and thus a 20% of doing your FALSE script/s):</p>\n<pre><code>if (RandomChance (80)) {\n  msg (\"You rolled TRUE, and thus you see this message\")\n} else {\n  msg (\"You rolled FALSE, and thus you see this message\")\n}\n</code></pre>\n<hr>\n<p>here's an example of a syntax for using the 'GetRandomInt' Function using a String List Attribute (I can't remember if you can do with Dictionary Attributes or not):</p>\n<pre><code>game.color_list = split (\"red;blue;yellow\", \";\")\n\n// if you don't know, Lists start at 0 for their indexing, so:\n// 0 index number: red\n// 1 index number: blue\n// 2 index number: yellow\n// 3 index number: ERROR! as there is no 4th color item in your list!\n\n// VARIABLE = StringListItem (LIST, INDEX_NUMBER)\ngame.selected_color = StringListItem (game.color_list, GetRandomInt (0, ListCount (game.color_list) - 1))\n</code></pre>\n<hr>\n<p>and here's my guide on using lists/dictionaries, if you want to take a look at it, if you don't know how to use lists/dictionaries, and if Pixie's links don't already help with it:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n<p>and here's me using this stuff to do travel without Exits (be warned though, the code is old, when I was just learning this stuff, so it's not the best code, lol):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk</p>\n<p>ask if you got any questions.</p>\n\n",
      "PostDate": "2016-08-13T21:17:14.3929093Z",
      "LastEditDate": "2016-08-13T21:35:58.0049383Z"
    },
    {
      "PostId": "f8aab276-d3b2-4cfb-ab8a-7ebe2e34f7c4",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ The Pixie\r\nI was just looking at random rooms myself. Specifically, I want to set up random directions from one room to the next. After creating a new string list that borrowed from game.compassdirections (excluding the \"in\" and \"out\" directions), I was easily able to create a random exit direction from the first room to the second. The trouble is, \"create exit\" appears to be one-directional. I can exit the first room, but there is no exit out of the second room that returns to the first room. \r\n\r\nIs there an easy way to create and pair up exits in opposite directions between rooms? Or will I have to run several IF lines to determine the return exit as I create each random exit?",
      "EditableFormat": "markdown",
      "HTML": "<p>@ The Pixie<br>\nI was just looking at random rooms myself. Specifically, I want to set up random directions from one room to the next. After creating a new string list that borrowed from game.compassdirections (excluding the \"in\" and \"out\" directions), I was easily able to create a random exit direction from the first room to the second. The trouble is, \"create exit\" appears to be one-directional. I can exit the first room, but there is no exit out of the second room that returns to the first room.</p>\n<p>Is there an easy way to create and pair up exits in opposite directions between rooms? Or will I have to run several IF lines to determine the return exit as I create each random exit?</p>\n\n",
      "PostDate": "2016-08-15T20:25:57.2232538Z",
      "LastEditDate": null
    },
    {
      "PostId": "a3676b29-94c3-4fbe-b7e2-73daaf8d739a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You must know the two rooms to connect. If you want to go from room1 to room2,:\r\n```\r\ncreate exit(\"north\", room1, room2)\r\ncreate exit(\"south\",room2,room1)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You must know the two rooms to connect. If you want to go from room1 to room2,:</p>\n<pre><code>create exit(\"north\", room1, room2)\ncreate exit(\"south\",room2,room1)\n</code></pre>\n\n",
      "PostDate": "2016-08-15T21:29:44.9140067Z",
      "LastEditDate": null
    },
    {
      "PostId": "00e83fd1-3067-4505-8c4d-ce1e1e4febf1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "as Pixie is implying:\r\n\r\n1. you need to store/save the old location in a VARIABLE\r\n2. you need to store/save the old direction/built-in, aka 'north/south' Exit --- I don't understand Exit code/attributes/design very well, into a (another) VARIABLE\r\n\r\nso you can then use those 2 VARIABLEs for setting-up/creating the returning Exit to that old location\r\n\r\n-------\r\n\r\nto implement this, you actually need conceptually an 'old' and 'current' VARIABLE for each: your location and for your exit-direction, so you need 4 total VARIABLES. By having the 'old' and 'current' VARIABLES, enables you to transfer/preserve them, and thus the implementation will work correctly.\r\n\r\nfor a simple example:\r\n\r\nplayer.parent = room // you start in 'room'\r\n\r\nplayer.current_room = player.parent // room\r\nplayer.old_room = player.parent // room\r\n\r\nplayer.parent = room3 // you move to 'room3'\r\n\r\nplayer.old_room = player.current_room // room\r\nplayer.current_room = player.parent // room3\r\n\r\nif you want to go back to the old room (room):\r\n\r\nplayer.parent = player.old_room // room\r\n\r\nplayer.old_room = player.current_room // room3\r\nplayer.current_room = player.parent // room\r\n\r\nor, you go to 'room5' instead:\r\n\r\nplayer.parent = room5\r\n\r\nplayer.old_room = player.current_room // room3\r\nplayer.current_room = player.parent // room5\r\n\r\n-----\r\n\r\ndo you see how this 'transfering/preservation' is working by using two VARIABLES, the 'old' and 'current' concepts?",
      "EditableFormat": "markdown",
      "HTML": "<p>as Pixie is implying:</p>\n<ol>\n<li>you need to store/save the old location in a VARIABLE</li>\n<li>you need to store/save the old direction/built-in, aka 'north/south' Exit --- I don't understand Exit code/attributes/design very well, into a (another) VARIABLE</li>\n</ol>\n<p>so you can then use those 2 VARIABLEs for setting-up/creating the returning Exit to that old location</p>\n<hr>\n<p>to implement this, you actually need conceptually an 'old' and 'current' VARIABLE for each: your location and for your exit-direction, so you need 4 total VARIABLES. By having the 'old' and 'current' VARIABLES, enables you to transfer/preserve them, and thus the implementation will work correctly.</p>\n<p>for a simple example:</p>\n<p>player.parent = room // you start in 'room'</p>\n<p>player.current_room = player.parent // room<br>\nplayer.old_room = player.parent // room</p>\n<p>player.parent = room3 // you move to 'room3'</p>\n<p>player.old_room = player.current_room // room<br>\nplayer.current_room = player.parent // room3</p>\n<p>if you want to go back to the old room (room):</p>\n<p>player.parent = player.old_room // room</p>\n<p>player.old_room = player.current_room // room3<br>\nplayer.current_room = player.parent // room</p>\n<p>or, you go to 'room5' instead:</p>\n<p>player.parent = room5</p>\n<p>player.old_room = player.current_room // room3<br>\nplayer.current_room = player.parent // room5</p>\n<hr>\n<p>do you see how this 'transfering/preservation' is working by using two VARIABLES, the 'old' and 'current' concepts?</p>\n\n",
      "PostDate": "2016-08-15T22:08:26.9265459Z",
      "LastEditDate": "2016-08-15T22:28:21.877906Z"
    },
    {
      "PostId": "31371360-a294-4a45-bcc8-55016cbe0890",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I was thinking of having the game build random exits at startup, not replace old values with new.\r\n\r\nHere's what I had worked out for generating a random exit. Mind you, the code below is a test code in its infancy to be built upon. Its purpose was just to be a proof of concept. Once I had confirmed things were working correctly, I was going to have several rooms, each with random exits to the next (this was to be done by making an object list of the rooms involved and then using \"foreach\" on that object list in a startup script, applying a modified version of the below script as a function with each room as a parameter). \r\n\r\n```\r\npossible_directions = NewStringList ()\r\nforeach (direction, game.compassdirections) {\r\n  if (direction <> \"in\" and direction <> \"out\") {\r\n    list add (possible_directions, direction)\r\n  }\r\n}\r\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\r\nwhere = ListItem (possible_directions, rand)\r\ncreate exit (where, room, room1)\r\n```\r\n\r\nHere, I make a new string list and then add all of the directions found in the string list game.compassdirections except \"in\" and \"out\". It was necessary to foreach (direction, game.compassdirections) since the game wouldn't allow me to directly set possible_directions to game.compassdirections and then remove \"in\" and \"out\" from the list because the original list was a type.\r\n\r\nAs you can tell, I then got Quest to count the number of available exit directions, generate a random number, and then generate an exit based on the random value. I used ListCount() - 1 instead of the integer 9 so that I could keep my options open later.\r\n\r\nBut... there is that return exit thing. Obviously, I could create a string of IFs to build the return exit. For instance, \r\n\r\n```\r\nif (where = \"north\") {\r\n  create exit (\"south\", room1, room)\r\n}\r\n```\r\n\r\nI'm just wondering if there is a simpler way of coding a return exit without scripting out all ten directional possibilities. It's not a big deal if there isn't, but as long as I am learning to generate exits on the fly, I figured that I might as well as ask. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I was thinking of having the game build random exits at startup, not replace old values with new.</p>\n<p>Here's what I had worked out for generating a random exit. Mind you, the code below is a test code in its infancy to be built upon. Its purpose was just to be a proof of concept. Once I had confirmed things were working correctly, I was going to have several rooms, each with random exits to the next (this was to be done by making an object list of the rooms involved and then using \"foreach\" on that object list in a startup script, applying a modified version of the below script as a function with each room as a parameter).</p>\n<pre><code>possible_directions = NewStringList ()\nforeach (direction, game.compassdirections) {\n  if (direction &lt;&gt; \"in\" and direction &lt;&gt; \"out\") {\n    list add (possible_directions, direction)\n  }\n}\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\nwhere = ListItem (possible_directions, rand)\ncreate exit (where, room, room1)\n</code></pre>\n<p>Here, I make a new string list and then add all of the directions found in the string list game.compassdirections except \"in\" and \"out\". It was necessary to foreach (direction, game.compassdirections) since the game wouldn't allow me to directly set possible_directions to game.compassdirections and then remove \"in\" and \"out\" from the list because the original list was a type.</p>\n<p>As you can tell, I then got Quest to count the number of available exit directions, generate a random number, and then generate an exit based on the random value. I used ListCount() - 1 instead of the integer 9 so that I could keep my options open later.</p>\n<p>But... there is that return exit thing. Obviously, I could create a string of IFs to build the return exit. For instance,</p>\n<pre><code>if (where = \"north\") {\n  create exit (\"south\", room1, room)\n}\n</code></pre>\n<p>I'm just wondering if there is a simpler way of coding a return exit without scripting out all ten directional possibilities. It's not a big deal if there isn't, but as long as I am learning to generate exits on the fly, I figured that I might as well as ask.</p>\n\n",
      "PostDate": "2016-08-15T23:27:10.0047371Z",
      "LastEditDate": "2016-08-15T23:29:39.4776693Z"
    },
    {
      "PostId": "46d6a6be-995b-431b-b0a6-68e19dde45f8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "my example of using old-current rooms was just to convey the concept of dealing with specific/previous input data that needs to be used for specific cases, though indeed it is completely tangent to your scenario.\r\n\r\n---------------------\r\n\r\nthere might be better ways, and I'm not sure if this way is neccessarily better than 'ifs' (as there's not too many to deal with for your scenario), but here's a way:\r\n\r\nusing Dictionary Attributes, which are essentially conversions (input -> output) ( http://docs.textadventures.co.uk/quest/using_dictionaries.html )\r\n\r\n(credit to Pixie's spell library, for helping me understand dictionaries, via it dealing with opposing elemental types: fire vs water - air vs earth - etc etc etc, which is now within/apart-of his/her combat library, I think) --- this was/is hidden in the tabs/etc part of the tutorial, where you used to be able to see Pixie's code on using dictionaries for dealing with elemental types vs monster elemental (more damage, less damage, reflect/absorb damage, immune to damage, etc): \r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\r\nhttp://docs.textadventures.co.uk/quest/guides/using_types.html\r\nhttp://docs.textadventures.co.uk/quest/guides/simple_combat_system__advanced_.html\r\n\r\n```\r\nexit generation:\r\ncreate exit (where, A, B)\r\n\r\n// returning exit generation:\r\ncreate exit (StringDictionaryItem (data_object.direction_conversion_dictionary, where), B, A)\r\n\r\n// String Dictionary:\r\ndata_object.direction_conversion_dictionary = NewStringDictionary()\r\ndictionary add (data_object.direction_conversion_dictionary, \"north\", \"south\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"south\", \"north\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"west\", \"east\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"east\", \"west\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"northeast\", \"southwest\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"northwest\", \"southeast\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"southwest\", \"northeast\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"southeast\", \"northwest\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"in\", \"out\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"out\", \"in\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"up\", \"down\")\r\ndictionary add (data_object.direction_conversion_dictionary, \"down\", \"up\")\r\n\r\n// as 'creation' tag block, example:\r\n\r\n<object name=\"data_object\">\r\n  // I got lazy/tired on/with writing in the diagonal directions, using the abrevs for them.\r\n  <attr name=\"direction_conversion_dictionary\" type=\"simplestringdictionary\">north = south; south = north; west = east; east = west; up = down; down = up; in = out; out = in; nw = se; ne = sw; se = nw; sw = ne</attr>\r\n</object>\r\n\r\n// -----------------------------------------\r\n\r\n// so, if we create this exit:\r\n\r\ncreate exit (\"north\", A, B)\r\n\r\nthen in/for the returning exit's 'StringDictionaryItem', it takes 'north' and returns 'south', which is what we want for the returning exit:\r\n\r\n// peudocode:\r\ncreate exit ( {stringdictionaryitem (north) ---> returns: south } , B, A)\r\n\r\n// another example:\r\n\r\ncreate exit (\"south\", A, B)\r\n\r\n// returning exit, pseudocode:\r\ncreate exit ( {stringdictionaryitem (south) ---> returns: north } , B, A)\r\n\r\n// you can of course separate out the 'stringdictionary' function, if you prefer this format/convention/style:\r\n\r\n// returning exit:\r\nopposite_where_variable = StringDictionaryItem (data_object.direction_conversion_dictionary, where)\r\ncreate exit (opposite_where_variable, B, A)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>my example of using old-current rooms was just to convey the concept of dealing with specific/previous input data that needs to be used for specific cases, though indeed it is completely tangent to your scenario.</p>\n<hr>\n<p>there might be better ways, and I'm not sure if this way is neccessarily better than 'ifs' (as there's not too many to deal with for your scenario), but here's a way:</p>\n<p>using Dictionary Attributes, which are essentially conversions (input -&gt; output) ( http://docs.textadventures.co.uk/quest/using_dictionaries.html )</p>\n<p>(credit to Pixie's spell library, for helping me understand dictionaries, via it dealing with opposing elemental types: fire vs water - air vs earth - etc etc etc, which is now within/apart-of his/her combat library, I think) --- this was/is hidden in the tabs/etc part of the tutorial, where you used to be able to see Pixie's code on using dictionaries for dealing with elemental types vs monster elemental (more damage, less damage, reflect/absorb damage, immune to damage, etc):</p>\n<p>http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html<br>\nhttp://docs.textadventures.co.uk/quest/guides/using_types.html<br>\nhttp://docs.textadventures.co.uk/quest/guides/simple_combat_system__advanced_.html</p>\n<pre><code>exit generation:\ncreate exit (where, A, B)\n\n// returning exit generation:\ncreate exit (StringDictionaryItem (data_object.direction_conversion_dictionary, where), B, A)\n\n// String Dictionary:\ndata_object.direction_conversion_dictionary = NewStringDictionary()\ndictionary add (data_object.direction_conversion_dictionary, \"north\", \"south\")\ndictionary add (data_object.direction_conversion_dictionary, \"south\", \"north\")\ndictionary add (data_object.direction_conversion_dictionary, \"west\", \"east\")\ndictionary add (data_object.direction_conversion_dictionary, \"east\", \"west\")\ndictionary add (data_object.direction_conversion_dictionary, \"northeast\", \"southwest\")\ndictionary add (data_object.direction_conversion_dictionary, \"northwest\", \"southeast\")\ndictionary add (data_object.direction_conversion_dictionary, \"southwest\", \"northeast\")\ndictionary add (data_object.direction_conversion_dictionary, \"southeast\", \"northwest\")\ndictionary add (data_object.direction_conversion_dictionary, \"in\", \"out\")\ndictionary add (data_object.direction_conversion_dictionary, \"out\", \"in\")\ndictionary add (data_object.direction_conversion_dictionary, \"up\", \"down\")\ndictionary add (data_object.direction_conversion_dictionary, \"down\", \"up\")\n\n// as 'creation' tag block, example:\n\n&lt;object name=\"data_object\"&gt;\n  // I got lazy/tired on/with writing in the diagonal directions, using the abrevs for them.\n  &lt;attr name=\"direction_conversion_dictionary\" type=\"simplestringdictionary\"&gt;north = south; south = north; west = east; east = west; up = down; down = up; in = out; out = in; nw = se; ne = sw; se = nw; sw = ne&lt;/attr&gt;\n&lt;/object&gt;\n\n// -----------------------------------------\n\n// so, if we create this exit:\n\ncreate exit (\"north\", A, B)\n\nthen in/for the returning exit's 'StringDictionaryItem', it takes 'north' and returns 'south', which is what we want for the returning exit:\n\n// peudocode:\ncreate exit ( {stringdictionaryitem (north) ---&gt; returns: south } , B, A)\n\n// another example:\n\ncreate exit (\"south\", A, B)\n\n// returning exit, pseudocode:\ncreate exit ( {stringdictionaryitem (south) ---&gt; returns: north } , B, A)\n\n// you can of course separate out the 'stringdictionary' function, if you prefer this format/convention/style:\n\n// returning exit:\nopposite_where_variable = StringDictionaryItem (data_object.direction_conversion_dictionary, where)\ncreate exit (opposite_where_variable, B, A)\n</code></pre>\n\n",
      "PostDate": "2016-08-16T02:59:34.6127774Z",
      "LastEditDate": "2016-08-16T03:59:08.0488716Z"
    },
    {
      "PostId": "164f3fe7-7fcd-44e5-a227-6ef8393e324a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try this:\r\n```\r\npossible_directions = Split(\"north,south,east,west,up,down\", \",\")\r\nreverse_directions = Split(\"south,north,west,east,down,up\", \",\")\r\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\r\ncreate exit (StringListItem(possible_directions, rand), room, room1)\r\ncreate exit (StringListItem(reverse_directions, rand), room1, room)\r\n```\r\nI have kind of cheated by only doing six directions, but you can add more if you want. As I listed them, I can also list the reverse direction, and use thatto create the exit going the other way.\r\n\r\nSomething to think about is whether to check if there is already an exit that way from the other room. The would depend on how you are creating the map.",
      "EditableFormat": "markdown",
      "HTML": "<p>Try this:</p>\n<pre><code>possible_directions = Split(\"north,south,east,west,up,down\", \",\")\nreverse_directions = Split(\"south,north,west,east,down,up\", \",\")\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\ncreate exit (StringListItem(possible_directions, rand), room, room1)\ncreate exit (StringListItem(reverse_directions, rand), room1, room)\n</code></pre>\n<p>I have kind of cheated by only doing six directions, but you can add more if you want. As I listed them, I can also list the reverse direction, and use thatto create the exit going the other way.</p>\n<p>Something to think about is whether to check if there is already an exit that way from the other room. The would depend on how you are creating the map.</p>\n\n",
      "PostDate": "2016-08-16T06:49:52.5237837Z",
      "LastEditDate": null
    },
    {
      "PostId": "49670180-d700-41df-98d6-e107fee6cae5",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<B>@hegemonkhan</B> Using dictionaries is an interesting idea. I just recently started using them, but haven't found much of a use for them yet. I finally was able to understand them by realizing that the ask/tell feature is based on a dictionary. So I gave that a closer exmination. Even then, it took a while to understand. Unfortunately, due to the issues I faced with Pixie's most recent suggestion (mentioned below), I have a feeling that dictionaries are not the way to go either.\r\n\r\nI couldn't figure out what you were doing on the old/new values, but I can toggle values on my own. I have my own clothing library that I created that relies on doing just that, based on an idea in the clothing library that Pixie created. I even borrowed the attribute name original_alias into my library to make it work. One of these days I may even upload it, but it's a definite overkill for most games, even games that use clothes.\r\n\r\n<B>@ The Pixie</B>\r\nI was initially pulling from the attribute game.compassdirections purely for the sake of accuracy. But I loved your idea of a second string with opposite values then pulling the paired values. I gave it a go, and it turns out that using game.compassdirections was more important than I was aware. I edited my code to match your idea and using those string lists caused the exits to appear in the inventory! Additionally, the exits did not appear in the compass panel. Oh, the exits did actualy work, but everyhing was a mess. I then reverted back to using game.compassdirections. All was good again. \r\n\r\nSo I decided to go ahead and simply use a list of IFs. I first thought that the string list in game.compassdirections was all over the place. It is, in fact, cleverly arranged. The indexed sum of two cardinal directions is always 7 (see code below). That makes it easy to match up opposite exits!\r\n\r\nI did come up with a working solution for the key aspects of random exit generation. I made a simple \"game\" containing just the player object and eight empty rooms. The solution adds an exit from each room to the next, and the function is designed so that the script won't conflict with any pre-existing exits (if any).  But there are two problems:  \r\n\r\nOne, it's too random, LOL. I'll have to go back and give weights to the chances so that they aren't all equal, to make the passages feel more realistic.  I think I can figure that out on my own.\r\n\r\nTwo, with regard to these generated exits, Quest isn't accpeting NE, NW, SW, and SE as directional inputs from the keyboard for <u>this</u> game. N, S, E, and W work correctly. The compass panel, hyperlinks, and full text (eg. \"northeast\") also work perfectly, including for those four diagonal directions. It's just those four abbreviated directional commands that fail, and only from the keyboard. Is this a possible bug? I've also notitced that pre-programmed exits have an attribute named alt, but exits generated midgame do not have the attribute alt (I checked this using the debugger).\r\n\r\nAnyway, this is my current working, albeit too random solution:\r\n\r\n<B>Startup Script</B>\r\nI've preset a flag (\"room\") to all room objects in the game.\r\n```\r\nplaces = NewObjectList ()\r\nforeach (location, AllObjects()) {\r\n  if (GetBoolean(location, \"room\")) {\r\n    list add (places, location)\r\n  }\r\n}\r\nfor (iteration, 0, ListCount (places) - 2, 1) {\r\n  generate exit (ObjectListItem (places, iteration), ObjectListItem (places, iteration +1 ))\r\n}\r\n```\r\n\r\n<B>Function: </B> generate exit (alpha, beta) \r\nalpha = ObjectListItem (places, iteration) \r\nbeta = ObjectListItem (places, iteration +1 ) \r\n```\r\npossible_directions = NewStringList ()\r\nforeach (direction, game.compassdirections) {\r\n  if (direction <> \"in\" and direction <> \"out\") {\r\n    list add (possible_directions, direction)\r\n  }\r\n}\r\ncurrent_exits = ScopeExitsForRoom (alpha)\r\nforeach (portal, current_exits) {\r\n  if (ListContains (possible_directions, portal.alias)) {\r\n    list remove (possible_directions, portal.alias)\r\n  }\r\n}\r\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\r\nwhere = ListItem (possible_directions, rand)\r\nif (where = \"northwest\") {\r\n  create exit (StringListItem(game.compassdirections, 0), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 7), beta, alpha)\r\n}\r\nif (where = \"north\") {\r\n  create exit (StringListItem(game.compassdirections, 1), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 6), beta, alpha)\r\n}\r\nif (where = \"northeast\") {\r\n  create exit (StringListItem(game.compassdirections, 2), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 5), beta, alpha)\r\n}\r\nif (where = \"west\") {\r\n  create exit (StringListItem(game.compassdirections, 3), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 4), beta, alpha)\r\n}\r\nif (where = \"east\") {\r\n  create exit (StringListItem(game.compassdirections, 4), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 3), beta, alpha)\r\n}\r\nif (where = \"southwest\") {\r\n  create exit (StringListItem(game.compassdirections, 5), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 2), beta, alpha)\r\n}\r\nif (where = \"south\") {\r\n  create exit (StringListItem(game.compassdirections, 6), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 1), beta, alpha)\r\n}\r\nif (where = \"southeast\") {\r\n  create exit (StringListItem(game.compassdirections, 7), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 0), beta, alpha)\r\n}\r\nif (where = \"up\") {\r\n  create exit (StringListItem(game.compassdirections, 8), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 9), beta, alpha)\r\n}\r\nif (where = \"down\") {\r\n  create exit (StringListItem(game.compassdirections, 9), alpha, beta)\r\n  create exit (StringListItem(game.compassdirections, 8), beta, alpha)\r\n}\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p><b>@hegemonkhan</b> Using dictionaries is an interesting idea. I just recently started using them, but haven't found much of a use for them yet. I finally was able to understand them by realizing that the ask/tell feature is based on a dictionary. So I gave that a closer exmination. Even then, it took a while to understand. Unfortunately, due to the issues I faced with Pixie's most recent suggestion (mentioned below), I have a feeling that dictionaries are not the way to go either.</p>\n<p>I couldn't figure out what you were doing on the old/new values, but I can toggle values on my own. I have my own clothing library that I created that relies on doing just that, based on an idea in the clothing library that Pixie created. I even borrowed the attribute name original_alias into my library to make it work. One of these days I may even upload it, but it's a definite overkill for most games, even games that use clothes.</p>\n<p><b>@ The Pixie</b><br>\nI was initially pulling from the attribute game.compassdirections purely for the sake of accuracy. But I loved your idea of a second string with opposite values then pulling the paired values. I gave it a go, and it turns out that using game.compassdirections was more important than I was aware. I edited my code to match your idea and using those string lists caused the exits to appear in the inventory! Additionally, the exits did not appear in the compass panel. Oh, the exits did actualy work, but everyhing was a mess. I then reverted back to using game.compassdirections. All was good again.</p>\n<p>So I decided to go ahead and simply use a list of IFs. I first thought that the string list in game.compassdirections was all over the place. It is, in fact, cleverly arranged. The indexed sum of two cardinal directions is always 7 (see code below). That makes it easy to match up opposite exits!</p>\n<p>I did come up with a working solution for the key aspects of random exit generation. I made a simple \"game\" containing just the player object and eight empty rooms. The solution adds an exit from each room to the next, and the function is designed so that the script won't conflict with any pre-existing exits (if any).  But there are two problems:</p>\n<p>One, it's too random, LOL. I'll have to go back and give weights to the chances so that they aren't all equal, to make the passages feel more realistic.  I think I can figure that out on my own.</p>\n<p>Two, with regard to these generated exits, Quest isn't accpeting NE, NW, SW, and SE as directional inputs from the keyboard for <u>this</u> game. N, S, E, and W work correctly. The compass panel, hyperlinks, and full text (eg. \"northeast\") also work perfectly, including for those four diagonal directions. It's just those four abbreviated directional commands that fail, and only from the keyboard. Is this a possible bug? I've also notitced that pre-programmed exits have an attribute named alt, but exits generated midgame do not have the attribute alt (I checked this using the debugger).</p>\n<p>Anyway, this is my current working, albeit too random solution:</p>\n<p><b>Startup Script</b><br>\nI've preset a flag (\"room\") to all room objects in the game.</p>\n<pre><code>places = NewObjectList ()\nforeach (location, AllObjects()) {\n  if (GetBoolean(location, \"room\")) {\n    list add (places, location)\n  }\n}\nfor (iteration, 0, ListCount (places) - 2, 1) {\n  generate exit (ObjectListItem (places, iteration), ObjectListItem (places, iteration +1 ))\n}\n</code></pre>\n<p><b>Function: </b> generate exit (alpha, beta)<br>\nalpha = ObjectListItem (places, iteration)<br>\nbeta = ObjectListItem (places, iteration +1 )</p>\n<pre><code>possible_directions = NewStringList ()\nforeach (direction, game.compassdirections) {\n  if (direction &lt;&gt; \"in\" and direction &lt;&gt; \"out\") {\n    list add (possible_directions, direction)\n  }\n}\ncurrent_exits = ScopeExitsForRoom (alpha)\nforeach (portal, current_exits) {\n  if (ListContains (possible_directions, portal.alias)) {\n    list remove (possible_directions, portal.alias)\n  }\n}\nrand = GetRandomInt(0, ListCount (possible_directions) - 1)\nwhere = ListItem (possible_directions, rand)\nif (where = \"northwest\") {\n  create exit (StringListItem(game.compassdirections, 0), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 7), beta, alpha)\n}\nif (where = \"north\") {\n  create exit (StringListItem(game.compassdirections, 1), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 6), beta, alpha)\n}\nif (where = \"northeast\") {\n  create exit (StringListItem(game.compassdirections, 2), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 5), beta, alpha)\n}\nif (where = \"west\") {\n  create exit (StringListItem(game.compassdirections, 3), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 4), beta, alpha)\n}\nif (where = \"east\") {\n  create exit (StringListItem(game.compassdirections, 4), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 3), beta, alpha)\n}\nif (where = \"southwest\") {\n  create exit (StringListItem(game.compassdirections, 5), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 2), beta, alpha)\n}\nif (where = \"south\") {\n  create exit (StringListItem(game.compassdirections, 6), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 1), beta, alpha)\n}\nif (where = \"southeast\") {\n  create exit (StringListItem(game.compassdirections, 7), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 0), beta, alpha)\n}\nif (where = \"up\") {\n  create exit (StringListItem(game.compassdirections, 8), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 9), beta, alpha)\n}\nif (where = \"down\") {\n  create exit (StringListItem(game.compassdirections, 9), alpha, beta)\n  create exit (StringListItem(game.compassdirections, 8), beta, alpha)\n}\n</code></pre>\n\n",
      "PostDate": "2016-08-16T18:09:14.1247981Z",
      "LastEditDate": "2016-08-16T18:14:02.3348421Z"
    },
    {
      "PostId": "8150acff-bfaf-4b6a-a977-8826b3e2b142",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have had a look at what I actually did (should have done that first, sorry),  and this is the code I used:\r\n```\r\n      create exit (\"west_from_\" + name, null, room, room_west, \"westdirection\")\r\n      create exit (\"east_from_\" + name_west, null, room_west, room, \"eastdirection\")\r\n```\r\nThe \"westdirection\" is the _type_ of exit, and using that means you get all the aliases and alts set automatically, and so is a better way of setting it. This version of `create exit` requires a name for the exit which has to be unique. The second parameter is the alias, which can be null, as above. Then the rooms from and to. The type is a string, so you can do like this:\r\n```\r\nStringListItem(game.compassdirections, 7) + \"direction\"\r\n```\r\nThat said, I do not have any of the diagonal directions in my game.  My game creates a floor of rooms at a time. Each floor is a 7x7 grid, with rooms in some cells, but not all. Once rooms are placed, it goes through the grid and places exits in two rooms are adjacent 80% of the time, which means I am only placing exits to south and west\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have had a look at what I actually did (should have done that first, sorry),  and this is the code I used:</p>\n<pre><code>      create exit (\"west_from_\" + name, null, room, room_west, \"westdirection\")\n      create exit (\"east_from_\" + name_west, null, room_west, room, \"eastdirection\")\n</code></pre>\n<p>The \"westdirection\" is the <em>type</em> of exit, and using that means you get all the aliases and alts set automatically, and so is a better way of setting it. This version of <code>create exit</code> requires a name for the exit which has to be unique. The second parameter is the alias, which can be null, as above. Then the rooms from and to. The type is a string, so you can do like this:</p>\n<pre><code>StringListItem(game.compassdirections, 7) + \"direction\"\n</code></pre>\n<p>That said, I do not have any of the diagonal directions in my game.  My game creates a floor of rooms at a time. Each floor is a 7x7 grid, with rooms in some cells, but not all. Once rooms are placed, it goes through the grid and places exits in two rooms are adjacent 80% of the time, which means I am only placing exits to south and west</p>\n\n",
      "PostDate": "2016-08-17T07:23:15.4124727Z",
      "LastEditDate": null
    }
  ]
}
