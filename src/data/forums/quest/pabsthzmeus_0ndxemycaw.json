{
  "Topic": {
    "TopicId": "pabsthzmeus_0ndxemycaw",
    "ForumId": "10",
    "Title": "Serious confusion about Javascript in Question",
    "LastUpdated": "2018-10-27T20:19:39.4487439Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "dbc23f5d-35d4-40ed-b0c2-a6b10072d71e",
      "UserId": 383046,
      "Username": "Darkar",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello everyone, apologies for the wall of text.\r\n\r\nI've been messing around with Quest for a couple of weeks and I've accumulated a few questions about how the engine handles its internal Javascript. These questions led me down a bit of an interesting path.\r\n\r\n---\r\n\r\n**How does Quest handle Scope?**\r\nIt seems that functions and scripts created within Quest get a different runtime scope than functions linked with the ```JS```keyword. Outside functions do not have the same access to Quest-specific functions like ```OutputText```. Typically these sorts of scoping problems wouldn't be much of an issue except that,\r\n\r\n**Are functions not first-class citizens in Quest?**\r\nThis is the issue that has really given me frustration. It appears to be impossible to pass Quest engine functions as arguments or to inspect their behavior at runtime because at compile time anything other than a function call throws an error. When I realized that Quest even _had_ a 'compile time'; i.e., that it was taking the stuff I wrote inside the quest editor or in the .aslx and using that to build whatever code it ran when actually playing the game I began to wonder,\r\n\r\n**Is this even Javascript???**\r\nAt this point, I cloned the repo on Github and opened the project up in visual studio. Looking at the (frustratingly undocumented...) source I realized that Quest was, in fact, reading in line-by-line the 'code' written in the editor and breaking it up somehow. The Quest engine functions like ```OutputText``` were not even implemented in text as far as I could tell. The quest!Javascript compiler-thing seems to have no conception of functions itself, so I was unable to create functions inline at runtime (even with 'evals') or inspect and modify behavior at runtime with ```.__proto__```. Even stuff like ```JS.function``` seem to be implemented by _manually scanning for that specific keyword_ (see JSScript.cs).\r\n\r\n---\r\n\r\nI've just started with Quest and to be honest neither Javascript nor C# are my primary languages so it is entirely possible I've made a mistake here (and if so please correct me because I'd love to be wrong here), but if I haven't then I think it is a bit disingenuous for the developers of Quest to claim that it allows you to program in Javascript when in fact they have implemented their own language with only a tiny fraction of the power the real Javascript provides.\r\n\r\nI have ideas for game systems I'd like to be able to prototype quickly; Quest initially stood out to me as a great tool for my experimentation. It does 90% of what I need an engine to do for my prototypes and offers a nice, well-designed interface. Everything else I've found in the text adventure engine space seems too poorly featured to really provide much of a boost over implementing everything myself. But I really need the capability to link in my own code which makes heavy use of Javascript's Object-Oriented and Functional capabilities and as far as I can tell that is flatly impossible in Quest as it stands.\r\n\r\nAm I missing something obvious? Can anyone who works on the project or knows the codebase better point me in the direction I need to go?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello everyone, apologies for the wall of text.</p>\n<p>I've been messing around with Quest for a couple of weeks and I've accumulated a few questions about how the engine handles its internal Javascript. These questions led me down a bit of an interesting path.</p>\n<hr>\n<p><strong>How does Quest handle Scope?</strong><br>\nIt seems that functions and scripts created within Quest get a different runtime scope than functions linked with the <code>JS</code>keyword. Outside functions do not have the same access to Quest-specific functions like <code>OutputText</code>. Typically these sorts of scoping problems wouldn't be much of an issue except that,</p>\n<p><strong>Are functions not first-class citizens in Quest?</strong><br>\nThis is the issue that has really given me frustration. It appears to be impossible to pass Quest engine functions as arguments or to inspect their behavior at runtime because at compile time anything other than a function call throws an error. When I realized that Quest even <em>had</em> a 'compile time'; i.e., that it was taking the stuff I wrote inside the quest editor or in the .aslx and using that to build whatever code it ran when actually playing the game I began to wonder,</p>\n<p><strong>Is this even Javascript???</strong><br>\nAt this point, I cloned the repo on Github and opened the project up in visual studio. Looking at the (frustratingly undocumented...) source I realized that Quest was, in fact, reading in line-by-line the 'code' written in the editor and breaking it up somehow. The Quest engine functions like <code>OutputText</code> were not even implemented in text as far as I could tell. The quest!Javascript compiler-thing seems to have no conception of functions itself, so I was unable to create functions inline at runtime (even with 'evals') or inspect and modify behavior at runtime with <code>.__proto__</code>. Even stuff like <code>JS.function</code> seem to be implemented by <em>manually scanning for that specific keyword</em> (see JSScript.cs).</p>\n<hr>\n<p>I've just started with Quest and to be honest neither Javascript nor C# are my primary languages so it is entirely possible I've made a mistake here (and if so please correct me because I'd love to be wrong here), but if I haven't then I think it is a bit disingenuous for the developers of Quest to claim that it allows you to program in Javascript when in fact they have implemented their own language with only a tiny fraction of the power the real Javascript provides.</p>\n<p>I have ideas for game systems I'd like to be able to prototype quickly; Quest initially stood out to me as a great tool for my experimentation. It does 90% of what I need an engine to do for my prototypes and offers a nice, well-designed interface. Everything else I've found in the text adventure engine space seems too poorly featured to really provide much of a boost over implementing everything myself. But I really need the capability to link in my own code which makes heavy use of Javascript's Object-Oriented and Functional capabilities and as far as I can tell that is flatly impossible in Quest as it stands.</p>\n<p>Am I missing something obvious? Can anyone who works on the project or knows the codebase better point me in the direction I need to go?</p>\n\n",
      "PostDate": "2018-10-27T20:19:39.4487439Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "646622a9-d8ee-4c23-8f72-ca29161dbf76",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This would be a question for Xanmag, mrangel, or KV.\r\nWait a bit please.",
      "EditableFormat": "markdown",
      "HTML": "<p>This would be a question for Xanmag, mrangel, or KV.<br>\nWait a bit please.</p>\n\n",
      "PostDate": "2018-10-27T21:43:35.1747972Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6ba44f80-c84a-4fb3-8bb9-5132b1bd99d5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The OP seems to see the big picture.  The JS interaction is mainly for printing text and the display settings.  It's not quite the same as using HTML with JS.\r\n\r\n---\r\n> the developers of Quest to claim that it allows you to program in Javascript \r\n\r\nIt actually says:\r\n>> And you can go even further, by customising the user interface using HTML and Javascript, to get your game looking exactly how you want it.\r\n\r\nThere may be something referencing Javascript programming elsewhere, but this is the gist.  I can definitely see how the wording could mislead someone, though.\r\n\r\n---\r\nAs far as how Quest works with Javascript, perhaps someone else can elaborate.  (I only went so far down that rabbit hole.)",
      "EditableFormat": "markdown",
      "HTML": "<p>The OP seems to see the big picture.  The JS interaction is mainly for printing text and the display settings.  It's not quite the same as using HTML with JS.</p>\n<hr>\n<blockquote>\n<p>the developers of Quest to claim that it allows you to program in Javascript</p>\n</blockquote>\n<p>It actually says:</p>\n<blockquote>\n<blockquote>\n<p>And you can go even further, by customising the user interface using HTML and Javascript, to get your game looking exactly how you want it.</p>\n</blockquote>\n</blockquote>\n<p>There may be something referencing Javascript programming elsewhere, but this is the gist.  I can definitely see how the wording could mislead someone, though.</p>\n<hr>\n<p>As far as how Quest works with Javascript, perhaps someone else can elaborate.  (I only went so far down that rabbit hole.)</p>\n\n",
      "PostDate": "2018-10-27T22:20:42.3347816Z",
      "LastEditDate": "2018-10-27T22:23:57.7266875Z",
      "link": null
    },
    {
      "PostId": "a25bec27-2b67-4331-956d-8e3ba8f86007",
      "UserId": 383046,
      "Username": "Darkar",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">There may be something referencing Javascript programming elsewhere, but this is the gist. I can definitely see how the wording could mislead someone, though.\r\n\r\nAhh, okay, I see now. The in-editor scripts are just referred to as 'scripts', not 'Javascript' and Javascript is only referred to in the custom interface sections.\r\n\r\nAlso, it occurred to me after I posted this that it is probably a security feature since Quest hosts a lot of user-generated content and allowing people to upload content that runs arbitrary JS on other people's browsers would be Very Bad.\r\n\r\nI'm not sure how many others fall into the overlap between 'knowing enough programming to want the full features of a modern programming language instead of a very simple scripting system' and 'not reading the tutorials carefully enough to realize they never actually specify what language they're using' but it might be wise to put an aside for technically minded people somewhere near the start of the tutorials that they will likely be disappointed if they're expecting to do serious programming within Quest.\r\n\r\nThank you for pointing that out.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>There may be something referencing Javascript programming elsewhere, but this is the gist. I can definitely see how the wording could mislead someone, though.</p>\n</blockquote>\n<p>Ahh, okay, I see now. The in-editor scripts are just referred to as 'scripts', not 'Javascript' and Javascript is only referred to in the custom interface sections.</p>\n<p>Also, it occurred to me after I posted this that it is probably a security feature since Quest hosts a lot of user-generated content and allowing people to upload content that runs arbitrary JS on other people's browsers would be Very Bad.</p>\n<p>I'm not sure how many others fall into the overlap between 'knowing enough programming to want the full features of a modern programming language instead of a very simple scripting system' and 'not reading the tutorials carefully enough to realize they never actually specify what language they're using' but it might be wise to put an aside for technically minded people somewhere near the start of the tutorials that they will likely be disappointed if they're expecting to do serious programming within Quest.</p>\n<p>Thank you for pointing that out.</p>\n\n",
      "PostDate": "2018-10-27T23:16:58.2268137Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ec494b05-bfdb-46d0-9265-b4148bbef990",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest is built up of a weird mixture of C++, HTML, and JavaScript. You can technically do anything you want. I don't know how it works. I suppose anyone with knowledge of the 3 languages could reverse engineer Quest quite easily, it's just a small program built in Visual Studio, it's just it would take a very, very long time to figure out.",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest is built up of a weird mixture of C++, HTML, and JavaScript. You can technically do anything you want. I don't know how it works. I suppose anyone with knowledge of the 3 languages could reverse engineer Quest quite easily, it's just a small program built in Visual Studio, it's just it would take a very, very long time to figure out.</p>\n\n",
      "PostDate": "2018-10-28T02:16:31.9763726Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6da04e43-5845-451e-9a2e-cd54feb649b1",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As KV said, JavaScript is just for the user interface. The game itself is all done in ASLX, running on a C#/BASIC framework. You can modify the built in ASLX however you want on the desktop version, which should allow you to have your own world model or build your own parser.\r\n\r\nASLX does support objects (as \"types\"), with inheritance, but I would not describe is as fully object-orientated (Personally I would not say JS is either!).\r\n\r\nAnd I agree about the lack of documentation of the source code!\r\n\r\n> Also, it occurred to me after I posted this that it is probably a security feature since Quest hosts a lot of user-generated content and allowing people to upload content that runs arbitrary JS on other people's browsers would be Very Bad.\r\n\r\nBrowsers _do_ allow you to run arbitrary JS in people's browsers. Hopefully JS/browsers are designed to stop the bad stuff happening.",
      "EditableFormat": "markdown",
      "HTML": "<p>As KV said, JavaScript is just for the user interface. The game itself is all done in ASLX, running on a C#/BASIC framework. You can modify the built in ASLX however you want on the desktop version, which should allow you to have your own world model or build your own parser.</p>\n<p>ASLX does support objects (as \"types\"), with inheritance, but I would not describe is as fully object-orientated (Personally I would not say JS is either!).</p>\n<p>And I agree about the lack of documentation of the source code!</p>\n<blockquote>\n<p>Also, it occurred to me after I posted this that it is probably a security feature since Quest hosts a lot of user-generated content and allowing people to upload content that runs arbitrary JS on other people's browsers would be Very Bad.</p>\n</blockquote>\n<p>Browsers <em>do</em> allow you to run arbitrary JS in people's browsers. Hopefully JS/browsers are designed to stop the bad stuff happening.</p>\n\n",
      "PostDate": "2018-10-28T10:34:13.356918Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "df03fb33-df6c-425f-8c0c-3e0f2ceaa730",
      "UserId": 383046,
      "Username": "Darkar",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the feedback, also\r\n>Browsers do allow you to run arbitrary JS in people's browsers. Hopefully JS/browsers are designed to stop the bad stuff happening.\r\n\r\nIf I put up code that does something bad (like run cryptomining or launching a XSS attack) then it is linked to my site and potentially (depending on the registrar and how sneaky I'm being) my name. But if I can upload my bad code to your site and get _you_ to host it for me (and I've taken reasonable steps to anonymize my account) then anyone who interacts with that page gets the bad script and you take the blame while I take the mined bitcoins or stolen login details. So whether it was intentional or not, it was smart to not allow users to put arbitrary Javascript in their games.\r\n\r\nJavascript isn't the leaky bug bucket that Flash was and browser security _has_ gotten a lot better but [lots of websites out there](https://www.zdnet.com/article/bank-sites-and-web-apps-are-most-vulnerable-to-hackers/) are still vulnerable to XSS. Might be worth checking into the JS for UI stuff to see if it's possible to run a crypto script or something in the background when a game loads.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the feedback, also</p>\n<blockquote>\n<p>Browsers do allow you to run arbitrary JS in people's browsers. Hopefully JS/browsers are designed to stop the bad stuff happening.</p>\n</blockquote>\n<p>If I put up code that does something bad (like run cryptomining or launching a XSS attack) then it is linked to my site and potentially (depending on the registrar and how sneaky I'm being) my name. But if I can upload my bad code to your site and get <em>you</em> to host it for me (and I've taken reasonable steps to anonymize my account) then anyone who interacts with that page gets the bad script and you take the blame while I take the mined bitcoins or stolen login details. So whether it was intentional or not, it was smart to not allow users to put arbitrary Javascript in their games.</p>\n<p>Javascript isn't the leaky bug bucket that Flash was and browser security <em>has</em> gotten a lot better but <a href=\"https://www.zdnet.com/article/bank-sites-and-web-apps-are-most-vulnerable-to-hackers/\">lots of websites out there</a> are still vulnerable to XSS. Might be worth checking into the JS for UI stuff to see if it's possible to run a crypto script or something in the background when a game loads.</p>\n\n",
      "PostDate": "2018-10-28T12:41:00.0884093Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62c5e361-df31-4ab2-bdf5-22288f6ff598",
      "UserId": 383686,
      "Username": "myarichuk",
      "AvatarUrl": "https://i.imgur.com/B2r7Dfxb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Is this even Javascript???\r\n\r\nFrom my experimentation, Quest has separate javascript environment that runs in-parallel to Quest's scripts. \r\n**JS.eval()** calls work on the same global \"environment\", so if you run \r\n```JS.eval(\"var foo = new Array()\")``` then \r\n```JS.eval(\"// do something with array foo\")``` ->  it will work\r\nAlso, from what I've seen, Quest seems to run on \"embedded\" browser, and javascript considers itself running on a webpage. However, things like HTML5's local storage don't work, probably because javascript interpreter is a bit old.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is this even Javascript???</p>\n</blockquote>\n<p>From my experimentation, Quest has separate javascript environment that runs in-parallel to Quest's scripts.<br>\n<strong>JS.eval()</strong> calls work on the same global \"environment\", so if you run<br>\n<code>JS.eval(\"var foo = new Array()\")</code> then<br>\n<code>JS.eval(\"// do something with array foo\")</code> -&gt;  it will work<br>\nAlso, from what I've seen, Quest seems to run on \"embedded\" browser, and javascript considers itself running on a webpage. However, things like HTML5's local storage don't work, probably because javascript interpreter is a bit old.</p>\n\n",
      "PostDate": "2018-11-01T09:07:06.3631809Z",
      "LastEditDate": "2018-11-01T09:07:23.1725613Z",
      "link": null
    },
    {
      "PostId": "1b923036-d943-4ec6-a51a-e3efd3efea7e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice explanation, myarichuck!\r\n\r\n(I wish I'd have thought to provide all that information.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice explanation, myarichuck!</p>\n<p>(I wish I'd have thought to provide all that information.)</p>\n\n",
      "PostDate": "2018-11-01T12:57:05.8796847Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
