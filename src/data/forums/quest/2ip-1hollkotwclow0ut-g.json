{
  "Topic": {
    "TopicId": "2ip-1hollkotwclow0ut-g",
    "ForumId": "10",
    "Title": "Text Processor",
    "LastUpdated": "2020-02-27T16:05:24.4868999Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c32b6382-2a06-4398-8be9-b23090eef4b1",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it possible to call a function or template when using the text processor for room descriptions?\r\n\r\nI know I could use a script for complex descriptions but this in itself seems to mess things up if any objects have inroomdescriptions.\r\n\r\nThanks.\r\n\r\nEdit:\r\n\r\nOr failing the above can and/or conditions be use in the text processor?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it possible to call a function or template when using the text processor for room descriptions?</p>\n<p>I know I could use a script for complex descriptions but this in itself seems to mess things up if any objects have inroomdescriptions.</p>\n<p>Thanks.</p>\n<p>Edit:</p>\n<p>Or failing the above can and/or conditions be use in the text processor?</p>\n\n",
      "PostDate": "2020-02-27T16:05:24.4868999Z",
      "LastEditDate": "2020-02-27T16:21:40.3005994Z",
      "link": null
    },
    {
      "PostId": "26f51a66-1340-4f78-a57e-d045f0f8daf4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Or failing the above can and/or conditions be use in the text processor?\r\n\r\nThe condition for `{if` in the text processor is a special case, and kind of weird in the way it works. It supports `not`, but only for some operators.\r\n\r\nThe condition for `{either` is a Quest expression - anything you could put in an expression for a regular `if` statement in a script. That means you can use `and` and `or` however you want :)\r\n\r\n> Is it possible to call a function or template when using the text processor for room descriptions?\r\n\r\nYes. `{=NameOfFunction()}` will include the output of a function in the text.\r\n\r\nIf you want to run a function that doesn't generate any output, I think it needs a return type (not 100% sure about this). If so, just change its type to 'string' and add a line `return (\"\")` at the end of the function. Then it can easily be called from within a description.\r\n\r\nNote that in the case of functions which modify a value when they're called, this may only be run when the text is sent to the browser. So the description with the text processor commands in it could have in-room descriptions added to the end, and \"You can see:\" lists, before ProcessText is called to replace all text processor commands with their results. So if, for example, your function moves an object out of the room, that object's in-room description will still be  shown.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Or failing the above can and/or conditions be use in the text processor?</p>\n</blockquote>\n<p>The condition for <code>{if</code> in the text processor is a special case, and kind of weird in the way it works. It supports <code>not</code>, but only for some operators.</p>\n<p>The condition for <code>{either</code> is a Quest expression - anything you could put in an expression for a regular <code>if</code> statement in a script. That means you can use <code>and</code> and <code>or</code> however you want :)</p>\n<blockquote>\n<p>Is it possible to call a function or template when using the text processor for room descriptions?</p>\n</blockquote>\n<p>Yes. <code>{=NameOfFunction()}</code> will include the output of a function in the text.</p>\n<p>If you want to run a function that doesn't generate any output, I think it needs a return type (not 100% sure about this). If so, just change its type to 'string' and add a line <code>return (\"\")</code> at the end of the function. Then it can easily be called from within a description.</p>\n<p>Note that in the case of functions which modify a value when they're called, this may only be run when the text is sent to the browser. So the description with the text processor commands in it could have in-room descriptions added to the end, and \"You can see:\" lists, before ProcessText is called to replace all text processor commands with their results. So if, for example, your function moves an object out of the room, that object's in-room description will still be  shown.</p>\n\n",
      "PostDate": "2020-02-27T17:03:13.3768619Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff630819-a703-48c5-b1bc-d6fb84f663b2",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Brilliant. Both the function and the either options work for me. Thanks.\r\nI've looked at the text processor help page a gazillion times and both options didn't click. Thanks again.",
      "EditableFormat": "markdown",
      "HTML": "<p>Brilliant. Both the function and the either options work for me. Thanks.<br>\nI've looked at the text processor help page a gazillion times and both options didn't click. Thanks again.</p>\n\n",
      "PostDate": "2020-02-28T07:57:16.9957635Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b39a3b6f-6d4d-49f0-a76a-dfe6c9fa10c5",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">If you want to run a function that doesn't generate any output, I think it needs a return type (not 100% sure about this). If so, just change its type to 'string' and add a line return (\"\") at the end of the function. Then it can easily be called from within a description.\r\n\r\nRegarding this, and in general when using functions that don't generate output but need a return type. Setting  as a string and using return (\"\") works, but generates an additional blank line in the output (as expected), is there any way of stopping this?\r\nThanks in advance.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If you want to run a function that doesn't generate any output, I think it needs a return type (not 100% sure about this). If so, just change its type to 'string' and add a line return (\"\") at the end of the function. Then it can easily be called from within a description.</p>\n</blockquote>\n<p>Regarding this, and in general when using functions that don't generate output but need a return type. Setting  as a string and using return (\"\") works, but generates an additional blank line in the output (as expected), is there any way of stopping this?<br>\nThanks in advance.</p>\n\n",
      "PostDate": "2020-03-06T09:10:15.7039264Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "299bbb17-19d4-4b15-bcc7-e91bd0309efb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure why there would be an additional blank line. The text processor command will be replaced by its output, so returning \"\" should remove it entirely.\r\n\r\nIf you put the command on a line of its own, it still has line breaks before and after it. But you can put it at the end of an existing line so there's no need for an extra line break. Makes the code a little harder to read, but it should work fine.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure why there would be an additional blank line. The text processor command will be replaced by its output, so returning \"\" should remove it entirely.</p>\n<p>If you put the command on a line of its own, it still has line breaks before and after it. But you can put it at the end of an existing line so there's no need for an extra line break. Makes the code a little harder to read, but it should work fine.</p>\n\n",
      "PostDate": "2020-03-06T09:36:31.4306104Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "29b3c57c-0e50-4ce3-a9b3-3f99e71909c9",
      "UserId": 450907,
      "Username": "queste",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b00b2ee33e6a23b1a02b67a5333569b4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I should have been clearer (maybe should have been a separate topic). This is not text processor related. I have situation where a  verb calls a function  that may then call another command. There probably is an easier way of doing this.\r\n\r\nSo the main command is burn object with object. I have a verb burn object. The verb calls a function, passing the object.\r\n\r\nIn the function I have a few checks which may fail and return a message, exiting the function. If the checks pass the function then calls the main command using ```do (BurningWith, \"script\", tempdir)```, where tempdir is a dictionary with two objects. The main command does what it needs outputting the correct messages.\r\n\r\nI'm guessing what happens now it that the command finishes, returns to the calling function which then ```returns (\"\")``` It is at this point I get the extra blank line.\r\n\r\nHope that makes sense. It's not really a major issue, I know it happens and have a hacky workaround. Thanks.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I should have been clearer (maybe should have been a separate topic). This is not text processor related. I have situation where a  verb calls a function  that may then call another command. There probably is an easier way of doing this.</p>\n<p>So the main command is burn object with object. I have a verb burn object. The verb calls a function, passing the object.</p>\n<p>In the function I have a few checks which may fail and return a message, exiting the function. If the checks pass the function then calls the main command using <code>do (BurningWith, \"script\", tempdir)</code>, where tempdir is a dictionary with two objects. The main command does what it needs outputting the correct messages.</p>\n<p>I'm guessing what happens now it that the command finishes, returns to the calling function which then <code>returns (\"\")</code> It is at this point I get the extra blank line.</p>\n<p>Hope that makes sense. It's not really a major issue, I know it happens and have a hacky workaround. Thanks.</p>\n\n",
      "PostDate": "2020-03-06T10:15:16.2306863Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "72e67e67-81f7-4eea-b494-f39f9724259e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Returning an empty string will not output anything. If you're getting a blank line, there must be a `msg` or equivalent in there to output it.\r\n\r\nIf the function is returning a message to explain why it failed, you'd just wrap it up in:\r\n```\r\nmessage = SomeFunction (this)\r\nif (not message = \"\") {\r\n  msg (message)\r\n}\r\n```\r\nSo the message is only printed if there is one.",
      "EditableFormat": "markdown",
      "HTML": "<p>Returning an empty string will not output anything. If you're getting a blank line, there must be a <code>msg</code> or equivalent in there to output it.</p>\n<p>If the function is returning a message to explain why it failed, you'd just wrap it up in:</p>\n<pre><code>message = SomeFunction (this)\nif (not message = \"\") {\n  msg (message)\n}\n</code></pre>\n<p>So the message is only printed if there is one.</p>\n\n",
      "PostDate": "2020-03-06T10:44:04.2233142Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
