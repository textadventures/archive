{
  "Topic": {
    "TopicId": "3co6qy936umtvxfprby9ua",
    "ForumId": "10",
    "Title": "Leveling System",
    "LastUpdated": "2018-12-18T23:16:55.6745054Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f6f15d3f-6383-4bc2-ba8b-237e92d230ee",
      "UserId": 391695,
      "Username": "GamerOver9000",
      "AvatarUrl": "https://secure.gravatar.com/avatar/36e6a025a2710445d7e878e7864013d4?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm creating a game where in order for my in game character to progress I have to do real life tasks. For example, I write down my to-do list for each day and assign points to each task. When I play the game I can add those points to my character's strength (or whatever skill). \r\n\r\nMax Points Needed For Each Level\r\n\r\nLevel 0 = 0 points\r\nLevel 1 = 5 points\r\nLevel 2 = 10 points\r\n\r\nBasically, the points needed for each level doubles.\r\n\r\nI've already created a player.strength attribute. I was thinking of also creating a player.strength_points attribute to keep track of the total points dedicated to the skill and just using if statements to add a level to player.strength when it contains the necessary amount of points.\r\n\r\nThe only way I can think of doing is this is manually writing if statements for each level. Is there a way for to make it where my character can level up continuously without doing the following for each level?\r\n\r\nif (player.strength_points = 5) {\r\n  set (player, player.strength, 1)\r\n}\r\nelse if (player.strength_points = 10) {\r\n  set (player, player.strength, 2)\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm creating a game where in order for my in game character to progress I have to do real life tasks. For example, I write down my to-do list for each day and assign points to each task. When I play the game I can add those points to my character's strength (or whatever skill).</p>\n<p>Max Points Needed For Each Level</p>\n<p>Level 0 = 0 points<br>\nLevel 1 = 5 points<br>\nLevel 2 = 10 points</p>\n<p>Basically, the points needed for each level doubles.</p>\n<p>I've already created a player.strength attribute. I was thinking of also creating a player.strength_points attribute to keep track of the total points dedicated to the skill and just using if statements to add a level to player.strength when it contains the necessary amount of points.</p>\n<p>The only way I can think of doing is this is manually writing if statements for each level. Is there a way for to make it where my character can level up continuously without doing the following for each level?</p>\n<p>if (player.strength_points = 5) {<br>\nset (player, player.strength, 1)<br>\n}<br>\nelse if (player.strength_points = 10) {<br>\nset (player, player.strength, 2)<br>\n}</p>\n\n",
      "PostDate": "2018-12-18T23:16:55.6745054Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d56c7aad-a39a-4ce3-8bf2-8dd0dae3544c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's my own leveling function, which I think you can figure out your own needs from it, hopefully:\r\n\r\n```\r\n<function name=\"leveling_function\">\r\n  <![CDATA[\r\n    exp_req_for_lvlup_integer_variable = player.level * 100 + 100\r\n    if (player.experience >= exp_req_for_lvlup_integer_variable) {\r\n      player.experience = player.experience - exp_req_for_lvlup_integer_variable\r\n      player.level = player.level + 1\r\n      leveling_function\r\n    }\r\n  ]]>\r\n</function>\r\n```\r\n\r\n--------------------\r\n\r\nmy leveling function's mechanics:\r\n\r\n```\r\nlevel 0 to level 1: +100 experience needed (100 total experience needed)\r\nlevel 1 to level 2: +200 experience needed (300 total experience needed)\r\nlevel 2 to level 3: +300 experience needed (600 total experience needed)\r\nlevel 3 to level 4: +400 experience needed (1,000 total experience needed)\r\nlevel 4 to level 5: +500 experience needed (1,500 total experience needed)\r\nlevel 5 to level 6: +600 experience needed (2,100 total experience needed)\r\netc etc etc\r\n```\r\n\r\n-------------\r\n\r\nArithmetic Operation (simple) examples:\r\n\r\n```\r\nAddition Operator: +\r\n\r\nplayer.strength = player.strength + 10\r\n\r\nSubtraction Operator: -\r\n\r\nplayer.strength = player.strength - 9\r\n\r\nMultiplication Operator: *\r\n\r\nplayer.strength = player.strength * 3\r\n\r\nDivision Operator: /\r\n\r\nplayer.strength = player.strength / 2\r\n\r\nModulus (Division, but it finds/gets/returns the REMAINDER) Operator: %\r\n```\r\n\r\n--------\r\n\r\nModulus (remainder from division) enables two really cool implementations:\r\n\r\n1. cyclic\r\n\r\n```\r\nclock.second = GetRandomInt (0,300)\r\nclock.clock_second = clock.second % 60\r\n//\r\n// %60: 0 to 59\r\n//\r\n// clock.second = 0\r\n// clock.clock_second = 0\r\n//\r\n// clock.second = 1\r\n// clock.clock_second = 1\r\n//\r\n// clock.second = 30\r\n// clock.clock_second = 30\r\n//\r\n// clock.second = 59\r\n// clock.clock_second = 59\r\n//\r\n// clock.second = 60\r\n// clock.clock_second = 0\r\n//\r\n// clock.second = 61\r\n// clock.clock_second = 1\r\n//\r\n// clock.second = 90\r\n// clock.clock_second = 30\r\n//\r\n// clock.second = 119\r\n// clock.clock_second = 59\r\n//\r\n// clock.second = 120\r\n// clock.clock_second = 0\r\n//\r\n// clock.second = 121\r\n// clock.clock_second = 1\r\n//\r\n// etc etc etc\r\n\r\nclock.hour = GetRandomInt (0,48)\r\nclock.clock_military_hour = clock.hour % 24\r\nclock.clock_civilian_hour = clock.hour % 12\r\n// %24: 0 to 23\r\n// %12: 0 to 11\r\n```\r\n\r\n2. factors/divisibility of a number (which includes whether a number is even or odd):\r\n\r\n```\r\nnumber_integer_variable = GetRandomInt (0,100)\r\nif (number_integer_variable % 2 = 1) {\r\n  msg (\"The number (\" + number_integer_variable + \") is odd\")\r\n} else if (number_integer_variable % 2 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is even\")\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 2\")\r\n} else if (number_integer_variable % 3 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 3\")\r\n} else if (number_integer_variable % 4 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 4\")\r\n} else if (number_integer_variable % 5 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 5\")\r\n} else if (number_integer_variable % 6 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 6\")\r\n} else if (number_integer_variable % 7 = 0) {\r\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 7\")\r\n}\r\n// etc etc etc\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's my own leveling function, which I think you can figure out your own needs from it, hopefully:</p>\n<pre><code>&lt;function name=\"leveling_function\"&gt;\n  &lt;![CDATA[\n    exp_req_for_lvlup_integer_variable = player.level * 100 + 100\n    if (player.experience &gt;= exp_req_for_lvlup_integer_variable) {\n      player.experience = player.experience - exp_req_for_lvlup_integer_variable\n      player.level = player.level + 1\n      leveling_function\n    }\n  ]]&gt;\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>my leveling function's mechanics:</p>\n<pre><code>level 0 to level 1: +100 experience needed (100 total experience needed)\nlevel 1 to level 2: +200 experience needed (300 total experience needed)\nlevel 2 to level 3: +300 experience needed (600 total experience needed)\nlevel 3 to level 4: +400 experience needed (1,000 total experience needed)\nlevel 4 to level 5: +500 experience needed (1,500 total experience needed)\nlevel 5 to level 6: +600 experience needed (2,100 total experience needed)\netc etc etc\n</code></pre>\n<hr>\n<p>Arithmetic Operation (simple) examples:</p>\n<pre><code>Addition Operator: +\n\nplayer.strength = player.strength + 10\n\nSubtraction Operator: -\n\nplayer.strength = player.strength - 9\n\nMultiplication Operator: *\n\nplayer.strength = player.strength * 3\n\nDivision Operator: /\n\nplayer.strength = player.strength / 2\n\nModulus (Division, but it finds/gets/returns the REMAINDER) Operator: %\n</code></pre>\n<hr>\n<p>Modulus (remainder from division) enables two really cool implementations:</p>\n<ol>\n<li>cyclic</li>\n</ol>\n<pre><code>clock.second = GetRandomInt (0,300)\nclock.clock_second = clock.second % 60\n//\n// %60: 0 to 59\n//\n// clock.second = 0\n// clock.clock_second = 0\n//\n// clock.second = 1\n// clock.clock_second = 1\n//\n// clock.second = 30\n// clock.clock_second = 30\n//\n// clock.second = 59\n// clock.clock_second = 59\n//\n// clock.second = 60\n// clock.clock_second = 0\n//\n// clock.second = 61\n// clock.clock_second = 1\n//\n// clock.second = 90\n// clock.clock_second = 30\n//\n// clock.second = 119\n// clock.clock_second = 59\n//\n// clock.second = 120\n// clock.clock_second = 0\n//\n// clock.second = 121\n// clock.clock_second = 1\n//\n// etc etc etc\n\nclock.hour = GetRandomInt (0,48)\nclock.clock_military_hour = clock.hour % 24\nclock.clock_civilian_hour = clock.hour % 12\n// %24: 0 to 23\n// %12: 0 to 11\n</code></pre>\n<ol start=\"2\">\n<li>factors/divisibility of a number (which includes whether a number is even or odd):</li>\n</ol>\n<pre><code>number_integer_variable = GetRandomInt (0,100)\nif (number_integer_variable % 2 = 1) {\n  msg (\"The number (\" + number_integer_variable + \") is odd\")\n} else if (number_integer_variable % 2 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is even\")\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 2\")\n} else if (number_integer_variable % 3 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 3\")\n} else if (number_integer_variable % 4 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 4\")\n} else if (number_integer_variable % 5 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 5\")\n} else if (number_integer_variable % 6 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 6\")\n} else if (number_integer_variable % 7 = 0) {\n  msg (\"The number (\" + number_integer_variable + \") is divisible by 7\")\n}\n// etc etc etc\n</code></pre>\n\n",
      "PostDate": "2018-12-19T06:05:07.9007555Z",
      "LastEditDate": "2018-12-19T06:18:21.8451771Z",
      "link": null
    },
    {
      "PostId": "e49018d0-bab1-4355-a1fe-adf96b0ee1ae",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is the function I use to level up.\r\n\r\nIt's called love. (after Undertale)\r\n```\r\nif (player.exp >= player.level * 410 + 100) {\r\n  player.level = player.level + 1\r\n  player.reallevel = player.reallevel + 1\r\n  msg (\"You are level \" + player.reallevel + \".\")\r\n  player.defence = player.defence + 1\r\n  player.attack = player.attack + 1\r\n  player.damage = player.damage + 1\r\n  player.hitpoints = player.hitpoints + 5\r\n  player.max = player.max + 5\r\n}\r\n```\r\n\r\nI keep two attributes for the level. player.level is used for the function, player.reallevel is used for the way the number appears/string dictionary. That way, the player starts off at level 1, instead of level 0.\r\n\r\nplayer attributes\r\n```\r\nplayer.alias = \"you\"\r\nplayer.hitpoints = 110\r\nplayer.max = 110\r\nplayer.damage = 3\r\nplayer.attack = 1\r\nplayer.defence = 0\r\nplayer.armour = 0\r\nplayer.exp = 0\r\nplayer.level = 0\r\nplayer.attackers = NewObjectList()\r\nplayer.ammo = 50\r\nplayer.potion = 2\r\nplayer.hyper_potion = 0\r\nplayer.gold = 0\r\nplayer.reallevel = 1\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This is the function I use to level up.</p>\n<p>It's called love. (after Undertale)</p>\n<pre><code>if (player.exp &gt;= player.level * 410 + 100) {\n  player.level = player.level + 1\n  player.reallevel = player.reallevel + 1\n  msg (\"You are level \" + player.reallevel + \".\")\n  player.defence = player.defence + 1\n  player.attack = player.attack + 1\n  player.damage = player.damage + 1\n  player.hitpoints = player.hitpoints + 5\n  player.max = player.max + 5\n}\n</code></pre>\n<p>I keep two attributes for the level. player.level is used for the function, player.reallevel is used for the way the number appears/string dictionary. That way, the player starts off at level 1, instead of level 0.</p>\n<p>player attributes</p>\n<pre><code>player.alias = \"you\"\nplayer.hitpoints = 110\nplayer.max = 110\nplayer.damage = 3\nplayer.attack = 1\nplayer.defence = 0\nplayer.armour = 0\nplayer.exp = 0\nplayer.level = 0\nplayer.attackers = NewObjectList()\nplayer.ammo = 50\nplayer.potion = 2\nplayer.hyper_potion = 0\nplayer.gold = 0\nplayer.reallevel = 1\n</code></pre>\n\n",
      "PostDate": "2018-12-19T06:28:19.2574491Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
