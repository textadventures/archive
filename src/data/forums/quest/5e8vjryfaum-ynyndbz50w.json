{
  "Topic": {
    "TopicId": "5e8vjryfaum-ynyndbz50w",
    "ForumId": "10",
    "Title": "Super Noob: script for varying descriptions based on times something has occurred",
    "LastUpdated": "2020-08-12T10:29:55.1864016Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6879803f-0799-41c0-8cee-0e2986bb95bb",
      "UserId": 494695,
      "Username": "spontaneite",
      "AvatarUrl": "https://secure.gravatar.com/avatar/99a8c93ea70e9521c5bfda9b8e1a3f9f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm still muddling my way through the basics of using Quest, but by far the most common thing I want to do but don't know how to is to change which description/part of description is presented based on how many times something has happened. There is a basic provision for this right in your face in the game - the {once} command - but this only allows for 'this particular text is only presented once'.\r\n\r\nSome examples of things I want to do:\r\n- Print three different messages, in order, each of the first three times you try to pick up a particular object. On the fourth try, a different message prints, and you are allowed to pick it up.\r\n- Present a wholly different room description the second+ time you enter the room. {once} does not exclude anything you write that isn't within its brackets, so I need a way to make something  _only_ appear on the second etc time entering the room.\r\n\r\nI would say all of my other examples fall under those two options. I need a way to track the amount of times x has happened, i.e. 'tried to take item', 'entered x room', 'looked at x item', and so on, and then give different text responses based on that value. I assume I'd need to make some sort of script for every Thing Type that needs tracking, and then do some sort of 'get variable' thing to let the game know which text to present? ",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm still muddling my way through the basics of using Quest, but by far the most common thing I want to do but don't know how to is to change which description/part of description is presented based on how many times something has happened. There is a basic provision for this right in your face in the game - the {once} command - but this only allows for 'this particular text is only presented once'.</p>\n<p>Some examples of things I want to do:</p>\n<ul>\n<li>Print three different messages, in order, each of the first three times you try to pick up a particular object. On the fourth try, a different message prints, and you are allowed to pick it up.</li>\n<li>Present a wholly different room description the second+ time you enter the room. {once} does not exclude anything you write that isn't within its brackets, so I need a way to make something  <em>only</em> appear on the second etc time entering the room.</li>\n</ul>\n<p>I would say all of my other examples fall under those two options. I need a way to track the amount of times x has happened, i.e. 'tried to take item', 'entered x room', 'looked at x item', and so on, and then give different text responses based on that value. I assume I'd need to make some sort of script for every Thing Type that needs tracking, and then do some sort of 'get variable' thing to let the game know which text to present?</p>\n\n",
      "PostDate": "2020-08-12T10:29:55.1864016Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f383728f-4de4-490f-8f8c-3e7bf88f8b32",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "programming logic:\r\n\r\n1. you need an integer (non-decimal number) value (assigned/stored/held-within to an Attribute for global usage)\r\n2. you need to adjust/change (increase/decrease/etc-etc-etc) this integer value (Integer Attribute) as/when/where needed\r\n3. you need a script that checks the integer value (Integer Attribute), and acts upon that integer value (Integer Attribute), as/when/where needed, along with usually, scripting that also adjusts/changes (increase/decrease or reset) that integer value (Integer Attribute), as or if, needed\r\n\r\n----------\r\n\r\nthe 3 types of VARIABLES:\r\n\r\n1. Attribute VARIABLES:\r\n\r\nbecause Attributes are the VARIABLES of an Object, so long as the Object exists (or still exists), you can use Attributes anywhere (Attributes are global VARIABLES) and they're permanent too, so...\r\n\r\nAttributes are what you want to be using in Quest!!! especially for people new to coding\r\n\r\n(except if/when you know coding and understand about scope issues, making local variables just for within scripts and etc stuff, but this is a bit more advanced stuff, for people who know coding)\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE\r\n// or\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n\r\nfor examples:\r\n\r\ncreate (\"ball\") // creating a 'ball' Object\r\n\r\nball.color = \"red\"\r\n\r\nball.weight = 5\r\n\r\nball.deflated = false\r\n\r\nmsg (\"The \" + ball.name + \"'s weight is \" + ball.weight + \" lbs, its color is \" + ball.color + \", and is the ball deflated? (Answer: \" + ball.deflated + \")\")\r\n\r\n// output/display:\r\n\r\nThe ball's weight is 5 lbs, its color is red, and is the ball deflated? (Answer: false)\r\n\r\nexample of a more complex Attribute (storing the final value of a complex expression/calculation, instead of a simple literal/direct value):\r\n\r\ncreate (\"katana\") // creating a 'katana' Object\r\ncreate (\"orc\") // creating an 'orc' Object\r\n\r\nkatana.damage = 50\r\n\r\nplayer.weapon = katana\r\n\r\nplayer.strength = GetRandomInt (0,100)\r\n\r\norc.current_life = 500\r\norc.maximum_life = 500\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = (50) + (50) * ([0 to 100]) / 100\r\n// player.damage = [50 to 100]\r\n\r\norc.current_life = orc.current_life - player.damage\r\n// orc.current_life = (500) - ([50 to 100])\r\n// orc.current_life = [400 to 450]\r\n\r\nmsg (player.name + \" does \" + player.damage + \" damage to the \" + orc.name + \".\")\r\n\r\nmsg (orc.name + \"'s Life: \" + orc.current_life + \"/\" + orc.maximum_life)\r\n\r\n2. Variable VARIABLES:\r\n\r\nthese are local to their scripts, so they don't exist outside of their script (they get destroyed when their script ends), and so, they are also not permanent either, they're temporary (as soon as their script ends, they get destroyed, they don't exist outside of their script, they are LOCAL VARIABLES)\r\n\r\nfor the most part / generally, people new to coding, want to stay away from using Variable VARIABLES, due to the issues involving scope\r\n\r\nbut often, people new to coding, are doing/using Variable VARIABLES, and wondering why they're not working... as they don't understand that Variable VARIABLES are local, only exist within their script. They don't know to use Attribute VARIABLES.\r\n\r\nNAME_OF_Variable\r\n// or\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\n\r\nexamples:\r\n\r\n(notice that there's NO attachment, the dot/period, to an Object)\r\n\r\ncolor = \"red\"\r\n\r\ndeflated = false\r\n\r\nweight = 5\r\n\r\nmsg (\"The ball's color is \" + color + \", its weight is \" + weight + \" lbs, and is it deflated? (Answer: \" + deflated + \")\")\r\n\r\n// output/display:\r\n\r\nThe ball's color is red, its weight is 5 lbs, and is it deflated? (Answer: false)\r\n\r\n3. Arguments/Parameters VARIABLES:\r\n\r\nthese are used within (mostly) Functions (and Commands and a few etc stuff too), which are special Variable VARIABLES, either directly (\"literal\") a Value or a VARIABLE's value (the \"Argument\"), is assigned into the \"Parameter\" Variable of) a Function, and these Parameter VARIABLES and their values, can be transferred from Function to Function as well, but we'll not get into this stuff, as its a bit more advanced stuff with using Functions, Commands, and few etc stuff\r\n\r\n----------\r\n\r\nthe 6 ways to adjust/change an integer value:\r\n\r\narithmetic:\r\n\r\n1. addition (+)\r\n2. subtraction (-)\r\n3. multiplication (*)\r\n4. division (/)\r\n\r\n5. modulus/modulo (%): this is a division operation, but instead you return/get/find the remainder value: the remainder value is for cyclic (repeating/intervals) needs/usage or factors/divisibility (which includes if a number is odd or even) of a number\r\n\r\n```\r\nfactors/divisibility of a number:\r\n\r\nnumber = GetRandomInt (0,100)\r\n\r\nif (number % 2 = 1) {\r\n  msg (\"the number: \" + number + \", is an odd number\")\r\n}\r\n\r\nif (number % 2 = 0) {\r\n  msg (\"the number: \" + number + \", is an even number\")\r\n  msg (\"the number: \" + number + \", is divisible by 2\")\r\n}\r\n\r\nif (number % 3 = 0) {\r\n  msg (\"the number: \" + number + \", is divisible by 3\")\r\n}\r\n\r\nif (number % 4 = 0) {\r\n  msg (\"the number: \" + number + \", is divisible by 4\")\r\n}\r\n\r\nif (number % 5 = 0) {\r\n  msg (\"the number: \" + number + \", is divisible by 5\")\r\n}\r\n\r\nif (number % 6 = 0) {\r\n  msg (\"the number: \" + number + \", is divisible by 6\")\r\n}\r\n\r\nif (number % 7 = 0) {\r\n  msg (\"the number: \" + number + \", is divisible by 7\")\r\n}\r\n\r\n// etc etc etc\r\n\r\n---------------------\r\n\r\ncyclic (usually involves time: clock time, dates: days in month, etc, and etc etc etc anything that repeats or acts at/upon intervals) needs/usage example:\r\n\r\n(this actually is technically also just factors/divisibility of a number, lol, but its application can be used for cyclic stuff as seen below)\r\n\r\n// number = 0\r\n\r\nif (number % 5 = 0) {\r\n  msg (\"this message will be shown on every interval of 5 (number = 0, number = 5, number = 10, number = 15, etc etc etc)\")\r\n} else {\r\n  msg (\"this message will be shown always, except when 'number' value is on/at intervals of 5\")\r\n}\r\n\r\nnumber = number + 1 // increases the 'number' value by 1\r\n\r\n// how, just the code line (number = number + 1) directly above, works:\r\n\r\n// this actually a programming operation, called an Assignment operation (=), the final value on the right side of the equal sign is assigned (stored or held within) to the variable on the left side of the equal sign\r\n\r\n// unfortunately, math class usually never explains this, instead they just talk about comparison operations (algebra): finding the solution so that the values on both sides of the equal sign are the same\r\n\r\n// comparison operations happen within (mainly) 'if' scripts in programming: if (animal = \"lion\") // string comparison, if (condition = \"poisoned\") // string comparison, if (number = 30 // integer comparison), if (cleaned_room = true) // boolean comparison, if (object = ball) // object comparison, etc etc etc\r\n\r\n// also, usually programming languages use a '==' for its comparison operations, to distinguish between them and assignment operations using '=', but quest decided that this would be more confusing for non-coders, so it keeps the '=' sign for both comparison and assignment operations, being able to parse (aka, tell the difference) on its own for you\r\n\r\n// the right side of the equal sign does have a sub expression/calculation (simple addition of +1) within it, but its final value is still being assigned/stored/held-within to the 'number' variable on the left side of the equal sign, which is very different than what you learned in math, just doing comparison operations (algebra), and likely never taught about that you're actually doing comparison operations, sighs. Math is about math, so these (programming) concepts (usually) don't get taught, sighs\r\n\r\n// number = (number) + 1\r\n\r\n// number = (0) + 1 = 1\r\n// number = (1) + 1 = 2\r\n// number = (2) + 1 = 3\r\n// number = (3) + 1 = 4\r\n// number = (4) + 1 = 5\r\n// number = (5) + 1 = 6\r\n// etc etc etc\r\n\r\nanother example, of clock time application:\r\n\r\nhour_count = GetRandomInt (0,100)\r\nminute_count = GetRandomInt (0,100)\r\nsecond_count = GetRandomInt (0,100)\r\n\r\ncivilian_clock_hour = hour_count % 12\r\n// civilian_clock_hour = [0 to 11]\r\n\r\nmilitary_clock_hour = hour_count % 24\r\n// military_clock_hour = [0 to 23]\r\n\r\n// clock_minute = minute_count % 60\r\n// clock_minute = [0 to 59]\r\n\r\n// clock_second = second_count % 60\r\n// clock_second = [0 to 59]\r\n\r\nanother example of days in a month:\r\n\r\n(very simplified and very non-real example, as month days is much more complicated, lol)\r\n\r\nmonth_list = Split (\"january;february;march;april;may;june;july;august;september;october;november;december\")\r\n\r\nmonth_integer = GetRandomInt (0,11)\r\n\r\nmonth_string = StringListItem (month_list, month_integer)\r\n\r\nday_count = GetRandomInt (0,100) // this is very impractical (non-real), but it's just for showing this example usage/application of the cyclic modulus/modulo operation\r\n\r\nif (month_string = \"february\") {\r\n  day = day_count % 28 // ignoring leap year complications (29 days in february instead of 28), lol\r\n  // day = [0 to 27]\r\n} else if (month_string = \"april\" or month_string = \"june\" or month_string = \"september\" or month_string = \"november\") {\r\n  day = day_count % 30\r\n  // day = [0 to 29]\r\n} else {\r\n  day = day_count % 31\r\n  // day = [0 to 30]\r\n}\r\n```\r\n\r\nnon-arithmetic (programming):\r\n\r\n6. setting/resetting (no arithmetic operation, you just directly set/reset the value to what you want it to be)\r\n\r\nexample of (setting/resetting the 'number' variable to/back-to ZERO):\r\n\r\nnumber = 0\r\n\r\n-----------------\r\n\r\ngetting tired... still got to get to conceptual examples of how to do this stuff that you're asking about (and then actual help on what you want to do, lol)... but I need a break\r\n\r\nI'll try to get back to helping with this stuff, but it might not be until the weekend...",
      "EditableFormat": "markdown",
      "HTML": "<p>programming logic:</p>\n<ol>\n<li>you need an integer (non-decimal number) value (assigned/stored/held-within to an Attribute for global usage)</li>\n<li>you need to adjust/change (increase/decrease/etc-etc-etc) this integer value (Integer Attribute) as/when/where needed</li>\n<li>you need a script that checks the integer value (Integer Attribute), and acts upon that integer value (Integer Attribute), as/when/where needed, along with usually, scripting that also adjusts/changes (increase/decrease or reset) that integer value (Integer Attribute), as or if, needed</li>\n</ol>\n<hr>\n<p>the 3 types of VARIABLES:</p>\n<ol>\n<li>Attribute VARIABLES:</li>\n</ol>\n<p>because Attributes are the VARIABLES of an Object, so long as the Object exists (or still exists), you can use Attributes anywhere (Attributes are global VARIABLES) and they're permanent too, so...</p>\n<p>Attributes are what you want to be using in Quest!!! especially for people new to coding</p>\n<p>(except if/when you know coding and understand about scope issues, making local variables just for within scripts and etc stuff, but this is a bit more advanced stuff, for people who know coding)</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE<br>\n// or<br>\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION</p>\n<p>for examples:</p>\n<p>create (\"ball\") // creating a 'ball' Object</p>\n<p>ball.color = \"red\"</p>\n<p>ball.weight = 5</p>\n<p>ball.deflated = false</p>\n<p>msg (\"The \" + ball.name + \"'s weight is \" + ball.weight + \" lbs, its color is \" + ball.color + \", and is the ball deflated? (Answer: \" + ball.deflated + \")\")</p>\n<p>// output/display:</p>\n<p>The ball's weight is 5 lbs, its color is red, and is the ball deflated? (Answer: false)</p>\n<p>example of a more complex Attribute (storing the final value of a complex expression/calculation, instead of a simple literal/direct value):</p>\n<p>create (\"katana\") // creating a 'katana' Object<br>\ncreate (\"orc\") // creating an 'orc' Object</p>\n<p>katana.damage = 50</p>\n<p>player.weapon = katana</p>\n<p>player.strength = GetRandomInt (0,100)</p>\n<p>orc.current_life = 500<br>\norc.maximum_life = 500</p>\n<p>player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = (50) + (50) * ([0 to 100]) / 100<br>\n// player.damage = [50 to 100]</p>\n<p>orc.current_life = orc.current_life - player.damage<br>\n// orc.current_life = (500) - ([50 to 100])<br>\n// orc.current_life = [400 to 450]</p>\n<p>msg (player.name + \" does \" + player.damage + \" damage to the \" + orc.name + \".\")</p>\n<p>msg (orc.name + \"'s Life: \" + orc.current_life + \"/\" + orc.maximum_life)</p>\n<ol start=\"2\">\n<li>Variable VARIABLES:</li>\n</ol>\n<p>these are local to their scripts, so they don't exist outside of their script (they get destroyed when their script ends), and so, they are also not permanent either, they're temporary (as soon as their script ends, they get destroyed, they don't exist outside of their script, they are LOCAL VARIABLES)</p>\n<p>for the most part / generally, people new to coding, want to stay away from using Variable VARIABLES, due to the issues involving scope</p>\n<p>but often, people new to coding, are doing/using Variable VARIABLES, and wondering why they're not working... as they don't understand that Variable VARIABLES are local, only exist within their script. They don't know to use Attribute VARIABLES.</p>\n<p>NAME_OF_Variable<br>\n// or<br>\nNAME_OF_Variable = VALUE_OR_EXPRESSION</p>\n<p>examples:</p>\n<p>(notice that there's NO attachment, the dot/period, to an Object)</p>\n<p>color = \"red\"</p>\n<p>deflated = false</p>\n<p>weight = 5</p>\n<p>msg (\"The ball's color is \" + color + \", its weight is \" + weight + \" lbs, and is it deflated? (Answer: \" + deflated + \")\")</p>\n<p>// output/display:</p>\n<p>The ball's color is red, its weight is 5 lbs, and is it deflated? (Answer: false)</p>\n<ol start=\"3\">\n<li>Arguments/Parameters VARIABLES:</li>\n</ol>\n<p>these are used within (mostly) Functions (and Commands and a few etc stuff too), which are special Variable VARIABLES, either directly (\"literal\") a Value or a VARIABLE's value (the \"Argument\"), is assigned into the \"Parameter\" Variable of) a Function, and these Parameter VARIABLES and their values, can be transferred from Function to Function as well, but we'll not get into this stuff, as its a bit more advanced stuff with using Functions, Commands, and few etc stuff</p>\n<hr>\n<p>the 6 ways to adjust/change an integer value:</p>\n<p>arithmetic:</p>\n<ol>\n<li>\n<p>addition (+)</p>\n</li>\n<li>\n<p>subtraction (-)</p>\n</li>\n<li>\n<p>multiplication (*)</p>\n</li>\n<li>\n<p>division (/)</p>\n</li>\n<li>\n<p>modulus/modulo (%): this is a division operation, but instead you return/get/find the remainder value: the remainder value is for cyclic (repeating/intervals) needs/usage or factors/divisibility (which includes if a number is odd or even) of a number</p>\n</li>\n</ol>\n<pre><code>factors/divisibility of a number:\n\nnumber = GetRandomInt (0,100)\n\nif (number % 2 = 1) {\n  msg (\"the number: \" + number + \", is an odd number\")\n}\n\nif (number % 2 = 0) {\n  msg (\"the number: \" + number + \", is an even number\")\n  msg (\"the number: \" + number + \", is divisible by 2\")\n}\n\nif (number % 3 = 0) {\n  msg (\"the number: \" + number + \", is divisible by 3\")\n}\n\nif (number % 4 = 0) {\n  msg (\"the number: \" + number + \", is divisible by 4\")\n}\n\nif (number % 5 = 0) {\n  msg (\"the number: \" + number + \", is divisible by 5\")\n}\n\nif (number % 6 = 0) {\n  msg (\"the number: \" + number + \", is divisible by 6\")\n}\n\nif (number % 7 = 0) {\n  msg (\"the number: \" + number + \", is divisible by 7\")\n}\n\n// etc etc etc\n\n---------------------\n\ncyclic (usually involves time: clock time, dates: days in month, etc, and etc etc etc anything that repeats or acts at/upon intervals) needs/usage example:\n\n(this actually is technically also just factors/divisibility of a number, lol, but its application can be used for cyclic stuff as seen below)\n\n// number = 0\n\nif (number % 5 = 0) {\n  msg (\"this message will be shown on every interval of 5 (number = 0, number = 5, number = 10, number = 15, etc etc etc)\")\n} else {\n  msg (\"this message will be shown always, except when 'number' value is on/at intervals of 5\")\n}\n\nnumber = number + 1 // increases the 'number' value by 1\n\n// how, just the code line (number = number + 1) directly above, works:\n\n// this actually a programming operation, called an Assignment operation (=), the final value on the right side of the equal sign is assigned (stored or held within) to the variable on the left side of the equal sign\n\n// unfortunately, math class usually never explains this, instead they just talk about comparison operations (algebra): finding the solution so that the values on both sides of the equal sign are the same\n\n// comparison operations happen within (mainly) 'if' scripts in programming: if (animal = \"lion\") // string comparison, if (condition = \"poisoned\") // string comparison, if (number = 30 // integer comparison), if (cleaned_room = true) // boolean comparison, if (object = ball) // object comparison, etc etc etc\n\n// also, usually programming languages use a '==' for its comparison operations, to distinguish between them and assignment operations using '=', but quest decided that this would be more confusing for non-coders, so it keeps the '=' sign for both comparison and assignment operations, being able to parse (aka, tell the difference) on its own for you\n\n// the right side of the equal sign does have a sub expression/calculation (simple addition of +1) within it, but its final value is still being assigned/stored/held-within to the 'number' variable on the left side of the equal sign, which is very different than what you learned in math, just doing comparison operations (algebra), and likely never taught about that you're actually doing comparison operations, sighs. Math is about math, so these (programming) concepts (usually) don't get taught, sighs\n\n// number = (number) + 1\n\n// number = (0) + 1 = 1\n// number = (1) + 1 = 2\n// number = (2) + 1 = 3\n// number = (3) + 1 = 4\n// number = (4) + 1 = 5\n// number = (5) + 1 = 6\n// etc etc etc\n\nanother example, of clock time application:\n\nhour_count = GetRandomInt (0,100)\nminute_count = GetRandomInt (0,100)\nsecond_count = GetRandomInt (0,100)\n\ncivilian_clock_hour = hour_count % 12\n// civilian_clock_hour = [0 to 11]\n\nmilitary_clock_hour = hour_count % 24\n// military_clock_hour = [0 to 23]\n\n// clock_minute = minute_count % 60\n// clock_minute = [0 to 59]\n\n// clock_second = second_count % 60\n// clock_second = [0 to 59]\n\nanother example of days in a month:\n\n(very simplified and very non-real example, as month days is much more complicated, lol)\n\nmonth_list = Split (\"january;february;march;april;may;june;july;august;september;october;november;december\")\n\nmonth_integer = GetRandomInt (0,11)\n\nmonth_string = StringListItem (month_list, month_integer)\n\nday_count = GetRandomInt (0,100) // this is very impractical (non-real), but it's just for showing this example usage/application of the cyclic modulus/modulo operation\n\nif (month_string = \"february\") {\n  day = day_count % 28 // ignoring leap year complications (29 days in february instead of 28), lol\n  // day = [0 to 27]\n} else if (month_string = \"april\" or month_string = \"june\" or month_string = \"september\" or month_string = \"november\") {\n  day = day_count % 30\n  // day = [0 to 29]\n} else {\n  day = day_count % 31\n  // day = [0 to 30]\n}\n</code></pre>\n<p>non-arithmetic (programming):</p>\n<ol start=\"6\">\n<li>setting/resetting (no arithmetic operation, you just directly set/reset the value to what you want it to be)</li>\n</ol>\n<p>example of (setting/resetting the 'number' variable to/back-to ZERO):</p>\n<p>number = 0</p>\n<hr>\n<p>getting tired... still got to get to conceptual examples of how to do this stuff that you're asking about (and then actual help on what you want to do, lol)... but I need a break</p>\n<p>I'll try to get back to helping with this stuff, but it might not be until the weekend...</p>\n\n",
      "PostDate": "2020-08-13T09:24:30.8373973Z",
      "LastEditDate": "2020-08-13T10:52:57.4169344Z",
      "link": null
    },
    {
      "PostId": "d63c7350-6ac4-42cd-b347-4bb6b427e453",
      "UserId": 494695,
      "Username": "spontaneite",
      "AvatarUrl": "https://secure.gravatar.com/avatar/99a8c93ea70e9521c5bfda9b8e1a3f9f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "....well that will certainly be useful when I know enough about scripting to implement it! For now I think the most I can take from it is the tip to avoid variable variables, and also the understanding of the three basic points you outlined at the start as 'programming logic'. Thanks for putting all of that there for me! If you have the time/energy to do those conceptual examples you mentioned, and/or help with the implementation, I certainly won't complain. But this much is already appreciated.",
      "EditableFormat": "markdown",
      "HTML": "<p>....well that will certainly be useful when I know enough about scripting to implement it! For now I think the most I can take from it is the tip to avoid variable variables, and also the understanding of the three basic points you outlined at the start as 'programming logic'. Thanks for putting all of that there for me! If you have the time/energy to do those conceptual examples you mentioned, and/or help with the implementation, I certainly won't complain. But this much is already appreciated.</p>\n\n",
      "PostDate": "2020-08-14T10:21:42.4940441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e30e2fc-2414-4017-af2e-1b0d4fa01347",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n{once:This appears the first time}\r\n\r\n{notfirst:this appears the second and subsequent times}\r\n\r\n{notfirst:{once:This appears the second time only}}\r\n\r\n{notfirst:{notfirst:this appears the *third* and subsequent times}} because each notfirst makes it skip one occasion\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>{once:This appears the first time}\n\n{notfirst:this appears the second and subsequent times}\n\n{notfirst:{once:This appears the second time only}}\n\n{notfirst:{notfirst:this appears the *third* and subsequent times}} because each notfirst makes it skip one occasion\n</code></pre>\n\n",
      "PostDate": "2020-08-15T08:49:37.0174985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aebaacb1-89dd-4844-8596-07b2e279e535",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a similar thing where you repeatedly examine an object. Every time you do so, it just adds one to a counter for that specific object, and the if/else loops display a message based on the count. On the last description, the counter is reset to one and the loop begins anew.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a similar thing where you repeatedly examine an object. Every time you do so, it just adds one to a counter for that specific object, and the if/else loops display a message based on the count. On the last description, the counter is reset to one and the loop begins anew.</p>\n\n",
      "PostDate": "2020-09-06T22:47:59.3491713Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
