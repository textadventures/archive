{
  "Topic": {
    "TopicId": "u4kusbqzoes4ct4t-mbxkq",
    "ForumId": "10",
    "Title": "Simple code problem",
    "LastUpdated": "2020-09-14T19:16:37.3174884Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "20761211-a3fb-483e-9e7e-2b919667d8d1",
      "UserId": 497177,
      "Username": "Jonathan O",
      "AvatarUrl": "https://secure.gravatar.com/avatar/132db8a5bac291ae51f5b4b3f20cbf8c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to create a function to give a score based purely on which treasures a player is either carrying or has in a case (whether or not the player is holding the case). The code for the function at present is:\r\n\r\n```\r\nx = 0\r\nforeach (o, AllObjects()) {\r\n  if (o.parent = player or o.parent = case) {\r\n    x = x + o.treasure\r\n  }\r\n}\r\nreturn (x)\r\n```\r\nI've given each treasure an integer attribute, value 10, but the problem is that if I am carrying an object which is not a treasure there is an error. I presume this is because, if the code refers to an attribute for an object which doesn't have that attribute assigned, it is returned as an empty thing of type object. One method of dealing with this is to assign the treasure attribute as 0 to every carryable object, but is there a more efficient way to do this?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to create a function to give a score based purely on which treasures a player is either carrying or has in a case (whether or not the player is holding the case). The code for the function at present is:</p>\n<pre><code>x = 0\nforeach (o, AllObjects()) {\n  if (o.parent = player or o.parent = case) {\n    x = x + o.treasure\n  }\n}\nreturn (x)\n</code></pre>\n<p>I've given each treasure an integer attribute, value 10, but the problem is that if I am carrying an object which is not a treasure there is an error. I presume this is because, if the code refers to an attribute for an object which doesn't have that attribute assigned, it is returned as an empty thing of type object. One method of dealing with this is to assign the treasure attribute as 0 to every carryable object, but is there a more efficient way to do this?</p>\n\n",
      "PostDate": "2020-09-14T19:16:37.3174884Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ce82fcc8-8a35-4a6b-a575-3359d73d9e8f",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is probably what you want:\r\n```\r\nx = 0\r\nforeach (o, AllObjects()) {\r\n  if (o.parent = player or o.parent = case) {\r\n    if GetInt (o, \"treasure\") {                  // Checks if o has \"treasure\" integer attribute\r\n      x = x + o.treasure\r\n    }\r\n  }\r\n}\r\nreturn (x)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This is probably what you want:</p>\n<pre><code>x = 0\nforeach (o, AllObjects()) {\n  if (o.parent = player or o.parent = case) {\n    if GetInt (o, \"treasure\") {                  // Checks if o has \"treasure\" integer attribute\n      x = x + o.treasure\n    }\n  }\n}\nreturn (x)\n</code></pre>\n\n",
      "PostDate": "2020-09-14T22:46:25.4073189Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c0c28fc9-be07-482d-a0d3-45eb6d0f9567",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think you meant:\r\n```\r\nx = 0\r\nforeach (o, AllObjects()) {\r\n  if (o.parent = player or o.parent = case) {\r\n    if (HasInt (o, \"treasure\")) {\r\n      x = x + o.treasure\r\n    }\r\n  }\r\n}\r\nreturn (x)\r\n```\r\n\r\nHowever, it shouldn't be necessary to do this for every object. You can use GetDirectChildren to get the list of objects in the player and in the case. so you'd have:\r\n```\r\nx = 0\r\nobjects = ListCombine (GetDirectChildren (player), GetDirectChildren (case))\r\nforeach (o, objects) {\r\n  if (HasInt (o, \"treasure\")) {\r\n    x = x + o.treasure\r\n  }\r\n}\r\nreturn (x)\r\n```\r\nor to support the player putting other containers inside the inventory or the case:\r\n```\r\nx = 0\r\nobjects = GetAllChildObjects (player)\r\nif (not ListContains (objects, case)) {\r\n  objects = ListCombine (objects, GetAllChildObjects (case))\r\n}\r\nforeach (o, objects) {\r\n  if (HasInt (o, \"treasure\")) {\r\n    x = x + o.treasure\r\n  }\r\n}\r\nreturn (x)\r\n```\r\n(if the player is carrying the case, objects in the case don't need to be checked again)",
      "EditableFormat": "markdown",
      "HTML": "<p>I think you meant:</p>\n<pre><code>x = 0\nforeach (o, AllObjects()) {\n  if (o.parent = player or o.parent = case) {\n    if (HasInt (o, \"treasure\")) {\n      x = x + o.treasure\n    }\n  }\n}\nreturn (x)\n</code></pre>\n<p>However, it shouldn't be necessary to do this for every object. You can use GetDirectChildren to get the list of objects in the player and in the case. so you'd have:</p>\n<pre><code>x = 0\nobjects = ListCombine (GetDirectChildren (player), GetDirectChildren (case))\nforeach (o, objects) {\n  if (HasInt (o, \"treasure\")) {\n    x = x + o.treasure\n  }\n}\nreturn (x)\n</code></pre>\n<p>or to support the player putting other containers inside the inventory or the case:</p>\n<pre><code>x = 0\nobjects = GetAllChildObjects (player)\nif (not ListContains (objects, case)) {\n  objects = ListCombine (objects, GetAllChildObjects (case))\n}\nforeach (o, objects) {\n  if (HasInt (o, \"treasure\")) {\n    x = x + o.treasure\n  }\n}\nreturn (x)\n</code></pre>\n<p>(if the player is carrying the case, objects in the case don't need to be checked again)</p>\n\n",
      "PostDate": "2020-09-15T01:09:17.3404334Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fb5290a-1e4b-4876-a993-dcccf74bd75b",
      "UserId": 497177,
      "Username": "Jonathan O",
      "AvatarUrl": "https://secure.gravatar.com/avatar/132db8a5bac291ae51f5b4b3f20cbf8c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, that's very helpful.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, that's very helpful.</p>\n\n",
      "PostDate": "2020-09-15T07:40:32.3467712Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d399d37e-abcd-4868-b679-255c66e86818",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> if the code refers to an attribute for an object which doesn't have that attribute assigned, it is returned as an empty thing of type object.\r\n\r\nYep; empty attributes have the value `null`. This means that you can delete an attribute by setting it to null, and also you can do  things like this:\r\n\r\n```\r\nobjects = FilterByNotAttribute (AllObjects(), \"treasure\", null)\r\n```\r\nThat filters a list of objects, returning only the ones for which the treasure attribute is not null. It looks a bit weird using <code>FilterBy<b>Not</b>Attribute</code> like this, but it's the simplest way to get a list of all objects that have a specific attribute.\r\n\r\n(looping over all objects yourself and using `HasInt` is slightly more efficient; but the difference is so small it's not usually worth thinking about. In this case, I'd use whichever makes your code easier for you to understand)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>if the code refers to an attribute for an object which doesn't have that attribute assigned, it is returned as an empty thing of type object.</p>\n</blockquote>\n<p>Yep; empty attributes have the value <code>null</code>. This means that you can delete an attribute by setting it to null, and also you can do  things like this:</p>\n<pre><code>objects = FilterByNotAttribute (AllObjects(), \"treasure\", null)\n</code></pre>\n<p>That filters a list of objects, returning only the ones for which the treasure attribute is not null. It looks a bit weird using <code>FilterBy<b>Not</b>Attribute</code> like this, but it's the simplest way to get a list of all objects that have a specific attribute.</p>\n<p>(looping over all objects yourself and using <code>HasInt</code> is slightly more efficient; but the difference is so small it's not usually worth thinking about. In this case, I'd use whichever makes your code easier for you to understand)</p>\n\n",
      "PostDate": "2020-09-15T14:27:34.5970362Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
