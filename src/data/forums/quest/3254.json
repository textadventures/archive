{
  "Topic": {
    "TopicId": "3254",
    "ForumId": "10",
    "Title": "tables supported?",
    "LastUpdated": "2012-10-24T10:12:36+01:00",
    "ReplyCount": 12
  },
  "Posts": [
    {
      "PostId": "21613",
      "UserId": 0,
      "Username": "Kit_sune",
      "UserAvatar": null,
      "UserGravatar": "80215b2611cd5beb56afdbd96a6fb51d",
      "EditableText": "Being an analyst, I use spreadsheets every day at work. I’ve read in another program that you can code with tables. I couldn’t find support for this in Quest at all, is this possible? Or would it need to be used in a library file if I wanted to try using one?\nWhy would I want to use one you ask?\nWell instead of creating a bunch of templates like I had originally considered, I thought it would be better to create a few tables that could be referenced.\nI would just write the code that would make the starting attributes of the player the same as the table.\n\nlike,\nAttribute / human / elf\nhealth / 50  / 70\n\nThanks for your time and sorry if that's not clear enough.",
      "EditableFormat": "bbcode",
      "HTML": "Being an analyst, I use spreadsheets every day at work. I’ve read in another program that you can code with tables. I couldn’t find support for this in Quest at all, is this possible? Or would it need to be used in a library file if I wanted to try using one?<br/>Why would I want to use one you ask?<br/>Well instead of creating a bunch of templates like I had originally considered, I thought it would be better to create a few tables that could be referenced.<br/>I would just write the code that would make the starting attributes of the player the same as the table.<br/><br/>like,<br/>Attribute / human / elf<br/>health / 50  / 70<br/><br/>Thanks for your time and sorry if that's not clear enough.",
      "PostDate": "2012-10-21T03:13:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21618",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I have also thought that tables would be a good way to put in data when creating a game, but quest does not even support 2D arrays without some awkward hacking.",
      "EditableFormat": "bbcode",
      "HTML": "I have also thought that tables would be a good way to put in data when creating a game, but quest does not even support 2D arrays without some awkward hacking.",
      "PostDate": "2012-10-21T11:10:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21619",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I'd say, the closest you'd get in Quest is a string list. But every item in the list would be a string, so the numeric ones would be a bit tricky to handle (you'd have to know which were numbers and call ToString on them, for instance).\n\nAs far as coding with tables -that seems like a fairly specialized thing. What it really seems that you want is &quot;data import using tables&quot;, but there is nothing directly in Quest for that. In my opinion, that's a bit esoteric and not something the majority of people would want to do ever. (Yes - you're special! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )\n\nWhat would be handy (especially given Pixie's response) would be some form of serialized object format...",
      "EditableFormat": "bbcode",
      "HTML": "I'd say, the closest you'd get in Quest is a string list. But every item in the list would be a string, so the numeric ones would be a bit tricky to handle (you'd have to know which were numbers and call ToString on them, for instance).<br/><br/>As far as coding with tables -that seems like a fairly specialized thing. What it really seems that you want is &quot;data import using tables&quot;, but there is nothing directly in Quest for that. In my opinion, that's a bit esoteric and not something the majority of people would want to do ever. (Yes - you're special! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )<br/><br/>What would be handy (especially given Pixie's response) would be some form of serialized object format...",
      "PostDate": "2012-10-21T11:12:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21623",
      "UserId": 0,
      "Username": "Kit_sune",
      "UserAvatar": null,
      "UserGravatar": "80215b2611cd5beb56afdbd96a6fb51d",
      "EditableText": "Data importing using tables would be cool, but I know that's not available, lol.\n\nSo after searching a bit, I realize that tables are mostly a &quot;Lua&quot; language thing. (That's the language I started with) And the resource I was reading references their likeness to arrays, since most programmers are familiar with those.\n\n[quote:1t1of43v]\nFrom: <!-- m --><a class=\"postlink\" href=\"http://www.lua.org/pil/11.html\">http://www.lua.org/pil/11.html</a><!-- m -->\nLua\n11 – Data Structures\n\nTables in Lua are not a data structure; they are the data structure. All structures that other languages offer---arrays, records, lists, queues, sets---are represented with tables in Lua. More to the point, tables implement all these structures efficiently. \n\nIn traditional languages, such as C and Pascal, we implement most data structures with arrays and lists (where lists = records + pointers). Although we can implement arrays and lists using Lua tables (and sometimes we do that), tables are more powerful than arrays and lists; many algorithms are simplified to the point of triviality with the use of tables. For instance, you seldom write a search in Lua, because tables offer direct access to any type. \n\n[/quote:1t1of43v]\n\nI guess what I'm really looking for is something that looks like this:\n\n[code:1t1of43v] \n    LISTrace = {\n        human = { race = human, hp = 50, maxhp = 50, str = 4, atk = 5},\n        foxdemon = { race = fox, hp = 75, maxhp = 75, str = 3, atk = 4},\n        catdemon = { race = cat, hp = 60, maxhp = 60, str = 2, atk = 4},\n    }\n [/code:1t1of43v]\n\nOf course, this is just what I'm looking for. Let me reiterate - This is what I work with for my job, tables. I realize I wouldn't really know how to call the values from these arrays once I figured out how to make it work this way, lol.\n\nThanks for the input,",
      "EditableFormat": "bbcode",
      "HTML": "Data importing using tables would be cool, but I know that's not available, lol.<br/><br/>So after searching a bit, I realize that tables are mostly a &quot;Lua&quot; language thing. (That's the language I started with) And the resource I was reading references their likeness to arrays, since most programmers are familiar with those.<br/><br/><blockquote><p><br/>From: <!-- m --><a class=\"postlink\" href=\"http://www.lua.org/pil/11.html\">http://www.lua.org/pil/11.html</a><!-- m --><br/>Lua<br/>11 – Data Structures<br/><br/>Tables in Lua are not a data structure; they are the data structure. All structures that other languages offer---arrays, records, lists, queues, sets---are represented with tables in Lua. More to the point, tables implement all these structures efficiently. <br/><br/>In traditional languages, such as C and Pascal, we implement most data structures with arrays and lists (where lists = records + pointers). Although we can implement arrays and lists using Lua tables (and sometimes we do that), tables are more powerful than arrays and lists; many algorithms are simplified to the point of triviality with the use of tables. For instance, you seldom write a search in Lua, because tables offer direct access to any type. <br/><br/></p></blockquote><br/><br/>I guess what I'm really looking for is something that looks like this:<br/><br/><pre><code> <br/>    LISTrace = {<br/>        human = { race = human, hp = 50, maxhp = 50, str = 4, atk = 5},<br/>        foxdemon = { race = fox, hp = 75, maxhp = 75, str = 3, atk = 4},<br/>        catdemon = { race = cat, hp = 60, maxhp = 60, str = 2, atk = 4},<br/>    }<br/> </code></pre><br/><br/>Of course, this is just what I'm looking for. Let me reiterate - This is what I work with for my job, tables. I realize I wouldn't really know how to call the values from these arrays once I figured out how to make it work this way, lol.<br/><br/>Thanks for the input,",
      "PostDate": "2012-10-21T16:38:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21627",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Well I'm always up for a challenge... Attached is an implementation that re-implements your other test app, but uses a string for each race with format:\n\nname=value, name=value, name=value, ...\n\nThere is a function called &quot;ApplyAttributes&quot;, which takes an object (e.g. the player) and a string like the above, and for each name/value pair, assigns an attribute to the object with the given value.\n\nFor example, you can list the &quot;Human&quot; attributes as &quot;race=human, maxhp=50, speed=10, stamina=45&quot;, and if you ApplyAttributes to the player with this string, then player.race will equal &quot;human&quot; (as a string), maxhp will equal 50 (as a number), etc.\n\nThis is a more compact format, and is in line (I think) with what you want.\n\nThe test app has a string attribute for each race stored in the game. The list to be shown is built up directly, and the menu shown. Then the selected race's attributes are applied to the player.\n\nSee how that is!",
      "EditableFormat": "bbcode",
      "HTML": "Well I'm always up for a challenge... Attached is an implementation that re-implements your other test app, but uses a string for each race with format:<br/><br/>name=value, name=value, name=value, ...<br/><br/>There is a function called &quot;ApplyAttributes&quot;, which takes an object (e.g. the player) and a string like the above, and for each name/value pair, assigns an attribute to the object with the given value.<br/><br/>For example, you can list the &quot;Human&quot; attributes as &quot;race=human, maxhp=50, speed=10, stamina=45&quot;, and if you ApplyAttributes to the player with this string, then player.race will equal &quot;human&quot; (as a string), maxhp will equal 50 (as a number), etc.<br/><br/>This is a more compact format, and is in line (I think) with what you want.<br/><br/>The test app has a string attribute for each race stored in the game. The list to be shown is built up directly, and the menu shown. Then the selected race's attributes are applied to the player.<br/><br/>See how that is!<div><a href=\"/forumattachments/397/ApplyAttributes.aslx\">ApplyAttributes.aslx</a></div>",
      "PostDate": "2012-10-21T19:46:50+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21630",
      "UserId": 0,
      "Username": "Kit_sune",
      "UserAvatar": null,
      "UserGravatar": "80215b2611cd5beb56afdbd96a6fb51d",
      "EditableText": "This is probably the closest I could get to what I wanted, and I'm happy + excited to use this format!\n\nYou had,\n[code:1qbob39g]\n    &lt;HumanRace&gt;race=human, maxhp=50, speed=10, stamina=45&lt;/HumanRace&gt;\n    &lt;DogRace&gt;race=dog, maxhp=15, speed=20, stamina=20&lt;/DogRace&gt;\n    &lt;CatRace&gt;race=cat, maxhp=8, speed=15, stamina=18&lt;/CatRace&gt;\n[/code:1qbob39g]\n\nWould there be any way to make it so that these lists (HumanRace, DogRace, CatRace) were inside of another list? (like a races list) For instance, so that maybe the dictionary choices could read as follows:\n[code:1qbob39g]\n      dictionary add (choices, game&#46;races&#46;HumanRace, &quot;Human&quot;)\n      dictionary add (choices, game&#46;races&#46;CatRace, &quot;Cat&quot;)\n      dictionary add (choices, game&#46;races&#46;DogRace, &quot;Dog&quot;)\n[/code:1qbob39g]\n\nIt might just be complicating things a little too much. I am aware that there really wouldn't be much of a difference to do it either way, if it was possible, but just something that I am very very curious about.",
      "EditableFormat": "bbcode",
      "HTML": "This is probably the closest I could get to what I wanted, and I'm happy + excited to use this format!<br/><br/>You had,<br/><pre><code><br/>    &lt;HumanRace&gt;race=human, maxhp=50, speed=10, stamina=45&lt;/HumanRace&gt;<br/>    &lt;DogRace&gt;race=dog, maxhp=15, speed=20, stamina=20&lt;/DogRace&gt;<br/>    &lt;CatRace&gt;race=cat, maxhp=8, speed=15, stamina=18&lt;/CatRace&gt;<br/></code></pre><br/><br/>Would there be any way to make it so that these lists (HumanRace, DogRace, CatRace) were inside of another list? (like a races list) For instance, so that maybe the dictionary choices could read as follows:<br/><pre><code><br/>      dictionary add (choices, game&#46;races&#46;HumanRace, &quot;Human&quot;)<br/>      dictionary add (choices, game&#46;races&#46;CatRace, &quot;Cat&quot;)<br/>      dictionary add (choices, game&#46;races&#46;DogRace, &quot;Dog&quot;)<br/></code></pre><br/><br/>It might just be complicating things a little too much. I am aware that there really wouldn't be much of a difference to do it either way, if it was possible, but just something that I am very very curious about.",
      "PostDate": "2012-10-21T20:39:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21631",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "The only way you can have the dot notation is with an object. So in your case, if you had &quot;game.races.xxx&quot;, then &quot;races&quot; would need to be an object. Or, more correctly, an object *reference* since it's an attribute of another object - which means you need an object to refer to. So you can do it like this:\n\nCreate an object to hold the race strings.\n\n[code:1nf9h7bw]&lt;object name=&quot;Races&quot;&gt;\n    &lt;HumanRace&gt;race=human, maxhp=50, speed=10, stamina=45&lt;/HumanRace&gt;\n    &lt;DogRace&gt;race=dog, maxhp=15, speed=20, stamina=20&lt;/DogRace&gt;\n    &lt;CatRace&gt;race=cat, maxhp=8, speed=15, stamina=18&lt;/CatRace&gt;\n&#46;&#46;&#46;\n&lt;/object&gt;[/code:1nf9h7bw]\n\nAnd then in your game object have:\n\n[code:1nf9h7bw]&lt;game &#46;&#46;&#46;&gt;\n&#46;&#46;&#46;&#46;\n  &lt;races type=&quot;object&quot;&gt;Races&lt;/races&gt;\n&#46;&#46;&#46;\n&lt;/game&gt;[/code:1nf9h7bw]\n\nThen you can either use &quot;game.races.HumanRace&quot; or just &quot;Races.HumanRace&quot;. If you prefer the second format, then don't even bother with the game &quot;races&quot; attribute. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nBelieve me, I understand the motivation for this, that desire to organize things!",
      "EditableFormat": "bbcode",
      "HTML": "The only way you can have the dot notation is with an object. So in your case, if you had &quot;game.races.xxx&quot;, then &quot;races&quot; would need to be an object. Or, more correctly, an object *reference* since it's an attribute of another object - which means you need an object to refer to. So you can do it like this:<br/><br/>Create an object to hold the race strings.<br/><br/><pre><code>&lt;object name=&quot;Races&quot;&gt;<br/>    &lt;HumanRace&gt;race=human, maxhp=50, speed=10, stamina=45&lt;/HumanRace&gt;<br/>    &lt;DogRace&gt;race=dog, maxhp=15, speed=20, stamina=20&lt;/DogRace&gt;<br/>    &lt;CatRace&gt;race=cat, maxhp=8, speed=15, stamina=18&lt;/CatRace&gt;<br/>&#46;&#46;&#46;<br/>&lt;/object&gt;</code></pre><br/><br/>And then in your game object have:<br/><br/><pre><code>&lt;game &#46;&#46;&#46;&gt;<br/>&#46;&#46;&#46;&#46;<br/>  &lt;races type=&quot;object&quot;&gt;Races&lt;/races&gt;<br/>&#46;&#46;&#46;<br/>&lt;/game&gt;</code></pre><br/><br/>Then you can either use &quot;game.races.HumanRace&quot; or just &quot;Races.HumanRace&quot;. If you prefer the second format, then don't even bother with the game &quot;races&quot; attribute. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Believe me, I understand the motivation for this, that desire to organize things!",
      "PostDate": "2012-10-21T20:51:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21633",
      "UserId": 0,
      "Username": "Kit_sune",
      "UserAvatar": null,
      "UserGravatar": "80215b2611cd5beb56afdbd96a6fb51d",
      "EditableText": "Awesome, that worked like a charm!\n\nSo the function ApplyAttributes does all these nifty things for me behind the scenes, I like it! Now if only I knew exactly how it works.\nI get the jist of it, but it would take me a long time to come up with something like that.",
      "EditableFormat": "bbcode",
      "HTML": "Awesome, that worked like a charm!<br/><br/>So the function ApplyAttributes does all these nifty things for me behind the scenes, I like it! Now if only I knew exactly how it works.<br/>I get the jist of it, but it would take me a long time to come up with something like that.",
      "PostDate": "2012-10-21T22:30:59+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21634",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Basically, it starts at the beginning of the string and looks for an equals sign and then takes the word between the start and there as the attribute name. Then it looks past the equals sign for either a comma or end of string, and uses everything in between as the value. It uses trim to trim off any white space. Then it looks at the value. If it's numeric, it converts it to an int and assigns it to the object. Otherwise, it just assigns it to the object as a string. \n\nIt does that over and over, marching along, until it runs out of string. Of course, the devil is in the details... I've written code like that far too many times. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nGlad it's working for you.",
      "EditableFormat": "bbcode",
      "HTML": "Basically, it starts at the beginning of the string and looks for an equals sign and then takes the word between the start and there as the attribute name. Then it looks past the equals sign for either a comma or end of string, and uses everything in between as the value. It uses trim to trim off any white space. Then it looks at the value. If it's numeric, it converts it to an int and assigns it to the object. Otherwise, it just assigns it to the object as a string. <br/><br/>It does that over and over, marching along, until it runs out of string. Of course, the devil is in the details... I've written code like that far too many times. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Glad it's working for you.",
      "PostDate": "2012-10-21T23:47:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21658",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Just a followup note... I realized that the StringDictionary format is almost identical to the string format used in this sample, except a StringDictionary uses semicolons instead of commas. So there already is a compact way to specify some forms of data in Quest. It would be straightforward (and less code!) to rewrite &quot;ApplyAttributes&quot; to use a string dictionary instead of parsing a string. If anyone wants it, let me know.",
      "EditableFormat": "bbcode",
      "HTML": "Just a followup note... I realized that the StringDictionary format is almost identical to the string format used in this sample, except a StringDictionary uses semicolons instead of commas. So there already is a compact way to specify some forms of data in Quest. It would be straightforward (and less code!) to rewrite &quot;ApplyAttributes&quot; to use a string dictionary instead of parsing a string. If anyone wants it, let me know.",
      "PostDate": "2012-10-24T00:12:08+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21659",
      "UserId": 0,
      "Username": "Kit_sune",
      "UserAvatar": null,
      "UserGravatar": "80215b2611cd5beb56afdbd96a6fb51d",
      "EditableText": "Heck,\n\nEven if it does nearly the same thing as the ApplyAttributes function, I'd be more than willing to see how the StringDictionary version of it works so I could learn some more. It could come in useful.\n\nJust a quick question for whoever reads it, did you all go to a programing course/class/school?\n\nI've had to self teach myself a lot of things, and programing has been by far the toughest thing to learn. I've been returning to it for over 13 years (when I was 13 years old) with various different programs that allow you to manipulate code. I've always been fascinated by it, but I've never had the fortune to take any classes, and most tutorials I've poked around in were really confusing with how they bounce around.\n\nI don't want anyone here to get the idea that I'm trying to get you all to write all my code for me - I really aim to learn this stuff. But it's kind of embarrasing asking for so much help because I know you all have your own projects, and have been to school, so why should I get any special treatment? I'm just so grateful with all the help I've received so far that for once I feel like I might actually be begining to understand how this stuff works.\n\nI'm the kind of person who needs to understand every . little . detail about how something works before it all clicks into place. It's like putting all the cogs together. If I'm missing even one cog, they won't function properly!!!\n\nOk I'm done with my story XD\nIf TLDR I'm sorry !!\nKitsune",
      "EditableFormat": "bbcode",
      "HTML": "Heck,<br/><br/>Even if it does nearly the same thing as the ApplyAttributes function, I'd be more than willing to see how the StringDictionary version of it works so I could learn some more. It could come in useful.<br/><br/>Just a quick question for whoever reads it, did you all go to a programing course/class/school?<br/><br/>I've had to self teach myself a lot of things, and programing has been by far the toughest thing to learn. I've been returning to it for over 13 years (when I was 13 years old) with various different programs that allow you to manipulate code. I've always been fascinated by it, but I've never had the fortune to take any classes, and most tutorials I've poked around in were really confusing with how they bounce around.<br/><br/>I don't want anyone here to get the idea that I'm trying to get you all to write all my code for me - I really aim to learn this stuff. But it's kind of embarrasing asking for so much help because I know you all have your own projects, and have been to school, so why should I get any special treatment? I'm just so grateful with all the help I've received so far that for once I feel like I might actually be begining to understand how this stuff works.<br/><br/>I'm the kind of person who needs to understand every . little . detail about how something works before it all clicks into place. It's like putting all the cogs together. If I'm missing even one cog, they won't function properly!!!<br/><br/>Ok I'm done with my story XD<br/>If TLDR I'm sorry !!<br/>Kitsune",
      "PostDate": "2012-10-24T01:56:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21662",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I wondered why you did not use a string dictionary.\n\nHere is an alternatve version. ApplyAttributes is much smaller, but other parts of the code got bigger. I found the easiest way was to have each race template as an object, with stringdictionary attached.\n\n[code:1eke1wt6]&lt;!--Saved by Quest 5&#46;2&#46;4515&#46;34846--&gt;\n&lt;asl version=&quot;520&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;ApplyAttributes&quot;&gt;\n    &lt;gameid&gt;e4c54dda-b7a0-470f-abbc-2d603f94a18e&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;start type=&quot;script&quot;&gt;\n      choices = NewStringList()\n      races = NewObjectList()\n      list add (races, HumanRace)\n      list add (races, CatRace)\n      list add (races, DogRace)\n      foreach (race, races) {\n        list add (choices, race&#46;name)\n      }\n      msg(&quot; &quot;)\n\t  show menu (&quot;What is your race?&quot;, choices, false) {\n\t    // Copy all the attributes, using the &quot;attributes&quot; string list as key&#46;\n\t  \tApplyAttributes(player, GetObject (result))\n\n\t    msg(&quot;player&#46;race = &quot; + player&#46;race)\n\t    msg(&quot;player&#46;maxhp = &quot; + player&#46;maxhp)\n\t    msg(&quot;player&#46;speed = &quot; + player&#46;speed)\n\t    msg(&quot;player&#46;stamina = &quot; + player&#46;stamina)\n\t  }\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;HumanRace&quot;&gt;\n    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Human; maxhp=50; speed=10; stamina=45&lt;/stats&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;DogRace&quot;&gt;\n    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Dog; maxhp=15; speed=20; stamina=20&lt;/stats&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;CatRace&quot;&gt;\n    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Cat; maxhp=8; speed=15; stamina=18&lt;/stats&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;defaultplayer&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=&quot;ApplyAttributes&quot; parameters=&quot;object, race&quot;&gt;&lt;!&#91;CDATA&#91;\n    foreach (attribute, race&#46;stats) {\n      value = StringDictionaryItem (race&#46;stats, attribute)\n      if (IsNumeric(value)) {\n      \tset (object, attribute, ToInt(value))\n      } else {\n      \tset (object, attribute, value)\n      }\n    }\n  &#93;&#93;&gt;&lt;/function&gt;\n&lt;/asl&gt;[/code:1eke1wt6]",
      "EditableFormat": "bbcode",
      "HTML": "I wondered why you did not use a string dictionary.<br/><br/>Here is an alternatve version. ApplyAttributes is much smaller, but other parts of the code got bigger. I found the easiest way was to have each race template as an object, with stringdictionary attached.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;2&#46;4515&#46;34846--&gt;<br/>&lt;asl version=&quot;520&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;ApplyAttributes&quot;&gt;<br/>    &lt;gameid&gt;e4c54dda-b7a0-470f-abbc-2d603f94a18e&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;start type=&quot;script&quot;&gt;<br/>      choices = NewStringList()<br/>      races = NewObjectList()<br/>      list add (races, HumanRace)<br/>      list add (races, CatRace)<br/>      list add (races, DogRace)<br/>      foreach (race, races) {<br/>        list add (choices, race&#46;name)<br/>      }<br/>      msg(&quot; &quot;)<br/>\t  show menu (&quot;What is your race?&quot;, choices, false) {<br/>\t    // Copy all the attributes, using the &quot;attributes&quot; string list as key&#46;<br/>\t  \tApplyAttributes(player, GetObject (result))<br/><br/>\t    msg(&quot;player&#46;race = &quot; + player&#46;race)<br/>\t    msg(&quot;player&#46;maxhp = &quot; + player&#46;maxhp)<br/>\t    msg(&quot;player&#46;speed = &quot; + player&#46;speed)<br/>\t    msg(&quot;player&#46;stamina = &quot; + player&#46;stamina)<br/>\t  }<br/>    &lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;HumanRace&quot;&gt;<br/>    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Human; maxhp=50; speed=10; stamina=45&lt;/stats&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;DogRace&quot;&gt;<br/>    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Dog; maxhp=15; speed=20; stamina=20&lt;/stats&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;CatRace&quot;&gt;<br/>    &lt;stats type=&quot;stringdictionary&quot;&gt;race=Cat; maxhp=8; speed=15; stamina=18&lt;/stats&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;defaultplayer&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;function name=&quot;ApplyAttributes&quot; parameters=&quot;object, race&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    foreach (attribute, race&#46;stats) {<br/>      value = StringDictionaryItem (race&#46;stats, attribute)<br/>      if (IsNumeric(value)) {<br/>      \tset (object, attribute, ToInt(value))<br/>      } else {<br/>      \tset (object, attribute, value)<br/>      }<br/>    }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2012-10-24T09:06:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21663",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "That looks great. Thanks, Pixie! (Is &quot;Pixie&quot; ok, or do you prefer &quot;Pix&quot; or &quot;The Pixie&quot; or &quot;The Pix&quot; or..? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "EditableFormat": "bbcode",
      "HTML": "That looks great. Thanks, Pixie! (Is &quot;Pixie&quot; ok, or do you prefer &quot;Pix&quot; or &quot;The Pixie&quot; or &quot;The Pix&quot; or..? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "PostDate": "2012-10-24T10:12:36+01:00",
      "LastEditDate": null
    }
  ]
}