{
  "Topic": {
    "TopicId": "n7ssidbwqeeu4sls-ljtga",
    "ForumId": "10",
    "Title": "Invoke Script on Cloned Object?",
    "LastUpdated": "2016-09-01T07:41:32.3741304Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7b6dabb9-878e-4873-9b40-da6ba6db97bc",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello Quest! So what im trying to do is make a storage chest that can be cloned and hold items from inventory. Well I made a verb on chest called \"store\" when clicked it gets all inventory items and showsmenu, well after I call if (result =\" axe\") i wanted to move axe to \"this\" being its a clone. But that doesn't work so I tried to add a attribute called \"addaxe\" then after I call my (if axe) then (invoke (this, \"addaxe\")) but always end up with same error as it can't refer to itself after trying to run new script. How can i refer to the cloned chest EVEN after If and then statement is called? I know its probably simple as always but always have the hardest times with these clones thanks for your time.\r\n\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello Quest! So what im trying to do is make a storage chest that can be cloned and hold items from inventory. Well I made a verb on chest called \"store\" when clicked it gets all inventory items and showsmenu, well after I call if (result =\" axe\") i wanted to move axe to \"this\" being its a clone. But that doesn't work so I tried to add a attribute called \"addaxe\" then after I call my (if axe) then (invoke (this, \"addaxe\")) but always end up with same error as it can't refer to itself after trying to run new script. How can i refer to the cloned chest EVEN after If and then statement is called? I know its probably simple as always but always have the hardest times with these clones thanks for your time.</p>\n<p>Mike</p>\n\n",
      "PostDate": "2016-09-01T07:41:32.3741304Z",
      "LastEditDate": null
    },
    {
      "PostId": "ca5ae2aa-f773-46cc-a000-150a1480d2e8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You have a space between the first double quote and axe; if that is in your code, Quest will be trying to match the wrong thing. However, the basic problem is that `this` is only valid for the script attached to the chest. The ShowMenu has its own script, which is not associated with anything, and inside there `this` is meaningless.\r\n\r\nIt is not neat, but the work around is to set an attribute on the game object.\r\n```\r\ngame.showmenuitem = this\r\nShowMenu(...whatever...) {\r\n  if (result = \"axe\") {\r\n    ace.parent = game.showmenuitem\r\n  }\r\n}\r\n```\r\nIn fact, a neater way would be to get the object from the result (if the menu shows names, not aliases). The bit inside the ShowMenu script becomes this, and will hadle any object:\r\n```\r\nobj = GetObject(result)\r\nobj.parent = game.showmenuitem\r\n```\r\nBy the way, if you use `invoke`, you cannot use `this`. I always use `do`, as it is otherwise the same, but gives you `this` (and is four letters less typing!).\r\nhttp://docs.textadventures.co.uk/quest/scripts/do.html",
      "EditableFormat": "markdown",
      "HTML": "<p>You have a space between the first double quote and axe; if that is in your code, Quest will be trying to match the wrong thing. However, the basic problem is that <code>this</code> is only valid for the script attached to the chest. The ShowMenu has its own script, which is not associated with anything, and inside there <code>this</code> is meaningless.</p>\n<p>It is not neat, but the work around is to set an attribute on the game object.</p>\n<pre><code>game.showmenuitem = this\nShowMenu(...whatever...) {\n  if (result = \"axe\") {\n    ace.parent = game.showmenuitem\n  }\n}\n</code></pre>\n<p>In fact, a neater way would be to get the object from the result (if the menu shows names, not aliases). The bit inside the ShowMenu script becomes this, and will hadle any object:</p>\n<pre><code>obj = GetObject(result)\nobj.parent = game.showmenuitem\n</code></pre>\n<p>By the way, if you use <code>invoke</code>, you cannot use <code>this</code>. I always use <code>do</code>, as it is otherwise the same, but gives you <code>this</code> (and is four letters less typing!).<br>\nhttp://docs.textadventures.co.uk/quest/scripts/do.html</p>\n\n",
      "PostDate": "2016-09-01T09:02:19.719583Z",
      "LastEditDate": "2016-09-01T09:05:47.7163354Z"
    },
    {
      "PostId": "969a0995-f7b8-4d5f-b867-adaa9632eca1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "for calling simple Script Attributes you can use 'invoke' (well I do anyways), but the 'do' is much more powerful/useful than is 'invoke'. Pixie's point that it is less typing is also a good point, but I use 'invoke' as it's quick/easy to code in, for example:\r\n\r\ninvoke (game.start) // the built-in 'start' Script Attribute is found in the GUI~Editor: 'game' Game Object -> 'Scripts' Tab -> the 'start' Script, which is the first thing that is done/run/activated/executed after the game loads up/is initialzed/built-up. 'invoke' and 'do' is a way of looping/repeating/re-doing Script Attributes ('invoke/do' the Script Attribute inside of the Script Attribute), just as you would to loop Functions (calling the Function within the Function). Or, 'invoke/do' can just be used to call/activate the Script Attribute too (from anywhere), you don't have to use them to do looping.\r\n\r\nwhat makes 'do' more powerful (at least in one way), is that you can concatenate for your Object's Name and/or its Attribute's Name, (I am still confused at, what are and how the, dictionary arguments/parameters work, lol), for a very lame/impractical example:\r\n\r\n(pretend that the 'show menu' is inside a Function, which is called when you level up --- which would be done through/within a global Turnscript or the special 'changed' Script on, in this case, the 'player' Player Object, let's say, via checking your 'experience' Integer Attribute to your 'experience needed to level up')\r\n\r\n```\r\n<object name=\"player\">\r\n  <attr name=\"strength_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"endurance_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity_integer_attribute\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"strength_script_attribute\" type=\"script\">\r\n    this.strength_integer_attribute = this.strength_integer_attribute + 1\r\n  </attr>\r\n\r\n  <attr name=\"endurance_script_attribute\" type=\"script\">\r\n    this.endurance_integer_attribute = this.endurance_integer_attribute + 1\r\n  </attr>\r\n\r\n  <attr name=\"dexterity_script_attribute\" type=\"script\">\r\n    this.dexterity_integer_attribute = this.dexterity_integer_attribute + 1\r\n  </attr>\r\n</object>\r\n\r\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\r\n  do (player, result + \"_script_attribute\")\r\n}\r\n```\r\n\r\nbut if I wanted to use 'invoke', I'd have to do this instead (as there's no concatenation available with 'invoke', at least I don't think so... lol):\r\n\r\n```\r\n<object name=\"player\">\r\n  <attr name=\"strength_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"endurance_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity_integer_attribute\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"strength_script_attribute\" type=\"script\">\r\n    this.strength_integer_attribute = this.strength_integer_attribute + 1\r\n  </attr>\r\n\r\n  <attr name=\"endurance_script_attribute\" type=\"script\">\r\n    this.endurance_integer_attribute = this.endurance_integer_attribute + 1\r\n  </attr>\r\n\r\n  <attr name=\"dexterity_script_attribute\" type=\"script\">\r\n    this.dexterity_integer_attribute = this.dexterity_integer_attribute + 1\r\n  </attr>\r\n</object>\r\n\r\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\r\n  if (result = \"strength\") {\r\n    invoke (player.strength_script_attribute)\r\n  } else if (result = \"endurance\") {\r\n    invoke (player.endurance_script_attribute)\r\n  } else if (result = \"dexterity\") {\r\n    invoke (player.dexterity_script_attribute\r\n  }\r\n}\r\n\r\n// or, if you prefer using the 'switch' Script/Function instead of 'if' Script:\r\n\r\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\r\n  switch (result) {\r\n    case (\"strength\") {\r\n      invoke (player.strength_script_attribute)\r\n    }\r\n    case (\"endurance\") {\r\n      invoke (player.endurance_script_attribute)\r\n    }\r\n    case (\"dexterity\") {\r\n      invoke (player.dexterity_script_attribute)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n------------\r\n\r\nand ya, possibly good spot by Pixie:\r\n\r\nALWAYS be careful of accidental spaces... especially when you go to copy and paste, as if you accidentally highlight too far and copy those extra spaces, then you're going to get errors, as string matching includes spaces/white-spaces:\r\n\r\n```\r\n\"strength\" = \"strength\" // TRUE\r\n\"              strenth\" = \"strength\" // FALSE\r\n\"strength                \" = \"strength\" // FALSE\r\n\"stre                  ngth\" = \"strength\" // FALSE\r\n\" strength\" = \"strength\" // FALSE\r\n\"strength \" = \"strength\" // FALSE\r\n\"stre ngth\" = \"strength\" // FALSE\r\n\r\nnoticing a spacing issue is extremely hard... lol. So try to catch it in the moment it occurs, otherwise, you'll and we'll be pulling our hair out, in trying to figure out what/where is the cause of the error(s), lol.\r\n\r\nfor example, if you have a very long/large scripting block... the error will show the the entire scripting block, and thus good luck scouring through that long/large scripting block for the issue(s) causing the error(s) with it... as you don't even know if it's a spacing issue or something else that is wrong with it... and even if/when you're checking for a spacing issue... actually spotting it is very difficult... it's easy for your eyes/brain to go right by it even when you're checking for it, due to how the brain works.\r\n\r\n---------\r\n\r\nHumans LOVE spaces:\r\n\r\nhkisan18yearoldmalehumanwarrior // YUCK!\r\nhk is an 18 year old male human warrior // Much better! (HK wishes he was still 18, lol)\r\n\r\nWhereas, computers HATE spaces! (ignoring using spaces for parsing of course --- but that's still a lot of work/operations for a computer and for you to code in, as well. So the 'HATE' is still accurate, and the statement true, lol)",
      "EditableFormat": "markdown",
      "HTML": "<p>for calling simple Script Attributes you can use 'invoke' (well I do anyways), but the 'do' is much more powerful/useful than is 'invoke'. Pixie's point that it is less typing is also a good point, but I use 'invoke' as it's quick/easy to code in, for example:</p>\n<p>invoke (game.start) // the built-in 'start' Script Attribute is found in the GUI~Editor: 'game' Game Object -&gt; 'Scripts' Tab -&gt; the 'start' Script, which is the first thing that is done/run/activated/executed after the game loads up/is initialzed/built-up. 'invoke' and 'do' is a way of looping/repeating/re-doing Script Attributes ('invoke/do' the Script Attribute inside of the Script Attribute), just as you would to loop Functions (calling the Function within the Function). Or, 'invoke/do' can just be used to call/activate the Script Attribute too (from anywhere), you don't have to use them to do looping.</p>\n<p>what makes 'do' more powerful (at least in one way), is that you can concatenate for your Object's Name and/or its Attribute's Name, (I am still confused at, what are and how the, dictionary arguments/parameters work, lol), for a very lame/impractical example:</p>\n<p>(pretend that the 'show menu' is inside a Function, which is called when you level up --- which would be done through/within a global Turnscript or the special 'changed' Script on, in this case, the 'player' Player Object, let's say, via checking your 'experience' Integer Attribute to your 'experience needed to level up')</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  &lt;attr name=\"strength_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"strength_script_attribute\" type=\"script\"&gt;\n    this.strength_integer_attribute = this.strength_integer_attribute + 1\n  &lt;/attr&gt;\n\n  &lt;attr name=\"endurance_script_attribute\" type=\"script\"&gt;\n    this.endurance_integer_attribute = this.endurance_integer_attribute + 1\n  &lt;/attr&gt;\n\n  &lt;attr name=\"dexterity_script_attribute\" type=\"script\"&gt;\n    this.dexterity_integer_attribute = this.dexterity_integer_attribute + 1\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\n  do (player, result + \"_script_attribute\")\n}\n</code></pre>\n<p>but if I wanted to use 'invoke', I'd have to do this instead (as there's no concatenation available with 'invoke', at least I don't think so... lol):</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  &lt;attr name=\"strength_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"strength_script_attribute\" type=\"script\"&gt;\n    this.strength_integer_attribute = this.strength_integer_attribute + 1\n  &lt;/attr&gt;\n\n  &lt;attr name=\"endurance_script_attribute\" type=\"script\"&gt;\n    this.endurance_integer_attribute = this.endurance_integer_attribute + 1\n  &lt;/attr&gt;\n\n  &lt;attr name=\"dexterity_script_attribute\" type=\"script\"&gt;\n    this.dexterity_integer_attribute = this.dexterity_integer_attribute + 1\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\n  if (result = \"strength\") {\n    invoke (player.strength_script_attribute)\n  } else if (result = \"endurance\") {\n    invoke (player.endurance_script_attribute)\n  } else if (result = \"dexterity\") {\n    invoke (player.dexterity_script_attribute\n  }\n}\n\n// or, if you prefer using the 'switch' Script/Function instead of 'if' Script:\n\nshow menu (\"Stat?\", split (\"strength;endurance;dexterity\", \";\"), false) {\n  switch (result) {\n    case (\"strength\") {\n      invoke (player.strength_script_attribute)\n    }\n    case (\"endurance\") {\n      invoke (player.endurance_script_attribute)\n    }\n    case (\"dexterity\") {\n      invoke (player.dexterity_script_attribute)\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>and ya, possibly good spot by Pixie:</p>\n<p>ALWAYS be careful of accidental spaces... especially when you go to copy and paste, as if you accidentally highlight too far and copy those extra spaces, then you're going to get errors, as string matching includes spaces/white-spaces:</p>\n<pre><code>\"strength\" = \"strength\" // TRUE\n\"              strenth\" = \"strength\" // FALSE\n\"strength                \" = \"strength\" // FALSE\n\"stre                  ngth\" = \"strength\" // FALSE\n\" strength\" = \"strength\" // FALSE\n\"strength \" = \"strength\" // FALSE\n\"stre ngth\" = \"strength\" // FALSE\n\nnoticing a spacing issue is extremely hard... lol. So try to catch it in the moment it occurs, otherwise, you'll and we'll be pulling our hair out, in trying to figure out what/where is the cause of the error(s), lol.\n\nfor example, if you have a very long/large scripting block... the error will show the the entire scripting block, and thus good luck scouring through that long/large scripting block for the issue(s) causing the error(s) with it... as you don't even know if it's a spacing issue or something else that is wrong with it... and even if/when you're checking for a spacing issue... actually spotting it is very difficult... it's easy for your eyes/brain to go right by it even when you're checking for it, due to how the brain works.\n\n---------\n\nHumans LOVE spaces:\n\nhkisan18yearoldmalehumanwarrior // YUCK!\nhk is an 18 year old male human warrior // Much better! (HK wishes he was still 18, lol)\n\nWhereas, computers HATE spaces! (ignoring using spaces for parsing of course --- but that's still a lot of work/operations for a computer and for you to code in, as well. So the 'HATE' is still accurate, and the statement true, lol)\n</code></pre>\n\n",
      "PostDate": "2016-09-01T12:57:31.2542613Z",
      "LastEditDate": "2016-09-01T20:14:50.0556799Z"
    },
    {
      "PostId": "f886bf51-a365-48a8-bfcd-f221406b8aec",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey thanks guys no spaces just typed in by accident but im still confused, when I add the showmenuitem to game I get errors non stop and yes I seen the ace.parent and changed it but get loads of errors. So i tried the \"do\" which as i understand \"do\" is a \"then\" statement right?  Here is the code I call in my cloned chest\r\n**if (ListContains(ScopeVisible(), this)) {\r\n  string_dict = NewStringDictionary()\r\n  foreach (obj, ScopeInventory()) {\r\n    dictionary add (string_dict, obj.name, GetDisplayName(obj))\r\n  }\r\n  ShowMenu (\"Pick an item\", string_dict, true) {\r\n    obj = GetObject(result)\r\n    msg (\"You selected the \" + GetDisplayName(obj))\r\n    if (result = \"stoneaxe\") {\r\n      invoke (this, \"addaxe\") // Which does (CloneObjectAndMove (stoneaxe, this)) MoveObject (stoneaxe, Items)\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"You need to be by a storage chest to store this item.\")\r\n}**\r\n\r\nEvery thing works up until the Invoke obviously lol \r\n I know \"this\" doesn't work neither does \"do\" in our \"Invoke script\" and would rather have the code beside it(Which is the clone axe and move to \"this\") but doesn't work, I know after menu showed calls new script so \"this\" is now null and Kind of understand what Pixies taking about by setting the var in the game, but seems to be getting really complicating adding a item to a cloned container. \r\n\r\nThanks again guys always love the Info you all leave gives me lots to read and play with :)\r\nMike   \r\n\r\nEDIT:\r\nOk so working with the code Pixie gave where setting var in game and casting menu so all works now besides moving object axe to cloned chest \r\nheres code in game \r\n**game.showmenuitems = this\r\nstring_dict = NewStringDictionary()\r\nforeach (obj, ScopeInventory()) {\r\n  dictionary add (string_dict, obj.name, GetDisplayName(obj))\r\n}\r\nShowMenu (\"Pick an item\", string_dict, true) {\r\n  obj = GetObject(result)\r\n  msg (\"You selected the \" + GetDisplayName(obj))\r\n  if (result = \"stoneaxe\") {\r\n    stoneaxe.parent = game.showmenuitems\r\n    CloneObjectAndMove (stoneaxe, this)\r\n    MoveObject (stoneaxe, Items)\r\n  }\r\n}**",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey thanks guys no spaces just typed in by accident but im still confused, when I add the showmenuitem to game I get errors non stop and yes I seen the ace.parent and changed it but get loads of errors. So i tried the \"do\" which as i understand \"do\" is a \"then\" statement right?  Here is the code I call in my cloned chest<br>\n<strong>if (ListContains(ScopeVisible(), this)) {<br>\nstring_dict = NewStringDictionary()<br>\nforeach (obj, ScopeInventory()) {<br>\ndictionary add (string_dict, obj.name, GetDisplayName(obj))<br>\n}<br>\nShowMenu (\"Pick an item\", string_dict, true) {<br>\nobj = GetObject(result)<br>\nmsg (\"You selected the \" + GetDisplayName(obj))<br>\nif (result = \"stoneaxe\") {<br>\ninvoke (this, \"addaxe\") // Which does (CloneObjectAndMove (stoneaxe, this)) MoveObject (stoneaxe, Items)<br>\n}<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"You need to be by a storage chest to store this item.\")<br>\n}</strong></p>\n<p>Every thing works up until the Invoke obviously lol<br>\nI know \"this\" doesn't work neither does \"do\" in our \"Invoke script\" and would rather have the code beside it(Which is the clone axe and move to \"this\") but doesn't work, I know after menu showed calls new script so \"this\" is now null and Kind of understand what Pixies taking about by setting the var in the game, but seems to be getting really complicating adding a item to a cloned container.</p>\n<p>Thanks again guys always love the Info you all leave gives me lots to read and play with :)<br>\nMike</p>\n<p>EDIT:<br>\nOk so working with the code Pixie gave where setting var in game and casting menu so all works now besides moving object axe to cloned chest<br>\nheres code in game<br>\n<strong>game.showmenuitems = this<br>\nstring_dict = NewStringDictionary()<br>\nforeach (obj, ScopeInventory()) {<br>\ndictionary add (string_dict, obj.name, GetDisplayName(obj))<br>\n}<br>\nShowMenu (\"Pick an item\", string_dict, true) {<br>\nobj = GetObject(result)<br>\nmsg (\"You selected the \" + GetDisplayName(obj))<br>\nif (result = \"stoneaxe\") {<br>\nstoneaxe.parent = game.showmenuitems<br>\nCloneObjectAndMove (stoneaxe, this)<br>\nMoveObject (stoneaxe, Items)<br>\n}<br>\n}</strong></p>\n\n",
      "PostDate": "2016-09-01T15:26:35.2344499Z",
      "LastEditDate": "2016-09-01T15:52:17.9882781Z"
    },
    {
      "PostId": "2bdb2f88-ff04-44e6-970b-aa58a59bdef6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The line:\r\n```\r\nstoneaxe.parent = game.showmenuitems\r\n```\r\n... will move the axe to the chest. It looks like the last two lines are trying to do that too, but one to `this`, which has no meaning inside the `ShowMenu` script, and the other to `Items`, and it is not clear what that is. I think if you just get rid of those two lines it should work.\r\n\r\nBy the way, these two lines of code do the same thing:\r\n```\r\nstoneaxe.parent = game.showmenuitems\r\nMoveObject (stoneaxe, game.showmenuitems)",
      "EditableFormat": "markdown",
      "HTML": "<p>The line:</p>\n<pre><code>stoneaxe.parent = game.showmenuitems\n</code></pre>\n<p>... will move the axe to the chest. It looks like the last two lines are trying to do that too, but one to <code>this</code>, which has no meaning inside the <code>ShowMenu</code> script, and the other to <code>Items</code>, and it is not clear what that is. I think if you just get rid of those two lines it should work.</p>\n<p>By the way, these two lines of code do the same thing:</p>\n<pre><code>stoneaxe.parent = game.showmenuitems\nMoveObject (stoneaxe, game.showmenuitems)\n</code></pre>\n\n",
      "PostDate": "2016-09-01T19:59:30.1462486Z",
      "LastEditDate": null
    },
    {
      "PostId": "8f613f1e-285f-4bd1-b89c-c479c8606522",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh wow thank you so much I also had script in wrong place had it in game attribute had to run it in chest thank you so so much!\r\n\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh wow thank you so much I also had script in wrong place had it in game attribute had to run it in chest thank you so so much!</p>\n<p>Mike</p>\n\n",
      "PostDate": "2016-09-02T03:18:45.8223346Z",
      "LastEditDate": null
    }
  ]
}
