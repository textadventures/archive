{
  "Topic": {
    "TopicId": "qwxfydbxz0cqy8jvgc1mmq",
    "ForumId": "10",
    "Title": "Sorting objects in places and objects pane",
    "LastUpdated": "2021-09-23T18:41:54.9174351Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "47419a56-b8e0-4a47-a5d1-20b2717405d7",
      "UserId": 554565,
      "Username": "Local_Redditor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d399e24d4df00712ccd605ca2550624d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just want to have the exits I put in the \"Places and Objects\" pane to be place at the top and not below all the objects.\r\n\r\nOr maybe, sort them in general perhaps?",
      "EditableFormat": "markdown",
      "HTML": "<p>I just want to have the exits I put in the \"Places and Objects\" pane to be place at the top and not below all the objects.</p>\n<p>Or maybe, sort them in general perhaps?</p>\n\n",
      "PostDate": "2021-09-23T18:41:54.9174351Z",
      "LastEditDate": "2021-09-23T18:52:34.924668Z",
      "link": null
    },
    {
      "PostId": "741de563-8523-4d60-bb61-75b6349ed66b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code that prepares this data is in the Quest engine, rather than in the core library, so it's not easy to modify. So you'd need to alter the part you can get to - the javascript function `updateList` which is responsible for receiving a list of objects, and using that to display the list in the sidebar.\r\n\r\nIf you want to sort the list with exits first, you could use the function `updateExitLinks`, which receives a list of exits every turn. Store this information in a JS variable, and then use it to order the data for `updateList`. So your javascript would look something like (off the top of my head, not tested):\r\n<pre><code>$(function () {\r\n    var original_updateList = updateList;\r\n    var original_updateExitLinks = updateExitLinks;\r\n    var allExits = [];\r\n\r\n    updateList = function (listname, data) {\r\n        var sortorder = {};\r\n        $.each(data, function (key, value) {\r\n            var item_data = JSON.parse(value);\r\n            sortorder[key] = ($.inArray(item_data[\"ElementId\"], allExits) ? \"exit\" : \"object\") + item_data(\"ElementName\");\r\n        });\r\n        var newdata = {};\r\n        sortorder.keys().sort (function (a, b) {\r\n            return ((sortorder[a] > sortorder[b]) ? -1 : ((sortorder[b] > sortorder[a]) ? 1 : 0));\r\n        }).foreach (function (key) {\r\n            newdata[key] = data[key];\r\n        });\r\n        original_updateList (listname, newdata);\r\n    };\r\n    updateExitLinks = function (data) {\r\n        allExits = data;\r\n        original_updateExitLinks(data);\r\n    };\r\n});</code></pre>\r\n\r\nTo use that in Quest, you'd compress it and put it in the \"UI Initialisation script\", on the \"Advanced Scripts\" tab (after you enabled it on the features tab). The compressed code would look like:\r\n```\r\nJS.eval(\"$(function(){var a=updateList,b=updateExitLinks,c=[];updateList=function(b,d){var e={};$.each(d,function(a,b){var d=JSON.parse(b);e[a]=($.inArray(d.ElementId,c)?'e':'o')+d.ElementName});var f={};e.keys().sort(function(c,a){return e[c]>e[a]?-1:e[a]>e[c]?1:0}).foreach(function(a){f[a]=d[a]}),a(b,f)},updateExitLinks=function(a){c=a,b(a)}});\")\r\n```\r\n\r\nIs that what you were looking for?",
      "EditableFormat": "markdown",
      "HTML": "<p>The code that prepares this data is in the Quest engine, rather than in the core library, so it's not easy to modify. So you'd need to alter the part you can get to - the javascript function <code>updateList</code> which is responsible for receiving a list of objects, and using that to display the list in the sidebar.</p>\n<p>If you want to sort the list with exits first, you could use the function <code>updateExitLinks</code>, which receives a list of exits every turn. Store this information in a JS variable, and then use it to order the data for <code>updateList</code>. So your javascript would look something like (off the top of my head, not tested):</p>\n<pre><code>$(function () {\n    var original_updateList = updateList;\n    var original_updateExitLinks = updateExitLinks;\n    var allExits = [];\n\n    updateList = function (listname, data) {\n        var sortorder = {};\n        $.each(data, function (key, value) {\n            var item_data = JSON.parse(value);\n            sortorder[key] = ($.inArray(item_data[\"ElementId\"], allExits) ? \"exit\" : \"object\") + item_data(\"ElementName\");\n        });\n        var newdata = {};\n        sortorder.keys().sort (function (a, b) {\n            return ((sortorder[a] &gt; sortorder[b]) ? -1 : ((sortorder[b] &gt; sortorder[a]) ? 1 : 0));\n        }).foreach (function (key) {\n            newdata[key] = data[key];\n        });\n        original_updateList (listname, newdata);\n    };\n    updateExitLinks = function (data) {\n        allExits = data;\n        original_updateExitLinks(data);\n    };\n});</code></pre>\n<p>To use that in Quest, you'd compress it and put it in the \"UI Initialisation script\", on the \"Advanced Scripts\" tab (after you enabled it on the features tab). The compressed code would look like:</p>\n<pre><code>JS.eval(\"$(function(){var a=updateList,b=updateExitLinks,c=[];updateList=function(b,d){var e={};$.each(d,function(a,b){var d=JSON.parse(b);e[a]=($.inArray(d.ElementId,c)?'e':'o')+d.ElementName});var f={};e.keys().sort(function(c,a){return e[c]&gt;e[a]?-1:e[a]&gt;e[c]?1:0}).foreach(function(a){f[a]=d[a]}),a(b,f)},updateExitLinks=function(a){c=a,b(a)}});\")\n</code></pre>\n<p>Is that what you were looking for?</p>\n\n",
      "PostDate": "2021-09-23T23:40:27.6566432Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
