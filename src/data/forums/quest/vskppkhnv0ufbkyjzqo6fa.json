{
  "Topic": {
    "TopicId": "vskppkhnv0ufbkyjzqo6fa",
    "ForumId": "10",
    "Title": "Shelf too high",
    "LastUpdated": "2024-02-24T22:08:28.3862825Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "36d57033-6c83-4d20-b978-ced1b51b3e18",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi all,\r\nSo in my game, I have a shelf that is too high, so you have to stand on a chair to get the item.\r\n```\r\nif (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\r\n  msg (\"You cannot reach it. The shelf is too high.\")\r\n}\r\n```\r\nSo, the problem I've got now, is if the player wants to put something onto the shelf. Obviously with the shelf being too high, they'll need to be standing on the chair to do it, but how can I code the object that you're putting onto the shelf to restrict the take command. \r\nIn order to take the 'object' you're putting onto the shelf, you've got to be standing on the chair.\r\n\r\nHope you can help, thankyou.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi all,<br>\nSo in my game, I have a shelf that is too high, so you have to stand on a chair to get the item.</p>\n<pre><code>if (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\n  msg (\"You cannot reach it. The shelf is too high.\")\n}\n</code></pre>\n<p>So, the problem I've got now, is if the player wants to put something onto the shelf. Obviously with the shelf being too high, they'll need to be standing on the chair to do it, but how can I code the object that you're putting onto the shelf to restrict the take command.<br>\nIn order to take the 'object' you're putting onto the shelf, you've got to be standing on the chair.</p>\n<p>Hope you can help, thankyou.</p>\n\n",
      "PostDate": "2024-02-24T22:08:28.3862825Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "21b97b6d-a033-4a36-984d-4a9a3140abf1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… my first thought would be to do something when the player stands on the chair.\r\n\r\nIf the player stands on the chair:\r\n```\r\nshelf.isopen = true\r\n```\r\nand when they get off it:\r\n```\r\nshelf.isopen = false\r\nshelf.transparent = true\r\nshelf.blockingmessage = \"You can't reach it.\"\r\n```\r\n\r\nThat way, objects on the shelf aren't reachable and you don't need to mess around with individual take scripts.\r\n\r\nEdit: Hmm… that works for taking object off the shelf, but results in getting a default \"not open\" message when trying to put something on it.\r\n\r\nI can see one way to deal with the take script, but it's a bit awkward.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… my first thought would be to do something when the player stands on the chair.</p>\n<p>If the player stands on the chair:</p>\n<pre><code>shelf.isopen = true\n</code></pre>\n<p>and when they get off it:</p>\n<pre><code>shelf.isopen = false\nshelf.transparent = true\nshelf.blockingmessage = \"You can't reach it.\"\n</code></pre>\n<p>That way, objects on the shelf aren't reachable and you don't need to mess around with individual take scripts.</p>\n<p>Edit: Hmm… that works for taking object off the shelf, but results in getting a default \"not open\" message when trying to put something on it.</p>\n<p>I can see one way to deal with the take script, but it's a bit awkward.</p>\n\n",
      "PostDate": "2024-02-25T09:13:56.2023604Z",
      "LastEditDate": "2024-02-25T10:03:55.0908285Z",
      "link": null
    },
    {
      "PostId": "81f53838-7351-4e2a-bfd6-ecd611d721a8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Normally it would be pretty simple to add a take script to an object; the shelf's `addobject` script would look like:\r\n```\r\nif (player.posture = \"stand\" and player.posture_object = \"chair\") {\r\n  object.parent = this\r\n  msg (\"You put it on the shelf.\")\r\n  object.take => {\r\n    if (player.posture = \"stand\" and player.posture_object = \"chair\") {\r\n      AddToInventory (this)\r\n      this.take = true\r\n    }\r\n    else {\r\n      msg (\"You cannot reach it. The shelf is too high.\")\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"You cannot reach it. The shelf is too high.\")\r\n}\r\n```\r\nBut that only works with objects that can be taken normally. If an object already has a take script, this would overwrite it.\r\n\r\nIf you need to deal with that situation, my solution would be to have a list of take scripts, which are processed one by one. So you'd give an object an attribute which is a list of take scripts, and then make its actual take script one which loops through that list running the functions one by one until it's taken. This gets to be a huge knot of code pretty fast, but there's nothing particularly difficult about it; just time-consuming to write.",
      "EditableFormat": "markdown",
      "HTML": "<p>Normally it would be pretty simple to add a take script to an object; the shelf's <code>addobject</code> script would look like:</p>\n<pre><code>if (player.posture = \"stand\" and player.posture_object = \"chair\") {\n  object.parent = this\n  msg (\"You put it on the shelf.\")\n  object.take =&gt; {\n    if (player.posture = \"stand\" and player.posture_object = \"chair\") {\n      AddToInventory (this)\n      this.take = true\n    }\n    else {\n      msg (\"You cannot reach it. The shelf is too high.\")\n    }\n  }\n}\nelse {\n  msg (\"You cannot reach it. The shelf is too high.\")\n}\n</code></pre>\n<p>But that only works with objects that can be taken normally. If an object already has a take script, this would overwrite it.</p>\n<p>If you need to deal with that situation, my solution would be to have a list of take scripts, which are processed one by one. So you'd give an object an attribute which is a list of take scripts, and then make its actual take script one which loops through that list running the functions one by one until it's taken. This gets to be a huge knot of code pretty fast, but there's nothing particularly difficult about it; just time-consuming to write.</p>\n\n",
      "PostDate": "2024-02-25T10:17:53.4452104Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "36e8a3d4-0b15-486e-8a1a-cad5dfc7da9d",
      "UserId": 579655,
      "Username": "Jennifer Wren",
      "AvatarUrl": "https://i.imgur.com/t1XUS1Kb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not trying to help, but this is what I have been doing with limitations. I add an if script, so that if player tries to take (or any other verb) without meeting requirements, then, move object to shelf or here (not inventory) or with exits, move player to room one, because the game runs through the scripts so quickly that no one actually sees the transition. Then I add the msg that explains why nothing happened.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not trying to help, but this is what I have been doing with limitations. I add an if script, so that if player tries to take (or any other verb) without meeting requirements, then, move object to shelf or here (not inventory) or with exits, move player to room one, because the game runs through the scripts so quickly that no one actually sees the transition. Then I add the msg that explains why nothing happened.</p>\n\n",
      "PostDate": "2024-02-25T15:12:42.4297347Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e3d60c03-b2ab-4400-ba38-135253cd3fa9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a thought (although it would need a small modification of some of the core functions).\r\n\r\nIf we make these modifications:\r\n<pre><code>  &lt;function name=\"ContainsReachable\" type=\"boolean\" parameters=\"parentObj, searchObj\">\r\n    return (ContainsAccessible(parentObj, searchObj, true) <b style=\"color: blue\">and not HasString (searchObj, \"unreachablereason\")</b>)\r\n  &lt;/function>\r\n\r\n  &lt;function name=\"CanReachThrough\" type=\"boolean\" parameters=\"obj\">\r\n    return (GetBoolean(obj, \"isopen\") and not GetBoolean(obj, \"hidechildren\") <b style=\"color: blue\">and not HasString (obj, \"unreachablereason\")</b>)\r\n  &lt;/function>\r\n\r\n  &lt;function name=\"BlockingMessage\" parameters=\"blocked, prefix\" type=\"string\">\r\n    <b style=\"color: blue\">if (HasString (blocked, \"unreachablereason\")) {\r\n        obj = blocked\r\n    }\r\n    else {</b>\r\n      obj = GetBlockingObject(blocked)\r\n    <b style=\"color: blue\">}</b>\r\n    if (HasString(obj, \"blockingmessage\")) {\r\n      return (obj.blockingmessage)\r\n    }\r\n    <b style=\"color: blue\">else if (HasString(obj, \"unreachablereason\")) {\r\n      return (obj.unreachablereason)\r\n    }</b>\r\n    else {\r\n      return (prefix + DynamicTemplate(\"ObjectNotOpen\", obj))\r\n    }\r\n  &lt;/function></code></pre>\r\n\r\nOff the top of my head… I may have made an error there. But I think that then you could just do one extra line when the player gets on or off the chair:\r\n* `shelf.unreachablereason = \"It's too high to reach!\"`\r\n* `shelf.unreachablereason = null`\r\n\r\nGiving the shelf an `unreachablereason` string attribute would then give that string as an error when the player tries to use most of the built-in commands on the shelf or on anything inside it. That will stop them taking objects off the shelf, putting objects on it, attempting to unlock it, or lick it, or anything else they might think of. (They will still be able to look at the shelf and any items on it, but anything else will tell them that they can't reach it).\r\n\r\nI quite like that code (assuming that it works as I planned), because you could do other things with it as well. For example:\r\n* `mosquito.unreachablereason = \"It flies away whenever you try to grasp it.\"`\r\n* `lava.unreachablereason = \"It's too hot to touch.\"`\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a thought (although it would need a small modification of some of the core functions).</p>\n<p>If we make these modifications:</p>\n<pre><code>  &lt;function name=\"ContainsReachable\" type=\"boolean\" parameters=\"parentObj, searchObj\"&gt;\n    return (ContainsAccessible(parentObj, searchObj, true) <b style=\"color: blue\">and not HasString (searchObj, \"unreachablereason\")</b>)\n  &lt;/function&gt;\n\n  &lt;function name=\"CanReachThrough\" type=\"boolean\" parameters=\"obj\"&gt;\n    return (GetBoolean(obj, \"isopen\") and not GetBoolean(obj, \"hidechildren\") <b style=\"color: blue\">and not HasString (obj, \"unreachablereason\")</b>)\n  &lt;/function&gt;\n\n  &lt;function name=\"BlockingMessage\" parameters=\"blocked, prefix\" type=\"string\"&gt;\n    <b style=\"color: blue\">if (HasString (blocked, \"unreachablereason\")) {\n        obj = blocked\n    }\n    else {</b>\n      obj = GetBlockingObject(blocked)\n    <b style=\"color: blue\">}</b>\n    if (HasString(obj, \"blockingmessage\")) {\n      return (obj.blockingmessage)\n    }\n    <b style=\"color: blue\">else if (HasString(obj, \"unreachablereason\")) {\n      return (obj.unreachablereason)\n    }</b>\n    else {\n      return (prefix + DynamicTemplate(\"ObjectNotOpen\", obj))\n    }\n  &lt;/function&gt;</code></pre>\n<p>Off the top of my head… I may have made an error there. But I think that then you could just do one extra line when the player gets on or off the chair:</p>\n<ul>\n<li><code>shelf.unreachablereason = \"It's too high to reach!\"</code></li>\n<li><code>shelf.unreachablereason = null</code></li>\n</ul>\n<p>Giving the shelf an <code>unreachablereason</code> string attribute would then give that string as an error when the player tries to use most of the built-in commands on the shelf or on anything inside it. That will stop them taking objects off the shelf, putting objects on it, attempting to unlock it, or lick it, or anything else they might think of. (They will still be able to look at the shelf and any items on it, but anything else will tell them that they can't reach it).</p>\n<p>I quite like that code (assuming that it works as I planned), because you could do other things with it as well. For example:</p>\n<ul>\n<li><code>mosquito.unreachablereason = \"It flies away whenever you try to grasp it.\"</code></li>\n<li><code>lava.unreachablereason = \"It's too hot to touch.\"</code></li>\n</ul>\n\n",
      "PostDate": "2024-02-25T19:00:36.3304618Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a9c96b7b-53e2-4307-8272-34cfb8098fc5",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Perhaps the restriction should be on the shelf (defined as a surface) rather than the object? If so, the solution seems simple?",
      "EditableFormat": "markdown",
      "HTML": "<p>Perhaps the restriction should be on the shelf (defined as a surface) rather than the object? If so, the solution seems simple?</p>\n\n",
      "PostDate": "2024-02-25T19:02:55.523323Z",
      "LastEditDate": "2024-02-25T19:04:49.8964647Z",
      "link": null
    },
    {
      "PostId": "d88006b6-2c23-42e8-b9d0-85ba0dc39afa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@DavyB:\r\n\r\n> Perhaps the restriction should be on the shelf (defined as a surface) rather than the object?\r\n\r\nThat's what I was thinking. Making it not open and changing the `blockingmessage` to \"It's too high to reach.\" *should* work; except that when the player tries to put something on the shelf, it would say \"It is not open.\" instead of a sensible message.\r\nSo I suggested a modification which would allow the reachable/visible distinction to apply for reasons other than being inside a closed container.\r\n\r\nIf my mental model of the scope system is correct, the modifications I just suggested should also give a sensible \"It's too high to reach\" message in response to a host of other commands, such as \"put shelf in backpack\", \"use shelf\", \"take shelf\", \"eat shelf\", \"open shelf\", and so on.",
      "EditableFormat": "markdown",
      "HTML": "<p>@DavyB:</p>\n<blockquote>\n<p>Perhaps the restriction should be on the shelf (defined as a surface) rather than the object?</p>\n</blockquote>\n<p>That's what I was thinking. Making it not open and changing the <code>blockingmessage</code> to \"It's too high to reach.\" <em>should</em> work; except that when the player tries to put something on the shelf, it would say \"It is not open.\" instead of a sensible message.<br>\nSo I suggested a modification which would allow the reachable/visible distinction to apply for reasons other than being inside a closed container.</p>\n<p>If my mental model of the scope system is correct, the modifications I just suggested should also give a sensible \"It's too high to reach\" message in response to a host of other commands, such as \"put shelf in backpack\", \"use shelf\", \"take shelf\", \"eat shelf\", \"open shelf\", and so on.</p>\n\n",
      "PostDate": "2024-02-25T19:13:47.5955471Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3bd2bce0-77b9-4fb0-b2ca-14c19d6966ae",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for all the help guys.\r\n\r\nI did find a workable solution\r\n\r\nSo in the box, script to run when trying to add an object, i put this\r\n```\r\nif (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\r\n  msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\r\n}\r\nelse {\r\n  MoveObject (object, shelf)\r\n  SetObjectFlagOn (object, \"TooHigh\")\r\n  msg (\"Ok. You put \" + object.article + \" on the shelf.\")\r\n}\r\n```\r\n\r\nthen I created a local command for the room called 'Take'\r\ngiving it the same command pattern as normal ```take #object#; get #object#; pick up #object#```\r\n\r\nThen giving it a script as follows\r\n```\r\nif (GetBoolean(object, \"TooHigh\")) {\r\n  if (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\r\n    msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\r\n  }\r\n  else {\r\n    DoTake (object, multiple)\r\n    SetObjectFlagOff (object, \"TooHigh\")\r\n  }\r\n}\r\nelse {\r\n  DoTake (object, multiple)\r\n}\r\n```\r\nNot sure if its the best solution, but it seems to work",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for all the help guys.</p>\n<p>I did find a workable solution</p>\n<p>So in the box, script to run when trying to add an object, i put this</p>\n<pre><code>if (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\n  msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\n}\nelse {\n  MoveObject (object, shelf)\n  SetObjectFlagOn (object, \"TooHigh\")\n  msg (\"Ok. You put \" + object.article + \" on the shelf.\")\n}\n</code></pre>\n<p>then I created a local command for the room called 'Take'<br>\ngiving it the same command pattern as normal <code>take #object#; get #object#; pick up #object#</code></p>\n<p>Then giving it a script as follows</p>\n<pre><code>if (GetBoolean(object, \"TooHigh\")) {\n  if (not player.posture = \"stand\" and not player.posture_object = \"chair\") {\n    msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\n  }\n  else {\n    DoTake (object, multiple)\n    SetObjectFlagOff (object, \"TooHigh\")\n  }\n}\nelse {\n  DoTake (object, multiple)\n}\n</code></pre>\n<p>Not sure if its the best solution, but it seems to work</p>\n\n",
      "PostDate": "2024-02-25T23:23:01.7352658Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "080e3095-f80b-4fc0-aecf-2ba52b59f244",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This conversation was helpful for me in a few ways. \r\n\r\n I also want to say that I LOVE Mr. Angel's suggestion for core modifications.  I think I'm not only going to add it to my \"Core3\" that I've been building (probably mostly for myself).  But I'll add an \"object unreachable\" checkbox to the inventory tab with a place to add the attribute if checked.  I'll definitely credit Mr. Angel in the Core3 Integration for all his angelic work!\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>This conversation was helpful for me in a few ways.</p>\n<p>I also want to say that I LOVE Mr. Angel's suggestion for core modifications.  I think I'm not only going to add it to my \"Core3\" that I've been building (probably mostly for myself).  But I'll add an \"object unreachable\" checkbox to the inventory tab with a place to add the attribute if checked.  I'll definitely credit Mr. Angel in the Core3 Integration for all his angelic work!</p>\n\n",
      "PostDate": "2024-02-26T02:32:52.4742242Z",
      "LastEditDate": "2024-02-26T02:35:48.5590377Z",
      "link": null
    },
    {
      "PostId": "8e5ffafd-edaf-4269-be5b-16af3e5edce7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice way to do it :)\r\n\r\nHowever, I have a few comments.\r\n\r\nFirstly, the expression `not player.posture = \"stand\" and not player.posture_object = \"chair\"` looks wrong.\r\n\r\nThis means that they will get the too high message if they aren't standing *and* they're not on the chair. So if they're sitting on the chair, or their posture is standing but they're not on the chair, they will still be able to reach it.\r\n\r\nWhat you probably want there is `not (player.posture = \"stand\" and player.posture_object = \"chair\")` or `not player.posture = \"stand\" or not player.posture_object = \"chair\"`.\r\n\r\nSecondly, if you're using a local command like that, you don't really need the TooHigh boolean. You could do something like making the shelf's `addscript` look like:\r\n```\r\nif (player.posture = \"stand\" and player.posture_object = \"chair\") {\r\n  MoveObject (object, shelf)\r\n  msg (\"Ok. You put \" + object.article + \" on the shelf.\")\r\n}\r\nelse {\r\n  msg (\"You cannot reach the shelf. It is too high.\")\r\n}\r\n```\r\nand the room's `take` command:\r\n```\r\nif (Contains (shelf, object))) {\r\n  if (not player.posture = \"stand\" or not player.posture_object = \"chair\") {\r\n    msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\r\n  }\r\n  else {\r\n    DoTake (object, multiple)\r\n  }\r\n}\r\nelse {\r\n  DoTake (object, multiple)\r\n}\r\n```\r\n\r\nAnd thirdly, your local command might break \"take all\", because it doesn't seem to allow multiples. You should give the command an `allow_all` boolean, and update it so that:\r\n```\r\ntook_something = false\r\nshelfobjects = NewObjectList()\r\nforeach (obj, object) {\r\n  if (not multiple or (not Contains(game.pov, obj.parent) and not DoesInherit(obj.parent, \"npc_type\"))) {\r\n    if (Contains (shelf, obj) and not (player.posture = \"stand\" and player.posture_object = \"chair\")) {\r\n      list add (shelfobjects, obj)\r\n    }\r\n    else {\r\n      DoTake (obj, multiple)\r\n      took_something = true\r\n    }\r\n  }\r\n}\r\nif (ListCount (shelfobjects) > 0) {\r\n  msg (\"You couldn't reach \" + FormatList (shelfobjects, \", \", \" or \", \"\") + \". The shelf is too high.\")\r\n}\r\nelse if (multiple and not took_something) {\r\n  msg (Template(\"NothingToTake\"))\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice way to do it :)</p>\n<p>However, I have a few comments.</p>\n<p>Firstly, the expression <code>not player.posture = \"stand\" and not player.posture_object = \"chair\"</code> looks wrong.</p>\n<p>This means that they will get the too high message if they aren't standing <em>and</em> they're not on the chair. So if they're sitting on the chair, or their posture is standing but they're not on the chair, they will still be able to reach it.</p>\n<p>What you probably want there is <code>not (player.posture = \"stand\" and player.posture_object = \"chair\")</code> or <code>not player.posture = \"stand\" or not player.posture_object = \"chair\"</code>.</p>\n<p>Secondly, if you're using a local command like that, you don't really need the TooHigh boolean. You could do something like making the shelf's <code>addscript</code> look like:</p>\n<pre><code>if (player.posture = \"stand\" and player.posture_object = \"chair\") {\n  MoveObject (object, shelf)\n  msg (\"Ok. You put \" + object.article + \" on the shelf.\")\n}\nelse {\n  msg (\"You cannot reach the shelf. It is too high.\")\n}\n</code></pre>\n<p>and the room's <code>take</code> command:</p>\n<pre><code>if (Contains (shelf, object))) {\n  if (not player.posture = \"stand\" or not player.posture_object = \"chair\") {\n    msg (\"You cannot reach \" + object.article + \". The shelf is too high.\")\n  }\n  else {\n    DoTake (object, multiple)\n  }\n}\nelse {\n  DoTake (object, multiple)\n}\n</code></pre>\n<p>And thirdly, your local command might break \"take all\", because it doesn't seem to allow multiples. You should give the command an <code>allow_all</code> boolean, and update it so that:</p>\n<pre><code>took_something = false\nshelfobjects = NewObjectList()\nforeach (obj, object) {\n  if (not multiple or (not Contains(game.pov, obj.parent) and not DoesInherit(obj.parent, \"npc_type\"))) {\n    if (Contains (shelf, obj) and not (player.posture = \"stand\" and player.posture_object = \"chair\")) {\n      list add (shelfobjects, obj)\n    }\n    else {\n      DoTake (obj, multiple)\n      took_something = true\n    }\n  }\n}\nif (ListCount (shelfobjects) &gt; 0) {\n  msg (\"You couldn't reach \" + FormatList (shelfobjects, \", \", \" or \", \"\") + \". The shelf is too high.\")\n}\nelse if (multiple and not took_something) {\n  msg (Template(\"NothingToTake\"))\n}\n</code></pre>\n\n",
      "PostDate": "2024-02-26T15:00:36.5910062Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3d245027-e8eb-4585-8d84-e3fb9ae52872",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi guys, thanks for the help so far.\r\n\r\n[_This means that they will get the too high message if they aren't standing and they're not on the chair. So if they're sitting on the chair, or their posture is standing but they're not on the chair, they will still be able to reach it._]\r\nI've tried both sitting on the chair and standing in the room, and both instances told that the shelf is too high.\r\nAlso tried the other suggestion of MrAngel\r\n```\r\nif (not (player.posture = \"stand\" and player.posture_object = \"chair\")) {\r\n  msg (\"You cannot reach it. The shelf is too high.\")\r\n}\r\n```\r\nbut even if you're standing on the chair or not, the shelf is still too high.\r\nThanks though for the tip about 'Take All'. Yes it has stopped working in that room.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi guys, thanks for the help so far.</p>\n<p>[<em>This means that they will get the too high message if they aren't standing and they're not on the chair. So if they're sitting on the chair, or their posture is standing but they're not on the chair, they will still be able to reach it.</em>]<br>\nI've tried both sitting on the chair and standing in the room, and both instances told that the shelf is too high.<br>\nAlso tried the other suggestion of MrAngel</p>\n<pre><code>if (not (player.posture = \"stand\" and player.posture_object = \"chair\")) {\n  msg (\"You cannot reach it. The shelf is too high.\")\n}\n</code></pre>\n<p>but even if you're standing on the chair or not, the shelf is still too high.<br>\nThanks though for the tip about 'Take All'. Yes it has stopped working in that room.</p>\n\n",
      "PostDate": "2024-02-26T22:41:45.6160567Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1ed6a6e7-ceb0-4c12-a9d3-740004a86254",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi guys,\r\n\r\nThankyou for all your help.\r\nFinally figured out why this was not working properly \r\n```\r\nif (player.posture = \"stand\" and player.posture_object = chair) {\r\n  this.take = true\r\n  msg (\"You pick \" + this.article + \" up.\")\r\n  AddToInventory (this)\r\n}\r\nelse {\r\n  msg (\"The shelf is too high. You cannot reach.\")\r\n}\r\n```\r\nThe posture_object that you are sitting on, standing on or reclining on does not need quotes \"\"\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi guys,</p>\n<p>Thankyou for all your help.<br>\nFinally figured out why this was not working properly</p>\n<pre><code>if (player.posture = \"stand\" and player.posture_object = chair) {\n  this.take = true\n  msg (\"You pick \" + this.article + \" up.\")\n  AddToInventory (this)\n}\nelse {\n  msg (\"The shelf is too high. You cannot reach.\")\n}\n</code></pre>\n<p>The posture_object that you are sitting on, standing on or reclining on does not need quotes \"\"</p>\n\n",
      "PostDate": "2024-03-03T19:02:33.1842122Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2980427-d995-4965-bd0b-e7436a69f6d6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would have suggested that… but I assumed that the example code you gave in your first post was correct. Without seeing the code that sets those attributes, I have to guess what you're setting them to.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would have suggested that… but I assumed that the example code you gave in your first post was correct. Without seeing the code that sets those attributes, I have to guess what you're setting them to.</p>\n\n",
      "PostDate": "2024-03-03T20:10:00.0205873Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
