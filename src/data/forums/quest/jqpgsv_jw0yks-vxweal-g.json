{
  "Topic": {
    "TopicId": "jqpgsv_jw0yks-vxweal-g",
    "ForumId": "10",
    "Title": "Variables",
    "LastUpdated": "2018-01-12T11:13:48.6151466Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "95216dec-07b4-4aef-9d1f-d504f001965a",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Are variables persistent? I created a variable string list in the Start Script, but when I try to reference that variable in a room script it states that the variable doesn't exist.",
      "EditableFormat": "markdown",
      "HTML": "<p>Are variables persistent? I created a variable string list in the Start Script, but when I try to reference that variable in a room script it states that the variable doesn't exist.</p>\n\n",
      "PostDate": "2018-01-12T11:13:48.6151466Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e6ddd212-38a3-4145-b2f6-9f0a1f462637",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted, argh)\r\n\r\n----------------------\r\n\r\nquest has three main types of VARIABLES...\r\n\r\nVARIABLES:\r\n-> (1) a 'Variable' VARIABLE\r\n-> (2) an 'Attribute' VARIABLE\r\n-> (3) an/a 'Argument/Parameter' VARIABLE\r\n\r\nthe 3 VARIABLES:\r\n\r\n(1) Variable: local/temporary, it gets destroyed upon the scripting containing it, ending/completing (it's scope/existance is limited to the scripting creating its created/used in. A Variable can't be used outside of the scripting that created it). Some examples (built-in and custom/self-created Variables): result = VALUE_OR_EXPRESSION, result = \"HK\", result = HK // (the 'HK' has to be an actual existing Object), result = 0, result = true, result = false, handled = true, handled = false, you_go_first_initiative = true, you_go_first_initiative = false, count = 0, count = 4, count = count + 5, weapon = katana // (the 'katana' has to be an actual existing Object), etc etc etc\r\n\r\ngeneric (concept) syntax:\r\n\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\n\r\n(2) Attribute: global/permanent (so long as the Object containing it, exists / still exists, of course), some examples: player.alias = \"HK\", game.state = 0, player.strength = 100, orc.dead = false, orc.dead = true, player.weapon = katana, player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100, etc etc etc\r\n\r\ngeneric (concept) syntax:\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n\r\n(3) Arguments/Parameters: deals with Functions and Commands, they're more complicated, so not explaining them here right now.\r\n\r\n--------------\r\n\r\nan example of local scope (Variables) vs global scope (Attributes):\r\n\r\n```\r\n<game name=\"example_game\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n    \r\n    msg (example_object.example_integer_attribute) // no error\r\n    // result/output: 0\r\n    \r\n    example_object.example_integer_attribute = example_object.example_integer_attribute + 5 // no error\r\n    msg (example_object.example_integer_attribute) // no error\r\n    // result/output: 5 // (0+5=5)\r\n\r\n    example_object.example_integer_attribute = example_object.example_integer_attribute + 5 // no error\r\n    msg (example_object.example_integer_attribute) // no error\r\n    // result/output: 10 // (5+5=10)\r\n\r\n    do (example_object, \"example_script_attribute\") // no error\r\n    // results/displayments/outputs:\r\n    // 0\r\n    // 7\r\n    // 14\r\n\r\n   msg (example_integer_variable) // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\r\n\r\n   example_integer_variable = example_integer_variable + 3 // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\r\n\r\n    msg (example_integer_variable) // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\r\n    \r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n\r\n  <attr name=\"example_integer_attribute\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"example_script_attribute\" type=\"script\">\r\n\r\n    example_integer_variable = 0 // no error // we're creating and setting this Variable and its (initial) Value\r\n    msg (example_integer_variable) // no error\r\n    // result/display: 0\r\n\r\n    example_integer_variable = example_integer_variable + 7 // no error // we're creating (over-writing / over-riding the old Variable) and (re-)setting this Variable and its (new) Value (as a 'complex' Expression: addition operation/expression, the expression is still using the old Variable and its old Value, before it gets over-writen/over-riden, to get more technical-detailed-accurate explanation of it)\r\n    msg (example_integer_variable) // no error\r\n    // result/display: 7 // (0+7=7)\r\n\r\n    example_integer_variable = example_integer_variable + 7 // no error // we're creating (over-writing / over-riding the old Variable) and (re-)setting this Variable and its (new) Value (as a 'complex' Expression: addition operation/expression, the expression is still using the old Variable and its old Value, before it gets over-writen/over-riden, to get more technical-detailed-accurate explanation of it)\r\n    msg (example_integer_variable) // no error\r\n    // result/display: 14 // (7+7=14)\r\n\r\n  </attr>\r\n\r\n</object>\r\n```\r\n\r\n--------------------\r\n\r\nwith quest, you usually want to be using Attributes for their global scope.\r\n\r\nif you were to be writing/coding a program using the main full-bore programming languages (C++, Java, Python), then global VARIABLES/Functions/etc are to be avoided (too complicated to explain why here), but they're great for how quest is designed and for game-making too.",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted, argh)</p>\n<hr>\n<p>quest has three main types of VARIABLES...</p>\n<p>VARIABLES:<br>\n-&gt; (1) a 'Variable' VARIABLE<br>\n-&gt; (2) an 'Attribute' VARIABLE<br>\n-&gt; (3) an/a 'Argument/Parameter' VARIABLE</p>\n<p>the 3 VARIABLES:</p>\n<p>(1) Variable: local/temporary, it gets destroyed upon the scripting containing it, ending/completing (it's scope/existance is limited to the scripting creating its created/used in. A Variable can't be used outside of the scripting that created it). Some examples (built-in and custom/self-created Variables): result = VALUE_OR_EXPRESSION, result = \"HK\", result = HK // (the 'HK' has to be an actual existing Object), result = 0, result = true, result = false, handled = true, handled = false, you_go_first_initiative = true, you_go_first_initiative = false, count = 0, count = 4, count = count + 5, weapon = katana // (the 'katana' has to be an actual existing Object), etc etc etc</p>\n<p>generic (concept) syntax:</p>\n<p>NAME_OF_Variable = VALUE_OR_EXPRESSION</p>\n<p>(2) Attribute: global/permanent (so long as the Object containing it, exists / still exists, of course), some examples: player.alias = \"HK\", game.state = 0, player.strength = 100, orc.dead = false, orc.dead = true, player.weapon = katana, player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100, etc etc etc</p>\n<p>generic (concept) syntax:</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION</p>\n<p>(3) Arguments/Parameters: deals with Functions and Commands, they're more complicated, so not explaining them here right now.</p>\n<hr>\n<p>an example of local scope (Variables) vs global scope (Attributes):</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    \n    msg (example_object.example_integer_attribute) // no error\n    // result/output: 0\n    \n    example_object.example_integer_attribute = example_object.example_integer_attribute + 5 // no error\n    msg (example_object.example_integer_attribute) // no error\n    // result/output: 5 // (0+5=5)\n\n    example_object.example_integer_attribute = example_object.example_integer_attribute + 5 // no error\n    msg (example_object.example_integer_attribute) // no error\n    // result/output: 10 // (5+5=10)\n\n    do (example_object, \"example_script_attribute\") // no error\n    // results/displayments/outputs:\n    // 0\n    // 7\n    // 14\n\n   msg (example_integer_variable) // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\n\n   example_integer_variable = example_integer_variable + 3 // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\n\n    msg (example_integer_variable) // ERROR! (there is no 'example_integer_variable' existing to be used here, so display the 'ERROR!' message for this coding/scripting issue)\n    \n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n\n  &lt;attr name=\"example_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"example_script_attribute\" type=\"script\"&gt;\n\n    example_integer_variable = 0 // no error // we're creating and setting this Variable and its (initial) Value\n    msg (example_integer_variable) // no error\n    // result/display: 0\n\n    example_integer_variable = example_integer_variable + 7 // no error // we're creating (over-writing / over-riding the old Variable) and (re-)setting this Variable and its (new) Value (as a 'complex' Expression: addition operation/expression, the expression is still using the old Variable and its old Value, before it gets over-writen/over-riden, to get more technical-detailed-accurate explanation of it)\n    msg (example_integer_variable) // no error\n    // result/display: 7 // (0+7=7)\n\n    example_integer_variable = example_integer_variable + 7 // no error // we're creating (over-writing / over-riding the old Variable) and (re-)setting this Variable and its (new) Value (as a 'complex' Expression: addition operation/expression, the expression is still using the old Variable and its old Value, before it gets over-writen/over-riden, to get more technical-detailed-accurate explanation of it)\n    msg (example_integer_variable) // no error\n    // result/display: 14 // (7+7=14)\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>with quest, you usually want to be using Attributes for their global scope.</p>\n<p>if you were to be writing/coding a program using the main full-bore programming languages (C++, Java, Python), then global VARIABLES/Functions/etc are to be avoided (too complicated to explain why here), but they're great for how quest is designed and for game-making too.</p>\n\n",
      "PostDate": "2018-01-12T13:11:27.2010102Z",
      "LastEditDate": "2018-01-12T13:35:28.1530324Z",
      "link": null
    },
    {
      "PostId": "182da807-b708-48ea-9385-c01b540fb42e",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Great.\r\n\r\nOne other question. How do you put a line break or carriage return into a string list variable so when its printed out values are shown on different lines?",
      "EditableFormat": "markdown",
      "HTML": "<p>Great.</p>\n<p>One other question. How do you put a line break or carriage return into a string list variable so when its printed out values are shown on different lines?</p>\n\n",
      "PostDate": "2018-01-12T13:26:06.526955Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "69d0449c-8a2f-44d2-873e-302798e85dcd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted, grr)\r\n\r\n----------------------\r\n\r\nyou'll have to manually do/create the list displayment yourself (or edit the built-in 'show menu / ShowMenu' Scripts/Functions), well there's probably/maybe a way to insert the line spacing-breaks into your list items, and the parser will recognize it... KV or Pixie or MrAngel can help with whether it can be done (and how) or not...\r\n\r\n```\r\n(I'm still not really knowledgeable on this type of syntax using the html/xml '<br>' and etc, formatting code yet myself with quest. You'll probably need to use the 'CDATA' tag code block too for it, I think)\r\n```\r\n\r\nhere's how to manually create the same list displayment as 'show menu / ShowMenu' Scripts/Functions (but with the added spacing between the items' displayment):\r\n\r\n(showing an example with numbering, but you can take those code lines out and/or adjust the code, if you don't want/need the numbering)\r\n\r\n```\r\nnumbering_integer_variable = 0\r\nforeach (item_variable, NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE) { // or: foreach (item_variable, NAME_OF_LIST_Variable) {\r\n  numbering_integer_variable = numbering_integer_variable + 1\r\n  msg (numbering_integer_variable + \". \" + item_variable)\r\n  msg (\"\") // one way of doing a line space-break / carriage return\r\n}\r\n\r\n// output/results:\r\n\r\n1. ITEM_1\r\n(line space-break)\r\n2. ITEM_2\r\n(line space-break)\r\n3. ITEM_3\r\n(line space-break)\r\netc etc etc (more or less items -- depends on your list's number/quantity of items, of course)\r\n(line space-break)\r\n```\r\n\r\n--------\r\n\r\nif you want them as hyperlinks... let me know... I think I can help you with how to do the syntax for/to make them into clickable hyperlinks. pretty sure I can.. lol",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted, grr)</p>\n<hr>\n<p>you'll have to manually do/create the list displayment yourself (or edit the built-in 'show menu / ShowMenu' Scripts/Functions), well there's probably/maybe a way to insert the line spacing-breaks into your list items, and the parser will recognize it... KV or Pixie or MrAngel can help with whether it can be done (and how) or not...</p>\n<pre><code>(I'm still not really knowledgeable on this type of syntax using the html/xml '&lt;br&gt;' and etc, formatting code yet myself with quest. You'll probably need to use the 'CDATA' tag code block too for it, I think)\n</code></pre>\n<p>here's how to manually create the same list displayment as 'show menu / ShowMenu' Scripts/Functions (but with the added spacing between the items' displayment):</p>\n<p>(showing an example with numbering, but you can take those code lines out and/or adjust the code, if you don't want/need the numbering)</p>\n<pre><code>numbering_integer_variable = 0\nforeach (item_variable, NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE) { // or: foreach (item_variable, NAME_OF_LIST_Variable) {\n  numbering_integer_variable = numbering_integer_variable + 1\n  msg (numbering_integer_variable + \". \" + item_variable)\n  msg (\"\") // one way of doing a line space-break / carriage return\n}\n\n// output/results:\n\n1. ITEM_1\n(line space-break)\n2. ITEM_2\n(line space-break)\n3. ITEM_3\n(line space-break)\netc etc etc (more or less items -- depends on your list's number/quantity of items, of course)\n(line space-break)\n</code></pre>\n<hr>\n<p>if you want them as hyperlinks... let me know... I think I can help you with how to do the syntax for/to make them into clickable hyperlinks. pretty sure I can.. lol</p>\n\n",
      "PostDate": "2018-01-12T13:50:06.4478932Z",
      "LastEditDate": "2018-01-12T13:55:36.4485419Z",
      "link": null
    }
  ]
}
