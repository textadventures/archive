{
  "Topic": {
    "TopicId": "ynv6yidgikawq03r97phvw",
    "ForumId": "10",
    "Title": "HP in Pixie's CombatLib",
    "LastUpdated": "2020-11-06T19:48:12.902189Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8e275d28-380d-465f-86b9-7253f107670a",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I know this forum has seen a lot of posts on health, but I haven't seen anything that addresses my specific concern. I've read that the built-in health system is very inflexible, and I should make my own. This is something I've seen tutorials on and feel like I can do... HOWEVER... I've implemented Pixie's Combat Library, and I don't want to break anything that's already working. Right now combat is working as intended. I can damage enemies and kill them, they can damage me and kill me, but I'm stuck with a health system that displays a percentage (undesireable), and does not seem to update during combat. I'm worried that turning off health and making my own HP system will cause the CombatLib's functionality to break. Does anyone have any insight on this? ",
      "EditableFormat": "markdown",
      "HTML": "<p>I know this forum has seen a lot of posts on health, but I haven't seen anything that addresses my specific concern. I've read that the built-in health system is very inflexible, and I should make my own. This is something I've seen tutorials on and feel like I can do... HOWEVER... I've implemented Pixie's Combat Library, and I don't want to break anything that's already working. Right now combat is working as intended. I can damage enemies and kill them, they can damage me and kill me, but I'm stuck with a health system that displays a percentage (undesireable), and does not seem to update during combat. I'm worried that turning off health and making my own HP system will cause the CombatLib's functionality to break. Does anyone have any insight on this?</p>\n\n",
      "PostDate": "2020-11-06T19:48:12.902189Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b51c9aa1-de58-4363-81b0-1107b7f19c09",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe displaying a percentage is just a problem with the display code, and not something with the underlying code. Take what I say with a grain of salt, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe displaying a percentage is just a problem with the display code, and not something with the underlying code. Take what I say with a grain of salt, though.</p>\n\n",
      "PostDate": "2020-11-07T02:08:37.5523422Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af442b51-9442-4893-8ac7-8e106367b71b",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was never able to find the code under the hood that’s running the health system. I don’t see where an integer is assigned for the player’s health. Which means, when a monster hits for 15 damage, I don’t know if they are doing 15% damage, or 15 points from a life total attribute hidden somewhere. Very confusing.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was never able to find the code under the hood that’s running the health system. I don’t see where an integer is assigned for the player’s health. Which means, when a monster hits for 15 damage, I don’t know if they are doing 15% damage, or 15 points from a life total attribute hidden somewhere. Very confusing.</p>\n\n",
      "PostDate": "2020-11-07T02:40:51.2707707Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dcdb3862-e639-4a3f-a96f-0aa31d900d4e",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For anyone who might have this issue in the future, the answer is to simply create an attribute for your player object called hitpoints and assign an integer. Then, in that attribute, assign a change script with the following...\r\n```\r\nif (player.hitpoints <= 0) {\r\n  msg (\"You have died! \")\r\n  finish\r\n}\r\n```\r\nI snagged that code from a different post Pixie made. Apparently, CombatLib is already set up for the hitpoint attribute, as enemy attacks subtract HP from my hitpoint total without me having to do any additional programming. Then for my status panel, I created a Status Attribute, labeled it hitpoints, and then set the value to \"hitpoints:!/40\".\r\n\r\nNow I just need to figure out how to cap the HP stat at 40 when introducing healing potions, and how to change the max value of the hitpoints attribute when the player levels up.",
      "EditableFormat": "markdown",
      "HTML": "<p>For anyone who might have this issue in the future, the answer is to simply create an attribute for your player object called hitpoints and assign an integer. Then, in that attribute, assign a change script with the following...</p>\n<pre><code>if (player.hitpoints &lt;= 0) {\n  msg (\"You have died! \")\n  finish\n}\n</code></pre>\n<p>I snagged that code from a different post Pixie made. Apparently, CombatLib is already set up for the hitpoint attribute, as enemy attacks subtract HP from my hitpoint total without me having to do any additional programming. Then for my status panel, I created a Status Attribute, labeled it hitpoints, and then set the value to \"hitpoints:!/40\".</p>\n<p>Now I just need to figure out how to cap the HP stat at 40 when introducing healing potions, and how to change the max value of the hitpoints attribute when the player levels up.</p>\n\n",
      "PostDate": "2020-11-09T19:25:23.9376279Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fb60c874-e440-46bf-b4ea-fc424d32d17a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Now I just need to figure out how to cap the HP stat at 40 when introducing healing potions\r\n\r\nOften, this is done using the same changescript. So it looks like:\r\n```\r\nif (this.hitpoints <= 0) {\r\n  msg (\"You have died!\")\r\n  finish\r\n}\r\nelse if (this.hitpoints > 40) {\r\n  this.hitpoints = 40\r\n}\r\n```\r\nWhen something adds to the HP, if it goes over the maximum, this will set it back to 40 again.\r\n\r\n<hr/>\r\n\r\n> and how to change the max value of the hitpoints attribute\r\n\r\nIf you create a separate attribute for the maximum, something like `maxhitpoints` then you can use that instead.\r\n\r\nSo the changescript for `hitpoints` would be:\r\n```\r\nif (this.hitpoints <= 0) {\r\n  msg (\"You have died!\")\r\n  finish\r\n}\r\nelse if (this.hitpoints > this.maxhitpoints) {\r\n  this.hitpoints = this.maxhitpoints\r\n}\r\n```\r\nand the changescript for `maxhitpoints` would be:\r\n```\r\ndictionary remove (this.statusattributes, \"hitpoints\")\r\ndictionary add (this.statusattributes, \"hitpoints\", \"hitpoints: !/\"+this.maxhitpoints)\r\n```\r\nso that it changes the maximum displayed in the status pane (although this would also have the effect of moving the hitpoints to the bottom of the status attributes pane; if you don't want that to happen, you might need to do something a little more complex.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Now I just need to figure out how to cap the HP stat at 40 when introducing healing potions</p>\n</blockquote>\n<p>Often, this is done using the same changescript. So it looks like:</p>\n<pre><code>if (this.hitpoints &lt;= 0) {\n  msg (\"You have died!\")\n  finish\n}\nelse if (this.hitpoints &gt; 40) {\n  this.hitpoints = 40\n}\n</code></pre>\n<p>When something adds to the HP, if it goes over the maximum, this will set it back to 40 again.</p>\n<hr>\n<blockquote>\n<p>and how to change the max value of the hitpoints attribute</p>\n</blockquote>\n<p>If you create a separate attribute for the maximum, something like <code>maxhitpoints</code> then you can use that instead.</p>\n<p>So the changescript for <code>hitpoints</code> would be:</p>\n<pre><code>if (this.hitpoints &lt;= 0) {\n  msg (\"You have died!\")\n  finish\n}\nelse if (this.hitpoints &gt; this.maxhitpoints) {\n  this.hitpoints = this.maxhitpoints\n}\n</code></pre>\n<p>and the changescript for <code>maxhitpoints</code> would be:</p>\n<pre><code>dictionary remove (this.statusattributes, \"hitpoints\")\ndictionary add (this.statusattributes, \"hitpoints\", \"hitpoints: !/\"+this.maxhitpoints)\n</code></pre>\n<p>so that it changes the maximum displayed in the status pane (although this would also have the effect of moving the hitpoints to the bottom of the status attributes pane; if you don't want that to happen, you might need to do something a little more complex.</p>\n\n",
      "PostDate": "2020-11-09T20:38:51.4695636Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2870fd8-fbd4-41e6-bd13-868434c5605d",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Excellent info! Thank you. That is what I was going to try. Glad to know my thinking is not faulty. Now I'm having a different problem that seems related and is basically the same problem, but I haven't been lucky enough to figure out the solution. I'm trying to display the armour value under the HP in the Status panel. From the research I've done, I can see that the function GetArmour is supposed to add all armor bonuses together and return a value, but I can't figure out how to add this output to the status panel as a status attribute. I tried creating an armour:!  value for the Armour attribute, but that is not working. Do I need to add an Armour attribute to the player? And if so, how do I get that to tie into the Wearables protection/armour system?",
      "EditableFormat": "markdown",
      "HTML": "<p>Excellent info! Thank you. That is what I was going to try. Glad to know my thinking is not faulty. Now I'm having a different problem that seems related and is basically the same problem, but I haven't been lucky enough to figure out the solution. I'm trying to display the armour value under the HP in the Status panel. From the research I've done, I can see that the function GetArmour is supposed to add all armor bonuses together and return a value, but I can't figure out how to add this output to the status panel as a status attribute. I tried creating an armour:!  value for the Armour attribute, but that is not working. Do I need to add an Armour attribute to the player? And if so, how do I get that to tie into the Wearables protection/armour system?</p>\n\n",
      "PostDate": "2020-11-10T01:40:40.3360761Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "388c9ae2-c584-43e9-811e-eec0d6dd2784",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Status attributes basically just show the attributes of the player. So in order for something to show up on there, it needs to be an attribute.\r\n\r\nI think that armour values normally come from the player's equipment, rather than the player themself. So to make it appear as a status attribute, you would need to calculate it and add it as an attribute every time the player's armour changes.\r\n\r\nThis could be as simple as having a turnscript which does something like:\r\n```\r\nplayer.armour = GetArmour()\r\n```\r\nI'd suggest simply putting that in a turnscript, so it updates the status attributes every turn",
      "EditableFormat": "markdown",
      "HTML": "<p>Status attributes basically just show the attributes of the player. So in order for something to show up on there, it needs to be an attribute.</p>\n<p>I think that armour values normally come from the player's equipment, rather than the player themself. So to make it appear as a status attribute, you would need to calculate it and add it as an attribute every time the player's armour changes.</p>\n<p>This could be as simple as having a turnscript which does something like:</p>\n<pre><code>player.armour = GetArmour()\n</code></pre>\n<p>I'd suggest simply putting that in a turnscript, so it updates the status attributes every turn</p>\n\n",
      "PostDate": "2020-11-10T10:46:37.2264016Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2268de8b-af65-4f57-9598-62208025791a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh… and the `changedmaxhitpoints` thing rewritten in a way that doesn't change the order of the status attributes:\r\n```\r\nnewstatusattributes = NewStringDictionary()\r\nforeach (attr, this.statusattributes) {\r\n  if (attr = \"hitpoints\") {\r\n    value = \"hitpoints: !/\"+this.maxhitpoints\r\n  }\r\n  else {\r\n    value = DictionaryItem (this.statusattributes, attr)\r\n  }\r\n  dictionary add (newstatusattributes, attr, value)\r\n}\r\nthis.statusattributes = newstatusattributes\r\n```\r\nThis basically copies the entire dictionary of status attributes, changing the value if it is hitpoints.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh… and the <code>changedmaxhitpoints</code> thing rewritten in a way that doesn't change the order of the status attributes:</p>\n<pre><code>newstatusattributes = NewStringDictionary()\nforeach (attr, this.statusattributes) {\n  if (attr = \"hitpoints\") {\n    value = \"hitpoints: !/\"+this.maxhitpoints\n  }\n  else {\n    value = DictionaryItem (this.statusattributes, attr)\n  }\n  dictionary add (newstatusattributes, attr, value)\n}\nthis.statusattributes = newstatusattributes\n</code></pre>\n<p>This basically copies the entire dictionary of status attributes, changing the value if it is hitpoints.</p>\n\n",
      "PostDate": "2020-11-10T10:52:03.0752973Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9bc02a24-11bd-40d3-a83a-aba25f45ca64",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for all your help! Super helpful. The GetArmour function doesn't seem to be updating player.Armour, but perhaps I don't have that attribute set up correctly either. I've got it set up to be an integer (set to 0), but perhaps it should be set to something else? I was able to goose the system by adding scripts on the wearables tab for when it's put on or taken off. Like so:\r\n```\r\nplayer.Armour = player.Armour + 1\r\n```\r\nBut I know this is sloppy because I have to add this code to every wearable with an armour value, and then I'll have to add that script to all the verbs associated with shields rather than relying on an automated function like GetArmour. Either way, even if I do get this to display the armour bonus properly, do you know of any way to confirm that the armour bonus is actually being applied? Any way to see the math behind the scenes while running the game?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for all your help! Super helpful. The GetArmour function doesn't seem to be updating player.Armour, but perhaps I don't have that attribute set up correctly either. I've got it set up to be an integer (set to 0), but perhaps it should be set to something else? I was able to goose the system by adding scripts on the wearables tab for when it's put on or taken off. Like so:</p>\n<pre><code>player.Armour = player.Armour + 1\n</code></pre>\n<p>But I know this is sloppy because I have to add this code to every wearable with an armour value, and then I'll have to add that script to all the verbs associated with shields rather than relying on an automated function like GetArmour. Either way, even if I do get this to display the armour bonus properly, do you know of any way to confirm that the armour bonus is actually being applied? Any way to see the math behind the scenes while running the game?</p>\n\n",
      "PostDate": "2020-11-10T18:16:09.7962809Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "34e87cac-b7af-4cc6-b246-1e896aa7a394",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> But I know this is sloppy because I have to add this code to every wearable with an armour value, and then I'll have to add that script to all the verbs associated with shields rather than relying on an automated function like GetArmour.\r\n\r\nThat's why it's easier to use something like the code I suggested.\r\nI know some people  have done stuff like this with wearables that modify a stat when they are added or removed; but this usually ends up being a lot of effort. Different ways to do the same job.\r\n\r\n> Either way, even if I do get this to display the armour bonus properly, do you know of any way to confirm that the armour bonus is actually being applied?\r\n\r\nI assume that if your armour increases this attribute when it is put on, and reduces the attribute when it's removed, you can simply look at the attribute every time you need to know the current armour value. So you could change your `GetArmour` function to be simply:\r\n```\r\nreturn (player.Armour)\r\n```\r\nand it uses the number that's being displayed.\r\n\r\nAlternatively, you could change your combat function so that it uses `player.Armour` whenever it needs the current value.\r\n\r\n> Any way to see the math behind the scenes while running the game?\r\n\r\nThe usual way to see what's going on behind the scenes is to use \"breadcrumbs\". Basically, you go into the function you want to examine, and add extra lines reporting on what's going on. You might add lines like:\r\n```\r\nmsg (\"Calculating attack by \" + attacker + \" against \" + target)\r\nmsg (\"Roll is: \" + roll)\r\nmsg (\"Damage is \" + damage)\r\n```\r\nand basically put lines all through the function, printing out the values of all the temporary variables. Then you can test the game, look at those values, and you can see that they are all sane.\r\n\r\n(I haven't used CombatLib, so I don't know what variables it uses. But the method is basically the same for any code. Add lines printing out all the temporary values; try it and make sure those values are what you think they should be; and then remove those lines again before you release the game to the public)\r\n\r\nAn alternative way of using breadcrumbs, which I now use more often, is to do it in the *console*.\r\n\r\nThis looks more like:\r\n```\r\nJS.console.log(\"Calculating attack by \" + attacker + \" against \" + target)\r\nJS.console.log(\"Roll is: \" + roll)\r\nJS.console.log(\"Damage is \" + damage)\r\n```\r\n\r\nThis means that the game plays normally, and the extra information appears in the *Javascript console*. In the web player, you can access this by pressing Ctrl+Shift+J while playing (may be different for other browsers); I believe in the desktop player it's available on a menu somewhere, but I'm not sure.\r\n\r\nThe JS console is useful, because it means if you forget to remove one of the breadcrumbs, the player is unlikely to see it. And if you're testing the game and something weird and unexpected happens, it's easier to find out what was going on.\r\n\r\nThere's also a \"dev mode\" in later versions of Quest, which gives you a new way to check some of these things - but I still haven't got used to using that yet.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>But I know this is sloppy because I have to add this code to every wearable with an armour value, and then I'll have to add that script to all the verbs associated with shields rather than relying on an automated function like GetArmour.</p>\n</blockquote>\n<p>That's why it's easier to use something like the code I suggested.<br>\nI know some people  have done stuff like this with wearables that modify a stat when they are added or removed; but this usually ends up being a lot of effort. Different ways to do the same job.</p>\n<blockquote>\n<p>Either way, even if I do get this to display the armour bonus properly, do you know of any way to confirm that the armour bonus is actually being applied?</p>\n</blockquote>\n<p>I assume that if your armour increases this attribute when it is put on, and reduces the attribute when it's removed, you can simply look at the attribute every time you need to know the current armour value. So you could change your <code>GetArmour</code> function to be simply:</p>\n<pre><code>return (player.Armour)\n</code></pre>\n<p>and it uses the number that's being displayed.</p>\n<p>Alternatively, you could change your combat function so that it uses <code>player.Armour</code> whenever it needs the current value.</p>\n<blockquote>\n<p>Any way to see the math behind the scenes while running the game?</p>\n</blockquote>\n<p>The usual way to see what's going on behind the scenes is to use \"breadcrumbs\". Basically, you go into the function you want to examine, and add extra lines reporting on what's going on. You might add lines like:</p>\n<pre><code>msg (\"Calculating attack by \" + attacker + \" against \" + target)\nmsg (\"Roll is: \" + roll)\nmsg (\"Damage is \" + damage)\n</code></pre>\n<p>and basically put lines all through the function, printing out the values of all the temporary variables. Then you can test the game, look at those values, and you can see that they are all sane.</p>\n<p>(I haven't used CombatLib, so I don't know what variables it uses. But the method is basically the same for any code. Add lines printing out all the temporary values; try it and make sure those values are what you think they should be; and then remove those lines again before you release the game to the public)</p>\n<p>An alternative way of using breadcrumbs, which I now use more often, is to do it in the <em>console</em>.</p>\n<p>This looks more like:</p>\n<pre><code>JS.console.log(\"Calculating attack by \" + attacker + \" against \" + target)\nJS.console.log(\"Roll is: \" + roll)\nJS.console.log(\"Damage is \" + damage)\n</code></pre>\n<p>This means that the game plays normally, and the extra information appears in the <em>Javascript console</em>. In the web player, you can access this by pressing Ctrl+Shift+J while playing (may be different for other browsers); I believe in the desktop player it's available on a menu somewhere, but I'm not sure.</p>\n<p>The JS console is useful, because it means if you forget to remove one of the breadcrumbs, the player is unlikely to see it. And if you're testing the game and something weird and unexpected happens, it's easier to find out what was going on.</p>\n<p>There's also a \"dev mode\" in later versions of Quest, which gives you a new way to check some of these things - but I still haven't got used to using that yet.</p>\n\n",
      "PostDate": "2020-11-10T19:58:20.3081589Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
