{
  "Topic": {
    "TopicId": "ub5nqtvfc0g0bcbqskqymg",
    "ForumId": "10",
    "Title": "Logic Question :)  Get and Set [SOLVED]",
    "LastUpdated": "2016-07-23T22:39:29.4586318Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "470a783b-534d-41d2-bd37-cfd5383869f1",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alright, so maybe it's because I'm too wrapped up in this because I'm been staring at it for a few hours but I have a logic question that I'm having trouble getting around. I have these Functions: \r\n\r\n***GetRelationship\r\nSetRelationship***\r\n\r\nMy question is that instead of applying these to the player, I need to apply them to all the NPC's in the game, except the player. Would a \"type\" work? Like, for example...\r\n_type\r\nNPC_ \r\n\r\n**That way I can do (if charactername.relationship=\"blahblah\") {\r\n}\r\nand\r\ncharactername.relationshipscale = charactername.relationshipscal + 10**\r\n\r\n\r\nOr is there something easier? Anyone have any ideas?\r\n\r\nHere are the codes.\r\n\r\n```'if (player.relationshipscale = 0) {\r\n  return (\"hostile\")\r\n}\r\nif (player.relationshipscale = 1) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 2) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 3) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 4) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 5) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 6) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 7) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 8) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 9) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 10) {\r\n  return (\"hated\")\r\n}\r\nif (player.relationshipscale = 11) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 12) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 13) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 14) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 15) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 16) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 17) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 18) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 19) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 20) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 21) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 22) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 23) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 24) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 25) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 26) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 27) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 28) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 29) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 30) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 31) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 32) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 33) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 34) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 35) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 36) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 37) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 38) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 39) {\r\n  return (\"stranger\")\r\n}\r\nif (player.relationshipscale = 40) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 41) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 42) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 43) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 44) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 45) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 46) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 47) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 48) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 49) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 50) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 51) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 52) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 53) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 54) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 55) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 56) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 57) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 58) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 59) {\r\n  return (\"acq\")\r\n}\r\nif (player.relationshipscale = 60) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 61) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 62) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 63) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 64) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 65) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 66) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 67) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 68) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 69) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 70) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 71) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 72) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 73) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 74) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 75) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 76) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 77) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 78) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 79) {\r\n  return (\"friend\")\r\n}\r\nif (player.relationshipscale = 80) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 81) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 82) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 83) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 84) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 85) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 86) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 87) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 88) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 89) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 90) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 91) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 92) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 93) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 94) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 95) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 96) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 97) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 98) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 99) {\r\n  return (\"fwb\")\r\n}\r\nif (player.relationshipscale = 100) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 101) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 102) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 103) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 104) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 105) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 106) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 107) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 108) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 109) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 110) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 111) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 112) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 113) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 114) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 115) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 116) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 117) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 118) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 119) {\r\n  return (\"lover\")\r\n}\r\nif (player.relationshipscale = 120) {\r\n  return (\"spouse\")\r\n}```\r\n\r\nand...\r\n\r\n```player.relationshipscale = GetRelationship()```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Alright, so maybe it's because I'm too wrapped up in this because I'm been staring at it for a few hours but I have a logic question that I'm having trouble getting around. I have these Functions:</p>\n<p><strong><em>GetRelationship<br>\nSetRelationship</em></strong></p>\n<p>My question is that instead of applying these to the player, I need to apply them to all the NPC's in the game, except the player. Would a \"type\" work? Like, for example...<br>\n<em>type<br>\nNPC</em></p>\n<p><strong>That way I can do (if charactername.relationship=\"blahblah\") {<br>\n}<br>\nand<br>\ncharactername.relationshipscale = charactername.relationshipscal + 10</strong></p>\n<p>Or is there something easier? Anyone have any ideas?</p>\n<p>Here are the codes.</p>\n<pre><code>  return (\"hostile\")\n}\nif (player.relationshipscale = 1) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 2) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 3) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 4) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 5) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 6) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 7) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 8) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 9) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 10) {\n  return (\"hated\")\n}\nif (player.relationshipscale = 11) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 12) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 13) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 14) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 15) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 16) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 17) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 18) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 19) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 20) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 21) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 22) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 23) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 24) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 25) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 26) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 27) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 28) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 29) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 30) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 31) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 32) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 33) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 34) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 35) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 36) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 37) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 38) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 39) {\n  return (\"stranger\")\n}\nif (player.relationshipscale = 40) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 41) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 42) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 43) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 44) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 45) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 46) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 47) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 48) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 49) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 50) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 51) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 52) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 53) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 54) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 55) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 56) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 57) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 58) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 59) {\n  return (\"acq\")\n}\nif (player.relationshipscale = 60) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 61) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 62) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 63) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 64) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 65) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 66) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 67) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 68) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 69) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 70) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 71) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 72) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 73) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 74) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 75) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 76) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 77) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 78) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 79) {\n  return (\"friend\")\n}\nif (player.relationshipscale = 80) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 81) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 82) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 83) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 84) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 85) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 86) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 87) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 88) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 89) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 90) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 91) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 92) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 93) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 94) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 95) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 96) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 97) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 98) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 99) {\n  return (\"fwb\")\n}\nif (player.relationshipscale = 100) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 101) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 102) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 103) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 104) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 105) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 106) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 107) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 108) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 109) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 110) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 111) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 112) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 113) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 114) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 115) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 116) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 117) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 118) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 119) {\n  return (\"lover\")\n}\nif (player.relationshipscale = 120) {\n  return (\"spouse\")\n}```\n\nand...\n\n```player.relationshipscale = GetRelationship()```\n</code></pre>\n\n",
      "PostDate": "2016-07-23T22:39:29.4586318Z",
      "LastEditDate": "2016-07-29T20:36:19.848708Z"
    },
    {
      "PostId": "e7de4482-63a3-450a-b34f-7ee9464432ed",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ea7c0eff71476cd165c31f2605b2f755?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can shorten your code a lot by doing this:\r\n\r\n````\r\nif (player.relationshipscale > 0 and player.relationshipscale < 11) {\r\n  return (\"hated\")\r\n...\r\n````",
      "EditableFormat": "markdown",
      "HTML": "<p>You can shorten your code a lot by doing this:</p>\n<pre><code>if (player.relationshipscale &gt; 0 and player.relationshipscale &lt; 11) {\n  return (\"hated\")\n...\n</code></pre>\n\n",
      "PostDate": "2016-07-24T06:19:46.7214878Z",
      "LastEditDate": null
    },
    {
      "PostId": "3be20792-586d-4ff2-bd62-7d4924a6319c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's countless ways of implementing/doing what you want...\r\n\r\n--------------\r\n\r\nHK edit: err... I really need to read posts fully... laughs... ignore this section, look further below (the part with the much larger code / code box, lol) about for your specific setup needs\r\n\r\nprobably one of the simpliest ways is to check if the Object is (for this example) the currently controlled Player Object (game.pov), for example:\r\n\r\n```\r\n// using a Command just for example quickness:\r\n<command name=\"set_attribute_on_all_objects_except_pov_command\">\r\n  <pattern>set all value #text1# on attribute #text2#</pattern> // sorry for the very long pattern, I just wanted it to be descriptive so you can understand it, a better (shortened) version of it for actual use (lol): setall #text1# #text2#\r\n  <script>\r\n    foreach (object_variable, AllObjects()) {\r\n      if (not object_variable = game.pov) {\r\n        set (object_variable, text2, ToInt (text1)) // or: set (object_variable, text2, ToDouble (text1))\r\n        // or: set (object_variable, text2, GetAttribute (object_variable, text2) OPERATOR '(ToInt/ToDouble)' (text1)) // the text1 is your value input (that will be added/subtracted/multiplied/divded/modulus'ed to the Attribute), such as for example: 10, and replace my 'OPERATOR' with your math operation symbol (+, -, *, /, %, ?etc?), an example: set (object_variable, text2, GetAttribute (object_variable, text2) + 10) // you're adding 10 to the Attribute (if the Attribute's value was 0, now it will become 10: 0 + 10 = 10. if the Attribute's value was 17, now it will become 27: 17 + 10 = 27)\r\n      }\r\n    }\r\n  </script>\r\n</command>\r\n```\r\n\r\nthis can be of course changed up a bit and/or expanded upon, as you can use another check upon an Attribute that you give to all of your Objects, to flag/indicate what type of Object they are, to narrow down to a specific group of Objects if you need to do so (for example: you don't want to give a 'life/strength/endurance/experience/etc' Attribute to a non-actor/non-character Object, such as a 'tree/cloud/bed/desk/etc' Object or a 'castle' Room Object, obviously).\r\n\r\n---------\r\n\r\nas for what you specifically want with what you've provided (and if I understand it correctly, laughs):\r\n\r\n(I went a bit overboard, well for me anyways, lol ... if my code is relatively error free, then it's capable of being expanded to handling many various setups: you'll be able to use this Function for almost anything/everything you want for handling like-stuff design/needs of your post's topic)\r\n\r\n```\r\n// \"various things\" for showcasing this example:\r\n\r\n// the range (for my 'relationship_integer_attribute', which is equivalent to your: 'relationshipscale'), due to how I have this example set up, has to be within: 0 to 100, and also, as I haven't included the needed code to handle if it's less than 0 or greater than 100\r\n\r\n<object name=\"player\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">pc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"relationship_string_attribute\" type=\"string\">irresistable</attr>\r\n</object>\r\n\r\n<object name=\"npc1\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">5</attr>\r\n</object>\r\n\r\n<object name=\"npc2\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">15</attr>\r\n</object>\r\n\r\n<object name=\"npc3\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">25</attr>\r\n</object>\r\n\r\n<object name=\"npc4\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">35</attr>\r\n</object>\r\n\r\n<object name=\"npc5\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">45</attr>\r\n</object>\r\n\r\n<object name=\"npc6\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">55</attr>\r\n</object>\r\n\r\n<object name=\"npc7\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">65</attr>\r\n</object>\r\n\r\n<object name=\"npc8\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">75</attr>\r\n</object>\r\n\r\n<object name=\"npc9\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">85</attr>\r\n</object>\r\n\r\n<object name=\"npc10\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">95</attr>\r\n</object>\r\n\r\n<object name=\"npc11\">\r\n  <attr name=\"type_string_attribute\" type=\"string\">npc</attr>\r\n  <attr name=\"relationship_integer_attribute\" type=\"int\">100</attr>\r\n</object>\r\n\r\n// these have to have a constant/static interval/multiple (in this case, I'm using 'by 10s', and since the range is 0 to 100, that's why these values are from: 0 to 10, as when you divide a number in the range of 0 to 100 by 10, you'll get numbers from 0 to 10: int division in quest, and in probably most programming languages too, truncates/deletes the decimal/fraction amount), and so you must specific (10) for the Function Call's 'interval_parameter' Argument (see the 'scripting example' section):\r\n// (strings can't start with a number character/symbol, that's why I have/need my 'item' in front of the number value/character/symbol)\r\n<object name=\"global_data_object\">\r\n  <attr name=\"relationship_integer_to_relationship_string_stringdictionary_attribute\" type=\"simplestringdictionary\">item0 = \"bitter enemies\"; item1 = \"enemies\"; item2 = \"bitter rivals\"; item3 = \"rivals\"; item4 = \"dislike\"; item5 = \"neutral\"; item6 = \"like\"; item7 = \"friends\"; item8 = \"affectionate\"; item9 = \"lovers\"; item10 = \"soul mates\"</attr>\r\n</object>\r\n\r\n// scripting example:\r\n\r\ndynamic_conversion_multi_set_function (\"npc\", \"type_string_attribute\", \"relationship_integer_attribute\", \"relationship_string_attribute\", global_data_object, \"relationship_integer_to_relationship_string_stringdictionary_attribute\", 10)\r\n\r\n// the Function (not complete... maybe, Pixie/Jay/Pertex/whoever else good at programming, can help fix and/or finish it up):\r\n\r\n<function name=\"dynamic_conversion_multi_set_function\" parameters=\"type_attr_value_param, type_attr_param, input_attr_param, output_attr_param, dict_obj_param, dict_attr_param, interval_param\">\r\n  foreach (obj_var, AllObjects()) {\r\n    if (GetAttribute (obj_var, type_attr_param) = type_attr_value_param and HasAttribute (obj_var, input_attr_param)) {\r\n      if (IsInt (GetAttribute (obj_var, input_attr_param)) and TypeOf (interval_param) = \"int\") {\r\n        str_input_var = \"item\"\r\n        str_input_var = str_input_var + ToString (GetAttribute (obj_var, input_attr_param) / interval_param)\r\n        if (DictionaryContains (GetAttribute (dict_obj_param, dict_attr_param), str_input_var)) {\r\n          set (obj_var, output_attr_param, DictionaryItem (GetAttribute (dict_obj_param, dict_attr_param), str_input_var))\r\n        }\r\n      }\r\n    }\r\n  }\r\n</function>\r\n\r\n// if my code is error free (haha), and if put into a testable game for it, then it should (the chance of it working correctly is: 1%) produce these results:\r\n\r\nnpc1.relationship_string_attribute = \"bitter enemies\" // (5/10 = 0)\r\nnpc2.relationship_string_attribute = \"enemies\" // (15/10 = 1)\r\nnpc3.relationship_string_attribute = \"bitter rivals\" // (25/10 = 2)\r\nnpc4.relationship_string_attribute = \"rivals\" // (35/10 = 3)\r\nnpc5.relationship_string_attribute = \"dislike\" // (45/10 = 4)\r\nnpc6.relationship_string_attribute = \"neutral\" // (55/10 = 5)\r\nnpc7.relationship_string_attribute = \"like\" // (65/10 = 6)\r\nnpc8.relationship_string_attribute = \"friends\" // (75/10 = 7)\r\nnpc9.relationship_string_attribute = \"affectionate\" // (85/10 = 8)\r\nnpc10.relationship_string_attribute = \"lovers\" // (95/10 = 9)\r\nnpc11.relationship_string_attribute = \"soul mates\" // (100/10 = 10)\r\n\r\n// and also this should remain unchanged, as:\r\n\r\nplayer.relationship_string_attribute = \"irresistable\" // <---- no relationship (haha, pun/funny made) between these ----> (player.relationship_string_attribute = 100)\r\n\r\n```\r\n\r\nas if you got any questions about any of this, ASK AWAY!, as even if you really examine my code, it can still be very UN-intuitive for other people, in their efforts of understanding it (as others are not me and my thought process in the code's crafting/design/methodolgy, lol).",
      "EditableFormat": "markdown",
      "HTML": "<p>there's countless ways of implementing/doing what you want...</p>\n<hr>\n<p>HK edit: err... I really need to read posts fully... laughs... ignore this section, look further below (the part with the much larger code / code box, lol) about for your specific setup needs</p>\n<p>probably one of the simpliest ways is to check if the Object is (for this example) the currently controlled Player Object (game.pov), for example:</p>\n<pre><code>// using a Command just for example quickness:\n&lt;command name=\"set_attribute_on_all_objects_except_pov_command\"&gt;\n  &lt;pattern&gt;set all value #text1# on attribute #text2#&lt;/pattern&gt; // sorry for the very long pattern, I just wanted it to be descriptive so you can understand it, a better (shortened) version of it for actual use (lol): setall #text1# #text2#\n  &lt;script&gt;\n    foreach (object_variable, AllObjects()) {\n      if (not object_variable = game.pov) {\n        set (object_variable, text2, ToInt (text1)) // or: set (object_variable, text2, ToDouble (text1))\n        // or: set (object_variable, text2, GetAttribute (object_variable, text2) OPERATOR '(ToInt/ToDouble)' (text1)) // the text1 is your value input (that will be added/subtracted/multiplied/divded/modulus'ed to the Attribute), such as for example: 10, and replace my 'OPERATOR' with your math operation symbol (+, -, *, /, %, ?etc?), an example: set (object_variable, text2, GetAttribute (object_variable, text2) + 10) // you're adding 10 to the Attribute (if the Attribute's value was 0, now it will become 10: 0 + 10 = 10. if the Attribute's value was 17, now it will become 27: 17 + 10 = 27)\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<p>this can be of course changed up a bit and/or expanded upon, as you can use another check upon an Attribute that you give to all of your Objects, to flag/indicate what type of Object they are, to narrow down to a specific group of Objects if you need to do so (for example: you don't want to give a 'life/strength/endurance/experience/etc' Attribute to a non-actor/non-character Object, such as a 'tree/cloud/bed/desk/etc' Object or a 'castle' Room Object, obviously).</p>\n<hr>\n<p>as for what you specifically want with what you've provided (and if I understand it correctly, laughs):</p>\n<p>(I went a bit overboard, well for me anyways, lol ... if my code is relatively error free, then it's capable of being expanded to handling many various setups: you'll be able to use this Function for almost anything/everything you want for handling like-stuff design/needs of your post's topic)</p>\n<pre><code>// \"various things\" for showcasing this example:\n\n// the range (for my 'relationship_integer_attribute', which is equivalent to your: 'relationshipscale'), due to how I have this example set up, has to be within: 0 to 100, and also, as I haven't included the needed code to handle if it's less than 0 or greater than 100\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;pc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"relationship_string_attribute\" type=\"string\"&gt;irresistable&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc1\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc2\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;15&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc3\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;25&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc4\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;35&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc5\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;45&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc6\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;55&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc7\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;65&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc8\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;75&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc9\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;85&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc10\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;95&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc11\"&gt;\n  &lt;attr name=\"type_string_attribute\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationship_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n&lt;/object&gt;\n\n// these have to have a constant/static interval/multiple (in this case, I'm using 'by 10s', and since the range is 0 to 100, that's why these values are from: 0 to 10, as when you divide a number in the range of 0 to 100 by 10, you'll get numbers from 0 to 10: int division in quest, and in probably most programming languages too, truncates/deletes the decimal/fraction amount), and so you must specific (10) for the Function Call's 'interval_parameter' Argument (see the 'scripting example' section):\n// (strings can't start with a number character/symbol, that's why I have/need my 'item' in front of the number value/character/symbol)\n&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"relationship_integer_to_relationship_string_stringdictionary_attribute\" type=\"simplestringdictionary\"&gt;item0 = \"bitter enemies\"; item1 = \"enemies\"; item2 = \"bitter rivals\"; item3 = \"rivals\"; item4 = \"dislike\"; item5 = \"neutral\"; item6 = \"like\"; item7 = \"friends\"; item8 = \"affectionate\"; item9 = \"lovers\"; item10 = \"soul mates\"&lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting example:\n\ndynamic_conversion_multi_set_function (\"npc\", \"type_string_attribute\", \"relationship_integer_attribute\", \"relationship_string_attribute\", global_data_object, \"relationship_integer_to_relationship_string_stringdictionary_attribute\", 10)\n\n// the Function (not complete... maybe, Pixie/Jay/Pertex/whoever else good at programming, can help fix and/or finish it up):\n\n&lt;function name=\"dynamic_conversion_multi_set_function\" parameters=\"type_attr_value_param, type_attr_param, input_attr_param, output_attr_param, dict_obj_param, dict_attr_param, interval_param\"&gt;\n  foreach (obj_var, AllObjects()) {\n    if (GetAttribute (obj_var, type_attr_param) = type_attr_value_param and HasAttribute (obj_var, input_attr_param)) {\n      if (IsInt (GetAttribute (obj_var, input_attr_param)) and TypeOf (interval_param) = \"int\") {\n        str_input_var = \"item\"\n        str_input_var = str_input_var + ToString (GetAttribute (obj_var, input_attr_param) / interval_param)\n        if (DictionaryContains (GetAttribute (dict_obj_param, dict_attr_param), str_input_var)) {\n          set (obj_var, output_attr_param, DictionaryItem (GetAttribute (dict_obj_param, dict_attr_param), str_input_var))\n        }\n      }\n    }\n  }\n&lt;/function&gt;\n\n// if my code is error free (haha), and if put into a testable game for it, then it should (the chance of it working correctly is: 1%) produce these results:\n\nnpc1.relationship_string_attribute = \"bitter enemies\" // (5/10 = 0)\nnpc2.relationship_string_attribute = \"enemies\" // (15/10 = 1)\nnpc3.relationship_string_attribute = \"bitter rivals\" // (25/10 = 2)\nnpc4.relationship_string_attribute = \"rivals\" // (35/10 = 3)\nnpc5.relationship_string_attribute = \"dislike\" // (45/10 = 4)\nnpc6.relationship_string_attribute = \"neutral\" // (55/10 = 5)\nnpc7.relationship_string_attribute = \"like\" // (65/10 = 6)\nnpc8.relationship_string_attribute = \"friends\" // (75/10 = 7)\nnpc9.relationship_string_attribute = \"affectionate\" // (85/10 = 8)\nnpc10.relationship_string_attribute = \"lovers\" // (95/10 = 9)\nnpc11.relationship_string_attribute = \"soul mates\" // (100/10 = 10)\n\n// and also this should remain unchanged, as:\n\nplayer.relationship_string_attribute = \"irresistable\" // &lt;---- no relationship (haha, pun/funny made) between these ----&gt; (player.relationship_string_attribute = 100)\n\n</code></pre>\n<p>as if you got any questions about any of this, ASK AWAY!, as even if you really examine my code, it can still be very UN-intuitive for other people, in their efforts of understanding it (as others are not me and my thought process in the code's crafting/design/methodolgy, lol).</p>\n\n",
      "PostDate": "2016-07-24T08:33:40.9485817Z",
      "LastEditDate": "2016-07-24T10:22:10.9568431Z"
    },
    {
      "PostId": "1c0b8a49-ebbe-4afb-89d4-4a6488f15af6",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can shorten your code a lot by doing this:\r\n\r\nif (player.relationshipscale > 0 and player.relationshipscale < 11) {\r\n  return (\"hated\")\r\n\r\nThanks! For the suggestion. I may have to use that when I fix everything up. \r\n\r\nSo I added the object type \"npc\". But what is the expression for applying it to the If Code?\r\n\r\nSomething like ...  if (npc.type=\"stranger\") {\r\n}\r\n\r\n?\r\n\r\n ",
      "EditableFormat": "markdown",
      "HTML": "<p>You can shorten your code a lot by doing this:</p>\n<p>if (player.relationshipscale &gt; 0 and player.relationshipscale &lt; 11) {<br>\nreturn (\"hated\")</p>\n<p>Thanks! For the suggestion. I may have to use that when I fix everything up.</p>\n<p>So I added the object type \"npc\". But what is the expression for applying it to the If Code?</p>\n<p>Something like ...  if (npc.type=\"stranger\") {<br>\n}</p>\n<p>?</p>\n\n",
      "PostDate": "2016-07-24T17:17:22.9873369Z",
      "LastEditDate": null
    },
    {
      "PostId": "2d443975-837a-4aed-95c5-72bccdfb9bbe",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ea7c0eff71476cd165c31f2605b2f755?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Types work like this: \r\n\r\na) You  define a type and define attributes with default values for it. \r\n\r\nb) you assign the type to the appropriate object\r\n\r\nSo for example you can have an npc type with the attribute relationshipscale (integer wit default 0). If you have a character named Joe, assign the npc tpe to it. From now on you can use Joe.relationshipscale, for example\r\n\r\nJoe.relationshipscale = Joe.relationshipscale + 10\r\n\r\nor \r\n\r\nif (Joe.relationshipscale > 50) ...\r\n\r\nThat's all the magic there is with types afaik. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Types work like this:</p>\n<p>a) You  define a type and define attributes with default values for it.</p>\n<p>b) you assign the type to the appropriate object</p>\n<p>So for example you can have an npc type with the attribute relationshipscale (integer wit default 0). If you have a character named Joe, assign the npc tpe to it. From now on you can use Joe.relationshipscale, for example</p>\n<p>Joe.relationshipscale = Joe.relationshipscale + 10</p>\n<p>or</p>\n<p>if (Joe.relationshipscale &gt; 50) ...</p>\n<p>That's all the magic there is with types afaik.</p>\n\n",
      "PostDate": "2016-07-24T17:25:45.659708Z",
      "LastEditDate": null
    },
    {
      "PostId": "382be5d3-3a4e-4967-b37c-7c04c3bdbc26",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think I understand how types work. Thanks though, because you reminded me of something I hadn't added to them! I still have a problem, for example...I have: \r\n```\r\nrelationship.string.unknown\r\nrelationshipscale.integer.0\r\n```\r\n\r\nBut I'm not sure how to set up the \"NPC\" type to apply to all NPC's. I tried...\r\n```\r\nchangedrelationship.script.\r\nif (goblinesque woman.relationshipscale = 0) {\r\n  return (\"hostile\")\r\n}\r\nif (goblinesque woman.relationshipscale >=1 and goblinesque woman.relationshipscale <=10) {\r\n  return (\"hated\")\r\n}\r\nif (goblinesque woman.relationshipscale >=11 and goblinesque woman.relationshipscale <=39) {\r\n  return (\"stranger\")\r\n}\r\nif (goblinesque woman.relationshipscale >=40 and goblinesque woman.relationshipscale <=59) {\r\n  return (\"acq\")\r\n}\r\nif (goblinesque woman.relationshipscale >=60 and goblinesque woman.relationshipscale <=79) {\r\n  return (\"friend\")\r\n}\r\nif (goblinesque woman.relationshipscale >=80 and goblinesque woman.relationshipscale <=99) {\r\n  return (\"fwb\")\r\n}\r\nif (goblinesque woman.relationshipscale >=100 and goblinesque woman.relationshipscale <=119) {\r\n  return (\"lover\")\r\n}\r\nif (goblinesque woman.relationshipscale = 120) {\r\n  return (\"spouse\")\r\n}\r\n```\r\n\r\nBut I realized that doing that will only apply to that one NPC. That's why I need to figure out how to apply that script to all NPC types. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I think I understand how types work. Thanks though, because you reminded me of something I hadn't added to them! I still have a problem, for example...I have:</p>\n<pre><code>relationship.string.unknown\nrelationshipscale.integer.0\n</code></pre>\n<p>But I'm not sure how to set up the \"NPC\" type to apply to all NPC's. I tried...</p>\n<pre><code>changedrelationship.script.\nif (goblinesque woman.relationshipscale = 0) {\n  return (\"hostile\")\n}\nif (goblinesque woman.relationshipscale &gt;=1 and goblinesque woman.relationshipscale &lt;=10) {\n  return (\"hated\")\n}\nif (goblinesque woman.relationshipscale &gt;=11 and goblinesque woman.relationshipscale &lt;=39) {\n  return (\"stranger\")\n}\nif (goblinesque woman.relationshipscale &gt;=40 and goblinesque woman.relationshipscale &lt;=59) {\n  return (\"acq\")\n}\nif (goblinesque woman.relationshipscale &gt;=60 and goblinesque woman.relationshipscale &lt;=79) {\n  return (\"friend\")\n}\nif (goblinesque woman.relationshipscale &gt;=80 and goblinesque woman.relationshipscale &lt;=99) {\n  return (\"fwb\")\n}\nif (goblinesque woman.relationshipscale &gt;=100 and goblinesque woman.relationshipscale &lt;=119) {\n  return (\"lover\")\n}\nif (goblinesque woman.relationshipscale = 120) {\n  return (\"spouse\")\n}\n</code></pre>\n<p>But I realized that doing that will only apply to that one NPC. That's why I need to figure out how to apply that script to all NPC types.</p>\n\n",
      "PostDate": "2016-07-24T19:06:33.6978467Z",
      "LastEditDate": null
    },
    {
      "PostId": "9a9b81ee-f514-4ebd-88f3-504d9576fbfe",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"So I added the object type \"npc\". But what is the expression for applying it to the If Code? (Anonynn)\"\r\n\r\nyou can create/add it as whatever Attribute Type you want as your 'flag/indicator' Attribute, which then thus determines what type its Value/syntax needs to be, for examples:\r\n\r\n(you may not want to use 'type' as the name/label, as 'type' is used for so much stuff/everything... lol. If you want to use 'type' in your names/labels, make it unique, to ensure you're not over-riding any of the built-in code that may use 'type' for its stuffs' names/labels)\r\n\r\n```\r\nvarious 'flag/indicator' Attributes:\r\n\r\nString Attribute:\r\n\r\n// 'creation' tag syntax: <attr name=\"type\" type=\"string\">npc</attr>\r\n\r\n// scripting syntax 1: if (OBJECT_NAME.type = \"npc\") { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = \"npc\") { /* scripting */ }\r\n\r\n// scripting syntax 2: if (GetString (OBJECT_NAME, \"type\") = \"npc\") { /* scripting */ } // or the negation/opposite: if (not GetString (OBJECT_NAME, \"type\") = \"npc\")  { /* scripting */ }\r\n\r\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = \"npc\") { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = \"npc\")  { /* scripting */ }\r\n\r\nBoolean Attribute:\r\n\r\n// 'creation' tag syntax: <attr name=\"type\" type=\"boolean\">true</attr> // or the negation/opposite: <attr name=\"type\" type=\"boolean\">false</attr>\r\n\r\n// scripting syntax 1 (if TRUE): if (OBJECT_NAME.type) { /* scripting */ } // or the negation/opposite (if FALSE): if (not OBJECT_NAME.type) { /* scripting */ }\r\n\r\n// scripting syntax 2 (IF TRUE): if (GetBoolean (OBJECT_NAME, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not GetBoolean (OBJECT_NAME, \"type\"))  { /* scripting */ }\r\n\r\n// scripting syntax 3 (if TRUE): if (GetAttribute (OBJECT_NAME, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not GetAttribute (OBJECT_NAME, \"type\"))  { /* scripting */ }\r\n\r\nInteger Attribute:\r\n\r\n// 'creation' tag syntax: <attr name=\"type\" type=\"int\">0</attr>\r\n\r\n// scripting syntax 1: if (OBJECT_NAME.type = 0) { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = 0) { /* scripting */ }\r\n\r\n// scripting syntax 2: if (GetInt (OBJECT_NAME, \"type\") = 0) { /* scripting */ } // or the negation/opposite: if (not GetInt (OBJECT_NAME, \"type\") = 0)  { /* scripting */ }\r\n\r\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = 0) { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = 0)  { /* scripting */ }\r\n\r\nObject Attribute:\r\n\r\n// required Object (via 'creation' tag syntax for this example): <object name=\"npc\"></object>\r\n\r\n// 'creation' tag syntax: <attr name=\"type\" type=\"object\">npc</attr>\r\n\r\n// scripting syntax 1: if (OBJECT_NAME.type = npc) { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = npc) { /* scripting */ }\r\n\r\n// scripting syntax 2: if (GetObject (OBJECT_NAME.type) = npc) { /* scripting */ } // or the negation/opposite: if (not GetObject (OBJECT_NAME.type) = npc)  { /* scripting */ }\r\n\r\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = npc) { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = npc)  { /* scripting */ }\r\n\r\nInherited Attribute (Object Types / Types):\r\n\r\n// needed Object Type (via 'creation' tag syntax for this example):\r\n<type name=\"type\">\r\n  // blah content (Attributes) or null (aka: having no content/Attributes; leave blank)\r\n</type>\r\n\r\n<object name=\"xxx\">\r\n  <inherit name=\"type\" />\r\n</object>\r\n\r\nscripting syntax 1 (if TRUE): if (DoesInherit (xxx, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not DoesInherit (xxx, \"type\")) { /* scripting */ }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>\"So I added the object type \"npc\". But what is the expression for applying it to the If Code? (Anonynn)\"</p>\n<p>you can create/add it as whatever Attribute Type you want as your 'flag/indicator' Attribute, which then thus determines what type its Value/syntax needs to be, for examples:</p>\n<p>(you may not want to use 'type' as the name/label, as 'type' is used for so much stuff/everything... lol. If you want to use 'type' in your names/labels, make it unique, to ensure you're not over-riding any of the built-in code that may use 'type' for its stuffs' names/labels)</p>\n<pre><code>various 'flag/indicator' Attributes:\n\nString Attribute:\n\n// 'creation' tag syntax: &lt;attr name=\"type\" type=\"string\"&gt;npc&lt;/attr&gt;\n\n// scripting syntax 1: if (OBJECT_NAME.type = \"npc\") { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = \"npc\") { /* scripting */ }\n\n// scripting syntax 2: if (GetString (OBJECT_NAME, \"type\") = \"npc\") { /* scripting */ } // or the negation/opposite: if (not GetString (OBJECT_NAME, \"type\") = \"npc\")  { /* scripting */ }\n\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = \"npc\") { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = \"npc\")  { /* scripting */ }\n\nBoolean Attribute:\n\n// 'creation' tag syntax: &lt;attr name=\"type\" type=\"boolean\"&gt;true&lt;/attr&gt; // or the negation/opposite: &lt;attr name=\"type\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n// scripting syntax 1 (if TRUE): if (OBJECT_NAME.type) { /* scripting */ } // or the negation/opposite (if FALSE): if (not OBJECT_NAME.type) { /* scripting */ }\n\n// scripting syntax 2 (IF TRUE): if (GetBoolean (OBJECT_NAME, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not GetBoolean (OBJECT_NAME, \"type\"))  { /* scripting */ }\n\n// scripting syntax 3 (if TRUE): if (GetAttribute (OBJECT_NAME, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not GetAttribute (OBJECT_NAME, \"type\"))  { /* scripting */ }\n\nInteger Attribute:\n\n// 'creation' tag syntax: &lt;attr name=\"type\" type=\"int\"&gt;0&lt;/attr&gt;\n\n// scripting syntax 1: if (OBJECT_NAME.type = 0) { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = 0) { /* scripting */ }\n\n// scripting syntax 2: if (GetInt (OBJECT_NAME, \"type\") = 0) { /* scripting */ } // or the negation/opposite: if (not GetInt (OBJECT_NAME, \"type\") = 0)  { /* scripting */ }\n\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = 0) { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = 0)  { /* scripting */ }\n\nObject Attribute:\n\n// required Object (via 'creation' tag syntax for this example): &lt;object name=\"npc\"&gt;&lt;/object&gt;\n\n// 'creation' tag syntax: &lt;attr name=\"type\" type=\"object\"&gt;npc&lt;/attr&gt;\n\n// scripting syntax 1: if (OBJECT_NAME.type = npc) { /* scripting */ } // or the negation/opposite: if (not OBJECT_NAME.type = npc) { /* scripting */ }\n\n// scripting syntax 2: if (GetObject (OBJECT_NAME.type) = npc) { /* scripting */ } // or the negation/opposite: if (not GetObject (OBJECT_NAME.type) = npc)  { /* scripting */ }\n\n// scripting syntax 3: if (GetAttribute (OBJECT_NAME, \"type\") = npc) { /* scripting */ } // or the negation/opposite: if (not GetAttribute (OBJECT_NAME, \"type\") = npc)  { /* scripting */ }\n\nInherited Attribute (Object Types / Types):\n\n// needed Object Type (via 'creation' tag syntax for this example):\n&lt;type name=\"type\"&gt;\n  // blah content (Attributes) or null (aka: having no content/Attributes; leave blank)\n&lt;/type&gt;\n\n&lt;object name=\"xxx\"&gt;\n  &lt;inherit name=\"type\" /&gt;\n&lt;/object&gt;\n\nscripting syntax 1 (if TRUE): if (DoesInherit (xxx, \"type\")) { /* scripting */ } // or the negation/opposite (if FALSE): if (not DoesInherit (xxx, \"type\")) { /* scripting */ }\n</code></pre>\n\n",
      "PostDate": "2016-07-24T19:13:58.0205493Z",
      "LastEditDate": "2016-07-24T20:03:19.7916962Z"
    },
    {
      "PostId": "b4c5e7dd-d0c1-4788-b4ef-3e1e38847d05",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"But I'm not sure how to set up the \"NPC\" type to apply to all NPC's. I tried... (Anonynn)\"\r\n\r\nsee my \"big\" post (it starts with: \"there's countless ways of implementing/doing what you want\") or look below:\r\n\r\nyou got to use a 'foreach' Script/Function along with the 'AllObjects()' Script/Function:\r\n\r\n(for better efficiency, it would be good to put all of your 'npc' Objects into a 'npc' Object List Attribute, as that way you can 'foreach' through it, instead of the 'AllObjects()' Function that uses an Object List Attribute having ALL of the Objects in your game! iterating through all Objects in your game multiple times is the worst, compared to iterating through all Objects in your game once to add them into your 'npc' Object List Attribute so you don't have to do it manually yourself in in-code/GUI~Editor and then iterating through your smaller 'npc' Object List Attribute multiple times --- better, compared to merely iterating through your smaller 'npc' Object List Attribute multiple times --- best code efficiency wise but it means you got to manually put/write all of your npc Objects into your 'npc' Object List Attribute --- bad for YOU, lol) \r\n\r\n```\r\n// using a String attribute for your indicator/flag Attribute for this example:\r\n<object name=\"npc1\">\r\n  <attr name=\"type\" type=\"string\">npc</attr>\r\n  <attr name=\"relationshipscale\" type=\"int\">20</attr>\r\n  <attr name=\"relationship\" type=\"string\">unknown</attr>\r\n</object>\r\n\r\n<object name=\"npc2\">\r\n  <attr name=\"type\" type=\"string\">npc</attr>\r\n  <attr name=\"relationshipscale\" type=\"int\">80</attr>\r\n  <attr name=\"relationship\" type=\"string\">unknown</attr>\r\n</object>\r\n\r\nforeach (object_variable, AllObjects()) {\r\n  if (GetAttribute (object_variable, \"type\") = \"npc\") {\r\n    if (object_variable.relationshipscale >= 90) {\r\n      object_variable.relationship = \"lovers\"\r\n    } else if (object_variable.relationshipscale >= 80) {\r\n      object_variable.relationship = \"bffs\"\r\n    }\r\n    // etc 'else ifs' and optional 'else'\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>\"But I'm not sure how to set up the \"NPC\" type to apply to all NPC's. I tried... (Anonynn)\"</p>\n<p>see my \"big\" post (it starts with: \"there's countless ways of implementing/doing what you want\") or look below:</p>\n<p>you got to use a 'foreach' Script/Function along with the 'AllObjects()' Script/Function:</p>\n<p>(for better efficiency, it would be good to put all of your 'npc' Objects into a 'npc' Object List Attribute, as that way you can 'foreach' through it, instead of the 'AllObjects()' Function that uses an Object List Attribute having ALL of the Objects in your game! iterating through all Objects in your game multiple times is the worst, compared to iterating through all Objects in your game once to add them into your 'npc' Object List Attribute so you don't have to do it manually yourself in in-code/GUI~Editor and then iterating through your smaller 'npc' Object List Attribute multiple times --- better, compared to merely iterating through your smaller 'npc' Object List Attribute multiple times --- best code efficiency wise but it means you got to manually put/write all of your npc Objects into your 'npc' Object List Attribute --- bad for YOU, lol)</p>\n<pre><code>// using a String attribute for your indicator/flag Attribute for this example:\n&lt;object name=\"npc1\"&gt;\n  &lt;attr name=\"type\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;20&lt;/attr&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc2\"&gt;\n  &lt;attr name=\"type\" type=\"string\"&gt;npc&lt;/attr&gt;\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;\n&lt;/object&gt;\n\nforeach (object_variable, AllObjects()) {\n  if (GetAttribute (object_variable, \"type\") = \"npc\") {\n    if (object_variable.relationshipscale &gt;= 90) {\n      object_variable.relationship = \"lovers\"\n    } else if (object_variable.relationshipscale &gt;= 80) {\n      object_variable.relationship = \"bffs\"\n    }\n    // etc 'else ifs' and optional 'else'\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2016-07-24T19:24:11.9494629Z",
      "LastEditDate": "2016-07-24T19:59:07.3719398Z"
    },
    {
      "PostId": "d1066423-71fc-49ce-be2e-4ebc2daabd4c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(sorry about the multiple posts)\r\n\r\nhere's using your code:\r\n\r\n(changed/fixed it up a bit, to make it more efficient, as if I didn't do it... Jay+Pixie will, laughs. They don't like having/leaving it as  inefficient code! Though I'm not sure if it's more efficient to go from max to min or from min to max... hmm...)\r\n\r\n(unfortunately... I don't think there's another method, I think you have to use a Turnscript for doing this stuff. Well, there's the Turnscript's \"evil cousin\"... the Timer, but then you got to deal with its \"evil\" messiness, lol)\r\n\r\n```\r\n<turnscript name=\"global_turnscript\">\r\n  <enabled />\r\n  <script>\r\n    foreach (object_variable, AllObjects()) {\r\n      if (GetAttribute (object_variable, \"type\") = \"npc\") { // if all of your Objects have the 'type' Attribute, than you can do this instead: if (object_variable.type = \"npc\") {\r\n        if (object_variable.relationshipscale < 1) {\r\n          object_variable.relationship = \"hostile\"\r\n        } else if (object_variable.relationshipscale < 11) {\r\n          object_variable.relationship = \"hatred\"\r\n        } else if (object_variable.relationshipscale < 40) {\r\n          object_variable.relationship = \"stranger\"\r\n        } else if (object_variable.relationshipscale < 60) {\r\n          object_variable.relationship = \"acq\"\r\n        } else if (object_variable.relationshipscale < 80) {\r\n          object_variable.relationship = \"friend\"\r\n        } else if (object_variable.relationshipscale < 100) {\r\n          object_variable.relationship = \"fwb\"\r\n        } else if (object_variable.relationshipscale < 120) {\r\n          object_variable.relationship = \"lover\"\r\n        } else {\r\n          object_variable.relationship = \"spouse\"\r\n        }\r\n      }\r\n    }\r\n  </script>\r\n</turnscript>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(sorry about the multiple posts)</p>\n<p>here's using your code:</p>\n<p>(changed/fixed it up a bit, to make it more efficient, as if I didn't do it... Jay+Pixie will, laughs. They don't like having/leaving it as  inefficient code! Though I'm not sure if it's more efficient to go from max to min or from min to max... hmm...)</p>\n<p>(unfortunately... I don't think there's another method, I think you have to use a Turnscript for doing this stuff. Well, there's the Turnscript's \"evil cousin\"... the Timer, but then you got to deal with its \"evil\" messiness, lol)</p>\n<pre><code>&lt;turnscript name=\"global_turnscript\"&gt;\n  &lt;enabled /&gt;\n  &lt;script&gt;\n    foreach (object_variable, AllObjects()) {\n      if (GetAttribute (object_variable, \"type\") = \"npc\") { // if all of your Objects have the 'type' Attribute, than you can do this instead: if (object_variable.type = \"npc\") {\n        if (object_variable.relationshipscale &lt; 1) {\n          object_variable.relationship = \"hostile\"\n        } else if (object_variable.relationshipscale &lt; 11) {\n          object_variable.relationship = \"hatred\"\n        } else if (object_variable.relationshipscale &lt; 40) {\n          object_variable.relationship = \"stranger\"\n        } else if (object_variable.relationshipscale &lt; 60) {\n          object_variable.relationship = \"acq\"\n        } else if (object_variable.relationshipscale &lt; 80) {\n          object_variable.relationship = \"friend\"\n        } else if (object_variable.relationshipscale &lt; 100) {\n          object_variable.relationship = \"fwb\"\n        } else if (object_variable.relationshipscale &lt; 120) {\n          object_variable.relationship = \"lover\"\n        } else {\n          object_variable.relationship = \"spouse\"\n        }\n      }\n    }\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-24T19:36:38.8586903Z",
      "LastEditDate": "2016-07-24T19:53:01.1225838Z"
    },
    {
      "PostId": "c204e308-c3a6-45c2-a1ae-e8e4711a457d",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ea7c0eff71476cd165c31f2605b2f755?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want to handle all npc at the same time you can iterate as hegemonkhan has mentioned. If you just want one at a time, but the same behaviour for all without having to repeat the code, you can use a function (say: GetRelationshipText). That gets one parameter (calling it obj for now)\r\n\r\nThe function would contain code like this:\r\n\r\n````\r\nif (obj.relationshipscale = 0) {\r\n  return (\"hostile\")\r\n````\r\n\r\nIf you need to call the function from a script of an object you can use 'this': GetRelationshipText(this)\r\n\r\nNot entirely sure if this answers your question, but it was worth a try. :-)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want to handle all npc at the same time you can iterate as hegemonkhan has mentioned. If you just want one at a time, but the same behaviour for all without having to repeat the code, you can use a function (say: GetRelationshipText). That gets one parameter (calling it obj for now)</p>\n<p>The function would contain code like this:</p>\n<pre><code>if (obj.relationshipscale = 0) {\n  return (\"hostile\")\n</code></pre>\n<p>If you need to call the function from a script of an object you can use 'this': GetRelationshipText(this)</p>\n<p>Not entirely sure if this answers your question, but it was worth a try. :-)</p>\n\n",
      "PostDate": "2016-07-24T20:06:47.8514456Z",
      "LastEditDate": null
    },
    {
      "PostId": "ad006abe-4980-484d-a161-2cbc0a3b9479",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nwith quest, using the concepts/designs of 'Get' and 'Set' (and returning Values with) Functions, isn't as neccessary as it is with the main programming languages, due to being able to globally (as they're not restricted/blocked/protected/\"encapsulated=contained\" in quest) access/use Attributes (Variables contained within OBJECTS/quest: Elements). They can be useful, but quest has a lot of its own (and tentatively better) methods/Functions that you can use instead.",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>with quest, using the concepts/designs of 'Get' and 'Set' (and returning Values with) Functions, isn't as neccessary as it is with the main programming languages, due to being able to globally (as they're not restricted/blocked/protected/\"encapsulated=contained\" in quest) access/use Attributes (Variables contained within OBJECTS/quest: Elements). They can be useful, but quest has a lot of its own (and tentatively better) methods/Functions that you can use instead.</p>\n\n",
      "PostDate": "2016-07-24T20:11:58.6480156Z",
      "LastEditDate": null
    },
    {
      "PostId": "0a3dfe24-048a-4fa7-afec-502b2180a36a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's an excerpt from my 'guide on using lists' ( http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk  ---- you got to scroll down a long ways to the 'foreach and for' sections), that hopefully helps you understand how the 'foreach' Script/Function works :\r\n\r\n```\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (team_member, game.team) {\r\n  do (team_member,\"run_laps_script_attribute\")\r\n  // output result conceptually:\r\n  // joe.runs_laps_script_attribute -> joe runs laps\r\n  // jim.runs_laps_script_attribute -> jim runs laps\r\n  // john.runs_laps_script_attribute -> john runs laps\r\n}\r\n\r\n// and the exact same thing:\r\n\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (x, game.team) {\r\n  do (x,\"run_laps\")\r\n  // output result conceptually:\r\n  // joe.runs_laps -> joe runs laps\r\n  // jim.runs_laps -> jim runs laps\r\n  // john.runs_laps -> john runs laps\r\n}\r\n\r\n// and the exact same thing:\r\n\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (item, game.team) {\r\n  do (item,\"run_laps\")\r\n  // output result conceptually:\r\n  // joe.runs_laps -> joe runs laps\r\n  // jim.runs -> jim runs laps\r\n  // john.runs -> john runs laps\r\n}\r\n\r\n// and the exact same thing:\r\n\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (blahblahblah, game.team) {\r\n  do (blahblahblah,\"run_laps\")\r\n  // output result conceptually:\r\n  // joe.runs_laps -> joe runs laps\r\n  // jim.runs -> jim runs laps\r\n  // john.runs -> john runs laps\r\n}\r\n```\r\n\r\n-------------------------\r\n\r\nusing my first example in the above excerpt, let me add in some additional details/explanation/guidance with it:\r\n\r\n```\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (team_member, game.team) {\r\n  do (team_member,\"run_laps_script_attribute\")\r\n  // conceptually what my 'team_member' as the placeholder Variable does:\r\n  // team_member = joe\r\n  // team_member = jim\r\n  // team_member = john\r\n  // output result conceptually:\r\n  // (team_member = joe)---> team_member.runs_laps_script_attribute -> joe.runs_laps_script_attribute ---> joe runs laps\r\n  // (team_member = jim)---> team_member.runs_laps_script_attribute -> jim.runs_laps_script_attribute ---> jim runs laps\r\n  // (team_member = john)---> team_member.runs_laps_script_attribute -> john.runs_laps_script_attribute ---> john runs laps\r\n}\r\n```\r\n\r\n----------------\r\n\r\nand changing up the name/label for the placeholder Variable, to show that it doesn't matter what you name/label it as:\r\n\r\n```\r\ngame.team = split (\"joe;jim;john\", \";\")\r\nforeach (abc, game.team) {\r\n  do (abc,\"run_laps_script_attribute\")\r\n  // conceptually what my 'abc' as the placeholder Variable does:\r\n  // abc = joe\r\n  // abc = jim\r\n  // abc = john\r\n  // output result conceptually:\r\n  // (abc = joe)---> abc.runs_laps_script_attribute -> joe.runs_laps_script_attribute ---> joe runs laps\r\n  // (abc = jim)---> abc.runs_laps_script_attribute -> jim.runs_laps_script_attribute ---> jim runs laps\r\n  // (abc = john)---> abc.runs_laps_script_attribute -> john.runs_laps_script_attribute ---> john runs laps\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>here's an excerpt from my 'guide on using lists' ( http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk  ---- you got to scroll down a long ways to the 'foreach and for' sections), that hopefully helps you understand how the 'foreach' Script/Function works :</p>\n<pre><code>game.team = split (\"joe;jim;john\", \";\")\nforeach (team_member, game.team) {\n  do (team_member,\"run_laps_script_attribute\")\n  // output result conceptually:\n  // joe.runs_laps_script_attribute -&gt; joe runs laps\n  // jim.runs_laps_script_attribute -&gt; jim runs laps\n  // john.runs_laps_script_attribute -&gt; john runs laps\n}\n\n// and the exact same thing:\n\ngame.team = split (\"joe;jim;john\", \";\")\nforeach (x, game.team) {\n  do (x,\"run_laps\")\n  // output result conceptually:\n  // joe.runs_laps -&gt; joe runs laps\n  // jim.runs_laps -&gt; jim runs laps\n  // john.runs_laps -&gt; john runs laps\n}\n\n// and the exact same thing:\n\ngame.team = split (\"joe;jim;john\", \";\")\nforeach (item, game.team) {\n  do (item,\"run_laps\")\n  // output result conceptually:\n  // joe.runs_laps -&gt; joe runs laps\n  // jim.runs -&gt; jim runs laps\n  // john.runs -&gt; john runs laps\n}\n\n// and the exact same thing:\n\ngame.team = split (\"joe;jim;john\", \";\")\nforeach (blahblahblah, game.team) {\n  do (blahblahblah,\"run_laps\")\n  // output result conceptually:\n  // joe.runs_laps -&gt; joe runs laps\n  // jim.runs -&gt; jim runs laps\n  // john.runs -&gt; john runs laps\n}\n</code></pre>\n<hr>\n<p>using my first example in the above excerpt, let me add in some additional details/explanation/guidance with it:</p>\n<pre><code>game.team = split (\"joe;jim;john\", \";\")\nforeach (team_member, game.team) {\n  do (team_member,\"run_laps_script_attribute\")\n  // conceptually what my 'team_member' as the placeholder Variable does:\n  // team_member = joe\n  // team_member = jim\n  // team_member = john\n  // output result conceptually:\n  // (team_member = joe)---&gt; team_member.runs_laps_script_attribute -&gt; joe.runs_laps_script_attribute ---&gt; joe runs laps\n  // (team_member = jim)---&gt; team_member.runs_laps_script_attribute -&gt; jim.runs_laps_script_attribute ---&gt; jim runs laps\n  // (team_member = john)---&gt; team_member.runs_laps_script_attribute -&gt; john.runs_laps_script_attribute ---&gt; john runs laps\n}\n</code></pre>\n<hr>\n<p>and changing up the name/label for the placeholder Variable, to show that it doesn't matter what you name/label it as:</p>\n<pre><code>game.team = split (\"joe;jim;john\", \";\")\nforeach (abc, game.team) {\n  do (abc,\"run_laps_script_attribute\")\n  // conceptually what my 'abc' as the placeholder Variable does:\n  // abc = joe\n  // abc = jim\n  // abc = john\n  // output result conceptually:\n  // (abc = joe)---&gt; abc.runs_laps_script_attribute -&gt; joe.runs_laps_script_attribute ---&gt; joe runs laps\n  // (abc = jim)---&gt; abc.runs_laps_script_attribute -&gt; jim.runs_laps_script_attribute ---&gt; jim runs laps\n  // (abc = john)---&gt; abc.runs_laps_script_attribute -&gt; john.runs_laps_script_attribute ---&gt; john runs laps\n}\n</code></pre>\n\n",
      "PostDate": "2016-07-24T20:24:37.5209084Z",
      "LastEditDate": "2016-07-24T20:35:57.7378351Z"
    },
    {
      "PostId": "abfc8366-74ba-4e0c-a662-f87d452395d5",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alrighty! Just checking if this will work :) I tried following everyone's examples lol. \r\n\r\nSo...\r\n**Type:** _NPC_\r\n_relationship.string.unknown_\r\n_relationshipscale.integer.0_\r\n\r\n**Function**\r\n**GetRelationship**\r\n```\r\nforeach (object_variable, AllObjects()) {\r\n  if (GetAttribute (object_variable, \"type\") = \"npc\") {\r\n    if (object_variable.relationshipscale = 0) {\r\n      return (\"hostile\")\r\n    }\r\n    if (object_variable.relationshipscale >=1 and object_variable.relationshipscale <=10) {\r\n      return (\"hated\")\r\n    }\r\n    if (object_variable.relationshipscale >=11 and object_variable.relationshipscale <=39) {\r\n      return (\"stranger\")\r\n    }\r\n    if (object_variable.relationshipscale >=40 and object_variable.relationshipscale <=59) {\r\n      return (\"acq\")\r\n    }\r\n    if (object_variable.relationshipscale >=60 and object_variable.relationshipscale <=79) {\r\n      return (\"friend\")\r\n    }\r\n    if (object_variable.relationshipscale >=80 and object_variable.relationshipscale <=99) {\r\n      return (\"fwb\")\r\n    }\r\n    if (object_variable.relationshipscale >=100 and object_variable.relationshipscale <=119) {\r\n      return (\"lover\")\r\n    }\r\n    if (object_variable.relationshipscale = 120) {\r\n      return (\"spouse\")\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**Set Relationship**\r\n_object_variable.relationshipscale = GetRelationship()_\r\n\r\n\r\nIf this won't work, I can try some other alternatives that HK suggested. BTW, I appreciate you two weighing in on this and helping! :D I get confused sometimes.  \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Alrighty! Just checking if this will work :) I tried following everyone's examples lol.</p>\n<p>So...<br>\n<strong>Type:</strong> <em>NPC</em><br>\n<em>relationship.string.unknown</em><br>\n<em>relationshipscale.integer.0</em></p>\n<p><strong>Function</strong><br>\n<strong>GetRelationship</strong></p>\n<pre><code>foreach (object_variable, AllObjects()) {\n  if (GetAttribute (object_variable, \"type\") = \"npc\") {\n    if (object_variable.relationshipscale = 0) {\n      return (\"hostile\")\n    }\n    if (object_variable.relationshipscale &gt;=1 and object_variable.relationshipscale &lt;=10) {\n      return (\"hated\")\n    }\n    if (object_variable.relationshipscale &gt;=11 and object_variable.relationshipscale &lt;=39) {\n      return (\"stranger\")\n    }\n    if (object_variable.relationshipscale &gt;=40 and object_variable.relationshipscale &lt;=59) {\n      return (\"acq\")\n    }\n    if (object_variable.relationshipscale &gt;=60 and object_variable.relationshipscale &lt;=79) {\n      return (\"friend\")\n    }\n    if (object_variable.relationshipscale &gt;=80 and object_variable.relationshipscale &lt;=99) {\n      return (\"fwb\")\n    }\n    if (object_variable.relationshipscale &gt;=100 and object_variable.relationshipscale &lt;=119) {\n      return (\"lover\")\n    }\n    if (object_variable.relationshipscale = 120) {\n      return (\"spouse\")\n    }\n  }\n}\n</code></pre>\n<p><strong>Set Relationship</strong><br>\n<em>object_variable.relationshipscale = GetRelationship()</em></p>\n<p>If this won't work, I can try some other alternatives that HK suggested. BTW, I appreciate you two weighing in on this and helping! :D I get confused sometimes.</p>\n\n",
      "PostDate": "2016-07-24T20:39:43.6692285Z",
      "LastEditDate": "2016-07-24T20:44:47.0116384Z"
    },
    {
      "PostId": "99c58595-c6bc-4878-a951-e52d65e155f9",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, from your post above, you're wanting to use the inherited Attribute (Object Type / Type) method, so your code needs to be changed slightly (as we got to use the 'DoesInherit(OBJECT_NAME, \"OBJECT_TYPE_NAME\")' Script/Function.\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/doesinherit.html\r\nhttp://docs.textadventures.co.uk/quest/tutorial/using_inherited_types.html\r\nhttp://docs.textadventures.co.uk/quest/guides/using_types.html\r\n\r\nand here's about a Function (and all of its options) and its syntaxes:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/function.html\r\n\r\n-------\r\n\r\n**Also, because we're acting upon multiple Objects, you can NOT use the/a Function's 'RETURN' functionality. This is refering to my re-naming/labeling of your Function of/from 'GetRelationship' to as now being 'SetRelationship' seen below in my example code**\r\n\r\n--------\r\n\r\nfull (fixed up) code is below:\r\n\r\n(I changed the OPERATORS again, as this design logic is more efficient than what yours was: it'll make your game faster/better performance as quest/computer is doing less actions/operations)\r\n\r\n(also, there's a difference between using lots of 'ifs' vs 'else ifs', though it's a bit hard/long/difficult to explain about it. Using the 'else ifs' is better/more efficient. Just trust this code... it'll work... if I hadn't made any mistakes..., laughs)\r\n\r\n(omg! I totally forgot in my previous codes to include the '<![CDATA[ .... ]]>' tags, MY BIG BAD, as this is NEEDED for when coding directly in-code for enabling the use of the lesser/great than/equal OPERATOR symbols! MY HUGE APOLOGIES!) \r\n\r\n```\r\n<type name=\"npc\">\r\n  <attr name=\"relationship\" type=\"string\">unknown</attr>\r\n  <attr name=\"relationshipscale\" type=\"int\">0</attr>\r\n</type>\r\n\r\n// this is the Function that is acting upon multiple Objects (via using the 'foreach' Script/Function), so we can NOT use the 'RETURN' functionality for/with it:\r\n<function name=\"SetRelationship\">\r\n  <![CDATA[\r\n    foreach (object_variable, AllObjects()) {\r\n      if (DoesInherit (object_variable, \"npc\")) {\r\n        if (object_variable.relationshipscale < 1) {\r\n          object_variable.relationship = \"hostile\"\r\n        } else if (object_variable.relationshipscale < 11) {\r\n          object_variable.relationship = \"hated\"\r\n        } else if (object_variable.relationshipscale < 40) {\r\n          object_variable.relationship = \"stranger\"\r\n        } else if (object_variable.relationshipscale < 60) {\r\n          object_variable.relationship = \"acq\"\r\n        } else if (object_variable.relationshipscale < 80) {\r\n          object_variable.relationship = \"friend\"\r\n        } else if (object_variable.relationshipscale < 100) {\r\n          object_variable.relationship = \"fwb\"\r\n        } else if (object_variable.relationshipscale < 120) {\r\n          object_variable.relationship = \"lover\"\r\n        } else {\r\n          object_variable.relationship = \"spouse\"\r\n        }\r\n      }\r\n    }\r\n  ]]>\r\n</function>\r\n\r\n// a Function to dynamically get your 'whatever/any' Object's 'relationship' Attribute's Value:\r\n\r\n(this Function is acting upon a single Object, thus we now can set up and use the 'RETURN' functionality)\r\n\r\n<function name=\"GetRelationship\" parameters=\"object_parameter\" type=\"string\"> // the, type=\"xxx\", part of this Function's (programming terminology) Header/Signature is the Type of Value that you're telling quest you'll be returning (so your Value must indeed match this, specified/des-sig-nated --- can't spell, type)\r\n  if (HasString (object_parameter, \"relationship\")) {\r\n    return (object_parameter.relationship)\r\n  } else {\r\n     msg (\"The 'GetRelationship' Function failed as the inputed Object doesn't have the 'relationship' String Attribute existing/added to it\")\r\n  }\r\n</function>\r\n\r\n// to call/use the 'GetRelationship' Function, an example:\r\n\r\nstring_variable = GetRelationship (npc1)\r\nif (string_variable = \"hostile\") {\r\n  msg (\"You fight with \" + npc1.alias + \".\")\r\n} else {\r\n  msg (\"You're not at a low enough relationship to get into a fight with \" + npc1.alias + \".\")\r\n}\r\n\r\n// example of needed, Objects, Inherited Attributes, and the Object Type, for the above use of the 'GetRelationship\" Function:\r\n\r\n<object name=\"npc1\">\r\n\r\n  <inherit name=\"npc\" /> // this adds these: '<attr name=\"relationshipscale\" type=\"int\">0</attr>' and  '<attr name=\"relationship\" type=\"string\">unknown</attr>', from the 'npc' Object Type, to this (npc1) Object\r\n\r\n</object>\r\n\r\n<object name=\"npc2\">\r\n\r\n  <inherit name=\"npc\" /> // this adds these: '<attr name=\"relationshipscale\" type=\"int\">0</attr>' and  '<attr name=\"relationship\" type=\"string\">unknown</attr>', from the 'npc' Object Type to this (npc2) Object\r\n  \r\n  <attr name=\"relationshipscale\" type=\"int\">28</attr> // this over-rides your Inherited Attribute (<attr name=\"relationshipscale\" type=\"int\">0</attr>) from the 'npc' Object Type, for this (npc2) Object \r\n\r\n</object>\r\n\r\n<object name=\"npc3\">\r\n\r\n  <inherit name=\"type\" /> // this adds these: '<attr name=\"relationshipscale\" type=\"int\">0</attr>' and  '<attr name=\"relationship\" type=\"string\">unknown</attr>', from the 'npc' Object Type to this (npc3) Object\r\n  \r\n  <attr name=\"relationshipscale\" type=\"int\">63</attr> // this over-rides your Inherited Attribute (<attr name=\"relationshipscale\" type=\"int\">0</attr>) from the 'npc' Object Type, for this (npc3) Object\r\n\r\n</object>\r\n\r\n<type name=\"npc\">\r\n  <attr name=\"relationshipscale\" type=\"int\">0</attr>\r\n  <attr name=\"relationship\" type=\"string\">unknown</attr>\r\n</type>\r\n\r\n// a Function to dynamically get your 'whatever/any' Object's 'relationshipscale' Attribute's Value:\r\n\r\n(this Function is acting upon a single Object, thus we now can set up and use the 'RETURN' functionality)\r\n\r\n<function name=\"GetRelationshipscale\" parameters=\"object_parameter\" type=\"int\"> // the, type=\"xxx\", part of this Function's (programming terminology) Header/Signature is the Type of Value that you're telling quest you'll be returning (so your Value must indeed match this, specified/des-sig-nated --- can't spell, type)\r\n  if (HasInt (object_parameter, \"relationshipscale\")) {\r\n    return (object_parameter.relationshipscale)\r\n  } else {\r\n     msg (\"The 'GetRelationshipscale' Function failed as the inputed Object doesn't have the 'relationshipscale' Integer Attribute existing/added to it\")\r\n  }\r\n</function>\r\n\r\n// to call/use the 'GetRelationshipscale' Function, an example:\r\n\r\n<![CDATA[\r\n  integer_variable = GetRelationshipscale (npc1)\r\n  if (integer_variable <= 0) {\r\n    msg (\"You fight with \" + npc1.alias + \".\")\r\n  } else if (integer_variable < 50) {\r\n    msg (\"blah\")\r\n  } else if (integer_variable < 100) {\r\n    msg (\"blah\")\r\n  } else {\r\n    msg (npc1.alias + \"\\'s relationshipscale is 100 or more with you!, thus \" + npc1.alias + \" is your spouse and vice versa!\")\r\n  }\r\n]]>",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, from your post above, you're wanting to use the inherited Attribute (Object Type / Type) method, so your code needs to be changed slightly (as we got to use the 'DoesInherit(OBJECT_NAME, \"OBJECT_TYPE_NAME\")' Script/Function.</p>\n<p>http://docs.textadventures.co.uk/quest/functions/doesinherit.html<br>\nhttp://docs.textadventures.co.uk/quest/tutorial/using_inherited_types.html<br>\nhttp://docs.textadventures.co.uk/quest/guides/using_types.html</p>\n<p>and here's about a Function (and all of its options) and its syntaxes:</p>\n<p>http://docs.textadventures.co.uk/quest/elements/function.html</p>\n<hr>\n<p><strong>Also, because we're acting upon multiple Objects, you can NOT use the/a Function's 'RETURN' functionality. This is refering to my re-naming/labeling of your Function of/from 'GetRelationship' to as now being 'SetRelationship' seen below in my example code</strong></p>\n<hr>\n<p>full (fixed up) code is below:</p>\n<p>(I changed the OPERATORS again, as this design logic is more efficient than what yours was: it'll make your game faster/better performance as quest/computer is doing less actions/operations)</p>\n<p>(also, there's a difference between using lots of 'ifs' vs 'else ifs', though it's a bit hard/long/difficult to explain about it. Using the 'else ifs' is better/more efficient. Just trust this code... it'll work... if I hadn't made any mistakes..., laughs)</p>\n<p>(omg! I totally forgot in my previous codes to include the '' tags, MY BIG BAD, as this is NEEDED for when coding directly in-code for enabling the use of the lesser/great than/equal OPERATOR symbols! MY HUGE APOLOGIES!)</p>\n<pre><code>&lt;type name=\"npc\"&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n// this is the Function that is acting upon multiple Objects (via using the 'foreach' Script/Function), so we can NOT use the 'RETURN' functionality for/with it:\n&lt;function name=\"SetRelationship\"&gt;\n  &lt;![CDATA[\n    foreach (object_variable, AllObjects()) {\n      if (DoesInherit (object_variable, \"npc\")) {\n        if (object_variable.relationshipscale &lt; 1) {\n          object_variable.relationship = \"hostile\"\n        } else if (object_variable.relationshipscale &lt; 11) {\n          object_variable.relationship = \"hated\"\n        } else if (object_variable.relationshipscale &lt; 40) {\n          object_variable.relationship = \"stranger\"\n        } else if (object_variable.relationshipscale &lt; 60) {\n          object_variable.relationship = \"acq\"\n        } else if (object_variable.relationshipscale &lt; 80) {\n          object_variable.relationship = \"friend\"\n        } else if (object_variable.relationshipscale &lt; 100) {\n          object_variable.relationship = \"fwb\"\n        } else if (object_variable.relationshipscale &lt; 120) {\n          object_variable.relationship = \"lover\"\n        } else {\n          object_variable.relationship = \"spouse\"\n        }\n      }\n    }\n  ]]&gt;\n&lt;/function&gt;\n\n// a Function to dynamically get your 'whatever/any' Object's 'relationship' Attribute's Value:\n\n(this Function is acting upon a single Object, thus we now can set up and use the 'RETURN' functionality)\n\n&lt;function name=\"GetRelationship\" parameters=\"object_parameter\" type=\"string\"&gt; // the, type=\"xxx\", part of this Function's (programming terminology) Header/Signature is the Type of Value that you're telling quest you'll be returning (so your Value must indeed match this, specified/des-sig-nated --- can't spell, type)\n  if (HasString (object_parameter, \"relationship\")) {\n    return (object_parameter.relationship)\n  } else {\n     msg (\"The 'GetRelationship' Function failed as the inputed Object doesn't have the 'relationship' String Attribute existing/added to it\")\n  }\n&lt;/function&gt;\n\n// to call/use the 'GetRelationship' Function, an example:\n\nstring_variable = GetRelationship (npc1)\nif (string_variable = \"hostile\") {\n  msg (\"You fight with \" + npc1.alias + \".\")\n} else {\n  msg (\"You're not at a low enough relationship to get into a fight with \" + npc1.alias + \".\")\n}\n\n// example of needed, Objects, Inherited Attributes, and the Object Type, for the above use of the 'GetRelationship\" Function:\n\n&lt;object name=\"npc1\"&gt;\n\n  &lt;inherit name=\"npc\" /&gt; // this adds these: '&lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;' and  '&lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;', from the 'npc' Object Type, to this (npc1) Object\n\n&lt;/object&gt;\n\n&lt;object name=\"npc2\"&gt;\n\n  &lt;inherit name=\"npc\" /&gt; // this adds these: '&lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;' and  '&lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;', from the 'npc' Object Type to this (npc2) Object\n  \n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;28&lt;/attr&gt; // this over-rides your Inherited Attribute (&lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;) from the 'npc' Object Type, for this (npc2) Object \n\n&lt;/object&gt;\n\n&lt;object name=\"npc3\"&gt;\n\n  &lt;inherit name=\"type\" /&gt; // this adds these: '&lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;' and  '&lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;', from the 'npc' Object Type to this (npc3) Object\n  \n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;63&lt;/attr&gt; // this over-rides your Inherited Attribute (&lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;) from the 'npc' Object Type, for this (npc3) Object\n\n&lt;/object&gt;\n\n&lt;type name=\"npc\"&gt;\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;\n&lt;/type&gt;\n\n// a Function to dynamically get your 'whatever/any' Object's 'relationshipscale' Attribute's Value:\n\n(this Function is acting upon a single Object, thus we now can set up and use the 'RETURN' functionality)\n\n&lt;function name=\"GetRelationshipscale\" parameters=\"object_parameter\" type=\"int\"&gt; // the, type=\"xxx\", part of this Function's (programming terminology) Header/Signature is the Type of Value that you're telling quest you'll be returning (so your Value must indeed match this, specified/des-sig-nated --- can't spell, type)\n  if (HasInt (object_parameter, \"relationshipscale\")) {\n    return (object_parameter.relationshipscale)\n  } else {\n     msg (\"The 'GetRelationshipscale' Function failed as the inputed Object doesn't have the 'relationshipscale' Integer Attribute existing/added to it\")\n  }\n&lt;/function&gt;\n\n// to call/use the 'GetRelationshipscale' Function, an example:\n\n&lt;![CDATA[\n  integer_variable = GetRelationshipscale (npc1)\n  if (integer_variable &lt;= 0) {\n    msg (\"You fight with \" + npc1.alias + \".\")\n  } else if (integer_variable &lt; 50) {\n    msg (\"blah\")\n  } else if (integer_variable &lt; 100) {\n    msg (\"blah\")\n  } else {\n    msg (npc1.alias + \"\\'s relationshipscale is 100 or more with you!, thus \" + npc1.alias + \" is your spouse and vice versa!\")\n  }\n]]&gt;\n</code></pre>\n\n",
      "PostDate": "2016-07-24T23:07:53.1167591Z",
      "LastEditDate": "2016-07-24T23:45:06.4443181Z"
    },
    {
      "PostId": "7bf277be-b14e-4e05-a6fb-f90a1d46605e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nif my posts are confusing you, please let me know! So I can try to explain them more clearly and/or straighten their information out for you. As I posted a lot of posts... information overload! I'm likely overwhelming and thus confusing you, sighs.\r\n\r\n---------\r\n\r\nalso, let me try to explain the logic invovled with this code design of mine (as it is quite advanced logic+programming concepts):\r\n\r\n```\r\nif (object_variable.relationshipscale < 1) {\r\n  object_variable.relationship = \"hostile\"\r\n} else if (object_variable.relationshipscale < 11) {\r\n  object_variable.relationship = \"hated\"\r\n} else if (object_variable.relationshipscale < 40) {\r\n  object_variable.relationship = \"stranger\"\r\n} else if (object_variable.relationshipscale < 60) {\r\n  object_variable.relationship = \"acq\"\r\n} else if (object_variable.relationshipscale < 80) {\r\n  object_variable.relationship = \"friend\"\r\n} else if (object_variable.relationshipscale < 100) {\r\n  object_variable.relationship = \"fwb\"\r\n} else if (object_variable.relationshipscale < 120) {\r\n  object_variable.relationship = \"lover\"\r\n } else {\r\n  object_variable.relationship = \"spouse\"\r\n }\r\n```\r\n\r\nif ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '1', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'hostile', and thus ALL the 'else ifs' and the 'else' below are completely ignored. BUT... If it's '1 or more', then goto the first 'else if' below:\r\n\r\nelse if ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '11', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'hated', and thus ALL the 'else ifs' and the 'else' below are completely ignored. BUT... If it's '11 or more', then goto the first 'else if' below:\r\n\r\nelse if ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '40', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'stranger', and thus ALL the 'else ifs' and the 'else' (burdening operatons) below are completely ignored! BUT... If it's '40 or more', then goto the first 'else if' below:\r\n\r\netc etc etc 'else ifs'....\r\n\r\nelse -> if it's '100 or more', then then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'spouse'\r\n\r\nnumber (tallying/adding/sum'ming) of operations (amount of work quest/computer has to do: more work = bad, less work = good):\r\n\r\n```\r\n1 (if VAR1 < 1) ---> 2 (set VAR2 = \"hostile\")\r\nor\r\n2 (else if VAR1 < 11) ---> 3 (set VAR2 = \"hated\")\r\nor\r\n3 (else if VAR1 < 40) ---> 4 (set VAR2 = \"stranger\")\r\nor\r\n4 (else if VAR1 < 60) -> 5 (set VAR2 = \"acq\")\r\nor\r\n5 (else if VAR1 < 80) -> 6 (set VAR2 = \"friend\")\r\nor\r\n6 (else if VAR1 < 100) -> 7 (set VAR2 = \"fwb\")\r\nor\r\n7 (else if VAR1 < 120) -> 8 (set VAR2 = \"lover\")\r\nor\r\n8 (set VAR2 = \"spouse\")\r\n```\r\n\r\nso with this code design your range of operations (work) is:\r\n\r\nleast of 2 to most of 8 operations (work)\r\n\r\nquest/computer is only doing at most 8 operations/work (chores), and if super lucky, then only merely 2 operations/work (chores)! No one likes doing chores, hehe. So, the less the better!\r\n\r\n--------\r\n\r\nnow let's compare it to your code:\r\n\r\n(this took me a long time to understand - took my taking and dropping out, *cries/sobs/sighs*, of my Assembly language and Computer Architecture school class --- as it was a bit too ahrd for me, to finally get/have this understanding, much to Jay's and Pixie's annoyance over my years here learning quest, laughs. So, this is really advanced stuff, I'm just trying to demonstrate the difference in better code design vs bad code design, in its effect upon speed/performance. I hope this isn't coming across badly, it's not my intent anyways, sighs. I too coded exactly like this myself, and had Jay and Pixie constantly trying to get through to me, what I'm trying to demonstrate to you here. I'm stubborn and stupid, which makes me a very slow learner, laughs)\r\n\r\n```\r\nif (object_variable.relationshipscale = 0) {\r\n  object_variable.relationship = \"hostile\"\r\n}\r\nif (object_variable.relationshipscale >= 1 and object_variable.relationshipscale <= 10) {\r\n  object_variable.relationship = \"hated\"\r\n}\r\nif (object_variable.relationshipscale >= 11 and object_variable.relationshipscale <= 39) {\r\n  object_variable.relationship = \"stranger\"\r\n}\r\nif (object_variable.relationshipscale >= 40 and object_variable.relationshipscale <= 59) {\r\n  object_variable.relationship = \"acq\"\r\n}\r\nif (object_variable.relationshipscale >= 60 and object_variable.relationshipscale <= 79) {\r\n  object_variable.relationship = \"friend\"\r\n}\r\nif (object_variable.relationshipscale >= 80 and object_variable.relationshipscale <= 99) {\r\n  object_variable.relationship = \"fwb\"\r\n}\r\nif (object_variable.relationshipscale >= 100 and object_variable.relationshipscale <= 119) {\r\n  object_variable.relationship = \"lover\"\r\n }\r\nif (object_variable.relationshipscale = 120) {\r\n  object_variable.relationship = \"spouse\"\r\n }\r\n```\r\n\r\nthe numbers/tallying/adding/sum'ming of operations:\r\n\r\n```\r\n...............\r\n(A1) (if VAR1 = 0) ---> (B2) (set VAR2 = \"hostile\") -> goto the first 'and' below:\r\n.............\r\nand\r\n...........\r\n(A2 or B3) (if VAR1 > 1) ---> (A3 or B4) (if VAR1  < 10) ---> (A4 or B5) (set VAR2 = \"hated\") ---> goto the first 'and' below:\r\nor\r\n(A3 or B4) (if VAR1 = 1) ---> (A4 or B5) (if VAR1  < 10) ---> (A5 or B6) (set VAR2 = \"hated\") ---> goto the first 'and' below:\r\nor\r\n(A5 or B6) (if VAR1 = 10) ---> (A6 or B7) (set VAR2 = \"hated\") ---> goto the first 'and' below:\r\nor\r\n(A5 or B6) goto the first 'and' below:\r\nor\r\n(A4 or B5) goto the first 'and' below:\r\nor\r\n(A4 or B5) (if VAR = 1) ---> (A5 or B6) (set VAR2 = \"hated\") ---> goto the first 'and' below:\r\nor\r\n(A4 or B5) goto the first 'and' below:\r\n..........\r\nand\r\n............\r\n(A4 or B5, or, A5 or B6, or, A6 or B7) (if VAR1 > 11) ---> (A5 or B6, or, A6 or B7, or, A7 or B8) (if VAR1  < 39) ---> (A6 or B7, or, A7 or B8, or, A8 or B9) (set VAR2 = \"stranger\") ---> goto the first 'and' below:\r\nor\r\n(A5 or B6, or, A6 or B7, or, A7 or B8) (if VAR1 = 11) ---> (A6 or B7, or, A7 or B8, or, A8 or B9) (if VAR1  < 39) ---> (A7 or B8, or, A8 or B9, or, A9 or B10) (set VAR2 = \"stranger\") ---> goto the first 'and' below:\r\nor\r\n(A7 or B8, or, A8 or B9, or, A9 or B10) (if VAR1 = 39) ---> (A8 or B9, or, A9 or B10, or, A10 or B11) (set VAR2 = \"stranger\") ---> goto the first 'and' below:\r\nor\r\n(A7 or B8, or, A8 or B9, or, A9 or B10) goto the first 'and' below:\r\nor\r\n(A5 or B6, or, A6 or B7, or, A7 or B8) goto the first 'and' below:\r\n.............\r\nand \r\n\r\nI GIVE UP, hopefully you can see why (I got A LOT MORE TO FIGURE OUT, AND IT'S JUST TOO HARD FOR MY BRAIN! LOL)\r\n\r\nI'm not even done with all the operations for 'stranger', and I'm already at (using this simplistic example) a max of 10 operations (and my brain was exploding at trying to count/tally them already, laughs)! I now understand a bit of why Jay and Pixie cringed when my code looked just like yours (and some times it still does... HK looks away whisling innocently), laughs.\r\n\r\n```\r\n\r\nyour code will end up doing many more (unneeded) operations/work. Someone (quest/computer) will be doing a lot more chores using your code than someone (quest/computer) using my code.",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>if my posts are confusing you, please let me know! So I can try to explain them more clearly and/or straighten their information out for you. As I posted a lot of posts... information overload! I'm likely overwhelming and thus confusing you, sighs.</p>\n<hr>\n<p>also, let me try to explain the logic invovled with this code design of mine (as it is quite advanced logic+programming concepts):</p>\n<pre><code>if (object_variable.relationshipscale &lt; 1) {\n  object_variable.relationship = \"hostile\"\n} else if (object_variable.relationshipscale &lt; 11) {\n  object_variable.relationship = \"hated\"\n} else if (object_variable.relationshipscale &lt; 40) {\n  object_variable.relationship = \"stranger\"\n} else if (object_variable.relationshipscale &lt; 60) {\n  object_variable.relationship = \"acq\"\n} else if (object_variable.relationshipscale &lt; 80) {\n  object_variable.relationship = \"friend\"\n} else if (object_variable.relationshipscale &lt; 100) {\n  object_variable.relationship = \"fwb\"\n} else if (object_variable.relationshipscale &lt; 120) {\n  object_variable.relationship = \"lover\"\n } else {\n  object_variable.relationship = \"spouse\"\n }\n</code></pre>\n<p>if ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '1', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'hostile', and thus ALL the 'else ifs' and the 'else' below are completely ignored. BUT... If it's '1 or more', then goto the first 'else if' below:</p>\n<p>else if ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '11', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'hated', and thus ALL the 'else ifs' and the 'else' below are completely ignored. BUT... If it's '11 or more', then goto the first 'else if' below:</p>\n<p>else if ('whatever/any' Object's 'relationshipscale' Integer Attribute's Value is less than '40', then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'stranger', and thus ALL the 'else ifs' and the 'else' (burdening operatons) below are completely ignored! BUT... If it's '40 or more', then goto the first 'else if' below:</p>\n<p>etc etc etc 'else ifs'....</p>\n<p>else -&gt; if it's '100 or more', then then set 'whatever/any' Object's 'relationship' String Attribute's Value to 'spouse'</p>\n<p>number (tallying/adding/sum'ming) of operations (amount of work quest/computer has to do: more work = bad, less work = good):</p>\n<pre><code>1 (if VAR1 &lt; 1) ---&gt; 2 (set VAR2 = \"hostile\")\nor\n2 (else if VAR1 &lt; 11) ---&gt; 3 (set VAR2 = \"hated\")\nor\n3 (else if VAR1 &lt; 40) ---&gt; 4 (set VAR2 = \"stranger\")\nor\n4 (else if VAR1 &lt; 60) -&gt; 5 (set VAR2 = \"acq\")\nor\n5 (else if VAR1 &lt; 80) -&gt; 6 (set VAR2 = \"friend\")\nor\n6 (else if VAR1 &lt; 100) -&gt; 7 (set VAR2 = \"fwb\")\nor\n7 (else if VAR1 &lt; 120) -&gt; 8 (set VAR2 = \"lover\")\nor\n8 (set VAR2 = \"spouse\")\n</code></pre>\n<p>so with this code design your range of operations (work) is:</p>\n<p>least of 2 to most of 8 operations (work)</p>\n<p>quest/computer is only doing at most 8 operations/work (chores), and if super lucky, then only merely 2 operations/work (chores)! No one likes doing chores, hehe. So, the less the better!</p>\n<hr>\n<p>now let's compare it to your code:</p>\n<p>(this took me a long time to understand - took my taking and dropping out, <em>cries/sobs/sighs</em>, of my Assembly language and Computer Architecture school class --- as it was a bit too ahrd for me, to finally get/have this understanding, much to Jay's and Pixie's annoyance over my years here learning quest, laughs. So, this is really advanced stuff, I'm just trying to demonstrate the difference in better code design vs bad code design, in its effect upon speed/performance. I hope this isn't coming across badly, it's not my intent anyways, sighs. I too coded exactly like this myself, and had Jay and Pixie constantly trying to get through to me, what I'm trying to demonstrate to you here. I'm stubborn and stupid, which makes me a very slow learner, laughs)</p>\n<pre><code>if (object_variable.relationshipscale = 0) {\n  object_variable.relationship = \"hostile\"\n}\nif (object_variable.relationshipscale &gt;= 1 and object_variable.relationshipscale &lt;= 10) {\n  object_variable.relationship = \"hated\"\n}\nif (object_variable.relationshipscale &gt;= 11 and object_variable.relationshipscale &lt;= 39) {\n  object_variable.relationship = \"stranger\"\n}\nif (object_variable.relationshipscale &gt;= 40 and object_variable.relationshipscale &lt;= 59) {\n  object_variable.relationship = \"acq\"\n}\nif (object_variable.relationshipscale &gt;= 60 and object_variable.relationshipscale &lt;= 79) {\n  object_variable.relationship = \"friend\"\n}\nif (object_variable.relationshipscale &gt;= 80 and object_variable.relationshipscale &lt;= 99) {\n  object_variable.relationship = \"fwb\"\n}\nif (object_variable.relationshipscale &gt;= 100 and object_variable.relationshipscale &lt;= 119) {\n  object_variable.relationship = \"lover\"\n }\nif (object_variable.relationshipscale = 120) {\n  object_variable.relationship = \"spouse\"\n }\n</code></pre>\n<p>the numbers/tallying/adding/sum'ming of operations:</p>\n<pre><code>...............\n(A1) (if VAR1 = 0) ---&gt; (B2) (set VAR2 = \"hostile\") -&gt; goto the first 'and' below:\n.............\nand\n...........\n(A2 or B3) (if VAR1 &gt; 1) ---&gt; (A3 or B4) (if VAR1  &lt; 10) ---&gt; (A4 or B5) (set VAR2 = \"hated\") ---&gt; goto the first 'and' below:\nor\n(A3 or B4) (if VAR1 = 1) ---&gt; (A4 or B5) (if VAR1  &lt; 10) ---&gt; (A5 or B6) (set VAR2 = \"hated\") ---&gt; goto the first 'and' below:\nor\n(A5 or B6) (if VAR1 = 10) ---&gt; (A6 or B7) (set VAR2 = \"hated\") ---&gt; goto the first 'and' below:\nor\n(A5 or B6) goto the first 'and' below:\nor\n(A4 or B5) goto the first 'and' below:\nor\n(A4 or B5) (if VAR = 1) ---&gt; (A5 or B6) (set VAR2 = \"hated\") ---&gt; goto the first 'and' below:\nor\n(A4 or B5) goto the first 'and' below:\n..........\nand\n............\n(A4 or B5, or, A5 or B6, or, A6 or B7) (if VAR1 &gt; 11) ---&gt; (A5 or B6, or, A6 or B7, or, A7 or B8) (if VAR1  &lt; 39) ---&gt; (A6 or B7, or, A7 or B8, or, A8 or B9) (set VAR2 = \"stranger\") ---&gt; goto the first 'and' below:\nor\n(A5 or B6, or, A6 or B7, or, A7 or B8) (if VAR1 = 11) ---&gt; (A6 or B7, or, A7 or B8, or, A8 or B9) (if VAR1  &lt; 39) ---&gt; (A7 or B8, or, A8 or B9, or, A9 or B10) (set VAR2 = \"stranger\") ---&gt; goto the first 'and' below:\nor\n(A7 or B8, or, A8 or B9, or, A9 or B10) (if VAR1 = 39) ---&gt; (A8 or B9, or, A9 or B10, or, A10 or B11) (set VAR2 = \"stranger\") ---&gt; goto the first 'and' below:\nor\n(A7 or B8, or, A8 or B9, or, A9 or B10) goto the first 'and' below:\nor\n(A5 or B6, or, A6 or B7, or, A7 or B8) goto the first 'and' below:\n.............\nand \n\nI GIVE UP, hopefully you can see why (I got A LOT MORE TO FIGURE OUT, AND IT'S JUST TOO HARD FOR MY BRAIN! LOL)\n\nI'm not even done with all the operations for 'stranger', and I'm already at (using this simplistic example) a max of 10 operations (and my brain was exploding at trying to count/tally them already, laughs)! I now understand a bit of why Jay and Pixie cringed when my code looked just like yours (and some times it still does... HK looks away whisling innocently), laughs.\n\n</code></pre>\n<p>your code will end up doing many more (unneeded) operations/work. Someone (quest/computer) will be doing a lot more chores using your code than someone (quest/computer) using my code.</p>\n\n",
      "PostDate": "2016-07-24T23:47:24.8330949Z",
      "LastEditDate": "2016-07-25T03:17:09.8947729Z"
    },
    {
      "PostId": "5de6ebd5-abc8-4c76-8a39-dab3c8e1ac7e",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Haha, it is a LITTLE confusing but I'll post what I have and we'll see if I understood or not :) I do appreciate it so far though! All of this is very helpful, although simplier is always better imo! \r\n\r\nSo I have _3_ Functions:\r\n```\r\nGet Relationship\r\nSetRelationshipscale\r\nGetRelationshipscale\r\n```\r\n\r\nI also have a \"type\" called:\r\n```\r\nrelationship\r\n```\r\n\r\nThe type have these attributes:\r\n```\r\nrelationship.string.unknown\r\nrelationshipscale.integer.0\r\n```\r\n\r\nThe _GetRelationship_ Function: \r\n```\r\nif (HasString (object_parameter, \"relationship\")) {\r\n  return (object_parameter.relationship)\r\n}\r\n```\r\n\r\nThe _SetRelationshipscale_ Function: \r\n```\r\nforeach (object_variable, AllObjects()) {\r\n  if (DoesInherit (object_variable, \"type\")) {\r\n    if (object_variable.relationshipscale = 0) {\r\n      object_variable.relationship = \"hostile\"\r\n    }\r\n    else if (object_variable.relationshipscale =1 and object_variable.relationshipscale <=10) {\r\n      object_variable.relationship = \"hated\"\r\n    }\r\n    else if (object_variable.relationshipscale >=11 and object_variable.relationshipscale <=39) {\r\n      object_variable.relationship = \"stranger\"\r\n    }\r\n    else if (object_variable.relationshipscale >=40 and object_variable.relationshipscale <=59) {\r\n      object_variable.relationship = \"acq\"\r\n    }\r\n    else if (object_variable.relationshipscale >=60 and object_variable.relationshipscale <=79) {\r\n      object_variable.relationship = \"friend\"\r\n    }\r\n    else if (object_variable.relationshipscale >=80 and object_variable.relationshipscale <=99) {\r\n      object_variable.relationship = \"fwb\"\r\n    }\r\n    else if (object_variable.relationshipscale >=100 and object_variable.relationshipscale <=119) {\r\n      object_variable.relationship = \"lover\"\r\n    }\r\n    else {\r\n      object_variable.relationship = \"spouse\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe _GetRelationshipscale_ Function: \r\n```\r\nif (HasInt (object_parameter, \"relationshipscale\")) {\r\n  return (object_parameter.relationshipscale)\r\n}\r\n```\r\n\r\nThis is how I would set the _Relationship Status_ and increase the _Scale_ in-game:\r\n```\r\nobject_parameter.relationship = \"stranger\"\r\nobject_parameter.relationshipscale = object_parameter.relationshipscale + 10\r\n```\r\n\r\nIs all of that correct so far? :) I feel like there should be a more simple way of doing all this! xD\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Haha, it is a LITTLE confusing but I'll post what I have and we'll see if I understood or not :) I do appreciate it so far though! All of this is very helpful, although simplier is always better imo!</p>\n<p>So I have <em>3</em> Functions:</p>\n<pre><code>Get Relationship\nSetRelationshipscale\nGetRelationshipscale\n</code></pre>\n<p>I also have a \"type\" called:</p>\n<pre><code>relationship\n</code></pre>\n<p>The type have these attributes:</p>\n<pre><code>relationship.string.unknown\nrelationshipscale.integer.0\n</code></pre>\n<p>The <em>GetRelationship</em> Function:</p>\n<pre><code>if (HasString (object_parameter, \"relationship\")) {\n  return (object_parameter.relationship)\n}\n</code></pre>\n<p>The <em>SetRelationshipscale</em> Function:</p>\n<pre><code>foreach (object_variable, AllObjects()) {\n  if (DoesInherit (object_variable, \"type\")) {\n    if (object_variable.relationshipscale = 0) {\n      object_variable.relationship = \"hostile\"\n    }\n    else if (object_variable.relationshipscale =1 and object_variable.relationshipscale &lt;=10) {\n      object_variable.relationship = \"hated\"\n    }\n    else if (object_variable.relationshipscale &gt;=11 and object_variable.relationshipscale &lt;=39) {\n      object_variable.relationship = \"stranger\"\n    }\n    else if (object_variable.relationshipscale &gt;=40 and object_variable.relationshipscale &lt;=59) {\n      object_variable.relationship = \"acq\"\n    }\n    else if (object_variable.relationshipscale &gt;=60 and object_variable.relationshipscale &lt;=79) {\n      object_variable.relationship = \"friend\"\n    }\n    else if (object_variable.relationshipscale &gt;=80 and object_variable.relationshipscale &lt;=99) {\n      object_variable.relationship = \"fwb\"\n    }\n    else if (object_variable.relationshipscale &gt;=100 and object_variable.relationshipscale &lt;=119) {\n      object_variable.relationship = \"lover\"\n    }\n    else {\n      object_variable.relationship = \"spouse\"\n    }\n  }\n}\n</code></pre>\n<p>The <em>GetRelationshipscale</em> Function:</p>\n<pre><code>if (HasInt (object_parameter, \"relationshipscale\")) {\n  return (object_parameter.relationshipscale)\n}\n</code></pre>\n<p>This is how I would set the <em>Relationship Status</em> and increase the <em>Scale</em> in-game:</p>\n<pre><code>object_parameter.relationship = \"stranger\"\nobject_parameter.relationshipscale = object_parameter.relationshipscale + 10\n</code></pre>\n<p>Is all of that correct so far? :) I feel like there should be a more simple way of doing all this! xD</p>\n\n",
      "PostDate": "2016-07-25T00:04:37.4920609Z",
      "LastEditDate": "2016-07-25T00:05:52.8236458Z"
    },
    {
      "PostId": "40ce3234-cfbb-4585-8583-ca8af26e0ef1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\r\nYour 'GetRelationship' function:\r\n\r\n```\r\nif (HasString (object_parameter, \"relationship\")) {\r\n  return (object_parameter.relationship)\r\n}\r\n```\r\n\r\nis correct, so/as long as you set up the Function correctly, which would be:\r\n\r\n```\r\n<function name=\"GetRelationship\" parameters=\"object_parameter\" type=\"string\">\r\n  if (HasString (object_parameter, \"relationship\")) {\r\n    return (object_parameter.relationship)\r\n  }\r\n  // you really should have an 'else' error-prompting 'msg' Script, to inform the user and/or yourself/co-testers (doing game testing), so you know you used an Object which doesn't have the 'relationship' String Attribute, which is the cause of the seeming (and/or worse: unknown/unaware of) Function \"failure\" (technically it's the 'false' result, not an actual failure/error of the function).\r\n</function>\r\n\r\nand if you correctly set up the call/usage of the function, for examples:\r\n\r\n// example 1A: npc1.relationship = GetRelationship (npc2)\r\n// example 1B:\r\nstring_variable = GetRelationship (npc2)\r\nnpc1.relationship = string_variable\r\n// example 2A: if (GetRelationship (npc2) = npc3.relationship) { /* scripting */ }\r\n// example 2B: if (GetRelationship (npc2) = GetRelationship (npc3)) { /* scripting */ }\r\n\r\n<object name=\"npc1\">\r\n  <inherit name=\"relationship\" /> // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\r\n  <attr name=\"relationshipscale\" type=\"int\">88</attr>\r\n  <attr name=\"relationship\" type=\"string\">fwb</attr>\r\n</object>\r\n\r\n<object name=\"npc2\">\r\n  <inherit name=\"relationship\" /> // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\r\n</object>\r\n\r\n<object name=\"npc3\">\r\n  <inherit name=\"relationship\" /> // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\r\n</object>\r\n\r\n<type name=\"relationship\">\r\n  <attr name=\"relationship\" type=\"string\">unknown</attr>\r\n  <attr name=\"relationshipscale\" type=\"int\">0</attr>\r\n</type>\r\n```\r\n\r\n**WARNING: I don't think you can have 'relationship' be the name for both your String Attribute and your Object Type, or if you can... quest may do a popup menu asking which one you meant/want to be using... (usually the 'name' String Attribute is the ID Attribute, meaning that you can't have two or more of the same named/labeld 'name' String Attributes)**\r\n\r\n----------\r\n\r\nfor your 'SetRelationshipscale' Function:\r\n\r\nyou have a typo, you need to add in the '>' on the '=1', it should look like this (the equals sign/symbol has to be on the right side of the other OPERATOR symbol): '>=1'\r\n\r\nif you do: '=>', you'll get an error\r\n\r\nalso, if you got a space (whitespace) between the two OPERATORS, it'll likely cause an error too.\r\n\r\nalso, if you're writing/copying/pasting this code directly into the game code, you'll need it to look like this:\r\n\r\n```\r\n// inside of 'whatever' Element (Object's Verb / Object's Script Attribute, Function, Command, Turnscript, etc):\r\n\r\n<![CDATA[\r\n  foreach (object_variable, AllObjects()) {\r\n    if (DoesInherit (object_variable, \"type\")) {\r\n      if (object_variable.relationshipscale = 0) {\r\n        object_variable.relationship = \"hostile\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 1 and object_variable.relationshipscale <= 10) {\r\n        object_variable.relationship = \"hated\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 11 and object_variable.relationshipscale <= 39) {\r\n        object_variable.relationship = \"stranger\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 40 and object_variable.relationshipscale <= 59) {\r\n        object_variable.relationship = \"acq\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 60 and object_variable.relationshipscale <= 79) {\r\n        object_variable.relationship = \"friend\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 80 and object_variable.relationshipscale <= 99) {\r\n        object_variable.relationship = \"fwb\"\r\n      }\r\n      else if (object_variable.relationshipscale >= 100 and object_variable.relationshipscale <= 119) {\r\n        object_variable.relationship = \"lover\"\r\n      }\r\n      else {\r\n        object_variable.relationship = \"spouse\"\r\n      }\r\n    }\r\n  }\r\n]]>\r\n```\r\n\r\nif you used the GUI~Editor's 'run as script -> add new script' options, then you don't need to include the '<!C[DATA[ ... ]]>' tags. Though, you can always check the game code, making sure that these tags are in there just to be safe (if the quest editor/play mode hasn't already failed to load/open/start/initialize), and if not, then put them in yourself.\r\n\r\n--------\r\n\r\nyou can do this:\r\n\r\n```\r\nobject_parameter.relationship = \"stranger\"\r\nobject_parameter.relationshipscale = object_parameter.relationshipscale + 10\r\n```\r\n\r\nbut you're manually having to correctly type in the correct Value (you have to be sure that you know what your 'relationshipscale' Value is, as adding 10 to it, depending on what the Value is, may not correspond to your, in this example, use of setting the 'relationship' to \"stranger\", right? What if your 'relationshipscale' Value was '80', would that correctly correspond with \"stranger\". No, it wouldn't. Also, this means you can't deal with in-playing-game changes/dynamic-ness of Attributes' Values.\r\n\r\nto deal with in-playing-game changes/dynamic-ness of Attributes' Values, one way, would be to use the 'SetRelationshipscale' Function (as this uses/checks your 'relationshipscale' Integer Value, using your scripting that you already have in the Function doing the matching of it up to the correct 'relationship' String Value for you automatically, meaning it can handle changing/dynamic Attributes' Values during game play, but only if you ALSO HAVE TO put this into a scripting location that is constantly running/firing/executing on every internal turn, aka using a global Turnscript, or whenever any Object's Attribute's Values change, aka using the special 'changed' Script Attribute, but you don't want to do this, as you'd have to create/add them for every single Object and their every single Attribute invovled.... YUUUUCCKKKKK!!!!!!) and the function returns the correct 'relationship' String Value for you.\r\n\r\nso....\r\n\r\njust add in (where-ever you need/want it to occur) the script that changes the Integer Value, using your example:\r\n\r\nobject_parameter.relationshipscale = object_parameter.relationshipscale + 10\r\n\r\nand if you have your 'GetRelationshipscale' Function within a global Turnscript, it'll automatically update all (specifed by, Object Type / Inherited Attribute, as we've set it up to do) Objects' 'relationship' String Attribute's Values for you!\r\n\r\n-------------\r\n\r\nyes... there can be a bit better ways of doing this (though not by too much), but they involve some really advanced/fancy/concise code, far beyond my ability, laughs. Even my one post with that Function using a lot of ArgumentParameter inputs is quite messy...\r\n\r\n----------------------------------------------------\r\n\r\nas far as I understand of the CS (Computer Science: Programming/Software Enginneering and Computer/Electronic/Circuitry Engineering) field:\r\n\r\nstages of CS (Computer Science: massive field: programming/coding and computer electronics and their connection to each other, high level math and logic and theoretical level stuff too with them courses/classes/subjects, computer/circuitry architecture, computer/circuitry design, neuro science / man-machine / matrix / advanced terminator/ascension AI --- type of stuff, and etc etc etc):\r\n\r\nlower division classes:\r\n\r\nHigh Level Languages (more to the basic computer user's level, more user-friendly):\r\n1. \"basic\" scripting: ifs, loops, variables, functions, objects, procedural/sequential (function using) coding/design, recursion, etc...\r\n2. various languages (C++, Java, Python, JS: JavaScript, Ruby, C, C#, MS-DoS/computer Command Box/Shell languages, Perl, Lua/Lau - whatever meh, Fortron whatever meh, AppleScript, Apple: Swift, etc)\r\n3. object oriented design/coding (using Objects, duh, lol): Encapsulation (constructors, destructors, Objects/containment, Groups/Classes, etc), Inheritance (Groups/Classes, Interfaces, Objects, etc), and/or Polymorphism usages in/for code/program designs (\"top/macro to down/micro\" design)\r\n4. trees/structures/code design/organization/systems\r\n\r\nLow Level Languages (nearer to the circuitry, less user-friendly)\r\n5. Assembly Languages (bit manipulation, addressing, boolean logic, bit logic, etc, encoding/decoding, threads/processii: directly working with/controlling individual cores/processors/cpus/computer chips, IO controlling, etc)\r\n6. Computer Architecture/Organization (circuitry, elontronic/circuitry/logic/computer enginneering, boolean logic / boolean gate logic, multiplexors, decoders, encoders, full adders, half adders, sequential circuits, buffers, inverters/negators, combinational circuits, etc etc etc)\r\n\r\nUpper Division classes and beyond (graduate, bachelors, masters, ph. d: security/hacking/computer expert/consultant, software engineer/programmer, etc etc etc):\r\n\r\n(or just ask Pixie, Jay, Pertex, Alex, etc actual/good programmers, about this stuff, lol)\r\n\r\n7. more computer architecture/organization\r\n8. ??? high level math, logic, theoretical, computer/engineering stuff, and etc stuff\r\n9. ??? high tech / futuristic stuff...\r\n....\r\nI'm still not really fully understanding that well of what CS field all entails, laughs, but I'm still just working on finishing up my  lower division classes...",
      "EditableFormat": "markdown",
      "HTML": "<p>Your 'GetRelationship' function:</p>\n<pre><code>if (HasString (object_parameter, \"relationship\")) {\n  return (object_parameter.relationship)\n}\n</code></pre>\n<p>is correct, so/as long as you set up the Function correctly, which would be:</p>\n<pre><code>&lt;function name=\"GetRelationship\" parameters=\"object_parameter\" type=\"string\"&gt;\n  if (HasString (object_parameter, \"relationship\")) {\n    return (object_parameter.relationship)\n  }\n  // you really should have an 'else' error-prompting 'msg' Script, to inform the user and/or yourself/co-testers (doing game testing), so you know you used an Object which doesn't have the 'relationship' String Attribute, which is the cause of the seeming (and/or worse: unknown/unaware of) Function \"failure\" (technically it's the 'false' result, not an actual failure/error of the function).\n&lt;/function&gt;\n\nand if you correctly set up the call/usage of the function, for examples:\n\n// example 1A: npc1.relationship = GetRelationship (npc2)\n// example 1B:\nstring_variable = GetRelationship (npc2)\nnpc1.relationship = string_variable\n// example 2A: if (GetRelationship (npc2) = npc3.relationship) { /* scripting */ }\n// example 2B: if (GetRelationship (npc2) = GetRelationship (npc3)) { /* scripting */ }\n\n&lt;object name=\"npc1\"&gt;\n  &lt;inherit name=\"relationship\" /&gt; // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;88&lt;/attr&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;fwb&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc2\"&gt;\n  &lt;inherit name=\"relationship\" /&gt; // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\n&lt;/object&gt;\n\n&lt;object name=\"npc3\"&gt;\n  &lt;inherit name=\"relationship\" /&gt; // sorry, I accidentally called this 'npc' in my last post's code example (oops!)\n&lt;/object&gt;\n\n&lt;type name=\"relationship\"&gt;\n  &lt;attr name=\"relationship\" type=\"string\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"relationshipscale\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<p><strong>WARNING: I don't think you can have 'relationship' be the name for both your String Attribute and your Object Type, or if you can... quest may do a popup menu asking which one you meant/want to be using... (usually the 'name' String Attribute is the ID Attribute, meaning that you can't have two or more of the same named/labeld 'name' String Attributes)</strong></p>\n<hr>\n<p>for your 'SetRelationshipscale' Function:</p>\n<p>you have a typo, you need to add in the '&gt;' on the '=1', it should look like this (the equals sign/symbol has to be on the right side of the other OPERATOR symbol): '&gt;=1'</p>\n<p>if you do: '=&gt;', you'll get an error</p>\n<p>also, if you got a space (whitespace) between the two OPERATORS, it'll likely cause an error too.</p>\n<p>also, if you're writing/copying/pasting this code directly into the game code, you'll need it to look like this:</p>\n<pre><code>// inside of 'whatever' Element (Object's Verb / Object's Script Attribute, Function, Command, Turnscript, etc):\n\n&lt;![CDATA[\n  foreach (object_variable, AllObjects()) {\n    if (DoesInherit (object_variable, \"type\")) {\n      if (object_variable.relationshipscale = 0) {\n        object_variable.relationship = \"hostile\"\n      }\n      else if (object_variable.relationshipscale &gt;= 1 and object_variable.relationshipscale &lt;= 10) {\n        object_variable.relationship = \"hated\"\n      }\n      else if (object_variable.relationshipscale &gt;= 11 and object_variable.relationshipscale &lt;= 39) {\n        object_variable.relationship = \"stranger\"\n      }\n      else if (object_variable.relationshipscale &gt;= 40 and object_variable.relationshipscale &lt;= 59) {\n        object_variable.relationship = \"acq\"\n      }\n      else if (object_variable.relationshipscale &gt;= 60 and object_variable.relationshipscale &lt;= 79) {\n        object_variable.relationship = \"friend\"\n      }\n      else if (object_variable.relationshipscale &gt;= 80 and object_variable.relationshipscale &lt;= 99) {\n        object_variable.relationship = \"fwb\"\n      }\n      else if (object_variable.relationshipscale &gt;= 100 and object_variable.relationshipscale &lt;= 119) {\n        object_variable.relationship = \"lover\"\n      }\n      else {\n        object_variable.relationship = \"spouse\"\n      }\n    }\n  }\n]]&gt;\n</code></pre>\n<p>if you used the GUI~Editor's 'run as script -&gt; add new script' options, then you don't need to include the '&lt;!C[DATA[ ... ]]&gt;' tags. Though, you can always check the game code, making sure that these tags are in there just to be safe (if the quest editor/play mode hasn't already failed to load/open/start/initialize), and if not, then put them in yourself.</p>\n<hr>\n<p>you can do this:</p>\n<pre><code>object_parameter.relationship = \"stranger\"\nobject_parameter.relationshipscale = object_parameter.relationshipscale + 10\n</code></pre>\n<p>but you're manually having to correctly type in the correct Value (you have to be sure that you know what your 'relationshipscale' Value is, as adding 10 to it, depending on what the Value is, may not correspond to your, in this example, use of setting the 'relationship' to \"stranger\", right? What if your 'relationshipscale' Value was '80', would that correctly correspond with \"stranger\". No, it wouldn't. Also, this means you can't deal with in-playing-game changes/dynamic-ness of Attributes' Values.</p>\n<p>to deal with in-playing-game changes/dynamic-ness of Attributes' Values, one way, would be to use the 'SetRelationshipscale' Function (as this uses/checks your 'relationshipscale' Integer Value, using your scripting that you already have in the Function doing the matching of it up to the correct 'relationship' String Value for you automatically, meaning it can handle changing/dynamic Attributes' Values during game play, but only if you ALSO HAVE TO put this into a scripting location that is constantly running/firing/executing on every internal turn, aka using a global Turnscript, or whenever any Object's Attribute's Values change, aka using the special 'changed' Script Attribute, but you don't want to do this, as you'd have to create/add them for every single Object and their every single Attribute invovled.... YUUUUCCKKKKK!!!!!!) and the function returns the correct 'relationship' String Value for you.</p>\n<p>so....</p>\n<p>just add in (where-ever you need/want it to occur) the script that changes the Integer Value, using your example:</p>\n<p>object_parameter.relationshipscale = object_parameter.relationshipscale + 10</p>\n<p>and if you have your 'GetRelationshipscale' Function within a global Turnscript, it'll automatically update all (specifed by, Object Type / Inherited Attribute, as we've set it up to do) Objects' 'relationship' String Attribute's Values for you!</p>\n<hr>\n<p>yes... there can be a bit better ways of doing this (though not by too much), but they involve some really advanced/fancy/concise code, far beyond my ability, laughs. Even my one post with that Function using a lot of ArgumentParameter inputs is quite messy...</p>\n<hr>\n<p>as far as I understand of the CS (Computer Science: Programming/Software Enginneering and Computer/Electronic/Circuitry Engineering) field:</p>\n<p>stages of CS (Computer Science: massive field: programming/coding and computer electronics and their connection to each other, high level math and logic and theoretical level stuff too with them courses/classes/subjects, computer/circuitry architecture, computer/circuitry design, neuro science / man-machine / matrix / advanced terminator/ascension AI --- type of stuff, and etc etc etc):</p>\n<p>lower division classes:</p>\n<p>High Level Languages (more to the basic computer user's level, more user-friendly):</p>\n<ol>\n<li>\"basic\" scripting: ifs, loops, variables, functions, objects, procedural/sequential (function using) coding/design, recursion, etc...</li>\n<li>various languages (C++, Java, Python, JS: JavaScript, Ruby, C, C#, MS-DoS/computer Command Box/Shell languages, Perl, Lua/Lau - whatever meh, Fortron whatever meh, AppleScript, Apple: Swift, etc)</li>\n<li>object oriented design/coding (using Objects, duh, lol): Encapsulation (constructors, destructors, Objects/containment, Groups/Classes, etc), Inheritance (Groups/Classes, Interfaces, Objects, etc), and/or Polymorphism usages in/for code/program designs (\"top/macro to down/micro\" design)</li>\n<li>trees/structures/code design/organization/systems</li>\n</ol>\n<p>Low Level Languages (nearer to the circuitry, less user-friendly)</p>\n<ol start=\"5\">\n<li>Assembly Languages (bit manipulation, addressing, boolean logic, bit logic, etc, encoding/decoding, threads/processii: directly working with/controlling individual cores/processors/cpus/computer chips, IO controlling, etc)</li>\n<li>Computer Architecture/Organization (circuitry, elontronic/circuitry/logic/computer enginneering, boolean logic / boolean gate logic, multiplexors, decoders, encoders, full adders, half adders, sequential circuits, buffers, inverters/negators, combinational circuits, etc etc etc)</li>\n</ol>\n<p>Upper Division classes and beyond (graduate, bachelors, masters, ph. d: security/hacking/computer expert/consultant, software engineer/programmer, etc etc etc):</p>\n<p>(or just ask Pixie, Jay, Pertex, Alex, etc actual/good programmers, about this stuff, lol)</p>\n<ol start=\"7\">\n<li>more computer architecture/organization</li>\n<li>??? high level math, logic, theoretical, computer/engineering stuff, and etc stuff</li>\n<li>??? high tech / futuristic stuff...<br>\n....<br>\nI'm still not really fully understanding that well of what CS field all entails, laughs, but I'm still just working on finishing up my  lower division classes...</li>\n</ol>\n\n",
      "PostDate": "2016-07-25T03:05:52.594757Z",
      "LastEditDate": "2016-07-25T03:54:17.2152002Z"
    },
    {
      "PostId": "0942794c-6ba6-47f8-a1cd-f8f43038072c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Are you wanting a functions that takes the NPC as a parameter, so you can do something like:\r\n```\r\n  msg(\"Your relationship with her is: \" + GetRelationship(goblinesque woman) + \".\")\r\n```\r\nThe code in the function could look like this (give it a parameter `npc` and a return type `string`):\r\n```\r\nif (npc.relationshipscale <= 0) {\r\n  return (\"hostile\")\r\n}\r\nif (npc.relationshipscale <=10) {\r\n  return (\"hated\")\r\n}\r\nif (npc.relationshipscale <=39) {\r\n  return (\"stranger\")\r\n}\r\nif (npc.relationshipscale <=59) {\r\n  return (\"acq\")\r\n}\r\nif (npc.relationshipscale <=79) {\r\n  return (\"friend\")\r\n}\r\nif (npc.relationshipscale <=99) {\r\n  return (\"fwb\")\r\n}\r\nif (npc.relationshipscale <=119) {\r\n  return (\"lover\")\r\n}\r\nelse {\r\n  return (\"spouse\")\r\n}\r\n```\r\nNote that each test only needs to check the higher bound, as we know it cannot be below the lower bound at that point.\r\n\r\nOr do you want the NPC to have an attribute that holds the relationship descriptor, and have that undated in a change script? You cannot have anything return from a change script or send it a parameter, so the code would look like this:\r\n```\r\nif (this.relationshipscale <= 0) {\r\n  this.relationshipdescriptor = \"hostile\"\r\n}\r\nif (this.relationshipscale <=10) {\r\n  this.relationshipdescriptor = \"hated\"\r\n}\r\nif (this.relationshipscale <=39) {\r\n  this.relationshipdescriptor = \"stranger\"\r\n}\r\nif (this.relationshipscale <=59) {\r\n  this.relationshipdescriptor = \"acq\"\r\n}\r\nif (this.relationshipscale <=79) {\r\n  this.relationshipdescriptor = \"friend\"\r\n}\r\nif (this.relationshipscale <=99) {\r\n  this.relationshipdescriptor = \"fwb\"\r\n}\r\nif (this.relationshipscale <=119) {\r\n  this.relationshipdescriptor = \"lover\"\r\n}\r\nelse {\r\n  this.relationshipdescriptor = \"spouse\"\r\n}\r\n```\r\nI would suggest doing this on one NPC and testing it works, and if it does, create an NPC type, and move it to there, setting all your NPCs to that type.",
      "EditableFormat": "markdown",
      "HTML": "<p>Are you wanting a functions that takes the NPC as a parameter, so you can do something like:</p>\n<pre><code>  msg(\"Your relationship with her is: \" + GetRelationship(goblinesque woman) + \".\")\n</code></pre>\n<p>The code in the function could look like this (give it a parameter <code>npc</code> and a return type <code>string</code>):</p>\n<pre><code>if (npc.relationshipscale &lt;= 0) {\n  return (\"hostile\")\n}\nif (npc.relationshipscale &lt;=10) {\n  return (\"hated\")\n}\nif (npc.relationshipscale &lt;=39) {\n  return (\"stranger\")\n}\nif (npc.relationshipscale &lt;=59) {\n  return (\"acq\")\n}\nif (npc.relationshipscale &lt;=79) {\n  return (\"friend\")\n}\nif (npc.relationshipscale &lt;=99) {\n  return (\"fwb\")\n}\nif (npc.relationshipscale &lt;=119) {\n  return (\"lover\")\n}\nelse {\n  return (\"spouse\")\n}\n</code></pre>\n<p>Note that each test only needs to check the higher bound, as we know it cannot be below the lower bound at that point.</p>\n<p>Or do you want the NPC to have an attribute that holds the relationship descriptor, and have that undated in a change script? You cannot have anything return from a change script or send it a parameter, so the code would look like this:</p>\n<pre><code>if (this.relationshipscale &lt;= 0) {\n  this.relationshipdescriptor = \"hostile\"\n}\nif (this.relationshipscale &lt;=10) {\n  this.relationshipdescriptor = \"hated\"\n}\nif (this.relationshipscale &lt;=39) {\n  this.relationshipdescriptor = \"stranger\"\n}\nif (this.relationshipscale &lt;=59) {\n  this.relationshipdescriptor = \"acq\"\n}\nif (this.relationshipscale &lt;=79) {\n  this.relationshipdescriptor = \"friend\"\n}\nif (this.relationshipscale &lt;=99) {\n  this.relationshipdescriptor = \"fwb\"\n}\nif (this.relationshipscale &lt;=119) {\n  this.relationshipdescriptor = \"lover\"\n}\nelse {\n  this.relationshipdescriptor = \"spouse\"\n}\n</code></pre>\n<p>I would suggest doing this on one NPC and testing it works, and if it does, create an NPC type, and move it to there, setting all your NPCs to that type.</p>\n\n",
      "PostDate": "2016-07-25T07:13:43.9658716Z",
      "LastEditDate": null
    },
    {
      "PostId": "686f4f7b-df2f-43ba-84a9-1b5ddc1800ae",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay! So after talking with Pixie a little and messing with things. We came up with this solution, although it still doesn't quite work yet, probably because I'm not familiar with how to apply types and such to scripting. I know how to get things to affect player objects and commands to affect objects, but not how to apply types to scripting. \r\n\r\nWe came up with...\r\n\r\n0 Functions\r\n1 Type\r\n\r\n***Type***: npc\r\nrelationshipscale.integer.0\r\nchangedrelationshipscale.script.\r\n```\r\nif (this.relationshipscale = 0) {\r\n  this.relationship = \"hostile\"\r\n}\r\nelse if (this.relationshipscale >=1 and this.relationshipscale <=10) {\r\n  this.relationship = \"hated\"\r\n}\r\nelse if (this.relationshipscale >=11 and this.relationshipscale <=39) {\r\n  this.relationship = \"stranger\"\r\n}\r\nelse if (this.relationshipscale >=40 and this.relationshipscale <=59) {\r\n  this.relationship = \"acq\"\r\n}\r\nelse if (this.relationshipscale >=60 and this.relationshipscale <=79) {\r\n  this.relationship = \"friend\"\r\n}\r\nelse if (this.relationshipscale >=80 and this.relationshipscale <=99) {\r\n  this.relationship = \"fwb\"\r\n}\r\nelse if (this.relationshipscale >=100 and this.relationshipscale <=119) {\r\n  this.relationship = \"lover\"\r\n}\r\nelse {\r\n  this.relationship = \"spouse\"\r\n}\r\n```\r\nSo my only problem is basically how to assign these things to scripting, which I probably already know but since this is new my brain is trying to confuzzle me. \r\nI know there is...\r\n```\r\nnpccharacternamehere.relationshipscale = npccharacternamehere.relationshipscale + 10\r\n```\r\nwhich I can use to set the numbers of the scale, but is there a way to use the changed relationship attributes like...\r\n```\r\nif (DoesInherit (relationshipscale, \"stranger\")) {\r\n}\r\n```\r\nBecause all attempts so far leave errors that mention instances not set to object and variables. I don't think I need to do a stringlist that accounts for them all since they are part of the scale already, so I just wanted to know if this is all correct so far. Pix will be out of town for a while, so he/she won't be able to help ^_^ Let's all wish him/her a safe trip too!\r\n\r\n***UPDATE***:\r\nGot it to work! Thanks! \r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay! So after talking with Pixie a little and messing with things. We came up with this solution, although it still doesn't quite work yet, probably because I'm not familiar with how to apply types and such to scripting. I know how to get things to affect player objects and commands to affect objects, but not how to apply types to scripting.</p>\n<p>We came up with...</p>\n<p>0 Functions<br>\n1 Type</p>\n<p><strong><em>Type</em></strong>: npc<br>\nrelationshipscale.integer.0<br>\nchangedrelationshipscale.script.</p>\n<pre><code>if (this.relationshipscale = 0) {\n  this.relationship = \"hostile\"\n}\nelse if (this.relationshipscale &gt;=1 and this.relationshipscale &lt;=10) {\n  this.relationship = \"hated\"\n}\nelse if (this.relationshipscale &gt;=11 and this.relationshipscale &lt;=39) {\n  this.relationship = \"stranger\"\n}\nelse if (this.relationshipscale &gt;=40 and this.relationshipscale &lt;=59) {\n  this.relationship = \"acq\"\n}\nelse if (this.relationshipscale &gt;=60 and this.relationshipscale &lt;=79) {\n  this.relationship = \"friend\"\n}\nelse if (this.relationshipscale &gt;=80 and this.relationshipscale &lt;=99) {\n  this.relationship = \"fwb\"\n}\nelse if (this.relationshipscale &gt;=100 and this.relationshipscale &lt;=119) {\n  this.relationship = \"lover\"\n}\nelse {\n  this.relationship = \"spouse\"\n}\n</code></pre>\n<p>So my only problem is basically how to assign these things to scripting, which I probably already know but since this is new my brain is trying to confuzzle me.<br>\nI know there is...</p>\n<pre><code>npccharacternamehere.relationshipscale = npccharacternamehere.relationshipscale + 10\n</code></pre>\n<p>which I can use to set the numbers of the scale, but is there a way to use the changed relationship attributes like...</p>\n<pre><code>if (DoesInherit (relationshipscale, \"stranger\")) {\n}\n</code></pre>\n<p>Because all attempts so far leave errors that mention instances not set to object and variables. I don't think I need to do a stringlist that accounts for them all since they are part of the scale already, so I just wanted to know if this is all correct so far. Pix will be out of town for a while, so he/she won't be able to help ^_^ Let's all wish him/her a safe trip too!</p>\n<p><strong><em>UPDATE</em></strong>:<br>\nGot it to work! Thanks!</p>\n\n",
      "PostDate": "2016-07-29T20:05:39.8978727Z",
      "LastEditDate": "2016-07-29T20:37:18.8677903Z"
    }
  ]
}
