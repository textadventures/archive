{
  "Topic": {
    "TopicId": "bzbrgvl2dkow8bvcauk39q",
    "ForumId": "10",
    "Title": "Looking for help with a custom Verb",
    "LastUpdated": "2017-06-22T17:34:54.6784733Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "68c0e1d0-231c-455d-88db-31c3671467ed",
      "UserId": 312869,
      "Username": "TheWinterOne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/51c5c17c839da06cf56de3a1f6d15080?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I made a verb for the sole purpose of pulling up the values of some variables from the player via an object in the player's inventory. Sort of an in-game menu until I properly modified the GUI. I made the verbs via the object menu, and it uses the following attributes:\r\n\r\nPattern: Command Pattern\r\nDefault: Text\r\nText: Blank/Unused\r\nName: Blank/Unused\r\n\r\nObject Separator: with; using\r\nMenu Caption: With which object?\r\nDefault Text: That doesn't work.\r\nIf No Objects are available, show this message: There are no objects available to do that with.\r\n\r\nI'm using the object by clicking on it, then selecting the command rather than writing it (I plan to have the command bar disabled). When I do, it actually runs successfully, but then it tacts this on at the end:\r\n\r\nError running script: Error compiling expression 'game.command_successful':\r\n RootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'\r\n\r\nI've done some searching on the forums, but it's still left me a bit confused as to where this is coming from. I'm familiar with programming, although XML is a strange new world for me. What it seems like (and this is my guesswork) is that verbs are supposed to return a boolean to the main game and it's somehow returning an object instead. I have no idea where it'd be getting the object from, though.\r\n\r\nOn the object side, the object's response to the verb is a script comprised entirely of the print value function, like below:\r\n\r\nmsg (\"Player Attributes:\")\r\n\r\nSo I'm a little stumped. I'm hoping someone might be able to point me in the right direction in terms of addressing this. ^.^;;",
      "EditableFormat": "markdown",
      "HTML": "<p>So I made a verb for the sole purpose of pulling up the values of some variables from the player via an object in the player's inventory. Sort of an in-game menu until I properly modified the GUI. I made the verbs via the object menu, and it uses the following attributes:</p>\n<p>Pattern: Command Pattern<br>\nDefault: Text<br>\nText: Blank/Unused<br>\nName: Blank/Unused</p>\n<p>Object Separator: with; using<br>\nMenu Caption: With which object?<br>\nDefault Text: That doesn't work.<br>\nIf No Objects are available, show this message: There are no objects available to do that with.</p>\n<p>I'm using the object by clicking on it, then selecting the command rather than writing it (I plan to have the command bar disabled). When I do, it actually runs successfully, but then it tacts this on at the end:</p>\n<p>Error running script: Error compiling expression 'game.command_successful':<br>\nRootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'</p>\n<p>I've done some searching on the forums, but it's still left me a bit confused as to where this is coming from. I'm familiar with programming, although XML is a strange new world for me. What it seems like (and this is my guesswork) is that verbs are supposed to return a boolean to the main game and it's somehow returning an object instead. I have no idea where it'd be getting the object from, though.</p>\n<p>On the object side, the object's response to the verb is a script comprised entirely of the print value function, like below:</p>\n<p>msg (\"Player Attributes:\")</p>\n<p>So I'm a little stumped. I'm hoping someone might be able to point me in the right direction in terms of addressing this. ^.^;;</p>\n\n",
      "PostDate": "2017-06-22T17:34:54.6784733Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d1ae8b76-6e5f-4de7-ad0d-4f5b8c2c630d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am a little confused how you are doing this, and I am wondering if you have added a verb element. The best way to add a verb to an object is via the _Verbs_ tab of the object itself:\r\nhttp://docs.textadventures.co.uk/quest/tutorial/using_scripts.html\r\n\r\nBy the way, when Quest says `RootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'` it really means \"null\", not \"object\".\r\n\r\nXML is pretty straightforward, but unless you are creating a library, you never need to see it. Quest code is something else, and is useful to know to some degree.",
      "EditableFormat": "markdown",
      "HTML": "<p>I am a little confused how you are doing this, and I am wondering if you have added a verb element. The best way to add a verb to an object is via the <em>Verbs</em> tab of the object itself:<br>\nhttp://docs.textadventures.co.uk/quest/tutorial/using_scripts.html</p>\n<p>By the way, when Quest says <code>RootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'</code> it really means \"null\", not \"object\".</p>\n<p>XML is pretty straightforward, but unless you are creating a library, you never need to see it. Quest code is something else, and is useful to know to some degree.</p>\n\n",
      "PostDate": "2017-06-22T19:09:11.9671436Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d791adb9-c699-432c-ba3b-c314a3d8f66a",
      "UserId": 312869,
      "Username": "TheWinterOne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/51c5c17c839da06cf56de3a1f6d15080?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, that's exactly how I created it. I made the verbs via the 'Verbs' tab of the object (henceforth called 'menu'), and populated the scripts there, I never even touched the verbs section itself save to pull down that info for this post. \r\n\r\nUnder the Verbs tab for the menu object are the three verbs I built (they all do the same thing, just different variables) showing the value as the script and the source as the menu object. It's good to know that it's actually referencing a null, but I still don't know how it's producing that. I added the verbs in the same manner as shown in that tutorial (I think I might've actually followed that) so I'm not sure where the difference would be.\r\n\r\nIt's good to know that there's such a clear separation between the two languages, too! I am trying to learn QC as well, although I haven't been able to put in as much time as hoped. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, that's exactly how I created it. I made the verbs via the 'Verbs' tab of the object (henceforth called 'menu'), and populated the scripts there, I never even touched the verbs section itself save to pull down that info for this post.</p>\n<p>Under the Verbs tab for the menu object are the three verbs I built (they all do the same thing, just different variables) showing the value as the script and the source as the menu object. It's good to know that it's actually referencing a null, but I still don't know how it's producing that. I added the verbs in the same manner as shown in that tutorial (I think I might've actually followed that) so I'm not sure where the difference would be.</p>\n<p>It's good to know that there's such a clear separation between the two languages, too! I am trying to learn QC as well, although I haven't been able to put in as much time as hoped.</p>\n\n",
      "PostDate": "2017-06-22T20:19:27.8516686Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "68759670-d00e-4038-856e-f07af2c72dba",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "'Verb' Elements (Verbs are Script Attributes with some additional coding to make them Verbs) are actually/technically (as the underlying quest coding) a specialized 'Command' Element, while I don't exactly understand it, it's something like this: they get their parent Object as their only input Argument, and thus they are, attached only to and function only with, its parent Object, whereas the 'Command' Element isn't limited to a parent Object as it has no parent Object.\r\n\r\nWhat you're doing sounds more complex than what little I understand about how Verbs and Commands work (they can be connected together), unless I'm not understanding what you're trying to describe what you're doing.\r\n\r\n----------\r\n\r\nif you want a more simple functionality, you can do this, an example:\r\n\r\n```\r\n<object name=\"player\">\r\n</object>\r\n\r\n<object name=\"action_button\">\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n  <attr name=\"alias\" type=\"string\">actions</attr>\r\n  <attr name=\"take\" type=\"boolean\">false</attr>\r\n  <attr name=\"drop\" type=\"boolean\">false</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">explore;search;talk;fight;magic;item;equipment;storage;rest;sleep</attr>\r\n  <attr name=\"explore\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"search\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"talk\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"fight\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"magic\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"item\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"equipment\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"storage\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"rest\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"sleep\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"info_button\">\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n  <attr name=\"alias\" type=\"string\">info</attr>\r\n  <attr name=\"take\" type=\"boolean\">false</attr>\r\n  <attr name=\"drop\" type=\"boolean\">false</attr>\r\n  <attr name=\"inventoryverbs\" type=\"simplestringlist\">looks;stats;spells;gear;items;help;hints</attr>\r\n  <attr name=\"looks\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"stats\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"spells\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"gear\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"storage\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"items\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"help\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n  <attr name=\"hint\" type=\"script\">\r\n    // scripting\r\n  </attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>explore</property>\r\n  <pattern>explore</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>search</property>\r\n  <pattern>search</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>talk</property>\r\n  <pattern>talk</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>fight</property>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>magic</property>\r\n  <pattern>magic</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>item</property>\r\n  <pattern>item</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>equipment</property>\r\n  <pattern>equipment</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>storage</property>\r\n  <pattern>storage</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>rest</property>\r\n  <pattern>rest</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>sleep</property>\r\n  <pattern>sleep</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>looks</property>\r\n  <pattern>looks</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>stats</property>\r\n  <pattern>stats</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>spells</property>\r\n  <pattern>spells</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>gear</property>\r\n  <pattern>gear</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>items</property>\r\n  <pattern>items</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>help</property>\r\n  <pattern>help</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>hints</property>\r\n  <pattern>hints</pattern>\r\n  <defaultexpression>You can't do that!</defaultexpression>\r\n</verb>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>'Verb' Elements (Verbs are Script Attributes with some additional coding to make them Verbs) are actually/technically (as the underlying quest coding) a specialized 'Command' Element, while I don't exactly understand it, it's something like this: they get their parent Object as their only input Argument, and thus they are, attached only to and function only with, its parent Object, whereas the 'Command' Element isn't limited to a parent Object as it has no parent Object.</p>\n<p>What you're doing sounds more complex than what little I understand about how Verbs and Commands work (they can be connected together), unless I'm not understanding what you're trying to describe what you're doing.</p>\n<hr>\n<p>if you want a more simple functionality, you can do this, an example:</p>\n<pre><code>&lt;object name=\"player\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"action_button\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;actions&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;explore;search;talk;fight;magic;item;equipment;storage;rest;sleep&lt;/attr&gt;\n  &lt;attr name=\"explore\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"search\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"talk\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"magic\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"item\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"equipment\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"storage\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"rest\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"sleep\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"info_button\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;info&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;false&lt;/attr&gt;\n  &lt;attr name=\"inventoryverbs\" type=\"simplestringlist\"&gt;looks;stats;spells;gear;items;help;hints&lt;/attr&gt;\n  &lt;attr name=\"looks\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"stats\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"spells\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"gear\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"storage\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"items\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"help\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n  &lt;attr name=\"hint\" type=\"script\"&gt;\n    // scripting\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;explore&lt;/property&gt;\n  &lt;pattern&gt;explore&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;search&lt;/property&gt;\n  &lt;pattern&gt;search&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk&lt;/property&gt;\n  &lt;pattern&gt;talk&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;magic&lt;/property&gt;\n  &lt;pattern&gt;magic&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;item&lt;/property&gt;\n  &lt;pattern&gt;item&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;equipment&lt;/property&gt;\n  &lt;pattern&gt;equipment&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;storage&lt;/property&gt;\n  &lt;pattern&gt;storage&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;rest&lt;/property&gt;\n  &lt;pattern&gt;rest&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;sleep&lt;/property&gt;\n  &lt;pattern&gt;sleep&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;looks&lt;/property&gt;\n  &lt;pattern&gt;looks&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;stats&lt;/property&gt;\n  &lt;pattern&gt;stats&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;spells&lt;/property&gt;\n  &lt;pattern&gt;spells&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;gear&lt;/property&gt;\n  &lt;pattern&gt;gear&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;items&lt;/property&gt;\n  &lt;pattern&gt;items&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;help&lt;/property&gt;\n  &lt;pattern&gt;help&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;hints&lt;/property&gt;\n  &lt;pattern&gt;hints&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n\n",
      "PostDate": "2017-06-22T20:33:01.748159Z",
      "LastEditDate": "2017-06-23T18:27:51.313066Z",
      "link": null
    },
    {
      "PostId": "212eb1d9-98d9-49fb-a4ae-118f2ee8771e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\r\nto add to Pixie's comments about quest coding (let's see if I get this description/explanation more accurate this time, lol):\r\n\r\nquest has it's own language 'aslx', which is generally made up of two (or three) types of languages:\r\n\r\n--------------\r\n\r\n1. (see code box below)\r\n\r\n```\r\nthe 'xml/html like (web/online)' coding part with the tags: <xxx>xxx</xxx> or <xxx />, which acts like your \"physical\" stuff:\r\n\r\n// most of the XML tags can be used within quest's scripting too, for example: msg (\"you stop to catch your breath...<br>having caught your breath, you greet the npc\")\r\n\r\n<asl version=\"###\"> // beginning asl tag block\r\n  // the 'asl' block IS your game / GAME OBJECT !!!\r\n  // I still use an older version/engine/(quest.exe) of quest, so I use: version=\"550\", but the current is either: version=\"560\" or version=\"570\", so replace the '###' with the 3 digits that is your version number: the rightmost number is always zero: version=\"##0\"\r\n  // mass of game code/content, everything has to be within the 'asl' tags\r\n</asl> // ending asl tag block\r\n\r\n// these are your (default, for english language users) library files:\r\n// (quest is a very powerful program, the engine is made up of library files, as well as your game, along with this game file's contents too. So, you can create your own engine, completely changing quest, if you're a good programmer and know quest's underlying coding well)\r\n<include ref=\"English.aslx\" />\r\n<include ref=\"Core.aslx\" />\r\n\r\n// example of a custom (your own library file to be included in your game and/or engine's initialization:\"built-up\" creation)\r\n<include ref=\"my_library_file.aslx\" />\r\n\r\n<game name=\"NAME_OF_YOUR_GAME\">\r\n  // this is your special 'game' Game Settings Object, which has lots of global/game-wide controls/toggles/features/attributes and also outside of game info for people looking at playing your game (author, version history/number, first published, category, difficulty, cruelty, description of your game, game id random generated hash string for the quest engine or just the quest servers / online, etc etc etc attributes)\r\n  <attr name=\"gameid\" type=\"string\">SOME_RANDOMLY_GENERATED_HASH_STRING</attr>\r\n  <attr name=\"author\" type=\"string\">NAME_OF_AUTHOR</attr>\r\n  <attr name=\"version\" type=\"string\">1.0</attr>\r\n  <attr name=\"firstpublished\" type=\"string\">2017</attr>\r\n  <attr name=\"description\" type=\"string\">This is my example game, I hope you enjoy it</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    // these scripts are the first things done when the game begins, before you're able to start playing/doing stuff\r\n    // some examples of common scriptings to be done:\r\n    // intro scripting, for example: msg (\"Hi, welcome to my game\")\r\n    // character creation scripting\r\n  </attr>\r\n  // etc Attributes\r\n</game>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n// etc Elements: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, Object Types / Types, etc etc etc\r\n```\r\n-----------------\r\n\r\ndefault (for english language users) new game code:\r\n\r\n(using my older version of quest)\r\n\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"NAME_OF_GAME\">\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid> // this syntax is the (for me annoyingly) defaulted (quest forced/changed into) short form of a String Attribute\r\n    <author>NAME_OF_AUTHOR</author>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n-----------------\r\n\r\n2. the second type of language is the scripting language, which (it's syntax) is similar to c++/Java, though it has some features from Python (List Attributes instead of Arrays, and has Dictionary Attributes):\r\n\r\nan example:\r\n\r\n(the 'CDATA' tags is for telling quest that the '<,>' characters/symbols are to be seen as greater than or lesser than operations/operators, and thus NOT as syntax tags)\r\n\r\n```\r\n<game name=\"NAME_OF_GAME\">\r\n  <attr name=\"start\" type=\"script\">\r\n    <![CDATA[\r\n      msg (\"Name?\")\r\n      get input {\r\n        // the 'get input', 'show menu / ShowMenu', and 'ask / Ask' automatically (hidden from you) do this for you: result = YOUR_INPUT\r\n        player.alias = result\r\n        msg (\"Age?\")\r\n        get input {\r\n          player.age_integer = result\r\n          if (player.age > 17) {\r\n            player.age_string = \"adult\"\r\n          } else if (player.age > 12) {\r\n            player.age_string = \"teen\"\r\n          } else if (player.age > 3) {\r\n            player.age_string = \"child\"\r\n          } else if (player.age > 0) {\r\n            player.age_string = \"baby\"\r\n          }\r\n          show menu (\"Sex?\", split (\"male;female\", ';\"), false) {\r\n            player.sex = result\r\n          }\r\n        }\r\n      }\r\n    ]]>\r\n  </attr>\r\n</game>\r\n```\r\n\r\n---------\r\n\r\n3. the 3rd type of language is JS (JavaScript), which you can use to do stuff that quest can't do or can't do easily, such as using the JS to modify quest's or your game's UI/GUI.\r\n\r\n------\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>to add to Pixie's comments about quest coding (let's see if I get this description/explanation more accurate this time, lol):</p>\n<p>quest has it's own language 'aslx', which is generally made up of two (or three) types of languages:</p>\n<hr>\n<ol>\n<li>(see code box below)</li>\n</ol>\n<pre><code>the 'xml/html like (web/online)' coding part with the tags: &lt;xxx&gt;xxx&lt;/xxx&gt; or &lt;xxx /&gt;, which acts like your \"physical\" stuff:\n\n// most of the XML tags can be used within quest's scripting too, for example: msg (\"you stop to catch your breath...&lt;br&gt;having caught your breath, you greet the npc\")\n\n&lt;asl version=\"###\"&gt; // beginning asl tag block\n  // the 'asl' block IS your game / GAME OBJECT !!!\n  // I still use an older version/engine/(quest.exe) of quest, so I use: version=\"550\", but the current is either: version=\"560\" or version=\"570\", so replace the '###' with the 3 digits that is your version number: the rightmost number is always zero: version=\"##0\"\n  // mass of game code/content, everything has to be within the 'asl' tags\n&lt;/asl&gt; // ending asl tag block\n\n// these are your (default, for english language users) library files:\n// (quest is a very powerful program, the engine is made up of library files, as well as your game, along with this game file's contents too. So, you can create your own engine, completely changing quest, if you're a good programmer and know quest's underlying coding well)\n&lt;include ref=\"English.aslx\" /&gt;\n&lt;include ref=\"Core.aslx\" /&gt;\n\n// example of a custom (your own library file to be included in your game and/or engine's initialization:\"built-up\" creation)\n&lt;include ref=\"my_library_file.aslx\" /&gt;\n\n&lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n  // this is your special 'game' Game Settings Object, which has lots of global/game-wide controls/toggles/features/attributes and also outside of game info for people looking at playing your game (author, version history/number, first published, category, difficulty, cruelty, description of your game, game id random generated hash string for the quest engine or just the quest servers / online, etc etc etc attributes)\n  &lt;attr name=\"gameid\" type=\"string\"&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/attr&gt;\n  &lt;attr name=\"author\" type=\"string\"&gt;NAME_OF_AUTHOR&lt;/attr&gt;\n  &lt;attr name=\"version\" type=\"string\"&gt;1.0&lt;/attr&gt;\n  &lt;attr name=\"firstpublished\" type=\"string\"&gt;2017&lt;/attr&gt;\n  &lt;attr name=\"description\" type=\"string\"&gt;This is my example game, I hope you enjoy it&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    // these scripts are the first things done when the game begins, before you're able to start playing/doing stuff\n    // some examples of common scriptings to be done:\n    // intro scripting, for example: msg (\"Hi, welcome to my game\")\n    // character creation scripting\n  &lt;/attr&gt;\n  // etc Attributes\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n// etc Elements: Objects, Exits, Verbs, Commands, Functions, Turnscripts, Timers, Object Types / Types, etc etc etc\n</code></pre>\n<hr>\n<p>default (for english language users) new game code:</p>\n<p>(using my older version of quest)</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"NAME_OF_GAME\"&gt;\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt; // this syntax is the (for me annoyingly) defaulted (quest forced/changed into) short form of a String Attribute\n    &lt;author&gt;NAME_OF_AUTHOR&lt;/author&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<ol start=\"2\">\n<li>the second type of language is the scripting language, which (it's syntax) is similar to c++/Java, though it has some features from Python (List Attributes instead of Arrays, and has Dictionary Attributes):</li>\n</ol>\n<p>an example:</p>\n<p>(the 'CDATA' tags is for telling quest that the '&lt;,&gt;' characters/symbols are to be seen as greater than or lesser than operations/operators, and thus NOT as syntax tags)</p>\n<pre><code>&lt;game name=\"NAME_OF_GAME\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    &lt;![CDATA[\n      msg (\"Name?\")\n      get input {\n        // the 'get input', 'show menu / ShowMenu', and 'ask / Ask' automatically (hidden from you) do this for you: result = YOUR_INPUT\n        player.alias = result\n        msg (\"Age?\")\n        get input {\n          player.age_integer = result\n          if (player.age &gt; 17) {\n            player.age_string = \"adult\"\n          } else if (player.age &gt; 12) {\n            player.age_string = \"teen\"\n          } else if (player.age &gt; 3) {\n            player.age_string = \"child\"\n          } else if (player.age &gt; 0) {\n            player.age_string = \"baby\"\n          }\n          show menu (\"Sex?\", split (\"male;female\", ';\"), false) {\n            player.sex = result\n          }\n        }\n      }\n    ]]&gt;\n  &lt;/attr&gt;\n&lt;/game&gt;\n</code></pre>\n<hr>\n<ol start=\"3\">\n<li>the 3rd type of language is JS (JavaScript), which you can use to do stuff that quest can't do or can't do easily, such as using the JS to modify quest's or your game's UI/GUI.</li>\n</ol>\n<hr>\n\n",
      "PostDate": "2017-06-22T21:26:28.6277515Z",
      "LastEditDate": "2017-06-23T18:31:09.5411381Z",
      "link": null
    },
    {
      "PostId": "a38db8d5-5bff-4045-9346-ccf0c734c833",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So you have an object called \"menu\", you go to the _Verb_ tab, add a new verb, and give it the script:\r\n```\r\nmsg (\"Player Attributes:\")\r\n```\r\n... and it gives that error? The only thing I can think of is that your verb clashes with an existing attribute. We had someone using \"enter\" as a verb recently, but \"enter\" is also the attribute Quest looks for when you enter a room, so it caused errors. What verbs are you adding?",
      "EditableFormat": "markdown",
      "HTML": "<p>So you have an object called \"menu\", you go to the <em>Verb</em> tab, add a new verb, and give it the script:</p>\n<pre><code>msg (\"Player Attributes:\")\n</code></pre>\n<p>... and it gives that error? The only thing I can think of is that your verb clashes with an existing attribute. We had someone using \"enter\" as a verb recently, but \"enter\" is also the attribute Quest looks for when you enter a room, so it caused errors. What verbs are you adding?</p>\n\n",
      "PostDate": "2017-06-22T21:28:56.6195145Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "434d67cf-0d7f-4bb3-85ec-66e6d6a47050",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nhere's the link for the doc on the web languages:\r\n\r\nht.tps://www.w3schools.com/\r\n\r\nthe basics of html and css is pretty simple if you already know how to code a bit already, and especially if you know the basics of a main language (c++, java, python, etc)",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>here's the link for the doc on the web languages:</p>\n<p>ht.tps://www.w3schools.com/</p>\n<p>the basics of html and css is pretty simple if you already know how to code a bit already, and especially if you know the basics of a main language (c++, java, python, etc)</p>\n\n",
      "PostDate": "2017-06-22T21:31:10.5678695Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "432de2b6-b5d6-47e6-ba46-d8a0658ace81",
      "UserId": 312869,
      "Username": "TheWinterOne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/51c5c17c839da06cf56de3a1f6d15080?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you both for your aid. And the three verbs I'm using are attributes/measures/script. \r\n\r\nRegarding what you said hegemonkhan, my verbs look nothing like that in code view, which might be the problem. Instead they appear underneath the menu object, which is underneath the player object, and each one looks like this:\r\n```\r\n      <object name=\"Menu\">\r\n        <inherit name=\"editor_object\" />\r\n        <attributes type=\"script\">\r\n          msg (\"Player Attributes:\")\r\n          msg (\"Player Body: \" + player.attri_power)\r\n</attributes>\r\n```\r\nNot sure why. The verb itself then shows up down near the bottom with just this to its name:\r\n\r\n```\r\n<verb>\r\n    <property>attributes</property>\r\n    <pattern>attributes</pattern>\r\n    <defaultexpression>\"You can't attributes \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n```\r\nThank you for the link, too. I'm familiar with the basics of html and css (I've used them in websites before) but I definately need brushing up on them. Funnily enough, they're the two scripting languages I tend to abide the least, historically. XD Something about the way they're laid out is hard for me to parse. \r\n\r\n I'm going to go play with it using the information provided, and hopefully sort it out. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you both for your aid. And the three verbs I'm using are attributes/measures/script.</p>\n<p>Regarding what you said hegemonkhan, my verbs look nothing like that in code view, which might be the problem. Instead they appear underneath the menu object, which is underneath the player object, and each one looks like this:</p>\n<pre><code>      &lt;object name=\"Menu\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;attributes type=\"script\"&gt;\n          msg (\"Player Attributes:\")\n          msg (\"Player Body: \" + player.attri_power)\n&lt;/attributes&gt;\n</code></pre>\n<p>Not sure why. The verb itself then shows up down near the bottom with just this to its name:</p>\n<pre><code>&lt;verb&gt;\n    &lt;property&gt;attributes&lt;/property&gt;\n    &lt;pattern&gt;attributes&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't attributes \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n</code></pre>\n<p>Thank you for the link, too. I'm familiar with the basics of html and css (I've used them in websites before) but I definately need brushing up on them. Funnily enough, they're the two scripting languages I tend to abide the least, historically. XD Something about the way they're laid out is hard for me to parse.</p>\n<p>I'm going to go play with it using the information provided, and hopefully sort it out.</p>\n\n",
      "PostDate": "2017-06-23T15:32:19.7245013Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "053ee9a6-f562-47b4-bc7b-d60c759ba0fc",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just created an object called \"menu\", and have it verbs \"attributes\" and \"script\" and it works fine.\r\n```\r\n    <object name=\"Menu\">\r\n      <inherit name=\"editor_object\" />\r\n      <script type=\"script\">\r\n        msg (\"Script\")\r\n      </script>\r\n      <attributes type=\"script\">\r\n        msg (\"Atts\")\r\n      </attributes>\r\n    </object>\r\n```\r\n\r\n```\r\n  <verb>\r\n    <property>script</property>\r\n    <pattern>script</pattern>\r\n    <defaultexpression>\"You can't script \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>attributes</property>\r\n    <pattern>attributes</pattern>\r\n    <defaultexpression>\"You can't attributes \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n```\r\nIt could be something else.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just created an object called \"menu\", and have it verbs \"attributes\" and \"script\" and it works fine.</p>\n<pre><code>    &lt;object name=\"Menu\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;script type=\"script\"&gt;\n        msg (\"Script\")\n      &lt;/script&gt;\n      &lt;attributes type=\"script\"&gt;\n        msg (\"Atts\")\n      &lt;/attributes&gt;\n    &lt;/object&gt;\n</code></pre>\n<pre><code>  &lt;verb&gt;\n    &lt;property&gt;script&lt;/property&gt;\n    &lt;pattern&gt;script&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't script \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;attributes&lt;/property&gt;\n    &lt;pattern&gt;attributes&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't attributes \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n</code></pre>\n<p>It could be something else.</p>\n\n",
      "PostDate": "2017-06-23T17:24:58.6146085Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "833d3287-23d9-4481-9e6b-e87591a1aa3c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "where the 'Verb' or 'WHATEVER' Element tag blocks are in code (vertically), doesn't matter (aside from the obvious stuff like outside of your game code: the 'asl' tag block, and/or within another Element, for examples), aside from the library file reference tags:\r\n```\r\n<include ref=\"xxx.aslx\" />\r\n```\r\n, and maybe  the 'game' Game Settings Object, as well as desired/required containment heirarchy.\r\n\r\n------\r\n\r\nyou used 'Menu' for your Object, I used 'actions_button' and 'info_button' for my Objects. You then got the individual Script Attributes (Verbs) within your 'menu' Object, and I got my individual Script Attributes (Verbs) within my two Objects.\r\n\r\nBoth of our individual 'Verb' tag blocks for our individual Script Attributes, are correct/the-same (again, where they are vertically in code, doesn't matter).\r\n\r\nThe individual Script Attributes (our Verbs) must be within Objects, which they're correctly so, for both of us.\r\n\r\nVerbs are actually just Script Attributes with some addition coding (which is why you see/have Attributes being created in code along with its matching 'Verb' Element tag) to make the Script Attributes act as Verbs do (Verbs are to act like Commands, as they're Commands, in the underlying quet coding).",
      "EditableFormat": "markdown",
      "HTML": "<p>where the 'Verb' or 'WHATEVER' Element tag blocks are in code (vertically), doesn't matter (aside from the obvious stuff like outside of your game code: the 'asl' tag block, and/or within another Element, for examples), aside from the library file reference tags:</p>\n<pre><code>&lt;include ref=\"xxx.aslx\" /&gt;\n</code></pre>\n<p>, and maybe  the 'game' Game Settings Object, as well as desired/required containment heirarchy.</p>\n<hr>\n<p>you used 'Menu' for your Object, I used 'actions_button' and 'info_button' for my Objects. You then got the individual Script Attributes (Verbs) within your 'menu' Object, and I got my individual Script Attributes (Verbs) within my two Objects.</p>\n<p>Both of our individual 'Verb' tag blocks for our individual Script Attributes, are correct/the-same (again, where they are vertically in code, doesn't matter).</p>\n<p>The individual Script Attributes (our Verbs) must be within Objects, which they're correctly so, for both of us.</p>\n<p>Verbs are actually just Script Attributes with some addition coding (which is why you see/have Attributes being created in code along with its matching 'Verb' Element tag) to make the Script Attributes act as Verbs do (Verbs are to act like Commands, as they're Commands, in the underlying quet coding).</p>\n\n",
      "PostDate": "2017-06-23T18:06:38.6734207Z",
      "LastEditDate": "2017-06-23T18:15:50.2631184Z",
      "link": null
    },
    {
      "PostId": "149308e2-9046-4546-a4db-4da1eb38da04",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nit's possible you're having conflicts by naming your Attributes as 'script' and 'attribute', as these are built-in terms/labels for quest's built-in and/or underlying coding\r\n\r\ntry to make you names/labels more unique and not what quest uses...\r\n\r\nI'm afraid to use 'element' for the damage/magic types: fire, water, air, earth, etc...\r\n\r\nso instead I use 'elemental', as I don't think Alex used this for quest... I hope not, lol.\r\n\r\nUnfortunately... 'type' is such a useful word for describing so many things... and not many people know of similes for it (including me, lol), I need to get a theasures and see if there are any other words that mean the same as 'type'... lol\r\n\r\n-----\r\n\r\nan easy and common way to make things unique, is to add: 'my/my_' in front of it:\r\n\r\nmy_script\r\nmy_attribute\r\nmy_type\r\nmy_talk\r\nmy_take\r\netc etc etc\r\n\r\nor something like that... if you need something better or more describing than 'my', lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>it's possible you're having conflicts by naming your Attributes as 'script' and 'attribute', as these are built-in terms/labels for quest's built-in and/or underlying coding</p>\n<p>try to make you names/labels more unique and not what quest uses...</p>\n<p>I'm afraid to use 'element' for the damage/magic types: fire, water, air, earth, etc...</p>\n<p>so instead I use 'elemental', as I don't think Alex used this for quest... I hope not, lol.</p>\n<p>Unfortunately... 'type' is such a useful word for describing so many things... and not many people know of similes for it (including me, lol), I need to get a theasures and see if there are any other words that mean the same as 'type'... lol</p>\n<hr>\n<p>an easy and common way to make things unique, is to add: 'my/my_' in front of it:</p>\n<p>my_script<br>\nmy_attribute<br>\nmy_type<br>\nmy_talk<br>\nmy_take<br>\netc etc etc</p>\n<p>or something like that... if you need something better or more describing than 'my', lol.</p>\n\n",
      "PostDate": "2017-06-23T18:23:03.934629Z",
      "LastEditDate": "2017-06-23T18:32:22.5594509Z",
      "link": null
    },
    {
      "PostId": "6921efd5-f4b5-4582-a170-7dd553a089bd",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> it's possible you're having conflicts by naming your Attributes as 'script' and 'attribute', as these are built-in terms/labels for quest's built-in and/or underlying coding\r\n\r\nI wondered that too, but they are fine.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>it's possible you're having conflicts by naming your Attributes as 'script' and 'attribute', as these are built-in terms/labels for quest's built-in and/or underlying coding</p>\n</blockquote>\n<p>I wondered that too, but they are fine.</p>\n\n",
      "PostDate": "2017-06-23T20:07:14.1354247Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c9892027-2ac4-41ff-8c84-527ff014d84a",
      "UserId": 312869,
      "Username": "TheWinterOne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/51c5c17c839da06cf56de3a1f6d15080?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Finally figured it out.\r\n\r\nIt's a problem with  CombatLib, somehow, which I'd planned to use and incorporate some of the functionality from later on. I'm not sure _where_ it conflicts, but as soon as I removed that, everything worked again. I have no idea why.\r\n\r\nThank you both for all your help, you gave me a lot to go on with debugging this mess. ^^",
      "EditableFormat": "markdown",
      "HTML": "<p>Finally figured it out.</p>\n<p>It's a problem with  CombatLib, somehow, which I'd planned to use and incorporate some of the functionality from later on. I'm not sure <em>where</em> it conflicts, but as soon as I removed that, everything worked again. I have no idea why.</p>\n<p>Thank you both for all your help, you gave me a lot to go on with debugging this mess. ^^</p>\n\n",
      "PostDate": "2017-06-25T00:51:07.5365696Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
