{
  "Topic": {
    "TopicId": "4oib4bpqokakrsn-t7mqjw",
    "ForumId": "10",
    "Title": "Adding a preposition to a verb problems",
    "LastUpdated": "2020-03-19T01:40:26.3181045Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "86b0d276-6196-4e80-b126-6d90c94be878",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for another question... been a while since I've worked with Quest and I <i>should</i> know the answers here but...\r\n\r\nI notice that when I try and add a verb like 'bang on', this option auto-pops up:\r\n\r\nknock on; knock; rap; knock at; rap at; rap on; bang; bang on; bang at\r\n\r\nso, I select it...\r\n\r\nHowever, when I test my game and type 'bang metal' it works just fine.\r\n```\r\n> bang metal\r\nHitting the metal or the wall around the metal does nothing to loosen the stone's grip on it's treasure. You'll need something a little more chemical to do the trick.\r\n```\r\n...and when I type 'bang on hooks' the system things 'on hooks' is the noun and responds with:\r\n```\r\n> bang on metal\r\nI can't see that. (on metal)\r\n```\r\nHow to fix?  Do I need to add a regex command to account for this?  Or is it simpler than that?",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for another question... been a while since I've worked with Quest and I <i>should</i> know the answers here but...</p>\n<p>I notice that when I try and add a verb like 'bang on', this option auto-pops up:</p>\n<p>knock on; knock; rap; knock at; rap at; rap on; bang; bang on; bang at</p>\n<p>so, I select it...</p>\n<p>However, when I test my game and type 'bang metal' it works just fine.</p>\n<pre><code>&gt; bang metal\nHitting the metal or the wall around the metal does nothing to loosen the stone's grip on it's treasure. You'll need something a little more chemical to do the trick.\n</code></pre>\n<p>...and when I type 'bang on hooks' the system things 'on hooks' is the noun and responds with:</p>\n<pre><code>&gt; bang on metal\nI can't see that. (on metal)\n</code></pre>\n<p>How to fix?  Do I need to add a regex command to account for this?  Or is it simpler than that?</p>\n\n",
      "PostDate": "2020-03-19T01:40:26.3181045Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b1bcc67f-640d-4511-a6c6-5da97d024d8e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A command pattern turns into a regular expression using `|`; which means that it will try the patterns you gave in order until one matches. So the player types \"bang on metal\". Quest checks the patterns in turn to see if that string matches:\r\n* `knock on #object#`; nope. \r\n* `knock #object#`, nope\r\n* `rap #object#`, nope\r\n* `knock at #object#`, nope\r\n* `rap at #object#`, nope\r\n* `rap on #object#`, nope\r\n* `bang #object#`… yes, that matches \"bang on metal\".\r\n     * So, `#object#` has captured the string \"on metal\" and Quest goes looking for an object named \"on metal\"\r\n     * It doesn't find one, so gives you an error.\r\n\r\nIf you had \"bang\" and \"bang on\" as separate verbs or separate commands, \"bang on\" would be picked because it has the fewest number of characters inside the `#object#` match. However, if they're options within the command, the first match wins. So you need to put \"bang on\" before \"bang\", ensuring that the `bang #object#` pattern only matches things that *aren't* \"bang on\". Similarly, you need to move \"knock at\" to before \"knock\".\r\n\r\nIn this case, it might be simpler to use a regular expression pattern:\r\n`^(knock|rap|bang) ?(on|at|) (?<object>.+)$`",
      "EditableFormat": "markdown",
      "HTML": "<p>A command pattern turns into a regular expression using <code>|</code>; which means that it will try the patterns you gave in order until one matches. So the player types \"bang on metal\". Quest checks the patterns in turn to see if that string matches:</p>\n<ul>\n<li><code>knock on #object#</code>; nope.</li>\n<li><code>knock #object#</code>, nope</li>\n<li><code>rap #object#</code>, nope</li>\n<li><code>knock at #object#</code>, nope</li>\n<li><code>rap at #object#</code>, nope</li>\n<li><code>rap on #object#</code>, nope</li>\n<li><code>bang #object#</code>… yes, that matches \"bang on metal\".\n<ul>\n<li>So, <code>#object#</code> has captured the string \"on metal\" and Quest goes looking for an object named \"on metal\"</li>\n<li>It doesn't find one, so gives you an error.</li>\n</ul>\n</li>\n</ul>\n<p>If you had \"bang\" and \"bang on\" as separate verbs or separate commands, \"bang on\" would be picked because it has the fewest number of characters inside the <code>#object#</code> match. However, if they're options within the command, the first match wins. So you need to put \"bang on\" before \"bang\", ensuring that the <code>bang #object#</code> pattern only matches things that <em>aren't</em> \"bang on\". Similarly, you need to move \"knock at\" to before \"knock\".</p>\n<p>In this case, it might be simpler to use a regular expression pattern:<br>\n<code>^(knock|rap|bang) ?(on|at|) (?&lt;object&gt;.+)$</code></p>\n\n",
      "PostDate": "2020-03-19T08:20:01.7105554Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f2e650e2-a5bf-4954-baad-0a3a8cd29652",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Makes sense.  Thanks.  But how difficult would it be for Quest to put them in that order when it “auto-populates” those verbs?  Is there a downside to having those option auto-populate with propositions first?  Wouldn’t that solve this problem for all heading forward?  Or am I missing something?",
      "EditableFormat": "markdown",
      "HTML": "<p>Makes sense.  Thanks.  But how difficult would it be for Quest to put them in that order when it “auto-populates” those verbs?  Is there a downside to having those option auto-populate with propositions first?  Wouldn’t that solve this problem for all heading forward?  Or am I missing something?</p>\n\n",
      "PostDate": "2020-03-19T13:36:55.6157869Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
