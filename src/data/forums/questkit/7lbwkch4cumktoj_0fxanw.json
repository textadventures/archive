{
  "Topic": {
    "TopicId": "7lbwkch4cumktoj_0fxanw",
    "ForumId": "15",
    "Title": "Local storage and number of saves",
    "LastUpdated": "2021-12-19T05:49:56.9358419Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d160f18e-a65c-4f6b-a735-0960e0e4b58b",
      "UserId": 438905,
      "Username": "Honoriam",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b865620f96adee94a79fceb9f25fed3d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey all,\r\n\r\nJust wanted to talk a little about my trials and tribulations in the realm of Q6's save/load system in case it's helpful for someone. I think that the idea of using local storage is great for the saves, but I've found that it runs into one major issue - storage quotas. Most browsers (including Chrome and Edge) seem to limit one app's local storage quota to 5 MB, which isn't a lot at all for plain text blobs as large as what Quest6 can generate (the game I am working on is large, but not huge, and generates a blob of ~400 kB of plain text). I've had several testers comment on \"no longer being able to save the game after a certain point\" and every time, it came down to a quota issue as they'd generated 10+ saves at that point.\r\n\r\nNow, I'm by no means an expert, but as far as I can tell, there's no simple way of increasing local storage quotas short of the user themselves editing and recompiling their browsers. So instead, I kludged together some functions to handle allowing the user to save/load their game from disk. (And I would love if anyone has suggestions for cleaning this up haha. Again, I'm just an amateur at this.)\r\n\r\n**Saving the game** (note, this would be easy to make as a global command, but for testing I was using it as an attribute function on an object). This is pretty easy using functions from the FileSaver.js library. (https://github.com/eligrey/FileSaver.js/)\r\n```\r\n<script src=\"lib/_filesaver.js\"></script>\r\n```\r\n```\r\nmsg(\"<b>What will you name your entry?</b>\")\r\naskQuestion(\"\", function(result){\r\n\tvar comment = settings.saveComment ? settings.saveComment() : \"-\"\r\n\tvar s = saveLoad.saveTheWorld(comment)\r\n\tvar myFile = new File([s], result+\".rcv\", {type: \"text/plain;charset=utf-8\"})\r\n\tsaveAs(myFile)\r\n\tmsg(\"Your entry \"+result+\".rcv should now download.\")\r\n})\r\n```\r\n\r\n**Loading the game** is harder to do due to the security limitations of accessing the client-side filesystem with JS. I ended up using an HTML input file element. A click to this element is generated when the \"load\" command is used, allowing the user to define a file to upload and read. This triggers a field.onchange function that reads the file and calls the JS function responsible for parsing it. The field is then cleared so that the same save file can be loaded multiple times in a row (because otherwise field.onchange won't trigger again if the file hasn't changed.)\r\n\r\n```\r\nfunction extraStorageLoader(){\r\n\ttry {\r\n\t\tdocument.getElementById('fileDialogId').click()\r\n\t} catch(e) {\r\n\t\tmsg(\"Load aborted.\")\r\n\t}\r\n}\r\n```\r\n```\r\n<form style=\"display:none\">\r\n\t<input type=\"file\" id=\"fileDialogId\" accept=\".rcv\"/>\r\n</form>\r\n<script>\r\n\tvar fileload = function(){\r\n\t\tvar fileInput = document.querySelector(\"#fileDialogId\");\r\n\t\tvar fileIn = fileInput.files;\r\n\t\t\r\n\t\tlet reader = new FileReader();\r\n\t\treader.readAsText(fileIn[0])\r\n\t\t\r\n\t\treader.onload = function(){\r\n\t\t\tloadGameFile(fileIn[0].name, reader.result)\r\n\t\t\tvar $el = $('#fileDialogId');\r\n\t\t\t$el.wrap('<form>').closest('form').get(0).reset();\r\n\t\t\t$el.unwrap();\r\n\t\t};\r\n\t\t\r\n\t\treader.onerror = function(){\r\n\t\t\tconsole.log(reader.error);\r\n\t\t};\r\n\t}\r\n\tdocument.querySelector(\"#fileDialogId\").onchange=fileload;\r\n</script>\r\n```\r\n```\r\nfunction loadGameFile(filename, contents){\r\n\ttry {\r\n\t\tif (contents != null) {\r\n\t\t\t//Check the start of the header to make sure the file is what is expected\r\n\t\t\tif(contents.substring(0,8) == \"GAMENAME\"){\r\n\t\t\t\tsaveLoad.loadTheWorld(contents, 4)\r\n\t\t\t\tclearScreen()\r\n\t\t\t\tmetamsg(\"Loaded file \\\"\" + filename + \"\\\"\")\r\n\t\t\t\tif (settings.afterLoad) settings.afterLoad(filename)\r\n\t\t\t\tgame.room.description()\r\n\t\t\t} else {\r\n\t\t\t\tmsg(\"Improperly formatted file.\")\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmetamsg(lang.sl_file_not_found);\r\n\t\t}\r\n\t} catch(e) {\r\n\t\tmsg(\"Load failed. Please try again.\")\r\n\t}\r\n}\r\n```\r\nHope this ends up being useful for someone else!\r\n\r\n_P.S. Forgive my poor code formatting! I am not a programmer!_",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey all,</p>\n<p>Just wanted to talk a little about my trials and tribulations in the realm of Q6's save/load system in case it's helpful for someone. I think that the idea of using local storage is great for the saves, but I've found that it runs into one major issue - storage quotas. Most browsers (including Chrome and Edge) seem to limit one app's local storage quota to 5 MB, which isn't a lot at all for plain text blobs as large as what Quest6 can generate (the game I am working on is large, but not huge, and generates a blob of ~400 kB of plain text). I've had several testers comment on \"no longer being able to save the game after a certain point\" and every time, it came down to a quota issue as they'd generated 10+ saves at that point.</p>\n<p>Now, I'm by no means an expert, but as far as I can tell, there's no simple way of increasing local storage quotas short of the user themselves editing and recompiling their browsers. So instead, I kludged together some functions to handle allowing the user to save/load their game from disk. (And I would love if anyone has suggestions for cleaning this up haha. Again, I'm just an amateur at this.)</p>\n<p><strong>Saving the game</strong> (note, this would be easy to make as a global command, but for testing I was using it as an attribute function on an object). This is pretty easy using functions from the FileSaver.js library. (https://github.com/eligrey/FileSaver.js/)</p>\n<pre><code>&lt;script src=\"lib/_filesaver.js\"&gt;&lt;/script&gt;\n</code></pre>\n<pre><code>msg(\"&lt;b&gt;What will you name your entry?&lt;/b&gt;\")\naskQuestion(\"\", function(result){\n\tvar comment = settings.saveComment ? settings.saveComment() : \"-\"\n\tvar s = saveLoad.saveTheWorld(comment)\n\tvar myFile = new File([s], result+\".rcv\", {type: \"text/plain;charset=utf-8\"})\n\tsaveAs(myFile)\n\tmsg(\"Your entry \"+result+\".rcv should now download.\")\n})\n</code></pre>\n<p><strong>Loading the game</strong> is harder to do due to the security limitations of accessing the client-side filesystem with JS. I ended up using an HTML input file element. A click to this element is generated when the \"load\" command is used, allowing the user to define a file to upload and read. This triggers a field.onchange function that reads the file and calls the JS function responsible for parsing it. The field is then cleared so that the same save file can be loaded multiple times in a row (because otherwise field.onchange won't trigger again if the file hasn't changed.)</p>\n<pre><code>function extraStorageLoader(){\n\ttry {\n\t\tdocument.getElementById('fileDialogId').click()\n\t} catch(e) {\n\t\tmsg(\"Load aborted.\")\n\t}\n}\n</code></pre>\n<pre><code>&lt;form style=\"display:none\"&gt;\n\t&lt;input type=\"file\" id=\"fileDialogId\" accept=\".rcv\"/&gt;\n&lt;/form&gt;\n&lt;script&gt;\n\tvar fileload = function(){\n\t\tvar fileInput = document.querySelector(\"#fileDialogId\");\n\t\tvar fileIn = fileInput.files;\n\t\t\n\t\tlet reader = new FileReader();\n\t\treader.readAsText(fileIn[0])\n\t\t\n\t\treader.onload = function(){\n\t\t\tloadGameFile(fileIn[0].name, reader.result)\n\t\t\tvar $el = $('#fileDialogId');\n\t\t\t$el.wrap('&lt;form&gt;').closest('form').get(0).reset();\n\t\t\t$el.unwrap();\n\t\t};\n\t\t\n\t\treader.onerror = function(){\n\t\t\tconsole.log(reader.error);\n\t\t};\n\t}\n\tdocument.querySelector(\"#fileDialogId\").onchange=fileload;\n&lt;/script&gt;\n</code></pre>\n<pre><code>function loadGameFile(filename, contents){\n\ttry {\n\t\tif (contents != null) {\n\t\t\t//Check the start of the header to make sure the file is what is expected\n\t\t\tif(contents.substring(0,8) == \"GAMENAME\"){\n\t\t\t\tsaveLoad.loadTheWorld(contents, 4)\n\t\t\t\tclearScreen()\n\t\t\t\tmetamsg(\"Loaded file \\\"\" + filename + \"\\\"\")\n\t\t\t\tif (settings.afterLoad) settings.afterLoad(filename)\n\t\t\t\tgame.room.description()\n\t\t\t} else {\n\t\t\t\tmsg(\"Improperly formatted file.\")\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tmetamsg(lang.sl_file_not_found);\n\t\t}\n\t} catch(e) {\n\t\tmsg(\"Load failed. Please try again.\")\n\t}\n}\n</code></pre>\n<p>Hope this ends up being useful for someone else!</p>\n<p><em>P.S. Forgive my poor code formatting! I am not a programmer!</em></p>\n\n",
      "PostDate": "2021-12-19T05:49:56.9358419Z",
      "LastEditDate": "2021-12-19T05:57:29.033235Z",
      "link": null
    },
    {
      "PostId": "7c6bd0d5-7d68-4139-bebb-55b012f91a06",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for ths - you raise a good point. I do wonder how big your game is; testers for The House on Highfield Lane did not encounter this issue.\r\n\r\nI will look at incorporating your code over the next few days, possibly giving the author or player the option to choose.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for ths - you raise a good point. I do wonder how big your game is; testers for The House on Highfield Lane did not encounter this issue.</p>\n<p>I will look at incorporating your code over the next few days, possibly giving the author or player the option to choose.</p>\n\n",
      "PostDate": "2021-12-22T10:13:14.5251813Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2c25a881-5683-4949-ad72-ac2c0ffc1e2c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have uploaded to GitHub a solution, though it is not in a release yet. Details here:\r\nhttps://github.com/ThePix/QuestJS/wiki/Save-Load",
      "EditableFormat": "markdown",
      "HTML": "<p>I have uploaded to GitHub a solution, though it is not in a release yet. Details here:<br>\nhttps://github.com/ThePix/QuestJS/wiki/Save-Load</p>\n\n",
      "PostDate": "2021-12-23T09:03:55.4928791Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
