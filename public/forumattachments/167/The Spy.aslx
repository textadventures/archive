<!--Saved by Quest 5.0.4359.21471-->
<asl version="500">
  <template name="UnresolvedObject">I can't see that.</template>
  <template name="UnresolvedLocation">You can't go there.</template>
  <template name="DefaultObjectDescription">Nothing out of the ordinary.</template>
  <template name="DefaultSelfDescription">Looking good.</template>
  <template name="SeeListHeader">You can see</template>
  <template name="GoListHeader">You can go</template>
  <template name="And">and</template>
  <template name="Or">or</template>
  <template name="NothingToUndo">Nothing to undo!</template>
  <template name="NotCarryingAnything">You are not carrying anything.</template>
  <template name="CarryingListHeader">You are carrying</template>
  <template name="UnrecognisedCommand">I don't understand your command.</template>
  <template name="YouAreIn">You are in</template>
  <template name="LookAt">Look at</template>
  <template name="Take">Take</template>
  <template name="SpeakTo">Speak to</template>
  <template name="Use">Use</template>
  <template name="Drop">Drop</template>
  <template name="GoTo">Go to</template>
  <template name="Go">Go</template>
  <template name="SwitchOn">Switch on</template>
  <template name="SwitchOff">Switch off</template>
  <template name="Open">Open</template>
  <template name="Close">Close</template>
  <template name="NeutralGender">it</template>
  <template name="MaleGender">he</template>
  <template name="FemaleGender">she</template>
  <template name="SelfGender">you</template>
  <template name="NeutralPluralGender">they</template>
  <template name="MalePluralGender">they</template>
  <template name="FemalePluralGender">they</template>
  <template name="NeutralArticle">it</template>
  <template name="MaleArticle">him</template>
  <template name="FemaleArticle">her</template>
  <template name="SelfArticle">yourself</template>
  <template name="NeutralPluralArticle">them</template>
  <template name="MalePluralArticle">them</template>
  <template name="FemalePluralArticle">them</template>
  <template name="SelfAlias">me</template>
  <template name="SelfAlt">myself; self</template>
  <template name="AllObjects">all; everything</template>
  <template name="ParserIgnorePrefixes">the; a; an</template>
  <template name="CannotDoThat">You can't do that.</template>
  <template name="Done">Done.</template>
  <template name="ContainerContentsPrefix">containing</template>
  <template name="SurfaceContentsPrefix">on which there is</template>
  <template name="LockedExit">That way is locked.</template>
  <template name="NoKey">You do not have the key.</template>
  <template name="UnlockMessage">Unlocked.</template>
  <template name="LockMessage">Locked.</template>
  <template name="DefaultOops">There is nothing to correct.</template>
  <template name="CompassNW">northwest</template>
  <template name="CompassN">north</template>
  <template name="CompassNE">northeast</template>
  <template name="CompassW">west</template>
  <template name="CompassE">east</template>
  <template name="CompassSW">southwest</template>
  <template name="CompassS">south</template>
  <template name="CompassSE">southeast</template>
  <template name="CompassUp">up</template>
  <template name="CompassDown">down</template>
  <template name="CompassIn">in</template>
  <template name="CompassOut">out</template>
  <template name="CompassDirectionPrefix"></template>
  <template name="UpDownDirectionPrefix"></template>
  <template name="InOutDirectionPrefix"></template>
  <template name="CompassNWShort">nw</template>
  <template name="CompassNShort">n</template>
  <template name="CompassNEShort">ne</template>
  <template name="CompassWShort">w</template>
  <template name="CompassEShort">e</template>
  <template name="CompassSWShort">sw</template>
  <template name="CompassSShort">s</template>
  <template name="CompassSEShort">se</template>
  <template name="CompassUpShort">u</template>
  <template name="CompassDownShort">d</template>
  <template name="CompassInShort"></template>
  <template name="CompassOutShort">o</template>
  <template name="InventoryLabel">Inventory</template>
  <template name="PlacesObjectsLabel">Places and Objects</template>
  <template name="CompassLabel">Compass</template>
  <template name="InButtonLabel">in</template>
  <template name="OutButtonLabel">out</template>
  <template name="EmptyListLabel">(empty)</template>
  <template name="NothingSelectedLabel">(nothing selected)</template>
  <template name="go"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="lookdir"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="look">^look$</template>
  <template name="lookat">look at; x; examine; exam; ex</template>
  <template name="take">take; get; pick up</template>
  <template name="undo">^undo$</template>
  <template name="inventory">^i$|^inv$|^inventory$</template>
  <template name="quit">^quit$</template>
  <template name="drop">drop</template>
  <template name="use">use</template>
  <template name="speakto">speak to; speak; talk to; talk</template>
  <template name="open">open</template>
  <template name="close">close</template>
  <template name="put"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></template>
  <template name="removefrom"><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></template>
  <template name="ask"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></template>
  <template name="tell"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></template>
  <template name="oops"><![CDATA[^oops (?<text>.*)$]]></template>
  <template name="buy">buy</template>
  <template name="climb">climb</template>
  <template name="drink">drink</template>
  <template name="eat">eat</template>
  <template name="give"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></template>
  <template name="hit">hit</template>
  <template name="kill">kill</template>
  <template name="kiss">kiss</template>
  <template name="knock">knock</template>
  <template name="lick">lick</template>
  <template name="lie">lie on; lie upon; lie down on; lie down upon</template>
  <template name="listento">listen to</template>
  <template name="lock">lock</template>
  <template name="move">move</template>
  <template name="pull">pull</template>
  <template name="push">push</template>
  <template name="read">read</template>
  <template name="search">search</template>
  <template name="show">show</template>
  <template name="sit">sit on; sit upon; sit down on; sit down upon</template>
  <template name="smell">smell; sniff</template>
  <template name="taste">taste</template>
  <template name="throw">throw</template>
  <template name="tie">tie</template>
  <template name="touch">touch</template>
  <template name="turnon">turn on; turn #object# on; switch on; switch #object# on</template>
  <template name="turnoff">turn off; turn #object# off; switch off; switch #object# off</template>
  <template name="turn">turn</template>
  <template name="unlock">unlock</template>
  <template name="untie">untie</template>
  <template name="useon"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></template>
  <template name="wear">wear</template>
  <template name="listen">^listen$</template>
  <template name="DefaultListen">You can't hear much.</template>
  <template name="jump">^jump$</template>
  <template name="DefaultJump">You jump, but nothing happens.</template>
  <template name="sitdown">^sit$|^sit down$</template>
  <template name="DefaultSitDown">No time for lounging about now.</template>
  <template name="liedown">^lie$|^lie down$</template>
  <template name="DefaultLieDown">No time for lounging about now.</template>
  <template name="sleep">^sleep$|^rest$</template>
  <template name="DefaultSleep">No time for lounging about now.</template>
  <template name="wait">^wait$</template>
  <template name="DefaultWait">Time passes.</template>
  <template name="xyzzy">^xyzzy$</template>
  <template name="DefaultXyzzy">Surprisingly, absolutely nothing happens.</template>
  <template name="help">^help$|^\?$</template>
  <template name="DefaultHelp"><![CDATA[<u>Quick Help</u><br/><br/>
<b>- Objects:</b>  Try LOOK AT..., SPEAK TO..., TAKE..., DROP..., OPEN..., GIVE... TO..., USE... ON/WITH...<br/>
<b>- Inventory:</b>  See which items you are carrying by typing I, INV or INVENTORY.<br/>
<b>- Moving around:</b>  Press the compass buttons, or type GO NORTH, SOUTH, E, GO TO...<br/>
<b>- Shortcuts:</b>  Press the up arrow and down arrow to scroll through commands you have already typed in. Try X... as a shortcut for LOOK AT...]]></template>
  <template name="LanguageSpecificObjectTypes"></template>
  <template name="EditorVerbDefaultExpression">"You can't #verb# " + object.article + "."</template>
  <template name="EditorImageFormats">*.jpg;*.jpeg;*.png;*.gif</template>
  <template name="HTMLColorNames">AliceBlue;AntiqueWhite;Aqua;Aquamarine;Azure;Beige;Bisque;Black;BlanchedAlmond;Blue;BlueViolet;Brown;BurlyWood;CadetBlue;Chartreuse;Chocolate;Coral;CornflowerBlue;Cornsilk;Crimson;Cyan;DarkBlue;DarkCyan;DarkGoldenRod;DarkGray;DarkGrey;DarkGreen;DarkKhaki;DarkMagenta;DarkOliveGreen;Darkorange;DarkOrchid;DarkRed;DarkSalmon;DarkSeaGreen;DarkSlateBlue;DarkSlateGray;DarkSlateGrey;DarkTurquoise;DarkViolet;DeepPink;DeepSkyBlue;DimGray;DimGrey;DodgerBlue;FireBrick;FloralWhite;ForestGreen;Fuchsia;Gainsboro;GhostWhite;Gold;GoldenRod;Gray;Grey;Green;GreenYellow;HoneyDew;HotPink;IndianRed ;Indigo ;Ivory;Khaki;Lavender;LavenderBlush;LawnGreen;LemonChiffon;LightBlue;LightCoral;LightCyan;LightGoldenRodYellow;LightGray;LightGrey;LightGreen;LightPink;LightSalmon;LightSeaGreen;LightSkyBlue;LightSlateGray;LightSlateGrey;LightSteelBlue;LightYellow;Lime;LimeGreen;Linen;Magenta;Maroon;MediumAquaMarine;MediumBlue;MediumOrchid;MediumPurple;MediumSeaGreen;MediumSlateBlue;MediumSpringGreen;MediumTurquoise;MediumVioletRed;MidnightBlue;MintCream;MistyRose;Moccasin;NavajoWhite;Navy;OldLace;Olive;OliveDrab;Orange;OrangeRed;Orchid;PaleGoldenRod;PaleGreen;PaleTurquoise;PaleVioletRed;PapayaWhip;PeachPuff;Peru;Pink;Plum;PowderBlue;Purple;Red;RosyBrown;RoyalBlue;SaddleBrown;Salmon;SandyBrown;SeaGreen;SeaShell;Sienna;Silver;SkyBlue;SlateBlue;SlateGray;SlateGrey;Snow;SpringGreen;SteelBlue;Tan;Teal;Thistle;Tomato;Turquoise;Violet;Wheat;White;WhiteSmoke;Yellow;YellowGreen</template>
  <dynamictemplate name="TakeSuccessful">"You pick " + object.article + " up."</dynamictemplate>
  <dynamictemplate name="TakeUnsuccessful">"You can't take " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropSuccessful">"You drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropUnsuccessful">"You can't drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="AlreadyTaken">"You are already carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="NotCarrying">"You are not carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantUse">"You can't use " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSpeakTo">WriteVerb(object, "say") + " nothing."</dynamictemplate>
  <dynamictemplate name="ObjectNotOpen">CapFirst(GetDisplayAlias(object)) + " " + Conjugate(object, "be") + " not open."</dynamictemplate>
  <dynamictemplate name="AlreadyOpen">WriteVerb(object, "be") + " already open."</dynamictemplate>
  <dynamictemplate name="AlreadyClosed">WriteVerb(object, "be") + " already closed."</dynamictemplate>
  <dynamictemplate name="CantOpen">"You can't open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantClose">"You can't close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="OpenSuccessful">"You open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CloseSuccessful">"You close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="AlreadyThere">WriteVerb(object, "be") + " already there."</dynamictemplate>
  <dynamictemplate name="ObjectContains">WriteVerb(object, "contain")</dynamictemplate>
  <dynamictemplate name="ContainerFull">WriteVerb(object, "be") + " full."</dynamictemplate>
  <dynamictemplate name="DisambiguateMenu">"Please choose which '" + text + "' you mean:"</dynamictemplate>
  <dynamictemplate name="UndoTurn">"Undo: " + text</dynamictemplate>
  <dynamictemplate name="DefaultAsk">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="DefaultTell">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="LockedObject">WriteVerb(object, "be") + " locked."</dynamictemplate>
  <dynamictemplate name="AlreadyLocked">WriteVerb(object, "be") + " already locked."</dynamictemplate>
  <dynamictemplate name="AlreadyUnlocked">WriteVerb(object, "be") + " already unlocked."</dynamictemplate>
  <dynamictemplate name="CannotLockOpen">"You cannot lock " + object.article + " when " + object.gender + " " + Conjugate(object, "be") + " open."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOn">WriteVerb(object, "be") + " already switched on."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOff">WriteVerb(object, "be") + " already switched off."</dynamictemplate>
  <dynamictemplate name="SwitchedOn">"You switch " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="SwitchedOff">"You switch " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="ObjectDoesNotContain">CapFirst(GetDisplayAlias(object1)) + " " + Conjugate(object1, "do") + " not contain " + GetDisplayAlias(object2) + "."</dynamictemplate>
  <dynamictemplate name="YouLooking">"You are looking " + text +"."</dynamictemplate>
  <dynamictemplate name="DefaultBuy">"You can't buy " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultClimb">"You can't climb " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultDrink">"You can't drink " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultEat">"You can't eat " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultGive">WriteVerb(object1, "do") + " not want " + object2.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultHit">"You can't hit " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKill">"You can't kill " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKiss">"You can't kiss " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKnock">"You can't knock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLick">"You can't lick " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLie">"You can't lie on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultListenTo">"You listen, but " + object.article + " makes no sound."</dynamictemplate>
  <dynamictemplate name="DefaultLock">"You can't lock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultMove">"You can't move " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPull">"You can't pull " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPush">"You can't push " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultRead">"You can't read " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSearch">"You can't search " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultShow">"You can't show " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSit">"You can't sit on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSmell">"You sniff, but " + object.article + " doesn't smell of much."</dynamictemplate>
  <dynamictemplate name="DefaultTaste">"You can't taste " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultThrow">"You can't throw " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTie">"You can't tie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTouch">"You can't touch " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOn">"You can't turn " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOff">"You can't turn " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="DefaultTurn">"You can't turn " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUnlock">"You can't unlock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUntie">"You can't untie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUseOn">"You can't use " + object2.article + " that way."</dynamictemplate>
  <dynamictemplate name="DefaultWear">"You can't wear " + object.article + "."</dynamictemplate>
  <delegate name="AddScript" parameters="object" type="" />
  <delegate name="AssociatedScope" parameters="" type="objectlist" />
  <game name="The Spy">
    <displayroomdescriptiononstart type="boolean">false</displayroomdescriptiononstart>
    <timeelapsed type="int">22</timeelapsed>
    <lastobjects type="objectlist">screen1</lastobjects>
  </game>
  <command name="lookat">
    <pattern><![CDATA[^look at (?<object>.*)$|^x (?<object>.*)$|^examine (?<object>.*)$|^exam (?<object>.*)$|^ex (?<object>.*)$]]></pattern>
    <script type="script">
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (TypeOf(object, "look") = "script") {
        do (object, "look")
      }
      else {
        lookdesc = ""
        if (HasString(object, "look")) {
          lookdesc = object.look
        }
        if (LengthOf(lookdesc) = 0) {
          lookdesc = Template("DefaultObjectDescription")
        }
        if (GetBoolean(object, "switchedon")) {
          if (HasString(object, "switchedondesc")) {
            lookdesc = lookdesc + " " + object.switchedondesc
          }
        }
        else {
          if (HasString(object, "switchedoffdesc")) {
            lookdesc = lookdesc + " " + object.switchedoffdesc
          }
        }
        msg (lookdesc)
      }
      ListObjectContents (object)
    </script>
  </command>
  <command name="take">
    <pattern><![CDATA[^take (?<object>.*)$|^get (?<object>.*)$|^pick up (?<object>.*)$]]></pattern>
    <multiple type="AssociatedScope">
      return (ScopeVisibleNotHeldNotScenery() - player)
    </multiple>
    <script type="script">
      foreach (obj, object) {
        DoTake (obj, multiple)
      }
    </script>
  </command>
  <command name="drop">
    <pattern><![CDATA[^drop (?<object>.*)$]]></pattern>
    <multiple type="AssociatedScope">
      return (ScopeInventory())
    </multiple>
    <script type="script">
      foreach (obj, object) {
        DoDrop (obj, multiple)
      }
    </script>
  </command>
  <command name="use">
    <pattern><![CDATA[^use (?<object>.*)$]]></pattern>
    <script type="script">
      if (HasScript(object, "use")) {
        do (object, "use")
      }
      else {
        msg (DynamicTemplate("CantUse", object))
      }
    </script>
  </command>
  <command name="undo">
    <pattern>^undo$</pattern>
    <isundo />
    <script type="script">
      undo
    </script>
  </command>
  <command name="inventory">
    <pattern>^i$|^inv$|^inventory$</pattern>
    <script type="script">
      list = FormatObjectList(Template("CarryingListHeader"), player, Template("And"), ".", true)
      if (list = "") {
        msg (Template("NotCarryingAnything"))
      }
      else {
        msg (list)
      }
    </script>
  </command>
  <command name="look">
    <pattern>^look$</pattern>
    <script type="script">
      ShowRoomDescription
    </script>
  </command>
  <command name="lookdir">
    <pattern><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <script type="script"><![CDATA[
      if (HasScript(exit, "look")) {
        do (exit, "look")
      }
      else {
        message = DynamicTemplate("YouLooking",exit.alias)
        if (HasString(exit, "look")) {
          if (exit.look <> "") {
            message = exit.look
          }
        }
        if (exit.locked) {
          if (HasString(exit,"lockmessage")) {
            lockmessage = exit.lockmessage
          }
          else {
            lockmessage = Template("LockedExit")
          }
          msg (message+" "+lockmessage)
        }
        else {
          msg (message)
        }
      }
    ]]></script>
  </command>
  <command name="quit">
    <pattern>^quit$</pattern>
    <script type="script">
      request (Quit, "")
    </script>
  </command>
  <command name="go">
    <pattern><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <unresolved>You can't go there.</unresolved>
    <script type="script">
      if (exit.locked) {
        msg (exit.lockmessage)
      }
      else if (HasScript(exit, "script")) {
        do (exit, "script")
      }
      else {
        if (exit.lookonly) {
          msg ("You can't go there.")
        }
        else {
          player.parent = exit.to
        }
      }
    </script>
  </command>
  <command name="open">
    <pattern><![CDATA[^open (?<object>.*)$]]></pattern>
    <script type="script">
      TryOpenClose (true, object)
    </script>
  </command>
  <command name="close">
    <pattern><![CDATA[^close (?<object>.*)$]]></pattern>
    <script type="script">
      TryOpenClose (false, object)
    </script>
  </command>
  <command name="put">
    <pattern><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></pattern>
    <script type="script">
      if (object1.parent = object2) {
        msg (DynamicTemplate("AlreadyThere", object1))
      }
      else if (not ListContains(ScopeInventory(), object1)) {
        msg (DynamicTemplate("NotCarrying", object1))
      }
      else if (not ListContains(ScopeReachable(), object1)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object1)))
      }
      else if (not ListContains(ScopeReachable(), object2)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)))
      }
      else if (not object2.container) {
        msg (Template("CannotDoThat"))
      }
      else if (not object2.isopen) {
        msg (DynamicTemplate("ObjectNotOpen", object2))
      }
      else {
        if (GetBoolean(object2, "hidechildren")) {
          object2.hidechildren = false
        }
        if (HasDelegateImplementation(object2, "addscript")) {
          rundelegate (object2, "addscript", object1)
        }
        else {
          object1.parent = object2
          msg (Template("Done"))
        }
      }
    </script>
  </command>
  <command name="removefrom">
    <pattern><![CDATA[^remove (?<object1>.*) from (?<object2>.*)$]]></pattern>
    <script type="script">
      if (not Contains(object2, object1)) {
        msg (DynamicTemplate("ObjectDoesNotContain", object2, object1))
      }
      else {
        DoTake (object1, false)
      }
    </script>
  </command>
  <command name="give">
    <pattern><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></pattern>
    <script type="script">
      handled = false
      if (HasString(object2, "give")) {
        msg (object2.give)
        handled = true
      }
      else if (typeof(object2, "give") = "scriptdictionary") {
        if (DictionaryContains(object2.give, object1.name)) {
          invoke (ScriptDictionaryItem(object2.give, object1.name))
          handled = true
        }
      }
      if (not handled) {
        msg (DynamicTemplate("DefaultGive", object2, object1))
      }
    </script>
  </command>
  <command name="useon">
    <pattern><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>
    <script type="script">
      handled = false
      if (HasString(object2, "useon")) {
        msg (object2.useon)
        handled = true
      }
      else if (typeof(object2, "useon") = "scriptdictionary") {
        if (DictionaryContains(object2.useon, object1.name)) {
          invoke (ScriptDictionaryItem(object2.useon, object1.name))
          handled = true
        }
      }
      if (not handled) {
        msg (DynamicTemplate("DefaultUseOn", object2, object1))
      }
    </script>
  </command>
  <command name="ask">
    <pattern><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></pattern>
    <script type="script">
      DoAskTell (object, text, "ask", "askdefault", "DefaultAsk")
    </script>
  </command>
  <command name="tell">
    <pattern><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></pattern>
    <script type="script">
      DoAskTell (object, text, "tell", "telldefault", "DefaultTell")
    </script>
  </command>
  <command name="oops">
    <pattern><![CDATA[^oops (?<text>.*)$]]></pattern>
    <isoops />
    <script type="script"><![CDATA[
      hasoops = false
      if (HasAttribute(game, "unresolvedcommand")) {
        if (game.unresolvedcommand <> null) {
          hasoops = true
        }
      }
      if (not hasoops) {
        msg (Template("DefaultOops"))
      }
      else {
        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)
        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)
        HandleSingleCommandPattern ("", game.unresolvedcommand, game.unresolvedcommandvarlist)
      }
    ]]></script>
  </command>
  <verb name="speak">
    <property>speak</property>
    <pattern><![CDATA[^speak to (?<object>.*)$|^speak (?<object>.*)$|^talk to (?<object>.*)$|^talk (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultSpeakTo</defaulttemplate>
  </verb>
  <verb name="buy">
    <property>buy</property>
    <pattern><![CDATA[^buy (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultBuy</defaulttemplate>
  </verb>
  <verb name="climb">
    <property>climb</property>
    <pattern><![CDATA[^climb (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultClimb</defaulttemplate>
  </verb>
  <verb name="drink">
    <property>drink</property>
    <pattern><![CDATA[^drink (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultDrink</defaulttemplate>
  </verb>
  <verb name="eat">
    <property>eat</property>
    <pattern><![CDATA[^eat (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultEat</defaulttemplate>
  </verb>
  <verb name="hit">
    <property>hit</property>
    <pattern><![CDATA[^hit (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultHit</defaulttemplate>
  </verb>
  <verb name="kill">
    <property>kill</property>
    <pattern><![CDATA[^kill (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultKill</defaulttemplate>
  </verb>
  <verb name="kiss">
    <property>kiss</property>
    <pattern><![CDATA[^kiss (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultKiss</defaulttemplate>
  </verb>
  <verb name="knock">
    <property>knock</property>
    <pattern><![CDATA[^knock (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultKnock</defaulttemplate>
  </verb>
  <verb name="lick">
    <property>lick</property>
    <pattern><![CDATA[^lick (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultLick</defaulttemplate>
  </verb>
  <verb name="lieon">
    <property>lie</property>
    <pattern><![CDATA[^lie on (?<object>.*)$|^lie upon (?<object>.*)$|^lie down on (?<object>.*)$|^lie down upon (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultLie</defaulttemplate>
  </verb>
  <verb name="listento">
    <property>listen</property>
    <pattern><![CDATA[^listen to (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultListenTo</defaulttemplate>
  </verb>
  <verb name="lock">
    <property>lock</property>
    <pattern><![CDATA[^lock (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultLock</defaulttemplate>
  </verb>
  <verb name="move">
    <property>move</property>
    <pattern><![CDATA[^move (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultMove</defaulttemplate>
  </verb>
  <verb name="pull">
    <property>pull</property>
    <pattern><![CDATA[^pull (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultPull</defaulttemplate>
  </verb>
  <verb name="push">
    <property>push</property>
    <pattern><![CDATA[^push (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultPush</defaulttemplate>
  </verb>
  <verb name="read">
    <property>read</property>
    <pattern><![CDATA[^read (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultRead</defaulttemplate>
  </verb>
  <verb name="search">
    <property>search</property>
    <pattern><![CDATA[^search (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultSearch</defaulttemplate>
  </verb>
  <verb name="show">
    <property>show</property>
    <pattern><![CDATA[^show (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultShow</defaulttemplate>
  </verb>
  <verb name="siton">
    <property>sit</property>
    <pattern><![CDATA[^sit on (?<object>.*)$|^sit upon (?<object>.*)$|^sit down on (?<object>.*)$|^sit down upon (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultSit</defaulttemplate>
  </verb>
  <verb name="smell">
    <property>smell</property>
    <pattern><![CDATA[^smell (?<object>.*)$|^sniff (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultSmell</defaulttemplate>
  </verb>
  <verb name="taste">
    <property>taste</property>
    <pattern><![CDATA[^taste (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultTaste</defaulttemplate>
  </verb>
  <verb name="throw">
    <property>throw</property>
    <pattern><![CDATA[^throw (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultThrow</defaulttemplate>
  </verb>
  <verb name="tie">
    <property>tie</property>
    <pattern><![CDATA[^tie (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultTie</defaulttemplate>
  </verb>
  <verb name="touch">
    <property>touch</property>
    <pattern><![CDATA[^touch (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultTouch</defaulttemplate>
  </verb>
  <verb name="turnon">
    <property>turnon</property>
    <pattern><![CDATA[^turn on (?<object>.*)$|^turn (?<object>.*) on$|^switch on (?<object>.*)$|^switch (?<object>.*) on$]]></pattern>
    <defaulttemplate>DefaultTurnOn</defaulttemplate>
  </verb>
  <verb name="turnoff">
    <property>turnoff</property>
    <pattern><![CDATA[^turn off (?<object>.*)$|^turn (?<object>.*) off$|^switch off (?<object>.*)$|^switch (?<object>.*) off$]]></pattern>
    <defaulttemplate>DefaultTurnOff</defaulttemplate>
  </verb>
  <verb name="turn">
    <property>turn</property>
    <pattern><![CDATA[^turn (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultTurn</defaulttemplate>
  </verb>
  <verb name="unlock">
    <property>unlock</property>
    <pattern><![CDATA[^unlock (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultUnlock</defaulttemplate>
  </verb>
  <verb name="untie">
    <property>untie</property>
    <pattern><![CDATA[^untie (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultUntie</defaulttemplate>
  </verb>
  <verb name="wear">
    <property>wear</property>
    <pattern><![CDATA[^wear (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultWear</defaulttemplate>
  </verb>
  <command name="listen">
    <pattern>^listen$</pattern>
    <script type="script">
      msg (Template("DefaultListen"))
    </script>
  </command>
  <command name="jump">
    <pattern>^jump$</pattern>
    <script type="script">
      msg (Template("DefaultJump"))
    </script>
  </command>
  <command name="sit">
    <pattern>^sit$|^sit down$</pattern>
    <script type="script">
      msg (Template("DefaultSitDown"))
    </script>
  </command>
  <command name="lie">
    <pattern>^lie$|^lie down$</pattern>
    <script type="script">
      msg (Template("DefaultLieDown"))
    </script>
  </command>
  <command name="sleep">
    <pattern>^sleep$|^rest$</pattern>
    <script type="script">
      msg (Template("DefaultSleep"))
    </script>
  </command>
  <command name="wait">
    <pattern>^wait$</pattern>
    <script type="script">
      msg (Template("DefaultWait"))
    </script>
  </command>
  <command name="xyzzy">
    <pattern>^xyzzy$</pattern>
    <script type="script">
      msg (Template("DefaultXyzzy"))
    </script>
  </command>
  <command name="help">
    <pattern>^help$|^\?$</pattern>
    <script type="script">
      msg (Template("DefaultHelp"))
    </script>
  </command>
  <object name="room">
    <inherit name="editor_room" />
    <description>You are in a dark room. It is illuminated by a singlelamp. The walls and floors are cold steel.</description>
    <visited />
    <object name="player">
      <inherit name="defaultplayer" />
    </object>
    <exit alias="south" to="office">
      <inherit name="southdirection" />
    </exit>
    <object name="screen1">
      <inherit name="switchable" />
      <inherit name="editor_object" />
      <alias>screen</alias>
      <look>It's a large screen bulit into the wall.</look>
      <switchonmsg>You switch the screen on. A message types up saying, "Agent Williams, you have been called back into action. Do not be alarmed. The folder will contain all information need. You will be further informed by Agent Branson."</switchonmsg>
      <switchoffmsg>You switch off the screen, returning it to the MI5 logo.</switchoffmsg>
      <switchedondesc>It currently shows a message from the higher-ups</switchedondesc>
      <switchedoffdesc>It is currently showing the MI5 logo.</switchedoffdesc>
      <switchedon />
      <displayverbs type="list">Look at; Take; Switch on; Switch off</displayverbs>
      <watch type="script">
        if (IsSwitchedOn(screen1)) {
          msg ("A message shows up on the screen. It says, \"Agent Williams, you have been called back into action. Information on your mssion will be featured in the mission folder on the table. Agent Branson will inform you further.\"")
        }
        else {
          msg ("The screen is showing the MI5 logo.")
        }
      </watch>
    </object>
    <object name="table">
      <inherit name="container_open" />
      <inherit name="editor_object" />
      <look>It's a cold steel table. Your beaten face reflects in the surface.</look>
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <displayverbs type="list">Look at; Take; Open; Close</displayverbs>
    </object>
    <object name="chair">
      <inherit name="editor_object" />
      <look>A steel chair. Very unimaginative. You woke up on that chair.</look>
      <sit>It's not comfortable. You wish you were back at home.</sit>
    </object>
    <object name="mission folder">
      <inherit name="editor_object" />
      <read>You read the mission file. It doesn't say much only that it's a recon mission to north Russia.</read>
      <look>A beige folder marked "CONFIDENTIAL". It may contain some information on your current situation.</look>
      <alt type="list">folder</alt>
      <take />
      <takemsg>You take the folder for future reading.</takemsg>
    </object>
    <object name="Branson">
      <inherit name="male" />
      <inherit name="editor_object" />
      <look>An old friend of yours. One of the best agents in the job. At least when he's not unconscious.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
    <object name="lamp">
      <inherit name="switchable" />
      <inherit name="editor_object" />
      <switchedon />
      <switchonmsg>The lamp gives some slight illumination.</switchonmsg>
      <switchoffmsg>You are plunged into darkness.</switchoffmsg>
      <switchedondesc>The lamp is the only source of light in the room.</switchedondesc>
      <switchedoffdesc>A lamp that is currently switched off.</switchedoffdesc>
      <displayverbs type="list">Look at; Take; Switch on; Switch off</displayverbs>
    </object>
  </object>
  <object name="office">
    <inherit name="editor_room" />
    <exit alias="north" to="room">
      <inherit name="northdirection" />
    </exit>
  </object>
  <verb>
    <property>watch</property>
    <pattern><![CDATA[^watch (?<object>.*)$]]></pattern>
    <defaultexpression>"You can't watch " + object.article + "."</defaultexpression>
  </verb>
  <type name="defaultverb">
    <script type="script">
      switch (TypeOf(object, this.property)) {
        case ("script") {
          do (object, this.property)
        }
        case ("string") {
          msg (GetString(object, this.property))
        }
        case ("null") {
          if (not this.defaulttext = null) {
            msg (this.defaulttext)
          }
          else if (not this.defaulttemplate = null) {
            msg (DynamicTemplate(this.defaulttemplate, object))
          }
          else if (not this.defaultexpression = null) {
            params = NewDictionary()
            dictionary add (params, "object", object)
            msg (Eval(this.defaultexpression, params))
          }
          else {
            error ("No verb response defined")
          }
        }
        default {
          error ("No verb response defined")
        }
      }
    </script>
  </type>
  <type name="defaultgame">
    <enablehyperlinks />
    <showdescriptiononenter />
    <autodescription />
    <defaultfont>Arial</defaultfont>
    <defaultfontsize type="int">9</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <compassdirections type="list">northwest; north; northeast; west; east; southwest; south; southeast; up; down; in; out</compassdirections>
    <useframe type="boolean">false</useframe>
    <clearframe type="boolean">false</clearframe>
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="list">all; everything</allobjects>
    <parserignoreprefixes type="list">the; a; an</parserignoreprefixes>
    <displayroomdescriptiononstart />
    <showpanes />
  </type>
  <type name="defaultobject">
    <displayverbs type="list">Look at; Take</displayverbs>
    <inventoryverbs type="list">Look at; Use; Drop</inventoryverbs>
    <take type="boolean">false</take>
    <drop />
    <gender>it</gender>
    <article>it</article>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>You are in</descprefix>
    <objectslistprefix>You can see</objectslistprefix>
    <exitslistprefix>You can go</exitslistprefix>
    <contentsprefix>containing</contentsprefix>
    <description type="string"></description>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix />
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
  </type>
  <type name="defaultexit">
    <displayverbs type="list">Go to</displayverbs>
    <locked type="boolean">false</locked>
    <lockmessage>That way is locked.</lockmessage>
    <lookonly type="boolean">false</lookonly>
  </type>
  <type name="direction">
    <displayverbs type="list">Go</displayverbs>
  </type>
  <type name="compassdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
  </type>
  <type name="updowndirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
  </type>
  <type name="inoutdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
  </type>
  <type name="northwestdirection">
    <inherit name="compassdirection" />
    <alias>northwest</alias>
    <alt type="list">nw</alt>
  </type>
  <type name="northdirection">
    <inherit name="compassdirection" />
    <alias>north</alias>
    <alt type="list">n</alt>
  </type>
  <type name="northeastdirection">
    <inherit name="compassdirection" />
    <alias>northeast</alias>
    <alt type="list">ne</alt>
  </type>
  <type name="westdirection">
    <inherit name="compassdirection" />
    <alias>west</alias>
    <alt type="list">w</alt>
  </type>
  <type name="eastdirection">
    <inherit name="compassdirection" />
    <alias>east</alias>
    <alt type="list">e</alt>
  </type>
  <type name="southwestdirection">
    <inherit name="compassdirection" />
    <alias>southwest</alias>
    <alt type="list">sw</alt>
  </type>
  <type name="southdirection">
    <inherit name="compassdirection" />
    <alias>south</alias>
    <alt type="list">s</alt>
  </type>
  <type name="southeastdirection">
    <inherit name="compassdirection" />
    <alias>southeast</alias>
    <alt type="list">se</alt>
  </type>
  <type name="updirection">
    <inherit name="updowndirection" />
    <alias>up</alias>
    <alt type="list">u</alt>
  </type>
  <type name="downdirection">
    <inherit name="updowndirection" />
    <alias>down</alias>
    <alt type="list">d</alt>
  </type>
  <type name="indirection">
    <inherit name="inoutdirection" />
    <alias>in</alias>
    <alt type="list"></alt>
  </type>
  <type name="outdirection">
    <inherit name="inoutdirection" />
    <alias>out</alias>
    <alt type="list">o</alt>
  </type>
  <type name="defaultcommand">
    <pattern>^$</pattern>
  </type>
  <type name="male">
    <displayverbs type="list">Look at; Speak to</displayverbs>
    <gender>he</gender>
    <article>him</article>
  </type>
  <type name="female">
    <displayverbs type="list">Look at; Speak to</displayverbs>
    <gender>she</gender>
    <article>her</article>
  </type>
  <type name="plural">
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="maleplural">
    <displayverbs type="list">Look at; Speak to</displayverbs>
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="femaleplural">
    <displayverbs type="list">Look at; Speak to</displayverbs>
    <gender>they</gender>
    <article>them</article>
  </type>
  <type name="openable">
    <open />
    <close />
  </type>
  <type name="container_base">
    <container />
  </type>
  <type name="container_closed">
    <inherit name="container_base" />
    <open />
    <close />
  </type>
  <type name="container_open">
    <inherit name="container_base" />
    <isopen />
    <open />
    <close />
  </type>
  <type name="surface">
    <inherit name="container_base" />
    <isopen />
    <transparent />
    <contentsprefix>on which there is</contentsprefix>
  </type>
  <type name="container">
    <inherit name="container_open" />
  </type>
  <type name="container_limited">
    <inherit name="container" />
    <maxobjects type="int">1</maxobjects>
    <addscript type="AddScript"><![CDATA[
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        if (HasString(this, "containerfullmessage")) {
          msg (this.containerfullmessage)
        }
        else {
          msg (DynamicTemplate("ContainerFull", this))
        }
      }
      else {
        object.parent = this
        msg (Template("Done"))
      }
    ]]></addscript>
  </type>
  <type name="container_lockable">
    <locked />
    <nokeymessage>You do not have the key.</nokeymessage>
    <unlockmessage>Unlocked.</unlockmessage>
    <lockmessage>Locked.</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen />
    <autounlock />
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and ListContains(ScopeInventory(), this.key)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
  </type>
  <type name="defaultplayer">
    <alias>me</alias>
    <alt type="list">myself; self</alt>
    <scenery />
    <look>Looking good.</look>
    <gender>you</gender>
    <article>yourself</article>
    <changedparent type="script">
      OnEnterRoom
    </changedparent>
  </type>
  <type name="switchable">
    <switchedon type="boolean">false</switchedon>
    <turnon type="script">
      if (this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOn", this))
      }
      else {
        if (HasString(this, "switchonmsg")) {
          msg (this.switchonmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOn", this))
        }
        this.switchedon = true
      }
    </turnon>
    <turnoff type="script">
      if (not this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOff", this))
      }
      else {
        if (HasString(this, "switchoffmsg")) {
          msg (this.switchoffmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOff", this))
        }
        this.switchedon = false
      }
    </turnoff>
  </type>
  <type name="editor_room" />
  <type name="editor_object" />
  <function name="GetDefaultPrefix" parameters="obj" type="string"><![CDATA[
    if (Instr("aeiou", Left(GetDisplayAlias(obj), 1)) > 0) {
      return ("an")
    }
    else {
      return ("a")
    }
  ]]></function>
  <function name="WriteVerb" parameters="obj, verb" type="string">
    return (CapFirst(obj.gender) + " " + Conjugate(obj, verb))
  </function>
  <function name="Conjugate" parameters="obj, verb" type="string">
    gender = obj.gender
    if (gender = "he" or gender = "she") {
      gender = "it"
    }
    switch (verb) {
      case ("be") {
        switch (gender) {
          case ("i") {
            return ("am")
          }
          case ("you") {
            return ("are")
          }
          case ("it") {
            return ("is")
          }
          case ("we") {
            return ("are")
          }
          case ("they") {
            return ("are")
          }
          default {
            return ("is")
          }
        }
      }
      case ("do") {
        switch (gender) {
          case ("i") {
            return ("do")
          }
          case ("you") {
            return ("do")
          }
          case ("it") {
            return ("does")
          }
          case ("we") {
            return ("do")
          }
          case ("they") {
            return ("do")
          }
          default {
            return ("do")
          }
        }
      }
      default {
        if (gender = "it") {
          return (verb + "s")
        }
        else {
          return (verb)
        }
      }
    }
  </function>
  <function name="ListObjectContents" parameters="object"><![CDATA[
    if (GetBoolean(object, "isopen") and GetBoolean(object, "listchildren")) {
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (HasString(object, "listchildrenprefix")) {
        listprefix = object.listchildrenprefix
      }
      else {
        listprefix = DynamicTemplate("ObjectContains", object)
      }
      list = FormatObjectList(listprefix, object, Template("And"), ".", false)
      if (list <> "") {
        msg (list)
      }
    }
  ]]></function>
  <function name="DoTake" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (object.parent = player) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      takemsg = object.takemsg
      switch (TypeOf(object, "take")) {
        case ("script") {
          if (ismultiple) {
            msg (prefix)
          }
          do (object, "take")
          takemsg = ""
        }
        case ("boolean") {
          if (object.take = true) {
            object.parent = player
            if (takemsg = null) {
              takemsg = DynamicTemplate("TakeSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = player
          takemsg = object.take
        }
        default {
          found = false
        }
      }
      if (not found and takemsg = null) {
        takemsg = DynamicTemplate("TakeUnsuccessful", object)
      }
      if (LengthOf(takemsg) > 0) {
        msg (prefix + takemsg)
      }
      if (HasScript(object, "ontake")) {
        do (object, "ontake")
      }
    }
  ]]></function>
  <function name="DoDrop" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (not ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("NotCarrying", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      dropmsg = object.dropmsg
      switch (TypeOf(object, "drop")) {
        case ("script") {
          if (ismultiple) {
            msg (prefix)
          }
          do (object, "drop")
          dropmsg = ""
        }
        case ("boolean") {
          if (object.drop = true) {
            object.parent = player.parent
            if (dropmsg = null) {
              dropmsg = DynamicTemplate("DropSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = player.parent
          dropmsg = object.drop
        }
        default {
          found = false
        }
      }
      if (not found and dropmsg = null) {
        dropmsg = DynamicTemplate("DropUnsuccessful", object)
      }
      if (LengthOf(dropmsg) > 0) {
        msg (prefix + dropmsg)
      }
      if (HasScript(object, "ondrop")) {
        do (object, "ondrop")
      }
    }
  ]]></function>
  <function name="TryOpenClose" parameters="open, object">
    if (open) {
      action = "open"
      scriptaction = "openscript"
    }
    else {
      action = "close"
      scriptaction = "closescript"
    }
    if (not ListContains(ScopeReachable(), object)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = false
      if (GetBoolean(object, action)) {
        if (open) {
          if (object.isopen) {
            msg (DynamicTemplate("AlreadyOpen", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              OpenObject (object)
            }
          }
        }
        else {
          if (not object.isopen) {
            msg (DynamicTemplate("AlreadyClosed", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              CloseObject (object)
            }
          }
        }
      }
      else {
        if (open) {
          msg (DynamicTemplate("CantOpen", object))
        }
        else {
          msg (DynamicTemplate("CantClose", object))
        }
      }
    }
  </function>
  <function name="OpenObject" parameters="object">
    if (HasString(object, "openmsg")) {
      msg (object.openmsg)
    }
    else {
      msg (DynamicTemplate("OpenSuccessful", object))
    }
    object.isopen = true
    ListObjectContents (object)
  </function>
  <function name="CloseObject" parameters="object">
    if (HasString(object, "closemsg")) {
      msg (object.closemsg)
    }
    else {
      msg (DynamicTemplate("CloseSuccessful", object))
    }
    object.isopen = false
  </function>
  <function name="DoAskTell" parameters="object, text, property, defaultscript, defaulttemplate"><![CDATA[
    handled = false
    maxstrength = 0
    match = null
    text = LCase(text)
    if (typeof(object, property) = "scriptdictionary") {
      dictionary = GetAttribute(object, property)
      foreach (keywords, dictionary) {
        strength = GetKeywordsMatchStrength(LCase(keywords), text)
        if (strength >= maxstrength) {
          match = ScriptDictionaryItem(dictionary, keywords)
          maxstrength = strength
        }
      }
      if (match <> null) {
        invoke (match)
        handled = true
      }
    }
    if (not handled) {
      if (HasScript(object, defaultscript)) {
        do (object, defaultscript)
      }
      else {
        msg (DynamicTemplate(defaulttemplate, object))
      }
    }
  ]]></function>
  <function name="GetKeywordsMatchStrength" parameters="keywords, input" type="int">
    keywordlist = Split(keywords, " ")
    inputlist = Split(input, " ")
    strength = 0
    foreach (word, inputlist) {
      foreach (keyword, keywordlist) {
        if (StartsWith(word, keyword)) {
          strength = strength + LengthOf(keyword)
        }
      }
    }
    return (strength)
  </function>
  <function name="CompareNames" parameters="name, value, obj, fullmatches, partialmatches"><![CDATA[
    if (name = value) {
      if (not ListContains(fullmatches, obj)) {
        list add (fullmatches, obj)
      }
    }
    else {
      if (StartsWith(name, value)) {
        if (not ListContains(partialmatches, obj)) {
          list add (partialmatches, obj)
        }
      }
      else {
        if (Instr(name, " " + value) > 0) {
          if (not ListContains(partialmatches, obj)) {
            list add (partialmatches, obj)
          }
        }
      }
    }
  ]]></function>
  <function name="GenerateMenuChoices" parameters="dictionary, objects">
    foreach (obj, objects) {
      dictionary add (dictionary, obj.name, GetDisplayAlias(obj))
    }
  </function>
  <function name="ResolveName" parameters="value, objtype" type="object">
    result = ResolveNameInternal(value, objtype)
    if (not result = null) {
      return (result)
    }
    else {
      foreach (prefix, game.parserignoreprefixes) {
        if (StartsWith(value, prefix + " ")) {
          result = ResolveNameInternal(Mid(value, LengthOf(prefix) + 1), objtype)
        }
      }
      return (result)
    }
  </function>
  <function name="ResolveNameInternal" parameters="value, objtype" type="object">
    fullmatches = NewObjectList()
    partialmatches = NewObjectList()
    if (objtype = "object") {
      scope = ScopeVisible()
    }
    else if (objtype = "exit") {
      scope = ScopeExitsAll()
    }
    value = Trim(value)
    foreach (obj, scope) {
      name = LCase(GetDisplayAlias(obj))
      CompareNames (name, value, obj, fullmatches, partialmatches)
      if (not obj.alt = null) {
        foreach (altname, obj.alt) {
          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
        }
      }
    }
    if (not game.lastobjects = null) {
      foreach (obj, game.lastobjects) {
        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)
        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)
      }
    }
    if (ListCount(fullmatches) = 1) {
      return (ListItem(fullmatches, 0))
    }
    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {
      return (ListItem(partialmatches, 0))
    }
    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {
      return (null)
    }
    else {
      menu = NewStringDictionary()
      GenerateMenuChoices (menu, fullmatches)
      GenerateMenuChoices (menu, partialmatches)
      result = ShowMenu(DynamicTemplate("DisambiguateMenu", value), menu, true)
      if (result = null) {
        return (null)
      }
      else {
        return (GetObject(result))
      }
    }
  </function>
  <function name="ResolveNameList" parameters="value, scope, objtype, resultdictionary" type="objectlist"><![CDATA[
    result = NewObjectList()
    isfinished = false
    inputlist = Split(value, ",")
    foreach (inputbase, inputlist) {
      inputlist2 = Split(inputbase, " " + Template("And") + " ")
      foreach (input, inputlist2) {
        if (not isfinished) {
          newitem = ResolveNameListItem(Trim(input), scope, objtype, resultdictionary)
          if (newitem = null) {
            isfinished = true
            result = null
          }
          else {
            result = result + newitem
          }
        }
      }
    }
    if (result <> null) {
      if (ListCount(result) > 1) {
        if (not DictionaryContains(resultdictionary, "multiple")) {
          dictionary add (resultdictionary, "multiple", true)
        }
      }
    }
    return (result)
  ]]></function>
  <function name="ResolveNameListItem" parameters="value, scope, objtype, resultdictionary" type="objectlist">
    if (ListContains(game.allobjects, value)) {
      if (not DictionaryContains(resultdictionary, "multiple")) {
        dictionary add (resultdictionary, "multiple", true)
      }
      return (scope)
    }
    else {
      object = ResolveName(value, objtype)
      if (object = null) {
        return (null)
      }
      else {
        result = NewObjectList()
        list add (result, object)
        return (result)
      }
    }
  </function>
  <function name="HandleCommand" parameters="command"><![CDATA[
    commands = Split(command, ".")
    foreach (command, commands) {
      command = Trim(command)
      if (LengthOf(command) > 0) {
        HandleSingleCommand (command)
      }
    }
  ]]></function>
  <function name="HandleSingleCommand" parameters="command"><![CDATA[
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command)) {
        list add (candidates, cmd)
      }
    }
    maxstrength = -1
    thiscommand = null
    foreach (candidate, candidates) {
      strength = GetMatchStrength(candidate.pattern, command)
      if (strength >= maxstrength) {
        thiscommand = candidate
        maxstrength = strength
      }
    }
    if (thiscommand = null) {
      msg (Template("UnrecognisedCommand"))
    }
    else {
      varlist = Populate(thiscommand.pattern, command)
      HandleSingleCommandPattern (command, thiscommand, varlist)
    }
    RunTurnScripts
    UpdateStatusAttributes
  ]]></function>
  <function name="HandleSingleCommandPattern" parameters="command, thiscommand, varlist"><![CDATA[
    resolved = true
    resolvedelements = NewDictionary()
    resolvedobjects = NewObjectList()
    unresolvedobject = null
    foreach (var, varlist) {
      if (resolved) {
        value = LCase(StringDictionaryItem(varlist, var))
        result = null
        if (StartsWith(var, "object")) {
          if (HasDelegateImplementation(thiscommand, "multiple")) {
            result = ResolveNameList(value, RunDelegateFunction(thiscommand, "multiple"), "object", resolvedelements)
            if (not result = null) {
              foreach (obj, result) {
                list add (resolvedobjects, obj)
              }
            }
          }
          else {
            result = ResolveName(value, "object")
            if (not result = null) {
              list add (resolvedobjects, result)
            }
          }
        }
        else if (StartsWith(var, "exit")) {
          result = ResolveName(value, "exit")
        }
        else if (StartsWith(var, "text")) {
          result = StringDictionaryItem(varlist, var)
        }
        else {
          error ("Unhandled command variable '" + var + "'")
        }
        if (result = null) {
          resolved = false
          unresolvedobject = value
          unresolvedkey = var
        }
        else {
          dictionary add (resolvedelements, var, result)
        }
      }
    }
    game.lastobjects = resolvedobjects
    if (not DictionaryContains(resolvedelements, "multiple")) {
      dictionary add (resolvedelements, "multiple", false)
    }
    if (resolved) {
      if (not GetBoolean(thiscommand, "isundo")) {
        if (LengthOf(command) > 0) {
          start transaction (command)
        }
      }
      if (not GetBoolean(thiscommand, "isoops")) {
        game.unresolvedcommand = null
        game.unresolvedcommandvarlist = null
        game.unresolvedcommandkey = null
      }
      do (thiscommand, "script", resolvedelements)
    }
    else {
      if (HasString(thiscommand, "unresolved")) {
        if (ListCount(varlist) > 1) {
          msg (thiscommand.unresolved + " (" + unresolvedobject + ")")
        }
        else {
          msg (thiscommand.unresolved)
        }
      }
      else {
        if (ListCount(varlist) > 1) {
          msg (Template("UnresolvedObject") + " (" + unresolvedobject + ")")
        }
        else {
          msg (Template("UnresolvedObject"))
        }
      }
      game.unresolvedcommand = thiscommand
      game.unresolvedcommandvarlist = varlist
      game.unresolvedcommandkey = unresolvedkey
    }
  ]]></function>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ScopeVisibleNotHeldNotScenery() - player)
  </function>
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsVisible(player, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsReachable(player, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(player.parent))
  </function>
  <function name="ScopeVisibleNotHeldForRoom" parameters="room" type="objectlist">
    if (room = player.parent) {
      return (ScopeReachableNotHeldForRoom(room) + ScopeVisibleNotReachableForRoom(room) + player)
    }
    else {
      return (ScopeReachableNotHeldForRoom(room) + ScopeVisibleNotReachableForRoom(room))
    }
  </function>
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(player.parent))
  </function>
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" parameters="room" type="objectlist">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(player.parent))
  </function>
  <function name="ScopeReachableForRoom" parameters="room" type="objectlist">
    if (room = player.parent) {
      result = ScopeReachableNotHeldForRoom(room) + ScopeReachableInventory()
      list add (result, player)
    }
    else {
      result = ScopeReachableNotHeldForRoom(room)
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(player.parent))
  </function>
  <function name="ScopeVisibleNotReachableForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add (exclude, player)
    newParent = GetNonTransparentParent(room)
    foreach (obj, AllObjects()) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="GetNonTransparentParent" parameters="room" type="object">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>
  <function name="ScopeReachableNotHeld" type="objectlist">
    return (ScopeReachableNotHeldForRoom(player.parent))
  </function>
  <function name="ScopeReachableNotHeldForRoom" parameters="room" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsReachable(room, obj) and obj <> player and not Contains(player, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(player.parent))
  </function>
  <function name="ScopeVisibleForRoom" parameters="room" type="objectlist">
    if (room = player.parent) {
      return (ScopeVisibleNotHeldForRoom(room) + ScopeInventory())
    }
    else {
      return (ScopeVisibleNotHeldForRoom(room))
    }
  </function>
  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(player.parent))
  </function>
  <function name="ScopeExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room and not GetBoolean(exit, "lookonly")) {
        list add (result, exit)
      }
    }
    return (result)
  </function>
  <function name="ScopeExitsAll" type="objectlist">
    return (ScopeAllExitsForRoom(player.parent))
  </function>
  <function name="ScopeAllExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        list add (result, exit)
      }
    }
    return (result)
  </function>
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = player.parent) {
        list add (result, command)
      }
    }
    return (result)
  </function>
  <function name="GetBlockingObject" parameters="obj" type="object">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>
  <function name="ListParents" parameters="obj" type="objectlist"><![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      result = obj.parent + ListParents(obj.parent)
    }
    return (result)
  ]]></function>
  <function name="ContainsVisible" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>
  <function name="ContainsReachable" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>
  <function name="ContainsAccessible" parameters="parentObj, searchObj, onlyReachable" type="boolean">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      }
      else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        }
        else {
          return (false)
        }
      }
    }
  </function>
  <function name="CanSeeThrough" parameters="obj" type="boolean">
    return (GetBoolean(obj, "transparent") or CanReachThrough(obj))
  </function>
  <function name="CanReachThrough" parameters="obj" type="boolean">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="Got" parameters="obj" type="boolean">
    return (ListContains(ScopeInventory(), obj))
  </function>
  <function name="ShowRoomDescription"><![CDATA[
    if (HasScript(player.parent, "description")) {
      do (player.parent, "description")
    }
    else {
      if (game.autodescription) {
        youarein = player.parent.descprefix
        msg (youarein + " " + GetDisplayName(player.parent) + ".")
        desc = FormatObjectList(player.parent.objectslistprefix, GetNonTransparentParent(player.parent), Template("And"), ".", false)
        exits = FormatExitList(player.parent.exitslistprefix, ScopeExits(), Template("Or"), ".")
        fulldesc = ""
        if (LengthOf(desc) > 0) {
          fulldesc = desc
          if (LengthOf(exits) > 0) {
            fulldesc = fulldesc + "<br />"
          }
        }
        if (LengthOf(exits) > 0) {
          fulldesc = fulldesc + exits
        }
        if (LengthOf(fulldesc) > 0) {
          msg (fulldesc)
        }
      }
      fulldesc = ""
      if (HasString(player.parent, "description")) {
        if (LengthOf(player.parent.description) > 0) {
          fulldesc = player.parent.description
        }
      }
      if (game.appendobjectdescription) {
        foreach (val, ScopeVisibleNotHeld()) {
          if (HasString(val, "description")) {
            if (LengthOf(val.description) > 0 and val <> player) {
              fulldesc = fulldesc + " " + val.description
            }
          }
        }
      }
      if (LengthOf(fulldesc) > 0) {
        msg (fulldesc)
      }
    }
  ]]></function>
  <function name="OnEnterRoom"><![CDATA[
    game.displayroomdescriptiononstart = false
    if ((not GetBoolean(player.parent, "visited")) and HasScript(player.parent, "beforefirstenter")) {
      do (player.parent, "beforefirstenter")
    }
    request (UpdateLocation, CapFirst(GetDisplayName(player.parent)))
    if (game.useframe) {
      roomFrameExists = false
      if (HasString(player.parent, "picture")) {
        if (LengthOf(player.parent.picture) > 0) {
          roomFrameExists = true
          SetFramePicture (player.parent.picture)
        }
      }
      if (game.clearframe and not roomFrameExists) {
        ClearFramePicture
      }
    }
    if (game.showdescriptiononenter) {
      ShowRoomDescription
    }
    if ((not GetBoolean(player.parent, "visited")) and HasScript(player.parent, "firstenter")) {
      do (player.parent, "firstenter")
    }
    set (player.parent, "visited", true)
    if (HasScript(player.parent, "enter")) {
      do (player.parent, "enter")
    }
  ]]></function>
  <function name="FormatObjectList" parameters="preList, parent, preFinal, postList, useinventoryverbs" type="string"><![CDATA[
    result = ""
    count = 0
    list = RemoveSceneryObjects(GetDirectChildren(parent))
    listLength = ListCount(list)
    foreach (item, list) {
      if (LengthOf(result) = 0) {
        result = preList + " "
      }
      if (useinventoryverbs) {
        verbs = item.inventoryverbs
      }
      else {
        verbs = item.displayverbs
      }
      result = result + GetDisplayNameLink(item, "object", verbs)
      if (CanSeeThrough(item)) {
        result = result + FormatObjectList(" (" + item.contentsprefix, item, preFinal, ")", useinventoryverbs)
      }
      count = count + 1
      if (count = listLength - 1) {
        result = result + " " + preFinal + " "
      }
      else if (count < listLength) {
        result = result + ", "
      }
      else {
        result = result + postList
      }
    }
    return (result)
  ]]></function>
  <function name="GetDirectChildren" parameters="parent" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (obj.parent = parent and obj <> player) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveSceneryObjects" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.scenery) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="FormatExitList" parameters="preList, list, preFinal, postList" type="string"><![CDATA[
    result = ""
    count = 0
    listLength = ListCount(list)
    foreach (item, list) {
      if (LengthOf(result) = 0) {
        result = preList + " "
      }
      result = result + GetDisplayNameLink(item, "exit", item.displayverbs)
      count = count + 1
      if (count = listLength - 1) {
        result = result + " " + preFinal + " "
      }
      else if (count < listLength) {
        result = result + ", "
      }
      else {
        result = result + postList
      }
    }
    return (result)
  ]]></function>
  <function name="GetDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "alias")) {
      result = obj.alias
    }
    else {
      result = obj.name
    }
    return (result)
  </function>
  <function name="GetDisplayName" parameters="obj" type="string">
    return (GetDisplayNameLink(obj, "", null))
  </function>
  <function name="GetDisplayNameLink" parameters="obj, type, verbs" type="string"><![CDATA[
    result = GetTaggedName(obj, type, verbs)
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix)>0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      result = result + " " + obj.suffix
    }
    return (result)
  ]]></function>
  <function name="GetTaggedName" parameters="obj, type, verbs" type="string"><![CDATA[
    alias = GetDisplayAlias(obj)
    if (not game.enablehyperlinks) {
      type = ""
    }
    if (not type = "") {
      result = "<object"
      if (verbs <> null) {
        result = result + " verbs='" + Join(verbs, "/") + "'"
      }
      result = result + ">" + alias + "</object>"
    }
    else {
      result = alias
    }
    return (result)
  ]]></function>
  <function name="EnableTimer" parameters="timer">
    timer.enabled = true
    timer.trigger = game.timeelapsed + timer.interval
  </function>
  <function name="DisableTimer" parameters="timer">
    timer.enabled = false
  </function>
  <function name="SetTimerInterval" parameters="timer, interval">
    timer.interval = interval
  </function>
  <function name="SetTimerScript" parameters="timer, script">
    timer.script = script
  </function>
  <function name="SetTimeout" parameters="interval, script">
    timername = GetUniqueElementName("timeout")
    create timer (timername)
    timer = GetTimer(timername)
    SetTimerInterval (timer, interval)
    timer.timeoutscript = script
    SetTimerScript (timer) {
      this.enabled = false
      invoke (this.timeoutscript)
      destroy (this.name)
    }
    EnableTimer (timer)
  </function>
  <function name="Pause" parameters="interval">
    request (Pause, ToString(interval * 1000))
  </function>
  <function name="RunTurnScripts">
    foreach (turnscript, AllTurnScripts()) {
      if (GetBoolean(turnscript, "enabled")) {
        inscope = false
        if (turnscript.parent = game or turnscript.parent = null) {
          inscope = true
        }
        else {
          if (Contains(turnscript.parent, player)) {
            inscope = true
          }
        }
        if (inscope) {
          do (turnscript, "script")
        }
      }
    }
  </function>
  <function name="EnableTurnScript" parameters="turnscript">
    turnscript.enabled = true
  </function>
  <function name="DisableTurnScript" parameters="turnscript">
    turnscript.enabled = false
  </function>
  <function name="SetTurnScript" parameters="turnscript, script">
    turnscript.script = script
  </function>
  <function name="SetTurnTimeout" parameters="turncount, script"><![CDATA[
    turnscriptname = GetUniqueElementName("turnscript")
    create turnscript (turnscriptname)
    turnscript = GetObject(turnscriptname)
    turnscript.turncount = 0
    turnscript.triggerturncount = turncount
    turnscript.timeoutscript = script
    SetTurnScript (turnscript) {
      this.turncount = this.turncount + 1
      if (this.turncount >= this.triggerturncount) {
        this.enabled = false
        invoke (this.timeoutscript)
        destroy (this.name)
      }
    }
    EnableTurnScript (turnscript)
  ]]></function>
  <function name="UpdateStatusAttributes">
    status = AddStatusAttributesForElement("", game)
    status = AddStatusAttributesForElement(status, player)
    request (SetStatus, status)
  </function>
  <function name="AddStatusAttributesForElement" parameters="status, element" type="string"><![CDATA[
    if (element.statusattributes <> null) {
      foreach (attr, element.statusattributes) {
        if (LengthOf(status) > 0) {
          status = status + "\n"
        }
        status = status + FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(element.statusattributes, attr))
      }
    }
    return (status)
  ]]></function>
  <function name="FormatStatusAttribute" parameters="attr, value, format" type="string">
    if (LengthOf(format) = 0) {
      return (CapFirst(attr) + ": " + value)
    }
    else {
      if (TypeOf(value) = "int" or TypeOf(value) = "double") {
        value = ToString(value)
      }
      return (Replace(format, "!", value))
    }
  </function>
  <function name="SetFramePicture" parameters="filename"><![CDATA[
    if (game.useframe) {
      request (RunScript, "setFramePicture; " + GetFileURL(filename))
    }
    else {
      msg ("<color color=\"red\"><b>ERROR: The static picture frame is not enabled. You can enable this from the Display tab of the Game editor.</b></color>")
    }
  ]]></function>
  <function name="ClearFramePicture">
    request (RunScript, "clearFramePicture")
  </function>
  <function name="ClearScreen">
    request (ClearScreen, "")
  </function>
  <function name="SetForegroundColour" parameters="colour">
    request (Foreground, colour)
    game.defaultforeground = colour
  </function>
  <function name="SetBackgroundColour" parameters="colour">
    request (Background, colour)
    game.defaultbackground = colour
  </function>
  <function name="SetFontName" parameters="font">
    request (FontName, font)
    game.defaultfont = font
  </function>
  <function name="SetFontSize" parameters="size">
    request (FontSize, ToString(size))
    game.defaultfontsize = size
  </function>
  <function name="PrintCentered" parameters="text"><![CDATA[
    msg ("<align align=\"center\">" + text + "</align>")
  ]]></function>
  <function name="ShowYouTube" parameters="id">
    request (RunScript, "AddYouTube; " + id)
  </function>
  <function name="ShowVimeo" parameters="id">
    request (RunScript, "AddVimeo; " + id)
  </function>
  <function name="WaitForKeyPress">
    request (Wait, "")
  </function>
  <function name="DisplayHttpLink" parameters="text, url, https"><![CDATA[
    if (https) {
      url = "https://" + url
    }
    else {
      url = "http://" + url
    }
    msg ("<a href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="DisplayMailtoLink" parameters="text, url"><![CDATA[
    url = "mailto:" + url
    msg ("<a href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="InitInterface">
    request (FontName, game.defaultfont)
    request (FontSize, ToString(game.defaultfontsize))
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=Inventory")
    request (SetInterfaceString, "PlacesObjectsLabel=Places and Objects")
    request (SetInterfaceString, "CompassLabel=Compass")
    request (SetInterfaceString, "InButtonLabel=in")
    request (SetInterfaceString, "OutButtonLabel=out")
    request (SetInterfaceString, "EmptyListLabel=(empty)")
    request (SetInterfaceString, "NothingSelectedLabel=(nothing selected)")
    if (game.useframe) {
      request (ClearScreen, "")
      insert ("Frame.htm")
      request (RunScript, "beginUsingTextFrame")
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
  </function>
  <function name="StartGame">
    UpdateStatusAttributes
    if (HasScript(game, "start")) {
      do (game, "start")
    }
    UpdateStatusAttributes
    if (game.displayroomdescriptiononstart) {
      invoke (player.changedparent)
    }
    UpdateStatusAttributes
  </function>
  <function name="RandomChance" parameters="percentile" type="boolean"><![CDATA[
    return (GetRandomInt(1,100) <= percentile)
  ]]></function>
  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>
  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>
  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>
  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>
  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>
  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>
  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>
  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>
  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>
  <javascript src="C:\Program Files (x86)\Axe Software\Quest\Frame.js" />
</asl>