<!--Saved by Quest 5.6.5621.18142-->
<asl version="550">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <include ref="ScopeLib.aslx" />
  <include ref="InvPane2.aslx" />
  <template name="EditorGameHealth">Health</template>
  <template name="equip_verb"></template>
  <dynamictemplate name="DropSuccessful">"You drop " + object.alias + "."</dynamictemplate>
  <game name="A Life In Text">
    <gameid>dbc572bf-7a96-4d4e-8341-5d365d3fab84</gameid>
    <version>0.1</version>
    <firstpublished>2015</firstpublished>
    <classes type="stringlist">
      <value>Archer</value>
      <value>Farmer</value>
      <value>Blacksmith</value>
      <value>Mage</value>
      <value>Miner</value>
      <value>Warrior</value>
      <value>Woodsman</value>
    </classes>
    <hour type="int">0</hour>
    <minute type="int">0</minute>
    <day type="int">0</day>
    <month type="int">0</month>
    <time>game.hour + ":" + game.minute + " " + game.suffix + " on " + game.month + "/" + game.day</time>
    <statusattributes type="stringdictionary" />
    <timesuffix> NA</timesuffix>
    <feature_limitinventory />
    <showhealth />
    <category>Simulation</category>
    <difficulty>Medium</difficulty>
    <cruelty>Polite</cruelty>
    <author>Light Writer</author>
    <setcustomwidth />
    <setcustompadding />
    <showlocation type="boolean">false</showlocation>
    <custompaddingtop type="int">0</custompaddingtop>
    <custompaddingleft type="int">0</custompaddingleft>
    <custompaddingright type="int">0</custompaddingright>
    <defaultfontsize type="int">13</defaultfontsize>
    <defaultbackground>SkyBlue</defaultbackground>
    <menuhoverbackground>White</menuhoverbackground>
    <menuforeground>White</menuforeground>
    <menuhoverforeground>White</menuhoverforeground>
    <defaultlinkforeground>White</defaultlinkforeground>
    <customwidth type="int">750</customwidth>
    <menubackground>SkyBlue</menubackground>
    <backgroundimage type="string"></backgroundimage>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg;*.txt</publishfileextensions>
    <startmenu type="stringlist">
      <value>Start</value>
      <value>Continue</value>
      <value>Install DLC</value>
      <value>Version</value>
    </startmenu>
    <startscreen type="boolean">false</startscreen>
    <start type="script">
      SetInventory2Label ("Current Objective")
      SetInventory2 (GetDirectChildren (equipment))
      play sound ("01-title-theme.mp3", false, true)
    </start>
  </game>
  <object name="room">
    <inherit name="editor_room" />
    <beforefirstenter type="script">
      class_choice
    </beforefirstenter>
    <onexit type="script">
    </onexit>
  </object>
  <object name="classes">
    <inherit name="editor_room" />
    <object name="miner">
      <inherit name="editor_object" />
    </object>
    <object name="mage">
      <inherit name="editor_object" />
    </object>
    <object name="blacksmith">
      <inherit name="editor_object" />
    </object>
    <object name="woodsman">
      <inherit name="editor_object" />
    </object>
    <object name="archer">
      <inherit name="editor_object" />
    </object>
    <object name="warrior">
      <inherit name="editor_object" />
    </object>
    <object name="farmer">
      <inherit name="editor_object" />
    </object>
  </object>
  <object name="garbage">
    <inherit name="editor_room" />
  </object>
  <object name="spawnpoint">
    <inherit name="editor_room" />
    <alias>Setup</alias>
    <descprefix type="string"></descprefix>
    <objectslistprefix type="string"></objectslistprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <firstenter type="script">
    </firstenter>
    <beforeenter type="script">
      StartMenu
    </beforeenter>
    <object name="player">
      <inherit name="editor_object" />
      <inherit name="editor_player" />
      <class type="stringlist" />
      <volume type="int">0</volume>
      <maxvolume type="int">1</maxvolume>
      <containerfullmessage>You can't carry any more weight in this bag!</containerfullmessage>
      <maxHP type="int">20</maxHP>
      <defense type="int">0</defense>
      <statusattributes type="stringdictionary">
        <item>
          <key>defense</key>
          <value><![CDATA[<b>Defense:</b> !]]></value>
        </item>
        <item>
          <key>speed</key>
          <value><![CDATA[<b>Speed:</b> !]]></value>
        </item>
        <item>
          <key>level</key>
          <value><![CDATA[<b>Level:</b> !]]></value>
        </item>
        <item>
          <key>gold</key>
          <value><![CDATA[<b>Gold:</b> !]]></value>
        </item>
      </statusattributes>
      <speed type="int">1</speed>
      <level type="int">1</level>
      <gold type="int">0</gold>
      <difHP type="int">0</difHP>
      <body type="object">player</body>
      <head type="object">player</head>
      <arms type="object">player</arms>
      <feet type="object">player</feet>
      <hands type="object">player</hands>
      <fingers type="object">player</fingers>
      <attr name="pov_gender">he</attr>
      <gender>he</gender>
      <article>he</article>
      <attr name="pov_article">he</attr>
    </object>
  </object>
  <object name="equipment">
    <inherit name="editor_room" />
    <object name="clock">
      <inherit name="editor_object" />
      <alias>game.hour + ":" + game.minute + " " + game.suffix + " on " + game.month + "/" + game.day</alias>
      <scenery />
    </object>
    <object name="mission">
      <inherit name="editor_object" />
      <alias>Tell the mysterious man your name!</alias>
    </object>
  </object>
  <command name="equip">
    <pattern>equip #object#</pattern>
    <unresolved>You can't equip this!</unresolved>
    <script>
      if (object.parent = player) {
        if (object.wearable) {
          if (object.slot = "body" and player.body = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.body = object
          }
          else if (object.slot = "head" and player.head = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.head = object
          }
          else if (object.slot = "legs" and player.legs = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.legs = object
          }
          else if (object.slot = "feet" and player.feet = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.feet = object
          }
          else if (object.slot = "arms" and player.arm = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.arms = object
          }
          else if (object.slot= "hands" and player.hands = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.hands = object
          }
          else if (object.slot = "fingers" and player.fingers = player) {
            msg ("You equipped the " + object.alias + "!")
            object.alias = ListItem (object.alt, 0)
            player.defense = player.defense + object.defense
            list remove (object.inventoryverbs, "Drop")
            list remove (object.inventoryverbs, "Equip")
            list add (object.inventoryverbs, "Unequip")
            player.fingers = object
          }
          else {
            msg ("You can't equip the " + object.alias + " because you aready have something equipped in this slot!  Unequip the armor you are wearing first before trying to equip this " + object.alias + "!")
          }
        }
        msg ("You can't equip the " + object.alias + " because you can't wear it!")
      }
    </script>
  </command>
  <command name="unequip">
    <pattern>unequip #object#</pattern>
    <unresolved>"You aren't wearing " + object.alias</unresolved>
    <script>
      if (object = player.body) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.body = player
      }
      else if (object = player.head) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.head = player
      }
      else if (object = player.legs) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.legs = player
      }
      else if (object = player.feet) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.feet = player
      }
      else if (object = player.arms) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.arms = player
      }
      else if (object = player.hands) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.hands = player
      }
      else if (object = player.fingers) {
        player.defense = player.defense - object.defense
        object.alias = ListItem (object.alt, 1)
        msg ("You unequipped " + object.alias + "!")
        list add (object.inventoryverbs, "Equip")
        list remove (object.inventoryverbs, "Unequip")
        list add (object.inventoryverbs, "Drop")
        player.fingers = player
      }
      else {
        msg ("You can't unequip " + object.alias + "!")
      }
    </script>
  </command>
  <command name="cook">
    <pattern type="string"><![CDATA[^cook (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>
    <script>
      cook_item (object1, object2)
    </script>
  </command>
  <object name="Westfall">
    <inherit name="editor_object" />
    <object name="your_house">
      <inherit name="editor_object" />
      <alias>Your House</alias>
      <object name="yourbedroom">
        <inherit name="editor_room" />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>Your</prefix>
        <alias>Bedroom</alias>
        <description>A small familair room plastered with old family photographs.</description>
        <firstenter type="script">
          speech ("???", "Wake up!")
          wait {
            speech (player.alias, "Hold on!")
            wait {
              speech ("Mother", player.alias + ", wake up already!")
              Ask ("Will you clamber out of bed?") {
                if (result = true) {
                  msg ("You decide it's best that you obey your mother or face her feiry wraith!  You quickly clamber out of bed.")
                }
                else {
                  msg ("You lay back down for a few more seconds.")
                  wait {
                    speech ("Mother", "Seriously, " + player.alias + ", wake up already!")
                    msg ("You decide it's best to obey your mother or face her feiry wraith! You quickly clamber out of bed.")
                  }
                }
              }
            }
          }
        </firstenter>
        <beforefirstenter type="script">
        </beforefirstenter>
        <object name="blue_bed2">
          <inherit name="editor_object" />
          <alias>Blue Bed</alias>
          <look>A nice comfty looking bed that you can rest in.</look>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <lie>You decide to take a well deserved rest on this bed!</lie>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
        </object>
        <object name="family_photos">
          <inherit name="editor_object" />
          <inherit name="item" />
          <look>A photo plastered to the wall of your deceased father and younger version of your mother who took care of you and holds an infant in her arms (the infant is you when you were younger)</look>
          <take />
          <alias>Family Photo</alias>
          <quantity type="int">3</quantity>
          <quantity2 type="int">3</quantity2>
          <volume type="int">1</volume>
          <unitvolume type="int">1</unitvolume>
          <feature_usegive />
          <givesingle type="boolean">false</givesingle>
          <giveto type="scriptdictionary">
            <item key="mother">
              msg ("Handed over Family Photos!")
              speech ("Mother", "I sure miss your father!  This brings back so many memories.  I'll just hold onto these for you.")
              this.parent = mother
              speech ("Mother", "That reminds me, your father wanted me to give you this on your Day of Choosing.")
              AddToInventory (fathers_ring)
            </item>
          </giveto>
          <selfuseon type="scriptdictionary" />
        </object>
        <object name="wooden_nightstand">
          <inherit name="editor_object" />
          <inherit name="container_open" />
          <alias>Wooden Nightstand</alias>
          <look>A brown, wooden, nightstand with one drawer and a metal handle.</look>
          <feature_container />
          <isopen type="boolean">false</isopen>
          <openmsg>The drawer slides open</openmsg>
          <closemsg>The drawer slides closed</closemsg>
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Open</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Drop</value>
          </inventoryverbs>
          <object name="leather_tunic">
            <inherit name="editor_object" />
            <inherit name="item" />
            <inherit name="chestplate" />
            <alias>Leather Tunic</alias>
            <look>A brown leather tunic that offers minimal protection.</look>
            <take />
            <volume type="int">0</volume>
            <quantity type="int">1</quantity>
            <alt type="stringlist">
              <value>Leather Tunic [EQUIPPED]</value>
              <value>Leather Tunic</value>
            </alt>
            <inventoryverbs type="stringlist">
              <value>Look at</value>
              <value>Drop</value>
              <value>Equip</value>
            </inventoryverbs>
            <wearable />
            <defense type="int">5</defense>
          </object>
        </object>
        <object name="enchanted_bag">
          <inherit name="editor_object" />
          <inherit name="item" />
          <alias>Enchanted Bag</alias>
          <take type="script">
            player.maxvolume = 100
            MoveObject (this, garbage)
          </take>
        </object>
        <exit alias="west" to="stairs_upstairs">
          <inherit name="westdirection" />
        </exit>
      </object>
      <object name="your_kitchen">
        <inherit name="editor_object" />
        <alias>Kitchen</alias>
        <exit alias="east" to="stairs_downstairs">
          <inherit name="eastdirection" />
        </exit>
        <object name="black_stove">
          <inherit name="editor_object" />
          <inherit name="switchable" />
          <alias>Black Stove</alias>
          <feature_switchable />
          <switchonmsg>A blue flare of fire spews to life</switchonmsg>
          <switchedondesc>A blue flare of fire spews ontop</switchedondesc>
          <look>A black iron stove.</look>
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Take</value>
            <value>Switch on</value>
          </displayverbs>
          <cancook />
          <onswitchon type="script">
            list add (this.displayverbs, "Switch off")
            list remove (this.displayverbs, "Switch on")
          </onswitchon>
          <onswitchoff type="script">
            list remove (this.displayverbs, "Switch off")
            list add (this.displayverbs, "Switch on")
          </onswitchoff>
        </object>
        <object name="black_refrigerator">
          <inherit name="editor_object" />
          <inherit name="container_closed" />
          <alias>Black Refrigerator</alias>
          <look>A simple black refrigerator with a silver handle.</look>
          <feature_container />
          <isopen type="boolean">false</isopen>
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Open</value>
          </displayverbs>
          <object name="red_apple">
            <inherit name="editor_object" />
            <inherit name="item" />
            <inherit name="edible" />
            <quantity type="int">3</quantity>
            <feature_edible />
            <eathealth type="int">10</eathealth>
            <alias>Red Apple</alias>
            <volume type="int">1</volume>
            <take />
            <displayverbs type="stringlist">
              <value>Look at</value>
              <value>Take</value>
              <value>Eat</value>
            </displayverbs>
            <inventoryverbs type="stringlist">
              <value>Look at</value>
              <value>Drop</value>
              <value>Eat</value>
            </inventoryverbs>
          </object>
          <object name="raw_fish">
            <inherit name="editor_object" />
            <inherit name="item" />
            <inherit name="edible" />
            <feature_usegive />
            <use type="boolean">false</use>
            <unitvolume type="int">1</unitvolume>
            <alias>Raw Fish</alias>
            <feature_edible />
            <eathealth type="int">-5</eathealth>
            <eatmsg>Yuck!  This is nasty!</eatmsg>
            <take />
            <inventoryverbs type="stringlist">
              <value>Look at</value>
              <value>Use</value>
              <value>Drop</value>
              <value>Eat</value>
            </inventoryverbs>
            <quantity type="int">3</quantity>
            <cooked type="object">cooked_fish</cooked>
          </object>
        </object>
      </object>
      <object name="your_living_room">
        <inherit name="editor_room" />
        <alias>Living Room</alias>
        <object name="mother">
          <inherit name="editor_object" />
          <gender>her</gender>
          <alias>Mother</alias>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <prefix>Your</prefix>
          <feature_usegive />
          <use type="boolean">false</use>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <speak type="script">
            speech ("Mother", "You should head to the King's Castle to choose your life!  I'm so excited for you")
            new_mission ("Head to the King's Castle and choose your life!")
            UnlockExit (your_house_exit_out)
          </speak>
          <useon type="scriptdictionary" />
        </object>
        <exit alias="west" to="stairs_downstairs">
          <inherit name="westdirection" />
        </exit>
        <exit name="your_house_exit_out" alias="out" to="south_westfall">
          <inherit name="outdirection" />
          <locked />
          <lockmessage>You should, probably, see what your mother wants before going outside and exploring Westfall!</lockmessage>
        </exit>
      </object>
      <object name="mothers_room">
        <inherit name="editor_room" />
        <alias>Mother's Room</alias>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>Your</prefix>
        <exit alias="east" to="stairs_upstairs">
          <inherit name="eastdirection" />
        </exit>
      </object>
      <object name="stairs_downstairs">
        <inherit name="editor_room" />
        <alias>Stairs</alias>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <descprefix>You are on the</descprefix>
        <exit alias="up" to="stairs_upstairs">
          <inherit name="updirection" />
        </exit>
        <exit alias="east" to="your_living_room">
          <inherit name="eastdirection" />
        </exit>
        <exit alias="west" to="your_kitchen">
          <inherit name="westdirection" />
        </exit>
      </object>
      <object name="stairs_upstairs">
        <inherit name="editor_room" />
        <alias>Stairs</alias>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <descprefix>You are on the</descprefix>
        <exit alias="east" to="yourbedroom">
          <inherit name="eastdirection" />
        </exit>
        <exit alias="down" to="stairs_downstairs">
          <inherit name="downdirection" />
        </exit>
        <exit name="mother_room_exit" alias="west" to="mothers_room">
          <inherit name="westdirection" />
          <locked />
        </exit>
      </object>
    </object>
    <object name="south_westfall">
      <inherit name="editor_room" />
      <alias>South Westfall</alias>
      <exit alias="north" to="central_westfall">
        <inherit name="northdirection" />
      </exit>
      <exit name="your_house_exit_in" alias="Your House" to="your_living_room" />
    </object>
    <object name="central_westfall">
      <inherit name="editor_room" />
      <alias>Central Westfall</alias>
      <exit alias="south" to="south_westfall">
        <inherit name="southdirection" />
      </exit>
      <exit alias="north" to="north_westfall">
        <inherit name="northdirection" />
      </exit>
      <exit alias="east" to="east_westfall">
        <inherit name="eastdirection" />
      </exit>
      <exit alias="west" to="west_westfall">
        <inherit name="westdirection" />
      </exit>
      <object name="male_villagers">
        <inherit name="editor_object" />
        <quantity type="int">10</quantity>
        <speak type="script">
          message1 = RandomChance(25)
          message2 = RandomChance(25)
          message3 = RandomChance(50)
          if (message1) {
            speech ("Villager", "Go away kid, can't you see I'm busy?")
          }
          else if (message2) {
            speech ("Villager", "Don't you have somewhere to be?")
          }
          else if (message3) {
            speech ("Villager", "Maybe if we ignore " + player.article + " they'll go away!")
          }
          else {
            speech ("Villager", "Herm!")
          }
        </speak>
        <alias>Male Villager</alias>
        <gender>Man</gender>
        <article>he</article>
      </object>
    </object>
    <object name="east_westfall">
      <inherit name="editor_object" />
      <alias>East Westfall</alias>
      <exit alias="west" to="central_westfall">
        <inherit name="westdirection" />
      </exit>
    </object>
    <object name="north_westfall">
      <inherit name="editor_object" />
      <alias>North Westfall</alias>
      <exit alias="south" to="central_westfall">
        <inherit name="southdirection" />
      </exit>
      <exit alias="north" to="westfall_castle">
        <inherit name="northdirection" />
      </exit>
    </object>
    <object name="west_westfall">
      <inherit name="editor_object" />
      <alias>West Westfall</alias>
      <exit alias="east" to="central_westfall">
        <inherit name="eastdirection" />
      </exit>
    </object>
    <object name="westfall_castle">
      <inherit name="editor_room" />
      <alias>Westfall Castle</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <description>A golden chandelier dangles from above, to the northwest and northeast is a stairwell leading up to the second floor and straight ahead is a doorway with a guard on either side of the doorway holding spears forming an X across the doorway.  You have a nagging feeling that this is where you're supposed to go.</description>
      <exit alias="south" to="north_westfall">
        <inherit name="southdirection" />
      </exit>
      <exit name="exit_to_castle_hall" alias="north" to="castle_hall">
        <inherit name="northdirection" />
        <locked />
        <lockmessage>The guards block your way!</lockmessage>
      </exit>
    </object>
    <object name="castle_hall">
      <inherit name="editor_room" />
      <alias>Westfall Castle Hall</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <exit alias="south" to="westfall_castle">
        <inherit name="southdirection" />
      </exit>
    </object>
  </object>
  <command name="update">
    <pattern>update</pattern>
    <script>
      LoadFile ("testing.txt")
    </script>
  </command>
  <object name="items">
    <inherit name="editor_object" />
    <object name="weapons">
      <inherit name="editor_object" />
    </object>
    <object name="furniture">
      <inherit name="editor_object" />
      <object name="blue_bed">
        <inherit name="editor_object" />
        <alias>Blue Bed</alias>
        <look>A nice comfty looking bed that you can rest in.</look>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <lie>You decide to take a well deserved rest on this bed!</lie>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
        </displayverbs>
      </object>
      <object name="black_refrigerator1">
        <inherit name="editor_object" />
        <inherit name="container_closed" />
        <alias>Black Refrigerator</alias>
        <look>A simple black refrigerator with a silver handle.</look>
        <feature_container />
        <isopen type="boolean">false</isopen>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Open</value>
        </displayverbs>
      </object>
      <object name="black_stove1">
        <inherit name="editor_object" />
        <inherit name="switchable" />
        <alias>Black Stove</alias>
        <feature_switchable />
        <switchonmsg>A blue flare of fire spews to life</switchonmsg>
        <switchedondesc>A blue flare of fire spews ontop</switchedondesc>
        <look>A black iron stove.</look>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Switch on</value>
        </displayverbs>
        <cancook />
        <onswitchon type="script">
          list add (this.displayverbs, "Switch off")
          list remove (this.displayverbs, "Switch on")
        </onswitchon>
        <onswitchoff type="script">
          list remove (this.displayverbs, "Switch off")
          list add (this.displayverbs, "Switch on")
        </onswitchoff>
      </object>
    </object>
    <object name="potions">
      <inherit name="editor_object" />
      <object name="minor_healing_potion">
        <inherit name="editor_object" />
        <inherit name="edible" />
        <alias>Minor Healing Potion</alias>
        <feature_edible />
        <eathealth type="int">20</eathealth>
        <eatmsg>Restored 20 HP!</eatmsg>
      </object>
      <object name="major_healing_potion">
        <inherit name="editor_object" />
        <inherit name="edible" />
        <alias>Major Healing Potion</alias>
        <feature_edible />
        <eathealth type="int">50</eathealth>
        <eatmsg>Restored 50 HP!</eatmsg>
      </object>
    </object>
    <object name="food">
      <inherit name="editor_object" />
      <object name="red_apple1">
        <inherit name="editor_object" />
        <inherit name="item" />
        <inherit name="edible" />
        <alias>Red Apple</alias>
        <feature_edible />
        <attr name="feature_usegive" type="boolean">false</attr>
        <eathealth type="int">10</eathealth>
        <take />
      </object>
      <object name="cooked_fish">
        <inherit name="editor_object" />
        <inherit name="edible" />
        <inherit name="item" />
        <alias>Cooked Fish</alias>
        <feature_edible />
        <eathealth type="int">10</eathealth>
        <eatmsg>Yummy in my tummy!</eatmsg>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Eat</value>
        </inventoryverbs>
        <unitvolume type="int">2</unitvolume>
      </object>
      <object name="raw_fish1">
        <inherit name="editor_object" />
        <inherit name="item" />
        <inherit name="edible" />
        <feature_usegive />
        <use type="boolean">false</use>
        <unitvolume type="int">1</unitvolume>
        <alias>Raw Fish</alias>
        <feature_edible />
        <eathealth type="int">-5</eathealth>
        <eatmsg>Yuck!  This is nasty!</eatmsg>
        <take />
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
          <value>Eat</value>
        </inventoryverbs>
        <cooked type="object">cooked_fish</cooked>
      </object>
      <object name="green_apple">
        <inherit name="editor_object" />
        <inherit name="edible" />
        <inherit name="item" />
        <feature_edible />
        <eathealth type="int">15</eathealth>
        <eatmsg>Yummy in my tummy!</eatmsg>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
          <value>Eat</value>
        </inventoryverbs>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Eat</value>
        </displayverbs>
        <eat type="script">
          if (HasString(this, "eatmsg")) {
            msg (this.eatmsg)
          }
          else {
            msg (DynamicTemplate("Eaten", this))
          }
          if (HasInt(game.pov, "health")) {
            game.pov.health = game.pov.health + this.eathealth
          }
          if (this.quantity = 1) {
            destroy (this.name)
          }
          else {
            this.quantity = this.quantity - 1
          }
        </eat>
      </object>
    </object>
    <object name="materials">
      <inherit name="editor_object" />
    </object>
    <object name="armor">
      <inherit name="editor_object" />
      <object name="leather_tunic1">
        <inherit name="editor_object" />
        <inherit name="item" />
        <inherit name="chestplate" />
        <alias>Leather Tunic</alias>
        <look>A brown leather tunic that offers minimal protection.</look>
        <take />
        <volume type="int">0</volume>
        <quantity type="int">1</quantity>
        <alt type="stringlist">
          <value>Leather Tunic [EQUIPPED]</value>
          <value>Leather Tunic</value>
        </alt>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
          <value>Equip</value>
        </inventoryverbs>
        <wearable />
        <unitvolume type="int">5</unitvolume>
        <defense type="int">5</defense>
      </object>
      <object name="leather_pants">
        <inherit name="editor_object" />
        <inherit name="leggings" />
        <inherit name="item" />
        <take />
        <wearable />
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
          <value>Equip</value>
        </inventoryverbs>
        <defense type="int">4</defense>
        <unitvolume type="int">4</unitvolume>
        <alias>Leather Pants</alias>
      </object>
      <object name="leather_boots">
        <inherit name="editor_object" />
        <inherit name="boots" />
        <inherit name="item" />
        <unitvolume type="int">2</unitvolume>
        <alias>Leather Boots</alias>
        <wearable />
        <defense type="int">2</defense>
        <speed type="int">1</speed>
      </object>
      <object name="leather_gloves">
        <inherit name="editor_object" />
        <inherit name="item" />
        <inherit name="gloves" />
        <alias>Leather Gloves</alias>
        <wearable />
        <defense type="int">1</defense>
      </object>
      <object name="leather_helmet">
        <inherit name="editor_object" />
        <inherit name="helmet" />
        <alias>Leather Helmet</alias>
        <wearable />
        <defense type="int">3</defense>
        <unitvolume type="int">3</unitvolume>
      </object>
      <object name="golden_chestplate">
        <inherit name="editor_object" />
        <inherit name="chestplate" />
        <defense type="int">10</defense>
        <alias>Golden Chestplate</alias>
      </object>
      <object name="golden_leggings">
        <inherit name="editor_object" />
        <inherit name="leggings" />
        <defense type="int">8</defense>
        <alias>Golden Leggings</alias>
      </object>
      <object name="golden_boots">
        <inherit name="editor_object" />
        <inherit name="boots" />
        <defense type="int">4</defense>
        <alias>Golden Boots</alias>
      </object>
      <object name="golden_helmet">
        <inherit name="editor_object" />
        <inherit name="helmet" />
        <defense type="int">6</defense>
        <alias>Golden Helmet</alias>
      </object>
    </object>
    <object name="unique">
      <inherit name="editor_object" />
      <object name="fathers_ring">
        <inherit name="editor_object" />
        <inherit name="ring" />
        <inherit name="item" />
        <alias>Father's Ring</alias>
        <wearable />
        <defense type="int">3</defense>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
          <value>Equip</value>
        </inventoryverbs>
        <alt type="stringlist">
          <value>Father's Ring [EQUIPPED]</value>
          <value>Father's Ring</value>
        </alt>
      </object>
    </object>
  </object>
  <type name="edible">
    <eathealth type="int">0</eathealth>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      if (this.quantity = 1) {
        destroy (this.name)
      }
      else {
        this.quantity = this.quantity - 1
      }
    </eat>
  </type>
  <type name="defaultgame">
    <enablehyperlinks />
    <echocommand />
    <echohyperlinks />
    <showdescriptiononenter />
    <autodescription />
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">14</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.3</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">12</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks />
    <compassdirections type="stringlist">
      <value>northwest</value>
      <value>north</value>
      <value>northeast</value>
      <value>west</value>
      <value>east</value>
      <value>southwest</value>
      <value>south</value>
      <value>southeast</value>
      <value>up</value>
      <value>down</value>
      <value>in</value>
      <value>out</value>
    </compassdirections>
    <clearframe />
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="stringlist">
      <value>all</value>
      <value>everything</value>
    </allobjects>
    <parserignoreprefixes type="stringlist">
      <value>the</value>
      <value>a</value>
      <value>an</value>
    </parserignoreprefixes>
    <displayroomdescriptiononstart />
    <showpanes />
    <showcommandbar />
    <showlocation />
    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">1000</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">25</custompaddingleft>
    <custompaddingright type="int">25</custompaddingright>
    <showborder />
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showtitle />
    <autodisplayverbs />
    <attr name="autodescription_youarein" type="int">1</attr>
    <attr name="autodescription_youcansee" type="int">2</attr>
    <attr name="autodescription_youcango" type="int">3</attr>
    <attr name="autodescription_description" type="int">4</attr>
    <autodescription_youarein_useprefix />
    <attr name="autodescription_youarein_newline" type="boolean">false</attr>
    <attr name="autodescription_youcansee_newline" type="boolean">false</attr>
    <attr name="autodescription_youcango_newline" type="boolean">false</attr>
    <attr name="autodescription_description_newline" type="boolean">false</attr>
    <changeroom_newline />
    <attr name="command_newline" type="boolean">false</attr>
    <description type="string"></description>
    <languageid>en</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">300</mapsize>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <attr name="feature_pictureframe" type="boolean">false</attr>
    <attr name="feature_limitinventory" type="boolean">false</attr>
    <attr name="feature_asktell" type="boolean">false</attr>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">false</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg</publishfileextensions>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
  </type>
  <type name="defaultobject">
    <visible />
    <displayverbs type="stringlist">
      <value>Look at</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Drop</value>
    </inventoryverbs>
    <take type="boolean">false</take>
    <use type="boolean">false</use>
    <givesingle type="boolean">false</givesingle>
    <drop />
    <gender>it</gender>
    <article>it</article>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>You are in</descprefix>
    <objectslistprefix>You can see</objectslistprefix>
    <exitslistprefix>You can go</exitslistprefix>
    <contentsprefix>containing</contentsprefix>
    <description type="string"></description>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix />
    <volume type="int">0</volume>
    <dark type="boolean">false</dark>
    <lightstrength type="string"></lightstrength>
    <darklevel type="boolean">false</darklevel>
    <attr name="grid_width" type="int">1</attr>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_fill">White</attr>
    <attr name="grid_border">Black</attr>
    <attr name="grid_borderwidth" type="int">1</attr>
    <attr name="grid_bordersides" type="int">15</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_label" type="string"></attr>
    <grid_parent_offset_auto />
    <attr name="grid_parent_offset_x" type="int">0</attr>
    <attr name="grid_parent_offset_y" type="int">0</attr>
    <attr name="pov_alias">me</attr>
    <pov_alt type="stringlist">
      <value>myself</value>
      <value>self</value>
    </pov_alt>
    <attr name="pov_look">Looking good.</attr>
    <attr name="pov_gender">you</attr>
    <attr name="pov_article">yourself</attr>
    <attr name="feature_usegive" type="boolean">false</attr>
    <attr name="feature_container" type="boolean">false</attr>
    <attr name="feature_switchable" type="boolean">false</attr>
    <attr name="feature_edible" type="boolean">false</attr>
    <attr name="feature_player" type="boolean">false</attr>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <unitvolume type="int">0</unitvolume>
    <wearable type="boolean">false</wearable>
    <cancook type="boolean">false</cancook>
    <changedparent type="script">
      if (game.pov = this) {
        if (IsDefined("oldvalue")) {
          OnEnterRoom (oldvalue)
        }
        else {
          OnEnterRoom (null)
        }
        if (game.gridmap) {
          MergePOVCoordinates
        }
      }
    </changedparent>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
  </type>
  <type name="item">
    <quantity type="int">1</quantity>
    <unitvolume type="int">1</unitvolume>
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
    </displayverbs>
  </type>
  <type name="helmet">
    <inherit name="item" />
    <slot>head</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="chestplate">
    <inherit name="item" />
    <slot>body</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="leggings">
    <inherit name="item" />
    <slot>legs</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="boots">
    <inherit name="item" />
    <slot>feet</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="bracelets">
    <inherit name="item" />
    <slot>arms</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="ring">
    <inherit name="item" />
    <slot>fingers</slot>
    <defense type="int">0</defense>
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <type name="gloves">
    <inherit name="item" />
    <slot>hands</slot>
    <defense type="int">0</defense>
    <wearable />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
      <value>Equip</value>
    </displayverbs>
  </type>
  <function name="InitUserInterface"><![CDATA[
    JS.eval ("$('#gamePanes').css('background-color', 'rgba(0, 0, 0, 0)')")
    JS.eval ("$('#statusVars').css('background-color', 'SkyBlue')")
    JS.eval ("$('#statusVars').css('color', 'white')")
    request (SetInterfaceString, "PlacesObjectsLabel=You Can See")
    JS.eval ("$('#inventoryAccordion.ui-widget-content').css('background', 'SkyBlue')")
    JS.eval ("$('#inventoryAccordion.ui-widget-content').css('color', 'white')")
    JS.eval ("$('#statusVarsLabel').css('background', 'SkyBlue')")
    JS.eval ("$('#statusVarsLabel').css('color', 'white')")
    JS.eval ("$('#inventoryLabel').css('background', 'SkyBlue')")
    JS.eval ("$('#inventoryLabel').css('color', 'white')")
    JS.eval ("$('#placesObjectsLabel').css('background', 'SkyBlue')")
    JS.eval ("$('#placesObjectsLabel').css('color', 'white')")
    JS.eval ("$('#placesObjectsAccordion.ui-widget-content').css('background', 'SkyBlue')")
    JS.eval ("$('#placesObjectsAccordion.ui-widget-content').css('color', 'white')")
    JS.eval ("$('.ui-state-active').css('border', '1px solid white')")
    JS.eval ("$('.ui-widget-content').css('border', '1px solid white')")
    JS.eval ("$('#gamePanesFinished').html('<h2></h2>')")
    JS.eval ("$('.ui-button').css('background', 'SkyBlue')")
    JS.eval ("$('.ui-button').css('border', '1px solid white')")
    JS.eval ("$('.ui-button-text').css('color', 'white')")
    JS.eval ("$('.ui-button').mousedown(function() { $(this).css('background-color', 'white'); } )")
    JS.eval ("$('.ui-button-text').mousedown(function() { $(this).css('color', 'SkyBlue'); } )")
    JS.eval ("$('#gameBorder').mouseup(function() { $('.ui-button-text').css('color', 'white'); } )")
    JS.eval ("$('#gameBorder').mouseup(function() { $('.ui-button').css('background-color', 'SkyBlue'); } )")
    JS.eval ("var styleSelecting = $('<style>.ui-selecting { color: SkyBlue; background-color: white;}</style>');  $('html > head').append(styleSelecting)")
    JS.eval ("var styleUnselecting = $('<style>.ui-unselecting { color: white; background-color: SkyBlue;}</style>');  $('html > head').append(styleUnselecting)")
    JS.eval ("var styleSelected = $('<style>.ui-selected { color: SkyBlue; background-color: white;}</style>');  $('html > head').append(styleSelected)")
    JS.eval ("$('#cmdCompassN').css('background', 'white')")
    JS.eval ("$('#cmdCompassE').css('background', 'white')")
    JS.eval ("$('#cmdCompassS').css('background', 'white')")
    JS.eval ("$('#cmdCompassW').css('background', 'white')")
    JS.eval ("$('#cmdCompassNW').css('background', 'white')")
    JS.eval ("$('#cmdCompassNE').css('background', 'white')")
    JS.eval ("$('#cmdCompassSW').css('background', 'white')")
    JS.eval ("$('#cmdCompassSE').css('background', 'white')")
    JS.eval ("$('#cmdCompassU').css('background', 'white')")
    JS.eval ("$('#cmdCompassIn').css('background', 'white')")
    JS.eval ("$('#cmdCompassD').css('background', 'white')")
    JS.eval ("$('#cmdCompassOut').css('background', 'white')")
    JS.eval ("$('#cmdCompassN').css('border', '2px solid red')")
    JS.eval ("$('#cmdCompassE').css('border', '2px solid orange')")
    JS.eval ("$('#cmdCompassW').css('border', '2px solid yellow')")
    JS.eval ("$('#cmdCompassS').css('border', '2px solid green')")
    JS.eval ("$('#cmdCompassNW').css('border', '2px solid blue')")
    JS.eval ("$('#cmdCompassNE').css('border', '2px solid indigo')")
    JS.eval ("$('#cmdCompassSE').css('border', '2px solid violet')")
    JS.eval ("$('#cmdCompassSW').css('border', '2px solid red')")
    JS.eval ("$('#cmdCompassIn').css('border', '2px solid orange')")
    JS.eval ("$('#cmdCompassOut').css('border', '2px solid yellow')")
    JS.eval ("$('#cmdCompassU').css('border', '2px solid green')")
    JS.eval ("$('#cmdCompassD').css('border', '2px solid blue')")
    JS.eval ("$('#compassLabel').css('background', 'SkyBlue')")
    JS.eval ("$('#compassLabel').css('color', 'white')")
    JS.eval ("$('#compassAccordion').css('background', 'SkyBlue')")
    JS.eval (" var arrowUrl = 'images/ui-icons_d8e7f3_256x240.png'; var styleArrow = $('<style>.ui-state-default .ui-icon { background-image: url('+ arrowUrl +'); }</style>');  $('html > head').append(styleArrow) ")
    JS.eval ("$('#status').css('background-image', 'none');")
    JS.eval ("$('#status').css('background-color', 'SkyBlue');")
    JS.eval ("$('#status').css('border', 'SkyBlue');")
  ]]></function>
  <function name="OpenObject" parameters="object">
    if (HasString(object, "openmsg")) {
      msg (object.openmsg)
    }
    else {
      msg (DynamicTemplate("OpenSuccessful", object))
    }
    object.isopen = true
    list add (object.displayverbs, "Close")
    list remove (object.displayverbs, "Open")
    ListObjectContents (object)
  </function>
  <function name="CloseObject" parameters="object">
    if (HasString(object, "closemsg")) {
      msg (object.closemsg)
    }
    else {
      msg (DynamicTemplate("CloseSuccessful", object))
    }
    object.isopen = false
    list add (object.displayverbs, "Open")
    list remove (object.displayverbs, "Close")
  </function>
  <function name="HandleGiveTo" parameters="object1, object2">
    handled = false
    if (HasString(object2, "give")) {
      msg (object2.give)
      handled = true
    }
    else if (TypeOf(object2, "give") = "scriptdictionary") {
      if (DictionaryContains(object2.give, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.give, object1.name), parameters)
        handled = true
      }
      if (not handled) {
        if (HasScript(object2, "giveanything")) {
          // TO DO: Would be better to use a delegate for giveanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "giveanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "giveto")) {
        msg (object1.giveto)
        handled = true
      }
      else if (TypeOf(object1, "giveto") = "scriptdictionary") {
        if (DictionaryContains(object1.giveto, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "givetoanything")) {
            // TO DO: Would be better to use a delegate for givetoanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "givetoanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultGive", object2, object1))
    }
  </function>
  <function name="DoTake" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (object.parent = game.pov) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      volume = 0
      continue = true
      foreach (obj, GetAllChildObjects(game.pov)) {
        if (HasInt(obj, "volume")) {
          volume = volume + obj.volume
        }
      }
      if (not Contains(game.pov, object)) {
        volume = volume + GetVolume(object,true)
      }
      if (HasInt(game.pov, "maxvolume")) {
        if (volume > game.pov.maxvolume) {
          continue = false
          if (HasString(game.pov, "containerfullmessage")) {
            message = prefix + game.pov.containerfullmessage
          }
          else {
            message = prefix + DynamicTemplate("FullInventory", object)
          }
        }
      }
      children = GetDirectChildren(game.pov)
      if (HasInt(game.pov, "maxobjects")) {
        if (game.pov.maxobjects > 0) {
          if (ListCount(children) >= game.pov.maxobjects) {
            continue = false
            if (HasString(game.pov, "containermaxobjects")) {
              message = prefix + game.pov.containermaxobjects
            }
            else {
              message = prefix + DynamicTemplate("MaxObjectsInInventory", object)
            }
          }
        }
      }
      if (continue = false) {
        msg (message)
      }
      else {
        found = true
        takemsg = object.takemsg
        switch (TypeOf(object, "take")) {
          case ("script") {
            if (ismultiple) {
              OutputTextNoBr (prefix)
            }
            do (object, "take")
            takemsg = ""
          }
          case ("boolean") {
            if (object.take = true) {
              object.parent = game.pov
              if (takemsg = null) {
                takemsg = DynamicTemplate("TakeSuccessful", object)
              }
            }
            else {
              found = false
            }
          }
          case ("string") {
            object.parent = game.pov
            takemsg = object.take
          }
          default {
            found = false
          }
        }
        if (not found and takemsg = null) {
          takemsg = DynamicTemplate("TakeUnsuccessful", object)
        }
        if (LengthOf(takemsg) > 0) {
          msg (prefix + takemsg)
        }
        if (HasScript(object, "ontake")) {
          do (object, "ontake")
        }
        if (found and GetBoolean (object, "scenery") and object.parent = game.pov) {
          object.scenery = false
        }
      }
    }
  ]]></function>
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsVisible(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="DoDrop" parameters="object, ismultiple"><![CDATA[
    if (object.quantity > 1) {
      prefix = ""
      if (ismultiple) {
        prefix = GetDisplayAlias(object) + ": "
      }
      if (not ListContains(ScopeInventory(), object)) {
        msg (prefix + DynamicTemplate("NotCarrying", object))
      }
      else if (not ListContains(ScopeReachable(), object)) {
        msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
      }
      else {
        found = true
        dropmsg = object.dropmsg
        object.quantity2 = object.quantity
        object.quantity = 1
        CloneObjectAndMove (object, game.pov.parent)
        object.quantity = object.quantity2 - 1
        GetDisplayAlias (object)
        switch (TypeOf(object, "drop")) {
          case ("script") {
            if (ismultiple) {
              OutputTextNoBr (prefix)
            }
            do (object, "drop")
            dropmsg = ""
          }
          case ("boolean") {
            if (object.drop = true) {
              object.parent = game.pov
              if (dropmsg = null) {
                dropmsg = DynamicTemplate("DropSuccessful", object)
              }
            }
            else {
              found = false
            }
          }
          case ("string") {
            dropmsg = object.drop
          }
          default {
            found = false
            msg ("")
          }
        }
        if (not found and dropmsg = null) {
          dropmsg = DynamicTemplate("DropUnsuccessful", object)
        }
        if (LengthOf(dropmsg) > 0) {
          msg (prefix + dropmsg)
        }
        if (HasScript(object, "ondrop")) {
          do (object, "ondrop")
        }
      }
    }
    else {
      object.parent = game.pov.parent
    }
  ]]></function>
  <function name="GetDisplayAlias" parameters="obj" type="string">
    if (HasInt(obj, "quantity")) {
      result = obj.alias + " x" + obj.quantity
    }
    else {
      result = obj.alias
    }
    return (result)
  </function>
  <function name="GetListDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "listalias")) {
      result = obj.listalias
      obj.listalias = obj.listalias + "x" + obj.quantity
    }
    else {
      result = GetDisplayAlias(obj)
    }
    return (result)
  </function>
  <function name="InitStatusAttributes"><![CDATA[
    if (game.showscore) {
      game.score = 0
      if (game.statusattributes = null) {
        game.statusattributes = NewStringDictionary()
      }
      dictionary add (game.statusattributes, "score", "Score: !")
    }
    if (game.showhealth) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "health", "<b>HP:</b> !/" + player.maxHP)
    }
  ]]></function>
  <function name="InitPOV" parameters="oldPOV, newPOV"><![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }
    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      if (game.showhealth) {
        newPOV.health = 20
        newPOV.changedhealth => {
          if (this.health > player.maxHP) {
            this.health = player.maxHP
          }
          else if (this.health <= 0) {
            this.health = 0
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
        }
      }
      newPOV.pov_used = true
    }
    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
  ]]></function>
  <function name="class_choice">
    ShowMenu ("What Class have you choosen?", game.classes, false) {
      player.class = result
      Ask ("Is " + player.class + " correct?") {
        if (result = true) {
          if (player.class = "Archer") {
            msg ("So you have choosen the life of an " + player.class + "!")
          }
          else {
            msg ("So you have choosen the life of a " + player.class + "!")
          }
        }
        else {
          class_choice
        }
      }
    }
  </function>
  <function name="java_minute" parameters="minute">
    game.minute = minute
  </function>
  <function name="java_hour" parameters="hour">
    game.hour = hour
  </function>
  <function name="java_day" parameters="day">
    game.day = day
  </function>
  <function name="java_month" parameters="month">
    game.month = month
  </function>
  <function name="time_set">
    game.time = game.hour + ":" + game.minute + " on " + game.month + "/" + game.day
  </function>
  <function name="timesuffix" parameters="suffix" type="string">
    game.timesuffix = suffix
  </function>
  <function name="speech" parameters="speaker, message"><![CDATA[
    msg ("<u><b>" + speaker + ":</u></b> " + message)
  ]]></function>
  <function name="input_name">
    speech ("???", "What is your name, stranger?")
    get input {
      player.alias = result
      Ask ("Is " + player.alias + " correct?") {
        if (result = true) {
          speech ("???", "It's nice to meet you, " + player.alias + "!")
          speech ("???", "Prepare to begin the start of your adventure!")
          MoveObject (player, yourbedroom)
          new_mission ("Head downstairs and speak to your Mother!")
        }
      }
    }
  </function>
  <function name="new_mission" parameters="objective"><![CDATA[
    mission.alias = objective
    PrintCentered ("<b>New Objective!</b>")
    PrintCentered (mission.alias)
  ]]></function>
  <function name="cook_item" parameters="object1, object2">
    if (object2.cancook) {
      if (object2.switchedon) {
        // both conditions are met
        AddToInventory (object1.cooked)
        if (object1.quantity = 1) {
          destroy (object1.name)
        }
        else {
          msg ("If only there was a fire.")
        }
      }
    }
  </function>
  <function name="update_inv" parameters="variable">
    foreach (item, ScopeInventory()) {
      for (i, 1, 100) {
        l = ScopeInventory()
        n = GetRandomInt (0, ListCount(l)-1)
        item1 = ObjectListItem(l,n)
      }
      for (z, 1, 100) {
        x = ScopeInventory()
        y = GetRandomInt (0, ListCount(x)-1)
        item2 = ObjectListItem(x,y)
      }
      if (item1.name = item2.name) {
      }
      else if (item1.alias = item2.alias) {
        item1.quantity = item1.quantity + item2.quantity
        item2.parent = garbage
      }
      else {
      }
    }
  </function>
  <function name="Crop" parameters="s" type="string"><![CDATA[
    start = 1
    end = LengthOf(s)
    for (i, 1, LengthOf(s)) {
      if (Asc(Mid(s, i, 1)) < 33) {
        if (start = i) {
          start = i + 1
        }
      }
      else {
        end = i
      }
    }
    return (Mid(s, start, end - start + 1))
  ]]></function>
  <function name="LoadFile" parameters="filename">
    s = GetFileData (filename)
    current_object = null
    foreach (line, Split(s, "\n")) {
      line = Crop(line)
      if (not line = "" and not StartsWith(line, "#")) {
        bits = Split(line, "=")
        if (StringListItem(bits, 0) = "new") {
          if (ListCount(bits) = 2) {
            create (StringListItem(bits, 1))
            current_object = GetObject(StringListItem(bits, 1))
          }
          else {
            create (StringListItem(bits, 2), StringListItem(bits, 1))
            current_object = GetObject(StringListItem(bits, 2))
          }
        }
        else if (StringListItem(bits, 0) = "find") {
          current_object = GetObject(StringListItem(bits, 1))
          if (current_object = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else if (StringListItem(bits, 0) = "exit") {
          create exit (StringListItem(bits, 2), null, null, null, StringListItem(bits, 1))
          current_object = GetObject(StringListItem(bits, 2))
        }
        else if (StringListItem(bits, 0) = "parent") {
          current_object.parent = GetObject(StringListItem(bits, 1))
          if (current_object.parent = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else if (StringListItem(bits, 0) = "to") {
          current_object.to = GetObject(StringListItem(bits, 1))
          if (current_object.to = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else {
          if (LCase(StringListItem(bits, 1)) = "false") {
            set (current_object, StringListItem(bits, 0), false)
          }
          else if (LCase(StringListItem(bits, 1)) = "true") {
            set (current_object, StringListItem(bits, 0), true)
          }
          else if (IsInt(StringListItem(bits, 1))) {
            set (current_object, StringListItem(bits, 0), ToInt(StringListItem(bits, 1)))
          }
          set (current_object, StringListItem(bits, 0), StringListItem(bits, 1))
        }
      }
    }
  </function>
  <function name="StartMenu"><![CDATA[
    game.startscreen = true
    ShowMenu ("What would you like to do?", game.startmenu, false) {
      game.startscreen = false
      if (result = "Start") {
        gender
        stop sound
      }
      else if (result = "Continue") {
        stop sound
        play sound ("fileselect.mp3", false, true)
        fileselect = NewStringList()
        list add (fileselect, "File 1")
        list add (fileselect, "File 2")
        list add (fileselect, "File 3")
        list add (fileselect, "Go Back")
        ShowMenu ("Choose a File:", fileselect, false) {
          if (result = "File 1") {
            LoadFile ("file1.txt")
          }
          else if (result = "File 2") {
            LoadFile ("file2.txt")
          }
          else if (result = "File 3") {
            LoadFile ("file3.txt")
          }
          else {
            stop sound
            play sound ("01-title-theme.mp3", false, true)
            StartMenu
          }
        }
      }
      else if (result = "Version") {
        msg ("<b>Current Version: </b>" + game.version)
        StartMenu
      }
      else {
        msg ("There currently is no DLC available.")
        StartMenu
      }
    }
  ]]></function>
  <function name="gender">
    genderlist = NewStringList()
    list add (genderlist, "Boy")
    list add (genderlist, "Girl")
    ShowMenu ("Are you a Boy or a Girl?", genderlist, false) {
      player.gender = result
      if (player.gender = "Boy") {
        player.article = "him"
      }
      else {
        player.article = "her"
      }
      Ask ("Is " + player.gender + " correct?") {
        if (result) {
          input_name
        }
        else {
          gender
        }
      }
    }
  </function>
  <javascript src="main.js" />
  <javascript src="InvPane2.js" />
  <timer name="time">
    <interval>1</interval>
    <enabled />
    <script>
      JS.month ()
      JS.day ()
      JS.hour ()
      JS.minute ()
      clock.alias = game.hour + ":" + game.minute + game.timesuffix + " on " + game.month + "/" + game.day
      JS.suffix ()
    </script>
  </timer>
  <timer name="volume_quantity">
    <interval>1</interval>
    <enabled />
    <script><![CDATA[
      foreach (item, AllObjects()) {
        if (item.unitvolume > 0) {
          item.volume = item.unitvolume * item.quantity
        }
        else {
        }
      }
    ]]></script>
  </timer>
  <timer name="update_equipment">
    <interval>1</interval>
    <enabled />
    <script>
      SetInventory2 (GetDirectChildren (equipment))
    </script>
  </timer>
</asl>