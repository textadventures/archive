<library>
<!--

A not-so-simple module that lets you track game time in your game.

Feel free to modify this code as you wish.

The Pixie
the_pix@hotmail.com

Discussion here:
http://forum.textadventures.co.uk/viewtopic.php?f=18&t=5233



VERSION 2



EVENTS

Events will be triggered at set times. Events must be named: event_dd_hh_mm

They must have a script for "Look at", which will be run at the specified time.

If the event runs in the background, the script should include:

  Quiet

This will allow a WAIT command to continue.

Events can be created on the fly too. In this example script, events are created, the first in 3 minutes, the second in 6.
If the player types WAIT, the time will advance to the second, as the first includes
a call to Quiet.

CreateEvent(3) {
  P("Three minutes later something happens you do not know about")
  Quiet
}
CreateEvent(6) {
  P("Six minutes later something happens you do see")
}



STEPS

You can create a sequence of steps. Steps are objects much like events, again with a script for "look for". To link to the start of a sequence or to the next step use this:

  NextStep(firststep, delay)





TIME

Use the SetTime function to set the current time. Note that any intervening events will be skipped.
In this example, the time is set to 2:15 pm on day 1

  SetTime("1:14:15")
  
By default, 1 minute passes per command. Use SetInc to have more time progress when the player does something.
Using SetInc will ensure events are not skipped (though the player may seen them all bunched up if a long time passes).
If it takes 5 minutes, do this:

  SetInc(5)



Note: This system assumes days will not go beyond 99.




UPGRADING

To upgrade from the earlier version

To get this to work, create Boolean attributes, "notarealturn" and "beta", and a script attribute on the game object called "unresolvedcommandhandler". Set the script to this:
game.notarealturn = true

If "beta" is true, you will see some text printed out that might help you work out what the system is doing, and so fix any problems.

CreateEvent needs an extra parameter, a string, giving the event a name. This is used to identify it when things go wrong and you are trying to work ot what is happening. Put any unique string in to identify that event.


-->


  <object name="game_clock">
    <inherit name="editor_object" />
    <time type="int">0</time>
    <minutes type="int">0</minutes>
    <hours24 type="int">0</hours24>
    <days type="int">0</days>
    <countdown type="int">0</countdown>
    <increment type="int">1</increment>
    <waittime type="int">15</waittime>
    <changedtime type="script">
      JS.eval("$('#clock').html('" + TimeAsString() + "');")
    </changedtime>
  </object>
  
  <command name="clock">
    <pattern>clock;time;watch</pattern>
    <script>
      msg ("You take your fob watch from your pocket, and look at it: It's " + TimeAsString())
    </script>
  </command>
  
  <command name="wait">
    <pattern type="string">^wait$|^z$</pattern>
    <script>
      count = game_clock.waittime
      game_clock.event = false
      while (count > 0 and not game_clock.event) {
        //msg("count = " + count)
        //msg("game_clock.event = " + game_clock.event)
        count = count - 1
        IncTime()
      }
      if (not game_clock.event) {
        msg ("You wait " + game_clock.waittime + " minutes, but nothing happens.")
      }
      game.turn_successful = false
    </script>
  </command>
  
  <turnscript>
    <enabled type="boolean">true</enabled>
    <script>
      if (not game.notarealturn) {
        for (i, 1, game_clock.increment) {
          IncTime ()
        }	
      }
      game_clock.increment = 1
      game.notarealturn = false
    </script>
  </turnscript>

  <function name="TimeAsString" type="string"><![CDATA[
    hours = game_clock.hours24 % 12
    if (hours = 0) {
      hours = 12
    }
    s = " " + hours + ":" + DD(game_clock.minutes)
    if (game_clock.hours24 < 12) {
      return (s + " am")
    }
    else {
      return (s + " pm")
    }
  ]]></function>
  
  
  <!--
  Should only be called internally.
  Moves time on 1 minute, and checks to see if any event is set for that minute.
  -->
  <function name="IncTime"><![CDATA[
    on ready {
      game_clock.time = game_clock.time + 1
      //msg("game_clock.time = " + game_clock.time)
      //msg("game_clock.event = " + game_clock.event)
      game_clock.minutes = game_clock.time % 60
      game_clock.hours24 = (game_clock.time / 60) % 24
      game_clock.days = game_clock.time / (60 * 24)
      name = "event_" + DD(game_clock.days) + "_" + DD(game_clock.hours24) + "_" + DD(game_clock.minutes)
      game_clock.countdown = game_clock.countdown - 1
      //msg("Looking for: " + name)
      o = GetObject(name)
      if (not o = null and HasScript(o, "look")) {
        if (game.beta) msg("Found: " + o + " (" + o.alias + ")")
        // this is used by wait
        game_clock.event = true
        do(o, "look")
      }
      else if (game_clock.countdown < 0 and HasAttribute(game_clock, "nextstep")) {
        if (game.beta) msg("Step found: " + game_clock.nextstep + " (" + game_clock.nextstep.alias + ")")
        // this is used by wait
        game_clock.event = true
        step = game_clock.nextstep
        game_clock.nextstep = null
        do(step, "look")
      }
      //msg("game_clock.event = " + game_clock.event)
      //msg("done")
      game.clock = TimeAsString()
    }
  ]]></function>


  <!--
  Set this during a command to have the given time expire during the command.
  -->  
  <function name="SetInc" parameters="minutes">
    game_clock.increment = minutes
  </function>
  
  
  <!--
  Creates a new event for the given time, or as soon after that where there is a slot free.
  -->  
  <function name="CreateEvent" parameters="time, alias, script">
    time = game_clock.time + time
    o = null
    while (o = null) {
      o = AttemptCreateEvent(time)
      time = time + 1
    }
    o.look = script
    o.alias = alias
  </function>

  <!--
  Creates a new event for the given time, or as soon after that where there is a slot free.
  -->  
  <function name="NextStep" parameters="step, delay">
    game_clock.nextstep = step
    game_clock.countdown = delay
    //msg("delay=" + delay)
  </function>



  <!--
  Will try to create an event at the given time, returning said event if successful.
  If another event is set for that time, it will return null.
  -->  
  <function name="AttemptCreateEvent" parameters="time" type="object">
    minutes = time % 60
    hours24 = (time / 60) % 24
    days = time / (60 * 24)
    name = "event_" + DD(days) + "_" + DD(hours24) + "_" + DD(minutes)
    //msg("Setting for: " + name)
    o = GetObject(name)
    if (o = null) {
      create(name)
      return (GetObject(name))
    }
    else {
      return (null)
    }
  </function>
  
  <!--
  Sets the game time. This can either be sent as an integer, the number of minutes since midnight on day 1,
  or as a string, in this format: 01:14:35 (i.e, 2:35 pm on day 1).
  -->
  <function name="SetTime" parameters="minutes">
    if (TypeOf(minutes) = "string") {
      l = Split(minutes, ":")
      if (not ListCount(l) = 3) error("SetTime failed to understand " + minutes)
      game_clock.days = ToInt(StringListItem(l, 0))
      game_clock.hours24 = ToInt(StringListItem(l, 1))
      game_clock.minutes = ToInt(StringListItem(l, 2))
      game_clock.time = (game_clock.days * 24 + game_clock.hours24) * 60 + game_clock.minutes
    }
    else {
      game_clock.time = minutes
      game_clock.minutes = game_clock.time % 60
      game_clock.hours24 = (game_clock.time / 60) % 24
      game_clock.days = game_clock.time / (60 * 24) + 1
    }
    game.clock = TimeAsString()
  </function>
  
  <!--
  Returns true if the game time is after the given time.
  -->
  <function name="IsAfter" parameters="time" type="boolean"><![CDATA[
    if (TypeOf(time) = "string") {
      l = Split(time, ":")
      if (not ListCount(l) = 3) error("SetTime failed to understand " + minutes)
      days = ToInt(StringListItem(l, 0))
      hours24 = ToInt(StringListItem(l, 1))
      minutes = ToInt(StringListItem(l, 2))
      time = (days * 24 + hours24) * 60 + minutes
    }
    return (game_clock.time > time)
  ]]></function>
  
  <!--
  Returns the number of minutes since midnight on day 1.
  -->
  <function name="GetTime" type="int">
    return (game_clock.time)
  </function>
  
  <!--
  Pads the given number (or string) is a single digit, it will be padded with an extra leading zero.
  -->
  <function name="DD" parameters="s" type="string"><![CDATA[
    return (Pad (s, 2, "0"))
  ]]></function>
  
  
  <!--
  Pads the given number or string is returned, padded with extra characters to the right to make it up to the given length.
  -->
  <function name="Pad" parameters="string, number, pad" type="string"><![CDATA[
    text = ""
    string = ToString(string)
    for (i, 1, number - LengthOf(string)) {
      text = text + pad
    }
    return (text + string)
  ]]></function>
  
  
  <!--
  Call this from an event to have it happen in the background. What that means is that
  if the WAIT command will not terminate at this event.
  -->
  <function name="Quiet"><![CDATA[
    game_clock.event = false
  ]]></function>
  

  
</library>