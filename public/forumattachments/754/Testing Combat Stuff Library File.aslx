<library>

<!-- New Game Code -->

<asl version="540">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="Testing Game Stuff">
    <gameid>bbc85c01-6e80-4a71-8abf-c1e870fb5b42</gameid>
    <version>1.0</version>
    <firstpublished>2013</firstpublished>
  </game>
  <object name="room">
    <inherit name="editor_room" />
    <object name="player">
      <inherit name="editor_object" />
      <inherit name="editor_player" />
    </object>
  </object>
</asl>

<!-- Game Code -->

<asl version="540">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="Testing Game Stuff">
    <gameid>bbc85c01-6e80-4a71-8abf-c1e870fb5b42</gameid>
    <version>1.0</version>
    <firstpublished>2013</firstpublished>
  </game>
  <object name="room">
    <inherit name="editor_room" />
    <object name="player">
      <inherit name="editor_object" />
      <inherit name="editor_player" />
	  <inherit name="character_object_type" />
	  <strength type="int">100</strength>
      <endurance type="int">100</endurance>
      <dexterity type="int">100</dexterity>
      <agility type="int">100</agility>
      <speed type="int">100</speed>
      <intelligence type="int">100</intelligence>
      <spirituality type="int">100</spirituality>
      <mentality type="int">100</mentality>
      <piety type="int">100</piety>
      <luck type="int">100</luck>
	  <current_hit_points type="int">999</current_hit_points>
      <maximum_hit_points type="int">999</maximum_hit_points>
      <current_mana_points type="int">99</current_mana_points>
      <maximum_mana_points type="int">99</maximum_mana_points>
    </object>
	<object name="orc_1">
      <inherit name="editor_object" />
	  <inherit name="character_object_type" />
	  <alias>orc</alias>
	  <strength type="int">25</strength>
      <endurance type="int">25</endurance>
      <dexterity type="int">25</dexterity>
      <agility type="int">25</agility>
      <speed type="int">25</speed>
      <intelligence type="int">25</intelligence>
      <spirituality type="int">25</spirituality>
      <mentality type="int">25</mentality>
      <piety type="int">25</piety>
      <luck type="int">25</luck>
	  <current_hit_points type="int">500</current_hit_points>
      <maximum_hit_points type="int">500</maximum_hit_points>
      <current_mana_points type="int">50</current_mana_points>
      <maximum_mana_points type="int">50</maximum_mana_points>
	  <experience_points type="int">100</experience_points>
      <cash type="int">100</cash>
    </object>
  </object>
</asl>

<!-- Object Types -->

<type name="character_object_type">

  <strength type="int">0</strength>
  <endurance type="int">0</endurance>
  <dexterity type="int">0</dexterity>
  <agility type="int">0</agility>
  <speed type="int">0</speed>
  <intelligence type="int">0</intelligence>
  <spirituality type="int">0</spirituality>
  <mentality type="int">0</mentality>
  <piety type="int">0</piety>
  <luck type="int">0</luck>
  
  <dead type="boolean">false</dead>
  
  <undead type="boolean">false</undead>
  
  <defending type="boolean">false</defending>
  <casting type="boolean">false</casting>
  
  <experience_points type="int">0</experience_points>
  <cash type="int">0</cash>
  <level type="int">0</level>
  
  <hit_points type="string">0/0</hit_points>
  <mana_points type="string">0/0</mana_points>
  
  <current_hit_points type="int">0</current_hit_points>
  <maximum_hit_points type="int">0</maximum_hit_points>
  
  <current_mana_points type="int">0</current_mana_points>
  <maximum_mana_points type="int">0</maximum_mana_points>
  
</type>

<!-- Turnscripts -->

<turnscript name="global_events_turnscript">
  status_attributes_function
  leveling_function
  game.turns = game.turns + 1
</turnscript>

<!-- Commands -->

<command name="fight_command">
  <pattern>fight #text#</pattern>
  <script>
    fight_function (game.pov,text)
  </script>
</command>

<!-- Functions -->

<function name="fight_function" parameters="self,text">
  enemy=GetObject(text)
  if (enemy=null) {
    foreach (object_x,AllObjects()) {
	  if (object_x.alias=text) {
	    enemy=object_x
	  }
	}
  }
  on ready {
    if (enemy=null) {
      msg ("There seemingly is no " + text + " here.")
    } else if (not check_reachable_function (enemy) = true) {
      msg ("There seemingly is no " + enemy.alias + " here.")
    } else if (not DoesInherit (enemy,"character_object_type")) {
      msg (enemy.alias + "is seemingly not something that you can battle.")
    } else if (GetBoolean (enemy,"hostile") = false) {
      msg (enemy.alias + " is seemingly not something that you can battle.")
    } else if (GetBoolean (enemy,"dead") = true) {
      msg (enemy.alias + " is already dead.")
    } else {
      battle_sequence_function (self,enemy)
    }
  }
</function>

<function name="battle_sequence_function" parameters="self,enemy"><![CDATA[
  if (enemy.dead=false or self.escaped=false) {
    you_go_first=false
    if (GetInt (self,"speed") > GetInt (enemy,"speed") {
	  you_go_first=true
	} else if (GetInt (self,"speed") = GetInt (enemy,"speed") and RandomChance (50)=true) {
	  you_go_first=true
	}
    if (you_go_first=true) {
	  msg ("You get to go first for this round")
	  self_battle_turn_function (self,enemy)
	  on ready {
	    if (not enemy.dead=true or not self.escaped=true){
	      enemy_battle_turn_function (self,enemy)
		}
	  }
	} else {
	  msg (enemy.alias + " gets to go first for this round.")
	  enemy_battle_turn_function (self,enemy)
      on ready {
        if (not enemy.dead=true or not self.escaped=true){	  
	      msg ("It is now your turn.")
	      self_battle_turn_function (self,enemy)
		}
	  }
	}
	on ready {
	  msg ("The round has ended.") 
	  battle_sequence_function (self,enemy)
	}
  } else { 
    msg ("The battle is over.")
  }
]]></function>

<function name="self_battle_turn_function" parameters="self,enemy"><![CDATA[
  msg (self.alias + " has " + self.current_hit_points + " HP left.")
  msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
  wait {
    show menu ("What is your battle choice?", split ("Attack;Defend;Cast;Item;Run", ";"), false) {
      switch (result) {
        case ("Attack") {
          self_attack_failed = false
          if (RandomChance (GetInt (enemy,"agility") - GetInt (self,"speed")) = true) {
            msg (enemy.alias + "evaded your attack!")
            self_attack_failed = true
			self.defending = false
          } else if (RandomChance (GetInt (enemy,"dexterity") - GetInt (self,"agility")) = true) {
            msg (enemy.alias + "parried your attack!")
            self_attack_failed = true
			self.defending = false
          } else if (RandomChance (GetInt (enemy,"agility") - GetInt (self,"dexterity")) = true) {
            msg (enemy.alias + "blocked your attack!")
            self_attack_failed = true
			self.defending = false
          } else if (RandomChance (GetInt (self,"dexterity") - GetInt (enemy,"speed")) = false) {
            msg ("Your attack missed " + enemy.alias +"!")
            self_attack_failed = true
			self.defending = false
          } else if (RandomChance (GetInt (enemy,"armor_class") - GetInt (self,"attack_rating")) = true) {
            msg ("Your attack failed to penetrate " + enemy.alias +"!")
            self_attack_failed = true
			self.defending = false
          }
		  on ready {
		    if (self_attack_failed = false) {
              if (self.defending = true and enemy.defending = true) {
                enemy.current_hit_points = enemy.current_hit_points - (critical_hit_function (self) * 2 * GetInt (self,"physical_damage") / 2 + GetInt (self,"physical_damage") * (GetInt (self,"strength") - GetInt (enemy,"endurance")) / 100)
                msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
                self.defending = false
              } else if (self.defending = true and enemy.defending = false) {
                enemy.current_hit_points = enemy.current_hit_points - (critical_hit_function (self) * 2 * GetInt (self,"physical_damage") + GetInt (self,"physical_damage") * (GetInt (self,"strength") - GetInt (enemy,"endurance")) / 100)
                msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
                self.defending = false
              } else if (self.defending = false and enemy.defending = true) {
                enemy.current_hit_points = enemy.current_hit_points - (critical_hit_function (self) * GetInt (self,"physical_damage") / 2 + GetInt (self,"physical_damage") * (GetInt (self,"strength") - GetInt (enemy,"endurance")) / 100)
                msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
              } else if (self.defending = false and enemy.defending = false) {
                enemy.current_hit_points = enemy.current_hit_points - (critical_hit_function (self) * GetInt (self,"physical_damage") + GetInt (self,"physical_damage") * (GetInt (self,"strength") - GetInt (enemy,"endurance")) / 100)
                msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
			  }
            }
          }
        }
        case ("Defend") {
		  if (self.defending = true) {
		    msg ("You continue to defend yourself against " + enemy.alias)
		  } else if (self.defending = false) {
		    msg ("You defend yourself against " + enemy.alias)
            self.defending = true
		  }
        }
        case ("Cast") {
          self.defending = false
        }
        case ("Item") {
          self.defending = false
        }
        case ("Run") {
          self.defending = false
		  self.escaping = true
        }
      }
	  on ready {
        if (GetInt (enemy,"current_hit_points") > 0) {
	      if (RandomChance (GetInt (self,"speed") - GetInt (enemy,"speed"))= true) {
            msg ("You get an extra battle turn!")
            self_battle_turn (self,enemy)
          } else {
            msg ("Your battle turn is over.")
          }
        } else if (GetInt (enemy,"current_hit_points") <= 0) {
          msg (enemy.alias + " is dead.")
          msg ("You have won the battle!")
		  self.defending = false
		  self.escaping = false
          enemy.defending = false
          enemy.dead = true
		}
      }
    }
  }
]]></function>

<function name="enemy_battle_turn_function" parameters="self,enemy"><![CDATA[
  msg (self.alias + " has " + self.current_hit_points + " HP left.")
  msg (enemy.alias + " has " + enemy.current_hit_points + " HP left.")
  result = GetRandomInt (1,3)
  switch (result) {
    case (1) {
      enemy_attack_failed = false
      if (RandomChance (GetInt (self,"agility") - GetInt (enemy,"speed")) = true) {
        msg ("You have evaded the attack!")
        enemy_attack_failed = true
		enemy.defending = false
      } else if (RandomChance (GetInt (self,"dexterity") - GetInt (enemy,"agility")) = true) {
        msg ("You have parried the attack!")
        enemy_attack_failed = true
		enemy.defending = false
      } else if (RandomChance (GetInt (self,"agility") - GetInt (enemy,"dexterity")) = true) {
        msg ("You have blocked the attack!")
        enemy_attack_failed = true
	    enemy.defending = false
      } else if (RandomChance (GetInt (enemy,"dexterity") - GetInt (self,"speed")) = false) {
        msg (enemy.alias +"'s attack missed!")
        enemy_attack_failed = true
		enemy.defending = false
      } else if (RandomChance (GetInt (self,"armor_class") - GetInt (enemy,"attack_rating")) = true) {
        msg ("You weren't penetrated by the attack!")
        enemy_attack_failed = true
	    enemy.defending = false
      }
	  on ready {
	    if (enemy_attack_failed = false) {
          if (enemy.defending = true and self.defending = true) {
            self.current_hit_points = self.current_hit_points - (critical_hit_function (enemy) * 2 * GetInt (enemy,"physical_damage") / 2 + GetInt (enemy,"physical_damage") * (GetInt (enemy,"strength") - GetInt (self,"endurance")) / 100)
            msg (self.alias + " has " + self.current_hit_points + " HP left.")
            enemy.defending = false
          } else if (enemy.defending = true and self.defending = false) {
            self.current_hit_points = self.current_hit_points - (critical_hit_function (enemy) * 2 * GetInt (enemy,"physical_damage") + GetInt (enemy,"physical_damage") * (GetInt (enemy,"strength") - GetInt (self,"endurance")) / 100)
            msg (self.alias + " has " + self.current_hit_points + " HP left.")
            enemy.defending = false
          } else if (enemy.defending = false and self.defending = true) {
            self.current_hit_points = self.current_hit_points - (critical_hit_function (enemy) * GetInt (enemy,"physical_damage") / 2 + GetInt (enemy,"physical_damage") * (GetInt (enemy,"strength") - GetInt (self,"endurance")) / 100)
            msg (self.alias + " has " + self.current_hit_points + " HP left.")
          } else if (enemy.defending = false and self.defending = false) {
            self.current_hit_points = self.current_hit_points - (critical_hit_function (enemy) * GetInt (enemy,"physical_damage") + GetInt (enemy,"physical_damage") * (GetInt (enemy,"strength") - GetInt (self,"endurance")) / 100)
            msg (self.alias + " has " + self.current_hit_points + " HP left.")
		  }
        }
      }
    }
    case (2) {
	  if (enemy.defending = true) {
	    msg (enemy.alias + " is still defending itself.")
	  } else if (enemy.defending = false) {
        msg (enemy.alias + " has choosen to defend itself.")
        enemy.defending = true
	  }
    }
    case (3) {
      enemy.defending = false
      msg ("Cast")
    }
  }
  on ready {
    if (GetInt (self,"current_hit_points") > 0) {
      if (RandomChance (GetInt (enemy,"speed") - GetInt (self,"speed")) = true) {
        msg (enemy.alias + " gets an extra battle turn!")
        on ready {
		  wait {
            enemy_battle_turn (self,enemy)
		  }
        }
      } else {
        msg (enemy.alias + " 's battle turn is over.")
      }
    } else if (GetInt (self,"current_hit_points") <= 0) {
      msg (self.alias + " has died.")
      msg ("GAME OVER")
      finish
	}
  }
]]></function>

<function name="check_reachable_function" parameters="enemy" type="boolean">
  foreach (object_x,ScopeReachableNotHeld ()) {
    if (object_x=enemy) {
      value = true
	} else {
	  value = false
	}
  }
  return (value)
</function>

<function name="critical_hit_function" parameters="object_x" type="int">
  if (RandomChance (GetInt (object_x,"luck")) = true) {
    value = 2
  } else {
    value = 1
  }
  return (value)
</function>

<function name="leveling_function"><![CDATA[
  if (game.pov.experience_points >= game.pov.level * 100 + 100) {
    game.pov.experience_points = game.pov.experience_points - (game.pov.level * 100 + 100)
	game.pov.level = game.pov.level + 1
	leveling_function
  }
]]></function>

<function name="status_attributes_function">
  game.pov.hit_points = game.pov.current_hit_points + "/" + game.pov.maximum_hit_points
  game.pov.mana_points = game.pov.current_mana_points + "/" + game.pov.maximum_mana_points
</function>

</library>