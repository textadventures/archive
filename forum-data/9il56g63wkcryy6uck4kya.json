{
  "Topic": {
    "TopicId": "9il56g63wkcryy6uck4kya",
    "ForumId": "10",
    "Title": "How to compare multiple intergers?",
    "LastUpdated": "2017-08-18T17:58:06.4867654Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "33a04c10-f7a2-4443-9ad8-da68656797df",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you have multiple intergers, or something, how can you put the in a list and compare them greatest to least? Say, 4 intergers?",
      "EditableFormat": "markdown",
      "HTML": "<p>If you have multiple intergers, or something, how can you put the in a list and compare them greatest to least? Say, 4 intergers?</p>\n\n",
      "PostDate": "2017-08-18T17:58:06.4867654Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "48912c6c-8691-47db-bdd4-88d2500427b0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Something like this?\r\n\r\n```\r\nx = 1\r\ny = 2\r\nz = 3\r\nyy = 4\r\ngame.zz = o\r\nif (y > x) {\r\n  msg (\"y is greater than x\")\r\n}\r\nif (z > x) {\r\n  msg (\"z is greater than x\")\r\n}\r\nif ((z > x) and x < yy) {\r\n  game.zz = z + yy\r\n  msg (\"You have {game.zz} whatever{if game.zz<>1:s}\")\r\n}\r\nmsg (\"x is \" + x + \"<br/>y is \" + y + \"<br/>z is \" + z + \"<br/>yy is \" + yy + \"<br/>zz is \" + game.zz + \"\")\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Something like this?</p>\n<pre><code>x = 1\ny = 2\nz = 3\nyy = 4\ngame.zz = o\nif (y &gt; x) {\n  msg (\"y is greater than x\")\n}\nif (z &gt; x) {\n  msg (\"z is greater than x\")\n}\nif ((z &gt; x) and x &lt; yy) {\n  game.zz = z + yy\n  msg (\"You have {game.zz} whatever{if game.zz&lt;&gt;1:s}\")\n}\nmsg (\"x is \" + x + \"&lt;br/&gt;y is \" + y + \"&lt;br/&gt;z is \" + z + \"&lt;br/&gt;yy is \" + yy + \"&lt;br/&gt;zz is \" + game.zz + \"\")\n</code></pre>\n\n",
      "PostDate": "2017-08-18T20:57:00.19488Z",
      "LastEditDate": "2017-08-18T20:59:31.2172585Z",
      "link": null
    },
    {
      "PostId": "8071a4f2-03a6-4f3a-a67f-9357b1a320aa",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting edited post, updated/posted)\r\n\r\n-------------------- \r\n\r\nthis is a common intro programming program/assignment given in programming classes, which then leads into searching designs/algorithms (linear search, binary search, etc):\r\n\r\nfinding/getting the 'min' and 'max' Values of a bunch of data\r\n\r\n(you can do a lot more stuff too, but this is just the skeleton basics of this type of stuff)\r\n\r\n```\r\ngame.stringlist_attribute = split (\"4;44;55;0;66;7;8;9;5;99;6;7;1;2;3;12\", \";\")\r\ngame.max_integer_attribute = 0\r\ngame.min_integer_attribute = 0\r\n\r\n// linear search (this is actually extremely fast, as you most likely won't have a data quantity size where binary then becomes more efficient, and people don't realize that it actually comes down to the physics of the hardware, aka memory is contigious, and thus makes linear searches even faster than they should be when just looking at it mathematically with Big O notation / quantity of operations):\r\n\r\n// max_min_function (game.stringlist_attribute)\r\n\r\n<function name=\"max_min_function\"parameters=\"stringlist_parameter\">\r\n\r\n  <![CDATA[\r\n\r\n    // setting these both to the first data value in the list:\r\n\r\n    min_integer_variable = ToInt (StringListItem (stringlist_parameter, 0)) // for this example, the first value in the list is: 4 // min_integer_variable = 4\r\n    max_integer_variable = min_integer_variable // for this example, the first value in the list is: 4 // max_integer_variable = 4\r\n\r\n    // iterating through the list, check to see if each data value is greater or lower than the current min/max value, if so, then that new value replaces the old value, which will end with you having found the max and min values from the list:\r\n\r\n    foreach (string_variable, stringlist_parameter) {\r\n      integer_variable = ToInt (string_variable)\r\n      if (integer_variable > max_integer_variable) {\r\n        max_integer_variable = integer_variable\r\n      }\r\n      if (integer_variable < min_integer_variable) {\r\n        min_integer_variable = integer_variable\r\n      }\r\n    }\r\n\r\n   // storing the min/max values into Attributes, so you can use them. (Using a Function's 'return' only returns a single Data Value, so it's easier to just store the Values into Attributes, than having to return a Stringlist VARIABLE, for holding both values, and then splitting/getting those 2 values from the returned stringlist, lol. But, if you only got a single data Value, than if it fits your design, you can use the Function's 'return' instead):\r\n\r\n    game.max_integer_attribute = max_integer_variable\r\n    game.min_integer_attribute = min_integer_variable\r\n\r\n  ]]>\r\n\r\n</function>\r\n```\r\n\r\n-----------\r\n\r\nif interested in this stuff, google search:\r\n\r\nprogramming finding min max value algorithms\r\nprogramming searching algorithms\r\nlinear search\r\nbinary search\r\nprogramming sorting algorithms\r\nbig o notation",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting edited post, updated/posted)</p>\n<hr>\n<p>this is a common intro programming program/assignment given in programming classes, which then leads into searching designs/algorithms (linear search, binary search, etc):</p>\n<p>finding/getting the 'min' and 'max' Values of a bunch of data</p>\n<p>(you can do a lot more stuff too, but this is just the skeleton basics of this type of stuff)</p>\n<pre><code>game.stringlist_attribute = split (\"4;44;55;0;66;7;8;9;5;99;6;7;1;2;3;12\", \";\")\ngame.max_integer_attribute = 0\ngame.min_integer_attribute = 0\n\n// linear search (this is actually extremely fast, as you most likely won't have a data quantity size where binary then becomes more efficient, and people don't realize that it actually comes down to the physics of the hardware, aka memory is contigious, and thus makes linear searches even faster than they should be when just looking at it mathematically with Big O notation / quantity of operations):\n\n// max_min_function (game.stringlist_attribute)\n\n&lt;function name=\"max_min_function\"parameters=\"stringlist_parameter\"&gt;\n\n  &lt;![CDATA[\n\n    // setting these both to the first data value in the list:\n\n    min_integer_variable = ToInt (StringListItem (stringlist_parameter, 0)) // for this example, the first value in the list is: 4 // min_integer_variable = 4\n    max_integer_variable = min_integer_variable // for this example, the first value in the list is: 4 // max_integer_variable = 4\n\n    // iterating through the list, check to see if each data value is greater or lower than the current min/max value, if so, then that new value replaces the old value, which will end with you having found the max and min values from the list:\n\n    foreach (string_variable, stringlist_parameter) {\n      integer_variable = ToInt (string_variable)\n      if (integer_variable &gt; max_integer_variable) {\n        max_integer_variable = integer_variable\n      }\n      if (integer_variable &lt; min_integer_variable) {\n        min_integer_variable = integer_variable\n      }\n    }\n\n   // storing the min/max values into Attributes, so you can use them. (Using a Function's 'return' only returns a single Data Value, so it's easier to just store the Values into Attributes, than having to return a Stringlist VARIABLE, for holding both values, and then splitting/getting those 2 values from the returned stringlist, lol. But, if you only got a single data Value, than if it fits your design, you can use the Function's 'return' instead):\n\n    game.max_integer_attribute = max_integer_variable\n    game.min_integer_attribute = min_integer_variable\n\n  ]]&gt;\n\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>if interested in this stuff, google search:</p>\n<p>programming finding min max value algorithms<br>\nprogramming searching algorithms<br>\nlinear search<br>\nbinary search<br>\nprogramming sorting algorithms<br>\nbig o notation</p>\n\n",
      "PostDate": "2017-08-18T23:28:24.1725385Z",
      "LastEditDate": "2017-08-19T21:17:59.4568663Z",
      "link": null
    },
    {
      "PostId": "77b1657a-66d9-4bec-9e7b-2ecf3199fd88",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you want to actually sort the values (min to max or max to min), it's pretty much the exact same algorithm, except you'll be placing them into a new list, though you'll have to do a bit of creative thinking on how to do it.",
      "EditableFormat": "markdown",
      "HTML": "<p>if you want to actually sort the values (min to max or max to min), it's pretty much the exact same algorithm, except you'll be placing them into a new list, though you'll have to do a bit of creative thinking on how to do it.</p>\n\n",
      "PostDate": "2017-08-18T23:40:24.4943734Z",
      "LastEditDate": "2017-08-18T23:40:49.2888247Z",
      "link": null
    },
    {
      "PostId": "60486c98-befe-4f53-8a1a-d85b78d1e75d",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@KV Yeah.",
      "EditableFormat": "markdown",
      "HTML": "<p>@KV Yeah.</p>\n\n",
      "PostDate": "2017-08-19T19:42:56.7911403Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
