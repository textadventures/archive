{
  "Topic": {
    "TopicId": "oxnlsi0ti0eqpag4-xe1hg",
    "ForumId": "10",
    "Title": "Gamebook starting point",
    "LastUpdated": "2019-01-28T21:54:19.8284736Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "26cad71d-9013-48a9-8bf8-d36f2a761388",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I came across some old files recently. I'm wondering if it might be easy to convert them to a Quest game; I can't imagine it being too hard.\r\n\r\nThe main file I've got, `birthdaygames.cyoa`, looks something like this:\r\n```\r\n[11]\r\nDefault: 12\r\n\r\n[12]\r\nDefault: 12b\r\n\r\n[12b]\r\nDefault: 13\r\nOption: Ashamed -> 13\r\nOption: Grown up -> 24\r\nOption: Triumphant -> 25\r\n\r\n[13]\r\nOption: Cared for -> 28\r\nOption: Ashamed -> 14\r\nOption: Proud -> 29\r\n\r\n[14]\r\nTags: dd, ws\r\nOption: 1 year old -> 28\r\nOption: 8 years old -> 15\r\n\r\n[15]\r\nDefault: 16\r\n\r\n[16]\r\n(dd)    Default: 17\r\n(!dd)   Default: 27\r\n\r\n[17]\r\n(ws>=2) Option: Be little -> 20\r\n(ws<=1) Option: Be little -> 19\r\nOption: Stay here awhile -> 18\r\nOption: Grow up -> 21\r\n\r\n[18]\r\nTag: ws\r\nDefault: 19\r\nOption: Yes -> 20\r\nOption: No -> 21\r\n\r\n[19]\r\nTags: ws, dd\r\nOption: Continue -> 21\r\nDefault: 20\r\n\r\n[20]\r\nTags: dd, sc\r\nDefault: 21\r\n```\r\nIt's accompanied by a bundle of other files; HTML files with multiple body elements, so they look like `<body section=\"12b\">`. These contain everything but the option links.\r\n\r\nShould be pretty obvious this is a gamebook. And it seems obvious to me that I could write a simple script to run through it and spit out a `birthdaygames.aslx` file. What I'm wondering is how you'd go about doing it.\r\n\r\nI could:\r\n1. Include the gamebook core, and spit out each section as a page. **or**\r\n2. Include the core files, and a chunk of other Quest script to make a TA act like a gamebook **or**\r\n3. Build my own core module providing just the functions needed for this type of gamebook.\r\n\r\nI'll also be choosing to either:\r\n1. Include the HTML files in the game directory, and read them with `GetFileData`, **or**\r\n2. Stick all the pages in a single ASLX file\r\n\r\nWhich combination do you think would be most effective? How would you go about converting something like this?\r\n\r\n<hr />\r\n\r\nIn case anyone's curious, the only variables in this gamebook are \"tags\". It was originally intended such that conditions like `(ws>2)` display that option only if the 'thread' to the current location from the start of the game has passed through more than 2 pages with the `ws` tag.\r\n\r\nPages with a `default: ` option could presumably display a \"Press any key\" message. Or maybe \"Press space to continue\", or \"Scroll down to continue\". They're just like page breaks. As originally intended, the pages that have a 'default' *and* options don't display anything to hint that there is a default path. But the reader could scroll down past the list of options to continue without picking one. Maybe if I did \"Press space to continue\", then pressing space on a page with options will choose the default, an interesting easter-egg for anyone who'd like to see my intended progression through the game.\r\n\r\n(Also interesting that the default is usually one of the options available, but there's like 4 places out of ~200 sections where it's a hidden option, or what happens if the character waits without choosing)",
      "EditableFormat": "markdown",
      "HTML": "<p>I came across some old files recently. I'm wondering if it might be easy to convert them to a Quest game; I can't imagine it being too hard.</p>\n<p>The main file I've got, <code>birthdaygames.cyoa</code>, looks something like this:</p>\n<pre><code>[11]\nDefault: 12\n\n[12]\nDefault: 12b\n\n[12b]\nDefault: 13\nOption: Ashamed -&gt; 13\nOption: Grown up -&gt; 24\nOption: Triumphant -&gt; 25\n\n[13]\nOption: Cared for -&gt; 28\nOption: Ashamed -&gt; 14\nOption: Proud -&gt; 29\n\n[14]\nTags: dd, ws\nOption: 1 year old -&gt; 28\nOption: 8 years old -&gt; 15\n\n[15]\nDefault: 16\n\n[16]\n(dd)    Default: 17\n(!dd)   Default: 27\n\n[17]\n(ws&gt;=2) Option: Be little -&gt; 20\n(ws&lt;=1) Option: Be little -&gt; 19\nOption: Stay here awhile -&gt; 18\nOption: Grow up -&gt; 21\n\n[18]\nTag: ws\nDefault: 19\nOption: Yes -&gt; 20\nOption: No -&gt; 21\n\n[19]\nTags: ws, dd\nOption: Continue -&gt; 21\nDefault: 20\n\n[20]\nTags: dd, sc\nDefault: 21\n</code></pre>\n<p>It's accompanied by a bundle of other files; HTML files with multiple body elements, so they look like <code>&lt;body section=\"12b\"&gt;</code>. These contain everything but the option links.</p>\n<p>Should be pretty obvious this is a gamebook. And it seems obvious to me that I could write a simple script to run through it and spit out a <code>birthdaygames.aslx</code> file. What I'm wondering is how you'd go about doing it.</p>\n<p>I could:</p>\n<ol>\n<li>Include the gamebook core, and spit out each section as a page. <strong>or</strong></li>\n<li>Include the core files, and a chunk of other Quest script to make a TA act like a gamebook <strong>or</strong></li>\n<li>Build my own core module providing just the functions needed for this type of gamebook.</li>\n</ol>\n<p>I'll also be choosing to either:</p>\n<ol>\n<li>Include the HTML files in the game directory, and read them with <code>GetFileData</code>, <strong>or</strong></li>\n<li>Stick all the pages in a single ASLX file</li>\n</ol>\n<p>Which combination do you think would be most effective? How would you go about converting something like this?</p>\n<hr>\n<p>In case anyone's curious, the only variables in this gamebook are \"tags\". It was originally intended such that conditions like <code>(ws&gt;2)</code> display that option only if the 'thread' to the current location from the start of the game has passed through more than 2 pages with the <code>ws</code> tag.</p>\n<p>Pages with a <code>default:</code> option could presumably display a \"Press any key\" message. Or maybe \"Press space to continue\", or \"Scroll down to continue\". They're just like page breaks. As originally intended, the pages that have a 'default' <em>and</em> options don't display anything to hint that there is a default path. But the reader could scroll down past the list of options to continue without picking one. Maybe if I did \"Press space to continue\", then pressing space on a page with options will choose the default, an interesting easter-egg for anyone who'd like to see my intended progression through the game.</p>\n<p>(Also interesting that the default is usually one of the options available, but there's like 4 places out of ~200 sections where it's a hidden option, or what happens if the character waits without choosing)</p>\n\n",
      "PostDate": "2019-01-28T21:54:19.8284736Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
