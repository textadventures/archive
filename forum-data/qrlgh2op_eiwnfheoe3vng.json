{
  "Topic": {
    "TopicId": "qrlgh2op_eiwnfheoe3vng",
    "ForumId": "10",
    "Title": "Any way to make a limit for an attribute so that it wouldn't rise/fall after a certain point?",
    "LastUpdated": "2018-08-16T18:41:04.9060014Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b541bf81-ebad-4580-b624-556d05ce03d7",
      "UserId": 321921,
      "Username": "coms77",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Like, if I want to create a hunger stat for my character, how could I make the hunger stat not to fall below 0/above 100?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Like, if I want to create a hunger stat for my character, how could I make the hunger stat not to fall below 0/above 100?</p>\n\n",
      "PostDate": "2018-08-16T18:41:04.9060014Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "97a961b2-c155-4108-9618-87285ea9f68a",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Simple...\r\nif (player.hunger<0) {\r\n  player.hunger=0\r\n}\r\n\r\nif (player.hunger>100) {\r\n  player.hunger=100\r\n}\r\n\r\nAltho, Quest get confused when you use the \"<\" sometimes because that is part of a command structure.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Simple...<br>\nif (player.hunger&lt;0) {<br>\nplayer.hunger=0<br>\n}</p>\n<p>if (player.hunger&gt;100) {<br>\nplayer.hunger=100<br>\n}</p>\n<p>Altho, Quest get confused when you use the \"&lt;\" sometimes because that is part of a command structure.</p>\n\n",
      "PostDate": "2018-08-16T19:51:19.5950671Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3d8e959f-eb9b-4a4e-a8db-56da4a58dc3b",
      "UserId": 321921,
      "Username": "coms77",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh god, it was that simple. Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh god, it was that simple. Thanks!</p>\n\n",
      "PostDate": "2018-08-16T20:22:08.1757982Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6a0d5f6a-e6e9-43cb-b404-d9b65de61bef",
      "UserId": 321921,
      "Username": "coms77",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "But where do I place the code? In the timer?",
      "EditableFormat": "markdown",
      "HTML": "<p>But where do I place the code? In the timer?</p>\n\n",
      "PostDate": "2018-08-16T20:23:11.2302525Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3580d666-9a17-4e1f-9010-28f338fe4176",
      "UserId": 321921,
      "Username": "coms77",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Never mind, I figured it out\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Never mind, I figured it out</p>\n\n",
      "PostDate": "2018-08-16T21:05:54.0820397Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c0026e3a-326e-4111-ac4d-5970ca894466",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's 2 ways you could do this. Either put it in the code every time you modify the hunger stat (the way you'd do it in most programming languages) **or** if you give the player object a script attribute named `changedhunger`, it will automatically be run every time their `hunger` attribute changes.",
      "EditableFormat": "markdown",
      "HTML": "<p>There's 2 ways you could do this. Either put it in the code every time you modify the hunger stat (the way you'd do it in most programming languages) <strong>or</strong> if you give the player object a script attribute named <code>changedhunger</code>, it will automatically be run every time their <code>hunger</code> attribute changes.</p>\n\n",
      "PostDate": "2018-08-16T21:33:44.2213423Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0ef53844-69da-4154-bd4e-0a37d2610099",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I used DarkLizerd's method and implemented it in a turnscript, which checks for all of the min/max stats. \r\n\r\nmrangel, can you make a example with *changedhunger*, please? ",
      "EditableFormat": "markdown",
      "HTML": "<p>I used DarkLizerd's method and implemented it in a turnscript, which checks for all of the min/max stats.</p>\n<p>mrangel, can you make a example with <em>changedhunger</em>, please?</p>\n\n",
      "PostDate": "2018-08-17T04:41:22.881474Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bc2b4992-59c9-4ae0-bd3a-c48fb156b514",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ Curt A.P.\r\n\r\n(I'm not mrangel, but here's an example)\r\n\r\n(when 'player.hunger_current' reaches 100, you die, you become 'dead', player.condition=\"dead\", for this example)\r\n\r\n(the 'player.hunger' String Attribute is merely for the displayment of 'CUR/MAX' hunger)\r\n\r\n(in this code example of mine, the 'this' is the same as 'player', so within this post, you inter-exchange them)\r\n\r\n(within the 'changedhunger_current' and 'changedhunger_maximum', the 'this.hunger = this.hunger_current + \"/\" this.hunger_maximum' is what updates the 'player.hunger', and then that new updated value/expression for the 'player.hunger', gets displayed by the 'player.statusattributes')\r\n\r\nmy example code's status pane (initial) displayment (and it'll update itself upon changing the Attributes' Values):\r\n\r\nHunger: 0/100\r\nCondition: normal\r\n\r\n---------\r\n\r\n```\r\n<object name=\"player\">\r\n\r\n  <attr name=\"condition\" type=\"string\">normal</attr>\r\n\r\n  <attr name=\"hunger\" type=\"string\">0/100</attr>\r\n\r\n  <attr name=\"hunger_current\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"hunger_maximum\" type=\"int\">100</attr>\r\n\r\n  <attr name=\"hunger_minimum\" type=\"int\">0</attr>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>hunger</key>\r\n      <value>Hunger: !</value>\r\n    <item>\r\n\r\n    <item>\r\n      <key>condition</key>\r\n      <value>Condition: !</value>\r\n    <item>\r\n\r\n  </statusattributes>\r\n\r\n  <attr name=\"changedhunger_current\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (this.hunger_current > this.hunger_maximum) {\r\n        this.hunger_current = this.hunger_maximum\r\n      } else if (this.hunger_current < this.hunger_minimum) {\r\n        this.hunger_current = this.hunger_minimum\r\n      }\r\n\r\n      this.hunger = this.hunger_current + \"/\" + this.hunger_maximum\r\n\r\n      if (this.hunger_current = this.hunger_maximum) {\r\n        this.condition = \"dead\"\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <attr name=\"changedhunger_maximum\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (this.hunger_current > this.hunger_maximum) {\r\n        this.hunger_current = this.hunger_maximum\r\n      }\r\n\r\n      this.hunger = this.hunger_current + \"/\" + this.hunger_maximum\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@ Curt A.P.</p>\n<p>(I'm not mrangel, but here's an example)</p>\n<p>(when 'player.hunger_current' reaches 100, you die, you become 'dead', player.condition=\"dead\", for this example)</p>\n<p>(the 'player.hunger' String Attribute is merely for the displayment of 'CUR/MAX' hunger)</p>\n<p>(in this code example of mine, the 'this' is the same as 'player', so within this post, you inter-exchange them)</p>\n<p>(within the 'changedhunger_current' and 'changedhunger_maximum', the 'this.hunger = this.hunger_current + \"/\" this.hunger_maximum' is what updates the 'player.hunger', and then that new updated value/expression for the 'player.hunger', gets displayed by the 'player.statusattributes')</p>\n<p>my example code's status pane (initial) displayment (and it'll update itself upon changing the Attributes' Values):</p>\n<p>Hunger: 0/100<br>\nCondition: normal</p>\n<hr>\n<pre><code>&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"condition\" type=\"string\"&gt;normal&lt;/attr&gt;\n\n  &lt;attr name=\"hunger\" type=\"string\"&gt;0/100&lt;/attr&gt;\n\n  &lt;attr name=\"hunger_current\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"hunger_maximum\" type=\"int\"&gt;100&lt;/attr&gt;\n\n  &lt;attr name=\"hunger_minimum\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;hunger&lt;/key&gt;\n      &lt;value&gt;Hunger: !&lt;/value&gt;\n    &lt;item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;condition&lt;/key&gt;\n      &lt;value&gt;Condition: !&lt;/value&gt;\n    &lt;item&gt;\n\n  &lt;/statusattributes&gt;\n\n  &lt;attr name=\"changedhunger_current\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (this.hunger_current &gt; this.hunger_maximum) {\n        this.hunger_current = this.hunger_maximum\n      } else if (this.hunger_current &lt; this.hunger_minimum) {\n        this.hunger_current = this.hunger_minimum\n      }\n\n      this.hunger = this.hunger_current + \"/\" + this.hunger_maximum\n\n      if (this.hunger_current = this.hunger_maximum) {\n        this.condition = \"dead\"\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"changedhunger_maximum\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (this.hunger_current &gt; this.hunger_maximum) {\n        this.hunger_current = this.hunger_maximum\n      }\n\n      this.hunger = this.hunger_current + \"/\" + this.hunger_maximum\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2018-08-17T06:26:11.097863Z",
      "LastEditDate": "2018-08-17T06:37:13.3651327Z",
      "link": null
    },
    {
      "PostId": "8c2f5deb-5df7-49d7-9863-a524eff733e4",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ hegemonkhan\r\n\r\nEh, this is tough... Sorry, I can't say I understand what's happening in this script, yet. Biggest problem is, I don't know what a script attribute is... ",
      "EditableFormat": "markdown",
      "HTML": "<p>@ hegemonkhan</p>\n<p>Eh, this is tough... Sorry, I can't say I understand what's happening in this script, yet. Biggest problem is, I don't know what a script attribute is...</p>\n\n",
      "PostDate": "2018-08-22T21:28:55.167346Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ae2d6e65-4999-4320-8828-d1edb27d63dd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n----------------------------------\r\n.\r\n.\r\n**@ Curt A.P.**\r\n.\r\n.\r\n**here's how to do it step by step in the GUI/Editor:**\r\n.\r\n(if you still need help, or need anything explained, let me know!)\r\n.\r\n.\r\n(upon doing this in the GUI/Editor, it'll look the same in your entire game code view as seen in my post above, as doing this in the GUI/Editor, causes quest to do what I've done directly in code in my previous post, for you... but it's so much easier just doing it in code directly, lol.... once you understand coding... once I learned to code, I've not used the GUI/Editor ever since... lol. It's not too hard to learn to code in/with quest... and it makes, making your game, so much easier, so much faster, and you can do so much more cool stuff too)\r\n.\r\n.\r\n(if my use of 'this.NAME_OF_ATTRIBUTE' is confusing you, you can, and if you do: you MUST, replace all of the code segments of 'this.NAME_OF_ATTRIBUTE' with 'player.NAME_OF_ATTRIBUTE', and also, you MUST NOT change the name of the 'player' Player Object, or if you want/need the 'player' Player Object to be a different name than 'player', then just replace all of the same code segments with 'NAME_OF_PLAYER_OBJECT.NAME_OF_ATTRIBUTE', and hopefully obviously, you replace all of my upper case stuff with what you're naming/calling them as, I hope it's obvious anyways, lol)\r\n.\r\n.\r\n```\r\ncreating/setting the Attributes (and their initial Values):\r\n\r\n--------------------------------------------------\r\n\r\nthe \"normal\" Attributes (String, Integer: int, Double, Boolean, Object reference/pointer, and Script Attributes):\r\n\r\n(we're only using/creating 'String, Integer: int, and Script' Attributes for the \"normal\" Attributes of this code example)\r\n\r\n'player' Player Object -> 'Attributes' Tab -> Attributes (box at the bottom) -> Add -> (see below, repeat as needed)\r\n\r\n(Object Name: player)\r\nAttribute Name: condition\r\nAttribute Type: string\r\nAttribute Value: normal\r\n\r\n(Object Name: player)\r\nAttribute Name: hunger\r\nAttribute Type: string\r\nAttribute Value: 0/100\r\n\r\n(Object Name: player)\r\nAttribute Name: hunger_current\r\nAttribute Type: int // (int: integer)\r\nAttribute Value: 0\r\n\r\n(Object Name: player)\r\nAttribute Name: hunger_minimum\r\nAttribute Type: int // (int: integer)\r\nAttribute Value: 0\r\n\r\n(Object Name: player)\r\nAttribute Name: hunger_maximum\r\nAttribute Type: int // (int: integer)\r\nAttribute Value: 100\r\n\r\n(Object Name: player)\r\nAttribute Name: changedhunger_current\r\nAttribute Type: script\r\nAttribute Value: (see below)\r\n\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] this.hunger_current > this.hunger_maximum\r\n\r\n-> then -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.hunger_current = [EXPRESSION] this.hunger_maximum\r\n\r\nelse if [EXPRESSION] this.hunger_current < this.hunger_minimum\r\n\r\n-> then -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.hunger_current = [EXPRESSION] this.hunger_minimum\r\n\r\nadd new script ->  'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.hunger = [EXPRESSION] this.hunger_current + \"/\" + this.hunger_maximum\r\n\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] this.hunger_current = this.hunger_maximum\r\n\r\n-> then -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.condition = [EXPRESSION] \"dead\"\r\n\r\n(Object Name: player)\r\nAttribute Name: changedhunger_maximum\r\nAttribute Type: script\r\nAttribute Value: (see below)\r\n\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] this.hunger_current > this.hunger_maximum\r\n\r\n-> then -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.hunger_current = [EXPRESSION] this.hunger_maximum\r\n\r\nadd new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable this.hunger = [EXPRESSION] this.hunger_current + \"/\" + this.hunger_maximum\r\n\r\n--------------------------------------\r\n\r\nthe \"advanced\" Attributes (List and Dictionary Attributes):\r\n\r\n(we're only using/creating/over-riding/over-writing the built-in 'statusattributes' String Dictionary Attribute for the \"advanced\" Attributes in this code example)\r\n\r\n'player' Player Object -> 'Attributes' Tab -> Status Attributes (box at the top) -> Add -> (see below, repeat as needed)\r\n\r\nItem 1 of the built-in 'statusattributes' String Dictionary Attribute of/on (contained within) the 'player' Player Object:\r\n\r\n(Object Name: player)\r\nItem 1's 'Key' (its input value, as a String): (this is the 'Attribute Name' directly below)\r\nAttribute Name: hunger\r\nItem 1's 'Value' (its output value, as a String): (this is the 'Format String' directly below)\r\nFormat String: Hunger: !\r\n\r\nitem 2 of the built-in 'statusattributes' String Dictionary Attribute of/on (contained within) the 'player' Player Object:\r\n\r\n(Object Name: player)\r\nItem 2's 'Key' (its input value, as a String): (this is the 'Attribute Name' directly below)\r\nAttribute Name: condition\r\nItem 2's 'Value' (its output value, as a String): (this is the 'Format String' directly below)\r\nFormat String: Condition: !\r\n\r\n-------------------------------\r\n\r\nConceptually About:\r\n\r\nList/Dictionary Attributes are literally just 'input-output' functionality !!!\r\n\r\nList Attributes:\r\n\r\neach item is automatically given its index number, starting at '0' (NOT 1 --- this takes awhile to get used to: index number vs the item number, for example: 7th item = 6 index number), and increases by 1 with each item\r\n\r\nString List Attributes:\r\n\r\nItem 1:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 0\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_1\"\r\n\r\nItem 2:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Input Value Input): 1\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_2\"\r\n\r\nItem 3:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 2\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_3\"\r\n\r\nItem 4:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 3\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_4\"\r\n\r\netc more or less items\r\n\r\nObject List Attributes:\r\n\r\nItem 1:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 0\r\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_1\r\n\r\nItem 2:\r\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 1\r\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_2\r\n\r\netc more or less items\r\n\r\nDictionary Attributes:\r\n\r\nString Dictionary Attributes:\r\n\r\nItem 1:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_1\"\r\n\r\nItem 2:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\r\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_2\"\r\n\r\netc more or less items\r\n\r\nObject Dictionary Attributes:\r\n\r\nItem 1:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\r\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_1\r\n\r\nItem 2:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\r\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_2\r\n\r\netc more or less items\r\n\r\nScript Attributes:\r\n\r\nItem 1:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\r\nOutput (known as its 'Value', as a Script Value Output, aka: add new script/s): (add new script/s)\r\n\r\nItem 2:\r\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\r\nOutput (known as its 'Value', as a Script Value Output, aka: add new script/s): (add new script/s)\r\n\r\netc more or less items\r\n\r\n-----------\r\n\r\nusing List/Dictionary Attributes:\r\n\r\nVARIABLE <===  ListItem (LIST, INPUT: index number)\r\n// VARIABLE <=== (returned output from the 'StringListItem' Function)\r\n\r\nVARIABLE <===  DictionaryItem (DICT, INPUT)\r\n// VARIABLE <=== (returned output from the 'DictionaryItem' Function)\r\n\r\n(there's also the specific return value type Functions too: StringListItem, ObjectListItem, StringDictionaryItem, ObjectDictionaryItem, and ScriptDictionaryItem)\r\n\r\nexample using a String List 'Variable' VARIABLE (instead of an 'Attribute' VARIABLE, as it's quicker to do/write it, lol), in code:\r\n\r\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\r\nlist_count_integer_variable = ListCount (string_list_variable)\r\nlast_index_number_integer_variable = list_count_integer_variable - 1\r\nfirst_index_number_integer_variable = 0\r\nrandom_list_viable_index_number_integer_variable = GetRandomInt (first_index_number_integer_variable, last_index_number_integer_variable)\r\nstring_variable = StringListItem (string_list_variable, random_list_viable_index_number_integer_variable)\r\nmsg (string_variable\r\n// it'll display either (only one of them):\r\n// red\r\n// (or)\r\n// blue\r\n// (or)\r\n// yellow\r\n\r\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\r\nstring_variable = StringListItem (string_list_variable, 0)\r\nmsg (string_variable)\r\n// displays:\r\n// red\r\n\r\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\r\nstring_variable = StringListItem (string_list_variable, 1)\r\nmsg (string_variable)\r\n// displays:\r\n// blue\r\n\r\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\r\nstring_variable = StringListItem (string_list_variable, 2)\r\nmsg (string_variable)\r\n// displays:\r\n// yellow\r\n\r\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\r\nstring_variable = StringListItem (string_list_variable, 3)\r\nmsg (string_variable)\r\n// ERROR! (there is no 4th item!)\r\n\r\n------------------\r\n\r\nthe 'Split' Function ONLY works for String Lists and String Dictionaries (well, I don't know if it works for Script Dictionary or not, but it does NOT work for Object Lists and Object Dictionaries):\r\n\r\notherwise, you HAVE TO (or can always just) use the 'NewList ()', NewDictionary (), NewStringList (), or NewObjectList' Functions, (and you may also be able to use the 'Set' Script/Function too, but am not sure), for example (using a String List):\r\n\r\n// creating/setting a new/blank/(no-item) List/Dictionary, an (again, the) example (below uses a String List):\r\n\r\nstring_list_variable = NewStringList ()\r\n\r\n// and then adding in the items to it:\r\n\r\nlist add (string_list_variable, \"red\")\r\nlist add (string_list_variable, \"blue\")\r\nlist add (string_list_variable, \"yellow\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>.<br>\n.<br>\n<strong>@ Curt A.P.</strong><br>\n.<br>\n.<br>\n<strong>here's how to do it step by step in the GUI/Editor:</strong><br>\n.<br>\n(if you still need help, or need anything explained, let me know!)<br>\n.<br>\n.<br>\n(upon doing this in the GUI/Editor, it'll look the same in your entire game code view as seen in my post above, as doing this in the GUI/Editor, causes quest to do what I've done directly in code in my previous post, for you... but it's so much easier just doing it in code directly, lol.... once you understand coding... once I learned to code, I've not used the GUI/Editor ever since... lol. It's not too hard to learn to code in/with quest... and it makes, making your game, so much easier, so much faster, and you can do so much more cool stuff too)<br>\n.<br>\n.<br>\n(if my use of 'this.NAME_OF_ATTRIBUTE' is confusing you, you can, and if you do: you MUST, replace all of the code segments of 'this.NAME_OF_ATTRIBUTE' with 'player.NAME_OF_ATTRIBUTE', and also, you MUST NOT change the name of the 'player' Player Object, or if you want/need the 'player' Player Object to be a different name than 'player', then just replace all of the same code segments with 'NAME_OF_PLAYER_OBJECT.NAME_OF_ATTRIBUTE', and hopefully obviously, you replace all of my upper case stuff with what you're naming/calling them as, I hope it's obvious anyways, lol)<br>\n.<br>\n.</p>\n<pre><code>creating/setting the Attributes (and their initial Values):\n\n--------------------------------------------------\n\nthe \"normal\" Attributes (String, Integer: int, Double, Boolean, Object reference/pointer, and Script Attributes):\n\n(we're only using/creating 'String, Integer: int, and Script' Attributes for the \"normal\" Attributes of this code example)\n\n'player' Player Object -&gt; 'Attributes' Tab -&gt; Attributes (box at the bottom) -&gt; Add -&gt; (see below, repeat as needed)\n\n(Object Name: player)\nAttribute Name: condition\nAttribute Type: string\nAttribute Value: normal\n\n(Object Name: player)\nAttribute Name: hunger\nAttribute Type: string\nAttribute Value: 0/100\n\n(Object Name: player)\nAttribute Name: hunger_current\nAttribute Type: int // (int: integer)\nAttribute Value: 0\n\n(Object Name: player)\nAttribute Name: hunger_minimum\nAttribute Type: int // (int: integer)\nAttribute Value: 0\n\n(Object Name: player)\nAttribute Name: hunger_maximum\nAttribute Type: int // (int: integer)\nAttribute Value: 100\n\n(Object Name: player)\nAttribute Name: changedhunger_current\nAttribute Type: script\nAttribute Value: (see below)\n\nadd new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] this.hunger_current &gt; this.hunger_maximum\n\n-&gt; then -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.hunger_current = [EXPRESSION] this.hunger_maximum\n\nelse if [EXPRESSION] this.hunger_current &lt; this.hunger_minimum\n\n-&gt; then -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.hunger_current = [EXPRESSION] this.hunger_minimum\n\nadd new script -&gt;  'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.hunger = [EXPRESSION] this.hunger_current + \"/\" + this.hunger_maximum\n\nadd new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] this.hunger_current = this.hunger_maximum\n\n-&gt; then -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.condition = [EXPRESSION] \"dead\"\n\n(Object Name: player)\nAttribute Name: changedhunger_maximum\nAttribute Type: script\nAttribute Value: (see below)\n\nadd new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] this.hunger_current &gt; this.hunger_maximum\n\n-&gt; then -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.hunger_current = [EXPRESSION] this.hunger_maximum\n\nadd new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)\n\nset variable this.hunger = [EXPRESSION] this.hunger_current + \"/\" + this.hunger_maximum\n\n--------------------------------------\n\nthe \"advanced\" Attributes (List and Dictionary Attributes):\n\n(we're only using/creating/over-riding/over-writing the built-in 'statusattributes' String Dictionary Attribute for the \"advanced\" Attributes in this code example)\n\n'player' Player Object -&gt; 'Attributes' Tab -&gt; Status Attributes (box at the top) -&gt; Add -&gt; (see below, repeat as needed)\n\nItem 1 of the built-in 'statusattributes' String Dictionary Attribute of/on (contained within) the 'player' Player Object:\n\n(Object Name: player)\nItem 1's 'Key' (its input value, as a String): (this is the 'Attribute Name' directly below)\nAttribute Name: hunger\nItem 1's 'Value' (its output value, as a String): (this is the 'Format String' directly below)\nFormat String: Hunger: !\n\nitem 2 of the built-in 'statusattributes' String Dictionary Attribute of/on (contained within) the 'player' Player Object:\n\n(Object Name: player)\nItem 2's 'Key' (its input value, as a String): (this is the 'Attribute Name' directly below)\nAttribute Name: condition\nItem 2's 'Value' (its output value, as a String): (this is the 'Format String' directly below)\nFormat String: Condition: !\n\n-------------------------------\n\nConceptually About:\n\nList/Dictionary Attributes are literally just 'input-output' functionality !!!\n\nList Attributes:\n\neach item is automatically given its index number, starting at '0' (NOT 1 --- this takes awhile to get used to: index number vs the item number, for example: 7th item = 6 index number), and increases by 1 with each item\n\nString List Attributes:\n\nItem 1:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 0\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_1\"\n\nItem 2:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Input Value Input): 1\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_2\"\n\nItem 3:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 2\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_3\"\n\nItem 4:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 3\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_4\"\n\netc more or less items\n\nObject List Attributes:\n\nItem 1:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 0\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_1\n\nItem 2:\nInput (known as its 'Key', and as its 'index number', as a String/Integer Value Input): 1\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_2\n\netc more or less items\n\nDictionary Attributes:\n\nString Dictionary Attributes:\n\nItem 1:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_1\"\n\nItem 2:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\nOutput (known as its 'Value', as a String Value Output): \"WHATEVER_OUTPUT_2\"\n\netc more or less items\n\nObject Dictionary Attributes:\n\nItem 1:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_1\n\nItem 2:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\nOutput (known as its 'Value', as an Object reference/pointer Value Output, aka: the name of the Object): WHATEVER_NAME_OF_OBJECT_2\n\netc more or less items\n\nScript Attributes:\n\nItem 1:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_1\"\nOutput (known as its 'Value', as a Script Value Output, aka: add new script/s): (add new script/s)\n\nItem 2:\nInput (known as its 'Key', as a String/Integer Value Input): \"WHATEVER_INPUT_2\"\nOutput (known as its 'Value', as a Script Value Output, aka: add new script/s): (add new script/s)\n\netc more or less items\n\n-----------\n\nusing List/Dictionary Attributes:\n\nVARIABLE &lt;===  ListItem (LIST, INPUT: index number)\n// VARIABLE &lt;=== (returned output from the 'StringListItem' Function)\n\nVARIABLE &lt;===  DictionaryItem (DICT, INPUT)\n// VARIABLE &lt;=== (returned output from the 'DictionaryItem' Function)\n\n(there's also the specific return value type Functions too: StringListItem, ObjectListItem, StringDictionaryItem, ObjectDictionaryItem, and ScriptDictionaryItem)\n\nexample using a String List 'Variable' VARIABLE (instead of an 'Attribute' VARIABLE, as it's quicker to do/write it, lol), in code:\n\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\nlist_count_integer_variable = ListCount (string_list_variable)\nlast_index_number_integer_variable = list_count_integer_variable - 1\nfirst_index_number_integer_variable = 0\nrandom_list_viable_index_number_integer_variable = GetRandomInt (first_index_number_integer_variable, last_index_number_integer_variable)\nstring_variable = StringListItem (string_list_variable, random_list_viable_index_number_integer_variable)\nmsg (string_variable\n// it'll display either (only one of them):\n// red\n// (or)\n// blue\n// (or)\n// yellow\n\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\nstring_variable = StringListItem (string_list_variable, 0)\nmsg (string_variable)\n// displays:\n// red\n\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\nstring_variable = StringListItem (string_list_variable, 1)\nmsg (string_variable)\n// displays:\n// blue\n\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\nstring_variable = StringListItem (string_list_variable, 2)\nmsg (string_variable)\n// displays:\n// yellow\n\nstring_list_variable = Split (\"red;blue;yellow\", \";\")\nstring_variable = StringListItem (string_list_variable, 3)\nmsg (string_variable)\n// ERROR! (there is no 4th item!)\n\n------------------\n\nthe 'Split' Function ONLY works for String Lists and String Dictionaries (well, I don't know if it works for Script Dictionary or not, but it does NOT work for Object Lists and Object Dictionaries):\n\notherwise, you HAVE TO (or can always just) use the 'NewList ()', NewDictionary (), NewStringList (), or NewObjectList' Functions, (and you may also be able to use the 'Set' Script/Function too, but am not sure), for example (using a String List):\n\n// creating/setting a new/blank/(no-item) List/Dictionary, an (again, the) example (below uses a String List):\n\nstring_list_variable = NewStringList ()\n\n// and then adding in the items to it:\n\nlist add (string_list_variable, \"red\")\nlist add (string_list_variable, \"blue\")\nlist add (string_list_variable, \"yellow\")\n</code></pre>\n\n",
      "PostDate": "2018-08-23T02:35:37.1072026Z",
      "LastEditDate": "2018-08-23T03:18:00.4810099Z",
      "link": null
    }
  ]
}
