{
  "Topic": {
    "TopicId": "zp9qw8veqemsr-houbxfgg",
    "ForumId": "10",
    "Title": "Verb abuse - attributes for the web editor",
    "LastUpdated": "2020-12-24T17:09:57.391792Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "aecfc872-4b41-4eb3-b5af-2d35a1d0d7fd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is something I've done a few times, but not sure if I ever shared. So if there's anyone else using the Quest web editor (for example because you've not got a Windows PC to run the desktop one), I thought it might be worth making a little post.\r\n\r\nYou presumably know that you can add attributes to an object by using its initialisation script; but this can be a little awkward when you have to enable it for every object. So why not abuse the verb system?\r\n\r\nFor example, I want to give every monster in my RPG a message which it says when it's defeated.\r\nSo I give each monster a verb called \"defeatmsg\", and give it a text response. I now have a string attribute named `defeatmsg`, which I can use however I want.\r\n\r\nOr another example. I've got a simple shop system, and I want some items to run a script when they're purchased. There's already a script to run after the player takes an object, but maybe I want something to run after the player buys something. Maybe some weapons have a random chance of coming with ammo, and the type is only determined after you buy it. And I need an attribute for the price as well. So I create a verb \"price\", and a verb \"buy\". The price is going to be a string; that's not a problem.\r\n\r\nBut then… what if the player types \"defeatmsg dragon\" or \"price sword\"? Even worse, what if they type \"buy shotgun\" and its initialisation happens early?\r\n\r\nWell, there's a simple way around that. In the start script, I could put:\r\n```\r\ndestroy (\"price\")\r\ndestroy (\"defeatmsg\")\r\n```\r\nto delete the verbs. Then I'd just have normal attributes. However, this isn't ideal. Quest builds a dictionary of verbs during initialisation, and deleting verbs at this point could cause errors in some circumstances, or cause the verbs that no longer exist to appear in automatically-generated verb menus.\r\n\r\nIt's better to do this in the UI Initialisation script - but that is also run when a saved game is loaded, so you need to check if the game is currently running, but in Quest that isn't hard.\r\n\r\nThere's a couple of other little tweaks as well, which make it a little more intuitive during the editing process. I can just do this once, and than use my \"Verbs\" tab as if it were the desktop editor's \"attributes\" tab.\r\nSo now my UI Initialisation script looks like this:\r\n```\r\n// Only do this when initialising the game for the first time\r\nfirsttime {\r\n\r\n  // destroy the command objects for the verbs that aren't actually verbs\r\n  destroy (\"price\")\r\n  destroy (\"defeatmsg\")\r\n\r\n  // We can convert the \"price\" attribute to an int as we start, to save effort later\r\n  foreach (obj, AllObjects()) {\r\n    if (HasString (obj, \"price\")) {\r\n      if (IsInt (obj.price)) {\r\n        obj.price = ToInt (obj.price)\r\n      }\r\n    }\r\n  }\r\n\r\n  // I'm not going to destroy 'buy', because it's useful. I just want it to not behave like a standard verb\r\n  // ... this means that the \"Buy\" menu will show up on the verbs list of any object with a \"price\"\r\n  //     attribute, even though that isn't the name of the verb\r\n  buy.property = \"price\"\r\n  // ... and we change the 'script' for the buy command, so it does what we want:\r\n  buy.script => {\r\n    if (Got (object)) {\r\n      msg (\"You already have it!\")\r\n    }\r\n    else  if (not IsShop (game.pov.parent)) {\r\n      // assuming that function esists\r\n      msg (\"This isn't a shop.\")\r\n    }\r\n    else if (HasString (object, \"price\")) {\r\n      // If the 'price' is a non-numeric string, assume it's a message saying why you can't buy it\r\n      msg (object.price)\r\n    }\r\n    else if (not HasInt (object, \"price\")) {\r\n      msg (CapFirst (WriteVerb (object, \"isn't\")) + \" for sale.\")\r\n    }\r\n    else if (object.price >= game.pov.money) {\r\n      msg (CapFirst (WriteVerb (object, \"cost\")) + \" \" + DisplayMoney (object.price) + \" and you only have \" + DisplayMoney (game.pov.money) + \".\")\r\n    }\r\n    else {\r\n      // No problems buying that!\r\n      AddToInventory (object)\r\n      if (HasString (object, \"buy\")) {\r\n        msg (object.buy)\r\n      }\r\n      else if (HasScript (object, \"buy\")) {\r\n        do (object, \"buy\")\r\n      }\r\n      else {\r\n        msg (\"You buy the {object:\" + object.name + \"}.\")\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBasically, once the game starts verbs are treated like any other command. You can change their attributes in the UI Initialisation script to change the way they behave:\r\n* `property` is the name of the attribute that the verb checks for, when deciding whether or not it will appear in an automatically generated verb menu\r\n     * Note that you can set this to `null` if you don't want it on the generated verbs list, or set the `property` attribute of any command if you do want it to appear\r\n* `displayverb` is the name that will display on those verb menus\r\n* `script` is the script that will run for the command. By default, for verbs, it checks if the object has a string or script in the atribute named in `property`, and displays/runs it. But you can replace it with any script you want.\r\n* `pattern` is a regexp to match the command. For the buy command, it will be `^(buy|purchase) (?<object>.+)$`, but you can change it at any time before the first command is run.\r\n\r\n\r\nOK, this post is longer than I intended. But hopefully, I've shown that you can use the \"Verbs\" tab for things it was never intended for, in order to make editing using the web editor just a little easier.",
      "EditableFormat": "markdown",
      "HTML": "<p>This is something I've done a few times, but not sure if I ever shared. So if there's anyone else using the Quest web editor (for example because you've not got a Windows PC to run the desktop one), I thought it might be worth making a little post.</p>\n<p>You presumably know that you can add attributes to an object by using its initialisation script; but this can be a little awkward when you have to enable it for every object. So why not abuse the verb system?</p>\n<p>For example, I want to give every monster in my RPG a message which it says when it's defeated.<br>\nSo I give each monster a verb called \"defeatmsg\", and give it a text response. I now have a string attribute named <code>defeatmsg</code>, which I can use however I want.</p>\n<p>Or another example. I've got a simple shop system, and I want some items to run a script when they're purchased. There's already a script to run after the player takes an object, but maybe I want something to run after the player buys something. Maybe some weapons have a random chance of coming with ammo, and the type is only determined after you buy it. And I need an attribute for the price as well. So I create a verb \"price\", and a verb \"buy\". The price is going to be a string; that's not a problem.</p>\n<p>But then… what if the player types \"defeatmsg dragon\" or \"price sword\"? Even worse, what if they type \"buy shotgun\" and its initialisation happens early?</p>\n<p>Well, there's a simple way around that. In the start script, I could put:</p>\n<pre><code>destroy (\"price\")\ndestroy (\"defeatmsg\")\n</code></pre>\n<p>to delete the verbs. Then I'd just have normal attributes. However, this isn't ideal. Quest builds a dictionary of verbs during initialisation, and deleting verbs at this point could cause errors in some circumstances, or cause the verbs that no longer exist to appear in automatically-generated verb menus.</p>\n<p>It's better to do this in the UI Initialisation script - but that is also run when a saved game is loaded, so you need to check if the game is currently running, but in Quest that isn't hard.</p>\n<p>There's a couple of other little tweaks as well, which make it a little more intuitive during the editing process. I can just do this once, and than use my \"Verbs\" tab as if it were the desktop editor's \"attributes\" tab.<br>\nSo now my UI Initialisation script looks like this:</p>\n<pre><code>// Only do this when initialising the game for the first time\nfirsttime {\n\n  // destroy the command objects for the verbs that aren't actually verbs\n  destroy (\"price\")\n  destroy (\"defeatmsg\")\n\n  // We can convert the \"price\" attribute to an int as we start, to save effort later\n  foreach (obj, AllObjects()) {\n    if (HasString (obj, \"price\")) {\n      if (IsInt (obj.price)) {\n        obj.price = ToInt (obj.price)\n      }\n    }\n  }\n\n  // I'm not going to destroy 'buy', because it's useful. I just want it to not behave like a standard verb\n  // ... this means that the \"Buy\" menu will show up on the verbs list of any object with a \"price\"\n  //     attribute, even though that isn't the name of the verb\n  buy.property = \"price\"\n  // ... and we change the 'script' for the buy command, so it does what we want:\n  buy.script =&gt; {\n    if (Got (object)) {\n      msg (\"You already have it!\")\n    }\n    else  if (not IsShop (game.pov.parent)) {\n      // assuming that function esists\n      msg (\"This isn't a shop.\")\n    }\n    else if (HasString (object, \"price\")) {\n      // If the 'price' is a non-numeric string, assume it's a message saying why you can't buy it\n      msg (object.price)\n    }\n    else if (not HasInt (object, \"price\")) {\n      msg (CapFirst (WriteVerb (object, \"isn't\")) + \" for sale.\")\n    }\n    else if (object.price &gt;= game.pov.money) {\n      msg (CapFirst (WriteVerb (object, \"cost\")) + \" \" + DisplayMoney (object.price) + \" and you only have \" + DisplayMoney (game.pov.money) + \".\")\n    }\n    else {\n      // No problems buying that!\n      AddToInventory (object)\n      if (HasString (object, \"buy\")) {\n        msg (object.buy)\n      }\n      else if (HasScript (object, \"buy\")) {\n        do (object, \"buy\")\n      }\n      else {\n        msg (\"You buy the {object:\" + object.name + \"}.\")\n      }\n    }\n  }\n}\n</code></pre>\n<p>Basically, once the game starts verbs are treated like any other command. You can change their attributes in the UI Initialisation script to change the way they behave:</p>\n<ul>\n<li><code>property</code> is the name of the attribute that the verb checks for, when deciding whether or not it will appear in an automatically generated verb menu\n<ul>\n<li>Note that you can set this to <code>null</code> if you don't want it on the generated verbs list, or set the <code>property</code> attribute of any command if you do want it to appear</li>\n</ul>\n</li>\n<li><code>displayverb</code> is the name that will display on those verb menus</li>\n<li><code>script</code> is the script that will run for the command. By default, for verbs, it checks if the object has a string or script in the atribute named in <code>property</code>, and displays/runs it. But you can replace it with any script you want.</li>\n<li><code>pattern</code> is a regexp to match the command. For the buy command, it will be <code>^(buy|purchase) (?&lt;object&gt;.+)$</code>, but you can change it at any time before the first command is run.</li>\n</ul>\n<p>OK, this post is longer than I intended. But hopefully, I've shown that you can use the \"Verbs\" tab for things it was never intended for, in order to make editing using the web editor just a little easier.</p>\n\n",
      "PostDate": "2020-12-24T17:09:57.391792Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
