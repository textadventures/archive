{
  "Topic": {
    "TopicId": "5077",
    "ForumId": "10",
    "Title": "inheritance lost on publishing?",
    "LastUpdated": "2015-03-03T20:17:14+00:00",
    "ReplyCount": 13
  },
  "Posts": [
    {
      "PostId": "35076",
      "UserId": 0,
      "Username": "pfw",
      "UserAvatar": null,
      "UserGravatar": "7bffe28904b59134a8c442265a16f39b",
      "EditableText": "OK, I am sure I am doing something wrong - but not clear what it is:\nUsing the Windows Quest Editor Build 5.6.5514.32136 and generate a simple game (aslx attached).\nI have a command &quot;listallrooms&quot; which works when I play the game from th editor interface. When I publish and run the .quest on Windows I get the following error:\nError running script&#058; Error evaluating expression 'DoesInherit( object_x, &quot;editor_room&quot;)': No element 'editor_room' of type 'ObjectType'\nThis implies the inherited types have not been carried into publication.\n\nIs there an option I missed somewhere?\n\nThanks for the help and a fun piece of software <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "OK, I am sure I am doing something wrong - but not clear what it is:<br/>Using the Windows Quest Editor Build 5.6.5514.32136 and generate a simple game (aslx attached).<br/>I have a command &quot;listallrooms&quot; which works when I play the game from th editor interface. When I publish and run the .quest on Windows I get the following error:<br/>Error running script&#058; Error evaluating expression 'DoesInherit( object_x, &quot;editor_room&quot;)': No element 'editor_room' of type 'ObjectType'<br/>This implies the inherited types have not been carried into publication.<br/><br/>Is there an option I missed somewhere?<br/><br/>Thanks for the help and a fun piece of software <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><div><a href=\"/attachment/1172\">Inheritance.aslx</a></div>",
      "PostDate": "2015-03-01T11:52:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35078",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "editor_room ( and editor_room, editor_player..) is only used for the editor and is removed in the published game. Best thing would be to add a new attributes to your rooms and use it to create a list of rooms",
      "EditableFormat": "bbcode",
      "HTML": "editor_room ( and editor_room, editor_player..) is only used for the editor and is removed in the published game. Best thing would be to add a new attributes to your rooms and use it to create a list of rooms",
      "PostDate": "2015-03-01T14:09:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35085",
      "UserId": 0,
      "Username": "pfw",
      "UserAvatar": null,
      "UserGravatar": "7bffe28904b59134a8c442265a16f39b",
      "EditableText": "Thanks. Out of interest, why do they exist/ get removed?",
      "EditableFormat": "bbcode",
      "HTML": "Thanks. Out of interest, why do they exist/ get removed?",
      "PostDate": "2015-03-01T20:10:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35086",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "the specific Object Types (via as Inherited Attributes) 'editor_room', 'editor_object', and 'editor_player', provide the Attributes that gives us the Editor's Tabs+controls of these in the Editor (the drop-down boxes of choices, text boxes, and etc):\n\n'whatever' Object -&gt; 'object~whatever it is called' Tab -&gt; Object Type [object, room, player, or object+room] -&gt; various options (based upon it's object type)\n\nso, when you actually start the game, there's no more editor mode, and thus no reason to have~use the Object Types of 'editor_object, editor_room, editor_player' within the game play mode.\n\nSo, you need to make your own custom Attributes, if you need to reference the types of objects for your scriptings.\n\n------\n\nObject Types (and their Inherited Attributes):\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types.html\">http://docs.textadventures.co.uk/quest/types.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/inherit.html\">http://docs.textadventures.co.uk/quest/ ... herit.html</a><!-- m -->\n\nfrom the 'how to (guides) section of the wiki, linked here:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m -->\n\nhere's about the creation+usage of the Object Types (via as Inherited Attributes):\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->\n\nthese are the direct links about the creation and usage of the Tabs+Control tags for (only) the editor's usage:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/more_on_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/tab.html\">http://docs.textadventures.co.uk/quest/ ... s/tab.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/control.html\">http://docs.textadventures.co.uk/quest/ ... ntrol.html</a><!-- m -->\n\n-----------\n\nPixie's Simple Combat and Spell Libraries, creates new editor 'magic' and 'combat' Tabs+Controls, for you to use the editor, to easily set up your game's combat and magic stuff:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/simple_combat_system__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/more_on_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "the specific Object Types (via as Inherited Attributes) 'editor_room', 'editor_object', and 'editor_player', provide the Attributes that gives us the Editor's Tabs+controls of these in the Editor (the drop-down boxes of choices, text boxes, and etc):<br/><br/>'whatever' Object -&gt; 'object~whatever it is called' Tab -&gt; Object Type [object, room, player, or object+room] -&gt; various options (based upon it's object type)<br/><br/>so, when you actually start the game, there's no more editor mode, and thus no reason to have~use the Object Types of 'editor_object, editor_room, editor_player' within the game play mode.<br/><br/>So, you need to make your own custom Attributes, if you need to reference the types of objects for your scriptings.<br/><br/>------<br/><br/>Object Types (and their Inherited Attributes):<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types.html\">http://docs.textadventures.co.uk/quest/types.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/inherit.html\">http://docs.textadventures.co.uk/quest/ ... herit.html</a><!-- m --><br/><br/>from the 'how to (guides) section of the wiki, linked here:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m --><br/><br/>here's about the creation+usage of the Object Types (via as Inherited Attributes):<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --><br/><br/>these are the direct links about the creation and usage of the Tabs+Control tags for (only) the editor's usage:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/more_on_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/tab.html\">http://docs.textadventures.co.uk/quest/ ... s/tab.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/control.html\">http://docs.textadventures.co.uk/quest/ ... ntrol.html</a><!-- m --><br/><br/>-----------<br/><br/>Pixie's Simple Combat and Spell Libraries, creates new editor 'magic' and 'combat' Tabs+Controls, for you to use the editor, to easily set up your game's combat and magic stuff:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/simple_combat_system__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/more_on_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m -->",
      "PostDate": "2015-03-02T02:02:40+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35087",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote=&quot;pfw&quot;:f1jq1m1h]Thanks. Out of interest, why do they exist/ get removed?[/quote:f1jq1m1h]\nThis is a good question. I got caught with this once, and I see no reason for it. It is useful to know if something is a room, and this would be the best way.\n\nThe best alternative is probably to check if the object has any exits, and assume it is a room if it does.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>pfw wrote:</cite>Thanks. Out of interest, why do they exist/ get removed?</blockquote><br/>This is a good question. I got caught with this once, and I see no reason for it. It is useful to know if something is a room, and this would be the best way.<br/><br/>The best alternative is probably to check if the object has any exits, and assume it is a room if it does.",
      "PostDate": "2015-03-02T07:57:32+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35091",
      "UserId": 0,
      "Username": "pfw",
      "UserAvatar": null,
      "UserGravatar": "7bffe28904b59134a8c442265a16f39b",
      "EditableText": "Thanks for the detailed explanation",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for the detailed explanation",
      "PostDate": "2015-03-02T20:01:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35092",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "[quote=&quot;The Pixie&quot;:31h3hq42][quote=&quot;pfw&quot;:31h3hq42]Thanks. Out of interest, why do they exist/ get removed?[/quote:31h3hq42]\nThis is a good question. I got caught with this once, and I see no reason for it. It is useful to know if something is a room, and this would be the best way.\n\nThe best alternative is probably to check if the object has any exits, and assume it is a room if it does.[/quote:31h3hq42]\n\nUnless the rooms don't have exits because the author has created some alternative mechanism for moving around the game like with commands or whatever. I just went to check and it does seem that the only difference between an object being a room or not is whether it can create exits in the gui. Couldn't he/she add some attribute manually for the game to check? Like:\n\nobject.isroom or somesuch? A pain, I know, but sounds easier than checking for exits (in my mind).",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>The Pixie wrote:</cite><blockquote><p><b>&quot;pfw&quot;</b></p><p>Thanks. Out of interest, why do they exist/ get removed?</blockquote><br/>This is a good question. I got caught with this once, and I see no reason for it. It is useful to know if something is a room, and this would be the best way.<br/><br/>The best alternative is probably to check if the object has any exits, and assume it is a room if it does.</p></blockquote><br/><br/>Unless the rooms don't have exits because the author has created some alternative mechanism for moving around the game like with commands or whatever. I just went to check and it does seem that the only difference between an object being a room or not is whether it can create exits in the gui. Couldn't he/she add some attribute manually for the game to check? Like:<br/><br/>object.isroom or somesuch? A pain, I know, but sounds easier than checking for exits (in my mind).",
      "PostDate": "2015-03-02T20:23:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35094",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "If I had commands moving the player round, I would still try to use exits, but give the alias as the command (eg an alias could be jump for example, rather than north). \n\nThe problem with setting flags is forgetting for a room; it could be very difficult to debug. Also, I personally would find setting flags on dozens of objects boring, and writing a function interesting, so would always do the latter!\n\nHere is a function that will check an object for you.\n[code:3pms3han]  &lt;function name=&quot;IsRoom&quot; parameters=&quot;obj&quot; type=&quot;boolean&quot;&gt;&lt;!&#91;CDATA&#91;\n    return (ListCount(ScopeExitsForRoom(obj)) &gt; 0 or GetBoolean(obj, &quot;thisisaroom&quot;))\n  &#93;&#93;&gt;&lt;/function&gt;[/code:3pms3han]\nIt will return true if the object has any exits or if you set a Boolean attribute called [i:3pms3han]thisisaroom [/i:3pms3han]to true for any rooms with no exits.",
      "EditableFormat": "bbcode",
      "HTML": "If I had commands moving the player round, I would still try to use exits, but give the alias as the command (eg an alias could be jump for example, rather than north). <br/><br/>The problem with setting flags is forgetting for a room; it could be very difficult to debug. Also, I personally would find setting flags on dozens of objects boring, and writing a function interesting, so would always do the latter!<br/><br/>Here is a function that will check an object for you.<br/><pre><code>  &lt;function name=&quot;IsRoom&quot; parameters=&quot;obj&quot; type=&quot;boolean&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    return (ListCount(ScopeExitsForRoom(obj)) &gt; 0 or GetBoolean(obj, &quot;thisisaroom&quot;))<br/>  &#93;&#93;&gt;&lt;/function&gt;</code></pre><br/>It will return true if the object has any exits or if you set a Boolean attribute called <span style=\"font-style:italic;\">thisisaroom </span>to true for any rooms with no exits.",
      "PostDate": "2015-03-03T11:47:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35097",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "this seems to be one of the big design choices in programming code:\n\ntons of Attributes vs omni-parsing Scripting\n\ndo you do the manual work of adding~setting all of the individual Attributes in your game, or do you make scripting that then does it for you? (there's pros and cons to both design methods)\n\nthat I've come across, as I'm learning to code\n\n(I presume good coders prefer doing more with scripting, than with attributes)",
      "EditableFormat": "bbcode",
      "HTML": "this seems to be one of the big design choices in programming code:<br/><br/>tons of Attributes vs omni-parsing Scripting<br/><br/>do you do the manual work of adding~setting all of the individual Attributes in your game, or do you make scripting that then does it for you? (there's pros and cons to both design methods)<br/><br/>that I've come across, as I'm learning to code<br/><br/>(I presume good coders prefer doing more with scripting, than with attributes)",
      "PostDate": "2015-03-03T15:41:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35098",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote:pep6ejqt](I presume good coders prefer doing more with scripting, than with attributes)[/quote:pep6ejqt]\nThe preference is usually whatever results in the sanest, most robust code. If you need code, you write script. But data-driven designs can work very well as well. (The response library I used in spondre is a small kernel of a library driven by copious amounts of data.)\n\nThe Pixie has it right here: having to manually add an attribute to all objects is not only a real pain, but it's highly error-prone. It's very easy to make a mistake. And, worse yet, hard to modify if you have to make a change across all the rooms. That points to it not being (necessarily) the best approach. Of course, if you had no choice, well then you make do... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nBottom line: you can't speak of absolute preferences for such things. The tool you use depends on the situation.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>(I presume good coders prefer doing more with scripting, than with attributes)</p></blockquote><br/>The preference is usually whatever results in the sanest, most robust code. If you need code, you write script. But data-driven designs can work very well as well. (The response library I used in spondre is a small kernel of a library driven by copious amounts of data.)<br/><br/>The Pixie has it right here: having to manually add an attribute to all objects is not only a real pain, but it's highly error-prone. It's very easy to make a mistake. And, worse yet, hard to modify if you have to make a change across all the rooms. That points to it not being (necessarily) the best approach. Of course, if you had no choice, well then you make do... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Bottom line: you can't speak of absolute preferences for such things. The tool you use depends on the situation.",
      "PostDate": "2015-03-03T16:53:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35099",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "And your knowledge! I wouldn't know how to write a script to do it. Then again, I haven't the foggiest what they're trying to do.",
      "EditableFormat": "bbcode",
      "HTML": "And your knowledge! I wouldn't know how to write a script to do it. Then again, I haven't the foggiest what they're trying to do.",
      "PostDate": "2015-03-03T17:29:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35101",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "scripting can get very complex-webbing too (too much interacting scriptings for your brain to handle given your coding ability), besides whether you can even figure out how to do the coding scriptings (for us code noobs), whereas using straight-up attributes is extremely simple (but extremely tedious).\n\na simple example of Attributes vs Scripting:\n\nAttribute Usage:\n\n&lt;attr name=&quot;current_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n&lt;attr name=&quot;minimum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n&lt;attr name=&quot;maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n&lt;attr name=&quot;buffed_maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n&lt;attr name=&quot;debuffed_maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n\nby having these 5 Attributes, I can easily adjust them and plug them to equations (scripting) as needed, in with simplicity. If an enemy damages me, I reduce the 'current_life_integer'. If I level up, then I raise the 'maximum_life_integer'. If I do a 'full heal' spell, then I just set it as 'current_life_integer = maximum_life_integer'. If I cast a spell that temporarily raises my max life, than I just raise the 'buffed_maximum_life_integer', while leaving my normal max life (maximum_life_integer) intact. The same if an enemy uses a spell that temporarily lowers my max life, just lowering the 'debuffed_maximum_life_integer', while leaving my normal max life (maximum_life_integer) intact. etc etc etc\n\nusing Attributes makes the scripting easier, but it's a lot more work (writing~coding)\n\nScripting Usage:\n\ninstead, I'd just have 'life_integer', using equations (scriptings) to do whatever I might need, but this requires a lot more control by your part to make sure that it all works syncronously together. No examples... too difficult for me, laughs. I'm a noob at coding, this would take a lot of effort and time to do!\n\nusing Scripting, makes the scripting harder, but it's a lot less work (writing~coding)\n\n---------------\n\nhere's a qwasi-example (HK altered) from Pixie's Level Library of using Scripting (to create your attributes):\n\n[code:3smb42vf]&lt;object name=&quot;global_data_object&quot;&gt;\n  &lt;attr name=&quot;attribute_stringlist&quot; type=&quot;simplestringlist&quot;&gt;strength;endurance;dexterity;agility;speed;luck&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n&lt;/object&gt;\n\n&lt;function name=&quot;function_1&quot;&gt;\n  foreach (attribute_x, global_data_object&#46;attribute_stringlist) {\n    if (not HasInt (player, attribute_x)) {\n      set (player, attribute_x, 0)\n    }\n  }\n&lt;/function&gt;\n\n// since 'player' has none of the Attributes, the scripting will give the 'player' all of these Attributes with having the Value of 0&#58;\n// player&#46;strength = 0\n// player&#46;endurance = 0\n// player&#46;dexterity = 0\n// player&#46;agility = 0\n// player&#46;speed = 0\n// player&#46;luck = 0[/code:3smb42vf]\n\nscripting is very good, as you don't want to be writing in the 6 attributes for 1000 character objects, but you got to know how to do the scripting, and keep it all synchronized functionally together, and keep it all organized to+for you.\n\n-------------------\n\nhere's an example, of more detailed scripting:\n\n[code:3smb42vf]&lt;object name=&quot;global_data_object&quot;&gt;\n  &lt;attr name=&quot;attribute_stringlist&quot; type=&quot;simplestringlist&quot;&gt;strength;endurance;dexterity;agility;speed;luck&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;orc&quot;&gt;\n&lt;/object&gt;\n\n&lt;function name=&quot;function_1&quot; parameters=&quot;character_parameter&quot;&gt;\n  foreach (attribute_x, global_data_object&#46;attribute_stringlist) {\n    if (not HasInt (character_parameter, attribute_x)) {\n      if (character_parameter&#46;name = &quot;player&quot;) {\n        if (attribute_x&#46;name = &quot;strength&quot; or attribute_x&#46;name = &quot;endurance&quot; or attribute_x&#46;name = &quot;dexterity&quot;) { \n          set (character_parameter, attribute_x, 100)\n        } else if (attribute_x&#46;name = &quot;agility&quot; or attribute_x&#46;name = &quot;speed&quot; or attribute_x&#46;name = &quot;luck&quot;) { \n          set (character_parameter, attribute_x, 0)\n        }\n      } else if (character_parameter&#46;name = &quot;orc&quot;) {\n        if (attribute_x&#46;name = &quot;strength&quot; or attribute_x&#46;name = &quot;endurance&quot; or attribute_x&#46;name = &quot;dexterity&quot;) { \n          set (character_parameter, attribute_x, 0)\n        } else if (attribute_x&#46;name = &quot;agility&quot; or attribute_x&#46;name = &quot;speed&quot; or attribute_x&#46;name = &quot;luck&quot;) { \n          set (character_parameter, attribute_x, 100)\n        }\n      }\n    }\n  }\n&lt;/function&gt;\n\n// player&#46;strength = 100\n// player&#46;endurance = 100\n// player&#46;dexterity = 100\n// player&#46;agility = 0\n// player&#46;speed = 0\n// player&#46;luck = 0\n\n// orc&#46;strength = 0\n// orc&#46;endurance = 0\n// orc&#46;dexterity = 0\n// orc&#46;agility = 100\n// orc&#46;speed = 100\n// orc&#46;luck = 100[/code:3smb42vf]\n\npretend that I did this for 1000 character Objects, not just 2, much less work than manually writing in the 6 attributes for each character object",
      "EditableFormat": "bbcode",
      "HTML": "scripting can get very complex-webbing too (too much interacting scriptings for your brain to handle given your coding ability), besides whether you can even figure out how to do the coding scriptings (for us code noobs), whereas using straight-up attributes is extremely simple (but extremely tedious).<br/><br/>a simple example of Attributes vs Scripting:<br/><br/>Attribute Usage:<br/><br/>&lt;attr name=&quot;current_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>&lt;attr name=&quot;minimum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>&lt;attr name=&quot;maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>&lt;attr name=&quot;buffed_maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>&lt;attr name=&quot;debuffed_maximum_life_integer&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/><br/>by having these 5 Attributes, I can easily adjust them and plug them to equations (scripting) as needed, in with simplicity. If an enemy damages me, I reduce the 'current_life_integer'. If I level up, then I raise the 'maximum_life_integer'. If I do a 'full heal' spell, then I just set it as 'current_life_integer = maximum_life_integer'. If I cast a spell that temporarily raises my max life, than I just raise the 'buffed_maximum_life_integer', while leaving my normal max life (maximum_life_integer) intact. The same if an enemy uses a spell that temporarily lowers my max life, just lowering the 'debuffed_maximum_life_integer', while leaving my normal max life (maximum_life_integer) intact. etc etc etc<br/><br/>using Attributes makes the scripting easier, but it's a lot more work (writing~coding)<br/><br/>Scripting Usage:<br/><br/>instead, I'd just have 'life_integer', using equations (scriptings) to do whatever I might need, but this requires a lot more control by your part to make sure that it all works syncronously together. No examples... too difficult for me, laughs. I'm a noob at coding, this would take a lot of effort and time to do!<br/><br/>using Scripting, makes the scripting harder, but it's a lot less work (writing~coding)<br/><br/>---------------<br/><br/>here's a qwasi-example (HK altered) from Pixie's Level Library of using Scripting (to create your attributes):<br/><br/><pre><code>&lt;object name=&quot;global_data_object&quot;&gt;<br/>  &lt;attr name=&quot;attribute_stringlist&quot; type=&quot;simplestringlist&quot;&gt;strength;endurance;dexterity;agility;speed;luck&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;function name=&quot;function_1&quot;&gt;<br/>  foreach (attribute_x, global_data_object&#46;attribute_stringlist) {<br/>    if (not HasInt (player, attribute_x)) {<br/>      set (player, attribute_x, 0)<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>// since 'player' has none of the Attributes, the scripting will give the 'player' all of these Attributes with having the Value of 0&#58;<br/>// player&#46;strength = 0<br/>// player&#46;endurance = 0<br/>// player&#46;dexterity = 0<br/>// player&#46;agility = 0<br/>// player&#46;speed = 0<br/>// player&#46;luck = 0</code></pre><br/><br/>scripting is very good, as you don't want to be writing in the 6 attributes for 1000 character objects, but you got to know how to do the scripting, and keep it all synchronized functionally together, and keep it all organized to+for you.<br/><br/>-------------------<br/><br/>here's an example, of more detailed scripting:<br/><br/><pre><code>&lt;object name=&quot;global_data_object&quot;&gt;<br/>  &lt;attr name=&quot;attribute_stringlist&quot; type=&quot;simplestringlist&quot;&gt;strength;endurance;dexterity;agility;speed;luck&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;orc&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;function name=&quot;function_1&quot; parameters=&quot;character_parameter&quot;&gt;<br/>  foreach (attribute_x, global_data_object&#46;attribute_stringlist) {<br/>    if (not HasInt (character_parameter, attribute_x)) {<br/>      if (character_parameter&#46;name = &quot;player&quot;) {<br/>        if (attribute_x&#46;name = &quot;strength&quot; or attribute_x&#46;name = &quot;endurance&quot; or attribute_x&#46;name = &quot;dexterity&quot;) { <br/>          set (character_parameter, attribute_x, 100)<br/>        } else if (attribute_x&#46;name = &quot;agility&quot; or attribute_x&#46;name = &quot;speed&quot; or attribute_x&#46;name = &quot;luck&quot;) { <br/>          set (character_parameter, attribute_x, 0)<br/>        }<br/>      } else if (character_parameter&#46;name = &quot;orc&quot;) {<br/>        if (attribute_x&#46;name = &quot;strength&quot; or attribute_x&#46;name = &quot;endurance&quot; or attribute_x&#46;name = &quot;dexterity&quot;) { <br/>          set (character_parameter, attribute_x, 0)<br/>        } else if (attribute_x&#46;name = &quot;agility&quot; or attribute_x&#46;name = &quot;speed&quot; or attribute_x&#46;name = &quot;luck&quot;) { <br/>          set (character_parameter, attribute_x, 100)<br/>        }<br/>      }<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>// player&#46;strength = 100<br/>// player&#46;endurance = 100<br/>// player&#46;dexterity = 100<br/>// player&#46;agility = 0<br/>// player&#46;speed = 0<br/>// player&#46;luck = 0<br/><br/>// orc&#46;strength = 0<br/>// orc&#46;endurance = 0<br/>// orc&#46;dexterity = 0<br/>// orc&#46;agility = 100<br/>// orc&#46;speed = 100<br/>// orc&#46;luck = 100</code></pre><br/><br/>pretend that I did this for 1000 character Objects, not just 2, much less work than manually writing in the 6 attributes for each character object",
      "PostDate": "2015-03-03T19:15:49+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35103",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Well, the last example isn't real code anyway, because &quot;attribute_x&quot; is a string and so has no &quot;name&quot; attribute. But that aside, you'd have to be insane to write code like that. It not only makes it all more opaque and harder to understand, but it serves no purpose whatsoever besides obfuscating things. So straw man aside...\n\nThe difference between that code and the example you give just prior (quasi PIxie) is that in the previous example, the script [i:nlxok0jg]doesn't actually know the attributes[/i:nlxok0jg]. It's a general-purpose script that is just setting attributes based on the parameters passed (via the list). Your expanded code example has the attributes listed both in the list and in the code. It has no generality. In order to add a new attribute, you have to modify *both places*, which is shotgun surgery at its worst. There is no reason whatsoever to write code like that, unless you're a masochist. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Well, the last example isn't real code anyway, because &quot;attribute_x&quot; is a string and so has no &quot;name&quot; attribute. But that aside, you'd have to be insane to write code like that. It not only makes it all more opaque and harder to understand, but it serves no purpose whatsoever besides obfuscating things. So straw man aside...<br/><br/>The difference between that code and the example you give just prior (quasi PIxie) is that in the previous example, the script <span style=\"font-style:italic;\">doesn't actually know the attributes</span>. It's a general-purpose script that is just setting attributes based on the parameters passed (via the list). Your expanded code example has the attributes listed both in the list and in the code. It has no generality. In order to add a new attribute, you have to modify *both places*, which is shotgun surgery at its worst. There is no reason whatsoever to write code like that, unless you're a masochist. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2015-03-03T20:11:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "35104",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Also, to analyse a little bit further, the &quot;quasi Pixie&quot; code example you gave has an advantage if it is delivered in a library, where the user of the library can configure the attributes externally. In other words, the code [i:2evq1ewp]can't know up front [/i:2evq1ewp]what attributes to set. That makes it a perfectly legitimate use of code as opposed to just having hard-coded attributes, because the latter would be impossible. You need to be able to adapt to different attribute sets dynamically.\n\nWhich makes your last code example even worse, as it doesn't even serve that purpose.",
      "EditableFormat": "bbcode",
      "HTML": "Also, to analyse a little bit further, the &quot;quasi Pixie&quot; code example you gave has an advantage if it is delivered in a library, where the user of the library can configure the attributes externally. In other words, the code <span style=\"font-style:italic;\">can't know up front </span>what attributes to set. That makes it a perfectly legitimate use of code as opposed to just having hard-coded attributes, because the latter would be impossible. You need to be able to adapt to different attribute sets dynamically.<br/><br/>Which makes your last code example even worse, as it doesn't even serve that purpose.",
      "PostDate": "2015-03-03T20:17:14+00:00",
      "LastEditDate": null
    }
  ]
}
