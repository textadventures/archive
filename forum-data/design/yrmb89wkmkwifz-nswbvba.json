{
  "Topic": {
    "TopicId": "yrmb89wkmkwifz-nswbvba",
    "ForumId": "20",
    "Title": "Need help with stat, class, and combat system.",
    "LastUpdated": "2018-08-12T09:05:20.8027623Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "54ae021f-72da-46b3-875a-4bbe48d0afa0",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am making a small game with a maze to test out a part of a larger project I'm making.\r\n\r\nPC and NPCs have 2 Attributes and 2 points to distribute among them:\r\nPhysical and Mental\r\nHealth is 5+Physical\r\nAC is 4+Mental\r\nAttack modifier is mental\r\nDamage modifier is 1+Physical\r\n\r\nOut of this, three possible characters can be made as shown below\r\n\r\n1. Strong Man\r\nPhysical: 2\r\nMental: 0\r\nHP: 7\r\nAC: 4\r\nAttack: 1d6\r\nDamage: 1d6+3(3 being the 1 and the 2 is from physical)\r\n\r\n2. Smart Man\r\nPhysical: 0\r\nMental: 2\r\nHP: 5\r\nAC: 6\r\nAttack: 1d6+2\r\nDamage: 1d6+1\r\n\r\n3. Average Man\r\nPhysical: 1\r\nMental: 1\r\nHP: 6\r\nAC: 5\r\nAttack: 1d6+1\r\nDamage: 1d6+2\r\n\r\nAny skill checks for puzzles, traps, or etc will be decided on a Difficulty Check of one of three options:\r\n1. Easy = 4\r\n2. Medium = 5\r\n3. Hard = 6\r\n\r\nExample:\r\nStrong man wants to push a heavy box out of his way.\r\nPhysical Check: 1d6+2\r\nIf Strong man matches the difficulty check or beats it, then he is successful.\r\n\r\nDifferences between classes\r\n1. Strong Man can't read words with more than one syllable and may annoy or frighten npcs when talking to them.\r\n2. Smart Man can't lift very heavy objects, wear heavy armor, or wield heavy weapons. He can read anything in the language he knows and may notice details in the environment that strong man wouldn't, such as alternate routes around a place or hidden passages in a dungeon. Smart Man can also do magic.\r\n3. Average man won't be great in either side, but can maneuver around the world without the major disadvantages of the other two classes. \r\n\r\nI've thought about adding a Social and Dexterity trait so there would be Physical, Mental, Dexterity, and Social, but I think it would over complicate the system I've designed and may should just add a social trait if I add anything else.\r\n\r\nLet me know what you think of this system and how I can implement it into my game.\r\n\r\nThanks ",
      "EditableFormat": "markdown",
      "HTML": "<p>I am making a small game with a maze to test out a part of a larger project I'm making.</p>\n<p>PC and NPCs have 2 Attributes and 2 points to distribute among them:<br>\nPhysical and Mental<br>\nHealth is 5+Physical<br>\nAC is 4+Mental<br>\nAttack modifier is mental<br>\nDamage modifier is 1+Physical</p>\n<p>Out of this, three possible characters can be made as shown below</p>\n<ol>\n<li>\n<p>Strong Man<br>\nPhysical: 2<br>\nMental: 0<br>\nHP: 7<br>\nAC: 4<br>\nAttack: 1d6<br>\nDamage: 1d6+3(3 being the 1 and the 2 is from physical)</p>\n</li>\n<li>\n<p>Smart Man<br>\nPhysical: 0<br>\nMental: 2<br>\nHP: 5<br>\nAC: 6<br>\nAttack: 1d6+2<br>\nDamage: 1d6+1</p>\n</li>\n<li>\n<p>Average Man<br>\nPhysical: 1<br>\nMental: 1<br>\nHP: 6<br>\nAC: 5<br>\nAttack: 1d6+1<br>\nDamage: 1d6+2</p>\n</li>\n</ol>\n<p>Any skill checks for puzzles, traps, or etc will be decided on a Difficulty Check of one of three options:</p>\n<ol>\n<li>Easy = 4</li>\n<li>Medium = 5</li>\n<li>Hard = 6</li>\n</ol>\n<p>Example:<br>\nStrong man wants to push a heavy box out of his way.<br>\nPhysical Check: 1d6+2<br>\nIf Strong man matches the difficulty check or beats it, then he is successful.</p>\n<p>Differences between classes</p>\n<ol>\n<li>Strong Man can't read words with more than one syllable and may annoy or frighten npcs when talking to them.</li>\n<li>Smart Man can't lift very heavy objects, wear heavy armor, or wield heavy weapons. He can read anything in the language he knows and may notice details in the environment that strong man wouldn't, such as alternate routes around a place or hidden passages in a dungeon. Smart Man can also do magic.</li>\n<li>Average man won't be great in either side, but can maneuver around the world without the major disadvantages of the other two classes.</li>\n</ol>\n<p>I've thought about adding a Social and Dexterity trait so there would be Physical, Mental, Dexterity, and Social, but I think it would over complicate the system I've designed and may should just add a social trait if I add anything else.</p>\n<p>Let me know what you think of this system and how I can implement it into my game.</p>\n<p>Thanks</p>\n\n",
      "PostDate": "2018-08-12T09:05:20.8027623Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b6aae26a-5aaf-40b4-9786-aea518d1ca0a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Seems simple enough. Although the numbers of HP seem a little low compared to the damage.\r\n\r\nAs far as implementation goes, are you using Quest? It looks like this should be fairly easy to transform into code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Seems simple enough. Although the numbers of HP seem a little low compared to the damage.</p>\n<p>As far as implementation goes, are you using Quest? It looks like this should be fairly easy to transform into code.</p>\n\n",
      "PostDate": "2018-08-12T09:45:42.0046383Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05ce0b65-7524-4f96-a52b-f4d5cfec94cf",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don’t know how to code, but I want to put this into quest. The system was originally designed for playing an rpg on a road trip, all you would need is a d6 dice and a phone that can’t write down character stats. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I don’t know how to code, but I want to put this into quest. The system was originally designed for playing an rpg on a road trip, all you would need is a d6 dice and a phone that can’t write down character stats.</p>\n\n",
      "PostDate": "2018-08-12T10:13:30.9459585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e3559e68-2034-4cc7-8006-88d20a3e0068",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the starting point here would probably be to start with your character creation.\r\n\r\nYou normally want to choose a character before starting the game, so you'd create a blank room to put the player in, and untick the \"Show room description when entering a room\" checkbox on the game. Then for your game's \"start\" script, you would have something like this:\r\n\r\n```\r\noptions = Split(\"strong;smart;average\")\r\nShowMenu (\"What kind of man would you like to be?\", options, false) {\r\n  switch (result) {\r\n    case (\"strong\") {\r\n      player.physical = 2\r\n      player.mental = 0\r\n    }\r\n    case (\"smart\") {\r\n      player.physical = 0\r\n      player.mental = 2\r\n    }\r\n    case (\"average\") {\r\n      player.physical = 1\r\n      player.mental = 1\r\n    }\r\n    default {\r\n      msg (\"You selected something that wasn't one of the options, so there must be a typo in my code.\")\r\n    }\r\n  }\r\n  player.maxhealth = 5 + player.physical\r\n  player.currenthealth = player.maxhealth\r\n  player.AC = 4 + player.mental\r\n  player.attack = player.mental\r\n  player.damage = 1 + player.physical\r\n  // We enable room descriptions here, so the game doesn't say \"You are in a character creation\"\r\n  // but it does say \"You are in a dungeon\" or whatever when we move them to the actual start of the game\r\n  game.showdescriptiononenter = true\r\n  MoveObject (player, first room)\r\n}\r\n```\r\n\r\nThat would deal with allowing the player to create their character in the first place.\r\nThe last two lines move the player to the starting room, so they can actually start playing; change `first room` to whatever the name of your first room is.\r\n\r\nCan you understand the code well enough there, or does it need extra explanation? I think each line should be fairly self-explanatory; but not sure what level you're at to start with.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think the starting point here would probably be to start with your character creation.</p>\n<p>You normally want to choose a character before starting the game, so you'd create a blank room to put the player in, and untick the \"Show room description when entering a room\" checkbox on the game. Then for your game's \"start\" script, you would have something like this:</p>\n<pre><code>options = Split(\"strong;smart;average\")\nShowMenu (\"What kind of man would you like to be?\", options, false) {\n  switch (result) {\n    case (\"strong\") {\n      player.physical = 2\n      player.mental = 0\n    }\n    case (\"smart\") {\n      player.physical = 0\n      player.mental = 2\n    }\n    case (\"average\") {\n      player.physical = 1\n      player.mental = 1\n    }\n    default {\n      msg (\"You selected something that wasn't one of the options, so there must be a typo in my code.\")\n    }\n  }\n  player.maxhealth = 5 + player.physical\n  player.currenthealth = player.maxhealth\n  player.AC = 4 + player.mental\n  player.attack = player.mental\n  player.damage = 1 + player.physical\n  // We enable room descriptions here, so the game doesn't say \"You are in a character creation\"\n  // but it does say \"You are in a dungeon\" or whatever when we move them to the actual start of the game\n  game.showdescriptiononenter = true\n  MoveObject (player, first room)\n}\n</code></pre>\n<p>That would deal with allowing the player to create their character in the first place.<br>\nThe last two lines move the player to the starting room, so they can actually start playing; change <code>first room</code> to whatever the name of your first room is.</p>\n<p>Can you understand the code well enough there, or does it need extra explanation? I think each line should be fairly self-explanatory; but not sure what level you're at to start with.</p>\n\n",
      "PostDate": "2018-08-12T13:10:34.6498821Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cce4eca8-910b-421a-a4f0-75eccad560e3",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This one thing I did not like with playing DnD…\r\n\"Example:\r\nStrong man wants to push a heavy box out of his way.\r\nPhysical Check: 1d6+2\r\nIf Strong man matches the difficulty check or beats it, then he is successful.\"\r\nWith this... A player with 9 strength could (based on dice rolls) move a box that a player with 18 strength could not...\r\nI would be better to place a weight value on the box...\r\nIf str<box weight, can't move...\r\nIf str>box weight, can move...\r\nAltho, someone smart could move the box if they \"thought\" of using a lever... Maybe a \"mental\" roll for this...\r\n\r\nNow, after saying all that \"none sense\"...\r\nLooks like you have an interesting start for a good game.\r\nThere are a lot of people here that that can, and will, help you around programming problems...\r\n(Some may be more helpful than others)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>This one thing I did not like with playing DnD…<br>\n\"Example:<br>\nStrong man wants to push a heavy box out of his way.<br>\nPhysical Check: 1d6+2<br>\nIf Strong man matches the difficulty check or beats it, then he is successful.\"<br>\nWith this... A player with 9 strength could (based on dice rolls) move a box that a player with 18 strength could not...<br>\nI would be better to place a weight value on the box...<br>\nIf str&lt;box weight, can't move...<br>\nIf str&gt;box weight, can move...<br>\nAltho, someone smart could move the box if they \"thought\" of using a lever... Maybe a \"mental\" roll for this...</p>\n<p>Now, after saying all that \"none sense\"...<br>\nLooks like you have an interesting start for a good game.<br>\nThere are a lot of people here that that can, and will, help you around programming problems...<br>\n(Some may be more helpful than others)</p>\n\n",
      "PostDate": "2018-08-12T15:14:16.2760682Z",
      "LastEditDate": "2018-08-12T15:20:26.3473803Z",
      "link": null
    },
    {
      "PostId": "2a27cebb-44df-4203-9a4c-6375209140f7",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are a couple of good combat codes on here.\r\n\r\nMost combat commands look something like this:\r\n```\r\nif (not HasBoolean(object, \"dead\")) {\r\n  msg (\"That's not something you can attack.\")\r\n}\r\nelse if (object.dead) {\r\n  msg (\"That one is knocked out.\")\r\n}\r\nelse {\r\n  if (player.equipped = null) {\r\n    DoAttack (player, player, object, false)\r\n    attackturnscript\r\n  }\r\n  else {\r\n    DoAttack (player, player.equipped, object, false)\r\n    attackturnscript\r\n  }\r\n}\r\n```\r\n\r\nAnd then the player attack funtion would look something like this:\r\n```\r\nif (firearm) {\r\n  damageatt = \"firearmdamage\"\r\n  attackatt = \"firearmattack\"\r\n  weapon.ammo = weapon.ammo - 1\r\n}\r\nelse {\r\n  damageatt = \"damage\"\r\n  attackatt = \"attack\"\r\n}\r\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\r\nif (HasInt(weapon, damageatt)) {\r\n  damage = GetInt(weapon, damageatt)\r\n}\r\nelse {\r\n  damage = DiceRoll(GetString(weapon, damageatt))\r\n}\r\ndamage = damage * (100 - target.armour) / 100\r\nif (damage < 1) {\r\n  damage = 1\r\n}\r\nif (roll > 15) {\r\n  damage = damage * 3\r\n  AttackReport (weapon.critdesc, attacker, target, damage)\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse if (roll > 5) {\r\n  AttackReport (weapon.attackdesc, attacker, target, damage)\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse {\r\n  AttackReport (weapon.missdesc, attacker, target, 0)\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>There are a couple of good combat codes on here.</p>\n<p>Most combat commands look something like this:</p>\n<pre><code>if (not HasBoolean(object, \"dead\")) {\n  msg (\"That's not something you can attack.\")\n}\nelse if (object.dead) {\n  msg (\"That one is knocked out.\")\n}\nelse {\n  if (player.equipped = null) {\n    DoAttack (player, player, object, false)\n    attackturnscript\n  }\n  else {\n    DoAttack (player, player.equipped, object, false)\n    attackturnscript\n  }\n}\n</code></pre>\n<p>And then the player attack funtion would look something like this:</p>\n<pre><code>if (firearm) {\n  damageatt = \"firearmdamage\"\n  attackatt = \"firearmattack\"\n  weapon.ammo = weapon.ammo - 1\n}\nelse {\n  damageatt = \"damage\"\n  attackatt = \"attack\"\n}\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\nif (HasInt(weapon, damageatt)) {\n  damage = GetInt(weapon, damageatt)\n}\nelse {\n  damage = DiceRoll(GetString(weapon, damageatt))\n}\ndamage = damage * (100 - target.armour) / 100\nif (damage &lt; 1) {\n  damage = 1\n}\nif (roll &gt; 15) {\n  damage = damage * 3\n  AttackReport (weapon.critdesc, attacker, target, damage)\n  target.hitpoints = target.hitpoints - damage\n}\nelse if (roll &gt; 5) {\n  AttackReport (weapon.attackdesc, attacker, target, damage)\n  target.hitpoints = target.hitpoints - damage\n}\nelse {\n  AttackReport (weapon.missdesc, attacker, target, 0)\n}\n</code></pre>\n\n",
      "PostDate": "2018-08-13T01:41:12.8076697Z",
      "LastEditDate": "2018-08-13T01:44:04.7781414Z",
      "link": null
    },
    {
      "PostId": "cdd68e6f-32c9-4c51-9c02-509c8831d238",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can sort of read the code, I did some programming with C++ in college.\r\n\r\nWhile we're discussing the code, I was considering possibly adding to this system.\r\n\r\nThere's no mechanics for adding armor or weapons. If armor is implemented currently to the system it will make the characters OP.\r\n\r\nWhat do you all think of expanding from 2 attributes to 4?\r\n\r\nPhysical\r\nMental\r\nAgility\r\nSocial\r\n\r\nI'm not sure how many points for the player to give between them since 4 might be too small.\r\nI'm also worried that I'll over complicate the system so maybe when this is finished it could be hidden for the most part from the players and the player only sees the narrative output of what they did.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can sort of read the code, I did some programming with C++ in college.</p>\n<p>While we're discussing the code, I was considering possibly adding to this system.</p>\n<p>There's no mechanics for adding armor or weapons. If armor is implemented currently to the system it will make the characters OP.</p>\n<p>What do you all think of expanding from 2 attributes to 4?</p>\n<p>Physical<br>\nMental<br>\nAgility<br>\nSocial</p>\n<p>I'm not sure how many points for the player to give between them since 4 might be too small.<br>\nI'm also worried that I'll over complicate the system so maybe when this is finished it could be hidden for the most part from the players and the player only sees the narrative output of what they did.</p>\n\n",
      "PostDate": "2018-08-14T06:10:31.9329379Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "088a4df1-0e78-42fd-8419-d30a6d65c2a7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think 4 attributes would be fine.\r\n\r\nIf you're using more attributes, obviously that means there's more points to go around (4 sounds good); so the menu could be unwieldy. In that case, I'd recommend moving some of the code out of the start script.\r\n\r\nIf you want to hide the actual numbers, you could come up with descriptions for each stat level.\r\n\r\nSo your start script would look more like:\r\n```\r\nplayer.stat_descriptions = NewDictionary()\r\ndictionary add (player.stat_descriptions, \"physical\", Split(\"weaker than anybody;as strong as most people around me;one of the strongest guys in my village;stronger than anyone else in the world\"))\r\ndictionary add (player.stat_descriptions, \"mental\", Split(\"as dumb as a bag of rocks;able to read and write;top of my class in school;a world-famous genius\"))\r\ndictionary add (player.stat_descriptions, \"agility\", Split(\"clumsy and slow;fast enough to catch a ball;a champion athlete;faster than a speeding bullet\"))\r\ndictionary add (player.stat_descriptions, \"social\", Split(\"that guy with no friends;a popular guy;the life of every party;the most awesome guy in the world\"))\r\nplayer.stat_points_remaining = 4\r\n// It might be easier to use a \"changed\" script. These run automatically whenever a stat is changed\r\n//   so it's easier if you want to add a level-up system in future\r\nplayer.changedphysical => {\r\n  player.maxhealth = 5 + player.physical\r\n  // if something happens that reduces a player's physical, we probably\r\n  //   don't want it to heal them\r\n  if (player.physical > oldvalue or player.currenthealth > player.maxhealth) {\r\n    player.currenthealth = player.maxhealth\r\n  }\r\n  player.damage = 1 + player.physical\r\n}\r\nplayer.changedmental => {\r\n  player.AC = 4 + player.mental\r\n  player.attack = player.mental\r\n}\r\nplayer.physical = 0\r\nplayer.mental = 0\r\nplayer.agility = 0\r\nplayer.social = 0\r\n// Then show the menu\r\ndo (character_creation_turnscript, \"script\")\r\n```\r\n(I assumed that you're giving the player 4 stat points, and that the maximum for each stat is 3. If you want the maximum to still be 2, just remove the last entry from each list of descriptions)\r\n\r\nThen in the \"start\" room, you'd put a turnscript named `character_creation_turnscript` (don't forget to enable it). This runs every turn until the player has finished choosing options:\r\n```\r\nif (player.stat_points_remaining <= 0) {\r\n  game.showdescriptiononenter = true\r\n  MoveObject (player, first room)\r\n}\r\nelse {\r\n  options = NewStringDictionary()\r\n  foreach (key, player.stat_descriptions) {\r\n    descriptions = DictionaryItem (player.stat_descriptions, key)\r\n    if (ListCount (descriptions) > GetInt(player, key) + 1) {\r\n      dictionary add (options, key, ListItem (descriptions, GetInt(player, key) + 1))\r\n    }\r\n  }\r\n  msg (\"You can train {player.stat_points_remaining} times before your quest begins.\")\r\n  ShowMenu (\"You can become…\", options, false) {\r\n    player.stat_points_remaining = player.stat_points_remaining - 1\r\n    stat = GetInt (player, result)\r\n    set (player, result, stat + 1)\r\n  }\r\n}\r\n```\r\n\r\nOnce you've got character creation sorted, you'll probably want to make some functions to handle the dice rolling.\r\nAs your game grows, there's a chance you might decide to change the system. To use different dice, maybe, or implement a lucky charm that gives a player a reroll on their next skill check. This is why it's useful to create functions; so that when you come to make a change like that, you only need to make the change in one place.\r\n\r\nSo, here's a simple function:\r\n```\r\n<function name=\"SkillCheck\" type=\"boolean\" parameters=\"character, stat, difficulty\">\r\n  roll = GetRandomInt (1, 6)\r\n  stat_points = GetInt (character, stat)\r\n  if (stat_points + roll >= difficulty) {\r\n    return (true)\r\n  }\r\n  else {\r\n    return (false)\r\n  }\r\n</function>\r\n```\r\n(I could have made the script for that function a single line, `return (GetRandomInt(1,6)+GetInt(character,stat) >= difficulty)`, but I thought it might be a good idea to give you code that's a little easier to read)\r\n\r\n\r\nThen when you're building your dungeon, you could for example have a heavy box with a \"push\" verb:\r\n```\r\nif (SkillCheck (\"physical\", 5)) {\r\n  msg (\"You push the box across the floor a little.\")\r\n  this.hasbeenmoved = true\r\n  // any other code you want to run goes here\r\n}\r\nelse {\r\n  msg (\"You push the box as hard as you can, but it won't shift.\")\r\n}\r\n```\r\nMaybe the box is blocking a doorway. So you'd have an exit with the \"run script\" checkbox ticked, and the script:\r\n```\r\nif (GetBoolean (heavy box, \"hasbeenmoved\")) {\r\n  MoveObject (player, this.to)\r\n}\r\nelse {\r\n  msg (\"I can't go that way. A large box is blocking my path.\")\r\n}\r\n```\r\n\r\nHopefully these simple examples are easy enough to follow. If you've done programming before, you shouldn't have any trouble picking up Quest's scripting language. If you have any trouble, I'll do my best to help.\r\n\r\nI was going to show some example combat code as well, but I'm being called away from the computer now. I can give suggestions later if you need some help. For now, here's an example of an attack-handling function (which would be called by a command for the player, and probably a turnscript for any enemies):\r\n```\r\n<function name=\"DoAttack\" parameters=\"attacker, target\">\r\n  if (SkillCheck (attacker, \"attack\", GetInt (target, \"AC\"))) {\r\n    dmg = GetRandomInt (1, 6) + GetInt (attacker, \"damage\")\r\n    msg (CapFirst (WriteVerb (attacker, \"attack\")) + \" \" + GetDisplayName (target) + \", and inflicts \"+dmg+\" points of damage.\")\r\n    target.currenthealth = target.currenthealth - dmg\r\n  }\r\n  else {\r\n    msg (CapFirst (WriteVerb (attacker, \"attack\")) + \" \" + GetDisplayName (target) + \", but misses.\")\r\n  }\r\n</function>\r\n```\r\n\r\nAs far as armour goes, if you're worried about it being OP, you could have it work as a probability. For example, armour might have a random chance (⅙ or ⅓) of reducing the damage from an attack by 1.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think 4 attributes would be fine.</p>\n<p>If you're using more attributes, obviously that means there's more points to go around (4 sounds good); so the menu could be unwieldy. In that case, I'd recommend moving some of the code out of the start script.</p>\n<p>If you want to hide the actual numbers, you could come up with descriptions for each stat level.</p>\n<p>So your start script would look more like:</p>\n<pre><code>player.stat_descriptions = NewDictionary()\ndictionary add (player.stat_descriptions, \"physical\", Split(\"weaker than anybody;as strong as most people around me;one of the strongest guys in my village;stronger than anyone else in the world\"))\ndictionary add (player.stat_descriptions, \"mental\", Split(\"as dumb as a bag of rocks;able to read and write;top of my class in school;a world-famous genius\"))\ndictionary add (player.stat_descriptions, \"agility\", Split(\"clumsy and slow;fast enough to catch a ball;a champion athlete;faster than a speeding bullet\"))\ndictionary add (player.stat_descriptions, \"social\", Split(\"that guy with no friends;a popular guy;the life of every party;the most awesome guy in the world\"))\nplayer.stat_points_remaining = 4\n// It might be easier to use a \"changed\" script. These run automatically whenever a stat is changed\n//   so it's easier if you want to add a level-up system in future\nplayer.changedphysical =&gt; {\n  player.maxhealth = 5 + player.physical\n  // if something happens that reduces a player's physical, we probably\n  //   don't want it to heal them\n  if (player.physical &gt; oldvalue or player.currenthealth &gt; player.maxhealth) {\n    player.currenthealth = player.maxhealth\n  }\n  player.damage = 1 + player.physical\n}\nplayer.changedmental =&gt; {\n  player.AC = 4 + player.mental\n  player.attack = player.mental\n}\nplayer.physical = 0\nplayer.mental = 0\nplayer.agility = 0\nplayer.social = 0\n// Then show the menu\ndo (character_creation_turnscript, \"script\")\n</code></pre>\n<p>(I assumed that you're giving the player 4 stat points, and that the maximum for each stat is 3. If you want the maximum to still be 2, just remove the last entry from each list of descriptions)</p>\n<p>Then in the \"start\" room, you'd put a turnscript named <code>character_creation_turnscript</code> (don't forget to enable it). This runs every turn until the player has finished choosing options:</p>\n<pre><code>if (player.stat_points_remaining &lt;= 0) {\n  game.showdescriptiononenter = true\n  MoveObject (player, first room)\n}\nelse {\n  options = NewStringDictionary()\n  foreach (key, player.stat_descriptions) {\n    descriptions = DictionaryItem (player.stat_descriptions, key)\n    if (ListCount (descriptions) &gt; GetInt(player, key) + 1) {\n      dictionary add (options, key, ListItem (descriptions, GetInt(player, key) + 1))\n    }\n  }\n  msg (\"You can train {player.stat_points_remaining} times before your quest begins.\")\n  ShowMenu (\"You can become…\", options, false) {\n    player.stat_points_remaining = player.stat_points_remaining - 1\n    stat = GetInt (player, result)\n    set (player, result, stat + 1)\n  }\n}\n</code></pre>\n<p>Once you've got character creation sorted, you'll probably want to make some functions to handle the dice rolling.<br>\nAs your game grows, there's a chance you might decide to change the system. To use different dice, maybe, or implement a lucky charm that gives a player a reroll on their next skill check. This is why it's useful to create functions; so that when you come to make a change like that, you only need to make the change in one place.</p>\n<p>So, here's a simple function:</p>\n<pre><code>&lt;function name=\"SkillCheck\" type=\"boolean\" parameters=\"character, stat, difficulty\"&gt;\n  roll = GetRandomInt (1, 6)\n  stat_points = GetInt (character, stat)\n  if (stat_points + roll &gt;= difficulty) {\n    return (true)\n  }\n  else {\n    return (false)\n  }\n&lt;/function&gt;\n</code></pre>\n<p>(I could have made the script for that function a single line, <code>return (GetRandomInt(1,6)+GetInt(character,stat) &gt;= difficulty)</code>, but I thought it might be a good idea to give you code that's a little easier to read)</p>\n<p>Then when you're building your dungeon, you could for example have a heavy box with a \"push\" verb:</p>\n<pre><code>if (SkillCheck (\"physical\", 5)) {\n  msg (\"You push the box across the floor a little.\")\n  this.hasbeenmoved = true\n  // any other code you want to run goes here\n}\nelse {\n  msg (\"You push the box as hard as you can, but it won't shift.\")\n}\n</code></pre>\n<p>Maybe the box is blocking a doorway. So you'd have an exit with the \"run script\" checkbox ticked, and the script:</p>\n<pre><code>if (GetBoolean (heavy box, \"hasbeenmoved\")) {\n  MoveObject (player, this.to)\n}\nelse {\n  msg (\"I can't go that way. A large box is blocking my path.\")\n}\n</code></pre>\n<p>Hopefully these simple examples are easy enough to follow. If you've done programming before, you shouldn't have any trouble picking up Quest's scripting language. If you have any trouble, I'll do my best to help.</p>\n<p>I was going to show some example combat code as well, but I'm being called away from the computer now. I can give suggestions later if you need some help. For now, here's an example of an attack-handling function (which would be called by a command for the player, and probably a turnscript for any enemies):</p>\n<pre><code>&lt;function name=\"DoAttack\" parameters=\"attacker, target\"&gt;\n  if (SkillCheck (attacker, \"attack\", GetInt (target, \"AC\"))) {\n    dmg = GetRandomInt (1, 6) + GetInt (attacker, \"damage\")\n    msg (CapFirst (WriteVerb (attacker, \"attack\")) + \" \" + GetDisplayName (target) + \", and inflicts \"+dmg+\" points of damage.\")\n    target.currenthealth = target.currenthealth - dmg\n  }\n  else {\n    msg (CapFirst (WriteVerb (attacker, \"attack\")) + \" \" + GetDisplayName (target) + \", but misses.\")\n  }\n&lt;/function&gt;\n</code></pre>\n<p>As far as armour goes, if you're worried about it being OP, you could have it work as a probability. For example, armour might have a random chance (⅙ or ⅓) of reducing the damage from an attack by 1.</p>\n\n",
      "PostDate": "2018-08-14T12:58:11.8716097Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7786e3e5-1edf-4c10-91d4-2f0e9e84ef35",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "being able to do the coding is one thing, being able to game design is another, and being able to balance the game mechanics and the game as a whole, is yet even a far greater challenge\r\n\r\nunfortunately, you just got to practice and get experience with game designing and balancing, I don't think there's really any guide book out there for it (at least not that I've found), **and/or use other games and their mechanics, as a guide.**\r\n\r\nHowever many in-game attributes/stats you got, they need to have a specific purpose of mechanic that you want in your game, of course.\r\n\r\nso, it might be better to think of the mechanic/system/feature you want in the game, and design the code, Attributes (VARIABLES), and scripting, around that\r\n\r\nalso, keep it simple, as you can always go back and expand and/or change upon it later\r\n\r\nI myself am trying to learn game designing and game balancing for my first time too (I never did D&D stuff), and I struggle just without the coding of whatever I want to do, sighs... (am still working on character creation for my massive ambitious TES:skyrim-oblivion-morrowind level of rpg that I'll never ever ever get even remotely to finishing... laughs)",
      "EditableFormat": "markdown",
      "HTML": "<p>being able to do the coding is one thing, being able to game design is another, and being able to balance the game mechanics and the game as a whole, is yet even a far greater challenge</p>\n<p>unfortunately, you just got to practice and get experience with game designing and balancing, I don't think there's really any guide book out there for it (at least not that I've found), <strong>and/or use other games and their mechanics, as a guide.</strong></p>\n<p>However many in-game attributes/stats you got, they need to have a specific purpose of mechanic that you want in your game, of course.</p>\n<p>so, it might be better to think of the mechanic/system/feature you want in the game, and design the code, Attributes (VARIABLES), and scripting, around that</p>\n<p>also, keep it simple, as you can always go back and expand and/or change upon it later</p>\n<p>I myself am trying to learn game designing and game balancing for my first time too (I never did D&amp;D stuff), and I struggle just without the coding of whatever I want to do, sighs... (am still working on character creation for my massive ambitious TES:skyrim-oblivion-morrowind level of rpg that I'll never ever ever get even remotely to finishing... laughs)</p>\n\n",
      "PostDate": "2018-08-14T13:38:06.139167Z",
      "LastEditDate": "2018-08-14T13:41:31.7810081Z",
      "link": null
    },
    {
      "PostId": "ddf80145-966e-4492-bb36-eb6b91cb0049",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Forgive me for being a noob. Thank you everyone who has helped me with this and I need some further help with implementation of the code.\r\n\r\nI want to make two test games, one with the 2 attribute system and the other with the 4 attribute system.\r\n\r\nI'm not sure where to put what code where into my game, I'll be starting a fresh game for each system to test them out. So from a fresh start where do I put what code where?\r\n\r\nI want to make sure the code posted above is not being added to each other or if they are separate whole sets of coding.\r\n\r\nThanks",
      "EditableFormat": "markdown",
      "HTML": "<p>Forgive me for being a noob. Thank you everyone who has helped me with this and I need some further help with implementation of the code.</p>\n<p>I want to make two test games, one with the 2 attribute system and the other with the 4 attribute system.</p>\n<p>I'm not sure where to put what code where into my game, I'll be starting a fresh game for each system to test them out. So from a fresh start where do I put what code where?</p>\n<p>I want to make sure the code posted above is not being added to each other or if they are separate whole sets of coding.</p>\n<p>Thanks</p>\n\n",
      "PostDate": "2018-08-15T04:49:32.6831242Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cdf50652-8b0a-41ba-bbbc-d046610d97dc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code I posted for the 4-attribute and 2-attribute character creation systems is a complete character creation system; so you should only need one of those.\r\n\r\nThe 2-attribute version doesn't change the player's attack/damage/health if your physical or mental stats change later. If you want to do that, you'd need to include the blocks that start with `player.changedphysical => {` and `changedmental => {` from the other version.\r\n\r\nThe `SkillCheck` and `DoAttack` functions should probably be the same in either version.\r\n\r\nIf you're using the combat script, you'll also want to give the player object a script attribute named `changedcurrenthealth` to check if they're dead:\r\n```\r\nif (this.currenthealth > this.maxhealth) {\r\n  this.currenthealth = this.maxhealth\r\n}\r\nelse if (this.currenthealth < 0) {\r\n  msg (\"You're dead.\")\r\n  finish()\r\n}\r\n```\r\n\r\nIf you need any help with other parts of it, I'll be happy to help. Hopefully you can follow the code, and see what each line is doing.",
      "EditableFormat": "markdown",
      "HTML": "<p>The code I posted for the 4-attribute and 2-attribute character creation systems is a complete character creation system; so you should only need one of those.</p>\n<p>The 2-attribute version doesn't change the player's attack/damage/health if your physical or mental stats change later. If you want to do that, you'd need to include the blocks that start with <code>player.changedphysical =&gt; {</code> and <code>changedmental =&gt; {</code> from the other version.</p>\n<p>The <code>SkillCheck</code> and <code>DoAttack</code> functions should probably be the same in either version.</p>\n<p>If you're using the combat script, you'll also want to give the player object a script attribute named <code>changedcurrenthealth</code> to check if they're dead:</p>\n<pre><code>if (this.currenthealth &gt; this.maxhealth) {\n  this.currenthealth = this.maxhealth\n}\nelse if (this.currenthealth &lt; 0) {\n  msg (\"You're dead.\")\n  finish()\n}\n</code></pre>\n<p>If you need any help with other parts of it, I'll be happy to help. Hopefully you can follow the code, and see what each line is doing.</p>\n\n",
      "PostDate": "2018-08-15T09:32:31.5612128Z",
      "LastEditDate": "2018-08-15T09:34:15.4221187Z",
      "link": null
    },
    {
      "PostId": "52316315-eb2c-4ed3-95f8-3709bd642fea",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Where do I paste this code? In game or under player?",
      "EditableFormat": "markdown",
      "HTML": "<p>Where do I paste this code? In game or under player?</p>\n\n",
      "PostDate": "2018-08-15T09:41:24.4635166Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5f668a95-1d15-4618-ad00-99f10f9c3dcf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The `changedcurrenthealth` script?\r\nIt should be a script attribute on the player object.\r\nI believe that in the desktop version the player object has an \"Attributes\" tab where you can add this.\r\n\r\nIf you're using the online version of Quest, you would need to put it in either the start script, or the player's initialisation script, with an extra `player.changedcurrenthealth => {` at the start.",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>changedcurrenthealth</code> script?<br>\nIt should be a script attribute on the player object.<br>\nI believe that in the desktop version the player object has an \"Attributes\" tab where you can add this.</p>\n<p>If you're using the online version of Quest, you would need to put it in either the start script, or the player's initialisation script, with an extra <code>player.changedcurrenthealth =&gt; {</code> at the start.</p>\n\n",
      "PostDate": "2018-08-15T12:29:03.5308779Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e1f7f8a1-0ec5-40c5-b08e-d425c214e7de",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for my ignorance of Quest, I haven't scripted on a game engine before.\r\n\r\nThis code, the first that was written, can you give me step by step instructions on how to implement it into a new game?\r\n**options = Split(\"strong;smart;average\")\r\nShowMenu (\"What kind of man would you like to be?\", options, false) {\r\n  switch (result) {\r\n    case (\"strong\") {\r\n      player.physical = 2\r\n      player.mental = 0\r\n    }\r\n    case (\"smart\") {\r\n      player.physical = 0\r\n      player.mental = 2\r\n    }\r\n    case (\"average\") {\r\n      player.physical = 1\r\n      player.mental = 1\r\n    }\r\n    default {\r\n      msg (\"You selected something that wasn't one of the options, so there must be a typo in my code.\")\r\n    }\r\n  }\r\n  player.maxhealth = 5 + player.physical\r\n  player.currenthealth = player.maxhealth\r\n  player.AC = 4 + player.mental\r\n  player.attack = player.mental\r\n  player.damage = 1 + player.physical\r\n  // We enable room descriptions here, so the game doesn't say \"You are in a character creation\"\r\n  // but it does say \"You are in a dungeon\" or whatever when we move them to the actual start of the game\r\n  game.showdescriptiononenter = true\r\n  MoveObject (player, first room)\r\n}**",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for my ignorance of Quest, I haven't scripted on a game engine before.</p>\n<p>This code, the first that was written, can you give me step by step instructions on how to implement it into a new game?<br>\n<strong>options = Split(\"strong;smart;average\")<br>\nShowMenu (\"What kind of man would you like to be?\", options, false) {<br>\nswitch (result) {<br>\ncase (\"strong\") {<br>\nplayer.physical = 2<br>\nplayer.mental = 0<br>\n}<br>\ncase (\"smart\") {<br>\nplayer.physical = 0<br>\nplayer.mental = 2<br>\n}<br>\ncase (\"average\") {<br>\nplayer.physical = 1<br>\nplayer.mental = 1<br>\n}<br>\ndefault {<br>\nmsg (\"You selected something that wasn't one of the options, so there must be a typo in my code.\")<br>\n}<br>\n}<br>\nplayer.maxhealth = 5 + player.physical<br>\nplayer.currenthealth = player.maxhealth<br>\nplayer.AC = 4 + player.mental<br>\nplayer.attack = player.mental<br>\nplayer.damage = 1 + player.physical<br>\n// We enable room descriptions here, so the game doesn't say \"You are in a character creation\"<br>\n// but it does say \"You are in a dungeon\" or whatever when we move them to the actual start of the game<br>\ngame.showdescriptiononenter = true<br>\nMoveObject (player, first room)<br>\n}</strong></p>\n\n",
      "PostDate": "2018-08-15T13:28:56.8833706Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "00dd7372-b601-45e1-89f6-0083630544d5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(hope I'm not misunderstanding you)\r\nStep-by-step:\r\n\r\n1. Create a new room called \"start\" or similar (so that the player can't see anything until they've done character creation)\r\n2. Move the player object into that room.\r\n3. On the game object's \"descriptions\" tab, until the option marked \"Show room description when entering a room\"\r\n4. Go to the \"scripts\" tab, and look at the 'start' script; this will be run as soon as the game starts\r\n5. Click the \"code view\" button and paste in the script\r\n6. In the line `MoveObject (player, first room)`, change `first room` to the name of the room that you want the player to appear in once they've chosen their character.\r\n\r\nThat should be all you need for that one.",
      "EditableFormat": "markdown",
      "HTML": "<p>(hope I'm not misunderstanding you)<br>\nStep-by-step:</p>\n<ol>\n<li>Create a new room called \"start\" or similar (so that the player can't see anything until they've done character creation)</li>\n<li>Move the player object into that room.</li>\n<li>On the game object's \"descriptions\" tab, until the option marked \"Show room description when entering a room\"</li>\n<li>Go to the \"scripts\" tab, and look at the 'start' script; this will be run as soon as the game starts</li>\n<li>Click the \"code view\" button and paste in the script</li>\n<li>In the line <code>MoveObject (player, first room)</code>, change <code>first room</code> to the name of the room that you want the player to appear in once they've chosen their character.</li>\n</ol>\n<p>That should be all you need for that one.</p>\n\n",
      "PostDate": "2018-08-15T14:16:26.2668659Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e32c6e0b-71a7-4acd-b4eb-a23e2ee4f6bf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ paiyaku:\r\n\r\nif you want some help in learning quest and its coding more:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\nask if you need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>@ paiyaku:</p>\n<p>if you want some help in learning quest and its coding more:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>ask if you need help with anything</p>\n\n",
      "PostDate": "2018-08-15T15:36:16.4482447Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a1998f0f-99e4-4db4-8d8e-b9c7cf130e17",
      "UserId": 371376,
      "Username": "Paiyaku",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e47fb11da970b993303e8556bc11b6f9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you for the help everyone. I spent sometime going over my stat system for 4 attributes and I think I’ve got something pretty good now. \r\n\r\nLet me know what you all think. \r\n\r\n\r\n\r\n**4 points to spend between the 4 ability scores:\r\nPhysical\r\nMental\r\nAgility\r\nSocial\r\n\r\nPhysical\r\nHealth: 5+Physical\r\nMelee Attack: dice+Physical \r\nMelee Damage: dice+1+Physical \r\n\r\nMental\r\nMagical Defense: Mental\r\nMagical Attacks: dice+Mental\r\nMagical Damage: dice+1+Mental \r\n\r\nAgility\r\nUnarmored AC: 4+Agility \r\nRanged Attack: dice+agility \r\nRanged Damage: dice+1+agility\r\n\r\nSocial:\r\nBartering: item price - social\r\nPerformance: dice+social\r\nSpeechcraft: dice+1+social\r\n\r\nAbility/skill check dice:\r\n1d6: rolling 1 is automatic fail and rolling 6 is automatic success within the physical ability of the character. \r\n\r\nAttack dice:\r\n1d6 - rolling 1 is automatic fail and rolling 6 doubles the damage number rolled. \r\n\r\nDamage Dice:\r\n1 - unarmed \r\n1d2 - improvised\r\n1d4 - common weapons\r\n1d6 - uncommon weapons\r\n1d8 - rare weapons \r\n\r\n\r\nMelee/Ranged Attack is against Armor/Unarmored Class\r\nDamage is against HP\r\nMagic Attack is against Armor and if attacker hits the magic defense of the victim reduces the damage taken.**",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you for the help everyone. I spent sometime going over my stat system for 4 attributes and I think I’ve got something pretty good now.</p>\n<p>Let me know what you all think.</p>\n<p>**4 points to spend between the 4 ability scores:<br>\nPhysical<br>\nMental<br>\nAgility<br>\nSocial</p>\n<p>Physical<br>\nHealth: 5+Physical<br>\nMelee Attack: dice+Physical<br>\nMelee Damage: dice+1+Physical</p>\n<p>Mental<br>\nMagical Defense: Mental<br>\nMagical Attacks: dice+Mental<br>\nMagical Damage: dice+1+Mental</p>\n<p>Agility<br>\nUnarmored AC: 4+Agility<br>\nRanged Attack: dice+agility<br>\nRanged Damage: dice+1+agility</p>\n<p>Social:<br>\nBartering: item price - social<br>\nPerformance: dice+social<br>\nSpeechcraft: dice+1+social</p>\n<p>Ability/skill check dice:<br>\n1d6: rolling 1 is automatic fail and rolling 6 is automatic success within the physical ability of the character.</p>\n<p>Attack dice:<br>\n1d6 - rolling 1 is automatic fail and rolling 6 doubles the damage number rolled.</p>\n<p>Damage Dice:<br>\n1 - unarmed<br>\n1d2 - improvised<br>\n1d4 - common weapons<br>\n1d6 - uncommon weapons<br>\n1d8 - rare weapons</p>\n<p>Melee/Ranged Attack is against Armor/Unarmored Class<br>\nDamage is against HP<br>\nMagic Attack is against Armor and if attacker hits the magic defense of the victim reduces the damage taken.**</p>\n\n",
      "PostDate": "2018-08-15T16:19:22.0326731Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fbd1a44b-d71c-40ac-9f95-1683b86397e7",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just in case you don't know already...\r\n\r\nthere's a few built-in Randomization Functions:\r\n\r\n1. DiceRoll (\"NUMBER_OF_DIEdNUMBER_OF_SIDES_ON_DIE\") // self-explanatory (what happens when you roll X Die with X number of sides ??? --- that's how this Function/Script behaves)\r\n\r\n2. GetRandomInt (MIN_INTEGER_VALUE,MAX_INTEGER_VALUE) // it randomly selects a number (integer) from the min value to the max value\r\n\r\n3. GetRandomDouble () // it randomly (automatically) selects from 0.1 to 0.9, so that's why there's no parameters for it\r\n\r\n4. RandomChance (INTEGER_VALUE) // Value must be an integer from 0 to 100 // Value is the percent chance of it being 'TRUE', and thus: 100-Value, is the chance of it being 'FALSE')\r\n\r\n----------------\r\n\r\nyou can do quite some neat stuff with these and Lists, for example an item drop system:\r\n\r\nyou have a list of items that can be dropped\r\n\r\nthe 'GetRandomInt' selects the item to be dropped, from the list of droppable items\r\n\r\nand then the 'RandomChance' determines whether the selected item is actually dropped or not",
      "EditableFormat": "markdown",
      "HTML": "<p>just in case you don't know already...</p>\n<p>there's a few built-in Randomization Functions:</p>\n<ol>\n<li>\n<p>DiceRoll (\"NUMBER_OF_DIEdNUMBER_OF_SIDES_ON_DIE\") // self-explanatory (what happens when you roll X Die with X number of sides ??? --- that's how this Function/Script behaves)</p>\n</li>\n<li>\n<p>GetRandomInt (MIN_INTEGER_VALUE,MAX_INTEGER_VALUE) // it randomly selects a number (integer) from the min value to the max value</p>\n</li>\n<li>\n<p>GetRandomDouble () // it randomly (automatically) selects from 0.1 to 0.9, so that's why there's no parameters for it</p>\n</li>\n<li>\n<p>RandomChance (INTEGER_VALUE) // Value must be an integer from 0 to 100 // Value is the percent chance of it being 'TRUE', and thus: 100-Value, is the chance of it being 'FALSE')</p>\n</li>\n</ol>\n<hr>\n<p>you can do quite some neat stuff with these and Lists, for example an item drop system:</p>\n<p>you have a list of items that can be dropped</p>\n<p>the 'GetRandomInt' selects the item to be dropped, from the list of droppable items</p>\n<p>and then the 'RandomChance' determines whether the selected item is actually dropped or not</p>\n\n",
      "PostDate": "2018-08-16T08:35:29.2995416Z",
      "LastEditDate": "2018-08-16T08:42:07.3980389Z",
      "link": null
    }
  ]
}
