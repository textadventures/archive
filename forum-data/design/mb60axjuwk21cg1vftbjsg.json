{
  "Topic": {
    "TopicId": "mb60axjuwk21cg1vftbjsg",
    "ForumId": "20",
    "Title": "Converting Quest games to HTML Using Software which Was Never Released",
    "LastUpdated": "2024-08-02T00:30:21.9984059Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6953acaa-0338-45d4-8b5d-765f902f9d2b",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay... if anyone is bored:\r\n\r\nThis concerns the ```game.scopebackdrop``` script, ```ScopeReachableNotHeldForRoom()```, and ```do```.\r\n\r\n```do``` creates a new dictionary, then adds \"items\" as a key which points to an object list. It then calls the ```game.scopebackdrop``` script with that dictionary as a parameter, hence creating the ```items``` variable in the ```game.scopebackdrop``` script.\r\n\r\n```\r\n  <function name=\"ScopeReachableNotHeldForRoom\" type=\"objectlist\" parameters=\"room\">    \r\n  <![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add(result, obj)\r\n      }\r\n    }\r\n    if (HasScript(game, \"scopebackdrop\")) {\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n      do (game, \"scopebackdrop\", dict)\r\n    }\r\n    return (result)\r\n  ]]>\r\n  </function>\r\n```\r\n\r\n---\r\nThe ```game.scopebackdrop``` script:\r\n\r\n```\r\n    <scopebackdrop type=\"script\">\r\n      if (HasAttribute(game.pov.parent, \"stock\")) {\r\n        foreach (o, GetDirectChildren(game.pov.parent.stock)) {\r\n          list add (items, o)\r\n        }\r\n      }\r\n    </scopebackdrop>\r\n```\r\n\r\n---\r\nThis works correctly.\r\n\r\n...until I use a never-released, abandoned piece of software that Alex created to convert a Quest game to HTML.\r\n\r\nI have updated the code quite a few times over the years, with a lot of help from some of you, and someone recently asked for help with it. So, here we are. I've fixed quite a few things that I couldn't figure out last time, and it successfully converts a game with a shop now, but I have to alter ```ScopeReachableNotHeldForRoom()``` and add a little code to the ```game.scopebackdrop``` script to make things work in the HTML version which is created.\r\n\r\nNote that I have things working right now; I'm just trying to wrap my mind around one thing:\r\n\r\nHere is the skinny on ```do```:\r\n\r\n```\r\ndo (object, string attribute name, dictionary parameters)\r\n```\r\n\r\n > Runs an object’s script attribute, passing in parameters via dictionary. The key/value pairs in the dictionary will be turned into local variables for the script. The special variable “this” can be used in the script to reference the object.\r\n\r\n---\r\nNow, here is the JS function which replaces ```do``` (which was written by Alex, not me):\r\n\r\n```\r\nfunction runscriptattribute3(object, attribute, parameters) {\r\n    var fn = GetAttribute(object, attribute);\r\n    fn.call(object, parameters);\r\n}\r\n```\r\n\r\n---\r\nAnd here is the JS version of ```ScopeReachableNotHeldForRoom()``` (which was created by the game-converting software):\r\n\r\n```\r\nfunction ScopeReachableNotHeldForRoom(room)\r\n{\r\nvar result = NewObjectList();\r\nvar list_obj = GetAllChildObjects(room);\r\nvar list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');\r\nfor (var iterator_obj in list_obj) {\r\nvar obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;\r\nif (list_obj_isarray || iterator_obj!=\"__dummyKey\") { if (ContainsReachable(room, obj) && obj != _obj323.pov && !(Contains(_obj323.pov, obj))) {\r\nlistadd (result, obj);\r\n} }\r\n}\r\nif (HasScript(_obj323, \"scopebackdrop\")) {\r\nvar dict = NewDictionary();\r\ndictionaryadd (dict, \"items\", result);\r\nrunscriptattribute3 (_obj323, \"scopebackdrop\", dict);\r\n}\r\nreturn (result);\r\n}\r\n```\r\n\r\n---\r\nAnd finally, here is the JS version of ```game.scopebackdrop``` (created by the software):\r\n\r\n```\r\n\"scopebackdrop\": function() { if (HasAttribute(_obj323.pov.parent, \"stock\")) {\r\nvar list_o = GetDirectChildren(_obj323.pov.parent.stock);\r\nvar list_o_isarray = (Object.prototype.toString.call(list_o) === '[object Array]');\r\nfor (var iterator_o in list_o) {\r\nvar o = list_o_isarray ? list_o[iterator_o] : iterator_o;\r\nif (list_o_isarray || iterator_o!=\"__dummyKey\") { listadd (items, o); }\r\n}\r\n} },\r\n```\r\n\r\n---\r\nThis throws an error, because ```items``` does not exist.\r\n\r\nSo, I decided to be smart and add some code to ```game.scopebackdrop``` to declare ```items``` if it did not exist. I used ```IsDefined()``` in Quest to do this, and it works in Quest just fine.\r\n\r\n```\r\n  if (not IsDefined(\"items\")) {\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add(result, obj)\r\n      }\r\n    }\r\n    items = result\r\n  }\r\n  if (HasAttribute(game.pov.parent, \"stock\")) {\r\n    foreach (o, GetDirectChildren(game.pov.parent.stock)) {\r\n      list add (items, o)\r\n    }\r\n  }\r\n```\r\n\r\n---\r\nI ran into issues once the game was converted to HTML, though.\r\n\r\nFirst, the ```IsDefined()``` function in the converting software was obviously added while testing something and Alex most probably intended to go back and fix it.\r\n\r\n```\r\nfunction IsDefined(variable) {\r\n    return true;\r\n}\r\n```\r\n\r\n---\r\nSo that (obviously) didn't help, and I still got the same error in the browser because ```items``` did not exist.\r\n\r\nSo, I decided to fix that function.\r\n\r\n```\r\nfunction IsDefined(variable) {\r\n    return (typeof variable != undefined;\r\n}\r\n```\r\n\r\n---\r\nWell, that (come to find out) will always return ```true```, because the variable is a string.\r\n\r\nIn Quest, I need it to be ```IsDefined(\"items\")```, but in JS it should be ```IsDefined(items)``` for that to work.\r\n\r\nI also tried using ```TypeOf()```, but it throws an error in Quest if the variable does not exist.\r\n\r\nIn the end, I just created attributes to check if the game was being played in Quest or if it was the HTML version as a workaround, but I still think there is a way to check if something is defined in Quest without using ```IsDefined()``` and without throwing any errors if the variable does not exist.\r\n\r\nSo... finally, to questions.\r\n\r\n### 1) Concerning ```ScopeReachableNotHeldForRoom()```, and ```do```\r\n\r\nOkay, so ```result``` is an object list of everything that should normally be in scope.\r\n\r\nThen, if ```game.scopebackdrop``` exists, the ```do``` script runs. Anything the ```do``` script adds to the variable ```items``` is retained while ```ScopeReachableNotHeldForRoom()``` is still running, and then ```ScopeReachableNotHeldForRoom()```returns that modified ```result``` object list at the end.\r\n\r\nDo I have that right?\r\n\r\nIf so, I'm assuming Javascript does not handle a \"dictionary\" (which is just an object in JS, if I'm not mistaken) as a parameter at all in the same way the ```do``` script in Quest handles a Quest dictionary.\r\n\r\n\r\n### 2) Concerning ```IsDefined()``` in JS\r\n\r\nQuest needs it written this way: ```IsDefined(\"items\")```.\r\n\r\nJavascript needs it written this way: ```IsDefined(items)```.\r\n\r\nDoes JS have a way to convert the string ```\"items\"``` to a variable name ```items```?",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay... if anyone is bored:</p>\n<p>This concerns the <code>game.scopebackdrop</code> script, <code>ScopeReachableNotHeldForRoom()</code>, and <code>do</code>.</p>\n<p><code>do</code> creates a new dictionary, then adds \"items\" as a key which points to an object list. It then calls the <code>game.scopebackdrop</code> script with that dictionary as a parameter, hence creating the <code>items</code> variable in the <code>game.scopebackdrop</code> script.</p>\n<pre><code>  &lt;function name=\"ScopeReachableNotHeldForRoom\" type=\"objectlist\" parameters=\"room\"&gt;    \n  &lt;![CDATA[\n    result = NewObjectList()\n    foreach (obj, GetAllChildObjects(room)) {\n      if (ContainsReachable(room, obj) and obj &lt;&gt; game.pov and not Contains(game.pov, obj)) {\n        list add(result, obj)\n      }\n    }\n    if (HasScript(game, \"scopebackdrop\")) {\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n      do (game, \"scopebackdrop\", dict)\n    }\n    return (result)\n  ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>The <code>game.scopebackdrop</code> script:</p>\n<pre><code>    &lt;scopebackdrop type=\"script\"&gt;\n      if (HasAttribute(game.pov.parent, \"stock\")) {\n        foreach (o, GetDirectChildren(game.pov.parent.stock)) {\n          list add (items, o)\n        }\n      }\n    &lt;/scopebackdrop&gt;\n</code></pre>\n<hr>\n<p>This works correctly.</p>\n<p>...until I use a never-released, abandoned piece of software that Alex created to convert a Quest game to HTML.</p>\n<p>I have updated the code quite a few times over the years, with a lot of help from some of you, and someone recently asked for help with it. So, here we are. I've fixed quite a few things that I couldn't figure out last time, and it successfully converts a game with a shop now, but I have to alter <code>ScopeReachableNotHeldForRoom()</code> and add a little code to the <code>game.scopebackdrop</code> script to make things work in the HTML version which is created.</p>\n<p>Note that I have things working right now; I'm just trying to wrap my mind around one thing:</p>\n<p>Here is the skinny on <code>do</code>:</p>\n<pre><code>do (object, string attribute name, dictionary parameters)\n</code></pre>\n<blockquote>\n<p>Runs an object’s script attribute, passing in parameters via dictionary. The key/value pairs in the dictionary will be turned into local variables for the script. The special variable “this” can be used in the script to reference the object.</p>\n</blockquote>\n<hr>\n<p>Now, here is the JS function which replaces <code>do</code> (which was written by Alex, not me):</p>\n<pre><code>function runscriptattribute3(object, attribute, parameters) {\n    var fn = GetAttribute(object, attribute);\n    fn.call(object, parameters);\n}\n</code></pre>\n<hr>\n<p>And here is the JS version of <code>ScopeReachableNotHeldForRoom()</code> (which was created by the game-converting software):</p>\n<pre><code>function ScopeReachableNotHeldForRoom(room)\n{\nvar result = NewObjectList();\nvar list_obj = GetAllChildObjects(room);\nvar list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');\nfor (var iterator_obj in list_obj) {\nvar obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;\nif (list_obj_isarray || iterator_obj!=\"__dummyKey\") { if (ContainsReachable(room, obj) &amp;&amp; obj != _obj323.pov &amp;&amp; !(Contains(_obj323.pov, obj))) {\nlistadd (result, obj);\n} }\n}\nif (HasScript(_obj323, \"scopebackdrop\")) {\nvar dict = NewDictionary();\ndictionaryadd (dict, \"items\", result);\nrunscriptattribute3 (_obj323, \"scopebackdrop\", dict);\n}\nreturn (result);\n}\n</code></pre>\n<hr>\n<p>And finally, here is the JS version of <code>game.scopebackdrop</code> (created by the software):</p>\n<pre><code>\"scopebackdrop\": function() { if (HasAttribute(_obj323.pov.parent, \"stock\")) {\nvar list_o = GetDirectChildren(_obj323.pov.parent.stock);\nvar list_o_isarray = (Object.prototype.toString.call(list_o) === '[object Array]');\nfor (var iterator_o in list_o) {\nvar o = list_o_isarray ? list_o[iterator_o] : iterator_o;\nif (list_o_isarray || iterator_o!=\"__dummyKey\") { listadd (items, o); }\n}\n} },\n</code></pre>\n<hr>\n<p>This throws an error, because <code>items</code> does not exist.</p>\n<p>So, I decided to be smart and add some code to <code>game.scopebackdrop</code> to declare <code>items</code> if it did not exist. I used <code>IsDefined()</code> in Quest to do this, and it works in Quest just fine.</p>\n<pre><code>  if (not IsDefined(\"items\")) {\n    result = NewObjectList()\n    foreach (obj, GetAllChildObjects(room)) {\n      if (ContainsReachable(room, obj) and obj &lt;&gt; game.pov and not Contains(game.pov, obj)) {\n        list add(result, obj)\n      }\n    }\n    items = result\n  }\n  if (HasAttribute(game.pov.parent, \"stock\")) {\n    foreach (o, GetDirectChildren(game.pov.parent.stock)) {\n      list add (items, o)\n    }\n  }\n</code></pre>\n<hr>\n<p>I ran into issues once the game was converted to HTML, though.</p>\n<p>First, the <code>IsDefined()</code> function in the converting software was obviously added while testing something and Alex most probably intended to go back and fix it.</p>\n<pre><code>function IsDefined(variable) {\n    return true;\n}\n</code></pre>\n<hr>\n<p>So that (obviously) didn't help, and I still got the same error in the browser because <code>items</code> did not exist.</p>\n<p>So, I decided to fix that function.</p>\n<pre><code>function IsDefined(variable) {\n    return (typeof variable != undefined;\n}\n</code></pre>\n<hr>\n<p>Well, that (come to find out) will always return <code>true</code>, because the variable is a string.</p>\n<p>In Quest, I need it to be <code>IsDefined(\"items\")</code>, but in JS it should be <code>IsDefined(items)</code> for that to work.</p>\n<p>I also tried using <code>TypeOf()</code>, but it throws an error in Quest if the variable does not exist.</p>\n<p>In the end, I just created attributes to check if the game was being played in Quest or if it was the HTML version as a workaround, but I still think there is a way to check if something is defined in Quest without using <code>IsDefined()</code> and without throwing any errors if the variable does not exist.</p>\n<p>So... finally, to questions.</p>\n<h3>1) Concerning <code>ScopeReachableNotHeldForRoom()</code>, and <code>do</code></h3>\n<p>Okay, so <code>result</code> is an object list of everything that should normally be in scope.</p>\n<p>Then, if <code>game.scopebackdrop</code> exists, the <code>do</code> script runs. Anything the <code>do</code> script adds to the variable <code>items</code> is retained while <code>ScopeReachableNotHeldForRoom()</code> is still running, and then <code>ScopeReachableNotHeldForRoom()</code>returns that modified <code>result</code> object list at the end.</p>\n<p>Do I have that right?</p>\n<p>If so, I'm assuming Javascript does not handle a \"dictionary\" (which is just an object in JS, if I'm not mistaken) as a parameter at all in the same way the <code>do</code> script in Quest handles a Quest dictionary.</p>\n<h3>2) Concerning <code>IsDefined()</code> in JS</h3>\n<p>Quest needs it written this way: <code>IsDefined(\"items\")</code>.</p>\n<p>Javascript needs it written this way: <code>IsDefined(items)</code>.</p>\n<p>Does JS have a way to convert the string <code>\"items\"</code> to a variable name <code>items</code>?</p>\n\n",
      "PostDate": "2024-08-02T00:30:21.9984059Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
