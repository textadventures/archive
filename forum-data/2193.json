{
  "Topic": {
    "TopicId": "2193",
    "ForumId": "10",
    "Title": "Bug: Broken Script Command?",
    "LastUpdated": "2009-10-07T21:08:23+01:00",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "17031",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I have a master item that I want to clone out to a bunch of different rooms/actors. (Let's say it's a sword, and let's say we're just propogating to the player's inventory.  I want to do this for a bunch of different items, but we'll stick to the sword for this explanation.)\n\nI create the master item, and give it a Propogate action.\n\nIn my start script, I loop through all the game objects and run the Propogate action for them, if they have it.  (Most objects won't need to propogate.)\n\nThe Propogate action looks like this:\n\n[code:14pv4cjv]action &lt;Propogate&gt; {\n\t\n\tset string &lt;this; $thisobject$&gt;\n\tset string &lt;cloned; $Propogate(#this#; inventory)$&gt;\n\tif (#cloned# &lt;&gt; NULL) then property &lt;#cloned#; owner = player&gt;\n}[/code:14pv4cjv]\n\nThe action calls a Propogate function, which looks like this:\n\n[code:14pv4cjv]'copies a master item into a new item, and then moves that item to the\n'provided location\n\n'parameter1 = the master item to clone\n'parameter2 = the location where the item is to be placed\ndefine function &lt;Propogate&gt;\n\n\tset string &lt;Propogate_return; NULL&gt;\t\n\n\tset string &lt;Propogate_p1; $parameter(1)$&gt;\n\tset string &lt;Propogate_p2; $parameter(2)$&gt;\n\n\tif real &lt;#Propogate_p1#&gt; then {\n\n\t\tif real &lt;#Propogate_p2#&gt; then {\n\n\t\t\tset &lt;Propogate_return; $GetNextClone(#Propogate_p1#)$&gt;\n\t\t\tclone &lt;#Propogate_p1#; #Propogate_return#; #Propogate_p2#&gt;\t\t\t\n\t\t\taction &lt;#Propogate_return#; Propogate&gt; msg &lt;    Propogate action removed&#46;&gt;\t\t\t\t\n\t\t}\n\t\telse {\n\t\t\tmsg &lt;Attempted to propogate base item '#Propogate_p1#' to non-existent location '#Propogate_p2#'&#46;&gt;\n\t\t}\n\t}\n\telse {\n\t\tmsg &lt;Attempted to propogate non-existent base item '#Propogate_p1#' to location '#Propogate_p2#'&#46;&gt;\n\t}\n\t\n\treturn &lt;#Propogate_return#&gt;\n\nend define[/code:14pv4cjv]\n\nThis function in turn utilizes another function (GetNextClone) to return the next clone name, but it is not relevant to the question at hand.  (GetNextClone is included in the downloadable ASL file at the end of this post.)  The line I'm having trouble with is this:\n\n[code:14pv4cjv]action &lt;#Propogate_return#; Propogate&gt; msg &lt;    Propogate action removed&#46;&gt;[/code:14pv4cjv]\n\nEssentially, all I'm attempting to do is overwrite the Propogate action that the cloned object inherits from the master object.  I don't want the cloned objects to have the functionality of this action.  (One might think, as I initially did, that I am going to cause an infinite loop with the startscript, since I am creating new objects with the Propogate action even as I iterate over the objects that already have it.  For some reason, Quest doesn't recognize the newly cloned objects in the startscript.)\n\nIn the documentation, regarding the 'action' script command, we have this under [url=http&#58;//www&#46;axeuk&#46;com/quest/developer/documentation/script-script&#46;htm:14pv4cjv]Script Commands[/url:14pv4cjv]:\n\n[quote:14pv4cjv][b:14pv4cjv]action &lt;object name; action name&gt; script[/b:14pv4cjv]\nCreates or replaces the specified action script for the specified object.[/quote:14pv4cjv]\n\nAnd then we have the following under [url=http&#58;//www&#46;axeuk&#46;com/quest/developer/documentation/script-changeproperties&#46;htm:14pv4cjv]Changing Objects and Rooms During the Game[/url:14pv4cjv]:\n\n[quote:14pv4cjv]A tick in the &quot;Action&quot; column means you can set script for the tag using the action command, e.g. \n\naction &lt;lamp; look&gt; picture &lt;lamp.bmp&gt;\n\nIf an action is set, that takes priority over an equivalent property.[/quote:14pv4cjv]\n\nBoth of which, to my mind, mean that the aforementioned troublesome line should be replacing the Propogate action of the cloned object with 'msg &lt;    Propogate action removed.&gt;'.\n\nThis, however, is not occurring.  There are two commands in the attached ASL file:\n\n1. &quot;list all #action# objects&quot;: replace #action# with 'propogate' (ie. type &quot;list all propogate objects&quot;), and it'll list those objects in the game with the Propogate action.  In this case 'sword' and 'sword_1' will appear in the list.  'sword' is the original, master item, whereas 'sword_1' is the cloned item in the player's inventory.\n2. &quot;action #object#:#action#&quot;: replace #object# with the object name shown by the previous command, and #action# with 'propogate', and it'll fire the propogate action for the object you specified.\n\nFor instance, if you type &quot;action sword:propogate&quot;, you'll get another sword in your inventory named 'sword_2'.  If you type &quot;action sword_1:propogate&quot;, you'll get another sword in your inventory named 'sword_1_1'.  \n\nBut the latter input shouldn't have that effect at all - I have explicitly overwritten the propogate action...\n\n[b:14pv4cjv]Question:[/b:14pv4cjv] Is the 'action &lt;object; action&gt; (script)' script command broken?",
      "EditableFormat": "bbcode",
      "HTML": "I have a master item that I want to clone out to a bunch of different rooms/actors. (Let's say it's a sword, and let's say we're just propogating to the player's inventory.  I want to do this for a bunch of different items, but we'll stick to the sword for this explanation.)<br/><br/>I create the master item, and give it a Propogate action.<br/><br/>In my start script, I loop through all the game objects and run the Propogate action for them, if they have it.  (Most objects won't need to propogate.)<br/><br/>The Propogate action looks like this:<br/><br/><pre><code>action &lt;Propogate&gt; {<br/>\t<br/>\tset string &lt;this; $thisobject$&gt;<br/>\tset string &lt;cloned; $Propogate(#this#; inventory)$&gt;<br/>\tif (#cloned# &lt;&gt; NULL) then property &lt;#cloned#; owner = player&gt;<br/>}</code></pre><br/><br/>The action calls a Propogate function, which looks like this:<br/><br/><pre><code>'copies a master item into a new item, and then moves that item to the<br/>'provided location<br/><br/>'parameter1 = the master item to clone<br/>'parameter2 = the location where the item is to be placed<br/>define function &lt;Propogate&gt;<br/><br/>\tset string &lt;Propogate_return; NULL&gt;\t<br/><br/>\tset string &lt;Propogate_p1; $parameter(1)$&gt;<br/>\tset string &lt;Propogate_p2; $parameter(2)$&gt;<br/><br/>\tif real &lt;#Propogate_p1#&gt; then {<br/><br/>\t\tif real &lt;#Propogate_p2#&gt; then {<br/><br/>\t\t\tset &lt;Propogate_return; $GetNextClone(#Propogate_p1#)$&gt;<br/>\t\t\tclone &lt;#Propogate_p1#; #Propogate_return#; #Propogate_p2#&gt;\t\t\t<br/>\t\t\taction &lt;#Propogate_return#; Propogate&gt; msg &lt;    Propogate action removed&#46;&gt;\t\t\t\t<br/>\t\t}<br/>\t\telse {<br/>\t\t\tmsg &lt;Attempted to propogate base item '#Propogate_p1#' to non-existent location '#Propogate_p2#'&#46;&gt;<br/>\t\t}<br/>\t}<br/>\telse {<br/>\t\tmsg &lt;Attempted to propogate non-existent base item '#Propogate_p1#' to location '#Propogate_p2#'&#46;&gt;<br/>\t}<br/>\t<br/>\treturn &lt;#Propogate_return#&gt;<br/><br/>end define</code></pre><br/><br/>This function in turn utilizes another function (GetNextClone) to return the next clone name, but it is not relevant to the question at hand.  (GetNextClone is included in the downloadable ASL file at the end of this post.)  The line I'm having trouble with is this:<br/><br/><pre><code>action &lt;#Propogate_return#; Propogate&gt; msg &lt;    Propogate action removed&#46;&gt;</code></pre><br/><br/>Essentially, all I'm attempting to do is overwrite the Propogate action that the cloned object inherits from the master object.  I don't want the cloned objects to have the functionality of this action.  (One might think, as I initially did, that I am going to cause an infinite loop with the startscript, since I am creating new objects with the Propogate action even as I iterate over the objects that already have it.  For some reason, Quest doesn't recognize the newly cloned objects in the startscript.)<br/><br/>In the documentation, regarding the 'action' script command, we have this under <a href=\"http&#58;//www&#46;axeuk&#46;com/quest/developer/documentation/script-script&#46;htm\" rel=\"nofollow\">Script Commands</a>:<br/><br/><blockquote><p><span style=\"font-weight:bold;\">action &lt;object name; action name&gt; script</span><br/>Creates or replaces the specified action script for the specified object.</p></blockquote><br/><br/>And then we have the following under <a href=\"http&#58;//www&#46;axeuk&#46;com/quest/developer/documentation/script-changeproperties&#46;htm\" rel=\"nofollow\">Changing Objects and Rooms During the Game</a>:<br/><br/><blockquote><p>A tick in the &quot;Action&quot; column means you can set script for the tag using the action command, e.g. <br/><br/>action &lt;lamp; look&gt; picture &lt;lamp.bmp&gt;<br/><br/>If an action is set, that takes priority over an equivalent property.</p></blockquote><br/><br/>Both of which, to my mind, mean that the aforementioned troublesome line should be replacing the Propogate action of the cloned object with 'msg &lt;    Propogate action removed.&gt;'.<br/><br/>This, however, is not occurring.  There are two commands in the attached ASL file:<br/><br/>1. &quot;list all #action# objects&quot;: replace #action# with 'propogate' (ie. type &quot;list all propogate objects&quot;), and it'll list those objects in the game with the Propogate action.  In this case 'sword' and 'sword_1' will appear in the list.  'sword' is the original, master item, whereas 'sword_1' is the cloned item in the player's inventory.<br/>2. &quot;action #object#:#action#&quot;: replace #object# with the object name shown by the previous command, and #action# with 'propogate', and it'll fire the propogate action for the object you specified.<br/><br/>For instance, if you type &quot;action sword:propogate&quot;, you'll get another sword in your inventory named 'sword_2'.  If you type &quot;action sword_1:propogate&quot;, you'll get another sword in your inventory named 'sword_1_1'.  <br/><br/>But the latter input shouldn't have that effect at all - I have explicitly overwritten the propogate action...<br/><br/><span style=\"font-weight:bold;\">Question:</span> Is the 'action &lt;object; action&gt; (script)' script command broken?<div><a href=\"/attachment/29\">Propogation.asl</a></div>",
      "PostDate": "2009-10-07T21:08:23+01:00",
      "LastEditDate": null
    }
  ]
}
