{
  "Topic": {
    "TopicId": "lfyt74ahpuandvzuvx5pkq",
    "ForumId": "10",
    "Title": "Undo (Doing More)",
    "LastUpdated": "2018-03-18T05:40:55.5875636Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e6a0f2db-5733-4022-8432-e55ce6b6c402",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "https://i.imgur.com/1xu84dwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heyo! \r\n\r\nSo obviously Quest has some Undo feature, but a couple of player's informed me that it doesn't undo everything made for that turn. For example; variables that were affected by items, turn-scripts perhaps and press to continue events. I was wondering if there was a way to program a better/stronger working Undo function that encompasses all of that; functions, turn-scripts etc. Here's the current one. \r\n```\r\nUnder one transaction\r\n```\r\nOr am I supposed to be using \r\n```\r\nUndoTurn\r\n```\r\nThanks for any help! Appreciated!\r\n\r\nAnonynn. \r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Heyo!</p>\n<p>So obviously Quest has some Undo feature, but a couple of player's informed me that it doesn't undo everything made for that turn. For example; variables that were affected by items, turn-scripts perhaps and press to continue events. I was wondering if there was a way to program a better/stronger working Undo function that encompasses all of that; functions, turn-scripts etc. Here's the current one.</p>\n<pre><code>Under one transaction\n</code></pre>\n<p>Or am I supposed to be using</p>\n<pre><code>UndoTurn\n</code></pre>\n<p>Thanks for any help! Appreciated!</p>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2018-03-18T05:40:55.5875636Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5efddd46-1ffa-4fdd-8edf-80a1d27ddf14",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looking at a new game, the built-in undo command just has the one script that calls the built-in undo function, which doesn't even show up as something you can modify when you check \"Show Library Elements\" (guess they don't want us to mess with that one).  So to undo something, you just pick the Undo script under Game State after clicking the usual Add new script button, or just type \"undo\" in code view.  That's it as far as calling the undo function.\r\n\r\nYes, you bring up a good topic about using undo.  This was the most cumbersome thing that I tried to get right in my game, not realizing all of the things that the undo command doesn't undo.  Most attribute changes are properly undone, but any display changes in the user interface that occur in-game are NOT undone (map, pictures, game panes, background, etc.).  Furthermore, your turn scripts (especially turn counters) will most likely redo changes that were undone, since they run after the undo command is executed.  To remedy this, I turned on a flag when undo was successfully executed, then each of my turn scripts has an if/then script that says not to run the turn script if the undo flag is on, then I have a turn script at the very end that resets the undo flag.  As for the UI display changes, I had to manually undo them by heavily modifying the undo command to handle that.\r\n\r\nSo to answer your question, unfortunately no, there is no better undo function -- you have to code the undo command to do that.  Which also means a lot of playtesting, at least for my game.  You can limit when/how often the player can use the undo command, which might lessen the workload.  Sorry!",
      "EditableFormat": "markdown",
      "HTML": "<p>Looking at a new game, the built-in undo command just has the one script that calls the built-in undo function, which doesn't even show up as something you can modify when you check \"Show Library Elements\" (guess they don't want us to mess with that one).  So to undo something, you just pick the Undo script under Game State after clicking the usual Add new script button, or just type \"undo\" in code view.  That's it as far as calling the undo function.</p>\n<p>Yes, you bring up a good topic about using undo.  This was the most cumbersome thing that I tried to get right in my game, not realizing all of the things that the undo command doesn't undo.  Most attribute changes are properly undone, but any display changes in the user interface that occur in-game are NOT undone (map, pictures, game panes, background, etc.).  Furthermore, your turn scripts (especially turn counters) will most likely redo changes that were undone, since they run after the undo command is executed.  To remedy this, I turned on a flag when undo was successfully executed, then each of my turn scripts has an if/then script that says not to run the turn script if the undo flag is on, then I have a turn script at the very end that resets the undo flag.  As for the UI display changes, I had to manually undo them by heavily modifying the undo command to handle that.</p>\n<p>So to answer your question, unfortunately no, there is no better undo function -- you have to code the undo command to do that.  Which also means a lot of playtesting, at least for my game.  You can limit when/how often the player can use the undo command, which might lessen the workload.  Sorry!</p>\n\n",
      "PostDate": "2018-03-18T07:29:47.9683171Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7eaf8342-06c0-4f5b-ad8b-a6a3aadb3e97",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are so many problems with undo that it is probably better to design games so that it isn't needed. It is very valuable, however, for anyone testing a game.",
      "EditableFormat": "markdown",
      "HTML": "<p>There are so many problems with undo that it is probably better to design games so that it isn't needed. It is very valuable, however, for anyone testing a game.</p>\n\n",
      "PostDate": "2018-03-18T08:31:15.4821626Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2ee35c88-20e0-43ad-a1d3-4658362107ac",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "https://i.imgur.com/1xu84dwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the responses! It's just a bonus feature for mine xD Appreciate it guys!\r\n\r\nAnonynn. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the responses! It's just a bonus feature for mine xD Appreciate it guys!</p>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2018-03-19T05:21:15.225978Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c2c55408-3aee-4fa0-99c4-280d19969cc0",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Furthermore, your turn scripts (especially turn counters) will most likely redo changes that were undone, since they run after the undo command is executed. To remedy this, I turned on a flag when undo was successfully executed, then each of my turn scripts has an if/then script that says not to run the turn script if the undo flag is on, then I have a turn script at the very end that resets the undo flag. \r\n\r\nThe next version of Quest will allow you to disable turn scripts for a turn, which will make that easier. Might be worthwhile adding it to the UNDO command for the next release too.\r\n\r\n> As for the UI display changes, I had to manually undo them by heavily modifying the undo command to handle that.\r\n\r\nI had not thought about it, but UNDO is not going to touch the interface. I personally would have UNDO call functions that update the interface.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Furthermore, your turn scripts (especially turn counters) will most likely redo changes that were undone, since they run after the undo command is executed. To remedy this, I turned on a flag when undo was successfully executed, then each of my turn scripts has an if/then script that says not to run the turn script if the undo flag is on, then I have a turn script at the very end that resets the undo flag.</p>\n</blockquote>\n<p>The next version of Quest will allow you to disable turn scripts for a turn, which will make that easier. Might be worthwhile adding it to the UNDO command for the next release too.</p>\n<blockquote>\n<p>As for the UI display changes, I had to manually undo them by heavily modifying the undo command to handle that.</p>\n</blockquote>\n<p>I had not thought about it, but UNDO is not going to touch the interface. I personally would have UNDO call functions that update the interface.</p>\n\n",
      "PostDate": "2018-03-19T08:11:43.2823499Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
