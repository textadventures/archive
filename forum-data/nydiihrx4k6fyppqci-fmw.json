{
  "Topic": {
    "TopicId": "nydiihrx4k6fyppqci-fmw",
    "ForumId": "10",
    "Title": "\"Create\" problem",
    "LastUpdated": "2016-07-12T12:58:58.6997709Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "db28c1ea-a50b-4c89-bec4-fa52d19ef2bc",
      "UserId": 251577,
      "Username": "tvisarl",
      "UserAvatar": null,
      "UserGravatar": "dd4d3ca1b00054d0f534c5a12491d74c",
      "EditableText": "Sorry for the preceding post. My mistake. I would delete it if I knew how to do it.\r\n\r\nActually, my question is this : I can't figure out how \"create\" and \"GetObject\" work together.\r\n\r\nIf I say : \r\ncreate (\"zut\", \"whatever\") \r\n\r\nzut = GetObject (\"something\")\r\n\r\nthen Quest ALWAYS answers that  zut isn't an object. Can you help?\r\n\r\nSorry again for my mistake,\r\nThierry\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for the preceding post. My mistake. I would delete it if I knew how to do it.</p>\n<p>Actually, my question is this : I can't figure out how \"create\" and \"GetObject\" work together.</p>\n<p>If I say :<br>\ncreate (\"zut\", \"whatever\")</p>\n<p>zut = GetObject (\"something\")</p>\n<p>then Quest ALWAYS answers that  zut isn't an object. Can you help?</p>\n<p>Sorry again for my mistake,<br>\nThierry</p>\n\n",
      "PostDate": "2016-07-12T12:58:58.6997709Z",
      "LastEditDate": null
    },
    {
      "PostId": "25f0213e-5edb-42c4-bfa1-576d02a3f1b0",
      "UserId": 924,
      "Username": "Pertex",
      "UserAvatar": null,
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "create (\"zut\")\r\nzut = GetObject (\"apple\")\r\n\r\nworks fine for me (if an object apple exists).\r\nBut you don't need to create an object when you use GetObject afterwards. just\r\n\r\nzut = GetObject (\"something\")",
      "EditableFormat": "markdown",
      "HTML": "<p>create (\"zut\")<br>\nzut = GetObject (\"apple\")</p>\n<p>works fine for me (if an object apple exists).<br>\nBut you don't need to create an object when you use GetObject afterwards. just</p>\n<p>zut = GetObject (\"something\")</p>\n\n",
      "PostDate": "2016-07-12T14:05:42.2161288Z",
      "LastEditDate": "2016-07-12T14:07:09.5975603Z"
    },
    {
      "PostId": "58605b3f-25b5-485d-a1b2-e0575ad2f091",
      "UserId": 1346,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "The `create ` command makes an object with the given name (and of the type \"whatever\"), so you need to use that name to get the object.\r\n```\r\ncreate (\"zut\", \"whatever\")\r\nobj = GetObject (\"zut\")\r\n```\r\nNow the variable `obj` holds the new object, which has the name \"zut\" and is of type \"whatever\".",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>create</code> command makes an object with the given name (and of the type \"whatever\"), so you need to use that name to get the object.</p>\n<pre><code>create (\"zut\", \"whatever\")\nobj = GetObject (\"zut\")\n</code></pre>\n<p>Now the variable <code>obj</code> holds the new object, which has the name \"zut\" and is of type \"whatever\".</p>\n\n",
      "PostDate": "2016-07-12T14:53:49.4043074Z",
      "LastEditDate": null
    },
    {
      "PostId": "adc901f7-ff2f-4032-b81a-901c57f2b754",
      "UserId": 251577,
      "Username": "tvisarl",
      "UserAvatar": null,
      "UserGravatar": "dd4d3ca1b00054d0f534c5a12491d74c",
      "EditableText": "Thanks to you both. \r\nProblem  solved, but this forum's format has changed completely and I no longer know how to use attachments or even how to search the forum. \r\nOut of sheer curiosity now, another question: when you add an object to an ObjectList, what does the list actually contain? Duplicates of the objects or just pointers to the originals?\r\nSorry for the nuisance.\r\nThierry",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks to you both.<br>\nProblem  solved, but this forum's format has changed completely and I no longer know how to use attachments or even how to search the forum.<br>\nOut of sheer curiosity now, another question: when you add an object to an ObjectList, what does the list actually contain? Duplicates of the objects or just pointers to the originals?<br>\nSorry for the nuisance.<br>\nThierry</p>\n\n",
      "PostDate": "2016-07-12T15:31:00.1064822Z",
      "LastEditDate": "2016-07-12T15:57:49.2506502Z"
    },
    {
      "PostId": "8da0819c-4924-4c12-81dd-e7db5e4a91ee",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Lists do NOT contain the actual-('physical') Objects, just their names (references), which you can thus then act upon though. Think of Lists as like a PE (physical education / exercise) school class coach'/teacher's student roster, having the names of the students, but those students aren't actually on that student roster paper (lol). However, the PE coach/teacher, can use that student roster to bark orders to those students.\r\n\r\nfor example:\r\n\r\n```\r\n<game name=\"example\">\r\n  <attr name=\"start\" type=\"script\">\r\n    foreach (character_variable, global_data_object) {\r\n      msg (character_variable.greeting_string_attribute)\r\n    }\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"room\">\r\n  <object name=\"player\">\r\n    <attr name=\"greeting_string_attribute\" type=\"string\">Hi, my name is player.</attr>\r\n  </object>\r\n  <object name=\"\"HK\">\r\n    <attr name=\"greeting_string_attribute\" type=\"string\">Hi, my name is Hegemon Khan, but you can call me hk for short.</attr>\r\n  </object>\r\n  <object name=\"Thierry\">\r\n    <attr name=\"greeting_string_attribute\" type=\"string\">Bonjour, my name is Thierry.</attr>\r\n  </object>\r\n</object>\r\n\r\n<object name=\"global_data_object\">\r\n  <attr name=\"playable_character_objectlist_attribute\" type=\"objectlist\">player;HK;Thierry</attr>\r\n</object>\r\n```\r\n\r\nthe 'player', 'HK', and 'Thierry' Player Objects are 'physically' located in 'room' Room Object, but they can be acted upon (in this example, displaying/messaging their 'greeting_string_attribute' String Attribute), via using the 'playable_character_objectlist_attribute' Objectlist Attribute of the 'global_data_object' Object.",
      "EditableFormat": "markdown",
      "HTML": "<p>Lists do NOT contain the actual-('physical') Objects, just their names (references), which you can thus then act upon though. Think of Lists as like a PE (physical education / exercise) school class coach'/teacher's student roster, having the names of the students, but those students aren't actually on that student roster paper (lol). However, the PE coach/teacher, can use that student roster to bark orders to those students.</p>\n<p>for example:</p>\n<pre><code>&lt;game name=\"example\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    foreach (character_variable, global_data_object) {\n      msg (character_variable.greeting_string_attribute)\n    }\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n  &lt;object name=\"player\"&gt;\n    &lt;attr name=\"greeting_string_attribute\" type=\"string\"&gt;Hi, my name is player.&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=\"\"HK\"&gt;\n    &lt;attr name=\"greeting_string_attribute\" type=\"string\"&gt;Hi, my name is Hegemon Khan, but you can call me hk for short.&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=\"Thierry\"&gt;\n    &lt;attr name=\"greeting_string_attribute\" type=\"string\"&gt;Bonjour, my name is Thierry.&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"playable_character_objectlist_attribute\" type=\"objectlist\"&gt;player;HK;Thierry&lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<p>the 'player', 'HK', and 'Thierry' Player Objects are 'physically' located in 'room' Room Object, but they can be acted upon (in this example, displaying/messaging their 'greeting_string_attribute' String Attribute), via using the 'playable_character_objectlist_attribute' Objectlist Attribute of the 'global_data_object' Object.</p>\n\n",
      "PostDate": "2016-07-12T18:15:49.6942391Z",
      "LastEditDate": "2016-07-12T18:18:07.8075228Z"
    },
    {
      "PostId": "c7ebb4fd-4557-4fa4-9adf-ff1eb2cc93d9",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "UserAvatar": null,
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Just to be clear, object references are not their names (which are strings) but rather an internal reference type. :) (Don't you just love overloaded terms?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Just to be clear, object references are not their names (which are strings) but rather an internal reference type. :) (Don't you just love overloaded terms?)</p>\n\n",
      "PostDate": "2016-07-13T06:30:42.5239793Z",
      "LastEditDate": null
    },
    {
      "PostId": "45272de9-70ba-4c0d-add2-a0622b0a3e4f",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "UserAvatar": null,
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "(I just realized these new forums don't have smileys...)",
      "EditableFormat": "markdown",
      "HTML": "<p>(I just realized these new forums don't have smileys...)</p>\n\n",
      "PostDate": "2016-07-13T06:34:34.8787428Z",
      "LastEditDate": null
    },
    {
      "PostId": "64aaf345-0a05-4139-93cb-da890aa2133d",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "UserAvatar": null,
      "UserGravatar": "ea7c0eff71476cd165c31f2605b2f755",
      "EditableText": "Let's hope there are still some people who can interpret smileys without them being translated into cute little pictures before! :-))",
      "EditableFormat": "markdown",
      "HTML": "<p>Let's hope there are still some people who can interpret smileys without them being translated into cute little pictures before! :-))</p>\n\n",
      "PostDate": "2016-07-13T06:55:44.7772641Z",
      "LastEditDate": null
    },
    {
      "PostId": "2da7be00-61ba-4184-ad7a-6482ed7ba70a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Thank you, again, for more insight into how quest is (internally) programmed, Jay!\r\n\r\n```\r\n<object name=\"player\">\r\n</object>\r\n\r\nString Attribute: player.name // it's (String) Value is: \"player\" // player.name = \"player\"\r\nObject Reference: player\r\n\r\nis this correct? or are the Object References only existing with/for Objectlist Attributes and Object Attributes and as Arguments/Parameters for Functions/Commands/Delegates/etc?\r\n```\r\n\r\n--------------------\r\n\r\nNo term is more 'overloaded' than....\r\n\r\ntype\r\n\r\narg... this term is used for like everything... laughs.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, again, for more insight into how quest is (internally) programmed, Jay!</p>\n<pre><code>&lt;object name=\"player\"&gt;\n&lt;/object&gt;\n\nString Attribute: player.name // it's (String) Value is: \"player\" // player.name = \"player\"\nObject Reference: player\n\nis this correct? or are the Object References only existing with/for Objectlist Attributes and Object Attributes and as Arguments/Parameters for Functions/Commands/Delegates/etc?\n</code></pre>\n<hr>\n<p>No term is more 'overloaded' than....</p>\n<p>type</p>\n<p>arg... this term is used for like everything... laughs.</p>\n\n",
      "PostDate": "2016-07-13T13:30:55.8877932Z",
      "LastEditDate": "2016-07-13T13:36:00.7856995Z"
    },
    {
      "PostId": "599adf78-0e85-4a13-b263-084ade27819f",
      "UserId": 1346,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "This is true. I have learnt to my cost never to name *anything* \"type\", be it a class, a database column, a variable, etc. because of the risk that something is already using that word.\r\n\r\nAnd \"sort\" is not a good alternative...",
      "EditableFormat": "markdown",
      "HTML": "<p>This is true. I have learnt to my cost never to name <em>anything</em> \"type\", be it a class, a database column, a variable, etc. because of the risk that something is already using that word.</p>\n<p>And \"sort\" is not a good alternative...</p>\n\n",
      "PostDate": "2016-07-13T13:53:20.3004066Z",
      "LastEditDate": null
    },
    {
      "PostId": "a4156bfe-81c1-4670-9343-0794bd690fb3",
      "UserId": 82,
      "Username": "Alex Warren",
      "UserAvatar": null,
      "UserGravatar": "cc27e6c4b03469c21b97673999cab9cc",
      "EditableText": "So true. I definitely made some bad naming choices! As they say, naming is hard.\r\n\r\nUsing the word \"type\" less is something I'll be bearing in mind for QuestKit.\r\n\r\nAlso @Jay, these days smileys are built in to Unicode 😀 👻 👑🐻  - most modern OSes have some kind of emoji picker, so there's no need to build additional features to support them in the forums. (phpBB is *old*)",
      "EditableFormat": "markdown",
      "HTML": "<p>So true. I definitely made some bad naming choices! As they say, naming is hard.</p>\n<p>Using the word \"type\" less is something I'll be bearing in mind for QuestKit.</p>\n<p>Also @Jay, these days smileys are built in to Unicode 😀 👻 👑🐻  - most modern OSes have some kind of emoji picker, so there's no need to build additional features to support them in the forums. (phpBB is <em>old</em>)</p>\n\n",
      "PostDate": "2016-07-13T13:59:44.0230784Z",
      "LastEditDate": "2016-07-13T14:04:09.3893763Z"
    },
    {
      "PostId": "abb87537-911a-4f78-8d88-3ca977c1d327",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "it's not just quest's programming, Alex. I use too many 'type' labels: 'eye_type', 'hair_type', 'body_type', 'weapon_type', etc etc etc, lol.\r\n(I need to get a thesaurus, and look up similes for 'type', laughs)\r\n\r\nunfortunately, 'type', is just a so universally descriptive label/word... it's like \"stuff\" or \"thing\"...\r\n\r\n(I don't ever have a problem with accidentally over-riding anything, due to my convention of using very descriptive, aka long/verbose, names/labels, laughs. I also don't use the conventional camel-case and etc forms, as I have trouble with uppercase and lower case, and have a hard time reading the name/label too, having the underscores being as close as I can get to spaces, really makes it easier to read for me. I don't know why, but I just have a hard time reading these, for example: HegemonKhan and hegemonKhan, vs easy to read: hegemon_khan)",
      "EditableFormat": "markdown",
      "HTML": "<p>it's not just quest's programming, Alex. I use too many 'type' labels: 'eye_type', 'hair_type', 'body_type', 'weapon_type', etc etc etc, lol.<br>\n(I need to get a thesaurus, and look up similes for 'type', laughs)</p>\n<p>unfortunately, 'type', is just a so universally descriptive label/word... it's like \"stuff\" or \"thing\"...</p>\n<p>(I don't ever have a problem with accidentally over-riding anything, due to my convention of using very descriptive, aka long/verbose, names/labels, laughs. I also don't use the conventional camel-case and etc forms, as I have trouble with uppercase and lower case, and have a hard time reading the name/label too, having the underscores being as close as I can get to spaces, really makes it easier to read for me. I don't know why, but I just have a hard time reading these, for example: HegemonKhan and hegemonKhan, vs easy to read: hegemon_khan)</p>\n\n",
      "PostDate": "2016-07-13T15:54:43.9411061Z",
      "LastEditDate": "2016-07-13T16:17:15.8758749Z"
    }
  ]
}
