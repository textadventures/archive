{
  "Topic": {
    "TopicId": "yx56ppddae2d0suaxxzl3a",
    "ForumId": "10",
    "Title": "status pane health showing.",
    "LastUpdated": "2019-06-10T12:30:29.454434Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0d6ade72-5f15-4b4a-a38b-b65310603b4c",
      "UserId": 381795,
      "Username": "devilmaymoan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would like to have my custom health show in the pane like this\r\n\r\nHealth 35/50\r\n\r\nThe first number being current health and second max health. I have 3 attributes right now\r\n\r\n1- Health : interger\r\n2-Health_max : script - player.Health_max = player.vitality*10 \r\n3-vitality : interger (5)\r\n\r\nI don't know if my Health_max work tho, I just thought of a way to set it up to be increased later by increasing the vitality attribute so if you guys see it won't work pls also tell me :)",
      "EditableFormat": "markdown",
      "HTML": "<p>I would like to have my custom health show in the pane like this</p>\n<p>Health 35/50</p>\n<p>The first number being current health and second max health. I have 3 attributes right now</p>\n<p>1- Health : interger<br>\n2-Health_max : script - player.Health_max = player.vitality*10<br>\n3-vitality : interger (5)</p>\n<p>I don't know if my Health_max work tho, I just thought of a way to set it up to be increased later by increasing the vitality attribute so if you guys see it won't work pls also tell me :)</p>\n\n",
      "PostDate": "2019-06-10T12:30:29.454434Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77891139-5508-49a1-86e4-de584a5cf060",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You need to have another attribute, say Health_status, and every time health of max change, change that too. Use Health_status as the status attribute.\r\n```\r\nHealth_status = Health + \"/\" + Health_max ",
      "EditableFormat": "markdown",
      "HTML": "<p>You need to have another attribute, say Health_status, and every time health of max change, change that too. Use Health_status as the status attribute.</p>\n<pre><code>Health_status = Health + \"/\" + Health_max \n</code></pre>\n\n",
      "PostDate": "2019-06-10T14:23:46.9847034Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "debdfa55-590d-44ac-a7df-c9df68b38f94",
      "UserId": 381795,
      "Username": "devilmaymoan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(every time health of max change, change that too.)\r\nWhat do you mean? Wouldn't it update automatically?\r\n\r\nIf players put 1 point in vitality then Health_max goes up by 10 or if the players heal then \r\n``` Health_status = Health + \"/\" + Health_max ``` \r\nshould change automatically since it pull his number from those attributes right?\r\n\r\nsorry if it's a stupid question.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>(every time health of max change, change that too.)<br>\nWhat do you mean? Wouldn't it update automatically?</p>\n<p>If players put 1 point in vitality then Health_max goes up by 10 or if the players heal then<br>\n<code>Health_status = Health + \"/\" + Health_max</code><br>\nshould change automatically since it pull his number from those attributes right?</p>\n<p>sorry if it's a stupid question.</p>\n\n",
      "PostDate": "2019-06-10T16:02:54.0818028Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "26231c9e-4ac9-44ae-91b5-7937e9503f60",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-------------\r\n\r\nhere you go, a step by step walkthrough guide on using the 'statusattributes' and 'current/maximum' stats:\r\n\r\n(scroll past the stuff at the very top of my post, as I'm responding to a user's post, start at the 'conceptual about' section)\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375\r\n\r\n--------\r\n\r\nthere's two methods of updating your stats (via using features that happen/run/execute every turn and/or whenever an Attribute's Value changes):\r\n\r\n1. the special 'changed' Script Attribute\r\n\r\nsyntax naming: changedNAME_OF_ATTRIBUTE\r\n\r\nevery time the specified Attribute's Value changes, the scripts that you add to within this special 'changed' Script Attribute, are run/done/executed/activated\r\n\r\n2. the 'Turnscript' Element (as long as its 'enabled' and/or if its a local Turnscript, only when you're in the same room as it)\r\n\r\nit is executed/activated/run every internal turn (typed in command into the command text box at the bottom or mouse click on a blue hyperlink or whatever else), so you can add whatever scripts you want within here too\r\n\r\n---------\r\n\r\n3. manually (you coding it in every where it needs to be, obviously if able, it's much better to use the two methods above if able for your game design):\r\n\r\nsee the: *an example, below\r\n\r\n---------\r\n\r\nto update your 'current/maximum' stats within the 'statusattributes', as Pixie already explained, you got to use a String Attribute, which holds the 'current' and 'maximum' Integer Attributes within it, and use this String Attribute Assignment Operation* when ever you have your 'current/maximum' Integer Attributes' Values changed and/or when you want to display the 'current/maximum' stats\r\n\r\n*an example:\r\n```\r\nplayer.life_string_attribute = player.current_life_integer_attribute + \"/\" + player.maximum_life_integer_attribute\r\n// example displayment:\r\n// 999/999\r\n```\r\n\r\n--------\r\n\r\nall of this is done in my link above, in my step by step guide\r\n\r\n---------\r\n\r\nif you need any help or got any questions, we'll be glad to help you until you get it right and working as you want",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>here you go, a step by step walkthrough guide on using the 'statusattributes' and 'current/maximum' stats:</p>\n<p>(scroll past the stuff at the very top of my post, as I'm responding to a user's post, start at the 'conceptual about' section)</p>\n<p>http://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375</p>\n<hr>\n<p>there's two methods of updating your stats (via using features that happen/run/execute every turn and/or whenever an Attribute's Value changes):</p>\n<ol>\n<li>the special 'changed' Script Attribute</li>\n</ol>\n<p>syntax naming: changedNAME_OF_ATTRIBUTE</p>\n<p>every time the specified Attribute's Value changes, the scripts that you add to within this special 'changed' Script Attribute, are run/done/executed/activated</p>\n<ol start=\"2\">\n<li>the 'Turnscript' Element (as long as its 'enabled' and/or if its a local Turnscript, only when you're in the same room as it)</li>\n</ol>\n<p>it is executed/activated/run every internal turn (typed in command into the command text box at the bottom or mouse click on a blue hyperlink or whatever else), so you can add whatever scripts you want within here too</p>\n<hr>\n<ol start=\"3\">\n<li>manually (you coding it in every where it needs to be, obviously if able, it's much better to use the two methods above if able for your game design):</li>\n</ol>\n<p>see the: *an example, below</p>\n<hr>\n<p>to update your 'current/maximum' stats within the 'statusattributes', as Pixie already explained, you got to use a String Attribute, which holds the 'current' and 'maximum' Integer Attributes within it, and use this String Attribute Assignment Operation* when ever you have your 'current/maximum' Integer Attributes' Values changed and/or when you want to display the 'current/maximum' stats</p>\n<p>*an example:</p>\n<pre><code>player.life_string_attribute = player.current_life_integer_attribute + \"/\" + player.maximum_life_integer_attribute\n// example displayment:\n// 999/999\n</code></pre>\n<hr>\n<p>all of this is done in my link above, in my step by step guide</p>\n<hr>\n<p>if you need any help or got any questions, we'll be glad to help you until you get it right and working as you want</p>\n\n",
      "PostDate": "2019-06-10T16:39:10.7657396Z",
      "LastEditDate": "2019-06-10T17:03:51.0611464Z",
      "link": null
    },
    {
      "PostId": "8ffd5d49-820b-4fd0-8d4b-ba697a8d949c",
      "UserId": 381795,
      "Username": "devilmaymoan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ok, cool so just to be sure the form of my Health_max will work as intended right? meaning\r\n\r\n    player.Health_max = player.vitality*10\r\n\r\nwill take the vitality integer and multiplied it by 10 right? so if vitality is 5 Health_max will be 50.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>ok, cool so just to be sure the form of my Health_max will work as intended right? meaning</p>\n<pre><code>player.Health_max = player.vitality*10\n</code></pre>\n<p>will take the vitality integer and multiplied it by 10 right? so if vitality is 5 Health_max will be 50.</p>\n\n",
      "PostDate": "2019-06-10T17:38:53.0117524Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7536090d-dea0-49e4-9e5c-c999f8759880",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's what it should do,  yes.",
      "EditableFormat": "markdown",
      "HTML": "<p>That's what it should do,  yes.</p>\n\n",
      "PostDate": "2019-06-10T17:43:26.4867057Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9467f317-c5b9-4010-a9e0-0ac68fff4682",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "yes, mathematical expressions (using Assignment Operations) can be as simple or complex as you want\r\n\r\nplayer.strength = 0\r\n\r\nplayer.strength = 100\r\n\r\nplayer.strength = player.strength + 10\r\n\r\nplayer.life = (player.endurance + player.strength) / 2\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 100\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [100] / 100\r\n// player.damage = 100\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 50\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [50] / 100\r\n// player.damage = 75\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 0\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [0] / 100\r\n// player.damage = 50\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 100\r\nplayer.weapon = katana\r\nplayer.strength = 100\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [100] + [100] * [100] / 100\r\n// player.damage = 200\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 0\r\nplayer.weapon = katana\r\nplayer.strength = 100\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [0] + [0] * [100]/100\r\n// player.damage = 0\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 75\r\nplayer.weapon = katana\r\nplayer.strength = 100\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [75] + [75] * [100]/100\r\n// player.damage = 150\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 25\r\nplayer.weapon = katana\r\nplayer.strength = 100\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [25] + [25] * [100]/100\r\n// player.damage = 50\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 75\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [75]/100\r\n// player.damage = ~88\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 25\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [25]/100\r\n// player.damage = ~63\r\n\r\n----------------\r\n\r\n// the Assignment Operation is unique to programming:\r\n//\r\n// the FINAL Value on the right side of the equal sign (Assignment Operator in this case: quest knows when the equal sign is an Assignment operation vs a Comparison Operation: A Comparison Operation uses the 'if' Script/Function) is STORED INTO the VARIABLE on the left side of the equal sign\r\n//\r\n// so, while in math, you can do this:\r\n//\r\n// x = 10\r\n// or\r\n// 10 = x\r\n//\r\n// you can't do this with the Assignment Operation in programming:\r\n//\r\n// 10 = x // ERROR!\r\n// NOR:\r\n// 10 = player.strength // ERROR!\r\n//\r\n// as remember, the VARIABLE *MUST BE* on the left side of the equal sign for the Assignment Operation\r\n//\r\n// (technically, what you're doing in math/algebra is a Comparison operation, as you're trying to prove/solve it, but they don't teach that in math class, unfortunately)\r\n\r\n-----------------\r\n\r\n// conceptually how Arithmetic expressions using Assignment Operations, works:\r\n//\r\n// (using a simple addition expression as an example):\r\n//\r\n// player.strength = player.strength + 10\r\n//\r\n// (let's say our initial/old strength is zero: player.strength = 0)\r\n//\r\n// player.strength = player.strength + 10\r\n// player.strength (NEW) = player.strength (OLD: 0) + 10\r\n// player.strength (NEW) = (0) + 10\r\n// player.strength (NEW)  = 10\r\n//\r\n// new value: player.strength = 10\r\n//\r\n// old value: player.strength = 10\r\n//\r\n// player.strength = player.strength + 10\r\n// player.strength (NEW) = player.strength (OLD: 10) + 10\r\n// player.strength (NEW) = (10) + 10\r\n// player.strength (NEW)  = 20\r\n//\r\n// new value: player.strength = 20\r\n//\r\n// old value: player.strength = 20\r\n//\r\n// player.strength = player.strength + 10\r\n// player.strength (NEW) = player.strength (OLD: 20) + 10\r\n// player.strength (NEW) = (20) + 10\r\n// player.strength (NEW)  = 30\r\n//\r\n// new value: player.strength = 30\r\n//\r\n// old value: player.strength = 30\r\n//\r\n// etc etc etc",
      "EditableFormat": "markdown",
      "HTML": "<p>yes, mathematical expressions (using Assignment Operations) can be as simple or complex as you want</p>\n<p>player.strength = 0</p>\n<p>player.strength = 100</p>\n<p>player.strength = player.strength + 10</p>\n<p>player.life = (player.endurance + player.strength) / 2</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 100<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [100] / 100<br>\n// player.damage = 100</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 50<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [50] / 100<br>\n// player.damage = 75</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 0<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [0] / 100<br>\n// player.damage = 50</p>\n<p>create (\"katana\")<br>\nkatana.damage = 100<br>\nplayer.weapon = katana<br>\nplayer.strength = 100<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [100] + [100] * [100] / 100<br>\n// player.damage = 200</p>\n<p>create (\"katana\")<br>\nkatana.damage = 0<br>\nplayer.weapon = katana<br>\nplayer.strength = 100<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [0] + [0] * [100]/100<br>\n// player.damage = 0</p>\n<p>create (\"katana\")<br>\nkatana.damage = 75<br>\nplayer.weapon = katana<br>\nplayer.strength = 100<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [75] + [75] * [100]/100<br>\n// player.damage = 150</p>\n<p>create (\"katana\")<br>\nkatana.damage = 25<br>\nplayer.weapon = katana<br>\nplayer.strength = 100<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [25] + [25] * [100]/100<br>\n// player.damage = 50</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 75<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [75]/100<br>\n// player.damage = ~88</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 25<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [25]/100<br>\n// player.damage = ~63</p>\n<hr>\n<p>// the Assignment Operation is unique to programming:<br>\n//<br>\n// the FINAL Value on the right side of the equal sign (Assignment Operator in this case: quest knows when the equal sign is an Assignment operation vs a Comparison Operation: A Comparison Operation uses the 'if' Script/Function) is STORED INTO the VARIABLE on the left side of the equal sign<br>\n//<br>\n// so, while in math, you can do this:<br>\n//<br>\n// x = 10<br>\n// or<br>\n// 10 = x<br>\n//<br>\n// you can't do this with the Assignment Operation in programming:<br>\n//<br>\n// 10 = x // ERROR!<br>\n// NOR:<br>\n// 10 = player.strength // ERROR!<br>\n//<br>\n// as remember, the VARIABLE <em>MUST BE</em> on the left side of the equal sign for the Assignment Operation<br>\n//<br>\n// (technically, what you're doing in math/algebra is a Comparison operation, as you're trying to prove/solve it, but they don't teach that in math class, unfortunately)</p>\n<hr>\n<p>// conceptually how Arithmetic expressions using Assignment Operations, works:<br>\n//<br>\n// (using a simple addition expression as an example):<br>\n//<br>\n// player.strength = player.strength + 10<br>\n//<br>\n// (let's say our initial/old strength is zero: player.strength = 0)<br>\n//<br>\n// player.strength = player.strength + 10<br>\n// player.strength (NEW) = player.strength (OLD: 0) + 10<br>\n// player.strength (NEW) = (0) + 10<br>\n// player.strength (NEW)  = 10<br>\n//<br>\n// new value: player.strength = 10<br>\n//<br>\n// old value: player.strength = 10<br>\n//<br>\n// player.strength = player.strength + 10<br>\n// player.strength (NEW) = player.strength (OLD: 10) + 10<br>\n// player.strength (NEW) = (10) + 10<br>\n// player.strength (NEW)  = 20<br>\n//<br>\n// new value: player.strength = 20<br>\n//<br>\n// old value: player.strength = 20<br>\n//<br>\n// player.strength = player.strength + 10<br>\n// player.strength (NEW) = player.strength (OLD: 20) + 10<br>\n// player.strength (NEW) = (20) + 10<br>\n// player.strength (NEW)  = 30<br>\n//<br>\n// new value: player.strength = 30<br>\n//<br>\n// old value: player.strength = 30<br>\n//<br>\n// etc etc etc</p>\n\n",
      "PostDate": "2019-06-10T20:57:43.3398001Z",
      "LastEditDate": "2019-06-10T21:02:31.7849278Z",
      "link": null
    }
  ]
}
