{
  "Topic": {
    "TopicId": "rw4qrzvwne2k7ewjrrnbiq",
    "ForumId": "10",
    "Title": "Default Behavior vs. Run Script for opening a container",
    "LastUpdated": "2021-01-07T08:59:47.7863843Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "096633a7-0148-48ae-bd02-763242fd60bf",
      "UserId": 523913,
      "Username": "pisapisa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/47f60e3f2d8f689a59cfadfa03afe643?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Using Desktop. With most settings, I can customize what happens. With Take, for example, I can choose Default Behavior or Run Script. \r\n\r\nWith a container, I can make a script run AFTER opening the object, but for what happens WHEN opening, it seems I can only have one message -- the default or a custom one, but not one that's dependent on the situation.\r\n\r\nHere's an example: Let's say I have a magic box. Mostly, the box's behavior is entirely predictable -- the player can open and close it, and see the objects inside. Under normal circumstances, I want the game to use the default message.\r\n\r\nBut when the player is wearing the Hat of Wisdom, I want the box to open to reveal a new item, and I want the message to correspond. I can create a script that checks if wisdomhat.worn = true, and if so, add the new item and display extra text. But because the default message is automatic, it plays like this:\r\n\r\n>You open the box.\r\n>As you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen. You open the lid to find a beautiful gem!\r\n>It contains a gem.\r\n\r\nTo be clear, I want the first and third lines under some circumstances, and I want only the second line under other circumstances.\r\n\r\nThe last line is a similar problem to the first line -- I can \"List children when object is looked at or opened\" all the time or none of the time. But I can't have the option on for most circumstances, then suppress it for my special circumstance.\r\n\r\nIn Code View, I tried putting script between\r\n```<openmsg></openmsg>```\r\nbut the game displays it as text, rather than RUNNING the code. I can put a space there:\r\n```<openmsg> </openmsg>```\r\nso that the game THINKS it's displaying a message, and that message is just empty. Although for the player it results in a line break that really shouldn't be there. Then in the \"After opening the object\" field, I can run my script, with a check for my special circumstance followed by an Else: \"You open the box.\" That's an acceptable solution, except for the extra line break. Then, I suppose I can turn off \"List children when opened\" and add to my \"After opening\" script something involving GetDirectChildren, but I haven't worked out what that code would be, and it seems like there should be a much easier solution than this! Any ideas?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Using Desktop. With most settings, I can customize what happens. With Take, for example, I can choose Default Behavior or Run Script.</p>\n<p>With a container, I can make a script run AFTER opening the object, but for what happens WHEN opening, it seems I can only have one message -- the default or a custom one, but not one that's dependent on the situation.</p>\n<p>Here's an example: Let's say I have a magic box. Mostly, the box's behavior is entirely predictable -- the player can open and close it, and see the objects inside. Under normal circumstances, I want the game to use the default message.</p>\n<p>But when the player is wearing the Hat of Wisdom, I want the box to open to reveal a new item, and I want the message to correspond. I can create a script that checks if wisdomhat.worn = true, and if so, add the new item and display extra text. But because the default message is automatic, it plays like this:</p>\n<blockquote>\n<p>You open the box.<br>\nAs you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen. You open the lid to find a beautiful gem!<br>\nIt contains a gem.</p>\n</blockquote>\n<p>To be clear, I want the first and third lines under some circumstances, and I want only the second line under other circumstances.</p>\n<p>The last line is a similar problem to the first line -- I can \"List children when object is looked at or opened\" all the time or none of the time. But I can't have the option on for most circumstances, then suppress it for my special circumstance.</p>\n<p>In Code View, I tried putting script between<br>\n<code>&lt;openmsg&gt;&lt;/openmsg&gt;</code><br>\nbut the game displays it as text, rather than RUNNING the code. I can put a space there:<br>\n<code>&lt;openmsg&gt; &lt;/openmsg&gt;</code><br>\nso that the game THINKS it's displaying a message, and that message is just empty. Although for the player it results in a line break that really shouldn't be there. Then in the \"After opening the object\" field, I can run my script, with a check for my special circumstance followed by an Else: \"You open the box.\" That's an acceptable solution, except for the extra line break. Then, I suppose I can turn off \"List children when opened\" and add to my \"After opening\" script something involving GetDirectChildren, but I haven't worked out what that code would be, and it seems like there should be a much easier solution than this! Any ideas?</p>\n\n",
      "PostDate": "2021-01-07T08:59:47.7863843Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b104449c-5fd1-4abf-9859-a1e097350255",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm looking at the code, and `openscript` should run instead of displaying the default message, while `onopen` runs after the object becomes open.\r\n\r\nThis is a slight weirdness in the editor. You need to change the object's type (at the top of the container tab) to \"Openable/Closeable\". This makes the `openscript` and `closescript` appear so you can edit them. Once you've entered a script there, you can change it back to the type of container it is. Those scripts won't appear in the editor, but if you've changed them the object will still have them.\r\n\r\nIn this case you'd want something like:\r\n```\r\nif (GetBoolean (hatofwisdom, \"worn\")) {\r\n  msg (\"As you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen. You open the lid to find a beautiful gem!\")\r\n  gem.parent = this\r\n  this.isopen = true\r\n}\r\nelse {\r\n  OpenObject (this)\r\n}\r\n```\r\n(OpenObject is the command that displays the default open message and lists the contents)\r\n\r\nIf you don't like playing around changing an object's type, you can add a script attribute named `openscript` on the Attributes tab. I don't know why it doesn't show up in the editor by default.\r\n\r\n<hr/>\r\n\r\nIf there really wasn't a script to do this, or if it doesn't work for some reason, the workaround would be to use the text processor. You could set the open message to something like:\r\n```\r\n{either hatofwisdom.worn:As you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen.:You open the box.}\r\n```\r\nThat way you only see one of the two messages. `either` selects two pieces of text based on a condition (the same kind of think you could put in an `if` statemment). You'd then have to use the `onopen` script to make the gem visible as you have. If you want to hide the list of objects, you could use code like this:\r\n```\r\nthis.listobjects = false\r\n```\r\nto uncheck that box. And then on the \"when the box is closed\" script, you put\r\n```\r\nthis.listobjects = true\r\n```\r\nto enable it again for next time the box is opened.\r\n\r\n<hr/>\r\n\r\nAnother alternative would be to make the open message something like:\r\n```\r\n{=SomeFunctionName()}\r\n```\r\nThis allows you to run a function to display the message. You should make sure the function's type is \"string\", and make it return the message you want to show.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm looking at the code, and <code>openscript</code> should run instead of displaying the default message, while <code>onopen</code> runs after the object becomes open.</p>\n<p>This is a slight weirdness in the editor. You need to change the object's type (at the top of the container tab) to \"Openable/Closeable\". This makes the <code>openscript</code> and <code>closescript</code> appear so you can edit them. Once you've entered a script there, you can change it back to the type of container it is. Those scripts won't appear in the editor, but if you've changed them the object will still have them.</p>\n<p>In this case you'd want something like:</p>\n<pre><code>if (GetBoolean (hatofwisdom, \"worn\")) {\n  msg (\"As you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen. You open the lid to find a beautiful gem!\")\n  gem.parent = this\n  this.isopen = true\n}\nelse {\n  OpenObject (this)\n}\n</code></pre>\n<p>(OpenObject is the command that displays the default open message and lists the contents)</p>\n<p>If you don't like playing around changing an object's type, you can add a script attribute named <code>openscript</code> on the Attributes tab. I don't know why it doesn't show up in the editor by default.</p>\n<hr>\n<p>If there really wasn't a script to do this, or if it doesn't work for some reason, the workaround would be to use the text processor. You could set the open message to something like:</p>\n<pre><code>{either hatofwisdom.worn:As you reach out to open the box, your Hat of Wisdom radiates warmth, and you know that something special is about to happen.:You open the box.}\n</code></pre>\n<p>That way you only see one of the two messages. <code>either</code> selects two pieces of text based on a condition (the same kind of think you could put in an <code>if</code> statemment). You'd then have to use the <code>onopen</code> script to make the gem visible as you have. If you want to hide the list of objects, you could use code like this:</p>\n<pre><code>this.listobjects = false\n</code></pre>\n<p>to uncheck that box. And then on the \"when the box is closed\" script, you put</p>\n<pre><code>this.listobjects = true\n</code></pre>\n<p>to enable it again for next time the box is opened.</p>\n<hr>\n<p>Another alternative would be to make the open message something like:</p>\n<pre><code>{=SomeFunctionName()}\n</code></pre>\n<p>This allows you to run a function to display the message. You should make sure the function's type is \"string\", and make it return the message you want to show.</p>\n\n",
      "PostDate": "2021-01-07T10:01:31.9297837Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a9303d0f-a28b-4043-8b9a-a69d6f2f074c",
      "UserId": 523913,
      "Username": "pisapisa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/47f60e3f2d8f689a59cfadfa03afe643?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"This is a slight weirdness in the editor. \" No kidding! But this solves it. What I needed was there, I just never would have thought to look for it under a different object type. Thanks too for OpenObject -- I hadn't known that one yet.",
      "EditableFormat": "markdown",
      "HTML": "<p>\"This is a slight weirdness in the editor. \" No kidding! But this solves it. What I needed was there, I just never would have thought to look for it under a different object type. Thanks too for OpenObject -- I hadn't known that one yet.</p>\n\n",
      "PostDate": "2021-01-07T10:45:20.9366076Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
