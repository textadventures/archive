{
  "Topic": {
    "TopicId": "dnz91u2ctuk0vaceb5r64w",
    "ForumId": "10",
    "Title": "Display image in html (web version) from attribute value in Quest.",
    "LastUpdated": "2018-01-27T11:35:36.5679743Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6907ec2b-e343-45ff-913d-84a5acfb6dac",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c5b2ebab4c03c3a167c8a999490128e0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I added an attribute (pic) to certain objects in Quest. This attribute is a String and simply the name of the image file (image_1.png). I want to use that attribute field to show the image to the player.\r\n\r\nI'm sure I will need a function for this, and I tried to copy the GetDisplayName function in order to alter it for my needs, but that did not work. Here is a line of code from function updateList in game.js:\r\n\r\n```<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>```\r\n\r\nI want to insert the pic attribute inside the list tag, like this:\r\n\r\n```<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"<img src='../images/\" + objectPic + \" /></li>\"```\r\n\r\nThis would then display the image of the object in the Places and Objects pane. Since my javascript is not very strong, here I am, with hat in hand...\r\n\r\nIt seems that no matter what I write for a function, object is not defined, pic is not defined, defined is not defined (the last one didn't happen, but it felt like that's all that was happening...just everything \"not defined\").\r\n\r\nI tried setting the var for pic:\r\nvar objectPic = GetDisplayPic();\r\n\r\nHere are the functions for GetDisplayPic and GetListDisplayPic:\r\n```\r\nfunction GetListDisplayPic(obj)\r\n{\r\nif (HasString(obj, \"pic\")) {\r\nvar result = obj.pic;\r\n}\r\nelse {\r\nvar result = GetDisplayPic(obj);\r\n}\r\nreturn (result);\r\n}\r\nfunction GetDisplayPic(obj)\r\n{\r\nif (HasString(obj, \"pic\")) {\r\nvar result = obj.pic;\r\n}\r\nelse {\r\nvar result = msg(\"No image available\");\r\n}\r\nreturn (result);\r\n}\r\n```\r\n\r\nI know that Quest can do a lot IN the GUI, but I didn't want to bloat my game file with a bunch of images. I figured just pulling the filename would be enough. I'm guessing KV or Pixie will be able to answer this, but in case anyone else figured out a better \"hack\", let me know please. Thanks everyone!",
      "EditableFormat": "markdown",
      "HTML": "<p>I added an attribute (pic) to certain objects in Quest. This attribute is a String and simply the name of the image file (image_1.png). I want to use that attribute field to show the image to the player.</p>\n<p>I'm sure I will need a function for this, and I tried to copy the GetDisplayName function in order to alter it for my needs, but that did not work. Here is a line of code from function updateList in game.js:</p>\n<p><code>&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;</code></p>\n<p>I want to insert the pic attribute inside the list tag, like this:</p>\n<p><code>&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;img src='../images/\" + objectPic + \" /&gt;&lt;/li&gt;\"</code></p>\n<p>This would then display the image of the object in the Places and Objects pane. Since my javascript is not very strong, here I am, with hat in hand...</p>\n<p>It seems that no matter what I write for a function, object is not defined, pic is not defined, defined is not defined (the last one didn't happen, but it felt like that's all that was happening...just everything \"not defined\").</p>\n<p>I tried setting the var for pic:<br>\nvar objectPic = GetDisplayPic();</p>\n<p>Here are the functions for GetDisplayPic and GetListDisplayPic:</p>\n<pre><code>function GetListDisplayPic(obj)\n{\nif (HasString(obj, \"pic\")) {\nvar result = obj.pic;\n}\nelse {\nvar result = GetDisplayPic(obj);\n}\nreturn (result);\n}\nfunction GetDisplayPic(obj)\n{\nif (HasString(obj, \"pic\")) {\nvar result = obj.pic;\n}\nelse {\nvar result = msg(\"No image available\");\n}\nreturn (result);\n}\n</code></pre>\n<p>I know that Quest can do a lot IN the GUI, but I didn't want to bloat my game file with a bunch of images. I figured just pulling the filename would be enough. I'm guessing KV or Pixie will be able to answer this, but in case anyone else figured out a better \"hack\", let me know please. Thanks everyone!</p>\n\n",
      "PostDate": "2018-01-27T11:35:36.5679743Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "241b8690-8f73-4498-bf6a-a08b5ed049e1",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You have a couple of lines like this:\r\n```\r\nvar result = obj.pic;\r\n```\r\nThat will make Quest set \"var result\" equal to the \"pic\" attribute (it is not JavaScript!). And then you return the value of hge \"result\" attribute.\r\n\r\nI think you will then hit another issue or two, relating to then finding the image. You may find this page helpful:\r\nhttp://docs.textadventures.co.uk/quest/images.html",
      "EditableFormat": "markdown",
      "HTML": "<p>You have a couple of lines like this:</p>\n<pre><code>var result = obj.pic;\n</code></pre>\n<p>That will make Quest set \"var result\" equal to the \"pic\" attribute (it is not JavaScript!). And then you return the value of hge \"result\" attribute.</p>\n<p>I think you will then hit another issue or two, relating to then finding the image. You may find this page helpful:<br>\nhttp://docs.textadventures.co.uk/quest/images.html</p>\n\n",
      "PostDate": "2018-01-27T12:25:04.5051441Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8ee9d0a7-ef0a-49ff-8747-b01aa5ffaefc",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The only place to edit the Panes is in the Javascript...?\r\n\r\nThat means I would have to have custom: inventory, places and objects, and exits panes in the GUI, in order to add an image along with the text?\r\n\r\nThe functions above are just copies of existing functions for GetDisplayName/GetDisplayListName, just altered for the pic field. This is the section of code I'm looking at in game.js:\r\n```\r\nif (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n                \"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>The only place to edit the Panes is in the Javascript...?</p>\n<p>That means I would have to have custom: inventory, places and objects, and exits panes in the GUI, in order to add an image along with the text?</p>\n<p>The functions above are just copies of existing functions for GetDisplayName/GetDisplayListName, just altered for the pic field. This is the section of code I'm looking at in game.js:</p>\n<pre><code>if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n                \"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n</code></pre>\n\n",
      "PostDate": "2018-01-27T15:56:28.1792274Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "61227912-6347-474d-b379-6239013359e2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're writing javascript, you can't call HasString(). Javascript code cannot access Quest objects or their attributes.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're writing javascript, you can't call HasString(). Javascript code cannot access Quest objects or their attributes.</p>\n\n",
      "PostDate": "2018-01-27T16:16:52.5440582Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a7125987-7ba3-4791-9e71-e61f00676ead",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This code is from the JS compiler that KV forked:\r\n\r\n```\r\nfunction updateList(listName, listData) {\r\n    var listElement = \"\";\r\n    var emptyListLabel = \"\";\r\n\r\n    if (listName == \"inventory\") {\r\n        listElement = \"#inventoryList\";\r\n        emptyListLabel = \"#inventoryEmpty\";\r\n    }\r\n\r\n    if (listName == \"placesobjects\") {\r\n        listElement = \"#objectsList\";\r\n        emptyListLabel = \"#placesObjectsEmpty\";\r\n    }\r\n\r\n    $(listElement).empty();\r\n    $(listElement).show();\r\n    var listcount = 0;\r\n    var anyItem = false;\r\n\r\n    $.each(listData, function (key, value) {\r\n        var splitString = value.split(\":\");\r\n        var objectDisplayName = splitString[0];\r\n        var objectVerbs = splitString[1];\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n                \"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n    });\r\n    $(listElement + \" li:last-child\").addClass('last-child')\r\n    if (listcount == 0) $(listElement).hide();\r\n    if (anyItem) {\r\n        $(emptyListLabel).hide();\r\n    }\r\n    else {\r\n        $(emptyListLabel).show();\r\n    }\r\n}\r\n```\r\nAll of that works, as the objectlinks are displayed in the list and when clicked, display the appropriate verbs associated with that object. I was just hoping to display an image (for each specific object) next to the text of the name.",
      "EditableFormat": "markdown",
      "HTML": "<p>This code is from the JS compiler that KV forked:</p>\n<pre><code>function updateList(listName, listData) {\n    var listElement = \"\";\n    var emptyListLabel = \"\";\n\n    if (listName == \"inventory\") {\n        listElement = \"#inventoryList\";\n        emptyListLabel = \"#inventoryEmpty\";\n    }\n\n    if (listName == \"placesobjects\") {\n        listElement = \"#objectsList\";\n        emptyListLabel = \"#placesObjectsEmpty\";\n    }\n\n    $(listElement).empty();\n    $(listElement).show();\n    var listcount = 0;\n    var anyItem = false;\n\n    $.each(listData, function (key, value) {\n        var splitString = value.split(\":\");\n        var objectDisplayName = splitString[0];\n        var objectVerbs = splitString[1];\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n                \"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n    });\n    $(listElement + \" li:last-child\").addClass('last-child')\n    if (listcount == 0) $(listElement).hide();\n    if (anyItem) {\n        $(emptyListLabel).hide();\n    }\n    else {\n        $(emptyListLabel).show();\n    }\n}\n</code></pre>\n<p>All of that works, as the objectlinks are displayed in the list and when clicked, display the appropriate verbs associated with that object. I was just hoping to display an image (for each specific object) next to the text of the name.</p>\n\n",
      "PostDate": "2018-01-27T16:28:25.7851373Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bcc3b957-2fb3-4c4d-82fa-afdc9ac27afb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm ... my thoughts on this would be to output the values you need at the start.\r\nIn your UI initialisation script:\r\n```\r\nJS.eval(\"panedisplaypics = {};\")\r\nforeach (obj, AllObjects()) {\r\n  if (HasString(obj, pic)) {\r\n    JS.eval(ProcessText(\"panedisplaypics['{obj.name}'] = '{obj.pic}';\"))\r\n  }\r\n}\r\n```\r\n\r\nThen in javascript, you can just access `panedisplaypics[objectname]`.\r\n\r\nIf I was doing something like this, then I might even have Quest output a load of `<img id=\"inventorypic-{obj.name}\" src=\"{obj.pic}\" style=\"display: none;\" />` lines; or override GetListDisplayAlias so that it outputs an image the first time it's called for a given object. Then your JS can just move the image to the right place and un-hide it as needed.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm ... my thoughts on this would be to output the values you need at the start.<br>\nIn your UI initialisation script:</p>\n<pre><code>JS.eval(\"panedisplaypics = {};\")\nforeach (obj, AllObjects()) {\n  if (HasString(obj, pic)) {\n    JS.eval(ProcessText(\"panedisplaypics['{obj.name}'] = '{obj.pic}';\"))\n  }\n}\n</code></pre>\n<p>Then in javascript, you can just access <code>panedisplaypics[objectname]</code>.</p>\n<p>If I was doing something like this, then I might even have Quest output a load of <code>&lt;img id=\"inventorypic-{obj.name}\" src=\"{obj.pic}\" style=\"display: none;\" /&gt;</code> lines; or override GetListDisplayAlias so that it outputs an image the first time it's called for a given object. Then your JS can just move the image to the right place and un-hide it as needed.</p>\n\n",
      "PostDate": "2018-01-27T16:35:11.0028815Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c344e1d3-a2f7-4784-94af-727da8ec4b2a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I've not tried playing with QuestJS, sorry.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I've not tried playing with QuestJS, sorry.</p>\n\n",
      "PostDate": "2018-01-27T16:36:06.9362235Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6532e1b9-b2b5-42df-8ee2-30c26601dec3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, it's probably no help if you're not using Quest, but I think I worked out how I'd do images in the inventory list. Something like this might work.\r\n\r\nIn UI initialisation script:\r\n```\r\ngame.sentListImages = NewStringList()\r\n```\r\nOverride one core function:\r\n```\r\n  <function name=\"GetListDisplayAlias\" type=\"string\" parameters=\"obj\">\r\n    <![CDATA[\r\n    if (HasString(obj, \"listimage\")) {\r\n      if (not ListContains(game.sentListImages, obj.name)) {\r\n        msg (\"<img id=\\\"inventorypic-{obj.name}\\\" src=\\\"{obj.listimage}\\\" style=\\\"display: none;\\\" class=\\\"itemlistimage\\\" />\")\r\n        list add (game.sentListImages, obj.name)\r\n      }\r\n    }\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = obj.listalias\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  ]]>\r\n  </function>\r\n```\r\nAnd override one javascript function:\r\n```\r\nfunction updateList(listName, listData) {\r\n    var listElement = \"\";\r\n    var buttonPrefix = \"\";\r\n\r\n    if (listName == \"inventory\") {\r\n        listElement = \"#lstInventory\";\r\n        inventoryVerbs = new Array();\r\n        buttonPrefix = \"cmdInventory\";\r\n    }\r\n\r\n    if (listName == \"placesobjects\") {\r\n        listElement = \"#lstPlacesObjects\";\r\n        placesObjectsVerbs = new Array();\r\n        buttonPrefix = \"cmdPlacesObjects\";\r\n    }\r\n\r\n    var previousSelectionText = \"\";\r\n    var previousSelectionKey = \"\";\r\n    var foundPreviousSelection = false;\r\n\r\n    var $selected = $(listElement + \" .ui-selected\");\r\n    if ($selected.length > 0) {\r\n        previousSelectionText = $selected.first().text();\r\n        previousSelectionKey = $selected.first().data(\"key\");\r\n    }\r\n\r\n    $(listElement+\" .itemlistimage\").hide().insertAfter(\"#divOutput\");\r\n    $(listElement).empty();\r\n    var count = 0;\r\n    $.each(listData, function (key, value) {\r\n        var data = JSON.parse(value);\r\n        var objectDisplayName = data[\"Text\"];\r\n        var verbsArray, idPrefix;\r\n\r\n        if (listName == \"inventory\") {\r\n            verbsArray = inventoryVerbs;\r\n            idPrefix = \"cmdInventory\";\r\n        } else {\r\n            verbsArray = placesObjectsVerbs;\r\n            idPrefix = \"cmdPlacesObjects\";\r\n        }\r\n\r\n        verbsArray.push(data);\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            var $newItem = $(\"<li/>\").data(\"key\", key).data(\"elementid\", data[\"ElementId\"]).data(\"elementname\", data[\"ElementName\"]).data(\"index\", count).html(objectDisplayName);\r\n            $(\"#inventorypic-\"+key).appendTo($newItem).show();\r\n            if (objectDisplayName == previousSelectionText && key == previousSelectionKey) {\r\n                $newItem.addClass(\"ui-selected\");\r\n                foundPreviousSelection = true;\r\n                updateVerbButtons($newItem, verbsArray, idPrefix);\r\n            }\r\n            $(listElement).append($newItem);\r\n            count++;\r\n        }\r\n    });\r\n\r\n    var selectSize = count;\r\n    if (selectSize < 3) selectSize = 3;\r\n    if (selectSize > 12) selectSize = 12;\r\n    $(listElement).attr(\"size\", selectSize);\r\n    \r\n    if (!foundPreviousSelection) {\r\n        for (var i = 1; i <= verbButtonCount; i++) {\r\n            var target = $(\"#\" + buttonPrefix + i);\r\n            target.hide();\r\n        }\r\n    }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, it's probably no help if you're not using Quest, but I think I worked out how I'd do images in the inventory list. Something like this might work.</p>\n<p>In UI initialisation script:</p>\n<pre><code>game.sentListImages = NewStringList()\n</code></pre>\n<p>Override one core function:</p>\n<pre><code>  &lt;function name=\"GetListDisplayAlias\" type=\"string\" parameters=\"obj\"&gt;\n    &lt;![CDATA[\n    if (HasString(obj, \"listimage\")) {\n      if (not ListContains(game.sentListImages, obj.name)) {\n        msg (\"&lt;img id=\\\"inventorypic-{obj.name}\\\" src=\\\"{obj.listimage}\\\" style=\\\"display: none;\\\" class=\\\"itemlistimage\\\" /&gt;\")\n        list add (game.sentListImages, obj.name)\n      }\n    }\n    if (HasString(obj, \"listalias\")) {\n      result = obj.listalias\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n  ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<p>And override one javascript function:</p>\n<pre><code>function updateList(listName, listData) {\n    var listElement = \"\";\n    var buttonPrefix = \"\";\n\n    if (listName == \"inventory\") {\n        listElement = \"#lstInventory\";\n        inventoryVerbs = new Array();\n        buttonPrefix = \"cmdInventory\";\n    }\n\n    if (listName == \"placesobjects\") {\n        listElement = \"#lstPlacesObjects\";\n        placesObjectsVerbs = new Array();\n        buttonPrefix = \"cmdPlacesObjects\";\n    }\n\n    var previousSelectionText = \"\";\n    var previousSelectionKey = \"\";\n    var foundPreviousSelection = false;\n\n    var $selected = $(listElement + \" .ui-selected\");\n    if ($selected.length &gt; 0) {\n        previousSelectionText = $selected.first().text();\n        previousSelectionKey = $selected.first().data(\"key\");\n    }\n\n    $(listElement+\" .itemlistimage\").hide().insertAfter(\"#divOutput\");\n    $(listElement).empty();\n    var count = 0;\n    $.each(listData, function (key, value) {\n        var data = JSON.parse(value);\n        var objectDisplayName = data[\"Text\"];\n        var verbsArray, idPrefix;\n\n        if (listName == \"inventory\") {\n            verbsArray = inventoryVerbs;\n            idPrefix = \"cmdInventory\";\n        } else {\n            verbsArray = placesObjectsVerbs;\n            idPrefix = \"cmdPlacesObjects\";\n        }\n\n        verbsArray.push(data);\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            var $newItem = $(\"&lt;li/&gt;\").data(\"key\", key).data(\"elementid\", data[\"ElementId\"]).data(\"elementname\", data[\"ElementName\"]).data(\"index\", count).html(objectDisplayName);\n            $(\"#inventorypic-\"+key).appendTo($newItem).show();\n            if (objectDisplayName == previousSelectionText &amp;&amp; key == previousSelectionKey) {\n                $newItem.addClass(\"ui-selected\");\n                foundPreviousSelection = true;\n                updateVerbButtons($newItem, verbsArray, idPrefix);\n            }\n            $(listElement).append($newItem);\n            count++;\n        }\n    });\n\n    var selectSize = count;\n    if (selectSize &lt; 3) selectSize = 3;\n    if (selectSize &gt; 12) selectSize = 12;\n    $(listElement).attr(\"size\", selectSize);\n    \n    if (!foundPreviousSelection) {\n        for (var i = 1; i &lt;= verbButtonCount; i++) {\n            var target = $(\"#\" + buttonPrefix + i);\n            target.hide();\n        }\n    }\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-27T17:01:16.5405535Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "86789404-7877-4caf-b1a3-fe3dcc908566",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it an online image?\r\n\r\n\r\n\r\n```\r\n    <object name=\"Flux Capacitor\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>{Flux Capacitor.img_url}</look>\r\n      <listalias><![CDATA[<hr/><img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/>Flux Capacitor<hr/>]]></listalias>\r\n      <img_url type=\"string\"><![CDATA[<img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/>]]></img_url>\r\n    </object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it an online image?</p>\n<pre><code>    &lt;object name=\"Flux Capacitor\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;{Flux Capacitor.img_url}&lt;/look&gt;\n      &lt;listalias&gt;&lt;![CDATA[&lt;hr/&gt;&lt;img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/&gt;Flux Capacitor&lt;hr/&gt;]]&gt;&lt;/listalias&gt;\n      &lt;img_url type=\"string\"&gt;&lt;![CDATA[&lt;img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/&gt;]]&gt;&lt;/img_url&gt;\n    &lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-27T18:08:14.9157582Z",
      "LastEditDate": "2018-01-27T18:09:10.6923713Z",
      "link": null
    },
    {
      "PostId": "626b89d5-7a7c-4380-abd2-672872b863b3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Or is it an offline image?\r\n\r\n(The image will not display as the list alias when doing it this way (as far as I can tell).  I *think* this is because Quest reads the ```listalias``` string attribute as text, not as an expression.  (I'm about to play around with mrangel's last code.))\r\n\r\n```\r\n    <object name=\"Flux Capacitor\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>{Flux Capacitor.img_url}</look>\r\n      <img_url type=\"string\"><![CDATA[<img width='100%'  src='{=GetFileURL(\"flux-capacitor.png\")}'/>]]></img_url>\r\n    </object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Or is it an offline image?</p>\n<p>(The image will not display as the list alias when doing it this way (as far as I can tell).  I <em>think</em> this is because Quest reads the <code>listalias</code> string attribute as text, not as an expression.  (I'm about to play around with mrangel's last code.))</p>\n<pre><code>    &lt;object name=\"Flux Capacitor\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;{Flux Capacitor.img_url}&lt;/look&gt;\n      &lt;img_url type=\"string\"&gt;&lt;![CDATA[&lt;img width='100%'  src='{=GetFileURL(\"flux-capacitor.png\")}'/&gt;]]&gt;&lt;/img_url&gt;\n    &lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-27T18:15:55.0161717Z",
      "LastEditDate": "2018-01-27T18:20:18.098003Z",
      "link": null
    },
    {
      "PostId": "753e4d10-754f-4ece-8f11-5d48d037fab9",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I just changed this (and only this; no change to any JS):\r\n\r\n```\r\n  <function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = ProcessText(obj.listalias)\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  </function>\r\n```\r\n\r\n\r\n---\r\nThat works for online ```URLs``` or ```GetFileURL(\"file-in-game-folder.png\")```.\r\n\r\n---\r\nExample with file in the game's directory (on the hard drive):\r\n```\r\n    <object name=\"Flux Capacitor\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>{Flux Capacitor.img_url}</look>\r\n      <listalias><![CDATA[<hr/>{Flux Capacitor.img_url}Flux Capacitor<hr/>]]></listalias>\r\n      <attr name=\"img_url\"><![CDATA[<img width='100%'  src='{=GetFileURL(\"flux-capacitor.png\")}'/>]]></attr>\r\n    </object>\r\n```\r\n\r\n---\r\nExample using an online image:\r\n\r\n```\r\n    <object name=\"Flux Capacitor\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>{Flux Capacitor.img_url}</look>\r\n      <listalias><![CDATA[<hr/>{Flux Capacitor.img_url}Flux Capacitor<hr/>]]></listalias>\r\n      <attr name=\"img_url\"><![CDATA[<img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/>]]></attr>\r\n    </object>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/35475073-8bb8b732-035d-11e8-93b2-2cc6335782a7.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I just changed this (and only this; no change to any JS):</p>\n<pre><code>  &lt;function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\"&gt;\n    if (HasString(obj, \"listalias\")) {\n      result = ProcessText(obj.listalias)\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>That works for online <code>URLs</code> or <code>GetFileURL(\"file-in-game-folder.png\")</code>.</p>\n<hr>\n<p>Example with file in the game's directory (on the hard drive):</p>\n<pre><code>    &lt;object name=\"Flux Capacitor\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;{Flux Capacitor.img_url}&lt;/look&gt;\n      &lt;listalias&gt;&lt;![CDATA[&lt;hr/&gt;{Flux Capacitor.img_url}Flux Capacitor&lt;hr/&gt;]]&gt;&lt;/listalias&gt;\n      &lt;attr name=\"img_url\"&gt;&lt;![CDATA[&lt;img width='100%'  src='{=GetFileURL(\"flux-capacitor.png\")}'/&gt;]]&gt;&lt;/attr&gt;\n    &lt;/object&gt;\n</code></pre>\n<hr>\n<p>Example using an online image:</p>\n<pre><code>    &lt;object name=\"Flux Capacitor\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;{Flux Capacitor.img_url}&lt;/look&gt;\n      &lt;listalias&gt;&lt;![CDATA[&lt;hr/&gt;{Flux Capacitor.img_url}Flux Capacitor&lt;hr/&gt;]]&gt;&lt;/listalias&gt;\n      &lt;attr name=\"img_url\"&gt;&lt;![CDATA[&lt;img width='100%'  src='https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519'/&gt;]]&gt;&lt;/attr&gt;\n    &lt;/object&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35475073-8bb8b732-035d-11e8-93b2-2cc6335782a7.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-01-27T18:26:48.0835826Z",
      "LastEditDate": "2018-01-27T18:28:55.4875327Z",
      "link": null
    },
    {
      "PostId": "10f8a04d-f967-4b19-b88f-473f503a1ba3",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh man, you all are wonderful, seriously! I feel like Doctor Frankenstein...it's almost...alive.\r\n\r\nAllow me to cover a few things for those that decide to tackle this issue:\r\n1. mrangel's original function override\r\n```\r\nif (HasString(obj, \"listimage\")) {\r\n      if (not ListContains(game.sentListImages, obj.name)) {\r\n        msg (\"<img id=\\\"inventorypic-{obj.name}\\\" src=\\\"{obj.listimage}\\\" style=\\\"display: none;\\\" class=\\\"itemlistimage\\\" />\")\r\n        list add (game.sentListImages, obj.name)\r\n      }\r\n    }\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = obj.listalias\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n```\r\nand then the javascript:\r\n```\r\nJS.eval(\"panedisplaypics = {};\")\r\nforeach (obj, AllObjects()) {\r\n  if (HasString(obj, pic)) {\r\n    JS.eval(ProcessText(\"panedisplaypics['{obj.name}'] = '{obj.pic}';\"))\r\n  }\r\n}\r\n```\r\nI added this to game.js function updateList:\r\n```\r\nvar objectDisplayPic = panedisplaypics[objectDisplayName];\r\n```\r\n(Note: originally, mrangel had panedisplaypics[objectname], but objectname threw a fit about objectname not being defined.)\r\n\r\nThis resulted in the game executing without any errors, however the objectName text would display, with a broken-link image box. Firefox Inspector shows that the code works, but the URL shows as \"undefined\".\r\n\r\nI felt like that was so very, very close to the result I was hoping for.\r\n\r\nNow, moving on to where KV is heading:\r\nIt's an online file, so the relative directory will always be : ../images/\r\nI figured even if I could rebuild the filename in game.js, the path would work. It looks like what you are thinking KV, is that I would be altering the objectListDisplayAlias for only the image,  but the image is in addition to the text for the name.\r\nI added an attribute (pic) to each object in the game, this contains part of the filename, without the extension, so vamp_1, instead of vamp_1.png. Then in game.js the `<li>` would read:\r\n`<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"<br><img src=\\\"../images/\" + objectDisplayPic + \".png\\\" /></li>\"\r\n\r\nCode Inspector:\r\n`<img src=\"../images/undefined.png\" />`\r\n\r\n<img src=\"http://www.uoexpanse.com/images/uoexpanse_test_1.png\">\r\n\r\nThe image above is part of the game window. The spellbook text is the PlacesObjects pane. I want to keep the text and add an image (underneath it, above it, next to it, etc which I can handle with external CSS).\r\n\r\nSeriously...like >this< close, thank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh man, you all are wonderful, seriously! I feel like Doctor Frankenstein...it's almost...alive.</p>\n<p>Allow me to cover a few things for those that decide to tackle this issue:</p>\n<ol>\n<li>mrangel's original function override</li>\n</ol>\n<pre><code>if (HasString(obj, \"listimage\")) {\n      if (not ListContains(game.sentListImages, obj.name)) {\n        msg (\"&lt;img id=\\\"inventorypic-{obj.name}\\\" src=\\\"{obj.listimage}\\\" style=\\\"display: none;\\\" class=\\\"itemlistimage\\\" /&gt;\")\n        list add (game.sentListImages, obj.name)\n      }\n    }\n    if (HasString(obj, \"listalias\")) {\n      result = obj.listalias\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n</code></pre>\n<p>and then the javascript:</p>\n<pre><code>JS.eval(\"panedisplaypics = {};\")\nforeach (obj, AllObjects()) {\n  if (HasString(obj, pic)) {\n    JS.eval(ProcessText(\"panedisplaypics['{obj.name}'] = '{obj.pic}';\"))\n  }\n}\n</code></pre>\n<p>I added this to game.js function updateList:</p>\n<pre><code>var objectDisplayPic = panedisplaypics[objectDisplayName];\n</code></pre>\n<p>(Note: originally, mrangel had panedisplaypics[objectname], but objectname threw a fit about objectname not being defined.)</p>\n<p>This resulted in the game executing without any errors, however the objectName text would display, with a broken-link image box. Firefox Inspector shows that the code works, but the URL shows as \"undefined\".</p>\n<p>I felt like that was so very, very close to the result I was hoping for.</p>\n<p>Now, moving on to where KV is heading:<br>\nIt's an online file, so the relative directory will always be : ../images/<br>\nI figured even if I could rebuild the filename in game.js, the path would work. It looks like what you are thinking KV, is that I would be altering the objectListDisplayAlias for only the image,  but the image is in addition to the text for the name.<br>\nI added an attribute (pic) to each object in the game, this contains part of the filename, without the extension, so vamp_1, instead of vamp_1.png. Then in game.js the <code>&lt;li&gt;</code> would read:<br>\n`&lt;li id=\"\" + paneLinkId + \"\" href=\"#\"&gt;\" + objectDisplayName + \"<br>&lt;img src=\"../images/\" + objectDisplayPic + \".png\" /&gt;\"</p>\n<p>Code Inspector:<br>\n<code>&lt;img src=\"../images/undefined.png\" /&gt;</code></p>\n<img src=\"http://www.uoexpanse.com/images/uoexpanse_test_1.png\">\n<p>The image above is part of the game window. The spellbook text is the PlacesObjects pane. I want to keep the text and add an image (underneath it, above it, next to it, etc which I can handle with external CSS).</p>\n<p>Seriously...like &gt;this&lt; close, thank you!</p>\n\n",
      "PostDate": "2018-01-27T19:11:41.4215775Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a0bd7ff0-5087-4594-8e12-23d5c24915f5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It looks like what you are thinking KV, is that I would be altering the objectListDisplayAlias for only the image, but the image is in addition to the text for the name.\r\n\r\nNegative.\r\n\r\nI have text underneath my image, and it is all nested between hard breaks.  (Check out my Places and Objects pane in the picture I posted last.)\r\n\r\nIs that what you're trying to accomplish?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It looks like what you are thinking KV, is that I would be altering the objectListDisplayAlias for only the image, but the image is in addition to the text for the name.</p>\n</blockquote>\n<p>Negative.</p>\n<p>I have text underneath my image, and it is all nested between hard breaks.  (Check out my Places and Objects pane in the picture I posted last.)</p>\n<p>Is that what you're trying to accomplish?</p>\n\n",
      "PostDate": "2018-01-27T19:20:17.5429826Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8983087c-e71a-482e-aa36-f6054f8adbb7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "While testing mrangel's code, I couldn't get anything added to the JS array.\r\n\r\nSo, I tested other methods, and this works:\r\n\r\n```\r\nJS.eval (\"gameDisplayAliases = {};\")\r\nforeach (obj, AllObjects()) {\r\n  JS.eval (\"gameDisplayAliases['\"+obj.name+\"'] = '\"+GetDisplayName(obj)+\"';addTextAndScroll(gameDisplayAliases.\"+obj.name+\"+'<br/><br/>');\")\r\n}\r\n```\r\n\r\n<samp>\r\n\r\na room\r\n\r\na me\r\n\r\na thing\r\n\r\na crate\r\n\r\n</samp>\r\n\r\n---\r\nSo try this (revised):\r\n\r\n```\r\nJS.eval(\"panedisplaypics = {};\")\r\nforeach (obj, AllObjects()) {\r\n  if (HasString(obj, \"pic\")) {\r\n    JS.eval(\"panedisplaypics['\"+obj.name+\"'] = '\"+obj.pic+\"';\")\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>While testing mrangel's code, I couldn't get anything added to the JS array.</p>\n<p>So, I tested other methods, and this works:</p>\n<pre><code>JS.eval (\"gameDisplayAliases = {};\")\nforeach (obj, AllObjects()) {\n  JS.eval (\"gameDisplayAliases['\"+obj.name+\"'] = '\"+GetDisplayName(obj)+\"';addTextAndScroll(gameDisplayAliases.\"+obj.name+\"+'&lt;br/&gt;&lt;br/&gt;');\")\n}\n</code></pre>\n<samp>\n<p>a room</p>\n<p>a me</p>\n<p>a thing</p>\n<p>a crate</p>\n</samp>\n<hr>\n<p>So try this (revised):</p>\n<pre><code>JS.eval(\"panedisplaypics = {};\")\nforeach (obj, AllObjects()) {\n  if (HasString(obj, \"pic\")) {\n    JS.eval(\"panedisplaypics['\"+obj.name+\"'] = '\"+obj.pic+\"';\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-27T19:43:36.3533844Z",
      "LastEditDate": "2018-01-27T19:48:44.5995987Z",
      "link": null
    },
    {
      "PostId": "3db99b31-83c9-42fb-bb3a-a1953ff7e983",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I posted 2 different methods. One with a JS object acting as an array, and one with hidden images. Those two were not intended to work together.",
      "EditableFormat": "markdown",
      "HTML": "<p>I posted 2 different methods. One with a JS object acting as an array, and one with hidden images. Those two were not intended to work together.</p>\n\n",
      "PostDate": "2018-01-27T20:02:54.7862283Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8bb7de5c-b4f1-4682-99b0-9c659dc8b142",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "KV, your code did work, once I actually looked at it closer! I missed that you included the img_url into the listalias field. That does the trick though, just:\r\n```\r\n<function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = ProcessText(obj.listalias)\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  </function>\r\n```\r\nThanks again for all your help everyone!\r\n\r\nEDIT: The code works locally, but not through a website. So this doesn't carry over through the compiler.",
      "EditableFormat": "markdown",
      "HTML": "<p>KV, your code did work, once I actually looked at it closer! I missed that you included the img_url into the listalias field. That does the trick though, just:</p>\n<pre><code>&lt;function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\"&gt;\n    if (HasString(obj, \"listalias\")) {\n      result = ProcessText(obj.listalias)\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n  &lt;/function&gt;\n</code></pre>\n<p>Thanks again for all your help everyone!</p>\n<p>EDIT: The code works locally, but not through a website. So this doesn't carry over through the compiler.</p>\n\n",
      "PostDate": "2018-01-27T20:10:26.0344037Z",
      "LastEditDate": "2018-01-27T20:38:08.5299201Z",
      "link": null
    },
    {
      "PostId": "ce3209df-2e11-445a-9d89-a91406914248",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Game.js has the function updateList, which builds and refreshes the inventory, places and objects and exits panes. This code here is how each element is generated for the list:\r\n\r\n```\r\n$.each(listData, function (key, value) {\r\n        var splitString = value.split(\":\");\r\n        var objectDisplayName = splitString[0];\r\n        var objectVerbs = splitString[1];\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n                \"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n    });\r\n```\r\nThe coding offered by KV, is handy for using within Quest! It works, within Quest. Since my project requires me to export using QuestJS, I needed another solution that would work for a website. After banging my head on my laptop for a few hours and then asking these folks here to join me in banging our heads against our computers...I discovered a simple solution.\r\n\r\nIf you add one segment of code to the game.js function updateList, you can easily control list elements with CSS!!\r\n```\r\n$.each(listData, function (key, value) {\r\n        var splitString = value.split(\":\");\r\n        var objectDisplayName = splitString[0];\r\n        var objectVerbs = splitString[1];\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n                \"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"# \" + objectDisplayName + \"\\\">\" + objectDisplayName + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n    });\r\n```\r\nNotice the difference between the first piece of code and the second? All I did was copy objectDisplayName from the end of the li element, and paste it after adding a space in the href. This step actually gives EACH list element a unique href that can be referenced in CSS!\r\n\r\nThe original game.js code produces this HTML result:\r\n```\r\n<div id=\"gamePanes\" style=\"\">\r\n     <div id=\"gamePanesRunning\">\r\n          <div id=\"inv\">\r\n               <p id=\"inventoryEmpty\" class=\"emptyListLabel\" style=\"display: none;\">Empty</p>\r\n                    <ul class=\"elementList\" id=\"inventoryList\"><li id=\"paneLink2\" href=\"#\" class=\"last-child\">spellbook</li></ul>\r\n...\r\n```\r\n\r\nAdding the extra objectDisplayName onto the href, you see this result:\r\n```\r\n<div id=\"gamePanes\" style=\"\">\r\n     <div id=\"gamePanesRunning\">\r\n          <div id=\"inv\">\r\n               <p id=\"inventoryEmpty\" class=\"emptyListLabel\" style=\"display: none;\">Empty</p>\r\n                    <ul class=\"elementList\" id=\"inventoryList\"><li id=\"paneLink2\" href=\"# spellbook\" class=\"last-child\">spellbook</li></ul>\r\n...\r\n```\r\nThe li element href now has a specific name # spellbook and you can use CSS like this:\r\n```\r\nul.elementList li[href*=spellbook] {\r\ncolor: transparent !important;\r\nbackground-image: url('../images/sp_book1.png');\r\nbackground-position: center;\r\n}\r\n```\r\nObviously if you decide to use this and you have lots of items, you will be adding a lot of CSS code, but as of right now, this is the best way to achieve images in any of the panes with minimal core editing and no additional changes inside Quest are needed (not even to combine the URL with the listalias, which is genius by the way...text processor for the win!). Yes, I also added objectDisplayName to other locations within the li element and discovered that in every other location, except as attached to the href, the menu is then broken (code is looking for specific elements, i.e. panelink#, but not panelink objectDisplayName).\r\n\r\nThanks again for your help everyone! If not for all of your efforts, we would all still be trying to do this stuff on paper! (Wait, did I just reveal my age?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Game.js has the function updateList, which builds and refreshes the inventory, places and objects and exits panes. This code here is how each element is generated for the list:</p>\n<pre><code>$.each(listData, function (key, value) {\n        var splitString = value.split(\":\");\n        var objectDisplayName = splitString[0];\n        var objectVerbs = splitString[1];\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n                \"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n    });\n</code></pre>\n<p>The coding offered by KV, is handy for using within Quest! It works, within Quest. Since my project requires me to export using QuestJS, I needed another solution that would work for a website. After banging my head on my laptop for a few hours and then asking these folks here to join me in banging our heads against our computers...I discovered a simple solution.</p>\n<p>If you add one segment of code to the game.js function updateList, you can easily control list elements with CSS!!</p>\n<pre><code>$.each(listData, function (key, value) {\n        var splitString = value.split(\":\");\n        var objectDisplayName = splitString[0];\n        var objectVerbs = splitString[1];\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n                \"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"# \" + objectDisplayName + \"\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n    });\n</code></pre>\n<p>Notice the difference between the first piece of code and the second? All I did was copy objectDisplayName from the end of the li element, and paste it after adding a space in the href. This step actually gives EACH list element a unique href that can be referenced in CSS!</p>\n<p>The original game.js code produces this HTML result:</p>\n<pre><code>&lt;div id=\"gamePanes\" style=\"\"&gt;\n     &lt;div id=\"gamePanesRunning\"&gt;\n          &lt;div id=\"inv\"&gt;\n               &lt;p id=\"inventoryEmpty\" class=\"emptyListLabel\" style=\"display: none;\"&gt;Empty&lt;/p&gt;\n                    &lt;ul class=\"elementList\" id=\"inventoryList\"&gt;&lt;li id=\"paneLink2\" href=\"#\" class=\"last-child\"&gt;spellbook&lt;/li&gt;&lt;/ul&gt;\n...\n</code></pre>\n<p>Adding the extra objectDisplayName onto the href, you see this result:</p>\n<pre><code>&lt;div id=\"gamePanes\" style=\"\"&gt;\n     &lt;div id=\"gamePanesRunning\"&gt;\n          &lt;div id=\"inv\"&gt;\n               &lt;p id=\"inventoryEmpty\" class=\"emptyListLabel\" style=\"display: none;\"&gt;Empty&lt;/p&gt;\n                    &lt;ul class=\"elementList\" id=\"inventoryList\"&gt;&lt;li id=\"paneLink2\" href=\"# spellbook\" class=\"last-child\"&gt;spellbook&lt;/li&gt;&lt;/ul&gt;\n...\n</code></pre>\n<p>The li element href now has a specific name # spellbook and you can use CSS like this:</p>\n<pre><code>ul.elementList li[href*=spellbook] {\ncolor: transparent !important;\nbackground-image: url('../images/sp_book1.png');\nbackground-position: center;\n}\n</code></pre>\n<p>Obviously if you decide to use this and you have lots of items, you will be adding a lot of CSS code, but as of right now, this is the best way to achieve images in any of the panes with minimal core editing and no additional changes inside Quest are needed (not even to combine the URL with the listalias, which is genius by the way...text processor for the win!). Yes, I also added objectDisplayName to other locations within the li element and discovered that in every other location, except as attached to the href, the menu is then broken (code is looking for specific elements, i.e. panelink#, but not panelink objectDisplayName).</p>\n<p>Thanks again for your help everyone! If not for all of your efforts, we would all still be trying to do this stuff on paper! (Wait, did I just reveal my age?)</p>\n\n",
      "PostDate": "2018-01-28T12:50:57.3294436Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c3474c40-89c3-4b4a-93e0-e86d58f94cc2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure why I didn't think of putting the `<img>` tag inside the object's listalias... I've done that before, in the first game I started building. (Note: if using data: URIs this causes massive slowdown, because the entire inventory is sent from Quest to the browser every turn. You don't want to be sending more than 1MB every turn)\r\n\r\n> The li element href now has a specific name # spellbook and you can use CSS like this:\r\n\r\nUsing href like that... I guess it works. I would suggest using 'class', because that's kind of what the class attribute is for, but that would require a name without spaces in.\r\n\r\nIf you're including all the image names in CSS anyway, it probably makes more sense (and takes less space) to include a literal JS array of object names and then look them up within updateList.\r\n\r\nSomewhere at the start of your JS:\r\n```\r\nimagesForInventoryPane = {\r\n  'spellbook': '../images/sp_book1.png',\r\n  'sword': '../images/sword1.png',\r\n  'penguin': '../images/penguin1.png'\r\n};\r\n```\r\nAnd modify updateList:\r\n```\r\n      $.each(listData, function (key, value) {\r\n        var splitString = value.split(\":\");\r\n        var objectDisplayName = splitString[0];\r\n        var objectVerbs = splitString[1];\r\n\r\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $newElement = $(\"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>\");\r\n            if(imagesForInventoryPane[objectDisplayName]) {\r\n              $newElement.css({\r\n                'color': 'transparent',\r\n                'background-image': \"url('\"+imagesForInventoryPane[objectDisplayName]+\"')\",\r\n                'background-position': 'center'\r\n              });\r\n            }\r\n            $(listElement).append($newElement);\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n    });\r\n```\r\nThis way, you don't need extra CSS for every item; just one more line in the array.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure why I didn't think of putting the <code>&lt;img&gt;</code> tag inside the object's listalias... I've done that before, in the first game I started building. (Note: if using data: URIs this causes massive slowdown, because the entire inventory is sent from Quest to the browser every turn. You don't want to be sending more than 1MB every turn)</p>\n<blockquote>\n<p>The li element href now has a specific name # spellbook and you can use CSS like this:</p>\n</blockquote>\n<p>Using href like that... I guess it works. I would suggest using 'class', because that's kind of what the class attribute is for, but that would require a name without spaces in.</p>\n<p>If you're including all the image names in CSS anyway, it probably makes more sense (and takes less space) to include a literal JS array of object names and then look them up within updateList.</p>\n<p>Somewhere at the start of your JS:</p>\n<pre><code>imagesForInventoryPane = {\n  'spellbook': '../images/sp_book1.png',\n  'sword': '../images/sword1.png',\n  'penguin': '../images/penguin1.png'\n};\n</code></pre>\n<p>And modify updateList:</p>\n<pre><code>      $.each(listData, function (key, value) {\n        var splitString = value.split(\":\");\n        var objectDisplayName = splitString[0];\n        var objectVerbs = splitString[1];\n\n        if (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $newElement = $(\"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\");\n            if(imagesForInventoryPane[objectDisplayName]) {\n              $newElement.css({\n                'color': 'transparent',\n                'background-image': \"url('\"+imagesForInventoryPane[objectDisplayName]+\"')\",\n                'background-position': 'center'\n              });\n            }\n            $(listElement).append($newElement);\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n    });\n</code></pre>\n<p>This way, you don't need extra CSS for every item; just one more line in the array.</p>\n\n",
      "PostDate": "2018-01-28T13:30:14.3559198Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9782aa0d-caf0-4aa1-a346-9eecb1743219",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Though actually, `\"<li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\">\" + objectDisplayName + \"</li>\"` is ugly enough anyway.\r\n\r\nIs there some reason game.js doesn't use `$(\"<li/>\", {id: paneLinkId, href: \"#\"}).text(objectDisplayName)`?",
      "EditableFormat": "markdown",
      "HTML": "<p>Though actually, <code>\"&lt;li id=\\\"\" + paneLinkId + \"\\\" href=\\\"#\\\"&gt;\" + objectDisplayName + \"&lt;/li&gt;\"</code> is ugly enough anyway.</p>\n<p>Is there some reason game.js doesn't use <code>$(\"&lt;li/&gt;\", {id: paneLinkId, href: \"#\"}).text(objectDisplayName)</code>?</p>\n\n",
      "PostDate": "2018-01-28T13:39:59.8967758Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d77ff1c7-9561-4084-8ef0-cc63dc987aab",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice idea, mrangel! I may look more into that direction if I start having more than a dozen items in the various panes.\r\n\r\nUsing class - Yeah, I tried that at first, however, if you look at the resulting HTML output, the class has already been assigned and any changes to it, break the functionality of the QuestJS compiler (showing menus).",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice idea, mrangel! I may look more into that direction if I start having more than a dozen items in the various panes.</p>\n<p>Using class - Yeah, I tried that at first, however, if you look at the resulting HTML output, the class has already been assigned and any changes to it, break the functionality of the QuestJS compiler (showing menus).</p>\n\n",
      "PostDate": "2018-01-28T13:41:07.9589161Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fedf0899-4b7c-4cfe-be81-26409af0f9fe",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's just the same code I gave you earlier (my first suggestion), except with the static array of URLs in the javascript, rather than relying on Quest to extract an attribute from the object.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's just the same code I gave you earlier (my first suggestion), except with the static array of URLs in the javascript, rather than relying on Quest to extract an attribute from the object.</p>\n\n",
      "PostDate": "2018-01-28T13:46:25.8053247Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6604101f-0774-4d24-a784-4146a4b4b475",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have no idea...KV is [the one] developing the QuestJS fork I am using. I am just good at finding stuff like this, banging my head on my keyboard/laptop for a bit and eventually figuring out a different way to \"skin the cat\".",
      "EditableFormat": "markdown",
      "HTML": "<p>I have no idea...KV is [the one] developing the QuestJS fork I am using. I am just good at finding stuff like this, banging my head on my keyboard/laptop for a bit and eventually figuring out a different way to \"skin the cat\".</p>\n\n",
      "PostDate": "2018-01-28T13:46:39.4910681Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09661cbd-f9a1-4631-a419-3754c25ce595",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Building off of both of your suggestions:\r\n\r\nI changed it to this:\r\n\r\n**EDITED**\r\n```\r\nfunction updateList(listName, listData) {\r\n    var listElement = \"\";\r\n    var emptyListLabel = \"\";\r\n\r\n    if (listName == \"inventory\") {\r\n        listElement = \"#inventoryList\";\r\n        emptyListLabel = \"#inventoryEmpty\";\r\n    }\r\n\r\n    if (listName == \"placesobjects\") {\r\n\t\t$('#gameObjects').show();\r\n        listElement = \"#objectsList\";\r\n        emptyListLabel = \"#placesObjectsEmpty\";\r\n    }\r\n\r\n    $(listElement).empty();\r\n    $(listElement).show();\r\n    var listcount = 0;\r\n    var anyItem = false;\r\n\r\n    $.each(listData, function (key, value) {\r\n        var splitString = value.split(\":\");\r\n        var objectDisplayName = splitString[0];\r\n        var objectVerbs = splitString[1];\r\n\t\tvar hasListAlias = false;\r\n        var thisObj = GetObject(objectDisplayName);\r\n\t\tvar objNameToClass = objectDisplayName.replace(/ /g,'-');\r\n\t\tvar objectListAlias = objectDisplayName;\r\n\t\t\r\n\t\tif (typeof(thisObj['listalias']) === \"string\" && thisObj['listalias'] !== \"\"){\r\n\t\t\thasListAlias = true;\r\n\t\t\tobjectListAlias = thisObj['listalias'];\r\n\t\t}\r\n\t\t\r\n\t\tif (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n\t        listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n                \"<li id=\\\"\" + paneLinkId + \"\\\" class=\\\"\" + objNameToClass + \"\\\" href=\\\"#\\\">\" + objectListAlias + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n\t\telse if (listName == \"placesobjects\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\r\n\t\t\t\r\n            listcount++;\r\n            lastPaneLinkId++;\r\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\r\n            $(listElement).append(\r\n\t\t\t\t\"<li id=\\\"\" + paneLinkId + \"\\\" class=\\\"\" + objNameToClass + \"\\\" href=\\\"#\\\">\" + objectListAlias + \"</li>\"\r\n            );\r\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\r\n            anyItem = true;\r\n        }\r\n    });\r\n    $(listElement + \" li:last-child\").addClass('last-child')\r\n    if (listcount == 0) $(listElement).hide();\r\n    if (anyItem) {\r\n        $(emptyListLabel).hide();\r\n    }\r\n    else {\r\n        $(emptyListLabel).show();\r\n    }\r\n}\r\n```\r\n\r\n---\r\nNow, it shows the listalias value in the panes, if it exists.\r\n\r\nIt still adds the other classes, too.\r\n\r\n---\r\n\r\nIt replaces any spaces in the object's display name to ```-```.\r\n\r\nSo, I have \"Flux Capacitor\".\r\n\r\nIt sets the class \"Flux-Capacitor\".  Then, I can do whatever with ```$('.Flux-Capacitor')```.\r\n\r\n---\r\nQuestJS has it's own functions in game.js.  The normal Quest functions do not copy over to anything that can be interpreted by a browser.  That's one of the reasons QuestJS doesn't compile sometimes.  If a new function is added to Quest which doesn't have a JS version in game.js, the game will be faulty (if it even compiles).",
      "EditableFormat": "markdown",
      "HTML": "<p>Building off of both of your suggestions:</p>\n<p>I changed it to this:</p>\n<p><strong>EDITED</strong></p>\n<pre><code>function updateList(listName, listData) {\n    var listElement = \"\";\n    var emptyListLabel = \"\";\n\n    if (listName == \"inventory\") {\n        listElement = \"#inventoryList\";\n        emptyListLabel = \"#inventoryEmpty\";\n    }\n\n    if (listName == \"placesobjects\") {\n\t\t$('#gameObjects').show();\n        listElement = \"#objectsList\";\n        emptyListLabel = \"#placesObjectsEmpty\";\n    }\n\n    $(listElement).empty();\n    $(listElement).show();\n    var listcount = 0;\n    var anyItem = false;\n\n    $.each(listData, function (key, value) {\n        var splitString = value.split(\":\");\n        var objectDisplayName = splitString[0];\n        var objectVerbs = splitString[1];\n\t\tvar hasListAlias = false;\n        var thisObj = GetObject(objectDisplayName);\n\t\tvar objNameToClass = objectDisplayName.replace(/ /g,'-');\n\t\tvar objectListAlias = objectDisplayName;\n\t\t\n\t\tif (typeof(thisObj['listalias']) === \"string\" &amp;&amp; thisObj['listalias'] !== \"\"){\n\t\t\thasListAlias = true;\n\t\t\tobjectListAlias = thisObj['listalias'];\n\t\t}\n\t\t\n\t\tif (listName == \"inventory\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n\t        listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n                \"&lt;li id=\\\"\" + paneLinkId + \"\\\" class=\\\"\" + objNameToClass + \"\\\" href=\\\"#\\\"&gt;\" + objectListAlias + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n\t\telse if (listName == \"placesobjects\" || $.inArray(objectDisplayName, _compassDirs) == -1) {\n\t\t\t\n            listcount++;\n            lastPaneLinkId++;\n            var paneLinkId = \"paneLink\" + lastPaneLinkId;\n            $(listElement).append(\n\t\t\t\t\"&lt;li id=\\\"\" + paneLinkId + \"\\\" class=\\\"\" + objNameToClass + \"\\\" href=\\\"#\\\"&gt;\" + objectListAlias + \"&lt;/li&gt;\"\n            );\n            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);\n            anyItem = true;\n        }\n    });\n    $(listElement + \" li:last-child\").addClass('last-child')\n    if (listcount == 0) $(listElement).hide();\n    if (anyItem) {\n        $(emptyListLabel).hide();\n    }\n    else {\n        $(emptyListLabel).show();\n    }\n}\n</code></pre>\n<hr>\n<p>Now, it shows the listalias value in the panes, if it exists.</p>\n<p>It still adds the other classes, too.</p>\n<hr>\n<p>It replaces any spaces in the object's display name to <code>-</code>.</p>\n<p>So, I have \"Flux Capacitor\".</p>\n<p>It sets the class \"Flux-Capacitor\".  Then, I can do whatever with <code>$('.Flux-Capacitor')</code>.</p>\n<hr>\n<p>QuestJS has it's own functions in game.js.  The normal Quest functions do not copy over to anything that can be interpreted by a browser.  That's one of the reasons QuestJS doesn't compile sometimes.  If a new function is added to Quest which doesn't have a JS version in game.js, the game will be faulty (if it even compiles).</p>\n\n",
      "PostDate": "2018-01-28T17:32:01.2637645Z",
      "LastEditDate": "2018-01-28T18:24:37.9950102Z",
      "link": null
    },
    {
      "PostId": "b7b97e4d-b0b8-428a-ba6b-e85456b3d8af",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This works:\r\n```\r\n$(\".Flux-Capacitor\").css('background-image','url(\"https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519\")')\r\n```\r\n\r\n\r\n---\r\nThis works, but it doesn't process the text when using text-processor code:\r\n```\r\n$(\".Flux-Capacitor\").html(GetObject(\"Flux Capacitor\")['listalias'])\r\n```\r\n\r\n---\r\nIf QuestJS had the text-processor functions, that would work.\r\n\r\n...but:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35485133-85ac1956-0420-11e8-991d-86630ef5a760.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>This works:</p>\n<pre><code>$(\".Flux-Capacitor\").css('background-image','url(\"https://vignette.wikia.nocookie.net/bttf/images/b/b6/BTTF-game-SS-09.jpg/revision/latest/scale-to-width-down/300?cb=20101214205519\")')\n</code></pre>\n<hr>\n<p>This works, but it doesn't process the text when using text-processor code:</p>\n<pre><code>$(\".Flux-Capacitor\").html(GetObject(\"Flux Capacitor\")['listalias'])\n</code></pre>\n<hr>\n<p>If QuestJS had the text-processor functions, that would work.</p>\n<p>...but:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35485133-85ac1956-0420-11e8-991d-86630ef5a760.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-01-28T17:44:10.8066682Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b925eca7-c8f3-425b-b2bf-1355de30408d",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice KV! Did you add that to the QuestJS fork too? I want to make sure I don't overwrite the code if I do an update in the wee hours of the morning.\r\n\r\nThat was similar to my suggestion on Github (RE: adding more specific naming information to HTML elements during the compile process with QuestJS for this very reason).",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice KV! Did you add that to the QuestJS fork too? I want to make sure I don't overwrite the code if I do an update in the wee hours of the morning.</p>\n<p>That was similar to my suggestion on Github (RE: adding more specific naming information to HTML elements during the compile process with QuestJS for this very reason).</p>\n\n",
      "PostDate": "2018-01-28T18:27:11.0028068Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7eb88d78-2b97-4778-a80d-ecd15a0c335b",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "NOTE:  I will add text-processor functions, too.\r\n\r\n---\r\nALSO NOTE:  If you have a text-processor function in your listalias, replace it with actual HTML.\r\n\r\nMaybe:\r\n\r\n```\r\n$(\".Flux-Capacitor\").html(\"<img src='whatever'/>Flux Capacitor\");\r\n```\r\n\r\n\r\nYep:\r\n\r\nBEFORE\r\n![image](https://user-images.githubusercontent.com/30656341/35485562-181f043c-0427-11e8-8c9f-6396b9c8336c.png)\r\n\r\n---\r\nAFTER\r\n![image](https://user-images.githubusercontent.com/30656341/35485556-ff12ab88-0426-11e8-8458-bf538e2d5245.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>NOTE:  I will add text-processor functions, too.</p>\n<hr>\n<p>ALSO NOTE:  If you have a text-processor function in your listalias, replace it with actual HTML.</p>\n<p>Maybe:</p>\n<pre><code>$(\".Flux-Capacitor\").html(\"&lt;img src='whatever'/&gt;Flux Capacitor\");\n</code></pre>\n<p>Yep:</p>\n<p>BEFORE<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/35485562-181f043c-0427-11e8-8c9f-6396b9c8336c.png\" alt=\"image\"></p>\n<hr>\n<p>AFTER<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/35485556-ff12ab88-0426-11e8-8458-bf538e2d5245.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-01-28T18:31:29.5589756Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ed766816-49db-46a8-a2b8-06b0b9625f0a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Did you add that to the QuestJS fork too?\r\n\r\nNegative, but I will soon.\r\n\r\n> I want to make sure I don't overwrite the code if I do an update in the wee hours of the morning.\r\n\r\nI hate it when that happens!\r\n\r\n>That was similar to my suggestion on Github (RE: adding more specific naming information to HTML elements during the compile process with QuestJS for this very reason).\r\n\r\nI have learned much from mrangel and Pixie since then.\r\n\r\nI didn't know exactly what you meant, either.\r\n\r\n...but now I know.\r\n\r\n..and knowing is half the battle!\r\n\r\n---\r\n<sub>#GoJ.O.E.!</sub>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Did you add that to the QuestJS fork too?</p>\n</blockquote>\n<p>Negative, but I will soon.</p>\n<blockquote>\n<p>I want to make sure I don't overwrite the code if I do an update in the wee hours of the morning.</p>\n</blockquote>\n<p>I hate it when that happens!</p>\n<blockquote>\n<p>That was similar to my suggestion on Github (RE: adding more specific naming information to HTML elements during the compile process with QuestJS for this very reason).</p>\n</blockquote>\n<p>I have learned much from mrangel and Pixie since then.</p>\n<p>I didn't know exactly what you meant, either.</p>\n<p>...but now I know.</p>\n<p>..and knowing is half the battle!</p>\n<hr>\n<p><sub>#GoJ.O.E.!</sub></p>\n\n",
      "PostDate": "2018-01-28T18:35:58.1518403Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2c4b9544-63f8-4aa6-80b3-83746e1c4235",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```<a href='../ycnqtuiyckeuqwbz3nfp-q/quest-js-another-sort-of-update'>Updated it!</a>```\r\n\r\n<a href='../ycnqtuiyckeuqwbz3nfp-q/quest-js-another-sort-of-update'>Updated it!</a>\r\n\r\n---\r\nThe object links work now! (Except for the first click, but I bet that can be fixed with a bind when the game loads, but I don't know how to do that.)",
      "EditableFormat": "markdown",
      "HTML": "<p><code>&lt;a href='../ycnqtuiyckeuqwbz3nfp-q/quest-js-another-sort-of-update'&gt;Updated it!&lt;/a&gt;</code></p>\n<p><a href=\"../ycnqtuiyckeuqwbz3nfp-q/quest-js-another-sort-of-update\">Updated it!</a></p>\n<hr>\n<p>The object links work now! (Except for the first click, but I bet that can be fixed with a bind when the game loads, but I don't know how to do that.)</p>\n\n",
      "PostDate": "2018-01-29T01:27:56.5514843Z",
      "LastEditDate": "2018-01-29T01:29:36.3901706Z",
      "link": null
    }
  ]
}
