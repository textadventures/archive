{
  "Topic": {
    "TopicId": "zw0v0gjclukmssbsoummkq",
    "ForumId": "10",
    "Title": "Is it possible to print a list without linebreak, separated by commas?",
    "LastUpdated": "2018-01-25T13:20:02.2683678Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9169fd60-184f-40a1-a142-8fcad2e0c63e",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I want to print a list with specific npc only with their names, but a list of names, each with a new line, doesn't look well. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I want to print a list with specific npc only with their names, but a list of names, each with a new line, doesn't look well.</p>\n\n",
      "PostDate": "2018-01-25T13:20:02.2683678Z",
      "LastEditDate": "2018-01-25T13:20:47.5137348Z",
      "link": null
    },
    {
      "PostId": "c63de7cf-bbcb-413d-a7b1-de4cc175c39d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it an objectlist?\r\nIn this case, you probably want something like:\r\n```\r\nsome_npc_list = whatever function creates your list\r\nnpc_names = \"\"\r\nforeach (npc, some_npc_list) {\r\n  if (npc_names = \"\") {\r\n    npc_names = GetDisplayAlias(npc)\r\n  }\r\n  else {\r\n    npc_names = npc_names + \", \" + GetDisplayAlias(npc)\r\n  }\r\n}\r\nmsg (npc_names)\r\n```\r\nIf it's a stringlist containing their names, then you can just do:\r\n```\r\nmsg (Join (list_of_npcs, \", \"))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it an objectlist?<br>\nIn this case, you probably want something like:</p>\n<pre><code>some_npc_list = whatever function creates your list\nnpc_names = \"\"\nforeach (npc, some_npc_list) {\n  if (npc_names = \"\") {\n    npc_names = GetDisplayAlias(npc)\n  }\n  else {\n    npc_names = npc_names + \", \" + GetDisplayAlias(npc)\n  }\n}\nmsg (npc_names)\n</code></pre>\n<p>If it's a stringlist containing their names, then you can just do:</p>\n<pre><code>msg (Join (list_of_npcs, \", \"))\n</code></pre>\n\n",
      "PostDate": "2018-01-25T14:03:49.8421228Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f92b48a8-b37d-40e4-a1d1-faa83fbdccb0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Or a little simpler:\r\n```\r\nnpc_names = \"\"\r\nforeach (npc, some_npc_list) {\r\n  npc_names = npc_names + GetDisplayAlias(npc) + \", \"\r\n}\r\nnpc_names = Left (npc_names, Length(npc_names)-2)\r\nmsg (npc_names)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Or a little simpler:</p>\n<pre><code>npc_names = \"\"\nforeach (npc, some_npc_list) {\n  npc_names = npc_names + GetDisplayAlias(npc) + \", \"\n}\nnpc_names = Left (npc_names, Length(npc_names)-2)\nmsg (npc_names)\n</code></pre>\n\n",
      "PostDate": "2018-01-25T14:06:41.4333155Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c0a16b55-e286-4058-a75c-7f42c5f301ba",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've read so much about 'For each' but still don't understand what this function do, also 'For'.  So, I tried this here and got a error, sayin' \"unknown function: Length\", But it is a function, I know :-/",
      "EditableFormat": "markdown",
      "HTML": "<p>I've read so much about 'For each' but still don't understand what this function do, also 'For'.  So, I tried this here and got a error, sayin' \"unknown function: Length\", But it is a function, I know :-/</p>\n\n",
      "PostDate": "2018-01-26T20:34:44.1305148Z",
      "LastEditDate": "2018-01-26T20:36:43.5175833Z",
      "link": null
    },
    {
      "PostId": "0080cc1e-b8bf-4401-a82c-c7b2cf795819",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I meant LengthOf, not Length.\r\nThe hazards of writing code in many different languages; different function names to do the same thing.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I meant LengthOf, not Length.<br>\nThe hazards of writing code in many different languages; different function names to do the same thing.</p>\n\n",
      "PostDate": "2018-01-26T20:38:09.4811023Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fc433aa0-5c87-4c06-b81d-a35ff0c10142",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"foreach\" just makes a script do the same thing once for each item in the list.\r\n\r\nIn this case, for every item in the list, it adds that item's name and a comma to the end of the string. This means that you get a string whose contents is something like \"John, Bob, Charlie, Lemonhead, Veronica, \"\r\nThere's an extra comma at the end there; so you use `npc_names = Left (npc_names, LengthOf(npc_names)-2)` to cut the last two characters (a comma and a space) off the end of npc_names.",
      "EditableFormat": "markdown",
      "HTML": "<p>\"foreach\" just makes a script do the same thing once for each item in the list.</p>\n<p>In this case, for every item in the list, it adds that item's name and a comma to the end of the string. This means that you get a string whose contents is something like \"John, Bob, Charlie, Lemonhead, Veronica, \"<br>\nThere's an extra comma at the end there; so you use <code>npc_names = Left (npc_names, LengthOf(npc_names)-2)</code> to cut the last two characters (a comma and a space) off the end of npc_names.</p>\n\n",
      "PostDate": "2018-01-26T20:43:37.6854731Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e9b14a7-0cf8-4c34-b84d-c6b52bf39444",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Playing with lists:\r\n\r\n```\r\nmy_list = Split(\"one;two;three;four;five\",\";\")\r\nmsg (my_list)\r\nDisplayList(my_list,false)\r\nDisplayList(my_list,true)\r\nforeach (item, my_list) {\r\n  msg (item)\r\n}\r\njoined_list = Join(my_list,\", \")\r\nmsg (joined_list)\r\nformatted_list_UK = FormatList(my_list,\", \",\" and\")\r\nmsg (formatted_list_UK)\r\nformatted_list_US = FormatList(my_list,\", \",\", and\")\r\nmsg (formatted_list_US)\r\n```\r\n\r\n---\r\n\r\n<samp>\r\n\r\nList: one; two; three; four; five; \r\n- one\r\n- two\r\n- three\r\n- four\r\n- five\r\n\r\n1. one\r\n2. two\r\n3. three\r\n4. four\r\n5. five\r\n\r\none\r\ntwo\r\nthree\r\nfour\r\nfive\r\none, two, three, four, five\r\none, two, three, four and five\r\none, two, three, four, and five\r\n\r\n</samp>",
      "EditableFormat": "markdown",
      "HTML": "<p>Playing with lists:</p>\n<pre><code>my_list = Split(\"one;two;three;four;five\",\";\")\nmsg (my_list)\nDisplayList(my_list,false)\nDisplayList(my_list,true)\nforeach (item, my_list) {\n  msg (item)\n}\njoined_list = Join(my_list,\", \")\nmsg (joined_list)\nformatted_list_UK = FormatList(my_list,\", \",\" and\")\nmsg (formatted_list_UK)\nformatted_list_US = FormatList(my_list,\", \",\", and\")\nmsg (formatted_list_US)\n</code></pre>\n<hr>\n<samp>\n<p>List: one; two; three; four; five;</p>\n<ul>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n<li>four</li>\n<li>five</li>\n</ul>\n<ol>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n<li>four</li>\n<li>five</li>\n</ol>\n<p>one<br>\ntwo<br>\nthree<br>\nfour<br>\nfive<br>\none, two, three, four, five<br>\none, two, three, four and five<br>\none, two, three, four, and five</p>\n</samp>\n\n",
      "PostDate": "2018-01-26T20:58:25.498399Z",
      "LastEditDate": "2018-01-26T21:03:01.8000354Z",
      "link": null
    },
    {
      "PostId": "1b1a43d4-b9f3-46f6-b520-bf0c31cfa9f2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My bad. I completely forgot about FormatList.\r\n\r\nIf you just want a comma-separated list, you can use `FormatList(list_of_npcs, \", \", \", \", \"Nobody\")`.\r\n(The last parameter is what you want to display if the list is empty)",
      "EditableFormat": "markdown",
      "HTML": "<p>My bad. I completely forgot about FormatList.</p>\n<p>If you just want a comma-separated list, you can use <code>FormatList(list_of_npcs, \", \", \", \", \"Nobody\")</code>.<br>\n(The last parameter is what you want to display if the list is empty)</p>\n\n",
      "PostDate": "2018-01-26T21:06:30.9155958Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04a02de8-e87b-4fac-88af-e8caa4d064d1",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks... \r\n\r\nforeach (**npc**, some_npc_list) { [...] GetDisplayAlias(**npc**)[...] \r\n\r\nWhat is npc? \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks...</p>\n<p>foreach (<strong>npc</strong>, some_npc_list) { [...] GetDisplayAlias(<strong>npc</strong>)[...]</p>\n<p>What is npc?</p>\n\n",
      "PostDate": "2018-01-26T21:07:22.3522889Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b9ed3c3e-d606-4aa9-a247-791cb8e86191",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As KV pointed out, you can use FormatList instead of doing a foreach loop\r\n\r\nBut I think it's useful to learn how foreach works anyway; there'll be places you need to use it in future.\r\n\r\nIn this case, npc is each element in the list, one at a time.\r\n\r\nIf `some_list` is a list that contains Alan, Bob, and Charlie, then\r\n```\r\nforeach (npc, some_list) {\r\n  [...]\r\n}\r\n```\r\nwould be the same as:\r\n```\r\nnpc = Alan\r\n  [...]\r\nnpc = Bob\r\n  [...]\r\nnpc = Charlie\r\n  [...]\r\n```\r\n(where the [...] can be whatever script as you want)",
      "EditableFormat": "markdown",
      "HTML": "<p>As KV pointed out, you can use FormatList instead of doing a foreach loop</p>\n<p>But I think it's useful to learn how foreach works anyway; there'll be places you need to use it in future.</p>\n<p>In this case, npc is each element in the list, one at a time.</p>\n<p>If <code>some_list</code> is a list that contains Alan, Bob, and Charlie, then</p>\n<pre><code>foreach (npc, some_list) {\n  [...]\n}\n</code></pre>\n<p>would be the same as:</p>\n<pre><code>npc = Alan\n  [...]\nnpc = Bob\n  [...]\nnpc = Charlie\n  [...]\n</code></pre>\n<p>(where the [...] can be whatever script as you want)</p>\n\n",
      "PostDate": "2018-01-26T21:37:42.8579889Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3b25f46e-6378-48c9-9052-ab592613127a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's a local variable. \r\n\r\nYou can put anything you want.\r\n\r\n```\r\nmyList = Split(\"Joe;Bill;Larry\", \";\")\r\nforeach(butthead, myList){\r\n msg(butthead)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>That's a local variable.</p>\n<p>You can put anything you want.</p>\n<pre><code>myList = Split(\"Joe;Bill;Larry\", \";\")\nforeach(butthead, myList){\n msg(butthead)\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-26T21:40:05.2478402Z",
      "LastEditDate": "2018-01-26T21:41:50.9640141Z",
      "link": null
    },
    {
      "PostId": "dc4b2b27-3ca5-4b22-99d9-bbf5ba037dc0",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I should look for new posts before klickin' on post. \r\nSo, I'm sure this is helping me very much especially 'FormatList'. \r\n\r\nAt the moment I use the 'For each' for quest goals and the journal, but only because people helped me, but I can't see how it works. Not sure why... Brain Blocked?",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I should look for new posts before klickin' on post.<br>\nSo, I'm sure this is helping me very much especially 'FormatList'.</p>\n<p>At the moment I use the 'For each' for quest goals and the journal, but only because people helped me, but I can't see how it works. Not sure why... Brain Blocked?</p>\n\n",
      "PostDate": "2018-01-26T21:42:05.1887751Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b467dd0-d38d-4d69-b171-a5679d834988",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "my way of explaining foreach (using Objects and Object Lists in/for this example. Using Strings and String Lists are a bit different with some of their syntax, but we can help you get them cleared/fixed up easily):\r\n\r\n```\r\ncreate (\"joe_object\")\r\njoe_object.run_laps_script_attribute => msg (\"Joe runs laps\")\r\n\r\ncreate (\"jim_object\")\r\njim_object.run_laps_script_attribute => msg (\"Jim runs laps\")\r\n\r\ncreate (\"john_object\")\r\njohn_object.run_laps_script_attribute => msg (\"John runs laps\")\r\n\r\ncreate (\"team_object\")\r\n\r\nteam_object.team_objectlist_attribute = NewObjectList ()\r\nlist add (team_object.team_objectlist_attribute, joe_object)\r\nlist add (team_object.team_objectlist_attribute, jim_object)\r\nlist add (team_object.team_objectlist_attribute, john_object)\r\n\r\nforeach (team_member_variable, team_object.team_objectlist_attribute) {\r\n  do (team_member_variable, \"run_laps_script_attribute\")\r\n  //\r\n  // conceptually behind the scenes what the 'foreach' does / is-doing:\r\n  //\r\n  // it's doing its scripting 'for-EACH (EVERY/ALL)' items in the provided list (this is called 'iterating', it's iterating through the List's items and doing its scripting for each/all/every-one of them), see below example explaining it\r\n  //\r\n  // team_member_variable = joe_object\r\n  // do (team_member_variable, \"run_laps_script_attribute\")\r\n  // do (joe_object, \"run_laps_script_attribute\")\r\n  // output: Joe runs laps\r\n  //\r\n  // team_member_variable = jim_object\r\n  // do (team_member_variable, \"run_laps_script_attribute\")\r\n  // do (jim_object, \"run_laps_script_attribute\")\r\n  // output: Jim runs laps\r\n  //\r\n  // team_member_variable = john_object\r\n  // do (team_member_variable, \"run_laps_script_attribute\")\r\n  // do (john_object, \"run_laps_script_attribute\")\r\n  // output: John runs laps\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>my way of explaining foreach (using Objects and Object Lists in/for this example. Using Strings and String Lists are a bit different with some of their syntax, but we can help you get them cleared/fixed up easily):</p>\n<pre><code>create (\"joe_object\")\njoe_object.run_laps_script_attribute =&gt; msg (\"Joe runs laps\")\n\ncreate (\"jim_object\")\njim_object.run_laps_script_attribute =&gt; msg (\"Jim runs laps\")\n\ncreate (\"john_object\")\njohn_object.run_laps_script_attribute =&gt; msg (\"John runs laps\")\n\ncreate (\"team_object\")\n\nteam_object.team_objectlist_attribute = NewObjectList ()\nlist add (team_object.team_objectlist_attribute, joe_object)\nlist add (team_object.team_objectlist_attribute, jim_object)\nlist add (team_object.team_objectlist_attribute, john_object)\n\nforeach (team_member_variable, team_object.team_objectlist_attribute) {\n  do (team_member_variable, \"run_laps_script_attribute\")\n  //\n  // conceptually behind the scenes what the 'foreach' does / is-doing:\n  //\n  // it's doing its scripting 'for-EACH (EVERY/ALL)' items in the provided list (this is called 'iterating', it's iterating through the List's items and doing its scripting for each/all/every-one of them), see below example explaining it\n  //\n  // team_member_variable = joe_object\n  // do (team_member_variable, \"run_laps_script_attribute\")\n  // do (joe_object, \"run_laps_script_attribute\")\n  // output: Joe runs laps\n  //\n  // team_member_variable = jim_object\n  // do (team_member_variable, \"run_laps_script_attribute\")\n  // do (jim_object, \"run_laps_script_attribute\")\n  // output: Jim runs laps\n  //\n  // team_member_variable = john_object\n  // do (team_member_variable, \"run_laps_script_attribute\")\n  // do (john_object, \"run_laps_script_attribute\")\n  // output: John runs laps\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-27T01:50:07.6571174Z",
      "LastEditDate": "2018-01-27T02:11:19.8550947Z",
      "link": null
    },
    {
      "PostId": "5f0cd0ba-21c2-4044-b29b-e49ab17f8921",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nhere's my guide on using Lists/Dictionaries, but it may confuse you more, as I'm not very good at explaining stuff...\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\n\r\nask if you need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>here's my guide on using Lists/Dictionaries, but it may confuse you more, as I'm not very good at explaining stuff...</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n<p>ask if you need help with anything</p>\n\n",
      "PostDate": "2018-01-27T02:01:42.2895783Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e199da4-6561-43bc-8f20-8a22cf4cded2",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "All variations are working, but finally 'FormatList' fits my needs more. Just printed the object list with commas...",
      "EditableFormat": "markdown",
      "HTML": "<p>All variations are working, but finally 'FormatList' fits my needs more. Just printed the object list with commas...</p>\n\n",
      "PostDate": "2018-01-27T17:44:37.2101239Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b6dc01bb-9329-4929-9f9d-174b5dbf571d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```FormatList()``` is just doing the ```foreach()``` work for us:\r\n\r\n```\r\n  <function name=\"FormatList\" parameters=\"list, joiner, lastjoiner, nothing\" type=\"string\"><![CDATA[\r\n    if (ListCount (list) = 0) {\r\n      return (nothing)\r\n    }\r\n    else {\r\n      result = \"\"\r\n      count = 0\r\n      listLength = ListCount(list)\r\n      foreach (item, list) {\r\n        if (TypeOf(item) = \"object\") {\r\n          result = result + GetDisplayName(item)\r\n        }\r\n        else {\r\n          result = result + item\r\n        }\r\n        count = count + 1\r\n        if (count = listLength - 1) {\r\n          if (not IsRegexMatch(\"^\\\\W\", lastjoiner)) {\r\n            result = result + \" \"\r\n          }\r\n          result = result + lastjoiner + \" \"\r\n        }\r\n        else if (count < listLength) {\r\n          result = result + joiner + \" \"\r\n        }\r\n      }\r\n      return (Trim (result))\r\n    }\r\n  ]]></function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p><code>FormatList()</code> is just doing the <code>foreach()</code> work for us:</p>\n<pre><code>  &lt;function name=\"FormatList\" parameters=\"list, joiner, lastjoiner, nothing\" type=\"string\"&gt;&lt;![CDATA[\n    if (ListCount (list) = 0) {\n      return (nothing)\n    }\n    else {\n      result = \"\"\n      count = 0\n      listLength = ListCount(list)\n      foreach (item, list) {\n        if (TypeOf(item) = \"object\") {\n          result = result + GetDisplayName(item)\n        }\n        else {\n          result = result + item\n        }\n        count = count + 1\n        if (count = listLength - 1) {\n          if (not IsRegexMatch(\"^\\\\W\", lastjoiner)) {\n            result = result + \" \"\n          }\n          result = result + lastjoiner + \" \"\n        }\n        else if (count &lt; listLength) {\n          result = result + joiner + \" \"\n        }\n      }\n      return (Trim (result))\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-27T18:32:42.738592Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
