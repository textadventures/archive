{
  "Topic": {
    "TopicId": "5900",
    "ForumId": "10",
    "Title": "'Give' changing an integer value with NPCs",
    "LastUpdated": "2016-01-23T18:28:47+00:00",
    "ReplyCount": 8
  },
  "Posts": [
    {
      "PostId": "40801",
      "UserId": 0,
      "Username": "benn",
      "UserAvatar": null,
      "UserGravatar": "f273c5eba2047a83fc7777c177ee5570",
      "EditableText": "I've been messing with Quest for a few weeks &amp; really like it. The GUI's fairly intuitive so for the most part, I've been able to set things up pretty easily without having to delve too deeply with coding. But I hit a snag. Keep looking through the documentation, but I think I might've missed it\n\nSo I have different object types set up for 'food' &amp; 'npc's. I gave both a 'happiness' attribute. Through expressions, I set it up so eating certain foods makes the player character happier, &amp; thus gets different descriptions &amp; outcomes based on that variations of that integer value. What I'd like to do is set up something similar for npcs. Make it so if I give another character a food item instead of just eating it, it can apply that same value it already has to them instead of the player &amp; thus alter your interactions with them. The part I'm running into trouble, since I'm doing this by expressions, is what to call that. Whereas just plain eating it alters &quot;player.happiness,&quot; is there a nice way to apply that to all npcs as a base? Is there a way to set it up to make it work across the entire object type, but only work on the specific npc receiving an item? Or do I have to account for every npc's happiness value individually?\n\nAnd if you'll allow me to piggyback another, since it's sort of related, I like how with certain verbs like give, you can get an automatic list of hyperlinks of who you can give things to/interact with. What's annoying is when I click 'apple &gt; give' &amp; among the list is like 'chair' 'npc' 'clock' 'etc' like every possible combo of item in the room &amp; in the inventory. Is there a simple way of limiting the hyperlink options on something like that just to npcs? Or do I have to kill the autolist &amp; just try to make a menu via script?\n\nThanks in advance!",
      "EditableFormat": "bbcode",
      "HTML": "I've been messing with Quest for a few weeks &amp; really like it. The GUI's fairly intuitive so for the most part, I've been able to set things up pretty easily without having to delve too deeply with coding. But I hit a snag. Keep looking through the documentation, but I think I might've missed it<br/><br/>So I have different object types set up for 'food' &amp; 'npc's. I gave both a 'happiness' attribute. Through expressions, I set it up so eating certain foods makes the player character happier, &amp; thus gets different descriptions &amp; outcomes based on that variations of that integer value. What I'd like to do is set up something similar for npcs. Make it so if I give another character a food item instead of just eating it, it can apply that same value it already has to them instead of the player &amp; thus alter your interactions with them. The part I'm running into trouble, since I'm doing this by expressions, is what to call that. Whereas just plain eating it alters &quot;player.happiness,&quot; is there a nice way to apply that to all npcs as a base? Is there a way to set it up to make it work across the entire object type, but only work on the specific npc receiving an item? Or do I have to account for every npc's happiness value individually?<br/><br/>And if you'll allow me to piggyback another, since it's sort of related, I like how with certain verbs like give, you can get an automatic list of hyperlinks of who you can give things to/interact with. What's annoying is when I click 'apple &gt; give' &amp; among the list is like 'chair' 'npc' 'clock' 'etc' like every possible combo of item in the room &amp; in the inventory. Is there a simple way of limiting the hyperlink options on something like that just to npcs? Or do I have to kill the autolist &amp; just try to make a menu via script?<br/><br/>Thanks in advance!",
      "PostDate": "2016-01-20T01:03:12+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40802",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "over the versions, many Tabs have accumulated in the GUI~Editor, cluttering it up, and so, now many of the Tabs are hidden, until you toggle them on:\n\n'game' Game Object -&gt; 'Features' and~or the 'Room Descriptions' Tab -&gt; toggle (via the check boxes) on~off various features~Tabs, as desired\n\n'whatever' (for individual) Object(s) -&gt; 'Objects' and~or 'Features' Tab -&gt; toggle (via the check boxes) on~off various features~Tabs, as desired\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/upgrade_notes.html\">http://docs.textadventures.co.uk/quest/ ... notes.html</a><!-- m -->\n\nso, first if you haven't already, is to toggle on the 'use~give' Tab for your Objects (the default 'player' Player Object and~or other desired Objects).\n\nthis provides you the built-in 'use~give' feature (shows~reveals the 'use~give' Tab now), which should then hopefully be intuitive... (if not let me~us know):\n\nbasicaly you want to 'run scripts', and to choose (add) the scripts that-or-to do what you want (usually you want the action~scripts to be local to that specific Object, so choose '[handle Objects individually]' if that is one of the choices).\n\nI'm not that familiar with the GUI~Editor... and am too lazy to look it up, so hopefully you can figure out what scripts to add to do what you want...\n\n----------------\n\nunfortunately... yes, each Object, needs its own Attributes, though there's different methods of doing this to make it easier on you, the computer~cpu (processing: speed~performance), and~or on the computer's memory usage (not using up lots of your computer's memory~resources).\n\nthese various methods can be complex~advanced~confusing if you're not already a decent~good coder (such as using the 'Object Types' as I have done in my example below, but there's also via scripting, and etc advanced methods), but~so if you're interested, let me know.\n\nhopefully this is intuitive... about why each object needs it's own attributes (if you don't mind a little code usage for a conceptual example):\n\n'barbarian.strength' is his own strength amount, which needs to be tracked~stored (so it can be manipulated~used), which can be increased or decreased, and used for other game mechanics~formulas.\n\n'paladin.strength' is his own strength amount, completely independant of the 'barbarian' Object's 'strength' Attribute, which needs to be tracked~stored (so it can be manipulated~used), which can be increased or decreased, and used for other game mechanics~formulas.\n\nIf the 'barbarian' Object gets his 'strength' Attribute increased, that should have no effect upon the 'paladin' Object's 'strength' Attribute, and thus why the 'paladin' needs his own 'strength' Attribute as well as the 'barbarian' needing~having his own 'strength' Attribute.\n\nand by having two such attributes, they can be computed (added, subtracted, multiplied, divided, etc) and compared~contrasted too, to each other:\n\n(ignore the lame-ness and~or impracticality of my examples below, lol)\n\n[code:3kvak26h]if (barbarian&#46;strength &gt; paladin&#46;strength) {\n  msg (&quot;The barbarian has more strength than the paladin&quot;)\n} else if (barbarian&#46;strength &lt; paladin&#46;strength) {\n  msg (&quot;The paladin has more strength than the barbarian&quot;)\n} else {\n  msg (&quot;The barbarian and paladin have the same strength&quot;)\n}[/code:3kvak26h]\n\n[code:3kvak26h]team&#46;strength = barbarian&#46;strength + paladin&#46;strength[/code:3kvak26h]\n\n[code:3kvak26h]player&#46;damage = (player&#46;weapon&#46;damage + player&#46;weapon&#46;damage * (player&#46;strength / 100)) - (monster&#46;armor&#46;resistance + monster&#46;armor&#46;resistance * (monster&#46;endurance / 100))[/code:3kvak26h]\n\n[code:3kvak26h]player&#46;current_life = player&#46;current_life - monster&#46;damage\n\nmonster&#46;current_life = monster&#46;current_life - player&#46;damage[/code:3kvak26h]\n\n---------------\n\nif you want to see, in code, an example, then here:\n\nif the built-in 'give' doesn't work, you can create your own Command and~or Function (I don't know how to integrate the Command with a Verb --- I saw Pixie, or maybe it was someone else argh, doing it in one of his~her many guides, but can't remember where~what one, and at the time I couldn't understand it and probably still can't understand it, anyways, lol) \n\n(there's a recent thread on using regular expressions, to handle all the different variations of words that people may use, but it was a bit over my head)\n\n[code:3kvak26h]&lt;object name=&quot;npc_1&quot;&gt;\n  &lt;inherit name=&quot;npc_type&quot; /&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;tavern maid&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;apple&quot;&gt;\n  &lt;inherit name=&quot;food_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;banana&quot;&gt;\n  &lt;inherit name=&quot;food_type&quot; /&gt;\n  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;20&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;cyanide&quot;&gt;\n  &lt;inherit name=&quot;poison_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;ars_enic&quot;&gt;\n  &lt;inherit name=&quot;poison_type&quot; /&gt;\n  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;90&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;npc_type&quot;&gt;\n  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;npc&lt;/attr&gt;\n  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n  &lt;attr name=&quot;condition_string&quot; type=&quot;string&quot;&gt;normal&lt;/attr&gt;\n  &lt;attr name=&quot;changedcondition_integer&quot; type=&quot;script&quot;&gt;\n    if (this&#46;condition_integer &gt; 66) {\n      this&#46;condition_string = &quot;healthy&quot;\n    } else if (this&#46;condition_integer &gt; 33) {\n      this&#46;condition_string = &quot;normal&quot;\n    } else if (this&#46;condition_integer &gt; 0) {\n      this&#46;condition_string = &quot;unhealthy&quot;\n    } else {\n      this&#46;condition_string = &quot;dead&quot;\n    }\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=&quot;food_type&quot;&gt;\n  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;\n  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=&quot;poison_type&quot;&gt;\n  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;poison&lt;/attr&gt;\n  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;60&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;command name=&quot;give_item_to_npc_command&quot;&gt;\n  &lt;pattern&gt;give #object_1# to #object_2#&lt;/pattern&gt;\n  &lt;script&gt;\n    if (GetString (object_1, &quot;type_of_object&quot;) = &quot;food&quot; and GetString (object_2, &quot;type_of_object&quot;) = &quot;npc&quot;) {\n      object_1&#46;parent = object_2\n      object_2&#46;condition_integer = object_2&#46;condition_integer + object_1&#46;condition_integer\n      msg (&quot;You give the &quot; + object_1&#46;name + &quot; and they eat it, (and magically the food is back or still in the npc's hand, lol), restoring &quot; + object_1&#46;condition_integer + &quot;life&#46;&quot;)\n    } else if (GetString (object_1, &quot;type_of_object&quot;) = &quot;poison&quot; and GetString (object_2, &quot;type_of_object&quot;) = &quot;npc&quot;) {\n      object_1&#46;parent = object_2\n      object_2&#46;condition_integer = object_2&#46;condition_integer - object_1&#46;condition_integer\n      msg (&quot;You give the &quot; + object_1&#46;name + &quot; and they drink it, (and magically the poison is back or still in the npc's hand, lol), poisoning them, depleting&quot; + object_1&#46;condition_integer + &quot;life&#46;&quot;) \n    }\n  &lt;/script&gt;\n&lt;/command&gt;[/code:3kvak26h]",
      "EditableFormat": "bbcode",
      "HTML": "over the versions, many Tabs have accumulated in the GUI~Editor, cluttering it up, and so, now many of the Tabs are hidden, until you toggle them on:<br/><br/>'game' Game Object -&gt; 'Features' and~or the 'Room Descriptions' Tab -&gt; toggle (via the check boxes) on~off various features~Tabs, as desired<br/><br/>'whatever' (for individual) Object(s) -&gt; 'Objects' and~or 'Features' Tab -&gt; toggle (via the check boxes) on~off various features~Tabs, as desired<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/upgrade_notes.html\">http://docs.textadventures.co.uk/quest/ ... notes.html</a><!-- m --><br/><br/>so, first if you haven't already, is to toggle on the 'use~give' Tab for your Objects (the default 'player' Player Object and~or other desired Objects).<br/><br/>this provides you the built-in 'use~give' feature (shows~reveals the 'use~give' Tab now), which should then hopefully be intuitive... (if not let me~us know):<br/><br/>basicaly you want to 'run scripts', and to choose (add) the scripts that-or-to do what you want (usually you want the action~scripts to be local to that specific Object, so choose '[handle Objects individually]' if that is one of the choices).<br/><br/>I'm not that familiar with the GUI~Editor... and am too lazy to look it up, so hopefully you can figure out what scripts to add to do what you want...<br/><br/>----------------<br/><br/>unfortunately... yes, each Object, needs its own Attributes, though there's different methods of doing this to make it easier on you, the computer~cpu (processing: speed~performance), and~or on the computer's memory usage (not using up lots of your computer's memory~resources).<br/><br/>these various methods can be complex~advanced~confusing if you're not already a decent~good coder (such as using the 'Object Types' as I have done in my example below, but there's also via scripting, and etc advanced methods), but~so if you're interested, let me know.<br/><br/>hopefully this is intuitive... about why each object needs it's own attributes (if you don't mind a little code usage for a conceptual example):<br/><br/>'barbarian.strength' is his own strength amount, which needs to be tracked~stored (so it can be manipulated~used), which can be increased or decreased, and used for other game mechanics~formulas.<br/><br/>'paladin.strength' is his own strength amount, completely independant of the 'barbarian' Object's 'strength' Attribute, which needs to be tracked~stored (so it can be manipulated~used), which can be increased or decreased, and used for other game mechanics~formulas.<br/><br/>If the 'barbarian' Object gets his 'strength' Attribute increased, that should have no effect upon the 'paladin' Object's 'strength' Attribute, and thus why the 'paladin' needs his own 'strength' Attribute as well as the 'barbarian' needing~having his own 'strength' Attribute.<br/><br/>and by having two such attributes, they can be computed (added, subtracted, multiplied, divided, etc) and compared~contrasted too, to each other:<br/><br/>(ignore the lame-ness and~or impracticality of my examples below, lol)<br/><br/><pre><code>if (barbarian&#46;strength &gt; paladin&#46;strength) {<br/>  msg (&quot;The barbarian has more strength than the paladin&quot;)<br/>} else if (barbarian&#46;strength &lt; paladin&#46;strength) {<br/>  msg (&quot;The paladin has more strength than the barbarian&quot;)<br/>} else {<br/>  msg (&quot;The barbarian and paladin have the same strength&quot;)<br/>}</code></pre><br/><br/><pre><code>team&#46;strength = barbarian&#46;strength + paladin&#46;strength</code></pre><br/><br/><pre><code>player&#46;damage = (player&#46;weapon&#46;damage + player&#46;weapon&#46;damage * (player&#46;strength / 100)) - (monster&#46;armor&#46;resistance + monster&#46;armor&#46;resistance * (monster&#46;endurance / 100))</code></pre><br/><br/><pre><code>player&#46;current_life = player&#46;current_life - monster&#46;damage<br/><br/>monster&#46;current_life = monster&#46;current_life - player&#46;damage</code></pre><br/><br/>---------------<br/><br/>if you want to see, in code, an example, then here:<br/><br/>if the built-in 'give' doesn't work, you can create your own Command and~or Function (I don't know how to integrate the Command with a Verb --- I saw Pixie, or maybe it was someone else argh, doing it in one of his~her many guides, but can't remember where~what one, and at the time I couldn't understand it and probably still can't understand it, anyways, lol) <br/><br/>(there's a recent thread on using regular expressions, to handle all the different variations of words that people may use, but it was a bit over my head)<br/><br/><pre><code>&lt;object name=&quot;npc_1&quot;&gt;<br/>  &lt;inherit name=&quot;npc_type&quot; /&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;tavern maid&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;apple&quot;&gt;<br/>  &lt;inherit name=&quot;food_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;banana&quot;&gt;<br/>  &lt;inherit name=&quot;food_type&quot; /&gt;<br/>  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;20&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;cyanide&quot;&gt;<br/>  &lt;inherit name=&quot;poison_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;ars_enic&quot;&gt;<br/>  &lt;inherit name=&quot;poison_type&quot; /&gt;<br/>  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;90&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;npc_type&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;npc&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition_string&quot; type=&quot;string&quot;&gt;normal&lt;/attr&gt;<br/>  &lt;attr name=&quot;changedcondition_integer&quot; type=&quot;script&quot;&gt;<br/>    if (this&#46;condition_integer &gt; 66) {<br/>      this&#46;condition_string = &quot;healthy&quot;<br/>    } else if (this&#46;condition_integer &gt; 33) {<br/>      this&#46;condition_string = &quot;normal&quot;<br/>    } else if (this&#46;condition_integer &gt; 0) {<br/>      this&#46;condition_string = &quot;unhealthy&quot;<br/>    } else {<br/>      this&#46;condition_string = &quot;dead&quot;<br/>    }<br/>  &lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;type name=&quot;food_type&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;food&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;type name=&quot;poison_type&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;poison&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition_integer&quot; type=&quot;int&quot;&gt;60&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;command name=&quot;give_item_to_npc_command&quot;&gt;<br/>  &lt;pattern&gt;give #object_1# to #object_2#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    if (GetString (object_1, &quot;type_of_object&quot;) = &quot;food&quot; and GetString (object_2, &quot;type_of_object&quot;) = &quot;npc&quot;) {<br/>      object_1&#46;parent = object_2<br/>      object_2&#46;condition_integer = object_2&#46;condition_integer + object_1&#46;condition_integer<br/>      msg (&quot;You give the &quot; + object_1&#46;name + &quot; and they eat it, (and magically the food is back or still in the npc's hand, lol), restoring &quot; + object_1&#46;condition_integer + &quot;life&#46;&quot;)<br/>    } else if (GetString (object_1, &quot;type_of_object&quot;) = &quot;poison&quot; and GetString (object_2, &quot;type_of_object&quot;) = &quot;npc&quot;) {<br/>      object_1&#46;parent = object_2<br/>      object_2&#46;condition_integer = object_2&#46;condition_integer - object_1&#46;condition_integer<br/>      msg (&quot;You give the &quot; + object_1&#46;name + &quot; and they drink it, (and magically the poison is back or still in the npc's hand, lol), poisoning them, depleting&quot; + object_1&#46;condition_integer + &quot;life&#46;&quot;) <br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;</code></pre>",
      "PostDate": "2016-01-20T03:15:19+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40806",
      "UserId": 0,
      "Username": "benn",
      "UserAvatar": null,
      "UserGravatar": "f273c5eba2047a83fc7777c177ee5570",
      "EditableText": "Thanks, HK! \nI don't know if I miscommunicated the question I had or if I'm just not following, but I definitely understand every npc requiring their own attribute. As a matter of fact they already do have them as a base. My question was about how to apply the change to that integer. To run with your example, say you have a potion that gives +5 strength. Barbarian's got 20 strength &amp; the Paladin's got 15. How do I set up the expression so either one gets the same +5 strength? It seems like something I could run as a function, but don't know exactly what to put to make it work universal among each npc. Do I have to create a separate script for every possible npc under the food object type? \nEDIT- though stupid me, i didn't realize that last code window had a scroll to it. i see how you coded it &amp; while it's a lot more complicated than i was looking to go, but i get the general idea. if I do have to do it individually, at the very least i can copy the 'eat' scripts &amp; just swap the player out for each npc. just thought there might've been an easier way\n\nAnd with the other question, 'give' might've been a bad example, as I did eventually find how to limit the options for that. Where it's bugging me most at the moment, I have the custom verb 'confront with...' &amp; have it set to 'require another object'. Problem is when I click it, I get this super long list of my whole inventory AND everything just hanging in the room &amp; doesn't give me the 'handle Objects individually' option. I clicked through toggles &amp; tabs but didn't see anything that really applied. I guess I might have to take the verb off the npc &amp; put it on the item, but then I'm worried it'll still give me the option to confront the chair or something. Anyway, deeply sorry if I wasted any of your time but truly appreciate the help",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, HK! <br/>I don't know if I miscommunicated the question I had or if I'm just not following, but I definitely understand every npc requiring their own attribute. As a matter of fact they already do have them as a base. My question was about how to apply the change to that integer. To run with your example, say you have a potion that gives +5 strength. Barbarian's got 20 strength &amp; the Paladin's got 15. How do I set up the expression so either one gets the same +5 strength? It seems like something I could run as a function, but don't know exactly what to put to make it work universal among each npc. Do I have to create a separate script for every possible npc under the food object type? <br/>EDIT- though stupid me, i didn't realize that last code window had a scroll to it. i see how you coded it &amp; while it's a lot more complicated than i was looking to go, but i get the general idea. if I do have to do it individually, at the very least i can copy the 'eat' scripts &amp; just swap the player out for each npc. just thought there might've been an easier way<br/><br/>And with the other question, 'give' might've been a bad example, as I did eventually find how to limit the options for that. Where it's bugging me most at the moment, I have the custom verb 'confront with...' &amp; have it set to 'require another object'. Problem is when I click it, I get this super long list of my whole inventory AND everything just hanging in the room &amp; doesn't give me the 'handle Objects individually' option. I clicked through toggles &amp; tabs but didn't see anything that really applied. I guess I might have to take the verb off the npc &amp; put it on the item, but then I'm worried it'll still give me the option to confront the chair or something. Anyway, deeply sorry if I wasted any of your time but truly appreciate the help",
      "PostDate": "2016-01-20T04:17:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40808",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "The important part of what you are doing is raising the attribute in the script for GIVE; in code it just looks like this (click the seventh icon along over a script area of the GUI to see the code view):\n[code:27ewjzuj]this&#46;happiness = this&#46;happiness + 5[/code:27ewjzuj]\nThe &quot;this&quot; refers to the thing that has the script, so you can use the same code for any NPC.\n\nFor the verbs, you need to select from the list what you will confront the NPC with. Quest allows that to be any object or room in the game, so yes, that will potentially be a long list.",
      "EditableFormat": "bbcode",
      "HTML": "The important part of what you are doing is raising the attribute in the script for GIVE; in code it just looks like this (click the seventh icon along over a script area of the GUI to see the code view):<br/><pre><code>this&#46;happiness = this&#46;happiness + 5</code></pre><br/>The &quot;this&quot; refers to the thing that has the script, so you can use the same code for any NPC.<br/><br/>For the verbs, you need to select from the list what you will confront the NPC with. Quest allows that to be any object or room in the game, so yes, that will potentially be a long list.",
      "PostDate": "2016-01-20T08:08:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40814",
      "UserId": 0,
      "Username": "benn",
      "UserAvatar": null,
      "UserGravatar": "f273c5eba2047a83fc7777c177ee5570",
      "EditableText": "Thanks, Pixie!\n\nIf it was just the one value of +5, that's probably how I would've gone about it. But since I have different food adding different values, I already have &quot;this&quot; applying to the food's happiness attribute in the eat expression (in the food object type). Like so:\n\n[code:sd33jaw5]player&#46;happiness = player&#46;happiness + this&#46;happiness[/code:sd33jaw5]\n\nOk, so say I change the attribute in the food object type from happiness to like &quot;hap&quot; or something, to avoid any conflicts. Could I use &quot;this&quot; to apply to both a unique attribute in both the npc &amp; the food in the same expression? Essentially:\n\n[code:sd33jaw5]this&#46;happiness = this&#46;happiness + this&#46;hap[/code:sd33jaw5]\n\nWith &quot;this.happiness&quot; being the happiness of the npc &amp; &quot;this.hap&quot; being how happy the food makes them? I'd try to just plug it in right now to test it myself, but I'd have to change it for &quot;eat&quot; then too &amp; I'm already running a little late for work at the moment.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, Pixie!<br/><br/>If it was just the one value of +5, that's probably how I would've gone about it. But since I have different food adding different values, I already have &quot;this&quot; applying to the food's happiness attribute in the eat expression (in the food object type). Like so:<br/><br/><pre><code>player&#46;happiness = player&#46;happiness + this&#46;happiness</code></pre><br/><br/>Ok, so say I change the attribute in the food object type from happiness to like &quot;hap&quot; or something, to avoid any conflicts. Could I use &quot;this&quot; to apply to both a unique attribute in both the npc &amp; the food in the same expression? Essentially:<br/><br/><pre><code>this&#46;happiness = this&#46;happiness + this&#46;hap</code></pre><br/><br/>With &quot;this.happiness&quot; being the happiness of the npc &amp; &quot;this.hap&quot; being how happy the food makes them? I'd try to just plug it in right now to test it myself, but I'd have to change it for &quot;eat&quot; then too &amp; I'm already running a little late for work at the moment.",
      "PostDate": "2016-01-20T13:55:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40815",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "(Testing my memory: that's the problem with only offering single lines of code instead of entire contexts to jar me.)\n\nTwo-object commands typically have &quot;object&quot; and &quot;object2&quot; variables (e.g. give %object to %object2). I'm not sure what the convention is for verbs, but there must be some way to access the &quot;other&quot; object within the script. I'd try &quot;object&quot; or &quot;object2&quot; as a first try.",
      "EditableFormat": "bbcode",
      "HTML": "(Testing my memory: that's the problem with only offering single lines of code instead of entire contexts to jar me.)<br/><br/>Two-object commands typically have &quot;object&quot; and &quot;object2&quot; variables (e.g. give %object to %object2). I'm not sure what the convention is for verbs, but there must be some way to access the &quot;other&quot; object within the script. I'd try &quot;object&quot; or &quot;object2&quot; as a first try.",
      "PostDate": "2016-01-20T14:18:05+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40830",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Programming uses ASSIGNMENT, which is different than math's EQUALS:\n\nmath:\n\n(x = 10) = (10 = x)\n\nprogramming~coding:\n\n(x = 10) =/= (10 = x): ERROR\n\nthe ASSIGNMENT OPERATOR (=) means that you're putting~storing the value_or_expression on the right side of the '=', into the VARIABLE on the left side of the '=', conceptually algebraic substitution:\n\nx = 10\nmsg (&quot;The value of x is: &quot; + x)\n// outputs: The value of x is: 10\n\nplayer.strength = 10\nmsg (&quot;The Player's strength is: &quot; + player.strength)\n// outputs: The Player's strength is: 10\n\n----------\n\nso, the syntax (in code) for the basic computations is:\n\n// this is my own way of representing the syntax generically (an Attribute):\n\nObject_name.Attribute_name = Value_or_Expression\n\n~and for a conditional, an example using an 'if' Script ~\n\nif (Object_name.Attribute_name OPERATOR Value_or_Expression) { scripts }\n\n----------\n\nOPERATORS:\n\nAssignment or Comparison: =\n// quest doesn't have the '==' (comparison operator), it can parse the '=' accurately, to whether to do an assignment or comparison\n\nAddition or Concatenation (Concatenation: literally putting strings together, aka next to each other: &quot;55&quot; + &quot;55&quot; = &quot;5555&quot;): +\n\nSubtraction: -\n\nMultiplication: *\n\nDivision (getting the quotient, aka normal devision: 4/2 = 2): /\n\nModulus (devision, except you're getting~finding the REMAINDER, not the quotient: 5%2 = R1, 4%2 = R0, 5%3 = R2): %\n\nNegation (Not) method A: not Object_name.Attribute_name = Value_or_Expression\n// or for Boolean Attributes, the shorthand is: not Object_name.Attribute_name\n~OR~\n\n// if you're doing stuff directly in code (non-GUI~Editor), then you need to add the 'CDATA' tags to tell quest that the '&lt;,&gt;' are NOT html tags:\n\n&lt;![CDATA[ scripts ]]&gt;\n\nexample:\n\n[code:3izypk5f]&lt;function name=&quot;student_grade_function&quot; parameters=&quot;student&quot;&gt;&lt;!&#91;CDATA&#91;\n  if (student&#46;score &gt; 90) {\n    student&#46;grade = &quot;A&quot;\n  } else if (student&#46;score &gt; 80) {\n    student&#46;grade = &quot;B&quot;\n  } else if (student&#46;score &gt; 70) {\n    student&#46;grade = &quot;C&quot;\n  } else if (student&#46;score &gt; 60) {\n    student&#46;grade = &quot;D&quot;\n  } else {\n    student&#46;grade = &quot;F&quot;\n  }\n&#93;&#93;&gt;&lt;/function&gt;[/code:3izypk5f]\n\nso, this 'CDATA' tagging applies to all of these: again only if doing directly in code (if doing in the GUI~Editor, than it will automatically handle it for you, do NOT use the 'CDATA' tags if using the GUI~Editor):\n\nNegation (Not) method B: Object_name.Attribute_name &lt;&gt; Value_or_Expression\n\nGreater Than: &gt;\n\nLesser Than: &lt;\n\n// the equals must be on the RIGHT side:\n\nGreater Than or Equals To: &gt;=\n\nLesser Than or Equals To: &lt;=\n\netc etc etc (probably missing a few more operators... meh)\n\n---------\n\nSetting~Re-Setting~Alternating~Manipulating a VARIABLE's (usually using Attributes as your VARIABLES) Value:\n\nplayer.strength = 0\nplayer.strength = 100\n\nmonster.strength = 25\nplayer.strength = monster.strength\n// player.strength = 25\n\nmonster.strength = 25\nmonster.endurance = 75\nplayer.strength = monster.strength + monster.endurance\n// player.strength = 100\n\n--------------\n\nAddition (examples):\n\nplayer.strength = player.strength + 5 // or whatever value you want\n\nplayer.strength = player.strength + player.endurance + player.constitution\n\n----------\n\n*conceptual* example of how it works (using simple addition):\n\ninitial (old) value: player.strength = 0\n\nplayer.strength (new) = player.strength (old:0) + 5\nplayer.strength (new) = (0) + 5\n\nnew value: player.strength = 5\n\nold value: player.strength = 5\n\nplayer.strength (new) = player.strength (old:5) + 5\nplayer.strength (new) = (5) + 5\n\nnew value: player.strength = 10\n\nold value: player.strength = 10\n\nplayer.strength (new) = player.strength (old:10) + 5\nplayer.strength (new) = (10) + 5\n\nnew value: player.strength = 15\n\netc etc etc\n\n---------------------\n\nSubtraction:\n\nplayer.strength = player.strength - 5\n\n-------------------\n\nMultiplication:\n\nplayer.strength = player.strength * 5\n\n-----------------\n\nDivision:\n\nplayer.strength = player.strength / 5\n\n----------------\n\nModulus:\n\ngame.seconds = game.seconds % 60\n\n// remember this gets the REMAINDER of a division operation: making it good for cyclic things, such as time and dates (like seconds, minutes, hours, months, days, seasons, etc etc etc)\n// 0,1,2,...,59,0,...,59,0,...,59, etc etc etc\n// (0%60 = 60: you don't want this, lol), 1%60 = 1, 2%60 = 2, 59/60 = 59, 60%60 = 0, 61%60 = 1, 119%60 = 59, 120%60 = 0, 121%60 = 1, etc etc etc\n\ngame.minutes = game.minutes % 60\n\ngame.civilian_hours = game.civilian_hours % 12 // 0-11 am, 0-11 pm, 0 (0 or 12): am to pm (noon) or pm to am (midnight)\n\ngame.military_hours = game.military_hours % 24 // 0-23, 0 (0 or 24): from old day to new day (midnight)\n\ngame.months = game.months % 12\n\ngame.days = game.days % 7\n\ngame.seasons = game.seasons % 4\n\n-------------------------\n\nIN THE GUI~EDITOR:\n\nAttributes (script that creates, sets, re-sets, changes, alters, manipulates, and~or etc Attributes):\n\nrun as script -&gt; add new script -&gt; variables -&gt; 'set a variable or attribute' Script -&gt; [expression], or choose the right option for what you want to do\n\nif you choose the [expression] option, then you can type in the quasi-code (since I don't know the GUI~Editor's options, I like to cheat, choosing the [expression] option which lets me write in what I want the in it directly):\n\nrun as script -&gt; add new script -&gt; variables -&gt; 'set a variable or attribute' Script -&gt; [expression]: see below\n\nset variable player.strength [expression] player.strength + 5\n\nthe 'if' Script&#058;\n\nor, if you want to use 'if' (or whatever conditional) Script&#058;\n\nrun as script -&gt; add new script -&gt; scripts -&gt; 'set a variable or attribute' Script -&gt; [expression]: see below\n\nif [expression] player.strength &gt; monster.strength\n\n-&gt; then, -&gt; add new script -&gt; output -&gt; 'print a message' Script -&gt; print [message] The Player's strength is greater than the Monster's strength.\n\n// choose the [expression] if you want to use VARIABLES or VARIABLES+TEXT, as the [message] is for TEXT only\n\n------\n\nthe GUI~Editor's [increase~decrease to object's counter or whatever it is called] script option, only is able to do +1 or -1, which in code is, an example:\n\nplayer.strength = player.strength + 1\nplayer.strength = player.strength - 1\n\nso, if you want to do~use values other than 1, or different operators (like multiply or divide or modulus), then you're going to have to choose the [expression] script option, and type in the quasi-code yourself.",
      "EditableFormat": "bbcode",
      "HTML": "Programming uses ASSIGNMENT, which is different than math's EQUALS:<br/><br/>math:<br/><br/>(x = 10) = (10 = x)<br/><br/>programming~coding:<br/><br/>(x = 10) =/= (10 = x): ERROR<br/><br/>the ASSIGNMENT OPERATOR (=) means that you're putting~storing the value_or_expression on the right side of the '=', into the VARIABLE on the left side of the '=', conceptually algebraic substitution:<br/><br/>x = 10<br/>msg (&quot;The value of x is: &quot; + x)<br/>// outputs: The value of x is: 10<br/><br/>player.strength = 10<br/>msg (&quot;The Player's strength is: &quot; + player.strength)<br/>// outputs: The Player's strength is: 10<br/><br/>----------<br/><br/>so, the syntax (in code) for the basic computations is:<br/><br/>// this is my own way of representing the syntax generically (an Attribute):<br/><br/>Object_name.Attribute_name = Value_or_Expression<br/><br/>~and for a conditional, an example using an 'if' Script ~<br/><br/>if (Object_name.Attribute_name OPERATOR Value_or_Expression) { scripts }<br/><br/>----------<br/><br/>OPERATORS:<br/><br/>Assignment or Comparison: =<br/>// quest doesn't have the '==' (comparison operator), it can parse the '=' accurately, to whether to do an assignment or comparison<br/><br/>Addition or Concatenation (Concatenation: literally putting strings together, aka next to each other: &quot;55&quot; + &quot;55&quot; = &quot;5555&quot;): +<br/><br/>Subtraction: -<br/><br/>Multiplication: *<br/><br/>Division (getting the quotient, aka normal devision: 4/2 = 2): /<br/><br/>Modulus (devision, except you're getting~finding the REMAINDER, not the quotient: 5%2 = R1, 4%2 = R0, 5%3 = R2): %<br/><br/>Negation (Not) method A: not Object_name.Attribute_name = Value_or_Expression<br/>// or for Boolean Attributes, the shorthand is: not Object_name.Attribute_name<br/>~OR~<br/><br/>// if you're doing stuff directly in code (non-GUI~Editor), then you need to add the 'CDATA' tags to tell quest that the '&lt;,&gt;' are NOT html tags:<br/><br/>&lt;![CDATA[ scripts ]]&gt;<br/><br/>example:<br/><br/><pre><code>&lt;function name=&quot;student_grade_function&quot; parameters=&quot;student&quot;&gt;&lt;!&#91;CDATA&#91;<br/>  if (student&#46;score &gt; 90) {<br/>    student&#46;grade = &quot;A&quot;<br/>  } else if (student&#46;score &gt; 80) {<br/>    student&#46;grade = &quot;B&quot;<br/>  } else if (student&#46;score &gt; 70) {<br/>    student&#46;grade = &quot;C&quot;<br/>  } else if (student&#46;score &gt; 60) {<br/>    student&#46;grade = &quot;D&quot;<br/>  } else {<br/>    student&#46;grade = &quot;F&quot;<br/>  }<br/>&#93;&#93;&gt;&lt;/function&gt;</code></pre><br/><br/>so, this 'CDATA' tagging applies to all of these: again only if doing directly in code (if doing in the GUI~Editor, than it will automatically handle it for you, do NOT use the 'CDATA' tags if using the GUI~Editor):<br/><br/>Negation (Not) method B: Object_name.Attribute_name &lt;&gt; Value_or_Expression<br/><br/>Greater Than: &gt;<br/><br/>Lesser Than: &lt;<br/><br/>// the equals must be on the RIGHT side:<br/><br/>Greater Than or Equals To: &gt;=<br/><br/>Lesser Than or Equals To: &lt;=<br/><br/>etc etc etc (probably missing a few more operators... meh)<br/><br/>---------<br/><br/>Setting~Re-Setting~Alternating~Manipulating a VARIABLE's (usually using Attributes as your VARIABLES) Value:<br/><br/>player.strength = 0<br/>player.strength = 100<br/><br/>monster.strength = 25<br/>player.strength = monster.strength<br/>// player.strength = 25<br/><br/>monster.strength = 25<br/>monster.endurance = 75<br/>player.strength = monster.strength + monster.endurance<br/>// player.strength = 100<br/><br/>--------------<br/><br/>Addition (examples):<br/><br/>player.strength = player.strength + 5 // or whatever value you want<br/><br/>player.strength = player.strength + player.endurance + player.constitution<br/><br/>----------<br/><br/>*conceptual* example of how it works (using simple addition):<br/><br/>initial (old) value: player.strength = 0<br/><br/>player.strength (new) = player.strength (old:0) + 5<br/>player.strength (new) = (0) + 5<br/><br/>new value: player.strength = 5<br/><br/>old value: player.strength = 5<br/><br/>player.strength (new) = player.strength (old:5) + 5<br/>player.strength (new) = (5) + 5<br/><br/>new value: player.strength = 10<br/><br/>old value: player.strength = 10<br/><br/>player.strength (new) = player.strength (old:10) + 5<br/>player.strength (new) = (10) + 5<br/><br/>new value: player.strength = 15<br/><br/>etc etc etc<br/><br/>---------------------<br/><br/>Subtraction:<br/><br/>player.strength = player.strength - 5<br/><br/>-------------------<br/><br/>Multiplication:<br/><br/>player.strength = player.strength * 5<br/><br/>-----------------<br/><br/>Division:<br/><br/>player.strength = player.strength / 5<br/><br/>----------------<br/><br/>Modulus:<br/><br/>game.seconds = game.seconds % 60<br/><br/>// remember this gets the REMAINDER of a division operation: making it good for cyclic things, such as time and dates (like seconds, minutes, hours, months, days, seasons, etc etc etc)<br/>// 0,1,2,...,59,0,...,59,0,...,59, etc etc etc<br/>// (0%60 = 60: you don't want this, lol), 1%60 = 1, 2%60 = 2, 59/60 = 59, 60%60 = 0, 61%60 = 1, 119%60 = 59, 120%60 = 0, 121%60 = 1, etc etc etc<br/><br/>game.minutes = game.minutes % 60<br/><br/>game.civilian_hours = game.civilian_hours % 12 // 0-11 am, 0-11 pm, 0 (0 or 12): am to pm (noon) or pm to am (midnight)<br/><br/>game.military_hours = game.military_hours % 24 // 0-23, 0 (0 or 24): from old day to new day (midnight)<br/><br/>game.months = game.months % 12<br/><br/>game.days = game.days % 7<br/><br/>game.seasons = game.seasons % 4<br/><br/>-------------------------<br/><br/>IN THE GUI~EDITOR:<br/><br/>Attributes (script that creates, sets, re-sets, changes, alters, manipulates, and~or etc Attributes):<br/><br/>run as script -&gt; add new script -&gt; variables -&gt; 'set a variable or attribute' Script -&gt; [expression], or choose the right option for what you want to do<br/><br/>if you choose the [expression] option, then you can type in the quasi-code (since I don't know the GUI~Editor's options, I like to cheat, choosing the [expression] option which lets me write in what I want the in it directly):<br/><br/>run as script -&gt; add new script -&gt; variables -&gt; 'set a variable or attribute' Script -&gt; [expression]: see below<br/><br/>set variable player.strength [expression] player.strength + 5<br/><br/>the 'if' Script&#058;<br/><br/>or, if you want to use 'if' (or whatever conditional) Script&#058;<br/><br/>run as script -&gt; add new script -&gt; scripts -&gt; 'set a variable or attribute' Script -&gt; [expression]: see below<br/><br/>if [expression] player.strength &gt; monster.strength<br/><br/>-&gt; then, -&gt; add new script -&gt; output -&gt; 'print a message' Script -&gt; print [message] The Player's strength is greater than the Monster's strength.<br/><br/>// choose the [expression] if you want to use VARIABLES or VARIABLES+TEXT, as the [message] is for TEXT only<br/><br/>------<br/><br/>the GUI~Editor's [increase~decrease to object's counter or whatever it is called] script option, only is able to do +1 or -1, which in code is, an example:<br/><br/>player.strength = player.strength + 1<br/>player.strength = player.strength - 1<br/><br/>so, if you want to do~use values other than 1, or different operators (like multiply or divide or modulus), then you're going to have to choose the [expression] script option, and type in the quasi-code yourself.",
      "PostDate": "2016-01-20T19:16:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40836",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "So, I looked through things a bit, and if I understand what you want, I think I have a solution.\n\nIf you want to be able to give (say) an apple to anyone and have a script update a happiness attribute on the receiver, then do this:\n1) Go to the desired object that will be given, and on the &quot;Features&quot; tab, check &quot;Use/Give&quot;. A new tab will appear with Use/Give on it.\n2) Click on that Use/Give tab.\n3) Where it says &quot;Give this to (other object)&quot;, for the Action, choose &quot;Handle objects individually&quot;. \n4) An empty box will appear, but more importantly, a new choice will have appeared beneath that object list box that says &quot;Give to any other object&quot;.\n5) Choose &quot;Add New Script&quot;\n6) Scroll down in the script choices to the Variables section, and choose &quot;Set an object's attribute (named by an expression)&quot;. (Click OK or double click to add the script.)\n7) Change &quot;name&quot; after &quot;Set object&quot; to &quot;expression&quot;. In the type-in box after &quot;expression&quot;, enter &quot;object&quot; (don't include the quotes).\n8 ) Set attribute to &quot;happiness&quot; (include the quotes this time - you need it to be a string!)\n9) In &quot;Value&quot; enter &quot;object.happiness + this.happiness&quot; (don't include the quotes).\n\nThat will do it for that object. Now, if you want all your objects to have that script, then it's easiest just to add a type with that setup. Then inherit the objects you want from that type. That would take quite a few steps, so I'm just going to include the source for a sample game here. Basically, I just went into code view and copied the give-related fields to the new type.\n\n[code:36vqon1t]&lt;!--Saved by Quest 5&#46;6&#46;5783&#46;24153--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;giveitatest&quot;&gt;\n    &lt;gameid&gt;43772fda-865d-49c8-a57c-7586a032eaf1&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2016&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;object name=&quot;apple&quot;&gt;\n        &lt;inherit name=&quot;editor_object&quot; /&gt;\n        &lt;inherit name=&quot;GivesHappiness&quot; /&gt;\n\t    &lt;happiness type=&quot;int&quot;&gt;4&lt;/happiness&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;henry&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;happiness type=&quot;int&quot;&gt;0&lt;/happiness&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;type name=&quot;GivesHappiness&quot;&gt;\n    &lt;feature_usegive /&gt;\n    &lt;givetoanything type=&quot;script&quot;&gt;\n      set (object, &quot;happiness&quot;, object&#46;happiness + this&#46;happiness)\n    &lt;/givetoanything&gt;\n    &lt;giveto type=&quot;scriptdictionary&quot; /&gt;\n  &lt;/type&gt;\n&lt;/asl&gt;[/code:36vqon1t]\nThis has a type called &quot;GivesHappiness&quot;, which has the script to run when the object is given to anything. If you need to only allow some things to accept the object, then you'll need to include some code to reject being given to ineligible objects.\n\nAnd if you want the &quot;give&quot; to actually transfer the object, then you can add this line to the &quot;givetoanything&quot; script&#058;\n\n[code:36vqon1t]this&#46;parent = object[/code:36vqon1t]\nto make the target object the parent of what's being given.\n\nIf you run the game, you can type &quot;give apple to henry&quot;. Since I didn't check the option to bring up a menu, it won't give you a list of objects to give to if you don't specify a target.\n\nNote: the code the editor drops in for setting the variable is not what I would use personally, since I prefer to enter the script myself. Instead of:\n\n[code:36vqon1t]set (object, &quot;happiness&quot;, object&#46;happiness + this&#46;happiness)[/code:36vqon1t]\nyou could simply have:\n\n[code:36vqon1t]object&#46;happiness = object&#46;happiness + this&#46;happiness[/code:36vqon1t]",
      "EditableFormat": "bbcode",
      "HTML": "So, I looked through things a bit, and if I understand what you want, I think I have a solution.<br/><br/>If you want to be able to give (say) an apple to anyone and have a script update a happiness attribute on the receiver, then do this:<br/>1) Go to the desired object that will be given, and on the &quot;Features&quot; tab, check &quot;Use/Give&quot;. A new tab will appear with Use/Give on it.<br/>2) Click on that Use/Give tab.<br/>3) Where it says &quot;Give this to (other object)&quot;, for the Action, choose &quot;Handle objects individually&quot;. <br/>4) An empty box will appear, but more importantly, a new choice will have appeared beneath that object list box that says &quot;Give to any other object&quot;.<br/>5) Choose &quot;Add New Script&quot;<br/>6) Scroll down in the script choices to the Variables section, and choose &quot;Set an object's attribute (named by an expression)&quot;. (Click OK or double click to add the script.)<br/>7) Change &quot;name&quot; after &quot;Set object&quot; to &quot;expression&quot;. In the type-in box after &quot;expression&quot;, enter &quot;object&quot; (don't include the quotes).<br/>8 ) Set attribute to &quot;happiness&quot; (include the quotes this time - you need it to be a string!)<br/>9) In &quot;Value&quot; enter &quot;object.happiness + this.happiness&quot; (don't include the quotes).<br/><br/>That will do it for that object. Now, if you want all your objects to have that script, then it's easiest just to add a type with that setup. Then inherit the objects you want from that type. That would take quite a few steps, so I'm just going to include the source for a sample game here. Basically, I just went into code view and copied the give-related fields to the new type.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5783&#46;24153--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;giveitatest&quot;&gt;<br/>    &lt;gameid&gt;43772fda-865d-49c8-a57c-7586a032eaf1&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2016&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;object name=&quot;apple&quot;&gt;<br/>        &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>        &lt;inherit name=&quot;GivesHappiness&quot; /&gt;<br/>\t    &lt;happiness type=&quot;int&quot;&gt;4&lt;/happiness&gt;<br/>      &lt;/object&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;henry&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;happiness type=&quot;int&quot;&gt;0&lt;/happiness&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;type name=&quot;GivesHappiness&quot;&gt;<br/>    &lt;feature_usegive /&gt;<br/>    &lt;givetoanything type=&quot;script&quot;&gt;<br/>      set (object, &quot;happiness&quot;, object&#46;happiness + this&#46;happiness)<br/>    &lt;/givetoanything&gt;<br/>    &lt;giveto type=&quot;scriptdictionary&quot; /&gt;<br/>  &lt;/type&gt;<br/>&lt;/asl&gt;</code></pre><br/>This has a type called &quot;GivesHappiness&quot;, which has the script to run when the object is given to anything. If you need to only allow some things to accept the object, then you'll need to include some code to reject being given to ineligible objects.<br/><br/>And if you want the &quot;give&quot; to actually transfer the object, then you can add this line to the &quot;givetoanything&quot; script&#058;<br/><br/><pre><code>this&#46;parent = object</code></pre><br/>to make the target object the parent of what's being given.<br/><br/>If you run the game, you can type &quot;give apple to henry&quot;. Since I didn't check the option to bring up a menu, it won't give you a list of objects to give to if you don't specify a target.<br/><br/>Note: the code the editor drops in for setting the variable is not what I would use personally, since I prefer to enter the script myself. Instead of:<br/><br/><pre><code>set (object, &quot;happiness&quot;, object&#46;happiness + this&#46;happiness)</code></pre><br/>you could simply have:<br/><br/><pre><code>object&#46;happiness = object&#46;happiness + this&#46;happiness</code></pre><div><a href=\"/attachment/1470\">giveitatest.aslx</a></div>",
      "PostDate": "2016-01-20T21:47:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40903",
      "UserId": 0,
      "Username": "benn",
      "UserAvatar": null,
      "UserGravatar": "f273c5eba2047a83fc7777c177ee5570",
      "EditableText": "Sorry I'm only back to respond now. I downloaded that the other night jaynabonne, but only got the chance to implement it today. That's pretty much exactly what I was looking for &amp; I really appreciate you taking the time! And thank you everyone else as well. I'm sure I might have other questions moving forward but I appreciate the help on this &amp; didn't want to make it seem like I forgot about you. Thanks.",
      "EditableFormat": "bbcode",
      "HTML": "Sorry I'm only back to respond now. I downloaded that the other night jaynabonne, but only got the chance to implement it today. That's pretty much exactly what I was looking for &amp; I really appreciate you taking the time! And thank you everyone else as well. I'm sure I might have other questions moving forward but I appreciate the help on this &amp; didn't want to make it seem like I forgot about you. Thanks.",
      "PostDate": "2016-01-23T18:28:47+00:00",
      "LastEditDate": null
    }
  ]
}
