{
  "Topic": {
    "TopicId": "6263",
    "ForumId": "18",
    "Title": "Generating stuff",
    "LastUpdated": "2016-04-22T14:36:15+01:00",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "42445",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Occasionally you want to create items in the middle of a game, and you want some variety. Random treasure in an RPG is a good example (see [url=http&#58;//textadventures&#46;co&#46;uk/games/view/em15b32xd0o-y-ysvgrtcg/deeper:1cwn7owr]Deeper[/url:1cwn7owr] for instance). Here is a way of doing that. Just paste the code at the bottom into your own game (in code view, paste it just [i:1cwn7owr]before [/i:1cwn7owr]the last line, which will be &quot;&lt;/asl&gt;&quot;).\n\nThe way it works is you send a prototype and a location to the [i:1cwn7owr]ClonePrototype [/i:1cwn7owr]function, and a copy of the prototype will appear at the given location. Let us say we want lots of hats in the game. Create a prototype hat in a hidden room, and the you can place copies with this function.\n[code:1cwn7owr]ClonePrototype (hat, room)[/code:1cwn7owr]\n\nNo different to CloneObjectAndMove so far, but you can set up the prototype to give some variety to the cloned object. Firstly you can set attributes.\n\n\n[b:1cwn7owr]Random Integer Attributes[/b:1cwn7owr]\n\nIf your prototype has a string attribute that in the form &quot;r_int_&lt;attname&gt;&quot;, this will set an attribute, &quot;&lt;attname&gt;&quot;, as an integer. Set  &quot;r_int_&lt;attname&gt;&quot; to the range (no spaces). For example, for the hat, you might set this:\n[code:1cwn7owr]hat&#46;r_int_size = &quot;2-5&quot;[/code:1cwn7owr]\n\nThe first clone will get the name hat1. The system will then set hat1.size to a random number from 2 to 5.\n\n\n[b:1cwn7owr]Random String Attributes[/b:1cwn7owr]\n\nIf your prototype has a stringlist attribute that in the form &quot;r_str_&lt;attname&gt;&quot;, this will set an attribute, &quot;&lt;attname&gt;&quot;, as a string, randomly chosen from the string list.\n[code:1cwn7owr]hat&#46;r_str_colour = &quot;blue;green;red&quot;[/code:1cwn7owr]\n\nThe system will set hat1.colour to a randomly chosen colour.\n\n\n[b:1cwn7owr]Random Description[/b:1cwn7owr]\n\nSet the description (the &quot;look&quot; attribute) like this:\n[code:1cwn7owr]It was a &#91;big|small|floppy&#93; hat&#46;[/code:1cwn7owr]\n\n... and one of &quot;big&quot;, &quot;small&quot; and &quot;floppy&quot; will be selected at random. Why not use the text processor? Well the random option in the text processor makes a new selection each time the text is displayed. This will just do it when the item is created; thereafter it will stay the same for that specific hat.\n\nOr it can select from a list on any object; useful if you want the same set of options several times:\n[code:1cwn7owr]It was a &#91;big|small|floppy&#93; hat made of &#91;#game&#46;hatmaterials&#93;&#46;[/code:1cwn7owr]\n\nIn this case, hatmaterials is a string list on the game object. You can also include attributes of the object:\n[code:1cwn7owr]It was a &#91;big|small|floppy&#93; hat made of &#91;#game&#46;hatmaterials&#93;&#46; It was &#91;#colour&#93;, and size &#91;#size&#93;&#46;[/code:1cwn7owr]\n\nHere it is also including the string attribute colour and the integer size set up earlier.\n\n\n[b:1cwn7owr]Random Alias[/b:1cwn7owr]\n\nIt will do the same for the alias, so you could set that like this:\n[code:1cwn7owr]&#91;#colour&#93; hat[/code:1cwn7owr]\n\nNote the name and description will match, because both use the &quot;colour&quot; attribute set up previously.\n\n\n[b:1cwn7owr]Text Process Directives[/b:1cwn7owr]\n\nThere is a issue using the text processor with cloned items (whether made by this system or not) in that you do not know what the name in advance. For this, you can use #### as a stand-in for the object name. For instance:\n[code:1cwn7owr]A &#91;#colour&#93; hat&#46;{if ####&#46;size&gt;4&#58; It is too big for you&#46;}{if ####&#46;size&lt;5&#58; It is too small for you&#46;}[/code:1cwn7owr]\n\n\n[b:1cwn7owr]The Code[/b:1cwn7owr]\n\nThis is version 1.1 (23/Apr/16), and includes the text processor bit.\n\n[code:1cwn7owr]  &lt;function name=&quot;ClonePrototype&quot; parameters=&quot;obj, room&quot;&gt;\n    o = CloneObjectAndMove(obj, room)\n    foreach (att, GetAttributeNames(o, true)) {\n      if (StartsWith(att, &quot;r_&quot;)) {\n        s = GetString(o, att)\n        name = Mid(att, 7)\n        if (StartsWith(att, &quot;r_int_&quot;)) {\n          l = Split(s, &quot;-&quot;)\n          if (not ListCount(l) = 2) {\n            error (&quot;Failed to clone object, could not parse attribute &quot; + att + &quot; (&quot; + s + &quot;)&quot;)\n          }\n          val = GetRandomInt(ToInt(StringListItem(l, 0)), ToInt(StringListItem(l, 1)))\n        }\n        if (StartsWith(att, &quot;r_str_&quot;)) {\n          val = PickOneStr(GetAttribute(o, att))\n        }\n        // msg (&quot;setting; &quot; + name + &quot; with &quot; + val)\n        set (o, name, val)\n      }\n    }\n    if (HasString(o, &quot;look&quot;)) {\n      o&#46;look = Randomise(o, &quot;look&quot;)\n    }\n    if (HasString(o, &quot;alias&quot;)) {\n      o&#46;alias = Randomise(o, &quot;alias&quot;)\n    }\n  &lt;/function&gt;\n  &lt;function name=&quot;Randomise&quot; parameters=&quot;o, attname&quot; type=&quot;string&quot;&gt;\n    s = GetAttribute(o, attname)\n    mylist = Split (s, &quot;&#91;&quot;)\n    output = StringListItem (mylist, 0)\n    list remove (mylist, output)\n    foreach (s1, mylist) {\n      list1 = Split (s1, &quot;&#93;&quot;)\n      if (not ListCount (list1) = 2) {\n        error (&quot;Unable to parse (no matching &#93;)&#58; &quot; + s)\n      }\n      s2 = StringListItem (list1, 0)\n      if (StartsWith(s2, &quot;#&quot;)) {\n        s2 = Mid(s2, 2)\n        list2 = Split (s2, &quot;&#46;&quot;)\n        if (ListCount (list2) = 1) {\n          extra = GetAttribute(o, StringListItem(list2, 0))\n        }\n        else if (ListCount (list2) = 2) {\n          obj = GetObject(StringListItem(list2, 0))\n          if (obj = null) {\n            error (&quot;Unable to parse (could not find object in the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)\n          }\n          list3 = GetAttribute(obj, StringListItem(list2, 1))\n          if (not TypeOf(list3) = &quot;stringlist&quot;) {\n            error (&quot;Unable to parse (could not find list attribute in the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)\n          }\n          extra = PickOneStr(list3)\n        }\n        else {\n          error (&quot;Unable to parse (the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)\n        }\n      }\n      else {\n        list2 = Split (s2, &quot;|&quot;)\n        pos = GetRandomInt (0, ListCount (list2) - 1)\n        extra = StringListItem (list2, pos)\n      }\n      output = output + extra + StringListItem (list1, 1)\n    }\n    return (Replace(output, &quot;####&quot;, o&#46;name))\n  &lt;/function&gt;\n  &lt;function name=&quot;PickOneStr&quot; parameters=&quot;lst&quot; type=&quot;string&quot;&gt;\n    if (TypeOf(lst) = &quot;string&quot;) {\n      lst = Split(lst, &quot;|&quot;)\n    }\n    index = GetRandomInt(0, ListCount(lst) - 1)\n    return (StringListItem(lst, index))\n  &lt;/function&gt;[/code:1cwn7owr]",
      "EditableFormat": "bbcode",
      "HTML": "Occasionally you want to create items in the middle of a game, and you want some variety. Random treasure in an RPG is a good example (see <a href=\"http&#58;//textadventures&#46;co&#46;uk/games/view/em15b32xd0o-y-ysvgrtcg/deeper\" rel=\"nofollow\">Deeper</a> for instance). Here is a way of doing that. Just paste the code at the bottom into your own game (in code view, paste it just <span style=\"font-style:italic;\">before </span>the last line, which will be &quot;&lt;/asl&gt;&quot;).<br/><br/>The way it works is you send a prototype and a location to the <span style=\"font-style:italic;\">ClonePrototype </span>function, and a copy of the prototype will appear at the given location. Let us say we want lots of hats in the game. Create a prototype hat in a hidden room, and the you can place copies with this function.<br/><pre><code>ClonePrototype (hat, room)</code></pre><br/><br/>No different to CloneObjectAndMove so far, but you can set up the prototype to give some variety to the cloned object. Firstly you can set attributes.<br/><br/><br/><span style=\"font-weight:bold;\">Random Integer Attributes</span><br/><br/>If your prototype has a string attribute that in the form &quot;r_int_&lt;attname&gt;&quot;, this will set an attribute, &quot;&lt;attname&gt;&quot;, as an integer. Set  &quot;r_int_&lt;attname&gt;&quot; to the range (no spaces). For example, for the hat, you might set this:<br/><pre><code>hat&#46;r_int_size = &quot;2-5&quot;</code></pre><br/><br/>The first clone will get the name hat1. The system will then set hat1.size to a random number from 2 to 5.<br/><br/><br/><span style=\"font-weight:bold;\">Random String Attributes</span><br/><br/>If your prototype has a stringlist attribute that in the form &quot;r_str_&lt;attname&gt;&quot;, this will set an attribute, &quot;&lt;attname&gt;&quot;, as a string, randomly chosen from the string list.<br/><pre><code>hat&#46;r_str_colour = &quot;blue;green;red&quot;</code></pre><br/><br/>The system will set hat1.colour to a randomly chosen colour.<br/><br/><br/><span style=\"font-weight:bold;\">Random Description</span><br/><br/>Set the description (the &quot;look&quot; attribute) like this:<br/><pre><code>It was a &#91;big|small|floppy&#93; hat&#46;</code></pre><br/><br/>... and one of &quot;big&quot;, &quot;small&quot; and &quot;floppy&quot; will be selected at random. Why not use the text processor? Well the random option in the text processor makes a new selection each time the text is displayed. This will just do it when the item is created; thereafter it will stay the same for that specific hat.<br/><br/>Or it can select from a list on any object; useful if you want the same set of options several times:<br/><pre><code>It was a &#91;big|small|floppy&#93; hat made of &#91;#game&#46;hatmaterials&#93;&#46;</code></pre><br/><br/>In this case, hatmaterials is a string list on the game object. You can also include attributes of the object:<br/><pre><code>It was a &#91;big|small|floppy&#93; hat made of &#91;#game&#46;hatmaterials&#93;&#46; It was &#91;#colour&#93;, and size &#91;#size&#93;&#46;</code></pre><br/><br/>Here it is also including the string attribute colour and the integer size set up earlier.<br/><br/><br/><span style=\"font-weight:bold;\">Random Alias</span><br/><br/>It will do the same for the alias, so you could set that like this:<br/><pre><code>&#91;#colour&#93; hat</code></pre><br/><br/>Note the name and description will match, because both use the &quot;colour&quot; attribute set up previously.<br/><br/><br/><span style=\"font-weight:bold;\">Text Process Directives</span><br/><br/>There is a issue using the text processor with cloned items (whether made by this system or not) in that you do not know what the name in advance. For this, you can use #### as a stand-in for the object name. For instance:<br/><pre><code>A &#91;#colour&#93; hat&#46;{if ####&#46;size&gt;4&#58; It is too big for you&#46;}{if ####&#46;size&lt;5&#58; It is too small for you&#46;}</code></pre><br/><br/><br/><span style=\"font-weight:bold;\">The Code</span><br/><br/>This is version 1.1 (23/Apr/16), and includes the text processor bit.<br/><br/><pre><code>  &lt;function name=&quot;ClonePrototype&quot; parameters=&quot;obj, room&quot;&gt;<br/>    o = CloneObjectAndMove(obj, room)<br/>    foreach (att, GetAttributeNames(o, true)) {<br/>      if (StartsWith(att, &quot;r_&quot;)) {<br/>        s = GetString(o, att)<br/>        name = Mid(att, 7)<br/>        if (StartsWith(att, &quot;r_int_&quot;)) {<br/>          l = Split(s, &quot;-&quot;)<br/>          if (not ListCount(l) = 2) {<br/>            error (&quot;Failed to clone object, could not parse attribute &quot; + att + &quot; (&quot; + s + &quot;)&quot;)<br/>          }<br/>          val = GetRandomInt(ToInt(StringListItem(l, 0)), ToInt(StringListItem(l, 1)))<br/>        }<br/>        if (StartsWith(att, &quot;r_str_&quot;)) {<br/>          val = PickOneStr(GetAttribute(o, att))<br/>        }<br/>        // msg (&quot;setting; &quot; + name + &quot; with &quot; + val)<br/>        set (o, name, val)<br/>      }<br/>    }<br/>    if (HasString(o, &quot;look&quot;)) {<br/>      o&#46;look = Randomise(o, &quot;look&quot;)<br/>    }<br/>    if (HasString(o, &quot;alias&quot;)) {<br/>      o&#46;alias = Randomise(o, &quot;alias&quot;)<br/>    }<br/>  &lt;/function&gt;<br/>  &lt;function name=&quot;Randomise&quot; parameters=&quot;o, attname&quot; type=&quot;string&quot;&gt;<br/>    s = GetAttribute(o, attname)<br/>    mylist = Split (s, &quot;&#91;&quot;)<br/>    output = StringListItem (mylist, 0)<br/>    list remove (mylist, output)<br/>    foreach (s1, mylist) {<br/>      list1 = Split (s1, &quot;&#93;&quot;)<br/>      if (not ListCount (list1) = 2) {<br/>        error (&quot;Unable to parse (no matching &#93;)&#58; &quot; + s)<br/>      }<br/>      s2 = StringListItem (list1, 0)<br/>      if (StartsWith(s2, &quot;#&quot;)) {<br/>        s2 = Mid(s2, 2)<br/>        list2 = Split (s2, &quot;&#46;&quot;)<br/>        if (ListCount (list2) = 1) {<br/>          extra = GetAttribute(o, StringListItem(list2, 0))<br/>        }<br/>        else if (ListCount (list2) = 2) {<br/>          obj = GetObject(StringListItem(list2, 0))<br/>          if (obj = null) {<br/>            error (&quot;Unable to parse (could not find object in the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)<br/>          }<br/>          list3 = GetAttribute(obj, StringListItem(list2, 1))<br/>          if (not TypeOf(list3) = &quot;stringlist&quot;) {<br/>            error (&quot;Unable to parse (could not find list attribute in the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)<br/>          }<br/>          extra = PickOneStr(list3)<br/>        }<br/>        else {<br/>          error (&quot;Unable to parse (the {#&#46;&#46;&#46;} bit)&#58; &quot; + s2)<br/>        }<br/>      }<br/>      else {<br/>        list2 = Split (s2, &quot;|&quot;)<br/>        pos = GetRandomInt (0, ListCount (list2) - 1)<br/>        extra = StringListItem (list2, pos)<br/>      }<br/>      output = output + extra + StringListItem (list1, 1)<br/>    }<br/>    return (Replace(output, &quot;####&quot;, o&#46;name))<br/>  &lt;/function&gt;<br/>  &lt;function name=&quot;PickOneStr&quot; parameters=&quot;lst&quot; type=&quot;string&quot;&gt;<br/>    if (TypeOf(lst) = &quot;string&quot;) {<br/>      lst = Split(lst, &quot;|&quot;)<br/>    }<br/>    index = GetRandomInt(0, ListCount(lst) - 1)<br/>    return (StringListItem(lst, index))<br/>  &lt;/function&gt;</code></pre>",
      "PostDate": "2016-04-22T14:36:15+01:00",
      "LastEditDate": null
    }
  ]
}
