{
  "Topic": {
    "TopicId": "5whv3ppaiuqwafyw8hv8fw",
    "ForumId": "10",
    "Title": "Take All form Containers",
    "LastUpdated": "2021-01-12T18:51:23.1920703Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "de3b926b-5ef2-4a1b-b13d-7b973b6acb3a",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, I'm trying to set up a universal command \"loot\" for my game. Ideally, this would handle everything from searching bodies, opening containers, and then taking everything inside. My code correctly identifies dead monsters and containers, and I can even take everything I found on a dead enemy, but I'm getting hung up trying to take everything from a container. So, my command ```loot #object#``` has the following code.\r\n```\r\nif (HasAttribute (object, \"monstertype)) {\r\n    if (object.dead = true) {\r\n        HandleSingleCommand (\"search \" +object.alias)\r\n        HandleSingleCommand (\"take all\")\r\n    }\r\n    else {\r\n    msg (\"You cannot loot a living enemy!\")\r\n}\r\n}\r\nelse if (HasAttribute (object, \"feature_container\")) {\r\n    HandleSingleCommand (\"open \" +object.alias)\r\n    HandleSingleCommand (\"take all\")\r\n}\r\nelse {\r\nmsg (\"There's nothing here to loot.\")\r\n}\r\n}\r\n```\r\nEverything works fine until I get to the chest. The chest opens, but when I try to \"take all,\" it doesn't take anything. Just tells me the chest can't be lifted (as intended because I've excluded the chest from ALL.) My guess is that the solution has something to do with using a function like GetAllChildObjects (object), but I don't know how to run the function on the ```#object#```, and then how to call up the result to move it to the player's inventory. I've seen an old post about how \"take all\" should not include children of objects, but I'm hoping there's a way set up some code that would allow the player to type something like \"take all chest\" in order to get everything out of a chest container. If I could figure that out, I should be able to make my loot command work on anything. I feel like I'm on the right track and getting close, just missing some syntax to make it work.",
      "EditableFormat": "markdown",
      "HTML": "<p>So, I'm trying to set up a universal command \"loot\" for my game. Ideally, this would handle everything from searching bodies, opening containers, and then taking everything inside. My code correctly identifies dead monsters and containers, and I can even take everything I found on a dead enemy, but I'm getting hung up trying to take everything from a container. So, my command <code>loot #object#</code> has the following code.</p>\n<pre><code>if (HasAttribute (object, \"monstertype)) {\n    if (object.dead = true) {\n        HandleSingleCommand (\"search \" +object.alias)\n        HandleSingleCommand (\"take all\")\n    }\n    else {\n    msg (\"You cannot loot a living enemy!\")\n}\n}\nelse if (HasAttribute (object, \"feature_container\")) {\n    HandleSingleCommand (\"open \" +object.alias)\n    HandleSingleCommand (\"take all\")\n}\nelse {\nmsg (\"There's nothing here to loot.\")\n}\n}\n</code></pre>\n<p>Everything works fine until I get to the chest. The chest opens, but when I try to \"take all,\" it doesn't take anything. Just tells me the chest can't be lifted (as intended because I've excluded the chest from ALL.) My guess is that the solution has something to do with using a function like GetAllChildObjects (object), but I don't know how to run the function on the <code>#object#</code>, and then how to call up the result to move it to the player's inventory. I've seen an old post about how \"take all\" should not include children of objects, but I'm hoping there's a way set up some code that would allow the player to type something like \"take all chest\" in order to get everything out of a chest container. If I could figure that out, I should be able to make my loot command work on anything. I feel like I'm on the right track and getting close, just missing some syntax to make it work.</p>\n\n",
      "PostDate": "2021-01-12T18:51:23.1920703Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2007d6ab-e06d-4ed8-ba55-5002bb89cb08",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can't seem to edit my post... Says \"You can't post that here.\" when I try to update my post. I retyped this from my original code, so I missed the second \" after \"monstertype. It's there in my code, so no worries.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can't seem to edit my post... Says \"You can't post that here.\" when I try to update my post. I retyped this from my original code, so I missed the second \" after \"monstertype. It's there in my code, so no worries.</p>\n\n",
      "PostDate": "2021-01-12T18:54:21.2401636Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b5f22305-cf5f-48f5-bdf7-910f8efeebca",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's an odd way to go about it. Your loot command takes everything on the body or in the chest, but also everything in the room. Seems an odd way to do it. And if there's multiple monsters in the room with the same name, it'll ask the player which one they want to loot, and then ask them *again* for the search command. (Although this might not  be a problem if your game only has one monster per room).\r\n\r\nYou'll also find that if the player opens a chest and then tries to loot it, they will get a message about it already being open, which seems like an error.\r\n\r\nIt might make more sense to use the internal functions rather than running extra commands. Something like:\r\n\r\n```\r\n}\r\nelse if (HasAttribute (object, \"container\")) {\r\n  if (not GetBoolean (object, \"isopen\")) {\r\n    TryOpenClose (true, object)\r\n  }\r\n  if (GetBoolean (object, \"isopen\")) {\r\n    foreach (contents, GetDirectChildren (object)) {\r\n      if (not GetBoolean (contents, \"not_all\")) {\r\n        DoTake (contents, true)\r\n      }\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"There's nothing here to loot.\")\r\n}\r\n```\r\nThis only tries to open the container if it isn't already open. Then it checks for openness again, and if the container is now open (whether it was open before or not), it takes all the items from it.\r\n\r\nIt still seems odd that looting a body would also cause you to pick up any items you just dropped; but whether it's possible to fix that would depend on how \"search\" works. If it's the search command from Pixie's CombatLib, you could do something like:\r\n```\r\ncontents = GetDirectChildren (object)\r\nif (HasString (object, \"monstertype\")) {\r\n  if (GetBoolean (object, \"dead\")) {\r\n    do (object, \"search\")\r\n  }\r\n  else {\r\n    msg (\"You cannot loot a living enemy!\")\r\n  }\r\n}\r\nelse if (GetBoolean (object, \"container\")) {\r\n  if (not GetBoolean (object, \"isopen\")) {\r\n    TryOpenClose (true, object)\r\n  }\r\n}\r\nelse {\r\n  msg (\"That's not something I can loot.\")\r\n}\r\nforeach (item, ScopeReachableNotHeld()) {\r\n  if (ListContains (contents, item) and not GetBoolean (object, \"not_all\")) {\r\n    DoTake (item, true)\r\n  }\r\n}\r\n```\r\nIn this version, I'm searching the object if it's a dead monster, opening it if it's a closed container, then going over the list of reachable objects and looking if any of them *were* inside the object we were looting. In the case of a chest, those objects will be reachable now because it's open; in the case of the monster, the items will be on the floor so we can take them.\r\n\r\n(Also, I would advice checking the attribute `container`, not `feature_container`. `container` is true for containers; while `feature_container` is used to display the \"Container\" tab in the editor, so applies to lockable doors too. Also, attributes starting with `feature_` are only there for the editor, so are removed from a published game)",
      "EditableFormat": "markdown",
      "HTML": "<p>That's an odd way to go about it. Your loot command takes everything on the body or in the chest, but also everything in the room. Seems an odd way to do it. And if there's multiple monsters in the room with the same name, it'll ask the player which one they want to loot, and then ask them <em>again</em> for the search command. (Although this might not  be a problem if your game only has one monster per room).</p>\n<p>You'll also find that if the player opens a chest and then tries to loot it, they will get a message about it already being open, which seems like an error.</p>\n<p>It might make more sense to use the internal functions rather than running extra commands. Something like:</p>\n<pre><code>}\nelse if (HasAttribute (object, \"container\")) {\n  if (not GetBoolean (object, \"isopen\")) {\n    TryOpenClose (true, object)\n  }\n  if (GetBoolean (object, \"isopen\")) {\n    foreach (contents, GetDirectChildren (object)) {\n      if (not GetBoolean (contents, \"not_all\")) {\n        DoTake (contents, true)\n      }\n    }\n  }\n}\nelse {\n  msg (\"There's nothing here to loot.\")\n}\n</code></pre>\n<p>This only tries to open the container if it isn't already open. Then it checks for openness again, and if the container is now open (whether it was open before or not), it takes all the items from it.</p>\n<p>It still seems odd that looting a body would also cause you to pick up any items you just dropped; but whether it's possible to fix that would depend on how \"search\" works. If it's the search command from Pixie's CombatLib, you could do something like:</p>\n<pre><code>contents = GetDirectChildren (object)\nif (HasString (object, \"monstertype\")) {\n  if (GetBoolean (object, \"dead\")) {\n    do (object, \"search\")\n  }\n  else {\n    msg (\"You cannot loot a living enemy!\")\n  }\n}\nelse if (GetBoolean (object, \"container\")) {\n  if (not GetBoolean (object, \"isopen\")) {\n    TryOpenClose (true, object)\n  }\n}\nelse {\n  msg (\"That's not something I can loot.\")\n}\nforeach (item, ScopeReachableNotHeld()) {\n  if (ListContains (contents, item) and not GetBoolean (object, \"not_all\")) {\n    DoTake (item, true)\n  }\n}\n</code></pre>\n<p>In this version, I'm searching the object if it's a dead monster, opening it if it's a closed container, then going over the list of reachable objects and looking if any of them <em>were</em> inside the object we were looting. In the case of a chest, those objects will be reachable now because it's open; in the case of the monster, the items will be on the floor so we can take them.</p>\n<p>(Also, I would advice checking the attribute <code>container</code>, not <code>feature_container</code>. <code>container</code> is true for containers; while <code>feature_container</code> is used to display the \"Container\" tab in the editor, so applies to lockable doors too. Also, attributes starting with <code>feature_</code> are only there for the editor, so are removed from a published game)</p>\n\n",
      "PostDate": "2021-01-13T00:34:14.8140729Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "47f33bde-83dd-49df-bc7c-411706155411",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel for all your help. As you have correctly surmised I am integrating Pixie's Combat Library. So I tried plugging in that second bit of code, and the search function works perfectly. That TryOpenClose function is one that I'd never seen before, so that is very helpful. However, nothing seems to get taken object in question and placed into the player's inventory. There must be something amiss with that foreach loop, because reading through it, it seems like it should do exactly what I want it to do, but I'm not having any luck getting it to fire. It doesn't throw any sort of error. It just doesn't do anything. As always though, I really appreciate your help with this. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel for all your help. As you have correctly surmised I am integrating Pixie's Combat Library. So I tried plugging in that second bit of code, and the search function works perfectly. That TryOpenClose function is one that I'd never seen before, so that is very helpful. However, nothing seems to get taken object in question and placed into the player's inventory. There must be something amiss with that foreach loop, because reading through it, it seems like it should do exactly what I want it to do, but I'm not having any luck getting it to fire. It doesn't throw any sort of error. It just doesn't do anything. As always though, I really appreciate your help with this.</p>\n\n",
      "PostDate": "2021-01-13T14:46:11.7948772Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09219d44-3849-4aad-bc56-57bca503c277",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ugh… I made a silly mistake. I'm using `object` for the container you're looting, and `item` for each item in the contents. So <code>GetBoolean (<b>object</b>, \"not_all\")</code> in the last if statement should be <code style=\"color: green\">GetBoolean (<b>item</b>, \"not_all\")</code>.\r\n\r\nIf that doesn't fix it, then try adding a couple of lines at the end so you can see what it's doing:\r\n```\r\nmsg (\"Object contents: <ul><li>\"+ FormatList(contents, \"</li><li>\", \"</li><li>\", \"nothing\") + \"</li></ul>\")\r\nmsg (\"Available items: <ul><li>\"+ FormatList(ScopeReachableNotHeld(), \"</li><li>\", \"</li><li>\", \"nothing\") + \"</li></ul>\")\r\n```\r\nThat should display a list of objects that were inside whatever you looted, and a list of all objects which can be taken. If an item is on both lists and still isn't being taken, there might be a problem. If there's things that you want to be taken but are missing from one of the lists, we will know *which* list they're missing from, and that helps us to work out how the script needs to be changed.\r\n\r\n> That TryOpenClose function is one that I'd never seen before, so that is very helpful.\r\n\r\nIf you're doing something like this, it's often useful to look at the built in commands. For example, if you do `msg (open.script)` it will tell you that all the open command does is `TryOpenClose (true, object)`; similarly, the close command's script is as simple as `TryOpenClose (false, object)`.\r\nThe take command is a bit more complex because it can handle multiple objects, but all it really does is loop over them and try `DoTake` on each of them - the second argument tells it whether or not to print each item's alias before telling you whether or not it was taken.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ugh… I made a silly mistake. I'm using <code>object</code> for the container you're looting, and <code>item</code> for each item in the contents. So <code>GetBoolean (<b>object</b>, \"not_all\")</code> in the last if statement should be <code style=\"color: green\">GetBoolean (<b>item</b>, \"not_all\")</code>.</p>\n<p>If that doesn't fix it, then try adding a couple of lines at the end so you can see what it's doing:</p>\n<pre><code>msg (\"Object contents: &lt;ul&gt;&lt;li&gt;\"+ FormatList(contents, \"&lt;/li&gt;&lt;li&gt;\", \"&lt;/li&gt;&lt;li&gt;\", \"nothing\") + \"&lt;/li&gt;&lt;/ul&gt;\")\nmsg (\"Available items: &lt;ul&gt;&lt;li&gt;\"+ FormatList(ScopeReachableNotHeld(), \"&lt;/li&gt;&lt;li&gt;\", \"&lt;/li&gt;&lt;li&gt;\", \"nothing\") + \"&lt;/li&gt;&lt;/ul&gt;\")\n</code></pre>\n<p>That should display a list of objects that were inside whatever you looted, and a list of all objects which can be taken. If an item is on both lists and still isn't being taken, there might be a problem. If there's things that you want to be taken but are missing from one of the lists, we will know <em>which</em> list they're missing from, and that helps us to work out how the script needs to be changed.</p>\n<blockquote>\n<p>That TryOpenClose function is one that I'd never seen before, so that is very helpful.</p>\n</blockquote>\n<p>If you're doing something like this, it's often useful to look at the built in commands. For example, if you do <code>msg (open.script)</code> it will tell you that all the open command does is <code>TryOpenClose (true, object)</code>; similarly, the close command's script is as simple as <code>TryOpenClose (false, object)</code>.<br>\nThe take command is a bit more complex because it can handle multiple objects, but all it really does is loop over them and try <code>DoTake</code> on each of them - the second argument tells it whether or not to print each item's alias before telling you whether or not it was taken.</p>\n\n",
      "PostDate": "2021-01-13T17:46:04.7161165Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c9199e9-e482-4d0d-a632-b91b085a7e70",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you so much. Great info as always. That modified code is working exactly as intended now.\r\n\r\nI've found the list of internal functions included with Quest, and I'm gradually working through understanding them all, but there are quite a few.  Also, foreach seems quite powerful, and get boolean and no get boolean are very efficient, so I've started using them with more frequency. Thanks again.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you so much. Great info as always. That modified code is working exactly as intended now.</p>\n<p>I've found the list of internal functions included with Quest, and I'm gradually working through understanding them all, but there are quite a few.  Also, foreach seems quite powerful, and get boolean and no get boolean are very efficient, so I've started using them with more frequency. Thanks again.</p>\n\n",
      "PostDate": "2021-01-19T16:13:32.6509682Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
