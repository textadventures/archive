{
  "Topic": {
    "TopicId": "3901",
    "ForumId": "10",
    "Title": "how do i use variables in arrays - please advise a beginner",
    "LastUpdated": "2013-08-31T07:56:53+01:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "26121",
      "UserId": 0,
      "Username": "privateer",
      "UserAvatar": null,
      "UserGravatar": "31fc3fff3ae1be07ecddb38ce98b83c4",
      "EditableText": "Using arrays\n\nI’ve searched the forum for this, but don’t seem to quite be able to find the answer. I’m new to using variables in quest, but have the VERY basics, i think.\n\nX = 1 (for a local variable)\nObject.x = 1 (for a global variable)\n\nSo far so good!?  <!-- s:roll: --><img src=\"{SMILIES_PATH}/icon_rolleyes.gif\" alt=\":roll:\" title=\"Rolling Eyes\" /><!-- s:roll: --> \n\nNow, what i’d like to be able to do is use variables in arrays. In my old BASIC days it used to be x(1) = 5. And then I seem to remember you could have arrays with multiple dimensions like X(1,1,1) =5\n\nLooking at some answers in the forum it LOOKED as though it would be simple and along the same lines. I’ve seen examples given that looked familiar: object.x[1]\n\nBut that doesn’t work for me. I get an error message ‘no template named ‘1’’. And I can’t find where I might name a template. Nor do I really know what a template is, although I’m guessing it is something like the equivalent of ‘Dimensionalising’ variables in BASIC: Dim x(10) which defined the parameters of the array – in this case saying there will be 10 values from x(1) to x(10)?)\n\nI’d be very grateful for any help, especially if it’s given in VERY user-friendly language! Also, I’m more comfortable using the GUI rather than going directly into code – if that’s possible for this. I am, as they say, a n00b.\n\nMany thanks!",
      "EditableFormat": "bbcode",
      "HTML": "Using arrays<br/><br/>I’ve searched the forum for this, but don’t seem to quite be able to find the answer. I’m new to using variables in quest, but have the VERY basics, i think.<br/><br/>X = 1 (for a local variable)<br/>Object.x = 1 (for a global variable)<br/><br/>So far so good!?  <!-- s:roll: --><img src=\"{SMILIES_PATH}/icon_rolleyes.gif\" alt=\":roll:\" title=\"Rolling Eyes\" /><!-- s:roll: --> <br/><br/>Now, what i’d like to be able to do is use variables in arrays. In my old BASIC days it used to be x(1) = 5. And then I seem to remember you could have arrays with multiple dimensions like X(1,1,1) =5<br/><br/>Looking at some answers in the forum it LOOKED as though it would be simple and along the same lines. I’ve seen examples given that looked familiar: object.x[1]<br/><br/>But that doesn’t work for me. I get an error message ‘no template named ‘1’’. And I can’t find where I might name a template. Nor do I really know what a template is, although I’m guessing it is something like the equivalent of ‘Dimensionalising’ variables in BASIC: Dim x(10) which defined the parameters of the array – in this case saying there will be 10 values from x(1) to x(10)?)<br/><br/>I’d be very grateful for any help, especially if it’s given in VERY user-friendly language! Also, I’m more comfortable using the GUI rather than going directly into code – if that’s possible for this. I am, as they say, a n00b.<br/><br/>Many thanks!",
      "PostDate": "2013-08-30T19:35:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26123",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "First, be sure you update to Quest 5.4.1, as I think the template issue when using [] got fixed. (Though this might be another case.)\n\nSecond, Quest doesn't support arrays as such. There are some &quot;hacky&quot; solutions, if you really need them, but the one to use depends on your needs.\n\nQuest only supports lists, dictionaries and objects as compound structures. Let's take each one.\n\n1) Lists are indexed by integers, so they're similar to arrays when reading. If you have a list named &quot;arr&quot; with 5 entries, then you can use either ListItem(arr, 2) or arr[2] (if you have 5.4.1) to access the third element (lists are 0-based). But lists can only be built sequentially. You don't have random setting - there's no way to change the value of the third element once it's been set. So if you have a read-only array that you set up once sequentially, then you can use a list and access the items via index.\n\nTo create: NewList()\nTo delete: &lt;automatically cleaned up when no longer referenced&gt;\nIndex type: int\nTo set: ListAdd. List items must be added sequentially or in static lists.\nTo get: ListItem or []\n\n2) Dictionaries have the advantage that you can read and assign to them randomly (assuming you delete the old value first), but the indices are strings only. That's not too bad as you can always convert an int to a string via ToString. Also, since the string can be anything as long as its unique, you can also do multidimensional via creative index construction. For example, if you have a dictionary called &quot;arr&quot;, you can use DictionaryItem(arr, &quot;1,1,1&quot;) or arr[&quot;1,1,1&quot;] (if you have Quest 5.4.1) to access that element. You need to build the strings from numbers, but you could easily wrap that up in functions to hide the int-to-string index conversion. I did that in that silly little Breakout demo I wrote long ago.\n\nTo create: NewDictionary()\nTo delete: &lt;automatically cleaned up when no longer referenced&gt;\nIndex type: string\nTo set: DictionaryAdd (possibly after DIctionaryRemove of old value).\nTo get: DictionaryItem or []\n\n3) Objects are like dictionaries in that you can assign to them randomly and in that the indices are strings. Objects have the advantage that you don't have to remove an existing value before you set a new one. The disadvantages are that objects are trickier to dynamically allocate since they must be uniquely named, they must be explicitly freed, and you can't use the [] notation - you have to use get and set.\n\nTo create: create (possibly with GetUniqueElementName)\nTo delete: destroy\nIndex type: string\nTo set: set\nTo get: get\n\nI should probably put together a simple array library. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> You wouldn't be able to use the [] notation, but it could hide the index conversions inside.\n\nI don't know if that helps, but that's my take on it.",
      "EditableFormat": "bbcode",
      "HTML": "First, be sure you update to Quest 5.4.1, as I think the template issue when using [] got fixed. (Though this might be another case.)<br/><br/>Second, Quest doesn't support arrays as such. There are some &quot;hacky&quot; solutions, if you really need them, but the one to use depends on your needs.<br/><br/>Quest only supports lists, dictionaries and objects as compound structures. Let's take each one.<br/><br/>1) Lists are indexed by integers, so they're similar to arrays when reading. If you have a list named &quot;arr&quot; with 5 entries, then you can use either ListItem(arr, 2) or arr[2] (if you have 5.4.1) to access the third element (lists are 0-based). But lists can only be built sequentially. You don't have random setting - there's no way to change the value of the third element once it's been set. So if you have a read-only array that you set up once sequentially, then you can use a list and access the items via index.<br/><br/>To create: NewList()<br/>To delete: &lt;automatically cleaned up when no longer referenced&gt;<br/>Index type: int<br/>To set: ListAdd. List items must be added sequentially or in static lists.<br/>To get: ListItem or []<br/><br/>2) Dictionaries have the advantage that you can read and assign to them randomly (assuming you delete the old value first), but the indices are strings only. That's not too bad as you can always convert an int to a string via ToString. Also, since the string can be anything as long as its unique, you can also do multidimensional via creative index construction. For example, if you have a dictionary called &quot;arr&quot;, you can use DictionaryItem(arr, &quot;1,1,1&quot;) or arr[&quot;1,1,1&quot;] (if you have Quest 5.4.1) to access that element. You need to build the strings from numbers, but you could easily wrap that up in functions to hide the int-to-string index conversion. I did that in that silly little Breakout demo I wrote long ago.<br/><br/>To create: NewDictionary()<br/>To delete: &lt;automatically cleaned up when no longer referenced&gt;<br/>Index type: string<br/>To set: DictionaryAdd (possibly after DIctionaryRemove of old value).<br/>To get: DictionaryItem or []<br/><br/>3) Objects are like dictionaries in that you can assign to them randomly and in that the indices are strings. Objects have the advantage that you don't have to remove an existing value before you set a new one. The disadvantages are that objects are trickier to dynamically allocate since they must be uniquely named, they must be explicitly freed, and you can't use the [] notation - you have to use get and set.<br/><br/>To create: create (possibly with GetUniqueElementName)<br/>To delete: destroy<br/>Index type: string<br/>To set: set<br/>To get: get<br/><br/>I should probably put together a simple array library. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> You wouldn't be able to use the [] notation, but it could hide the index conversions inside.<br/><br/>I don't know if that helps, but that's my take on it.",
      "PostDate": "2013-08-31T00:12:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26125",
      "UserId": 0,
      "Username": "privateer",
      "UserAvatar": null,
      "UserGravatar": "31fc3fff3ae1be07ecddb38ce98b83c4",
      "EditableText": "Thanks Jaynabonne!\n\nI will have to work slowly through what you've told me as I haven't played with lists, dictionaries, or object values yet (it's amazing what you can do with a ridiculously complex flag plexus! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->). At least I know I was barking up the wrong tree by trying to find a way of making variables multi-dimensional.\n\nVery useful stuff, cheers!",
      "EditableFormat": "bbcode",
      "HTML": "Thanks Jaynabonne!<br/><br/>I will have to work slowly through what you've told me as I haven't played with lists, dictionaries, or object values yet (it's amazing what you can do with a ridiculously complex flag plexus! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->). At least I know I was barking up the wrong tree by trying to find a way of making variables multi-dimensional.<br/><br/>Very useful stuff, cheers!",
      "PostDate": "2013-08-31T07:56:53+01:00",
      "LastEditDate": null
    }
  ]
}
