{
  "Topic": {
    "TopicId": "grijmzfrl0ahxzaepegrbq",
    "ForumId": "10",
    "Title": "Tying Integers to Strings?",
    "LastUpdated": "2020-01-21T19:41:10.6665596Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "90f03a95-f0ff-4132-9ba8-ca5893954510",
      "UserId": 320598,
      "Username": "JonouchiKotaro",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey there! So I've been trying to deal with this particular problem for about 2 hours now and I was wondering if anyone here had any insight.\r\n\r\nWhat I am trying to accomplish is to tie integer values to strings for use in Status Attributes.\r\n\r\nHow I've been trying to get it done is by initializing an integer attribute called \"colorvalue\" and a string attribute called \"colorname\". I have then set up a Status Attribute with the \"colorname\" key that reads \"Color = !\"\r\n\r\nI feel like I have set this up properly, but I am not sure how to proceed from here. What I want to do is make it so \"if colorvalue = 0, then colorname = \"Black\" \", \"if colorvalue = 1, then colorname = \"Red\" \" and so on.\r\n\r\nI have attempted this with conditional branches and lists, but I have no idea what I'm doing and how to accomplish what I ultimately want to do. Any help would be appreciated as this is a pretty big roadblock for me right now. XD",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey there! So I've been trying to deal with this particular problem for about 2 hours now and I was wondering if anyone here had any insight.</p>\n<p>What I am trying to accomplish is to tie integer values to strings for use in Status Attributes.</p>\n<p>How I've been trying to get it done is by initializing an integer attribute called \"colorvalue\" and a string attribute called \"colorname\". I have then set up a Status Attribute with the \"colorname\" key that reads \"Color = !\"</p>\n<p>I feel like I have set this up properly, but I am not sure how to proceed from here. What I want to do is make it so \"if colorvalue = 0, then colorname = \"Black\" \", \"if colorvalue = 1, then colorname = \"Red\" \" and so on.</p>\n<p>I have attempted this with conditional branches and lists, but I have no idea what I'm doing and how to accomplish what I ultimately want to do. Any help would be appreciated as this is a pretty big roadblock for me right now. XD</p>\n\n",
      "PostDate": "2020-01-21T19:41:10.6665596Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bb75330c-a855-4b9d-b96f-12d42c539cd3",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What you want is a changescript.\r\n\r\nSelect an object. Go to its attributes. Give it the TestVar attribute, and then select that. See that boxed-plus sign, next to the + and - that let you add and delete attributes? Click it to create a changescript for TestVar.\r\n\r\nThe new changescript will fire whenever TestVar changes. So if you have a TestVarString attribute, you can have the changescript be:\r\n```\r\nswitch (this.TestVar){\r\ncase(1){\r\nthis.TestVarString=\"Black\"\r\n}\r\ncase(2){\r\nthis.TestVarString=\"Red\"\r\n}\r\netc\r\n}\r\n```\r\nHope this helps!",
      "EditableFormat": "markdown",
      "HTML": "<p>What you want is a changescript.</p>\n<p>Select an object. Go to its attributes. Give it the TestVar attribute, and then select that. See that boxed-plus sign, next to the + and - that let you add and delete attributes? Click it to create a changescript for TestVar.</p>\n<p>The new changescript will fire whenever TestVar changes. So if you have a TestVarString attribute, you can have the changescript be:</p>\n<pre><code>switch (this.TestVar){\ncase(1){\nthis.TestVarString=\"Black\"\n}\ncase(2){\nthis.TestVarString=\"Red\"\n}\netc\n}\n</code></pre>\n<p>Hope this helps!</p>\n\n",
      "PostDate": "2020-01-21T20:27:02.0172595Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "752459e0-9617-441f-bd44-be6c93cf2557",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A changescript is the best way to tie two attributes together.\r\n\r\nSwitch/case is a pretty efficient way to select a value based on a number. But it might work out easier to use a list of colour names to look up.\r\n\r\nIf you have an attribute `colornameslist` which is a stringlist, then your `changedcolorvalue` script would look like:\r\n```\r\nthis.colorname = ListItem (this.colornameslist, this.colorvalue)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>A changescript is the best way to tie two attributes together.</p>\n<p>Switch/case is a pretty efficient way to select a value based on a number. But it might work out easier to use a list of colour names to look up.</p>\n<p>If you have an attribute <code>colornameslist</code> which is a stringlist, then your <code>changedcolorvalue</code> script would look like:</p>\n<pre><code>this.colorname = ListItem (this.colornameslist, this.colorvalue)\n</code></pre>\n\n",
      "PostDate": "2020-01-21T20:53:37.3651959Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0f75dc5c-e857-435e-8996-27dce940a689",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you only got a few integer-color options, then using an 'if-else if' or 'switch-case' Scripts/Functions are fine, but if you got a lot of integer-color options, then you'll want to use a list or a dictionary\r\n\r\nhere's an example of using a list and a dictionary:\r\n\r\na list's 'keys' are hidden and automatic, the first item's 'key' is the index number of '0', and each following item's 'key' is contiguous (0, 1, 2, 3, etc). The list's index number 'keys' are Strings (NOT Integers), but I believe that quest is able to automatically handle/do conversions between Integers and Strings for you, hopefully\r\n\r\na dictionary's 'keys' are also Strings, even if you use numbers, they're Strings, NOT Integers\r\n\r\n```\r\n<game name=\"NAME_OF_GAME\">\r\n\r\n  <attr name=\"colorvalue\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"colorname\" type=\"string\">unknown</attr>\r\n\r\n  <attr name=\"changedcolorvalue\" type=\"script\">\r\n\r\n    // using a String List:\r\n\r\n    this.colorname = StringListItem (this.colorlist, this.colorvalue) // if quest doesn't automatically convert the integer to string, then use this code line instead: this.colorname = StringListItem (this.colorlist, ToString (this.colorvalue))\r\n\r\n    // or, using a String Dictionary:\r\n\r\n    this.colorname = StringDictionaryItem (this.colordictionary, this.colorvalue) // if quest doesn't automatically convert the integer to string, then use this code line instead: this.colorname = StringDictionaryItem (this.colordictionary, ToString (this.colorvalue))\r\n\r\n  </attr>\r\n\r\n  <colorlist type=\"stringlist\">\r\n\r\n    <value>red</value>\r\n    <value>blue</value>\r\n    <value>yellow</value>\r\n    <value>green</value>\r\n    <value>purple</value>\r\n    <value>orange</value>\r\n    <value>black</value>\r\n    <value>white</value>\r\n    <value>grey</value>\r\n    <value>brown</value>\r\n    <value>pink</value>\r\n\r\n  </colorlist>\r\n\r\n<colordictionary type=\"stringlist\">\r\n\r\n    <item>\r\n      <key>0</value>\r\n      <value>red</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>1</value>\r\n      <value>blue</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>2</value>\r\n      <value>yellow</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>3</value>\r\n      <value>green</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>4</value>\r\n      <value>purple</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>5</value>\r\n      <value>orange</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>6</value>\r\n      <value>black</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>7</value>\r\n      <value>white</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>8</value>\r\n      <value>grey</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>9</value>\r\n      <value>brown</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>10</value>\r\n      <value>pink</value>\r\n    </item>\r\n\r\n  </colordictionary>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>colorname</key>\r\n      <value>Color: !</value>\r\n    </item>\r\n\r\n  </statusattributes>\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    // testing for using a list:\r\n\r\n    this.colorvalue = GetRandomInt (0, ListCount (this.colorlist) - 1)\r\n\r\n    // or, testing for using a dictionary:\r\n\r\n    // (this example requires that your lowest 'key' be '0' and each other 'key' must be contiguous (0, 1, 2, 3, etc etc etc)\r\n\r\n    this.colorvalue = GetRandomInt (0, DictionaryCount (this.colordictionary) - 1)\r\n\r\n  </attr>\r\n\r\n</game>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>if you only got a few integer-color options, then using an 'if-else if' or 'switch-case' Scripts/Functions are fine, but if you got a lot of integer-color options, then you'll want to use a list or a dictionary</p>\n<p>here's an example of using a list and a dictionary:</p>\n<p>a list's 'keys' are hidden and automatic, the first item's 'key' is the index number of '0', and each following item's 'key' is contiguous (0, 1, 2, 3, etc). The list's index number 'keys' are Strings (NOT Integers), but I believe that quest is able to automatically handle/do conversions between Integers and Strings for you, hopefully</p>\n<p>a dictionary's 'keys' are also Strings, even if you use numbers, they're Strings, NOT Integers</p>\n<pre><code>&lt;game name=\"NAME_OF_GAME\"&gt;\n\n  &lt;attr name=\"colorvalue\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"colorname\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n  &lt;attr name=\"changedcolorvalue\" type=\"script\"&gt;\n\n    // using a String List:\n\n    this.colorname = StringListItem (this.colorlist, this.colorvalue) // if quest doesn't automatically convert the integer to string, then use this code line instead: this.colorname = StringListItem (this.colorlist, ToString (this.colorvalue))\n\n    // or, using a String Dictionary:\n\n    this.colorname = StringDictionaryItem (this.colordictionary, this.colorvalue) // if quest doesn't automatically convert the integer to string, then use this code line instead: this.colorname = StringDictionaryItem (this.colordictionary, ToString (this.colorvalue))\n\n  &lt;/attr&gt;\n\n  &lt;colorlist type=\"stringlist\"&gt;\n\n    &lt;value&gt;red&lt;/value&gt;\n    &lt;value&gt;blue&lt;/value&gt;\n    &lt;value&gt;yellow&lt;/value&gt;\n    &lt;value&gt;green&lt;/value&gt;\n    &lt;value&gt;purple&lt;/value&gt;\n    &lt;value&gt;orange&lt;/value&gt;\n    &lt;value&gt;black&lt;/value&gt;\n    &lt;value&gt;white&lt;/value&gt;\n    &lt;value&gt;grey&lt;/value&gt;\n    &lt;value&gt;brown&lt;/value&gt;\n    &lt;value&gt;pink&lt;/value&gt;\n\n  &lt;/colorlist&gt;\n\n&lt;colordictionary type=\"stringlist\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;0&lt;/value&gt;\n      &lt;value&gt;red&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;1&lt;/value&gt;\n      &lt;value&gt;blue&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;2&lt;/value&gt;\n      &lt;value&gt;yellow&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;3&lt;/value&gt;\n      &lt;value&gt;green&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;4&lt;/value&gt;\n      &lt;value&gt;purple&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;5&lt;/value&gt;\n      &lt;value&gt;orange&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;6&lt;/value&gt;\n      &lt;value&gt;black&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;7&lt;/value&gt;\n      &lt;value&gt;white&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;8&lt;/value&gt;\n      &lt;value&gt;grey&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;9&lt;/value&gt;\n      &lt;value&gt;brown&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;10&lt;/value&gt;\n      &lt;value&gt;pink&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/colordictionary&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;colorname&lt;/key&gt;\n      &lt;value&gt;Color: !&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/statusattributes&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    // testing for using a list:\n\n    this.colorvalue = GetRandomInt (0, ListCount (this.colorlist) - 1)\n\n    // or, testing for using a dictionary:\n\n    // (this example requires that your lowest 'key' be '0' and each other 'key' must be contiguous (0, 1, 2, 3, etc etc etc)\n\n    this.colorvalue = GetRandomInt (0, DictionaryCount (this.colordictionary) - 1)\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n</code></pre>\n\n",
      "PostDate": "2020-01-22T08:16:53.3669043Z",
      "LastEditDate": "2020-01-22T08:22:40.8766441Z",
      "link": null
    },
    {
      "PostId": "1bb12bf4-8148-4d1a-aa85-317ff70f369b",
      "UserId": 320598,
      "Username": "JonouchiKotaro",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Super appreciate all the help, folks! I'll go ahead and give these a try when it comes time to work on my game again! Thank you so much!",
      "EditableFormat": "markdown",
      "HTML": "<p>Super appreciate all the help, folks! I'll go ahead and give these a try when it comes time to work on my game again! Thank you so much!</p>\n\n",
      "PostDate": "2020-01-22T13:33:18.5642539Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
