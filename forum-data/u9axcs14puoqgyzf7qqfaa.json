{
  "Topic": {
    "TopicId": "u9axcs14puoqgyzf7qqfaa",
    "ForumId": "10",
    "Title": "Jumping within a function",
    "LastUpdated": "2017-06-27T04:51:01.0697474Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3fcdc862-df8c-40b0-aaee-8626fd53a4bd",
      "UserId": 313553,
      "Username": "UnclearImage86",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I played Alien: Isolation, and it made me want to make my own Alien fan game. I've been using Quest for about 3 days now, and got alot figured out. But I'm having an issue within a function I made 'usePCAirlock' (It's the computer terminal right inside the ship by the Airlock you start in) \r\n\r\nI'm trying to set it up like Alien: Isolation, you use a computer terminal and it pops up a couple options. When you chose an option more options pop up. Generally it's emails/ story related stuff. Which I want to happen, but I can't figure out how to open (choose) a directory, then open an email/ message within it. Then let you go back (or up in the IF/THEN) one choice, and choose again.\r\n\r\nHere's my code so far, but I'm using the GUI as much as I can. \r\n\r\nfunction name=\"usePCAirlock\"\r\n    ClearScreen\r\n    TextFX_Typewriter (\"Wayland-Yutani Corporation main airlock terminal\", 15)\r\n    msg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")\r\n    get input {\r\n      if (result = \"1\") {\r\n        msg (\"Computer Logs\")\r\n        msg (\"1: one 2: two 3: BACK\")\r\n        get input {\r\n          if (result = \"1\") {\r\n            msg (\"one\")\r\n            wait {\r\n            }\r\n          }\r\n          else if (result = \"2\") {\r\n            msg (\"two\")\r\n            wait {\r\n            }\r\n          }\r\n          else if (result = \"3\") {\r\n            usePCAirlock\r\n          }\r\n        }\r\n      }\r\n      else if (result = \"2\") {\r\n      }\r\n      else if (resuilt = \"3\") {\r\n      }\r\n    }\r\n  /function\r\n\r\nShort of making more functions for each option (which seems really dumb) I don't know how to label and goto within a script/ function/ or IFTHEN\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I played Alien: Isolation, and it made me want to make my own Alien fan game. I've been using Quest for about 3 days now, and got alot figured out. But I'm having an issue within a function I made 'usePCAirlock' (It's the computer terminal right inside the ship by the Airlock you start in)</p>\n<p>I'm trying to set it up like Alien: Isolation, you use a computer terminal and it pops up a couple options. When you chose an option more options pop up. Generally it's emails/ story related stuff. Which I want to happen, but I can't figure out how to open (choose) a directory, then open an email/ message within it. Then let you go back (or up in the IF/THEN) one choice, and choose again.</p>\n<p>Here's my code so far, but I'm using the GUI as much as I can.</p>\n<p>function name=\"usePCAirlock\"<br>\nClearScreen<br>\nTextFX_Typewriter (\"Wayland-Yutani Corporation main airlock terminal\", 15)<br>\nmsg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")<br>\nget input {<br>\nif (result = \"1\") {<br>\nmsg (\"Computer Logs\")<br>\nmsg (\"1: one 2: two 3: BACK\")<br>\nget input {<br>\nif (result = \"1\") {<br>\nmsg (\"one\")<br>\nwait {<br>\n}<br>\n}<br>\nelse if (result = \"2\") {<br>\nmsg (\"two\")<br>\nwait {<br>\n}<br>\n}<br>\nelse if (result = \"3\") {<br>\nusePCAirlock<br>\n}<br>\n}<br>\n}<br>\nelse if (result = \"2\") {<br>\n}<br>\nelse if (resuilt = \"3\") {<br>\n}<br>\n}<br>\n/function</p>\n<p>Short of making more functions for each option (which seems really dumb) I don't know how to label and goto within a script/ function/ or IFTHEN</p>\n\n",
      "PostDate": "2017-06-27T04:51:01.0697474Z",
      "LastEditDate": "2017-06-27T04:53:39.0857716Z",
      "link": null
    },
    {
      "PostId": "7333ab09-2dbc-41e3-9a24-67af6968d643",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Maybe, just guessing here and maybe some could explain this better....\r\nBuild a \"PC command tree\"\r\n(main menu: player hits \"1\")\r\nPC.command=\"1\"\r\ncall function PC(result)    result=1\r\nmsg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")\r\n(player hits \"1\")\r\nPC.command=\"11\"\r\ncall function  PC(\"11)\r\nmsg(\"Computer: Logs\")\r\n(player hits \"3\")\r\nPC.command=\"1\"\r\nThe function PC uses the (11) to find what to display:\r\nSwitch (\"11\") ... Use the variable that is passed\r\n(Don't recall the switch structure right now, but...)\r\n=1 then msg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")\r\n=2 then msg (\"  Maintenance Controls: Menu....... \")\r\n=3 then msg(\" You are done with the terminal.\")\r\n=11 then msg(\"Computer logs: One\")\r\n=12 then msg(\"Computer Logs: Two\")\r\n=21 then msg(\"Maintenance: Item One\")\r\n=22 then msg(\"Maintenance: Item Two\")\r\n\r\nand so on...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Maybe, just guessing here and maybe some could explain this better....<br>\nBuild a \"PC command tree\"<br>\n(main menu: player hits \"1\")<br>\nPC.command=\"1\"<br>\ncall function PC(result)    result=1<br>\nmsg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")<br>\n(player hits \"1\")<br>\nPC.command=\"11\"<br>\ncall function  PC(\"11)<br>\nmsg(\"Computer: Logs\")<br>\n(player hits \"3\")<br>\nPC.command=\"1\"<br>\nThe function PC uses the (11) to find what to display:<br>\nSwitch (\"11\") ... Use the variable that is passed<br>\n(Don't recall the switch structure right now, but...)<br>\n=1 then msg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")<br>\n=2 then msg (\"  Maintenance Controls: Menu....... \")<br>\n=3 then msg(\" You are done with the terminal.\")<br>\n=11 then msg(\"Computer logs: One\")<br>\n=12 then msg(\"Computer Logs: Two\")<br>\n=21 then msg(\"Maintenance: Item One\")<br>\n=22 then msg(\"Maintenance: Item Two\")</p>\n<p>and so on...</p>\n\n",
      "PostDate": "2017-06-27T05:25:30.1330738Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "478839fa-46b3-434a-a6e9-6238cc87fcf0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "unfortunately, I think (Pixie or other good programmers will probably correct me) there's only two/three ways to do it:\r\n\r\n1. each layer is its own Function/Script_Attribute(+Delegate optionally), letting you 'call/do/invoke/rundelegate/RunDelegateFunction' back-to/goto the desired layer, which you already thought-of/realized to do\r\n\r\n2. use recursive Function/Script_Attribute(+Delegate optionally)\r\n\r\n3. also maybe you can use the 'while' Function too...\r\n\r\n-----------\r\n\r\nto 'call' (do/activate/re-do/re-activate/call/re-call/use/re-use) a Function, is very easy in code:\r\n\r\nNAME_OF_FUNCTION // if no Parameters\r\nNAME_OF_FUNCTION (ARGUMENT/S) // if got Parameters\r\nVARIABLE = NAME_OF_FUNCTION // if got a return type (The Function returns a value)\r\n\r\nin the GUI/Editor:\r\n\r\nadd new script -> 'scripts' section/category -> 'call a function' Script -> Name box: NAME_OF_FUNCTION, (if got Parameters) add parameters/arguments box -> set up the arguments (inputs)\r\n\r\n---------\r\n\r\n'do/re-do/invoke/re-invoke/use/re-use/activate/re-active/call/re-call' Script Attributes, in code:\r\n\r\ninvoke (NAME_OF_OBJECT.NAME_OF_SCRIPT_ATTRIBUTE)\r\ninvoke (NAME_OF_OBJECT.NAME_OF_SCRIPT_ATTRIBUTE, NAME_OF_OBJECT.NAME_OF_DICTIONARY_ATTRIBUTE) // the Dictionary Attribute's 'keys' and 'values' will be used as Parameters (Variables) and Arguments (inputs/values)\r\n\r\n// 'do' is more powerful/useful than 'invoke' as you can concatenate with it, unlike 'invoke'\r\n \r\ndo (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_ATTRIBUTE\")\r\ndo (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_ATTRIBUTE\", \"NAME_OF_OBJECT.NAME_OF_DICTIONARY_ATTRIBUTE\") // the Dictionary Attribute's 'keys' and 'values' will be used as Parameters (Variables) and Arguments (inputs/values)\r\n\r\n----------\r\n\r\nScript Attributes + Delegates:\r\n\r\nDelegates enable your Script Attributes to have/use Parameters and/or a return type (enables them to act like Functions).\r\n\r\nhttp://docs.textadventures.co.uk/quest/types/using_delegates.html\r\nhttp://docs.textadventures.co.uk/quest/elements/delegate.html\r\nhttp://docs.textadventures.co.uk/quest//functions/rundelegatefunction.html\r\nhttp://docs.textadventures.co.uk/quest//scripts/rundelegate.html\r\nhttp://docs.textadventures.co.uk/quest/functions/hasdelegateimplementation.html\r\n\r\n-------\r\n\r\nlet me know if you need help with any of these things",
      "EditableFormat": "markdown",
      "HTML": "<p>unfortunately, I think (Pixie or other good programmers will probably correct me) there's only two/three ways to do it:</p>\n<ol>\n<li>\n<p>each layer is its own Function/Script_Attribute(+Delegate optionally), letting you 'call/do/invoke/rundelegate/RunDelegateFunction' back-to/goto the desired layer, which you already thought-of/realized to do</p>\n</li>\n<li>\n<p>use recursive Function/Script_Attribute(+Delegate optionally)</p>\n</li>\n<li>\n<p>also maybe you can use the 'while' Function too...</p>\n</li>\n</ol>\n<hr>\n<p>to 'call' (do/activate/re-do/re-activate/call/re-call/use/re-use) a Function, is very easy in code:</p>\n<p>NAME_OF_FUNCTION // if no Parameters<br>\nNAME_OF_FUNCTION (ARGUMENT/S) // if got Parameters<br>\nVARIABLE = NAME_OF_FUNCTION // if got a return type (The Function returns a value)</p>\n<p>in the GUI/Editor:</p>\n<p>add new script -&gt; 'scripts' section/category -&gt; 'call a function' Script -&gt; Name box: NAME_OF_FUNCTION, (if got Parameters) add parameters/arguments box -&gt; set up the arguments (inputs)</p>\n<hr>\n<p>'do/re-do/invoke/re-invoke/use/re-use/activate/re-active/call/re-call' Script Attributes, in code:</p>\n<p>invoke (NAME_OF_OBJECT.NAME_OF_SCRIPT_ATTRIBUTE)<br>\ninvoke (NAME_OF_OBJECT.NAME_OF_SCRIPT_ATTRIBUTE, NAME_OF_OBJECT.NAME_OF_DICTIONARY_ATTRIBUTE) // the Dictionary Attribute's 'keys' and 'values' will be used as Parameters (Variables) and Arguments (inputs/values)</p>\n<p>// 'do' is more powerful/useful than 'invoke' as you can concatenate with it, unlike 'invoke'</p>\n<p>do (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_ATTRIBUTE\")<br>\ndo (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_ATTRIBUTE\", \"NAME_OF_OBJECT.NAME_OF_DICTIONARY_ATTRIBUTE\") // the Dictionary Attribute's 'keys' and 'values' will be used as Parameters (Variables) and Arguments (inputs/values)</p>\n<hr>\n<p>Script Attributes + Delegates:</p>\n<p>Delegates enable your Script Attributes to have/use Parameters and/or a return type (enables them to act like Functions).</p>\n<p>http://docs.textadventures.co.uk/quest/types/using_delegates.html<br>\nhttp://docs.textadventures.co.uk/quest/elements/delegate.html<br>\nhttp://docs.textadventures.co.uk/quest//functions/rundelegatefunction.html<br>\nhttp://docs.textadventures.co.uk/quest//scripts/rundelegate.html<br>\nhttp://docs.textadventures.co.uk/quest/functions/hasdelegateimplementation.html</p>\n<hr>\n<p>let me know if you need help with any of these things</p>\n\n",
      "PostDate": "2017-06-27T05:39:43.0523093Z",
      "LastEditDate": "2017-06-27T05:59:05.804603Z",
      "link": null
    },
    {
      "PostId": "34833491-70ed-48de-a60e-8c52411fb3aa",
      "UserId": 313553,
      "Username": "UnclearImage86",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So am I re-using the UsePC function and passing \"1\" as the parameter to have it automatically jump to the function as if the played chose '1'??\r\n\r\nso\r\nUsePCAirlock(\"1\")\r\n?\r\n\r\nHow do I pass an input as a parameter, or modify the function to recognize that order.\r\n\r\nEDIT: I appreciate you linking all that, I'm trying to read it. I think I need to pass an argument to the call function but I can only add parameters. ",
      "EditableFormat": "markdown",
      "HTML": "<p>So am I re-using the UsePC function and passing \"1\" as the parameter to have it automatically jump to the function as if the played chose '1'??</p>\n<p>so<br>\nUsePCAirlock(\"1\")<br>\n?</p>\n<p>How do I pass an input as a parameter, or modify the function to recognize that order.</p>\n<p>EDIT: I appreciate you linking all that, I'm trying to read it. I think I need to pass an argument to the call function but I can only add parameters.</p>\n\n",
      "PostDate": "2017-06-27T06:10:05.7006372Z",
      "LastEditDate": "2017-06-27T06:13:50.6965115Z",
      "link": null
    },
    {
      "PostId": "bf170969-5a42-4223-980f-d46e4067d84c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this might be of some help for you:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game\r\n\r\n-----\r\n\r\nin the GUI/Editor:\r\n\r\nwhen you do the 'call function' Script:\r\n\r\nadd new script -> 'scripts' section/category -> 'call function' Script -> (see below)\r\n\r\nName text box: NAME_OF_FUNCTIOn // this is the Function you're going to activate/run/execute (as first time or a subsequent time)\r\n\r\nAdd (Parameter/Argument: regardless of what it says here) big box: these are your inputs/values (your Arguments, as this is a 'function call', the USE of the Function, and not creating/defining the Function, which would involve adding/naming the Parameters and/or specifying the return type, if you want/need them)\r\n\r\n------\r\n\r\nhere's an example for you:\r\n\r\n(used some creativity, probably not the best design, but it works... except it'll probably require you to still type in inputs... for the 'get input' Functions... grr... almost works... well, I can re-design it so tht it does work... it'll be a bit more messy... though, meh)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    usePCAirlock (\"0\", \"0\")\r\n  </attr>\r\n</game>\r\n\r\n// how Parameters (local Variables used by the Function's scripting) and Arguments (inputs/values that are stored into the Function's Parameters) work:\r\n// usePCAirlock (\"ARGUMENT_POSITION_1\", \"ARGUMENT_POSITION_2\")\r\n// <function name=\"usePCAirlock\" parameters=\"PARAMETER_POSITION_1,PARAMETER_POSITION_1\">\r\n// PARAMETER_POSITION_1: string_parameter_1 // for this example of mine\r\n// PARAMETER_POSITION_2: string_parameter_2 // for this example of mine\r\n// the Arguments (inputs/values) are matched up to their position matching Parameters (Variables)\r\n// so, effectively, this is what is going on:\r\n// PARAMETER_POSITION_1: string_parameter_1 <=== ARGUMENT_POSITION_1: YOUR_STRING_INPUT/VALUE_1\r\n// PARAMETER_POSITION_2: string_parameter_2 <=== ARGUMENT_POSITION_2: YOUR_STRING_INPUT/VALUE_2\r\n\r\n<function name=\"usePCAirlock\" parameters=\"string_parameter_1,string_parameter_2\">\r\n  ClearScreen\r\n  TextFX_Typewriter (\"Wayland-Yutani Corporation main airlock terminal\", 15)\r\n  msg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")\r\n  get input {\r\n    ClearScreen\r\n    if (string_parameter_1 = \"1\" or result = \"1\") {\r\n      msg (\"Computer Logs\")\r\n      msg (\"1: one 2: two 3: BACK\")\r\n      get input {\r\n        ClearScreen\r\n        if (string_parameter_2 = \"1\" or result = \"1\") {\r\n          msg (\"one\")\r\n          wait {\r\n          }\r\n        } else if (string_parameter_2 = \"2\" or result = \"2\") {\r\n          msg (\"two\")\r\n          wait {\r\n          }\r\n        } else if (result = \"3\") {\r\n          usePCAirlock (\"1\", \"0\")\r\n        }\r\n      }\r\n    } else if (string_parameter_1 = \"2\" or result = \"2\") {\r\n      msg (\"Maintenance Controls\")\r\n      msg (\"1: one 2: two 3: BACK\")\r\n      get input {\r\n        ClearScreen\r\n        if (string_parameter_2 = \"1\" or result = \"1\") {\r\n          msg (\"one\")\r\n          wait {\r\n          }\r\n        } else if (string_parameter_2 = \"2\" or result = \"2\") {\r\n          msg (\"two\")\r\n          wait {\r\n          }\r\n        } else if (result = \"3\") {\r\n          usePCAirlock (\"2\", \"0\")\r\n        }\r\n      }\r\n    } else if (result = \"3\") {\r\n      msg (\"You turn off the computer and step away from it\")\r\n    }\r\n  }\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>this might be of some help for you:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game</p>\n<hr>\n<p>in the GUI/Editor:</p>\n<p>when you do the 'call function' Script:</p>\n<p>add new script -&gt; 'scripts' section/category -&gt; 'call function' Script -&gt; (see below)</p>\n<p>Name text box: NAME_OF_FUNCTIOn // this is the Function you're going to activate/run/execute (as first time or a subsequent time)</p>\n<p>Add (Parameter/Argument: regardless of what it says here) big box: these are your inputs/values (your Arguments, as this is a 'function call', the USE of the Function, and not creating/defining the Function, which would involve adding/naming the Parameters and/or specifying the return type, if you want/need them)</p>\n<hr>\n<p>here's an example for you:</p>\n<p>(used some creativity, probably not the best design, but it works... except it'll probably require you to still type in inputs... for the 'get input' Functions... grr... almost works... well, I can re-design it so tht it does work... it'll be a bit more messy... though, meh)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    usePCAirlock (\"0\", \"0\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n// how Parameters (local Variables used by the Function's scripting) and Arguments (inputs/values that are stored into the Function's Parameters) work:\n// usePCAirlock (\"ARGUMENT_POSITION_1\", \"ARGUMENT_POSITION_2\")\n// &lt;function name=\"usePCAirlock\" parameters=\"PARAMETER_POSITION_1,PARAMETER_POSITION_1\"&gt;\n// PARAMETER_POSITION_1: string_parameter_1 // for this example of mine\n// PARAMETER_POSITION_2: string_parameter_2 // for this example of mine\n// the Arguments (inputs/values) are matched up to their position matching Parameters (Variables)\n// so, effectively, this is what is going on:\n// PARAMETER_POSITION_1: string_parameter_1 &lt;=== ARGUMENT_POSITION_1: YOUR_STRING_INPUT/VALUE_1\n// PARAMETER_POSITION_2: string_parameter_2 &lt;=== ARGUMENT_POSITION_2: YOUR_STRING_INPUT/VALUE_2\n\n&lt;function name=\"usePCAirlock\" parameters=\"string_parameter_1,string_parameter_2\"&gt;\n  ClearScreen\n  TextFX_Typewriter (\"Wayland-Yutani Corporation main airlock terminal\", 15)\n  msg (\"1: Computer Logs | 2: Maintenance Controls | 3: Step away from PC\")\n  get input {\n    ClearScreen\n    if (string_parameter_1 = \"1\" or result = \"1\") {\n      msg (\"Computer Logs\")\n      msg (\"1: one 2: two 3: BACK\")\n      get input {\n        ClearScreen\n        if (string_parameter_2 = \"1\" or result = \"1\") {\n          msg (\"one\")\n          wait {\n          }\n        } else if (string_parameter_2 = \"2\" or result = \"2\") {\n          msg (\"two\")\n          wait {\n          }\n        } else if (result = \"3\") {\n          usePCAirlock (\"1\", \"0\")\n        }\n      }\n    } else if (string_parameter_1 = \"2\" or result = \"2\") {\n      msg (\"Maintenance Controls\")\n      msg (\"1: one 2: two 3: BACK\")\n      get input {\n        ClearScreen\n        if (string_parameter_2 = \"1\" or result = \"1\") {\n          msg (\"one\")\n          wait {\n          }\n        } else if (string_parameter_2 = \"2\" or result = \"2\") {\n          msg (\"two\")\n          wait {\n          }\n        } else if (result = \"3\") {\n          usePCAirlock (\"2\", \"0\")\n        }\n      }\n    } else if (result = \"3\") {\n      msg (\"You turn off the computer and step away from it\")\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-06-27T10:42:55.2075498Z",
      "LastEditDate": "2017-06-27T11:09:20.012011Z",
      "link": null
    },
    {
      "PostId": "07b16419-e01a-4525-8f33-ad2f62c64044",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure if I got the gist, but wouldn't this be best for a Print Menu option? Seems its messages with trying to get various inputs, but there is a built in function for menus. I don't use it much.\r\n\r\nEdit: Ah, actually,  nevermind. I get it now.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure if I got the gist, but wouldn't this be best for a Print Menu option? Seems its messages with trying to get various inputs, but there is a built in function for menus. I don't use it much.</p>\n<p>Edit: Ah, actually,  nevermind. I get it now.</p>\n\n",
      "PostDate": "2017-06-27T14:53:00.2558872Z",
      "LastEditDate": "2017-06-27T15:09:19.0954413Z",
      "link": null
    },
    {
      "PostId": "ff8dc2c3-d38f-4d68-a23d-d6c04d411b5f",
      "UserId": 313553,
      "Username": "UnclearImage86",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I appreciate all the answers, it's a lot of information I can learn and study. While what you suggested may be the most efficient way of doing it I decided to jump functions.\r\n\r\nI have two functions \r\n(usePCAirlock is now Airlock_PC because I can't make folders and I want my assets to be organized.)\r\n\r\nAirlock_PC shows the \r\nIF/THEN\r\n1: Communication logs (call function Airlock_PC1)\r\n2 Maintenance Controls (currently does nothing, will unlock a door)\r\n3: Step away from computer (clear screen ; ShowRoomDecription)\r\nOther / Wrong inputs : \"::ERROR::\" return to Airlock_PC\r\n\r\nAirlock_PC1 shows\r\nIF/THEN\r\n1: Statement from management about new Security Protocols\r\n2: Message from this terminal to maintenance about lights and people freaking out\r\nOther / Wrong inputs : \"::ERROR::\" return to Airlock_PC1\r\n\r\nWhile this may not be the most efficient way of handling this, it's what I got to work. Stacking all my scripts in a function, then calling that function. I used the GUI as much as possible, again this is my first week with Quest :D.\r\n\r\nSo thank you everyone for your help, and especially Hegemonkhan.\r\n\r\nEDIT: Oh yeah, after you open one of the communications you can read it and after a keypress you return to Airlock_PC1 which is why I needed the functions in the first place. So you don't start at the main menu, but instead can read one communication, and then immediately access another.",
      "EditableFormat": "markdown",
      "HTML": "<p>I appreciate all the answers, it's a lot of information I can learn and study. While what you suggested may be the most efficient way of doing it I decided to jump functions.</p>\n<p>I have two functions<br>\n(usePCAirlock is now Airlock_PC because I can't make folders and I want my assets to be organized.)</p>\n<p>Airlock_PC shows the<br>\nIF/THEN<br>\n1: Communication logs (call function Airlock_PC1)<br>\n2 Maintenance Controls (currently does nothing, will unlock a door)<br>\n3: Step away from computer (clear screen ; ShowRoomDecription)<br>\nOther / Wrong inputs : \"::ERROR::\" return to Airlock_PC</p>\n<p>Airlock_PC1 shows<br>\nIF/THEN<br>\n1: Statement from management about new Security Protocols<br>\n2: Message from this terminal to maintenance about lights and people freaking out<br>\nOther / Wrong inputs : \"::ERROR::\" return to Airlock_PC1</p>\n<p>While this may not be the most efficient way of handling this, it's what I got to work. Stacking all my scripts in a function, then calling that function. I used the GUI as much as possible, again this is my first week with Quest :D.</p>\n<p>So thank you everyone for your help, and especially Hegemonkhan.</p>\n<p>EDIT: Oh yeah, after you open one of the communications you can read it and after a keypress you return to Airlock_PC1 which is why I needed the functions in the first place. So you don't start at the main menu, but instead can read one communication, and then immediately access another.</p>\n\n",
      "PostDate": "2017-06-27T17:31:57.4997748Z",
      "LastEditDate": "2017-06-27T17:34:11.8944498Z",
      "link": null
    },
    {
      "PostId": "77ccaba8-725e-4179-b517-09346509cbad",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I would personally do, is make an actual object for the terminal (if you didn't already) and have each menu/screen a script attribute of the terminal itself. An attribute can be a script on it's own. So you have an attribute for each \"screen\" the player can wind up in, then you simply call the scripts as they're needed.\r\n\r\nie: \"main menu\" - shows options and such, like e-mails\r\n\"e-mails\" - list e-mails player can open. when an e-mail is closed, call this same script, resulting in sending the player back to the e-mail menu when they close the mail they're reading.\r\n\r\nWhen the player is done, just do nothing, the whole thing ends and they go back to normal game stuff.\r\nWhen you want to send them back to the previous menu, simply call the function for the previous menu.\r\n\r\n\r\nWhile this can result in a lot of functions, it keeps them relatively organized, as they're kept within the object itself. As a bonus you can use standardized terms, such as \"main menu\" and since it's specific to the object you won't end up pulling a menu for a different terminal.",
      "EditableFormat": "markdown",
      "HTML": "<p>What I would personally do, is make an actual object for the terminal (if you didn't already) and have each menu/screen a script attribute of the terminal itself. An attribute can be a script on it's own. So you have an attribute for each \"screen\" the player can wind up in, then you simply call the scripts as they're needed.</p>\n<p>ie: \"main menu\" - shows options and such, like e-mails<br>\n\"e-mails\" - list e-mails player can open. when an e-mail is closed, call this same script, resulting in sending the player back to the e-mail menu when they close the mail they're reading.</p>\n<p>When the player is done, just do nothing, the whole thing ends and they go back to normal game stuff.<br>\nWhen you want to send them back to the previous menu, simply call the function for the previous menu.</p>\n<p>While this can result in a lot of functions, it keeps them relatively organized, as they're kept within the object itself. As a bonus you can use standardized terms, such as \"main menu\" and since it's specific to the object you won't end up pulling a menu for a different terminal.</p>\n\n",
      "PostDate": "2017-06-28T03:24:52.3310216Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f19c7517-9e48-43e9-a47b-bc8c0c3e4871",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the only problem with that is they can still do menus/looping within the Script Attributes (no different if you were using Functions), which still leaves the fundamental design problem, though encapsulating it to an Object (+Script Attributes+Delegates: if you need to pass inputs/arguments/parameters to the Script Attribute and/or have them return a value, specifying the return type), is most definately better design, especially for the us humans and our sanity/organization. Maybe though there's less overhead between an Objects' Script Attributes and/vs Functions.\r\n\r\n---------\r\n\r\nI think for new people, that Functions are a easier to understand, than using Objects and Script Attributes (and Delegates), as Functions are more standalone, and it's hard for people to wrap their brain around more abstract OOP/OOD/encapsulation and interconnectedness of designing.",
      "EditableFormat": "markdown",
      "HTML": "<p>the only problem with that is they can still do menus/looping within the Script Attributes (no different if you were using Functions), which still leaves the fundamental design problem, though encapsulating it to an Object (+Script Attributes+Delegates: if you need to pass inputs/arguments/parameters to the Script Attribute and/or have them return a value, specifying the return type), is most definately better design, especially for the us humans and our sanity/organization. Maybe though there's less overhead between an Objects' Script Attributes and/vs Functions.</p>\n<hr>\n<p>I think for new people, that Functions are a easier to understand, than using Objects and Script Attributes (and Delegates), as Functions are more standalone, and it's hard for people to wrap their brain around more abstract OOP/OOD/encapsulation and interconnectedness of designing.</p>\n\n",
      "PostDate": "2017-06-28T04:24:56.7166334Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "44a2e592-f779-451b-acee-20d58ebb3187",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The way I would do it is have each menu screen as a room (make sure the player cannot get to to these rooms). The menu for a room would be a list of exits, which takes you to the next screen/room, with its own list of exits.\r\nhttps://github.com/ThePix/quest/wiki/Modelling-a-computer-system\r\n\r\nAlso, I would strongly advise using `ShowMenu`, rather than `GetInput`.\r\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The way I would do it is have each menu screen as a room (make sure the player cannot get to to these rooms). The menu for a room would be a list of exits, which takes you to the next screen/room, with its own list of exits.<br>\nhttps://github.com/ThePix/quest/wiki/Modelling-a-computer-system</p>\n<p>Also, I would strongly advise using <code>ShowMenu</code>, rather than <code>GetInput</code>.<br>\nhttp://docs.textadventures.co.uk/quest/functions/showmenu.html</p>\n\n",
      "PostDate": "2017-06-28T07:41:56.118678Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "10c78c5e-e282-4c2d-8464-cfe034e0f4eb",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I like that idea!!!\r\nJust like the player moves room to room...\r\nYou would do the same in the terminal...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I like that idea!!!<br>\nJust like the player moves room to room...<br>\nYou would do the same in the terminal...</p>\n\n",
      "PostDate": "2017-06-28T08:50:56.9723914Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7b5d6a24-a174-46a6-9357-c5da85e20b3d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "never thought of using room/exit movement instead of scripting (Functions/Script Attributes) ... could make these things easier to do\r\n\r\nvery creative/ingenius Pixie!",
      "EditableFormat": "markdown",
      "HTML": "<p>never thought of using room/exit movement instead of scripting (Functions/Script Attributes) ... could make these things easier to do</p>\n<p>very creative/ingenius Pixie!</p>\n\n",
      "PostDate": "2017-06-28T13:44:22.5020627Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
