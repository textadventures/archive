{
  "Topic": {
    "TopicId": "6268",
    "ForumId": "10",
    "Title": "Backpack Idea....[SOLVED]",
    "LastUpdated": "2016-04-26T07:22:18+01:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "42488",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "Alright, so originally I had a problem with a &quot;backpack&quot; object, but it seems like it still counts things as children on the player even when the parent (backpack) is carrying the items, so I decided to just nix the whole premise because it's just causing way too many problems. I did come up with a new idea though. \n\nI was thinking of creating an &quot;Attribute&quot; on the player.object called &quot;weight&quot; and making it an integer of 2. Then equipping the backpack item increases that by like 13 making it a total of 15. Then I could have each object the player can carry -1 weight and when it hits &quot;1&quot; have a changedweight attribute that states their inventory is full. Then I could use other containers later on and have them add to the carry weight. \n\nDoes this make sense or sound doable?",
      "EditableFormat": "bbcode",
      "HTML": "Alright, so originally I had a problem with a &quot;backpack&quot; object, but it seems like it still counts things as children on the player even when the parent (backpack) is carrying the items, so I decided to just nix the whole premise because it's just causing way too many problems. I did come up with a new idea though. <br/><br/>I was thinking of creating an &quot;Attribute&quot; on the player.object called &quot;weight&quot; and making it an integer of 2. Then equipping the backpack item increases that by like 13 making it a total of 15. Then I could have each object the player can carry -1 weight and when it hits &quot;1&quot; have a changedweight attribute that states their inventory is full. Then I could use other containers later on and have them add to the carry weight. <br/><br/>Does this make sense or sound doable?",
      "PostDate": "2016-04-26T01:54:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42489",
      "UserId": 0,
      "Username": "Zephyrus Scary",
      "UserAvatar": null,
      "UserGravatar": "6aaf5e562bea9747f0a8a177a78be6c3",
      "EditableText": "There's already an attribute for that called &quot;maxobjects&quot;. You must activate it in the game &gt; Features tab, called &quot;Inventory limits&quot;. Then, you can simply add to the backpack &gt; Inventory tab, add a script to both &quot;after taking&quot; and &quot;after dropping&quot;: &quot;Set variable player.maxobjects = player.maxobjects + 13&quot; or &quot;= player.maxobjects - 13&quot; (remember to add the minus to the drop action, or your players will be able to get unlimited inventory space!). However, this means the player won't be able to pick up the backpack if the inventory is already full. Better, IMHO, is the volume and maxvolume attributes, as you can set every object's volume to any integer, even zero (so that the object is always takeable, even when maxobjects would say otherwise), so it can be picked up, even when the player has an otherwise full inventory, AND you have much better control over what the player can carry and when, whereas the maxobjects attribute always counts every object as &quot;1&quot;, no matter what. Only downside is that you have to remember to set every takeable object's volume, as it is initially set at zero...",
      "EditableFormat": "bbcode",
      "HTML": "There's already an attribute for that called &quot;maxobjects&quot;. You must activate it in the game &gt; Features tab, called &quot;Inventory limits&quot;. Then, you can simply add to the backpack &gt; Inventory tab, add a script to both &quot;after taking&quot; and &quot;after dropping&quot;: &quot;Set variable player.maxobjects = player.maxobjects + 13&quot; or &quot;= player.maxobjects - 13&quot; (remember to add the minus to the drop action, or your players will be able to get unlimited inventory space!). However, this means the player won't be able to pick up the backpack if the inventory is already full. Better, IMHO, is the volume and maxvolume attributes, as you can set every object's volume to any integer, even zero (so that the object is always takeable, even when maxobjects would say otherwise), so it can be picked up, even when the player has an otherwise full inventory, AND you have much better control over what the player can carry and when, whereas the maxobjects attribute always counts every object as &quot;1&quot;, no matter what. Only downside is that you have to remember to set every takeable object's volume, as it is initially set at zero...",
      "PostDate": "2016-04-26T04:15:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42490",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "It seems like it would work, but what happens if the player is carrying the backpack but not equipping it?  And then, what if the player tries to pick up more stuff when the backpack is carried but not equipped?\n\nI think I had a similar situation in X2.  Instead of changing the weight and fiddling with all of that, could you just increase the carrying capacity of the player when the object is picked up and make the container 'undroppable'?  When picking up a different container, you could then discard the old one so that the player is not carrying around a bunch of containers.  Say, your first item is a knapsack.  When added to inventory, you can increase the player inventory limit from 2 to 4.  Later you find a backpack.  When the player picks this up, you could print a message like &quot;Great, this is much better than that knapsack.  You could carry more things in it!  You discard the old knapsack.&quot;  Then, add backpack to inventory, remove object knapsack, and increase inventory limits to 10.  Of course, you would have to make the container you are carrying around unable to be dropped.  I also had to add a &quot;remove container&quot; command (with an If (player has flag (which was set when picking up the container))/Else script) and a message indicating that you didn't need to remove it until you found a larger container to replace it.\n\nAlso, what happens if you have 10 items in your container that is in your inventory and you 'get object' from the container which is in your inventory.  I think it will remove the object from the container and add it to your player - which I THINK ignores the player inventory limits.  What if some smart ass tries to get all 10 objects from the container and they are added to the player inventory.  Then... they find a different container to replace the old one but can't pick it up because the player is carrying too many items?  I'm not sure if that makes sense, but I feel like it happened in X2.\n\nSo... in short, I think you better be damn certain that carrying a container to carry your stuff is well worth it.  lol\n\nAlso, does anyone know WHY items added to a container in your inventory appear to list the objects as children of the player?  It would be nice to be able to carry around ONE item in your inventory with hidden children AND then be able to look at that one item and see the contents of it.  I did some serious tinkering with the 'inventory' command and a container backpack.  I couldn't get the items to disappear in the inventory pane OR when I typed 'i' to check my inventory.  They are always there no matter what it seems.  \n\n@Neonayon, did you start a thread somewhere on this?\n\n@Zeph, Won't you still have the issue of the children of the backpack being listed as a a child of the player and NOT the backpack?\n\nPardon me... I'm tired!\n\nSorry to ramble, but just thinking the last hour or two out loud!",
      "EditableFormat": "bbcode",
      "HTML": "It seems like it would work, but what happens if the player is carrying the backpack but not equipping it?  And then, what if the player tries to pick up more stuff when the backpack is carried but not equipped?<br/><br/>I think I had a similar situation in X2.  Instead of changing the weight and fiddling with all of that, could you just increase the carrying capacity of the player when the object is picked up and make the container 'undroppable'?  When picking up a different container, you could then discard the old one so that the player is not carrying around a bunch of containers.  Say, your first item is a knapsack.  When added to inventory, you can increase the player inventory limit from 2 to 4.  Later you find a backpack.  When the player picks this up, you could print a message like &quot;Great, this is much better than that knapsack.  You could carry more things in it!  You discard the old knapsack.&quot;  Then, add backpack to inventory, remove object knapsack, and increase inventory limits to 10.  Of course, you would have to make the container you are carrying around unable to be dropped.  I also had to add a &quot;remove container&quot; command (with an If (player has flag (which was set when picking up the container))/Else script) and a message indicating that you didn't need to remove it until you found a larger container to replace it.<br/><br/>Also, what happens if you have 10 items in your container that is in your inventory and you 'get object' from the container which is in your inventory.  I think it will remove the object from the container and add it to your player - which I THINK ignores the player inventory limits.  What if some smart ass tries to get all 10 objects from the container and they are added to the player inventory.  Then... they find a different container to replace the old one but can't pick it up because the player is carrying too many items?  I'm not sure if that makes sense, but I feel like it happened in X2.<br/><br/>So... in short, I think you better be damn certain that carrying a container to carry your stuff is well worth it.  lol<br/><br/>Also, does anyone know WHY items added to a container in your inventory appear to list the objects as children of the player?  It would be nice to be able to carry around ONE item in your inventory with hidden children AND then be able to look at that one item and see the contents of it.  I did some serious tinkering with the 'inventory' command and a container backpack.  I couldn't get the items to disappear in the inventory pane OR when I typed 'i' to check my inventory.  They are always there no matter what it seems.  <br/><br/>@Neonayon, did you start a thread somewhere on this?<br/><br/>@Zeph, Won't you still have the issue of the children of the backpack being listed as a a child of the player and NOT the backpack?<br/><br/>Pardon me... I'm tired!<br/><br/>Sorry to ramble, but just thinking the last hour or two out loud!",
      "PostDate": "2016-04-26T04:25:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42491",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "I dunno, I just ran into a ton of problems trying to separate the backpack carry from the player carry limits so I'd rather completely control the variables <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n[u:3bjv03rj]UPDATE[/u:3bjv03rj]: \n\nI decided to try and combine ideas here. I have multiple carry items some can be worn like the backpack and some can be carried like a brown sack. \n\nThe wearable objects add volume to the player's maxvolume limit when worn and subtract it when it isn't. The unwearable items, add to the player's volume when simply taken and then subtract from it when dropped. We'll see how that works out. I may add a subtract to all other items when picked up...like -1 player.maxvolume or something and then +1 when that item is used or dropped. That way the player always knows how much more they can carry. In the player description you write: \n\nMax Carry (or whatever): {player.maxvolume}.  \n\nHope that helps other people!",
      "EditableFormat": "bbcode",
      "HTML": "I dunno, I just ran into a ton of problems trying to separate the backpack carry from the player carry limits so I'd rather completely control the variables <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/><span style=\"text-decoration:underline;\">UPDATE</span>: <br/><br/>I decided to try and combine ideas here. I have multiple carry items some can be worn like the backpack and some can be carried like a brown sack. <br/><br/>The wearable objects add volume to the player's maxvolume limit when worn and subtract it when it isn't. The unwearable items, add to the player's volume when simply taken and then subtract from it when dropped. We'll see how that works out. I may add a subtract to all other items when picked up...like -1 player.maxvolume or something and then +1 when that item is used or dropped. That way the player always knows how much more they can carry. In the player description you write: <br/><br/>Max Carry (or whatever): {player.maxvolume}.  <br/><br/>Hope that helps other people!",
      "PostDate": "2016-04-26T05:48:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42492",
      "UserId": 0,
      "Username": "Zephyrus Scary",
      "UserAvatar": null,
      "UserGravatar": "6aaf5e562bea9747f0a8a177a78be6c3",
      "EditableText": "@XanMag,\n\nNeon didn't say anything about making the extra objects move into the bag. In the interest of science, however, I doodled a bit, and found a little trick:\n\n1. Make your backpack a container.\n\n1-optional. Checkmark &quot;Hide children ...&quot; if you don't want items in the bag to be listed in inventory.\n\n2. Add a function, like &quot;takeinbackpack&quot;.\n\n3. Add parameter &quot;object&quot; (w/o quotes) to &quot;takeinbackpack&quot;.\n\n4. Add script &quot;If... player is carrying object: object: backpack&quot;\n\n5. &quot;Then: Move object [expression:] object to [object:] backpack&quot;\n\n6. On every takeable object, add script &quot;call function&quot; to &quot;after taking&quot;. Call function &quot;takeinbackpack&quot; with parameter as the object's name.\n\nThis is only barely workable, though, as I have no idea how to refer to &quot;If... object is full&quot; or whatever, as even making the backpack a limited container doesn't prevent the object from being added to the backpack.\n\nEDIT: Also, this reitroduces the maxobjects problem. If the bag contains too much volume of objects for the player's current maxvolume, it cannot be picked up...\n\nEDIT2: Roundabout fix to said problem:\n\n[attachment=1:sgug84a4]<!-- ia1 -->Container Fix.png<!-- ia1 -->[/attachment:sgug84a4]\n\nEDIT3: Perhaps the final solution? still requires a custom attribute, but better than rewriting the whole &quot;take&quot; verb!\n\n[attachment=0:sgug84a4]<!-- ia0 -->Container solution.png<!-- ia0 -->[/attachment:sgug84a4]\n\nRemember to add the new parameter to every takeable object. Ideally, the parameter should be equal to the volume!\n\nAlso, to the &quot;remove... from ...&quot; command, add &quot;Set variable object_two.filling = object_two.filling - object_one.volume&quot;",
      "EditableFormat": "bbcode",
      "HTML": "@XanMag,<br/><br/>Neon didn't say anything about making the extra objects move into the bag. In the interest of science, however, I doodled a bit, and found a little trick:<br/><br/>1. Make your backpack a container.<br/><br/>1-optional. Checkmark &quot;Hide children ...&quot; if you don't want items in the bag to be listed in inventory.<br/><br/>2. Add a function, like &quot;takeinbackpack&quot;.<br/><br/>3. Add parameter &quot;object&quot; (w/o quotes) to &quot;takeinbackpack&quot;.<br/><br/>4. Add script &quot;If... player is carrying object: object: backpack&quot;<br/><br/>5. &quot;Then: Move object [expression:] object to [object:] backpack&quot;<br/><br/>6. On every takeable object, add script &quot;call function&quot; to &quot;after taking&quot;. Call function &quot;takeinbackpack&quot; with parameter as the object's name.<br/><br/>This is only barely workable, though, as I have no idea how to refer to &quot;If... object is full&quot; or whatever, as even making the backpack a limited container doesn't prevent the object from being added to the backpack.<br/><br/>EDIT: Also, this reitroduces the maxobjects problem. If the bag contains too much volume of objects for the player's current maxvolume, it cannot be picked up...<br/><br/>EDIT2: Roundabout fix to said problem:<br/><br/><div><img src=\"/attachment/1563\" alt=\"Container Fix.png\" /></div><br/><br/>EDIT3: Perhaps the final solution? still requires a custom attribute, but better than rewriting the whole &quot;take&quot; verb!<br/><br/><div><img src=\"/attachment/1564\" alt=\"Container solution.png\" /></div><br/><br/>Remember to add the new parameter to every takeable object. Ideally, the parameter should be equal to the volume!<br/><br/>Also, to the &quot;remove... from ...&quot; command, add &quot;Set variable object_two.filling = object_two.filling - object_one.volume&quot;",
      "PostDate": "2016-04-26T06:07:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42493",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "I figured something out. I'll open the thread again if it doesn't end up working <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> \n\nThanks Zeph and Xan for your input!",
      "EditableFormat": "bbcode",
      "HTML": "I figured something out. I'll open the thread again if it doesn't end up working <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> <br/><br/>Thanks Zeph and Xan for your input!",
      "PostDate": "2016-04-26T06:35:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42494",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "There's also Object List Attributes, their 'ListCount', and the 'foreach' Function:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m -->\n\n---------\n\nalso, you can create two Attributes, a 'maximum' and 'current' Attribute:\n\n(by having 'current/maximum' Attributes, this allows for you to control/handle/manipulate it, but it also means that you have to do this, lol)\n\n[code:srt14olp]if (backpack&#46;current_capacity &lt; backpack&#46;maximum_capacity) {\n  // script to move 'whatever' Object into the backpack\n  backpack&#46;current_capacity = backpack&#46;current_capacity + 1\n} else {\n  msg (&quot;The backpack is full&#46;&quot;)\n}[/code:srt14olp]\n\nlet's say you discover some means that increases your maximum capacity by 100 in the game:\n\n[code:srt14olp]backpack&#46;maximum_capacity = backpack&#46;maximum_capacity + 100[/code:srt14olp]\n\nwhich, will now be the new maximum capacity for your checking script above: '...backpack.current_capacity &lt; backpack.maximum_capacity) {...'\n\n-------\n\nusing Lists:\n\n[code:srt14olp]if (ListCount (GetDirectChildren (backpack)) &lt; backpack&#46;maximum_capacity) {\n  // script to move 'whatever' Object into the backpack\n} else {\n  msg (&quot;The backpack is full&#46;&quot;)\n}[/code:srt14olp]\n\n[code:srt14olp]foreach (object_variable, GetDirectChildren (backpack)) {\n  // whatever script(s) to act upon each/every/all direct child Objects in your parent 'backpack' Object, for example&#58;\n  // (I used 'object_variable' as the name-label, but you can use whatever you want, this will represent each/every/all direct child Objects in your 'backpack' parent Object)\n  // msg (object_variable&#46;alias)\n  // the above will display the aliases of all the direct child objects in the 'backpack' parent object\n}[/code:srt14olp]\n\nalso, instead of using 'GetDirectChildren()' Function, you can use 'GetAllChildObjects()' Function, and/or there's always the 'AllObjects()' Function too. Also, there's the 'Scope ' Functions too (see links above).",
      "EditableFormat": "bbcode",
      "HTML": "There's also Object List Attributes, their 'ListCount', and the 'foreach' Function:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m --><br/><br/>---------<br/><br/>also, you can create two Attributes, a 'maximum' and 'current' Attribute:<br/><br/>(by having 'current/maximum' Attributes, this allows for you to control/handle/manipulate it, but it also means that you have to do this, lol)<br/><br/><pre><code>if (backpack&#46;current_capacity &lt; backpack&#46;maximum_capacity) {<br/>  // script to move 'whatever' Object into the backpack<br/>  backpack&#46;current_capacity = backpack&#46;current_capacity + 1<br/>} else {<br/>  msg (&quot;The backpack is full&#46;&quot;)<br/>}</code></pre><br/><br/>let's say you discover some means that increases your maximum capacity by 100 in the game:<br/><br/><pre><code>backpack&#46;maximum_capacity = backpack&#46;maximum_capacity + 100</code></pre><br/><br/>which, will now be the new maximum capacity for your checking script above: '...backpack.current_capacity &lt; backpack.maximum_capacity) {...'<br/><br/>-------<br/><br/>using Lists:<br/><br/><pre><code>if (ListCount (GetDirectChildren (backpack)) &lt; backpack&#46;maximum_capacity) {<br/>  // script to move 'whatever' Object into the backpack<br/>} else {<br/>  msg (&quot;The backpack is full&#46;&quot;)<br/>}</code></pre><br/><br/><pre><code>foreach (object_variable, GetDirectChildren (backpack)) {<br/>  // whatever script(s) to act upon each/every/all direct child Objects in your parent 'backpack' Object, for example&#58;<br/>  // (I used 'object_variable' as the name-label, but you can use whatever you want, this will represent each/every/all direct child Objects in your 'backpack' parent Object)<br/>  // msg (object_variable&#46;alias)<br/>  // the above will display the aliases of all the direct child objects in the 'backpack' parent object<br/>}</code></pre><br/><br/>also, instead of using 'GetDirectChildren()' Function, you can use 'GetAllChildObjects()' Function, and/or there's always the 'AllObjects()' Function too. Also, there's the 'Scope ' Functions too (see links above).",
      "PostDate": "2016-04-26T07:22:18+01:00",
      "LastEditDate": null
    }
  ]
}
