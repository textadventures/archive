{
  "Topic": {
    "TopicId": "6369",
    "ForumId": "10",
    "Title": "Object Categories",
    "LastUpdated": "2016-05-29T22:03:59+01:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "43104",
      "UserId": 0,
      "Username": "Kaejer",
      "UserAvatar": null,
      "UserGravatar": "acc67caab4e01427f7c0ad4cc899d198",
      "EditableText": "Hi there,\n\nI'm trying to figure out how to set something up so in a Turn Script, and potentially other things in the future, to auto populate a list based off of attributes I am using to categorize some objects I have.\n\nCurrently the situation is this:\nI have provided a numerical listing of all of the people (objects set it be as an actual NPC) in an attribute. Originally, it was just going to be a boolean flag, but I wanted to differentiate them with a number instead so I went with an integer - variable &quot;person&quot;. This also allows me to be able to able to make certain functions work on specific numerical ranges (certain NPCs).\n\nI want to be able to create a new list in a Turn Script that automatically scans all objects and returns any object that has the attribute &quot;person&quot; so that I don't have to manually create a list for each function and update (unless there's a way to make a global list somehow with this, which would work too). This way it would filter down to only objects with the attribute &quot;person&quot; and then I can use an if statement with a literal expression to know which &quot;person&quot;s this Turn Script would effect.\n\nSummary:\nHow to create a list of all objects with attribute &quot;person&quot;\n\nLet me know if you need any other information,\nThank in advance!",
      "EditableFormat": "bbcode",
      "HTML": "Hi there,<br/><br/>I'm trying to figure out how to set something up so in a Turn Script, and potentially other things in the future, to auto populate a list based off of attributes I am using to categorize some objects I have.<br/><br/>Currently the situation is this:<br/>I have provided a numerical listing of all of the people (objects set it be as an actual NPC) in an attribute. Originally, it was just going to be a boolean flag, but I wanted to differentiate them with a number instead so I went with an integer - variable &quot;person&quot;. This also allows me to be able to able to make certain functions work on specific numerical ranges (certain NPCs).<br/><br/>I want to be able to create a new list in a Turn Script that automatically scans all objects and returns any object that has the attribute &quot;person&quot; so that I don't have to manually create a list for each function and update (unless there's a way to make a global list somehow with this, which would work too). This way it would filter down to only objects with the attribute &quot;person&quot; and then I can use an if statement with a literal expression to know which &quot;person&quot;s this Turn Script would effect.<br/><br/>Summary:<br/>How to create a list of all objects with attribute &quot;person&quot;<br/><br/>Let me know if you need any other information,<br/>Thank in advance!",
      "PostDate": "2016-05-26T01:31:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43109",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "links:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n^^^^\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m -->\n\n-------\n\n[code:3t40qxjd]&lt;function name=&quot;populate_npc_objectlist_function&quot;&gt;\n  if (not HasAttribute (game, &quot;npc_objectlist_attribute&quot;)) {\n    game&#46;npc_objectlist_attribute = NewObjectList()\n  }\n  foreach (object_variable, AllObjects()) {\n    if (HasAttribute (object_variable, &quot;person&quot;) {\n      list add (game&#46;npc_objectlist_attribute, object_variable)\n    } \n  }\n&lt;/function&gt;[/code:3t40qxjd]\n\nconceptually what the code above is doing:\n\nif there is no npc list, create one. Then, you iterate (cycle) through all of the objects in the game, and check if they have the indicator/flag (Attribute and/or its Value), and if they do, then add them to the npc list. You can then use (such as iterating through) that npc list for doing whatever you want.\n\n-------------------\n\nyou may want to create a String Attribute like this instead (as this way below only requires/uses a single Attribute, instead of making many Attributes):\n\nObject_name.type_of_object\n// obviously replace 'Object_name' or 'object_1...X' with the actual names of your Objects, and/or use the special keyword, 'this', if/when you can. \n// you can change 'type_of_object' to whatever you want, this is just the naming/labeling that I like to use for it\n\nas then you can use it for this:\n\nobject_1.type_of_object = &quot;person&quot;\nobject_2.type_of_object = &quot;npc&quot;\nobject_3.type_of_object = &quot;monster&quot;\nobject_4.type_of_object = &quot;environment&quot;\nobject_5.type_of_object = &quot;tree&quot;\nobject_6.type_of_object = &quot;building&quot;\nobject_7.type_of_object = &quot;room&quot;\nobject_8.type_of_object = &quot;dungeon&quot;\nobject_9.type_of_object = &quot;room_object&quot;\nobject_10.type_of_object = &quot;pc&quot;\nobject_11.type_of_object = &quot;player&quot;\nobject_12.type_of_object = &quot;player_object&quot;\nobject_13.type_of_object = &quot;item&quot;\nobject_14.type_of_object = &quot;cash&quot;\nobject_15.type_of_object = &quot;object&quot;\nobject_16.type_of_object = &quot;object_object&quot;\nobject_17.type_of_object = &quot;town&quot;\n\nif (this.type_of_object = &quot;npc&quot;) {\n-&gt; // whatever Script(s)\n} else if (this.type_of_object = &quot;monster&quot;) {\n-&gt; // whatever Script(s)\n} else if (this.type_of_object = &quot;item&quot;) {\n-&gt; // whatever Script(s)\n} else if (this.type_of_object = &quot;room&quot;) {\n-&gt; // whatever Script(s)\n}\n// etc etc etc\n\n---------\n\nand if you're able to work with List/Dictionary Attributes well, you can use them instead of a String Attribute, allowing you to check for multiple indicators/flags:\n\nobject_1.type_of_object_list = split (&quot;spell;fire&quot;, &quot;;&quot;)\nobject_1.type_of_object_list = split (&quot;spell;water&quot;, &quot;;&quot;)\nobject_2.type_of_object_list = split (&quot;weapon; equipment&quot;, &quot;;&quot;)\nobject_3.type_of_object_list = split (&quot;weapon; equipment; melee&quot;, &quot;;&quot;)\nobject_4.type_of_object_list = split (&quot;weapon; equipment; ranged&quot;, &quot;;&quot;)\nobject_5.type_of_object_list = split (&quot;weapon; equipment; two_handed&quot;, &quot;;&quot;)\nobject_6.type_of_object_list = split (&quot;weapon; equipment; one_handed&quot;, &quot;;&quot;)\nobject_7.type_of_object_list = split (&quot;weapon; equipment; one_handed; melee&quot;, &quot;;&quot;)\nobject_8.type_of_object_list = split (&quot;weapon; equipment; one_handed; ranged&quot;, &quot;;&quot;)\nobject_9.type_of_object_list = split (&quot;weapon; equipment; two_handed; melee&quot;, &quot;;&quot;)\nobject_10.type_of_object_list = split (&quot;weapon; equipment; two_handed; ranged&quot;, &quot;;&quot;)\nobject_11.type_of_object_list = split (&quot;armor; equipment&quot;, &quot;;&quot;)\nobject_12.type_of_object_list = split (&quot;spell; fire; item&quot;, &quot;;&quot;)\nobject_13.type_of_object_list = split (&quot;item; normal&quot;, &quot;;&quot;)\nobject_14.type_of_object_list = split (&quot;item; battle&quot;, &quot;;&quot;)\nobject_15.type_of_object_list = split (&quot;item; quest&quot;, &quot;;&quot;)\nobject_16.type_of_object_list = split (&quot;item; map&quot;, &quot;;&quot;)\n// etc etc etc\n\nif (ListContains (this.type_of_object_list, &quot;spell&quot;)) {\n-&gt; whatever Script(s)\n} else if (ListContains (this.type_of_object_list, &quot;spell&quot;) and ListContains (this.type_of_object, &quot;item&quot;)) {\n-&gt; whatever Script(s)\n}\n// etc etc etc",
      "EditableFormat": "bbcode",
      "HTML": "links:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/>^^^^<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m --><br/><br/>-------<br/><br/><pre><code>&lt;function name=&quot;populate_npc_objectlist_function&quot;&gt;<br/>  if (not HasAttribute (game, &quot;npc_objectlist_attribute&quot;)) {<br/>    game&#46;npc_objectlist_attribute = NewObjectList()<br/>  }<br/>  foreach (object_variable, AllObjects()) {<br/>    if (HasAttribute (object_variable, &quot;person&quot;) {<br/>      list add (game&#46;npc_objectlist_attribute, object_variable)<br/>    } <br/>  }<br/>&lt;/function&gt;</code></pre><br/><br/>conceptually what the code above is doing:<br/><br/>if there is no npc list, create one. Then, you iterate (cycle) through all of the objects in the game, and check if they have the indicator/flag (Attribute and/or its Value), and if they do, then add them to the npc list. You can then use (such as iterating through) that npc list for doing whatever you want.<br/><br/>-------------------<br/><br/>you may want to create a String Attribute like this instead (as this way below only requires/uses a single Attribute, instead of making many Attributes):<br/><br/>Object_name.type_of_object<br/>// obviously replace 'Object_name' or 'object_1...X' with the actual names of your Objects, and/or use the special keyword, 'this', if/when you can. <br/>// you can change 'type_of_object' to whatever you want, this is just the naming/labeling that I like to use for it<br/><br/>as then you can use it for this:<br/><br/>object_1.type_of_object = &quot;person&quot;<br/>object_2.type_of_object = &quot;npc&quot;<br/>object_3.type_of_object = &quot;monster&quot;<br/>object_4.type_of_object = &quot;environment&quot;<br/>object_5.type_of_object = &quot;tree&quot;<br/>object_6.type_of_object = &quot;building&quot;<br/>object_7.type_of_object = &quot;room&quot;<br/>object_8.type_of_object = &quot;dungeon&quot;<br/>object_9.type_of_object = &quot;room_object&quot;<br/>object_10.type_of_object = &quot;pc&quot;<br/>object_11.type_of_object = &quot;player&quot;<br/>object_12.type_of_object = &quot;player_object&quot;<br/>object_13.type_of_object = &quot;item&quot;<br/>object_14.type_of_object = &quot;cash&quot;<br/>object_15.type_of_object = &quot;object&quot;<br/>object_16.type_of_object = &quot;object_object&quot;<br/>object_17.type_of_object = &quot;town&quot;<br/><br/>if (this.type_of_object = &quot;npc&quot;) {<br/>-&gt; // whatever Script(s)<br/>} else if (this.type_of_object = &quot;monster&quot;) {<br/>-&gt; // whatever Script(s)<br/>} else if (this.type_of_object = &quot;item&quot;) {<br/>-&gt; // whatever Script(s)<br/>} else if (this.type_of_object = &quot;room&quot;) {<br/>-&gt; // whatever Script(s)<br/>}<br/>// etc etc etc<br/><br/>---------<br/><br/>and if you're able to work with List/Dictionary Attributes well, you can use them instead of a String Attribute, allowing you to check for multiple indicators/flags:<br/><br/>object_1.type_of_object_list = split (&quot;spell;fire&quot;, &quot;;&quot;)<br/>object_1.type_of_object_list = split (&quot;spell;water&quot;, &quot;;&quot;)<br/>object_2.type_of_object_list = split (&quot;weapon; equipment&quot;, &quot;;&quot;)<br/>object_3.type_of_object_list = split (&quot;weapon; equipment; melee&quot;, &quot;;&quot;)<br/>object_4.type_of_object_list = split (&quot;weapon; equipment; ranged&quot;, &quot;;&quot;)<br/>object_5.type_of_object_list = split (&quot;weapon; equipment; two_handed&quot;, &quot;;&quot;)<br/>object_6.type_of_object_list = split (&quot;weapon; equipment; one_handed&quot;, &quot;;&quot;)<br/>object_7.type_of_object_list = split (&quot;weapon; equipment; one_handed; melee&quot;, &quot;;&quot;)<br/>object_8.type_of_object_list = split (&quot;weapon; equipment; one_handed; ranged&quot;, &quot;;&quot;)<br/>object_9.type_of_object_list = split (&quot;weapon; equipment; two_handed; melee&quot;, &quot;;&quot;)<br/>object_10.type_of_object_list = split (&quot;weapon; equipment; two_handed; ranged&quot;, &quot;;&quot;)<br/>object_11.type_of_object_list = split (&quot;armor; equipment&quot;, &quot;;&quot;)<br/>object_12.type_of_object_list = split (&quot;spell; fire; item&quot;, &quot;;&quot;)<br/>object_13.type_of_object_list = split (&quot;item; normal&quot;, &quot;;&quot;)<br/>object_14.type_of_object_list = split (&quot;item; battle&quot;, &quot;;&quot;)<br/>object_15.type_of_object_list = split (&quot;item; quest&quot;, &quot;;&quot;)<br/>object_16.type_of_object_list = split (&quot;item; map&quot;, &quot;;&quot;)<br/>// etc etc etc<br/><br/>if (ListContains (this.type_of_object_list, &quot;spell&quot;)) {<br/>-&gt; whatever Script(s)<br/>} else if (ListContains (this.type_of_object_list, &quot;spell&quot;) and ListContains (this.type_of_object, &quot;item&quot;)) {<br/>-&gt; whatever Script(s)<br/>}<br/>// etc etc etc",
      "PostDate": "2016-05-26T03:41:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43114",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Like this:\n[code:smozf10j]lst = NewObjectList()\nforeach (o, AllObjects()) {\n  if (HasInt(o, &quot;person&quot;)) {\n    if (o&#46;person = value) {\n      list add(lst, o)\n    }\n  }\n}[/code:smozf10j]\nThe first line creates a new list, called [i:smozf10j]lst[/i:smozf10j], to which all the NPCs will be added. Then we start a loop that will go through every object in the game. For each object, does it have a &quot;person&quot; attribute? Is the value of the attribute value (obviously set that to the number required beforehand)? If so, add to the list.\n\nIf you are not familiar with code, this page explains how to paste it into your game.\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/copy_and_paste_code.html\">http://docs.textadventures.co.uk/quest/ ... _code.html</a><!-- m -->\n\nPersonally I would put that in a function, and have it return an object list, with &quot;value&quot; as a parameter.",
      "EditableFormat": "bbcode",
      "HTML": "Like this:<br/><pre><code>lst = NewObjectList()<br/>foreach (o, AllObjects()) {<br/>  if (HasInt(o, &quot;person&quot;)) {<br/>    if (o&#46;person = value) {<br/>      list add(lst, o)<br/>    }<br/>  }<br/>}</code></pre><br/>The first line creates a new list, called <span style=\"font-style:italic;\">lst</span>, to which all the NPCs will be added. Then we start a loop that will go through every object in the game. For each object, does it have a &quot;person&quot; attribute? Is the value of the attribute value (obviously set that to the number required beforehand)? If so, add to the list.<br/><br/>If you are not familiar with code, this page explains how to paste it into your game.<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/copy_and_paste_code.html\">http://docs.textadventures.co.uk/quest/ ... _code.html</a><!-- m --><br/><br/>Personally I would put that in a function, and have it return an object list, with &quot;value&quot; as a parameter.",
      "PostDate": "2016-05-26T08:04:07+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43150",
      "UserId": 0,
      "Username": "Kaejer",
      "UserAvatar": null,
      "UserGravatar": "acc67caab4e01427f7c0ad4cc899d198",
      "EditableText": "Thank you all for your help, this is assisted me in more ways than one <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->.",
      "EditableFormat": "bbcode",
      "HTML": "Thank you all for your help, this is assisted me in more ways than one <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->.",
      "PostDate": "2016-05-29T19:19:07+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43156",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "here's a good demonstration of uing the different Types of Attributes:\n\nRPG conditions:\n\npoisoned, stunned, asleep, paralyzed, petrified, muted/silenced, dead, unconscious, crippled/disabled, normal, intoxicated/drugged, sick/diseased, etc etc etc\n\nUGLY design (uses many Attributes), but it (Boolean Attributes: true/false) is very simple to understand and use:\n\nplayer.poisoned = (false/true)\nplayer.stunned = (false/true)\nplayer.asleep = (false/true)\nplayer.(muted/silenced) = (true/false)\nplayer.dead = (true/false)\netc etc etc\n\nyou're not poisoned:\n\nplayer.poisoned = false\n\nyou're not poisoned and not paralyzed:\n\nplayer.poisoned = false\nplayer.paralyzed = false\n\nyou're not poisoned but you are paralyzed:\n\nplayer.poisoned = false\nplayer.paralyzed = true\n\nyou're poisoned but not paralyzed:\n\nplayer.poisoned = true\nplayer.paralyzed = false\n\nyou're poisond and paralyzed:\n\nplayer.poisoned = true\nplayer.paralyzed = true\n\nyou're poisoned, paralyzed, petrified, crippled, and silenced, but not stunned:\n\nplayer.poisoned = true\nplayer.paralyzed = true\nplayer.petrified = true\nplayer.crippled = true\nplayer.slenced = true\nplayer.stunned = false\n\netc etc etc combinations...\n\nmuch better design (only uses a single Atribute) but limited to only having a single condition and it's concept usually isn't understood by new peeple:\n\nString Attribute: string comparison, for example: if (player.condition = &quot;poisoned&quot;) { player.life = player.life - 50 } // if (player.condition: &quot;poisoned&quot; = &quot;poisoned&quot;) -&gt; TRUE, VS, if (player.condition: &quot;asleep&quot; = &quot;poisoned&quot;) -&gt; FALSE, as this string comparison stuff is a coding/programming concept.\n\nplayer.condition = &quot;(poisoned/stunned/etc etc etc)&quot;\n\nplayer.condition = &quot;normal&quot;\nOR\nplayer.condition = &quot;poisoned&quot;\nOR\netc etc etc, you can only have a single condition at a time\n\nmuch better design (but lists are much more advanced/difficult to understand/use for new poeple), and able to have multiple conditions:\n\nyou get/are normal:\n\nplayer.condition_list = split (&quot;normal&quot;, &quot;;&quot;)\n\nyou get/are poisoned and petrified:\n\nplayer.condition_list = split (&quot;poisoned; petrified&quot;, &quot;;&quot;)\n\nor, you get/are dead, crippled, and paralyzed:\n\nplayer.condition_list = split (&quot;dead; crippled; paralyzed&quot;, &quot;;&quot;)\n\netc etc etc",
      "EditableFormat": "bbcode",
      "HTML": "here's a good demonstration of uing the different Types of Attributes:<br/><br/>RPG conditions:<br/><br/>poisoned, stunned, asleep, paralyzed, petrified, muted/silenced, dead, unconscious, crippled/disabled, normal, intoxicated/drugged, sick/diseased, etc etc etc<br/><br/>UGLY design (uses many Attributes), but it (Boolean Attributes: true/false) is very simple to understand and use:<br/><br/>player.poisoned = (false/true)<br/>player.stunned = (false/true)<br/>player.asleep = (false/true)<br/>player.(muted/silenced) = (true/false)<br/>player.dead = (true/false)<br/>etc etc etc<br/><br/>you're not poisoned:<br/><br/>player.poisoned = false<br/><br/>you're not poisoned and not paralyzed:<br/><br/>player.poisoned = false<br/>player.paralyzed = false<br/><br/>you're not poisoned but you are paralyzed:<br/><br/>player.poisoned = false<br/>player.paralyzed = true<br/><br/>you're poisoned but not paralyzed:<br/><br/>player.poisoned = true<br/>player.paralyzed = false<br/><br/>you're poisond and paralyzed:<br/><br/>player.poisoned = true<br/>player.paralyzed = true<br/><br/>you're poisoned, paralyzed, petrified, crippled, and silenced, but not stunned:<br/><br/>player.poisoned = true<br/>player.paralyzed = true<br/>player.petrified = true<br/>player.crippled = true<br/>player.slenced = true<br/>player.stunned = false<br/><br/>etc etc etc combinations...<br/><br/>much better design (only uses a single Atribute) but limited to only having a single condition and it's concept usually isn't understood by new peeple:<br/><br/>String Attribute: string comparison, for example: if (player.condition = &quot;poisoned&quot;) { player.life = player.life - 50 } // if (player.condition: &quot;poisoned&quot; = &quot;poisoned&quot;) -&gt; TRUE, VS, if (player.condition: &quot;asleep&quot; = &quot;poisoned&quot;) -&gt; FALSE, as this string comparison stuff is a coding/programming concept.<br/><br/>player.condition = &quot;(poisoned/stunned/etc etc etc)&quot;<br/><br/>player.condition = &quot;normal&quot;<br/>OR<br/>player.condition = &quot;poisoned&quot;<br/>OR<br/>etc etc etc, you can only have a single condition at a time<br/><br/>much better design (but lists are much more advanced/difficult to understand/use for new poeple), and able to have multiple conditions:<br/><br/>you get/are normal:<br/><br/>player.condition_list = split (&quot;normal&quot;, &quot;;&quot;)<br/><br/>you get/are poisoned and petrified:<br/><br/>player.condition_list = split (&quot;poisoned; petrified&quot;, &quot;;&quot;)<br/><br/>or, you get/are dead, crippled, and paralyzed:<br/><br/>player.condition_list = split (&quot;dead; crippled; paralyzed&quot;, &quot;;&quot;)<br/><br/>etc etc etc",
      "PostDate": "2016-05-29T22:03:59+01:00",
      "LastEditDate": null
    }
  ]
}
