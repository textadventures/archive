{
  "Topic": {
    "TopicId": "5414",
    "ForumId": "10",
    "Title": "tutorial for writing in code rather than using the GUI",
    "LastUpdated": "2015-08-14T08:51:17+01:00",
    "ReplyCount": 19
  },
  "Posts": [
    {
      "PostId": "37590",
      "UserId": 0,
      "Username": "BenM",
      "UserAvatar": null,
      "UserGravatar": "dd4c53fee910ba645a351c6ffdfdaeb5",
      "EditableText": "Is there such a thing as a handbook or tutorial for writing in the code, rather than using the GUI?",
      "EditableFormat": "bbcode",
      "HTML": "Is there such a thing as a handbook or tutorial for writing in the code, rather than using the GUI?",
      "PostDate": "2015-08-12T20:12:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37591",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Why would you ever want to do such a thing?!?  LOL\n\nThere are some pretty decent tutorials out there like codeacademy.com\n\nPersonally, unless you want to really learn code for the sake of learning code, browse the forums and ask questions on the forum for problems you run into while using the GUI.  Not that my opinion on this carries much weight, but IF your intent is to write games using this Quest program I have found picking up some code tidbits here and there was incredibly more beneficial to my game writing experience than trying to learn code in order to write these kinds of games.  \n\nOn the other hand, if you really want to learn a lot code, codeacademy.com does do a pretty good job of walking you through coding lessons.  I just wasn't patient enough to get very far.  HK uses it (as do I but I'm not dedicated enough) and it seems to have helped tremendously in his case, but HK has an interest in computer programming as an education, so...\n\nAs for there being a specific code handbook for Quest... no I don't think there is.  Someone may correct me on that though.  The 'How To' documentation may be worth having a look at if you haven't found that yet.  <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m -->\n\nThat's the best I can offer.  Good luck!",
      "EditableFormat": "bbcode",
      "HTML": "Why would you ever want to do such a thing?!?  LOL<br/><br/>There are some pretty decent tutorials out there like codeacademy.com<br/><br/>Personally, unless you want to really learn code for the sake of learning code, browse the forums and ask questions on the forum for problems you run into while using the GUI.  Not that my opinion on this carries much weight, but IF your intent is to write games using this Quest program I have found picking up some code tidbits here and there was incredibly more beneficial to my game writing experience than trying to learn code in order to write these kinds of games.  <br/><br/>On the other hand, if you really want to learn a lot code, codeacademy.com does do a pretty good job of walking you through coding lessons.  I just wasn't patient enough to get very far.  HK uses it (as do I but I'm not dedicated enough) and it seems to have helped tremendously in his case, but HK has an interest in computer programming as an education, so...<br/><br/>As for there being a specific code handbook for Quest... no I don't think there is.  Someone may correct me on that though.  The 'How To' documentation may be worth having a look at if you haven't found that yet.  <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m --><br/><br/>That's the best I can offer.  Good luck!",
      "PostDate": "2015-08-12T20:55:19+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37596",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "read HK's numerous posts, laughs <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\nI have tons of posts going into great detail how to code in quest, much to the horror of new people who I try to help out... laughs.\n\neither search through all of my posts (click on my account name, then choose to search my posts, and there's also my own thread when I first joined quest as a total code noob: HK's help me noob thread), or just use the site's search box and search for 'noob', 'new to quest', etc etc etc, as a lot of my good detailed code explaining posts are in those threads.\n\nonce, you have some understanding of quest's code, one of the best resources is the quest documentation itself:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m -->\n\nit has a ton of wealth in there (most commands and a lot of other useful stuff)\n\n-----------\n\nlearning code:\n\n1. learn the Attributes and their usage\n2. learn the 'if' Script, and start training your brain in 'if~code~computer' logic.\n3. with ability in Attributes and the 'if' Script, you can do 90% of everything that you want to do in your game (for example: you should already understand this fully at this point: <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/character_creation.html\">http://docs.textadventures.co.uk/quest/ ... ation.html</a><!-- m --> , as well as, at least basic, 'if' Scripting: be able to use 'if' scripting in your 'character creation' scripting to give different stat amounts depending on your choices such as 'race', 'class', or whatever)\n4. next you can move onto learning List Attributes and then Dictionary Attributes.\n5. look at (study) the guides, libraries, and code samples of the good coders here.\n\nwhen~if you're ready you can take a look at my basic physical~weapon damage combat coding:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348&amp;start=120#p22483\">viewtopic.php?f=10&amp;t=3348&amp;start=120#p22483</a><!-- l -->\n\nand the key~legend for all of my abrevs... I've learned since to never use abrevs ever again... sorry about having to deal with them for this old code of mine:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348&amp;start=120#p22486\">viewtopic.php?f=10&amp;t=3348&amp;start=120#p22486</a><!-- l -->\n\n-------\n\nwhen writing in code, there's two types of code:\n\n1. the 'creation' tag blocks (your 'actual~existing physical things' in quest)\n2. the scripting (your actions~events in quest)\n\nalso, note that code can be written horizontally (hackers can read this code; it's more efficient as there's less lines~less character~symbols~less file size) and~or vertically (easier for noob code people to use).\n\n------\n\njust like in real life and human languages, computer languages have a tri-structure as well:\n\n1. matter(physics)~nouns(human languages)~Elements+Attributes(quest xml language): these have the 'creation' tags; your 'physical things' in quest\n2. energy~forces~waves(physics)~verbs(human languages)~Scripting(quest xml language): these do NOT have the 'creation tags; your actions~events in quest\n3. data~traits~characteristics~properties(physics)~adjectives~adverbs(human languages)~Attributes(quest xml language): these are hard to describe, as they're like a hybrid of Elements and Scripting.\n\n-------\n\n1. the 'creation' tag blocks\n\nthey have the '&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;' tags horizontally\n\nor vertically:\n\n[code:zw9mtrdo]&lt;xxx&gt;\n  xxx\n&lt;/xxx&gt;[/code:zw9mtrdo]\n\nhere's an example of creating~adding an Object to your game, whether you do it in the GUI~Editor or in code, this will exist in code:\n\n[code:zw9mtrdo]&lt;object name=&quot;HK&quot;&gt;\n&lt;/object&gt;[/code:zw9mtrdo]\n\n2. scripting\n\nthis does *NOT* have the '&lt;', '&gt;' tag stuff\n\nas an example, here's the GUI~Editor's Verb adding~creation (you're actually adding~creating a Script Attribute for that Object), in code:\n\n(find the code lines that don't have the '&lt;', '&gt;' tags: the 'fight' Script Attribute's content: the 'if~else' Script block)\n\n[code:zw9mtrdo]&lt;object name=&quot;HegemonKhan&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;\n  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n  &lt;attr name=&quot;fight&quot; type=&quot;script&quot;&gt;\n    if (HK&#46;dead) {\n      msg (&quot;HK is already dead silly&#46;&quot;)\n    } else {\n      msg (&quot;You fight and kill HK&#46;&quot;)\n      HK&#46;dead = true\n    }\n  &lt;/attr&gt;\n  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;fight&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;&quot;You can't fight that&#46;&quot;&lt;/defaultexpression&gt;\n&lt;/verb&gt;[/code:zw9mtrdo]",
      "EditableFormat": "bbcode",
      "HTML": "read HK's numerous posts, laughs <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>I have tons of posts going into great detail how to code in quest, much to the horror of new people who I try to help out... laughs.<br/><br/>either search through all of my posts (click on my account name, then choose to search my posts, and there's also my own thread when I first joined quest as a total code noob: HK's help me noob thread), or just use the site's search box and search for 'noob', 'new to quest', etc etc etc, as a lot of my good detailed code explaining posts are in those threads.<br/><br/>once, you have some understanding of quest's code, one of the best resources is the quest documentation itself:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m --><br/><br/>it has a ton of wealth in there (most commands and a lot of other useful stuff)<br/><br/>-----------<br/><br/>learning code:<br/><br/>1. learn the Attributes and their usage<br/>2. learn the 'if' Script, and start training your brain in 'if~code~computer' logic.<br/>3. with ability in Attributes and the 'if' Script, you can do 90% of everything that you want to do in your game (for example: you should already understand this fully at this point: <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/character_creation.html\">http://docs.textadventures.co.uk/quest/ ... ation.html</a><!-- m --> , as well as, at least basic, 'if' Scripting: be able to use 'if' scripting in your 'character creation' scripting to give different stat amounts depending on your choices such as 'race', 'class', or whatever)<br/>4. next you can move onto learning List Attributes and then Dictionary Attributes.<br/>5. look at (study) the guides, libraries, and code samples of the good coders here.<br/><br/>when~if you're ready you can take a look at my basic physical~weapon damage combat coding:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348&amp;start=120#p22483\">viewtopic.php?f=10&amp;t=3348&amp;start=120#p22483</a><!-- l --><br/><br/>and the key~legend for all of my abrevs... I've learned since to never use abrevs ever again... sorry about having to deal with them for this old code of mine:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=3348&amp;start=120#p22486\">viewtopic.php?f=10&amp;t=3348&amp;start=120#p22486</a><!-- l --><br/><br/>-------<br/><br/>when writing in code, there's two types of code:<br/><br/>1. the 'creation' tag blocks (your 'actual~existing physical things' in quest)<br/>2. the scripting (your actions~events in quest)<br/><br/>also, note that code can be written horizontally (hackers can read this code; it's more efficient as there's less lines~less character~symbols~less file size) and~or vertically (easier for noob code people to use).<br/><br/>------<br/><br/>just like in real life and human languages, computer languages have a tri-structure as well:<br/><br/>1. matter(physics)~nouns(human languages)~Elements+Attributes(quest xml language): these have the 'creation' tags; your 'physical things' in quest<br/>2. energy~forces~waves(physics)~verbs(human languages)~Scripting(quest xml language): these do NOT have the 'creation tags; your actions~events in quest<br/>3. data~traits~characteristics~properties(physics)~adjectives~adverbs(human languages)~Attributes(quest xml language): these are hard to describe, as they're like a hybrid of Elements and Scripting.<br/><br/>-------<br/><br/>1. the 'creation' tag blocks<br/><br/>they have the '&lt;xxx&gt;xxx&lt;/xxx&gt;' or '&lt;xxx /&gt;' tags horizontally<br/><br/>or vertically:<br/><br/><pre><code>&lt;xxx&gt;<br/>  xxx<br/>&lt;/xxx&gt;</code></pre><br/><br/>here's an example of creating~adding an Object to your game, whether you do it in the GUI~Editor or in code, this will exist in code:<br/><br/><pre><code>&lt;object name=&quot;HK&quot;&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>2. scripting<br/><br/>this does *NOT* have the '&lt;', '&gt;' tag stuff<br/><br/>as an example, here's the GUI~Editor's Verb adding~creation (you're actually adding~creating a Script Attribute for that Object), in code:<br/><br/>(find the code lines that don't have the '&lt;', '&gt;' tags: the 'fight' Script Attribute's content: the 'if~else' Script block)<br/><br/><pre><code>&lt;object name=&quot;HegemonKhan&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;<br/>  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>  &lt;attr name=&quot;fight&quot; type=&quot;script&quot;&gt;<br/>    if (HK&#46;dead) {<br/>      msg (&quot;HK is already dead silly&#46;&quot;)<br/>    } else {<br/>      msg (&quot;You fight and kill HK&#46;&quot;)<br/>      HK&#46;dead = true<br/>    }<br/>  &lt;/attr&gt;<br/>  &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;fight&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;verb&gt;<br/>  &lt;property&gt;fight&lt;/property&gt;<br/>  &lt;pattern&gt;fight&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;&quot;You can't fight that&#46;&quot;&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;</code></pre>",
      "PostDate": "2015-08-13T04:06:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37597",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "My advice: the best way to learn to write code (besides just doing it) is to read code others have written, preferably *good* code, to avoid rotting your brain and inheriting bad habits before you even get started. And a large body of well-written Quest code you have right under your nose is the core code that ships with the Quest desktop version. (If you're using the online version, then you can still view it all on the github site).\n\nOn my computer, the core files are the .aslx files under C:\\Program Files (x86)\\Quest 5\\Core. That should be the standard install folder. If you installed elsewhere, you'll need to adapt the path. There are all kinds of areas to look at, so pick something that looks interesting. And if you don't understand it at first, don't worry. Just get a feel for how it looks and is structured; don't fret specific algorithms.\n\nYou can also look through the libraries posted in the forums and see how they're written. \n\nAlso, if you're fairly proficient in the GUI side of things, then I would write code in the GUI and then switch to code view and see how it looks. You'll find that there is a fairly simple mapping between the two. Once you learn what that is, then your GUI coding skills should translate fairly easily",
      "EditableFormat": "bbcode",
      "HTML": "My advice: the best way to learn to write code (besides just doing it) is to read code others have written, preferably *good* code, to avoid rotting your brain and inheriting bad habits before you even get started. And a large body of well-written Quest code you have right under your nose is the core code that ships with the Quest desktop version. (If you're using the online version, then you can still view it all on the github site).<br/><br/>On my computer, the core files are the .aslx files under C:\\Program Files (x86)\\Quest 5\\Core. That should be the standard install folder. If you installed elsewhere, you'll need to adapt the path. There are all kinds of areas to look at, so pick something that looks interesting. And if you don't understand it at first, don't worry. Just get a feel for how it looks and is structured; don't fret specific algorithms.<br/><br/>You can also look through the libraries posted in the forums and see how they're written. <br/><br/>Also, if you're fairly proficient in the GUI side of things, then I would write code in the GUI and then switch to code view and see how it looks. You'll find that there is a fairly simple mapping between the two. Once you learn what that is, then your GUI coding skills should translate fairly easily",
      "PostDate": "2015-08-13T08:15:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37598",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "let's create our own new game via directly in code:\n\n--------------\n\nhere's what a new game's code looks like for reference for you:\n\n[code:2nyvpjri]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;xxx&quot;&gt;\n    &lt;gameid&gt;xxx&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:2nyvpjri]\n\n--------------\n\nso, open up a new notepad, wordpad, or (preferably) notepad++, and save the blank file using the *.aslx extension (both your game file and~or any library files, use the same *.aslx extension)\n\nnotepad++ ( <!-- m --><a class=\"postlink\" href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a><!-- m --> )\n\nonce you downloaded and installed it, open~start it up, and within it, at the menu bar at the top of the screen, under the 'language' category, choose 'XML (eXtensible Markup Language)' as that is what quest code uses as its language. It'll color-code stuff for you, making it easier to read, write, and troubleshoot your quest coding.\n\n-------------\n\nINDENTATION ('nesting') IS VERY IMPORTANT, use the tab keyboard key for each level of indentation required (it's much better than using 2 spacebar keys... as I've learned the hard way, lol)\n\n------------\n\nfirst, create the 'asl' creation tag block\n\nthe 'asl' creation tag block is your entire game code, so everything has to be inside of it:\n\n[code:2nyvpjri]&lt;asl&gt; // the beginning tag of the 'asl' block\n  // your entire mass of game code\n&lt;/asl&gt; // the ending tag of the 'asl' block[/code:2nyvpjri]\n\nthe ' version=&quot;550&quot; ' inside of the beginning tag of the 'asl' creation tag block, is the 'asl' creation tag's own Attribute, this version number has to match up with your downloaded quest.exe version, for the engine to be able to read your game code.\n\n----------\n\nnow, add in the two required libraries:\n\nEnglish.aslx\nCore.aslx\n\nEnglish.aslx sets the text to be in english\nCore.aslx is actually a collection of many core files which make up the engine\n\nthe 'English.aslx' library file MUST come first (be above), before the 'core.aslx' library file, as this is the order that the quest engine builds itself up.\n\nthe 'include ref' creation tag lines are your library files that your game uses, the quest engine is actually a bunch of library files, so if you're really good at programming you can completely design your own quest engine, quest is that powerful~customizable !!!\n\n[code:2nyvpjri]&lt;include ref=&quot;English&#46;aslx&quot; /&gt; // beginning '&lt;include' and ending '/&gt;' creation tags on a single line\n&lt;include ref=&quot;Core&#46;aslx&quot; /&gt; // beginning '&lt;include' and ending '/&gt;' creation tags on a single line[/code:2nyvpjri]\n\nthe 'ref=&quot;xxx.aslx&quot; ' is the 'include' creation tag's own Attribute, which is what library file is gotten and used for your building up the quest engine and your game\n\nnote that your actual physical library files themselves (*.aslx) must be in the same folder as your quest.exe and~or your game file (*.aslx) ~ I get confused on this, thus the 'and~or', lol. This is required for these code lines to actually be able to get the library files for usability.\n\n------------\n\nnext we add in the required special 'game' Game Object 'creation' tag block, which holds your global~game settings and a bunch of other related special stuff:\n\n[code:2nyvpjri]&lt;game&gt; // beginning creation tag\n  // Attributes\n&lt;/game&gt; // ending creation tag[/code:2nyvpjri]\n\nthe ' name=&quot;xxx&quot; ' is the 'game' creation tag's own attribute, this is the name of your game.\n\nthe special 'game' Game Object is an Object, which means that it (as Objects) can hold~contain Attributes and~or other Objects.\n\nthe 'Object' Element: able to hold~contain Attributes and~or other Objects\n\nthe special 'game' Game Object, while it can hold~contain other Objects, it's not suppose to, as in the GUI~Editor, you can't add Objects into the special 'game' Game Object, so you shouldn't add Objects into the special 'game' Game Object, via in code, either.\n\nthe default Attributes of the special 'game' Game Object are:\n\n&lt;gameid&gt;xxx&lt;/gameid&gt;\n&lt;version&gt;1.0&lt;/version&gt;\n&lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n\n(look at the 'game' Game Object in the GUI~Editor, do you recognize the options~settings 'version' and 'firstpublished' ??? After you complete this code writing of a default new game code, try changing the version or firstpublished in the GUI~Editor, save your game file, then check your game's code, or vice versa, change the 'version' or 'firstpublished' in code, and see what happens in the GUI~Editor)\n\nthe 'gameid' is a required String Attribute, using some algorithm to randomly generate a unique string, as this serves as the 'ID' for your game. Like a car has a licence plate, or you have: a Driver ID card or a Social Security Number or DNA or fingerprint or iris pattern or voice pattern, etc etc etc\n\n// note:\n//\n// the 'name' String Attributes are the 'ID&quot; Attributes for quest, they MUST be unique.\n//\n// whereas, the 'alias' String Attributes don't have to be unique.\n//\n// for example:\n\n[code:2nyvpjri]&lt;object name=&quot;orc&quot;&gt;\n&lt;/object&gt;\n&lt;object name=&quot;orc&quot;&gt;\n&lt;/object&gt;\n\nERROR!\n\nVS\n\n&lt;object name=&quot;orc_1&quot;&gt;\n  &lt;alias&gt;orc&lt;/alias&gt;\n&lt;/object&gt;\n&lt;object name=&quot;orc_2&quot;&gt;\n  &lt;alias&gt;orc&lt;/alias&gt;\n&lt;/object&gt;\n\nNO error[/code:2nyvpjri]\n\nthe 'version' (String or Double ~ not sure) Attribute and 'firstpublished' (String or Integer ~ not sure) Attribute, are just for your own documentation and information. Let's say I create a simple skeleton~bare bones game, leaving its version as '1.0', but then I go back and expand~improve upon my game, changing this version to being '2.0', basically it's a way for you to keep track of your game making's progress history. And 'firstpublished' is self-explanatory, lol.\n\nwell, let's add in some more Attributes via code (which we see in the GUI~Editor):\n\n'attr' is used in code: conceptually it's short for 'attribute'\n'int' is used in code: conceptually it's short for 'integer'\n\nfull code form:\n\n&lt;attr name=&quot;author&quot; type=&quot;string&quot;&gt;BenM&lt;/attr&gt;\n\nor it's (a String Attribute only) shortened code form:\n\n&lt;author&gt;BenM&lt;/author&gt; \n\nrecognize this Attribute? (see below)\n\nin GUI~Editor:\n\n'game' Game Object -&gt; (whatever the Tab~s)\n\n(Object Name: game)\nAttribute Name: author\nAttribute Type: string\nAttribute Value: BenM\n\nmore Attributes:\n\n&lt;description&gt;xxx&lt;/description&gt;\n&lt;subtitle&gt;xxx&lt;/subtitle&gt;\n&lt;category&gt;xxx&lt;/category&gt;\n&lt;difficulty&gt;xxx&lt;/difficulty&gt;\n&lt;cruelty&gt;xxx&lt;/cruelty&gt;\n// etc etc etc\n\nfor example:\n\n// vertical placement of Attributes don't matter for the most part ~ there's a few exceptions, so long as those Attributes are placed within the correct Element (the correct Element creation tag block), via correct indenting~'nesting' ~ horizontal placement is VITALLY IMPORTANT), of course.\n\n[code:2nyvpjri]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;testing game stuff&quot;&gt;\n    &lt;gameid&gt;842278ef-87f7-4fa9-8a9f-7f81f2933f46&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n    &lt;author&gt;HK&lt;/author&gt;\n    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;\n    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;\n    &lt;category&gt;Simulation&lt;/category&gt;\n    &lt;difficulty&gt;Easy&lt;/difficulty&gt;\n    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:2nyvpjri]\n\n-------\n\nnow, let's add in the 'room' Room Object:\n\n[code:2nyvpjri]&lt;object name=&quot;room&quot;&gt;\n  // Attributes and~or other Objects\n&lt;/object&gt;[/code:2nyvpjri]\n\nagain the ' name=&quot;xxx&quot; ' is the 'object' creation tag's own Attribute\n\nand remember, the 'Object' Element holds~contains Attributes and~or other Objects\n\nthe 'inherit' Inherited Attributes add that Object Type (and all of its Attributes) to the Object, but let's not get into Object Types (quest's Classes~Groups), for now.\n\nlet's add an 'orc_1' (non-room and non-player) Object to our 'room' Room Object:\n\n[code:2nyvpjri]&lt;object name=&quot;room&quot;&gt;\n  &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;object name=&quot;orc_1&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n  &lt;/object&gt;\n&lt;/object&gt;[/code:2nyvpjri]\n\nand let's add an 'alias' String Attribute to the 'orc' Object:\n\n[code:2nyvpjri]&lt;object name=&quot;room&quot;&gt;\n  &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;object name=&quot;orc_1&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;alias&gt;orc&lt;/alias&gt;\n  &lt;/object&gt;\n&lt;/object&gt;[/code:2nyvpjri]\n\nand let's add a 'dead' Boolean Attribute to the 'orc' Object:\n\n[code:2nyvpjri]&lt;object name=&quot;room&quot;&gt;\n  &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;object name=&quot;orc_1&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;alias&gt;orc&lt;/alias&gt;\n    &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;[/code:2nyvpjri]\n\n// a shortened form for *all* Attributes is this:\n// &lt;attribute_name type=&quot;attribute_type&quot;&gt;Value_or_Expression&lt;/attribute_name&gt;\n//\n// for example using the 'dead' Boolean Attribute:\n// &lt;dead type=&quot;boolean&quot;&gt;false&lt;/dead&gt;\n//\n// ----------------\n//\n// and another shortened form *ONLY for 'true' Valued* Boolean (and Inherit too) Attributes (using the 'dead' Boolean as an example):\n// &lt;dead /&gt;\n// is the same as: &lt;dead type=&quot;boolean&quot;&gt;true&lt;/dead&gt;\n\nand let's add a 'description' Script Attribute to our 'room' Room Object:\n\n[code:2nyvpjri]&lt;object name=&quot;room&quot;&gt;\n  &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;alias&gt;orc&lt;/alias&gt;\n  &lt;object name=&quot;orc_1&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n    &lt;alias&gt;orc&lt;/alias&gt;\n  &lt;/object&gt;\n  &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;\n    if (orc_1&#46;dead = true) {\n      msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)\n    } else if (orc_1&#46;dead = false) {\n      msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;[/code:2nyvpjri]\n\nso, what we got in full now:\n\n(I am, and have been a bit previously, intentionally switching things around vertically, so you can see that it doesn't matter, long as you do it right)\n\n[code:2nyvpjri]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;xxx&quot;&gt;\n    &lt;gameid&gt;xxx&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n    &lt;author&gt;HK&lt;/author&gt;\n    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;\n    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;\n    &lt;category&gt;Simulation&lt;/category&gt;\n    &lt;difficulty&gt;Easy&lt;/difficulty&gt;\n    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;\n      if (orc_1&#46;dead = true) {\n        msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)\n      } else if (orc_1&#46;dead = false) {\n        msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)\n      }\n    &lt;/attr&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;orc_1&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;orc&lt;/alias&gt;\n      &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:2nyvpjri]\n\n---------------------\n\nand... I think you can now add in the default 'player' Player Object (a Player Object is REQUIRED) from here... and hopefully anything~everything else now too... maybe... hehe <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\n---------------------\n\nlastly, let's briefly show you the 'Function' Element, by having you put one in:\n\nthe 'Function' Element: holds~contains Scripting\n\n// the GUI~Editor's 'Verb' Element: holds~contains Scripting through (and only for~with) a specific Object\n// a Function is somewhat similar to your use of the GUI~Editor's 'whatever' Object's 'whatever' Verb, but let's ignore more explanation of Functions, other than what I hope you will gleam from testing~seeing~studying~playing with below:\n\n(look at the entire code below, to see everything that you need to add in)\n\n[code:2nyvpjri]&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;xxx&quot;&gt;\n    &lt;gameid&gt;xxx&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n    &lt;author&gt;HK&lt;/author&gt;\n    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;\n    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;\n    &lt;category&gt;Simulation&lt;/category&gt;\n    &lt;difficulty&gt;Easy&lt;/difficulty&gt;\n    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;\n      function_1\n      if (orc_1&#46;dead = true) {\n        msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)\n      } else if (orc_1&#46;dead = false) {\n        function_1\n        msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)\n        function_1\n      }\n      function_1\n    &lt;/attr&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;orc_1&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;orc&lt;/alias&gt;\n      &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=&quot;function_1&quot;&gt;\n    msg (&quot;blah blah blah&quot;)\n  &lt;/function&gt;\n&lt;/asl&gt;[/code:2nyvpjri]\n\n----------------------\n\ncomputers and hackers can read this (horizontal code structure), but we code noobs can't (we like our vertical code structure), lol:\n\n[code:2nyvpjri]&lt;asl version=&quot;550&quot;&gt;&lt;include ref=&quot;English&#46;aslx&quot; /&gt;&lt;include ref=&quot;Core&#46;aslx&quot; /&gt;&lt;game name=&quot;xxx&quot;&gt;&lt;gameid&gt;xxx&lt;/gameid&gt;&lt;version&gt;1&#46;0&lt;/version&gt;&lt;firstpublished&gt;2015&lt;/firstpublished&gt;&lt;author&gt;HK&lt;/author&gt;&lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;&lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;&lt;category&gt;Simulation&lt;/category&gt;&lt;difficulty&gt;Easy&lt;/difficulty&gt;&lt;cruelty&gt;Merficul&lt;/cruelty&gt;&lt;/game&gt;&lt;object name=&quot;room&quot;&gt;&lt;inherit name=&quot;editor_room&quot; /&gt;&lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;function_1 if (orc_1&#46;dead = true) { msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;) } else if (orc_1&#46;dead = false) { function_1 msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;) function_1 } function_1&lt;/attr&gt;&lt;object name=&quot;player&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;inherit name=&quot;editor_player&quot; /&gt;&lt;/object&gt;&lt;/object&gt;&lt;object name=&quot;orc_1&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;alias&gt;orc&lt;/alias&gt;&lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;&lt;/object&gt;&lt;function name=&quot;function_1&quot;&gt;msg (&quot;blah blah blah&quot;)&lt;/function&gt;&lt;/asl&gt;[/code:2nyvpjri]",
      "EditableFormat": "bbcode",
      "HTML": "let's create our own new game via directly in code:<br/><br/>--------------<br/><br/>here's what a new game's code looks like for reference for you:<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;xxx&quot;&gt;<br/>    &lt;gameid&gt;xxx&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>--------------<br/><br/>so, open up a new notepad, wordpad, or (preferably) notepad++, and save the blank file using the *.aslx extension (both your game file and~or any library files, use the same *.aslx extension)<br/><br/>notepad++ ( <!-- m --><a class=\"postlink\" href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a><!-- m --> )<br/><br/>once you downloaded and installed it, open~start it up, and within it, at the menu bar at the top of the screen, under the 'language' category, choose 'XML (eXtensible Markup Language)' as that is what quest code uses as its language. It'll color-code stuff for you, making it easier to read, write, and troubleshoot your quest coding.<br/><br/>-------------<br/><br/>INDENTATION ('nesting') IS VERY IMPORTANT, use the tab keyboard key for each level of indentation required (it's much better than using 2 spacebar keys... as I've learned the hard way, lol)<br/><br/>------------<br/><br/>first, create the 'asl' creation tag block<br/><br/>the 'asl' creation tag block is your entire game code, so everything has to be inside of it:<br/><br/><pre><code>&lt;asl&gt; // the beginning tag of the 'asl' block<br/>  // your entire mass of game code<br/>&lt;/asl&gt; // the ending tag of the 'asl' block</code></pre><br/><br/>the ' version=&quot;550&quot; ' inside of the beginning tag of the 'asl' creation tag block, is the 'asl' creation tag's own Attribute, this version number has to match up with your downloaded quest.exe version, for the engine to be able to read your game code.<br/><br/>----------<br/><br/>now, add in the two required libraries:<br/><br/>English.aslx<br/>Core.aslx<br/><br/>English.aslx sets the text to be in english<br/>Core.aslx is actually a collection of many core files which make up the engine<br/><br/>the 'English.aslx' library file MUST come first (be above), before the 'core.aslx' library file, as this is the order that the quest engine builds itself up.<br/><br/>the 'include ref' creation tag lines are your library files that your game uses, the quest engine is actually a bunch of library files, so if you're really good at programming you can completely design your own quest engine, quest is that powerful~customizable !!!<br/><br/><pre><code>&lt;include ref=&quot;English&#46;aslx&quot; /&gt; // beginning '&lt;include' and ending '/&gt;' creation tags on a single line<br/>&lt;include ref=&quot;Core&#46;aslx&quot; /&gt; // beginning '&lt;include' and ending '/&gt;' creation tags on a single line</code></pre><br/><br/>the 'ref=&quot;xxx.aslx&quot; ' is the 'include' creation tag's own Attribute, which is what library file is gotten and used for your building up the quest engine and your game<br/><br/>note that your actual physical library files themselves (*.aslx) must be in the same folder as your quest.exe and~or your game file (*.aslx) ~ I get confused on this, thus the 'and~or', lol. This is required for these code lines to actually be able to get the library files for usability.<br/><br/>------------<br/><br/>next we add in the required special 'game' Game Object 'creation' tag block, which holds your global~game settings and a bunch of other related special stuff:<br/><br/><pre><code>&lt;game&gt; // beginning creation tag<br/>  // Attributes<br/>&lt;/game&gt; // ending creation tag</code></pre><br/><br/>the ' name=&quot;xxx&quot; ' is the 'game' creation tag's own attribute, this is the name of your game.<br/><br/>the special 'game' Game Object is an Object, which means that it (as Objects) can hold~contain Attributes and~or other Objects.<br/><br/>the 'Object' Element: able to hold~contain Attributes and~or other Objects<br/><br/>the special 'game' Game Object, while it can hold~contain other Objects, it's not suppose to, as in the GUI~Editor, you can't add Objects into the special 'game' Game Object, so you shouldn't add Objects into the special 'game' Game Object, via in code, either.<br/><br/>the default Attributes of the special 'game' Game Object are:<br/><br/>&lt;gameid&gt;xxx&lt;/gameid&gt;<br/>&lt;version&gt;1.0&lt;/version&gt;<br/>&lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/><br/>(look at the 'game' Game Object in the GUI~Editor, do you recognize the options~settings 'version' and 'firstpublished' ??? After you complete this code writing of a default new game code, try changing the version or firstpublished in the GUI~Editor, save your game file, then check your game's code, or vice versa, change the 'version' or 'firstpublished' in code, and see what happens in the GUI~Editor)<br/><br/>the 'gameid' is a required String Attribute, using some algorithm to randomly generate a unique string, as this serves as the 'ID' for your game. Like a car has a licence plate, or you have: a Driver ID card or a Social Security Number or DNA or fingerprint or iris pattern or voice pattern, etc etc etc<br/><br/>// note:<br/>//<br/>// the 'name' String Attributes are the 'ID&quot; Attributes for quest, they MUST be unique.<br/>//<br/>// whereas, the 'alias' String Attributes don't have to be unique.<br/>//<br/>// for example:<br/><br/><pre><code>&lt;object name=&quot;orc&quot;&gt;<br/>&lt;/object&gt;<br/>&lt;object name=&quot;orc&quot;&gt;<br/>&lt;/object&gt;<br/><br/>ERROR!<br/><br/>VS<br/><br/>&lt;object name=&quot;orc_1&quot;&gt;<br/>  &lt;alias&gt;orc&lt;/alias&gt;<br/>&lt;/object&gt;<br/>&lt;object name=&quot;orc_2&quot;&gt;<br/>  &lt;alias&gt;orc&lt;/alias&gt;<br/>&lt;/object&gt;<br/><br/>NO error</code></pre><br/><br/>the 'version' (String or Double ~ not sure) Attribute and 'firstpublished' (String or Integer ~ not sure) Attribute, are just for your own documentation and information. Let's say I create a simple skeleton~bare bones game, leaving its version as '1.0', but then I go back and expand~improve upon my game, changing this version to being '2.0', basically it's a way for you to keep track of your game making's progress history. And 'firstpublished' is self-explanatory, lol.<br/><br/>well, let's add in some more Attributes via code (which we see in the GUI~Editor):<br/><br/>'attr' is used in code: conceptually it's short for 'attribute'<br/>'int' is used in code: conceptually it's short for 'integer'<br/><br/>full code form:<br/><br/>&lt;attr name=&quot;author&quot; type=&quot;string&quot;&gt;BenM&lt;/attr&gt;<br/><br/>or it's (a String Attribute only) shortened code form:<br/><br/>&lt;author&gt;BenM&lt;/author&gt; <br/><br/>recognize this Attribute? (see below)<br/><br/>in GUI~Editor:<br/><br/>'game' Game Object -&gt; (whatever the Tab~s)<br/><br/>(Object Name: game)<br/>Attribute Name: author<br/>Attribute Type: string<br/>Attribute Value: BenM<br/><br/>more Attributes:<br/><br/>&lt;description&gt;xxx&lt;/description&gt;<br/>&lt;subtitle&gt;xxx&lt;/subtitle&gt;<br/>&lt;category&gt;xxx&lt;/category&gt;<br/>&lt;difficulty&gt;xxx&lt;/difficulty&gt;<br/>&lt;cruelty&gt;xxx&lt;/cruelty&gt;<br/>// etc etc etc<br/><br/>for example:<br/><br/>// vertical placement of Attributes don't matter for the most part ~ there's a few exceptions, so long as those Attributes are placed within the correct Element (the correct Element creation tag block), via correct indenting~'nesting' ~ horizontal placement is VITALLY IMPORTANT), of course.<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;testing game stuff&quot;&gt;<br/>    &lt;gameid&gt;842278ef-87f7-4fa9-8a9f-7f81f2933f46&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>    &lt;author&gt;HK&lt;/author&gt;<br/>    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;<br/>    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;<br/>    &lt;category&gt;Simulation&lt;/category&gt;<br/>    &lt;difficulty&gt;Easy&lt;/difficulty&gt;<br/>    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>-------<br/><br/>now, let's add in the 'room' Room Object:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  // Attributes and~or other Objects<br/>&lt;/object&gt;</code></pre><br/><br/>again the ' name=&quot;xxx&quot; ' is the 'object' creation tag's own Attribute<br/><br/>and remember, the 'Object' Element holds~contains Attributes and~or other Objects<br/><br/>the 'inherit' Inherited Attributes add that Object Type (and all of its Attributes) to the Object, but let's not get into Object Types (quest's Classes~Groups), for now.<br/><br/>let's add an 'orc_1' (non-room and non-player) Object to our 'room' Room Object:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;object name=&quot;orc_1&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>and let's add an 'alias' String Attribute to the 'orc' Object:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;object name=&quot;orc_1&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;alias&gt;orc&lt;/alias&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>and let's add a 'dead' Boolean Attribute to the 'orc' Object:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;object name=&quot;orc_1&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;alias&gt;orc&lt;/alias&gt;<br/>    &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>// a shortened form for *all* Attributes is this:<br/>// &lt;attribute_name type=&quot;attribute_type&quot;&gt;Value_or_Expression&lt;/attribute_name&gt;<br/>//<br/>// for example using the 'dead' Boolean Attribute:<br/>// &lt;dead type=&quot;boolean&quot;&gt;false&lt;/dead&gt;<br/>//<br/>// ----------------<br/>//<br/>// and another shortened form *ONLY for 'true' Valued* Boolean (and Inherit too) Attributes (using the 'dead' Boolean as an example):<br/>// &lt;dead /&gt;<br/>// is the same as: &lt;dead type=&quot;boolean&quot;&gt;true&lt;/dead&gt;<br/><br/>and let's add a 'description' Script Attribute to our 'room' Room Object:<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;alias&gt;orc&lt;/alias&gt;<br/>  &lt;object name=&quot;orc_1&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>    &lt;alias&gt;orc&lt;/alias&gt;<br/>  &lt;/object&gt;<br/>  &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;<br/>    if (orc_1&#46;dead = true) {<br/>      msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)<br/>    } else if (orc_1&#46;dead = false) {<br/>      msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)<br/>    }<br/>  &lt;/attr&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>so, what we got in full now:<br/><br/>(I am, and have been a bit previously, intentionally switching things around vertically, so you can see that it doesn't matter, long as you do it right)<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;xxx&quot;&gt;<br/>    &lt;gameid&gt;xxx&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>    &lt;author&gt;HK&lt;/author&gt;<br/>    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;<br/>    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;<br/>    &lt;category&gt;Simulation&lt;/category&gt;<br/>    &lt;difficulty&gt;Easy&lt;/difficulty&gt;<br/>    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;<br/>      if (orc_1&#46;dead = true) {<br/>        msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)<br/>      } else if (orc_1&#46;dead = false) {<br/>        msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)<br/>      }<br/>    &lt;/attr&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;orc_1&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;orc&lt;/alias&gt;<br/>      &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>---------------------<br/><br/>and... I think you can now add in the default 'player' Player Object (a Player Object is REQUIRED) from here... and hopefully anything~everything else now too... maybe... hehe <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>---------------------<br/><br/>lastly, let's briefly show you the 'Function' Element, by having you put one in:<br/><br/>the 'Function' Element: holds~contains Scripting<br/><br/>// the GUI~Editor's 'Verb' Element: holds~contains Scripting through (and only for~with) a specific Object<br/>// a Function is somewhat similar to your use of the GUI~Editor's 'whatever' Object's 'whatever' Verb, but let's ignore more explanation of Functions, other than what I hope you will gleam from testing~seeing~studying~playing with below:<br/><br/>(look at the entire code below, to see everything that you need to add in)<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;xxx&quot;&gt;<br/>    &lt;gameid&gt;xxx&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>    &lt;author&gt;HK&lt;/author&gt;<br/>    &lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;<br/>    &lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;<br/>    &lt;category&gt;Simulation&lt;/category&gt;<br/>    &lt;difficulty&gt;Easy&lt;/difficulty&gt;<br/>    &lt;cruelty&gt;Merficul&lt;/cruelty&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;<br/>      function_1<br/>      if (orc_1&#46;dead = true) {<br/>        msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;)<br/>      } else if (orc_1&#46;dead = false) {<br/>        function_1<br/>        msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;)<br/>        function_1<br/>      }<br/>      function_1<br/>    &lt;/attr&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;orc_1&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;orc&lt;/alias&gt;<br/>      &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;function name=&quot;function_1&quot;&gt;<br/>    msg (&quot;blah blah blah&quot;)<br/>  &lt;/function&gt;<br/>&lt;/asl&gt;</code></pre><br/><br/>----------------------<br/><br/>computers and hackers can read this (horizontal code structure), but we code noobs can't (we like our vertical code structure), lol:<br/><br/><pre><code>&lt;asl version=&quot;550&quot;&gt;&lt;include ref=&quot;English&#46;aslx&quot; /&gt;&lt;include ref=&quot;Core&#46;aslx&quot; /&gt;&lt;game name=&quot;xxx&quot;&gt;&lt;gameid&gt;xxx&lt;/gameid&gt;&lt;version&gt;1&#46;0&lt;/version&gt;&lt;firstpublished&gt;2015&lt;/firstpublished&gt;&lt;author&gt;HK&lt;/author&gt;&lt;description&gt;this is just a game file for testing stuff&lt;/description&gt;&lt;subtitle&gt;HK's testing stuff game file&lt;/attr&gt;&lt;category&gt;Simulation&lt;/category&gt;&lt;difficulty&gt;Easy&lt;/difficulty&gt;&lt;cruelty&gt;Merficul&lt;/cruelty&gt;&lt;/game&gt;&lt;object name=&quot;room&quot;&gt;&lt;inherit name=&quot;editor_room&quot; /&gt;&lt;attr name=&quot;description&quot; type=&quot;script&quot;&gt;function_1 if (orc_1&#46;dead = true) { msg (&quot;There's a rotting dead orc corpse in the room with you&#46;&quot;) } else if (orc_1&#46;dead = false) { function_1 msg (&quot;There's an orc in the room with you&#46;&#46;&#46; you better kill it&#46;&#46;&#46; or it will likely kill you!&quot;) function_1 } function_1&lt;/attr&gt;&lt;object name=&quot;player&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;inherit name=&quot;editor_player&quot; /&gt;&lt;/object&gt;&lt;/object&gt;&lt;object name=&quot;orc_1&quot;&gt;&lt;inherit name=&quot;editor_object&quot; /&gt;&lt;alias&gt;orc&lt;/alias&gt;&lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;&lt;/object&gt;&lt;function name=&quot;function_1&quot;&gt;msg (&quot;blah blah blah&quot;)&lt;/function&gt;&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-08-13T09:14:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37599",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "My personal take: use the GUI for as much as you can. What I mean by that is, use the Quest GUI to set up as much of the boilerplate skeleton for things as you can. Why manually add in all the things the GUI will do for you for free?\n\nAs an example, if I'm going to make a new command, I don't jump into code view and start to code up a &lt;command&gt; tag. It's just not worth it to me (plus my memory is not as good as it used to be). Rather, I'll create a new command in the GUI editor, fill out the fields, and then where the script will be, I just add a single &quot;Print Message&quot; with text like &quot;xxx&quot;. That will set up the skeleton for the command. \n\nThen I switch to code view, find the &quot;msg(&quot;xxx&quot;)&quot;, delete it and begin writing my script. There's a lot you can do via the GUI to make your life easier (except the scripting part - I find creating script in the GUI editor tolerable for small things only and practically impossible for anything complex).\n\nSo I recommend: use the GUI for all of your game structuring. Use code view (or a text editor) almost exclusively for writing scripts. Of course, copy and paste works as well, if you have existing elements you want to duplicate somehow... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nAnd HK: it's not just NOOBS who prefer properly formatted code! The goal, at least with professional programmers, is to write code FOR HUMANS, as we're the ones who have to maintain, extend and fix it.",
      "EditableFormat": "bbcode",
      "HTML": "My personal take: use the GUI for as much as you can. What I mean by that is, use the Quest GUI to set up as much of the boilerplate skeleton for things as you can. Why manually add in all the things the GUI will do for you for free?<br/><br/>As an example, if I'm going to make a new command, I don't jump into code view and start to code up a &lt;command&gt; tag. It's just not worth it to me (plus my memory is not as good as it used to be). Rather, I'll create a new command in the GUI editor, fill out the fields, and then where the script will be, I just add a single &quot;Print Message&quot; with text like &quot;xxx&quot;. That will set up the skeleton for the command. <br/><br/>Then I switch to code view, find the &quot;msg(&quot;xxx&quot;)&quot;, delete it and begin writing my script. There's a lot you can do via the GUI to make your life easier (except the scripting part - I find creating script in the GUI editor tolerable for small things only and practically impossible for anything complex).<br/><br/>So I recommend: use the GUI for all of your game structuring. Use code view (or a text editor) almost exclusively for writing scripts. Of course, copy and paste works as well, if you have existing elements you want to duplicate somehow... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>And HK: it's not just NOOBS who prefer properly formatted code! The goal, at least with professional programmers, is to write code FOR HUMANS, as we're the ones who have to maintain, extend and fix it.",
      "PostDate": "2015-08-13T10:35:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37600",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "oh definately, for programmers in a company~business~firm~job~etc (though they don't want it outside of that group: ie OSes are encrypted, and maybe some don't want to be in such a group sharing their IP to that group as that code of theirs could be worth a lot of money, they'd rather have the money themselves, and not the entire company profiting off of their ip or other individual persons ~ it's really not fun when someone steals your IP and makes a fortune off of it... lots of such very famous examples in history... of many different types of IP too ~ other fields of science and non-science fields too, not just source code IPs),\n\nthough, if you're not writing code for others... if you don't want others to be able to easily read~know what your code is or is doing and how it is doing it... you write in machine language, encrypt it, protect it ('trap~counter malware or barriers'), hide it (secret additional code in things people don't suspect like within a picture that a pdf uses), and etc... laughs. The more unlawful or 'black' but lawful programming... where the goal isn't cooperation... but a personal interest...",
      "EditableFormat": "bbcode",
      "HTML": "oh definately, for programmers in a company~business~firm~job~etc (though they don't want it outside of that group: ie OSes are encrypted, and maybe some don't want to be in such a group sharing their IP to that group as that code of theirs could be worth a lot of money, they'd rather have the money themselves, and not the entire company profiting off of their ip or other individual persons ~ it's really not fun when someone steals your IP and makes a fortune off of it... lots of such very famous examples in history... of many different types of IP too ~ other fields of science and non-science fields too, not just source code IPs),<br/><br/>though, if you're not writing code for others... if you don't want others to be able to easily read~know what your code is or is doing and how it is doing it... you write in machine language, encrypt it, protect it ('trap~counter malware or barriers'), hide it (secret additional code in things people don't suspect like within a picture that a pdf uses), and etc... laughs. The more unlawful or 'black' but lawful programming... where the goal isn't cooperation... but a personal interest...",
      "PostDate": "2015-08-13T10:52:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37601",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It has absolutely nothing to do with corporate vs personal projects.\n\nWhen I said HUMANS, those who have to maintain, extend and fix code, I assumed you'd know that even individuals are considered human beings as well, and we have to do all of the same tasks even when working solo. Writing code in gibberish form will only hurt you down the road when *you* come back to it later. Good clean coding practices apply across the board.\n\nGranted, if you need to somehow encrypt your code - if what you're writing is so top secret that you don't want others to know about it - then you have to resort to all sorts of things to make that happen, and simply removing white space is not going to do it. (So what you posted above would make a hacker laugh). Also, that can happen whether you're working solo or in a company. (For example, I was responsible at an earlier job for &quot;tamper-proofing&quot; our CSS implementation for DVD playback.)\n\nObscuring code is only done for specific reasons, which have nothing to do with whatsoever with personal or solo projects vs larger scale ones. It's all the same, just on a different scale or perhaps with different compensation.",
      "EditableFormat": "bbcode",
      "HTML": "It has absolutely nothing to do with corporate vs personal projects.<br/><br/>When I said HUMANS, those who have to maintain, extend and fix code, I assumed you'd know that even individuals are considered human beings as well, and we have to do all of the same tasks even when working solo. Writing code in gibberish form will only hurt you down the road when *you* come back to it later. Good clean coding practices apply across the board.<br/><br/>Granted, if you need to somehow encrypt your code - if what you're writing is so top secret that you don't want others to know about it - then you have to resort to all sorts of things to make that happen, and simply removing white space is not going to do it. (So what you posted above would make a hacker laugh). Also, that can happen whether you're working solo or in a company. (For example, I was responsible at an earlier job for &quot;tamper-proofing&quot; our CSS implementation for DVD playback.)<br/><br/>Obscuring code is only done for specific reasons, which have nothing to do with whatsoever with personal or solo projects vs larger scale ones. It's all the same, just on a different scale or perhaps with different compensation.",
      "PostDate": "2015-08-13T11:00:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37602",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm just trying to enter the computing+programming field... though I've seen some instances of hackers ~ good programmers monitoring~reading~scanning horizontal code across a screen (such as code dealing with networking stuff~activity I presume or whatever possibly else) such as in looking for malicious intrusions~attacks upon their servers~etc, whereas it's very difficult for most people to do so, so this is my basis for my posts. I am aware of everything your saying too. I wasn't saying that horizontal code is any sort of deterant, though I didn't really explain until now was more from the basis of monitoring code, that good programmers can look at that stream of horizontal code and see any out-of-place code within it.",
      "EditableFormat": "bbcode",
      "HTML": "I'm just trying to enter the computing+programming field... though I've seen some instances of hackers ~ good programmers monitoring~reading~scanning horizontal code across a screen (such as code dealing with networking stuff~activity I presume or whatever possibly else) such as in looking for malicious intrusions~attacks upon their servers~etc, whereas it's very difficult for most people to do so, so this is my basis for my posts. I am aware of everything your saying too. I wasn't saying that horizontal code is any sort of deterant, though I didn't really explain until now was more from the basis of monitoring code, that good programmers can look at that stream of horizontal code and see any out-of-place code within it.",
      "PostDate": "2015-08-13T11:10:40+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37603",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Ok, I can see that, and perhaps I missed the nuance in what you were saying - more experienced programmers certainly can *read* such things. But I would not go so far as to say that NOOBs are the only one who *prefer* well written code, especially at the time it's being written. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nI used to love perusing binary dumps of file formats. It's like trying to work out a puzzle. Then I'd go back and write some nice readable code to make it work. lol\n\nI was just worried that you saw unformatted, blocky code as a sign of a non-NOOB (i.e good programmer). I just want to be sure you know it's not the case, and no one should aspire to writing stuff like that.",
      "EditableFormat": "bbcode",
      "HTML": "Ok, I can see that, and perhaps I missed the nuance in what you were saying - more experienced programmers certainly can *read* such things. But I would not go so far as to say that NOOBs are the only one who *prefer* well written code, especially at the time it's being written. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>I used to love perusing binary dumps of file formats. It's like trying to work out a puzzle. Then I'd go back and write some nice readable code to make it work. lol<br/><br/>I was just worried that you saw unformatted, blocky code as a sign of a non-NOOB (i.e good programmer). I just want to be sure you know it's not the case, and no one should aspire to writing stuff like that.",
      "PostDate": "2015-08-13T11:21:01+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37604",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I wasn't very clear in my posts... and I was being a bit over-dramatic too, in trying to emphasize that good programmers ~ hackers can make sense of horizontal code better than we 'noobs' can, as we're the noobs, and they're the pros, having seen+done lots of coding (and advanced coding), whereas we've not.\n\n-----------\n\nanyways one of my references was this tv documentary on one of our really top hackers... who was an unlawful hacker, but eventually got caught, and of course instead of going to jail now works for the government~corporations as a good guy now. For me it was really astounding at what he could do... seeing a glimpse into the programming world... programmers (and especially hackers, the best of the best of programmers) are really amazing... sighs.",
      "EditableFormat": "bbcode",
      "HTML": "I wasn't very clear in my posts... and I was being a bit over-dramatic too, in trying to emphasize that good programmers ~ hackers can make sense of horizontal code better than we 'noobs' can, as we're the noobs, and they're the pros, having seen+done lots of coding (and advanced coding), whereas we've not.<br/><br/>-----------<br/><br/>anyways one of my references was this tv documentary on one of our really top hackers... who was an unlawful hacker, but eventually got caught, and of course instead of going to jail now works for the government~corporations as a good guy now. For me it was really astounding at what he could do... seeing a glimpse into the programming world... programmers (and especially hackers, the best of the best of programmers) are really amazing... sighs.",
      "PostDate": "2015-08-13T11:27:07+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37605",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "To be clear, I don't know if I would call hackers &quot;the best of the best of the programmers&quot;. I would say hacking and programming are two different (but related) things. I would bet you could be a truly excellent hacker - maybe even the best - and not necessarily be able to write decent, good code. (By &quot;hacker&quot; I'm assuming you mean those who break into systems.) The skills may exist simultaneously in individuals (and one can lend itself to the other), but they are not coincident skills by any means.\n\nAnd, yes, it is fascinating stuff. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I have often wished to go into cyber security.",
      "EditableFormat": "bbcode",
      "HTML": "To be clear, I don't know if I would call hackers &quot;the best of the best of the programmers&quot;. I would say hacking and programming are two different (but related) things. I would bet you could be a truly excellent hacker - maybe even the best - and not necessarily be able to write decent, good code. (By &quot;hacker&quot; I'm assuming you mean those who break into systems.) The skills may exist simultaneously in individuals (and one can lend itself to the other), but they are not coincident skills by any means.<br/><br/>And, yes, it is fascinating stuff. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I have often wished to go into cyber security.",
      "PostDate": "2015-08-13T11:39:49+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37607",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "In german &quot;hacking&quot; is a synonym for writing functional but bad code <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->  This is not wrong basically . if I just need a short script I don't think about pretty code",
      "EditableFormat": "bbcode",
      "HTML": "In german &quot;hacking&quot; is a synonym for writing functional but bad code <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->  This is not wrong basically . if I just need a short script I don't think about pretty code",
      "PostDate": "2015-08-13T14:12:51+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37608",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "There is a great book called &quot;Hackers&quot;, which has the original meaning for a &quot;hacker&quot;: someone who likes to go deep into a system. That system could even be the menu at a Chinese restaurant (to use an example they had in the book)... Interesting stuff - and interesting how usages change over time.",
      "EditableFormat": "bbcode",
      "HTML": "There is a great book called &quot;Hackers&quot;, which has the original meaning for a &quot;hacker&quot;: someone who likes to go deep into a system. That system could even be the menu at a Chinese restaurant (to use an example they had in the book)... Interesting stuff - and interesting how usages change over time.",
      "PostDate": "2015-08-13T14:36:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37609",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "And the OP has fled... Lol",
      "EditableFormat": "bbcode",
      "HTML": "And the OP has fled... Lol",
      "PostDate": "2015-08-13T17:30:11+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37610",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote=&quot;XanMag&quot;:1edrtfhg]And the OP has fled... Lol[/quote:1edrtfhg]\n\n&quot;Uh, maybe I don't actually want to write code, if this is what it does to people...&quot;\n\n(lol)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>XanMag wrote:</cite>And the OP has fled... Lol</blockquote><br/><br/>&quot;Uh, maybe I don't actually want to write code, if this is what it does to people...&quot;<br/><br/>(lol)",
      "PostDate": "2015-08-13T19:15:15+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37613",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "my use of hacker:\n\nis a person who knows computers, tons of software, networking, and etc, inside and out. All levels of computing is known by a hacker, they're the most knowledgeable and thus the best, able to have unbreakable security and break into any security, due to their deep~full understanding of all levels of computing, their devices, networking, computer systems, and etc, should they choose to do so, for lawful purposes or unlawful purposes. They intimately know every aspect about anything and everything related to computers. They are the experts of the experts in computing, able to find vulnerables that no one else could even have imagined, and to secure their own computers and networks in ingenius and unbreakable ways and numerous layer upon layer of security.\n\nthe best hacker in the world:\n\nMotoko Kusanagi <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\n2nd best hacker:\n\nThe laughing Man\n\n3rd best hacker:\n\nGouda",
      "EditableFormat": "bbcode",
      "HTML": "my use of hacker:<br/><br/>is a person who knows computers, tons of software, networking, and etc, inside and out. All levels of computing is known by a hacker, they're the most knowledgeable and thus the best, able to have unbreakable security and break into any security, due to their deep~full understanding of all levels of computing, their devices, networking, computer systems, and etc, should they choose to do so, for lawful purposes or unlawful purposes. They intimately know every aspect about anything and everything related to computers. They are the experts of the experts in computing, able to find vulnerables that no one else could even have imagined, and to secure their own computers and networks in ingenius and unbreakable ways and numerous layer upon layer of security.<br/><br/>the best hacker in the world:<br/><br/>Motoko Kusanagi <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>2nd best hacker:<br/><br/>The laughing Man<br/><br/>3rd best hacker:<br/><br/>Gouda",
      "PostDate": "2015-08-13T21:14:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37615",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "[quote=&quot;HegemonKhan&quot;:3l8rus3e]my use of hacker:\n\nis a person who knows computers, tons of software, networking, and etc, inside and out. [/quote:3l8rus3e]\n\nWe call them nerds <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>HegemonKhan wrote:</cite>my use of hacker:<br/><br/>is a person who knows computers, tons of software, networking, and etc, inside and out. </blockquote><br/><br/>We call them nerds <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "PostDate": "2015-08-14T06:35:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37617",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[I hope I'm not taking this too seriously, considering your top choice for hacker is an anime character. lol]\n\nI don't want to drag this on too much longer, HK, but nowhere in your description did you mention programming. I do admit that there are people out there who do know computers inside and out, who *know* just about anything you'd want to know about computers, who can do all the things you say. But that's not crafting software. They can work their way in and out of Linux, maybe even making changes to Linux on a software level - but they couldn't have written Linux. They can move around inside Windows, writing small back doors, setting up security settings, installing software packages (all based on an extensive knowledge of the security world, what's out there, what need to be done, how people can break in) - but they couldn't have written Windows. They know how to find holes in a security system in a way that causes the government concern, but they've never written a computer game or a word processor or scientific analysis tools or automobile or plane control systems or anything larger than a fairly extensive script.\n\nThose examples probably seem a bit trite, and I wish I could convey what I'm trying to say in a better way.\n\nThere are undoubtedly hackers who are excellent programmers. All I'm saying is they don't go hand in hand necessarily.\n\nI have interviewed perspective job candidates with PhD degrees in computer science, people who have studied for years and know all sorts of things to do with CS (hardware, software, algorithms, etc). They can tell you how computers work on a hardware level. They can tell you which algorithms have which &quot;big-O&quot; behavior - and yet they can't write software. Why? Because writing software is not *knowing*. Writing software is *doing*. And it's something (just like anything else) that you have to do for a long time to get really good at. They say 10,000 hours for anything... Hackers have spent their 10,000 hours learning all about computer systems, learning where the holes are, learning how to create and defeat security, learning how the hardware is set up, learning about social engineering (e.g. how to get passwords out of people), learning how to cover their tracks, learning how to tweak this file or that, learning how write scripts to do god knows what, learning all that and so much more, so much more than I'll ever know, for example - but unless they've put in the time actually *writing software*, and I mean a long time writing large scale things (either on their own or for employ), then they will never be able to be considered the best of the best in terms of *programming*. Because programming is about *creating*, it's as much a craft as writing or painting or sculpting. And it's as much engineering as we can make it. lol\n\nYou may disagree with me, and that's fine. I just hope you realise that I've seen programming over decades of employment in a way that you might not have yet. And I can only hope that as you get more skilled, you will get involved in some really meaty projects that will show you just what it's all about when executed at a higher, more refined level.\n\nA thief who has spent his whole life (say) breaking into buildings, either for gain or not, someone who knows how buildings are put together (and so knows some architectural engineering), someone who knows how security systems work (and so knows some electrical engineering), someone who can study the work habits of the people in n high-rise building to figure out the best time to make an attempt (and so knows some social engineering), and all sorts of other arcane things build up from an incredible amount of experience gained over a long period of time such that they can enter and move through any building they wish - such people are amazing and unsurpassed at what they do.\n\nBut they'll never be Frank Lloyd Wright.\n\nThey'll never be involved in actually engineering a building, to have to worry about all the details you have to worry about to make sure it all doesn't fall down when you're done. \n\nThey may never even be involved in the actual building of anything of substance, being involved in all the minute step by step you have to go through,  pouring concrete, making sure how it dries, securing bolts, welding metal, making sure the joins are done properly...\n\nThey are amazing at what they do, but they will quite possibly never *create*.\n\nOf course, there are undoubtedly those who can and do. But &quot;hacker&quot; does not equate necessarily even with &quot;programmer&quot;, let alone the best of the best of. (I'm sure you can find examples of those where it does overlap. I'm not saying their exclusive.)\n\n&quot;And that's all I have to say about that.&quot; (Forrest Gump voice)\n\n[Hey! This is post 2222 for me. Not sure what it means... Ok, it doesn't mean anything. But it's a number, nonetheless.]",
      "EditableFormat": "bbcode",
      "HTML": "[I hope I'm not taking this too seriously, considering your top choice for hacker is an anime character. lol]<br/><br/>I don't want to drag this on too much longer, HK, but nowhere in your description did you mention programming. I do admit that there are people out there who do know computers inside and out, who *know* just about anything you'd want to know about computers, who can do all the things you say. But that's not crafting software. They can work their way in and out of Linux, maybe even making changes to Linux on a software level - but they couldn't have written Linux. They can move around inside Windows, writing small back doors, setting up security settings, installing software packages (all based on an extensive knowledge of the security world, what's out there, what need to be done, how people can break in) - but they couldn't have written Windows. They know how to find holes in a security system in a way that causes the government concern, but they've never written a computer game or a word processor or scientific analysis tools or automobile or plane control systems or anything larger than a fairly extensive script.<br/><br/>Those examples probably seem a bit trite, and I wish I could convey what I'm trying to say in a better way.<br/><br/>There are undoubtedly hackers who are excellent programmers. All I'm saying is they don't go hand in hand necessarily.<br/><br/>I have interviewed perspective job candidates with PhD degrees in computer science, people who have studied for years and know all sorts of things to do with CS (hardware, software, algorithms, etc). They can tell you how computers work on a hardware level. They can tell you which algorithms have which &quot;big-O&quot; behavior - and yet they can't write software. Why? Because writing software is not *knowing*. Writing software is *doing*. And it's something (just like anything else) that you have to do for a long time to get really good at. They say 10,000 hours for anything... Hackers have spent their 10,000 hours learning all about computer systems, learning where the holes are, learning how to create and defeat security, learning how the hardware is set up, learning about social engineering (e.g. how to get passwords out of people), learning how to cover their tracks, learning how to tweak this file or that, learning how write scripts to do god knows what, learning all that and so much more, so much more than I'll ever know, for example - but unless they've put in the time actually *writing software*, and I mean a long time writing large scale things (either on their own or for employ), then they will never be able to be considered the best of the best in terms of *programming*. Because programming is about *creating*, it's as much a craft as writing or painting or sculpting. And it's as much engineering as we can make it. lol<br/><br/>You may disagree with me, and that's fine. I just hope you realise that I've seen programming over decades of employment in a way that you might not have yet. And I can only hope that as you get more skilled, you will get involved in some really meaty projects that will show you just what it's all about when executed at a higher, more refined level.<br/><br/>A thief who has spent his whole life (say) breaking into buildings, either for gain or not, someone who knows how buildings are put together (and so knows some architectural engineering), someone who knows how security systems work (and so knows some electrical engineering), someone who can study the work habits of the people in n high-rise building to figure out the best time to make an attempt (and so knows some social engineering), and all sorts of other arcane things build up from an incredible amount of experience gained over a long period of time such that they can enter and move through any building they wish - such people are amazing and unsurpassed at what they do.<br/><br/>But they'll never be Frank Lloyd Wright.<br/><br/>They'll never be involved in actually engineering a building, to have to worry about all the details you have to worry about to make sure it all doesn't fall down when you're done. <br/><br/>They may never even be involved in the actual building of anything of substance, being involved in all the minute step by step you have to go through,  pouring concrete, making sure how it dries, securing bolts, welding metal, making sure the joins are done properly...<br/><br/>They are amazing at what they do, but they will quite possibly never *create*.<br/><br/>Of course, there are undoubtedly those who can and do. But &quot;hacker&quot; does not equate necessarily even with &quot;programmer&quot;, let alone the best of the best of. (I'm sure you can find examples of those where it does overlap. I'm not saying their exclusive.)<br/><br/>&quot;And that's all I have to say about that.&quot; (Forrest Gump voice)<br/><br/>[Hey! This is post 2222 for me. Not sure what it means... Ok, it doesn't mean anything. But it's a number, nonetheless.]",
      "PostDate": "2015-08-14T07:59:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37619",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks Jay for explaining more about programmers, still quite a layman, I always assumed that in being able to do all the hacking stuff, hackers must've a good sense with programming, as to me their hack programming was the same as programmers' programming. For a layman like myself, &quot;programming~coding was programming~coding&quot; until you've helped enlighten me in these last few posts, I now see that's not the case. Programming used for hacking is very different than programming for software creation. As ingenius as some hacks may be... they're not an entire super advanced, complex, and vast system that programmers create as software environments.",
      "EditableFormat": "bbcode",
      "HTML": "thanks Jay for explaining more about programmers, still quite a layman, I always assumed that in being able to do all the hacking stuff, hackers must've a good sense with programming, as to me their hack programming was the same as programmers' programming. For a layman like myself, &quot;programming~coding was programming~coding&quot; until you've helped enlighten me in these last few posts, I now see that's not the case. Programming used for hacking is very different than programming for software creation. As ingenius as some hacks may be... they're not an entire super advanced, complex, and vast system that programmers create as software environments.",
      "PostDate": "2015-08-14T08:51:17+01:00",
      "LastEditDate": null
    }
  ]
}
