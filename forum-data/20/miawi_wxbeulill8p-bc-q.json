{
  "Topic": {
    "TopicId": "miawi_wxbeulill8p-bc-q",
    "ForumId": "20",
    "Title": "LISP/MDL/ZIL routine to JS function - Am I doing this right?",
    "LastUpdated": "2021-05-19T19:15:15.0558081Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4c983336-2333-4399-8ffb-8cab21af9765",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The [original routine in ZIL](https://github.com/historicalsource/hitchhikersguide-gold/blob/master/misc.zil#L13 \"Click here to view the entire file on GitHub\"):\r\n\r\n```\r\n<ROUTINE RUNNING? (RTN \"AUX\" C E TICK)\r\n\t <SET E <REST ,C-TABLE ,C-TABLELEN>>\r\n\t <SET C <REST ,C-TABLE ,C-INTS>>\r\n\t <REPEAT ()\r\n\t\t <COND (<==? .C .E> <RFALSE>)\r\n\t\t       (<EQUAL? <GET .C ,C-RTN> .RTN>\r\n\t\t\t<COND (<OR <0? <GET .C ,C-ENABLED?>>\r\n\t\t\t\t   <0? <SET TICK <GET .C ,C-TICK>>>\r\n\t\t\t\t   <G? .TICK 1>>\r\n\t\t\t       <RFALSE>)\r\n\t\t\t      (T <RTRUE>)>)>\r\n\t\t <SET C <REST .C ,C-INTLEN>>>>\r\n```\r\n\r\n\r\nMy attempt:\r\n\r\n```js\r\nfunction runningCheck(RTN){\r\n    let C, E, TICK;\r\n    E = C_TABLE.slice(C_TABLELEN);\r\n    C = C_TABLE.slice(C_INTS);\r\n    let bool = false;// because JS can't return from a while loop!\r\n    while(C !== E){\r\n        if(C === E){ bool = false;break;}\r\n        if(C[C_RTN] === RTN){\r\n            TICK = C[C_TICK];\r\n            if (C[C_ENABLED_CHECK] === 0 || TICK === 0 || TICK > 1){\r\n                bool = false;\r\n                break;\r\n            } else {\r\n                bool = true;\r\n                break;\r\n            }\r\n        }\r\n        C = C.slice[C_INTLEN];\r\n    }\r\n    return bool;\r\n}\r\n```\r\n\r\n---\r\nIt looks like ```REST``` is the same thing as ```array.shift()``` if there is only one arg, but a second arg would mean ```array.slice(secondArg)```.\r\n\r\nSo:\r\n\r\n```\r\n<SET E <REST ,ARRAY ,INT>>\r\n```\r\n\r\n. . . is this in JS:\r\n\r\n```\r\nlet E = ARRAY.slice(INT);\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/118866035-3305cf00-b8a7-11eb-8cc0-3deaf19386e8.png)\r\n\r\nhttps://ifarchive.org/if-archive/programming/mdl/manuals/MDL_Programming_Language.pdf (pages 52 - 53)\r\n\r\n---\r\nAlso, I'm guessing that ```==?``` and ```EQUAL?``` are (basically) the same thing (as far as I should be concerned)?\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/118866901-1cac4300-b8a8-11eb-9c9d-8562f29962a3.png)\r\n![image](https://user-images.githubusercontent.com/30656341/118866968-3057a980-b8a8-11eb-9c35-b199fc0683cb.png)\r\n\r\n---\r\nThis is all I could find concerning ```EQUAL``` (not from the MDL manual):\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/118869241-c096ee00-b8aa-11eb-9f30-9c1a260464cd.png)\r\n\r\nhttps://eblong.com/infocom/other/Learning_ZIL_Meretzky_1995.pdf (pages 15 - 16)",
      "EditableFormat": "markdown",
      "HTML": "<p>The <a href=\"https://github.com/historicalsource/hitchhikersguide-gold/blob/master/misc.zil#L13\" title=\"Click here to view the entire file on GitHub\">original routine in ZIL</a>:</p>\n<pre><code>&lt;ROUTINE RUNNING? (RTN \"AUX\" C E TICK)\n\t &lt;SET E &lt;REST ,C-TABLE ,C-TABLELEN&gt;&gt;\n\t &lt;SET C &lt;REST ,C-TABLE ,C-INTS&gt;&gt;\n\t &lt;REPEAT ()\n\t\t &lt;COND (&lt;==? .C .E&gt; &lt;RFALSE&gt;)\n\t\t       (&lt;EQUAL? &lt;GET .C ,C-RTN&gt; .RTN&gt;\n\t\t\t&lt;COND (&lt;OR &lt;0? &lt;GET .C ,C-ENABLED?&gt;&gt;\n\t\t\t\t   &lt;0? &lt;SET TICK &lt;GET .C ,C-TICK&gt;&gt;&gt;\n\t\t\t\t   &lt;G? .TICK 1&gt;&gt;\n\t\t\t       &lt;RFALSE&gt;)\n\t\t\t      (T &lt;RTRUE&gt;)&gt;)&gt;\n\t\t &lt;SET C &lt;REST .C ,C-INTLEN&gt;&gt;&gt;&gt;\n</code></pre>\n<p>My attempt:</p>\n<pre><code>function runningCheck(RTN){\n    let C, E, TICK;\n    E = C_TABLE.slice(C_TABLELEN);\n    C = C_TABLE.slice(C_INTS);\n    let bool = false;// because JS can't return from a while loop!\n    while(C !== E){\n        if(C === E){ bool = false;break;}\n        if(C[C_RTN] === RTN){\n            TICK = C[C_TICK];\n            if (C[C_ENABLED_CHECK] === 0 || TICK === 0 || TICK &gt; 1){\n                bool = false;\n                break;\n            } else {\n                bool = true;\n                break;\n            }\n        }\n        C = C.slice[C_INTLEN];\n    }\n    return bool;\n}\n</code></pre>\n<hr>\n<p>It looks like <code>REST</code> is the same thing as <code>array.shift()</code> if there is only one arg, but a second arg would mean <code>array.slice(secondArg)</code>.</p>\n<p>So:</p>\n<pre><code>&lt;SET E &lt;REST ,ARRAY ,INT&gt;&gt;\n</code></pre>\n<p>. . . is this in JS:</p>\n<pre><code>let E = ARRAY.slice(INT);\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/118866035-3305cf00-b8a7-11eb-8cc0-3deaf19386e8.png\" alt=\"image\"></p>\n<p>https://ifarchive.org/if-archive/programming/mdl/manuals/MDL_Programming_Language.pdf (pages 52 - 53)</p>\n<hr>\n<p>Also, I'm guessing that <code>==?</code> and <code>EQUAL?</code> are (basically) the same thing (as far as I should be concerned)?</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/118866901-1cac4300-b8a8-11eb-9c9d-8562f29962a3.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/30656341/118866968-3057a980-b8a8-11eb-9c35-b199fc0683cb.png\" alt=\"image\"></p>\n<hr>\n<p>This is all I could find concerning <code>EQUAL</code> (not from the MDL manual):</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/118869241-c096ee00-b8aa-11eb-9f30-9c1a260464cd.png\" alt=\"image\"></p>\n<p>https://eblong.com/infocom/other/Learning_ZIL_Meretzky_1995.pdf (pages 15 - 16)</p>\n\n",
      "PostDate": "2021-05-19T19:15:15.0558081Z",
      "LastEditDate": "2021-05-22T20:13:41.4255294Z",
      "link": null
    },
    {
      "PostId": "4ebad168-c193-497a-9428-0fbeb8fe72aa",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wait. . .\r\n\r\nI just realized . . .\r\n\r\nThose poor guys didn't have ```for``` or ```foreach``` to work with lists/tables. That's why they keep using ```REPEAT()``` loops! They're just iterating lists, aren't they!?!?!\r\n\r\nIn fact, it looks like nearly all the \"mechanics\" of a ZIL game are using lists as the gears.\r\n\r\n...and *that's* why Inform 7 code tends to use tables for anything more complex than iterating through a list! It was reverse-engineered to behave like ZIL did, without anyone involved having ever seen any ZIL code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Wait. . .</p>\n<p>I just realized . . .</p>\n<p>Those poor guys didn't have <code>for</code> or <code>foreach</code> to work with lists/tables. That's why they keep using <code>REPEAT()</code> loops! They're just iterating lists, aren't they!?!?!</p>\n<p>In fact, it looks like nearly all the \"mechanics\" of a ZIL game are using lists as the gears.</p>\n<p>...and <em>that's</em> why Inform 7 code tends to use tables for anything more complex than iterating through a list! It was reverse-engineered to behave like ZIL did, without anyone involved having ever seen any ZIL code.</p>\n\n",
      "PostDate": "2021-05-22T20:19:18.6730073Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "933124da-ab84-4d1c-bd74-a353ba1cf5a3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Those poor guys didn't have for or foreach to work with lists/tables.\r\n\r\nInterestingly, LISP stood for LISt Processor. I believe it was the first to have lists as a basic data type. However, \"lists\" wasn't really an accurate name, as a list had exactly 2 elements. The commands `car` and `cdr` return those elements. If I remember correctly, those two became `GET` and `REST` respectively in MDL.\r\n\r\nBasically, a list had 2 elements, \"a\" and \"d\". Usually, you would have \"a\" pointing to a data element, and \"d\" pointing to the next list;  with the last \"d\" pointing to null. So when you loop over a list, it's usually recursive. \"If 'a' is the element we want, return it. Otherwise return the result of calling this function on the contents of 'd'\"\r\n\r\nIt was also common to have a double list; where every \"a\" points to another list whose \"a\" is the key and \"d\" is the value.\r\n\r\nIn scheme (a more human-readable LISP variant), you had functions named things like `cdddddar` which could look deeper into a list; but these were implemented essentially as macros; so `(cdddar l)` would expand to `(car (cdr (cdr (cdr l))))`.\r\n\r\nMDL makes it a bit more elegant by giving REST a second parameter. So you can write `<REST l ,6>` instead of `(cddddddr l)`. And you also had a function to assemble a table (a structure made up of lists), so you could do `<DTABLE 'foo 'bar 'baz>` instead of `(cons 'foo (cons 'bar (cons 'baz #end)))`. (`cons` takes 2 parameters; the \"a\" and \"d\" elements to compose into a list)\r\n\r\nIt looks like ZIL also has strings; the basic data type in LISP was an \"atom\", which can either be a number, a reserved token like #null or #end, a function, or a word. However Scheme (and maybe ZIL; I'm not sure) provides a string type with double quotes which is treated internally as a table of individual words.\r\n\r\n(Yes, I said function. The biggest strong point of LISP and MDL compared to contemporary languages was their LAMBDA operator, which is basically the `=>` operator in JS. Despite being the language's biggest strength, I remember reading that this feature was dropped early in ZIL's development because of memory constraints)\r\n\r\nLook at those data types… it seems like these languages were optimised very heavily for writing a specific type of software: chatbots with machine learning. And this really is the case. LISP was the language of choice for AI research until the last decade.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Those poor guys didn't have for or foreach to work with lists/tables.</p>\n</blockquote>\n<p>Interestingly, LISP stood for LISt Processor. I believe it was the first to have lists as a basic data type. However, \"lists\" wasn't really an accurate name, as a list had exactly 2 elements. The commands <code>car</code> and <code>cdr</code> return those elements. If I remember correctly, those two became <code>GET</code> and <code>REST</code> respectively in MDL.</p>\n<p>Basically, a list had 2 elements, \"a\" and \"d\". Usually, you would have \"a\" pointing to a data element, and \"d\" pointing to the next list;  with the last \"d\" pointing to null. So when you loop over a list, it's usually recursive. \"If 'a' is the element we want, return it. Otherwise return the result of calling this function on the contents of 'd'\"</p>\n<p>It was also common to have a double list; where every \"a\" points to another list whose \"a\" is the key and \"d\" is the value.</p>\n<p>In scheme (a more human-readable LISP variant), you had functions named things like <code>cdddddar</code> which could look deeper into a list; but these were implemented essentially as macros; so <code>(cdddar l)</code> would expand to <code>(car (cdr (cdr (cdr l))))</code>.</p>\n<p>MDL makes it a bit more elegant by giving REST a second parameter. So you can write <code>&lt;REST l ,6&gt;</code> instead of <code>(cddddddr l)</code>. And you also had a function to assemble a table (a structure made up of lists), so you could do <code>&lt;DTABLE 'foo 'bar 'baz&gt;</code> instead of <code>(cons 'foo (cons 'bar (cons 'baz #end)))</code>. (<code>cons</code> takes 2 parameters; the \"a\" and \"d\" elements to compose into a list)</p>\n<p>It looks like ZIL also has strings; the basic data type in LISP was an \"atom\", which can either be a number, a reserved token like #null or #end, a function, or a word. However Scheme (and maybe ZIL; I'm not sure) provides a string type with double quotes which is treated internally as a table of individual words.</p>\n<p>(Yes, I said function. The biggest strong point of LISP and MDL compared to contemporary languages was their LAMBDA operator, which is basically the <code>=&gt;</code> operator in JS. Despite being the language's biggest strength, I remember reading that this feature was dropped early in ZIL's development because of memory constraints)</p>\n<p>Look at those data types… it seems like these languages were optimised very heavily for writing a specific type of software: chatbots with machine learning. And this really is the case. LISP was the language of choice for AI research until the last decade.</p>\n\n",
      "PostDate": "2021-05-22T20:46:24.6739644Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "322f756d-3577-4cbf-8abf-6b94c4eb26df",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow. I actually understood most of that.\r\n\r\nSo, if I have :\r\n\r\n```\r\nlet arr1 = [ \"foo\", \"bar\", \"XanMagSux\" ];\r\n```\r\n\r\nIn ZIL/MDL/LISP, there was no way to just do ```arr1[2]```?\r\n\r\nAll I could do was ```arr[0]``` (which is \"foo\") or ```arr[1]``` (which is \"bar\"). Beyond that, as long as ```arr[1]``` isn't ```null```, that means I've still got more items to access.\r\n\r\n..and to access more I'd have to use a variable to copy the ```REST``` of the list then work from there all over again.\r\n\r\nAlso, I could get the ```REST``` of a list starting from whatever index I choose, to narrow the \"search\".\r\n\r\nRight?",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow. I actually understood most of that.</p>\n<p>So, if I have :</p>\n<pre><code>let arr1 = [ \"foo\", \"bar\", \"XanMagSux\" ];\n</code></pre>\n<p>In ZIL/MDL/LISP, there was no way to just do <code>arr1[2]</code>?</p>\n<p>All I could do was <code>arr[0]</code> (which is \"foo\") or <code>arr[1]</code> (which is \"bar\"). Beyond that, as long as <code>arr[1]</code> isn't <code>null</code>, that means I've still got more items to access.</p>\n<p>..and to access more I'd have to use a variable to copy the <code>REST</code> of the list then work from there all over again.</p>\n<p>Also, I could get the <code>REST</code> of a list starting from whatever index I choose, to narrow the \"search\".</p>\n<p>Right?</p>\n\n",
      "PostDate": "2021-05-22T21:20:25.4158729Z",
      "LastEditDate": "2021-05-22T21:20:57.7979688Z",
      "link": null
    },
    {
      "PostId": "4c26f035-dbfd-47c6-a118-23af5595ceba",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> All I could do was arr[0] (which is \"foo\") or arr[1] (which is \"bar\")\r\n\r\nNot really. Your list would look more like: `[ \"foo\", [\"bar\", [\"XanMagSux\", null ]]]`\r\n\r\nSo you do `arr[0]` if you want the first element (GET).\r\nOr you do `arr[1]` (REST) to get the rest of the list, which is itself a list.\r\n\r\nSo to get the `n`th element of a list, you'd have a recursive function that looks like:\r\n```\r\ngetelement = function (n, arr) {\r\n  if (arr == null) {\r\n    return NOTFOUND;\r\n  } elseif (n == 0) {\r\n    return arr[0];\r\n  } else {\r\n    return getelement(n-1. arr[1]);\r\n  }\r\n}\r\n```\r\nThis is really inefficient, and memory hungry. There is a reason LISP wasn't widely used on desktop until memory was cheap.\r\nBut… it turns out that once you get your head around thinking of lists like this rather than a numbered array, some of the weirder AI stuff feels more natural in this mental paradigm. It's weird and fun :)\r\n\r\n\r\nEDIT: And if you think \"why not just use an array?\", remember that at the time arrays in other languages were treated as pointers with some syntactic sugar.\r\n\r\nA pointer is an int which represents a physical address in memory. To get the nth element of an array, you would multiply n by the size in bytes of whatever data type the array contained, and add it onto the pointer. That means that you need enough space in memory *in one continuous range* to accommodate the whole array. And because the system doesn't know which ints are going to be used as pointers, it can't shuffle things around to find a big enough area of memory if you want to add to an existing array. You need to know how many elements an array will have when you allocate the memory for it, and all elements in an array need to be the same size.\r\n\r\nHaving every list being a load of two-element lists pointing to each other means you don't need to know nearly as much about your data when writing the program.\r\n\r\nModern languages give you much more flexibility because they mostly use a hybrid of these two methods behind the scenes, and do a hell of a lot of work so you don't need to think about it.\r\n\r\nOddly enough, it appears that Quest's dictionaries owe a lot to LISP dictionary tables.\r\nThat is, the difference between a list and a dictionary is that where a list stores each value, a dictionary stores a two-element mini-list whose elements are a key and a value.\r\n\r\nTranslating old LISP-style code into JS, your dictionary might look like:\r\n```\r\nvar dict = [\r\n[\"color\", \"blue\"], [\r\n    [\"fruit\", \"peaches\"], [\r\n        [\"fish\", \"herring\"],\r\n            null\r\n        ]\r\n    ]\r\n];\r\n```\r\nand you'd access it with a function like:\r\n```\r\ngetdictionaryelement = function (key, arr) {\r\n  if (arr == null) {\r\n    return NOTFOUND;\r\n  } elseif (key == arr[0][0]) {\r\n    return arr[0][1];\r\n  } else {\r\n    return getdictionaryelement(key. arr[1]);\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>All I could do was arr[0] (which is \"foo\") or arr[1] (which is \"bar\")</p>\n</blockquote>\n<p>Not really. Your list would look more like: <code>[ \"foo\", [\"bar\", [\"XanMagSux\", null ]]]</code></p>\n<p>So you do <code>arr[0]</code> if you want the first element (GET).<br>\nOr you do <code>arr[1]</code> (REST) to get the rest of the list, which is itself a list.</p>\n<p>So to get the <code>n</code>th element of a list, you'd have a recursive function that looks like:</p>\n<pre><code>getelement = function (n, arr) {\n  if (arr == null) {\n    return NOTFOUND;\n  } elseif (n == 0) {\n    return arr[0];\n  } else {\n    return getelement(n-1. arr[1]);\n  }\n}\n</code></pre>\n<p>This is really inefficient, and memory hungry. There is a reason LISP wasn't widely used on desktop until memory was cheap.<br>\nBut… it turns out that once you get your head around thinking of lists like this rather than a numbered array, some of the weirder AI stuff feels more natural in this mental paradigm. It's weird and fun :)</p>\n<p>EDIT: And if you think \"why not just use an array?\", remember that at the time arrays in other languages were treated as pointers with some syntactic sugar.</p>\n<p>A pointer is an int which represents a physical address in memory. To get the nth element of an array, you would multiply n by the size in bytes of whatever data type the array contained, and add it onto the pointer. That means that you need enough space in memory <em>in one continuous range</em> to accommodate the whole array. And because the system doesn't know which ints are going to be used as pointers, it can't shuffle things around to find a big enough area of memory if you want to add to an existing array. You need to know how many elements an array will have when you allocate the memory for it, and all elements in an array need to be the same size.</p>\n<p>Having every list being a load of two-element lists pointing to each other means you don't need to know nearly as much about your data when writing the program.</p>\n<p>Modern languages give you much more flexibility because they mostly use a hybrid of these two methods behind the scenes, and do a hell of a lot of work so you don't need to think about it.</p>\n<p>Oddly enough, it appears that Quest's dictionaries owe a lot to LISP dictionary tables.<br>\nThat is, the difference between a list and a dictionary is that where a list stores each value, a dictionary stores a two-element mini-list whose elements are a key and a value.</p>\n<p>Translating old LISP-style code into JS, your dictionary might look like:</p>\n<pre><code>var dict = [\n[\"color\", \"blue\"], [\n    [\"fruit\", \"peaches\"], [\n        [\"fish\", \"herring\"],\n            null\n        ]\n    ]\n];\n</code></pre>\n<p>and you'd access it with a function like:</p>\n<pre><code>getdictionaryelement = function (key, arr) {\n  if (arr == null) {\n    return NOTFOUND;\n  } elseif (key == arr[0][0]) {\n    return arr[0][1];\n  } else {\n    return getdictionaryelement(key. arr[1]);\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2021-05-22T21:52:53.5791621Z",
      "LastEditDate": "2021-05-22T22:11:46.3228949Z",
      "link": null
    },
    {
      "PostId": "7bd42bf5-c10d-4491-a9e5-ec0d7d5f3fb5",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> A pointer is an int which represents a physical address in memory. \r\n\r\nAh.\r\n\r\n```\r\n                <SET PT <GETPT ,HERE ,PRSO>>\r\n\t\t<COND (<EQUAL? <SET PTS <PTSIZE .PT>> ,UEXIT>\r\n```\r\n\r\nA bit of the ```walk``` verb from Hitchhiker's.\r\n\r\n```PT``` is a local variable.\r\n\r\n```GETPT``` is getting the property ```PRSO``` of ```HERE``` and setting ```PT``` to that value.\r\n\r\n```PRSO``` is the parser object (a global variable; sometimes the object after X FOO; sometimes just text after TYPE \"HELLO WORLD\"). ```HERE``` is a global variable that targets the current room.\r\n\r\nIn the ZIL world, there are a few types of exits: UEXIT (unconditional exit), NEXIT (nonexit (can't go that way)), CEXIT (conditional exit; to BASEMENT if CYCLOPS-FLED else \"The door is nailed shut.\"), FEXIT (function exit; just a scipt exit), and DEXIT (door exit).\r\n\r\nHere's another bit:\r\n\r\n```\r\n                  (<EQUAL? .PTS ,FEXIT>\r\n\t\t       <COND (<SET RM <APPLY <GET .PT ,FEXITFCN>>>\r\n```\r\n\r\n---\r\nSo, I type GO SOUTH.\r\n\r\nCrap, I forgot that part. Here's how rooms are set up:\r\n\r\n```\r\n<ROOM BEDROOM\r\n      (LOC ROOMS)\r\n      (SYNONYM TRAVEL)\r\n      (ADJECTIVE TIME)\r\n      (DESC \"Bedroom\")\r\n      (SOUTH PER BEDROOM-EXIT-F)\r\n      (OUT PER BEDROOM-EXIT-F)\r\n      (EAST TO KITCHEN)\r\n      (WEST TO STRANGE-PASSAGE IF CYCLOPS-FLED ELSE\"The wooden door is nailed shut.\")\r\n```\r\n\r\n---\r\nSo, I enter GO EAST.\r\n\r\nNow, the ```PRSO``` is EAST.\r\n\r\n(The ```PRSA``` is GO, but that's besides the point.)\r\n\r\nSo, the code will now set ```PT``` to the value of ```HERE[PRSO]```.\r\n\r\nSo, ```HERE``` is the current location, and it has a \"EAST\" property which is \"TO KITCHEN\". This is an unconditional exit (UEXIT).\r\n\r\nSo...\r\n\r\n```<COND (<EQUAL? <SET PTS <PTSIZE .PT>> ,UEXIT>```\r\n\r\nTo break that down, first we set the local variable ```PTS``` to ```<PTSIZE PT>```.\r\n\r\nWe already set ```PT``` to ```HERE[PRSO]```, which is a UEXIT value: \"TO KITCHEN\".\r\n\r\nSo, ```PTSIZE``` is getting the pointer size of the current room object's SOUTH property and matching that with the pointer value that matches the value of ```UEXIT```?\r\n\r\nAm I on the right track?\r\n\r\n(If this is boring you, feel free to ignore me. I think I'm slowly figuring it out.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>A pointer is an int which represents a physical address in memory.</p>\n</blockquote>\n<p>Ah.</p>\n<pre><code>                &lt;SET PT &lt;GETPT ,HERE ,PRSO&gt;&gt;\n\t\t&lt;COND (&lt;EQUAL? &lt;SET PTS &lt;PTSIZE .PT&gt;&gt; ,UEXIT&gt;\n</code></pre>\n<p>A bit of the <code>walk</code> verb from Hitchhiker's.</p>\n<p><code>PT</code> is a local variable.</p>\n<p><code>GETPT</code> is getting the property <code>PRSO</code> of <code>HERE</code> and setting <code>PT</code> to that value.</p>\n<p><code>PRSO</code> is the parser object (a global variable; sometimes the object after X FOO; sometimes just text after TYPE \"HELLO WORLD\"). <code>HERE</code> is a global variable that targets the current room.</p>\n<p>In the ZIL world, there are a few types of exits: UEXIT (unconditional exit), NEXIT (nonexit (can't go that way)), CEXIT (conditional exit; to BASEMENT if CYCLOPS-FLED else \"The door is nailed shut.\"), FEXIT (function exit; just a scipt exit), and DEXIT (door exit).</p>\n<p>Here's another bit:</p>\n<pre><code>                  (&lt;EQUAL? .PTS ,FEXIT&gt;\n\t\t       &lt;COND (&lt;SET RM &lt;APPLY &lt;GET .PT ,FEXITFCN&gt;&gt;&gt;\n</code></pre>\n<hr>\n<p>So, I type GO SOUTH.</p>\n<p>Crap, I forgot that part. Here's how rooms are set up:</p>\n<pre><code>&lt;ROOM BEDROOM\n      (LOC ROOMS)\n      (SYNONYM TRAVEL)\n      (ADJECTIVE TIME)\n      (DESC \"Bedroom\")\n      (SOUTH PER BEDROOM-EXIT-F)\n      (OUT PER BEDROOM-EXIT-F)\n      (EAST TO KITCHEN)\n      (WEST TO STRANGE-PASSAGE IF CYCLOPS-FLED ELSE\"The wooden door is nailed shut.\")\n</code></pre>\n<hr>\n<p>So, I enter GO EAST.</p>\n<p>Now, the <code>PRSO</code> is EAST.</p>\n<p>(The <code>PRSA</code> is GO, but that's besides the point.)</p>\n<p>So, the code will now set <code>PT</code> to the value of <code>HERE[PRSO]</code>.</p>\n<p>So, <code>HERE</code> is the current location, and it has a \"EAST\" property which is \"TO KITCHEN\". This is an unconditional exit (UEXIT).</p>\n<p>So...</p>\n<p><code>&lt;COND (&lt;EQUAL? &lt;SET PTS &lt;PTSIZE .PT&gt;&gt; ,UEXIT&gt;</code></p>\n<p>To break that down, first we set the local variable <code>PTS</code> to <code>&lt;PTSIZE PT&gt;</code>.</p>\n<p>We already set <code>PT</code> to <code>HERE[PRSO]</code>, which is a UEXIT value: \"TO KITCHEN\".</p>\n<p>So, <code>PTSIZE</code> is getting the pointer size of the current room object's SOUTH property and matching that with the pointer value that matches the value of <code>UEXIT</code>?</p>\n<p>Am I on the right track?</p>\n<p>(If this is boring you, feel free to ignore me. I think I'm slowly figuring it out.)</p>\n\n",
      "PostDate": "2021-05-23T03:10:21.2082913Z",
      "LastEditDate": "2021-05-23T05:27:29.412146Z",
      "link": null
    },
    {
      "PostId": "5dd9172d-0ac3-4de8-bb5f-5eef20fd2b83",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ALSO . . . .\r\n\r\nMost objects (in-game objects are actually objects (I think?)) have a FLAGS property, like:\r\n\r\n```\r\n<FLAGS NDESCBIT TAKEBIT TRYTAKEBIT NARTICLEBIT>\r\n```\r\n\r\n---\r\nNDESCBIT = ```object.scenery = true```\r\n\r\nTAKEBIT = ```object.take = true```\r\n\r\nTRYTAKEBIT = \r\n\r\n```\r\nobject.take = { \r\n  if(foo) {\r\n    AddToInventory(object)\r\n    this.take = true\r\n  }\r\n  else { \r\n    msg(\"Bar first!\")\r\n  }\r\n```\r\n\r\nNARTICLEBIT = ```object.usedefaultprefix = false```\r\n\r\n---\r\nThe way it sets, clears, and checks flags:\r\n\r\n```<FSET ,OBJECT TRYTAKEBIT>```\r\n```<FCLEAR ,OBJECT TRYTAKEBIT>```\r\n```<FSET? ,OBJECT TRYTAKEBIT>```\r\n\r\n---\r\nSo, if I'm understand this, the FLAGS property would be like this:\r\n\r\n```\r\nobject.flags = [ [NDESCBIT, TAKEBIT], [ [TRYTAKEBIT, NARTICLEBIT], [NULL] ]] \r\n```\r\n\r\nAnd anything not wrapped in quotation marks is a variable, I think.\r\n\r\nBut it seems that they couldn't simply do ```if (object.ndescbit)``` back then, plus they could only have so N amount of objects and X amount of properties (and Z amount of space to work with).\r\n\r\nAt first, I thought simply splitting the string into a string list by ```\" \"``` then adding to, removing from, and checking if the list contained whatever string was the best way to try to emulate this, but now I realize it's more efficient to just add each separate boolean attribute to the object (I think).\r\n\r\n---\r\nAlso also, I'm guessing there's no reason for me to try to decipher all the code in the parser file.\r\n\r\nIt *has* to be using the table/list things to do everything, and, even if I can fully understand all the inner-workings, I don't think I'd ever want to actually try to have something parse commands with strings of strings of strings of strings. I can use these new things called RegExp patterns for most of that, then check the synonym dictionaries if necessary to provide the detailed parser errors.",
      "EditableFormat": "markdown",
      "HTML": "<p>ALSO . . . .</p>\n<p>Most objects (in-game objects are actually objects (I think?)) have a FLAGS property, like:</p>\n<pre><code>&lt;FLAGS NDESCBIT TAKEBIT TRYTAKEBIT NARTICLEBIT&gt;\n</code></pre>\n<hr>\n<p>NDESCBIT = <code>object.scenery = true</code></p>\n<p>TAKEBIT = <code>object.take = true</code></p>\n<p>TRYTAKEBIT =</p>\n<pre><code>object.take = { \n  if(foo) {\n    AddToInventory(object)\n    this.take = true\n  }\n  else { \n    msg(\"Bar first!\")\n  }\n</code></pre>\n<p>NARTICLEBIT = <code>object.usedefaultprefix = false</code></p>\n<hr>\n<p>The way it sets, clears, and checks flags:</p>\n<p><code>&lt;FSET ,OBJECT TRYTAKEBIT&gt;</code><br>\n<code>&lt;FCLEAR ,OBJECT TRYTAKEBIT&gt;</code><br>\n<code>&lt;FSET? ,OBJECT TRYTAKEBIT&gt;</code></p>\n<hr>\n<p>So, if I'm understand this, the FLAGS property would be like this:</p>\n<pre><code>object.flags = [ [NDESCBIT, TAKEBIT], [ [TRYTAKEBIT, NARTICLEBIT], [NULL] ]] \n</code></pre>\n<p>And anything not wrapped in quotation marks is a variable, I think.</p>\n<p>But it seems that they couldn't simply do <code>if (object.ndescbit)</code> back then, plus they could only have so N amount of objects and X amount of properties (and Z amount of space to work with).</p>\n<p>At first, I thought simply splitting the string into a string list by <code>\" \"</code> then adding to, removing from, and checking if the list contained whatever string was the best way to try to emulate this, but now I realize it's more efficient to just add each separate boolean attribute to the object (I think).</p>\n<hr>\n<p>Also also, I'm guessing there's no reason for me to try to decipher all the code in the parser file.</p>\n<p>It <em>has</em> to be using the table/list things to do everything, and, even if I can fully understand all the inner-workings, I don't think I'd ever want to actually try to have something parse commands with strings of strings of strings of strings. I can use these new things called RegExp patterns for most of that, then check the synonym dictionaries if necessary to provide the detailed parser errors.</p>\n\n",
      "PostDate": "2021-05-23T05:26:32.1104784Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f189237c-111c-4329-a197-96860617c517",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> > A pointer is an int which represents a physical address in memory.\r\n\r\nNo, I was talking about pointers in contemporary languages of the time - an alternative to the way LISP-style langauges handle lists and tables.\r\n\r\nI don't know if PT in the code you're quoting stands for 'pointer', but even if it's the same word I strongly doubt it's the same concept. To me, it looks like they're using PT as an abbreviation for \"property\", and PTSIZE is a strangely-named equivalent of `TypeOf`. I could be wrong; I don't have much experience with OO LISP.\r\n\r\nBut that's entirely unrelated to what I was saying :p\r\n\r\n> So, if I'm understand this, the FLAGS property would be like this:\r\n\r\nWhy are you putting the flags in pairs?\r\n\r\nI suspect that FLAGS is a set of flags rather than a table.\r\nYou give each flag a value (1, 2, 4, 8, 16…) and retrieving them just checks the specified bit of the flags property. So you can easily check one of them by extracting a single bit from a property. Saves memory that way.\r\n\r\n\r\nBut if they were a table, it would either look like:\r\n```\r\nobject.flags = [ [NDESCBIT, true],\r\n  [[TAKEBIT, false], [\r\n    [[TRYTAKEBIT, true], \r\n      [[NARTICLEBIT, false],\r\n        NULL\r\n      ]\r\n    ]\r\n  ]\r\n];\r\n``` \r\nor\r\n```\r\nobject.flags = [NDESCBIT,\r\n  [TRYTAKEBIT, \r\n    NULL\r\n  ]\r\n];\r\n```\r\n(without the false ones)\r\n\r\nMore likely, each flag has a fixed value which is taken from 1, 2, 4, 8, 18, 32, etc…, and the `flags` property is just the sum of the ones which are true. This was a common way to store flags in all kinds of languages, because you're only using 1 bit in memory for each flag; a byte can hold 8, an int could hold up to 32 (depending on what datatype your ints are).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<blockquote>\n<p>A pointer is an int which represents a physical address in memory.</p>\n</blockquote>\n</blockquote>\n<p>No, I was talking about pointers in contemporary languages of the time - an alternative to the way LISP-style langauges handle lists and tables.</p>\n<p>I don't know if PT in the code you're quoting stands for 'pointer', but even if it's the same word I strongly doubt it's the same concept. To me, it looks like they're using PT as an abbreviation for \"property\", and PTSIZE is a strangely-named equivalent of <code>TypeOf</code>. I could be wrong; I don't have much experience with OO LISP.</p>\n<p>But that's entirely unrelated to what I was saying :p</p>\n<blockquote>\n<p>So, if I'm understand this, the FLAGS property would be like this:</p>\n</blockquote>\n<p>Why are you putting the flags in pairs?</p>\n<p>I suspect that FLAGS is a set of flags rather than a table.<br>\nYou give each flag a value (1, 2, 4, 8, 16…) and retrieving them just checks the specified bit of the flags property. So you can easily check one of them by extracting a single bit from a property. Saves memory that way.</p>\n<p>But if they were a table, it would either look like:</p>\n<pre><code>object.flags = [ [NDESCBIT, true],\n  [[TAKEBIT, false], [\n    [[TRYTAKEBIT, true], \n      [[NARTICLEBIT, false],\n        NULL\n      ]\n    ]\n  ]\n];\n</code></pre>\n<p>or</p>\n<pre><code>object.flags = [NDESCBIT,\n  [TRYTAKEBIT, \n    NULL\n  ]\n];\n</code></pre>\n<p>(without the false ones)</p>\n<p>More likely, each flag has a fixed value which is taken from 1, 2, 4, 8, 18, 32, etc…, and the <code>flags</code> property is just the sum of the ones which are true. This was a common way to store flags in all kinds of languages, because you're only using 1 bit in memory for each flag; a byte can hold 8, an int could hold up to 32 (depending on what datatype your ints are).</p>\n\n",
      "PostDate": "2021-05-23T11:07:13.5972859Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f0bd41d3-b2b6-4d54-b85a-7954bea58ac1",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I don't know if PT in the code you're quoting stands for 'pointer', but even if it's the same word I strongly doubt it's the same concept. To me, it looks like they're using PT as an abbreviation for \"property\", and PTSIZE is a strangely-named equivalent of TypeOf.\r\n\r\nThis was my original theory (and how I coded this part in JS).\r\n\r\n> But that's entirely unrelated to what I was saying :p\r\n\r\nOh. I get overly excited when exposed to new information.\r\n\r\n> Why are you putting the flags in pairs?\r\n\r\nI don't know! I've gone mental!!!\r\n\r\n:O)\r\n\r\n> You give each flag a value (1, 2, 4, 8, 16…) and retrieving them just checks the specified bit of the flags property. So you can easily check one of them by extracting a single bit from a property. Saves memory that way.\r\n\r\nAha.\r\n\r\nI'm pretty sure the flag is there or it's not there. It doesn't look like true or false is used.\r\n\r\nI was wondering if PTSIZE was the length of the string when I first saw it in the WALK routine. The exit properties are \"TO KITCHEN\", \"TO KITCHEN IF FOO ELSE 'EXIT NOT AVAILABLE RIGHT NOW', \"TO KITCHEN PER EXIT-F\".\r\n\r\nI decided that couldn't be the case because there was never any telling how long a room name or ELSE string might be.\r\n\r\nI ended up just making regexen to determine the exit type in the WALK script.\r\n\r\nI'm trying to make it so I have to change as little of the source code as possible, as far as the game objects' code is concerned, I mean. I don't want to have to think about how I changed each way to handle every property on every object in the game.\r\n\r\nI'm only porting up until you leave Earth, just like I did in Quest 5, but that's still a lot of code.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I don't know if PT in the code you're quoting stands for 'pointer', but even if it's the same word I strongly doubt it's the same concept. To me, it looks like they're using PT as an abbreviation for \"property\", and PTSIZE is a strangely-named equivalent of TypeOf.</p>\n</blockquote>\n<p>This was my original theory (and how I coded this part in JS).</p>\n<blockquote>\n<p>But that's entirely unrelated to what I was saying :p</p>\n</blockquote>\n<p>Oh. I get overly excited when exposed to new information.</p>\n<blockquote>\n<p>Why are you putting the flags in pairs?</p>\n</blockquote>\n<p>I don't know! I've gone mental!!!</p>\n<p>:O)</p>\n<blockquote>\n<p>You give each flag a value (1, 2, 4, 8, 16…) and retrieving them just checks the specified bit of the flags property. So you can easily check one of them by extracting a single bit from a property. Saves memory that way.</p>\n</blockquote>\n<p>Aha.</p>\n<p>I'm pretty sure the flag is there or it's not there. It doesn't look like true or false is used.</p>\n<p>I was wondering if PTSIZE was the length of the string when I first saw it in the WALK routine. The exit properties are \"TO KITCHEN\", \"TO KITCHEN IF FOO ELSE 'EXIT NOT AVAILABLE RIGHT NOW', \"TO KITCHEN PER EXIT-F\".</p>\n<p>I decided that couldn't be the case because there was never any telling how long a room name or ELSE string might be.</p>\n<p>I ended up just making regexen to determine the exit type in the WALK script.</p>\n<p>I'm trying to make it so I have to change as little of the source code as possible, as far as the game objects' code is concerned, I mean. I don't want to have to think about how I changed each way to handle every property on every object in the game.</p>\n<p>I'm only porting up until you leave Earth, just like I did in Quest 5, but that's still a lot of code.</p>\n\n",
      "PostDate": "2021-05-23T16:48:14.9376674Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28c36181-d67b-4234-b914-4a588006be25",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The following is from \"ZIL Language Guide\" by Jesse McGrew (which I can only find in some ZILF documentation that is hard to find, so I'm posting it here -- since it is relevant):\r\n\r\n---\r\n# Tables\r\nTables are arrays or buffers that can be located in either static memory (ROM) or dynamic memory (RAM).\r\n\r\n```\r\n<ITABLE [length-type] count [(flags...)] [default...]>\r\n```\r\n\r\nDefines a table of count elements filled with default values: either zeros or, if the default list is specified, the specified list of values repeated until the table is full.\r\n\r\nThe optional length-type may be the atoms “NONE”, “BYTE”, or “WORD”. “BYTE” and “WORD” change the type of the table and also turn on the length marker, the same as giving them as flags together with “LENGTH”. (For an explanation of flags, see below.)\r\n\r\n```\r\n<[P][L]TABLE [(flags...)] values...>\r\n```\r\n\r\nDefines a table containing the specified values.\r\n\r\nIf this command is invoked as ```PLTABLE```, the “PURE” and “LENGTH” flags are implied; as ```PTABLE```, “PURE” is implied; as ```LTABLE```, “LENGTH” is implied; and as ```TABLE```, none are implied. In all cases, additional flags may be given. (For an explanation of flags, see below.)\r\n\r\n**Note: all of the table generating commands produce a table address, which must be assigned to a constant, variable, or property to be used within the game. For example:**\r\n\r\n```\r\n<CONSTANT MYTABLE <ITABLE BYTE 50>>\r\n```\r\n\r\n# Types of Tables\r\n\r\nThese flags control the format of the table:\r\n    • “WORD” causes the elements to be 2-byte words. This is the default.\r\n    • “BYTE” causes the elements to be single bytes.\r\n    • “LEXV” causes the elements to be 4-byte records. If default values are given to ```ITABLE``` with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.\r\n    • “STRING” causes the elements to be single bytes and also changes the initializer format. This flag may not be used with ```ITABLE```. When this flag is given, any values given as strings will be compiled as a series of individual ASCII characters, rather than as string addresses.\r\n\r\n\r\n# Table Options\r\n\r\nThese flags alter the table without changing its basic format:\r\n    • “LENGTH” causes a length marker to be written at the beginning of the table, indicating the number of elements that follow. The length marker is a byte if “BYTE” or “STRING” are also given; otherwise the length marker is a word. This flag is ignored if “LEXV” is given.\r\n    • “PURE” causes the table to be compiled into static memory (ROM).",
      "EditableFormat": "markdown",
      "HTML": "<p>The following is from \"ZIL Language Guide\" by Jesse McGrew (which I can only find in some ZILF documentation that is hard to find, so I'm posting it here -- since it is relevant):</p>\n<hr>\n<h1>Tables</h1>\n<p>Tables are arrays or buffers that can be located in either static memory (ROM) or dynamic memory (RAM).</p>\n<pre><code>&lt;ITABLE [length-type] count [(flags...)] [default...]&gt;\n</code></pre>\n<p>Defines a table of count elements filled with default values: either zeros or, if the default list is specified, the specified list of values repeated until the table is full.</p>\n<p>The optional length-type may be the atoms “NONE”, “BYTE”, or “WORD”. “BYTE” and “WORD” change the type of the table and also turn on the length marker, the same as giving them as flags together with “LENGTH”. (For an explanation of flags, see below.)</p>\n<pre><code>&lt;[P][L]TABLE [(flags...)] values...&gt;\n</code></pre>\n<p>Defines a table containing the specified values.</p>\n<p>If this command is invoked as <code>PLTABLE</code>, the “PURE” and “LENGTH” flags are implied; as <code>PTABLE</code>, “PURE” is implied; as <code>LTABLE</code>, “LENGTH” is implied; and as <code>TABLE</code>, none are implied. In all cases, additional flags may be given. (For an explanation of flags, see below.)</p>\n<p><strong>Note: all of the table generating commands produce a table address, which must be assigned to a constant, variable, or property to be used within the game. For example:</strong></p>\n<pre><code>&lt;CONSTANT MYTABLE &lt;ITABLE BYTE 50&gt;&gt;\n</code></pre>\n<h1>Types of Tables</h1>\n<p>These flags control the format of the table:<br>\n• “WORD” causes the elements to be 2-byte words. This is the default.<br>\n• “BYTE” causes the elements to be single bytes.<br>\n• “LEXV” causes the elements to be 4-byte records. If default values are given to <code>ITABLE</code> with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.<br>\n• “STRING” causes the elements to be single bytes and also changes the initializer format. This flag may not be used with <code>ITABLE</code>. When this flag is given, any values given as strings will be compiled as a series of individual ASCII characters, rather than as string addresses.</p>\n<h1>Table Options</h1>\n<p>These flags alter the table without changing its basic format:<br>\n• “LENGTH” causes a length marker to be written at the beginning of the table, indicating the number of elements that follow. The length marker is a byte if “BYTE” or “STRING” are also given; otherwise the length marker is a word. This flag is ignored if “LEXV” is given.<br>\n• “PURE” causes the table to be compiled into static memory (ROM).</p>\n\n",
      "PostDate": "2021-05-24T22:41:40.8453771Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "89f32034-49e3-4b74-997b-2c46644af198",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Also:\r\n\r\n> So you do``` arr[0]``` if you want the first element (GET).\r\nOr you do ```arr[1]``` (REST) to get the rest of the list, which is itself a list.\r\n\r\nI think really get it (the table/array thing) now.\r\n\r\nIf had the list ```1, 2, 3, 4, 5```, it would be like:\r\n\r\n```\r\nlist = [1, [2, [3, [4, [5, null]]]]]\r\n```\r\n\r\n---\r\nIf I just had ```1,2,3```:\r\n\r\n```\r\nlist = [1, [2, [3, null]]]\r\n```\r\n\r\n---\r\n```1,2```\r\n\r\n```\r\nlist = [1, [2, null]]\r\n```\r\n\r\n---\r\nDo I have it right now?",
      "EditableFormat": "markdown",
      "HTML": "<p>Also:</p>\n<blockquote>\n<p>So you do<code>arr[0]</code> if you want the first element (GET).<br>\nOr you do <code>arr[1]</code> (REST) to get the rest of the list, which is itself a list.</p>\n</blockquote>\n<p>I think really get it (the table/array thing) now.</p>\n<p>If had the list <code>1, 2, 3, 4, 5</code>, it would be like:</p>\n<pre><code>list = [1, [2, [3, [4, [5, null]]]]]\n</code></pre>\n<hr>\n<p>If I just had <code>1,2,3</code>:</p>\n<pre><code>list = [1, [2, [3, null]]]\n</code></pre>\n<hr>\n<p><code>1,2</code></p>\n<pre><code>list = [1, [2, null]]\n</code></pre>\n<hr>\n<p>Do I have it right now?</p>\n\n",
      "PostDate": "2021-05-24T22:57:29.4325666Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aa126124-0abe-4694-bc85-287ede6d52df",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Think so :)\r\n\r\nThat explains why looping over an array in LISP is almost always recursive.\r\n\r\nOn the other hand, the mention of size declarations in that bit of manual implies that they might have made a table datatype that *behaves* like a LISP table, but is stored on the backend as a bunch of fixed-length records, like a C array or a COBOL table. Changing the storage structure for lower-memory machines, but keeping the idiosyncratic language style that grew out of the old structure.",
      "EditableFormat": "markdown",
      "HTML": "<p>Think so :)</p>\n<p>That explains why looping over an array in LISP is almost always recursive.</p>\n<p>On the other hand, the mention of size declarations in that bit of manual implies that they might have made a table datatype that <em>behaves</em> like a LISP table, but is stored on the backend as a bunch of fixed-length records, like a C array or a COBOL table. Changing the storage structure for lower-memory machines, but keeping the idiosyncratic language style that grew out of the old structure.</p>\n\n",
      "PostDate": "2021-05-24T23:19:21.6889612Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f15bfb4c-cfa7-4a49-834a-6378d3d02973",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">## (RE) Types of Tables\r\n>\r\n>These flags control the format of the table:\r\n...\r\n• “BYTE” causes the elements to be single bytes.\r\n• “LEXV” causes the elements to be 4-byte records. If default values are given to ITABLE with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.\r\n...\r\n\r\n---\r\n**EDITED**\r\n\r\nSo, what the heck is this?\r\n\r\n```<GLOBAL P-LEXV <ITABLE 60 (LEXV) 0 <BYTE 0> <BYTE 0>>>```\r\n\r\nIs it:\r\n\r\n```\r\nlet P_LEXV = [60, \"PLACEHOLDER STRING\", 0, 0, 0];\r\n```\r\n\r\nOR (TECHNICALLY):\r\n\r\n```\r\nlet P_LEXV = [60, [\"PLACEHOLDER STRING\", [0, [0, [0, null]]]]];\r\n```\r\n\r\n---\r\nAlso this:\r\n\r\n```<GLOBAL OOPS-INBUF <ITABLE 120 (BYTE LENGTH) 0>>```\r\n\r\nIs that:\r\n\r\n```\r\nlet OOPS_INBUF = [120, OOPS_INBUF.length, 0];\r\n```\r\n\r\nTECHNICALLY:\r\n\r\n```\r\nlet OOPS_INBUF = [120, [OOPS_INBUF.length, [0, null]]];\r\n```\r\n\r\n---\r\nI *think* these are the last two questions I'll have concerning this.\r\n\r\nThese tables are kicking my butt!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<h2>(RE) Types of Tables</h2>\n<p>These flags control the format of the table:<br>\n...</p>\n</blockquote>\n<ul>\n<li>“BYTE” causes the elements to be single bytes.</li>\n<li>“LEXV” causes the elements to be 4-byte records. If default values are given to ITABLE with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.<br>\n...</li>\n</ul>\n<hr>\n<p><strong>EDITED</strong></p>\n<p>So, what the heck is this?</p>\n<p><code>&lt;GLOBAL P-LEXV &lt;ITABLE 60 (LEXV) 0 &lt;BYTE 0&gt; &lt;BYTE 0&gt;&gt;&gt;</code></p>\n<p>Is it:</p>\n<pre><code>let P_LEXV = [60, \"PLACEHOLDER STRING\", 0, 0, 0];\n</code></pre>\n<p>OR (TECHNICALLY):</p>\n<pre><code>let P_LEXV = [60, [\"PLACEHOLDER STRING\", [0, [0, [0, null]]]]];\n</code></pre>\n<hr>\n<p>Also this:</p>\n<p><code>&lt;GLOBAL OOPS-INBUF &lt;ITABLE 120 (BYTE LENGTH) 0&gt;&gt;</code></p>\n<p>Is that:</p>\n<pre><code>let OOPS_INBUF = [120, OOPS_INBUF.length, 0];\n</code></pre>\n<p>TECHNICALLY:</p>\n<pre><code>let OOPS_INBUF = [120, [OOPS_INBUF.length, [0, null]]];\n</code></pre>\n<hr>\n<p>I <em>think</em> these are the last two questions I'll have concerning this.</p>\n<p>These tables are kicking my butt!</p>\n\n",
      "PostDate": "2021-05-25T17:26:01.4956944Z",
      "LastEditDate": "2021-05-25T17:36:21.5660612Z",
      "link": null
    },
    {
      "PostId": "44698519-bf1e-4923-aaee-fbd5585a10fe",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "EDIT: I missed that the options said `(BYTE LENGTH)`, which adds an extra element to the array, a single byte containing the number of elements.\r\n\r\nI think your second example will be simpler.\r\nI expect that\r\n>     <GLOBAL OOPS-INBUF <ITABLE 120 (BYTE LENGTH) 0>>\r\nis equivalent to something like:\r\n```\r\nlet OOPS_INBUF = Array(120).fill(0).unshift(120);\r\n```\r\nCreating an array of 120 `0`s, with an extra element stuck on the beginning (thanks to the LENGTH option) saying how many elements it has.\r\n\r\nAlthough, as we previously saw, LISP-style tables have GET and REST functions, and in some ways act as if they are arrays-in-arrays-in-arrays…\r\n\r\nIf you're handling them like that, you could do:\r\n```\r\nlet OOPS_INBUF = [null];\r\nfor (i=0 ; i<120 ; i++) {\r\n  OOPS_INBUF = [0, OOPS_INBUF];\r\n}\r\nOOPS_INBUF = [120, OOPS_INBUF];\r\n```\r\nor as a single statement:\r\n```\r\nlet OOPS_INBUF = [120, new Array(120).fill().reduce((d, a)  => ([a, d]), [null])];\r\n```\r\n\r\nI'm not sure if it's useful to handle tables in this way or not. You're working with code in which it seems to be common to access either the first element of a table or the remainder. But it may be easier just to use JS arrays for the tables, and use `slice`.\r\n\r\nEven if your data isn't stored in the same way, you can do equivalent things with it, which is probably close enough for learning to port something. Really I only included the stuff about endlessly-nested 2-element arrays in the hope of explaining while LISP-style languages ended up evolving with a pair of functions like GET and REST, or car and cdr – coming from a language where arrays are arbitrarily sized, it seems odd to treat the first element specially, unless you know how they worked behind the scenes.\r\n\r\n<hr />\r\nAnyway… on to the first example.\r\n\r\nIt looks like a LEXV is some kind of data structure that contains 3 elements; an int and 2 bytes. They're presumably treated similarly to a C struct; it's a fixed-length record for storing 3 numbers in a group, with the first one larger than the others. As it's a fixed-size thing, I assume you can represent it in JS as a 3-element array.\r\n\r\nSo I think that means `0 <BYTE 0> <BYTE 0>` is a LEXV - an int 0, and two byte 0s. In JS I'd probably represent that as `[0,0,0]`.\r\n\r\n>     <GLOBAL P-LEXV <ITABLE 60 (LEXV) 0 <BYTE 0> <BYTE 0>>>\r\n\r\nThe `(LEXV)` in the table definition is an option, which causes an alternate version of the ITABLE function to be used. Like passing command-line switches to a program, before the rest of the arguments. When that is specified, the number immediately before it is the initial length of the table, and the number after it is the value to be placed in the row.\r\n\r\nSo\r\n```\r\n<GLOBAL P-LEXV <ITABLE 60 (LEXV) 0 <BYTE 0> <BYTE 0>>>\r\n```\r\n\r\ncreates a table (which acts like a nested set of 2-element lists), `60` elements deep, in which each element has type `LEXV` and is initialised to `0 <BYTE 0> <BYTE 0>` – which we can assume is the same as `[0,0,0]` because JS doesn't usually care about the number of bytes of memory allocated to store a variable.\r\n\r\nSo that line would be translated to something like:\r\n```\r\nlet P_LEXV = new Array(60).fill().map(() => [0,0,0]);\r\n```\r\nor a little easier to understand:\r\n```\r\nlet P_LEXV = [];\r\nwhile (P_LEXV.length < 60) {\r\n  P_LEXV.push([0,0,0]);\r\n}\r\n```\r\n\r\nDepending on the implementation behind the scenes, it may well be something like:\r\n```\r\nlet P_LEXV = [\r\n  [0,0,0], [\r\n    [0,0,0], [\r\n      [0,0,0], [\r\n        [0,0,0], [\r\n          [0,0,0], [\r\n            [0,0,0], [\r\n.... and so on for 6 repetitions\r\n          ]\r\n        ]\r\n      ]\r\n    ]\r\n  ]\r\n]\r\n```\r\nso you'll be using GET and REST to recurse down into the table. Just in this case, each \"element\" in the table is a 3-element struct containing an int and 2 bytes.\r\n\r\n\r\nNote:\r\nI think the line is probably equivalent to:\r\n```\r\nlet P_LEXV = new Array(60).fill([0,0,0]);\r\n```\r\nbut I stated:\r\n```\r\nlet P_LEXV = new Array(60).fill().map(() => [0,0,0]);\r\n```\r\nabove, because otherwise it would behave weirdly when you try to change the values. Because the LEXV type is something which behaves like a struct in C, which JS (as a dynamically-typed language) has no direct equivalent for.\r\n\r\nSorry if I'm repeating myself; my blood sugar's a little low and I'm finding it hard to focus.",
      "EditableFormat": "markdown",
      "HTML": "<p>EDIT: I missed that the options said <code>(BYTE LENGTH)</code>, which adds an extra element to the array, a single byte containing the number of elements.</p>\n<p>I think your second example will be simpler.<br>\nI expect that</p>\n<blockquote>\n<pre><code>&lt;GLOBAL OOPS-INBUF &lt;ITABLE 120 (BYTE LENGTH) 0&gt;&gt;\n</code></pre>\n</blockquote>\n<p>is equivalent to something like:</p>\n<pre><code>let OOPS_INBUF = Array(120).fill(0).unshift(120);\n</code></pre>\n<p>Creating an array of 120 <code>0</code>s, with an extra element stuck on the beginning (thanks to the LENGTH option) saying how many elements it has.</p>\n<p>Although, as we previously saw, LISP-style tables have GET and REST functions, and in some ways act as if they are arrays-in-arrays-in-arrays…</p>\n<p>If you're handling them like that, you could do:</p>\n<pre><code>let OOPS_INBUF = [null];\nfor (i=0 ; i&lt;120 ; i++) {\n  OOPS_INBUF = [0, OOPS_INBUF];\n}\nOOPS_INBUF = [120, OOPS_INBUF];\n</code></pre>\n<p>or as a single statement:</p>\n<pre><code>let OOPS_INBUF = [120, new Array(120).fill().reduce((d, a)  =&gt; ([a, d]), [null])];\n</code></pre>\n<p>I'm not sure if it's useful to handle tables in this way or not. You're working with code in which it seems to be common to access either the first element of a table or the remainder. But it may be easier just to use JS arrays for the tables, and use <code>slice</code>.</p>\n<p>Even if your data isn't stored in the same way, you can do equivalent things with it, which is probably close enough for learning to port something. Really I only included the stuff about endlessly-nested 2-element arrays in the hope of explaining while LISP-style languages ended up evolving with a pair of functions like GET and REST, or car and cdr – coming from a language where arrays are arbitrarily sized, it seems odd to treat the first element specially, unless you know how they worked behind the scenes.</p>\n<hr>\nAnyway… on to the first example.\n<p>It looks like a LEXV is some kind of data structure that contains 3 elements; an int and 2 bytes. They're presumably treated similarly to a C struct; it's a fixed-length record for storing 3 numbers in a group, with the first one larger than the others. As it's a fixed-size thing, I assume you can represent it in JS as a 3-element array.</p>\n<p>So I think that means <code>0 &lt;BYTE 0&gt; &lt;BYTE 0&gt;</code> is a LEXV - an int 0, and two byte 0s. In JS I'd probably represent that as <code>[0,0,0]</code>.</p>\n<blockquote>\n<pre><code>&lt;GLOBAL P-LEXV &lt;ITABLE 60 (LEXV) 0 &lt;BYTE 0&gt; &lt;BYTE 0&gt;&gt;&gt;\n</code></pre>\n</blockquote>\n<p>The <code>(LEXV)</code> in the table definition is an option, which causes an alternate version of the ITABLE function to be used. Like passing command-line switches to a program, before the rest of the arguments. When that is specified, the number immediately before it is the initial length of the table, and the number after it is the value to be placed in the row.</p>\n<p>So</p>\n<pre><code>&lt;GLOBAL P-LEXV &lt;ITABLE 60 (LEXV) 0 &lt;BYTE 0&gt; &lt;BYTE 0&gt;&gt;&gt;\n</code></pre>\n<p>creates a table (which acts like a nested set of 2-element lists), <code>60</code> elements deep, in which each element has type <code>LEXV</code> and is initialised to <code>0 &lt;BYTE 0&gt; &lt;BYTE 0&gt;</code> – which we can assume is the same as <code>[0,0,0]</code> because JS doesn't usually care about the number of bytes of memory allocated to store a variable.</p>\n<p>So that line would be translated to something like:</p>\n<pre><code>let P_LEXV = new Array(60).fill().map(() =&gt; [0,0,0]);\n</code></pre>\n<p>or a little easier to understand:</p>\n<pre><code>let P_LEXV = [];\nwhile (P_LEXV.length &lt; 60) {\n  P_LEXV.push([0,0,0]);\n}\n</code></pre>\n<p>Depending on the implementation behind the scenes, it may well be something like:</p>\n<pre><code>let P_LEXV = [\n  [0,0,0], [\n    [0,0,0], [\n      [0,0,0], [\n        [0,0,0], [\n          [0,0,0], [\n            [0,0,0], [\n.... and so on for 6 repetitions\n          ]\n        ]\n      ]\n    ]\n  ]\n]\n</code></pre>\n<p>so you'll be using GET and REST to recurse down into the table. Just in this case, each \"element\" in the table is a 3-element struct containing an int and 2 bytes.</p>\n<p>Note:<br>\nI think the line is probably equivalent to:</p>\n<pre><code>let P_LEXV = new Array(60).fill([0,0,0]);\n</code></pre>\n<p>but I stated:</p>\n<pre><code>let P_LEXV = new Array(60).fill().map(() =&gt; [0,0,0]);\n</code></pre>\n<p>above, because otherwise it would behave weirdly when you try to change the values. Because the LEXV type is something which behaves like a struct in C, which JS (as a dynamically-typed language) has no direct equivalent for.</p>\n<p>Sorry if I'm repeating myself; my blood sugar's a little low and I'm finding it hard to focus.</p>\n\n",
      "PostDate": "2021-05-25T19:44:36.2418809Z",
      "LastEditDate": "2021-05-25T19:49:20.0276947Z",
      "link": null
    },
    {
      "PostId": "20874af3-2ddc-4a4e-aa84-5be13cfcb5d0",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> ```let OOPS_INBUF = Array(120).fill(0).unshift(120);```\r\n\r\nBrilliant!\r\n\r\nI wasn't piecing that 1st value (120) and the length together. This makes perfect sense!\r\n\r\n---\r\n> [...] it may be easier just to use JS arrays for the tables, and use``` slice```.\r\n> [...]\r\n> Even if your data isn't stored in the same way, you can do equivalent things with it, which is probably close enough for learning to port something. Really I only included the stuff about endlessly-nested 2-element arrays in the hope of explaining while LISP-style languages ended up evolving with a pair of functions like GET and REST, or\r\n\r\nOh, yeah. I got ya'.\r\n\r\nThat's what I've been doing.\r\n\r\nI'm just trying to think of the original source code in the \"list-in-list-in-list\" kind of way, just in case I might overlook something important otherwise. :)\r\n\r\n---\r\n> ```let P_LEXV = new Array(60).fill().map(() => [0,0,0]);```\r\n\r\nAlso brilliant!\r\n\r\nHot dog! Even if I had known the first value was to be the length of the array/table, I'd never have known about ```Array.prototype.fill()```!\r\n\r\n---\r\n> because otherwise it would behave weirdly when you try to change the values\r\n\r\nOh, I'll definitely be changing the values.\r\n\r\n```P_LEXV``` is the Quest equivalent of ```game.pov.currentcommand```.\r\n\r\nThat's another confusing thing. It *looks like* ```LEXV``` is the text last entered by the player, but they also say \"**“LEXV” causes the elements to be 4-byte records. If default values are given to ITABLE with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.**\"\r\n\r\nI might be wrong. ```LEXV``` might not be a global at all. (I haven't made it all the way through this bit (the parser) of the code yet, but I used ```CTRL+F``` to search this particular file for \"LEXV\", and found nothing but \"P_LEXV\".)\r\n\r\nMy theory is that ```LEXV``` is either a flag when creating a table, or a global variable. I'm assuming it couldn't be both in MDL. (Also, when I say \"MDL\", it seems that I mean \"a mod of LISP\".)\r\n\r\n---\r\n> Sorry if I'm repeating myself; my blood sugar's a little low and I'm finding it hard to focus.\r\n\r\nMan, go get your blood sugar right! (Don't make me threaten to come find you and make you do it!)\r\n\r\nJust kidding!\r\n\r\nSort of...\r\n\r\n:o)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><code>let OOPS_INBUF = Array(120).fill(0).unshift(120);</code></p>\n</blockquote>\n<p>Brilliant!</p>\n<p>I wasn't piecing that 1st value (120) and the length together. This makes perfect sense!</p>\n<hr>\n<blockquote>\n<p>[...] it may be easier just to use JS arrays for the tables, and use<code>slice</code>.<br>\n[...]<br>\nEven if your data isn't stored in the same way, you can do equivalent things with it, which is probably close enough for learning to port something. Really I only included the stuff about endlessly-nested 2-element arrays in the hope of explaining while LISP-style languages ended up evolving with a pair of functions like GET and REST, or</p>\n</blockquote>\n<p>Oh, yeah. I got ya'.</p>\n<p>That's what I've been doing.</p>\n<p>I'm just trying to think of the original source code in the \"list-in-list-in-list\" kind of way, just in case I might overlook something important otherwise. :)</p>\n<hr>\n<blockquote>\n<p><code>let P_LEXV = new Array(60).fill().map(() =&gt; [0,0,0]);</code></p>\n</blockquote>\n<p>Also brilliant!</p>\n<p>Hot dog! Even if I had known the first value was to be the length of the array/table, I'd never have known about <code>Array.prototype.fill()</code>!</p>\n<hr>\n<blockquote>\n<p>because otherwise it would behave weirdly when you try to change the values</p>\n</blockquote>\n<p>Oh, I'll definitely be changing the values.</p>\n<p><code>P_LEXV</code> is the Quest equivalent of <code>game.pov.currentcommand</code>.</p>\n<p>That's another confusing thing. It <em>looks like</em> <code>LEXV</code> is the text last entered by the player, but they also say \"<strong>“LEXV” causes the elements to be 4-byte records. If default values are given to ITABLE with this flag, they will be split into groups of three: the first compiled as a word, the next two compiled as bytes. The table is also prefixed with a byte indicating the number of records, followed by a zero byte.</strong>\"</p>\n<p>I might be wrong. <code>LEXV</code> might not be a global at all. (I haven't made it all the way through this bit (the parser) of the code yet, but I used <code>CTRL+F</code> to search this particular file for \"LEXV\", and found nothing but \"P_LEXV\".)</p>\n<p>My theory is that <code>LEXV</code> is either a flag when creating a table, or a global variable. I'm assuming it couldn't be both in MDL. (Also, when I say \"MDL\", it seems that I mean \"a mod of LISP\".)</p>\n<hr>\n<blockquote>\n<p>Sorry if I'm repeating myself; my blood sugar's a little low and I'm finding it hard to focus.</p>\n</blockquote>\n<p>Man, go get your blood sugar right! (Don't make me threaten to come find you and make you do it!)</p>\n<p>Just kidding!</p>\n<p>Sort of...</p>\n<p>:o)</p>\n\n",
      "PostDate": "2021-05-25T20:24:48.8814366Z",
      "LastEditDate": "2021-05-25T20:33:38.1717538Z",
      "link": null
    },
    {
      "PostId": "043a5441-1384-42ce-9bd5-81e14bf68a32",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Hot dog! Even if I had known the first value was to be the length of the array/table, I'd never have known about `Array.prototype.fill()`!\r\n\r\nThe big gotcha there is things like:\r\n```\r\nvar sometable = new Array(60).fill([0,0,0]);\r\n```\r\nThat creates a new array with 60 elements, and then calls `fill` to change all its values to `[0,0,0]`.\r\n\r\nSource of a common mistake which confuses people when they first use it. Because you're creating an array `[0,0,0]` and then filling the array with *60 references to the same array*. Meaning that if you do `sometable[5][0]++`, it will change *all* of them to `[1,0,0]`.\r\n\r\n`fill` fills all the elements with its argument; in this case setting them to `undefined` I think. `map` then converts those undefined values to `[0,0,0]`, but because the map function is run once per element, it creates a new `[0,0,0]` each time. (The fill is still necessary, because `new Array(60)` creates an array whose length is 60 but has no elements. So just using `map` would still give you no elements. In this usage, `new Array(60)` sets the `length`, `fill` fills in the keys, and `map` gives them values.\r\n\r\n> My theory is that `LEXV` is either a flag when creating a table,\r\n\r\nIn this code, it seems to be a flag indicating the data type of the table's contents.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Hot dog! Even if I had known the first value was to be the length of the array/table, I'd never have known about <code>Array.prototype.fill()</code>!</p>\n</blockquote>\n<p>The big gotcha there is things like:</p>\n<pre><code>var sometable = new Array(60).fill([0,0,0]);\n</code></pre>\n<p>That creates a new array with 60 elements, and then calls <code>fill</code> to change all its values to <code>[0,0,0]</code>.</p>\n<p>Source of a common mistake which confuses people when they first use it. Because you're creating an array <code>[0,0,0]</code> and then filling the array with <em>60 references to the same array</em>. Meaning that if you do <code>sometable[5][0]++</code>, it will change <em>all</em> of them to <code>[1,0,0]</code>.</p>\n<p><code>fill</code> fills all the elements with its argument; in this case setting them to <code>undefined</code> I think. <code>map</code> then converts those undefined values to <code>[0,0,0]</code>, but because the map function is run once per element, it creates a new <code>[0,0,0]</code> each time. (The fill is still necessary, because <code>new Array(60)</code> creates an array whose length is 60 but has no elements. So just using <code>map</code> would still give you no elements. In this usage, <code>new Array(60)</code> sets the <code>length</code>, <code>fill</code> fills in the keys, and <code>map</code> gives them values.</p>\n<blockquote>\n<p>My theory is that <code>LEXV</code> is either a flag when creating a table,</p>\n</blockquote>\n<p>In this code, it seems to be a flag indicating the data type of the table's contents.</p>\n\n",
      "PostDate": "2021-05-25T21:21:46.6048613Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80282dab-9ab4-4a57-b78b-09dc502c1d6d",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome. I've got all that coded.\r\n\r\nI lied about that being the last question, though. (Surprised?)\r\n\r\n---\r\nI really think this is the last thing:\r\n\r\n```\r\n;\"For AGAIN purposes, put contents of one LEXV table into another.\"\r\n<ROUTINE STUFF (DEST SRC \"OPTIONAL\" (MAX 29) \"AUX\" (PTR ,P-LEXSTART) (CTR 1)\r\n\t\t\t\t\t\t   BPTR)\r\n\t <PUTB .DEST 0 <GETB .SRC 0>>\r\n\t <PUTB .DEST 1 <GETB .SRC 1>>\r\n\t <REPEAT ()\r\n\t  <PUT .DEST .PTR <GET .SRC .PTR>>\r\n\t  <SET BPTR <+ <* .PTR 2> 2>>\r\n\t  <PUTB .DEST .BPTR <GETB .SRC .BPTR>>\r\n\t  <SET BPTR <+ <* .PTR 2> 3>>\r\n\t  <PUTB .DEST .BPTR <GETB .SRC .BPTR>>\r\n\t  <SET PTR <+ .PTR ,P-LEXELEN>>\r\n\t  <COND (<IGRTR? CTR .MAX>\r\n\t\t <RETURN>)>>>\r\n```\r\n\r\n---\r\nAlright. . .\r\n\r\nI don't see them ever use the third parameter.\r\n\r\nThis is how it used in the code:\r\n\r\n```<STUFF OOPS-TABLE P_LEXV>```\r\n\r\nI was doing ```OOPS_TABLE.push(P_LEXV)```, but now that I found the actual STUFF routine, it looks like I just need to do ```OOPS_TABLE = P_LEXV```.\r\n\r\nPlus, that would make actual sense, as we're dealing with the OOPS command, which will only work with the last entered command when it was an \"object not found\" parser error.",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome. I've got all that coded.</p>\n<p>I lied about that being the last question, though. (Surprised?)</p>\n<hr>\n<p>I really think this is the last thing:</p>\n<pre><code>;\"For AGAIN purposes, put contents of one LEXV table into another.\"\n&lt;ROUTINE STUFF (DEST SRC \"OPTIONAL\" (MAX 29) \"AUX\" (PTR ,P-LEXSTART) (CTR 1)\n\t\t\t\t\t\t   BPTR)\n\t &lt;PUTB .DEST 0 &lt;GETB .SRC 0&gt;&gt;\n\t &lt;PUTB .DEST 1 &lt;GETB .SRC 1&gt;&gt;\n\t &lt;REPEAT ()\n\t  &lt;PUT .DEST .PTR &lt;GET .SRC .PTR&gt;&gt;\n\t  &lt;SET BPTR &lt;+ &lt;* .PTR 2&gt; 2&gt;&gt;\n\t  &lt;PUTB .DEST .BPTR &lt;GETB .SRC .BPTR&gt;&gt;\n\t  &lt;SET BPTR &lt;+ &lt;* .PTR 2&gt; 3&gt;&gt;\n\t  &lt;PUTB .DEST .BPTR &lt;GETB .SRC .BPTR&gt;&gt;\n\t  &lt;SET PTR &lt;+ .PTR ,P-LEXELEN&gt;&gt;\n\t  &lt;COND (&lt;IGRTR? CTR .MAX&gt;\n\t\t &lt;RETURN&gt;)&gt;&gt;&gt;\n</code></pre>\n<hr>\n<p>Alright. . .</p>\n<p>I don't see them ever use the third parameter.</p>\n<p>This is how it used in the code:</p>\n<p><code>&lt;STUFF OOPS-TABLE P_LEXV&gt;</code></p>\n<p>I was doing <code>OOPS_TABLE.push(P_LEXV)</code>, but now that I found the actual STUFF routine, it looks like I just need to do <code>OOPS_TABLE = P_LEXV</code>.</p>\n<p>Plus, that would make actual sense, as we're dealing with the OOPS command, which will only work with the last entered command when it was an \"object not found\" parser error.</p>\n\n",
      "PostDate": "2021-05-26T02:16:39.7600044Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "00785a62-6d1e-4c97-8916-fbcd06245794",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "FULL DISCLOSURE\r\n\r\nA good challenge releases a good amount of dopamine into my brain.\r\n\r\nCoding in general releases a small amount of dopamine into my brain.\r\n\r\nI've been porting this ZIL code for about two weeks now, every day, most of the day and night. First, I ported the things necessary to complete the first part of the game to Quest 5.  Since then, I've been porting all the under-the-hood ZIL code to JS.\r\n\r\nAll the while, I've been high on the process. (Don't judge me! Coding is addictive!!!)\r\n\r\n---\r\nSo, well, damn... I forget the point I wanted to make, because I'm high on coding.\r\n\r\nOh yeah. I remember. I wanted to thank you (mrangel).\r\n\r\nI get lost in the process lots of times, and I usually forget to take the proper time to show my appreciation during those times. (Because I'm high on coding! Plus, I'm an ass-half. It takes two of me to make an asshole.)",
      "EditableFormat": "markdown",
      "HTML": "<p>FULL DISCLOSURE</p>\n<p>A good challenge releases a good amount of dopamine into my brain.</p>\n<p>Coding in general releases a small amount of dopamine into my brain.</p>\n<p>I've been porting this ZIL code for about two weeks now, every day, most of the day and night. First, I ported the things necessary to complete the first part of the game to Quest 5.  Since then, I've been porting all the under-the-hood ZIL code to JS.</p>\n<p>All the while, I've been high on the process. (Don't judge me! Coding is addictive!!!)</p>\n<hr>\n<p>So, well, damn... I forget the point I wanted to make, because I'm high on coding.</p>\n<p>Oh yeah. I remember. I wanted to thank you (mrangel).</p>\n<p>I get lost in the process lots of times, and I usually forget to take the proper time to show my appreciation during those times. (Because I'm high on coding! Plus, I'm an ass-half. It takes two of me to make an asshole.)</p>\n\n",
      "PostDate": "2021-05-26T04:55:19.317812Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "49d21c1e-c1be-444e-96de-c3aefdad3499",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "After <s>translating</s> doing my best (with a LOT of help from mrangel) to translate quite a bit of ZIL to JS, I'm thinking all the ```while()``` loops are not something I want to use that much in JS. Most of the time in ZIL, they use ```REPEAT()``` to run through tables, which I think would be safer to do via ```Array.prototype.forEach()``` in JS.\r\n\r\nI did learn a nifty trick concerning ```while``` while messing with ```while```, though.\r\n\r\n```\r\nlet i = 10;\r\nmyLoop:\r\nwhile (i > 0) {\r\n  console.log (i);\r\n  i--;\r\n  if (i === 3) {\r\n    console.log (\"RESTARTING\");\r\n    continue myLoop; // JS version of <AGAIN> in ZIL\r\n  }\r\n  console.log (\"Still going...\");\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>After <s>translating</s> doing my best (with a LOT of help from mrangel) to translate quite a bit of ZIL to JS, I'm thinking all the <code>while()</code> loops are not something I want to use that much in JS. Most of the time in ZIL, they use <code>REPEAT()</code> to run through tables, which I think would be safer to do via <code>Array.prototype.forEach()</code> in JS.</p>\n<p>I did learn a nifty trick concerning <code>while</code> while messing with <code>while</code>, though.</p>\n<pre><code>let i = 10;\nmyLoop:\nwhile (i &gt; 0) {\n  console.log (i);\n  i--;\n  if (i === 3) {\n    console.log (\"RESTARTING\");\n    continue myLoop; // JS version of &lt;AGAIN&gt; in ZIL\n  }\n  console.log (\"Still going...\");\n}\n</code></pre>\n\n",
      "PostDate": "2021-05-26T07:02:54.5669015Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dafe5ed6-13b0-4ec1-8080-c33ea720d3a4",
      "UserId": 548502,
      "Username": "vaporware",
      "AvatarUrl": "https://secure.gravatar.com/avatar/566495eafbf17b395422885350c0fe4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi! Author of ZILF here with a few notes.\r\n\r\n1. `PT`, as in `GETPT` and `PTSIZE`, stands for **property table** -- i.e., the span of memory that contains the data for a particular property. Whereas `<GETP ,OBJ ,P?PROP>` returns the *value* stored in the property, `<GETPT ,OBJ ,P?PROP>` returns the *address* where that value is stored, which can then be accessed with table functions like `GET`.\r\n\r\n2. `PTSIZE` returns the size (in bytes) of a property table whose address was previously obtained with `GETPT`, by decoding the header stored just before the property data. In practice, it functions as a \"TypeOf\" for direction properties, because the compiler ensures that each type of exit has a different length when it's stored as a property.\r\n\r\n3. MDL has both Lisp-style linked lists, written with `()`, and vectors (arrays), written with `[]`. Conveniently, they can be accessed with the same functions. To get the nth element of a list or vector, you can use the `NTH` function (`<NTH ,FOO 3>`) or simply use a number as a function name (`<3 ,FOO>`). To iterate through the elements of a list or vector, you can use `MAPF` (or occasionally `MAPR`), which is basically a foreach loop that uses a lambda for the loop body and can return a value. But...\r\n\r\n4. Code that runs on the Z-machine (i.e. code inside a `ROUTINE`) doesn't have access to dynamic memory allocation, and therefore doesn't use linked lists. Or lambdas. In fact, none of the dynamic features of MDL are available at runtime: value types are lost during compilation, so there's no way to test whether the value in a variable is a number, a string, an object, or a table. You might still encounter uses of things like `MAPF` in ZIL code, but they'll be in code that runs at compile time (i.e. MDL). Therefore...\r\n\r\n5. ZIL uses `TABLE` for data that has to be accessible at runtime. A table is a fixed length vector with some special properties; for example, different elements can take up different amounts of space in the table. `LEXV` is the main example of that: every third element is stored as a word (2 bytes), and the rest are stored as single bytes. That metadata, like everything else about value types, is lost during compilation.\r\n\r\n6. If you want to know more about low-level details like this, one way is to compile some code with ZILF and then look at the assembler output (`.zap` files). There's also Henrik Åsman's [ZILF Reference Guide](https://github.com/heasm66/ZILF-Reference-Guide).",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi! Author of ZILF here with a few notes.</p>\n<ol>\n<li>\n<p><code>PT</code>, as in <code>GETPT</code> and <code>PTSIZE</code>, stands for <strong>property table</strong> -- i.e., the span of memory that contains the data for a particular property. Whereas <code>&lt;GETP ,OBJ ,P?PROP&gt;</code> returns the <em>value</em> stored in the property, <code>&lt;GETPT ,OBJ ,P?PROP&gt;</code> returns the <em>address</em> where that value is stored, which can then be accessed with table functions like <code>GET</code>.</p>\n</li>\n<li>\n<p><code>PTSIZE</code> returns the size (in bytes) of a property table whose address was previously obtained with <code>GETPT</code>, by decoding the header stored just before the property data. In practice, it functions as a \"TypeOf\" for direction properties, because the compiler ensures that each type of exit has a different length when it's stored as a property.</p>\n</li>\n<li>\n<p>MDL has both Lisp-style linked lists, written with <code>()</code>, and vectors (arrays), written with <code>[]</code>. Conveniently, they can be accessed with the same functions. To get the nth element of a list or vector, you can use the <code>NTH</code> function (<code>&lt;NTH ,FOO 3&gt;</code>) or simply use a number as a function name (<code>&lt;3 ,FOO&gt;</code>). To iterate through the elements of a list or vector, you can use <code>MAPF</code> (or occasionally <code>MAPR</code>), which is basically a foreach loop that uses a lambda for the loop body and can return a value. But...</p>\n</li>\n<li>\n<p>Code that runs on the Z-machine (i.e. code inside a <code>ROUTINE</code>) doesn't have access to dynamic memory allocation, and therefore doesn't use linked lists. Or lambdas. In fact, none of the dynamic features of MDL are available at runtime: value types are lost during compilation, so there's no way to test whether the value in a variable is a number, a string, an object, or a table. You might still encounter uses of things like <code>MAPF</code> in ZIL code, but they'll be in code that runs at compile time (i.e. MDL). Therefore...</p>\n</li>\n<li>\n<p>ZIL uses <code>TABLE</code> for data that has to be accessible at runtime. A table is a fixed length vector with some special properties; for example, different elements can take up different amounts of space in the table. <code>LEXV</code> is the main example of that: every third element is stored as a word (2 bytes), and the rest are stored as single bytes. That metadata, like everything else about value types, is lost during compilation.</p>\n</li>\n<li>\n<p>If you want to know more about low-level details like this, one way is to compile some code with ZILF and then look at the assembler output (<code>.zap</code> files). There's also Henrik Åsman's <a href=\"https://github.com/heasm66/ZILF-Reference-Guide\">ZILF Reference Guide</a>.</p>\n</li>\n</ol>\n\n",
      "PostDate": "2021-06-01T02:34:24.3994481Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "50a19cb5-4a3e-421d-9871-805925ffc908",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Hi!\r\n\r\nHello!\r\n\r\n---\r\n> Author of ZILF here with a few notes.\r\n\r\nWow! This is unexpected. I have so many questions. I shall narrow it down to three.\r\n\r\n...after thoroughly reviewing these notes, of course -- as they will likely answer questions I don't even know I'm going to have yet!\r\n\r\nThanks, by the way! For the input here, but mostly for ZILF! I've been perusing the Hitchhiker's code posted by historicalsource on GitHub for quite a few days now, and it's been equally educational and entertaining. Plus, when I'm not sure how a certain bit of the code is \"behaving\", I can add a call to ```TELL``` to print \"debugging\" messages in games after compiling with ZILF and ZAPF. (It's all freaking awesome, but I digress.)\r\n\r\n---\r\nRegarding your notes (and thanks again!): \r\n\r\n1. Cool; that's pretty much how mrangel said he believes all this works. The bit about returning the address of where a value is stored is the bit about which I am ignorant (not using the word pejoratively, mind you). I think I mostly understand, though. It seems like ...well, similar to when I create an object in JS like ```frob = { take: function(){ console.log(\"Taken.\")}``` (keeping it super, super simple), ```window[\"frob\"]``` is one way to refer to the property of the ```window``` object (like when I tell someone to go to \"my house\"), and from that JS knows the actual physical location \"on the drive\" from which to retrieve the data?\r\n\r\n2. Rock and roll! That was the theory posed by mrangel concerning this, too. (Smart fellow, that one!)  I decided to use regular expressions to match the string values of the exits in JS. (It seemed like the all-around easiest way to handle the exits. I'm leaning away from using regular expressions to handle the player's commands, though -- because all the synonyms and whatnot seem much, much more intuitive.)\r\n\r\n3. I've seen plenty of linked lists, like ```()``` (mrangel explained those to me, too), but I don't recall coming across any vectors (or arrays), like ```[]```. I went through all of SYNTAX.ZIL, VERBS.ZIL, EARTH.ZIL, I did bits and pieces that I needed from GLOBALS.ZIL, and I believe I made it about 2/3 of the way through PARSER.ZIL before I went cross-eyed and decided to take a break from attempting to port any more of it for a couple of days. That was two days ago. Now that I am aware of the vectors, I shall most likely discover one (or more) of them sooner than later (due to the interconnectdeness of all things and all that). From what I've gathered so far (which is very little), a vector is like a ... huh. I don't know what a vector is (yet). I have seen ```<NTH ,FOO 3>``` and I figured it out. I seem to recall seeing a ```<3 ,FOO>```, but I don't remember how I handled it, which suggests I skipped over it -- leaving a ```//TODO``` in its place. Also, I am fairly certain I saw ```MAPF``` when I scanned ahead a little before closing PARSER.ZIL the other day. So, you just helped me with that up front -- as soon as I go learn what the heck a lambda is!\r\n\r\n4. I oddly understood most of that -- because of my level of understanding, of course; not that the explanation wasn't well-written. So, if I understand, this is why it checks for the sizes of properties in bytes (because it's the only way it can identify the TypeOf)? And that's also why it needs an identifying header stored in front of the property value in a table?\r\n\r\n5. I'm going to have to go learn what a vector is understand the tables. I've also previously noted that I need to learn about 2 byte words and single bytes. I called myself researching the latter for an hour or so, but all I could find online were forum threads with people discussing them in a way which was not elementary enough for me to grasp the concept. My issue (if you haven't guessed) is a serious lack of exposure. I hadn't even heard of LISP or MDL until I posted a link to all the Infocom source code and mrangel said it did not look unlike LISP. Ha ha! Anyway, I know good and well I've seen ```LEXV``` numerous times and wondered what it is (expecting to find out later in the code).\r\n\r\nThis is so much fun! The inner-workings of text adventures are their own adventures! Plus, I'm learning about lots of unknown unknowns along the way, which is always a good time! And I decided to take on Hitchhiker's right off the bat, so, when I'm messing with the code on Thursdays (which I never could quite get the hang of) and having problems understanding a bit of code, I'll eventually work through it to come to some dialogue written by Douglas or Steve that makes me laugh aloud and get back to enjoying the code.\r\n\r\nBy the way (and back on track). . .\r\n\r\n6. I've already learned three things I always needed to know but didn't know I needed to know it until perusing Henrik Åsman's [ZILF Reference Guide](https://github.com/heasm66/ZILF-Reference-Guide). I hadn't found that one. I also haven't even looked at the contents of any ```.zap``` files, and now I don't know why I never thought to do so. I'm always working from the ZIL files, so I search for a string like ```grep -in lexv *zil```, totally omitting anything noteworthy I might of noticed in a ```.zap``` file. Now I'm curious as to what all I'll find in those!\r\n\r\n---\r\nPS\r\n\r\nI will hold off on those three questions I mentioned at the beginning of this, but I do wonder if this is the version of ZILF everyone should be using (because it is, in fact, the version I am using): https://foss.heptapod.net/zilf/zilf/-/wikis/Releases/0.9/Downloads\r\n\r\n---\r\nPPS\r\n\r\nEverything I've said in this thread that is correct is due to people like you, mrangel, The Pixie (the current developer of Quest), and many, many others who have provided the necessary information (and lots of times a boost in the right direction).\r\n\r\nEverything I've said in this thread that is incorrect is due to my own misunderstandings (and probably a few typographical errors here and there), but I always do my best to correct any misinformation I have shared once I've learned about it.\r\n\r\nAnyway, I've got some good reading to go do now. I shall return once I've read up about vectors and lambdas and tables (oh my).\r\n\r\nThanks, again! To everyone!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Hi!</p>\n</blockquote>\n<p>Hello!</p>\n<hr>\n<blockquote>\n<p>Author of ZILF here with a few notes.</p>\n</blockquote>\n<p>Wow! This is unexpected. I have so many questions. I shall narrow it down to three.</p>\n<p>...after thoroughly reviewing these notes, of course -- as they will likely answer questions I don't even know I'm going to have yet!</p>\n<p>Thanks, by the way! For the input here, but mostly for ZILF! I've been perusing the Hitchhiker's code posted by historicalsource on GitHub for quite a few days now, and it's been equally educational and entertaining. Plus, when I'm not sure how a certain bit of the code is \"behaving\", I can add a call to <code>TELL</code> to print \"debugging\" messages in games after compiling with ZILF and ZAPF. (It's all freaking awesome, but I digress.)</p>\n<hr>\n<p>Regarding your notes (and thanks again!):</p>\n<ol>\n<li>\n<p>Cool; that's pretty much how mrangel said he believes all this works. The bit about returning the address of where a value is stored is the bit about which I am ignorant (not using the word pejoratively, mind you). I think I mostly understand, though. It seems like ...well, similar to when I create an object in JS like <code>frob = { take: function(){ console.log(\"Taken.\")}</code> (keeping it super, super simple), <code>window[\"frob\"]</code> is one way to refer to the property of the <code>window</code> object (like when I tell someone to go to \"my house\"), and from that JS knows the actual physical location \"on the drive\" from which to retrieve the data?</p>\n</li>\n<li>\n<p>Rock and roll! That was the theory posed by mrangel concerning this, too. (Smart fellow, that one!)  I decided to use regular expressions to match the string values of the exits in JS. (It seemed like the all-around easiest way to handle the exits. I'm leaning away from using regular expressions to handle the player's commands, though -- because all the synonyms and whatnot seem much, much more intuitive.)</p>\n</li>\n<li>\n<p>I've seen plenty of linked lists, like <code>()</code> (mrangel explained those to me, too), but I don't recall coming across any vectors (or arrays), like <code>[]</code>. I went through all of SYNTAX.ZIL, VERBS.ZIL, EARTH.ZIL, I did bits and pieces that I needed from GLOBALS.ZIL, and I believe I made it about 2/3 of the way through PARSER.ZIL before I went cross-eyed and decided to take a break from attempting to port any more of it for a couple of days. That was two days ago. Now that I am aware of the vectors, I shall most likely discover one (or more) of them sooner than later (due to the interconnectdeness of all things and all that). From what I've gathered so far (which is very little), a vector is like a ... huh. I don't know what a vector is (yet). I have seen <code>&lt;NTH ,FOO 3&gt;</code> and I figured it out. I seem to recall seeing a <code>&lt;3 ,FOO&gt;</code>, but I don't remember how I handled it, which suggests I skipped over it -- leaving a <code>//TODO</code> in its place. Also, I am fairly certain I saw <code>MAPF</code> when I scanned ahead a little before closing PARSER.ZIL the other day. So, you just helped me with that up front -- as soon as I go learn what the heck a lambda is!</p>\n</li>\n<li>\n<p>I oddly understood most of that -- because of my level of understanding, of course; not that the explanation wasn't well-written. So, if I understand, this is why it checks for the sizes of properties in bytes (because it's the only way it can identify the TypeOf)? And that's also why it needs an identifying header stored in front of the property value in a table?</p>\n</li>\n<li>\n<p>I'm going to have to go learn what a vector is understand the tables. I've also previously noted that I need to learn about 2 byte words and single bytes. I called myself researching the latter for an hour or so, but all I could find online were forum threads with people discussing them in a way which was not elementary enough for me to grasp the concept. My issue (if you haven't guessed) is a serious lack of exposure. I hadn't even heard of LISP or MDL until I posted a link to all the Infocom source code and mrangel said it did not look unlike LISP. Ha ha! Anyway, I know good and well I've seen <code>LEXV</code> numerous times and wondered what it is (expecting to find out later in the code).</p>\n</li>\n</ol>\n<p>This is so much fun! The inner-workings of text adventures are their own adventures! Plus, I'm learning about lots of unknown unknowns along the way, which is always a good time! And I decided to take on Hitchhiker's right off the bat, so, when I'm messing with the code on Thursdays (which I never could quite get the hang of) and having problems understanding a bit of code, I'll eventually work through it to come to some dialogue written by Douglas or Steve that makes me laugh aloud and get back to enjoying the code.</p>\n<p>By the way (and back on track). . .</p>\n<ol start=\"6\">\n<li>I've already learned three things I always needed to know but didn't know I needed to know it until perusing Henrik Åsman's <a href=\"https://github.com/heasm66/ZILF-Reference-Guide\">ZILF Reference Guide</a>. I hadn't found that one. I also haven't even looked at the contents of any <code>.zap</code> files, and now I don't know why I never thought to do so. I'm always working from the ZIL files, so I search for a string like <code>grep -in lexv *zil</code>, totally omitting anything noteworthy I might of noticed in a <code>.zap</code> file. Now I'm curious as to what all I'll find in those!</li>\n</ol>\n<hr>\n<p>PS</p>\n<p>I will hold off on those three questions I mentioned at the beginning of this, but I do wonder if this is the version of ZILF everyone should be using (because it is, in fact, the version I am using): https://foss.heptapod.net/zilf/zilf/-/wikis/Releases/0.9/Downloads</p>\n<hr>\n<p>PPS</p>\n<p>Everything I've said in this thread that is correct is due to people like you, mrangel, The Pixie (the current developer of Quest), and many, many others who have provided the necessary information (and lots of times a boost in the right direction).</p>\n<p>Everything I've said in this thread that is incorrect is due to my own misunderstandings (and probably a few typographical errors here and there), but I always do my best to correct any misinformation I have shared once I've learned about it.</p>\n<p>Anyway, I've got some good reading to go do now. I shall return once I've read up about vectors and lambdas and tables (oh my).</p>\n<p>Thanks, again! To everyone!</p>\n\n",
      "PostDate": "2021-06-01T05:07:33.0751842Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4b6f8dca-fda5-4aff-91d2-e1ca20a275a1",
      "UserId": 548502,
      "Username": "vaporware",
      "AvatarUrl": "https://secure.gravatar.com/avatar/566495eafbf17b395422885350c0fe4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another resource you might find helpful is the [Z-Machine Standards Document](http://www.inform-fiction.org/zmachine/standards/z1point1/index.html), especially sections 1 (the memory map), 12 (the object table), and 13 (the dictionary and lexical analysis).\r\n\r\n> The bit about returning the address of where a value is stored is the bit about which I am ignorant\r\n\r\nHere's one way to think about it.\r\n\r\nIf you open the compiled story file in a hex editor, you can search through it and find the initial values of every global variable, every property of every object, and so on, all laid out the same way they're laid out in the game's memory (because the interpreter copies the whole story file into memory when you start the game).\r\n\r\nFor example, the object `GOWN` in HHGG (defined [here](https://github.com/historicalsource/hitchhikersguide-gold/blob/master/earth.zil#L289-L299)) has a property `(SIZE 15)`, so somewhere in `nhitch.zip` you'll find the bytes `00 0f`, which is 15 written in hex as a two-byte word. Well, you'll probably find many copies of `00 0f`, but one _specific_ copy represents the `SIZE` of `GOWN`.\r\n\r\nThe number of bytes you have to skip ahead from the beginning of the file to find it is the address of that property value.\r\n\r\n>So, if I understand, this is why it checks for the sizes of properties in bytes (because it's the only way it can identify the TypeOf)? And that's also why it needs an identifying header stored in front of the property value in a table?\r\n\r\nIt may help to see what a property table looks like. [Here's the one for `HATCHWAY` in HHGG](\r\nhttps://github.com/historicalsource/hitchhikersguide-gold/blob/master/nhitchdat.zap#L1778-L1806), from `nhitchdat.zap`.\r\n\r\nEach time the game accesses a property, the interpreter has to search through the object's property table, top to bottom, to find the data for that property. The headers in front of each property value (represented in the ZAP code by `.PROP` directives) let it know when it has found the right property, as well as how far ahead to skip to find the next property.\r\n\r\nUsing the property size to indicate what kind of data is stored in the property is a convention Infocom came up with for direction properties. It makes sense for those because most types of exits need different amounts of data anyway: a UEXIT only has a destination room (an object number, which is 1 byte on Z-machine version 3), a NEXIT only has an optional error message (a 2 byte string address), a DEXIT has a destination and door object plus an optional error message (1 + 1 + 2 bytes), etc.\r\n\r\nSome other properties can have varying length, but usually it's just because they can contain more than one value. For example, objects often have more than one value in their `SYNONYM`, `ADJECTIVE`, or `GLOBAL`. In those cases, the game will still use `PTSIZE` when iterating through the values in the property so it knows when to stop.\r\n\r\n(As mrangel pointed out, `FLAGS` might look like another example of this, but it's actually a special case and isn't stored as a property at all -- in the ZAP files, you'll find each object's flags listed in the `.OBJECT` directives, far from the property tables.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Another resource you might find helpful is the <a href=\"http://www.inform-fiction.org/zmachine/standards/z1point1/index.html\">Z-Machine Standards Document</a>, especially sections 1 (the memory map), 12 (the object table), and 13 (the dictionary and lexical analysis).</p>\n<blockquote>\n<p>The bit about returning the address of where a value is stored is the bit about which I am ignorant</p>\n</blockquote>\n<p>Here's one way to think about it.</p>\n<p>If you open the compiled story file in a hex editor, you can search through it and find the initial values of every global variable, every property of every object, and so on, all laid out the same way they're laid out in the game's memory (because the interpreter copies the whole story file into memory when you start the game).</p>\n<p>For example, the object <code>GOWN</code> in HHGG (defined <a href=\"https://github.com/historicalsource/hitchhikersguide-gold/blob/master/earth.zil#L289-L299\">here</a>) has a property <code>(SIZE 15)</code>, so somewhere in <code>nhitch.zip</code> you'll find the bytes <code>00 0f</code>, which is 15 written in hex as a two-byte word. Well, you'll probably find many copies of <code>00 0f</code>, but one <em>specific</em> copy represents the <code>SIZE</code> of <code>GOWN</code>.</p>\n<p>The number of bytes you have to skip ahead from the beginning of the file to find it is the address of that property value.</p>\n<blockquote>\n<p>So, if I understand, this is why it checks for the sizes of properties in bytes (because it's the only way it can identify the TypeOf)? And that's also why it needs an identifying header stored in front of the property value in a table?</p>\n</blockquote>\n<p>It may help to see what a property table looks like. <a href=\"https://github.com/historicalsource/hitchhikersguide-gold/blob/master/nhitchdat.zap#L1778-L1806\">Here's the one for <code>HATCHWAY</code> in HHGG</a>, from <code>nhitchdat.zap</code>.</p>\n<p>Each time the game accesses a property, the interpreter has to search through the object's property table, top to bottom, to find the data for that property. The headers in front of each property value (represented in the ZAP code by <code>.PROP</code> directives) let it know when it has found the right property, as well as how far ahead to skip to find the next property.</p>\n<p>Using the property size to indicate what kind of data is stored in the property is a convention Infocom came up with for direction properties. It makes sense for those because most types of exits need different amounts of data anyway: a UEXIT only has a destination room (an object number, which is 1 byte on Z-machine version 3), a NEXIT only has an optional error message (a 2 byte string address), a DEXIT has a destination and door object plus an optional error message (1 + 1 + 2 bytes), etc.</p>\n<p>Some other properties can have varying length, but usually it's just because they can contain more than one value. For example, objects often have more than one value in their <code>SYNONYM</code>, <code>ADJECTIVE</code>, or <code>GLOBAL</code>. In those cases, the game will still use <code>PTSIZE</code> when iterating through the values in the property so it knows when to stop.</p>\n<p>(As mrangel pointed out, <code>FLAGS</code> might look like another example of this, but it's actually a special case and isn't stored as a property at all -- in the ZAP files, you'll find each object's flags listed in the <code>.OBJECT</code> directives, far from the property tables.)</p>\n\n",
      "PostDate": "2021-06-01T08:01:34.5662603Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dbecdbca-b74a-4f45-a06e-2e6fad78c617",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If you open the compiled story file in a hex editor, you can search through it and find the initial values of every global variable, every property of every object, and so on, all laid out the same way they're laid out in the game's memory (because the interpreter copies the whole story file into memory when you start the game).\r\n>\r\n> For example, the object ```GOWN``` in HHGG [...] has a property ```(SIZE 15)```, so somewhere in **nhitch.zip** you'll find the bytes``` 00 0f```, which is 15 written in hex as a two-byte word. Well, you'll probably find many copies of ```00 0f```, but one specific copy represents the ```SIZE``` of ```GOWN```.\r\n>\r\n> The number of bytes you have to skip ahead from the beginning of the file to find it is the address of that property value.\r\n\r\nOh! I think I'm beginning to see the light now.\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/120363644-fdfb7280-c2d1-11eb-9cd0-5fc8baf518a5.png)\r\n\r\nI need to learn about binary to fully understand all of this.\r\n\r\n...but 15 as a two byte word is ```00``` ```0f```, because ```00``` is 0 and ```0f``` is 15, and together they are 15. I get that part of it, but I don't understand how ```0f``` is 15. In binary, I can figure that ```00001111``` is 15 without looking it up, but that's about the extent of my binary skills.\r\n\r\nI have no clue how I would figure out how ```0f``` is 15, without putting my thinking cap on and doing some research.\r\n\r\nThis looks like a good starting point: https://userweb.cs.txstate.edu/~js236/201112/cs1428/lecture16.pdf\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/120368103-49644f80-c2d7-11eb-8e27-d193b5920539.png)\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/120368154-5aad5c00-c2d7-11eb-8ed0-bf78e343597a.png)\r\n\r\n---\r\nSo, the ```SIZE``` of ```GOWN``` seems like it should be somewhere in ```002f0``` in the memory. . .\r\n\r\nI'm off to find a hex editor to investigate!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If you open the compiled story file in a hex editor, you can search through it and find the initial values of every global variable, every property of every object, and so on, all laid out the same way they're laid out in the game's memory (because the interpreter copies the whole story file into memory when you start the game).</p>\n<p>For example, the object <code>GOWN</code> in HHGG [...] has a property <code>(SIZE 15)</code>, so somewhere in <strong>nhitch.zip</strong> you'll find the bytes<code>00 0f</code>, which is 15 written in hex as a two-byte word. Well, you'll probably find many copies of <code>00 0f</code>, but one specific copy represents the <code>SIZE</code> of <code>GOWN</code>.</p>\n<p>The number of bytes you have to skip ahead from the beginning of the file to find it is the address of that property value.</p>\n</blockquote>\n<p>Oh! I think I'm beginning to see the light now.</p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/120363644-fdfb7280-c2d1-11eb-9cd0-5fc8baf518a5.png\" alt=\"image\"></p>\n<p>I need to learn about binary to fully understand all of this.</p>\n<p>...but 15 as a two byte word is <code>00</code> <code>0f</code>, because <code>00</code> is 0 and <code>0f</code> is 15, and together they are 15. I get that part of it, but I don't understand how <code>0f</code> is 15. In binary, I can figure that <code>00001111</code> is 15 without looking it up, but that's about the extent of my binary skills.</p>\n<p>I have no clue how I would figure out how <code>0f</code> is 15, without putting my thinking cap on and doing some research.</p>\n<p>This looks like a good starting point: https://userweb.cs.txstate.edu/~js236/201112/cs1428/lecture16.pdf</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/120368103-49644f80-c2d7-11eb-8e27-d193b5920539.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/120368154-5aad5c00-c2d7-11eb-8ed0-bf78e343597a.png\" alt=\"image\"></p>\n<hr>\n<p>So, the <code>SIZE</code> of <code>GOWN</code> seems like it should be somewhere in <code>002f0</code> in the memory. . .</p>\n<p>I'm off to find a hex editor to investigate!</p>\n\n",
      "PostDate": "2021-06-01T17:52:50.4783079Z",
      "LastEditDate": "2021-06-01T18:48:33.7530471Z",
      "link": null
    },
    {
      "PostId": "b26f2ed2-6df1-4059-8d8c-58d8fc159d19",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It may help to see what a property table looks like. Here's the one for HATCHWAY in HHGG, from nhitchdat.zap.\r\n\r\n> Each time the game accesses a property, the interpreter has to search through the object's property table, top to bottom, to find the data for that property. The headers in front of each property value (represented in the ZAP code by .PROP directives) let it know when it has found the right property, as well as how far ahead to skip to find the next property.\r\n\r\n>Using the property size to indicate what kind of data is stored in the property is a convention Infocom came up with for direction properties. It makes sense for those because most types of exits need different amounts of data anyway: a UEXIT only has a destination room (an object number, which is 1 byte on Z-machine version 3), a NEXIT only has an optional error message (a 2 byte string address), a DEXIT has a destination and door object plus an optional error message (1 + 1 + 2 bytes), etc.\r\n\r\nOkay. . .\r\n\r\nSo, this is one exit:\r\n\r\n```\r\n\t.PROP 4,P?EAST\t\t; CONDITIONAL EXIT\r\n\tACCESS-SPACE-ENTER-F\t\t; PER FUNCTION\r\n\t.BYTE 0\r\n\t.BYTE 0\r\n```\r\n\r\n---\r\nLet's see if I've got it.\r\n\r\n```.PROP``` signifies that this is where a property begins.\r\n\r\n4 lets us know that we can skip ahead 4 bytes to find the next property, past ```ACCESS-SPACE-ENTER-F``` (which is 2 bytes?) and both instances of ```.BYTE 0```.\r\n\r\nDid they add the two instances of ```.BYTE 0``` just to make an FEXIT a different size than an NEXIT?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It may help to see what a property table looks like. Here's the one for HATCHWAY in HHGG, from nhitchdat.zap.</p>\n</blockquote>\n<blockquote>\n<p>Each time the game accesses a property, the interpreter has to search through the object's property table, top to bottom, to find the data for that property. The headers in front of each property value (represented in the ZAP code by .PROP directives) let it know when it has found the right property, as well as how far ahead to skip to find the next property.</p>\n</blockquote>\n<blockquote>\n<p>Using the property size to indicate what kind of data is stored in the property is a convention Infocom came up with for direction properties. It makes sense for those because most types of exits need different amounts of data anyway: a UEXIT only has a destination room (an object number, which is 1 byte on Z-machine version 3), a NEXIT only has an optional error message (a 2 byte string address), a DEXIT has a destination and door object plus an optional error message (1 + 1 + 2 bytes), etc.</p>\n</blockquote>\n<p>Okay. . .</p>\n<p>So, this is one exit:</p>\n<pre><code>\t.PROP 4,P?EAST\t\t; CONDITIONAL EXIT\n\tACCESS-SPACE-ENTER-F\t\t; PER FUNCTION\n\t.BYTE 0\n\t.BYTE 0\n</code></pre>\n<hr>\n<p>Let's see if I've got it.</p>\n<p><code>.PROP</code> signifies that this is where a property begins.</p>\n<p>4 lets us know that we can skip ahead 4 bytes to find the next property, past <code>ACCESS-SPACE-ENTER-F</code> (which is 2 bytes?) and both instances of <code>.BYTE 0</code>.</p>\n<p>Did they add the two instances of <code>.BYTE 0</code> just to make an FEXIT a different size than an NEXIT?</p>\n\n",
      "PostDate": "2021-06-02T20:44:37.537471Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3cf89db5-6d46-4f02-beb3-d5ea39d8658f",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**SIDENOTE**\r\n\r\nI had assumed that ```P?``` and ```W?``` were routines until I looked at that ```.zap``` file. Like, I thought ```W?ALL``` was like ```W? (ALL)``` for some reason. Now I see that there is actually a ```W?ALL```, and now I feel silly, which is usually what happens not too long after I assume anything.  :)",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>SIDENOTE</strong></p>\n<p>I had assumed that <code>P?</code> and <code>W?</code> were routines until I looked at that <code>.zap</code> file. Like, I thought <code>W?ALL</code> was like <code>W? (ALL)</code> for some reason. Now I see that there is actually a <code>W?ALL</code>, and now I feel silly, which is usually what happens not too long after I assume anything.  :)</p>\n\n",
      "PostDate": "2021-06-02T21:06:18.0316259Z",
      "LastEditDate": "2021-06-02T21:07:38.2880109Z",
      "link": null
    },
    {
      "PostId": "0d798374-b9e9-4a9c-8341-342dfb207133",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> (Apparently \"zork\" was a nonsense word used at MIT for the current uninstalled program in progress, and stuck. Just as this document uses the term \"Z-machine\" for both the machine and its loaded program (which is also sometimes called the \"story file\"), so ZIP (Zork Implementation Program) was used to mean either the interpreter or the object code it interpreted. Code was written in ZIL (Zork Implementation Language), which was derived from MDL (informally called \"muddle\"), a particularly unhelpful form of LISP. It was then compiled by ZILCH to assembly code which was passed to ZAP to make the ZIP.) \r\n\r\nHa!\r\n\r\n\"MDL [...] a particularly unhelpful form of LISP.\"\r\n\r\n---\r\nLast time I tried to read the Z-machine Standards Document, it was, as the say, \"Greek to me.\"\r\n\r\nI was ignorant of a couple of the fundamental building blocks. Now I get it, though! I understand what mrangel was trying to tell me about the address!  And I understand the stuff vaporware is telling me, too!\r\n\r\nWhoo-hoo!\r\n\r\nI really do very much appreciate all the help!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(Apparently \"zork\" was a nonsense word used at MIT for the current uninstalled program in progress, and stuck. Just as this document uses the term \"Z-machine\" for both the machine and its loaded program (which is also sometimes called the \"story file\"), so ZIP (Zork Implementation Program) was used to mean either the interpreter or the object code it interpreted. Code was written in ZIL (Zork Implementation Language), which was derived from MDL (informally called \"muddle\"), a particularly unhelpful form of LISP. It was then compiled by ZILCH to assembly code which was passed to ZAP to make the ZIP.)</p>\n</blockquote>\n<p>Ha!</p>\n<p>\"MDL [...] a particularly unhelpful form of LISP.\"</p>\n<hr>\n<p>Last time I tried to read the Z-machine Standards Document, it was, as the say, \"Greek to me.\"</p>\n<p>I was ignorant of a couple of the fundamental building blocks. Now I get it, though! I understand what mrangel was trying to tell me about the address!  And I understand the stuff vaporware is telling me, too!</p>\n<p>Whoo-hoo!</p>\n<p>I really do very much appreciate all the help!</p>\n\n",
      "PostDate": "2021-06-03T15:43:10.0785257Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05a6df97-fb00-478d-85e5-55c5dec13439",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure if I'm right about many of my guesses… I was half guessing, and half randomly reminiscing about my experience with other LISP variants. But hopefully some of it was useful :)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure if I'm right about many of my guesses… I was half guessing, and half randomly reminiscing about my experience with other LISP variants. But hopefully some of it was useful :)</p>\n\n",
      "PostDate": "2021-06-03T17:03:01.0655007Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5fbeddd-774b-4375-86a5-ccf60fbd433e",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm not sure if I'm right about many of my guesses… I was half guessing, and half randomly reminiscing about my experience with other LISP variants. But hopefully some of it was useful :)\r\n\r\nI haven't been actively trying to prove anything you said wrong, but I have pretty much covered everything you threw out there. Between the super-useful posts by vaporware and all the documentation, everything I recalled you saying was right on point.\r\n\r\nLooking at that ```.zap``` file was the final key, and the lock was the Z-machine Standards Document. Piecing those together with all the stuff you two have posted, along with all the ZIL source code I've been trying to translate to (something very similar) in JS, I finally see how it's all working.\r\n\r\n> \"A moment of realization is worth a thousand prayers.\"\r\n> \\- M. Knox",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm not sure if I'm right about many of my guesses… I was half guessing, and half randomly reminiscing about my experience with other LISP variants. But hopefully some of it was useful :)</p>\n</blockquote>\n<p>I haven't been actively trying to prove anything you said wrong, but I have pretty much covered everything you threw out there. Between the super-useful posts by vaporware and all the documentation, everything I recalled you saying was right on point.</p>\n<p>Looking at that <code>.zap</code> file was the final key, and the lock was the Z-machine Standards Document. Piecing those together with all the stuff you two have posted, along with all the ZIL source code I've been trying to translate to (something very similar) in JS, I finally see how it's all working.</p>\n<blockquote>\n<p>\"A moment of realization is worth a thousand prayers.\"<br>\n- M. Knox</p>\n</blockquote>\n\n",
      "PostDate": "2021-06-03T18:03:41.577701Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a80a25c4-70fd-4bda-b6a3-c7ffba004730",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "post moved to a new thread",
      "EditableFormat": "markdown",
      "HTML": "<p>post moved to a new thread</p>\n\n",
      "PostDate": "2021-06-07T19:32:38.4173818Z",
      "LastEditDate": "2021-06-08T12:43:33.5317135Z",
      "link": null
    },
    {
      "PostId": "b34f8d8a-02b2-4722-a165-37b3a643ac8c",
      "UserId": 548502,
      "Username": "vaporware",
      "AvatarUrl": "https://secure.gravatar.com/avatar/566495eafbf17b395422885350c0fe4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Let's see if I've got it.\r\n>\r\n>.PROP signifies that this is where a property begins.\r\n>\r\n>4 lets us know that we can skip ahead 4 bytes to find the next property, past ACCESS-SPACE-ENTER-F (which is 2 bytes?) and both instances of .BYTE 0.\r\n\r\nCorrect.\r\n\r\n>Did they add the two instances of .BYTE 0 just to make an FEXIT a different size than an NEXIT?\r\n\r\nExactly.\r\n\r\n>I had assumed that P? and W? were routines until I looked at that .zap file. Like, I thought W?ALL was like W? (ALL) for some reason. Now I see that there is actually a W?ALL, and now I feel silly, which is usually what happens not too long after I assume anything. :)\r\n\r\nIndeed, the `?` is just part of the name.\r\n\r\nBy convention, `?` is used at the end of a name to show that something returns a boolean value (e.g. the `==?` function). A `?` in the middle or beginning is used when the compiler generates names, usually by adding a prefix.\r\n\r\nFor example, the word \"in\" can appear in player input, so it has an entry in the dictionary (i.e. the `VOCAB` table). The constant pointing to that entry is `W?IN`. The word can be used as a preposition, so the constant for its preposition number is `PR?IN`. And since `IN` is also a direction property, there's a constant for its property number called `P?IN`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Let's see if I've got it.</p>\n<p>.PROP signifies that this is where a property begins.</p>\n<p>4 lets us know that we can skip ahead 4 bytes to find the next property, past ACCESS-SPACE-ENTER-F (which is 2 bytes?) and both instances of .BYTE 0.</p>\n</blockquote>\n<p>Correct.</p>\n<blockquote>\n<p>Did they add the two instances of .BYTE 0 just to make an FEXIT a different size than an NEXIT?</p>\n</blockquote>\n<p>Exactly.</p>\n<blockquote>\n<p>I had assumed that P? and W? were routines until I looked at that .zap file. Like, I thought W?ALL was like W? (ALL) for some reason. Now I see that there is actually a W?ALL, and now I feel silly, which is usually what happens not too long after I assume anything. :)</p>\n</blockquote>\n<p>Indeed, the <code>?</code> is just part of the name.</p>\n<p>By convention, <code>?</code> is used at the end of a name to show that something returns a boolean value (e.g. the <code>==?</code> function). A <code>?</code> in the middle or beginning is used when the compiler generates names, usually by adding a prefix.</p>\n<p>For example, the word \"in\" can appear in player input, so it has an entry in the dictionary (i.e. the <code>VOCAB</code> table). The constant pointing to that entry is <code>W?IN</code>. The word can be used as a preposition, so the constant for its preposition number is <code>PR?IN</code>. And since <code>IN</code> is also a direction property, there's a constant for its property number called <code>P?IN</code>.</p>\n\n",
      "PostDate": "2021-07-07T07:42:13.728145Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "917f90f2-be53-4382-8639-f42757b2baa5",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Splendid!\r\n\r\nI am beginning to get the hang of this.\r\n\r\nThanks for all your help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Splendid!</p>\n<p>I am beginning to get the hang of this.</p>\n<p>Thanks for all your help!</p>\n\n",
      "PostDate": "2021-07-07T15:24:18.4230616Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
