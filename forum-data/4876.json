{
  "Topic": {
    "TopicId": "4876",
    "ForumId": "15",
    "Title": "Development Roadmap",
    "LastUpdated": "2015-02-04T16:10:16+00:00",
    "ReplyCount": 15
  },
  "Posts": [
    {
      "PostId": "32594",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "QuestKit will consist of the following components:\n\n- compiler (questkit.js)\n- Core libraries (core.yaml, core.js)\n- player UI (index.template.html, style.template.css, ui.js)\n- language templates (en.yaml, etc.)\n- editor\n- documentation\n\nTo develop these, work is split into the following projects:\n\n- Migration of Quest 5 Core libraries\n- Migration of Quest 5 language templates\n- Implement player UI\n- Implement editor\n- player UI state saving and undo\n- unit testing (this is new - Quest 5 has some unit tests, but we can unit test all of the Core libraries when they are in JavaScript)\n- end-to-end testing (some way of generating example/test games and running walkthroughs)\n- write documentation, tutorial\n\nThere are some features of Quest 5 that we shouldn't need to migrate. I'm planning to add the ability to show Squiffy-like sections and passages (&quot;pages&quot;, I suppose), which will make it easy to have gamebook-style parts of a game (like conversations). This means we shouldn't need the following:\n\n- &quot;wait&quot; should be unnecessary, just go to a page with a &quot;Continue&quot; link\n- &quot;get input&quot; also is unnecessary, if we can create pages that have an input prompt\n- &quot;show menu&quot; - just show a page with a list of links instead\n\nWe want to deliver [i:193alk0e]something[/i:193alk0e] as soon as possible - some kind of MVP - so we can iterate on that. But quite a lot needs to be in place before we can create a minimally useful release.\n\nI propose the first release of QuestKit will be a command-line only program, much like Squiffy 2 currently is. It will implement much of Quest 5's core library - some usable subset of it anyway. It will generate games that will save and load to local storage, with a fairly basic player UI.\n\nLater releases will, in turn:\n- finish migration of the core library\n- migrate the other language templates\n- implement a simple text editor for web and desktop\n- flesh out the rest of the editor\n- add an API to save game state to a player's textadventures.co.uk account, so they can resume on another device\n\nThen we will finally have something that replaces Quest 5, while hopefully shipping often enough to gather useful feedback.\n\nSo, for the next step, I'm going to be migrating the Core libraries and implementing a basic responsive player UI. We can split these projects up if anybody wants to volunteer their time and skills - let me know. Otherwise, I'm not planning to look myself into any of the testing stuff just yet - I know Jay is interested in this, so perhaps he can share some thoughts here about how this side of things might work?",
      "EditableFormat": "bbcode",
      "HTML": "QuestKit will consist of the following components:<br/><br/>- compiler (questkit.js)<br/>- Core libraries (core.yaml, core.js)<br/>- player UI (index.template.html, style.template.css, ui.js)<br/>- language templates (en.yaml, etc.)<br/>- editor<br/>- documentation<br/><br/>To develop these, work is split into the following projects:<br/><br/>- Migration of Quest 5 Core libraries<br/>- Migration of Quest 5 language templates<br/>- Implement player UI<br/>- Implement editor<br/>- player UI state saving and undo<br/>- unit testing (this is new - Quest 5 has some unit tests, but we can unit test all of the Core libraries when they are in JavaScript)<br/>- end-to-end testing (some way of generating example/test games and running walkthroughs)<br/>- write documentation, tutorial<br/><br/>There are some features of Quest 5 that we shouldn't need to migrate. I'm planning to add the ability to show Squiffy-like sections and passages (&quot;pages&quot;, I suppose), which will make it easy to have gamebook-style parts of a game (like conversations). This means we shouldn't need the following:<br/><br/>- &quot;wait&quot; should be unnecessary, just go to a page with a &quot;Continue&quot; link<br/>- &quot;get input&quot; also is unnecessary, if we can create pages that have an input prompt<br/>- &quot;show menu&quot; - just show a page with a list of links instead<br/><br/>We want to deliver <span style=\"font-style:italic;\">something</span> as soon as possible - some kind of MVP - so we can iterate on that. But quite a lot needs to be in place before we can create a minimally useful release.<br/><br/>I propose the first release of QuestKit will be a command-line only program, much like Squiffy 2 currently is. It will implement much of Quest 5's core library - some usable subset of it anyway. It will generate games that will save and load to local storage, with a fairly basic player UI.<br/><br/>Later releases will, in turn:<br/>- finish migration of the core library<br/>- migrate the other language templates<br/>- implement a simple text editor for web and desktop<br/>- flesh out the rest of the editor<br/>- add an API to save game state to a player's textadventures.co.uk account, so they can resume on another device<br/><br/>Then we will finally have something that replaces Quest 5, while hopefully shipping often enough to gather useful feedback.<br/><br/>So, for the next step, I'm going to be migrating the Core libraries and implementing a basic responsive player UI. We can split these projects up if anybody wants to volunteer their time and skills - let me know. Otherwise, I'm not planning to look myself into any of the testing stuff just yet - I know Jay is interested in this, so perhaps he can share some thoughts here about how this side of things might work?",
      "PostDate": "2014-12-07T14:29:12+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32618",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "When saving will the complete game be saved like now or do you think of something new?",
      "EditableFormat": "bbcode",
      "HTML": "When saving will the complete game be saved like now or do you think of something new?",
      "PostDate": "2014-12-07T20:39:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32619",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "No, it will just save the changed attributes.",
      "EditableFormat": "bbcode",
      "HTML": "No, it will just save the changed attributes.",
      "PostDate": "2014-12-07T20:41:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32633",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I'll be happy to contribute what I can toward the testing. I think we should ultimately ideally strive for\n- total code coverage. So if any line of code changes that breaks a feature, we'll know right away.\n- fully automated, to the extent possible. If we make the tests easy and quick to run, then we'll run them!\n\nOf course, those are the ideals. But it's good to have something to shoot towards. I want to avoid the case where we add a new feature and unwittingly end up breaking something else, and then users end up finding it in their code. Also, as the code becomes larger and more full featured, it will be more and more difficult to manually test the entire system. Finally, the tests provide not only sample code for the APIs but provide a form of living documentation. If you want to know how an API works, go look at the tests for it.\n\nI'll look into mocha, to make sure it's able to be automated (and how easy). I'm figure it must be, but it would be good to be sure.",
      "EditableFormat": "bbcode",
      "HTML": "I'll be happy to contribute what I can toward the testing. I think we should ultimately ideally strive for<br/>- total code coverage. So if any line of code changes that breaks a feature, we'll know right away.<br/>- fully automated, to the extent possible. If we make the tests easy and quick to run, then we'll run them!<br/><br/>Of course, those are the ideals. But it's good to have something to shoot towards. I want to avoid the case where we add a new feature and unwittingly end up breaking something else, and then users end up finding it in their code. Also, as the code becomes larger and more full featured, it will be more and more difficult to manually test the entire system. Finally, the tests provide not only sample code for the APIs but provide a form of living documentation. If you want to know how an API works, go look at the tests for it.<br/><br/>I'll look into mocha, to make sure it's able to be automated (and how easy). I'm figure it must be, but it would be good to be sure.",
      "PostDate": "2014-12-07T21:32:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32635",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I do think some kind of &quot;show menu&quot; will be useful, even if it's just a convenient way to output HTML links. A menu might not be able to be statically defined in text. Also, assuming there is a parser, you'd want a menu to be somewhat modal, the coding of which is probably beyond most novice authors. Of course, once we have the framework, then this stuff can be added as libraries/modules. \n\nOh yeah - a library/module mechanism seems to be a must (even beyond the core libraries). That opens things up to users growing the code base. I know people can always insert &lt;script&gt; lines in their Javascript, but the more user-facing interface should make it as easy as possible.",
      "EditableFormat": "bbcode",
      "HTML": "I do think some kind of &quot;show menu&quot; will be useful, even if it's just a convenient way to output HTML links. A menu might not be able to be statically defined in text. Also, assuming there is a parser, you'd want a menu to be somewhat modal, the coding of which is probably beyond most novice authors. Of course, once we have the framework, then this stuff can be added as libraries/modules. <br/><br/>Oh yeah - a library/module mechanism seems to be a must (even beyond the core libraries). That opens things up to users growing the code base. I know people can always insert &lt;script&gt; lines in their Javascript, but the more user-facing interface should make it as easy as possible.",
      "PostDate": "2014-12-07T21:40:16+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32637",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "You may be right about &quot;show menu&quot;... the parser will need to be able to generate a list of links for disambiguation anyway. Although this doesn't need to be modal (it hasn't been modal in Quest since maybe v5.3? You can sort of ignore the in-output disambiguation list and type some other command instead).\n\nYes, it would be great to provide a way of making it easy for people to share code via some kind of library/module system. I'm open to all suggestions!",
      "EditableFormat": "bbcode",
      "HTML": "You may be right about &quot;show menu&quot;... the parser will need to be able to generate a list of links for disambiguation anyway. Although this doesn't need to be modal (it hasn't been modal in Quest since maybe v5.3? You can sort of ignore the in-output disambiguation list and type some other command instead).<br/><br/>Yes, it would be great to provide a way of making it easy for people to share code via some kind of library/module system. I'm open to all suggestions!",
      "PostDate": "2014-12-07T21:50:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32650",
      "UserId": 0,
      "Username": "mrbooe",
      "UserAvatar": null,
      "UserGravatar": "0702aea3b3efe613ab7cdb09b77a7adb",
      "EditableText": "Hello guys,\n\nI know this may seem a bit simple minded for you that really understand the coding going on behind the scenes.  Yet, I wanted to ask if games made now would be fully operational on a new system such as the one you guys are planning on designing.  I am planning my first game and I am having many roadblocks come up.  All the time it takes a new game author to get used to the system is sizable.  I wanted to know if it would be worth my time to jump in now or wait until the new platform is available.  I have almost zero coding skills and guess that using the gui could be a good learn as you go thing.\n\nI plan on making games for learning languages but want to make sure I won't have to simply redo the games once the system is updated.\n\nThanks for working on this system.  It will be a great help in learning and teaching languages.",
      "EditableFormat": "bbcode",
      "HTML": "Hello guys,<br/><br/>I know this may seem a bit simple minded for you that really understand the coding going on behind the scenes.  Yet, I wanted to ask if games made now would be fully operational on a new system such as the one you guys are planning on designing.  I am planning my first game and I am having many roadblocks come up.  All the time it takes a new game author to get used to the system is sizable.  I wanted to know if it would be worth my time to jump in now or wait until the new platform is available.  I have almost zero coding skills and guess that using the gui could be a good learn as you go thing.<br/><br/>I plan on making games for learning languages but want to make sure I won't have to simply redo the games once the system is updated.<br/><br/>Thanks for working on this system.  It will be a great help in learning and teaching languages.",
      "PostDate": "2014-12-08T02:19:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32684",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Given that QuestKit is in the beginning design phase, I can't imagine there being a fully usable system for quite a while still. And I can't imagine the current Quest going away either, at least not for a *very* long time. I think if you have the interest now, jump into Quest and get going with it! The concepts you learn will translate whenever the new system is in a releasable form. I don't know if games will be directly convertible, but I don't know how relevant that might be for you anyway - nothing is going to stop your Quest 5.x games from working in the future, and by the time you outgrow the current Quest, the new one should be ready for any future games you might want to create.",
      "EditableFormat": "bbcode",
      "HTML": "Given that QuestKit is in the beginning design phase, I can't imagine there being a fully usable system for quite a while still. And I can't imagine the current Quest going away either, at least not for a *very* long time. I think if you have the interest now, jump into Quest and get going with it! The concepts you learn will translate whenever the new system is in a releasable form. I don't know if games will be directly convertible, but I don't know how relevant that might be for you anyway - nothing is going to stop your Quest 5.x games from working in the future, and by the time you outgrow the current Quest, the new one should be ready for any future games you might want to create.",
      "PostDate": "2014-12-08T07:42:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32686",
      "UserId": 0,
      "Username": "mrbooe",
      "UserAvatar": null,
      "UserGravatar": "0702aea3b3efe613ab7cdb09b77a7adb",
      "EditableText": "Thanks for the quick reply.  I have been working on the ideas for a while now and quest in its current form seems like it will do the trick nicely (though some of the upgrades for the new one will be great later as well.)  I will continue on and hopefully learn some coding along the way.\n\nBy the way, many of the pics in the help files are broken.  I would looooove it if someone who could re-link them would give it a look.\n\nThanks again.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for the quick reply.  I have been working on the ideas for a while now and quest in its current form seems like it will do the trick nicely (though some of the upgrades for the new one will be great later as well.)  I will continue on and hopefully learn some coding along the way.<br/><br/>By the way, many of the pics in the help files are broken.  I would looooove it if someone who could re-link them would give it a look.<br/><br/>Thanks again.",
      "PostDate": "2014-12-08T07:47:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32734",
      "UserId": 0,
      "Username": "m4u",
      "UserAvatar": null,
      "UserGravatar": "71ebfc011d52b6e8d2e91bc9f2fdda5a",
      "EditableText": "Does this new system mean that we will be able to translate the whole quest to others languages, interface included, 100%?",
      "EditableFormat": "bbcode",
      "HTML": "Does this new system mean that we will be able to translate the whole quest to others languages, interface included, 100%?",
      "PostDate": "2014-12-10T01:14:36+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32748",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Yes, you'll be able to completely customise the interface by editing index.template.html: <!-- m --><a class=\"postlink\" href=\"https://github.com/textadventures/questkit/blob/master/index.template.html\">https://github.com/textadventures/quest ... plate.html</a><!-- m -->\n\nIt will be translatable by default though, just like Quest's interface currently is.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, you'll be able to completely customise the interface by editing index.template.html: <!-- m --><a class=\"postlink\" href=\"https://github.com/textadventures/questkit/blob/master/index.template.html\">https://github.com/textadventures/quest ... plate.html</a><!-- m --><br/><br/>It will be translatable by default though, just like Quest's interface currently is.",
      "PostDate": "2014-12-10T20:48:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33617",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "I'm actually pretty excited about the proposed new system for Quest. I have a couple of questions in regards to what will be possible to do with it in terms of finished products, however as I have a couple of projects in mind that I'm writing out that have fairly specific requirements. \n\n1. Will it be possible to have the Quest input/output and parser inside of a canvas element that simulates a terminal, i.e. like the Infocom games of old - similar to how a library like rogue.js creates a virtual terminal in a canvas element for the text-based graphics. If I'm not explaining myself correctly, Jay will know what I'm talking about and should be able to articulate what I mean better. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n2. A persistent menu in lieu of a parser? Similarly to how text adventure games have been handled on gaming consoles, where there is a persistent menu on screen at all times with a list of context-sensitive actions based on your current situation (i.e. Phantay Star 2 text adventures for genesis/sega cd, phantasy star adventure for game gear, etc.) I know Jay has a library he's been working on that does something like this, but I'm thinking like where the parser would be replaced entirely and the list of commands would have some kind of a highlight bar that could be moved over the various choices by the arrow keys or even say by a gamepad, and then accessed by hitting enter or pressing a button.\n\nNow that everything is going to be JS based I know it would be possible to hack this stuff in even if it wasn't specifically supported, but as a graphically-minded person I like the idea of having total flexibility in terms of presentation to the user because the UI usually factors heavily into my vision for a game.",
      "EditableFormat": "bbcode",
      "HTML": "I'm actually pretty excited about the proposed new system for Quest. I have a couple of questions in regards to what will be possible to do with it in terms of finished products, however as I have a couple of projects in mind that I'm writing out that have fairly specific requirements. <br/><br/>1. Will it be possible to have the Quest input/output and parser inside of a canvas element that simulates a terminal, i.e. like the Infocom games of old - similar to how a library like rogue.js creates a virtual terminal in a canvas element for the text-based graphics. If I'm not explaining myself correctly, Jay will know what I'm talking about and should be able to articulate what I mean better. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>2. A persistent menu in lieu of a parser? Similarly to how text adventure games have been handled on gaming consoles, where there is a persistent menu on screen at all times with a list of context-sensitive actions based on your current situation (i.e. Phantay Star 2 text adventures for genesis/sega cd, phantasy star adventure for game gear, etc.) I know Jay has a library he's been working on that does something like this, but I'm thinking like where the parser would be replaced entirely and the list of commands would have some kind of a highlight bar that could be moved over the various choices by the arrow keys or even say by a gamepad, and then accessed by hitting enter or pressing a button.<br/><br/>Now that everything is going to be JS based I know it would be possible to hack this stuff in even if it wasn't specifically supported, but as a graphically-minded person I like the idea of having total flexibility in terms of presentation to the user because the UI usually factors heavily into my vision for a game.",
      "PostDate": "2015-01-07T13:28:54+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34507",
      "UserId": 0,
      "Username": "xordevoreaux",
      "UserAvatar": null,
      "UserGravatar": "7429ebfb6f14ed642c7649e6f5e8abca",
      "EditableText": "Ugh.  Just as feel like I'm getting good at Quest5, the rug's pulled out from under me and boom, new learning curve.  I can just imagine, new rounds of bug reports about drop-downs on the UI not addressing the interface, features dropping out... Good luck on questkit.  I think I'll just sit in a corner and quietly write quest5 games for myself.  I was really hoping ... doesn't matter what I was hoping.\nGood luck with QK.",
      "EditableFormat": "bbcode",
      "HTML": "Ugh.  Just as feel like I'm getting good at Quest5, the rug's pulled out from under me and boom, new learning curve.  I can just imagine, new rounds of bug reports about drop-downs on the UI not addressing the interface, features dropping out... Good luck on questkit.  I think I'll just sit in a corner and quietly write quest5 games for myself.  I was really hoping ... doesn't matter what I was hoping.<br/>Good luck with QK.",
      "PostDate": "2015-02-04T02:38:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34512",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Again, Quest 5 isn't going anywhere.\n\nQuestKit is simply the next major version of Quest - there are always going to be big changes in a new major version, because that's what a major version is!\n\nWe've had a big transition like this before - Quest 5 was itself a complete rewrite, and didn't share very much with Quest 4. This time around, you should find more familiar in QuestKit, because it is based on the same core library as Quest 5.\n\nIt's going to be a long time before QuestKit is ready, and Quest 5 will continue to be supported, so you won't have to make the transition if you don't want to. But hopefully you will!",
      "EditableFormat": "bbcode",
      "HTML": "Again, Quest 5 isn't going anywhere.<br/><br/>QuestKit is simply the next major version of Quest - there are always going to be big changes in a new major version, because that's what a major version is!<br/><br/>We've had a big transition like this before - Quest 5 was itself a complete rewrite, and didn't share very much with Quest 4. This time around, you should find more familiar in QuestKit, because it is based on the same core library as Quest 5.<br/><br/>It's going to be a long time before QuestKit is ready, and Quest 5 will continue to be supported, so you won't have to make the transition if you don't want to. But hopefully you will!",
      "PostDate": "2015-02-04T10:33:19+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34516",
      "UserId": 0,
      "Username": "m4u",
      "UserAvatar": null,
      "UserGravatar": "71ebfc011d52b6e8d2e91bc9f2fdda5a",
      "EditableText": "I'm excited about the new QuestKit! I'm just sad that it won't be ready before the next IfComp because I intend to enter this year with the sequel of Dream Pieces <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I'm excited about the new QuestKit! I'm just sad that it won't be ready before the next IfComp because I intend to enter this year with the sequel of Dream Pieces <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2015-02-04T15:42:09+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "34519",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "I'm excited as it appears we'll be able to write for mobile devices more easily.",
      "EditableFormat": "bbcode",
      "HTML": "I'm excited as it appears we'll be able to write for mobile devices more easily.",
      "PostDate": "2015-02-04T16:10:16+00:00",
      "LastEditDate": null
    }
  ]
}
