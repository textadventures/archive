{
  "Topic": {
    "TopicId": "9bk4tawiwewzkqc7m-w5eq",
    "ForumId": "10",
    "Title": "Purchase Clone and Delete?",
    "LastUpdated": "2020-12-21T21:39:24.1881844Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ca904899-fc8d-460e-be0f-18f63486eac2",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As I am not a terribly strong coder, I may be going about this in completely the wrong way. I'm creating a system for fishing that requires the use of bait. Each time a fishing attempt is made, it uses one bait. I've got that functionality working just fine, but I can't seem to figure out how to make Pixie's Shoplib work with what I'm doing.\r\n\r\nEssentially, in the shop, I want the store to have an unlimited amount of bait for sale. Pixie's Shoplib includes support for an attribute \"cloneonpurchase,\" which as it says on the tin, makes a clone of the purchased item and adds it to the player's inventory.  So far so good.\r\n\r\nExcept what I want it to do is tick up an attribute I created called baitQty, which I have set to an integer on the player object. On the \"prototype\" bait object I added a script on the Inventory tab which should run when the item is \"taken.\" That script is as follows:\r\n\r\n    player.baitQty = player.baitQty + 1\r\n    RemoveObject (this)\r\n    msg (\"You pick up the bait and put it in your stash.\")\r\n\r\nNow, this worked perfectly right up until I implemented the \"cloneonepurchase\" attribute on the master object. Once I did that, it started adding individual items to the player's inventory rather than removing them from the game. Not only that, but it also fails to tick up the baitQty attribute that was working previously when buying the \"prototype\" object without cloning. I've read through the cloning tutorial, but I think I still must be missing something about how clones work and how to call on a specific clone when it's introduced to the game. Does anyone have any insight? ",
      "EditableFormat": "markdown",
      "HTML": "<p>As I am not a terribly strong coder, I may be going about this in completely the wrong way. I'm creating a system for fishing that requires the use of bait. Each time a fishing attempt is made, it uses one bait. I've got that functionality working just fine, but I can't seem to figure out how to make Pixie's Shoplib work with what I'm doing.</p>\n<p>Essentially, in the shop, I want the store to have an unlimited amount of bait for sale. Pixie's Shoplib includes support for an attribute \"cloneonpurchase,\" which as it says on the tin, makes a clone of the purchased item and adds it to the player's inventory.  So far so good.</p>\n<p>Except what I want it to do is tick up an attribute I created called baitQty, which I have set to an integer on the player object. On the \"prototype\" bait object I added a script on the Inventory tab which should run when the item is \"taken.\" That script is as follows:</p>\n<pre><code>player.baitQty = player.baitQty + 1\nRemoveObject (this)\nmsg (\"You pick up the bait and put it in your stash.\")\n</code></pre>\n<p>Now, this worked perfectly right up until I implemented the \"cloneonepurchase\" attribute on the master object. Once I did that, it started adding individual items to the player's inventory rather than removing them from the game. Not only that, but it also fails to tick up the baitQty attribute that was working previously when buying the \"prototype\" object without cloning. I've read through the cloning tutorial, but I think I still must be missing something about how clones work and how to call on a specific clone when it's introduced to the game. Does anyone have any insight?</p>\n\n",
      "PostDate": "2020-12-21T21:39:24.1881844Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1905016d-a5cc-4551-a26a-a5ad86aef4f5",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, I just fixed this in a roundabout way (whether it's the right way, I can't say). I added a change script to the attribute \"hasbeenmoved\" on the \"prototype\" object and pasted the script from my previous comment in there. Now when the item gets moved (purchased), that script executes. Now I can buy as many as I want, and the counter keeps going up, and nothing enters my inventory. So... I guess this is here in case anyone else is struggling with this same issue.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, I just fixed this in a roundabout way (whether it's the right way, I can't say). I added a change script to the attribute \"hasbeenmoved\" on the \"prototype\" object and pasted the script from my previous comment in there. Now when the item gets moved (purchased), that script executes. Now I can buy as many as I want, and the counter keeps going up, and nothing enters my inventory. So... I guess this is here in case anyone else is struggling with this same issue.</p>\n\n",
      "PostDate": "2020-12-21T22:18:37.4744664Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4e907880-f02b-42b5-b7a9-8e8175508fb4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As far as I understand it, `cloneonpurchase` makes a clone of the object and adds it to the player's inventory. It doesn't run the object's 'take' script, because the object isn't being taken. It's being moved into the inventory by the shop script.\r\n\r\nI can see two ways to deal with this.\r\n\r\nFirst option: Don't use `cloneonpurchase`; you can probably have the player take the original instead, and instead of `RemoveObject` you make the script return it to the shop's inventory. I don't know  the shop system well enough to say how you'd do this, but it shouldn't be too hard to work out.\r\n\r\nSecond option: instead of the \"take\" script on the inventory tab (which runs when the player uses the \"take\" command on an object they can see), create a \"changedparent\" script (which is run whenever the object is moved to a different location).\r\n\r\nIf you have the desktop version of Quest, you should be able to find `changedparent` somewhere on the Attributes tab; possibly next to the `parent` attribute. I don't know the exact layout, as I only use the online editor.\r\nThere will be a default `changedparent`, which all objects has. It basically says \"if this object is the player, display the description for the room they moved into\". So for an object like bait, you can just replace that script.\r\n\r\nIf you're on the web editor, or you can't find changedparent, then go to the 'Features' tab and check \"run an initialisation script\". Then go to the Initialisation script tab, and enter this:\r\n<pre><code>this.changedparent => {\r\n  <em style=\"font-family: initial\">insert the script here</em>\r\n}</code></pre>\r\n\r\nThe changedparent script would probably be:\r\n```\r\nif (Got (this)) {\r\n  player.baitQty = player.baitQty + 1\r\n  RemoveObject (this)\r\n  msg (\"You pick up the bait and put it in your stash.\")\r\n}\r\n```\r\nHowever, this may result in your save files getting quite large. When you call `RemoveObject`, it doesn't delete the object. It just moves it into space, so it isn't in any room and the player can't find it. So you'll be saving all those deleted clones and their attributes when the player saves. This shouldn't be a problem, but if it gets to be hundreds of items or more, it could start to slow the game down.\r\n\r\nSo if the player is buying a lot of bait, it might be wise to change `RemoveObject (this)` to `destroy (this.name)`. Note that sometimes you can't do this. If the shop script attempts to do anything with the clone _after_  moving it to the inventory, this would cause an error. So you might have to test it, to see which method of disposal works better for you.",
      "EditableFormat": "markdown",
      "HTML": "<p>As far as I understand it, <code>cloneonpurchase</code> makes a clone of the object and adds it to the player's inventory. It doesn't run the object's 'take' script, because the object isn't being taken. It's being moved into the inventory by the shop script.</p>\n<p>I can see two ways to deal with this.</p>\n<p>First option: Don't use <code>cloneonpurchase</code>; you can probably have the player take the original instead, and instead of <code>RemoveObject</code> you make the script return it to the shop's inventory. I don't know  the shop system well enough to say how you'd do this, but it shouldn't be too hard to work out.</p>\n<p>Second option: instead of the \"take\" script on the inventory tab (which runs when the player uses the \"take\" command on an object they can see), create a \"changedparent\" script (which is run whenever the object is moved to a different location).</p>\n<p>If you have the desktop version of Quest, you should be able to find <code>changedparent</code> somewhere on the Attributes tab; possibly next to the <code>parent</code> attribute. I don't know the exact layout, as I only use the online editor.<br>\nThere will be a default <code>changedparent</code>, which all objects has. It basically says \"if this object is the player, display the description for the room they moved into\". So for an object like bait, you can just replace that script.</p>\n<p>If you're on the web editor, or you can't find changedparent, then go to the 'Features' tab and check \"run an initialisation script\". Then go to the Initialisation script tab, and enter this:</p>\n<pre><code>this.changedparent =&gt; {\n  <em style=\"font-family: initial\">insert the script here</em>\n}</code></pre>\n<p>The changedparent script would probably be:</p>\n<pre><code>if (Got (this)) {\n  player.baitQty = player.baitQty + 1\n  RemoveObject (this)\n  msg (\"You pick up the bait and put it in your stash.\")\n}\n</code></pre>\n<p>However, this may result in your save files getting quite large. When you call <code>RemoveObject</code>, it doesn't delete the object. It just moves it into space, so it isn't in any room and the player can't find it. So you'll be saving all those deleted clones and their attributes when the player saves. This shouldn't be a problem, but if it gets to be hundreds of items or more, it could start to slow the game down.</p>\n<p>So if the player is buying a lot of bait, it might be wise to change <code>RemoveObject (this)</code> to <code>destroy (this.name)</code>. Note that sometimes you can't do this. If the shop script attempts to do anything with the clone <em>after</em>  moving it to the inventory, this would cause an error. So you might have to test it, to see which method of disposal works better for you.</p>\n\n",
      "PostDate": "2020-12-21T22:24:22.0901421Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ee76d2c-e912-483e-888c-f63342aff421",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, you beat me to it :)\r\n\r\nThe normal way to do things like this is to use the changescript for `parent`, so that you can confirm that it's being moved to the inventory. But if selling it is the only place you find bait, the changescript for hasbeenmoved works just as well.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, you beat me to it :)</p>\n<p>The normal way to do things like this is to use the changescript for <code>parent</code>, so that you can confirm that it's being moved to the inventory. But if selling it is the only place you find bait, the changescript for hasbeenmoved works just as well.</p>\n\n",
      "PostDate": "2020-12-21T22:26:38.4495784Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c6236296-f919-4fb0-a428-aecd89d39b54",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks as always mrangel for your wonderful insights.  I do anticipate a lot of bait being purchased as fishing ought to be a pretty decent way to get healing items in my game.  And I don't want to limit players in terms of the quantity they can carry, so switching out to ```destroy (this.name)``` seems like a better option. And I'll probably find that changedparent attribute as well, because I'd like the option to have it be picked up from the world.\r\n\r\nThanks again! Your help is invaluable.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks as always mrangel for your wonderful insights.  I do anticipate a lot of bait being purchased as fishing ought to be a pretty decent way to get healing items in my game.  And I don't want to limit players in terms of the quantity they can carry, so switching out to <code>destroy (this.name)</code> seems like a better option. And I'll probably find that changedparent attribute as well, because I'd like the option to have it be picked up from the world.</p>\n<p>Thanks again! Your help is invaluable.</p>\n\n",
      "PostDate": "2020-12-22T03:09:03.244742Z",
      "LastEditDate": "2020-12-22T03:13:39.9774516Z",
      "link": null
    },
    {
      "PostId": "327e805f-0816-4c56-b21a-912284812772",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code I have set up in the store under the \"hasbeenmoved\" attribute is working perfectly, and it includes the ```destroy (this.name)``` bit.\r\n\r\nHowever, when I try to introduce this same code ```destroy (this.name)``` to a test object in the environment, it throws the following error: \r\n\r\nError running script: Collection was modified; enumeration operation may not execute.\r\n\r\nAny idea what might be causing this or if there's a different way to destroy the object? I'm testing it on a freshly made standalone object I'm picking up from the environment, and I've added that code to the Inventory tab in the \"after taking the object\" script. I figured I'd deal with any bait objects in the world separately from ones in the store since that's working perfectly at the moment.",
      "EditableFormat": "markdown",
      "HTML": "<p>The code I have set up in the store under the \"hasbeenmoved\" attribute is working perfectly, and it includes the <code>destroy (this.name)</code> bit.</p>\n<p>However, when I try to introduce this same code <code>destroy (this.name)</code> to a test object in the environment, it throws the following error:</p>\n<p>Error running script: Collection was modified; enumeration operation may not execute.</p>\n<p>Any idea what might be causing this or if there's a different way to destroy the object? I'm testing it on a freshly made standalone object I'm picking up from the environment, and I've added that code to the Inventory tab in the \"after taking the object\" script. I figured I'd deal with any bait objects in the world separately from ones in the store since that's working perfectly at the moment.</p>\n\n",
      "PostDate": "2020-12-22T15:25:26.9944898Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a0918678-ed06-450c-b199-244519c47fcd",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, I just found this post from Alex concerning this issue as well, who seems to indicate that destroying doesn't free up as much memory as one might think.\r\n\r\n**Alex**\r\n_You don't need to use destroy unless for some reason you're dynamically creating a lot of objects. It is quicker just to hide an object. You won't save much memory by destroying - and you won't save any unless the player saves and reloads, because \"undo\" will keep a reference to the destroyed object anyway._\r\n\r\nSo for the ones outside of the scope of the shop, I've tried simply using ```remove object (this)```, which seems to work as intended. Does this seem sound, or would it be better to use ```move object``` and pick a destination instead? I guess I'm not sure where Quest moves an object to when using the ```remove``` function or if it even matters.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, I just found this post from Alex concerning this issue as well, who seems to indicate that destroying doesn't free up as much memory as one might think.</p>\n<p><strong>Alex</strong><br>\n<em>You don't need to use destroy unless for some reason you're dynamically creating a lot of objects. It is quicker just to hide an object. You won't save much memory by destroying - and you won't save any unless the player saves and reloads, because \"undo\" will keep a reference to the destroyed object anyway.</em></p>\n<p>So for the ones outside of the scope of the shop, I've tried simply using <code>remove object (this)</code>, which seems to work as intended. Does this seem sound, or would it be better to use <code>move object</code> and pick a destination instead? I guess I'm not sure where Quest moves an object to when using the <code>remove</code> function or if it even matters.</p>\n\n",
      "PostDate": "2020-12-22T15:36:40.1757063Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4befb911-47a7-4ecc-a2c8-3b5528d3345b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Error running script: Collection was modified; enumeration operation may not execute.\r\n\r\nBasically, if you're using `foreach` to go over an objectlist and you destroy the object, the `foreach` complains that its list has changed.\r\nCommands which allow all (for example \"take all\") use a list of objects in their script. So destroying an object within its 'take' or 'drop' scripts will give an error.\r\n\r\nIt's probably not necessary to destroy every object unless you have large numbers of cloned objects. But if you want to, one method would be making a turnscript which removes all clones whose parent is `null`; or even making a list of names and having a turnscript that removes the listed objects.\r\nMy usual approach (note: still not really necessary) is a turnscript like:\r\n```\r\nobjects = FilterByAttribute (FilterByNotAttribute (AllObjects(), \"prototype\", null), \"parent\", null)\r\nwhile (ListCount (objects) > 0) {\r\n  obj = ListItem (objects, 0)\r\n  if (not obj.prototype = obj) destroy (obj.name)\r\n  else list remove (objects, obj)\r\n}\r\n```\r\n\r\n> Does this seem sound, or would it be better to use `move object` and pick a destination instead?\r\n\r\n`RemoveObject (this)` is exactly the same as `MoveObject (this, null)` or `this.parent = null` (which is marginally more efficient, but less human-readable)\r\n\r\nThere's no real advantage to using any particular method. I've seen games that put unnecessary objects in an unreachable container, or just move them to `null`. I think these approaches are all equivalent.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Error running script: Collection was modified; enumeration operation may not execute.</p>\n</blockquote>\n<p>Basically, if you're using <code>foreach</code> to go over an objectlist and you destroy the object, the <code>foreach</code> complains that its list has changed.<br>\nCommands which allow all (for example \"take all\") use a list of objects in their script. So destroying an object within its 'take' or 'drop' scripts will give an error.</p>\n<p>It's probably not necessary to destroy every object unless you have large numbers of cloned objects. But if you want to, one method would be making a turnscript which removes all clones whose parent is <code>null</code>; or even making a list of names and having a turnscript that removes the listed objects.<br>\nMy usual approach (note: still not really necessary) is a turnscript like:</p>\n<pre><code>objects = FilterByAttribute (FilterByNotAttribute (AllObjects(), \"prototype\", null), \"parent\", null)\nwhile (ListCount (objects) &gt; 0) {\n  obj = ListItem (objects, 0)\n  if (not obj.prototype = obj) destroy (obj.name)\n  else list remove (objects, obj)\n}\n</code></pre>\n<blockquote>\n<p>Does this seem sound, or would it be better to use <code>move object</code> and pick a destination instead?</p>\n</blockquote>\n<p><code>RemoveObject (this)</code> is exactly the same as <code>MoveObject (this, null)</code> or <code>this.parent = null</code> (which is marginally more efficient, but less human-readable)</p>\n<p>There's no real advantage to using any particular method. I've seen games that put unnecessary objects in an unreachable container, or just move them to <code>null</code>. I think these approaches are all equivalent.</p>\n\n",
      "PostDate": "2020-12-22T16:48:36.1066955Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "98413c03-9fdd-4dc6-9373-2e6a70f581f1",
      "UserId": 512145,
      "Username": "Ghost of Moria",
      "AvatarUrl": "https://i.imgur.com/MUBkdVDb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome! Thanks again. I'm learning more every day about this system. You have been beyond helpful.",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome! Thanks again. I'm learning more every day about this system. You have been beyond helpful.</p>\n\n",
      "PostDate": "2020-12-22T17:29:58.095251Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
