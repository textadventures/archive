{
  "Topic": {
    "TopicId": "hrhvcwvfa0_tjk2fky5thw",
    "ForumId": "18",
    "Title": "Hitchhiker's Guide Gag in Quest",
    "LastUpdated": "2018-05-21T23:37:18.0177868Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "46731430-ab1b-44b7-933c-a393f3a60a78",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nFirst, I'd like to thank mrangel for helping me out when I couldn't figure out which parameter to check in this code!\r\n\r\n---\r\nIn the Hitchhiker's Guide to the Galaxy, a bad command is thrown back in the player's face towards the end of the game.\r\n\r\nTo do this in Quest, we can use an attribute to save an unrecognized command.  (I'll just set it up to keep track of the last unrecognized command, which should still be fresh on the player's mind.)\r\n\r\nAdd the attribute ```unresolvedcommandhandler``` to your game object.  Set it as a script.\r\n\r\nTo do that, add this to your start script:\r\n\r\n```\r\ngame.unresolvedcommandhandler => {\r\n  game.pov.lasterror = command\r\n  msg (Template(\"UnrecognisedCommand\"))\r\n}\r\n```\r\n\r\n---\r\n**UPDATE**\r\n\r\nThat will catch unrecognized commands, but not unrecognized objects.  Thanks to mrangel, we can catch those commands, too.  Add this to the start script, too:\r\n\r\n```\r\ngame.changedunresolvedcommandkey => {\r\n  if (not game.unresolvedcommandkey = null) {\r\n    game.pov.lasterror = game.pov.currentcommand\r\n  }\r\n}\r\ngame.pov.changedunresolvedcommandkey => {\r\n  if (not game.unresolvedcommandkey = null) {\r\n    game.pov.lasterror = game.pov.currentcommand\r\n  }\r\n}\r\n```\r\n\r\n---\r\nFrom there, you can do whatever you wish with ```game.pov.lasterror```.  \r\n\r\nIn this example, I will create a room called the Hall of Humility.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/40334483-b1b044d0-5d23-11e8-9835-7a5959f1238f.png)\r\n\r\n---\r\nI will create a turn script named \"humiliation_turnscript\" in this room, making sure to enable it.  In a real game*, if there is no last error (which is highly unlikely), the turn script will do nothing.\r\n\r\n*\\* This game only has 2 rooms.  You'll have to enter a bad command on purposes.*\r\n\r\nThis is my script in code view:\r\n```\r\nif (HasAttribute(game.pov, \"lasterror\") and not game.pov.lasterror = \"\") {\r\n  msg (\"<br/>The speaker begins to hum.  You hear some idiot saying, \\\"\"+game.pov.lasterror+\", \"+game.pov.lasterror+\", \"+game.pov.lasterror+\"...\\\"\")\r\n}\r\n```\r\n\r\n---\r\nHere it is in the GUI:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/40334648-95223cc8-5d24-11e8-826b-7985af745374.png)\r\n\r\n---\r\n<a href=\"https://user-images.githubusercontent.com/30656341/40334846-e4d7ab1c-5d25-11e8-9cc6-8f6bcd6265f8.gif\"><img loop src=\"https://user-images.githubusercontent.com/30656341/40334846-e4d7ab1c-5d25-11e8-9cc6-8f6bcd6265f8.gif\"/></a>\r\n\r\n---\r\nThe Example Game's Code:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6716.5372-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Hitchhiker's Gag\">\r\n    <gameid>90eed04e-7ed5-4e7d-ab7f-395f7286d9cc</gameid>\r\n    <version>2.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <attr name=\"autodescription_youarein_useprefix\" type=\"boolean\">false</attr>\r\n    <attr name=\"autodescription_youcansee\" type=\"int\">3</attr>\r\n    <attr name=\"autodescription_youcango\" type=\"int\">4</attr>\r\n    <attr name=\"autodescription_description\" type=\"int\">2</attr>\r\n    <unresolvedcommandhandler type=\"script\">\r\n      game.pov.lasterror = command\r\n      msg (Template(\"UnrecognisedCommand\"))\r\n    </unresolvedcommandhandler>\r\n    <start type=\"script\"><![CDATA[\r\n      game.changedunresolvedcommandkey => {\r\n        if (not game.unresolvedcommandkey = null) {\r\n          game.pov.lasterror = game.pov.currentcommand\r\n        }\r\n      }\r\n      game.pov.changedunresolvedcommandkey => {\r\n        if (not game.unresolvedcommandkey = null) {\r\n          game.pov.lasterror = game.pov.currentcommand\r\n        }\r\n      }\r\n    ]]></start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"north\" to=\"Hall of Humility\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"Hall of Humility\">\r\n    <inherit name=\"editor_room\" />\r\n    <description><![CDATA[A long, narrow hallway. There is a louvered, metal grille in the ceiling, which keeps adventurers like you from destroying the speaker behind it.<br/>]]></description>\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    <objectslistprefix>You can see</objectslistprefix>\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <object name=\"louvered metal grille\">\r\n      <inherit name=\"editor_object\" />\r\n      <look><![CDATA[A 2' by 2' grille, made of steel and painted white.  It looks a little worn for wear, as if someone had tried to run a train through it a few times, but still appears as sturdy as can be.<br/>]]></look>\r\n      <takemsg>You can't reach it.</takemsg>\r\n      <not_all />\r\n      <scenery />\r\n    </object>\r\n    <object name=\"speaker\">\r\n      <inherit name=\"editor_object\" />\r\n      <takemsg>{notfirst:You can't reach it.}{once:Even if you could reach it, you couldn't get past the grille.}</takemsg>\r\n      <not_all />\r\n      <scenery />\r\n      <look>A large speaker, strategically placed behind a metal grille.</look>\r\n    </object>\r\n    <turnscript name=\"humiliation_turnscript\">\r\n      <enabled />\r\n      <script><![CDATA[\r\n        if (HasAttribute(game.pov, \"lasterror\") and not game.pov.lasterror = \"\") {\r\n          msg (\"<br/>The speaker begins to hum.  You hear some idiot saying, \\\"\"+game.pov.lasterror+\", \"+game.pov.lasterror+\", \"+game.pov.lasterror+\"...\\\"\")\r\n        }\r\n      ]]></script>\r\n    </turnscript>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>First, I'd like to thank mrangel for helping me out when I couldn't figure out which parameter to check in this code!</p>\n<hr>\n<p>In the Hitchhiker's Guide to the Galaxy, a bad command is thrown back in the player's face towards the end of the game.</p>\n<p>To do this in Quest, we can use an attribute to save an unrecognized command.  (I'll just set it up to keep track of the last unrecognized command, which should still be fresh on the player's mind.)</p>\n<p>Add the attribute <code>unresolvedcommandhandler</code> to your game object.  Set it as a script.</p>\n<p>To do that, add this to your start script:</p>\n<pre><code>game.unresolvedcommandhandler =&gt; {\n  game.pov.lasterror = command\n  msg (Template(\"UnrecognisedCommand\"))\n}\n</code></pre>\n<hr>\n<p><strong>UPDATE</strong></p>\n<p>That will catch unrecognized commands, but not unrecognized objects.  Thanks to mrangel, we can catch those commands, too.  Add this to the start script, too:</p>\n<pre><code>game.changedunresolvedcommandkey =&gt; {\n  if (not game.unresolvedcommandkey = null) {\n    game.pov.lasterror = game.pov.currentcommand\n  }\n}\ngame.pov.changedunresolvedcommandkey =&gt; {\n  if (not game.unresolvedcommandkey = null) {\n    game.pov.lasterror = game.pov.currentcommand\n  }\n}\n</code></pre>\n<hr>\n<p>From there, you can do whatever you wish with <code>game.pov.lasterror</code>.</p>\n<p>In this example, I will create a room called the Hall of Humility.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/40334483-b1b044d0-5d23-11e8-9835-7a5959f1238f.png\" alt=\"image\"></p>\n<hr>\n<p>I will create a turn script named \"humiliation_turnscript\" in this room, making sure to enable it.  In a real game*, if there is no last error (which is highly unlikely), the turn script will do nothing.</p>\n<p><em>* This game only has 2 rooms.  You'll have to enter a bad command on purposes.</em></p>\n<p>This is my script in code view:</p>\n<pre><code>if (HasAttribute(game.pov, \"lasterror\") and not game.pov.lasterror = \"\") {\n  msg (\"&lt;br/&gt;The speaker begins to hum.  You hear some idiot saying, \\\"\"+game.pov.lasterror+\", \"+game.pov.lasterror+\", \"+game.pov.lasterror+\"...\\\"\")\n}\n</code></pre>\n<hr>\n<p>Here it is in the GUI:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/40334648-95223cc8-5d24-11e8-826b-7985af745374.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/40334846-e4d7ab1c-5d25-11e8-9cc6-8f6bcd6265f8.gif\"><img src=\"https://user-images.githubusercontent.com/30656341/40334846-e4d7ab1c-5d25-11e8-9cc6-8f6bcd6265f8.gif\"></a></p>\n<hr>\n<p>The Example Game's Code:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6716.5372--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Hitchhiker's Gag\"&gt;\n    &lt;gameid&gt;90eed04e-7ed5-4e7d-ab7f-395f7286d9cc&lt;/gameid&gt;\n    &lt;version&gt;2.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;attr name=\"autodescription_youarein_useprefix\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;attr name=\"autodescription_youcansee\" type=\"int\"&gt;3&lt;/attr&gt;\n    &lt;attr name=\"autodescription_youcango\" type=\"int\"&gt;4&lt;/attr&gt;\n    &lt;attr name=\"autodescription_description\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;unresolvedcommandhandler type=\"script\"&gt;\n      game.pov.lasterror = command\n      msg (Template(\"UnrecognisedCommand\"))\n    &lt;/unresolvedcommandhandler&gt;\n    &lt;start type=\"script\"&gt;&lt;![CDATA[\n      game.changedunresolvedcommandkey =&gt; {\n        if (not game.unresolvedcommandkey = null) {\n          game.pov.lasterror = game.pov.currentcommand\n        }\n      }\n      game.pov.changedunresolvedcommandkey =&gt; {\n        if (not game.unresolvedcommandkey = null) {\n          game.pov.lasterror = game.pov.currentcommand\n        }\n      }\n    ]]&gt;&lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"Hall of Humility\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"Hall of Humility\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description&gt;&lt;![CDATA[A long, narrow hallway. There is a louvered, metal grille in the ceiling, which keeps adventurers like you from destroying the speaker behind it.&lt;br/&gt;]]&gt;&lt;/description&gt;\n    &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;objectslistprefix&gt;You can see&lt;/objectslistprefix&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"louvered metal grille\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;&lt;![CDATA[A 2' by 2' grille, made of steel and painted white.  It looks a little worn for wear, as if someone had tried to run a train through it a few times, but still appears as sturdy as can be.&lt;br/&gt;]]&gt;&lt;/look&gt;\n      &lt;takemsg&gt;You can't reach it.&lt;/takemsg&gt;\n      &lt;not_all /&gt;\n      &lt;scenery /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"speaker\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;takemsg&gt;{notfirst:You can't reach it.}{once:Even if you could reach it, you couldn't get past the grille.}&lt;/takemsg&gt;\n      &lt;not_all /&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;A large speaker, strategically placed behind a metal grille.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;turnscript name=\"humiliation_turnscript\"&gt;\n      &lt;enabled /&gt;\n      &lt;script&gt;&lt;![CDATA[\n        if (HasAttribute(game.pov, \"lasterror\") and not game.pov.lasterror = \"\") {\n          msg (\"&lt;br/&gt;The speaker begins to hum.  You hear some idiot saying, \\\"\"+game.pov.lasterror+\", \"+game.pov.lasterror+\", \"+game.pov.lasterror+\"...\\\"\")\n        }\n      ]]&gt;&lt;/script&gt;\n    &lt;/turnscript&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-05-21T23:37:18.0177868Z",
      "LastEditDate": "2018-05-22T13:53:55.8653539Z",
      "link": null
    },
    {
      "PostId": "9434fc0c-677c-452d-8f63-0231e5e3cc90",
      "UserId": 341771,
      "Username": "JenniferCampbell",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8b9a63b5bbacc531368953df3a1709ec?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That is pretty damn neat. I mean, that's like cooler than a digital watch!  You guys are real hoopy froods for sure!",
      "EditableFormat": "markdown",
      "HTML": "<p>That is pretty damn neat. I mean, that's like cooler than a digital watch!  You guys are real hoopy froods for sure!</p>\n\n",
      "PostDate": "2018-05-22T11:45:24.4792626Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f2f9540-688c-4b3a-b679-eb42640e96df",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> *(NOTE: Unrecognized objects don't count!)*\r\n\r\nSounds like a challenge:\r\n\r\n```\r\n<turnscript name=\"error_trap\">\r\n  <enabled />\r\n  <script>\r\n    if (HasString (game.pov, \"unresolvedcommandkey\") or HasString (game, \"unresolvedcommandkey\")) {\r\n      game.pov.lasterror = game.pov.currentcommand\r\n    }\r\n  </script>\r\n</turnscript>\r\n```\r\n(unresolvedcommandkey is a variable name (\"object1\", \"object\", etc) which the parser failed to match to any object. It is cleared at the start of parsing a command, so in the case of commands separated with dots, this will only catch errors in the last command on a line. It's currently game.unresolvedcommandkey, but there's a comment saying \"TODO\" move it to game.pov. so I figured it's easier to check for both)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><em>(NOTE: Unrecognized objects don't count!)</em></p>\n</blockquote>\n<p>Sounds like a challenge:</p>\n<pre><code>&lt;turnscript name=\"error_trap\"&gt;\n  &lt;enabled /&gt;\n  &lt;script&gt;\n    if (HasString (game.pov, \"unresolvedcommandkey\") or HasString (game, \"unresolvedcommandkey\")) {\n      game.pov.lasterror = game.pov.currentcommand\n    }\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n</code></pre>\n<p>(unresolvedcommandkey is a variable name (\"object1\", \"object\", etc) which the parser failed to match to any object. It is cleared at the start of parsing a command, so in the case of commands separated with dots, this will only catch errors in the last command on a line. It's currently game.unresolvedcommandkey, but there's a comment saying \"TODO\" move it to game.pov. so I figured it's easier to check for both)</p>\n\n",
      "PostDate": "2018-05-22T13:13:27.9783573Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ba543492-ab3a-4ce6-b006-aed8e51dd4b3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...and mrangel shoots the three!\r\n\r\nHE'S ON FIRE!!!\r\n\r\n---\r\nThe turn script didn't work for some reason, but I got it working with a changed script.\r\n\r\nThe example has been revised.\r\n\r\nThanks, mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>...and mrangel shoots the three!</p>\n<p>HE'S ON FIRE!!!</p>\n<hr>\n<p>The turn script didn't work for some reason, but I got it working with a changed script.</p>\n<p>The example has been revised.</p>\n<p>Thanks, mrangel!</p>\n\n",
      "PostDate": "2018-05-22T13:16:19.536708Z",
      "LastEditDate": "2018-05-22T13:53:23.0192793Z",
      "link": null
    },
    {
      "PostId": "8aeec655-f2c1-4c8f-b97f-b2a1e0864a35",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, Jennifer!  Ya' zarkin' frood!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Jennifer!  Ya' zarkin' frood!</p>\n\n",
      "PostDate": "2018-05-22T13:45:53.446145Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a5d686e7-f7ff-4c30-860f-0e6d4d8c921c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks :)\r\n\r\nYou could also do it by overriding the (counter-intuitively named) function `UnresolvedCommand`; but that could cause a game to break if that command's behaviour changes in a future version of Quest. More stable to check the attributes that function sets.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks :)</p>\n<p>You could also do it by overriding the (counter-intuitively named) function <code>UnresolvedCommand</code>; but that could cause a game to break if that command's behaviour changes in a future version of Quest. More stable to check the attributes that function sets.</p>\n\n",
      "PostDate": "2018-05-22T14:00:43.6959097Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
