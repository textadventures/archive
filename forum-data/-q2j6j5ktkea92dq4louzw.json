{
  "Topic": {
    "TopicId": "-q2j6j5ktkea92dq4louzw",
    "ForumId": "10",
    "Title": "Not sure what parameter to put for the level up function",
    "LastUpdated": "2017-04-18T05:01:59.8384204Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3ae37c9b-0e3d-4860-88ae-f0c86fee9e12",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey. So I tried making both a level and a level up function, which I thought would be simple enough. But it needs, or they both need another parameter. I put \"self\" on both. Every time I try playing it in game, it says \"expected 1 parameter,\" or \"expected 2 parameters.\"\r\n\r\nhttp://i.imgur.com/S8WCfXM.png\r\nhttp://i.imgur.com/hkp4n5I.png",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey. So I tried making both a level and a level up function, which I thought would be simple enough. But it needs, or they both need another parameter. I put \"self\" on both. Every time I try playing it in game, it says \"expected 1 parameter,\" or \"expected 2 parameters.\"</p>\n<p>http://i.imgur.com/S8WCfXM.png<br>\nhttp://i.imgur.com/hkp4n5I.png</p>\n\n",
      "PostDate": "2017-04-18T05:01:59.8384204Z",
      "LastEditDate": null
    },
    {
      "PostId": "3d890ab9-2208-4d3b-a852-9b728a0f2e04",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You do not need any parameters here. Remove them from both functions and it should work.",
      "EditableFormat": "markdown",
      "HTML": "<p>You do not need any parameters here. Remove them from both functions and it should work.</p>\n\n",
      "PostDate": "2017-04-18T07:16:18.4697827Z",
      "LastEditDate": null
    },
    {
      "PostId": "4ddebcdb-f540-41a7-b8e5-f1634b81546c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "let's first get the concept of a programming Function understood, using math (algebra):\r\n\r\nFunction_1:\r\n\r\nFunction: y = x + 4\r\n\r\nParameter (local/temporary VARIABLE): x\r\n// this 'x' VARIABLE (and the value/input/argument it holds) only exists for Function 1. This 'x' variable for Function 1 can't be used in/for Function 2 directly\r\n\r\nArgument (input): 7\r\n// we need to give a value for our 'x' Parameter (local/temporary VARIABLE), which I chose '7' here for an example. The 'x' is a VARIABLE that will hold the given argument value/input, which is 7 in this case: x = 7\r\n\r\nReturn Type: integer // in quest: int\r\n\r\nReturn Expression: x + 4 // (x:7) + 4 = 11 // our 11 is an integer, which matches up with our specified Return Type: integer, so no error/confusion occurs\r\n\r\ny: a VARIABLE to hold the Function 1's returned integer value (11)\r\n// IMPORTANT: this 'y' actually is NOT part of Function_1 at all\r\n\r\nhere's how the Function looks, IN USE ('calling' a Function), as a programming Function, an example (using for the Object that holds its 'y' Attribute, the 'player' Player Object. This makes our 'y' VARIABLE, an Attribute VARIABLE, which is permanent/global in 'scope', it can be used anywhere, as it is attached-to/contained-within/held-by an Object, so long as of course that Object exists and/or still exists. Think of it like this: I am an Object and let's say I have the bubonic plague inside of me, that bubonic plague is an 'Attribute VARIABLE' of me, it exists so long as I exist, but when/if I die, then it dies too. Though, just like the bubonic plague, a global-'scope'/permanent Attribute VARIABLE or a local-'scope'/temporary Variable VARIABLE, can both be passed onto/into something else too):\r\n\r\nplayer.y = Function_1 (7)\r\n// Function's Parameter (local/temporary VARIABLE): x = 7\r\n// Function's scripting/expression: x + 4\r\n// Returned Value: 11 // (x:7) + 4 = 11\r\n// player.y = 11\r\n\r\nplayer.y = Function_1 (2)\r\n// Function's Parameter (local/temporary VARIABLE): x = 2\r\n// Function's scripting/expression: x + 4\r\n// Returned Value: 6 // (x:2) + 4 = 6\r\n// player.y = 6\r\n\r\nplayer.y = Function_1 (99)\r\n// Function's Parameter (local/temporary VARIABLE): x = 99\r\n// Function's scripting/expression: x + 4\r\n// Returned Value: 103 // (x:99) + 4 = 103\r\n// player.y = 103\r\n\r\n---------\r\n\r\nFunction_2:\r\n\r\nFunction: z = x * 2\r\n\r\nParameter: x\r\n\r\nReturn Type: integer\r\n\r\nReturn Type's Scripting/expression: x * 2\r\n\r\nArgument: 3\r\n\r\nplayer.z = Function_2 (3)\r\n// x = 3\r\n// x * 2\r\n// 6 // (x:3) * 2 = 6\r\n// player.z = 6\r\n\r\nplayer.z = Function_2 (6)\r\n// x = 6\r\n// x * 2\r\n// 12 // (x:6) * 2 = 12\r\n// player.z = 12\r\n\r\nplayer.z = Function_2 (100)\r\n// x = 100\r\n// x * 2\r\n// 200 // (x:100) * 2 = 200\r\n// player.z = 200\r\n\r\n-------\r\n\r\nthe 'x' Parameter from/of Function_1 has nothing to do with Function_2\r\nthe 'x' Parameter from/of Function_2 has nothing to do with Function_1\r\n\r\nnotice how I had to use a different Attribute VARIABLE from: 'y, 'player.y', for Function_2: z, player.z\r\n\r\nI did this so that I'm storing the returned value of Function_1 into: player.y, and I'm storing the returned value of Function_2 into: player.z\r\n\r\nIf I used 'player.y' for Function_2, an example:\r\n\r\nplayer.y = Function_1 (7)\r\n// Function_1: (x:7) + 4 = 11\r\n// player.y = 11\r\nplayer.y = Function_2 (3)\r\n// Function_2: (x:3) * 2 = 6\r\n// player.y = 6\r\n\r\nyou can see that I've lost my '11' value, as it is replaced by the '6', as I can use our 'player.y' Attribute VARIABLE for both Functions (it's not limited to just the Function_1 like our 'x' Parameter/Variable-VARIABLE is for Function_1, and our 'x' Parameter/Variable-VARIABLE for Function_2), because Attribute VARIABLES are global in scope, they can be used anywhere and as much as you want, but this means that their old values get replaced by new values\r\n\r\nso, if I wanted to preserve that '11' value from Function_1, I used one Attribute for it: player.y, and another Attribute, player.z, to preserve the '6' value from Function_2\r\n\r\nI can then do this:\r\n\r\nplayer.m = player.y + player.z\r\n\r\nand get:\r\n\r\n// player.m = (player.y:11) + (player.z:6) = 11 + 6 = 17\r\nplayer.m = 17\r\n\r\nI now have '17' stored in my 3rd Attribute: player.m\r\n\r\n-----------\r\n\r\nwith all that said, in programming, you do NOT have to have Parameters/Arguments and/or nor Return Types, they're both separately optional.\r\n\r\nBut if you do have Parameters (however many/quantity of them you want) in your Function definition, then you must have matching (same quantity of) Arguments (inputs for your Parameters) in your function's use (\"call, calling a function\"), or you'll get an error.\r\n\r\nFunction Definition (creation: \"defining\" its setup for what it: is, needs, and does) using my example functions above:\r\n\r\n```\r\n<function name=\"Function_1\" parameters=\"x\" type=\"int\">\r\n  return (x + 4)\r\n</function>\r\n\r\n<function name=\"Function_2\" parameters=\"x\" type=\"int\">\r\n  return (x * 2)\r\n</function>\r\n```\r\n\r\nand then using ('calling') a function, examples:\r\n\r\nplayer.y = Function_1 (7)\r\n// player.y = (7+4) = 11\r\n\r\nplayer.z = Function_2 (3)\r\n// player.z = (3*2) = 6\r\n\r\nplayer.k = Function_1 (9) + Function_2 (6)\r\n// player.k = (9+4) + (6 *2) = 13 + 12 = 25\r\n\r\n-----\r\n\r\nif your Function returns a value, you need to specify its Return Type (int, string, boolean, etc), and have your value's Type matchup with that specified Return Type: if you specify the Return Type as an 'int', quest/computer expects that returned value to be an 'int', and not as another type such as a 'string', for example:\r\n\r\n```\r\n<function name=\"Function_3\" parameters=\"x\" type=\"int\">\r\n  return (x + 8)\r\n</function>\r\n\r\n// player.w = Function_3 (\"hi\") ---> ERROR! As \"hi\" is a string value, which is used for the return value, but we've said the return value is suppose to an 'int' to quest/computer, so it'll return an ERROR to you\r\n\r\n// --------------------\r\n\r\nbut, we can make this work for a string value (instead of an int) like this:\r\n\r\n<function name=\"Function_3\" parameters=\"x\" type=\"string\">\r\n  return (x + \"8\")\r\n</function>\r\n\r\n// player.w = Function_3 (\"hi\")\r\n// player.w = \"hi8\"\r\n\r\n// string + string is calld \"concatenation\" which means literally putting next to each other: \"hi\" and \"8\" (this \"8\" is a string value as double quotes tell quest that it's a string type, and thus making it not an amount~number:int/double type value) are put next to each other, making: \"hi8\"\r\n\r\nhere's examples:\r\n\r\nmath:\r\n\r\n7 + 7 = 14\r\n55 + 55 = 110\r\n\"hi\" + \"hi\" = ERROR!\r\n\"hi\" + 7 = ERROR!\r\n7 + \"hi\" = ERRO!\r\n\r\nconcatenation:\r\n\r\n\"7\" + \"7\" = \"77\"\r\n\"55\" + \"55\" = \"5555\"\r\n\"hi\" + \"7\" = \"hi7\"\r\n\"7\" + \"hi\" = \"7hi\" or an ERROR (if it's used as a 'name', that's a \"no no\", as names can't start with a number), depends on how the programming is designed...\r\n7 + 7 = ERROR!\r\n\"7\" + 7 = ERROR!\r\n```\r\n\r\nanyways... back to a Function with a Return Type:\r\n\r\nalso, a returned value must be used/applied to something, you can't just have a Function with a Return Type by itself, as you then got a hanging value, that's not being used for anything\r\n\r\nfor example:\r\n\r\n```\r\n<function name=\"Function_4\" parameters=\"x\" type=\"int\">\r\n  return (x) // the most pointless/stupid function of all time, lol\r\n</function>\r\n\r\nFunction_4 (2) ---> ERROR!\r\n\r\nplayer.p = Function_4 (2) ----> NO error\r\n\r\nmsg (\"your returned value is: \" + Function_4)\r\n// the 'msg' Script/Function is a built-in Function\r\n\r\nplayer.g_as_a_string = ToString (Function_4 (2))\r\n// the 'ToString' Script/Function is a built-in Function\r\n```\r\n\r\n----------\r\n\r\nhere's examples of a Function with no Parameters/Arguments nor Return Type:\r\n\r\n```\r\n<function name=\"Function_50\">\r\n  msg (\"hi\")\r\n</function>\r\n\r\n<function name=\"Function_51\">\r\n  player.y = 20 // remember, Attribute VARIABLES (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE) are global, they can be used anywhere, and their stored values are preserved (so long as the Object, in this case the 'player' Player Object, exists and/or still exists)\r\n</function>\r\n```\r\n\r\n---------\r\n\r\nexample of a Function with a Return Type, but no Parameters/Arguments:\r\n\r\n```\r\n<function name=\"Function_70\" type=\"int\">\r\n  return (100)\r\n</function>\r\n\r\nplayer.y = Function_70 () // <--- in quest, the parenthesis may not be needed (when there's no Parameters/Arguments: when not using Parameters/Arguments), but many programming languages do require the parenthesis, even if no Arguments/Parameters, as the prenethesis is what tells the programming language/computer that it's a Function\r\n// player.y = 100\r\n```\r\n\r\n--------\r\n\r\nexamples of a Function with Arguments/Parameters, but no return type:\r\n\r\n```\r\n<function name=\"function_90\" parameters=\"string_1, string_2, string_3\">\r\n  msg (string_1 + \" \" + string_2 + \" \" + string_3)\r\n</function>\r\n\r\n<function name=\"function_90\" parameters=\"string_1, string_2, string_3\">\r\n  player.my_string = string_1 + \" \" + string_2 + \" \" + string_3\r\n</function>\r\n```\r\n\r\n-----------\r\n\r\nlastly, transfering (passing) and thus indirectly using Parameters (local/temporary VARIABLES) from one Function to another Function, exmaples:\r\n\r\n```\r\n<function name=\"Funtion_100\" parameters=\"x\">\r\n  Function_101 (x)\r\n</function>\r\n\r\n<function name=\"Function_101\" parameters=\"y\">\r\n  msg (y)\r\n</function>\r\n\r\nFunction_100 (\"hi\")\r\n// result: hi\r\n// what/how this result occurred:\r\n// Function_100: x = \"hi\"\r\n// Function_101: y = x // x = \"hi\" // y = x = \"hi\" ---> y = \"hi\" ---> msg (y) // msg (\"hi\") ---> result (output/displayment): hi\r\n\r\nyou can use different names for Parameters or the same (sometimes it's better to use different names and sometimes it's better to use the same names, it depends on what you're doing), it doesn't matter, only the position of the Parameters/Arguments matter, for example, this does the exact same thing as above:\r\n\r\n<function name=\"Funtion_100\" parameters=\"x\">\r\n  Function_101 (x)\r\n</function>\r\n\r\n<function name=\"Function_101\" parameters=\"x\">\r\n  msg (x)\r\n</function>\r\n\r\nFunction_100 (\"hi\")\r\n// result: hi\r\n// what/how this result occurred:\r\n// Function_100: x (of Function_1) = \"hi\"\r\n// Function_101: y = x (of Function_2) // x (of Function_1) = \"hi\" // x (of Function_2) = x (of Function_1) = \"hi\" ---> x (of Function_2) = \"hi\" ---> msg ( x {of Function 2} ) // msg (\"hi\") ---> result (output/displayment): hi\r\n\r\nthis is because Parameters are local/temporary Variable VARIABLES, the 'x' Parameter of Function_1 has no bearing on the 'x' Parameter of Function_2, but we're storing the value held by Function_1's 'x' into the 'x' of Function_2, so in this way we're indirectly using the 'x' Parameter of Function_1 outside of Function_1, but not directly/technically so, as we're storing it into Function_2's 'x' Parameter for its use in Function_2, the 'x' Parameter of Function_1 is not as it can not be used outside of Function_1, but we can store it's value into Parameters of other Functions, and thus we're \"transfering\" one Function's Parameters' values to another Function's Parameters\r\n\r\n// -------------\r\n\r\nwhereas...\r\n\r\nyou can NOT do this (as we're trying to use a Parameter directly from one Function into another Function, which we can NOT do, as Parameters are 'local/temporary', they only exist within their Function, as that's the limit of their 'scope', their 'scope' is local, which is to the Function that holds/has that Parameter):\r\n\r\n<function name=\"Funtion_100\" parameters=\"x\">\r\n  Function_101\r\n</function>\r\n\r\n<function name=\"Function_101\">\r\n  msg (x)\r\n</function>\r\n\r\nFunction_101 (\"hi\")\r\n// ERROR! the 'x' Parameter in Function_2 was never given a value, hence the ERROR!\r\n\r\nthe 'x=100' for Function_100 only exists in Function_100, that's why the 'x' in Function_2 doesn't have a value. The 'x' in Function_2 is a separate VARIABLE from the 'x' in Function_1.\r\n\r\nwhereas, with Attributes, its a single VARIABLE, as it's global in scope, which is why you can use it anywhere, it's not one Attribute used in one place and a different Attribute used in another place. That Attribute (IDENTIFIED by its name) is that Attribute, just as my DNA identifies me as me and only me, and your DNA identifies you as you and only you.\r\n\r\nthis is NOT the case with Variable VARIABLES (such as Parameters), in terms of outside of their scope. I can have an 'x' Parameter in one Function and also an 'x' Parameter in another Function, as these are two different 'x' Parameters (due to scope: outside of their scope). But, I can NOT have two (different) 'x' Parameters in the same Function (due to scope: inside of their scope).\r\n\r\nan Attribute VARIABLE's scope is global, the entire game code, that is why I can only have one and only one, for example, 'player.x' Attribute, I can't have another 'player.x' Attribute. I can have 'player.x' Attribute and 'game.x' Attribute, as while the Attribute name is the same (x), they belong to different Objects: 'player' vs 'game', which makes them different Attributes, as an Attribute is: NAME_OF_OBJECT.NAME_OF_ATTRIBUTE\r\n\r\nfor example in the real world:\r\n\r\nlet's take 'water' and 'sand'\r\n\r\nan 'attribute' of water is that it is 'wet'\r\nan 'attribute' of sand is that it is 'dry'\r\n\r\nwater.wet is a unique attribute of water\r\nsand.dry is a unique attribute of sand\r\n\r\nwell, we know that sand can become wet too:\r\n\r\nsand.wet\r\n\r\nbut this is perfectly okay: wet water and wet sand, can most certainly exist at the same time, we're not getting into quantum mechanics, these are two different attributes, even though they're both the same 'wet' attribute. This is because that's what an attribute is, it's an \"adjective/adverb' of some noun, an attribute is describing something, an attribute is a property/characteristic/trait of something, that's why you can have joe with the 'freckles' attribute and sarah with the 'freckles' attribute.\r\n\r\na Variable (Variable VARIABLE, such as a Parameter) however is not describing something, it's just a variable holding a value, so you can only have one 'wet' Variable.\r\n\r\n```\r\n\r\n----------------\r\n\r\nand that's it for now... see if this makes sense and helps you understand what you're doing in the GUI/Editor, and if not, let me know, and I'll help you more specifically with how to do Functions in the GUI/Editor",
      "EditableFormat": "markdown",
      "HTML": "<p>let's first get the concept of a programming Function understood, using math (algebra):</p>\n<p>Function_1:</p>\n<p>Function: y = x + 4</p>\n<p>Parameter (local/temporary VARIABLE): x<br>\n// this 'x' VARIABLE (and the value/input/argument it holds) only exists for Function 1. This 'x' variable for Function 1 can't be used in/for Function 2 directly</p>\n<p>Argument (input): 7<br>\n// we need to give a value for our 'x' Parameter (local/temporary VARIABLE), which I chose '7' here for an example. The 'x' is a VARIABLE that will hold the given argument value/input, which is 7 in this case: x = 7</p>\n<p>Return Type: integer // in quest: int</p>\n<p>Return Expression: x + 4 // (x:7) + 4 = 11 // our 11 is an integer, which matches up with our specified Return Type: integer, so no error/confusion occurs</p>\n<p>y: a VARIABLE to hold the Function 1's returned integer value (11)<br>\n// IMPORTANT: this 'y' actually is NOT part of Function_1 at all</p>\n<p>here's how the Function looks, IN USE ('calling' a Function), as a programming Function, an example (using for the Object that holds its 'y' Attribute, the 'player' Player Object. This makes our 'y' VARIABLE, an Attribute VARIABLE, which is permanent/global in 'scope', it can be used anywhere, as it is attached-to/contained-within/held-by an Object, so long as of course that Object exists and/or still exists. Think of it like this: I am an Object and let's say I have the bubonic plague inside of me, that bubonic plague is an 'Attribute VARIABLE' of me, it exists so long as I exist, but when/if I die, then it dies too. Though, just like the bubonic plague, a global-'scope'/permanent Attribute VARIABLE or a local-'scope'/temporary Variable VARIABLE, can both be passed onto/into something else too):</p>\n<p>player.y = Function_1 (7)<br>\n// Function's Parameter (local/temporary VARIABLE): x = 7<br>\n// Function's scripting/expression: x + 4<br>\n// Returned Value: 11 // (x:7) + 4 = 11<br>\n// player.y = 11</p>\n<p>player.y = Function_1 (2)<br>\n// Function's Parameter (local/temporary VARIABLE): x = 2<br>\n// Function's scripting/expression: x + 4<br>\n// Returned Value: 6 // (x:2) + 4 = 6<br>\n// player.y = 6</p>\n<p>player.y = Function_1 (99)<br>\n// Function's Parameter (local/temporary VARIABLE): x = 99<br>\n// Function's scripting/expression: x + 4<br>\n// Returned Value: 103 // (x:99) + 4 = 103<br>\n// player.y = 103</p>\n<hr>\n<p>Function_2:</p>\n<p>Function: z = x * 2</p>\n<p>Parameter: x</p>\n<p>Return Type: integer</p>\n<p>Return Type's Scripting/expression: x * 2</p>\n<p>Argument: 3</p>\n<p>player.z = Function_2 (3)<br>\n// x = 3<br>\n// x * 2<br>\n// 6 // (x:3) * 2 = 6<br>\n// player.z = 6</p>\n<p>player.z = Function_2 (6)<br>\n// x = 6<br>\n// x * 2<br>\n// 12 // (x:6) * 2 = 12<br>\n// player.z = 12</p>\n<p>player.z = Function_2 (100)<br>\n// x = 100<br>\n// x * 2<br>\n// 200 // (x:100) * 2 = 200<br>\n// player.z = 200</p>\n<hr>\n<p>the 'x' Parameter from/of Function_1 has nothing to do with Function_2<br>\nthe 'x' Parameter from/of Function_2 has nothing to do with Function_1</p>\n<p>notice how I had to use a different Attribute VARIABLE from: 'y, 'player.y', for Function_2: z, player.z</p>\n<p>I did this so that I'm storing the returned value of Function_1 into: player.y, and I'm storing the returned value of Function_2 into: player.z</p>\n<p>If I used 'player.y' for Function_2, an example:</p>\n<p>player.y = Function_1 (7)<br>\n// Function_1: (x:7) + 4 = 11<br>\n// player.y = 11<br>\nplayer.y = Function_2 (3)<br>\n// Function_2: (x:3) * 2 = 6<br>\n// player.y = 6</p>\n<p>you can see that I've lost my '11' value, as it is replaced by the '6', as I can use our 'player.y' Attribute VARIABLE for both Functions (it's not limited to just the Function_1 like our 'x' Parameter/Variable-VARIABLE is for Function_1, and our 'x' Parameter/Variable-VARIABLE for Function_2), because Attribute VARIABLES are global in scope, they can be used anywhere and as much as you want, but this means that their old values get replaced by new values</p>\n<p>so, if I wanted to preserve that '11' value from Function_1, I used one Attribute for it: player.y, and another Attribute, player.z, to preserve the '6' value from Function_2</p>\n<p>I can then do this:</p>\n<p>player.m = player.y + player.z</p>\n<p>and get:</p>\n<p>// player.m = (player.y:11) + (player.z:6) = 11 + 6 = 17<br>\nplayer.m = 17</p>\n<p>I now have '17' stored in my 3rd Attribute: player.m</p>\n<hr>\n<p>with all that said, in programming, you do NOT have to have Parameters/Arguments and/or nor Return Types, they're both separately optional.</p>\n<p>But if you do have Parameters (however many/quantity of them you want) in your Function definition, then you must have matching (same quantity of) Arguments (inputs for your Parameters) in your function's use (\"call, calling a function\"), or you'll get an error.</p>\n<p>Function Definition (creation: \"defining\" its setup for what it: is, needs, and does) using my example functions above:</p>\n<pre><code>&lt;function name=\"Function_1\" parameters=\"x\" type=\"int\"&gt;\n  return (x + 4)\n&lt;/function&gt;\n\n&lt;function name=\"Function_2\" parameters=\"x\" type=\"int\"&gt;\n  return (x * 2)\n&lt;/function&gt;\n</code></pre>\n<p>and then using ('calling') a function, examples:</p>\n<p>player.y = Function_1 (7)<br>\n// player.y = (7+4) = 11</p>\n<p>player.z = Function_2 (3)<br>\n// player.z = (3*2) = 6</p>\n<p>player.k = Function_1 (9) + Function_2 (6)<br>\n// player.k = (9+4) + (6 *2) = 13 + 12 = 25</p>\n<hr>\n<p>if your Function returns a value, you need to specify its Return Type (int, string, boolean, etc), and have your value's Type matchup with that specified Return Type: if you specify the Return Type as an 'int', quest/computer expects that returned value to be an 'int', and not as another type such as a 'string', for example:</p>\n<pre><code>&lt;function name=\"Function_3\" parameters=\"x\" type=\"int\"&gt;\n  return (x + 8)\n&lt;/function&gt;\n\n// player.w = Function_3 (\"hi\") ---&gt; ERROR! As \"hi\" is a string value, which is used for the return value, but we've said the return value is suppose to an 'int' to quest/computer, so it'll return an ERROR to you\n\n// --------------------\n\nbut, we can make this work for a string value (instead of an int) like this:\n\n&lt;function name=\"Function_3\" parameters=\"x\" type=\"string\"&gt;\n  return (x + \"8\")\n&lt;/function&gt;\n\n// player.w = Function_3 (\"hi\")\n// player.w = \"hi8\"\n\n// string + string is calld \"concatenation\" which means literally putting next to each other: \"hi\" and \"8\" (this \"8\" is a string value as double quotes tell quest that it's a string type, and thus making it not an amount~number:int/double type value) are put next to each other, making: \"hi8\"\n\nhere's examples:\n\nmath:\n\n7 + 7 = 14\n55 + 55 = 110\n\"hi\" + \"hi\" = ERROR!\n\"hi\" + 7 = ERROR!\n7 + \"hi\" = ERRO!\n\nconcatenation:\n\n\"7\" + \"7\" = \"77\"\n\"55\" + \"55\" = \"5555\"\n\"hi\" + \"7\" = \"hi7\"\n\"7\" + \"hi\" = \"7hi\" or an ERROR (if it's used as a 'name', that's a \"no no\", as names can't start with a number), depends on how the programming is designed...\n7 + 7 = ERROR!\n\"7\" + 7 = ERROR!\n</code></pre>\n<p>anyways... back to a Function with a Return Type:</p>\n<p>also, a returned value must be used/applied to something, you can't just have a Function with a Return Type by itself, as you then got a hanging value, that's not being used for anything</p>\n<p>for example:</p>\n<pre><code>&lt;function name=\"Function_4\" parameters=\"x\" type=\"int\"&gt;\n  return (x) // the most pointless/stupid function of all time, lol\n&lt;/function&gt;\n\nFunction_4 (2) ---&gt; ERROR!\n\nplayer.p = Function_4 (2) ----&gt; NO error\n\nmsg (\"your returned value is: \" + Function_4)\n// the 'msg' Script/Function is a built-in Function\n\nplayer.g_as_a_string = ToString (Function_4 (2))\n// the 'ToString' Script/Function is a built-in Function\n</code></pre>\n<hr>\n<p>here's examples of a Function with no Parameters/Arguments nor Return Type:</p>\n<pre><code>&lt;function name=\"Function_50\"&gt;\n  msg (\"hi\")\n&lt;/function&gt;\n\n&lt;function name=\"Function_51\"&gt;\n  player.y = 20 // remember, Attribute VARIABLES (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE) are global, they can be used anywhere, and their stored values are preserved (so long as the Object, in this case the 'player' Player Object, exists and/or still exists)\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>example of a Function with a Return Type, but no Parameters/Arguments:</p>\n<pre><code>&lt;function name=\"Function_70\" type=\"int\"&gt;\n  return (100)\n&lt;/function&gt;\n\nplayer.y = Function_70 () // &lt;--- in quest, the parenthesis may not be needed (when there's no Parameters/Arguments: when not using Parameters/Arguments), but many programming languages do require the parenthesis, even if no Arguments/Parameters, as the prenethesis is what tells the programming language/computer that it's a Function\n// player.y = 100\n</code></pre>\n<hr>\n<p>examples of a Function with Arguments/Parameters, but no return type:</p>\n<pre><code>&lt;function name=\"function_90\" parameters=\"string_1, string_2, string_3\"&gt;\n  msg (string_1 + \" \" + string_2 + \" \" + string_3)\n&lt;/function&gt;\n\n&lt;function name=\"function_90\" parameters=\"string_1, string_2, string_3\"&gt;\n  player.my_string = string_1 + \" \" + string_2 + \" \" + string_3\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>lastly, transfering (passing) and thus indirectly using Parameters (local/temporary VARIABLES) from one Function to another Function, exmaples:</p>\n<pre><code>&lt;function name=\"Funtion_100\" parameters=\"x\"&gt;\n  Function_101 (x)\n&lt;/function&gt;\n\n&lt;function name=\"Function_101\" parameters=\"y\"&gt;\n  msg (y)\n&lt;/function&gt;\n\nFunction_100 (\"hi\")\n// result: hi\n// what/how this result occurred:\n// Function_100: x = \"hi\"\n// Function_101: y = x // x = \"hi\" // y = x = \"hi\" ---&gt; y = \"hi\" ---&gt; msg (y) // msg (\"hi\") ---&gt; result (output/displayment): hi\n\nyou can use different names for Parameters or the same (sometimes it's better to use different names and sometimes it's better to use the same names, it depends on what you're doing), it doesn't matter, only the position of the Parameters/Arguments matter, for example, this does the exact same thing as above:\n\n&lt;function name=\"Funtion_100\" parameters=\"x\"&gt;\n  Function_101 (x)\n&lt;/function&gt;\n\n&lt;function name=\"Function_101\" parameters=\"x\"&gt;\n  msg (x)\n&lt;/function&gt;\n\nFunction_100 (\"hi\")\n// result: hi\n// what/how this result occurred:\n// Function_100: x (of Function_1) = \"hi\"\n// Function_101: y = x (of Function_2) // x (of Function_1) = \"hi\" // x (of Function_2) = x (of Function_1) = \"hi\" ---&gt; x (of Function_2) = \"hi\" ---&gt; msg ( x {of Function 2} ) // msg (\"hi\") ---&gt; result (output/displayment): hi\n\nthis is because Parameters are local/temporary Variable VARIABLES, the 'x' Parameter of Function_1 has no bearing on the 'x' Parameter of Function_2, but we're storing the value held by Function_1's 'x' into the 'x' of Function_2, so in this way we're indirectly using the 'x' Parameter of Function_1 outside of Function_1, but not directly/technically so, as we're storing it into Function_2's 'x' Parameter for its use in Function_2, the 'x' Parameter of Function_1 is not as it can not be used outside of Function_1, but we can store it's value into Parameters of other Functions, and thus we're \"transfering\" one Function's Parameters' values to another Function's Parameters\n\n// -------------\n\nwhereas...\n\nyou can NOT do this (as we're trying to use a Parameter directly from one Function into another Function, which we can NOT do, as Parameters are 'local/temporary', they only exist within their Function, as that's the limit of their 'scope', their 'scope' is local, which is to the Function that holds/has that Parameter):\n\n&lt;function name=\"Funtion_100\" parameters=\"x\"&gt;\n  Function_101\n&lt;/function&gt;\n\n&lt;function name=\"Function_101\"&gt;\n  msg (x)\n&lt;/function&gt;\n\nFunction_101 (\"hi\")\n// ERROR! the 'x' Parameter in Function_2 was never given a value, hence the ERROR!\n\nthe 'x=100' for Function_100 only exists in Function_100, that's why the 'x' in Function_2 doesn't have a value. The 'x' in Function_2 is a separate VARIABLE from the 'x' in Function_1.\n\nwhereas, with Attributes, its a single VARIABLE, as it's global in scope, which is why you can use it anywhere, it's not one Attribute used in one place and a different Attribute used in another place. That Attribute (IDENTIFIED by its name) is that Attribute, just as my DNA identifies me as me and only me, and your DNA identifies you as you and only you.\n\nthis is NOT the case with Variable VARIABLES (such as Parameters), in terms of outside of their scope. I can have an 'x' Parameter in one Function and also an 'x' Parameter in another Function, as these are two different 'x' Parameters (due to scope: outside of their scope). But, I can NOT have two (different) 'x' Parameters in the same Function (due to scope: inside of their scope).\n\nan Attribute VARIABLE's scope is global, the entire game code, that is why I can only have one and only one, for example, 'player.x' Attribute, I can't have another 'player.x' Attribute. I can have 'player.x' Attribute and 'game.x' Attribute, as while the Attribute name is the same (x), they belong to different Objects: 'player' vs 'game', which makes them different Attributes, as an Attribute is: NAME_OF_OBJECT.NAME_OF_ATTRIBUTE\n\nfor example in the real world:\n\nlet's take 'water' and 'sand'\n\nan 'attribute' of water is that it is 'wet'\nan 'attribute' of sand is that it is 'dry'\n\nwater.wet is a unique attribute of water\nsand.dry is a unique attribute of sand\n\nwell, we know that sand can become wet too:\n\nsand.wet\n\nbut this is perfectly okay: wet water and wet sand, can most certainly exist at the same time, we're not getting into quantum mechanics, these are two different attributes, even though they're both the same 'wet' attribute. This is because that's what an attribute is, it's an \"adjective/adverb' of some noun, an attribute is describing something, an attribute is a property/characteristic/trait of something, that's why you can have joe with the 'freckles' attribute and sarah with the 'freckles' attribute.\n\na Variable (Variable VARIABLE, such as a Parameter) however is not describing something, it's just a variable holding a value, so you can only have one 'wet' Variable.\n\n</code></pre>\n<hr>\n<p>and that's it for now... see if this makes sense and helps you understand what you're doing in the GUI/Editor, and if not, let me know, and I'll help you more specifically with how to do Functions in the GUI/Editor</p>\n\n",
      "PostDate": "2017-04-18T07:19:50.5369899Z",
      "LastEditDate": "2017-04-18T08:10:30.0143689Z"
    },
    {
      "PostId": "e603f6ce-9901-447a-8072-94144a79981f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oh, forgot one thing:\r\n\r\nan Argument can either be a \"literal\" (direct value) or a VARIABLE (a Variable VARIABLE or an Attribute VARIABLE):\r\n\r\nFunction_200 (4) // literal/direct value\r\n// or:\r\nv = 4\r\nFunction_200 (v) // a Variable VARIABLE\r\n// or:\r\nplayer.v = 4\r\nFunction_200 (player.v) // an Attribute VARIABLE",
      "EditableFormat": "markdown",
      "HTML": "<p>oh, forgot one thing:</p>\n<p>an Argument can either be a \"literal\" (direct value) or a VARIABLE (a Variable VARIABLE or an Attribute VARIABLE):</p>\n<p>Function_200 (4) // literal/direct value<br>\n// or:<br>\nv = 4<br>\nFunction_200 (v) // a Variable VARIABLE<br>\n// or:<br>\nplayer.v = 4<br>\nFunction_200 (player.v) // an Attribute VARIABLE</p>\n\n",
      "PostDate": "2017-04-18T08:15:55.5762445Z",
      "LastEditDate": null
    },
    {
      "PostId": "c27f3bfc-c776-4da0-aed0-b600b151c2f2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nif you want a 'level up' system/code/functionality (as in you choose what stats/etc to raise at a level up), you can use Pixie's 'level lib' or whatever it's current form is in his 'combat library version=?'. This is really complicated stuff with concatenation of Commands... not easy to do and especially figure out on your own (unless you're already a good programmer, lol). Took me forever to just understand it, laughs.\r\n\r\nand if you're interested, here's leveling function that I like:\r\n\r\n```\r\n<function name=\"leveling_function\">\r\n  <![CDATA[\r\n    if (player.experience >= player.level * 100 + 100) {\r\n      player.experience = player.experience - (player.level * 100 + 100)\r\n      player.level = player.level + 1\r\n      leveling_function\r\n    }\r\n  ]]>\r\n</function>\r\n```\r\n\r\nstarting/initial level of player: 0 // or 1 (but you'd need to jump over the line below, obviously)\r\nexp needed for levelup: (player.level:1) * 100 + 100 = 0 + 100 = 100\r\n(take away 100 experience from the player's current experience, as that was used to level up)\r\nplayer level: 1\r\nexp needed for levelup: (player.level:1) * 100 + 100 = 100 + 100 = 200\r\n(take away 200 experience from the player's current experience, as that was used to level up)\r\nplayer level: 2\r\nexp needed for levelup: (player.level:2) * 100 + 100 = 200 + 100 = 300\r\n(take away 300 experience from the player's current experience, as that was used to level up)\r\nplayer level: 3\r\netc etc etc etc\r\n\r\nso, here's some examples, using starting at level 0 to make it easiest to understand:\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 100 exp)\r\nplayer.level = 1\r\nplayer.experience = 0 // need 200 for lvlup, need full 200 more exp\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 200 exp)\r\nplayer.level = 1\r\nplayer.experience = 100 // need 200 for levelup, only need 100 more exp\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 300 exp)\r\nplayer.level = 2\r\nplayer.experience = 0 // need 300 for level up, need full 300 more exp\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 400 exp)\r\nplayer.level = 2\r\nplayer.experience = 100 // need 300 for level up, need only 200 more exp\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 500 exp)\r\nplayer.level = 2\r\nplayer.experience = 200 // need 300 for level up, need only 100 more exp\r\n\r\nplayer.level = 0\r\nplayer.experience = 0\r\n(you kill a monster and get 600 exp)\r\nplayer.level = 3\r\nplayer.experience = 0 // need 400 for level up, need full 400 more exp\r\n\r\netc etc etc",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>if you want a 'level up' system/code/functionality (as in you choose what stats/etc to raise at a level up), you can use Pixie's 'level lib' or whatever it's current form is in his 'combat library version=?'. This is really complicated stuff with concatenation of Commands... not easy to do and especially figure out on your own (unless you're already a good programmer, lol). Took me forever to just understand it, laughs.</p>\n<p>and if you're interested, here's leveling function that I like:</p>\n<pre><code>&lt;function name=\"leveling_function\"&gt;\n  &lt;![CDATA[\n    if (player.experience &gt;= player.level * 100 + 100) {\n      player.experience = player.experience - (player.level * 100 + 100)\n      player.level = player.level + 1\n      leveling_function\n    }\n  ]]&gt;\n&lt;/function&gt;\n</code></pre>\n<p>starting/initial level of player: 0 // or 1 (but you'd need to jump over the line below, obviously)<br>\nexp needed for levelup: (player.level:1) * 100 + 100 = 0 + 100 = 100<br>\n(take away 100 experience from the player's current experience, as that was used to level up)<br>\nplayer level: 1<br>\nexp needed for levelup: (player.level:1) * 100 + 100 = 100 + 100 = 200<br>\n(take away 200 experience from the player's current experience, as that was used to level up)<br>\nplayer level: 2<br>\nexp needed for levelup: (player.level:2) * 100 + 100 = 200 + 100 = 300<br>\n(take away 300 experience from the player's current experience, as that was used to level up)<br>\nplayer level: 3<br>\netc etc etc etc</p>\n<p>so, here's some examples, using starting at level 0 to make it easiest to understand:</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 100 exp)<br>\nplayer.level = 1<br>\nplayer.experience = 0 // need 200 for lvlup, need full 200 more exp</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 200 exp)<br>\nplayer.level = 1<br>\nplayer.experience = 100 // need 200 for levelup, only need 100 more exp</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 300 exp)<br>\nplayer.level = 2<br>\nplayer.experience = 0 // need 300 for level up, need full 300 more exp</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 400 exp)<br>\nplayer.level = 2<br>\nplayer.experience = 100 // need 300 for level up, need only 200 more exp</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 500 exp)<br>\nplayer.level = 2<br>\nplayer.experience = 200 // need 300 for level up, need only 100 more exp</p>\n<p>player.level = 0<br>\nplayer.experience = 0<br>\n(you kill a monster and get 600 exp)<br>\nplayer.level = 3<br>\nplayer.experience = 0 // need 400 for level up, need full 400 more exp</p>\n<p>etc etc etc</p>\n\n",
      "PostDate": "2017-04-18T08:35:55.6290502Z",
      "LastEditDate": null
    },
    {
      "PostId": "26fbb581-235b-4d2a-9c0d-cdba0bd10a53",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oops, forgot one last thing about Functions:\r\n\r\nArguments and Parameters must match up (if you've got multiple Args/Params: more than 1 Arg/Param):\r\n\r\nArg_1 <---> Param_1\r\nArg_2 <---> Param_2\r\nArg_3 <---> Param_3\r\n\r\nthis is done/determined by POSITION, (and NOT their names: such as if using/passing/transfering one Function's Parameter/s to another Function's Parameter/s):\r\n\r\n```\r\n<function name=\"example_function\" parameters=\"pos_1_param, pos_2_param, pos_3_param, etc etc etc\">\r\n</function>\r\n\r\nexample_function (pos_1_arg, pos_2_arg, pos_3_arg, etc etc etc)\r\n\r\n// this is how they are matched up, so make sure that they do match up correctly:\r\npos_1_arg ---> pos_1_param\r\npos_2_arg ---> pos_2_param\r\npos_3_arg ---> pos_3_param\r\netc etc arg ---> etc etc param\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oops, forgot one last thing about Functions:</p>\n<p>Arguments and Parameters must match up (if you've got multiple Args/Params: more than 1 Arg/Param):</p>\n<p>Arg_1 &lt;---&gt; Param_1<br>\nArg_2 &lt;---&gt; Param_2<br>\nArg_3 &lt;---&gt; Param_3</p>\n<p>this is done/determined by POSITION, (and NOT their names: such as if using/passing/transfering one Function's Parameter/s to another Function's Parameter/s):</p>\n<pre><code>&lt;function name=\"example_function\" parameters=\"pos_1_param, pos_2_param, pos_3_param, etc etc etc\"&gt;\n&lt;/function&gt;\n\nexample_function (pos_1_arg, pos_2_arg, pos_3_arg, etc etc etc)\n\n// this is how they are matched up, so make sure that they do match up correctly:\npos_1_arg ---&gt; pos_1_param\npos_2_arg ---&gt; pos_2_param\npos_3_arg ---&gt; pos_3_param\netc etc arg ---&gt; etc etc param\n</code></pre>\n\n",
      "PostDate": "2017-04-18T08:50:25.5060556Z",
      "LastEditDate": "2017-04-18T08:51:44.0534898Z"
    },
    {
      "PostId": "e4304d6e-aab8-4961-9f1c-f5cf48195b77",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good grief, HK. You trying to scare him away xD ?? Look at that block of code! *laughs*\r\n\r\nAnonynn ",
      "EditableFormat": "markdown",
      "HTML": "<p>Good grief, HK. You trying to scare him away xD ?? Look at that block of code! <em>laughs</em></p>\n<p>Anonynn</p>\n\n",
      "PostDate": "2017-04-19T02:20:39.1850619Z",
      "LastEditDate": null
    },
    {
      "PostId": "2f7cbc7a-a7fd-482f-a3a1-8111893b6905",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(I wonder how many people really read all of that...)\r\nJust use the coding that DnD uses...\r\n(fighter:)\r\nif (player.XP>2000 and player.level=1){\r\n  player.level=2\r\n}\r\nelse if (player.XP>4000 and player.level=2) {\r\n  player.level=3\r\n}\r\nand so on...\r\nor, you could add a check on class/ XP level...\r\nor... compare the player to a split...\r\nSample:\r\n(player.level=1)\r\n(player.xp=2050)\r\n player.class.fighter = Split(\" 0,2000,4000,8000,16000,32000\", \",\")\r\nif (player.xp>player.class.fighter(player.level)){\r\n   player.level=player.level+1\r\n  msg(\"You gained a level and are now level {player.level}!!!\")\r\n  msg(\"Now you only need {player.class.fighter(player.level)} - {player.xp} experience to make your next level.\")\r\n}\r\n\r\n(Yes, I may have a bug there, but you should get the idea...)\r\n and the output should look like...\r\nYou gained a level and are now level 2!!!\r\nNow you only need 1950 experience to make your next level.",
      "EditableFormat": "markdown",
      "HTML": "<p>(I wonder how many people really read all of that...)<br>\nJust use the coding that DnD uses...<br>\n(fighter:)<br>\nif (player.XP&gt;2000 and player.level=1){<br>\nplayer.level=2<br>\n}<br>\nelse if (player.XP&gt;4000 and player.level=2) {<br>\nplayer.level=3<br>\n}<br>\nand so on...<br>\nor, you could add a check on class/ XP level...<br>\nor... compare the player to a split...<br>\nSample:<br>\n(player.level=1)<br>\n(player.xp=2050)<br>\nplayer.class.fighter = Split(\" 0,2000,4000,8000,16000,32000\", \",\")<br>\nif (player.xp&gt;player.class.fighter(player.level)){<br>\nplayer.level=player.level+1<br>\nmsg(\"You gained a level and are now level {player.level}!!!\")<br>\nmsg(\"Now you only need {player.class.fighter(player.level)} - {player.xp} experience to make your next level.\")<br>\n}</p>\n<p>(Yes, I may have a bug there, but you should get the idea...)<br>\nand the output should look like...<br>\nYou gained a level and are now level 2!!!<br>\nNow you only need 1950 experience to make your next level.</p>\n\n",
      "PostDate": "2017-04-19T02:41:04.3879334Z",
      "LastEditDate": null
    }
  ]
}
