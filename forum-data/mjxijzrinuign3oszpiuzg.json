{
  "Topic": {
    "TopicId": "mjxijzrinuign3oszpiuzg",
    "ForumId": "10",
    "Title": "Decreasing or adding attributes",
    "LastUpdated": "2018-08-16T02:22:46.5344323Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7400dc90-adbf-4ace-8aa6-986a2c6765b6",
      "UserId": 366395,
      "Username": "reidgirl123",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b5c2d627a2c07912563359760000701e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've been trying to implement a code where there is a certain amount of food and when you eat it the number decreases(ex. there are 10 cans. Eat 1. 9 cans left.).",
      "EditableFormat": "markdown",
      "HTML": "<p>I've been trying to implement a code where there is a certain amount of food and when you eat it the number decreases(ex. there are 10 cans. Eat 1. 9 cans left.).</p>\n\n",
      "PostDate": "2018-08-16T02:22:46.5344323Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0b596fd2-0715-42f9-96ba-ed0b41265785",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Something like...\r\ncans=10\r\n(eat one)\r\ncans=cans-1\r\ncans (now)=9\r\nBut, Quest also has the Add script: Decrease counter... which looks like this:\r\nDecreaseObjectCounter (player, \"cans\")\r\nDoes the same thing...\r\nThe first option allows you to change cans by any amount...\r\nbut DecreaseObjectCounter (player, \"cans\") only decreases the amount by 1 at a time.\r\nAND there is also the IncreaseObjectCounter (player, \"cans\") that add 1 to cans...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Something like...<br>\ncans=10<br>\n(eat one)<br>\ncans=cans-1<br>\ncans (now)=9<br>\nBut, Quest also has the Add script: Decrease counter... which looks like this:<br>\nDecreaseObjectCounter (player, \"cans\")<br>\nDoes the same thing...<br>\nThe first option allows you to change cans by any amount...<br>\nbut DecreaseObjectCounter (player, \"cans\") only decreases the amount by 1 at a time.<br>\nAND there is also the IncreaseObjectCounter (player, \"cans\") that add 1 to cans...</p>\n\n",
      "PostDate": "2018-08-16T02:40:01.0703114Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "23e58e4d-c5fe-47b1-a385-a8d6526dff8d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"life\" type=\"string\">999/999</attr>\r\n\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"minimum_life\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"condition\" type=\"string\">normal</attr>\r\n\r\n  <attr name=\"changedcondition\" type=\"script\">\r\n\r\n    if (player.condition = \"poisoned\") {\r\n      poisoned_turnscript.enabled = true\r\n    } else if (poisoned_turnscript.enabled) {\r\n      poisoned_turnscript.enabled = false\r\n    }\r\n\r\n  </attr>\r\n\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (player.current_life < player.minimum_life) {\r\n        player.current_life = player.minimum_life\r\n      } else if (player.current_life > player.maximum_life) {\r\n        player.current_life = player.maximum_life\r\n      }\r\n\r\n      player.life = player.current_life + \"/\" + player.maximum_life\r\n\r\n      if (player.current_life = player.minimum_life) {\r\n        player.condition = \"dead\"\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (player.current_life > player.maximum_life) {\r\n        player.current_life = player.maximum_life\r\n      }\r\n\r\n      player.life = player.current_life + \"/\" + player.maximum_life\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>life</key>\r\n      <value>Life: !</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>condition</key>\r\n      <value>Condition: !</value>\r\n    </item>\r\n\r\n  </statusattributes>\r\n\r\n</object>\r\n\r\n<object name=\"poisoned_apple\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <inherit name=\"consumable_type\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">apple</attr>\r\n\r\n  <attr name=\"quantity\" type=\"int\">5</attr>\r\n\r\n  <attr name=\"effect\" type=\"script\">\r\n\r\n    player.condition = \"poisoned\"\r\n\r\n    msg (\"You're poisoned from eating the \" + this.alias + \".\")\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"poison_antedote\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <inherit name=\"consumable_type\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">poison antedote</attr>\r\n\r\n  <attr name=\"quantity\" type=\"int\">5</attr>\r\n\r\n  <attr name=\"effect\" type=\"script\">\r\n\r\n    if (player.condition = \"poisoned\")\r\n      this.quantity = this.quantity - 1\r\n      player.condition = \"normal\"\r\n      msg (\"You cured yourself of being poisoned\")\r\n   } else {\r\n     msg (\"You realize you're not poisoned, just in time before you eat the antedote plant, you don't want to foolishly waste it, silly!\")\r\n   }\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<type name=\"consumable_type\">\r\n\r\n  <attr name=\"take\" type=\"boolean\">true</attr>\r\n  <attr name=\"drop\" type=\"boolean\">true</attr>\r\n\r\n  <attr name=\"quantity\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"quantity_maximum\" type=\"int\">99</attr>\r\n\r\n  <attr name=\"quantity_minimum\" type=\"int\">0</attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>eat</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>eat</value>\r\n\r\n  </inventoryverbs>\r\n\r\n  <attr name=\"eat\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (this.quantity > 0) {\r\n        this.quantity = this.quantity - 1\r\n        msg (\"You eat the \" + this.alias + \".\")\r\n        if (HasAttribute (this, \"effect\")) {\r\n          if (TypeOf (this.effect) = \"script\") {\r\n            invoke (this.effect)\r\n          } else if (TypeOf (this.effect) = \"string\") {\r\n            msg (this.effect)\r\n          } else {\r\n            msg (\"ERROR: the '\" + this.name + \"' Object's 'effect' Attribute is not a String nor a Script, which it must be one of them\")\r\n          }\r\n        } else {\r\n          msg (\"ERROR: the '\" + this.name + \"' Object has no 'effect' String/Script, which is required\")\r\n        }\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n  <attr name=\"changedquantity\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (this.quantity < this.quantity_minimum) {\r\n        this.quantity = this.quantity_minimum\r\n      } else if (this.quantity > this.quantity_maximum) {\r\n        this.quantity = this.quantity_maximum\r\n      }\r\n\r\n      if (this.quantity = 0) {\r\n        list remove (this.displayverbs, \"eat\")\r\n        list remove (this.inventoryverbs, \"eat\")\r\n      } else {\r\n        if (not ListContains (this.displayverbs, \"eat\")) {\r\n          list add (this.displayverbs, \"eat\")\r\n        }\r\n        if (not ListContains (this.inventoryverbs, \"eat\")) {\r\n          list add (this.inventoryverbs, \"eat\")\r\n        }\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n  \r\n</type>\r\n\r\n<verb>\r\n\r\n  <property>eat</property>\r\n\r\n  <pattern>eat</pattern>\r\n\r\n  <defaultexpression> You can't eat that!</defaultexpression>\r\n\r\n</verb>\r\n\r\n<turnscript name=\"poisoned_turnscript\">\r\n\r\n  <attr name=\"enabled\" type=\"boolean\">false</attr>\r\n\r\n  <script>\r\n\r\n    player.current_life = player.current_life - player.maximum_life / 10\r\n\r\n  </script>\r\n\r\n</turnscript>\r\n```\r\n\r\n--------------------\r\n\r\nvia using the GUI/Editor:\r\n\r\n// creating/setting the Integer Attribute:\r\n\r\n'WHATEVER' Object -> 'Attributes' Tab -> Attributes (I think it's the box on the bottom) -> Add -> (see below)\r\n\r\n(Object Name: WHATEVER)\r\nAttribute Name: WHATEVER\r\nAttribute Type: int // (int: integer)\r\nAttribute Value: WHATEVER AMOUNT/NUMBER\r\n\r\n// how to do arithmetic operations via the GUI/Editor's script options:\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\n// Arithmetic Operators:\r\n\r\n// Addition: +\r\n// Subtraction: -\r\n// Multiplication: *\r\n// Division: /\r\n// Modulus (division, but it gets/finds/returns the REMAINDER): %\r\n\r\nset variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE ARITHMETIC_OPERATOR VALUE_OR_ATTRIBUTE\r\n\r\nfor examples:\r\n\r\nset variable player.strength = [EXPRESSION] player.strength + 5\r\n\r\nset variable player.strength = [EXPRESSION] player.strength - 9\r\n\r\nset variable player.strength = [EXPRESSION] player.strength * 3\r\n\r\nset variable player.strength = [EXPRESSION] player.strength / 2\r\n\r\na more complex expression using Attributes:\r\n\r\n// -----------------\r\n\r\n // these just creates/sets the Integer Attributes' Values to be randomly selecting from 0 to 100 (it's the same as using create/setting the Attribute via the GUI/Editor's Tabs as shown above, except you have to choose a Value yourself, you can't do the 'GetRandomInt' randomization Script/Function, by using the GUI/Editor's Tabs, unless you set an Attribute to be a Script Attribute):\r\n\r\nset variable player.strength = [EXPRESSION] GetRandomInt (0,100)\r\nset variable player.endurance = [EXPRESSION] GetRandomInt (0,100)\r\n\r\n// ----------------\r\n\r\nset variable player.damage = [EXPRESSION] (player.strength + player.endurance) / 2\r\n\r\nthe expression can be as complex as you want it, using direct/literal Values and/or Attributes, and follows all of the same rules as with any mathematical expression\r\n\r\nfor examples of more complex expressions:\r\n\r\n// -----------\r\n\r\n// as in code scripting (too lazy to do as using the GUI/Editor's options/controls):\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nkatana.alias = \"katana\"\r\n\r\ncreate (\"short_sword\")\r\nshort_sword.damage = 25\r\nshort_sword.alias = \"short sword\"\r\n\r\nobjectlist_variable = NewObjectList ()\r\nlist add (objectlist_variable, katana)\r\nlist add (objectlist_variable, short_sword)\r\n\r\nplayer.weapon = ObjectListItem (objectlist_variable, GetRandomInt (0,1))\r\n\r\nplayer.strength = GetRandomInt (0,100)\r\n\r\n// ---------\r\n\r\nset variable player.damage = [EXPRESSION] player.weapon.damage + player.weapon.damage * player.strength / 100\r\n\r\n// as in-code scripting (just so you can see the small differences in syntaxes between the in-code scripting and via using the GUI/Editor's script options):\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n\r\n-------------------------\r\n\r\nconceptually how the arithmetic operations work (using an Addition simple expression as an example):\r\n\r\n// initial Value: player.strength = 0\r\n\r\n// old value: player.strength = 0\r\n\r\nplayer.strength = player.strength + 5\r\n// player.strength (NEW) = player.strength (OLD) + 5\r\n// player.strength (NEW) = player.strength (OLD: 0) + 5\r\n// player.strength (NEW) = (0) + 5\r\n// player.strength (NEW) = 5\r\n\r\n// new Value: player.strength = 5\r\n\r\n// old Value: player.strength = 5\r\n\r\nplayer.strength = player.strength + 5\r\n// player.strength (NEW) = player.strength (OLD) + 5\r\n// player.strength (NEW) = player.strength (OLD: 5) + 5\r\n// player.strength (NEW) = (5) + 5\r\n// player.strength (NEW) = 10\r\n\r\n// new Value: player.strength = 10\r\n\r\n// old Value: player.strength = 10\r\n\r\nplayer.strength = player.strength + 5\r\n// player.strength (NEW) = player.strength (OLD) + 5\r\n// player.strength (NEW) = player.strength (OLD: 10) + 5\r\n// player.strength (NEW) = (10) + 5\r\n// player.strength (NEW) = 15\r\n\r\n// new Value: player.strength = 15\r\n\r\n// old Value: player.strength = 15\r\n\r\nplayer.strength = player.strength + 5\r\n// player.strength (NEW) = player.strength (OLD) + 5\r\n// player.strength (NEW) = player.strength (OLD: 15) + 5\r\n// player.strength (NEW) = (15) + 5\r\n// player.strength (NEW) = 20\r\n\r\n// new value: player.strength = 20\r\n\r\n// etc etc etc\r\n\r\n--------------------------\r\n\r\nunfortunately in math (algebra) class, they don't teach that the '=' is a COMPARISON operator (is 'A' equal-to/the-same-as 'B'), for example:\r\n\r\n2N = 10\r\n// 2N (/2) = 10 (/2)\r\n// N = 5\r\n\r\n(if N=5): is '2 * N' the same as '10' ??? ---> yes/true\r\ndoes 'N' = '5' ??? ---> (see above) ---> YES/TRUE\r\n\r\nand also in math:\r\n\r\nN = 10 // NO error\r\n10 = N  // NO error\r\n\r\nwhereas in programming, there's ALSO the 'Assignment' operator:\r\n\r\nN = 10 // NO error\r\n10 = N // ERROR!\r\n\r\nbecause....\r\n\r\nN = 5\r\n\r\nthe '5' Value on the right side of the '=' ASSIGNMENT operator, is STORED into the 'N' Variable VARIABLE on the left side of the '=' ASSIGNMENT operator\r\n\r\nyou can ONLY STORE something into a VARIABLE, as '10' is not a VARIABLE: 10 = N ---> ERROR!\r\n\r\n----------\r\n\r\nquickly (keeping this simple), in quest, there's 3 types of VARIABLES:\r\n\r\nVARIABLES:\r\n1. Variable\r\n2. Attribute\r\n3. Parameters/Arguments\r\n\r\nyou generally want to use Attributes (Attribute VARIABLES), until you understand about scope better, and know how/when you can use Variables vs Attributes\r\n\r\nand the 'parameters/arguments' is specifically for Functions and Commands usage... but that's a topic for another day/post/thread/later....\r\n\r\n(basically parameters/arguments are: the parameter is a Variable VARIABLE and the argument is the value being stored into it, except they can also be transferred to another Function/Command for its use of them)\r\n\r\n----------\r\n\r\nM = 5\r\nN = M\r\n\r\nthe 'M' Variable VARIABLE (which is storing the Value of '5') is STORED into the 'N' Variable VARIABLE, so essentially we're doing this:\r\n\r\nN = (M = 5)\r\nN <=== (M <=== 5)\r\n\r\nN = 5\r\n\r\nthe 'N' is storing the '5' Value\r\n\r\n-----\r\n\r\nand that's why the arithmetic operations work as they do:\r\n\r\nplayer.strength = 7\r\nplayer.strength = player.strength + 9\r\n\r\n// player.strength = 16\r\n\r\nbecause of the use of the Assignment operator/operation, taking whatever is the ultimate (if there's a complex expression, it first gets solved/evaluated) final Value on the right side of the '=' ASSIGNMENT operator, and STORING it into the VARIABLE on the left side of the '=' ASSIGNMENT operator\r\n\r\nquest is able to handle/parse/know whether the '=' is the normal comparison operator vs an assignment operator\r\n\r\nand for friendliness for those new to coding, quest uses the same operator symbol for both of them:\r\n\r\nassignment operator: =\r\ncomparison operator: =\r\n\r\nand uses for the Logic operators:\r\n\r\n'AND' logic operator: A and B\r\n'OR' logic operator: A or B\r\n'Negation' (opposite) ('NOT') logic operator: not A = B // or: A <> B\r\n\r\nusually though programming languages uses different symbols/operators:\r\n\r\nassignment operator: =\r\ncomparison operator: ==\r\n\r\nand for the logic operators, usually in programming languages, its:\r\n\r\n'AND' logic operator: &&\r\n'OR' logic operator: ||\r\n'NOT' logic operator: !\r\n\r\nbut this can be confusing for people new to coding, so quest opted to use the same operator (which can be confusing too, meh) for both operations, and have internal coding handle/parse/know which operation to do for the '=' symbols/operators used in the syntaxes\r\n\r\nand people new to coding are scared by lots of symbols, so for the logic operators/operations in quest, you literally use 'and' for the 'AND' logic operator, 'or' for the 'OR' logic operator, and 'not' for the 'NOT' logic operator, instead of the symbols '&&', '||', and '!'",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"minimum_life\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"condition\" type=\"string\"&gt;normal&lt;/attr&gt;\n\n  &lt;attr name=\"changedcondition\" type=\"script\"&gt;\n\n    if (player.condition = \"poisoned\") {\n      poisoned_turnscript.enabled = true\n    } else if (poisoned_turnscript.enabled) {\n      poisoned_turnscript.enabled = false\n    }\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (player.current_life &lt; player.minimum_life) {\n        player.current_life = player.minimum_life\n      } else if (player.current_life &gt; player.maximum_life) {\n        player.current_life = player.maximum_life\n      }\n\n      player.life = player.current_life + \"/\" + player.maximum_life\n\n      if (player.current_life = player.minimum_life) {\n        player.condition = \"dead\"\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (player.current_life &gt; player.maximum_life) {\n        player.current_life = player.maximum_life\n      }\n\n      player.life = player.current_life + \"/\" + player.maximum_life\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;life&lt;/key&gt;\n      &lt;value&gt;Life: !&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;condition&lt;/key&gt;\n      &lt;value&gt;Condition: !&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/statusattributes&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"poisoned_apple\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;inherit name=\"consumable_type\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;apple&lt;/attr&gt;\n\n  &lt;attr name=\"quantity\" type=\"int\"&gt;5&lt;/attr&gt;\n\n  &lt;attr name=\"effect\" type=\"script\"&gt;\n\n    player.condition = \"poisoned\"\n\n    msg (\"You're poisoned from eating the \" + this.alias + \".\")\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"poison_antedote\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;inherit name=\"consumable_type\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;poison antedote&lt;/attr&gt;\n\n  &lt;attr name=\"quantity\" type=\"int\"&gt;5&lt;/attr&gt;\n\n  &lt;attr name=\"effect\" type=\"script\"&gt;\n\n    if (player.condition = \"poisoned\")\n      this.quantity = this.quantity - 1\n      player.condition = \"normal\"\n      msg (\"You cured yourself of being poisoned\")\n   } else {\n     msg (\"You realize you're not poisoned, just in time before you eat the antedote plant, you don't want to foolishly waste it, silly!\")\n   }\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;type name=\"consumable_type\"&gt;\n\n  &lt;attr name=\"take\" type=\"boolean\"&gt;true&lt;/attr&gt;\n  &lt;attr name=\"drop\" type=\"boolean\"&gt;true&lt;/attr&gt;\n\n  &lt;attr name=\"quantity\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"quantity_maximum\" type=\"int\"&gt;99&lt;/attr&gt;\n\n  &lt;attr name=\"quantity_minimum\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;eat&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;eat&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n  &lt;attr name=\"eat\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (this.quantity &gt; 0) {\n        this.quantity = this.quantity - 1\n        msg (\"You eat the \" + this.alias + \".\")\n        if (HasAttribute (this, \"effect\")) {\n          if (TypeOf (this.effect) = \"script\") {\n            invoke (this.effect)\n          } else if (TypeOf (this.effect) = \"string\") {\n            msg (this.effect)\n          } else {\n            msg (\"ERROR: the '\" + this.name + \"' Object's 'effect' Attribute is not a String nor a Script, which it must be one of them\")\n          }\n        } else {\n          msg (\"ERROR: the '\" + this.name + \"' Object has no 'effect' String/Script, which is required\")\n        }\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"changedquantity\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (this.quantity &lt; this.quantity_minimum) {\n        this.quantity = this.quantity_minimum\n      } else if (this.quantity &gt; this.quantity_maximum) {\n        this.quantity = this.quantity_maximum\n      }\n\n      if (this.quantity = 0) {\n        list remove (this.displayverbs, \"eat\")\n        list remove (this.inventoryverbs, \"eat\")\n      } else {\n        if (not ListContains (this.displayverbs, \"eat\")) {\n          list add (this.displayverbs, \"eat\")\n        }\n        if (not ListContains (this.inventoryverbs, \"eat\")) {\n          list add (this.inventoryverbs, \"eat\")\n        }\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n  \n&lt;/type&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;eat&lt;/property&gt;\n\n  &lt;pattern&gt;eat&lt;/pattern&gt;\n\n  &lt;defaultexpression&gt; You can't eat that!&lt;/defaultexpression&gt;\n\n&lt;/verb&gt;\n\n&lt;turnscript name=\"poisoned_turnscript\"&gt;\n\n  &lt;attr name=\"enabled\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;script&gt;\n\n    player.current_life = player.current_life - player.maximum_life / 10\n\n  &lt;/script&gt;\n\n&lt;/turnscript&gt;\n</code></pre>\n<hr>\n<p>via using the GUI/Editor:</p>\n<p>// creating/setting the Integer Attribute:</p>\n<p>'WHATEVER' Object -&gt; 'Attributes' Tab -&gt; Attributes (I think it's the box on the bottom) -&gt; Add -&gt; (see below)</p>\n<p>(Object Name: WHATEVER)<br>\nAttribute Name: WHATEVER<br>\nAttribute Type: int // (int: integer)<br>\nAttribute Value: WHATEVER AMOUNT/NUMBER</p>\n<p>// how to do arithmetic operations via the GUI/Editor's script options:</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>// Arithmetic Operators:</p>\n<p>// Addition: +<br>\n// Subtraction: -<br>\n// Multiplication: *<br>\n// Division: /<br>\n// Modulus (division, but it gets/finds/returns the REMAINDER): %</p>\n<p>set variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] NAME_OF_OBJECT.NAME_OF_ATTRIBUTE ARITHMETIC_OPERATOR VALUE_OR_ATTRIBUTE</p>\n<p>for examples:</p>\n<p>set variable player.strength = [EXPRESSION] player.strength + 5</p>\n<p>set variable player.strength = [EXPRESSION] player.strength - 9</p>\n<p>set variable player.strength = [EXPRESSION] player.strength * 3</p>\n<p>set variable player.strength = [EXPRESSION] player.strength / 2</p>\n<p>a more complex expression using Attributes:</p>\n<p>// -----------------</p>\n<p>// these just creates/sets the Integer Attributes' Values to be randomly selecting from 0 to 100 (it's the same as using create/setting the Attribute via the GUI/Editor's Tabs as shown above, except you have to choose a Value yourself, you can't do the 'GetRandomInt' randomization Script/Function, by using the GUI/Editor's Tabs, unless you set an Attribute to be a Script Attribute):</p>\n<p>set variable player.strength = [EXPRESSION] GetRandomInt (0,100)<br>\nset variable player.endurance = [EXPRESSION] GetRandomInt (0,100)</p>\n<p>// ----------------</p>\n<p>set variable player.damage = [EXPRESSION] (player.strength + player.endurance) / 2</p>\n<p>the expression can be as complex as you want it, using direct/literal Values and/or Attributes, and follows all of the same rules as with any mathematical expression</p>\n<p>for examples of more complex expressions:</p>\n<p>// -----------</p>\n<p>// as in code scripting (too lazy to do as using the GUI/Editor's options/controls):</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nkatana.alias = \"katana\"</p>\n<p>create (\"short_sword\")<br>\nshort_sword.damage = 25<br>\nshort_sword.alias = \"short sword\"</p>\n<p>objectlist_variable = NewObjectList ()<br>\nlist add (objectlist_variable, katana)<br>\nlist add (objectlist_variable, short_sword)</p>\n<p>player.weapon = ObjectListItem (objectlist_variable, GetRandomInt (0,1))</p>\n<p>player.strength = GetRandomInt (0,100)</p>\n<p>// ---------</p>\n<p>set variable player.damage = [EXPRESSION] player.weapon.damage + player.weapon.damage * player.strength / 100</p>\n<p>// as in-code scripting (just so you can see the small differences in syntaxes between the in-code scripting and via using the GUI/Editor's script options):</p>\n<p>player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100</p>\n<hr>\n<p>conceptually how the arithmetic operations work (using an Addition simple expression as an example):</p>\n<p>// initial Value: player.strength = 0</p>\n<p>// old value: player.strength = 0</p>\n<p>player.strength = player.strength + 5<br>\n// player.strength (NEW) = player.strength (OLD) + 5<br>\n// player.strength (NEW) = player.strength (OLD: 0) + 5<br>\n// player.strength (NEW) = (0) + 5<br>\n// player.strength (NEW) = 5</p>\n<p>// new Value: player.strength = 5</p>\n<p>// old Value: player.strength = 5</p>\n<p>player.strength = player.strength + 5<br>\n// player.strength (NEW) = player.strength (OLD) + 5<br>\n// player.strength (NEW) = player.strength (OLD: 5) + 5<br>\n// player.strength (NEW) = (5) + 5<br>\n// player.strength (NEW) = 10</p>\n<p>// new Value: player.strength = 10</p>\n<p>// old Value: player.strength = 10</p>\n<p>player.strength = player.strength + 5<br>\n// player.strength (NEW) = player.strength (OLD) + 5<br>\n// player.strength (NEW) = player.strength (OLD: 10) + 5<br>\n// player.strength (NEW) = (10) + 5<br>\n// player.strength (NEW) = 15</p>\n<p>// new Value: player.strength = 15</p>\n<p>// old Value: player.strength = 15</p>\n<p>player.strength = player.strength + 5<br>\n// player.strength (NEW) = player.strength (OLD) + 5<br>\n// player.strength (NEW) = player.strength (OLD: 15) + 5<br>\n// player.strength (NEW) = (15) + 5<br>\n// player.strength (NEW) = 20</p>\n<p>// new value: player.strength = 20</p>\n<p>// etc etc etc</p>\n<hr>\n<p>unfortunately in math (algebra) class, they don't teach that the '=' is a COMPARISON operator (is 'A' equal-to/the-same-as 'B'), for example:</p>\n<p>2N = 10<br>\n// 2N (/2) = 10 (/2)<br>\n// N = 5</p>\n<p>(if N=5): is '2 * N' the same as '10' ??? ---&gt; yes/true<br>\ndoes 'N' = '5' ??? ---&gt; (see above) ---&gt; YES/TRUE</p>\n<p>and also in math:</p>\n<p>N = 10 // NO error<br>\n10 = N  // NO error</p>\n<p>whereas in programming, there's ALSO the 'Assignment' operator:</p>\n<p>N = 10 // NO error<br>\n10 = N // ERROR!</p>\n<p>because....</p>\n<p>N = 5</p>\n<p>the '5' Value on the right side of the '=' ASSIGNMENT operator, is STORED into the 'N' Variable VARIABLE on the left side of the '=' ASSIGNMENT operator</p>\n<p>you can ONLY STORE something into a VARIABLE, as '10' is not a VARIABLE: 10 = N ---&gt; ERROR!</p>\n<hr>\n<p>quickly (keeping this simple), in quest, there's 3 types of VARIABLES:</p>\n<p>VARIABLES:</p>\n<ol>\n<li>Variable</li>\n<li>Attribute</li>\n<li>Parameters/Arguments</li>\n</ol>\n<p>you generally want to use Attributes (Attribute VARIABLES), until you understand about scope better, and know how/when you can use Variables vs Attributes</p>\n<p>and the 'parameters/arguments' is specifically for Functions and Commands usage... but that's a topic for another day/post/thread/later....</p>\n<p>(basically parameters/arguments are: the parameter is a Variable VARIABLE and the argument is the value being stored into it, except they can also be transferred to another Function/Command for its use of them)</p>\n<hr>\n<p>M = 5<br>\nN = M</p>\n<p>the 'M' Variable VARIABLE (which is storing the Value of '5') is STORED into the 'N' Variable VARIABLE, so essentially we're doing this:</p>\n<p>N = (M = 5)<br>\nN &lt;=== (M &lt;=== 5)</p>\n<p>N = 5</p>\n<p>the 'N' is storing the '5' Value</p>\n<hr>\n<p>and that's why the arithmetic operations work as they do:</p>\n<p>player.strength = 7<br>\nplayer.strength = player.strength + 9</p>\n<p>// player.strength = 16</p>\n<p>because of the use of the Assignment operator/operation, taking whatever is the ultimate (if there's a complex expression, it first gets solved/evaluated) final Value on the right side of the '=' ASSIGNMENT operator, and STORING it into the VARIABLE on the left side of the '=' ASSIGNMENT operator</p>\n<p>quest is able to handle/parse/know whether the '=' is the normal comparison operator vs an assignment operator</p>\n<p>and for friendliness for those new to coding, quest uses the same operator symbol for both of them:</p>\n<p>assignment operator: =<br>\ncomparison operator: =</p>\n<p>and uses for the Logic operators:</p>\n<p>'AND' logic operator: A and B<br>\n'OR' logic operator: A or B<br>\n'Negation' (opposite) ('NOT') logic operator: not A = B // or: A &lt;&gt; B</p>\n<p>usually though programming languages uses different symbols/operators:</p>\n<p>assignment operator: =<br>\ncomparison operator: ==</p>\n<p>and for the logic operators, usually in programming languages, its:</p>\n<p>'AND' logic operator: &amp;&amp;<br>\n'OR' logic operator: ||<br>\n'NOT' logic operator: !</p>\n<p>but this can be confusing for people new to coding, so quest opted to use the same operator (which can be confusing too, meh) for both operations, and have internal coding handle/parse/know which operation to do for the '=' symbols/operators used in the syntaxes</p>\n<p>and people new to coding are scared by lots of symbols, so for the logic operators/operations in quest, you literally use 'and' for the 'AND' logic operator, 'or' for the 'OR' logic operator, and 'not' for the 'NOT' logic operator, instead of the symbols '&amp;&amp;', '||', and '!'</p>\n\n",
      "PostDate": "2018-08-16T06:08:42.1742275Z",
      "LastEditDate": "2018-08-16T07:18:51.861557Z",
      "link": null
    },
    {
      "PostId": "b2f78049-9317-4aa3-922c-75b8d3022e40",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's some links to help you with learning quest and its coding:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\nI go into more detail in my 'HKs attributes and if script usage' link:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (scroll down past the ~ top half section, to get into the Attribute usage and arithmetic operations, and further down, for the 'if' Script: using Attributes with the 'if' Script, which is how you do 90% of everything that you want to do within your game)\r\n\r\nthough, you might also want to read this too/first, as I try to explain how to work directly in quest's code (makes everything so much easier/faster than using the GUI/Editor to do/change stuff), trying to explain its code structure:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/mu7itzjqv0yxrkdwgsbmzg/how-to-make-npc-confront-you-with-chioces#46cdb25b-4767-40a6-8bf4-3cd84e805781\r\n\r\n------\r\n\r\nask if you need help and/or explanation of/with whatever, as this is really complicated stuff, especially if you're new to coding and programming",
      "EditableFormat": "markdown",
      "HTML": "<p>here's some links to help you with learning quest and its coding:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>I go into more detail in my 'HKs attributes and if script usage' link:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (scroll down past the ~ top half section, to get into the Attribute usage and arithmetic operations, and further down, for the 'if' Script: using Attributes with the 'if' Script, which is how you do 90% of everything that you want to do within your game)</p>\n<p>though, you might also want to read this too/first, as I try to explain how to work directly in quest's code (makes everything so much easier/faster than using the GUI/Editor to do/change stuff), trying to explain its code structure:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/mu7itzjqv0yxrkdwgsbmzg/how-to-make-npc-confront-you-with-chioces#46cdb25b-4767-40a6-8bf4-3cd84e805781</p>\n<hr>\n<p>ask if you need help and/or explanation of/with whatever, as this is really complicated stuff, especially if you're new to coding and programming</p>\n\n",
      "PostDate": "2018-08-16T06:48:29.2366203Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
