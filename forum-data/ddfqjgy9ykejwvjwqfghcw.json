{
  "Topic": {
    "TopicId": "ddfqjgy9ykejwvjwqfghcw",
    "ForumId": "10",
    "Title": "Easiest way to interrupt the command queue?",
    "LastUpdated": "2021-05-13T05:09:25.2011823Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f93e5657-4266-4932-9808-e6bb8d0cfdc8",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nLets say I have a game with a butt-load of turn scripts.  (Okay?)\r\n\r\nSometimes, one of the turn scripts might print something. Sometimes, none of them will. (With me so far?)\r\n\r\nNow, occasionally, when a turn script <i>does </i>print something, the text is something important. Like, it might be telling you that a one-eyed, one-horned, flying, purple people-eater just came out of the sky and lit in a tree. Such information might make an adventurer want to take different action than originally intended, and it would be polite to stop all the pending actions, if any exist.\r\n\r\nOr, say there's a random chance an adventurer might fall through a trap door after entering a certain room, but this is unbeknownst to the player. Plus, the player just travelled through that room last time but forgot to save the game. So, the player knows that **N.W.E.GET LAMP.D.D** should get them from the current location to the place they were last time (with lamp in hand), **but** this time they fall through the trap door after going west. On top of this, something in the darkness below the trap door asks you a question (WHAT?!?! IS YOUR FAVOURITE COLOUR???), and this particular something was very ornery and felt that any answer other than a colour (no matter which colour) was punishable by death?\r\n\r\nWell, normally that command (**N.W.E.GET LAMP.D.D**) would go like this (I'll spread them out into single commands so you can see the process):\r\n\r\n\\>N\r\nYou are in front of The Super-Spreader.\r\n\r\nYou can see topless dancers here.\r\n\r\nYou can go west or south.\r\n\r\n\\>W\r\nYou go west.\r\n\r\nYou are in front of The Manhattan Restaurant of the Mind.\r\n\r\nYou can see Jake Chambers here.\r\n\r\nSuddenly, you hear a strange noise coming from the sewer grate beneath your feet. Before you have time to register that you are looking at a pair of glowing, yellow eyes, whatever it is down there reaches up and snatches you down into the sewer!\r\n\r\nIt is pitch black.\r\n\r\nThe thing with the yellow eyes speaks. \"<i>WHAT?!?!</i>\" it groans, \"<i>IS YOUR FAVOURITE COLOUR???</i>\"\r\n\r\n\\>E\r\n\"<i>NOT A COLOUR!!!</i>\" The thing is shrieking, possibly laughing, as its eyes grow larger and closer to you. You can smell the thing's foul breath just before it reaches in, rips your heart out of your chest, and eats it right in front of you.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;**** You have died. ****\r\n\r\n\r\n\\>GET LAMP\r\nYou stay out of this, you're dead. A silver spaceship improbably appears with a *BAMF!* It lights up the sewer. The shadow of the yellow-eyed thing scurries away just before a tall, slender alien steps out of the ship and approaches you.\r\n\r\n\\>D\r\nYou sure do try to move around a lot for a dead person! The alien looks at you for a moment, then says, \"Dent?\" After a moment, it asks again, \"Arthur Phillip Dent?\"\r\n\r\nAfter another moment, the alien calls you a jerk and a complete knee-biter, gets back into its ship, and disappears the same way it arrived, with a *BAMF!*\r\n\r\nWe are about to give you your score. Put on your peril-sensitive sunglasses now. (Hit RETURN or ENTER when ready.) \\>\r\n\r\n\r\n---\r\n## What if?\r\n\r\nNow, wouldn't it be nice if there was a function which stopped all pending commands (and probably turn scripts, too) from firing?\r\n\r\nThen, we could stop all pending actions if something big happened. Like:\r\n\r\n\r\n\\>N.W.E.GET LAMP.D.D\r\nYou are in front of The Super-Spreader.\r\n\r\nYou can see topless dancers here.\r\n\r\nYou can go west or south.\r\n\r\nYou go west.\r\n\r\nYou are in front of The Manhattan Restaurant of the Mind.\r\n\r\nYou can see Jake Chambers here.\r\n\r\nSuddenly, you hear a strange noise coming from the sewer grate beneath your feet. Before you have time to register that you are looking at a pair of glowing, yellow eyes, whatever it is down there reaches up and snatches you down into the sewer!\r\n\r\nIt is pitch black.\r\n\r\nThe thing with the yellow eyes speaks. \"<i>WHAT?!?!</i>\" it groans, \"<i>IS YOUR FAVOURITE COLOUR???</i>\"\r\n\r\n\\>",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>Lets say I have a game with a butt-load of turn scripts.  (Okay?)</p>\n<p>Sometimes, one of the turn scripts might print something. Sometimes, none of them will. (With me so far?)</p>\n<p>Now, occasionally, when a turn script <i>does </i>print something, the text is something important. Like, it might be telling you that a one-eyed, one-horned, flying, purple people-eater just came out of the sky and lit in a tree. Such information might make an adventurer want to take different action than originally intended, and it would be polite to stop all the pending actions, if any exist.</p>\n<p>Or, say there's a random chance an adventurer might fall through a trap door after entering a certain room, but this is unbeknownst to the player. Plus, the player just travelled through that room last time but forgot to save the game. So, the player knows that <strong>N.W.E.GET LAMP.D.D</strong> should get them from the current location to the place they were last time (with lamp in hand), <strong>but</strong> this time they fall through the trap door after going west. On top of this, something in the darkness below the trap door asks you a question (WHAT?!?! IS YOUR FAVOURITE COLOUR???), and this particular something was very ornery and felt that any answer other than a colour (no matter which colour) was punishable by death?</p>\n<p>Well, normally that command (<strong>N.W.E.GET LAMP.D.D</strong>) would go like this (I'll spread them out into single commands so you can see the process):</p>\n<p>&gt;N<br>\nYou are in front of The Super-Spreader.</p>\n<p>You can see topless dancers here.</p>\n<p>You can go west or south.</p>\n<p>&gt;W<br>\nYou go west.</p>\n<p>You are in front of The Manhattan Restaurant of the Mind.</p>\n<p>You can see Jake Chambers here.</p>\n<p>Suddenly, you hear a strange noise coming from the sewer grate beneath your feet. Before you have time to register that you are looking at a pair of glowing, yellow eyes, whatever it is down there reaches up and snatches you down into the sewer!</p>\n<p>It is pitch black.</p>\n<p>The thing with the yellow eyes speaks. \"<i>WHAT?!?!</i>\" it groans, \"<i>IS YOUR FAVOURITE COLOUR???</i>\"</p>\n<p>&gt;E<br>\n\"<i>NOT A COLOUR!!!</i>\" The thing is shrieking, possibly laughing, as its eyes grow larger and closer to you. You can smell the thing's foul breath just before it reaches in, rips your heart out of your chest, and eats it right in front of you.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;**** You have died. ****</p>\n<p>&gt;GET LAMP<br>\nYou stay out of this, you're dead. A silver spaceship improbably appears with a <em>BAMF!</em> It lights up the sewer. The shadow of the yellow-eyed thing scurries away just before a tall, slender alien steps out of the ship and approaches you.</p>\n<p>&gt;D<br>\nYou sure do try to move around a lot for a dead person! The alien looks at you for a moment, then says, \"Dent?\" After a moment, it asks again, \"Arthur Phillip Dent?\"</p>\n<p>After another moment, the alien calls you a jerk and a complete knee-biter, gets back into its ship, and disappears the same way it arrived, with a <em>BAMF!</em></p>\n<p>We are about to give you your score. Put on your peril-sensitive sunglasses now. (Hit RETURN or ENTER when ready.) &gt;</p>\n<hr>\n<h2>What if?</h2>\n<p>Now, wouldn't it be nice if there was a function which stopped all pending commands (and probably turn scripts, too) from firing?</p>\n<p>Then, we could stop all pending actions if something big happened. Like:</p>\n<p>&gt;N.W.E.GET LAMP.D.D<br>\nYou are in front of The Super-Spreader.</p>\n<p>You can see topless dancers here.</p>\n<p>You can go west or south.</p>\n<p>You go west.</p>\n<p>You are in front of The Manhattan Restaurant of the Mind.</p>\n<p>You can see Jake Chambers here.</p>\n<p>Suddenly, you hear a strange noise coming from the sewer grate beneath your feet. Before you have time to register that you are looking at a pair of glowing, yellow eyes, whatever it is down there reaches up and snatches you down into the sewer!</p>\n<p>It is pitch black.</p>\n<p>The thing with the yellow eyes speaks. \"<i>WHAT?!?!</i>\" it groans, \"<i>IS YOUR FAVOURITE COLOUR???</i>\"</p>\n<p>&gt;</p>\n\n",
      "PostDate": "2021-05-13T05:09:25.2011823Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d6538874-40a0-4ec3-a6eb-ae3b4a36c523",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is why Quest 6 does not even support concatenating commands.\r\n\r\nAnd why would a player do that? It is just as much typing as doing it one command at a time.\r\n\r\n[Sorry - that was no actual help]",
      "EditableFormat": "markdown",
      "HTML": "<p>This is why Quest 6 does not even support concatenating commands.</p>\n<p>And why would a player do that? It is just as much typing as doing it one command at a time.</p>\n<p>[Sorry - that was no actual help]</p>\n\n",
      "PostDate": "2021-05-13T06:14:10.6513434Z",
      "LastEditDate": "2021-05-13T06:14:41.3890229Z",
      "link": null
    },
    {
      "PostId": "2a7deea2-5fd6-4965-85e3-3c9d7b8518e8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> And why would a player do that? It is just as much typing as doing it one command at a time.\r\n\r\nIf you're using the web player, there can be significant lag before a command is accepted. If you've already made a map of a town, and you know where you're going, it seems quite reasonable to enter a whole bunch of directions at once to get there.\r\n\r\n> \"NOT A COLOUR!!!\" The thing is shrieking,\r\n\r\nI don't think that should happen. Multiple commands on a line are put into a stringlist and then iterated over. If one of them triggers a `get input`, it should expect input from the client as normal, not from the command list.\r\n\r\nOn the other hand, if the player is expected to enter the command \"say yellow\" or something, that would be a problem. As it would if the player enters a colour, only for the remainder of their queued commands to execute.\r\n\r\nTherefore I would suggest that traps, wandering monsters, and other unexpected events should always do:\r\n```\r\ngame.pov.commandqueue = null\r\n```\r\nor possibly:\r\n```\r\nJS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \".\"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"');\")\r\ngame.pov.commandqueue = null\r\n```\r\nto type the remaining commands into the command bar for you, so that if the player wants to continue with their plan they can just hit enter.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>And why would a player do that? It is just as much typing as doing it one command at a time.</p>\n</blockquote>\n<p>If you're using the web player, there can be significant lag before a command is accepted. If you've already made a map of a town, and you know where you're going, it seems quite reasonable to enter a whole bunch of directions at once to get there.</p>\n<blockquote>\n<p>\"NOT A COLOUR!!!\" The thing is shrieking,</p>\n</blockquote>\n<p>I don't think that should happen. Multiple commands on a line are put into a stringlist and then iterated over. If one of them triggers a <code>get input</code>, it should expect input from the client as normal, not from the command list.</p>\n<p>On the other hand, if the player is expected to enter the command \"say yellow\" or something, that would be a problem. As it would if the player enters a colour, only for the remainder of their queued commands to execute.</p>\n<p>Therefore I would suggest that traps, wandering monsters, and other unexpected events should always do:</p>\n<pre><code>game.pov.commandqueue = null\n</code></pre>\n<p>or possibly:</p>\n<pre><code>JS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \".\"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"');\")\ngame.pov.commandqueue = null\n</code></pre>\n<p>to type the remaining commands into the command bar for you, so that if the player wants to continue with their plan they can just hit enter.</p>\n\n",
      "PostDate": "2021-05-13T11:41:27.9148216Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ec6dae7e-3b45-47eb-b458-26507b7662a9",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> And why would a player do that? It is just as much typing as doing it one command at a time.\r\n\r\nI can't really explain why, but I do it all the time. I've done it ever since I learned it was possible back in the 1980s.\r\n\r\nIf it's Infocom, you can separate commands with ```.``` or ``` then ```. So, sometimes it just feels natural.\r\n\r\n```\r\nYou are in the Whack-A-Mole room.\r\nYou can see a hammer.\r\nYou can see a Mole.\r\n\r\n>get hammer then whack mole\r\nTaken.\r\n\r\nDone.\r\nThe mole retreats into its hole.\r\n```\r\n\r\n---\r\nWhen it comes to Quest, I've received quite a few emails with games-in-progress attached and a note to paste in something like \"NW.N.NE.E.CLAP.NE.NE.SE.HOP.CLAP\" to get to the point in the game where there is an issue.\r\n\r\n(I guess the walkthrough feature isn't something most people know about.)\r\n\r\n---\r\n> [Sorry - that was no actual help]\r\n\r\nOh, that's cool.  Someone opining that whatever I'm doing might possibly be pointless is definitely helpful when I'm not thinking things through clearly.\r\n\r\nI always want people to point out such things, as they are usually true and save me tons of wasted time.\r\n\r\n:)\r\n\r\n\r\n---\r\n> >  \"NOT A COLOUR!!!\" The thing is shrieking,\r\n>\r\n> I don't think that should happen. Multiple commands on a line are put into a``` stringlist``` and then iterated over. If one of them triggers a get input, it should expect input from the client as normal, not from the command list.\r\n\r\nHrmmm...\r\n\r\nI need to test this out.\r\n\r\n...but anytime I use get input once play has begun, my default switch case is ```HandleSingleCommand(result)``` as a way to let the player ignore the get input like they can certain show menus.\r\n\r\nNow I wonder how these two things will work together. (Exciting!)\r\n\r\nAlso, ```game.pov.commandqueue = null``` was the first thing I tried.  I've got tons of turnscripts and stuff running in the game I'm porting, and this throws multiple errors.\r\n\r\nBut pulling the command queue to paste it into the text input field with this?\r\n\r\n```\r\nJS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \".\"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"');\")\r\n```\r\n\r\nThat is an awesome idea!\r\n\r\n---\r\nAnyway, last night I couldn't fall asleep until I figured out how to make it work in the game I'm porting.\r\n\r\nHere's a dumb example (as my code has all sorts of extra stuff in it which would be distracting, but this example has the same functions that handle all his stuff):\r\n\r\n```\r\n  <turnscript name=\"testerturnscript\">\r\n    <enabled />\r\n    <script>\r\n      firsttime{\r\n        this.counter = 0\r\n      }\r\n      this.counter = this.counter + 1\r\n      if (this.counter % 3 = 0) {\r\n        msg (\"Something important printed!\")\r\n        this.interrupt = true\r\n      }\r\n      else {\r\n        msg(\"This text is not very important.\")\r\n      }\r\n    </script>\r\n  </turnscript>\r\n```\r\n\r\n```\r\n  <function name=\"HandleNextCommandQueueItem\"><![CDATA[\r\n    if (GetBoolean(game.pov, \"commandqueueinterrupt\")) {\r\n      // STOP THE PRESS!\r\n    }\r\n    else if (TypeOf(game.pov, \"commandqueue\") = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.commandqueue)\r\n      if (queuelength > 0) {\r\n        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))\r\n        if (queuelength = 1) {\r\n          game.pov.commandqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.commandqueue, i))\r\n          }\r\n          game.pov.commandqueue = newqueue\r\n        }\r\n        if (LengthOf(thiscommand) > 0) {\r\n          HandleSingleCommand (thiscommand)\r\n        }\r\n        else {\r\n          HandleNextCommandQueueItem\r\n        }\r\n      }\r\n    }\r\n    set (game.pov, \"commandqueueinterrupt\", false)\r\n  ]]></function>\r\n```\r\n\r\n```\r\n  <function name=\"RunTurnScripts\">\r\n    if (IsGameRunning()) {\r\n      if (game.menucallback = null) {\r\n        foreach (turnscript, ObjectListSort(AllTurnScripts(), \"name\")) {\r\n          if (GetBoolean(turnscript, \"enabled\")) {\r\n            inscope = false\r\n            if (turnscript.parent = game or turnscript.parent = null) {\r\n              inscope = true\r\n            }\r\n            else {\r\n              if (Contains(turnscript.parent, game.pov)) {\r\n                inscope = true\r\n              }\r\n            }\r\n            if (inscope) {\r\n              turnscript.interrupt = false\r\n              do (turnscript, \"script\")\r\n              if (turnscript.interrupt) {\r\n                //msg (\"DEBUGGING MESSAGE: Stopping the press!\")\r\n                StopThePress\r\n              }\r\n              turnscript.interrupt = false\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n```\r\n\r\n```\r\n  <function name=\"StopThePress\">\r\n    game.pov.commandqueueinterrupt = true\r\n    game.suppressturnscripts = true\r\n  </function>\r\n```\r\n\r\n---\r\n...and it doesn't mess up the save feature.\r\n\r\n I think that uses ```start transaction``` rather than \"handling\" commands, but I'm not positive about that.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>And why would a player do that? It is just as much typing as doing it one command at a time.</p>\n</blockquote>\n<p>I can't really explain why, but I do it all the time. I've done it ever since I learned it was possible back in the 1980s.</p>\n<p>If it's Infocom, you can separate commands with <code>.</code> or <code>then</code>. So, sometimes it just feels natural.</p>\n<pre><code>You are in the Whack-A-Mole room.\nYou can see a hammer.\nYou can see a Mole.\n\n&gt;get hammer then whack mole\nTaken.\n\nDone.\nThe mole retreats into its hole.\n</code></pre>\n<hr>\n<p>When it comes to Quest, I've received quite a few emails with games-in-progress attached and a note to paste in something like \"NW.N.NE.E.CLAP.NE.NE.SE.HOP.CLAP\" to get to the point in the game where there is an issue.</p>\n<p>(I guess the walkthrough feature isn't something most people know about.)</p>\n<hr>\n<blockquote>\n<p>[Sorry - that was no actual help]</p>\n</blockquote>\n<p>Oh, that's cool.  Someone opining that whatever I'm doing might possibly be pointless is definitely helpful when I'm not thinking things through clearly.</p>\n<p>I always want people to point out such things, as they are usually true and save me tons of wasted time.</p>\n<p>:)</p>\n<hr>\n<blockquote>\n<blockquote>\n<p>\"NOT A COLOUR!!!\" The thing is shrieking,</p>\n</blockquote>\n<p>I don't think that should happen. Multiple commands on a line are put into a<code>stringlist</code> and then iterated over. If one of them triggers a get input, it should expect input from the client as normal, not from the command list.</p>\n</blockquote>\n<p>Hrmmm...</p>\n<p>I need to test this out.</p>\n<p>...but anytime I use get input once play has begun, my default switch case is <code>HandleSingleCommand(result)</code> as a way to let the player ignore the get input like they can certain show menus.</p>\n<p>Now I wonder how these two things will work together. (Exciting!)</p>\n<p>Also, <code>game.pov.commandqueue = null</code> was the first thing I tried.  I've got tons of turnscripts and stuff running in the game I'm porting, and this throws multiple errors.</p>\n<p>But pulling the command queue to paste it into the text input field with this?</p>\n<pre><code>JS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \".\"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"');\")\n</code></pre>\n<p>That is an awesome idea!</p>\n<hr>\n<p>Anyway, last night I couldn't fall asleep until I figured out how to make it work in the game I'm porting.</p>\n<p>Here's a dumb example (as my code has all sorts of extra stuff in it which would be distracting, but this example has the same functions that handle all his stuff):</p>\n<pre><code>  &lt;turnscript name=\"testerturnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      firsttime{\n        this.counter = 0\n      }\n      this.counter = this.counter + 1\n      if (this.counter % 3 = 0) {\n        msg (\"Something important printed!\")\n        this.interrupt = true\n      }\n      else {\n        msg(\"This text is not very important.\")\n      }\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"HandleNextCommandQueueItem\"&gt;&lt;![CDATA[\n    if (GetBoolean(game.pov, \"commandqueueinterrupt\")) {\n      // STOP THE PRESS!\n    }\n    else if (TypeOf(game.pov, \"commandqueue\") = \"stringlist\") {\n      queuelength = ListCount(game.pov.commandqueue)\n      if (queuelength &gt; 0) {\n        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))\n        if (queuelength = 1) {\n          game.pov.commandqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.commandqueue, i))\n          }\n          game.pov.commandqueue = newqueue\n        }\n        if (LengthOf(thiscommand) &gt; 0) {\n          HandleSingleCommand (thiscommand)\n        }\n        else {\n          HandleNextCommandQueueItem\n        }\n      }\n    }\n    set (game.pov, \"commandqueueinterrupt\", false)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"RunTurnScripts\"&gt;\n    if (IsGameRunning()) {\n      if (game.menucallback = null) {\n        foreach (turnscript, ObjectListSort(AllTurnScripts(), \"name\")) {\n          if (GetBoolean(turnscript, \"enabled\")) {\n            inscope = false\n            if (turnscript.parent = game or turnscript.parent = null) {\n              inscope = true\n            }\n            else {\n              if (Contains(turnscript.parent, game.pov)) {\n                inscope = true\n              }\n            }\n            if (inscope) {\n              turnscript.interrupt = false\n              do (turnscript, \"script\")\n              if (turnscript.interrupt) {\n                //msg (\"DEBUGGING MESSAGE: Stopping the press!\")\n                StopThePress\n              }\n              turnscript.interrupt = false\n            }\n          }\n        }\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"StopThePress\"&gt;\n    game.pov.commandqueueinterrupt = true\n    game.suppressturnscripts = true\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>...and it doesn't mess up the save feature.</p>\n<p>I think that uses <code>start transaction</code> rather than \"handling\" commands, but I'm not positive about that.</p>\n\n",
      "PostDate": "2021-05-13T15:16:21.5021664Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "93c92fa3-e6ec-4ee7-8613-fc101ae1bee7",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks a bunch, now I have had to change QuestJS to allow players to do that!\r\n\r\nIn QuestJS, just call `parser.abort()`.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks a bunch, now I have had to change QuestJS to allow players to do that!</p>\n<p>In QuestJS, just call <code>parser.abort()</code>.</p>\n\n",
      "PostDate": "2021-05-13T19:30:50.6382815Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aa8fc72f-faf4-4d52-8bfe-25d2e462823a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Hrmmm...\r\n>\r\n> I need to test this out.\r\n\r\nOK… it seems that  `get input` confuses the game. After asking the question, it executes the remaining queued commands, skipping over any parts that are inside an `on ready`. So it leaves the room with the trap in, walks around normally, but doesn't display any more room descriptions or trigger room enter scripts. Then when it finishes the queue, it expects a `get input` response from the player; after which the trap script finishes, followed by all the room descriptions and enter scripts from the remainder of the queued commands.\r\n\r\n> ...but anytime I use get input once play has begun, my default switch case is `HandleSingleCommand(result)` as a way to let the player ignore the get input like they can certain show menus.\r\n\r\n`HandleSingleCommand(result)` should be unaffected by any commands in the command queue. If one of the commands results in an extra command being called in this way, it will resolve before resuming the queue.\r\n\r\n> Also, `game.pov.commandqueue = null` was the first thing I tried. I've got tons of turnscripts and stuff running in the game I'm porting, and this throws multiple errors.\r\n\r\nCan't reproduce. Can you show an example of a game that causes an error if you use this method? I tried making a simple game using a bunch of random turnscripts that could interrupt, and I completely failed to get it to fail. Would be interested to know the situation where it has a problem.\r\n\r\nAlso, now I tested it, that JS might be better converted to:\r\n```\r\nJS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \". \"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"').select();\")\r\n```\r\nThis puts the remaining commands back in the queue, but also selects them. So if the player starts typing again in response to the trap or whatever, they will replace the queued commands with their own; but if they want to keep doing the same thing anyway, they can just hit enter.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Hrmmm...</p>\n<p>I need to test this out.</p>\n</blockquote>\n<p>OK… it seems that  <code>get input</code> confuses the game. After asking the question, it executes the remaining queued commands, skipping over any parts that are inside an <code>on ready</code>. So it leaves the room with the trap in, walks around normally, but doesn't display any more room descriptions or trigger room enter scripts. Then when it finishes the queue, it expects a <code>get input</code> response from the player; after which the trap script finishes, followed by all the room descriptions and enter scripts from the remainder of the queued commands.</p>\n<blockquote>\n<p>...but anytime I use get input once play has begun, my default switch case is <code>HandleSingleCommand(result)</code> as a way to let the player ignore the get input like they can certain show menus.</p>\n</blockquote>\n<p><code>HandleSingleCommand(result)</code> should be unaffected by any commands in the command queue. If one of the commands results in an extra command being called in this way, it will resolve before resuming the queue.</p>\n<blockquote>\n<p>Also, <code>game.pov.commandqueue = null</code> was the first thing I tried. I've got tons of turnscripts and stuff running in the game I'm porting, and this throws multiple errors.</p>\n</blockquote>\n<p>Can't reproduce. Can you show an example of a game that causes an error if you use this method? I tried making a simple game using a bunch of random turnscripts that could interrupt, and I completely failed to get it to fail. Would be interested to know the situation where it has a problem.</p>\n<p>Also, now I tested it, that JS might be better converted to:</p>\n<pre><code>JS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (game.pov.commandqueue, \". \"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"').select();\")\n</code></pre>\n<p>This puts the remaining commands back in the queue, but also selects them. So if the player starts typing again in response to the trap or whatever, they will replace the queued commands with their own; but if they want to keep doing the same thing anyway, they can just hit enter.</p>\n\n",
      "PostDate": "2021-05-13T19:48:23.9597992Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "080e8cf1-15b0-4058-8a2a-7a61a30e6e72",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(I worked around the `get input` problem now:\r\n```\r\npaused_commandqueue = game.pov.commandqueue\r\ngame.pov.commandqueue = null\r\nget input {\r\n  if (result = \"purple\") {\r\n    msg (\"Correct! You may continue!\")\r\n    game.pov.commandqueue = paused_commandqueue\r\n    HandleNextCommandQueueItem\r\n  }\r\n  else if (result = \"yellow\") {\r\n    msg (\"A good answer, but not the best. You can continue if you still have confidence.\")\r\n    game.pov.HP = game.pov.HP / 2\r\n    if (TypeOf (paused_commandqueue) = \"stringlist\")) {\r\n      JS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (paused_commandqueue, \". \"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"').select();\")\r\n    }\r\n  else {\r\n    msg (\"Ooops! Something terrible happens!\")\r\n    game.pov.parent = mysterious jail cell\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(I worked around the <code>get input</code> problem now:</p>\n<pre><code>paused_commandqueue = game.pov.commandqueue\ngame.pov.commandqueue = null\nget input {\n  if (result = \"purple\") {\n    msg (\"Correct! You may continue!\")\n    game.pov.commandqueue = paused_commandqueue\n    HandleNextCommandQueueItem\n  }\n  else if (result = \"yellow\") {\n    msg (\"A good answer, but not the best. You can continue if you still have confidence.\")\n    game.pov.HP = game.pov.HP / 2\n    if (TypeOf (paused_commandqueue) = \"stringlist\")) {\n      JS.eval(\"$('#txtCommand').val() || $('#txtCommand').val('\" + Replace(Replace (Join (paused_commandqueue, \". \"), \"\\\\\", \"\\\\\\\\\"), \"'\", \"\\\\'\") + \"').select();\")\n    }\n  else {\n    msg (\"Ooops! Something terrible happens!\")\n    game.pov.parent = mysterious jail cell\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2021-05-13T20:09:01.8531911Z",
      "LastEditDate": "2021-05-13T20:12:14.0578849Z",
      "link": null
    },
    {
      "PostId": "4f0998a2-eb6a-46a7-b915-06d2c3e9a14b",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Thanks a bunch, now I have had to change QuestJS to allow players to do that!\r\n\r\nThis made me laugh, but I promise I'm laughing with you.\r\n\r\n(I learned that this was a thing I should have already known to handle in games after reading \"Learning ZIL\" by Steve Meretzky.  Lots of good stuff in there! Most of it is already in QuestJS, in one form or another.)\r\n\r\n---\r\n> it seems that ```get input``` confuses the game.\r\n\r\nDamn and blast!\r\n\r\nI was hoping it wouldn't.\r\n\r\nI got distracted fooling around with the hint system and forgot to test it.\r\n\r\n---\r\n> Can't reproduce. Can you show an example of a game that causes an error if you use this method?\r\n\r\nLaughing maniacally. . .\r\n\r\nI'm porting a game from ZIL to Quest. To do that easily (or at least to make the process more simple), I am using delegates and and have modified ```ResolveNextName``` and all kinds of other stuff.\r\n\r\nI'm pretty sure the errors are . . .\r\n\r\nHrmm. . . I honestly have no clue what I've got going on that deleting ```game.pov.currentcommandqueue``` could break. All I know is it breaks it.\r\n\r\nOnce I've got the first act completed, I plan to post the code. So, you'll definitely get to see it within a week or three.\r\n\r\nI also expect everyone will ask why I did ***this***, and why I did ***that*** once I post this code, and I can't wait to see all the ways I could have handle things differently. (Seriously. I'm not being a smart-ass or anything.)\r\n\r\n---\r\n> This puts the remaining commands back in the queue, but also selects them. So if the player starts typing again in response to the trap or whatever, they will replace the queued commands with their own; but if they want to keep doing the same thing anyway, they can just hit enter.\r\n\r\nHot dog!\r\n\r\nI love it when a plan comes together!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Thanks a bunch, now I have had to change QuestJS to allow players to do that!</p>\n</blockquote>\n<p>This made me laugh, but I promise I'm laughing with you.</p>\n<p>(I learned that this was a thing I should have already known to handle in games after reading \"Learning ZIL\" by Steve Meretzky.  Lots of good stuff in there! Most of it is already in QuestJS, in one form or another.)</p>\n<hr>\n<blockquote>\n<p>it seems that <code>get input</code> confuses the game.</p>\n</blockquote>\n<p>Damn and blast!</p>\n<p>I was hoping it wouldn't.</p>\n<p>I got distracted fooling around with the hint system and forgot to test it.</p>\n<hr>\n<blockquote>\n<p>Can't reproduce. Can you show an example of a game that causes an error if you use this method?</p>\n</blockquote>\n<p>Laughing maniacally. . .</p>\n<p>I'm porting a game from ZIL to Quest. To do that easily (or at least to make the process more simple), I am using delegates and and have modified <code>ResolveNextName</code> and all kinds of other stuff.</p>\n<p>I'm pretty sure the errors are . . .</p>\n<p>Hrmm. . . I honestly have no clue what I've got going on that deleting <code>game.pov.currentcommandqueue</code> could break. All I know is it breaks it.</p>\n<p>Once I've got the first act completed, I plan to post the code. So, you'll definitely get to see it within a week or three.</p>\n<p>I also expect everyone will ask why I did <strong><em>this</em></strong>, and why I did <strong><em>that</em></strong> once I post this code, and I can't wait to see all the ways I could have handle things differently. (Seriously. I'm not being a smart-ass or anything.)</p>\n<hr>\n<blockquote>\n<p>This puts the remaining commands back in the queue, but also selects them. So if the player starts typing again in response to the trap or whatever, they will replace the queued commands with their own; but if they want to keep doing the same thing anyway, they can just hit enter.</p>\n</blockquote>\n<p>Hot dog!</p>\n<p>I love it when a plan comes together!</p>\n\n",
      "PostDate": "2021-05-13T20:11:07.6827764Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b17dd122-07df-4556-9d3d-cfb96dfd4922",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Damn and blast!\r\n\r\nDon't worry :) Look at the code I posted above (probably at the same time you were writing that response!)\r\n\r\nI just edited it to show how it can handle different circumstances",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Damn and blast!</p>\n</blockquote>\n<p>Don't worry :) Look at the code I posted above (probably at the same time you were writing that response!)</p>\n<p>I just edited it to show how it can handle different circumstances</p>\n\n",
      "PostDate": "2021-05-13T20:14:23.9527816Z",
      "LastEditDate": "2021-05-13T20:15:01.4096684Z",
      "link": null
    },
    {
      "PostId": "5110e669-afc7-4983-8789-d55ccaf2975c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Opinion: At the end of `ResolveNextName`, where it goes: \r\n```\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      //\r\n      //Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\r\n      //This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\r\n      //- KV, 2018/05/25\r\n      game.runturnscripts = true\r\n      FinishTurn\r\n      HandleNextCommandQueueItem\r\n    }\r\n  ]]></function>\r\n```\r\nit should be:\r\n```\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      //\r\n      //Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\r\n      //This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\r\n      //- KV, 2018/05/25\r\n      on ready {\r\n        game.runturnscripts = true\r\n        FinishTurn\r\n        on ready {\r\n          HandleNextCommandQueueItem\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n```\r\nin order to prevent `get input` in the command from screwing up either pending turnscripts, or other commands in the command queue.",
      "EditableFormat": "markdown",
      "HTML": "<p>Opinion: At the end of <code>ResolveNextName</code>, where it goes:</p>\n<pre><code>      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      //\n      //Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\n      //This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\n      //- KV, 2018/05/25\n      game.runturnscripts = true\n      FinishTurn\n      HandleNextCommandQueueItem\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p>it should be:</p>\n<pre><code>      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      //\n      //Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\n      //This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\n      //- KV, 2018/05/25\n      on ready {\n        game.runturnscripts = true\n        FinishTurn\n        on ready {\n          HandleNextCommandQueueItem\n        }\n      }\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p>in order to prevent <code>get input</code> in the command from screwing up either pending turnscripts, or other commands in the command queue.</p>\n\n",
      "PostDate": "2021-05-13T20:19:31.5585311Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a45a6bef-5fe6-423c-ae3f-4904840cb26e",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> At the end of ```ResolveNextName```, where it goes [...] it should be [...] in order to prevent ```get input``` in the command from screwing up either pending turnscripts, or other commands in the command queue.\r\n\r\nBrilliant!  That's a very, very good idea!\r\n\r\n**@Pixie**, how do we test that thoroughly? I think that is technically a bug fix.\r\n\r\n---\r\nSpeaking of getting input, here's a small peek at a bit of what I've done to poor Quest to port easily from ZIL:\r\n\r\nhttps://textadventures.co.uk/forum/quest/topic/bmaft_5vjee0zainnm6tkw/asking-yes-or-no-questions-without-get-input-or-ask-a-complete-waste-of-t",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>At the end of <code>ResolveNextName</code>, where it goes [...] it should be [...] in order to prevent <code>get input</code> in the command from screwing up either pending turnscripts, or other commands in the command queue.</p>\n</blockquote>\n<p>Brilliant!  That's a very, very good idea!</p>\n<p><strong>@Pixie</strong>, how do we test that thoroughly? I think that is technically a bug fix.</p>\n<hr>\n<p>Speaking of getting input, here's a small peek at a bit of what I've done to poor Quest to port easily from ZIL:</p>\n<p>https://textadventures.co.uk/forum/quest/topic/bmaft_5vjee0zainnm6tkw/asking-yes-or-no-questions-without-get-input-or-ask-a-complete-waste-of-t</p>\n\n",
      "PostDate": "2021-05-13T20:35:37.6514522Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "326ffb09-b8d1-4f48-a5c2-51f5659c6a38",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hehehe.\r\n\r\nCheck this out.\r\n\r\nIf you just enter \"TAKE\" or \"GET\", it will trigger a script to ask you what you want to get. If you enter an object, it tries to take it. If you enter something other than an object, it handles your text as a command.\r\n\r\n\r\n**UPDATED**\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"alternate input getter\">\r\n    <gameid>400426c7-e5f8-4f10-8702-9324e15f55c6</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n    <start type=\"script\">\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[<br/>This is a white room with black curtains.]]></description>\r\n    <firstenter type=\"script\">\r\n      msg (\"PLEASE ENTER YOUR NAME\")\r\n      game.awaiting_reply = 1\r\n      GetInput2\r\n      on ready {\r\n        TextCatcher\r\n      }\r\n    </firstenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"red herring\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>It's a herring, and it's red.</look>\r\n    </object>\r\n    <object name=\"black curtains\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"plural\" />\r\n      <scenery />\r\n      <look>The curtains aren't important.{notfirst: Get on with game!}</look>\r\n    </object>\r\n  </object>\r\n  <command name=\"yes_cmd\">\r\n    <pattern>yes;y;affirmative</pattern>\r\n    <script>\r\n      if (not HasAttribute(game, \"awaiting_reply\")) {\r\n        game.awaiting_reply = 0\r\n      }\r\n      switch (game.awaiting_reply) {\r\n        case (2) {\r\n          msg (\"Well, hello, {game.pname}!  I'm a computer! Nice to meet you!\")\r\n          msg (\"\")\r\n          msg (\"Now, let's get the story!\")\r\n          msg (\"\")\r\n          ShowRoomDescription\r\n        }\r\n        default {\r\n          msg (\"You sure do sound positive!\")\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"no_cmd\">\r\n    <pattern>no;negative;n</pattern>\r\n    <script>\r\n      if (not HasAttribute(game, \"awaiting_reply\")) {\r\n        game.awaiting_reply = 0\r\n      }\r\n      switch (game.awaiting_reply) {\r\n        case (2) {\r\n          msg (\"Okay. Forget that then. The story begins. . .\")\r\n          game.pname = null\r\n        }\r\n        default {\r\n          msg (\"You sure do sound negative. . .\")\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"take_helper\">\r\n    <pattern>take;get;grab</pattern>\r\n    <script><![CDATA[\r\n      msg (\"What do you want to \" + game.pov.currentcommand + \"?\")\r\n      GetInput2\r\n      on ready {\r\n        o = ResolveNameInternal(\"object\", game.giresult, \"object\")\r\n        if (o <> null) {\r\n          HandleSingleCommand (game.pov.currentcommand + \" \" + game.giresult)\r\n        }\r\n        else {\r\n          msg (\"<br/>> \" + game.giresult)\r\n          HandleSingleCommand (game.giresult)\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <function name=\"ResolveNextName\"><![CDATA[\r\n    resolvedall = false\r\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\r\n    if (queuetype = \"stringlist\") {\r\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\r\n      if (queuelength > 0) {\r\n        // Pop next variable off the queue\r\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\r\n        if (queuelength = 1) {\r\n          game.pov.currentcommandvarlistqueue = null\r\n        }\r\n        else {\r\n          newqueue = NewStringList()\r\n          for (i, 1, queuelength - 1) {\r\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\r\n          }\r\n          game.pov.currentcommandvarlistqueue = newqueue\r\n        }\r\n        // Resolve variable\r\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n        if (value <> \"\") {\r\n          result = null\r\n          resolvinglist = false\r\n          // This is to resolve issue 626\r\n          if (StartsWith(var, \"objectexit\")) {\r\n            result = ResolveName(var, value, \"exit\")\r\n          }\r\n          if (result = null) {\r\n            if (StartsWith(var, \"object\")) {\r\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\r\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\r\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\r\n                game.pov.currentcommandpendingvariable = var\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\r\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\r\n                game.pov.currentcommandpendingvariable = var\r\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\r\n                ResolveNameList (value, \"object\")\r\n                resolvinglist = true\r\n              }\r\n              else {\r\n                result = ResolveName(var, value, \"object\")\r\n              }\r\n            }\r\n            else if (StartsWith(var, \"exit\")) {\r\n              result = ResolveName(var, value, \"exit\")\r\n            }\r\n            else if (StartsWith(var, \"text\")) {\r\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\r\n            }\r\n            else {\r\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\r\n            }\r\n          }\r\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\r\n          if (result = null) {\r\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\r\n              UnresolvedCommand (value, var)\r\n            }\r\n          }\r\n          else {\r\n            AddToResolvedNames (var, result)\r\n          }\r\n        }\r\n        else {\r\n          ResolveNextName\r\n        }\r\n      }\r\n      else {\r\n        resolvedall = true\r\n      }\r\n    }\r\n    else if (queuetype = \"null\") {\r\n      resolvedall = true\r\n    }\r\n    else {\r\n      error (\"Invalid queue type\")\r\n    }\r\n    if (resolvedall) {\r\n      // All the objects have been resolved, so now we can actually do the command\r\n      // TO DO: game.lastobjects should be game.pov.lastobjects\r\n      game.lastobjects = game.pov.currentcommandresolvedobjects\r\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\r\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\r\n        if (LengthOf(game.pov.currentcommand) > 0) {\r\n          start transaction (game.pov.currentcommand)\r\n        }\r\n      }\r\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n        // TO DO: game.unresolved* should be game.pov.unresolved*\r\n        game.unresolvedcommand = null\r\n        game.unresolvedcommandvarlist = null\r\n        game.unresolvedcommandkey = null\r\n      }\r\n      if (DictionaryContains(game.pov.currentcommandresolvedelements, \"object\")) {\r\n        game.text_processor_this = ObjectDictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\r\n      }\r\n      else if (DictionaryContains(game.pov.currentcommandresolvedelements, \"object1\")) {\r\n        game.text_processor_this = ObjectDictionaryItem(game.pov.currentcommandresolvedelements, \"object1\")\r\n      }\r\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n        // This is the bit that actually runs the commands\r\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n      }\r\n      //\r\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\r\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\r\n      // - KV, 2018/05/25\r\n      on ready {\r\n        game.runturnscripts = true\r\n        FinishTurn\r\n        on ready {\r\n          HandleNextCommandQueueItem\r\n        }\r\n      }\r\n    }\r\n  ]]></function>\r\n  <function name=\"GetInput2\">\r\n    paused_commandqueue = game.pov.commandqueue\r\n    game.pov.commandqueue = null\r\n    get input {\r\n      game.giresult = result\r\n    }\r\n    on ready {\r\n      game.pov.commandqueue = paused_commandqueue\r\n      HandleNextCommandQueueItem\r\n    }\r\n  </function>\r\n  <function name=\"TextCatcher\"><![CDATA[\r\n    text = game.giresult\r\n    if (not HasAttribute(game, \"awaiting_reply\")) {\r\n      game.awaiting_reply = 0\r\n    }\r\n    switch (game.awaiting_reply) {\r\n      case (1) {\r\n        game.pname = text\r\n        msg (\"Would you like me to save that name (\" + text + \") to my database?\")\r\n        game.awaiting_reply = 2\r\n        if (GetObject(\"noreply\") <> null) {\r\n          destroy (\"noreply\")\r\n        }\r\n        SetTurnTimeoutID (1, \"noreply\") {\r\n          game.awaiting_reply = 0\r\n        }\r\n      }\r\n      default {\r\n        // msg(\"I didn't understand your command.\")\r\n        HandleSingleCommand (text)\r\n      }\r\n    }\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Hehehe.</p>\n<p>Check this out.</p>\n<p>If you just enter \"TAKE\" or \"GET\", it will trigger a script to ask you what you want to get. If you enter an object, it tries to take it. If you enter something other than an object, it handles your text as a command.</p>\n<p><strong>UPDATED</strong></p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"alternate input getter\"&gt;\n    &lt;gameid&gt;400426c7-e5f8-4f10-8702-9324e15f55c6&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n    &lt;start type=\"script\"&gt;\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;br/&gt;This is a white room with black curtains.]]&gt;&lt;/description&gt;\n    &lt;firstenter type=\"script\"&gt;\n      msg (\"PLEASE ENTER YOUR NAME\")\n      game.awaiting_reply = 1\n      GetInput2\n      on ready {\n        TextCatcher\n      }\n    &lt;/firstenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"red herring\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;It's a herring, and it's red.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"black curtains\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"plural\" /&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;The curtains aren't important.{notfirst: Get on with game!}&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"yes_cmd\"&gt;\n    &lt;pattern&gt;yes;y;affirmative&lt;/pattern&gt;\n    &lt;script&gt;\n      if (not HasAttribute(game, \"awaiting_reply\")) {\n        game.awaiting_reply = 0\n      }\n      switch (game.awaiting_reply) {\n        case (2) {\n          msg (\"Well, hello, {game.pname}!  I'm a computer! Nice to meet you!\")\n          msg (\"\")\n          msg (\"Now, let's get the story!\")\n          msg (\"\")\n          ShowRoomDescription\n        }\n        default {\n          msg (\"You sure do sound positive!\")\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"no_cmd\"&gt;\n    &lt;pattern&gt;no;negative;n&lt;/pattern&gt;\n    &lt;script&gt;\n      if (not HasAttribute(game, \"awaiting_reply\")) {\n        game.awaiting_reply = 0\n      }\n      switch (game.awaiting_reply) {\n        case (2) {\n          msg (\"Okay. Forget that then. The story begins. . .\")\n          game.pname = null\n        }\n        default {\n          msg (\"You sure do sound negative. . .\")\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"take_helper\"&gt;\n    &lt;pattern&gt;take;get;grab&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      msg (\"What do you want to \" + game.pov.currentcommand + \"?\")\n      GetInput2\n      on ready {\n        o = ResolveNameInternal(\"object\", game.giresult, \"object\")\n        if (o &lt;&gt; null) {\n          HandleSingleCommand (game.pov.currentcommand + \" \" + game.giresult)\n        }\n        else {\n          msg (\"&lt;br/&gt;&gt; \" + game.giresult)\n          HandleSingleCommand (game.giresult)\n        }\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"ResolveNextName\"&gt;&lt;![CDATA[\n    resolvedall = false\n    queuetype = TypeOf(game.pov, \"currentcommandvarlistqueue\")\n    if (queuetype = \"stringlist\") {\n      queuelength = ListCount(game.pov.currentcommandvarlistqueue)\n      if (queuelength &gt; 0) {\n        // Pop next variable off the queue\n        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)\n        if (queuelength = 1) {\n          game.pov.currentcommandvarlistqueue = null\n        }\n        else {\n          newqueue = NewStringList()\n          for (i, 1, queuelength - 1) {\n            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))\n          }\n          game.pov.currentcommandvarlistqueue = newqueue\n        }\n        // Resolve variable\n        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n        if (value &lt;&gt; \"\") {\n          result = null\n          resolvinglist = false\n          // This is to resolve issue 626\n          if (StartsWith(var, \"objectexit\")) {\n            result = ResolveName(var, value, \"exit\")\n          }\n          if (result = null) {\n            if (StartsWith(var, \"object\")) {\n              if (GetBoolean(game.pov.currentcommandpattern, \"allow_all\")) {\n                scope = FilterByAttribute(GetScope(\"object\", \"\", \"object\"), \"scenery\", false)\n                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, \"not_all\", true))\n                game.pov.currentcommandpendingvariable = var\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else if (HasScript(game.pov.currentcommandpattern, \"multipleobjects\")) {\n                game.pov.currentcommandpendingobjectlist = NewObjectList()\n                game.pov.currentcommandpendingvariable = var\n                do (game.pov.currentcommandpattern, \"multipleobjects\")\n                ResolveNameList (value, \"object\")\n                resolvinglist = true\n              }\n              else {\n                result = ResolveName(var, value, \"object\")\n              }\n            }\n            else if (StartsWith(var, \"exit\")) {\n              result = ResolveName(var, value, \"exit\")\n            }\n            else if (StartsWith(var, \"text\")) {\n              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)\n            }\n            else {\n              error (\"Unhandled command variable '\" + var + \"' - command variable names must begin with 'object', 'exit' or 'text'\")\n            }\n          }\n          // at this point, ResolveName has returned - either an object name, unresolved, or pending\n          if (result = null) {\n            if ((not resolvinglist) and LengthOf(GetString(game.pov, \"currentcommandpendingvariable\")) = 0) {\n              UnresolvedCommand (value, var)\n            }\n          }\n          else {\n            AddToResolvedNames (var, result)\n          }\n        }\n        else {\n          ResolveNextName\n        }\n      }\n      else {\n        resolvedall = true\n      }\n    }\n    else if (queuetype = \"null\") {\n      resolvedall = true\n    }\n    else {\n      error (\"Invalid queue type\")\n    }\n    if (resolvedall) {\n      // All the objects have been resolved, so now we can actually do the command\n      // TO DO: game.lastobjects should be game.pov.lastobjects\n      game.lastobjects = game.pov.currentcommandresolvedobjects\n      if (not DictionaryContains(game.pov.currentcommandresolvedelements, \"multiple\")) {\n        dictionary add (game.pov.currentcommandresolvedelements, \"multiple\", false)\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isundo\")) {\n        if (LengthOf(game.pov.currentcommand) &gt; 0) {\n          start transaction (game.pov.currentcommand)\n        }\n      }\n      if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n        // TO DO: game.unresolved* should be game.pov.unresolved*\n        game.unresolvedcommand = null\n        game.unresolvedcommandvarlist = null\n        game.unresolvedcommandkey = null\n      }\n      if (DictionaryContains(game.pov.currentcommandresolvedelements, \"object\")) {\n        game.text_processor_this = ObjectDictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\n      }\n      else if (DictionaryContains(game.pov.currentcommandresolvedelements, \"object1\")) {\n        game.text_processor_this = ObjectDictionaryItem(game.pov.currentcommandresolvedelements, \"object1\")\n      }\n      if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n        // This is the bit that actually runs the commands\n        do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n      }\n      //\n      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.\n      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.\n      // - KV, 2018/05/25\n      on ready {\n        game.runturnscripts = true\n        FinishTurn\n        on ready {\n          HandleNextCommandQueueItem\n        }\n      }\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"GetInput2\"&gt;\n    paused_commandqueue = game.pov.commandqueue\n    game.pov.commandqueue = null\n    get input {\n      game.giresult = result\n    }\n    on ready {\n      game.pov.commandqueue = paused_commandqueue\n      HandleNextCommandQueueItem\n    }\n  &lt;/function&gt;\n  &lt;function name=\"TextCatcher\"&gt;&lt;![CDATA[\n    text = game.giresult\n    if (not HasAttribute(game, \"awaiting_reply\")) {\n      game.awaiting_reply = 0\n    }\n    switch (game.awaiting_reply) {\n      case (1) {\n        game.pname = text\n        msg (\"Would you like me to save that name (\" + text + \") to my database?\")\n        game.awaiting_reply = 2\n        if (GetObject(\"noreply\") &lt;&gt; null) {\n          destroy (\"noreply\")\n        }\n        SetTurnTimeoutID (1, \"noreply\") {\n          game.awaiting_reply = 0\n        }\n      }\n      default {\n        // msg(\"I didn't understand your command.\")\n        HandleSingleCommand (text)\n      }\n    }\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-05-14T02:29:29.6080654Z",
      "LastEditDate": "2021-05-14T02:37:18.6675589Z",
      "link": null
    },
    {
      "PostId": "229cf1a0-f8bb-4564-8a90-214865d5122c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Edit edit edit … so many silly typos in this code\r\n\r\n> If you just enter \"TAKE\" or \"GET\", it will trigger a script to ask you what you want to get. If you enter an object, it tries to take it. If you enter something other than an object, it handles your text as a command.\r\n\r\nThat's pretty neat, but… I think this will require a modified object-resolution script. Otherwise, I think you could end up with something like this:\r\n\r\n> ==> **put bunny in box**\r\n> OK\r\n>\r\n> ==> **take**\r\n> What do you want to take?\r\n>\r\n> ==> **it**\r\n> Which \"it\" do you mean?\r\n>   1. Bunny\r\n>   2. Box\r\n>\r\n> Unknown command: it.\r\n>\r\n> ==> **1**\r\n> What do you want to take?\r\n>\r\n> ==>\r\n\r\n(I don't remember the phrasing of all of the messages, but you see what I mean)\r\n\r\nThe problem being that the default `ResolveNameInternal` will return an object if you enter an object name (works fine), or return null if you entered a command (so it tries to parse the command, works fine), but if you entered something that matches *multiple* names, it displays a disambiguation menu and returns `null`. This means that your script attempts to interpret the player's input as a command, and gives an error message.\r\n\r\nIf they then choose a menu option (whether by typing the appropriate number or clicking), the menu response script will attempt to resolve any outstanding objects and then run `game.pov.currentcommandpattern`. So this time, it's running `take_helper` again, with an `object` parameter that it didn't ask for. Which then asks you to choose another object, even though you just chose one.\r\n\r\nWorse would be if you entered a partial name such as \"n\". Because it could display a disambiguation menu, and then go north. This means that it gets as far as running `HandleSingleCommandPattern`, so you end up with something like:\r\n\r\n> ==> **take**\r\n> What do you want to take?\r\n>\r\n> ==> **ne**\r\n> Which \"ne\" do you mean?\r\n>   1. Needle\r\n>   2. Newt\r\n>   3. Nebuchadnezzar's cigar case\r\n>\r\n> You can't go that way.\r\n>\r\n> ==> **2**\r\n>\r\n> `Error: undefined variable exit in expression exit.visible`\r\n\r\nBecause this time, `game.pov.currentcommand`and `game.pov.currentcommandpattern` have been successfully changed to be `\"ne\"` and `go` respectively, but the menu hasn't been cancelled. So the response script for the disambiguation menu attempts to pass the parameter `object = newt` to the `go` command, which is expecting an `exit` parameter, not `object`, and therefore fails with an undefined variable error.\r\n\r\nI'm working off the top of my head here, haven't actually tested it… but I'm pretty confident that this script as it stands will only work correctly in a game that doesn't allow disambiguation of object names.",
      "EditableFormat": "markdown",
      "HTML": "<p>Edit edit edit … so many silly typos in this code</p>\n<blockquote>\n<p>If you just enter \"TAKE\" or \"GET\", it will trigger a script to ask you what you want to get. If you enter an object, it tries to take it. If you enter something other than an object, it handles your text as a command.</p>\n</blockquote>\n<p>That's pretty neat, but… I think this will require a modified object-resolution script. Otherwise, I think you could end up with something like this:</p>\n<blockquote>\n<p>==&gt; <strong>put bunny in box</strong><br>\nOK</p>\n<p>==&gt; <strong>take</strong><br>\nWhat do you want to take?</p>\n<p>==&gt; <strong>it</strong><br>\nWhich \"it\" do you mean?</p>\n<ol>\n<li>Bunny</li>\n<li>Box</li>\n</ol>\n<p>Unknown command: it.</p>\n<p>==&gt; <strong>1</strong><br>\nWhat do you want to take?</p>\n<p>==&gt;</p>\n</blockquote>\n<p>(I don't remember the phrasing of all of the messages, but you see what I mean)</p>\n<p>The problem being that the default <code>ResolveNameInternal</code> will return an object if you enter an object name (works fine), or return null if you entered a command (so it tries to parse the command, works fine), but if you entered something that matches <em>multiple</em> names, it displays a disambiguation menu and returns <code>null</code>. This means that your script attempts to interpret the player's input as a command, and gives an error message.</p>\n<p>If they then choose a menu option (whether by typing the appropriate number or clicking), the menu response script will attempt to resolve any outstanding objects and then run <code>game.pov.currentcommandpattern</code>. So this time, it's running <code>take_helper</code> again, with an <code>object</code> parameter that it didn't ask for. Which then asks you to choose another object, even though you just chose one.</p>\n<p>Worse would be if you entered a partial name such as \"n\". Because it could display a disambiguation menu, and then go north. This means that it gets as far as running <code>HandleSingleCommandPattern</code>, so you end up with something like:</p>\n<blockquote>\n<p>==&gt; <strong>take</strong><br>\nWhat do you want to take?</p>\n<p>==&gt; <strong>ne</strong><br>\nWhich \"ne\" do you mean?</p>\n<ol>\n<li>Needle</li>\n<li>Newt</li>\n<li>Nebuchadnezzar's cigar case</li>\n</ol>\n<p>You can't go that way.</p>\n<p>==&gt; <strong>2</strong></p>\n<p><code>Error: undefined variable exit in expression exit.visible</code></p>\n</blockquote>\n<p>Because this time, <code>game.pov.currentcommand</code>and <code>game.pov.currentcommandpattern</code> have been successfully changed to be <code>\"ne\"</code> and <code>go</code> respectively, but the menu hasn't been cancelled. So the response script for the disambiguation menu attempts to pass the parameter <code>object = newt</code> to the <code>go</code> command, which is expecting an <code>exit</code> parameter, not <code>object</code>, and therefore fails with an undefined variable error.</p>\n<p>I'm working off the top of my head here, haven't actually tested it… but I'm pretty confident that this script as it stands will only work correctly in a game that doesn't allow disambiguation of object names.</p>\n\n",
      "PostDate": "2021-05-14T18:43:56.8849271Z",
      "LastEditDate": "2021-05-14T18:51:38.7765248Z",
      "link": null
    },
    {
      "PostId": "acac0e78-c59f-42f3-80f8-659c0e56b768",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A more logical approach, I think, would be checking if the input matches a command first. For example, have your helper command save the command that it was trying to execute, and enable a command with pattern `#object#` that pushes its parameter into the saved command.\r\n\r\nSomething like…\r\n```\r\n  <!-- This command catches a single command such as \"take\", and responds by enabling the 'catchall' command -->\r\n  <command name=\"take_helper\">\r\n    <pattern>take;get;grab</pattern>\r\n    <script><![CDATA[\r\n      msg (\"What do you want to \" + game.pov.currentcommand + \"?\")\r\n      catchall.command = game.pov.currentcommand\r\n      RemoveObject (catchall)\r\n    ]]></script>\r\n  </command>\r\n\r\n  <!-- this matches a command such as \"sandwich\" or \"teddy bear\" that is just an object name -->\r\n  <!-- It will always have the lowest match strength of any command, as it is entirely parameters -->\r\n  <command name=\"catchall\">\r\n    <pattern>#text#</pattern>\r\n    <script>\r\n      HandleSingleCommand (this.command + \" \" + text)\r\n    </script>\r\n  </command>\r\n\r\n  <!-- this turnscript will disable 'catchall' again as soon as the player enters something which matches some command's pattern -->\r\n  <turnscript name=\"cancel_catchall\">\r\n    <enabled />\r\n    <script>\r\n      if (HasObject (game.pov, \"currentcommandpattern\")) {\r\n        if (not game.pov.currentcommandpattern = take_helper) {\r\n          AddToInventory (catchall)\r\n        }\r\n      }\r\n  </turnscript>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>A more logical approach, I think, would be checking if the input matches a command first. For example, have your helper command save the command that it was trying to execute, and enable a command with pattern <code>#object#</code> that pushes its parameter into the saved command.</p>\n<p>Something like…</p>\n<pre><code>  &lt;!-- This command catches a single command such as \"take\", and responds by enabling the 'catchall' command --&gt;\n  &lt;command name=\"take_helper\"&gt;\n    &lt;pattern&gt;take;get;grab&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      msg (\"What do you want to \" + game.pov.currentcommand + \"?\")\n      catchall.command = game.pov.currentcommand\n      RemoveObject (catchall)\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n\n  &lt;!-- this matches a command such as \"sandwich\" or \"teddy bear\" that is just an object name --&gt;\n  &lt;!-- It will always have the lowest match strength of any command, as it is entirely parameters --&gt;\n  &lt;command name=\"catchall\"&gt;\n    &lt;pattern&gt;#text#&lt;/pattern&gt;\n    &lt;script&gt;\n      HandleSingleCommand (this.command + \" \" + text)\n    &lt;/script&gt;\n  &lt;/command&gt;\n\n  &lt;!-- this turnscript will disable 'catchall' again as soon as the player enters something which matches some command's pattern --&gt;\n  &lt;turnscript name=\"cancel_catchall\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      if (HasObject (game.pov, \"currentcommandpattern\")) {\n        if (not game.pov.currentcommandpattern = take_helper) {\n          AddToInventory (catchall)\n        }\n      }\n  &lt;/turnscript&gt;\n</code></pre>\n\n",
      "PostDate": "2021-05-14T19:02:26.92292Z",
      "LastEditDate": "2021-05-14T19:08:26.1755701Z",
      "link": null
    },
    {
      "PostId": "dcf45091-7e66-4a84-8162-966930cbcde5",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I can safely say that I am scatter-brained!\r\n\r\n:)\r\n\r\nI forgot all about this thread.\r\n\r\nThere's good stuff here. There's a [bug fix](https://textadventures.co.uk/forum/quest/topic/ddfqjgy9ykejwvjwqfghcw/easiest-way-to-interrupt-the-command-queue#5110e669-afc7-4983-8789-d55ccaf2975c), and I need to test mrangel's code in that last post.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I can safely say that I am scatter-brained!</p>\n<p>:)</p>\n<p>I forgot all about this thread.</p>\n<p>There's good stuff here. There's a <a href=\"https://textadventures.co.uk/forum/quest/topic/ddfqjgy9ykejwvjwqfghcw/easiest-way-to-interrupt-the-command-queue#5110e669-afc7-4983-8789-d55ccaf2975c\">bug fix</a>, and I need to test mrangel's code in that last post.</p>\n\n",
      "PostDate": "2021-06-13T05:51:58.6883775Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
