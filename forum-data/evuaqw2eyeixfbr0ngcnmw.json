{
  "Topic": {
    "TopicId": "evuaqw2eyeixfbr0ngcnmw",
    "ForumId": "10",
    "Title": "Question about custom command pane",
    "LastUpdated": "2018-03-25T08:11:21.2897694Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "afb0a6a4-7692-4f19-aaf4-9fd613c3a121",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I added a custom command pane to my game interface and populated it with ```JS.SetCommands```; now I'd want it to have 2 behaviours:\r\na) It should pass everything I click to a function that will handle it instead of taking it as a direct command;\r\nb) Commands should be enabled or disabled according to the situation: e. g., if there is nothing that can be opened \"Open\" should be disabled.\r\nHow could I make the custom command pane do so?\r\nThanks.",
      "EditableFormat": "markdown",
      "HTML": "<p>I added a custom command pane to my game interface and populated it with <code>JS.SetCommands</code>; now I'd want it to have 2 behaviours:<br>\na) It should pass everything I click to a function that will handle it instead of taking it as a direct command;<br>\nb) Commands should be enabled or disabled according to the situation: e. g., if there is nothing that can be opened \"Open\" should be disabled.<br>\nHow could I make the custom command pane do so?<br>\nThanks.</p>\n\n",
      "PostDate": "2018-03-25T08:11:21.2897694Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b093f117-4bab-4d18-8267-8ecb02607a89",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Cool thing. I have absolutely no idea how, or even if, it's possible but I'll sure be popping in here every now and then to see if someone has answered! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Cool thing. I have absolutely no idea how, or even if, it's possible but I'll sure be popping in here every now and then to see if someone has answered!</p>\n\n",
      "PostDate": "2018-03-25T13:57:35.6176999Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2e36fcba-ab9d-4bd3-bd3f-9c0f79e8cbda",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> a) It should pass everything I click to a function that will handle it instead of taking it as a direct command;\r\n\r\nAs far as I know, that's not what the custom command pane is for. I suspect that creating your own custom pane will be easier than modifying one of the built-in ones to behave in a completely different way.\r\n\r\nI can see ways to do it, but that would be a pretty big modification.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>a) It should pass everything I click to a function that will handle it instead of taking it as a direct command;</p>\n</blockquote>\n<p>As far as I know, that's not what the custom command pane is for. I suspect that creating your own custom pane will be easier than modifying one of the built-in ones to behave in a completely different way.</p>\n<p>I can see ways to do it, but that would be a pretty big modification.</p>\n\n",
      "PostDate": "2018-03-25T14:24:04.6531051Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "97657831-5da8-443b-b4af-c0b686ec7297",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> As far as I know, that's not what the custom command pane is for. I suspect that creating your own custom pane will be easier than modifying one of the built-in ones to behave in a completely different way.\r\n\r\nHumpf - I should have known that. Well, I found <a href=\"https://github.com/ThePix/quest/wiki/Advanced-UI-Part-03:-New-Button-Pane\">this tutorial</a> by The Pixie about creating a custom button pane. Using the custom command pane provided by Quest would have required less fiddling with CSS and HTML, but I'll take it as it comes. So, after creating a custom button pane as shown in the tutorial, how can I disable or enable selectively its buttons?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>As far as I know, that's not what the custom command pane is for. I suspect that creating your own custom pane will be easier than modifying one of the built-in ones to behave in a completely different way.</p>\n</blockquote>\n<p>Humpf - I should have known that. Well, I found <a href=\"https://github.com/ThePix/quest/wiki/Advanced-UI-Part-03:-New-Button-Pane\">this tutorial</a> by The Pixie about creating a custom button pane. Using the custom command pane provided by Quest would have required less fiddling with CSS and HTML, but I'll take it as it comes. So, after creating a custom button pane as shown in the tutorial, how can I disable or enable selectively its buttons?</p>\n\n",
      "PostDate": "2018-03-25T15:40:07.9690019Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "730b4733-3ea9-4e0e-8e33-a47b6b913762",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can show how to modify which commands are displayed in the Commands pane during play.\r\n\r\n---\r\nWhy do you want it to behave differently when clicking a command from that pane?",
      "EditableFormat": "markdown",
      "HTML": "<p>I can show how to modify which commands are displayed in the Commands pane during play.</p>\n<hr>\n<p>Why do you want it to behave differently when clicking a command from that pane?</p>\n\n",
      "PostDate": "2018-03-25T16:32:25.8714981Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9bf19894-b3c6-445b-bf6d-580795ef02bc",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to build an interface like the SCUMM that was used in old LucasArts' adventures, where disabled commands appeared grayed out. I'm just wondering if Quest could give me the same look & feel.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to build an interface like the SCUMM that was used in old LucasArts' adventures, where disabled commands appeared grayed out. I'm just wondering if Quest could give me the same look &amp; feel.</p>\n\n",
      "PostDate": "2018-03-25T16:44:19.207274Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e26087d0-6d3a-41f3-9d58-2bf285a25af2",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In this example game, the JUMP command only shows up in the pane when you are in the second room.\r\n\r\n---\r\nYou control what is displayed in the commands pane in this example my modifying the string attribute: ```game.pane_commands```.\r\n\r\nI added the functions to make it easier while scripting.  I try to do any complicated coding in functions, that way everything else is a breeze.\r\n\r\nThere are numerous ways to do this, too.  This seemed to be the easiest overall.\r\n\r\n---\r\n\r\n```xml\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Command Pane\">\r\n    <gameid>17f0e962-ffb7-4afa-9206-6258b00ef646</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <commandpane />\r\n    <start type=\"script\">\r\n    </start>\r\n    <inituserinterface type=\"script\">\r\n      if (not HasAttribute(game,\"pane_commands\")) {\r\n        game.pane_commands = \"Look;Wait;Jump\"\r\n      }\r\n      JS.setCommands (game.pane_commands)\r\n    </inituserinterface>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforeenter type=\"script\">\r\n    </beforeenter>\r\n    <enter type=\"script\">\r\n      RemovePaneCommand (\"jump\")\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"north\" to=\"second room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"second room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforeenter type=\"script\">\r\n      AddPaneCommand (\"Jump\")\r\n    </beforeenter>\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <function name=\"AddPaneCommand\" parameters=\"cmd\">\r\n    list = Split(game.pane_commands)\r\n    exists = false\r\n    foreach (c, list) {\r\n      if (LCase(c) = LCase(cmd)) {\r\n        exists = true\r\n      }\r\n    }\r\n    if (not exists) {\r\n      game.pane_commands = game.pane_commands + \";\" + cmd\r\n    }\r\n    SetPaneCommands\r\n  </function>\r\n  <function name=\"RemovePaneCommand\" parameters=\"cmd\">\r\n    list = Split(game.pane_commands)\r\n    foreach (c, list) {\r\n      if (LCase(c) = LCase(cmd)) {\r\n        cmd = \";\" + c\r\n        game.pane_commands = Replace(game.pane_commands, cmd,\"\")\r\n      }\r\n    }\r\n    SetPaneCommands\r\n  </function>\r\n  <function name=\"SetPaneCommands\">\r\n    JS.setCommands (game.pane_commands)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n\r\n\r\n\r\n---\r\nGreying out disabled commands wouldn't be very complicated, I don't think, but that depends on what you mean by \"disabled\".\r\n\r\nIf you mean commands that output, \"I didn't understand your command.\"\r\n... that could be done.\r\n\r\nIf you mean commands that output: \"You can't do that.\"\r\n...that sounds quite difficult.",
      "EditableFormat": "markdown",
      "HTML": "<p>In this example game, the JUMP command only shows up in the pane when you are in the second room.</p>\n<hr>\n<p>You control what is displayed in the commands pane in this example my modifying the string attribute: <code>game.pane_commands</code>.</p>\n<p>I added the functions to make it easier while scripting.  I try to do any complicated coding in functions, that way everything else is a breeze.</p>\n<p>There are numerous ways to do this, too.  This seemed to be the easiest overall.</p>\n<hr>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Command Pane\"&gt;\n    &lt;gameid&gt;17f0e962-ffb7-4afa-9206-6258b00ef646&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;commandpane /&gt;\n    &lt;start type=\"script\"&gt;\n    &lt;/start&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n      if (not HasAttribute(game,\"pane_commands\")) {\n        game.pane_commands = \"Look;Wait;Jump\"\n      }\n      JS.setCommands (game.pane_commands)\n    &lt;/inituserinterface&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforeenter type=\"script\"&gt;\n    &lt;/beforeenter&gt;\n    &lt;enter type=\"script\"&gt;\n      RemovePaneCommand (\"jump\")\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"second room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"second room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforeenter type=\"script\"&gt;\n      AddPaneCommand (\"Jump\")\n    &lt;/beforeenter&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;function name=\"AddPaneCommand\" parameters=\"cmd\"&gt;\n    list = Split(game.pane_commands)\n    exists = false\n    foreach (c, list) {\n      if (LCase(c) = LCase(cmd)) {\n        exists = true\n      }\n    }\n    if (not exists) {\n      game.pane_commands = game.pane_commands + \";\" + cmd\n    }\n    SetPaneCommands\n  &lt;/function&gt;\n  &lt;function name=\"RemovePaneCommand\" parameters=\"cmd\"&gt;\n    list = Split(game.pane_commands)\n    foreach (c, list) {\n      if (LCase(c) = LCase(cmd)) {\n        cmd = \";\" + c\n        game.pane_commands = Replace(game.pane_commands, cmd,\"\")\n      }\n    }\n    SetPaneCommands\n  &lt;/function&gt;\n  &lt;function name=\"SetPaneCommands\"&gt;\n    JS.setCommands (game.pane_commands)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>Greying out disabled commands wouldn't be very complicated, I don't think, but that depends on what you mean by \"disabled\".</p>\n<p>If you mean commands that output, \"I didn't understand your command.\"<br>\n... that could be done.</p>\n<p>If you mean commands that output: \"You can't do that.\"<br>\n...that sounds quite difficult.</p>\n\n",
      "PostDate": "2018-03-25T17:03:02.6848839Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6731266d-833c-49cb-830d-f934c4de40db",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think I see what you mean.\r\n\r\nI can't recall seeing greyed out buttons in SCUMM games. I think in those games, you click the command and then the object, the reverse of Quest's verb buttons.\r\n\r\nNow I'm imagining you want to modify the verbs display under the inventory/objects panes, so that it shows a static set of commands, and greys out the ones that aren't valid for a given object. Have I got the right idea? I think that  coild be done in pure javascript.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think I see what you mean.</p>\n<p>I can't recall seeing greyed out buttons in SCUMM games. I think in those games, you click the command and then the object, the reverse of Quest's verb buttons.</p>\n<p>Now I'm imagining you want to modify the verbs display under the inventory/objects panes, so that it shows a static set of commands, and greys out the ones that aren't valid for a given object. Have I got the right idea? I think that  coild be done in pure javascript.</p>\n\n",
      "PostDate": "2018-03-25T17:32:26.4514404Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eaf15a00-28ed-420f-b6be-f23b4cd54171",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@K.V.\r\nI mean commands that don't react to a click when they are disabled.\r\nRemoving and adding commands to a panel is a way to disable them - but when I add a new command it appears at the bottom of the list, if I'm not mistaken. I'd want commands to keep their order, so I'm asking for a way to disable them without removal.\r\n\r\n@mrangel\r\nI'll have to replay some old SCUMM game in order to be sure, but I seem to recall seeing some of the commands greyed out in games like \"Maniac Mansion\" or the first two \"Monkey Island\". Not all of them, though, but \"Talk to\" button was disabled when there wasn't any NPC to talk to. Anyway, I'm not cloning the old SCUMM interface; I'm building my own, taking elements here and there. And yes, my custom pane shows a static set of commands; I'm looking for a way to grey out and disable the ones that don't have any use in that situation, like it happens with buttons in the compass pane.",
      "EditableFormat": "markdown",
      "HTML": "<p>@K.V.<br>\nI mean commands that don't react to a click when they are disabled.<br>\nRemoving and adding commands to a panel is a way to disable them - but when I add a new command it appears at the bottom of the list, if I'm not mistaken. I'd want commands to keep their order, so I'm asking for a way to disable them without removal.</p>\n<p>@mrangel<br>\nI'll have to replay some old SCUMM game in order to be sure, but I seem to recall seeing some of the commands greyed out in games like \"Maniac Mansion\" or the first two \"Monkey Island\". Not all of them, though, but \"Talk to\" button was disabled when there wasn't any NPC to talk to. Anyway, I'm not cloning the old SCUMM interface; I'm building my own, taking elements here and there. And yes, my custom pane shows a static set of commands; I'm looking for a way to grey out and disable the ones that don't have any use in that situation, like it happens with buttons in the compass pane.</p>\n\n",
      "PostDate": "2018-03-25T18:21:10.6427265Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1c59b71f-5144-41db-8556-5baa1d9cc881",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I mean commands that don't react to a click when they are disabled.\r\n\r\nPlease define \"disabled\".  Do you mean out of scope (or currently unavailable)?  Like a command that only works in a specific room?\r\n\r\nSort of like the compass buttons?  (When exits aren't available, the button is disabled.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I mean commands that don't react to a click when they are disabled.</p>\n</blockquote>\n<p>Please define \"disabled\".  Do you mean out of scope (or currently unavailable)?  Like a command that only works in a specific room?</p>\n<p>Sort of like the compass buttons?  (When exits aren't available, the button is disabled.)</p>\n\n",
      "PostDate": "2018-03-25T18:29:09.5327086Z",
      "LastEditDate": "2018-03-25T18:30:33.049928Z",
      "link": null
    },
    {
      "PostId": "26635860-d650-4b08-9f08-34b70f8fa758",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, something like that. Commands that only work in a specific room, or with specific objects, e. g., where in a room there are no doors, trunks, cabinets or other openable objects, the \"Open\" command has to be disabled.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, something like that. Commands that only work in a specific room, or with specific objects, e. g., where in a room there are no doors, trunks, cabinets or other openable objects, the \"Open\" command has to be disabled.</p>\n\n",
      "PostDate": "2018-03-25T18:40:45.0617819Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8cc5d52f-9055-4c53-9fe0-3d7b2bca0fab",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think there's three main ways to arrange the interface to let the user select a command and an object. You could pick the command then the object, or the object then the command (the way Quest does it), or have both active and a button to press when you've selected both the command and the item you want to use it on.\r\n\r\nI assume you're wanting to pick the command first, as you talk about objects available in the room rather than the selected object.\r\nI'm pretty sure I can see how I'd go about doing that now. And most of it could be done just by tweaking the updateList javascript function. You'd have it initially disable all commands, and then enable the ones corresponding to the verbs it sees as it's displaying the object lists.\r\n\r\nWould I be right in assuming that the reason you want a custom function rather than executing the command is because you then want the player to choose an object to use the command on? If so, I suspect it doesn't need to be a Quest function at all. You could keep your code in Javascript, and fire the command when the object is chosen. It's just like the verbs panel, but the other way around.\r\n\r\nHope that makes sense; I'm kind of rushing to get some work done on time tonight, so don't have the time to throw together a mockup right now. I might try later.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think there's three main ways to arrange the interface to let the user select a command and an object. You could pick the command then the object, or the object then the command (the way Quest does it), or have both active and a button to press when you've selected both the command and the item you want to use it on.</p>\n<p>I assume you're wanting to pick the command first, as you talk about objects available in the room rather than the selected object.<br>\nI'm pretty sure I can see how I'd go about doing that now. And most of it could be done just by tweaking the updateList javascript function. You'd have it initially disable all commands, and then enable the ones corresponding to the verbs it sees as it's displaying the object lists.</p>\n<p>Would I be right in assuming that the reason you want a custom function rather than executing the command is because you then want the player to choose an object to use the command on? If so, I suspect it doesn't need to be a Quest function at all. You could keep your code in Javascript, and fire the command when the object is chosen. It's just like the verbs panel, but the other way around.</p>\n<p>Hope that makes sense; I'm kind of rushing to get some work done on time tonight, so don't have the time to throw together a mockup right now. I might try later.</p>\n\n",
      "PostDate": "2018-03-25T18:58:58.1495813Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6643cea5-8243-42b7-8dad-ff208c580c1f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How about this example:\r\n\r\n<details><summary>Old Code</summary>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Commands Pane\">\r\n    <gameid>17f0e962-ffb7-4afa-9206-6258b00ef646</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <commandpane />\r\n    <inituserinterface type=\"script\">\r\n      if (not HasAttribute(game,\"pane_commands\")) {\r\n        game.pane_commands = \"Look;Wait;Jump\"\r\n      }\r\n      JS.setCommands (game.pane_commands)\r\n    </inituserinterface>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n      DisablePaneCmd (\"Wait\")\r\n    </enter>\r\n    <description><![CDATA[<h1>THIS IS ONLY A TEST</h1><br/><br/>At game start, \"Wait\" is disabled.<br/><br/>Enter {command:TEST} to enable it.<br/><br/>Enter {command:DISABLE} to disable it.]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"test_cmd\">\r\n    <pattern>test</pattern>\r\n    <script>\r\n      EnablePaneCmd (\"Wait\")\r\n    </script>\r\n  </command>\r\n  <command name=\"test_disable\">\r\n    <pattern>disable</pattern>\r\n    <script>\r\n      DisablePaneCmd (\"Wait\")\r\n    </script>\r\n  </command>\r\n  <function name=\"DisablePaneCmd\" parameters=\"cmd\">\r\n    JS.eval (\"$('.commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\r\n  </function>\r\n  <function name=\"EnablePaneCmd\" parameters=\"cmd\">\r\n    JS.eval (\"$('.commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\nThe next post is more like what you're looking for, I think.",
      "EditableFormat": "markdown",
      "HTML": "<p>How about this example:</p>\n<details><summary>Old Code</summary>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Commands Pane\"&gt;\n    &lt;gameid&gt;17f0e962-ffb7-4afa-9206-6258b00ef646&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;commandpane /&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n      if (not HasAttribute(game,\"pane_commands\")) {\n        game.pane_commands = \"Look;Wait;Jump\"\n      }\n      JS.setCommands (game.pane_commands)\n    &lt;/inituserinterface&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n      DisablePaneCmd (\"Wait\")\n    &lt;/enter&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;h1&gt;THIS IS ONLY A TEST&lt;/h1&gt;&lt;br/&gt;&lt;br/&gt;At game start, \"Wait\" is disabled.&lt;br/&gt;&lt;br/&gt;Enter {command:TEST} to enable it.&lt;br/&gt;&lt;br/&gt;Enter {command:DISABLE} to disable it.]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"test_cmd\"&gt;\n    &lt;pattern&gt;test&lt;/pattern&gt;\n    &lt;script&gt;\n      EnablePaneCmd (\"Wait\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"test_disable\"&gt;\n    &lt;pattern&gt;disable&lt;/pattern&gt;\n    &lt;script&gt;\n      DisablePaneCmd (\"Wait\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"DisablePaneCmd\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('.commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\n  &lt;/function&gt;\n  &lt;function name=\"EnablePaneCmd\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('.commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>The next post is more like what you're looking for, I think.</p>\n\n",
      "PostDate": "2018-03-25T19:17:24.3243133Z",
      "LastEditDate": "2018-03-25T20:03:22.8860089Z",
      "link": null
    },
    {
      "PostId": "13ca0af0-2ebe-46e0-bc18-c4bc69609385",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "## One way to disable unavailable commands:\r\n\r\nIf using the desktop editor, you could add these two functions in code view:\r\n\r\n```\r\n    <function name=\"DisablePaneCommand\" parameters=\"cmd\">\r\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\r\n  </function>\r\n```\r\n```\r\n  <function name=\"EnablePaneCommand\" parameters=\"cmd\">\r\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\r\n  </function>\r\n```\r\n\r\nThen,  in User Interface Initialisation, a turn script, AND after entering each room, call this function:\r\n\r\n```\r\n  <function name=\"UpdatePaneCommands\">\r\n    pcmds = Split(game.pane_commands)\r\n    foreach (pc, pcmds) {\r\n      available = false\r\n      foreach (cmd, ScopeCommands()) {\r\n        if (LCase(pc) = LCase(cmd.name)) {\r\n          available = true\r\n        }\r\n      }\r\n      if (not available) {\r\n        DisablePaneCommand (pc)\r\n      }\r\n      else {\r\n        EnablePaneCommand (pc)\r\n      }\r\n    }\r\n  </function>\r\n```\r\n\r\n---\r\nYou'd have to be precise with your command's names, making sure they match what you add to the pane after both strings are converted to lower case. \r\n\r\nHere's an example game:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Commands Pane\">\r\n    <gameid>17f0e962-ffb7-4afa-9206-6258b00ef646</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <commandpane />\r\n    <start type=\"script\">\r\n    </start>\r\n    <inituserinterface type=\"script\">\r\n      if (not HasAttribute(game,\"pane_commands\")) {\r\n        game.pane_commands = \"Look;Wait;Jump;Disabled\"\r\n      }\r\n      JS.setCommands (game.pane_commands)\r\n    </inituserinterface>\r\n    <roomenter type=\"script\">\r\n      UpdatePaneCommands\r\n    </roomenter>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <description><![CDATA[<h1>THIS IS ONLY A TEST</h1><br/><br/>Enter {command:TEST} to enable \"Wait\".<br/><br/>Enter {command:DISABLE} to disable it.]]></description>\r\n    <beforeenter type=\"script\">\r\n      this = GetObject(\"wait\")\r\n      this.parent = command_jail\r\n    </beforeenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"test_cmd\">\r\n    <pattern>test</pattern>\r\n    <script>\r\n      this = GetObject(\"wait\")\r\n      this.parent = null\r\n    </script>\r\n  </command>\r\n  <command name=\"test_disable\">\r\n    <pattern>disable</pattern>\r\n    <script>\r\n      this = GetObject(\"wait\")\r\n      this.parent = command_jail\r\n    </script>\r\n  </command>\r\n  <object name=\"command_jail\">\r\n    <inherit name=\"editor_object\" />\r\n    <command name=\"disabled\">\r\n      <pattern>disabled</pattern>\r\n      <script>\r\n        msg (\"This should not work!\")\r\n      </script>\r\n    </command>\r\n  </object>\r\n  <turnscript name=\"pane_cmd_turnscript\">\r\n    <enabled />\r\n    <script>\r\n      UpdatePaneCommands\r\n    </script>\r\n  </turnscript>\r\n    <function name=\"DisablePaneCommand\" parameters=\"cmd\">\r\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\r\n  </function>\r\n  <function name=\"EnablePaneCommand\" parameters=\"cmd\">\r\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\r\n  </function>\r\n  <function name=\"UpdatePaneCommands\">\r\n    pcmds = Split(game.pane_commands)\r\n    foreach (pc, pcmds) {\r\n      available = false\r\n      foreach (cmd, ScopeCommands()) {\r\n        if (LCase(pc) = LCase(cmd.name)) {\r\n          available = true\r\n        }\r\n      }\r\n      if (not available) {\r\n        DisablePaneCommand (pc)\r\n      }\r\n      else {\r\n        EnablePaneCommand (pc)\r\n      }\r\n    }\r\n  </function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<h2>One way to disable unavailable commands:</h2>\n<p>If using the desktop editor, you could add these two functions in code view:</p>\n<pre><code>    &lt;function name=\"DisablePaneCommand\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"EnablePaneCommand\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\n  &lt;/function&gt;\n</code></pre>\n<p>Then,  in User Interface Initialisation, a turn script, AND after entering each room, call this function:</p>\n<pre><code>  &lt;function name=\"UpdatePaneCommands\"&gt;\n    pcmds = Split(game.pane_commands)\n    foreach (pc, pcmds) {\n      available = false\n      foreach (cmd, ScopeCommands()) {\n        if (LCase(pc) = LCase(cmd.name)) {\n          available = true\n        }\n      }\n      if (not available) {\n        DisablePaneCommand (pc)\n      }\n      else {\n        EnablePaneCommand (pc)\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>You'd have to be precise with your command's names, making sure they match what you add to the pane after both strings are converted to lower case.</p>\n<p>Here's an example game:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Commands Pane\"&gt;\n    &lt;gameid&gt;17f0e962-ffb7-4afa-9206-6258b00ef646&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;commandpane /&gt;\n    &lt;start type=\"script\"&gt;\n    &lt;/start&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n      if (not HasAttribute(game,\"pane_commands\")) {\n        game.pane_commands = \"Look;Wait;Jump;Disabled\"\n      }\n      JS.setCommands (game.pane_commands)\n    &lt;/inituserinterface&gt;\n    &lt;roomenter type=\"script\"&gt;\n      UpdatePaneCommands\n    &lt;/roomenter&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;h1&gt;THIS IS ONLY A TEST&lt;/h1&gt;&lt;br/&gt;&lt;br/&gt;Enter {command:TEST} to enable \"Wait\".&lt;br/&gt;&lt;br/&gt;Enter {command:DISABLE} to disable it.]]&gt;&lt;/description&gt;\n    &lt;beforeenter type=\"script\"&gt;\n      this = GetObject(\"wait\")\n      this.parent = command_jail\n    &lt;/beforeenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"test_cmd\"&gt;\n    &lt;pattern&gt;test&lt;/pattern&gt;\n    &lt;script&gt;\n      this = GetObject(\"wait\")\n      this.parent = null\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"test_disable\"&gt;\n    &lt;pattern&gt;disable&lt;/pattern&gt;\n    &lt;script&gt;\n      this = GetObject(\"wait\")\n      this.parent = command_jail\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"command_jail\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;command name=\"disabled\"&gt;\n      &lt;pattern&gt;disabled&lt;/pattern&gt;\n      &lt;script&gt;\n        msg (\"This should not work!\")\n      &lt;/script&gt;\n    &lt;/command&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"pane_cmd_turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      UpdatePaneCommands\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n    &lt;function name=\"DisablePaneCommand\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).addClass('disabled').data('deactivated', true);}});\")\n  &lt;/function&gt;\n  &lt;function name=\"EnablePaneCommand\" parameters=\"cmd\"&gt;\n    JS.eval (\"$('#commandPane .commandlink').each(function(){if($(this).html()=='\" + cmd + \"'){$(this).removeClass('disabled').data('deactivated', false);}});\")\n  &lt;/function&gt;\n  &lt;function name=\"UpdatePaneCommands\"&gt;\n    pcmds = Split(game.pane_commands)\n    foreach (pc, pcmds) {\n      available = false\n      foreach (cmd, ScopeCommands()) {\n        if (LCase(pc) = LCase(cmd.name)) {\n          available = true\n        }\n      }\n      if (not available) {\n        DisablePaneCommand (pc)\n      }\n      else {\n        EnablePaneCommand (pc)\n      }\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-25T20:01:35.497384Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f94292ef-7b53-4ac3-bc27-a2fb20aa0264",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Modified based on KV's script above; if you don't want to be moving commands in and out of scope.\r\nThis enables and disables commands based on whether there are any objects in the room with the command in their displayverbs list. So for example \"open\" will be disabled if there are no openable containers in the current room.\r\n```\r\n  <function name=\"UpdatePaneCommands\">\r\n    disabledcmds = Split(game.pane_commands)\r\n    if (HasAttribute(game, \"alwaysenabledcommands\")) {\r\n      // I'm assuming some commands, like \"look\", will always be available because \r\n      // you don't need an object to use them on\r\n      disabledcmds = ListExclude(disabledcmds, game.alwaysenabledcommands)\r\n    }\r\n    foreach (obj, ScopeReachable()) {\r\n      foreach (verb, GetDisplayVerbs(obj)) {\r\n        if (ListContains (disabledcmds, verb)) {\r\n          list remove (disabledcmds, verb)\r\n          EnablePaneCommand (verb)\r\n        }\r\n      }\r\n    }\r\n    foreach (cmd, disabledcmds) {\r\n      DisablePaneCommand (verb)\r\n    }\r\n  </function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Modified based on KV's script above; if you don't want to be moving commands in and out of scope.<br>\nThis enables and disables commands based on whether there are any objects in the room with the command in their displayverbs list. So for example \"open\" will be disabled if there are no openable containers in the current room.</p>\n<pre><code>  &lt;function name=\"UpdatePaneCommands\"&gt;\n    disabledcmds = Split(game.pane_commands)\n    if (HasAttribute(game, \"alwaysenabledcommands\")) {\n      // I'm assuming some commands, like \"look\", will always be available because \n      // you don't need an object to use them on\n      disabledcmds = ListExclude(disabledcmds, game.alwaysenabledcommands)\n    }\n    foreach (obj, ScopeReachable()) {\n      foreach (verb, GetDisplayVerbs(obj)) {\n        if (ListContains (disabledcmds, verb)) {\n          list remove (disabledcmds, verb)\n          EnablePaneCommand (verb)\n        }\n      }\n    }\n    foreach (cmd, disabledcmds) {\n      DisablePaneCommand (verb)\n    }\n  &lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-25T21:11:01.0225541Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "da24e74e-685e-4462-abfe-90b5c94782da",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, I missed that verbs were going to be in the command pane.  I assumed the verbs would be left out of the command pane, since they are displayed for each object upon clicking them in the other panes.\r\n\r\nGood catch, mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, I missed that verbs were going to be in the command pane.  I assumed the verbs would be left out of the command pane, since they are displayed for each object upon clicking them in the other panes.</p>\n<p>Good catch, mrangel!</p>\n\n",
      "PostDate": "2018-03-25T21:23:13.2554499Z",
      "LastEditDate": "2018-03-25T21:27:27.1859543Z",
      "link": null
    },
    {
      "PostId": "52c4f4f5-3a76-4d58-82a1-b2c8d58547ca",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you very much. I'll try these suggestions in my game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you very much. I'll try these suggestions in my game.</p>\n\n",
      "PostDate": "2018-03-26T15:43:24.1394687Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ff38dd6-e9c8-4744-8ad4-3803cfa1888c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I assumed the intention is to reverse the UI, so you click on a verb and then choose the object to apply it to.\r\n\r\nI would note that the code I posted above is inefficient; if that's really what you want, then it's better to do it in pure javascript. Because the JS already has a list of verbs for all the objects, passed to the updateList function. So in this case, you could make updateList enable/disable verbs in the command pane each time it's updated, without having to add extra code on the Quest side.",
      "EditableFormat": "markdown",
      "HTML": "<p>I assumed the intention is to reverse the UI, so you click on a verb and then choose the object to apply it to.</p>\n<p>I would note that the code I posted above is inefficient; if that's really what you want, then it's better to do it in pure javascript. Because the JS already has a list of verbs for all the objects, passed to the updateList function. So in this case, you could make updateList enable/disable verbs in the command pane each time it's updated, without having to add extra code on the Quest side.</p>\n\n",
      "PostDate": "2018-03-26T15:43:30.2168599Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ba7c9728-4124-4b88-8dc2-509cca7eefbc",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Interesting thread this one!\r\nI <b>love</b> the old SCUMM games!",
      "EditableFormat": "markdown",
      "HTML": "<p>Interesting thread this one!<br>\nI <b>love</b> the old SCUMM games!</p>\n\n",
      "PostDate": "2018-03-26T19:57:19.4448185Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d4f7076-afe2-4b09-bb19-971c306d21b4",
      "UserId": 317380,
      "Username": "Skarnisk",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8f75fa016b0e53ef53921491413be161?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I found a solution for visually disabling (i.e. graying out) or enabling buttons. It requires having fun with CSS. I followed (again) The Pixie's <a href=\"https://github.com/ThePix/quest/wiki/Advanced-UI-Part-03:-New-Button-Pane\">tutorial</a>, but I added an ```id``` property to each ```span``` element (i.e. button), so I can simply change their style with some ```JS.setCss``` commands. After doing that, handling disabled or enabled buttons in game is simply a matter of scripting. I created a function that calculates which buttons have to be enabled or disabled (by counting objects that can be taken, opened, closed and so on) and I put a call to it into a turn script and when entering a room. Buttons get disabled or enabled automatically now.",
      "EditableFormat": "markdown",
      "HTML": "<p>I found a solution for visually disabling (i.e. graying out) or enabling buttons. It requires having fun with CSS. I followed (again) The Pixie's <a href=\"https://github.com/ThePix/quest/wiki/Advanced-UI-Part-03:-New-Button-Pane\">tutorial</a>, but I added an <code>id</code> property to each <code>span</code> element (i.e. button), so I can simply change their style with some <code>JS.setCss</code> commands. After doing that, handling disabled or enabled buttons in game is simply a matter of scripting. I created a function that calculates which buttons have to be enabled or disabled (by counting objects that can be taken, opened, closed and so on) and I put a call to it into a turn script and when entering a room. Buttons get disabled or enabled automatically now.</p>\n\n",
      "PostDate": "2018-04-03T21:06:52.884998Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
