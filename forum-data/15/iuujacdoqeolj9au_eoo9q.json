{
  "Topic": {
    "TopicId": "iuujacdoqeolj9au_eoo9q",
    "ForumId": "15",
    "Title": "New to Quest JS and have a few technical queries for a new game",
    "LastUpdated": "2024-04-28T11:09:35.8628008Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fd02d974-4db6-4058-9c32-ac4af4b3b74a",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to design and create a new game in QuestJS where player actions on a specific NPC character have a % chance of working so I need a way of updating the HereVerbs of all the Verbs on both the Player verbs (need to find out how to get those to show anyway) and the NPC and object verbs. They should update the display of the % on a function request. \r\n\r\nI have the formula to calculate the % chance already so I just need assistance with how I go about displaying the % on the verb description displayed to the user when they click on the NPC or other room objects if thr NPC is in the same room as the player. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to design and create a new game in QuestJS where player actions on a specific NPC character have a % chance of working so I need a way of updating the HereVerbs of all the Verbs on both the Player verbs (need to find out how to get those to show anyway) and the NPC and object verbs. They should update the display of the % on a function request.</p>\n<p>I have the formula to calculate the % chance already so I just need assistance with how I go about displaying the % on the verb description displayed to the user when they click on the NPC or other room objects if thr NPC is in the same room as the player.</p>\n\n",
      "PostDate": "2024-04-28T11:09:35.8628008Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca0d05cc-1cba-4272-9f98-8b4298fd4de2",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is a bit trickier than it might appear at first glance because when you click a verb in the side pane, it builds and runs the command as if you typed it into the command line, so by modifying the verb to display the chance of success, you end up modifying the command itself. On top of that, ```%``` is a reserved character, so if you include it in the verb, it'll really confuse the parser. For example, if the verb was \"Take (50%)\" and the item name was \"Bauble\", what would end up being sent to the parser is \"Take (50Bauble)\".\r\n\r\nTo get around this, you need to modify the ```io.clickItemAction()``` function to extract the percent from the command before sending it to the parser. Then, to modify the verbs, you just need to add a function to ```verbFunctions``` that removes and adds the verb to keep the percent up to date. Here's an example.\r\n\r\n```\r\ngame.percent = 50\r\nconst newVerb = \"Gamble\"\r\n\r\ncreateItem(\"ima_enpici\", NPC(true),\r\n{ \r\n  alias:\"Ima Enpici\",\r\n  loc:\"lounge\",\r\n  examine:\"An NPC with a chance of doing something.\", \r\n  afterCreation:function(o) {\r\n    o.verbFunctions.push(function(o, verbList) {\r\n      const gamble_index = verbList.findIndex(verb => /Gamble \\([\\d]{1,3}\\)/i.test(verb))\r\n      if (gamble_index > -1) {\r\n        verbList.splice(gamble_index, 1);\r\n      }\r\n      verbList.push(`${newVerb} (${game.percent}%)`)\r\n    }) \r\n  },\r\n  gamble:function(p){\r\n    if (random.chance(game.percent)){\r\n      msg (\"Your gamble succeeded.\")\r\n    } else {\r\n      msg (\"Your gamble failed.\")\r\n    }\r\n  }\r\n});\r\n\r\nio.clickItemAction = function(itemName, action) {\r\n  if (io.disableLevel) return\r\n  const item = w[itemName];\r\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\r\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\r\n    action = action.replace(arr[0], \"\")\r\n  }\r\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\r\n  runCmd(cmd)\r\n}\r\n\r\ncommands.unshift(new Cmd(newVerb, {\r\n  regex:new RegExp('^' + newVerb.toLowerCase() + ' (.+)$'),\r\n  attName:newVerb.toLowerCase(),\r\n  objects:[\r\n    {scope: parser.isHere},\r\n  ],\r\n  defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n}))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This is a bit trickier than it might appear at first glance because when you click a verb in the side pane, it builds and runs the command as if you typed it into the command line, so by modifying the verb to display the chance of success, you end up modifying the command itself. On top of that, <code>%</code> is a reserved character, so if you include it in the verb, it'll really confuse the parser. For example, if the verb was \"Take (50%)\" and the item name was \"Bauble\", what would end up being sent to the parser is \"Take (50Bauble)\".</p>\n<p>To get around this, you need to modify the <code>io.clickItemAction()</code> function to extract the percent from the command before sending it to the parser. Then, to modify the verbs, you just need to add a function to <code>verbFunctions</code> that removes and adds the verb to keep the percent up to date. Here's an example.</p>\n<pre><code>game.percent = 50\nconst newVerb = \"Gamble\"\n\ncreateItem(\"ima_enpici\", NPC(true),\n{ \n  alias:\"Ima Enpici\",\n  loc:\"lounge\",\n  examine:\"An NPC with a chance of doing something.\", \n  afterCreation:function(o) {\n    o.verbFunctions.push(function(o, verbList) {\n      const gamble_index = verbList.findIndex(verb =&gt; /Gamble \\([\\d]{1,3}\\)/i.test(verb))\n      if (gamble_index &gt; -1) {\n        verbList.splice(gamble_index, 1);\n      }\n      verbList.push(`${newVerb} (${game.percent}%)`)\n    }) \n  },\n  gamble:function(p){\n    if (random.chance(game.percent)){\n      msg (\"Your gamble succeeded.\")\n    } else {\n      msg (\"Your gamble failed.\")\n    }\n  }\n});\n\nio.clickItemAction = function(itemName, action) {\n  if (io.disableLevel) return\n  const item = w[itemName];\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\n    action = action.replace(arr[0], \"\")\n  }\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\n  runCmd(cmd)\n}\n\ncommands.unshift(new Cmd(newVerb, {\n  regex:new RegExp('^' + newVerb.toLowerCase() + ' (.+)$'),\n  attName:newVerb.toLowerCase(),\n  objects:[\n    {scope: parser.isHere},\n  ],\n  defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n}))\n</code></pre>\n\n",
      "PostDate": "2024-04-28T14:33:41.9485436Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e4bb44d-39c7-4929-8e6a-a08de16892bb",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The only simpler way would be to not display the % but provide a prompt to the user with it and a continue or not selection before properly performing the action after the user has selected the action/entered the command prompt. \r\n\r\nBut visually getting it to work your way would be better but I'm not sure exactly where I can modify io.clickItemAction(), is that in one of the game library files?",
      "EditableFormat": "markdown",
      "HTML": "<p>The only simpler way would be to not display the % but provide a prompt to the user with it and a continue or not selection before properly performing the action after the user has selected the action/entered the command prompt.</p>\n<p>But visually getting it to work your way would be better but I'm not sure exactly where I can modify io.clickItemAction(), is that in one of the game library files?</p>\n\n",
      "PostDate": "2024-04-28T15:49:12.3031144Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5508118d-a3e0-4092-9202-ab4515004412",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, that function is in /lib/_io.js. You can either modify it there or you can overwrite it in one of the files that gets loaded later, like code.js or data.js. If you paste my example into your data.js file (you may need to change the NPC's ```loc``` to something that exists in your project), you can try it out to see how it works.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, that function is in /lib/_io.js. You can either modify it there or you can overwrite it in one of the files that gets loaded later, like code.js or data.js. If you paste my example into your data.js file (you may need to change the NPC's <code>loc</code> to something that exists in your project), you can try it out to see how it works.</p>\n\n",
      "PostDate": "2024-04-28T16:11:09.736886Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "181b6882-6198-46f2-a536-5433737ef014",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That does seem to work how I want but I'm not sure how to adjust your code  to add multiple verbs, and ones that are setup based on the NPC's current room location. \r\n\r\nSo for instance \"Watch TV with\" and \"Snuggle up with\" in the Lounge and \"Eat with\" and \"Drink with\" in the Kitchen. ",
      "EditableFormat": "markdown",
      "HTML": "<p>That does seem to work how I want but I'm not sure how to adjust your code  to add multiple verbs, and ones that are setup based on the NPC's current room location.</p>\n<p>So for instance \"Watch TV with\" and \"Snuggle up with\" in the Lounge and \"Eat with\" and \"Drink with\" in the Kitchen.</p>\n\n",
      "PostDate": "2024-04-28T18:16:19.1149471Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ccbf302e-bace-4185-b6ef-d56259e34db0",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This isn't necessarily the best way to accomplish what you're looking for, but it follows the same pattern. First, we create an array of objects that contain the name, location, and chance of success for each verb, then we iterate through that array when setting up the new commands and when adding the verbs to the NPC. \r\n```\r\ngame.gambleChance = 50\r\ngame.eatChance = 80\r\ngame.tvChance = 30\r\n\r\nconst newVerbs = [\r\n  {name: \"Gamble\", chance:function(){return game.gambleChance}},\r\n  {name: \"Eat with\", loc: \"kitchen\", chance:function(){return game.eatChance}},\r\n  {name: \"Watch TV with\", loc: \"lounge\", chance:function(){return game.tvChance}}\r\n]\r\n\r\ncreateItem(\"ima_enpici\", NPC(true),\r\n{ \r\n  alias:\"Ima Enpici\",\r\n  loc:\"lounge\",\r\n  examine:\"An NPC with a chance of doing something.\", \r\n  afterCreation:function(o) {\r\n    o.verbFunctions.push(function(o, verbList) {\r\n      for (let verb of newVerbs){\r\n        const verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\r\n        const verb_index = verbList.findIndex(v => verb_regex.test(v))\r\n        if (verb_index > -1){\r\n          verbList.splice(verb_index, 1);\r\n        }\r\n        if (!verb.loc || verb.loc === o.loc){\r\n          verbList.push(`${verb.name} (${verb.chance()}%)`)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  gamble:function(p){\r\n    if (random.chance(game.gambleChance)){\r\n      msg (\"Your gamble succeeded.\")\r\n    } else {\r\n      msg (\"Your gamble failed.\")\r\n    }\r\n  },\r\n  eatwith:function(p){\r\n    if (random.chance(game.eatChance)){\r\n      msg (\"You eat with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to eat with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n  watchtvwith:function(p){\r\n    if (random.chance(game.tvChance)){\r\n      msg (\"You watch TV with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\r\n    }\r\n  }\r\n});\r\n\r\nfor (let verb of newVerbs){\r\n  new Cmd(verb.name, {\r\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\r\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n  })\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This isn't necessarily the best way to accomplish what you're looking for, but it follows the same pattern. First, we create an array of objects that contain the name, location, and chance of success for each verb, then we iterate through that array when setting up the new commands and when adding the verbs to the NPC.</p>\n<pre><code>game.gambleChance = 50\ngame.eatChance = 80\ngame.tvChance = 30\n\nconst newVerbs = [\n  {name: \"Gamble\", chance:function(){return game.gambleChance}},\n  {name: \"Eat with\", loc: \"kitchen\", chance:function(){return game.eatChance}},\n  {name: \"Watch TV with\", loc: \"lounge\", chance:function(){return game.tvChance}}\n]\n\ncreateItem(\"ima_enpici\", NPC(true),\n{ \n  alias:\"Ima Enpici\",\n  loc:\"lounge\",\n  examine:\"An NPC with a chance of doing something.\", \n  afterCreation:function(o) {\n    o.verbFunctions.push(function(o, verbList) {\n      for (let verb of newVerbs){\n        const verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\n        const verb_index = verbList.findIndex(v =&gt; verb_regex.test(v))\n        if (verb_index &gt; -1){\n          verbList.splice(verb_index, 1);\n        }\n        if (!verb.loc || verb.loc === o.loc){\n          verbList.push(`${verb.name} (${verb.chance()}%)`)\n        }\n      }\n    })\n  },\n  gamble:function(p){\n    if (random.chance(game.gambleChance)){\n      msg (\"Your gamble succeeded.\")\n    } else {\n      msg (\"Your gamble failed.\")\n    }\n  },\n  eatwith:function(p){\n    if (random.chance(game.eatChance)){\n      msg (\"You eat with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to eat with {nm:ima_enpici}.\")\n    }\n  },\n  watchtvwith:function(p){\n    if (random.chance(game.tvChance)){\n      msg (\"You watch TV with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\n    }\n  }\n});\n\nfor (let verb of newVerbs){\n  new Cmd(verb.name, {\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n  })\n}\n</code></pre>\n\n",
      "PostDate": "2024-04-28T19:05:26.577649Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eea82e78-545c-448a-9efa-1efc1b503478",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This was my attempt while I was waiting for your response, it closely resembles the method I am already trying to use in regards a set const list of actions and their perc chances plus a method to get the NPC to follow you around to get them into the next room.\r\n\r\n```\r\n\"use strict\"\r\n\r\ngame.watchPercent = 50\r\ngame.snugglePercent = 30\r\ngame.eatWithPercent = 70\r\ngame.drinkWithPercent = 40\r\n\r\nconst newVerb = \"Watch TV\";\r\nconst newVerb2 = \"Snuggle With\";\r\n\r\nconst ACTION_WATCHTV = 0;\r\nconst ACTION_SNUGGLE = 1;\r\nconst ACTION_EATWITH = 2;\r\nconst ACTION_DRINKWITH = 3;\r\n\r\n\r\ncreateItem(\"me\", PLAYER(), {\r\n  loc:\"Lounge\",\r\n  synonyms:['me', 'myself'],\r\n  examine: \"Just a regular guy.\",\r\n  isBeingFollowed: false,\r\n})\r\n\r\ncreateRoom(\"Lounge\", {\r\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\r\n\tbeforeEnter: function()\r\n\t{\r\n\t\tsetNPCVerbs()\r\n\t}, \r\n    east: new Exit(\"Kitchen\"),\t\r\n})\r\n\r\ncreateRoom(\"Kitchen\", {\r\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\r\n\tbeforeEnter: function()\r\n\t{\r\n\t\tsetNPCVerbs()\r\n\t},\r\n    west: new Exit(\"Lounge\"),\t\r\n})\r\n\r\ncreateItem(\"ima_enpici\", NPC(true),\r\n{ \r\n  alias:\"Ima Enpici\",\r\n  loc:\"Lounge\",\r\n  examine:\"An NPC with a chance of doing something.\",\r\n  actions: [ACTION_WATCHTV,ACTION_SNUGGLE,ACTION_EATWITH,ACTION_DRINKWITH],\r\n  afterCreation:function(o) {\r\n\r\n  },\r\n  watchtv:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They watched TV with you.\")\r\n    } else {\r\n      msg (\"They didn't watch TV with you.\")\r\n    }\r\n  },\r\n  snugglewith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They snuggled with you.\")\r\n    } else {\r\n      msg (\"They didn't snuggle with you.\")\r\n    }\r\n  },\r\n  eatwith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They ate dinner with you.\")\r\n    } else {\r\n      msg (\"They didn't eat dinner with you.\")\r\n    }\r\n  }, \r\n  drinkwith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They drank with you.\")\r\n    } else {\r\n      msg (\"They didn't drink with you.\")\r\n    }\r\n  }, \r\n  followplayer: function() {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tmsg (\"Your NPC friend is already following you\")\r\n\t\t} \r\n\t\telse {\r\n\t\t\tthis.setLeader(player)\r\n\t\t\tmsg (\"You ask your NPC friend to follow you\")\r\n\t\t\tw.me.isBeingFollowed = true\r\n\t\t}\r\n\t},\r\n\tunfollowplayer: function() {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tw.ima_enpici.setLeader()\r\n\t\t\tw.me.isBeingFollowed = false\r\n\t\t\tmsg (\"You ask your NPC friend to stop following you\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmsg (\"Your NPC friend isn't following you anyway\")\r\n\t\t}\r\n\t},  \r\n});\r\n\r\nio.clickItemAction = function(itemName, action) {\r\n  if (io.disableLevel) return\r\n  const item = w[itemName];\r\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\r\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\r\n    action = action.replace(arr[0], \"\")\r\n  }\r\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\r\n  runCmd(cmd)\r\n}\r\n\r\ncommands.unshift(new Cmd(newVerb, {\r\n  regex:new RegExp('^' + newVerb.toLowerCase() + ' (.+)$'),\r\n  attName:newVerb.toLowerCase(),\r\n  objects:[\r\n    {scope: parser.isHere},\r\n  ],\r\n  defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n}))\r\n\r\nfunction setNPCVerbs() {\r\n\tvar NPCVerbs = [];\r\n\tvar NPCVerb = \"\";\r\n\tvar ActionPerc = 0;\r\n\tw.ima_enpici.hereVerbs = [];\r\n\t\r\n\tswitch(w.ima_enpici.loc) {\r\n\t\tcase \"Lounge\": \r\n\t\t\tNPCVerbs.push(\"Watch TV with\", \"Snuggle with\");\r\n\t\tbreak;\r\n\t\tcase \"Kitchen\":\r\n\t\t\tNPCVerbs.push(\"Eat with\", \"Drink with\");\r\n\t\tbreak;\r\n\t}\r\n\tw.ima_enpici.hereVerbs.push(\"follow player\", \"unfollow player\")\r\n    w.ima_enpici.verbFunctions.push(function(o, verbList) {\r\n      const gamble_index = verbList.findIndex(verb => /Watch TV\\([\\d]{1,3}\\)/i.test(verb))\r\n      if (gamble_index > -1) {\r\n        verbList.splice(gamble_index, 1);\r\n      }\r\n\t  for (NPCVerb in NPCVerbs) {\r\n\t\t  switch (NPCVerb) {\r\n\t\t\tcase \"Watch TV with\":\r\n\t\t\t\tActionPerc = getActionPerc(ACTION_WATCHTV);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Snuggle with\":\r\n\t\t\t\tActionPerc = getActionPerc(ACTION_SNUGGLEWITH);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Eat with\":\r\n\t\t\t\tActionPerc = getActionPerc(ACTION_EATWITH);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Drink with\":\r\n\t\t\t\tActionPerc = getActionPerc(ACTION_DRINKWITH);\r\n\t\t\t\tbreak;\r\n\t\t  }\r\n\t\t  verbList.push(`${NPCVerb} (${ActionPerc}%)`)\r\n\t  }\r\n    }) \r\n}\r\n\r\nfunction getActionPerc(action) {\r\n\r\n\tvar actionPerc = 0;\r\n\t\r\n\tswitch (action) {\r\n\t\tcase ACTION_WATCHTV:\r\n\t\t\tactionPerc = game.watchPercent\r\n\t\t\tbreak;\r\n\t\tcase ACTION_SNUGGLE:\r\n\t\t\tactionPerc = game.snugglePercent\r\n\t\t\tbreak;\r\n\t\tcase ACTION_EATWITH:\r\n\t\t\tactionPerc = game.eatWithPercent\r\n\t\t\tbreak;\r\n\t\tcase ACTION_DRINKWITH:\r\n\t\t\tactionPerc = game.drinkWithPercent\r\n\t\t\tbreak;\t\t\t\r\n\t}\r\n\treturn actionPerc\r\n}\r\n```\r\n\r\nI will take some time looking at your version later to see how I went wrong, and if you have suggestions on improving your own version based on my approach I would really appreciate it and all the work you've done so far with this!",
      "EditableFormat": "markdown",
      "HTML": "<p>This was my attempt while I was waiting for your response, it closely resembles the method I am already trying to use in regards a set const list of actions and their perc chances plus a method to get the NPC to follow you around to get them into the next room.</p>\n<pre><code>\"use strict\"\n\ngame.watchPercent = 50\ngame.snugglePercent = 30\ngame.eatWithPercent = 70\ngame.drinkWithPercent = 40\n\nconst newVerb = \"Watch TV\";\nconst newVerb2 = \"Snuggle With\";\n\nconst ACTION_WATCHTV = 0;\nconst ACTION_SNUGGLE = 1;\nconst ACTION_EATWITH = 2;\nconst ACTION_DRINKWITH = 3;\n\n\ncreateItem(\"me\", PLAYER(), {\n  loc:\"Lounge\",\n  synonyms:['me', 'myself'],\n  examine: \"Just a regular guy.\",\n  isBeingFollowed: false,\n})\n\ncreateRoom(\"Lounge\", {\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\n\tbeforeEnter: function()\n\t{\n\t\tsetNPCVerbs()\n\t}, \n    east: new Exit(\"Kitchen\"),\t\n})\n\ncreateRoom(\"Kitchen\", {\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\n\tbeforeEnter: function()\n\t{\n\t\tsetNPCVerbs()\n\t},\n    west: new Exit(\"Lounge\"),\t\n})\n\ncreateItem(\"ima_enpici\", NPC(true),\n{ \n  alias:\"Ima Enpici\",\n  loc:\"Lounge\",\n  examine:\"An NPC with a chance of doing something.\",\n  actions: [ACTION_WATCHTV,ACTION_SNUGGLE,ACTION_EATWITH,ACTION_DRINKWITH],\n  afterCreation:function(o) {\n\n  },\n  watchtv:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They watched TV with you.\")\n    } else {\n      msg (\"They didn't watch TV with you.\")\n    }\n  },\n  snugglewith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They snuggled with you.\")\n    } else {\n      msg (\"They didn't snuggle with you.\")\n    }\n  },\n  eatwith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They ate dinner with you.\")\n    } else {\n      msg (\"They didn't eat dinner with you.\")\n    }\n  }, \n  drinkwith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They drank with you.\")\n    } else {\n      msg (\"They didn't drink with you.\")\n    }\n  }, \n  followplayer: function() {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tmsg (\"Your NPC friend is already following you\")\n\t\t} \n\t\telse {\n\t\t\tthis.setLeader(player)\n\t\t\tmsg (\"You ask your NPC friend to follow you\")\n\t\t\tw.me.isBeingFollowed = true\n\t\t}\n\t},\n\tunfollowplayer: function() {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tw.ima_enpici.setLeader()\n\t\t\tw.me.isBeingFollowed = false\n\t\t\tmsg (\"You ask your NPC friend to stop following you\")\n\t\t}\n\t\telse {\n\t\t\tmsg (\"Your NPC friend isn't following you anyway\")\n\t\t}\n\t},  \n});\n\nio.clickItemAction = function(itemName, action) {\n  if (io.disableLevel) return\n  const item = w[itemName];\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\n    action = action.replace(arr[0], \"\")\n  }\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\n  runCmd(cmd)\n}\n\ncommands.unshift(new Cmd(newVerb, {\n  regex:new RegExp('^' + newVerb.toLowerCase() + ' (.+)$'),\n  attName:newVerb.toLowerCase(),\n  objects:[\n    {scope: parser.isHere},\n  ],\n  defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n}))\n\nfunction setNPCVerbs() {\n\tvar NPCVerbs = [];\n\tvar NPCVerb = \"\";\n\tvar ActionPerc = 0;\n\tw.ima_enpici.hereVerbs = [];\n\t\n\tswitch(w.ima_enpici.loc) {\n\t\tcase \"Lounge\": \n\t\t\tNPCVerbs.push(\"Watch TV with\", \"Snuggle with\");\n\t\tbreak;\n\t\tcase \"Kitchen\":\n\t\t\tNPCVerbs.push(\"Eat with\", \"Drink with\");\n\t\tbreak;\n\t}\n\tw.ima_enpici.hereVerbs.push(\"follow player\", \"unfollow player\")\n    w.ima_enpici.verbFunctions.push(function(o, verbList) {\n      const gamble_index = verbList.findIndex(verb =&gt; /Watch TV\\([\\d]{1,3}\\)/i.test(verb))\n      if (gamble_index &gt; -1) {\n        verbList.splice(gamble_index, 1);\n      }\n\t  for (NPCVerb in NPCVerbs) {\n\t\t  switch (NPCVerb) {\n\t\t\tcase \"Watch TV with\":\n\t\t\t\tActionPerc = getActionPerc(ACTION_WATCHTV);\n\t\t\t\tbreak;\n\t\t\tcase \"Snuggle with\":\n\t\t\t\tActionPerc = getActionPerc(ACTION_SNUGGLEWITH);\n\t\t\t\tbreak;\n\t\t\tcase \"Eat with\":\n\t\t\t\tActionPerc = getActionPerc(ACTION_EATWITH);\n\t\t\t\tbreak;\n\t\t\tcase \"Drink with\":\n\t\t\t\tActionPerc = getActionPerc(ACTION_DRINKWITH);\n\t\t\t\tbreak;\n\t\t  }\n\t\t  verbList.push(`${NPCVerb} (${ActionPerc}%)`)\n\t  }\n    }) \n}\n\nfunction getActionPerc(action) {\n\n\tvar actionPerc = 0;\n\t\n\tswitch (action) {\n\t\tcase ACTION_WATCHTV:\n\t\t\tactionPerc = game.watchPercent\n\t\t\tbreak;\n\t\tcase ACTION_SNUGGLE:\n\t\t\tactionPerc = game.snugglePercent\n\t\t\tbreak;\n\t\tcase ACTION_EATWITH:\n\t\t\tactionPerc = game.eatWithPercent\n\t\t\tbreak;\n\t\tcase ACTION_DRINKWITH:\n\t\t\tactionPerc = game.drinkWithPercent\n\t\t\tbreak;\t\t\t\n\t}\n\treturn actionPerc\n}\n</code></pre>\n<p>I will take some time looking at your version later to see how I went wrong, and if you have suggestions on improving your own version based on my approach I would really appreciate it and all the work you've done so far with this!</p>\n\n",
      "PostDate": "2024-04-28T19:14:10.6909247Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8d22cccb-52e3-426a-ba3e-5487b536e50a",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I see what you were doing with calling ```setNPCVerbs()``` each time the player enters a room. It makes sense and you could probably get it working with a few minor adjustments, however, I'd recommend using the ```verbFunctions``` array instead, for a couple reasons. First, maybe later on, this or another NPC will move between rooms independently. If the verbs are only ever set when the player enters a room, they could get out of sync. Second, you'd need to find another way to update the chance in the description, if it can change while the player stays within one room. Since each function in the ```verbFunctions``` array is already executing every turn, that solves both of these problems.\r\n\r\nMy main piece of advice looking over your code would be to remember that you need to add a command for each new verb that you're adding to the game. You've already added the functions on the NPC, and you've added the verbs to their ```hereVerbs```, but you also need to add a command so the parser knows how to connect those two pieces of code.\r\n\r\n```\r\nnew Cmd(\"Follow\", {\r\n    regex:new RegExp('^' + \"Follow\".toLowerCase() + ' (.+)$'),\r\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n  })\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I see what you were doing with calling <code>setNPCVerbs()</code> each time the player enters a room. It makes sense and you could probably get it working with a few minor adjustments, however, I'd recommend using the <code>verbFunctions</code> array instead, for a couple reasons. First, maybe later on, this or another NPC will move between rooms independently. If the verbs are only ever set when the player enters a room, they could get out of sync. Second, you'd need to find another way to update the chance in the description, if it can change while the player stays within one room. Since each function in the <code>verbFunctions</code> array is already executing every turn, that solves both of these problems.</p>\n<p>My main piece of advice looking over your code would be to remember that you need to add a command for each new verb that you're adding to the game. You've already added the functions on the NPC, and you've added the verbs to their <code>hereVerbs</code>, but you also need to add a command so the parser knows how to connect those two pieces of code.</p>\n<pre><code>new Cmd(\"Follow\", {\n    regex:new RegExp('^' + \"Follow\".toLowerCase() + ' (.+)$'),\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n  })\n</code></pre>\n\n",
      "PostDate": "2024-04-28T21:14:00.4744386Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8b8cdb92-25c2-483b-ab35-0acd9cd64f79",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One thing I'm not clear on is how to do verbs that are on the player themselves, or does the player only every get to interact through other objects? If its something like a \"yawn\" or \"burp\" action that when the NPC isn't present wouldn't have a % chance represented but if they are in the same room they would.",
      "EditableFormat": "markdown",
      "HTML": "<p>One thing I'm not clear on is how to do verbs that are on the player themselves, or does the player only every get to interact through other objects? If its something like a \"yawn\" or \"burp\" action that when the NPC isn't present wouldn't have a % chance represented but if they are in the same room they would.</p>\n\n",
      "PostDate": "2024-04-28T21:50:11.5091661Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b6827475-bf16-4e58-a0d9-f64ec85813ca",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I get some issues with the Follow and Unfollow commands, I added these verbs that don't need a chance but my new command isn't being registered and I get the following message in the Console \"Command was [Ask to follow Ima Enpici]\" but clicking on the verb.\r\n\r\n```\r\n\"use strict\"\r\n\r\ngame.gambleChance = 50\r\ngame.tvChance = 50\r\ngame.snuggleChance = 30\r\ngame.eatChance = 70\r\ngame.drinkChance = 40\r\n\r\nconst ACTION_WATCHTV = 0;\r\nconst ACTION_SNUGGLE = 1;\r\nconst ACTION_EATWITH = 2;\r\nconst ACTION_DRINKWITH = 3;\r\n\r\nconst newVerbs = [\r\n  {name: \"Gamble with\", chance:function(){return game.gambleChance}},\r\n  {name: \"Eat with\", loc: \"kitchen\", chance:function(){return game.eatChance}},\r\n  {name: \"Drink with\", loc: \"kitchen\", chance:function(){return game.drinkChance}},  \r\n  {name: \"Watch TV with\", loc: \"lounge\", chance:function(){return game.tvChance}},\r\n  {name: \"Snuggle up with\", loc: \"lounge\", chance:function(){return game.snuggleChance}}   \r\n]\r\n\r\nfor (let verb of newVerbs){\r\n  new Cmd(verb.name, {\r\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\r\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n  })\r\n} \r\n\r\ncreateItem(\"me\", PLAYER(), {\r\n  loc:\"lounge\",\r\n  synonyms:['me', 'myself'],\r\n  examine: \"Just a regular guy.\",\r\n  isBeingFollowed: false,\r\n})\r\n\r\ncreateRoom(\"lounge\", {\r\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\r\n    east: new Exit(\"kitchen\"),\t\r\n})\r\n\r\ncreateRoom(\"kitchen\", {\r\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\r\n    west: new Exit(\"lounge\"),\t\r\n})\r\n\r\ncreateItem(\"ima_enpici\", NPC(true),\r\n{ \r\n  alias:\"Ima Enpici\",\r\n  loc:\"lounge\",\r\n  examine:\"An NPC with a chance of doing something.\",\r\n  actions: [ACTION_WATCHTV,ACTION_SNUGGLE,ACTION_EATWITH,ACTION_DRINKWITH],\r\n  afterCreation:function(o) {\r\n    o.verbFunctions.push(function(o, verbList) {\r\n      for (let verb of newVerbs){\r\n        const verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\r\n        const verb_index = verbList.findIndex(v => verb_regex.test(v))\r\n        if (verb_index > -1){\r\n          verbList.splice(verb_index, 1);\r\n        }\r\n        if (!verb.loc || verb.loc === o.loc){\r\n          verbList.push(`${verb.name} (${verb.chance()}%)`)\r\n        }\r\n      }\r\n\t  // Add permanent verbs\r\n  \tverbList.push(\"Ask to follow\")\r\n\tverbList.push(\"Ask to unfollow\")\r\n    })\r\n  },\r\n  watchtvwith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"You watched TV with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n  snugglewith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"You snuggled with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to snuggle with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n  eatwith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They ate dinner with you.\")\r\n    } else {\r\n      msg (\"They didn't eat dinner with you.\")\r\n    }\r\n  }, \r\n  drinkwith:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"They drank with you.\")\r\n    } else {\r\n      msg (\"They didn't drink with you.\")\r\n    }\r\n  },\r\n  gamble:function(chancePerc){\r\n    if (random.chance(chancePerc)){\r\n      msg (\"{nm:ima_enpici} gambled with you.\")\r\n    } else {\r\n      msg (\"{nm:ima_enpici} didn't gamble with you.\")\r\n    }\r\n  },\r\n  follow: function() {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\r\n\t\t} \r\n\t\telse {\r\n\t\t\tthis.setLeader(player)\r\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\r\n\t\t\tw.me.isBeingFollowed = true\r\n\t\t}\r\n  },\r\n  unfollow: function() {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tw.ima_enpici.setLeader()\r\n\t\t\tw.me.isBeingFollowed = false\r\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\r\n\t\t}\r\n\t},  \r\n});\r\n\r\nio.clickItemAction = function(itemName, action) {\r\n  if (io.disableLevel) return\r\n  const item = w[itemName];\r\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\r\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\r\n    action = action.replace(arr[0], \"\")\r\n  }\r\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\r\n  runCmd(cmd)\r\n}\r\n\r\nnew Cmd(\"Follow\", {\r\n    regex:new RegExp('^' + \"Follow\".toLowerCase() + ' (.+)$'),\r\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n})\r\n\r\nnew Cmd(\"Unfollow\", {\r\n    regex:new RegExp('^' + \"Unfollow\".toLowerCase() + ' (.+)$'),\r\n    attName:\"Unfollow\".toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n})\r\n  \r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I get some issues with the Follow and Unfollow commands, I added these verbs that don't need a chance but my new command isn't being registered and I get the following message in the Console \"Command was [Ask to follow Ima Enpici]\" but clicking on the verb.</p>\n<pre><code>\"use strict\"\n\ngame.gambleChance = 50\ngame.tvChance = 50\ngame.snuggleChance = 30\ngame.eatChance = 70\ngame.drinkChance = 40\n\nconst ACTION_WATCHTV = 0;\nconst ACTION_SNUGGLE = 1;\nconst ACTION_EATWITH = 2;\nconst ACTION_DRINKWITH = 3;\n\nconst newVerbs = [\n  {name: \"Gamble with\", chance:function(){return game.gambleChance}},\n  {name: \"Eat with\", loc: \"kitchen\", chance:function(){return game.eatChance}},\n  {name: \"Drink with\", loc: \"kitchen\", chance:function(){return game.drinkChance}},  \n  {name: \"Watch TV with\", loc: \"lounge\", chance:function(){return game.tvChance}},\n  {name: \"Snuggle up with\", loc: \"lounge\", chance:function(){return game.snuggleChance}}   \n]\n\nfor (let verb of newVerbs){\n  new Cmd(verb.name, {\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n  })\n} \n\ncreateItem(\"me\", PLAYER(), {\n  loc:\"lounge\",\n  synonyms:['me', 'myself'],\n  examine: \"Just a regular guy.\",\n  isBeingFollowed: false,\n})\n\ncreateRoom(\"lounge\", {\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\n    east: new Exit(\"kitchen\"),\t\n})\n\ncreateRoom(\"kitchen\", {\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\n    west: new Exit(\"lounge\"),\t\n})\n\ncreateItem(\"ima_enpici\", NPC(true),\n{ \n  alias:\"Ima Enpici\",\n  loc:\"lounge\",\n  examine:\"An NPC with a chance of doing something.\",\n  actions: [ACTION_WATCHTV,ACTION_SNUGGLE,ACTION_EATWITH,ACTION_DRINKWITH],\n  afterCreation:function(o) {\n    o.verbFunctions.push(function(o, verbList) {\n      for (let verb of newVerbs){\n        const verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\n        const verb_index = verbList.findIndex(v =&gt; verb_regex.test(v))\n        if (verb_index &gt; -1){\n          verbList.splice(verb_index, 1);\n        }\n        if (!verb.loc || verb.loc === o.loc){\n          verbList.push(`${verb.name} (${verb.chance()}%)`)\n        }\n      }\n\t  // Add permanent verbs\n  \tverbList.push(\"Ask to follow\")\n\tverbList.push(\"Ask to unfollow\")\n    })\n  },\n  watchtvwith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"You watched TV with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\n    }\n  },\n  snugglewith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"You snuggled with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to snuggle with {nm:ima_enpici}.\")\n    }\n  },\n  eatwith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They ate dinner with you.\")\n    } else {\n      msg (\"They didn't eat dinner with you.\")\n    }\n  }, \n  drinkwith:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"They drank with you.\")\n    } else {\n      msg (\"They didn't drink with you.\")\n    }\n  },\n  gamble:function(chancePerc){\n    if (random.chance(chancePerc)){\n      msg (\"{nm:ima_enpici} gambled with you.\")\n    } else {\n      msg (\"{nm:ima_enpici} didn't gamble with you.\")\n    }\n  },\n  follow: function() {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\n\t\t} \n\t\telse {\n\t\t\tthis.setLeader(player)\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\n\t\t\tw.me.isBeingFollowed = true\n\t\t}\n  },\n  unfollow: function() {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tw.ima_enpici.setLeader()\n\t\t\tw.me.isBeingFollowed = false\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\n\t\t}\n\t\telse {\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\n\t\t}\n\t},  \n});\n\nio.clickItemAction = function(itemName, action) {\n  if (io.disableLevel) return\n  const item = w[itemName];\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\n    action = action.replace(arr[0], \"\")\n  }\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\n  runCmd(cmd)\n}\n\nnew Cmd(\"Follow\", {\n    regex:new RegExp('^' + \"Follow\".toLowerCase() + ' (.+)$'),\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n})\n\nnew Cmd(\"Unfollow\", {\n    regex:new RegExp('^' + \"Unfollow\".toLowerCase() + ' (.+)$'),\n    attName:\"Unfollow\".toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n})\n  \n</code></pre>\n\n",
      "PostDate": "2024-04-28T22:15:20.2521535Z",
      "LastEditDate": "2024-04-28T22:15:56.89692Z",
      "link": null
    },
    {
      "PostId": "25dbb1cf-e7b3-4a5d-9937-4fa13961c09d",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When you create a command, the ```regex``` property decides whether the command that's passed to the parser will match. So if you want the verb displayed in the side pane to read \"Ask to follow\", the regex needs to be ```regex:new RegExp('^' + \"Ask to follow\".toLowerCase() + ' (.+)$'),```\r\n\r\nAlso, I noticed your functions on the NPC probably aren't doing what you want them to do. The parameter that you're calling ```chancePerc``` isn't being passed the chance as an argument, it's an object that contains some information about the command. You could update the command to pass the chance through to the function, but that seems needlessly complicated since you're already storing those values elsewhere. So this might work better.\r\n\r\n```\r\nwatchtvwith:function(p){\r\n    if (random.chance(game.tvChance)){\r\n      msg (\"You watched TV with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>When you create a command, the <code>regex</code> property decides whether the command that's passed to the parser will match. So if you want the verb displayed in the side pane to read \"Ask to follow\", the regex needs to be <code>regex:new RegExp('^' + \"Ask to follow\".toLowerCase() + ' (.+)$'),</code></p>\n<p>Also, I noticed your functions on the NPC probably aren't doing what you want them to do. The parameter that you're calling <code>chancePerc</code> isn't being passed the chance as an argument, it's an object that contains some information about the command. You could update the command to pass the chance through to the function, but that seems needlessly complicated since you're already storing those values elsewhere. So this might work better.</p>\n<pre><code>watchtvwith:function(p){\n    if (random.chance(game.tvChance)){\n      msg (\"You watched TV with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\n    }\n  },\n</code></pre>\n\n",
      "PostDate": "2024-04-28T23:55:45.0309035Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e3bf5450-f21f-418e-8c6a-7e110225da19",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What is the \"p\" in the args list of the function meant to represent? Is it the player object? Your shorthand is not that clear sorry. Also what about \"nm\" on the msg?",
      "EditableFormat": "markdown",
      "HTML": "<p>What is the \"p\" in the args list of the function meant to represent? Is it the player object? Your shorthand is not that clear sorry. Also what about \"nm\" on the msg?</p>\n\n",
      "PostDate": "2024-04-29T05:49:32.9390965Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "043cf385-050a-4a6b-8f68-0327cb5a9450",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're ever curious about what a variable is, you can always examine it by adding a line like this. This is useful for debugging what the values of variables are if your code isn't working the way you think it should, all you have to do is check the console in your dev tools to see what is printed.\r\n```console.log(p)```\r\n\r\nIn this case, the ```p``` parameter contains two objects, ```char``` and ```item```. Here's an abridged version of what gets printed. If you wanted to have a more generic function, you could use ```p.char``` and ```p.item``` to refer to the character that initiated the action, and the item they acted upon, respectively.\r\n```\r\n{\r\n  \"char\": {\r\n    \"name\": \"me\",\r\n    \"loc\": \"lounge\",\r\n    \"synonyms\": [\r\n      \"me\",\r\n      \"myself\"\r\n    ],\r\n    \"examine\": \"Just a regular guy.\",\r\n    \"isBeingFollowed\": false,\r\n    \"alias\": \"me\"\r\n  },\r\n  \"item\": {\r\n    \"name\": \"ima_enpici\",\r\n    \"npc\": true,\r\n    \"isFemale\": true,\r\n    \"alias\": \"Ima Enpici\",\r\n    \"loc\": \"lounge\",\r\n    \"examine\": \"An NPC with a chance of doing something.\",\r\n    \"actions\": [\r\n      0,\r\n      1,\r\n      2,\r\n      3\r\n    ]\r\n}\r\n```\r\nThis page of the wiki has some good information about text processor directives, including ```nm```.\r\n<https://github.com/ThePix/QuestJS/wiki/Using-Parameters-with-the-Text-Processor>",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're ever curious about what a variable is, you can always examine it by adding a line like this. This is useful for debugging what the values of variables are if your code isn't working the way you think it should, all you have to do is check the console in your dev tools to see what is printed.<br>\n<code>console.log(p)</code></p>\n<p>In this case, the <code>p</code> parameter contains two objects, <code>char</code> and <code>item</code>. Here's an abridged version of what gets printed. If you wanted to have a more generic function, you could use <code>p.char</code> and <code>p.item</code> to refer to the character that initiated the action, and the item they acted upon, respectively.</p>\n<pre><code>{\n  \"char\": {\n    \"name\": \"me\",\n    \"loc\": \"lounge\",\n    \"synonyms\": [\n      \"me\",\n      \"myself\"\n    ],\n    \"examine\": \"Just a regular guy.\",\n    \"isBeingFollowed\": false,\n    \"alias\": \"me\"\n  },\n  \"item\": {\n    \"name\": \"ima_enpici\",\n    \"npc\": true,\n    \"isFemale\": true,\n    \"alias\": \"Ima Enpici\",\n    \"loc\": \"lounge\",\n    \"examine\": \"An NPC with a chance of doing something.\",\n    \"actions\": [\n      0,\n      1,\n      2,\n      3\n    ]\n}\n</code></pre>\n<p>This page of the wiki has some good information about text processor directives, including <code>nm</code>.<br>\n<a href=\"https://github.com/ThePix/QuestJS/wiki/Using-Parameters-with-the-Text-Processor\">https://github.com/ThePix/QuestJS/wiki/Using-Parameters-with-the-Text-Processor</a></p>\n\n",
      "PostDate": "2024-04-29T20:54:35.0666806Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cc7521e6-de40-411c-9a24-9730cee0afa6",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay thanks. One last question hopefully please.\r\n\r\nI'm trying to get the verb to display A) itself and B) its percentage chance based on condition parameters of the verb list itself, or by functions that can work off dynamically altered values but some or if not all the verbs no longer display at all. I use displayAction() for working out whether to display the action verb (in this case Snuggle) based on the new \"action\" parameter on the  on the newVerbs[] itself and there's also a hardcoded boolean flag called displayPerc for deciding whether to push the % onto the verb, so for ones like Follow and Unfollow that don't need a percentage chance to work it makes sense not to show anything for it. \r\n\r\n```\r\n\"use strict\"\r\n\r\ngame.tvChance = 50\r\ngame.snuggleChance = 30\r\ngame.eatChance = 70\r\ngame.drinkChance = 40\r\n\r\nconst ACTION_WATCHTV = 0;\r\nconst ACTION_SNUGGLE = 1;\r\nconst ACTION_EATWITH = 2;\r\nconst ACTION_DRINKWITH = 3;\r\nconst ACTION_TOFOLLOW=4;\r\nconst ACTION_TOUNFOLLOW=5;\r\n\r\nconst newVerbs = [\r\n  {name: \"Eat with\", action: ACTION_EATWITH, loc: \"kitchen\", chance:function(){return game.eatChance}, displayPerc: true},\r\n  {name: \"Drink with\", action: ACTION_DRINKWITH, loc: \"kitchen\", chance:function(){return game.drinkChance}, displayPerc: true},  \r\n  {name: \"Snuggle up with\", action: ACTION_SNUGGLE, loc: \"lounge\", chance:function(){return getSnuggleChance()}, displayPerc: true},\r\n  {name: \"Watch TV with\", action: ACTION_WATCHTV, loc: \"lounge\", displayPerc: false},\r\n  {name: \"Ask to follow\", action: ACTION_TOFOLLOW, displayPerc: false},\r\n  {name: \"Ask to unfollow\", action: ACTION_TOUNFOLLOW,displayPerc: false}  \r\n]\r\n\r\nfor (let verb of newVerbs){\r\n  new Cmd(verb.name, {\r\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\r\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n  })\r\n} \r\n\r\nfunction displayAction(action) {\r\n\tvar displayAction = true\r\n\t\r\n\tswitch (action) {\r\n\t\tcase ACTION_SNUGGLE:\r\n\t\t\tdisplayAction = false\r\n\t\t\tbreak;\t\t\t\r\n\t}\r\n\t\r\n\treturn displayAction\r\n}\r\n\r\ncreateItem(\"me\", PLAYER(), {\r\n  loc:\"lounge\",\r\n  synonyms:['me', 'myself'],\r\n  examine: \"Just a regular guy.\",\r\n  isBeingFollowed: false,\r\n})\r\n\r\ncreateRoom(\"lounge\", {\r\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\r\n    east: new Exit(\"kitchen\"),\t\r\n})\r\n\r\ncreateRoom(\"kitchen\", {\r\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\r\n    west: new Exit(\"lounge\"),\t\r\n})\r\n\r\ncreateItem(\"ima_enpici\", NPC(true),\r\n{ \r\n  alias:\"Ima Enpici\",\r\n  loc:\"lounge\",\r\n  examine:\"An NPC with a chance of doing something.\",\r\n  afterCreation:function(o) {\r\n    o.verbFunctions.push(function(o, verbList) {\r\n      for (let verb of newVerbs){\r\n\t\tconst verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\r\n\t\tconst verb_index = verbList.findIndex(v => verb_regex.test(v))\r\n\t\tconsole.log(\"Verb index: \" + verb_index)\r\n\t\tif (verb_index > -1){\r\n\t\t\t// Not found\r\n\t\t\tconsole.log(\"Verb index \" + verb_index + \" was spliced\")\r\n\t\t\tverbList.splice(verb_index, 1);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (!displayAction(verb.action)) {\r\n\t\t\t// Hide the action\r\n\t\t\tconsole.log(\"Verb action: \" + verb.action + \"was not displayed\")\r\n\t\t\tverbList.splice(verb_index, 1);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"Verb action: \" + verb.action + \"was displayed\")\r\n\t\t}\r\n\t\tconsole.log(\"Display perc: \" + verb.displayPerc)\r\n\t\tconsole.log(\"Verb chance: \" + verb.chance)\r\n\t\t// Display the action percentage chance\r\n\t\tif (verb.displayPerc) {\r\n\t\t\tif (!verb.loc || verb.loc === o.loc){\r\n\t\t\t  verbList.push(`${verb.name} (${verb.chance()}%)`)\r\n\t\t\t}\r\n\t\t}\r\n      }\r\n    })\r\n  },\r\n  watchtvwith:function(player){\r\n    if (random.chance(game.tvChance)){\r\n      msg (\"You watched TV with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n  snugglewith:function(player){\r\n    if (random.chance(game.snuggleChance)){\r\n      msg (\"You snuggled with {nm:ima_enpici}.\")\r\n    } else {\r\n      msg (\"You failed to snuggle with {nm:ima_enpici}.\")\r\n    }\r\n  },\r\n  eatwith:function(player){\r\n    if (random.chance(game.eatChance)){\r\n      msg (\"They ate dinner with you.\")\r\n    } else {\r\n      msg (\"They didn't eat dinner with you.\")\r\n    }\r\n  }, \r\n  drinkwith:function(player){\r\n    if (random.chance(game.drinkChance)){\r\n      msg (\"They drank with you.\")\r\n    } else {\r\n      msg (\"They didn't drink with you.\")\r\n    }\r\n  },  \r\n  follow: function(player) {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\r\n\t\t} \r\n\t\telse {\r\n\t\t\tthis.setLeader(w.me)\r\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\r\n\t\t\tw.me.isBeingFollowed = true\r\n\t\t}\r\n  },\r\n  unfollow: function(player) {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tw.ima_enpici.setLeader()\r\n\t\t\tw.me.isBeingFollowed = false\r\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\r\n\t\t}\r\n\t},  \r\n});\r\n\r\nio.clickItemAction = function(itemName, action) {\r\n  if (io.disableLevel) return\r\n  const item = w[itemName];\r\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\r\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\r\n    action = action.replace(arr[0], \"\")\r\n  }\r\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\r\n  runCmd(cmd)\r\n}\r\n\r\nnew Cmd(\"Follow\", {\r\n    regex:new RegExp('^' + \"Ask to follow\".toLowerCase() + ' (.+)$'),\r\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n})\r\n\r\nnew Cmd(\"Unfollow\", {\r\n    regex:new RegExp('^' + \"Ask to unfollow\".toLowerCase() + ' (.+)$'),\r\n    attName:\"Unfollow\".toLowerCase().replace(/ /g, ''),\r\n    objects:[\r\n      {scope: parser.isHere},\r\n    ],\r\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\r\n})\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay thanks. One last question hopefully please.</p>\n<p>I'm trying to get the verb to display A) itself and B) its percentage chance based on condition parameters of the verb list itself, or by functions that can work off dynamically altered values but some or if not all the verbs no longer display at all. I use displayAction() for working out whether to display the action verb (in this case Snuggle) based on the new \"action\" parameter on the  on the newVerbs[] itself and there's also a hardcoded boolean flag called displayPerc for deciding whether to push the % onto the verb, so for ones like Follow and Unfollow that don't need a percentage chance to work it makes sense not to show anything for it.</p>\n<pre><code>\"use strict\"\n\ngame.tvChance = 50\ngame.snuggleChance = 30\ngame.eatChance = 70\ngame.drinkChance = 40\n\nconst ACTION_WATCHTV = 0;\nconst ACTION_SNUGGLE = 1;\nconst ACTION_EATWITH = 2;\nconst ACTION_DRINKWITH = 3;\nconst ACTION_TOFOLLOW=4;\nconst ACTION_TOUNFOLLOW=5;\n\nconst newVerbs = [\n  {name: \"Eat with\", action: ACTION_EATWITH, loc: \"kitchen\", chance:function(){return game.eatChance}, displayPerc: true},\n  {name: \"Drink with\", action: ACTION_DRINKWITH, loc: \"kitchen\", chance:function(){return game.drinkChance}, displayPerc: true},  \n  {name: \"Snuggle up with\", action: ACTION_SNUGGLE, loc: \"lounge\", chance:function(){return getSnuggleChance()}, displayPerc: true},\n  {name: \"Watch TV with\", action: ACTION_WATCHTV, loc: \"lounge\", displayPerc: false},\n  {name: \"Ask to follow\", action: ACTION_TOFOLLOW, displayPerc: false},\n  {name: \"Ask to unfollow\", action: ACTION_TOUNFOLLOW,displayPerc: false}  \n]\n\nfor (let verb of newVerbs){\n  new Cmd(verb.name, {\n    regex:new RegExp('^' + verb.name.toLowerCase() + ' (.+)$'),\n    attName:verb.name.toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n  })\n} \n\nfunction displayAction(action) {\n\tvar displayAction = true\n\t\n\tswitch (action) {\n\t\tcase ACTION_SNUGGLE:\n\t\t\tdisplayAction = false\n\t\t\tbreak;\t\t\t\n\t}\n\t\n\treturn displayAction\n}\n\ncreateItem(\"me\", PLAYER(), {\n  loc:\"lounge\",\n  synonyms:['me', 'myself'],\n  examine: \"Just a regular guy.\",\n  isBeingFollowed: false,\n})\n\ncreateRoom(\"lounge\", {\n\tdesc:\"The lounge is has a comfy looking sofa and a large TV.\",\n    east: new Exit(\"kitchen\"),\t\n})\n\ncreateRoom(\"kitchen\", {\n\tdesc:\"The kitchen is a modern, slickly designed food space.\",\n    west: new Exit(\"lounge\"),\t\n})\n\ncreateItem(\"ima_enpici\", NPC(true),\n{ \n  alias:\"Ima Enpici\",\n  loc:\"lounge\",\n  examine:\"An NPC with a chance of doing something.\",\n  afterCreation:function(o) {\n    o.verbFunctions.push(function(o, verbList) {\n      for (let verb of newVerbs){\n\t\tconst verb_regex = new RegExp(`${verb.name} \\([\\d]{1,3}\\)`)\n\t\tconst verb_index = verbList.findIndex(v =&gt; verb_regex.test(v))\n\t\tconsole.log(\"Verb index: \" + verb_index)\n\t\tif (verb_index &gt; -1){\n\t\t\t// Not found\n\t\t\tconsole.log(\"Verb index \" + verb_index + \" was spliced\")\n\t\t\tverbList.splice(verb_index, 1);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!displayAction(verb.action)) {\n\t\t\t// Hide the action\n\t\t\tconsole.log(\"Verb action: \" + verb.action + \"was not displayed\")\n\t\t\tverbList.splice(verb_index, 1);\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"Verb action: \" + verb.action + \"was displayed\")\n\t\t}\n\t\tconsole.log(\"Display perc: \" + verb.displayPerc)\n\t\tconsole.log(\"Verb chance: \" + verb.chance)\n\t\t// Display the action percentage chance\n\t\tif (verb.displayPerc) {\n\t\t\tif (!verb.loc || verb.loc === o.loc){\n\t\t\t  verbList.push(`${verb.name} (${verb.chance()}%)`)\n\t\t\t}\n\t\t}\n      }\n    })\n  },\n  watchtvwith:function(player){\n    if (random.chance(game.tvChance)){\n      msg (\"You watched TV with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to watch TV with {nm:ima_enpici}.\")\n    }\n  },\n  snugglewith:function(player){\n    if (random.chance(game.snuggleChance)){\n      msg (\"You snuggled with {nm:ima_enpici}.\")\n    } else {\n      msg (\"You failed to snuggle with {nm:ima_enpici}.\")\n    }\n  },\n  eatwith:function(player){\n    if (random.chance(game.eatChance)){\n      msg (\"They ate dinner with you.\")\n    } else {\n      msg (\"They didn't eat dinner with you.\")\n    }\n  }, \n  drinkwith:function(player){\n    if (random.chance(game.drinkChance)){\n      msg (\"They drank with you.\")\n    } else {\n      msg (\"They didn't drink with you.\")\n    }\n  },  \n  follow: function(player) {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\n\t\t} \n\t\telse {\n\t\t\tthis.setLeader(w.me)\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\n\t\t\tw.me.isBeingFollowed = true\n\t\t}\n  },\n  unfollow: function(player) {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tw.ima_enpici.setLeader()\n\t\t\tw.me.isBeingFollowed = false\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\n\t\t}\n\t\telse {\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\n\t\t}\n\t},  \n});\n\nio.clickItemAction = function(itemName, action) {\n  if (io.disableLevel) return\n  const item = w[itemName];\n  if (/\\w+ \\([\\d]{1,3}%\\)/i.test(action)){\n    const arr = / \\([\\d]{1,3}%\\)/g.exec(action)\n    action = action.replace(arr[0], \"\")\n  }\n  const cmd = action.includes('%') ? action.replace('%', item.alias) : action + ' ' + item.alias\n  runCmd(cmd)\n}\n\nnew Cmd(\"Follow\", {\n    regex:new RegExp('^' + \"Ask to follow\".toLowerCase() + ' (.+)$'),\n    attName:\"Follow\".toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n})\n\nnew Cmd(\"Unfollow\", {\n    regex:new RegExp('^' + \"Ask to unfollow\".toLowerCase() + ' (.+)$'),\n    attName:\"Unfollow\".toLowerCase().replace(/ /g, ''),\n    objects:[\n      {scope: parser.isHere},\n    ],\n    defmsg:\"{pv:item:'be:true} not something you can do that with.\",\n})\n</code></pre>\n\n",
      "PostDate": "2024-04-29T22:17:55.288518Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f3416e70-705e-4072-a109-ce23fdc3bdbf",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think most of the problem was in the verbFunction. You want the whole thing to execute every time, and when you used the continue keyword, it would jump to the next verb in the array.\r\n\r\n```\r\nafterCreation:function(o) {\r\n    o.verbFunctions.push(function(o, verbList) {\r\n      for (let verb of newVerbs){\r\n        const verb_regex = new RegExp(`${verb.name}( \\([\\d]{1,3}\\))?`)\r\n        const verb_index = verbList.findIndex(v => verb_regex.test(v))\r\n        console.log(\"Verb index: \" + verb_index)\r\n        if (verb_index > -1){\r\n          // Found\r\n          verbList.splice(verb_index, 1);\r\n        }\r\n        // Display the action percentage chance\r\n        if (displayAction(verb.action) && (!verb.loc || verb.loc === o.loc)){\r\n          if (verb.displayPerc){\r\n            verbList.push(`${verb.name} (${verb.chance()}%)`)\r\n          } else {\r\n            verbList.push(`${verb.name}`)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  },\r\n```\r\n\r\nThe other thing is that, since you're adding all of your custom verbs in that array, the function names need to match the verb names exactly.\r\n\r\n```\r\nasktofollow: function(player) {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\r\n\t\t} \r\n\t\telse {\r\n\t\t\tthis.setLeader(w.me)\r\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\r\n\t\t\tw.me.isBeingFollowed = true\r\n\t\t}\r\n  },\r\n  asktounfollow: function(player) {\r\n\t\tif (w.me.isBeingFollowed) {\r\n\t\t\tw.ima_enpici.setLeader()\r\n\t\t\tw.me.isBeingFollowed = false\r\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\r\n\t\t}\r\n\t},\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think most of the problem was in the verbFunction. You want the whole thing to execute every time, and when you used the continue keyword, it would jump to the next verb in the array.</p>\n<pre><code>afterCreation:function(o) {\n    o.verbFunctions.push(function(o, verbList) {\n      for (let verb of newVerbs){\n        const verb_regex = new RegExp(`${verb.name}( \\([\\d]{1,3}\\))?`)\n        const verb_index = verbList.findIndex(v =&gt; verb_regex.test(v))\n        console.log(\"Verb index: \" + verb_index)\n        if (verb_index &gt; -1){\n          // Found\n          verbList.splice(verb_index, 1);\n        }\n        // Display the action percentage chance\n        if (displayAction(verb.action) &amp;&amp; (!verb.loc || verb.loc === o.loc)){\n          if (verb.displayPerc){\n            verbList.push(`${verb.name} (${verb.chance()}%)`)\n          } else {\n            verbList.push(`${verb.name}`)\n          }\n        }\n      }\n    })\n  },\n</code></pre>\n<p>The other thing is that, since you're adding all of your custom verbs in that array, the function names need to match the verb names exactly.</p>\n<pre><code>asktofollow: function(player) {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tmsg (\"{nm:ima_enpici} is already following you\")\n\t\t} \n\t\telse {\n\t\t\tthis.setLeader(w.me)\n\t\t\tmsg (\"{nm:ima_enpici} is now following you\")\n\t\t\tw.me.isBeingFollowed = true\n\t\t}\n  },\n  asktounfollow: function(player) {\n\t\tif (w.me.isBeingFollowed) {\n\t\t\tw.ima_enpici.setLeader()\n\t\t\tw.me.isBeingFollowed = false\n\t\t\tmsg (\"{nm:ima_enpici} is no longer following you\")\n\t\t}\n\t\telse {\n\t\t\tmsg (\"{nm:ima_enpici} isn't following you anyway\")\n\t\t}\n\t},\n</code></pre>\n\n",
      "PostDate": "2024-04-30T02:19:33.3453048Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
