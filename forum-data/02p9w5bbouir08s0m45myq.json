{
  "Topic": {
    "TopicId": "02p9w5bbouir08s0m45myq",
    "ForumId": "10",
    "Title": "A thought for making ShowMenu more intuitive",
    "LastUpdated": "2018-10-18T08:30:17.2127194Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4918f7ad-446b-4ea1-a36f-449e566d04e6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi!\r\nHere's a function that could be used with ShowMenu when handling an objectlist.\r\nUsing this for disambiguation menus would be really neat :)\r\n\r\nTwo features:\r\n1. If an object has an attribute `equivalent_attributes` (a string of attribute names separated with semicolons), then multiple objects in which those attributes match are removed from the list. For example, if a player types \"eat apple\" and there are 3 identical apples on the table, you don't want a disambiguation menu asking them to choose \"apple\", \"apple\", or \"apple\".\r\n\r\n     I originally thought of removing duplicate items from the menu if they have the same prototype; but then realised you could have an apple with some attribute to make it either red or green, cloned from the same base object. So this method allows an object to specify which objects it should be considered identical to. A good value might typically be `\"prototype;parent\"`.\r\n\r\n2. Where multiple objects have the same alias, look through their `alt` attributes to see if there is a distinct name that only applies to one of them.\r\n\r\n```\r\n<function name=\"FindUniqueNames\" parameters=\"objects\" type=\"stringdictionary\">\r\n  filtered_objects = NewObjectList()\r\n  names_for_object = NewDictionary()\r\n  duplicate_names = NewStringList()\r\n  all_names = NewStringList()\r\n  foreach (obj, objects) {\r\n    redundant = false\r\n    if (ListContains (filtered_objects, obj)) {\r\n      redundant = true\r\n    }\r\n    else if (HasString (obj, \"equivalent_attributes\")) {\r\n      attrs = obj.equivalent_attributes\r\n      possibles = FilterByAttribute (filtered_objects, \"equivalent_attributes\", attrs)\r\n      foreach (attr, Split (attrs)) {\r\n        possibles = FilterByAttribute (possibles, attr, GetAttribute (obj, attr))\r\n      }\r\n      if (ListCount (possibles) > 0) {\r\n        redundant = true\r\n      }\r\n    }\r\n    if (not redundant) {\r\n      list add (filtered_objects, obj)\r\n      names = NewStringList()\r\n      list add (names, GetDisplayAlias(obj))\r\n      if (HasAttribute (obj, \"alt\")) {\r\n        names = ListCombine (names, obj.alt)\r\n      }\r\n      // could add stuff here to generate alternate names like \"Hat (on hatstand)\", \"Hat (in inventory)\", \"Hat (worn)\", or \"Lamp (switched on)\"\r\n      foreach (name, names) {\r\n        if (not ListContains (all_names, name)) {\r\n          list remove (all_names, name)\r\n        }\r\n        else if (not ListContains (duplicate_names, name)) {\r\n          list add (duplicate_names, name)\r\n        }\r\n      }\r\n      dictionary add (names_for_object, obj.name, names)\r\n    }\r\n  }\r\n  result = NewStringDictionary()\r\n  names_used = NewStringList()\r\n  foreach (key, names_for_object) {\r\n    names = DictionaryItem (names_for_object, key)\r\n    unames = ListExclude (names, duplicate_names)\r\n    if (ListCount (unames) = 0) {\r\n      unames = ListExclude (names, names_used)\r\n      if (ListCount (unames) = 0) {\r\n        unames = names\r\n      }\r\n    }\r\n    myname = ListItem (unames, 0)\r\n    dictionary add (result, key, myname)\r\n    list add (names_used, myname)\r\n  }\r\n  return result\r\n</function>\r\n```\r\n\r\nOK, I've not finished polishing this (or tested it), but I need to get back to actual work and stop procrastinating with things that happened to cross my mind.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi!<br>\nHere's a function that could be used with ShowMenu when handling an objectlist.<br>\nUsing this for disambiguation menus would be really neat :)</p>\n<p>Two features:</p>\n<ol>\n<li>\n<p>If an object has an attribute <code>equivalent_attributes</code> (a string of attribute names separated with semicolons), then multiple objects in which those attributes match are removed from the list. For example, if a player types \"eat apple\" and there are 3 identical apples on the table, you don't want a disambiguation menu asking them to choose \"apple\", \"apple\", or \"apple\".</p>\n<p>I originally thought of removing duplicate items from the menu if they have the same prototype; but then realised you could have an apple with some attribute to make it either red or green, cloned from the same base object. So this method allows an object to specify which objects it should be considered identical to. A good value might typically be <code>\"prototype;parent\"</code>.</p>\n</li>\n<li>\n<p>Where multiple objects have the same alias, look through their <code>alt</code> attributes to see if there is a distinct name that only applies to one of them.</p>\n</li>\n</ol>\n<pre><code>&lt;function name=\"FindUniqueNames\" parameters=\"objects\" type=\"stringdictionary\"&gt;\n  filtered_objects = NewObjectList()\n  names_for_object = NewDictionary()\n  duplicate_names = NewStringList()\n  all_names = NewStringList()\n  foreach (obj, objects) {\n    redundant = false\n    if (ListContains (filtered_objects, obj)) {\n      redundant = true\n    }\n    else if (HasString (obj, \"equivalent_attributes\")) {\n      attrs = obj.equivalent_attributes\n      possibles = FilterByAttribute (filtered_objects, \"equivalent_attributes\", attrs)\n      foreach (attr, Split (attrs)) {\n        possibles = FilterByAttribute (possibles, attr, GetAttribute (obj, attr))\n      }\n      if (ListCount (possibles) &gt; 0) {\n        redundant = true\n      }\n    }\n    if (not redundant) {\n      list add (filtered_objects, obj)\n      names = NewStringList()\n      list add (names, GetDisplayAlias(obj))\n      if (HasAttribute (obj, \"alt\")) {\n        names = ListCombine (names, obj.alt)\n      }\n      // could add stuff here to generate alternate names like \"Hat (on hatstand)\", \"Hat (in inventory)\", \"Hat (worn)\", or \"Lamp (switched on)\"\n      foreach (name, names) {\n        if (not ListContains (all_names, name)) {\n          list remove (all_names, name)\n        }\n        else if (not ListContains (duplicate_names, name)) {\n          list add (duplicate_names, name)\n        }\n      }\n      dictionary add (names_for_object, obj.name, names)\n    }\n  }\n  result = NewStringDictionary()\n  names_used = NewStringList()\n  foreach (key, names_for_object) {\n    names = DictionaryItem (names_for_object, key)\n    unames = ListExclude (names, duplicate_names)\n    if (ListCount (unames) = 0) {\n      unames = ListExclude (names, names_used)\n      if (ListCount (unames) = 0) {\n        unames = names\n      }\n    }\n    myname = ListItem (unames, 0)\n    dictionary add (result, key, myname)\n    list add (names_used, myname)\n  }\n  return result\n&lt;/function&gt;\n</code></pre>\n<p>OK, I've not finished polishing this (or tested it), but I need to get back to actual work and stop procrastinating with things that happened to cross my mind.</p>\n\n",
      "PostDate": "2018-10-18T08:30:17.2127194Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
