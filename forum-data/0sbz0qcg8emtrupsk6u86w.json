{
  "Topic": {
    "TopicId": "0sbz0qcg8emtrupsk6u86w",
    "ForumId": "10",
    "Title": "Chance of Success ",
    "LastUpdated": "2019-09-17T02:32:38.8857079Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "59d42369-6ded-4eda-a637-034d7facc94c",
      "UserId": 381502,
      "Username": "Eye of the Jellyfish",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c30573c1b590ff5e26639ba58e25ff36?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Perhaps this is covered elsewhere, but I have wasted a lot of time searching and have only found copy/paste code for specific combat systems. What I would like to know is how to make a simple check, governed by the roll of a (metaphorical) die; the result of which is compared to a numerical value that represents difficulty, (or anything else I need it to,) in order to determine if the action is successful. Attacking, Climbing, Swimming; these are the types of things I imagine using the check for, along with possibly determining whether a random event occurs or not. I want to understand how to make simple checks so that I have a foundation to work off of. From there I hope to be able to incorporate modifiers, such as those added by items or potions etc.",
      "EditableFormat": "markdown",
      "HTML": "<p>Perhaps this is covered elsewhere, but I have wasted a lot of time searching and have only found copy/paste code for specific combat systems. What I would like to know is how to make a simple check, governed by the roll of a (metaphorical) die; the result of which is compared to a numerical value that represents difficulty, (or anything else I need it to,) in order to determine if the action is successful. Attacking, Climbing, Swimming; these are the types of things I imagine using the check for, along with possibly determining whether a random event occurs or not. I want to understand how to make simple checks so that I have a foundation to work off of. From there I hope to be able to incorporate modifiers, such as those added by items or potions etc.</p>\n\n",
      "PostDate": "2019-09-17T02:32:38.8857079Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f41d810b-d31f-4e1f-829b-f942809ec4a8",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a basic dice roll, 1-20 inclusive, with success being 12 or more, with the player having the attribute GenericBonus, an integer attribute equal to 3. If the basic roll is 20, you get critical success.\r\n```\r\nRoll=GetRandomInt(1,20)\r\nif(Roll=20){\r\n//Critical success stuff goes here\r\n}\r\nelse if(Roll+Player.GenericBonus>=12){\r\n//Success stuff goes here\r\n}\r\nelse{\r\n//Failure stuff goes here\r\n}\r\n```\r\nAdd other features as need be.",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a basic dice roll, 1-20 inclusive, with success being 12 or more, with the player having the attribute GenericBonus, an integer attribute equal to 3. If the basic roll is 20, you get critical success.</p>\n<pre><code>Roll=GetRandomInt(1,20)\nif(Roll=20){\n//Critical success stuff goes here\n}\nelse if(Roll+Player.GenericBonus&gt;=12){\n//Success stuff goes here\n}\nelse{\n//Failure stuff goes here\n}\n</code></pre>\n<p>Add other features as need be.</p>\n\n",
      "PostDate": "2019-09-17T03:02:07.4510856Z",
      "LastEditDate": "2019-09-17T03:02:22.5639562Z",
      "link": null
    },
    {
      "PostId": "c69d2d71-3046-4125-a648-bcdd906e350b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code above is a pretty good example for doing stuff with stats. But if you just want a fixed chance of success, you can use the `RandomChance` function, which rolls a 100-sided die and compares it to the target number you specify.\r\n\r\nExample!\r\n```\r\nmsg (\"You only have a 17% chance of success at this task!\")\r\nif (RandomChance (17)) {\r\n  msg (\"But you make it!\")\r\n}\r\nelse {\r\n  msg (\"so nobody is surprised when you fail!\")\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The code above is a pretty good example for doing stuff with stats. But if you just want a fixed chance of success, you can use the <code>RandomChance</code> function, which rolls a 100-sided die and compares it to the target number you specify.</p>\n<p>Example!</p>\n<pre><code>msg (\"You only have a 17% chance of success at this task!\")\nif (RandomChance (17)) {\n  msg (\"But you make it!\")\n}\nelse {\n  msg (\"so nobody is surprised when you fail!\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-09-17T07:29:03.5110982Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13bc2e2c-f475-4a0a-ad05-dd091a3c3567",
      "UserId": 381502,
      "Username": "Eye of the Jellyfish",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c30573c1b590ff5e26639ba58e25ff36?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you! That helps a lot!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you! That helps a lot!</p>\n\n",
      "PostDate": "2019-09-17T18:29:22.8393979Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "97d86d2f-342c-4f0c-8df9-2c5881d6c3ff",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can also simulate dice.\r\n\r\nAs an example,\r\nplayer.dice = DiceRoll(\"1d4\")\r\nWould return a number between 1-4. It also works for simulating rolls one might make in a game based around your typical d20 rulesets, like;\r\n\r\nplayer.dice = DiceRoll(\"3d6\")\r\n\r\n-- Which would be between 3 and 18. Because it simulates each dice, the weighing of the resulting number is far greater towards the middle results, with lower and higher results rarer. ",
      "EditableFormat": "markdown",
      "HTML": "<p>You can also simulate dice.</p>\n<p>As an example,<br>\nplayer.dice = DiceRoll(\"1d4\")<br>\nWould return a number between 1-4. It also works for simulating rolls one might make in a game based around your typical d20 rulesets, like;</p>\n<p>player.dice = DiceRoll(\"3d6\")</p>\n<p>-- Which would be between 3 and 18. Because it simulates each dice, the weighing of the resulting number is far greater towards the middle results, with lower and higher results rarer.</p>\n\n",
      "PostDate": "2019-09-18T02:04:55.1454954Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fce0e006-8bbb-450a-a2a9-931bc9d892ef",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's 4 built-in Randomization Functions:\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html\r\nhttps://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html\r\nhttps://docs.textadventures.co.uk/quest/functions/getrandomint.html\r\nhttps://docs.textadventures.co.uk/quest/functions/getrandomdouble.html\r\n\r\nwith the 'DiceRoll', you don't get to change the sides' values (always: starts at 1 for first side and increments by 1 for each additional side) directly, but you can have the rest of the expression, along with the 'DiceRoll' value, to produce the same effect as if the sides' values were different, as there's no limit to what you can do with the expression/equation/formula) itself, of course\r\n\r\n```\r\ninteger_variable = DiceRoll (\"1d6\") // a normal die: 1 die with 6 sides (values: 1 to 6)\r\n\r\nboolean_variable = RandomChance (75) // 75% of being 'true' // input bounds: 0 to 100  // (0% to 100%)\r\n\r\ninteger_variable = GetRandomInt (0,100) // randomly selects a (inclusive, I think) value of: 0 to 100\r\n\r\ndouble_variable = GetRandomDouble () // randomly selects a (exclusive, I think) value of: 0.0 to 1.0\r\n```\r\n\r\nfor a common example in RPGs, you can especially combine the 'GetRandomInt' and the 'RandomChance' for doing item drops:\r\n\r\n```\r\n// creating the items (Objects) for this example:\r\n\r\ncreate (\"candy\")\r\ncreate (\"chocolate\")\r\ncreate (\"honeyjar\")\r\ncreate (\"cupofwishes\")\r\n\r\n// creating a new/blank Object List Variable VARIABLE and storing/adding the reference/pointer/address (the items/Objects aren't actually moved into the list: think of lists as a PE class' or a classroom's roll call list on paper of the students' names, but the students themselves physically aren't actually on or inside of the paper list, lol) of the items (Objects) into an Object List Variable VARIABLE:\r\n\r\nitem_objectlist_variable = NewObjectList ()\r\n\r\nlist add (item_objectlist_variable, candy)\r\nlist add (item_objectlist_variable, chocolate)\r\nlist add (item_objectlist_variable, honeyjar)\r\nlist add (item_objectlist_variable, cupofwishes)\r\n\r\n// randomly selecting one of the items (Objects), using the Object List Data Type's features, and then creating a clone (Object) of it, and lastly, storing that cloned object into an Object Variable VARIABLE:\r\n\r\nviable_integer_variable = GetRandomInt (0, ListCount (item_objectlist_variable) - 1)\r\n\r\ncloned_item_object_variable = CloneObject (ObjectListItem (item_objectlist_variable, viable_integer_variable))\r\n\r\n// randomly (based on the player's luck stat), decided whether they actually get that selected item or not:\r\n\r\nboolean_variable = RandomChance (player.luck) // for this example, all stats (like 'luck') would have the bounds of: 0 to 100\r\n\r\n// the actual handling of if they get the item, or not:\r\n\r\nif (boolean_variable) {\r\n  cloned_item_object_variable.parent = player // moves the cloned item object to the player's inventory (within the default 'player' Player Object)\r\n  msg (\"You got the randomly selected item: \" + GetDisplayAlias (cloned_item_object_variable) + \", as a dropped item\")\r\n} else {\r\n  destroy (cloned_item_object_variable.name) // due to the laziness/quickness/simpleness of my example, I have to deal with the clone not being used, meaning I need to destroy it, if I used a better example, this could be avoided (like not creating the clone if it's not going to be used in the first place, lol)\r\n  msg (\"You failed to get a dropped item\")\r\n}\r\n```\r\n\r\n------------\r\n\r\nthe above example is a more complex example, but it should give you some ideas... on the various ways that you can use the 4 built-in Randomization Functions\r\n\r\n----------\r\n\r\nbut if you want more simple uses, some examples:\r\n\r\n```\r\nif (RandomChance (player.sneak)) {\r\n  player.sneaking = true\r\n} else {\r\n  player.sneaking = false\r\n}\r\n\r\n------------------------------\r\n\r\ncreate (\"katana\")\r\n\r\nkatana.damage = 50\r\n\r\nplayer.weapon = katana\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * GetRandomDouble ()\r\n\r\n// hopefully using doubles with integers won't cause any errors, and instead truncation just occurs, but hopefully you do understand the issues/complexity of working with integers and doubles together: when/where does rounding occur, and what type of rounding occurs... preciseness gets complicated when using doubles and integers together... (also, doubles are much more operations internally than with integers, so, along with the rounding complications, in general, if you can, you want to avoid using doubles, unless you have to do so, and try to just use integers, as it usually just makes things easier for you, and also internally its more efficient/faster to use integers as they require less operations than do doubles, but it can be complicated in terms of the math in how to produce the same effect with just integers, than in just simply using doubles, and/or doubles with integers, lol. Basically, it really depends on your skill/knowledge in math, lol. I hate math... laughs)\r\n\r\n// or:\r\n\r\nplayer.damage = player.weapon.damage + DiceRoll (\"3d12\") // the dice roll would add: +3 (3 dice x 1 value) to +36 (3 dice x 12 value) damage\r\n\r\n// or:\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n\r\n// just like math, you can use parenthesis to force priority, but it should (I hope) work correctly, as multiplication and division has higher priority over addition and subtraction, but you can always add in parenthesis regardless if you want to do so:\r\n\r\nplayer.damage = player.weapon.damage + (player.weapon.damage * (player.strength / 100))\r\n\r\n// but, when you need to do so, you need to do so, for example:\r\n\r\nx = 4 * (2 + 6)\r\nx = 4 * (8)\r\nx = 32\r\n\r\n// is very different from:\r\n\r\nx = 4 * 2 + 6 // x = (4 * 2) + 6\r\nx = 8 + 6 // x = (8) + 6\r\nx = 14\r\n\r\n// so, when it matters in what you want, make sure your parenthesis are correct, lol\r\n\r\n----------\r\n\r\nplayer.strength = player.strength + GetRandomInt (1,5) // +1 to +5 strength increase\r\n\r\n-----------\r\n\r\nif (RandomChance (GetRandomInt (0,100))) {\r\n  // true/success, do whatever scripting\r\n} else {\r\n  // false/failure, do whatever scripting\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>there's 4 built-in Randomization Functions:</p>\n<p>https://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html<br>\nhttps://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html<br>\nhttps://docs.textadventures.co.uk/quest/functions/getrandomint.html<br>\nhttps://docs.textadventures.co.uk/quest/functions/getrandomdouble.html</p>\n<p>with the 'DiceRoll', you don't get to change the sides' values (always: starts at 1 for first side and increments by 1 for each additional side) directly, but you can have the rest of the expression, along with the 'DiceRoll' value, to produce the same effect as if the sides' values were different, as there's no limit to what you can do with the expression/equation/formula) itself, of course</p>\n<pre><code>integer_variable = DiceRoll (\"1d6\") // a normal die: 1 die with 6 sides (values: 1 to 6)\n\nboolean_variable = RandomChance (75) // 75% of being 'true' // input bounds: 0 to 100  // (0% to 100%)\n\ninteger_variable = GetRandomInt (0,100) // randomly selects a (inclusive, I think) value of: 0 to 100\n\ndouble_variable = GetRandomDouble () // randomly selects a (exclusive, I think) value of: 0.0 to 1.0\n</code></pre>\n<p>for a common example in RPGs, you can especially combine the 'GetRandomInt' and the 'RandomChance' for doing item drops:</p>\n<pre><code>// creating the items (Objects) for this example:\n\ncreate (\"candy\")\ncreate (\"chocolate\")\ncreate (\"honeyjar\")\ncreate (\"cupofwishes\")\n\n// creating a new/blank Object List Variable VARIABLE and storing/adding the reference/pointer/address (the items/Objects aren't actually moved into the list: think of lists as a PE class' or a classroom's roll call list on paper of the students' names, but the students themselves physically aren't actually on or inside of the paper list, lol) of the items (Objects) into an Object List Variable VARIABLE:\n\nitem_objectlist_variable = NewObjectList ()\n\nlist add (item_objectlist_variable, candy)\nlist add (item_objectlist_variable, chocolate)\nlist add (item_objectlist_variable, honeyjar)\nlist add (item_objectlist_variable, cupofwishes)\n\n// randomly selecting one of the items (Objects), using the Object List Data Type's features, and then creating a clone (Object) of it, and lastly, storing that cloned object into an Object Variable VARIABLE:\n\nviable_integer_variable = GetRandomInt (0, ListCount (item_objectlist_variable) - 1)\n\ncloned_item_object_variable = CloneObject (ObjectListItem (item_objectlist_variable, viable_integer_variable))\n\n// randomly (based on the player's luck stat), decided whether they actually get that selected item or not:\n\nboolean_variable = RandomChance (player.luck) // for this example, all stats (like 'luck') would have the bounds of: 0 to 100\n\n// the actual handling of if they get the item, or not:\n\nif (boolean_variable) {\n  cloned_item_object_variable.parent = player // moves the cloned item object to the player's inventory (within the default 'player' Player Object)\n  msg (\"You got the randomly selected item: \" + GetDisplayAlias (cloned_item_object_variable) + \", as a dropped item\")\n} else {\n  destroy (cloned_item_object_variable.name) // due to the laziness/quickness/simpleness of my example, I have to deal with the clone not being used, meaning I need to destroy it, if I used a better example, this could be avoided (like not creating the clone if it's not going to be used in the first place, lol)\n  msg (\"You failed to get a dropped item\")\n}\n</code></pre>\n<hr>\n<p>the above example is a more complex example, but it should give you some ideas... on the various ways that you can use the 4 built-in Randomization Functions</p>\n<hr>\n<p>but if you want more simple uses, some examples:</p>\n<pre><code>if (RandomChance (player.sneak)) {\n  player.sneaking = true\n} else {\n  player.sneaking = false\n}\n\n------------------------------\n\ncreate (\"katana\")\n\nkatana.damage = 50\n\nplayer.weapon = katana\n\nplayer.damage = player.weapon.damage + player.weapon.damage * GetRandomDouble ()\n\n// hopefully using doubles with integers won't cause any errors, and instead truncation just occurs, but hopefully you do understand the issues/complexity of working with integers and doubles together: when/where does rounding occur, and what type of rounding occurs... preciseness gets complicated when using doubles and integers together... (also, doubles are much more operations internally than with integers, so, along with the rounding complications, in general, if you can, you want to avoid using doubles, unless you have to do so, and try to just use integers, as it usually just makes things easier for you, and also internally its more efficient/faster to use integers as they require less operations than do doubles, but it can be complicated in terms of the math in how to produce the same effect with just integers, than in just simply using doubles, and/or doubles with integers, lol. Basically, it really depends on your skill/knowledge in math, lol. I hate math... laughs)\n\n// or:\n\nplayer.damage = player.weapon.damage + DiceRoll (\"3d12\") // the dice roll would add: +3 (3 dice x 1 value) to +36 (3 dice x 12 value) damage\n\n// or:\n\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\n\n// just like math, you can use parenthesis to force priority, but it should (I hope) work correctly, as multiplication and division has higher priority over addition and subtraction, but you can always add in parenthesis regardless if you want to do so:\n\nplayer.damage = player.weapon.damage + (player.weapon.damage * (player.strength / 100))\n\n// but, when you need to do so, you need to do so, for example:\n\nx = 4 * (2 + 6)\nx = 4 * (8)\nx = 32\n\n// is very different from:\n\nx = 4 * 2 + 6 // x = (4 * 2) + 6\nx = 8 + 6 // x = (8) + 6\nx = 14\n\n// so, when it matters in what you want, make sure your parenthesis are correct, lol\n\n----------\n\nplayer.strength = player.strength + GetRandomInt (1,5) // +1 to +5 strength increase\n\n-----------\n\nif (RandomChance (GetRandomInt (0,100))) {\n  // true/success, do whatever scripting\n} else {\n  // false/failure, do whatever scripting\n}\n</code></pre>\n\n",
      "PostDate": "2019-09-18T03:16:48.6662495Z",
      "LastEditDate": "2019-09-18T03:50:27.3204209Z",
      "link": null
    },
    {
      "PostId": "d013d626-e04e-45a0-897f-933cd284894d",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I prefer to do it this way.\r\n```\r\nroll = GetRandomInt(1, 20)\r\nif (roll > 15) {\r\n  msg (\"You got a critical hit!\")\r\n  this.hipoints = this.hitpoints - 10\r\n}\r\nelse if (roll > 5) {\r\n  msg (\"You hit it!\")\r\n  this.hitpoints = this.hitpoints - 5\r\n}\r\nelse{\r\n  msg (\"You missed.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I prefer to do it this way.</p>\n<pre><code>roll = GetRandomInt(1, 20)\nif (roll &gt; 15) {\n  msg (\"You got a critical hit!\")\n  this.hipoints = this.hitpoints - 10\n}\nelse if (roll &gt; 5) {\n  msg (\"You hit it!\")\n  this.hitpoints = this.hitpoints - 5\n}\nelse{\n  msg (\"You missed.\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-09-18T04:47:56.3681153Z",
      "LastEditDate": "2019-09-18T04:49:32.6555595Z",
      "link": null
    },
    {
      "PostId": "4cd2b4b9-7360-4002-980d-b9436b83fa13",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "https://i.imgur.com/HEtnsWqb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I prefer...\r\n```\r\nchance = 55\r\nif (player.variable=\"variablehere\") {\r\n  chance = chance + 15\r\n}\r\nswitch (player.variable) {\r\n  case (2,3) {\r\n    chance = chance + 3\r\n  }\r\n  case (4,5,6) {\r\n    chance = chance + 6\r\n  }\r\n  case (7,8,9,10) {\r\n    chance = chance + 9\r\n  }\r\n}\r\nif (game.variable=True) {\r\n  chance = chance - 30\r\n}\r\n```\r\n```\r\nif (RandomChance(chance)) {\r\n  // success.\r\n  ClearScreen\r\n  msg (\"<br/>\")\r\n}\r\nelse {\r\n  // failure\r\n  ClearScreen\r\n  msg (\"<br/>\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I prefer...</p>\n<pre><code>chance = 55\nif (player.variable=\"variablehere\") {\n  chance = chance + 15\n}\nswitch (player.variable) {\n  case (2,3) {\n    chance = chance + 3\n  }\n  case (4,5,6) {\n    chance = chance + 6\n  }\n  case (7,8,9,10) {\n    chance = chance + 9\n  }\n}\nif (game.variable=True) {\n  chance = chance - 30\n}\n</code></pre>\n<pre><code>if (RandomChance(chance)) {\n  // success.\n  ClearScreen\n  msg (\"&lt;br/&gt;\")\n}\nelse {\n  // failure\n  ClearScreen\n  msg (\"&lt;br/&gt;\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-10-11T18:35:05.451292Z",
      "LastEditDate": "2019-10-11T18:42:02.5710586Z",
      "link": null
    },
    {
      "PostId": "b3cb2e61-fbc6-49e5-9080-9f0a40707d2d",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Something like this?\r\n```\r\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\r\nif (HasInt(weapon, damageatt)) {\r\n  damage = GetInt(weapon, damageatt)\r\n}\r\nelse {\r\n  damage = DiceRoll(GetString(weapon, damageatt))\r\n}\r\ndamage = damage * (100 - target.armour) / 100\r\nif (damage < 1) {\r\n  damage = 1\r\n}\r\nif (roll > 15) {\r\n  damage = damage * 3\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and get a critical (\" + damage + \" hits)!\")\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse if (roll > 5) {\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and hit (\" + damage + \" hits).\")\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse {\r\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and miss...\")\r\n}\r\n```\r\nThis is something like what you said.\r\nEdit:\r\nI just saw Anonynn responded to an old thread. Hi Anonynn!",
      "EditableFormat": "markdown",
      "HTML": "<p>Something like this?</p>\n<pre><code>roll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\nif (HasInt(weapon, damageatt)) {\n  damage = GetInt(weapon, damageatt)\n}\nelse {\n  damage = DiceRoll(GetString(weapon, damageatt))\n}\ndamage = damage * (100 - target.armour) / 100\nif (damage &lt; 1) {\n  damage = 1\n}\nif (roll &gt; 15) {\n  damage = damage * 3\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and get a critical (\" + damage + \" hits)!\")\n  target.hitpoints = target.hitpoints - damage\n}\nelse if (roll &gt; 5) {\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and hit (\" + damage + \" hits).\")\n  target.hitpoints = target.hitpoints - damage\n}\nelse {\n  msg (CapFirst(attacker.alias) + \" attack \" + target.alias + \" and miss...\")\n}\n</code></pre>\n<p>This is something like what you said.<br>\nEdit:<br>\nI just saw Anonynn responded to an old thread. Hi Anonynn!</p>\n\n",
      "PostDate": "2019-10-11T18:51:54.7343246Z",
      "LastEditDate": "2019-10-11T22:11:23.1641259Z",
      "link": null
    },
    {
      "PostId": "bbfab3eb-fe3d-4a26-bbed-a5b77362fd02",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "https://i.imgur.com/HEtnsWqb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya Jmnevil :D",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya Jmnevil :D</p>\n\n",
      "PostDate": "2019-10-12T18:31:45.3451382Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
