{
  "Topic": {
    "TopicId": "5paercpdb0wazp1v5lwpbg",
    "ForumId": "24",
    "Title": "Importing attributes from one game to its sequel",
    "LastUpdated": "2020-05-06T10:23:30.0153484Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7dcc313f-50c4-459c-8fa4-4c3d6682ea35",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It seems during lockdown I have nothing better to do than work on my Squiffy game and hit my own technical limitations!\r\n\r\nIs there any way that I could give players a code at the end of a game that they could enter at the beginning of the next game to import their character and decisions?\r\n\r\nOutputting it would be easy enough - for example if my character was called Bob, he had black hair and blue eyes and a dog called Rover, I could produce something at the end of the game like\r\n\r\n{charname}-{hair}-{eyes}-{dog} which would output Bob-black-blue-Rover\r\n\r\nOr  :\r\n\r\ncharname={charname}-hair={hair}-eyes={eyes}-dog={dog} to output charname=Bob-hair=black-eyes=blue-dog=Rover\r\n\r\nBut I can't figure out a way for a string like that to be imported into another game to set those attributes for the character there, eg to continue Bob's story.\r\n\r\nHas anyone done anything like this, or see a way to do it?\r\n\r\nThanks again in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>It seems during lockdown I have nothing better to do than work on my Squiffy game and hit my own technical limitations!</p>\n<p>Is there any way that I could give players a code at the end of a game that they could enter at the beginning of the next game to import their character and decisions?</p>\n<p>Outputting it would be easy enough - for example if my character was called Bob, he had black hair and blue eyes and a dog called Rover, I could produce something at the end of the game like</p>\n<p>{charname}-{hair}-{eyes}-{dog} which would output Bob-black-blue-Rover</p>\n<p>Or  :</p>\n<p>charname={charname}-hair={hair}-eyes={eyes}-dog={dog} to output charname=Bob-hair=black-eyes=blue-dog=Rover</p>\n<p>But I can't figure out a way for a string like that to be imported into another game to set those attributes for the character there, eg to continue Bob's story.</p>\n<p>Has anyone done anything like this, or see a way to do it?</p>\n<p>Thanks again in advance!</p>\n\n",
      "PostDate": "2020-05-06T10:23:30.0153484Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e1be922-ec20-48cd-afba-1ce9f01a246e",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You might give each value a coded number, like...\r\n```\r\n{if hair=black:{@hairCode=1}\r\n{if hair=brown:{@hairCode=2}\r\n{if hair=blonde:{@hairCode=3}\r\nYour continue code to play the next game is {name}{hairCode}\r\n```\r\nand so on. And at the end of your game, give the code, such as:\r\n```\r\nYour continue code to play the next game is: Bob3\r\n```\r\n(obviously there would be a lot of numbers)\r\nThis would allow you to continue. But no, outside of that, I don't think you can really move data from game to game.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>You might give each value a coded number, like...</p>\n<pre><code>{if hair=black:{@hairCode=1}\n{if hair=brown:{@hairCode=2}\n{if hair=blonde:{@hairCode=3}\nYour continue code to play the next game is {name}{hairCode}\n</code></pre>\n<p>and so on. And at the end of your game, give the code, such as:</p>\n<pre><code>Your continue code to play the next game is: Bob3\n</code></pre>\n<p>(obviously there would be a lot of numbers)<br>\nThis would allow you to continue. But no, outside of that, I don't think you can really move data from game to game.</p>\n\n",
      "PostDate": "2020-05-06T12:22:04.4256863Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9db33f55-c139-4789-83a1-1db8f5470e07",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, this is what I get when I read too fast and answer before considering - you've got all that.\r\n\r\nI suppose you could have users C&P that information into a text window, using something like this...\r\n\r\n```\r\nThis {man-woman} needs a name!\r\n\r\n<textarea id=\"text_first\"></textarea>\r\n\r\n[[Click here when you've entered it]](Start Pro name postclick)\r\n\r\n[[Start Pro name postclick]]:\r\n\r\n    squiffy.set(\"soName\", jQuery(\"#text_first\").val());\r\n\r\n```\r\nI've never tried to cut and paste into a text field but I just tried it and it seemed to work.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, this is what I get when I read too fast and answer before considering - you've got all that.</p>\n<p>I suppose you could have users C&amp;P that information into a text window, using something like this...</p>\n<pre><code>This {man-woman} needs a name!\n\n&lt;textarea id=\"text_first\"&gt;&lt;/textarea&gt;\n\n[[Click here when you've entered it]](Start Pro name postclick)\n\n[[Start Pro name postclick]]:\n\n    squiffy.set(\"soName\", jQuery(\"#text_first\").val());\n\n</code></pre>\n<p>I've never tried to cut and paste into a text field but I just tried it and it seemed to work.</p>\n\n",
      "PostDate": "2020-05-06T12:28:50.2426839Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fc12909f-8844-4623-b183-02522277f900",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How would the second game be able to distinguish between the number codes if there are lots of them? (there would be quite a lot :) I mean, I could manually code it so that Bob1783 translated to that particular variation of Bob, but that would be a lot of work to do individually.\r\n\r\nFor that matter, how would you tell the second game that the Bob part was the name and the numbers were other attributes?\r\n\r\nIt would just be really cool to be able to create a character in part one, have things happen to him, and then enable to player to carry the character and choices over to part two with a code. Kind of like in Mass Effect but a bit more lo-fi!",
      "EditableFormat": "markdown",
      "HTML": "<p>How would the second game be able to distinguish between the number codes if there are lots of them? (there would be quite a lot :) I mean, I could manually code it so that Bob1783 translated to that particular variation of Bob, but that would be a lot of work to do individually.</p>\n<p>For that matter, how would you tell the second game that the Bob part was the name and the numbers were other attributes?</p>\n<p>It would just be really cool to be able to create a character in part one, have things happen to him, and then enable to player to carry the character and choices over to part two with a code. Kind of like in Mass Effect but a bit more lo-fi!</p>\n\n",
      "PostDate": "2020-05-06T12:31:14.5038848Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d04271cf-c5bc-49fe-aeab-7438493b5b8f",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Having just seen your second post bluevoss!\r\n\r\nI don't want the player to have to re-input everything manually - especially as some of the attributes would be behind-the-scenes things, eg choices they'd made that cumulatively added to a score, and they wouldn't even know themselves what that score was. Eg your character has a score on a sliding scale between Altruistic and Selfish, and choices you make change your character's position on that scale to either end. It would be good to carry that over, but there'd be no way for the user to know what their AltrusiticSelfish score is (and nor would I want them to know!)",
      "EditableFormat": "markdown",
      "HTML": "<p>Having just seen your second post bluevoss!</p>\n<p>I don't want the player to have to re-input everything manually - especially as some of the attributes would be behind-the-scenes things, eg choices they'd made that cumulatively added to a score, and they wouldn't even know themselves what that score was. Eg your character has a score on a sliding scale between Altruistic and Selfish, and choices you make change your character's position on that scale to either end. It would be good to carry that over, but there'd be no way for the user to know what their AltrusiticSelfish score is (and nor would I want them to know!)</p>\n\n",
      "PostDate": "2020-05-06T12:36:48.3637445Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b048290d-fd51-4cc0-a320-2f8e463d3104",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One option would be to block all the numbers together into a larger number.\r\n\r\nExample (pseudo-code because I don't know Squiffy):\r\n```\r\nif (hair_color = \"black\") data = 0\r\nif (hair_color = \"brown\") data = 1\r\nif (hair_color = \"bred\") data = 2\r\nif (hair_color = \"bald\") data = 3\r\n\r\n// (multiply by 3 because the next section has 3 options)\r\ndata *= 3\r\nif (hair_length = \"short\") data += 0\r\nif (hair_length = \"long\") data += 1\r\nif (hair_length = \"extra-long\") data += 2\r\n\r\ndata *= 5\r\nif (eye_color = \"pink\") data += 0\r\nif (eye_color = \"brown\") data += 1\r\nif (eye_color = \"blue\") data += 2\r\nif (eye_color = \"green\") data += 3\r\nif (eye_color = \"grey\") data += 4\r\n```\r\nThat gives you a number between 0 and 59 which represents every possible combination of those three attributes. Then you can decompose it by doing the process in reverse:\r\n```\r\n// get a number 'data' from the user somehow, then:\r\n\r\nif (data % 5 = 0) eye_color = \"pink\"\r\nif (data % 5 = 1) eye_color = \"brown\"\r\nif (data % 5 = 2) eye_color = \"blue\"\r\nif (data % 5 = 3) eye_color = \"green\"\r\nif (data % 5 = 4) eye_color = \"grey\"\r\ndata /= 5\r\n\r\nif (data % 3 = 0) hair_length = \"short\"\r\nif (data % 3 = 1) hair_length = \"long\"\r\nif (data % 3 = 2) hair_length = \"extra-long\"\r\ndata /= 3\r\n\r\nif (data = 0) hair_color = \"black\"\r\nif (data = 1) hair_color = \"brown\"\r\nif (data = 2) hair_color = \"bred\"\r\nif (data = 3) hair_color = \"bald\"\r\n```\r\n\r\nYou can encode quite a lot of options into a single number. (As far as I understand it, Squiffy's variables are limited by Javascript's `Number.MAX_SAFE_INTEGER`, which allows values up to 9007199254740991. So you could put all your numeric values into a single number.\r\n\r\nIf your character name doesn't allow numbers, then you could simply stick the name on the end of that number. If you have multiple names (character name, rival's name, pet's name, etc), then you could make one of the numbers in your block be the length of each string, and use that to split them up. Or have a string that looks like `496Bob4747George9554Fido`.\r\n\r\n(Don't know how easy string splitting is in Squiffy, but you could use Javascript like:\r\n```\r\n    jQuery(\"#password_from_prev_game\").val().replace(/^(\\d+)(\\D+)(\\d+)(\\D+)(\\d+)(\\D+)$/, (data, a, b, c, d, e, f) => (\r\n      squiffy.set(\"first_data\", a) ||\r\n      squiffy.set(\"player_name\", b) ||\r\n      squiffy.set(\"second_data\", c) ||\r\n      squiffy.set(\"rival_name\", d) ||\r\n      squiffy.set(\"third_data\", e) ||\r\n      squiffy.set(\"dog_name\", f)\r\n    ));\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>One option would be to block all the numbers together into a larger number.</p>\n<p>Example (pseudo-code because I don't know Squiffy):</p>\n<pre><code>if (hair_color = \"black\") data = 0\nif (hair_color = \"brown\") data = 1\nif (hair_color = \"bred\") data = 2\nif (hair_color = \"bald\") data = 3\n\n// (multiply by 3 because the next section has 3 options)\ndata *= 3\nif (hair_length = \"short\") data += 0\nif (hair_length = \"long\") data += 1\nif (hair_length = \"extra-long\") data += 2\n\ndata *= 5\nif (eye_color = \"pink\") data += 0\nif (eye_color = \"brown\") data += 1\nif (eye_color = \"blue\") data += 2\nif (eye_color = \"green\") data += 3\nif (eye_color = \"grey\") data += 4\n</code></pre>\n<p>That gives you a number between 0 and 59 which represents every possible combination of those three attributes. Then you can decompose it by doing the process in reverse:</p>\n<pre><code>// get a number 'data' from the user somehow, then:\n\nif (data % 5 = 0) eye_color = \"pink\"\nif (data % 5 = 1) eye_color = \"brown\"\nif (data % 5 = 2) eye_color = \"blue\"\nif (data % 5 = 3) eye_color = \"green\"\nif (data % 5 = 4) eye_color = \"grey\"\ndata /= 5\n\nif (data % 3 = 0) hair_length = \"short\"\nif (data % 3 = 1) hair_length = \"long\"\nif (data % 3 = 2) hair_length = \"extra-long\"\ndata /= 3\n\nif (data = 0) hair_color = \"black\"\nif (data = 1) hair_color = \"brown\"\nif (data = 2) hair_color = \"bred\"\nif (data = 3) hair_color = \"bald\"\n</code></pre>\n<p>You can encode quite a lot of options into a single number. (As far as I understand it, Squiffy's variables are limited by Javascript's <code>Number.MAX_SAFE_INTEGER</code>, which allows values up to 9007199254740991. So you could put all your numeric values into a single number.</p>\n<p>If your character name doesn't allow numbers, then you could simply stick the name on the end of that number. If you have multiple names (character name, rival's name, pet's name, etc), then you could make one of the numbers in your block be the length of each string, and use that to split them up. Or have a string that looks like <code>496Bob4747George9554Fido</code>.</p>\n<p>(Don't know how easy string splitting is in Squiffy, but you could use Javascript like:</p>\n<pre><code>    jQuery(\"#password_from_prev_game\").val().replace(/^(\\d+)(\\D+)(\\d+)(\\D+)(\\d+)(\\D+)$/, (data, a, b, c, d, e, f) =&gt; (\n      squiffy.set(\"first_data\", a) ||\n      squiffy.set(\"player_name\", b) ||\n      squiffy.set(\"second_data\", c) ||\n      squiffy.set(\"rival_name\", d) ||\n      squiffy.set(\"third_data\", e) ||\n      squiffy.set(\"dog_name\", f)\n    ));\n</code></pre>\n\n",
      "PostDate": "2020-05-06T13:11:54.9606782Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2d425a4f-764d-4526-a6c8-81066ff73287",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel, I'll give that a whirl! That was the kind of thing I was looking for - a way to encode the possible options into a string, have the user copy/paste the string from the first game into a textfield in the second, and then un-encode them from the string the other end. I'll have a go!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel, I'll give that a whirl! That was the kind of thing I was looking for - a way to encode the possible options into a string, have the user copy/paste the string from the first game into a textfield in the second, and then un-encode them from the string the other end. I'll have a go!</p>\n\n",
      "PostDate": "2020-05-06T13:19:45.992625Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62436109-397d-4557-8c68-952b4edab49b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you were stacking numbers like that (eg a morality score), you'd have something like:\r\n```\r\ndata *= (max_morality - min_morality)\r\ndata += (morality - min_morality)\r\n```\r\nand on the other end:\r\n```\r\nmorality = data % (max_morality - min_morality) + min_morality\r\ndata /= (max_morality - min_morality)\r\n```\r\n\r\n:)\r\n\r\nAlternatively, if you don't mind doing more of the code in javascript, you could use `JSON.stringify` to turn a list of attributes into a string like `{name:\"Joe\",pet:\"Fido\",age:24}`, and the lz-string library to zip that string (making it not-human-readable) and base64 encode it.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you were stacking numbers like that (eg a morality score), you'd have something like:</p>\n<pre><code>data *= (max_morality - min_morality)\ndata += (morality - min_morality)\n</code></pre>\n<p>and on the other end:</p>\n<pre><code>morality = data % (max_morality - min_morality) + min_morality\ndata /= (max_morality - min_morality)\n</code></pre>\n<p>:)</p>\n<p>Alternatively, if you don't mind doing more of the code in javascript, you could use <code>JSON.stringify</code> to turn a list of attributes into a string like <code>{name:\"Joe\",pet:\"Fido\",age:24}</code>, and the lz-string library to zip that string (making it not-human-readable) and base64 encode it.</p>\n\n",
      "PostDate": "2020-05-06T13:32:36.1511598Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8228511c-d98e-4d7f-b9bf-79b94bfaf5e1",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mind being blown a bit here : ) but working through one step at a time!\r\n\r\nSo the first part works - converting hair color, hair length and eye color into a number. This is what it is in Squiffy:\r\n\r\n```\r\n@title Character stats\r\n@set hair_color=red\r\n@set hair_length=long\r\n@set eye_color=blue\r\n\r\n[[Start]]\r\n\r\n[[Start]]:\r\n\r\n{if hair_color=black: {@data = 0}}\r\n{if hair_color=brown: {@data = 1}}\r\n{if hair_color=red: {@data = 2}}\r\n{if hair_color=bald: {@data = 3}}\r\n\r\n// (multiply by 3 because the next section has 3 options)\r\n{@data*=3}\r\n\r\n{if hair_length=short: {@data += 0}}\r\n{if hair_length=long: {@data += 1}}\r\n{if hair_length=extra-long: {@data += 2}}\r\n\r\n{@data*= 5}\r\n\r\n{if eye_color=pink: {@data += 0}}\r\n{if eye_color=brown: {@data += 1}}\r\n{if eye_color=blue: {@data += 2}}\r\n{if eye_color=green: {@data += 3}}\r\n{if eye_color=grey: {@data += 4}}\r\n\r\n{data}\r\n```\r\nRun that in Squiffy, and with those options it outputs a value for data of 37 which is correct.\r\n\r\nConverting it back is causing me more trouble! \r\n\r\n```\r\n@title Unencrypt password\r\n@set data=37\r\n\r\n[[Start]]\r\n\r\n[[Start]]:\r\n\r\n// get a number 'data' from the user somehow, then:\r\n\r\n{if data % 5=0: {@eye_color=pink}}\r\n{if data % 5=1: {@eye_color=brown}}\r\n{if data % 5=2: {@eye_color=blue}}\r\n{if data % 5=3: {@eye_color=green}}\r\n{if data % 5=4: {@eye_color=grey}}\r\n{@data/=5}\r\n\r\n{eye_color}\r\n```\r\nThis just outputs 'null' for ```{eye_color}```. I'm not sure if my translation of your code into Squiffy's syntax is wrong, or if Squiffy just can't parse the % - any ideas?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Mind being blown a bit here : ) but working through one step at a time!</p>\n<p>So the first part works - converting hair color, hair length and eye color into a number. This is what it is in Squiffy:</p>\n<pre><code>@title Character stats\n@set hair_color=red\n@set hair_length=long\n@set eye_color=blue\n\n[[Start]]\n\n[[Start]]:\n\n{if hair_color=black: {@data = 0}}\n{if hair_color=brown: {@data = 1}}\n{if hair_color=red: {@data = 2}}\n{if hair_color=bald: {@data = 3}}\n\n// (multiply by 3 because the next section has 3 options)\n{@data*=3}\n\n{if hair_length=short: {@data += 0}}\n{if hair_length=long: {@data += 1}}\n{if hair_length=extra-long: {@data += 2}}\n\n{@data*= 5}\n\n{if eye_color=pink: {@data += 0}}\n{if eye_color=brown: {@data += 1}}\n{if eye_color=blue: {@data += 2}}\n{if eye_color=green: {@data += 3}}\n{if eye_color=grey: {@data += 4}}\n\n{data}\n</code></pre>\n<p>Run that in Squiffy, and with those options it outputs a value for data of 37 which is correct.</p>\n<p>Converting it back is causing me more trouble!</p>\n<pre><code>@title Unencrypt password\n@set data=37\n\n[[Start]]\n\n[[Start]]:\n\n// get a number 'data' from the user somehow, then:\n\n{if data % 5=0: {@eye_color=pink}}\n{if data % 5=1: {@eye_color=brown}}\n{if data % 5=2: {@eye_color=blue}}\n{if data % 5=3: {@eye_color=green}}\n{if data % 5=4: {@eye_color=grey}}\n{@data/=5}\n\n{eye_color}\n</code></pre>\n<p>This just outputs 'null' for <code>{eye_color}</code>. I'm not sure if my translation of your code into Squiffy's syntax is wrong, or if Squiffy just can't parse the % - any ideas?</p>\n\n",
      "PostDate": "2020-05-06T13:48:21.2448969Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8e3a3e27-c18c-4604-91ef-cc4c38d08b00",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Now you've got me thinking about that, I'm wondering how I'd do it. Something like:\r\n\r\n```\r\n    var attributes_to_save = \"name haircolor fish_size money pet\";\r\n    jQuery.getScript(\"https://mrangel.info/lz-string.js\", function () {\r\n      var values = {};\r\n      attributes_to_save.split(/\\s+/).forEach (attr => values[attr] = squiffy.get(attr));\r\n      jQuery(\"input#saveString\").val(LZString.compressToBase64(JSON.stringify(values)));\r\n    });\r\n\r\n<input readonly type=\"text\" id=\"saveString\" value=\"Generating password; please wait\" />\r\n```\r\n\r\nand on the other side,\r\n```\r\nPaste your save password from the previous game here: <input type=\"text\" id=\"loadString\" />\r\n```\r\n(followed by, when they entered something):\r\n```\r\n    var attributes_to_load = \"name pet haircolor fish_size money\";\r\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value && jQuery.getScript(\"https://mrangel.info/lz-string.js\", x => {\r\n      var values = JSON.parse(LZString.decompressFromBase64(this.value));\r\n      attributes_to_load.split(/\\s+/).forEach (attr => squiffy.set(attr, values[attr]));\r\n    });});\r\n```\r\n(yeah, I tend to come up with messy code like this off the top of my head. I'm kind of procrastinating right now, because I've set one of my books to be free on Friday again, and I really should be setting up some kind of advertising and begging friends to reshare stuff… the part of my job I hate most)",
      "EditableFormat": "markdown",
      "HTML": "<p>(Now you've got me thinking about that, I'm wondering how I'd do it. Something like:</p>\n<pre><code>    var attributes_to_save = \"name haircolor fish_size money pet\";\n    jQuery.getScript(\"https://mrangel.info/lz-string.js\", function () {\n      var values = {};\n      attributes_to_save.split(/\\s+/).forEach (attr =&gt; values[attr] = squiffy.get(attr));\n      jQuery(\"input#saveString\").val(LZString.compressToBase64(JSON.stringify(values)));\n    });\n\n&lt;input readonly type=\"text\" id=\"saveString\" value=\"Generating password; please wait\" /&gt;\n</code></pre>\n<p>and on the other side,</p>\n<pre><code>Paste your save password from the previous game here: &lt;input type=\"text\" id=\"loadString\" /&gt;\n</code></pre>\n<p>(followed by, when they entered something):</p>\n<pre><code>    var attributes_to_load = \"name pet haircolor fish_size money\";\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value &amp;&amp; jQuery.getScript(\"https://mrangel.info/lz-string.js\", x =&gt; {\n      var values = JSON.parse(LZString.decompressFromBase64(this.value));\n      attributes_to_load.split(/\\s+/).forEach (attr =&gt; squiffy.set(attr, values[attr]));\n    });});\n</code></pre>\n<p>(yeah, I tend to come up with messy code like this off the top of my head. I'm kind of procrastinating right now, because I've set one of my books to be free on Friday again, and I really should be setting up some kind of advertising and begging friends to reshare stuff… the part of my job I hate most)</p>\n\n",
      "PostDate": "2020-05-06T14:10:13.244557Z",
      "LastEditDate": "2020-05-06T14:15:49.6504565Z",
      "link": null
    },
    {
      "PostId": "066b00d6-3ea2-4857-89e7-b1c3acc1580d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah; it looks like Squiffy doesn't understand %. Sorry; not sure what I can suggest in that case.\r\n\r\n`x % 5` is the same as `x - x / 5 * 5` if division is rounded off… I'm not sure if you'd need to work that out separately before the if statements (don't know how arithmetic works in this engine)",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah; it looks like Squiffy doesn't understand %. Sorry; not sure what I can suggest in that case.</p>\n<p><code>x % 5</code> is the same as <code>x - x / 5 * 5</code> if division is rounded off… I'm not sure if you'd need to work that out separately before the if statements (don't know how arithmetic works in this engine)</p>\n\n",
      "PostDate": "2020-05-06T14:22:29.9494892Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1bcd7292-41fa-454b-8f16-6665f944c31f",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just tried your latest solution - the first part generates a password, but the second doesn't translate it back into the attributes.\r\n\r\nFirst half:\r\n\r\n```\r\n@title testing javascript\r\n\r\n@set name=Bob\r\n@set haircolor=red\r\n@set fish_size=large\r\n@set pet=dog\r\n@set money=5\r\n\r\n[[start]]\r\n\r\n[[start]]:\r\n    var attributes_to_save = \"name haircolor fish_size money pet\";\r\n    jQuery.getScript(\"https://mrangel.info/lz-string.js\", function () {\r\n      var values = {};\r\n      attributes_to_save.split(/\\s+/).forEach (attr => values[attr] = squiffy.get(attr));\r\n      jQuery(\"input#saveString\").val(LZString.compressToBase64(JSON.stringify(values)));\r\n    });\r\n\r\n<input readonly type=\"text\" id=\"saveString\" value=\"Generating password; please wait\" />\r\n```\r\n\r\nSecond part:\r\n```\r\n@title Second game\r\n\r\n\r\nPaste your save password from the previous game here: <input type=\"text\" id=\"loadString\" />\r\n[[Next]]\r\n\r\n[[Next]]:\r\n\r\n    var attributes_to_load = \"name pet haircolor fish_size money\";\r\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value &&                jQuery.getScript(\"https://mrangel.info/lz-string.js\", x => {\r\n     var values = JSON.parse(LZString.decompressFromBase64(this.value));\r\n    attributes_to_save.split(/\\s+/).forEach (attr => squiffy.set(attr, values[attr]));\r\n    });});\r\n    \r\n\r\n\r\n{haircolor}\r\n{pet}\r\n```\r\n{haircolor} and {pet} output null. This feels like you've nearly cracked it though!",
      "EditableFormat": "markdown",
      "HTML": "<p>Just tried your latest solution - the first part generates a password, but the second doesn't translate it back into the attributes.</p>\n<p>First half:</p>\n<pre><code>@title testing javascript\n\n@set name=Bob\n@set haircolor=red\n@set fish_size=large\n@set pet=dog\n@set money=5\n\n[[start]]\n\n[[start]]:\n    var attributes_to_save = \"name haircolor fish_size money pet\";\n    jQuery.getScript(\"https://mrangel.info/lz-string.js\", function () {\n      var values = {};\n      attributes_to_save.split(/\\s+/).forEach (attr =&gt; values[attr] = squiffy.get(attr));\n      jQuery(\"input#saveString\").val(LZString.compressToBase64(JSON.stringify(values)));\n    });\n\n&lt;input readonly type=\"text\" id=\"saveString\" value=\"Generating password; please wait\" /&gt;\n</code></pre>\n<p>Second part:</p>\n<pre><code>@title Second game\n\n\nPaste your save password from the previous game here: &lt;input type=\"text\" id=\"loadString\" /&gt;\n[[Next]]\n\n[[Next]]:\n\n    var attributes_to_load = \"name pet haircolor fish_size money\";\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value &amp;&amp;                jQuery.getScript(\"https://mrangel.info/lz-string.js\", x =&gt; {\n     var values = JSON.parse(LZString.decompressFromBase64(this.value));\n    attributes_to_save.split(/\\s+/).forEach (attr =&gt; squiffy.set(attr, values[attr]));\n    });});\n    \n\n\n{haircolor}\n{pet}\n</code></pre>\n<p>{haircolor} and {pet} output null. This feels like you've nearly cracked it though!</p>\n\n",
      "PostDate": "2020-05-06T14:28:43.3633135Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3633ff0b-2e36-4f9f-9048-03e1a5ba48a0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Two things:\r\n* It's asynchronous (there may be a fraction of a second delay while the \"load\" script fetches the lz-string library. So the rest of that page is displayed before the load finishes.\r\n* There was a typo (`attributes_to_save` vs `attributes_to_load` in the second script. I noticed and fixed it right after posting, but  you must already have copied it.\r\n\r\nThis works (I actually tested it, rather than typing code on the forum this time), going to a new page after it finishes decoding the data:\r\n\r\n```\r\n@title Second game\r\n\r\n\r\nPaste your save password from the previous game here: <input type=\"text\" id=\"loadString\" />\r\n[[Next]]\r\n\r\n[[Next]]:\r\n\r\n    var attributes_to_load = \"name pet haircolor fish_size money\";\r\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value &&                jQuery.getScript(\"https://mrangel.info/lz-string.js\", x => {\r\n     var values = JSON.parse(LZString.decompressFromBase64(this.value));\r\n    attributes_to_load.split(/\\s+/).forEach (attr => squiffy.set(attr, values[attr]));\r\n     squiffy.story.go(\"after load\");\r\n    });});\r\n    \r\n\r\n[[after load]]:\r\n\r\n{haircolor}\r\n{pet}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Two things:</p>\n<ul>\n<li>It's asynchronous (there may be a fraction of a second delay while the \"load\" script fetches the lz-string library. So the rest of that page is displayed before the load finishes.</li>\n<li>There was a typo (<code>attributes_to_save</code> vs <code>attributes_to_load</code> in the second script. I noticed and fixed it right after posting, but  you must already have copied it.</li>\n</ul>\n<p>This works (I actually tested it, rather than typing code on the forum this time), going to a new page after it finishes decoding the data:</p>\n<pre><code>@title Second game\n\n\nPaste your save password from the previous game here: &lt;input type=\"text\" id=\"loadString\" /&gt;\n[[Next]]\n\n[[Next]]:\n\n    var attributes_to_load = \"name pet haircolor fish_size money\";\n    jQuery(\"input#loadString\").last().prop(\"readonly\", true).each(function () { this.value &amp;&amp;                jQuery.getScript(\"https://mrangel.info/lz-string.js\", x =&gt; {\n     var values = JSON.parse(LZString.decompressFromBase64(this.value));\n    attributes_to_load.split(/\\s+/).forEach (attr =&gt; squiffy.set(attr, values[attr]));\n     squiffy.story.go(\"after load\");\n    });});\n    \n\n[[after load]]:\n\n{haircolor}\n{pet}\n</code></pre>\n\n",
      "PostDate": "2020-05-06T17:12:31.9553717Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af18a472-c975-466a-a067-590f9142116c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want a shorter save string, you can switch out `compressToBase64` and `decompressFromBase64` in favour of `compressToUTF16` and `decompressFromUTF16`. More different characters to choose from means the output string is shorter.\r\n\r\nBase64 (uses 64 different characters: A-Z, a-z, 0-9, +, and /) gives a string like:\r\n`N4IgdghgtgpiBcIBCB7ARiANCAFhAlgE4DGKANioQiITACZYgBm+AzjgPqv4BeciZCIQDmcbFBRgYATwQBWbAAcYAF2p0UwkAF8gA===`\r\n\r\nUTF16 (using all the world's alphabets) gives a string like:\r\n`ᯡ࠽䄬஀匰ᜨȰỠ⌰͢L၅䁇æᐡ壈ℱӠӫࠡ丐ഃ䂝Ⱈ̓䢹ѢĆ㣸偱䃠Ԑ‪曠ă%浮䕐䠠彀  `\r\nwhich most computers should be able to copy/paste even if they can't display it properly.\r\n\r\nThe strings are compressed; so saving more attributes will make the string larger, but not by much. For comparison, the uncompressed string for those examples was:\r\n`{\"name\":\"Bob\",\"haircolor\":\"red\",\"fish_size\":\"large\",\"money\":5,\"pet\":\"dog\"}`\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want a shorter save string, you can switch out <code>compressToBase64</code> and <code>decompressFromBase64</code> in favour of <code>compressToUTF16</code> and <code>decompressFromUTF16</code>. More different characters to choose from means the output string is shorter.</p>\n<p>Base64 (uses 64 different characters: A-Z, a-z, 0-9, +, and /) gives a string like:<br>\n<code>N4IgdghgtgpiBcIBCB7ARiANCAFhAlgE4DGKANioQiITACZYgBm+AzjgPqv4BeciZCIQDmcbFBRgYATwQBWbAAcYAF2p0UwkAF8gA===</code></p>\n<p>UTF16 (using all the world's alphabets) gives a string like:<br>\n<code>ᯡ࠽䄬஀匰ᜨȰỠ⌰͢L၅䁇æᐡ壈ℱӠӫࠡ丐ഃ䂝Ⱈ̓䢹ѢĆ㣸偱䃠Ԑ‪曠ă%浮䕐䠠彀</code><br>\nwhich most computers should be able to copy/paste even if they can't display it properly.</p>\n<p>The strings are compressed; so saving more attributes will make the string larger, but not by much. For comparison, the uncompressed string for those examples was:<br>\n<code>{\"name\":\"Bob\",\"haircolor\":\"red\",\"fish_size\":\"large\",\"money\":5,\"pet\":\"dog\"}</code></p>\n\n",
      "PostDate": "2020-05-06T17:29:17.0414439Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "02444652-9247-430d-845f-f7e9a0cf0504",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well that's just about the most awesome thing I've ever seen mrangel. It works! Beautifully! And it's going to completely transform how I write my games - they can be a true sequence with the player carrying the same character over from one to the next, preserving all their stats and choices!\r\n\r\nI'm just made up! Thank you SO much! When its finished you'll be in the credits for certain!",
      "EditableFormat": "markdown",
      "HTML": "<p>Well that's just about the most awesome thing I've ever seen mrangel. It works! Beautifully! And it's going to completely transform how I write my games - they can be a true sequence with the player carrying the same character over from one to the next, preserving all their stats and choices!</p>\n<p>I'm just made up! Thank you SO much! When its finished you'll be in the credits for certain!</p>\n\n",
      "PostDate": "2020-05-06T20:30:44.8702623Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4c3c5414-f232-460d-aaae-f56ccc122026",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I linked to the copy of `lz-string.js` on my server because it was quicker to write. It might be more efficient to include a copy of it with the game (if Squiffy allows you to do that).\r\n\r\nIf your games are hosted on the same website, you might be able to put the password into a cookie or LocalStorage, without needing to display it to the player – in that case, you'd probably use `compress` and `decompress` rather than `compressToBase64` and `decompressFromBase64`. (The plain \"compress\" and \"decompress\" output binary strings, which saves more space but may not be able to be copied between applications because they contain invalid characters. They're fine for storing within the browser that generated them, though)",
      "EditableFormat": "markdown",
      "HTML": "<p>I linked to the copy of <code>lz-string.js</code> on my server because it was quicker to write. It might be more efficient to include a copy of it with the game (if Squiffy allows you to do that).</p>\n<p>If your games are hosted on the same website, you might be able to put the password into a cookie or LocalStorage, without needing to display it to the player – in that case, you'd probably use <code>compress</code> and <code>decompress</code> rather than <code>compressToBase64</code> and <code>decompressFromBase64</code>. (The plain \"compress\" and \"decompress\" output binary strings, which saves more space but may not be able to be copied between applications because they contain invalid characters. They're fine for storing within the browser that generated them, though)</p>\n\n",
      "PostDate": "2020-05-06T22:16:54.2952806Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3dd30e04-df16-4e16-8dbe-f9e22d6a14ea",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have indeed downloaded a copy of lz-string.js - I wouldn't want to be hitting your server with requests every time someone's playing my game!\r\n\r\nI think it's likely that the player will need to copy the password and use it later. At first there'll only be one game without a second to proceed into - but when I do write the second part their password will let them pick up with their character. It's also the sort of game that people will play through multiple times with multiple characters, too. Lots of potential endings, achievements etc. \r\n\r\nWhat I'm finding so stimulating is that every time I have a 'can I do this with it?' moment that I can't solve, you/bluevoss/the members of this forum come up with a solution far beyond Squiffy's basic functionality. It's a fantastic resource and I'm very grateful!",
      "EditableFormat": "markdown",
      "HTML": "<p>I have indeed downloaded a copy of lz-string.js - I wouldn't want to be hitting your server with requests every time someone's playing my game!</p>\n<p>I think it's likely that the player will need to copy the password and use it later. At first there'll only be one game without a second to proceed into - but when I do write the second part their password will let them pick up with their character. It's also the sort of game that people will play through multiple times with multiple characters, too. Lots of potential endings, achievements etc.</p>\n<p>What I'm finding so stimulating is that every time I have a 'can I do this with it?' moment that I can't solve, you/bluevoss/the members of this forum come up with a solution far beyond Squiffy's basic functionality. It's a fantastic resource and I'm very grateful!</p>\n\n",
      "PostDate": "2020-05-06T22:47:20.4565566Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5c68432-8509-4140-b238-810326327e02",
      "UserId": 370495,
      "Username": "Belén",
      "AvatarUrl": "https://secure.gravatar.com/avatar/005376be31400735f15e4dd7877e8615?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is a easy way, always the user plays both games inthe same browser/phone: the first game stock the values into the localStorage and then the second game retrieve them. It works just like the named Mass Effect and don´t need human interaction or tricky code numbers to do the job.",
      "EditableFormat": "markdown",
      "HTML": "<p>There is a easy way, always the user plays both games inthe same browser/phone: the first game stock the values into the localStorage and then the second game retrieve them. It works just like the named Mass Effect and don´t need human interaction or tricky code numbers to do the job.</p>\n\n",
      "PostDate": "2020-05-07T10:09:49.1263434Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9c61df83-d12d-4885-b731-67e8622f82e8",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks Belén - but that presumes the user is using the same device/browser/hasn't cleared their cache since the first game, and it would also presume that they only have a single character whose story they want to continue. The password solution is probably the right one for my needs!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks Belén - but that presumes the user is using the same device/browser/hasn't cleared their cache since the first game, and it would also presume that they only have a single character whose story they want to continue. The password solution is probably the right one for my needs!</p>\n\n",
      "PostDate": "2020-05-07T14:23:14.7790451Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "59ef231f-4894-4250-b4eb-2024591dfc08",
      "UserId": 370495,
      "Username": "Belén",
      "AvatarUrl": "https://secure.gravatar.com/avatar/005376be31400735f15e4dd7877e8615?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can store as many character per device as you like, it´s all about the dumping data structure.\r\n\r\nThe password solution is cool in terms of coding, but in terms of design is in the eighties (from last century), not the right call for 2020 users, just saying. Few people will go to the full process of writing a chunk of letters/numbers in somewhere (paper? notepad on device? tatto ink? xD), place it anywhere he can remenber & not get lost in combat and then retrieve & reintroduce it into the new game when it cames out. Is not how it works anymore. It looks easier to me a lost of the information that way than the possibility of cache cleared, specially on phones/tablets. As a designer your solutions should be userproof because relaying on the user behaviour usually lead to disaster. But if it works for you, then it is. :)",
      "EditableFormat": "markdown",
      "HTML": "<p>You can store as many character per device as you like, it´s all about the dumping data structure.</p>\n<p>The password solution is cool in terms of coding, but in terms of design is in the eighties (from last century), not the right call for 2020 users, just saying. Few people will go to the full process of writing a chunk of letters/numbers in somewhere (paper? notepad on device? tatto ink? xD), place it anywhere he can remenber &amp; not get lost in combat and then retrieve &amp; reintroduce it into the new game when it cames out. Is not how it works anymore. It looks easier to me a lost of the information that way than the possibility of cache cleared, specially on phones/tablets. As a designer your solutions should be userproof because relaying on the user behaviour usually lead to disaster. But if it works for you, then it is. :)</p>\n\n",
      "PostDate": "2020-05-07T17:18:26.4958238Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2ac2092c-8765-460d-8186-6e255f022e88",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can see a kind of hybrid situation that gives the best of both worlds. Could dump  in LocalStorage with game start time, last saved time, which game in the series, and main character name (if relevant); then have the JS pull it out. So next to the text entry field,  a drop down list pops up showing previously saved games on this browser.\r\n\r\nIf you generate a random ID for the game when you start, and then only store the latest save for each ID, that stops the list getting too cluttered. Not sure if the ID would be preserved through different games in the series or not (possibly not, because you might want to start game 2 twice from the same game-1 save and then take different options, and see how both of them pan out in game 3)\r\n\r\nIt's so tempting to see how quickly I could throw out the code for that; it doesn't seem too complex. But I just came back from a 9-mile walk, and I've got another free-book promo on Kindle tomorrow that I really need to some kind of promotion for. Perhaps I'll see what I can throw together later.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can see a kind of hybrid situation that gives the best of both worlds. Could dump  in LocalStorage with game start time, last saved time, which game in the series, and main character name (if relevant); then have the JS pull it out. So next to the text entry field,  a drop down list pops up showing previously saved games on this browser.</p>\n<p>If you generate a random ID for the game when you start, and then only store the latest save for each ID, that stops the list getting too cluttered. Not sure if the ID would be preserved through different games in the series or not (possibly not, because you might want to start game 2 twice from the same game-1 save and then take different options, and see how both of them pan out in game 3)</p>\n<p>It's so tempting to see how quickly I could throw out the code for that; it doesn't seem too complex. But I just came back from a 9-mile walk, and I've got another free-book promo on Kindle tomorrow that I really need to some kind of promotion for. Perhaps I'll see what I can throw together later.</p>\n\n",
      "PostDate": "2020-05-07T17:35:54.1174016Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0cd2321f-842c-437b-a848-c284d7e979d0",
      "UserId": 481054,
      "Username": "ladyfi",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6894c7f2000bfa82725b1a875c130549?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This \"password\" solution has my brain exploding with possibilities.  Could the \"password\" solution can be used for save points within a squiffy story as well?  Putting seen flags in at each section and saving that with the other attributes in the encoded 'password' they can then enter to be decoded the next time they want to play.  I use a system which clears cache frequently, so relying on that to remember won't work.  \r\n\r\nIs there another way to get the player the code?  (Hopefully this makes sense. I'm just starting with Squiffy so I don't know all the limitations yet...but I'm pondering if the code could be sent to an external link, such as a new trello entry, or a zapier call, or a google spreadsheet, which can be called by a database (linked to a player's account on a website) OR which can then be picked up by an automation and sent to the player's email. )",
      "EditableFormat": "markdown",
      "HTML": "<p>This \"password\" solution has my brain exploding with possibilities.  Could the \"password\" solution can be used for save points within a squiffy story as well?  Putting seen flags in at each section and saving that with the other attributes in the encoded 'password' they can then enter to be decoded the next time they want to play.  I use a system which clears cache frequently, so relying on that to remember won't work.</p>\n<p>Is there another way to get the player the code?  (Hopefully this makes sense. I'm just starting with Squiffy so I don't know all the limitations yet...but I'm pondering if the code could be sent to an external link, such as a new trello entry, or a zapier call, or a google spreadsheet, which can be called by a database (linked to a player's account on a website) OR which can then be picked up by an automation and sent to the player's email. )</p>\n\n",
      "PostDate": "2020-05-07T18:38:03.1715139Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "843b88e5-a718-4012-874c-b09f9c45c8b6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there another way to get the player the code? (Hopefully this makes sense. I'm just starting with Squiffy so I don't know all the limitations yet...but I'm pondering if the code could be sent to an external link, such as a new trello entry, or a zapier call, or a google spreadsheet, which can be called by a database (linked to a player's account on a website) OR which can then be picked up by an automation and sent to the player's email. )\r\n\r\nGoogle sheets is certainly possible. Not sure about the others; depends on their APIs. The coding is likely to be relatively simple, but the process of setting up various keys and permissions so that it works might be more complex.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there another way to get the player the code? (Hopefully this makes sense. I'm just starting with Squiffy so I don't know all the limitations yet...but I'm pondering if the code could be sent to an external link, such as a new trello entry, or a zapier call, or a google spreadsheet, which can be called by a database (linked to a player's account on a website) OR which can then be picked up by an automation and sent to the player's email. )</p>\n</blockquote>\n<p>Google sheets is certainly possible. Not sure about the others; depends on their APIs. The coding is likely to be relatively simple, but the process of setting up various keys and permissions so that it works might be more complex.</p>\n\n",
      "PostDate": "2020-05-07T19:50:46.8009297Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5186d80d-9617-48b9-a448-48f37dafb49c",
      "UserId": 481054,
      "Username": "ladyfi",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6894c7f2000bfa82725b1a875c130549?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If it can be put into a Google Sheet...it can pretty much go anywhere at that point as intermediary. :)  Now to figure out how to get it into a Sheet lol",
      "EditableFormat": "markdown",
      "HTML": "<p>If it can be put into a Google Sheet...it can pretty much go anywhere at that point as intermediary. :)  Now to figure out how to get it into a Sheet lol</p>\n\n",
      "PostDate": "2020-05-07T20:47:16.9263156Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09a4779f-76c5-4bf0-8765-9a985077b6d1",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm always open to better solutions, but any saved-in-browser solution would need to account for caches being cleared (I clear mine frequently for various reasons, and as significant time could pass between games in a series being available people could even have changed browser or device), cookies being turned off, multiple devices, and multiple characters :)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm always open to better solutions, but any saved-in-browser solution would need to account for caches being cleared (I clear mine frequently for various reasons, and as significant time could pass between games in a series being available people could even have changed browser or device), cookies being turned off, multiple devices, and multiple characters :)</p>\n\n",
      "PostDate": "2020-05-08T13:07:55.258743Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5e7cfca7-ba19-4f3f-b6fa-c49d7d819fb1",
      "UserId": 370495,
      "Username": "Belén",
      "AvatarUrl": "https://secure.gravatar.com/avatar/005376be31400735f15e4dd7877e8615?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So. I was giving this a thought and I found a failsafe desing solution that acomplish to be selfcontained, organic and userproof: implementing a \"previously on...\" section in the second game, like a tv show.\r\nIt´s made under the assumption that only a few choices are relevant from the later game and not all of it.\r\n\r\nSo, the second game looks into the localStorage for first game savegames. If it founds them, show the several characters/stories for the player to choose between them and reproduce a sumary in the format of \"previously on...\". If there is no savegame (cache cleaned, device changed, etc...), the game shows an interactive sumary where the player choose the go of the main events in the previous game. And that´s it.\r\n\r\nYou may say: hey, the player might not remeber the choices he made in the previous game. ¿So? If he don´t remeber is because he don´t care enough about it to remenber (or don´t give a shit about it), then let he choose what it want again.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>So. I was giving this a thought and I found a failsafe desing solution that acomplish to be selfcontained, organic and userproof: implementing a \"previously on...\" section in the second game, like a tv show.<br>\nIt´s made under the assumption that only a few choices are relevant from the later game and not all of it.</p>\n<p>So, the second game looks into the localStorage for first game savegames. If it founds them, show the several characters/stories for the player to choose between them and reproduce a sumary in the format of \"previously on...\". If there is no savegame (cache cleaned, device changed, etc...), the game shows an interactive sumary where the player choose the go of the main events in the previous game. And that´s it.</p>\n<p>You may say: hey, the player might not remeber the choices he made in the previous game. ¿So? If he don´t remeber is because he don´t care enough about it to remenber (or don´t give a shit about it), then let he choose what it want again.</p>\n\n",
      "PostDate": "2020-05-11T09:39:25.8751603Z",
      "LastEditDate": "2020-05-11T09:49:31.2616638Z",
      "link": null
    }
  ]
}
