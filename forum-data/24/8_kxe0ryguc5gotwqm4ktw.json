{
  "Topic": {
    "TopicId": "8_kxe0ryguc5gotwqm4ktw",
    "ForumId": "24",
    "Title": "Random engine for people who like to use Squiffy as possible while tending to avoid Javascript",
    "LastUpdated": "2021-09-14T00:28:52.4907248Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0dea9130-4c6c-4578-8752-9e5f14c47a86",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Other people have already figured this out. But sure would have made my earlier games a lot easier to write if I'd known it sooner. I hope it will help somebody who wants an easy way to handle random selections.\r\n\r\nYou just paste the ```[[random]]``` section anywhere in your game and then follow the pure-Squiffy examples to declare new random choices.\r\n\r\n```\r\n@start start\r\n\r\nUnfortunately, this only works with one random per section.\r\n\r\n[[start]]:\r\n@set random = friend:Alice Liu| Bob| Cindy| Dan| Ebert| Flor| Grant| Hanna\r\n\r\nYou want some I cream. You choose a friend to [[call]](random, next=two) at random.\r\n\r\n[[two]]:\r\n{@random=flavor: chocolate| taro| vanilla| strawberry banana| mango}\r\n{friend} picks up the phone.\r\n\r\n\"Sure, I could go for some ice cream. What [[kind]](random, next=three) do you want?\"\r\n\r\n[[three]]:\r\n\"I'm having {flavor} today. [[You]](random, next=You)?\"\r\n\r\n@set random = flavor1: chocolate| taro| vanilla| strawberry banana| mango\r\n\r\n[[You]]:\r\n@set random = flavor2: chocolate| taro| vanilla| strawberry banana| mango\r\n@set next = You1\r\n\r\n    squiffy.story.go(\"random\");\r\n    \r\n\r\n[[You1]]:\r\n\r\n\"Uh... {flavor1}, I guess? Or{if flavor1=@flavor2:... No. Yeah. {flavor2}.}{else: maybe {flavor2}?}\"\r\n\r\n[[random]]:\r\n    var random = squiffy.get(\"random\");\r\n    var attribute = random.split(\":\")[0];\r\n    var choice = random.split(\":\")[1];\r\n    var choice = choice.split(\"|\")[(Math.floor(Math.random()* choice.split(\"|\").length))];\r\n    squiffy.set(attribute, choice);\r\n\r\n    var next = squiffy.get(\"next\");\r\n    squiffy.story.go(next)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Other people have already figured this out. But sure would have made my earlier games a lot easier to write if I'd known it sooner. I hope it will help somebody who wants an easy way to handle random selections.</p>\n<p>You just paste the <code>[[random]]</code> section anywhere in your game and then follow the pure-Squiffy examples to declare new random choices.</p>\n<pre><code>@start start\n\nUnfortunately, this only works with one random per section.\n\n[[start]]:\n@set random = friend:Alice Liu| Bob| Cindy| Dan| Ebert| Flor| Grant| Hanna\n\nYou want some I cream. You choose a friend to [[call]](random, next=two) at random.\n\n[[two]]:\n{@random=flavor: chocolate| taro| vanilla| strawberry banana| mango}\n{friend} picks up the phone.\n\n\"Sure, I could go for some ice cream. What [[kind]](random, next=three) do you want?\"\n\n[[three]]:\n\"I'm having {flavor} today. [[You]](random, next=You)?\"\n\n@set random = flavor1: chocolate| taro| vanilla| strawberry banana| mango\n\n[[You]]:\n@set random = flavor2: chocolate| taro| vanilla| strawberry banana| mango\n@set next = You1\n\n    squiffy.story.go(\"random\");\n    \n\n[[You1]]:\n\n\"Uh... {flavor1}, I guess? Or{if flavor1=@flavor2:... No. Yeah. {flavor2}.}{else: maybe {flavor2}?}\"\n\n[[random]]:\n    var random = squiffy.get(\"random\");\n    var attribute = random.split(\":\")[0];\n    var choice = random.split(\":\")[1];\n    var choice = choice.split(\"|\")[(Math.floor(Math.random()* choice.split(\"|\").length))];\n    squiffy.set(attribute, choice);\n\n    var next = squiffy.get(\"next\");\n    squiffy.story.go(next)\n</code></pre>\n\n",
      "PostDate": "2021-09-14T00:28:52.4907248Z",
      "LastEditDate": "2021-09-17T06:02:26.5804011Z",
      "link": null
    },
    {
      "PostId": "db2985c6-282f-45dc-90d8-ce7e95fe7acd",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... Can't figure out why it won't work inside a ```[[]]``` master section. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... Can't figure out why it won't work inside a <code>[[]]</code> master section.</p>\n\n",
      "PostDate": "2021-09-17T06:07:34.6964687Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "834f50b5-0a13-4488-a540-2c8bdbb4c972",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh...\r\n\r\n I just stumbled on [this](https://textadventures.co.uk/forum/squiffy/topic/4yjwrgypu0uddgpmioxo8w/hacking-squiffy-further) post from mrangel, which appears to do this much more effectively. I can't get it to work at the moment, but I probably pasted something wrong.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh...</p>\n<p>I just stumbled on <a href=\"https://textadventures.co.uk/forum/squiffy/topic/4yjwrgypu0uddgpmioxo8w/hacking-squiffy-further\">this</a> post from mrangel, which appears to do this much more effectively. I can't get it to work at the moment, but I probably pasted something wrong.</p>\n\n",
      "PostDate": "2021-09-21T12:30:51.8102692Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1187f180-5625-4ef0-8c11-9a2b7e24ce4a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I just stumbled on <a href=\"https://textadventures.co.uk/forum/squiffy/topic/4yjwrgypu0uddgpmioxo8w/hacking-squiffy-further\">this</a> post from mrangel, which appears to do this much more effectively. I can't get it to work at the moment, but I probably pasted something wrong.\r\n\r\n(edit: typos)\r\n\r\nI'm not sure if I tested all of that. I included some rough code off the top of my head as an example of what it could do, but I was focusing more on the means of loading code reliably in a different context. Maybe I messed something up.\r\n\r\nI think your version has the advantage of being a lot less code :)\r\n\r\n> Hmm... Can't figure out why it won't work inside a `[[]]` master section.\r\n\r\nHow are you trying to include it? Could be something in the order of execution. If I remember correctly, the order is:\r\n1. master section `@set`s\r\n1. master section javascript\r\n1. master section text\r\n1. current section `@set`s\r\n1. current section javascript\r\n1. current section text\r\n\r\nSo if you're putting the JS in the master section, it will run before any attributes are set by the current section.\r\n\r\nHmm…\r\n\r\nOff the top of my head, perhaps you could have the master section look at the variables set for the current section. So something like:\r\n```\r\n[[]]:\r\n    if (squiffy.story.section.attributes) {\r\n        var regex = /^random:\\s*(\\w+)\\s*=\\s*(.+)/i;\r\n        var matches, attr, options;\r\n        squiffy.story.section.attributes.forEach (line => {\r\n            if (matches = regex.exec(line)) {\r\n                options = matches[2].split(\"|\");\r\n                squiffy.set(matches[1], options[Math.floor(Math.random() * options.length)]);\r\n            }\r\n        });\r\n    }\r\n\r\n[[some random section]]:\r\n\r\n@set random:flavor = lime|orange|cherry|roast pork and blue cheese\r\n\r\n“Ooh, there's an ice cream shop!” Jade shrieks excitedly. “I wonder if they have {flavor} sorbet, it's my favourite!”\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I just stumbled on <a href=\"https://textadventures.co.uk/forum/squiffy/topic/4yjwrgypu0uddgpmioxo8w/hacking-squiffy-further\">this</a> post from mrangel, which appears to do this much more effectively. I can't get it to work at the moment, but I probably pasted something wrong.</p>\n</blockquote>\n<p>(edit: typos)</p>\n<p>I'm not sure if I tested all of that. I included some rough code off the top of my head as an example of what it could do, but I was focusing more on the means of loading code reliably in a different context. Maybe I messed something up.</p>\n<p>I think your version has the advantage of being a lot less code :)</p>\n<blockquote>\n<p>Hmm... Can't figure out why it won't work inside a <code>[[]]</code> master section.</p>\n</blockquote>\n<p>How are you trying to include it? Could be something in the order of execution. If I remember correctly, the order is:</p>\n<ol>\n<li>master section <code>@set</code>s</li>\n<li>master section javascript</li>\n<li>master section text</li>\n<li>current section <code>@set</code>s</li>\n<li>current section javascript</li>\n<li>current section text</li>\n</ol>\n<p>So if you're putting the JS in the master section, it will run before any attributes are set by the current section.</p>\n<p>Hmm…</p>\n<p>Off the top of my head, perhaps you could have the master section look at the variables set for the current section. So something like:</p>\n<pre><code>[[]]:\n    if (squiffy.story.section.attributes) {\n        var regex = /^random:\\s*(\\w+)\\s*=\\s*(.+)/i;\n        var matches, attr, options;\n        squiffy.story.section.attributes.forEach (line =&gt; {\n            if (matches = regex.exec(line)) {\n                options = matches[2].split(\"|\");\n                squiffy.set(matches[1], options[Math.floor(Math.random() * options.length)]);\n            }\n        });\n    }\n\n[[some random section]]:\n\n@set random:flavor = lime|orange|cherry|roast pork and blue cheese\n\n“Ooh, there's an ice cream shop!” Jade shrieks excitedly. “I wonder if they have {flavor} sorbet, it's my favourite!”\n</code></pre>\n\n",
      "PostDate": "2021-09-21T15:44:44.2012417Z",
      "LastEditDate": "2021-09-21T17:14:50.2717836Z",
      "link": null
    },
    {
      "PostId": "eed0e72e-6b0e-473e-8a99-20e9b76d8d39",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you don't mind tweaking javascript, you could edit your `story.js` file after compiling the game; or even change this in whichever file in the Squiffy compiler contains this, so you can use it in all your games. Find this section and add piece to one line:\r\n\r\n<pre><code>    squiffy.story.run = function(section) {\r\n        if (section.clear) {\r\n            squiffy.ui.clearScreen();\r\n        }\r\n        if (section.attributes) {\r\n            processAttributes(section.attributes<b>.map(line => line.replace(/^random\\s*:\\s*(\\w+)\\s*=\\s*(.+)/i, (line, attr, options) => (options = options.split(\"|\")) ? attr + \" = \" + options[Math.floor(Math.random() * options.length)] : line))</b>);\r\n        }\r\n        if (section.js) {\r\n            section.js();\r\n        }\r\n    };\r\n</code></pre>\r\n\r\nThen you can use stuff like `@set random:colour = red|green|blue|fuchsia` whenever you want.\r\nIt's shorter code, and more efficient, but a little ugly.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you don't mind tweaking javascript, you could edit your <code>story.js</code> file after compiling the game; or even change this in whichever file in the Squiffy compiler contains this, so you can use it in all your games. Find this section and add piece to one line:</p>\n<pre><code>    squiffy.story.run = function(section) {\n        if (section.clear) {\n            squiffy.ui.clearScreen();\n        }\n        if (section.attributes) {\n            processAttributes(section.attributes<b>.map(line =&gt; line.replace(/^random\\s*:\\s*(\\w+)\\s*=\\s*(.+)/i, (line, attr, options) =&gt; (options = options.split(\"|\")) ? attr + \" = \" + options[Math.floor(Math.random() * options.length)] : line))</b>);\n        }\n        if (section.js) {\n            section.js();\n        }\n    };\n</code></pre>\n<p>Then you can use stuff like <code>@set random:colour = red|green|blue|fuchsia</code> whenever you want.<br>\nIt's shorter code, and more efficient, but a little ugly.</p>\n\n",
      "PostDate": "2021-09-22T22:30:14.3723499Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bceed1a3-0b6d-4227-86bf-75a288dde1e3",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<blockquote>Off the top of my head, perhaps you could have the master section look at the variables set for the current section. So something like:</blockquote>\r\nThat works wonders! And it even lets me do multiple randoms in the same section and process them immediately!!!!!\r\nYour next script absolutely works to change the story.js file! Just... Thank you! So. Much. mrangel.<br><br> ",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>Off the top of my head, perhaps you could have the master section look at the variables set for the current section. So something like:</blockquote>\nThat works wonders! And it even lets me do multiple randoms in the same section and process them immediately!!!!!\nYour next script absolutely works to change the story.js file! Just... Thank you! So. Much. mrangel.<br><br> \n\n",
      "PostDate": "2021-09-23T04:51:40.0044572Z",
      "LastEditDate": "2022-06-17T05:52:26.1858368Z",
      "link": null
    },
    {
      "PostId": "721936f1-e229-4b01-bffb-4cbcab04470f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… thinking a little more about this.\r\n```\r\n[[]]:\r\n    if (squiffy.story.section.attributes) {\r\n        var regex = /^random:\\s*(\\w+(?:[,\\s]+\\w+)*)\\s*=\\s*(.+)/i;\r\n        var matches, attr, options;\r\n        squiffy.story.section.attributes.forEach (line => {\r\n            if (matches = regex.exec(line)) {\r\n                options = matches[2].split(\"|\");\r\n                matches[1].split(/[,\\s]+/).forEach(attr => squiffy.set(attr,\r\n                    options.length ? options.splice(Math.floor(Math.random() * options.length),1)[0] : attr\r\n                ));\r\n            }\r\n        });\r\n    }\r\n\r\n[[some section]]:\r\n@set random:john,bob,carl = peach|plum|melon|tomato|banana\r\n\r\nJohn tried to think of something to say, but all he could come up with was: “My favourite fruit is {john}!”\r\n\r\n“Eww, {john}?” Bob answered. “I only eat {bob}.”\r\n\r\n\"Don't be mean. At least I’m not Carl, and his obsession with {carl}.”\r\n```\r\n\r\n(off the top of my head, running it more than once. I changed `options[randomnumber]` to `options.splice(randomnumber, 1)[0]` so that it removes the selected option, meaning that you get 3 different values.\r\n\r\nOr the `story.js` version:\r\n<pre><code>    squiffy.story.run = function(section) {\r\n        if (section.clear) {\r\n            squiffy.ui.clearScreen();\r\n        }\r\n        if (section.attributes) {\r\n            <b>var parts, options;\r\n</b>            processAttributes(section.attributes.<b>map(line => (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) ? options = match[2].split(\"|\") && match[1].split(\",\").map(attr => options.length ? attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0] : \"Not enough options for \"+attr):line))</b>;\r\n        }\r\n        if (section.js) {\r\n            section.js();\r\n        }\r\n    };\r\n</code></pre>",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… thinking a little more about this.</p>\n<pre><code>[[]]:\n    if (squiffy.story.section.attributes) {\n        var regex = /^random:\\s*(\\w+(?:[,\\s]+\\w+)*)\\s*=\\s*(.+)/i;\n        var matches, attr, options;\n        squiffy.story.section.attributes.forEach (line =&gt; {\n            if (matches = regex.exec(line)) {\n                options = matches[2].split(\"|\");\n                matches[1].split(/[,\\s]+/).forEach(attr =&gt; squiffy.set(attr,\n                    options.length ? options.splice(Math.floor(Math.random() * options.length),1)[0] : attr\n                ));\n            }\n        });\n    }\n\n[[some section]]:\n@set random:john,bob,carl = peach|plum|melon|tomato|banana\n\nJohn tried to think of something to say, but all he could come up with was: “My favourite fruit is {john}!”\n\n“Eww, {john}?” Bob answered. “I only eat {bob}.”\n\n\"Don't be mean. At least I’m not Carl, and his obsession with {carl}.”\n</code></pre>\n<p>(off the top of my head, running it more than once. I changed <code>options[randomnumber]</code> to <code>options.splice(randomnumber, 1)[0]</code> so that it removes the selected option, meaning that you get 3 different values.</p>\n<p>Or the <code>story.js</code> version:</p>\n<pre><code>    squiffy.story.run = function(section) {\n        if (section.clear) {\n            squiffy.ui.clearScreen();\n        }\n        if (section.attributes) {\n            <b>var parts, options;\n</b>            processAttributes(section.attributes.<b>map(line =&gt; (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) ? options = match[2].split(\"|\") &amp;&amp; match[1].split(\",\").map(attr =&gt; options.length ? attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0] : \"Not enough options for \"+attr):line))</b>;\n        }\n        if (section.js) {\n            section.js();\n        }\n    };\n</code></pre>\n\n",
      "PostDate": "2021-09-23T10:40:44.6894855Z",
      "LastEditDate": "2021-09-23T10:53:00.6478781Z",
      "link": null
    },
    {
      "PostId": "a9dd11de-6780-40ad-819f-a70220d21479",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That lets you label each pick yourself! Maybe some day I'll learn abbreviated JS so I can read it. Gotta slowly learn long-form first.\r\n\r\n[This tutorial](https://javascript.info/task/shuffle) explains that, for some reason, JS array randomization methods usually become less random after each pick, and recommends using a formula such as Fisher-Yates. ",
      "EditableFormat": "markdown",
      "HTML": "<p>That lets you label each pick yourself! Maybe some day I'll learn abbreviated JS so I can read it. Gotta slowly learn long-form first.</p>\n<p><a href=\"https://javascript.info/task/shuffle\">This tutorial</a> explains that, for some reason, JS array randomization methods usually become less random after each pick, and recommends using a formula such as Fisher-Yates.</p>\n\n",
      "PostDate": "2021-09-23T22:27:49.9559018Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f336eb0f-2b72-4040-aaef-05d3aadc9646",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> This tutorial explains that, for some reason, JS array randomization methods usually become less random after each pick, and recommends using a formula such as Fisher-Yates.\r\n\r\nThey're talking about taking an array, and changing the order of elements within the same array.\r\n\r\nUsing `Array.prototype.sort` doesn't work properly because it's optimised - it makes guesses about which order elements should be in based on the order of elements that are already compared, in order to minimise the number of times it has to actually compare two elements. And that is pretty wonky.\r\n\r\nMy method is just to pick a random element from the array for each attribute you give it; that will be suitably random. Fisher-Yates is the same method, but with some extra code added so that the array you feed into it and the array you put the shuffled values into can be the same array.\r\n\r\nHope that makes sense… some of this stuff is a lot easier to do than to explain.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This tutorial explains that, for some reason, JS array randomization methods usually become less random after each pick, and recommends using a formula such as Fisher-Yates.</p>\n</blockquote>\n<p>They're talking about taking an array, and changing the order of elements within the same array.</p>\n<p>Using <code>Array.prototype.sort</code> doesn't work properly because it's optimised - it makes guesses about which order elements should be in based on the order of elements that are already compared, in order to minimise the number of times it has to actually compare two elements. And that is pretty wonky.</p>\n<p>My method is just to pick a random element from the array for each attribute you give it; that will be suitably random. Fisher-Yates is the same method, but with some extra code added so that the array you feed into it and the array you put the shuffled values into can be the same array.</p>\n<p>Hope that makes sense… some of this stuff is a lot easier to do than to explain.</p>\n\n",
      "PostDate": "2021-09-23T23:05:25.5266911Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ce69c73b-e8f7-4f8d-a08f-799990c51e2e",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I see! That's perfect then. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I see! That's perfect then.</p>\n\n",
      "PostDate": "2021-09-24T05:38:54.8878065Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05cb9d33-2076-40b8-8c2d-b1df0329c865",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mrangel,\r\n\r\nI followed your instructions by finding  ```C:\\Program Files (x86)\\Squiffy\\resources\\app\\node_modules\\squiffy\\squiffy.template.js``` .  There may be a bug or something. The code caused both app and browser to display a blank screen with only a blue restart button, and no alert when clicked.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mrangel,</p>\n<p>I followed your instructions by finding  <code>C:\\Program Files (x86)\\Squiffy\\resources\\app\\node_modules\\squiffy\\squiffy.template.js</code> .  There may be a bug or something. The code caused both app and browser to display a blank screen with only a blue restart button, and no alert when clicked.</p>\n\n",
      "PostDate": "2021-09-27T00:15:30.5199652Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "159954f6-607b-4467-901c-7c6f8a1e1181",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Probably a mismatched bracket or something. Any errors in the javascript console?",
      "EditableFormat": "markdown",
      "HTML": "<p>Probably a mismatched bracket or something. Any errors in the javascript console?</p>\n\n",
      "PostDate": "2021-09-27T08:03:31.3223905Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80cb341e-9173-4c0a-b9f5-2540c9270589",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No, the console just remains blank. The first version with only simple random works perfectly. The one with plural non-repeating attribute names is the culprit.\r\n\r\nBoth versions work beautifully in ```[[]]:```",
      "EditableFormat": "markdown",
      "HTML": "<p>No, the console just remains blank. The first version with only simple random works perfectly. The one with plural non-repeating attribute names is the culprit.</p>\n<p>Both versions work beautifully in <code>[[]]:</code></p>\n\n",
      "PostDate": "2021-09-27T08:52:13.1448859Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "483d831f-c04f-4dc5-b0ef-fd3599781df0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, looks like I've got some missing brackets in there. Dumb oversight.\r\n\r\nLet's try adding some extra whitespace to make it more readable\r\n```\r\n    squiffy.story.run = function(section) {\r\n        if (section.clear) {\r\n            squiffy.ui.clearScreen();\r\n        }\r\n        if (section.attributes) {\r\n            var parts, options;\r\n            processAttributes(section.attributes.map(line => (\r\n                parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) ? \r\n                    ((options = parts[2].split(\"|\")) &&\r\n                    (parts[1].split(\",\").map(attr => \r\n                        options.length ?\r\n                            attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]\r\n                        : \"Not enough options for \"+attr\r\n                    )))\r\n                : line\r\n            ).flat());\r\n        }\r\n        if (section.js) {\r\n            section.js();\r\n        }\r\n    };\r\n```\r\nI think the issue might have been precedence there. I added a few more () to tidy it up. That works in my javascript console; does it work in Squiffy?\r\n\r\nIf so, it's probably safe to cut out all the extra space between lines",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, looks like I've got some missing brackets in there. Dumb oversight.</p>\n<p>Let's try adding some extra whitespace to make it more readable</p>\n<pre><code>    squiffy.story.run = function(section) {\n        if (section.clear) {\n            squiffy.ui.clearScreen();\n        }\n        if (section.attributes) {\n            var parts, options;\n            processAttributes(section.attributes.map(line =&gt; (\n                parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) ? \n                    ((options = parts[2].split(\"|\")) &amp;&amp;\n                    (parts[1].split(\",\").map(attr =&gt; \n                        options.length ?\n                            attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]\n                        : \"Not enough options for \"+attr\n                    )))\n                : line\n            ).flat());\n        }\n        if (section.js) {\n            section.js();\n        }\n    };\n</code></pre>\n<p>I think the issue might have been precedence there. I added a few more () to tidy it up. That works in my javascript console; does it work in Squiffy?</p>\n<p>If so, it's probably safe to cut out all the extra space between lines</p>\n\n",
      "PostDate": "2021-09-27T09:34:03.8363018Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4cdd44da-b102-481c-a3a2-75c711141b17",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This one only blanks the screen if I use any kind of far-left ```@```, such as ```@set/unset/inc/dec```. But the random function still doesn't work. ",
      "EditableFormat": "markdown",
      "HTML": "<p>This one only blanks the screen if I use any kind of far-left <code>@</code>, such as <code>@set/unset/inc/dec</code>. But the random function still doesn't work.</p>\n\n",
      "PostDate": "2021-09-27T11:34:53.2348693Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aebcdf82-ae60-438c-9782-79e7f3d53752",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll try to fix it as soon as I'm not on mobile :S Still no errors in the console when it fails?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll try to fix it as soon as I'm not on mobile :S Still no errors in the console when it fails?</p>\n\n",
      "PostDate": "2021-09-27T12:09:29.7077557Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "177ebed9-a314-44da-92c1-b241212e4e53",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, I just tried it and it works for me. Not sure what's different (I'm copying it into the compiled `story.js` for  a test game rather than `squiffy-template.js`, but as far as I understand that should do exactly the same thing).",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, I just tried it and it works for me. Not sure what's different (I'm copying it into the compiled <code>story.js</code> for  a test game rather than <code>squiffy-template.js</code>, but as far as I understand that should do exactly the same thing).</p>\n\n",
      "PostDate": "2021-09-27T15:51:12.5005924Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "44de330f-16fa-4633-9ff0-a230cb17fa79",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A bit of an \"aha!\" this morning, but not entirely fixed yet. Your 'white space' version blanks the screen of the Squiffy editor app only. Yesterday I only checked the browser with the 'ugly' version. I checked again this morning after seeing your message. It works in the browser, just not in the editor.\r\n\r\nFrankly, I'll take it. The editor output has been out of sync with browser output for a long time now. This will just force me to stop frustrating myself with it.\r\n\r\nI'm sorry for all the nuisance.\r\n\r\n*Edit: from Chat GPT (March 22, 2023)*\r\n```\r\nsquiffy.story.run = function(section) {\r\n    if (section.clear) {\r\n        squiffy.ui.clearScreen();\r\n    }\r\n    if (section.attributes) {\r\n        var parts, options, processedLines = [];\r\n        section.attributes.forEach(function(line) {\r\n            if (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) {\r\n                options = parts[2].split(\"|\");\r\n                parts[1].split(\",\").forEach(function(attr) {\r\n                    if (options.length) {\r\n                        processedLines.push(attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]);\r\n                    } else {\r\n                        processedLines.push(\"Not enough options for \"+attr);\r\n                    }\r\n                });\r\n            } else {\r\n                processedLines.push(line);\r\n            }\r\n        });\r\n        processAttributes(processedLines);\r\n    }\r\n    if (section.js) {\r\n        section.js();\r\n    }\r\n};\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>A bit of an \"aha!\" this morning, but not entirely fixed yet. Your 'white space' version blanks the screen of the Squiffy editor app only. Yesterday I only checked the browser with the 'ugly' version. I checked again this morning after seeing your message. It works in the browser, just not in the editor.</p>\n<p>Frankly, I'll take it. The editor output has been out of sync with browser output for a long time now. This will just force me to stop frustrating myself with it.</p>\n<p>I'm sorry for all the nuisance.</p>\n<p><em>Edit: from Chat GPT (March 22, 2023)</em></p>\n<pre><code>squiffy.story.run = function(section) {\n    if (section.clear) {\n        squiffy.ui.clearScreen();\n    }\n    if (section.attributes) {\n        var parts, options, processedLines = [];\n        section.attributes.forEach(function(line) {\n            if (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) {\n                options = parts[2].split(\"|\");\n                parts[1].split(\",\").forEach(function(attr) {\n                    if (options.length) {\n                        processedLines.push(attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]);\n                    } else {\n                        processedLines.push(\"Not enough options for \"+attr);\n                    }\n                });\n            } else {\n                processedLines.push(line);\n            }\n        });\n        processAttributes(processedLines);\n    }\n    if (section.js) {\n        section.js();\n    }\n};\n\n\n</code></pre>\n\n",
      "PostDate": "2021-09-27T23:58:47.6315267Z",
      "LastEditDate": "2023-03-22T22:50:08.030508Z",
      "link": null
    },
    {
      "PostId": "04f4364a-aa0f-4ccd-87b1-07a89c0ad81c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, that's really weird. I'll need to get electron working so I can test it.\r\n\r\n(Apparently there's a chance that it might not work properly in IE… does anybody still use that?)",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, that's really weird. I'll need to get electron working so I can test it.</p>\n<p>(Apparently there's a chance that it might not work properly in IE… does anybody still use that?)</p>\n\n",
      "PostDate": "2021-09-28T00:35:30.2373107Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
