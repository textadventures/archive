{
  "Topic": {
    "TopicId": "k7mig9vfj0ashnvsbefoeq",
    "ForumId": "24",
    "Title": "Unofficial Squiffy 5.1.4 by mrangel",
    "LastUpdated": "2022-05-25T06:30:21.6172476Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "71188faa-35ae-4c7d-b2a6-5232c8b292eb",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can replace **\"C:\\Program Files (x86)\\Squiffy\\resources\\app\\node_modules\\squiffy\\squiffy.template.js\"** with the code below. This allows you to (1) automatically process ```<input id=\"user_input_title\"/>```as a Squiffy attribute.\r\n\r\nIt also lets you (2) make random Squiffy attributes with ```@set random:color = red|orange|yellow|green|blue|indigo|violet```.\r\n\r\nYou can also select more than one option without repeating, like this:\r\n\r\n```@set random:ice1,ice2,ice3 = popscile|italian ice|shaved ice```\r\n\r\nCombine these two like this: <br>```<input id=\"color1\"><input id=\"color2\"> [[go]]```\r\n```@set random:color=@color1|@color2```\r\n```{color}```\r\n\r\nNesting options are less limited. Now you can (3) make universally accessible passages: \r\n```[[]]:```\r\n```[UniversallyAccessiblePassageName]:```\r\n\r\nFinally, you can also (4) nest attributes within attributes, like this.\r\n\r\n```@set dessert := {color} {ice}```\r\n\r\n```@set italianArticle = an```\r\n```@set shavedArticle = some```\r\n```@set popsicleArticle = a```\r\n```@set Article := @{ice}Article```\r\n\r\n\r\n```\r\n/* jshint quotmark: single */\r\n/* jshint evil: true */\r\n\r\nvar squiffy = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    squiffy.story = {};\r\n\r\n    var initLinkHandler = function () {\r\n        var handleLink = function (link) {\r\n            if (link.hasClass('disabled')) return;\r\n            var passage = link.data('passage');\r\n            var section = link.data('section');\r\n            var rotateAttr = link.attr('data-rotate');\r\n            var sequenceAttr = link.attr('data-sequence');\r\n            if (passage) {\r\n                disableLink(link);\r\n                squiffy.set('_turncount', squiffy.get('_turncount') + 1);\r\n                passage = processLink(passage);\r\n                if (passage) {\r\n                    currentSection.append('<hr/>');\r\n                    squiffy.story.passage(passage);\r\n                }\r\n                var turnPassage = '@' + squiffy.get('_turncount');\r\n                if (turnPassage in squiffy.story.section.passages) {\r\n                    squiffy.story.passage(turnPassage);\r\n                }\r\n                if ('@last' in squiffy.story.section.passages && squiffy.get('_turncount')>= squiffy.story.section.passageCount) {\r\n                    squiffy.story.passage('@last');\r\n                }\r\n            }\r\n            else if (section) {\r\n                currentSection.append('<hr/>');\r\n                disableLink(link);\r\n                section = processLink(section);\r\n                squiffy.story.go(section);\r\n            }\r\n            else if (rotateAttr || sequenceAttr) {\r\n                var result = rotate(rotateAttr || sequenceAttr, rotateAttr ? link.text() : '');\r\n                link.html(result[0].replace(/&quot;/g, '\"').replace(/&#39;/g, '\\''));\r\n                var dataAttribute = rotateAttr ? 'data-rotate' : 'data-sequence';\r\n                link.attr(dataAttribute, result[1]);\r\n                if (!result[1]) {\r\n                    disableLink(link);\r\n                }\r\n                if (link.attr('data-attribute')) {\r\n                    squiffy.set(link.attr('data-attribute'), result[0]);\r\n                }\r\n                squiffy.story.save();\r\n            }\r\n        };\r\n\r\n        squiffy.ui.output.on('click', 'a.squiffy-link', function () {\r\n            handleLink(jQuery(this));\r\n        });\r\n\r\n        squiffy.ui.output.on('keypress', 'a.squiffy-link', function (e) {\r\n            if (e.which !== 13) return;\r\n            handleLink(jQuery(this));\r\n        });\r\n\r\n        squiffy.ui.output.on('mousedown', 'a.squiffy-link', function (event) {\r\n            event.preventDefault();\r\n        });\r\n    };\r\n\r\n    var disableLink = function (link) {\r\n        link.addClass('disabled');\r\n        link.attr('tabindex', -1);\r\n    }\r\n    \r\n    squiffy.story.begin = function () {\r\n        if (!squiffy.story.load()) {\r\n            squiffy.story.go(squiffy.story.start);\r\n        }\r\n    };\r\n\r\n    var processLink = function(link) {\r\n\t\tlink = String(link);\r\n        var sections = link.split(',');\r\n        var first = true;\r\n        var target = null;\r\n        sections.forEach(function (section) {\r\n            section = section.trim();\r\n            if (startsWith(section, '@replace ')) {\r\n                replaceLabel(section.substring(9));\r\n            }\r\n            else {\r\n                if (first) {\r\n                    target = section;\r\n                }\r\n                else {\r\n                    setAttribute(section);\r\n                }\r\n            }\r\n            first = false;\r\n        });\r\n        return target;\r\n    };\r\n\r\n    var setAttribute = function(expr) {\r\n\texpr = expr.replace(/^(\\w*\\s*):=(.*)$/, (match,name,value) => (name + \"=\" + squiffy.ui.processText(value)));\r\n        var lhs, rhs, op, value;\r\n        var setRegex = /^([\\w]*)\\s*=\\s*(.*)$/;\r\n        var setMatch = setRegex.exec(expr);\r\n        if (setMatch) {\r\n            lhs = setMatch[1];\r\n            rhs = setMatch[2];\r\n            if (isNaN(rhs)) {\r\n\t\t\t\tif(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));\r\n                squiffy.set(lhs, rhs);\r\n            }\r\n            else {\r\n                squiffy.set(lhs, parseFloat(rhs));\r\n            }\r\n        }\r\n        else {\r\n\t\t\tvar incDecRegex = /^([\\w]*)\\s*([\\+\\-\\*\\/])=\\s*(.*)$/;\r\n            var incDecMatch = incDecRegex.exec(expr);\r\n            if (incDecMatch) {\r\n                lhs = incDecMatch[1];\r\n                op = incDecMatch[2];\r\n\t\t\t\trhs = incDecMatch[3];\r\n\t\t\t\tif(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));\r\n\t\t\t\trhs = parseFloat(rhs);\r\n                value = squiffy.get(lhs);\r\n                if (value === null) value = 0;\r\n                if (op == '+') {\r\n                    value += rhs;\r\n                }\r\n                if (op == '-') {\r\n                    value -= rhs;\r\n                }\r\n\t\t\t\tif (op == '*') {\r\n\t\t\t\t\tvalue *= rhs;\r\n\t\t\t\t}\r\n\t\t\t\tif (op == '/') {\r\n\t\t\t\t\tvalue /= rhs;\r\n\t\t\t\t}\r\n                squiffy.set(lhs, value);\r\n            }\r\n            else {\r\n                value = true;\r\n                if (startsWith(expr, 'not ')) {\r\n                    expr = expr.substring(4);\r\n                    value = false;\r\n                }\r\n                squiffy.set(expr, value);\r\n            }\r\n        }\r\n    };\r\n\r\n    var replaceLabel = function(expr) {\r\n        var regex = /^([\\w]*)\\s*=\\s*(.*)$/;\r\n        var match = regex.exec(expr);\r\n        if (!match) return;\r\n        var label = match[1];\r\n        var text = match[2];\r\n        if (text in squiffy.story.section.passages) {\r\n            text = squiffy.story.section.passages[text].text;\r\n        }\r\n        else if (text in squiffy.story.sections) {\r\n            text = squiffy.story.sections[text].text;\r\n        }\r\n        var stripParags = /^<p>(.*)<\\/p>$/;\r\n        var stripParagsMatch = stripParags.exec(text);\r\n        if (stripParagsMatch) {\r\n            text = stripParagsMatch[1];\r\n        }\r\n        var $labels = squiffy.ui.output.find('.squiffy-label-' + label);\r\n        $labels.fadeOut(1000, function() {\r\n            $labels.html(squiffy.ui.processText(text));\r\n            $labels.fadeIn(1000, function() {\r\n                squiffy.story.save();\r\n            });\r\n        });\r\n    };\r\n\r\n    squiffy.story.go = function(section) {\r\n        squiffy.set('_transition', null);\r\n        newSection();\r\n        squiffy.story.section = squiffy.story.sections[section];\r\n        if (!squiffy.story.section) return;\r\n        squiffy.set('_section', section);\r\n        setSeen(section);\r\n        var master = squiffy.story.sections[''];\r\n        if (master) {\r\n            squiffy.story.run(master);\r\n            squiffy.ui.write(master.text);\r\n        }\r\n        squiffy.story.run(squiffy.story.section);\r\n        // The JS might have changed which section we're in\r\n        if (squiffy.get('_section') == section) {\r\n            squiffy.set('_turncount', 0);\r\n            squiffy.ui.write(squiffy.story.section.text);\r\n            squiffy.story.save();\r\n        }\r\n    };\r\n\r\n    squiffy.story.run = function(section) {\r\n    if (section.clear) {\r\n        squiffy.ui.clearScreen();\r\n    }\r\n    if (section.attributes) {\r\n        var parts, options, processedLines = [];\r\n        section.attributes.forEach(function(line) {\r\n            if (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) {\r\n                options = parts[2].split(\"|\");\r\n                parts[1].split(\",\").forEach(function(attr) {\r\n                    if (options.length) {\r\n                        processedLines.push(attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]);\r\n                    } else {\r\n                        processedLines.push(\"Not enough options for \"+attr);\r\n                    }\r\n                });\r\n            } else {\r\n                processedLines.push(line);\r\n            }\r\n        });\r\n        processAttributes(processedLines);\r\n    }\r\n    if (section.js) {\r\n        section.js();\r\n    }\r\n};\r\n\r\n    squiffy.story.passage = function(passageName) {\r\n        var passage = squiffy.story.section.passages[passageName];\r\n        var masterSection = squiffy.story.sections[''];\r\n        if (!passage && masterSection) passage = masterSection.passages[passageName];\r\n        if (!passage) return;\r\n        setSeen(passageName);\r\n        if (masterSection) {\r\n            var masterPassage = masterSection.passages[''];\r\n            if (masterPassage) {\r\n                squiffy.story.run(masterPassage);\r\n                squiffy.ui.write(masterPassage.text);\r\n            }\r\n        }\r\n        var master = squiffy.story.section.passages[''];\r\n        if (master) {\r\n            squiffy.story.run(master);\r\n            squiffy.ui.write(master.text);\r\n        }\r\n        squiffy.story.run(passage);\r\n        squiffy.ui.write(passage.text);\r\n        squiffy.story.save();\r\n    };\r\n    var processAttributes = function(attributes) {\r\n        attributes.forEach(function (attribute) {\r\n            if (startsWith(attribute, '@replace ')) {\r\n                replaceLabel(attribute.substring(9));\r\n            }\r\n            else {\r\n                setAttribute(attribute);\r\n            }\r\n        });\r\n    };\r\n\r\n    squiffy.story.restart = function() {\r\n        if (squiffy.ui.settings.persist && window.localStorage) {\r\n            var keys = Object.keys(localStorage);\r\n            jQuery.each(keys, function (idx, key) {\r\n                if (startsWith(key, squiffy.story.id)) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            squiffy.storageFallback = {};\r\n        }\r\n        if (squiffy.ui.settings.scroll === 'element') {\r\n            squiffy.ui.output.html('');\r\n            squiffy.story.begin();\r\n        }\r\n        else {\r\n            location.reload();\r\n        }\r\n    };\r\n\r\n    squiffy.story.save = function() {\r\n        squiffy.set('_output', squiffy.ui.output.html());\r\n    };\r\n\r\n    squiffy.story.load = function() {\r\n        var output = squiffy.get('_output');\r\n        if (!output) return false;\r\n        squiffy.ui.output.html(output);\r\n        currentSection = jQuery('#' + squiffy.get('_output-section'));\r\n        squiffy.story.section = squiffy.story.sections[squiffy.get('_section')];\r\n        var transition = squiffy.get('_transition');\r\n        if (transition) {\r\n            eval('(' + transition + ')()');\r\n        }\r\n        return true;\r\n    };\r\n\r\n    var setSeen = function(sectionName) {\r\n        var seenSections = squiffy.get('_seen_sections');\r\n        if (!seenSections) seenSections = [];\r\n        if (seenSections.indexOf(sectionName) == -1) {\r\n            seenSections.push(sectionName);\r\n            squiffy.set('_seen_sections', seenSections);\r\n        }\r\n    };\r\n\r\n    squiffy.story.seen = function(sectionName) {\r\n        var seenSections = squiffy.get('_seen_sections');\r\n        if (!seenSections) return false;\r\n        return (seenSections.indexOf(sectionName) > -1);\r\n    };\r\n    \r\n    squiffy.ui = {};\r\n\r\n    var currentSection = null;\r\n    var screenIsClear = true;\r\n    var scrollPosition = 0;\r\n\r\n    var newSection = function() {\r\n        if (currentSection) {\r\n            disableLink(jQuery('.squiffy-link', currentSection));\r\n\t    currentSection.find('input').each(function () {\r\n                set ($(this).data('attribute') || this.id, this.value);\r\n                this.disabled = true;\r\n\t    });\r\n\t\tcurrentSection.find(\"[contenteditable]\").each(function () {\r\n                set ($(this).data('attribute') || this.id, this.innerHTML);\r\n                this.disabled = true;\r\n\t    });\r\n                currentSection.find('textarea').each(function () {\r\n                set ($(this).data('attribute') || this.id, this.value);\r\n                this.disabled = true;\r\n\t    });\r\n\r\n\t    }\r\n\r\n        var sectionCount = squiffy.get('_section-count') + 1;\r\n        squiffy.set('_section-count', sectionCount);\r\n        var id = 'squiffy-section-' + sectionCount;\r\n        currentSection = jQuery('<div/>', {\r\n            id: id,\r\n        }).appendTo(squiffy.ui.output);\r\n        squiffy.set('_output-section', id);\r\n    };\r\n\r\n    squiffy.ui.write = function(text) {\r\n        screenIsClear = false;\r\n        scrollPosition = squiffy.ui.output.height();\r\n        currentSection.append(jQuery('<div/>').html(squiffy.ui.processText(text)));\r\n        squiffy.ui.scrollToEnd();\r\n    };\r\n\r\n    squiffy.ui.clearScreen = function() {\r\n        squiffy.ui.output.html('');\r\n        screenIsClear = true;\r\n        newSection();\r\n    };\r\n\r\n    squiffy.ui.scrollToEnd = function() {\r\n        var scrollTo, currentScrollTop, distance, duration;\r\n        if (squiffy.ui.settings.scroll === 'element') {\r\n            scrollTo = squiffy.ui.output[0].scrollHeight - squiffy.ui.output.height();\r\n            currentScrollTop = squiffy.ui.output.scrollTop();\r\n            if (scrollTo > currentScrollTop) {\r\n                distance = scrollTo - currentScrollTop;\r\n                duration = distance / 0.4;\r\n                squiffy.ui.output.stop().animate({ scrollTop: scrollTo }, duration);\r\n            }\r\n        }\r\n        else {\r\n            scrollTo = scrollPosition;\r\n            currentScrollTop = Math.max(jQuery('body').scrollTop(), jQuery('html').scrollTop());\r\n            if (scrollTo > currentScrollTop) {\r\n                var maxScrollTop = jQuery(document).height() - jQuery(window).height();\r\n                if (scrollTo > maxScrollTop) scrollTo = maxScrollTop;\r\n                distance = scrollTo - currentScrollTop;\r\n                duration = distance / 0.5;\r\n                jQuery('body,html').stop().animate({ scrollTop: scrollTo }, duration);\r\n            }\r\n        }\r\n    };\r\n\r\n    squiffy.ui.processText = function(text) {\r\n        function process(text, data) {\r\n            var containsUnprocessedSection = false;\r\n            var open = text.indexOf('{');\r\n            var close;\r\n            \r\n            if (open > -1) {\r\n                var nestCount = 1;\r\n                var searchStart = open + 1;\r\n                var finished = false;\r\n             \r\n                while (!finished) {\r\n                    var nextOpen = text.indexOf('{', searchStart);\r\n                    var nextClose = text.indexOf('}', searchStart);\r\n         \r\n                    if (nextClose > -1) {\r\n                        if (nextOpen > -1 && nextOpen < nextClose) {\r\n                            nestCount++;\r\n                            searchStart = nextOpen + 1;\r\n                        }\r\n                        else {\r\n                            nestCount--;\r\n                            searchStart = nextClose + 1;\r\n                            if (nestCount === 0) {\r\n                                close = nextClose;\r\n                                containsUnprocessedSection = true;\r\n                                finished = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        finished = true;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (containsUnprocessedSection) {\r\n                var section = text.substring(open + 1, close);\r\n                var value = processTextCommand(section, data);\r\n                text = text.substring(0, open) + value + process(text.substring(close + 1), data);\r\n            }\r\n            \r\n            return (text);\r\n        }\r\n\r\n        function processTextCommand(text, data) {\r\n            if (startsWith(text, 'if ')) {\r\n                return processTextCommand_If(text, data);\r\n            }\r\n            else if (startsWith(text, 'else:')) {\r\n                return processTextCommand_Else(text, data);\r\n            }\r\n            else if (startsWith(text, 'label:')) {\r\n                return processTextCommand_Label(text, data);\r\n            }\r\n            else if (/^rotate[: ]/.test(text)) {\r\n                return processTextCommand_Rotate('rotate', text, data);\r\n            }\r\n            else if (/^sequence[: ]/.test(text)) {\r\n                return processTextCommand_Rotate('sequence', text, data);   \r\n            }\r\n            else if (text in squiffy.story.section.passages) {\r\n                return process(squiffy.story.section.passages[text].text, data);\r\n            }\r\n            else if (text in squiffy.story.sections) {\r\n                return process(squiffy.story.sections[text].text, data);\r\n            }\r\n\t\t\telse if (startsWith(text,'@') && !startsWith(text,'@replace')) {\r\n\t\t\t\tprocessAttributes(text.substring(1).split(\",\"));\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n            return squiffy.get(text);\r\n        }\r\n\r\n        function processTextCommand_If(section, data) {\r\n            var command = section.substring(3);\r\n            var colon = command.indexOf(':');\r\n            if (colon == -1) {\r\n                return ('{if ' + command + '}');\r\n            }\r\n\r\n            var text = command.substring(colon + 1);\r\n            var condition = command.substring(0, colon);\r\n\t\t\tcondition = condition.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\r\n            var operatorRegex = /([\\w ]*)(=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;)(.*)/;\r\n            var match = operatorRegex.exec(condition);\r\n\r\n            var result = false;\r\n\r\n            if (match) {\r\n                var lhs = squiffy.get(match[1]);\r\n                var op = match[2];\r\n                var rhs = match[3];\r\n\r\n\t\t\t\tif(startsWith(rhs,'@')) rhs=squiffy.get(rhs.substring(1));\r\n\t\t\t\t\r\n                if (op == '=' && lhs == rhs) result = true;\r\n                if (op == '&lt;&gt;' && lhs != rhs) result = true;\r\n                if (op == '&gt;' && lhs > rhs) result = true;\r\n                if (op == '&lt;' && lhs < rhs) result = true;\r\n                if (op == '&gt;=' && lhs >= rhs) result = true;\r\n                if (op == '&lt;=' && lhs <= rhs) result = true;\r\n            }\r\n            else {\r\n                var checkValue = true;\r\n                if (startsWith(condition, 'not ')) {\r\n                    condition = condition.substring(4);\r\n                    checkValue = false;\r\n                }\r\n\r\n                if (startsWith(condition, 'seen ')) {\r\n                    result = (squiffy.story.seen(condition.substring(5)) == checkValue);\r\n                }\r\n                else {\r\n                    var value = squiffy.get(condition);\r\n                    if (value === null) value = false;\r\n                    result = (value == checkValue);\r\n                }\r\n            }\r\n\r\n            var textResult = result ? process(text, data) : '';\r\n\r\n            data.lastIf = result;\r\n            return textResult;\r\n        }\r\n\r\n        function processTextCommand_Else(section, data) {\r\n            if (!('lastIf' in data) || data.lastIf) return '';\r\n            var text = section.substring(5);\r\n            return process(text, data);\r\n        }\r\n\r\n        function processTextCommand_Label(section, data) {\r\n            var command = section.substring(6);\r\n            var eq = command.indexOf('=');\r\n            if (eq == -1) {\r\n                return ('{label:' + command + '}');\r\n            }\r\n\r\n            var text = command.substring(eq + 1);\r\n            var label = command.substring(0, eq);\r\n\r\n            return '<span class=\"squiffy-label-' + label + '\">' + process(text, data) + '</span>';\r\n        }\r\n\r\n        function processTextCommand_Rotate(type, section, data) {\r\n            var options;\r\n            var attribute = '';\r\n            if (section.substring(type.length, type.length + 1) == ' ') {\r\n                var colon = section.indexOf(':');\r\n                if (colon == -1) {\r\n                    return '{' + section + '}';\r\n                }\r\n                options = section.substring(colon + 1);\r\n                attribute = section.substring(type.length + 1, colon);\r\n            }\r\n            else {\r\n                options = section.substring(type.length + 1);\r\n            }\r\n            var rotation = rotate(options.replace(/\"/g, '&quot;').replace(/'/g, '&#39;'));\r\n            if (attribute) {\r\n                squiffy.set(attribute, rotation[0]);\r\n            }\r\n            return '<a class=\"squiffy-link\" data-' + type + '=\"' + rotation[1] + '\" data-attribute=\"' + attribute + '\" role=\"link\">' + rotation[0] + '</a>';\r\n        }\r\n\r\n        var data = {\r\n            fulltext: text\r\n        };\r\n        return process(text, data);\r\n    };\r\n\r\n    squiffy.ui.transition = function(f) {\r\n        squiffy.set('_transition', f.toString());\r\n        f();\r\n    };\r\n\r\n    squiffy.storageFallback = {};\r\n\r\n    squiffy.set = function(attribute, value) {\r\n        if (typeof value === 'undefined') value = true;\r\n        if (squiffy.ui.settings.persist && window.localStorage) {\r\n            localStorage[squiffy.story.id + '-' + attribute] = JSON.stringify(value);\r\n        }\r\n        else {\r\n            squiffy.storageFallback[attribute] = JSON.stringify(value);\r\n        }\r\n        squiffy.ui.settings.onSet(attribute, value);\r\n    };\r\n\r\n    squiffy.get = function(attribute) {\r\n        var result;\r\n        if (squiffy.ui.settings.persist && window.localStorage) {\r\n            result = localStorage[squiffy.story.id + '-' + attribute];\r\n        }\r\n        else {\r\n            result = squiffy.storageFallback[attribute];\r\n        }\r\n        if (!result) return null;\r\n        return JSON.parse(result);\r\n    };\r\n\r\n    var startsWith = function(string, prefix) {\r\n        return string.substring(0, prefix.length) === prefix;\r\n    };\r\n\r\n    var rotate = function(options, current) {\r\n        var colon = options.indexOf(':');\r\n        if (colon == -1) {\r\n            return [options, current];\r\n        }\r\n        var next = options.substring(0, colon);\r\n        var remaining = options.substring(colon + 1);\r\n        if (current) remaining += ':' + current;\r\n        return [next, remaining];\r\n    };\r\n\r\n    var methods = {\r\n        init: function (options) {\r\n            var settings = jQuery.extend({\r\n                scroll: 'body',\r\n                persist: true,\r\n                restartPrompt: true,\r\n                onSet: function (attribute, value) {}\r\n            }, options);\r\n\r\n            squiffy.ui.output = this;\r\n            squiffy.ui.restart = jQuery(settings.restart);\r\n            squiffy.ui.settings = settings;\r\n\r\n            if (settings.scroll === 'element') {\r\n                squiffy.ui.output.css('overflow-y', 'auto');\r\n            }\r\n\r\n            initLinkHandler();\r\n            squiffy.story.begin();\r\n            \r\n            return this;\r\n        },\r\n        get: function (attribute) {\r\n            return squiffy.get(attribute);\r\n        },\r\n        set: function (attribute, value) {\r\n            squiffy.set(attribute, value);\r\n        },\r\n        restart: function () {\r\n            if (!squiffy.ui.settings.restartPrompt || confirm('Are you sure you want to restart?')) {\r\n                squiffy.story.restart();\r\n            }\r\n        }\r\n    };\r\n\r\n    jQuery.fn.squiffy = function (methodOrOptions) {\r\n        if (methods[methodOrOptions]) {\r\n            return methods[methodOrOptions]\r\n                .apply(this, Array.prototype.slice.call(arguments, 1));\r\n        }\r\n        else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\r\n            return methods.init.apply(this, arguments);\r\n        } else {\r\n            jQuery.error('Method ' +  methodOrOptions + ' does not exist');\r\n        }\r\n    };\r\n})();\r\n\r\nvar get = squiffy.get;\r\nvar set = squiffy.set;",
      "EditableFormat": "markdown",
      "HTML": "<p>You can replace <strong>\"C:\\Program Files (x86)\\Squiffy\\resources\\app\\node_modules\\squiffy\\squiffy.template.js\"</strong> with the code below. This allows you to (1) automatically process <code>&lt;input id=\"user_input_title\"/&gt;</code>as a Squiffy attribute.</p>\n<p>It also lets you (2) make random Squiffy attributes with <code>@set random:color = red|orange|yellow|green|blue|indigo|violet</code>.</p>\n<p>You can also select more than one option without repeating, like this:</p>\n<p><code>@set random:ice1,ice2,ice3 = popscile|italian ice|shaved ice</code></p>\n<p>Combine these two like this: <br><code>&lt;input id=\"color1\"&gt;&lt;input id=\"color2\"&gt; [[go]]</code><br>\n<code>@set random:color=@color1|@color2</code><br>\n<code>{color}</code></p>\n<p>Nesting options are less limited. Now you can (3) make universally accessible passages:<br>\n<code>[[]]:</code><br>\n<code>[UniversallyAccessiblePassageName]:</code></p>\n<p>Finally, you can also (4) nest attributes within attributes, like this.</p>\n<p><code>@set dessert := {color} {ice}</code></p>\n<p><code>@set italianArticle = an</code><br>\n<code>@set shavedArticle = some</code><br>\n<code>@set popsicleArticle = a</code><br>\n<code>@set Article := @{ice}Article</code></p>\n<pre><code>/* jshint quotmark: single */\n/* jshint evil: true */\n\nvar squiffy = {};\n\n(function () {\n    'use strict';\n\n    squiffy.story = {};\n\n    var initLinkHandler = function () {\n        var handleLink = function (link) {\n            if (link.hasClass('disabled')) return;\n            var passage = link.data('passage');\n            var section = link.data('section');\n            var rotateAttr = link.attr('data-rotate');\n            var sequenceAttr = link.attr('data-sequence');\n            if (passage) {\n                disableLink(link);\n                squiffy.set('_turncount', squiffy.get('_turncount') + 1);\n                passage = processLink(passage);\n                if (passage) {\n                    currentSection.append('&lt;hr/&gt;');\n                    squiffy.story.passage(passage);\n                }\n                var turnPassage = '@' + squiffy.get('_turncount');\n                if (turnPassage in squiffy.story.section.passages) {\n                    squiffy.story.passage(turnPassage);\n                }\n                if ('@last' in squiffy.story.section.passages &amp;&amp; squiffy.get('_turncount')&gt;= squiffy.story.section.passageCount) {\n                    squiffy.story.passage('@last');\n                }\n            }\n            else if (section) {\n                currentSection.append('&lt;hr/&gt;');\n                disableLink(link);\n                section = processLink(section);\n                squiffy.story.go(section);\n            }\n            else if (rotateAttr || sequenceAttr) {\n                var result = rotate(rotateAttr || sequenceAttr, rotateAttr ? link.text() : '');\n                link.html(result[0].replace(/&amp;quot;/g, '\"').replace(/&amp;#39;/g, '\\''));\n                var dataAttribute = rotateAttr ? 'data-rotate' : 'data-sequence';\n                link.attr(dataAttribute, result[1]);\n                if (!result[1]) {\n                    disableLink(link);\n                }\n                if (link.attr('data-attribute')) {\n                    squiffy.set(link.attr('data-attribute'), result[0]);\n                }\n                squiffy.story.save();\n            }\n        };\n\n        squiffy.ui.output.on('click', 'a.squiffy-link', function () {\n            handleLink(jQuery(this));\n        });\n\n        squiffy.ui.output.on('keypress', 'a.squiffy-link', function (e) {\n            if (e.which !== 13) return;\n            handleLink(jQuery(this));\n        });\n\n        squiffy.ui.output.on('mousedown', 'a.squiffy-link', function (event) {\n            event.preventDefault();\n        });\n    };\n\n    var disableLink = function (link) {\n        link.addClass('disabled');\n        link.attr('tabindex', -1);\n    }\n    \n    squiffy.story.begin = function () {\n        if (!squiffy.story.load()) {\n            squiffy.story.go(squiffy.story.start);\n        }\n    };\n\n    var processLink = function(link) {\n\t\tlink = String(link);\n        var sections = link.split(',');\n        var first = true;\n        var target = null;\n        sections.forEach(function (section) {\n            section = section.trim();\n            if (startsWith(section, '@replace ')) {\n                replaceLabel(section.substring(9));\n            }\n            else {\n                if (first) {\n                    target = section;\n                }\n                else {\n                    setAttribute(section);\n                }\n            }\n            first = false;\n        });\n        return target;\n    };\n\n    var setAttribute = function(expr) {\n\texpr = expr.replace(/^(\\w*\\s*):=(.*)$/, (match,name,value) =&gt; (name + \"=\" + squiffy.ui.processText(value)));\n        var lhs, rhs, op, value;\n        var setRegex = /^([\\w]*)\\s*=\\s*(.*)$/;\n        var setMatch = setRegex.exec(expr);\n        if (setMatch) {\n            lhs = setMatch[1];\n            rhs = setMatch[2];\n            if (isNaN(rhs)) {\n\t\t\t\tif(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));\n                squiffy.set(lhs, rhs);\n            }\n            else {\n                squiffy.set(lhs, parseFloat(rhs));\n            }\n        }\n        else {\n\t\t\tvar incDecRegex = /^([\\w]*)\\s*([\\+\\-\\*\\/])=\\s*(.*)$/;\n            var incDecMatch = incDecRegex.exec(expr);\n            if (incDecMatch) {\n                lhs = incDecMatch[1];\n                op = incDecMatch[2];\n\t\t\t\trhs = incDecMatch[3];\n\t\t\t\tif(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));\n\t\t\t\trhs = parseFloat(rhs);\n                value = squiffy.get(lhs);\n                if (value === null) value = 0;\n                if (op == '+') {\n                    value += rhs;\n                }\n                if (op == '-') {\n                    value -= rhs;\n                }\n\t\t\t\tif (op == '*') {\n\t\t\t\t\tvalue *= rhs;\n\t\t\t\t}\n\t\t\t\tif (op == '/') {\n\t\t\t\t\tvalue /= rhs;\n\t\t\t\t}\n                squiffy.set(lhs, value);\n            }\n            else {\n                value = true;\n                if (startsWith(expr, 'not ')) {\n                    expr = expr.substring(4);\n                    value = false;\n                }\n                squiffy.set(expr, value);\n            }\n        }\n    };\n\n    var replaceLabel = function(expr) {\n        var regex = /^([\\w]*)\\s*=\\s*(.*)$/;\n        var match = regex.exec(expr);\n        if (!match) return;\n        var label = match[1];\n        var text = match[2];\n        if (text in squiffy.story.section.passages) {\n            text = squiffy.story.section.passages[text].text;\n        }\n        else if (text in squiffy.story.sections) {\n            text = squiffy.story.sections[text].text;\n        }\n        var stripParags = /^&lt;p&gt;(.*)&lt;\\/p&gt;$/;\n        var stripParagsMatch = stripParags.exec(text);\n        if (stripParagsMatch) {\n            text = stripParagsMatch[1];\n        }\n        var $labels = squiffy.ui.output.find('.squiffy-label-' + label);\n        $labels.fadeOut(1000, function() {\n            $labels.html(squiffy.ui.processText(text));\n            $labels.fadeIn(1000, function() {\n                squiffy.story.save();\n            });\n        });\n    };\n\n    squiffy.story.go = function(section) {\n        squiffy.set('_transition', null);\n        newSection();\n        squiffy.story.section = squiffy.story.sections[section];\n        if (!squiffy.story.section) return;\n        squiffy.set('_section', section);\n        setSeen(section);\n        var master = squiffy.story.sections[''];\n        if (master) {\n            squiffy.story.run(master);\n            squiffy.ui.write(master.text);\n        }\n        squiffy.story.run(squiffy.story.section);\n        // The JS might have changed which section we're in\n        if (squiffy.get('_section') == section) {\n            squiffy.set('_turncount', 0);\n            squiffy.ui.write(squiffy.story.section.text);\n            squiffy.story.save();\n        }\n    };\n\n    squiffy.story.run = function(section) {\n    if (section.clear) {\n        squiffy.ui.clearScreen();\n    }\n    if (section.attributes) {\n        var parts, options, processedLines = [];\n        section.attributes.forEach(function(line) {\n            if (parts = line.match(/^random\\s*:\\s*([\\w,]+)\\s*=\\s*(.+)/i)) {\n                options = parts[2].split(\"|\");\n                parts[1].split(\",\").forEach(function(attr) {\n                    if (options.length) {\n                        processedLines.push(attr + \" = \" + options.splice(Math.floor(Math.random() * options.length), 1)[0]);\n                    } else {\n                        processedLines.push(\"Not enough options for \"+attr);\n                    }\n                });\n            } else {\n                processedLines.push(line);\n            }\n        });\n        processAttributes(processedLines);\n    }\n    if (section.js) {\n        section.js();\n    }\n};\n\n    squiffy.story.passage = function(passageName) {\n        var passage = squiffy.story.section.passages[passageName];\n        var masterSection = squiffy.story.sections[''];\n        if (!passage &amp;&amp; masterSection) passage = masterSection.passages[passageName];\n        if (!passage) return;\n        setSeen(passageName);\n        if (masterSection) {\n            var masterPassage = masterSection.passages[''];\n            if (masterPassage) {\n                squiffy.story.run(masterPassage);\n                squiffy.ui.write(masterPassage.text);\n            }\n        }\n        var master = squiffy.story.section.passages[''];\n        if (master) {\n            squiffy.story.run(master);\n            squiffy.ui.write(master.text);\n        }\n        squiffy.story.run(passage);\n        squiffy.ui.write(passage.text);\n        squiffy.story.save();\n    };\n    var processAttributes = function(attributes) {\n        attributes.forEach(function (attribute) {\n            if (startsWith(attribute, '@replace ')) {\n                replaceLabel(attribute.substring(9));\n            }\n            else {\n                setAttribute(attribute);\n            }\n        });\n    };\n\n    squiffy.story.restart = function() {\n        if (squiffy.ui.settings.persist &amp;&amp; window.localStorage) {\n            var keys = Object.keys(localStorage);\n            jQuery.each(keys, function (idx, key) {\n                if (startsWith(key, squiffy.story.id)) {\n                    localStorage.removeItem(key);\n                }\n            });\n        }\n        else {\n            squiffy.storageFallback = {};\n        }\n        if (squiffy.ui.settings.scroll === 'element') {\n            squiffy.ui.output.html('');\n            squiffy.story.begin();\n        }\n        else {\n            location.reload();\n        }\n    };\n\n    squiffy.story.save = function() {\n        squiffy.set('_output', squiffy.ui.output.html());\n    };\n\n    squiffy.story.load = function() {\n        var output = squiffy.get('_output');\n        if (!output) return false;\n        squiffy.ui.output.html(output);\n        currentSection = jQuery('#' + squiffy.get('_output-section'));\n        squiffy.story.section = squiffy.story.sections[squiffy.get('_section')];\n        var transition = squiffy.get('_transition');\n        if (transition) {\n            eval('(' + transition + ')()');\n        }\n        return true;\n    };\n\n    var setSeen = function(sectionName) {\n        var seenSections = squiffy.get('_seen_sections');\n        if (!seenSections) seenSections = [];\n        if (seenSections.indexOf(sectionName) == -1) {\n            seenSections.push(sectionName);\n            squiffy.set('_seen_sections', seenSections);\n        }\n    };\n\n    squiffy.story.seen = function(sectionName) {\n        var seenSections = squiffy.get('_seen_sections');\n        if (!seenSections) return false;\n        return (seenSections.indexOf(sectionName) &gt; -1);\n    };\n    \n    squiffy.ui = {};\n\n    var currentSection = null;\n    var screenIsClear = true;\n    var scrollPosition = 0;\n\n    var newSection = function() {\n        if (currentSection) {\n            disableLink(jQuery('.squiffy-link', currentSection));\n\t    currentSection.find('input').each(function () {\n                set ($(this).data('attribute') || this.id, this.value);\n                this.disabled = true;\n\t    });\n\t\tcurrentSection.find(\"[contenteditable]\").each(function () {\n                set ($(this).data('attribute') || this.id, this.innerHTML);\n                this.disabled = true;\n\t    });\n                currentSection.find('textarea').each(function () {\n                set ($(this).data('attribute') || this.id, this.value);\n                this.disabled = true;\n\t    });\n\n\t    }\n\n        var sectionCount = squiffy.get('_section-count') + 1;\n        squiffy.set('_section-count', sectionCount);\n        var id = 'squiffy-section-' + sectionCount;\n        currentSection = jQuery('&lt;div/&gt;', {\n            id: id,\n        }).appendTo(squiffy.ui.output);\n        squiffy.set('_output-section', id);\n    };\n\n    squiffy.ui.write = function(text) {\n        screenIsClear = false;\n        scrollPosition = squiffy.ui.output.height();\n        currentSection.append(jQuery('&lt;div/&gt;').html(squiffy.ui.processText(text)));\n        squiffy.ui.scrollToEnd();\n    };\n\n    squiffy.ui.clearScreen = function() {\n        squiffy.ui.output.html('');\n        screenIsClear = true;\n        newSection();\n    };\n\n    squiffy.ui.scrollToEnd = function() {\n        var scrollTo, currentScrollTop, distance, duration;\n        if (squiffy.ui.settings.scroll === 'element') {\n            scrollTo = squiffy.ui.output[0].scrollHeight - squiffy.ui.output.height();\n            currentScrollTop = squiffy.ui.output.scrollTop();\n            if (scrollTo &gt; currentScrollTop) {\n                distance = scrollTo - currentScrollTop;\n                duration = distance / 0.4;\n                squiffy.ui.output.stop().animate({ scrollTop: scrollTo }, duration);\n            }\n        }\n        else {\n            scrollTo = scrollPosition;\n            currentScrollTop = Math.max(jQuery('body').scrollTop(), jQuery('html').scrollTop());\n            if (scrollTo &gt; currentScrollTop) {\n                var maxScrollTop = jQuery(document).height() - jQuery(window).height();\n                if (scrollTo &gt; maxScrollTop) scrollTo = maxScrollTop;\n                distance = scrollTo - currentScrollTop;\n                duration = distance / 0.5;\n                jQuery('body,html').stop().animate({ scrollTop: scrollTo }, duration);\n            }\n        }\n    };\n\n    squiffy.ui.processText = function(text) {\n        function process(text, data) {\n            var containsUnprocessedSection = false;\n            var open = text.indexOf('{');\n            var close;\n            \n            if (open &gt; -1) {\n                var nestCount = 1;\n                var searchStart = open + 1;\n                var finished = false;\n             \n                while (!finished) {\n                    var nextOpen = text.indexOf('{', searchStart);\n                    var nextClose = text.indexOf('}', searchStart);\n         \n                    if (nextClose &gt; -1) {\n                        if (nextOpen &gt; -1 &amp;&amp; nextOpen &lt; nextClose) {\n                            nestCount++;\n                            searchStart = nextOpen + 1;\n                        }\n                        else {\n                            nestCount--;\n                            searchStart = nextClose + 1;\n                            if (nestCount === 0) {\n                                close = nextClose;\n                                containsUnprocessedSection = true;\n                                finished = true;\n                            }\n                        }\n                    }\n                    else {\n                        finished = true;\n                    }\n                }\n            }\n            \n            if (containsUnprocessedSection) {\n                var section = text.substring(open + 1, close);\n                var value = processTextCommand(section, data);\n                text = text.substring(0, open) + value + process(text.substring(close + 1), data);\n            }\n            \n            return (text);\n        }\n\n        function processTextCommand(text, data) {\n            if (startsWith(text, 'if ')) {\n                return processTextCommand_If(text, data);\n            }\n            else if (startsWith(text, 'else:')) {\n                return processTextCommand_Else(text, data);\n            }\n            else if (startsWith(text, 'label:')) {\n                return processTextCommand_Label(text, data);\n            }\n            else if (/^rotate[: ]/.test(text)) {\n                return processTextCommand_Rotate('rotate', text, data);\n            }\n            else if (/^sequence[: ]/.test(text)) {\n                return processTextCommand_Rotate('sequence', text, data);   \n            }\n            else if (text in squiffy.story.section.passages) {\n                return process(squiffy.story.section.passages[text].text, data);\n            }\n            else if (text in squiffy.story.sections) {\n                return process(squiffy.story.sections[text].text, data);\n            }\n\t\t\telse if (startsWith(text,'@') &amp;&amp; !startsWith(text,'@replace')) {\n\t\t\t\tprocessAttributes(text.substring(1).split(\",\"));\n\t\t\t\treturn \"\";\n\t\t\t}\n            return squiffy.get(text);\n        }\n\n        function processTextCommand_If(section, data) {\n            var command = section.substring(3);\n            var colon = command.indexOf(':');\n            if (colon == -1) {\n                return ('{if ' + command + '}');\n            }\n\n            var text = command.substring(colon + 1);\n            var condition = command.substring(0, colon);\n\t\t\tcondition = condition.replace(\"&lt;\", \"&amp;lt;\").replace(\"&gt;\", \"&amp;gt;\");\n            var operatorRegex = /([\\w ]*)(=|&amp;lt;=|&amp;gt;=|&amp;lt;&amp;gt;|&amp;lt;|&amp;gt;)(.*)/;\n            var match = operatorRegex.exec(condition);\n\n            var result = false;\n\n            if (match) {\n                var lhs = squiffy.get(match[1]);\n                var op = match[2];\n                var rhs = match[3];\n\n\t\t\t\tif(startsWith(rhs,'@')) rhs=squiffy.get(rhs.substring(1));\n\t\t\t\t\n                if (op == '=' &amp;&amp; lhs == rhs) result = true;\n                if (op == '&amp;lt;&amp;gt;' &amp;&amp; lhs != rhs) result = true;\n                if (op == '&amp;gt;' &amp;&amp; lhs &gt; rhs) result = true;\n                if (op == '&amp;lt;' &amp;&amp; lhs &lt; rhs) result = true;\n                if (op == '&amp;gt;=' &amp;&amp; lhs &gt;= rhs) result = true;\n                if (op == '&amp;lt;=' &amp;&amp; lhs &lt;= rhs) result = true;\n            }\n            else {\n                var checkValue = true;\n                if (startsWith(condition, 'not ')) {\n                    condition = condition.substring(4);\n                    checkValue = false;\n                }\n\n                if (startsWith(condition, 'seen ')) {\n                    result = (squiffy.story.seen(condition.substring(5)) == checkValue);\n                }\n                else {\n                    var value = squiffy.get(condition);\n                    if (value === null) value = false;\n                    result = (value == checkValue);\n                }\n            }\n\n            var textResult = result ? process(text, data) : '';\n\n            data.lastIf = result;\n            return textResult;\n        }\n\n        function processTextCommand_Else(section, data) {\n            if (!('lastIf' in data) || data.lastIf) return '';\n            var text = section.substring(5);\n            return process(text, data);\n        }\n\n        function processTextCommand_Label(section, data) {\n            var command = section.substring(6);\n            var eq = command.indexOf('=');\n            if (eq == -1) {\n                return ('{label:' + command + '}');\n            }\n\n            var text = command.substring(eq + 1);\n            var label = command.substring(0, eq);\n\n            return '&lt;span class=\"squiffy-label-' + label + '\"&gt;' + process(text, data) + '&lt;/span&gt;';\n        }\n\n        function processTextCommand_Rotate(type, section, data) {\n            var options;\n            var attribute = '';\n            if (section.substring(type.length, type.length + 1) == ' ') {\n                var colon = section.indexOf(':');\n                if (colon == -1) {\n                    return '{' + section + '}';\n                }\n                options = section.substring(colon + 1);\n                attribute = section.substring(type.length + 1, colon);\n            }\n            else {\n                options = section.substring(type.length + 1);\n            }\n            var rotation = rotate(options.replace(/\"/g, '&amp;quot;').replace(/'/g, '&amp;#39;'));\n            if (attribute) {\n                squiffy.set(attribute, rotation[0]);\n            }\n            return '&lt;a class=\"squiffy-link\" data-' + type + '=\"' + rotation[1] + '\" data-attribute=\"' + attribute + '\" role=\"link\"&gt;' + rotation[0] + '&lt;/a&gt;';\n        }\n\n        var data = {\n            fulltext: text\n        };\n        return process(text, data);\n    };\n\n    squiffy.ui.transition = function(f) {\n        squiffy.set('_transition', f.toString());\n        f();\n    };\n\n    squiffy.storageFallback = {};\n\n    squiffy.set = function(attribute, value) {\n        if (typeof value === 'undefined') value = true;\n        if (squiffy.ui.settings.persist &amp;&amp; window.localStorage) {\n            localStorage[squiffy.story.id + '-' + attribute] = JSON.stringify(value);\n        }\n        else {\n            squiffy.storageFallback[attribute] = JSON.stringify(value);\n        }\n        squiffy.ui.settings.onSet(attribute, value);\n    };\n\n    squiffy.get = function(attribute) {\n        var result;\n        if (squiffy.ui.settings.persist &amp;&amp; window.localStorage) {\n            result = localStorage[squiffy.story.id + '-' + attribute];\n        }\n        else {\n            result = squiffy.storageFallback[attribute];\n        }\n        if (!result) return null;\n        return JSON.parse(result);\n    };\n\n    var startsWith = function(string, prefix) {\n        return string.substring(0, prefix.length) === prefix;\n    };\n\n    var rotate = function(options, current) {\n        var colon = options.indexOf(':');\n        if (colon == -1) {\n            return [options, current];\n        }\n        var next = options.substring(0, colon);\n        var remaining = options.substring(colon + 1);\n        if (current) remaining += ':' + current;\n        return [next, remaining];\n    };\n\n    var methods = {\n        init: function (options) {\n            var settings = jQuery.extend({\n                scroll: 'body',\n                persist: true,\n                restartPrompt: true,\n                onSet: function (attribute, value) {}\n            }, options);\n\n            squiffy.ui.output = this;\n            squiffy.ui.restart = jQuery(settings.restart);\n            squiffy.ui.settings = settings;\n\n            if (settings.scroll === 'element') {\n                squiffy.ui.output.css('overflow-y', 'auto');\n            }\n\n            initLinkHandler();\n            squiffy.story.begin();\n            \n            return this;\n        },\n        get: function (attribute) {\n            return squiffy.get(attribute);\n        },\n        set: function (attribute, value) {\n            squiffy.set(attribute, value);\n        },\n        restart: function () {\n            if (!squiffy.ui.settings.restartPrompt || confirm('Are you sure you want to restart?')) {\n                squiffy.story.restart();\n            }\n        }\n    };\n\n    jQuery.fn.squiffy = function (methodOrOptions) {\n        if (methods[methodOrOptions]) {\n            return methods[methodOrOptions]\n                .apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n        else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n            return methods.init.apply(this, arguments);\n        } else {\n            jQuery.error('Method ' +  methodOrOptions + ' does not exist');\n        }\n    };\n})();\n\nvar get = squiffy.get;\nvar set = squiffy.set;\n</code></pre>\n\n",
      "PostDate": "2022-05-25T06:30:21.6172476Z",
      "LastEditDate": "2023-04-02T15:01:17.8113639Z",
      "link": null
    }
  ]
}
