{
  "Topic": {
    "TopicId": "4wyjrkygfko-9l5ybaciya",
    "ForumId": "10",
    "Title": "why am I getting this error?",
    "LastUpdated": "2022-04-21T02:04:45.6102356Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a55659fc-705e-4cf9-913b-110dab19f729",
      "UserId": 583976,
      "Username": "Nemec",
      "AvatarUrl": "https://secure.gravatar.com/avatar/02e242f1bf25ef36324ec008681b6d9e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Error running script: Error compiling expression 'exit.visible': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'\r\n\r\nI do not have an exit.variable in my code. In fact I never referenced any variable called \"visible\".  Why am I be getting this error?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Error running script: Error compiling expression 'exit.visible': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Boolean'</p>\n</blockquote>\n<p>I do not have an exit.variable in my code. In fact I never referenced any variable called \"visible\".  Why am I be getting this error?</p>\n\n",
      "PostDate": "2022-04-21T02:04:45.6102356Z",
      "LastEditDate": "2022-04-21T02:06:07.5050644Z",
      "link": null
    },
    {
      "PostId": "0dd4ce13-727f-4ddd-898d-179d7d1a7a55",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are two places in the core code the expression `exit.visible` appears.\r\n\r\nFirst is in the function `ScopeExitsForRoom`, which looks like this:\r\n```\r\n  <function name=\"ScopeExitsForRoom\" type=\"objectlist\" parameters=\"room\">\r\n    <![CDATA[\r\n    result = NewObjectList()\r\n    foreach (exit, AllExits()) {\r\n      if (exit.parent = room) {\r\n        if (exit.visible) {\r\n          if (GetBoolean(room, \"darklevel\")) {\r\n            if (GetBoolean(exit, \"lightsource\")) {\r\n              list add(result, exit)\r\n            }\r\n          }\r\n          else {\r\n            list add(result, exit)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (result)\r\n    ]]>\r\n  </function>\r\n```\r\nNow, in this case the variable `exit` is being extracted from the built-in function `AllExits()`, so it can only be an exit. And all exits inherit the type `defaultexit`, which forces them to have a `visible` attribute. So if the error is coming from here, it means that either you have modified `defaultexit` and omitted the `visible` attribute; or you have created an exit whose `visible` attribute is set to an actual object.\r\n\r\nBoth of these seem unlikely, so let's look at the other possibility.\r\n\r\n<hr style=\"border-top: 1px dotted grey\"/>\r\n\r\nThe built-in `go` command starts with:\r\n```\r\n  <command name=\"go\" pattern=\"[go]\" unresolved=\"[UnresolvedLocation]\">\r\n    if (exit.visible) {\r\n      if (exit.locked) {\r\n        msg (exit.lockmessage)\r\n      }\r\n      else if (exit.runscript) {\r\n        if (HasScript(exit, \"script\")) {\r\n          do (exit, \"script\")\r\n        }\r\n      }\r\n      else if (exit.lookonly) {\r\n         msg (\"[UnresolvedLocation]\")\r\n      }\r\n      else {\r\n        if (HasString(exit, \"message\")) {\r\n          if (not exit.message = \"\") {\r\n            if (game.clearscreenonroomenter) {\r\n              game.currentexitmessage = exit.message\r\n            }\r\n            else {\r\n              msg(exit.message)\r\n            }\r\n          }\r\n        }\r\n        game.pov.parent = exit.to\r\n      }\r\n    }\r\n    else {\r\n      msg (\"[UnresolvedLocation]\")\r\n    }\r\n  </command>\r\n```\r\nHmm… the parser's scope functions should ensure that this only gets an exit as well. Or are you invoking the `go` script manually? I would wonder if you were passing an object to `go.script` using some of your own code; but that still shouldn't cause that error, as `defaultobject` also has a boolean `visible` attribute. Are you manually invoking `go.script` and passing it a command or a turnscript in place of an exit for some reason?\r\n\r\nSo… further questions:\r\n* Have you modified `defaultexit`?\r\n* Does the error appear as soon as the game starts, at some specific interval, or when the player uses the `go` command?\r\n* Have you manually called `go.script` anywhere in your code? If so,  what exit are you passing it?\r\n\r\n\r\nWith a weird case like this, it would probably be better if you could just show us a copy of the game (or  a sample game that demonstrates the same error). This is the kind of issue where explaining what to look for can be tough, but it should stand out to a more experienced user.",
      "EditableFormat": "markdown",
      "HTML": "<p>There are two places in the core code the expression <code>exit.visible</code> appears.</p>\n<p>First is in the function <code>ScopeExitsForRoom</code>, which looks like this:</p>\n<pre><code>  &lt;function name=\"ScopeExitsForRoom\" type=\"objectlist\" parameters=\"room\"&gt;\n    &lt;![CDATA[\n    result = NewObjectList()\n    foreach (exit, AllExits()) {\n      if (exit.parent = room) {\n        if (exit.visible) {\n          if (GetBoolean(room, \"darklevel\")) {\n            if (GetBoolean(exit, \"lightsource\")) {\n              list add(result, exit)\n            }\n          }\n          else {\n            list add(result, exit)\n          }\n        }\n      }\n    }\n    return (result)\n    ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<p>Now, in this case the variable <code>exit</code> is being extracted from the built-in function <code>AllExits()</code>, so it can only be an exit. And all exits inherit the type <code>defaultexit</code>, which forces them to have a <code>visible</code> attribute. So if the error is coming from here, it means that either you have modified <code>defaultexit</code> and omitted the <code>visible</code> attribute; or you have created an exit whose <code>visible</code> attribute is set to an actual object.</p>\n<p>Both of these seem unlikely, so let's look at the other possibility.</p>\n<hr style=\"border-top: 1px dotted grey\">\n<p>The built-in <code>go</code> command starts with:</p>\n<pre><code>  &lt;command name=\"go\" pattern=\"[go]\" unresolved=\"[UnresolvedLocation]\"&gt;\n    if (exit.visible) {\n      if (exit.locked) {\n        msg (exit.lockmessage)\n      }\n      else if (exit.runscript) {\n        if (HasScript(exit, \"script\")) {\n          do (exit, \"script\")\n        }\n      }\n      else if (exit.lookonly) {\n         msg (\"[UnresolvedLocation]\")\n      }\n      else {\n        if (HasString(exit, \"message\")) {\n          if (not exit.message = \"\") {\n            if (game.clearscreenonroomenter) {\n              game.currentexitmessage = exit.message\n            }\n            else {\n              msg(exit.message)\n            }\n          }\n        }\n        game.pov.parent = exit.to\n      }\n    }\n    else {\n      msg (\"[UnresolvedLocation]\")\n    }\n  &lt;/command&gt;\n</code></pre>\n<p>Hmm… the parser's scope functions should ensure that this only gets an exit as well. Or are you invoking the <code>go</code> script manually? I would wonder if you were passing an object to <code>go.script</code> using some of your own code; but that still shouldn't cause that error, as <code>defaultobject</code> also has a boolean <code>visible</code> attribute. Are you manually invoking <code>go.script</code> and passing it a command or a turnscript in place of an exit for some reason?</p>\n<p>So… further questions:</p>\n<ul>\n<li>Have you modified <code>defaultexit</code>?</li>\n<li>Does the error appear as soon as the game starts, at some specific interval, or when the player uses the <code>go</code> command?</li>\n<li>Have you manually called <code>go.script</code> anywhere in your code? If so,  what exit are you passing it?</li>\n</ul>\n<p>With a weird case like this, it would probably be better if you could just show us a copy of the game (or  a sample game that demonstrates the same error). This is the kind of issue where explaining what to look for can be tough, but it should stand out to a more experienced user.</p>\n\n",
      "PostDate": "2022-04-21T09:54:13.2242352Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5b6bab39-e2fb-42fa-bcec-bf254a0e32a4",
      "UserId": 583976,
      "Username": "Nemec",
      "AvatarUrl": "https://secure.gravatar.com/avatar/02e242f1bf25ef36324ec008681b6d9e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\r\n>So if the error is coming from here, it means that either you have modified defaultexit and omitted the visible attribute; or you have created an exit whose visible attribute is set to an actual object.\r\nBoth of these seem unlikely, so let's look at the other possibility.\r\n\r\nOops\r\n\r\n```\r\n<type name=\"defaultexit\">\r\n    <access_requirement type=\"string\"></access_requirement>\r\n    <action_description type=\"string\"></action_description>\r\n    <display_when_out_of_combat type=\"string\"></display_when_out_of_combat>\r\n    <display_during_close_combat type=\"string\"> </display_during_close_combat>\r\n    <can_push_to type=\"boolean\">true</can_push_to>\r\n    <can_fall_down type=\"boolean\">false</can_fall_down>\r\n  </type>\r\n```\r\nI am hoping to have exits that don't require me to keep manually updating each one individually as I develop my game.  Is there a way to add what I have above to \"defaultexit\" without removing what is already in it?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So if the error is coming from here, it means that either you have modified defaultexit and omitted the visible attribute; or you have created an exit whose visible attribute is set to an actual object.<br>\nBoth of these seem unlikely, so let's look at the other possibility.</p>\n</blockquote>\n<p>Oops</p>\n<pre><code>&lt;type name=\"defaultexit\"&gt;\n    &lt;access_requirement type=\"string\"&gt;&lt;/access_requirement&gt;\n    &lt;action_description type=\"string\"&gt;&lt;/action_description&gt;\n    &lt;display_when_out_of_combat type=\"string\"&gt;&lt;/display_when_out_of_combat&gt;\n    &lt;display_during_close_combat type=\"string\"&gt; &lt;/display_during_close_combat&gt;\n    &lt;can_push_to type=\"boolean\"&gt;true&lt;/can_push_to&gt;\n    &lt;can_fall_down type=\"boolean\"&gt;false&lt;/can_fall_down&gt;\n  &lt;/type&gt;\n</code></pre>\n<p>I am hoping to have exits that don't require me to keep manually updating each one individually as I develop my game.  Is there a way to add what I have above to \"defaultexit\" without removing what is already in it?</p>\n\n",
      "PostDate": "2022-04-21T13:10:09.7859291Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04119165-4ef5-4b88-aaf4-e09fa8e4ffcd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The usual way to do stuff like that is for the code that uses those attributes to check if they exist, and if not use a default value.\r\n\r\nI've also seen people redefine the type `direction`, which by default is inherited by all directional exits, but doesn't contain any attributes you would need to preserve.]\r\n\r\nIf you really want to modify `defaultexit` itself, to ensure that your attributes appear on all exits, you would need to include some of the default attributes.\r\n\r\nI assume you've seen the default definition?\r\n```\r\n  <type name=\"defaultexit\">\r\n    <displayverbs type=\"simplestringlist\">[GoTo]</displayverbs>\r\n    <visible type=\"boolean\">true</visible>\r\n    <scenery type=\"boolean\">false</scenery>\r\n    <locked type=\"boolean\">false</locked>\r\n    <lockmessage>[LockedExit]</lockmessage>\r\n    <lookonly type=\"boolean\">false</lookonly>\r\n    <runscript type=\"boolean\">false</runscript>\r\n    <lightstrength type=\"string\"></lightstrength>\r\n    <grid_length type=\"int\">1</grid_length>\r\n    <grid_render type=\"boolean\">false</grid_render>\r\n    <grid_offset_x type=\"int\">0</grid_offset_x>\r\n    <grid_offset_y type=\"int\">0</grid_offset_y>\r\n  </type>\r\n```\r\n\r\nCore scope functions use the attributes `visible` and `scenery`, so you will need to include those unless you are rewriting the scope functions too. (They also use `lightsource` and `lightstrength`, but those are checked using the `GetBoolean` and `GetString` functions, so omitting them doesn't cause an error)\r\n\r\nSo you'd end up with something like:\r\n```\r\n  <type name=\"defaultexit\">\r\n    <visible type=\"boolean\">true</visible>\r\n    <scenery type=\"boolean\">false</scenery>\r\n    <access_requirement type=\"string\"></access_requirement>\r\n    <action_description type=\"string\"></action_description>\r\n    <display_when_out_of_combat type=\"string\"></display_when_out_of_combat>\r\n    <display_during_close_combat type=\"string\"> </display_during_close_combat>\r\n    <can_push_to type=\"boolean\">true</can_push_to>\r\n    <can_fall_down type=\"boolean\">false</can_fall_down>\r\n  </type>\r\n```\r\n\r\nThe `grid_` attributes are used by the grid/map system, so should be included as well if you want to use the map at all.\r\n\r\nThe remaining attributes (`locked`, `lookonly`, `runscript`, and `to`) are referenced by the default `go` command; so if you've written your own `go` you can probably omit them.",
      "EditableFormat": "markdown",
      "HTML": "<p>The usual way to do stuff like that is for the code that uses those attributes to check if they exist, and if not use a default value.</p>\n<p>I've also seen people redefine the type <code>direction</code>, which by default is inherited by all directional exits, but doesn't contain any attributes you would need to preserve.]</p>\n<p>If you really want to modify <code>defaultexit</code> itself, to ensure that your attributes appear on all exits, you would need to include some of the default attributes.</p>\n<p>I assume you've seen the default definition?</p>\n<pre><code>  &lt;type name=\"defaultexit\"&gt;\n    &lt;displayverbs type=\"simplestringlist\"&gt;[GoTo]&lt;/displayverbs&gt;\n    &lt;visible type=\"boolean\"&gt;true&lt;/visible&gt;\n    &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n    &lt;locked type=\"boolean\"&gt;false&lt;/locked&gt;\n    &lt;lockmessage&gt;[LockedExit]&lt;/lockmessage&gt;\n    &lt;lookonly type=\"boolean\"&gt;false&lt;/lookonly&gt;\n    &lt;runscript type=\"boolean\"&gt;false&lt;/runscript&gt;\n    &lt;lightstrength type=\"string\"&gt;&lt;/lightstrength&gt;\n    &lt;grid_length type=\"int\"&gt;1&lt;/grid_length&gt;\n    &lt;grid_render type=\"boolean\"&gt;false&lt;/grid_render&gt;\n    &lt;grid_offset_x type=\"int\"&gt;0&lt;/grid_offset_x&gt;\n    &lt;grid_offset_y type=\"int\"&gt;0&lt;/grid_offset_y&gt;\n  &lt;/type&gt;\n</code></pre>\n<p>Core scope functions use the attributes <code>visible</code> and <code>scenery</code>, so you will need to include those unless you are rewriting the scope functions too. (They also use <code>lightsource</code> and <code>lightstrength</code>, but those are checked using the <code>GetBoolean</code> and <code>GetString</code> functions, so omitting them doesn't cause an error)</p>\n<p>So you'd end up with something like:</p>\n<pre><code>  &lt;type name=\"defaultexit\"&gt;\n    &lt;visible type=\"boolean\"&gt;true&lt;/visible&gt;\n    &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n    &lt;access_requirement type=\"string\"&gt;&lt;/access_requirement&gt;\n    &lt;action_description type=\"string\"&gt;&lt;/action_description&gt;\n    &lt;display_when_out_of_combat type=\"string\"&gt;&lt;/display_when_out_of_combat&gt;\n    &lt;display_during_close_combat type=\"string\"&gt; &lt;/display_during_close_combat&gt;\n    &lt;can_push_to type=\"boolean\"&gt;true&lt;/can_push_to&gt;\n    &lt;can_fall_down type=\"boolean\"&gt;false&lt;/can_fall_down&gt;\n  &lt;/type&gt;\n</code></pre>\n<p>The <code>grid_</code> attributes are used by the grid/map system, so should be included as well if you want to use the map at all.</p>\n<p>The remaining attributes (<code>locked</code>, <code>lookonly</code>, <code>runscript</code>, and <code>to</code>) are referenced by the default <code>go</code> command; so if you've written your own <code>go</code> you can probably omit them.</p>\n\n",
      "PostDate": "2022-04-21T14:45:42.3762781Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f42ad520-b348-42be-b144-46930f173103",
      "UserId": 583976,
      "Username": "Nemec",
      "AvatarUrl": "https://secure.gravatar.com/avatar/02e242f1bf25ef36324ec008681b6d9e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Everything related to this issue seems to be fixed now!  Thanks for all the help mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>Everything related to this issue seems to be fixed now!  Thanks for all the help mrangel!</p>\n\n",
      "PostDate": "2022-04-22T19:17:13.8810967Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
