{
  "Topic": {
    "TopicId": "875qglfuzucg1itqfc2rnw",
    "ForumId": "10",
    "Title": "Help understanding switch statements.",
    "LastUpdated": "2021-07-17T00:26:36.9451914Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f5067d61-8a7a-496a-a2e7-f01f63e31b90",
      "UserId": 374963,
      "Username": "Sara377544",
      "AvatarUrl": "https://i.imgur.com/YCtLz3Nb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello, sorry to bother everyone again with my dumb questions. I need a bit of help understand how switch statements work. Now, I know theres a tutorial about it in quest tutorial and I followed it, but only understood it when it works with showmenu.\r\n\r\nBut I want one that doesn't rely on shortmenu, but rather just a substitute on ifs.\r\n\r\nFor example:\r\nIf player is in room x\r\nelse if player is in room y\r\nelse if player is in room z\r\nelse\r\n\r\nI understand how these work with if, but not sure how to program them with switch. For anyone wondering i program with downloadable version.\r\n\r\nAlso, is it possible (and ok) to put a switch inside a switch? Like for example, as a result of 1 switch leading to a script that will lead to another switch (kind of nested inside the first?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello, sorry to bother everyone again with my dumb questions. I need a bit of help understand how switch statements work. Now, I know theres a tutorial about it in quest tutorial and I followed it, but only understood it when it works with showmenu.</p>\n<p>But I want one that doesn't rely on shortmenu, but rather just a substitute on ifs.</p>\n<p>For example:<br>\nIf player is in room x<br>\nelse if player is in room y<br>\nelse if player is in room z<br>\nelse</p>\n<p>I understand how these work with if, but not sure how to program them with switch. For anyone wondering i program with downloadable version.</p>\n<p>Also, is it possible (and ok) to put a switch inside a switch? Like for example, as a result of 1 switch leading to a script that will lead to another switch (kind of nested inside the first?)</p>\n\n",
      "PostDate": "2021-07-17T00:26:36.9451914Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "330ad659-1640-4434-8da2-382927871049",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nAn ```if``` statement works similarly to a ```switch``` statement.\r\n\r\nUsing ```if```:\r\n```\r\nif (game.pov.parent = room x) {\r\n  // Do something\r\n}\r\nelse if (game.pov.parent = room y) {\r\n  // Do something different\r\n}\r\nelse if (game.pov.parent = room z) {\r\n  // Do something completely different\r\n}\r\nelse {\r\n  // Do something, or do nothing; do whatever\r\n}\r\n```\r\n\r\n---\r\nThe same thing using ```switch```:\r\n```\r\nswitch (game.pov.parent) {\r\n  case (room x) {\r\n    // Do something\r\n  }\r\n  case (room y) {\r\n    // Do something different\r\n  }\r\n  case (room z) {\r\n    // Do something completely different\r\n  }\r\n  default {\r\n    // Do something, or do nothing; do whatever\r\n  }\r\n}\r\n```\r\n\r\n---\r\n> Also, is it possible (and ok) to put a switch inside a switch? Like for example, as a result of 1 switch leading to a script that will lead to another switch (kind of nested inside the first?)\r\n\r\nYep. Just add it where you want it.\r\n\r\nMost people use ```if``` statements more often than ```switch``` statements, unless they're only checking the value of one thing over and over, as in this example (```game.pov.parent```).",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>An <code>if</code> statement works similarly to a <code>switch</code> statement.</p>\n<p>Using <code>if</code>:</p>\n<pre><code>if (game.pov.parent = room x) {\n  // Do something\n}\nelse if (game.pov.parent = room y) {\n  // Do something different\n}\nelse if (game.pov.parent = room z) {\n  // Do something completely different\n}\nelse {\n  // Do something, or do nothing; do whatever\n}\n</code></pre>\n<hr>\n<p>The same thing using <code>switch</code>:</p>\n<pre><code>switch (game.pov.parent) {\n  case (room x) {\n    // Do something\n  }\n  case (room y) {\n    // Do something different\n  }\n  case (room z) {\n    // Do something completely different\n  }\n  default {\n    // Do something, or do nothing; do whatever\n  }\n}\n</code></pre>\n<hr>\n<blockquote>\n<p>Also, is it possible (and ok) to put a switch inside a switch? Like for example, as a result of 1 switch leading to a script that will lead to another switch (kind of nested inside the first?)</p>\n</blockquote>\n<p>Yep. Just add it where you want it.</p>\n<p>Most people use <code>if</code> statements more often than <code>switch</code> statements, unless they're only checking the value of one thing over and over, as in this example (<code>game.pov.parent</code>).</p>\n\n",
      "PostDate": "2021-07-17T01:14:16.3025597Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c91a8948-8c05-427b-9dfd-f33d2bcf6e5b",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Switch statements will work as a stand alone, but not as an if replacement entirely.\r\n\r\nHere is an example. I typed this in the room description.\r\n\r\n```\r\nmsg (\"Please type 1, 2, 3, or 4.\")\r\nget input {\r\n  switch (result) {\r\n    case (1) {\r\n      msg (\"You typed 1.\")\r\n    }\r\n    case (2) {\r\n      msg (\"You typed 2.\")\r\n    }\r\n    case (3) {\r\n      msg (\"You typed 3.\")\r\n    }\r\n    case (4) {\r\n      msg (\"You typed 4.\")\r\n    }\r\n    default {\r\n      msg (\"No. You typed a message!\")\r\n    }\r\n  }\r\n}\r\n```\r\nSwitch statements always need input. If they don't have input, they will fail. At least, that's how it works with Quest.",
      "EditableFormat": "markdown",
      "HTML": "<p>Switch statements will work as a stand alone, but not as an if replacement entirely.</p>\n<p>Here is an example. I typed this in the room description.</p>\n<pre><code>msg (\"Please type 1, 2, 3, or 4.\")\nget input {\n  switch (result) {\n    case (1) {\n      msg (\"You typed 1.\")\n    }\n    case (2) {\n      msg (\"You typed 2.\")\n    }\n    case (3) {\n      msg (\"You typed 3.\")\n    }\n    case (4) {\n      msg (\"You typed 4.\")\n    }\n    default {\n      msg (\"No. You typed a message!\")\n    }\n  }\n}\n</code></pre>\n<p>Switch statements always need input. If they don't have input, they will fail. At least, that's how it works with Quest.</p>\n\n",
      "PostDate": "2021-07-17T01:56:42.3244032Z",
      "LastEditDate": "2021-07-17T02:19:28.8860217Z",
      "link": null
    },
    {
      "PostId": "887a514e-8f58-4279-9c22-75415d924613",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As an ```if``` statement:\r\n\r\n```\r\nmsg (\"Please type 1, 2, 3, or 4.\")\r\nget input {\r\n  result = Trim(result)\r\n  if (result = \"1\") {\r\n    msg (\"You typed 1.\")\r\n  }\r\n  else if (result = \"2\") {\r\n    msg (\"You typed 2.\")\r\n  }\r\n  else if (result = \"3\") {\r\n    msg (\"You typed 3.\")\r\n  }\r\n  else if (result = \"4\") {\r\n    msg (\"You typed 4.\")\r\n  }\r\n  else{\r\n    msg (\"No. You typed something other than 1, 2, 3, or 4.\")\r\n  }\r\n}\r\n```\r\n\r\n---\r\n:o)",
      "EditableFormat": "markdown",
      "HTML": "<p>As an <code>if</code> statement:</p>\n<pre><code>msg (\"Please type 1, 2, 3, or 4.\")\nget input {\n  result = Trim(result)\n  if (result = \"1\") {\n    msg (\"You typed 1.\")\n  }\n  else if (result = \"2\") {\n    msg (\"You typed 2.\")\n  }\n  else if (result = \"3\") {\n    msg (\"You typed 3.\")\n  }\n  else if (result = \"4\") {\n    msg (\"You typed 4.\")\n  }\n  else{\n    msg (\"No. You typed something other than 1, 2, 3, or 4.\")\n  }\n}\n</code></pre>\n<hr>\n<p>:o)</p>\n\n",
      "PostDate": "2021-07-17T13:59:28.6721969Z",
      "LastEditDate": "2021-07-17T14:16:16.3013715Z",
      "link": null
    },
    {
      "PostId": "13403347-ca75-4a9f-82db-9a9458d80e3d",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Switch statements always need input. If they don't have input, they will fail.\r\n\r\nCorrect.\r\n\r\nA ```switch``` statement requires a parameter. The purpose of a ```switch``` statement is to check if its parameter matches a ```case```.\r\n\r\n```\r\nswitch (\"a\") {\r\n  case (\"a\") {\r\n    msg (\"MATCH!\")\r\n  }\r\n  default {\r\n    msg (\"NO MATCH!\")\r\n  }\r\n}\r\n```\r\n\r\n---\r\nIf you were to try to run that without a parameter, it would throw an error:\r\n\r\n```\r\nswitch () {\r\n  case (\"a\") {\r\n    msg (\"MATCH!\")\r\n  }\r\n  default {\r\n    msg (\"NO MATCH!\")\r\n  }\r\n}\r\n```\r\n\r\n```Error running script: Error compiling expression '': SyntaxError: Unexpected end of fileLine: 1, Column: 1```\r\n\r\n---\r\nAlso, just for completion's sake, you don't need to include a ```default```.\r\n\r\nIt is wise to include a ```default``` when dealing with player input, though -- to make sure something prints in response to the player's input.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Switch statements always need input. If they don't have input, they will fail.</p>\n</blockquote>\n<p>Correct.</p>\n<p>A <code>switch</code> statement requires a parameter. The purpose of a <code>switch</code> statement is to check if its parameter matches a <code>case</code>.</p>\n<pre><code>switch (\"a\") {\n  case (\"a\") {\n    msg (\"MATCH!\")\n  }\n  default {\n    msg (\"NO MATCH!\")\n  }\n}\n</code></pre>\n<hr>\n<p>If you were to try to run that without a parameter, it would throw an error:</p>\n<pre><code>switch () {\n  case (\"a\") {\n    msg (\"MATCH!\")\n  }\n  default {\n    msg (\"NO MATCH!\")\n  }\n}\n</code></pre>\n<p><code>Error running script: Error compiling expression '': SyntaxError: Unexpected end of fileLine: 1, Column: 1</code></p>\n<hr>\n<p>Also, just for completion's sake, you don't need to include a <code>default</code>.</p>\n<p>It is wise to include a <code>default</code> when dealing with player input, though -- to make sure something prints in response to the player's input.</p>\n\n",
      "PostDate": "2021-07-17T14:11:30.5775175Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2b4eb68d-c7fa-4048-b9b3-2ea15c463c79",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nI just learned something about Quest from jmne's code.\r\n\r\nIn that code,```result``` is a string. It is the player's input.\r\n\r\nShe is using integers rather than strings in each ```case``` parameter, but Quest actually matches my input of ```\"2\"``` to the integer ```2```.\r\n\r\nI didn't even know Quest would do that. If you try to compare a string to an integer in any other bit of code in Quest, it will throw an error and mess everything up.\r\n\r\n---\r\nThis seems cool in her example, but we will develop bad habits if we don't learn to code things properly. In practice, we should always make sure our ```case``` parameter is the same type as our ```switch``` parameter.\r\n\r\nEven if it works in Quest (which it does), it does not work in Javascript:\r\n\r\n```\r\nlet result = '2';\r\nswitch(result){\r\n  case 2:\r\n    console.log(\"The integer 2\")\r\n    break;\r\n  case \"2\":\r\n    console.log(\"The string '2'\")\r\n    break;\r\n  default:\r\n    console.log(\"DEFAULT\")\r\n}\r\n```\r\n\r\nOUTPUT:\r\n```The string '2'```\r\n\r\n---\r\nTo be sure we learn good coding habits, we should write jmne's code like this:\r\n\r\n```\r\nmsg (\"Please type 1, 2, 3, or 4.\")\r\nget input {\r\n  // Removing any leading or trailing whitespace from 'result' with Trim()\r\n  result = Trim (result)\r\n  switch (result) {\r\n    case (\"1\") {\r\n      msg (\"You typed 1.\")\r\n    }\r\n    case (\"2\") {\r\n      msg (\"You typed 2.\")\r\n    }\r\n    case (\"3\") {\r\n      msg (\"You typed 3.\")\r\n    }\r\n    case (\"4\") {\r\n      msg (\"You typed 4.\")\r\n    }\r\n    default {\r\n      // Provide a vague, yet specific response.\r\n      // (It might not be a message. The player might enter 5, or even something like \"one\".)\r\n      msg (\"No. You typed something other than 1, 2, 3, or 4.\")\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---\r\nIt's good code in Quest jmne!\r\n\r\nSo, I'm not saying you were wrong. I'm just saying it's better to learn good coding habits that will apply everywhere, which is something mrangel has gone through great lengths to teach me.\r\n\r\n**EDIT**\r\n\r\nI'm not even saying anyone should change this in any existing Quest code. I'm just saying we should all learn good coding habits henceforth. :o)\r\n\r\n---\r\nI don't know if someone tweaked ```switch``` in Quest, or if it works this way in C# by default. All I know is learning it this way will cause you problems in the future when you end up coding in Javascript, and you will probably end up coding in Javascript if you continue learning to code.",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>I just learned something about Quest from jmne's code.</p>\n<p>In that code,<code>result</code> is a string. It is the player's input.</p>\n<p>She is using integers rather than strings in each <code>case</code> parameter, but Quest actually matches my input of <code>\"2\"</code> to the integer <code>2</code>.</p>\n<p>I didn't even know Quest would do that. If you try to compare a string to an integer in any other bit of code in Quest, it will throw an error and mess everything up.</p>\n<hr>\n<p>This seems cool in her example, but we will develop bad habits if we don't learn to code things properly. In practice, we should always make sure our <code>case</code> parameter is the same type as our <code>switch</code> parameter.</p>\n<p>Even if it works in Quest (which it does), it does not work in Javascript:</p>\n<pre><code>let result = '2';\nswitch(result){\n  case 2:\n    console.log(\"The integer 2\")\n    break;\n  case \"2\":\n    console.log(\"The string '2'\")\n    break;\n  default:\n    console.log(\"DEFAULT\")\n}\n</code></pre>\n<p>OUTPUT:<br>\n<code>The string '2'</code></p>\n<hr>\n<p>To be sure we learn good coding habits, we should write jmne's code like this:</p>\n<pre><code>msg (\"Please type 1, 2, 3, or 4.\")\nget input {\n  // Removing any leading or trailing whitespace from 'result' with Trim()\n  result = Trim (result)\n  switch (result) {\n    case (\"1\") {\n      msg (\"You typed 1.\")\n    }\n    case (\"2\") {\n      msg (\"You typed 2.\")\n    }\n    case (\"3\") {\n      msg (\"You typed 3.\")\n    }\n    case (\"4\") {\n      msg (\"You typed 4.\")\n    }\n    default {\n      // Provide a vague, yet specific response.\n      // (It might not be a message. The player might enter 5, or even something like \"one\".)\n      msg (\"No. You typed something other than 1, 2, 3, or 4.\")\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>It's good code in Quest jmne!</p>\n<p>So, I'm not saying you were wrong. I'm just saying it's better to learn good coding habits that will apply everywhere, which is something mrangel has gone through great lengths to teach me.</p>\n<p><strong>EDIT</strong></p>\n<p>I'm not even saying anyone should change this in any existing Quest code. I'm just saying we should all learn good coding habits henceforth. :o)</p>\n<hr>\n<p>I don't know if someone tweaked <code>switch</code> in Quest, or if it works this way in C# by default. All I know is learning it this way will cause you problems in the future when you end up coding in Javascript, and you will probably end up coding in Javascript if you continue learning to code.</p>\n\n",
      "PostDate": "2021-07-17T14:48:16.8183683Z",
      "LastEditDate": "2021-07-17T16:13:38.3049997Z",
      "link": null
    },
    {
      "PostId": "1fbf5c39-fc44-4935-b8c2-c5b4db9c850c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I didn't even know Quest would do that. If you try to compare a string to an integer in any other bit of code in Quest, it will throw an error and mess everything up.\r\n\r\nI ran into this before.\r\n\r\nThe reason is that the switch statement is backed by a hashmap - essentially a scriptdictionary, but an order of magnitude more efficient. If the values in the `case` statements are constants or constant expressions, they are evaluated once when the code is first compiled. Afterwards, the parameter to `switch` is essentially used as a dictionary key to look up the right piece of code to run.\r\n\r\nOn the plus side, this means you don't have to worry about type checking, as (like dictionary keys) the values passed to switch and case are converted to strings before comparing. (Note that this isn't quite the same as Quest's usual type conversion. For example, switch/case will convert an *object* to a string containing its name.\r\n\r\nThe cons of this approach:\r\n1. Giving `switch` or `case` a list or dictionary parameter will not do what you expect. (I can't remember what it actually does, but I vaguely recall going over the code and thinking \"wow, that's dumb\")\r\n2. `case (null)` can cause odd crashes, sometimes when it isn't even being run (because IASL does fancy stuff in the background, trying to generate the lookup table before it's needed so it can be more efficient)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I didn't even know Quest would do that. If you try to compare a string to an integer in any other bit of code in Quest, it will throw an error and mess everything up.</p>\n</blockquote>\n<p>I ran into this before.</p>\n<p>The reason is that the switch statement is backed by a hashmap - essentially a scriptdictionary, but an order of magnitude more efficient. If the values in the <code>case</code> statements are constants or constant expressions, they are evaluated once when the code is first compiled. Afterwards, the parameter to <code>switch</code> is essentially used as a dictionary key to look up the right piece of code to run.</p>\n<p>On the plus side, this means you don't have to worry about type checking, as (like dictionary keys) the values passed to switch and case are converted to strings before comparing. (Note that this isn't quite the same as Quest's usual type conversion. For example, switch/case will convert an <em>object</em> to a string containing its name.</p>\n<p>The cons of this approach:</p>\n<ol>\n<li>Giving <code>switch</code> or <code>case</code> a list or dictionary parameter will not do what you expect. (I can't remember what it actually does, but I vaguely recall going over the code and thinking \"wow, that's dumb\")</li>\n<li><code>case (null)</code> can cause odd crashes, sometimes when it isn't even being run (because IASL does fancy stuff in the background, trying to generate the lookup table before it's needed so it can be more efficient)</li>\n</ol>\n\n",
      "PostDate": "2021-07-17T22:28:24.7740352Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cf8c3e8a-0e14-40f5-abec-b9adef7d016d",
      "UserId": 374963,
      "Username": "Sara377544",
      "AvatarUrl": "https://i.imgur.com/YCtLz3Nb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Using K.v's first code worked (and will help me in some scenarios because I've made a lot of timers that will print different messages in different rooms, and it will get easier to edit in the future if they're all neat in switch rather than gigantic lines of ifs.\r\n\r\nI am confused a bit since you said it always needs input but in this scenario does it need an input? Or is the player location already an input? Is it bad coding to use the room switch idea? Just a bit confused sorry, english is not my first language.",
      "EditableFormat": "markdown",
      "HTML": "<p>Using K.v's first code worked (and will help me in some scenarios because I've made a lot of timers that will print different messages in different rooms, and it will get easier to edit in the future if they're all neat in switch rather than gigantic lines of ifs.</p>\n<p>I am confused a bit since you said it always needs input but in this scenario does it need an input? Or is the player location already an input? Is it bad coding to use the room switch idea? Just a bit confused sorry, english is not my first language.</p>\n\n",
      "PostDate": "2021-07-18T03:22:20.4495819Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c09116e5-70e5-440a-b6e0-59af9dbc11d9",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/HiZKEtPb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Get Input is not needed to use Switch.\r\nBUT, you do need to check something.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Get Input is not needed to use Switch.<br>\nBUT, you do need to check something.</p>\n\n",
      "PostDate": "2021-07-18T15:27:24.2513966Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
