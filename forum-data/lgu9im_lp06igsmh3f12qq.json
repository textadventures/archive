{
  "Topic": {
    "TopicId": "lgu9im_lp06igsmh3f12qq",
    "ForumId": "24",
    "Title": "Is there a way to remove the underline/blue color in a passge/section?",
    "LastUpdated": "2021-04-22T16:00:08.9779955Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "900a2fb7-a823-4049-bb7c-5e21eec40b2e",
      "UserId": 518999,
      "Username": "Mr.Dot",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f4786663e44a09a9cd2d148a7e6cf553?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to remove the underline/blue color in a passge/section?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to remove the underline/blue color in a passge/section?</p>\n\n",
      "PostDate": "2021-04-22T16:00:08.9779955Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b785def1-4d99-4c79-87e3-d8d6b985224e",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could play with the code that follows...\r\n```\r\n    ///set basic colors\r\n    set(\"newColorFlg\"); //new color flag = black background\r\n    jQuery('<style>', {id: 'customstyle'}).appendTo('head').text(\"body {background-color: black; color: Red;}\");\r\n\r\n    jQuery('#customstyle').append(\"a.squiffy-link {color: LightCoral;}\");\r\n    jQuery('#customstyle').append(\"a.squiffy-link.disabled {color: brown !important;}\");\r\n    jQuery('#customstyle').append(\"a.squiffy-header-link {color: white; text-decoration: underline !important;}\");  \r\n```\r\nThis is what I used to change colors and effects. You could possibly change the links this way so they are the same as everything else. Would that work? i.e. Change the squiffy.link value to whatever your text color is.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could play with the code that follows...</p>\n<pre><code>    ///set basic colors\n    set(\"newColorFlg\"); //new color flag = black background\n    jQuery('&lt;style&gt;', {id: 'customstyle'}).appendTo('head').text(\"body {background-color: black; color: Red;}\");\n\n    jQuery('#customstyle').append(\"a.squiffy-link {color: LightCoral;}\");\n    jQuery('#customstyle').append(\"a.squiffy-link.disabled {color: brown !important;}\");\n    jQuery('#customstyle').append(\"a.squiffy-header-link {color: white; text-decoration: underline !important;}\");  \n</code></pre>\n<p>This is what I used to change colors and effects. You could possibly change the links this way so they are the same as everything else. Would that work? i.e. Change the squiffy.link value to whatever your text color is.</p>\n\n",
      "PostDate": "2021-04-22T17:57:17.3495046Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4f1a5135-029c-4311-b474-ed6615934d37",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good code ☺ For the specific purpose of hiding style for a link, the CSS you want might be something like:\r\n```\r\na:link { all: inherit !important; }\r\n```\r\n\r\n\"`all`\" lets you set all of an element's style at once, and \"`inherit`\" makes it the same as the text around it. `!important`, as Bluevoss showed, means that this rule overrides any rules that aren't important.\r\n\r\nIt can be useful to know about these shortcuts. For example, if your game has a light mode and a dark mode, you could use `color: inherit` to set links to the same colour as the surrounding text without needing to worry about what that colour is. And `text-decoration: inherit` will take away a link's underline unless it's in a paragraph or sentence that's already underlined.\r\n\r\n`all` may be useful, or maybe not. It affects all style attributes. This includes the mouse pointer,  as well as any pronunciation changes for links in screen-readers. This is the best way if you want to hide a link; but not so much if you want the player to have some clue that there is a link there.\r\n\r\nIf you want to apply this change only to a single passage or section, you could add something to the passage's javascript:\r\n```\r\n    var normalWrite = squiffy.ui.write;\r\n    var currentSection = $('#' + squiffy.get('_output-section'));\r\n    squiffy.ui.write = function (text) {\r\n        squiffy.ui.write = normalWrite;\r\n        let existing = currentSection.children();\r\n        normalWrite(text);\r\n        currentSection.children().not(existing).find('a:link').css({color: 'inherit !important', textDecoration: 'inherit !important'});\r\n    };\r\n```\r\nIf I got that right off the top of my head, it will remove the color and underline rules from all links within the next section or paragraph that it output after running the script.",
      "EditableFormat": "markdown",
      "HTML": "<p>Good code ☺ For the specific purpose of hiding style for a link, the CSS you want might be something like:</p>\n<pre><code>a:link { all: inherit !important; }\n</code></pre>\n<p>\"<code>all</code>\" lets you set all of an element's style at once, and \"<code>inherit</code>\" makes it the same as the text around it. <code>!important</code>, as Bluevoss showed, means that this rule overrides any rules that aren't important.</p>\n<p>It can be useful to know about these shortcuts. For example, if your game has a light mode and a dark mode, you could use <code>color: inherit</code> to set links to the same colour as the surrounding text without needing to worry about what that colour is. And <code>text-decoration: inherit</code> will take away a link's underline unless it's in a paragraph or sentence that's already underlined.</p>\n<p><code>all</code> may be useful, or maybe not. It affects all style attributes. This includes the mouse pointer,  as well as any pronunciation changes for links in screen-readers. This is the best way if you want to hide a link; but not so much if you want the player to have some clue that there is a link there.</p>\n<p>If you want to apply this change only to a single passage or section, you could add something to the passage's javascript:</p>\n<pre><code>    var normalWrite = squiffy.ui.write;\n    var currentSection = $('#' + squiffy.get('_output-section'));\n    squiffy.ui.write = function (text) {\n        squiffy.ui.write = normalWrite;\n        let existing = currentSection.children();\n        normalWrite(text);\n        currentSection.children().not(existing).find('a:link').css({color: 'inherit !important', textDecoration: 'inherit !important'});\n    };\n</code></pre>\n<p>If I got that right off the top of my head, it will remove the color and underline rules from all links within the next section or paragraph that it output after running the script.</p>\n\n",
      "PostDate": "2021-04-22T18:46:24.7577927Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "669932f8-1123-441f-b926-c94894b73e21",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can do it with nothing but html and Squiffy. No Javascript required:\r\n\r\n```@set B=<span style=\"text-decoration:underline; text-decoration-color:white; color:black;\">```\r\n\r\n```[{B}Black Link](Black Link)```\r\n\r\nThen you can set B to other decorations and colors with later ```{if``` statements.\r\n\r\nAlternatively, you can set other  span styles variables right at the beginning and use them as you want.",
      "EditableFormat": "markdown",
      "HTML": "<p>You can do it with nothing but html and Squiffy. No Javascript required:</p>\n<p><code>@set B=&lt;span style=\"text-decoration:underline; text-decoration-color:white; color:black;\"&gt;</code></p>\n<p><code>[{B}Black Link](Black Link)</code></p>\n<p>Then you can set B to other decorations and colors with later <code>{if</code> statements.</p>\n<p>Alternatively, you can set other  span styles variables right at the beginning and use them as you want.</p>\n\n",
      "PostDate": "2021-04-22T23:14:32.9305521Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
