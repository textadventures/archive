{
  "Topic": {
    "TopicId": "r6wihts1jey8zybn5tding",
    "ForumId": "10",
    "Title": "Being weird with scope",
    "LastUpdated": "2022-03-21T21:37:06.7421226Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a0b171e2-6f24-42c4-894d-ec8c103f325b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've had this running through my head for a while; mostly just testing it out to see how it works. This could be an alternate implementation for some of the scope functions.\r\n\r\nBasically, I've got a function `RecursiveScope` which uses a set of objects according to some expressions passed to it.\r\n\r\nIts parameters are:\r\n* root - the object to start from\r\n* include - a string expression which evaluates to true for objects which should be returned\r\n     * if this is `true`, all visible objects will be returned; if it's an objectlist, objects in the objectlist will be returned\r\n* recurse - a string expression which returns true for objects whose children should be considered\r\n* all - `true` if the root object should be included in the returned list\r\n* exclude - an expression or objectlist of objects which should not be returned\r\n\r\nNot sure if this is interesting to anyone else; or if it's more efficient than the way Quest core currently does it (I suspect it could be in some circumstances), but I think it would be interesting because it means you can quickly and easily write a function to find objects that match any arbitrary criteria.\r\n\r\nHere's the script, as well as some examples of how it could be used to implement some of the other scope functions.\r\n```\r\n  <function name=\"ScopeInventory\" type=\"objectlist\">\r\n    return (ScopeVisibleInventory())\r\n  </function>\r\n\r\n  <function name=\"ScopeVisibleInventory\" type=\"objectlist\">\r\n    return (RecursiveScope (game.pov, true, \"GetBoolean (this, \\\"visible\\\") and (GetBoolean (this, \\\"isopen\\\") or GetBoolean (this, \\\"transparent\\\"))\"))\r\n  </function>\r\n\r\n  <function name=\"ScopeReachableInventory\" type=\"objectlist\">\r\n    return (RecursiveScope (game.pov, true, \"GetBoolean (this, \\\"visible\\\") and GetBoolean (this, \\\"isopen\\\")\"))\r\n  </function>\r\n\r\n  <function name=\"ChildrenOfType\" parameters=\"parent, type, direct_children_only\" type=\"objectlist\">\r\n    return (RecursiveScope (parent, \"DoesInherit (this, \\\"\" + type + \"\\\")\", not direct_children_only)\r\n  </function>\r\n\r\n  <function name=\"RecursiveScope\" parameters=\"root, include, recurse, all, exclude\" type=\"objectlist\">\r\n    if (not IsDefined (\"include\")) {\r\n      include = true\r\n    }\r\n    if (not IsDefined (\"exclude\")) {\r\n      exclude = null\r\n    }\r\n    if (not IsDefined (\"recurse\")) {\r\n      recurse = null\r\n    }\r\n    if (not IsDefined (\"all\")) {\r\n      include = false\r\n    }\r\n    result = NewObjectList()\r\n    if (EndsWith (TypeOf (root), \"list\")) {\r\n      todo = ListCompact (root)\r\n    }\r\n    else {\r\n      todo = NewObjectList()\r\n      if (TypeOf (root) = \"object\" and not Equals (root, null)) {\r\n        list add (todo, root)\r\n      }\r\n    }\r\n    skiproot = 0\r\n    if (not Equals (all, true)) {\r\n      skiproot = ListCount (todo)\r\n    }\r\n\r\n    params = QuickParams (\"root\", root, \"remainder\", todo, \"results\", result, \"isroot\", true)\r\n    while (ListCount (todo) > 0) {\r\n      obj = ObjectListItem (todo, 0)\r\n      list remove (todo, obj)\r\n      dictionary add (params, \"this\", obj)\r\n      if (skiproot = 0 and IsDefined (\"exclude\")) {\r\n        if (TypeOf (exclude) = \"list\") {\r\n          if (ListContains (exclude, obj)) {\r\n            skiproot = 1\r\n          }\r\n        }\r\n        else if (TypeOf (exclude) = \"string\") {\r\n          if (eval (exclude, params)) {\r\n            skiproot = 1\r\n          }\r\n        }\r\n      }\r\n      if (skiproot > 0) {\r\n        skiproot = skiproot - 1\r\n        if (skiproot = 0) {\r\n          list remove (params, \"isroot\")\r\n          list add (params, \"isroot\", false)\r\n        }\r\n      }\r\n      else {\r\n        if (TypeOf (include) = \"list\") {\r\n          if (ListContains (include, obj)) {\r\n            list add (result, obj)\r\n          }\r\n        }\r\n        else if (TypeOf (include) = \"boolean\") {\r\n          if (include and GetBoolean (obj, \"visible\")) {\r\n            list add (result, obj)\r\n          }\r\n        }\r\n        else if (TypeOf (include) = \"string\") {\r\n          if (eval (include, params)) {\r\n            list add (result, obj)\r\n          }\r\n        }\r\n        else if (TypeOf (include) = \"script\") {\r\n          invoke (include, params)\r\n        }\r\n      }\r\n      if (IsDefined (\"recurse\")) {\r\n        if (TypeOf (recurse) = \"list\") {\r\n          if (ListContains (recurse, obj)) {\r\n            foreach (child, GetDirectChildren (obj)) {\r\n              list add (todo, child)\r\n            }\r\n          }\r\n        }\r\n        else if (TypeOf (recurse) = \"boolean\") {\r\n          if (recurse and GetBoolean (obj, \"visible\")) {\r\n            foreach (child, GetDirectChildren (obj)) {\r\n              list add (todo, child)\r\n            }\r\n          }\r\n        }\r\n        else if (TypeOf (recurse) = \"string\") {\r\n          if (eval (recurse, params)) {\r\n            foreach (child, GetDirectChildren (obj)) {\r\n              list add (todo, child)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      dictionary remove (params, \"this\")\r\n    }\r\n    return (result)\r\n  </function>\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I've had this running through my head for a while; mostly just testing it out to see how it works. This could be an alternate implementation for some of the scope functions.</p>\n<p>Basically, I've got a function <code>RecursiveScope</code> which uses a set of objects according to some expressions passed to it.</p>\n<p>Its parameters are:</p>\n<ul>\n<li>root - the object to start from</li>\n<li>include - a string expression which evaluates to true for objects which should be returned\n<ul>\n<li>if this is <code>true</code>, all visible objects will be returned; if it's an objectlist, objects in the objectlist will be returned</li>\n</ul>\n</li>\n<li>recurse - a string expression which returns true for objects whose children should be considered</li>\n<li>all - <code>true</code> if the root object should be included in the returned list</li>\n<li>exclude - an expression or objectlist of objects which should not be returned</li>\n</ul>\n<p>Not sure if this is interesting to anyone else; or if it's more efficient than the way Quest core currently does it (I suspect it could be in some circumstances), but I think it would be interesting because it means you can quickly and easily write a function to find objects that match any arbitrary criteria.</p>\n<p>Here's the script, as well as some examples of how it could be used to implement some of the other scope functions.</p>\n<pre><code>  &lt;function name=\"ScopeInventory\" type=\"objectlist\"&gt;\n    return (ScopeVisibleInventory())\n  &lt;/function&gt;\n\n  &lt;function name=\"ScopeVisibleInventory\" type=\"objectlist\"&gt;\n    return (RecursiveScope (game.pov, true, \"GetBoolean (this, \\\"visible\\\") and (GetBoolean (this, \\\"isopen\\\") or GetBoolean (this, \\\"transparent\\\"))\"))\n  &lt;/function&gt;\n\n  &lt;function name=\"ScopeReachableInventory\" type=\"objectlist\"&gt;\n    return (RecursiveScope (game.pov, true, \"GetBoolean (this, \\\"visible\\\") and GetBoolean (this, \\\"isopen\\\")\"))\n  &lt;/function&gt;\n\n  &lt;function name=\"ChildrenOfType\" parameters=\"parent, type, direct_children_only\" type=\"objectlist\"&gt;\n    return (RecursiveScope (parent, \"DoesInherit (this, \\\"\" + type + \"\\\")\", not direct_children_only)\n  &lt;/function&gt;\n\n  &lt;function name=\"RecursiveScope\" parameters=\"root, include, recurse, all, exclude\" type=\"objectlist\"&gt;\n    if (not IsDefined (\"include\")) {\n      include = true\n    }\n    if (not IsDefined (\"exclude\")) {\n      exclude = null\n    }\n    if (not IsDefined (\"recurse\")) {\n      recurse = null\n    }\n    if (not IsDefined (\"all\")) {\n      include = false\n    }\n    result = NewObjectList()\n    if (EndsWith (TypeOf (root), \"list\")) {\n      todo = ListCompact (root)\n    }\n    else {\n      todo = NewObjectList()\n      if (TypeOf (root) = \"object\" and not Equals (root, null)) {\n        list add (todo, root)\n      }\n    }\n    skiproot = 0\n    if (not Equals (all, true)) {\n      skiproot = ListCount (todo)\n    }\n\n    params = QuickParams (\"root\", root, \"remainder\", todo, \"results\", result, \"isroot\", true)\n    while (ListCount (todo) &gt; 0) {\n      obj = ObjectListItem (todo, 0)\n      list remove (todo, obj)\n      dictionary add (params, \"this\", obj)\n      if (skiproot = 0 and IsDefined (\"exclude\")) {\n        if (TypeOf (exclude) = \"list\") {\n          if (ListContains (exclude, obj)) {\n            skiproot = 1\n          }\n        }\n        else if (TypeOf (exclude) = \"string\") {\n          if (eval (exclude, params)) {\n            skiproot = 1\n          }\n        }\n      }\n      if (skiproot &gt; 0) {\n        skiproot = skiproot - 1\n        if (skiproot = 0) {\n          list remove (params, \"isroot\")\n          list add (params, \"isroot\", false)\n        }\n      }\n      else {\n        if (TypeOf (include) = \"list\") {\n          if (ListContains (include, obj)) {\n            list add (result, obj)\n          }\n        }\n        else if (TypeOf (include) = \"boolean\") {\n          if (include and GetBoolean (obj, \"visible\")) {\n            list add (result, obj)\n          }\n        }\n        else if (TypeOf (include) = \"string\") {\n          if (eval (include, params)) {\n            list add (result, obj)\n          }\n        }\n        else if (TypeOf (include) = \"script\") {\n          invoke (include, params)\n        }\n      }\n      if (IsDefined (\"recurse\")) {\n        if (TypeOf (recurse) = \"list\") {\n          if (ListContains (recurse, obj)) {\n            foreach (child, GetDirectChildren (obj)) {\n              list add (todo, child)\n            }\n          }\n        }\n        else if (TypeOf (recurse) = \"boolean\") {\n          if (recurse and GetBoolean (obj, \"visible\")) {\n            foreach (child, GetDirectChildren (obj)) {\n              list add (todo, child)\n            }\n          }\n        }\n        else if (TypeOf (recurse) = \"string\") {\n          if (eval (recurse, params)) {\n            foreach (child, GetDirectChildren (obj)) {\n              list add (todo, child)\n            }\n          }\n        }\n      }\n      dictionary remove (params, \"this\")\n    }\n    return (result)\n  &lt;/function&gt;\n\n</code></pre>\n\n",
      "PostDate": "2022-03-21T21:37:06.7421226Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
