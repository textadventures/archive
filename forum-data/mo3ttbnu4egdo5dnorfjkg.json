{
  "Topic": {
    "TopicId": "mo3ttbnu4egdo5dnorfjkg",
    "ForumId": "10",
    "Title": "Cloning an object with it's original attributes/adding attributes to a random clone?",
    "LastUpdated": "2020-01-14T21:56:40.558607Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d3b1ee03-128f-4bda-8746-c69e3b36245c",
      "UserId": 456951,
      "Username": "Mochaaa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, complete Quest + coding noob here. For my game I wanted to set up a shop, but I wanted it to restock after a certain amount of time/on trigger. For now I've set the trigger for when the player leaves the shop, and I've made it clone a random object from a room and put it into the stock room. However, the value of the object doesn't follow the clone, and I don't know how to add value to a new object if the name of the new object is random. Sorry if this is worded weirdly, but can anyone help?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, complete Quest + coding noob here. For my game I wanted to set up a shop, but I wanted it to restock after a certain amount of time/on trigger. For now I've set the trigger for when the player leaves the shop, and I've made it clone a random object from a room and put it into the stock room. However, the value of the object doesn't follow the clone, and I don't know how to add value to a new object if the name of the new object is random. Sorry if this is worded weirdly, but can anyone help?</p>\n\n",
      "PostDate": "2020-01-14T21:56:40.558607Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0603bd5d-59a2-4136-aeb9-5aeea71dac02",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try something like this. And pardon my psuecode:\r\n```\r\nswitch case(ClonedObject.alias){\r\ncase(\"Cheap Thing\"){\r\nClonedObject.value=5\r\n}\r\ncase(\"Medium Thing\"){\r\nClonedObject.value=15\r\n}\r\ncase(\"Expensive Thing\"){\r\nClonedObject.value=9999\r\n}\r\n}\r\n```\r\nHope this helps!",
      "EditableFormat": "markdown",
      "HTML": "<p>Try something like this. And pardon my psuecode:</p>\n<pre><code>switch case(ClonedObject.alias){\ncase(\"Cheap Thing\"){\nClonedObject.value=5\n}\ncase(\"Medium Thing\"){\nClonedObject.value=15\n}\ncase(\"Expensive Thing\"){\nClonedObject.value=9999\n}\n}\n</code></pre>\n<p>Hope this helps!</p>\n\n",
      "PostDate": "2020-01-14T22:40:01.1636794Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "385805c1-8ff2-41cb-b284-1ba3e7d0af76",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> the value of the object doesn't follow the clone\r\n\r\nWhy not? If the value is an attribute of the object, the clone will have the same value.\r\nIs the value stored somewhere other than on the object?\r\n\r\n> I don't know how to add value to a new object if the name of the new object is random\r\n\r\nIf you're creating the object using the CloneObject functions, they return a reference to the new clone.\r\n\r\nSo to set an attribute on the new clone, you can do:\r\n```\r\nnewClone = CloneObjectAndMove (Some Original Object, Stock Room)\r\nnewClone.value = 65\r\n```\r\nor if your shop has a dictionary holding a list of stock and their values (which is a weird thing to do, but it would explain why cloning the objects doesn't retain their value), it would be something like:\r\n```\r\nnewClone = CloneObjectAndMove (Some Original Object, Stock Room)\r\ndictionary add (Shop.pricelist, newObject.name, 35)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>the value of the object doesn't follow the clone</p>\n</blockquote>\n<p>Why not? If the value is an attribute of the object, the clone will have the same value.<br>\nIs the value stored somewhere other than on the object?</p>\n<blockquote>\n<p>I don't know how to add value to a new object if the name of the new object is random</p>\n</blockquote>\n<p>If you're creating the object using the CloneObject functions, they return a reference to the new clone.</p>\n<p>So to set an attribute on the new clone, you can do:</p>\n<pre><code>newClone = CloneObjectAndMove (Some Original Object, Stock Room)\nnewClone.value = 65\n</code></pre>\n<p>or if your shop has a dictionary holding a list of stock and their values (which is a weird thing to do, but it would explain why cloning the objects doesn't retain their value), it would be something like:</p>\n<pre><code>newClone = CloneObjectAndMove (Some Original Object, Stock Room)\ndictionary add (Shop.pricelist, newObject.name, 35)\n</code></pre>\n\n",
      "PostDate": "2020-01-15T02:40:58.6882746Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5a104d70-47d6-4ff8-89d8-fe901d040f9a",
      "UserId": 456951,
      "Username": "Mochaaa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sadly it returned with a \r\n\r\n```Error running script: Error compiling expression 'ClonedObject.alias': Unknown object or variable 'ClonedObject'```\r\n\r\nDo you know how to fix it?",
      "EditableFormat": "markdown",
      "HTML": "<p>Sadly it returned with a</p>\n<p><code>Error running script: Error compiling expression 'ClonedObject.alias': Unknown object or variable 'ClonedObject'</code></p>\n<p>Do you know how to fix it?</p>\n\n",
      "PostDate": "2020-01-15T03:03:15.46746Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "824f26df-29a3-454c-adbe-07a96879f5df",
      "UserId": 456951,
      "Username": "Mochaaa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"Why not? If the value is an attribute of the object, the clone will have the same value.\r\nIs the value stored somewhere other than on the object?\"\r\n\r\nWhen I increase the price of the object in the inventory menu, object.price changes. \r\n\r\nWhen I look in the debugger, object.price does follow through, but for some reason the value doesn't show up in game and I can't buy it.\r\n\r\nI'm using\r\n\r\n```CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)```\r\n\r\nTo make the clone and move it to the stock room.",
      "EditableFormat": "markdown",
      "HTML": "<p>\"Why not? If the value is an attribute of the object, the clone will have the same value.<br>\nIs the value stored somewhere other than on the object?\"</p>\n<p>When I increase the price of the object in the inventory menu, object.price changes.</p>\n<p>When I look in the debugger, object.price does follow through, but for some reason the value doesn't show up in game and I can't buy it.</p>\n<p>I'm using</p>\n<p><code>CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)</code></p>\n<p>To make the clone and move it to the stock room.</p>\n\n",
      "PostDate": "2020-01-15T03:18:53.8336593Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9daa1fe2-b8f8-41e0-8976-febe0099576f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> <code>Error running script: Error compiling expression 'ClonedObject.alias': Unknown object or variable 'ClonedObject'</code>\r\n\r\nThat piece of code assumes that you have a variable named ClonedObject to access the clone, and sets its price based on its alias. This is a really strange thing to do and I wouldn't recommend it.\r\n\r\nIf you have a clone object for which you want to find out the original's name, it's more usual to use `object.prototype`.\r\n\r\n> When I look in the debugger, object.price does follow through, but for some reason the value doesn't show up in game and I can't buy it.\r\n\r\nThe clones will all have the same attributes as the original at the time they were created.\r\n\r\nWhen you increase `object.price`, are you increasing the price of the original, or a clone that's already been created?\r\nOr do you want to increase the price of both clones and the original?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><code>Error running script: Error compiling expression 'ClonedObject.alias': Unknown object or variable 'ClonedObject'</code></p>\n</blockquote>\n<p>That piece of code assumes that you have a variable named ClonedObject to access the clone, and sets its price based on its alias. This is a really strange thing to do and I wouldn't recommend it.</p>\n<p>If you have a clone object for which you want to find out the original's name, it's more usual to use <code>object.prototype</code>.</p>\n<blockquote>\n<p>When I look in the debugger, object.price does follow through, but for some reason the value doesn't show up in game and I can't buy it.</p>\n</blockquote>\n<p>The clones will all have the same attributes as the original at the time they were created.</p>\n<p>When you increase <code>object.price</code>, are you increasing the price of the original, or a clone that's already been created?<br>\nOr do you want to increase the price of both clones and the original?</p>\n\n",
      "PostDate": "2020-01-15T09:08:13.6197384Z",
      "LastEditDate": "2020-01-15T09:11:50.7777654Z",
      "link": null
    },
    {
      "PostId": "2438109b-68bc-4b21-8730-7676144d00e3",
      "UserId": 456951,
      "Username": "Mochaaa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I'm going to start from the beginning here and try to find where the issue is. \r\n\r\nI have three objects in a room that I want to be randomly cloned. These three objects have the name VibrantBlueRaincoat, CanaryYellowRaincoat, and ScuffedRedSneakers. The aliases are the same, but with spaces in between. Each of these originals have their .price set to 5, which was decided by me adjusting the value in the inventory tab. The shop system I'm using is the standard one described in the quest documentation, with a stock room devoid of anything but the stuff that I'm immediately selling. \r\n\r\nI used ```CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)``` to clone one original object with the .price attribute of 5.  When I go ingame and trigger the script, the cloned object appears in the correct place, but no price is shown in the UI and the item cannot be bought.\r\n\r\nSee here: https://imgur.com/LpO7t5B and https://imgur.com/NjzGQvQ for debugger looking at a cloned object.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I'm going to start from the beginning here and try to find where the issue is.</p>\n<p>I have three objects in a room that I want to be randomly cloned. These three objects have the name VibrantBlueRaincoat, CanaryYellowRaincoat, and ScuffedRedSneakers. The aliases are the same, but with spaces in between. Each of these originals have their .price set to 5, which was decided by me adjusting the value in the inventory tab. The shop system I'm using is the standard one described in the quest documentation, with a stock room devoid of anything but the stuff that I'm immediately selling.</p>\n<p>I used <code>CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)</code> to clone one original object with the .price attribute of 5.  When I go ingame and trigger the script, the cloned object appears in the correct place, but no price is shown in the UI and the item cannot be bought.</p>\n<p>See here: https://imgur.com/LpO7t5B and https://imgur.com/NjzGQvQ for debugger looking at a cloned object.</p>\n\n",
      "PostDate": "2020-01-16T00:57:48.8667991Z",
      "LastEditDate": "2020-01-16T00:59:33.2203007Z",
      "link": null
    },
    {
      "PostId": "e38482d5-b743-4d33-b8d6-9bdff4e2dab0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Did you run the `SetUpMerchandise` function on the cloned objects?\r\n\r\nI'm not sure if this should be necessary for clones or not; but it's the first thing that jumps out at me.\r\n\r\nIt's hard to spot a problem when I can't see your code, but that's the first thing I'd try to check.",
      "EditableFormat": "markdown",
      "HTML": "<p>Did you run the <code>SetUpMerchandise</code> function on the cloned objects?</p>\n<p>I'm not sure if this should be necessary for clones or not; but it's the first thing that jumps out at me.</p>\n<p>It's hard to spot a problem when I can't see your code, but that's the first thing I'd try to check.</p>\n\n",
      "PostDate": "2020-01-16T02:01:32.3773105Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8c816c33-2d4b-4d52-a6c8-8a29fae9199d",
      "UserId": 456951,
      "Username": "Mochaaa",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The only modification I made to the Shop functions was in ```BuyObject``` and I changed it so that it wouldn't immediately clone and replace with exactly the same copy. Also, how do I run ```SetUpMerchandise``` on an object that doesn't exist yet? ",
      "EditableFormat": "markdown",
      "HTML": "<p>The only modification I made to the Shop functions was in <code>BuyObject</code> and I changed it so that it wouldn't immediately clone and replace with exactly the same copy. Also, how do I run <code>SetUpMerchandise</code> on an object that doesn't exist yet?</p>\n\n",
      "PostDate": "2020-01-16T05:22:02.1835086Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb6936e9-7369-4e89-8039-ab0bd5a6fb68",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That makes sense, then.\r\n\r\nThe `SetUpShop` function calls `SetUpMerchandise` on all the objects in the stock room. This modifies the object's listalias so that it shows the price, and adds the \"buy\" verb.\r\n\r\nThe player buys the object, which removes the price from the alias, and removes the buy/steal scripts so that the player can drop and pick it up again. Because you've disabled cloning, it makes these changes to the original object.\r\n\r\nThen you clone the object. Cloning copies the object's current values, so as far is the shop is concerned the object has already been sold.\r\n\r\nIf you want to make the object sellable again, you need to run `SetUpMerchandise` on the clone.\r\n\r\nFor example, change `CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)`\r\nto <code style=\"color:darkgreen\">SetUpMerchandise (CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1))</code>",
      "EditableFormat": "markdown",
      "HTML": "<p>That makes sense, then.</p>\n<p>The <code>SetUpShop</code> function calls <code>SetUpMerchandise</code> on all the objects in the stock room. This modifies the object's listalias so that it shows the price, and adds the \"buy\" verb.</p>\n<p>The player buys the object, which removes the price from the alias, and removes the buy/steal scripts so that the player can drop and pick it up again. Because you've disabled cloning, it makes these changes to the original object.</p>\n<p>Then you clone the object. Cloning copies the object's current values, so as far is the shop is concerned the object has already been sold.</p>\n<p>If you want to make the object sellable again, you need to run <code>SetUpMerchandise</code> on the clone.</p>\n<p>For example, change <code>CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1)</code><br>\nto <code style=\"color: darkgreen\">SetUpMerchandise (CloneObjectAndMove (PickOneChild (CompleteStockList), Stock1))</code></p>\n\n",
      "PostDate": "2020-01-16T10:26:27.522974Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "61478168-193f-49d5-a663-7559f097e591",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel has already covered/helped with all of this, but just here's a hopefully simple explanation of cloning:\r\n\r\nlet's say we create an Object:\r\n\r\n```\r\n<object name=\"ball\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">ball</attr>\r\n\r\n  <attr name=\"shape\" type=\"string\">sphere</attr>\r\n\r\n  <attr name=\"color\" type=\"string\">red</attr>\r\n\r\n  <attr name=\"radius\" type=\"int\">2</attr>\r\n\r\n  <attr name=\"deflated\" type=\"boolean\">false</attr>\r\n\r\n  <attr name=\"kick\" type=\"script\">\r\n\r\n    msg (\"you kick the ball\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </inventoryverbs>\r\n\r\n</object>\r\n\r\n<verb>\r\n\r\n  <property>kick</property>\r\n  <pattern>kick</pattern>\r\n\r\n  <defaultexpression>You can't kick that!</defaultexpression>\r\n\r\n</verb>\r\n```\r\n\r\nthen, when you clone it, another Object is created, with everything (all attributes) the same, except for its 'name' String Attribute, as this has to be unique (it adds an increasing number to the end of the name, each time you clone), due to the 'name' String Attribute, being its ID for the quest engine:\r\n\r\n```\r\n// original 'ball' Object:\r\n\r\n<object name=\"ball\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">ball</attr>\r\n\r\n  <attr name=\"shape\" type=\"string\">sphere</attr>\r\n\r\n  <attr name=\"color\" type=\"string\">red</attr>\r\n\r\n  <attr name=\"radius\" type=\"int\">2</attr>\r\n\r\n  <attr name=\"deflated\" type=\"boolean\">false</attr>\r\n\r\n  <attr name=\"kick\" type=\"script\">\r\n\r\n    msg (\"you kick the ball\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </inventoryverbs>\r\n\r\n</object>\r\n\r\n-----------------------------------------------------------\r\n\r\n// clones (3 of them in this example) of the 'ball' Object:\r\n\r\n<object name=\"ball1\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">ball</attr>\r\n\r\n  <attr name=\"shape\" type=\"string\">sphere</attr>\r\n\r\n  <attr name=\"color\" type=\"string\">red</attr>\r\n\r\n  <attr name=\"radius\" type=\"int\">2</attr>\r\n\r\n  <attr name=\"deflated\" type=\"boolean\">false</attr>\r\n\r\n  <attr name=\"kick\" type=\"script\">\r\n\r\n    msg (\"you kick the ball\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </inventoryverbs>\r\n\r\n</object>\r\n\r\n<object name=\"ball2\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">ball</attr>\r\n\r\n  <attr name=\"shape\" type=\"string\">sphere</attr>\r\n\r\n  <attr name=\"color\" type=\"string\">red</attr>\r\n\r\n  <attr name=\"radius\" type=\"int\">2</attr>\r\n\r\n  <attr name=\"deflated\" type=\"boolean\">false</attr>\r\n\r\n  <attr name=\"kick\" type=\"script\">\r\n\r\n    msg (\"you kick the ball\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </inventoryverbs>\r\n\r\n</object>\r\n\r\n<object name=\"ball3\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">ball</attr>\r\n\r\n  <attr name=\"shape\" type=\"string\">sphere</attr>\r\n\r\n  <attr name=\"color\" type=\"string\">red</attr>\r\n\r\n  <attr name=\"radius\" type=\"int\">2</attr>\r\n\r\n  <attr name=\"deflated\" type=\"boolean\">false</attr>\r\n\r\n  <attr name=\"kick\" type=\"script\">\r\n\r\n    msg (\"you kick the ball\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </displayverbs>\r\n\r\n  <inventoryverbs type=\"stringlist\">\r\n\r\n    <value>kick</value>\r\n\r\n  </inventoryverbs>\r\n\r\n</object>\r\n\r\n-----------------\r\n\r\n<verb>\r\n\r\n  <property>kick</property>\r\n  <pattern>kick</pattern>\r\n\r\n  <defaultexpression>You can't kick that!</defaultexpression>\r\n\r\n</verb>\r\n```\r\n\r\n-------------------------\r\n\r\nso, if doing totally random/dynamic, the only way to access a specific clone is to store it's address/memory location within an Attribute, upon the clone's creation:\r\n\r\nthis is known as an Object (reference/pointer) Attribute, an example:\r\n\r\ncreate (\"katana\") // scripting that creates a 'katana' Object\r\n\r\nplayer.weapon = katana // storing the memory address/location of the 'katana' Object into the Object (reference/pointer) custom (my own named/created in this example) 'player.weapon' Object (reference/pointer) Attribute\r\n\r\nso, now, whenever we use 'player.weapon', we are using the 'katana'\r\n\r\nfor an example:\r\n\r\ncreate (\"katana\") // scripting that creates a 'katana' Object\r\ncreate (\"short_sword\") // scripting that creates a 'short_sword' Object\r\n\r\nkatana.damage = 50 // setting/creating a custom 'damage' Integer Attribute on the 'katana' Object\r\nshort_sword.damage = 10 // setting/creating a custom 'damage' Integer Attribute on the 'short_sword' Object\r\n\r\nplayer.weapon = katana\r\norc.life = orc.life - player.weapon.damage\r\n// the orc's life will be reduced by the 'damage' (50) of the 'katana' Object\r\n\r\nplayer.weapon = short_sword\r\norc.life = orc.life - player.weapon.damage\r\n// the orc's life will be reduced by the 'damage' (10) of the 'short_sword' Object\r\n\r\n----------\r\n\r\nnow, for random/dynamic usage, we need to store it (a Clone of the 'ball' Object in this example) immediately upon/along with its creation, an example:\r\n\r\ncreate (\"ball\")\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.clone_1 = CloneObject (ball) // 'ball1' clone object\r\nexample_object.clone_2 = CloneObject (ball) // 'ball2' clone object\r\nexample_object.clone_3 = CloneObject (ball) // 'ball3' clone object\r\n\r\nand now, we can access the clones of the 'ball' Object, via using: 'example_object.clone_1', 'example_object.clone_2', 'example_object.clone_3'\r\n\r\nan example:\r\n\r\nmsg (\"original object: \" + ball.name)\r\nmsg (\"clone object 1: \" + example_object.clone_1.name)\r\nmsg (\"clone object 2: \" + example_object.clone_2.name)\r\nmsg (\"clone object 3: \" + example_object.clone_3.name)\r\n\r\n// output/display:\r\n\r\noriginal object: ball\r\nclone object 1: ball1\r\nclone object 2: ball2\r\nclone object 3: ball3\r\n\r\n-------\r\n\r\nall Objects can be referenced/accessed via their 'names' (ID) String Attributes, their other Attributes (but if you got Objects with the same Attributes and/or Values, then you can NOT reference/access a specific Object, obviously), and/or their Object Types / Types / Inherited Attributes (but if you got Objects with the same Object Types / Types / Inherited Attributes, then you can NOT reference/access a specific Object, obviously)\r\n\r\n(also, with Strings, there's a lot of cool/neat string manipulation stuff, such as using concatenation as one example, that you can do with them, for getting/doing dynamic matching)\r\n\r\n( the string manipulation functions: https://docs.textadventures.co.uk/quest/functions/#string )\r\n\r\nsome examples:\r\n\r\n(most of my examples only show checking for String Attributes, but you can check for the other types of Attributes too: Integers/ints, Doubles, Booleans, Scripts, Lists, Dictionaries, etc)\r\n\r\n```\r\nforeach (object_variable, AllObjects ()) {\r\n  if (object_variable.name = \"WHATEVER\") {\r\n  } else if (object_variable.alias = \"WHATEVER\") {\r\n  } else if (HasString (object_variable, \"color\")) {\r\n  } else if (GetString (object_variable, \"color\") = \"red\") {\r\n    // yes, I know that this script ('GetString') won't ever be checked (due to my setup example in the 'HasString' script before it), as I'm just giving examples of various ways of referencing/accessing an Object, so I don't care about this incorrect scripting ordering logic\r\n  } else if (DoesInherit (object_variable, \"ball_type\")) {\r\n  } else if (ListContains (object_variable.color_stringlist, \"red\")) {\r\n  } else if (Contains (object_variable, water)) {\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel has already covered/helped with all of this, but just here's a hopefully simple explanation of cloning:</p>\n<p>let's say we create an Object:</p>\n<pre><code>&lt;object name=\"ball\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;ball&lt;/attr&gt;\n\n  &lt;attr name=\"shape\" type=\"string\"&gt;sphere&lt;/attr&gt;\n\n  &lt;attr name=\"color\" type=\"string\"&gt;red&lt;/attr&gt;\n\n  &lt;attr name=\"radius\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;attr name=\"deflated\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n\n    msg (\"you kick the ball\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n&lt;/object&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;kick&lt;/property&gt;\n  &lt;pattern&gt;kick&lt;/pattern&gt;\n\n  &lt;defaultexpression&gt;You can't kick that!&lt;/defaultexpression&gt;\n\n&lt;/verb&gt;\n</code></pre>\n<p>then, when you clone it, another Object is created, with everything (all attributes) the same, except for its 'name' String Attribute, as this has to be unique (it adds an increasing number to the end of the name, each time you clone), due to the 'name' String Attribute, being its ID for the quest engine:</p>\n<pre><code>// original 'ball' Object:\n\n&lt;object name=\"ball\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;ball&lt;/attr&gt;\n\n  &lt;attr name=\"shape\" type=\"string\"&gt;sphere&lt;/attr&gt;\n\n  &lt;attr name=\"color\" type=\"string\"&gt;red&lt;/attr&gt;\n\n  &lt;attr name=\"radius\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;attr name=\"deflated\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n\n    msg (\"you kick the ball\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n&lt;/object&gt;\n\n-----------------------------------------------------------\n\n// clones (3 of them in this example) of the 'ball' Object:\n\n&lt;object name=\"ball1\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;ball&lt;/attr&gt;\n\n  &lt;attr name=\"shape\" type=\"string\"&gt;sphere&lt;/attr&gt;\n\n  &lt;attr name=\"color\" type=\"string\"&gt;red&lt;/attr&gt;\n\n  &lt;attr name=\"radius\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;attr name=\"deflated\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n\n    msg (\"you kick the ball\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"ball2\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;ball&lt;/attr&gt;\n\n  &lt;attr name=\"shape\" type=\"string\"&gt;sphere&lt;/attr&gt;\n\n  &lt;attr name=\"color\" type=\"string\"&gt;red&lt;/attr&gt;\n\n  &lt;attr name=\"radius\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;attr name=\"deflated\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n\n    msg (\"you kick the ball\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"ball3\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;ball&lt;/attr&gt;\n\n  &lt;attr name=\"shape\" type=\"string\"&gt;sphere&lt;/attr&gt;\n\n  &lt;attr name=\"color\" type=\"string\"&gt;red&lt;/attr&gt;\n\n  &lt;attr name=\"radius\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;attr name=\"deflated\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n\n    msg (\"you kick the ball\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n  &lt;inventoryverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;kick&lt;/value&gt;\n\n  &lt;/inventoryverbs&gt;\n\n&lt;/object&gt;\n\n-----------------\n\n&lt;verb&gt;\n\n  &lt;property&gt;kick&lt;/property&gt;\n  &lt;pattern&gt;kick&lt;/pattern&gt;\n\n  &lt;defaultexpression&gt;You can't kick that!&lt;/defaultexpression&gt;\n\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>so, if doing totally random/dynamic, the only way to access a specific clone is to store it's address/memory location within an Attribute, upon the clone's creation:</p>\n<p>this is known as an Object (reference/pointer) Attribute, an example:</p>\n<p>create (\"katana\") // scripting that creates a 'katana' Object</p>\n<p>player.weapon = katana // storing the memory address/location of the 'katana' Object into the Object (reference/pointer) custom (my own named/created in this example) 'player.weapon' Object (reference/pointer) Attribute</p>\n<p>so, now, whenever we use 'player.weapon', we are using the 'katana'</p>\n<p>for an example:</p>\n<p>create (\"katana\") // scripting that creates a 'katana' Object<br>\ncreate (\"short_sword\") // scripting that creates a 'short_sword' Object</p>\n<p>katana.damage = 50 // setting/creating a custom 'damage' Integer Attribute on the 'katana' Object<br>\nshort_sword.damage = 10 // setting/creating a custom 'damage' Integer Attribute on the 'short_sword' Object</p>\n<p>player.weapon = katana<br>\norc.life = orc.life - player.weapon.damage<br>\n// the orc's life will be reduced by the 'damage' (50) of the 'katana' Object</p>\n<p>player.weapon = short_sword<br>\norc.life = orc.life - player.weapon.damage<br>\n// the orc's life will be reduced by the 'damage' (10) of the 'short_sword' Object</p>\n<hr>\n<p>now, for random/dynamic usage, we need to store it (a Clone of the 'ball' Object in this example) immediately upon/along with its creation, an example:</p>\n<p>create (\"ball\")</p>\n<p>create (\"example_object\")</p>\n<p>example_object.clone_1 = CloneObject (ball) // 'ball1' clone object<br>\nexample_object.clone_2 = CloneObject (ball) // 'ball2' clone object<br>\nexample_object.clone_3 = CloneObject (ball) // 'ball3' clone object</p>\n<p>and now, we can access the clones of the 'ball' Object, via using: 'example_object.clone_1', 'example_object.clone_2', 'example_object.clone_3'</p>\n<p>an example:</p>\n<p>msg (\"original object: \" + ball.name)<br>\nmsg (\"clone object 1: \" + example_object.clone_1.name)<br>\nmsg (\"clone object 2: \" + example_object.clone_2.name)<br>\nmsg (\"clone object 3: \" + example_object.clone_3.name)</p>\n<p>// output/display:</p>\n<p>original object: ball<br>\nclone object 1: ball1<br>\nclone object 2: ball2<br>\nclone object 3: ball3</p>\n<hr>\n<p>all Objects can be referenced/accessed via their 'names' (ID) String Attributes, their other Attributes (but if you got Objects with the same Attributes and/or Values, then you can NOT reference/access a specific Object, obviously), and/or their Object Types / Types / Inherited Attributes (but if you got Objects with the same Object Types / Types / Inherited Attributes, then you can NOT reference/access a specific Object, obviously)</p>\n<p>(also, with Strings, there's a lot of cool/neat string manipulation stuff, such as using concatenation as one example, that you can do with them, for getting/doing dynamic matching)</p>\n<p>( the string manipulation functions: https://docs.textadventures.co.uk/quest/functions/#string )</p>\n<p>some examples:</p>\n<p>(most of my examples only show checking for String Attributes, but you can check for the other types of Attributes too: Integers/ints, Doubles, Booleans, Scripts, Lists, Dictionaries, etc)</p>\n<pre><code>foreach (object_variable, AllObjects ()) {\n  if (object_variable.name = \"WHATEVER\") {\n  } else if (object_variable.alias = \"WHATEVER\") {\n  } else if (HasString (object_variable, \"color\")) {\n  } else if (GetString (object_variable, \"color\") = \"red\") {\n    // yes, I know that this script ('GetString') won't ever be checked (due to my setup example in the 'HasString' script before it), as I'm just giving examples of various ways of referencing/accessing an Object, so I don't care about this incorrect scripting ordering logic\n  } else if (DoesInherit (object_variable, \"ball_type\")) {\n  } else if (ListContains (object_variable.color_stringlist, \"red\")) {\n  } else if (Contains (object_variable, water)) {\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2020-01-17T14:58:37.3903224Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a0c1b894-f955-4411-b9e5-5dd72a0ada2a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nforgot to explain this, you can change a clone's Attribute's values (but NOT if its an Inherited Attribute, unless you recreate the Attribute on the clone Object), by storing it's address/memory location within an Object (reference/pointer) Attribute\r\n\r\nfor example:\r\n\r\ncreate (\"example_object\")\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 10\r\nmsg (katana.damage)\r\n// output: 10\r\n\r\nexample_object.clone = CloneObject (katana)\r\n\r\nmsg (example_object.clone.damage)\r\n// output: 10\r\n\r\nexample_object.clone.damage = 50\r\n\r\nmsg (example_object.clone.damage)\r\n// output: 50",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>forgot to explain this, you can change a clone's Attribute's values (but NOT if its an Inherited Attribute, unless you recreate the Attribute on the clone Object), by storing it's address/memory location within an Object (reference/pointer) Attribute</p>\n<p>for example:</p>\n<p>create (\"example_object\")</p>\n<p>create (\"katana\")<br>\nkatana.damage = 10<br>\nmsg (katana.damage)<br>\n// output: 10</p>\n<p>example_object.clone = CloneObject (katana)</p>\n<p>msg (example_object.clone.damage)<br>\n// output: 10</p>\n<p>example_object.clone.damage = 50</p>\n<p>msg (example_object.clone.damage)<br>\n// output: 50</p>\n\n",
      "PostDate": "2020-01-17T15:06:20.7126587Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b8c3e0bd-4c92-498d-88f6-d751c4b759eb",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PSS\r\n\r\nthe recent version of quest has changed the clone feature a bit, so that when you clone something, it's original Object's address/memory location gets stored into the 'prototype' Object (reference/pointer) Attribute, for all clones being made, which is extremely useful\r\n\r\n```\r\n// original objects:\r\n\r\n<object name=\"ball\">\r\n</object>\r\n\r\n<object name=\"food\">\r\n</object>\r\n\r\n---------------\r\n\r\n// clones\r\n\r\n<object name=\"ball1\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">ball</attr>\r\n\r\n</object>\r\n\r\n<object name=\"ball2\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">ball</attr>\r\n\r\n</object>\r\n\r\n<object name=\"ball3\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">ball</attr>\r\n\r\n</object>\r\n\r\n<object name=\"food1\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">food</attr>\r\n\r\n</object>\r\n\r\n<object name=\"food2\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">food</attr>\r\n\r\n</object>\r\n\r\n<object name=\"food3\">\r\n\r\n  <attr name=\"prototype\" type=\"object\">food</attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>PSS</p>\n<p>the recent version of quest has changed the clone feature a bit, so that when you clone something, it's original Object's address/memory location gets stored into the 'prototype' Object (reference/pointer) Attribute, for all clones being made, which is extremely useful</p>\n<pre><code>// original objects:\n\n&lt;object name=\"ball\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"food\"&gt;\n&lt;/object&gt;\n\n---------------\n\n// clones\n\n&lt;object name=\"ball1\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;ball&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"ball2\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;ball&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"ball3\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;ball&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"food1\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;food&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"food2\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;food&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"food3\"&gt;\n\n  &lt;attr name=\"prototype\" type=\"object\"&gt;food&lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2020-01-17T15:26:58.0419756Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "62c60ad1-3509-4dd7-84ca-548f6519bc3d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**Edit:** Ah, you beat me to it.\r\n\r\n> when you clone it, another Object is created, with everything (all attributes) the same, except for its 'name' String Attribute\r\n\r\nI would advise against using `Clone` or `ShallowClone` directly unless you've got a specific reason for doing so.\r\n\r\nFor a new user, unless there's some specific reason not to, you should be using `CloneObject`, `CloneObjectAndMove`, or `CloneObjectAndMoveHere` depending where you want the clone to be. (There's also a `CloneObjectAndInitialise`, which has a few rather specialised uses)\r\n\r\nThere may be **3** attributes different from the original when you use these clone functions (which makes them a lot easier to use):\r\n* The **`name`** attribute of each clone will be different, usually adding a number to the end. You shouldn't use the name in any case.\r\n* The **`alias`** attribute will be set to the original object's `alias` if it had one, and the original object's `name` otherwise. This means that if you clone an object named \"ball\" which has no alias, the player will see the alias \"ball\" instead of the name \"ball2\" for clones.\r\n* The **`prototype`** attribute will be set to the original object's `prototype` if it has one, or the original object otherwise. This means that you have an attribute which lets you find the original object a clone was created from, even if it's a clone of a clone of a clone.\r\n\r\nSo, while \"everything except for its name\" may be true for objects cloned with `Clone`, it's probably better to be aware of the other changes made by the `CloneObject` functions.\r\n\r\nprototype especially is very useful. It lets you use expressions like `FilterByAttribute (AllObjects(), \"prototype\", ball)` which returns an objectlist containing all the clones of ball, or `if (object.prototype = ball) {` which lets you find out quickly if an object is a ball.",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>Edit:</strong> Ah, you beat me to it.</p>\n<blockquote>\n<p>when you clone it, another Object is created, with everything (all attributes) the same, except for its 'name' String Attribute</p>\n</blockquote>\n<p>I would advise against using <code>Clone</code> or <code>ShallowClone</code> directly unless you've got a specific reason for doing so.</p>\n<p>For a new user, unless there's some specific reason not to, you should be using <code>CloneObject</code>, <code>CloneObjectAndMove</code>, or <code>CloneObjectAndMoveHere</code> depending where you want the clone to be. (There's also a <code>CloneObjectAndInitialise</code>, which has a few rather specialised uses)</p>\n<p>There may be <strong>3</strong> attributes different from the original when you use these clone functions (which makes them a lot easier to use):</p>\n<ul>\n<li>The <strong><code>name</code></strong> attribute of each clone will be different, usually adding a number to the end. You shouldn't use the name in any case.</li>\n<li>The <strong><code>alias</code></strong> attribute will be set to the original object's <code>alias</code> if it had one, and the original object's <code>name</code> otherwise. This means that if you clone an object named \"ball\" which has no alias, the player will see the alias \"ball\" instead of the name \"ball2\" for clones.</li>\n<li>The <strong><code>prototype</code></strong> attribute will be set to the original object's <code>prototype</code> if it has one, or the original object otherwise. This means that you have an attribute which lets you find the original object a clone was created from, even if it's a clone of a clone of a clone.</li>\n</ul>\n<p>So, while \"everything except for its name\" may be true for objects cloned with <code>Clone</code>, it's probably better to be aware of the other changes made by the <code>CloneObject</code> functions.</p>\n<p>prototype especially is very useful. It lets you use expressions like <code>FilterByAttribute (AllObjects(), \"prototype\", ball)</code> which returns an objectlist containing all the clones of ball, or <code>if (object.prototype = ball) {</code> which lets you find out quickly if an object is a ball.</p>\n\n",
      "PostDate": "2020-01-17T15:32:42.2892607Z",
      "LastEditDate": "2020-01-17T15:37:32.9258928Z",
      "link": null
    },
    {
      "PostId": "525f3bcd-6d47-440e-a36a-508b2e5211fa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's worth pointing out that `Clone()` and `ShallowClone()` don't set `prototype` by default. It only exists in the `CloneObject` functions.\r\n\r\nAlso that as of Quest 5.8, cloned children are handled differently. If I remember correctly:\r\n\r\n* If you clone an object using `Clone`, it will be created in the same location as the original. Any children it has will be created inside it.\r\n    * If you clone an object with children (for example a bag of apples) using `Clone`, the children are also cloned. The cloned apple is created inside the cloned bag.\r\n* If you clone an object using `ShallowClone`, its children are **not** cloned, so the cloned bag will be empty.\r\n    * As far as I know, this is new in Quest 5.8\r\n    * If you're using a stacking system, this could cause unexpected behaviour\r\n* If you clone an object using `CloneObject`, the object will be cloned using `ShallowClone`, and its alias set, and then its children are cloned and moved.\r\n    * This means that the cloned apples are created inside the original bag, and then moved to the cloned bag. The apples' `changedparent` script will be run, which didn't happen in  Quest 5.7\r\n    * This means that the children of a cloned object will now have their `hasbeenmoved` flag set to true even if the object has never been moved\r\n    * This might cause some stacking libraries to behave unexpectedly\r\n* If you clone an object with `CloneObjectAndMove` or `CloneObjectAndMoveHere`, the `changedparent` scripts will be run for the object and its children.\r\n    * I think this is different from Quest 5.7, which would only run `changedparent` for the top cloned object.\r\n\r\nThis **mostly** doesn't matter. But some stacking libraries, or (for example) a bag whose alias changes to \"empty bag\", \"bag\", or \"overloaded bag\" depending on the weight of stuff inside it, may behave differently from how they did in Quest 5.8\r\n\r\n(I'm not sure, but I think cloning a limited container which contains another container might now have a bug. I'll take a look at the code again at some point)",
      "EditableFormat": "markdown",
      "HTML": "<p>It's worth pointing out that <code>Clone()</code> and <code>ShallowClone()</code> don't set <code>prototype</code> by default. It only exists in the <code>CloneObject</code> functions.</p>\n<p>Also that as of Quest 5.8, cloned children are handled differently. If I remember correctly:</p>\n<ul>\n<li>If you clone an object using <code>Clone</code>, it will be created in the same location as the original. Any children it has will be created inside it.\n<ul>\n<li>If you clone an object with children (for example a bag of apples) using <code>Clone</code>, the children are also cloned. The cloned apple is created inside the cloned bag.</li>\n</ul>\n</li>\n<li>If you clone an object using <code>ShallowClone</code>, its children are <strong>not</strong> cloned, so the cloned bag will be empty.\n<ul>\n<li>As far as I know, this is new in Quest 5.8</li>\n<li>If you're using a stacking system, this could cause unexpected behaviour</li>\n</ul>\n</li>\n<li>If you clone an object using <code>CloneObject</code>, the object will be cloned using <code>ShallowClone</code>, and its alias set, and then its children are cloned and moved.\n<ul>\n<li>This means that the cloned apples are created inside the original bag, and then moved to the cloned bag. The apples' <code>changedparent</code> script will be run, which didn't happen in  Quest 5.7</li>\n<li>This means that the children of a cloned object will now have their <code>hasbeenmoved</code> flag set to true even if the object has never been moved</li>\n<li>This might cause some stacking libraries to behave unexpectedly</li>\n</ul>\n</li>\n<li>If you clone an object with <code>CloneObjectAndMove</code> or <code>CloneObjectAndMoveHere</code>, the <code>changedparent</code> scripts will be run for the object and its children.\n<ul>\n<li>I think this is different from Quest 5.7, which would only run <code>changedparent</code> for the top cloned object.</li>\n</ul>\n</li>\n</ul>\n<p>This <strong>mostly</strong> doesn't matter. But some stacking libraries, or (for example) a bag whose alias changes to \"empty bag\", \"bag\", or \"overloaded bag\" depending on the weight of stuff inside it, may behave differently from how they did in Quest 5.8</p>\n<p>(I'm not sure, but I think cloning a limited container which contains another container might now have a bug. I'll take a look at the code again at some point)</p>\n\n",
      "PostDate": "2020-01-17T15:53:00.2391795Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d99b1e6e-b453-4563-b0c6-7b3533397c1a",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I do with my clones is make a random chance changing the value before placing or taking a clone.",
      "EditableFormat": "markdown",
      "HTML": "<p>What I do with my clones is make a random chance changing the value before placing or taking a clone.</p>\n\n",
      "PostDate": "2020-01-25T18:50:23.5849703Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "35be8258-575c-4600-88b1-e67fb7e1fb0a",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "http://i.imgur.com/yL1GRWab.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I do with my clones is make a random chance changing the value before placing or taking a clone.\r\n\r\nEdit: Sorry don't know why it posted twice don't know how to delete lol",
      "EditableFormat": "markdown",
      "HTML": "<p>What I do with my clones is make a random chance changing the value before placing or taking a clone.</p>\n<p>Edit: Sorry don't know why it posted twice don't know how to delete lol</p>\n\n",
      "PostDate": "2020-01-25T18:50:40.4287508Z",
      "LastEditDate": "2020-01-25T18:52:58.662314Z",
      "link": null
    },
    {
      "PostId": "7e666d1d-e565-4728-8fad-7aea582c5aaf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What I do with my clones is make a random chance changing the value before placing or taking a clone.\r\n\r\nDid the suggestion I posted earlier solve your problem?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What I do with my clones is make a random chance changing the value before placing or taking a clone.</p>\n</blockquote>\n<p>Did the suggestion I posted earlier solve your problem?</p>\n\n",
      "PostDate": "2020-01-25T21:23:38.6385304Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
