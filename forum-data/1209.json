{
  "Topic": {
    "TopicId": "1209",
    "ForumId": "10",
    "Title": "Quick Tip: Synonyms and Redundancy",
    "LastUpdated": "2008-03-08T23:50:02+00:00",
    "ReplyCount": 30
  },
  "Posts": [
    {
      "PostId": "9300",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Hey all.  I just thought I'd share something handy.  You can get the Quest interpreter to ignore redundant words when parsing commands.  For instance, 'the' is a redundant word, since it contributes nothing to the meaning of a command.  It merely conforms to English language rules.  'Get key' and 'Get the key' are equivalent, and should be treated as such in a game.   If you don't want to code for both instances, just do the following:\n\n[code:33cnfr9h]define synonyms\n\n\tthe = \n\t\nend define[/code:33cnfr9h]\n\nIf you are unfamiliar with synonyms, since I know there are many new forum members, you can look it up [url=http&#58;//www&#46;axeuk&#46;com/quest/developer/asl/script-synonyms&#46;htm:33cnfr9h]here[/url:33cnfr9h].",
      "EditableFormat": "bbcode",
      "HTML": "Hey all.  I just thought I'd share something handy.  You can get the Quest interpreter to ignore redundant words when parsing commands.  For instance, 'the' is a redundant word, since it contributes nothing to the meaning of a command.  It merely conforms to English language rules.  'Get key' and 'Get the key' are equivalent, and should be treated as such in a game.   If you don't want to code for both instances, just do the following:<br/><br/><pre><code>define synonyms<br/><br/>\tthe = <br/>\t<br/>end define</code></pre><br/><br/>If you are unfamiliar with synonyms, since I know there are many new forum members, you can look it up <a href=\"http&#58;//www&#46;axeuk&#46;com/quest/developer/asl/script-synonyms&#46;htm\" rel=\"nofollow\">here</a>",
      "PostDate": "2006-07-07T10:49:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9316",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I disagree that &quot;the&quot; adds nothing to the command; in some cases, it clarifies the meaning of a sentence.\n\nFor example, in an Inform 6 game with an old man, an old book, and a new book, &quot;give old man the old book&quot; will be understood immediately; &quot;give old man old book&quot; will need to go through disambiguation.",
      "EditableFormat": "bbcode",
      "HTML": "I disagree that &quot;the&quot; adds nothing to the command; in some cases, it clarifies the meaning of a sentence.<br/><br/>For example, in an Inform 6 game with an old man, an old book, and a new book, &quot;give old man the old book&quot; will be understood immediately; &quot;give old man old book&quot; will need to go through disambiguation.",
      "PostDate": "2006-07-07T14:43:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9328",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "What overcat is saying, is that while YOU type that - we as programmers can ignore the &quot;the&quot; really easily.\nYou can still type it - but it doesn't mean we exactly need to use it.\n\nI like it overcat!",
      "EditableFormat": "bbcode",
      "HTML": "What overcat is saying, is that while YOU type that - we as programmers can ignore the &quot;the&quot; really easily.<br/>You can still type it - but it doesn't mean we exactly need to use it.<br/><br/>I like it overcat!",
      "PostDate": "2006-07-07T16:42:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9331",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "The irreducible bits of the sentence 'give old man the old book' and 'give old man old book' are 'give', 'old man' and 'old book'.  The 'the' [i:qu893uum]is[/i:qu893uum] redundant.  The only time ambiguity is a concern is if you type 'give old old', leaving out 'man' and 'book'.\n\nFor instance, 'put old key on old cabinet' succeeds in ASL.  (The way I have it coded.)  'put old on old cabinet' disambiguates the first old, but not the second.  'put old key on old' disambiguates the second old, but not the first.  'put old on old' disambiguates both, because [i:qu893uum]both[/i:qu893uum] share the word 'old'.  \n\nGranted, I have coded my own GetObject function, and created a new diambiguation process, bypassing the built-in one.  With what I had coded, 'put old key on old cabinet' would work, but interjecting a redundant 'the' - 'put the old key on old cabinet'  or 'put the old key on the old cabinet' - would fail.  So I essentially deleted 'the' from the parser's vocabulary, allowing it to pass over the 'the' with no distinction.  'The' is invisible.\n\nI'm not sure how Inform 6 works, though I believe it, too, is object-oriented.  (I'm studying [url=http&#58;//emshort&#46;home&#46;mindspring&#46;com/:qu893uum]Emily Short[/url:qu893uum]'s [url=http&#58;//emshort&#46;home&#46;mindspring&#46;com/liquids&#46;html:qu893uum]WaterElement.h[/url:qu893uum] library.)  In any case, the parser must make distinctions differently.",
      "EditableFormat": "bbcode",
      "HTML": "The irreducible bits of the sentence 'give old man the old book' and 'give old man old book' are 'give', 'old man' and 'old book'.  The 'the' <span style=\"font-style:italic;\">is</span> redundant.  The only time ambiguity is a concern is if you type 'give old old', leaving out 'man' and 'book'.<br/><br/>For instance, 'put old key on old cabinet' succeeds in ASL.  (The way I have it coded.)  'put old on old cabinet' disambiguates the first old, but not the second.  'put old key on old' disambiguates the second old, but not the first.  'put old on old' disambiguates both, because <span style=\"font-style:italic;\">both</span> share the word 'old'.  <br/><br/>Granted, I have coded my own GetObject function, and created a new diambiguation process, bypassing the built-in one.  With what I had coded, 'put old key on old cabinet' would work, but interjecting a redundant 'the' - 'put the old key on old cabinet'  or 'put the old key on the old cabinet' - would fail.  So I essentially deleted 'the' from the parser's vocabulary, allowing it to pass over the 'the' with no distinction.  'The' is invisible.<br/><br/>I'm not sure how Inform 6 works, though I believe it, too, is object-oriented.  (I'm studying <a href=\"http&#58;//emshort&#46;home&#46;mindspring&#46;com/\" rel=\"nofollow\">Emily Short</a>'s <a href=\"http&#58;//emshort&#46;home&#46;mindspring&#46;com/liquids&#46;html\" rel=\"nofollow\">WaterElement.h</a> library.)  In any case, the parser must make distinctions differently.",
      "PostDate": "2006-07-07T16:44:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9338",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Could I just ask overcat, how do you have the ambiguity setup? Does it come up with a numbered list? Does it just ask you for each ambiguity - asking you to type in the full name/etc?",
      "EditableFormat": "bbcode",
      "HTML": "Could I just ask overcat, how do you have the ambiguity setup? Does it come up with a numbered list? Does it just ask you for each ambiguity - asking you to type in the full name/etc?",
      "PostDate": "2006-07-07T17:06:09+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9341",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Your first guess was correct.  A numbered list is presented to the player.  They choose something from the list by typing in a number, which then disambiguates.  The GetObject function attempts to return a single object.  If mutliple objects are found, the disambiguity menu appears with as many numbered choices as objects were found, +1.\n\nIE, 3 objects found:\n\nWhich object do you mean?\n\n1. Object A\n2. Object B\n3. Object C\n4. None of the above\n\nI only started to implement this because I wanted the disambiguation menu to appear as text in the main window, rather than text in a popup.  As it turns out, this required a moderate amount of coding, and became an integral part to a plethora of commands.  Every command dealing with item object interaction now uses GetObject, rather than the built-in functionality.  This substantiated an additional 'alts' property to replace the current 'alt' property, since that could not be read as a string.\n\nGetObject(#text input#; #location to look in#; #object type, if any#; #contained in object, if any#; #wearer, if any#; #equipper, if any#; #object this is under, if any#)\n\nAs of now this disambiguates between objects [i:3ebpf339]in the same room[/i:3ebpf339].  Anything you are wearing, holding, or carrying are all in the same room.  This may have to be changed, however, since I can be carrying a 'gold coin' in the inventory room, and there can be another 'gold coin' in the current room.  Typing 'put coin in piggy bank' would need to disambiguate the two coins.",
      "EditableFormat": "bbcode",
      "HTML": "Your first guess was correct.  A numbered list is presented to the player.  They choose something from the list by typing in a number, which then disambiguates.  The GetObject function attempts to return a single object.  If mutliple objects are found, the disambiguity menu appears with as many numbered choices as objects were found, +1.<br/><br/>IE, 3 objects found:<br/><br/>Which object do you mean?<br/><br/>1. Object A<br/>2. Object B<br/>3. Object C<br/>4. None of the above<br/><br/>I only started to implement this because I wanted the disambiguation menu to appear as text in the main window, rather than text in a popup.  As it turns out, this required a moderate amount of coding, and became an integral part to a plethora of commands.  Every command dealing with item object interaction now uses GetObject, rather than the built-in functionality.  This substantiated an additional 'alts' property to replace the current 'alt' property, since that could not be read as a string.<br/><br/>GetObject(#text input#; #location to look in#; #object type, if any#; #contained in object, if any#; #wearer, if any#; #equipper, if any#; #object this is under, if any#)<br/><br/>As of now this disambiguates between objects <span style=\"font-style:italic;\">in the same room</span>.  Anything you are wearing, holding, or carrying are all in the same room.  This may have to be changed, however, since I can be carrying a 'gold coin' in the inventory room, and there can be another 'gold coin' in the current room.  Typing 'put coin in piggy bank' would need to disambiguate the two coins.",
      "PostDate": "2006-07-07T17:39:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9345",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "If you're not doing anything special, in that situation, Inform 6 will parse the first command as &quot;give / old man old / book&quot;, and parse the second as &quot;give / old man / (the) / old book&quot;.  (By default, Inform 6 doesn't care about word order within a noun phrase, and uses as many matching words as it can on the first phrase; this is an unusual case where that behavior fails.  In the first case, it will accept the first three words as referring to the old man; in the second case, it won't recognize &quot;the&quot; as referring to the old man, so it will only use two words.)\n\nFor comparison, could you port The Flower Garden ( <!-- m --><a class=\"postlink\" href=\"http://www.geocities.com/ralphmerridew/Flower.zip\">http://www.geocities.com/ralphmerridew/Flower.zip</a><!-- m --> , Inform 6, TADS 2, and ALAN 2 sample sources and binaries) to Quest?\n\nImportant criteria:\n1)  The phrases &quot;red flower&quot; and &quot;tulip&quot; must be acceptable names for the tulip.  (Likewise with the other flowers.)\n2)  The system should be consistent about what phrases are acceptable names for an object.  \n3)  Any two successful commands that cause the same action should have identical results.",
      "EditableFormat": "bbcode",
      "HTML": "If you're not doing anything special, in that situation, Inform 6 will parse the first command as &quot;give / old man old / book&quot;, and parse the second as &quot;give / old man / (the) / old book&quot;.  (By default, Inform 6 doesn't care about word order within a noun phrase, and uses as many matching words as it can on the first phrase; this is an unusual case where that behavior fails.  In the first case, it will accept the first three words as referring to the old man; in the second case, it won't recognize &quot;the&quot; as referring to the old man, so it will only use two words.)<br/><br/>For comparison, could you port The Flower Garden ( <!-- m --><a class=\"postlink\" href=\"http://www.geocities.com/ralphmerridew/Flower.zip\">http://www.geocities.com/ralphmerridew/Flower.zip</a><!-- m --> , Inform 6, TADS 2, and ALAN 2 sample sources and binaries) to Quest?<br/><br/>Important criteria:<br/>1)  The phrases &quot;red flower&quot; and &quot;tulip&quot; must be acceptable names for the tulip.  (Likewise with the other flowers.)<br/>2)  The system should be consistent about what phrases are acceptable names for an object.  <br/>3)  Any two successful commands that cause the same action should have identical results.",
      "PostDate": "2006-07-07T18:35:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9348",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Judging by the output, this can be ported to quest.  Quest does not, by default, support 'it' as a substitute for the last object referred to, though I think I can get this to work with a little code.",
      "EditableFormat": "bbcode",
      "HTML": "Judging by the output, this can be ported to quest.  Quest does not, by default, support 'it' as a substitute for the last object referred to, though I think I can get this to work with a little code.",
      "PostDate": "2006-07-07T18:56:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9353",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "It doesn't?\n\nFrom <!-- m --><a class=\"postlink\" href=\"http://www.axeuk.com/quest/qfeat.htm\">http://www.axeuk.com/quest/qfeat.htm</a><!-- m -->\n[quote:p00olz74]You don't have to keep retyping object names - Quest's pronoun support means you can type &quot;LOOK AT BOOK&quot; and then &quot;TAKE IT&quot;, so there's no need to type the name of the object twice.[/quote:p00olz74]\n\nThough &quot;it&quot; support isn't directly important; however, if &quot;it&quot; is supported, it should be consistently supported.\n\nAlso, port from the source, the Inform version preferably.",
      "EditableFormat": "bbcode",
      "HTML": "It doesn't?<br/><br/>From <!-- m --><a class=\"postlink\" href=\"http://www.axeuk.com/quest/qfeat.htm\">http://www.axeuk.com/quest/qfeat.htm</a><!-- m --><br/><blockquote><p>You don't have to keep retyping object names - Quest's pronoun support means you can type &quot;LOOK AT BOOK&quot; and then &quot;TAKE IT&quot;, so there's no need to type the name of the object twice.</p></blockquote><br/><br/>Though &quot;it&quot; support isn't directly important; however, if &quot;it&quot; is supported, it should be consistently supported.<br/><br/>Also, port from the source, the Inform version preferably.",
      "PostDate": "2006-07-07T19:07:54+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9356",
      "UserId": 0,
      "Username": "davidw",
      "UserAvatar": null,
      "UserGravatar": "5d9c9199ac213c3e7284cd76a2262c4a",
      "EditableText": "Quest [i:eq658ypi]does[/i:eq658ypi] support 'it', though (I think) only if the author specifies it during the object creation. Some of the recent games I've played have allowed me to refer to the previous object as 'it', whereas others have required me to type their name in full.",
      "EditableFormat": "bbcode",
      "HTML": "Quest <span style=\"font-style:italic;\">does</span> support 'it', though (I think) only if the author specifies it during the object creation. Some of the recent games I've played have allowed me to refer to the previous object as 'it', whereas others have required me to type their name in full.",
      "PostDate": "2006-07-07T19:12:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9357",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I don't know why you used so many options for the disambiguation. It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway.\nIf it's under an object then it'd be unavailable (dependant on the programmers choice) while ontop should be fine.\nAlso object types shouldn't really matter.\nIn your instance, if you said &quot;give old to old&quot; and had; old man, old book and old key, then how would you use the type ambiguation..\nI guess type ambiguation is good if, say;\nfill car with pet, and you had petrol, pet cat and pet dog... As you could distinguise between the petrol and animals... But still, I see it as something which doesn't need to be there.\nThe same for wearer, equipper and inside object.\n\nI'd personally use &quot;#object.ref#;#location#[;#extra.properties#[;...] ]&quot;.\nWhere, inside containers/inside object, would look in #location#.\na Wearer would be carrying the object (for me) - same with equipper.\nObjects underneath wouldn't be interactive, and so would be excluded (at least until examined/revealed).\nAnd the properties would enable me to include only objects with these certain properties.\nI suppose you could have a certain flag which would include/exclude those properties.\n\nYour opinions?",
      "EditableFormat": "bbcode",
      "HTML": "I don't know why you used so many options for the disambiguation. It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway.<br/>If it's under an object then it'd be unavailable (dependant on the programmers choice) while ontop should be fine.<br/>Also object types shouldn't really matter.<br/>In your instance, if you said &quot;give old to old&quot; and had; old man, old book and old key, then how would you use the type ambiguation..<br/>I guess type ambiguation is good if, say;<br/>fill car with pet, and you had petrol, pet cat and pet dog... As you could distinguise between the petrol and animals... But still, I see it as something which doesn't need to be there.<br/>The same for wearer, equipper and inside object.<br/><br/>I'd personally use &quot;#object.ref#;#location#[;#extra.properties#[;...] ]&quot;.<br/>Where, inside containers/inside object, would look in #location#.<br/>a Wearer would be carrying the object (for me) - same with equipper.<br/>Objects underneath wouldn't be interactive, and so would be excluded (at least until examined/revealed).<br/>And the properties would enable me to include only objects with these certain properties.<br/>I suppose you could have a certain flag which would include/exclude those properties.<br/><br/>Your opinions?",
      "PostDate": "2006-07-07T19:23:44+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9366",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:12gp2f5b]Quest does support 'it', though (I think) only if the author specifies it during the object creation. Some of the recent games I've played have allowed me to refer to the previous object as 'it', whereas others have required me to type their name in full.[/quote:12gp2f5b]\n\nThen it must support it.  This didn't work for me on a quick check.  Perhaps objects must be referred to with @'s in command definition blocks in order to 'fill' the pronoun?  In which case, I don't use them.\n\n[quote:12gp2f5b]I don't know why you used so many options for the disambiguation. It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway. [/quote:12gp2f5b]\n\nI use the GetObject function in different commands.  For instance, 'get object' would direct the function to only look for objects that are generally available in the current room.  'get object from under object2' would direct the function to only look for objects that are underneath object2.\n\n[quote:12gp2f5b]Also object types shouldn't really matter. \nIn your instance, if you said &quot;give old to old&quot; and had; old man, old book and old key, then how would you use the type ambiguation.. [/quote:12gp2f5b]\n\nI wouldn't.  Only the first two parameters of the GetObject function are necessary.  In the previous pseudo-code, the remaining parameters had the qualifier 'if any', meaning they could be omitted from the function.  I include all of the parameters for added functionality.  I may want to use GetObject for NPC's, say.  George is looking for food object types, because he's hungry.  The type parameter would definitely be useful, no?  Note that disambiguation is not used in this example.  In fact, the first parameter, #text input#, is disregarded.  Perhaps I should have clarified this.\n\n[quote:12gp2f5b]The same for wearer, equipper and inside object.[/quote:12gp2f5b]\n\nThese parameters are useful when looking only for objects that are worn or equipped.  And not just for the PC, but for NPC's too.  In fact, there are a whole smattering of possible uses for these parameters.  IE, it is raining.  Q: What objects on the PC or NPC get wet?  A: Only objects that are equipped or worn.  Anything else, packed away, is safe from the water.  In this case, disambiguation is not called, since that doesn't matter.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Quest does support 'it', though (I think) only if the author specifies it during the object creation. Some of the recent games I've played have allowed me to refer to the previous object as 'it', whereas others have required me to type their name in full.</p></blockquote><br/><br/>Then it must support it.  This didn't work for me on a quick check.  Perhaps objects must be referred to with @'s in command definition blocks in order to 'fill' the pronoun?  In which case, I don't use them.<br/><br/><blockquote><p>I don't know why you used so many options for the disambiguation. It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway. </p></blockquote><br/><br/>I use the GetObject function in different commands.  For instance, 'get object' would direct the function to only look for objects that are generally available in the current room.  'get object from under object2' would direct the function to only look for objects that are underneath object2.<br/><br/><blockquote><p>Also object types shouldn't really matter. <br/>In your instance, if you said &quot;give old to old&quot; and had; old man, old book and old key, then how would you use the type ambiguation.. </p></blockquote><br/><br/>I wouldn't.  Only the first two parameters of the GetObject function are necessary.  In the previous pseudo-code, the remaining parameters had the qualifier 'if any', meaning they could be omitted from the function.  I include all of the parameters for added functionality.  I may want to use GetObject for NPC's, say.  George is looking for food object types, because he's hungry.  The type parameter would definitely be useful, no?  Note that disambiguation is not used in this example.  In fact, the first parameter, #text input#, is disregarded.  Perhaps I should have clarified this.<br/><br/><blockquote><p>The same for wearer, equipper and inside object.</p></blockquote><br/><br/>These parameters are useful when looking only for objects that are worn or equipped.  And not just for the PC, but for NPC's too.  In fact, there are a whole smattering of possible uses for these parameters.  IE, it is raining.  Q: What objects on the PC or NPC get wet?  A: Only objects that are equipped or worn.  Anything else, packed away, is safe from the water.  In this case, disambiguation is not called, since that doesn't matter.",
      "PostDate": "2006-07-07T20:43:00+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9375",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "NPC's wouldn't use type disambiguation..\nYou'd probably just pick a random object from a list of objects with that 'type'.\n\nHow would you get your NPC to disambiguate a type using the procedure? Unless it gives just a list of names or something.\n\n[quote:2i5b0jky]'get object' would direct the function to only look for objects that are generally available in the current room. 'get object from under object2' would direct the function to only look for objects that are underneath object2.[/quote:2i5b0jky]OK. So you go into a room, and go &quot;look under rug&quot;, and get &quot;there's a key under the rug!&quot; (the room description would probably change after this). Typing &quot;get key&quot; or &quot;pick up key&quot; would lead to &quot;I see no key&quot; and so you'd type &quot;get key from under rug&quot;?\n\nI suppose you'd have;\n&gt; &quot;look under dresser&quot;\n&quot;there's a small rug under the dresser!&quot;\n&gt; &quot;get rug&quot;\n&quot;you can't get the rug - it's under the dresser.&quot;\n&gt; &quot;get rug from under dresser&quot;\n&quot;the dresser is holding the rug down&quot;\n&gt; &quot;pull rug from under dresser&quot;\n&quot;You pull the rub away from under the dresser&quot;... But you can still do that without having to use the 'under' option in your function.\n\n[quote:2i5b0jky]Only the first two parameters of the GetObject function are necessary[/quote:2i5b0jky]I saw that.. I just didn't see much point in having - or coding - those extra 'optional' parts.\n\nAnd in most cases, you can just do a basic include/exclude of objects with or without certain properties (as I suggested).\n\nI don't mean to ridicule - but just ask why you went through creating 6 or 7 extra functions which aren't needed for ambiguity - and also when you could have had 4, with less internal coding.",
      "EditableFormat": "bbcode",
      "HTML": "NPC's wouldn't use type disambiguation..<br/>You'd probably just pick a random object from a list of objects with that 'type'.<br/><br/>How would you get your NPC to disambiguate a type using the procedure? Unless it gives just a list of names or something.<br/><br/><blockquote><p>'get object' would direct the function to only look for objects that are generally available in the current room. 'get object from under object2' would direct the function to only look for objects that are underneath object2.</p></blockquote>OK. So you go into a room, and go &quot;look under rug&quot;, and get &quot;there's a key under the rug!&quot; (the room description would probably change after this). Typing &quot;get key&quot; or &quot;pick up key&quot; would lead to &quot;I see no key&quot; and so you'd type &quot;get key from under rug&quot;?<br/><br/>I suppose you'd have;<br/>&gt; &quot;look under dresser&quot;<br/>&quot;there's a small rug under the dresser!&quot;<br/>&gt; &quot;get rug&quot;<br/>&quot;you can't get the rug - it's under the dresser.&quot;<br/>&gt; &quot;get rug from under dresser&quot;<br/>&quot;the dresser is holding the rug down&quot;<br/>&gt; &quot;pull rug from under dresser&quot;<br/>&quot;You pull the rub away from under the dresser&quot;... But you can still do that without having to use the 'under' option in your function.<br/><br/><blockquote><p>Only the first two parameters of the GetObject function are necessary</p></blockquote>I saw that.. I just didn't see much point in having - or coding - those extra 'optional' parts.<br/><br/>And in most cases, you can just do a basic include/exclude of objects with or without certain properties (as I suggested).<br/><br/>I don't mean to ridicule - but just ask why you went through creating 6 or 7 extra functions which aren't needed for ambiguity - and also when you could have had 4, with less internal coding.",
      "PostDate": "2006-07-08T00:36:45+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9385",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:10z6t70r]I don't mean to ridicule - but just ask why you went through creating 6 or 7 extra functions which aren't needed for ambiguity - and also when you could have had 4, with less internal coding.[/quote:10z6t70r]\n\nHey, that's okay.  This is how we all get better at things - communication.  (By the way, it's just one function, not 6 or 7.)\n\nBut the crux is here:\n\n[quote:10z6t70r]NPC's wouldn't use type disambiguation.. [/quote:10z6t70r]\n\nThe GetObject function is not just for disambiguation.  It's for finding objects in general.  For the PC and for the NPC.  I happen to use it everywhere, even when ambiguity is not an issue.  In the instance where ambiguity [i:10z6t70r]is[/i:10z6t70r] a issue, a Disambiguate function is called.  This only ever occurs for the PC, not NPC's (obviously).\n\n[quote:10z6t70r]George is looking for food object types, because he's hungry. The type parameter would definitely be useful, no? [b:10z6t70r]Note that disambiguation is not used in this example[/b:10z6t70r].[/quote:10z6t70r]\n\n'get rug from under bed'\n\nWhat if there is a rug under the bed, and a rug beside the bed?  GetObject needs to filter out any rugs that are NOT under the bed for disambiguation.  I don't want to disambiguate the two rugs when this command is typed.  It's obvious which rug the player is referring to.  If there are [i:10z6t70r]two[/i:10z6t70r] rugs under the bed, I want to disambiguate just those two rugs, and not any other rugs in the room.\n\n[quote:10z6t70r]It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway.[/quote:10z6t70r]\n\nThe thing is, they [i:10z6t70r]are[/i:10z6t70r] available for interaction, regardless if they are hidden underneath another object - but only with a certain set of commands.  For instance, if there were only one rug underneath the bed (no other rugs anywhere else), and I typed 'get rug', this would result in a denial.  But 'get rug from under dresser' would result (possibly) in a success (or a further complication, as in your example).\n\nMy concept of an object being beneath another object, however, is that you cannot see the first object.  (Like a key or an apple under a bed.)  With a rug and a bed this is not the case.  The bed can be seen, and so can the rug, without having to type 'look under bed'.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I don't mean to ridicule - but just ask why you went through creating 6 or 7 extra functions which aren't needed for ambiguity - and also when you could have had 4, with less internal coding.</p></blockquote><br/><br/>Hey, that's okay.  This is how we all get better at things - communication.  (By the way, it's just one function, not 6 or 7.)<br/><br/>But the crux is here:<br/><br/><blockquote><p>NPC's wouldn't use type disambiguation.. </p></blockquote><br/><br/>The GetObject function is not just for disambiguation.  It's for finding objects in general.  For the PC and for the NPC.  I happen to use it everywhere, even when ambiguity is not an issue.  In the instance where ambiguity <span style=\"font-style:italic;\">is</span> a issue, a Disambiguate function is called.  This only ever occurs for the PC, not NPC's (obviously).<br/><br/><blockquote><p>George is looking for food object types, because he's hungry. The type parameter would definitely be useful, no? <span style=\"font-weight:bold;\">Note that disambiguation is not used in this example</span>.</p></blockquote><br/><br/>'get rug from under bed'<br/><br/>What if there is a rug under the bed, and a rug beside the bed?  GetObject needs to filter out any rugs that are NOT under the bed for disambiguation.  I don't want to disambiguate the two rugs when this command is typed.  It's obvious which rug the player is referring to.  If there are <span style=\"font-style:italic;\">two</span> rugs under the bed, I want to disambiguate just those two rugs, and not any other rugs in the room.<br/><br/><blockquote><p>It shouldn't matter if it's under or ontop of another object... Surely, if it's available for interaction then it'd be ambiguated - otherwise the player can't interact with it anyway.</p></blockquote><br/><br/>The thing is, they <span style=\"font-style:italic;\">are</span> available for interaction, regardless if they are hidden underneath another object - but only with a certain set of commands.  For instance, if there were only one rug underneath the bed (no other rugs anywhere else), and I typed 'get rug', this would result in a denial.  But 'get rug from under dresser' would result (possibly) in a success (or a further complication, as in your example).<br/><br/>My concept of an object being beneath another object, however, is that you cannot see the first object.  (Like a key or an apple under a bed.)  With a rug and a bed this is not the case.  The bed can be seen, and so can the rug, without having to type 'look under bed'.",
      "PostDate": "2006-07-08T03:19:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9389",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I'm just saying; you wouldn't know an object is under it unless you looked underneath.\nAnd *I* don't want to write out the full &quot;get #obj# from under #obj#&quot;.\nI'd personally just type &quot;get #obj#&quot;.\nIt's, IMO, the more natural thought you have in your brain.\n&quot;there's something under the bed - let's pick it up&quot;.\n\nAlso, if there are 2 rugs under the bed, and one out on the side - you'd have to look under the bed to make the 2 rugs available and put them into a disambiguation.\nFor rugs [i:1qtdd8pa]under[/i:1qtdd8pa] a certain object - and not anywhere else in the room, then the 'underneath #object#' part of the command comes in to play.. You can either check in the &quot;get ## under ##&quot; command, after you get a list of objects in the room - not one of my favourites - or simply use a property value (I'd use an under.#object# - simply because it's a true/false value).\n\n[quote:1qtdd8pa]one function[/quote:1qtdd8pa]Yeah, I mean technically there's one function <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P --> . I meant parameters (functions meaning functionality).\n\nI kind of made the half-way guess that getobject returned a string-list (or array name - which I'd personally prefer.. I think you can use #(arrayname.in.string)[index]#).",
      "EditableFormat": "bbcode",
      "HTML": "I'm just saying; you wouldn't know an object is under it unless you looked underneath.<br/>And *I* don't want to write out the full &quot;get #obj# from under #obj#&quot;.<br/>I'd personally just type &quot;get #obj#&quot;.<br/>It's, IMO, the more natural thought you have in your brain.<br/>&quot;there's something under the bed - let's pick it up&quot;.<br/><br/>Also, if there are 2 rugs under the bed, and one out on the side - you'd have to look under the bed to make the 2 rugs available and put them into a disambiguation.<br/>For rugs <span style=\"font-style:italic;\">under</span> a certain object - and not anywhere else in the room, then the 'underneath #object#' part of the command comes in to play.. You can either check in the &quot;get ## under ##&quot; command, after you get a list of objects in the room - not one of my favourites - or simply use a property value (I'd use an under.#object# - simply because it's a true/false value).<br/><br/><blockquote><p>one function</p></blockquote>Yeah, I mean technically there's one function <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P --> . I meant parameters (functions meaning functionality).<br/><br/>I kind of made the half-way guess that getobject returned a string-list (or array name - which I'd personally prefer.. I think you can use #(arrayname.in.string)[index]#).",
      "PostDate": "2006-07-08T10:19:08+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9398",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:3992q042]I'm just saying; you wouldn't know an object is under it unless you looked underneath. \nAnd *I* don't want to write out the full &quot;get #obj# from under #obj#&quot;. \nI'd personally just type &quot;get #obj#&quot;. \nIt's, IMO, the more natural thought you have in your brain. \n&quot;there's something under the bed - let's pick it up&quot;.[/quote:3992q042] \n\nYou have a point, there.  'get rug' could disambiguate by:\n\nWhich rug do you mean?\n\n1. Green Rug\n2. Red Rug (under the bed)\n3. None of the above\n\n[quote:3992q042]I kind of made the half-way guess that getobject returned a string-list (or array name - which I'd personally prefer.. I think you can use #(arrayname.in.string)[index]#).[/quote:3992q042]\n\nIt returns an objects_found array.  (Which I find terribly useful for manipulating specific sets of objects).  The Disambiguate function disambiguates that array, if disambiguation is necessary.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I'm just saying; you wouldn't know an object is under it unless you looked underneath. <br/>And *I* don't want to write out the full &quot;get #obj# from under #obj#&quot;. <br/>I'd personally just type &quot;get #obj#&quot;. <br/>It's, IMO, the more natural thought you have in your brain. <br/>&quot;there's something under the bed - let's pick it up&quot;.</p></blockquote> <br/><br/>You have a point, there.  'get rug' could disambiguate by:<br/><br/>Which rug do you mean?<br/><br/>1. Green Rug<br/>2. Red Rug (under the bed)<br/>3. None of the above<br/><br/><blockquote><p>I kind of made the half-way guess that getobject returned a string-list (or array name - which I'd personally prefer.. I think you can use #(arrayname.in.string)[index]#).</p></blockquote><br/><br/>It returns an objects_found array.  (Which I find terribly useful for manipulating specific sets of objects).  The Disambiguate function disambiguates that array, if disambiguation is necessary.",
      "PostDate": "2006-07-08T12:34:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9401",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Oh, that's also another reason you can't use #@object#.. cos it automatically comes up with a disambiguation box (from what I remember reading in the help file).",
      "EditableFormat": "bbcode",
      "HTML": "Oh, that's also another reason you can't use #@object#.. cos it automatically comes up with a disambiguation box (from what I remember reading in the help file).",
      "PostDate": "2006-07-08T13:02:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9408",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Righto.\n\nI have lost, however, pronoun (it) functionality as a result.  I'll have to see if I can code my own pronoun parsing.",
      "EditableFormat": "bbcode",
      "HTML": "Righto.<br/><br/>I have lost, however, pronoun (it) functionality as a result.  I'll have to see if I can code my own pronoun parsing.",
      "PostDate": "2006-07-08T14:57:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9495",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Something I didn't think to mention:\n\nThe Flower Garden was originally written as a quick way to compare how the various IF systems handle ambiguity by default.  Since it looks like writing the Quest version may need a moderate amount of special coding, I'd appreciate seeing a most direct implementation (least amount of &quot;special handling&quot;) and a most polished implementation.",
      "EditableFormat": "bbcode",
      "HTML": "Something I didn't think to mention:<br/><br/>The Flower Garden was originally written as a quick way to compare how the various IF systems handle ambiguity by default.  Since it looks like writing the Quest version may need a moderate amount of special coding, I'd appreciate seeing a most direct implementation (least amount of &quot;special handling&quot;) and a most polished implementation.",
      "PostDate": "2006-07-09T23:02:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9501",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:12ugpl3p]The Flower Garden was originally written as a quick way to compare how the various IF systems handle ambiguity by default.[/quote:12ugpl3p] \n\nI [i:12ugpl3p]thought[/i:12ugpl3p] it was some form of standard...\n\n[quote:12ugpl3p]Since it looks like writing the Quest version may need a moderate amount of special coding, I'd appreciate seeing a most direct implementation (least amount of &quot;special handling&quot;) and a most polished implementation.[/quote:12ugpl3p]\n\nI'll check it out.  Anyone else going to?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>The Flower Garden was originally written as a quick way to compare how the various IF systems handle ambiguity by default.</p></blockquote> <br/><br/>I <span style=\"font-style:italic;\">thought</span> it was some form of standard...<br/><br/><blockquote><p>Since it looks like writing the Quest version may need a moderate amount of special coding, I'd appreciate seeing a most direct implementation (least amount of &quot;special handling&quot;) and a most polished implementation.</p></blockquote><br/><br/>I'll check it out.  Anyone else going to?",
      "PostDate": "2006-07-09T23:21:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9503",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Here's my stab at it - seems to cover everything:\n\n[code:wc4tp35j]\ndefine game &lt;Flowers&gt;\n\tasl-version &lt;350&gt;\n\tstart &lt;porch&gt;\n\tcommand &lt;smell #@thing#&gt; if action &lt;#thing#; smell&gt; then doaction &lt;#thing#; smell&gt; else msg &lt;It doesn't smell of anything&#46;&gt;\n\tcommand &lt;drop all&gt; for each object in &lt;inventory&gt; &#123;\n\t\tmove &lt;#quest&#46;thing#; #quest&#46;currentroom#&gt;\n\t\tmsg &lt;#@quest&#46;thing#&#58; dropped&#46;&gt;\n\t&#125;\nend define\n\ndefine room &lt;porch&gt;\n\tprefix &lt;the&gt;\n\tlook &lt;A plain porch&#46;  The garden is north of here, and the house is to the south&#46;&gt;\n\tnorth &lt;garden&gt;\n\tsouth msg &lt;But you want to stay out and sniff the flowers!&gt;\nend define\n\ndefine room &lt;garden&gt;\n\tlook &lt;A mostly empty garden; the house is back to the south&#46;&gt;\n\tprefix &lt;the&gt;\n\tsouth &lt;porch&gt;\n\n\tdefine object &lt;rose&gt;\n\t\tprefix &lt;a&gt;\n\t\ttake\n\t\tproperties &lt;hasbee&gt;\n\t\talt &lt;flower; white&gt;\n\t\tlook if property &lt;rose; hasbee&gt; then msg &lt;A bee crawls across the rose&#46;&gt; else msg &lt;It's a beautiful white rose&#46;&gt;\n\t\taction &lt;smell&gt; &#123;\n\t\t\tif property &lt;rose; hasbee&gt; then &#123;\n\t\t\t\tproperty &lt;rose; not hasbee&gt;\n\t\t\t\tmsg &lt;Ouch!  As you sniff the rose, you disturb a bee that was crawling on it&#46;  Angered, it stings you then flies away&#46;&gt;\n\t\t\t&#125;\n\t\t\telse msg &lt;You're wary of sniffing it again, after what happened last time&#46;&gt;\n\t\t&#125;\n\tend define\n\n\tdefine object &lt;daffodil&gt;\n\t\tprefix &lt;a&gt;\n\t\ttake\n\t\talt &lt;flower; yellow&gt;\n\t    \tlook &lt;A typical looking yellow daffodil&#46;&gt;\n\t    \taction &lt;smell&gt; msg &lt;It has the usual daffodil scent&#46;&gt;\n\tend define\n\n\tdefine object &lt;tulip&gt;\n\t\tprefix &lt;a&gt;\n\t\ttake\n\t\talt &lt;flower; red&gt;\n\t\tlook &lt;An ordinary red tulip&#46;&gt;\n\t    \taction &lt;smell&gt; msg &lt;It smells like a tulip&#46;&gt;\n\tend define\n\nend define\n[/code:wc4tp35j]",
      "EditableFormat": "bbcode",
      "HTML": "Here's my stab at it - seems to cover everything:<br/><br/><pre><code><br/>define game &lt;Flowers&gt;<br/>\tasl-version &lt;350&gt;<br/>\tstart &lt;porch&gt;<br/>\tcommand &lt;smell #@thing#&gt; if action &lt;#thing#; smell&gt; then doaction &lt;#thing#; smell&gt; else msg &lt;It doesn't smell of anything&#46;&gt;<br/>\tcommand &lt;drop all&gt; for each object in &lt;inventory&gt; &#123;<br/>\t\tmove &lt;#quest&#46;thing#; #quest&#46;currentroom#&gt;<br/>\t\tmsg &lt;#@quest&#46;thing#&#58; dropped&#46;&gt;<br/>\t&#125;<br/>end define<br/><br/>define room &lt;porch&gt;<br/>\tprefix &lt;the&gt;<br/>\tlook &lt;A plain porch&#46;  The garden is north of here, and the house is to the south&#46;&gt;<br/>\tnorth &lt;garden&gt;<br/>\tsouth msg &lt;But you want to stay out and sniff the flowers!&gt;<br/>end define<br/><br/>define room &lt;garden&gt;<br/>\tlook &lt;A mostly empty garden; the house is back to the south&#46;&gt;<br/>\tprefix &lt;the&gt;<br/>\tsouth &lt;porch&gt;<br/><br/>\tdefine object &lt;rose&gt;<br/>\t\tprefix &lt;a&gt;<br/>\t\ttake<br/>\t\tproperties &lt;hasbee&gt;<br/>\t\talt &lt;flower; white&gt;<br/>\t\tlook if property &lt;rose; hasbee&gt; then msg &lt;A bee crawls across the rose&#46;&gt; else msg &lt;It's a beautiful white rose&#46;&gt;<br/>\t\taction &lt;smell&gt; &#123;<br/>\t\t\tif property &lt;rose; hasbee&gt; then &#123;<br/>\t\t\t\tproperty &lt;rose; not hasbee&gt;<br/>\t\t\t\tmsg &lt;Ouch!  As you sniff the rose, you disturb a bee that was crawling on it&#46;  Angered, it stings you then flies away&#46;&gt;<br/>\t\t\t&#125;<br/>\t\t\telse msg &lt;You're wary of sniffing it again, after what happened last time&#46;&gt;<br/>\t\t&#125;<br/>\tend define<br/><br/>\tdefine object &lt;daffodil&gt;<br/>\t\tprefix &lt;a&gt;<br/>\t\ttake<br/>\t\talt &lt;flower; yellow&gt;<br/>\t    \tlook &lt;A typical looking yellow daffodil&#46;&gt;<br/>\t    \taction &lt;smell&gt; msg &lt;It has the usual daffodil scent&#46;&gt;<br/>\tend define<br/><br/>\tdefine object &lt;tulip&gt;<br/>\t\tprefix &lt;a&gt;<br/>\t\ttake<br/>\t\talt &lt;flower; red&gt;<br/>\t\tlook &lt;An ordinary red tulip&#46;&gt;<br/>\t    \taction &lt;smell&gt; msg &lt;It smells like a tulip&#46;&gt;<br/>\tend define<br/><br/>end define<br/></code></pre>",
      "PostDate": "2006-07-09T23:28:06+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9504",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Yeah, that does it.  No special coding there!  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, that does it.  No special coding there!  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2006-07-09T23:35:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9505",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I consider &quot;DROP ALL&quot; to be special coding, but I wasn't testing &quot;ALL&quot; here.",
      "EditableFormat": "bbcode",
      "HTML": "I consider &quot;DROP ALL&quot; to be special coding, but I wasn't testing &quot;ALL&quot; here.",
      "PostDate": "2006-07-09T23:50:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9508",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I assumed t'was irrelevant to the port, and could be ignored.",
      "EditableFormat": "bbcode",
      "HTML": "I assumed t'was irrelevant to the port, and could be ignored.",
      "PostDate": "2006-07-10T00:29:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9542",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "and how is that using ambiguity?",
      "EditableFormat": "bbcode",
      "HTML": "and how is that using ambiguity?",
      "PostDate": "2006-07-10T12:44:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9560",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Type 'smell flower'.\n\nAnd by the way, Freak, could you give a definition of what 'special coding' is?  Is it just text-editor coding as opposed to QDK interface coding?  Or is there some other distinction...",
      "EditableFormat": "bbcode",
      "HTML": "Type 'smell flower'.<br/><br/>And by the way, Freak, could you give a definition of what 'special coding' is?  Is it just text-editor coding as opposed to QDK interface coding?  Or is there some other distinction...",
      "PostDate": "2006-07-10T16:10:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9561",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Yeah, sorry - I didn't see the alt tag having &quot;flower&quot; in there.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, sorry - I didn't see the alt tag having &quot;flower&quot; in there.",
      "PostDate": "2006-07-10T18:40:19+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9564",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I thought I had a clear idea when I wrote that post, but I don't think I can express it concretely; it essentially boils down to not manually parsing.",
      "EditableFormat": "bbcode",
      "HTML": "I thought I had a clear idea when I wrote that post, but I don't think I can express it concretely; it essentially boils down to not manually parsing.",
      "PostDate": "2006-07-10T21:51:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "10291",
      "UserId": 0,
      "Username": "WalksLikeFlay",
      "UserAvatar": null,
      "UserGravatar": "d31a5e0970164bb2edbfa0683d34aad4",
      "EditableText": "Hello folks, am currently fiddling around with my first effort at a game. I've rooted through a range of IF systems, and whilst none of them seem perfect for me, I feel that I can work with Quest with reasonable competence. \n\nI've been trying to use this blank synonym method, but I can't quite get to grips with it.\n\nAs far as I can tell, nothing happens if I make, &quot;the&quot; a sysnonym for &quot;&quot; (nothing). If I want &quot;the&quot; to be pulled out of inputted commands, I have to make the synonym into &quot; &quot;  (a space rather than nothing at all). Is this bit correct, or am I doing something silly?\n\nThe problem is that if I have a range of words all being turned into &quot; &quot; (a space), the commands I want to use refuse to work.\n\nI'm trying to make the inputs &quot;look at city&quot;, &quot;look at the city&quot;, and so on, all respond to the command &quot;look city&quot;, the plan being that my game won't care how shoddy the input grammar is - it'll get the basic idea. However, I can't make &quot;look at the city&quot; equal &quot;look city&quot; - instead, by blanking the words into spaces, I end up with &quot;look   city&quot; (with three spaces). Is there a way to make Quest interpret any number of spaces as a single space?\n\nOr am I going about this in entirely the wrong way?",
      "EditableFormat": "bbcode",
      "HTML": "Hello folks, am currently fiddling around with my first effort at a game. I've rooted through a range of IF systems, and whilst none of them seem perfect for me, I feel that I can work with Quest with reasonable competence. <br/><br/>I've been trying to use this blank synonym method, but I can't quite get to grips with it.<br/><br/>As far as I can tell, nothing happens if I make, &quot;the&quot; a sysnonym for &quot;&quot; (nothing). If I want &quot;the&quot; to be pulled out of inputted commands, I have to make the synonym into &quot; &quot;  (a space rather than nothing at all). Is this bit correct, or am I doing something silly?<br/><br/>The problem is that if I have a range of words all being turned into &quot; &quot; (a space), the commands I want to use refuse to work.<br/><br/>I'm trying to make the inputs &quot;look at city&quot;, &quot;look at the city&quot;, and so on, all respond to the command &quot;look city&quot;, the plan being that my game won't care how shoddy the input grammar is - it'll get the basic idea. However, I can't make &quot;look at the city&quot; equal &quot;look city&quot; - instead, by blanking the words into spaces, I end up with &quot;look   city&quot; (with three spaces). Is there a way to make Quest interpret any number of spaces as a single space?<br/><br/>Or am I going about this in entirely the wrong way?",
      "PostDate": "2006-08-09T15:27:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "10341",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Erm, I can't really reply to that as such.\n\nBUT I would like to just go back to the second post in which I remember Quest doesn't like:\ncommand &lt;give #object# #object2#&gt; too much.\nIt'll look at &quot;give old man old book&quot; and seperate it into:\n&quot;give [old] [man old book]&quot;\n\nDoes it actually work or not?\n\nThe only way I can see this working IS by coding a command with &quot;the&quot;.\neg.\ncommand &lt;give #object# the #object2#&gt;",
      "EditableFormat": "bbcode",
      "HTML": "Erm, I can't really reply to that as such.<br/><br/>BUT I would like to just go back to the second post in which I remember Quest doesn't like:<br/>command &lt;give #object# #object2#&gt; too much.<br/>It'll look at &quot;give old man old book&quot; and seperate it into:<br/>&quot;give [old] [man old book]&quot;<br/><br/>Does it actually work or not?<br/><br/>The only way I can see this working IS by coding a command with &quot;the&quot;.<br/>eg.<br/>command &lt;give #object# the #object2#&gt;",
      "PostDate": "2006-08-10T13:01:21+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "14764",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Well, well.  It seems this handy trick no longer works with the newer versions of Quest.  Sad.  It seems that instead of 'the =' returning a null, it returns an actual &quot; &quot;.  This means that 'look at the door' turns into 'look at__door', whereas before it turned into 'look at_door'.  (_ = empty space.)  Also, when I try to parse out double-spaces (or triple, quadruple, etc.) from player commands in the beforeturn script, I can't seem to get single spaces stored in a string variable.  This is also mildy depressing.  Can anybody think of a solution?",
      "EditableFormat": "bbcode",
      "HTML": "Well, well.  It seems this handy trick no longer works with the newer versions of Quest.  Sad.  It seems that instead of 'the =' returning a null, it returns an actual &quot; &quot;.  This means that 'look at the door' turns into 'look at__door', whereas before it turned into 'look at_door'.  (_ = empty space.)  Also, when I try to parse out double-spaces (or triple, quadruple, etc.) from player commands in the beforeturn script, I can't seem to get single spaces stored in a string variable.  This is also mildy depressing.  Can anybody think of a solution?",
      "PostDate": "2008-03-08T23:50:02+00:00",
      "LastEditDate": null
    }
  ]
}
