{
  "Topic": {
    "TopicId": "pvallculcucugfjjrq30fa",
    "ForumId": "10",
    "Title": "How to know whether a firsttime {} has triggered or not?",
    "LastUpdated": "2022-07-23T22:19:32.9647225Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0079a702-00e4-4e77-b74d-8790ff82de74",
      "UserId": 581452,
      "Username": "Leviathon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b70281225e26c938429c720cbbe2a522?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello again!\r\n\r\nOnce again I'm working on updating my SaveLoadCode library and hit a snag. Right now, my library has no way of knowing whether or not a ```firsttime {}``` ```otherwise {}``` pair has triggered and I am looking to remedy that so they don't _re-trigger_ when a player loads their game with my library.\r\n\r\nI've figured out that the ```room.beforefirstenter``` and ```room.firstenter``` scripts trigger off of the ```room.visited``` attribute, the text processor commands ```{once: }``` and ```{notfirst: }``` functions key off of the ```game.textprocessor_seen``` dictionary parameter, but I can't seem to find _how_ the game knows whether a```firsttime {}``` and ```otherwise {}``` script has already triggered?\r\n\r\nIs there some other attribute that this information is stored under that I'm missing? Is it buried somewhere in the java code, and if so is there a way I can save/update it?\r\n\r\nHoping someone with better knowledge of the Quest source code can help me figure this out... ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello again!</p>\n<p>Once again I'm working on updating my SaveLoadCode library and hit a snag. Right now, my library has no way of knowing whether or not a <code>firsttime {}</code> <code>otherwise {}</code> pair has triggered and I am looking to remedy that so they don't <em>re-trigger</em> when a player loads their game with my library.</p>\n<p>I've figured out that the <code>room.beforefirstenter</code> and <code>room.firstenter</code> scripts trigger off of the <code>room.visited</code> attribute, the text processor commands <code>{once: }</code> and <code>{notfirst: }</code> functions key off of the <code>game.textprocessor_seen</code> dictionary parameter, but I can't seem to find <em>how</em> the game knows whether a<code>firsttime {}</code> and <code>otherwise {}</code> script has already triggered?</p>\n<p>Is there some other attribute that this information is stored under that I'm missing? Is it buried somewhere in the java code, and if so is there a way I can save/update it?</p>\n<p>Hoping someone with better knowledge of the Quest source code can help me figure this out...</p>\n\n",
      "PostDate": "2022-07-23T22:19:32.9647225Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "faca8255-2ea6-4c9d-8a74-7cd73545f749",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there some other attribute that this information is stored under that I'm missing? Is it buried somewhere in the java code, and if so is there a way I can save/update it?\r\n\r\nIt's not in the code anywhere, unfortunately. `firsttime` is a hard coded function, so is in the C# code, and would need a custom version of Quest to change how it works.\r\n\r\nYou can check if a `firsttime` block has fired – if you convert a script attribute to a string, you will see that any `firsttime` blocks are actually removed from the script after they fire (and `otherwise` blocks are replaced by their contents, without the `otherwise` keyword)\r\nThis change is actually made when the script attribute is prepared for saving – I'm not sure whether the change will be visible to your code after saving, or only after loading a saved game. This may differ between desktop and online versions of the player.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there some other attribute that this information is stored under that I'm missing? Is it buried somewhere in the java code, and if so is there a way I can save/update it?</p>\n</blockquote>\n<p>It's not in the code anywhere, unfortunately. <code>firsttime</code> is a hard coded function, so is in the C# code, and would need a custom version of Quest to change how it works.</p>\n<p>You can check if a <code>firsttime</code> block has fired – if you convert a script attribute to a string, you will see that any <code>firsttime</code> blocks are actually removed from the script after they fire (and <code>otherwise</code> blocks are replaced by their contents, without the <code>otherwise</code> keyword)<br>\nThis change is actually made when the script attribute is prepared for saving – I'm not sure whether the change will be visible to your code after saving, or only after loading a saved game. This may differ between desktop and online versions of the player.</p>\n\n",
      "PostDate": "2022-07-23T23:01:15.0106625Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d82b691-07ef-4d3b-a81b-a2e2f760130b",
      "UserId": 581452,
      "Username": "Leviathon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b70281225e26c938429c720cbbe2a522?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Interesting... Definitely sounds more efficient from a code standpoint, but unfortunately makes it harder for me...\r\n\r\nWas thinking about this for a bit, and I think one way I could get past this with my library would be to provide new firsttime/otherwise _functions_ that would be compatible with my library. Maybe something like...\r\n\r\n```\r\nfirsttime_saveload (uniqueid) {firstscript}\r\n  if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n    // Make it a string list so SaveLoadCode can more easily parse it\r\n    game.SaveLoadCode_firsttimetrigger = NewStringList()\r\n  }\r\n  if (not TypeOf(uniqueid)=\"string\") {\r\n    uniqueid = ToString(uniqueid)\r\n  }\r\n  if (not ListContains(game.SaveLoadCode_firsttimetrigger, uniqueid) {\r\n    // Then this should be the first time this is triggering\r\n    list add (game.SaveLoadCode_firsttimetrigger, uniqueid)\r\n    invoke(firstscript)\r\n  }\r\n  // Else, the script tied to this uniqueid has already triggered...\r\n```\r\n```\r\notherwise_saveload (uniqueid) {otherscript}\r\n  if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n    // Make it a string list so SaveLoadCode can more easily parse it\r\n    game.SaveLoadCode_firsttimetrigger = NewStringList()\r\n  }\r\n  if (not TypeOf(uniqueid)=\"string\") {\r\n    uniqueid = ToString(uniqueid)\r\n  }\r\n  if (ListContains(game.SaveLoadCode_firsttimetrigger, uniqueid) {\r\n    // Then the 'firsttime' paired to this 'otherwise' should have already triggered, run this otherwise\r\n    invoke(otherscript)\r\n  }\r\n```\r\n\r\nThe users would have to CTRL+F through their code and replace any firsttime/otherwise instances with these new ```firsttime_saveload ()``` and ```otherwise_saveload ()``` functions, and provide each pair with a unique id in order to remain compatible, but then as long as my library saves the ```game.SaveLoadCode_firsttimetrigger``` parameter (if it exists at time of saving), then as far as I can tell it should work...\r\n\r\nThis is the most efficient solution I could come up with at this time, but I'm open to suggestions if people have other ideas.",
      "EditableFormat": "markdown",
      "HTML": "<p>Interesting... Definitely sounds more efficient from a code standpoint, but unfortunately makes it harder for me...</p>\n<p>Was thinking about this for a bit, and I think one way I could get past this with my library would be to provide new firsttime/otherwise <em>functions</em> that would be compatible with my library. Maybe something like...</p>\n<pre><code>firsttime_saveload (uniqueid) {firstscript}\n  if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n    // Make it a string list so SaveLoadCode can more easily parse it\n    game.SaveLoadCode_firsttimetrigger = NewStringList()\n  }\n  if (not TypeOf(uniqueid)=\"string\") {\n    uniqueid = ToString(uniqueid)\n  }\n  if (not ListContains(game.SaveLoadCode_firsttimetrigger, uniqueid) {\n    // Then this should be the first time this is triggering\n    list add (game.SaveLoadCode_firsttimetrigger, uniqueid)\n    invoke(firstscript)\n  }\n  // Else, the script tied to this uniqueid has already triggered...\n</code></pre>\n<pre><code>otherwise_saveload (uniqueid) {otherscript}\n  if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n    // Make it a string list so SaveLoadCode can more easily parse it\n    game.SaveLoadCode_firsttimetrigger = NewStringList()\n  }\n  if (not TypeOf(uniqueid)=\"string\") {\n    uniqueid = ToString(uniqueid)\n  }\n  if (ListContains(game.SaveLoadCode_firsttimetrigger, uniqueid) {\n    // Then the 'firsttime' paired to this 'otherwise' should have already triggered, run this otherwise\n    invoke(otherscript)\n  }\n</code></pre>\n<p>The users would have to CTRL+F through their code and replace any firsttime/otherwise instances with these new <code>firsttime_saveload ()</code> and <code>otherwise_saveload ()</code> functions, and provide each pair with a unique id in order to remain compatible, but then as long as my library saves the <code>game.SaveLoadCode_firsttimetrigger</code> parameter (if it exists at time of saving), then as far as I can tell it should work...</p>\n<p>This is the most efficient solution I could come up with at this time, but I'm open to suggestions if people have other ideas.</p>\n\n",
      "PostDate": "2022-07-25T14:49:29.6280155Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ac84a61f-3f1c-4f29-9517-80da8536d037",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I might suggest allowing a 'default' ID to make those functions easier to use (so game designers don't have to keep track of what IDs they already used).\r\n\r\nFor example, you could have something like:\r\n```\r\n// If there's only one argument, use it as the script as well as (a stringified form) as the ID\r\nif (not IsDefined(\"firstscript\")) {\r\n  firstscript = uniqueid\r\n}\r\n```\r\nThis would work fine unless the same script is used in two firsttime functions, in which case the user can still give their own ID.\r\nOr to reduce the size of save files (saving massive strings in the list), you could hash the script in some way.\r\n\r\nFor the otherwise function, I've not tried it but I think you might have an issue. If you have a firsttime followed immediately by an otherwise with the same ID, it will run *both*, because the firsttime has already run before the otherwise is reached.\r\n\r\nYou could resolve this by having two separate lists, for firsttime and otherwise IDs. That way, your otherwise function will skip the first time it is reached, separate from the firsttime function.\r\n\r\nAlternatively, you could do it the way that the text processor `else` is handled: Have a global boolean, something like `game.SaveLoadCode_run_otherwise` which is set to true or false after running (or not) a firsttime script. Then the otherwise function could just check this – running only if the last-encountered firsttime didn't. Although this would prevent you from having an `otherwise` without a `firsttime`, possibly removing one of the advantages over the built-in system.\r\n\r\nIf you want to have otherwise work without firsttime, the (increasingly ugly) workaround might be making the list a dictionary, with its values true or false depending whether the corresponding otherwise should run. The first time a firsttime is encountered, it would set it to false. Subsequent times, it would remove it from the list and add it again as true. The firsttime function will run its script based on the presence or absence of a specific key in the dictionary; while the otherwise function would use the true/false value.\r\n\r\nHope that makes some kind of sense.",
      "EditableFormat": "markdown",
      "HTML": "<p>I might suggest allowing a 'default' ID to make those functions easier to use (so game designers don't have to keep track of what IDs they already used).</p>\n<p>For example, you could have something like:</p>\n<pre><code>// If there's only one argument, use it as the script as well as (a stringified form) as the ID\nif (not IsDefined(\"firstscript\")) {\n  firstscript = uniqueid\n}\n</code></pre>\n<p>This would work fine unless the same script is used in two firsttime functions, in which case the user can still give their own ID.<br>\nOr to reduce the size of save files (saving massive strings in the list), you could hash the script in some way.</p>\n<p>For the otherwise function, I've not tried it but I think you might have an issue. If you have a firsttime followed immediately by an otherwise with the same ID, it will run <em>both</em>, because the firsttime has already run before the otherwise is reached.</p>\n<p>You could resolve this by having two separate lists, for firsttime and otherwise IDs. That way, your otherwise function will skip the first time it is reached, separate from the firsttime function.</p>\n<p>Alternatively, you could do it the way that the text processor <code>else</code> is handled: Have a global boolean, something like <code>game.SaveLoadCode_run_otherwise</code> which is set to true or false after running (or not) a firsttime script. Then the otherwise function could just check this – running only if the last-encountered firsttime didn't. Although this would prevent you from having an <code>otherwise</code> without a <code>firsttime</code>, possibly removing one of the advantages over the built-in system.</p>\n<p>If you want to have otherwise work without firsttime, the (increasingly ugly) workaround might be making the list a dictionary, with its values true or false depending whether the corresponding otherwise should run. The first time a firsttime is encountered, it would set it to false. Subsequent times, it would remove it from the list and add it again as true. The firsttime function will run its script based on the presence or absence of a specific key in the dictionary; while the otherwise function would use the true/false value.</p>\n<p>Hope that makes some kind of sense.</p>\n\n",
      "PostDate": "2022-07-26T09:09:33.5161023Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c89d4c66-2cf4-4a09-867c-abaf1cf0c1b8",
      "UserId": 581452,
      "Username": "Leviathon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b70281225e26c938429c720cbbe2a522?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I took your advice and made some alterations:\r\n```\r\n<function name=\"first_saveload\" parameters=\"firstscript\">\r\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\r\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\r\n    }\r\n    uniqueid = ToString(firstscript)\r\n    if (Instr(uniqueid,\"{\")=1) {\r\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\r\n      // Replace left \"{\" with \"Script:\"\r\n      uniqueid = \"Script: \"+Right(uniqueid,LengthOf(uniqueid)-2)\r\n      // Remove right \"}\" entirely\r\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-2)+\" \"\r\n    }\r\n    if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {\r\n      // Then this should be the first time this is triggering\r\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"FirsttimeJustRun_TRUE\")\r\n      invoke (firstscript)\r\n    }\r\n    else {\r\n      // Else, the script tied to this uniqueid has already triggered...\r\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"FirsttimeJustRun_TRUE\")) {\r\n        // If this is second time through, then set value to \"\" so its otherwise script will run...\r\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n      }\r\n    }\r\n  </function>\r\n```\r\n```\r\n  <function name=\"other_saveload\" parameters=\"otherscript\">\r\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\r\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\r\n    }\r\n    uniqueid = ToString(otherscript)\r\n    if (Instr(uniqueid,\"{\")=1) {\r\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\r\n      // Replace left \"{\" with \"Script:\"\r\n      uniqueid = \"Script:\"+Right(uniqueid,LengthOf(uniqueid)-1)\r\n      // Remove right \"}\" entirely\r\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-1)\r\n    }\r\n    if (uniqueid in game.SaveLoadCode_firsttimetrigger) {\r\n      // Then the 'firsttime' paired to this 'otherwise' should have already triggered\r\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"\")) {\r\n        // Then the 'firsttime' script paired to this 'otherwise' didn't JUST run, so run the otherwise script...\r\n        invoke (otherscript)\r\n      }\r\n      else {\r\n        // Then the 'firsttime' script paired to this 'otherwise' JUST ran earlier in this code block. Set the dictionary value to \"\" so this otherwise will trigger on the NEXT pass...\r\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n      }\r\n    }\r\n    else {\r\n      // No 'firsttime' tied to this 'otherwise' has been run. Assume one does not exist and set the dictionary trigger value so this otherwise script will trigger on the next pass.\r\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n    }\r\n  </function>\r\n```\r\n\r\nPartway through coding, I think I caught onto what you were saying in your last post. So long as no two 'firsttime's or 'otherwise's have the same script, this _should_ work in **all** cases. I would love to have an optional ```uniqueid``` parameter that the user could input (similar to what you suggested in the beginning of your last post) to cover cases where their scripts _are_ identical, but Quest seems to take offense to user-made functions having optional parameters (it would throw an error \"expected 2 parameters but got 1\" before I even reached the ```if (not IsDefined(\"uniqueid\"))``` block)... Not sure if there's a way around that, but I ran into a bigger issue with this kind of implementation...\r\n\r\n**However**, the current, bigger issue is that for whatever reason, Quest does not seem to register that a given ```uniqueid``` has already been entered into the dictionary on the first pass. The added lines of code that will convert the \"{\" to \"Script:\" and \"}\" to \"\" were added in an attempt to remedy the issue, but even after doing so the issue persists...\r\n\r\nSee the following test game:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"FirsttimeTest\">\r\n    <gameid>971c06f8-72ec-46d5-98a7-697ed6c332ec</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2022</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <enter type=\"script\">\r\n      first_saveload() {\r\n        msg (\"firsttime1_room1\")\r\n      }\r\n      other_saveload() {\r\n        msg (\"otherwise1_room1\")\r\n      }\r\n      first_saveload() {\r\n        msg (\"firsttime2_room1\")\r\n      }\r\n      other_saveload() {\r\n        msg (\"otherwise2_room1\")\r\n      }\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"east\" to=\"room2\">\r\n      <inherit name=\"eastdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n      first_saveload() {\r\n        msg (\"firsttime_room2\")\r\n        first_saveload() {\r\n          msg (\"nested_firsttime_room2\")\r\n        }\r\n      }\r\n      other_saveload() {\r\n        msg (\"otherwise_room2\")\r\n      }\r\n    </enter>\r\n    <exit alias=\"west\" to=\"room\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n    <exit alias=\"south\" to=\"room3\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room3\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"room2\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <command>\r\n    <pattern>debug</pattern>\r\n    <script>\r\n      msg (ToString(game.SaveLoadCode_firsttimetrigger))\r\n    </script>\r\n  </command>\r\n  <function name=\"first_saveload\" parameters=\"firstscript\">\r\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\r\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\r\n    }\r\n    uniqueid = ToString(firstscript)\r\n    if (Instr(uniqueid,\"{\")=1) {\r\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\r\n      // Replace left \"{\" with \"Script:\"\r\n      uniqueid = \"Script: \"+Right(uniqueid,LengthOf(uniqueid)-2)\r\n      // Remove right \"}\" entirely\r\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-2)+\" \"\r\n    }\r\n    if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {\r\n      // Then this should be the first time this is triggering\r\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"FirsttimeJustRun_TRUE\")\r\n      invoke (firstscript)\r\n    }\r\n    else {\r\n      // Else, the script tied to this uniqueid has already triggered...\r\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"FirsttimeJustRun_TRUE\")) {\r\n        // If this is second time through, then set value to \"\" so its otherwise script will run...\r\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"other_saveload\" parameters=\"otherscript\">\r\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\r\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\r\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\r\n    }\r\n    uniqueid = ToString(otherscript)\r\n    if (Instr(uniqueid,\"{\")=1) {\r\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\r\n      // Replace left \"{\" with \"Script:\"\r\n      uniqueid = \"Script:\"+Right(uniqueid,LengthOf(uniqueid)-1)\r\n      // Remove right \"}\" entirely\r\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-1)\r\n    }\r\n    if (uniqueid in game.SaveLoadCode_firsttimetrigger) {\r\n      // Then the 'firsttime' paired to this 'otherwise' should have already triggered\r\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"\")) {\r\n        // Then the 'firsttime' script paired to this 'otherwise' didn't JUST run, so run the otherwise script...\r\n        invoke (otherscript)\r\n      }\r\n      else {\r\n        // Then the 'firsttime' script paired to this 'otherwise' JUST ran earlier in this code block. Set the dictionary value to \"\" so this otherwise will trigger on the NEXT pass...\r\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n      }\r\n    }\r\n    else {\r\n      // No 'firsttime' tied to this 'otherwise' has been run. Assume one does not exist and set the dictionary trigger value so this otherwise script will trigger on the next pass.\r\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\r\n    }\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n\r\nBy using the ```debug``` command to print the contents of ```game.SaveLoadCode_firsttimetrigger```, you can see that \r\n1. On the first pass of a room, it properly executes the 'firsttime' block, and does not execute the otherwise block. Before I added the code to convert \"{\" to \"Script:\", it used to always save this first uniqueid string as ```\"{ script }\"```.  You can comment out the ```if (Instr(uniqueid,\"{\")=1) { ... }``` block of code in my test game, then run the ```debug``` command after starting to see what I mean...\r\n\r\n2. On second pass of a room, the ```if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {``` block **still** triggers, (even though it shouldn't, as far as I can tell), entering in a seemingly identical key and triggering the 'firsttime' block a second time. Even before I added the code to convert \"{\" to \"Script:\", it used to always save this _second_ uniqueid string as ```\"Script: script\"```.  The otherwise block still properly triggers on the second pass, perhaps because it is tied to the first, script-like ```uniqueid``` entry?\r\n\r\n3. On the third pass, nothing triggers (not even the otherwise block). Not sure why even the otherwise block doesn't trigger... \r\n\r\n4. Then on the fourth pass or greater, the otherwise blocks continue to trigger, as-expected...\r\n\r\nAm I hitting some kind of internal race condition here, or is there something else I'm missing? \r\n\r\nI imagine if I made a user-entered ```uniqueid``` parameter required, I could avoid these issues potentially, but making it optional/not-required _would_ make this much easier to implement into existing games, so I'm tempted to try to figure this out, if possible...",
      "EditableFormat": "markdown",
      "HTML": "<p>So I took your advice and made some alterations:</p>\n<pre><code>&lt;function name=\"first_saveload\" parameters=\"firstscript\"&gt;\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\n    }\n    uniqueid = ToString(firstscript)\n    if (Instr(uniqueid,\"{\")=1) {\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\n      // Replace left \"{\" with \"Script:\"\n      uniqueid = \"Script: \"+Right(uniqueid,LengthOf(uniqueid)-2)\n      // Remove right \"}\" entirely\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-2)+\" \"\n    }\n    if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {\n      // Then this should be the first time this is triggering\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"FirsttimeJustRun_TRUE\")\n      invoke (firstscript)\n    }\n    else {\n      // Else, the script tied to this uniqueid has already triggered...\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"FirsttimeJustRun_TRUE\")) {\n        // If this is second time through, then set value to \"\" so its otherwise script will run...\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"other_saveload\" parameters=\"otherscript\"&gt;\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\n    }\n    uniqueid = ToString(otherscript)\n    if (Instr(uniqueid,\"{\")=1) {\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\n      // Replace left \"{\" with \"Script:\"\n      uniqueid = \"Script:\"+Right(uniqueid,LengthOf(uniqueid)-1)\n      // Remove right \"}\" entirely\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-1)\n    }\n    if (uniqueid in game.SaveLoadCode_firsttimetrigger) {\n      // Then the 'firsttime' paired to this 'otherwise' should have already triggered\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"\")) {\n        // Then the 'firsttime' script paired to this 'otherwise' didn't JUST run, so run the otherwise script...\n        invoke (otherscript)\n      }\n      else {\n        // Then the 'firsttime' script paired to this 'otherwise' JUST ran earlier in this code block. Set the dictionary value to \"\" so this otherwise will trigger on the NEXT pass...\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n      }\n    }\n    else {\n      // No 'firsttime' tied to this 'otherwise' has been run. Assume one does not exist and set the dictionary trigger value so this otherwise script will trigger on the next pass.\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n    }\n  &lt;/function&gt;\n</code></pre>\n<p>Partway through coding, I think I caught onto what you were saying in your last post. So long as no two 'firsttime's or 'otherwise's have the same script, this <em>should</em> work in <strong>all</strong> cases. I would love to have an optional <code>uniqueid</code> parameter that the user could input (similar to what you suggested in the beginning of your last post) to cover cases where their scripts <em>are</em> identical, but Quest seems to take offense to user-made functions having optional parameters (it would throw an error \"expected 2 parameters but got 1\" before I even reached the <code>if (not IsDefined(\"uniqueid\"))</code> block)... Not sure if there's a way around that, but I ran into a bigger issue with this kind of implementation...</p>\n<p><strong>However</strong>, the current, bigger issue is that for whatever reason, Quest does not seem to register that a given <code>uniqueid</code> has already been entered into the dictionary on the first pass. The added lines of code that will convert the \"{\" to \"Script:\" and \"}\" to \"\" were added in an attempt to remedy the issue, but even after doing so the issue persists...</p>\n<p>See the following test game:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"FirsttimeTest\"&gt;\n    &lt;gameid&gt;971c06f8-72ec-46d5-98a7-697ed6c332ec&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2022&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;enter type=\"script\"&gt;\n      first_saveload() {\n        msg (\"firsttime1_room1\")\n      }\n      other_saveload() {\n        msg (\"otherwise1_room1\")\n      }\n      first_saveload() {\n        msg (\"firsttime2_room1\")\n      }\n      other_saveload() {\n        msg (\"otherwise2_room1\")\n      }\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"east\" to=\"room2\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n      first_saveload() {\n        msg (\"firsttime_room2\")\n        first_saveload() {\n          msg (\"nested_firsttime_room2\")\n        }\n      }\n      other_saveload() {\n        msg (\"otherwise_room2\")\n      }\n    &lt;/enter&gt;\n    &lt;exit alias=\"west\" to=\"room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"south\" to=\"room3\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"room2\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;command&gt;\n    &lt;pattern&gt;debug&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (ToString(game.SaveLoadCode_firsttimetrigger))\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"first_saveload\" parameters=\"firstscript\"&gt;\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\n    }\n    uniqueid = ToString(firstscript)\n    if (Instr(uniqueid,\"{\")=1) {\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\n      // Replace left \"{\" with \"Script:\"\n      uniqueid = \"Script: \"+Right(uniqueid,LengthOf(uniqueid)-2)\n      // Remove right \"}\" entirely\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-2)+\" \"\n    }\n    if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {\n      // Then this should be the first time this is triggering\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"FirsttimeJustRun_TRUE\")\n      invoke (firstscript)\n    }\n    else {\n      // Else, the script tied to this uniqueid has already triggered...\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"FirsttimeJustRun_TRUE\")) {\n        // If this is second time through, then set value to \"\" so its otherwise script will run...\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"other_saveload\" parameters=\"otherscript\"&gt;\n    if (not HasAttribute(game, \"SaveLoadCode_firsttimetrigger\")) {\n      // Make it a string dictionary so SaveLoadCode can more easily parse it\n      game.SaveLoadCode_firsttimetrigger = NewStringDictionary()\n    }\n    uniqueid = ToString(otherscript)\n    if (Instr(uniqueid,\"{\")=1) {\n      // Then uniqueid was likely saved as \"{ script }\" rather than \"Script: script\", which can lead to errors on subsequent visits. Let's change that...\n      // Replace left \"{\" with \"Script:\"\n      uniqueid = \"Script:\"+Right(uniqueid,LengthOf(uniqueid)-1)\n      // Remove right \"}\" entirely\n      uniqueid = Left(uniqueid,LengthOf(uniqueid)-1)\n    }\n    if (uniqueid in game.SaveLoadCode_firsttimetrigger) {\n      // Then the 'firsttime' paired to this 'otherwise' should have already triggered\n      if (Equal(DictionaryItem(game.SaveLoadCode_firsttimetrigger,uniqueid),\"\")) {\n        // Then the 'firsttime' script paired to this 'otherwise' didn't JUST run, so run the otherwise script...\n        invoke (otherscript)\n      }\n      else {\n        // Then the 'firsttime' script paired to this 'otherwise' JUST ran earlier in this code block. Set the dictionary value to \"\" so this otherwise will trigger on the NEXT pass...\n        DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n      }\n    }\n    else {\n      // No 'firsttime' tied to this 'otherwise' has been run. Assume one does not exist and set the dictionary trigger value so this otherwise script will trigger on the next pass.\n      DictionaryAdd (game.SaveLoadCode_firsttimetrigger, uniqueid, \"\")\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<p>By using the <code>debug</code> command to print the contents of <code>game.SaveLoadCode_firsttimetrigger</code>, you can see that</p>\n<ol>\n<li>\n<p>On the first pass of a room, it properly executes the 'firsttime' block, and does not execute the otherwise block. Before I added the code to convert \"{\" to \"Script:\", it used to always save this first uniqueid string as <code>\"{ script }\"</code>.  You can comment out the <code>if (Instr(uniqueid,\"{\")=1) { ... }</code> block of code in my test game, then run the <code>debug</code> command after starting to see what I mean...</p>\n</li>\n<li>\n<p>On second pass of a room, the <code>if (not uniqueid in game.SaveLoadCode_firsttimetrigger) {</code> block <strong>still</strong> triggers, (even though it shouldn't, as far as I can tell), entering in a seemingly identical key and triggering the 'firsttime' block a second time. Even before I added the code to convert \"{\" to \"Script:\", it used to always save this <em>second</em> uniqueid string as <code>\"Script: script\"</code>.  The otherwise block still properly triggers on the second pass, perhaps because it is tied to the first, script-like <code>uniqueid</code> entry?</p>\n</li>\n<li>\n<p>On the third pass, nothing triggers (not even the otherwise block). Not sure why even the otherwise block doesn't trigger...</p>\n</li>\n<li>\n<p>Then on the fourth pass or greater, the otherwise blocks continue to trigger, as-expected...</p>\n</li>\n</ol>\n<p>Am I hitting some kind of internal race condition here, or is there something else I'm missing?</p>\n<p>I imagine if I made a user-entered <code>uniqueid</code> parameter required, I could avoid these issues potentially, but making it optional/not-required <em>would</em> make this much easier to implement into existing games, so I'm tempted to try to figure this out, if possible...</p>\n\n",
      "PostDate": "2022-08-08T23:08:57.6273155Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "985d8a27-064b-46fa-b30e-84c88eb2ef09",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Quest seems to take offense to user-made functions having optional parameters (it would throw an error \"expected 2 parameters but got 1\"\r\n\r\nOh, I forgot about that.\r\nYeah; functions can have optional parameters only if used within an expression (so `somevariable = MyFunction ()` can have optional parameters, but `MyFunction ()` on its own line can't.\r\n\r\nSorry, that completely slipped my mind for a minute.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Quest seems to take offense to user-made functions having optional parameters (it would throw an error \"expected 2 parameters but got 1\"</p>\n</blockquote>\n<p>Oh, I forgot about that.<br>\nYeah; functions can have optional parameters only if used within an expression (so <code>somevariable = MyFunction ()</code> can have optional parameters, but <code>MyFunction ()</code> on its own line can't.</p>\n<p>Sorry, that completely slipped my mind for a minute.</p>\n\n",
      "PostDate": "2022-08-09T07:12:22.6519312Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c01e71b4-172c-423a-81d8-cf445e6a4704",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> entering in a seemingly identical key\r\n\r\nThat's interesting; as a dictionary shouldn't be able to have two identical keys.\r\nIf you have the desktop application, could you save the game after this using Quest's built-in save function, and look at the two strings in the save file? It might be easier to compare them in a text editor, to see if one of them contains extra spaces or non-printing characters or something. Knowing what's causing this problem should make it easier to debug.\r\n\r\nI'll try to remember to take a look at this once the current wave of panic abates.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>entering in a seemingly identical key</p>\n</blockquote>\n<p>That's interesting; as a dictionary shouldn't be able to have two identical keys.<br>\nIf you have the desktop application, could you save the game after this using Quest's built-in save function, and look at the two strings in the save file? It might be easier to compare them in a text editor, to see if one of them contains extra spaces or non-printing characters or something. Knowing what's causing this problem should make it easier to debug.</p>\n<p>I'll try to remember to take a look at this once the current wave of panic abates.</p>\n\n",
      "PostDate": "2022-08-09T07:58:29.6070925Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
