{
  "Topic": {
    "TopicId": "rs-gombqmkq4dyw5wgswaq",
    "ForumId": "10",
    "Title": "Helping with character speaking interaction.",
    "LastUpdated": "2019-09-21T02:57:38.598982Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "66626e30-03f5-4f3d-a082-a586e3aa90e1",
      "UserId": 35084,
      "Username": "orgomemberxv",
      "AvatarUrl": "https://secure.gravatar.com/avatar/000b2f620372bb28a295d2c376736488?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is problably answered somewhere in the fourms but i'm trying to get this section of code to work and it does but the switch statement doesn't impliment the message script when any of the options are chosen the menu just dissapperes it's probably something very easy to fix and i haven't found out how yet. Maybe it's cause they are strings? Or something like that... maybe I need a dictionary instead? To hold the alias's maybe... \r\n\r\n\r\n```options = NewStringList()\r\nlist add (options, \"\\\"Hey {Player1.alias}!\\\"\")\r\nlist add (options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\r\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\r\n  switch (result) {\r\n    case (\"{Player1.alias}? Shouldn't you be inside already?\") {\r\n      msg (\"tesst<br/>\")\r\n    }\r\n    case (\"Hey {Player1.alias}!\") {\r\n      msg (\"test \")\r\n    }\r\n }\r\n} ``",
      "EditableFormat": "markdown",
      "HTML": "<p>This is problably answered somewhere in the fourms but i'm trying to get this section of code to work and it does but the switch statement doesn't impliment the message script when any of the options are chosen the menu just dissapperes it's probably something very easy to fix and i haven't found out how yet. Maybe it's cause they are strings? Or something like that... maybe I need a dictionary instead? To hold the alias's maybe...</p>\n<pre><code>list add (options, \"\\\"Hey {Player1.alias}!\\\"\")\nlist add (options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\n  switch (result) {\n    case (\"{Player1.alias}? Shouldn't you be inside already?\") {\n      msg (\"tesst&lt;br/&gt;\")\n    }\n    case (\"Hey {Player1.alias}!\") {\n      msg (\"test \")\n    }\n }\n} ``\n</code></pre>\n\n",
      "PostDate": "2019-09-21T02:57:38.598982Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "600e7caa-0596-4792-9be4-aa1ce25416e5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When the messages are sent to the player, the text processor runs on them and converts `{Player1.alias}` to whatever the alias is.\r\n\r\nIf the player types the number of the option in the menu, then `result` will be the string `\"Hey {Player1.alias}!\"` (which was stored ). If they click on the option, then `result` will be something like `\"Hey Bob!\"`.\r\n\r\n**Solution 1**: Force the text processor to run on the string, so that the `case` statements match the string that is sent back from the browser.\r\n\r\nExample:\r\n```\r\n    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")) {\r\n```\r\nThe downside of this is that typing the option numbers will no longer work (though I don't think most players know they can do that anyway).\r\n\r\n<hr/>\r\n\r\n**Solution 1a:** Use both the text processor, and the regular string, to catch both options.\r\nFor example:\r\n```\r\n    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\"), \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\r\n```\r\nHowever, this means that if you correct a typo in one of the options, or change it at all, you now have to make the change in 3 places instead of 2. That's how mistakes creep in later in development; and I think you should try to avoid mistakes if possible.\r\n\r\n<hr/>\r\n\r\n**Solution 1b:** Make sure the text processor runs earlier, so that `result` is the same in both cases.\r\nFor example:\r\n```\r\nlist add (options, ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\"))\r\n```\r\nand\r\n```\r\n    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")) {\r\n```\r\nBut that's still a little unwieldy.\r\n\r\n<hr />\r\n\r\n**Solution 2:** (the programmer's way of doing it)\r\n\r\nMy preferred solution would be to use the dictionary version of ShowMenu:\r\n```\r\noptions = NewStringDictionary()\r\ndictionary add (options, \"greeting\", \"\\\"Hey {Player1.alias}!\\\"\")\r\ndictionary add (options, \"inside\", \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\r\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\r\n  switch (result) {\r\n    case (\"inside\") {\r\n      msg (\"tesst<br/>\")\r\n    }\r\n    case (\"greeting\") {\r\n      msg (\"test \")\r\n    }\r\n  }\r\n} \r\n```\r\nYou can give the options whatever simple labels you want, and the player never sees them. That also means that if you come to change the spelling of one of the options, or some other cosmetic change later in development, you only need to change it in one place. A lot easier to avoid bugs that way.",
      "EditableFormat": "markdown",
      "HTML": "<p>When the messages are sent to the player, the text processor runs on them and converts <code>{Player1.alias}</code> to whatever the alias is.</p>\n<p>If the player types the number of the option in the menu, then <code>result</code> will be the string <code>\"Hey {Player1.alias}!\"</code> (which was stored ). If they click on the option, then <code>result</code> will be something like <code>\"Hey Bob!\"</code>.</p>\n<p><strong>Solution 1</strong>: Force the text processor to run on the string, so that the <code>case</code> statements match the string that is sent back from the browser.</p>\n<p>Example:</p>\n<pre><code>    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")) {\n</code></pre>\n<p>The downside of this is that typing the option numbers will no longer work (though I don't think most players know they can do that anyway).</p>\n<hr>\n<p><strong>Solution 1a:</strong> Use both the text processor, and the regular string, to catch both options.<br>\nFor example:</p>\n<pre><code>    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\"), \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\n</code></pre>\n<p>However, this means that if you correct a typo in one of the options, or change it at all, you now have to make the change in 3 places instead of 2. That's how mistakes creep in later in development; and I think you should try to avoid mistakes if possible.</p>\n<hr>\n<p><strong>Solution 1b:</strong> Make sure the text processor runs earlier, so that <code>result</code> is the same in both cases.<br>\nFor example:</p>\n<pre><code>list add (options, ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\"))\n</code></pre>\n<p>and</p>\n<pre><code>    case (ProcessText (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")) {\n</code></pre>\n<p>But that's still a little unwieldy.</p>\n<hr>\n<p><strong>Solution 2:</strong> (the programmer's way of doing it)</p>\n<p>My preferred solution would be to use the dictionary version of ShowMenu:</p>\n<pre><code>options = NewStringDictionary()\ndictionary add (options, \"greeting\", \"\\\"Hey {Player1.alias}!\\\"\")\ndictionary add (options, \"inside\", \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\n  switch (result) {\n    case (\"inside\") {\n      msg (\"tesst&lt;br/&gt;\")\n    }\n    case (\"greeting\") {\n      msg (\"test \")\n    }\n  }\n} \n</code></pre>\n<p>You can give the options whatever simple labels you want, and the player never sees them. That also means that if you come to change the spelling of one of the options, or some other cosmetic change later in development, you only need to change it in one place. A lot easier to avoid bugs that way.</p>\n\n",
      "PostDate": "2019-09-21T09:46:38.485336Z",
      "LastEditDate": "2019-09-21T15:09:36.9483171Z",
      "link": null
    },
    {
      "PostId": "d4f315de-742a-49ec-be41-143daec25c10",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'cases' must match up exactly with your String List's string options/items:\r\n\r\n```\r\n\"\\\"Hey {Player1.alias}!\\\"\"\r\n\r\nis NOT the same as\r\n\r\n\"Hey {Player1.alias}!\"\r\n\r\nthe top line (string value), has double quote characters in the string, via the double quote escape command: \\\"\r\n\r\nwhereas, the below line (string value) does NOT have double quote characters in the string\r\n\r\n-------\r\n\r\nA String Value, is anything encased within double quotes, some examples:\r\n\r\n\"hi\"\r\n\"123\"\r\n\"hi my name is HK, what is your name?\"\r\n\"hi123\"\r\n\"hi_123\"\r\n\r\n// the displayment/output of the above\r\nhi\r\n123\r\nhi my name is HK, what is your name?\r\nhi123\r\nhi_123\r\n\r\nthe outermost double quotes, tell quest that it is a String Value\r\n\r\nso, in order to have double quotes as part of the String Value itself, you must use the double quote escape command, \\\", which tells quest that the double quotes are to be part of the string itself, and not as double quotes for quest's internal parsing of it, and of course it must be within the outermost double quotes:\r\n\r\n\"\\\"hi\\\"\"\r\n\"\\\"123\\\"\"\r\n\"\\\"hi my name is HK, what is your name?\\\"\"\r\n\"1\\\"2\\\"3\"\r\n\"hi my \\\"name\\\" is \\\"HK\\\", what is \\\"your\\\" name?\"\r\n\r\n// the displayment/output of the above\r\n\"hi\"\r\n\"123\"\r\n\"hi my name is HK, what is your name?\"\r\n1\"2\"3\r\nhi my \"name\" is \"HK\", what is \"your\" name?\r\n\r\nso....\r\n\r\n// String Value: \"hi\"\r\n// output/displayment: hi\r\n\r\nis NOT the same as:\r\n\r\n// String Value: \"\\\"hi\\\"\"\r\n// output/displayment: \"hi\"\r\n```\r\n\r\n----------------\r\n\r\nso, here's the fix:\r\n\r\n```\r\noptions = NewStringList () // possibly needed if quest doesn't already know that the 'options' is a String List, otherwise, you can ignore this line (don't put it in)\r\n\r\nlist add (options, \"\\\"Hey {Player1.alias}!\\\"\")\r\nlist add (options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\r\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\r\n  switch (result) {\r\n    case (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\r\n      msg (\"test 1<br/>\")\r\n    }\r\n    case (\"\\\"Hey {Player1.alias}!\\\"\") {\r\n      msg (\"test 2\")\r\n    }\r\n }\r\n}\r\n```\r\n\r\n-------\r\n\r\nalso, you may want to make your String List be an Attribute (so it can be used/re-used anywhere/anytime), an example:\r\n\r\n```\r\ncreate (\"example_object\") // this just creates an Object for this example, but you can use whatever Object you want, such as the 'game' Object, or if it's dialogue specific to a npc, then use that npc as the Object (holding its own dialogue list of options, this is what Attribute VARIABLES are: they're contained within an Object, so as long as the Object exists or still exists, you can use it anywhere, over and over again, whereas a Variable VARIABLE, like your 'option', only exists within that scripting that it's used for and only when the scripting is being used/done/activating)\r\n\r\nexample_object.options = NewStringList () // possibly needed if quest doesn't already know that the 'example_object.options' is a String List Attribute, otherwise, you can ignore this line (don't put it in)\r\n\r\nlist add (example_object.options, \"\\\"Hey {Player1.alias}!\\\"\")\r\nlist add (example_object.options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\r\nShowMenu (\"\\\"Your Response?\\\"\", example_object.options, false) {\r\n  switch (result) {\r\n    case (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\r\n      msg (\"test 1<br/>\")\r\n    }\r\n    case (\"\\\"Hey {Player1.alias}!\\\"\") {\r\n      msg (\"test 2\")\r\n    }\r\n }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'cases' must match up exactly with your String List's string options/items:</p>\n<pre><code>\"\\\"Hey {Player1.alias}!\\\"\"\n\nis NOT the same as\n\n\"Hey {Player1.alias}!\"\n\nthe top line (string value), has double quote characters in the string, via the double quote escape command: \\\"\n\nwhereas, the below line (string value) does NOT have double quote characters in the string\n\n-------\n\nA String Value, is anything encased within double quotes, some examples:\n\n\"hi\"\n\"123\"\n\"hi my name is HK, what is your name?\"\n\"hi123\"\n\"hi_123\"\n\n// the displayment/output of the above\nhi\n123\nhi my name is HK, what is your name?\nhi123\nhi_123\n\nthe outermost double quotes, tell quest that it is a String Value\n\nso, in order to have double quotes as part of the String Value itself, you must use the double quote escape command, \\\", which tells quest that the double quotes are to be part of the string itself, and not as double quotes for quest's internal parsing of it, and of course it must be within the outermost double quotes:\n\n\"\\\"hi\\\"\"\n\"\\\"123\\\"\"\n\"\\\"hi my name is HK, what is your name?\\\"\"\n\"1\\\"2\\\"3\"\n\"hi my \\\"name\\\" is \\\"HK\\\", what is \\\"your\\\" name?\"\n\n// the displayment/output of the above\n\"hi\"\n\"123\"\n\"hi my name is HK, what is your name?\"\n1\"2\"3\nhi my \"name\" is \"HK\", what is \"your\" name?\n\nso....\n\n// String Value: \"hi\"\n// output/displayment: hi\n\nis NOT the same as:\n\n// String Value: \"\\\"hi\\\"\"\n// output/displayment: \"hi\"\n</code></pre>\n<hr>\n<p>so, here's the fix:</p>\n<pre><code>options = NewStringList () // possibly needed if quest doesn't already know that the 'options' is a String List, otherwise, you can ignore this line (don't put it in)\n\nlist add (options, \"\\\"Hey {Player1.alias}!\\\"\")\nlist add (options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\nShowMenu (\"\\\"Your Response?\\\"\", options, false) {\n  switch (result) {\n    case (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\n      msg (\"test 1&lt;br/&gt;\")\n    }\n    case (\"\\\"Hey {Player1.alias}!\\\"\") {\n      msg (\"test 2\")\n    }\n }\n}\n</code></pre>\n<hr>\n<p>also, you may want to make your String List be an Attribute (so it can be used/re-used anywhere/anytime), an example:</p>\n<pre><code>create (\"example_object\") // this just creates an Object for this example, but you can use whatever Object you want, such as the 'game' Object, or if it's dialogue specific to a npc, then use that npc as the Object (holding its own dialogue list of options, this is what Attribute VARIABLES are: they're contained within an Object, so as long as the Object exists or still exists, you can use it anywhere, over and over again, whereas a Variable VARIABLE, like your 'option', only exists within that scripting that it's used for and only when the scripting is being used/done/activating)\n\nexample_object.options = NewStringList () // possibly needed if quest doesn't already know that the 'example_object.options' is a String List Attribute, otherwise, you can ignore this line (don't put it in)\n\nlist add (example_object.options, \"\\\"Hey {Player1.alias}!\\\"\")\nlist add (example_object.options, \"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\")\nShowMenu (\"\\\"Your Response?\\\"\", example_object.options, false) {\n  switch (result) {\n    case (\"\\\"{Player1.alias}? Shouldn't you be inside already?\\\"\") {\n      msg (\"test 1&lt;br/&gt;\")\n    }\n    case (\"\\\"Hey {Player1.alias}!\\\"\") {\n      msg (\"test 2\")\n    }\n }\n}\n</code></pre>\n\n",
      "PostDate": "2019-09-21T10:10:25.2554667Z",
      "LastEditDate": "2019-09-21T10:17:55.3628582Z",
      "link": null
    },
    {
      "PostId": "be449fc1-69ff-44f3-9663-717f39043238",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Please change\r\n```\r\n    }\r\n    case (\"Hey {Player1.alias}!\") {\r\n      msg (\"test \")\r\n    }\r\n }\r\n} ``\r\n```\r\nTo\r\n```\r\n    }\r\n    case (\"Hey {Player1.alias}!\") {\r\n      msg (\"test \")\r\n    }\r\n  }\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Please change</p>\n<pre><code>    }\n    case (\"Hey {Player1.alias}!\") {\n      msg (\"test \")\n    }\n }\n} ``\n</code></pre>\n<p>To</p>\n<pre><code>    }\n    case (\"Hey {Player1.alias}!\") {\n      msg (\"test \")\n    }\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2019-09-22T01:30:57.6107279Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
