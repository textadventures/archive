{
  "Topic": {
    "TopicId": "4188",
    "ForumId": "10",
    "Title": "Using random chance with more than two potential outcomes",
    "LastUpdated": "2014-02-12T04:41:52+00:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "27828",
      "UserId": 0,
      "Username": "michaelsahn",
      "UserAvatar": null,
      "UserGravatar": "3a9802e1b3c8187c840fa757ffeb896b",
      "EditableText": "I'd like to randomly display one of three messages when the player enters a room.  I'm using Random Chance to set percentage, but I'm unsure of how to do this with three potential outcomes.\n\nThis is how I'm doing it for two potential outcomes:\n\n[code:1esh4u0r]if (RandomChance(50)) {\n  msg (&quot;test1&quot;)\n}\nelse {\n  msg (&quot;text2&quot;)\n}[/code:1esh4u0r]\n\nHow do I do this for three or more potential outcomes?  I've search forum, wiki and library for answers/examples but perhaps this is too simple a question to be addressed!\n\nThanks -\n\nMike",
      "EditableFormat": "bbcode",
      "HTML": "I'd like to randomly display one of three messages when the player enters a room.  I'm using Random Chance to set percentage, but I'm unsure of how to do this with three potential outcomes.<br/><br/>This is how I'm doing it for two potential outcomes:<br/><br/><pre><code>if (RandomChance(50)) {<br/>  msg (&quot;test1&quot;)<br/>}<br/>else {<br/>  msg (&quot;text2&quot;)<br/>}</code></pre><br/><br/>How do I do this for three or more potential outcomes?  I've search forum, wiki and library for answers/examples but perhaps this is too simple a question to be addressed!<br/><br/>Thanks -<br/><br/>Mike",
      "PostDate": "2014-02-11T22:26:27+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27829",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "quick note:\n\n&quot;if (RandomChance (Value))&quot; is the exact same thing (though it's a shortened, ie quest-code-understood, form of) &quot;if (RandomChance (Value) = true)&quot;\n\nthis is the same thing for Boolean Attributes:\n\n&quot;Object.visible&quot; is the same as &quot;Object.visible=true&quot;\n\nif you don't put the &quot;=false&quot;, then it's understood to be &quot;=true&quot;, by the quest engine\n\n(I just like to write it out in full, for new people, and myself too, to see it correctly, to avoid any confusion that they, or me, may have, lol)\n\n-----------------------\n\n&quot;RandomChance&quot; is for, using an analogy, '1/1,000,000,000,000 chance of winning the lottery' = % chance of just a single choice being true (of occuring, ie 'winning')\n\nexample:\n\nin a shuffled deck of cards, the chance of the top card being an Ace of Spades = whatever you set the percent &quot;Value (0 through 100)&quot; to in &quot;RandomChance (Value)&quot;, you SET~DECIDE the ODDS of that single 'card' (choice~option~selection).\n\nif (RandomChance (100) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; // whatever script_2\n}\n// script_1 will always be executed, lol\n\nif (RandomChance (99) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; if (RandomChance (100) = true) {\n-&gt;-&gt; // whatever script_2\n-&gt; }\n}\n// there's a 99% chance that script_1 will be executed, but should the &quot;1%&quot; happen (lol), then there's a 100% chance that script_2 will be executed\n\nif (RandomChance (99) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; if (RandomChance (50) = true) {\n-&gt;-&gt; // whatever script_2\n-&gt; }\n}\n// there's a 99% chance that script_1 will be executed, but should the &quot;1%&quot; happen (lol), then there's a 50% chance that script_2 will be executed\n\nif (RandomChance (99) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; if (RandomChance (0) = true) {\n-&gt;-&gt; // whatever script_2\n-&gt; }\n}\n// there's a 99% chance that script_1 will be executed, and despite should the &quot;1%&quot; happen (lol), script_2 will *NEVER* be executed anyways\n\nif (RandomChance (100) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; if (RandomChance (100) = true) {\n-&gt;-&gt; // whatever script_2\n-&gt; }\n}\n// there's a 100% chance that script_1 will be executed, so despite script_2 having a 100% chance of executing, it will *NEVER* be executed because it never makes it to that code line, as it requires the *failure* of script_1 to be executed, but at 100% chance of success, there's 0% chance of failure, lol.\n\n----\n\nand we can make it include more than 2 choices~options~selections, too:\n\n(the &quot;50&quot; Value has nothing to do with this, you can change each of the three &quot;50s&quot; to any Value between 0 and 100, though 0 and 100 will possibly wipe out parts of your scripting as I've shown already above, hopefully)\n\nCONCEPTUALLY:\n\nif (RandomChance (50) = true) {\n-&gt; // whatever script_1\n} else {\n-&gt; if (RandomChance (50) = true) {\n-&gt;-&gt; // whatever script_2\n-&gt; } else {\n-&gt;-&gt; if (RandomChance (50) = true) {\n-&gt;-&gt;-&gt; // whatever script_3\n-&gt;-&gt; }\n-&gt; }\n}\n\nCORRECT SYNTAX~FORMAT:\n\nif (RandomChance (50) = true) {\n-&gt; // whatever script_1\n} else if (RandomChance (50) = true) {\n-&gt; // whatever script_2\n} else if (RandomChance (50) = true) {\n-&gt; // whatever script_3\n}\n\nand if you want full functionality:\n\n(I'm changing the Values to make it more clear for you)\n\n// also, you need to understand this too about how RandomChance actually works:\n// if (true_a=true_b), then do this_1\n// if (false_a=true_b), then (CAN'T) do this_1\n// if (false_a=false_b), then do this_2\n// if (true_a=false_b), then (CAN'T) do this_2\n// true_a = successful RandomChance (Value), otherwise if it fails, then it equals (returns): false_a\n// for the &quot;true_b&quot; or &quot;false_b&quot;, you type in what you want: &quot;=true&quot; or &quot;=false&quot;\n//\n// this probably just confused you... so let me give examples:\n//\n// if ([color=#FF0000:ku8y5tz8]RandomChance (100)[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8])\n// if ([color=red:ku8y5tz8]100% chance of being true[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8])\n// 100% chance of being true, means that it always RETURNS (or IS): true\n// we thus (conceptually are) algebraically substituting out &quot;RandomChance (100)&quot; for placing in: &quot;true&quot;\n// look at my colors of font to see this\n// if ([color=#FF0000:ku8y5tz8]true[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8]), then do script\n//\n// if ([color=#FF0000:ku8y5tz8]RandomChance (50)[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8])\n// if ([color=#FF0000:ku8y5tz8]50% chance of being true[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8])\n// 50% chance of being true, means that it will 50% be &quot;true&quot; and 50% be &quot;false&quot;, thus RETURNS (or IS): true (50%) or false (50%)\n// we thus (conceptually are) algebraically substituting out &quot;RandomChance (50)&quot; for placing in: &quot;true&quot; (50%) or &quot;false&quot; (50%)\n// look at my colors of font to see this\n// if ([color=#FF0000:ku8y5tz8]true[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8]), then do script\n// if ([color=#FF0000:ku8y5tz8]false[/color:ku8y5tz8] = [color=#0000FF:ku8y5tz8]true[/color:ku8y5tz8]), then (CAN'T) do script\n//\n// or another way of trying to explain it:\n//\n// if (RandomChance (100) = true) -&gt; 100% SUCCESS (100% TRUE = true), it does script_1\n// if (RandomChance (100) = false) -&gt; 0% SUCCESS (100% TRUE -&gt; 100% true = false -&gt; ERROR!), it does NOT do script_1\n//\n// if (RandomChance (0) = true) -&gt; 0% SUCCESS (0% TRUE -&gt; 100% false = true OR 0% true = true -&gt; ERROR!), it does NOT do script_1\n// if (RandomChance (0) = false) -&gt; 100% SUCCESS (0% TRUE -&gt; 100% false = false), it does script_1\n//\n// if (RandomChance (50) = true) -&gt; 50% SUCCESS (50% TRUE = true), it does script_1 only 50% of the time\n// if (RandomChance (50) = true) -&gt; 50% FAILURE (50% TRUE = true), it does script_1 only 50% of the time\n//\n// if (RandomChance (50) = false) -&gt; 50% SUCCESS (50% TRUE -&gt; 50% false = false), it does script_1 only 50% of the time\n// if (RandomChance (50) = false) -&gt; 50% FAILURE (50% TRUE -&gt; 50% true = false), it does script_1 only 50% of the time\n//\n// if (RandomChance (75) = true) -&gt; 75% SUCCESS (75% TRUE -&gt; 75% true = true), it does script_1 only 75% of the time\n// if (RandomChance (75) = false) -&gt; 25% SUCCESS (75% TRUE -&gt; 25% false = false), it does script_1 only 25% of the time\n//\n// if (RandomChance (25) = true) -&gt; 25% SUCCESS (25% TRUE -&gt; 25% true = true), it does script_1 only 25% of the time\n// if (RandomChance (25) = false) -&gt; 75% SUCCESS (25% TRUE -&gt; 75% false = false), it does script_1 only 75% of the time\n\nif (RandomChance (75) = true) {\n-&gt; // whatever script_1a\n} else if (RandomChance (75) = false) {\n-&gt; // whatever script_1b\n} else if (RandomChance (90) = true) {\n-&gt; // whatever script_2a\n} else if (RandomChance (90) = false) {\n-&gt; // whatever script_2b\n} else if (RandomChance (60) = true) {\n-&gt; // whatever script_3a\n} else if (RandomChance (60) = false) {\n-&gt; // whatever script_3b\n}\n\n------------------\n\nwhereas, &quot;GetRandomInt&quot;, is for, using an analogy, 'selection out of a collection of choices, such as playing rock paper scissors game' = the selection alogrithm of~for some number of choices\n\nexample:\n\nin a shuffled deck of cards, the chance of the top card being an Ace of Spades = 1/52 odds + the algorithm (that is used by &quot;GetRandomInt&quot;) the computer (well, quest, anyways) uses to determine what card will be at the top, which gets turned over.\n\n(actual) example:\n\nselection = ToString (GetRandomInt (1,3))\nif (selection = &quot;1&quot;) {\n-&gt; // script_1\n} else if (selection = &quot;2&quot;) {\n-&gt; // script_2\n} else if (selection = &quot;3&quot;) {\n-&gt; // script_3\n}\n\n~OR~\n\nselection = ToString (GetRandomInt (1,3))\nswitch (selection) {\n-&gt; case (&quot;1&quot;) {\n-&gt;-&gt; // script_1\n-&gt; }\n-&gt; case (&quot;2&quot;) {\n-&gt;-&gt; // script_2\n-&gt; }\n-&gt; case (&quot;3&quot;) {\n-&gt;-&gt; // script_3\n-&gt; }\n}",
      "EditableFormat": "bbcode",
      "HTML": "quick note:<br/><br/>&quot;if (RandomChance (Value))&quot; is the exact same thing (though it's a shortened, ie quest-code-understood, form of) &quot;if (RandomChance (Value) = true)&quot;<br/><br/>this is the same thing for Boolean Attributes:<br/><br/>&quot;Object.visible&quot; is the same as &quot;Object.visible=true&quot;<br/><br/>if you don't put the &quot;=false&quot;, then it's understood to be &quot;=true&quot;, by the quest engine<br/><br/>(I just like to write it out in full, for new people, and myself too, to see it correctly, to avoid any confusion that they, or me, may have, lol)<br/><br/>-----------------------<br/><br/>&quot;RandomChance&quot; is for, using an analogy, '1/1,000,000,000,000 chance of winning the lottery' = % chance of just a single choice being true (of occuring, ie 'winning')<br/><br/>example:<br/><br/>in a shuffled deck of cards, the chance of the top card being an Ace of Spades = whatever you set the percent &quot;Value (0 through 100)&quot; to in &quot;RandomChance (Value)&quot;, you SET~DECIDE the ODDS of that single 'card' (choice~option~selection).<br/><br/>if (RandomChance (100) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; // whatever script_2<br/>}<br/>// script_1 will always be executed, lol<br/><br/>if (RandomChance (99) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; if (RandomChance (100) = true) {<br/>-&gt;-&gt; // whatever script_2<br/>-&gt; }<br/>}<br/>// there's a 99% chance that script_1 will be executed, but should the &quot;1%&quot; happen (lol), then there's a 100% chance that script_2 will be executed<br/><br/>if (RandomChance (99) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; if (RandomChance (50) = true) {<br/>-&gt;-&gt; // whatever script_2<br/>-&gt; }<br/>}<br/>// there's a 99% chance that script_1 will be executed, but should the &quot;1%&quot; happen (lol), then there's a 50% chance that script_2 will be executed<br/><br/>if (RandomChance (99) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; if (RandomChance (0) = true) {<br/>-&gt;-&gt; // whatever script_2<br/>-&gt; }<br/>}<br/>// there's a 99% chance that script_1 will be executed, and despite should the &quot;1%&quot; happen (lol), script_2 will *NEVER* be executed anyways<br/><br/>if (RandomChance (100) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; if (RandomChance (100) = true) {<br/>-&gt;-&gt; // whatever script_2<br/>-&gt; }<br/>}<br/>// there's a 100% chance that script_1 will be executed, so despite script_2 having a 100% chance of executing, it will *NEVER* be executed because it never makes it to that code line, as it requires the *failure* of script_1 to be executed, but at 100% chance of success, there's 0% chance of failure, lol.<br/><br/>----<br/><br/>and we can make it include more than 2 choices~options~selections, too:<br/><br/>(the &quot;50&quot; Value has nothing to do with this, you can change each of the three &quot;50s&quot; to any Value between 0 and 100, though 0 and 100 will possibly wipe out parts of your scripting as I've shown already above, hopefully)<br/><br/>CONCEPTUALLY:<br/><br/>if (RandomChance (50) = true) {<br/>-&gt; // whatever script_1<br/>} else {<br/>-&gt; if (RandomChance (50) = true) {<br/>-&gt;-&gt; // whatever script_2<br/>-&gt; } else {<br/>-&gt;-&gt; if (RandomChance (50) = true) {<br/>-&gt;-&gt;-&gt; // whatever script_3<br/>-&gt;-&gt; }<br/>-&gt; }<br/>}<br/><br/>CORRECT SYNTAX~FORMAT:<br/><br/>if (RandomChance (50) = true) {<br/>-&gt; // whatever script_1<br/>} else if (RandomChance (50) = true) {<br/>-&gt; // whatever script_2<br/>} else if (RandomChance (50) = true) {<br/>-&gt; // whatever script_3<br/>}<br/><br/>and if you want full functionality:<br/><br/>(I'm changing the Values to make it more clear for you)<br/><br/>// also, you need to understand this too about how RandomChance actually works:<br/>// if (true_a=true_b), then do this_1<br/>// if (false_a=true_b), then (CAN'T) do this_1<br/>// if (false_a=false_b), then do this_2<br/>// if (true_a=false_b), then (CAN'T) do this_2<br/>// true_a = successful RandomChance (Value), otherwise if it fails, then it equals (returns): false_a<br/>// for the &quot;true_b&quot; or &quot;false_b&quot;, you type in what you want: &quot;=true&quot; or &quot;=false&quot;<br/>//<br/>// this probably just confused you... so let me give examples:<br/>//<br/>// if (<span style=\"color:#FF0000\">RandomChance (100)</span> = <span style=\"color:#0000FF\">true</span>)<br/>// if (<span style=\"color:red\">100% chance of being true</span> = <span style=\"color:#0000FF\">true</span>)<br/>// 100% chance of being true, means that it always RETURNS (or IS): true<br/>// we thus (conceptually are) algebraically substituting out &quot;RandomChance (100)&quot; for placing in: &quot;true&quot;<br/>// look at my colors of font to see this<br/>// if (<span style=\"color:#FF0000\">true</span> = <span style=\"color:#0000FF\">true</span>), then do script<br/>//<br/>// if (<span style=\"color:#FF0000\">RandomChance (50)</span> = <span style=\"color:#0000FF\">true</span>)<br/>// if (<span style=\"color:#FF0000\">50% chance of being true</span> = <span style=\"color:#0000FF\">true</span>)<br/>// 50% chance of being true, means that it will 50% be &quot;true&quot; and 50% be &quot;false&quot;, thus RETURNS (or IS): true (50%) or false (50%)<br/>// we thus (conceptually are) algebraically substituting out &quot;RandomChance (50)&quot; for placing in: &quot;true&quot; (50%) or &quot;false&quot; (50%)<br/>// look at my colors of font to see this<br/>// if (<span style=\"color:#FF0000\">true</span> = <span style=\"color:#0000FF\">true</span>), then do script<br/>// if (<span style=\"color:#FF0000\">false</span> = <span style=\"color:#0000FF\">true</span>), then (CAN'T) do script<br/>//<br/>// or another way of trying to explain it:<br/>//<br/>// if (RandomChance (100) = true) -&gt; 100% SUCCESS (100% TRUE = true), it does script_1<br/>// if (RandomChance (100) = false) -&gt; 0% SUCCESS (100% TRUE -&gt; 100% true = false -&gt; ERROR!), it does NOT do script_1<br/>//<br/>// if (RandomChance (0) = true) -&gt; 0% SUCCESS (0% TRUE -&gt; 100% false = true OR 0% true = true -&gt; ERROR!), it does NOT do script_1<br/>// if (RandomChance (0) = false) -&gt; 100% SUCCESS (0% TRUE -&gt; 100% false = false), it does script_1<br/>//<br/>// if (RandomChance (50) = true) -&gt; 50% SUCCESS (50% TRUE = true), it does script_1 only 50% of the time<br/>// if (RandomChance (50) = true) -&gt; 50% FAILURE (50% TRUE = true), it does script_1 only 50% of the time<br/>//<br/>// if (RandomChance (50) = false) -&gt; 50% SUCCESS (50% TRUE -&gt; 50% false = false), it does script_1 only 50% of the time<br/>// if (RandomChance (50) = false) -&gt; 50% FAILURE (50% TRUE -&gt; 50% true = false), it does script_1 only 50% of the time<br/>//<br/>// if (RandomChance (75) = true) -&gt; 75% SUCCESS (75% TRUE -&gt; 75% true = true), it does script_1 only 75% of the time<br/>// if (RandomChance (75) = false) -&gt; 25% SUCCESS (75% TRUE -&gt; 25% false = false), it does script_1 only 25% of the time<br/>//<br/>// if (RandomChance (25) = true) -&gt; 25% SUCCESS (25% TRUE -&gt; 25% true = true), it does script_1 only 25% of the time<br/>// if (RandomChance (25) = false) -&gt; 75% SUCCESS (25% TRUE -&gt; 75% false = false), it does script_1 only 75% of the time<br/><br/>if (RandomChance (75) = true) {<br/>-&gt; // whatever script_1a<br/>} else if (RandomChance (75) = false) {<br/>-&gt; // whatever script_1b<br/>} else if (RandomChance (90) = true) {<br/>-&gt; // whatever script_2a<br/>} else if (RandomChance (90) = false) {<br/>-&gt; // whatever script_2b<br/>} else if (RandomChance (60) = true) {<br/>-&gt; // whatever script_3a<br/>} else if (RandomChance (60) = false) {<br/>-&gt; // whatever script_3b<br/>}<br/><br/>------------------<br/><br/>whereas, &quot;GetRandomInt&quot;, is for, using an analogy, 'selection out of a collection of choices, such as playing rock paper scissors game' = the selection alogrithm of~for some number of choices<br/><br/>example:<br/><br/>in a shuffled deck of cards, the chance of the top card being an Ace of Spades = 1/52 odds + the algorithm (that is used by &quot;GetRandomInt&quot;) the computer (well, quest, anyways) uses to determine what card will be at the top, which gets turned over.<br/><br/>(actual) example:<br/><br/>selection = ToString (GetRandomInt (1,3))<br/>if (selection = &quot;1&quot;) {<br/>-&gt; // script_1<br/>} else if (selection = &quot;2&quot;) {<br/>-&gt; // script_2<br/>} else if (selection = &quot;3&quot;) {<br/>-&gt; // script_3<br/>}<br/><br/>~OR~<br/><br/>selection = ToString (GetRandomInt (1,3))<br/>switch (selection) {<br/>-&gt; case (&quot;1&quot;) {<br/>-&gt;-&gt; // script_1<br/>-&gt; }<br/>-&gt; case (&quot;2&quot;) {<br/>-&gt;-&gt; // script_2<br/>-&gt; }<br/>-&gt; case (&quot;3&quot;) {<br/>-&gt;-&gt; // script_3<br/>-&gt; }<br/>",
      "PostDate": "2014-02-12T03:14:54+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27830",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "There are a couple of ways to do it:\n\n1. Using the random chance element of the if/else statements like you have already.\n\nThis requires a bit of mathematical calculation on your part to make the chance of each outcome equal. For 3 possibilities it would look like this-\n\n[code:2nhtfxml]if (RandomChance(33)) {\n  msg (&quot;text1&quot;)\n}\nelse if (RandomChance(50)) {\n  msg (&quot;text2&quot;)\n}\nelse {\n  msg (&quot;text3&quot;)\n}[/code:2nhtfxml]\n\nWhen the code is run, there is a 1 in 3 chance that text1 will be printed, which is what you want because there are 3 possibilities of even chance. If it returns false (2 in every 3 times) there are 2 possibilities remaining, so to maintain an even chance on both the number has to be increased to 50. Obviously this becomes more complicated the more possibilities you have, or if you want to introduce uneven chances.\n\n\n2. Using the GetRandomInt function- this is probably the better choice.\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetRandomInt\">http://quest5.net/wiki/GetRandomInt</a><!-- m -->\n\nYour code would look something like this:\n\n[code:2nhtfxml]outcome = GetRandomInt(1,3)\nif (outcome = 1) {\n  msg (&quot;text1&quot;)\n}\nelse if (outcome = 2) {\n  msg (&quot;text2&quot;)\n}\nelse {\n  msg (&quot;text3&quot;)\n[/code:2nhtfxml]\n\nThe benefits of doing things this way is that a) the likelihood of generating any number in your specified range is equal and you don't need to calculate anything, and b) you can then more easily allow for unequal outcome chances by using ranges of numbers in your if/else statements.",
      "EditableFormat": "bbcode",
      "HTML": "There are a couple of ways to do it:<br/><br/>1. Using the random chance element of the if/else statements like you have already.<br/><br/>This requires a bit of mathematical calculation on your part to make the chance of each outcome equal. For 3 possibilities it would look like this-<br/><br/><pre><code>if (RandomChance(33)) {<br/>  msg (&quot;text1&quot;)<br/>}<br/>else if (RandomChance(50)) {<br/>  msg (&quot;text2&quot;)<br/>}<br/>else {<br/>  msg (&quot;text3&quot;)<br/>}</code></pre><br/><br/>When the code is run, there is a 1 in 3 chance that text1 will be printed, which is what you want because there are 3 possibilities of even chance. If it returns false (2 in every 3 times) there are 2 possibilities remaining, so to maintain an even chance on both the number has to be increased to 50. Obviously this becomes more complicated the more possibilities you have, or if you want to introduce uneven chances.<br/><br/><br/>2. Using the GetRandomInt function- this is probably the better choice.<br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetRandomInt\">http://quest5.net/wiki/GetRandomInt</a><!-- m --><br/><br/>Your code would look something like this:<br/><br/><pre><code>outcome = GetRandomInt(1,3)<br/>if (outcome = 1) {<br/>  msg (&quot;text1&quot;)<br/>}<br/>else if (outcome = 2) {<br/>  msg (&quot;text2&quot;)<br/>}<br/>else {<br/>  msg (&quot;text3&quot;)<br/></code></pre><br/><br/>The benefits of doing things this way is that a) the likelihood of generating any number in your specified range is equal and you don't need to calculate anything, and b) you can then more easily allow for unequal outcome chances by using ranges of numbers in your if/else statements.",
      "PostDate": "2014-02-12T03:15:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27832",
      "UserId": 0,
      "Username": "michaelsahn",
      "UserAvatar": null,
      "UserGravatar": "3a9802e1b3c8187c840fa757ffeb896b",
      "EditableText": "Thanks for your replies - I now know how to use GetRandomInt - it will come in handy!\n\n-Mike",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for your replies - I now know how to use GetRandomInt - it will come in handy!<br/><br/>-Mike",
      "PostDate": "2014-02-12T03:32:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27833",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "if you can understand using lists~dictionaries (not easy for new people), then it'll look like this:\n\nlists~dictionaries start from 0, not from 1\nlists~dictionaries are ordered, if horizontal: from left to right (or if vertical: from up to down)\n\nsplit (&quot;red;blue;yellow&quot;,&quot;;&quot;)\n\nchoice 0: red\nchoice 1: blue\nchoice 2: yellow\n\nlist_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)\nselection = StringListItem (list_choices, GetRandomInt (0,2))\n// let's say &quot;GetRandomInt&quot; selects &quot;1&quot;\nmsg (selection)\n// outputs: blue\n\nlist_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)\nselection = StringListItem (list_choices, GetRandomInt (0,2))\n// let's say &quot;GetRandomInt&quot; selects &quot;0&quot;\nmsg (selection)\n// outputs: red\n\nlist_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)\nselection = StringListItem (list_choices, GetRandomInt (0,2))\n// let's say &quot;GetRandomInt&quot; selects &quot;2&quot;\nmsg (selection)\n// outputs: yellow\n\n-------\n\nexamples for (STRING) dictionaries:\n\nKey = Value\n(string_1 = string_2)\n\nsplit (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)\n\nchoice 1: red\nchoice 2: blue\nchoice 3: yellow\n\n-------\nthe ordering however is:\n\n0: red\n1: blue\n2: yellow\n\nbut we are *NOT* using ordering in this case with the dictionary, as we're using the match up of its &quot;key&quot; to the &quot;GetRandomInt&quot; selection Value\n-------\n\ndictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)\nselection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))\n// let's say &quot;GetRandomInt&quot; selects &quot;2&quot;\nmsg (selection)\n// outputs: blue\n\ndictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)\nselection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))\n// let's say &quot;GetRandomInt&quot; selects &quot;1&quot;\nmsg (selection)\n// outputs: red\n\ndictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)\nselection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))\n// let's say &quot;GetRandomInt&quot; selects &quot;3&quot;\nmsg (selection)\n// outputs: yellow",
      "EditableFormat": "bbcode",
      "HTML": "if you can understand using lists~dictionaries (not easy for new people), then it'll look like this:<br/><br/>lists~dictionaries start from 0, not from 1<br/>lists~dictionaries are ordered, if horizontal: from left to right (or if vertical: from up to down)<br/><br/>split (&quot;red;blue;yellow&quot;,&quot;;&quot;)<br/><br/>choice 0: red<br/>choice 1: blue<br/>choice 2: yellow<br/><br/>list_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)<br/>selection = StringListItem (list_choices, GetRandomInt (0,2))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;1&quot;<br/>msg (selection)<br/>// outputs: blue<br/><br/>list_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)<br/>selection = StringListItem (list_choices, GetRandomInt (0,2))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;0&quot;<br/>msg (selection)<br/>// outputs: red<br/><br/>list_choices = split (&quot;red;blue;yellow&quot;,&quot;;&quot;)<br/>selection = StringListItem (list_choices, GetRandomInt (0,2))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;2&quot;<br/>msg (selection)<br/>// outputs: yellow<br/><br/>-------<br/><br/>examples for (STRING) dictionaries:<br/><br/>Key = Value<br/>(string_1 = string_2)<br/><br/>split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)<br/><br/>choice 1: red<br/>choice 2: blue<br/>choice 3: yellow<br/><br/>-------<br/>the ordering however is:<br/><br/>0: red<br/>1: blue<br/>2: yellow<br/><br/>but we are *NOT* using ordering in this case with the dictionary, as we're using the match up of its &quot;key&quot; to the &quot;GetRandomInt&quot; selection Value<br/>-------<br/><br/>dictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)<br/>selection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;2&quot;<br/>msg (selection)<br/>// outputs: blue<br/><br/>dictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)<br/>selection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;1&quot;<br/>msg (selection)<br/>// outputs: red<br/><br/>dictionary_choices = split (&quot;1=red;2=blue;3=yellow&quot;,&quot;;&quot;)<br/>selection = StringDictionaryItem (dictionary_choices, ToString (GetRandomInt (1,3)))<br/>// let's say &quot;GetRandomInt&quot; selects &quot;3&quot;<br/>msg (selection)<br/>// outputs: yellow",
      "PostDate": "2014-02-12T03:57:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27834",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "GetRandomInt = The ODDS via merely the number of choices~options listed and plus the alogorithm used for its &quot;random&quot; selection of one of those choices~selections:\n\nchoices~options: 1,2,3 (range: 1-3)\nthus the ODDS are: 33% (1/3), however...\nalso, its algorithm then decides whether to actually pick: 1, 2, or 3 ... for its &quot;randomness&quot;.\n\nyou can see~play~test~examine~research it via my test &quot;game&quot;, lol:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=5&amp;t=4094\">viewtopic.php?f=5&amp;t=4094</a><!-- l -->\n\n----------\n\nRandomChance = your own custom-decided (your own inputed ~ code-typed-in) ODDS foreach (individual and totally inpendant) choice~option\n\nbut you'll need additional scripting to move from calculating~determining what to do for one choice~option to the next choice~option, unless you use that fancy math-method with RandomChance that Liam showed in his post, though you still need some extra~correct scripting still to move from one choice~option to the next choice~option.\n\nif~when you move to more complicated stuff (such as combat~damage or whatever RPG aspect), this seems to work well (in the limited, hardly any, testing of it that I've done so far, lol):\n\nRandomChance (Object_1.Integer_Attribute_1 - Object_2.Integer_Attribute_1)\n// obviously you need to make sure (ie check) that Object_1's attribute is equal or higher than Object_2's attribute\n\nif (RandomChance (HK.dexterity - orc.agility) = true) {\n// &quot;dexterity&quot; and &quot;agility&quot; are integer (int) attributes\n-&gt; msg (&quot;You successfully hit the orc!&quot;)\n} else {\n-&gt; msg (&quot;You failed to hit the orc...&quot;)\n}",
      "EditableFormat": "bbcode",
      "HTML": "GetRandomInt = The ODDS via merely the number of choices~options listed and plus the alogorithm used for its &quot;random&quot; selection of one of those choices~selections:<br/><br/>choices~options: 1,2,3 (range: 1-3)<br/>thus the ODDS are: 33% (1/3), however...<br/>also, its algorithm then decides whether to actually pick: 1, 2, or 3 ... for its &quot;randomness&quot;.<br/><br/>you can see~play~test~examine~research it via my test &quot;game&quot;, lol:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=5&amp;t=4094\">viewtopic.php?f=5&amp;t=4094</a><!-- l --><br/><br/>----------<br/><br/>RandomChance = your own custom-decided (your own inputed ~ code-typed-in) ODDS foreach (individual and totally inpendant) choice~option<br/><br/>but you'll need additional scripting to move from calculating~determining what to do for one choice~option to the next choice~option, unless you use that fancy math-method with RandomChance that Liam showed in his post, though you still need some extra~correct scripting still to move from one choice~option to the next choice~option.<br/><br/>if~when you move to more complicated stuff (such as combat~damage or whatever RPG aspect), this seems to work well (in the limited, hardly any, testing of it that I've done so far, lol):<br/><br/>RandomChance (Object_1.Integer_Attribute_1 - Object_2.Integer_Attribute_1)<br/>// obviously you need to make sure (ie check) that Object_1's attribute is equal or higher than Object_2's attribute<br/><br/>if (RandomChance (HK.dexterity - orc.agility) = true) {<br/>// &quot;dexterity&quot; and &quot;agility&quot; are integer (int) attributes<br/>-&gt; msg (&quot;You successfully hit the orc!&quot;)<br/>} else {<br/>-&gt; msg (&quot;You failed to hit the orc...&quot;)<br/>",
      "PostDate": "2014-02-12T04:41:52+00:00",
      "LastEditDate": null
    }
  ]
}
