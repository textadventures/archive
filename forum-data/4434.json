{
  "Topic": {
    "TopicId": "4434",
    "ForumId": "10",
    "Title": "Question on Script Operations",
    "LastUpdated": "2014-06-29T08:44:06+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "29226",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "if I have a looping 'changed' script, which is dependant upon other 'changed' scripts' adjustment to attributes, do I need to force invoke these other 'changed' scripts before I do the loop code line (via on ready), or will there not be any conflict~problem, as the other 'changed' scripts will be run and finish before the looping 'changed' script gets to it's part where it needs the other 'changed' scripts to have adjusted attributes?\n\nand, another question that is apart of the above, which I don't even know about either, laughs\n\nAre the other changed scripts even activated~executed (automatically; non-forced; non-coded into 'changed1' script), while the current 'changed1' script is still executing (due to its looping) ?\n\n------------\n\nforgot to mention this too (just in case it's not assumed'able, lol):\n\nchanged1 script\n-&gt; // changes the attribute of 'changed2attribute'\n-&gt; // changed2 script changes the attribute of 'changed3attribute'\n-&gt; // changed3 script's newly adjusted attributes (within its scripting) are required for changed1 script's looping\n-&gt; // looping code line (invoke changed1)\n\n-------------\n\nmy changed1's looping execution is dependant upon the newly adjusted attributes from changed2 and changed3\n\nso...\n\ndo I need to do this?\n\n[code:1m55jfpm]&lt;attr name=&quot;changed1&quot; type=&quot;script&quot;&gt;\n  // if&#46;&#46;&#46;\n    // invoke (changed2)\n    // on ready\n      // invoke (changed3)\n      // on ready\n        // invoke (changed1)\n&lt;/attr&gt;[/code:1m55jfpm]\n\nor can I just do this?\n\n[code:1m55jfpm]&lt;attr name=&quot;changed1&quot; type=&quot;script&quot;&gt;\n  // if&#46;&#46;&#46;\n    // invoke (changed1)\n&lt;/attr&gt;[/code:1m55jfpm]\n\n(if this isn't detailed enough for answering, I'll work on trying to post my code up for you to see what I'm talking about and trying to do exactly, though at the moment, I'm unable to post my code, which is why I'm trying to ask my question in this way, but it might not be enough info for you to answer it without me providing my code, as it'd be too difficult for me to try to explain more without my code to help, as explaining things is hard for me)",
      "EditableFormat": "bbcode",
      "HTML": "if I have a looping 'changed' script, which is dependant upon other 'changed' scripts' adjustment to attributes, do I need to force invoke these other 'changed' scripts before I do the loop code line (via on ready), or will there not be any conflict~problem, as the other 'changed' scripts will be run and finish before the looping 'changed' script gets to it's part where it needs the other 'changed' scripts to have adjusted attributes?<br/><br/>and, another question that is apart of the above, which I don't even know about either, laughs<br/><br/>Are the other changed scripts even activated~executed (automatically; non-forced; non-coded into 'changed1' script), while the current 'changed1' script is still executing (due to its looping) ?<br/><br/>------------<br/><br/>forgot to mention this too (just in case it's not assumed'able, lol):<br/><br/>changed1 script<br/>-&gt; // changes the attribute of 'changed2attribute'<br/>-&gt; // changed2 script changes the attribute of 'changed3attribute'<br/>-&gt; // changed3 script's newly adjusted attributes (within its scripting) are required for changed1 script's looping<br/>-&gt; // looping code line (invoke changed1)<br/><br/>-------------<br/><br/>my changed1's looping execution is dependant upon the newly adjusted attributes from changed2 and changed3<br/><br/>so...<br/><br/>do I need to do this?<br/><br/><pre><code>&lt;attr name=&quot;changed1&quot; type=&quot;script&quot;&gt;<br/>  // if&#46;&#46;&#46;<br/>    // invoke (changed2)<br/>    // on ready<br/>      // invoke (changed3)<br/>      // on ready<br/>        // invoke (changed1)<br/>&lt;/attr&gt;</code></pre><br/><br/>or can I just do this?<br/><br/><pre><code>&lt;attr name=&quot;changed1&quot; type=&quot;script&quot;&gt;<br/>  // if&#46;&#46;&#46;<br/>    // invoke (changed1)<br/>&lt;/attr&gt;</code></pre><br/><br/>(if this isn't detailed enough for answering, I'll work on trying to post my code up for you to see what I'm talking about and trying to do exactly, though at the moment, I'm unable to post my code, which is why I'm trying to ask my question in this way, but it might not be enough info for you to answer it without me providing my code, as it'd be too difficult for me to try to explain more without my code to help, as explaining things is hard for me)",
      "PostDate": "2014-06-28T21:15:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29227",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It's really hard to say without seeing some real code. The problem with what you have shown is that there's no place in the code that exits the script (e.g. some form of get input/show menu/pause/etc). That would cause an infinite loop, which would make Quest lock up. A Quest script has to exit at some point so the engine can move on. If you never exit a script, then it can't run.\n\nI also can't see how &quot;on ready&quot; would do anything for you, as they only have an effect with something like &quot;ask&quot; or &quot;get input&quot;. They put off script execution until the &quot;ask&quot; or &quot;get input&quot; is done. If you don't have something like that, then an &quot;on ready&quot; will do nothing for you. So once again, perhaps more fleshed out code would show what you're really trying to do.\n\nTo perhaps answer what you're asking, a &quot;changed&quot; script is invoked after the new attribute value has been set, and it happens right at the time that value is set. So if you have a line like:\n\n[code:1c882i1k]attribute = newValue\n// some other script lines\n[/code:1c882i1k]\n\nand you have a &quot;changed&quot; script on that attribute and it changes other values that have other &quot;changed&quot; scripts, then they will all be executed directly when their values are set, and everything will be settled by the time &quot;some other script lines&quot; are executed above. Nothing will be left pending. Hope that helps!",
      "EditableFormat": "bbcode",
      "HTML": "It's really hard to say without seeing some real code. The problem with what you have shown is that there's no place in the code that exits the script (e.g. some form of get input/show menu/pause/etc). That would cause an infinite loop, which would make Quest lock up. A Quest script has to exit at some point so the engine can move on. If you never exit a script, then it can't run.<br/><br/>I also can't see how &quot;on ready&quot; would do anything for you, as they only have an effect with something like &quot;ask&quot; or &quot;get input&quot;. They put off script execution until the &quot;ask&quot; or &quot;get input&quot; is done. If you don't have something like that, then an &quot;on ready&quot; will do nothing for you. So once again, perhaps more fleshed out code would show what you're really trying to do.<br/><br/>To perhaps answer what you're asking, a &quot;changed&quot; script is invoked after the new attribute value has been set, and it happens right at the time that value is set. So if you have a line like:<br/><br/><pre><code>attribute = newValue<br/>// some other script lines<br/></code></pre><br/><br/>and you have a &quot;changed&quot; script on that attribute and it changes other values that have other &quot;changed&quot; scripts, then they will all be executed directly when their values are set, and everything will be settled by the time &quot;some other script lines&quot; are executed above. Nothing will be left pending. Hope that helps!",
      "PostDate": "2014-06-28T23:18:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29230",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm working again on date and time coding, and I'm trying to code in adding months based upon added days, so there's the problem of (not my actual code yet):\n\njanuary = 31 days\nfebruary = 28 days\nmarch = 31 days\nday = 1 (1st of january)\n\nif: day = day + 90\nI need to code for it being still march (the 31st)\n\nvs\n\nif: day = day + 91\nI need to code for it being april (the 1st)\n\nas the different # of days for the various months makes it a bit more complicated\n\nso, to deal with this, I do looping and a stringdictionary that gets the month for what day it is, so I need to make sure that the script will update the day #, before the stringdictionary runs (and to deal with the differing months' days #s, I subtract that month's day # before I loop it)\n\n----------\n\nerr, this is hard to hard to explain, and probably harder for you to understand, laughs. I'll get my code up as soon as I can do so.\n\n----------\n\noff of memory, so not fully exact...\n\n[code:rzh56fkk]&lt;attr name=&quot;month_integer_to_day_integer&quot; type=&quot;simplestringdictionary&quot;&gt;1=31;2=28;3=31;4=30;etc&lt;/attr&gt;\n\n// I know I'm missing the attached object for my attributes, but I don't want to write more than I need to, so I'm leaving it off, but I'm fully aware I need to have an attached object for my attributes, I know I can't use variables across scripts (pretend that they have the attached object typed~coded in, that they are attributes and not variables, lol)&#46;\n\nday_integer = day_integer + x\n// x would be whatever~any value plugged in for it\n\n&lt;attr name=&quot;changedday_integer&quot; type=&quot;script&quot;&gt;\n  if (day_integer &gt; ToInt (month_integer_to_day_integer, month_integer)) {\n    if (day_integer / ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)) &gt; 1)\n      month_integer = month_integer + 1\n      // do I need to&quot; invoke (changed_month_integer), or not?\n      invoke (changedday_integer)\n    } else if (day_integer / ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)) = 1)\n      month_integer = month_integer + 1\n    }\n    day_integer = day_integer % ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer))\n    if (day_integer = 0) {\n      day_integer = ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer))\n    }\n  }\n&lt;/attr&gt;\n\n&lt;attr name=&quot;changedmonth_integer&quot; type=&quot;script&quot;&gt;\n  if (month_integer &gt; 12) {\n    if (month_integer / 12 &gt; 1) {\n      month_integer = month_integer + 1\n      invoke (changedmonth_integer)\n    } else if (month_integer / 12 = 1) {\n      month_integer = month_integer + 1\n    }\n    month_integer = month_integer % 12\n    if (month_integer = 0) {\n      month_integer = 12\n    }\n  }\n&lt;/attr&gt;[/code:rzh56fkk]",
      "EditableFormat": "bbcode",
      "HTML": "I'm working again on date and time coding, and I'm trying to code in adding months based upon added days, so there's the problem of (not my actual code yet):<br/><br/>january = 31 days<br/>february = 28 days<br/>march = 31 days<br/>day = 1 (1st of january)<br/><br/>if: day = day + 90<br/>I need to code for it being still march (the 31st)<br/><br/>vs<br/><br/>if: day = day + 91<br/>I need to code for it being april (the 1st)<br/><br/>as the different # of days for the various months makes it a bit more complicated<br/><br/>so, to deal with this, I do looping and a stringdictionary that gets the month for what day it is, so I need to make sure that the script will update the day #, before the stringdictionary runs (and to deal with the differing months' days #s, I subtract that month's day # before I loop it)<br/><br/>----------<br/><br/>err, this is hard to hard to explain, and probably harder for you to understand, laughs. I'll get my code up as soon as I can do so.<br/><br/>----------<br/><br/>off of memory, so not fully exact...<br/><br/><pre><code>&lt;attr name=&quot;month_integer_to_day_integer&quot; type=&quot;simplestringdictionary&quot;&gt;1=31;2=28;3=31;4=30;etc&lt;/attr&gt;<br/><br/>// I know I'm missing the attached object for my attributes, but I don't want to write more than I need to, so I'm leaving it off, but I'm fully aware I need to have an attached object for my attributes, I know I can't use variables across scripts (pretend that they have the attached object typed~coded in, that they are attributes and not variables, lol)&#46;<br/><br/>day_integer = day_integer + x<br/>// x would be whatever~any value plugged in for it<br/><br/>&lt;attr name=&quot;changedday_integer&quot; type=&quot;script&quot;&gt;<br/>  if (day_integer &gt; ToInt (month_integer_to_day_integer, month_integer)) {<br/>    if (day_integer / ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)) &gt; 1)<br/>      month_integer = month_integer + 1<br/>      // do I need to&quot; invoke (changed_month_integer), or not?<br/>      invoke (changedday_integer)<br/>    } else if (day_integer / ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)) = 1)<br/>      month_integer = month_integer + 1<br/>    }<br/>    day_integer = day_integer % ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer))<br/>    if (day_integer = 0) {<br/>      day_integer = ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer))<br/>    }<br/>  }<br/>&lt;/attr&gt;<br/><br/>&lt;attr name=&quot;changedmonth_integer&quot; type=&quot;script&quot;&gt;<br/>  if (month_integer &gt; 12) {<br/>    if (month_integer / 12 &gt; 1) {<br/>      month_integer = month_integer + 1<br/>      invoke (changedmonth_integer)<br/>    } else if (month_integer / 12 = 1) {<br/>      month_integer = month_integer + 1<br/>    }<br/>    month_integer = month_integer % 12<br/>    if (month_integer = 0) {<br/>      month_integer = 12<br/>    }<br/>  }<br/>&lt;/attr&gt;</code></pre>",
      "PostDate": "2014-06-29T03:14:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29231",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "The answer to the question posed in your comment is &quot;no, you don't have to&quot;. The changed script for the month attribute will happen automatically when you change the month attribute, even if you're already inside a changed script for the day.\n\nHowever, the way you have your code written won't work. You loop advancing months but never actually update the day attribute. You need to update the day variable as you progress months; otherwise, the code will loop forever (day will forever be, for example, 32, and it will never satisfy a month's limit). The easiest way to do that, if the day value exceeds the current month's days, is to increment the month and then subtract the number of days in the old month from the current days value. That way the days value will decrease. (The months are &quot;eating up&quot; your days as you go along.)\n\nYou also don't need to differentiate between &quot;&gt;1&quot; and &quot;=1&quot;. It should be the same code. (And dividing and checking the int value seems a bit more awkward to me than simply seeing if the days value is greater than or equal to the month's number of days.)\n\nFinally, your 0 check for days is a bit baffling to me. In that case, you set the days value to the number of days in the current month, which will simply satisfy your check for &quot;=1&quot; when the changed script kicks in, and it will continue to loop. \n\nAssuming your day value ranges from 0 to days_in_month-1, then I think your days &quot;changed&quot; script can be as simple as:\n\n[code:2ueuhypx]days_in_month = ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)\nif (day_integer &gt;= days_in_month) {\n    month_integer = month_integer+1\n    day_integer = day_integer - days_in_month\n}\n[/code:2ueuhypx]\nIf your day value is in the range 1-days_in_month, then change the &quot;&gt;=&quot; in the above to &quot;&gt;&quot;. And keep in mind that with a a 1-based day value, you can't use mod (%) at all unless you normalize it down to 0 before and then back up to 1-based afterwards, which is a real pain.\n\nWhen you go to code this, I would really recommend you put some &quot;msg&quot;s in the various change scripts initially to watch what it's doing (and you could actually have answered your own question that way! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> ) What you're doing is a form of recursion by updating the day attribute while you're in the process of updating the day attribute. It can be cool when it works, but it can be a headache if not understood well enough.",
      "EditableFormat": "bbcode",
      "HTML": "The answer to the question posed in your comment is &quot;no, you don't have to&quot;. The changed script for the month attribute will happen automatically when you change the month attribute, even if you're already inside a changed script for the day.<br/><br/>However, the way you have your code written won't work. You loop advancing months but never actually update the day attribute. You need to update the day variable as you progress months; otherwise, the code will loop forever (day will forever be, for example, 32, and it will never satisfy a month's limit). The easiest way to do that, if the day value exceeds the current month's days, is to increment the month and then subtract the number of days in the old month from the current days value. That way the days value will decrease. (The months are &quot;eating up&quot; your days as you go along.)<br/><br/>You also don't need to differentiate between &quot;&gt;1&quot; and &quot;=1&quot;. It should be the same code. (And dividing and checking the int value seems a bit more awkward to me than simply seeing if the days value is greater than or equal to the month's number of days.)<br/><br/>Finally, your 0 check for days is a bit baffling to me. In that case, you set the days value to the number of days in the current month, which will simply satisfy your check for &quot;=1&quot; when the changed script kicks in, and it will continue to loop. <br/><br/>Assuming your day value ranges from 0 to days_in_month-1, then I think your days &quot;changed&quot; script can be as simple as:<br/><br/><pre><code>days_in_month = ToInt (StringDictionaryItem (month_integer_to_day_integer, month_integer)<br/>if (day_integer &gt;= days_in_month) {<br/>    month_integer = month_integer+1<br/>    day_integer = day_integer - days_in_month<br/>}<br/></code></pre><br/>If your day value is in the range 1-days_in_month, then change the &quot;&gt;=&quot; in the above to &quot;&gt;&quot;. And keep in mind that with a a 1-based day value, you can't use mod (%) at all unless you normalize it down to 0 before and then back up to 1-based afterwards, which is a real pain.<br/><br/>When you go to code this, I would really recommend you put some &quot;msg&quot;s in the various change scripts initially to watch what it's doing (and you could actually have answered your own question that way! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> ) What you're doing is a form of recursion by updating the day attribute while you're in the process of updating the day attribute. It can be cool when it works, but it can be a headache if not understood well enough.",
      "PostDate": "2014-06-29T08:44:06+01:00",
      "LastEditDate": null
    }
  ]
}
