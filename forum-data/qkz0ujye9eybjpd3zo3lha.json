{
  "Topic": {
    "TopicId": "qkz0ujye9eybjpd3zo3lha",
    "ForumId": "10",
    "Title": "[Help] Deactivating/Activating a Verb.",
    "LastUpdated": "2023-06-30T06:17:01.4303245Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "388be91b-dbc7-437f-84c8-a157ab0703d8",
      "UserId": 654878,
      "Username": "Neurolosis",
      "AvatarUrl": "https://i.imgur.com/ciQk6e1b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi all,\r\n\r\nI'm new here. My name's Josh. I'm Autistic and I enjoy all things IT. I'm planning on doing a Robotics/AI degree but I would like to do some game design as a hobby hence why I'm here on Quest. (Side Note: I'm a bit of a noob when it comes to game design so my apologies if my question/s are frustrating)\r\n\r\nI'm trying to test out how to do different things before I dive into making my game. One of the things I'm trying to figure out how to do is allowing a verb to be shown when the user clicks on the object link if the item is in their inventory. If it isn't in their inventory, then the item cannot 'cook'. \r\n\r\nMy other question is if anyone has the answer to the above, would the same type of logic apply if the user typed in 'cook eggs' instead of clicking the link to 'cook' the specific object.\r\n\r\nThank you and I look forward to engaging with this community. :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi all,</p>\n<p>I'm new here. My name's Josh. I'm Autistic and I enjoy all things IT. I'm planning on doing a Robotics/AI degree but I would like to do some game design as a hobby hence why I'm here on Quest. (Side Note: I'm a bit of a noob when it comes to game design so my apologies if my question/s are frustrating)</p>\n<p>I'm trying to test out how to do different things before I dive into making my game. One of the things I'm trying to figure out how to do is allowing a verb to be shown when the user clicks on the object link if the item is in their inventory. If it isn't in their inventory, then the item cannot 'cook'.</p>\n<p>My other question is if anyone has the answer to the above, would the same type of logic apply if the user typed in 'cook eggs' instead of clicking the link to 'cook' the specific object.</p>\n<p>Thank you and I look forward to engaging with this community. :)</p>\n\n",
      "PostDate": "2023-06-30T06:17:01.4303245Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8009d31e-1be8-4be5-8cde-9688e4f39291",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> One of the things I'm trying to figure out how to do is allowing a verb to be shown when the user clicks on the object link if the item is in their inventory. If it isn't in their inventory, then the item cannot 'cook'.\r\n\r\nIf you're talking about the menu, or the verb buttons in the side panes, these are controlled by the three lists `displayverbs`, `inventoryverbs`, and `generatedverbslist`.\r\n* `displayverbs` and `inventoryverbs` are edited on the object's \"Object\" tab\r\n* `generatedverbslist` is automatically created based on the object's \"Verbs\" tab when the object is first seen.\r\n* If you want to control which verbs are shown in the menu, you can check \"Disable automatically generated display verb list for this object\", which causes `generatedverbslist` to be ignored. You can then manually add your verbs to `displayverbs` and `inventoryverbs` to control which verbs are displayed depending on whether the player is holding the object.\r\n* Conversely, if you check \"Only display verbs from this object's Verbs tab\" it will ignore `displayverbs` and `inventoryverbs`.\r\n\r\nNote that this *only* controls the menu; it won't stop the player typing the verb on the command line. So if you want to stop a verb being used in some circumstances, you should make sure to start that verb's script with an 'if' statement. Something like:\r\n\r\n```\r\nif (ListContains (ScopeReachableInventory (), this)) {\r\n  // do whatever is necessary to cook the object\r\n}\r\n else {\r\n  msg (\"You need to pick it up first.\")\r\n}\r\n```\r\nNote that in this example I used `ScopeReachableInventory` rather than `ScopeInventory`. The only real difference between these two is when the object is inside a closed container in the inventory. (For the most part, \"reachable\" is the objects that a player can do things with)\r\nFor further clarification, in case you haven't come across it yet: the special variable `this` refers to the object that owns a script. In a verb, that's usually the object that has the verb, in a room enter/exit script `this` will be the room, and in a command script `this` will be the command.\r\n\r\nIt is also possible to remove a verb, but in most cases this is much more effort than just having the verb check the conditions itself.\r\nFor example, if an object has a `cook` verb and you want to remove it, you could do:\r\n```\r\nsomeobject.cook = null\r\n```\r\nThis deletes the verb entirely. If the player attempts to use the verb after that, they will get the default \"You can't cook it.\" message. However, it would still be on the menus unless you manually remove it; so you would also want to do:\r\n```\r\nif (HasAttribute (someobject, \"generatedverbslist\")) {\r\n  if (ListContains (someobject.generatedverbslist, \"cook\")) {\r\n    list remove (someobject.generatedverbslist, \"cook\")\r\n  }\r\n}\r\nif (ListContains (someobject.inventoryverbs, \"cook\")) {\r\n  list remove (someobject.inventoryverbs, \"cook\")\r\n}\r\n```\r\n(In this case I used `someobject` as a placeholder for the object whose verb you want to remove)\r\n\r\nAnd if you want to add back a verb which has been removed, you would have to recreate it:\r\n```\r\nsomeobject.cook => {\r\n  // Script for the verb\r\n}\r\n```\r\nand add it back to the list:\r\n```\r\nif (not ListContains (someobject.inventoryverbs, \"cook\")) {\r\n  list add (someobject.inventoryverbs, \"cook\")\r\n}\r\n```\r\n\r\nIt can sometimes be useful to change which verbs are in the lists to be displayed. However, actually removing a verb from the object is usually more work than just making the verb check whether it can be used, so it can display a message otherwise.\r\n\r\nI hope that makes sense.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>One of the things I'm trying to figure out how to do is allowing a verb to be shown when the user clicks on the object link if the item is in their inventory. If it isn't in their inventory, then the item cannot 'cook'.</p>\n</blockquote>\n<p>If you're talking about the menu, or the verb buttons in the side panes, these are controlled by the three lists <code>displayverbs</code>, <code>inventoryverbs</code>, and <code>generatedverbslist</code>.</p>\n<ul>\n<li><code>displayverbs</code> and <code>inventoryverbs</code> are edited on the object's \"Object\" tab</li>\n<li><code>generatedverbslist</code> is automatically created based on the object's \"Verbs\" tab when the object is first seen.</li>\n<li>If you want to control which verbs are shown in the menu, you can check \"Disable automatically generated display verb list for this object\", which causes <code>generatedverbslist</code> to be ignored. You can then manually add your verbs to <code>displayverbs</code> and <code>inventoryverbs</code> to control which verbs are displayed depending on whether the player is holding the object.</li>\n<li>Conversely, if you check \"Only display verbs from this object's Verbs tab\" it will ignore <code>displayverbs</code> and <code>inventoryverbs</code>.</li>\n</ul>\n<p>Note that this <em>only</em> controls the menu; it won't stop the player typing the verb on the command line. So if you want to stop a verb being used in some circumstances, you should make sure to start that verb's script with an 'if' statement. Something like:</p>\n<pre><code>if (ListContains (ScopeReachableInventory (), this)) {\n  // do whatever is necessary to cook the object\n}\n else {\n  msg (\"You need to pick it up first.\")\n}\n</code></pre>\n<p>Note that in this example I used <code>ScopeReachableInventory</code> rather than <code>ScopeInventory</code>. The only real difference between these two is when the object is inside a closed container in the inventory. (For the most part, \"reachable\" is the objects that a player can do things with)<br>\nFor further clarification, in case you haven't come across it yet: the special variable <code>this</code> refers to the object that owns a script. In a verb, that's usually the object that has the verb, in a room enter/exit script <code>this</code> will be the room, and in a command script <code>this</code> will be the command.</p>\n<p>It is also possible to remove a verb, but in most cases this is much more effort than just having the verb check the conditions itself.<br>\nFor example, if an object has a <code>cook</code> verb and you want to remove it, you could do:</p>\n<pre><code>someobject.cook = null\n</code></pre>\n<p>This deletes the verb entirely. If the player attempts to use the verb after that, they will get the default \"You can't cook it.\" message. However, it would still be on the menus unless you manually remove it; so you would also want to do:</p>\n<pre><code>if (HasAttribute (someobject, \"generatedverbslist\")) {\n  if (ListContains (someobject.generatedverbslist, \"cook\")) {\n    list remove (someobject.generatedverbslist, \"cook\")\n  }\n}\nif (ListContains (someobject.inventoryverbs, \"cook\")) {\n  list remove (someobject.inventoryverbs, \"cook\")\n}\n</code></pre>\n<p>(In this case I used <code>someobject</code> as a placeholder for the object whose verb you want to remove)</p>\n<p>And if you want to add back a verb which has been removed, you would have to recreate it:</p>\n<pre><code>someobject.cook =&gt; {\n  // Script for the verb\n}\n</code></pre>\n<p>and add it back to the list:</p>\n<pre><code>if (not ListContains (someobject.inventoryverbs, \"cook\")) {\n  list add (someobject.inventoryverbs, \"cook\")\n}\n</code></pre>\n<p>It can sometimes be useful to change which verbs are in the lists to be displayed. However, actually removing a verb from the object is usually more work than just making the verb check whether it can be used, so it can display a message otherwise.</p>\n<p>I hope that makes sense.</p>\n\n",
      "PostDate": "2023-06-30T09:40:16.1165332Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
