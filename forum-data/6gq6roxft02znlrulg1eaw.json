{
  "Topic": {
    "TopicId": "6gq6roxft02znlrulg1eaw",
    "ForumId": "10",
    "Title": "Puzzle with scales (working with a group of multiple identical objects)",
    "LastUpdated": "2020-04-29T17:25:02.6292987Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e6f6beb8-dcb7-4db1-a7ec-592118379b83",
      "UserId": 474644,
      "Username": "KFL",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d1fb4ec3d33c8532886b04c53b19bf18?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm hoping to make a puzzle that requires the player to balance a scale by putting a certain number of different weights on one side to balance out one heavy weight on the other.  The player finds a few different baskets filled with weights and needs to figure out how many of each to use.\r\n\r\nHow do I make it so they have to choose how MANY of a certain object to pick up/use? I could just make the \"weights\" a plural object and have the player put them as a collective unit on the scale, but that doesn't make for much of a puzzle.  I'm assuming doing something with attributes is going to be involved but I haven't worked with them enough to know what I'm doing.\r\n\r\nAny ideas?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm hoping to make a puzzle that requires the player to balance a scale by putting a certain number of different weights on one side to balance out one heavy weight on the other.  The player finds a few different baskets filled with weights and needs to figure out how many of each to use.</p>\n<p>How do I make it so they have to choose how MANY of a certain object to pick up/use? I could just make the \"weights\" a plural object and have the player put them as a collective unit on the scale, but that doesn't make for much of a puzzle.  I'm assuming doing something with attributes is going to be involved but I haven't worked with them enough to know what I'm doing.</p>\n<p>Any ideas?</p>\n\n",
      "PostDate": "2020-04-29T17:25:02.6292987Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7c6ba1de-866e-400c-b89b-a7a3f6022026",
      "UserId": 442719,
      "Username": "Phadion",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I highly doubt this is the best way of going about this, and you should probably wait for a more experienced person to reply, but you could make different scenery objects for the different amount of weights. (naming them \"weight\", \"2 weights\", \"3 weights\", etc.)  That way the player could input \"pick up 3 weights\" for example and have it do something different then if they picked up another number of weights.",
      "EditableFormat": "markdown",
      "HTML": "<p>I highly doubt this is the best way of going about this, and you should probably wait for a more experienced person to reply, but you could make different scenery objects for the different amount of weights. (naming them \"weight\", \"2 weights\", \"3 weights\", etc.)  That way the player could input \"pick up 3 weights\" for example and have it do something different then if they picked up another number of weights.</p>\n\n",
      "PostDate": "2020-04-30T02:26:16.3952125Z",
      "LastEditDate": "2020-04-30T17:13:45.5092078Z",
      "link": null
    },
    {
      "PostId": "9ae4fdd9-9955-4cc4-9a15-36611e5abf0d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In the past I've made a system which uses objects named \"four weights\", \"three weights\", \"two weights\", and \"weight\" stacked inside each other (and a script so that when they are placed in the same location, they automatically renumber). I'd make all except the highest number turn into scenery, so they can be accessed but don't show up in the room's list of objects.\r\n\r\nThe biggest problem is that you'd need to rewrite the \"inventory\" command to skip the extra objects; and alter the javascript to hide them. On the other hand, that shouldn't actually be too difficult now I've got a better understanding of how the Quest JS frontend works. In theory, I could change the object's listalias to something like `[multiple:weight:3]`, hide all except the highest number, and then have a dropdown or spinner control appear next to the verb buttons when one is selected.\r\n\r\nI posted this once before, but was told that I'm stupid, and should just make a single item that prompts the player to type a number after they drop it.\r\n\r\n<details>\r\n<summary>But here's a rough idea of how the system would work.</summary>\r\n\r\nA weight's `changedparent` script:\r\n```\r\nif (not GetBoolean (game, \"movingstack\") {\r\n  if (IsDefined (\"oldvalue\")) {\r\n    if (not oldvalue = null) {\r\n      game.movingstack = true\r\n      objects = FilterByAttribute (GetDirectChildren (oldvalue), \"prototype\", this.prototype)\r\n      for (count, 0, this.number-2) {\r\n        if (ListCount (objects) > count) {\r\n          obj = ListItem (objects, count)\r\n          obj.parent = this.parent\r\n        }\r\n        else {\r\n          CloneObject (this)\r\n        }\r\n      }\r\n      game.movingstack = false\r\n      CountStack (oldvalue, this.prototype)\r\n    }\r\n  }\r\n  CountStack (oldvalue, this.prototype)\r\n}\r\n```\r\nAnd the function:\r\n```\r\n<function name=\"CountStack\" parameters=\"location, type\">\r\n  if (not location = null) {\r\n    number = 0\r\n    last = null\r\n    foreach (object, GetDirectChildren(location)) {\r\n      if (object.prototype = type) {\r\n        number = number + 1\r\n        last = object\r\n        object.scenery = true\r\n        object.alt = Split(object.pluralalias)\r\n        object.number = number\r\n        if (number = 1) {\r\n          object.alias = \"one \" + object.singlealias\r\n          list add (object.alt, \"one \" + object.singlealias\")\r\n          list add (object.alt, \"1 \" + object.singlealias\")\r\n        }\r\n        else {\r\n          object.alias = ToWords(number) + \" \" + object.pluralalias\r\n          list add (object.alt, ToString(number) + \" \" + object.pluralalias\")\r\n        }\r\n      }\r\n    }\r\n    if (not last = null) {\r\n      last.scenery = false\r\n      if (number = 1) {\r\n        last.alias = last.singlealias\r\n      }\r\n    }\r\n  }\r\n</function>\r\n```\r\nThis means that you can create an object with attributes `number` (initially 1), `singlealias` (\"weight\"), `pluralalias` (\"weights\"), and when multiple clones of it are put in the same place, they will automatically be numbered so that commands like \"get four weights\" and \"drop 2 weights\" will work as expected. \"drop weight\" will drop just one; and \"get weights\" will pop up a disambiguation menu asking how many (which the player can respond to by typing a number, because they'll be in numerical order).\r\n\r\nAny verbs on those objects, or things like \"use\", should check the number of the object being used.\r\n\r\nThe additional objects become scenery, but I think any in the inventory list will still show up in the inventory pane if it's enabled. For more on how to resolve that, ask me when I'm not being called to lunch.\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>In the past I've made a system which uses objects named \"four weights\", \"three weights\", \"two weights\", and \"weight\" stacked inside each other (and a script so that when they are placed in the same location, they automatically renumber). I'd make all except the highest number turn into scenery, so they can be accessed but don't show up in the room's list of objects.</p>\n<p>The biggest problem is that you'd need to rewrite the \"inventory\" command to skip the extra objects; and alter the javascript to hide them. On the other hand, that shouldn't actually be too difficult now I've got a better understanding of how the Quest JS frontend works. In theory, I could change the object's listalias to something like <code>[multiple:weight:3]</code>, hide all except the highest number, and then have a dropdown or spinner control appear next to the verb buttons when one is selected.</p>\n<p>I posted this once before, but was told that I'm stupid, and should just make a single item that prompts the player to type a number after they drop it.</p>\n<details>\n<summary>But here's a rough idea of how the system would work.</summary>\n<p>A weight's <code>changedparent</code> script:</p>\n<pre><code>if (not GetBoolean (game, \"movingstack\") {\n  if (IsDefined (\"oldvalue\")) {\n    if (not oldvalue = null) {\n      game.movingstack = true\n      objects = FilterByAttribute (GetDirectChildren (oldvalue), \"prototype\", this.prototype)\n      for (count, 0, this.number-2) {\n        if (ListCount (objects) &gt; count) {\n          obj = ListItem (objects, count)\n          obj.parent = this.parent\n        }\n        else {\n          CloneObject (this)\n        }\n      }\n      game.movingstack = false\n      CountStack (oldvalue, this.prototype)\n    }\n  }\n  CountStack (oldvalue, this.prototype)\n}\n</code></pre>\n<p>And the function:</p>\n<pre><code>&lt;function name=\"CountStack\" parameters=\"location, type\"&gt;\n  if (not location = null) {\n    number = 0\n    last = null\n    foreach (object, GetDirectChildren(location)) {\n      if (object.prototype = type) {\n        number = number + 1\n        last = object\n        object.scenery = true\n        object.alt = Split(object.pluralalias)\n        object.number = number\n        if (number = 1) {\n          object.alias = \"one \" + object.singlealias\n          list add (object.alt, \"one \" + object.singlealias\")\n          list add (object.alt, \"1 \" + object.singlealias\")\n        }\n        else {\n          object.alias = ToWords(number) + \" \" + object.pluralalias\n          list add (object.alt, ToString(number) + \" \" + object.pluralalias\")\n        }\n      }\n    }\n    if (not last = null) {\n      last.scenery = false\n      if (number = 1) {\n        last.alias = last.singlealias\n      }\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>This means that you can create an object with attributes <code>number</code> (initially 1), <code>singlealias</code> (\"weight\"), <code>pluralalias</code> (\"weights\"), and when multiple clones of it are put in the same place, they will automatically be numbered so that commands like \"get four weights\" and \"drop 2 weights\" will work as expected. \"drop weight\" will drop just one; and \"get weights\" will pop up a disambiguation menu asking how many (which the player can respond to by typing a number, because they'll be in numerical order).</p>\n<p>Any verbs on those objects, or things like \"use\", should check the number of the object being used.</p>\n<p>The additional objects become scenery, but I think any in the inventory list will still show up in the inventory pane if it's enabled. For more on how to resolve that, ask me when I'm not being called to lunch.</p>\n</details>\n\n",
      "PostDate": "2020-04-30T11:21:05.6071671Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a73b6d06-9bf5-4f77-8bc2-609edc15501c",
      "UserId": 474644,
      "Username": "KFL",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d1fb4ec3d33c8532886b04c53b19bf18?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you!</p>\n\n",
      "PostDate": "2020-05-03T03:04:06.3044776Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
