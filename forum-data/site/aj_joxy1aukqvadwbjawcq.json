{
  "Topic": {
    "TopicId": "aj_joxy1aukqvadwbjawcq",
    "ForumId": "16",
    "Title": "Posting Large Samples of Code",
    "LastUpdated": "2020-12-11T21:07:03.2777945Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a7b7f0d8-4c75-449c-b16f-f1201764a84a",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nWhen I post code, I want it nice and neat (and easy to scroll past).\r\n\r\nI learned how to make it only so high, with a scrollbar:\r\n\r\nhttp://textadventures.co.uk/forum/questkit/topic/d5gbwotaauiavzskhqaxtg/quest-6-object-links-hack-in-progress#df9f8840-0d5c-430d-96ec-d1ce4ac48e10\r\n\r\n...but I couldn't figure out how to stop the word-wrapping.  ```white-space: nowrap``` made a 200 line bit of code turn into one long line of text.  I admit that it did let me scroll left and right at that point, but I wish to keep my line-breaks.\r\n\r\nThis is what I'm doing:\r\n\r\n````\r\n<div id\"code-div\" style=\"max-height:200px;overflow:scroll\">\r\n\r\n```\r\ncode goes here\r\n\r\n```\r\n\r\n</div>\r\n````\r\nAny advice on how to control my code's overflow?\r\n\r\n---\r\nEDIT\r\n\r\nI tried it with ```<pre><code>``` instead of ```` ``` ````, too, but it acted the same way either way.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>When I post code, I want it nice and neat (and easy to scroll past).</p>\n<p>I learned how to make it only so high, with a scrollbar:</p>\n<p>http://textadventures.co.uk/forum/questkit/topic/d5gbwotaauiavzskhqaxtg/quest-6-object-links-hack-in-progress#df9f8840-0d5c-430d-96ec-d1ce4ac48e10</p>\n<p>...but I couldn't figure out how to stop the word-wrapping.  <code>white-space: nowrap</code> made a 200 line bit of code turn into one long line of text.  I admit that it did let me scroll left and right at that point, but I wish to keep my line-breaks.</p>\n<p>This is what I'm doing:</p>\n<pre><code>&lt;div id\"code-div\" style=\"max-height:200px;overflow:scroll\"&gt;\n\n```\ncode goes here\n\n```\n\n&lt;/div&gt;\n</code></pre>\n<p>Any advice on how to control my code's overflow?</p>\n<hr>\n<p>EDIT</p>\n<p>I tried it with <code>&lt;pre&gt;&lt;code&gt;</code> instead of <code>```</code>, too, but it acted the same way either way.</p>\n\n",
      "PostDate": "2020-12-11T21:07:03.2777945Z",
      "LastEditDate": "2020-12-11T21:10:13.8958755Z",
      "link": null
    },
    {
      "PostId": "f62f10f6-c6a8-4d54-8ff3-0ead55b2e02d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n<pre id\"code-div\" style=\"max-height:100px;overflow:scroll;\"><code style=\"white-space: pre\">\r\n\r\nhere's some code\r\n\r\n</code></pre>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>&lt;pre id\"code-div\" style=\"max-height:100px;overflow:scroll;\"&gt;&lt;code style=\"white-space: pre\"&gt;\n\nhere's some code\n\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n",
      "PostDate": "2020-12-11T22:56:35.0739131Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af8d2f95-ad08-4be0-b459-81ddba1579b4",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<pre id=\"code-div\" style=\"max-height:200px;overflow:scroll;\"><code style=\"white-space: pre\">\r\n\r\nThank you!  I've been driving myself crazy trying to figure this out and it has been driving me so crazy that I'm writing run-on sentences but now I think I'm okay.\r\n\r\n</code></pre>",
      "EditableFormat": "markdown",
      "HTML": "<pre style=\"max-height: 200px; overflow: scroll\"><code style=\"white-space: pre\">\n\nThank you!  I've been driving myself crazy trying to figure this out and it has been driving me so crazy that I'm writing run-on sentences but now I think I'm okay.\n\n</code></pre>\n\n",
      "PostDate": "2020-12-12T00:42:32.5245587Z",
      "LastEditDate": "2020-12-12T08:53:33.4227056Z",
      "link": null
    },
    {
      "PostId": "1eb4433f-b42a-4b6c-bf43-5b16e629f2db",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, that looked like I wanted it to look before I actually posted it . . .\r\n\r\nI hate it when the forum does that.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, that looked like I wanted it to look before I actually posted it . . .</p>\n<p>I hate it when the forum does that.</p>\n\n",
      "PostDate": "2020-12-12T00:43:38.9068489Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "85a77836-5a1c-46e7-8a0d-9a22b0180217",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm playing around with the CSS trying to get this to behave… But not being able to see the result without posting, and the stupid \"You can't post that here\" message  make it really annoying.\r\n\r\nThink I got it now\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre\">Hmm does it not work like it's supposed to? I only tested it in the preview so it's hard to be sure. Can't wait to see what this looks like when actually posted. Especially if I put in an even longer line to make sure it doesn't give the page a horizontal scroll bar.\r\n\r\nThe hardest thing with this method is that you need to be careful with the line breaks.\r\nLike, if you want your code to come to the top of the box, it has to start on the same line as the &lt;pre>, which is easy to forget.\r\n\r\nAlso worth noting is that you can use \"overflow:auto\",\r\n   which is like scroll\r\n      but only shows the scroll bars\r\n         if the text is big enough to need them</code></pre>\r\n\r\n```\r\nlet's compare that to a standard ``` block, just to see if my style changes anything else that might not be so obvious at a casual glance\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm playing around with the CSS trying to get this to behave… But not being able to see the result without posting, and the stupid \"You can't post that here\" message  make it really annoying.</p>\n<p>Think I got it now</p>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">Hmm does it not work like it's supposed to? I only tested it in the preview so it's hard to be sure. Can't wait to see what this looks like when actually posted. Especially if I put in an even longer line to make sure it doesn't give the page a horizontal scroll bar.\n\nThe hardest thing with this method is that you need to be careful with the line breaks.\nLike, if you want your code to come to the top of the box, it has to start on the same line as the &lt;pre&gt;, which is easy to forget.\n\nAlso worth noting is that you can use \"overflow:auto\",\n   which is like scroll\n      but only shows the scroll bars\n         if the text is big enough to need them</code></pre>\n<pre><code>let's compare that to a standard ``` block, just to see if my style changes anything else that might not be so obvious at a casual glance\n</code></pre>\n\n",
      "PostDate": "2020-12-12T11:19:42.8820193Z",
      "LastEditDate": "2020-12-12T11:35:01.159158Z",
      "link": null
    },
    {
      "PostId": "a1face4d-a79b-42ed-88bc-703cf298241d",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "[MANIACAL LAUGH]\r\n\r\nThis is good, stuff, right here!\r\n\r\nI needed a good laugh.",
      "EditableFormat": "markdown",
      "HTML": "<p>[MANIACAL LAUGH]</p>\n<p>This is good, stuff, right here!</p>\n<p>I needed a good laugh.</p>\n\n",
      "PostDate": "2020-12-12T11:31:41.7275465Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "174b6895-338f-4df9-923e-2b79c5270f3f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Seems to behave :p\r\n\r\nThe post above uses:\r\n```\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">\r\n```\r\nIf I just use ``` then it seems to grow up to 1054px; so I used the same number. No idea if this is a fixed constant or is programatically generated somewhere I can't see.",
      "EditableFormat": "markdown",
      "HTML": "<p>Seems to behave :p</p>\n<p>The post above uses:</p>\n<pre><code>&lt;pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"&gt;&lt;code style=\"white-space: pre;\"&gt;\n</code></pre>\n<p>If I just use ``` then it seems to grow up to 1054px; so I used the same number. No idea if this is a fixed constant or is programatically generated somewhere I can't see.</p>\n\n",
      "PostDate": "2020-12-12T11:36:36.598635Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4be8c0d8-69bc-49dd-84e7-f51593176f09",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome!\r\n\r\nTesting . . .\r\n\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">\"use strict\"\r\n\r\n\r\n//====================\r\n// OBJECT LINKS LIB  |\r\n//====================\r\n// by KV             |\r\n//====================\r\n// for QuestJS v 0.3 |\r\n//====================\r\n// Version 1         |\r\n//====================\r\n\r\n/*\r\n * IMPORTANT!!!\r\n * ------------\r\n * \r\n * Make sure you have modifed DEFAULT_ROOM.description and placed the code block in the\r\n * code so the changes are loaded BEFORE ANY ROOMS ARE CREATED during game load!!!\r\n * \r\n * Normally, this should go in data.js, above any code that creates any rooms.\r\n * \r\n * Here is the code:\r\n------------------------------------------------------------------\r\n\r\n// CODE BEGINS\r\n\r\nDEFAULT_ROOM.description = function() {\r\n    if (game.dark) {\r\n      printOrRun(game.player, this, \"darkDesc\");\r\n      return true;\r\n    }\r\n    if(settings.linksEnabled){\r\n\t\tdisableExistingObjectLinks()\r\n\t}\r\n    for (let line of settings.roomTemplate) {\r\n      msg(line);\r\n    }\r\n    return true;\r\n}\r\n\r\n// END OF CODE\r\n\r\n--------------------------------------------------------------------\r\n * \r\n */\r\n\r\n\r\n\r\n//============================================================================\r\n\r\n\r\n//Capture clicks for the objects links\r\nsettings.clickEvents = [{one0:`<span>_PLACEHOLDER_</span>`}]\r\nwindow.onclick = function(event) {\r\n\tif (!event.target.matches('.droplink')) {\r\n\t\t$(\".dropdown-content\").hide();\r\n\t}else{\r\n\t\tsettings.clickEvents.unshift(event.target)\r\n\t\tif (typeof(settings.clickEvents[1].nextSibling)!=='undefined' &&  settings.clickEvents[1].nextSibling!==null){\r\n\t\t\tif (settings.clickEvents[1] !== event.target && settings.clickEvents[1].nextSibling.style.display===\"inline\" && event.target.matches('.droplink')){\r\n\t\t\t\t$(\".dropdown-content\").hide();\r\n\t\t\t\tevent.target.nextSibling.style.display=\"inline\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n//===================================\r\n\r\n// SETTINGS\r\n\r\nsettings.roomTemplate = [\r\n  \"{hereDesc}\",\r\n  \"{objectsHere:You can see {objectsLinks} here.}\",\r\n  \"{exitsHere:You can go {exits}.}\",\r\n]\r\n\r\nsettings.linksEnabled = true\r\n\r\n\r\n// Make it easy to find a command's opposite\r\nsettings.cmdOpps = {\r\n\t\"Switch on\":\"Switch off\",\r\n\t\"Switch off\":\"Switch on\",\r\n\t\"Take\":\"Drop\",\r\n\t\"Drop\":\"Take\",\r\n\t\"Wear\":\"Remove\",\r\n\t\"Remove\":\"Wear\",\r\n\t\"Open\":\"Close\",\r\n\t\"Close\":\"Open\",\r\n}\r\n\r\n// END OF SETTINGS\r\n\r\n\r\n// TURNSCRIPT\r\n\r\ncreateItem(\"updateDropdownVerblists_Turnscript\",{\r\n\teventPeriod:1,\r\n\teventActive:true,\r\n\teventScript:()=>{\r\n\t\tif(settings.linksEnabled){\r\n\t\t\tupdateDropdownVerblists()\r\n\t\t}else{\r\n\t\t\tw.updateDropdownVerblists_Turnscript.eventActive = false\r\n\t\t}\r\n\t},\r\n})\r\n\r\n\r\n\r\n//===========================\r\n// TEXT PROCESSOR ADDITIONS |\r\n//===========================\r\n\r\ntp.text_processors.objectsHereLinks = function(arr, params) {\r\n  //let listOfOjects = scopeHereListed();\r\n  //let objArr = []\r\n  //listOfOjects.forEach(o=>{\r\n\t  //let ol = getObjectLink(o,true)//Adding true arg to mark this is for objectsHereLinks!!!\r\n\t  //objArr.push(ol)\r\n  //})\r\n  //listOfOjects = objArr\r\n  let listOfOjects = scopeHereListed().map(o => getObjectLink(o,true))\r\n  return listOfOjects.length === 0 ? \"\" : arr.join(\":\");\r\n};\r\n\r\ntp.text_processors.objectsLinks = function(arr, params) {\r\n  //const listOfOjects = scopeHereListed();\r\n  //let objArr = []\r\n  //listOfOjects.forEach(o=>{\r\n\t  //let ol = getObjectLink(o,true)\r\n\t  //objArr.push(ol)\r\n  //})\r\n  let objArr = scopeHereListed().map(o => getObjectLink(o,true))\r\n  return formatList(objArr, {article:INDEFINITE, lastJoiner:lang.list_and, modified:true, nothing:lang.list_nothing, loc:game.player.loc});\r\n}\r\n\r\ntp.text_processors.objectLink = function(obj, params) {\r\n\treturn getObjectLink(w[obj[0]],false,false)\r\n}\r\n\r\n//=================================\r\n// END OF TEXT PROCESSOR ADDITIONS |\r\n//==================================\r\n\r\n\r\n\r\n// FUNCTIONS\r\n// ---------\r\n\r\nfunction capFirst(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\n\r\nfunction getDisplayAlias(obj,art=INDEFINITE){\r\n\treturn lang.getName(obj,{article:art})\r\n}\r\n\r\n\r\n// NOTE: getAlias is not used by any function in this library.\r\nfunction getAlias(obj){\r\n\treturn obj.alias || obj.name\r\n};\r\n\r\nfunction enterButtonPress(cmd){\r\n\t//Calling this function with no arg will cause s to default to the text in the textbox.\r\n\tif(cmd) $('#textbox').val(cmd)\r\n\tconst s = $('#textbox').val();\r\n    io.msgInputText(s); //This emulates printing the echo of the player's command\r\n    if (s) {\r\n\t\tif (io.savedCommands[io.savedCommands.length - 1] !== s) {\r\n\t\t\tio.savedCommands.push(s);\r\n        }\r\n        io.savedCommandsPos = io.savedCommands.length;\r\n        parser.parse(s);\r\n        $('#textbox').val('');\r\n\t}\r\n};\r\n\r\nfunction clickedCmdLink(s){\r\n\tif (s) {\r\n\t\tif (io.savedCommands[io.savedCommands.length - 1] !== s) {\r\n\t\t  io.savedCommands.push(s);\r\n\t\t}\r\n\t\tio.savedCommandsPos = io.savedCommands.length;\r\n\t}\r\n}\r\n\r\nfunction getObjectLink(obj,isScopeHere=false,addArticle=true){\r\n\t//if isScopeHere is sent true, this is for a room description!\r\n\tif(settings.linksEnabled){\r\n\t\tvar roomClass = isScopeHere ? \"room-desc\" : \"\"\r\n\t\tvar oName = obj.name\r\n\t\tvar id = obj.alias || obj.name;\r\n\t\tvar prefix = \"\";\r\n\t\tif (obj.prefix){\r\n\t\t\tprefix = obj.prefix+\" \";\r\n\t\t}\r\n\t\tvar dispAlias = getDisplayAlias(obj)\r\n\t\tif (addArticle) {prefix = dispAlias.replace(obj.alias,'')}\r\n\t\tdisableObjectLink($(`[obj=\"${oName}\"]`))\r\n\t\tvar s = prefix+`<span class=\"object-link dropdown ${roomClass}\">`;\r\n\t\ts +=`<span onclick=\"toggleDropdown($(this).attr('obj'))\" obj=\"${oName}\" class=\"droplink ${roomClass}\" name=\"${oName}-link\">${id}</span>`;\r\n\t\ts += `<span id=\"${oName}\" class=\"dropdown-content ${roomClass}\">`;\r\n\t\tlet verbArr = obj.getVerbs()\r\n\t\tif (verbArr.length>0){\r\n\t\t\tverbArr.forEach (o=>{\r\n\t\t\t\to = capFirst(o)\r\n\t\t\t\ts += `<span class=\"${roomClass}\" onclick=\"$(this).parent().toggle();handleObjLnkClick('${o} '+$(this).attr('obj-alias'),this,'${o}','${id}');\" link-verb=\"${o}\" obj-alias=\"${id}\" obj=\"${oName}\">${o}</span>`;\r\n\t\t\t})\r\n\t\t}\r\n\t\ts += \"</span></span>\";\r\n\t\treturn s;\r\n\t}else{\r\n\t\tvar s = obj.alias || obj.name;\r\n\t\treturn s\r\n\t}\r\n};\r\n\r\nfunction toggleDropdown(element) {\r\n    $(\"#\"+element+\"\").toggle();\r\n}\r\n \r\nfunction handleObjLnkClick(cmd,el,verb,objAlias){\r\n\tparser.msg(\"handleObjLnkClick:  Handling object link click . . .\")\r\n\tparser.msg(\"cmd: \"+cmd)\r\n\tparser.msg(\"verb: \"+verb)\r\n\tparser.msg(\"objAlias: \"+objAlias)\r\n\tparser.msg(\"Sending to enterButtonPress . . .\")\r\n\tenterButtonPress(cmd)\r\n}\r\n\r\nfunction updateDropdownVerblists(){\r\n\t//parser.debug = true\r\n\tlet verbEls = $(\"[link-verb]\")\r\n\tObject.keys(verbEls).forEach(i => {\r\n\t\tlet el = verbEls[i]\r\n\t\t//if(parser.debug) {\r\n\t\t\t//console.log(\"verbEls\"); \r\n\t\t\t//console.log(typeof(verbEls));\r\n\t\t\t//console.log(verbEls);\r\n\t\t\t//console.log(\"verbEls[i]\");\r\n\t\t\t//console.log(verbEls[i])\r\n\t\t\t//console.log(\"el\");\r\n\t\t\t//console.log(typeof(el));\r\n\t\t\t//console.log(el);\r\n\t\t\t//console.log(el[0]);\r\n\t\t\t//console.log(typeof(el[0]));\r\n\t\t//}\r\n\t\tlet verb = $(el).attr(\"link-verb\")\r\n\t\tif(!verb) return\r\n\t\tlet verbOpp = settings.cmdOpps[verb] || null\r\n\t\tif(!verbOpp) {\r\n\t\t\t//if(parser.debug) {console.log(\"NO opposite for \" + verb)}\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//if(parser.debug) {console.log(\"i:\");console.log(i);console.log(\"el:\");console.log(el);console.log(\"verb:\");console.log(verb);console.log(\"verbOpp\");}\r\n\t\tlet objName = $(el).attr(\"obj\")\r\n\t\t//if(parser.debug) {console.log(\"objName:\");console.log(objName);console.log(\"obj:\");}\r\n\t\tlet obj = w[objName]\r\n\t\t//if(parser.debug) {console.log(obj);var hr = \"=======================================\";console.log(hr);console.log(\"Do the verbs match the getVerbs? . . .\");console.log(hr);}\r\n\t\tif(!obj.getVerbs) return\r\n\t\tvar objGetVerbs = obj.getVerbs()\r\n\t\t//if(parser.debug) {console.log(\"objGetVerbs:\");console.log(objGetVerbs);}\r\n\t\tobjGetVerbs.forEach(newVerb => {\r\n\t\t\t//if(parser.debug) {console.log(\"Checking getVerbs() for \" + objName + \" . . .\");console.log(newVerb);}\r\n\t\t\tif (verbOpp != newVerb) return\r\n\t\t\t//if(parser.debug) {console.log(\"Found one!\");console.log(objName + \" needs \" + verb  + \" changed to \" + newVerb + \"!\");}\r\n\t\t\tif(!el.parentElement){\r\n\t\t\t\t//if(parser.debug){ console.log(\"No element parent element.  QUITTING!\");} \r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t//Change the verb to its opposite!\r\n\t\t\tswitchDropdownVerb(el,newVerb,objName)\r\n\t\t\t//if(parser.debug) {console.log(\"DONE!\")}\r\n\t\t\treturn true\r\n\t\t\t\r\n\t\t})\r\n\t})\r\n}\r\n\r\nfunction switchDropdownVerb(el, newVerb, objName){\r\n\tif (!objName) {let objName = $(el).attr(\"obj\")}\r\n\tlet oldVerb = $(el).attr(\"link-verb\")\r\n\tif (!newVerb) {let newVerb = settings.cmdOpps[oldVerb]}\r\n\tlet str = el.parentElement.innerHTML\r\n\tlet regexp = new RegExp(oldVerb,'g')\r\n\tlet repl = str.replace(regexp,newVerb);\r\n\tel.parentElement.innerHTML = repl\r\n\t$(el).attr(\"link-verb\",newVerb)\r\n\t//parser.msg(`Replaced '${oldVerb}' on ${objName} with '${newVerb}'.`)\r\n}\r\n\r\nfunction disableExistingObjectLinks(bool=false){\r\n\t//if bool is false, this only disables existing object links printed using the room description function\r\n\t//if bool is true, this disables ALL existing object links\r\n\t//parser.msg(\"running disableExistingObjectLinks!\")\r\n\t//Checks that this doesn't remove \"good\" links.\r\n\tif (bool){\r\n\t\t$(\".droplink\").removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\r\n\t\t$(\".object-link\").removeClass(\"dropdown\")\r\n\t\t$(\".dropdown\").removeClass(\"dropdown\")\r\n\t\t$(\".dropdown-content\").remove()\r\n\t} else {\r\n\t\t$(\".room-desc.droplink\").removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\r\n\t\t$(\".room-desc.object-link\").removeClass(\"dropdown\")\r\n\t\t$(\".room-desc.dropdown\").removeClass(\"dropdown\")\r\n\t\t$(\".room-desc.dropdown-content\").remove()\r\n\t}\r\n}\r\n\r\nfunction disableObjectLink(el){\r\n\tlet objName = $(el).attr(\"obj\")\r\n\t$(el).removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\r\n\t$(el).removeClass(\"dropdown\")\r\n\t$(el).removeClass(\"dropdown\")\r\n\t$(`#${objName}`).remove()\r\n}\r\n</code></pre>",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome!</p>\n<p>Testing . . .</p>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">\"use strict\"\n\n\n//====================\n// OBJECT LINKS LIB  |\n//====================\n// by KV             |\n//====================\n// for QuestJS v 0.3 |\n//====================\n// Version 1         |\n//====================\n\n/*\n * IMPORTANT!!!\n * ------------\n * \n * Make sure you have modifed DEFAULT_ROOM.description and placed the code block in the\n * code so the changes are loaded BEFORE ANY ROOMS ARE CREATED during game load!!!\n * \n * Normally, this should go in data.js, above any code that creates any rooms.\n * \n * Here is the code:\n------------------------------------------------------------------\n\n// CODE BEGINS\n\nDEFAULT_ROOM.description = function() {\n    if (game.dark) {\n      printOrRun(game.player, this, \"darkDesc\");\n      return true;\n    }\n    if(settings.linksEnabled){\n\t\tdisableExistingObjectLinks()\n\t}\n    for (let line of settings.roomTemplate) {\n      msg(line);\n    }\n    return true;\n}\n\n// END OF CODE\n\n--------------------------------------------------------------------\n * \n */\n\n\n\n//============================================================================\n\n\n//Capture clicks for the objects links\nsettings.clickEvents = [{one0:`<span>_PLACEHOLDER_</span>`}]\nwindow.onclick = function(event) {\n\tif (!event.target.matches('.droplink')) {\n\t\t$(\".dropdown-content\").hide();\n\t}else{\n\t\tsettings.clickEvents.unshift(event.target)\n\t\tif (typeof(settings.clickEvents[1].nextSibling)!=='undefined' &amp;&amp;  settings.clickEvents[1].nextSibling!==null){\n\t\t\tif (settings.clickEvents[1] !== event.target &amp;&amp; settings.clickEvents[1].nextSibling.style.display===\"inline\" &amp;&amp; event.target.matches('.droplink')){\n\t\t\t\t$(\".dropdown-content\").hide();\n\t\t\t\tevent.target.nextSibling.style.display=\"inline\"\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//===================================\n\n// SETTINGS\n\nsettings.roomTemplate = [\n  \"{hereDesc}\",\n  \"{objectsHere:You can see {objectsLinks} here.}\",\n  \"{exitsHere:You can go {exits}.}\",\n]\n\nsettings.linksEnabled = true\n\n\n// Make it easy to find a command's opposite\nsettings.cmdOpps = {\n\t\"Switch on\":\"Switch off\",\n\t\"Switch off\":\"Switch on\",\n\t\"Take\":\"Drop\",\n\t\"Drop\":\"Take\",\n\t\"Wear\":\"Remove\",\n\t\"Remove\":\"Wear\",\n\t\"Open\":\"Close\",\n\t\"Close\":\"Open\",\n}\n\n// END OF SETTINGS\n\n\n// TURNSCRIPT\n\ncreateItem(\"updateDropdownVerblists_Turnscript\",{\n\teventPeriod:1,\n\teventActive:true,\n\teventScript:()=&gt;{\n\t\tif(settings.linksEnabled){\n\t\t\tupdateDropdownVerblists()\n\t\t}else{\n\t\t\tw.updateDropdownVerblists_Turnscript.eventActive = false\n\t\t}\n\t},\n})\n\n\n\n//===========================\n// TEXT PROCESSOR ADDITIONS |\n//===========================\n\ntp.text_processors.objectsHereLinks = function(arr, params) {\n  //let listOfOjects = scopeHereListed();\n  //let objArr = []\n  //listOfOjects.forEach(o=&gt;{\n\t  //let ol = getObjectLink(o,true)//Adding true arg to mark this is for objectsHereLinks!!!\n\t  //objArr.push(ol)\n  //})\n  //listOfOjects = objArr\n  let listOfOjects = scopeHereListed().map(o =&gt; getObjectLink(o,true))\n  return listOfOjects.length === 0 ? \"\" : arr.join(\":\");\n};\n\ntp.text_processors.objectsLinks = function(arr, params) {\n  //const listOfOjects = scopeHereListed();\n  //let objArr = []\n  //listOfOjects.forEach(o=&gt;{\n\t  //let ol = getObjectLink(o,true)\n\t  //objArr.push(ol)\n  //})\n  let objArr = scopeHereListed().map(o =&gt; getObjectLink(o,true))\n  return formatList(objArr, {article:INDEFINITE, lastJoiner:lang.list_and, modified:true, nothing:lang.list_nothing, loc:game.player.loc});\n}\n\ntp.text_processors.objectLink = function(obj, params) {\n\treturn getObjectLink(w[obj[0]],false,false)\n}\n\n//=================================\n// END OF TEXT PROCESSOR ADDITIONS |\n//==================================\n\n\n\n// FUNCTIONS\n// ---------\n\nfunction capFirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n\nfunction getDisplayAlias(obj,art=INDEFINITE){\n\treturn lang.getName(obj,{article:art})\n}\n\n\n// NOTE: getAlias is not used by any function in this library.\nfunction getAlias(obj){\n\treturn obj.alias || obj.name\n};\n\nfunction enterButtonPress(cmd){\n\t//Calling this function with no arg will cause s to default to the text in the textbox.\n\tif(cmd) $('#textbox').val(cmd)\n\tconst s = $('#textbox').val();\n    io.msgInputText(s); //This emulates printing the echo of the player's command\n    if (s) {\n\t\tif (io.savedCommands[io.savedCommands.length - 1] !== s) {\n\t\t\tio.savedCommands.push(s);\n        }\n        io.savedCommandsPos = io.savedCommands.length;\n        parser.parse(s);\n        $('#textbox').val('');\n\t}\n};\n\nfunction clickedCmdLink(s){\n\tif (s) {\n\t\tif (io.savedCommands[io.savedCommands.length - 1] !== s) {\n\t\t  io.savedCommands.push(s);\n\t\t}\n\t\tio.savedCommandsPos = io.savedCommands.length;\n\t}\n}\n\nfunction getObjectLink(obj,isScopeHere=false,addArticle=true){\n\t//if isScopeHere is sent true, this is for a room description!\n\tif(settings.linksEnabled){\n\t\tvar roomClass = isScopeHere ? \"room-desc\" : \"\"\n\t\tvar oName = obj.name\n\t\tvar id = obj.alias || obj.name;\n\t\tvar prefix = \"\";\n\t\tif (obj.prefix){\n\t\t\tprefix = obj.prefix+\" \";\n\t\t}\n\t\tvar dispAlias = getDisplayAlias(obj)\n\t\tif (addArticle) {prefix = dispAlias.replace(obj.alias,'')}\n\t\tdisableObjectLink($(`[obj=\"${oName}\"]`))\n\t\tvar s = prefix+`<span>`;\n\t\ts +=`<span name=\"${oName}-link\">${id}</span>`;\n\t\ts += `<span>`;\n\t\tlet verbArr = obj.getVerbs()\n\t\tif (verbArr.length&gt;0){\n\t\t\tverbArr.forEach (o=&gt;{\n\t\t\t\to = capFirst(o)\n\t\t\t\ts += `<span>${o}</span>`;\n\t\t\t})\n\t\t}\n\t\ts += \"</span></span>\";\n\t\treturn s;\n\t}else{\n\t\tvar s = obj.alias || obj.name;\n\t\treturn s\n\t}\n};\n\nfunction toggleDropdown(element) {\n    $(\"#\"+element+\"\").toggle();\n}\n \nfunction handleObjLnkClick(cmd,el,verb,objAlias){\n\tparser.msg(\"handleObjLnkClick:  Handling object link click . . .\")\n\tparser.msg(\"cmd: \"+cmd)\n\tparser.msg(\"verb: \"+verb)\n\tparser.msg(\"objAlias: \"+objAlias)\n\tparser.msg(\"Sending to enterButtonPress . . .\")\n\tenterButtonPress(cmd)\n}\n\nfunction updateDropdownVerblists(){\n\t//parser.debug = true\n\tlet verbEls = $(\"[link-verb]\")\n\tObject.keys(verbEls).forEach(i =&gt; {\n\t\tlet el = verbEls[i]\n\t\t//if(parser.debug) {\n\t\t\t//console.log(\"verbEls\"); \n\t\t\t//console.log(typeof(verbEls));\n\t\t\t//console.log(verbEls);\n\t\t\t//console.log(\"verbEls[i]\");\n\t\t\t//console.log(verbEls[i])\n\t\t\t//console.log(\"el\");\n\t\t\t//console.log(typeof(el));\n\t\t\t//console.log(el);\n\t\t\t//console.log(el[0]);\n\t\t\t//console.log(typeof(el[0]));\n\t\t//}\n\t\tlet verb = $(el).attr(\"link-verb\")\n\t\tif(!verb) return\n\t\tlet verbOpp = settings.cmdOpps[verb] || null\n\t\tif(!verbOpp) {\n\t\t\t//if(parser.debug) {console.log(\"NO opposite for \" + verb)}\n\t\t\treturn\n\t\t}\n\t\t//if(parser.debug) {console.log(\"i:\");console.log(i);console.log(\"el:\");console.log(el);console.log(\"verb:\");console.log(verb);console.log(\"verbOpp\");}\n\t\tlet objName = $(el).attr(\"obj\")\n\t\t//if(parser.debug) {console.log(\"objName:\");console.log(objName);console.log(\"obj:\");}\n\t\tlet obj = w[objName]\n\t\t//if(parser.debug) {console.log(obj);var hr = \"=======================================\";console.log(hr);console.log(\"Do the verbs match the getVerbs? . . .\");console.log(hr);}\n\t\tif(!obj.getVerbs) return\n\t\tvar objGetVerbs = obj.getVerbs()\n\t\t//if(parser.debug) {console.log(\"objGetVerbs:\");console.log(objGetVerbs);}\n\t\tobjGetVerbs.forEach(newVerb =&gt; {\n\t\t\t//if(parser.debug) {console.log(\"Checking getVerbs() for \" + objName + \" . . .\");console.log(newVerb);}\n\t\t\tif (verbOpp != newVerb) return\n\t\t\t//if(parser.debug) {console.log(\"Found one!\");console.log(objName + \" needs \" + verb  + \" changed to \" + newVerb + \"!\");}\n\t\t\tif(!el.parentElement){\n\t\t\t\t//if(parser.debug){ console.log(\"No element parent element.  QUITTING!\");} \n\t\t\t\treturn\n\t\t\t}\n\t\t\t//Change the verb to its opposite!\n\t\t\tswitchDropdownVerb(el,newVerb,objName)\n\t\t\t//if(parser.debug) {console.log(\"DONE!\")}\n\t\t\treturn true\n\t\t\t\n\t\t})\n\t})\n}\n\nfunction switchDropdownVerb(el, newVerb, objName){\n\tif (!objName) {let objName = $(el).attr(\"obj\")}\n\tlet oldVerb = $(el).attr(\"link-verb\")\n\tif (!newVerb) {let newVerb = settings.cmdOpps[oldVerb]}\n\tlet str = el.parentElement.innerHTML\n\tlet regexp = new RegExp(oldVerb,'g')\n\tlet repl = str.replace(regexp,newVerb);\n\tel.parentElement.innerHTML = repl\n\t$(el).attr(\"link-verb\",newVerb)\n\t//parser.msg(`Replaced '${oldVerb}' on ${objName} with '${newVerb}'.`)\n}\n\nfunction disableExistingObjectLinks(bool=false){\n\t//if bool is false, this only disables existing object links printed using the room description function\n\t//if bool is true, this disables ALL existing object links\n\t//parser.msg(\"running disableExistingObjectLinks!\")\n\t//Checks that this doesn't remove \"good\" links.\n\tif (bool){\n\t\t$(\".droplink\").removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\n\t\t$(\".object-link\").removeClass(\"dropdown\")\n\t\t$(\".dropdown\").removeClass(\"dropdown\")\n\t\t$(\".dropdown-content\").remove()\n\t} else {\n\t\t$(\".room-desc.droplink\").removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\n\t\t$(\".room-desc.object-link\").removeClass(\"dropdown\")\n\t\t$(\".room-desc.dropdown\").removeClass(\"dropdown\")\n\t\t$(\".room-desc.dropdown-content\").remove()\n\t}\n}\n\nfunction disableObjectLink(el){\n\tlet objName = $(el).attr(\"obj\")\n\t$(el).removeClass(\"droplink\").css(\"cursor\",\"default\").attr(\"name\",\"dead-droplink\")\n\t$(el).removeClass(\"dropdown\")\n\t$(el).removeClass(\"dropdown\")\n\t$(`#${objName}`).remove()\n}\n</code></pre>\n\n",
      "PostDate": "2020-12-12T13:53:39.0923781Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
