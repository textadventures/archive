{
  "Topic": {
    "TopicId": "pmhwwvggakghyyqhzio0aq",
    "ForumId": "10",
    "Title": "How do you make an object both a container and a surface at the same time?",
    "LastUpdated": "2020-11-23T13:18:05.9837777Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "dbeb0fd9-22ad-4fb8-a251-e0d4c5b7ca14",
      "UserId": 425561,
      "Username": "Jerrid",
      "AvatarUrl": "https://i.imgur.com/ryDLb49b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How do you make an object both a container and a surface at the same time?  I know I can not be the only one who has asked this question, yet going through several pages of searching and wording the search differently a few times failed to show me a thread with that, at least by title and description, as well as looking at general guides of containers and surfaces.  Either that or I am just so tired I am simply missing it.  I've also tried various things for the different containers and objects in game, but I can not get it to work.  Maybe it is that I am just so tired and the answer is literally staring me in the face, but I got up extra early just to work on this... (this game is haunting me in my sleep... o_0 )\r\n\r\nRegardless I want to have a night stand be the parent and the alarm clock be the child (if there is another way that is fine and maybe I am wording or thinking of this all wrong).  You can not see the alarm clock until you look at the nightstand however.  Now I believe a \"surface\" would work for that.  But I also want this nightstand to have a drawer, meaning it is a container and inside will be \"something\".  If I make it a container however, the alarm clock will not be seen simply by \"looking\" at the night stand first, which defeats the purpose.  I want lots of objects around, on and in containers, but not to overload the player with descriptions when they first walk into a room, only \"after\" they have \"looked\" at something directly and of course also opened them.\r\n\r\nI am hoping I am just over looking something and it is an easy fix, opposed to some kind of long intricate complicated code.  But I will take what I can get and be thankful for it and my bloodshot eyes will thank you as well!  ^^!  It should be noted that there will be a lot of objects with items in my game that will need this feature.  Almost every room will have something similar, maybe multiple surfaces/container hybrids.  Players will be exploring and thus looking around a lot and I need containers or surfaces or whatever to act the way I need them to.  It wont be a simple matter of making the nightstand not have a drawer or for a dresser with drawers not to have anything invisible on top of it, until it is looked at.\r\n\r\nI think I made this coherent enough.  0_0  Thank you.  ^^!",
      "EditableFormat": "markdown",
      "HTML": "<p>How do you make an object both a container and a surface at the same time?  I know I can not be the only one who has asked this question, yet going through several pages of searching and wording the search differently a few times failed to show me a thread with that, at least by title and description, as well as looking at general guides of containers and surfaces.  Either that or I am just so tired I am simply missing it.  I've also tried various things for the different containers and objects in game, but I can not get it to work.  Maybe it is that I am just so tired and the answer is literally staring me in the face, but I got up extra early just to work on this... (this game is haunting me in my sleep... o_0 )</p>\n<p>Regardless I want to have a night stand be the parent and the alarm clock be the child (if there is another way that is fine and maybe I am wording or thinking of this all wrong).  You can not see the alarm clock until you look at the nightstand however.  Now I believe a \"surface\" would work for that.  But I also want this nightstand to have a drawer, meaning it is a container and inside will be \"something\".  If I make it a container however, the alarm clock will not be seen simply by \"looking\" at the night stand first, which defeats the purpose.  I want lots of objects around, on and in containers, but not to overload the player with descriptions when they first walk into a room, only \"after\" they have \"looked\" at something directly and of course also opened them.</p>\n<p>I am hoping I am just over looking something and it is an easy fix, opposed to some kind of long intricate complicated code.  But I will take what I can get and be thankful for it and my bloodshot eyes will thank you as well!  ^^!  It should be noted that there will be a lot of objects with items in my game that will need this feature.  Almost every room will have something similar, maybe multiple surfaces/container hybrids.  Players will be exploring and thus looking around a lot and I need containers or surfaces or whatever to act the way I need them to.  It wont be a simple matter of making the nightstand not have a drawer or for a dresser with drawers not to have anything invisible on top of it, until it is looked at.</p>\n<p>I think I made this coherent enough.  0_0  Thank you.  ^^!</p>\n\n",
      "PostDate": "2020-11-23T13:18:05.9837777Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e1167e7-856e-4350-bbfd-983525e73d9a",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could... \r\n\r\n1. Set the nightstand to a surface container and place the alarm clock inside the nightstand(surface).\r\n\r\n2. Nightstand Surface container setting\r\n2.1 **Contents prefix:** with\r\n2.2 **Activate** \"Hide children until object is looked at\" and\r\n2.3 **activate** \"List children when object is looked at or opened\"\r\n 2.4 **List prefix:** You can see\r\n\r\n3. Create a drawer and set it to an openable/closeable container and place it inside the nightstand(surface).",
      "EditableFormat": "markdown",
      "HTML": "<p>You could...</p>\n<ol>\n<li>\n<p>Set the nightstand to a surface container and place the alarm clock inside the nightstand(surface).</p>\n</li>\n<li>\n<p>Nightstand Surface container setting<br>\n2.1 <strong>Contents prefix:</strong> with<br>\n2.2 <strong>Activate</strong> \"Hide children until object is looked at\" and<br>\n2.3 <strong>activate</strong> \"List children when object is looked at or opened\"<br>\n2.4 <strong>List prefix:</strong> You can see</p>\n</li>\n<li>\n<p>Create a drawer and set it to an openable/closeable container and place it inside the nightstand(surface).</p>\n</li>\n</ol>\n\n",
      "PostDate": "2020-11-23T14:28:01.6260834Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "95a753b4-c609-41cd-b9da-2bb3ca57c14d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A surface shows its child objects when you look at it. A container shows its child objects when it is open.\r\n\r\nThe problem here is that an object can only have one list of child objects. Quest doesn't distinguish between objects \"in\" and \"on\" something else. In order to have both a surface and a container, you would need to put the items in separate locations somehow.\r\n\r\nI can think of ways to do this, but it would involve quite a bit of scripting and some modification of the core functions. The most obvious would be making the nightstand a surface and putting a \"drawer\" container in it. So the drawer is a separate object.\r\n\r\nYou could make the drawer scenery, so that it doesn't appear separately in the room description or the objects pane; but this is still a little inelegant. This is where the scripting comes in, to make it look better. I suspect that for this to work naturally, you would want to modify the core functions `TryOpenClose` (or possible `AddToResolvedNames`) so that \"open nightstand\" will open the drawer, as well as `FormatObjectList` and `ListObjectContents` so that the contents of both the container and the surface are listed when it is looked at.",
      "EditableFormat": "markdown",
      "HTML": "<p>A surface shows its child objects when you look at it. A container shows its child objects when it is open.</p>\n<p>The problem here is that an object can only have one list of child objects. Quest doesn't distinguish between objects \"in\" and \"on\" something else. In order to have both a surface and a container, you would need to put the items in separate locations somehow.</p>\n<p>I can think of ways to do this, but it would involve quite a bit of scripting and some modification of the core functions. The most obvious would be making the nightstand a surface and putting a \"drawer\" container in it. So the drawer is a separate object.</p>\n<p>You could make the drawer scenery, so that it doesn't appear separately in the room description or the objects pane; but this is still a little inelegant. This is where the scripting comes in, to make it look better. I suspect that for this to work naturally, you would want to modify the core functions <code>TryOpenClose</code> (or possible <code>AddToResolvedNames</code>) so that \"open nightstand\" will open the drawer, as well as <code>FormatObjectList</code> and <code>ListObjectContents</code> so that the contents of both the container and the surface are listed when it is looked at.</p>\n\n",
      "PostDate": "2020-11-23T14:32:47.1677257Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e7bcd493-f6e6-4e2a-8686-07ca4eff2741",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My model would be giving the nightstand a `realcontainer` attribute which points to the drawer object.\r\n\r\nIn this case, the functions would be:\r\n<pre><code>  &lt;function name=\"TryOpenClose\" parameters=\"doopen, object\">\r\n    if (doopen) {\r\n      action = \"open\"\r\n      scriptaction = \"openscript\"\r\n    }\r\n    else {\r\n      action = \"close\"\r\n      scriptaction = \"closescript\"\r\n    }\r\n<b style=\"color: green;\">    if (HasObject (object, \"realcontainer\")) {\r\n      object = object.realcontainer\r\n    }</b>\r\n\r\n    if (not ListContains(ScopeReachable(), object)) {\r\n      msg (BlockingMessage(object, \"\"))\r\n    }\r\n    else {\r\n      found = false\r\n\r\n      if (GetBoolean(object, action)) {\r\n        if (doopen) {\r\n          if (object.isopen) {\r\n            msg (DynamicTemplate(\"AlreadyOpen\", object))\r\n          }\r\n          else {\r\n            if (HasScript(object, scriptaction)) {\r\n              do (object, scriptaction)\r\n            }\r\n            else {\r\n              OpenObject (object)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (not object.isopen) {\r\n            msg (DynamicTemplate(\"AlreadyClosed\", object))\r\n          }\r\n          else {\r\n            if (HasScript(object, scriptaction)) {\r\n              do (object, scriptaction)\r\n            }\r\n            else {\r\n              CloseObject (object)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (doopen) {\r\n          msg (DynamicTemplate(\"CantOpen\", object))\r\n        }\r\n        else {\r\n          msg (DynamicTemplate(\"CantClose\", object))\r\n        }\r\n      }\r\n    }\r\n  &lt;/function>\r\n\r\n  &lt;function name=\"ListObjectContents\" parameters=\"object\">\r\n    if ((GetBoolean(object, \"isopen\") or GetBoolean(object, \"transparent\")) and GetBoolean(object, \"listchildren\")) {\r\n      if (GetBoolean(object, \"hidechildren\")) {\r\n        object.hidechildren = false\r\n      }\r\n      if (HasString(object, \"listchildrenprefix\")) {\r\n        listprefix = object.listchildrenprefix\r\n      }\r\n      else {\r\n        listprefix = DynamicTemplate(\"ObjectContains\", object)\r\n      }\r\n      list = FormatObjectList(listprefix, object, Template(\"And\"), \".\")\r\n      if (not list = \"\") {\r\n        msg (list)\r\n      }\r\n    }\r\n<b style=\"color: green\">    if (HasObject (object, \"realcontainer\")) {\r\n      ListObjectContents (object.realcontainer)\r\n    }</b>\r\n  &lt;/function>\r\n\r\n  &lt;function name=\"FormatObjectList\" type=\"string\" parameters=\"preList, parent, preFinal, postList\">\r\n    &lt;![CDATA[\r\n    result = \"\"\r\n    count = 0\r\n    list = RemoveSceneryObjects(GetDirectChildren(parent))\r\n    if (CheckDarkness()) {\r\n      list = RemoveDarkObjects(list)\r\n    }\r\n    listLength = ListCount(list)\r\n    foreach (item, list) {\r\n      if (LengthOf(result) = 0) result = preList + \" \"\r\n      result = result + GetDisplayNameLink(item, \"object\")\r\n      <b style=\"color: green\">contentslist = NewStringList()</b>\r\n      if (CanSeeThrough(item)) {\r\n        <b style=\"color: blue\">list add (contentslist, </b>FormatObjectList(item.contentsprefix, item, preFinal, \"\")<b style=\"color: green\">)</b>\r\n      }\r\n<b style=\"color: green\">      if (HasObject (item, \"realcontainer\")) {\r\n        if (CanSeeThrough (item.realcontainer)) {\r\n          list add (contentslist, FormatObjectList(item.realcontainer.contentsprefix, item.realcontainer, preFinal, \"\"))\r\n        }\r\n      }\r\n      while (ListContains (contentslist, \"\")) {\r\n        list remove (contentslist, \"\")\r\n      }\r\n      if (ListCount (contentslist) > 0) {\r\n        result = \"(\" + Join (contentslist, \". \") + \")\"\r\n      }</b>\r\n      count = count + 1\r\n      if (count = listLength - 1) {\r\n        result = result + \" \" + preFinal + \" \"\r\n      }\r\n      else if (count &lt; listLength) {\r\n        result = result + \", \"\r\n      }\r\n      else {\r\n        result = result + postList\r\n      }\r\n    }\r\n    return (result)\r\n  ]]>\r\n  &lt;/function></code></pre>\r\n\r\nWith this, you could put a drawer (scenery, container) inside a nightstand (surface), and set the nightstand's `realcontainer` attribute to the drawer.\r\nIf you set the nightstand's `listchildrenprefix` to something like `{either ListContains(game.pov.currentcommandresolvedobjects, drawer):It:The {object:drawer}} contains `\r\nthen you could get game output looking like this:\r\n<pre><code>You are in your bedroom.\r\nYou can see: A <u>bed</u>, a <u>nightstand</u> (on which there is an <u>alarm clock</u>. In the <u>drawer</u> is a <u>pen</u> and a <u>banana</u>), and a <u>large walrus</u>.\r\n\r\n==> look nightstand\r\nIt's the same battered nightstand that's been there for years.\r\nOn it is an <u>alarm clock</u>.\r\nThe <u>drawer</u> contains a <u>pen</u> and a <u>banana</u>.\r\n\r\n==> look drawer\r\nThe drawer sticks out of the front of the <u>nightstand</u>, and is made of the same wood. It is currently open.\r\nIt contains a <u>pen</u> and a <u>banana</u>.\r\n</code></pre>",
      "EditableFormat": "markdown",
      "HTML": "<p>My model would be giving the nightstand a <code>realcontainer</code> attribute which points to the drawer object.</p>\n<p>In this case, the functions would be:</p>\n<pre><code>  &lt;function name=\"TryOpenClose\" parameters=\"doopen, object\"&gt;\n    if (doopen) {\n      action = \"open\"\n      scriptaction = \"openscript\"\n    }\n    else {\n      action = \"close\"\n      scriptaction = \"closescript\"\n    }\n<b style=\"color: green\">    if (HasObject (object, \"realcontainer\")) {\n      object = object.realcontainer\n    }</b>\n\n    if (not ListContains(ScopeReachable(), object)) {\n      msg (BlockingMessage(object, \"\"))\n    }\n    else {\n      found = false\n\n      if (GetBoolean(object, action)) {\n        if (doopen) {\n          if (object.isopen) {\n            msg (DynamicTemplate(\"AlreadyOpen\", object))\n          }\n          else {\n            if (HasScript(object, scriptaction)) {\n              do (object, scriptaction)\n            }\n            else {\n              OpenObject (object)\n            }\n          }\n        }\n        else {\n          if (not object.isopen) {\n            msg (DynamicTemplate(\"AlreadyClosed\", object))\n          }\n          else {\n            if (HasScript(object, scriptaction)) {\n              do (object, scriptaction)\n            }\n            else {\n              CloseObject (object)\n            }\n          }\n        }\n      }\n      else {\n        if (doopen) {\n          msg (DynamicTemplate(\"CantOpen\", object))\n        }\n        else {\n          msg (DynamicTemplate(\"CantClose\", object))\n        }\n      }\n    }\n  &lt;/function&gt;\n\n  &lt;function name=\"ListObjectContents\" parameters=\"object\"&gt;\n    if ((GetBoolean(object, \"isopen\") or GetBoolean(object, \"transparent\")) and GetBoolean(object, \"listchildren\")) {\n      if (GetBoolean(object, \"hidechildren\")) {\n        object.hidechildren = false\n      }\n      if (HasString(object, \"listchildrenprefix\")) {\n        listprefix = object.listchildrenprefix\n      }\n      else {\n        listprefix = DynamicTemplate(\"ObjectContains\", object)\n      }\n      list = FormatObjectList(listprefix, object, Template(\"And\"), \".\")\n      if (not list = \"\") {\n        msg (list)\n      }\n    }\n<b style=\"color: green\">    if (HasObject (object, \"realcontainer\")) {\n      ListObjectContents (object.realcontainer)\n    }</b>\n  &lt;/function&gt;\n\n  &lt;function name=\"FormatObjectList\" type=\"string\" parameters=\"preList, parent, preFinal, postList\"&gt;\n    &lt;![CDATA[\n    result = \"\"\n    count = 0\n    list = RemoveSceneryObjects(GetDirectChildren(parent))\n    if (CheckDarkness()) {\n      list = RemoveDarkObjects(list)\n    }\n    listLength = ListCount(list)\n    foreach (item, list) {\n      if (LengthOf(result) = 0) result = preList + \" \"\n      result = result + GetDisplayNameLink(item, \"object\")\n      <b style=\"color: green\">contentslist = NewStringList()</b>\n      if (CanSeeThrough(item)) {\n        <b style=\"color: blue\">list add (contentslist, </b>FormatObjectList(item.contentsprefix, item, preFinal, \"\")<b style=\"color: green\">)</b>\n      }\n<b style=\"color: green\">      if (HasObject (item, \"realcontainer\")) {\n        if (CanSeeThrough (item.realcontainer)) {\n          list add (contentslist, FormatObjectList(item.realcontainer.contentsprefix, item.realcontainer, preFinal, \"\"))\n        }\n      }\n      while (ListContains (contentslist, \"\")) {\n        list remove (contentslist, \"\")\n      }\n      if (ListCount (contentslist) &gt; 0) {\n        result = \"(\" + Join (contentslist, \". \") + \")\"\n      }</b>\n      count = count + 1\n      if (count = listLength - 1) {\n        result = result + \" \" + preFinal + \" \"\n      }\n      else if (count &lt; listLength) {\n        result = result + \", \"\n      }\n      else {\n        result = result + postList\n      }\n    }\n    return (result)\n  ]]&gt;\n  &lt;/function&gt;</code></pre>\n<p>With this, you could put a drawer (scenery, container) inside a nightstand (surface), and set the nightstand's <code>realcontainer</code> attribute to the drawer.<br>\nIf you set the nightstand's <code>listchildrenprefix</code> to something like <code>{either ListContains(game.pov.currentcommandresolvedobjects, drawer):It:The {object:drawer}} contains</code><br>\nthen you could get game output looking like this:</p>\n<pre><code>You are in your bedroom.\nYou can see: A <u>bed</u>, a <u>nightstand</u> (on which there is an <u>alarm clock</u>. In the <u>drawer</u> is a <u>pen</u> and a <u>banana</u>), and a <u>large walrus</u>.\n\n==&gt; look nightstand\nIt's the same battered nightstand that's been there for years.\nOn it is an <u>alarm clock</u>.\nThe <u>drawer</u> contains a <u>pen</u> and a <u>banana</u>.\n\n==&gt; look drawer\nThe drawer sticks out of the front of the <u>nightstand</u>, and is made of the same wood. It is currently open.\nIt contains a <u>pen</u> and a <u>banana</u>.\n</code></pre>\n\n",
      "PostDate": "2020-11-23T15:13:57.8078794Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a99b6445-0e5d-4bc2-a15f-90343d2510c1",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The simplest way for me, would be to make the nightstand a surface with your clock on it, then make the drawer a completely separate object in the room, as a closed container. Have the drawer be invisible until the nightstand is examined.\r\n\r\nSo the drawer and the nightstand are two separate objects, but in the game it feels like they're one.\r\n\r\nThis way you can put things ON the nightstand, and IN the drawer.",
      "EditableFormat": "markdown",
      "HTML": "<p>The simplest way for me, would be to make the nightstand a surface with your clock on it, then make the drawer a completely separate object in the room, as a closed container. Have the drawer be invisible until the nightstand is examined.</p>\n<p>So the drawer and the nightstand are two separate objects, but in the game it feels like they're one.</p>\n<p>This way you can put things ON the nightstand, and IN the drawer.</p>\n\n",
      "PostDate": "2020-11-23T18:18:21.3147332Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8b18eefe-7243-4d20-bf06-cdd1316e82c0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's a thought. If you wanted them to act like a single object, you'd also need to modify the `put` command. Possibly make it `^(put|insert|place|drop) (?<object1>.*) (?<text_preposition>on|in)(?:to| to|) (?<object2>.*)$`, and then if there is a `realcontainer`, look at the preposition to choose the destination object.",
      "EditableFormat": "markdown",
      "HTML": "<p>That's a thought. If you wanted them to act like a single object, you'd also need to modify the <code>put</code> command. Possibly make it <code>^(put|insert|place|drop) (?&lt;object1&gt;.*) (?&lt;text_preposition&gt;on|in)(?:to| to|) (?&lt;object2&gt;.*)$</code>, and then if there is a <code>realcontainer</code>, look at the preposition to choose the destination object.</p>\n\n",
      "PostDate": "2020-11-23T21:27:23.1035522Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "132108af-915a-4294-b671-db6748dda451",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've been through this problem! I wanted to stick with built-in Quest features as far as possible but couldn't in situations like this. The approach I now take take is (using your example):\r\n1. Make the night stand a surface with both the alarm clock and drawer as objects on it (so it looks okay with game panes)\r\n2. For looking at the night stand, tick the option to hide children until looked at but don't tick the option to list the children automatically...I write the code for that in the look script.\r\n3. For opening and closing the drawer/night stand use open and close commands to filter out the cases you want to handle and pass on others. For example, the form for open would be:\r\n```\r\n  <command name=\"new_open\">\r\n    <pattern>open #object#</pattern>\r\n    <script>\r\n      switch (object) {\r\n        case (drawer, night stand) {\r\n          ...open drawer code...\r\n        }\r\n        default {\r\n          TryOpenClose (true, object)\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I've been through this problem! I wanted to stick with built-in Quest features as far as possible but couldn't in situations like this. The approach I now take take is (using your example):</p>\n<ol>\n<li>Make the night stand a surface with both the alarm clock and drawer as objects on it (so it looks okay with game panes)</li>\n<li>For looking at the night stand, tick the option to hide children until looked at but don't tick the option to list the children automatically...I write the code for that in the look script.</li>\n<li>For opening and closing the drawer/night stand use open and close commands to filter out the cases you want to handle and pass on others. For example, the form for open would be:</li>\n</ol>\n<pre><code>  &lt;command name=\"new_open\"&gt;\n    &lt;pattern&gt;open #object#&lt;/pattern&gt;\n    &lt;script&gt;\n      switch (object) {\n        case (drawer, night stand) {\n          ...open drawer code...\n        }\n        default {\n          TryOpenClose (true, object)\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2020-11-25T09:35:12.7357602Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0fc9ca03-9010-4aa1-99c2-b8166c36207d",
      "UserId": 425561,
      "Username": "Jerrid",
      "AvatarUrl": "https://i.imgur.com/ryDLb49b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for the late reply.  I had been having some major troubles with my browsers at home and even more recently CAPTCHA for some reason.  Went to the library with my laptop to try a work around and it works perfectly, so I am assuming it is my connection instead.  Hopefully I can get it resolved before people go home for their turkey dinners!  ^^!\r\n\r\nRegardless I appreciate everyone's suggestions.  However I am not sure if I am suppose to type those/that code in or not somewhere or some how use Quest's scripting commands.  If I have to put the code in, where exactly do I put it at?  Am I doing it for each and every container/surface hybrid, only for a certain type of container/surface hybrid, as in once I make it for the nightstand command, it works for all nightstands everywhere or it is a one time thing in the main \"game\" section part of my game and will work with everything?  I am not good at coding.  Thank you all for your patience.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for the late reply.  I had been having some major troubles with my browsers at home and even more recently CAPTCHA for some reason.  Went to the library with my laptop to try a work around and it works perfectly, so I am assuming it is my connection instead.  Hopefully I can get it resolved before people go home for their turkey dinners!  ^^!</p>\n<p>Regardless I appreciate everyone's suggestions.  However I am not sure if I am suppose to type those/that code in or not somewhere or some how use Quest's scripting commands.  If I have to put the code in, where exactly do I put it at?  Am I doing it for each and every container/surface hybrid, only for a certain type of container/surface hybrid, as in once I make it for the nightstand command, it works for all nightstands everywhere or it is a one time thing in the main \"game\" section part of my game and will work with everything?  I am not good at coding.  Thank you all for your patience.</p>\n\n",
      "PostDate": "2020-11-25T21:48:07.8817645Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d98ce640-b349-4ade-8af6-1c668a6ee585",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you mean my code, you would need to use the code that I provided to replace some of the core functions. I know that in the desktop editor you can view and modify the core functions; but they're hidden by default. I'm not sure of the details of how to see and edit them, because I've only used the web editor.\r\n\r\nI suspect the easiest method would be opening the game in full code view, and inserting all the code I gave you immediately before the `</asl>` line at the end. But make a backup copy first.\r\n\r\nDavyB's suggestion will probably be easier (and will be possible in the web editor). To implement that you create a new command named \"new_open\" with the pattern \"open #object#\". And then in the script box, open code view and paste in the body:\r\n```\r\n      switch (object) {\r\n        case (night stand) {\r\n          TryOpenClose (true, drawer)\r\n        }\r\n        default {\r\n          TryOpenClose (true, object)\r\n        }\r\n      }\r\n```\r\nthis works on an object named \"night stand\" and an object named \"drawer\". If you want to make more than one, you would need to duplicate the 3 lines starting with `case` for each pair of objects, changing the names. You would also need a similar script for a new close command (changing \"open\" to \"close\", and \"true\" to \"false\"). And you would probably need to write a script for the nightstand's \"look at\", which lists the objects in the drawer as well.\r\n\r\nI'd suggest this method if you have only one object, or if you have to use the web editor.\r\nMy method is designed so that it should work for any number of objects without writing extra code, even if that makes that first block of code a little more complex.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you mean my code, you would need to use the code that I provided to replace some of the core functions. I know that in the desktop editor you can view and modify the core functions; but they're hidden by default. I'm not sure of the details of how to see and edit them, because I've only used the web editor.</p>\n<p>I suspect the easiest method would be opening the game in full code view, and inserting all the code I gave you immediately before the <code>&lt;/asl&gt;</code> line at the end. But make a backup copy first.</p>\n<p>DavyB's suggestion will probably be easier (and will be possible in the web editor). To implement that you create a new command named \"new_open\" with the pattern \"open #object#\". And then in the script box, open code view and paste in the body:</p>\n<pre><code>      switch (object) {\n        case (night stand) {\n          TryOpenClose (true, drawer)\n        }\n        default {\n          TryOpenClose (true, object)\n        }\n      }\n</code></pre>\n<p>this works on an object named \"night stand\" and an object named \"drawer\". If you want to make more than one, you would need to duplicate the 3 lines starting with <code>case</code> for each pair of objects, changing the names. You would also need a similar script for a new close command (changing \"open\" to \"close\", and \"true\" to \"false\"). And you would probably need to write a script for the nightstand's \"look at\", which lists the objects in the drawer as well.</p>\n<p>I'd suggest this method if you have only one object, or if you have to use the web editor.<br>\nMy method is designed so that it should work for any number of objects without writing extra code, even if that makes that first block of code a little more complex.</p>\n\n",
      "PostDate": "2020-11-25T23:14:14.1124965Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e813d8ca-f6d1-45e4-a1de-b6a1b1803917",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Jerrid, if it would help, I can send you a small game with the code I'm suggesting? If so, please send me a private message with an email address I can use.",
      "EditableFormat": "markdown",
      "HTML": "<p>Jerrid, if it would help, I can send you a small game with the code I'm suggesting? If so, please send me a private message with an email address I can use.</p>\n\n",
      "PostDate": "2020-11-26T10:21:28.8272231Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
