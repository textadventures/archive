{
  "Topic": {
    "TopicId": "uswk7eurnkgyevhqffzw0w",
    "ForumId": "24",
    "Title": "Attributes sometimes set to 'true'",
    "LastUpdated": "2022-01-14T01:11:49.4833588Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "1191c1c9-db45-468d-8fa0-09fb3f7d37e4",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Has anyone else encountered what looks like a bug where sometimes, for no apparent reason, an attribute that should be set to the value of another attribute in fact get set simply to 'true'?\r\n\r\nI've encountered this in several different scenarios:\r\n\r\n- when using a textfield to allow the user to input something (eg a name) - most of the time this is set correctly, but sometimes it's just set as 'true' and the player's name is then 'true'; for the rest of the game\r\n- when setting an attribute to the value of another attribute, eg ```{@charname=@ridersname}```\r\n\r\nThis might be a Firefox-only bug, though I can't confirm it. And it doesn't always happen - perhaps 1% of the time - but I can't find any common denominator (though the ```{@attribute1=@attribute2}``` syntax may be a common factor !",
      "EditableFormat": "markdown",
      "HTML": "<p>Has anyone else encountered what looks like a bug where sometimes, for no apparent reason, an attribute that should be set to the value of another attribute in fact get set simply to 'true'?</p>\n<p>I've encountered this in several different scenarios:</p>\n<ul>\n<li>when using a textfield to allow the user to input something (eg a name) - most of the time this is set correctly, but sometimes it's just set as 'true' and the player's name is then 'true'; for the rest of the game</li>\n<li>when setting an attribute to the value of another attribute, eg <code>{@charname=@ridersname}</code></li>\n</ul>\n<p>This might be a Firefox-only bug, though I can't confirm it. And it doesn't always happen - perhaps 1% of the time - but I can't find any common denominator (though the <code>{@attribute1=@attribute2}</code> syntax may be a common factor !</p>\n\n",
      "PostDate": "2022-01-14T01:11:49.4833588Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8a958ec6-1079-461d-8e44-f6fbd1e99901",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… I notice that undefined values are translated into `true` by the `set` method. So it's possible that if your `@attribute2` hasn't been set yet, it would be treated as true. (I believe this behaviour is to enable the `@set attribute` and `@set not attribute` functions to act as true and false – setting an attribute to an unspecified value makes it true)\r\n\r\nIf the value is set, I wonder if there's some kind of race condition in some browsers… if values in LocalStorage are being queued before being saved to disk, then I don't know if loading them should block. In any case, the implementation of `get` and `set` seems to be a little awkward… it might be more efficient to fetch the attributes from local storage only the first time they are needed, and then keep them in memory.\r\n\r\nI don't think this is *likely* to be a problem, but I can imagine it being possible as an edge case.\r\n\r\nHere's a first guess off the top of my head for how a possibly-more-efficient implementation might work. (replacing two of the existing JS functions… I think this would have to be implemented by modifying `squiffy.template.js` or `story.js`, and it might not work as intended if changed from within game code)\r\n```\r\n    squiffy.set = function(attribute, value) {\r\n        if (typeof value === 'undefined') value = true;\r\n        value = JSON.stringify(value);\r\n        if (!squiffy.storageFallback[attribute] === value) {\r\n            squiffy.storageFallback[attribute] = value;\r\n            if (squiffy.ui.settings.persist && window.localStorage) {\r\n                localStorage.setItem(squiffy.story.id + '-' + attribute, value);\r\n            }\r\n            squiffy.ui.settings.onSet(attribute, value);\r\n        }\r\n    };\r\n\r\n    squiffy.get = function(attribute) {\r\n        var result;\r\n        if (squiffy.storageFallback.hasOwnProperty(attribute)) {\r\n            result = squiffy.storageFallback[attribute];\r\n        } else if (squiffy.ui.settings.persist && window.localStorage) {\r\n            result = localStorage.getItem(squiffy.story.id + '-' + attribute);\r\n        }\r\n        if (!result) return null;\r\n        return JSON.parse(result);\r\n    };\r\n```\r\n(and in `squiffy.story.restart`, remove the `else {` and `}` surrounding the line `squiffy.storageFallback = {};`)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… I notice that undefined values are translated into <code>true</code> by the <code>set</code> method. So it's possible that if your <code>@attribute2</code> hasn't been set yet, it would be treated as true. (I believe this behaviour is to enable the <code>@set attribute</code> and <code>@set not attribute</code> functions to act as true and false – setting an attribute to an unspecified value makes it true)</p>\n<p>If the value is set, I wonder if there's some kind of race condition in some browsers… if values in LocalStorage are being queued before being saved to disk, then I don't know if loading them should block. In any case, the implementation of <code>get</code> and <code>set</code> seems to be a little awkward… it might be more efficient to fetch the attributes from local storage only the first time they are needed, and then keep them in memory.</p>\n<p>I don't think this is <em>likely</em> to be a problem, but I can imagine it being possible as an edge case.</p>\n<p>Here's a first guess off the top of my head for how a possibly-more-efficient implementation might work. (replacing two of the existing JS functions… I think this would have to be implemented by modifying <code>squiffy.template.js</code> or <code>story.js</code>, and it might not work as intended if changed from within game code)</p>\n<pre><code>    squiffy.set = function(attribute, value) {\n        if (typeof value === 'undefined') value = true;\n        value = JSON.stringify(value);\n        if (!squiffy.storageFallback[attribute] === value) {\n            squiffy.storageFallback[attribute] = value;\n            if (squiffy.ui.settings.persist &amp;&amp; window.localStorage) {\n                localStorage.setItem(squiffy.story.id + '-' + attribute, value);\n            }\n            squiffy.ui.settings.onSet(attribute, value);\n        }\n    };\n\n    squiffy.get = function(attribute) {\n        var result;\n        if (squiffy.storageFallback.hasOwnProperty(attribute)) {\n            result = squiffy.storageFallback[attribute];\n        } else if (squiffy.ui.settings.persist &amp;&amp; window.localStorage) {\n            result = localStorage.getItem(squiffy.story.id + '-' + attribute);\n        }\n        if (!result) return null;\n        return JSON.parse(result);\n    };\n</code></pre>\n<p>(and in <code>squiffy.story.restart</code>, remove the <code>else {</code> and <code>}</code> surrounding the line <code>squiffy.storageFallback = {};</code>)</p>\n\n",
      "PostDate": "2022-01-15T12:41:55.7623073Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eac7dc14-5270-41dd-8678-a3f7be563bce",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel - I'm going to see if this solves it!\r\n\r\nI'm not sure if I have one bug or two - the one that results in attributes being set as 'true' when they should take on a value provided by the user is obvious because it occasionally results in their character's name, which gets amended towards the end of the story, being changed to 'true'. It's rare, but we've had perhaps twenty in 1200 playthroughs.\r\n\r\nThe other one (or possibly same one, if that one is caused by the same thing) sometimes seems to introduce this lag where atrributes aren't updated straightaway, but a couple of sections later. Which does sound like it could be the same thing, if it's the case with the first bug that @attribute2 isn't being updated immediately. Though I've never seen a 'true' later update to what it should have been!\r\n\r\nAnyway, I shall report back! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel - I'm going to see if this solves it!</p>\n<p>I'm not sure if I have one bug or two - the one that results in attributes being set as 'true' when they should take on a value provided by the user is obvious because it occasionally results in their character's name, which gets amended towards the end of the story, being changed to 'true'. It's rare, but we've had perhaps twenty in 1200 playthroughs.</p>\n<p>The other one (or possibly same one, if that one is caused by the same thing) sometimes seems to introduce this lag where atrributes aren't updated straightaway, but a couple of sections later. Which does sound like it could be the same thing, if it's the case with the first bug that @attribute2 isn't being updated immediately. Though I've never seen a 'true' later update to what it should have been!</p>\n<p>Anyway, I shall report back!</p>\n\n",
      "PostDate": "2022-01-15T14:36:43.1602718Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "66e020cd-632f-40f7-a763-399ce35dfebd",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm, that seems to have broken my staging version! https://www.dragonchoice.com/you-choose/game-dev/",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm, that seems to have broken my staging version! https://www.dragonchoice.com/you-choose/game-dev/</p>\n\n",
      "PostDate": "2022-01-15T15:09:24.4936472Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e0f20b39-6239-4c8d-8363-a4bbab5ffd8f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It was a quick bit of code off the top of my head, so entirely possible I've got a mistake in there somewhere.\r\n\r\nTrying to debug it through the JS console; but not sure what's going on now.\r\nIt seems that it's failing at some point in the initialise interface script… if I go to the JS console and enter `squiffy.story.go(\"Start\")`, it seems to behave (and to save properly, resuming when played again).\r\n\r\nI can only assume there's some conflict between the function-replacement at the start and the new get/set methods… I'll take a look into that when I've got a little more time.",
      "EditableFormat": "markdown",
      "HTML": "<p>It was a quick bit of code off the top of my head, so entirely possible I've got a mistake in there somewhere.</p>\n<p>Trying to debug it through the JS console; but not sure what's going on now.<br>\nIt seems that it's failing at some point in the initialise interface script… if I go to the JS console and enter <code>squiffy.story.go(\"Start\")</code>, it seems to behave (and to save properly, resuming when played again).</p>\n<p>I can only assume there's some conflict between the function-replacement at the start and the new get/set methods… I'll take a look into that when I've got a little more time.</p>\n\n",
      "PostDate": "2022-01-15T15:39:37.6333469Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "864982b3-b00f-458e-80fa-43c4959bf680",
      "UserId": 471394,
      "Username": "fvu109",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b895f3cf2b427a32e38299edd44559a5?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just a bit of extra data gleaned from talking to some of the people playing the game and encountering some of these issues!\r\n\r\nThe name attribute being set to 'true' when it should be set to whatever name the player inputs increasingly looks like a Firefox-specific issue - perhaps soemthing about how its LocalStorage is configured? One player said that happened for them on every run until she cleared cookies, and then it was OK. Does Squiffy even set any cookies, or does the cookie clearing process simply also clear down LocalStorage?\r\n\r\nThe 'lag' issue doesn't seem to be Firefox-only, however - that's happened on Chrome and on mobile browsers too.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just a bit of extra data gleaned from talking to some of the people playing the game and encountering some of these issues!</p>\n<p>The name attribute being set to 'true' when it should be set to whatever name the player inputs increasingly looks like a Firefox-specific issue - perhaps soemthing about how its LocalStorage is configured? One player said that happened for them on every run until she cleared cookies, and then it was OK. Does Squiffy even set any cookies, or does the cookie clearing process simply also clear down LocalStorage?</p>\n<p>The 'lag' issue doesn't seem to be Firefox-only, however - that's happened on Chrome and on mobile browsers too.</p>\n\n",
      "PostDate": "2022-01-16T00:51:05.8621701Z",
      "LastEditDate": "2022-01-16T00:51:24.4398429Z",
      "link": null
    },
    {
      "PostId": "85b4136d-f074-40a3-853f-36982ec71009",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've seen some strange things in Firefox in squiffy. Nothing that I could pin down but yes, stuff that otherwise makes no sense.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've seen some strange things in Firefox in squiffy. Nothing that I could pin down but yes, stuff that otherwise makes no sense.</p>\n\n",
      "PostDate": "2022-01-23T20:14:01.8910749Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a3be5ac8-8452-4b25-b9a7-15d1a1c6f452",
      "UserId": 583806,
      "Username": "Holden Meursault ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e793d001a2081ded04a187b6c92d27de?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi all, I've only been using Squiffy a few days but I've already run into a problem that seems similar to what the OP posted and it's breaking my brain. I've added lots of diagnostics and I think I've narrowed the problem down a bit but not sure exactly why it is occurring or how to fix it. mrangel's suggestion earlier in the thread that it might be a browser race condition seems plausible at this point.\r\n\r\nThe following isn't my actual code - it's pseudo-code that will hopefully illuminate the problem I'm having very clearly:\r\n\r\n@set not Attr         //initialise attribute\r\n...\r\n...\r\n...\r\n[[Section A]]:\r\nDiagnostic 1: {Attr}       // reports (correctly) Attr = false\r\nCall [[Section B]]\r\n\r\n[[Section B]]:\r\nDiagnostic 2: {Attr}       // reports Attr = true - it should still be false!\r\n...\r\n...\r\n...\r\nDiagnostic 3: {Attr}       // reports Attr = true - ditto\r\n{if not Attr:Hello}{else:Goodbye}          // prints \"Goodbye\"\r\n@set Attr\r\nDiagnostic 4: {Attr}      // reports Attr = true - correct\r\n\r\nIf I comment out the @set between Diagnostic 3 and Diagnostic 4, then Diagnostics 2-4 all report Attr = false and \"Hello\" gets printed.\r\n\r\nSo, it looks like that @set is being executed BEFORE the if, rather than after. So, again, Maybe mrangel's hypothesis about the race condition is correct. I'm using the Brave browser by the way.\r\n\r\nI'd prefer not to get into heavy JS if possible, as I'm not a JS guy - would probably prefer to modify my game so as to dodge the problem. \r\n\r\nIncidentally, I've tried using both numerical and string attributes in place of Boolean, but with analogous results.\r\n\r\nAnd there aren't any references to Attr that I have forgotten or misspelled - I've used the editor's Find function to check this.\r\n\r\nOne last thing: all my other attributes seem to be working fine.\r\n\r\nAny help on this appreciated...",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi all, I've only been using Squiffy a few days but I've already run into a problem that seems similar to what the OP posted and it's breaking my brain. I've added lots of diagnostics and I think I've narrowed the problem down a bit but not sure exactly why it is occurring or how to fix it. mrangel's suggestion earlier in the thread that it might be a browser race condition seems plausible at this point.</p>\n<p>The following isn't my actual code - it's pseudo-code that will hopefully illuminate the problem I'm having very clearly:</p>\n<p>@set not Attr         //initialise attribute<br>\n...<br>\n...<br>\n...<br>\n[[Section A]]:<br>\nDiagnostic 1: {Attr}       // reports (correctly) Attr = false<br>\nCall [[Section B]]</p>\n<p>[[Section B]]:<br>\nDiagnostic 2: {Attr}       // reports Attr = true - it should still be false!<br>\n...<br>\n...<br>\n...<br>\nDiagnostic 3: {Attr}       // reports Attr = true - ditto<br>\n{if not Attr:Hello}{else:Goodbye}          // prints \"Goodbye\"<br>\n@set Attr<br>\nDiagnostic 4: {Attr}      // reports Attr = true - correct</p>\n<p>If I comment out the @set between Diagnostic 3 and Diagnostic 4, then Diagnostics 2-4 all report Attr = false and \"Hello\" gets printed.</p>\n<p>So, it looks like that @set is being executed BEFORE the if, rather than after. So, again, Maybe mrangel's hypothesis about the race condition is correct. I'm using the Brave browser by the way.</p>\n<p>I'd prefer not to get into heavy JS if possible, as I'm not a JS guy - would probably prefer to modify my game so as to dodge the problem.</p>\n<p>Incidentally, I've tried using both numerical and string attributes in place of Boolean, but with analogous results.</p>\n<p>And there aren't any references to Attr that I have forgotten or misspelled - I've used the editor's Find function to check this.</p>\n<p>One last thing: all my other attributes seem to be working fine.</p>\n<p>Any help on this appreciated...</p>\n\n",
      "PostDate": "2022-03-22T02:30:26.7423837Z",
      "LastEditDate": "2022-03-22T02:43:34.1189421Z",
      "link": null
    },
    {
      "PostId": "9a2e4f7e-2629-40f5-8f4b-47908b871102",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Might be something silly - trust me, I've been fussing with squiffy all day.\r\n\r\nDouble click on your variable name and make sure it highlights on the other places it's used. You might have a tiny typo (or case problem) which could be throwing off your logic. One way to be sure - copy and past from Section A to Section B to be sure it works correctly.\r\n\r\nAlso, do you have a master section (i.e. [[]])? That could be resetting it.\r\n\r\nReally desperate? Change the variable name. Maybe you stumbled into something used internally. I seen to recall that happening a couple of years back.\r\n\r\nAlso, you aren't using // for squiffy comments, right? You need to use <> for comments. \r\n\r\nAnother thing. Make sure you aren't relaying on squiffy to execute sequentially - I believe it runs its code in passes. Try running this...\r\n```\r\n{attr}\r\n@set attr\r\n```\r\nYou would think attr should show NULL since it prints before the  set. Not so. I find its much better to use this...\r\n\r\n```\r\n{attr}\r\n{@attr}\r\n```\r\nThis executes the commands in the right order. You can find a nice handout on how to use these styles of commands here...\r\n\r\nhttps://dynalist.io/d/kocz1psBWP_sDFR0bk8wApfY\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Might be something silly - trust me, I've been fussing with squiffy all day.</p>\n<p>Double click on your variable name and make sure it highlights on the other places it's used. You might have a tiny typo (or case problem) which could be throwing off your logic. One way to be sure - copy and past from Section A to Section B to be sure it works correctly.</p>\n<p>Also, do you have a master section (i.e. [[]])? That could be resetting it.</p>\n<p>Really desperate? Change the variable name. Maybe you stumbled into something used internally. I seen to recall that happening a couple of years back.</p>\n<p>Also, you aren't using // for squiffy comments, right? You need to use &lt;&gt; for comments.</p>\n<p>Another thing. Make sure you aren't relaying on squiffy to execute sequentially - I believe it runs its code in passes. Try running this...</p>\n<pre><code>{attr}\n@set attr\n</code></pre>\n<p>You would think attr should show NULL since it prints before the  set. Not so. I find its much better to use this...</p>\n<pre><code>{attr}\n{@attr}\n</code></pre>\n<p>This executes the commands in the right order. You can find a nice handout on how to use these styles of commands here...</p>\n<p>https://dynalist.io/d/kocz1psBWP_sDFR0bk8wApfY</p>\n\n",
      "PostDate": "2022-03-22T03:36:43.9235342Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9c780f25-4eed-4e8b-abb7-8f040c869b90",
      "UserId": 583806,
      "Username": "Holden Meursault ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/e793d001a2081ded04a187b6c92d27de?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "BINGO! This worked like a charm:\r\n\r\n{@attr}\r\n\r\nThanks so much, Bluevoss, and also for the documentation link - at first glance, it looks way better than the official documentation.\r\n\r\nI don't know if anybody is actively maintaining Squiffy, but making it execute in sequential order would seem to be a desirable  improvement.",
      "EditableFormat": "markdown",
      "HTML": "<p>BINGO! This worked like a charm:</p>\n<p>{@attr}</p>\n<p>Thanks so much, Bluevoss, and also for the documentation link - at first glance, it looks way better than the official documentation.</p>\n<p>I don't know if anybody is actively maintaining Squiffy, but making it execute in sequential order would seem to be a desirable  improvement.</p>\n\n",
      "PostDate": "2022-03-22T04:15:59.8699124Z",
      "LastEditDate": "2022-03-22T04:19:46.7813052Z",
      "link": null
    },
    {
      "PostId": "59bb3d5f-5e94-4f28-bc0f-9c089297ea09",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So, it looks like that @set is being executed BEFORE the if, rather than after. So, again, Maybe mrangel's hypothesis about the race condition is correct. I'm using the Brave browser by the way.\r\n\r\nThat's not a race condition.\r\n\r\nWhen a squiffy file is compiled, each section (or passage) is split up into 3 parts:\r\n1. `section.attributes` (all `@set`, `@inc`, `@clear`, and similar instructions)\r\n2. `section.js` (all javascript)\r\n3. `section.text` (everything else, including `{`command`}` sections).\r\n\r\nEach of those parts is interpreted according to different rules, and they are executed strictly in that order.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So, it looks like that @set is being executed BEFORE the if, rather than after. So, again, Maybe mrangel's hypothesis about the race condition is correct. I'm using the Brave browser by the way.</p>\n</blockquote>\n<p>That's not a race condition.</p>\n<p>When a squiffy file is compiled, each section (or passage) is split up into 3 parts:</p>\n<ol>\n<li><code>section.attributes</code> (all <code>@set</code>, <code>@inc</code>, <code>@clear</code>, and similar instructions)</li>\n<li><code>section.js</code> (all javascript)</li>\n<li><code>section.text</code> (everything else, including <code>{</code>command<code>}</code> sections).</li>\n</ol>\n<p>Each of those parts is interpreted according to different rules, and they are executed strictly in that order.</p>\n\n",
      "PostDate": "2022-03-22T11:30:49.0584349Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bdb12799-4be0-48e0-9f94-eba4a12b0337",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Woops. I mean a \"rare\" condition. This is what I get for typing and not checking. You'd think I'd learn after all the bugs I put into my code yesterday.\r\n\r\nHolden Meursault : I had to force myself to do a lot of my code in JS because if I used @set ANYWHERE in a section, it set it all over the section. These {@} commands work a lot better, including allowing you to check variables against other variables, which is very handy. Glad you liked it - lots of very good information there.",
      "EditableFormat": "markdown",
      "HTML": "<p>Woops. I mean a \"rare\" condition. This is what I get for typing and not checking. You'd think I'd learn after all the bugs I put into my code yesterday.</p>\n<p>Holden Meursault : I had to force myself to do a lot of my code in JS because if I used @set ANYWHERE in a section, it set it all over the section. These {@} commands work a lot better, including allowing you to check variables against other variables, which is very handy. Glad you liked it - lots of very good information there.</p>\n\n",
      "PostDate": "2022-03-22T15:17:40.6336497Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
