{
  "Topic": {
    "TopicId": "tbhmvcy5yeubtfqqzvhspa",
    "ForumId": "10",
    "Title": "Trouble with changing attributes on inventory objects",
    "LastUpdated": "2024-04-27T22:48:11.2232017Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "99c21a85-9e05-434d-ad8c-1d5057e29a7b",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When I update the ammo attribute on an object during an attack, and then try to update the alias of that object to show lower ammo in inventory, it's showing \"0 ammo\" instead of the amount of Ammo that the object has after everything is done running.  \r\n\r\nOr maybe the system is working well enough that the weapon functions as if it's getting loaded properly, but the \"ammo\" on the object being loaded into it is changing to 0 instead of incrementing down each attack?\r\n\r\nI've been working a system within Pixie's CombatLib to deal with using ammo in the weapons.  The library has a built in method of refusing to let the player attack if the weapon has 0 for its ammo attribute.   But that was essentially it.  So i created ranged weapon types and ammo types that have ammo attributes.  I also use a system of Booleans to help recognize how to treat the different sub-types in the scripts.  (the difference between something like a gun, a bow, or a wand).\r\n\r\nBut I can't seem to track down what's wrong to make the new alias in inventory show an unexpected 0 instead of what I think the ammo amount for the ammo object is.\r\n\r\nThe attack script that begins all of the changes is Pixie's built-in one, but I've added to the system by modifying what happens for \"OutofAmmo()\" and also added a \"FireRangedWeapon()\" function.    These two calls in the attack script work together with attributes and scripts on the rangedweapon and ammo types.\r\n\r\nFor Firearms and Wand/Rods  there's a different system of replenishing the ammo, the player must use a \"load\" command.  That seems to work fine with updating the inventory, and I think it's because of how commands function differently with the inventory than how scripts run during a turnscript work.\r\n\r\nIf it helps, here's what my changed code currently looks like:\r\n\r\nThis doattack script on a monster runs when the player types \"attack monster\"\r\n```\r\n    <doattack type=\"script\"><![CDATA[\r\n      if (OutOfAmmo()) {\r\n        do (this, \"outofammo\")\r\n      }\r\n      else if (this.dead) {\r\n        // s = GetDisplayAlias(this)\r\n        // msg(\"The \" + Mid(s, 1, LengthOf(s) - 7) + \" is already dead.\")\r\n        msg (\"The \" + GetDisplayAlias(this) + \" is already dead.\")\r\n      }\r\n      else {\r\n        if (DoesInherit(game.pov.equipped, \"rangedweapon\")) {\r\n          FireRangedWeapon\r\n        }\r\n        SneakUpdate (5)\r\n        do (this, \"settoattack\")\r\n        attackroll = GetRandomInt (1, 20) + GetAttack(this)\r\n        if (this.noncorporeal and GetElement(game.pov.equipped) = null) {\r\n          if (game.pov.equipped.nonweapon) {\r\n            msg (\"You attack the \" + GetDisplayAlias(this) + \", and pass straight through it!\")\r\n          }\r\n          else {\r\n            msg (\"You swing your \" + GetDisplayAlias(game.pov.equipped) + \" and it goes straight through the \" + GetDisplayAlias(this) + \"!\")\r\n          }\r\n        }\r\n        else if (attackroll > 10) {\r\n          damage = GetDamage (game.pov.equipped, game.pov.strength / 2 + this.temp_damage + game.pov.damagebonus, this)\r\n          this.hitpoints = this.hitpoints - damage\r\n          if (this.hitpoints > 0) {\r\n            if (game.pov.equipped.nonweapon) {\r\n              msg (\"You attack and hit, doing \" + damage + \" points of damage (\" + this.hitpoints + \" hits left). \" + this.hurtbyweapon)\r\n            }\r\n            else {\r\n              msg (this.temp_desc + \" \" + GetDisplayAlias(game.pov.equipped) + \" and hit, doing \" + damage + \" points of damage (\" + this.hitpoints + \" hits left). \" + this.hurtbyweapon)\r\n            }\r\n            if (HasScript(this, \"onweaponhit\")) {\r\n              do (this, \"onweaponhit\")\r\n            }\r\n            if (HasObject(game.pov.equipped, \"venom\")) {\r\n              if (this.poisonimmunity) {\r\n                if (HasString(this, \"poisonimmunitymsg\")) {\r\n                  msg (this.poisonimmunitymsg)\r\n                }\r\n                else {\r\n                  msg (\"The \" + GetDisplayAlias(this) + \" is immune to your blade venom.\")\r\n                }\r\n              }\r\n              else {\r\n                game.pov.target = this\r\n                do (game.pov.equipped.venom, \"effect\")\r\n              }\r\n              game.pov.equipped.venom = null\r\n            }\r\n          }\r\n          else {\r\n            if (game.pov.equipped.nonweapon) {\r\n              msg (\"You attack and hit, doing \" + damage + \" points of damage. \" + this.death)\r\n            }\r\n            else {\r\n              msg (this.temp_desc + \" \" + GetDisplayAlias(game.pov.equipped) + \" and hit, doing \" + damage + \" points of damage. \" + this.death)\r\n            }\r\n            do (this, \"makedead\")\r\n          }\r\n        }\r\n        else {\r\n          if (game.pov.equipped.nonweapon) {\r\n            msg (\"You attack and miss.\")\r\n          }\r\n          else {\r\n            msg (\"You swing your \" + GetDisplayAlias(game.pov.equipped) + \" and miss.\")\r\n          }\r\n        }\r\n        if (HasObject(game.pov, \"secondary_attack\")) {\r\n          do (this, \"secondaryattack\")\r\n        }\r\n      }\r\n    ]]></doattack>\r\n\r\n```\r\n\r\nSo the FireRangedWeapon()  is very simple\r\n\r\n```\r\n\r\n  <function name=\"FireRangedWeapon\">\r\n    game.pov.equipped.ammo = game.pov.equipped.ammo - 1\r\n  </function>\r\n\r\n```\r\n\r\nThe ammo in player inventory is\r\n\r\n```\r\n\r\n    <object name=\"arrows\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"ammo\" />\r\n      <feature_combat />\r\n      <ammo type=\"int\">4</ammo>\r\n      <take />\r\n      <takemsg>You pick up the ammunition</takemsg>\r\n      <dropmsg>You drop the ammunition</dropmsg>\r\n      <feature_usegive />\r\n      <use type=\"boolean\">false</use>\r\n      <firearmammo type=\"boolean\">false</firearmammo>\r\n      <alias>arrows</alias>\r\n      <magicammo type=\"boolean\">false</magicammo>\r\n      <bowammo />\r\n      <selfuseanything type=\"script\">\r\n        if (HasAttribute(obj, \"ammo\")) {\r\n          obj.ammo = obj.ammo + this.ammo\r\n        }\r\n        else {\r\n          msg (\"Try using your ammo in a ranged weapon...\")\r\n        }\r\n      </selfuseanything>\r\n      <changedammo type=\"script\">\r\n        if (not GetBoolean(this, \"magicammo\")) {\r\n          firsttime {\r\n            this.oldalias = this.alias\r\n            this.newalias = this.ammo + \" \" + this.oldalias\r\n            SetAlias (this, this.newalias)\r\n          }\r\n          otherwise {\r\n            this.newalias = this.ammo + \" \" + this.oldalias\r\n            SetAlias (this, this.newalias)\r\n          }\r\n        }\r\n      </changedammo>\r\n      <selfuseon type=\"scriptdictionary\">\r\n        <item key=\"player\">\r\n          msg (\"You can't use the ammo on yourself, silly.  Try using it in a ranged weapon...\")\r\n        </item>\r\n      </selfuseon>\r\n      <visible />\r\n    </object>\r\n  </object>\r\n\r\n```\r\n\r\nAnd the weapon being used in the attack is\r\n\r\n```\r\n\r\n    <object name=\"Bow\">\r\n      <inherit name=\"rangedweapon\" />\r\n      <price type=\"int\">5</price>\r\n      <feature_combat />\r\n      <scenery type=\"boolean\">false</scenery>\r\n      <ammo type=\"int\">1</ammo>\r\n      <nonweapon />\r\n      <bowweapon />\r\n      <projectileweapon type=\"boolean\">false</projectileweapon>\r\n      <firearm type=\"boolean\">false</firearm>\r\n      <magicchargedweapon type=\"boolean\">false</magicchargedweapon>\r\n      <maxammo type=\"int\">3</maxammo>\r\n    </object>\r\n\r\n```\r\nand the rangedweapon type is \r\n\r\n```\r\n\r\n  <type name=\"rangedweapon\">\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"weapon\" />\r\n    <feature_combat />\r\n    <price type=\"int\">1</price>\r\n    <attacktype>Arrow</attacktype>\r\n    <nonweapon type=\"boolean\">false</nonweapon>\r\n    <ammo type=\"int\">0</ammo>\r\n    <bowweapon type=\"boolean\">false</bowweapon>\r\n    <projectileweapon type=\"boolean\">false</projectileweapon>\r\n    <firearm type=\"boolean\">false</firearm>\r\n    <magicchargedweapon type=\"boolean\">false</magicchargedweapon>\r\n    <outofammo type=\"script\"><![CDATA[\r\n      if (GetBoolean(this, \"bowweapon\")) {\r\n        foreach (obj, ScopeInventory()) {\r\n          if (GetBoolean(obj, \"bowammo\")) {\r\n            obj = obj\r\n            if (obj.ammo > 0) {\r\n              obj.ammo = obj.ammo -1\r\n              this.ammo = this.ammo +1\r\n            }\r\n          }\r\n          else {\r\n            msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" has nothing left to fire!\")\r\n          }\r\n        }\r\n      }\r\n      else if (GetBoolean(this, \"projectileweapon\")) {\r\n        msg (\"There's nothing you can shoot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\r\n      }\r\n      else if (GetBoolean(this, \"firearm\")) {\r\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of ammo!\")\r\n      }\r\n      else if (GetBoolean(this, \"magicchargedweapon\")) {\r\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of charges!\")\r\n      }\r\n      else {\r\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is empty!\")\r\n      }\r\n    ]]></outofammo>\r\n    <changedammo type=\"script\"><![CDATA[\r\n      if (GetBoolean(this, \"bowweapon\")) {\r\n        foreach (obj, ScopeInventory()) {\r\n          if (GetBoolean(obj, \"bowammo\")) {\r\n            obj = obj\r\n            if (obj.ammo > 0) {\r\n              obj.ammo = obj.ammo -1\r\n              this.ammo = this.ammo +1\r\n            }\r\n            else {\r\n            }\r\n          }\r\n          else {\r\n          }\r\n        }\r\n        if (this.ammo = 0) {\r\n          msg (\"You fire your last shot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\r\n        }\r\n      }\r\n      else if (GetBoolean(this, \"projectileweapon\")) {\r\n        msg (\"There's nothing you can shoot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\r\n        foreach (obj, ScopeInventory()) {\r\n          if (GetBoolean(obj, \"projectileammo\")) {\r\n            if (obj.ammo > 0) {\r\n              obj.ammo = obj.ammo - 1\r\n              this.ammo = this.ammo +1\r\n            }\r\n            else {\r\n              RemoveObject (obj)\r\n            }\r\n          }\r\n          else {\r\n          }\r\n        }\r\n        if (this.ammo = 0) {\r\n          msg (\"You have nothing left to use with your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\r\n        }\r\n      }\r\n      else if (GetBoolean(this, \"firearm\")) {\r\n        if (this.ammo = 0) {\r\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of ammo!\")\r\n        }\r\n      }\r\n      else if (GetBoolean(this, \"magicchargedweapon\")) {\r\n        if (this.ammo = 0) {\r\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of charges!\")\r\n        }\r\n      }\r\n      else {\r\n        if (this.ammo = 0) {\r\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is empty!\")\r\n        }\r\n      }\r\n    ]]></changedammo>\r\n  </type>\r\n\r\n```\r\n\r\nCan anyone tell what might be wrong here?   The changed ammo scripts and outofammo scripts in this scenario should subtract one from the arrows in inventory and then change the alias to \"3 arrows\" the first time, then \"2 arrows\" etc.  But for some reason it changes it once to \"0 arrows\" and stays that way until the weapon is completely empty.   I also wanted a \"remove item\" added to take the arrows away once the ammo in them was zero, but that was removing them on first fire.  Yet the attacks worked as if they were still there until all the rounds depleted and then gave the correct empty message.\r\n\r\nPlease and thanks for any help or advice.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>When I update the ammo attribute on an object during an attack, and then try to update the alias of that object to show lower ammo in inventory, it's showing \"0 ammo\" instead of the amount of Ammo that the object has after everything is done running.</p>\n<p>Or maybe the system is working well enough that the weapon functions as if it's getting loaded properly, but the \"ammo\" on the object being loaded into it is changing to 0 instead of incrementing down each attack?</p>\n<p>I've been working a system within Pixie's CombatLib to deal with using ammo in the weapons.  The library has a built in method of refusing to let the player attack if the weapon has 0 for its ammo attribute.   But that was essentially it.  So i created ranged weapon types and ammo types that have ammo attributes.  I also use a system of Booleans to help recognize how to treat the different sub-types in the scripts.  (the difference between something like a gun, a bow, or a wand).</p>\n<p>But I can't seem to track down what's wrong to make the new alias in inventory show an unexpected 0 instead of what I think the ammo amount for the ammo object is.</p>\n<p>The attack script that begins all of the changes is Pixie's built-in one, but I've added to the system by modifying what happens for \"OutofAmmo()\" and also added a \"FireRangedWeapon()\" function.    These two calls in the attack script work together with attributes and scripts on the rangedweapon and ammo types.</p>\n<p>For Firearms and Wand/Rods  there's a different system of replenishing the ammo, the player must use a \"load\" command.  That seems to work fine with updating the inventory, and I think it's because of how commands function differently with the inventory than how scripts run during a turnscript work.</p>\n<p>If it helps, here's what my changed code currently looks like:</p>\n<p>This doattack script on a monster runs when the player types \"attack monster\"</p>\n<pre><code>    &lt;doattack type=\"script\"&gt;&lt;![CDATA[\n      if (OutOfAmmo()) {\n        do (this, \"outofammo\")\n      }\n      else if (this.dead) {\n        // s = GetDisplayAlias(this)\n        // msg(\"The \" + Mid(s, 1, LengthOf(s) - 7) + \" is already dead.\")\n        msg (\"The \" + GetDisplayAlias(this) + \" is already dead.\")\n      }\n      else {\n        if (DoesInherit(game.pov.equipped, \"rangedweapon\")) {\n          FireRangedWeapon\n        }\n        SneakUpdate (5)\n        do (this, \"settoattack\")\n        attackroll = GetRandomInt (1, 20) + GetAttack(this)\n        if (this.noncorporeal and GetElement(game.pov.equipped) = null) {\n          if (game.pov.equipped.nonweapon) {\n            msg (\"You attack the \" + GetDisplayAlias(this) + \", and pass straight through it!\")\n          }\n          else {\n            msg (\"You swing your \" + GetDisplayAlias(game.pov.equipped) + \" and it goes straight through the \" + GetDisplayAlias(this) + \"!\")\n          }\n        }\n        else if (attackroll &gt; 10) {\n          damage = GetDamage (game.pov.equipped, game.pov.strength / 2 + this.temp_damage + game.pov.damagebonus, this)\n          this.hitpoints = this.hitpoints - damage\n          if (this.hitpoints &gt; 0) {\n            if (game.pov.equipped.nonweapon) {\n              msg (\"You attack and hit, doing \" + damage + \" points of damage (\" + this.hitpoints + \" hits left). \" + this.hurtbyweapon)\n            }\n            else {\n              msg (this.temp_desc + \" \" + GetDisplayAlias(game.pov.equipped) + \" and hit, doing \" + damage + \" points of damage (\" + this.hitpoints + \" hits left). \" + this.hurtbyweapon)\n            }\n            if (HasScript(this, \"onweaponhit\")) {\n              do (this, \"onweaponhit\")\n            }\n            if (HasObject(game.pov.equipped, \"venom\")) {\n              if (this.poisonimmunity) {\n                if (HasString(this, \"poisonimmunitymsg\")) {\n                  msg (this.poisonimmunitymsg)\n                }\n                else {\n                  msg (\"The \" + GetDisplayAlias(this) + \" is immune to your blade venom.\")\n                }\n              }\n              else {\n                game.pov.target = this\n                do (game.pov.equipped.venom, \"effect\")\n              }\n              game.pov.equipped.venom = null\n            }\n          }\n          else {\n            if (game.pov.equipped.nonweapon) {\n              msg (\"You attack and hit, doing \" + damage + \" points of damage. \" + this.death)\n            }\n            else {\n              msg (this.temp_desc + \" \" + GetDisplayAlias(game.pov.equipped) + \" and hit, doing \" + damage + \" points of damage. \" + this.death)\n            }\n            do (this, \"makedead\")\n          }\n        }\n        else {\n          if (game.pov.equipped.nonweapon) {\n            msg (\"You attack and miss.\")\n          }\n          else {\n            msg (\"You swing your \" + GetDisplayAlias(game.pov.equipped) + \" and miss.\")\n          }\n        }\n        if (HasObject(game.pov, \"secondary_attack\")) {\n          do (this, \"secondaryattack\")\n        }\n      }\n    ]]&gt;&lt;/doattack&gt;\n\n</code></pre>\n<p>So the FireRangedWeapon()  is very simple</p>\n<pre><code>\n  &lt;function name=\"FireRangedWeapon\"&gt;\n    game.pov.equipped.ammo = game.pov.equipped.ammo - 1\n  &lt;/function&gt;\n\n</code></pre>\n<p>The ammo in player inventory is</p>\n<pre><code>\n    &lt;object name=\"arrows\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"ammo\" /&gt;\n      &lt;feature_combat /&gt;\n      &lt;ammo type=\"int\"&gt;4&lt;/ammo&gt;\n      &lt;take /&gt;\n      &lt;takemsg&gt;You pick up the ammunition&lt;/takemsg&gt;\n      &lt;dropmsg&gt;You drop the ammunition&lt;/dropmsg&gt;\n      &lt;feature_usegive /&gt;\n      &lt;use type=\"boolean\"&gt;false&lt;/use&gt;\n      &lt;firearmammo type=\"boolean\"&gt;false&lt;/firearmammo&gt;\n      &lt;alias&gt;arrows&lt;/alias&gt;\n      &lt;magicammo type=\"boolean\"&gt;false&lt;/magicammo&gt;\n      &lt;bowammo /&gt;\n      &lt;selfuseanything type=\"script\"&gt;\n        if (HasAttribute(obj, \"ammo\")) {\n          obj.ammo = obj.ammo + this.ammo\n        }\n        else {\n          msg (\"Try using your ammo in a ranged weapon...\")\n        }\n      &lt;/selfuseanything&gt;\n      &lt;changedammo type=\"script\"&gt;\n        if (not GetBoolean(this, \"magicammo\")) {\n          firsttime {\n            this.oldalias = this.alias\n            this.newalias = this.ammo + \" \" + this.oldalias\n            SetAlias (this, this.newalias)\n          }\n          otherwise {\n            this.newalias = this.ammo + \" \" + this.oldalias\n            SetAlias (this, this.newalias)\n          }\n        }\n      &lt;/changedammo&gt;\n      &lt;selfuseon type=\"scriptdictionary\"&gt;\n        &lt;item key=\"player\"&gt;\n          msg (\"You can't use the ammo on yourself, silly.  Try using it in a ranged weapon...\")\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n      &lt;visible /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n\n</code></pre>\n<p>And the weapon being used in the attack is</p>\n<pre><code>\n    &lt;object name=\"Bow\"&gt;\n      &lt;inherit name=\"rangedweapon\" /&gt;\n      &lt;price type=\"int\"&gt;5&lt;/price&gt;\n      &lt;feature_combat /&gt;\n      &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n      &lt;ammo type=\"int\"&gt;1&lt;/ammo&gt;\n      &lt;nonweapon /&gt;\n      &lt;bowweapon /&gt;\n      &lt;projectileweapon type=\"boolean\"&gt;false&lt;/projectileweapon&gt;\n      &lt;firearm type=\"boolean\"&gt;false&lt;/firearm&gt;\n      &lt;magicchargedweapon type=\"boolean\"&gt;false&lt;/magicchargedweapon&gt;\n      &lt;maxammo type=\"int\"&gt;3&lt;/maxammo&gt;\n    &lt;/object&gt;\n\n</code></pre>\n<p>and the rangedweapon type is</p>\n<pre><code>\n  &lt;type name=\"rangedweapon\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"weapon\" /&gt;\n    &lt;feature_combat /&gt;\n    &lt;price type=\"int\"&gt;1&lt;/price&gt;\n    &lt;attacktype&gt;Arrow&lt;/attacktype&gt;\n    &lt;nonweapon type=\"boolean\"&gt;false&lt;/nonweapon&gt;\n    &lt;ammo type=\"int\"&gt;0&lt;/ammo&gt;\n    &lt;bowweapon type=\"boolean\"&gt;false&lt;/bowweapon&gt;\n    &lt;projectileweapon type=\"boolean\"&gt;false&lt;/projectileweapon&gt;\n    &lt;firearm type=\"boolean\"&gt;false&lt;/firearm&gt;\n    &lt;magicchargedweapon type=\"boolean\"&gt;false&lt;/magicchargedweapon&gt;\n    &lt;outofammo type=\"script\"&gt;&lt;![CDATA[\n      if (GetBoolean(this, \"bowweapon\")) {\n        foreach (obj, ScopeInventory()) {\n          if (GetBoolean(obj, \"bowammo\")) {\n            obj = obj\n            if (obj.ammo &gt; 0) {\n              obj.ammo = obj.ammo -1\n              this.ammo = this.ammo +1\n            }\n          }\n          else {\n            msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" has nothing left to fire!\")\n          }\n        }\n      }\n      else if (GetBoolean(this, \"projectileweapon\")) {\n        msg (\"There's nothing you can shoot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\n      }\n      else if (GetBoolean(this, \"firearm\")) {\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of ammo!\")\n      }\n      else if (GetBoolean(this, \"magicchargedweapon\")) {\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of charges!\")\n      }\n      else {\n        msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is empty!\")\n      }\n    ]]&gt;&lt;/outofammo&gt;\n    &lt;changedammo type=\"script\"&gt;&lt;![CDATA[\n      if (GetBoolean(this, \"bowweapon\")) {\n        foreach (obj, ScopeInventory()) {\n          if (GetBoolean(obj, \"bowammo\")) {\n            obj = obj\n            if (obj.ammo &gt; 0) {\n              obj.ammo = obj.ammo -1\n              this.ammo = this.ammo +1\n            }\n            else {\n            }\n          }\n          else {\n          }\n        }\n        if (this.ammo = 0) {\n          msg (\"You fire your last shot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\n        }\n      }\n      else if (GetBoolean(this, \"projectileweapon\")) {\n        msg (\"There's nothing you can shoot from your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\n        foreach (obj, ScopeInventory()) {\n          if (GetBoolean(obj, \"projectileammo\")) {\n            if (obj.ammo &gt; 0) {\n              obj.ammo = obj.ammo - 1\n              this.ammo = this.ammo +1\n            }\n            else {\n              RemoveObject (obj)\n            }\n          }\n          else {\n          }\n        }\n        if (this.ammo = 0) {\n          msg (\"You have nothing left to use with your \" + GetDisplayAlias(game.pov.equipped) + \" !\")\n        }\n      }\n      else if (GetBoolean(this, \"firearm\")) {\n        if (this.ammo = 0) {\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of ammo!\")\n        }\n      }\n      else if (GetBoolean(this, \"magicchargedweapon\")) {\n        if (this.ammo = 0) {\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is out of charges!\")\n        }\n      }\n      else {\n        if (this.ammo = 0) {\n          msg (\"Your \" + GetDisplayAlias(game.pov.equipped) + \" is empty!\")\n        }\n      }\n    ]]&gt;&lt;/changedammo&gt;\n  &lt;/type&gt;\n\n</code></pre>\n<p>Can anyone tell what might be wrong here?   The changed ammo scripts and outofammo scripts in this scenario should subtract one from the arrows in inventory and then change the alias to \"3 arrows\" the first time, then \"2 arrows\" etc.  But for some reason it changes it once to \"0 arrows\" and stays that way until the weapon is completely empty.   I also wanted a \"remove item\" added to take the arrows away once the ammo in them was zero, but that was removing them on first fire.  Yet the attacks worked as if they were still there until all the rounds depleted and then gave the correct empty message.</p>\n<p>Please and thanks for any help or advice.</p>\n\n",
      "PostDate": "2024-04-27T22:48:11.2232017Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ef54cd56-c317-4df4-8517-d89b4116568d",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I figured it all out!\r\n\r\nI was pretty foolish having changedammo change the ammo... doh!  It cycled through until the ammo was at zero, and gave the last result for having run out upon the first use.  That's what the main issue was.  I scoured my code for way too long looking for \"ammo\" and trying to find where the math went wrong on the attribute, without seeing that I'd created a loop.  thank goodness it terminated when the ammo changed to zero, or else it the game would still be running an endless cycle of subtracting ammo from the ammo and adding ammo to the rangedweapon!\r\n\r\nAnother issue is that I had things inside the foreach that didn't need to be, because I didn't know how to reference the found object for other scripts.  Solved that by creating an object attribute ammosource for game.pov.equipped which will be set depending upon what's going on.\r\n\r\nI rearranged the system a bit, and got it doing exactly what I want now.  If anyone is curious, just let me know before this topic expires haha.  Or message me and I'll share what I've got.  ",
      "EditableFormat": "markdown",
      "HTML": "<p>I figured it all out!</p>\n<p>I was pretty foolish having changedammo change the ammo... doh!  It cycled through until the ammo was at zero, and gave the last result for having run out upon the first use.  That's what the main issue was.  I scoured my code for way too long looking for \"ammo\" and trying to find where the math went wrong on the attribute, without seeing that I'd created a loop.  thank goodness it terminated when the ammo changed to zero, or else it the game would still be running an endless cycle of subtracting ammo from the ammo and adding ammo to the rangedweapon!</p>\n<p>Another issue is that I had things inside the foreach that didn't need to be, because I didn't know how to reference the found object for other scripts.  Solved that by creating an object attribute ammosource for game.pov.equipped which will be set depending upon what's going on.</p>\n<p>I rearranged the system a bit, and got it doing exactly what I want now.  If anyone is curious, just let me know before this topic expires haha.  Or message me and I'll share what I've got.</p>\n\n",
      "PostDate": "2024-04-30T05:39:55.5585939Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
