{
  "Topic": {
    "TopicId": "u13n-_2lyu2yce1xg9fxdw",
    "ForumId": "10",
    "Title": "Game allows North when exit is actually Northwest.  Want to block all but NW",
    "LastUpdated": "2022-02-04T09:42:51.2747826Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "be7fd7d9-2526-487d-8c74-73db696db490",
      "UserId": 578417,
      "Username": "kulouie13",
      "AvatarUrl": "https://secure.gravatar.com/avatar/24f8bd63f0ad46786e7527782856d5a6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm new to Quest - just discovered it two days ago and I'm having a blast struggling mightily with code and Commands and whatnot.  But I just ran into a headscratcher for me, when most of what I have is actually running smoothly somehow.  I have a room (Living Room) with a NW exit to the Westside Backyard.  I created it and created the exit both ways.  When traveling from Westside backyard into the Living Room, SE is required (S actually goes to another room).  When traveling from the Living room, N should hit a wall (can't go that way) and NW should take me to the Westside backyard.  For some reason, both N and NW work.  I don't want this - I only want NW to work.  Also, why is this happening?  Any and all help appreciated.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm new to Quest - just discovered it two days ago and I'm having a blast struggling mightily with code and Commands and whatnot.  But I just ran into a headscratcher for me, when most of what I have is actually running smoothly somehow.  I have a room (Living Room) with a NW exit to the Westside Backyard.  I created it and created the exit both ways.  When traveling from Westside backyard into the Living Room, SE is required (S actually goes to another room).  When traveling from the Living room, N should hit a wall (can't go that way) and NW should take me to the Westside backyard.  For some reason, both N and NW work.  I don't want this - I only want NW to work.  Also, why is this happening?  Any and all help appreciated.</p>\n\n",
      "PostDate": "2022-02-04T09:42:51.2747826Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3cf9caa6-876a-40a5-a3b9-ef6d63f2678a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When the player types an object alias, Quest looks at the beginning of all objects they can see. For example, you can type \"comp\" to mean \"computer\", \"trash\" for \"trash can\", \"sp\" for \"spanner\", or \"north\" for \"northwest\".\r\n\r\nIf you want to block this in a specific case, the easiest way is probably creating a \"north\" exit in the room, making it scenery, locked, and changing the lock message to \"You can't go that way.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>When the player types an object alias, Quest looks at the beginning of all objects they can see. For example, you can type \"comp\" to mean \"computer\", \"trash\" for \"trash can\", \"sp\" for \"spanner\", or \"north\" for \"northwest\".</p>\n<p>If you want to block this in a specific case, the easiest way is probably creating a \"north\" exit in the room, making it scenery, locked, and changing the lock message to \"You can't go that way.\"</p>\n\n",
      "PostDate": "2022-02-04T09:47:55.1773966Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "96622fbb-2745-4080-ba1c-b943007cd6f8",
      "UserId": 578417,
      "Username": "kulouie13",
      "AvatarUrl": "https://secure.gravatar.com/avatar/24f8bd63f0ad46786e7527782856d5a6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That worked, although I'm guessing I'll have to do that for any/every room that has a diagonal exit and does not have a cardinal exit matching its starting letter.  Not too difficult, just with how powerful/picky some of the other processes I've run into thus far, I'm surprised this is needed.  Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>That worked, although I'm guessing I'll have to do that for any/every room that has a diagonal exit and does not have a cardinal exit matching its starting letter.  Not too difficult, just with how powerful/picky some of the other processes I've run into thus far, I'm surprised this is needed.  Thanks!</p>\n\n",
      "PostDate": "2022-02-04T09:58:15.7915125Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f82039ce-7de5-4cd2-8d55-d553827d5b7f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm guessing I'll have to do that for any/every room that has a diagonal exit and does not have a cardinal exit matching its starting letter\r\n\r\nHmm… I think it should be possible to have some code in your start script that creates them automatically. Off the top of my head…\r\n\r\n<details style=\"background-color: silver\"><summary style=\"text-decoration: underline;\">> Click here to see my thought process as I came up with this</summary>\r\nOne alternative would be to create an object called \"north_wall\" or similar. You could put it somewhere it's not accessible, and then give the game a script attribute named `changecommandscope`:\r\n```\r\n  if (objtype = \"exit\") {\r\n    foreach (direction, Split(\"north;south;east;west\")) {\r\n      if (ListCount (FilterByType (items, direction+\"direction\")) = 0) {\r\n        list add (items, GetObject (direction + \"_wall\"))\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nThat changes the way Quest determines what exits are viable candidates before comparing their aliases to what the player typed; if there isn't an exit which inherits the `northdirection` type, the object named `north_wall` is considered. If there isn't an exit that inherits the `westdirection` type, the object named `west_wall` is added, and so on.\r\n\r\nThe exits for this script should be named `north_wall`, `south_wall`, `east_wall`, and `west_wall`. You can set their aliases to whatever you want (the player's command is compared to the aliases, and their alt aliases). These will still be expanded if necessary. So you might see:\r\n> ==> go north\r\n> Which object did you mean?\r\n>    1. Northwest\r\n>    2. North wall\r\n\r\nTo stop the menu appearing, make the dummy exit's alias (or one of the entries in its alt list) exactly \"north\". It might be worth adding \"n\" to the alt list as well. Because Quest only considers names that *start with* what the player typed if there's nothing whose alias is *exactly* what the player typed.\r\nIf the player types \"go nor\", it will still give them a list of options. But not if they type an option that's in the list.\r\n\r\nActually, if you want to do it with just a single copy-and-paste, this script (which you can put in your game's start script) will create the dummy exits for you and make the change to the parser so that the dummy exits are available whenever there isn't a real exit in that direction.</details>\r\n\r\nYou can put this in your game's start script, and it should make exits behave like this by default:\r\n```\r\nforeach (direction, Split(\"north;south;east;west\")) {\r\n  create exit (direction+\"_wall\", direction+\" wall\", null, null, direction+\"direction\")\r\n  dummyexit = GetObject(direction+\"_wall\")\r\n  if (not dummyexit = null) {\r\n    dummyexit.alt = ListCombine (Split (direction), dummyexit.alt)\r\n    dummyexit.locked = true\r\n    dummyexit.lockmessage = \"[UnresolvedLocation]\"\r\n  }\r\n}\r\ngame.changecommandscope => {\r\n  if (objtype = \"exit\") {\r\n    foreach (direction, Split(\"north;south;east;west\")) {\r\n      if (ListCount (FilterByType (items, direction+\"direction\")) = 0) {\r\n        list add (items, GetObject (direction + \"_wall\"))\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n(I'm not sure, but it might work if you make the exit dummy invisible rather than locked. If so, that would be more efficient because you don't need to specify a message for that)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm guessing I'll have to do that for any/every room that has a diagonal exit and does not have a cardinal exit matching its starting letter</p>\n</blockquote>\n<p>Hmm… I think it should be possible to have some code in your start script that creates them automatically. Off the top of my head…</p>\n<details style=\"background-color: silver\"><summary style=\"text-decoration: underline\">&gt; Click here to see my thought process as I came up with this</summary>\nOne alternative would be to create an object called \"north_wall\" or similar. You could put it somewhere it's not accessible, and then give the game a script attribute named `changecommandscope`:\n```\n  if (objtype = \"exit\") {\n    foreach (direction, Split(\"north;south;east;west\")) {\n      if (ListCount (FilterByType (items, direction+\"direction\")) = 0) {\n        list add (items, GetObject (direction + \"_wall\"))\n      }\n    }\n  }\n```\n<p>That changes the way Quest determines what exits are viable candidates before comparing their aliases to what the player typed; if there isn't an exit which inherits the <code>northdirection</code> type, the object named <code>north_wall</code> is considered. If there isn't an exit that inherits the <code>westdirection</code> type, the object named <code>west_wall</code> is added, and so on.</p>\n<p>The exits for this script should be named <code>north_wall</code>, <code>south_wall</code>, <code>east_wall</code>, and <code>west_wall</code>. You can set their aliases to whatever you want (the player's command is compared to the aliases, and their alt aliases). These will still be expanded if necessary. So you might see:</p>\n<blockquote>\n<p>==&gt; go north<br>\nWhich object did you mean?</p>\n<ol>\n<li>Northwest</li>\n<li>North wall</li>\n</ol>\n</blockquote>\n<p>To stop the menu appearing, make the dummy exit's alias (or one of the entries in its alt list) exactly \"north\". It might be worth adding \"n\" to the alt list as well. Because Quest only considers names that <em>start with</em> what the player typed if there's nothing whose alias is <em>exactly</em> what the player typed.<br>\nIf the player types \"go nor\", it will still give them a list of options. But not if they type an option that's in the list.</p>\n<p>Actually, if you want to do it with just a single copy-and-paste, this script (which you can put in your game's start script) will create the dummy exits for you and make the change to the parser so that the dummy exits are available whenever there isn't a real exit in that direction.</p></details><p></p>\n<p>You can put this in your game's start script, and it should make exits behave like this by default:</p>\n<pre><code>foreach (direction, Split(\"north;south;east;west\")) {\n  create exit (direction+\"_wall\", direction+\" wall\", null, null, direction+\"direction\")\n  dummyexit = GetObject(direction+\"_wall\")\n  if (not dummyexit = null) {\n    dummyexit.alt = ListCombine (Split (direction), dummyexit.alt)\n    dummyexit.locked = true\n    dummyexit.lockmessage = \"[UnresolvedLocation]\"\n  }\n}\ngame.changecommandscope =&gt; {\n  if (objtype = \"exit\") {\n    foreach (direction, Split(\"north;south;east;west\")) {\n      if (ListCount (FilterByType (items, direction+\"direction\")) = 0) {\n        list add (items, GetObject (direction + \"_wall\"))\n      }\n    }\n  }\n}\n</code></pre>\n<p>(I'm not sure, but it might work if you make the exit dummy invisible rather than locked. If so, that would be more efficient because you don't need to specify a message for that)</p>\n\n",
      "PostDate": "2022-02-04T14:17:37.4814425Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
