{
  "Topic": {
    "TopicId": "4359",
    "ForumId": "10",
    "Title": "What do these scripts do?",
    "LastUpdated": "2014-05-28T07:19:20+01:00",
    "ReplyCount": 8
  },
  "Posts": [
    {
      "PostId": "28882",
      "UserId": 0,
      "Username": "Espera",
      "UserAvatar": null,
      "UserGravatar": "04bdffe31cdc4e1c0d61f05a2f5a7532",
      "EditableText": "When I go to the 'Scripts' subsection of the Scripts list in the UI, I get quite a selection of options, and I only know what a few of them do. I figure if I could master these, they could be valuable tools in my toolbox. More than knowing ust how these options are used, I'm interested in knowing why, or when, they should be used. The ones I'm interested in right now are &quot;For...&quot; &quot;For each...&quot; and 'Siwtch&quot;. Can someone tell me about these?",
      "EditableFormat": "bbcode",
      "HTML": "When I go to the 'Scripts' subsection of the Scripts list in the UI, I get quite a selection of options, and I only know what a few of them do. I figure if I could master these, they could be valuable tools in my toolbox. More than knowing ust how these options are used, I'm interested in knowing why, or when, they should be used. The ones I'm interested in right now are &quot;For...&quot; &quot;For each...&quot; and 'Siwtch&quot;. Can someone tell me about these?",
      "PostDate": "2014-05-24T04:12:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28883",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "this probably won't help you, as I'll be going over this stuff using code, but I hope it'll at least make some sense to you a bit with conception-understanding at least (I hope, HK crosses his fingers, lol)...\n\n(hopefully you can figure out how to do this stuff via the GUI~Editor, as I'm just not that familar with it yet, and it takes so much longer to try to explain stuff using the GUI~Editor, sighs)\n\n(unfortunately, what, how, when, why, where, and etc to use different code designs... takes years of experience... I'm struggling with this myself... I make really messy code~scripts, and then Jay, Pertex, Pixie, Chase, Sora, and etc... come along and do the same stuff in like only a 1/10 of the amount of code, is super neat ~ easy to understand, and etc... argh... lol! And I never even realized to do it that way that they do it... it's a lot like math... it's like me and you can only use addition, whereas experienced coders can use everything: from addition to calculus and beyond... they know what's the best math ability to use to solve something, whereas me and you are stuck with just using addition... we don't even know that multiplication, algebra, trig, calculus, and etc exists, let alone when, where, why, and how, to use which one of them for which situation-problem, lol. It's like I need to do a 100 step proof to solve a math problem, but they can solve the math problem in just a 10 step proof!)\n\n-----------\n\n01. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m --> (page 1, range: A-S)\n02. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/w/index.php?title=Category:All_Functions_and_Script_Commands&amp;pagefrom=Set#mw-pages\">http://quest5.net/w/index.php?title=Cat ... t#mw-pages</a><!-- m --> (page 2, range: S-Z)\n03. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetRandomInt\">http://quest5.net/wiki/GetRandomInt</a><!-- m -->\n04. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/ListCount\">http://quest5.net/wiki/ListCount</a><!-- m -->\n05. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m -->\n06. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Dictionaries\">http://quest5.net/wiki/Using_Dictionaries</a><!-- m --> (this is a bit more complicated than using lists)\n07. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Split\">http://quest5.net/wiki/Split</a><!-- m -->\n08. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Join\">http://quest5.net/wiki/Join</a><!-- m --> (this isn't really used much by non-advanced coders, I don't even understand why~when you'd ever use this function, lol)\n09. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Foreach\">http://quest5.net/wiki/Foreach</a><!-- m -->\n10. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/For\">http://quest5.net/wiki/For</a><!-- m -->\n11. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/NewStringList\">http://quest5.net/wiki/NewStringList</a><!-- m -->\n12. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:Scopes\">http://quest5.net/wiki/Category:Scopes</a><!-- m -->\n13. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m -->\n14. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Objectlist\">http://quest5.net/wiki/Objectlist</a><!-- m -->\n15. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/List_add\">http://quest5.net/wiki/List_add</a><!-- m -->\n16. etc... lol\n\n---------------------\n\n'for' and 'foreach' deals with Lists (stringlists and objectlists).\n\nbefore I talk about 'for' and 'foreach', first we must get into what lists are:\n\n(1) red, (2) blue, or (3) yellow\n\nlists provide a selection of choices (a collection of strings, separated as individual selections to choose from), in the above example: red, blue, or yellow\n\nString: redblueyellow\nStringList: (1) red, (2) blue, or (3) yellow\n\nString -&gt; 'splits' into a -&gt; StringList\nStringList -&gt; 'joins' into a -&gt; String\n\nthe 'split' function creates a StringList (or ObjectList)\n\nObject.StringList = split (&quot;item_1;item_2;item_3;etc&quot;, &quot;separator_character&quot;)\n\nconceptually:\n\ngame.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_character: semicolon&quot;)\ngame.primary_colors_string_list = split (&quot;red;blue;yellow&quot;, &quot;;&quot;)\n\ngame.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_character: plus sign&quot;)\ngame.primary_colors_string_list = split (&quot;red+blue+yellow&quot;, &quot;+&quot;)\n\ngame.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_characters: HK&quot;)\ngame.primary_colors_string_list = split (&quot;redHKblueHKyellow&quot;, &quot;HK&quot;)\n\nusually people use the semicolon as the separator character (using the 'split' in a 'show menu', as an example):\n\nshow menu (&quot;What is your race?&quot;, split (&quot;human;dwarf;elf&quot;, &quot;;&quot;), false) {\n-&gt; player.race_string = result\n}\n\nand, you can also make Lists this way too:\n\nObject.StringList = NewStringList ()\nlist add (Object.StringList, &quot;item_1&quot;)\nlist add (Object.StringList, &quot;item_2&quot;)\nlist add (Object.StringList, &quot;item_3&quot;)\n// etc\n\nso, that's what Lists are, but now for what is useful about those lists:\n\nas I already shown, you can use them for a choice of selections to make\n\nhowever, the other useful thing with lists is that you can use them to act upon specific items within the list (via 'for') or to act upon ALL~EVERY~EACH item within the list (via 'foreach'):\n\nthough for you to understand how this works, I got to explain something about lists:\n\nwhile 'split (&quot;red;blue;yellow&quot;, &quot;;&quot;)' has three items (red-1,  blue-2, yellow-3), their actual list ordering begins with ZERO:\n\nlist item order ('indexing'):\n0: red\n1: blue\n2: yellow\n\nso (using my above example)...\n\nStringListItem (game.primary_colors_string_list, 1) -&gt; outputs~returns: blue\nStringListItem (game.primary_colors_string_list, 2) -&gt; outputs~returns: yellow\nStringListItem (game.primary_colors_string_list, 0) -&gt; outputs~returns: red\nStringListItem (game.primary_colors_string_list, 3) -&gt; outputs~returns: ERROR~null, there is no 4th item (no item ordering of 3)\n\nthis allows for some cool stuff, such as random selection:\n\nGetRandomInt (min, max)\n\ngame.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,2))\ngame.primary_color_choosen_string = // (a random choice of either red; blue; or yellow)\n\nand also this is extremely useful too with lists:\n\nListCount (game.primary_colors_string_list) -&gt; outputs~returns: 3 (# of items in the list, NOT the list ordering, ya it gets some getting used to, very confusing for quite awhile)\n\ngame.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,ListCount (game.primary_colors_string_list)) -&gt; outputs~returns: // (a random choice of either red; blue; or yellow)\n\nlist remove (game.primary_colors_string_list, &quot;yellow&quot;)\n\ngame.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,ListCount (game.primary_colors_string_list) - 1) -&gt; outputs~returns: // (a random choice of either red or blue)\n\n* the 'ListCount (Object.List) - 1' is because of the difference between number of items in a list and the list's ordering:\n\nordering: color_string (number of items)\n0: red (1st item)\n1: blue (2nd item)\n2: yellow (3rd item)\n\nListCount = 3 \n3 - 1\nList item ordering: 2\n\nStringListItem (Object.List, GetRandomInt (0, ListItem (Object.List) -1))\nStringListItem (Object.List, GetRandomInt (0, 3 -1))\nStringListItem (Object.List, GetRandomInt (0, 2))\n// outputs~returns: (either: red, blue, or yellow)\n\nif you don't do the 'ListCount (Object.List) - 1', you get problems~errors:\n\nStringListItem (Object.List, GetRandomInt (0, ListItem (Object.List)))\nStringListItem (Object.List, GetRandomInt (0, 3))\n// outputs~returns: (either: red, blue, yellow, or... ???... no 4th item... ERROR~null...BIG PROBLEMS!)\n\n-------\n\nthe importance of this, is that it finds the number of items in the list currently, without your intervention of 'coding' (typing) in the right number into the code line, which is not always possible for you to do, when you got code of changing list items taking place.\n\n---------\n\nalright, I've explained a bit more than what you asked for in the above, so let me now get to explaining what you wanted: 'for' and 'foreach', though I think the above helps with understanding this stuff too (if it doesn't confuse you even more, argh, lol):\n\nso you got a string list:\n\ngame.primary_colors_string_list = split (&quot;red;blue;yellow&quot;, &quot;;&quot;)\n\nif I want to do the same action(s) for ALL~EVERY~EACH item within the string list:\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Foreach\">http://quest5.net/wiki/Foreach</a><!-- m -->\n\nitem_x -&gt; 1st as: red\nitem_x -&gt; 2nd as: blue\nitem_x -&gt; 3rd as: yellow\n// etc\n\nforeach (item_x, game.primary_colors_string_list)\n-&gt; msg (&quot;Color: &quot; + item_x)\n}\n// outputs~returns #1: Color: red\n// outputs~returns #2: Color: blue\n// outputs~returns #3: Color: yellow\n\nlet's use the example of an object list now:\n\ngame.fruit_string_list = split (&quot;apple;orange;lemon&quot;, &quot;;&quot;)\n\nforeach (item_x, game.fruit_string_list)\n-&gt; MoveObject (item_x, player) // or (this does the exact same thing as 'MoveObject'): item_x.parent = player\n}\n// the &quot;player&quot; Player Object now holds these items: apple, orange, and lemon\n\nor, we can do a Verb script too:\n\nVerb: &quot;eat&quot;; the 'apple', 'orange', and 'lemon' Objects have all be given (add verb) the &quot;eat&quot; verb\n\nforeach (item_x, game.fruit_string_list)\n-&gt; invoke (item_x.eat)\n}\n// you do the apple's eat verb\n// you do the orange's eat verb\n// you do the lemon's eat verb\n\nor here's a good analogy example for you:\n\ngame.team_string_list = split (&quot;team_member_1;team_member_2;team_member_3&quot;, &quot;;&quot;)\n\nforeach (team_member, game.team_string_list)\n-&gt; invoke (team_member.run_laps)\n}\n// ALL~EVERY~EACH team member runs laps\n\nnow, about 'for':\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/For\">http://quest5.net/wiki/For</a><!-- m -->\n\n(iterator variable, int from, int to) { script }\nor\n(iterator variable, int from, int to, int step) { script }\n\nremember, list ordering starts at ZERO:\n0: team member 1\n1: team member 2\n2: team member 3\n\nfor (team_member, 0,2)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 2 runs laps\n// team member 3 runs laps\n\nfor (team_member, 0,1)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 2 runs laps\n\nfor (team_member, 1,2)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 2 runs laps\n// team member 3 runs laps\n\nfor (team_member, 0,0)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n\nfor (team_member, 1,1)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 2 runs laps\n\nfor (team_member, 2,2)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 3 runs laps\n\nfor (team_member, 0,2,2)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 3 runs laps\n\nfor (team_member, 0,2,1)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 2 runs laps\n// team member 3 runs laps\n\n(let's add more team members to show more examples):\n\n5 team members:\n(remember, list ordering starts at ZERO)\n0: team member 1\n1: team member 2\n2: team member 3\n3: team member 4\n4: team member 5\n\nfor (team_member, 0,4,2)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 3 runs laps\n// team member 5 runs laps\n\nfor (team_member, 0,4,4)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 5 runs laps\n\nfor (team_member, 0,4,3)\n-&gt; invoke (team_member.run_laps)\n}\n// team member 1 runs laps\n// team member 4 runs laps\n\n--------\n\nand don't forget you can use randomness: GetRandomInt (min, max), and also the current number of items too: ListCount (Object.List) - 1\n\n-------\n\nbasically, lists enable you to group many (strings or objects: string lists or object lists), so that you can then do actions upon either: all~every~each of that group of strings~objects (via 'foreach'), or on a specific range (ie specific) of those string~objects within that group (via 'for').\n\nalso, lists enable you to easily adjust-change them (adding or removing items, ie: string or object), as well.\n\nfor example, let's say you got a random dialogue script block, such as when talking to an NPC (a non-playable-character, ie a 'townsfolk' vs a 'monster'), but you don't want the same dialogue choice being randomly selected over and over again, each time a dialogue msg script is selected, it is removed from the list, and the next time you talk to the NPC, it randomly selects from that now smaller list of choices, and again and again, until all the dialogue msgs are selected and seen by the person playing the game.\n\nor, like in many games, you want to have 'events' from 'exploring', or from opening a chest that can be reopened for new items.\n\nor for example, with a 'travel' or 'goto' or 'warp' feature~spell~whatever.\n\nI can provide game code, for you to play out and study, of an 'explore' and 'travel' features, which is a real example of lists, (dictionaries too ~ which are a bit more complicated then lists ~ once you understand lists, let me know, and I'll try to help you with understanding dictionaries), 'for', 'foreach' and etc stuff ('GetRandomInt', 'ListCount', 'StringListItem', 'Object'ListItem'), so just let me know if interested in it.",
      "EditableFormat": "bbcode",
      "HTML": "this probably won't help you, as I'll be going over this stuff using code, but I hope it'll at least make some sense to you a bit with conception-understanding at least (I hope, HK crosses his fingers, lol)...<br/><br/>(hopefully you can figure out how to do this stuff via the GUI~Editor, as I'm just not that familar with it yet, and it takes so much longer to try to explain stuff using the GUI~Editor, sighs)<br/><br/>(unfortunately, what, how, when, why, where, and etc to use different code designs... takes years of experience... I'm struggling with this myself... I make really messy code~scripts, and then Jay, Pertex, Pixie, Chase, Sora, and etc... come along and do the same stuff in like only a 1/10 of the amount of code, is super neat ~ easy to understand, and etc... argh... lol! And I never even realized to do it that way that they do it... it's a lot like math... it's like me and you can only use addition, whereas experienced coders can use everything: from addition to calculus and beyond... they know what's the best math ability to use to solve something, whereas me and you are stuck with just using addition... we don't even know that multiplication, algebra, trig, calculus, and etc exists, let alone when, where, why, and how, to use which one of them for which situation-problem, lol. It's like I need to do a 100 step proof to solve a math problem, but they can solve the math problem in just a 10 step proof!)<br/><br/>-----------<br/><br/>01. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m --> (page 1, range: A-S)<br/>02. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/w/index.php?title=Category:All_Functions_and_Script_Commands&amp;pagefrom=Set#mw-pages\">http://quest5.net/w/index.php?title=Cat ... t#mw-pages</a><!-- m --> (page 2, range: S-Z)<br/>03. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetRandomInt\">http://quest5.net/wiki/GetRandomInt</a><!-- m --><br/>04. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/ListCount\">http://quest5.net/wiki/ListCount</a><!-- m --><br/>05. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m --><br/>06. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Dictionaries\">http://quest5.net/wiki/Using_Dictionaries</a><!-- m --> (this is a bit more complicated than using lists)<br/>07. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Split\">http://quest5.net/wiki/Split</a><!-- m --><br/>08. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Join\">http://quest5.net/wiki/Join</a><!-- m --> (this isn't really used much by non-advanced coders, I don't even understand why~when you'd ever use this function, lol)<br/>09. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Foreach\">http://quest5.net/wiki/Foreach</a><!-- m --><br/>10. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/For\">http://quest5.net/wiki/For</a><!-- m --><br/>11. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/NewStringList\">http://quest5.net/wiki/NewStringList</a><!-- m --><br/>12. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:Scopes\">http://quest5.net/wiki/Category:Scopes</a><!-- m --><br/>13. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m --><br/>14. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Objectlist\">http://quest5.net/wiki/Objectlist</a><!-- m --><br/>15. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/List_add\">http://quest5.net/wiki/List_add</a><!-- m --><br/>16. etc... lol<br/><br/>---------------------<br/><br/>'for' and 'foreach' deals with Lists (stringlists and objectlists).<br/><br/>before I talk about 'for' and 'foreach', first we must get into what lists are:<br/><br/>(1) red, (2) blue, or (3) yellow<br/><br/>lists provide a selection of choices (a collection of strings, separated as individual selections to choose from), in the above example: red, blue, or yellow<br/><br/>String: redblueyellow<br/>StringList: (1) red, (2) blue, or (3) yellow<br/><br/>String -&gt; 'splits' into a -&gt; StringList<br/>StringList -&gt; 'joins' into a -&gt; String<br/><br/>the 'split' function creates a StringList (or ObjectList)<br/><br/>Object.StringList = split (&quot;item_1;item_2;item_3;etc&quot;, &quot;separator_character&quot;)<br/><br/>conceptually:<br/><br/>game.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_character: semicolon&quot;)<br/>game.primary_colors_string_list = split (&quot;red;blue;yellow&quot;, &quot;;&quot;)<br/><br/>game.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_character: plus sign&quot;)<br/>game.primary_colors_string_list = split (&quot;red+blue+yellow&quot;, &quot;+&quot;)<br/><br/>game.primary_colors_string_list = split (&quot;string: redblueyellow&quot;, &quot;separator_characters: HK&quot;)<br/>game.primary_colors_string_list = split (&quot;redHKblueHKyellow&quot;, &quot;HK&quot;)<br/><br/>usually people use the semicolon as the separator character (using the 'split' in a 'show menu', as an example):<br/><br/>show menu (&quot;What is your race?&quot;, split (&quot;human;dwarf;elf&quot;, &quot;;&quot;), false) {<br/>-&gt; player.race_string = result<br/>}<br/><br/>and, you can also make Lists this way too:<br/><br/>Object.StringList = NewStringList ()<br/>list add (Object.StringList, &quot;item_1&quot;)<br/>list add (Object.StringList, &quot;item_2&quot;)<br/>list add (Object.StringList, &quot;item_3&quot;)<br/>// etc<br/><br/>so, that's what Lists are, but now for what is useful about those lists:<br/><br/>as I already shown, you can use them for a choice of selections to make<br/><br/>however, the other useful thing with lists is that you can use them to act upon specific items within the list (via 'for') or to act upon ALL~EVERY~EACH item within the list (via 'foreach'):<br/><br/>though for you to understand how this works, I got to explain something about lists:<br/><br/>while 'split (&quot;red;blue;yellow&quot;, &quot;;&quot;)' has three items (red-1,  blue-2, yellow-3), their actual list ordering begins with ZERO:<br/><br/>list item order ('indexing'):<br/>0: red<br/>1: blue<br/>2: yellow<br/><br/>so (using my above example)...<br/><br/>StringListItem (game.primary_colors_string_list, 1) -&gt; outputs~returns: blue<br/>StringListItem (game.primary_colors_string_list, 2) -&gt; outputs~returns: yellow<br/>StringListItem (game.primary_colors_string_list, 0) -&gt; outputs~returns: red<br/>StringListItem (game.primary_colors_string_list, 3) -&gt; outputs~returns: ERROR~null, there is no 4th item (no item ordering of 3)<br/><br/>this allows for some cool stuff, such as random selection:<br/><br/>GetRandomInt (min, max)<br/><br/>game.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,2))<br/>game.primary_color_choosen_string = // (a random choice of either red; blue; or yellow)<br/><br/>and also this is extremely useful too with lists:<br/><br/>ListCount (game.primary_colors_string_list) -&gt; outputs~returns: 3 (# of items in the list, NOT the list ordering, ya it gets some getting used to, very confusing for quite awhile)<br/><br/>game.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,ListCount (game.primary_colors_string_list)) -&gt; outputs~returns: // (a random choice of either red; blue; or yellow)<br/><br/>list remove (game.primary_colors_string_list, &quot;yellow&quot;)<br/><br/>game.primary_color_choosen_string = StringListItem (game.primary_colors_string_list, GetRandomInt (0,ListCount (game.primary_colors_string_list) - 1) -&gt; outputs~returns: // (a random choice of either red or blue)<br/><br/>* the 'ListCount (Object.List) - 1' is because of the difference between number of items in a list and the list's ordering:<br/><br/>ordering: color_string (number of items)<br/>0: red (1st item)<br/>1: blue (2nd item)<br/>2: yellow (3rd item)<br/><br/>ListCount = 3 <br/>3 - 1<br/>List item ordering: 2<br/><br/>StringListItem (Object.List, GetRandomInt (0, ListItem (Object.List) -1))<br/>StringListItem (Object.List, GetRandomInt (0, 3 -1))<br/>StringListItem (Object.List, GetRandomInt (0, 2))<br/>// outputs~returns: (either: red, blue, or yellow)<br/><br/>if you don't do the 'ListCount (Object.List) - 1', you get problems~errors:<br/><br/>StringListItem (Object.List, GetRandomInt (0, ListItem (Object.List)))<br/>StringListItem (Object.List, GetRandomInt (0, 3))<br/>// outputs~returns: (either: red, blue, yellow, or... ???... no 4th item... ERROR~null...BIG PROBLEMS!)<br/><br/>-------<br/><br/>the importance of this, is that it finds the number of items in the list currently, without your intervention of 'coding' (typing) in the right number into the code line, which is not always possible for you to do, when you got code of changing list items taking place.<br/><br/>---------<br/><br/>alright, I've explained a bit more than what you asked for in the above, so let me now get to explaining what you wanted: 'for' and 'foreach', though I think the above helps with understanding this stuff too (if it doesn't confuse you even more, argh, lol):<br/><br/>so you got a string list:<br/><br/>game.primary_colors_string_list = split (&quot;red;blue;yellow&quot;, &quot;;&quot;)<br/><br/>if I want to do the same action(s) for ALL~EVERY~EACH item within the string list:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Foreach\">http://quest5.net/wiki/Foreach</a><!-- m --><br/><br/>item_x -&gt; 1st as: red<br/>item_x -&gt; 2nd as: blue<br/>item_x -&gt; 3rd as: yellow<br/>// etc<br/><br/>foreach (item_x, game.primary_colors_string_list)<br/>-&gt; msg (&quot;Color: &quot; + item_x)<br/>}<br/>// outputs~returns #1: Color: red<br/>// outputs~returns #2: Color: blue<br/>// outputs~returns #3: Color: yellow<br/><br/>let's use the example of an object list now:<br/><br/>game.fruit_string_list = split (&quot;apple;orange;lemon&quot;, &quot;;&quot;)<br/><br/>foreach (item_x, game.fruit_string_list)<br/>-&gt; MoveObject (item_x, player) // or (this does the exact same thing as 'MoveObject'): item_x.parent = player<br/>}<br/>// the &quot;player&quot; Player Object now holds these items: apple, orange, and lemon<br/><br/>or, we can do a Verb script too:<br/><br/>Verb: &quot;eat&quot;; the 'apple', 'orange', and 'lemon' Objects have all be given (add verb) the &quot;eat&quot; verb<br/><br/>foreach (item_x, game.fruit_string_list)<br/>-&gt; invoke (item_x.eat)<br/>}<br/>// you do the apple's eat verb<br/>// you do the orange's eat verb<br/>// you do the lemon's eat verb<br/><br/>or here's a good analogy example for you:<br/><br/>game.team_string_list = split (&quot;team_member_1;team_member_2;team_member_3&quot;, &quot;;&quot;)<br/><br/>foreach (team_member, game.team_string_list)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// ALL~EVERY~EACH team member runs laps<br/><br/>now, about 'for':<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/For\">http://quest5.net/wiki/For</a><!-- m --><br/><br/>(iterator variable, int from, int to) { script }<br/>or<br/>(iterator variable, int from, int to, int step) { script }<br/><br/>remember, list ordering starts at ZERO:<br/>0: team member 1<br/>1: team member 2<br/>2: team member 3<br/><br/>for (team_member, 0,2)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 2 runs laps<br/>// team member 3 runs laps<br/><br/>for (team_member, 0,1)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 2 runs laps<br/><br/>for (team_member, 1,2)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 2 runs laps<br/>// team member 3 runs laps<br/><br/>for (team_member, 0,0)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/><br/>for (team_member, 1,1)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 2 runs laps<br/><br/>for (team_member, 2,2)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 3 runs laps<br/><br/>for (team_member, 0,2,2)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 3 runs laps<br/><br/>for (team_member, 0,2,1)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 2 runs laps<br/>// team member 3 runs laps<br/><br/>(let's add more team members to show more examples):<br/><br/>5 team members:<br/>(remember, list ordering starts at ZERO)<br/>0: team member 1<br/>1: team member 2<br/>2: team member 3<br/>3: team member 4<br/>4: team member 5<br/><br/>for (team_member, 0,4,2)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 3 runs laps<br/>// team member 5 runs laps<br/><br/>for (team_member, 0,4,4)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 5 runs laps<br/><br/>for (team_member, 0,4,3)<br/>-&gt; invoke (team_member.run_laps)<br/>}<br/>// team member 1 runs laps<br/>// team member 4 runs laps<br/><br/>--------<br/><br/>and don't forget you can use randomness: GetRandomInt (min, max), and also the current number of items too: ListCount (Object.List) - 1<br/><br/>-------<br/><br/>basically, lists enable you to group many (strings or objects: string lists or object lists), so that you can then do actions upon either: all~every~each of that group of strings~objects (via 'foreach'), or on a specific range (ie specific) of those string~objects within that group (via 'for').<br/><br/>also, lists enable you to easily adjust-change them (adding or removing items, ie: string or object), as well.<br/><br/>for example, let's say you got a random dialogue script block, such as when talking to an NPC (a non-playable-character, ie a 'townsfolk' vs a 'monster'), but you don't want the same dialogue choice being randomly selected over and over again, each time a dialogue msg script is selected, it is removed from the list, and the next time you talk to the NPC, it randomly selects from that now smaller list of choices, and again and again, until all the dialogue msgs are selected and seen by the person playing the game.<br/><br/>or, like in many games, you want to have 'events' from 'exploring', or from opening a chest that can be reopened for new items.<br/><br/>or for example, with a 'travel' or 'goto' or 'warp' feature~spell~whatever.<br/><br/>I can provide game code, for you to play out and study, of an 'explore' and 'travel' features, which is a real example of lists, (dictionaries too ~ which are a bit more complicated then lists ~ once you understand lists, let me know, and I'll try to help you with understanding dictionaries), 'for', 'foreach' and etc stuff ('GetRandomInt', 'ListCount', 'StringListItem', 'Object'ListItem'), so just let me know if interested in it.",
      "PostDate": "2014-05-24T06:15:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28884",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "continued... (about 'switch')\n\n-----------\n\n1. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Tutorial\">http://quest5.net/wiki/Tutorial</a><!-- m -->\n2. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Multiple_choices_-_using_a_%22switch%22_script\">http://quest5.net/wiki/Multiple_choices ... %22_script</a><!-- m -->\n3. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/How_to\">http://quest5.net/wiki/How_to</a><!-- m -->\n4. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Switch\">http://quest5.net/wiki/Switch</a><!-- m -->\n5. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Hs-case\">http://quest5.net/wiki/Hs-case</a><!-- m --> ('switch')\n\nthe 'switch' function is just a different format~design of doing multiple ('nested'~indented) 'if' scripts:\n\n(depends on the situation, sometimes using 'if' scripts is better, sometimes using 'switch' scripts is better, sometimes using both 'if' and 'switch' is better, sometimes using dictionaries is better... hehe, and sometimes using... ??? ~ advanced code ability that I'm not at yet, is better, lol)\n\nif (player.alias = &quot;HK&quot;) {\n-&gt; // player.gender_string = &quot;male&quot;\n-&gt; if (player.gender_string = &quot;male&quot;) {\n-&gt;-&gt; player.strength_integer = player.strength_integer + 1\n-&gt; } else if (player.gender_string = &quot;female&quot;) {\n-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1\n-&gt; }\n} else if (player.alias = &quot;espera&quot;) {\n-&gt; // just for an example: player.gender_string = &quot;female&quot;\n-&gt; if (player.gender_string = &quot;male&quot;) {\n-&gt;-&gt; player.strength_integer = player.strength_integer + 1\n-&gt; } else if (player.gender_string = &quot;female&quot;) {\n-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1\n-&gt; }\n}\n\nis the exact same as (using 2 layers~levels~'nesting'~indenting of 'switch', but you can also do the first layer as 'switch' and the second layer as 'ifs' too, or vice-versa, or any combination of 'switch' and 'ifs' ~ if you have a larger script block, but I'm not going to show 'switch'+'ifs', as I'm too tired now, lol):\n\nswitch (player.alias) {\n-&gt; case (&quot;HK&quot;) {\n-&gt;-&gt; // player.gender-string = &quot;male&quot;\n-&gt;-&gt; switch (player.gender_string) {\n-&gt;-&gt;-&gt; case (&quot;male&quot;) {\n-&gt;-&gt;-&gt;-&gt; player.strength_integer = player.strength_integer + 1\n-&gt;-&gt;-&gt; }\n-&gt;-&gt;-&gt; case (&quot;female&quot;) {\n-&gt;-&gt;-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1\n-&gt;-&gt;-&gt; }\n-&gt;-&gt; } \n-&gt; }\n-&gt; case (&quot;espera&quot;) {\n-&gt;-&gt; // just for an example: player.gender_string = &quot;female&quot;\n-&gt;-&gt; switch (player.gender_string) {\n-&gt;-&gt;-&gt; case (&quot;male&quot;) {\n-&gt;-&gt;-&gt;-&gt; player.strength_integer = player.strength_integer + 1\n-&gt;-&gt;-&gt; }\n-&gt;-&gt;-&gt; case (&quot;female&quot;) {\n-&gt;-&gt;-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1\n-&gt;-&gt;-&gt; }\n-&gt;-&gt; } \n-&gt; }\n}\n\n-------------\n\nfor the 'for' and 'foreach', you can look at the libraries ( <!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewforum.php?f=18\">viewforum.php?f=18</a><!-- l --> ), such as chase's wearables (equipment) library:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=2901\">viewtopic.php?f=18&amp;t=2901</a><!-- l -->\n\nyou can see an implementation of the 'foreach'~'for' in action.\n\n-----------\n\nthis is a good thread too:\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=4279&amp;hilit=HK+travel+code\">viewtopic.php?f=10&amp;t=4279&amp;hilit=HK+travel+code</a><!-- l -->\n\nand here's my 'explore' and 'travel' code for you to play with and study (though it's quest v540, so if you're using quest v550, you'll not be able to use~play my game code, unless you can get it converted to v550):\n\n[code:1xmu1fax]&lt;asl version=&quot;540&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;Testing Game Stuff&quot;&gt;\n    &lt;gameid&gt;eef801a1-4e6b-4b0a-bdbf-8f3ecfa8389c&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;\n    &lt;turns type=&quot;int&quot;&gt;0&lt;/turns&gt;\n    &lt;statusattributes type=&quot;simplestringdictionary&quot;&gt;turns=&lt;/statusattributes&gt;\n   &lt;start type=&quot;script&quot;&gt;\n     msg (&quot;Important Note&#58;&quot;)\n     msg (&quot;Type in&#58; help&quot;)\n   &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;homeland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;grassland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;plains&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;desert&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;tundra&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;swampland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;mountains&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;forest&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;wasteland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;coastland&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;hills&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;command name=&quot;help_command&quot;&gt;\n    &lt;pattern&gt;help&lt;/pattern&gt;\n   &lt;script&gt;\n     help_function\n   &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;explore_command&quot;&gt;\n    &lt;pattern&gt;explore&lt;/pattern&gt;\n    &lt;script&gt;\n      explore_function\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=&quot;travel_command&quot;&gt;\n    &lt;pattern&gt;travel&lt;/pattern&gt;\n   &lt;script&gt;\n     travel_function\n   &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=&quot;data_object&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n   &lt;travel_string_list type=&quot;simplestringlist&quot;&gt;homeland&lt;/travel_string_list&gt;\n    &lt;homeland_events_string_list type=&quot;simplestringlist&quot;&gt;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&lt;/homeland_events_string_list&gt;\n    &lt;homeland_events_script_dictionary type=&quot;scriptdictionary&quot;&gt;\n     &lt;item key=&quot;grassland_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;grassland&quot;)\n      msg (&quot;You've discovered the grassland! Now, you can travel to the grassland and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;plains_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;plains&quot;)\n      msg (&quot;You've discovered the plains! Now, you can travel to the plains and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;desert_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;desert&quot;)\n      msg (&quot;You've discovered the desert! Now, you can travel to the desert and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;tundra_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;tundra&quot;)\n      msg (&quot;You've discovered the tundra! Now, you can travel to the tundra and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;swampland_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;swampland&quot;)\n      msg (&quot;You've discovered the swampland! Now, you can travel to the swampland and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;forest_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;forest&quot;)\n      msg (&quot;You've discovered the forest! Now, you can travel to the forest and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;mountains_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;mountains&quot;)\n      msg (&quot;You've discovered the mountains! Now, you can travel to the mountains and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;hills_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;hills&quot;)\n      msg (&quot;You've discovered the hills! Now, you can travel to the hills and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;wasteland_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;wasteland&quot;)\n      msg (&quot;You've discovered the wasteland! Now, you can travel to the wasteland and explore it!&quot;)\n     &lt;/item&gt;\n     &lt;item key=&quot;coastland_discovery&quot;&gt;\n       list add (data_object&#46;travel_string_list, &quot;coastland&quot;)\n      msg (&quot;You've discovered the coastland! Now, you can travel to the coastland and explore it!&quot;)\n     &lt;/item&gt;\n   &lt;/homeland_events_script_dictionary&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=&quot;global_turnscript&quot;&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      game&#46;turns = game&#46;turns + 1\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;function name=&quot;help_function&quot;&gt;\n    msg (&quot;Type 'explore' to explore your area&#46;&quot;)\n   msg (&quot;Type 'travel' to travel to different areas&#46;&quot;)\n  &lt;/function&gt;\n  &lt;function name=&quot;explore_function&quot;&gt;&lt;!&#91;CDATA&#91;\n    switch (game&#46;pov&#46;parent) {\n     case (homeland) {\n      result_1 = ListCount (data_object&#46;homeland_events_string_list) - 1\n      if (result_1 &gt;= 0) {\n          result_2 = StringListItem (data_object&#46;homeland_events_string_list,GetRandomInt(0,result_1))\n          invoke (ScriptDictionaryItem (data_object&#46;homeland_events_script_dictionary,result_2))\n        on ready {\n          foreach (item_x, split (&quot;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&quot;,&quot;;&quot;)) {\n            if (result_2 = item_x) {\n             list remove (data_object&#46;homeland_events_string_list, result_2)\n           }\n         }\n        }\n      } else {\n        msg (&quot;There seemingly is nothing left to explore in this area&#46;&quot;)\n      }\n     }\n    }\n  &#93;&#93;&gt;&lt;/function&gt;\n  &lt;function name=&quot;travel_function&quot;&gt;\n    show menu (&quot;Where do you wish to travel?&quot;,data_object&#46;travel_string_list,false) {\n     if (not game&#46;pov&#46;parent = GetObject (result)) {\n       game&#46;pov&#46;parent = GetObject (result)\n     } else {\n       msg (&quot;You are already at this area&#46;&quot;)\n      ask (&quot;Try again?&quot;) {\n        if (result=true) {\n          travel_function\n        } else {\n          msg (&quot;You realize that you need to discover a new area to travel to first, before you can travel to that place&#46;&quot;)\n        }\n      }\n     }\n   }\n  &lt;/function&gt;\n&lt;/asl&gt;[/code:1xmu1fax]",
      "EditableFormat": "bbcode",
      "HTML": "continued... (about 'switch')<br/><br/>-----------<br/><br/>1. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Tutorial\">http://quest5.net/wiki/Tutorial</a><!-- m --><br/>2. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Multiple_choices_-_using_a_%22switch%22_script\">http://quest5.net/wiki/Multiple_choices ... %22_script</a><!-- m --><br/>3. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/How_to\">http://quest5.net/wiki/How_to</a><!-- m --><br/>4. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Switch\">http://quest5.net/wiki/Switch</a><!-- m --><br/>5. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Hs-case\">http://quest5.net/wiki/Hs-case</a><!-- m --> ('switch')<br/><br/>the 'switch' function is just a different format~design of doing multiple ('nested'~indented) 'if' scripts:<br/><br/>(depends on the situation, sometimes using 'if' scripts is better, sometimes using 'switch' scripts is better, sometimes using both 'if' and 'switch' is better, sometimes using dictionaries is better... hehe, and sometimes using... ??? ~ advanced code ability that I'm not at yet, is better, lol)<br/><br/>if (player.alias = &quot;HK&quot;) {<br/>-&gt; // player.gender_string = &quot;male&quot;<br/>-&gt; if (player.gender_string = &quot;male&quot;) {<br/>-&gt;-&gt; player.strength_integer = player.strength_integer + 1<br/>-&gt; } else if (player.gender_string = &quot;female&quot;) {<br/>-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1<br/>-&gt; }<br/>} else if (player.alias = &quot;espera&quot;) {<br/>-&gt; // just for an example: player.gender_string = &quot;female&quot;<br/>-&gt; if (player.gender_string = &quot;male&quot;) {<br/>-&gt;-&gt; player.strength_integer = player.strength_integer + 1<br/>-&gt; } else if (player.gender_string = &quot;female&quot;) {<br/>-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1<br/>-&gt; }<br/>}<br/><br/>is the exact same as (using 2 layers~levels~'nesting'~indenting of 'switch', but you can also do the first layer as 'switch' and the second layer as 'ifs' too, or vice-versa, or any combination of 'switch' and 'ifs' ~ if you have a larger script block, but I'm not going to show 'switch'+'ifs', as I'm too tired now, lol):<br/><br/>switch (player.alias) {<br/>-&gt; case (&quot;HK&quot;) {<br/>-&gt;-&gt; // player.gender-string = &quot;male&quot;<br/>-&gt;-&gt; switch (player.gender_string) {<br/>-&gt;-&gt;-&gt; case (&quot;male&quot;) {<br/>-&gt;-&gt;-&gt;-&gt; player.strength_integer = player.strength_integer + 1<br/>-&gt;-&gt;-&gt; }<br/>-&gt;-&gt;-&gt; case (&quot;female&quot;) {<br/>-&gt;-&gt;-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1<br/>-&gt;-&gt;-&gt; }<br/>-&gt;-&gt; } <br/>-&gt; }<br/>-&gt; case (&quot;espera&quot;) {<br/>-&gt;-&gt; // just for an example: player.gender_string = &quot;female&quot;<br/>-&gt;-&gt; switch (player.gender_string) {<br/>-&gt;-&gt;-&gt; case (&quot;male&quot;) {<br/>-&gt;-&gt;-&gt;-&gt; player.strength_integer = player.strength_integer + 1<br/>-&gt;-&gt;-&gt; }<br/>-&gt;-&gt;-&gt; case (&quot;female&quot;) {<br/>-&gt;-&gt;-&gt;-&gt; player.intelligence_integer = player.intelligence_integer + 1<br/>-&gt;-&gt;-&gt; }<br/>-&gt;-&gt; } <br/>-&gt; }<br/>}<br/><br/>-------------<br/><br/>for the 'for' and 'foreach', you can look at the libraries ( <!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewforum.php?f=18\">viewforum.php?f=18</a><!-- l --> ), such as chase's wearables (equipment) library:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=18&amp;t=2901\">viewtopic.php?f=18&amp;t=2901</a><!-- l --><br/><br/>you can see an implementation of the 'foreach'~'for' in action.<br/><br/>-----------<br/><br/>this is a good thread too:<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=4279&amp;hilit=HK+travel+code\">viewtopic.php?f=10&amp;t=4279&amp;hilit=HK+travel+code</a><!-- l --><br/><br/>and here's my 'explore' and 'travel' code for you to play with and study (though it's quest v540, so if you're using quest v550, you'll not be able to use~play my game code, unless you can get it converted to v550):<br/><br/><pre><code>&lt;asl version=&quot;540&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;Testing Game Stuff&quot;&gt;<br/>    &lt;gameid&gt;eef801a1-4e6b-4b0a-bdbf-8f3ecfa8389c&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;<br/>    &lt;turns type=&quot;int&quot;&gt;0&lt;/turns&gt;<br/>    &lt;statusattributes type=&quot;simplestringdictionary&quot;&gt;turns=&lt;/statusattributes&gt;<br/>   &lt;start type=&quot;script&quot;&gt;<br/>     msg (&quot;Important Note&#58;&quot;)<br/>     msg (&quot;Type in&#58; help&quot;)<br/>   &lt;/start&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;homeland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;grassland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;plains&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;desert&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;tundra&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;swampland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;mountains&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;forest&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;wasteland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;coastland&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;hills&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;command name=&quot;help_command&quot;&gt;<br/>    &lt;pattern&gt;help&lt;/pattern&gt;<br/>   &lt;script&gt;<br/>     help_function<br/>   &lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;explore_command&quot;&gt;<br/>    &lt;pattern&gt;explore&lt;/pattern&gt;<br/>    &lt;script&gt;<br/>      explore_function<br/>    &lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;command name=&quot;travel_command&quot;&gt;<br/>    &lt;pattern&gt;travel&lt;/pattern&gt;<br/>   &lt;script&gt;<br/>     travel_function<br/>   &lt;/script&gt;<br/>  &lt;/command&gt;<br/>  &lt;object name=&quot;data_object&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>   &lt;travel_string_list type=&quot;simplestringlist&quot;&gt;homeland&lt;/travel_string_list&gt;<br/>    &lt;homeland_events_string_list type=&quot;simplestringlist&quot;&gt;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&lt;/homeland_events_string_list&gt;<br/>    &lt;homeland_events_script_dictionary type=&quot;scriptdictionary&quot;&gt;<br/>     &lt;item key=&quot;grassland_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;grassland&quot;)<br/>      msg (&quot;You've discovered the grassland! Now, you can travel to the grassland and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;plains_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;plains&quot;)<br/>      msg (&quot;You've discovered the plains! Now, you can travel to the plains and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;desert_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;desert&quot;)<br/>      msg (&quot;You've discovered the desert! Now, you can travel to the desert and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;tundra_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;tundra&quot;)<br/>      msg (&quot;You've discovered the tundra! Now, you can travel to the tundra and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;swampland_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;swampland&quot;)<br/>      msg (&quot;You've discovered the swampland! Now, you can travel to the swampland and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;forest_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;forest&quot;)<br/>      msg (&quot;You've discovered the forest! Now, you can travel to the forest and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;mountains_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;mountains&quot;)<br/>      msg (&quot;You've discovered the mountains! Now, you can travel to the mountains and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;hills_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;hills&quot;)<br/>      msg (&quot;You've discovered the hills! Now, you can travel to the hills and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;wasteland_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;wasteland&quot;)<br/>      msg (&quot;You've discovered the wasteland! Now, you can travel to the wasteland and explore it!&quot;)<br/>     &lt;/item&gt;<br/>     &lt;item key=&quot;coastland_discovery&quot;&gt;<br/>       list add (data_object&#46;travel_string_list, &quot;coastland&quot;)<br/>      msg (&quot;You've discovered the coastland! Now, you can travel to the coastland and explore it!&quot;)<br/>     &lt;/item&gt;<br/>   &lt;/homeland_events_script_dictionary&gt;<br/>  &lt;/object&gt;<br/>  &lt;turnscript name=&quot;global_turnscript&quot;&gt;<br/>    &lt;enabled /&gt;<br/>    &lt;script&gt;<br/>      game&#46;turns = game&#46;turns + 1<br/>    &lt;/script&gt;<br/>  &lt;/turnscript&gt;<br/>  &lt;function name=&quot;help_function&quot;&gt;<br/>    msg (&quot;Type 'explore' to explore your area&#46;&quot;)<br/>   msg (&quot;Type 'travel' to travel to different areas&#46;&quot;)<br/>  &lt;/function&gt;<br/>  &lt;function name=&quot;explore_function&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    switch (game&#46;pov&#46;parent) {<br/>     case (homeland) {<br/>      result_1 = ListCount (data_object&#46;homeland_events_string_list) - 1<br/>      if (result_1 &gt;= 0) {<br/>          result_2 = StringListItem (data_object&#46;homeland_events_string_list,GetRandomInt(0,result_1))<br/>          invoke (ScriptDictionaryItem (data_object&#46;homeland_events_script_dictionary,result_2))<br/>        on ready {<br/>          foreach (item_x, split (&quot;grassland_discovery;plains_discovery;desert_discovery;tundra_discovery;swampland_discovery;forest_discovery;mountains_discovery;hills_discovery;wasteland_discovery;coastland_discovery&quot;,&quot;;&quot;)) {<br/>            if (result_2 = item_x) {<br/>             list remove (data_object&#46;homeland_events_string_list, result_2)<br/>           }<br/>         }<br/>        }<br/>      } else {<br/>        msg (&quot;There seemingly is nothing left to explore in this area&#46;&quot;)<br/>      }<br/>     }<br/>    }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/>  &lt;function name=&quot;travel_function&quot;&gt;<br/>    show menu (&quot;Where do you wish to travel?&quot;,data_object&#46;travel_string_list,false) {<br/>     if (not game&#46;pov&#46;parent = GetObject (result)) {<br/>       game&#46;pov&#46;parent = GetObject (result)<br/>     } else {<br/>       msg (&quot;You are already at this area&#46;&quot;)<br/>      ask (&quot;Try again?&quot;) {<br/>        if (result=true) {<br/>          travel_function<br/>        } else {<br/>          msg (&quot;You realize that you need to discover a new area to travel to first, before you can travel to that place&#46;&quot;)<br/>        }<br/>      }<br/>     }<br/>   }<br/>  &lt;/function&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2014-05-24T06:58:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28893",
      "UserId": 0,
      "Username": "Espera",
      "UserAvatar": null,
      "UserGravatar": "04bdffe31cdc4e1c0d61f05a2f5a7532",
      "EditableText": "I already know a lot about lists, so some of that was wasted effort, but luckily not entirely. It did show me a couple shortcuts I hadn't thought of using. Also, you might have unintentionally solved a conundrum for me which was how to deal with a deck of cards. \n\nI tink I'm starting to get what you're talking about when it comes to the three scripts I asked about. If I'm lucky, maybe Switch can help me a bit with my combat system.",
      "EditableFormat": "bbcode",
      "HTML": "I already know a lot about lists, so some of that was wasted effort, but luckily not entirely. It did show me a couple shortcuts I hadn't thought of using. Also, you might have unintentionally solved a conundrum for me which was how to deal with a deck of cards. <br/><br/>I tink I'm starting to get what you're talking about when it comes to the three scripts I asked about. If I'm lucky, maybe Switch can help me a bit with my combat system.",
      "PostDate": "2014-05-25T01:46:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28894",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "what are you trying to do with your combat system? if you don't mind talking about what you want to do, I'd be glad to help you with it, as I too am interested in combat systems. what aspect of the combat system do you want to use 'switch' with?\n\nshow menu (&quot;What are you going to do?&quot;, split (&quot;attack;defend;cast;item;run&quot;, &quot;;&quot;), false) {\n-&gt; switch (result) {\n-&gt;-&gt; case (&quot;attack&quot;) {\n-&gt;-&gt;-&gt; // blah scripts~code lines\n-&gt;-&gt; }\netc etc etc\n\nor did you want to use 'switch' with equipment or spells~magic, within combat? or something else?\n\nand sorry about the stuff about lists, didn't know what you already knew about, hehe.",
      "EditableFormat": "bbcode",
      "HTML": "what are you trying to do with your combat system? if you don't mind talking about what you want to do, I'd be glad to help you with it, as I too am interested in combat systems. what aspect of the combat system do you want to use 'switch' with?<br/><br/>show menu (&quot;What are you going to do?&quot;, split (&quot;attack;defend;cast;item;run&quot;, &quot;;&quot;), false) {<br/>-&gt; switch (result) {<br/>-&gt;-&gt; case (&quot;attack&quot;) {<br/>-&gt;-&gt;-&gt; // blah scripts~code lines<br/>-&gt;-&gt; }<br/>etc etc etc<br/><br/>or did you want to use 'switch' with equipment or spells~magic, within combat? or something else?<br/><br/>and sorry about the stuff about lists, didn't know what you already knew about, hehe.",
      "PostDate": "2014-05-25T03:35:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28895",
      "UserId": 0,
      "Username": "Espera",
      "UserAvatar": null,
      "UserGravatar": "04bdffe31cdc4e1c0d61f05a2f5a7532",
      "EditableText": "My combat system for my first game that employs one is a bit simple, and maybe strange, but it works. Sadly, it's a bit of a slugfest, consdiering I haven't implimented a 'chance to hit' system yet, or likely will in this game, though I know how I'd do it now. \n\nI don't have a defined 'combat mode'. The player can just choose to 'fight'  some objects (monsters, other sorts of antagonists), and this calls up their movelist, which expands over the game with differetn moves. Equipping a new weapon might grant a new move, or reading a spellbook might, etc. \n\nBecause combat in the game revolves around verbs associated with each antagonist, the effects of the moves can be customized in their effects for each adversary quite easily. Also, it eliminates the need for options like 'item' or 'run', as you can use all other commands normally, like accessing your inventory, or using the exit you came in through. \n\nEnemies attack using turn scripts actived either when the player enters the room or aggresses the adversary. This means the player can look at or even talk to some enemies before fighting them. \n\nIt's a bit  cumbersome and simplistic, but it works for now.",
      "EditableFormat": "bbcode",
      "HTML": "My combat system for my first game that employs one is a bit simple, and maybe strange, but it works. Sadly, it's a bit of a slugfest, consdiering I haven't implimented a 'chance to hit' system yet, or likely will in this game, though I know how I'd do it now. <br/><br/>I don't have a defined 'combat mode'. The player can just choose to 'fight'  some objects (monsters, other sorts of antagonists), and this calls up their movelist, which expands over the game with differetn moves. Equipping a new weapon might grant a new move, or reading a spellbook might, etc. <br/><br/>Because combat in the game revolves around verbs associated with each antagonist, the effects of the moves can be customized in their effects for each adversary quite easily. Also, it eliminates the need for options like 'item' or 'run', as you can use all other commands normally, like accessing your inventory, or using the exit you came in through. <br/><br/>Enemies attack using turn scripts actived either when the player enters the room or aggresses the adversary. This means the player can look at or even talk to some enemies before fighting them. <br/><br/>It's a bit  cumbersome and simplistic, but it works for now.",
      "PostDate": "2014-05-25T06:50:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28901",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "that's awesome. how did you want to employ 'switch', 'for', and 'foreach' into combat? Did you have anything in mind, or just wanted to understand better how they work and~or what they can be used to do? (really, 'switch' is just an alternative to using 'ifs', and while it's design-look-format is more organized~neat~clean for our eyes, 'switch' is not as powerful~useful as 'ifs', you're more limited with 'switch' than 'ifs', but it's easier on the eyes)\n\nas far as I know in coding, lists and their 'for' and 'foreach' is for making a group of items (strings or objects), which you can add or remove from the group, and reference~call~use either all of the items or a select range of specific items for acting upon with an action. You can use two lists for 'string matching' involved actions, a very powerful coding technique to do lots of cool stuff. Also, you can use them with randomization, a 'treasure class' (hopefully you're familiar with this term, lol) system for item drops, events, dialogue, and etc. There's many more uses too, but I'm only a beginner with coding, hehe.\n\nnow, if you're interested in moving onto dictionaries, you can do a lot of more cool things with them, and along with lists too, you can do really cool things.\n\nsee my link in my previous post, which takes you to the 'enemies movement thread', as I try to explain dictionaries in my posts in there.\n\n-----------------\n\none more thing about lists' usage, that I just thought of:\n\nLists also are a much better alternative than using cumbersome booleans, and it allows for more easily using~doing multiple booleans~'effects' at the same time, for example:\n\ninstead of having tons of boolean attributes, such as for example of 'status effects':\n\nplayer.poisoned = false\nplayer.asleep = false\nplayer.confused = false\nplayer.stunned = false\nplayer.paralyzed = false\nplayer.petrified = false\nplayer.silenced = false\nplayer.blinded = false\nplayer.cursed = false\nplayer.blessed = false\netc etc etc\n\n(or for example 'locomotion~movement~etc actions':\n\nplayer.bipedal (two-legged) = false\nplayer.quadripedal (four-legged) = false\n\nplayer.walking = false\nplayer.running = false\nplayer.jumping = false\nplayer.falling = false\nplayer.floating = false\nplayer.swimming = false\nplayer.flying = false\nplayer.climbing = false\nplayer.crawling = false\nplayer.standing = false\nplayer.sitting = false\nplayer.laying_down = false\n\nplayer.stealing = false\nplayer.sneaking = false\nplayer.lockpicking = false\n\nplayer.defending = false\nplayer.escaping = false\nplayer.casting = false\n\nplayer.sleeping = false\nplayer.resting = false\nplayer.playing = false\nplayer.working = false\nplayer.studying = false\nplayer.reading = false\nplayer.watching = false\n\netc etc etc)\n\nI can instead use a list:\n\nplayer.status_effects_string_list = NewStringList ()\n\nlist add (player.status_effects_string_list, &quot;poisoned&quot;)\nlist add (player.status_effects_string_list, &quot;silenced&quot;)\nlist remove (player.status_effects_string_list, &quot;poisoned&quot;)\nlist add (player.status_effects_string_list, &quot;stunned&quot;)\nlist add (player.status_effects_string_list, &quot;cursed&quot;)\n\nso, I can then simply check this list for what are my status_effects, much better than constantly turning on~off tons of booleans.\n\n(I don't know the correct syntax off-hand)\nif (ListContains (player.status_effects_string_list, &quot;cursed&quot;) = true) {\n-&gt; // some script(s)\n}\nif (ListContains (player.status_effects_string_list, &quot;poisoned&quot;) = true) {\n-&gt; // some script(s)\n}\n\n~OR~\n\n(two lists~dictionaries, using 'string matching', for this example, a string list and a script dictionary)\n\nconception:\nscript dictionary: string = script\nscript dictionary: string -&gt; script\nscript dictionary: if (string), then do~return~output: script\n\nscript dictionary: if (&quot;attack&quot;) { orc.current_hit_point_integer = orc.current_hit_point_integer - player.damage_integer }\nscript dictionary: if (&quot;defend&quot;) { player.current_defense_integer = player.current_defense_integer * 2 }\n\nforeach (item_x, player.status_effects_string_list) {\n-&gt; foreach (item_xx, game.all_status_effects_script_dictionary) {\n-&gt;-&gt; if (item_x = item_xx) {\n-&gt;-&gt;-&gt; invoke (ScriptDictionaryItem (game.all_status_effects_script_dictionary, item_x))\n-&gt;-&gt; }\n-&gt; }\n}\n\nyou can use lists and string dictionaries, for doing casting, such as the 'affinities', for example: 'weakness', 'normal', and 'immunity' (but there's also: 'strong', 'reflection', and 'absorption' too):\n\nconception:\n\nstring dictionary: string1 = string2\nstring dictionary: string1 -&gt; string2\n\nif (string1), then return~output~('conversion'): string2\n\nstring dictionary: water=fire; fire=water; earth=air; air=earth\n\nif (water), then return~output~(convert to): fire\nif (fire), then return~output~(convert to): water\nif (earth), then return~output~(convert to): air\nif (air), then return~output~(convert to): earth\n\nif ice~water monster, then your fire spell does double damage\n\nfrost_giant.elemental_string = &quot;water&quot;\nyour_fireball_spell.elemental_string = &quot;fire&quot;\n\nif (your_fireball_spell.elemental_string = StringDictionaryItem (frost_giant.elemental_string) {\n-&gt; orc.current_hit_point_integer = orc.current_hit_point_integer - (your_fireball_spell.damage_integer * 2)\n-&gt; msg (&quot;You do double damage as the frost giant is weak to your fire elemental spell&quot;)\n} else if (your_fireball_spell.elemental_string = frost_giant.elemental_string) {\n-&gt; msg (&quot;You do no damage to the frost giant, as it is immune to ice~water elemental spells&quot;)\n} else {\n-&gt; orc.current_hit_point_integer = orc.current_hit_point_integer - your_fireball_spell.damage_integer\n-&gt; msg (&quot;You do normal damage with your spell, as it is neither fire nor water~ice elemental&quot;)\n}\n\nhow it works:\n\nif (your_fireball_spell.elemental_string = StringDictionaryItem (frost_giant.elemental_string) {\nif (fire = StringDictionaryItem (water) {\nif (fire = conversion_functionality_of_StringDictionaryItem (water-&gt;fire) {\nif (fire = fire) {, you do double damage\n\nas we can't go: if (fire=water) {, do double damage, lol: 'f-i-r-e' is NOT equal to 'w-a-t-e-r', so no double damage\nnor can we do: if (fire = not fire) {, do double damage, lol: we don't want earth and air doing double damage to our frost giant.\n\nCredit entirely goes to Pixie (via his~her Spell Library), for this ingenius code design method (it took me a long time to grasp it, argh, but I understand it now, hehe) <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "that's awesome. how did you want to employ 'switch', 'for', and 'foreach' into combat? Did you have anything in mind, or just wanted to understand better how they work and~or what they can be used to do? (really, 'switch' is just an alternative to using 'ifs', and while it's design-look-format is more organized~neat~clean for our eyes, 'switch' is not as powerful~useful as 'ifs', you're more limited with 'switch' than 'ifs', but it's easier on the eyes)<br/><br/>as far as I know in coding, lists and their 'for' and 'foreach' is for making a group of items (strings or objects), which you can add or remove from the group, and reference~call~use either all of the items or a select range of specific items for acting upon with an action. You can use two lists for 'string matching' involved actions, a very powerful coding technique to do lots of cool stuff. Also, you can use them with randomization, a 'treasure class' (hopefully you're familiar with this term, lol) system for item drops, events, dialogue, and etc. There's many more uses too, but I'm only a beginner with coding, hehe.<br/><br/>now, if you're interested in moving onto dictionaries, you can do a lot of more cool things with them, and along with lists too, you can do really cool things.<br/><br/>see my link in my previous post, which takes you to the 'enemies movement thread', as I try to explain dictionaries in my posts in there.<br/><br/>-----------------<br/><br/>one more thing about lists' usage, that I just thought of:<br/><br/>Lists also are a much better alternative than using cumbersome booleans, and it allows for more easily using~doing multiple booleans~'effects' at the same time, for example:<br/><br/>instead of having tons of boolean attributes, such as for example of 'status effects':<br/><br/>player.poisoned = false<br/>player.asleep = false<br/>player.confused = false<br/>player.stunned = false<br/>player.paralyzed = false<br/>player.petrified = false<br/>player.silenced = false<br/>player.blinded = false<br/>player.cursed = false<br/>player.blessed = false<br/>etc etc etc<br/><br/>(or for example 'locomotion~movement~etc actions':<br/><br/>player.bipedal (two-legged) = false<br/>player.quadripedal (four-legged) = false<br/><br/>player.walking = false<br/>player.running = false<br/>player.jumping = false<br/>player.falling = false<br/>player.floating = false<br/>player.swimming = false<br/>player.flying = false<br/>player.climbing = false<br/>player.crawling = false<br/>player.standing = false<br/>player.sitting = false<br/>player.laying_down = false<br/><br/>player.stealing = false<br/>player.sneaking = false<br/>player.lockpicking = false<br/><br/>player.defending = false<br/>player.escaping = false<br/>player.casting = false<br/><br/>player.sleeping = false<br/>player.resting = false<br/>player.playing = false<br/>player.working = false<br/>player.studying = false<br/>player.reading = false<br/>player.watching = false<br/><br/>etc etc etc)<br/><br/>I can instead use a list:<br/><br/>player.status_effects_string_list = NewStringList ()<br/><br/>list add (player.status_effects_string_list, &quot;poisoned&quot;)<br/>list add (player.status_effects_string_list, &quot;silenced&quot;)<br/>list remove (player.status_effects_string_list, &quot;poisoned&quot;)<br/>list add (player.status_effects_string_list, &quot;stunned&quot;)<br/>list add (player.status_effects_string_list, &quot;cursed&quot;)<br/><br/>so, I can then simply check this list for what are my status_effects, much better than constantly turning on~off tons of booleans.<br/><br/>(I don't know the correct syntax off-hand)<br/>if (ListContains (player.status_effects_string_list, &quot;cursed&quot;) = true) {<br/>-&gt; // some script(s)<br/>}<br/>if (ListContains (player.status_effects_string_list, &quot;poisoned&quot;) = true) {<br/>-&gt; // some script(s)<br/>}<br/><br/>~OR~<br/><br/>(two lists~dictionaries, using 'string matching', for this example, a string list and a script dictionary)<br/><br/>conception:<br/>script dictionary: string = script<br/>script dictionary: string -&gt; script<br/>script dictionary: if (string), then do~return~output: script<br/><br/>script dictionary: if (&quot;attack&quot;) { orc.current_hit_point_integer = orc.current_hit_point_integer - player.damage_integer }<br/>script dictionary: if (&quot;defend&quot;) { player.current_defense_integer = player.current_defense_integer * 2 }<br/><br/>foreach (item_x, player.status_effects_string_list) {<br/>-&gt; foreach (item_xx, game.all_status_effects_script_dictionary) {<br/>-&gt;-&gt; if (item_x = item_xx) {<br/>-&gt;-&gt;-&gt; invoke (ScriptDictionaryItem (game.all_status_effects_script_dictionary, item_x))<br/>-&gt;-&gt; }<br/>-&gt; }<br/>}<br/><br/>you can use lists and string dictionaries, for doing casting, such as the 'affinities', for example: 'weakness', 'normal', and 'immunity' (but there's also: 'strong', 'reflection', and 'absorption' too):<br/><br/>conception:<br/><br/>string dictionary: string1 = string2<br/>string dictionary: string1 -&gt; string2<br/><br/>if (string1), then return~output~('conversion'): string2<br/><br/>string dictionary: water=fire; fire=water; earth=air; air=earth<br/><br/>if (water), then return~output~(convert to): fire<br/>if (fire), then return~output~(convert to): water<br/>if (earth), then return~output~(convert to): air<br/>if (air), then return~output~(convert to): earth<br/><br/>if ice~water monster, then your fire spell does double damage<br/><br/>frost_giant.elemental_string = &quot;water&quot;<br/>your_fireball_spell.elemental_string = &quot;fire&quot;<br/><br/>if (your_fireball_spell.elemental_string = StringDictionaryItem (frost_giant.elemental_string) {<br/>-&gt; orc.current_hit_point_integer = orc.current_hit_point_integer - (your_fireball_spell.damage_integer * 2)<br/>-&gt; msg (&quot;You do double damage as the frost giant is weak to your fire elemental spell&quot;)<br/>} else if (your_fireball_spell.elemental_string = frost_giant.elemental_string) {<br/>-&gt; msg (&quot;You do no damage to the frost giant, as it is immune to ice~water elemental spells&quot;)<br/>} else {<br/>-&gt; orc.current_hit_point_integer = orc.current_hit_point_integer - your_fireball_spell.damage_integer<br/>-&gt; msg (&quot;You do normal damage with your spell, as it is neither fire nor water~ice elemental&quot;)<br/>}<br/><br/>how it works:<br/><br/>if (your_fireball_spell.elemental_string = StringDictionaryItem (frost_giant.elemental_string) {<br/>if (fire = StringDictionaryItem (water) {<br/>if (fire = conversion_functionality_of_StringDictionaryItem (water-&gt;fire) {<br/>if (fire = fire) {, you do double damage<br/><br/>as we can't go: if (fire=water) {, do double damage, lol: 'f-i-r-e' is NOT equal to 'w-a-t-e-r', so no double damage<br/>nor can we do: if (fire = not fire) {, do double damage, lol: we don't want earth and air doing double damage to our frost giant.<br/><br/>Credit entirely goes to Pixie (via his~her Spell Library), for this ingenius code design method (it took me a long time to grasp it, argh, but I understand it now, hehe) <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2014-05-25T16:55:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28925",
      "UserId": 0,
      "Username": "Espera",
      "UserAvatar": null,
      "UserGravatar": "04bdffe31cdc4e1c0d61f05a2f5a7532",
      "EditableText": "I don't have any specific plans for those scripts yet. I'm just trying to increase my knowledge of my options, and so far, it isn't working particularly well. What I mostly got out of what you told me is maybe I could use 'For each...' for something like a 'Tall all items' option, but that isn't a priority for me now. It seems like maybe 'For... ' could do fine for when the player is fighting groups, and so they each get an action?  I could only hope that would be something more efficient than just giving each of them a turn script. \n\nDictionaries seem like they are pretty important to grasp, but at the moment, I still don't quite get them. I can sort of grasp using the conversion tool, but it seems so limited. I'm obviously missing some things.",
      "EditableFormat": "bbcode",
      "HTML": "I don't have any specific plans for those scripts yet. I'm just trying to increase my knowledge of my options, and so far, it isn't working particularly well. What I mostly got out of what you told me is maybe I could use 'For each...' for something like a 'Tall all items' option, but that isn't a priority for me now. It seems like maybe 'For... ' could do fine for when the player is fighting groups, and so they each get an action?  I could only hope that would be something more efficient than just giving each of them a turn script. <br/><br/>Dictionaries seem like they are pretty important to grasp, but at the moment, I still don't quite get them. I can sort of grasp using the conversion tool, but it seems so limited. I'm obviously missing some things.",
      "PostDate": "2014-05-28T07:09:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28926",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "as it's hard (at least for me anyways) to explain what different coding designs can all various things that they can do for you...\n\nmaybe it would work better, if you don't mind, telling your ideas for your game, since you don't know of the code design methods, tell us what you want to do, and then we can give different options for~of code design methods (well, I'll try to, as I'm too trying to build up my knowledge of code design methods too, hehe) for you to do what you want.\n\n--------------\n\ndictionaries are extremely useful, due to the 'conversion', and thus doing 'string matching', though this is a difficult thing to grasp (look at, study, Pixie's Spell Library, and see if you can understand how the opposite elements work).\n\njust a quick note about dictionaries: they do *NOT* have ordering~indexing, you can only reference their key's by string label, unlike lists where you can use the numbers of their ordering~indexing. Aside, from their 'conversion-effect', Dictionaries are just like the 'switch' function (which is just an alternative of using multiple 'if' scripts):\n\nswitch (Object.gender_string_list) {\n-&gt; case (&quot;male&quot;) {\n-&gt;-&gt; // script1\n-&gt; }\n-&gt; case (&quot;female&quot;) {\n-&gt;-&gt; // script2\n-&gt; }\n\nScriptDictionaryItem (Object.gender_string_list, &quot;male&quot;) -&gt; returns~outputs: // script1\n\n&lt;attr name=&quot;gender_string_script_dictionary&quot; type=&quot;scriptdictionary&quot;&gt;\n-&gt; &lt;item key=&quot;male&quot;&gt;\n-&gt;-&gt; // script1\n-&gt; &lt;/key&gt;\n-&gt; &lt;item key=&quot;female&quot;&gt;\n-&gt;-&gt; // script2\n-&gt; &lt;/key&gt;\n&lt;/attr&gt;\n\n-------------\n\nshow menu (&quot;What is gender?&quot;, split (&quot;male;female&quot;,&quot;;&quot;), false) {\n-&gt; switch (result) {\n-&gt;-&gt; case (&quot;male&quot;) {\n-&gt;-&gt;-&gt; // script1\n-&gt;-&gt; }\n-&gt;-&gt; case (&quot;female&quot;) {\n-&gt;-&gt;-&gt; // script2\n-&gt;-&gt; }\n-&gt; }\n}\n\nmsg (&quot;What is your gender?&quot;)\nget input {\n-&gt; switch (result) {\n-&gt;-&gt; case (&quot;male&quot;) {\n-&gt;-&gt;-&gt; // script1\n-&gt;-&gt; }\n-&gt;-&gt; case (&quot;female&quot;) {\n-&gt;-&gt;-&gt; // script2\n-&gt;-&gt; }\n-&gt; }\n}\n\nshow menu (&quot;What is gender?&quot;, Object.gender_string_list, false) {\n-&gt; ScriptDictionaryItem (Object.gender_string_list, result)\n}\n\nget input {\n-&gt; ScriptDictionaryItem (Object.gender_string_list, result)\n}\n\n------------\n\nand you can combine string dictionaries and script dictionaries, some examples:\n\nFunction: gender_function\nmsg (&quot;What is your gender?&quot;)\nmsg (&quot;(1) male or (2) female)&quot;)\nget input {\n-&gt; if (ToInt (result) = 1 or ToInt (result) = 2) {\n-&gt;-&gt; invoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, result)))\n-&gt; } else {\n-&gt;-&gt; gender_function\n-&gt; }\n}\n\nObject: 'whatever'\n&lt;attr name=&quot;gender_string_dictionary&quot; type=&quot;simplestringdictionary&quot;&gt;1=male;2=female&lt;/attr&gt;\n&lt;attr name=&quot;gender_script_dictionary&quot; type=&quot;scriptdictionary&quot;&gt;\n-&gt; &lt;item key=&quot;male&quot;&gt;\n-&gt;-&gt; // script1\n-&gt; &lt;/item&gt;\n-&gt; &lt;item key=&quot;female&quot;&gt;\n-&gt;-&gt; // script2\n-&gt; &lt;/item&gt;\n&lt;/attr&gt;\n\nwhat it's doing:\n\n// you type in: 2\ninvoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, result)))\n\ninvoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, &quot;2&quot;)))\ninvoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem_conversion_effect (&quot;2&quot;-&gt;&quot;female&quot;)))\ninvoke (ScriptDictionaryItem (Object.gender_script_dictionary, female))\ninvoke (ScriptDictionaryItem_conversion_effect (&quot;female&quot;-&gt;script2))\ninvoke (script2)\n\n---------------------------\n\nlists ('foreach', 'for', 'ListCount', 'ListContains', etc):\n\nare really just for creating a group of specific items, to thus then be able to act upon those (and ONLY those) items in that group you created.\n\nhowever, the application of this functionality of lists ('foreach', 'for', etc) is extremely vast and diversified, for example, due to allowing you to do 'string comparisons' (extremely powerful~useful tool~tactic of coding), and etc cool stuff that I'm still not yet aware of myself, don't understand how to code-do-it yet, hehe.\n\nwhat uses these created groups specific items:\n\nequipment, spells~magic, monster classes, treasure~drop classes, combining items, randomization of all of these things, Scopes (all in game or all just for a room: exits, objects, visible objects, reachable objects, etc etc etc), dialogue options, party~team members, attributes (such as a 'level up' UI:user interface), rooms (for example, you want to add items to specific rooms after an event halfway through your game), map~grid making, etc etc etc\n\nfor*EACH* is for doing ALL~EVERY~*EACH* item in the group (list)\nfor ('this~these items only') is for specific items in the group (list)",
      "EditableFormat": "bbcode",
      "HTML": "as it's hard (at least for me anyways) to explain what different coding designs can all various things that they can do for you...<br/><br/>maybe it would work better, if you don't mind, telling your ideas for your game, since you don't know of the code design methods, tell us what you want to do, and then we can give different options for~of code design methods (well, I'll try to, as I'm too trying to build up my knowledge of code design methods too, hehe) for you to do what you want.<br/><br/>--------------<br/><br/>dictionaries are extremely useful, due to the 'conversion', and thus doing 'string matching', though this is a difficult thing to grasp (look at, study, Pixie's Spell Library, and see if you can understand how the opposite elements work).<br/><br/>just a quick note about dictionaries: they do *NOT* have ordering~indexing, you can only reference their key's by string label, unlike lists where you can use the numbers of their ordering~indexing. Aside, from their 'conversion-effect', Dictionaries are just like the 'switch' function (which is just an alternative of using multiple 'if' scripts):<br/><br/>switch (Object.gender_string_list) {<br/>-&gt; case (&quot;male&quot;) {<br/>-&gt;-&gt; // script1<br/>-&gt; }<br/>-&gt; case (&quot;female&quot;) {<br/>-&gt;-&gt; // script2<br/>-&gt; }<br/><br/>ScriptDictionaryItem (Object.gender_string_list, &quot;male&quot;) -&gt; returns~outputs: // script1<br/><br/>&lt;attr name=&quot;gender_string_script_dictionary&quot; type=&quot;scriptdictionary&quot;&gt;<br/>-&gt; &lt;item key=&quot;male&quot;&gt;<br/>-&gt;-&gt; // script1<br/>-&gt; &lt;/key&gt;<br/>-&gt; &lt;item key=&quot;female&quot;&gt;<br/>-&gt;-&gt; // script2<br/>-&gt; &lt;/key&gt;<br/>&lt;/attr&gt;<br/><br/>-------------<br/><br/>show menu (&quot;What is gender?&quot;, split (&quot;male;female&quot;,&quot;;&quot;), false) {<br/>-&gt; switch (result) {<br/>-&gt;-&gt; case (&quot;male&quot;) {<br/>-&gt;-&gt;-&gt; // script1<br/>-&gt;-&gt; }<br/>-&gt;-&gt; case (&quot;female&quot;) {<br/>-&gt;-&gt;-&gt; // script2<br/>-&gt;-&gt; }<br/>-&gt; }<br/>}<br/><br/>msg (&quot;What is your gender?&quot;)<br/>get input {<br/>-&gt; switch (result) {<br/>-&gt;-&gt; case (&quot;male&quot;) {<br/>-&gt;-&gt;-&gt; // script1<br/>-&gt;-&gt; }<br/>-&gt;-&gt; case (&quot;female&quot;) {<br/>-&gt;-&gt;-&gt; // script2<br/>-&gt;-&gt; }<br/>-&gt; }<br/>}<br/><br/>show menu (&quot;What is gender?&quot;, Object.gender_string_list, false) {<br/>-&gt; ScriptDictionaryItem (Object.gender_string_list, result)<br/>}<br/><br/>get input {<br/>-&gt; ScriptDictionaryItem (Object.gender_string_list, result)<br/>}<br/><br/>------------<br/><br/>and you can combine string dictionaries and script dictionaries, some examples:<br/><br/>Function: gender_function<br/>msg (&quot;What is your gender?&quot;)<br/>msg (&quot;(1) male or (2) female)&quot;)<br/>get input {<br/>-&gt; if (ToInt (result) = 1 or ToInt (result) = 2) {<br/>-&gt;-&gt; invoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, result)))<br/>-&gt; } else {<br/>-&gt;-&gt; gender_function<br/>-&gt; }<br/>}<br/><br/>Object: 'whatever'<br/>&lt;attr name=&quot;gender_string_dictionary&quot; type=&quot;simplestringdictionary&quot;&gt;1=male;2=female&lt;/attr&gt;<br/>&lt;attr name=&quot;gender_script_dictionary&quot; type=&quot;scriptdictionary&quot;&gt;<br/>-&gt; &lt;item key=&quot;male&quot;&gt;<br/>-&gt;-&gt; // script1<br/>-&gt; &lt;/item&gt;<br/>-&gt; &lt;item key=&quot;female&quot;&gt;<br/>-&gt;-&gt; // script2<br/>-&gt; &lt;/item&gt;<br/>&lt;/attr&gt;<br/><br/>what it's doing:<br/><br/>// you type in: 2<br/>invoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, result)))<br/><br/>invoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem (Object.gender_string_dictionary, &quot;2&quot;)))<br/>invoke (ScriptDictionaryItem (Object.gender_script_dictionary, StringDictionaryItem_conversion_effect (&quot;2&quot;-&gt;&quot;female&quot;)))<br/>invoke (ScriptDictionaryItem (Object.gender_script_dictionary, female))<br/>invoke (ScriptDictionaryItem_conversion_effect (&quot;female&quot;-&gt;script2))<br/>invoke (script2)<br/><br/>---------------------------<br/><br/>lists ('foreach', 'for', 'ListCount', 'ListContains', etc):<br/><br/>are really just for creating a group of specific items, to thus then be able to act upon those (and ONLY those) items in that group you created.<br/><br/>however, the application of this functionality of lists ('foreach', 'for', etc) is extremely vast and diversified, for example, due to allowing you to do 'string comparisons' (extremely powerful~useful tool~tactic of coding), and etc cool stuff that I'm still not yet aware of myself, don't understand how to code-do-it yet, hehe.<br/><br/>what uses these created groups specific items:<br/><br/>equipment, spells~magic, monster classes, treasure~drop classes, combining items, randomization of all of these things, Scopes (all in game or all just for a room: exits, objects, visible objects, reachable objects, etc etc etc), dialogue options, party~team members, attributes (such as a 'level up' UI:user interface), rooms (for example, you want to add items to specific rooms after an event halfway through your game), map~grid making, etc etc etc<br/><br/>for*EACH* is for doing ALL~EVERY~*EACH* item in the group (list)<br/>for ('this~these items only') is for specific items in the group (list)",
      "PostDate": "2014-05-28T07:19:20+01:00",
      "LastEditDate": null
    }
  ]
}
