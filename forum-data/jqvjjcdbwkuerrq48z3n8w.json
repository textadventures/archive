{
  "Topic": {
    "TopicId": "jqvjjcdbwkuerrq48z3n8w",
    "ForumId": "10",
    "Title": "How do you create a list for players to see when they click on something they can interact with?",
    "LastUpdated": "2019-01-25T14:47:18.2880428Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "c4273bad-2d93-41ee-b885-b81391e5c830",
      "UserId": 153758,
      "Username": "Taru",
      "AvatarUrl": "https://secure.gravatar.com/avatar/052ee78666bb84bd52a2a1fd2947a87e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm making a gamebook and am a little stuck on this one thing.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm making a gamebook and am a little stuck on this one thing.</p>\n\n",
      "PostDate": "2019-01-25T14:47:18.2880428Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2f63fc26-a24e-4f74-907c-f43430242549",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This sounds like you're looking for Menu.\r\n\r\nWhat Menu does is it takes a string list - maybe it works with other types but I've never tried - and makes a list of hyperlinks for the player to click on/enter. It then creates a variable called 'result' equal to what you typed, for which you can use the Switch code. So for example, you can have a stringlist:\r\n```\r\nStringList = \"Yes\", \"No\"\r\n```\r\nPardon my psuedocode.\r\nAnd then, you call the menu:\r\n```\r\nShow Menu taking from the list called StringList.\r\nAfter Player Picks an Option:\r\nSwitch(based on result)\r\ncase(\"Yes\"): print(\"You picked yes!\")\r\ncase(\"No\"): print(\"You picked no.\")\r\n```\r\nHope this helps.",
      "EditableFormat": "markdown",
      "HTML": "<p>This sounds like you're looking for Menu.</p>\n<p>What Menu does is it takes a string list - maybe it works with other types but I've never tried - and makes a list of hyperlinks for the player to click on/enter. It then creates a variable called 'result' equal to what you typed, for which you can use the Switch code. So for example, you can have a stringlist:</p>\n<pre><code>StringList = \"Yes\", \"No\"\n</code></pre>\n<p>Pardon my psuedocode.<br>\nAnd then, you call the menu:</p>\n<pre><code>Show Menu taking from the list called StringList.\nAfter Player Picks an Option:\nSwitch(based on result)\ncase(\"Yes\"): print(\"You picked yes!\")\ncase(\"No\"): print(\"You picked no.\")\n</code></pre>\n<p>Hope this helps.</p>\n\n",
      "PostDate": "2019-01-25T15:55:10.3787143Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09b2e474-20e1-4ae1-bba6-85326c8d92f6",
      "UserId": 153758,
      "Username": "Taru",
      "AvatarUrl": "https://secure.gravatar.com/avatar/052ee78666bb84bd52a2a1fd2947a87e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not exactly sure where to put that... Like I said, I'm making my game using the gamebook rather than a text adventure.\r\n\r\nI'm trying to get something like this https://gyazo.com/64c79253e27ff5a86930d0f120650731",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not exactly sure where to put that... Like I said, I'm making my game using the gamebook rather than a text adventure.</p>\n<p>I'm trying to get something like this https://gyazo.com/64c79253e27ff5a86930d0f120650731</p>\n\n",
      "PostDate": "2019-01-25T16:52:16.6083416Z",
      "LastEditDate": "2019-01-25T16:54:24.7534883Z",
      "link": null
    },
    {
      "PostId": "b7473df0-63a2-4c94-a4f4-813ae4908f35",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm not exactly sure where to put that... Like I said, I'm making my game using the gamebook rather than a text adventure.\r\n\r\nYou'd put the script at the point where you want the menu to be displayed (presumably a script or script-and-text page).\r\n\r\nIn code view it would look more like:\r\n```\r\nShowMenu (\"What would you like to do?\", Split(\"Whistle;Tumble;Fart\"), false) {\r\n  switch (result) {\r\n    case (\"Whistle\") {\r\n      MovePlayer (page to go to if the player whistles)\r\n    }\r\n    case (\"Tumble\") {\r\n      MovePlayer (page to go to if the player tumbles)\r\n    }\r\n    case (\"Fart\") {\r\n      MovePlayer (you get the idea by now)\r\n    }\r\n  }\r\n}\r\n```\r\n(I don't know what it looks like in the GUI script editor, but you can enter the code in code-view and then see for yourself)\r\n\r\n> I'm trying to get something like this <a href=\"https://gyazo.com/64c79253e27ff5a86930d0f120650731\"><img src=\"https://i.gyazo.com/64c79253e27ff5a86930d0f120650731.png\"/></a>\r\n\r\n\r\nThat's a verb list. It's only available in text adventures.\r\n\r\nBut… it might be possible to make the javascript work.\r\n\r\n\r\n**Warning: I haven't tested this, I've only skim-read some of the Quest source. And I think it *might* work, if you just want to have one or two command links**\r\n```\r\nmsg (\"<a class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"some_objectname\\\">Click here!</a>\")\r\nJS.eval(\"$('#divOutput a.elementmenu').last().data('ElementId', 'some_objectname').data('ElementName', 'some_objectname');\")\r\ndata = NewStringDictionary()\r\ndictionary add (data, \"some_objectname\", \"Option1/Option2\")\r\nJS.updateObjectLinks (data)\r\n```\r\n\r\nThis should create a link that says \"Click here!\". When the player clicks it, it should pop up a little menu giving them the choice of \"Option1\" or \"Option2\".\r\nWhen the player clicks on one of those options, it will look for a function called \"HandleCommand\". I've had a quick look through the Quest source code, and I *think* this should still work in gamebook mode. But you will need to write your own HandleCommand function to handle those responses. It will receive 2 parameters; the first one will be a string which is `\"option1 some_objectname\"` or similar, indicating which link was clicked, and which option was chosen.\r\n\r\nI don't think the objectname has to be an actual object in this case; it's the text-adventure version of the HandleCommand function that deals with that. So you can just use the objectname as a way for your function to track which link the player clicked on.\r\n\r\nNote that where the line `dictionary add (data, \"some_objectname\", \"Option1/Option2\")` is - you can repeat this line using the names of previously created links to change the options that come from clicking them. Any that aren't listed will have the links disabled.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm not exactly sure where to put that... Like I said, I'm making my game using the gamebook rather than a text adventure.</p>\n</blockquote>\n<p>You'd put the script at the point where you want the menu to be displayed (presumably a script or script-and-text page).</p>\n<p>In code view it would look more like:</p>\n<pre><code>ShowMenu (\"What would you like to do?\", Split(\"Whistle;Tumble;Fart\"), false) {\n  switch (result) {\n    case (\"Whistle\") {\n      MovePlayer (page to go to if the player whistles)\n    }\n    case (\"Tumble\") {\n      MovePlayer (page to go to if the player tumbles)\n    }\n    case (\"Fart\") {\n      MovePlayer (you get the idea by now)\n    }\n  }\n}\n</code></pre>\n<p>(I don't know what it looks like in the GUI script editor, but you can enter the code in code-view and then see for yourself)</p>\n<blockquote>\n<p>I'm trying to get something like this <a href=\"https://gyazo.com/64c79253e27ff5a86930d0f120650731\"><img src=\"https://i.gyazo.com/64c79253e27ff5a86930d0f120650731.png\"></a></p>\n</blockquote>\n<p>That's a verb list. It's only available in text adventures.</p>\n<p>But… it might be possible to make the javascript work.</p>\n<p><strong>Warning: I haven't tested this, I've only skim-read some of the Quest source. And I think it <em>might</em> work, if you just want to have one or two command links</strong></p>\n<pre><code>msg (\"&lt;a class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"some_objectname\\\"&gt;Click here!&lt;/a&gt;\")\nJS.eval(\"$('#divOutput a.elementmenu').last().data('ElementId', 'some_objectname').data('ElementName', 'some_objectname');\")\ndata = NewStringDictionary()\ndictionary add (data, \"some_objectname\", \"Option1/Option2\")\nJS.updateObjectLinks (data)\n</code></pre>\n<p>This should create a link that says \"Click here!\". When the player clicks it, it should pop up a little menu giving them the choice of \"Option1\" or \"Option2\".<br>\nWhen the player clicks on one of those options, it will look for a function called \"HandleCommand\". I've had a quick look through the Quest source code, and I <em>think</em> this should still work in gamebook mode. But you will need to write your own HandleCommand function to handle those responses. It will receive 2 parameters; the first one will be a string which is <code>\"option1 some_objectname\"</code> or similar, indicating which link was clicked, and which option was chosen.</p>\n<p>I don't think the objectname has to be an actual object in this case; it's the text-adventure version of the HandleCommand function that deals with that. So you can just use the objectname as a way for your function to track which link the player clicked on.</p>\n<p>Note that where the line <code>dictionary add (data, \"some_objectname\", \"Option1/Option2\")</code> is - you can repeat this line using the names of previously created links to change the options that come from clicking them. Any that aren't listed will have the links disabled.</p>\n\n",
      "PostDate": "2019-01-25T17:27:31.5414697Z",
      "LastEditDate": "2019-01-25T17:35:13.0509178Z",
      "link": null
    },
    {
      "PostId": "c33a34bd-f177-43b3-98cf-0c51de677646",
      "UserId": 153758,
      "Username": "Taru",
      "AvatarUrl": "https://secure.gravatar.com/avatar/052ee78666bb84bd52a2a1fd2947a87e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, thank you for that. Works great~",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, thank you for that. Works great~</p>\n\n",
      "PostDate": "2019-01-25T18:06:11.0182181Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
