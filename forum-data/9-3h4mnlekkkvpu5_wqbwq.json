{
  "Topic": {
    "TopicId": "9-3h4mnlekkkvpu5_wqbwq",
    "ForumId": "10",
    "Title": "Linking items together",
    "LastUpdated": "2016-07-12T20:30:32.9699975Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3513755c-3b13-4898-8d11-7242844c3846",
      "UserId": 252724,
      "Username": "Konisforce",
      "UserAvatar": null,
      "UserGravatar": "3a29e6286b489009d86ff1d6b6282080",
      "EditableText": "I'm looking for a way to link items together so they can influence each other, and have it be robust enough that it can handle things being performed in different orders.\r\n\r\nAn example;\r\n\r\nSay I have a room with a computer, a generator, and a gas can.  I want the player to have to fill up the generator with gas, start it, and plug the computer into it before the computer can be used.\r\n\r\nI can't just have the computer check if it's plugged in, because the generator could be empty.  I can't have the computer check if the generator is full only when it's plugged in, because the player could plug the computer in, then go to turn on the generator.  So the computer needs to check the state of the generator when it turns on.  For the same reasons, I can't have the generator pass information just when a state changes.  \r\n\r\nThen say the player takes the generator with them for some reason.  I can't have the computer's \"on\" state persist, because the thing is gone now.\r\n\r\nAny smart way to do this that doesn't involve piles of \"if\" statements?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm looking for a way to link items together so they can influence each other, and have it be robust enough that it can handle things being performed in different orders.</p>\n<p>An example;</p>\n<p>Say I have a room with a computer, a generator, and a gas can.  I want the player to have to fill up the generator with gas, start it, and plug the computer into it before the computer can be used.</p>\n<p>I can't just have the computer check if it's plugged in, because the generator could be empty.  I can't have the computer check if the generator is full only when it's plugged in, because the player could plug the computer in, then go to turn on the generator.  So the computer needs to check the state of the generator when it turns on.  For the same reasons, I can't have the generator pass information just when a state changes.</p>\n<p>Then say the player takes the generator with them for some reason.  I can't have the computer's \"on\" state persist, because the thing is gone now.</p>\n<p>Any smart way to do this that doesn't involve piles of \"if\" statements?</p>\n\n",
      "PostDate": "2016-07-12T20:30:32.9699975Z",
      "LastEditDate": null
    },
    {
      "PostId": "a8e1bc5f-5f6f-42ee-b1fc-5f1c4a7ad262",
      "UserId": 1346,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I would create a function that checks all these things, and does the behavior as appropriate, and then have each item call the function when its thing is done. You will only have to do all your ifs once then. And I think large numbers of ifs are ineviable in Interactuive Fiction. Why do you think if is called IF?\r\n\r\n (That is kind oif vague; just ask if you need more detail).",
      "EditableFormat": "markdown",
      "HTML": "<p>I would create a function that checks all these things, and does the behavior as appropriate, and then have each item call the function when its thing is done. You will only have to do all your ifs once then. And I think large numbers of ifs are ineviable in Interactuive Fiction. Why do you think if is called IF?</p>\n<p>(That is kind oif vague; just ask if you need more detail).</p>\n\n",
      "PostDate": "2016-07-12T21:19:12.0193493Z",
      "LastEditDate": null
    },
    {
      "PostId": "66991f11-3a3d-40e4-a949-75e95df0f9b8",
      "UserId": 56551,
      "Username": "XanMag",
      "UserAvatar": null,
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "I'm a total moron and for that I will apologize... but, for some reason, I had a hell of a time getting this to work.  Eventually I did and the code is below.  It just seems so convoluted.  If any of you have time, please take a look at it and tell me if there is an easy way to streamline this mess.  It would be helpful as it is something I do in my games quite a bit.  If I can get this 'creation' down to 10-15 minutes as opposed to 60, I'd be a happy camper.  Thanks.\r\n\r\n```  \r\n<object name=\"special order room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"computer\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"switchable\" />\r\n      <look type=\"script\">\r\n        if (GetBoolean(computer, \"plugged\")) {\r\n          if (IsSwitchedOn(computer)) {\r\n            msg (\"The computer is plugged into the generator and is currently on.\")\r\n          }\r\n          else {\r\n            msg (\"The computer is plugged into the generator but is turned off.\")\r\n          }\r\n        }\r\n        else {\r\n          msg (\"The computer sits unplugged and is, thus, obviously turned off.  You could 'plug in computer' and see what happens?\")\r\n        }\r\n      </look>\r\n      <takemsg>Once you have it powered up, just use it.  Too cumbersome to carry around anyway.</takemsg>\r\n      <feature_usegive />\r\n      <use type=\"script\">\r\n        if (IsSwitchedOn(computer)) {\r\n          msg (\"You surf the internet, watching hours of videos of funny cats... You decide that was enough wasted time and get back to the task at hand - learning the Quest software!\")\r\n        }\r\n        else {\r\n          if (GetBoolean(computer, \"plugged\")) {\r\n            msg (\"Yoou'll need to turn it on first.\")\r\n          }\r\n          else {\r\n            msg (\"It's not even plugged in you goon.  This laptop does not have a battery either.\")\r\n          }\r\n        }\r\n      </use>\r\n      <feature_switchable />\r\n      <onswitchon type=\"script\"><![CDATA[\r\n        if (GetBoolean(computer, \"powered\")) {\r\n          msg (\"...the computer and it springs to life.\")\r\n          SwitchOn (computer)\r\n        }\r\n        else if (not GetBoolean(computer, \"plugged\")) {\r\n          msg (\"...nothing.  Nothing happens.  Perhaps you should 'plug computer into generator' first.<br/><br/>You flip the switch back to off.\")\r\n          SwitchOff (computer)\r\n        }\r\n        else {\r\n          msg (\"...odd.  Nothing happened.  Even though it is plugged into the generator, it doesn't not seem to be getting any power.<br/><br/>You flip the switch back to off.\")\r\n          SwitchOff (computer)\r\n        }\r\n      ]]></onswitchon>\r\n      <onswitchoff type=\"script\">\r\n        SwitchOff (computer)\r\n      </onswitchoff>\r\n      <switchonmsg>You switch it on and...</switchonmsg>\r\n      <switchoffmsg>You switch the computer back off.</switchoffmsg>\r\n      <alt type=\"stringlist\">\r\n        <value>comp</value>\r\n        <value>cpu</value>\r\n      </alt>\r\n    </object>\r\n    <object name=\"generator\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"switchable\" />\r\n      <look type=\"script\">\r\n        if (IsSwitchedOn(generator)) {\r\n          msg (\"It is a gas-powered generator that you have filled with gasoline and started.  It hums quite nicely as it is ready to power your electrical appliances.\")\r\n        }\r\n        else {\r\n          if (GetBoolean(generator, \"filled\")) {\r\n            msg (\"It is a gas-powered generator that has been filled with gasoline but is not turned on.  To turn it on, just push the button!\")\r\n          }\r\n          else {\r\n            msg (\"It's a gas-powered generator that is both empty of gasoline and turned off.  There is a little button on it that should start it up (assuming there is gas in it).  To turn it on, just make sure it has gas in it and 'push button' or 'turn on generator.\")\r\n          }\r\n        }\r\n      </look>\r\n      <feature_switchable />\r\n      <onswitchon type=\"script\">\r\n        if (GetBoolean(generator, \"on\")) {\r\n          msg (\"It's already on, dingleberry.\")\r\n        }\r\n        else {\r\n          power to generator\r\n        }\r\n      </onswitchon>\r\n      <onswitchoff type=\"script\">\r\n        msg (\"There is no need to turn off the generator.  You've got it running and that was your goal!\")\r\n      </onswitchoff>\r\n      <takemsg>Too heavy.</takemsg>\r\n    </object>\r\n    <object name=\"gas can\">\r\n      <inherit name=\"editor_object\" />\r\n      <look type=\"script\">\r\n        if (GetBoolean(gas can, \"filled\")) {\r\n          msg (\"It's full of gas.  You can use this on the generator now!\")\r\n        }\r\n        else {\r\n          msg (\"It's really just an open-mouthed can and you could certainly fill it with anything you'd like, including gasoline...\")\r\n        }\r\n      </look>\r\n      <take />\r\n      <feature_usegive />\r\n      <use type=\"script\">\r\n        if (GetBoolean(gas can, \"filled\")) {\r\n          msg (\"I assume you want to use the gas can on the generator?  Okay then.  You empty the gas can into the generator and toss the old, stinky can away.\")\r\n          RemoveObject (gas can)\r\n          SetObjectFlagOn (generator, \"filled\")\r\n        }\r\n        else {\r\n          msg (\"You try to wear the gas can as a helmet, but it doesn't fit your big head.  Oh... wait.  You want to probably use it on the generator, right?  Well, you will need to get gas in it first.  Use the pump.\")\r\n        }\r\n      </use>\r\n      <selfuseon type=\"scriptdictionary\">\r\n        <item key=\"generator\">\r\n          if (GetBoolean(gas can, \"filled\")) {\r\n            msg (\"You empty the gas can into the generator and toss the old, stinky can away.\")\r\n            RemoveObject (gas can)\r\n            SetObjectFlagOn (generator, \"filled\")\r\n          }\r\n          else {\r\n            msg (\"You rattle the empty gas can against the generator but nothing happens.  Wait a second!  You want to put fuel in the generator?  Yes, of course.  But, that won't happen unless you have gas in the can first! \")\r\n          }\r\n        </item>\r\n      </selfuseon>\r\n    </object>\r\n    <object name=\"pump\">\r\n      <inherit name=\"editor_object\" />\r\n      <look>It looks like an old water pump, but because of the smell of gasoline, you safely assume that it is an oil pump.  To use the pump, just type 'use pump'.</look>\r\n      <feature_usegive />\r\n      <use type=\"script\">\r\n        if (Got(gas can)) {\r\n          msg (\"You place the gas can under the pump and crank the lever a few times.  Gas spills out and fills your can.  Now you could use that on the generator!\")\r\n          SetObjectFlagOn (gas can, \"filled\")\r\n        }\r\n        else {\r\n          msg (\"You consider using the pump, but seeing that you are not carrying anything to pump the gas into, you decide against it.\")\r\n        }\r\n      </use>\r\n      <takemsg>You cannot take it.  It is fastened firmly to the ground.</takemsg>\r\n    </object>\r\n    <object name=\"button1\">\r\n      <inherit name=\"editor_object\" />\r\n      <alias>button</alias>\r\n      <scenery />\r\n      <look>It's a little button attached to the generator.  Push it, if you haven't already gotten the generator started.</look>\r\n      <push type=\"script\">\r\n        if (GetBoolean(generator, \"on\")) {\r\n          msg (\"It's already on, dingleberry.\")\r\n        }\r\n        else {\r\n          power to generator\r\n        }\r\n      </push>\r\n    </object>\r\n    <command name=\"plug CPU cmd\">\r\n      <pattern>plug in computer; plug in the computer; use computer with generator; plug in computer to generator; use computer on generator; use generator on computer; plug computer into generator; plug in comp; plug in the comp; use comp with gen; plug in comp to gen; use comp on gen; use gen on comp; plug comp into gen</pattern>\r\n      <script>\r\n        msg (\"You plug the computer into the generator.\")\r\n        SetObjectFlagOn (computer, \"plugged\")\r\n        if (IsSwitchedOn(generator)) {\r\n          SetObjectFlagOn (computer, \"powered\")\r\n        }\r\n      </script>\r\n    </command>\r\n    <command name=\"unplug CPU\">\r\n      <pattern>unplug computer; unplug the computer; unplug computer from generator</pattern>\r\n      <script>\r\n        if (GetBoolean(computer, \"plugged\")) {\r\n          msg (\"You pull the plug out of the generator.\")\r\n          SetObjectFlagOff (computer, \"plugged\")\r\n          SetObjectFlagOff (computer, \"powered\")\r\n          SwitchOff (computer)\r\n        }\r\n        else {\r\n          msg (\"It's not plugged in to begin with, dummy!\")\r\n        }\r\n      </script>\r\n    </command>\r\n```\r\n\r\n\r\nAnd here is the function.\r\n```<function name=\"power to generator\">\r\n    if (not IsSwitchedOn(generator)) {\r\n      if (GetBoolean(generator, \"filled\")) {\r\n        msg (\"The generator fires right up.  It's ready to power your appliances.\")\r\n        SwitchOn (generator)\r\n        SetObjectFlagOn (generator, \"on\")\r\n        if (GetBoolean(computer, \"plugged\")) {\r\n          SetObjectFlagOn (computer, \"powered\")\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You try to start the generator by pushing the button, but nothing happens.  I think it needs some gas.\")\r\n      }\r\n    }\r\n  </function>\r\n```\r\nAnyway... any help would be appreciated.  I know there is a lot going on here, but this seems to be a fairly common question on the forums: How to check to make sure the player completes tasks in a specific order.  If they events are simply completing a number of tasks, I get that.  Five tasks need done before a door opens in any order.  Easy.  But, in this case, several flags on each objects need set in a specific order and each needs checked.  Just looking for a streamlining option.  Specifically, here's what was done in the code I finished.\r\n\r\n1.  Fill gas can by using on pump. \r\n2.  Use the gas can on the generator (flag name 'filled' on generator)\r\n3.  Turn on generator (also could push button on generator (called 'power to generator' function).  If computer is already plugged in to generator when turning on generator (flag name 'powered' to computer), it may be switched on and used.\r\n4.  Plug in computer (flag name 'plugged' on computer) and if generator is on (flag name 'powered' on computer).\r\nOnce the computer is 'powered', it can be turned on and used.  I cheated a bit and didn't allow the generator to be turned off, but I did unset all flags on the computer when it is unplugged.  \r\n\r\nI had a specific problem with trying to turn the generator on and getting duplicate messages that it has been turned on already.  It was because I need to turn on the generator when switched on, but I also had a message print saying it was already on IF it was already on... UGH.  I solved it by adding a flag named 'on' to the generator and checking it BEFORE calling the 'power to generator' function in order to get the message to print once.  I originally checked for to see if the generator was switched on in the function.\r\n\r\nEach option has been accounted for here if done in the incorrect order... trying to use the pump without the can, turning on/using the computer without it being plugged in, plugged in but no powered, and trying to turn on the generator/pushing button without filling the generator with gas.  It seems simple when written that way, but...\r\n\r\n@Konisforce, \r\n\r\nIf this will suffice (it DOES work, it's just a jumbled mess of code), feel free to copy-paste it into your game.  If you would like the .aslx file of it I can send that, too.  Or, obviously, if you have questions, please feel free to ask.\r\n\r\nGood luck!\r\nXanMag",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm a total moron and for that I will apologize... but, for some reason, I had a hell of a time getting this to work.  Eventually I did and the code is below.  It just seems so convoluted.  If any of you have time, please take a look at it and tell me if there is an easy way to streamline this mess.  It would be helpful as it is something I do in my games quite a bit.  If I can get this 'creation' down to 10-15 minutes as opposed to 60, I'd be a happy camper.  Thanks.</p>\n<pre><code>&lt;object name=\"special order room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"computer\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"switchable\" /&gt;\n      &lt;look type=\"script\"&gt;\n        if (GetBoolean(computer, \"plugged\")) {\n          if (IsSwitchedOn(computer)) {\n            msg (\"The computer is plugged into the generator and is currently on.\")\n          }\n          else {\n            msg (\"The computer is plugged into the generator but is turned off.\")\n          }\n        }\n        else {\n          msg (\"The computer sits unplugged and is, thus, obviously turned off.  You could 'plug in computer' and see what happens?\")\n        }\n      &lt;/look&gt;\n      &lt;takemsg&gt;Once you have it powered up, just use it.  Too cumbersome to carry around anyway.&lt;/takemsg&gt;\n      &lt;feature_usegive /&gt;\n      &lt;use type=\"script\"&gt;\n        if (IsSwitchedOn(computer)) {\n          msg (\"You surf the internet, watching hours of videos of funny cats... You decide that was enough wasted time and get back to the task at hand - learning the Quest software!\")\n        }\n        else {\n          if (GetBoolean(computer, \"plugged\")) {\n            msg (\"Yoou'll need to turn it on first.\")\n          }\n          else {\n            msg (\"It's not even plugged in you goon.  This laptop does not have a battery either.\")\n          }\n        }\n      &lt;/use&gt;\n      &lt;feature_switchable /&gt;\n      &lt;onswitchon type=\"script\"&gt;&lt;![CDATA[\n        if (GetBoolean(computer, \"powered\")) {\n          msg (\"...the computer and it springs to life.\")\n          SwitchOn (computer)\n        }\n        else if (not GetBoolean(computer, \"plugged\")) {\n          msg (\"...nothing.  Nothing happens.  Perhaps you should 'plug computer into generator' first.&lt;br/&gt;&lt;br/&gt;You flip the switch back to off.\")\n          SwitchOff (computer)\n        }\n        else {\n          msg (\"...odd.  Nothing happened.  Even though it is plugged into the generator, it doesn't not seem to be getting any power.&lt;br/&gt;&lt;br/&gt;You flip the switch back to off.\")\n          SwitchOff (computer)\n        }\n      ]]&gt;&lt;/onswitchon&gt;\n      &lt;onswitchoff type=\"script\"&gt;\n        SwitchOff (computer)\n      &lt;/onswitchoff&gt;\n      &lt;switchonmsg&gt;You switch it on and...&lt;/switchonmsg&gt;\n      &lt;switchoffmsg&gt;You switch the computer back off.&lt;/switchoffmsg&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;comp&lt;/value&gt;\n        &lt;value&gt;cpu&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n    &lt;object name=\"generator\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"switchable\" /&gt;\n      &lt;look type=\"script\"&gt;\n        if (IsSwitchedOn(generator)) {\n          msg (\"It is a gas-powered generator that you have filled with gasoline and started.  It hums quite nicely as it is ready to power your electrical appliances.\")\n        }\n        else {\n          if (GetBoolean(generator, \"filled\")) {\n            msg (\"It is a gas-powered generator that has been filled with gasoline but is not turned on.  To turn it on, just push the button!\")\n          }\n          else {\n            msg (\"It's a gas-powered generator that is both empty of gasoline and turned off.  There is a little button on it that should start it up (assuming there is gas in it).  To turn it on, just make sure it has gas in it and 'push button' or 'turn on generator.\")\n          }\n        }\n      &lt;/look&gt;\n      &lt;feature_switchable /&gt;\n      &lt;onswitchon type=\"script\"&gt;\n        if (GetBoolean(generator, \"on\")) {\n          msg (\"It's already on, dingleberry.\")\n        }\n        else {\n          power to generator\n        }\n      &lt;/onswitchon&gt;\n      &lt;onswitchoff type=\"script\"&gt;\n        msg (\"There is no need to turn off the generator.  You've got it running and that was your goal!\")\n      &lt;/onswitchoff&gt;\n      &lt;takemsg&gt;Too heavy.&lt;/takemsg&gt;\n    &lt;/object&gt;\n    &lt;object name=\"gas can\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look type=\"script\"&gt;\n        if (GetBoolean(gas can, \"filled\")) {\n          msg (\"It's full of gas.  You can use this on the generator now!\")\n        }\n        else {\n          msg (\"It's really just an open-mouthed can and you could certainly fill it with anything you'd like, including gasoline...\")\n        }\n      &lt;/look&gt;\n      &lt;take /&gt;\n      &lt;feature_usegive /&gt;\n      &lt;use type=\"script\"&gt;\n        if (GetBoolean(gas can, \"filled\")) {\n          msg (\"I assume you want to use the gas can on the generator?  Okay then.  You empty the gas can into the generator and toss the old, stinky can away.\")\n          RemoveObject (gas can)\n          SetObjectFlagOn (generator, \"filled\")\n        }\n        else {\n          msg (\"You try to wear the gas can as a helmet, but it doesn't fit your big head.  Oh... wait.  You want to probably use it on the generator, right?  Well, you will need to get gas in it first.  Use the pump.\")\n        }\n      &lt;/use&gt;\n      &lt;selfuseon type=\"scriptdictionary\"&gt;\n        &lt;item key=\"generator\"&gt;\n          if (GetBoolean(gas can, \"filled\")) {\n            msg (\"You empty the gas can into the generator and toss the old, stinky can away.\")\n            RemoveObject (gas can)\n            SetObjectFlagOn (generator, \"filled\")\n          }\n          else {\n            msg (\"You rattle the empty gas can against the generator but nothing happens.  Wait a second!  You want to put fuel in the generator?  Yes, of course.  But, that won't happen unless you have gas in the can first! \")\n          }\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=\"pump\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;It looks like an old water pump, but because of the smell of gasoline, you safely assume that it is an oil pump.  To use the pump, just type 'use pump'.&lt;/look&gt;\n      &lt;feature_usegive /&gt;\n      &lt;use type=\"script\"&gt;\n        if (Got(gas can)) {\n          msg (\"You place the gas can under the pump and crank the lever a few times.  Gas spills out and fills your can.  Now you could use that on the generator!\")\n          SetObjectFlagOn (gas can, \"filled\")\n        }\n        else {\n          msg (\"You consider using the pump, but seeing that you are not carrying anything to pump the gas into, you decide against it.\")\n        }\n      &lt;/use&gt;\n      &lt;takemsg&gt;You cannot take it.  It is fastened firmly to the ground.&lt;/takemsg&gt;\n    &lt;/object&gt;\n    &lt;object name=\"button1\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;alias&gt;button&lt;/alias&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;It's a little button attached to the generator.  Push it, if you haven't already gotten the generator started.&lt;/look&gt;\n      &lt;push type=\"script\"&gt;\n        if (GetBoolean(generator, \"on\")) {\n          msg (\"It's already on, dingleberry.\")\n        }\n        else {\n          power to generator\n        }\n      &lt;/push&gt;\n    &lt;/object&gt;\n    &lt;command name=\"plug CPU cmd\"&gt;\n      &lt;pattern&gt;plug in computer; plug in the computer; use computer with generator; plug in computer to generator; use computer on generator; use generator on computer; plug computer into generator; plug in comp; plug in the comp; use comp with gen; plug in comp to gen; use comp on gen; use gen on comp; plug comp into gen&lt;/pattern&gt;\n      &lt;script&gt;\n        msg (\"You plug the computer into the generator.\")\n        SetObjectFlagOn (computer, \"plugged\")\n        if (IsSwitchedOn(generator)) {\n          SetObjectFlagOn (computer, \"powered\")\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n    &lt;command name=\"unplug CPU\"&gt;\n      &lt;pattern&gt;unplug computer; unplug the computer; unplug computer from generator&lt;/pattern&gt;\n      &lt;script&gt;\n        if (GetBoolean(computer, \"plugged\")) {\n          msg (\"You pull the plug out of the generator.\")\n          SetObjectFlagOff (computer, \"plugged\")\n          SetObjectFlagOff (computer, \"powered\")\n          SwitchOff (computer)\n        }\n        else {\n          msg (\"It's not plugged in to begin with, dummy!\")\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n</code></pre>\n<p>And here is the function.</p>\n<pre><code>    if (not IsSwitchedOn(generator)) {\n      if (GetBoolean(generator, \"filled\")) {\n        msg (\"The generator fires right up.  It's ready to power your appliances.\")\n        SwitchOn (generator)\n        SetObjectFlagOn (generator, \"on\")\n        if (GetBoolean(computer, \"plugged\")) {\n          SetObjectFlagOn (computer, \"powered\")\n        }\n      }\n      else {\n        msg (\"You try to start the generator by pushing the button, but nothing happens.  I think it needs some gas.\")\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<p>Anyway... any help would be appreciated.  I know there is a lot going on here, but this seems to be a fairly common question on the forums: How to check to make sure the player completes tasks in a specific order.  If they events are simply completing a number of tasks, I get that.  Five tasks need done before a door opens in any order.  Easy.  But, in this case, several flags on each objects need set in a specific order and each needs checked.  Just looking for a streamlining option.  Specifically, here's what was done in the code I finished.</p>\n<ol>\n<li>Fill gas can by using on pump.</li>\n<li>Use the gas can on the generator (flag name 'filled' on generator)</li>\n<li>Turn on generator (also could push button on generator (called 'power to generator' function).  If computer is already plugged in to generator when turning on generator (flag name 'powered' to computer), it may be switched on and used.</li>\n<li>Plug in computer (flag name 'plugged' on computer) and if generator is on (flag name 'powered' on computer).<br>\nOnce the computer is 'powered', it can be turned on and used.  I cheated a bit and didn't allow the generator to be turned off, but I did unset all flags on the computer when it is unplugged.</li>\n</ol>\n<p>I had a specific problem with trying to turn the generator on and getting duplicate messages that it has been turned on already.  It was because I need to turn on the generator when switched on, but I also had a message print saying it was already on IF it was already on... UGH.  I solved it by adding a flag named 'on' to the generator and checking it BEFORE calling the 'power to generator' function in order to get the message to print once.  I originally checked for to see if the generator was switched on in the function.</p>\n<p>Each option has been accounted for here if done in the incorrect order... trying to use the pump without the can, turning on/using the computer without it being plugged in, plugged in but no powered, and trying to turn on the generator/pushing button without filling the generator with gas.  It seems simple when written that way, but...</p>\n<p>@Konisforce,</p>\n<p>If this will suffice (it DOES work, it's just a jumbled mess of code), feel free to copy-paste it into your game.  If you would like the .aslx file of it I can send that, too.  Or, obviously, if you have questions, please feel free to ask.</p>\n<p>Good luck!<br>\nXanMag</p>\n\n",
      "PostDate": "2016-07-13T00:08:25.4230536Z",
      "LastEditDate": "2016-07-13T00:13:40.5378987Z"
    },
    {
      "PostId": "2c8a9fcd-0352-411b-8741-7eeb0d459a0f",
      "UserId": 1346,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Further to what I said before, I am not sure a function is the best way to do this. It is only when the player tries to turn on the computer that you need to test if everything else is done.\r\n\r\nXanMag, there is not much you can do to simplify. It is a complicated thing, so there is going to be messy code. A few tweaks, most of which will make it more cmplicated:\r\n\r\nFor the gas can, use with generator, using this code (and it will run the code you already have for use on its own):\r\n```\r\ndo(this, \"use\")\r\n```\r\nBe good if you handled this command:\r\nfill generator\r\n\r\nFor the generator, you can turn it on without filling with fuel! This is, perhaps, a problem with Quest, which only gives the casual user access ro what happens AFTER it is turned on or off. Looks like you recognised this with the computer, as that handles the issue. Also the \"power to generator\" code can go in the script (you probably put it in a function because of my bad advice...).\r\n\r\nFor the \"plug CPU cmd\", I would not bother with the computer.powered flag (and modify the switchon code in the computer), but you should check if it is already plugged in, as you already do with unplugging (also, it is not a CPU you are plugging in, that is a small component on the motherboard inside the computer!)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Further to what I said before, I am not sure a function is the best way to do this. It is only when the player tries to turn on the computer that you need to test if everything else is done.</p>\n<p>XanMag, there is not much you can do to simplify. It is a complicated thing, so there is going to be messy code. A few tweaks, most of which will make it more cmplicated:</p>\n<p>For the gas can, use with generator, using this code (and it will run the code you already have for use on its own):</p>\n<pre><code>do(this, \"use\")\n</code></pre>\n<p>Be good if you handled this command:<br>\nfill generator</p>\n<p>For the generator, you can turn it on without filling with fuel! This is, perhaps, a problem with Quest, which only gives the casual user access ro what happens AFTER it is turned on or off. Looks like you recognised this with the computer, as that handles the issue. Also the \"power to generator\" code can go in the script (you probably put it in a function because of my bad advice...).</p>\n<p>For the \"plug CPU cmd\", I would not bother with the computer.powered flag (and modify the switchon code in the computer), but you should check if it is already plugged in, as you already do with unplugging (also, it is not a CPU you are plugging in, that is a small component on the motherboard inside the computer!)</p>\n\n",
      "PostDate": "2016-07-13T07:46:44.3256791Z",
      "LastEditDate": null
    },
    {
      "PostId": "a1f4fb3b-7896-4496-bde1-b8191068a577",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "@everyone/XanMag:\r\n\r\nif you have a lot of combinations/conditions to handle, you have a lot of combinations/conditions to handle (and thus lots of messy/verbose: ifs~else ifs~elses). There's not much you can do about this, unfortunately. As Pixie said in his/her post, ~ \"There's a reason interactive fiction is called/known as: IF\"",
      "EditableFormat": "markdown",
      "HTML": "<p>@everyone/XanMag:</p>\n<p>if you have a lot of combinations/conditions to handle, you have a lot of combinations/conditions to handle (and thus lots of messy/verbose: ifs~else ifs~elses). There's not much you can do about this, unfortunately. As Pixie said in his/her post, ~ \"There's a reason interactive fiction is called/known as: IF\"</p>\n\n",
      "PostDate": "2016-07-13T13:21:51.6087318Z",
      "LastEditDate": "2016-07-13T13:25:03.3999261Z"
    },
    {
      "PostId": "b895373e-4bfc-405b-8c23-eb03c52fd09e",
      "UserId": 252724,
      "Username": "Konisforce",
      "UserAvatar": null,
      "UserGravatar": "3a29e6286b489009d86ff1d6b6282080",
      "EditableText": "@XanMag -\r\n\r\nThanks for that!  I'll do it myself for the practice, but that's a good outline to have.  And unfortunately is about what I thought it would be.  I am doing a lot of this in my quest (it's a training scenario) so might need to do a custom \"attach / unattach\" command, that tracks states like this and allows things to be referenced up and down the chain.  Looks like a lot of flag-setting and \"if\"s is the way it's gotta be.",
      "EditableFormat": "markdown",
      "HTML": "<p>@XanMag -</p>\n<p>Thanks for that!  I'll do it myself for the practice, but that's a good outline to have.  And unfortunately is about what I thought it would be.  I am doing a lot of this in my quest (it's a training scenario) so might need to do a custom \"attach / unattach\" command, that tracks states like this and allows things to be referenced up and down the chain.  Looks like a lot of flag-setting and \"if\"s is the way it's gotta be.</p>\n\n",
      "PostDate": "2016-07-13T15:17:01.0160965Z",
      "LastEditDate": null
    }
  ]
}
