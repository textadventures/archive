{
  "Topic": {
    "TopicId": "70rih0ihu0you_v-cnmevg",
    "ForumId": "10",
    "Title": "Save files persisting through updates?",
    "LastUpdated": "2019-03-15T02:27:18.5856245Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "572a79e4-82d9-46ad-be74-3514b6ce9ef6",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As far as I understand (correct me if I'm wrong), save files are locked to the version of the game they were saved on. So, you can't use a save file to pick up from a later version of the game. This makes sense to me but I'm looking for a way around it.\r\n\r\nTo me, I'm mostly concerned with character setup. It'd be great if my players didn't have to start from scratch whenever I release a new update, since I give quite a few options. Would it be possible to export some variables into a txt or csv so that players can upload it to future versions?",
      "EditableFormat": "markdown",
      "HTML": "<p>As far as I understand (correct me if I'm wrong), save files are locked to the version of the game they were saved on. So, you can't use a save file to pick up from a later version of the game. This makes sense to me but I'm looking for a way around it.</p>\n<p>To me, I'm mostly concerned with character setup. It'd be great if my players didn't have to start from scratch whenever I release a new update, since I give quite a few options. Would it be possible to export some variables into a txt or csv so that players can upload it to future versions?</p>\n\n",
      "PostDate": "2019-03-15T02:27:18.5856245Z",
      "LastEditDate": "2019-03-15T02:37:05.9180909Z",
      "link": null
    },
    {
      "PostId": "69d437cf-10e2-4a2e-bea4-804b2736180b",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One way that has been proposed before...\r\nAdd a command called \"savegame\"\r\nhave the character and story setting printed to the screen.\r\ntell the player to copy the full screen (the text box area),\r\nand save that to a text file \"Save.txt\"\r\nAdd another command \"loadgame\" that will open the Save.txt file and load the character info.\r\nYour save info and load info must line up for it to work.\r\nOne idea, encode the data so that the player would not know what to edit.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>One way that has been proposed before...<br>\nAdd a command called \"savegame\"<br>\nhave the character and story setting printed to the screen.<br>\ntell the player to copy the full screen (the text box area),<br>\nand save that to a text file \"Save.txt\"<br>\nAdd another command \"loadgame\" that will open the Save.txt file and load the character info.<br>\nYour save info and load info must line up for it to work.<br>\nOne idea, encode the data so that the player would not know what to edit.</p>\n\n",
      "PostDate": "2019-03-15T02:48:46.0698425Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "095b9003-f3d6-4673-8551-ff0f33866e3d",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How do you load files into the game, though? I can't find any instruction on that.",
      "EditableFormat": "markdown",
      "HTML": "<p>How do you load files into the game, though? I can't find any instruction on that.</p>\n\n",
      "PostDate": "2019-03-15T05:39:44.5573444Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b13de66e-6033-4636-a34e-3becf4264e9e",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "GetFileData (string file name) --- I think this one will read the file\r\nGetFileURL(string filename)   --- I think will identify the file\r\nI haven't played with the commands (yet), but you can find a little bit more info in the documentation, under Resources below.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>GetFileData (string file name) --- I think this one will read the file<br>\nGetFileURL(string filename)   --- I think will identify the file<br>\nI haven't played with the commands (yet), but you can find a little bit more info in the documentation, under Resources below.</p>\n\n",
      "PostDate": "2019-03-15T07:45:41.8092223Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ef59f9e4-9a82-4859-b4f5-b90eaa2af00d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When you save a game in Quest, it saves everything. The save game IS the game, in whatever state. You do not even need the original game to play the saved game.\r\n\r\nI have a library here which will save to \"localStorage\" if the game is played in the browser.\r\nhttps://github.com/ThePix/quest/blob/master/SaveLoad.aslx\r\nhttps://github.com/ThePix/quest/wiki/Library:-Save-and-Load\r\n\r\nlocalStorage is a special section of your harddrive the browser controls and keeps separate for security. However, that is not available in the desktop version.\r\n\r\nAn earlier version uses DarkLizerd's idea of puttting the data to screen for the player to copy-and-paste to file, which is the only way with the desktop. I will at some point modify my library to allow both methods.",
      "EditableFormat": "markdown",
      "HTML": "<p>When you save a game in Quest, it saves everything. The save game IS the game, in whatever state. You do not even need the original game to play the saved game.</p>\n<p>I have a library here which will save to \"localStorage\" if the game is played in the browser.<br>\nhttps://github.com/ThePix/quest/blob/master/SaveLoad.aslx<br>\nhttps://github.com/ThePix/quest/wiki/Library:-Save-and-Load</p>\n<p>localStorage is a special section of your harddrive the browser controls and keeps separate for security. However, that is not available in the desktop version.</p>\n<p>An earlier version uses DarkLizerd's idea of puttting the data to screen for the player to copy-and-paste to file, which is the only way with the desktop. I will at some point modify my library to allow both methods.</p>\n\n",
      "PostDate": "2019-03-15T08:05:57.865746Z",
      "LastEditDate": "2019-03-15T08:06:31.0921875Z",
      "link": null
    },
    {
      "PostId": "1e7ee0b2-cdb7-4c11-8b8d-46f0669a336f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It shouldn't be that hard to allow localStorage to work in the desktop version of Quest.\r\n\r\nWe seem to currently have:\r\n```\r\n        ' KV added this next line of code to actually set CefSharp's path to the temp fold AppData\\Local\\Temp\r\n        ' CefSharp writes a debug.log to the current directory, so set it to the Temp folder\r\n        settings.CachePath = Path.GetTempPath()\r\n```\r\n\r\nI believe this is also the directory where Cef saves a file for JS localstorage; if it's set to a temp directory, the browser runs in incognito mode and prevents saving.\r\n\r\nYou should really be setting the cachepath to a sane directory (possibly based on the game's ID?).\r\n\r\nIf you want to stop it filling the disk with logfiles, that's what `settings.LogSeverity = LogSeverity.Disable` is for. Or set `settings.LogFile` to a path under the temp directory while leaving CachePath somewhere sane.",
      "EditableFormat": "markdown",
      "HTML": "<p>It shouldn't be that hard to allow localStorage to work in the desktop version of Quest.</p>\n<p>We seem to currently have:</p>\n<pre><code>        ' KV added this next line of code to actually set CefSharp's path to the temp fold AppData\\Local\\Temp\n        ' CefSharp writes a debug.log to the current directory, so set it to the Temp folder\n        settings.CachePath = Path.GetTempPath()\n</code></pre>\n<p>I believe this is also the directory where Cef saves a file for JS localstorage; if it's set to a temp directory, the browser runs in incognito mode and prevents saving.</p>\n<p>You should really be setting the cachepath to a sane directory (possibly based on the game's ID?).</p>\n<p>If you want to stop it filling the disk with logfiles, that's what <code>settings.LogSeverity = LogSeverity.Disable</code> is for. Or set <code>settings.LogFile</code> to a path under the temp directory while leaving CachePath somewhere sane.</p>\n\n",
      "PostDate": "2019-03-15T08:52:04.9806149Z",
      "LastEditDate": "2019-03-15T08:59:09.4515696Z",
      "link": null
    },
    {
      "PostId": "16c4f91f-954e-4d33-94f1-c61d11010e00",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "https://i.imgur.com/1xu84dwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "*cough*SaveLoad*cough*Update*cough*  :P I love you guys.",
      "EditableFormat": "markdown",
      "HTML": "<p><em>cough</em>SaveLoad<em>cough</em>Update<em>cough</em>  :P I love you guys.</p>\n\n",
      "PostDate": "2019-03-15T09:14:13.6001925Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9c36ba15-088d-4263-bcab-6a2bba0aac1c",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel & Pixie\r\n\r\n<details>\r\n\r\n> If you want to stop it filling the disk with logfiles, that's what ```settings.LogSeverity = LogSeverity.Disable``` is for. Or set ```settings.LogFile``` to a path under the temp directory while leaving CachePath somewhere sane.\r\n\r\nThat was my purpose, and the change to the code doesn't even always stop debug.log from being created in the game's directory.\r\n\r\nNow I'm wondering if my added code to set ```settings.CachePath``` could have introduced any little bugs into the system . . .\r\n\r\nI'm going to change it back and commit the changes on GitHub.\r\n\r\n\r\n---\r\n> I believe this is also the directory where Cef saves a file for JS localstorage; if it's set to a temp directory, the browser runs in incognito mode and prevents saving.\r\n\r\nI could never figure out how the heck that works, but I seem to recall finding numerous posts in the Visual Studio forums which mentioned how that (old) version of Chromium simply won't allow saves to ```localStorage```.\r\n\r\n---\r\nThis may or may not help, but here's code I added to that same file to save a txt file to the hard drive during play:\r\n\r\n```\r\n    Private Sub WriteToLog(data As String)\r\n        Dim logPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\Quest Logs\"\r\n        Dim gameName = Split(CurrentGame.Filename, \"\\\")(Split(CurrentGame.Filename, \"\\\").Length - 1)\r\n        gameName = gameName.Replace(\".aslx\", \"\")\r\n        If Not System.IO.Directory.Exists(logPath) = True Then\r\n            System.IO.Directory.CreateDirectory(logPath)\r\n        End If\r\n        If Not System.IO.File.Exists(logPath + \"\\\" + gameName + \"-log.txt\") = True Then\r\n            Dim file As System.IO.FileStream\r\n            file = System.IO.File.Create(logPath + \"\\\" + gameName + \"-log.txt\")\r\n            file.Close()\r\n        End If\r\n        My.Computer.FileSystem.WriteAllText(logPath + \"\\\" + gameName + \"-log.txt\", data + Environment.NewLine, True)\r\nEnd Sub\r\n```\r\n\r\n---\r\nIt works along with ```JS.saveLog()```.\r\n\r\nI initially had it coded so that the author could save whatever text he or she wanted to a text file, but we ended up leaving that out.\r\n\r\n---\r\n> You do not even need the original game to play the saved game.\r\n\r\nI thought the saved games check for the existence of the original game and refuse to load if not found?\r\n\r\nUPDATE\r\n\r\nYep.  Just checked.  If the original game is not on the disk, you get:\r\n\r\n**FAILED TO LOAD GAME**\r\nThe following errors occurred:\r\nError: Could not find file 'C:\\Users\\KV\\Documents\\Quest Games\\Downloaded Games\\Xanadu - In the Compound - Revenge.quest'.\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel &amp; Pixie</p>\n<details>\n<blockquote>\n<p>If you want to stop it filling the disk with logfiles, that's what <code>settings.LogSeverity = LogSeverity.Disable</code> is for. Or set <code>settings.LogFile</code> to a path under the temp directory while leaving CachePath somewhere sane.</p>\n</blockquote>\n<p>That was my purpose, and the change to the code doesn't even always stop debug.log from being created in the game's directory.</p>\n<p>Now I'm wondering if my added code to set <code>settings.CachePath</code> could have introduced any little bugs into the system . . .</p>\n<p>I'm going to change it back and commit the changes on GitHub.</p>\n<hr>\n<blockquote>\n<p>I believe this is also the directory where Cef saves a file for JS localstorage; if it's set to a temp directory, the browser runs in incognito mode and prevents saving.</p>\n</blockquote>\n<p>I could never figure out how the heck that works, but I seem to recall finding numerous posts in the Visual Studio forums which mentioned how that (old) version of Chromium simply won't allow saves to <code>localStorage</code>.</p>\n<hr>\n<p>This may or may not help, but here's code I added to that same file to save a txt file to the hard drive during play:</p>\n<pre><code>    Private Sub WriteToLog(data As String)\n        Dim logPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\Quest Logs\"\n        Dim gameName = Split(CurrentGame.Filename, \"\\\")(Split(CurrentGame.Filename, \"\\\").Length - 1)\n        gameName = gameName.Replace(\".aslx\", \"\")\n        If Not System.IO.Directory.Exists(logPath) = True Then\n            System.IO.Directory.CreateDirectory(logPath)\n        End If\n        If Not System.IO.File.Exists(logPath + \"\\\" + gameName + \"-log.txt\") = True Then\n            Dim file As System.IO.FileStream\n            file = System.IO.File.Create(logPath + \"\\\" + gameName + \"-log.txt\")\n            file.Close()\n        End If\n        My.Computer.FileSystem.WriteAllText(logPath + \"\\\" + gameName + \"-log.txt\", data + Environment.NewLine, True)\nEnd Sub\n</code></pre>\n<hr>\n<p>It works along with <code>JS.saveLog()</code>.</p>\n<p>I initially had it coded so that the author could save whatever text he or she wanted to a text file, but we ended up leaving that out.</p>\n<hr>\n<blockquote>\n<p>You do not even need the original game to play the saved game.</p>\n</blockquote>\n<p>I thought the saved games check for the existence of the original game and refuse to load if not found?</p>\n<p>UPDATE</p>\n<p>Yep.  Just checked.  If the original game is not on the disk, you get:</p>\n<p><strong>FAILED TO LOAD GAME</strong><br>\nThe following errors occurred:<br>\nError: Could not find file 'C:\\Users\\KV\\Documents\\Quest Games\\Downloaded Games\\Xanadu - In the Compound - Revenge.quest'.</p>\n</details>\n\n",
      "PostDate": "2019-03-16T13:48:49.3094957Z",
      "LastEditDate": "2019-03-16T14:16:38.3691842Z",
      "link": null
    },
    {
      "PostId": "30a1d276-1f64-4304-ac8b-57eb68f0cac5",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm glad my thread has stimulated some conversation~\r\n\r\nI'm still lost, though. The documentation on GetFileData and GetFileURL is pretty sparse and I'm not sure what to do with them. Pixie's SaveLoad library is also too much for me to implement at this point, as I have way too many variables that could change and this would just be too much overhead for me to deal with. (Though I appreciate the suggestion!)\r\n\r\nAt this point, I'd be happy with only save/loading the character creation variables. Is there a simple function I can use to quickly export a string to a text file, and then another function to retrieve that string? Would I be able to utilize Log() for this to export some kind of cheat-code-like string the player can paste into the input box?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm glad my thread has stimulated some conversation~</p>\n<p>I'm still lost, though. The documentation on GetFileData and GetFileURL is pretty sparse and I'm not sure what to do with them. Pixie's SaveLoad library is also too much for me to implement at this point, as I have way too many variables that could change and this would just be too much overhead for me to deal with. (Though I appreciate the suggestion!)</p>\n<p>At this point, I'd be happy with only save/loading the character creation variables. Is there a simple function I can use to quickly export a string to a text file, and then another function to retrieve that string? Would I be able to utilize Log() for this to export some kind of cheat-code-like string the player can paste into the input box?</p>\n\n",
      "PostDate": "2019-03-19T00:30:15.0162609Z",
      "LastEditDate": "2019-03-19T00:35:22.0294982Z",
      "link": null
    },
    {
      "PostId": "2bd94301-738d-434f-aaa3-f02af9895390",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It would have been nice if the save/load was as simple as it is in Basic:\r\n(open file for saving)\r\nopen \"MyFile.txt\" for output as #1\r\n(save the data you want saved)\r\nprint #1, player.name, player.HP, player.Str….\r\n(close file)\r\nclose #1\r\n\r\n(open file for reading)\r\nopen \"MyFile.txt\" for input as #1\r\n(read the contents)\r\nInput #1, player.name, player.HP, player.Str….\r\n(close file)\r\nclose #1\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>It would have been nice if the save/load was as simple as it is in Basic:<br>\n(open file for saving)<br>\nopen \"MyFile.txt\" for output as #1<br>\n(save the data you want saved)<br>\nprint #1, player.name, player.HP, player.Str….<br>\n(close file)<br>\nclose #1</p>\n<p>(open file for reading)<br>\nopen \"MyFile.txt\" for input as #1<br>\n(read the contents)<br>\nInput #1, player.name, player.HP, player.Str….<br>\n(close file)<br>\nclose #1</p>\n\n",
      "PostDate": "2019-03-19T03:21:01.6429134Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "42f37b90-9f74-4a03-9010-d76cb1bdef8e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "RH, I had a look at your log/transcript system, and as far as I can see it only works for the web player, not the desktop. Is that right?\r\n\r\nThe issue with the desktop version is the version of Chrome is so old, as someone said. Anyone fancy looking at how to update it? We have had issues in the past uploading updates to the web (and manowar is consequently reluctant to make changes!), but this should be only changing the desktop, so that should not be a problem.",
      "EditableFormat": "markdown",
      "HTML": "<p>RH, I had a look at your log/transcript system, and as far as I can see it only works for the web player, not the desktop. Is that right?</p>\n<p>The issue with the desktop version is the version of Chrome is so old, as someone said. Anyone fancy looking at how to update it? We have had issues in the past uploading updates to the web (and manowar is consequently reluctant to make changes!), but this should be only changing the desktop, so that should not be a problem.</p>\n\n",
      "PostDate": "2019-03-19T09:31:29.8635285Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4b4b08be-d1a4-45b0-8a4d-ec00d068f97d",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I had a look at your log/transcript system, and as far as I can see it only works for the web player, not the desktop. Is that right?\r\n\r\nI thought it was the other way around.  (I may be misremembering.  In fact, it's highly probable.)\r\n\r\nhttps://github.com/textadventures/quest/issues/1054#issuecomment-429636361\r\n\r\n---\r\n> The issue with the desktop version is the version of Chrome is so old, as someone said. Anyone fancy looking at how to update it? \r\n\r\nI tried and tried (and tried) to update Chromium, but I don't know enough about anything involved.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I had a look at your log/transcript system, and as far as I can see it only works for the web player, not the desktop. Is that right?</p>\n</blockquote>\n<p>I thought it was the other way around.  (I may be misremembering.  In fact, it's highly probable.)</p>\n<p>https://github.com/textadventures/quest/issues/1054#issuecomment-429636361</p>\n<hr>\n<blockquote>\n<p>The issue with the desktop version is the version of Chrome is so old, as someone said. Anyone fancy looking at how to update it?</p>\n</blockquote>\n<p>I tried and tried (and tried) to update Chromium, but I don't know enough about anything involved.</p>\n\n",
      "PostDate": "2019-03-20T01:12:55.3434196Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ee974b5-924a-49f8-b6f4-6ebae54187d3",
      "UserId": 410093,
      "Username": "Mewmewmew423",
      "AvatarUrl": "https://secure.gravatar.com/avatar/986cff892b720a1186488a189ce8f767?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm interested in this too but I don't understand what is going on in this thread. How can I implement this in my game? I only want to save the character creation variables. GetFileData and GetFileURL don't have a lot of documentation at all. Is there a tutorial on this somewhere? I assume that these let you \"load\" the file, but what is the Quest function for creating/saving an external file?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm interested in this too but I don't understand what is going on in this thread. How can I implement this in my game? I only want to save the character creation variables. GetFileData and GetFileURL don't have a lot of documentation at all. Is there a tutorial on this somewhere? I assume that these let you \"load\" the file, but what is the Quest function for creating/saving an external file?</p>\n\n",
      "PostDate": "2019-03-24T19:26:55.4041005Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bfaff872-3074-4d07-8108-62ebe5a8efa4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> what is the Quest function for creating/saving an external file?\r\n\r\nThere isn't one. `GetFileData` lets you load a file which is zipped up inside the game file.\r\nOn the web version, you can get around this by storing your game data in cookies, which are a function of the web browser rather than Quest itself, or in a LocalStorage (which is like a next-generation cookie). Unfortunately, neither of these work in the desktop version of Quest.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>what is the Quest function for creating/saving an external file?</p>\n</blockquote>\n<p>There isn't one. <code>GetFileData</code> lets you load a file which is zipped up inside the game file.<br>\nOn the web version, you can get around this by storing your game data in cookies, which are a function of the web browser rather than Quest itself, or in a LocalStorage (which is like a next-generation cookie). Unfortunately, neither of these work in the desktop version of Quest.</p>\n\n",
      "PostDate": "2019-03-24T19:41:29.0861585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "228b72a2-8d76-4a4c-95d4-e0dfa17e5c2b",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm working on a way around this. I'm basically conjoining everything as a list and exporting that as a code, which the player can copy/paste into later versions of the game. I'm using Split() to put the code into a NewList() and assign the values using ListItem(). Like:\r\n\r\n```\r\ncode = NewList()\r\ncode = Split (result)\r\nplayer.alias = ListItem (code, 0)\r\nplayer.test = ListItem (code, 1)\r\n```\r\nHowever, this doesn't play well with booleans... It's just assigning them as strings. Is there a way around this instead of checking if each string is a \"true\" or \"false\"? Is there a function for converting strings into booleans?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm working on a way around this. I'm basically conjoining everything as a list and exporting that as a code, which the player can copy/paste into later versions of the game. I'm using Split() to put the code into a NewList() and assign the values using ListItem(). Like:</p>\n<pre><code>code = NewList()\ncode = Split (result)\nplayer.alias = ListItem (code, 0)\nplayer.test = ListItem (code, 1)\n</code></pre>\n<p>However, this doesn't play well with booleans... It's just assigning them as strings. Is there a way around this instead of checking if each string is a \"true\" or \"false\"? Is there a function for converting strings into booleans?</p>\n\n",
      "PostDate": "2019-03-25T08:29:05.4035993Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e14a238-1f9b-4cab-88c1-3b5fe129b7ed",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there a way around this instead of checking if each string is a \"true\" or \"false\"?\r\n\r\n`player.someattribute = (ListItem (code, 5) = \"true\")` is a quick way to convert to a boolean. You can use `(x = y)` as an expression that returns `true` if the values are equal, and `false` otherwise.\r\n\r\nAlternatively, if you know the value in the string is going to be either \"true\" or \"false\", you could do `player.someattribute = eval (ListItem (code, 5))`.  Eval treats a string as an expression, and works equally well for booleans or integers.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there a way around this instead of checking if each string is a \"true\" or \"false\"?</p>\n</blockquote>\n<p><code>player.someattribute = (ListItem (code, 5) = \"true\")</code> is a quick way to convert to a boolean. You can use <code>(x = y)</code> as an expression that returns <code>true</code> if the values are equal, and <code>false</code> otherwise.</p>\n<p>Alternatively, if you know the value in the string is going to be either \"true\" or \"false\", you could do <code>player.someattribute = eval (ListItem (code, 5))</code>.  Eval treats a string as an expression, and works equally well for booleans or integers.</p>\n\n",
      "PostDate": "2019-03-25T10:15:11.7891287Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91ac65c1-29dc-488a-a054-a622dd0ea45d",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, that's very helpful! Thank you.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, that's very helpful! Thank you.</p>\n\n",
      "PostDate": "2019-03-26T04:18:30.5078965Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7d3c7cd3-8593-4b09-9f42-3a97fb884ccf",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm, actually, I get the following error when I use ```player.test = eval (ListItem (code, 1))```:\r\n\r\nError running script: Error compiling expression 'eval (ListItem (code, 1))': FunctionCallElement: Could find not function 'eval(Object)'\r\n\r\nFor reference, player.test is a boolean that is set to \"true\". Is this because the player is pasting the code in as a string and so the value in the list is a string?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm, actually, I get the following error when I use <code>player.test = eval (ListItem (code, 1))</code>:</p>\n<p>Error running script: Error compiling expression 'eval (ListItem (code, 1))': FunctionCallElement: Could find not function 'eval(Object)'</p>\n<p>For reference, player.test is a boolean that is set to \"true\". Is this because the player is pasting the code in as a string and so the value in the list is a string?</p>\n\n",
      "PostDate": "2019-03-26T04:26:31.4942796Z",
      "LastEditDate": "2019-03-26T04:45:00.2561132Z",
      "link": null
    },
    {
      "PostId": "dc4f2ddc-cacb-44a1-95da-f3421f4dd656",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No. Eval expects a string.\r\n\r\nYour error message suggests that the string in `result` doesn't contain a `;`. Split returns a list with a single item, which is number 0. So when you access `ListItem (code, 1)` you get `null`, and eval complains because it only works on strings, and `null` is (technically) an object.",
      "EditableFormat": "markdown",
      "HTML": "<p>No. Eval expects a string.</p>\n<p>Your error message suggests that the string in <code>result</code> doesn't contain a <code>;</code>. Split returns a list with a single item, which is number 0. So when you access <code>ListItem (code, 1)</code> you get <code>null</code>, and eval complains because it only works on strings, and <code>null</code> is (technically) an object.</p>\n\n",
      "PostDate": "2019-03-26T09:51:53.6242587Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0c1c27a3-0481-4624-a1f3-6a14c1da5fd1",
      "UserId": 187141,
      "Username": "Shadecerule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c73b5bde1f86d7098461d3f9889a386f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No, the way I'm printing them is ```player.alias + \";\" + player.test + \";\"```  Also, they're assigned just fine using ListItem() so long as eval() and ToInt() aren't there; they're just being assigned as strings instead of the variable types that I want.\r\n\r\nEDIT: It seems like this works fine when I separate the functions. (For instance, ```player.test = ListItem (code, 1)``` and THEN ```player.test = eval (player.test)```) Does Quest have a problem with embedded functions like ```eval (ListItem (code, 1))```?",
      "EditableFormat": "markdown",
      "HTML": "<p>No, the way I'm printing them is <code>player.alias + \";\" + player.test + \";\"</code>  Also, they're assigned just fine using ListItem() so long as eval() and ToInt() aren't there; they're just being assigned as strings instead of the variable types that I want.</p>\n<p>EDIT: It seems like this works fine when I separate the functions. (For instance, <code>player.test = ListItem (code, 1)</code> and THEN <code>player.test = eval (player.test)</code>) Does Quest have a problem with embedded functions like <code>eval (ListItem (code, 1))</code>?</p>\n\n",
      "PostDate": "2019-03-28T04:33:01.2535716Z",
      "LastEditDate": "2019-03-28T04:35:48.3241286Z",
      "link": null
    },
    {
      "PostId": "a89049a4-7c0a-4b00-b1af-d1fc242a118a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I always forget that.\r\nWith the built-in functions, Quest does strict type checking. So it causes an error because `ListItem` *can* return an object.\r\n\r\nThat's why there is a separate function `StringListItem` which only works with stringlists. `player.test = eval (StringListItem (code, 1))` should work, because `Split` returns a stringlist.\r\n\r\nI was building a similar system, but designed to account for the fact that you might want to add more variables to the system later. So it would generate a string like: `player=42:alias=6:\"John\"strength=2:34someflag=4:true`. In that case, because the string values have quotes around them, you can just use `eval` for all data types. (in this version I ditched the `;` between the different values, and instead put `=6:` or similar before each data value: the number of characters which need to be eval'ed. This means that you don't need to worry about strings which contain a `\"` or `;` when splitting it up, and also produces a string which is slightly more compressible using the javascript version of the gzip algorithm.\r\n\r\nThere is one big problem with systems like this: script attributes. You can't create or modify script attributes on the fly. Your system cannot check whether any `firsttime` blocks have already been run; so you need to avoid using those. And if you have scripts which assign script attributes using the `=>` operator, you won't be able to easily restore that either; unless you have a set of special scripts designed to set those script attributes to the correct values, which is quite a bit of extra work.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I always forget that.<br>\nWith the built-in functions, Quest does strict type checking. So it causes an error because <code>ListItem</code> <em>can</em> return an object.</p>\n<p>That's why there is a separate function <code>StringListItem</code> which only works with stringlists. <code>player.test = eval (StringListItem (code, 1))</code> should work, because <code>Split</code> returns a stringlist.</p>\n<p>I was building a similar system, but designed to account for the fact that you might want to add more variables to the system later. So it would generate a string like: <code>player=42:alias=6:\"John\"strength=2:34someflag=4:true</code>. In that case, because the string values have quotes around them, you can just use <code>eval</code> for all data types. (in this version I ditched the <code>;</code> between the different values, and instead put <code>=6:</code> or similar before each data value: the number of characters which need to be eval'ed. This means that you don't need to worry about strings which contain a <code>\"</code> or <code>;</code> when splitting it up, and also produces a string which is slightly more compressible using the javascript version of the gzip algorithm.</p>\n<p>There is one big problem with systems like this: script attributes. You can't create or modify script attributes on the fly. Your system cannot check whether any <code>firsttime</code> blocks have already been run; so you need to avoid using those. And if you have scripts which assign script attributes using the <code>=&gt;</code> operator, you won't be able to easily restore that either; unless you have a set of special scripts designed to set those script attributes to the correct values, which is quite a bit of extra work.</p>\n\n",
      "PostDate": "2019-03-28T11:01:16.0937258Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
