{
  "Topic": {
    "TopicId": "tajn0436-umm9_eo1sellq",
    "ForumId": "10",
    "Title": "Give as an option in listed menu",
    "LastUpdated": "2019-07-16T21:32:56.2730786Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b3156bb8-24b2-4521-932e-cdee78804971",
      "UserId": 310311,
      "Username": "Feluz",
      "AvatarUrl": "https://secure.gravatar.com/avatar/700064eec72989e2b71e41b6909a2d6a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi there!\r\nI'm having a small problem (more likely I just don't know how to do it). I need my player to give something to an npc and since I like to have all verbs listed, after you click an object or a character, I need the 'give' verb to be there as well. The thing is I want it to be there only after you have already spoke to the npc, so it's like he gave you a quest to bring it. If I use give - as an added verb - it's always there with the thing I want to give to him, although it works only after we spoke to him (as I made a flag).\r\nIs it possible to have this as a verb in menu listed after the player clicks on the npc? Using the Use/Give ?\r\n\r\nI really do hope you got what I mean.\r\nThanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi there!<br>\nI'm having a small problem (more likely I just don't know how to do it). I need my player to give something to an npc and since I like to have all verbs listed, after you click an object or a character, I need the 'give' verb to be there as well. The thing is I want it to be there only after you have already spoke to the npc, so it's like he gave you a quest to bring it. If I use give - as an added verb - it's always there with the thing I want to give to him, although it works only after we spoke to him (as I made a flag).<br>\nIs it possible to have this as a verb in menu listed after the player clicks on the npc? Using the Use/Give ?</p>\n<p>I really do hope you got what I mean.<br>\nThanks in advance!</p>\n\n",
      "PostDate": "2019-07-16T21:32:56.2730786Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "84993888-98d0-4cfd-afa1-34504f65be67",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can add/remove Verbs as you desire:\r\n\r\n(see the first/top: the 'display_verbs', link below)\r\n\r\nthe 'displayverbs' and 'inventoryverbs' built-in String List Attributes controls what Verbs are available \r\n\r\nhttps://docs.textadventures.co.uk/quest/display_verbs.html\r\n\r\nhttps://docs.textadventures.co.uk/quest/using_verbs.html\r\n\r\nhttps://docs.textadventures.co.uk/quest/attributes/displayverbs.html\r\nhttps://docs.textadventures.co.uk/quest/attributes/inventoryverbs.html\r\n\r\n---------\r\n\r\nI think you already figured out how to do the conditional for your 'give' Verb, so, you can also apply a conditional for your 'add/remove' Verbs as well, if you desire\r\n\r\n------\r\n\r\nthere's a 'take' and 'drop' built-in Boolean Attributes that determine whether you got these 'Verbs' toggled on/off (available or not), but I'm not sure if there's the same type of control for the 'use' and 'give' Verbs, as I don't know how they're controlled\r\n\r\n------\r\n\r\nif you need help with anything, let me know",
      "EditableFormat": "markdown",
      "HTML": "<p>you can add/remove Verbs as you desire:</p>\n<p>(see the first/top: the 'display_verbs', link below)</p>\n<p>the 'displayverbs' and 'inventoryverbs' built-in String List Attributes controls what Verbs are available</p>\n<p>https://docs.textadventures.co.uk/quest/display_verbs.html</p>\n<p>https://docs.textadventures.co.uk/quest/using_verbs.html</p>\n<p>https://docs.textadventures.co.uk/quest/attributes/displayverbs.html<br>\nhttps://docs.textadventures.co.uk/quest/attributes/inventoryverbs.html</p>\n<hr>\n<p>I think you already figured out how to do the conditional for your 'give' Verb, so, you can also apply a conditional for your 'add/remove' Verbs as well, if you desire</p>\n<hr>\n<p>there's a 'take' and 'drop' built-in Boolean Attributes that determine whether you got these 'Verbs' toggled on/off (available or not), but I'm not sure if there's the same type of control for the 'use' and 'give' Verbs, as I don't know how they're controlled</p>\n<hr>\n<p>if you need help with anything, let me know</p>\n\n",
      "PostDate": "2019-07-16T22:39:52.8391157Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "742089d0-17dc-4eed-b531-0160b3887145",
      "UserId": 310311,
      "Username": "Feluz",
      "AvatarUrl": "https://secure.gravatar.com/avatar/700064eec72989e2b71e41b6909a2d6a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you so much for help! I managed to do what I wanted.\r\n\r\nAlthough, I was wondering, is it possible for a verb to appear only after specific action?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you so much for help! I managed to do what I wanted.</p>\n<p>Although, I was wondering, is it possible for a verb to appear only after specific action?</p>\n\n",
      "PostDate": "2019-07-17T16:12:50.5781663Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "33e1c6ba-15c9-4eee-93ae-19f667322916",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n-----------\r\n\r\nyes, don't have the Verb initially available for whatever desired the Object(s), and within that specific action(s) (and if also using a conditional, 'if' Script, within the action itself, then have it for that desired conditional outcome: true or false), have the scripting that adds that Verb to the desired Object(s)\r\n\r\n---------\r\n\r\nfor a quick/simple example:\r\n\r\n// easy way to do a: yes->true / no->false, selection/choice from/by the person playing the game, so used it for this example:\r\n\r\nhttps://docs.textadventures.co.uk/quest/scripts/ask.html\r\n\r\n// the 'game' required special Object's 'start' Script Attribute, is the first thing that is run/done/activated/esecuted when you start playing the game (making it good for character creation if doing a RPG and/or as providing an intro displayment, or whatever else, for the game, for some/main examples for it). In the GUI/Editor's left side's \"Tree of Stuff (Elements)\", this is the 'game' that you see, under the broad 'Objects' category/folder, which you click on, so it is highlighted, and than on the right side, select the desired Tab, and customize it how you want (adding scripts to the 'start' Script, not sure what Tab it's within, I don't know from memory/off-hand and don't have quest open):\r\n\r\nhttps://docs.textadventures.co.uk/quest/elements/game.html\r\nhttps://docs.textadventures.co.uk/quest/attributes/start.html\r\n\r\njust using this 'start' Script on the 'game' required special Object, as it's quick and easy usage for this example\r\n\r\nlastly, I added/made/used a Function for the 'action', as it is quick and easy usage for this example\r\n\r\n---------------\r\n\r\n```\r\n<game name=\"NAME_OF_YOUR_GAME\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    example_function\r\n\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"example_object\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"whatever_verb\" type=\"script\">\r\n\r\n    msg (\"WHATEVER_VERB\")\r\n\r\n  </attr>\r\n\r\n  <attr name=\"example_verb\" type=\"script\">\r\n\r\n    msg (\"EXAMPLE_VERB\")\r\n\r\n  </attr>\r\n\r\n  <displayverbs type=\"stringlist\">\r\n\r\n    <value>whatever_verb</value>\r\n\r\n  </displayverbs>\r\n\r\n</object>\r\n\r\n<function name=\"example_function\">\r\n\r\n  ask (\"Want to activate/add 'example_verb' Verb to the 'example_object' Object?\") {\r\n\r\n    if (result) {\r\n\r\n      list add (example_object.displayverbs, \"example_verb\")\r\n      msg (\"The 'example_verb' Verb has been added to the 'example_object' Object\")\r\n\r\n    } else {\r\n\r\n      msg (\"You chose NOT to add the 'example_verb' Verb to the 'example_object' Object\")\r\n\r\n    }\r\n\r\n  }\r\n\r\n</function>\r\n\r\n<verb>\r\n\r\n  <property>whatever_verb</property>\r\n\r\n  <pattern>whatever_verb</pattern>\r\n\r\n</verb>\r\n\r\n<verb>\r\n\r\n  <property>example_verb</property>\r\n\r\n  <pattern>example_verb</pattern>\r\n\r\n</verb>\r\n```\r\n\r\n-------------\r\n\r\nthe actual GAME OBJECT (aka, your game) is the 'asl' tag block, all code (aka, the game's: source code / game-content) must be within the 'asl' tag block, so don't get confused the 'game' required special Object as the actual GAME OBJECT\r\n\r\nbut I leave the 'asl' tag block and the included engine libraries  out in my example due to being lazy, as In just showing the example content for what you want to do\r\n\r\n--------\r\n\r\nhere's what it would really look like:\r\n\r\n(I'm still using an older version, v550, of quest, so yours will be whatever it currently is: 560, 570, 580, 590, 600, 610, etc: the 1's placement is always 0, even though the engine version might be for example: 5.5.72914736285, but you' just have: version=\"550\", as seen in the code below)\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"NAME_OF_YOUR_GAME\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING_FOR_ID_FOR_PUBLISHING_GAME_FOR_QUEST_SERVERS</gameid>\r\n\r\n    <author>BLAH BLAH BLAH</author>\r\n\r\n    <firstpublished>2019</firstpublished>\r\n\r\n    <attr name=\"start\" type=\"script\">\r\n\r\n      example_function\r\n\r\n    </attr>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n  </object>\r\n\r\n  <object name=\"player\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"editor_player\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"example_object\">\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n    <attr name=\"whatever_verb\" type=\"script\">\r\n\r\n      msg (\"WHATEVER_VERB\")\r\n\r\n    </attr>\r\n\r\n    <attr name=\"example_verb\" type=\"script\">\r\n\r\n      msg (\"EXAMPLE_VERB\")\r\n\r\n    </attr>\r\n\r\n    <displayverbs type=\"stringlist\">\r\n\r\n      <value>whatever_verb</value>\r\n\r\n    </displayverbs>\r\n\r\n  </object>\r\n\r\n  <function name=\"example_function\">\r\n\r\n    ask (\"Want to activate/add 'example_verb' Verb to the 'example_object' Object?\") {\r\n\r\n      if (result) {\r\n\r\n        list add (example_object.displayverbs, \"example_verb\")\r\n\r\n        msg (\"The 'example_verb' Verb has been added to the 'example_object' Object\")\r\n\r\n      } else {\r\n\r\n        msg (\"You chose NOT to add the 'example_verb' Verb to the 'example_object' Object\")\r\n\r\n      }\r\n\r\n    }\r\n\r\n  </function>\r\n\r\n  <verb>\r\n\r\n    <property>whatever_verb</property>\r\n\r\n    <pattern>whatever_verb</pattern>\r\n\r\n  </verb>\r\n\r\n  <verb>\r\n\r\n    <property>example_verb</property>\r\n\r\n    <pattern>example_verb</pattern>\r\n\r\n  </verb>\r\n\r\n</asl>\r\n```\r\n\r\nyou can create a new quest (Text Adventure) game, name and save it somewhere you can find it (example: desktop), and in the menu bar at the top, under 'help/about' (I think), chose 'about or quest version' (I think), to see the engine/software/program version of quest that you're using and remember its first two (the 'X') digits (X.X.yyyyy), ALSO highlight, copy, and paste the 'gameid' hash string in a separate location (I'd just use notepad, or a new notepad page, if you used it for your game code),  exit out of quest, right click on it (the 'XXX.aslx' game file itself), and select 'open', and then choose a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc) to get into your entire game code, highlight all of it, delete all of it, highlight, copy, and paste my code above into your blank game file, change the, version=\"XXX\", in the top 'asl' tag line, to match your quest engine/software/program version, ALSO paste in your gameid hash string into its gameid spot (replace my 'SOME_RANDOMLY_GENERATED...\" part of the code (make sure you don't accidentally remove the other symbols and etc stuff), save it, quit out of it, and then double click to open it up, and you can see/study it in the GUI/Editor, and/or try \"playing\" it (not much to play, lol), seeing it in action, lol\r\n\r\n(if it doesn't work... I got mistakes in my code, lol.... fingers crossed that everything is perfect/correct, laughs)",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>yes, don't have the Verb initially available for whatever desired the Object(s), and within that specific action(s) (and if also using a conditional, 'if' Script, within the action itself, then have it for that desired conditional outcome: true or false), have the scripting that adds that Verb to the desired Object(s)</p>\n<hr>\n<p>for a quick/simple example:</p>\n<p>// easy way to do a: yes-&gt;true / no-&gt;false, selection/choice from/by the person playing the game, so used it for this example:</p>\n<p>https://docs.textadventures.co.uk/quest/scripts/ask.html</p>\n<p>// the 'game' required special Object's 'start' Script Attribute, is the first thing that is run/done/activated/esecuted when you start playing the game (making it good for character creation if doing a RPG and/or as providing an intro displayment, or whatever else, for the game, for some/main examples for it). In the GUI/Editor's left side's \"Tree of Stuff (Elements)\", this is the 'game' that you see, under the broad 'Objects' category/folder, which you click on, so it is highlighted, and than on the right side, select the desired Tab, and customize it how you want (adding scripts to the 'start' Script, not sure what Tab it's within, I don't know from memory/off-hand and don't have quest open):</p>\n<p>https://docs.textadventures.co.uk/quest/elements/game.html<br>\nhttps://docs.textadventures.co.uk/quest/attributes/start.html</p>\n<p>just using this 'start' Script on the 'game' required special Object, as it's quick and easy usage for this example</p>\n<p>lastly, I added/made/used a Function for the 'action', as it is quick and easy usage for this example</p>\n<hr>\n<pre><code>&lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    example_function\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"example_object\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"whatever_verb\" type=\"script\"&gt;\n\n    msg (\"WHATEVER_VERB\")\n\n  &lt;/attr&gt;\n\n  &lt;attr name=\"example_verb\" type=\"script\"&gt;\n\n    msg (\"EXAMPLE_VERB\")\n\n  &lt;/attr&gt;\n\n  &lt;displayverbs type=\"stringlist\"&gt;\n\n    &lt;value&gt;whatever_verb&lt;/value&gt;\n\n  &lt;/displayverbs&gt;\n\n&lt;/object&gt;\n\n&lt;function name=\"example_function\"&gt;\n\n  ask (\"Want to activate/add 'example_verb' Verb to the 'example_object' Object?\") {\n\n    if (result) {\n\n      list add (example_object.displayverbs, \"example_verb\")\n      msg (\"The 'example_verb' Verb has been added to the 'example_object' Object\")\n\n    } else {\n\n      msg (\"You chose NOT to add the 'example_verb' Verb to the 'example_object' Object\")\n\n    }\n\n  }\n\n&lt;/function&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;whatever_verb&lt;/property&gt;\n\n  &lt;pattern&gt;whatever_verb&lt;/pattern&gt;\n\n&lt;/verb&gt;\n\n&lt;verb&gt;\n\n  &lt;property&gt;example_verb&lt;/property&gt;\n\n  &lt;pattern&gt;example_verb&lt;/pattern&gt;\n\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>the actual GAME OBJECT (aka, your game) is the 'asl' tag block, all code (aka, the game's: source code / game-content) must be within the 'asl' tag block, so don't get confused the 'game' required special Object as the actual GAME OBJECT</p>\n<p>but I leave the 'asl' tag block and the included engine libraries  out in my example due to being lazy, as In just showing the example content for what you want to do</p>\n<hr>\n<p>here's what it would really look like:</p>\n<p>(I'm still using an older version, v550, of quest, so yours will be whatever it currently is: 560, 570, 580, 590, 600, 610, etc: the 1's placement is always 0, even though the engine version might be for example: 5.5.72914736285, but you' just have: version=\"550\", as seen in the code below)</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING_FOR_ID_FOR_PUBLISHING_GAME_FOR_QUEST_SERVERS&lt;/gameid&gt;\n\n    &lt;author&gt;BLAH BLAH BLAH&lt;/author&gt;\n\n    &lt;firstpublished&gt;2019&lt;/firstpublished&gt;\n\n    &lt;attr name=\"start\" type=\"script\"&gt;\n\n      example_function\n\n    &lt;/attr&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"player\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"example_object\"&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n    &lt;attr name=\"whatever_verb\" type=\"script\"&gt;\n\n      msg (\"WHATEVER_VERB\")\n\n    &lt;/attr&gt;\n\n    &lt;attr name=\"example_verb\" type=\"script\"&gt;\n\n      msg (\"EXAMPLE_VERB\")\n\n    &lt;/attr&gt;\n\n    &lt;displayverbs type=\"stringlist\"&gt;\n\n      &lt;value&gt;whatever_verb&lt;/value&gt;\n\n    &lt;/displayverbs&gt;\n\n  &lt;/object&gt;\n\n  &lt;function name=\"example_function\"&gt;\n\n    ask (\"Want to activate/add 'example_verb' Verb to the 'example_object' Object?\") {\n\n      if (result) {\n\n        list add (example_object.displayverbs, \"example_verb\")\n\n        msg (\"The 'example_verb' Verb has been added to the 'example_object' Object\")\n\n      } else {\n\n        msg (\"You chose NOT to add the 'example_verb' Verb to the 'example_object' Object\")\n\n      }\n\n    }\n\n  &lt;/function&gt;\n\n  &lt;verb&gt;\n\n    &lt;property&gt;whatever_verb&lt;/property&gt;\n\n    &lt;pattern&gt;whatever_verb&lt;/pattern&gt;\n\n  &lt;/verb&gt;\n\n  &lt;verb&gt;\n\n    &lt;property&gt;example_verb&lt;/property&gt;\n\n    &lt;pattern&gt;example_verb&lt;/pattern&gt;\n\n  &lt;/verb&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>you can create a new quest (Text Adventure) game, name and save it somewhere you can find it (example: desktop), and in the menu bar at the top, under 'help/about' (I think), chose 'about or quest version' (I think), to see the engine/software/program version of quest that you're using and remember its first two (the 'X') digits (X.X.yyyyy), ALSO highlight, copy, and paste the 'gameid' hash string in a separate location (I'd just use notepad, or a new notepad page, if you used it for your game code),  exit out of quest, right click on it (the 'XXX.aslx' game file itself), and select 'open', and then choose a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc) to get into your entire game code, highlight all of it, delete all of it, highlight, copy, and paste my code above into your blank game file, change the, version=\"XXX\", in the top 'asl' tag line, to match your quest engine/software/program version, ALSO paste in your gameid hash string into its gameid spot (replace my 'SOME_RANDOMLY_GENERATED...\" part of the code (make sure you don't accidentally remove the other symbols and etc stuff), save it, quit out of it, and then double click to open it up, and you can see/study it in the GUI/Editor, and/or try \"playing\" it (not much to play, lol), seeing it in action, lol</p>\n<p>(if it doesn't work... I got mistakes in my code, lol.... fingers crossed that everything is perfect/correct, laughs)</p>\n\n",
      "PostDate": "2019-07-17T21:36:29.0189641Z",
      "LastEditDate": "2019-07-17T22:23:48.6443532Z",
      "link": null
    }
  ]
}
