{
  "Topic": {
    "TopicId": "5622",
    "ForumId": "10",
    "Title": "Unlockables",
    "LastUpdated": "2015-11-18T17:32:47+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "38699",
      "UserId": 0,
      "Username": "brixujel",
      "UserAvatar": null,
      "UserGravatar": "4f9f52e6b9cf881dba8c737b185b8b3f",
      "EditableText": "would anyone be able to tell me how to write a code for unlocking certain stuff once you get to a certain point in the game? i know that i have to use \n[\n&lt;&lt;if:[passage] is true&gt;&gt; \n]\n but after that point i don't know how to set it up",
      "EditableFormat": "bbcode",
      "HTML": "would anyone be able to tell me how to write a code for unlocking certain stuff once you get to a certain point in the game? i know that i have to use <br/>[<br/>&lt;&lt;if:[passage] is true&gt;&gt; <br/>]<br/> but after that point i don't know how to set it up",
      "PostDate": "2015-11-14T15:04:25+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38721",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "the general concept is to use Attributes for  &quot;state flagging&quot;, and for a simple example (using an Integer Attribute for this example):\n\n(this is a very stupid-lame and poor example, but I think it explains the concept well)\n\nwe've got a teleporter doorway, and depending on your character's level, takes you to different areas of difficulty in the game:\n\nplayer.level = 0 ----&gt; tutorial area-stage-level\nplayer.level = 1 ----&gt; easiest area-stage-level\nplayer.level = 2 ----&gt; a little harder area-stage-level\netc etc etc\n\nso, the 'teleporter doorway' Object's 'teleport' Verb, would need this (for an example in code --- its quick and easy to do-show you with it):\n\n[code:2bf6tk7u]if (player&#46;level = 0)\n{\n        MoveObject(player, stage0)\n}\nelse if (player&#46;level = 1)\n{\n        MoveObject(player, stage1)\n}\n// etc etc etc\nif (player&#46;level = 99)\n{\n         MoveObject(player, stage99)\n}[/code:2bf6tk7u]\n\nand, as I've already revealed, we need an attribute which is checked, and which is changed as you progress in the game, which in this case is:\n\n(Object Name: player)\nAttribute Name: level\nAttribute Type: int (integer)\nAttribute (initial) Value: 0 // or 1\n\nand, let's say instead of your 'level' raising through 'experience' gained from killing monsters in the normal leveling up system, it instead raises as you complete missions~tasks~objectives in the game.\n\nso, let's say in the tutorial area, you kill the tutorial boss, upon doing so, your 'level' Attribute gets raised from '0' to '1', which now allows you to use the teleporter doorway to go to the next area of the game.\n\n--------\n\nthat's the concept of 'state flagging',\n\nbut as to what exactly you want to do, and how you want to implement it, we'll need more communication and information between us, for that, in order to help you with it, we need to know more about what and how you want to do, to give you instructions on setting it up in your game.",
      "EditableFormat": "bbcode",
      "HTML": "the general concept is to use Attributes for  &quot;state flagging&quot;, and for a simple example (using an Integer Attribute for this example):<br/><br/>(this is a very stupid-lame and poor example, but I think it explains the concept well)<br/><br/>we've got a teleporter doorway, and depending on your character's level, takes you to different areas of difficulty in the game:<br/><br/>player.level = 0 ----&gt; tutorial area-stage-level<br/>player.level = 1 ----&gt; easiest area-stage-level<br/>player.level = 2 ----&gt; a little harder area-stage-level<br/>etc etc etc<br/><br/>so, the 'teleporter doorway' Object's 'teleport' Verb, would need this (for an example in code --- its quick and easy to do-show you with it):<br/><br/><pre><code>if (player&#46;level = 0)<br/>{<br/>        MoveObject(player, stage0)<br/>}<br/>else if (player&#46;level = 1)<br/>{<br/>        MoveObject(player, stage1)<br/>}<br/>// etc etc etc<br/>if (player&#46;level = 99)<br/>{<br/>         MoveObject(player, stage99)<br/>}</code></pre><br/><br/>and, as I've already revealed, we need an attribute which is checked, and which is changed as you progress in the game, which in this case is:<br/><br/>(Object Name: player)<br/>Attribute Name: level<br/>Attribute Type: int (integer)<br/>Attribute (initial) Value: 0 // or 1<br/><br/>and, let's say instead of your 'level' raising through 'experience' gained from killing monsters in the normal leveling up system, it instead raises as you complete missions~tasks~objectives in the game.<br/><br/>so, let's say in the tutorial area, you kill the tutorial boss, upon doing so, your 'level' Attribute gets raised from '0' to '1', which now allows you to use the teleporter doorway to go to the next area of the game.<br/><br/>--------<br/><br/>that's the concept of 'state flagging',<br/><br/>but as to what exactly you want to do, and how you want to implement it, we'll need more communication and information between us, for that, in order to help you with it, we need to know more about what and how you want to do, to give you instructions on setting it up in your game.",
      "PostDate": "2015-11-15T19:35:36+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "38746",
      "UserId": 0,
      "Username": "TinFoilMkIV",
      "UserAvatar": null,
      "UserGravatar": "d70c7b1a4be0b3fe6f68912d606f4298",
      "EditableText": "As HK said above, the basic idea is an attribute somewhere you use as a 'flag' that lets the game know when whatever requirements you choose have been met.\n\nYou can really store the attribute anywhere as long as it's not on something that could be potentially destroyed or removed from the game during play. Personally I like creating organization objects outside the play area for such things. For example I would make an object called 'controller objects' then inside that another object called 'unlocks', and all my specific unlock flags would belong to the 'unlocks' object so I know exactly where they are at all times and can avoid any complications with unnecessary interactions.\n\nAnyways then you just need the event in question to alter the attribute on the object to the &quot;unlocked&quot; state. For example when the player completes a puzzle, at some point in the code for completing it you say '[b:uoxavpho]unlocks.PuzzleClear = 1[/b:uoxavpho]' in this case 1 is the value that indicates it was completed. So when you then have something that needs this puzzle cleared to unlock you use '[b:uoxavpho]if (unlocks.PuzzleClear = 1) //do whatever you needed to unlock here[/b:uoxavpho]'.\n\nSo basically you need the &quot;flag&quot; that lets the game know if the requirements were met, then an if statement that looks at this value before the player is  allowed to do whatever it is you wanted unlocked.",
      "EditableFormat": "bbcode",
      "HTML": "As HK said above, the basic idea is an attribute somewhere you use as a 'flag' that lets the game know when whatever requirements you choose have been met.<br/><br/>You can really store the attribute anywhere as long as it's not on something that could be potentially destroyed or removed from the game during play. Personally I like creating organization objects outside the play area for such things. For example I would make an object called 'controller objects' then inside that another object called 'unlocks', and all my specific unlock flags would belong to the 'unlocks' object so I know exactly where they are at all times and can avoid any complications with unnecessary interactions.<br/><br/>Anyways then you just need the event in question to alter the attribute on the object to the &quot;unlocked&quot; state. For example when the player completes a puzzle, at some point in the code for completing it you say '<span style=\"font-weight:bold;\">unlocks.PuzzleClear = 1</span>' in this case 1 is the value that indicates it was completed. So when you then have something that needs this puzzle cleared to unlock you use '<span style=\"font-weight:bold;\">if (unlocks.PuzzleClear = 1) //do whatever you needed to unlock here</span>'.<br/><br/>So basically you need the &quot;flag&quot; that lets the game know if the requirements were met, then an if statement that looks at this value before the player is  allowed to do whatever it is you wanted unlocked.",
      "PostDate": "2015-11-18T17:32:47+00:00",
      "LastEditDate": null
    }
  ]
}
