{
  "Topic": {
    "TopicId": "mvyga0ilrkaznbtqcj_5mg",
    "ForumId": "10",
    "Title": "Trouble with setting variables.",
    "LastUpdated": "2016-07-13T09:53:18.7492223Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "893396eb-a8d2-4ce2-8c17-fcfeedaef4e0",
      "UserId": 240370,
      "Username": "IMainLeeSin",
      "UserAvatar": null,
      "UserGravatar": "e379cdab2addc2f92682b7a9b5e2e823",
      "EditableText": "Hello everyone. So I've been working on character creation for a game project of mine and I'm just stumped on what my problem is.\r\nSo I did the basics - name, gender, et cetera. Now I'm going to set a series of variables that determine the characters stats (Strength, defense, et cetera.) I don't even want to try and make something as complicated as a separate window where you can distribute points or anything, so I go with the idea of essentially using a class system to determine beginning stats.\r\nSo I have the game show a menu with four options. The game then sets player.class to the result of the menu. The script then checks what player.class is, and if it's equal to a certain class then it changes the variables to the appropriate number.\r\nThe problem I'm having is even though I'm setting player.class to the result of the menu, the game complains that said result isn't a \"object or variable.\" \r\nHere's the code snippet:  \r\nShowMenu (\"You were a\", Split (\"Soldier;Scholar;Thief;Gambler\",\";\"), false) {\r\n            player.class = result\r\n            if (player.class = Soldier) {\r\n              str = GetRandomInt(5,10)\r\n              def = GetRandomInt(3,8)\r\n              agl = GetRandomInt(1,5)\r\n              int = GetRandomInt(1,5)\r\n              cha = GetRandomInt(2,5)\r\n              luck = GetRandomInt(1,10)\r\n            }\r\n            if (player.class = Scholar) {\r\n              str = GetRandomInt(1,5)\r\n              def = GetRandomInt(2,5)\r\n              agl = GetRandomInt(3,8)\r\n              int = GetRandomInt(5,10)\r\n              cha = GetRandomInt(1,5)\r\n              luck = GetRandomInt(1,10)\r\n            }\r\n            if (player.class = Thief) {\r\n              str = GetRandomInt(1,5)\r\n              def = GetRandomInt(1,5)\r\n              agl = GetRandomInt(5,10)\r\n              int = GetRandomInt(2,5)\r\n              cha = GetRandomInt(3,8)\r\n              luck = GetRandomInt(1,10)\r\n            }\r\n            if (player.class = Gambler) {\r\n              str = GetRandomInt(1,15)\r\n              def = GetRandomInt(1,15)\r\n              agl = GetRandomInt(1,15)\r\n              int = GetRandomInt(1,15)\r\n              cha = GetRandomInt(1,15)\r\n              luck = GetRandomInt(1,20)\r\n            }\r\n          }",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello everyone. So I've been working on character creation for a game project of mine and I'm just stumped on what my problem is.<br>\nSo I did the basics - name, gender, et cetera. Now I'm going to set a series of variables that determine the characters stats (Strength, defense, et cetera.) I don't even want to try and make something as complicated as a separate window where you can distribute points or anything, so I go with the idea of essentially using a class system to determine beginning stats.<br>\nSo I have the game show a menu with four options. The game then sets player.class to the result of the menu. The script then checks what player.class is, and if it's equal to a certain class then it changes the variables to the appropriate number.<br>\nThe problem I'm having is even though I'm setting player.class to the result of the menu, the game complains that said result isn't a \"object or variable.\"<br>\nHere's the code snippet:<br>\nShowMenu (\"You were a\", Split (\"Soldier;Scholar;Thief;Gambler\",\";\"), false) {<br>\nplayer.class = result<br>\nif (player.class = Soldier) {<br>\nstr = GetRandomInt(5,10)<br>\ndef = GetRandomInt(3,8)<br>\nagl = GetRandomInt(1,5)<br>\nint = GetRandomInt(1,5)<br>\ncha = GetRandomInt(2,5)<br>\nluck = GetRandomInt(1,10)<br>\n}<br>\nif (player.class = Scholar) {<br>\nstr = GetRandomInt(1,5)<br>\ndef = GetRandomInt(2,5)<br>\nagl = GetRandomInt(3,8)<br>\nint = GetRandomInt(5,10)<br>\ncha = GetRandomInt(1,5)<br>\nluck = GetRandomInt(1,10)<br>\n}<br>\nif (player.class = Thief) {<br>\nstr = GetRandomInt(1,5)<br>\ndef = GetRandomInt(1,5)<br>\nagl = GetRandomInt(5,10)<br>\nint = GetRandomInt(2,5)<br>\ncha = GetRandomInt(3,8)<br>\nluck = GetRandomInt(1,10)<br>\n}<br>\nif (player.class = Gambler) {<br>\nstr = GetRandomInt(1,15)<br>\ndef = GetRandomInt(1,15)<br>\nagl = GetRandomInt(1,15)<br>\nint = GetRandomInt(1,15)<br>\ncha = GetRandomInt(1,15)<br>\nluck = GetRandomInt(1,20)<br>\n}<br>\n}</p>\n\n",
      "PostDate": "2016-07-13T09:53:18.7492223Z",
      "LastEditDate": null
    },
    {
      "PostId": "b77bf1f9-6770-4f3b-8161-7f364372b2c8",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "UserAvatar": null,
      "UserGravatar": "ea7c0eff71476cd165c31f2605b2f755",
      "EditableText": "I assume player.class is a string attribute. If so, you need to change your expressions like this: if (player.class = \"Soldier\").",
      "EditableFormat": "markdown",
      "HTML": "<p>I assume player.class is a string attribute. If so, you need to change your expressions like this: if (player.class = \"Soldier\").</p>\n\n",
      "PostDate": "2016-07-13T10:27:16.5870018Z",
      "LastEditDate": null
    },
    {
      "PostId": "bfd853b4-d2b2-4ef6-94ee-a2e0e3395b45",
      "UserId": 251094,
      "Username": "bergedorfcacher",
      "UserAvatar": null,
      "UserGravatar": "ea7c0eff71476cd165c31f2605b2f755",
      "EditableText": "Just read your text again, probably my previous post was beside the point. But anyway: result is a string, so if player.class is NOT a string attribute, that is your problem.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just read your text again, probably my previous post was beside the point. But anyway: result is a string, so if player.class is NOT a string attribute, that is your problem.</p>\n\n",
      "PostDate": "2016-07-13T10:29:56.7027591Z",
      "LastEditDate": null
    },
    {
      "PostId": "02f234cb-4c0e-4b88-bb2a-205e03f89189",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "```\r\nShowMenu (\"You were a \", Split (\"Soldier;Scholar;Thief;Gambler\",\";\"), false) {\r\n  player.class = result\r\n  if (player.class = \"Soldier\") {\r\n    player.str = GetRandomInt(5,10)\r\n    player.def = GetRandomInt(3,8)\r\n    player.agl = GetRandomInt(1,5)\r\n    player.int = GetRandomInt(1,5)\r\n    player.cha = GetRandomInt(2,5)\r\n    player.luck = GetRandomInt(1,10)\r\n  }\r\n  else if (player.class = \"Scholar\") {\r\n    player.str = GetRandomInt(1,5)\r\n    player.def = GetRandomInt(2,5)\r\n    player.agl = GetRandomInt(3,8)\r\n    player.int = GetRandomInt(5,10)\r\n    player.cha = GetRandomInt(1,5)\r\n    player.luck = GetRandomInt(1,10)\r\n  }\r\n  else if (player.class = Thief) {\r\n    player.str = GetRandomInt(1,5)\r\n    player.def = GetRandomInt(1,5)\r\n    player.agl = GetRandomInt(5,10)\r\n    player.int = GetRandomInt(2,5)\r\n    player.cha = GetRandomInt(3,8)\r\n    player.luck = GetRandomInt(1,10)\r\n  }\r\n  else if (player.class = Gambler) {\r\n    player.str = GetRandomInt(1,15)\r\n    player.def = GetRandomInt(1,15)\r\n    player.agl = GetRandomInt(1,15)\r\n    player.int = GetRandomInt(1,15)\r\n    player.cha = GetRandomInt(1,15)\r\n    player.luck = GetRandomInt(1,20)\r\n  }\r\n}\r\n```\r\n\r\n--------\r\n\r\nsee these links if you want more in depth explanation/help:\r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/\r\nhttp://docs.textadventures.co.uk/quest/guides/character_creation.html\r\n\r\nhttp://textadventures.co.uk/forum/samples\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help (if you want to display, via through the built-in 'statusattributes' StringDictionary Attribute ONLY for the 'game' Game Object and the Player Objects such as the default 'player' Player Object, the Attributes in the pane on the right during game play)\r\n\r\n--------\r\n\r\nyou need the double quotes surrounding/encasing your classes (=\"Solder\", =\"Scholar\", =\"Thief\", =\"Gambler\"), as they're (likely) Strings (I doubt you created your Classes as Objects --- if you did, then you do NOT encase them in double quotes, as almost anything not in double quotes is recognized as an Object by the quest program), and anything within double quotes is understood as a String by the quest program.\r\n\r\nconceptual explanation:\r\n\r\n// let's say you selected: player.class = \"soldier\" // (player.class <=== result <=== your menu selected choice: \"Soldier\")\r\n\r\nif (player.class = \"Soldier\") { /* scripting */ }\r\n// if (player.class: \"Soldier\" = \"Soldier\") {\r\n// if (\"Soldier\" = \"Soldier\") // ding ding ding -> TRUE -> then do its scripting\r\n\r\n// let's say you selected: player.class = \"Gambler\" // (player.class <=== result <=== your menu selected choice: \"Gambler\")\r\n\r\nif (player.class = \"Soldier\") { /* scripting */ }\r\n// if (player.class: \"Gambler\" = \"Soldier\") {\r\n// if (\"Gambler\" = \"Soldier\") // bzz -> FALSE -> thus, quest tries the next (else if) condition (see below)\r\n\r\nelse if (player.class = \"Scholar\") { /* scripting */ }\r\n// else if (player.class: \"Gambler\" = \"Scholar\") {\r\n// else if (\"Gambler\" = \"Scholar\") // bzz -> FALSE -> thus, quest tries the next  (else if) condition (see below)\r\n\r\nelse if (player.class = \"Thief\") { /* scripting */ }\r\n// else if (player.class: \"Gambler\" = \"Thief\") {\r\n// else if (\"Gambler\" = \"Thief\") // bzz -> FALSE -> thus, quest tries the next  (else if) condition (see below)\r\n\r\nelse if (player.class = \"Gambler\") { /* scripting */ }\r\n// else if (player.class: \"Gambler\" = \"Gambler\") {\r\n// else if (\"Gambler\" = \"Gambler\") // ding ding ding -> TRUE -> then do its scripting\r\n\r\n-----------\r\n\r\nthe reason you want to do the 'else ifs' (a single scripting block: if~else ifs) vs 'ifs' (multiple scripting blocks):\r\n\r\nif (player.class = \"Soldier\") { /* scripting */ }\r\nif (player.class = \"Scholar\") { /* scripting */ }\r\nif (player.class = \"Thief\") { /* scripting */ }\r\nif (player.class = \"Gambler\") { /* scripting */ }\r\n\r\neven if your chosen 'player.class=Soldier', after it does its scripting, it'll still no matter what, also check if your 'player.class=Soldier' equals: \"Scholar\", \"Thief\", and \"Gambler\". We do NOT want it to be doing these extra (COMPLETELY UN-NEEDED) actions! This is because each 'if' is (a) separate (scripting block) from each other.\r\n\r\nwhereas:\r\n\r\nif (player.class = \"Soldier\") { /* scripting */ }\r\nelse if (player.class = \"Scholar\") { /* scripting */ }\r\nelse if (player.class = \"Thief\") { /* scripting */ }\r\nelse if (player.class = \"Gambler\") { /* scripting */ }\r\n\r\nis a SINGLE SCRIPTING BLOCK: the 'else if (player.class = \"Scholar\")' will ONLY be done if it fails the 'if (player.class = \"Soldier\", the 'else if (player.class = \"Thief\")' will ONLY be done if it fails the 'else if (player.class = \"Scholar\")', and the 'else if (player.class = \"Gambler\")' will only be done if it fails the 'else if (player.class = \"Thief\").\r\n\r\n---------\r\n\r\nhere's the 4 different combinations of scripting blocks for the 'if~else if~else' Script:\r\n\r\n1.\r\n```\r\nif (VARIABLE = VALUE) { /* scripting */ }\r\n```\r\n\r\n2.\r\n```\r\nif (VARIABLE = VALUE) { /* scripting */ }\r\nelse { /* scripting */ }\r\n```\r\n\r\n3.\r\n```\r\nif (VARIABLE = VALUE) { /* scripting */ }\r\nelse if (VARIABLE = VALUE_2) { /* scripting */ }\r\n// etc 'else ifs' as you need/want\r\n```\r\n\r\n4.\r\n```\r\nif (VARIABLE = VALUE) { /* scripting */ }\r\nelse if (VARIABLE = VALUE_2) { /* scripting */ }\r\n// etc 'else ifs' as you need/want\r\nelse { /* scripting */ }\r\n```\r\n\r\n------------------\r\n\r\nVARIABLES (3 types --- keeping this simple):\r\n1. Variables: example: strength = 100\r\n2. Attributes: example: player.strength = 100\r\n3. Arguments/Parameters (this deals with Functions, Commands, Delegates, and whatever else)\r\n\r\nfor the most part, you should be using Attributes and not Variables, because by having the Object contain your Attribute VARIABLE (in code: via using the dot-period connector-attacher, in GUI~Editor via non-scripting: 'whatever' Object -> 'Attributes' Tab -> Attributes -> Add -> set it up, in GUI~Editor via scripting: 'whatever' Element -> run as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> [EXPRESSION] -> set variable OBJECT_NAME.ATTRIBUTE_NAME = [EXPRESSION] VALUE), you're essentially 'saving' that Attribute (and thus its Value --- so long as the Object exists and/or still exists, lol), allowing you to \"load\" (use/re-use) the Attribute (OBJECT_NAME.ATTRIBUTE_NAME) anywhere in your game that you want and as much as you want. Attributes are 'global' VARIABLES\r\n\r\nVariables, on the other hand, only work for that scripting you use them in, as once the scripting is done, they're erased. They're NOT preserved/saved for 'loading'/use/re-use elsewhere in your game. Variables are 'local' VARIABLES.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>ShowMenu (\"You were a \", Split (\"Soldier;Scholar;Thief;Gambler\",\";\"), false) {\n  player.class = result\n  if (player.class = \"Soldier\") {\n    player.str = GetRandomInt(5,10)\n    player.def = GetRandomInt(3,8)\n    player.agl = GetRandomInt(1,5)\n    player.int = GetRandomInt(1,5)\n    player.cha = GetRandomInt(2,5)\n    player.luck = GetRandomInt(1,10)\n  }\n  else if (player.class = \"Scholar\") {\n    player.str = GetRandomInt(1,5)\n    player.def = GetRandomInt(2,5)\n    player.agl = GetRandomInt(3,8)\n    player.int = GetRandomInt(5,10)\n    player.cha = GetRandomInt(1,5)\n    player.luck = GetRandomInt(1,10)\n  }\n  else if (player.class = Thief) {\n    player.str = GetRandomInt(1,5)\n    player.def = GetRandomInt(1,5)\n    player.agl = GetRandomInt(5,10)\n    player.int = GetRandomInt(2,5)\n    player.cha = GetRandomInt(3,8)\n    player.luck = GetRandomInt(1,10)\n  }\n  else if (player.class = Gambler) {\n    player.str = GetRandomInt(1,15)\n    player.def = GetRandomInt(1,15)\n    player.agl = GetRandomInt(1,15)\n    player.int = GetRandomInt(1,15)\n    player.cha = GetRandomInt(1,15)\n    player.luck = GetRandomInt(1,20)\n  }\n}\n</code></pre>\n<hr>\n<p>see these links if you want more in depth explanation/help:</p>\n<p>http://docs.textadventures.co.uk/quest/guides/<br>\nhttp://docs.textadventures.co.uk/quest/guides/character_creation.html</p>\n<p>http://textadventures.co.uk/forum/samples<br>\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk<br>\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help (if you want to display, via through the built-in 'statusattributes' StringDictionary Attribute ONLY for the 'game' Game Object and the Player Objects such as the default 'player' Player Object, the Attributes in the pane on the right during game play)</p>\n<hr>\n<p>you need the double quotes surrounding/encasing your classes (=\"Solder\", =\"Scholar\", =\"Thief\", =\"Gambler\"), as they're (likely) Strings (I doubt you created your Classes as Objects --- if you did, then you do NOT encase them in double quotes, as almost anything not in double quotes is recognized as an Object by the quest program), and anything within double quotes is understood as a String by the quest program.</p>\n<p>conceptual explanation:</p>\n<p>// let's say you selected: player.class = \"soldier\" // (player.class &lt;=== result &lt;=== your menu selected choice: \"Soldier\")</p>\n<p>if (player.class = \"Soldier\") { /* scripting */ }<br>\n// if (player.class: \"Soldier\" = \"Soldier\") {<br>\n// if (\"Soldier\" = \"Soldier\") // ding ding ding -&gt; TRUE -&gt; then do its scripting</p>\n<p>// let's say you selected: player.class = \"Gambler\" // (player.class &lt;=== result &lt;=== your menu selected choice: \"Gambler\")</p>\n<p>if (player.class = \"Soldier\") { /* scripting */ }<br>\n// if (player.class: \"Gambler\" = \"Soldier\") {<br>\n// if (\"Gambler\" = \"Soldier\") // bzz -&gt; FALSE -&gt; thus, quest tries the next (else if) condition (see below)</p>\n<p>else if (player.class = \"Scholar\") { /* scripting */ }<br>\n// else if (player.class: \"Gambler\" = \"Scholar\") {<br>\n// else if (\"Gambler\" = \"Scholar\") // bzz -&gt; FALSE -&gt; thus, quest tries the next  (else if) condition (see below)</p>\n<p>else if (player.class = \"Thief\") { /* scripting */ }<br>\n// else if (player.class: \"Gambler\" = \"Thief\") {<br>\n// else if (\"Gambler\" = \"Thief\") // bzz -&gt; FALSE -&gt; thus, quest tries the next  (else if) condition (see below)</p>\n<p>else if (player.class = \"Gambler\") { /* scripting */ }<br>\n// else if (player.class: \"Gambler\" = \"Gambler\") {<br>\n// else if (\"Gambler\" = \"Gambler\") // ding ding ding -&gt; TRUE -&gt; then do its scripting</p>\n<hr>\n<p>the reason you want to do the 'else ifs' (a single scripting block: if~else ifs) vs 'ifs' (multiple scripting blocks):</p>\n<p>if (player.class = \"Soldier\") { /* scripting <em>/ }<br>\nif (player.class = \"Scholar\") { /</em> scripting <em>/ }<br>\nif (player.class = \"Thief\") { /</em> scripting <em>/ }<br>\nif (player.class = \"Gambler\") { /</em> scripting */ }</p>\n<p>even if your chosen 'player.class=Soldier', after it does its scripting, it'll still no matter what, also check if your 'player.class=Soldier' equals: \"Scholar\", \"Thief\", and \"Gambler\". We do NOT want it to be doing these extra (COMPLETELY UN-NEEDED) actions! This is because each 'if' is (a) separate (scripting block) from each other.</p>\n<p>whereas:</p>\n<p>if (player.class = \"Soldier\") { /* scripting <em>/ }<br>\nelse if (player.class = \"Scholar\") { /</em> scripting <em>/ }<br>\nelse if (player.class = \"Thief\") { /</em> scripting <em>/ }<br>\nelse if (player.class = \"Gambler\") { /</em> scripting */ }</p>\n<p>is a SINGLE SCRIPTING BLOCK: the 'else if (player.class = \"Scholar\")' will ONLY be done if it fails the 'if (player.class = \"Soldier\", the 'else if (player.class = \"Thief\")' will ONLY be done if it fails the 'else if (player.class = \"Scholar\")', and the 'else if (player.class = \"Gambler\")' will only be done if it fails the 'else if (player.class = \"Thief\").</p>\n<hr>\n<p>here's the 4 different combinations of scripting blocks for the 'if~else if~else' Script:</p>\n<ol>\n<li></li>\n</ol>\n<pre><code>if (VARIABLE = VALUE) { /* scripting */ }\n</code></pre>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code>if (VARIABLE = VALUE) { /* scripting */ }\nelse { /* scripting */ }\n</code></pre>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code>if (VARIABLE = VALUE) { /* scripting */ }\nelse if (VARIABLE = VALUE_2) { /* scripting */ }\n// etc 'else ifs' as you need/want\n</code></pre>\n<ol start=\"4\">\n<li></li>\n</ol>\n<pre><code>if (VARIABLE = VALUE) { /* scripting */ }\nelse if (VARIABLE = VALUE_2) { /* scripting */ }\n// etc 'else ifs' as you need/want\nelse { /* scripting */ }\n</code></pre>\n<hr>\n<p>VARIABLES (3 types --- keeping this simple):</p>\n<ol>\n<li>Variables: example: strength = 100</li>\n<li>Attributes: example: player.strength = 100</li>\n<li>Arguments/Parameters (this deals with Functions, Commands, Delegates, and whatever else)</li>\n</ol>\n<p>for the most part, you should be using Attributes and not Variables, because by having the Object contain your Attribute VARIABLE (in code: via using the dot-period connector-attacher, in GUI~Editor via non-scripting: 'whatever' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; set it up, in GUI~Editor via scripting: 'whatever' Element -&gt; run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; [EXPRESSION] -&gt; set variable OBJECT_NAME.ATTRIBUTE_NAME = [EXPRESSION] VALUE), you're essentially 'saving' that Attribute (and thus its Value --- so long as the Object exists and/or still exists, lol), allowing you to \"load\" (use/re-use) the Attribute (OBJECT_NAME.ATTRIBUTE_NAME) anywhere in your game that you want and as much as you want. Attributes are 'global' VARIABLES</p>\n<p>Variables, on the other hand, only work for that scripting you use them in, as once the scripting is done, they're erased. They're NOT preserved/saved for 'loading'/use/re-use elsewhere in your game. Variables are 'local' VARIABLES.</p>\n\n",
      "PostDate": "2016-07-13T12:56:16.43112Z",
      "LastEditDate": "2016-07-13T13:07:01.7672352Z"
    },
    {
      "PostId": "28b39519-3583-4b58-8e3b-c583f7cc2dc1",
      "UserId": 240370,
      "Username": "IMainLeeSin",
      "UserAvatar": null,
      "UserGravatar": "e379cdab2addc2f92682b7a9b5e2e823",
      "EditableText": "Thank you everyone! I just couldn't figure out why it needed my classes to be objects. I've got it fixed now and everything looks nice.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you everyone! I just couldn't figure out why it needed my classes to be objects. I've got it fixed now and everything looks nice.</p>\n\n",
      "PostDate": "2016-07-13T22:39:29.473013Z",
      "LastEditDate": "2016-07-13T23:17:33.9967063Z"
    },
    {
      "PostId": "88960bf6-67f8-49ff-89b4-da8953281acf",
      "UserId": 240370,
      "Username": "IMainLeeSin",
      "UserAvatar": null,
      "UserGravatar": "e379cdab2addc2f92682b7a9b5e2e823",
      "EditableText": "Hey so small question I can't figure out. So in my status bar I want to display the characters health attribute. That's simple enough, but I want the health attribute to = str + def, and when I set the hp attribute to anything other than an integer or a string the status attributes stops displaying it. I'm unsure how I would go about having it display this.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey so small question I can't figure out. So in my status bar I want to display the characters health attribute. That's simple enough, but I want the health attribute to = str + def, and when I set the hp attribute to anything other than an integer or a string the status attributes stops displaying it. I'm unsure how I would go about having it display this.</p>\n\n",
      "PostDate": "2016-07-14T20:23:23.1799667Z",
      "LastEditDate": null
    },
    {
      "PostId": "a4bc262a-c493-4e1f-a8a0-cbcffd26e9d8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "use this link as a guide:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help\r\n\r\nif you still need help and/or don't understand anything, ask.\r\n\r\n--------\r\n\r\nbasically, you need:\r\n\r\n'player.str' to be an Integer Attribute\r\n'player.def' to be an Integer Attribute\r\n'player.health' to be an Integer Attribute\r\n\r\nin/for your special 'changed' Script Attribute:\r\n\r\n('player' Player Object -> 'Attributes' Tab -> Attributes -> Add -> 'set a variable or attribute' Script)\r\n\r\n(Object Name: player)\r\nAttribute Name: changedstr\r\nAttribute Type: script\r\nAttribute Value: (see below)\r\n\r\nrun as script -> add new script -> 'variables' category/section -> 'set a variable or attribute' Script -> [EXPRESSION] -> (see below)\r\n\r\nset variable player.health = [EXPRESSION] player.str + player.def\r\n\r\n('player' Player Object -> 'Attributes' Tab -> Attributes -> Add -> 'set a variable or attribute' Script)\r\n\r\n(Object Name: player)\r\nAttribute Name: changeddef\r\nAttribute Type: script\r\nAttribute Value: (see below)\r\n\r\nrun as script -> add new script -> 'variables' category/section -> 'set a variable or attribute' Script -> [EXPRESSION] -> (see below)\r\n\r\nset variable player.health = [EXPRESSION] player.str + player.def\r\n\r\nand for your 'statusattributes' String Dictionary Attribute (this displays your Attributes during game play in the pane on the right):\r\n\r\n'player' Player Object -> 'Attributes' Tab -> Status Attributes -> Add -> (see below)\r\n\r\nAttribute Name: health\r\nAttribute Field: Health: ! // this displays (for example): Health: 999 // or if you rather, do this: ! Health // which would display (for example): 999 Health\r\n\r\nyou need the special 'changed' Script Attribute, as the 'statusattributes' displayment doesn't update the displayment of its Attributes' Values, but the 'changed' Script causes this effect, so your 'statusattributes' should display the up-to-date/current/correct Values",
      "EditableFormat": "markdown",
      "HTML": "<p>use this link as a guide:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help</p>\n<p>if you still need help and/or don't understand anything, ask.</p>\n<hr>\n<p>basically, you need:</p>\n<p>'player.str' to be an Integer Attribute<br>\n'player.def' to be an Integer Attribute<br>\n'player.health' to be an Integer Attribute</p>\n<p>in/for your special 'changed' Script Attribute:</p>\n<p>('player' Player Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; 'set a variable or attribute' Script)</p>\n<p>(Object Name: player)<br>\nAttribute Name: changedstr<br>\nAttribute Type: script<br>\nAttribute Value: (see below)</p>\n<p>run as script -&gt; add new script -&gt; 'variables' category/section -&gt; 'set a variable or attribute' Script -&gt; [EXPRESSION] -&gt; (see below)</p>\n<p>set variable player.health = [EXPRESSION] player.str + player.def</p>\n<p>('player' Player Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; 'set a variable or attribute' Script)</p>\n<p>(Object Name: player)<br>\nAttribute Name: changeddef<br>\nAttribute Type: script<br>\nAttribute Value: (see below)</p>\n<p>run as script -&gt; add new script -&gt; 'variables' category/section -&gt; 'set a variable or attribute' Script -&gt; [EXPRESSION] -&gt; (see below)</p>\n<p>set variable player.health = [EXPRESSION] player.str + player.def</p>\n<p>and for your 'statusattributes' String Dictionary Attribute (this displays your Attributes during game play in the pane on the right):</p>\n<p>'player' Player Object -&gt; 'Attributes' Tab -&gt; Status Attributes -&gt; Add -&gt; (see below)</p>\n<p>Attribute Name: health<br>\nAttribute Field: Health: ! // this displays (for example): Health: 999 // or if you rather, do this: ! Health // which would display (for example): 999 Health</p>\n<p>you need the special 'changed' Script Attribute, as the 'statusattributes' displayment doesn't update the displayment of its Attributes' Values, but the 'changed' Script causes this effect, so your 'statusattributes' should display the up-to-date/current/correct Values</p>\n\n",
      "PostDate": "2016-07-14T21:16:05.8354546Z",
      "LastEditDate": "2016-07-14T21:21:07.9867022Z"
    }
  ]
}
