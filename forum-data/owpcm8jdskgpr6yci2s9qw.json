{
  "Topic": {
    "TopicId": "owpcm8jdskgpr6yci2s9qw",
    "ForumId": "10",
    "Title": "Hiding a status attribute?",
    "LastUpdated": "2018-05-07T14:06:12.6145793Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6174532c-592a-4e2f-b53a-36b2e35187ef",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Let's say I wanted the \"Health\" status hidden unless I have a certain object in my hands/inventory\r\n\r\nIs it possible to hide a status attribute in the status pane?\r\nAnd showing it again when the player is holding/carrying  certain object?\r\n\r\n\r\nTo try to examplify it:\r\n\r\n>Status pane is empty.\r\nPlayer picks up a box of taco's.\r\nStatus pane contains \"Tacos !/5\"\r\n\r\n<small>(bad example but I'm hungry and could really use a taco right now)</small>",
      "EditableFormat": "markdown",
      "HTML": "<p>Let's say I wanted the \"Health\" status hidden unless I have a certain object in my hands/inventory</p>\n<p>Is it possible to hide a status attribute in the status pane?<br>\nAnd showing it again when the player is holding/carrying  certain object?</p>\n<p>To try to examplify it:</p>\n<blockquote>\n<p>Status pane is empty.<br>\nPlayer picks up a box of taco's.<br>\nStatus pane contains \"Tacos !/5\"</p>\n</blockquote>\n<p><small>(bad example but I'm hungry and could really use a taco right now)</small></p>\n\n",
      "PostDate": "2018-05-07T14:06:12.6145793Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3990a026-d580-4a79-b5a3-aa93f3db8907",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the built-in 'statusattributes' Dictionary Attribute can have its items added/removed:\r\n\r\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk (doesn't use the 'statusattributes', but you can see/study it, as it involves adding/removing items from a dictionary/list, if you need help understanding it, let me know, as it is a bit more advanced coding design, using lists and especially dictionaries)\r\n\r\n-----------------------------------\r\n\r\n```\r\nplayer.Health = 999\r\n\r\nplayer.statusattributes = NewStringDictionary ()\r\n\r\ndictionary add (player.statusattributes, \"Health\", \"Health: \" + !) // not sure on its syntax, as I usually don't script-in (add) the dictionary items... let me know if it doesn't work...\r\n\r\ndictionary remove (player.statusattributes, \"Health\")\r\n\r\n------------\r\n\r\n// as a creation tag, this works (if I don't have any mistakes/typos/etc, lol):\r\n\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"Health\" type=\"int\">999</attr>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>Health</key>\r\n      <value>Health: !</value>\r\n    </item>\r\n\r\n  </statusattributes>\r\n\r\n</object>\r\n```\r\n\r\n-------------\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (Attributes and the 'if' Script usage)\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375 (if you need help with 'statusattributes' usage)\r\n\r\nask if you need help or got any questions",
      "EditableFormat": "markdown",
      "HTML": "<p>the built-in 'statusattributes' Dictionary Attribute can have its items added/removed:</p>\n<p>http://docs.textadventures.co.uk/quest/using_dictionaries.html</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk (doesn't use the 'statusattributes', but you can see/study it, as it involves adding/removing items from a dictionary/list, if you need help understanding it, let me know, as it is a bit more advanced coding design, using lists and especially dictionaries)</p>\n<hr>\n<pre><code>player.Health = 999\n\nplayer.statusattributes = NewStringDictionary ()\n\ndictionary add (player.statusattributes, \"Health\", \"Health: \" + !) // not sure on its syntax, as I usually don't script-in (add) the dictionary items... let me know if it doesn't work...\n\ndictionary remove (player.statusattributes, \"Health\")\n\n------------\n\n// as a creation tag, this works (if I don't have any mistakes/typos/etc, lol):\n\n&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"Health\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;Health&lt;/key&gt;\n      &lt;value&gt;Health: !&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/statusattributes&gt;\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (Attributes and the 'if' Script usage)</p>\n<p>http://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375 (if you need help with 'statusattributes' usage)</p>\n<p>ask if you need help or got any questions</p>\n\n",
      "PostDate": "2018-05-07T14:26:39.9594111Z",
      "LastEditDate": "2018-05-07T14:35:48.3458224Z",
      "link": null
    },
    {
      "PostId": "c9577043-8d18-496f-9566-8e4080bd8a30",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh dear. \r\nDictionaries.\r\nI was hoping I could wait a year or 50 before having to try to wrap my head around those things.\r\nOh dear.\r\n\r\nThank you though HK. I'll see what I can do.\r\nI might end up not doing this xD",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh dear.<br>\nDictionaries.<br>\nI was hoping I could wait a year or 50 before having to try to wrap my head around those things.<br>\nOh dear.</p>\n<p>Thank you though HK. I'll see what I can do.<br>\nI might end up not doing this xD</p>\n\n",
      "PostDate": "2018-05-07T20:39:17.909286Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8dc83932-b41f-4f3c-b135-82b85e4a25fd",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll try to be more specific and, hopefully, it's doable without dictionaries? \r\n\r\nWhen starting this act the status pane looks like this:\r\n>HEALTH: 100%\r\nARMOR: 0\r\nCARRYING: 0/KG\r\nAMMO: 7/7\r\n\r\nThe thing is, I don't want the ```AMMO: 7/7```- part to show up in the pane until the player actually picks up the pistol.\r\n\r\n<br><br><hr>\r\n<small>And, of course, I'd like the ```AMMO: ```to disappear if/when the player drop the pistol.\r\n\r\nSo, if the player do this:\r\n1. Pick up pistol\r\n2. Fire two rounds\r\n3. Drop pistol\r\n4. Pick up pistol\r\n\r\nI want the ammo-part in the status pane to.\r\n1. Be shown with 7/7 rounds in clip\r\n2. Be shown with 5/7 rounds in clip\r\n3. Disappear\r\n4. Be shown with 5/7 rounds in clip </small>\r\n\r\n<hr>\r\n\r\nIs the use of dictionaries still the way to go?\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll try to be more specific and, hopefully, it's doable without dictionaries?</p>\n<p>When starting this act the status pane looks like this:</p>\n<blockquote>\n<p>HEALTH: 100%<br>\nARMOR: 0<br>\nCARRYING: 0/KG<br>\nAMMO: 7/7</p>\n</blockquote>\n<p>The thing is, I don't want the <code>AMMO: 7/7</code>- part to show up in the pane until the player actually picks up the pistol.</p>\n<p><br><br></p><hr><br>\n<small>And, of course, I'd like the <code>AMMO:</code>to disappear if/when the player drop the pistol.<p></p>\n<p>So, if the player do this:</p>\n<ol>\n<li>Pick up pistol</li>\n<li>Fire two rounds</li>\n<li>Drop pistol</li>\n<li>Pick up pistol</li>\n</ol>\n<p>I want the ammo-part in the status pane to.</p>\n</small><ol><small>\n<li>Be shown with 7/7 rounds in clip</li>\n<li>Be shown with 5/7 rounds in clip</li>\n<li>Disappear</li>\n</small><li><small>Be shown with 5/7 rounds in clip </small></li>\n</ol>\n<hr>\n<p>Is the use of dictionaries still the way to go?</p>\n\n",
      "PostDate": "2018-05-07T20:47:05.4379624Z",
      "LastEditDate": "2018-05-07T20:52:29.7287327Z",
      "link": null
    },
    {
      "PostId": "71401cf5-799a-4625-98a3-aec81720e992",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dictionaries are very similar to lists, having both a key plus its corresponding value, rather than just a single string/object.\r\n\r\nRemoving the dictionary key is simple (dictionary you want to remove from, dictionary key):\r\n```dictionary remove (player.statusattributes, \"TacoKey\")```\r\n\r\nAdding the key (plus its value) is simple too (dictionary to add to, dictionary key, key value):\r\n```dictionary add (player.statusattributes, \"TacoKey\", \"Tacos: !/5\")```\r\n\r\nThe only tricky part is keeping the dictionary in the order that you want, since when you add the ```TacoKey``` back, it will be added to the bottom of the dictionary.  To fix that, instead of simply adding back ```TacoKey```, you will recreate the ```player.statusattributes``` dictionary from scratch and add back all the original keys plus the \"Tacokey\", but in the proper order:\r\n```player.statusattributes = NewStringDictionary ()```\r\n```dictionary add (player.statusattributes, \"YourFirstKey\", \"YourFirstValue\")```\r\n```dictionary add (player.statusattributes, \"YourSecondKey\", \"YourSecondValue\")```\r\netc., etc.\r\n\r\nYou can then call function ```UpdateStatusAttributes```if the status pane doesn't update the new dictionary fast enough.  Oh, and I would put all of the dictionary reconstruction part of this in a function so that you easily repeat this.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Dictionaries are very similar to lists, having both a key plus its corresponding value, rather than just a single string/object.</p>\n<p>Removing the dictionary key is simple (dictionary you want to remove from, dictionary key):<br>\n<code>dictionary remove (player.statusattributes, \"TacoKey\")</code></p>\n<p>Adding the key (plus its value) is simple too (dictionary to add to, dictionary key, key value):<br>\n<code>dictionary add (player.statusattributes, \"TacoKey\", \"Tacos: !/5\")</code></p>\n<p>The only tricky part is keeping the dictionary in the order that you want, since when you add the <code>TacoKey</code> back, it will be added to the bottom of the dictionary.  To fix that, instead of simply adding back <code>TacoKey</code>, you will recreate the <code>player.statusattributes</code> dictionary from scratch and add back all the original keys plus the \"Tacokey\", but in the proper order:<br>\n<code>player.statusattributes = NewStringDictionary ()</code><br>\n<code>dictionary add (player.statusattributes, \"YourFirstKey\", \"YourFirstValue\")</code><br>\n<code>dictionary add (player.statusattributes, \"YourSecondKey\", \"YourSecondValue\")</code><br>\netc., etc.</p>\n<p>You can then call function <code>UpdateStatusAttributes</code>if the status pane doesn't update the new dictionary fast enough.  Oh, and I would put all of the dictionary reconstruction part of this in a function so that you easily repeat this.</p>\n\n",
      "PostDate": "2018-05-07T21:20:26.963943Z",
      "LastEditDate": "2018-05-07T21:24:23.1836906Z",
      "link": null
    },
    {
      "PostId": "8273fe59-df92-4379-aac5-86f6a0165aa0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Example game:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"ShowMenu Mayhem\">\r\n    <gameid>cacc93d2-827f-4d01-8ad1-608dee20a069</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <showhealth />\r\n    <showscore />\r\n    <showmoney />\r\n    <start type=\"script\">\r\n      dictionary remove (game.pov.statusattributes, \"ammo\")\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforeenter type=\"script\">\r\n    </beforeenter>\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <ammo type=\"int\">0</ammo>\r\n      <statusattributes type=\"stringdictionary\">\r\n        <item>\r\n          <key>ammo</key>\r\n          <value></value>\r\n        </item>\r\n      </statusattributes>\r\n    </object>\r\n    <object name=\"taco\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <ontake type=\"script\">\r\n        IncreaseObjectCounter (game.pov, \"ammo\")\r\n      </ontake>\r\n      <ondrop type=\"script\">\r\n        DecreaseObjectCounter (game.pov, \"ammo\")\r\n      </ondrop>\r\n    </object>\r\n  </object>\r\n  <turnscript name=\"toggle_ammo_stat_att\">\r\n    <enabled />\r\n    <script><![CDATA[\r\n      if (game.pov.ammo < 1) {\r\n        if (DictionaryContains(game.pov.statusattributes, \"ammo\")) {\r\n          dictionary remove (game.pov.statusattributes, \"ammo\")\r\n        }\r\n      }\r\n      else {\r\n        if (not DictionaryContains(game.pov.statusattributes, \"ammo\")) {\r\n          dictionary add (game.pov.statusattributes, \"ammo\", \"Ammo: !\")\r\n        }\r\n      }\r\n    ]]></script>\r\n  </turnscript>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nEDIT\r\n\r\nAh!  Dcoder posted while I was testing.  Everything he says is true, even though that's not exactly how I'm handling things in my example.",
      "EditableFormat": "markdown",
      "HTML": "<p>Example game:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"ShowMenu Mayhem\"&gt;\n    &lt;gameid&gt;cacc93d2-827f-4d01-8ad1-608dee20a069&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;showhealth /&gt;\n    &lt;showscore /&gt;\n    &lt;showmoney /&gt;\n    &lt;start type=\"script\"&gt;\n      dictionary remove (game.pov.statusattributes, \"ammo\")\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforeenter type=\"script\"&gt;\n    &lt;/beforeenter&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;ammo type=\"int\"&gt;0&lt;/ammo&gt;\n      &lt;statusattributes type=\"stringdictionary\"&gt;\n        &lt;item&gt;\n          &lt;key&gt;ammo&lt;/key&gt;\n          &lt;value&gt;&lt;/value&gt;\n        &lt;/item&gt;\n      &lt;/statusattributes&gt;\n    &lt;/object&gt;\n    &lt;object name=\"taco\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;ontake type=\"script\"&gt;\n        IncreaseObjectCounter (game.pov, \"ammo\")\n      &lt;/ontake&gt;\n      &lt;ondrop type=\"script\"&gt;\n        DecreaseObjectCounter (game.pov, \"ammo\")\n      &lt;/ondrop&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"toggle_ammo_stat_att\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;&lt;![CDATA[\n      if (game.pov.ammo &lt; 1) {\n        if (DictionaryContains(game.pov.statusattributes, \"ammo\")) {\n          dictionary remove (game.pov.statusattributes, \"ammo\")\n        }\n      }\n      else {\n        if (not DictionaryContains(game.pov.statusattributes, \"ammo\")) {\n          dictionary add (game.pov.statusattributes, \"ammo\", \"Ammo: !\")\n        }\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/turnscript&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>EDIT</p>\n<p>Ah!  Dcoder posted while I was testing.  Everything he says is true, even though that's not exactly how I'm handling things in my example.</p>\n\n",
      "PostDate": "2018-05-07T21:28:27.9532148Z",
      "LastEditDate": "2018-05-07T22:32:21.6322617Z",
      "link": null
    },
    {
      "PostId": "70f965e6-cbb6-4024-9ee8-891144c8d64e",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just thought of a problem -- if your ```player.statusattributes``` dictionary has 2 or more keys removed, and you want to reconstruct it but only want to add back the 1 key (like TacoKey).  Then you'll have to create a new function, with the key that you want to add back to be the only parameter:\r\n\r\nIn this function, a second (temporary) string dictionary like ```player.Tempstatusattributes``` is created.  Then use if/then scripts to add to it each key/value in proper order -- if the key IS the parameter (the key that you want to add back) OR already exists in the original ```player.statusattributes```, then add it to the new ```player.Tempstatusattributes```.  This way, keys that have been previously removed from the original ```player.statusattributes``` (and that you want to keep removed) will not be added to the new ```player.Tempstatusattributes```.  When finished with the new dictionary, make ```player.statusattributes = player.Tempstatusattributes``` and then ```UpdateStatusAttributes```.\r\n\r\nIf all this sounds confusing, it is : )  I can explain things more thoroughly if you want, step by step.  It's actually simple in concept, just difficult to describe in words.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just thought of a problem -- if your <code>player.statusattributes</code> dictionary has 2 or more keys removed, and you want to reconstruct it but only want to add back the 1 key (like TacoKey).  Then you'll have to create a new function, with the key that you want to add back to be the only parameter:</p>\n<p>In this function, a second (temporary) string dictionary like <code>player.Tempstatusattributes</code> is created.  Then use if/then scripts to add to it each key/value in proper order -- if the key IS the parameter (the key that you want to add back) OR already exists in the original <code>player.statusattributes</code>, then add it to the new <code>player.Tempstatusattributes</code>.  This way, keys that have been previously removed from the original <code>player.statusattributes</code> (and that you want to keep removed) will not be added to the new <code>player.Tempstatusattributes</code>.  When finished with the new dictionary, make <code>player.statusattributes = player.Tempstatusattributes</code> and then <code>UpdateStatusAttributes</code>.</p>\n<p>If all this sounds confusing, it is : )  I can explain things more thoroughly if you want, step by step.  It's actually simple in concept, just difficult to describe in words.</p>\n\n",
      "PostDate": "2018-05-07T22:13:24.8957707Z",
      "LastEditDate": "2018-05-07T22:18:36.9653906Z",
      "link": null
    },
    {
      "PostId": "e41e5e52-1892-4c00-a3ae-bf4cffcfcf0c",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When constructing the new dictionary ```player.Tempstatusattributes```, put this in your new function for each possible key, in order:\r\n```\r\nif (player.Health = parameter or DictionaryContains(player.statusattributes, \"player.Health\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.Health\", \"HEALTH: !\")\r\n}\r\nif (player.Armor = parameter or DictionaryContains(player.statusattributes, \"player.Armor\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.Armor\", \"ARMOR: !\")\r\n}\r\n```\r\netc., etc.\r\n\r\nWhen finished, ```player.Tempstatusattributes``` should contain all of the keys/values that are currently in ```player.statusattributes```, plus the key/value that you are adding back (through the parameter), but NOT any of the previously removed keys, and all in the correct order.",
      "EditableFormat": "markdown",
      "HTML": "<p>When constructing the new dictionary <code>player.Tempstatusattributes</code>, put this in your new function for each possible key, in order:</p>\n<pre><code>if (player.Health = parameter or DictionaryContains(player.statusattributes, \"player.Health\")) {\n  dictionary add (player.Tempstatusattributes, \"player.Health\", \"HEALTH: !\")\n}\nif (player.Armor = parameter or DictionaryContains(player.statusattributes, \"player.Armor\")) {\n  dictionary add (player.Tempstatusattributes, \"player.Armor\", \"ARMOR: !\")\n}\n</code></pre>\n<p>etc., etc.</p>\n<p>When finished, <code>player.Tempstatusattributes</code> should contain all of the keys/values that are currently in <code>player.statusattributes</code>, plus the key/value that you are adding back (through the parameter), but NOT any of the previously removed keys, and all in the correct order.</p>\n\n",
      "PostDate": "2018-05-07T22:37:15.2969233Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82caec68-81aa-4e0f-8247-e16562bca8f4",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, so I created a function ```RedoStatusPane``` (or whatever) with the parameter ```ReaddedKey```.  The function looks like this:\r\n```\r\nplayer.Tempstatusattributes = NewStringDictionary()\r\nif (player.health = ReaddedKey or DictionaryContains(player.statusattributes, \"player.health\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.health\", \"HEALTH: !\")\r\n}\r\nif (player.armor = ReaddedKey or DictionaryContains(player.statusattributes, \"player.armor\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.armor\", \"ARMOR: !\")\r\n}\r\nif (player.carrying = ReaddedKey or DictionaryContains(player.statusattributes, \"player.carrying\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.carrying\", \"CARRYING: ! kg\")\r\n}\r\nif (player.ammo = ReaddedKey or DictionaryContains(player.statusattributes, \"player.ammo\")) {\r\n  dictionary add (player.Tempstatusattributes, \"player.ammo\", \"AMMO: !/7\")\r\n}\r\nplayer.statusattributes = player.Tempstatusattributes\r\nUpdateStatusAttributes\r\n```\r\n\r\nSo whenever you want to add a key back to the status pane, call this function with the key as the sole parameter.  This is untested, so please complain if I made any errors : )",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, so I created a function <code>RedoStatusPane</code> (or whatever) with the parameter <code>ReaddedKey</code>.  The function looks like this:</p>\n<pre><code>player.Tempstatusattributes = NewStringDictionary()\nif (player.health = ReaddedKey or DictionaryContains(player.statusattributes, \"player.health\")) {\n  dictionary add (player.Tempstatusattributes, \"player.health\", \"HEALTH: !\")\n}\nif (player.armor = ReaddedKey or DictionaryContains(player.statusattributes, \"player.armor\")) {\n  dictionary add (player.Tempstatusattributes, \"player.armor\", \"ARMOR: !\")\n}\nif (player.carrying = ReaddedKey or DictionaryContains(player.statusattributes, \"player.carrying\")) {\n  dictionary add (player.Tempstatusattributes, \"player.carrying\", \"CARRYING: ! kg\")\n}\nif (player.ammo = ReaddedKey or DictionaryContains(player.statusattributes, \"player.ammo\")) {\n  dictionary add (player.Tempstatusattributes, \"player.ammo\", \"AMMO: !/7\")\n}\nplayer.statusattributes = player.Tempstatusattributes\nUpdateStatusAttributes\n</code></pre>\n<p>So whenever you want to add a key back to the status pane, call this function with the key as the sole parameter.  This is untested, so please complain if I made any errors : )</p>\n\n",
      "PostDate": "2018-05-07T23:01:59.0821969Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f9611715-2550-4939-95dd-888b89cac959",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Or you could do like KV's example, where he has a turn script updating the status pane every turn (instead of my manually-called function).",
      "EditableFormat": "markdown",
      "HTML": "<p>Or you could do like KV's example, where he has a turn script updating the status pane every turn (instead of my manually-called function).</p>\n\n",
      "PostDate": "2018-05-07T23:16:33.1328657Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "99c6ec68-83ee-43e4-b0ef-82ae0b25f750",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "An alternative way might be overriding this function:\r\n```\r\n  <function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\">\r\n    if (HasAttribute (game, \"hidestatusattributes\")) {\r\n      if (ListContains (game.hidestatusattributes, attr)) {\r\n        return (\"\")\r\n      }\r\n    }\r\n    if (LengthOf(format) = 0) {\r\n      return (CapFirst(attr) + \": \" + value)\r\n    } else {\r\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\r\n        value = DisplayMoney(value)\r\n      }\r\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\r\n        value = ToString(value)\r\n      }\r\n      else if (TypeOf(value) = \"null\") {\r\n        value = \"\"\r\n      }\r\n      return (Replace(format, \"!\", value))\r\n    }\r\n  </function>\r\n```\r\nThen you can create a list attribute, `game.hidestatusattributes`, containing the names of attributes you don't want to display. Means you're saved the hassle of having to put the dictionaries back in the right order.\r\n\r\n\r\n**OR...**\r\n\r\n```\r\n  <function name=\"UpdateStatusAttributes\">\r\n    <![CDATA[\r\n    status = AddStatusAttributesForElement(\"\", game, game.statusattributes)\r\n    status = AddStatusAttributesForElement(status, game.pov, game.povstatusattributes)\r\n    foreach (obj, ScopeInventory()) {\r\n      if (HasAttribute (obj, \"statusattributes\")) {\r\n        if (GetBoolean (obj, \"worn\") or GetBoolean (obj, \"equipped\")) {\r\n          status = AddStatusAttributesForElement(status, obj, obj.statusattributes)\r\n        }\r\n      }\r\n    }\r\n    status = AddStatusAttributesForElement(status, game.pov, game.pov.statusattributes)\r\n    request (SetStatus, status)\r\n    ]]>\r\n  </function>\r\n```\r\nThis would allow you to give any object a `statusattributes` attribute; specifying attributes which are added to the status pane whenever the player is wearing that item. (statusattributes is still a dictionary, but it doesn't need editing during the game. You can set it up just like you do the main statusattributes, except it will be on the pistol object rather than the game or player)\r\n\r\n(I assume you are able to set a boolean attribute \"equipped\" for an equipped pistol; or use the \"wear\" system to handle weapons; or just set \"equipped\" to be always true if you want the attribute to appear as soon as you pick it up)\r\n\r\n... kind of tempted to make the 'worn' test into `if (GetBoolean (obj, \"worn\") = HasBoolean (obj, \"worn\") and GetBoolean (obj, \"equipped\") = HasBoolean (obj, \"equipped\")) {` ... maybe easier to deal with, but maybe makes the code less human-readable.\r\nWould basically mean \"if this item is wearable or equippable, only show its status attributes when it's worn or equipped.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>An alternative way might be overriding this function:</p>\n<pre><code>  &lt;function name=\"FormatStatusAttribute\" parameters=\"attr, value, format\" type=\"string\"&gt;\n    if (HasAttribute (game, \"hidestatusattributes\")) {\n      if (ListContains (game.hidestatusattributes, attr)) {\n        return (\"\")\n      }\n    }\n    if (LengthOf(format) = 0) {\n      return (CapFirst(attr) + \": \" + value)\n    } else {\n      if (TypeOf(value) = \"int\" and attr = \"money\" and HasString(game, \"moneyformat\")) {\n        value = DisplayMoney(value)\n      }\n      else if (TypeOf(value) = \"int\" or TypeOf(value) = \"double\") {\n        value = ToString(value)\n      }\n      else if (TypeOf(value) = \"null\") {\n        value = \"\"\n      }\n      return (Replace(format, \"!\", value))\n    }\n  &lt;/function&gt;\n</code></pre>\n<p>Then you can create a list attribute, <code>game.hidestatusattributes</code>, containing the names of attributes you don't want to display. Means you're saved the hassle of having to put the dictionaries back in the right order.</p>\n<p><strong>OR...</strong></p>\n<pre><code>  &lt;function name=\"UpdateStatusAttributes\"&gt;\n    &lt;![CDATA[\n    status = AddStatusAttributesForElement(\"\", game, game.statusattributes)\n    status = AddStatusAttributesForElement(status, game.pov, game.povstatusattributes)\n    foreach (obj, ScopeInventory()) {\n      if (HasAttribute (obj, \"statusattributes\")) {\n        if (GetBoolean (obj, \"worn\") or GetBoolean (obj, \"equipped\")) {\n          status = AddStatusAttributesForElement(status, obj, obj.statusattributes)\n        }\n      }\n    }\n    status = AddStatusAttributesForElement(status, game.pov, game.pov.statusattributes)\n    request (SetStatus, status)\n    ]]&gt;\n  &lt;/function&gt;\n</code></pre>\n<p>This would allow you to give any object a <code>statusattributes</code> attribute; specifying attributes which are added to the status pane whenever the player is wearing that item. (statusattributes is still a dictionary, but it doesn't need editing during the game. You can set it up just like you do the main statusattributes, except it will be on the pistol object rather than the game or player)</p>\n<p>(I assume you are able to set a boolean attribute \"equipped\" for an equipped pistol; or use the \"wear\" system to handle weapons; or just set \"equipped\" to be always true if you want the attribute to appear as soon as you pick it up)</p>\n<p>... kind of tempted to make the 'worn' test into <code>if (GetBoolean (obj, \"worn\") = HasBoolean (obj, \"worn\") and GetBoolean (obj, \"equipped\") = HasBoolean (obj, \"equipped\")) {</code> ... maybe easier to deal with, but maybe makes the code less human-readable.<br>\nWould basically mean \"if this item is wearable or equippable, only show its status attributes when it's worn or equipped.\"</p>\n\n",
      "PostDate": "2018-05-07T23:42:24.156018Z",
      "LastEditDate": "2018-05-07T23:54:14.6571849Z",
      "link": null
    },
    {
      "PostId": "9ee4d412-2a1c-424d-9b04-9e372a7f9f52",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n--------------------------------\r\n\r\n**@ CheeseMyBaby:**\r\n\r\n**hopefully this post will help you understand dictionaries (and lists) very well... lol**\r\n\r\n-----------------\r\n\r\nboth lists and dictionaries are essentially 'conversions' or 'input-output' functionalities, to hopefully help you understand them or understand them better, lol\r\n\r\n--------------------------------\r\n\r\n**LISTS**\r\n\r\ninput (index number: 0 to ListCount - 1) ---> output (value attached to that index number)\r\n\r\nexample_stringlist_variable = NewStringList ()\r\nlist add (example_stringlist_variable, \"red\")\r\nlist add (example_stringlist_variable, \"blue\")\r\nlist add (example_stringlist_variable, \"yellow\")\r\n\r\nListCount (and DictionaryCount for dictionaries) is the quantity of items in the list (or dictionary for dictionaries), so remember this difference between ListCount (quantity of items) and the index numbering (starts at 0, not 1, so the last item's index number is: 1 less than the ListCount~quantity-of-items)\r\n\r\na list item: input (an index number: 0 to ListCount - 1) and output (value: a String if using a String List or an Object if using an Object List)\r\n\r\n'red', being the first item added to our list, is given the input of index number '0', and its string value (as I made/am-using a String List) of \"red\", example: String List Item: input (0) = output (\"red\")\r\n\r\n'blue', being the second item added to our list, is given the input of index number '1', and its string value (as I made/am-using) a String List) of \"blue\", example: String List Item: input (1) = output (\"blue\")\r\n\r\n'yellow', being the third (and last in this case/example) item added to our list, is given the input of index number '2' (ListCount of 3 items - 1 = last item's index number), and its string value (as I made/am-using) a String List) of \"yellow\", example: String List Item: input (2) = output (\"yellow\")\r\n\r\nyou do NOT get any control over the inputs for lists (the index number inputs are always ordered from '0' to 'ListCount-1', by their added order to the list and/or by the order within the list if you've removed items)\r\n\r\nOUTPUT = StringListItem (STRING_LIST, INPUT)\r\nSTRING_VALUE = StringListItem (STRING_LIST, index number)\r\n\r\nOUTPUT = ObjectListItem (OBJECT_LIST, INPUT)\r\nOBJECT_VALUE = StringListItem (OBJECT_LIST, index number)\r\n\r\nstring_variable = StringListItem (example_stringlist_variable, 0)\r\nmsg (string_variable)\r\n// displayed output: red\r\n\r\nstring_variable = StringListItem (example_stringlist_variable, 1)\r\nmsg (string_variable)\r\n// displayed output: blue\r\n\r\nstring_variable = StringListItem (example_stringlist_variable, 2)\r\nmsg (string_variable)\r\n// displayed output: yellow\r\n\r\nstring_variable = StringListItem (example_stringlist_variable, 3)\r\nmsg (string_variable)\r\n// displayed output: ERROR (there is NO 4th item in the 'example_stringlist_variable' String List)\r\n\r\n----------------------------------------------\r\n\r\n**DICTIONARIES**\r\n\r\nunlike lists, dictionaries use custom strings (you have full control, deciding what to name your string inputs attached to each of your values, of each item you want to add to your dictionary) for their inputs, so there's NO index numbers at all with dictionaries (unless you make/have your string inputs be numbers, lol, though its still not behaving the same underneath, but it has the same effect in its usage)\r\n\r\ndictionaries do still have a DictionaryCount (as it does still have items, and thus knowing the quantity of items, is still useful, lol), but again, there's no index numbers as inputs, but rather custom strings of your own choosing (and again, these custom strings, can be numbers, so it can act like lists and their index numbers, though technically it's not the same thing going on underneath)\r\n\r\ninput (STRING) ---> output (Value attached to the STRING INPUT)\r\n\r\nString Dictionary's Item: input key (STRING) = output value (STRING)\r\nObject Dictionary's Item: input key (STRING) = output value (OBJECT)\r\nSCRIPT Dictionary's Item: input key (STRING) = output value (SCRIPT)\r\n\r\n----\r\n\r\nwhile the input string and output value are attached together, it's only one way: input to output\r\n\r\nfor a String Dictionary ONLY: if you want to go from 'output to input', then you add another item, with the output STRING now as the input STRING, and the input STRING now as the output STRING\r\n\r\nfor example:\r\n\r\nItem 1: input (\"fire\") = output (\"water\")\r\nItem 2: input (\"water\") = output (\"fire\")\r\n\r\n---\r\n\r\nexample_stringdictionary_variable = NewStringDictionary ()\r\nlist add (example_stringdictionary_variable, \"fire\", \"water\")\r\nlist add (example_stringdictionary_variable, \"water\", \"fire\")\r\nlist add (example_stringdictionary_variable, \"earth\", \"air\")\r\nlist add (example_stringdictionary_variable, \"air\", \"earth\")\r\n\r\n// input (\"fire\") ---> output (\"water\")\r\n// input (\"water\") ---> output (\"fire\")\r\n// input (\"earth\") ---> output (\"air\")\r\n// input (\"air\") ---> output (\"earth\")\r\n\r\nstring_variable = StringDictionaryItem (example_stringdictionary_variable, \"fire\")\r\nmsg (string_variable)\r\n// display output: water\r\n\r\nstring_variable = StringDictionaryItem (example_stringdictionary_variable, \"water\")\r\nmsg (string_variable)\r\n// display output: fire\r\n\r\nstring_variable = StringDictionaryItem (example_stringdictionary_variable, \"earth\")\r\nmsg (string_variable)\r\n// display output: air\r\n\r\nstring_variable = StringDictionaryItem (example_stringdictionary_variable, \"air\")\r\nmsg (string_variable)\r\n// display output: earth\r\n\r\n---------\r\n\r\ndictionaries have a lot of really cool applications...\r\n\r\nthe example I used was opposing magic (as this should be a familar concept/application if you've ever played a rpg or whatever type of game with elemental magic damage types/modifiers)... which can be used for doing more damage (\"weak\" to elemental magic type) or less damage (\"strong\" to elemental magic type) or normal/abosrb/reflect damage functionality\r\n\r\nbut there's tons of other really cool/useful applications with dictionaries (and lists+dictionaries used together too)",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p><strong>@ CheeseMyBaby:</strong></p>\n<p><strong>hopefully this post will help you understand dictionaries (and lists) very well... lol</strong></p>\n<hr>\n<p>both lists and dictionaries are essentially 'conversions' or 'input-output' functionalities, to hopefully help you understand them or understand them better, lol</p>\n<hr>\n<p><strong>LISTS</strong></p>\n<p>input (index number: 0 to ListCount - 1) ---&gt; output (value attached to that index number)</p>\n<p>example_stringlist_variable = NewStringList ()<br>\nlist add (example_stringlist_variable, \"red\")<br>\nlist add (example_stringlist_variable, \"blue\")<br>\nlist add (example_stringlist_variable, \"yellow\")</p>\n<p>ListCount (and DictionaryCount for dictionaries) is the quantity of items in the list (or dictionary for dictionaries), so remember this difference between ListCount (quantity of items) and the index numbering (starts at 0, not 1, so the last item's index number is: 1 less than the ListCount~quantity-of-items)</p>\n<p>a list item: input (an index number: 0 to ListCount - 1) and output (value: a String if using a String List or an Object if using an Object List)</p>\n<p>'red', being the first item added to our list, is given the input of index number '0', and its string value (as I made/am-using a String List) of \"red\", example: String List Item: input (0) = output (\"red\")</p>\n<p>'blue', being the second item added to our list, is given the input of index number '1', and its string value (as I made/am-using) a String List) of \"blue\", example: String List Item: input (1) = output (\"blue\")</p>\n<p>'yellow', being the third (and last in this case/example) item added to our list, is given the input of index number '2' (ListCount of 3 items - 1 = last item's index number), and its string value (as I made/am-using) a String List) of \"yellow\", example: String List Item: input (2) = output (\"yellow\")</p>\n<p>you do NOT get any control over the inputs for lists (the index number inputs are always ordered from '0' to 'ListCount-1', by their added order to the list and/or by the order within the list if you've removed items)</p>\n<p>OUTPUT = StringListItem (STRING_LIST, INPUT)<br>\nSTRING_VALUE = StringListItem (STRING_LIST, index number)</p>\n<p>OUTPUT = ObjectListItem (OBJECT_LIST, INPUT)<br>\nOBJECT_VALUE = StringListItem (OBJECT_LIST, index number)</p>\n<p>string_variable = StringListItem (example_stringlist_variable, 0)<br>\nmsg (string_variable)<br>\n// displayed output: red</p>\n<p>string_variable = StringListItem (example_stringlist_variable, 1)<br>\nmsg (string_variable)<br>\n// displayed output: blue</p>\n<p>string_variable = StringListItem (example_stringlist_variable, 2)<br>\nmsg (string_variable)<br>\n// displayed output: yellow</p>\n<p>string_variable = StringListItem (example_stringlist_variable, 3)<br>\nmsg (string_variable)<br>\n// displayed output: ERROR (there is NO 4th item in the 'example_stringlist_variable' String List)</p>\n<hr>\n<p><strong>DICTIONARIES</strong></p>\n<p>unlike lists, dictionaries use custom strings (you have full control, deciding what to name your string inputs attached to each of your values, of each item you want to add to your dictionary) for their inputs, so there's NO index numbers at all with dictionaries (unless you make/have your string inputs be numbers, lol, though its still not behaving the same underneath, but it has the same effect in its usage)</p>\n<p>dictionaries do still have a DictionaryCount (as it does still have items, and thus knowing the quantity of items, is still useful, lol), but again, there's no index numbers as inputs, but rather custom strings of your own choosing (and again, these custom strings, can be numbers, so it can act like lists and their index numbers, though technically it's not the same thing going on underneath)</p>\n<p>input (STRING) ---&gt; output (Value attached to the STRING INPUT)</p>\n<p>String Dictionary's Item: input key (STRING) = output value (STRING)<br>\nObject Dictionary's Item: input key (STRING) = output value (OBJECT)<br>\nSCRIPT Dictionary's Item: input key (STRING) = output value (SCRIPT)</p>\n<hr>\n<p>while the input string and output value are attached together, it's only one way: input to output</p>\n<p>for a String Dictionary ONLY: if you want to go from 'output to input', then you add another item, with the output STRING now as the input STRING, and the input STRING now as the output STRING</p>\n<p>for example:</p>\n<p>Item 1: input (\"fire\") = output (\"water\")<br>\nItem 2: input (\"water\") = output (\"fire\")</p>\n<hr>\n<p>example_stringdictionary_variable = NewStringDictionary ()<br>\nlist add (example_stringdictionary_variable, \"fire\", \"water\")<br>\nlist add (example_stringdictionary_variable, \"water\", \"fire\")<br>\nlist add (example_stringdictionary_variable, \"earth\", \"air\")<br>\nlist add (example_stringdictionary_variable, \"air\", \"earth\")</p>\n<p>// input (\"fire\") ---&gt; output (\"water\")<br>\n// input (\"water\") ---&gt; output (\"fire\")<br>\n// input (\"earth\") ---&gt; output (\"air\")<br>\n// input (\"air\") ---&gt; output (\"earth\")</p>\n<p>string_variable = StringDictionaryItem (example_stringdictionary_variable, \"fire\")<br>\nmsg (string_variable)<br>\n// display output: water</p>\n<p>string_variable = StringDictionaryItem (example_stringdictionary_variable, \"water\")<br>\nmsg (string_variable)<br>\n// display output: fire</p>\n<p>string_variable = StringDictionaryItem (example_stringdictionary_variable, \"earth\")<br>\nmsg (string_variable)<br>\n// display output: air</p>\n<p>string_variable = StringDictionaryItem (example_stringdictionary_variable, \"air\")<br>\nmsg (string_variable)<br>\n// display output: earth</p>\n<hr>\n<p>dictionaries have a lot of really cool applications...</p>\n<p>the example I used was opposing magic (as this should be a familar concept/application if you've ever played a rpg or whatever type of game with elemental magic damage types/modifiers)... which can be used for doing more damage (\"weak\" to elemental magic type) or less damage (\"strong\" to elemental magic type) or normal/abosrb/reflect damage functionality</p>\n<p>but there's tons of other really cool/useful applications with dictionaries (and lists+dictionaries used together too)</p>\n\n",
      "PostDate": "2018-05-08T04:57:53.8590193Z",
      "LastEditDate": "2018-05-08T05:25:09.9399228Z",
      "link": null
    },
    {
      "PostId": "1669a0c5-80ff-4eb3-b45a-f8a07fb101c2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ DCoder:\r\n\r\nsorting (dictionaries and lists) is Data Structure+Management code design: trees, linked lists, mapping, dictionaries, iterators, etc etc etc\r\n\r\nhttps://en.wikipedia.org/wiki/Tree_(data_structure)\r\nhttps://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html\r\n\r\netc etc etc links of all the other code stuff (mapping, dictionaries, iterators, etc et cetc)",
      "EditableFormat": "markdown",
      "HTML": "<p>@ DCoder:</p>\n<p>sorting (dictionaries and lists) is Data Structure+Management code design: trees, linked lists, mapping, dictionaries, iterators, etc etc etc</p>\n<p>https://en.wikipedia.org/wiki/Tree_(data_structure)<br>\nhttps://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html</p>\n<p>etc etc etc links of all the other code stuff (mapping, dictionaries, iterators, etc et cetc)</p>\n\n",
      "PostDate": "2018-05-08T05:33:27.085234Z",
      "LastEditDate": "2018-05-08T05:38:16.4517618Z",
      "link": null
    },
    {
      "PostId": "5b86389a-3b57-478b-b657-78136e26014e",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow, you guys!\r\nI just arrived at work with a slight fever and too much to do. I'll try to read this through tonight but it sure looks like I'll be able to understand it using all your different kinds of explanation!\r\nSeriously... thanks so much!!\r\n\r\n<small>(It's difficult for me to learn by 'just' reading. Ideal would be to have something sit next to me, talking, explaining and doing. This is why it took me 38 years to even start trying :))</small>",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow, you guys!<br>\nI just arrived at work with a slight fever and too much to do. I'll try to read this through tonight but it sure looks like I'll be able to understand it using all your different kinds of explanation!<br>\nSeriously... thanks so much!!</p>\n<p><small>(It's difficult for me to learn by 'just' reading. Ideal would be to have something sit next to me, talking, explaining and doing. This is why it took me 38 years to even start trying :))</small></p>\n\n",
      "PostDate": "2018-05-08T07:31:23.3178387Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca812a21-377e-4e75-a990-99b5199dc786",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ha!  Hey Cheese, aren't you glad you asked? :D\r\n\r\nHmm, maybe for Quest 5.9 there could be a built-in function to alphabetize or numeralize lists/dictionaries automatically.  Then you could just name your strings starting with the appropriate letter/number, and the list/dictionary would easily arrange itself in the desired order.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ha!  Hey Cheese, aren't you glad you asked? :D</p>\n<p>Hmm, maybe for Quest 5.9 there could be a built-in function to alphabetize or numeralize lists/dictionaries automatically.  Then you could just name your strings starting with the appropriate letter/number, and the list/dictionary would easily arrange itself in the desired order.</p>\n\n",
      "PostDate": "2018-05-08T11:52:31.6402049Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2b0b95ca-ccd6-49de-9304-af90b3312274",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "well.. there's already an internal sorting mechanism (has anyone found this within the core code, or is it deeper within the quest engine or whatever programming itself?)... which annoys everyone, as they find their stuff re-organized around, from how they had it ordered in code or the GUI/Editor... lol\r\n\r\n-----\r\n\r\nbut ya, that's something quest still needs, lol\r\n\r\n(1) sorting (Data Structure/Management code library or quest update)\r\n\r\n(2) and also: input error and exception handling library or quest update, too...\r\n\r\nthese are both on my (far future / my procrastinating: \"I will eventually\"... which usually means: never, lol) \"to do\" lists... lol",
      "EditableFormat": "markdown",
      "HTML": "<p>well.. there's already an internal sorting mechanism (has anyone found this within the core code, or is it deeper within the quest engine or whatever programming itself?)... which annoys everyone, as they find their stuff re-organized around, from how they had it ordered in code or the GUI/Editor... lol</p>\n<hr>\n<p>but ya, that's something quest still needs, lol</p>\n<p>(1) sorting (Data Structure/Management code library or quest update)</p>\n<p>(2) and also: input error and exception handling library or quest update, too...</p>\n<p>these are both on my (far future / my procrastinating: \"I will eventually\"... which usually means: never, lol) \"to do\" lists... lol</p>\n\n",
      "PostDate": "2018-05-08T12:18:09.1103969Z",
      "LastEditDate": "2018-05-08T12:19:41.885886Z",
      "link": null
    },
    {
      "PostId": "b43d90a7-4a29-4809-a31e-1638614e0f9d",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm super glad I asked!!\r\nI made it work. I tried all of the stuff you guys mentioned above and every single thing worked.\r\nI still need to read and try to learn more but yes, I'm making headway (100% because of help from the likes of you guys. Thanks!!)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm super glad I asked!!<br>\nI made it work. I tried all of the stuff you guys mentioned above and every single thing worked.<br>\nI still need to read and try to learn more but yes, I'm making headway (100% because of help from the likes of you guys. Thanks!!)</p>\n\n",
      "PostDate": "2018-05-08T12:33:52.4996067Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
