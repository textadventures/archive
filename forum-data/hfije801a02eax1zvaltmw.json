{
  "Topic": {
    "TopicId": "hfije801a02eax1zvaltmw",
    "ForumId": "10",
    "Title": "Use answer of \"get input\" as an object name",
    "LastUpdated": "2018-10-15T23:47:25.8640063Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3e799b6f-b58e-4fd4-992a-479bc64f637f",
      "UserId": 374698,
      "Username": "EclipseGryph",
      "AvatarUrl": "https://i.imgur.com/Y8OaIJkb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am so sorry for what is most likely a very simple answer, but I have been scouring through the forums and tutorials for hours now with no success.\r\n\r\nI want to make a small hint system for my game. I noticed two potentials - one in the tutorial pages that deals with hints as objects (which I found quite ingenious), and another in the forums from K.V. using a hint dictionary. Both seemed great, although I was imagining something a bit different.\r\n\r\nSince the games I am wanting to make are centered around escape rooms, I wanted the hint system to be similar, where clues are given in relation to the items available. What I want is fairly straightforward - the player types in the command HINT; the game asks what item the player wants a hint on; the player types their response; the game checks to see if the response is, indeed, an object in the game with the \"hint\" attribute, and if it is, it runs the hint script for that object. \r\n\r\nFor the life of me, however, I cannot seem to get that last part to work. I know that the player input to the question is saved as the string \"result\". I know that I can call an item's attribute with \"do\". I know that the code:\r\n\r\n    msg (\"<b><i>What item would you like a hint on?</i></b/>\")\r\n    get input {\r\n      do (smallclock, \"hint\")\r\n    }\r\nwill activate the \"hint\" attribute for the item \"smallclock\" no matter what the user input is. I know that I cannot write:\r\n\r\n    do (result, \"hint\")\r\nbecause that would just look for an object called \"result\". \r\n\r\nI basically just need to know how to call a variable object. I know the answer is staring me right in the face, but I'm too tired to figure it out and I just want to move past this wall because I'm so close to finishing. Thank you for reading!",
      "EditableFormat": "markdown",
      "HTML": "<p>I am so sorry for what is most likely a very simple answer, but I have been scouring through the forums and tutorials for hours now with no success.</p>\n<p>I want to make a small hint system for my game. I noticed two potentials - one in the tutorial pages that deals with hints as objects (which I found quite ingenious), and another in the forums from K.V. using a hint dictionary. Both seemed great, although I was imagining something a bit different.</p>\n<p>Since the games I am wanting to make are centered around escape rooms, I wanted the hint system to be similar, where clues are given in relation to the items available. What I want is fairly straightforward - the player types in the command HINT; the game asks what item the player wants a hint on; the player types their response; the game checks to see if the response is, indeed, an object in the game with the \"hint\" attribute, and if it is, it runs the hint script for that object.</p>\n<p>For the life of me, however, I cannot seem to get that last part to work. I know that the player input to the question is saved as the string \"result\". I know that I can call an item's attribute with \"do\". I know that the code:</p>\n<pre><code>msg (\"&lt;b&gt;&lt;i&gt;What item would you like a hint on?&lt;/i&gt;&lt;/b/&gt;\")\nget input {\n  do (smallclock, \"hint\")\n}\n</code></pre>\n<p>will activate the \"hint\" attribute for the item \"smallclock\" no matter what the user input is. I know that I cannot write:</p>\n<pre><code>do (result, \"hint\")\n</code></pre>\n<p>because that would just look for an object called \"result\".</p>\n<p>I basically just need to know how to call a variable object. I know the answer is staring me right in the face, but I'm too tired to figure it out and I just want to move past this wall because I'm so close to finishing. Thank you for reading!</p>\n\n",
      "PostDate": "2018-10-15T23:47:25.8640063Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f647a46e-aa6f-4adc-b1e9-e65bc8f91e97",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could have:\r\n```\r\n  do (GetObject(result), \"hint\")\r\n```\r\nGetObject turns a string object name into an object. **But**, it will only match the exact object name, not any aliases.\r\n\r\nIt would really be easier to have the player type \"hint clock\" or similar. Then you could make the command's pattern `hint #object#` and Quest will do the hard work of working out which object the player means.\r\n\r\nIf you really want to make a prompt where the player is expected to type the name of an object, you can either use GetObject (in which case they must type the exact name of the object, case sensitive, and the name rather than the alias), or move a command with the pattern `#object#` into the room temporarily, so that the next thing the player types is guaranteed to trigger that command.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could have:</p>\n<pre><code>  do (GetObject(result), \"hint\")\n</code></pre>\n<p>GetObject turns a string object name into an object. <strong>But</strong>, it will only match the exact object name, not any aliases.</p>\n<p>It would really be easier to have the player type \"hint clock\" or similar. Then you could make the command's pattern <code>hint #object#</code> and Quest will do the hard work of working out which object the player means.</p>\n<p>If you really want to make a prompt where the player is expected to type the name of an object, you can either use GetObject (in which case they must type the exact name of the object, case sensitive, and the name rather than the alias), or move a command with the pattern <code>#object#</code> into the room temporarily, so that the next thing the player types is guaranteed to trigger that command.</p>\n\n",
      "PostDate": "2018-10-16T01:33:10.6256007Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff3ccbd5-9402-4338-8bda-970b02b97c21",
      "UserId": 374698,
      "Username": "EclipseGryph",
      "AvatarUrl": "https://i.imgur.com/Y8OaIJkb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you very much for your reply! I was trying GetObject, and completely misunderstood that it could only match the exact object name. Thank you for clarifying why it wasn't working, because I was so confused.\r\n\r\nI am, indeed, using your verb suggestion as my backup. It works fine, of course. One of the reasons that I wanted to try this with a command, however, was because at some point in time I would like to make a \"Hint Button\" on an additional panel in the UI. If they hit the \"HINT\" button, then the command would activate, and the inquiry for what item the player wants a hint on would come up. This would, in my mind, make the experience feel a touch more like an escape room. \r\n\r\nHowever, that being said, you did make me think of a possibility. Would I be able to turn the result of the question in the command HINT into the \"object2\" variable of the verb? For example, the below code checks if a particular call of the HINT verb can work for a specific item. I feel like it should be somehow possible to reassociate the answer stored in the string \"result\" to become \"object2\", just as if the player had typed HINT OBJECT.\r\n\r\n```\r\nif (not IsDefined(\"object2\")) {\r\n  object2 = null\r\n}\r\nswitch (TypeOf(object, this.property)) {\r\n  case (\"script\") {\r\n    if (object2 = null) {\r\n      do (object, this.property)\r\n    }\r\n    else {\r\n      msg (this.multiobjectdefault)\r\n    }\r\n  }\r\n  case (\"string\") {\r\n    if (object2 = null) {\r\n      msg (GetString(object, this.property))\r\n    }\r\n    else {\r\n      msg (this.multiobjectdefault)\r\n    }\r\n  }\r\n  case (\"scriptdictionary\") {\r\n    if (object2 <> null) {\r\n      HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)\r\n    }\r\n    else {\r\n      objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())\r\n      excludelist = NewObjectList()\r\n      list add (excludelist, game.pov)\r\n      list add (excludelist, object)\r\n      candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\n      if (ListCount(candidates) = 0) {\r\n        msg (this.multiobjectmenuempty)\r\n      }\r\n      else {\r\n        game.pov.multiverb = this.property\r\n        game.pov.multiverbobject = object\r\n        game.pov.multiverbobjectdefault = this.multiobjectdefault\r\n        ShowMenu (this.multiobjectmenu, candidates, true) {\r\n          if (result <> null) {\r\n            HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)\r\n            game.pov.multiverb = null\r\n            game.pov.multiverbobject = null\r\n            game.pov.multiverbobjectdefault = null\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  case (\"null\") {\r\n    if (this.defaulttext <> null) {\r\n      msg (this.defaulttext)\r\n    }\r\n    else if (this.defaulttemplate <> null) {\r\n      msg (DynamicTemplate(this.defaulttemplate, object))\r\n    }\r\n    else if (this.defaultexpression <> null) {\r\n      params = NewDictionary()\r\n      dictionary add (params, \"object\", object)\r\n      msg (Eval(this.defaultexpression, params))\r\n    }\r\n    else {\r\n      error (\"No verb response defined\")\r\n    }\r\n  }\r\n  default {\r\n    error (\"No verb response defined\")\r\n  }\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you very much for your reply! I was trying GetObject, and completely misunderstood that it could only match the exact object name. Thank you for clarifying why it wasn't working, because I was so confused.</p>\n<p>I am, indeed, using your verb suggestion as my backup. It works fine, of course. One of the reasons that I wanted to try this with a command, however, was because at some point in time I would like to make a \"Hint Button\" on an additional panel in the UI. If they hit the \"HINT\" button, then the command would activate, and the inquiry for what item the player wants a hint on would come up. This would, in my mind, make the experience feel a touch more like an escape room.</p>\n<p>However, that being said, you did make me think of a possibility. Would I be able to turn the result of the question in the command HINT into the \"object2\" variable of the verb? For example, the below code checks if a particular call of the HINT verb can work for a specific item. I feel like it should be somehow possible to reassociate the answer stored in the string \"result\" to become \"object2\", just as if the player had typed HINT OBJECT.</p>\n<pre><code>if (not IsDefined(\"object2\")) {\n  object2 = null\n}\nswitch (TypeOf(object, this.property)) {\n  case (\"script\") {\n    if (object2 = null) {\n      do (object, this.property)\n    }\n    else {\n      msg (this.multiobjectdefault)\n    }\n  }\n  case (\"string\") {\n    if (object2 = null) {\n      msg (GetString(object, this.property))\n    }\n    else {\n      msg (this.multiobjectdefault)\n    }\n  }\n  case (\"scriptdictionary\") {\n    if (object2 &lt;&gt; null) {\n      HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)\n    }\n    else {\n      objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())\n      excludelist = NewObjectList()\n      list add (excludelist, game.pov)\n      list add (excludelist, object)\n      candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\n      if (ListCount(candidates) = 0) {\n        msg (this.multiobjectmenuempty)\n      }\n      else {\n        game.pov.multiverb = this.property\n        game.pov.multiverbobject = object\n        game.pov.multiverbobjectdefault = this.multiobjectdefault\n        ShowMenu (this.multiobjectmenu, candidates, true) {\n          if (result &lt;&gt; null) {\n            HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)\n            game.pov.multiverb = null\n            game.pov.multiverbobject = null\n            game.pov.multiverbobjectdefault = null\n          }\n        }\n      }\n    }\n  }\n  case (\"null\") {\n    if (this.defaulttext &lt;&gt; null) {\n      msg (this.defaulttext)\n    }\n    else if (this.defaulttemplate &lt;&gt; null) {\n      msg (DynamicTemplate(this.defaulttemplate, object))\n    }\n    else if (this.defaultexpression &lt;&gt; null) {\n      params = NewDictionary()\n      dictionary add (params, \"object\", object)\n      msg (Eval(this.defaultexpression, params))\n    }\n    else {\n      error (\"No verb response defined\")\n    }\n  }\n  default {\n    error (\"No verb response defined\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-10-16T02:10:10.0063831Z",
      "LastEditDate": "2018-10-16T02:11:02.1420151Z",
      "link": null
    }
  ]
}
