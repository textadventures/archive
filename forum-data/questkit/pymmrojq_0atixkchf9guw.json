{
  "Topic": {
    "TopicId": "pymmrojq_0atixkchf9guw",
    "ForumId": "15",
    "Title": "[SOLVED] Can I check if a const exists in JS before declaring it if it does not?",
    "LastUpdated": "2020-12-18T12:44:01.6032739Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "855f3e3f-ed35-469a-a306-583c8951c2f7",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The title speaks for itself.\r\n\r\nI want to do something like:\r\n\r\n```\r\nif (!log) {\r\n  const log = console.log\r\n}\r\n```\r\n\r\nOR\r\n\r\n```\r\nconst log = typeof(log) === 'undefined' ? console.log : ''\r\n```\r\n\r\n---\r\nI know the first one won't work because I couldn't declare a ```const``` in the <code>if</code> block even if ```log``` wasn't already declared, but I really wish I could find a way to do this without: ![image](https://user-images.githubusercontent.com/30656341/102615663-e487b500-40fb-11eb-97c9-514e067fe62d.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>The title speaks for itself.</p>\n<p>I want to do something like:</p>\n<pre><code>if (!log) {\n  const log = console.log\n}\n</code></pre>\n<p>OR</p>\n<pre><code>const log = typeof(log) === 'undefined' ? console.log : ''\n</code></pre>\n<hr>\n<p>I know the first one won't work because I couldn't declare a <code>const</code> in the <code>if</code> block even if <code>log</code> wasn't already declared, but I really wish I could find a way to do this without: <img src=\"https://user-images.githubusercontent.com/30656341/102615663-e487b500-40fb-11eb-97c9-514e067fe62d.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2020-12-18T12:44:01.6032739Z",
      "LastEditDate": "2020-12-18T15:36:48.7210042Z",
      "link": null
    },
    {
      "PostId": "8e9be843-7ccb-47ec-9835-efb7da4a18f9",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The second is the right approach, but I suggest:\r\n```\r\nif (typeof(log) === 'undefined') const log = console.log\r\n```\r\nBut `log` should be defined as per an update earlier today.",
      "EditableFormat": "markdown",
      "HTML": "<p>The second is the right approach, but I suggest:</p>\n<pre><code>if (typeof(log) === 'undefined') const log = console.log\n</code></pre>\n<p>But <code>log</code> should be defined as per an update earlier today.</p>\n\n",
      "PostDate": "2020-12-18T13:32:57.4754933Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "73e46d7b-6108-4d51-9339-c4f4e071cbda",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The second is the right approach, but I suggest [ . . . ]\r\n\r\nCool, cool.\r\n\r\n> ```log``` should be defined as per an update earlier today\r\n\r\nAwesome!\r\n\r\nI was really just using that one as an example while trying to learn how to handle that situtation.  I thought we couldn't declare in an ```if``` block, but I was obviously doing something else wrong in my code.\r\n\r\nThanks!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The second is the right approach, but I suggest [ . . . ]</p>\n</blockquote>\n<p>Cool, cool.</p>\n<blockquote>\n<p><code>log</code> should be defined as per an update earlier today</p>\n</blockquote>\n<p>Awesome!</p>\n<p>I was really just using that one as an example while trying to learn how to handle that situtation.  I thought we couldn't declare in an <code>if</code> block, but I was obviously doing something else wrong in my code.</p>\n<p>Thanks!</p>\n\n",
      "PostDate": "2020-12-18T14:22:29.2412997Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cc1c3e7e-3b2c-4937-a9b4-31d4051c2308",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "UPDATE\r\n\r\n```if (typeof(testRH) === 'undefined'){ const testRH = \"Richard Headkid\"}```\r\n\r\nThat doesn't work if ```testRH``` does not exist.  (It doesn't throw an error either way, though.)\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/102626104-012be900-410c-11eb-8305-255e8cbc1087.png)](https://user-images.githubusercontent.com/30656341/102626104-012be900-410c-11eb-8305-255e8cbc1087.png)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>UPDATE</p>\n<p><code>if (typeof(testRH) === 'undefined'){ const testRH = \"Richard Headkid\"}</code></p>\n<p>That doesn't work if <code>testRH</code> does not exist.  (It doesn't throw an error either way, though.)</p>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/102626104-012be900-410c-11eb-8305-255e8cbc1087.png\"><img src=\"https://user-images.githubusercontent.com/30656341/102626104-012be900-410c-11eb-8305-255e8cbc1087.png\" alt=\"image\"></a></p>\n\n",
      "PostDate": "2020-12-18T14:32:11.3250144Z",
      "LastEditDate": "2020-12-18T14:36:16.6143895Z",
      "link": null
    },
    {
      "PostId": "5714ec42-eb57-4faa-b1ad-442f3b09aef6",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT**\r\n\r\nThis is not it!\r\n\r\nSee [this post](#8d015a24-2a16-4a26-a76e-806fd57d36e9) for the correct answer.\r\n\r\n---\r\nGot it!\r\n\r\n```if (typeof(RH) === 'undefined'){ window[\"RH\"] = \"Richard Headkid\"}```\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/102626478-7697b980-410c-11eb-9f20-d9da59b85e46.png)](https://user-images.githubusercontent.com/30656341/102626478-7697b980-410c-11eb-9f20-d9da59b85e46.png)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT</strong></p>\n<p>This is not it!</p>\n<p>See <a href=\"#8d015a24-2a16-4a26-a76e-806fd57d36e9\">this post</a> for the correct answer.</p>\n<hr>\n<p>Got it!</p>\n<p><code>if (typeof(RH) === 'undefined'){ window[\"RH\"] = \"Richard Headkid\"}</code></p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/102626478-7697b980-410c-11eb-9f20-d9da59b85e46.png\"><img src=\"https://user-images.githubusercontent.com/30656341/102626478-7697b980-410c-11eb-9f20-d9da59b85e46.png\" alt=\"image\"></a></p>\n\n",
      "PostDate": "2020-12-18T14:39:44.8032129Z",
      "LastEditDate": "2020-12-18T15:38:54.8487942Z",
      "link": null
    },
    {
      "PostId": "8d015a24-2a16-4a26-a76e-806fd57d36e9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I know the first one won't work because I couldn't declare a `const` in the `if` block even if `log` wasn't already declared\r\n\r\nWell, you could. But it's scope would be within the `if` block; which isn't particularly useful to you. `const`, like `let`, is scoped within the innermost enclosing `{`block`}`.\r\n\r\nThe simplest way to do this would simply be to make it a variable.\r\n```\r\nif (typeof(RH) === 'undefined'){ RH = \"Richard Headkid\"}\r\n```\r\nWorks fine. It isn't a const, but then neither is your solution.\r\n\r\nIf you really want it to be a constant, you could do something like:\r\n```\r\nif (typeof(RH) === 'undefined'){ Object.defineProperty(this, \"RH\", {value: \"Richard Headkid\", writable: false}); }\r\n```\r\nbut that would be very silly and  possibly confusing, as it doesn't prevent you from accidentally declaring a variable with the same name as the property.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I know the first one won't work because I couldn't declare a <code>const</code> in the <code>if</code> block even if <code>log</code> wasn't already declared</p>\n</blockquote>\n<p>Well, you could. But it's scope would be within the <code>if</code> block; which isn't particularly useful to you. <code>const</code>, like <code>let</code>, is scoped within the innermost enclosing <code>{</code>block<code>}</code>.</p>\n<p>The simplest way to do this would simply be to make it a variable.</p>\n<pre><code>if (typeof(RH) === 'undefined'){ RH = \"Richard Headkid\"}\n</code></pre>\n<p>Works fine. It isn't a const, but then neither is your solution.</p>\n<p>If you really want it to be a constant, you could do something like:</p>\n<pre><code>if (typeof(RH) === 'undefined'){ Object.defineProperty(this, \"RH\", {value: \"Richard Headkid\", writable: false}); }\n</code></pre>\n<p>but that would be very silly and  possibly confusing, as it doesn't prevent you from accidentally declaring a variable with the same name as the property.</p>\n\n",
      "PostDate": "2020-12-18T15:20:56.1101474Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cf5c1f85-c03c-4ddc-97b0-bda8743cd081",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thinking about it...\r\n\r\n```\r\nif (typeof(testRH) === 'undefined'){ const testRH = \"Richard Headkid\"}\r\n```\r\nThis will create a constant, testRH, that exists only inside the curly braces, so not a lot of use.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thinking about it...</p>\n<pre><code>if (typeof(testRH) === 'undefined'){ const testRH = \"Richard Headkid\"}\n</code></pre>\n<p>This will create a constant, testRH, that exists only inside the curly braces, so not a lot of use.</p>\n\n",
      "PostDate": "2020-12-18T15:27:23.4388524Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2428cce-de97-4402-a022-154297410439",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ha.\r\n\r\nI checked if it existed, but not if it could be modified.\r\n\r\nThis is the solution:\r\n\r\n```\r\nif (typeof(RH) === 'undefined'){ Object.defineProperty(this, \"RH\", {value: \"Richard Headkid\", writable: false}); }\r\n```\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/102632013-0ee56c80-4114-11eb-8119-178b04879a3d.png)](https://user-images.githubusercontent.com/30656341/102632013-0ee56c80-4114-11eb-8119-178b04879a3d.png)\r\n\r\n---\r\nWhoo-hoo!\r\n\r\nThanks, guys!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ha.</p>\n<p>I checked if it existed, but not if it could be modified.</p>\n<p>This is the solution:</p>\n<pre><code>if (typeof(RH) === 'undefined'){ Object.defineProperty(this, \"RH\", {value: \"Richard Headkid\", writable: false}); }\n</code></pre>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/102632013-0ee56c80-4114-11eb-8119-178b04879a3d.png\"><img src=\"https://user-images.githubusercontent.com/30656341/102632013-0ee56c80-4114-11eb-8119-178b04879a3d.png\" alt=\"image\"></a></p>\n<hr>\n<p>Whoo-hoo!</p>\n<p>Thanks, guys!</p>\n\n",
      "PostDate": "2020-12-18T15:35:48.2803074Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d5a2953-e422-4915-ab90-eaea5d288e3f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow! `Object.defineProperty`  is useful for more than just tracking changes :p\r\n\r\n(Thinking about it… if I was trying to make a library that  would me to convert an old `.aslx` file to work with this new engine, how would be best to implement changescripts? Would I need to abuse `defineProperty` excessively, or is there some system already implemented that would take care of it?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow! <code>Object.defineProperty</code>  is useful for more than just tracking changes :p</p>\n<p>(Thinking about it… if I was trying to make a library that  would me to convert an old <code>.aslx</code> file to work with this new engine, how would be best to implement changescripts? Would I need to abuse <code>defineProperty</code> excessively, or is there some system already implemented that would take care of it?)</p>\n\n",
      "PostDate": "2020-12-18T17:41:16.3756266Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7de202b7-4b7d-4415-ad20-a0e665879111",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is nothing currently implemented like that. I was not aware `Object.defineProperty` could be used like that.",
      "EditableFormat": "markdown",
      "HTML": "<p>There is nothing currently implemented like that. I was not aware <code>Object.defineProperty</code> could be used like that.</p>\n\n",
      "PostDate": "2020-12-18T18:03:49.7119449Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ed430e09-2c0b-4d91-8e64-922b3c861e09",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">  how would be best to implement changescripts?\r\n\r\nPixie says:\r\n\r\nhttps://github.com/ThePix/QuestJS/wiki/Outstanding-Features#change-scripts\r\n\r\n---\r\n**EDIT**\r\n\r\nOh.  Pixie actually said something in response to that before my page refreshed.  (Hehehe.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>how would be best to implement changescripts?</p>\n</blockquote>\n<p>Pixie says:</p>\n<p>https://github.com/ThePix/QuestJS/wiki/Outstanding-Features#change-scripts</p>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>Oh.  Pixie actually said something in response to that before my page refreshed.  (Hehehe.)</p>\n\n",
      "PostDate": "2020-12-18T18:16:06.2857746Z",
      "LastEditDate": "2020-12-18T18:17:41.6738172Z",
      "link": null
    },
    {
      "PostId": "98d14969-e04f-4df8-8387-01d044e49052",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If something could be done that would be great because, as mrangel says, it would help when translating from 5 to 6. However, it would be a fairly fundamental change at this stage, with a lot of changes across the whole system.",
      "EditableFormat": "markdown",
      "HTML": "<p>If something could be done that would be great because, as mrangel says, it would help when translating from 5 to 6. However, it would be a fairly fundamental change at this stage, with a lot of changes across the whole system.</p>\n\n",
      "PostDate": "2020-12-18T19:28:32.013871Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "809fd470-fdcd-43bc-9212-93a2512139a2",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I poked around at it for a minute, but I couldn't get anything but errors.\r\n\r\nI wonder how using ```Object.defineProperty``` for a change  script on something like ```game.player.hitpoints``` would work . . .\r\n\r\nI read the Mozilla page.  I sort of understand setters and getters (I think), until they start criss-crossing them and doing crazy stuff.  That site tends to go from 0 to 50, leaving me on the side of the road.",
      "EditableFormat": "markdown",
      "HTML": "<p>I poked around at it for a minute, but I couldn't get anything but errors.</p>\n<p>I wonder how using <code>Object.defineProperty</code> for a change  script on something like <code>game.player.hitpoints</code> would work . . .</p>\n<p>I read the Mozilla page.  I sort of understand setters and getters (I think), until they start criss-crossing them and doing crazy stuff.  That site tends to go from 0 to 50, leaving me on the side of the road.</p>\n\n",
      "PostDate": "2020-12-18T19:35:02.7695092Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "949179c6-4801-48f1-ab66-d69c013b2cef",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd probably do something like:\r\n```\r\nfunction enableChangescripts (obj, attr, script=null) {\r\n  // don't define the property twice\r\n  if (!obj.hasOwnProperty(\"_real_\"+attr)) {\r\n    // preserve the existing value of the attribute if it has one\r\n    // and make this property non-enumerable so it doesn't show up in `foreach`\r\n    Object.defineProperty(obj, \"_real_\"+attr, {value: (obj.hasOwnProperty(attr) ? obj[attr] : undefined), writable: true, enumerable: false});\r\n    Object.defineProperty(obj, attr,  {\r\n      get: function  () {\r\n        return (this[\"_real_\"+attr]);\r\n      },\r\n      set: function (val) {\r\n        var oldvalue = this[\"_real_\"+attr];\r\n        this[\"_real_\"+attr] = val;\r\n        if (typeof this[\"changed\"+attr] === 'function') {\r\n          this[\"changed\"+attr].call(this, oldvalue);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  if (typeof script === 'function') {\r\n    this[\"changed\"+attr] = script;\r\n  }\r\n}\r\n```\r\n(simplest construction I can see to make it work like it does in 5.8; takes an object reference, an attribute name, and optionally a changescript. Then makes an underlying \"real\" property that would be something like `game.player._real_hitpoints`. You can bypass the changescripts by setting the real property directly. The real property doesn't show up if you foreach over the object or use `.keys()`/`.values()` because it isn't enumerable; but you can find it using `Object.getOwnPropertyNames(obj)` for the purposes of loading/saving)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd probably do something like:</p>\n<pre><code>function enableChangescripts (obj, attr, script=null) {\n  // don't define the property twice\n  if (!obj.hasOwnProperty(\"_real_\"+attr)) {\n    // preserve the existing value of the attribute if it has one\n    // and make this property non-enumerable so it doesn't show up in `foreach`\n    Object.defineProperty(obj, \"_real_\"+attr, {value: (obj.hasOwnProperty(attr) ? obj[attr] : undefined), writable: true, enumerable: false});\n    Object.defineProperty(obj, attr,  {\n      get: function  () {\n        return (this[\"_real_\"+attr]);\n      },\n      set: function (val) {\n        var oldvalue = this[\"_real_\"+attr];\n        this[\"_real_\"+attr] = val;\n        if (typeof this[\"changed\"+attr] === 'function') {\n          this[\"changed\"+attr].call(this, oldvalue);\n        }\n      }\n    });\n  }\n  if (typeof script === 'function') {\n    this[\"changed\"+attr] = script;\n  }\n}\n</code></pre>\n<p>(simplest construction I can see to make it work like it does in 5.8; takes an object reference, an attribute name, and optionally a changescript. Then makes an underlying \"real\" property that would be something like <code>game.player._real_hitpoints</code>. You can bypass the changescripts by setting the real property directly. The real property doesn't show up if you foreach over the object or use <code>.keys()</code>/<code>.values()</code> because it isn't enumerable; but you can find it using <code>Object.getOwnPropertyNames(obj)</code> for the purposes of loading/saving)</p>\n\n",
      "PostDate": "2020-12-18T20:35:33.5554766Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
