{
  "Topic": {
    "TopicId": "gr5oz53eok68kmjoy0jd6a",
    "ForumId": "15",
    "Title": "Something I've learned about Event Listeners",
    "LastUpdated": "2024-08-25T08:50:59.5096036Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "32ff6f33-c661-49b8-8808-b44099a03912",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So it all started when I wanted to use the Character Creation code from https://github.com/ThePix/QuestJS/wiki/Character-Creation (specifically from the Further Customisation section) to create my character and have events listening out for button clicks on the dialog form. \r\n\r\n```\r\nfunction changePlayerInfo() {\r\n    const diag = document.querySelector(\"#dialog\")\r\n// Do some HTML stuff\r\n    document.querySelector(\"#dialog-button\").addEventListener('click', settings.setUpDialogClick)\r\n\r\n```\r\n\r\nIf I attempted to reuse the dialog form again with a new popup window I kept getting weird errors about the function settings.setUpDialogClick even though I had registered a completely different function with my form's dialog window, that's because the original Event Listener registered on the settings dialog was actually not gone! So that led me down into a research rabbit hole about how to remove an Event Listener and how Event Listeners work in general.\r\n\r\nThere are 2 methods for removing an Event Listener, the first and probably easiest is to set the 'once' property as you add it:\r\n\r\n```\r\ndocument.querySelector(\"#dialog-button\").addEventListener('click', settings.setUpDialogClick, { once: true })\r\n```\r\nThis means it is self destructive after it is called, intended as a one time only use action which is suitable for this Character Creation process.\r\n\r\nNow obviously if you intend to reuse a popup form you can still do it with this method if the button's purpose is to close the window but it is not such a good idea if it's meant to be used for multiple uses to capture input from the user while the form is still active, that leads to the second method of removal, something that should be done once the form is being closed at the very least.\r\n\r\n```\r\ndocument.querySelector(\"#dialog-button\").removeEventListener('click', settings.setUpDialogClick)\r\n```\r\nThe removeEventListener will only work as long as the type 'click' and the listener object 'settings.setUpDialogClick' are exactly the same as when you registered it, so it does get a little trickier to successfully remove it if you don't get these things correct.\r\n\r\nOne method I've tried was to use the line above directly inside of the code of the function in settings.setUpDialogClick but it wasn't useful for passing in any parameters that the function you use might have beyond the diag, for that we need a callback.\r\n\r\n```\r\nfunction dialogOkClick(diag, var1, var2) {\r\n    // Return to main game\r\n}\r\n\r\nfunction popupDialog() {\r\nconst diag = document.querySelector(\"#dialog\")\r\nvar newVar1\r\nvar newVar2\r\n\r\n// Using callback () => { function(var1, var2) } I can pass in variables from this function popupDialog into the callback function dialogOkClick\r\ndocument.querySelector(\"#dialog-button\").addEventListener('click', () => { dialogOkClick(diag, newVar1, newVar2) }, { once: true})\r\n}\r\n```\r\nNow I can both delete my event listener after I am done with it and also customize what input variables I can pass in to the registered event function.\r\n\r\nIf you won't use once, then we need to keep a reference to the anonymous listener to be able to remove it later manually.\r\n\r\n```\r\nlet lastListener;\r\n\r\nfunction popupDialog(oMainObj) {\r\n  lastListener = () => myFunction(diag, oMainObj);\r\n  document.querySelector(\"#dialog-button\").addEventListener('click', lastListener);\r\n}\r\n\r\nfunction myFunction(diag, oMainObj) {\r\n   bla()\r\n}\r\n\r\nfunction bla() {\r\n  // Remove the listener wherever you want\r\n  document.querySelector(\"#dialog-button\").removeEventListener('click', lastListener);\r\n}\r\n```\r\n\r\nI hope that this  is useful to someone else as they might come across the same issue I did and not know how to resolve it, and if someone can update the linked page above so it at least uses the { once: true} method that might avoid further confusion for new programmers following the guide that like to use it as a template for further experimentation like I did.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>So it all started when I wanted to use the Character Creation code from https://github.com/ThePix/QuestJS/wiki/Character-Creation (specifically from the Further Customisation section) to create my character and have events listening out for button clicks on the dialog form.</p>\n<pre><code>function changePlayerInfo() {\n    const diag = document.querySelector(\"#dialog\")\n// Do some HTML stuff\n    document.querySelector(\"#dialog-button\").addEventListener('click', settings.setUpDialogClick)\n\n</code></pre>\n<p>If I attempted to reuse the dialog form again with a new popup window I kept getting weird errors about the function settings.setUpDialogClick even though I had registered a completely different function with my form's dialog window, that's because the original Event Listener registered on the settings dialog was actually not gone! So that led me down into a research rabbit hole about how to remove an Event Listener and how Event Listeners work in general.</p>\n<p>There are 2 methods for removing an Event Listener, the first and probably easiest is to set the 'once' property as you add it:</p>\n<pre><code>document.querySelector(\"#dialog-button\").addEventListener('click', settings.setUpDialogClick, { once: true })\n</code></pre>\n<p>This means it is self destructive after it is called, intended as a one time only use action which is suitable for this Character Creation process.</p>\n<p>Now obviously if you intend to reuse a popup form you can still do it with this method if the button's purpose is to close the window but it is not such a good idea if it's meant to be used for multiple uses to capture input from the user while the form is still active, that leads to the second method of removal, something that should be done once the form is being closed at the very least.</p>\n<pre><code>document.querySelector(\"#dialog-button\").removeEventListener('click', settings.setUpDialogClick)\n</code></pre>\n<p>The removeEventListener will only work as long as the type 'click' and the listener object 'settings.setUpDialogClick' are exactly the same as when you registered it, so it does get a little trickier to successfully remove it if you don't get these things correct.</p>\n<p>One method I've tried was to use the line above directly inside of the code of the function in settings.setUpDialogClick but it wasn't useful for passing in any parameters that the function you use might have beyond the diag, for that we need a callback.</p>\n<pre><code>function dialogOkClick(diag, var1, var2) {\n    // Return to main game\n}\n\nfunction popupDialog() {\nconst diag = document.querySelector(\"#dialog\")\nvar newVar1\nvar newVar2\n\n// Using callback () =&gt; { function(var1, var2) } I can pass in variables from this function popupDialog into the callback function dialogOkClick\ndocument.querySelector(\"#dialog-button\").addEventListener('click', () =&gt; { dialogOkClick(diag, newVar1, newVar2) }, { once: true})\n}\n</code></pre>\n<p>Now I can both delete my event listener after I am done with it and also customize what input variables I can pass in to the registered event function.</p>\n<p>If you won't use once, then we need to keep a reference to the anonymous listener to be able to remove it later manually.</p>\n<pre><code>let lastListener;\n\nfunction popupDialog(oMainObj) {\n  lastListener = () =&gt; myFunction(diag, oMainObj);\n  document.querySelector(\"#dialog-button\").addEventListener('click', lastListener);\n}\n\nfunction myFunction(diag, oMainObj) {\n   bla()\n}\n\nfunction bla() {\n  // Remove the listener wherever you want\n  document.querySelector(\"#dialog-button\").removeEventListener('click', lastListener);\n}\n</code></pre>\n<p>I hope that this  is useful to someone else as they might come across the same issue I did and not know how to resolve it, and if someone can update the linked page above so it at least uses the { once: true} method that might avoid further confusion for new programmers following the guide that like to use it as a template for further experimentation like I did.</p>\n\n",
      "PostDate": "2024-08-25T08:50:59.5096036Z",
      "LastEditDate": "2024-08-25T17:54:54.5485105Z",
      "link": null
    }
  ]
}
