{
  "Topic": {
    "TopicId": "noylm6pf4ukrad769k1r2q",
    "ForumId": "15",
    "Title": "[SOLVED] Find the Item Being Examined (Messing Around with EXAMINE (Trying to Learn JS)) ",
    "LastUpdated": "2020-12-25T17:23:33.1431257Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "dd2c61e6-7dc2-4759-981b-765dee430523",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is a long post.\r\n\r\nClick   on this to view it:\r\n\r\n<details>\r\n\r\nThis is XanMag's ```examine``` property, and this code is in the ```createItem()``` function:\r\n\r\n<pre id\"code-div\" style=\"height:300px;overflow:auto;max-width:1054px;resize:both;\"><code style=\"white-space: pre;\">\texamine:(...params)=>{\r\n\t\t/*    ^ spread operator  */\r\n\r\n\t\t// Print XM's description\r\n\t\tmsg(processText(\"{once:\"+w.XanMag.examineFirst+\"}{notOnce:\"+w.XanMag.examineDefault+\"}\"));\r\n\r\n\t\t// Call the function to list this item's contents (if any).\r\n\t\t//  - (Passing 'params' for no particular reason at this time, but it looks like I can \\\r\n\t\t//     use this to customize the response based upon who is doing the examining (the player or an NPC).)\r\n\t\thandleExamineHolder(params);\r\n\r\n\t\t// Check out what 'params' actually is\r\n\t\tlog(\"params:\", params);\r\n\r\n\t\t// Destructure the 'params' array\r\n\t\tlet [ /*undefined*/, examiner, { match:examinee } ] = params;\r\n\t\t/*     ^ skip this , ^ define examiner, ^ define 'examinee' as the 'match' value */\r\n\t\t\r\n\t\t// This works every time (so far).\r\n\t\tlog(\"examiner: \", examiner.name);\r\n\t\t\r\n\t\t// When examined by an NPC, this is undefined because there is no 'match' key.\r\n\t\tlog(\"examinee: \", examinee);\r\n\t\t\r\n\t\t// 'this' targets main window object, presumably because this function is within a function, \\\r\n\t\t//   and it is being invoked (or called?) by another function (or other functions).\r\n\t\tlog(\"this:\", this);\r\n\t},\r\n</code></pre>\r\n\r\n---\r\n### The Output\r\n\r\n##### NOTE\r\n- First I examine him, then I order another NPC to examine him.\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/103136506-a0119180-4686-11eb-8be0-05d66aa70a87.png)](https://user-images.githubusercontent.com/30656341/103136506-a0119180-4686-11eb-8be0-05d66aa70a87.png)\r\n\r\n\r\n---\r\n### TODO\r\n\r\n1. Figure out how to pass the object being examined to ```handleExamineHolder``` in a way this can be used with clones.  (This may need to be approached differently, as I have no clue how to pull it off.)\r\n\r\n2. Research and learn how the parser works.  E.g., why isn't there a ```match``` key when an NPC is examining the item?  I  know that (somehow) this is being assigned a command then running that command's script:\r\n\r\n```js\r\nconst outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\r\n```\r\n\r\nIn this case, the command is either \"Examine\" or \"NpcExamine\".  So, let's see what the latter's script is all about . . .\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103138860-17055500-469c-11eb-9a98-9e344e45a6af.png)](https://user-images.githubusercontent.com/30656341/103138860-17055500-469c-11eb-9a98-9e344e45a6af.png)\r\n\r\n---\r\nBah!\r\n\r\n\r\nWell . . . Grep it is!\r\n\r\n```\r\n[rh@yourmomshouse QuestJS_v03]$ grep -nr NpcExamine* *\r\n[rh@yourmomshouse QuestJS_v03]$ \r\n```\r\n\r\n---\r\nHuh?\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/103139542-f4c30580-46a2-11eb-84a2-53b5ea71e5a4.png)](https://user-images.githubusercontent.com/30656341/103139542-f4c30580-46a2-11eb-84a2-53b5ea71e5a4.png)\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/103139562-2b008500-46a3-11eb-83ec-4f4588db7c45.png)\r\n(https://user-images.githubusercontent.com/30656341/103139562-2b008500-46a3-11eb-83ec-4f4588db7c45.png)\r\n\r\n---\r\nOkay . . .\r\n\r\n```\r\n[rh@yourmomshouse  QuestJS_v03]$ grep -nr Npc* *\r\ngrep: architecture.png: binary file matches\r\ngrep: game-alt-map/small_scale.xcf: binary file matches\r\ngrep: game-alt-map/Untitled.xcf: binary file matches\r\ngame-alt-map/code.js:38:  for (let el of scopeAllNpcHere()) {\r\ngrep: game-alt-map/small_scale.png: binary file matches\r\ngrep: game-alt-map/map.png: binary file matches\r\ngame-banks/commands.js:119:/*commands.push(new Cmd('NpcPressurise1', {\r\ngame-banks/commands.js:136:commands.push(new Cmd('NpcPressurise2', {\r\ngame-banks/commands.js:153:commands.push(new Cmd('NpcDepressurise1', {\r\ngame-banks/commands.js:171:commands.push(new Cmd('NpcDepressurise2', {\r\ngame-banks/code.js:410:function reviveNpc(npc, object) {\r\ngrep: game-deeper/deeper-title.png: binary file matches\r\ngrep: game-eg/hrn06.wav: binary file matches\r\ngrep: game-map/paper.jpg: binary file matches\r\ngrep: images/spaceship.png: binary file matches\r\ngrep: images/icon_man_green.png: binary file matches\r\ngrep: images/icon-ice-shard.png: binary file matches\r\nlang/lang-en.js:101:    NpcStand:[/^(.+), ?(?:stand|stand up|get up)$/, /^tell (.+) to (?:stand|stand up|get up)$/],\r\nlang/lang-en.js:103:    NpcFillWith:[/^(.+), ?(?:fill) (.+) (?:with) (.+)$/, /^tell (.+) to (?:fill) (.+) (?:with) (.+)$/],\r\nlang/lang-en.js:105:    NpcPutIn:[/^(.+), ?(?:put|place|drop) (.+) (?:in to|into|in|on to|onto|on) (.+)$/, /^tell (.+) to (?:put|place|drop) (.+) (?:in to|into|in|on to|onto|on) (.+)$/],\r\nlang/lang-en.js:107:    NpcTakeOut:[/^(.+), ?(?:take|get|remove) (.+) (?:from|out of|out|off of|off) (.+)$/, /^tell (.+) to (?:take|get|remove) (.+) (?:from|out of|out|off of|off) (.+)$/],\r\nlang/lang-en.js:109:    NpcGiveTo:[/^(.+), ?(?:give) (.+) (?:to) (.+)$/, /^tell (.+) to ?(?:give) (.+) (?:to) (.+)$/],\r\nlang/lang-en.js:112:    NpcTieTo:[/^(.+), ?(?:tie|fasten|attach) (.+) (?:to) (.+)$/, /^tell (.+) to ?(?:tie|fasten|attach) (.+) (?:to) (.+)$/],\r\nlang/lang-en.js:114:    NpcUntie:[/^(.+), ?(?:untie|unfasten|detach) (.+)$/, /^tell (.+) to ?(?:untie|unfasten|detach) (.+)$/],\r\nlang/lang-en.js:116:    NpcUntieFrom:[/^(.+), ?(?:untie|unfasten|detach) (.+) (?:frm) (.+)$/, /^tell (.+) to ?(?:untie|unfasten|detach) (.+) (?:from) (.+)$/],\r\nlang/lang-en.js:121:    NpcPushExit:[\r\nlib/_templates.js:382:    return char === game.player ? 'Wear' : 'NpcWear'\r\nlib/_templates.js:758:    return char === game.player ? cmd : 'Npc' + cmd\r\nlib/_commands.js:738:      {scope:parser.isNpcAndHere},\r\nlib/_commands.js:748:      {scope:parser.isNpcAndHere},\r\nlib/_commands.js:797:  new Cmd('NpcStand', {\r\nlib/_commands.js:819:  new Cmd('NpcFillWith', {\r\nlib/_commands.js:850:  new Cmd('NpcPutIn', {\r\nlib/_commands.js:855:      {scope:parser.isHeldByNpc, multiple:true},\r\nlib/_commands.js:880:  new Cmd('NpcTakeOut', {\r\nlib/_commands.js:906:      return handleGiveToNpc(game.player, objects);\r\nlib/_commands.js:909:  new Cmd('NpcGiveTo', {\r\nlib/_commands.js:914:      {scope:parser.isHeldByNpc, multiple:true},\r\nlib/_commands.js:924:      return handleGiveToNpc(npc, objects);\r\nlib/_commands.js:942:  new Cmd('NpcPushExit', {\r\nlib/_commands.js:975:  new Cmd('NpcTieTo', {\r\nlib/_commands.js:1003:  new Cmd('NpcUntie', {\r\nlib/_commands.js:1032:  new Cmd('NpcUntieFrom', {\r\nlib/_commands.js:1117:      {scope:parser.isNpcAndHere},\r\nlib/_commands.js:1131:      {scope:parser.isNpcAndHere},\r\nlib/_commands.js:1251:          const npcCmd = commands.find(el => el.name === \"Npc\" + cmd.name + \"2\")\r\nlib/_commands.js:1401:function handleGiveToNpc(char, objects) {\r\nlib/_command.js:93:function NpcCmd(name, hash) {\r\nlib/_command.js:176:function NpcExitCmd(name, dir, hash) {\r\nlib/_command.js:237:        forNpc:true,\r\nlib/_command.js:240:      const cmd = new NpcCmd(\"Npc\" + el.name, data)\r\nlib/_command.js:245:      if (el.useThisScriptForNpcs) cmd.script = el.script\r\nlib/_command.js:248:        cmd.scope.push(el2 === parser.isHeld ? parser.isHeldByNpc : el2)\r\nlib/_command.js:249:        cmd.scope.push(el2 === parser.isWorn ? parser.isWornByNpc : el2)\r\nlib/_command.js:268:      commands.push(new NpcExitCmd(\"NpcGo\" + sentenceCase(el.name) + \"2\", el.name, { regexes:regexes }))\r\nlib/_command.js:277:  if (cmd.forNpc) {\r\nlib/_parser.js:553:parser.isHeldByNpc = function(item) {\r\nlib/_parser.js:563:parser.isWornByNpc = function(item) {\r\nlib/_parser.js:571:parser.isNpcOrHere = function(item) {\r\nlib/_parser.js:574:parser.isNpcAndHere = function(item) {\r\nlib/_util.js:658:function scopeNpcHere(ignoreDark) {\r\nlib/_util.js:672:function scopeAllNpcHere(ignoreDark) {\r\ngrep: q6interface.png: binary file matches\r\n```\r\n\r\n---\r\n# A Mystery\r\n\r\nWhere is the \"NpcExamine\" code???\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>This is a long post.</p>\n<p>Click   on this to view it:</p>\n<details>\n<p>This is XanMag's <code>examine</code> property, and this code is in the <code>createItem()</code> function:</p>\n<pre style=\"height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">\texamine:(...params)=&gt;{\n\t\t/*    ^ spread operator  */\n\n\t\t// Print XM's description\n\t\tmsg(processText(\"{once:\"+w.XanMag.examineFirst+\"}{notOnce:\"+w.XanMag.examineDefault+\"}\"));\n\n\t\t// Call the function to list this item's contents (if any).\n\t\t//  - (Passing 'params' for no particular reason at this time, but it looks like I can \\\n\t\t//     use this to customize the response based upon who is doing the examining (the player or an NPC).)\n\t\thandleExamineHolder(params);\n\n\t\t// Check out what 'params' actually is\n\t\tlog(\"params:\", params);\n\n\t\t// Destructure the 'params' array\n\t\tlet [ /*undefined*/, examiner, { match:examinee } ] = params;\n\t\t/*     ^ skip this , ^ define examiner, ^ define 'examinee' as the 'match' value */\n\t\t\n\t\t// This works every time (so far).\n\t\tlog(\"examiner: \", examiner.name);\n\t\t\n\t\t// When examined by an NPC, this is undefined because there is no 'match' key.\n\t\tlog(\"examinee: \", examinee);\n\t\t\n\t\t// 'this' targets main window object, presumably because this function is within a function, \\\n\t\t//   and it is being invoked (or called?) by another function (or other functions).\n\t\tlog(\"this:\", this);\n\t},\n</code></pre>\n<hr>\n<h3>The Output</h3>\n<h5>NOTE</h5>\n<ul>\n<li>First I examine him, then I order another NPC to examine him.</li>\n</ul>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103136506-a0119180-4686-11eb-8be0-05d66aa70a87.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103136506-a0119180-4686-11eb-8be0-05d66aa70a87.png\" alt=\"image\"></a></p>\n<hr>\n<h3>TODO</h3>\n<ol>\n<li>\n<p>Figure out how to pass the object being examined to <code>handleExamineHolder</code> in a way this can be used with clones.  (This may need to be approached differently, as I have no clue how to pull it off.)</p>\n</li>\n<li>\n<p>Research and learn how the parser works.  E.g., why isn't there a <code>match</code> key when an NPC is examining the item?  I  know that (somehow) this is being assigned a command then running that command's script:</p>\n</li>\n</ol>\n<pre><code>const outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\n</code></pre>\n<p>In this case, the command is either \"Examine\" or \"NpcExamine\".  So, let's see what the latter's script is all about . . .</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103138860-17055500-469c-11eb-9a98-9e344e45a6af.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103138860-17055500-469c-11eb-9a98-9e344e45a6af.png\" alt=\"image\"></a></p>\n<hr>\n<p>Bah!</p>\n<p>Well . . . Grep it is!</p>\n<pre><code>[rh@yourmomshouse QuestJS_v03]$ grep -nr NpcExamine* *\n[rh@yourmomshouse QuestJS_v03]$ \n</code></pre>\n<hr>\n<p>Huh?</p>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103139542-f4c30580-46a2-11eb-84a2-53b5ea71e5a4.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103139542-f4c30580-46a2-11eb-84a2-53b5ea71e5a4.png\" alt=\"image\"></a></p>\n<hr>\n<p>[<img src=\"https://user-images.githubusercontent.com/30656341/103139562-2b008500-46a3-11eb-83ec-4f4588db7c45.png\" alt=\"image\"><br>\n(https://user-images.githubusercontent.com/30656341/103139562-2b008500-46a3-11eb-83ec-4f4588db7c45.png)</p>\n<hr>\n<p>Okay . . .</p>\n<pre><code>[rh@yourmomshouse  QuestJS_v03]$ grep -nr Npc* *\ngrep: architecture.png: binary file matches\ngrep: game-alt-map/small_scale.xcf: binary file matches\ngrep: game-alt-map/Untitled.xcf: binary file matches\ngame-alt-map/code.js:38:  for (let el of scopeAllNpcHere()) {\ngrep: game-alt-map/small_scale.png: binary file matches\ngrep: game-alt-map/map.png: binary file matches\ngame-banks/commands.js:119:/*commands.push(new Cmd('NpcPressurise1', {\ngame-banks/commands.js:136:commands.push(new Cmd('NpcPressurise2', {\ngame-banks/commands.js:153:commands.push(new Cmd('NpcDepressurise1', {\ngame-banks/commands.js:171:commands.push(new Cmd('NpcDepressurise2', {\ngame-banks/code.js:410:function reviveNpc(npc, object) {\ngrep: game-deeper/deeper-title.png: binary file matches\ngrep: game-eg/hrn06.wav: binary file matches\ngrep: game-map/paper.jpg: binary file matches\ngrep: images/spaceship.png: binary file matches\ngrep: images/icon_man_green.png: binary file matches\ngrep: images/icon-ice-shard.png: binary file matches\nlang/lang-en.js:101:    NpcStand:[/^(.+), ?(?:stand|stand up|get up)$/, /^tell (.+) to (?:stand|stand up|get up)$/],\nlang/lang-en.js:103:    NpcFillWith:[/^(.+), ?(?:fill) (.+) (?:with) (.+)$/, /^tell (.+) to (?:fill) (.+) (?:with) (.+)$/],\nlang/lang-en.js:105:    NpcPutIn:[/^(.+), ?(?:put|place|drop) (.+) (?:in to|into|in|on to|onto|on) (.+)$/, /^tell (.+) to (?:put|place|drop) (.+) (?:in to|into|in|on to|onto|on) (.+)$/],\nlang/lang-en.js:107:    NpcTakeOut:[/^(.+), ?(?:take|get|remove) (.+) (?:from|out of|out|off of|off) (.+)$/, /^tell (.+) to (?:take|get|remove) (.+) (?:from|out of|out|off of|off) (.+)$/],\nlang/lang-en.js:109:    NpcGiveTo:[/^(.+), ?(?:give) (.+) (?:to) (.+)$/, /^tell (.+) to ?(?:give) (.+) (?:to) (.+)$/],\nlang/lang-en.js:112:    NpcTieTo:[/^(.+), ?(?:tie|fasten|attach) (.+) (?:to) (.+)$/, /^tell (.+) to ?(?:tie|fasten|attach) (.+) (?:to) (.+)$/],\nlang/lang-en.js:114:    NpcUntie:[/^(.+), ?(?:untie|unfasten|detach) (.+)$/, /^tell (.+) to ?(?:untie|unfasten|detach) (.+)$/],\nlang/lang-en.js:116:    NpcUntieFrom:[/^(.+), ?(?:untie|unfasten|detach) (.+) (?:frm) (.+)$/, /^tell (.+) to ?(?:untie|unfasten|detach) (.+) (?:from) (.+)$/],\nlang/lang-en.js:121:    NpcPushExit:[\nlib/_templates.js:382:    return char === game.player ? 'Wear' : 'NpcWear'\nlib/_templates.js:758:    return char === game.player ? cmd : 'Npc' + cmd\nlib/_commands.js:738:      {scope:parser.isNpcAndHere},\nlib/_commands.js:748:      {scope:parser.isNpcAndHere},\nlib/_commands.js:797:  new Cmd('NpcStand', {\nlib/_commands.js:819:  new Cmd('NpcFillWith', {\nlib/_commands.js:850:  new Cmd('NpcPutIn', {\nlib/_commands.js:855:      {scope:parser.isHeldByNpc, multiple:true},\nlib/_commands.js:880:  new Cmd('NpcTakeOut', {\nlib/_commands.js:906:      return handleGiveToNpc(game.player, objects);\nlib/_commands.js:909:  new Cmd('NpcGiveTo', {\nlib/_commands.js:914:      {scope:parser.isHeldByNpc, multiple:true},\nlib/_commands.js:924:      return handleGiveToNpc(npc, objects);\nlib/_commands.js:942:  new Cmd('NpcPushExit', {\nlib/_commands.js:975:  new Cmd('NpcTieTo', {\nlib/_commands.js:1003:  new Cmd('NpcUntie', {\nlib/_commands.js:1032:  new Cmd('NpcUntieFrom', {\nlib/_commands.js:1117:      {scope:parser.isNpcAndHere},\nlib/_commands.js:1131:      {scope:parser.isNpcAndHere},\nlib/_commands.js:1251:          const npcCmd = commands.find(el =&gt; el.name === \"Npc\" + cmd.name + \"2\")\nlib/_commands.js:1401:function handleGiveToNpc(char, objects) {\nlib/_command.js:93:function NpcCmd(name, hash) {\nlib/_command.js:176:function NpcExitCmd(name, dir, hash) {\nlib/_command.js:237:        forNpc:true,\nlib/_command.js:240:      const cmd = new NpcCmd(\"Npc\" + el.name, data)\nlib/_command.js:245:      if (el.useThisScriptForNpcs) cmd.script = el.script\nlib/_command.js:248:        cmd.scope.push(el2 === parser.isHeld ? parser.isHeldByNpc : el2)\nlib/_command.js:249:        cmd.scope.push(el2 === parser.isWorn ? parser.isWornByNpc : el2)\nlib/_command.js:268:      commands.push(new NpcExitCmd(\"NpcGo\" + sentenceCase(el.name) + \"2\", el.name, { regexes:regexes }))\nlib/_command.js:277:  if (cmd.forNpc) {\nlib/_parser.js:553:parser.isHeldByNpc = function(item) {\nlib/_parser.js:563:parser.isWornByNpc = function(item) {\nlib/_parser.js:571:parser.isNpcOrHere = function(item) {\nlib/_parser.js:574:parser.isNpcAndHere = function(item) {\nlib/_util.js:658:function scopeNpcHere(ignoreDark) {\nlib/_util.js:672:function scopeAllNpcHere(ignoreDark) {\ngrep: q6interface.png: binary file matches\n</code></pre>\n<hr>\n<h1>A Mystery</h1>\n<p>Where is the \"NpcExamine\" code???</p>\n</details>\n\n",
      "PostDate": "2020-12-25T17:23:33.1431257Z",
      "LastEditDate": "2020-12-28T07:29:00.9973561Z",
      "link": null
    },
    {
      "PostId": "2dc5481b-3db9-4eee-b113-e423196924da",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Where is the \"NpcExamine\" code???\r\n\r\n`initCommands` in _commands.js generates additional commands for any command that has \"npcCmd\" set to `true`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Where is the \"NpcExamine\" code???</p>\n</blockquote>\n<p><code>initCommands</code> in _commands.js generates additional commands for any command that has \"npcCmd\" set to <code>true</code>.</p>\n\n",
      "PostDate": "2020-12-26T10:51:41.6303938Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2ff56d2c-2407-45aa-ab53-1359de5eac1c",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> generates additional commands for any command that has \"npcCmd\" set\r\n\r\nAh!  Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>generates additional commands for any command that has \"npcCmd\" set</p>\n</blockquote>\n<p>Ah!  Thanks!</p>\n\n",
      "PostDate": "2020-12-26T11:12:17.3830196Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1ff8527d-deac-4a96-b6e1-d482633d726e",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<details><summary>Click here to view this extremely long post.</summary>\r\n\r\n```\r\nconst outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\r\n```\r\n\r\nAlright.  Let's see if I'm understanding this line of code.\r\n\r\n---\r\n### ```outcome```\r\n\r\nThis will be whatever is returned by the command's ```script```.\r\n\r\nThis should be something like ```world.FAILED```, ```world.SUCCESS```, ```world.SUCCESS_NO_TURNSCRIPTS```, etc.\r\n\r\n---\r\n### ```parser.currentCommand```\r\n\r\nThis is a JS object representing the command the player just entered.  (It contains lots of evolving data.)\r\n\r\n---\r\n### ```parser.currentCommand.cmd```\r\n\r\nThis is the command the parser matched to the player's input.  In this case, this is \"Examine\" when the player examines XanMag (or \"LookAt\" if the command entered is **LOOK AT XM** rather than **X XM**), and it is \"NpcExamine\" when the player orders an NPC to examine XanMag (or \"NpcLookAt\" if the command entered is **RP, LOOK AT XM** rather than **RP, X XM**).\r\n\r\n---\r\n### ```parser.currentCommand.cmd.script```\r\n\r\nThis is the ```script``` of ```cmd```, which is ```w.XanMag.examine``` in this case.\r\n\r\nIt doesn't matter if the command entered is **X XM**, **LOOK AT XM**, **RP, X XM**, or **RP, LOOK AT XM**.  This is the script that will run.  (In Quest-ese, it's called a verb script.)\r\n\r\n---\r\n### ```parser.currentCommand.objects```\r\n\r\n**> RP, X XAN**\r\n\r\nThis will end up being an array containing two objects **after the command has successfully executed**.\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151147-1ffc3200-4741-11eb-8c27-4a2fc2900426.png)](https://user-images.githubusercontent.com/30656341/103151147-1ffc3200-4741-11eb-8c27-4a2fc2900426.png)\r\n\r\n---\r\nAgain, that is **after** the command has finished running.\r\n\r\nThis is what is passed to the verb script, though:\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151567-c5fd6b80-4744-11eb-9f68-019a4af825b1.png)](https://user-images.githubusercontent.com/30656341/103151567-c5fd6b80-4744-11eb-9f68-019a4af825b1.png)\r\n\r\n---\r\nI am (incorrectly) assuming that ```params[0]``` and ```params[1]``` are ```parser.currentCommand.objects``` at this point in the parsing process.\r\n\r\nI also (incorrectly) assume that ```params[2]``` is ```parser.currentCommand.matches```.\r\n\r\nI assume these things because in this example ```parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)``` is the same thing as ```w.XanMag.examine(parser.currentCommand.objects, parser.currentCommand.matches)```.\r\n\r\nI can run ```w.XanMag.examine(undefined,w.Ralph,{multi:undefined, match:undefined, verb:undefined})``` from the browser's console, and it yields the same results in the game and in the console log as it does when I enter **RP, X XM** (except it doesn't echo the player's command, of course).\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151607-21c7f480-4745-11eb-989c-248ad828678c.png)](https://user-images.githubusercontent.com/30656341/103151607-21c7f480-4745-11eb-989c-248ad828678c.png)\r\n\r\n---\r\nWhen I assume, though, it makes an ASS out of U and ME.\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103152007-01019e00-4749-11eb-8114-752709028284.png)](https://user-images.githubusercontent.com/30656341/103152007-01019e00-4749-11eb-8114-752709028284.png)\r\n\r\n---\r\nThis proves that I am not fully grasping what is happening.\r\n\r\nAnyway . . .\r\n\r\n---\r\nAlternatively, if this is the entered command:\r\n\r\n**> X XM**\r\n\r\n...the data is a little different.  (This is how it should be, of course, since ```w.me``` is now the examiner, but another difference is that ```match``` is not ```undefined``` when the player is the examiner.  This is the bit that confuse me.)\r\n\r\nThis is what is passed to the verb script:\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151684-ebd74000-4745-11eb-80cf-f0cd2a149cab.png)](https://user-images.githubusercontent.com/30656341/103151684-ebd74000-4745-11eb-80cf-f0cd2a149cab.png)\r\n\r\n---\r\n...and this is ```parser.currentCommand.objects``` **after** the command has been run:\r\n[![image](https://user-images.githubusercontent.com/30656341/103151710-2ccf5480-4746-11eb-961c-69361407dea5.png)](https://user-images.githubusercontent.com/30656341/103151710-2ccf5480-4746-11eb-961c-69361407dea5.png)\r\n\r\n---\r\n...and this is ```parser.currentCommand.matches``` **after** the command has been run:\r\n[![image](https://user-images.githubusercontent.com/30656341/103151732-643e0100-4746-11eb-8f53-6fb947a6bd3e.png)](https://user-images.githubusercontent.com/30656341/103151732-643e0100-4746-11eb-8f53-6fb947a6bd3e.png)\r\n\r\n---\r\n### ```parser.currentCommand.matches```\r\n\r\nAn array of string arrays representing matches made by the parser.\r\n\r\n**> RP, X XAN**\r\n\r\nAfter the command has successfully executed:\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151178-6d789f00-4741-11eb-8993-cb66e01c35cf.png)](https://user-images.githubusercontent.com/30656341/103151178-6d789f00-4741-11eb-8993-cb66e01c35cf.png)\r\n\r\n\r\n---\r\n**X XM**\r\n\r\nAfter the command has successfully executed:\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103151888-c64b3600-4747-11eb-983a-e97b995ef33a.png)](https://user-images.githubusercontent.com/30656341/103151888-c64b3600-4747-11eb-983a-e97b995ef33a.png)\r\n\r\n---\r\n## CONCLUSION\r\n\r\nI think I understand most of this process.\r\n\r\nI *think* ```parser.currentCommand.objects``` and ```parser.currentCommand.matches``` might both get updated <s>once</s> <s>after</s> as soon as the parser calls the verb script, and that's why ```params``` is different?\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<details><summary>Click here to view this extremely long post.</summary>\n<pre><code>const outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\n</code></pre>\n<p>Alright.  Let's see if I'm understanding this line of code.</p>\n<hr>\n<h3><code>outcome</code></h3>\n<p>This will be whatever is returned by the command's <code>script</code>.</p>\n<p>This should be something like <code>world.FAILED</code>, <code>world.SUCCESS</code>, <code>world.SUCCESS_NO_TURNSCRIPTS</code>, etc.</p>\n<hr>\n<h3><code>parser.currentCommand</code></h3>\n<p>This is a JS object representing the command the player just entered.  (It contains lots of evolving data.)</p>\n<hr>\n<h3><code>parser.currentCommand.cmd</code></h3>\n<p>This is the command the parser matched to the player's input.  In this case, this is \"Examine\" when the player examines XanMag (or \"LookAt\" if the command entered is <strong>LOOK AT XM</strong> rather than <strong>X XM</strong>), and it is \"NpcExamine\" when the player orders an NPC to examine XanMag (or \"NpcLookAt\" if the command entered is <strong>RP, LOOK AT XM</strong> rather than <strong>RP, X XM</strong>).</p>\n<hr>\n<h3><code>parser.currentCommand.cmd.script</code></h3>\n<p>This is the <code>script</code> of <code>cmd</code>, which is <code>w.XanMag.examine</code> in this case.</p>\n<p>It doesn't matter if the command entered is <strong>X XM</strong>, <strong>LOOK AT XM</strong>, <strong>RP, X XM</strong>, or <strong>RP, LOOK AT XM</strong>.  This is the script that will run.  (In Quest-ese, it's called a verb script.)</p>\n<hr>\n<h3><code>parser.currentCommand.objects</code></h3>\n<p><strong>&gt; RP, X XAN</strong></p>\n<p>This will end up being an array containing two objects <strong>after the command has successfully executed</strong>.</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151147-1ffc3200-4741-11eb-8c27-4a2fc2900426.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151147-1ffc3200-4741-11eb-8c27-4a2fc2900426.png\" alt=\"image\"></a></p>\n<hr>\n<p>Again, that is <strong>after</strong> the command has finished running.</p>\n<p>This is what is passed to the verb script, though:</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151567-c5fd6b80-4744-11eb-9f68-019a4af825b1.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151567-c5fd6b80-4744-11eb-9f68-019a4af825b1.png\" alt=\"image\"></a></p>\n<hr>\n<p>I am (incorrectly) assuming that <code>params[0]</code> and <code>params[1]</code> are <code>parser.currentCommand.objects</code> at this point in the parsing process.</p>\n<p>I also (incorrectly) assume that <code>params[2]</code> is <code>parser.currentCommand.matches</code>.</p>\n<p>I assume these things because in this example <code>parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)</code> is the same thing as <code>w.XanMag.examine(parser.currentCommand.objects, parser.currentCommand.matches)</code>.</p>\n<p>I can run <code>w.XanMag.examine(undefined,w.Ralph,{multi:undefined, match:undefined, verb:undefined})</code> from the browser's console, and it yields the same results in the game and in the console log as it does when I enter <strong>RP, X XM</strong> (except it doesn't echo the player's command, of course).</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151607-21c7f480-4745-11eb-989c-248ad828678c.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151607-21c7f480-4745-11eb-989c-248ad828678c.png\" alt=\"image\"></a></p>\n<hr>\n<p>When I assume, though, it makes an ASS out of U and ME.</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103152007-01019e00-4749-11eb-8114-752709028284.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103152007-01019e00-4749-11eb-8114-752709028284.png\" alt=\"image\"></a></p>\n<hr>\n<p>This proves that I am not fully grasping what is happening.</p>\n<p>Anyway . . .</p>\n<hr>\n<p>Alternatively, if this is the entered command:</p>\n<p><strong>&gt; X XM</strong></p>\n<p>...the data is a little different.  (This is how it should be, of course, since <code>w.me</code> is now the examiner, but another difference is that <code>match</code> is not <code>undefined</code> when the player is the examiner.  This is the bit that confuse me.)</p>\n<p>This is what is passed to the verb script:</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151684-ebd74000-4745-11eb-80cf-f0cd2a149cab.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151684-ebd74000-4745-11eb-80cf-f0cd2a149cab.png\" alt=\"image\"></a></p>\n<hr>\n<p>...and this is <code>parser.currentCommand.objects</code> <strong>after</strong> the command has been run:<br>\n<a href=\"https://user-images.githubusercontent.com/30656341/103151710-2ccf5480-4746-11eb-961c-69361407dea5.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151710-2ccf5480-4746-11eb-961c-69361407dea5.png\" alt=\"image\"></a></p>\n<hr>\n<p>...and this is <code>parser.currentCommand.matches</code> <strong>after</strong> the command has been run:<br>\n<a href=\"https://user-images.githubusercontent.com/30656341/103151732-643e0100-4746-11eb-8f53-6fb947a6bd3e.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151732-643e0100-4746-11eb-8f53-6fb947a6bd3e.png\" alt=\"image\"></a></p>\n<hr>\n<h3><code>parser.currentCommand.matches</code></h3>\n<p>An array of string arrays representing matches made by the parser.</p>\n<p><strong>&gt; RP, X XAN</strong></p>\n<p>After the command has successfully executed:</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151178-6d789f00-4741-11eb-8993-cb66e01c35cf.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151178-6d789f00-4741-11eb-8993-cb66e01c35cf.png\" alt=\"image\"></a></p>\n<hr>\n<p><strong>X XM</strong></p>\n<p>After the command has successfully executed:</p>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103151888-c64b3600-4747-11eb-983a-e97b995ef33a.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103151888-c64b3600-4747-11eb-983a-e97b995ef33a.png\" alt=\"image\"></a></p>\n<hr>\n<h2>CONCLUSION</h2>\n<p>I think I understand most of this process.</p>\n<p>I <em>think</em> <code>parser.currentCommand.objects</code> and <code>parser.currentCommand.matches</code> might both get updated <s>once</s> <s>after</s> as soon as the parser calls the verb script, and that's why <code>params</code> is different?</p>\n</details>\n\n",
      "PostDate": "2020-12-26T13:14:27.7314713Z",
      "LastEditDate": "2020-12-28T07:30:22.2875375Z",
      "link": null
    },
    {
      "PostId": "1ab2385e-befc-452a-aa9f-7fe9302d6632",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another long post.\r\n\r\nClick this to view it:\r\n\r\n<details>\r\n\r\nAfter hacking ```parser.execute```, I've decided that I must be missing a step in this process.\r\n\r\n...or I'm simply not understanding something.\r\n\r\nIf the parameters ```parser.currentCommand.objects``` and ```parser.currentCommand.matches``` are passed to ```w.XanMag.examine```, why is ```params``` different?\r\n\r\n[![image](https://user-images.githubusercontent.com/30656341/103152195-2ee7e200-474b-11eb-93b1-3722c0989a03.png)](https://user-images.githubusercontent.com/30656341/103152195-2ee7e200-474b-11eb-93b1-3722c0989a03.png)\r\n---\r\n\r\n```js\r\n  parser.execute = function() {\r\n    parser.inspect();\r\n    let inEndTurnFlag = false\r\n    try {\r\n      if (parser.currentCommand.objects.length > 0 && typeof parser.currentCommand.objects[0] === \"object\") {\r\n        for (let obj of parser.currentCommand.objects[0]) {\r\n          parser.pronouns[obj.pronouns.objective] = obj\r\n        }\r\n      }\r\n      log(\"parser.currentCommand.objects:\", parser.currentCommand.objects);\r\n      log(\"parser.currentCommand.matches\", parser.currentCommand.matches);\r\n      const outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\r\n      inEndTurnFlag = true\r\n      world.endTurn(outcome)\r\n    } catch (err) {\r\n      if (inEndTurnFlag) {\r\n        console.error(\"Hit a coding error trying to process world.endTurn after that command.\")\r\n      }\r\n      else {\r\n        console.error(\"Hit a coding error trying to process the command `\" + parser.currentCommand.cmdString + \"'.\")\r\n      }\r\n      console.log('Look through the trace below to find the offending code. It is probably the first entry in the list, but may not be.')\r\n      console.log(err)\r\n      io.print({tag:'p', cssClass:\"error\", text:lang.error})\r\n    }\r\n  };   \r\n```\r\n\r\n---\r\nXanMag's ```examine```:\r\n\r\n```js\r\n\texamine:(...params)=>{\r\n\t\tmsg(processText(\"{once:\"+w.XanMag.examineFirst+\"}{notOnce:\"+w.XanMag.examineDefault+\"}\"));\r\n\t\thandleExamineHolder(params);\r\n\t\tlet [ /*undefined*/, examiner, { match:examinee } ] = params;\r\n\t\tlog(\"params:\", params);\r\n\t\tlog(\"parser.currentCommand.objects:\", parser.currentCommand.objects);\r\n\t\tlog(\"parser.currentCommand.matches\", parser.currentCommand.matches);\r\n\t\tlog(\"examiner: \", examiner.name);\r\n\t\tlog(\"examinee: \", examinee);\r\n\t\tlog(\"this:\", this);\r\n\t},\r\n```\r\n\r\n---\r\nLet's delve deeper . . .\r\n\r\n```>> findCmd(\"Examine\").script.toString()```\r\n\r\n```js\r\nfunction(objects, matches) {\r\n    let success = false;\r\n    let suppressEndturn = false\r\n    let verb\r\n    if (objects.length > 1) verb = objects.shift()\r\n    const multi = objects[0] && (objects[0].length > 1 || parser.currentCommand.all);\r\n    for (let i = 0; i < objects[0].length; i++) {\r\n      if (!objects[0][i][this.attName]) {\r\n        this.default(objects[0][i], multi, game.player);\r\n      }\r\n      else {\r\n        let result = this.processCommand(game.player, objects[0][i], multi, matches[0][i], verb);\r\n        if (result === world.SUCCESS_NO_TURNSCRIPTS) {\r\n          suppressEndturn = true;\r\n          result = true;\r\n        }\r\n        success = result || success;\r\n      }\r\n    }\r\n    if (success) {\r\n      return (this.noTurnscripts || suppressEndturn ? world.SUCCESS_NO_TURNSCRIPTS : world.SUCCESS);\r\n    }\r\n    else {\r\n      return world.FAILED; \r\n    }\r\n  }\r\n```\r\n\r\n---\r\nO-ho!  What's this?\r\n\r\nI see a ```verb = objects.shift()``` and a ```for (let i = 0; i < objects[0].length; i++) {```!\r\n\r\nOkay.\r\n\r\nAlso . . .\r\n\r\n---\r\n```>> findCmd(\"NpcExamine\").script.toString()```\r\n\r\n```js\r\nfunction(objects) {\r\n    const npc = objects[0][0];\r\n    if (!npc.npc) {\r\n      failedmsg(lang.not_npc, {char:game.player, item:npc});\r\n      return world.FAILED; \r\n    }\r\n    let success = false, handled;\r\n    if (objects.length !== 2) {\r\n      errormsg(\"The command \" + name + \" is trying to use a facility for NPCs to do it, but there is no object list; this facility is only for commands in the form verb-object.\");\r\n      return world.FAILED;\r\n    }\r\n    const multi = (objects[1].length > 1 || parser.currentCommand.all);\r\n    for (let obj of objects[1]) {\r\n      if (npc[\"getAgreement\" + this.cmdCategory] && !npc[\"getAgreement\" + this.cmdCategory](obj, this.name)) {\r\n        // The getAgreement should give the response\r\n        continue;\r\n      }\r\n      if (!npc[\"getAgreement\" + this.cmdCategory] && npc.getAgreement && !npc.getAgreement(this.cmdCategory, obj)) {\r\n        continue;\r\n      }\r\n      if (!obj[this.attName]) {\r\n        this.default(obj, multi, npc);\r\n      }\r\n      else {\r\n        let result = this.processCommand(npc, obj, multi);\r\n        if (result === world.SUCCESS_NO_TURNSCRIPTS) {\r\n          result = true;\r\n        }\r\n        success = result || success;\r\n      }\r\n    }\r\n    if (success) {\r\n      npc.pause();\r\n      return (this.noTurnscripts ? world.SUCCESS_NO_TURNSCRIPTS : world.SUCCESS);\r\n    }\r\n    else {\r\n      return world.FAILED; \r\n    }\r\n  }\r\n```\r\n\r\n---\r\nOkay.  Now I see the lines of code which were eluding me.\r\n\r\nThe parser is passing ```parser.currentCommand.objects``` and ```parser.currentCommand.matches```, but the command's script is dissecting that before passing its own arguments to the default script (or the verb script) on the item.\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Another long post.</p>\n<p>Click this to view it:</p>\n<details>\n<p>After hacking <code>parser.execute</code>, I've decided that I must be missing a step in this process.</p>\n<p>...or I'm simply not understanding something.</p>\n<p>If the parameters <code>parser.currentCommand.objects</code> and <code>parser.currentCommand.matches</code> are passed to <code>w.XanMag.examine</code>, why is <code>params</code> different?</p>\n<h2><a href=\"https://user-images.githubusercontent.com/30656341/103152195-2ee7e200-474b-11eb-93b1-3722c0989a03.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103152195-2ee7e200-474b-11eb-93b1-3722c0989a03.png\" alt=\"image\"></a></h2>\n<pre><code>  parser.execute = function() {\n    parser.inspect();\n    let inEndTurnFlag = false\n    try {\n      if (parser.currentCommand.objects.length &gt; 0 &amp;&amp; typeof parser.currentCommand.objects[0] === \"object\") {\n        for (let obj of parser.currentCommand.objects[0]) {\n          parser.pronouns[obj.pronouns.objective] = obj\n        }\n      }\n      log(\"parser.currentCommand.objects:\", parser.currentCommand.objects);\n      log(\"parser.currentCommand.matches\", parser.currentCommand.matches);\n      const outcome = parser.currentCommand.cmd.script(parser.currentCommand.objects, parser.currentCommand.matches)\n      inEndTurnFlag = true\n      world.endTurn(outcome)\n    } catch (err) {\n      if (inEndTurnFlag) {\n        console.error(\"Hit a coding error trying to process world.endTurn after that command.\")\n      }\n      else {\n        console.error(\"Hit a coding error trying to process the command `\" + parser.currentCommand.cmdString + \"'.\")\n      }\n      console.log('Look through the trace below to find the offending code. It is probably the first entry in the list, but may not be.')\n      console.log(err)\n      io.print({tag:'p', cssClass:\"error\", text:lang.error})\n    }\n  };   \n</code></pre>\n<hr>\n<p>XanMag's <code>examine</code>:</p>\n<pre><code>\texamine:(...params)=&gt;{\n\t\tmsg(processText(\"{once:\"+w.XanMag.examineFirst+\"}{notOnce:\"+w.XanMag.examineDefault+\"}\"));\n\t\thandleExamineHolder(params);\n\t\tlet [ /*undefined*/, examiner, { match:examinee } ] = params;\n\t\tlog(\"params:\", params);\n\t\tlog(\"parser.currentCommand.objects:\", parser.currentCommand.objects);\n\t\tlog(\"parser.currentCommand.matches\", parser.currentCommand.matches);\n\t\tlog(\"examiner: \", examiner.name);\n\t\tlog(\"examinee: \", examinee);\n\t\tlog(\"this:\", this);\n\t},\n</code></pre>\n<hr>\n<p>Let's delve deeper . . .</p>\n<p><code>&gt;&gt; findCmd(\"Examine\").script.toString()</code></p>\n<pre><code>function(objects, matches) {\n    let success = false;\n    let suppressEndturn = false\n    let verb\n    if (objects.length &gt; 1) verb = objects.shift()\n    const multi = objects[0] &amp;&amp; (objects[0].length &gt; 1 || parser.currentCommand.all);\n    for (let i = 0; i &lt; objects[0].length; i++) {\n      if (!objects[0][i][this.attName]) {\n        this.default(objects[0][i], multi, game.player);\n      }\n      else {\n        let result = this.processCommand(game.player, objects[0][i], multi, matches[0][i], verb);\n        if (result === world.SUCCESS_NO_TURNSCRIPTS) {\n          suppressEndturn = true;\n          result = true;\n        }\n        success = result || success;\n      }\n    }\n    if (success) {\n      return (this.noTurnscripts || suppressEndturn ? world.SUCCESS_NO_TURNSCRIPTS : world.SUCCESS);\n    }\n    else {\n      return world.FAILED; \n    }\n  }\n</code></pre>\n<hr>\n<p>O-ho!  What's this?</p>\n<p>I see a <code>verb = objects.shift()</code> and a <code>for (let i = 0; i &lt; objects[0].length; i++) {</code>!</p>\n<p>Okay.</p>\n<p>Also . . .</p>\n<hr>\n<p><code>&gt;&gt; findCmd(\"NpcExamine\").script.toString()</code></p>\n<pre><code>function(objects) {\n    const npc = objects[0][0];\n    if (!npc.npc) {\n      failedmsg(lang.not_npc, {char:game.player, item:npc});\n      return world.FAILED; \n    }\n    let success = false, handled;\n    if (objects.length !== 2) {\n      errormsg(\"The command \" + name + \" is trying to use a facility for NPCs to do it, but there is no object list; this facility is only for commands in the form verb-object.\");\n      return world.FAILED;\n    }\n    const multi = (objects[1].length &gt; 1 || parser.currentCommand.all);\n    for (let obj of objects[1]) {\n      if (npc[\"getAgreement\" + this.cmdCategory] &amp;&amp; !npc[\"getAgreement\" + this.cmdCategory](obj, this.name)) {\n        // The getAgreement should give the response\n        continue;\n      }\n      if (!npc[\"getAgreement\" + this.cmdCategory] &amp;&amp; npc.getAgreement &amp;&amp; !npc.getAgreement(this.cmdCategory, obj)) {\n        continue;\n      }\n      if (!obj[this.attName]) {\n        this.default(obj, multi, npc);\n      }\n      else {\n        let result = this.processCommand(npc, obj, multi);\n        if (result === world.SUCCESS_NO_TURNSCRIPTS) {\n          result = true;\n        }\n        success = result || success;\n      }\n    }\n    if (success) {\n      npc.pause();\n      return (this.noTurnscripts ? world.SUCCESS_NO_TURNSCRIPTS : world.SUCCESS);\n    }\n    else {\n      return world.FAILED; \n    }\n  }\n</code></pre>\n<hr>\n<p>Okay.  Now I see the lines of code which were eluding me.</p>\n<p>The parser is passing <code>parser.currentCommand.objects</code> and <code>parser.currentCommand.matches</code>, but the command's script is dissecting that before passing its own arguments to the default script (or the verb script) on the item.</p>\n</details>\n\n",
      "PostDate": "2020-12-26T13:38:25.987343Z",
      "LastEditDate": "2020-12-28T07:31:35.3204452Z",
      "link": null
    },
    {
      "PostId": "8ead1581-81a5-4463-af16-2055e535c03e",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Got it!\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">function handleExamineHolder(params){\r\n\tlet s;\r\n\tlet {examiner, examinee: obj, cmdString } = params;\r\n\tif (!obj) return;\r\n\tif (!obj.container && !obj.npc) return;\r\n\tif (obj.container) {\r\n\t\tif (!obj.closed || obj.transparent) {\r\n\t\t\tlet contents = obj.getContents();\r\n\t\t\tcontents = contents.filter(o => !o.scenery)\r\n\t\t\tif (contents.length <= 0){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet pre = obj.contentsType === 'surface' ? lang.on_top : lang.inside;\r\n\t\t\tpre = sentenceCase(pre);\r\n\t\t\tlet subjVerb = processText(\"{pv:pov:see}\", {pov:game.player});\r\n\t\t\tpre += `, ${subjVerb} `;\r\n\t\t\tcontents = settings.linksEnabled ? getContentsLink(obj) : contents;\r\n\t\t\ts = `${pre}${contents}`;\r\n\t\t\t\r\n\t\t}\r\n\t} else {\r\n\t\tlet contents =  getAllChildrenLinks(obj)\r\n\t\tif (contents == 'nothing') return;\r\n\t\tlet pre = processText('{pv:char:be:true} ' + lang.carrying, {char:obj});\r\n\t\ts = `${pre} ${contents}`;\r\n\t}\r\n\ts = examiner.npc ? getDisplayAliasLink(examiner,{capital:true, article:DEFINITE}) + ' examines ' + getDisplayAliasLink(obj, {article:DEFINITE}) + ' more closely, then continues.  \"' + s + '.\"' : s + '.';\r\n\tmsg(s);\r\n}\r\n</code></pre>\r\n\r\n---\r\n\r\nXanMag (the pertinent bits):\r\n\r\n<pre id\"code-div\" style=\"max-height:300px;overflow:auto;max-width:1054px;\"><code style=\"white-space: pre;\">createItem(\"XanMag\", NPC(false), {\r\n\tloc:\"living_room\",\r\n\texamineFirst:\"XanMag is a pretty normal fellow upon inspection.  \\\r\n\tHis shirt is old and adorned with two Bells - apparently a beer logo - \\\r\n\tand his jeans are old and snug around his frumpy waist.  He is bouncing between \\\r\n\tactivities as you would expect an over-caffeinated teenager with A.D.D. would despite \\\r\n\tthe fact that he is not over-caffeinated, not a teenager, and has never been diagnosed \\\r\n\tas having attention deficit disorder.  Currently he \\\r\n\t{random:is scouring through the forum posts:is fiddling with his iPhone\"+\r\n\t//\":is taking a long 'sip' from his fancy beer.\"+\r\n\t\":is flipping between browser tabs.:is listening to music \\\r\n\tstreaming out of his laptop:appears to be daydreaming}\",\r\n\texamineDefault:\"XanMag is easily distracted by all the stimuli around him.  \\\r\n\tCurrently his focus is on \\\r\n\t{random:scouring through the forum posts:fiddling with his iPhone:flipping between browser tabs\\\r\n\t:listening to music streaming out of his laptop:the enthralling daydream he is having}\",\r\n\texamine:(...params)=>{\r\n\t\tlet cmd = parser.currentCommand;\r\n\t\tlet examinee = cmd.cmd.name.startsWith(\"Npc\") ?cmd.objects[1][0] : cmd.objects[0][0];\r\n\t\tlet [ /*undefined*/, examiner ] = params;\r\n\t\tlet cmdString = cmd.cmdString;\r\n\t\tlet s = processText(\"{once:\" + examinee.examineFirst + \"}{notOnce:\" + examinee.examineDefault + \"}\");\r\n\t\tif (examiner.npc) {\r\n\t\t\tlet pre = processText(\"{nv:pov:examine}\", {pov:examiner}) + ' ' + getDisplayAliasLink(examinee, {article:DEFINITE}) + '.';\r\n\t\t\tmsg(pre);\r\n\t\t\ts = `\"${s},\" ` + processText(\"{nv:pov:say}.\", {pov:examiner});\r\n\t\t}\r\n\t\tmsg(s);\r\n\t\thandleExamineHolder({examiner:examiner, examinee:examinee, cmdString:cmdString});\r\n\t},\r\n</code></pre>\r\n\r\n---\r\n[![image](https://user-images.githubusercontent.com/30656341/103161742-f7f5e880-47ab-11eb-83a0-97dc0bb42edc.png)](https://user-images.githubusercontent.com/30656341/103161742-f7f5e880-47ab-11eb-83a0-97dc0bb42edc.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>Got it!</p>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">function handleExamineHolder(params){\n\tlet s;\n\tlet {examiner, examinee: obj, cmdString } = params;\n\tif (!obj) return;\n\tif (!obj.container &amp;&amp; !obj.npc) return;\n\tif (obj.container) {\n\t\tif (!obj.closed || obj.transparent) {\n\t\t\tlet contents = obj.getContents();\n\t\t\tcontents = contents.filter(o =&gt; !o.scenery)\n\t\t\tif (contents.length &lt;= 0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet pre = obj.contentsType === 'surface' ? lang.on_top : lang.inside;\n\t\t\tpre = sentenceCase(pre);\n\t\t\tlet subjVerb = processText(\"{pv:pov:see}\", {pov:game.player});\n\t\t\tpre += `, ${subjVerb} `;\n\t\t\tcontents = settings.linksEnabled ? getContentsLink(obj) : contents;\n\t\t\ts = `${pre}${contents}`;\n\t\t\t\n\t\t}\n\t} else {\n\t\tlet contents =  getAllChildrenLinks(obj)\n\t\tif (contents == 'nothing') return;\n\t\tlet pre = processText('{pv:char:be:true} ' + lang.carrying, {char:obj});\n\t\ts = `${pre} ${contents}`;\n\t}\n\ts = examiner.npc ? getDisplayAliasLink(examiner,{capital:true, article:DEFINITE}) + ' examines ' + getDisplayAliasLink(obj, {article:DEFINITE}) + ' more closely, then continues.  \"' + s + '.\"' : s + '.';\n\tmsg(s);\n}\n</code></pre>\n<hr>\n<p>XanMag (the pertinent bits):</p>\n<pre style=\"max-height: 300px; overflow: auto; max-width: 1054px\"><code style=\"white-space: pre\">createItem(\"XanMag\", NPC(false), {\n\tloc:\"living_room\",\n\texamineFirst:\"XanMag is a pretty normal fellow upon inspection.  \\\n\tHis shirt is old and adorned with two Bells - apparently a beer logo - \\\n\tand his jeans are old and snug around his frumpy waist.  He is bouncing between \\\n\tactivities as you would expect an over-caffeinated teenager with A.D.D. would despite \\\n\tthe fact that he is not over-caffeinated, not a teenager, and has never been diagnosed \\\n\tas having attention deficit disorder.  Currently he \\\n\t{random:is scouring through the forum posts:is fiddling with his iPhone\"+\n\t//\":is taking a long 'sip' from his fancy beer.\"+\n\t\":is flipping between browser tabs.:is listening to music \\\n\tstreaming out of his laptop:appears to be daydreaming}\",\n\texamineDefault:\"XanMag is easily distracted by all the stimuli around him.  \\\n\tCurrently his focus is on \\\n\t{random:scouring through the forum posts:fiddling with his iPhone:flipping between browser tabs\\\n\t:listening to music streaming out of his laptop:the enthralling daydream he is having}\",\n\texamine:(...params)=&gt;{\n\t\tlet cmd = parser.currentCommand;\n\t\tlet examinee = cmd.cmd.name.startsWith(\"Npc\") ?cmd.objects[1][0] : cmd.objects[0][0];\n\t\tlet [ /*undefined*/, examiner ] = params;\n\t\tlet cmdString = cmd.cmdString;\n\t\tlet s = processText(\"{once:\" + examinee.examineFirst + \"}{notOnce:\" + examinee.examineDefault + \"}\");\n\t\tif (examiner.npc) {\n\t\t\tlet pre = processText(\"{nv:pov:examine}\", {pov:examiner}) + ' ' + getDisplayAliasLink(examinee, {article:DEFINITE}) + '.';\n\t\t\tmsg(pre);\n\t\t\ts = `\"${s},\" ` + processText(\"{nv:pov:say}.\", {pov:examiner});\n\t\t}\n\t\tmsg(s);\n\t\thandleExamineHolder({examiner:examiner, examinee:examinee, cmdString:cmdString});\n\t},\n</code></pre>\n<hr>\n<p><a href=\"https://user-images.githubusercontent.com/30656341/103161742-f7f5e880-47ab-11eb-83a0-97dc0bb42edc.png\"><img src=\"https://user-images.githubusercontent.com/30656341/103161742-f7f5e880-47ab-11eb-83a0-97dc0bb42edc.png\" alt=\"image\"></a></p>\n\n",
      "PostDate": "2020-12-27T01:10:06.3925457Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
