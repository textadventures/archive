{
  "Topic": {
    "TopicId": "gzrvitplg0wftngg0plxpa",
    "ForumId": "10",
    "Title": "referencing an object by \"it\" when it's been moved",
    "LastUpdated": "2019-07-27T13:45:32.5391775Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7a1d78d4-524b-4652-83fc-449d3ff11469",
      "UserId": 381958,
      "Username": "Humptymince",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b162769b4edcdd8af9065995156e82d9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have an object that, once examined, changes into a different object, i.e. the player has now \"recognised\" it. (Simply I move the original object to a room called \"Nowhere\" and the replacement object to the current room.) If the player then uses the pronoun \"it\", the engine still thinks the previous object is being referred to,  not the new object, but rather than saying it is not there, it says \"the Nowhere is not open\". Is this a bug, or can I redirect \"it\" to the new object? ",
      "EditableFormat": "markdown",
      "HTML": "<p>I have an object that, once examined, changes into a different object, i.e. the player has now \"recognised\" it. (Simply I move the original object to a room called \"Nowhere\" and the replacement object to the current room.) If the player then uses the pronoun \"it\", the engine still thinks the previous object is being referred to,  not the new object, but rather than saying it is not there, it says \"the Nowhere is not open\". Is this a bug, or can I redirect \"it\" to the new object?</p>\n\n",
      "PostDate": "2019-07-27T13:45:32.5391775Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63b1016d-cd3e-45db-95da-b1fb612d764f",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I get the same result in my v5.8 desktop TA game.  The player drops a \"pinecone\" from a tree (which then lands in another room, say \"the Ground\").  The player can still look at \"it\" (the pinecone, which shouldn't be in scope), and when the player tries to take \"it\", the game says, \"The Ground is not open.\" (as if \"The Ground\" is a closed container).\r\n\r\nThis does appear to be a bug.",
      "EditableFormat": "markdown",
      "HTML": "<p>I get the same result in my v5.8 desktop TA game.  The player drops a \"pinecone\" from a tree (which then lands in another room, say \"the Ground\").  The player can still look at \"it\" (the pinecone, which shouldn't be in scope), and when the player tries to take \"it\", the game says, \"The Ground is not open.\" (as if \"The Ground\" is a closed container).</p>\n<p>This does appear to be a bug.</p>\n\n",
      "PostDate": "2019-07-27T14:49:44.4600795Z",
      "LastEditDate": "2019-07-27T14:51:16.8189963Z",
      "link": null
    },
    {
      "PostId": "2fe2bb89-0aa9-4744-8e88-5a678f42431e",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "UPDATE:\r\n\r\nSo when you move an object to another room out of scope, then run any command on that object's article (it, them, him, her), that object in question is still treated as if it were still in scope.  If, instead, you drop an object and move to another room, then run a command on the dropped object's article, things work as they should as you get the unrecognised object message.",
      "EditableFormat": "markdown",
      "HTML": "<p>UPDATE:</p>\n<p>So when you move an object to another room out of scope, then run any command on that object's article (it, them, him, her), that object in question is still treated as if it were still in scope.  If, instead, you drop an object and move to another room, then run a command on the dropped object's article, things work as they should as you get the unrecognised object message.</p>\n\n",
      "PostDate": "2019-07-27T15:20:06.1008522Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d02a68a-1b9c-4357-b1c4-d49c3edfa37d",
      "UserId": 381958,
      "Username": "Humptymince",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b162769b4edcdd8af9065995156e82d9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yup, thanks Dcoder, you seem to have it. If there's anything I can do to re-focus the article on the \"new\" item - the pinecone in your example - than I would do so, but it's not obvious how. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Yup, thanks Dcoder, you seem to have it. If there's anything I can do to re-focus the article on the \"new\" item - the pinecone in your example - than I would do so, but it's not obvious how.</p>\n\n",
      "PostDate": "2019-07-27T16:47:57.8230743Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28c05adf-e8cd-4bbe-a073-4d498dc94136",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Yup, thanks Dcoder, you seem to have it. If there's anything I can do to re-focus the article on the \"new\" item\r\n\r\nThere is an objectlist, `game.lastobjects`, containing the objects that you used in the last command.\r\nSo when you move the object away, if you have something like:\r\n```\r\nmsg (\"It appears to be Dr Nerk's diploma.\")\r\nMoveObject (piece_of_paper, Nowhere)\r\nMoveObjectHere (diploma)\r\n```\r\nyou would want to add the lines:\r\n```\r\nif (HasAttribute (game, \"lastobjects\")) {\r\n  if (ListContains (game.lastobjects, piece_of_paper)) {\r\n    list remove (game.lastobjects, piece_of_paper)\r\n    list add (game.lastobjects, diploma)\r\n  }\r\n}\r\n```\r\n\r\n<hr />\r\n\r\n> This does appear to be a bug.\r\n\r\nAgreed.\r\n\r\nIn the function `ResolveNameFromList`, we have the code:\r\n<pre><code style=\"color: brown\">    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }\r\n    }</code></pre>\r\nI believe this should be:\r\n<pre><code style=\"color: green\">    if (not secondaryscope = null) {\r\n      scope = ListCombine (scope, secondaryscope)\r\n    }\r\n    if (objtype = \"object\" and game.lastobjects <> null) {\r\n      foreach (obj, game.lastobjects) {\r\n        if (ListContains (scope, obj)) {\r\n          CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n          CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n    }</code></pre>\r\n\r\n(Note that I'm combining scope and secondaryscope here, because if the player types \"drop wallet\" and then \"drop it\", it should assume you mean the wallet even though it's no longer in the drop command's scope (which I believe is \"inventory\"). The game should respond \"You aren't holding it.\" (as if you'd named a non-held object from secondaryscope) rather than failing to match anything.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Yup, thanks Dcoder, you seem to have it. If there's anything I can do to re-focus the article on the \"new\" item</p>\n</blockquote>\n<p>There is an objectlist, <code>game.lastobjects</code>, containing the objects that you used in the last command.<br>\nSo when you move the object away, if you have something like:</p>\n<pre><code>msg (\"It appears to be Dr Nerk's diploma.\")\nMoveObject (piece_of_paper, Nowhere)\nMoveObjectHere (diploma)\n</code></pre>\n<p>you would want to add the lines:</p>\n<pre><code>if (HasAttribute (game, \"lastobjects\")) {\n  if (ListContains (game.lastobjects, piece_of_paper)) {\n    list remove (game.lastobjects, piece_of_paper)\n    list add (game.lastobjects, diploma)\n  }\n}\n</code></pre>\n<hr>\n<blockquote>\n<p>This does appear to be a bug.</p>\n</blockquote>\n<p>Agreed.</p>\n<p>In the function <code>ResolveNameFromList</code>, we have the code:</p>\n<pre><code style=\"color: brown\">    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n      }\n    }</code></pre>\n<p>I believe this should be:</p>\n<pre><code style=\"color: green\">    if (not secondaryscope = null) {\n      scope = ListCombine (scope, secondaryscope)\n    }\n    if (objtype = \"object\" and game.lastobjects &lt;&gt; null) {\n      foreach (obj, game.lastobjects) {\n        if (ListContains (scope, obj)) {\n          CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n          CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n        }\n      }\n    }</code></pre>\n<p>(Note that I'm combining scope and secondaryscope here, because if the player types \"drop wallet\" and then \"drop it\", it should assume you mean the wallet even though it's no longer in the drop command's scope (which I believe is \"inventory\"). The game should respond \"You aren't holding it.\" (as if you'd named a non-held object from secondaryscope) rather than failing to match anything.</p>\n\n",
      "PostDate": "2019-07-27T19:42:16.3376164Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1e6a660c-c657-456d-854a-05b96b5472be",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very informative, mrangel!\r\n\r\nI put this simple turn script in my game and it seems to work ok:\r\n```\r\ngame.lastobjects2 = game.lastobjects\r\nforeach (object, game.lastobjects2) {\r\n  if (not ListContains(ScopeVisible(), object)) {\r\n    list remove (game.lastobjects, object)\r\n  }\r\n}\r\n```\r\nThis just removes any unseen objects from ```game.lastobjects``` (but doesn't replace them with another object).  If you see any problems with this, feel free to comment.",
      "EditableFormat": "markdown",
      "HTML": "<p>Very informative, mrangel!</p>\n<p>I put this simple turn script in my game and it seems to work ok:</p>\n<pre><code>game.lastobjects2 = game.lastobjects\nforeach (object, game.lastobjects2) {\n  if (not ListContains(ScopeVisible(), object)) {\n    list remove (game.lastobjects, object)\n  }\n}\n</code></pre>\n<p>This just removes any unseen objects from <code>game.lastobjects</code> (but doesn't replace them with another object).  If you see any problems with this, feel free to comment.</p>\n\n",
      "PostDate": "2019-07-28T03:47:36.5958615Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "757e7ebb-3d8c-4c67-adf7-0cef71708d18",
      "UserId": 381958,
      "Username": "Humptymince",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b162769b4edcdd8af9065995156e82d9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Many thanks to both of you! Issue solved. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Many thanks to both of you! Issue solved.</p>\n\n",
      "PostDate": "2019-07-28T06:35:45.2451669Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2418031a-2504-4365-86c1-2a44446ab550",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Edit: fixed a small bug in the posted code; thanks to Pixie)\r\n\r\nActually… my fix there is inelegant. I can see cases with more complex commands where it won't work correctly.\r\n\r\nI think the section of code I quoted above should be *removed*, and the handling of `lastobjects` moved into the function `CompareNames`; either that or something like:\r\n\r\n<pre><code>  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\">\r\n    &lt;![CDATA[\r\n    value = Trim(LCase(value))\r\n    fullmatches = NewObjectList()\r\n    partialmatches = NewObjectList()\r\n\r\n    foreach (obj, scope) {\r\n      name = LCase(GetDisplayAlias(obj))\r\n      CompareNames (name, value, obj, fullmatches, partialmatches)\r\n      if (obj.alt &lt;> null) {\r\n        foreach (altname, obj.alt) {\r\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n        }\r\n      }\r\n<b>      if (ListContains (game.lastobjects, obj)) {\r\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n      }</b>\r\n    }\r\n   \r\n    // Also check the secondary scope, but only if we have not found anything yet\r\n\r\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\r\n      foreach (obj, secondaryscope) {\r\n        name = LCase(GetDisplayAlias(obj))\r\n        CompareNames (name, value, obj, fullmatches, partialmatches)\r\n        if (obj.alt <> null) {\r\n          foreach (altname, obj.alt) {\r\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\r\n          }\r\n        }\r\n<b>        if (ListContains (game.lastobjects, obj)) {\r\n          CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\r\n          CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\r\n        }</b>\r\n      }\r\n    } \r\n\r\n    if (ListCount(fullmatches) = 1) {\r\n</code></pre>\r\n(remainder of function unchanged)\r\n\r\nThat means that in odd cases like my spellcasting command (`cast #object1# on #object2#` with scope `object1=spellbook;object2=notheld`), after the player has typed \"cast knock on chest\", they can use both \"cast it on door\" and \"cast fireball on it\", and the parser will correctly guess which object they mean by \"it\".",
      "EditableFormat": "markdown",
      "HTML": "<p>(Edit: fixed a small bug in the posted code; thanks to Pixie)</p>\n<p>Actually… my fix there is inelegant. I can see cases with more complex commands where it won't work correctly.</p>\n<p>I think the section of code I quoted above should be <em>removed</em>, and the handling of <code>lastobjects</code> moved into the function <code>CompareNames</code>; either that or something like:</p>\n<pre><code>  &lt;function name=\"ResolveNameFromList\" parameters=\"variable, value, objtype, scope, secondaryscope\" type=\"object\"&gt;\n    &lt;![CDATA[\n    value = Trim(LCase(value))\n    fullmatches = NewObjectList()\n    partialmatches = NewObjectList()\n\n    foreach (obj, scope) {\n      name = LCase(GetDisplayAlias(obj))\n      CompareNames (name, value, obj, fullmatches, partialmatches)\n      if (obj.alt &lt;&gt; null) {\n        foreach (altname, obj.alt) {\n          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n        }\n      }\n<b>      if (ListContains (game.lastobjects, obj)) {\n        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n      }</b>\n    }\n   \n    // Also check the secondary scope, but only if we have not found anything yet\n\n    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {\n      foreach (obj, secondaryscope) {\n        name = LCase(GetDisplayAlias(obj))\n        CompareNames (name, value, obj, fullmatches, partialmatches)\n        if (obj.alt &lt;&gt; null) {\n          foreach (altname, obj.alt) {\n            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)\n          }\n        }\n<b>        if (ListContains (game.lastobjects, obj)) {\n          CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)\n          CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)\n        }</b>\n      }\n    } \n\n    if (ListCount(fullmatches) = 1) {\n</code></pre>\n<p>(remainder of function unchanged)</p>\n<p>That means that in odd cases like my spellcasting command (<code>cast #object1# on #object2#</code> with scope <code>object1=spellbook;object2=notheld</code>), after the player has typed \"cast knock on chest\", they can use both \"cast it on door\" and \"cast fireball on it\", and the parser will correctly guess which object they mean by \"it\".</p>\n\n",
      "PostDate": "2019-07-28T11:06:57.6173301Z",
      "LastEditDate": "2019-07-29T11:43:20.3157278Z",
      "link": null
    },
    {
      "PostId": "9a791678-ca36-4338-acf1-e670d9e69ba7",
      "UserId": 381958,
      "Username": "Humptymince",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b162769b4edcdd8af9065995156e82d9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks again. You are obviously a perfectionist - or at least a \"completionist\"! I greatly appreciate your time and effort.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks again. You are obviously a perfectionist - or at least a \"completionist\"! I greatly appreciate your time and effort.</p>\n\n",
      "PostDate": "2019-07-28T13:13:32.2189836Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
