{
  "Topic": {
    "TopicId": "pbqgeypndumbi7xrdxs9sa",
    "ForumId": "3",
    "Title": "Help: (C++) LinkedListValue (using value to using super/parent: LinkedList(position) + Nodes) Data Structure (ADT)",
    "LastUpdated": "2016-09-02T21:39:44.8982323Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0e3859e5-b881-4d09-b791-7c5063728765",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "out first project is to use a LinkedListValue (by Value), which (those by values determination) will be translated/converted to using its super/parent LinkedList (by position, and using Nodes) for containing and traversing the data (3 Data Types: int, string, and custom: soundtrack, which is from a data file, having 6 categories: composer, title, label, catelog number, year recorded, and date cd released --- of X quantity of them: data/records)\r\n\r\nI think I get vaguely the general idea of how to do it, but I'm totally new to implementing all of this stuff, especially together, so it's very OVER-whelming, and I'll be lucky if I can get all the syntax set up correctly just for the various compartmentalizations/parts of it (I've never learned even how to use iterators yet, nor how to set up and work with dictionaries --- in C++, I know of dictionaries thanks to quest --- but, I've no idea how to do so in C++ --- one of the things that I need to rush-learn, along with the iterators, sighs), on top of getting it set up correctly as a connected unit/project/code, lol.\r\n\r\nI'm still a bit sketchy on trying to set up a DoubleNode (being able to traverse the LinkedList in both directions), on top of if I can even get a Node (one direction of traversal) set up and working with everything else, lol.\r\n\r\n------------\r\n\r\nmy understanding of the vague general idea/design/structure, is this:\r\n\r\n.\r\n\r\ncompartmentalization/part 1/1A: (LinkedList + Node/DoubleNode) + compartmentalization/part 1/1B: Nodes/DoubleNodes: is the containment and connection for the data, and being able to act upon that data: (traverse and manipulate the data)\r\n.|\r\nV ^\r\n...|\r\ncompartmentalization/part 2/2A: LinkedListValue: my own class that determines how to find/get/traverse+manipulate the data (determines what data/what to do, by value, and then transitions/converts from that using by value to using by position for its parent/super LinkedList to do the actual data traversal+manipulation)\r\n.|\r\nV ^\r\n...|\r\ncompartmentalization/part 3/2B: getting the data from the input file (for the 'soundtrack' DataType) and organizing it in a way that my LinkedListValue (compartmentalization/part 2) can use, to translate that into by position so that the LinkedList+Node (compartmentalization/part 1) can use it.\r\n\r\nand\r\n\r\ncompartmentalization/part 2/2A: LinkedListValue: my own class that determines how to find/get/traverse+manipulate the data (determines what data/what to do, by value, and then transitions/converts from that using by value to using by position for its parent/super LinkedList to do the actual data traversal+manipulation)\r\n.|\r\nV ^\r\n...|\r\nclient/testing program/(has main)\r\n\r\n.\r\n\r\nis this generally the correct structure/design of what we need to do?\r\n\r\n------------------------------\r\n\r\nand here's what I've pieced together so far... I only got until this tues. (aug. 6) to get this project done (we had more time, but I'm way behind, as I didn't know about using iterators and/or dictionaries, until last class meeting, and am totally new to this too):\r\n\r\n(as can be seen, I still got a ton of stuff to try to do... and then hope it'll all work... HAH... sighs)\r\n\r\n(I'm still just working on the header files/data, haven't even gotten to working on the LinkedListValue class stuff yet nor the handling and organization/management of the input file's data)\r\n\r\n```\r\n/*\r\nTopicA: Interface\r\n@file: TopicA.h\r\n*/\r\n\r\n// linker redundency safeguard:\r\n\r\n#ifndef TOPIC_A_INTERFACE_\r\n#define TOPIC_A_INTERFACE_\r\n\r\n// libraries/references:\r\n\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <fstream>\r\n#include <string>\r\n#include <memory>\r\n#include <iterator>\r\n#include <stdexcept>\r\n\r\n// headers/class prototypes:\r\n\r\ntemplate<class ItemType>\r\nclass ListInterface\r\n{\r\n\tpublic:\r\n\t\tvirtual bool isEmpty() const = 0;\r\n\t\tvirtual int getLength() const = 0;\r\n\t\tvirtual bool insert(int newPosition, const ItemType& newEntry) = 0;\r\n\t\tvirtual bool remove(int position) = 0;\r\n\t\tvirtual void clear() = 0;\r\n\t\tvirtual ItemType getEntry(int position) const = 0;\r\n\t\tvirtual ItemType replace(int position, const ItemType& newEntry) = 0;\r\n\t\tvirtual ~ListInterface() {};\r\n};\r\n\r\ntemplate<class ItemType>\r\nclass Node\r\n{\r\n\tprivate:\r\n\t\tItemType item;\r\n\t\tstd::shared_ptr<Node<ItemType>> next;\r\n\tpublic:\r\n\t\tNode();\r\n\t\tNode(const ItemType& anItem);\r\n\t\tNode(const ItemType& anItem, std::shared_ptr<Node<ItemType>> nextNodePtr);\r\n\t\tvoid setItem(const ItemType& anItem);\r\n\t\tvoid setNext(std::shared_ptr<Node<ItemType>> nextNodePtr);\r\n\t\tItemType getItem() const;\r\n\t\t/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ getNext() const;\r\n};\r\n\r\n/*\r\ntemplate<class ItemType>\r\nclass DoubleNode\r\n{\r\n\tprivate:\r\n\t\tItemType item;\r\n\t\tstd::shared_ptr<Node<ItemType>> next;\r\n\t\tstd::weak_ptr<DoubleNode<ItemType>> previous;\r\n\tpublic:\r\n\t\tDoubleNode();\r\n\t\tDoubleNode(const ItemType& anItem);\r\n\t\tDoubleNode(const ItemType& anItem, std::shared_ptr<DoubleNode<ItemType>> nextNodePtr, std::weak_ptr<DoubleNode<ItemType>> previousNodePtr);\r\n\t\tvoid setItem(const ItemType& anItem);\r\n\t\tvoid setNext(std::shared_ptr<DoubleNode<ItemType>> nextNodePtr);\r\n\t\tvoid setPrevious(std::weak_ptr<DoubleNode<ItemType>> previousNodePtr);\r\n\t\tItemType getItem() const;\r\n\t\t//auto: needs to be changed, as can't use it, as it doesn't work for prof// getNext() const;\r\n\t\t//auto: needs to be changed, as can't use it, as it doesn't work for prof// getPrevious() const;\r\n};\r\n*/\r\n\r\ntemplate<class ItemType>\r\nclass LinkedList : public ListInterface<ItemType>\r\n{\r\n\tprivate:\r\n\t\tstd::shared_ptr<Node<ItemType>> headPtr;\r\n\t\tint itemCount;\r\n\t\t/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ getNodeAt(int position) const;\r\n\tpublic:\r\n\t\tLinkedList();\r\n\t\tLinkedList(const LinkedList<ItemType>& aList);\r\n\t\tvirtual ~LinkedList();\r\n\t\tbool isEmpty() const;\r\n\t\tint getLength() const;\r\n\t\tbool insert(int newPosition, const ItemType& newEntry);\r\n\t\tbool remove(int position);\r\n\t\tvoid clear();\r\n\t\tItemType getEntry(int position) const throw(PrecondViolatedExcept);\r\n\t\tItemType replace(int position, const ItemType& newEntry) throw(PrecondViolatedExcept);\r\n\t\tLinkedIterator<ItemType> begin() const;\r\n\t\tLinkedIterator<ItemType> end() const;\r\n};\r\n\r\ntemplate<class ItemType>\r\nclass LinkedList;\r\n\r\ntemplate<class ItemType>\r\nclass LinkedIterator : public std::iterator<str::random_iterator_tag, int>\r\n{\r\n\tprivate:\r\n\t\tconst std::shared_ptr<LinkedList<ItemType> containerPtr;\r\n\t\tstd::shared_ptr<Node<ItemType>> currentItemPtr;\r\n\tpublic:\r\n\t\tLinkedIterator(std::shared_ptr<LinkedLIst<ItemType>> someList, std::shared_ptr<Node<ItemType>> nodePtr = nullptr);\r\n\t\tconst ItemType operator*();\r\n\t\tconst ItemType operator*(const ItemType& anEntry);\r\n\t\tLinkedIterator<ItemType> operator++();\r\n\t\tLinkedIterator<ItemType> operator--();\r\n\t\tLinkedIterator<ItemType> operator+();\r\n\t\tLinkedIterator<ItemType> operator-();\r\n\t\tLinkedIterator<ItemType> operator+=();\r\n\t\tLinkedIterator<ItemType> operator-=();\r\n\t\tLinkedIterator<ItemType> operator<();\r\n\t\tLinkedIterator<ItemType> operator<=();\r\n\t\tLinkedIterator<ItemType> operator>();\r\n\t\tLinkedIterator<ItemType> operator>=();\r\n\t\tLinkedIterator<ItemType> operator[]();\r\n//\t\tLinkedIterator<ItemType> operator=();\r\n\t\tbool operator==(const LinkedIterator<ItemType>& rightHandSide) const;\r\n\t\tbool operator!=(const LinkedIterator<ItemType>& rightHandSide) const;\r\n};\r\n\r\n/*\r\nclass PrecondViolatedExcept : public std::exception\r\n{\r\n\tpublic:\r\n\t\tPrecondViolatedExcept(const std::string& message = \"\") : std::exception(\"Precondition violated: \" + message)\r\n\t\t{\r\n\t\t}\r\n};\r\n*/\r\n\r\n// implementations/class definitions:\r\n\r\ntemplate<class ItemType>\r\nNode<ItemType>::Node()\r\n{\r\n}\r\n\r\ntemplate<class ItemType>\r\nNode<ItemType>::Node(const ItemType& anItem) : item(anItem)\r\n{\r\n}\r\n\r\ntemplate<class ItemType>\r\nNode<ItemType::Node(const ItemType& anItem, std::shared_ptr<Node<ItemType>> nextNodePtr) : item(anItem), next(nextNodePtr)\r\n{\r\n}\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\ntemplate<class ItemType>\r\nNode<ItemType>* LinkedList<ItemType>::getNodeAt(int position) const\r\n{\r\n\t/*\r\n\t// for testing/debugging by programmers: this is only for use in case you've got the other methods that have (faulty) precondition checking/handling (pg 275-276, security note):\r\n\tassert((position >= 1) && (position <= itemCount));\r\n\t*/\r\n\tNode<ItemType>* curPtr = headPtr;\r\n\tfor(int skip = 1; skip < position; skip++)\r\n\t{\r\n\t\tcurPtr = curPtr->getNext();\r\n\t}\r\n\treturn curPtr;\r\n}\r\n\r\ntemplate<class ItemType>\r\nvoid Node<ItemType>::setItem(const ItemType& anItem)\r\n{\r\n\titem = anItem;\r\n}\r\n\r\ntemplate<class ItemType>\r\nvoid Node<ItemType>::setNext(std::shared_ptr<Node<ItemType>> nextNodePtr)\r\n{\r\n\tnext = nextNodePtr;\r\n}\r\n\r\ntemplate<class ItemType>\r\nItemType Node<ItemType>::getItem() const\r\n{\r\n\treturn item;\r\n}\r\n\r\ntemplate<class ItemType>\r\n/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ Node<ItemType>::getNext() const\r\n{\r\n\treturn next;\r\n}\r\n\r\n/*\r\nDoubleNode()\r\n{\r\n\t//\r\n}\r\n*/\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\ntemplate<class ItemType>\r\nLinkedList<ItemType>::LinkedList() : headptr(nullptr), itemCount(0)\r\n{\r\n}\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\ntemplate<class ItemType>\r\nItemType LinkedList<ItemType>::getEntry(int position) const throw(PrecondViolatedExcept)\r\n{\r\n\tbool ableToGet = (position >= 1) && (position <= itemCount);\r\n\tif(ableToGet)\r\n\t{\r\n\t\tNode<ItemType>* nodePtr = getNodeAt(position);\r\n\t\treturn nodePtr->getItem();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tstd:string message = \"getEntry() called with an empty list or invlaid position.\";\r\n\t\tthrow(PrecondViolatedExcept(message));\r\n\t}\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedList<ItemType>::insert(int newPosition, const ItemType& newEntry)\r\n{\r\n\tbool ableToInsert = (newPosition >= 1) && (newPosition <= itemCount + 1);\r\n\tif(ableToInsert)\r\n\t{\r\n\t\tauto newNodePtr = std::make_shared<Node<ItemType>>(newEntry);\r\n\t\tif(newPosition == 1)\r\n\t\t{\r\n\t\t\tnewNodePtr->setNext(headPtr);\r\n\t\t\theadPtr = newNodePtr;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tauto prePtr = getNodeAt(newPosition - 1);\r\n\t\t\tnewNodePtr->setNext(prevPtr->getNext());\r\n\t\t\tprevPtr->setNext(newNodePtr);\r\n\t\t}\r\n\t\titemCount++;\r\n\t}\r\n\treturn ableToInsert;\r\n}\r\n\r\ntemplate<class ItemType>\r\nbool LinkedList<ItemType>::remove(int position)\r\n{\r\n\tbool ableToRemove = (position >= 1) && (position <= itemCount);\r\n\tif(ableToRemove)\r\n\t{\r\n\t\tif(position == 1)\r\n\t\t{\r\n\t\t\theadPtr = headPtr->getNext();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tauto prevPtr = getNodeAt(position - 1);\r\n\t\t\tauto curPtr = prevPtr->getNext();\r\n\t\t\tprevPtr->setNext(curPtr->getNext());\r\n\t\t}\r\n\t\titemCount--;\r\n\t}\r\n\treturn ableToRemove;\r\n}\r\n\r\ntemplate<class ItemType>\r\nvoid LinkedList<ItemType>::clear()\r\n{\r\n\twhile(!isEmpty())\r\n\t{\r\n\t\theadPtr = nullptr;\r\n\t\titemCount = 0;\r\n\t}\r\n}\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\ntemplate<class ItemType>\r\nLinkedList<ItemType>::~LinkedList()\r\n{\r\n\tclear();\r\n}\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\n// need to finish this up (pg 281, see linked-based implementations of ADT bag in ch 4 and the ADT stack in ch 7: their copy constructors are quite similar to what we need here)\r\ntemplate<class ItemType>\r\nLinkedList<ItemType>::LinkedList(const LinkedList<ItemType>& aList) // Copy Constructor\r\n{\r\n\t//\r\n}\r\n\r\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\r\n// need to finish this up\r\ntemplate<class ItemType>\r\nItemType LinkedList<ItemType>::replace(int position, const ItemType& newEntry) throw(PrecondViolatedExcept)\r\n{\r\n\tItemType tempNode = this->getNodeAt(position);\r\n\ttempValue = tempNode.getItem();\r\n\ttempNode->setItem(newEntry);\r\n\treturn tempValue;\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedList<ItemType>::begin()\r\n{\r\n\treturn LinkedIterator<ItemType>(this, headPtr);\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedList<ItemType>::end()\r\n{\r\n\treturn LinkedIterator<ItemType>(this, nullptr);\r\n}\r\n\r\n// need to finish this up:\r\n/**/LinkedList<ItemType>::operator<</**/\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType>::LinkedIterator(std::shared_ptr<LinkedList<ItemType> someList, std::shared_ptr<Node<ItemType>> nodePtr) : containerPtr(someList), currentItemPtr(nodePtr)\r\n{\r\n}\r\n\r\ntemplate<class ItemType>\r\nconst ItemType LinkedInterior<ItemType>::operator*()\r\n{\r\n\treturn currentItemPtr->getItem();\r\n}\r\n\r\ntemplate<class ItemType>\r\nconst ItemType LinkedInterior<ItemType>::operator*(const ItemType& anEntry)\r\n{\r\n\treturn currentItemPtr->setItem(anEntry);\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator++()\r\n{\r\n\tcurrentItemPtr = currentItemPtr->getNext();\r\n\treturn *this;\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator--()\r\n{\r\n\tcurrentItemPtr = currentItemPtr->getPrevious();\r\n\treturn *this;\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator+()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator-()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator+=()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator-=()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator<()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator<=()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator>()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator>=()\r\n{\r\n\t//\r\n}\r\n\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator[]()\r\n{\r\n\t//\r\n}\r\n\r\n/*\r\ntemplate<class ItemType>\r\nLinkedIterator<ItemType> LinkedIterator<ItemType>::operator=()\r\n{\r\n\t//\r\n}\r\n*/\r\n\r\ntemplate<class ItemType>\r\nbool LinkedIterator<ItemType>::operator==(const LinkedIterator<ItemType>& rightHandSide) const\r\n{\r\n\treturn ((containerPtr == rightHandSide.containerPtr) && (currentItemPtr == rightHandSide.currentItemPtr));\r\n}\r\n\r\ntemplate<class ItemType>\r\nbool LinkedIterator<ItemType>::operator!=(const LinkedIterator<ItemType>& rightHandSide) const\r\n{\r\n\treturn ((containerPtr != rightHandSide.containerPtr) || (currentItemPtr != rightHandSide.currentItemPtr));\r\n}\r\n\r\n/*\r\nclass PrecondViolatedExcept : public std::exception\r\n{\r\n\tpublic:\r\n\t\tPrecondViolatedExcept(const std::string& message = \"\") : std::exception(\"Precondition violated: \" + message)\r\n\t\t{\r\n\t\t}\r\n};\r\n*/\r\n\r\n// need to finish this up:\r\n/**/::printList()\r\n{\r\n\tLinkedIterator<std::sring> currentIterator = myList.begin();\r\n\twhile(currentIterator != myList.end())\r\n\t{\r\n\t\tstd::cout << *currentIterator << \" \";\r\n\t\t++currentIterator;\r\n\t}\r\n}\r\n\r\n#endif\r\n```\r\n\r\n--------------\r\n\r\nand here's the project information/specifications/requirements:\r\n\r\n```\r\nTopic A Project – Due Tuesday, 9/7\r\n\r\nFor this project you will create a derived class of LinkedList called LinkedListValue.   As we discussed in class, the LinkedList class is position based in that the member functions use the position of data in the list in order to perform their operations.  However, most operations are usually data based where the member functions use data values.  LinkedListValue will use data based functions.  \r\n\r\nThe functions in LinkedList work well and should not be discarded, with one exception.  Therefore the LinkedListValue class will be data based but use the underlying  LinkedList functions to perform the actual work.  This means that data based values must be converted into position based values.\r\n  \r\nThe LinkedList class functions cannot be modified except to add in C++ 11 items and make the functions more efficient where appropriate.  The text identifies two methods (page 281) that are left for you to do.  There is also a third method which should be written.  You can add independent helper functions for the class if you need to.\r\n\r\nThe LinkedListValue class should prevent class clients from using the replace method of LinkedList (the exception mentioned above).   Further, since LinkedList uses positions, another function is required in LinkedListValue in order to use data to find items in the list.  This function must eventually use a LinkedList class function to access the list.  \r\n\r\nThe client uses three different data types with the classes.  For the first two you can see what the data is and what do to with it when you run TopicA.exe.  The final data type is the class soundtrack.  The class consists of the following data:\r\n\r\n•\tComposer\r\n•\tTitle\r\n•\tLabel\r\n•\tCatalog number\r\n•\tDate Recorded\r\n•\tDate CD released\r\n\r\nIt will be up to you to create the input file for the soundtrack data.  I strongly suggest making it as easy as possible for your program to read the data.  Call the input file \r\nTopic A Soundtrack List.txt.  \r\n\r\nHere is the data for you to use: \r\n\r\nComposer\tTitle\tLabel\tCatalog Number\tYear Recorded\tYear Released\r\nBernard Herrmann\tThe Egyptian\tVarese Sarabande\tVCL 1211 1128 9\t1954\t2011\r\nGeorges Delerue\tKing of Hearts\tVarese Sarabande\tSBS 2017\t1966\t2004\r\nDimitri Tiomkin\tThe Alamo\tPrometheus     \t XPCD 168\t11/09\t2010\r\nAkira Ifukube\tGodzilla\tLa-La Land     \t LLLCD 1022\t1954\t2004\r\nJohn Barry\tThe Lion in Winter\tLegacy         \t CK66133\t8/68\t1995\r\nMiklos Rozsa\tBen-Hur\tFSM             \tV15N1\t1959\t2012\r\nBronislau Kaper\tLord Jim\tFSM             \tV8N11\t12/64\t2005\r\nElmer Bernstein\tHawaii\tVarese Sarabande\tVCL 04031017\t6/66\t2003\r\nJerry Fielding\tThe Wild Bunch\tFSM             \tV16N1\t1969\t2013\r\nJohn Barry\tFrom Russia With Love\tEMI             \t72435-80588-2-6\t3/63\t2003\r\nBernard Herrmann\tThe Ghost and Mrs. Muir\tVarese Sarabande\tVCD 47254\t1947\t1985\r\nHoward Shore\tThe Fellowship of the Ring\tReprise        \t 49454-2\t2001\t2005\r\nErich Wolfgang Korngold\tThe Adventures of Robin Hood\tMarco Polo     \t8.225268\t2/03\t2003\r\nMaurice Jarre\tThe Train\tFSM             \tV10N8\t1964\t2007\r\nElmer Bernstein\tBirdman of Alcatraz\tVarese Sarabande\tVCL 11061054\t1962\t2006\r\nBernard Herrmann\tThe 7th Voyage of Sinbad\tPrometheus     \t XPCD 166\t1958\t2009\r\nElmer Bernstein\tTo Kill a Mockingbird\tIntrada         \t262\t1963\t2014\r\nMiklos Rozsa\tMoonfleet\tFSM             \tV6N20\t1/55\t2004\r\nWilliam Walton\tHenry V\tChandos         \tCHAN 8892\t5/90\t1990\r\nFranz Waxman\tThe Nun's Story\tStanyan       \t  STZ-114\t1958\t1991\r\n \r\n\r\nElmer Bernstein\tThe Magnificent Seven\tRyko            \tRCD 10741\t1960\t1998\r\nMaurice Jarre\tLawrence of Arabia\ttadlow music:   \tTADLOW012\t3/10\t2010\r\nDimitri Tiomkin\tThe Guns of Navarone\tVarese Sarabande\tVSD-5236\t1961\t1989\r\nElmer Bernstein\tCast A Giant Shadow\tVarese Sarabande\tVCL 05021008\t1966\t2002\r\nAlex North\tThe Shoes of the Fisherman\tFSM             \tV7N6\t9/68\t2004\r\nElmer Bernstein\tSummer and Smoke\tRCA             \t74321720592\t11/62\t1999\r\nBernard Herrmann\tPsycho\tVarese Sarabande\tVSD-5765\t9/96\t1997\r\nMiklos Rozsa\tEl Cid\tFSM             \tBox 04 Disc 13\t10/61\t2010\r\nElmer Bernstein\tThe Great Escape\tIntrada         \tMAF 7112\t1963\t2011\r\nBronislau Kaper\tMutiny on the Bounty\tFSM            \t V7N16\t1962\t2004\r\nPatrick Doyle\tMuch Ado About Nothing\tEpic           \t EX 54009\t3/93\t1993\r\n\r\nThe following are NOT equivalent, for example:\r\n\r\n•\t“FSM”\r\n•\t“FSM          “\r\n\r\nNotice the trailing blanks in the second example.  Your data cannot contain any trailing blanks.  In order to get around this, you can reformat the file.\r\n\r\nHere are some other items:\r\n\r\n•\tUse the following in TopicA.cpp if Visual Studio has warnings about the throw statements in the function headers:  #pragma warning( disable: 4290 )\r\n•\tRemember the Rule of Three regarding the functions that a class with dynamic data should have.\r\n•\tRemember which function should always be first in the client file.\r\n•\tThink about what pieces of main would work well as functions.\r\n•\tPut all the code for the class templates in the class header file rather than using separate header and implementation files.\r\n•\tWhen using inherited items in a class template derived from a class template, you should explicitly indicate that those are items inherited from the base class.  This means either using this->inheritedItem or using the colon operator as in BaseClass<T>::inheritedItem.  This is because the C++ standard states that on the first compiler pass the compiler has not done any instantiations of the base class template and does not, therefore, have the appropriate class available.  Visual Studio seems to handle this situation without any qualification while Xcode complains.\r\n•\tUpdate the code for C++ 11 items such as auto, uniform initialization, and smart pointers.  See C++ Interlude 4.  Generally, auto as a function return (which is really from C++ 14) does not work correctly on my Visual Studio.  Please do not use auto as a function return.\r\n•\tPerforming comparisons with soundtrack data will require some thinking.  For example, it should not be necessary to completely populate a soundtrack object in order to match just on title.  Stretch your ingenuity.  Give it a workout.\r\n•\tOverload << in the linked list class.\r\n•\tGet rid of assert.\r\n•\tBe sure to appropriately use const and &.\r\n•\tCall the client file TopicA.cpp.  Be sure to hand in your input file as well.  Specify in your program status if your program was compiled and run under Visual Studio or Xcode.  \r\n```\r\n\r\n-------------------------\r\n\r\nand here's the output from the professor's program run:\r\n\r\n```\r\n\r\nCreate int LinkedListValue llv1 using default constructor\r\n\r\n\r\nInsert items into llv1\r\n\r\n\r\nDisplay llv1:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nCreate Linked List ll1 which is a copy of llv1\r\n\r\n\r\nDisplay ll1:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nChange the fifth value of ll1 to 2015\r\n\r\n\r\nChange the tenth value of ll1 to 2016\r\nPrecondition Violated Exception: setEntry() called with an empty list or invalid position.\r\n\r\n\r\nDisplay ll1:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n2015\r\n-2345\r\n\r\n\r\n\r\n\r\nCreate LinkedListValue llv2 which is a copy of llv1\r\n\r\n\r\nDisplay llv2:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nRemove 63 from llv2\r\n\r\n63 was removed from llv2\r\n\r\n\r\nAttempt to remove 63 from llv2 again\r\n\r\n63 was NOT removed from llv2\r\n\r\n\r\nDisplay llv2:\r\n\r\nThere are 5 values in the list:\r\n-34\r\n2\r\n17\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nCreate LinkedListValue llv3 from llv2\r\n\r\n\r\nDisplay llv3:\r\n\r\nThere are 5 values in the list:\r\n-34\r\n2\r\n17\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nAssign llv3 the values from llv1\r\n\r\n\r\nDisplay llv3:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n225\r\n-2345\r\n\r\n\r\n\r\n\r\nAssign ll1 the values from llv3\r\n\r\n\r\nDisplay ll1:\r\n\r\nThere are 6 values in the list:\r\n-34\r\n2\r\n17\r\n63\r\n225\r\n-2345\r\n\r\n\r\n\r\nCreate string LinkedListValue llv4 using default constructor\r\n\r\n\r\nInsert items into llv4\r\n\r\n\r\nDisplay llv4:\r\n\r\nThere are 6 values in the list:\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\nData Structures\r\nUsing\r\nC++\r\n\r\n\r\n\r\n\r\nCreate llv5 from llv4\r\n\r\n\r\nDisplay llv5:\r\n\r\nThere are 6 values in the list:\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\nData Structures\r\nUsing\r\nC++\r\n\r\n\r\n\r\n\r\nDelete \"Data\" from llv5\r\n\"Data\" NOT deleted from llv5\r\n\r\n\r\nDelete \"Data Structures\" from llv5\r\n\"Data Structures\" deleted from llv5\r\n\r\n\r\nDisplay llv5:\r\n\r\nThere are 5 values in the list:\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\nUsing\r\nC++\r\n\r\n\r\n\r\n\r\nAssign llv5 to llv4\r\n\r\n\r\nDisplay llv4:\r\n\r\nThere are 5 values in the list:\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\n(redacted: my school class ID)\r\nUsing\r\nC++\r\n\r\n\r\n\r\n\r\nCreate soundtrack LinkedListValue llv6\r\n\r\n\r\nInsert values from file\r\n\r\n\r\nDisplay llv6:\r\n\r\nThere are 31 values in the list:\r\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\r\n\r\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\r\n\r\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\r\n\r\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\r\n\r\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\r\n\r\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\r\n\r\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\r\n\r\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\r\n\r\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\r\n\r\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\r\n\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\r\n\r\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\r\n\r\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\r\n\r\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\r\n\r\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\r\n\r\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\r\n\r\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\r\n\r\nWilliam Walton  Henry V  Chandos  CHAN 8892  5/90  1990\r\n\r\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\r\n\r\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\r\n\r\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\r\n\r\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\r\n\r\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\r\n\r\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\r\n\r\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\r\n\r\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\r\n\r\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\r\n\r\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\r\n\r\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\r\n\r\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\r\n\r\n\r\n\r\n\r\nCreate a new POINTER to a LinkedListValue pllv7, a copy of llv6\r\n\r\nDisplay llv7\r\n\r\nThere are 31 values in the list:\r\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\r\n\r\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\r\n\r\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\r\n\r\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\r\n\r\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\r\n\r\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\r\n\r\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\r\n\r\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\r\n\r\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\r\n\r\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\r\n\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\r\n\r\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\r\n\r\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\r\n\r\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\r\n\r\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\r\n\r\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\r\n\r\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\r\n\r\nWilliam Walton  Henry V  Chandos  CHAN 8892  5/90  1990\r\n\r\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\r\n\r\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\r\n\r\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\r\n\r\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\r\n\r\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\r\n\r\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\r\n\r\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\r\n\r\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\r\n\r\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\r\n\r\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\r\n\r\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\r\n\r\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\r\n\r\n\r\n\r\n\r\nDelete \"Henry V\" from pllv7\r\n\"Henry V\" removed from pllv7\r\n\r\n\r\nDisplay pllv7\r\n\r\nThere are 30 values in the list:\r\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\r\n\r\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\r\n\r\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\r\n\r\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\r\n\r\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\r\n\r\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\r\n\r\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\r\n\r\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\r\n\r\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\r\n\r\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\r\n\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\r\n\r\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\r\n\r\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\r\n\r\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\r\n\r\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\r\n\r\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\r\n\r\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\r\n\r\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\r\n\r\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\r\n\r\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\r\n\r\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\r\n\r\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\r\n\r\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\r\n\r\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\r\n\r\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\r\n\r\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\r\n\r\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\r\n\r\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\r\n\r\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\r\n\r\n\r\n\r\n\r\nDelete \"Henry V\" AGAIN from pllv7\r\n\"Henry V\" NOT removed from pllv7\r\n\r\n\r\nDisplay pllv7\r\n\r\nThere are 30 values in the list:\r\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\r\n\r\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\r\n\r\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\r\n\r\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\r\n\r\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\r\n\r\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\r\n\r\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\r\n\r\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\r\n\r\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\r\n\r\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\r\n\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\r\n\r\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\r\n\r\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\r\n\r\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\r\n\r\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\r\n\r\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\r\n\r\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\r\n\r\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\r\n\r\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\r\n\r\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\r\n\r\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\r\n\r\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\r\n\r\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\r\n\r\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\r\n\r\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\r\n\r\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\r\n\r\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\r\n\r\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\r\n\r\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\r\n\r\n\r\n\r\n\r\nAssign pllv7 to llv6\r\n\r\n\r\nDisplay llv6:\r\n\r\nThere are 30 values in the list:\r\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\r\n\r\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\r\n\r\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\r\n\r\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\r\n\r\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\r\n\r\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\r\n\r\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\r\n\r\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\r\n\r\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\r\n\r\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\r\n\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\r\n\r\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\r\n\r\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\r\n\r\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\r\n\r\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\r\n\r\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\r\n\r\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\r\n\r\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\r\n\r\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\r\n\r\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\r\n\r\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\r\n\r\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\r\n\r\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\r\n\r\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\r\n\r\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\r\n\r\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\r\n\r\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\r\n\r\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\r\n\r\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\r\n\r\n\r\n\r\n\r\nFind the soundtrack recorded in 1947 in pllv7\r\nThe soundtrack recorded in 1947 is in position 11 and is the following:\r\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\r\n\r\n\r\n\r\n\r\nProgram Ending Successfully\r\n\r\nPress Enter to end\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>out first project is to use a LinkedListValue (by Value), which (those by values determination) will be translated/converted to using its super/parent LinkedList (by position, and using Nodes) for containing and traversing the data (3 Data Types: int, string, and custom: soundtrack, which is from a data file, having 6 categories: composer, title, label, catelog number, year recorded, and date cd released --- of X quantity of them: data/records)</p>\n<p>I think I get vaguely the general idea of how to do it, but I'm totally new to implementing all of this stuff, especially together, so it's very OVER-whelming, and I'll be lucky if I can get all the syntax set up correctly just for the various compartmentalizations/parts of it (I've never learned even how to use iterators yet, nor how to set up and work with dictionaries --- in C++, I know of dictionaries thanks to quest --- but, I've no idea how to do so in C++ --- one of the things that I need to rush-learn, along with the iterators, sighs), on top of getting it set up correctly as a connected unit/project/code, lol.</p>\n<p>I'm still a bit sketchy on trying to set up a DoubleNode (being able to traverse the LinkedList in both directions), on top of if I can even get a Node (one direction of traversal) set up and working with everything else, lol.</p>\n<hr>\n<p>my understanding of the vague general idea/design/structure, is this:</p>\n<p>.</p>\n<p>compartmentalization/part 1/1A: (LinkedList + Node/DoubleNode) + compartmentalization/part 1/1B: Nodes/DoubleNodes: is the containment and connection for the data, and being able to act upon that data: (traverse and manipulate the data)<br>\n.|<br>\nV ^<br>\n...|<br>\ncompartmentalization/part 2/2A: LinkedListValue: my own class that determines how to find/get/traverse+manipulate the data (determines what data/what to do, by value, and then transitions/converts from that using by value to using by position for its parent/super LinkedList to do the actual data traversal+manipulation)<br>\n.|<br>\nV ^<br>\n...|<br>\ncompartmentalization/part 3/2B: getting the data from the input file (for the 'soundtrack' DataType) and organizing it in a way that my LinkedListValue (compartmentalization/part 2) can use, to translate that into by position so that the LinkedList+Node (compartmentalization/part 1) can use it.</p>\n<p>and</p>\n<p>compartmentalization/part 2/2A: LinkedListValue: my own class that determines how to find/get/traverse+manipulate the data (determines what data/what to do, by value, and then transitions/converts from that using by value to using by position for its parent/super LinkedList to do the actual data traversal+manipulation)<br>\n.|<br>\nV ^<br>\n...|<br>\nclient/testing program/(has main)</p>\n<p>.</p>\n<p>is this generally the correct structure/design of what we need to do?</p>\n<hr>\n<p>and here's what I've pieced together so far... I only got until this tues. (aug. 6) to get this project done (we had more time, but I'm way behind, as I didn't know about using iterators and/or dictionaries, until last class meeting, and am totally new to this too):</p>\n<p>(as can be seen, I still got a ton of stuff to try to do... and then hope it'll all work... HAH... sighs)</p>\n<p>(I'm still just working on the header files/data, haven't even gotten to working on the LinkedListValue class stuff yet nor the handling and organization/management of the input file's data)</p>\n<pre><code>/*\nTopicA: Interface\n@file: TopicA.h\n*/\n\n// linker redundency safeguard:\n\n#ifndef TOPIC_A_INTERFACE_\n#define TOPIC_A_INTERFACE_\n\n// libraries/references:\n\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;memory&gt;\n#include &lt;iterator&gt;\n#include &lt;stdexcept&gt;\n\n// headers/class prototypes:\n\ntemplate&lt;class ItemType&gt;\nclass ListInterface\n{\n\tpublic:\n\t\tvirtual bool isEmpty() const = 0;\n\t\tvirtual int getLength() const = 0;\n\t\tvirtual bool insert(int newPosition, const ItemType&amp; newEntry) = 0;\n\t\tvirtual bool remove(int position) = 0;\n\t\tvirtual void clear() = 0;\n\t\tvirtual ItemType getEntry(int position) const = 0;\n\t\tvirtual ItemType replace(int position, const ItemType&amp; newEntry) = 0;\n\t\tvirtual ~ListInterface() {};\n};\n\ntemplate&lt;class ItemType&gt;\nclass Node\n{\n\tprivate:\n\t\tItemType item;\n\t\tstd::shared_ptr&lt;Node&lt;ItemType&gt;&gt; next;\n\tpublic:\n\t\tNode();\n\t\tNode(const ItemType&amp; anItem);\n\t\tNode(const ItemType&amp; anItem, std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nextNodePtr);\n\t\tvoid setItem(const ItemType&amp; anItem);\n\t\tvoid setNext(std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nextNodePtr);\n\t\tItemType getItem() const;\n\t\t/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ getNext() const;\n};\n\n/*\ntemplate&lt;class ItemType&gt;\nclass DoubleNode\n{\n\tprivate:\n\t\tItemType item;\n\t\tstd::shared_ptr&lt;Node&lt;ItemType&gt;&gt; next;\n\t\tstd::weak_ptr&lt;DoubleNode&lt;ItemType&gt;&gt; previous;\n\tpublic:\n\t\tDoubleNode();\n\t\tDoubleNode(const ItemType&amp; anItem);\n\t\tDoubleNode(const ItemType&amp; anItem, std::shared_ptr&lt;DoubleNode&lt;ItemType&gt;&gt; nextNodePtr, std::weak_ptr&lt;DoubleNode&lt;ItemType&gt;&gt; previousNodePtr);\n\t\tvoid setItem(const ItemType&amp; anItem);\n\t\tvoid setNext(std::shared_ptr&lt;DoubleNode&lt;ItemType&gt;&gt; nextNodePtr);\n\t\tvoid setPrevious(std::weak_ptr&lt;DoubleNode&lt;ItemType&gt;&gt; previousNodePtr);\n\t\tItemType getItem() const;\n\t\t//auto: needs to be changed, as can't use it, as it doesn't work for prof// getNext() const;\n\t\t//auto: needs to be changed, as can't use it, as it doesn't work for prof// getPrevious() const;\n};\n*/\n\ntemplate&lt;class ItemType&gt;\nclass LinkedList : public ListInterface&lt;ItemType&gt;\n{\n\tprivate:\n\t\tstd::shared_ptr&lt;Node&lt;ItemType&gt;&gt; headPtr;\n\t\tint itemCount;\n\t\t/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ getNodeAt(int position) const;\n\tpublic:\n\t\tLinkedList();\n\t\tLinkedList(const LinkedList&lt;ItemType&gt;&amp; aList);\n\t\tvirtual ~LinkedList();\n\t\tbool isEmpty() const;\n\t\tint getLength() const;\n\t\tbool insert(int newPosition, const ItemType&amp; newEntry);\n\t\tbool remove(int position);\n\t\tvoid clear();\n\t\tItemType getEntry(int position) const throw(PrecondViolatedExcept);\n\t\tItemType replace(int position, const ItemType&amp; newEntry) throw(PrecondViolatedExcept);\n\t\tLinkedIterator&lt;ItemType&gt; begin() const;\n\t\tLinkedIterator&lt;ItemType&gt; end() const;\n};\n\ntemplate&lt;class ItemType&gt;\nclass LinkedList;\n\ntemplate&lt;class ItemType&gt;\nclass LinkedIterator : public std::iterator&lt;str::random_iterator_tag, int&gt;\n{\n\tprivate:\n\t\tconst std::shared_ptr&lt;LinkedList&lt;ItemType&gt; containerPtr;\n\t\tstd::shared_ptr&lt;Node&lt;ItemType&gt;&gt; currentItemPtr;\n\tpublic:\n\t\tLinkedIterator(std::shared_ptr&lt;LinkedLIst&lt;ItemType&gt;&gt; someList, std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nodePtr = nullptr);\n\t\tconst ItemType operator*();\n\t\tconst ItemType operator*(const ItemType&amp; anEntry);\n\t\tLinkedIterator&lt;ItemType&gt; operator++();\n\t\tLinkedIterator&lt;ItemType&gt; operator--();\n\t\tLinkedIterator&lt;ItemType&gt; operator+();\n\t\tLinkedIterator&lt;ItemType&gt; operator-();\n\t\tLinkedIterator&lt;ItemType&gt; operator+=();\n\t\tLinkedIterator&lt;ItemType&gt; operator-=();\n\t\tLinkedIterator&lt;ItemType&gt; operator&lt;();\n\t\tLinkedIterator&lt;ItemType&gt; operator&lt;=();\n\t\tLinkedIterator&lt;ItemType&gt; operator&gt;();\n\t\tLinkedIterator&lt;ItemType&gt; operator&gt;=();\n\t\tLinkedIterator&lt;ItemType&gt; operator[]();\n//\t\tLinkedIterator&lt;ItemType&gt; operator=();\n\t\tbool operator==(const LinkedIterator&lt;ItemType&gt;&amp; rightHandSide) const;\n\t\tbool operator!=(const LinkedIterator&lt;ItemType&gt;&amp; rightHandSide) const;\n};\n\n/*\nclass PrecondViolatedExcept : public std::exception\n{\n\tpublic:\n\t\tPrecondViolatedExcept(const std::string&amp; message = \"\") : std::exception(\"Precondition violated: \" + message)\n\t\t{\n\t\t}\n};\n*/\n\n// implementations/class definitions:\n\ntemplate&lt;class ItemType&gt;\nNode&lt;ItemType&gt;::Node()\n{\n}\n\ntemplate&lt;class ItemType&gt;\nNode&lt;ItemType&gt;::Node(const ItemType&amp; anItem) : item(anItem)\n{\n}\n\ntemplate&lt;class ItemType&gt;\nNode&lt;ItemType::Node(const ItemType&amp; anItem, std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nextNodePtr) : item(anItem), next(nextNodePtr)\n{\n}\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\ntemplate&lt;class ItemType&gt;\nNode&lt;ItemType&gt;* LinkedList&lt;ItemType&gt;::getNodeAt(int position) const\n{\n\t/*\n\t// for testing/debugging by programmers: this is only for use in case you've got the other methods that have (faulty) precondition checking/handling (pg 275-276, security note):\n\tassert((position &gt;= 1) &amp;&amp; (position &lt;= itemCount));\n\t*/\n\tNode&lt;ItemType&gt;* curPtr = headPtr;\n\tfor(int skip = 1; skip &lt; position; skip++)\n\t{\n\t\tcurPtr = curPtr-&gt;getNext();\n\t}\n\treturn curPtr;\n}\n\ntemplate&lt;class ItemType&gt;\nvoid Node&lt;ItemType&gt;::setItem(const ItemType&amp; anItem)\n{\n\titem = anItem;\n}\n\ntemplate&lt;class ItemType&gt;\nvoid Node&lt;ItemType&gt;::setNext(std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nextNodePtr)\n{\n\tnext = nextNodePtr;\n}\n\ntemplate&lt;class ItemType&gt;\nItemType Node&lt;ItemType&gt;::getItem() const\n{\n\treturn item;\n}\n\ntemplate&lt;class ItemType&gt;\n/*auto: needs to be changed, as can't use it, as it doesn't work for prof*/ Node&lt;ItemType&gt;::getNext() const\n{\n\treturn next;\n}\n\n/*\nDoubleNode()\n{\n\t//\n}\n*/\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\ntemplate&lt;class ItemType&gt;\nLinkedList&lt;ItemType&gt;::LinkedList() : headptr(nullptr), itemCount(0)\n{\n}\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\ntemplate&lt;class ItemType&gt;\nItemType LinkedList&lt;ItemType&gt;::getEntry(int position) const throw(PrecondViolatedExcept)\n{\n\tbool ableToGet = (position &gt;= 1) &amp;&amp; (position &lt;= itemCount);\n\tif(ableToGet)\n\t{\n\t\tNode&lt;ItemType&gt;* nodePtr = getNodeAt(position);\n\t\treturn nodePtr-&gt;getItem();\n\t}\n\telse\n\t{\n\t\tstd:string message = \"getEntry() called with an empty list or invlaid position.\";\n\t\tthrow(PrecondViolatedExcept(message));\n\t}\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedList&lt;ItemType&gt;::insert(int newPosition, const ItemType&amp; newEntry)\n{\n\tbool ableToInsert = (newPosition &gt;= 1) &amp;&amp; (newPosition &lt;= itemCount + 1);\n\tif(ableToInsert)\n\t{\n\t\tauto newNodePtr = std::make_shared&lt;Node&lt;ItemType&gt;&gt;(newEntry);\n\t\tif(newPosition == 1)\n\t\t{\n\t\t\tnewNodePtr-&gt;setNext(headPtr);\n\t\t\theadPtr = newNodePtr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tauto prePtr = getNodeAt(newPosition - 1);\n\t\t\tnewNodePtr-&gt;setNext(prevPtr-&gt;getNext());\n\t\t\tprevPtr-&gt;setNext(newNodePtr);\n\t\t}\n\t\titemCount++;\n\t}\n\treturn ableToInsert;\n}\n\ntemplate&lt;class ItemType&gt;\nbool LinkedList&lt;ItemType&gt;::remove(int position)\n{\n\tbool ableToRemove = (position &gt;= 1) &amp;&amp; (position &lt;= itemCount);\n\tif(ableToRemove)\n\t{\n\t\tif(position == 1)\n\t\t{\n\t\t\theadPtr = headPtr-&gt;getNext();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tauto prevPtr = getNodeAt(position - 1);\n\t\t\tauto curPtr = prevPtr-&gt;getNext();\n\t\t\tprevPtr-&gt;setNext(curPtr-&gt;getNext());\n\t\t}\n\t\titemCount--;\n\t}\n\treturn ableToRemove;\n}\n\ntemplate&lt;class ItemType&gt;\nvoid LinkedList&lt;ItemType&gt;::clear()\n{\n\twhile(!isEmpty())\n\t{\n\t\theadPtr = nullptr;\n\t\titemCount = 0;\n\t}\n}\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\ntemplate&lt;class ItemType&gt;\nLinkedList&lt;ItemType&gt;::~LinkedList()\n{\n\tclear();\n}\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\n// need to finish this up (pg 281, see linked-based implementations of ADT bag in ch 4 and the ADT stack in ch 7: their copy constructors are quite similar to what we need here)\ntemplate&lt;class ItemType&gt;\nLinkedList&lt;ItemType&gt;::LinkedList(const LinkedList&lt;ItemType&gt;&amp; aList) // Copy Constructor\n{\n\t//\n}\n\n// (maybe) need to fix up still for smart/managed (shared) ptrs and auto\n// need to finish this up\ntemplate&lt;class ItemType&gt;\nItemType LinkedList&lt;ItemType&gt;::replace(int position, const ItemType&amp; newEntry) throw(PrecondViolatedExcept)\n{\n\tItemType tempNode = this-&gt;getNodeAt(position);\n\ttempValue = tempNode.getItem();\n\ttempNode-&gt;setItem(newEntry);\n\treturn tempValue;\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedList&lt;ItemType&gt;::begin()\n{\n\treturn LinkedIterator&lt;ItemType&gt;(this, headPtr);\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedList&lt;ItemType&gt;::end()\n{\n\treturn LinkedIterator&lt;ItemType&gt;(this, nullptr);\n}\n\n// need to finish this up:\n/**/LinkedList&lt;ItemType&gt;::operator&lt;&lt;/**/\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt;::LinkedIterator(std::shared_ptr&lt;LinkedList&lt;ItemType&gt; someList, std::shared_ptr&lt;Node&lt;ItemType&gt;&gt; nodePtr) : containerPtr(someList), currentItemPtr(nodePtr)\n{\n}\n\ntemplate&lt;class ItemType&gt;\nconst ItemType LinkedInterior&lt;ItemType&gt;::operator*()\n{\n\treturn currentItemPtr-&gt;getItem();\n}\n\ntemplate&lt;class ItemType&gt;\nconst ItemType LinkedInterior&lt;ItemType&gt;::operator*(const ItemType&amp; anEntry)\n{\n\treturn currentItemPtr-&gt;setItem(anEntry);\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator++()\n{\n\tcurrentItemPtr = currentItemPtr-&gt;getNext();\n\treturn *this;\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator--()\n{\n\tcurrentItemPtr = currentItemPtr-&gt;getPrevious();\n\treturn *this;\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator+()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator-()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator+=()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator-=()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator&lt;()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator&lt;=()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator&gt;()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator&gt;=()\n{\n\t//\n}\n\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator[]()\n{\n\t//\n}\n\n/*\ntemplate&lt;class ItemType&gt;\nLinkedIterator&lt;ItemType&gt; LinkedIterator&lt;ItemType&gt;::operator=()\n{\n\t//\n}\n*/\n\ntemplate&lt;class ItemType&gt;\nbool LinkedIterator&lt;ItemType&gt;::operator==(const LinkedIterator&lt;ItemType&gt;&amp; rightHandSide) const\n{\n\treturn ((containerPtr == rightHandSide.containerPtr) &amp;&amp; (currentItemPtr == rightHandSide.currentItemPtr));\n}\n\ntemplate&lt;class ItemType&gt;\nbool LinkedIterator&lt;ItemType&gt;::operator!=(const LinkedIterator&lt;ItemType&gt;&amp; rightHandSide) const\n{\n\treturn ((containerPtr != rightHandSide.containerPtr) || (currentItemPtr != rightHandSide.currentItemPtr));\n}\n\n/*\nclass PrecondViolatedExcept : public std::exception\n{\n\tpublic:\n\t\tPrecondViolatedExcept(const std::string&amp; message = \"\") : std::exception(\"Precondition violated: \" + message)\n\t\t{\n\t\t}\n};\n*/\n\n// need to finish this up:\n/**/::printList()\n{\n\tLinkedIterator&lt;std::sring&gt; currentIterator = myList.begin();\n\twhile(currentIterator != myList.end())\n\t{\n\t\tstd::cout &lt;&lt; *currentIterator &lt;&lt; \" \";\n\t\t++currentIterator;\n\t}\n}\n\n#endif\n</code></pre>\n<hr>\n<p>and here's the project information/specifications/requirements:</p>\n<pre><code>Topic A Project – Due Tuesday, 9/7\n\nFor this project you will create a derived class of LinkedList called LinkedListValue.   As we discussed in class, the LinkedList class is position based in that the member functions use the position of data in the list in order to perform their operations.  However, most operations are usually data based where the member functions use data values.  LinkedListValue will use data based functions.  \n\nThe functions in LinkedList work well and should not be discarded, with one exception.  Therefore the LinkedListValue class will be data based but use the underlying  LinkedList functions to perform the actual work.  This means that data based values must be converted into position based values.\n  \nThe LinkedList class functions cannot be modified except to add in C++ 11 items and make the functions more efficient where appropriate.  The text identifies two methods (page 281) that are left for you to do.  There is also a third method which should be written.  You can add independent helper functions for the class if you need to.\n\nThe LinkedListValue class should prevent class clients from using the replace method of LinkedList (the exception mentioned above).   Further, since LinkedList uses positions, another function is required in LinkedListValue in order to use data to find items in the list.  This function must eventually use a LinkedList class function to access the list.  \n\nThe client uses three different data types with the classes.  For the first two you can see what the data is and what do to with it when you run TopicA.exe.  The final data type is the class soundtrack.  The class consists of the following data:\n\n•\tComposer\n•\tTitle\n•\tLabel\n•\tCatalog number\n•\tDate Recorded\n•\tDate CD released\n\nIt will be up to you to create the input file for the soundtrack data.  I strongly suggest making it as easy as possible for your program to read the data.  Call the input file \nTopic A Soundtrack List.txt.  \n\nHere is the data for you to use: \n\nComposer\tTitle\tLabel\tCatalog Number\tYear Recorded\tYear Released\nBernard Herrmann\tThe Egyptian\tVarese Sarabande\tVCL 1211 1128 9\t1954\t2011\nGeorges Delerue\tKing of Hearts\tVarese Sarabande\tSBS 2017\t1966\t2004\nDimitri Tiomkin\tThe Alamo\tPrometheus     \t XPCD 168\t11/09\t2010\nAkira Ifukube\tGodzilla\tLa-La Land     \t LLLCD 1022\t1954\t2004\nJohn Barry\tThe Lion in Winter\tLegacy         \t CK66133\t8/68\t1995\nMiklos Rozsa\tBen-Hur\tFSM             \tV15N1\t1959\t2012\nBronislau Kaper\tLord Jim\tFSM             \tV8N11\t12/64\t2005\nElmer Bernstein\tHawaii\tVarese Sarabande\tVCL 04031017\t6/66\t2003\nJerry Fielding\tThe Wild Bunch\tFSM             \tV16N1\t1969\t2013\nJohn Barry\tFrom Russia With Love\tEMI             \t72435-80588-2-6\t3/63\t2003\nBernard Herrmann\tThe Ghost and Mrs. Muir\tVarese Sarabande\tVCD 47254\t1947\t1985\nHoward Shore\tThe Fellowship of the Ring\tReprise        \t 49454-2\t2001\t2005\nErich Wolfgang Korngold\tThe Adventures of Robin Hood\tMarco Polo     \t8.225268\t2/03\t2003\nMaurice Jarre\tThe Train\tFSM             \tV10N8\t1964\t2007\nElmer Bernstein\tBirdman of Alcatraz\tVarese Sarabande\tVCL 11061054\t1962\t2006\nBernard Herrmann\tThe 7th Voyage of Sinbad\tPrometheus     \t XPCD 166\t1958\t2009\nElmer Bernstein\tTo Kill a Mockingbird\tIntrada         \t262\t1963\t2014\nMiklos Rozsa\tMoonfleet\tFSM             \tV6N20\t1/55\t2004\nWilliam Walton\tHenry V\tChandos         \tCHAN 8892\t5/90\t1990\nFranz Waxman\tThe Nun's Story\tStanyan       \t  STZ-114\t1958\t1991\n \n\nElmer Bernstein\tThe Magnificent Seven\tRyko            \tRCD 10741\t1960\t1998\nMaurice Jarre\tLawrence of Arabia\ttadlow music:   \tTADLOW012\t3/10\t2010\nDimitri Tiomkin\tThe Guns of Navarone\tVarese Sarabande\tVSD-5236\t1961\t1989\nElmer Bernstein\tCast A Giant Shadow\tVarese Sarabande\tVCL 05021008\t1966\t2002\nAlex North\tThe Shoes of the Fisherman\tFSM             \tV7N6\t9/68\t2004\nElmer Bernstein\tSummer and Smoke\tRCA             \t74321720592\t11/62\t1999\nBernard Herrmann\tPsycho\tVarese Sarabande\tVSD-5765\t9/96\t1997\nMiklos Rozsa\tEl Cid\tFSM             \tBox 04 Disc 13\t10/61\t2010\nElmer Bernstein\tThe Great Escape\tIntrada         \tMAF 7112\t1963\t2011\nBronislau Kaper\tMutiny on the Bounty\tFSM            \t V7N16\t1962\t2004\nPatrick Doyle\tMuch Ado About Nothing\tEpic           \t EX 54009\t3/93\t1993\n\nThe following are NOT equivalent, for example:\n\n•\t“FSM”\n•\t“FSM          “\n\nNotice the trailing blanks in the second example.  Your data cannot contain any trailing blanks.  In order to get around this, you can reformat the file.\n\nHere are some other items:\n\n•\tUse the following in TopicA.cpp if Visual Studio has warnings about the throw statements in the function headers:  #pragma warning( disable: 4290 )\n•\tRemember the Rule of Three regarding the functions that a class with dynamic data should have.\n•\tRemember which function should always be first in the client file.\n•\tThink about what pieces of main would work well as functions.\n•\tPut all the code for the class templates in the class header file rather than using separate header and implementation files.\n•\tWhen using inherited items in a class template derived from a class template, you should explicitly indicate that those are items inherited from the base class.  This means either using this-&gt;inheritedItem or using the colon operator as in BaseClass&lt;T&gt;::inheritedItem.  This is because the C++ standard states that on the first compiler pass the compiler has not done any instantiations of the base class template and does not, therefore, have the appropriate class available.  Visual Studio seems to handle this situation without any qualification while Xcode complains.\n•\tUpdate the code for C++ 11 items such as auto, uniform initialization, and smart pointers.  See C++ Interlude 4.  Generally, auto as a function return (which is really from C++ 14) does not work correctly on my Visual Studio.  Please do not use auto as a function return.\n•\tPerforming comparisons with soundtrack data will require some thinking.  For example, it should not be necessary to completely populate a soundtrack object in order to match just on title.  Stretch your ingenuity.  Give it a workout.\n•\tOverload &lt;&lt; in the linked list class.\n•\tGet rid of assert.\n•\tBe sure to appropriately use const and &amp;.\n•\tCall the client file TopicA.cpp.  Be sure to hand in your input file as well.  Specify in your program status if your program was compiled and run under Visual Studio or Xcode.  \n</code></pre>\n<hr>\n<p>and here's the output from the professor's program run:</p>\n<pre><code>\nCreate int LinkedListValue llv1 using default constructor\n\n\nInsert items into llv1\n\n\nDisplay llv1:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n225\n-2345\n\n\n\n\nCreate Linked List ll1 which is a copy of llv1\n\n\nDisplay ll1:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n225\n-2345\n\n\n\n\nChange the fifth value of ll1 to 2015\n\n\nChange the tenth value of ll1 to 2016\nPrecondition Violated Exception: setEntry() called with an empty list or invalid position.\n\n\nDisplay ll1:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n2015\n-2345\n\n\n\n\nCreate LinkedListValue llv2 which is a copy of llv1\n\n\nDisplay llv2:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n225\n-2345\n\n\n\n\nRemove 63 from llv2\n\n63 was removed from llv2\n\n\nAttempt to remove 63 from llv2 again\n\n63 was NOT removed from llv2\n\n\nDisplay llv2:\n\nThere are 5 values in the list:\n-34\n2\n17\n225\n-2345\n\n\n\n\nCreate LinkedListValue llv3 from llv2\n\n\nDisplay llv3:\n\nThere are 5 values in the list:\n-34\n2\n17\n225\n-2345\n\n\n\n\nAssign llv3 the values from llv1\n\n\nDisplay llv3:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n225\n-2345\n\n\n\n\nAssign ll1 the values from llv3\n\n\nDisplay ll1:\n\nThere are 6 values in the list:\n-34\n2\n17\n63\n225\n-2345\n\n\n\nCreate string LinkedListValue llv4 using default constructor\n\n\nInsert items into llv4\n\n\nDisplay llv4:\n\nThere are 6 values in the list:\n(redacted: my school class ID)\n(redacted: my school class ID)\n(redacted: my school class ID)\nData Structures\nUsing\nC++\n\n\n\n\nCreate llv5 from llv4\n\n\nDisplay llv5:\n\nThere are 6 values in the list:\n(redacted: my school class ID)\n(redacted: my school class ID)\n(redacted: my school class ID)\nData Structures\nUsing\nC++\n\n\n\n\nDelete \"Data\" from llv5\n\"Data\" NOT deleted from llv5\n\n\nDelete \"Data Structures\" from llv5\n\"Data Structures\" deleted from llv5\n\n\nDisplay llv5:\n\nThere are 5 values in the list:\n(redacted: my school class ID)\n(redacted: my school class ID)\n(redacted: my school class ID)\nUsing\nC++\n\n\n\n\nAssign llv5 to llv4\n\n\nDisplay llv4:\n\nThere are 5 values in the list:\n(redacted: my school class ID)\n(redacted: my school class ID)\n(redacted: my school class ID)\nUsing\nC++\n\n\n\n\nCreate soundtrack LinkedListValue llv6\n\n\nInsert values from file\n\n\nDisplay llv6:\n\nThere are 31 values in the list:\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\n\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\n\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\n\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\n\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\n\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\n\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\n\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\n\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\n\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\n\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\n\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\n\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\n\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\n\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\n\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\n\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\n\nWilliam Walton  Henry V  Chandos  CHAN 8892  5/90  1990\n\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\n\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\n\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\n\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\n\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\n\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\n\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\n\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\n\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\n\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\n\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\n\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\n\n\n\n\nCreate a new POINTER to a LinkedListValue pllv7, a copy of llv6\n\nDisplay llv7\n\nThere are 31 values in the list:\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\n\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\n\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\n\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\n\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\n\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\n\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\n\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\n\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\n\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\n\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\n\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\n\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\n\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\n\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\n\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\n\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\n\nWilliam Walton  Henry V  Chandos  CHAN 8892  5/90  1990\n\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\n\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\n\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\n\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\n\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\n\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\n\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\n\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\n\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\n\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\n\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\n\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\n\n\n\n\nDelete \"Henry V\" from pllv7\n\"Henry V\" removed from pllv7\n\n\nDisplay pllv7\n\nThere are 30 values in the list:\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\n\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\n\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\n\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\n\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\n\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\n\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\n\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\n\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\n\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\n\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\n\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\n\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\n\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\n\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\n\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\n\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\n\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\n\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\n\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\n\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\n\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\n\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\n\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\n\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\n\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\n\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\n\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\n\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\n\n\n\n\nDelete \"Henry V\" AGAIN from pllv7\n\"Henry V\" NOT removed from pllv7\n\n\nDisplay pllv7\n\nThere are 30 values in the list:\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\n\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\n\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\n\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\n\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\n\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\n\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\n\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\n\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\n\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\n\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\n\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\n\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\n\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\n\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\n\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\n\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\n\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\n\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\n\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\n\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\n\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\n\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\n\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\n\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\n\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\n\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\n\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\n\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\n\n\n\n\nAssign pllv7 to llv6\n\n\nDisplay llv6:\n\nThere are 30 values in the list:\nBernard Herrmann  The Egyptian  Varese Sarabande  VCL 1211 1128 9  1954  2011\n\nGeorges Delerue  King of Hearts  Varese Sarabande  SBS 2017  1966  2004\n\nDimitri Tiomkin  The Alamo  Prometheus  XPCD 168  11/09  2010\n\nAkira Ifukube  Godzilla  La-La Land  LLLCD 1022  1954  2004\n\nJohn Barry  The Lion in Winter  Legacy  CK66133  8/68  1995\n\nMiklos Rozsa  Ben-Hur  FSM  V15N1  1959  2012\n\nBronislau Kaper  Lord Jim  FSM  V8N11  12/64  2005\n\nElmer Bernstein  Hawaii  Varese Sarabande  VCL 04031017  6/66  2003\n\nJerry Fielding  The Wild Bunch  FSM  V16N1  1969  2013\n\nJohn Barry  From Russia With Love  EMI  72435-80588-2-6  3/63  2003\n\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\nHoward Shore  The Fellowship of the Ring  Reprise  49454-2  2001  2005\n\nErich Wolfgang Korngold  The Adventures of Robin Hood  Marco Polo  8.225268  2/03  2003\n\nMaurice Jarre  The Train  FSM  V10N8  1964  2007\n\nElmer Bernstein  Birdman of Alcatraz  Varese Sarabande  VCL 11061054  1962  2006\n\nBernard Herrmann  The 7th Voyage of Sinbad  Prometheus  XPCD 166  1958  2009\n\nElmer Bernstein  To Kill a Mockingbird  Intrada  262  1963  2014\n\nMiklos Rozsa  Moonfleet  FSM  V6N20  1/55  2004\n\nFranz Waxman  The Nun's Story  Stanyan  STZ-114  1958  1991\n\nElmer Bernstein  The Magnificent Seven  Ryko  RCD 10741  1960  1998\n\nMaurice Jarre  Lawrence of Arabia  tadlow music:  TADLOW012  3/10  2010\n\nDimitri Tiomkin  The Guns of Navarone  Varese Sarabande  VSD-5236  1961  1989\n\nElmer Bernstein  Cast A Giant Shadow  Varese Sarabande  VCL 05021008  1966  2002\n\nAlex North  The Shoes of the Fisherman  FSM  V7N6  9/68  2004\n\nElmer Bernstein  Summer and Smoke  RCA  74321720592  11/62  1999\n\nBernard Herrmann  Psycho  Varese Sarabande  VSD-5765  9/96  1997\n\nMiklos Rozsa  El Cid  FSM  Box 04 Disc 13  10/61  2010\n\nElmer Bernstein  The Great Escape  Intrada  MAF 7112  1963  2011\n\nBronislau Kaper  Mutiny on the Bounty  FSM  V7N16  1962  2004\n\nPatrick Doyle  Much Ado About Nothing  Epic  EX 54009  3/93  1993\n\n\n\n\nFind the soundtrack recorded in 1947 in pllv7\nThe soundtrack recorded in 1947 is in position 11 and is the following:\nBernard Herrmann  The Ghost and Mrs. Muir  Varese Sarabande  VCD 47254  1947  1985\n\n\n\n\nProgram Ending Successfully\n\nPress Enter to end\n</code></pre>\n\n",
      "PostDate": "2016-09-02T21:39:44.8982323Z",
      "LastEditDate": "2016-09-02T22:51:33.1304619Z"
    },
    {
      "PostId": "48bb57f6-71f4-4157-a33e-d54077cad9bd",
      "UserId": 82,
      "Username": "Alex Warren",
      "AvatarUrl": "http://i.imgur.com/xlYHjF4b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Please stop spamming the other forums and bumping this. It's not likely you will get help with this here.",
      "EditableFormat": "markdown",
      "HTML": "<p>Please stop spamming the other forums and bumping this. It's not likely you will get help with this here.</p>\n\n",
      "PostDate": "2016-09-03T07:58:03.1279662Z",
      "LastEditDate": null
    },
    {
      "PostId": "f111efa2-178e-4f40-83ec-977884969a33",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Jay was very courteous/gratious-enough, helping me with my last class (which I was soooo thankful for):\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/5944/help-assembly-language-masm-386\r\n\r\nso, trying my luck again here... always worth a shot/try... at least. \r\n\r\nI was hoping to get some help again for this new programming class I'm taking, I'd just pm Jay and Pixie and see/ask if they would be willing to help, if they be willing, know this programming, and/or had the time, but there's currently no pm feature available, so I've been bumping in hopes that they would see the thread, and let me know, if they would/can or can't/won't. I've got a deadline, and any help I can get would be greatly appreciative. I'll stop the bump spamming. If they're not aware of the thread, could you let them know (or anyone else who would be interested in helping) about it. I'm just trying to get/find any help with this, as it's all new to me, and am/was desperate to find any help I could on my school programming project as I need/needed it, so sorry about the bumping and etc, sighs.",
      "EditableFormat": "markdown",
      "HTML": "<p>Jay was very courteous/gratious-enough, helping me with my last class (which I was soooo thankful for):</p>\n<p>http://textadventures.co.uk/forum/general/topic/5944/help-assembly-language-masm-386</p>\n<p>so, trying my luck again here... always worth a shot/try... at least.</p>\n<p>I was hoping to get some help again for this new programming class I'm taking, I'd just pm Jay and Pixie and see/ask if they would be willing to help, if they be willing, know this programming, and/or had the time, but there's currently no pm feature available, so I've been bumping in hopes that they would see the thread, and let me know, if they would/can or can't/won't. I've got a deadline, and any help I can get would be greatly appreciative. I'll stop the bump spamming. If they're not aware of the thread, could you let them know (or anyone else who would be interested in helping) about it. I'm just trying to get/find any help with this, as it's all new to me, and am/was desperate to find any help I could on my school programming project as I need/needed it, so sorry about the bumping and etc, sighs.</p>\n\n",
      "PostDate": "2016-09-03T08:26:29.6168199Z",
      "LastEditDate": "2016-09-05T19:22:19.9963092Z"
    },
    {
      "PostId": "a0379f78-174e-4e36-a022-39ab06278f9d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Don't look at me, I don't know any C++.",
      "EditableFormat": "markdown",
      "HTML": "<p>Don't look at me, I don't know any C++.</p>\n\n",
      "PostDate": "2016-09-03T15:27:00.1941417Z",
      "LastEditDate": null
    },
    {
      "PostId": "ea71bba5-e36a-4d7f-9d2c-2ef6425e548b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "no problem, thanks for letting me know. I guess I'm stuck with seeing if Jay will help me again, I don't like it, as he already had helped me so much with Assembly, but I'm stuck again, trying to learn something new in a short time and thus am desperate again for help, sighs. Programming is hard... at least/especially, if you don't already know how to do it, lol\r\n\r\n(my apologies, I thought that you knew C++)\r\n\r\nWhat, programming/scripting languages/whatever-other-coding-stuff, do you know Pixie? (just so I'll know from now on / in the future)",
      "EditableFormat": "markdown",
      "HTML": "<p>no problem, thanks for letting me know. I guess I'm stuck with seeing if Jay will help me again, I don't like it, as he already had helped me so much with Assembly, but I'm stuck again, trying to learn something new in a short time and thus am desperate again for help, sighs. Programming is hard... at least/especially, if you don't already know how to do it, lol</p>\n<p>(my apologies, I thought that you knew C++)</p>\n<p>What, programming/scripting languages/whatever-other-coding-stuff, do you know Pixie? (just so I'll know from now on / in the future)</p>\n\n",
      "PostDate": "2016-09-03T17:54:46.3341643Z",
      "LastEditDate": "2016-09-03T17:59:27.30322Z"
    },
    {
      "PostId": "6d73a1bc-1ff5-41d8-8665-c3f2a95ff126",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just saw this. I can take a look when I get home. You can always feel free to email me as well, since the PM stuff has gone away, and since I'm off working on a different castle in the clouds these days.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just saw this. I can take a look when I get home. You can always feel free to email me as well, since the PM stuff has gone away, and since I'm off working on a different castle in the clouds these days.</p>\n\n",
      "PostDate": "2016-09-09T12:01:01.9127952Z",
      "LastEditDate": null
    },
    {
      "PostId": "358b2b0c-97e7-485c-a0b1-1494e4381226",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, I just saw that you had until Aug. 6. Sorry I didn't catch it sooner!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, I just saw that you had until Aug. 6. Sorry I didn't catch it sooner!</p>\n\n",
      "PostDate": "2016-09-09T17:46:17.1683876Z",
      "LastEditDate": null
    },
    {
      "PostId": "65c27ad9-aff5-4b5f-9c2e-84bb5f156000",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you for the reply Jay, really appreciate how helpful you've been for me (and for everyone too on the site/with quest)!\r\n\r\n--------\r\n\r\nNp, and it's alright, I was just desperate again, having trouble with understanding the project (I really didn't like/understood why once we found, via traverse/iterate/hop, the item by value comparison, to then find, via traverse/iterate/hop, to the item again using by position -- so, I was struck in trying to figure out how to do it without having to do an un-needed re-traversal with the by position/value, when we can just use a pointer to access it right then already, why get back to where we're already at in the chain?, just as the 'by position' functions were doing anyways. Maybe, it has something to do with keeping/preserving the 'walls / compartmentalization', though doesn't the classes do all of that for us, meh. Also, I wasn't sure how to go about the 'soundtrack' data type, in how to set it up either due too spending too much time on trying to just understand the syntax and how the nodes and etc worked, and mistakenly looking into iterators which we weren't to use so early with this first project - I thought the iterators were tied with the overloading - we were suppose to overload, but not with using iterators), sighs. We've got the code from the prof., so I should be able to understand it on my own from studying it. As I tried to work on it, I just kept getting myself more confused and overthinking it (and annoyed as I've been working on it every day too), I guess I just got really unlucky with a 'writer's block' with programming, sighs. I really want to try to do these on my own (able to do most projects on own), but I was really having a hard time with this one, on top of the  3 months of summer, causing me to forget everything... I've only had winter break (1 month) priorly, as I've just started the programming classes only 2/3 symesters ago, and the 1 month off didn't cause any issues, but this 3 months of summer did. I'm just frustrated/disappointed,  with myself, and was getting desperate, sighs.\r\n\r\nI figured you were probably gone/busy, so no worries. I was just hoping I could find/get someone before the due date, it was worth a shot, as I wasn't making any progress on my own. I was too lazy during the summer, and was caught unprepared for when school started back up, with this programming assignment. I'm really going to try to do these projects on my own, and try to not get desperate posting for help. I really need to get these projects figured out on my own. Just upset at self with this lousy start in the class.\r\n\r\n--------------\r\n\r\nRegardless of how I do, this class is going to be really great, as I'll be finally learning this stuff, which I've been wanting to learn since I learned to program from quest. Finally, I'm learning about organization/design (Data Structures/Management). If it takes me more attempts, not much I can do about it. Just got to keep learning, until I know the stuff really well.\r\n\r\n------------\r\n\r\nAlso, I'm trying to look into finding help, but it's not easy to find help with programming, and even if can find someone, may not be able to afford it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you for the reply Jay, really appreciate how helpful you've been for me (and for everyone too on the site/with quest)!</p>\n<hr>\n<p>Np, and it's alright, I was just desperate again, having trouble with understanding the project (I really didn't like/understood why once we found, via traverse/iterate/hop, the item by value comparison, to then find, via traverse/iterate/hop, to the item again using by position -- so, I was struck in trying to figure out how to do it without having to do an un-needed re-traversal with the by position/value, when we can just use a pointer to access it right then already, why get back to where we're already at in the chain?, just as the 'by position' functions were doing anyways. Maybe, it has something to do with keeping/preserving the 'walls / compartmentalization', though doesn't the classes do all of that for us, meh. Also, I wasn't sure how to go about the 'soundtrack' data type, in how to set it up either due too spending too much time on trying to just understand the syntax and how the nodes and etc worked, and mistakenly looking into iterators which we weren't to use so early with this first project - I thought the iterators were tied with the overloading - we were suppose to overload, but not with using iterators), sighs. We've got the code from the prof., so I should be able to understand it on my own from studying it. As I tried to work on it, I just kept getting myself more confused and overthinking it (and annoyed as I've been working on it every day too), I guess I just got really unlucky with a 'writer's block' with programming, sighs. I really want to try to do these on my own (able to do most projects on own), but I was really having a hard time with this one, on top of the  3 months of summer, causing me to forget everything... I've only had winter break (1 month) priorly, as I've just started the programming classes only 2/3 symesters ago, and the 1 month off didn't cause any issues, but this 3 months of summer did. I'm just frustrated/disappointed,  with myself, and was getting desperate, sighs.</p>\n<p>I figured you were probably gone/busy, so no worries. I was just hoping I could find/get someone before the due date, it was worth a shot, as I wasn't making any progress on my own. I was too lazy during the summer, and was caught unprepared for when school started back up, with this programming assignment. I'm really going to try to do these projects on my own, and try to not get desperate posting for help. I really need to get these projects figured out on my own. Just upset at self with this lousy start in the class.</p>\n<hr>\n<p>Regardless of how I do, this class is going to be really great, as I'll be finally learning this stuff, which I've been wanting to learn since I learned to program from quest. Finally, I'm learning about organization/design (Data Structures/Management). If it takes me more attempts, not much I can do about it. Just got to keep learning, until I know the stuff really well.</p>\n<hr>\n<p>Also, I'm trying to look into finding help, but it's not easy to find help with programming, and even if can find someone, may not be able to afford it.</p>\n\n",
      "PostDate": "2016-09-09T19:53:59.5361557Z",
      "LastEditDate": "2016-09-09T20:24:58.394191Z"
    }
  ]
}
