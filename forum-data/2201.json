{
  "Topic": {
    "TopicId": "2201",
    "ForumId": "10",
    "Title": "inventory limit",
    "LastUpdated": "2009-10-26T12:20:01+00:00",
    "ReplyCount": 15
  },
  "Posts": [
    {
      "PostId": "17076",
      "UserId": 0,
      "Username": "insidethecircle",
      "UserAvatar": null,
      "UserGravatar": "e1b486ae9c09dd50a9f1c6e1269c7b0e",
      "EditableText": "now i know this has been asked before but for the life of me i can't find it.\nhow you do express a limit on your inventory?\nthanks",
      "EditableFormat": "bbcode",
      "HTML": "now i know this has been asked before but for the life of me i can't find it.<br/>how you do express a limit on your inventory?<br/>thanks",
      "PostDate": "2009-10-22T11:59:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17077",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "If you're not considering weight and volume:\n\n1. increment a numeric variable every time the player\n  a. takes something\n  b. is given something\n2. decrement that same variable any time the player\n  a. drop something\n  b. has something taken from him/her\n\nBefore allowing the player to take something (or have something given to them), make sure that the numeric variable you're tracking would not exceed some maximum value.",
      "EditableFormat": "bbcode",
      "HTML": "If you're not considering weight and volume:<br/><br/>1. increment a numeric variable every time the player<br/>  a. takes something<br/>  b. is given something<br/>2. decrement that same variable any time the player<br/>  a. drop something<br/>  b. has something taken from him/her<br/><br/>Before allowing the player to take something (or have something given to them), make sure that the numeric variable you're tracking would not exceed some maximum value.",
      "PostDate": "2009-10-22T12:27:34+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17078",
      "UserId": 0,
      "Username": "Wonderjudge",
      "UserAvatar": null,
      "UserGravatar": "29fd1b3b35ac2ca468be63961f946852",
      "EditableText": "Overcat's way is better than mine. I did a procedure checkinv. Every time the player types take &lt;object&gt; it runs \nit sets a numeric variable to 0 then runs a check for every object in the game. if the player has the object it increments.\nAt the end if the variable is = (whatever limit) then you wont take it.\nThe only reason I did it this way was because I already had the game done and threw this in as an afterthought and it was easier than going back through all my code to see when a player lost or gained something.\nWonderjudge.",
      "EditableFormat": "bbcode",
      "HTML": "Overcat's way is better than mine. I did a procedure checkinv. Every time the player types take &lt;object&gt; it runs <br/>it sets a numeric variable to 0 then runs a check for every object in the game. if the player has the object it increments.<br/>At the end if the variable is = (whatever limit) then you wont take it.<br/>The only reason I did it this way was because I already had the game done and threw this in as an afterthought and it was easier than going back through all my code to see when a player lost or gained something.<br/>Wonderjudge.",
      "PostDate": "2009-10-22T14:42:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17079",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I disagree.  Wonderjudge's method is better.  Overcat's method violates &quot;Don't repeat yourself&quot;.  It's easy for things to get out of sync.  (Every time you move something, you have to check whether it's being held.  If you forget, the player will lose holding capacity for no reason.)\n\nOne other thing.  Be careful about making held things concealed / invisible.  This can also have the effect of taking away carrying capacity.",
      "EditableFormat": "bbcode",
      "HTML": "I disagree.  Wonderjudge's method is better.  Overcat's method violates &quot;Don't repeat yourself&quot;.  It's easy for things to get out of sync.  (Every time you move something, you have to check whether it's being held.  If you forget, the player will lose holding capacity for no reason.)<br/><br/>One other thing.  Be careful about making held things concealed / invisible.  This can also have the effect of taking away carrying capacity.",
      "PostDate": "2009-10-22T23:48:01+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17080",
      "UserId": 0,
      "Username": "Wonderjudge",
      "UserAvatar": null,
      "UserGravatar": "29fd1b3b35ac2ca468be63961f946852",
      "EditableText": "My method however created a little lag as I had so many ojects in the game. However I have just discovered a better way (alas it always happens after the work is done)\nItems in inventory are actually stored in a hidden room that the game creates called &quot;inventory&quot;.\nSo if you follow the same procedure but instead of running a script for each object in the game you do it for each object in the room &quot;inventory&quot;. And you can save yourself a braincramp if you put in if the object is available increment variable.\nWonderjudge.",
      "EditableFormat": "bbcode",
      "HTML": "My method however created a little lag as I had so many ojects in the game. However I have just discovered a better way (alas it always happens after the work is done)<br/>Items in inventory are actually stored in a hidden room that the game creates called &quot;inventory&quot;.<br/>So if you follow the same procedure but instead of running a script for each object in the game you do it for each object in the room &quot;inventory&quot;. And you can save yourself a braincramp if you put in if the object is available increment variable.<br/>Wonderjudge.",
      "PostDate": "2009-10-22T23:54:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17081",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Did you actually test that second method for speed?  I thought it would wind up doing the same thing.\n\n(And how many objects did you have that looping over all of them produced a noticeable slowdown?)",
      "EditableFormat": "bbcode",
      "HTML": "Did you actually test that second method for speed?  I thought it would wind up doing the same thing.<br/><br/>(And how many objects did you have that looping over all of them produced a noticeable slowdown?)",
      "PostDate": "2009-10-23T03:03:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17082",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Getting out of sync may indeed by an issue down the road.  Good point.  Depends how you structure it, and if you expect your game to increase in complexity (a good bet?).  It is easy to create a checkpoint procedure that fires whenever the player gains or loses something.  You'd use this procedure instead of the built-in 'move', 'lose', or 'gain' script commands:\n\ndo &lt;move(#object#; #room#)&gt;\n\nas opposed to\n\nmove &lt;#object#; #room#&gt;\n\nIt's not too lengthy, you only have to write it once (the procedure), and no looping is required in the logic.  (Unfortunately, lag due to looping has been an issue for me in my Quest endeavors.  Hence I look for ways to minimize it from the get-go.)  Granted, if you only allow three-ish items in your inventory, it's not that big a deal to loop through them.\n\n[quote:f2y0i965](And how many objects did you have that looping over all of them produced a noticeable slowdown?)[/quote:f2y0i965]\n\nAnywhere from 5-50, depending on what you do with each object, I'll bet!  It seems to me that calling certain built-in functions (such as $numberparameters$) bogs things right down.  (This is an educated guess - still testing that.)  I've also noticed tangible differences in performance between different machines, both Pentium 4.",
      "EditableFormat": "bbcode",
      "HTML": "Getting out of sync may indeed by an issue down the road.  Good point.  Depends how you structure it, and if you expect your game to increase in complexity (a good bet?).  It is easy to create a checkpoint procedure that fires whenever the player gains or loses something.  You'd use this procedure instead of the built-in 'move', 'lose', or 'gain' script commands:<br/><br/>do &lt;move(#object#; #room#)&gt;<br/><br/>as opposed to<br/><br/>move &lt;#object#; #room#&gt;<br/><br/>It's not too lengthy, you only have to write it once (the procedure), and no looping is required in the logic.  (Unfortunately, lag due to looping has been an issue for me in my Quest endeavors.  Hence I look for ways to minimize it from the get-go.)  Granted, if you only allow three-ish items in your inventory, it's not that big a deal to loop through them.<br/><br/><blockquote><p>(And how many objects did you have that looping over all of them produced a noticeable slowdown?)</p></blockquote><br/><br/>Anywhere from 5-50, depending on what you do with each object, I'll bet!  It seems to me that calling certain built-in functions (such as $numberparameters$) bogs things right down.  (This is an educated guess - still testing that.)  I've also noticed tangible differences in performance between different machines, both Pentium 4.",
      "PostDate": "2009-10-23T15:07:45+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17083",
      "UserId": 0,
      "Username": "Wonderjudge",
      "UserAvatar": null,
      "UserGravatar": "29fd1b3b35ac2ca468be63961f946852",
      "EditableText": "Second method is way better. No lagg. In shipwrecked I allow you to carry 13 items. So since there is only ever 13 items in the room inventory it only needs to do the loop 13 times. No lagg. When I made shipwrecked I have it testing every item in the game which is like 100+. So there is a little lagg when you pick something up.\nWonderjudge.",
      "EditableFormat": "bbcode",
      "HTML": "Second method is way better. No lagg. In shipwrecked I allow you to carry 13 items. So since there is only ever 13 items in the room inventory it only needs to do the loop 13 times. No lagg. When I made shipwrecked I have it testing every item in the game which is like 100+. So there is a little lagg when you pick something up.<br/>Wonderjudge.",
      "PostDate": "2009-10-23T15:51:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17085",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "A loop over all the objects in the game caused lag on a high-end computer with just a hundred objects?  That sucks.",
      "EditableFormat": "bbcode",
      "HTML": "A loop over all the objects in the game caused lag on a high-end computer with just a hundred objects?  That sucks.",
      "PostDate": "2009-10-23T18:11:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17086",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:10mc79i5]A loop over all the objects in the game caused lag on a high-end computer with just a hundred objects? That sucks.[/quote:10mc79i5]\n\nA discovery, to be sure, that took the bright out of my eye and the bushy from my tail.  I found this problem whilst working on a large, single-player fantasy RPG.  I assumed the lag issue would scale down.\n\nBad assumption.\n\nAfter your remark about how this sucks, I decided to do a little testing.  I threw together a small ASL file with 100 objects (generated on startup), and then forced the game to iterate over all those objects after every player turn.  To my utter surprise, there was zero delay (using one of the aforementioned Pentium 4's).  But I [i:10mc79i5]knew[/i:10mc79i5] I was getting lag on other projects (including but not limited to the RPG).  So what was going on?\n\nWell, after a little messin' around, I decided to include a large library file (the full version of my [url=http&#58;//sites&#46;google&#46;com/site/queststuff/list-library:10mc79i5]list library endeavour[/url:10mc79i5]).  It's 191K, and about 6000+ lines of ASL (with generous white space).  I didn't call any of the routines from this library file, mind you, just included it.\n\nLo' and behold, lag emerges.  So I copied the library file two more times, renamed the copies, and then included them also.  The lag tripled.  \n\nDoes the total size of your ASL, regardless of whether or not it is being used, affect the speed of your game?  Here is the ASL file I tested with:\n\n[code:10mc79i5]'!include &lt;type_list_full&#46;lib&gt;\n\ndefine options\t\n\tdebug on\n\tpanes disabled\nend define\n\ndefine game &lt;LoopLag&gt;\n\n\tasl-version &lt;410&gt;\n\tgametype singleplayer\n\tstart &lt;Home&gt;\t\n\tgame version &lt;1&#46;0&gt;\n\tgame author &lt;J&#46; Dobson&gt;\n\tgame copyright &lt;© 2009 JDG Inc&#46;&gt;\n\t\n\tbackground &lt;black&gt;\n\tdefault fontname &lt;arial&gt;\n\tdefault fontsize &lt;10&gt;\n\tforeground &lt;White&gt;\n\t\n\tstartscript {\t\t\n\t\t\n\t\tset numeric &lt;noObjects; 100&gt;\n\t\tclear\n\t\tmsg &lt;Generating %noObjects% objects in %noObjects% different rooms&#46;&#46;&#46;|xn&gt;\n\t\tpause &lt;1&gt;\n\t\t\n\t\tset numeric &lt;i; 0&gt;\n\t\tset numeric &lt;n; 0&gt;\t\t\n\t\t\n\t\tfor &lt;i; 1; %noObjects%&gt; {\n\t\t\n\t\t\tcreate room &lt;nowhere_%i%&gt;\n\t\t\tclone &lt;someitem; someitem_%i%; nowhere_%i%&gt;\t\t\t\n\t\t\n\t\t}\n\t\t\n\t\tmsg &lt;done!&gt;\n\t}\n\t\n\tafterturn {\n\t\n\t\tset &lt;i; 0&gt;\n\t\tset string &lt;msg; Tagged objects&#58; &gt;\t\t\t\t\n\t\t\n\t\tfor each object in game {\t\t\n\t\t\n\t\t\tinc &lt;i&gt;\n\t\t\tdo &lt;SomeProcedure(#quest&#46;thing#)&gt;\t\t\t\n\t\t}\n\t\t\n\t\tmsg &lt;Turn complete&#46;  Iterated over %i% objects&#58; |n&gt;\n\t\tmsg &lt;#msg#&gt;\n\t}\t\t\n\t\nend define\n\ndefine room &lt;Home&gt;\n\t\n\talias &lt;Home&gt;\n\tlook &lt;You're home&#46;&gt;\t\n\t\nend define\n\ndefine room &lt;nowhere&gt;\n\n\talias &lt;Nowhere&gt;\n\tlook &lt;You really shouldn't be here&#46;&gt;\n\t\n\tdefine item &lt;someitem&gt;\n\t\n\t\tlook &lt;Some item&#46;&gt;\n\t\t\n\tend define\n\t\nend define\n\ndefine procedure &lt;SomeProcedure&gt;\n\n\tif ($numberparameters$ &lt;&gt; 1) then {\n\t\t\n\t\tdebug &lt;Invalid number of parameters&gt;\n\t}\n\telse {\t\t\n\t\t\n\t\tset string &lt;p1; $parameter(1)$&gt;\t\t\n\t\t\n\t\tset &lt;n; $rand(1; 100)$&gt;\n\t\tif (%n% &lt; 11) then property &lt;#p1#; tagged&gt; else property &lt;#p1#; not tagged&gt;\n\t\t\t\n\t\tif property &lt;#p1#; tagged&gt; then set &lt;msg; #msg# #p1#&gt;\n\t}\n\nend define[/code:10mc79i5]\n\nI don't know whether total size affects speed, but it seems as though the more procedures one has defined, the longer it takes to call up any given procedure.  I assume this is because, however the procedures are stored in Quest, the lookup speed for them is dismal.  (Object and room definitions don't seem to have this problem.)\n\nIf I remove the single quote in front of the first line ('!include &lt;type_list_full.lib), noticeable lag is produced.  If I keep it there, the lag disappears.  On the other hand, if I both remove the single quote, [i:10mc79i5]and[/i:10mc79i5] move the functionality contained in SomeProcedure to execute in-line with the [i:10mc79i5]afterturn[/i:10mc79i5] script, the lag is [i:10mc79i5]almost[/i:10mc79i5] nil.  (But not quite.)  \n\nI had always assumed the built-in script commands were causing the problem, but now it appears it's how routines are stored internally in Quest.  A fix may be to store procedures/functions in the same manner that objects and rooms are stored.  Any thoughts?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>A loop over all the objects in the game caused lag on a high-end computer with just a hundred objects? That sucks.</p></blockquote><br/><br/>A discovery, to be sure, that took the bright out of my eye and the bushy from my tail.  I found this problem whilst working on a large, single-player fantasy RPG.  I assumed the lag issue would scale down.<br/><br/>Bad assumption.<br/><br/>After your remark about how this sucks, I decided to do a little testing.  I threw together a small ASL file with 100 objects (generated on startup), and then forced the game to iterate over all those objects after every player turn.  To my utter surprise, there was zero delay (using one of the aforementioned Pentium 4's).  But I <span style=\"font-style:italic;\">knew</span> I was getting lag on other projects (including but not limited to the RPG).  So what was going on?<br/><br/>Well, after a little messin' around, I decided to include a large library file (the full version of my <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/list-library\" rel=\"nofollow\">list library endeavour</a>).  It's 191K, and about 6000+ lines of ASL (with generous white space).  I didn't call any of the routines from this library file, mind you, just included it.<br/><br/>Lo' and behold, lag emerges.  So I copied the library file two more times, renamed the copies, and then included them also.  The lag tripled.  <br/><br/>Does the total size of your ASL, regardless of whether or not it is being used, affect the speed of your game?  Here is the ASL file I tested with:<br/><br/><pre><code>'!include &lt;type_list_full&#46;lib&gt;<br/><br/>define options\t<br/>\tdebug on<br/>\tpanes disabled<br/>end define<br/><br/>define game &lt;LoopLag&gt;<br/><br/>\tasl-version &lt;410&gt;<br/>\tgametype singleplayer<br/>\tstart &lt;Home&gt;\t<br/>\tgame version &lt;1&#46;0&gt;<br/>\tgame author &lt;J&#46; Dobson&gt;<br/>\tgame copyright &lt;© 2009 JDG Inc&#46;&gt;<br/>\t<br/>\tbackground &lt;black&gt;<br/>\tdefault fontname &lt;arial&gt;<br/>\tdefault fontsize &lt;10&gt;<br/>\tforeground &lt;White&gt;<br/>\t<br/>\tstartscript {\t\t<br/>\t\t<br/>\t\tset numeric &lt;noObjects; 100&gt;<br/>\t\tclear<br/>\t\tmsg &lt;Generating %noObjects% objects in %noObjects% different rooms&#46;&#46;&#46;|xn&gt;<br/>\t\tpause &lt;1&gt;<br/>\t\t<br/>\t\tset numeric &lt;i; 0&gt;<br/>\t\tset numeric &lt;n; 0&gt;\t\t<br/>\t\t<br/>\t\tfor &lt;i; 1; %noObjects%&gt; {<br/>\t\t<br/>\t\t\tcreate room &lt;nowhere_%i%&gt;<br/>\t\t\tclone &lt;someitem; someitem_%i%; nowhere_%i%&gt;\t\t\t<br/>\t\t<br/>\t\t}<br/>\t\t<br/>\t\tmsg &lt;done!&gt;<br/>\t}<br/>\t<br/>\tafterturn {<br/>\t<br/>\t\tset &lt;i; 0&gt;<br/>\t\tset string &lt;msg; Tagged objects&#58; &gt;\t\t\t\t<br/>\t\t<br/>\t\tfor each object in game {\t\t<br/>\t\t<br/>\t\t\tinc &lt;i&gt;<br/>\t\t\tdo &lt;SomeProcedure(#quest&#46;thing#)&gt;\t\t\t<br/>\t\t}<br/>\t\t<br/>\t\tmsg &lt;Turn complete&#46;  Iterated over %i% objects&#58; |n&gt;<br/>\t\tmsg &lt;#msg#&gt;<br/>\t}\t\t<br/>\t<br/>end define<br/><br/>define room &lt;Home&gt;<br/>\t<br/>\talias &lt;Home&gt;<br/>\tlook &lt;You're home&#46;&gt;\t<br/>\t<br/>end define<br/><br/>define room &lt;nowhere&gt;<br/><br/>\talias &lt;Nowhere&gt;<br/>\tlook &lt;You really shouldn't be here&#46;&gt;<br/>\t<br/>\tdefine item &lt;someitem&gt;<br/>\t<br/>\t\tlook &lt;Some item&#46;&gt;<br/>\t\t<br/>\tend define<br/>\t<br/>end define<br/><br/>define procedure &lt;SomeProcedure&gt;<br/><br/>\tif ($numberparameters$ &lt;&gt; 1) then {<br/>\t\t<br/>\t\tdebug &lt;Invalid number of parameters&gt;<br/>\t}<br/>\telse {\t\t<br/>\t\t<br/>\t\tset string &lt;p1; $parameter(1)$&gt;\t\t<br/>\t\t<br/>\t\tset &lt;n; $rand(1; 100)$&gt;<br/>\t\tif (%n% &lt; 11) then property &lt;#p1#; tagged&gt; else property &lt;#p1#; not tagged&gt;<br/>\t\t\t<br/>\t\tif property &lt;#p1#; tagged&gt; then set &lt;msg; #msg# #p1#&gt;<br/>\t}<br/><br/>end define</code></pre><br/><br/>I don't know whether total size affects speed, but it seems as though the more procedures one has defined, the longer it takes to call up any given procedure.  I assume this is because, however the procedures are stored in Quest, the lookup speed for them is dismal.  (Object and room definitions don't seem to have this problem.)<br/><br/>If I remove the single quote in front of the first line ('!include &lt;type_list_full.lib), noticeable lag is produced.  If I keep it there, the lag disappears.  On the other hand, if I both remove the single quote, <span style=\"font-style:italic;\">and</span> move the functionality contained in SomeProcedure to execute in-line with the <span style=\"font-style:italic;\">afterturn</span> script, the lag is <span style=\"font-style:italic;\">almost</span> nil.  (But not quite.)  <br/><br/>I had always assumed the built-in script commands were causing the problem, but now it appears it's how routines are stored internally in Quest.  A fix may be to store procedures/functions in the same manner that objects and rooms are stored.  Any thoughts?",
      "PostDate": "2009-10-23T19:48:28+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17087",
      "UserId": 0,
      "Username": "Wonderjudge",
      "UserAvatar": null,
      "UserGravatar": "29fd1b3b35ac2ca468be63961f946852",
      "EditableText": "That is strange... Usually procedures are well liked by all because of they cut back on the amount of code you use and make it easier to detect a problem. Alot of procedures is usually the makings of a good programmer. I am usually not one of those. I have been accused of being spaghetti ish alot. I'm working on it though.\nWonderjudge.",
      "EditableFormat": "bbcode",
      "HTML": "That is strange... Usually procedures are well liked by all because of they cut back on the amount of code you use and make it easier to detect a problem. Alot of procedures is usually the makings of a good programmer. I am usually not one of those. I have been accused of being spaghetti ish alot. I'm working on it though.<br/>Wonderjudge.",
      "PostDate": "2009-10-23T19:59:11+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17088",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "That explains it.  Quest handles braces by creating an internal procedure.  If procedure calls are slow in bad situations, that explains why you had a problem.",
      "EditableFormat": "bbcode",
      "HTML": "That explains it.  Quest handles braces by creating an internal procedure.  If procedure calls are slow in bad situations, that explains why you had a problem.",
      "PostDate": "2009-10-23T21:43:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17089",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "I've had a look at this and the code for finding procedures was rather inefficient. I've now fixed this for Quest 4.1.2, and it's nice and speedy even with 100,000 procedures.",
      "EditableFormat": "bbcode",
      "HTML": "I've had a look at this and the code for finding procedures was rather inefficient. I've now fixed this for Quest 4.1.2, and it's nice and speedy even with 100,000 procedures.",
      "PostDate": "2009-10-24T11:57:51+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17090",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:2zciwqks]I've now fixed this for Quest 4.1.2, and it's nice and speedy even with 100,000 procedures.[/quote:2zciwqks]\n\nGreat news, Alex!  This means some of my earlier (discarded) efforts may just work their way out of the graveyard.  (I assume the fix for the procedures affects functions equally.  Am I wrong?)  Looks like [url=http&#58;//sites&#46;google&#46;com/site/queststuff/adventureco:2zciwqks]Adventure Co.[/url:2zciwqks] is back in business!  And the full version of the list library, which I knew to be too laggy, should now be release-able.\n\nAs a matter of curiousity, did any other of the ASL elements utilize the same/similar internal search routines as the procedures?  So, for instance, if I have 100,000 types, will this cause lag as well?  What about 100,000 actions within an object?  100,000 properties?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I've now fixed this for Quest 4.1.2, and it's nice and speedy even with 100,000 procedures.</p></blockquote><br/><br/>Great news, Alex!  This means some of my earlier (discarded) efforts may just work their way out of the graveyard.  (I assume the fix for the procedures affects functions equally.  Am I wrong?)  Looks like <a href=\"http&#58;//sites&#46;google&#46;com/site/queststuff/adventureco\" rel=\"nofollow\">Adventure Co.</a> is back in business!  And the full version of the list library, which I knew to be too laggy, should now be release-able.<br/><br/>As a matter of curiousity, did any other of the ASL elements utilize the same/similar internal search routines as the procedures?  So, for instance, if I have 100,000 types, will this cause lag as well?  What about 100,000 actions within an object?  100,000 properties?",
      "PostDate": "2009-10-24T12:42:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17091",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Functions, selection and text blocks should also be quicker, though procedures was by far the most significant, especially with big &quot;for each&quot; blocks as the same code would be called over and over again.",
      "EditableFormat": "bbcode",
      "HTML": "Functions, selection and text blocks should also be quicker, though procedures was by far the most significant, especially with big &quot;for each&quot; blocks as the same code would be called over and over again.",
      "PostDate": "2009-10-24T13:42:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "17092",
      "UserId": 0,
      "Username": "insidethecircle",
      "UserAvatar": null,
      "UserGravatar": "e1b486ae9c09dd50a9f1c6e1269c7b0e",
      "EditableText": "whoah!\ni came back from a nice wekend to see a virtual snowstorm of replies\nthanks guys",
      "EditableFormat": "bbcode",
      "HTML": "whoah!<br/>i came back from a nice wekend to see a virtual snowstorm of replies<br/>thanks guys",
      "PostDate": "2009-10-26T12:20:01+00:00",
      "LastEditDate": null
    }
  ]
}
