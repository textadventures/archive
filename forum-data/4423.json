{
  "Topic": {
    "TopicId": "4423",
    "ForumId": "10",
    "Title": "Implied Player as Object for Verbs",
    "LastUpdated": "2014-06-26T20:56:31+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "29195",
      "UserId": 0,
      "Username": "WynkynNod",
      "UserAvatar": null,
      "UserGravatar": "a294db2adef90dc029a424c25dd0077b",
      "EditableText": "Hello, I'm new here.\nI've been using Quest in my browser and find it very intuitive and easy to use, with help online easy to find...\nExcept for this one problem:\n\nI'd like to attach certain verbs to my player, so that no matter where my player is, if the player types certain verbs, the player will receive a specific response. \n\nHere is one example:\nIn my game, the player is involved in a hide-and-seek game.\nWhen the player types 'hide', it is intended that the object being hidden is the player. I would like, in most cases, for the player to get the response &quot;You cannot hide here.&quot; \nIn certain 'rooms', there are hiding places, and I've been able to successfully hide the player if the player types &quot;Hide in ___&quot; (such as &quot;Hide in circle of trees&quot; or &quot;Hide in closet&quot;). To do that, I attached the verbs 'hide' and 'hide in' to the objects that are hiding spots.\n\nIn most rooms, where there isn't a specific or obvious place to hide, if the player types &quot;Hide&quot;, they get the response, &quot;I don't understand your command,&quot; which is probably pretty confusing for the actual player.\n\nI added the verb 'hide' to the player object, but that doesn't seem to make a difference. It only works if the player types &quot;hide me&quot;, not if the player just types &quot;hide&quot;.\n\nIs there a way to give a more tailored response to a verb in which the implied object is the player? Can I make 'me'/'player' an implied default object? Can I alter the response for general verbs that have no specified objects, so that a script can run?\n\nThanks for any help.",
      "EditableFormat": "bbcode",
      "HTML": "Hello, I'm new here.<br/>I've been using Quest in my browser and find it very intuitive and easy to use, with help online easy to find...<br/>Except for this one problem:<br/><br/>I'd like to attach certain verbs to my player, so that no matter where my player is, if the player types certain verbs, the player will receive a specific response. <br/><br/>Here is one example:<br/>In my game, the player is involved in a hide-and-seek game.<br/>When the player types 'hide', it is intended that the object being hidden is the player. I would like, in most cases, for the player to get the response &quot;You cannot hide here.&quot; <br/>In certain 'rooms', there are hiding places, and I've been able to successfully hide the player if the player types &quot;Hide in ___&quot; (such as &quot;Hide in circle of trees&quot; or &quot;Hide in closet&quot;). To do that, I attached the verbs 'hide' and 'hide in' to the objects that are hiding spots.<br/><br/>In most rooms, where there isn't a specific or obvious place to hide, if the player types &quot;Hide&quot;, they get the response, &quot;I don't understand your command,&quot; which is probably pretty confusing for the actual player.<br/><br/>I added the verb 'hide' to the player object, but that doesn't seem to make a difference. It only works if the player types &quot;hide me&quot;, not if the player just types &quot;hide&quot;.<br/><br/>Is there a way to give a more tailored response to a verb in which the implied object is the player? Can I make 'me'/'player' an implied default object? Can I alter the response for general verbs that have no specified objects, so that a script can run?<br/><br/>Thanks for any help.",
      "PostDate": "2014-06-26T16:19:04+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29197",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I think you want to use commands instead of verbs.\n\nA verb takes an object. For example, if you attach &quot;hide&quot; to a book, then you'd be able to type &quot;hide book&quot;. It won't recognize &quot;hide&quot; on its own, which is why you get that error. But you can just create a &quot;hide&quot; command and then have it do what you like (e.g. hide the player). Moreover, commands in rooms take precedence over same-named commands in the global space. So you can have a &quot;hide&quot; global command that says &quot;You can't hide here&quot; and then put specific &quot;hide&quot; commands in the rooms where you want hiding to be possible.\n\nWhen you say &quot;using Quest in my browser&quot;, does that mean you're editing with the online Quest editor? If so, there might be some differences from what I said, as the online editor doesn't support all the Quest features. Let me know if so.",
      "EditableFormat": "bbcode",
      "HTML": "I think you want to use commands instead of verbs.<br/><br/>A verb takes an object. For example, if you attach &quot;hide&quot; to a book, then you'd be able to type &quot;hide book&quot;. It won't recognize &quot;hide&quot; on its own, which is why you get that error. But you can just create a &quot;hide&quot; command and then have it do what you like (e.g. hide the player). Moreover, commands in rooms take precedence over same-named commands in the global space. So you can have a &quot;hide&quot; global command that says &quot;You can't hide here&quot; and then put specific &quot;hide&quot; commands in the rooms where you want hiding to be possible.<br/><br/>When you say &quot;using Quest in my browser&quot;, does that mean you're editing with the online Quest editor? If so, there might be some differences from what I said, as the online editor doesn't support all the Quest features. Let me know if so.",
      "PostDate": "2014-06-26T18:53:50+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29198",
      "UserId": 0,
      "Username": "WynkynNod",
      "UserAvatar": null,
      "UserGravatar": "a294db2adef90dc029a424c25dd0077b",
      "EditableText": "Jaynabonne,\nI am editing with the online Quest editor. \nAfter going back to the tutorial to read about commands, I was able to reach my goal by creating a 'hide' command. Thanks for the advice!",
      "EditableFormat": "bbcode",
      "HTML": "Jaynabonne,<br/>I am editing with the online Quest editor. <br/>After going back to the tutorial to read about commands, I was able to reach my goal by creating a 'hide' command. Thanks for the advice!",
      "PostDate": "2014-06-26T19:50:49+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29200",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I don't know about the online web browser version, but in the offline desktop version, at the top of the screen is a horizontal bar, that has the 'Add' choice, which you can select to add a Command in, and also, in the left pane's 'tree of stuff' (('ve no idea if the online web browser version has this or not, as well), there's the Command as well, to add in Commands.\n\nVerbs are for buttons and hyperlinks, attached to specific Objects, and I guess the default built-in Verbs too have a typed-in input feature too, though it's probably specific and limited to that Object only (I didn't know you could do typed-in inputs with Verbs).\n\nCommands allow for typed-in inputs during game play, and thus are much more powerful than Verbs (technically, the Verbs are actually sub-commands made for only acting upon specific Objects, thus limiting their power~usefulness), as Commands are for general~universal usage.\n\nThough, this makes Commands a bit more advanced to work with, but hopefully not too bad for you to figure out, if I can explain them well enough (and if not, Jay certainly can, laughs).\n\nCommands are just like Verbs, except:\n\n1. it's 'pattern' field:\n\nsince a Command uses typed-in input during game play, you need to put in an 'activation string' and what you want to use within your Command (aka: an Object, text ~ ie Strings, and~or how many Objects and~or texts~Strings):\n\nin code, it looks like this (the GUI~Editor, shouldn't need explanation to set it up), an example:\n\n(and it matters, as Jay said, of whether you add the Command to~inside of an Object, or globally ~ NOT inside of any Object)\n\n[code:1mx5ikv8]&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #object#&lt;/pattern&gt;\n&lt;/command&gt;\n\n&lt;object name=&quot;orc&quot;&gt;\n  &lt;inherit name=&quot;editor_object&quot; /&gt;\n&lt;/object&gt;[/code:1mx5ikv8]\n\nso, during game play, you would have to type in, for example:\n\nfight orc\n\nthis tells quest, that you want to use your (for example) 'fight_command', and the Object, you'll be using in your Command's added scripts, is the: orc\n\nif you want to just get a textual input (NOT an actual Object itself), it would be:\n\n[code:1mx5ikv8]&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #text#&lt;/pattern&gt;\n&lt;/command&gt;[/code:1mx5ikv8]\n\nnow, there's some coding practical concept condition~scenario~situational issues with both of these methods:\n\nif you use the #object# (which tells quest to search for an Object with that NAME attribute), then what if:\n\nthe person playing the game, only knows the Object's ALIAS Attribute of 'orc', whereas the game creator probably has the Object's NAME attribute as 'orc_1' for his information and organizational use only. So, when the person types in 'fight orc', quest searches for an Object with the NAME (ID) Attribute of 'orc', but there is no Object with that NAME Attribute (as 'orc_1' is not 'orc', obviously). You can 'easily' code for this, but the key word is 'code', lol. You need to know how to do so, or at least how to copy and paste the code given to you into the correct spot in your game code (or you can try to manually add in the scripts via the GUI~Editor, which might also not be easy to do so).\n\nand there's probably other issues that I can't think of for the moment... (err, just thought of some, such as 'checks' needed upon the searching of the Object, ie: is the Object 'reachable', and etc conditions~'checks' too)\n\nif you use the #text#, then you got to code in, if you then want to find the Object that has a label (NAME or ALIAS) that matches up with what you typed-in for the text, which is easy to code in too, again though, you got to do some coding, as well.\n\n-----\n\nanyways, if you want to do multiple Objects~texts, an example:\n\n[code:1mx5ikv8]&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #object1# #object2# #object3#&lt;/pattern&gt;\n&lt;/command&gt;\n// an example input during game play&#58; fight orc troll ogre\n\n// or\n\n&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #text1# #text#2 #text3#&lt;/pattern&gt;\n&lt;/command&gt;\n// fight orc troll ogre\n\n// or if you prefer the string structure of (using Objects in this example), for just one alternate example&#58;\n\n&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #object1#, #object#, and #object3#&lt;/pattern&gt;\n&lt;/command&gt;\n// fight orc, troll, and ogre\n\n// oh, and lastly, before I forget, you can do both Object and text too (using the same example above)&#58;\n\n&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #object1#, #tex1t#, #object2#, and #text2#&lt;/pattern&gt;\n&lt;/command&gt;\n// fight orc, troll, ogre, and goblin[/code:1mx5ikv8]\n\n-------\n\n2. PARAMETERS:\n\nnow, the final part of working with Commands, is the scripting (add scripts) and it's PARAMETERS usage:\n\nnot only does quest search for an Object that exists with the same NAME attribute of #object# (or the inputed text, #text#, if not using #object#), but it then can USE that inputed Object or text in it's scripts (this is what the # symbols do in the Command's Pattern Attribute: #object# or #text#), via it's PARAMETERS (via #object# and~or #text#, if you want to know more about using PARAMETERS with Functions too, let me know):\n\n[code:1mx5ikv8]&lt;object name=&quot;room&quot;&gt;\n  &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;object name=&quot;player&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;orc&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n    &lt;attr name=&quot;hp&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n&lt;command name=&quot;fight_command&quot;&gt;\n  &lt;pattern&gt;fight #object1#&lt;/pattern&gt;\n  // during game play, the person types in&#58; fight orc\n  // orc -&gt; object1 -&gt; used in the scripting below\n  &lt;script&gt;&lt;!&#91;CDATA&#91;\n    damage = player&#46;strength - object1&#46;endurance\n    if (damage &lt; 0) {\n      damage = 0\n    }\n    msg (&quot;You attack the &quot; + object1&#46;name + &quot; for &quot; + damage + &quot; damage&#46;&quot;)\n    if (object1&#46;hp &lt;= 0) {\n      msg (&quot;You killed the &quot; + object1&#46;name + &quot;!&quot;)\n    } else if (object1&#46;hp &gt; 0 and object1&#46;hp &lt; 25) {\n      msg (&quot;You wounded the &quot; + object1&#46;name + &quot;&#46;&quot;)\n    } else if (object1&#46;hp = 25) {\n      msg (&quot;You are too weak to even damage the &quot; + object1&#46;name + &quot;&#46;&quot;)\n    }\n    // obviously this code is very poor, but it's just an example for you\n  &#93;&#93;&gt;&lt;/script&gt;\n&lt;/command&gt;[/code:1mx5ikv8]\n\n------\n\nHopefully, you can follow along and understand, but at the very least, I hope I didn't scare you off, laughs. Quest's code is very noobie-friendly, it's really not that scary or confusing~complex! (well crafting your own code is ~ but that's another matter, lol) ... (I just used code, as it's quick for me to use to explain things).",
      "EditableFormat": "bbcode",
      "HTML": "I don't know about the online web browser version, but in the offline desktop version, at the top of the screen is a horizontal bar, that has the 'Add' choice, which you can select to add a Command in, and also, in the left pane's 'tree of stuff' (('ve no idea if the online web browser version has this or not, as well), there's the Command as well, to add in Commands.<br/><br/>Verbs are for buttons and hyperlinks, attached to specific Objects, and I guess the default built-in Verbs too have a typed-in input feature too, though it's probably specific and limited to that Object only (I didn't know you could do typed-in inputs with Verbs).<br/><br/>Commands allow for typed-in inputs during game play, and thus are much more powerful than Verbs (technically, the Verbs are actually sub-commands made for only acting upon specific Objects, thus limiting their power~usefulness), as Commands are for general~universal usage.<br/><br/>Though, this makes Commands a bit more advanced to work with, but hopefully not too bad for you to figure out, if I can explain them well enough (and if not, Jay certainly can, laughs).<br/><br/>Commands are just like Verbs, except:<br/><br/>1. it's 'pattern' field:<br/><br/>since a Command uses typed-in input during game play, you need to put in an 'activation string' and what you want to use within your Command (aka: an Object, text ~ ie Strings, and~or how many Objects and~or texts~Strings):<br/><br/>in code, it looks like this (the GUI~Editor, shouldn't need explanation to set it up), an example:<br/><br/>(and it matters, as Jay said, of whether you add the Command to~inside of an Object, or globally ~ NOT inside of any Object)<br/><br/><pre><code>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #object#&lt;/pattern&gt;<br/>&lt;/command&gt;<br/><br/>&lt;object name=&quot;orc&quot;&gt;<br/>  &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>so, during game play, you would have to type in, for example:<br/><br/>fight orc<br/><br/>this tells quest, that you want to use your (for example) 'fight_command', and the Object, you'll be using in your Command's added scripts, is the: orc<br/><br/>if you want to just get a textual input (NOT an actual Object itself), it would be:<br/><br/><pre><code>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #text#&lt;/pattern&gt;<br/>&lt;/command&gt;</code></pre><br/><br/>now, there's some coding practical concept condition~scenario~situational issues with both of these methods:<br/><br/>if you use the #object# (which tells quest to search for an Object with that NAME attribute), then what if:<br/><br/>the person playing the game, only knows the Object's ALIAS Attribute of 'orc', whereas the game creator probably has the Object's NAME attribute as 'orc_1' for his information and organizational use only. So, when the person types in 'fight orc', quest searches for an Object with the NAME (ID) Attribute of 'orc', but there is no Object with that NAME Attribute (as 'orc_1' is not 'orc', obviously). You can 'easily' code for this, but the key word is 'code', lol. You need to know how to do so, or at least how to copy and paste the code given to you into the correct spot in your game code (or you can try to manually add in the scripts via the GUI~Editor, which might also not be easy to do so).<br/><br/>and there's probably other issues that I can't think of for the moment... (err, just thought of some, such as 'checks' needed upon the searching of the Object, ie: is the Object 'reachable', and etc conditions~'checks' too)<br/><br/>if you use the #text#, then you got to code in, if you then want to find the Object that has a label (NAME or ALIAS) that matches up with what you typed-in for the text, which is easy to code in too, again though, you got to do some coding, as well.<br/><br/>-----<br/><br/>anyways, if you want to do multiple Objects~texts, an example:<br/><br/><pre><code>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #object1# #object2# #object3#&lt;/pattern&gt;<br/>&lt;/command&gt;<br/>// an example input during game play&#58; fight orc troll ogre<br/><br/>// or<br/><br/>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #text1# #text#2 #text3#&lt;/pattern&gt;<br/>&lt;/command&gt;<br/>// fight orc troll ogre<br/><br/>// or if you prefer the string structure of (using Objects in this example), for just one alternate example&#58;<br/><br/>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #object1#, #object#, and #object3#&lt;/pattern&gt;<br/>&lt;/command&gt;<br/>// fight orc, troll, and ogre<br/><br/>// oh, and lastly, before I forget, you can do both Object and text too (using the same example above)&#58;<br/><br/>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #object1#, #tex1t#, #object2#, and #text2#&lt;/pattern&gt;<br/>&lt;/command&gt;<br/>// fight orc, troll, ogre, and goblin</code></pre><br/><br/>-------<br/><br/>2. PARAMETERS:<br/><br/>now, the final part of working with Commands, is the scripting (add scripts) and it's PARAMETERS usage:<br/><br/>not only does quest search for an Object that exists with the same NAME attribute of #object# (or the inputed text, #text#, if not using #object#), but it then can USE that inputed Object or text in it's scripts (this is what the # symbols do in the Command's Pattern Attribute: #object# or #text#), via it's PARAMETERS (via #object# and~or #text#, if you want to know more about using PARAMETERS with Functions too, let me know):<br/><br/><pre><code>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;object name=&quot;player&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;attr name=&quot;strength&quot; type=&quot;int&quot;&gt;100&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;orc&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;endurance&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>    &lt;attr name=&quot;hp&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;<br/>&lt;command name=&quot;fight_command&quot;&gt;<br/>  &lt;pattern&gt;fight #object1#&lt;/pattern&gt;<br/>  // during game play, the person types in&#58; fight orc<br/>  // orc -&gt; object1 -&gt; used in the scripting below<br/>  &lt;script&gt;&lt;!&#91;CDATA&#91;<br/>    damage = player&#46;strength - object1&#46;endurance<br/>    if (damage &lt; 0) {<br/>      damage = 0<br/>    }<br/>    msg (&quot;You attack the &quot; + object1&#46;name + &quot; for &quot; + damage + &quot; damage&#46;&quot;)<br/>    if (object1&#46;hp &lt;= 0) {<br/>      msg (&quot;You killed the &quot; + object1&#46;name + &quot;!&quot;)<br/>    } else if (object1&#46;hp &gt; 0 and object1&#46;hp &lt; 25) {<br/>      msg (&quot;You wounded the &quot; + object1&#46;name + &quot;&#46;&quot;)<br/>    } else if (object1&#46;hp = 25) {<br/>      msg (&quot;You are too weak to even damage the &quot; + object1&#46;name + &quot;&#46;&quot;)<br/>    }<br/>    // obviously this code is very poor, but it's just an example for you<br/>  &#93;&#93;&gt;&lt;/script&gt;<br/>&lt;/command&gt;</code></pre><br/><br/>------<br/><br/>Hopefully, you can follow along and understand, but at the very least, I hope I didn't scare you off, laughs. Quest's code is very noobie-friendly, it's really not that scary or confusing~complex! (well crafting your own code is ~ but that's another matter, lol) ... (I just used code, as it's quick for me to use to explain things).",
      "PostDate": "2014-06-26T20:56:31+01:00",
      "LastEditDate": null
    }
  ]
}
