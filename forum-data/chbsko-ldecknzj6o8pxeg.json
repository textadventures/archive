{
  "Topic": {
    "TopicId": "chbsko-ldecknzj6o8pxeg",
    "ForumId": "10",
    "Title": "How can I time the delay between ASLEvent and Quest?",
    "LastUpdated": "2024-10-05T22:30:20.4205095Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e687a7b4-d25a-438e-b94c-7711c797ed3a",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/6LvJ8CPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actual example:\r\n\r\nI have `game.inituserinterface` call `JS.whereAmI()`.\r\n\r\n```\r\nfunction whereAmI(){\r\n  ASLEvent(\"WhereAmI\", platform);\r\n}\r\n```\r\n\r\n---\r\n`platform` will be \"desktop\", \"webplayer\", or \"mobile\".\r\n\r\n---\r\nIs there a slick way to time that process?",
      "EditableFormat": "markdown",
      "HTML": "<p>Actual example:</p>\n<p>I have <code>game.inituserinterface</code> call <code>JS.whereAmI()</code>.</p>\n<pre><code>function whereAmI(){\n  ASLEvent(\"WhereAmI\", platform);\n}\n</code></pre>\n<hr>\n<p><code>platform</code> will be \"desktop\", \"webplayer\", or \"mobile\".</p>\n<hr>\n<p>Is there a slick way to time that process?</p>\n\n",
      "PostDate": "2024-10-05T22:30:20.4205095Z",
      "LastEditDate": "2024-10-07T01:20:38.7350834Z",
      "link": null
    },
    {
      "PostId": "5459aa7f-63dc-4995-ba55-c6e60494ad5a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Because Quest only tracks time in seconds, I think you would need to do this in javascript.\r\n\r\nNot sure what you're planning to use this for. But if you want Quest to know how much lag it has, you could use something like:\r\n\r\nSo maybe you could do something like:\r\n```\r\n<function name=\"MeasureLag\" parameters=\"time\">\r\n  if (TypeOf (time) = \"int\") {\r\n    msg (\"The round-trip time for an ASLEvent is \" + time + \"ms\")\r\n  }\r\n  else {\r\n    JS.measureLag();\r\n  }\r\n</function>\r\n```\r\nwith the javascript:\r\n```\r\n$(function () {\r\n  var starttime = (new Date()).getTime();\r\n  ASLEvent(\"MeasureLag\", \"\");\r\n  window.measureLag = function() {\r\n    ASLEvent(\"MeasureLag\", (new Date()).getTime() - starttime);\r\n  }\r\n});\r\n```\r\nIn this case, we're calling ASLEvent twice - once to measure how long the message takes to get there and back; and once to send the calculated result back to Quest.\r\n\r\n\r\nIf you only need to know the time on the javascript side, you would only need to use the function once. If there's a particular ASLEvent that you want to measure the time for, you could make the JS that calls it record the value of `(new Date()).getTime()` before calling it, and then calculate the time elapsed when the you get a response back. Assuming, of course, that the ASLEvent you are timing sends any response to the browser.\r\n\r\nDoes that make sense? I think I've got it clear in my head, but it's hard to explain.",
      "EditableFormat": "markdown",
      "HTML": "<p>Because Quest only tracks time in seconds, I think you would need to do this in javascript.</p>\n<p>Not sure what you're planning to use this for. But if you want Quest to know how much lag it has, you could use something like:</p>\n<p>So maybe you could do something like:</p>\n<pre><code>&lt;function name=\"MeasureLag\" parameters=\"time\"&gt;\n  if (TypeOf (time) = \"int\") {\n    msg (\"The round-trip time for an ASLEvent is \" + time + \"ms\")\n  }\n  else {\n    JS.measureLag();\n  }\n&lt;/function&gt;\n</code></pre>\n<p>with the javascript:</p>\n<pre><code>$(function () {\n  var starttime = (new Date()).getTime();\n  ASLEvent(\"MeasureLag\", \"\");\n  window.measureLag = function() {\n    ASLEvent(\"MeasureLag\", (new Date()).getTime() - starttime);\n  }\n});\n</code></pre>\n<p>In this case, we're calling ASLEvent twice - once to measure how long the message takes to get there and back; and once to send the calculated result back to Quest.</p>\n<p>If you only need to know the time on the javascript side, you would only need to use the function once. If there's a particular ASLEvent that you want to measure the time for, you could make the JS that calls it record the value of <code>(new Date()).getTime()</code> before calling it, and then calculate the time elapsed when the you get a response back. Assuming, of course, that the ASLEvent you are timing sends any response to the browser.</p>\n<p>Does that make sense? I think I've got it clear in my head, but it's hard to explain.</p>\n\n",
      "PostDate": "2024-10-06T09:00:03.3053922Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6293a6af-5f09-4aee-8328-361850810cc8",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome sauce!\r\n\r\nThanks much, this is exactly what I'm looking for.\r\n\r\nI'm wanting to time between calling `JS.whereAmI()` and `WhereAmI` in Quest actually running.\r\n\r\nüëçüëç",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome sauce!</p>\n<p>Thanks much, this is exactly what I'm looking for.</p>\n<p>I'm wanting to time between calling <code>JS.whereAmI()</code> and <code>WhereAmI</code> in Quest actually running.</p>\n<p>üëçüëç</p>\n\n",
      "PostDate": "2024-10-06T16:13:14.1565439Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "46276177-c2c3-4bb0-a1f5-5e242a64d319",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm wanting to time between calling JS.whereAmI() and WhereAmI in Quest actually running.\r\n\r\nHmm‚Ä¶ sounds like you really want the round-trip time for a Quest->JS->Quest exchange‚Ä¶ which you could only track with one-second precision (so in most cases it would tell you 0 or 1 seconds). Is the JS->Quest->JS version close enough?\r\n\r\nI've seen a variant of this question before, from someone who wanted to set a timeout so a particular piece of code would run after the platform was known. If that's the case, I would strongly suggest just calling that code from the `WhereAmI` function, or sticking it in `game.changedquestplatform`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm wanting to time between calling JS.whereAmI() and WhereAmI in Quest actually running.</p>\n</blockquote>\n<p>Hmm‚Ä¶ sounds like you really want the round-trip time for a Quest-&gt;JS-&gt;Quest exchange‚Ä¶ which you could only track with one-second precision (so in most cases it would tell you 0 or 1 seconds). Is the JS-&gt;Quest-&gt;JS version close enough?</p>\n<p>I've seen a variant of this question before, from someone who wanted to set a timeout so a particular piece of code would run after the platform was known. If that's the case, I would strongly suggest just calling that code from the <code>WhereAmI</code> function, or sticking it in <code>game.changedquestplatform</code>.</p>\n\n",
      "PostDate": "2024-10-06T16:23:46.23713Z",
      "LastEditDate": "2024-10-06T17:24:41.9385916Z",
      "link": null
    },
    {
      "PostId": "e44e6f07-8a9b-482b-acde-945528ba3819",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The JS function running onload was making Quest throw crazy errors about lists while the game was loading.\r\n\r\nI ended up with this:\r\n\r\n```xml\r\n  <function name=\"MeasureLag\" parameters=\"time\">\r\n    if (time = \"\") {\r\n      JS.measureLag ()\r\n    }\r\n    else if (TypeOf (ToInt(time)) = \"int\") {\r\n      msg (\"The round-trip time for an ASLEvent is \" + time + \"ms\")\r\n    }\r\n    else {\r\n      JS.measureLag ()\r\n    }\r\n  </function>\r\n```\r\n\r\n---\r\nand this:\r\n\r\n```js\r\nvar starttime;\r\nsetTimeout(function(){\r\n  starttime = new Date().getTime();\r\n  ASLEvent('MeasureLag', '');\r\n}, 2000);\r\nwindow.measureLag = function() {\r\n  ASLEvent('MeasureLag', (new Date()).getTime() - starttime);\r\n}\r\n```\r\n\r\n---\r\nIn the desktop player, it ranges from 23ms to 81ms.\r\n\r\nIt seems that even 1ms would be too long to depend on an ASLEvent to effect anything in Quest inside of the same script which calls a function in JS to call that ASLEvent. (Did I say that in a way that made sense?)\r\n\r\n---\r\n> If there's a particular ASLEvent that you want to measure the time for, you could make the JS that calls it record the value of (new Date()).getTime() before calling it, and then calculate the time elapsed when the you get a response back.\r\n\r\nWorst case, I should be able to do this in the JS function that calls it, and add a ...\r\n\r\nWell, hmm... I was going to say `JS.addTextAndScroll(new Date()).getTime();)`, but that would add more time in between Quest and JS, haha.\r\n\r\n> I've seen a variant of this question before, from someone who wanted to set a timeout so a particular piece of code would run after the platform was known. If that's the case, I would strongly suggest just calling that code from the `WhereAmI` function, or sticking it in `game.changedquestplatform`.\r\n\r\nGotcha.\r\n\r\n---\r\nNow that I ran that first bit of code, I realize it doesn't matter how big of a gap it is -- it just matters that a gap exists.\r\n\r\nIf there is no way to stall a Quest script to wait for an attribute to be changed, I don't see any way to determine the player platform from within a script that needs to use JS to have ASLEvent call a Quest function which sets `game.questplatform`.  Using `while` doesn't work, I guess because the attribute can't be set from outside of the `while` block until `while` has finished.",
      "EditableFormat": "markdown",
      "HTML": "<p>The JS function running onload was making Quest throw crazy errors about lists while the game was loading.</p>\n<p>I ended up with this:</p>\n<pre><code>  &lt;function name=\"MeasureLag\" parameters=\"time\"&gt;\n    if (time = \"\") {\n      JS.measureLag ()\n    }\n    else if (TypeOf (ToInt(time)) = \"int\") {\n      msg (\"The round-trip time for an ASLEvent is \" + time + \"ms\")\n    }\n    else {\n      JS.measureLag ()\n    }\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>and this:</p>\n<pre><code>var starttime;\nsetTimeout(function(){\n  starttime = new Date().getTime();\n  ASLEvent('MeasureLag', '');\n}, 2000);\nwindow.measureLag = function() {\n  ASLEvent('MeasureLag', (new Date()).getTime() - starttime);\n}\n</code></pre>\n<hr>\n<p>In the desktop player, it ranges from 23ms to 81ms.</p>\n<p>It seems that even 1ms would be too long to depend on an ASLEvent to effect anything in Quest inside of the same script which calls a function in JS to call that ASLEvent. (Did I say that in a way that made sense?)</p>\n<hr>\n<blockquote>\n<p>If there's a particular ASLEvent that you want to measure the time for, you could make the JS that calls it record the value of (new Date()).getTime() before calling it, and then calculate the time elapsed when the you get a response back.</p>\n</blockquote>\n<p>Worst case, I should be able to do this in the JS function that calls it, and add a ...</p>\n<p>Well, hmm... I was going to say <code>JS.addTextAndScroll(new Date()).getTime();)</code>, but that would add more time in between Quest and JS, haha.</p>\n<blockquote>\n<p>I've seen a variant of this question before, from someone who wanted to set a timeout so a particular piece of code would run after the platform was known. If that's the case, I would strongly suggest just calling that code from the <code>WhereAmI</code> function, or sticking it in <code>game.changedquestplatform</code>.</p>\n</blockquote>\n<p>Gotcha.</p>\n<hr>\n<p>Now that I ran that first bit of code, I realize it doesn't matter how big of a gap it is -- it just matters that a gap exists.</p>\n<p>If there is no way to stall a Quest script to wait for an attribute to be changed, I don't see any way to determine the player platform from within a script that needs to use JS to have ASLEvent call a Quest function which sets <code>game.questplatform</code>.  Using <code>while</code> doesn't work, I guess because the attribute can't be set from outside of the <code>while</code> block until <code>while</code> has finished.</p>\n\n",
      "PostDate": "2024-10-06T17:49:30.6591821Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "17bbc26b-8e49-400f-b2ea-a9b92a84ea51",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Whoo, it takes a *little* longer online:\r\n\r\n<span style=\"font-family:Georgia, serif;color:Black;font-size:12pt;\">The round-trip time for an ASLEvent is 330ms</span>\r\n\r\n---\r\nhttps://play.textadventures.co.uk/Play.aspx?id=editor/22255bd5-2a3a-4e62-8045-faaa4c30bd13%2fTime+the+ASLEvent.aslx",
      "EditableFormat": "markdown",
      "HTML": "<p>Whoo, it takes a <em>little</em> longer online:</p>\n<p><span style=\"font-family: Georgia, serif; color: Black; font-size: 12pt\">The round-trip time for an ASLEvent is 330ms</span></p>\n<hr>\n<p>https://play.textadventures.co.uk/Play.aspx?id=editor/22255bd5-2a3a-4e62-8045-faaa4c30bd13%2fTime+the+ASLEvent.aslx</p>\n\n",
      "PostDate": "2024-10-06T18:46:20.4482322Z",
      "LastEditDate": "2024-10-06T18:46:56.4156661Z",
      "link": null
    },
    {
      "PostId": "622984c4-c792-40af-96ac-6520f5134fbd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If there is no way to stall a Quest script to wait for an attribute to be changed\r\n\r\nI don't think there is‚Ä¶ unless I'm confusing it with a different bit of code, I believe function calls from `ASLEvent` are queued up to be run as soon as any currently-running scripts on the Quest side end.\r\n\r\nIf you need some code to run during initialisation but after the platform is known, then I suspect the simplest way to do that would be to have the init script:\r\n```\r\nJS.whereAmI()\r\n```\r\nand then:\r\n```\r\n  <function name=\"WhereAmI\" parameters=\"s\">\r\n    game.questplatform = s\r\n    // init code that depends on knowing the platform goes here\r\n  </function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If there is no way to stall a Quest script to wait for an attribute to be changed</p>\n</blockquote>\n<p>I don't think there is‚Ä¶ unless I'm confusing it with a different bit of code, I believe function calls from <code>ASLEvent</code> are queued up to be run as soon as any currently-running scripts on the Quest side end.</p>\n<p>If you need some code to run during initialisation but after the platform is known, then I suspect the simplest way to do that would be to have the init script:</p>\n<pre><code>JS.whereAmI()\n</code></pre>\n<p>and then:</p>\n<pre><code>  &lt;function name=\"WhereAmI\" parameters=\"s\"&gt;\n    game.questplatform = s\n    // init code that depends on knowing the platform goes here\n  &lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2024-10-06T20:19:44.8525346Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c4900188-b6f7-4b03-8564-565adccf2e38",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Holy crap!\r\n\r\nThat's it, I think!\r\n\r\n`WhereAmI` could have an optional parameter for a callback script.",
      "EditableFormat": "markdown",
      "HTML": "<p>Holy crap!</p>\n<p>That's it, I think!</p>\n<p><code>WhereAmI</code> could have an optional parameter for a callback script.</p>\n\n",
      "PostDate": "2024-10-06T21:20:30.395567Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8ade1b5f-532d-44fd-aff4-5fc4d34895d5",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Odr8Efkb.jpeg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, the same could be done like you said before I guess: `game.changedquestplatform`, but this still seems to be the best approach.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, the same could be done like you said before I guess: <code>game.changedquestplatform</code>, but this still seems to be the best approach.</p>\n\n",
      "PostDate": "2024-10-06T21:21:55.9105855Z",
      "LastEditDate": "2024-10-06T21:30:48.409633Z",
      "link": null
    }
  ]
}
