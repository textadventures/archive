{
  "Topic": {
    "TopicId": "1izwuchttuumpaqfsiyqrq",
    "ForumId": "10",
    "Title": "Quests Feature Question - Applying Typewriter to the whole game [Alt-Solved] [By using built-in functions]",
    "LastUpdated": "2019-10-18T13:54:41.2977904Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "51051677-23a6-4581-8c4b-aed9ce27edb7",
      "UserId": 441995,
      "Username": "Narwasereg",
      "AvatarUrl": "https://i.imgur.com/APkAf96b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello,\r\n\r\nI'd like to know if there is an easy way to apply the typewriter-display effect for the whole game ?\r\nOr do I have no other choice than overloading the game with scripts to trigger it ?\r\nIf it needs a bit of programming to tweak this, I can do it but only with enough explanations.\r\n\r\n\r\nAlso, is it possible to add delays within a same message ? Maybe by using some weird-typewriter effect ?\r\nLike, the game would run like this :\r\n```\r\nHello ?[2 seconds delay]\r\nCan you hear me ?[3 seconds delay]\r\nPlease answer..\r\n[Player can now input its command]\r\n```\r\n\r\nIn advance, thank you for your answers,\r\n\r\nLily Narwasereg",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello,</p>\n<p>I'd like to know if there is an easy way to apply the typewriter-display effect for the whole game ?<br>\nOr do I have no other choice than overloading the game with scripts to trigger it ?<br>\nIf it needs a bit of programming to tweak this, I can do it but only with enough explanations.</p>\n<p>Also, is it possible to add delays within a same message ? Maybe by using some weird-typewriter effect ?<br>\nLike, the game would run like this :</p>\n<pre><code>Hello ?[2 seconds delay]\nCan you hear me ?[3 seconds delay]\nPlease answer..\n[Player can now input its command]\n</code></pre>\n<p>In advance, thank you for your answers,</p>\n<p>Lily Narwasereg</p>\n\n",
      "PostDate": "2019-10-18T13:54:41.2977904Z",
      "LastEditDate": "2019-10-21T15:27:22.7797281Z",
      "link": null
    },
    {
      "PostId": "b41f3541-ee51-4581-8a0c-5a78b41af223",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm…\r\n\r\nYou can't override `msg()`, which Quest uses to send most of its text to the frontend, because it's a built-in function. However, you can override the javascript function `addText`, which is used by `msg()`.\r\n\r\nOff the top of my head, my first guess would be a piece of javascript that looks something like:\r\n```\r\n$(function () {\r\n  var original_addText = addText;\r\n  addText = function (text) {\r\n    var element = $($.parseHTML(text));\r\n    original_addText(element);\r\n    element.typewriter(100);\r\n  };\r\n});\r\n```\r\n\r\nThat applies the typewriter TextFX to the entire game… but it will have issues because the default typewriter doesn't allow formatting. I'm not sure how it would work with the modified typewriter script I posted recently; might be worth trying. But this probably needs a little more work before it's ready for use.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm…</p>\n<p>You can't override <code>msg()</code>, which Quest uses to send most of its text to the frontend, because it's a built-in function. However, you can override the javascript function <code>addText</code>, which is used by <code>msg()</code>.</p>\n<p>Off the top of my head, my first guess would be a piece of javascript that looks something like:</p>\n<pre><code>$(function () {\n  var original_addText = addText;\n  addText = function (text) {\n    var element = $($.parseHTML(text));\n    original_addText(element);\n    element.typewriter(100);\n  };\n});\n</code></pre>\n<p>That applies the typewriter TextFX to the entire game… but it will have issues because the default typewriter doesn't allow formatting. I'm not sure how it would work with the modified typewriter script I posted recently; might be worth trying. But this probably needs a little more work before it's ready for use.</p>\n\n",
      "PostDate": "2019-10-18T19:37:47.8520662Z",
      "LastEditDate": "2019-10-18T19:45:53.066229Z",
      "link": null
    },
    {
      "PostId": "81ddea50-788b-4716-9211-85d162abd769",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "[Note: This isn't working yet, but I'm posting so that if anyone else can see the problems, they can fix it. Plus I don't have anywhere convenient to save a work-in-progress right now, so on the forum seems as good a place as any]\r\n\r\n**Edit:** This seems to work.\r\nTo use it, either put it in a javascript file within the project (desktop version only) or put it on a single line in the game's UI initialisation script (game → 'Advanced scripts' tab) in the form: `JS.eval(\"`<i style=\"color: brown\">javascript goes here</i>`\")`\r\n\r\nMy second thought would be something like…\r\n\r\n```\r\n$(function () {\r\n  var original_addText = addText;\r\n  addText = function (text) {\r\n    var done = getCurrentDiv().children().last()[0];\r\n    original_addText(text);\r\n    getCurrentDiv().find('*').contents().each(function () {\r\n      if (this == done) {\r\n        done = 0;\r\n      } else if (!done) {\r\n        if (this.nodeType == 3) {\r\n          $(this).replaceWith($('<span>').data('typewritercontent', $(this).text()).attr('typewriterdelay', 0));\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  setInterval (function () {\r\n    var elem = $('*[typewriterdelay]').first();\r\n    var text = elem.data('typewritercontent');\r\n    if (text) {\r\n      elem.append(text.substring(0,1));\r\n      if (text.length > 1) {\r\n        elem.data('typewritercontent', text.substring(1));\r\n      } else {\r\n        elem.removeData('typewritercontent');\r\n      }\r\n    }\r\n    if (!text) {\r\n      var delay = elem.attr('typewriterdelay');\r\n      if (delay > 1) {\r\n        elem.attr('typewriterdelay', delay - 1);\r\n      } else {\r\n        elem.removeAttr('typewriterdelay');\r\n      }\r\n    }\r\n  }, 100);\r\n});\r\n```\r\n\r\nOff the top of my head, that should avoid using the default typewriter effect, but do something similar to all text nodes in the output. You can then include something like `<span typewriterdelay=\"10\">The text will pause after this sentence!</span>` in your text. The delay in this case being in tenths of a second (or characters for the typewriter).\r\n\r\nI'm on my phone right now so can't test that. I'll have a look when I'm in a better position. It doesn't seem to work right now, but I think that's probably some silly mistake.",
      "EditableFormat": "markdown",
      "HTML": "<p>[Note: This isn't working yet, but I'm posting so that if anyone else can see the problems, they can fix it. Plus I don't have anywhere convenient to save a work-in-progress right now, so on the forum seems as good a place as any]</p>\n<p><strong>Edit:</strong> This seems to work.<br>\nTo use it, either put it in a javascript file within the project (desktop version only) or put it on a single line in the game's UI initialisation script (game → 'Advanced scripts' tab) in the form: <code>JS.eval(\"</code><i style=\"color: brown\">javascript goes here</i><code>\")</code></p>\n<p>My second thought would be something like…</p>\n<pre><code>$(function () {\n  var original_addText = addText;\n  addText = function (text) {\n    var done = getCurrentDiv().children().last()[0];\n    original_addText(text);\n    getCurrentDiv().find('*').contents().each(function () {\n      if (this == done) {\n        done = 0;\n      } else if (!done) {\n        if (this.nodeType == 3) {\n          $(this).replaceWith($('&lt;span&gt;').data('typewritercontent', $(this).text()).attr('typewriterdelay', 0));\n        }\n      }\n    });\n  };\n\n  setInterval (function () {\n    var elem = $('*[typewriterdelay]').first();\n    var text = elem.data('typewritercontent');\n    if (text) {\n      elem.append(text.substring(0,1));\n      if (text.length &gt; 1) {\n        elem.data('typewritercontent', text.substring(1));\n      } else {\n        elem.removeData('typewritercontent');\n      }\n    }\n    if (!text) {\n      var delay = elem.attr('typewriterdelay');\n      if (delay &gt; 1) {\n        elem.attr('typewriterdelay', delay - 1);\n      } else {\n        elem.removeAttr('typewriterdelay');\n      }\n    }\n  }, 100);\n});\n</code></pre>\n<p>Off the top of my head, that should avoid using the default typewriter effect, but do something similar to all text nodes in the output. You can then include something like <code>&lt;span typewriterdelay=\"10\"&gt;The text will pause after this sentence!&lt;/span&gt;</code> in your text. The delay in this case being in tenths of a second (or characters for the typewriter).</p>\n<p>I'm on my phone right now so can't test that. I'll have a look when I'm in a better position. It doesn't seem to work right now, but I think that's probably some silly mistake.</p>\n\n",
      "PostDate": "2019-10-18T22:11:47.6783283Z",
      "LastEditDate": "2019-10-18T23:07:19.4969773Z",
      "link": null
    },
    {
      "PostId": "7b3e38c0-0ab7-4503-a721-c762e1c53656",
      "UserId": 441995,
      "Username": "Narwasereg",
      "AvatarUrl": "https://i.imgur.com/APkAf96b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you for the suggestions. I'm using the desktop version, so I just have to put your script inside of a file, name it blabla.js, and Quest will automatically detect and compile it ? (JS is not the language I know, I mainly know Python and Java)\r\n\r\nI'd need to be able to change the font color. It's better to differentiate who is talking.\r\n\r\nThe goal is that, I want my game to break the 4th wall. The story is like, the user (You) is telling the guy inside of the game what he should do, like a robot. Therefore, I feel like the Typewriter effect gives a better atmosphere regarding \"Communication\"\r\n\r\nSo, if you or someone think of another alternative method to get the same effect, I'm good with that too. ^^",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you for the suggestions. I'm using the desktop version, so I just have to put your script inside of a file, name it blabla.js, and Quest will automatically detect and compile it ? (JS is not the language I know, I mainly know Python and Java)</p>\n<p>I'd need to be able to change the font color. It's better to differentiate who is talking.</p>\n<p>The goal is that, I want my game to break the 4th wall. The story is like, the user (You) is telling the guy inside of the game what he should do, like a robot. Therefore, I feel like the Typewriter effect gives a better atmosphere regarding \"Communication\"</p>\n<p>So, if you or someone think of another alternative method to get the same effect, I'm good with that too. ^^</p>\n\n",
      "PostDate": "2019-10-21T07:47:49.3053631Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "51a6d29b-f685-446d-835f-7a16e9ca499c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Does the script not work with coloured text? I can't see why that would happen.\r\n\r\nIssues at present:\r\n* Sometimes it doesn't seem to run at a constant speed, and I'm not sure why\r\n* No ability to change the speed while it's running\r\n* Allows the player to enter commands without waiting for the typewriter to finish\r\n* Images appear immediately\r\n* Player could get frustrated waiting for it\r\n* Automatic scrolling is broken\r\n\r\nI think all of those could be addressed, but some of them I think I'd have to experiment with a bit to get the desired effect.",
      "EditableFormat": "markdown",
      "HTML": "<p>Does the script not work with coloured text? I can't see why that would happen.</p>\n<p>Issues at present:</p>\n<ul>\n<li>Sometimes it doesn't seem to run at a constant speed, and I'm not sure why</li>\n<li>No ability to change the speed while it's running</li>\n<li>Allows the player to enter commands without waiting for the typewriter to finish</li>\n<li>Images appear immediately</li>\n<li>Player could get frustrated waiting for it</li>\n<li>Automatic scrolling is broken</li>\n</ul>\n<p>I think all of those could be addressed, but some of them I think I'd have to experiment with a bit to get the desired effect.</p>\n\n",
      "PostDate": "2019-10-21T08:52:40.602355Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "03d190cd-0c7d-4224-aebf-e94eb1bae6ce",
      "UserId": 441995,
      "Username": "Narwasereg",
      "AvatarUrl": "https://i.imgur.com/APkAf96b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not saying the script doesn't work with coloured text, just that I'd want it to work with the color formatting.\r\n\r\nAlso you didn't answer my questions.\r\n\r\nAnd it looks like it's hard to do what I want with the typewriter, if it is not possible then it's okay, I'll deal without it",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not saying the script doesn't work with coloured text, just that I'd want it to work with the color formatting.</p>\n<p>Also you didn't answer my questions.</p>\n<p>And it looks like it's hard to do what I want with the typewriter, if it is not possible then it's okay, I'll deal without it</p>\n\n",
      "PostDate": "2019-10-21T12:09:38.3849423Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b847605-10e7-411a-837f-99be22ae7cb7",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My experience with older versions of Quest has shown that frequent use of the typewriter effect has caused the font to become slower and slower. Has this been fixed?",
      "EditableFormat": "markdown",
      "HTML": "<p>My experience with older versions of Quest has shown that frequent use of the typewriter effect has caused the font to become slower and slower. Has this been fixed?</p>\n\n",
      "PostDate": "2019-10-21T12:29:49.3689176Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6fa78534-0637-49af-a05e-9e954931ca46",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm using the desktop version, so I just have to put your script inside of a file, name it blabla.js, and Quest will automatically detect and compile it ?\r\n\r\nI think so. Not entirely sure, because I don't use the desktop version.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm using the desktop version, so I just have to put your script inside of a file, name it blabla.js, and Quest will automatically detect and compile it ?</p>\n</blockquote>\n<p>I think so. Not entirely sure, because I don't use the desktop version.</p>\n\n",
      "PostDate": "2019-10-21T12:55:23.8714663Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a55cf79-d111-4329-95a9-842b8c227b7a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a top-of-my-head attempt to solve some of the issues I picked out before.\r\n\r\nThis version should display the \"Continue\" link (as for Quest's `wait {}` capability) when the typewriter is running. While it's typing, pressing the 'continue' button will fill in the rest of the typewriter text before clicking the real 'Continue' link.\r\n\r\nThe HTML passed to this function may use the following attributes (on any element):\r\n`typewriterspeed=\"80\"` (or any other number) - sets the number of milliseconds between letters. Speed will change at the start of this element.\r\n`typewriterdelay=\"5\"` (or any number) - after this element, pause for time equivalent to 5 letters.\r\n`typewriterstop=\"1\"` - pressing a key to skip typing the text will stop after this element, then continue typing at the same speed as before. You can put this immediately before a Quest `wait` to ensure that pressing a key to speed up the text doesn't prematurely end the wait; or to let the player skip through dialogue line-by-line.\r\n\r\n(**NOTE**: Written off the top of my head, not yet tested)\r\n```\r\n$(function () {\r\n  var reallyWaiting;\r\n  var original_beginWait = beginWait;\r\n  var original_endWait = endWait;\r\n  beginWait = function () {\r\n    reallyWaiting = true;\r\n    original_beginWait();\r\n  };\r\n  endWait = function() {\r\n    typeWriter_skip();\r\n  };\r\n  waitEnded = function () {\r\n    reallyWaiting = false;\r\n    typewriter_skip();\r\n  };\r\n  typewriter_skip = function () {\r\n    var stopped = false;\r\n    $('*[typewriterdelay]').each(function () {\r\n      var text = $(this).data('typewritercontent');\r\n      if (text) {\r\n        $(this).append(text);\r\n      }\r\n      $(this).removeData('typewritercontent').removeAttr('typewriterdelay');\r\n      if ($(this).attr('typewriterstop')) {\r\n        stopped = true;\r\n        return false\r\n      }\r\n    });\r\n    _waitMode = (reallyWaiting || $('*[typewriterdelay]').length);\r\n    if (!stopped) {\r\n      if (reallyWaiting) {\r\n        original_endWait();\r\n      } else {\r\n        $(\"#endWaitLink\").hide();\r\n        $(\"#txtCommand\").show();\r\n      }\r\n    }\r\n  };\r\n\r\n  var typewriter_iterator = function () {\r\n    var elem = $('*[typewriterdelay]').first();\r\n    if (_waitMode && !reallyWaiting && !elem.length) {\r\n      _waitMode = false;\r\n      $(\"#endWaitLink\").hide();\r\n      $(\"#txtCommand\").show();\r\n    }\r\n    if (elem.attr('typewriterspeed')) {\r\n      clearInterval(typewriter_timer);\r\n      setInterval(typewriter_timer, elem.attr('typewriterspeed'));\r\n    }\r\n    var text = elem.data('typewritercontent');\r\n    if (text) {\r\n      elem.append(text.substring(0,1));\r\n      if (text.length > 1) {\r\n        elem.data('typewritercontent', text.substring(1));\r\n      } else {\r\n        elem.removeData('typewritercontent');\r\n      }\r\n    }\r\n    if (!text) {\r\n      var delay = elem.attr('typewriterdelay');\r\n      if (delay > 1) {\r\n        elem.attr('typewriterdelay', delay - 1);\r\n      } else {\r\n        elem.removeAttr('typewriterdelay');\r\n      }\r\n    }\r\n  };\r\n  var typewriter_timer = setInterval(typewriter_iterator, 100);\r\n\r\n  var original_addText = addText;\r\n  addText = function (text) {\r\n    var done = getCurrentDiv().children().last()[0];\r\n    original_addText(text);\r\n    textNodes = 0;\r\n    getCurrentDiv().find('*').contents().each(function () {\r\n      if (this == done) {\r\n        done = false;\r\n      } else if (!done) {\r\n        if (this.nodeType == 3) {\r\n          $(this).replaceWith($('<span>').data('typewritercontent', $(this).text()).attr('typewriterdelay', 0));\r\n          textNodes++;\r\n        }\r\n      }\r\n    });\r\n    if (textNodes && !_waitMode) {\r\n      original_beginWait();\r\n    }\r\n  };\r\n});\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a top-of-my-head attempt to solve some of the issues I picked out before.</p>\n<p>This version should display the \"Continue\" link (as for Quest's <code>wait {}</code> capability) when the typewriter is running. While it's typing, pressing the 'continue' button will fill in the rest of the typewriter text before clicking the real 'Continue' link.</p>\n<p>The HTML passed to this function may use the following attributes (on any element):<br>\n<code>typewriterspeed=\"80\"</code> (or any other number) - sets the number of milliseconds between letters. Speed will change at the start of this element.<br>\n<code>typewriterdelay=\"5\"</code> (or any number) - after this element, pause for time equivalent to 5 letters.<br>\n<code>typewriterstop=\"1\"</code> - pressing a key to skip typing the text will stop after this element, then continue typing at the same speed as before. You can put this immediately before a Quest <code>wait</code> to ensure that pressing a key to speed up the text doesn't prematurely end the wait; or to let the player skip through dialogue line-by-line.</p>\n<p>(<strong>NOTE</strong>: Written off the top of my head, not yet tested)</p>\n<pre><code>$(function () {\n  var reallyWaiting;\n  var original_beginWait = beginWait;\n  var original_endWait = endWait;\n  beginWait = function () {\n    reallyWaiting = true;\n    original_beginWait();\n  };\n  endWait = function() {\n    typeWriter_skip();\n  };\n  waitEnded = function () {\n    reallyWaiting = false;\n    typewriter_skip();\n  };\n  typewriter_skip = function () {\n    var stopped = false;\n    $('*[typewriterdelay]').each(function () {\n      var text = $(this).data('typewritercontent');\n      if (text) {\n        $(this).append(text);\n      }\n      $(this).removeData('typewritercontent').removeAttr('typewriterdelay');\n      if ($(this).attr('typewriterstop')) {\n        stopped = true;\n        return false\n      }\n    });\n    _waitMode = (reallyWaiting || $('*[typewriterdelay]').length);\n    if (!stopped) {\n      if (reallyWaiting) {\n        original_endWait();\n      } else {\n        $(\"#endWaitLink\").hide();\n        $(\"#txtCommand\").show();\n      }\n    }\n  };\n\n  var typewriter_iterator = function () {\n    var elem = $('*[typewriterdelay]').first();\n    if (_waitMode &amp;&amp; !reallyWaiting &amp;&amp; !elem.length) {\n      _waitMode = false;\n      $(\"#endWaitLink\").hide();\n      $(\"#txtCommand\").show();\n    }\n    if (elem.attr('typewriterspeed')) {\n      clearInterval(typewriter_timer);\n      setInterval(typewriter_timer, elem.attr('typewriterspeed'));\n    }\n    var text = elem.data('typewritercontent');\n    if (text) {\n      elem.append(text.substring(0,1));\n      if (text.length &gt; 1) {\n        elem.data('typewritercontent', text.substring(1));\n      } else {\n        elem.removeData('typewritercontent');\n      }\n    }\n    if (!text) {\n      var delay = elem.attr('typewriterdelay');\n      if (delay &gt; 1) {\n        elem.attr('typewriterdelay', delay - 1);\n      } else {\n        elem.removeAttr('typewriterdelay');\n      }\n    }\n  };\n  var typewriter_timer = setInterval(typewriter_iterator, 100);\n\n  var original_addText = addText;\n  addText = function (text) {\n    var done = getCurrentDiv().children().last()[0];\n    original_addText(text);\n    textNodes = 0;\n    getCurrentDiv().find('*').contents().each(function () {\n      if (this == done) {\n        done = false;\n      } else if (!done) {\n        if (this.nodeType == 3) {\n          $(this).replaceWith($('&lt;span&gt;').data('typewritercontent', $(this).text()).attr('typewriterdelay', 0));\n          textNodes++;\n        }\n      }\n    });\n    if (textNodes &amp;&amp; !_waitMode) {\n      original_beginWait();\n    }\n  };\n});\n</code></pre>\n\n",
      "PostDate": "2019-10-21T14:03:22.2821498Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "13a6ee54-b8e2-4426-b6a9-6bd53f3d232c",
      "UserId": 441995,
      "Username": "Narwasereg",
      "AvatarUrl": "https://i.imgur.com/APkAf96b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Since this was way too complicated, I tried a few stuff with the inbuilt commands, and found one to handle this.\r\n\r\nAt least in Desktop Version, when you add a script, there is a type of script which is \"Run script after a number of seconds\".\r\nWith this, for each line that needs a seperate \"typewriter\", you add this Script Command.\r\nAnd then, INSIDE of this Script Command, you add the Typewritter with the text needed.\r\nThe effect is then perfectly displayed ! It works really well.\r\n\r\nHere is a picture that shows what I'm talking about. The text came random from my mind so please don't judge it, it's cliché xD\r\n\r\n![](https://i.imgur.com/5eXpPFC.png)\r\n\r\nWhen the game is run, it's displayed as this :\r\n_[Enter Room]\r\n[5 seconds of nothing]\r\n\"Hello, it is me....\"_ is shown in Typewriter mode\r\n_[5 seconds of nothing]\r\n[Font color in red change for the next text, the previous ones remains default]\r\n\"I CAME TO KILL YOU\"_ is shown in Typewritter mode\r\n\r\n\r\nSince this works perfectly for me, and has exactly the effect I needed without diving too deep into Javascript Shenanigans, I consider this to be the good Alternative Solution for me ^^\r\n\r\nThank you anyway for helping me !",
      "EditableFormat": "markdown",
      "HTML": "<p>Since this was way too complicated, I tried a few stuff with the inbuilt commands, and found one to handle this.</p>\n<p>At least in Desktop Version, when you add a script, there is a type of script which is \"Run script after a number of seconds\".<br>\nWith this, for each line that needs a seperate \"typewriter\", you add this Script Command.<br>\nAnd then, INSIDE of this Script Command, you add the Typewritter with the text needed.<br>\nThe effect is then perfectly displayed ! It works really well.</p>\n<p>Here is a picture that shows what I'm talking about. The text came random from my mind so please don't judge it, it's cliché xD</p>\n<p><img src=\"https://i.imgur.com/5eXpPFC.png\" alt=\"\"></p>\n<p>When the game is run, it's displayed as this :<br>\n<em>[Enter Room]<br>\n[5 seconds of nothing]<br>\n\"Hello, it is me....\"</em> is shown in Typewriter mode<br>\n<em>[5 seconds of nothing]<br>\n[Font color in red change for the next text, the previous ones remains default]<br>\n\"I CAME TO KILL YOU\"</em> is shown in Typewritter mode</p>\n<p>Since this works perfectly for me, and has exactly the effect I needed without diving too deep into Javascript Shenanigans, I consider this to be the good Alternative Solution for me ^^</p>\n<p>Thank you anyway for helping me !</p>\n\n",
      "PostDate": "2019-10-21T15:26:07.7790348Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
