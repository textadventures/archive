{
  "Topic": {
    "TopicId": "techrt9c_uab05xzkun95w",
    "ForumId": "10",
    "Title": "Getting result (New Problem)",
    "LastUpdated": "2016-11-22T12:28:21.3222232Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a8745554-d17c-43c8-b1f9-44d287802069",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was trying to follow the \"character creation\" tutorial in order to solve a problem about getting a result, however it is not working.\r\n\r\nThe premise here is a scrip to be run when the player clicks on an Object's verb. It should get an input from the player, what would be a number. The game compares the result to the player attribute named \"player.Narrative\" and if it is greater, it returns a massage to warn the number is invalid because the character has not that much of \"player.Narrative\".\r\n\r\nIf the result is smaller than player.Narrative attribute, then it sets player.task = result.\r\n\r\nI believe it should be simple, but things are not happening as i supposed. After a test, i tried first creating a new attribute named player.invest just to store the result. But anyway, it is not working.  \r\n\r\nThis is the last code i used:\r\n\r\nplayer.invest = result\r\nif (player.invest>player.Narrative) {\r\n  msg (\"Ashley has not that points.\")\r\n}\r\nelse {\r\n  player.task = player.invest\r\n}\r\n\r\nI suppose the problem here is Quest is taking the answer as a string and not an Int. So, i suppose i need finding both a way of telling it should be an Int and that it should cancel or ignore the result in case of a string.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was trying to follow the \"character creation\" tutorial in order to solve a problem about getting a result, however it is not working.</p>\n<p>The premise here is a scrip to be run when the player clicks on an Object's verb. It should get an input from the player, what would be a number. The game compares the result to the player attribute named \"player.Narrative\" and if it is greater, it returns a massage to warn the number is invalid because the character has not that much of \"player.Narrative\".</p>\n<p>If the result is smaller than player.Narrative attribute, then it sets player.task = result.</p>\n<p>I believe it should be simple, but things are not happening as i supposed. After a test, i tried first creating a new attribute named player.invest just to store the result. But anyway, it is not working.</p>\n<p>This is the last code i used:</p>\n<p>player.invest = result<br>\nif (player.invest&gt;player.Narrative) {<br>\nmsg (\"Ashley has not that points.\")<br>\n}<br>\nelse {<br>\nplayer.task = player.invest<br>\n}</p>\n<p>I suppose the problem here is Quest is taking the answer as a string and not an Int. So, i suppose i need finding both a way of telling it should be an Int and that it should cancel or ignore the result in case of a string.</p>\n\n",
      "PostDate": "2016-11-22T12:28:21.3222232Z",
      "LastEditDate": "2016-11-26T00:49:06.8045943Z"
    },
    {
      "PostId": "df900e60-d71e-4fd4-8c5b-273431626217",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Use `IsInt` to test if a string can be concerted to an integer, and if it can, use `ToInt` to get the value.",
      "EditableFormat": "markdown",
      "HTML": "<p>Use <code>IsInt</code> to test if a string can be concerted to an integer, and if it can, use <code>ToInt</code> to get the value.</p>\n\n",
      "PostDate": "2016-11-22T13:27:25.8316038Z",
      "LastEditDate": null
    },
    {
      "PostId": "43b3edb7-3df6-4fcb-94dd-6a87ff8d75ae",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you, Pixie! now i am having a hard time trying to figure out how following this instructions! lol\r\n\r\nThis is the code i came up:\r\n\r\nget input {\r\n  if (IsInt (result)) {\r\n    ToInt (result)\r\n    if (result>player.Narrative) {\r\n      msg (\"You have not so many points!\")\r\n    }\r\n    else {\r\n      player.task = result\r\n    }\r\n  }\r\n  else {\r\n    msg (\"This is not a number!\")\r\n  }\r\n}\r\n\r\nBut any number i place, it is returning an error massage like this:\r\n\r\nError running script: Function not found: 'ToInt'\r\n\r\nThe good news is that it returns correctly if i do not type a number!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, Pixie! now i am having a hard time trying to figure out how following this instructions! lol</p>\n<p>This is the code i came up:</p>\n<p>get input {<br>\nif (IsInt (result)) {<br>\nToInt (result)<br>\nif (result&gt;player.Narrative) {<br>\nmsg (\"You have not so many points!\")<br>\n}<br>\nelse {<br>\nplayer.task = result<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"This is not a number!\")<br>\n}<br>\n}</p>\n<p>But any number i place, it is returning an error massage like this:</p>\n<p>Error running script: Function not found: 'ToInt'</p>\n<p>The good news is that it returns correctly if i do not type a number!</p>\n\n",
      "PostDate": "2016-11-22T13:50:45.0766524Z",
      "LastEditDate": null
    },
    {
      "PostId": "0ccc9834-4ae5-4d65-a8aa-8998cbfbaf52",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As you can see, on the second attempt i suppressed the player.invest from the script in order to reduce the number os attributes in the game. This time, i returned it to the scrip this way:\r\n\r\nget input {\r\n  if (IsInt (result)) {\r\n    player.invest=ToInt (result)\r\n    if (player.invest>player.Narrative) {\r\n      msg (\"You have not so many points!\")\r\n    }\r\n    else {\r\n      player.task = player.invest\r\n    }\r\n  }\r\n  else {\r\n    msg (\"This is not a number!\")\r\n  }\r\n}\r\n\r\nIt seems to be working fine. I will tell the game to print the result to check if it is working all good!\r\nThank you, Pixie! And thank you HK for another post where you approach the matter.",
      "EditableFormat": "markdown",
      "HTML": "<p>As you can see, on the second attempt i suppressed the player.invest from the script in order to reduce the number os attributes in the game. This time, i returned it to the scrip this way:</p>\n<p>get input {<br>\nif (IsInt (result)) {<br>\nplayer.invest=ToInt (result)<br>\nif (player.invest&gt;player.Narrative) {<br>\nmsg (\"You have not so many points!\")<br>\n}<br>\nelse {<br>\nplayer.task = player.invest<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"This is not a number!\")<br>\n}<br>\n}</p>\n<p>It seems to be working fine. I will tell the game to print the result to check if it is working all good!<br>\nThank you, Pixie! And thank you HK for another post where you approach the matter.</p>\n\n",
      "PostDate": "2016-11-22T14:10:08.9163625Z",
      "LastEditDate": null
    },
    {
      "PostId": "6833415a-8666-4c88-a476-a12fe5a80c59",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "good job, you discovered the error!\r\n\r\nWhen a Function returns a Value, it must be used: set/stored to a VARIABLE or used by another Function/Script, examples:\r\n\r\n```\r\ngame.integer_attribute = GetRandomInt (1,10)\r\n\r\nmsg (game.integer_attribute)\r\n\r\n// -----------------\r\n\r\ngame.stringlist_attribute = split (\"red;blue;yellow\", \";\")\r\ngame.string_attribute = StringListItem (game.stringlist_attribute, GetRandomInt (0,2))\r\n\r\nmsg (game.string_attribute)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>good job, you discovered the error!</p>\n<p>When a Function returns a Value, it must be used: set/stored to a VARIABLE or used by another Function/Script, examples:</p>\n<pre><code>game.integer_attribute = GetRandomInt (1,10)\n\nmsg (game.integer_attribute)\n\n// -----------------\n\ngame.stringlist_attribute = split (\"red;blue;yellow\", \";\")\ngame.string_attribute = StringListItem (game.stringlist_attribute, GetRandomInt (0,2))\n\nmsg (game.string_attribute)\n</code></pre>\n\n",
      "PostDate": "2016-11-22T21:31:16.0405609Z",
      "LastEditDate": "2016-11-22T21:43:22.9231971Z"
    },
    {
      "PostId": "da8c37da-fb42-4e1e-8311-13f30ad5c903",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, Hk.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Hk.</p>\n\n",
      "PostDate": "2016-11-22T23:54:33.5858333Z",
      "LastEditDate": null
    },
    {
      "PostId": "13dfc136-a446-40fb-8ef8-69a19cf67758",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am using a script to ask the player how many of the \"Narrative Points\" he/she wants investing on the task at hand. So it takes the result to later compare to the difficulty level and print the results of the attempt. I created a few details on the script to check if the character has so many points and even return if the player types a string instead of a number.\r\n\r\nHowever, i am not finding a way to make Quest ask again if the player does not type a valid number (More points than possessed or strings instead of numbers) In the way the script is, the game just treats what was typed as if a zero and goes on. I need to make it try again if the Get Input gets something not valid. Here goes the script:\r\n\r\nif (Got(Influence Trait)) {\r\n  player.task = player.task + 2\r\n}\r\nmsg (\"How many Narrative Points will Ashley invest on this task?\")\r\nget input {\r\n  if (IsInt (result)) {\r\n    player.invest = ToInt (result)\r\n    if (player.invest>player.Narrative) {\r\n      msg (\"Ashley has not that many Narrative Points!\")\r\n    }\r\n    else if (player.invest<0) {\r\n      msg (\"You may not invest negative numbers.\")\r\n    }\r\n    else {\r\n      player.task = player.task+player.invest\r\n      player.Narrative = player.Narrative - player.invest\r\n    }\r\n  }\r\n  else {\r\n    msg (\"Why don't you try a number?\")\r\n  }\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>I am using a script to ask the player how many of the \"Narrative Points\" he/she wants investing on the task at hand. So it takes the result to later compare to the difficulty level and print the results of the attempt. I created a few details on the script to check if the character has so many points and even return if the player types a string instead of a number.</p>\n<p>However, i am not finding a way to make Quest ask again if the player does not type a valid number (More points than possessed or strings instead of numbers) In the way the script is, the game just treats what was typed as if a zero and goes on. I need to make it try again if the Get Input gets something not valid. Here goes the script:</p>\n<p>if (Got(Influence Trait)) {<br>\nplayer.task = player.task + 2<br>\n}<br>\nmsg (\"How many Narrative Points will Ashley invest on this task?\")<br>\nget input {<br>\nif (IsInt (result)) {<br>\nplayer.invest = ToInt (result)<br>\nif (player.invest&gt;player.Narrative) {<br>\nmsg (\"Ashley has not that many Narrative Points!\")<br>\n}<br>\nelse if (player.invest&lt;0) {<br>\nmsg (\"You may not invest negative numbers.\")<br>\n}<br>\nelse {<br>\nplayer.task = player.task+player.invest<br>\nplayer.Narrative = player.Narrative - player.invest<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"Why don't you try a number?\")<br>\n}<br>\n}</p>\n\n",
      "PostDate": "2016-11-26T00:53:41.8269817Z",
      "LastEditDate": null
    },
    {
      "PostId": "d0cddc1c-e95b-4ebe-8379-94df04cb6940",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "By the way, i am making some experiments with Call Function. However, it is not solved yet and i am not sure if it is the best way.",
      "EditableFormat": "markdown",
      "HTML": "<p>By the way, i am making some experiments with Call Function. However, it is not solved yet and i am not sure if it is the best way.</p>\n\n",
      "PostDate": "2016-11-26T01:01:04.5603582Z",
      "LastEditDate": null
    },
    {
      "PostId": "e81ebcee-1b54-4cd2-aea6-01f8504f7bfe",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is the new code using Functions. But still not working:\r\n\r\nmsg (\"How many Narrative Points will Ashley invest on this task?\")\r\nget input {\r\n  if (IsInt (result)) {\r\n    player.invest = ToInt (result)\r\n    if (player.invest>player.Narrative) {\r\n      msg (\"Ashley has not that many Narrative Points!\")\r\n      Resolution\r\n    }\r\n    else if (player.invest<0) {\r\n      msg (\"You may not invest negative numbers.\")\r\n      Resolution\r\n    }\r\n    else {\r\n      player.task = player.invest\r\n      player.Narrative = player.Narrative - player.invest\r\n    }\r\n  }\r\n  else {\r\n    msg (\"Why don't you try a number?\")\r\n  }\r\n  msg (\"End of test\")\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>This is the new code using Functions. But still not working:</p>\n<p>msg (\"How many Narrative Points will Ashley invest on this task?\")<br>\nget input {<br>\nif (IsInt (result)) {<br>\nplayer.invest = ToInt (result)<br>\nif (player.invest&gt;player.Narrative) {<br>\nmsg (\"Ashley has not that many Narrative Points!\")<br>\nResolution<br>\n}<br>\nelse if (player.invest&lt;0) {<br>\nmsg (\"You may not invest negative numbers.\")<br>\nResolution<br>\n}<br>\nelse {<br>\nplayer.task = player.invest<br>\nplayer.Narrative = player.Narrative - player.invest<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"Why don't you try a number?\")<br>\n}<br>\nmsg (\"End of test\")<br>\n}</p>\n\n",
      "PostDate": "2016-11-26T01:08:42.4926944Z",
      "LastEditDate": null
    },
    {
      "PostId": "aae8fb76-3737-4276-a178-58498dd1cfe9",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the trick is you got to loop ('looping') (do/run/use/activate/exevute/call/invoke/etc again) your scripting, which can be done a few ways:\r\n\r\n(you do NOT want an endless/infinite loop... as while the looping is endless/inifinte, quest's/computer's resources to handle the looping are not endless/infinite, and so quest crashes)\r\n\r\n1. using a Function for your scripting, and calling (doing/running/activating/executing/using) the Function again\r\n\r\n(Functions also allow for Parameter/Argument/input_values and return-value capabilities)\r\n\r\nin code:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    example_function\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"example_function\">\r\n  ask (\"loop this function?\") {\r\n    if (result) { // if yes/true\r\n      example_function\r\n    } else { // if no/false\r\n      msg (\"You decided not to loop this function\")\r\n    }\r\n  }\r\n</function>\r\n```\r\n\r\nfor the GUI/Editor scripting path, for using/doing/calling your Function:\r\n\r\n(create/add your Function and its scripting, of course, so your Function exists, so you can then use/call/do it, lol)\r\n\r\nrun as script -> add new script -> 'output(I think)' section/category -> 'call function' Script -> (see below)\r\n\r\nFunction Name (small/skinny rectangle text box): type in the name of your function you want to do/use\r\noptionally click the 'add parameters' button, to add in your arguments (input values) for your parameters, which are to be used by the Function's scripting), and to loop, simply add in another 'call function' Script where you want it within/for your Function's scripting.\r\n\r\n-----------------\r\n\r\n2. using a Script Attribute for your scripting:\r\n\r\n(A script Attribute by itself can't use Parameters nor have a return value, however you can also create/add Delegates, which will allow the capability of Parameters and a return value to your use of using a Script Attribute, so it's the same as a Function)\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    do (game, \"example_script_attribute\") // 'do' is more powerful/useful, as it allows you to use/do concatenation/nested Functions for your Object's and/or Attirbute's name inputs)\r\n    // or:\r\n    // invoke (game.example_script_attribute) // but for running a simple Script Attribute, 'invoke' is fine\r\n  </attr>\r\n  <attr name=\"example_script_attribute\" type=\"script\">\r\n    ask (\"loop this script attribute?\") {\r\n      if (result) { // if yes/true\r\n        do (game, \"example_script_attribute\") // 'do' is more powerful/useful, as it allows you to use/do concatenation/nested Functions for your Object's and/or Attirbute's name inputs)\r\n        // or:\r\n        // invoke (game.example_script_attribute) // but for running a simple Script Attribute, 'invoke' is fine\r\n      } else { // if no/false\r\n        msg (\"You decided not to loop this script attribute\")\r\n      }\r\n    }\r\n  </attr>\r\n</game>\r\n```\r\n\r\nas for how to do this in the GUI/Editor, taking some guesses:\r\n\r\nthere should be a scripting option to do a Script Attribute, but if not, you should be able to use the 'call function' Script, and type in 'do' or 'invoke' as these are Functions, but you'll have to add in their needed parameter arguments: name of object, name of script attribute. Let me know if you need help on how/what to do with this stuff.\r\n\r\n------\r\n\r\nthere's also the 'while' Function too, and you can also use the 'for' or 'foreach' Functions as well.\r\n\r\n------\r\n\r\nif you can understand code, here's a lot of examples of looping Functions:\r\n\r\n(you can try copying my code, and pasting it into a new game's game code --- delete it's default code of course, and maybe you can 'play/see/try/test/study' my character creation code in action)\r\n\r\n(though, this is very badly done old code, as I was having issues for an unknown reason, so that's why I have so many Functions, instead of creating a single Function to do all of those Functions)\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game\r\n\r\non/for character creation",
      "EditableFormat": "markdown",
      "HTML": "<p>the trick is you got to loop ('looping') (do/run/use/activate/exevute/call/invoke/etc again) your scripting, which can be done a few ways:</p>\n<p>(you do NOT want an endless/infinite loop... as while the looping is endless/inifinte, quest's/computer's resources to handle the looping are not endless/infinite, and so quest crashes)</p>\n<ol>\n<li>using a Function for your scripting, and calling (doing/running/activating/executing/using) the Function again</li>\n</ol>\n<p>(Functions also allow for Parameter/Argument/input_values and return-value capabilities)</p>\n<p>in code:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    example_function\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"example_function\"&gt;\n  ask (\"loop this function?\") {\n    if (result) { // if yes/true\n      example_function\n    } else { // if no/false\n      msg (\"You decided not to loop this function\")\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>for the GUI/Editor scripting path, for using/doing/calling your Function:</p>\n<p>(create/add your Function and its scripting, of course, so your Function exists, so you can then use/call/do it, lol)</p>\n<p>run as script -&gt; add new script -&gt; 'output(I think)' section/category -&gt; 'call function' Script -&gt; (see below)</p>\n<p>Function Name (small/skinny rectangle text box): type in the name of your function you want to do/use<br>\noptionally click the 'add parameters' button, to add in your arguments (input values) for your parameters, which are to be used by the Function's scripting), and to loop, simply add in another 'call function' Script where you want it within/for your Function's scripting.</p>\n<hr>\n<ol start=\"2\">\n<li>using a Script Attribute for your scripting:</li>\n</ol>\n<p>(A script Attribute by itself can't use Parameters nor have a return value, however you can also create/add Delegates, which will allow the capability of Parameters and a return value to your use of using a Script Attribute, so it's the same as a Function)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    do (game, \"example_script_attribute\") // 'do' is more powerful/useful, as it allows you to use/do concatenation/nested Functions for your Object's and/or Attirbute's name inputs)\n    // or:\n    // invoke (game.example_script_attribute) // but for running a simple Script Attribute, 'invoke' is fine\n  &lt;/attr&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"script\"&gt;\n    ask (\"loop this script attribute?\") {\n      if (result) { // if yes/true\n        do (game, \"example_script_attribute\") // 'do' is more powerful/useful, as it allows you to use/do concatenation/nested Functions for your Object's and/or Attirbute's name inputs)\n        // or:\n        // invoke (game.example_script_attribute) // but for running a simple Script Attribute, 'invoke' is fine\n      } else { // if no/false\n        msg (\"You decided not to loop this script attribute\")\n      }\n    }\n  &lt;/attr&gt;\n&lt;/game&gt;\n</code></pre>\n<p>as for how to do this in the GUI/Editor, taking some guesses:</p>\n<p>there should be a scripting option to do a Script Attribute, but if not, you should be able to use the 'call function' Script, and type in 'do' or 'invoke' as these are Functions, but you'll have to add in their needed parameter arguments: name of object, name of script attribute. Let me know if you need help on how/what to do with this stuff.</p>\n<hr>\n<p>there's also the 'while' Function too, and you can also use the 'for' or 'foreach' Functions as well.</p>\n<hr>\n<p>if you can understand code, here's a lot of examples of looping Functions:</p>\n<p>(you can try copying my code, and pasting it into a new game's game code --- delete it's default code of course, and maybe you can 'play/see/try/test/study' my character creation code in action)</p>\n<p>(though, this is very badly done old code, as I was having issues for an unknown reason, so that's why I have so many Functions, instead of creating a single Function to do all of those Functions)</p>\n<p>http://textadventures.co.uk/forum/samples/topic/4988/character-creation-crude-code-and-sample-game</p>\n<p>on/for character creation</p>\n\n",
      "PostDate": "2016-11-26T02:43:26.6082797Z",
      "LastEditDate": "2016-11-26T03:10:09.549661Z"
    },
    {
      "PostId": "5b1cad87-1692-410c-a5d7-feb2adbd9672",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What you'll want to do is turn that entire script into a function, This will allow you to repeatedly run the function in a normal script. When you reach either of the error states you call the function again to make it repeat till a valid input is given.\r\n\r\nexample\r\nevent script of whatever is happening\r\n<code>\r\n//stuff happens, player is performing a task\r\nInvestPoints()\r\nplayer.task = player.invest\r\n</code>\r\nInvestPoints function\r\n<code>\r\nmsg (\"How many Narrative Points will Ashley invest on this task?\")\r\nget input {\r\nif (IsInt (result)) {\r\nplayer.invest = ToInt (result)\r\nif (player.invest>player.Narrative) {\r\nmsg (\"Ashley has not that many Narrative Points!\")\r\nResolution\r\n}\r\nelse if (player.invest<0) {\r\nmsg (\"You may not invest negative numbers.\")\r\nInvestPoints()\r\n}\r\nelse {\r\nplayer.task = player.invest\r\nplayer.Narrative = player.Narrative - player.invest\r\n}\r\n}\r\nelse {\r\nmsg (\"Why don't you try a number?\")\r\nInvestPoints()\r\n}\r\nmsg (\"End of test\")\r\n}\r\n</code>",
      "EditableFormat": "markdown",
      "HTML": "<p>What you'll want to do is turn that entire script into a function, This will allow you to repeatedly run the function in a normal script. When you reach either of the error states you call the function again to make it repeat till a valid input is given.</p>\n<p>example<br>\nevent script of whatever is happening<br>\n<code><br>\n//stuff happens, player is performing a task<br>\nInvestPoints()<br>\nplayer.task = player.invest<br>\n</code><br>\nInvestPoints function<br>\n<code><br>\nmsg (\"How many Narrative Points will Ashley invest on this task?\")<br>\nget input {<br>\nif (IsInt (result)) {<br>\nplayer.invest = ToInt (result)<br>\nif (player.invest&gt;player.Narrative) {<br>\nmsg (\"Ashley has not that many Narrative Points!\")<br>\nResolution<br>\n}<br>\nelse if (player.invest&lt;0) {<br>\nmsg (\"You may not invest negative numbers.\")<br>\nInvestPoints()<br>\n}<br>\nelse {<br>\nplayer.task = player.invest<br>\nplayer.Narrative = player.Narrative - player.invest<br>\n}<br>\n}<br>\nelse {<br>\nmsg (\"Why don't you try a number?\")<br>\nInvestPoints()<br>\n}<br>\nmsg (\"End of test\")<br>\n}<br>\n</code></p>\n\n",
      "PostDate": "2016-11-26T02:49:27.3110078Z",
      "LastEditDate": null
    },
    {
      "PostId": "165c9ebf-81e7-4839-bd92-66a446e8ba55",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nif you're coding in directly (non-GU/IEditor), and you use the greater than ( > ) or lesser than ( < ) symbols... you need your scripting to be encased within these tags:\r\n\r\n```\r\n<![CDATA[ your scripting ]]>\r\n```\r\n\r\n--------------\r\n\r\nfor example:\r\n\r\n```\r\n<function name=\"example_function\">\r\n  if (player.strength_integer_attribute > 66) {\r\n    player.strength_string_attribute = \"strong\"\r\n  } else if (player.strength_integer_attribute > 33) {\r\n    player.strength_string_attribute = \"average\"\r\n  } else {\r\n    player.strength_string_attribute = \"weak\"\r\n  }\r\n</function>\r\n\r\n// ERROR!!! quest is incorrectly reading your '>' and '<' symbols in your/mine/whatever/lol 'if/else if' Scripts as aslx/xml/html creation tags ( like this such creation tag: <function name=\"example_function\">content</function> ), and not correctly as 'greater than' and 'lesser than' math-value-comparison operations/symbols. This is what the 'CDATA' tag does.\r\n\r\n// --------\r\n\r\n<function name=\"example_function\"><![CDATA[\r\n  if (player.strength_integer_attribute > 66) {\r\n    player.strength_string_attribute = \"strong\"\r\n  } else if (player.strength_integer_attribute > 33) {\r\n    player.strength_string_attribute = \"average\"\r\n  } else {\r\n    player.strength_string_attribute = \"weak\"\r\n  }\r\n]]></function>\r\n\r\n// NO error\r\n\r\n// or if you like this format better (you can see the nesting/containment/indenting/relationship layers/levels clearly):\r\n\r\n<function name=\"example_function\">\r\n  <![CDATA[\r\n    if (player.strength_integer_attribute > 66) {\r\n      player.strength_string_attribute = \"strong\"\r\n    } else if (player.strength_integer_attribute > 33) {\r\n      player.strength_string_attribute = \"average\"\r\n    } else {\r\n      player.strength_string_attribute = \"weak\"\r\n    }\r\n  ]]>\r\n</function>\r\n\r\n// NO error\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>if you're coding in directly (non-GU/IEditor), and you use the greater than ( &gt; ) or lesser than ( &lt; ) symbols... you need your scripting to be encased within these tags:</p>\n<pre><code>&lt;![CDATA[ your scripting ]]&gt;\n</code></pre>\n<hr>\n<p>for example:</p>\n<pre><code>&lt;function name=\"example_function\"&gt;\n  if (player.strength_integer_attribute &gt; 66) {\n    player.strength_string_attribute = \"strong\"\n  } else if (player.strength_integer_attribute &gt; 33) {\n    player.strength_string_attribute = \"average\"\n  } else {\n    player.strength_string_attribute = \"weak\"\n  }\n&lt;/function&gt;\n\n// ERROR!!! quest is incorrectly reading your '&gt;' and '&lt;' symbols in your/mine/whatever/lol 'if/else if' Scripts as aslx/xml/html creation tags ( like this such creation tag: &lt;function name=\"example_function\"&gt;content&lt;/function&gt; ), and not correctly as 'greater than' and 'lesser than' math-value-comparison operations/symbols. This is what the 'CDATA' tag does.\n\n// --------\n\n&lt;function name=\"example_function\"&gt;&lt;![CDATA[\n  if (player.strength_integer_attribute &gt; 66) {\n    player.strength_string_attribute = \"strong\"\n  } else if (player.strength_integer_attribute &gt; 33) {\n    player.strength_string_attribute = \"average\"\n  } else {\n    player.strength_string_attribute = \"weak\"\n  }\n]]&gt;&lt;/function&gt;\n\n// NO error\n\n// or if you like this format better (you can see the nesting/containment/indenting/relationship layers/levels clearly):\n\n&lt;function name=\"example_function\"&gt;\n  &lt;![CDATA[\n    if (player.strength_integer_attribute &gt; 66) {\n      player.strength_string_attribute = \"strong\"\n    } else if (player.strength_integer_attribute &gt; 33) {\n      player.strength_string_attribute = \"average\"\n    } else {\n      player.strength_string_attribute = \"weak\"\n    }\n  ]]&gt;\n&lt;/function&gt;\n\n// NO error\n</code></pre>\n\n",
      "PostDate": "2016-11-26T02:57:47.5445287Z",
      "LastEditDate": "2016-11-26T03:12:27.5423204Z"
    },
    {
      "PostId": "79e90150-fdff-4992-88dc-4dae67e9e788",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, people! This is a lot yo study! Again! lol\r\n\r\nYesterday, i barely made it work. I can make it works when i get the desired result running if all conditions are ok. However, it leaves me with a weird problem. If making a Function, i need it would be called every single time the game needs solving a \"Task Test\". However, the \"what to do if everything is fine\" (i.e. How perform is player entered a number under or equal to player.Narrative) must be stored in the place where the script was called. So, everything ruins. \r\n\r\nI am not sure if i can see the advantages of storing the script as an attribute instead of a Function, however i also do not understand a lot of stuff. I still clueless about the Function parameters, and perhaps it may be important for this script.\r\n\r\nSo, all i may do for now is to sit and study our posts and try to figure out how to solve the matter. Perhaps i should hire HK to solve this code for me. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, people! This is a lot yo study! Again! lol</p>\n<p>Yesterday, i barely made it work. I can make it works when i get the desired result running if all conditions are ok. However, it leaves me with a weird problem. If making a Function, i need it would be called every single time the game needs solving a \"Task Test\". However, the \"what to do if everything is fine\" (i.e. How perform is player entered a number under or equal to player.Narrative) must be stored in the place where the script was called. So, everything ruins.</p>\n<p>I am not sure if i can see the advantages of storing the script as an attribute instead of a Function, however i also do not understand a lot of stuff. I still clueless about the Function parameters, and perhaps it may be important for this script.</p>\n<p>So, all i may do for now is to sit and study our posts and try to figure out how to solve the matter. Perhaps i should hire HK to solve this code for me.</p>\n\n",
      "PostDate": "2016-11-26T11:19:52.3610331Z",
      "LastEditDate": null
    },
    {
      "PostId": "097487ef-599a-402a-8965-5ad36488c677",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "TinFoilMkIV, your suggestion is also not working. It is doing the basic same error. If the player types an undesired result (not a number, negative number or excessive value) if flows to the \"End Test\" print.\r\n\r\nI need a Function to be called and only allow the Object's script continue running if it gets a valid result from player, basically. I made it work once, but working only giving one result. I need this script to be an ace, to be called every time i need taking an input from the player to solve a task.\r\n\r\nNow i will study in detail HK's suggestions.",
      "EditableFormat": "markdown",
      "HTML": "<p>TinFoilMkIV, your suggestion is also not working. It is doing the basic same error. If the player types an undesired result (not a number, negative number or excessive value) if flows to the \"End Test\" print.</p>\n<p>I need a Function to be called and only allow the Object's script continue running if it gets a valid result from player, basically. I made it work once, but working only giving one result. I need this script to be an ace, to be called every time i need taking an input from the player to solve a task.</p>\n<p>Now i will study in detail HK's suggestions.</p>\n\n",
      "PostDate": "2016-11-26T11:47:42.0442323Z",
      "LastEditDate": null
    },
    {
      "PostId": "e5ba08af-cf6d-4ee3-8b63-d36c2aa45772",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "let's look at some very simple Functions, to help you understand how Parameters/Arguments (inputs) work (and if need be, returned values too):\r\n\r\n```\r\n<function name=\"adder_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\">\r\n  return (number_1_parameter + number_2_parameter)\r\n</function>\r\n\r\n<function name=\"subtracter_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\">\r\n  return (number_1_parameter - number_2_parameter)\r\n</function>\r\n\r\n<function name=\"multiplier_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\">\r\n  return (number_1_parameter * number_2_parameter)\r\n</function>\r\n\r\n<function name=\"divider_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\">\r\n  return (number_1_parameter / number_2_parameter)\r\n</function>\r\n\r\n<function name=\"display_function\">\r\n  msg (game.integer_attribute)\r\n</function>\r\n\r\n<function name=\"test_function\">\r\n    display_function\r\n    game.integer_attribute = adder_function (10,5)\r\n    display_function\r\n    game.integer_attribute = subtracter_function (10,5)\r\n    display_function\r\n    game.integer_attribute = multiplier_function (10,5)\r\n    display_function\r\n    game.integer_attribute = divider_function (10,5)\r\n    display_function\r\n    game.integer_attribute = adder_function (5,5)\r\n    display_function\r\n    game.integer_attribute = subtracter_function (5,5)\r\n    display_function\r\n    game.integer_attribute = multiplier_function (5,5)\r\n    display_function\r\n    game.integer_attribute = divider_function (5,5)\r\n    display_function\r\n    game.integer_attribute = adder_function (50,5)\r\n    display_function\r\n    game.integer_attribute = subtracter_function (50,5)\r\n    display_function\r\n    game.integer_attribute = multiplier_function (50,5)\r\n    display_function\r\n    game.integer_attribute = divider_function (50,5)\r\n</function>\r\n\r\n<game name=\"example_game\">\r\n  <attr name=\"integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    test_function\r\n  </attr>\r\n</game>\r\n\r\n// -------------------------\r\n\r\n// game.integer_attribute = 0\r\n// game.start\r\n// -> test_function\r\n// ->-> display_function\r\n// ->->-> 0\r\n// ->-> adder_function (10,5)\r\n// ->->-> game.integer_attribute = 15\r\n// ->-> display_function\r\n// ->->-> 15\r\n// ->-> subtracter_function (10,5)\r\n// ->->-> game.integer_attribute = 5\r\n// ->-> display_function\r\n// ->->-> 5\r\n// ->-> multiplier_function (10,5)\r\n// ->->-> game.integer_attribute = 50\r\n// ->-> display_function\r\n// ->->-> 50\r\n// ->-> divider_function (10,5)\r\n// ->->-> game.integer_attribute = 2\r\n// ->-> display_function\r\n// ->->-> 2\r\n// ->-> adder_function (5,5)\r\n// ->->-> game.integer_attribute = 10\r\n// ->-> display_function\r\n// ->->-> 10\r\n// ->-> subtracter_function (5,5)\r\n// ->->-> game.integer_attribute = 0\r\n// ->-> display_function\r\n// ->->-> 0\r\n// ->-> multiplier_function (5,5)\r\n// ->->-> game.integer_attribute = 25\r\n// ->-> display_function\r\n// ->->-> 25\r\n// ->-> divider_function (5,5)\r\n// ->->-> game.integer_attribute = 1\r\n// ->-> display_function\r\n// ->->-> 1\r\n// ->-> adder_function (50,5)\r\n// ->->-> game.integer_attribute = 55\r\n// ->-> display_function\r\n// ->->-> 55\r\n// ->-> subtracter_function (50,5)\r\n// ->->-> game.integer_attribute = 45\r\n// ->-> display_function\r\n// ->->-> 45\r\n// ->-> multiplier_function (50,5)\r\n// ->->-> game.integer_attribute = 250\r\n// ->-> display_function\r\n// ->->-> 250\r\n// ->-> divider_function (50,5)\r\n// ->->-> game.integer_attribute = 10\r\n// ->-> display_function\r\n// ->->-> 10\r\n\r\n// -------------------\r\n\r\nhow Parameters/Arguments work:\r\n\r\ngame.attribute_1 = \"one\"\r\ngame.attribute_2 = \"two\"\r\n\r\n<function name=\"example_function\" parameter=\"parameter_1,parameter_2\">\r\n// <function name=\"example_function\" parameter=\"(position 1) parameter_1, (position 2) parameter_2\">\r\n  msg (parameter_1)\r\n  msg (Parameter_1)\r\n</function>\r\n\r\n// ---\r\n\r\nexample_function (game.attribute_1,game.attribute_2)\r\n// Argument Values/VARIABLES: (position 1 / argument 1) game.attribute_1, (position 2 / argument 2) game.attribute_2\r\n// example_function (argument 1: game.attribute_1 = \"one\", argument 2: game.attribute_2 = \"two\")\r\n\r\n// quest does this stuff automatically (hidden from you) for you:\r\n//\r\n// Argument position 1 matches up with Parameter position 1:\r\n// parameter_1 = (argument_1) game.attribute_1 = \"one\"\r\n// parameter_1 = \"one\"\r\n//\r\n// Argument position 2 matches up with Parameter position 2:\r\n// parameter_2 = (argument 2) game.attribute_2 = \"two\"\r\n// parameter_2 = \"two\"\r\n\r\n// msg (parameter_1)\r\n// output: one\r\n//\r\n// msg (parameter_2)\r\n// output: two\r\n```\r\n\r\n-----------------\r\n\r\nthe GUI/Editor works the same way: NAME_OF_FUNCTION and optionally 'add in your: arguments when calling function / parameters when creating-adding function' and optionally setting it to have a return value and what type of value (int, string, double, object, boolean, etc) you'll must (else an error) return, so hopefully you can figure it out from comparing it to my function coding\r\n\r\n---------------\r\n\r\ndoes this help, or is it confusing to you?",
      "EditableFormat": "markdown",
      "HTML": "<p>let's look at some very simple Functions, to help you understand how Parameters/Arguments (inputs) work (and if need be, returned values too):</p>\n<pre><code>&lt;function name=\"adder_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\"&gt;\n  return (number_1_parameter + number_2_parameter)\n&lt;/function&gt;\n\n&lt;function name=\"subtracter_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\"&gt;\n  return (number_1_parameter - number_2_parameter)\n&lt;/function&gt;\n\n&lt;function name=\"multiplier_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\"&gt;\n  return (number_1_parameter * number_2_parameter)\n&lt;/function&gt;\n\n&lt;function name=\"divider_function\" parameters=\"number_1_parameter,number_2_parameter\" type=\"int\"&gt;\n  return (number_1_parameter / number_2_parameter)\n&lt;/function&gt;\n\n&lt;function name=\"display_function\"&gt;\n  msg (game.integer_attribute)\n&lt;/function&gt;\n\n&lt;function name=\"test_function\"&gt;\n    display_function\n    game.integer_attribute = adder_function (10,5)\n    display_function\n    game.integer_attribute = subtracter_function (10,5)\n    display_function\n    game.integer_attribute = multiplier_function (10,5)\n    display_function\n    game.integer_attribute = divider_function (10,5)\n    display_function\n    game.integer_attribute = adder_function (5,5)\n    display_function\n    game.integer_attribute = subtracter_function (5,5)\n    display_function\n    game.integer_attribute = multiplier_function (5,5)\n    display_function\n    game.integer_attribute = divider_function (5,5)\n    display_function\n    game.integer_attribute = adder_function (50,5)\n    display_function\n    game.integer_attribute = subtracter_function (50,5)\n    display_function\n    game.integer_attribute = multiplier_function (50,5)\n    display_function\n    game.integer_attribute = divider_function (50,5)\n&lt;/function&gt;\n\n&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    test_function\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n// -------------------------\n\n// game.integer_attribute = 0\n// game.start\n// -&gt; test_function\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 0\n// -&gt;-&gt; adder_function (10,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 15\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 15\n// -&gt;-&gt; subtracter_function (10,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 5\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 5\n// -&gt;-&gt; multiplier_function (10,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 50\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 50\n// -&gt;-&gt; divider_function (10,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 2\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 2\n// -&gt;-&gt; adder_function (5,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 10\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 10\n// -&gt;-&gt; subtracter_function (5,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 0\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 0\n// -&gt;-&gt; multiplier_function (5,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 25\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 25\n// -&gt;-&gt; divider_function (5,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 1\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 1\n// -&gt;-&gt; adder_function (50,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 55\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 55\n// -&gt;-&gt; subtracter_function (50,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 45\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 45\n// -&gt;-&gt; multiplier_function (50,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 250\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 250\n// -&gt;-&gt; divider_function (50,5)\n// -&gt;-&gt;-&gt; game.integer_attribute = 10\n// -&gt;-&gt; display_function\n// -&gt;-&gt;-&gt; 10\n\n// -------------------\n\nhow Parameters/Arguments work:\n\ngame.attribute_1 = \"one\"\ngame.attribute_2 = \"two\"\n\n&lt;function name=\"example_function\" parameter=\"parameter_1,parameter_2\"&gt;\n// &lt;function name=\"example_function\" parameter=\"(position 1) parameter_1, (position 2) parameter_2\"&gt;\n  msg (parameter_1)\n  msg (Parameter_1)\n&lt;/function&gt;\n\n// ---\n\nexample_function (game.attribute_1,game.attribute_2)\n// Argument Values/VARIABLES: (position 1 / argument 1) game.attribute_1, (position 2 / argument 2) game.attribute_2\n// example_function (argument 1: game.attribute_1 = \"one\", argument 2: game.attribute_2 = \"two\")\n\n// quest does this stuff automatically (hidden from you) for you:\n//\n// Argument position 1 matches up with Parameter position 1:\n// parameter_1 = (argument_1) game.attribute_1 = \"one\"\n// parameter_1 = \"one\"\n//\n// Argument position 2 matches up with Parameter position 2:\n// parameter_2 = (argument 2) game.attribute_2 = \"two\"\n// parameter_2 = \"two\"\n\n// msg (parameter_1)\n// output: one\n//\n// msg (parameter_2)\n// output: two\n</code></pre>\n<hr>\n<p>the GUI/Editor works the same way: NAME_OF_FUNCTION and optionally 'add in your: arguments when calling function / parameters when creating-adding function' and optionally setting it to have a return value and what type of value (int, string, double, object, boolean, etc) you'll must (else an error) return, so hopefully you can figure it out from comparing it to my function coding</p>\n<hr>\n<p>does this help, or is it confusing to you?</p>\n\n",
      "PostDate": "2016-11-26T14:27:23.7375608Z",
      "LastEditDate": "2016-11-26T14:41:46.2790298Z"
    },
    {
      "PostId": "92be720e-5d03-47a6-9771-2afaa710308f",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Never mind, people. I found an alternative solution, not using Functions, but changing the logic of where scripts are placed and what happens next.",
      "EditableFormat": "markdown",
      "HTML": "<p>Never mind, people. I found an alternative solution, not using Functions, but changing the logic of where scripts are placed and what happens next.</p>\n\n",
      "PostDate": "2016-11-26T15:06:09.3758285Z",
      "LastEditDate": null
    },
    {
      "PostId": "c372d6f3-4fea-4642-9942-15391d683d25",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "think of scripting as a phone call, you can communicate via your voice, but once the phone call is over, what was communicated is lost/erased/gone-forever/destroyed (ignore real life tele-companies recording/saving your conversations without your permission for cops to use against you, lol). You can't use that communication elsewhere as it no longer exists.\r\n\r\nThis type of non-preserved/saved/stored/recorded communication is the use of:\r\n\r\nVariable VARIABLES (NAME_OF_VARIABLE = VALUE_OR_EXPRESSION), examples:\r\n\r\nx = 5\r\nhandled = false\r\nright_hand = sword // 'sword' must be an actual existing or still existing Object, of course\r\nmy_string = \"hi, my name is HK, what is your name?\"\r\n\r\n```\r\n<game name=\"blah_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    blah_function // NO error occurs, as it creates its local 'x' Variable along with it's (initial) value of 5\r\n    // 'blah_function' has ended, so its local 'x' Variable is destroyed, and thus now there's no existing 'x' Variable\r\n    blah_2_function // this function fails as it uses an 'x' Variable, but none exists for it to use\r\n    // let's just pretend that the error in 'blah_2_function' doesn't prevent from doing 'blah_3_function', so we can continue...\r\n    blah_3_function // NO error occurs, as it creates its local 'x' Variable along with it's (initial) value of 8\r\n    // 'blah_3_function' has ended, so its local 'x' Variable is destroyed, and thus now there's no existing 'x' Variable\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"blah_function\">\r\n  x = 5\r\n  msg (x)\r\n  // outputs: 5\r\n  // NO error here\r\n</function>\r\n\r\n<function name=\"blah_2_function\">\r\n  msg (x)\r\n  // ERROR: there is no 'x' Variable created/existing\r\n</function>\r\n\r\n<function name=\"blah_3_function\">\r\n  x = 8\r\n  msg (x)\r\n  // outputs: 8\r\n  // no error here\r\n</function>\r\n```\r\n\r\n---------\r\n\r\nthis is why Attribute VARIABLES are used most of the time in quest, as these DO save/store/record (as long as the Attribute's Object exists or still exists), so you can use them anywhere and as much as you want:\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n\r\nthe Object is the Object containing/holding the Attribute (think of the Object as a basket, which can hold Attributes and/or other Objects, as its 'eggs' inside of it), this is done in the GUI/Editor via: 'whatever' Object -> 'Attributes' Tab -> Attributes -> Add -> (set up your attribute), or through the GUI/Editor's scripting options: 'set a variable or attribute' Script.\r\n\r\nexamples:\r\n\r\ngame.state = 0\r\nplayer.sex = \"male\"\r\norc.right_hand = club\r\nbird.flying = true\r\n\r\n```\r\n<game name=\"blah_game\">\r\n  <attr name=\"state\" type=\"int\">123</attr>\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (game.state) // outputs: 123\r\n    blah_function // outputs: 123\r\n    msg (game.state) // outputs: 123\r\n    // NO errors at all\r\n  </attr>\r\n</game>\r\n\r\n<function name=\"blah_function\">\r\n  msg (game.state)\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>think of scripting as a phone call, you can communicate via your voice, but once the phone call is over, what was communicated is lost/erased/gone-forever/destroyed (ignore real life tele-companies recording/saving your conversations without your permission for cops to use against you, lol). You can't use that communication elsewhere as it no longer exists.</p>\n<p>This type of non-preserved/saved/stored/recorded communication is the use of:</p>\n<p>Variable VARIABLES (NAME_OF_VARIABLE = VALUE_OR_EXPRESSION), examples:</p>\n<p>x = 5<br>\nhandled = false<br>\nright_hand = sword // 'sword' must be an actual existing or still existing Object, of course<br>\nmy_string = \"hi, my name is HK, what is your name?\"</p>\n<pre><code>&lt;game name=\"blah_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    blah_function // NO error occurs, as it creates its local 'x' Variable along with it's (initial) value of 5\n    // 'blah_function' has ended, so its local 'x' Variable is destroyed, and thus now there's no existing 'x' Variable\n    blah_2_function // this function fails as it uses an 'x' Variable, but none exists for it to use\n    // let's just pretend that the error in 'blah_2_function' doesn't prevent from doing 'blah_3_function', so we can continue...\n    blah_3_function // NO error occurs, as it creates its local 'x' Variable along with it's (initial) value of 8\n    // 'blah_3_function' has ended, so its local 'x' Variable is destroyed, and thus now there's no existing 'x' Variable\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"blah_function\"&gt;\n  x = 5\n  msg (x)\n  // outputs: 5\n  // NO error here\n&lt;/function&gt;\n\n&lt;function name=\"blah_2_function\"&gt;\n  msg (x)\n  // ERROR: there is no 'x' Variable created/existing\n&lt;/function&gt;\n\n&lt;function name=\"blah_3_function\"&gt;\n  x = 8\n  msg (x)\n  // outputs: 8\n  // no error here\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>this is why Attribute VARIABLES are used most of the time in quest, as these DO save/store/record (as long as the Attribute's Object exists or still exists), so you can use them anywhere and as much as you want:</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION</p>\n<p>the Object is the Object containing/holding the Attribute (think of the Object as a basket, which can hold Attributes and/or other Objects, as its 'eggs' inside of it), this is done in the GUI/Editor via: 'whatever' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; (set up your attribute), or through the GUI/Editor's scripting options: 'set a variable or attribute' Script.</p>\n<p>examples:</p>\n<p>game.state = 0<br>\nplayer.sex = \"male\"<br>\norc.right_hand = club<br>\nbird.flying = true</p>\n<pre><code>&lt;game name=\"blah_game\"&gt;\n  &lt;attr name=\"state\" type=\"int\"&gt;123&lt;/attr&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (game.state) // outputs: 123\n    blah_function // outputs: 123\n    msg (game.state) // outputs: 123\n    // NO errors at all\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;function name=\"blah_function\"&gt;\n  msg (game.state)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2016-11-26T15:15:35.6741455Z",
      "LastEditDate": "2016-11-26T15:25:54.6389946Z"
    },
    {
      "PostId": "06d612ff-18ba-4adc-bda4-aec7e6d47053",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "correct indenting/nesting/containment/parent-child-heirarchy (or in the GUI/Editor, clicking on the 7^&% correct 'add new script' circle button, ARGH! - doing scripts in the gUI/Editor is so so so frustrating --- especially when you accidentally delete a massive scriping block... GROWLES) is vital, as it is the 'order of operations / placement-containment' of scripting.\r\n\r\nScripting is/works-as practically/almost/nearly the exact same as an outline:\r\n\r\n```\r\nI. get input\r\n  A. if (result = 1)\r\n    1.  if (game.state = 0)\r\n       a. player.strength = result\r\n     2. else if (game.state = 10)\r\n      b. player.strength = result * 100\r\n  B. if (result = 2)\r\nII. if (player.strength = 100\r\n A. if (result = 1)\r\n   1. msg (\"strong\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>correct indenting/nesting/containment/parent-child-heirarchy (or in the GUI/Editor, clicking on the 7^&amp;% correct 'add new script' circle button, ARGH! - doing scripts in the gUI/Editor is so so so frustrating --- especially when you accidentally delete a massive scriping block... GROWLES) is vital, as it is the 'order of operations / placement-containment' of scripting.</p>\n<p>Scripting is/works-as practically/almost/nearly the exact same as an outline:</p>\n<pre><code>I. get input\n  A. if (result = 1)\n    1.  if (game.state = 0)\n       a. player.strength = result\n     2. else if (game.state = 10)\n      b. player.strength = result * 100\n  B. if (result = 2)\nII. if (player.strength = 100\n A. if (result = 1)\n   1. msg (\"strong\")\n</code></pre>\n\n",
      "PostDate": "2016-11-26T15:30:12.619246Z",
      "LastEditDate": "2016-11-26T15:40:21.6821484Z"
    },
    {
      "PostId": "2abc3873-cddb-46a7-b12f-1904eb451f74",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "lol Nice, HK! I still not knowing why the Function was not working. However i found a way to make the game work and that i can understand what is happening, even if needs repeating the code every time i need it, what is not elegant.",
      "EditableFormat": "markdown",
      "HTML": "<p>lol Nice, HK! I still not knowing why the Function was not working. However i found a way to make the game work and that i can understand what is happening, even if needs repeating the code every time i need it, what is not elegant.</p>\n\n",
      "PostDate": "2016-11-26T19:16:11.3253052Z",
      "LastEditDate": null
    }
  ]
}
