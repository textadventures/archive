{
  "Topic": {
    "TopicId": "5398",
    "ForumId": "10",
    "Title": "Different descriptions when entering a room from different directions",
    "LastUpdated": "2015-08-06T04:47:22+01:00",
    "ReplyCount": 8
  },
  "Posts": [
    {
      "PostId": "37445",
      "UserId": 0,
      "Username": "Forgewright",
      "UserAvatar": "6526_1436782372.jpg",
      "UserGravatar": "7cd39eda147e41376a7192dbd0bb386e",
      "EditableText": "If I want different view points(room descriptions)coming from different exits into the same room how can I determine or identify which exit was just used to enter the room? The before and after entering room scripts don't do this. I need a code line to identify the last exit used.....Right.\nAny examples would be mucho appreciated.",
      "EditableFormat": "bbcode",
      "HTML": "If I want different view points(room descriptions)coming from different exits into the same room how can I determine or identify which exit was just used to enter the room? The before and after entering room scripts don't do this. I need a code line to identify the last exit used.....Right.<br/>Any examples would be mucho appreciated.",
      "PostDate": "2015-08-04T17:28:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37446",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I had a similar desire in my game (an old one that I never finished). The solution involved two parts:\n\n1) Override the core exit types and add a field to indicate the direction.\n2) Override the &quot;go&quot; command to store the last exit the player traversed into the pov object.\n\nWith those two pieces, you can then query &quot;game.pov.lastExit.direction&quot; to find out what the last direction was.\n\nHere is the code to add to your game:\n\n[code:2fyigvmv]  &lt;command name=&quot;go&quot; pattern=&quot;&#91;go&#93;&quot; unresolved=&quot;&#91;UnresolvedLocation&#93;&quot;&gt;\n    if (exit&#46;visible) {\n      if (exit&#46;locked) {\n        msg (exit&#46;lockmessage)\n      }\n      else if (exit&#46;runscript) {\n        if (HasScript(exit, &quot;script&quot;)) {\n          do (exit, &quot;script&quot;)\n        }\n      }\n      else if (exit&#46;lookonly) {\n         msg (&quot;&#91;UnresolvedLocation&#93;&quot;)\n      } \n      else {\n       game&#46;pov&#46;parent = exit&#46;to\n       game&#46;pov&#46;lastExit = exit\n      }   \n    } \n    else {   \n      msg (&quot;&#91;UnresolvedLocation&#93;&quot;)\n    }\n  &lt;/command&gt;\n  &lt;type name=&quot;northdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;north&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;n&lt;/alt&gt;\n    &lt;direction&gt;northdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;northwestdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;northwest&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;nw&lt;/alt&gt;\n    &lt;direction&gt;northwestdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;westdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;west&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;w&lt;/alt&gt;\n    &lt;direction&gt;westdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;southwestdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;southwest&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;sw&lt;/alt&gt;\n    &lt;direction&gt;southwestdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;southdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;south&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;s&lt;/alt&gt;\n    &lt;direction&gt;southdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;southeastdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;southeast&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;se&lt;/alt&gt;\n    &lt;direction&gt;southeastdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;eastdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;east&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;e&lt;/alt&gt;\n    &lt;direction&gt;eastdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;northeastdirection&quot;&gt;\n    &lt;inherit name=&quot;compassdirection&quot; /&gt;\n    &lt;alias&gt;northeast&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;ne&lt;/alt&gt;\n    &lt;direction&gt;northeastdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;updirection&quot;&gt;\n    &lt;inherit name=&quot;updowndirection&quot; /&gt;\n    &lt;alias&gt;up&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;u&lt;/alt&gt;\n    &lt;direction&gt;updir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;downdirection&quot;&gt;\n    &lt;inherit name=&quot;updowndirection&quot; /&gt;\n    &lt;alias&gt;down&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;d&lt;/alt&gt;\n    &lt;direction&gt;downdir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;indirection&quot;&gt;\n    &lt;inherit name=&quot;inoutdirection&quot; /&gt;\n    &lt;alias&gt;in&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;&lt;/alt&gt;\n    &lt;direction&gt;indir&lt;/direction&gt;\n  &lt;/type&gt;\n  &lt;type name=&quot;outdirection&quot;&gt;\n    &lt;inherit name=&quot;inoutdirection&quot; /&gt;\n    &lt;alias&gt;out&lt;/alias&gt;\n    &lt;alt type=&quot;simplestringlist&quot;&gt;o&lt;/alt&gt;\n    &lt;direction&gt;outdir&lt;/direction&gt;\n  &lt;/type&gt;\n  \n  [/code:2fyigvmv]\nThe direction fields have names like &quot;northdir&quot;, &quot;southdir&quot;, etc. I decided to go that route rather than using (say) the &quot;alias&quot; field, as those other fields were user-facing and would be changed if the game were ever translated to a non-English language. \n\nLet me know if you need anything clarified. I believe if you just drop that in your game somewhere (e.g. before the closing &lt;/aslx&gt; element), then it should just work.\n\nAs always, be sure to backup your game before doing any major mods like this...",
      "EditableFormat": "bbcode",
      "HTML": "I had a similar desire in my game (an old one that I never finished). The solution involved two parts:<br/><br/>1) Override the core exit types and add a field to indicate the direction.<br/>2) Override the &quot;go&quot; command to store the last exit the player traversed into the pov object.<br/><br/>With those two pieces, you can then query &quot;game.pov.lastExit.direction&quot; to find out what the last direction was.<br/><br/>Here is the code to add to your game:<br/><br/><pre><code>  &lt;command name=&quot;go&quot; pattern=&quot;&#91;go&#93;&quot; unresolved=&quot;&#91;UnresolvedLocation&#93;&quot;&gt;<br/>    if (exit&#46;visible) {<br/>      if (exit&#46;locked) {<br/>        msg (exit&#46;lockmessage)<br/>      }<br/>      else if (exit&#46;runscript) {<br/>        if (HasScript(exit, &quot;script&quot;)) {<br/>          do (exit, &quot;script&quot;)<br/>        }<br/>      }<br/>      else if (exit&#46;lookonly) {<br/>         msg (&quot;&#91;UnresolvedLocation&#93;&quot;)<br/>      } <br/>      else {<br/>       game&#46;pov&#46;parent = exit&#46;to<br/>       game&#46;pov&#46;lastExit = exit<br/>      }   <br/>    } <br/>    else {   <br/>      msg (&quot;&#91;UnresolvedLocation&#93;&quot;)<br/>    }<br/>  &lt;/command&gt;<br/>  &lt;type name=&quot;northdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;north&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;n&lt;/alt&gt;<br/>    &lt;direction&gt;northdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;northwestdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;northwest&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;nw&lt;/alt&gt;<br/>    &lt;direction&gt;northwestdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;westdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;west&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;w&lt;/alt&gt;<br/>    &lt;direction&gt;westdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;southwestdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;southwest&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;sw&lt;/alt&gt;<br/>    &lt;direction&gt;southwestdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;southdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;south&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;s&lt;/alt&gt;<br/>    &lt;direction&gt;southdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;southeastdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;southeast&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;se&lt;/alt&gt;<br/>    &lt;direction&gt;southeastdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;eastdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;east&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;e&lt;/alt&gt;<br/>    &lt;direction&gt;eastdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;northeastdirection&quot;&gt;<br/>    &lt;inherit name=&quot;compassdirection&quot; /&gt;<br/>    &lt;alias&gt;northeast&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;ne&lt;/alt&gt;<br/>    &lt;direction&gt;northeastdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;updirection&quot;&gt;<br/>    &lt;inherit name=&quot;updowndirection&quot; /&gt;<br/>    &lt;alias&gt;up&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;u&lt;/alt&gt;<br/>    &lt;direction&gt;updir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;downdirection&quot;&gt;<br/>    &lt;inherit name=&quot;updowndirection&quot; /&gt;<br/>    &lt;alias&gt;down&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;d&lt;/alt&gt;<br/>    &lt;direction&gt;downdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;indirection&quot;&gt;<br/>    &lt;inherit name=&quot;inoutdirection&quot; /&gt;<br/>    &lt;alias&gt;in&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;&lt;/alt&gt;<br/>    &lt;direction&gt;indir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  &lt;type name=&quot;outdirection&quot;&gt;<br/>    &lt;inherit name=&quot;inoutdirection&quot; /&gt;<br/>    &lt;alias&gt;out&lt;/alias&gt;<br/>    &lt;alt type=&quot;simplestringlist&quot;&gt;o&lt;/alt&gt;<br/>    &lt;direction&gt;outdir&lt;/direction&gt;<br/>  &lt;/type&gt;<br/>  <br/>  </code></pre><br/>The direction fields have names like &quot;northdir&quot;, &quot;southdir&quot;, etc. I decided to go that route rather than using (say) the &quot;alias&quot; field, as those other fields were user-facing and would be changed if the game were ever translated to a non-English language. <br/><br/>Let me know if you need anything clarified. I believe if you just drop that in your game somewhere (e.g. before the closing &lt;/aslx&gt; element), then it should just work.<br/><br/>As always, be sure to backup your game before doing any major mods like this...",
      "PostDate": "2015-08-04T20:47:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37451",
      "UserId": 0,
      "Username": "HaganeSteel",
      "UserAvatar": null,
      "UserGravatar": "df37a725b4b0ec648419f1076777c4b8",
      "EditableText": "You can do this by switches too.\n\nGive your room two switches: Under the &quot;Attributes&quot; tab for your room, next to where it says &quot;Attributes,&quot; click &quot;Add.&quot; Create two variables and set them to &quot;Boolean.&quot; They should both be &quot;False.&quot;\n\nThen click the &quot;Room&quot; tab. Next to where it says &quot;Description,&quot; set it to &quot;Run Script&quot; instead of &quot;Text.&quot;\n\nClick &quot;Add New Script,&quot; and scroll down to where it says &quot;If...&quot;\n\nNext to where it says &quot;Expression,&quot; type: [b:28ftta7i]roomname.north = true[/b:28ftta7i]. &quot;roomname&quot; is the name of your room, and &quot;north&quot; is the name of one of the boolean attributes you created. Under &quot;Then,&quot; select &quot;Add New Script&quot; and then &quot;Print.&quot; Now print your room description.\n\nThen go down to &quot;Else If&quot; and do the same thing: [b:28ftta7i]roomname.south = true[/b:28ftta7i]. Under &quot;Then&quot; print your second message.\n\nDoorways are objects. Go to your doorway objects (located in the other rooms), and select: &quot;Run script (instead of moving the player automatically).&quot;\n\nSelect &quot;Add New Script,&quot; and do three things: First, &quot;move object.&quot; Move &quot;player&quot; to &quot;roomname.&quot; Then &quot;Add New Script&quot; and &quot;Set variable or attribute.&quot; Type: roomname.north in the first box, and &quot;true&quot; in the second. Then &quot;Add New Script&quot; and &quot;Set variable or attribute&quot; again. Type: roomname.south in the first box, and &quot;false&quot; in the second.\n\nFor the second door object, do the same thing, but reverse the &quot;true&quot; and &quot;false.&quot;\n\nI want to give you screenshots for this, but I actually don't have time right now. I'm sorry. I hope this was clear enough.",
      "EditableFormat": "bbcode",
      "HTML": "You can do this by switches too.<br/><br/>Give your room two switches: Under the &quot;Attributes&quot; tab for your room, next to where it says &quot;Attributes,&quot; click &quot;Add.&quot; Create two variables and set them to &quot;Boolean.&quot; They should both be &quot;False.&quot;<br/><br/>Then click the &quot;Room&quot; tab. Next to where it says &quot;Description,&quot; set it to &quot;Run Script&quot; instead of &quot;Text.&quot;<br/><br/>Click &quot;Add New Script,&quot; and scroll down to where it says &quot;If...&quot;<br/><br/>Next to where it says &quot;Expression,&quot; type: <span style=\"font-weight:bold;\">roomname.north = true</span>. &quot;roomname&quot; is the name of your room, and &quot;north&quot; is the name of one of the boolean attributes you created. Under &quot;Then,&quot; select &quot;Add New Script&quot; and then &quot;Print.&quot; Now print your room description.<br/><br/>Then go down to &quot;Else If&quot; and do the same thing: <span style=\"font-weight:bold;\">roomname.south = true</span>. Under &quot;Then&quot; print your second message.<br/><br/>Doorways are objects. Go to your doorway objects (located in the other rooms), and select: &quot;Run script (instead of moving the player automatically).&quot;<br/><br/>Select &quot;Add New Script,&quot; and do three things: First, &quot;move object.&quot; Move &quot;player&quot; to &quot;roomname.&quot; Then &quot;Add New Script&quot; and &quot;Set variable or attribute.&quot; Type: roomname.north in the first box, and &quot;true&quot; in the second. Then &quot;Add New Script&quot; and &quot;Set variable or attribute&quot; again. Type: roomname.south in the first box, and &quot;false&quot; in the second.<br/><br/>For the second door object, do the same thing, but reverse the &quot;true&quot; and &quot;false.&quot;<br/><br/>I want to give you screenshots for this, but I actually don't have time right now. I'm sorry. I hope this was clear enough.",
      "PostDate": "2015-08-04T22:14:15+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37452",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "That approach makes sense if you just have a few exits to do. I would hate to have to do that for every exit in a large layout (which is what I had). But it certainly can be a straightforward way to do it if you only have a few that you want to track.",
      "EditableFormat": "bbcode",
      "HTML": "That approach makes sense if you just have a few exits to do. I would hate to have to do that for every exit in a large layout (which is what I had). But it certainly can be a straightforward way to do it if you only have a few that you want to track.",
      "PostDate": "2015-08-04T22:31:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37453",
      "UserId": 0,
      "Username": "HaganeSteel",
      "UserAvatar": null,
      "UserGravatar": "df37a725b4b0ec648419f1076777c4b8",
      "EditableText": "Absolutely. I wanted to offer a less programming-intensive solution. I'm only a pretend-programmer, so I have to find the easiest workarounds for problems like these. <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "EditableFormat": "bbcode",
      "HTML": "Absolutely. I wanted to offer a less programming-intensive solution. I'm only a pretend-programmer, so I have to find the easiest workarounds for problems like these. <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "PostDate": "2015-08-05T01:11:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37455",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I hope I didn't sound too dismissive. It's actually a good, creative way to tackle the problem. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I hope I didn't sound too dismissive. It's actually a good, creative way to tackle the problem. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2015-08-05T07:45:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37460",
      "UserId": 0,
      "Username": "HaganeSteel",
      "UserAvatar": null,
      "UserGravatar": "df37a725b4b0ec648419f1076777c4b8",
      "EditableText": "Oh, no, you're fine!\n\nIf you think that's tedious, you should see the dizzying amount of code it takes to get a single zombie working in my game.  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> \n\nI have reinvented the wheel fifteen times now.  <!-- s8) --><img src=\"{SMILIES_PATH}/icon_cool.gif\" alt=\"8)\" title=\"Cool\" /><!-- s8) -->\n\nSorry for derailing the thread! I'll shut up now!",
      "EditableFormat": "bbcode",
      "HTML": "Oh, no, you're fine!<br/><br/>If you think that's tedious, you should see the dizzying amount of code it takes to get a single zombie working in my game.  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> <br/><br/>I have reinvented the wheel fifteen times now.  <!-- s8) --><img src=\"{SMILIES_PATH}/icon_cool.gif\" alt=\"8)\" title=\"Cool\" /><!-- s8) --><br/><br/>Sorry for derailing the thread! I'll shut up now!",
      "PostDate": "2015-08-05T17:29:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37462",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "don't worry, we code-noobs all got the same problem... Jay's a good coder, he understands how things should be coded to work as a great system (higher level or scale of code ~ game-code designing), which also means avoiding all the pitfalls~bugs that occur for us code-noobs due to our noob-coding, with the least amount of code as possible, and such etc advanced coding organizational~structural~design stuff, whereas, we get excited just with getting a functional code directly for the thing we want done or have to do in our game, laughs. As we learn more coding, we slowly get a little better, but Jay, Pixie, Pertex, and etc other people, have a ton of code knowledge (&quot;lightyears&quot; of code beyond us), which we're not even remotely close to having yet.\n\nI was so estatic at finally getting my basic combat code to work (using Pertex' Combat Code as my structure), but then Pertex took only like 5 minutes to both: (1) undersand my code (it took me like 2 days to understand neonayon's game code... AFTER I re-organized it for myself, lol), and (2) then vastly improved upon it (Pertex like cut my code in half ~ I had really bad and unnessary parts of code in my code)... My jaw dropped to the floor and my head hit the table... I wasn't as jubilant afterwards, laughs. I'm still constantly amazed at the good coders here, I'm trying to eventually reach their level... maybe before I die, maybe... laughs.\n\n-------\n\nfor us code-noobs, 're-inventing the wheel', is good, as it is us trying to understand coding, whereas the good coders, are like 'why waste your time, when its already done for you?', but for us, it is us learning code, we are exploring code, discovering and understanding more about it by 'trying to reinvent the 'wheel'. Ya, we can just use others code, but in doing so, we as code-noobs, never understand that code, and thus can't implement it and~or nor apply it, for anything else.\n\nit's like with math (not the best example, but meh):\n\nya, you can remember '5x5=25', but if you don't understand what multiplication is '5 groups each containing 5 items', then you're not going to be able to do '2x8=16', unless you got that memorized too.",
      "EditableFormat": "bbcode",
      "HTML": "don't worry, we code-noobs all got the same problem... Jay's a good coder, he understands how things should be coded to work as a great system (higher level or scale of code ~ game-code designing), which also means avoiding all the pitfalls~bugs that occur for us code-noobs due to our noob-coding, with the least amount of code as possible, and such etc advanced coding organizational~structural~design stuff, whereas, we get excited just with getting a functional code directly for the thing we want done or have to do in our game, laughs. As we learn more coding, we slowly get a little better, but Jay, Pixie, Pertex, and etc other people, have a ton of code knowledge (&quot;lightyears&quot; of code beyond us), which we're not even remotely close to having yet.<br/><br/>I was so estatic at finally getting my basic combat code to work (using Pertex' Combat Code as my structure), but then Pertex took only like 5 minutes to both: (1) undersand my code (it took me like 2 days to understand neonayon's game code... AFTER I re-organized it for myself, lol), and (2) then vastly improved upon it (Pertex like cut my code in half ~ I had really bad and unnessary parts of code in my code)... My jaw dropped to the floor and my head hit the table... I wasn't as jubilant afterwards, laughs. I'm still constantly amazed at the good coders here, I'm trying to eventually reach their level... maybe before I die, maybe... laughs.<br/><br/>-------<br/><br/>for us code-noobs, 're-inventing the wheel', is good, as it is us trying to understand coding, whereas the good coders, are like 'why waste your time, when its already done for you?', but for us, it is us learning code, we are exploring code, discovering and understanding more about it by 'trying to reinvent the 'wheel'. Ya, we can just use others code, but in doing so, we as code-noobs, never understand that code, and thus can't implement it and~or nor apply it, for anything else.<br/><br/>it's like with math (not the best example, but meh):<br/><br/>ya, you can remember '5x5=25', but if you don't understand what multiplication is '5 groups each containing 5 items', then you're not going to be able to do '2x8=16', unless you got that memorized too.",
      "PostDate": "2015-08-05T19:27:59+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37467",
      "UserId": 0,
      "Username": "Forgewright",
      "UserAvatar": "6526_1436782372.jpg",
      "UserGravatar": "7cd39eda147e41376a7192dbd0bb386e",
      "EditableText": "Well said HegemonKhan",
      "EditableFormat": "bbcode",
      "HTML": "Well said HegemonKhan",
      "PostDate": "2015-08-06T04:47:22+01:00",
      "LastEditDate": null
    }
  ]
}
