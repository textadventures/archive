{
  "Topic": {
    "TopicId": "5390",
    "ForumId": "10",
    "Title": "Creating list of children objects",
    "LastUpdated": "2015-07-29T08:17:00+01:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "37404",
      "UserId": 0,
      "Username": "Ion_444",
      "UserAvatar": null,
      "UserGravatar": "0c8c0711734fd5274a75df353452d96b",
      "EditableText": "So I have clothing in my game, and I want there to be a description of the clothes a character's wearing whenever you look at them.\n\nNormally, I'd do something like this (pseudo code follows):\n--\nFor each child object in target character,\n\ncheck if child object is a piece of clothing\nif child object is clothing, check if it is worn\nif child object is worn, print alias of said object.\n--\nExcept I'm having difficulties iterating through a character object, since that object is not a list. How would I retrieve a list of an object's children objects so I can iterate through each one individually? \n\nOr is there a more elegant solution to my problem that I'm not seeing?",
      "EditableFormat": "bbcode",
      "HTML": "So I have clothing in my game, and I want there to be a description of the clothes a character's wearing whenever you look at them.<br/><br/>Normally, I'd do something like this (pseudo code follows):<br/>--<br/>For each child object in target character,<br/><br/>check if child object is a piece of clothing<br/>if child object is clothing, check if it is worn<br/>if child object is worn, print alias of said object.<br/>--<br/>Except I'm having difficulties iterating through a character object, since that object is not a list. How would I retrieve a list of an object's children objects so I can iterate through each one individually? <br/><br/>Or is there a more elegant solution to my problem that I'm not seeing?",
      "PostDate": "2015-07-28T22:27:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37406",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "links:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/using_dictionaries.html\">http://docs.textadventures.co.uk/quest/ ... aries.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m -->\n\n// specifically for your Player Objects only, as an alternative to using the 'getdirectchildren' and 'getallchildobjects' :\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopereachableinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m --> (categorical order)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m --> (alphabetical order)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m -->\n\n// the lazy way (lol):\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n\n---------\n\nbasically, the quest engine has already built-in ways to populate+get various Objectlist Attributes, and also Objects~Attributes within Objects (or other Elements within Elements), and once with an Objectlist Attribute, populated with the desired Objects, then you can use the built-in Functions~Scripts to iterate through the lists (and~or dictionaries) and do whatever you want with them.\n\nalso, quest's 'class~group' is known as an 'Object Type (Types)' and their use via Inherit Attributes, see here:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --> (this mostly covers tabs and making types specifically for Pixie's 'Magic System + Simple Combat System' Library, so it's a bit, tangent~off topic or is too advanced+specific, as a link for about Object Types)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/tutorial/using_inherited_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m -->\n\n-------\n\nan example:\n\nyou got your 'clothing' Objects on~inside~added_to your 'player' Player Object\n\n[code:oocxf9l6]&lt;object name=&quot;player&quot;&gt;\n  &lt;inherit name=&quot;editor_object&quot; /&gt;\n  &lt;inherit name=&quot;editor_player&quot; /&gt;\n  &lt;attr name=&quot;chest&quot; type=&quot;object&quot;&gt;none_clothing&lt;/attr&gt;\n  &lt;attr name=&quot;waist&quot; type=&quot;object&quot;&gt;none_clothing&lt;/attr&gt;\n  &lt;attr name=&quot;left_hand&quot; type=&quot;object&quot;&gt;none_armor&lt;/attr&gt;\n  &lt;attr name=&quot;right_hand&quot; type=&quot;object&quot;&gt;none_weapon&lt;/attr&gt;\n  &lt;object name=&quot;none_clothing&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;none_weapon&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;weapon&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;none_armor&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;armor&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;pants&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;shirt&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;sword&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;weapon&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;shield&quot;&gt;\n    &lt;inherit name=&quot;editor_object&quot; /&gt;\n    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;armor&lt;/attr&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;function name=&quot;equip_clothing&quot;&gt;\n  foreach (object_variable, GetDirectChildren(player)) {\n    if (HasString (object_variable, &quot;type_of_object&quot;) and object_variable&#46;type_of_object = &quot;clothing&quot;) {\n      // etc equip scripting, I left out some needed Attributes, such as whether it is 'worn' and also Attributes to determine what body location for what Object Attribute to equip (assign) the Object to, lol, meh&#46; This is just a brief simple example, not a full sample~functional equipment system, example, lol&#46;\n    }\n  }\n&lt;/function&gt;[/code:oocxf9l6]\n\nor, since this example is using a Player Object, you can also do this too:\n\nforeach (object_variable, ScopeInventory()) { scripts }",
      "EditableFormat": "bbcode",
      "HTML": "links:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/using_dictionaries.html\">http://docs.textadventures.co.uk/quest/ ... aries.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/\">http://docs.textadventures.co.uk/quest/scripts/</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m --><br/><br/>// specifically for your Player Objects only, as an alternative to using the 'getdirectchildren' and 'getallchildobjects' :<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopereachableinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/\">http://docs.textadventures.co.uk/quest/functions/</a><!-- m --> (categorical order)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/index_allfunctions.html\">http://docs.textadventures.co.uk/quest/ ... tions.html</a><!-- m --> (alphabetical order)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m --><br/><br/>// the lazy way (lol):<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><br/>---------<br/><br/>basically, the quest engine has already built-in ways to populate+get various Objectlist Attributes, and also Objects~Attributes within Objects (or other Elements within Elements), and once with an Objectlist Attribute, populated with the desired Objects, then you can use the built-in Functions~Scripts to iterate through the lists (and~or dictionaries) and do whatever you want with them.<br/><br/>also, quest's 'class~group' is known as an 'Object Type (Types)' and their use via Inherit Attributes, see here:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_types_and_tabs__advanced_.html\">http://docs.textadventures.co.uk/quest/ ... nced_.html</a><!-- m --> (this mostly covers tabs and making types specifically for Pixie's 'Magic System + Simple Combat System' Library, so it's a bit, tangent~off topic or is too advanced+specific, as a link for about Object Types)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/tutorial/using_inherited_types.html\">http://docs.textadventures.co.uk/quest/ ... types.html</a><!-- m --><br/><br/>-------<br/><br/>an example:<br/><br/>you got your 'clothing' Objects on~inside~added_to your 'player' Player Object<br/><br/><pre><code>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>  &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>  &lt;attr name=&quot;chest&quot; type=&quot;object&quot;&gt;none_clothing&lt;/attr&gt;<br/>  &lt;attr name=&quot;waist&quot; type=&quot;object&quot;&gt;none_clothing&lt;/attr&gt;<br/>  &lt;attr name=&quot;left_hand&quot; type=&quot;object&quot;&gt;none_armor&lt;/attr&gt;<br/>  &lt;attr name=&quot;right_hand&quot; type=&quot;object&quot;&gt;none_weapon&lt;/attr&gt;<br/>  &lt;object name=&quot;none_clothing&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;none_weapon&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;weapon&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;none_armor&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;armor&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;pants&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;shirt&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;clothing&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;sword&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;weapon&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;shield&quot;&gt;<br/>    &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>    &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;armor&lt;/attr&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;<br/><br/>&lt;function name=&quot;equip_clothing&quot;&gt;<br/>  foreach (object_variable, GetDirectChildren(player)) {<br/>    if (HasString (object_variable, &quot;type_of_object&quot;) and object_variable&#46;type_of_object = &quot;clothing&quot;) {<br/>      // etc equip scripting, I left out some needed Attributes, such as whether it is 'worn' and also Attributes to determine what body location for what Object Attribute to equip (assign) the Object to, lol, meh&#46; This is just a brief simple example, not a full sample~functional equipment system, example, lol&#46;<br/>    }<br/>  }<br/>&lt;/function&gt;</code></pre><br/><br/>or, since this example is using a Player Object, you can also do this too:<br/><br/>foreach (object_variable, ScopeInventory()) { scripts }",
      "PostDate": "2015-07-28T23:41:50+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37409",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "The important part of HK's post is code that looks like this:\n[code:rpn0mowi]// create a list, then add to it the alias of each worn item\nlst = NewStringList()\nforeach (o, GetDirectChildren(character)) {\n  if (GetBoolean (o, &quot;worn&quot;)) {\n    list add (lst, o&#46;alias)\n  }\n}\n// output\nif (listCount(lst) = 0) {\n  msg (character&#46;alias + &quot; is naked&#46;&quot;)\n}\nelse {\n  msg (character&#46;alias + &quot; is wearing &quot; + Join(lst, &quot;, &quot;) + &quot;&#46;&quot;)\n}[/code:rpn0mowi]\nIt assumes everything has an alias, which you imply in your OP, and is what I do, but may not be the case. It also assumes when an item is worn, an attribute (flag) called worn is set to true.",
      "EditableFormat": "bbcode",
      "HTML": "The important part of HK's post is code that looks like this:<br/><pre><code>// create a list, then add to it the alias of each worn item<br/>lst = NewStringList()<br/>foreach (o, GetDirectChildren(character)) {<br/>  if (GetBoolean (o, &quot;worn&quot;)) {<br/>    list add (lst, o&#46;alias)<br/>  }<br/>}<br/>// output<br/>if (listCount(lst) = 0) {<br/>  msg (character&#46;alias + &quot; is naked&#46;&quot;)<br/>}<br/>else {<br/>  msg (character&#46;alias + &quot; is wearing &quot; + Join(lst, &quot;, &quot;) + &quot;&#46;&quot;)<br/>}</code></pre><br/>It assumes everything has an alias, which you imply in your OP, and is what I do, but may not be the case. It also assumes when an item is worn, an attribute (flag) called worn is set to true.",
      "PostDate": "2015-07-29T08:17:00+01:00",
      "LastEditDate": null
    }
  ]
}
