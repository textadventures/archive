{
  "Topic": {
    "TopicId": "3535",
    "ForumId": "10",
    "Title": "POV Statuses In Libraries",
    "LastUpdated": "2013-03-14T20:57:00+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "23367",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "Hey there, I've noticed something that kind of... Bothers me.\nWhy can't we add POV status attributes directly into the game with libraries without making functions?\nI know that we could just do something like this:\n[code:ibnbavg4]&lt;function name=&quot;InitStatus&quot;&gt;&lt;!&#91;CDATA&#91;\n  if (game&#46;status) {\n    if (game&#46;povstatusattributes = null)\n      game&#46;povstatusattributes = NewStringDictionary()\n    }\n    dictionary add (game&#46;povstatusattributes, &quot;status&quot;, &quot;Status&#58; !&quot;)\n  }\n&#93;&#93;&gt;&lt;/function&gt;[/code:ibnbavg4]\nBut then you have to call the InitStatus function each time you want to show the status...\nNot to mention you would also have to have another function like this\n[code:ibnbavg4]&lt;function name=&quot;InitPOVStatus&quot; parameters=&quot;new, old&quot;&gt;&lt;!&#91;CDATA&#91;\n  if (game&#46;showstatus) {\n    new&#46;status = 10\n    new&#46;changedstatus =&gt; {\n      if (this&#46;status &lt;= 0) {\n        this&#46;status = 0\n      }\n    }\n  }\n&#93;&#93;&gt;&lt;/function&gt;[/code:ibnbavg4]\nthat you have to put into a Turn Script, as well as a script every time you start a game or switch players, which gets annoying fast.\n\nBasically, what I'm suggesting (if you can't already do it) is to be able to edit the game's InitPOV functions and InitStatusAttributes functions from inside of a library. The easiest way I can think of doing this would probably be to use something like 'foreach' in the function, and then make a script dictionary for each of them to run scripts from, instead of hard-coding the scripts into the Core files. Then, from inside the library, all you would have to do is something like...\n[code:ibnbavg4]&lt;type name=&quot;gamestatus&quot;&gt;\n  &lt;status /&gt;\n  &lt;start_status type=&quot;script&quot;&gt;\n    script =&gt; {\n      if (game&#46;status) {\n        if (game&#46;povstatusattributes = null)\n          game&#46;povstatusattributes = NewStringDictionary()\n         }\n        dictionary add (game&#46;povstatusattributes, &quot;status&quot;, &quot;Status&#58; !&quot;)\n      }\n    }\n    dictionary add (InitStatusAttributesDict(), &quot;status&quot;, script)\n    script = null\n    script =&gt; {\n      if (game&#46;showstatus) {\n        new&#46;status = 10\n        new&#46;changedstatus =&gt; {\n          if (this&#46;status &lt;= 0) {\n            this&#46;status = 0\n          }\n        }\n      }\n    }\n    dictionary add (InitPOVDict(), &quot;status&quot;, script)\n    game&#46;original_start = game&#46;start\n  &lt;/start_status&gt;\n\n  &lt;!--ALSO&#58; Make scripts combine-able (if they're not already?)--&gt;\n  \n  &lt;start type=&quot;script&quot;&gt;\n    CombineScripts (game&#46;original_start, game&#46;start_status)\n  &lt;/start&gt;\n&lt;/type&gt;\n\n&lt;!--This reminds me -- also make the 'defaultgame' type inherit something like 'editor_game'--&gt;\n\n&lt;type name=&quot;editor_game&quot;&gt;\n  &lt;status type=&quot;boolean&quot;&gt;false&lt;/status&gt;\n&lt;/type&gt;\n\n&lt;tab&gt;\n  &lt;parent&gt;_GameEditor&lt;/parent&gt;\n  &lt;caption&gt;Library&lt;/caption&gt;\n  \n  &lt;control&gt;\n    &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;\n    &lt;caption&gt;Status&lt;/caption&gt;\n    &lt;types&gt;*=Don't show status; gamestatus=Show status&lt;/types&gt;\n  &lt;/control&gt;\n\n&lt;/tab&gt;[/code:ibnbavg4]\n\n...Of course, all of this is theoretical, BUT if it was possible, it would make life so much simpler for the person using the library, as well as the one coding it.\n\nI don't think I forgot anything... If I did, sorry, I kind of had to come up with that whole pseudo-library off the top of my head.\nAlso, if there's already a way to do something similar to this, let me know because I looked everywhere on the wiki (and this forum) and couldn't find anything...\n\nThat's all for now, thanks for reading.",
      "EditableFormat": "bbcode",
      "HTML": "Hey there, I've noticed something that kind of... Bothers me.<br/>Why can't we add POV status attributes directly into the game with libraries without making functions?<br/>I know that we could just do something like this:<br/><pre><code>&lt;function name=&quot;InitStatus&quot;&gt;&lt;!&#91;CDATA&#91;<br/>  if (game&#46;status) {<br/>    if (game&#46;povstatusattributes = null)<br/>      game&#46;povstatusattributes = NewStringDictionary()<br/>    }<br/>    dictionary add (game&#46;povstatusattributes, &quot;status&quot;, &quot;Status&#58; !&quot;)<br/>  }<br/>&#93;&#93;&gt;&lt;/function&gt;</code></pre><br/>But then you have to call the InitStatus function each time you want to show the status...<br/>Not to mention you would also have to have another function like this<br/><pre><code>&lt;function name=&quot;InitPOVStatus&quot; parameters=&quot;new, old&quot;&gt;&lt;!&#91;CDATA&#91;<br/>  if (game&#46;showstatus) {<br/>    new&#46;status = 10<br/>    new&#46;changedstatus =&gt; {<br/>      if (this&#46;status &lt;= 0) {<br/>        this&#46;status = 0<br/>      }<br/>    }<br/>  }<br/>&#93;&#93;&gt;&lt;/function&gt;</code></pre><br/>that you have to put into a Turn Script, as well as a script every time you start a game or switch players, which gets annoying fast.<br/><br/>Basically, what I'm suggesting (if you can't already do it) is to be able to edit the game's InitPOV functions and InitStatusAttributes functions from inside of a library. The easiest way I can think of doing this would probably be to use something like 'foreach' in the function, and then make a script dictionary for each of them to run scripts from, instead of hard-coding the scripts into the Core files. Then, from inside the library, all you would have to do is something like...<br/><pre><code>&lt;type name=&quot;gamestatus&quot;&gt;<br/>  &lt;status /&gt;<br/>  &lt;start_status type=&quot;script&quot;&gt;<br/>    script =&gt; {<br/>      if (game&#46;status) {<br/>        if (game&#46;povstatusattributes = null)<br/>          game&#46;povstatusattributes = NewStringDictionary()<br/>         }<br/>        dictionary add (game&#46;povstatusattributes, &quot;status&quot;, &quot;Status&#58; !&quot;)<br/>      }<br/>    }<br/>    dictionary add (InitStatusAttributesDict(), &quot;status&quot;, script)<br/>    script = null<br/>    script =&gt; {<br/>      if (game&#46;showstatus) {<br/>        new&#46;status = 10<br/>        new&#46;changedstatus =&gt; {<br/>          if (this&#46;status &lt;= 0) {<br/>            this&#46;status = 0<br/>          }<br/>        }<br/>      }<br/>    }<br/>    dictionary add (InitPOVDict(), &quot;status&quot;, script)<br/>    game&#46;original_start = game&#46;start<br/>  &lt;/start_status&gt;<br/><br/>  &lt;!--ALSO&#58; Make scripts combine-able (if they're not already?)--&gt;<br/>  <br/>  &lt;start type=&quot;script&quot;&gt;<br/>    CombineScripts (game&#46;original_start, game&#46;start_status)<br/>  &lt;/start&gt;<br/>&lt;/type&gt;<br/><br/>&lt;!--This reminds me -- also make the 'defaultgame' type inherit something like 'editor_game'--&gt;<br/><br/>&lt;type name=&quot;editor_game&quot;&gt;<br/>  &lt;status type=&quot;boolean&quot;&gt;false&lt;/status&gt;<br/>&lt;/type&gt;<br/><br/>&lt;tab&gt;<br/>  &lt;parent&gt;_GameEditor&lt;/parent&gt;<br/>  &lt;caption&gt;Library&lt;/caption&gt;<br/>  <br/>  &lt;control&gt;<br/>    &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;<br/>    &lt;caption&gt;Status&lt;/caption&gt;<br/>    &lt;types&gt;*=Don't show status; gamestatus=Show status&lt;/types&gt;<br/>  &lt;/control&gt;<br/><br/>&lt;/tab&gt;</code></pre><br/><br/>...Of course, all of this is theoretical, BUT if it was possible, it would make life so much simpler for the person using the library, as well as the one coding it.<br/><br/>I don't think I forgot anything... If I did, sorry, I kind of had to come up with that whole pseudo-library off the top of my head.<br/>Also, if there's already a way to do something similar to this, let me know because I looked everywhere on the wiki (and this forum) and couldn't find anything...<br/><br/>That's all for now, thanks for reading.",
      "PostDate": "2013-03-14T03:49:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23372",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Good point. I've not really put much thought into how to handle this. I suppose we need some mechanism for a library to register a script to run in response to some event - then when the event is triggered, all those registered scripts will run.\n\nI have added this to the Issue Tracker for v5.5: <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1256\">http://quest.codeplex.com/workitem/1256</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "Good point. I've not really put much thought into how to handle this. I suppose we need some mechanism for a library to register a script to run in response to some event - then when the event is triggered, all those registered scripts will run.<br/><br/>I have added this to the Issue Tracker for v5.5: <!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1256\">http://quest.codeplex.com/workitem/1256</a><!-- m -->",
      "PostDate": "2013-03-14T09:41:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23388",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "Sounds great. Do you have an ETA for when 5.5 might roll out?",
      "EditableFormat": "bbcode",
      "HTML": "Sounds great. Do you have an ETA for when 5.5 might roll out?",
      "PostDate": "2013-03-14T20:57:00+00:00",
      "LastEditDate": null
    }
  ]
}
