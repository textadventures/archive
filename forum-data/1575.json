{
  "Topic": {
    "TopicId": "1575",
    "ForumId": "10",
    "Title": "Open Challenge: Repair Object",
    "LastUpdated": "2007-01-24T15:47:23+00:00",
    "ReplyCount": 13
  },
  "Posts": [
    {
      "PostId": "12299",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[code:2um52a6s]!library\n!asl-version &lt;400&gt;\n\n'parameter1 = MasterObject name\n'parameter2 = Location to create it\ndefine procedure &lt;CloneObject&gt;\n\t\t\n\tset string &lt;pn1; $parameter&#40;1&#41;$&gt;\n\tset string &lt;pn2; &gt;\n\tset string &lt;pn3; $parameter&#40;2&#41;$&gt;\n\tset numeric &lt;pn1; 0&gt;\n\tset numeric &lt;pn2; 0&gt;\n\n\trepeat until &#40; %pn2% = 1 &#41; &#123;\n\n\t\tinc &lt;pn1&gt;\n\t\tset string &lt;pn2; #pn1#_%pn1%&gt;\t\t\t\n\t\tif not real &lt;#pn2#&gt; then &#123;\n\t\t\tinc &lt;pn2&gt;\n\t\t\tif type &lt;#pn1#; Item&gt; then clone &lt;#pn1#; #pn2#; #pn3#&gt; else clone &lt;#pn1#; #pn2#; #quest&#46;currentroom#&gt;\t\t\t\n\t\t&#125;\n\t\telse &#123;\n\t\t\tif &#40; $locationof&#40;#pn2#&#41;$ = scrapyard &#41; then &#123;\n\t\t\t\tinc &lt;pn2&gt;\n\t\t\t\tdo &lt;RepairObject&#40;#pn2#&#41;&gt;\n\t\t\t\tmsg &lt;    Object found in scrapyard &#40;#pn2#&#41;&#46;&gt;\n\t\t\t\tif type &lt;#pn2#; Item&gt; then move &lt;#pn2#; #pn3#&gt; else move &lt;#pn2#; #quest&#46;currentroom#&gt;\t\t\t\t\n\t\t\t&#125;\t\t\t\t\n\t\t&#125;\n\t&#125;\t\n\nend define\n\n'parameter1 = object to repair\ndefine procedure &lt;RepairObject&gt;\n\n\t' execute all repairs here, such as object condition and inherited types, etc&#46;\n\t' would be great if there were a 'for each property on &lt;#object#&gt;' or 'for each action on &lt;#object#&gt;'\n\t\n\t'IE\n\t'\n\t'set string &lt;object; $parameter&#40;1&#41;$&gt;\n\t'set string &lt;master; #&#40;object&#41;&#58;master#&gt;\n\t'\n\t'for each property on &lt;#object#&gt; &#123;\n\t'\t\n\t'\tif property &lt;#master#; #quest&#46;property#&gt; then property &lt;#object#; #quest&#46;property# = $objectproperty&#40;#master#; #quest&#46;property#&#41;$&gt; else property &lt;#object#; not #quest&#46;property#&gt;\n\t'\t\t\n\t'&#125;\n\t'\n\t'for each property on &lt;#master#&gt; &#123;\n\t'\n\t'\tproperty &lt;#object#; #quest&#46;property# = $objectproperty&#40;#master#' #quest&#46;property#&#41;$&gt;\n\t'&#125;\n\t'\t\n\t'same for actions, with a #quest&#46;action# built-in string\n\t'same for types, with a #quest&#46;type# built-in string\n\nend define\n\ndefine room &lt;scrapyard&gt;\n\nend define[/code:2um52a6s]\n\nI stumbled upon something interesting while working away at my game.  Because it's an RPG/IF hybrid, there are some gamist elements to it, such as buying/selling equipment, item cleanup, etc.  This means that there may be a lot of unused objects in the game that the player, at any given point, might not have been interested in.  Those objects I send to a room called 'scrapyard'.  For instance, if the player defeats an enemy, combs through their belongings and leaves a short sword behind, that short sword is sent to the scrapyard.\n\nNow if the player at a later time wants to buy a short sword, I thought it would be prudent to check if there are any unused short swords out there before creating a new one.  That's essentially what the CloneObject procedure does.  I've created blueprints, or master objects, for every non-unique item in the game.  The player never touches those - she only comes into contact with objects that are cloned from the master.  If the player buys a short sword, the CloneObject procedure attempts to create one with a sequential identifier (number).  IE, [b:2um52a6s]short_sword_1[/b:2um52a6s].  If it doesn't exist, the procedure clones one from the master object, [b:2um52a6s]short_sword[/b:2um52a6s].  If the object does exist, and is not located in the scrapyard, then it is being used elsewhere.  (The identifier increments, and we repeat.)  If the object exists and is located in the scrapyard, then the player receives that object instead, since it's not being used.\n\nHere's the challenge.  I need an efficient way to restore the scrapped object's properties and actions to it's master's properties and actions.  The scrapped short sword may be damaged, have had types (like flammable) added to it, or types removed.  This may just turn into a feature request:\n\n1. for each property on &lt;object&gt; - stored in #quest.property#\n2. for each action on &lt;object&gt; - stored in #quest.action#\n3. for each type on &lt;object&gt; - stored in #quest.type#",
      "EditableFormat": "bbcode",
      "HTML": "<pre><code>!library<br/>!asl-version &lt;400&gt;<br/><br/>'parameter1 = MasterObject name<br/>'parameter2 = Location to create it<br/>define procedure &lt;CloneObject&gt;<br/>\t\t<br/>\tset string &lt;pn1; $parameter&#40;1&#41;$&gt;<br/>\tset string &lt;pn2; &gt;<br/>\tset string &lt;pn3; $parameter&#40;2&#41;$&gt;<br/>\tset numeric &lt;pn1; 0&gt;<br/>\tset numeric &lt;pn2; 0&gt;<br/><br/>\trepeat until &#40; %pn2% = 1 &#41; &#123;<br/><br/>\t\tinc &lt;pn1&gt;<br/>\t\tset string &lt;pn2; #pn1#_%pn1%&gt;\t\t\t<br/>\t\tif not real &lt;#pn2#&gt; then &#123;<br/>\t\t\tinc &lt;pn2&gt;<br/>\t\t\tif type &lt;#pn1#; Item&gt; then clone &lt;#pn1#; #pn2#; #pn3#&gt; else clone &lt;#pn1#; #pn2#; #quest&#46;currentroom#&gt;\t\t\t<br/>\t\t&#125;<br/>\t\telse &#123;<br/>\t\t\tif &#40; $locationof&#40;#pn2#&#41;$ = scrapyard &#41; then &#123;<br/>\t\t\t\tinc &lt;pn2&gt;<br/>\t\t\t\tdo &lt;RepairObject&#40;#pn2#&#41;&gt;<br/>\t\t\t\tmsg &lt;    Object found in scrapyard &#40;#pn2#&#41;&#46;&gt;<br/>\t\t\t\tif type &lt;#pn2#; Item&gt; then move &lt;#pn2#; #pn3#&gt; else move &lt;#pn2#; #quest&#46;currentroom#&gt;\t\t\t\t<br/>\t\t\t&#125;\t\t\t\t<br/>\t\t&#125;<br/>\t&#125;\t<br/><br/>end define<br/><br/>'parameter1 = object to repair<br/>define procedure &lt;RepairObject&gt;<br/><br/>\t' execute all repairs here, such as object condition and inherited types, etc&#46;<br/>\t' would be great if there were a 'for each property on &lt;#object#&gt;' or 'for each action on &lt;#object#&gt;'<br/>\t<br/>\t'IE<br/>\t'<br/>\t'set string &lt;object; $parameter&#40;1&#41;$&gt;<br/>\t'set string &lt;master; #&#40;object&#41;&#58;master#&gt;<br/>\t'<br/>\t'for each property on &lt;#object#&gt; &#123;<br/>\t'\t<br/>\t'\tif property &lt;#master#; #quest&#46;property#&gt; then property &lt;#object#; #quest&#46;property# = $objectproperty&#40;#master#; #quest&#46;property#&#41;$&gt; else property &lt;#object#; not #quest&#46;property#&gt;<br/>\t'\t\t<br/>\t'&#125;<br/>\t'<br/>\t'for each property on &lt;#master#&gt; &#123;<br/>\t'<br/>\t'\tproperty &lt;#object#; #quest&#46;property# = $objectproperty&#40;#master#' #quest&#46;property#&#41;$&gt;<br/>\t'&#125;<br/>\t'\t<br/>\t'same for actions, with a #quest&#46;action# built-in string<br/>\t'same for types, with a #quest&#46;type# built-in string<br/><br/>end define<br/><br/>define room &lt;scrapyard&gt;<br/><br/>end define</code></pre><br/><br/>I stumbled upon something interesting while working away at my game.  Because it's an RPG/IF hybrid, there are some gamist elements to it, such as buying/selling equipment, item cleanup, etc.  This means that there may be a lot of unused objects in the game that the player, at any given point, might not have been interested in.  Those objects I send to a room called 'scrapyard'.  For instance, if the player defeats an enemy, combs through their belongings and leaves a short sword behind, that short sword is sent to the scrapyard.<br/><br/>Now if the player at a later time wants to buy a short sword, I thought it would be prudent to check if there are any unused short swords out there before creating a new one.  That's essentially what the CloneObject procedure does.  I've created blueprints, or master objects, for every non-unique item in the game.  The player never touches those - she only comes into contact with objects that are cloned from the master.  If the player buys a short sword, the CloneObject procedure attempts to create one with a sequential identifier (number).  IE, <span style=\"font-weight:bold;\">short_sword_1</span>.  If it doesn't exist, the procedure clones one from the master object, <span style=\"font-weight:bold;\">short_sword</span>.  If the object does exist, and is not located in the scrapyard, then it is being used elsewhere.  (The identifier increments, and we repeat.)  If the object exists and is located in the scrapyard, then the player receives that object instead, since it's not being used.<br/><br/>Here's the challenge.  I need an efficient way to restore the scrapped object's properties and actions to it's master's properties and actions.  The scrapped short sword may be damaged, have had types (like flammable) added to it, or types removed.  This may just turn into a feature request:<br/><br/>1. for each property on &lt;object&gt; - stored in #quest.property#<br/>2. for each action on &lt;object&gt; - stored in #quest.action#<br/>3. for each type on &lt;object&gt; - stored in #quest.type#",
      "PostDate": "2007-01-20T16:49:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12301",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "I have to say I love the way you think because this is almost exactly how I've implemented shops/items in a few pre-alpha libraries over the years. It was a bit difficult when Quest was a bit younger, but no big deal now if I'm getting your drift completely. Currently I'm a bit tied up but I'll try and bang something out a bit later.\n\nFrom a quick glance, with a little work around and extra footwork on base items, you can implement a custom function to iterate through objects properties as I'm sure you can imagine.",
      "EditableFormat": "bbcode",
      "HTML": "I have to say I love the way you think because this is almost exactly how I've implemented shops/items in a few pre-alpha libraries over the years. It was a bit difficult when Quest was a bit younger, but no big deal now if I'm getting your drift completely. Currently I'm a bit tied up but I'll try and bang something out a bit later.<br/><br/>From a quick glance, with a little work around and extra footwork on base items, you can implement a custom function to iterate through objects properties as I'm sure you can imagine.",
      "PostDate": "2007-01-21T02:42:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12303",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Right... First off, how have you done properties such as &quot;flammable&quot; (I'd guess &quot;poison&quot; or &quot;slow&quot; are also effects/properties like these).\n\nI know in mine, I gave it an &quot;effects=##&quot; way of doing things... Sure you may need to parse the comma/anything (I think I used '|'s or '\\'s) BUT you make it hella easier to restore defaults...\n\nIn my alpha, I used something like so:\n\n[code:1ffw9h3z] startscript &#123;\n   set string &lt;props&#91;1&#93;; hp&gt;\n   set string &lt;props&#91;2&#93;; mp&gt;\n   set string &lt;props&#91;3&#93;; fire&gt;\n   set string &lt;props&#91;4&#93;; effect&gt;\n   &#46;&#46;&#46;\n&#125;[/code:1ffw9h3z]\nThis is an array of the object properties which effect: monsters/magic/equipment/YOUR status.\n\nThen, to just restore it, you can use this:\n[code:1ffw9h3z]set string &lt;obj1; deafult_obj_1&gt;\nset string &lt;obj2; scrapped_obj_1&gt;\nfor &lt;iter;1;$ubound&#40;props&#41;$&gt; &#123;\n   property &lt;#obj2#; #props&#91;iter&#93;#=$objectproperty&#40;#obj1#&#58;#props&#91;iter&#93;#&#41;$&gt;\n&#125;[/code:1ffw9h3z]\n\nI actually did some calculations, additions and subtractions for stat purposes (because writing out 15 lines of code when a loop like this did it in four, was just silly IMO).\n.. This will also reset it if your &quot;effects&quot; property is equal to stuff.\n\nIf you're far too gone - then you could always do a more complicated loop:\n[code:1ffw9h3z]for &lt;iter;1;$ubound&#40;props&#41;$&gt; &#123;\n   set string &lt;property&#46;value; $objectproperty&#40;#obj1#;#props&#91;iter&#93;#&#41;$&gt;\n   if &#40; #property&#46;value# = ! &#41; then &#123;\n      if property &lt;#obj1#;#props&#91;iter&#93;#&gt; then _\n         property &lt;#obj2#; #props&#91;iter&#93;#&gt;\n   &#125;\n   else property &lt;#obj2#; #props&#91;iter&#93;#=$objectproperty&#40;#obj1#&#58;#props&#91;iter&#93;#&#41;$&gt;\n&#125;[/code:1ffw9h3z]\n\n.. I think that's correct - although I haven't double-checked.",
      "EditableFormat": "bbcode",
      "HTML": "Right... First off, how have you done properties such as &quot;flammable&quot; (I'd guess &quot;poison&quot; or &quot;slow&quot; are also effects/properties like these).<br/><br/>I know in mine, I gave it an &quot;effects=##&quot; way of doing things... Sure you may need to parse the comma/anything (I think I used '|'s or '\\'s) BUT you make it hella easier to restore defaults...<br/><br/>In my alpha, I used something like so:<br/><br/><pre><code> startscript &#123;<br/>   set string &lt;props&#91;1&#93;; hp&gt;<br/>   set string &lt;props&#91;2&#93;; mp&gt;<br/>   set string &lt;props&#91;3&#93;; fire&gt;<br/>   set string &lt;props&#91;4&#93;; effect&gt;<br/>   &#46;&#46;&#46;<br/>&#125;</code></pre><br/>This is an array of the object properties which effect: monsters/magic/equipment/YOUR status.<br/><br/>Then, to just restore it, you can use this:<br/><pre><code>set string &lt;obj1; deafult_obj_1&gt;<br/>set string &lt;obj2; scrapped_obj_1&gt;<br/>for &lt;iter;1;$ubound&#40;props&#41;$&gt; &#123;<br/>   property &lt;#obj2#; #props&#91;iter&#93;#=$objectproperty&#40;#obj1#&#58;#props&#91;iter&#93;#&#41;$&gt;<br/>&#125;</code></pre><br/><br/>I actually did some calculations, additions and subtractions for stat purposes (because writing out 15 lines of code when a loop like this did it in four, was just silly IMO).<br/>.. This will also reset it if your &quot;effects&quot; property is equal to stuff.<br/><br/>If you're far too gone - then you could always do a more complicated loop:<br/><pre><code>for &lt;iter;1;$ubound&#40;props&#41;$&gt; &#123;<br/>   set string &lt;property&#46;value; $objectproperty&#40;#obj1#;#props&#91;iter&#93;#&#41;$&gt;<br/>   if &#40; #property&#46;value# = ! &#41; then &#123;<br/>      if property &lt;#obj1#;#props&#91;iter&#93;#&gt; then _<br/>         property &lt;#obj2#; #props&#91;iter&#93;#&gt;<br/>   &#125;<br/>   else property &lt;#obj2#; #props&#91;iter&#93;#=$objectproperty&#40;#obj1#&#58;#props&#91;iter&#93;#&#41;$&gt;<br/>&#125;</code></pre><br/><br/>.. I think that's correct - although I haven't double-checked.",
      "PostDate": "2007-01-21T12:18:13+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12304",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:30pulr0t]...as I'm sure you can imagine.[/quote:30pulr0t]\n\nDamn, my imagination needs a kickstart, then.\n\nI [i:30pulr0t]have[/i:30pulr0t] thought about each base item having its own RepairClone action.  This would check the properties/actions/types it knows about.  But what about properties, actions, and types subsequently added to the clone that the base item knows nothing about?  I need to remove them.  I'd have to hard code an 'if' statement for each of the possiblities, which, at this point, look like there will be many of.  Every time I implement a new possiblity, I'd have to go through all the base item RepairClone functions to see if they should check for it or not.\n\nCan't wait to see what you come up with, ITID.\n\nOr anyone else: I know there are lots of good thinkers here.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>...as I'm sure you can imagine.</p></blockquote><br/><br/>Damn, my imagination needs a kickstart, then.<br/><br/>I <span style=\"font-style:italic;\">have</span> thought about each base item having its own RepairClone action.  This would check the properties/actions/types it knows about.  But what about properties, actions, and types subsequently added to the clone that the base item knows nothing about?  I need to remove them.  I'd have to hard code an 'if' statement for each of the possiblities, which, at this point, look like there will be many of.  Every time I implement a new possiblity, I'd have to go through all the base item RepairClone functions to see if they should check for it or not.<br/><br/>Can't wait to see what you come up with, ITID.<br/><br/>Or anyone else: I know there are lots of good thinkers here.",
      "PostDate": "2007-01-21T12:24:10+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12305",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:14zoaahm]Right... First off, how have you done properties such as &quot;flammable&quot; (I'd guess &quot;poison&quot; or &quot;slow&quot; are also effects/properties like these). [/quote:14zoaahm]\n\nI was going to type them.  Add the properties and actions as a type.  \n\nI see the value in the method you've described, however, especially for efficiency.  How would I remove properties that the cloned object should no longer have?  For instance, what if I gave it a Glowing property that now I want to remove?  Would every item, in effect, have a Glowing parameter that, if not above 0, indicated it was not glowing?  Yeah, that would work.  I surmise this is what you are doing.\n\nThis would also mean that all of the actions I code for every effect would be attached to every object.  I would have to check if they had the correlating property value in order to execute the action.  IE, no longer &quot;if action &lt;#object#; action&gt; then doaction &lt;#object#; action&gt;', but 'if ( #(object):actionproperty# &gt; 0 ) then doaction &lt;#object#; action&gt;'.\n\nDo I have this right?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Right... First off, how have you done properties such as &quot;flammable&quot; (I'd guess &quot;poison&quot; or &quot;slow&quot; are also effects/properties like these). </p></blockquote><br/><br/>I was going to type them.  Add the properties and actions as a type.  <br/><br/>I see the value in the method you've described, however, especially for efficiency.  How would I remove properties that the cloned object should no longer have?  For instance, what if I gave it a Glowing property that now I want to remove?  Would every item, in effect, have a Glowing parameter that, if not above 0, indicated it was not glowing?  Yeah, that would work.  I surmise this is what you are doing.<br/><br/>This would also mean that all of the actions I code for every effect would be attached to every object.  I would have to check if they had the correlating property value in order to execute the action.  IE, no longer &quot;if action &lt;#object#; action&gt; then doaction &lt;#object#; action&gt;', but 'if ( #(object):actionproperty# &gt; 0 ) then doaction &lt;#object#; action&gt;'.<br/><br/>Do I have this right?",
      "PostDate": "2007-01-21T12:36:43+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12307",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Right, I forgot to add in a second part for the second if..\n\n.. if you see - I check to see if an object's property has a value.\nI presume that if an object property is &quot;alive&quot; or &quot;dead&quot; or &quot;green&quot; or &quot;flammable&quot; then trying to get a value will result in &quot;!&quot; coming back (it may not).\nIf this is true then there's two possibilities:\n1) the property IS there - but no value\n2) the property is not there.\n\n.. So I only checked for number 1.. So the if should be:\n\n[code:2k4575cd]if property &lt;#obj1#;#props&#91;iter&#93;#&gt; then _\n   property &lt;#obj2#; #props&#91;iter&#93;#&gt; _\nelse _\n   property &lt;#obj2#; not #props&#91;iter&#93;#&gt;[/code:2k4575cd]\nThis removes any property in the array &quot;props&quot; (such as &quot;glowing&quot; etc).\n\nFor your &quot;type&quot; stuff, etc (personally I wouldn't do it that way - but it's cos I don't like types in Quest) then you can have several properties/arrays combinations to allow you to dynamically set stuff to defaults.\nThe first which comes to mind is simply this:\nproperty &lt;props=HP\\MP\\fire\\glowing\\poison\\whatever; acts=repell\\destroy\\throw...&gt;\n\nThese will allow you to loop through all the properties or actions an object can have dynamically - as they are added/removed.\nOf course - this doesn't work with types, as applying a type will overwrite the existing properties.. so you'd have to add them in manually...\n(although - the thought I just came up with was a &quot;new_type&quot; object action, which can add in the relevant properties when you add in the type - it could even randomize/set values of properties)\n\nPersonally - I only see this being typable - or hugely dynamic - if you can create your weapons from scratch - or HUGELY customize them..",
      "EditableFormat": "bbcode",
      "HTML": "Right, I forgot to add in a second part for the second if..<br/><br/>.. if you see - I check to see if an object's property has a value.<br/>I presume that if an object property is &quot;alive&quot; or &quot;dead&quot; or &quot;green&quot; or &quot;flammable&quot; then trying to get a value will result in &quot;!&quot; coming back (it may not).<br/>If this is true then there's two possibilities:<br/>1) the property IS there - but no value<br/>2) the property is not there.<br/><br/>.. So I only checked for number 1.. So the if should be:<br/><br/><pre><code>if property &lt;#obj1#;#props&#91;iter&#93;#&gt; then _<br/>   property &lt;#obj2#; #props&#91;iter&#93;#&gt; _<br/>else _<br/>   property &lt;#obj2#; not #props&#91;iter&#93;#&gt;</code></pre><br/>This removes any property in the array &quot;props&quot; (such as &quot;glowing&quot; etc).<br/><br/>For your &quot;type&quot; stuff, etc (personally I wouldn't do it that way - but it's cos I don't like types in Quest) then you can have several properties/arrays combinations to allow you to dynamically set stuff to defaults.<br/>The first which comes to mind is simply this:<br/>property &lt;props=HP\\MP\\fire\\glowing\\poison\\whatever; acts=repell\\destroy\\throw...&gt;<br/><br/>These will allow you to loop through all the properties or actions an object can have dynamically - as they are added/removed.<br/>Of course - this doesn't work with types, as applying a type will overwrite the existing properties.. so you'd have to add them in manually...<br/>(although - the thought I just came up with was a &quot;new_type&quot; object action, which can add in the relevant properties when you add in the type - it could even randomize/set values of properties)<br/><br/>Personally - I only see this being typable - or hugely dynamic - if you can create your weapons from scratch - or HUGELY customize them..",
      "PostDate": "2007-01-21T21:03:25+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12311",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Yes, I see.  That is definitely doable in a small amount of time.  I think I'll try something along that line for now.  Thanks, tr0n.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, I see.  That is definitely doable in a small amount of time.  I think I'll try something along that line for now.  Thanks, tr0n.",
      "PostDate": "2007-01-22T01:11:30+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12313",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I employed something similar to the &quot;actions=eat\\kill\\fireball&quot; approach with monsters.\nMonsters of different types (say bosses etc) could have different actions. Those actions may be wanted to fire off in a certain proportion to the other actions.. So &quot;attack&quot; might be used 20% of the time, while &quot;fireball&quot; might be 70.. And &quot;explosion&quot; 10%.\n\nSo I had a ratio as well... &quot;rat=3\\17\\30\\50&quot;. A range is split up accordingly and a random number picked.\n\nI also did this sort of stuff for the monsters.. I didn't want an infinite amount of monsters - so I reused them - and restored the HP and other status stuff back to normal as much as possible.. This was back in 2003 or 2002 sometime.\n\n.. I didn't do it for items though - mainly as I only do single player, etc.",
      "EditableFormat": "bbcode",
      "HTML": "I employed something similar to the &quot;actions=eat\\kill\\fireball&quot; approach with monsters.<br/>Monsters of different types (say bosses etc) could have different actions. Those actions may be wanted to fire off in a certain proportion to the other actions.. So &quot;attack&quot; might be used 20% of the time, while &quot;fireball&quot; might be 70.. And &quot;explosion&quot; 10%.<br/><br/>So I had a ratio as well... &quot;rat=3\\17\\30\\50&quot;. A range is split up accordingly and a random number picked.<br/><br/>I also did this sort of stuff for the monsters.. I didn't want an infinite amount of monsters - so I reused them - and restored the HP and other status stuff back to normal as much as possible.. This was back in 2003 or 2002 sometime.<br/><br/>.. I didn't do it for items though - mainly as I only do single player, etc.",
      "PostDate": "2007-01-22T10:33:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12314",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Yeah, I haven't sprung too much into monster/hostiles coding yet.  But what you're talking about is obviously something that has to be dealt with.  Up until this point, I was thinking of coding several different AI scripts of various intensities.  That is, dummy_AI all the way to genius_AI, then assigning a property called CombatScript to each hostile pointing to the relevant AI script.  (This way I can dynamically change the script.  If they are severely wounded, or hit with a confusion spell, that script may need to be changed.)\n\nTo help the AI, I was going to store the last several actions of each combatant as an array on that combatant.  That way, combatants can 'look up' the history of their own actions and the history of their opponents(') actions to determine more logical next moves.\n\nTo tie it all up, I certainly was going to employ some sort of randomized action selection inside of the logic.  The dummy_AI script would use a hell of a lot more random selection than the genius_AI script.  Assigning ratios and actions as two properties would seem to work out well for that.\n\nHope I'm not missing anything.  It always seems that, as you go along, a simpler way shows itself AFTER you've finished the more complicated way.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, I haven't sprung too much into monster/hostiles coding yet.  But what you're talking about is obviously something that has to be dealt with.  Up until this point, I was thinking of coding several different AI scripts of various intensities.  That is, dummy_AI all the way to genius_AI, then assigning a property called CombatScript to each hostile pointing to the relevant AI script.  (This way I can dynamically change the script.  If they are severely wounded, or hit with a confusion spell, that script may need to be changed.)<br/><br/>To help the AI, I was going to store the last several actions of each combatant as an array on that combatant.  That way, combatants can 'look up' the history of their own actions and the history of their opponents(') actions to determine more logical next moves.<br/><br/>To tie it all up, I certainly was going to employ some sort of randomized action selection inside of the logic.  The dummy_AI script would use a hell of a lot more random selection than the genius_AI script.  Assigning ratios and actions as two properties would seem to work out well for that.<br/><br/>Hope I'm not missing anything.  It always seems that, as you go along, a simpler way shows itself AFTER you've finished the more complicated way.",
      "PostDate": "2007-01-22T12:18:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12367",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": ".. To be honest, I always think into several different ways, and try to think of all the tiny quirks eacdh could have.. Sometimes I also draw out small diagrams of how they appear logically in my head so that I can understand it a little better.\n\nHalf the times it pays off as I can look at several differences and choose the better one.\n\nOn a side note, you are concentrating on the more correct part at the moment. A general idea going around - of which I agree - is that a good programmer worries about the code, but a GREAT programmer worries about the data structure.",
      "EditableFormat": "bbcode",
      "HTML": ".. To be honest, I always think into several different ways, and try to think of all the tiny quirks eacdh could have.. Sometimes I also draw out small diagrams of how they appear logically in my head so that I can understand it a little better.<br/><br/>Half the times it pays off as I can look at several differences and choose the better one.<br/><br/>On a side note, you are concentrating on the more correct part at the moment. A general idea going around - of which I agree - is that a good programmer worries about the code, but a GREAT programmer worries about the data structure.",
      "PostDate": "2007-01-23T10:23:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12380",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:1rx4ahf6]a good programmer worries about the code, but a GREAT programmer worries about the data structure. \n [/quote:1rx4ahf6]\n\nOoh, I'm about to google that.  Or, you could explain the idea in a little more detail, since my curiousity is piqued.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>a good programmer worries about the code, but a GREAT programmer worries about the data structure. <br/> </p></blockquote><br/><br/>Ooh, I'm about to google that.  Or, you could explain the idea in a little more detail, since my curiousity is piqued.",
      "PostDate": "2007-01-23T12:50:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12387",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Erm, the actual quote is:\n[quote:3tf0lzpi]I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.[/quote:3tf0lzpi]From Linus Torvalds.. I actually think it's quite right.\n\nHe's come up with quite a few good quotes, seems like a very funny chap.",
      "EditableFormat": "bbcode",
      "HTML": "Erm, the actual quote is:<br/><blockquote><p>I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.</p></blockquote>From Linus Torvalds.. I actually think it's quite right.<br/><br/>He's come up with quite a few good quotes, seems like a very funny chap.",
      "PostDate": "2007-01-23T17:31:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12400",
      "UserId": 0,
      "Username": "007bond",
      "UserAvatar": null,
      "UserGravatar": "4c2673a2d8666a97b5c1082c5cf2e0e5",
      "EditableText": "Linus Torvalds?\n\nHe was the guy who wrote Linux.  He's a really smart guy",
      "EditableFormat": "bbcode",
      "HTML": "Linus Torvalds?<br/><br/>He was the guy who wrote Linux.  He's a really smart guy",
      "PostDate": "2007-01-24T05:11:02+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12414",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "He is still developing the kernel, along with several others.\n\nJust because he's a big name, doesn't mean he's 'smart', or technically always &quot;right&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "He is still developing the kernel, along with several others.<br/><br/>Just because he's a big name, doesn't mean he's 'smart', or technically always &quot;right&quot;.",
      "PostDate": "2007-01-24T15:47:23+00:00",
      "LastEditDate": null
    }
  ]
}
