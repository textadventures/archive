{
  "Topic": {
    "TopicId": "wpgtz-hbckkg_vnrgoxs7g",
    "ForumId": "24",
    "Title": "See amount of money specific player has at end of game",
    "LastUpdated": "2016-11-10T01:00:33.7258551Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "de9a579f-8ce1-4c6c-a6dc-c41fa8331e4c",
      "UserId": 273035,
      "Username": "RVS",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7894a6895dd5dec6d2f66af4b7ef643f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "a",
      "EditableFormat": "markdown",
      "HTML": "<p>a</p>\n\n",
      "PostDate": "2016-11-10T01:00:33.7258551Z",
      "LastEditDate": "2016-11-22T00:06:18.2949682Z"
    },
    {
      "PostId": "c5327b1a-37d1-4b0f-942e-ebebd6b9bbde",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could take the Squiffy variable, convert it to a php variable, hash it, and then display the resulting output which they submit to you. You could then compare that hash against known hashes for numbers. If they're a technical bunch, you could salt the hash. \r\n\r\nAlternatively your email option could work. Have a form with a hidden field that you output your variable too. They can enter name etc, but can't see or edit hidden field. They click submit and it is sent to you. Not to hard to hack though. \r\n\r\nBoth of the above will require some understanding of php, html and Javascript. You'll also need to be self hosting your game because you need access to server side scripting. \r\n\r\nOne other option that would avoid for server side scripting would be to do a client side 'encrypt' of your squiffy variable. Maybe encoding the number to base 64, or simply doing something to the number that obscures its true value. Anyone that knows anything about coding would be able to reverse engineer this in minutes, so depends on the audience. ",
      "EditableFormat": "markdown",
      "HTML": "<p>You could take the Squiffy variable, convert it to a php variable, hash it, and then display the resulting output which they submit to you. You could then compare that hash against known hashes for numbers. If they're a technical bunch, you could salt the hash.</p>\n<p>Alternatively your email option could work. Have a form with a hidden field that you output your variable too. They can enter name etc, but can't see or edit hidden field. They click submit and it is sent to you. Not to hard to hack though.</p>\n<p>Both of the above will require some understanding of php, html and Javascript. You'll also need to be self hosting your game because you need access to server side scripting.</p>\n<p>One other option that would avoid for server side scripting would be to do a client side 'encrypt' of your squiffy variable. Maybe encoding the number to base 64, or simply doing something to the number that obscures its true value. Anyone that knows anything about coding would be able to reverse engineer this in minutes, so depends on the audience.</p>\n\n",
      "PostDate": "2016-11-10T12:31:39.1693969Z",
      "LastEditDate": "2016-11-10T12:39:24.5587228Z"
    },
    {
      "PostId": "ffefa335-cb25-4373-85d9-e5716d12c457",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "https://jsfiddle.net/gabrieleromanato/qaght/\r\n\r\nThe above might be useful. It's a JS Script that lets you convert a string to Base 64 client-side. You could easily incorporate the above into Squiffy. As I mentioned above, the technically minded students might recognise the string as Base 64 and just create their own, but I doubt that would apply to many.\r\n\r\nSo at the end of your game, you would output something like:\r\n\r\n**Congratulations, you made $57643**\r\n\r\n**Your code is: JDU3NjQz**\r\n\r\n**Email this to email@email.com to submit your score.**\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>https://jsfiddle.net/gabrieleromanato/qaght/</p>\n<p>The above might be useful. It's a JS Script that lets you convert a string to Base 64 client-side. You could easily incorporate the above into Squiffy. As I mentioned above, the technically minded students might recognise the string as Base 64 and just create their own, but I doubt that would apply to many.</p>\n<p>So at the end of your game, you would output something like:</p>\n<p><strong>Congratulations, you made $57643</strong></p>\n<p><strong>Your code is: JDU3NjQz</strong></p>\n<p><strong>Email this to email@email.com to submit your score.</strong></p>\n\n",
      "PostDate": "2016-11-12T21:37:20.0640065Z",
      "LastEditDate": "2016-11-12T21:41:48.9198981Z"
    },
    {
      "PostId": "5c4828e4-2a6b-41e4-8cb9-740525fe1e78",
      "UserId": 273035,
      "Username": "RVS",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7894a6895dd5dec6d2f66af4b7ef643f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "aaaaaaaaaaaaaaa",
      "EditableFormat": "markdown",
      "HTML": "<p>aaaaaaaaaaaaaaa</p>\n\n",
      "PostDate": "2016-11-19T23:18:56.3508936Z",
      "LastEditDate": "2016-12-17T21:53:01.9614263Z"
    },
    {
      "PostId": "4711b7ad-a94c-4f56-98e0-6d88e4671025",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I suspect the OP deleted their posts as they didn't want the users of his game to find information that might allow them to hack it. However, to aid other users -  in a nutshell the OP wanted to run a competition whereby users had to earn the most money. He needed a way to verify that users were reporting their true earnings, hence the need for an \"encrypted\" code.",
      "EditableFormat": "markdown",
      "HTML": "<p>I suspect the OP deleted their posts as they didn't want the users of his game to find information that might allow them to hack it. However, to aid other users -  in a nutshell the OP wanted to run a competition whereby users had to earn the most money. He needed a way to verify that users were reporting their true earnings, hence the need for an \"encrypted\" code.</p>\n\n",
      "PostDate": "2016-12-19T14:36:16.1437184Z",
      "LastEditDate": null
    }
  ]
}
