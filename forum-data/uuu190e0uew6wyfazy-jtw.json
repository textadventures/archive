{
  "Topic": {
    "TopicId": "uuu190e0uew6wyfazy-jtw",
    "ForumId": "24",
    "Title": "Lack of @import in editor? Part 2",
    "LastUpdated": "2023-04-02T23:21:27.6648702Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a429e3f9-d609-4f84-be09-8edc203d7391",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's ChatGPT's best stab at making it easy to import JavaScript or curly bracket Squiffy code. It doesn't understand @set attributes. I *think* you have to keep JavaScript in separate .txt/.sq files from curly bracket Squiffy code, but ChatGPT will keep playing with that.\r\n\r\nStep 1\r\nMake .txt or .sq files. These files can each contain JavaScript or curly bracket Squiffy code. Not both, for now.\r\n\r\nStep 2\r\nSave your txt. or .sq files in in a zip folder. Upload it to [http://textadventures.co.uk/submit/submitfile](http://textadventures.co.uk/submit/submitfile)\r\n\r\nStep 3\r\nOpen whatever tool you use to make Squiffy games. I use the editor. put this section anywhere you want. replace the url from the ```@set API :=``` line with the url that [http://textadventures.co.uk/submit/submitfile](http://textadventures.co.uk/submit/submitfile) gave you. **And no space before or after \"/\".**\r\n```\r\n[[IMPORT]]:\r\n@set API := https://media.textadventures.co.uk/games/RnNu0cyO_UWw226YSa-B4A/Squiffy%20API%20Demo / {import}.txt\r\n    var API = squiffy.get(\"API\");\r\n    var next = squiffy.get(\"next\");\r\n    $.get(API)\r\n    .done(function (data, status, xhr) {\r\n        try {\r\n            squiffy.ui.processText(data);\r\n        } catch (e) {\r\n            squiffy.set(\"error\", e.message);\r\n        }\r\n        try {\r\n            eval(data);\r\n        } catch (e) {\r\n        }\r\n        squiffy.story.go(next);\r\n    })\r\n    .fail(function (data, status, xhr) {\r\n        squiffy.set(\"data\", status);\r\n        squiffy.story.go(next);\r\n    });\r\n```\r\nStep 4\r\nThe following method for importing JavaScript and curly bracket Squiffy code now works:\r\n``` \r\n@title Squiffy API Demo\r\n@start Import DateTime\r\n\r\n\r\n[[Import DateTime]]:\r\n@set import = DateTime\r\n@set next = English Conventions\r\n    squiffy.story.go(\"IMPORT\");\r\n\r\n\r\n[[English Conventions]]:\r\n@set import = Process DateTime\r\n@set next = test\r\n    squiffy.story.go(\"IMPORT\");\r\n\r\n\r\n[[test]]:\r\n    squiffy.set(\"week\", Math.trunc(get(\"week\")));\r\n\r\n\r\n{@0=@0}\r\nIt's {hour}:{if 0=0:0}{else:&zwj;}{minutes} {AMPM} in the {TimeOfDay} on {xday}, {Month} {datenum}{th}, week {week} of {year}.\r\n```\r\nNow if somebody wants to streamline this further, say, by \r\n* translating this into something story.js can understand\r\n* eliminating the ```@set next``` and ```squiffy.story.go()```\r\n* making it possible to have JS and curly code in the same .txt/.sq\r\n\r\nthat would be very cool of them.\r\n\r\nP.S. Some of the details won't work unless you're using [Squiffy 5.1.4](https://textadventures.co.uk/forum/squiffy/topic/k7mig9vfj0ashnvsbefoeq/unofficial-squiffy-5-1-4-by-mrangel#71188faa-35ae-4c7d-b2a6-5232c8b292eb) by mrangel",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's ChatGPT's best stab at making it easy to import JavaScript or curly bracket Squiffy code. It doesn't understand @set attributes. I <em>think</em> you have to keep JavaScript in separate .txt/.sq files from curly bracket Squiffy code, but ChatGPT will keep playing with that.</p>\n<p>Step 1<br>\nMake .txt or .sq files. These files can each contain JavaScript or curly bracket Squiffy code. Not both, for now.</p>\n<p>Step 2<br>\nSave your txt. or .sq files in in a zip folder. Upload it to <a href=\"http://textadventures.co.uk/submit/submitfile\">http://textadventures.co.uk/submit/submitfile</a></p>\n<p>Step 3<br>\nOpen whatever tool you use to make Squiffy games. I use the editor. put this section anywhere you want. replace the url from the <code>@set API :=</code> line with the url that <a href=\"http://textadventures.co.uk/submit/submitfile\">http://textadventures.co.uk/submit/submitfile</a> gave you. <strong>And no space before or after \"/\".</strong></p>\n<pre><code>[[IMPORT]]:\n@set API := https://media.textadventures.co.uk/games/RnNu0cyO_UWw226YSa-B4A/Squiffy%20API%20Demo / {import}.txt\n    var API = squiffy.get(\"API\");\n    var next = squiffy.get(\"next\");\n    $.get(API)\n    .done(function (data, status, xhr) {\n        try {\n            squiffy.ui.processText(data);\n        } catch (e) {\n            squiffy.set(\"error\", e.message);\n        }\n        try {\n            eval(data);\n        } catch (e) {\n        }\n        squiffy.story.go(next);\n    })\n    .fail(function (data, status, xhr) {\n        squiffy.set(\"data\", status);\n        squiffy.story.go(next);\n    });\n</code></pre>\n<p>Step 4<br>\nThe following method for importing JavaScript and curly bracket Squiffy code now works:</p>\n<pre><code>@title Squiffy API Demo\n@start Import DateTime\n\n\n[[Import DateTime]]:\n@set import = DateTime\n@set next = English Conventions\n    squiffy.story.go(\"IMPORT\");\n\n\n[[English Conventions]]:\n@set import = Process DateTime\n@set next = test\n    squiffy.story.go(\"IMPORT\");\n\n\n[[test]]:\n    squiffy.set(\"week\", Math.trunc(get(\"week\")));\n\n\n{@0=@0}\nIt's {hour}:{if 0=0:0}{else:&amp;zwj;}{minutes} {AMPM} in the {TimeOfDay} on {xday}, {Month} {datenum}{th}, week {week} of {year}.\n</code></pre>\n<p>Now if somebody wants to streamline this further, say, by</p>\n<ul>\n<li>translating this into something story.js can understand</li>\n<li>eliminating the <code>@set next</code> and <code>squiffy.story.go()</code></li>\n<li>making it possible to have JS and curly code in the same .txt/.sq</li>\n</ul>\n<p>that would be very cool of them.</p>\n<p>P.S. Some of the details won't work unless you're using <a href=\"https://textadventures.co.uk/forum/squiffy/topic/k7mig9vfj0ashnvsbefoeq/unofficial-squiffy-5-1-4-by-mrangel#71188faa-35ae-4c7d-b2a6-5232c8b292eb\">Squiffy 5.1.4</a> by mrangel</p>\n\n",
      "PostDate": "2023-04-02T23:21:27.6648702Z",
      "LastEditDate": "2023-04-02T23:33:08.5313217Z",
      "link": null
    },
    {
      "PostId": "8fdbf83e-affb-4002-bc4d-6f118d7ee50d",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ðŸ¦—",
      "EditableFormat": "markdown",
      "HTML": "<p>ðŸ¦—</p>\n\n",
      "PostDate": "2023-04-28T01:21:32.237644Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71cb0a23-4847-4dcf-946f-014177b263cc",
      "UserId": 310116,
      "Username": "Concordia English Language Academy",
      "AvatarUrl": "http://i.imgur.com/DVfpBYwb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I know you're asking for help, but I don't know much, and I actually have a question for you.\r\n\r\nIs there a secure way to import my students' names ? I want their names to appear randomly in a game.",
      "EditableFormat": "markdown",
      "HTML": "<p>I know you're asking for help, but I don't know much, and I actually have a question for you.</p>\n<p>Is there a secure way to import my students' names ? I want their names to appear randomly in a game.</p>\n\n",
      "PostDate": "2023-05-12T01:05:30.5191332Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e9dde4df-926c-4f43-882a-7beebe6885ab",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I guess when you publish your game you can select \"Only people I give the link to.\" But that's still not very secure. Anybody who opens the game can still \"inspect page source.\" I made an API of nicknames that my students chose for themselves as well as an id number that's only used in my classes. I would not recommend using any real names or identifying information. Sorry to not be more helpful.",
      "EditableFormat": "markdown",
      "HTML": "<p>I guess when you publish your game you can select \"Only people I give the link to.\" But that's still not very secure. Anybody who opens the game can still \"inspect page source.\" I made an API of nicknames that my students chose for themselves as well as an id number that's only used in my classes. I would not recommend using any real names or identifying information. Sorry to not be more helpful.</p>\n\n",
      "PostDate": "2023-05-15T04:42:10.3296232Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
