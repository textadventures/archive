{
  "Topic": {
    "TopicId": "c0o_6-wqhu_g5oxlfqkgew",
    "ForumId": "10",
    "Title": "Streamlining JS for Reloaded Game",
    "LastUpdated": "2019-12-26T05:31:23.5382305Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d57ed742-4a84-49ba-89b0-7cd484172abe",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Quest TA, offline, v5.8)\r\n\r\nI have an issue with my Map Demo game which uses KV's grid image library and JS script.  When saving the game, there is no issue; it is only when a game is reloaded that there is a problem...\r\n\r\nWhen only a small portion of the map has been created and displayed, there is no noticeable issue reloading.  But as more and more of the map is shown, reloading the game takes <i>geometrically</i> longer (as opposed to arithmetically).  Thus, when the entire map has been created/shown (about 400 rooms), reloading that game takes about 1 minute and 15 seconds!  Absurd!\r\n\r\nI'm pretty sure that the issue has to do with reloading a large # of rooms with KV's grid images.  I don't think the issue has anything to do with excessive image file size -- I've reduced the sizes of all the images but it makes no difference in reloading time.  Almost all of the exits in the game are created and destroyed on the fly as the player moves about, so there are only a few exits in the game at any given time.  Also, there are no errors in the JS console.  I've even compared (in Notepad++) a saved game with a tiny map to a saved game with the full map -- I see no obvious differences in the code other than the number of rooms.\r\n\r\nWhat follows is all of the KV grid image code that is run upon reloading a game, and in chronological order.  From the UserInit tab, the Quest function ```SetupGridImages``` is called:\r\n```\r\n<function name=\"SetupGridImages\"><![CDATA[\r\n    SetGridImgPath(\"\")\r\n    foreach (room, AllObjects()) {                       // NOTE the \"foreach\" here!!!\r\n        if (HasAttribute(room,\"grid_image\")) {\r\n            JS.eval (\"imagesToCheck.push('\"+room.grid_image+\"');checkImages();\")\r\n        }\r\n    }\r\n]]></function>\r\n\r\n<function name=\"SetGridImgPath\" parameters=\"filename\">\r\n    JS.setImagePath (GetFileUrl(\"_FILENAME_\"))\r\n</function>\r\n```\r\n<b><-------------------------- code from KV's library is above this line, code from KV's JS script is below ---------------------------------></b>\r\n```\r\nvar questImagePath = \"\";\r\n\r\nsetImagePath = function(path) {\r\n    questImagePath = path;\r\n};\r\n\r\nvar imagesToCheck = [];\r\n\r\nfunction checkImages(){\r\n    imagesToCheck.forEach(function(img){                // NOTE the \"forEach\" here!!!\r\n        isFileGood(img)\r\n    });\r\n};\r\n\r\n// This function was updated by KV after Q5.8 to delete images that were caching in a reloaded game -\r\nfunction isFileGood(url){\r\n    var imgFile = getFileUrlJS(url);\r\n    $('body').append(\"<img style='display:none' onload='$(this).remove();' onerror='imgFail(this);$(this).remove();'src='\"+imgFile+\"'/>\");\r\n};\r\n\r\ngetFileUrlJS = function(filename){\r\n    if(filename.indexOf(\"://\") > 0) {\r\n        return (filename);\r\n    } else {\r\n\treturn questImagePath.replace(\"_FILENAME_\", filename);\r\n    }\r\n};\r\n\r\nvar failedImgs = [];\r\n\r\nfunction imgFail(imgFailed){\r\n    failedImgs.push(imgFailed.src);\r\n};\r\n```\r\nHowever, I <i>think</i> I may know what's at least partly causing the problem -- note the 2 instances of \"foreach\" in the code, 1 inside the ```SetupGridImages``` Quest library function, and 1 inside the ```checkImages()``` JS script function.  A \"forEach\" loop is running inside another \"foreach\" loop!  Could this be what is causing the (geometric) reloading delay?  If so, how can this code be written more efficiently?\r\n\r\nFor reference, the original thread for this topic (gulp) is here:\r\nhttp://textadventures.co.uk/forum/samples/topic/yn_iueiaokmshfcpkyahga/code-for-printing-an-image-instead-of-a-standard-map-room-mostly-mostly-finito\r\n\r\nThanks for reading and Happy Holidays!",
      "EditableFormat": "markdown",
      "HTML": "<p>(Quest TA, offline, v5.8)</p>\n<p>I have an issue with my Map Demo game which uses KV's grid image library and JS script.  When saving the game, there is no issue; it is only when a game is reloaded that there is a problem...</p>\n<p>When only a small portion of the map has been created and displayed, there is no noticeable issue reloading.  But as more and more of the map is shown, reloading the game takes <i>geometrically</i> longer (as opposed to arithmetically).  Thus, when the entire map has been created/shown (about 400 rooms), reloading that game takes about 1 minute and 15 seconds!  Absurd!</p>\n<p>I'm pretty sure that the issue has to do with reloading a large # of rooms with KV's grid images.  I don't think the issue has anything to do with excessive image file size -- I've reduced the sizes of all the images but it makes no difference in reloading time.  Almost all of the exits in the game are created and destroyed on the fly as the player moves about, so there are only a few exits in the game at any given time.  Also, there are no errors in the JS console.  I've even compared (in Notepad++) a saved game with a tiny map to a saved game with the full map -- I see no obvious differences in the code other than the number of rooms.</p>\n<p>What follows is all of the KV grid image code that is run upon reloading a game, and in chronological order.  From the UserInit tab, the Quest function <code>SetupGridImages</code> is called:</p>\n<pre><code>&lt;function name=\"SetupGridImages\"&gt;&lt;![CDATA[\n    SetGridImgPath(\"\")\n    foreach (room, AllObjects()) {                       // NOTE the \"foreach\" here!!!\n        if (HasAttribute(room,\"grid_image\")) {\n            JS.eval (\"imagesToCheck.push('\"+room.grid_image+\"');checkImages();\")\n        }\n    }\n]]&gt;&lt;/function&gt;\n\n&lt;function name=\"SetGridImgPath\" parameters=\"filename\"&gt;\n    JS.setImagePath (GetFileUrl(\"_FILENAME_\"))\n&lt;/function&gt;\n</code></pre>\n<p><b>&lt;-------------------------- code from KV's library is above this line, code from KV's JS script is below ---------------------------------&gt;</b></p>\n<pre><code>var questImagePath = \"\";\n\nsetImagePath = function(path) {\n    questImagePath = path;\n};\n\nvar imagesToCheck = [];\n\nfunction checkImages(){\n    imagesToCheck.forEach(function(img){                // NOTE the \"forEach\" here!!!\n        isFileGood(img)\n    });\n};\n\n// This function was updated by KV after Q5.8 to delete images that were caching in a reloaded game -\nfunction isFileGood(url){\n    var imgFile = getFileUrlJS(url);\n    $('body').append(\"&lt;img style='display:none' onload='$(this).remove();' onerror='imgFail(this);$(this).remove();'src='\"+imgFile+\"'/&gt;\");\n};\n\ngetFileUrlJS = function(filename){\n    if(filename.indexOf(\"://\") &gt; 0) {\n        return (filename);\n    } else {\n\treturn questImagePath.replace(\"_FILENAME_\", filename);\n    }\n};\n\nvar failedImgs = [];\n\nfunction imgFail(imgFailed){\n    failedImgs.push(imgFailed.src);\n};\n</code></pre>\n<p>However, I <i>think</i> I may know what's at least partly causing the problem -- note the 2 instances of \"foreach\" in the code, 1 inside the <code>SetupGridImages</code> Quest library function, and 1 inside the <code>checkImages()</code> JS script function.  A \"forEach\" loop is running inside another \"foreach\" loop!  Could this be what is causing the (geometric) reloading delay?  If so, how can this code be written more efficiently?</p>\n<p>For reference, the original thread for this topic (gulp) is here:<br>\nhttp://textadventures.co.uk/forum/samples/topic/yn_iueiaokmshfcpkyahga/code-for-printing-an-image-instead-of-a-standard-map-room-mostly-mostly-finito</p>\n<p>Thanks for reading and Happy Holidays!</p>\n\n",
      "PostDate": "2019-12-26T05:31:23.5382305Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f899fa79-170a-489d-ae06-d7935ab9a136",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure if this is the right thread, but okay.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure if this is the right thread, but okay.</p>\n\n",
      "PostDate": "2019-12-27T19:15:04.7543066Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "52de5adf-d8ce-4554-8f07-275c269ebd82",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest just sucks with graphics.  I'm moving on to Unity.",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest just sucks with graphics.  I'm moving on to Unity.</p>\n\n",
      "PostDate": "2020-01-02T18:13:09.3645635Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d4ce5725-e7b8-465c-b8b7-0539c1ff1fbc",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I moved the second forEach loop outside of the first foreach loop, but that made no difference in reloading time so that's not the issue.\r\n\r\nI strongly suspect that the issue lies somewhere within this code (which runs within the second forEach loop):\r\n```\r\nfunction isFileGood(url){\r\n    var imgFile = getFileUrlJS(url);\r\n    $('body').append(\"<img style='display:none' onload='$(this).remove();' onerror='imgFail(this);$(this).remove();'src='\"+imgFile+\"'/>\");\r\n};\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I moved the second forEach loop outside of the first foreach loop, but that made no difference in reloading time so that's not the issue.</p>\n<p>I strongly suspect that the issue lies somewhere within this code (which runs within the second forEach loop):</p>\n<pre><code>function isFileGood(url){\n    var imgFile = getFileUrlJS(url);\n    $('body').append(\"&lt;img style='display:none' onload='$(this).remove();' onerror='imgFail(this);$(this).remove();'src='\"+imgFile+\"'/&gt;\");\n};\n</code></pre>\n\n",
      "PostDate": "2020-01-13T04:05:10.0247674Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9c75cd4b-bc3a-47a4-b2cc-21c15384a923",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The logic in that code is broken if the map is already loaded.\r\n\r\nOn startup, it adds `<img>` tags for *every* map image to the document. Once they've loaded, it discards them. If they fail, it sets a flag that the image is unavailable so that the map won't attempt to load them. This isn't normally a big deal; the browser will wait for the images to load in the background, and it's pretty streamlined so the player probably won't notice.\r\n\r\nIf the map is already partly generated, it will ignore those flags - it doesn't know if the image has succeeded, or is still loading. It's attempting to load all the images before checking if they exist.\r\n\r\nOr more precisely, at the same time. It's trying to load *all* of the map images for testing purposes, *and* all the ones for rooms you've already visited in order to display them. And the map code will block waiting for its images to load before it continues, which means that your game start is slowed down waiting for all of the room images to be downloaded, some of them twice.\r\n\r\nOh, and it could be a server issue. Your browser may be sending two requests for the same image at the same time. If a document contains two `<img>` tags with the same URI, the browser will normally download it once and display it twice. But depending on its optimisations, this javascript may prevent that happening. And a server may, depending on its configuration, detect multiple requests for the same file from the same client as a possible malware red flag, and insert an arbitrary delay.\r\n\r\nThe sane way to do this would be to have your image check run in the background, but set a flag when it is successful. Before removing the `<img>` it would save the rasterized data to a lookup table, so that the map code can then display them without any need to download them again. If the map comes to display an image that isn't checked yet, it should add it to the queue and then set a reference, so that it will try again as soon as the image is available.\r\n\r\n(oh, and `forEach` over an array with a single element isn't noticeably slow, but it's a bit silly. It's a long time since I've seen `forEach` in javascript at all, because `$.each` is more common, but it shouldn't be a problem)",
      "EditableFormat": "markdown",
      "HTML": "<p>The logic in that code is broken if the map is already loaded.</p>\n<p>On startup, it adds <code>&lt;img&gt;</code> tags for <em>every</em> map image to the document. Once they've loaded, it discards them. If they fail, it sets a flag that the image is unavailable so that the map won't attempt to load them. This isn't normally a big deal; the browser will wait for the images to load in the background, and it's pretty streamlined so the player probably won't notice.</p>\n<p>If the map is already partly generated, it will ignore those flags - it doesn't know if the image has succeeded, or is still loading. It's attempting to load all the images before checking if they exist.</p>\n<p>Or more precisely, at the same time. It's trying to load <em>all</em> of the map images for testing purposes, <em>and</em> all the ones for rooms you've already visited in order to display them. And the map code will block waiting for its images to load before it continues, which means that your game start is slowed down waiting for all of the room images to be downloaded, some of them twice.</p>\n<p>Oh, and it could be a server issue. Your browser may be sending two requests for the same image at the same time. If a document contains two <code>&lt;img&gt;</code> tags with the same URI, the browser will normally download it once and display it twice. But depending on its optimisations, this javascript may prevent that happening. And a server may, depending on its configuration, detect multiple requests for the same file from the same client as a possible malware red flag, and insert an arbitrary delay.</p>\n<p>The sane way to do this would be to have your image check run in the background, but set a flag when it is successful. Before removing the <code>&lt;img&gt;</code> it would save the rasterized data to a lookup table, so that the map code can then display them without any need to download them again. If the map comes to display an image that isn't checked yet, it should add it to the queue and then set a reference, so that it will try again as soon as the image is available.</p>\n<p>(oh, and <code>forEach</code> over an array with a single element isn't noticeably slow, but it's a bit silly. It's a long time since I've seen <code>forEach</code> in javascript at all, because <code>$.each</code> is more common, but it shouldn't be a problem)</p>\n\n",
      "PostDate": "2020-01-13T10:21:49.5841056Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6f714d1c-297c-40bd-beba-dda7289dd32e",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How much of this applies to an offline game?",
      "EditableFormat": "markdown",
      "HTML": "<p>How much of this applies to an offline game?</p>\n\n",
      "PostDate": "2020-01-14T00:01:32.489684Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "044ae027-96d7-41ca-90f5-78c49b4099e2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure. You're still loading a large number of images; I'm unsure if Chromium does any kind of throttling for local files.\r\n\r\nBut then they're not local files, I think. If they're inside the .quest archive, they're zipped. So each file is a request to the backend, and I'm not sure if it unzips the whole archive in memory, or if it'll have to decompress it each time a file is requested.\r\n\r\nIn javascript-based games, I've seen a workaround for this issue where they patch a hundred images together into a grid, and then cut it up into separate rasters as needed; but that's more complex code, which I'm not fluent enough in Paper to replicate.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure. You're still loading a large number of images; I'm unsure if Chromium does any kind of throttling for local files.</p>\n<p>But then they're not local files, I think. If they're inside the .quest archive, they're zipped. So each file is a request to the backend, and I'm not sure if it unzips the whole archive in memory, or if it'll have to decompress it each time a file is requested.</p>\n<p>In javascript-based games, I've seen a workaround for this issue where they patch a hundred images together into a grid, and then cut it up into separate rasters as needed; but that's more complex code, which I'm not fluent enough in Paper to replicate.</p>\n\n",
      "PostDate": "2020-01-14T03:38:03.1811844Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d4020ff3-4d31-47d5-9b54-d6225f80e122",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, thanks for looking.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, thanks for looking.</p>\n\n",
      "PostDate": "2020-01-14T05:13:49.3382765Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
