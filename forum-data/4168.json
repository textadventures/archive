{
  "Topic": {
    "TopicId": "4168",
    "ForumId": "10",
    "Title": "Adding verbs to an object's display verb list",
    "LastUpdated": "2014-02-01T22:44:31+00:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "27713",
      "UserId": 0,
      "Username": "ELGAROU",
      "UserAvatar": null,
      "UserGravatar": "d0be55de9c3b37737eb8347827da42b9",
      "EditableText": "Hey, I finished my first gamebook, and now im trying to make a text adventure but so far I'm stuck struggling with this problem:\n\nI want that the first time that the player take a look to the the verblist of an object it shows only one verb (lets say talk), but when the player already have selected to talk to the object  then verblist show another verb (ask for example). \n\nI also wonder how is that some games have such customized games interfaces, like &quot;dream pieces&quot;.\n\nAnd finally, what programming languaje should I have learn to understand better the stuff like funtions and more advanced features of Quest.\n\nGreetings",
      "EditableFormat": "bbcode",
      "HTML": "Hey, I finished my first gamebook, and now im trying to make a text adventure but so far I'm stuck struggling with this problem:<br/><br/>I want that the first time that the player take a look to the the verblist of an object it shows only one verb (lets say talk), but when the player already have selected to talk to the object  then verblist show another verb (ask for example). <br/><br/>I also wonder how is that some games have such customized games interfaces, like &quot;dream pieces&quot;.<br/><br/>And finally, what programming languaje should I have learn to understand better the stuff like funtions and more advanced features of Quest.<br/><br/>Greetings",
      "PostDate": "2014-02-01T19:18:12+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27714",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "I'll try your questions backward:\n\n3) learning Javascript (JS), CSS and HTML will help you the most at first with Quest I think. \n\n2) Games like Dream Pieces probably customize their CSS and maybe JS to make them look different from regular Quest games\n\n1) You can change the list of an object's display verbs by changing this stringlist attribute, \n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Displayverbs\">http://quest5.net/wiki/Displayverbs</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m -->\n\nSo the basic idea is, when a player talks to the object, run a script that changes the displayverbs.",
      "EditableFormat": "bbcode",
      "HTML": "I'll try your questions backward:<br/><br/>3) learning Javascript (JS), CSS and HTML will help you the most at first with Quest I think. <br/><br/>2) Games like Dream Pieces probably customize their CSS and maybe JS to make them look different from regular Quest games<br/><br/>1) You can change the list of an object's display verbs by changing this stringlist attribute, <br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Displayverbs\">http://quest5.net/wiki/Displayverbs</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Stringlist\">http://quest5.net/wiki/Stringlist</a><!-- m --><br/><br/>So the basic idea is, when a player talks to the object, run a script that changes the displayverbs.",
      "PostDate": "2014-02-01T19:28:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27715",
      "UserId": 0,
      "Username": "ELGAROU",
      "UserAvatar": null,
      "UserGravatar": "d0be55de9c3b37737eb8347827da42b9",
      "EditableText": "Thanks a lot.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks a lot.",
      "PostDate": "2014-02-01T19:35:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27716",
      "UserId": 0,
      "Username": "ELGAROU",
      "UserAvatar": null,
      "UserGravatar": "d0be55de9c3b37737eb8347827da42b9",
      "EditableText": "I thought that the &quot;add value to a list&quot; script would do the trick, but it doesn't work even when I'm pretty sure that I'm introducing the parameters in the right way:\n\n&quot;list add (object.displayverbs, object.ask)&quot;\n\nI have my doubts how it is suppose to work when &quot;displayverb&quot; is a stringlist and I'm trying to add a script to the list, however when tried to enter plain text and testing the game I get this error:\n\n&quot;Error running script&#058; Cannot modify the contents of this list as it is defined by an inherited type. Clone it before attempting to modify.&quot;",
      "EditableFormat": "bbcode",
      "HTML": "I thought that the &quot;add value to a list&quot; script would do the trick, but it doesn't work even when I'm pretty sure that I'm introducing the parameters in the right way:<br/><br/>&quot;list add (object.displayverbs, object.ask)&quot;<br/><br/>I have my doubts how it is suppose to work when &quot;displayverb&quot; is a stringlist and I'm trying to add a script to the list, however when tried to enter plain text and testing the game I get this error:<br/><br/>&quot;Error running script&#058; Cannot modify the contents of this list as it is defined by an inherited type. Clone it before attempting to modify.&quot;",
      "PostDate": "2014-02-01T21:50:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27717",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "Yes, you don't want to add a script to a string list. But for the error see this, \n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Notes\">http://quest5.net/wiki/Notes</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "Yes, you don't want to add a script to a string list. But for the error see this, <br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Notes\">http://quest5.net/wiki/Notes</a><!-- m -->",
      "PostDate": "2014-02-01T22:01:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27718",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I think you can override this, if you override the inherited &quot;displayverbs&quot; Attribute:\n\nthe inherited &quot;(I presume, as I haven't looked it up, it's) editor_object&quot; Object Type provides the &quot;displayverbs&quot; special built-in String List to that Object, so you need to override this, by adding the &quot;displayverbs&quot; yourself to that Object:\n\n(and you also may need to change the settings in the GUI~Editor, as it has setting options that deals with the &quot;displayverbs&quot;)\n\nIn-Code:\n\n&lt;object name=&quot;???&quot;&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;Look at; Drop; Take; etc&lt;/attr&gt; // hopefully, this will override the &quot;displayverbs&quot; Attribute from the inherited trait, hopefully allowing your ' list add ' scripting to now work...\n&lt;/object&gt;\n\nIn GUI~Editor:\n\n(I'm not sure if this will work, or if this is how it's done)\n\n&quot;???&quot; Object -&gt; Attributes (Tab) -&gt; Attributes -&gt; Add -&gt;\n\nAttribute Name: displayverbs\nAttribute Type: stringlist\nAttribute Value: Look at;Take;Drop;etc\n\n-----\n\nand now within a scripting:\n\nhopefully the ' list add (this.displayverbs, &quot;ask&quot;) ', will now work.\n\nor, you could also try to just re-set the &quot;displayverbs&quot; Attribute too:\n\nthis.displayverbs = split (&quot;Look at;Take;Drop;etc;Ask&quot;,&quot;;&quot;)\n\n-----\n\notherwise, make the copy as George shown.\n\n-----\n\nP.S.\n\nwithin the Object, you can add extra verbs into the displayverbs via:\n\n&lt;object name=&quot;???&quot;&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;attr name=&quot;displayverbs&quot; type=&quot;listextend&quot;&gt;Ask&lt;/attr&gt;\n&lt;/object&gt;\n\nwhat the &quot;listextend&quot; does is to add the verb to the list (and thus not re-creating~resetting the list):\n\nLook at;Take;Drop;etc (original~old~initial~starting &quot;displayverbs&quot; list) + Ask (from &quot;listextend&quot;) = Look at;Take;Drop;etc;Ask\n\nbut, this doesn't help you in what you asked for in how to add a verb after an action~event happens (ie adding a verb via scripting), as your Object will start with this verb already, which is what you don't want.\n\n-------------\n\nPixie in his~her Spell Library does this (except he~she creates a custom Object Type to do it), though with &quot;inventoryverbs&quot; instead of &quot;displayverbs&quot;:\n\n( also, this is an older version of quest, so you'll have to replace the, type=&quot;list&quot;, to, type=&quot;simplestringlist&quot; )\n\n[code:13z142jc]  &lt;!-- Object types --&gt;\n\n  &lt;type name=&quot;spell&quot;&gt;\n    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;\n    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;\n    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;\n    &lt;take type=&quot;boolean&quot;&gt;false&lt;/take&gt;\n    &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;\n    &lt;learn type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n      if (not this&#46;parent = player) {\n        this&#46;parent = player\n        this&#46;inventoryverbs = Split (&quot;Cast&quot;, &quot; &quot;)\n        msg (DynamicTemplate(&quot;SpellLearnt&quot;, this))\n      }\n      else {\n        msg (&quot;&#91;SpellAlreadyKnown&#93;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/learn&gt;\n  &lt;/type&gt;[/code:13z142jc]\n\n[code:13z142jc]&lt;?xml version=&quot;1&#46;0&quot;?&gt;\n&lt;library&gt;\n\n\n  &lt;!--\n  This library adds a basic magic system to quest&#46; It allows for three types of spells&#58;\n\n  nonattackspell&#58; Instant effect\n  lastingspell&#58; An on-going spell&#46; These last until another spell is cast\n  attackspell&#58; Instant effect, attacking anything of the &quot;monster&quot; type that is not dead\n\n  Attack spells must be of an element, and eight are already set up&#46; Monsters\n  can be assigned to elements too; they will be immune to that element, but take\n  four-fold damage from the opposed element&#46;\n\n  A &quot;Magic&quot; tab is added to the editor to make setting up spells and monsters as easy as possible&#46;\n  --&gt;\n\n  &lt;!--\n  Adding new elements involves a bit of effort&#46; This system requires that elements are added in pairs or opposites,\n  such as fire and frost&#46;\n  1&#46; Create a new type for both elements, named &#91;elemem&#93;_type\n  2&#46; In the data section, the object element_struct needs both elements added to both &quot;elements&quot; and\n      &quot;opposedelements&quot;, and for the latter you need to put them in both ways around (look at existing entries)\n  3&#46; You need to add both elements to the tab, both for &quot;monster&quot; and for &quot;attackspell&quot;&#46; Again, see existing\n      entries&#46;\n  --&gt;\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Templates --&gt;\n\n  &lt;!--\n  Using templates makes it easier to convert to other languages, but also for other users to word it how they want it&#46;\n  When templates are in the library that uses them (as here) the way to change the language is to\n  modify the template in the library, so really the only benefit is that all the text is together here&#46;\n  Also modify the default responses in the verbs!\n  --&gt;\n\n  &lt;template name=&quot;Learn&quot;&gt;learn&lt;/template&gt;\n  &lt;template name=&quot;Cast&quot;&gt;cast&lt;/template&gt;\n\n  &lt;template name=&quot;LookDead&quot;&gt;Oh, and it is dead&#46;&lt;/template&gt;\n  &lt;template name=&quot;SpellAlreadyKnown&quot;&gt;Er, you already know that one!&lt;/template&gt;\n  &lt;template name=&quot;SpellNotKnown&quot;&gt;Er, you don't know that one!&lt;/template&gt;\n  &lt;template name=&quot;NoMonstersPresent&quot;&gt;No monsters present&lt;/template&gt;\n\n  &lt;dynamictemplate name=&quot;SpellEnds&quot;&gt;&lt;!&#91;CDATA&#91;&quot;The &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt; spell ends&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=&quot;SpellCast&quot;&gt;&lt;!&#91;CDATA&#91;&quot;You cast &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt;&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=&quot;SpellLearnt&quot;&gt;&lt;!&#91;CDATA&#91;&quot;In a process that seems at once unfathomable, and yet familiar, the spell fades away, and you realise you are now able to cast the &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt; spell&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;\n\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Verbs --&gt;\n\n  &lt;verb&gt;\n    &lt;property&gt;learn&lt;/property&gt;\n    &lt;pattern&gt;&#91;Learn&#93;&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't learn &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;cast&lt;/property&gt;\n    &lt;pattern&gt;&#91;Cast&#93;&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't cast &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Functions --&gt;\n\n  &lt;!--\n  Handles an attack on the given monster, using the given spell&#46;\n  Monster loses hit points according to the spell's powerrating&#46;\n  If they share an element, then no damage, if elements are opposed, damage is multplied by 4\n  Handles monsters with no elements too, but spell must have an element set&#46;\n  --&gt;\n  &lt;function name=&quot;SpellAttackMonster&quot; parameters=&quot;monster, spell&quot;&gt;&lt;!&#91;CDATA&#91;\n    element = GetElement (monster)\n    handled = False\n    if (not element = Null) {\n      if (DoesInherit (spell, element + &quot;_type&quot;)) {\n        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;ignoreselement)\n        handled = True\n      }\n      if (DoesInherit (spell, StringDictionaryItem (element_struct&#46;opposedelements, element) + &quot;_type&quot;)) {\n        monster&#46;hitpoints = monster&#46;hitpoints -  4 * spell&#46;powerrating\n        handled = True\n        if (monster&#46;hitpoints &gt; 0) {\n          msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;hurtbyelement)\n        }\n        else {\n          msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;deathbyelement)\n          Death (monster)\n        }\n      }\n    }\n\n    if (not handled) {\n      monster&#46;hitpoints = monster&#46;hitpoints -  spell&#46;powerrating\n      if (monster&#46;hitpoints &gt; 0) {\n        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;hurt)\n      }\n      else {\n        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;death)\n        Death (monster)\n      }\n    }\n  &#93;&#93;&gt;&lt;/function&gt;\n\n\n  &lt;!--\n  Call this when a spell is cast, to ensure any on-going spells\n  are terminated&#46;\n  --&gt;\n  &lt;function name=&quot;CancelSpell&quot;&gt;&lt;!&#91;CDATA&#91;\n    if (HasObject (player, &quot;currentspell&quot;)) {\n      spell = player&#46;currentspell\n      msg (DynamicTemplate(&quot;SpellEnds&quot;, spell))\n      player&#46;currentspell = null\n      if (HasScript (spell, &quot;terminate&quot;)) {\n        do (spell, &quot;terminate&quot;)\n      }\n    }\n  &#93;&#93;&gt;&lt;/function&gt;\n\n\n  &lt;!--\n  Call this when a monster dies for some housekeeping&#46;\n  --&gt;\n  &lt;function name=&quot;Death&quot; parameters=&quot;monster&quot;&gt;&lt;!&#91;CDATA&#91;\n    monster&#46;alias = monster&#46;alias + &quot; (dead)&quot;\n    if (HasString (monster, &quot;lookwhendead&quot;)) {\n      monster&#46;look = monster&#46;lookwhendead\n    }\n    else {\n      monster&#46;look = monster&#46;look + &quot; &#91;LookDead&#93;&quot;\n    }\n    monster&#46;dead = True\n  &#93;&#93;&gt;&lt;/function&gt;\n\n\n  &lt;!--\n  Returns as a string the name of this object's element (or null)&#46;\n  --&gt;\n  &lt;function name=&quot;GetElement&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;\n    result = Null\n    foreach (element, element_struct&#46;elements) {\n     type = element + &quot;_type&quot;\n      if (DoesInherit (obj, type)) {\n        result = element\n      }\n    }\n    return (result)\n  &#93;&#93;&gt;&lt;/function&gt;\n\n\n  &lt;!--\n  Describes casting\n  --&gt;\n  &lt;function name=&quot;DescribeCast&quot; parameters=&quot;spell&quot;&gt;&lt;!&#91;CDATA&#91;\n        if (HasString (spell, &quot;description&quot;)) {\n          msg (DynamicTemplate(&quot;SpellCast&quot;, spell) + &quot; &quot; + spell&#46;description)\n        }\n        else {\n          msg (DynamicTemplate(&quot;SpellCast&quot;, spell))\n        }\n  &#93;&#93;&gt;&lt;/function&gt;\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Object types --&gt;\n\n  &lt;type name=&quot;spell&quot;&gt;\n    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;\n    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;\n    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;\n    &lt;take type=&quot;boolean&quot;&gt;false&lt;/take&gt;\n    &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;\n    &lt;learn type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n      if (not this&#46;parent = player) {\n        this&#46;parent = player\n        this&#46;inventoryverbs = Split (&quot;Cast&quot;, &quot; &quot;)\n        msg (DynamicTemplate(&quot;SpellLearnt&quot;, this))\n      }\n      else {\n        msg (&quot;&#91;SpellAlreadyKnown&#93;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/learn&gt;\n  &lt;/type&gt;\n\n\n\n  &lt;type name=&quot;attackspell&quot;&gt;\n    &lt;inherit name=&quot;spell&quot;/&gt;\n    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n      // Check the player has the spell\n      // If so iterate through all objects in the room\n      // Apply attack to those with the monster type that are not dead\n      if (this&#46;parent = player) {\n        DescribeCast (this)\n        flag = False\n        foreach (obj, ScopeVisibleNotHeld ()) {\n          if (DoesInherit (obj, &quot;monster&quot;) and not GetBoolean (obj, &quot;dead&quot;)) {\n            SpellAttackMonster (obj, this)\n            flag = True\n          }\n        }\n        if (not flag) {\n          msg (&quot;&#46;&#46;&#46; &#91;NoMonstersPresent&#93;&quot;)\n        }\n        CancelSpell ()\n      }\n      else {\n        msg (&quot;&#91;SpellNotKnown&#93;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/cast&gt;\n  &lt;/type&gt;\n\n\n  &lt;type name=&quot;nonattackspell&quot;&gt;\n    &lt;inherit name=&quot;spell&quot;/&gt;\n    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n      if (this&#46;parent = player) {\n        DescribeCast (this)\n        do (this, &quot;spelleffect&quot;)\n        CancelSpell ()\n      }\n      else {\n        msg (&quot;&#91;SpellNotKnown&#93;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/cast&gt;\n  &lt;/type&gt;\n\n\n  &lt;type name=&quot;lastingspell&quot;&gt;\n    &lt;inherit name=&quot;spell&quot;/&gt;\n    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n      if (this&#46;parent = player) {\n        DescribeCast (this)\n        do (this, &quot;spelleffect&quot;)\n        CancelSpell ()\n        player&#46;currentspell = this\n        player&#46;status = this&#46;status\n      }\n      else {\n        msg (&quot;&#91;SpellNotKnown&#93;&quot;)\n      }\n    &#93;&#93;&gt;&lt;/cast&gt;\n  &lt;/type&gt;\n\n\n  &lt;type name=&quot;fire_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;frost_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;storm_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;earthmight_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;shadow_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;rainbow_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;divine_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;necrotic_type&quot;&gt;\n  &lt;/type&gt;\n\n  &lt;type name=&quot;monster&quot;&gt;\n  &lt;/type&gt;\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Data --&gt;\n\n  &lt;!--\n  This is a data store for elements (I call it a &quot;struct&quot; after the keyword in the C programming language)\n  If you add more elements to the name, you need to add them to both lists as well as creating a new type&#46;\n  Note that your new type must end &quot;_type&quot;, but that must not be included on these lists&#46;\n  --&gt;\n  &lt;object name=&quot;element_struct&quot;&gt;\n    &lt;elements type=&quot;list&quot;&gt;fire; frost; storm; earthmight; shadow; rainbow; divine; necrotic&lt;/elements&gt;\n    &lt;opposedelements type=&quot;stringdictionary&quot;&gt;fire = frost;frost = fire;storm = earthmight;earthmight = storm;shadow = rainbow;rainbow = shadow;necrotic = divine;divine=necrotic&lt;/opposedelements&gt;\n  &lt;/object&gt;\n\n\n  &lt;!-- =================================================== --&gt;\n  &lt;!-- Tabs --&gt;\n\n  &lt;tab&gt;\n    &lt;parent&gt;_ObjectEditor&lt;/parent&gt;\n    &lt;caption&gt;Magic&lt;/caption&gt;\n    &lt;mustnotinherit&gt;editor_room; defaultplayer&lt;/mustnotinherit&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;\n      &lt;caption&gt;Spell type&lt;/caption&gt;\n      &lt;types&gt;*=None; nonattackspell=Non-attack spell; lastingspell=Lasting spell; attackspell=Attack spell; monster=Monster&lt;/types&gt;\n      &lt;width&gt;150&lt;/width&gt;\n    &lt;/control&gt;\n\n\n\n    &lt;control&gt;\n      &lt;controltype&gt;title&lt;/controltype&gt;\n      &lt;caption&gt;Non-Attack Spell&lt;/caption&gt;\n      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description (optional)&lt;/caption&gt;\n      &lt;attribute&gt;description&lt;/attribute&gt;\n      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;script&lt;/controltype&gt;\n      &lt;caption&gt;Spell effect&lt;/caption&gt;\n      &lt;attribute&gt;spelleffect&lt;/attribute&gt;\n      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n\n\n    &lt;control&gt;\n      &lt;controltype&gt;title&lt;/controltype&gt;\n      &lt;caption&gt;Lasting Spell&lt;/caption&gt;\n      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description (optional)&lt;/caption&gt;\n      &lt;attribute&gt;description&lt;/attribute&gt;\n      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Status when active&lt;/caption&gt;\n      &lt;attribute&gt;status&lt;/attribute&gt;\n      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;script&lt;/controltype&gt;\n      &lt;caption&gt;Spell effect&lt;/caption&gt;\n      &lt;attribute&gt;spelleffect&lt;/attribute&gt;\n      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;script&lt;/controltype&gt;\n      &lt;caption&gt;Cacel spell effect&lt;/caption&gt;\n      &lt;attribute&gt;terminate&lt;/attribute&gt;\n      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n\n\n    &lt;control&gt;\n      &lt;controltype&gt;title&lt;/controltype&gt;\n      &lt;caption&gt;Attack Spell&lt;/caption&gt;\n      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Power of attack (1-10)&lt;/caption&gt;\n      &lt;attribute&gt;powerrating&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;\n      &lt;minimum&gt;0&lt;/minimum&gt;\n      &lt;maximum&gt;10&lt;/maximum&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description (optional)&lt;/caption&gt;\n      &lt;attribute&gt;description&lt;/attribute&gt;\n      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;\n      &lt;caption&gt;Element&lt;/caption&gt;\n      &lt;types&gt;*=None; fire_type=Fire; frost_type=Frost; storm_type=Storm; earthmight_type=Earthmight; shadow_type=Shadow; rainbow_type=Rainbow; necrotic_type=Necrotic; divine_type=Divine&lt;/types&gt;\n      &lt;width&gt;150&lt;/width&gt;\n      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n\n\n    &lt;control&gt;\n      &lt;controltype&gt;title&lt;/controltype&gt;\n      &lt;caption&gt;Monster&lt;/caption&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;\n      &lt;caption&gt;Element&lt;/caption&gt;\n      &lt;types&gt;*=None; fire_type=Fire; frost_type=Frost; storm_type=Storm; earthmight_type=Earthmight; shadow_type=Shadow; rainbow_type=Rainbow; necrotic_type=Necrotic; divine_type=Divine&lt;/types&gt;\n      &lt;width&gt;150&lt;/width&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;number&lt;/controltype&gt;\n      &lt;caption&gt;Hit points&lt;/caption&gt;\n      &lt;attribute&gt;hitpoints&lt;/attribute&gt;\n      &lt;width&gt;100&lt;/width&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n      &lt;minimum&gt;0&lt;/minimum&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description on injury&lt;/caption&gt;\n      &lt;attribute&gt;hurt&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description on death&lt;/caption&gt;\n      &lt;attribute&gt;death&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description on injury by opposed element&lt;/caption&gt;\n      &lt;attribute&gt;hurtbyelement&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description on death by opposed element&lt;/caption&gt;\n      &lt;attribute&gt;deathbyelement&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Description on ignore&lt;/caption&gt;\n      &lt;attribute&gt;ignoreselement&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n    &lt;control&gt;\n      &lt;controltype&gt;textbox&lt;/controltype&gt;\n      &lt;caption&gt;Look (when dead)&lt;/caption&gt;\n      &lt;attribute&gt;lookwhendead&lt;/attribute&gt;\n      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;\n    &lt;/control&gt;\n\n  &lt;/tab&gt;\n&lt;/library&gt;[/code:13z142jc]",
      "EditableFormat": "bbcode",
      "HTML": "I think you can override this, if you override the inherited &quot;displayverbs&quot; Attribute:<br/><br/>the inherited &quot;(I presume, as I haven't looked it up, it's) editor_object&quot; Object Type provides the &quot;displayverbs&quot; special built-in String List to that Object, so you need to override this, by adding the &quot;displayverbs&quot; yourself to that Object:<br/><br/>(and you also may need to change the settings in the GUI~Editor, as it has setting options that deals with the &quot;displayverbs&quot;)<br/><br/>In-Code:<br/><br/>&lt;object name=&quot;???&quot;&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;attr name=&quot;displayverbs&quot; type=&quot;simplestringlist&quot;&gt;Look at; Drop; Take; etc&lt;/attr&gt; // hopefully, this will override the &quot;displayverbs&quot; Attribute from the inherited trait, hopefully allowing your ' list add ' scripting to now work...<br/>&lt;/object&gt;<br/><br/>In GUI~Editor:<br/><br/>(I'm not sure if this will work, or if this is how it's done)<br/><br/>&quot;???&quot; Object -&gt; Attributes (Tab) -&gt; Attributes -&gt; Add -&gt;<br/><br/>Attribute Name: displayverbs<br/>Attribute Type: stringlist<br/>Attribute Value: Look at;Take;Drop;etc<br/><br/>-----<br/><br/>and now within a scripting:<br/><br/>hopefully the ' list add (this.displayverbs, &quot;ask&quot;) ', will now work.<br/><br/>or, you could also try to just re-set the &quot;displayverbs&quot; Attribute too:<br/><br/>this.displayverbs = split (&quot;Look at;Take;Drop;etc;Ask&quot;,&quot;;&quot;)<br/><br/>-----<br/><br/>otherwise, make the copy as George shown.<br/><br/>-----<br/><br/>P.S.<br/><br/>within the Object, you can add extra verbs into the displayverbs via:<br/><br/>&lt;object name=&quot;???&quot;&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;attr name=&quot;displayverbs&quot; type=&quot;listextend&quot;&gt;Ask&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>what the &quot;listextend&quot; does is to add the verb to the list (and thus not re-creating~resetting the list):<br/><br/>Look at;Take;Drop;etc (original~old~initial~starting &quot;displayverbs&quot; list) + Ask (from &quot;listextend&quot;) = Look at;Take;Drop;etc;Ask<br/><br/>but, this doesn't help you in what you asked for in how to add a verb after an action~event happens (ie adding a verb via scripting), as your Object will start with this verb already, which is what you don't want.<br/><br/>-------------<br/><br/>Pixie in his~her Spell Library does this (except he~she creates a custom Object Type to do it), though with &quot;inventoryverbs&quot; instead of &quot;displayverbs&quot;:<br/><br/>( also, this is an older version of quest, so you'll have to replace the, type=&quot;list&quot;, to, type=&quot;simplestringlist&quot; )<br/><br/><pre><code>  &lt;!-- Object types --&gt;<br/><br/>  &lt;type name=&quot;spell&quot;&gt;<br/>    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;<br/>    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;<br/>    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;<br/>    &lt;take type=&quot;boolean&quot;&gt;false&lt;/take&gt;<br/>    &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;<br/>    &lt;learn type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      if (not this&#46;parent = player) {<br/>        this&#46;parent = player<br/>        this&#46;inventoryverbs = Split (&quot;Cast&quot;, &quot; &quot;)<br/>        msg (DynamicTemplate(&quot;SpellLearnt&quot;, this))<br/>      }<br/>      else {<br/>        msg (&quot;&#91;SpellAlreadyKnown&#93;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/learn&gt;<br/>  &lt;/type&gt;</code></pre><br/><br/><pre><code>&lt;?xml version=&quot;1&#46;0&quot;?&gt;<br/>&lt;library&gt;<br/><br/><br/>  &lt;!--<br/>  This library adds a basic magic system to quest&#46; It allows for three types of spells&#58;<br/><br/>  nonattackspell&#58; Instant effect<br/>  lastingspell&#58; An on-going spell&#46; These last until another spell is cast<br/>  attackspell&#58; Instant effect, attacking anything of the &quot;monster&quot; type that is not dead<br/><br/>  Attack spells must be of an element, and eight are already set up&#46; Monsters<br/>  can be assigned to elements too; they will be immune to that element, but take<br/>  four-fold damage from the opposed element&#46;<br/><br/>  A &quot;Magic&quot; tab is added to the editor to make setting up spells and monsters as easy as possible&#46;<br/>  --&gt;<br/><br/>  &lt;!--<br/>  Adding new elements involves a bit of effort&#46; This system requires that elements are added in pairs or opposites,<br/>  such as fire and frost&#46;<br/>  1&#46; Create a new type for both elements, named &#91;elemem&#93;_type<br/>  2&#46; In the data section, the object element_struct needs both elements added to both &quot;elements&quot; and<br/>      &quot;opposedelements&quot;, and for the latter you need to put them in both ways around (look at existing entries)<br/>  3&#46; You need to add both elements to the tab, both for &quot;monster&quot; and for &quot;attackspell&quot;&#46; Again, see existing<br/>      entries&#46;<br/>  --&gt;<br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Templates --&gt;<br/><br/>  &lt;!--<br/>  Using templates makes it easier to convert to other languages, but also for other users to word it how they want it&#46;<br/>  When templates are in the library that uses them (as here) the way to change the language is to<br/>  modify the template in the library, so really the only benefit is that all the text is together here&#46;<br/>  Also modify the default responses in the verbs!<br/>  --&gt;<br/><br/>  &lt;template name=&quot;Learn&quot;&gt;learn&lt;/template&gt;<br/>  &lt;template name=&quot;Cast&quot;&gt;cast&lt;/template&gt;<br/><br/>  &lt;template name=&quot;LookDead&quot;&gt;Oh, and it is dead&#46;&lt;/template&gt;<br/>  &lt;template name=&quot;SpellAlreadyKnown&quot;&gt;Er, you already know that one!&lt;/template&gt;<br/>  &lt;template name=&quot;SpellNotKnown&quot;&gt;Er, you don't know that one!&lt;/template&gt;<br/>  &lt;template name=&quot;NoMonstersPresent&quot;&gt;No monsters present&lt;/template&gt;<br/><br/>  &lt;dynamictemplate name=&quot;SpellEnds&quot;&gt;&lt;!&#91;CDATA&#91;&quot;The &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt; spell ends&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;<br/>  &lt;dynamictemplate name=&quot;SpellCast&quot;&gt;&lt;!&#91;CDATA&#91;&quot;You cast &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt;&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;<br/>  &lt;dynamictemplate name=&quot;SpellLearnt&quot;&gt;&lt;!&#91;CDATA&#91;&quot;In a process that seems at once unfathomable, and yet familiar, the spell fades away, and you realise you are now able to cast the &lt;i&gt;&quot; + GetDisplayAlias(object) + &quot;&lt;/i&gt; spell&#46;&quot;&#93;&#93;&gt;&lt;/dynamictemplate&gt;<br/><br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Verbs --&gt;<br/><br/>  &lt;verb&gt;<br/>    &lt;property&gt;learn&lt;/property&gt;<br/>    &lt;pattern&gt;&#91;Learn&#93;&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't learn &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  &lt;verb&gt;<br/>    &lt;property&gt;cast&lt;/property&gt;<br/>    &lt;pattern&gt;&#91;Cast&#93;&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't cast &quot; + object&#46;article + &quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Functions --&gt;<br/><br/>  &lt;!--<br/>  Handles an attack on the given monster, using the given spell&#46;<br/>  Monster loses hit points according to the spell's powerrating&#46;<br/>  If they share an element, then no damage, if elements are opposed, damage is multplied by 4<br/>  Handles monsters with no elements too, but spell must have an element set&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;SpellAttackMonster&quot; parameters=&quot;monster, spell&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    element = GetElement (monster)<br/>    handled = False<br/>    if (not element = Null) {<br/>      if (DoesInherit (spell, element + &quot;_type&quot;)) {<br/>        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;ignoreselement)<br/>        handled = True<br/>      }<br/>      if (DoesInherit (spell, StringDictionaryItem (element_struct&#46;opposedelements, element) + &quot;_type&quot;)) {<br/>        monster&#46;hitpoints = monster&#46;hitpoints -  4 * spell&#46;powerrating<br/>        handled = True<br/>        if (monster&#46;hitpoints &gt; 0) {<br/>          msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;hurtbyelement)<br/>        }<br/>        else {<br/>          msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;deathbyelement)<br/>          Death (monster)<br/>        }<br/>      }<br/>    }<br/><br/>    if (not handled) {<br/>      monster&#46;hitpoints = monster&#46;hitpoints -  spell&#46;powerrating<br/>      if (monster&#46;hitpoints &gt; 0) {<br/>        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;hurt)<br/>      }<br/>      else {<br/>        msg (&quot;&#46;&#46;&#46; &quot; + monster&#46;death)<br/>        Death (monster)<br/>      }<br/>    }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/><br/>  &lt;!--<br/>  Call this when a spell is cast, to ensure any on-going spells<br/>  are terminated&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;CancelSpell&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    if (HasObject (player, &quot;currentspell&quot;)) {<br/>      spell = player&#46;currentspell<br/>      msg (DynamicTemplate(&quot;SpellEnds&quot;, spell))<br/>      player&#46;currentspell = null<br/>      if (HasScript (spell, &quot;terminate&quot;)) {<br/>        do (spell, &quot;terminate&quot;)<br/>      }<br/>    }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/><br/>  &lt;!--<br/>  Call this when a monster dies for some housekeeping&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;Death&quot; parameters=&quot;monster&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    monster&#46;alias = monster&#46;alias + &quot; (dead)&quot;<br/>    if (HasString (monster, &quot;lookwhendead&quot;)) {<br/>      monster&#46;look = monster&#46;lookwhendead<br/>    }<br/>    else {<br/>      monster&#46;look = monster&#46;look + &quot; &#91;LookDead&#93;&quot;<br/>    }<br/>    monster&#46;dead = True<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/><br/>  &lt;!--<br/>  Returns as a string the name of this object's element (or null)&#46;<br/>  --&gt;<br/>  &lt;function name=&quot;GetElement&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    result = Null<br/>    foreach (element, element_struct&#46;elements) {<br/>     type = element + &quot;_type&quot;<br/>      if (DoesInherit (obj, type)) {<br/>        result = element<br/>      }<br/>    }<br/>    return (result)<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/><br/>  &lt;!--<br/>  Describes casting<br/>  --&gt;<br/>  &lt;function name=&quot;DescribeCast&quot; parameters=&quot;spell&quot;&gt;&lt;!&#91;CDATA&#91;<br/>        if (HasString (spell, &quot;description&quot;)) {<br/>          msg (DynamicTemplate(&quot;SpellCast&quot;, spell) + &quot; &quot; + spell&#46;description)<br/>        }<br/>        else {<br/>          msg (DynamicTemplate(&quot;SpellCast&quot;, spell))<br/>        }<br/>  &#93;&#93;&gt;&lt;/function&gt;<br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Object types --&gt;<br/><br/>  &lt;type name=&quot;spell&quot;&gt;<br/>    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;<br/>    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;<br/>    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;<br/>    &lt;take type=&quot;boolean&quot;&gt;false&lt;/take&gt;<br/>    &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;<br/>    &lt;learn type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      if (not this&#46;parent = player) {<br/>        this&#46;parent = player<br/>        this&#46;inventoryverbs = Split (&quot;Cast&quot;, &quot; &quot;)<br/>        msg (DynamicTemplate(&quot;SpellLearnt&quot;, this))<br/>      }<br/>      else {<br/>        msg (&quot;&#91;SpellAlreadyKnown&#93;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/learn&gt;<br/>  &lt;/type&gt;<br/><br/><br/><br/>  &lt;type name=&quot;attackspell&quot;&gt;<br/>    &lt;inherit name=&quot;spell&quot;/&gt;<br/>    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      // Check the player has the spell<br/>      // If so iterate through all objects in the room<br/>      // Apply attack to those with the monster type that are not dead<br/>      if (this&#46;parent = player) {<br/>        DescribeCast (this)<br/>        flag = False<br/>        foreach (obj, ScopeVisibleNotHeld ()) {<br/>          if (DoesInherit (obj, &quot;monster&quot;) and not GetBoolean (obj, &quot;dead&quot;)) {<br/>            SpellAttackMonster (obj, this)<br/>            flag = True<br/>          }<br/>        }<br/>        if (not flag) {<br/>          msg (&quot;&#46;&#46;&#46; &#91;NoMonstersPresent&#93;&quot;)<br/>        }<br/>        CancelSpell ()<br/>      }<br/>      else {<br/>        msg (&quot;&#91;SpellNotKnown&#93;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/cast&gt;<br/>  &lt;/type&gt;<br/><br/><br/>  &lt;type name=&quot;nonattackspell&quot;&gt;<br/>    &lt;inherit name=&quot;spell&quot;/&gt;<br/>    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      if (this&#46;parent = player) {<br/>        DescribeCast (this)<br/>        do (this, &quot;spelleffect&quot;)<br/>        CancelSpell ()<br/>      }<br/>      else {<br/>        msg (&quot;&#91;SpellNotKnown&#93;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/cast&gt;<br/>  &lt;/type&gt;<br/><br/><br/>  &lt;type name=&quot;lastingspell&quot;&gt;<br/>    &lt;inherit name=&quot;spell&quot;/&gt;<br/>    &lt;cast type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>      if (this&#46;parent = player) {<br/>        DescribeCast (this)<br/>        do (this, &quot;spelleffect&quot;)<br/>        CancelSpell ()<br/>        player&#46;currentspell = this<br/>        player&#46;status = this&#46;status<br/>      }<br/>      else {<br/>        msg (&quot;&#91;SpellNotKnown&#93;&quot;)<br/>      }<br/>    &#93;&#93;&gt;&lt;/cast&gt;<br/>  &lt;/type&gt;<br/><br/><br/>  &lt;type name=&quot;fire_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;frost_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;storm_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;earthmight_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;shadow_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;rainbow_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;divine_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;necrotic_type&quot;&gt;<br/>  &lt;/type&gt;<br/><br/>  &lt;type name=&quot;monster&quot;&gt;<br/>  &lt;/type&gt;<br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Data --&gt;<br/><br/>  &lt;!--<br/>  This is a data store for elements (I call it a &quot;struct&quot; after the keyword in the C programming language)<br/>  If you add more elements to the name, you need to add them to both lists as well as creating a new type&#46;<br/>  Note that your new type must end &quot;_type&quot;, but that must not be included on these lists&#46;<br/>  --&gt;<br/>  &lt;object name=&quot;element_struct&quot;&gt;<br/>    &lt;elements type=&quot;list&quot;&gt;fire; frost; storm; earthmight; shadow; rainbow; divine; necrotic&lt;/elements&gt;<br/>    &lt;opposedelements type=&quot;stringdictionary&quot;&gt;fire = frost;frost = fire;storm = earthmight;earthmight = storm;shadow = rainbow;rainbow = shadow;necrotic = divine;divine=necrotic&lt;/opposedelements&gt;<br/>  &lt;/object&gt;<br/><br/><br/>  &lt;!-- =================================================== --&gt;<br/>  &lt;!-- Tabs --&gt;<br/><br/>  &lt;tab&gt;<br/>    &lt;parent&gt;_ObjectEditor&lt;/parent&gt;<br/>    &lt;caption&gt;Magic&lt;/caption&gt;<br/>    &lt;mustnotinherit&gt;editor_room; defaultplayer&lt;/mustnotinherit&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;<br/>      &lt;caption&gt;Spell type&lt;/caption&gt;<br/>      &lt;types&gt;*=None; nonattackspell=Non-attack spell; lastingspell=Lasting spell; attackspell=Attack spell; monster=Monster&lt;/types&gt;<br/>      &lt;width&gt;150&lt;/width&gt;<br/>    &lt;/control&gt;<br/><br/><br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;title&lt;/controltype&gt;<br/>      &lt;caption&gt;Non-Attack Spell&lt;/caption&gt;<br/>      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description (optional)&lt;/caption&gt;<br/>      &lt;attribute&gt;description&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;script&lt;/controltype&gt;<br/>      &lt;caption&gt;Spell effect&lt;/caption&gt;<br/>      &lt;attribute&gt;spelleffect&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;nonattackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/><br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;title&lt;/controltype&gt;<br/>      &lt;caption&gt;Lasting Spell&lt;/caption&gt;<br/>      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description (optional)&lt;/caption&gt;<br/>      &lt;attribute&gt;description&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Status when active&lt;/caption&gt;<br/>      &lt;attribute&gt;status&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;script&lt;/controltype&gt;<br/>      &lt;caption&gt;Spell effect&lt;/caption&gt;<br/>      &lt;attribute&gt;spelleffect&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;script&lt;/controltype&gt;<br/>      &lt;caption&gt;Cacel spell effect&lt;/caption&gt;<br/>      &lt;attribute&gt;terminate&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;lastingspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/><br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;title&lt;/controltype&gt;<br/>      &lt;caption&gt;Attack Spell&lt;/caption&gt;<br/>      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;number&lt;/controltype&gt;<br/>      &lt;caption&gt;Power of attack (1-10)&lt;/caption&gt;<br/>      &lt;attribute&gt;powerrating&lt;/attribute&gt;<br/>      &lt;width&gt;100&lt;/width&gt;<br/>      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;<br/>      &lt;minimum&gt;0&lt;/minimum&gt;<br/>      &lt;maximum&gt;10&lt;/maximum&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description (optional)&lt;/caption&gt;<br/>      &lt;attribute&gt;description&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;<br/>      &lt;caption&gt;Element&lt;/caption&gt;<br/>      &lt;types&gt;*=None; fire_type=Fire; frost_type=Frost; storm_type=Storm; earthmight_type=Earthmight; shadow_type=Shadow; rainbow_type=Rainbow; necrotic_type=Necrotic; divine_type=Divine&lt;/types&gt;<br/>      &lt;width&gt;150&lt;/width&gt;<br/>      &lt;mustinherit&gt;attackspell&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/><br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;title&lt;/controltype&gt;<br/>      &lt;caption&gt;Monster&lt;/caption&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;dropdowntypes&lt;/controltype&gt;<br/>      &lt;caption&gt;Element&lt;/caption&gt;<br/>      &lt;types&gt;*=None; fire_type=Fire; frost_type=Frost; storm_type=Storm; earthmight_type=Earthmight; shadow_type=Shadow; rainbow_type=Rainbow; necrotic_type=Necrotic; divine_type=Divine&lt;/types&gt;<br/>      &lt;width&gt;150&lt;/width&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;number&lt;/controltype&gt;<br/>      &lt;caption&gt;Hit points&lt;/caption&gt;<br/>      &lt;attribute&gt;hitpoints&lt;/attribute&gt;<br/>      &lt;width&gt;100&lt;/width&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>      &lt;minimum&gt;0&lt;/minimum&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description on injury&lt;/caption&gt;<br/>      &lt;attribute&gt;hurt&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description on death&lt;/caption&gt;<br/>      &lt;attribute&gt;death&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description on injury by opposed element&lt;/caption&gt;<br/>      &lt;attribute&gt;hurtbyelement&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description on death by opposed element&lt;/caption&gt;<br/>      &lt;attribute&gt;deathbyelement&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Description on ignore&lt;/caption&gt;<br/>      &lt;attribute&gt;ignoreselement&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>    &lt;control&gt;<br/>      &lt;controltype&gt;textbox&lt;/controltype&gt;<br/>      &lt;caption&gt;Look (when dead)&lt;/caption&gt;<br/>      &lt;attribute&gt;lookwhendead&lt;/attribute&gt;<br/>      &lt;mustinherit&gt;monster&lt;/mustinherit&gt;<br/>    &lt;/control&gt;<br/><br/>  &lt;/tab&gt;<br/>&lt;/library&gt;</code></pre>",
      "PostDate": "2014-02-01T22:17:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27719",
      "UserId": 0,
      "Username": "ELGAROU",
      "UserAvatar": null,
      "UserGravatar": "d0be55de9c3b37737eb8347827da42b9",
      "EditableText": "So finally it works, I cloned object.displayverb then just used the &quot;add value to a list&quot; script and using the same name of the verb in plain text, but it called the script anyway. \n \n\nObject.displayverbs = Object.displayverbs\nfirsttime {\n  list add (Object.displayverbs, &quot;ask&quot;)\n}\n\nThanks for the help.",
      "EditableFormat": "bbcode",
      "HTML": "So finally it works, I cloned object.displayverb then just used the &quot;add value to a list&quot; script and using the same name of the verb in plain text, but it called the script anyway. <br/> <br/><br/>Object.displayverbs = Object.displayverbs<br/>firsttime {<br/>  list add (Object.displayverbs, &quot;ask&quot;)<br/>}<br/><br/>Thanks for the help.",
      "PostDate": "2014-02-01T22:44:31+00:00",
      "LastEditDate": null
    }
  ]
}
