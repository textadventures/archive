{
  "Topic": {
    "TopicId": "eaojqvuxy0yh0htt9j-u_w",
    "ForumId": "10",
    "Title": "King of bodges",
    "LastUpdated": "2017-09-01T11:40:02.2243726Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a9cb1c5e-e7ad-417b-bfb6-aac3d40fa8f6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've decided I don't like some of the code in CoreParser.aslx; so, I started writing my own version. Just a couple of functions. The problem is that on the web editor I can't override the default ones (and my computer won't handle the offline editor).\r\n\r\nSo, I think I see a way around this. I create a command with the pattern ```#text#```. This command simply passes its parameter to my own version of HandleSingleCommand(). But that'll not be triggered for the builtin commands like 'look', 'use', etc.\r\nSo I stick in an initialisation script that loops over AllCommands(), finds the ones that would benefit from my mod_HandleSingleCommand(), and changes their parent to a room somewhere out of the way. So now my mod_HandleSingleCommand() just needs to do what the default one does, but looking in an additional location for global commands.\r\n\r\nI am aware that this is a horrible, horrible bodge; one workaround built on another to let me mess around with the parser. But just in case anyone's played around with this stuff before… are there any gotchas I need to look out for?\r\nAnd is there an easier way to do this\r\n\r\n\r\n(If you're curious, the real aim of this is to mangle GetScope(), so that the disambiguation menus aren't cluttered with irrelevant junk. My ```put (?<object1>.*) in (?<object2>.*)``` command has the scope ```object1@inventory,object2:isopen``` ... I can't wait to get all the dodgy workarounds dealt with so that I can test my actual mod_GetScope())\r\n\r\n[EDIT: Realise I was being a bit dumb. Rather than moving all the commands around, I can just stick ```catchall_command.parent = game.pov.parent``` in a turn script. Would still prefer if I could override GetScope() without jumping through so many hoops. But it's actually proving quite a fun challenge]",
      "EditableFormat": "markdown",
      "HTML": "<p>I've decided I don't like some of the code in CoreParser.aslx; so, I started writing my own version. Just a couple of functions. The problem is that on the web editor I can't override the default ones (and my computer won't handle the offline editor).</p>\n<p>So, I think I see a way around this. I create a command with the pattern <code>#text#</code>. This command simply passes its parameter to my own version of HandleSingleCommand(). But that'll not be triggered for the builtin commands like 'look', 'use', etc.<br>\nSo I stick in an initialisation script that loops over AllCommands(), finds the ones that would benefit from my mod_HandleSingleCommand(), and changes their parent to a room somewhere out of the way. So now my mod_HandleSingleCommand() just needs to do what the default one does, but looking in an additional location for global commands.</p>\n<p>I am aware that this is a horrible, horrible bodge; one workaround built on another to let me mess around with the parser. But just in case anyone's played around with this stuff before… are there any gotchas I need to look out for?<br>\nAnd is there an easier way to do this</p>\n<p>(If you're curious, the real aim of this is to mangle GetScope(), so that the disambiguation menus aren't cluttered with irrelevant junk. My <code>put (?&lt;object1&gt;.*) in (?&lt;object2&gt;.*)</code> command has the scope <code>object1@inventory,object2:isopen</code> ... I can't wait to get all the dodgy workarounds dealt with so that I can test my actual mod_GetScope())</p>\n<p>[EDIT: Realise I was being a bit dumb. Rather than moving all the commands around, I can just stick <code>catchall_command.parent = game.pov.parent</code> in a turn script. Would still prefer if I could override GetScope() without jumping through so many hoops. But it's actually proving quite a fun challenge]</p>\n\n",
      "PostDate": "2017-09-01T11:40:02.2243726Z",
      "LastEditDate": "2017-09-01T13:01:32.7131738Z",
      "link": null
    },
    {
      "PostId": "a4438108-7443-4531-8fed-9883d7467fa9",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I cannot see any issues here. GetScope is a partly attempt to do what you want to do, and depending on how this goes I might look to incorporate it into Quest (i.e., it is not going to break existing games).\r\n\r\nNot being able to override functions is possibly the biggest drawback of the online editor (no Attribute tabs is a problem, but can be worked around fairly easily). I am not sure if how that can be resolved.\r\n\r\nAre you on Mac or Linux? How about building a version of Quest on there? I would love to see desktop Quest for Mac and Linux.",
      "EditableFormat": "markdown",
      "HTML": "<p>I cannot see any issues here. GetScope is a partly attempt to do what you want to do, and depending on how this goes I might look to incorporate it into Quest (i.e., it is not going to break existing games).</p>\n<p>Not being able to override functions is possibly the biggest drawback of the online editor (no Attribute tabs is a problem, but can be worked around fairly easily). I am not sure if how that can be resolved.</p>\n<p>Are you on Mac or Linux? How about building a version of Quest on there? I would love to see desktop Quest for Mac and Linux.</p>\n\n",
      "PostDate": "2017-09-01T14:04:28.458509Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c52b0b20-1030-4e72-8047-6a7b59ce53fd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm on linux at present. Tried running it under WINE, but it exits without any indication what's wrong. No idea if this is Quest, some compatibility issue, or if my WINE is broken (given that it's an out-of-the-box install, and I don't have anything else to try it with)\r\n\r\nAt this point I've got a rough function ```mod_GetScope(objtype, variable)``` thrown together. Then ```mod_ResolveNameInternal(variable, value, objtype)```, which differs only in calling mod_GetScope() and passing an extra argument to it (If there's a global variable somewhere tracking which variable we're currently looking at, I must have missed it). Then I need to make ```mod_ResolveName(variable, value, objtype)``` in order to call mod_ResolveNameInternal, and so on up the stack to ```mod_HandleSingleCommandPattern()```; which would be called by my \"catchall\" command.\r\n\r\nThat seems like an awful lot of functions to create, though most of them are a direct copy-paste from CoreParser with just one function call changed. If I had the desktop version, I could test my GetScope() while only changing one function.\r\n\r\nI was uncertain whether to change the format of the \"scope\" attribute of a command (but remain backwards-compatible), or to add a series of attributes along the lines of ```\"parameter_scope_for_\"+variable``` … if I was working on the desktop version I might have gone for the latter, and look into changing the editor forms to allow input of them. But on the web editor, I figured that adding attributes to a command isn't easy, so I'd go with the slightly uglier form.\r\n\r\n\r\n\r\nAlso wondering if it would be possible to build on this with some kind of automatic command continuation. A flag in the scope string maybe, indicating that a variable is required. So I could do ```put (?<object1>.*?) ((in|on) (?<object2>.*)?``` and maybe scope ```object1@inventory,object2?:isopen```, with a ? picked up somewhere in the parser to indicate that if object2 isn't specified, the parser will call GetScope() anyway and present the user with a list of open containers. That much is still idle speculation, though. I haven't looked into how hard that might be.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm on linux at present. Tried running it under WINE, but it exits without any indication what's wrong. No idea if this is Quest, some compatibility issue, or if my WINE is broken (given that it's an out-of-the-box install, and I don't have anything else to try it with)</p>\n<p>At this point I've got a rough function <code>mod_GetScope(objtype, variable)</code> thrown together. Then <code>mod_ResolveNameInternal(variable, value, objtype)</code>, which differs only in calling mod_GetScope() and passing an extra argument to it (If there's a global variable somewhere tracking which variable we're currently looking at, I must have missed it). Then I need to make <code>mod_ResolveName(variable, value, objtype)</code> in order to call mod_ResolveNameInternal, and so on up the stack to <code>mod_HandleSingleCommandPattern()</code>; which would be called by my \"catchall\" command.</p>\n<p>That seems like an awful lot of functions to create, though most of them are a direct copy-paste from CoreParser with just one function call changed. If I had the desktop version, I could test my GetScope() while only changing one function.</p>\n<p>I was uncertain whether to change the format of the \"scope\" attribute of a command (but remain backwards-compatible), or to add a series of attributes along the lines of <code>\"parameter_scope_for_\"+variable</code> … if I was working on the desktop version I might have gone for the latter, and look into changing the editor forms to allow input of them. But on the web editor, I figured that adding attributes to a command isn't easy, so I'd go with the slightly uglier form.</p>\n<p>Also wondering if it would be possible to build on this with some kind of automatic command continuation. A flag in the scope string maybe, indicating that a variable is required. So I could do <code>put (?&lt;object1&gt;.*?) ((in|on) (?&lt;object2&gt;.*)?</code> and maybe scope <code>object1@inventory,object2?:isopen</code>, with a ? picked up somewhere in the parser to indicate that if object2 isn't specified, the parser will call GetScope() anyway and present the user with a list of open containers. That much is still idle speculation, though. I haven't looked into how hard that might be.</p>\n\n",
      "PostDate": "2017-09-01T15:33:25.1989715Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "59c43bf5-0cdb-4b40-a508-7d2603730b7f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK ... got it mostly behaving, but unacceptably inefficient. Now working on making a cache, so that the Command's \"scope\" attribute is parsed once the first time it's used, and the results cached.\r\n\r\nAt the moment, I've got one string containing both per-variable, and whole-Command scope terms.\r\n\r\nExisting commands should work fine unless their scope contains one of the characters ```:!@/=<>,```… I seriously hope nobody's got those characters in an object or attribute name.\r\nThe \"scope\" attribute for a command now consists of a comma separated list of variables, each one followed by 'filters'. Filters may include:\r\n\r\n```:attribute``` - attribute exists and is not false, zero, or the empty string\r\n```:attribute=value``` - attribute is an int or a string\r\n```:attribute>value``` - attribute is an int\r\n```:attribute=/regex/``` - attribute is a string\r\n```/regex/``` - object name, alias, or alt matches the regex\r\n```@inventory``` - object is in the inventory (and similar for anything else that the standard Command scope could be)\r\n```@everything``` - AllObjects() - just in case you want a debugging command that correctly completes the names of objects the player can't see\r\n```@inventory+black box``` - lists items in the inventory, _and_ those in the black box\r\n```@=inventory``` - lists items directly in the inventory, not inside another container\r\n```@=room``` - items in the current room (alias for @=notheld)\r\n\r\nA set of filters without a variable name are considered to apply to all variables specified later in the list. A filter that doesn't have a symbol character in front of it assumes an ```@``` (in order to ensure compatibility with all the Core commands)\r\n\r\nIs there anything I'm missing?",
      "EditableFormat": "markdown",
      "HTML": "<p>OK ... got it mostly behaving, but unacceptably inefficient. Now working on making a cache, so that the Command's \"scope\" attribute is parsed once the first time it's used, and the results cached.</p>\n<p>At the moment, I've got one string containing both per-variable, and whole-Command scope terms.</p>\n<p>Existing commands should work fine unless their scope contains one of the characters <code>:!@/=&lt;&gt;,</code>… I seriously hope nobody's got those characters in an object or attribute name.<br>\nThe \"scope\" attribute for a command now consists of a comma separated list of variables, each one followed by 'filters'. Filters may include:</p>\n<p><code>:attribute</code> - attribute exists and is not false, zero, or the empty string<br>\n<code>:attribute=value</code> - attribute is an int or a string<br>\n<code>:attribute&gt;value</code> - attribute is an int<br>\n<code>:attribute=/regex/</code> - attribute is a string<br>\n<code>/regex/</code> - object name, alias, or alt matches the regex<br>\n<code>@inventory</code> - object is in the inventory (and similar for anything else that the standard Command scope could be)<br>\n<code>@everything</code> - AllObjects() - just in case you want a debugging command that correctly completes the names of objects the player can't see<br>\n<code>@inventory+black box</code> - lists items in the inventory, <em>and</em> those in the black box<br>\n<code>@=inventory</code> - lists items directly in the inventory, not inside another container<br>\n<code>@=room</code> - items in the current room (alias for @=notheld)</p>\n<p>A set of filters without a variable name are considered to apply to all variables specified later in the list. A filter that doesn't have a symbol character in front of it assumes an <code>@</code> (in order to ensure compatibility with all the Core commands)</p>\n<p>Is there anything I'm missing?</p>\n\n",
      "PostDate": "2017-09-02T15:12:54.1238906Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f77f03ae-e0d6-48f4-898c-ff9178d47828",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ugh ... found a quicker/simpler bodge for a couple of cases. Would likely to become a real pain if I had a lot of commands, but for now it allows me to play with things a bit at a time.\r\n\r\nI now have 3 \"put\" commands\r\n* `put0`, with pattern `^put\\s*$`\r\n* `put1`, with pattern `^put\\s+(?<object1>.*)(\\s+[io]n\\s*)?$`\r\n* `put` (which is the default)\r\n\r\nEach one just shows a menu for the next argument; filtered by sensible criteria.\r\nI'm thinking it would be quite easy to programatically create these sub-commands … if there's a way to actually create a command?",
      "EditableFormat": "markdown",
      "HTML": "<p>Ugh ... found a quicker/simpler bodge for a couple of cases. Would likely to become a real pain if I had a lot of commands, but for now it allows me to play with things a bit at a time.</p>\n<p>I now have 3 \"put\" commands</p>\n<ul>\n<li><code>put0</code>, with pattern <code>^put\\s*$</code></li>\n<li><code>put1</code>, with pattern <code>^put\\s+(?&lt;object1&gt;.*)(\\s+[io]n\\s*)?$</code></li>\n<li><code>put</code> (which is the default)</li>\n</ul>\n<p>Each one just shows a menu for the next argument; filtered by sensible criteria.<br>\nI'm thinking it would be quite easy to programatically create these sub-commands … if there's a way to actually create a command?</p>\n\n",
      "PostDate": "2017-09-10T15:33:12.6072101Z",
      "LastEditDate": "2017-09-10T15:35:54.7150782Z",
      "link": null
    },
    {
      "PostId": "32684d95-cefe-48c8-bef8-92623d02695d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel,\r\n\r\nThis is all WAY over my head, but, as far as the command is concerned, have you seen Pixie's CHEAT command?  \r\n\r\nIt's one command, but it's really 3-in-1.\r\n\r\nhttps://github.com/ThePix/quest/wiki/Cheating\r\n\r\n\r\nThat ***might*** help, if I understand that last post...\r\n\r\n...and if you're not already aware of it.",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel,</p>\n<p>This is all WAY over my head, but, as far as the command is concerned, have you seen Pixie's CHEAT command?</p>\n<p>It's one command, but it's really 3-in-1.</p>\n<p>https://github.com/ThePix/quest/wiki/Cheating</p>\n<p>That <strong><em>might</em></strong> help, if I understand that last post...</p>\n<p>...and if you're not already aware of it.</p>\n\n",
      "PostDate": "2017-09-10T17:48:26.1370327Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ece9af0-7fbc-46cd-a253-bff44e80b956",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I'm on linux at present. Tried running it under WINE, but it exits without any indication what's wrong. No idea if this is Quest, some compatibility issue, or if my WINE is broken (given that it's an out-of-the-box install, and I don't have anything else to try it with)\r\n\r\nI installed every thing I could find that mentioned WINE, MONO, ASP.NET (I even updated the .NET framework), and more last night, in Linux Mint 18 as well as in Arch Linux, but I couldn't get Quest to start up in either one.  It installs.  I open it.  Then: nothing at all happens.\r\n\r\nOne thing I noticed was the WINE installer didn't ask which folder I'd like to install to.  I wanted to choose my own folder so I'd know it would put ALL the files in one place.  (I'm pretty sure I read a post here from Pixie saying you were better off installing to one folder in some instances, because it won't put any necessary files in the app_data folder.  (It may not have been Pixie...))\r\n\r\nI'm also not sure about Java working inside of WINE, or how that even works at all (or if it even matters).  (I'm basically just bumbling, honestly.)\r\n\r\nI installed MONODEVELOP this morning.  It claims I can build Visual Studio projects with it, and it will compile it to C# for Linux.  (NOTE: I think that's what it's supposed to do.  Sometimes those descriptions are a little vague, and the programs don't do what I expect at all!)\r\n\r\nI also found a post on WineHQ from someone saying they got Quest 4.03 to run under WINE, but I think 4.05 was the earliest build I could find, and it didn't work in much the same way the newer version doesn't work.\r\n\r\n---\r\nAnyway, I'm trying one or two more things to get Quest running in Linux.  (Quest is the only reason I even log into Windows at the moment.)\r\n\r\nI'll drop an update if I get it going.\r\n\r\n---\r\nI also wonder if it might be better to focus on QuestJS.  ...or QuestKit... or whichever was the last iteration... instead.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm on linux at present. Tried running it under WINE, but it exits without any indication what's wrong. No idea if this is Quest, some compatibility issue, or if my WINE is broken (given that it's an out-of-the-box install, and I don't have anything else to try it with)</p>\n</blockquote>\n<p>I installed every thing I could find that mentioned WINE, MONO, ASP.NET (I even updated the .NET framework), and more last night, in Linux Mint 18 as well as in Arch Linux, but I couldn't get Quest to start up in either one.  It installs.  I open it.  Then: nothing at all happens.</p>\n<p>One thing I noticed was the WINE installer didn't ask which folder I'd like to install to.  I wanted to choose my own folder so I'd know it would put ALL the files in one place.  (I'm pretty sure I read a post here from Pixie saying you were better off installing to one folder in some instances, because it won't put any necessary files in the app_data folder.  (It may not have been Pixie...))</p>\n<p>I'm also not sure about Java working inside of WINE, or how that even works at all (or if it even matters).  (I'm basically just bumbling, honestly.)</p>\n<p>I installed MONODEVELOP this morning.  It claims I can build Visual Studio projects with it, and it will compile it to C# for Linux.  (NOTE: I think that's what it's supposed to do.  Sometimes those descriptions are a little vague, and the programs don't do what I expect at all!)</p>\n<p>I also found a post on WineHQ from someone saying they got Quest 4.03 to run under WINE, but I think 4.05 was the earliest build I could find, and it didn't work in much the same way the newer version doesn't work.</p>\n<hr>\n<p>Anyway, I'm trying one or two more things to get Quest running in Linux.  (Quest is the only reason I even log into Windows at the moment.)</p>\n<p>I'll drop an update if I get it going.</p>\n<hr>\n<p>I also wonder if it might be better to focus on QuestJS.  ...or QuestKit... or whichever was the last iteration... instead.</p>\n\n",
      "PostDate": "2017-09-10T18:20:23.6801605Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8a2e63e0-34ba-4fe1-8bd1-b5f2add16d3e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@KV: I've not sean the cheat command, but I've got something pretty similar for debugging.\r\nIn this case, it's not so much getting multiple behaviours out of one command, as turning one command into three on the fly.\r\n\r\nHmm ... it *might* actually be possible to stack them in a single command, but that would be even more horrible. A command with multiple scripts… I wonder if that would work.",
      "EditableFormat": "markdown",
      "HTML": "<p>@KV: I've not sean the cheat command, but I've got something pretty similar for debugging.<br>\nIn this case, it's not so much getting multiple behaviours out of one command, as turning one command into three on the fly.</p>\n<p>Hmm ... it <em>might</em> actually be possible to stack them in a single command, but that would be even more horrible. A command with multiple scripts… I wonder if that would work.</p>\n\n",
      "PostDate": "2017-09-10T19:04:29.3838567Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dd5de3f6-d7f8-4a8a-9ad5-9a92286a83aa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, thankyou :D\r\n\r\nMy init script now has:\r\n```\r\nforeach (cmd, AllCommands()) {\r\n  if (HasAttribute(game, \"override_scope\")) {\r\n    if (DictionaryContains(game.override_scope, cmd.name)) {\r\n      cmd.complexscope = StringDictionaryItem(game.override_scope, cmd.name)\r\n    }\r\n  }\r\n  if (HasAttribute(game, \"override_pattern\")) {\r\n    if (DictionaryContains(game.override_pattern, cmd.name)) {\r\n      cmd.pattern = StringDictionaryItem(game.override_pattern, cmd.name)\r\n    }\r\n  }\r\n  if (HasAttribute (cmd, \"complexscope\") {\r\n    cmd.original_script = cmd.script\r\n    cmd.script => {\r\n      found_all_args = true\r\n      foreach (arg, GetRequiredArguments(cmd.complexscope)) {\r\n        if (found_all_args and not IsDefined (arg)) {\r\n          // Yeah, it's not finished yet\r\n          // TODO - do the menu thing, providing a list of suitable items\r\n          msg (\"You need to specify a value for \"+arg)\r\n          msg (\"Eventually there will be a show menu command here\")\r\n          found_all_args = false\r\n        }\r\n      }\r\n      // looks like a command's arguments are passed directly into the script's scope, so to pass them to a different script we need to enumerate them\r\n      if (found_all_args) {\r\n        command_args = NewDictionary()\r\n        foreach (arg, GetAllArguments(cmd.pattern)) {\r\n          if (IsDefined (arg)) {\r\n            // Have I missed something obvious? There must be a better way to do this\r\n            dictionary add (command_args, arg, Eval(arg))\r\n          }\r\n        }\r\n        invoke (this, \"original_script\", command_args)\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThat was something quickly thrown together off the top of my head as proof of concept, so no doubt there's silly bugs in there. But it basically means that I could do something like:\r\n```\r\ndictionary add (game.override_scope, \"give\", \"object1!@inventory,object2!:is_npc\")\r\ndictionary add (game.override_pattern, \"give\", \"^give\\s*( (?<object1>.+)(( to)( (?<object2>.+))?)?)?$\")\r\n```\r\nOK, the regex is hairy. But then the 'give' command will be rebuilt in the init script. Its new script will:\r\n* If the player types \"give\", will display a \"...\" and a menu of objects in your inventory\r\n* If the player types \"give button\" or \"give button to\", will display a \"...\" and a menu listing everything in the current room with an \"is_npc\" attribute\r\n* If the player types \"give button to John\", it'll run the original script for the \"give\" command.\r\n\r\nYes, I could have done that just by implementing a new-and-more-complex 'give' command. But for some of them, the built-in command body is pretty complex, and I don't want to make it even more so.\r\n\r\nAnd yes, I'm a masochist. I love playing with particularly strange and ugly code sometimes.\r\n\r\n... and no. This doesn't actually do what I was hoping. It'll give you a menu of options if you enter an incomplete command, and means that you can put \"give\" or \"put in\" on an object's verb list for reasonable results, but it still won't give you a sensible set of suggestions if you type a partial object name.\r\nAnd it looks like I'm still re-implementing a lot of the functionality from CoreParser.\r\n\r\nStill, it's an interesting way to do it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, thankyou :D</p>\n<p>My init script now has:</p>\n<pre><code>foreach (cmd, AllCommands()) {\n  if (HasAttribute(game, \"override_scope\")) {\n    if (DictionaryContains(game.override_scope, cmd.name)) {\n      cmd.complexscope = StringDictionaryItem(game.override_scope, cmd.name)\n    }\n  }\n  if (HasAttribute(game, \"override_pattern\")) {\n    if (DictionaryContains(game.override_pattern, cmd.name)) {\n      cmd.pattern = StringDictionaryItem(game.override_pattern, cmd.name)\n    }\n  }\n  if (HasAttribute (cmd, \"complexscope\") {\n    cmd.original_script = cmd.script\n    cmd.script =&gt; {\n      found_all_args = true\n      foreach (arg, GetRequiredArguments(cmd.complexscope)) {\n        if (found_all_args and not IsDefined (arg)) {\n          // Yeah, it's not finished yet\n          // TODO - do the menu thing, providing a list of suitable items\n          msg (\"You need to specify a value for \"+arg)\n          msg (\"Eventually there will be a show menu command here\")\n          found_all_args = false\n        }\n      }\n      // looks like a command's arguments are passed directly into the script's scope, so to pass them to a different script we need to enumerate them\n      if (found_all_args) {\n        command_args = NewDictionary()\n        foreach (arg, GetAllArguments(cmd.pattern)) {\n          if (IsDefined (arg)) {\n            // Have I missed something obvious? There must be a better way to do this\n            dictionary add (command_args, arg, Eval(arg))\n          }\n        }\n        invoke (this, \"original_script\", command_args)\n      }\n    }\n  }\n}\n</code></pre>\n<p>That was something quickly thrown together off the top of my head as proof of concept, so no doubt there's silly bugs in there. But it basically means that I could do something like:</p>\n<pre><code>dictionary add (game.override_scope, \"give\", \"object1!@inventory,object2!:is_npc\")\ndictionary add (game.override_pattern, \"give\", \"^give\\s*( (?&lt;object1&gt;.+)(( to)( (?&lt;object2&gt;.+))?)?)?$\")\n</code></pre>\n<p>OK, the regex is hairy. But then the 'give' command will be rebuilt in the init script. Its new script will:</p>\n<ul>\n<li>If the player types \"give\", will display a \"...\" and a menu of objects in your inventory</li>\n<li>If the player types \"give button\" or \"give button to\", will display a \"...\" and a menu listing everything in the current room with an \"is_npc\" attribute</li>\n<li>If the player types \"give button to John\", it'll run the original script for the \"give\" command.</li>\n</ul>\n<p>Yes, I could have done that just by implementing a new-and-more-complex 'give' command. But for some of them, the built-in command body is pretty complex, and I don't want to make it even more so.</p>\n<p>And yes, I'm a masochist. I love playing with particularly strange and ugly code sometimes.</p>\n<p>... and no. This doesn't actually do what I was hoping. It'll give you a menu of options if you enter an incomplete command, and means that you can put \"give\" or \"put in\" on an object's verb list for reasonable results, but it still won't give you a sensible set of suggestions if you type a partial object name.<br>\nAnd it looks like I'm still re-implementing a lot of the functionality from CoreParser.</p>\n<p>Still, it's an interesting way to do it.</p>\n\n",
      "PostDate": "2017-09-10T20:08:43.2186045Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a7217cc5-d133-4b3c-a2f4-bfed4b3aa717",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(I know there's an error in that script, I copied it over while I was still working on it and got an unchecked bit in. But I'm not allowed to update it now)",
      "EditableFormat": "markdown",
      "HTML": "<p>(I know there's an error in that script, I copied it over while I was still working on it and got an unchecked bit in. But I'm not allowed to update it now)</p>\n\n",
      "PostDate": "2017-09-10T20:28:52.1342717Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e21ac8f-8933-4a07-9f75-c2373d91b073",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel\r\n\r\nI have Quest open in Visual Studio right now.\r\n\r\nI've just built a Debug 'release', and it works great (on WIndows, of course).\r\n\r\nI thought it best to successfully build it in Windows before I tried it in Linux using Monodevelop.  Which is what I'm off to do right now!\r\n\r\n---\r\nMore on this as it comes in.",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel</p>\n<p>I have Quest open in Visual Studio right now.</p>\n<p>I've just built a Debug 'release', and it works great (on WIndows, of course).</p>\n<p>I thought it best to successfully build it in Windows before I tried it in Linux using Monodevelop.  Which is what I'm off to do right now!</p>\n<hr>\n<p>More on this as it comes in.</p>\n\n",
      "PostDate": "2017-09-11T05:35:06.469514Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
