{
  "Topic": {
    "TopicId": "3224",
    "ForumId": "10",
    "Title": "Invoking an overridden base method in an object",
    "LastUpdated": "2012-09-30T13:14:25+01:00",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "21487",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "(Note: This is a fairly obscure topic, but it may be relevant to some. Just in case, I'm posting here.)\n\nLet's say you have a nice base type with some default scripts, and there is code somewhere that invokes those scripts by name. They provide a general object interface. As a trivial example:\n\n[code:1bjy09w2]&lt;type name=&quot;MyBaseType&gt;\n  &lt;onInit type=&quot;script&quot;&gt;\n    msg(&quot;My base has been init'd!&quot;)\n  &lt;/onInit&gt;\n&lt;/type&gt;[/code:1bjy09w2]\nAnd you have a derived object with that script overridden:\n\n[code:1bjy09w2]&lt;object name=&quot;MyObject&quot;&gt;\n  &lt;inherit name=&quot;MyBaseType&quot;/&gt;\n  &lt;onInit type=&quot;script&quot;&gt;\n    msg(&quot;My object has been init'd&quot;)\n  &lt;/onInit&gt;\n&lt;/object&gt;[/code:1bjy09w2]\nAnd the object is invoked somewhere:\n\n[code:1bjy09w2]do (MyObject, &quot;onInit&quot;)[/code:1bjy09w2]\nOften when making object hierarchies, you would like to be able to invoke the base type's method from within the derived object/type's method (in a real world example, they would do more than just print messages - they could init the object's state, provide base functionality that is common to derived objects or types, etc). However, there is no standard way in Quest to do that.\n\nThere are two problems. First, you can't access a type at all. You can't access attributes or manipulate it in any way (that I have seen). They don't exist anywhere in an accessible form. The other problem is that you can't &quot;do&quot; an arbitrary method. &quot;do&quot; requires the script be an attribute on the object. You can &quot;invoke&quot; a script, but then there is no &quot;this&quot; pointer. (Perhaps you could fake it by creating a parameters dictionary and adding in your own &quot;this&quot; parameter.)\n\nThe following function attempts to implement invoking a base type's method. In order to solve the above problems, it does this: it requires you to create a &quot;prototype&quot; object following the naming convention &quot;basetype_prototype&quot;. You can actually call it whatever you want as long as you pass that base name in, but it will keep the code sane if you try to keep the names consistent. When invoked, it creates a new attribute on the target object to hold the base script (named appropriately) and then &quot;does&quot; it.\n\nThe new function is this:\n\n[code:1bjy09w2]&lt;function name=&quot;CallBaseMethod&quot; parameters=&quot;o, type, method&quot;&gt;\n    attribute = &quot;callbase_&quot; + type + &quot;_&quot; + method\n    if (not HasScript(o, attribute)) {\n      set (o, attribute, GetAttribute(GetObject(type + &quot;_prototype&quot;), method))\n    }\n    do (o, attribute)\n&lt;/function&gt;[/code:1bjy09w2]\nIn the above example, you would need to add an empty prototype so that the scripts can be accessed:\n\n[code:1bjy09w2]&lt;object name=&quot;MyBaseType_prototype&quot;&gt;\n  &lt;inherit name=&quot;MyBaseType/&gt;\n&lt;/object&gt;[/code:1bjy09w2]\nBut once that is done, you can then do:\n\n[code:1bjy09w2]&lt;object name=&quot;MyObject&quot;&gt;\n  &lt;inherit name=&quot;MyBaseType&quot;/&gt;\n  &lt;onInit type=&quot;script&quot;&gt;\n    msg(&quot;My object has been init'd&quot;)\n    CallBaseMethod(this, &quot;MyBaseType&quot;, &quot;onInit&quot;)\n  &lt;/onInit&gt;\n&lt;/object&gt;[/code:1bjy09w2]\nand it will print out both &quot;My object has been init'd&quot; and &quot;My base has been init'd!&quot;\n\nIn case that is useful to anyone... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n(It is left as an exercise for the reader if you want a variant that takes and passes on parameters.)\n\n((It is also left to ponder how this could be abused. Instead of a base type, how about a prototype object that is a storehouse for object scripts, usable anywhere? The possibilities with Quest are endless.))",
      "EditableFormat": "bbcode",
      "HTML": "(Note: This is a fairly obscure topic, but it may be relevant to some. Just in case, I'm posting here.)<br/><br/>Let's say you have a nice base type with some default scripts, and there is code somewhere that invokes those scripts by name. They provide a general object interface. As a trivial example:<br/><br/><pre><code>&lt;type name=&quot;MyBaseType&gt;<br/>  &lt;onInit type=&quot;script&quot;&gt;<br/>    msg(&quot;My base has been init'd!&quot;)<br/>  &lt;/onInit&gt;<br/>&lt;/type&gt;</code></pre><br/>And you have a derived object with that script overridden:<br/><br/><pre><code>&lt;object name=&quot;MyObject&quot;&gt;<br/>  &lt;inherit name=&quot;MyBaseType&quot;/&gt;<br/>  &lt;onInit type=&quot;script&quot;&gt;<br/>    msg(&quot;My object has been init'd&quot;)<br/>  &lt;/onInit&gt;<br/>&lt;/object&gt;</code></pre><br/>And the object is invoked somewhere:<br/><br/><pre><code>do (MyObject, &quot;onInit&quot;)</code></pre><br/>Often when making object hierarchies, you would like to be able to invoke the base type's method from within the derived object/type's method (in a real world example, they would do more than just print messages - they could init the object's state, provide base functionality that is common to derived objects or types, etc). However, there is no standard way in Quest to do that.<br/><br/>There are two problems. First, you can't access a type at all. You can't access attributes or manipulate it in any way (that I have seen). They don't exist anywhere in an accessible form. The other problem is that you can't &quot;do&quot; an arbitrary method. &quot;do&quot; requires the script be an attribute on the object. You can &quot;invoke&quot; a script, but then there is no &quot;this&quot; pointer. (Perhaps you could fake it by creating a parameters dictionary and adding in your own &quot;this&quot; parameter.)<br/><br/>The following function attempts to implement invoking a base type's method. In order to solve the above problems, it does this: it requires you to create a &quot;prototype&quot; object following the naming convention &quot;basetype_prototype&quot;. You can actually call it whatever you want as long as you pass that base name in, but it will keep the code sane if you try to keep the names consistent. When invoked, it creates a new attribute on the target object to hold the base script (named appropriately) and then &quot;does&quot; it.<br/><br/>The new function is this:<br/><br/><pre><code>&lt;function name=&quot;CallBaseMethod&quot; parameters=&quot;o, type, method&quot;&gt;<br/>    attribute = &quot;callbase_&quot; + type + &quot;_&quot; + method<br/>    if (not HasScript(o, attribute)) {<br/>      set (o, attribute, GetAttribute(GetObject(type + &quot;_prototype&quot;), method))<br/>    }<br/>    do (o, attribute)<br/>&lt;/function&gt;</code></pre><br/>In the above example, you would need to add an empty prototype so that the scripts can be accessed:<br/><br/><pre><code>&lt;object name=&quot;MyBaseType_prototype&quot;&gt;<br/>  &lt;inherit name=&quot;MyBaseType/&gt;<br/>&lt;/object&gt;</code></pre><br/>But once that is done, you can then do:<br/><br/><pre><code>&lt;object name=&quot;MyObject&quot;&gt;<br/>  &lt;inherit name=&quot;MyBaseType&quot;/&gt;<br/>  &lt;onInit type=&quot;script&quot;&gt;<br/>    msg(&quot;My object has been init'd&quot;)<br/>    CallBaseMethod(this, &quot;MyBaseType&quot;, &quot;onInit&quot;)<br/>  &lt;/onInit&gt;<br/>&lt;/object&gt;</code></pre><br/>and it will print out both &quot;My object has been init'd&quot; and &quot;My base has been init'd!&quot;<br/><br/>In case that is useful to anyone... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>(It is left as an exercise for the reader if you want a variant that takes and passes on parameters.)<br/><br/>((It is also left to ponder how this could be abused. Instead of a base type, how about a prototype object that is a storehouse for object scripts, usable anywhere? The possibilities with Quest are endless.))",
      "PostDate": "2012-09-30T13:14:25+01:00",
      "LastEditDate": null
    }
  ]
}
