{
  "Topic": {
    "TopicId": "pkjnwxnz4kki4lzj0gvobw",
    "ForumId": "10",
    "Title": "Suggestion to new coders",
    "LastUpdated": "2017-02-02T01:19:26.7316705Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "748a63c7-3d84-4a28-b2c5-02e313ced41e",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "http://i.imgur.com/3AxpbN7b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is object oriented programing - oop. A lot of people that are just learning to code by using Quest may not be familiar with what that means. And concepts those of us that have been programing for a while take for granted might seem very confusing.\r\n\r\nSo, as a suggestion, you might want to do some research.\r\n\r\nBut here's a very simple explination of what we're doing here.\r\n\r\nAssume you have a huge box. You call that box GAME. The box is an object and it has several features - length, height, width, color, material and so on. \r\n\r\nBut GAME isn't just an object, it can have babies. And when it has a baby box, the baby box inherits everything GAME has. That means, the baby starts out with having height, width, length, color, material. Just like mama box.\r\n\r\n But you, the programmer don't want a second GAME box (object). So you change the baby boxe's name to ROOM. And you decide that ROOM needs some features mama box doesn't have - description. And you decide it doesn't need some stuff mama does have - color, height, width. So you tweak it a bit. Then you put the now unique object ROOM inside GAME.\r\n\r\nNow you want more rooms. But you're lazy. All programmers are lazy. So you make copies of ROOM and you call them things like room1, airport, kitchen. They all inherit everything ROOM has, but sometimes you tweak them and make the more unique, and sometimes you just fill in the blanks - type in a description instead of leaving it blank.\r\n\r\nAnd you put all the baby rooms inside ROOM, because ROOM is their parent.\r\n\r\nThen you make a new copy of GAME, but you change it's name to EXIT, tweak it's features, explain to it how to move a player from one baby room to aother, stick it inside ROOM, then make copies of it, tweak the copies slightly, and stuff those baby exits inside the baby rooms.\r\n\r\nGetting the idea?\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>This is object oriented programing - oop. A lot of people that are just learning to code by using Quest may not be familiar with what that means. And concepts those of us that have been programing for a while take for granted might seem very confusing.</p>\n<p>So, as a suggestion, you might want to do some research.</p>\n<p>But here's a very simple explination of what we're doing here.</p>\n<p>Assume you have a huge box. You call that box GAME. The box is an object and it has several features - length, height, width, color, material and so on.</p>\n<p>But GAME isn't just an object, it can have babies. And when it has a baby box, the baby box inherits everything GAME has. That means, the baby starts out with having height, width, length, color, material. Just like mama box.</p>\n<p>But you, the programmer don't want a second GAME box (object). So you change the baby boxe's name to ROOM. And you decide that ROOM needs some features mama box doesn't have - description. And you decide it doesn't need some stuff mama does have - color, height, width. So you tweak it a bit. Then you put the now unique object ROOM inside GAME.</p>\n<p>Now you want more rooms. But you're lazy. All programmers are lazy. So you make copies of ROOM and you call them things like room1, airport, kitchen. They all inherit everything ROOM has, but sometimes you tweak them and make the more unique, and sometimes you just fill in the blanks - type in a description instead of leaving it blank.</p>\n<p>And you put all the baby rooms inside ROOM, because ROOM is their parent.</p>\n<p>Then you make a new copy of GAME, but you change it's name to EXIT, tweak it's features, explain to it how to move a player from one baby room to aother, stick it inside ROOM, then make copies of it, tweak the copies slightly, and stuff those baby exits inside the baby rooms.</p>\n<p>Getting the idea?</p>\n\n",
      "PostDate": "2017-02-02T01:19:26.7316705Z",
      "LastEditDate": null
    },
    {
      "PostId": "9ec9b109-c014-4794-b75e-9f44eef19ad0",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This very clearly describes the confusion new OOP programmers have...\r\nEven someone coming from a different programming style...\r\n(I know Basic, I can do all the magic OOP can do... but differently...)\r\nTo me...\r\nMy program contains all the code for everything to work...\r\n(like Game)\r\nBut, at least to me,  it is like the objects run their own bits of code...\r\n(like rooms and objects)\r\nseparate from Game...\r\nBut... with the help of the ones that have waded through the confusion first...\r\nI'm sure the new ones can get started.",
      "EditableFormat": "markdown",
      "HTML": "<p>This very clearly describes the confusion new OOP programmers have...<br>\nEven someone coming from a different programming style...<br>\n(I know Basic, I can do all the magic OOP can do... but differently...)<br>\nTo me...<br>\nMy program contains all the code for everything to work...<br>\n(like Game)<br>\nBut, at least to me,  it is like the objects run their own bits of code...<br>\n(like rooms and objects)<br>\nseparate from Game...<br>\nBut... with the help of the ones that have waded through the confusion first...<br>\nI'm sure the new ones can get started.</p>\n\n",
      "PostDate": "2017-02-02T04:47:15.3745511Z",
      "LastEditDate": null
    },
    {
      "PostId": "57dd7311-26a4-4cbf-b7ad-7a488e023427",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "http://i.imgur.com/3AxpbN7b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "***it is like the objects run their own bits of code***\r\n\r\nYup, they can. They don't have to, but they can. And they usually do. What they can do is defined in various functions in the program. However  GAME knows about every bit of code that exists in your game. It all becomes part of GAME. If you add a script to a room, it might only run in that room, and it might not be part of the master function library that comes with GAME, but GAME still knows about it. ROOM can't run that function unless GAME allows it to.\r\n\r\nWhen you create a room, as an example, the game first looks at the master ROOM object and creates a clone of it for you. It gives you basic things all room objects logically have. But you, the programmer, can write scripts for that room, you can program code into that room which will run only when someone is in that room. This allows you the ability to make every room in your game unique if you choose to. You can make use of the functions it comes with (create exits) or not, as you choose.\r\n\r\nOr, you can choose not to write extra scripts, just let the room object run the code that it inherited from ROOM. (the ability to move the player to another room when they type an exit for example).\r\n\r\nIt's the ultimate way to be lazy when programing. You create the first object (GAME) and give it lots of abilities. Then you create a new object (ROOM) but rather than writing the abilities you want ROOM to have, you just point to (GAME) and say \"use this, and that, and that, and... that one. Don't use any of the others.\"  And then every room you make, gets all of the code that ROOM has, and you can go merrily about creating hundreds of rooms just by typing create room, without having to code the ability to move through an exit, or display the description, for every single one of those hundreds of rooms.\r\n\r\nKinda like you had the ultimate soda machine. It has one bottle of SODA in it, with every ingredient you'd need to make every soda in the world all swirling around inside it. When you want a Sprite, it makes a bottle shaped object, changes the color to green, slaps a lable on it that says Sprite. Then it looks at the liquid inside that one bottle of SODA, picks out just the ingredients that make Sprite, and fills the bottle shaped object it made you with them, and hands you a sprite.\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p><strong><em>it is like the objects run their own bits of code</em></strong></p>\n<p>Yup, they can. They don't have to, but they can. And they usually do. What they can do is defined in various functions in the program. However  GAME knows about every bit of code that exists in your game. It all becomes part of GAME. If you add a script to a room, it might only run in that room, and it might not be part of the master function library that comes with GAME, but GAME still knows about it. ROOM can't run that function unless GAME allows it to.</p>\n<p>When you create a room, as an example, the game first looks at the master ROOM object and creates a clone of it for you. It gives you basic things all room objects logically have. But you, the programmer, can write scripts for that room, you can program code into that room which will run only when someone is in that room. This allows you the ability to make every room in your game unique if you choose to. You can make use of the functions it comes with (create exits) or not, as you choose.</p>\n<p>Or, you can choose not to write extra scripts, just let the room object run the code that it inherited from ROOM. (the ability to move the player to another room when they type an exit for example).</p>\n<p>It's the ultimate way to be lazy when programing. You create the first object (GAME) and give it lots of abilities. Then you create a new object (ROOM) but rather than writing the abilities you want ROOM to have, you just point to (GAME) and say \"use this, and that, and that, and... that one. Don't use any of the others.\"  And then every room you make, gets all of the code that ROOM has, and you can go merrily about creating hundreds of rooms just by typing create room, without having to code the ability to move through an exit, or display the description, for every single one of those hundreds of rooms.</p>\n<p>Kinda like you had the ultimate soda machine. It has one bottle of SODA in it, with every ingredient you'd need to make every soda in the world all swirling around inside it. When you want a Sprite, it makes a bottle shaped object, changes the color to green, slaps a lable on it that says Sprite. Then it looks at the liquid inside that one bottle of SODA, picks out just the ingredients that make Sprite, and fills the bottle shaped object it made you with them, and hands you a sprite.</p>\n\n",
      "PostDate": "2017-02-02T05:14:32.1036224Z",
      "LastEditDate": "2017-02-02T05:19:27.8225035Z"
    },
    {
      "PostId": "2c2dd6f8-9c5b-4093-b7bb-20d1c4c64977",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OOP/OOD (Object-Oriented Programming / Object-Oriented Design) is a much larger field than just Inheritance/parent-child/containment heirarchy, as there's Data Structures/Management, and whatever else advance stuff I've yet to learn, lol.\r\n\r\nInheritance/parent-child/containment heirarchy isn't that common knowledge for most people to actually use/apply, especially in programming, (even though it's used everywhere and in/with everything in the real world), and while most can understand the concept, implementing it especially programming-wise, isn't simple. Programmers take this stuff for granted, but it takes a long time to get used to and good at doing Inheritance/parent-child/containment heirarchy (at least complex designs, anyways) and training the brain in this mindset/approach of 'top to down' designing, especially the Absract design aspects involved.\r\n\r\nthe base of Inheritance/parent-child/containment heirarchy, is the concept of 'encapsulation' of OOP/OOD. Basically, encapsulation is the 'physical (conceptually)' manifestation (an 'instantiated OBJECT') of the theoretical/imagined/concept groups (CLASSES), as both the CLASSES and their OBJECTS contain their own Attributes (data and/or actions) within themselves (kinda like being \"self-sufficient\" --- they have everything that they are and/or need code wise --- you're not jumping all over your entire code looking for the code associated with them). Inheritance/parent-child/containment heirarchy is having GROUPS/CLASSES/OBJECTS (of GROUPS/CLASSES/OBJECTS) of Attributes (data and/or actions).\r\n\r\nany thing and every thing you can think of within the real world is a GROUP/CLASS/OBJECT!\r\n\r\n1. does that thing have any Attributes (data and/or actions) that belong to another thing, ?\r\n2. does that thing have any Attributes (data and/or actions) that are uniquely its own (aka: the thing's Attributes do NOT belong to another thing), ?\r\n3. does that thing have both #1 and #2, ?\r\n4. does that thing have NO Attributes (data and/or actions) what-so-ever, ?\r\n\r\nthink of whatever you want in the real world, and see if you can list anything for it of the #1-4\r\n\r\nan example of OBJECTS/GROUPS/CLASSES of OBJECTS/GROUPS/CLASSES (inheritance/parent-child/containment heirarchy):\r\n\r\nshape\r\nshape -> 3D\r\nshape -> 3D -> sphere\r\nshape -> 3D -> sphere -> ball\r\nshape -> 3D -> sphere -> ball -> soccer ball\r\nshape -> 3D -> sphere -> ball -> baseball ball\r\nshape -> 3D -> sphere -> ball -> basketball ball\r\nshape -> 3D -> sphere -> ball -> tennis ball\r\nshape -> 3D -> sphere -> ball -> plastic toy ball\r\nshape -> 3D -> sphere -> ball -> super/rubber toy ball \r\n\r\ntry to list what you can for #1-4, for each of the GROUPS/CLASSES/OBJECTS (shape, 3D, sphere, ball, soccer ball, baseball ball, tennis ball, basket ball, plastic toy ball, super/rubber toy ball)\r\n\r\n---------\r\n\r\nextended:\r\n\r\nshape\r\nshape -> 2D\r\nshape -> 2D -> round (?ellipse?)\r\nshape -> 2D -> round (?ellipse?) -> circle (perfect: static radius)\r\nshape -> 2D -> round (?ellipse?) -> oval (not perfect: dynamic radius)\r\nshape -> 2D -> triangle\r\nshape -> 2D -> triangle -> equilateral\r\nshape -> 2D -> triangle -> scalene\r\nshape -> 2D -> triangle -> right\r\nshape -> 2D -> rectangle\r\nshape -> 2D -> rectangle -> square\r\nshape -> 3D\r\nshape -> 3D -> sphere\r\nshape -> 3D -> sphere -> ball\r\nshape -> 3D -> sphere -> ball -> soccer ball\r\nshape -> 3D -> sphere -> ball -> baseball ball\r\nshape -> 3D -> sphere -> ball -> basketball ball\r\nshape -> 3D -> sphere -> ball -> tennis ball\r\nshape -> 3D -> sphere -> ball -> plastic toy ball\r\nshape -> 3D -> sphere -> ball -> super/rubber toy ball\r\nshape -> 3D -> cylinder\r\nshape -> 3D -> rectangular prism\r\nshape -> 3D -> rectangular prism -> cube\r\netc etc etc\r\n\r\n----------\r\n\r\nlet's just look at the game maker level of OOP/OOD (getting into quest itself's OOP/OOD is a much more advanced/difficult concept for non-programmers), some examples:\r\n\r\n```\r\n// too much work to fill in all the Attributes (data/actions) for them and to work out the entire design systems... lol, but hopefully you get the idea from it!\r\n\r\n<type name=\"character_type\">\r\n  <attr name=\"life\" type=\"string\">1/1</attr>\r\n  <attr name=\"current_lifee\" type=\"int\">1</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">1</attr>\r\n  <attr name=\"life\" type=\"string\">0/0</attr>\r\n  <attr name=\"current_mana\" type=\"int\">0</attr>\r\n  <attr name=\"maximum_mana\" type=\"int\">0</attr>\r\n  <attr name=\"level\" type=\"int\">0</attr>\r\n  <attr name=\"experience\" type=\"int\">0</attr>\r\n  <attr name=\"cash\" type=\"int\">0</attr>\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"condition\" type=\"string\">normal</attr>\r\n</type>\r\n\r\n// \"pcs\" (can join you as party/team members):\r\n<type name=\"playable_character_type\">\r\n  <inherit name=\"character_type\" />\r\n  <attr name=\"statusattributes\" type=\"simplestringdictionary\">life = Life: !; level = Level: !; cash = Cash: !; strength = Strength: !; endurance = Endurance: !; condition = Condition: !</attr>\r\n</type>\r\n\r\n// can NOT join you as party/team members:\r\n<type name=\"nonplayable_character_type\">\r\n    <inherit name=\"character_type\" />\r\n</type>\r\n\r\n// \"monster/animal/creature\":\r\n<type name=\"nonsentient_type\">\r\n</type>\r\n\r\n// \"npc/townsfolk\":\r\n<type name=\"sentient_type\">\r\n</type>\r\n\r\n<type name=\"base_item_type\">\r\n  <attr name=\"type\" type=\"string\">unknown</attr>\r\n</type>\r\n\r\n<type name=\"item_type\">\r\n  <inherit name=\"base_item_type\" />\r\n  <attr name=\"quantity\" type=\"int\">0</attr>\r\n  <attr name=\"weight\" type=\"int\">0</attr>\r\n  <attr name=\"volume\" type=\"int\">0</attr>\r\n  <attr name=\"take\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"drop\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"store\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"destore\" type=\"script\">\r\n  </attr>\r\n</type>\r\n\r\n<type name=\"usable_item_type\">\r\n  <inherit name=\"item_type\" />\r\n  <attr name=\"use\" type=\"script\">\r\n  </attr>\r\n</type>\r\n\r\n<type name=\"nonusable_item_type\">\r\n  <inherit name=\"base_item_type\" />\r\n  <attr name=\"take\" type=\"script\">\r\n  </attr>\r\n</type>\r\n\r\n<type name=\"equipment_type\">\r\n  <inherit name=\"item_type\" />\r\n  <attr name=\"equip\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"unequip\" type=\"script\">\r\n  </attr>\r\n</type>\r\n\r\n<type name=\"weapon_type\">\r\n  <inherit name=\"equipment_type\" />\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"range\" type=\"int\">0</attr>\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"armor_type\">\r\n  <inherit name=\"equipment_type\" />\r\n  <attr name=\"defense\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"clothing_type\">\r\n  <inherit name=\"equipment_type\" />\r\n</type>\r\n\r\n<type name=\"one_handed_type\">\r\n</type>\r\n\r\n<type name=\"two_handed_type\">\r\n</type>\r\n\r\n<type name=\"nonprojectile_type\">\r\n</type>\r\n\r\n<type name=\"projectile_type\">\r\n</type>\r\n\r\n<type name=\"sword_type\">\r\n  <inherit name=\"weapon_type\" />\r\n  <inherit name=\"nonprojectile_type\" />\r\n</type>\r\n\r\n<type name=\"katana_type\">\r\n  <inherit name=\"sword_type\" />\r\n</type>\r\n\r\n<type name=\"claymore_type\">\r\n  <inherit name=\"sword_type\" />\r\n  <inherit name=\"two_handed_type\" />\r\n</type>\r\n\r\n<object name=\"flaming_claymore\">\r\n  <inherit name=\"claymore_type\" />\r\n  <inherit name=\"fire_type\" />\r\n</object>\r\n\r\n<type name=\"axe_type\">\r\n  <inherit name=\"weapon_type\" />\r\n</type>\r\n\r\n<type name=\"spell_type\">\r\n</type>\r\n\r\n<type name=\"healing_type\">\r\n  <inherit name=\"spell_type\" />\r\n</type>\r\n\r\n<type name=\"curing_type\">\r\n  <inherit name=\"spell_type\" />\r\n</type>\r\n\r\n<type name=\"offensive_type\">\r\n  <inherit name=\"spell_type\" />\r\n</type>\r\n\r\n<type name=\"defensive_type\">\r\n  <inherit name=\"spell_type\" />\r\n</type>\r\n\r\n<type name=\"support_type\">\r\n  <inherit name=\"spell_type\" />\r\n</type>\r\n\r\n<type name=\"fire_type\">\r\n</type>\r\n\r\n<object name=\"fireball\">\r\n  <inherit name=\"offensive_type\" />\r\n  <inherit name=\"fire_type\" />\r\n</object>\r\n\r\n<type name=\"water_type\">\r\n</type>\r\n\r\n<type name=\"shop_type\">\r\n  <attr name=\"buy\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"sell\" type=\"script\">\r\n  </attr>\r\n</type>\r\n```\r\n\r\n--------------\r\n\r\nfor a small/simple game, this is a lot of work than is needed, but for a large/complex game, this actually reduces the amount of work greatly (it's scalable).",
      "EditableFormat": "markdown",
      "HTML": "<p>OOP/OOD (Object-Oriented Programming / Object-Oriented Design) is a much larger field than just Inheritance/parent-child/containment heirarchy, as there's Data Structures/Management, and whatever else advance stuff I've yet to learn, lol.</p>\n<p>Inheritance/parent-child/containment heirarchy isn't that common knowledge for most people to actually use/apply, especially in programming, (even though it's used everywhere and in/with everything in the real world), and while most can understand the concept, implementing it especially programming-wise, isn't simple. Programmers take this stuff for granted, but it takes a long time to get used to and good at doing Inheritance/parent-child/containment heirarchy (at least complex designs, anyways) and training the brain in this mindset/approach of 'top to down' designing, especially the Absract design aspects involved.</p>\n<p>the base of Inheritance/parent-child/containment heirarchy, is the concept of 'encapsulation' of OOP/OOD. Basically, encapsulation is the 'physical (conceptually)' manifestation (an 'instantiated OBJECT') of the theoretical/imagined/concept groups (CLASSES), as both the CLASSES and their OBJECTS contain their own Attributes (data and/or actions) within themselves (kinda like being \"self-sufficient\" --- they have everything that they are and/or need code wise --- you're not jumping all over your entire code looking for the code associated with them). Inheritance/parent-child/containment heirarchy is having GROUPS/CLASSES/OBJECTS (of GROUPS/CLASSES/OBJECTS) of Attributes (data and/or actions).</p>\n<p>any thing and every thing you can think of within the real world is a GROUP/CLASS/OBJECT!</p>\n<ol>\n<li>does that thing have any Attributes (data and/or actions) that belong to another thing, ?</li>\n<li>does that thing have any Attributes (data and/or actions) that are uniquely its own (aka: the thing's Attributes do NOT belong to another thing), ?</li>\n<li>does that thing have both #1 and #2, ?</li>\n<li>does that thing have NO Attributes (data and/or actions) what-so-ever, ?</li>\n</ol>\n<p>think of whatever you want in the real world, and see if you can list anything for it of the #1-4</p>\n<p>an example of OBJECTS/GROUPS/CLASSES of OBJECTS/GROUPS/CLASSES (inheritance/parent-child/containment heirarchy):</p>\n<p>shape<br>\nshape -&gt; 3D<br>\nshape -&gt; 3D -&gt; sphere<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; soccer ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; baseball ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; basketball ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; tennis ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; plastic toy ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; super/rubber toy ball</p>\n<p>try to list what you can for #1-4, for each of the GROUPS/CLASSES/OBJECTS (shape, 3D, sphere, ball, soccer ball, baseball ball, tennis ball, basket ball, plastic toy ball, super/rubber toy ball)</p>\n<hr>\n<p>extended:</p>\n<p>shape<br>\nshape -&gt; 2D<br>\nshape -&gt; 2D -&gt; round (?ellipse?)<br>\nshape -&gt; 2D -&gt; round (?ellipse?) -&gt; circle (perfect: static radius)<br>\nshape -&gt; 2D -&gt; round (?ellipse?) -&gt; oval (not perfect: dynamic radius)<br>\nshape -&gt; 2D -&gt; triangle<br>\nshape -&gt; 2D -&gt; triangle -&gt; equilateral<br>\nshape -&gt; 2D -&gt; triangle -&gt; scalene<br>\nshape -&gt; 2D -&gt; triangle -&gt; right<br>\nshape -&gt; 2D -&gt; rectangle<br>\nshape -&gt; 2D -&gt; rectangle -&gt; square<br>\nshape -&gt; 3D<br>\nshape -&gt; 3D -&gt; sphere<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; soccer ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; baseball ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; basketball ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; tennis ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; plastic toy ball<br>\nshape -&gt; 3D -&gt; sphere -&gt; ball -&gt; super/rubber toy ball<br>\nshape -&gt; 3D -&gt; cylinder<br>\nshape -&gt; 3D -&gt; rectangular prism<br>\nshape -&gt; 3D -&gt; rectangular prism -&gt; cube<br>\netc etc etc</p>\n<hr>\n<p>let's just look at the game maker level of OOP/OOD (getting into quest itself's OOP/OOD is a much more advanced/difficult concept for non-programmers), some examples:</p>\n<pre><code>// too much work to fill in all the Attributes (data/actions) for them and to work out the entire design systems... lol, but hopefully you get the idea from it!\n\n&lt;type name=\"character_type\"&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;1/1&lt;/attr&gt;\n  &lt;attr name=\"current_lifee\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"life\" type=\"string\"&gt;0/0&lt;/attr&gt;\n  &lt;attr name=\"current_mana\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"maximum_mana\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"level\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"experience\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"cash\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"condition\" type=\"string\"&gt;normal&lt;/attr&gt;\n&lt;/type&gt;\n\n// \"pcs\" (can join you as party/team members):\n&lt;type name=\"playable_character_type\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n  &lt;attr name=\"statusattributes\" type=\"simplestringdictionary\"&gt;life = Life: !; level = Level: !; cash = Cash: !; strength = Strength: !; endurance = Endurance: !; condition = Condition: !&lt;/attr&gt;\n&lt;/type&gt;\n\n// can NOT join you as party/team members:\n&lt;type name=\"nonplayable_character_type\"&gt;\n    &lt;inherit name=\"character_type\" /&gt;\n&lt;/type&gt;\n\n// \"monster/animal/creature\":\n&lt;type name=\"nonsentient_type\"&gt;\n&lt;/type&gt;\n\n// \"npc/townsfolk\":\n&lt;type name=\"sentient_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"base_item_type\"&gt;\n  &lt;attr name=\"type\" type=\"string\"&gt;unknown&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"item_type\"&gt;\n  &lt;inherit name=\"base_item_type\" /&gt;\n  &lt;attr name=\"quantity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"weight\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"volume\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"take\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"drop\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"store\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"destore\" type=\"script\"&gt;\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"usable_item_type\"&gt;\n  &lt;inherit name=\"item_type\" /&gt;\n  &lt;attr name=\"use\" type=\"script\"&gt;\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"nonusable_item_type\"&gt;\n  &lt;inherit name=\"base_item_type\" /&gt;\n  &lt;attr name=\"take\" type=\"script\"&gt;\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"equipment_type\"&gt;\n  &lt;inherit name=\"item_type\" /&gt;\n  &lt;attr name=\"equip\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"unequip\" type=\"script\"&gt;\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"weapon_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"range\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"armor_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n  &lt;attr name=\"defense\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"clothing_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"one_handed_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"two_handed_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"nonprojectile_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"projectile_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"sword_type\"&gt;\n  &lt;inherit name=\"weapon_type\" /&gt;\n  &lt;inherit name=\"nonprojectile_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"katana_type\"&gt;\n  &lt;inherit name=\"sword_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"claymore_type\"&gt;\n  &lt;inherit name=\"sword_type\" /&gt;\n  &lt;inherit name=\"two_handed_type\" /&gt;\n&lt;/type&gt;\n\n&lt;object name=\"flaming_claymore\"&gt;\n  &lt;inherit name=\"claymore_type\" /&gt;\n  &lt;inherit name=\"fire_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"axe_type\"&gt;\n  &lt;inherit name=\"weapon_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"spell_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"healing_type\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"curing_type\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"offensive_type\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"defensive_type\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"support_type\"&gt;\n  &lt;inherit name=\"spell_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"fire_type\"&gt;\n&lt;/type&gt;\n\n&lt;object name=\"fireball\"&gt;\n  &lt;inherit name=\"offensive_type\" /&gt;\n  &lt;inherit name=\"fire_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"water_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"shop_type\"&gt;\n  &lt;attr name=\"buy\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"sell\" type=\"script\"&gt;\n  &lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>for a small/simple game, this is a lot of work than is needed, but for a large/complex game, this actually reduces the amount of work greatly (it's scalable).</p>\n\n",
      "PostDate": "2017-02-03T00:21:32.0801555Z",
      "LastEditDate": "2017-02-03T01:08:12.5481539Z"
    },
    {
      "PostId": "6acee675-d121-493f-8048-d5fa0ae6f3fa",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think a light came on today...\r\nI'll find out later if I'm right...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I think a light came on today...<br>\nI'll find out later if I'm right...</p>\n\n",
      "PostDate": "2017-02-03T03:42:19.5555846Z",
      "LastEditDate": null
    },
    {
      "PostId": "7e9c02f5-50c5-41ae-962d-20760fae4fd3",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "http://i.imgur.com/3AxpbN7b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ":) let us know, and we're here if you have questions.",
      "EditableFormat": "markdown",
      "HTML": "<p>:) let us know, and we're here if you have questions.</p>\n\n",
      "PostDate": "2017-02-03T03:46:40.6036581Z",
      "LastEditDate": null
    }
  ]
}
