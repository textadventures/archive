{
  "Topic": {
    "TopicId": "kd1uuk3sseg5nn8s3i7cqa",
    "ForumId": "10",
    "Title": "randomizing strings",
    "LastUpdated": "2020-05-11T09:20:29.0584653Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6d20637b-dd4f-4572-8672-f744c0cedcf8",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey everyone,\r\n\r\nI found this amazing script by pix for creating zombies, which I have altered to work for items. The only issue is when I have the function name the object it always comes out in the same order, whereas I'm hoping to select random options from a split. Anyways here's the code.\r\n```\r\nif (HasInt(game, \"newhelmra\")) {\r\n  game.newhelmra = game.newhelmra + 1\r\n}\r\nelse {\r\n  game.newhelmra = 1\r\n}\r\ncreate (\"rahelm\" + game.newhelmra)\r\nobj = GetObject(\"rahelm\" + game.newhelmra)\r\nobj.parent = loc\r\nobj.displayverbs = Split(\"Take;Equip;Unequip\", \";\")\r\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\r\nobj.equiped = false\r\nobj.lvl = player.lvl\r\nobj.equip => {\r\n  if (Got(this)) {\r\n    equiphelm (this)\r\n  }\r\n  else {\r\n    msg (\"You can't equip a helmet unless its in your inventory.\")\r\n  }\r\n}\r\nobj.take => {\r\n  AddToInventory (this)\r\n}\r\nobj.drop => {\r\n  MoveObjectHere (this)\r\n  candrop (this)\r\n}\r\nobj.unequip => {\r\n  unequiphelm (this)\r\n}\r\n```\r\nThis is the section where I set the options I would like to be randomly selected.\r\n```\r\nnames7 = Split(\"durable ;reflective ;strong ;quick ;smart ;keen \", \";\") \r\nnames8 = Split(\" and defensive ; and resistive ; and tough ; and agile ; and educated ; and wise \", \";\")\r\n```\r\n```\r\nif (player.lvl <= 5) {\r\n```\r\nThis is where I name the object. I thought the % would randomize for me, but I'm honestly not entirely sure whats happening in the \"StringListItem\" function.\r\n```\r\n  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra %\r\nListCount(names8)) + \"rare wooden helmet\"\r\n```\r\n```\r\n  obj.listalias = CapFirst(obj.alias)\r\n  obj.res = 1\r\n  obj.def = 2\r\n  obj.str = 0\r\n  obj.agi = 0\r\n  obj.int = 0\r\n  obj.perc = 0\r\n}\r\nelse if (player.lvl > 5 and player.lvl <=10) {\r\n  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra % ListCount(names8)) + \"rare stone helmet\"\r\n  obj.listalias = CapFirst(obj.alias)\r\n  obj.res = 2\r\n  obj.def = 4\r\n  obj.str = 0\r\n  obj.agi = 0\r\n  obj.int = 0\r\n  obj.perc = 0\r\n}\r\nelse if (player.lvl > 10 and player.lvl <= 50) {\r\n  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra % ListCount(names8)) + \"rare metal helmet\"\r\n  obj.listalias = CapFirst(obj.alias)\r\n  obj.res = 4\r\n  obj.def = 8\r\n  obj.str = 0\r\n  obj.agi = 0\r\n  obj.int = 0\r\n  obj.perc = 0\r\n}\r\nif (IsRegexMatch (\"durable \", obj.alias)) {\r\n  obj.def = obj.def + player.lvl\r\n}\r\nelse if (IsRegexMatch (\"reflective \", obj.alias)) {\r\n  obj.res = obj.res + player.lvl\r\n}\r\nelse if (IsRegexMatch (\"strong \", obj.alias)) {\r\n  obj.str = obj.str + player.lvl\r\n}\r\nelse if (IsRegexMatch (\"quick \", obj.alias)) {\r\n  obj.agi = obj.agi + player.lvl\r\n}\r\nelse if (IsRegexMatch (\"smart \", obj.alias)) {\r\n  obj.int = obj.int + player.lvl\r\n}\r\nelse if (IsRegexMatch (\"keen \", obj.alias)) {\r\n  obj.perc = obj.perc + player.lvl\r\n}\r\nif (IsRegexMatch (\" and defensive \", obj.alias)) {\r\n  obj.def = obj.def + player.lvl\r\n}\r\nelse if (IsRegexMatch (\" and resistive \", obj.alias)) {\r\n  obj.res = obj.res + player.lvl\r\n}\r\nelse if (IsRegexMatch (\" and tough \", obj.alias)) {\r\n  obj.str = obj.str + player.lvl\r\n}\r\nelse if (IsRegexMatch (\" and agile \", obj.alias)) {\r\n  obj.agi = obj.agi + player.lvl\r\n}\r\nelse if (IsRegexMatch (\" and educated \", obj.alias)) {\r\n  obj.int = obj.int + player.lvl\r\n}\r\nelse if (IsRegexMatch (\" and wise \", obj.alias)) {\r\n  obj.perc = obj.perc + player.lvl\r\n}\r\n```\r\nI'm stilling getting on my feet with coding and any help with this would be awesome!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey everyone,</p>\n<p>I found this amazing script by pix for creating zombies, which I have altered to work for items. The only issue is when I have the function name the object it always comes out in the same order, whereas I'm hoping to select random options from a split. Anyways here's the code.</p>\n<pre><code>if (HasInt(game, \"newhelmra\")) {\n  game.newhelmra = game.newhelmra + 1\n}\nelse {\n  game.newhelmra = 1\n}\ncreate (\"rahelm\" + game.newhelmra)\nobj = GetObject(\"rahelm\" + game.newhelmra)\nobj.parent = loc\nobj.displayverbs = Split(\"Take;Equip;Unequip\", \";\")\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\nobj.equiped = false\nobj.lvl = player.lvl\nobj.equip =&gt; {\n  if (Got(this)) {\n    equiphelm (this)\n  }\n  else {\n    msg (\"You can't equip a helmet unless its in your inventory.\")\n  }\n}\nobj.take =&gt; {\n  AddToInventory (this)\n}\nobj.drop =&gt; {\n  MoveObjectHere (this)\n  candrop (this)\n}\nobj.unequip =&gt; {\n  unequiphelm (this)\n}\n</code></pre>\n<p>This is the section where I set the options I would like to be randomly selected.</p>\n<pre><code>names7 = Split(\"durable ;reflective ;strong ;quick ;smart ;keen \", \";\") \nnames8 = Split(\" and defensive ; and resistive ; and tough ; and agile ; and educated ; and wise \", \";\")\n</code></pre>\n<pre><code>if (player.lvl &lt;= 5) {\n</code></pre>\n<p>This is where I name the object. I thought the % would randomize for me, but I'm honestly not entirely sure whats happening in the \"StringListItem\" function.</p>\n<pre><code>  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra %\nListCount(names8)) + \"rare wooden helmet\"\n</code></pre>\n<pre><code>  obj.listalias = CapFirst(obj.alias)\n  obj.res = 1\n  obj.def = 2\n  obj.str = 0\n  obj.agi = 0\n  obj.int = 0\n  obj.perc = 0\n}\nelse if (player.lvl &gt; 5 and player.lvl &lt;=10) {\n  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra % ListCount(names8)) + \"rare stone helmet\"\n  obj.listalias = CapFirst(obj.alias)\n  obj.res = 2\n  obj.def = 4\n  obj.str = 0\n  obj.agi = 0\n  obj.int = 0\n  obj.perc = 0\n}\nelse if (player.lvl &gt; 10 and player.lvl &lt;= 50) {\n  obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra % ListCount(names8)) + \"rare metal helmet\"\n  obj.listalias = CapFirst(obj.alias)\n  obj.res = 4\n  obj.def = 8\n  obj.str = 0\n  obj.agi = 0\n  obj.int = 0\n  obj.perc = 0\n}\nif (IsRegexMatch (\"durable \", obj.alias)) {\n  obj.def = obj.def + player.lvl\n}\nelse if (IsRegexMatch (\"reflective \", obj.alias)) {\n  obj.res = obj.res + player.lvl\n}\nelse if (IsRegexMatch (\"strong \", obj.alias)) {\n  obj.str = obj.str + player.lvl\n}\nelse if (IsRegexMatch (\"quick \", obj.alias)) {\n  obj.agi = obj.agi + player.lvl\n}\nelse if (IsRegexMatch (\"smart \", obj.alias)) {\n  obj.int = obj.int + player.lvl\n}\nelse if (IsRegexMatch (\"keen \", obj.alias)) {\n  obj.perc = obj.perc + player.lvl\n}\nif (IsRegexMatch (\" and defensive \", obj.alias)) {\n  obj.def = obj.def + player.lvl\n}\nelse if (IsRegexMatch (\" and resistive \", obj.alias)) {\n  obj.res = obj.res + player.lvl\n}\nelse if (IsRegexMatch (\" and tough \", obj.alias)) {\n  obj.str = obj.str + player.lvl\n}\nelse if (IsRegexMatch (\" and agile \", obj.alias)) {\n  obj.agi = obj.agi + player.lvl\n}\nelse if (IsRegexMatch (\" and educated \", obj.alias)) {\n  obj.int = obj.int + player.lvl\n}\nelse if (IsRegexMatch (\" and wise \", obj.alias)) {\n  obj.perc = obj.perc + player.lvl\n}\n</code></pre>\n<p>I'm stilling getting on my feet with coding and any help with this would be awesome!</p>\n\n",
      "PostDate": "2020-05-11T09:20:29.0584653Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f1ef0b5a-d472-4773-995a-b67be5b80db8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> This is where I name the object. I thought the % would randomize for me, but I'm honestly not entirely sure whats happening in the \"StringListItem\" function.\r\n> `obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra %\r\nListCount(names8)) + \"rare wooden helmet\"`\r\n\r\nNo; `%` is the modulo operator; it finds the remainder of a division. Your names7 array has 6 elements, so if `game.newhelmra` is 0-5, it returns that number. As the number goes up by 1 every time this function is run, then `game.newhelmra % ListCount(names7)` will start by giving `1` the first time it is run, then 2, then 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2 and so on.\r\n\r\nIf you want to pick a random element each time, you want to use random numbers. Like this:\r\n```\r\nobj.alias = PickOneString (names7) + PickOneString (names8) + \"rare wooden helmet\"\r\n```\r\n\r\nThat's actually shorthand for:\r\n```\r\nobj.alias = ListItem (names7, GetRandomInt (0, ListCount (names7) - 1)) + ListItem (names8, GetRandomInt (0, ListCount (names8) - 1)) + \"rare wooden helmet\"\r\n```\r\n<hr />\r\n\r\nI think that should answer your question. There's a few other things that would bug me about the script (like not being able to put the helmet in a container, and using quite a lot of code to do things that there are simple functions for), but I know I shouldn't interfere with someone else's code.\r\n\r\nHappy to help if there's anything else giving you a problem.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This is where I name the object. I thought the % would randomize for me, but I'm honestly not entirely sure whats happening in the \"StringListItem\" function.<br>\n<code>obj.alias = StringListItem(names7, game.newhelmra % ListCount(names7)) + StringListItem(names8, game.newhelmra % ListCount(names8)) + \"rare wooden helmet\"</code></p>\n</blockquote>\n<p>No; <code>%</code> is the modulo operator; it finds the remainder of a division. Your names7 array has 6 elements, so if <code>game.newhelmra</code> is 0-5, it returns that number. As the number goes up by 1 every time this function is run, then <code>game.newhelmra % ListCount(names7)</code> will start by giving <code>1</code> the first time it is run, then 2, then 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2 and so on.</p>\n<p>If you want to pick a random element each time, you want to use random numbers. Like this:</p>\n<pre><code>obj.alias = PickOneString (names7) + PickOneString (names8) + \"rare wooden helmet\"\n</code></pre>\n<p>That's actually shorthand for:</p>\n<pre><code>obj.alias = ListItem (names7, GetRandomInt (0, ListCount (names7) - 1)) + ListItem (names8, GetRandomInt (0, ListCount (names8) - 1)) + \"rare wooden helmet\"\n</code></pre>\n<hr>\n<p>I think that should answer your question. There's a few other things that would bug me about the script (like not being able to put the helmet in a container, and using quite a lot of code to do things that there are simple functions for), but I know I shouldn't interfere with someone else's code.</p>\n<p>Happy to help if there's anything else giving you a problem.</p>\n\n",
      "PostDate": "2020-05-11T19:05:44.7759505Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d482573-40c4-4c1e-8868-a2a8c53bd408",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**mrangel** that answers my question perfectly!\r\n\r\nI'm not really great at utilizing all of the built in functions yet, as this is my second week or so using the program. I would definitely be interested in any ways you know of that I could make this **prettier** if that's that word?\r\n\r\nI've been doing my best to scour the forums for answers, but I worry that this is causing a hodge-podge of extra code and clunky functions.\r\n\r\nTo be completely honest, I was so proud of myself for even getting this to make an item I had to have a short celebration xD",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>mrangel</strong> that answers my question perfectly!</p>\n<p>I'm not really great at utilizing all of the built in functions yet, as this is my second week or so using the program. I would definitely be interested in any ways you know of that I could make this <strong>prettier</strong> if that's that word?</p>\n<p>I've been doing my best to scour the forums for answers, but I worry that this is causing a hodge-podge of extra code and clunky functions.</p>\n<p>To be completely honest, I was so proud of myself for even getting this to make an item I had to have a short celebration xD</p>\n\n",
      "PostDate": "2020-05-11T19:49:40.6822924Z",
      "LastEditDate": "2020-05-11T19:53:28.3558181Z",
      "link": null
    },
    {
      "PostId": "45b717bf-790e-461f-9d7e-5949e3b17a88",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One thing I would simplify is this code, which I've seen pasted on the forum by so many people:\r\n```\r\nif (HasInt(game, \"newhelmra\")) {\r\n  game.newhelmra = game.newhelmra + 1\r\n}\r\nelse {\r\n  game.newhelmra = 1\r\n}\r\ncreate (\"rahelm\" + game.newhelmra)\r\nobj = GetObject(\"rahelm\" + game.newhelmra)\r\n```\r\n\r\nMy version, which does exactly the same thing:\r\n```\r\nname = GetUniqueElementName (\"rahelm\")\r\ncreate (name)\r\nobj = GetObject(name)\r\n```\r\n\r\n<hr />\r\n\r\nThe 'drop' script is used when the [player enters \"drop helmet\", but *also* when the player does something like \"put helmet in bag\". In the latter case, you don't want the helmet to end up on the floor; so unless you're removing the put command, I think you probably want <code style=\"color: darkgreen\">MoveObject (this, destination)</code> rather than `MoveObjectHere (this)`.\r\n\r\n(I can't say anything about your `candrop` function, because I don't know what it does. But the name seems a little confusing; anyone helping with some other part of the code in future might expect it to be a function that tests it an object can be dropped, rather than a function which is run after dropping an object.\r\n\r\n<hr />\r\n\r\nThe long section of determining the object's stats is an interesting way to do it, but I think there's a lot of repetition of code there; and although regular expressions are relatively fast, compiling and running 12 of them is still quite slow.\r\n\r\nI think this is more a matter of personal style; but I would have gone for something more like:\r\n```\r\nforeach (word, Split(obj.alias, \" \")) {\r\n  switch (word) {\r\n    case (\"durable\", \"defensive\") {\r\n      obj.def = obj.def + player.lvl\r\n    }\r\n    case (\"reflective\", \"resistive\") {\r\n      obj.res = obj.res + player.lvl\r\n    }\r\n    case (\"strong\", \"tough\") {\r\n      obj.str = obj.str + player.lvl\r\n    }\r\n    case (\"quick\", \"agile\") {\r\n      obj.agi = obj.agi + player.lvl\r\n    }\r\n    case (\"smart\", \"educated\") {\r\n      obj.int = obj.int + player.lvl\r\n    }\r\n    case (\"keen\", \"wise\") {\r\n      obj.perc = obj.perc + player.lvl\r\n    }\r\n  }\r\n}\r\n```\r\n(or, depending on the options that might be available in other parts of this code, put some kind of markup in with the strings. Like:\r\n```\r\nname_part = PickOneString (Split (\"durable/def;reflective/res;strong/str;quick/agi;smart/int;keen/perc\"))\r\n```\r\nand split the resulting name_part at the slash; putting the first part in the alias and the second as a stat increase.\r\n\r\n<hr />\r\n\r\nA comment on: `else if (player.lvl > 10 and player.lvl <= 50) {`\r\n\r\nYou already know at this point that the level is greater than 10, because the `else` takes care of that. And if the level is greater than 50, it won't give the item any stats at all, causing an error when it tries to add something to them later. If the player's level can't go above 50 (which I'd guess is the case), you could replace this line with simply `else {`.\r\n\r\nIf you're using the `(player.lvl > 10 and player.lvl <= 50)` as a memo to yourself, to remind you of what conditions lead to that branch, that's fine. Seems to be quite common around here. But really, that's what comments are meant for.",
      "EditableFormat": "markdown",
      "HTML": "<p>One thing I would simplify is this code, which I've seen pasted on the forum by so many people:</p>\n<pre><code>if (HasInt(game, \"newhelmra\")) {\n  game.newhelmra = game.newhelmra + 1\n}\nelse {\n  game.newhelmra = 1\n}\ncreate (\"rahelm\" + game.newhelmra)\nobj = GetObject(\"rahelm\" + game.newhelmra)\n</code></pre>\n<p>My version, which does exactly the same thing:</p>\n<pre><code>name = GetUniqueElementName (\"rahelm\")\ncreate (name)\nobj = GetObject(name)\n</code></pre>\n<hr>\n<p>The 'drop' script is used when the [player enters \"drop helmet\", but <em>also</em> when the player does something like \"put helmet in bag\". In the latter case, you don't want the helmet to end up on the floor; so unless you're removing the put command, I think you probably want <code style=\"color: darkgreen\">MoveObject (this, destination)</code> rather than <code>MoveObjectHere (this)</code>.</p>\n<p>(I can't say anything about your <code>candrop</code> function, because I don't know what it does. But the name seems a little confusing; anyone helping with some other part of the code in future might expect it to be a function that tests it an object can be dropped, rather than a function which is run after dropping an object.</p>\n<hr>\n<p>The long section of determining the object's stats is an interesting way to do it, but I think there's a lot of repetition of code there; and although regular expressions are relatively fast, compiling and running 12 of them is still quite slow.</p>\n<p>I think this is more a matter of personal style; but I would have gone for something more like:</p>\n<pre><code>foreach (word, Split(obj.alias, \" \")) {\n  switch (word) {\n    case (\"durable\", \"defensive\") {\n      obj.def = obj.def + player.lvl\n    }\n    case (\"reflective\", \"resistive\") {\n      obj.res = obj.res + player.lvl\n    }\n    case (\"strong\", \"tough\") {\n      obj.str = obj.str + player.lvl\n    }\n    case (\"quick\", \"agile\") {\n      obj.agi = obj.agi + player.lvl\n    }\n    case (\"smart\", \"educated\") {\n      obj.int = obj.int + player.lvl\n    }\n    case (\"keen\", \"wise\") {\n      obj.perc = obj.perc + player.lvl\n    }\n  }\n}\n</code></pre>\n<p>(or, depending on the options that might be available in other parts of this code, put some kind of markup in with the strings. Like:</p>\n<pre><code>name_part = PickOneString (Split (\"durable/def;reflective/res;strong/str;quick/agi;smart/int;keen/perc\"))\n</code></pre>\n<p>and split the resulting name_part at the slash; putting the first part in the alias and the second as a stat increase.</p>\n<hr>\n<p>A comment on: <code>else if (player.lvl &gt; 10 and player.lvl &lt;= 50) {</code></p>\n<p>You already know at this point that the level is greater than 10, because the <code>else</code> takes care of that. And if the level is greater than 50, it won't give the item any stats at all, causing an error when it tries to add something to them later. If the player's level can't go above 50 (which I'd guess is the case), you could replace this line with simply <code>else {</code>.</p>\n<p>If you're using the <code>(player.lvl &gt; 10 and player.lvl &lt;= 50)</code> as a memo to yourself, to remind you of what conditions lead to that branch, that's fine. Seems to be quite common around here. But really, that's what comments are meant for.</p>\n\n",
      "PostDate": "2020-05-11T20:41:21.196214Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "79cc22e1-8af3-4eec-a26a-b967059dc2b7",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm definitely a fan of the way to create an object! Will I have to use a different name variables for different items? I.E. I have rahelm/rasword/raarmor will I have to use\r\n```\r\nname = GetUniqueElementName (\"rahelm\")\r\ncreate (name)\r\nobj = GetObject(name)\r\n```\r\nthen\r\n```\r\nname1 = GetUniqueElementName (\"rasword\")\r\ncreate (name1)\r\nobj = GetObject(name1)\r\n```\r\nfor different objects? Also I have different rarities, I.E unhelm/rahelm/leghelm. I'm currently just calling different functions for each rarity of each item type based off a random integer roll in a \"pickitem\" function.\r\n\r\nI.E\r\nif dice > 5 and <= 10 then call function (createrasword)\r\nif dice > 10 and <50 then call function (createunsword)\r\n\r\nMy candrop function is definitely wonky because I didn't understand how to edit the drop command when I made it. It basically forceruns the take command on the item after you drop it, if the item has a boolean \"equiped = true\". I just need to change the default drop script on initialize to check the boolean before it places the item I think.\r\n\r\nThe foreach function there seems to be what I've been trying to figure out as far my Regex lines go. Does that take each word in the alias and check it through the case functions? If so I think that answers my question about the uncommon/rare/legendary problem, as I could just add a check for  that word and set the type based on which case it finds. \r\n\r\nThe name_part section looks interesting, but is a little more complicated then my brain can process right now, does it do the same thing as the foreach? I'll do some more research on **PickOneString** and **Split** then take another look at this.\r\n\r\nThe player level is set to 50 for now because I'm planning on adding more else if's I just wasn't sure to call the next one after metal helmet, or how strong it should be yet so I set it to a level you probably wont reach  xD I will set the final option to else.\r\n\r\nLastly the container section. I have been thinking about adding a weapon/armor rack to store items, but was thinking I would have to add a separate verb for it(I have friends who aren't great at spelling would rather click a button that spells it for them). It sounds like the option your suggesting wouldn't quite accommodate that.\r\n\r\nThank you **So So** much!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm definitely a fan of the way to create an object! Will I have to use a different name variables for different items? I.E. I have rahelm/rasword/raarmor will I have to use</p>\n<pre><code>name = GetUniqueElementName (\"rahelm\")\ncreate (name)\nobj = GetObject(name)\n</code></pre>\n<p>then</p>\n<pre><code>name1 = GetUniqueElementName (\"rasword\")\ncreate (name1)\nobj = GetObject(name1)\n</code></pre>\n<p>for different objects? Also I have different rarities, I.E unhelm/rahelm/leghelm. I'm currently just calling different functions for each rarity of each item type based off a random integer roll in a \"pickitem\" function.</p>\n<p>I.E<br>\nif dice &gt; 5 and &lt;= 10 then call function (createrasword)<br>\nif dice &gt; 10 and &lt;50 then call function (createunsword)</p>\n<p>My candrop function is definitely wonky because I didn't understand how to edit the drop command when I made it. It basically forceruns the take command on the item after you drop it, if the item has a boolean \"equiped = true\". I just need to change the default drop script on initialize to check the boolean before it places the item I think.</p>\n<p>The foreach function there seems to be what I've been trying to figure out as far my Regex lines go. Does that take each word in the alias and check it through the case functions? If so I think that answers my question about the uncommon/rare/legendary problem, as I could just add a check for  that word and set the type based on which case it finds.</p>\n<p>The name_part section looks interesting, but is a little more complicated then my brain can process right now, does it do the same thing as the foreach? I'll do some more research on <strong>PickOneString</strong> and <strong>Split</strong> then take another look at this.</p>\n<p>The player level is set to 50 for now because I'm planning on adding more else if's I just wasn't sure to call the next one after metal helmet, or how strong it should be yet so I set it to a level you probably wont reach  xD I will set the final option to else.</p>\n<p>Lastly the container section. I have been thinking about adding a weapon/armor rack to store items, but was thinking I would have to add a separate verb for it(I have friends who aren't great at spelling would rather click a button that spells it for them). It sounds like the option your suggesting wouldn't quite accommodate that.</p>\n<p>Thank you <strong>So So</strong> much!!!</p>\n\n",
      "PostDate": "2020-05-11T22:25:56.7309723Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aa016ab7-8025-4ccf-89f0-ba7728b60c83",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm definitely a fan of the way to create an object! Will I have to use a different name variables for different items?\r\n\r\nProbably not. The variable `name` doesn't belong to an object, so it's discarded as soon as the script finishes. If you need to refer to the last object created of a certain type, you could make it an attribute of some object; but I don't think there's any more reason to refer to the name once you have the object.\r\n\r\n> Also I have different rarities, I.E unhelm/rahelm/leghelm. I'm currently just calling different functions for each rarity of each item type based off a random integer roll in a \"pickitem\" function.\r\n\r\nHow different are the different rarities? If they're pretty similar, it might be easier to make it all part of one function.\r\n\r\n> My candrop function is definitely wonky because I didn't understand how to edit the drop command when I made it. It basically forceruns the take command on the item after you drop it, if the item has a boolean \"equiped = true\". I just need to change the default drop script on initialize to check the boolean before it places the item I think.\r\n\r\nIn that case, I think you'd want:\r\n```\r\nobj.drop => {\r\n  if (this.equipped) {\r\n    msg (\"You need to take it off first\")\r\n  }\r\n  else {\r\n    msg (\"OK.\")\r\n    MoveObject (this, destination)\r\n  }\r\n}\r\n```\r\n> The foreach function there seems to be what I've been trying to figure out as far my Regex lines go. Does that take each word in the alias and check it through the case functions? If so I think that answers my question about the uncommon/rare/legendary problem, as I could just add a check for that word and set the type based on which case it finds.\r\n\r\nThat's what I was thinking :) And yes; it uses `Split` to break the alias up into words, and then does a `switch` call for each of them.\r\n\r\nExplaining switch/case is a little hard. A lot of people would say that it's like if/else if. You could say that these two scripts are the same:\r\n<table><tr>\r\n<td><pre><code>if (word = \"red\") {\r\n  // first response\r\n}\r\nelse if (word = \"green\") {\r\n  // second response\r\n}\r\nelse {\r\n  //default response\r\n}</code></pre></td>\r\n<td><pre><code>switch (word) {\r\n  case (\"red\") {\r\n    // first response\r\n  }\r\n  case (\"green\") {\r\n    // second response\r\n  }\r\n  default {\r\n    // default response\r\n  }\r\n}</code></pre></td></tr></table>\r\n\r\nBut as you saw in the example above, a `case` can have more than one option in it, with commas between them. And it can only test if things are equal.\r\n\r\nThe more important difference is that if/else if/else if is like flipping through a book looking for the chapter you want. On every page, you check which title you're looking for and compare them, until you find it. But switch/case basically constructs an 'index' first from all the \"case\" statements, and then looks up the word in it. Not 100% sure, but in most programming languages it will only need to build the index the first time; which means that it can be a lot faster (especially for large numbers of options).\r\n\r\n> The name_part section looks interesting, but is a little more complicated then my brain can process right now, does it do the same thing as the foreach?\r\n\r\nI think it could do. The code might be a little more complex to start with, but it means that each additional option adds less extra code. (It would be a lot easier to do it this way in Perl, my preferred programming language. But Quest's limited functionality requires some extra work)\r\n\r\nIf you're dealing with rarity in the same place, I suspect that using switch/case to handle different variants is probably the best option; because they are likely to have slightly different code.\r\n\r\n<hr />\r\n\r\nI'm imagining now a function with an extra parameter 'rarity', which would look something like:\r\n```\r\nname = GetUniqueElementName (rarity + \"helm\")\r\ncreate (name)\r\nobj = GetObject(name)\r\nobj.parent = loc\r\nobj.displayverbs = Split(\"Take;Equip;Unequip\", \";\")\r\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\r\nobj.equiped = false\r\nobj.lvl = player.lvl\r\nobj.equip => {\r\n  if (Got(this)) {\r\n    equiphelm (this)\r\n  }\r\n  else {\r\n    msg (\"You can't equip a helmet unless its in your inventory.\")\r\n  }\r\n}\r\nobj.take => {\r\n  AddToInventory (this)\r\n}\r\nobj.drop => {\r\n  if (this.equipped) {\r\n    msg (\"You need to take it off first\")\r\n  }\r\n  else {\r\n    msg (\"OK.\")\r\n    MoveObject (this, destination)\r\n  }\r\n}\r\nobj.unequip => {\r\n  unequiphelm (this)\r\n}\r\nalias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\r\nalias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\r\nalias = alias + \" \" + rarity\r\nif (obj.lvl <= 5) {\r\n  alias = alias + \" wooden helmet\"\r\n}\r\nelse if (obj.lvl <= 10) {\r\n  alias = alias + \" stone helmet\"\r\n}\r\nelse if (obj.lvl <= 50) {\r\n  alias = alias + \" metal helmet\"\r\n}\r\nelse {\r\n  alias = alias + \" cheese helmet\"\r\n}\r\nobj.alias = alias\r\nobj.listalias = CapFirst (alias)\r\nforeach (attr, Split(\"res;def;str;agi;int;perc\")) {\r\n  set (obj, attr, 0)\r\n}\r\nforeach (word, Split(obj.alias, \" \")) {\r\n  switch (word) {\r\n    case (\"wooden\") {\r\n      obj.res = obj.res + 1\r\n      obj.def = obj.def + 2\r\n    }\r\n    case (\"stone\") {\r\n      obj.res = obj.res + 2\r\n      obj.def = obj.def + 4\r\n    }\r\n    case (\"metal\") {\r\n      obj.res = obj.res + 4\r\n      obj.def = obj.def + 8\r\n    }\r\n    case (\"cheese\") {\r\n      obj.res = obj.res + 10\r\n      obj.def = obj.def + 12\r\n    }\r\n    case (\"durable\", \"defensive\") {\r\n      obj.def = obj.def + player.lvl\r\n    }\r\n    case (\"reflective\", \"resistive\") {\r\n      obj.res = obj.res + player.lvl\r\n    }\r\n    case (\"strong\", \"tough\") {\r\n      obj.str = obj.str + player.lvl\r\n    }\r\n    case (\"quick\", \"agile\") {\r\n      obj.agi = obj.agi + player.lvl\r\n    }\r\n    case (\"smart\", \"educated\") {\r\n      obj.int = obj.int + player.lvl\r\n    }\r\n    case (\"keen\", \"wise\") {\r\n      obj.perc = obj.perc + player.lvl\r\n    }\r\n    case (\"rare\") {\r\n      // whatever difference it makes\r\n    }\r\n    case (\"legendary\") {\r\n      // whatever difference it makes\r\n    }\r\n  }\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm definitely a fan of the way to create an object! Will I have to use a different name variables for different items?</p>\n</blockquote>\n<p>Probably not. The variable <code>name</code> doesn't belong to an object, so it's discarded as soon as the script finishes. If you need to refer to the last object created of a certain type, you could make it an attribute of some object; but I don't think there's any more reason to refer to the name once you have the object.</p>\n<blockquote>\n<p>Also I have different rarities, I.E unhelm/rahelm/leghelm. I'm currently just calling different functions for each rarity of each item type based off a random integer roll in a \"pickitem\" function.</p>\n</blockquote>\n<p>How different are the different rarities? If they're pretty similar, it might be easier to make it all part of one function.</p>\n<blockquote>\n<p>My candrop function is definitely wonky because I didn't understand how to edit the drop command when I made it. It basically forceruns the take command on the item after you drop it, if the item has a boolean \"equiped = true\". I just need to change the default drop script on initialize to check the boolean before it places the item I think.</p>\n</blockquote>\n<p>In that case, I think you'd want:</p>\n<pre><code>obj.drop =&gt; {\n  if (this.equipped) {\n    msg (\"You need to take it off first\")\n  }\n  else {\n    msg (\"OK.\")\n    MoveObject (this, destination)\n  }\n}\n</code></pre>\n<blockquote>\n<p>The foreach function there seems to be what I've been trying to figure out as far my Regex lines go. Does that take each word in the alias and check it through the case functions? If so I think that answers my question about the uncommon/rare/legendary problem, as I could just add a check for that word and set the type based on which case it finds.</p>\n</blockquote>\n<p>That's what I was thinking :) And yes; it uses <code>Split</code> to break the alias up into words, and then does a <code>switch</code> call for each of them.</p>\n<p>Explaining switch/case is a little hard. A lot of people would say that it's like if/else if. You could say that these two scripts are the same:</p>\n<table><tbody><tr>\n<td><pre><code>if (word = \"red\") {\n  // first response\n}\nelse if (word = \"green\") {\n  // second response\n}\nelse {\n  //default response\n}</code></pre></td>\n<td><pre><code>switch (word) {\n  case (\"red\") {\n    // first response\n  }\n  case (\"green\") {\n    // second response\n  }\n  default {\n    // default response\n  }\n}</code></pre></td></tr></tbody></table>\n<p>But as you saw in the example above, a <code>case</code> can have more than one option in it, with commas between them. And it can only test if things are equal.</p>\n<p>The more important difference is that if/else if/else if is like flipping through a book looking for the chapter you want. On every page, you check which title you're looking for and compare them, until you find it. But switch/case basically constructs an 'index' first from all the \"case\" statements, and then looks up the word in it. Not 100% sure, but in most programming languages it will only need to build the index the first time; which means that it can be a lot faster (especially for large numbers of options).</p>\n<blockquote>\n<p>The name_part section looks interesting, but is a little more complicated then my brain can process right now, does it do the same thing as the foreach?</p>\n</blockquote>\n<p>I think it could do. The code might be a little more complex to start with, but it means that each additional option adds less extra code. (It would be a lot easier to do it this way in Perl, my preferred programming language. But Quest's limited functionality requires some extra work)</p>\n<p>If you're dealing with rarity in the same place, I suspect that using switch/case to handle different variants is probably the best option; because they are likely to have slightly different code.</p>\n<hr>\n<p>I'm imagining now a function with an extra parameter 'rarity', which would look something like:</p>\n<pre><code>name = GetUniqueElementName (rarity + \"helm\")\ncreate (name)\nobj = GetObject(name)\nobj.parent = loc\nobj.displayverbs = Split(\"Take;Equip;Unequip\", \";\")\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\nobj.equiped = false\nobj.lvl = player.lvl\nobj.equip =&gt; {\n  if (Got(this)) {\n    equiphelm (this)\n  }\n  else {\n    msg (\"You can't equip a helmet unless its in your inventory.\")\n  }\n}\nobj.take =&gt; {\n  AddToInventory (this)\n}\nobj.drop =&gt; {\n  if (this.equipped) {\n    msg (\"You need to take it off first\")\n  }\n  else {\n    msg (\"OK.\")\n    MoveObject (this, destination)\n  }\n}\nobj.unequip =&gt; {\n  unequiphelm (this)\n}\nalias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\nalias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\nalias = alias + \" \" + rarity\nif (obj.lvl &lt;= 5) {\n  alias = alias + \" wooden helmet\"\n}\nelse if (obj.lvl &lt;= 10) {\n  alias = alias + \" stone helmet\"\n}\nelse if (obj.lvl &lt;= 50) {\n  alias = alias + \" metal helmet\"\n}\nelse {\n  alias = alias + \" cheese helmet\"\n}\nobj.alias = alias\nobj.listalias = CapFirst (alias)\nforeach (attr, Split(\"res;def;str;agi;int;perc\")) {\n  set (obj, attr, 0)\n}\nforeach (word, Split(obj.alias, \" \")) {\n  switch (word) {\n    case (\"wooden\") {\n      obj.res = obj.res + 1\n      obj.def = obj.def + 2\n    }\n    case (\"stone\") {\n      obj.res = obj.res + 2\n      obj.def = obj.def + 4\n    }\n    case (\"metal\") {\n      obj.res = obj.res + 4\n      obj.def = obj.def + 8\n    }\n    case (\"cheese\") {\n      obj.res = obj.res + 10\n      obj.def = obj.def + 12\n    }\n    case (\"durable\", \"defensive\") {\n      obj.def = obj.def + player.lvl\n    }\n    case (\"reflective\", \"resistive\") {\n      obj.res = obj.res + player.lvl\n    }\n    case (\"strong\", \"tough\") {\n      obj.str = obj.str + player.lvl\n    }\n    case (\"quick\", \"agile\") {\n      obj.agi = obj.agi + player.lvl\n    }\n    case (\"smart\", \"educated\") {\n      obj.int = obj.int + player.lvl\n    }\n    case (\"keen\", \"wise\") {\n      obj.perc = obj.perc + player.lvl\n    }\n    case (\"rare\") {\n      // whatever difference it makes\n    }\n    case (\"legendary\") {\n      // whatever difference it makes\n    }\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2020-05-11T23:36:24.1995801Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6e62eb9d-51b3-4910-aa67-213e3cf080db",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ":'D it's so pretty. . .\r\n\r\nSo the only major difference between rarities is the number of names it gets. Uncommon gets the first set, rare also gets the and set, and legendary gets an of set on top of those. I'm thinking we could change this section\r\n\r\n```\r\nalias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\r\nalias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\r\nalias = alias + \" \" + rarity\r\n```\r\n\r\nI'm thinking this would work.\r\n```\r\nif (rarity = uncommon) {\r\n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\r\n  alias = alias + \" \" + rarity\r\nelse if (rarity = rare) {\r\n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\r\n  alias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\r\n  alias = alias + \" \" + rarity\r\nelse if (rarity = legendary)  \r\n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\r\n  alias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\r\n  alias = alias + \" \" + rarity\r\n  alias = alias + \" of \" + PickOneString (Split (\"armor;magic resistance;the bear;speed;wits;sight\"))\r\n```\r\nDo you think it would be better to set the helmets base def/res/str/agi/int/perc in this if check, and remove the rarity case check; or set them later in the case check, and leave this function for setting the name; or neither because I'm looking at this the hard way? I do need the base for them all set, even if they are 0 for my equip/unequip function.",
      "EditableFormat": "markdown",
      "HTML": "<p>:'D it's so pretty. . .</p>\n<p>So the only major difference between rarities is the number of names it gets. Uncommon gets the first set, rare also gets the and set, and legendary gets an of set on top of those. I'm thinking we could change this section</p>\n<pre><code>alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\nalias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\nalias = alias + \" \" + rarity\n</code></pre>\n<p>I'm thinking this would work.</p>\n<pre><code>if (rarity = uncommon) {\n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\n  alias = alias + \" \" + rarity\nelse if (rarity = rare) {\n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\n  alias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\n  alias = alias + \" \" + rarity\nelse if (rarity = legendary)  \n  alias = PickOneString (Split(\"durable;reflective;strong;quick;smart;keen\"))\n  alias = alias + \" and \" + PickOneString (Split (\"defensive;resistive;tough;agile;educated;wise\"))\n  alias = alias + \" \" + rarity\n  alias = alias + \" of \" + PickOneString (Split (\"armor;magic resistance;the bear;speed;wits;sight\"))\n</code></pre>\n<p>Do you think it would be better to set the helmets base def/res/str/agi/int/perc in this if check, and remove the rarity case check; or set them later in the case check, and leave this function for setting the name; or neither because I'm looking at this the hard way? I do need the base for them all set, even if they are 0 for my equip/unequip function.</p>\n\n",
      "PostDate": "2020-05-12T01:33:29.5852669Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "207fc3ec-088c-4f85-802c-534e845e2bc6",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay I took a look at this all again and realized that wouldn't work and you already added a case for the base stats. I also changed my equip function to check if the item has a variable before it check its. So I don't need 0's anymore.\r\nI started working on the script for a weapon and broke it somehow.  I think I'm just missing a bracket somewhere.\r\n```\r\nname = GetUniqueElementName (rarity + \"sword\")\r\ncreate (name)\r\nobj = GetObject(name)\r\nobj.parent = loc\r\nobj.displayverbs = \"Take\"\r\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\r\nobj.equiped = false\r\nobj.lvl = player.lvl\r\nobj.equip => {\r\n  if (Got(this)) {\r\n    equipweapon (this)\r\n  }\r\n  else {\r\n    msg (\"You can't equip a weapon unless its in your inventory.\")\r\n  }\r\n}\r\nobj.take => {\r\n  AddToInventory (this)\r\n}\r\nobj.drop => {\r\n  if (this.equipped) {\r\n    msg (\"You need to take it off first\")\r\n  }\r\n  else {\r\n    msg (\"OK.\")\r\n    MoveObject (this, destination)\r\n  }\r\n}\r\nobj.unequip => {\r\n  unequipwep (this)\r\n}\r\nif (rarity = \"uncommon\") {\r\n  alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n  alias = alias + \" \" + rarity\r\n  if (obj.lvl <= 5) {\r\n    alias = alias + \" wooden helmet\"\r\n  }\r\n  else if (obj.lvl <= 10) {\r\n    alias = alias + \" stone helmet\"\r\n  }\r\n  else if (obj.lvl <= 50) {\r\n    alias = alias + \" metal helmet\"\r\n  }\r\n  else {\r\n    alias = alias + \" cheese helmet\"\r\n  }\r\n  else if (rarity = \"rare\") {\r\n    alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n    alias = alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\r\n    alias = alias + \" \" + rarity\r\n    if (obj.lvl <= 5) {\r\n      alias = alias + \" wooden helmet\"\r\n    }\r\n    else if (obj.lvl <= 10) {\r\n      alias = alias + \" stone helmet\"\r\n    }\r\n    else if (obj.lvl <= 50) {\r\n      alias = alias + \" metal helmet\"\r\n    }\r\n    else {\r\n      alias = alias + \" cheese helmet\"\r\n    }\r\n    else if (rarity = \"legendary\") {\r\n      alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n      alias = alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\r\n      alias = alias + \" \" + rarity\r\n      if (obj.lvl <= 5) {\r\n        alias = alias + \" wooden helmet\"\r\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n      }\r\n      else if (obj.lvl <= 10) {\r\n        alias = alias + \" stone helmet\"\r\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n      }\r\n      else if (obj.lvl <= 50) {\r\n        alias = alias + \" metal helmet\"\r\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n      }\r\n      else {\r\n        alias = alias + \" cheese helmet\"\r\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n      }\r\n    }\r\n    foreach (word, Split(obj.alias, \" \")) {\r\n      switch (word) {\r\n        case (\"wooden\") {\r\n          obj.dmg = obj.dmg + 7\r\n          obj.str = obj.str + 2\r\n          case (\"stone\")\r\n          obj.dmg = obj.dmg + 20\r\n          obj.str = obj.str + 5\r\n          case (\"metal\")\r\n          obj.dmg = obj.dmg + 45\r\n          obj.str = obj.str + 10\r\n          case (\"cheese\")\r\n          obj.dmg = obj.dmg + 80\r\n          obj.str = obj.str + 18\r\n          case (\"sharp\", \"deadly\", \"power\") {\r\n            obj.dmg = obj.dmg + player.lvl + 2\r\n          }\r\n          case (\"magical\", \"mystical\", \"runes\") {\r\n            obj.mag = obj.mag + player.lvl + 2\r\n          }\r\n          case (\"strong\", \"tough\", \"bear\") {\r\n            obj.str = obj.str + player.lvl + 1\r\n          }\r\n          case (\"quick\", \"agile\", \"speed\") {\r\n            obj.agi = obj.agi + player.lvl + 1\r\n          }\r\n          case (\"smart\", \"educated\", \"wits\") {\r\n            obj.int = obj.int + player.lvl + 1\r\n          }\r\n          case (\"keen\", \"wise\", \"sight\") {\r\n            obj.perc = obj.perc + player.lvl + 1\r\n          }\r\n        }\r\n      }\r\n   }\r\n }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay I took a look at this all again and realized that wouldn't work and you already added a case for the base stats. I also changed my equip function to check if the item has a variable before it check its. So I don't need 0's anymore.<br>\nI started working on the script for a weapon and broke it somehow.  I think I'm just missing a bracket somewhere.</p>\n<pre><code>name = GetUniqueElementName (rarity + \"sword\")\ncreate (name)\nobj = GetObject(name)\nobj.parent = loc\nobj.displayverbs = \"Take\"\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\nobj.equiped = false\nobj.lvl = player.lvl\nobj.equip =&gt; {\n  if (Got(this)) {\n    equipweapon (this)\n  }\n  else {\n    msg (\"You can't equip a weapon unless its in your inventory.\")\n  }\n}\nobj.take =&gt; {\n  AddToInventory (this)\n}\nobj.drop =&gt; {\n  if (this.equipped) {\n    msg (\"You need to take it off first\")\n  }\n  else {\n    msg (\"OK.\")\n    MoveObject (this, destination)\n  }\n}\nobj.unequip =&gt; {\n  unequipwep (this)\n}\nif (rarity = \"uncommon\") {\n  alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n  alias = alias + \" \" + rarity\n  if (obj.lvl &lt;= 5) {\n    alias = alias + \" wooden helmet\"\n  }\n  else if (obj.lvl &lt;= 10) {\n    alias = alias + \" stone helmet\"\n  }\n  else if (obj.lvl &lt;= 50) {\n    alias = alias + \" metal helmet\"\n  }\n  else {\n    alias = alias + \" cheese helmet\"\n  }\n  else if (rarity = \"rare\") {\n    alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n    alias = alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\n    alias = alias + \" \" + rarity\n    if (obj.lvl &lt;= 5) {\n      alias = alias + \" wooden helmet\"\n    }\n    else if (obj.lvl &lt;= 10) {\n      alias = alias + \" stone helmet\"\n    }\n    else if (obj.lvl &lt;= 50) {\n      alias = alias + \" metal helmet\"\n    }\n    else {\n      alias = alias + \" cheese helmet\"\n    }\n    else if (rarity = \"legendary\") {\n      alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n      alias = alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\n      alias = alias + \" \" + rarity\n      if (obj.lvl &lt;= 5) {\n        alias = alias + \" wooden helmet\"\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n      }\n      else if (obj.lvl &lt;= 10) {\n        alias = alias + \" stone helmet\"\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n      }\n      else if (obj.lvl &lt;= 50) {\n        alias = alias + \" metal helmet\"\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n      }\n      else {\n        alias = alias + \" cheese helmet\"\n        alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n      }\n    }\n    foreach (word, Split(obj.alias, \" \")) {\n      switch (word) {\n        case (\"wooden\") {\n          obj.dmg = obj.dmg + 7\n          obj.str = obj.str + 2\n          case (\"stone\")\n          obj.dmg = obj.dmg + 20\n          obj.str = obj.str + 5\n          case (\"metal\")\n          obj.dmg = obj.dmg + 45\n          obj.str = obj.str + 10\n          case (\"cheese\")\n          obj.dmg = obj.dmg + 80\n          obj.str = obj.str + 18\n          case (\"sharp\", \"deadly\", \"power\") {\n            obj.dmg = obj.dmg + player.lvl + 2\n          }\n          case (\"magical\", \"mystical\", \"runes\") {\n            obj.mag = obj.mag + player.lvl + 2\n          }\n          case (\"strong\", \"tough\", \"bear\") {\n            obj.str = obj.str + player.lvl + 1\n          }\n          case (\"quick\", \"agile\", \"speed\") {\n            obj.agi = obj.agi + player.lvl + 1\n          }\n          case (\"smart\", \"educated\", \"wits\") {\n            obj.int = obj.int + player.lvl + 1\n          }\n          case (\"keen\", \"wise\", \"sight\") {\n            obj.perc = obj.perc + player.lvl + 1\n          }\n        }\n      }\n   }\n }\n</code></pre>\n\n",
      "PostDate": "2020-05-12T02:19:53.5236912Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5de21c4b-07db-491a-b128-437cbe74fdf3",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I took one more crack at it. It's working and I think I did it about as simply as I could. Let me know what you think. Your help was **absolutely amazing.**\r\n```name = GetUniqueElementName (rarity + \"sword\")\r\ncreate (name)\r\nobj = GetObject(name)\r\nobj.parent = loc\r\nobj.displayverbs = Split(\"Take\", \";\")\r\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\r\nobj.equiped = false\r\nobj.lvl = player.lvl\r\nobj.equip => {\r\n  if (Got(this)) {\r\n    equipweapon (this)\r\n  }\r\n  else {\r\n    msg (\"You can't equip a weapon unless its in your inventory.\")\r\n  }\r\n}\r\nobj.take => {\r\n  AddToInventory (this)\r\n}\r\nobj.drop => {\r\n  if (this.equipped) {\r\n    msg (\"You need to take it off first\")\r\n  }\r\n  else {\r\n    msg (\"OK.\")\r\n    MoveObject (this, destination)\r\n  }\r\n}\r\nobj.unequip => {\r\n  unequipwep (this)\r\n}\r\nif (rarity = \"uncommon\") {\r\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n  obj.alias = obj.alias + \" \" + rarity\r\n  if (obj.lvl <= 5) {\r\n    obj.alias = obj.alias + \" wooden sword\"\r\n  }\r\n  else if (obj.lvl <= 10) {\r\n    obj.alias = obj.alias + \" stone sword\"\r\n  }\r\n  else if (obj.lvl <= 50) {\r\n    obj.alias = obj.alias + \" metal sword\"\r\n  }\r\n  else {\r\n    obj.alias = obj.alias + \" cheese sword\"\r\n  }\r\n}\r\nelse if (rarity = \"rare\") {\r\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\r\n  obj.alias = obj.alias + \" \" + rarity\r\n  if (obj.lvl <= 5) {\r\n    obj.alias = obj.alias + \" wooden sword\"\r\n  }\r\n  else if (obj.lvl <= 10) {\r\n    obj.alias = obj.alias + \" stone sword\"\r\n  }\r\n  else if (obj.lvl <= 50) {\r\n    obj.alias = obj.alias + \" metal sword\"\r\n  }\r\n  else {\r\n    obj.alias = obj.alias + \" cheese sword\"\r\n  }\r\n}\r\nelse if (rarity = \"legendary\") {\r\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\r\n  obj.alias = obj.alias + \" \" + rarity\r\n  if (obj.lvl <= 5) {\r\n    obj.alias = obj.alias + \" wooden sword\"\r\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n  }\r\n  else if (obj.lvl <= 10) {\r\n    obj.alias = obj.alias + \" stone sword\"\r\n    alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n  }\r\n  else if (obj.lvl <= 50) {\r\n    obj.alias = obj.alias + \" metal sword\"\r\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n  }\r\n  else {\r\n    obj.alias = obj.alias + \" cheese sword\"\r\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n  }\r\n}\r\nforeach (word, Split(obj.alias, \" \")) {\r\n  switch (word) {\r\n    case (\"wooden\") {\r\n      obj.dmg = 7\r\n      obj.mag = 0\r\n      obj.str = 2\r\n      obj.agi = 0\r\n      obj.int = 0\r\n      obj.perc = 0\r\n    }\r\n    case (\"stone\") {\r\n      obj.dmg = 20\r\n      obj.mag = 0\r\n      obj.str = 5\r\n      obj.agi = 0\r\n      obj.int = 0\r\n      obj.perc = 0\r\n    }\r\n    case (\"metal\") {\r\n      obj.dmg = 45\r\n      obj.mag = 0\r\n      obj.str = 10\r\n      obj.agi = 0\r\n      obj.int = 0\r\n      obj.perc = 0\r\n    }\r\n    case (\"cheese\") {\r\n      obj.dmg = 80\r\n      obj.mag = 0\r\n      obj.str = 18\r\n      obj.agi = 0\r\n      obj.int = 0\r\n      obj.perc = 0\r\n    }\r\n  }\r\n}\r\nforeach (word, Split(obj.alias, \" \")) {\r\n  switch (word) {\r\n    case (\"sharp\", \"deadly\", \"power\") {\r\n      obj.dmg = obj.dmg + player.lvl + 2\r\n    }\r\n    case (\"magical\", \"mystical\", \"runes\") {\r\n      obj.mag = obj.mag + player.lvl + 2\r\n    }\r\n    case (\"strong\", \"tough\", \"bear\") {\r\n      obj.str = obj.str + player.lvl + 1\r\n    }\r\n    case (\"quick\", \"agile\", \"speed\") {\r\n      obj.agi = obj.agi + player.lvl + 1\r\n    }\r\n    case (\"smart\", \"educated\", \"wits\") {\r\n      obj.int = obj.int + player.lvl + 1\r\n    }\r\n    case (\"keen\", \"wise\", \"sight\") {\r\n      obj.perc = obj.perc + player.lvl + 1\r\n    }\r\n  }\r\n}\r\nobj.alias = CapFirst (obj.alias)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I took one more crack at it. It's working and I think I did it about as simply as I could. Let me know what you think. Your help was <strong>absolutely amazing.</strong></p>\n<pre><code>create (name)\nobj = GetObject(name)\nobj.parent = loc\nobj.displayverbs = Split(\"Take\", \";\")\nobj.inventoryverbs = Split(\"Drop;Equip;Unequip\", \";\")\nobj.equiped = false\nobj.lvl = player.lvl\nobj.equip =&gt; {\n  if (Got(this)) {\n    equipweapon (this)\n  }\n  else {\n    msg (\"You can't equip a weapon unless its in your inventory.\")\n  }\n}\nobj.take =&gt; {\n  AddToInventory (this)\n}\nobj.drop =&gt; {\n  if (this.equipped) {\n    msg (\"You need to take it off first\")\n  }\n  else {\n    msg (\"OK.\")\n    MoveObject (this, destination)\n  }\n}\nobj.unequip =&gt; {\n  unequipwep (this)\n}\nif (rarity = \"uncommon\") {\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n  obj.alias = obj.alias + \" \" + rarity\n  if (obj.lvl &lt;= 5) {\n    obj.alias = obj.alias + \" wooden sword\"\n  }\n  else if (obj.lvl &lt;= 10) {\n    obj.alias = obj.alias + \" stone sword\"\n  }\n  else if (obj.lvl &lt;= 50) {\n    obj.alias = obj.alias + \" metal sword\"\n  }\n  else {\n    obj.alias = obj.alias + \" cheese sword\"\n  }\n}\nelse if (rarity = \"rare\") {\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\n  obj.alias = obj.alias + \" \" + rarity\n  if (obj.lvl &lt;= 5) {\n    obj.alias = obj.alias + \" wooden sword\"\n  }\n  else if (obj.lvl &lt;= 10) {\n    obj.alias = obj.alias + \" stone sword\"\n  }\n  else if (obj.lvl &lt;= 50) {\n    obj.alias = obj.alias + \" metal sword\"\n  }\n  else {\n    obj.alias = obj.alias + \" cheese sword\"\n  }\n}\nelse if (rarity = \"legendary\") {\n  obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\n  obj.alias = obj.alias + \" \" + rarity\n  if (obj.lvl &lt;= 5) {\n    obj.alias = obj.alias + \" wooden sword\"\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n  }\n  else if (obj.lvl &lt;= 10) {\n    obj.alias = obj.alias + \" stone sword\"\n    alias = alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n  }\n  else if (obj.lvl &lt;= 50) {\n    obj.alias = obj.alias + \" metal sword\"\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n  }\n  else {\n    obj.alias = obj.alias + \" cheese sword\"\n    obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n  }\n}\nforeach (word, Split(obj.alias, \" \")) {\n  switch (word) {\n    case (\"wooden\") {\n      obj.dmg = 7\n      obj.mag = 0\n      obj.str = 2\n      obj.agi = 0\n      obj.int = 0\n      obj.perc = 0\n    }\n    case (\"stone\") {\n      obj.dmg = 20\n      obj.mag = 0\n      obj.str = 5\n      obj.agi = 0\n      obj.int = 0\n      obj.perc = 0\n    }\n    case (\"metal\") {\n      obj.dmg = 45\n      obj.mag = 0\n      obj.str = 10\n      obj.agi = 0\n      obj.int = 0\n      obj.perc = 0\n    }\n    case (\"cheese\") {\n      obj.dmg = 80\n      obj.mag = 0\n      obj.str = 18\n      obj.agi = 0\n      obj.int = 0\n      obj.perc = 0\n    }\n  }\n}\nforeach (word, Split(obj.alias, \" \")) {\n  switch (word) {\n    case (\"sharp\", \"deadly\", \"power\") {\n      obj.dmg = obj.dmg + player.lvl + 2\n    }\n    case (\"magical\", \"mystical\", \"runes\") {\n      obj.mag = obj.mag + player.lvl + 2\n    }\n    case (\"strong\", \"tough\", \"bear\") {\n      obj.str = obj.str + player.lvl + 1\n    }\n    case (\"quick\", \"agile\", \"speed\") {\n      obj.agi = obj.agi + player.lvl + 1\n    }\n    case (\"smart\", \"educated\", \"wits\") {\n      obj.int = obj.int + player.lvl + 1\n    }\n    case (\"keen\", \"wise\", \"sight\") {\n      obj.perc = obj.perc + player.lvl + 1\n    }\n  }\n}\nobj.alias = CapFirst (obj.alias)\n</code></pre>\n\n",
      "PostDate": "2020-05-12T02:58:24.4033029Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e000748-845d-41b4-990c-015bfd102f48",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I also changed my equip function to check if the item has a variable before it check its. So I don't need 0's anymore.\r\n\r\nThe 0s still need to be inserted because adding a number to an undefined attribute would be an error.\r\nI figured that setting all the stats to zero first and then having the wooden/stone/metal cases just add on the values that they need makes sense because it means you don't have so many different copies of the `= 0` lines; and that way it doesn't matter which order the words are processed in so you don't need a second loop.\r\n\r\n> I took one more crack at it. It's working and I think I did it about as simply as I could. Let me know what you think. \r\n\r\nYou seem to have some repeated code (code that's the same inside all the 'if' blocks).\r\n\r\nUnless this is going to change later, it might be easier to move it outside the condition. Like so:\r\n```\r\nobj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\r\nif (rarity = \"rare\" or rarity = \"legendary\") {\r\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\r\n}\r\n\r\nif (obj.lvl <= 5) {\r\n  obj.alias = obj.alias + \" wooden sword\"\r\n}\r\nelse if (obj.lvl <= 10) {\r\n  obj.alias = obj.alias + \" stone sword\"\r\n}\r\nelse if (obj.lvl <= 50) {\r\n  obj.alias = obj.alias + \" metal sword\"\r\n}\r\nelse {\r\n  obj.alias = obj.alias + \" cheese sword\"\r\n}\r\n\r\nif (rarity = \"legendary\") {\r\n  obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\r\n}\r\n```\r\n\r\nHaving two separate loops (one for the material and one for the other bonuses) is kind of inefficient; but if you find it easier to follow that way it's not going to make a big difference.\r\n\r\n(Repetition of code is something I tend to pick up on in other people's code; because if you change something later it makes it easier to make a mistake. For example, my code includes the word \"metal\" in two places (where it's added and in the `case` statement); and includes the word \"bear\" in two places (where it's added to the alias, and in the `case`). Yours includes \"metal\" 4 times, and \"bear\" 5 times - which makes it a lot easier to miss one if you decide to change one of the names. The script is just as efficient, but repeating code both increases the chance of a typo, and makes it less likely you'd notice when testing)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I also changed my equip function to check if the item has a variable before it check its. So I don't need 0's anymore.</p>\n</blockquote>\n<p>The 0s still need to be inserted because adding a number to an undefined attribute would be an error.<br>\nI figured that setting all the stats to zero first and then having the wooden/stone/metal cases just add on the values that they need makes sense because it means you don't have so many different copies of the <code>= 0</code> lines; and that way it doesn't matter which order the words are processed in so you don't need a second loop.</p>\n<blockquote>\n<p>I took one more crack at it. It's working and I think I did it about as simply as I could. Let me know what you think.</p>\n</blockquote>\n<p>You seem to have some repeated code (code that's the same inside all the 'if' blocks).</p>\n<p>Unless this is going to change later, it might be easier to move it outside the condition. Like so:</p>\n<pre><code>obj.alias = PickOneString (Split(\"sharp;magical;strong;quick;smart;keen\"))\nif (rarity = \"rare\" or rarity = \"legendary\") {\n  obj.alias = obj.alias + \" and \" + PickOneString (Split (\"deadly;mystical;tough;agile;educated;wise\"))\n}\n\nif (obj.lvl &lt;= 5) {\n  obj.alias = obj.alias + \" wooden sword\"\n}\nelse if (obj.lvl &lt;= 10) {\n  obj.alias = obj.alias + \" stone sword\"\n}\nelse if (obj.lvl &lt;= 50) {\n  obj.alias = obj.alias + \" metal sword\"\n}\nelse {\n  obj.alias = obj.alias + \" cheese sword\"\n}\n\nif (rarity = \"legendary\") {\n  obj.alias = obj.alias + \" of \" + PickOneString (Split (\"power;runes;the bear;speed;wits;sight\"))\n}\n</code></pre>\n<p>Having two separate loops (one for the material and one for the other bonuses) is kind of inefficient; but if you find it easier to follow that way it's not going to make a big difference.</p>\n<p>(Repetition of code is something I tend to pick up on in other people's code; because if you change something later it makes it easier to make a mistake. For example, my code includes the word \"metal\" in two places (where it's added and in the <code>case</code> statement); and includes the word \"bear\" in two places (where it's added to the alias, and in the <code>case</code>). Yours includes \"metal\" 4 times, and \"bear\" 5 times - which makes it a lot easier to miss one if you decide to change one of the names. The script is just as efficient, but repeating code both increases the chance of a typo, and makes it less likely you'd notice when testing)</p>\n\n",
      "PostDate": "2020-05-12T10:29:05.0193326Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2391a221-d3a8-483b-a1b2-285f9483e71c",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**!!!The thing that bugs me the most about coding is changing the word \"stone\" to \"metal\" 40 times because I added so many if statements!!!** I literally can not overstate the unignorable backache that sets in after searching boundless lines of code meticulously to make sure I didn't miss one. . .\r\n\r\nThat last example did an amazing job of pointing out that I should double check for repeating lines, and try to think of a way to use it once instead of twice or more times.\r\n\r\nThank you for your patient and educating help on this! Consider this one resolved!",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>!!!The thing that bugs me the most about coding is changing the word \"stone\" to \"metal\" 40 times because I added so many if statements!!!</strong> I literally can not overstate the unignorable backache that sets in after searching boundless lines of code meticulously to make sure I didn't miss one. . .</p>\n<p>That last example did an amazing job of pointing out that I should double check for repeating lines, and try to think of a way to use it once instead of twice or more times.</p>\n<p>Thank you for your patient and educating help on this! Consider this one resolved!</p>\n\n",
      "PostDate": "2020-05-12T11:13:26.2240353Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0c694c94-29c9-4599-87db-9fd58cce46e2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One thing I might also suggest to help take care of typos, is adding a couple of extra cases:\r\n```\r\n  case (\"and\", \"of\", \"the\", \"sword\", \"helmet\") {\r\n    // words that don't mean anything\r\n  }\r\n  default {\r\n    msg (\"Unexpected word in object name: \"+word)\r\n  }\r\n```\r\nThat will print out any words it doesn't know rather than ignoring them; so if a typo gets through, you're more likely to notice it.\r\nIt might even be worth changing the message to add something like: \"This might be a bug. Please let the developer know if you see this message in the game.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>One thing I might also suggest to help take care of typos, is adding a couple of extra cases:</p>\n<pre><code>  case (\"and\", \"of\", \"the\", \"sword\", \"helmet\") {\n    // words that don't mean anything\n  }\n  default {\n    msg (\"Unexpected word in object name: \"+word)\n  }\n</code></pre>\n<p>That will print out any words it doesn't know rather than ignoring them; so if a typo gets through, you're more likely to notice it.<br>\nIt might even be worth changing the message to add something like: \"This might be a bug. Please let the developer know if you see this message in the game.\"</p>\n\n",
      "PostDate": "2020-05-12T11:27:32.022374Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1cb59a7a-8f04-4be1-a7fa-89d1eab96bc3",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/O07mlRtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want to easily change all instances of a word to something else in your game, go to full code view and use the \"Find\" or \"Replace\" functions under the \"Edit\" tab.  This has been a godsend for my games.  The only place it will not see are attached .js scripts, which you probably don't use anyway.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want to easily change all instances of a word to something else in your game, go to full code view and use the \"Find\" or \"Replace\" functions under the \"Edit\" tab.  This has been a godsend for my games.  The only place it will not see are attached .js scripts, which you probably don't use anyway.</p>\n\n",
      "PostDate": "2020-05-13T07:05:13.6257997Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7c6919af-0386-4ae1-82a2-4718a747fc28",
      "UserId": 479542,
      "Username": "Iconaclast",
      "AvatarUrl": "https://i.imgur.com/OnE0M7Bb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That typo fix has already helped me several times! \r\n\r\nThanks for the tip **mrangel**\r\n\r\n\r\nThat's super cool! I had avoided code view for the time as it seemed simpler to get things written and organized with button view, but I will definitely utilize those edit tools in the future.\r\n\r\nThank you **Dcoder**!",
      "EditableFormat": "markdown",
      "HTML": "<p>That typo fix has already helped me several times!</p>\n<p>Thanks for the tip <strong>mrangel</strong></p>\n<p>That's super cool! I had avoided code view for the time as it seemed simpler to get things written and organized with button view, but I will definitely utilize those edit tools in the future.</p>\n<p>Thank you <strong>Dcoder</strong>!</p>\n\n",
      "PostDate": "2020-05-13T21:38:54.4172141Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
