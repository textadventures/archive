{
  "Topic": {
    "TopicId": "sy2qb0ng9umzw-eyefe6ag",
    "ForumId": "10",
    "Title": "Why does ShowMenu lose variable contents?",
    "LastUpdated": "2017-08-27T19:51:58.2689311Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "efe6c0fe-e73e-4c58-96c0-bb93e427a021",
      "UserId": 319964,
      "Username": "GregC",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This code:\r\n```\r\nOptions = NewStringList()\r\nlist add (Options, \"One\")\r\nlist add (Options, \"Two\")\r\nTheNumberFour = 4\r\nmsg (TheNumberFour)\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  msg (TheNumberFour)\r\n}\r\n```\r\nProduces a menu, clicking on either option produces this result:\r\n```\r\n4\r\nError running script: Error compiling expression 'TheNumberFour': Unknown object or variable 'TheNumberFour'\r\n```\r\nI'm not sure why calling showmenu loses all variable values. It's pretty annoying. I guess I could store any value I want to remember after showing a menu in an object attribute.\r\n\r\nThat feels like a pretty messy solution, is there a better one?",
      "EditableFormat": "markdown",
      "HTML": "<p>This code:</p>\n<pre><code>Options = NewStringList()\nlist add (Options, \"One\")\nlist add (Options, \"Two\")\nTheNumberFour = 4\nmsg (TheNumberFour)\nShowMenu (\"Make a choice\", Options, false) {\n  msg (TheNumberFour)\n}\n</code></pre>\n<p>Produces a menu, clicking on either option produces this result:</p>\n<pre><code>4\nError running script: Error compiling expression 'TheNumberFour': Unknown object or variable 'TheNumberFour'\n</code></pre>\n<p>I'm not sure why calling showmenu loses all variable values. It's pretty annoying. I guess I could store any value I want to remember after showing a menu in an object attribute.</p>\n<p>That feels like a pretty messy solution, is there a better one?</p>\n\n",
      "PostDate": "2017-08-27T19:51:58.2689311Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5023543-bad3-4313-bc11-ec3aa884157f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'ShowMenu (args/params)' is a Function, and the 'TheNumberFour' is a Variable (a local/temporary) VARIABLE, you'd have to use it as an Argument/input of the 'ShowMenu' Function, which would be stored into a Parameter of the 'ShowMenu' Function, for the 'ShowMenu' Function to be able to use it, but the 'ShowMenu' is set up only having specific Parameters: prompt/message, list, boolean_for_if_menu_is_cancelable.\r\n\r\nYou can just use an Attribute (a global/permanent) VARIABLE instead, for example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"TheNumberFour\" type=\"int\">0</attr>\r\n</game>\r\n\r\n// your scripting:\r\n\r\nOptions = NewStringList()\r\nlist add (Options, \"One\")\r\nlist add (Options, \"Two\")\r\ngame.TheNumberFour = 4\r\nmsg (TheNumberFour)\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  msg (game.TheNumberFour)\r\n  // what are you doing with the selected menu item, by the way ??? (result = YOUR_SELECTED_MENU_ITEM)\r\n}\r\n```\r\n\r\n--------\r\n\r\nyou can also always manually create your own menu too",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'ShowMenu (args/params)' is a Function, and the 'TheNumberFour' is a Variable (a local/temporary) VARIABLE, you'd have to use it as an Argument/input of the 'ShowMenu' Function, which would be stored into a Parameter of the 'ShowMenu' Function, for the 'ShowMenu' Function to be able to use it, but the 'ShowMenu' is set up only having specific Parameters: prompt/message, list, boolean_for_if_menu_is_cancelable.</p>\n<p>You can just use an Attribute (a global/permanent) VARIABLE instead, for example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"TheNumberFour\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/game&gt;\n\n// your scripting:\n\nOptions = NewStringList()\nlist add (Options, \"One\")\nlist add (Options, \"Two\")\ngame.TheNumberFour = 4\nmsg (TheNumberFour)\nShowMenu (\"Make a choice\", Options, false) {\n  msg (game.TheNumberFour)\n  // what are you doing with the selected menu item, by the way ??? (result = YOUR_SELECTED_MENU_ITEM)\n}\n</code></pre>\n<hr>\n<p>you can also always manually create your own menu too</p>\n\n",
      "PostDate": "2017-08-27T20:33:06.966064Z",
      "LastEditDate": "2017-08-27T20:37:35.3163927Z",
      "link": null
    },
    {
      "PostId": "82646bd7-8037-47e3-a138-a77fc9589ff7",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, first, I don't think you typed it right.\r\n\r\nExample:\r\n```\r\nmsg (\"See something that catches your eye?\")\r\noptions = Split(\"Potion (100);Hyper Potion (200)\", \";\")\r\nShowMenu (\"Shop\", options, true) {\r\n  switch (result) {\r\n    case (\"Potion (100)\") {\r\n      if (player.gold >= 100) {\r\n        player.gold = player.gold - 100\r\n        player.potion = player.potion + 1\r\n        msg (\"You bought a Potion.\")\r\n      }\r\n      else {\r\n        msg (\"You don't have enough gold.\")\r\n      }\r\n    }\r\n    case (\"Hyper Potion (200)\") {\r\n      if (player.gold >= 200) {\r\n        player.gold = player.gold - 200\r\n        player.hyper_potion = player.hyper_potion + 1\r\n        msg (\"You bought a Hyper Potion.\")\r\n      }\r\n      else {\r\n        msg (\"You don't have enough gold.\")\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI'm sure you are supposed to put the cases in the attribute. Unless otherwise notified.\r\n\r\nEdit: You will also need to type:\r\n```\r\nmsg (game.TheNumberFour)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, first, I don't think you typed it right.</p>\n<p>Example:</p>\n<pre><code>msg (\"See something that catches your eye?\")\noptions = Split(\"Potion (100);Hyper Potion (200)\", \";\")\nShowMenu (\"Shop\", options, true) {\n  switch (result) {\n    case (\"Potion (100)\") {\n      if (player.gold &gt;= 100) {\n        player.gold = player.gold - 100\n        player.potion = player.potion + 1\n        msg (\"You bought a Potion.\")\n      }\n      else {\n        msg (\"You don't have enough gold.\")\n      }\n    }\n    case (\"Hyper Potion (200)\") {\n      if (player.gold &gt;= 200) {\n        player.gold = player.gold - 200\n        player.hyper_potion = player.hyper_potion + 1\n        msg (\"You bought a Hyper Potion.\")\n      }\n      else {\n        msg (\"You don't have enough gold.\")\n      }\n    }\n  }\n}\n</code></pre>\n<p>I'm sure you are supposed to put the cases in the attribute. Unless otherwise notified.</p>\n<p>Edit: You will also need to type:</p>\n<pre><code>msg (game.TheNumberFour)\n</code></pre>\n\n",
      "PostDate": "2017-08-27T20:40:50.4411815Z",
      "LastEditDate": "2017-08-27T23:25:10.3579733Z",
      "link": null
    },
    {
      "PostId": "9325db7c-c03c-4289-939c-20b53bfa9b46",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This drove me crazy as well, but I do what HK advised <sup><a href=\"#\" title=\"just use game.TheNumberFour, which is what HK advised me to do back then\">1</a></sup>. Now, the games run smoothly, and I'm much calmer.",
      "EditableFormat": "markdown",
      "HTML": "<p>This drove me crazy as well, but I do what HK advised <sup><a href=\"#\" title=\"just use game.TheNumberFour, which is what HK advised me to do back then\">1</a></sup>. Now, the games run smoothly, and I'm much calmer.</p>\n\n",
      "PostDate": "2017-08-27T22:45:28.5517579Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2bdf2b0-2ff2-429a-86c9-337366f91e6d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ jmnevil54:\r\n\r\nI might be misunderstanding, but if you don't know:\r\n\r\nthere's (at least) 2 ways of creating a list:\r\n\r\n```\r\n// using the built-in 'Split' Function:\r\n// (the quick method, but less powerful)\r\n\r\ncolor_list = Split (\"red;blue;yellow\", \";\")\r\n\r\n// --------------------------------------------------------------\r\n\r\n// or, creating a new (blank) List VARIABLE, and adding items to it:\r\n// (the manual (slower/longer: more typing) method, but more powerful)\r\n\r\ncolor_list = NewStringList () // for example, creating specifically a 'Stringlist' list Variable\r\nlist add (color_list, \"red\")\r\nlist add (color_list, \"blue\")\r\nlist add (color_list, \"yellow\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@ jmnevil54:</p>\n<p>I might be misunderstanding, but if you don't know:</p>\n<p>there's (at least) 2 ways of creating a list:</p>\n<pre><code>// using the built-in 'Split' Function:\n// (the quick method, but less powerful)\n\ncolor_list = Split (\"red;blue;yellow\", \";\")\n\n// --------------------------------------------------------------\n\n// or, creating a new (blank) List VARIABLE, and adding items to it:\n// (the manual (slower/longer: more typing) method, but more powerful)\n\ncolor_list = NewStringList () // for example, creating specifically a 'Stringlist' list Variable\nlist add (color_list, \"red\")\nlist add (color_list, \"blue\")\nlist add (color_list, \"yellow\")\n</code></pre>\n\n",
      "PostDate": "2017-08-28T00:10:59.0604837Z",
      "LastEditDate": "2017-08-28T00:12:44.8884992Z",
      "link": null
    },
    {
      "PostId": "3a036e13-40ca-4a3b-8b02-2c4926066a8b",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can also bypass the list variable (which is what I do when I'm only using the list once).\r\n\r\n```C++\r\nShowMenu (\"Pick one:\", Split(\"one;two\",  \";\"), false) {\r\n  switch (result) {\r\n    case (\"one\") {\r\n      msg (\"You chose 1.\")\r\n    }\r\n    case (\"two\") {\r\n      msg (\"You chose 2.\")\r\n    }\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You can also bypass the list variable (which is what I do when I'm only using the list once).</p>\n<pre><code>ShowMenu (\"Pick one:\", Split(\"one;two\",  \";\"), false) {\n  switch (result) {\n    case (\"one\") {\n      msg (\"You chose 1.\")\n    }\n    case (\"two\") {\n      msg (\"You chose 2.\")\n    }\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-08-28T01:22:08.9177587Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "67ffc02e-ab6c-4d10-b031-2aec8d13767d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The documentation for ShowMenu has a link to this page:\r\n\r\nhttp://docs.textadventures.co.uk/quest/blocks_and_scripts.html",
      "EditableFormat": "markdown",
      "HTML": "<p>The documentation for ShowMenu has a link to this page:</p>\n<p>http://docs.textadventures.co.uk/quest/blocks_and_scripts.html</p>\n\n",
      "PostDate": "2017-08-28T05:14:10.0370349Z",
      "LastEditDate": "2017-08-28T05:15:06.0937128Z",
      "link": null
    },
    {
      "PostId": "8bda5949-2e90-4a96-b148-527ca422ca25",
      "UserId": 319964,
      "Username": "GregC",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So if I've understood this...\r\n\r\n```\r\n<function name=\"DebugTest\">\r\n  Options = NewStringList()\r\n  list add (Options, \"One\")\r\n  list add (Options, \"Two\")\r\n  TheNumberFour = 4\r\n  msg (TheNumberFour)\r\n  ShowMenu (\"Make a choice\", Options, false) {\r\n    msg (TheNumberFour)\r\n  }\r\n</function>\r\n```\r\nWill fail because assigning TheNumberFour and calling TheNumberFour take place in different functions. While it looks like they both happen inside DebugTest(), calling ShowMenu() in fact created a new (unnamed?) function that is not part of the original (which takes the parameter \"result\" which will be what the user clicked and returns nothing).\r\n\r\nIf I had further code beneath the choice that wasn't part of the ShowMenu call and was going to be executed no matter what the user picked then that would be part of the same function and remember the variables - but couldn't access any variable assigned in the ShowMenu call and unless the user clicks inhumanly fast would probably be executed before the code higher up in the function.\r\n\r\nThe answer to the question _\"I'm not sure why calling showmenu loses all variable values. It's pretty annoying. I guess I could store any value I want to remember after showing a menu in an object attribute. That feels like a pretty messy solution, is there a better one?\"_ is **\"No\"**\r\n\r\nIf I wanted to continue using a local variable then I'd need to do something to create a local copy of it inside the function, so I'd have to do something like this:\r\n```\r\ngame.mem1 = NeededVariable\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  NeededVariable = game.mem1\r\n}\r\n```\r\nObviouosly I could save the trouble of reassigning NeededVariable inside the ShowMenu function and just access game.mem1 directly, but depending on how often the situation comes up that could lead to either a lot of generally superfluous attributes or hard to read code with meaningless variable names\r\n\r\nHave I understood correctly?",
      "EditableFormat": "markdown",
      "HTML": "<p>So if I've understood this...</p>\n<pre><code>&lt;function name=\"DebugTest\"&gt;\n  Options = NewStringList()\n  list add (Options, \"One\")\n  list add (Options, \"Two\")\n  TheNumberFour = 4\n  msg (TheNumberFour)\n  ShowMenu (\"Make a choice\", Options, false) {\n    msg (TheNumberFour)\n  }\n&lt;/function&gt;\n</code></pre>\n<p>Will fail because assigning TheNumberFour and calling TheNumberFour take place in different functions. While it looks like they both happen inside DebugTest(), calling ShowMenu() in fact created a new (unnamed?) function that is not part of the original (which takes the parameter \"result\" which will be what the user clicked and returns nothing).</p>\n<p>If I had further code beneath the choice that wasn't part of the ShowMenu call and was going to be executed no matter what the user picked then that would be part of the same function and remember the variables - but couldn't access any variable assigned in the ShowMenu call and unless the user clicks inhumanly fast would probably be executed before the code higher up in the function.</p>\n<p>The answer to the question <em>\"I'm not sure why calling showmenu loses all variable values. It's pretty annoying. I guess I could store any value I want to remember after showing a menu in an object attribute. That feels like a pretty messy solution, is there a better one?\"</em> is <strong>\"No\"</strong></p>\n<p>If I wanted to continue using a local variable then I'd need to do something to create a local copy of it inside the function, so I'd have to do something like this:</p>\n<pre><code>game.mem1 = NeededVariable\nShowMenu (\"Make a choice\", Options, false) {\n  NeededVariable = game.mem1\n}\n</code></pre>\n<p>Obviouosly I could save the trouble of reassigning NeededVariable inside the ShowMenu function and just access game.mem1 directly, but depending on how often the situation comes up that could lead to either a lot of generally superfluous attributes or hard to read code with meaningless variable names</p>\n<p>Have I understood correctly?</p>\n\n",
      "PostDate": "2017-08-28T11:00:54.9962928Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2c60f49e-8428-406c-a261-f113c28c2893",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting this edited post, updated/posted)\r\n(again, filler for getting this edited post, updated/posted, argh)\r\n(again, filler for getting this edited post, updated/posted, argh)\r\n\r\n--------------------\r\n\r\nI think so, I think you got it understood now.\r\n\r\n------------------\r\n\r\nthe word 'scope' is used for this concept:\r\n\r\n(and the ERROR of it is known as 'out of scope')\r\n\r\na local/temporary Variable's 'scope' is its parent scripting's container, as it (the local/temporary Variable) is destroyed upon the parent scripting ending, and also it (the local/temporary Variable) doesn't exist outside of its 'scope' (doesn't exist outside of its parent scripting's container).\r\n\r\nfor example:\r\n\r\n```\r\n<function name=\"scope_1\">\r\n  string_variable = \"hi\"\r\n  msg (string_variable) // NO error: it's within its scope (scope_1) // maybe you notice that 'msg' is a Function itself (acting similarly as my 'scope_3' Function: using a single Argument/Parameter), the 'msg' Function is another/different 'scope' (a 'scope_4' if you will), just as 'scope_2' and 'scope_3' Functions are other/different scopes\r\n  scope_2 // ERROR: see below\r\n  scope_3 (string_variable) // NO error: see below // the 'string_variable' of 'scope_1' is stored into the 'string_parameter' while still within/for the scripting of its 'scope_1', and thus it is within its scope, and then you jump/goto the 'scope_3' Function, which uses its 'string_parameter' for its scripting, which is within its scope (scope_3), and thus no errors.\r\n</function>\r\n\r\n<function name=\"scope_2\">\r\n  msg (string_variable) // ERROR: the 'string_variable' Variable does NOT exist! (it does exist within its scope: scope_1, but 'scope_2' is 'out of scope' for it)\r\n</function>\r\n\r\n<function name=\"scope_3\" parameters=\"string_parameter\">\r\n  msg (string_parameter) // NO error: as a Function can use inputs (called arguments), which are stored into the Function's local/temporary special 'Parameter' Variable VARIABLES, which can then be used by the Function's scripting // NO error as the 'string_variable' isn't ever used outside of its scope (scope_1): the 'string_variable' is NEVER used (directly) by/within the 'scope_2' Function's scripting (which would be an 'out of scope' error --- if it was), so NO error.\r\n</function>\r\n```\r\n\r\ndoes this help explain it?\r\n\r\n(and Attribute VARIABLES are 'global in scope', so long as their parent container/Object ... exists or still exists, there's no 'out of scope' error/issue with Attribute VARIABLES)\r\n\r\n(for quest and game-making, Attributes are awesome, but for programs/software using the full-bore programming languages, global VARIABLES are usually/generally bad and thus shouldn't be used)\r\n\r\n------------------------\r\n\r\na bit more into the technical aspects of it, if you're interested:\r\n\r\nht.tp://www.cs.princeton.edu/courses/archive/spr03/cs320/notes/7-1.pdf\r\n(remove the dot/period in 'ht.tp' for it to work in the url)\r\n\r\nFunction data must be preserved (if there's layered Functions and/or looping/recursion operation of Functions), in order for the Functions to be completed, and thus a 'activation record' is created for each Function (once the Functions are completed, their 'activation records' are destroyed), which is why recursion can use/eat-up a lot of memory (lots of 'activation records'), but it's also a very powerful tool too.\r\n\r\n-------------------------\r\n\r\nagain, you can always manually create your own menu coding too, for an example using my own (without hyperlinks --- it can be done with hyperlinks, but I'd have to look a few stuff up, and I'm lazy, so not going to, unless you want/need to know how, lol):\r\n\r\n(I like using typed-in input and making it as easy, less typing, as possible: typing in a single number)\r\n\r\n```\r\n// example scripting:\r\n\r\nset (player, color_string_attribute, \"unknown\")\r\nplayer.color_stringlist_attribute = NewStringList ()\r\nlist add (player.color_stringlist_attribute, \"red\")\r\nlist add (player.color_stringlist_attribute, \"blue\")\r\nlist add (player.color_stringlist_attribute, \"yellow\")\r\ndynamic_menu_function (\"Color\", player.color_stringlist_attribute, player, \"color_stringlist_attribute\")\r\n\r\n// -------------------\r\n\r\n<function name=\"dynamic_menu_function\" parameters=\"prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter\">\r\n  <![CATA[\r\n\r\n    // -------------------------------------------------------------------\r\n\r\n    // Manual/Custom Menu Displayment:\r\n\r\n    msg (prompt_string_parameter + \" Menu\")\r\n    msg (\"(Type in the number of your choice)\")\r\n    msg (\"\")\r\n    numbering_integer_variable = 0\r\n    foreach (item_string_variable, name_of_object_dot_name_of_stringlist_attribute_parameter) {\r\n      numbering_integer_variable = numbering_integer_variable + 1\r\n      msg (numbering_integer_variable + \". \" + item_string_variable) // here you can change it so they're hyperlinks, but I'm too lazy to look up the coding/syntax for it, and whatever other coding (like Commands) elsewhere, that is needed for it too. Unless, this is what you want/need, in which case, let me know, and I'll get the coding for you to do it.\r\n    }\r\n\r\n    // outputs/displays (for my example's single function call):\r\n    //\r\n    // Color Menu\r\n    // (Type in the number of your choice)\r\n    //\r\n    // 1. red\r\n    // 2. blue\r\n    // 3. yellow\r\n\r\n    // -------------------------------------------------------\r\n\r\n    get input {\r\n      ClearScreen\r\n      if (IsInt (result)) {\r\n        input_integer_variable = ToInt (result)\r\n        list_count_integer_variable = ListCount (name_of_object_dot_name_of_stringlist_attribute_parameter)\r\n        if (input_integer_variable > 0 and input_integer_variable < list_count_integer_variable) {\r\n          index_number_integer_variable = input_integer_variable - 1\r\n          selected_item_string_variable = StringListItem (name_of_object_dot_name_of_stringlist_attribute_parameter, index_number_integer_variable)\r\n          set (object_parameter, name_of_string_attribute_parameter, selected_item_string_variable)\r\n        } else {\r\n          dynamic_menu_function (prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter)\r\n        }\r\n      } else {\r\n        dynamic_menu_function (prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter)\r\n      }\r\n    }\r\n  ]]>\r\n</function>\r\n```\r\n\r\n-----------------------------\r\n\r\nthis example's design of yours, is actually pointless/redundant (a bad design, no reason to ever do it):\r\n\r\n```\r\n// NeededVariable = 7\r\ngame.mem1 = NeededVariable\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  NeededVariable = game.mem1\r\n // msg (NeededVariable) // stupid usage of it, of course, but it's just an example usage for completion, lol\r\n}\r\n```\r\n\r\nas can be seen (fixed up):\r\n\r\n```\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  NeededVariable = 7\r\n  // msg (NeededVariable) // stupid usage of it, of course, but it's just an example usage for completion, lol\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting this edited post, updated/posted)<br>\n(again, filler for getting this edited post, updated/posted, argh)<br>\n(again, filler for getting this edited post, updated/posted, argh)</p>\n<hr>\n<p>I think so, I think you got it understood now.</p>\n<hr>\n<p>the word 'scope' is used for this concept:</p>\n<p>(and the ERROR of it is known as 'out of scope')</p>\n<p>a local/temporary Variable's 'scope' is its parent scripting's container, as it (the local/temporary Variable) is destroyed upon the parent scripting ending, and also it (the local/temporary Variable) doesn't exist outside of its 'scope' (doesn't exist outside of its parent scripting's container).</p>\n<p>for example:</p>\n<pre><code>&lt;function name=\"scope_1\"&gt;\n  string_variable = \"hi\"\n  msg (string_variable) // NO error: it's within its scope (scope_1) // maybe you notice that 'msg' is a Function itself (acting similarly as my 'scope_3' Function: using a single Argument/Parameter), the 'msg' Function is another/different 'scope' (a 'scope_4' if you will), just as 'scope_2' and 'scope_3' Functions are other/different scopes\n  scope_2 // ERROR: see below\n  scope_3 (string_variable) // NO error: see below // the 'string_variable' of 'scope_1' is stored into the 'string_parameter' while still within/for the scripting of its 'scope_1', and thus it is within its scope, and then you jump/goto the 'scope_3' Function, which uses its 'string_parameter' for its scripting, which is within its scope (scope_3), and thus no errors.\n&lt;/function&gt;\n\n&lt;function name=\"scope_2\"&gt;\n  msg (string_variable) // ERROR: the 'string_variable' Variable does NOT exist! (it does exist within its scope: scope_1, but 'scope_2' is 'out of scope' for it)\n&lt;/function&gt;\n\n&lt;function name=\"scope_3\" parameters=\"string_parameter\"&gt;\n  msg (string_parameter) // NO error: as a Function can use inputs (called arguments), which are stored into the Function's local/temporary special 'Parameter' Variable VARIABLES, which can then be used by the Function's scripting // NO error as the 'string_variable' isn't ever used outside of its scope (scope_1): the 'string_variable' is NEVER used (directly) by/within the 'scope_2' Function's scripting (which would be an 'out of scope' error --- if it was), so NO error.\n&lt;/function&gt;\n</code></pre>\n<p>does this help explain it?</p>\n<p>(and Attribute VARIABLES are 'global in scope', so long as their parent container/Object ... exists or still exists, there's no 'out of scope' error/issue with Attribute VARIABLES)</p>\n<p>(for quest and game-making, Attributes are awesome, but for programs/software using the full-bore programming languages, global VARIABLES are usually/generally bad and thus shouldn't be used)</p>\n<hr>\n<p>a bit more into the technical aspects of it, if you're interested:</p>\n<p>ht.tp://www.cs.princeton.edu/courses/archive/spr03/cs320/notes/7-1.pdf<br>\n(remove the dot/period in 'ht.tp' for it to work in the url)</p>\n<p>Function data must be preserved (if there's layered Functions and/or looping/recursion operation of Functions), in order for the Functions to be completed, and thus a 'activation record' is created for each Function (once the Functions are completed, their 'activation records' are destroyed), which is why recursion can use/eat-up a lot of memory (lots of 'activation records'), but it's also a very powerful tool too.</p>\n<hr>\n<p>again, you can always manually create your own menu coding too, for an example using my own (without hyperlinks --- it can be done with hyperlinks, but I'd have to look a few stuff up, and I'm lazy, so not going to, unless you want/need to know how, lol):</p>\n<p>(I like using typed-in input and making it as easy, less typing, as possible: typing in a single number)</p>\n<pre><code>// example scripting:\n\nset (player, color_string_attribute, \"unknown\")\nplayer.color_stringlist_attribute = NewStringList ()\nlist add (player.color_stringlist_attribute, \"red\")\nlist add (player.color_stringlist_attribute, \"blue\")\nlist add (player.color_stringlist_attribute, \"yellow\")\ndynamic_menu_function (\"Color\", player.color_stringlist_attribute, player, \"color_stringlist_attribute\")\n\n// -------------------\n\n&lt;function name=\"dynamic_menu_function\" parameters=\"prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter\"&gt;\n  &lt;![CATA[\n\n    // -------------------------------------------------------------------\n\n    // Manual/Custom Menu Displayment:\n\n    msg (prompt_string_parameter + \" Menu\")\n    msg (\"(Type in the number of your choice)\")\n    msg (\"\")\n    numbering_integer_variable = 0\n    foreach (item_string_variable, name_of_object_dot_name_of_stringlist_attribute_parameter) {\n      numbering_integer_variable = numbering_integer_variable + 1\n      msg (numbering_integer_variable + \". \" + item_string_variable) // here you can change it so they're hyperlinks, but I'm too lazy to look up the coding/syntax for it, and whatever other coding (like Commands) elsewhere, that is needed for it too. Unless, this is what you want/need, in which case, let me know, and I'll get the coding for you to do it.\n    }\n\n    // outputs/displays (for my example's single function call):\n    //\n    // Color Menu\n    // (Type in the number of your choice)\n    //\n    // 1. red\n    // 2. blue\n    // 3. yellow\n\n    // -------------------------------------------------------\n\n    get input {\n      ClearScreen\n      if (IsInt (result)) {\n        input_integer_variable = ToInt (result)\n        list_count_integer_variable = ListCount (name_of_object_dot_name_of_stringlist_attribute_parameter)\n        if (input_integer_variable &gt; 0 and input_integer_variable &lt; list_count_integer_variable) {\n          index_number_integer_variable = input_integer_variable - 1\n          selected_item_string_variable = StringListItem (name_of_object_dot_name_of_stringlist_attribute_parameter, index_number_integer_variable)\n          set (object_parameter, name_of_string_attribute_parameter, selected_item_string_variable)\n        } else {\n          dynamic_menu_function (prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter)\n        }\n      } else {\n        dynamic_menu_function (prompt_string_parameter, name_of_object_dot_name_of_stringlist_attribute_parameter, object_parameter, name_of_string_attribute_parameter)\n      }\n    }\n  ]]&gt;\n&lt;/function&gt;\n</code></pre>\n<hr>\n<p>this example's design of yours, is actually pointless/redundant (a bad design, no reason to ever do it):</p>\n<pre><code>// NeededVariable = 7\ngame.mem1 = NeededVariable\nShowMenu (\"Make a choice\", Options, false) {\n  NeededVariable = game.mem1\n // msg (NeededVariable) // stupid usage of it, of course, but it's just an example usage for completion, lol\n}\n</code></pre>\n<p>as can be seen (fixed up):</p>\n<pre><code>ShowMenu (\"Make a choice\", Options, false) {\n  NeededVariable = 7\n  // msg (NeededVariable) // stupid usage of it, of course, but it's just an example usage for completion, lol\n}\n</code></pre>\n\n",
      "PostDate": "2017-08-28T17:15:46.8290408Z",
      "LastEditDate": "2017-08-28T19:30:40.357201Z",
      "link": null
    },
    {
      "PostId": "444d9871-0c8c-4e8a-a2d7-b7a9bded58dc",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What HK said.\r\n\r\n---\r\nEveryone says having a lot of attributes doesn't effect anything (besides the neatness of the code, as you say).\r\n\r\n---\r\nSounds to me like you've got it.\r\n\r\nI tried to avoid setting up those attributes, the same as you.\r\n\r\nI finally gave up, though.\r\n\r\n---\r\nThis sets up two attributes instead of one.\r\n\r\nPlus, if NeededVariable wasn't in the same block of this same script, I don't think it would exist.\r\n\r\n```\r\ngame.mem1 = NeededVariable\r\nShowMenu (\"Make a choice\", Options, false) {\r\n  NeededVariable = game.mem1\r\n}\r\n```\r\nIf it's an important variable at any given point, I just give it its own attribute on some object.\r\n\r\n...even if I create an object just for that purpose. ...which is still overkill, but it's easier for me to keep up with it that way. (And I can still read the source code.)\r\n\r\nI.e., I have an object called displayStuff under the game object, and it has all sorts of attributes I access to change CSS settings, display Base64 embedded images, and all sorts of things.",
      "EditableFormat": "markdown",
      "HTML": "<p>What HK said.</p>\n<hr>\n<p>Everyone says having a lot of attributes doesn't effect anything (besides the neatness of the code, as you say).</p>\n<hr>\n<p>Sounds to me like you've got it.</p>\n<p>I tried to avoid setting up those attributes, the same as you.</p>\n<p>I finally gave up, though.</p>\n<hr>\n<p>This sets up two attributes instead of one.</p>\n<p>Plus, if NeededVariable wasn't in the same block of this same script, I don't think it would exist.</p>\n<pre><code>game.mem1 = NeededVariable\nShowMenu (\"Make a choice\", Options, false) {\n  NeededVariable = game.mem1\n}\n</code></pre>\n<p>If it's an important variable at any given point, I just give it its own attribute on some object.</p>\n<p>...even if I create an object just for that purpose. ...which is still overkill, but it's easier for me to keep up with it that way. (And I can still read the source code.)</p>\n<p>I.e., I have an object called displayStuff under the game object, and it has all sorts of attributes I access to change CSS settings, display Base64 embedded images, and all sorts of things.</p>\n\n",
      "PostDate": "2017-08-28T23:07:14.3743689Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5c26e6ad-c972-42f9-a9b7-91043a772bb5",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OBJECTS (Elements: Objects, Verbs, Functions, Commands, Turnscripts, Timers, Exits, etc) hold more data than an Attribute does (in fact, an 'Attribute' is a 'member' VARIABLE of a specific Object, which holds the data of the OBJECT/Element).\r\n\r\nany good software (including quest) can hold/handle gazillions of Objects, so don't worry about how many Attributes you have !!! (it's still good to practice/learn/have efficiency: if you don't need a CLASS/OBJECT/VARIABLE/OPERATION, then don't have it --- but this takes long years of learning to program: expertise, and also lots of intelligence or copying/using of other intelligence/expert programmers' code: \"don't re-invent the wheel\", to write code as efficiently as possible for what you're trying to do)\r\n\r\n-----------\r\n\r\nin actual programming:\r\n\r\nhttps://www.cs.princeton.edu/courses/archive/spr96/cs333/java/tutorial/java/anatomy/creating.html (Java example)\r\n\r\n-----\r\n\r\na 'CLASS' (similar in usage to/of quest's user-level's: Object Types) lets up what you want, but it doesn't have a usable form yet for you to use it, and then you make it usable/tangible (known as 'instantiating', you can somewhat think of it as like a 'OBJECT = function call', except that it's a 'OBJECT = CLASS call', lol), which is known as an 'OBJECT', that you can now use/manipulate.\r\n\r\n'OBJECTS' are also known/called as 'INSTANCES' (CLASS 'instantiation' creates 'instances', aka OBJECTS), they're interchangable (ya, the terminology is really jumbled up, confusing, and/or ambigious)\r\n\r\nactually, when you do this in quest, for example:\r\nVARIABLE = NewList () / NewDictionary ()\r\nit's a similar structure/syntax/action/design as 'instantiating an OBJECT of/from a CLASS' in normal programming:\r\nNAME_OF_CLASS NAME_OF_OBJECT_/_VARIABLE = NEW NAME_OF_CLASS (XXX)\r\n\r\nthink of a 'ball' CLASS as the idea of a 'ball' (what the ball is, what the ball does/can-do, and what traits/properties/characteristics does the ball have), but there's no 'ball' actually existing (not yet), it's just the IDEA of a 'ball'\r\n\r\nthis stuff is confusing/advanced/complicated, and it's been awhile too, so my attempt at trying to explain this stuff is really rusty (bad), it'd be better for you to just try to read and learn directly from the documentation of the 3 main full-bore programming languages:\r\n\r\nhttp://www.cplusplus.com/doc/tutorial/classes/ (C++)\r\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/ (Java) (do NOT confuse 'Java', a full-bore programming language, with JavaScript/JS, a scripting/web/online language, they got NOTHING in common with each other except the use of 'Java' for/in their languages' names... unfortunately, this causes a lot of confusion between them and/or causes people to think they're related to each other)\r\nhttps://docs.python.org/3/tutorial/classes.html (Python)\r\n\r\n-----\r\n\r\nthe below is quest's actual underlying code structure of the quest software itself (not merely its built-in stuff), you need to look at Alex' documentation on quest: the source code and all of its sub code parts, here: ( https://github.com/textadventures/quest )\r\n\r\nDATA STRUCTURES:\r\n\r\nObject-Oriented Programming (OOP) / Object-Oriented Design (OOD):\r\n\r\nCLASSES (see above about them): universal Classes: the Data Types: Booleans, Integers, Doubles/Floats/Floating-Points, Strings, etc, and etc/custom/other Classes\r\n\r\n'OBJECTS' of normal programming = quest's 'Elements', which contain:\r\n(the terminology is a bit ambigious, as some of these terms are interchangable with each other, and also across languages too)\r\n('properties' is used as a term too, basically: member, attribute, and property are often interchangable with each other)\r\nMEMBERS (normal programming), two types (STATES: data storage vs BEHAVIORS: actions):\r\n1. 'attributes' (STATES : data members) of normal programming = quest's basic (Boolean, String, Object reference/pointer, Integer, Double) Attributes (except: Script Attributes)\r\n2. 'methods' (BEHAVIORS : member functions) of normal programming = quest's Script Attributes\r\n\r\n'Functions' of normal programming = quest's Functions\r\n\r\nand etc Data Structures... (depends on the languages)",
      "EditableFormat": "markdown",
      "HTML": "<p>OBJECTS (Elements: Objects, Verbs, Functions, Commands, Turnscripts, Timers, Exits, etc) hold more data than an Attribute does (in fact, an 'Attribute' is a 'member' VARIABLE of a specific Object, which holds the data of the OBJECT/Element).</p>\n<p>any good software (including quest) can hold/handle gazillions of Objects, so don't worry about how many Attributes you have !!! (it's still good to practice/learn/have efficiency: if you don't need a CLASS/OBJECT/VARIABLE/OPERATION, then don't have it --- but this takes long years of learning to program: expertise, and also lots of intelligence or copying/using of other intelligence/expert programmers' code: \"don't re-invent the wheel\", to write code as efficiently as possible for what you're trying to do)</p>\n<hr>\n<p>in actual programming:</p>\n<p>https://www.cs.princeton.edu/courses/archive/spr96/cs333/java/tutorial/java/anatomy/creating.html (Java example)</p>\n<hr>\n<p>a 'CLASS' (similar in usage to/of quest's user-level's: Object Types) lets up what you want, but it doesn't have a usable form yet for you to use it, and then you make it usable/tangible (known as 'instantiating', you can somewhat think of it as like a 'OBJECT = function call', except that it's a 'OBJECT = CLASS call', lol), which is known as an 'OBJECT', that you can now use/manipulate.</p>\n<p>'OBJECTS' are also known/called as 'INSTANCES' (CLASS 'instantiation' creates 'instances', aka OBJECTS), they're interchangable (ya, the terminology is really jumbled up, confusing, and/or ambigious)</p>\n<p>actually, when you do this in quest, for example:<br>\nVARIABLE = NewList () / NewDictionary ()<br>\nit's a similar structure/syntax/action/design as 'instantiating an OBJECT of/from a CLASS' in normal programming:<br>\nNAME_OF_CLASS NAME_OF_OBJECT_/_VARIABLE = NEW NAME_OF_CLASS (XXX)</p>\n<p>think of a 'ball' CLASS as the idea of a 'ball' (what the ball is, what the ball does/can-do, and what traits/properties/characteristics does the ball have), but there's no 'ball' actually existing (not yet), it's just the IDEA of a 'ball'</p>\n<p>this stuff is confusing/advanced/complicated, and it's been awhile too, so my attempt at trying to explain this stuff is really rusty (bad), it'd be better for you to just try to read and learn directly from the documentation of the 3 main full-bore programming languages:</p>\n<p>http://www.cplusplus.com/doc/tutorial/classes/ (C++)<br>\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/ (Java) (do NOT confuse 'Java', a full-bore programming language, with JavaScript/JS, a scripting/web/online language, they got NOTHING in common with each other except the use of 'Java' for/in their languages' names... unfortunately, this causes a lot of confusion between them and/or causes people to think they're related to each other)<br>\nhttps://docs.python.org/3/tutorial/classes.html (Python)</p>\n<hr>\n<p>the below is quest's actual underlying code structure of the quest software itself (not merely its built-in stuff), you need to look at Alex' documentation on quest: the source code and all of its sub code parts, here: ( https://github.com/textadventures/quest )</p>\n<p>DATA STRUCTURES:</p>\n<p>Object-Oriented Programming (OOP) / Object-Oriented Design (OOD):</p>\n<p>CLASSES (see above about them): universal Classes: the Data Types: Booleans, Integers, Doubles/Floats/Floating-Points, Strings, etc, and etc/custom/other Classes</p>\n<p>'OBJECTS' of normal programming = quest's 'Elements', which contain:<br>\n(the terminology is a bit ambigious, as some of these terms are interchangable with each other, and also across languages too)<br>\n('properties' is used as a term too, basically: member, attribute, and property are often interchangable with each other)<br>\nMEMBERS (normal programming), two types (STATES: data storage vs BEHAVIORS: actions):</p>\n<ol>\n<li>'attributes' (STATES : data members) of normal programming = quest's basic (Boolean, String, Object reference/pointer, Integer, Double) Attributes (except: Script Attributes)</li>\n<li>'methods' (BEHAVIORS : member functions) of normal programming = quest's Script Attributes</li>\n</ol>\n<p>'Functions' of normal programming = quest's Functions</p>\n<p>and etc Data Structures... (depends on the languages)</p>\n\n",
      "PostDate": "2017-08-29T01:52:03.1043667Z",
      "LastEditDate": "2017-08-29T03:07:06.1244676Z",
      "link": null
    },
    {
      "PostId": "b6690e69-6a16-4339-be98-ce740cae5a96",
      "UserId": 319964,
      "Username": "GregC",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I think I followed most of that. Thank you for all of your help. I've not done any proper programming in over a decade, when I was taught at school we were told to minimise lines of code over all else, whereas this advice seems geared towards minimising runtime (which I guess is more relevant now). Since I'm not likely to either run out of space or do something in Quest so inefficiently that I notice a performance issue on a modern PC I'm probably going to do some things inefficiently when they make it easier for me to read the code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I think I followed most of that. Thank you for all of your help. I've not done any proper programming in over a decade, when I was taught at school we were told to minimise lines of code over all else, whereas this advice seems geared towards minimising runtime (which I guess is more relevant now). Since I'm not likely to either run out of space or do something in Quest so inefficiently that I notice a performance issue on a modern PC I'm probably going to do some things inefficiently when they make it easier for me to read the code.</p>\n\n",
      "PostDate": "2017-08-30T16:01:36.269056Z",
      "LastEditDate": "2017-08-30T16:01:59.5271783Z",
      "link": null
    },
    {
      "PostId": "d0f0af94-ad1b-4417-9f88-861ddaa259f6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> when I was taught at school we were told to minimise lines of code over all else, whereas this advice seems geared towards minimising runtime (which I guess is more relevant now).\r\n\r\nIn my opinion, your priority should be to keep it simple, so you will understand it when you look at it in three months. Computers are so fast and have so much memory that other issues are not worth considering (unless you are coding a full 3d game or operating system).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>when I was taught at school we were told to minimise lines of code over all else, whereas this advice seems geared towards minimising runtime (which I guess is more relevant now).</p>\n</blockquote>\n<p>In my opinion, your priority should be to keep it simple, so you will understand it when you look at it in three months. Computers are so fast and have so much memory that other issues are not worth considering (unless you are coding a full 3d game or operating system).</p>\n\n",
      "PostDate": "2017-08-30T18:51:22.5380973Z",
      "LastEditDate": "2017-08-30T19:39:22.2820933Z",
      "link": null
    },
    {
      "PostId": "03bd4caf-9cad-421d-9693-58da30c5a4db",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "efficiency (speed/performance: less/least operations and data usage, and also your code length/concise-ness/compact'ability) is always important, and vital for critical systems and/or compact systems, but efficiency takes a back seat for professional software nowadays, as what's most important is the/your \"production efficiency\": a \"developer's time/work/money\" (your time/work/skill is valuable, why waste time/work doing/over-doing a really complex/advanced/perfect system, when you can do something much more simple and quick that does the job, and get doing more projects too, in the same amount of time?) and also, especially due to working in large group projects, \"human usage\" (readability/understand'ability, editing/debugging/trouble-shooting/patching ability, scale'ability, using it and building upon it or adjusting it for new projects, etc).\r\n\r\nAnd obviously for amateur programmers, if you don't have the skill, you don't have the skill, you're just happy to get something that works as you want it to, so, who cares if it's not the best, most efficient design possible. You can always make it better later, and/or if you notice that it is too slow/ineficient (you're actually noticing slow-down during running it), then you can always fix it up later too.\r\n\r\n------------------------\r\n\r\nagain, the built-in 'ShowMenu / show menu' Functions and other built-in Functions and/or Delegate-using Script Attriubtes of Objects, have already been set up with having Parameters and/or a return type, or not, and also of how many and what types of Parameters.\r\n\r\n( I've no idea if quest can-do/has Function/Script OVER-LOADING or not: https://en.wikipedia.org/wiki/Function_overloading )\r\n\r\nThus, just create your own Function or Object's Delegate-using Script Attribute, if you want/need to use a (or more) VARIABLE(s) for it, allowing you to use local/temporary Variable's instead of having to create/use Attributes.\r\n\r\n```\r\n// scripting example:\r\n\r\nTheNumberFour = 4\r\nmy_custom_menu (\"BLAH\", BLAH_OBJECT.BLAH_LIST_ATTRIBUTE, TheNumberFour)\r\n\r\n// -------------\r\n\r\n<function name=\"my_custom_menu\" parameters=\"prompt_parameter, list_parameter, integer_parameter\">\r\n  // again, too lazy to look up how to reproduce the built-in 'ShowMenu' Function's use of hyperlinks, for this example, but it can be done, instead of what I show below (doesn't use hyperlinks):\r\n  msg (prompt_parameter)\r\n  DisplayList (BLAH_OBJECT.BLAH_LIST_ATTRIBUTE)\r\n  get input {\r\n    // blah scripting\r\n  }\r\n  msg (integer_parameter) // here is your 'TheNumberFour' Variable being used, no need for creating/using an Attribute.\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>efficiency (speed/performance: less/least operations and data usage, and also your code length/concise-ness/compact'ability) is always important, and vital for critical systems and/or compact systems, but efficiency takes a back seat for professional software nowadays, as what's most important is the/your \"production efficiency\": a \"developer's time/work/money\" (your time/work/skill is valuable, why waste time/work doing/over-doing a really complex/advanced/perfect system, when you can do something much more simple and quick that does the job, and get doing more projects too, in the same amount of time?) and also, especially due to working in large group projects, \"human usage\" (readability/understand'ability, editing/debugging/trouble-shooting/patching ability, scale'ability, using it and building upon it or adjusting it for new projects, etc).</p>\n<p>And obviously for amateur programmers, if you don't have the skill, you don't have the skill, you're just happy to get something that works as you want it to, so, who cares if it's not the best, most efficient design possible. You can always make it better later, and/or if you notice that it is too slow/ineficient (you're actually noticing slow-down during running it), then you can always fix it up later too.</p>\n<hr>\n<p>again, the built-in 'ShowMenu / show menu' Functions and other built-in Functions and/or Delegate-using Script Attriubtes of Objects, have already been set up with having Parameters and/or a return type, or not, and also of how many and what types of Parameters.</p>\n<p>( I've no idea if quest can-do/has Function/Script OVER-LOADING or not: https://en.wikipedia.org/wiki/Function_overloading )</p>\n<p>Thus, just create your own Function or Object's Delegate-using Script Attribute, if you want/need to use a (or more) VARIABLE(s) for it, allowing you to use local/temporary Variable's instead of having to create/use Attributes.</p>\n<pre><code>// scripting example:\n\nTheNumberFour = 4\nmy_custom_menu (\"BLAH\", BLAH_OBJECT.BLAH_LIST_ATTRIBUTE, TheNumberFour)\n\n// -------------\n\n&lt;function name=\"my_custom_menu\" parameters=\"prompt_parameter, list_parameter, integer_parameter\"&gt;\n  // again, too lazy to look up how to reproduce the built-in 'ShowMenu' Function's use of hyperlinks, for this example, but it can be done, instead of what I show below (doesn't use hyperlinks):\n  msg (prompt_parameter)\n  DisplayList (BLAH_OBJECT.BLAH_LIST_ATTRIBUTE)\n  get input {\n    // blah scripting\n  }\n  msg (integer_parameter) // here is your 'TheNumberFour' Variable being used, no need for creating/using an Attribute.\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-08-30T23:10:44.7027023Z",
      "LastEditDate": "2017-08-30T23:20:03.959921Z",
      "link": null
    }
  ]
}
