{
  "Topic": {
    "TopicId": "4152",
    "ForumId": "10",
    "Title": "Attributes of type \"object\"...",
    "LastUpdated": "2014-01-23T22:34:42+00:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "27605",
      "UserId": 0,
      "Username": "gernotg",
      "UserAvatar": null,
      "UserGravatar": "ac4ee49ebfcb27982dd9398e86610805",
      "EditableText": "Hello everyone,\n\nLet's say my player is currently fighting a group of monsters. I want to store the monster that the player is currently attacking in an attribute called current_target. The idea is that during peaceful times, the attribute would not be set, but if the attribute is set, then the player will continue to attack that particular target.\n\nIt seems to me like that would be a reasonable thing to try to do, but the problem is that it doesn't appear to be legal not to specify a valid object in the declaration. Specifying &quot;null&quot; also doesn't appear to work. At first, I tried to get around that by pointing the object to the player himself to indicate that he's not currently attacking a monster, and that worked reasonably well.\n\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;defaultplayer&quot; /&gt;\n      &lt;attr name=&quot;current_target0&quot; type=&quot;object&quot;&gt;&lt;/attr&gt; // &lt;-- This isn't legal\n      &lt;attr name=&quot;current_target1&quot; type=&quot;object&quot;&gt;null&lt;/attr&gt; // &lt;-- This isn't legal either\n      &lt;attr name=&quot;current_target2&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt; // &lt;-- This is legal, though not very elegant\n    &lt;/object&gt;\n\nNote that during the game, I can set the attribute to null and compare it to null, but I can't get this to work in the declaration.\n\nBut now, I want to put this attribute into a type, to be inherited by players and monsters, and I also put this type into a separate library file, and this trick no longer works. In order to be universal, the type attribute of course can't point at the player, and even the game object doesn't exist yet when the library is loaded.\n\nI suppose I could create a library that defines something like &lt;object name=&quot;null_object&quot;&gt;&lt;/object&gt;, but null_object and null would still not be the same later on during the game. Am I really the first person to run into this? It seems to me that there should be a more elegant solution...",
      "EditableFormat": "bbcode",
      "HTML": "Hello everyone,<br/><br/>Let's say my player is currently fighting a group of monsters. I want to store the monster that the player is currently attacking in an attribute called current_target. The idea is that during peaceful times, the attribute would not be set, but if the attribute is set, then the player will continue to attack that particular target.<br/><br/>It seems to me like that would be a reasonable thing to try to do, but the problem is that it doesn't appear to be legal not to specify a valid object in the declaration. Specifying &quot;null&quot; also doesn't appear to work. At first, I tried to get around that by pointing the object to the player himself to indicate that he's not currently attacking a monster, and that worked reasonably well.<br/><br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;defaultplayer&quot; /&gt;<br/>      &lt;attr name=&quot;current_target0&quot; type=&quot;object&quot;&gt;&lt;/attr&gt; // &lt;-- This isn't legal<br/>      &lt;attr name=&quot;current_target1&quot; type=&quot;object&quot;&gt;null&lt;/attr&gt; // &lt;-- This isn't legal either<br/>      &lt;attr name=&quot;current_target2&quot; type=&quot;object&quot;&gt;player&lt;/attr&gt; // &lt;-- This is legal, though not very elegant<br/>    &lt;/object&gt;<br/><br/>Note that during the game, I can set the attribute to null and compare it to null, but I can't get this to work in the declaration.<br/><br/>But now, I want to put this attribute into a type, to be inherited by players and monsters, and I also put this type into a separate library file, and this trick no longer works. In order to be universal, the type attribute of course can't point at the player, and even the game object doesn't exist yet when the library is loaded.<br/><br/>I suppose I could create a library that defines something like &lt;object name=&quot;null_object&quot;&gt;&lt;/object&gt;, but null_object and null would still not be the same later on during the game. Am I really the first person to run into this? It seems to me that there should be a more elegant solution...",
      "PostDate": "2014-01-23T08:20:41+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27606",
      "UserId": 0,
      "Username": "gernotg",
      "UserAvatar": null,
      "UserGravatar": "ac4ee49ebfcb27982dd9398e86610805",
      "EditableText": "Ugh, never mind. Simply not declaring the attribute works just fine. It really a little mind-boggling to me, but I guess that's part of what makes it interesting.\n\nMaybe we can document this somewhere in the wiki...",
      "EditableFormat": "bbcode",
      "HTML": "Ugh, never mind. Simply not declaring the attribute works just fine. It really a little mind-boggling to me, but I guess that's part of what makes it interesting.<br/><br/>Maybe we can document this somewhere in the wiki...",
      "PostDate": "2014-01-23T09:29:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27624",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Quest doesn't have an &quot;uninitialized&quot; value for object attributes. You use the presence or absence to determine existence, if necessary. (If you use GetAttribute, it will return null if the attribute doesn't exist, so that is a convenience.) You could, in theory, define a NullObject to be a value holder if you really needed it, but usually you don't.\n\nQuest follows more the JavaScript model for objects and attributes, in that attributes can be set dynamically, at any time, to any type. You don't need to pre-declare them the way you do in typed languages like C++. Also, you can reassign an attribute at runtime to different types. First it can be a string, then an integer. (I have used this to good effect myself.)\n\nAssigning null to an attribute has the effect of deleting it from the object. You can never have an attribute (of any type) with value null.\n\nYou've come across the right solution - don't assign the attribute until you need it. And if you use GetAttribute to query it, you'll get null back if the attribute is not defined.",
      "EditableFormat": "bbcode",
      "HTML": "Quest doesn't have an &quot;uninitialized&quot; value for object attributes. You use the presence or absence to determine existence, if necessary. (If you use GetAttribute, it will return null if the attribute doesn't exist, so that is a convenience.) You could, in theory, define a NullObject to be a value holder if you really needed it, but usually you don't.<br/><br/>Quest follows more the JavaScript model for objects and attributes, in that attributes can be set dynamically, at any time, to any type. You don't need to pre-declare them the way you do in typed languages like C++. Also, you can reassign an attribute at runtime to different types. First it can be a string, then an integer. (I have used this to good effect myself.)<br/><br/>Assigning null to an attribute has the effect of deleting it from the object. You can never have an attribute (of any type) with value null.<br/><br/>You've come across the right solution - don't assign the attribute until you need it. And if you use GetAttribute to query it, you'll get null back if the attribute is not defined.",
      "PostDate": "2014-01-23T21:29:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27626",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "an easy solution if you don't mind using it, is this:\n\n(forgive me, as I'm still trying to learn equipment coding, and understanding object lists, so this code of mine may not work as it's probably not done correctly)\n\nmany people with (weapon) equipment do this (a quick example of my own making)\n\nmaking a &quot;null-in-effect&quot; Object, ie: &quot;unarmed~fists~HtH~Hand-to-Hand&quot;\n\nas this way you can exchange between your &quot;null&quot; (unarmed) Object and your &quot;real&quot; (wooden sword) object...\n\n&lt;object name=&quot;player&quot;&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;attr name=&quot;equipped_weapon&quot; type=&quot;object&quot;&gt;unarmed_weapon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;global_storage_object&quot;&gt;\n-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt; &lt;object name=&quot;unarmed_weapon&quot;&gt;\n-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt;-&gt; &lt;alias&gt;unarmed&lt;/alias&gt;\n-&gt;-&gt; &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n-&gt; &lt;/object&gt;\n-&gt; &lt;object name=&quot;wooden_sword_weapon&quot;&gt;\n-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;\n-&gt;-&gt; &lt;alias&gt;wooden sword&lt;/alias&gt;\n-&gt;-&gt; &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n-&gt; &lt;/object&gt;\n-&gt; &lt;attr name=&quot;weapon_object_list&quot;&gt;unarmed_weapon;wooden_sword_weapon&lt;/attr&gt;\n&lt;/object&gt;\n\n&quot;equip&quot; Verb:\nshow menu (&quot;weapon or armor&quot;, split (&quot;weapon;armor&quot;,&quot;;&quot;) {\n-&gt; if (result = &quot;weapon&quot;) {\n-&gt;-&gt; show menu (&quot;what weapon?&quot;, global_data_object.weapon_object_list, false) {\n-&gt;-&gt;-&gt; if (result = wooden_sword_weapon) {\n-&gt;-&gt;-&gt;-&gt; wooden_sword_weapon.parent = player\n-&gt;-&gt;-&gt;-&gt; player.equipped_weapon = wooden_sword_weapon\n-&gt;-&gt;-&gt; } else // ... etc",
      "EditableFormat": "bbcode",
      "HTML": "an easy solution if you don't mind using it, is this:<br/><br/>(forgive me, as I'm still trying to learn equipment coding, and understanding object lists, so this code of mine may not work as it's probably not done correctly)<br/><br/>many people with (weapon) equipment do this (a quick example of my own making)<br/><br/>making a &quot;null-in-effect&quot; Object, ie: &quot;unarmed~fists~HtH~Hand-to-Hand&quot;<br/><br/>as this way you can exchange between your &quot;null&quot; (unarmed) Object and your &quot;real&quot; (wooden sword) object...<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;attr name=&quot;equipped_weapon&quot; type=&quot;object&quot;&gt;unarmed_weapon&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;global_storage_object&quot;&gt;<br/>-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt; &lt;object name=&quot;unarmed_weapon&quot;&gt;<br/>-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt;-&gt; &lt;alias&gt;unarmed&lt;/alias&gt;<br/>-&gt;-&gt; &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>-&gt; &lt;/object&gt;<br/>-&gt; &lt;object name=&quot;wooden_sword_weapon&quot;&gt;<br/>-&gt;-&gt; &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>-&gt;-&gt; &lt;alias&gt;wooden sword&lt;/alias&gt;<br/>-&gt;-&gt; &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>-&gt; &lt;/object&gt;<br/>-&gt; &lt;attr name=&quot;weapon_object_list&quot;&gt;unarmed_weapon;wooden_sword_weapon&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&quot;equip&quot; Verb:<br/>show menu (&quot;weapon or armor&quot;, split (&quot;weapon;armor&quot;,&quot;;&quot;) {<br/>-&gt; if (result = &quot;weapon&quot;) {<br/>-&gt;-&gt; show menu (&quot;what weapon?&quot;, global_data_object.weapon_object_list, false) {<br/>-&gt;-&gt;-&gt; if (result = wooden_sword_weapon) {<br/>-&gt;-&gt;-&gt;-&gt; wooden_sword_weapon.parent = player<br/>-&gt;-&gt;-&gt;-&gt; player.equipped_weapon = wooden_sword_weapon<br/>-&gt;-&gt;-&gt; } else // ... etc",
      "PostDate": "2014-01-23T22:34:42+00:00",
      "LastEditDate": null
    }
  ]
}
