{
  "Topic": {
    "TopicId": "lsmyhsms-km2c3avv8kvag",
    "ForumId": "10",
    "Title": "Creating menu for dialouge (SOLVED)",
    "LastUpdated": "2019-10-16T18:02:06.111761Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9f81a1e0-ce2f-42a3-aec0-2b4c1a6d1704",
      "UserId": 301405,
      "Username": "CheshireTiger",
      "AvatarUrl": "https://i.imgur.com/dGwXAqub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure how to do it, i have the responses typed out but I'm not sure how to set it up.\r\n\r\nPlayer talks to NPC -->  start of convewrsation --> player is given choice of how to respond: Honestly or Cowardly\r\n==> Honestly: conversation continues and ends\r\n==> Cowardly : conversation ends and player is moved to previous room\r\n\r\nhow would this look?(not codeview plz)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure how to do it, i have the responses typed out but I'm not sure how to set it up.</p>\n<p>Player talks to NPC --&gt;  start of convewrsation --&gt; player is given choice of how to respond: Honestly or Cowardly<br>\n==&gt; Honestly: conversation continues and ends<br>\n==&gt; Cowardly : conversation ends and player is moved to previous room</p>\n<p>how would this look?(not codeview plz)</p>\n\n",
      "PostDate": "2019-10-16T18:02:06.111761Z",
      "LastEditDate": "2019-10-16T19:16:00.7585003Z",
      "link": null
    },
    {
      "PostId": "4cc4370c-a522-42e9-8984-ab7ab6332819",
      "UserId": 418279,
      "Username": "Zesc",
      "AvatarUrl": "https://i.imgur.com/bGcfC7sb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you haven#t already, you may want to take a look at this tutorial: http://docs.textadventures.co.uk/quest/conversations.html\r\n\r\nWith that out of the way, the most simple version would be using ```{command:}```, which are printed as clickable hyperlinks with custom readings, executing a script, etc. when clicked.\r\n\r\nElse, you could try working with an ```ask () {}``` script. It only works for yes/no questions, so you had to ask something like \"Do you want to lie?\", but is quite handy and simple to understand.\r\n***\r\n*(You may skip this rambling)*\r\nHowever, asking for a yes/no question, especially in a moral context, will lead to psychological bias that are not to be underestimated. Depending on how you word your question, most people will have tendencies towards the \"positive\" answer, which is a major point on Social Engineering, for example. Letting the player come to their own terms will lead to more natural reactions, even if it requires some guess-the-verb.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you haven#t already, you may want to take a look at this tutorial: http://docs.textadventures.co.uk/quest/conversations.html</p>\n<p>With that out of the way, the most simple version would be using <code>{command:}</code>, which are printed as clickable hyperlinks with custom readings, executing a script, etc. when clicked.</p>\n<p>Else, you could try working with an <code>ask () {}</code> script. It only works for yes/no questions, so you had to ask something like \"Do you want to lie?\", but is quite handy and simple to understand.</p>\n<hr>\n<p><em>(You may skip this rambling)</em><br>\nHowever, asking for a yes/no question, especially in a moral context, will lead to psychological bias that are not to be underestimated. Depending on how you word your question, most people will have tendencies towards the \"positive\" answer, which is a major point on Social Engineering, for example. Letting the player come to their own terms will lead to more natural reactions, even if it requires some guess-the-verb.</p>\n\n",
      "PostDate": "2019-10-16T18:49:25.3291863Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b3efa53-58cb-437e-9f4b-b2e80598e4a6",
      "UserId": 301405,
      "Username": "CheshireTiger",
      "AvatarUrl": "https://i.imgur.com/dGwXAqub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Zasc I already know talk to and Ask/tell verbs and meassages. No, i do not intend to use hyperlinks.\r\nhttps://imgur.com/a/0TetKZK\r\n\r\nthis is what it shows",
      "EditableFormat": "markdown",
      "HTML": "<p>@Zasc I already know talk to and Ask/tell verbs and meassages. No, i do not intend to use hyperlinks.<br>\nhttps://imgur.com/a/0TetKZK</p>\n<p>this is what it shows</p>\n\n",
      "PostDate": "2019-10-16T18:55:57.1017968Z",
      "LastEditDate": "2019-10-16T19:05:17.9100148Z",
      "link": null
    },
    {
      "PostId": "cdb55bf6-ec6a-4b8d-9ae4-7f3d2291fdbc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The normal way to do this would be to use `ShowMenu`.\r\n\r\nYour script would look something like:\r\n```\r\nShowMenu (\"How do you respond?\", Split(\"Honestly;Cowardly\"), true) {\r\n  switch (result) {\r\n    case (\"Honestly\") {\r\n      // code to continue the conversation goes here\r\n    }\r\n    case (\"Cowardly\") {\r\n      // code to move the player to another room goes here\r\n    }\r\n  }\r\n}\r\n```\r\nYou don't need to use code view; you can open it just long enough to paste the code in, and then you can see how it looks in the GUI. Code view is just the easiest way to send a piece of a script to someone.",
      "EditableFormat": "markdown",
      "HTML": "<p>The normal way to do this would be to use <code>ShowMenu</code>.</p>\n<p>Your script would look something like:</p>\n<pre><code>ShowMenu (\"How do you respond?\", Split(\"Honestly;Cowardly\"), true) {\n  switch (result) {\n    case (\"Honestly\") {\n      // code to continue the conversation goes here\n    }\n    case (\"Cowardly\") {\n      // code to move the player to another room goes here\n    }\n  }\n}\n</code></pre>\n<p>You don't need to use code view; you can open it just long enough to paste the code in, and then you can see how it looks in the GUI. Code view is just the easiest way to send a piece of a script to someone.</p>\n\n",
      "PostDate": "2019-10-16T19:05:00.4369745Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "499ecdb2-b81f-4d06-9215-7acff5d0c18f",
      "UserId": 301405,
      "Username": "CheshireTiger",
      "AvatarUrl": "https://i.imgur.com/dGwXAqub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel O.k. That works perfectly, Thank you. i just needed to add the Split and \" around the options",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel O.k. That works perfectly, Thank you. i just needed to add the Split and \" around the options</p>\n\n",
      "PostDate": "2019-10-16T19:15:33.3728465Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b3487c12-63d9-4162-ada3-068e78986173",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just to add:\r\n\r\n-----\r\n\r\nthe 'Split' Function is a helper Function: a quick/easy way of creating (it creates and returns) a String List Attribute\r\n\r\nSplit (\"STRING_VALUE SEPERATOR_CHARACTER STRING_VALUE\", \"SEPERATOR_CHARACTER\")\r\n\r\nexample_stringlist_variable = Split (\"Honestly;Cowardly\", \";\")\r\n\r\n// the default SEPERATOR_CHARACTER is the semicolon, so that's why mrangel just has it like this: Split (\"STRING_VALUE;STRING_VALUE\"), quest understands that if you don't specify the SEPERATOR_CHARACTER, it automatically uses the default SEPERATOR_CHARACTER, which is the semicolon\r\n\r\n// this is useful, as you can take a String, for example, using spaces/white-spaces: example_string_variable = \"Honestly Cowardly\"\r\n// and use it in the 'Split' Function, for this example, using a space/white-space, as your SEPERATOR_CHARACTER: Split (example_string_variable, \" \")\r\n\r\nDisplayList (example_stringlist_variable, 1)\r\n// output:\r\n1. Honestly\r\n2. Cowardly\r\n\r\n```\r\nShowMenu (\"How do you respond?\", Split(\"Honestly;Cowardly\"), true) {\r\n  switch (result) {\r\n    case (\"Honestly\") {\r\n      // code to continue the conversation goes here\r\n    }\r\n    case (\"Cowardly\") {\r\n      // code to move the player to another room goes here\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n----------\r\n\r\nalternatively, you can do this (manually creating your String List Attribute), as well:\r\n\r\n```\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringlist_attribute = NewStringList ()\r\n\r\nlist add (example_object.example_stringlist_attribute, \"Honestly\")\r\nlist add (example_object.example_stringlist_attribute, \"Cowardly\")\r\n\r\n------------------\r\n\r\nShowMenu (\"How do you respond?\", example_object.example_stringlist_attribute, true) {\r\n  switch (result) {\r\n    case (\"Honestly\") {\r\n      // code to continue the conversation goes here\r\n    }\r\n    case (\"Cowardly\") {\r\n      // code to move the player to another room goes here\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n-------------\r\n\r\nwhile, usually it's easier/better to just use the 'split' Function, it's useful to know how to create a list manually, because....\r\n\r\nthe 'Split' Function can ONLY create a String List\r\n\r\nif you want to create an Object List, you must do so manually:\r\n\r\n```\r\ncreate (\"example_object\")\r\n\r\ncreate (\"train\")\r\n\r\ncreate (\"car\")\r\n\r\ncreate (\"boat\")\r\n\r\nexample_object.example_objectlist_attribute = NewObjectList ()\r\n\r\nlist add (example_object.example_objectlist_attribute, train)\r\nlist add (example_object.example_objectlist_attribute, car)\r\nlist add (example_object.example_objectlist_attribute, boat)\r\n\r\n// MPORTANT:\r\n\r\nnote the differences between a String List and an Object List\r\n\r\nfor a String List, it's Values are Strings, so they MUST have the double quotes: \"Honestly\" and \"Cowardly\"\r\n\r\nfor an Object List, it's Values are Object references/pointers, so you must: (1) actually have the Objects existing, and (2) you do NOT use the double quotes on them: train, car, and boat\r\n```\r\n\r\n---------------\r\n\r\nas the 2nd argument/parameter in the 'show menu / ShowMenu' Function, requires a List (or Dictionary) Attribute:\r\n\r\n```\r\nshow menu (\"PROMPT\", LIST/DICTIONARY, BOOLEAN: either, true: display as a numbered list, or false: non-numbered list) { SCRIPTING }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>just to add:</p>\n<hr>\n<p>the 'Split' Function is a helper Function: a quick/easy way of creating (it creates and returns) a String List Attribute</p>\n<p>Split (\"STRING_VALUE SEPERATOR_CHARACTER STRING_VALUE\", \"SEPERATOR_CHARACTER\")</p>\n<p>example_stringlist_variable = Split (\"Honestly;Cowardly\", \";\")</p>\n<p>// the default SEPERATOR_CHARACTER is the semicolon, so that's why mrangel just has it like this: Split (\"STRING_VALUE;STRING_VALUE\"), quest understands that if you don't specify the SEPERATOR_CHARACTER, it automatically uses the default SEPERATOR_CHARACTER, which is the semicolon</p>\n<p>// this is useful, as you can take a String, for example, using spaces/white-spaces: example_string_variable = \"Honestly Cowardly\"<br>\n// and use it in the 'Split' Function, for this example, using a space/white-space, as your SEPERATOR_CHARACTER: Split (example_string_variable, \" \")</p>\n<p>DisplayList (example_stringlist_variable, 1)<br>\n// output:</p>\n<ol>\n<li>Honestly</li>\n<li>Cowardly</li>\n</ol>\n<pre><code>ShowMenu (\"How do you respond?\", Split(\"Honestly;Cowardly\"), true) {\n  switch (result) {\n    case (\"Honestly\") {\n      // code to continue the conversation goes here\n    }\n    case (\"Cowardly\") {\n      // code to move the player to another room goes here\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>alternatively, you can do this (manually creating your String List Attribute), as well:</p>\n<pre><code>create (\"example_object\")\n\nexample_object.example_stringlist_attribute = NewStringList ()\n\nlist add (example_object.example_stringlist_attribute, \"Honestly\")\nlist add (example_object.example_stringlist_attribute, \"Cowardly\")\n\n------------------\n\nShowMenu (\"How do you respond?\", example_object.example_stringlist_attribute, true) {\n  switch (result) {\n    case (\"Honestly\") {\n      // code to continue the conversation goes here\n    }\n    case (\"Cowardly\") {\n      // code to move the player to another room goes here\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>while, usually it's easier/better to just use the 'split' Function, it's useful to know how to create a list manually, because....</p>\n<p>the 'Split' Function can ONLY create a String List</p>\n<p>if you want to create an Object List, you must do so manually:</p>\n<pre><code>create (\"example_object\")\n\ncreate (\"train\")\n\ncreate (\"car\")\n\ncreate (\"boat\")\n\nexample_object.example_objectlist_attribute = NewObjectList ()\n\nlist add (example_object.example_objectlist_attribute, train)\nlist add (example_object.example_objectlist_attribute, car)\nlist add (example_object.example_objectlist_attribute, boat)\n\n// MPORTANT:\n\nnote the differences between a String List and an Object List\n\nfor a String List, it's Values are Strings, so they MUST have the double quotes: \"Honestly\" and \"Cowardly\"\n\nfor an Object List, it's Values are Object references/pointers, so you must: (1) actually have the Objects existing, and (2) you do NOT use the double quotes on them: train, car, and boat\n</code></pre>\n<hr>\n<p>as the 2nd argument/parameter in the 'show menu / ShowMenu' Function, requires a List (or Dictionary) Attribute:</p>\n<pre><code>show menu (\"PROMPT\", LIST/DICTIONARY, BOOLEAN: either, true: display as a numbered list, or false: non-numbered list) { SCRIPTING }\n</code></pre>\n\n",
      "PostDate": "2019-10-17T08:05:52.0855362Z",
      "LastEditDate": "2019-10-17T08:26:04.9975755Z",
      "link": null
    }
  ]
}
