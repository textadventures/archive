{
  "Topic": {
    "TopicId": "nxycd_dd6kuvzyj1tdktfa",
    "ForumId": "24",
    "Title": "(Suggestion&Tip!) Improvement of  {if :} statement.",
    "LastUpdated": "2017-05-07T10:20:30.3974231Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8db61667-8c79-41ad-b103-bd3ff1288116",
      "UserId": 305110,
      "Username": "story10",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d51cc49137a078f9c91cdd6cb6693d9a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " Many people want to improve the flexibility of \"{if:}\" statement .  So I tried to find the way to improve it only with \"in-squiffy javascript\" by real time function redefinition. But I found it is technically impossible because some squiffy functions are hidden.\r\n\r\nI suggest the Creator to change source codes as the following.  I tried to achieve the maximum flexibility with the minimum change of source codes. I think it deserve to be applied for many squiffy users.\r\n\r\nThanks.\r\n\r\np.s. If someone want to try it,  modify \"story.js\" after \"build\" according to \"How to\". \r\n       Don't be afraid. It's a piece of cake. :)\r\n\r\n\r\n1.  **Change squiffy variables in \"if\" statement**\r\n**1.1. Usage**\r\n        {if a=1:{@b+=1,c-=1,d=2,not e}}{else:{@b+=2,c+=2,d=3,e}}       \r\n       //  add \"{@ *operations*}\"  after condition colon(:)  \r\n       // \"not e\" means \"e=false\",  \"e\" means \"e=true\"\r\n\r\n      **1.2 How to**       \r\n        Add additional \"else if\" clause  in \"processTextCommand\" function as the following. \r\n        (story.js  line # 415~420)\r\n\r\n            else if (startsWith(text,'@') && !startsWith(text,'@replace')) {\r\n                processAttributes(text.substring(1).split(\",\"));\r\n                return \"\";\r\n            }\r\n\r\n2. **Comparison between squiffy variables**\r\n   **2.1  Usage**\r\n     {if a=@b:   }   // if you add @ before second variable, it is treated as a squiffy variable not value.\r\n   \r\n   **2.2. How to**\r\n Add only one line  in \"processTextCommand_If\" function as the following. \r\n  ( story.js  line # 438~439 in original code  or #442~443 after adding additional \"else if\" clause above. )\r\n\r\n            if (match) {\r\n                var lhs = squiffy.get(match[1]);\r\n                var op = match[2];\r\n                var rhs = match[3];\r\n                if(startsWith(rhs,'@')) rhs=squiffy.get(rhs.substring(1));    // <-- add only this one.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Many people want to improve the flexibility of \"{if:}\" statement .  So I tried to find the way to improve it only with \"in-squiffy javascript\" by real time function redefinition. But I found it is technically impossible because some squiffy functions are hidden.</p>\n<p>I suggest the Creator to change source codes as the following.  I tried to achieve the maximum flexibility with the minimum change of source codes. I think it deserve to be applied for many squiffy users.</p>\n<p>Thanks.</p>\n<p>p.s. If someone want to try it,  modify \"story.js\" after \"build\" according to \"How to\".<br>\nDon't be afraid. It's a piece of cake. :)</p>\n<ol>\n<li>\n<p><strong>Change squiffy variables in \"if\" statement</strong><br>\n<strong>1.1. Usage</strong><br>\n{if a=1:{@b+=1,c-=1,d=2,not e}}{else:{@b+=2,c+=2,d=3,e}}<br>\n//  add \"{@ <em>operations</em>}\"  after condition colon(:)<br>\n// \"not e\" means \"e=false\",  \"e\" means \"e=true\"</p>\n<p><strong>1.2 How to</strong><br>\nAdd additional \"else if\" clause  in \"processTextCommand\" function as the following.<br>\n(story.js  line # 415~420)</p>\n<pre><code>    else if (startsWith(text,'@') &amp;&amp; !startsWith(text,'@replace')) {\n        processAttributes(text.substring(1).split(\",\"));\n        return \"\";\n    }\n</code></pre>\n</li>\n<li>\n<p><strong>Comparison between squiffy variables</strong><br>\n<strong>2.1  Usage</strong><br>\n{if a=@b:   }   // if you add @ before second variable, it is treated as a squiffy variable not value.</p>\n<p><strong>2.2. How to</strong><br>\nAdd only one line  in \"processTextCommand_If\" function as the following.<br>\n( story.js  line # 438~439 in original code  or #442~443 after adding additional \"else if\" clause above. )</p>\n<pre><code>     if (match) {\n         var lhs = squiffy.get(match[1]);\n         var op = match[2];\n         var rhs = match[3];\n         if(startsWith(rhs,'@')) rhs=squiffy.get(rhs.substring(1));    // &lt;-- add only this one.\n</code></pre>\n</li>\n</ol>\n\n",
      "PostDate": "2017-05-07T10:20:30.3974231Z",
      "LastEditDate": "2017-05-09T03:41:47.665451Z"
    },
    {
      "PostId": "f6d0a912-9680-47db-a7b6-fde0ed370207",
      "UserId": 305110,
      "Username": "story10",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d51cc49137a078f9c91cdd6cb6693d9a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As we know, multiple conditions can be handled with nested-if-clause (e.g. {if:{if:{if... )\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>As we know, multiple conditions can be handled with nested-if-clause (e.g. {if:{if:{if... )</p>\n\n",
      "PostDate": "2017-05-07T10:32:42.6815423Z",
      "LastEditDate": null
    },
    {
      "PostId": "ad82b362-9bdc-40fe-b754-1ceff5d6f4a8",
      "UserId": 286504,
      "Username": "manowar",
      "AvatarUrl": "http://i.imgur.com/mpaalk0b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Great!",
      "EditableFormat": "markdown",
      "HTML": "<p>Great!</p>\n\n",
      "PostDate": "2017-05-07T20:16:29.2088899Z",
      "LastEditDate": null
    },
    {
      "PostId": "4a766b08-c539-43d3-aa6b-72a8377a785f",
      "UserId": 305110,
      "Username": "story10",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d51cc49137a078f9c91cdd6cb6693d9a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "3.  **Extension of calculation**\r\nEnable multiplication, division and using values of other variables.\r\nModify  the lines with comments in \"setAttribute\" function as the following.\r\n\r\n\r\n    var setAttribute = function(expr) {\r\n        var lhs, rhs, op, value;\r\n        var setRegex = /^([\\w]*)\\s*=\\s*(.*)$/;\r\n        var setMatch = setRegex.exec(expr);\r\n        if (setMatch) {                  \r\n            lhs = setMatch[1];\r\n            rhs = setMatch[2];\r\n            if (isNaN(rhs)) {\r\n                    if(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));     //  @variable\r\n                    squiffy.set(lhs, rhs);\r\n            }\r\n            else {\r\n                squiffy.set(lhs, parseFloat(rhs));\r\n            }\r\n        }\r\n        else {\r\n            var incDecRegex = /^([\\w]*)\\s*([\\+\\-\\*\\/])=\\s*(.*)$/;                //    add * and  / \r\n            var incDecMatch = incDecRegex.exec(expr);\r\n            if (incDecMatch) {\r\n                lhs = incDecMatch[1];\r\n                op = incDecMatch[2]; \r\n                rhs = incDecMatch[3];                                              // \r\n                if(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));         //  @variable \r\n                rhs = parseFloat(rhs);                                             //\r\n                value = squiffy.get(lhs);\r\n                if (value === null) value = 0;\r\n                if (op == '+') {\r\n                    value += rhs;\r\n                }\r\n                if (op == '-') {\r\n                    value -= rhs;\r\n                }                                                       \r\n                if (op == '*') {                                             // multiplication(*) \r\n                    value *= rhs;\r\n                }\r\n                if (op == '/') {                                            // division( /)\r\n                    value /= rhs;\r\n                }\r\n",
      "EditableFormat": "markdown",
      "HTML": "<ol start=\"3\">\n<li><strong>Extension of calculation</strong><br>\nEnable multiplication, division and using values of other variables.<br>\nModify  the lines with comments in \"setAttribute\" function as the following.</li>\n</ol>\n<pre><code>var setAttribute = function(expr) {\n    var lhs, rhs, op, value;\n    var setRegex = /^([\\w]*)\\s*=\\s*(.*)$/;\n    var setMatch = setRegex.exec(expr);\n    if (setMatch) {                  \n        lhs = setMatch[1];\n        rhs = setMatch[2];\n        if (isNaN(rhs)) {\n                if(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));     //  @variable\n                squiffy.set(lhs, rhs);\n        }\n        else {\n            squiffy.set(lhs, parseFloat(rhs));\n        }\n    }\n    else {\n        var incDecRegex = /^([\\w]*)\\s*([\\+\\-\\*\\/])=\\s*(.*)$/;                //    add * and  / \n        var incDecMatch = incDecRegex.exec(expr);\n        if (incDecMatch) {\n            lhs = incDecMatch[1];\n            op = incDecMatch[2]; \n            rhs = incDecMatch[3];                                              // \n            if(startsWith(rhs,\"@\")) rhs=squiffy.get(rhs.substring(1));         //  @variable \n            rhs = parseFloat(rhs);                                             //\n            value = squiffy.get(lhs);\n            if (value === null) value = 0;\n            if (op == '+') {\n                value += rhs;\n            }\n            if (op == '-') {\n                value -= rhs;\n            }                                                       \n            if (op == '*') {                                             // multiplication(*) \n                value *= rhs;\n            }\n            if (op == '/') {                                            // division( /)\n                value /= rhs;\n            }\n</code></pre>\n\n",
      "PostDate": "2017-05-09T02:00:14.087468Z",
      "LastEditDate": "2017-05-09T05:32:14.1753525Z"
    },
    {
      "PostId": "f1d64517-5db9-4eaf-b21f-692f1b68bd75",
      "UserId": 305110,
      "Username": "story10",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d51cc49137a078f9c91cdd6cb6693d9a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "We can do the following.\r\n\r\n1. **Squiffy codes**\r\n\r\n\r\n    [[Lucky day]]:\r\n\r\n    The begger has no money. {@b_has=0}\r\n    He finds a dollar on the floor and takes it. {@b_has+=1}\r\n    Now he has {b_has} dollar. \r\n    {if b_has>100:He feels rich.}{else:But, he feels still poor.}\r\n\r\n    A rich man goes by the begger. {@r_has=100}\r\n    He gives a half of money to the begger. {@r_gives=@r_has}{@r_gives/=2}\r\n\r\n    The begger says,\r\n    {if r_gives=@r_has:{@b_has+=@r_has}{@r_has=0} \"Thank you very much, sir!\"}\r\n    {else:{@b_has+=@r_gives}{@r_has-=@r_gives} \"Thank you for {r_gives} bucks.\"}\r\n\r\n    Now he has {b_has} dollars.\r\n    {if b_has>100:He feels rich.}{else:But, he feels still poor.}\r\n  \r\n    The rich man gets back and gives the begger all the money he has. {@r_gives=@r_has}\r\n    \r\n    The begger says,\r\n    {if r_gives=@r_has:{@b_has+=@r_has}{@r_has=0} \"Thank you very much, sir!\"}\r\n    {else:{@b_has+=@r_gives}{@r_has-=@r_gives} \"Thank you for {r_gives} bucks.\"}\r\n\r\n    Now he has {b_has} dollars.\r\n    {if b_has>100:He feels rich.}{else:But, he feels still poor.}\r\n\r\n  2. **Output**\r\n\r\n    The begger has no money.\r\n    He finds a dollar on the floor and takes it.\r\n    Now he has 1 dollar.But, he feels still poor.\r\n\r\n    A rich man goes by the begger. He gives a half of money to the begger.\r\n    The begger says, \"Thank you for 50 bucks.\"\r\n    Now he has 51 dollars. But, he feels still poor.\r\n\r\n    The rich man gets back and gives the begger all the money he has. \r\n    The begger says, \"Thank you very much, sir!\" \r\n    Now he has 101 dollars. He feels rich.",
      "EditableFormat": "markdown",
      "HTML": "<p>We can do the following.</p>\n<ol>\n<li><strong>Squiffy codes</strong></li>\n</ol>\n<pre><code>[[Lucky day]]:\n\nThe begger has no money. {@b_has=0}\nHe finds a dollar on the floor and takes it. {@b_has+=1}\nNow he has {b_has} dollar. \n{if b_has&gt;100:He feels rich.}{else:But, he feels still poor.}\n\nA rich man goes by the begger. {@r_has=100}\nHe gives a half of money to the begger. {@r_gives=@r_has}{@r_gives/=2}\n\nThe begger says,\n{if r_gives=@r_has:{@b_has+=@r_has}{@r_has=0} \"Thank you very much, sir!\"}\n{else:{@b_has+=@r_gives}{@r_has-=@r_gives} \"Thank you for {r_gives} bucks.\"}\n\nNow he has {b_has} dollars.\n{if b_has&gt;100:He feels rich.}{else:But, he feels still poor.}\n\nThe rich man gets back and gives the begger all the money he has. {@r_gives=@r_has}\n\nThe begger says,\n{if r_gives=@r_has:{@b_has+=@r_has}{@r_has=0} \"Thank you very much, sir!\"}\n{else:{@b_has+=@r_gives}{@r_has-=@r_gives} \"Thank you for {r_gives} bucks.\"}\n\nNow he has {b_has} dollars.\n{if b_has&gt;100:He feels rich.}{else:But, he feels still poor.}\n</code></pre>\n<ol start=\"2\">\n<li><strong>Output</strong></li>\n</ol>\n<pre><code>The begger has no money.\nHe finds a dollar on the floor and takes it.\nNow he has 1 dollar.But, he feels still poor.\n\nA rich man goes by the begger. He gives a half of money to the begger.\nThe begger says, \"Thank you for 50 bucks.\"\nNow he has 51 dollars. But, he feels still poor.\n\nThe rich man gets back and gives the begger all the money he has. \nThe begger says, \"Thank you very much, sir!\" \nNow he has 101 dollars. He feels rich.\n</code></pre>\n\n",
      "PostDate": "2017-05-09T02:18:47.4896921Z",
      "LastEditDate": null
    },
    {
      "PostId": "f6db6b3a-9f02-4e21-a2da-98c3bb6ddc22",
      "UserId": 305110,
      "Username": "story10",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d51cc49137a078f9c91cdd6cb6693d9a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dear Luis and Alex,\r\n\r\nI think the power of Squiffy is the **easiness** which enables everyone to make IF without any knowledge of programming.\r\n Although **the core functionality** of IF is **processing variables and conditions**, current version does not support it well, as such,  many users have to repeat a bunch of \"squiffy.get(), squiffy.set()\". \r\n\r\nThe advantages of modified Squiffy are\r\n\r\n1. **Can handle variables \"**everywhere**\".**\r\nEven if we place \"@set\", \"@inc\", \"@dec\" statements in the middle of Section, current Squiffy processes it at the beginning and does not allow  handling variables in {if:} statement.\r\n\r\n    In the modified Squiffy, we can set and change variables in everywhere. So, we can write squiffy code according to the flow of storyline. It makes squiffy codes more intuitive and look like annotation of real book. In addition, we can be free from a bunch of squiffy.get(), squiffy.set(). It make squiffy code more slim and readable.\r\n\r\n\r\n2. **Can calculate complex formula**\r\nModified Squiffy can handle complex formula with a chain of unit calculation.\r\n\r\n    For. example,  c=(a+b)/2  is equal to  {@c=@a}{@c+=@b}{@c/=2}  or  {@c=@a,c+=@b,c/=2}\r\n\r\n3. **Don't need to change previous codes**\r\nModified Squiffy does not change any grammar of current Squiffy. \r\n**Just add only one new statement**    **{@  }**. \r\nThe only potential problem may occur when there is variable name starting with @.(But nobody do that. right?)\r\nAs such, modified Squiffy can be applied right now.\r\n\r\nI expect you agree with my opinion and my suggestion be applied to new release of Squiffy.\r\n\r\nThanks.\r\n:)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Dear Luis and Alex,</p>\n<p>I think the power of Squiffy is the <strong>easiness</strong> which enables everyone to make IF without any knowledge of programming.<br>\nAlthough <strong>the core functionality</strong> of IF is <strong>processing variables and conditions</strong>, current version does not support it well, as such,  many users have to repeat a bunch of \"squiffy.get(), squiffy.set()\".</p>\n<p>The advantages of modified Squiffy are</p>\n<ol>\n<li>\n<p><strong>Can handle variables \"<strong>everywhere</strong>\".</strong><br>\nEven if we place \"@set\", \"@inc\", \"@dec\" statements in the middle of Section, current Squiffy processes it at the beginning and does not allow  handling variables in {if:} statement.</p>\n<p>In the modified Squiffy, we can set and change variables in everywhere. So, we can write squiffy code according to the flow of storyline. It makes squiffy codes more intuitive and look like annotation of real book. In addition, we can be free from a bunch of squiffy.get(), squiffy.set(). It make squiffy code more slim and readable.</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li>\n<p><strong>Can calculate complex formula</strong><br>\nModified Squiffy can handle complex formula with a chain of unit calculation.</p>\n<p>For. example,  c=(a+b)/2  is equal to  {@c=@a}{@c+=@b}{@c/=2}  or  {@c=@a,c+=@b,c/=2}</p>\n</li>\n<li>\n<p><strong>Don't need to change previous codes</strong><br>\nModified Squiffy does not change any grammar of current Squiffy.<br>\n<strong>Just add only one new statement</strong>    <strong>{@  }</strong>.<br>\nThe only potential problem may occur when there is variable name starting with @.(But nobody do that. right?)<br>\nAs such, modified Squiffy can be applied right now.</p>\n</li>\n</ol>\n<p>I expect you agree with my opinion and my suggestion be applied to new release of Squiffy.</p>\n<p>Thanks.<br>\n:)</p>\n\n",
      "PostDate": "2017-05-09T03:24:20.3865406Z",
      "LastEditDate": "2017-05-09T05:35:28.6452999Z"
    },
    {
      "PostId": "d3a48e2b-9023-4095-91de-e1f42e57d343",
      "UserId": 262022,
      "Username": "thetruespin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/dc591017d34e833aceb21f01abe265e1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good work. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Good work.</p>\n\n",
      "PostDate": "2017-05-09T05:47:15.3502603Z",
      "LastEditDate": null
    }
  ]
}
