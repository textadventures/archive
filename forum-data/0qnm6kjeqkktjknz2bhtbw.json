{
  "Topic": {
    "TopicId": "0qnm6kjeqkktjknz2bhtbw",
    "ForumId": "24",
    "Title": ".split() and .substring() difficulty",
    "LastUpdated": "2023-02-17T23:52:24.0924208Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3e72112d-55ab-42db-acc1-439929651d0d",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When parsing player/user input ```.replace()``` simply ignores if it can't find any examples and then continues the script. No problem.\r\n\r\nHowever, ```.split()``` stops the script (and any script after it) if it can't find any examples. Very annoying. The script below works correctly a maximum of three times, but you can easily see how hairbrained the work-around is.\r\n```\r\n@set meal = I had a Taiwanese crÃªpe omelette with shiitake mushrooms, Thai basil, and cheddar, and a glass of boba milk tea.\r\n\r\n    //add 1 to the count of a noun following \"s of\", so that future parsing will treat it as plural.\r\n    var food = squiffy.get(\"meal\") + \" plates of bowls of cups of \"; //appending this at the end of a player input keeps it from quitting a maximum of three times.\r\n    var unit = food.replace(/[.,]/g, \"\");\r\n    var unit1 = unit.split(/[es|ls|ps|gs|ns] of/)[1].split(' ')[1];\r\n    squiffy.set(unit1, squiffy.get(unit1) + 1);\r\n    var unit2 = unit.split(/[es|ls|ps|gs|ns] of/)[2].split(' ')[1];\r\n    squiffy.set(unit2, squiffy.get(unit2) + 1);\r\n    var unit3 = unit.split(/[es|ls|ps|gs|ns] of/)[3].split(' ')[1];\r\n    squiffy.set(unit3, squiffy.get(unit3) + 1);\r\n    //end of \"s of\"",
      "EditableFormat": "markdown",
      "HTML": "<p>When parsing player/user input <code>.replace()</code> simply ignores if it can't find any examples and then continues the script. No problem.</p>\n<p>However, <code>.split()</code> stops the script (and any script after it) if it can't find any examples. Very annoying. The script below works correctly a maximum of three times, but you can easily see how hairbrained the work-around is.</p>\n<pre><code>@set meal = I had a Taiwanese crÃªpe omelette with shiitake mushrooms, Thai basil, and cheddar, and a glass of boba milk tea.\n\n    //add 1 to the count of a noun following \"s of\", so that future parsing will treat it as plural.\n    var food = squiffy.get(\"meal\") + \" plates of bowls of cups of \"; //appending this at the end of a player input keeps it from quitting a maximum of three times.\n    var unit = food.replace(/[.,]/g, \"\");\n    var unit1 = unit.split(/[es|ls|ps|gs|ns] of/)[1].split(' ')[1];\n    squiffy.set(unit1, squiffy.get(unit1) + 1);\n    var unit2 = unit.split(/[es|ls|ps|gs|ns] of/)[2].split(' ')[1];\n    squiffy.set(unit2, squiffy.get(unit2) + 1);\n    var unit3 = unit.split(/[es|ls|ps|gs|ns] of/)[3].split(' ')[1];\n    squiffy.set(unit3, squiffy.get(unit3) + 1);\n    //end of \"s of\"\n</code></pre>\n\n",
      "PostDate": "2023-02-17T23:52:24.0924208Z",
      "LastEditDate": "2023-02-17T23:57:21.522464Z",
      "link": null
    },
    {
      "PostId": "74888785-c941-4a44-8320-5adada89c313",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> However, .split() stops the script (and any script after it) if it can't find any examples.\r\n\r\nI don't think that's what's happening.\r\n\r\nYou start out with a string, `unit`.\r\n\r\nYou use the expression `unit.split(/[es|ls|ps|gs|ns] of/)` to split this string up into an array, split up where the \".s of\" is. Then you take the 2nd, 3rd, and 4th elements of this array and use `.split(' ')` on them.\r\n\r\nUsing `.split(' ')` on a string that doesn't have a space in would just not split it.\r\nUsing `.split(' ')` on the 4th element of a list that only has 3 elements causes an error; because split only works on a string.\r\n\r\nYou should check how many elements are in the list, and only do things to the ones that actually exist.\r\nI'm not sure I really understand what you're trying to do here; but I think you could do something like:\r\n```\r\n    var units = unit.split(/[es|ls|ps|gs|ns] of/);\r\n    for (i=1 ; i < units.length ; i++) {\r\n        var currentunit = units[i];\r\n        squiffy.set(currentunit, squiffy.get(currentunit) + 1);\r\n    }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>However, .split() stops the script (and any script after it) if it can't find any examples.</p>\n</blockquote>\n<p>I don't think that's what's happening.</p>\n<p>You start out with a string, <code>unit</code>.</p>\n<p>You use the expression <code>unit.split(/[es|ls|ps|gs|ns] of/)</code> to split this string up into an array, split up where the \".s of\" is. Then you take the 2nd, 3rd, and 4th elements of this array and use <code>.split(' ')</code> on them.</p>\n<p>Using <code>.split(' ')</code> on a string that doesn't have a space in would just not split it.<br>\nUsing <code>.split(' ')</code> on the 4th element of a list that only has 3 elements causes an error; because split only works on a string.</p>\n<p>You should check how many elements are in the list, and only do things to the ones that actually exist.<br>\nI'm not sure I really understand what you're trying to do here; but I think you could do something like:</p>\n<pre><code>    var units = unit.split(/[es|ls|ps|gs|ns] of/);\n    for (i=1 ; i &lt; units.length ; i++) {\n        var currentunit = units[i];\n        squiffy.set(currentunit, squiffy.get(currentunit) + 1);\n    }\n</code></pre>\n\n",
      "PostDate": "2023-02-18T21:06:04.9788945Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e5349ef7-a880-476d-b453-03fcbbc353dd",
      "UserId": 208122,
      "Username": "IFforClassroom",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9683526b9b2547bc86419ed8a2454df1?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, I gave a really bad example that (1) doesn't even show what I want to do and (2) has regex mistakes. Yikes. You're always so kind that it's hard to figure out how dense I'm being. ðŸ˜Š Here's another, hopefully better.\r\n```\r\n@set meal = I had a glass of milk, two bowls of oatmeal, and several strips of bacon with eggs on two pieces of toast. But my whole cups of butter won't get counted. Yay!\r\nvar food = squiffy.get(\"meal\") + \" plates of bowls of cups of \"; //appending this at the end of a player input keeps it from quitting a maximum of three times.\r\n    var unit = food.replace(/[.,]/g, \"\");\r\n    var unit1 = unit.split(/[elpgn]s of/)[1].split(' ')[1];\r\n    squiffy.set(unit1, squiffy.get(unit1) + 1);\r\n    var unit2 = unit.split(/[elpgn]s of/)[2].split(' ')[1];\r\n    squiffy.set(unit2, squiffy.get(unit2) + 1);\r\n    var unit3 = unit.split(/[elpgn]s of/)[3].split(' ')[1];\r\n    squiffy.set(unit3, squiffy.get(unit3) + 1);\r\n```\r\nThe result is\r\n```\r\nmeal = I had a glass of milk, two bowls of oatmeal, and several strips of bacon with eggs on two pieces of toast. But my whole cups of butter won't get counted. Yay!\r\noatmeal = 1\r\nbacon = 1\r\ntoast = 1\r\n```\r\nThe script I already have working already counted each food as one, making the result\r\n```\r\nmilk = 1\r\noatmeal = 2\r\nbacon = 2\r\negg = 2\r\ntoast = 2\r\nbutter = 1\r\n```\r\nI don't think any player is likely to use more than three collective nouns in one prompt, but it would be nice to have it work if they do.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, I gave a really bad example that (1) doesn't even show what I want to do and (2) has regex mistakes. Yikes. You're always so kind that it's hard to figure out how dense I'm being. ðŸ˜Š Here's another, hopefully better.</p>\n<pre><code>@set meal = I had a glass of milk, two bowls of oatmeal, and several strips of bacon with eggs on two pieces of toast. But my whole cups of butter won't get counted. Yay!\nvar food = squiffy.get(\"meal\") + \" plates of bowls of cups of \"; //appending this at the end of a player input keeps it from quitting a maximum of three times.\n    var unit = food.replace(/[.,]/g, \"\");\n    var unit1 = unit.split(/[elpgn]s of/)[1].split(' ')[1];\n    squiffy.set(unit1, squiffy.get(unit1) + 1);\n    var unit2 = unit.split(/[elpgn]s of/)[2].split(' ')[1];\n    squiffy.set(unit2, squiffy.get(unit2) + 1);\n    var unit3 = unit.split(/[elpgn]s of/)[3].split(' ')[1];\n    squiffy.set(unit3, squiffy.get(unit3) + 1);\n</code></pre>\n<p>The result is</p>\n<pre><code>meal = I had a glass of milk, two bowls of oatmeal, and several strips of bacon with eggs on two pieces of toast. But my whole cups of butter won't get counted. Yay!\noatmeal = 1\nbacon = 1\ntoast = 1\n</code></pre>\n<p>The script I already have working already counted each food as one, making the result</p>\n<pre><code>milk = 1\noatmeal = 2\nbacon = 2\negg = 2\ntoast = 2\nbutter = 1\n</code></pre>\n<p>I don't think any player is likely to use more than three collective nouns in one prompt, but it would be nice to have it work if they do.</p>\n\n",
      "PostDate": "2023-02-21T00:37:17.0372697Z",
      "LastEditDate": "2023-02-21T23:39:40.0520736Z",
      "link": null
    },
    {
      "PostId": "f3e071d9-70be-4539-90cb-f784a58d7d7e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I don't think any player is likely to use more than three collective nouns in one prompt, but it would be nice to have it work if they do.\r\n\r\nThat's another reason to use `for` (or `forEach`) rather than manually doing the same thing for elements 1, 2, and 3 from the list.\r\n\r\nActuallyâ€¦ looking at your expressions, it seems that you're just taking the first word after each instance of `/[elpgn]s of/` â€¦ in which case, using `split` seems to be a pretty unusual way of doing it. I'd probably suggest simplifying to something like:\r\n\r\n```\r\n    unit.matchAll(/[elpgn]s of *(\\w+)/g).forEach(match => {\r\n        squiffy.set(match[1], squiffy.get(match[1]) + 1);\r\n    });\r\n```\r\n`matchAll` finds every place a regex matches in a string; and `forEach` goes over the array doing the same thing for each item.\r\n\r\nWithin the foreach loop, `match[0]` will be something like `\"ps of butter\"` and `match[1]` will be `\"butter\"` (the first set of parentheses in the regex).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I don't think any player is likely to use more than three collective nouns in one prompt, but it would be nice to have it work if they do.</p>\n</blockquote>\n<p>That's another reason to use <code>for</code> (or <code>forEach</code>) rather than manually doing the same thing for elements 1, 2, and 3 from the list.</p>\n<p>Actuallyâ€¦ looking at your expressions, it seems that you're just taking the first word after each instance of <code>/[elpgn]s of/</code> â€¦ in which case, using <code>split</code> seems to be a pretty unusual way of doing it. I'd probably suggest simplifying to something like:</p>\n<pre><code>    unit.matchAll(/[elpgn]s of *(\\w+)/g).forEach(match =&gt; {\n        squiffy.set(match[1], squiffy.get(match[1]) + 1);\n    });\n</code></pre>\n<p><code>matchAll</code> finds every place a regex matches in a string; and <code>forEach</code> goes over the array doing the same thing for each item.</p>\n<p>Within the foreach loop, <code>match[0]</code> will be something like <code>\"ps of butter\"</code> and <code>match[1]</code> will be <code>\"butter\"</code> (the first set of parentheses in the regex).</p>\n\n",
      "PostDate": "2023-02-27T11:22:46.8967475Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
