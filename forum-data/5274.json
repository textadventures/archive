{
  "Topic": {
    "TopicId": "5274",
    "ForumId": "10",
    "Title": "Code Lockable Cabinet...Is this the best way?",
    "LastUpdated": "2015-06-13T17:57:11+01:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "36438",
      "UserId": 0,
      "Username": "Shiv379",
      "UserAvatar": null,
      "UserGravatar": "17daf861a3baa7c27a698dd03e1b0b5a",
      "EditableText": "Hi all!\n\nQuest newbie so please don't judge me too harshly <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->\nI've created a cabinet with a &quot;keypad&quot; for unlocking. I was wondering if anyone could take a look at what I've done and let me know if this is the best way? Ideally I'd like a way to reference to cabinet object linked from the keypad so I don't have to hardcode the object names (I have four cabinets so far and will probably need more - it would be much easier not having to correct references in the code for every one!).\n\nI'm wondering if it might actually be better to create a seperate function to handle the mechanics but I've never done this before in Quest so I'm not really sure how to do that.\n\n[code:2b5bd77m]&lt;object name=&quot;b2b4&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;alias&gt;ward bay&lt;/alias&gt;\n    &lt;description type=&quot;script&quot;&gt;\n      OutputTextNoBr (&quot;Next to an empty {object&#58;b2b4_bed} stands a small {object&#58;b2b4_cabinet} which you assume is for storing patient belongings and medication&#46; &quot;)\n    &lt;/description&gt;\n    &lt;usedefaultprefix /&gt;\n    \n    &lt;object name=&quot;b2b4_cabinet&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;container_open&quot; /&gt;\n      &lt;inherit name=&quot;container_lockable&quot; /&gt;\n      &lt;alias&gt;cabinet&lt;/alias&gt;\n      &lt;attr name=&quot;feature_usegive&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n      &lt;feature_container /&gt;\n      &lt;isopen type=&quot;boolean&quot;&gt;false&lt;/isopen&gt;\n      &lt;hidechildren type=&quot;boolean&quot;&gt;false&lt;/hidechildren&gt;\n      &lt;open /&gt;\n      &lt;autounlock type=&quot;boolean&quot;&gt;false&lt;/autounlock&gt;\n      &lt;look type=&quot;script&quot;&gt;\n        OutputTextNoBr (&quot;A {object&#58;b2b4_cabinet_keypad} is mounted on the cabinet&#46; &quot;)\n        if (this&#46;locked = True) {\n          msg (&quot;The cabinet is locked&#46;&quot;)\n        }\n        else if (this&#46;isopen = False) {\n          msg (&quot;The cabinet is closed&#46;&quot;)\n        }\n        else {\n          msg (&quot;The cabinet is open&#46;&quot;)\n        }\n      &lt;/look&gt;\n      &lt;displayverbs type=&quot;stringlist&quot;&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n        &lt;value&gt;Close&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;listchildren /&gt;\n      \n      &lt;object name=&quot;mobile_phone&quot;&gt;\n        &lt;inherit name=&quot;editor_object&quot; /&gt;\n        &lt;alias&gt;mobile phone&lt;/alias&gt;\n        &lt;alt type=&quot;stringlist&quot;&gt;\n          &lt;value&gt;phone&lt;/value&gt;\n        &lt;/alt&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n      \n    &lt;/object&gt;\n    \n    \n    &lt;object name=&quot;b2b4_cabinet_keypad&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;alias&gt;keypad&lt;/alias&gt;\n      &lt;feature_usegive /&gt;\n      &lt;look&gt;The keypad can be used to enter a number sequence to unlock the cabinet&#46;&lt;/look&gt;\n      &lt;scenery /&gt;\n      &lt;displayverbs type=&quot;stringlist&quot;&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Use&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;use type=&quot;script&quot;&gt;\n        msg (&quot;What code should you enter?&quot;)\n        get input {\n          if (result=&quot;1234&quot;) {\n            set (b2b4_cabinet, &quot;locked&quot;, false)\n            msg (&quot;You enter the code and turn the handle&#46; With a click the cabinet opens&#46;&quot;)\n            HelperOpenObject (b2b4_cabinet)\n            ListObjectContents (b2b4_cabinet)\n          }\n          else {\n            msg (&quot;Nothing happens&#46;&quot;)\n          }\n        }\n      &lt;/use&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;[/code:2b5bd77m]\n\nThanks!\n~Shiv\n\nP.S. My code works, I'm just not sure it's the best approach.",
      "EditableFormat": "bbcode",
      "HTML": "Hi all!<br/><br/>Quest newbie so please don't judge me too harshly <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) --><br/>I've created a cabinet with a &quot;keypad&quot; for unlocking. I was wondering if anyone could take a look at what I've done and let me know if this is the best way? Ideally I'd like a way to reference to cabinet object linked from the keypad so I don't have to hardcode the object names (I have four cabinets so far and will probably need more - it would be much easier not having to correct references in the code for every one!).<br/><br/>I'm wondering if it might actually be better to create a seperate function to handle the mechanics but I've never done this before in Quest so I'm not really sure how to do that.<br/><br/><pre><code>&lt;object name=&quot;b2b4&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;alias&gt;ward bay&lt;/alias&gt;<br/>    &lt;description type=&quot;script&quot;&gt;<br/>      OutputTextNoBr (&quot;Next to an empty {object&#58;b2b4_bed} stands a small {object&#58;b2b4_cabinet} which you assume is for storing patient belongings and medication&#46; &quot;)<br/>    &lt;/description&gt;<br/>    &lt;usedefaultprefix /&gt;<br/>    <br/>    &lt;object name=&quot;b2b4_cabinet&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;container_open&quot; /&gt;<br/>      &lt;inherit name=&quot;container_lockable&quot; /&gt;<br/>      &lt;alias&gt;cabinet&lt;/alias&gt;<br/>      &lt;attr name=&quot;feature_usegive&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;isopen type=&quot;boolean&quot;&gt;false&lt;/isopen&gt;<br/>      &lt;hidechildren type=&quot;boolean&quot;&gt;false&lt;/hidechildren&gt;<br/>      &lt;open /&gt;<br/>      &lt;autounlock type=&quot;boolean&quot;&gt;false&lt;/autounlock&gt;<br/>      &lt;look type=&quot;script&quot;&gt;<br/>        OutputTextNoBr (&quot;A {object&#58;b2b4_cabinet_keypad} is mounted on the cabinet&#46; &quot;)<br/>        if (this&#46;locked = True) {<br/>          msg (&quot;The cabinet is locked&#46;&quot;)<br/>        }<br/>        else if (this&#46;isopen = False) {<br/>          msg (&quot;The cabinet is closed&#46;&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;The cabinet is open&#46;&quot;)<br/>        }<br/>      &lt;/look&gt;<br/>      &lt;displayverbs type=&quot;stringlist&quot;&gt;<br/>        &lt;value&gt;Look at&lt;/value&gt;<br/>        &lt;value&gt;Open&lt;/value&gt;<br/>        &lt;value&gt;Close&lt;/value&gt;<br/>      &lt;/displayverbs&gt;<br/>      &lt;listchildren /&gt;<br/>      <br/>      &lt;object name=&quot;mobile_phone&quot;&gt;<br/>        &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>        &lt;alias&gt;mobile phone&lt;/alias&gt;<br/>        &lt;alt type=&quot;stringlist&quot;&gt;<br/>          &lt;value&gt;phone&lt;/value&gt;<br/>        &lt;/alt&gt;<br/>        &lt;take /&gt;<br/>      &lt;/object&gt;<br/>      <br/>    &lt;/object&gt;<br/>    <br/>    <br/>    &lt;object name=&quot;b2b4_cabinet_keypad&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;alias&gt;keypad&lt;/alias&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;look&gt;The keypad can be used to enter a number sequence to unlock the cabinet&#46;&lt;/look&gt;<br/>      &lt;scenery /&gt;<br/>      &lt;displayverbs type=&quot;stringlist&quot;&gt;<br/>        &lt;value&gt;Look at&lt;/value&gt;<br/>        &lt;value&gt;Use&lt;/value&gt;<br/>      &lt;/displayverbs&gt;<br/>      &lt;use type=&quot;script&quot;&gt;<br/>        msg (&quot;What code should you enter?&quot;)<br/>        get input {<br/>          if (result=&quot;1234&quot;) {<br/>            set (b2b4_cabinet, &quot;locked&quot;, false)<br/>            msg (&quot;You enter the code and turn the handle&#46; With a click the cabinet opens&#46;&quot;)<br/>            HelperOpenObject (b2b4_cabinet)<br/>            ListObjectContents (b2b4_cabinet)<br/>          }<br/>          else {<br/>            msg (&quot;Nothing happens&#46;&quot;)<br/>          }<br/>        }<br/>      &lt;/use&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;</code></pre><br/><br/>Thanks!<br/>~Shiv<br/><br/>P.S. My code works, I'm just not sure it's the best approach.",
      "PostDate": "2015-06-13T14:17:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "36439",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "if you know some coding already, then definately look into using Functions (able to use Parameters and returning Values), Object Types (Classes), and~or Delegates to reduce code redundancy.\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/\">http://docs.textadventures.co.uk/quest/elements/</a><!-- m --> (the OBJECTS of quest's Object-Oriented Programming, not to be confused with one of those OBJECTS~Elements: the 'Object' Element~OBJECT, within quest. OBJECTS: Elements: Objects, Exits, Functions, Commands, Verbs, Turnscripts, Timers, Object Types, etc)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types/\">http://docs.textadventures.co.uk/quest/types/</a><!-- m --> (Attributes)\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/function.html\">http://docs.textadventures.co.uk/quest/ ... ction.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m --> (Object Types)\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types/using_delegates.html\">http://docs.textadventures.co.uk/quest/ ... gates.html</a><!-- m -->\n\nFunctions and Objects Types are very simple to use (I'm still trying to learn Delegates ~ being a noob to coding), examples:\n\n[code:hh5vz7yg]&lt;function name=&quot;xxx&quot; parameters=&quot;x1x,x2x,xetcx&quot; type=&quot;xxx&quot;&gt;\n  // in the above tag code line, the 'parameters' and 'type' are optional&#46;\n  // scripting~scripts\n&lt;/function&gt;\n\n&lt;type name=&quot;xxx&quot;&gt;\n  // attributes tag lines\n&lt;/type&gt;\n\n&lt;!-- example below --&gt;\n\n&lt;object name=&quot;player&quot;&gt;\n  &lt;inherit name=&quot;character_object_type&quot; /&gt;\n  &lt;alias&gt;knight&lt;/alias&gt;\n  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;75&lt;/attr&gt;\n  &lt;attr name=&quot;current_life_integer_attribute&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;\n  &lt;attr name=&quot;maximum_life_integer_attribute&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;orc&quot;&gt;\n  &lt;inherit name=&quot;character_object_type&quot; /&gt;\n  &lt;inherit name=&quot;non_playable_character_object_type&quot; /&gt;\n  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;&quot;You can't fight that&#46;&quot;&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;type name=&quot;character_object_type&quot;&gt;\n  &lt;attr name=&quot;strength_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;endurance_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;dexterity_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;agility_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;speed_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;current_life_integer_attribute&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;\n  &lt;attr name=&quot;maximum_life_integer_attribute&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;\n  &lt;attr name=&quot;condition_string_attribute&quot; type=&quot;string&quot;&gt;normal&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=&quot;non_playable_character_object_type&quot;&gt;\n  &lt;fight type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;\n    if (not this&#46;condition_string_attribute = &quot;dead&quot; and not player&#46;condition_string_attribute = &quot;dead&quot;) {\n      this&#46;current_life_integer_attribute = this&#46;current_life_integer_attribute - (player&#46;strength_integer_attribute * critical_hit_function (player))\n      if (this&#46;current_life_integer_attribute &lt;= 0) {\n        this&#46;condition_string_attribute = &quot;dead&quot;\n        msg (&quot;You killed the orc&#46;&quot;)\n      } else {\n        player&#46;current_life_integer_attribute = player&#46;current_life_integer_attribute - (this&#46;strength_integer_attribute * critical_hit_function (this))\n        if (player&#46;current_life_integer_attribute &lt;= 0) {\n          player&#46;condition_string_attribute = &quot;dead&quot;\n          msg (player&#46;alias + &quot; has been killed&#46;&quot;)\n        }\n      }\n    } else {\n      msg (&quot;The orc, player, and~or both orc and player, are dead&#46;&quot;)\n    }\n  &#93;&#93;&gt;&lt;/fight&gt;\n&lt;/type&gt;\n\n&lt;function name=&quot;critical_hit_function&quot; type=&quot;int&quot; parameters=&quot;object_parameter&quot;&gt;\n  boolean_variable = RandomChance(character_parameter&#46;luck_integer_attribute))\n  if (boolean_variable) {\n    value = 2\n  } else {\n    value = 1\n  }\n  return (value)\n&lt;/function&gt;[/code:hh5vz7yg]\n\n-------\n\nI'm still a code noob, so others can help with what is the best method to do what you want.",
      "EditableFormat": "bbcode",
      "HTML": "if you know some coding already, then definately look into using Functions (able to use Parameters and returning Values), Object Types (Classes), and~or Delegates to reduce code redundancy.<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/\">http://docs.textadventures.co.uk/quest/guides/</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/\">http://docs.textadventures.co.uk/quest/elements/</a><!-- m --> (the OBJECTS of quest's Object-Oriented Programming, not to be confused with one of those OBJECTS~Elements: the 'Object' Element~OBJECT, within quest. OBJECTS: Elements: Objects, Exits, Functions, Commands, Verbs, Turnscripts, Timers, Object Types, etc)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types/\">http://docs.textadventures.co.uk/quest/types/</a><!-- m --> (Attributes)<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/function.html\">http://docs.textadventures.co.uk/quest/ ... ction.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/elements/type.html\">http://docs.textadventures.co.uk/quest/ ... /type.html</a><!-- m --> (Object Types)<br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/types/using_delegates.html\">http://docs.textadventures.co.uk/quest/ ... gates.html</a><!-- m --><br/><br/>Functions and Objects Types are very simple to use (I'm still trying to learn Delegates ~ being a noob to coding), examples:<br/><br/><pre><code>&lt;function name=&quot;xxx&quot; parameters=&quot;x1x,x2x,xetcx&quot; type=&quot;xxx&quot;&gt;<br/>  // in the above tag code line, the 'parameters' and 'type' are optional&#46;<br/>  // scripting~scripts<br/>&lt;/function&gt;<br/><br/>&lt;type name=&quot;xxx&quot;&gt;<br/>  // attributes tag lines<br/>&lt;/type&gt;<br/><br/>&lt;!-- example below --&gt;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;inherit name=&quot;character_object_type&quot; /&gt;<br/>  &lt;alias&gt;knight&lt;/alias&gt;<br/>  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;75&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life_integer_attribute&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;<br/>  &lt;attr name=&quot;maximum_life_integer_attribute&quot; type=&quot;int&quot;&gt;999&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;orc&quot;&gt;<br/>  &lt;inherit name=&quot;character_object_type&quot; /&gt;<br/>  &lt;inherit name=&quot;non_playable_character_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;verb&gt;<br/>  &lt;property&gt;fight&lt;/property&gt;<br/>  &lt;pattern&gt;fight&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;&quot;You can't fight that&#46;&quot;&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;<br/><br/>&lt;type name=&quot;character_object_type&quot;&gt;<br/>  &lt;attr name=&quot;strength_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;endurance_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;dexterity_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;agility_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;speed_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;luck_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life_integer_attribute&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;<br/>  &lt;attr name=&quot;maximum_life_integer_attribute&quot; type=&quot;int&quot;&gt;500&lt;/attr&gt;<br/>  &lt;attr name=&quot;condition_string_attribute&quot; type=&quot;string&quot;&gt;normal&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;type name=&quot;non_playable_character_object_type&quot;&gt;<br/>  &lt;fight type=&quot;script&quot;&gt;&lt;!&#91;CDATA&#91;<br/>    if (not this&#46;condition_string_attribute = &quot;dead&quot; and not player&#46;condition_string_attribute = &quot;dead&quot;) {<br/>      this&#46;current_life_integer_attribute = this&#46;current_life_integer_attribute - (player&#46;strength_integer_attribute * critical_hit_function (player))<br/>      if (this&#46;current_life_integer_attribute &lt;= 0) {<br/>        this&#46;condition_string_attribute = &quot;dead&quot;<br/>        msg (&quot;You killed the orc&#46;&quot;)<br/>      } else {<br/>        player&#46;current_life_integer_attribute = player&#46;current_life_integer_attribute - (this&#46;strength_integer_attribute * critical_hit_function (this))<br/>        if (player&#46;current_life_integer_attribute &lt;= 0) {<br/>          player&#46;condition_string_attribute = &quot;dead&quot;<br/>          msg (player&#46;alias + &quot; has been killed&#46;&quot;)<br/>        }<br/>      }<br/>    } else {<br/>      msg (&quot;The orc, player, and~or both orc and player, are dead&#46;&quot;)<br/>    }<br/>  &#93;&#93;&gt;&lt;/fight&gt;<br/>&lt;/type&gt;<br/><br/>&lt;function name=&quot;critical_hit_function&quot; type=&quot;int&quot; parameters=&quot;object_parameter&quot;&gt;<br/>  boolean_variable = RandomChance(character_parameter&#46;luck_integer_attribute))<br/>  if (boolean_variable) {<br/>    value = 2<br/>  } else {<br/>    value = 1<br/>  }<br/>  return (value)<br/>&lt;/function&gt;</code></pre><br/><br/>-------<br/><br/>I'm still a code noob, so others can help with what is the best method to do what you want.",
      "PostDate": "2015-06-13T17:16:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "36441",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "What you could do is set an object attribute on the keypad that points to the cabinet it is on, and a string attribute that holds the keycode. Your use script could gen look like this:\n[code:168yj106]CodeKeypad(this)[/code:168yj106]\nAnd this would be the function:\n[code:168yj106]&lt;function name=&quot;CodeKeypad&quot; parameters=&quot;keypad&quot;&gt;\n        msg (&quot;What code should you enter?&quot;)\n        get input {\n          if (result=keypad&#46;code) {\n            set (keypad&#46;cabinet, &quot;locked&quot;, false)\n            msg (&quot;You enter the code and turn the handle&#46; With a click the cabinet opens&#46;&quot;)\n            HelperOpenObject (keypad&#46;cabinet)\n            ListObjectContents (keypad&#46;cabinet)\n          }\n          else {\n            msg (&quot;Nothing happens&#46;&quot;)\n          }\n        }\n&lt;/function&gt;[/code:168yj106]\nHowever, it is probably just as easy to do it the way you already have, just copy-and-paste the code you already have to make three more cabinets (but ensure each object has a unique name; Quest will complain otherwise).",
      "EditableFormat": "bbcode",
      "HTML": "What you could do is set an object attribute on the keypad that points to the cabinet it is on, and a string attribute that holds the keycode. Your use script could gen look like this:<br/><pre><code>CodeKeypad(this)</code></pre><br/>And this would be the function:<br/><pre><code>&lt;function name=&quot;CodeKeypad&quot; parameters=&quot;keypad&quot;&gt;<br/>        msg (&quot;What code should you enter?&quot;)<br/>        get input {<br/>          if (result=keypad&#46;code) {<br/>            set (keypad&#46;cabinet, &quot;locked&quot;, false)<br/>            msg (&quot;You enter the code and turn the handle&#46; With a click the cabinet opens&#46;&quot;)<br/>            HelperOpenObject (keypad&#46;cabinet)<br/>            ListObjectContents (keypad&#46;cabinet)<br/>          }<br/>          else {<br/>            msg (&quot;Nothing happens&#46;&quot;)<br/>          }<br/>        }<br/>&lt;/function&gt;</code></pre><br/>However, it is probably just as easy to do it the way you already have, just copy-and-paste the code you already have to make three more cabinets (but ensure each object has a unique name; Quest will complain otherwise).",
      "PostDate": "2015-06-13T17:57:11+01:00",
      "LastEditDate": null
    }
  ]
}
