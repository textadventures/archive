{
  "Topic": {
    "TopicId": "28im5prajewisp8v8thwvg",
    "ForumId": "10",
    "Title": "Require antother Object: problem to exclude unnecessary items",
    "LastUpdated": "2022-05-13T22:09:29.3288282Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "aedea910-16f0-4fb9-a969-1f8f302d3c68",
      "UserId": 588214,
      "Username": "Kavaz",
      "AvatarUrl": "https://i.imgur.com/dh47sJqb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " 1) created the verb \"interact\"  (new verb)\r\n 2) select \"require another object\" \r\n\r\nNow too many objects appear in the list: static objects  scenario,  inventory objects...\r\nI would like to exclude many items...also a container/menu incorporated on inventory (weapon menù)\r\n\r\nEVERYTHING appears in the numbered list  (when choosing the object)\r\n\r\nSolution:  if player is carrying the object....  ecc \r\nBut it's automatic ... too easy, there's no choice (ex. multiple keys)",
      "EditableFormat": "markdown",
      "HTML": "<ol>\n<li>created the verb \"interact\"  (new verb)</li>\n<li>select \"require another object\"</li>\n</ol>\n<p>Now too many objects appear in the list: static objects  scenario,  inventory objects...<br>\nI would like to exclude many items...also a container/menu incorporated on inventory (weapon menù)</p>\n<p>EVERYTHING appears in the numbered list  (when choosing the object)</p>\n<p>Solution:  if player is carrying the object....  ecc<br>\nBut it's automatic ... too easy, there's no choice (ex. multiple keys)</p>\n\n",
      "PostDate": "2022-05-13T22:09:29.3288282Z",
      "LastEditDate": "2022-05-13T22:12:25.577326Z",
      "link": null
    },
    {
      "PostId": "a16a38ae-5287-4ee7-a7a4-9e2e6288558d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can change how the menu is generated by modifying the verb's script; but this might be a bit of a pain to do. It would probably make more sense to make this a command rather than a verb, which gives you more control.",
      "EditableFormat": "markdown",
      "HTML": "<p>You can change how the menu is generated by modifying the verb's script; but this might be a bit of a pain to do. It would probably make more sense to make this a command rather than a verb, which gives you more control.</p>\n\n",
      "PostDate": "2022-05-14T00:50:25.5438898Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "88124e31-5d4c-4466-9244-31070ede312a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Basically, a 'verb' is just a command with a default script, which is inherited from the type `defaultverb`.\r\n\r\nSo you could make a command whose script is similar to that, and it would act like a verb.\r\nFor example, you could make a command \"interact\" with the regex pattern `^interact (?<object>.+?)(\\s+with\\s+(?<object2>.*))?$` - which allows the player to enter \"interact key\" or \"interact key with door\", which I think is the same as a verb with the \"require another object\" type.\r\n\r\nYou would give it a script something like:\r\n<pre><code>switch (TypeOf (object, \"interact\")) {\r\n  case (\"script\") {\r\n    do (object, \"interact\")\r\n  }\r\n  case (\"string\") {\r\n    msg (object.interact)\r\n  }\r\n  case (\"scriptdictionary\") {\r\n    if (IsDefined (\"object2\")) {\r\n      HandleMultiVerb (object, \"interact\", object2, this.multiobjectdefault)\r\n    }\r\n    else {\r\n      candidates = NewObjectList()\r\n      foreach (candidate, RemoveSceneryObjects(ScopeReachableNotHeld()) {\r\n        if (not (candidate = game.pov or candidate = object)) {\r\n          if (<b style=\"color: hotpink\">some condition here</b>) {\r\n            list add (candidates, candidate)\r\n          }\r\n        }\r\n      }\r\n      if (ListCount (candidates) = 0) {\r\n        msg (\"There's nothing it can interact with here.\")\r\n      }\r\n      else {\r\n        this.object = object\r\n        ShowMenu (\"What do you want to interact it with?\", candidates, true) {\r\n          if (result <> null) {\r\n            HandleMultiVerb (interact.object, \"interact\", GetObject (result), interact.multiobjectdefault)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  default {\r\n    msg (\"You can't interact with that!\")\r\n  }\r\n}</code></pre>\r\n\r\nThat's a cut-down and simplified version of how verbs work; it should work just like a verb, except that you can replace <b style=\"color: hotpink\">some condition here</b> with whatever restrictions you want, to control whether or not each candidate appears in the menu.\r\n\r\nIf you're doing this in the web editor and you want to be able to use the \"Verbs\" tab for the object, you would create \"interact\" as a normal verb, and then in your start script you would put:\r\n<pre><code>interact.script => {\r\n  <b style=\"color:green\">the script above goes here</b>\r\n}</code></pre>\r\nThis basically takes an existing verb (which is recognised as a verb by the editor, so it's easy to add to objects), and then changes its behaviour when the game starts so that it will show fewer objects in the menu.\r\n\r\n<hr/>\r\n\r\nIf you want to restrict the list to just objects that the particular object can interact with, your <b style=\"color: hotpink\">some condition here</b> would be `DictionaryContains (object.interact, candidate.name)`.\r\n\r\nIn this version, the menu only considers visible, reachable, non-scenery objects in the room. If you want to change this, you could change `ScopeReachableNotHeld` to `ScopeReachableInventory`, `ScopeReachable`, or `ScopeVisible`",
      "EditableFormat": "markdown",
      "HTML": "<p>Basically, a 'verb' is just a command with a default script, which is inherited from the type <code>defaultverb</code>.</p>\n<p>So you could make a command whose script is similar to that, and it would act like a verb.<br>\nFor example, you could make a command \"interact\" with the regex pattern <code>^interact (?&lt;object&gt;.+?)(\\s+with\\s+(?&lt;object2&gt;.*))?$</code> - which allows the player to enter \"interact key\" or \"interact key with door\", which I think is the same as a verb with the \"require another object\" type.</p>\n<p>You would give it a script something like:</p>\n<pre><code>switch (TypeOf (object, \"interact\")) {\n  case (\"script\") {\n    do (object, \"interact\")\n  }\n  case (\"string\") {\n    msg (object.interact)\n  }\n  case (\"scriptdictionary\") {\n    if (IsDefined (\"object2\")) {\n      HandleMultiVerb (object, \"interact\", object2, this.multiobjectdefault)\n    }\n    else {\n      candidates = NewObjectList()\n      foreach (candidate, RemoveSceneryObjects(ScopeReachableNotHeld()) {\n        if (not (candidate = game.pov or candidate = object)) {\n          if (<b style=\"color: hotpink\">some condition here</b>) {\n            list add (candidates, candidate)\n          }\n        }\n      }\n      if (ListCount (candidates) = 0) {\n        msg (\"There's nothing it can interact with here.\")\n      }\n      else {\n        this.object = object\n        ShowMenu (\"What do you want to interact it with?\", candidates, true) {\n          if (result &lt;&gt; null) {\n            HandleMultiVerb (interact.object, \"interact\", GetObject (result), interact.multiobjectdefault)\n          }\n        }\n      }\n    }\n  }\n  default {\n    msg (\"You can't interact with that!\")\n  }\n}</code></pre>\n<p>That's a cut-down and simplified version of how verbs work; it should work just like a verb, except that you can replace <b style=\"color: hotpink\">some condition here</b> with whatever restrictions you want, to control whether or not each candidate appears in the menu.</p>\n<p>If you're doing this in the web editor and you want to be able to use the \"Verbs\" tab for the object, you would create \"interact\" as a normal verb, and then in your start script you would put:</p>\n<pre><code>interact.script =&gt; {\n  <b style=\"color: green\">the script above goes here</b>\n}</code></pre>\n<p>This basically takes an existing verb (which is recognised as a verb by the editor, so it's easy to add to objects), and then changes its behaviour when the game starts so that it will show fewer objects in the menu.</p>\n<hr>\n<p>If you want to restrict the list to just objects that the particular object can interact with, your <b style=\"color: hotpink\">some condition here</b> would be <code>DictionaryContains (object.interact, candidate.name)</code>.</p>\n<p>In this version, the menu only considers visible, reachable, non-scenery objects in the room. If you want to change this, you could change <code>ScopeReachableNotHeld</code> to <code>ScopeReachableInventory</code>, <code>ScopeReachable</code>, or <code>ScopeVisible</code></p>\n\n",
      "PostDate": "2022-05-14T16:03:12.0119675Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
