{
  "Topic": {
    "TopicId": "4929",
    "ForumId": "10",
    "Title": "Delegate that returns a range of numbers",
    "LastUpdated": "2014-12-30T22:31:51+00:00",
    "ReplyCount": 8
  },
  "Posts": [
    {
      "PostId": "33239",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "Looking at the example from the wiki ([url:3ph7tpt6]http&#58;//docs&#46;textadventures&#46;co&#46;uk/quest/types/using_delegates&#46;html[/url:3ph7tpt6]), we have a delegate that uses an integer as its parameter, and then two different verbs -- hit and kick -- have different integers they return.  What I want to do is replace the single integer parameter for a range of values parameter, like you'd get with GetRandomInt.  That way instead of &quot;hit&quot; always doing 4 damage and &quot;kick&quot; always doing 7, &quot;hit&quot; could do anywhere from 1-4 and &quot;kick&quot; from 5-8 (just examples, obviously).  Can this be done?  SHOULD this be done (by which I mean, is using delegates the best way to accomplish this at all)?",
      "EditableFormat": "bbcode",
      "HTML": "Looking at the example from the wiki (<a href=\"http&#58;//docs&#46;textadventures&#46;co&#46;uk/quest/types/using_delegates&#46;html\" rel=\"nofollow\">http&#58;//docs&#46;textadventures&#46;co&#46;uk/quest/types/using_delegates&#46;html</a>), we have a delegate that uses an integer as its parameter, and then two different verbs -- hit and kick -- have different integers they return.  What I want to do is replace the single integer parameter for a range of values parameter, like you'd get with GetRandomInt.  That way instead of &quot;hit&quot; always doing 4 damage and &quot;kick&quot; always doing 7, &quot;hit&quot; could do anywhere from 1-4 and &quot;kick&quot; from 5-8 (just examples, obviously).  Can this be done?  SHOULD this be done (by which I mean, is using delegates the best way to accomplish this at all)?",
      "PostDate": "2014-12-30T05:18:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33251",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I still don't really understand delegates (when I first started quest, I think I kinda understood them, but I haven't studied them since then, lol), but a way (at least conceptually) of doing this (ignoring delegates completely, lol):\n\ncreate a list based upon (for example):\n\nx = 50\nx + 5\nx - 5\n\nlist: 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55\n\nthen use 'GetRandomInt' upon that list, for your damage\n\n(I'm not sure if a list can be returned or not, such as with Function's 'return:type' capability, so you may have to do the list outside of the Function, and~or as, aka within, another Function)\n\nEdit: whoa... I'm way overthinking this... laughs...\n\n------------\n\n[b:l09qt2o7][size=150:l09qt2o7]actually.... there's a TOTALLY easier way to do what you want !!!!!![/size:l09qt2o7][/b:l09qt2o7]\n\nDiceRoll (&quot;#d#') ~ ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html\">http://docs.textadventures.co.uk/quest/ ... eroll.html</a><!-- m --> )\n\nfirst~left #: number of dice rolled\nsecond~right #: number of sides on the die~dice\n\nnormal dice: 6 sides (1,2,3,4,5,6): DiceRoll (&quot;1d6&quot;)\n\n1 x (1,2,3,4,5, or 6) = 1, 2, 3, 4, 5, or 6\n\n&quot;2d9&quot; -&gt; 2 x (1,2,3,4,5,6,7,8, or 9) = (eep... too many combinations... lol)\n\n--------\n\n[b:l09qt2o7][size=200:l09qt2o7]Edit: not overthinking this (lol):[/size:l09qt2o7][/b:l09qt2o7]\n\nor... you could just do this too (for example):\n\nbase: x = 50\nmax: A = x + GetRandomInt (0,3)\nmin: B = x - GetRandomInt (0,8)\n\ndamage = GetRandomInt (B,A)",
      "EditableFormat": "bbcode",
      "HTML": "I still don't really understand delegates (when I first started quest, I think I kinda understood them, but I haven't studied them since then, lol), but a way (at least conceptually) of doing this (ignoring delegates completely, lol):<br/><br/>create a list based upon (for example):<br/><br/>x = 50<br/>x + 5<br/>x - 5<br/><br/>list: 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55<br/><br/>then use 'GetRandomInt' upon that list, for your damage<br/><br/>(I'm not sure if a list can be returned or not, such as with Function's 'return:type' capability, so you may have to do the list outside of the Function, and~or as, aka within, another Function)<br/><br/>Edit: whoa... I'm way overthinking this... laughs...<br/><br/>------------<br/><br/><span style=\"font-weight:bold;\"><span style=\"font-size:150\">actually.... there's a TOTALLY easier way to do what you want !!!!!!</span></span><br/><br/>DiceRoll (&quot;#d#') ~ ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html\">http://docs.textadventures.co.uk/quest/ ... eroll.html</a><!-- m --> )<br/><br/>first~left #: number of dice rolled<br/>second~right #: number of sides on the die~dice<br/><br/>normal dice: 6 sides (1,2,3,4,5,6): DiceRoll (&quot;1d6&quot;)<br/><br/>1 x (1,2,3,4,5, or 6) = 1, 2, 3, 4, 5, or 6<br/><br/>&quot;2d9&quot; -&gt; 2 x (1,2,3,4,5,6,7,8, or 9) = (eep... too many combinations... lol)<br/><br/>--------<br/><br/><span style=\"font-weight:bold;\"><span style=\"font-size:200\">Edit: not overthinking this (lol):</span></span><br/><br/>or... you could just do this too (for example):<br/><br/>base: x = 50<br/>max: A = x + GetRandomInt (0,3)<br/>min: B = x - GetRandomInt (0,8)<br/><br/>damage = GetRandomInt (B,A)",
      "PostDate": "2014-12-30T07:54:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33260",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "(jdp)*, I don't completely understand your question, but I'll take a stab at it. What I'm struggling with is whether you're just trying to make sense of the wiki or whether you have an application in mind and want to morph the wiki into that. Either way, I'm not sure of the big picture.\n\nAlso, your topic is about a delegate that *returns* a range of numbers, but your specific question doesn't seem to be about that as such. So... more confusion.\n\nThe direct answer to your question (I believe!) is that you can replace this code:\n\n[code:ov3fv1ir]        &lt;hit type=&quot;script&quot;&gt;\n          rundelegate (this, &quot;attack&quot;, 4)\n        &lt;/hit&gt;\n        &lt;kick type=&quot;script&quot;&gt;\n          rundelegate (this, &quot;attack&quot;, 7)\n        &lt;/kick&gt;[/code:ov3fv1ir]\n\nwith:\n\n[code:ov3fv1ir]        &lt;hit type=&quot;script&quot;&gt;\n          rundelegate (this, &quot;attack&quot;, GetRandomInt(1,4))\n        &lt;/hit&gt;\n        &lt;kick type=&quot;script&quot;&gt;\n          rundelegate (this, &quot;attack&quot;, GetRandomInt(5,8))\n        &lt;/kick&gt;[/code:ov3fv1ir]\nusing the numbers you gave as examples. That's one way to do it. The other is to replace the single input value with min and max values and do the GetRandomInt in the &quot;attack&quot; handler - but then every attack handler needs to do it. It all depends on your design and what you're trying to do.\n\n[quote:ov3fv1ir]SHOULD this be done (by which I mean, is using delegates the best way to accomplish this at all)?[/quote:ov3fv1ir]\nThis is where I got a bit confused. &quot;Should&quot; is up to you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> It's straightforward to incrementally modify the existing code in the way you described (so the &quot;can&quot; answer is &quot;yes&quot;.) Whether you want to or not... \n\nWhether delegates is the right solution is a different question. For the example shown, delegates were a good solution. Delegates are really just more capable scripts. Delegates are what (I think) the original scripts probably should have been, in that they can easily take parameters and return values. Generic scipts in Quest can't return values and you have to set up a dictionary to pass parameters in. The latter is doable (but more work) and the former is a deal breaker. So just look at delegates as being scripts with more natural inputs and outputs. Unfortunately, you can't work with them in the GUI...\n\nYou would use delegates in the same way you'd use script attributes on objects - either as a way to attach functionality to an object or as a way to have different objects have different behaviors. (In the example, the &quot;attack&quot; script could have different behaviors for different classes of enemies.) I'd say that if you need delegates, you'll know (or you'll have a problem where the suggested solution involves them).\n\nI have used delegates a few times, but it's not common. Just where I want to be able to dispatch to different behaviors through a single attribute. Hope that helps!",
      "EditableFormat": "bbcode",
      "HTML": "(jdp)*, I don't completely understand your question, but I'll take a stab at it. What I'm struggling with is whether you're just trying to make sense of the wiki or whether you have an application in mind and want to morph the wiki into that. Either way, I'm not sure of the big picture.<br/><br/>Also, your topic is about a delegate that *returns* a range of numbers, but your specific question doesn't seem to be about that as such. So... more confusion.<br/><br/>The direct answer to your question (I believe!) is that you can replace this code:<br/><br/><pre><code>        &lt;hit type=&quot;script&quot;&gt;<br/>          rundelegate (this, &quot;attack&quot;, 4)<br/>        &lt;/hit&gt;<br/>        &lt;kick type=&quot;script&quot;&gt;<br/>          rundelegate (this, &quot;attack&quot;, 7)<br/>        &lt;/kick&gt;</code></pre><br/><br/>with:<br/><br/><pre><code>        &lt;hit type=&quot;script&quot;&gt;<br/>          rundelegate (this, &quot;attack&quot;, GetRandomInt(1,4))<br/>        &lt;/hit&gt;<br/>        &lt;kick type=&quot;script&quot;&gt;<br/>          rundelegate (this, &quot;attack&quot;, GetRandomInt(5,8))<br/>        &lt;/kick&gt;</code></pre><br/>using the numbers you gave as examples. That's one way to do it. The other is to replace the single input value with min and max values and do the GetRandomInt in the &quot;attack&quot; handler - but then every attack handler needs to do it. It all depends on your design and what you're trying to do.<br/><br/><blockquote><p>SHOULD this be done (by which I mean, is using delegates the best way to accomplish this at all)?</p></blockquote><br/>This is where I got a bit confused. &quot;Should&quot; is up to you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> It's straightforward to incrementally modify the existing code in the way you described (so the &quot;can&quot; answer is &quot;yes&quot;.) Whether you want to or not... <br/><br/>Whether delegates is the right solution is a different question. For the example shown, delegates were a good solution. Delegates are really just more capable scripts. Delegates are what (I think) the original scripts probably should have been, in that they can easily take parameters and return values. Generic scipts in Quest can't return values and you have to set up a dictionary to pass parameters in. The latter is doable (but more work) and the former is a deal breaker. So just look at delegates as being scripts with more natural inputs and outputs. Unfortunately, you can't work with them in the GUI...<br/><br/>You would use delegates in the same way you'd use script attributes on objects - either as a way to attach functionality to an object or as a way to have different objects have different behaviors. (In the example, the &quot;attack&quot; script could have different behaviors for different classes of enemies.) I'd say that if you need delegates, you'll know (or you'll have a problem where the suggested solution involves them).<br/><br/>I have used delegates a few times, but it's not common. Just where I want to be able to dispatch to different behaviors through a single attribute. Hope that helps!",
      "PostDate": "2014-12-30T10:49:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33283",
      "UserId": 0,
      "Username": "jdpjdpjdp",
      "UserAvatar": null,
      "UserGravatar": "540c24bb58e5434b39c7bd72916f5510",
      "EditableText": "@HK- Some very interesting ideas, especially the dice roll, which I didn't know was implemented but can see lots of possible uses for.  Lots to think about.  Thank you.\n\n@jaynabonne- My apologies for the lack of clarity.  Looking back, it's a badly written post.  Mea culpa.  Regardless, you did manage to answer my question, so thank you.\n\n[quote=&quot;jaynabonne&quot;:22yhs31f]What I'm struggling with is whether you're just trying to make sense of the wiki or whether you have an application in mind and want to morph the wiki into that.[/quote:22yhs31f]\n\nBoth, really.  I always want a better understanding, but yes, I do have an application in mind that's pretty much in line with the example from the wiki -- namely, different verbs (hit vs. kick in the example) kicking out different numbers, but across a range rather than a single, fixed integer.  And your solution seems to accomplish that quite elegantly.\n\n[quote:22yhs31f]Also, your topic is about a delegate that *returns* a range of numbers, but your specific question doesn't seem to be about that as such.[/quote:22yhs31f]\n\nOne of many ways my lack of programming knowledge works against me: I don't always use the correct terminology.  Clearly I've misused the word &quot;returns&quot; in this context.  For my continuing education, what does &quot;returns&quot; mean in this context, as opposed to how I (mis)used it?\n\n[quote:22yhs31f]&quot;Should&quot; is up to you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> It's straightforward to incrementally modify the existing code in the way you described (so the &quot;can&quot; answer is &quot;yes&quot;.) Whether you want to or not... [/quote:22yhs31f]\n\nAgain, me being unclear: I was just trying to ask if delegates were a good solution to the issue presented, and if not, what might be a better one.\n\nThe rest of your post does a pretty good job explaining the virtues of delegates, which adds to my understanding of them.  You seem to favor them over generic scripts, which has me curious about what else they might be able to do (he said, hoping the wise programmer would share more of his knowledge  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ).\n\nThank you yet again!  You're a good teacher, Jay!",
      "EditableFormat": "bbcode",
      "HTML": "@HK- Some very interesting ideas, especially the dice roll, which I didn't know was implemented but can see lots of possible uses for.  Lots to think about.  Thank you.<br/><br/>@jaynabonne- My apologies for the lack of clarity.  Looking back, it's a badly written post.  Mea culpa.  Regardless, you did manage to answer my question, so thank you.<br/><br/><blockquote><cite>jaynabonne wrote:</cite>What I'm struggling with is whether you're just trying to make sense of the wiki or whether you have an application in mind and want to morph the wiki into that.</blockquote><br/><br/>Both, really.  I always want a better understanding, but yes, I do have an application in mind that's pretty much in line with the example from the wiki -- namely, different verbs (hit vs. kick in the example) kicking out different numbers, but across a range rather than a single, fixed integer.  And your solution seems to accomplish that quite elegantly.<br/><br/><blockquote><p>Also, your topic is about a delegate that *returns* a range of numbers, but your specific question doesn't seem to be about that as such.</p></blockquote><br/><br/>One of many ways my lack of programming knowledge works against me: I don't always use the correct terminology.  Clearly I've misused the word &quot;returns&quot; in this context.  For my continuing education, what does &quot;returns&quot; mean in this context, as opposed to how I (mis)used it?<br/><br/><blockquote><p>&quot;Should&quot; is up to you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> It's straightforward to incrementally modify the existing code in the way you described (so the &quot;can&quot; answer is &quot;yes&quot;.) Whether you want to or not... </p></blockquote><br/><br/>Again, me being unclear: I was just trying to ask if delegates were a good solution to the issue presented, and if not, what might be a better one.<br/><br/>The rest of your post does a pretty good job explaining the virtues of delegates, which adds to my understanding of them.  You seem to favor them over generic scripts, which has me curious about what else they might be able to do (he said, hoping the wise programmer would share more of his knowledge  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ).<br/><br/>Thank you yet again!  You're a good teacher, Jay!",
      "PostDate": "2014-12-30T18:51:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33286",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "I have no idea what situation these would be used for..?",
      "EditableFormat": "bbcode",
      "HTML": "I have no idea what situation these would be used for..?",
      "PostDate": "2014-12-30T19:02:12+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33291",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I would say delegates are more advanced. Most of the users of Quest provide script implementations for already defined interfaces in the Quest core - for example, you implement a script to handle &quot;take&quot; or &quot;drop&quot; or an object's description or a room's &quot;on enter&quot;, etc. But the Quest core only has one user-facing delegate that I can see (one for &quot;addscript&quot; when putting an object). The point: there aren't really any normal use cases for *implementing* a delegate to satisfy something in the core.\n\nSo that leaves the use cases where you are defining *your own* interfaces, which is definitely not common, unless you're writing libraries or doing something more advanced. By that, I mean cases where you would define a script attribute for your own use.\n\nWhen would you want to define a script or delegate attribute of your own? You typically want to do that in the case of &quot;dynamic dispatch&quot;, which is just a fancy name for letting objects define their own behaviors. If you always want to call the same code, you use a function. If you want the code called to change depending on the object, then you define a script attribute, have your code invoke that script attribute, and then let each object decide how to implement it. It provides a level of indirection. \n\nA good example is a combat library, where attack and defense behaviors will likely change for each kind of monster you'll be battling. Your monster might have a &quot;doattack&quot; script that is invoked by the combat engine when it's the monster's turn to fight. An orc might bludgeon. An asp might try to bite and poision you. A spider might swing at you with its spear-like legs. A wizard might cast a spell. Rather than try to encapsulate all in one script (&quot;if type is elf, do this; if type is spider, do that;&quot; etc, which would cause most programmers to want to upchuck), you say &quot;each object will have a doattack script attribute that I will call.&quot; It encapsulates the behavior in the object itself.\n\nSo then, when would you use delegates over scripts?\n\nThere are two advantages to delegates over scripts:\n1) You can return a value to the caller.\n2) Passing arguments is easier. With scripts, you have to create a dictionary, shove all the parameters in, and then hand that off to &quot;do&quot; or &quot;invoke&quot;. With delegates, you just call rundelegate or RunDelegateFunction and pass the arguments as you normally would to a function. If you need to call a script with parameters in multiple places, it can be easier to use a delegate.\n\nThe disadvantages to using delegates:\n1) You need to define a function signature (delegate type) for the delegate, listing any parameters and the return type. Of course, once you define it, then it's a snap to use it (just set the type to the delegate type instead of &quot;script&quot;).\n2) You can't use delegates through the Quest GUI.\n\nI've used delegates typically for the first case, returning a value. As an example, I had a &quot;verb&quot; type, with a &quot;conjugate&quot; delegate that took the tense, person, etc and returned the appropriate conjugated verb. I was able to then invoke that &quot;conjugate&quot; delegate on any verb object I had. I had a separate Verb object for &quot;attack&quot;, &quot;beat&quot;, &quot;charge&quot;, &quot;claw&quot;, etc - this was used in some dungeon combat code - and the same verb could be used for either you or a monster. A template might be &quot;{attacker} {Verb:attack} {target}&quot;, and it had to work out the correct conjugation for &quot;attack&quot; depending on what &quot;attacker&quot; was. If it was for you, it might be &quot;You attack the spider&quot;, whereas if it was a monster, you might get &quot;The spider attacks you.&quot; The verb has to morph in those cases, from &quot;attack&quot; to &quot;attacks&quot;. It was simple using a delegate to allow &quot;dynamic dispatch&quot;, to allow varying behavior, but still return a value.",
      "EditableFormat": "bbcode",
      "HTML": "I would say delegates are more advanced. Most of the users of Quest provide script implementations for already defined interfaces in the Quest core - for example, you implement a script to handle &quot;take&quot; or &quot;drop&quot; or an object's description or a room's &quot;on enter&quot;, etc. But the Quest core only has one user-facing delegate that I can see (one for &quot;addscript&quot; when putting an object). The point: there aren't really any normal use cases for *implementing* a delegate to satisfy something in the core.<br/><br/>So that leaves the use cases where you are defining *your own* interfaces, which is definitely not common, unless you're writing libraries or doing something more advanced. By that, I mean cases where you would define a script attribute for your own use.<br/><br/>When would you want to define a script or delegate attribute of your own? You typically want to do that in the case of &quot;dynamic dispatch&quot;, which is just a fancy name for letting objects define their own behaviors. If you always want to call the same code, you use a function. If you want the code called to change depending on the object, then you define a script attribute, have your code invoke that script attribute, and then let each object decide how to implement it. It provides a level of indirection. <br/><br/>A good example is a combat library, where attack and defense behaviors will likely change for each kind of monster you'll be battling. Your monster might have a &quot;doattack&quot; script that is invoked by the combat engine when it's the monster's turn to fight. An orc might bludgeon. An asp might try to bite and poision you. A spider might swing at you with its spear-like legs. A wizard might cast a spell. Rather than try to encapsulate all in one script (&quot;if type is elf, do this; if type is spider, do that;&quot; etc, which would cause most programmers to want to upchuck), you say &quot;each object will have a doattack script attribute that I will call.&quot; It encapsulates the behavior in the object itself.<br/><br/>So then, when would you use delegates over scripts?<br/><br/>There are two advantages to delegates over scripts:<br/>1) You can return a value to the caller.<br/>2) Passing arguments is easier. With scripts, you have to create a dictionary, shove all the parameters in, and then hand that off to &quot;do&quot; or &quot;invoke&quot;. With delegates, you just call rundelegate or RunDelegateFunction and pass the arguments as you normally would to a function. If you need to call a script with parameters in multiple places, it can be easier to use a delegate.<br/><br/>The disadvantages to using delegates:<br/>1) You need to define a function signature (delegate type) for the delegate, listing any parameters and the return type. Of course, once you define it, then it's a snap to use it (just set the type to the delegate type instead of &quot;script&quot;).<br/>2) You can't use delegates through the Quest GUI.<br/><br/>I've used delegates typically for the first case, returning a value. As an example, I had a &quot;verb&quot; type, with a &quot;conjugate&quot; delegate that took the tense, person, etc and returned the appropriate conjugated verb. I was able to then invoke that &quot;conjugate&quot; delegate on any verb object I had. I had a separate Verb object for &quot;attack&quot;, &quot;beat&quot;, &quot;charge&quot;, &quot;claw&quot;, etc - this was used in some dungeon combat code - and the same verb could be used for either you or a monster. A template might be &quot;{attacker} {Verb:attack} {target}&quot;, and it had to work out the correct conjugation for &quot;attack&quot; depending on what &quot;attacker&quot; was. If it was for you, it might be &quot;You attack the spider&quot;, whereas if it was a monster, you might get &quot;The spider attacks you.&quot; The verb has to morph in those cases, from &quot;attack&quot; to &quot;attacks&quot;. It was simple using a delegate to allow &quot;dynamic dispatch&quot;, to allow varying behavior, but still return a value.",
      "PostDate": "2014-12-30T20:17:32+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33294",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Thanks Jay, that was a super useful post!\n(AND THANKS Silver, for invoking Jay's post, lol, thanks for asking the question, hehe)\n\n[quote=&quot;Jay&quot;:2g6pembo]Rather than try to encapsulate all in one script (&quot;if type is elf, do this; if type is spider, do that;&quot; etc, which would cause most programmers to want to upchuck), you say &quot;each object will have a doattack script attribute that I will call.&quot; It encapsulates the behavior in the object itself.[/quote:2g6pembo]\n\nthat would be me... now I just need to learn delegates... lol... <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\n--------\n\nP.S.\n\nalso, your dynamic dialogue~conversation library with the 'callers, and etc' was fascinating... such a higher level of design... I'm having trouble making the transition from the basics that I know, to more advanced level of code designing. So, I really appreciate that library, it'll definately be something I'll study intensely, at some point (I really need to get a new computer, sighs).",
      "EditableFormat": "bbcode",
      "HTML": "Thanks Jay, that was a super useful post!<br/>(AND THANKS Silver, for invoking Jay's post, lol, thanks for asking the question, hehe)<br/><br/><blockquote><cite>Jay wrote:</cite>Rather than try to encapsulate all in one script (&quot;if type is elf, do this; if type is spider, do that;&quot; etc, which would cause most programmers to want to upchuck), you say &quot;each object will have a doattack script attribute that I will call.&quot; It encapsulates the behavior in the object itself.</blockquote><br/><br/>that would be me... now I just need to learn delegates... lol... <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>--------<br/><br/>P.S.<br/><br/>also, your dynamic dialogue~conversation library with the 'callers, and etc' was fascinating... such a higher level of design... I'm having trouble making the transition from the basics that I know, to more advanced level of code designing. So, I really appreciate that library, it'll definately be something I'll study intensely, at some point (I really need to get a new computer, sighs).",
      "PostDate": "2014-12-30T20:47:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33304",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "So waaay beyond my level, then. But something to aim for understanding some day.",
      "EditableFormat": "bbcode",
      "HTML": "So waaay beyond my level, then. But something to aim for understanding some day.",
      "PostDate": "2014-12-30T21:32:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "33318",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If it helps, in all my time coding Quest, I can count on one hand (with room to spare) the number of times I've used delegates. But, as always, when you need 'em, nothing else will do. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "If it helps, in all my time coding Quest, I can count on one hand (with room to spare) the number of times I've used delegates. But, as always, when you need 'em, nothing else will do. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-12-30T22:31:51+00:00",
      "LastEditDate": null
    }
  ]
}
