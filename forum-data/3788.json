{
  "Topic": {
    "TopicId": "3788",
    "ForumId": "10",
    "Title": "Using delegates",
    "LastUpdated": "2013-07-11T09:53:47+01:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "25386",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "How do you use delegates? I had a go, assuming they work kind of like a hybrid between a script and a function, as in the code below, but Quest complains:\n\n[i:3evsxd8q]Error running script&#058; Error evaluating expression '&quot;The &quot; + this.name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;) + &quot;% of its hits.&quot;': Object 'goblin' has no delegate implementation 'getpc'\n[/i:3evsxd8q]\n\nI am not getting what is wrong here.\n\n[code:3evsxd8q]&lt;!--Saved by Quest 5&#46;4&#46;4873&#46;16527--&gt;\n&lt;asl version=&quot;540&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;test&quot;&gt;\n    &lt;gameid&gt;cb4455e4-6e7c-45da-bf39-f2126e817fb1&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;goblin&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;fullhits type=&quot;int&quot;&gt;10&lt;/fullhits&gt;\n      &lt;hitslost type=&quot;int&quot;&gt;0&lt;/hitslost&gt;\n      &lt;delegate name=&quot;getpc&quot; type=&quot;int&quot;&gt;\n        return (100 * (this&#46;fullhits - this&#46;hitslost) / this&#46;fullhits)\n      &lt;/delegate&gt;\n      &lt;hit type=&quot;script&quot;&gt;\n        msg (HasDelegateImplementation (this, &quot;getpc&quot;))\n        msg (&quot;You hit the &quot; + this&#46;name + &quot; and it loses 7 hits!&quot;)\n        this&#46;hitslost = this&#46;hitslost + 7\n        msg (&quot;The &quot; + this&#46;name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;) + &quot;% of its hits&#46;&quot;)\n      &lt;/hit&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:3evsxd8q]",
      "EditableFormat": "bbcode",
      "HTML": "How do you use delegates? I had a go, assuming they work kind of like a hybrid between a script and a function, as in the code below, but Quest complains:<br/><br/><span style=\"font-style:italic;\">Error running script&#058; Error evaluating expression '&quot;The &quot; + this.name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;) + &quot;% of its hits.&quot;': Object 'goblin' has no delegate implementation 'getpc'<br/></span><br/><br/>I am not getting what is wrong here.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;4&#46;4873&#46;16527--&gt;<br/>&lt;asl version=&quot;540&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;test&quot;&gt;<br/>    &lt;gameid&gt;cb4455e4-6e7c-45da-bf39-f2126e817fb1&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2013&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;goblin&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;fullhits type=&quot;int&quot;&gt;10&lt;/fullhits&gt;<br/>      &lt;hitslost type=&quot;int&quot;&gt;0&lt;/hitslost&gt;<br/>      &lt;delegate name=&quot;getpc&quot; type=&quot;int&quot;&gt;<br/>        return (100 * (this&#46;fullhits - this&#46;hitslost) / this&#46;fullhits)<br/>      &lt;/delegate&gt;<br/>      &lt;hit type=&quot;script&quot;&gt;<br/>        msg (HasDelegateImplementation (this, &quot;getpc&quot;))<br/>        msg (&quot;You hit the &quot; + this&#46;name + &quot; and it loses 7 hits!&quot;)<br/>        this&#46;hitslost = this&#46;hitslost + 7<br/>        msg (&quot;The &quot; + this&#46;name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;) + &quot;% of its hits&#46;&quot;)<br/>      &lt;/hit&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2013-07-10T08:18:12+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25390",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "You use the &quot;delegate&quot; element to define the delegate function template:\n\n[code:14oj5nx1] &lt;delegate name=&quot;GetPC_Delegate&quot; parameters=&quot;scale&quot; type=&quot;int&quot;/&gt;[/code:14oj5nx1]\n\n(I added a &quot;scale&quot; parameter just to show how parameters are used.)\n\nThen in your object, add an attribute of that type:\n\n[code:14oj5nx1]&lt;getpc type=&quot;GetPC_Delegate&quot;&gt;\n   return (scale* (this&#46;fullhits - this&#46;hitslost) / this&#46;fullhits)\n&lt;/getpc&gt;[/code:14oj5nx1]\n\nFinally, to invoke it, use either rundelegate (if no return value needed) or RunDelegateFunction (if a return value is needed). Parameters come after the attribute name:\n\n[code:14oj5nx1]msg (&quot;The &quot; + this&#46;name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;, 100) + &quot;% of its hits&#46;&quot;)[/code:14oj5nx1]\n\nHope that helps!",
      "EditableFormat": "bbcode",
      "HTML": "You use the &quot;delegate&quot; element to define the delegate function template:<br/><br/><pre><code> &lt;delegate name=&quot;GetPC_Delegate&quot; parameters=&quot;scale&quot; type=&quot;int&quot;/&gt;</code></pre><br/><br/>(I added a &quot;scale&quot; parameter just to show how parameters are used.)<br/><br/>Then in your object, add an attribute of that type:<br/><br/><pre><code>&lt;getpc type=&quot;GetPC_Delegate&quot;&gt;<br/>   return (scale* (this&#46;fullhits - this&#46;hitslost) / this&#46;fullhits)<br/>&lt;/getpc&gt;</code></pre><br/><br/>Finally, to invoke it, use either rundelegate (if no return value needed) or RunDelegateFunction (if a return value is needed). Parameters come after the attribute name:<br/><br/><pre><code>msg (&quot;The &quot; + this&#46;name + &quot; has &quot; + RunDelegateFunction (this, &quot;getpc&quot;, 100) + &quot;% of its hits&#46;&quot;)</code></pre><br/><br/>Hope that helps!",
      "PostDate": "2013-07-10T09:54:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25392",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Thanks, I was not about to guess that. So in fact a delegate is just defining a signature that you can then use for an object's method (in OO speak), and there is (effectively) one built-in delegate already:\n\n  &lt;delegate name=&quot;script&quot; /&gt;\n\nAnd you can set up your own signatures:\n\n  &lt;delegate name=&quot;script_returns_int&quot; type=&quot;int&quot; /&gt;\n  &lt;delegate name=&quot;script_returns_int_with_3_params&quot; type=&quot;int&quot; parameters=&quot;a, b, c&quot; /&gt;\n  &lt;delegate name=&quot;script_returns_object&quot; type=&quot;object&quot; /&gt;",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, I was not about to guess that. So in fact a delegate is just defining a signature that you can then use for an object's method (in OO speak), and there is (effectively) one built-in delegate already:<br/><br/>  &lt;delegate name=&quot;script&quot; /&gt;<br/><br/>And you can set up your own signatures:<br/><br/>  &lt;delegate name=&quot;script_returns_int&quot; type=&quot;int&quot; /&gt;<br/>  &lt;delegate name=&quot;script_returns_int_with_3_params&quot; type=&quot;int&quot; parameters=&quot;a, b, c&quot; /&gt;<br/>  &lt;delegate name=&quot;script_returns_object&quot; type=&quot;object&quot; /&gt;",
      "PostDate": "2013-07-10T10:58:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25393",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Actually, scripts and delegates are different things. For example, scripts have a different parameter passing scheme. More importantly, you can't run a script with &quot;rundelegate&quot; (I just tried).\n\nBut, yes, you are creating your own signatures. It's a bit like an indirect (attribute-based) function call.",
      "EditableFormat": "bbcode",
      "HTML": "Actually, scripts and delegates are different things. For example, scripts have a different parameter passing scheme. More importantly, you can't run a script with &quot;rundelegate&quot; (I just tried).<br/><br/>But, yes, you are creating your own signatures. It's a bit like an indirect (attribute-based) function call.",
      "PostDate": "2013-07-10T12:12:45+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25394",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Thanks. I have updated the Wiki with my new knowledge; you might like to check it over.\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Delegates\">http://quest5.net/wiki/Using_Delegates</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "Thanks. I have updated the Wiki with my new knowledge; you might like to check it over.<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Delegates\">http://quest5.net/wiki/Using_Delegates</a><!-- m -->",
      "PostDate": "2013-07-10T14:38:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25398",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "That looks good. You made an interesting choice for your delegate naming strategy, basing the names on the signature as opposed to the delegate semantics (in other words, what it means for the object). I had gone that way in my own code originally and soon got tired of generic parameters. It *does* probably allow fewer delegate definitions in the long run if many delegates are used! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (I might reconsider that choice in my own code.)\n\nYou could probably come up with a nice concise convention, like &quot;Delegate_N_type&quot;, where &quot;N&quot; is the number of arguments and &quot;type&quot; is the return type (if there is one). So a delegate taking two params and returning a string could be &quot;Delegate_2_string&quot;. Something like that... That's basically what you did in a more verbose way.\n\nEdit: one downside to using the signature (param/type) naming is if you later need to (say) add a parameter to an existing delegate that you're using. Let's say you have a delegate in use across many objects (e.g. every room in your game) and you decide you need to add a parameter for a special case that has come up. If you have named your delegate based on functional use, where you have a unique name for that *behavior*, then you can simply go to the delegate definition for that usage, add the new parameter, and you're done. If you have based the delegate name on the number of parameters used, then you must go to each object and change each type usage individually.",
      "EditableFormat": "bbcode",
      "HTML": "That looks good. You made an interesting choice for your delegate naming strategy, basing the names on the signature as opposed to the delegate semantics (in other words, what it means for the object). I had gone that way in my own code originally and soon got tired of generic parameters. It *does* probably allow fewer delegate definitions in the long run if many delegates are used! <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (I might reconsider that choice in my own code.)<br/><br/>You could probably come up with a nice concise convention, like &quot;Delegate_N_type&quot;, where &quot;N&quot; is the number of arguments and &quot;type&quot; is the return type (if there is one). So a delegate taking two params and returning a string could be &quot;Delegate_2_string&quot;. Something like that... That's basically what you did in a more verbose way.<br/><br/>Edit: one downside to using the signature (param/type) naming is if you later need to (say) add a parameter to an existing delegate that you're using. Let's say you have a delegate in use across many objects (e.g. every room in your game) and you decide you need to add a parameter for a special case that has come up. If you have named your delegate based on functional use, where you have a unique name for that *behavior*, then you can simply go to the delegate definition for that usage, add the new parameter, and you're done. If you have based the delegate name on the number of parameters used, then you must go to each object and change each type usage individually.",
      "PostDate": "2013-07-11T09:53:47+01:00",
      "LastEditDate": null
    }
  ]
}
