{
  "Topic": {
    "TopicId": "9ldnrdl-muuko_syh1fegw",
    "ForumId": "10",
    "Title": "ShowMenu - Actually entering the text?",
    "LastUpdated": "2018-02-25T01:43:18.3138Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "512f427a-b4bd-407b-b612-f28031148cc1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to do this?\r\n\r\nFor instance:\r\n\r\nPlease choose one of the following:\r\n1\\. [rock](#)\r\n2\\. [rap](#)\r\n3\\. [disco](#)\r\n\r\n\r\nI want to allow the player to be able to enter:\r\n\r\n**\\> rock**",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to do this?</p>\n<p>For instance:</p>\n<p>Please choose one of the following:<br>\n1. <a href=\"#\">rock</a><br>\n2. <a href=\"#\">rap</a><br>\n3. <a href=\"#\">disco</a></p>\n<p>I want to allow the player to be able to enter:</p>\n<p><strong>&gt; rock</strong></p>\n\n",
      "PostDate": "2018-02-25T01:43:18.3138Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "902043a0-8c16-427f-8500-c2cdae53f265",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I know when you say something like take rock and there are two rocks, Quest will ask 'Please choose which rock you mean' and show a numbered menu. You can enter 1 or 2 or click on the rock you want. I'm assuming this is the same situation you are describing. \r\n\r\nMaybe a look at that script will give you a clue. Then again one of the Quest prodigies will answer soon enough.\r\nSeems a Get Input would be  needed after the menu is shown, but you know this already and I;m home for lunch and just wanted to feel like I did something helpful and constructive. Nyuck Nyuck",
      "EditableFormat": "markdown",
      "HTML": "<p>I know when you say something like take rock and there are two rocks, Quest will ask 'Please choose which rock you mean' and show a numbered menu. You can enter 1 or 2 or click on the rock you want. I'm assuming this is the same situation you are describing.</p>\n<p>Maybe a look at that script will give you a clue. Then again one of the Quest prodigies will answer soon enough.<br>\nSeems a Get Input would be  needed after the menu is shown, but you know this already and I;m home for lunch and just wanted to feel like I did something helpful and constructive. Nyuck Nyuck</p>\n\n",
      "PostDate": "2018-02-25T07:33:20.4086608Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5ed2a780-28b7-4f25-b8c2-08810662a046",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a first attempt off the top of my head. Three functions to override; not tested yet…\r\n```\r\n  <function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\">\r\n    <![CDATA[\r\n    outputsection = StartNewOutputSection()\r\n    msg (caption)\r\n    count = 0\r\n    game.menuoptionskeys = NewStringList()\r\n    game.menudisplayedoptions = NewStringDictionary()\r\n    foreach (option, options) {\r\n      count = count + 1\r\n      if (TypeOf(options) = \"stringdictionary\") {\r\n        optionText = StringDictionaryItem(options, option)\r\n        optiontag = option\r\n        style = GetCurrentLinkTextFormat()\r\n        list add (game.menuoptionskeys, option)\r\n      }\r\n      else if (TypeOf(option) = \"string\") {\r\n        optionText = option\r\n        optiontag = option\r\n        style = GetCurrentLinkTextFormat()\r\n        list add (game.menuoptionskeys, option)\r\n      }\r\n      else if (TypeOf(option) = \"object\") {\r\n        optionText = GetDisplayAlias(option)\r\n        optiontag = option.name\r\n        colour = \"\"\r\n        if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = option.linkcolour\r\n        }\r\n        else {\r\n          colour = GetLinkTextColour()\r\n        }\r\n        style = GetCurrentTextFormat(colour)\r\n        list add (game.menuoptionskeys, option.name)\r\n      }\r\n      else {\r\n        error (\"ShowMenu cannot handle a \" + TypeOf(option))\r\n      }\r\n      dictionary add (game.menudisplayedoptions, optiontag, optionText)\r\n      msg (count + \": <a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optiontag) + \"')\\\">\" + optionText + \"</a>\")\r\n    }\r\n    EndOutputSection (outputsection)\r\n    game.menuoptions = options\r\n    game.menuallowcancel = allowCancel\r\n    game.menucallback = callback\r\n    game.menuoutputsection = outputsection\r\n  ]]>\r\n  </function>\r\n\r\n  <function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\">\r\n    <![CDATA[\r\n    handled = false\r\n    if (IsInt(input)) {\r\n      number = ToInt(input)\r\n      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {\r\n        handled = true\r\n        ShowMenuResponse(StringListItem(game.menuoptionskeys, number - 1))\r\n      }\r\n    }\r\n    else if(HasAttribute(game, \"menudisplayedoptions\")) {\r\n      foreach (option, game.menudisplayedoptions) {\r\n        if (LCase(Trim(DictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {\r\n          ShowMenuResponse(option)\r\n          return (true)\r\n        }\r\n      }\r\n    }\r\n    return (handled)\r\n    ]]>\r\n  </function>\r\n\r\n  <function name=\"ClearMenu\">\r\n    HideOutputSection(game.menuoutputsection)\r\n    game.menuoutputsection = null\r\n    game.menuoptions = null\r\n    game.menudisplayedoptions = null\r\n    game.menucallback = null\r\n  </function>\r\n```\r\n(note that if two items have identical names, this will match the first one)",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a first attempt off the top of my head. Three functions to override; not tested yet…</p>\n<pre><code>  &lt;function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\"&gt;\n    &lt;![CDATA[\n    outputsection = StartNewOutputSection()\n    msg (caption)\n    count = 0\n    game.menuoptionskeys = NewStringList()\n    game.menudisplayedoptions = NewStringDictionary()\n    foreach (option, options) {\n      count = count + 1\n      if (TypeOf(options) = \"stringdictionary\") {\n        optionText = StringDictionaryItem(options, option)\n        optiontag = option\n        style = GetCurrentLinkTextFormat()\n        list add (game.menuoptionskeys, option)\n      }\n      else if (TypeOf(option) = \"string\") {\n        optionText = option\n        optiontag = option\n        style = GetCurrentLinkTextFormat()\n        list add (game.menuoptionskeys, option)\n      }\n      else if (TypeOf(option) = \"object\") {\n        optionText = GetDisplayAlias(option)\n        optiontag = option.name\n        colour = \"\"\n        if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n          colour = option.linkcolour\n        }\n        else {\n          colour = GetLinkTextColour()\n        }\n        style = GetCurrentTextFormat(colour)\n        list add (game.menuoptionskeys, option.name)\n      }\n      else {\n        error (\"ShowMenu cannot handle a \" + TypeOf(option))\n      }\n      dictionary add (game.menudisplayedoptions, optiontag, optionText)\n      msg (count + \": &lt;a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optiontag) + \"')\\\"&gt;\" + optionText + \"&lt;/a&gt;\")\n    }\n    EndOutputSection (outputsection)\n    game.menuoptions = options\n    game.menuallowcancel = allowCancel\n    game.menucallback = callback\n    game.menuoutputsection = outputsection\n  ]]&gt;\n  &lt;/function&gt;\n\n  &lt;function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\"&gt;\n    &lt;![CDATA[\n    handled = false\n    if (IsInt(input)) {\n      number = ToInt(input)\n      if (number &gt; 0 and number &lt;= ListCount(game.menuoptionskeys)) {\n        handled = true\n        ShowMenuResponse(StringListItem(game.menuoptionskeys, number - 1))\n      }\n    }\n    else if(HasAttribute(game, \"menudisplayedoptions\")) {\n      foreach (option, game.menudisplayedoptions) {\n        if (LCase(Trim(DictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {\n          ShowMenuResponse(option)\n          return (true)\n        }\n      }\n    }\n    return (handled)\n    ]]&gt;\n  &lt;/function&gt;\n\n  &lt;function name=\"ClearMenu\"&gt;\n    HideOutputSection(game.menuoutputsection)\n    game.menuoutputsection = null\n    game.menuoptions = null\n    game.menudisplayedoptions = null\n    game.menucallback = null\n  &lt;/function&gt;\n</code></pre>\n<p>(note that if two items have identical names, this will match the first one)</p>\n\n",
      "PostDate": "2018-02-25T09:39:15.0808243Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dbcb183d-240b-4c22-a0f3-1bed3a0d0ae8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was going to do something like this:\r\n```\r\nelse if(HasAttribute(game, \"menudisplayedoptions\")) {\r\n  possibilities = ListCompact(game.menuoptions)\r\n  foreach (word, Split(LCase(input), \" \")) {\r\n    stillpossible = NewStringList()\r\n    foreach (option, possibilities) {\r\n      words_in_option = Split(LCase(StringDictionaryItem(game.menudisplayedoptions, option)), \" \")\r\n      found = false\r\n      foreach (w, words_in_option) {\r\n        if (StartsWith(w, word)) {\r\n          found = true\r\n        }\r\n      }\r\n      if (found) {\r\n        list add (stillpossible, option)\r\n      }\r\n    }\r\n    possibilities = stillpossible\r\n  }\r\n  if (ListCount (possibilities) = 1) {\r\n    ShowMenuResponse(possibilities[0])\r\n    handled = true\r\n  }\r\n}\r\n```\r\nThat should trigger if there is exactly one menu option that contains every word the player typed (if they type the whole word or the start of the word); roughly similar to the way object identification works. But if the player just types \"e\", did they want to select the only menu option starting with an 'e'? Or did they want to go east?\r\n\r\nThis function could be fine tuned; but I'm not sure how a player would expect it to behave in that case.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was going to do something like this:</p>\n<pre><code>else if(HasAttribute(game, \"menudisplayedoptions\")) {\n  possibilities = ListCompact(game.menuoptions)\n  foreach (word, Split(LCase(input), \" \")) {\n    stillpossible = NewStringList()\n    foreach (option, possibilities) {\n      words_in_option = Split(LCase(StringDictionaryItem(game.menudisplayedoptions, option)), \" \")\n      found = false\n      foreach (w, words_in_option) {\n        if (StartsWith(w, word)) {\n          found = true\n        }\n      }\n      if (found) {\n        list add (stillpossible, option)\n      }\n    }\n    possibilities = stillpossible\n  }\n  if (ListCount (possibilities) = 1) {\n    ShowMenuResponse(possibilities[0])\n    handled = true\n  }\n}\n</code></pre>\n<p>That should trigger if there is exactly one menu option that contains every word the player typed (if they type the whole word or the start of the word); roughly similar to the way object identification works. But if the player just types \"e\", did they want to select the only menu option starting with an 'e'? Or did they want to go east?</p>\n<p>This function could be fine tuned; but I'm not sure how a player would expect it to behave in that case.</p>\n\n",
      "PostDate": "2018-02-25T09:55:25.9629724Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7cda902f-f0eb-4be7-a112-f85ddeb19915",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "two simple ways of doing it:\r\n\r\n1. using (optionally: a String List, and) a String Dictionary (pseudo: \"1\"=\"rock\";\"2\"=\"rap\";\"3=\"disco\")\r\n2.  using basic 'if' Script (pseudo): if (pseudo: result = \"1\" or result = \"rock\"); else if (result = \"2\" or result = \"rap\"); else if (result = \"3\" or result = \"disco\")\r\n\r\n---------\r\n\r\n(The corners of HK's lips rise up for just a fraction of a second, too fast for anyone to notice HK's quick brief knowing smirk/grin)",
      "EditableFormat": "markdown",
      "HTML": "<p>two simple ways of doing it:</p>\n<ol>\n<li>using (optionally: a String List, and) a String Dictionary (pseudo: \"1\"=\"rock\";\"2\"=\"rap\";\"3=\"disco\")</li>\n<li>using basic 'if' Script (pseudo): if (pseudo: result = \"1\" or result = \"rock\"); else if (result = \"2\" or result = \"rap\"); else if (result = \"3\" or result = \"disco\")</li>\n</ol>\n<hr>\n<p>(The corners of HK's lips rise up for just a fraction of a second, too fast for anyone to notice HK's quick brief knowing smirk/grin)</p>\n\n",
      "PostDate": "2018-02-25T11:15:11.2641242Z",
      "LastEditDate": "2018-02-25T11:29:17.6710862Z",
      "link": null
    },
    {
      "PostId": "4bc71a13-a30a-47c7-8327-c298da283c4d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT**: This doesn't work. ClearMenu is called before commands are parsed. Though you could have HandleMenuTextResponse make a copy of the text and those attributes somewhere, and a turnscript to clear them away afterwards.\r\n\r\nI suppose if you wanted it to only accept typed words if they don't match another command, you could modify `ShowMenu` and `ClearMenu` as above, then create a command with the pattern `#text#` (so it will only be called if no other command matches); and make it:\r\n```\r\nhandled = false\r\nif(HasAttribute(game, \"menudisplayedoptions\")) {\r\n  possibilities = ListCompact(game.menuoptions)\r\n  foreach (word, Split(LCase(text), \" \")) {\r\n    stillpossible = NewStringList()\r\n    foreach (option, possibilities) {\r\n      words_in_option = Split(LCase(StringDictionaryItem(game.menudisplayedoptions, option)), \" \")\r\n      found = false\r\n      foreach (w, words_in_option) {\r\n        if (StartsWith(w, word)) {\r\n          found = true\r\n        }\r\n      }\r\n      if (found) {\r\n        list add (stillpossible, option)\r\n      }\r\n    }\r\n    possibilities = stillpossible\r\n  }\r\n  if (ListCount (possibilities) = 1) {\r\n    ShowMenuResponse(possibilities[0])\r\n    handled = true\r\n  }\r\n}\r\nif (not handled) {\r\n  msg (\"[UnrecognisedCommand]\")\r\n}\r\n```\r\nIn the case where the menu can't be ignored, you'd want HandleMenuTextCommand to do all the checks itself.",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT</strong>: This doesn't work. ClearMenu is called before commands are parsed. Though you could have HandleMenuTextResponse make a copy of the text and those attributes somewhere, and a turnscript to clear them away afterwards.</p>\n<p>I suppose if you wanted it to only accept typed words if they don't match another command, you could modify <code>ShowMenu</code> and <code>ClearMenu</code> as above, then create a command with the pattern <code>#text#</code> (so it will only be called if no other command matches); and make it:</p>\n<pre><code>handled = false\nif(HasAttribute(game, \"menudisplayedoptions\")) {\n  possibilities = ListCompact(game.menuoptions)\n  foreach (word, Split(LCase(text), \" \")) {\n    stillpossible = NewStringList()\n    foreach (option, possibilities) {\n      words_in_option = Split(LCase(StringDictionaryItem(game.menudisplayedoptions, option)), \" \")\n      found = false\n      foreach (w, words_in_option) {\n        if (StartsWith(w, word)) {\n          found = true\n        }\n      }\n      if (found) {\n        list add (stillpossible, option)\n      }\n    }\n    possibilities = stillpossible\n  }\n  if (ListCount (possibilities) = 1) {\n    ShowMenuResponse(possibilities[0])\n    handled = true\n  }\n}\nif (not handled) {\n  msg (\"[UnrecognisedCommand]\")\n}\n</code></pre>\n<p>In the case where the menu can't be ignored, you'd want HandleMenuTextCommand to do all the checks itself.</p>\n\n",
      "PostDate": "2018-02-25T12:41:22.3515736Z",
      "LastEditDate": "2018-02-25T14:10:06.8812866Z",
      "link": null
    },
    {
      "PostId": "00fb3042-07a2-4cad-a4a1-1f0e8119dbe8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@HK\r\n\r\nUsing a dictionary (or a list) is pretty obvious; but you seem to have missed the point of the question. I think the hardest part of this one was finding the right function to override, to get at the text entered by the player in response to a ShowMenu call.",
      "EditableFormat": "markdown",
      "HTML": "<p>@HK</p>\n<p>Using a dictionary (or a list) is pretty obvious; but you seem to have missed the point of the question. I think the hardest part of this one was finding the right function to override, to get at the text entered by the player in response to a ShowMenu call.</p>\n\n",
      "PostDate": "2018-02-25T14:04:06.2923643Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c7426037-e97e-475c-8a2a-93624aaec009",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "[further comment - I added a couple of lines to the functions that are in my `CoreFunctions.aslx`. If any of those functions have changed in the latest version, I assume you'd have to merge the changes]",
      "EditableFormat": "markdown",
      "HTML": "<p>[further comment - I added a couple of lines to the functions that are in my <code>CoreFunctions.aslx</code>. If any of those functions have changed in the latest version, I assume you'd have to merge the changes]</p>\n\n",
      "PostDate": "2018-02-25T14:15:23.6549332Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fb190160-442a-4b72-a901-81c8e46bf0c8",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Your first post was the solution, mrangel.\r\n\r\nI only needed to change DictionaryItem to StringDictionaryItem in ShowMenuResponse():\r\n\r\n```if (LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {```\r\n\r\nThank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>Your first post was the solution, mrangel.</p>\n<p>I only needed to change DictionaryItem to StringDictionaryItem in ShowMenuResponse():</p>\n<p><code>if (LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {</code></p>\n<p>Thank you!</p>\n\n",
      "PostDate": "2018-02-25T14:27:29.2057279Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "167ec668-7c0d-40c6-8ac9-d56a1551750f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's not perfect. I mean, if you're being asked \"Did you mean: Red lorry / yellow lorry\"; then typing \"red\" should be sufficient.\r\n\r\nBut when it's the disambiguation menu, \"Did you mean: Heavy box, wooden box, open box\", and the player responds with \"> Open box\" … what should we assume they mean?",
      "EditableFormat": "markdown",
      "HTML": "<p>It's not perfect. I mean, if you're being asked \"Did you mean: Red lorry / yellow lorry\"; then typing \"red\" should be sufficient.</p>\n<p>But when it's the disambiguation menu, \"Did you mean: Heavy box, wooden box, open box\", and the player responds with \"&gt; Open box\" … what should we assume they mean?</p>\n\n",
      "PostDate": "2018-02-25T14:37:16.9566948Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "188dbccd-fc6d-4888-86eb-638529acbb87",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Forgewright,\r\n\r\nI had tried a homemade menu followed by a ```GetInput()``` in a function which had the working title  ```ShowGetMenuInput()```, but it wasn't living up to its expectations.\r\n\r\n(So we had a similar theory concerning this at one point.)\r\n\r\n---\r\nHK,\r\n\r\nYou answered what I asked correctly.\r\n\r\n...but mrangel (somehow) understood what I really meant (even though I didn't word my question very well).\r\n\r\n---\r\nmrangel,\r\n\r\nI saw your first post and immediately knew it would work, and I directly opened Quest to test it out.  (I was so excited to finally see it in action, I honestly didn't read anything else which had been posted after that.)\r\n\r\nIt worked, and I finished up the part of the game I into which made me want to have this work in the first place.  (Had to finish writing that bit, else I would have forgotten where I was headed with it.)\r\n\r\nThen, I added a line to ```Ask()``` and an else if to ```HandleMenuTextResponse()``` to allow \"y\" or \"n\" when running ```Ask()```.\r\n\r\nThis is what I've got at the moment (it's your code; I barely changed anything), and I haven't been able to break it yet:\r\n\r\n```\r\n  <function name=\"Ask\" parameters=\"question, callback\">\r\n    game.asking = true\r\n    options = NewStringList()\r\n    list add (options, \"Yes\")\r\n    list add (options, \"No\")\r\n    game.askcallback = callback\r\n    ShowMenu (question, options, false) {\r\n      parameters = NewDictionary()\r\n      if (result = \"Yes\") {\r\n        boolresult = true\r\n      }\r\n      else {\r\n        boolresult = false\r\n      }\r\n      dictionary add (parameters, \"result\", boolresult)\r\n      callback = game.askcallback\r\n      game.askcallback = null\r\n      invoke (callback, parameters)\r\n    }\r\n  </function>\r\n```\r\n```\r\n  <function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\"><![CDATA[\r\n    outputsection = StartNewOutputSection()\r\n    msg (caption)\r\n    count = 0\r\n    game.menuoptionskeys = NewStringList()\r\n    game.menudisplayedoptions = NewStringDictionary()\r\n    foreach (option, options) {\r\n      count = count + 1\r\n      if (TypeOf(options) = \"stringdictionary\") {\r\n        optionText = StringDictionaryItem(options, option)\r\n        optiontag = option\r\n        style = GetCurrentLinkTextFormat()\r\n        list add (game.menuoptionskeys, option)\r\n      }\r\n      else if (TypeOf(option) = \"string\") {\r\n        optionText = option\r\n        optiontag = option\r\n        style = GetCurrentLinkTextFormat()\r\n        list add (game.menuoptionskeys, option)\r\n      }\r\n      else if (TypeOf(option) = \"object\") {\r\n        optionText = GetDisplayAlias(option)\r\n        optiontag = option.name\r\n        colour = \"\"\r\n        if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = option.linkcolour\r\n        }\r\n        else {\r\n          colour = GetLinkTextColour()\r\n        }\r\n        style = GetCurrentTextFormat(colour)\r\n        list add (game.menuoptionskeys, option.name)\r\n      }\r\n      else {\r\n        error (\"ShowMenu cannot handle a \" + TypeOf(option))\r\n      }\r\n      dictionary add (game.menudisplayedoptions, optiontag, optionText)\r\n      msg (count + \": <a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optiontag) + \"')\\\">\" + optionText + \"</a>\")\r\n    }\r\n    EndOutputSection (outputsection)\r\n    game.menuoptions = options\r\n    game.menuallowcancel = allowCancel\r\n    game.menucallback = callback\r\n    game.menuoutputsection = outputsection\r\n  ]]></function>\r\n```\r\n```\r\n  <function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\"><![CDATA[\r\n    handled = false\r\n    if (IsInt(input)) {\r\n      number = ToInt(input)\r\n      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {\r\n        handled = true\r\n        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))\r\n      }\r\n    }\r\n    else if (HasAttribute(game, \"menudisplayedoptions\")) {\r\n      foreach (option, game.menudisplayedoptions) {\r\n        opt = LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option)))\r\n        answer = LCase(Trim(input))\r\n        if (opt = answer) {\r\n          ShowMenuResponse (option)\r\n          return (true)\r\n        }\r\n        else if (GetBoolean(game,\"asking\")) {\r\n          if (answer = \"y\") {\r\n            ShowMenuResponse (\"Yes\")\r\n            game.asking = false\r\n            return (true)\r\n          }\r\n          else if (answer = \"n\") {\r\n            ShowMenuResponse (\"No\")\r\n            game.asking = false\r\n            return (true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (handled)\r\n  ]]></function>\r\n```\r\n```\r\n  <function name=\"ClearMenu\">\r\n    HideOutputSection (game.menuoutputsection)\r\n    game.menuoutputsection = null\r\n    game.menuoptions = null\r\n    game.menudisplayedoptions = null\r\n    game.menucallback = null\r\n  </function>\r\n```\r\n\r\n---\r\n### The disambiguation menu:\r\n\r\nI've often wished I could enter \"red\" or \"yellow\" in such scenarios many a time, myself.\r\n\r\nIt works that way with Inform.\r\n\r\n...and, if it's possible to do something with Inform, it can be done with Quest!\r\n\r\n---\r\nCould we start the script off with a check on the values in ```options```, and, if they all contain the same word, remove that word from each, then remove that word from ```result``` before trimming it?\r\n\r\n```\r\nif (game.pov.currentcommandmultiobjectpending){\r\n  // Do stuff to allow the responses \"red\" or \"yellow\"\r\n}\r\n// Run the actual script\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Forgewright,</p>\n<p>I had tried a homemade menu followed by a <code>GetInput()</code> in a function which had the working title  <code>ShowGetMenuInput()</code>, but it wasn't living up to its expectations.</p>\n<p>(So we had a similar theory concerning this at one point.)</p>\n<hr>\n<p>HK,</p>\n<p>You answered what I asked correctly.</p>\n<p>...but mrangel (somehow) understood what I really meant (even though I didn't word my question very well).</p>\n<hr>\n<p>mrangel,</p>\n<p>I saw your first post and immediately knew it would work, and I directly opened Quest to test it out.  (I was so excited to finally see it in action, I honestly didn't read anything else which had been posted after that.)</p>\n<p>It worked, and I finished up the part of the game I into which made me want to have this work in the first place.  (Had to finish writing that bit, else I would have forgotten where I was headed with it.)</p>\n<p>Then, I added a line to <code>Ask()</code> and an else if to <code>HandleMenuTextResponse()</code> to allow \"y\" or \"n\" when running <code>Ask()</code>.</p>\n<p>This is what I've got at the moment (it's your code; I barely changed anything), and I haven't been able to break it yet:</p>\n<pre><code>  &lt;function name=\"Ask\" parameters=\"question, callback\"&gt;\n    game.asking = true\n    options = NewStringList()\n    list add (options, \"Yes\")\n    list add (options, \"No\")\n    game.askcallback = callback\n    ShowMenu (question, options, false) {\n      parameters = NewDictionary()\n      if (result = \"Yes\") {\n        boolresult = true\n      }\n      else {\n        boolresult = false\n      }\n      dictionary add (parameters, \"result\", boolresult)\n      callback = game.askcallback\n      game.askcallback = null\n      invoke (callback, parameters)\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\"&gt;&lt;![CDATA[\n    outputsection = StartNewOutputSection()\n    msg (caption)\n    count = 0\n    game.menuoptionskeys = NewStringList()\n    game.menudisplayedoptions = NewStringDictionary()\n    foreach (option, options) {\n      count = count + 1\n      if (TypeOf(options) = \"stringdictionary\") {\n        optionText = StringDictionaryItem(options, option)\n        optiontag = option\n        style = GetCurrentLinkTextFormat()\n        list add (game.menuoptionskeys, option)\n      }\n      else if (TypeOf(option) = \"string\") {\n        optionText = option\n        optiontag = option\n        style = GetCurrentLinkTextFormat()\n        list add (game.menuoptionskeys, option)\n      }\n      else if (TypeOf(option) = \"object\") {\n        optionText = GetDisplayAlias(option)\n        optiontag = option.name\n        colour = \"\"\n        if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n          colour = option.linkcolour\n        }\n        else {\n          colour = GetLinkTextColour()\n        }\n        style = GetCurrentTextFormat(colour)\n        list add (game.menuoptionskeys, option.name)\n      }\n      else {\n        error (\"ShowMenu cannot handle a \" + TypeOf(option))\n      }\n      dictionary add (game.menudisplayedoptions, optiontag, optionText)\n      msg (count + \": &lt;a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optiontag) + \"')\\\"&gt;\" + optionText + \"&lt;/a&gt;\")\n    }\n    EndOutputSection (outputsection)\n    game.menuoptions = options\n    game.menuallowcancel = allowCancel\n    game.menucallback = callback\n    game.menuoutputsection = outputsection\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\"&gt;&lt;![CDATA[\n    handled = false\n    if (IsInt(input)) {\n      number = ToInt(input)\n      if (number &gt; 0 and number &lt;= ListCount(game.menuoptionskeys)) {\n        handled = true\n        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))\n      }\n    }\n    else if (HasAttribute(game, \"menudisplayedoptions\")) {\n      foreach (option, game.menudisplayedoptions) {\n        opt = LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option)))\n        answer = LCase(Trim(input))\n        if (opt = answer) {\n          ShowMenuResponse (option)\n          return (true)\n        }\n        else if (GetBoolean(game,\"asking\")) {\n          if (answer = \"y\") {\n            ShowMenuResponse (\"Yes\")\n            game.asking = false\n            return (true)\n          }\n          else if (answer = \"n\") {\n            ShowMenuResponse (\"No\")\n            game.asking = false\n            return (true)\n          }\n        }\n      }\n    }\n    return (handled)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"ClearMenu\"&gt;\n    HideOutputSection (game.menuoutputsection)\n    game.menuoutputsection = null\n    game.menuoptions = null\n    game.menudisplayedoptions = null\n    game.menucallback = null\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<h3>The disambiguation menu:</h3>\n<p>I've often wished I could enter \"red\" or \"yellow\" in such scenarios many a time, myself.</p>\n<p>It works that way with Inform.</p>\n<p>...and, if it's possible to do something with Inform, it can be done with Quest!</p>\n<hr>\n<p>Could we start the script off with a check on the values in <code>options</code>, and, if they all contain the same word, remove that word from each, then remove that word from <code>result</code> before trimming it?</p>\n<pre><code>if (game.pov.currentcommandmultiobjectpending){\n  // Do stuff to allow the responses \"red\" or \"yellow\"\n}\n// Run the actual script\n</code></pre>\n\n",
      "PostDate": "2018-02-25T17:20:23.6727694Z",
      "LastEditDate": "2018-02-25T18:10:36.0218879Z",
      "link": null
    },
    {
      "PostId": "8249cd1c-343e-4a5a-bdc3-125967b8acf9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I've often wished I could enter \"red\" or \"yellow\" in such scenarios many a time, myself.\r\nIt works that way with Inform.\r\n...and, if it's possible to do something with Inform, it can be done with Quest!\r\n\r\nYep ... my second post was (hopefully) the code to do it.\r\n\r\nI didn't include that in the first post because I wasn't sure how it should handle the case where the user enters something that is both one of the menu options, and a valid command.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I've often wished I could enter \"red\" or \"yellow\" in such scenarios many a time, myself.<br>\nIt works that way with Inform.<br>\n...and, if it's possible to do something with Inform, it can be done with Quest!</p>\n</blockquote>\n<p>Yep ... my second post was (hopefully) the code to do it.</p>\n<p>I didn't include that in the first post because I wasn't sure how it should handle the case where the user enters something that is both one of the menu options, and a valid command.</p>\n\n",
      "PostDate": "2018-02-25T21:27:27.0075858Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
