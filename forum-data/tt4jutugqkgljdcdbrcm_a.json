{
  "Topic": {
    "TopicId": "tt4jutugqkgljdcdbrcm_a",
    "ForumId": "10",
    "Title": "Retrieving a key from a dictionary using its value",
    "LastUpdated": "2017-11-26T16:39:27.6081585Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8a7a0473-5938-409c-814a-c7ec72a86aad",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way?\r\n\r\nCan I find the dictionary's key if I know the value?\r\n\r\n(If so, I'm sure it's simple, and I apologize in advance for asking.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way?</p>\n<p>Can I find the dictionary's key if I know the value?</p>\n<p>(If so, I'm sure it's simple, and I apologize in advance for asking.)</p>\n\n",
      "PostDate": "2017-11-26T16:39:27.6081585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b6484239-fff6-4544-9261-d2d173a5c20c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n---------------------------------------\r\n\r\nIt only goes one way:\r\n\r\nkey (input) ---> value (output)\r\n\r\nbut-so, all you got to do, is to add a reversed key-value pair to the dictionary:\r\n\r\nan example\r\n\r\nHK edited, version 2: (let me know if it still got errors)\r\n\r\n```\r\n<game name=\"example_game\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n    invoke (month_object.month_script_attribute)\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"month_object\">\r\n\r\n  <attr name=\"month_script_attribute\" type=\"script\">\r\n    show menu (\"choose selection method\", month_object.month_scriptdictionary_attribute, false) {\r\n      invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, result))\r\n    }\r\n  </attr>\r\n\r\n  <month_scriptdictionary_attribute type=\"scriptdictionary\">\r\n\r\n    <item key=\"string_to_integer\">\r\n      show menu (\"Month?\", month_object.month_stringlist_attribute, false) {\r\n        player.month_string_attribute = result\r\n        player.month_integer_attribute = ToInt (StringDictionaryItem (month_object.month_stringdictionary_attribute, result))\r\n      }\r\n    </item>\r\n\r\n    <item key=\"integer_to_string\">\r\n      msg (\"Month? (1 to 12)\")\r\n      get input {\r\n        if (IsInt (result)) {\r\n          integer_variable = ToInt (result)\r\n          if (integer_variable > 0 and integer_variable < 13) {\r\n            player.month_integer_attribute = integer_variable\r\n            player.month_string_attribute = StringDictionaryItem (month_object.month_stringdictionary_attribute, integer_variable)\r\n          } else {\r\n            invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, \"integer_to_string\"))\r\n          }\r\n        } else {\r\n          invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, \"integer_to_string\"))\r\n        }\r\n      }\r\n    </item>\r\n\r\n  </month_scriptdictionary_attribute>\r\n\r\n  <attr name=\"month_stringlist_attribute\" type=\"stringlist\">\r\n\r\n    <value>january</value>\r\n    <value>february</value>\r\n    <value>march</value>\r\n    <value>april</value>\r\n    <value>may</value>\r\n    <value>june</value>\r\n    <value>july</value>\r\n    <value>august</value>\r\n    <value>september</value>\r\n    <value>october</value>\r\n    <value>november</value>\r\n    <value>december</value>\r\n\r\n  </attr>\r\n\r\n  <month_stringdictionary_attribute\" type=\"stringdictionary\">\r\n\r\n    <!--\r\n    'string to integer (important: the 'integer' returned output is still a string value, so you'll have to convert it, via 'ToInt (RETURNED_OUTPUT)', into integers if you want/need them as integers, my code example does/shows this for you)' items\r\n    -->\r\n\r\n    <item>\r\n      <key>january</key>\r\n      <value>1</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>february</key>\r\n      <value>2</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>march</key>\r\n      <value>3</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>april</key>\r\n      <value>4</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>may</key>\r\n      <value>5</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>june</key>\r\n      <value>6</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>july</key>\r\n      <value>7</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>august</key>\r\n      <value>8</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>september</key>\r\n      <value>9</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>october</key>\r\n      <value>10</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>november</key>\r\n      <value>11</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>december</key>\r\n      <value>12</value>\r\n    </item>\r\n\r\n    <!--\r\n    'integer to string' items\r\n    -->\r\n\r\n    <item>\r\n      <key>1</key>\r\n      <value>january</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>2</key>\r\n      <value>february</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>3</key>\r\n      <value>march</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>4</key>\r\n      <value>april</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>5</key>\r\n      <value>may</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>6</key>\r\n      <value>june</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>7</key>\r\n      <value>july</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>8</key>\r\n      <value>august</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>9</key>\r\n      <value>september</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>10</key>\r\n      <value>october</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>11</key>\r\n      <value>november</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>12</key>\r\n      <value>december</value>\r\n    </item>\r\n\r\n  </month_stringdictionary_attribute>\r\n\r\n</object>\r\n```\r\n\r\n--------------------\r\n\r\na more fancy/cool application (Pixie's genius/credit) is to use this for handling magic/damage types for various magic/elemental types (weak: x2 or x1.5 damage: fire vs water, strong: x0.5 damage: fire vs fire, immunity: x0 damage: fire vs fire, reflection: fire vs fire, absorption:fire vs fire), if interested I can craft the code and explain it",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>It only goes one way:</p>\n<p>key (input) ---&gt; value (output)</p>\n<p>but-so, all you got to do, is to add a reversed key-value pair to the dictionary:</p>\n<p>an example</p>\n<p>HK edited, version 2: (let me know if it still got errors)</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    invoke (month_object.month_script_attribute)\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"month_object\"&gt;\n\n  &lt;attr name=\"month_script_attribute\" type=\"script\"&gt;\n    show menu (\"choose selection method\", month_object.month_scriptdictionary_attribute, false) {\n      invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, result))\n    }\n  &lt;/attr&gt;\n\n  &lt;month_scriptdictionary_attribute type=\"scriptdictionary\"&gt;\n\n    &lt;item key=\"string_to_integer\"&gt;\n      show menu (\"Month?\", month_object.month_stringlist_attribute, false) {\n        player.month_string_attribute = result\n        player.month_integer_attribute = ToInt (StringDictionaryItem (month_object.month_stringdictionary_attribute, result))\n      }\n    &lt;/item&gt;\n\n    &lt;item key=\"integer_to_string\"&gt;\n      msg (\"Month? (1 to 12)\")\n      get input {\n        if (IsInt (result)) {\n          integer_variable = ToInt (result)\n          if (integer_variable &gt; 0 and integer_variable &lt; 13) {\n            player.month_integer_attribute = integer_variable\n            player.month_string_attribute = StringDictionaryItem (month_object.month_stringdictionary_attribute, integer_variable)\n          } else {\n            invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, \"integer_to_string\"))\n          }\n        } else {\n          invoke (ScriptDictionaryItem (month_object.month_scriptdictionary_attribute, \"integer_to_string\"))\n        }\n      }\n    &lt;/item&gt;\n\n  &lt;/month_scriptdictionary_attribute&gt;\n\n  &lt;attr name=\"month_stringlist_attribute\" type=\"stringlist\"&gt;\n\n    &lt;value&gt;january&lt;/value&gt;\n    &lt;value&gt;february&lt;/value&gt;\n    &lt;value&gt;march&lt;/value&gt;\n    &lt;value&gt;april&lt;/value&gt;\n    &lt;value&gt;may&lt;/value&gt;\n    &lt;value&gt;june&lt;/value&gt;\n    &lt;value&gt;july&lt;/value&gt;\n    &lt;value&gt;august&lt;/value&gt;\n    &lt;value&gt;september&lt;/value&gt;\n    &lt;value&gt;october&lt;/value&gt;\n    &lt;value&gt;november&lt;/value&gt;\n    &lt;value&gt;december&lt;/value&gt;\n\n  &lt;/attr&gt;\n\n  &lt;month_stringdictionary_attribute\" type=\"stringdictionary\"&gt;\n\n    &lt;!--\n    'string to integer (important: the 'integer' returned output is still a string value, so you'll have to convert it, via 'ToInt (RETURNED_OUTPUT)', into integers if you want/need them as integers, my code example does/shows this for you)' items\n    --&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;january&lt;/key&gt;\n      &lt;value&gt;1&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;february&lt;/key&gt;\n      &lt;value&gt;2&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;march&lt;/key&gt;\n      &lt;value&gt;3&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;april&lt;/key&gt;\n      &lt;value&gt;4&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;may&lt;/key&gt;\n      &lt;value&gt;5&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;june&lt;/key&gt;\n      &lt;value&gt;6&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;july&lt;/key&gt;\n      &lt;value&gt;7&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;august&lt;/key&gt;\n      &lt;value&gt;8&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;september&lt;/key&gt;\n      &lt;value&gt;9&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;october&lt;/key&gt;\n      &lt;value&gt;10&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;november&lt;/key&gt;\n      &lt;value&gt;11&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;december&lt;/key&gt;\n      &lt;value&gt;12&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;!--\n    'integer to string' items\n    --&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;1&lt;/key&gt;\n      &lt;value&gt;january&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;2&lt;/key&gt;\n      &lt;value&gt;february&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;3&lt;/key&gt;\n      &lt;value&gt;march&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;4&lt;/key&gt;\n      &lt;value&gt;april&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;5&lt;/key&gt;\n      &lt;value&gt;may&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;6&lt;/key&gt;\n      &lt;value&gt;june&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;7&lt;/key&gt;\n      &lt;value&gt;july&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;8&lt;/key&gt;\n      &lt;value&gt;august&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;9&lt;/key&gt;\n      &lt;value&gt;september&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;10&lt;/key&gt;\n      &lt;value&gt;october&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;11&lt;/key&gt;\n      &lt;value&gt;november&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;12&lt;/key&gt;\n      &lt;value&gt;december&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/month_stringdictionary_attribute&gt;\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>a more fancy/cool application (Pixie's genius/credit) is to use this for handling magic/damage types for various magic/elemental types (weak: x2 or x1.5 damage: fire vs water, strong: x0.5 damage: fire vs fire, immunity: x0 damage: fire vs fire, reflection: fire vs fire, absorption:fire vs fire), if interested I can craft the code and explain it</p>\n\n",
      "PostDate": "2017-11-26T17:33:46.4006103Z",
      "LastEditDate": "2017-11-26T23:27:26.1387347Z",
      "link": null
    },
    {
      "PostId": "8261e62b-8cb7-48d6-85a0-b043d1a877d3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n<function name=\"FindKey\" parameters=\"dict, value\">\r\n  foreach (key, dict) {\r\n    if (DictionaryItem(dict, key) = value) {\r\n      return (key)\r\n    }\r\n  }\r\n</function>\r\n```\r\nNot too efficient, but it works.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>&lt;function name=\"FindKey\" parameters=\"dict, value\"&gt;\n  foreach (key, dict) {\n    if (DictionaryItem(dict, key) = value) {\n      return (key)\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>Not too efficient, but it works.</p>\n\n",
      "PostDate": "2017-11-26T17:41:44.4408329Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e64660ee-db9e-4842-bdff-424cca472ec8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "awesome... never thought (nor be able to realize how) to make it into a (dynamic) Script/Function... really cool code, thank you, mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>awesome... never thought (nor be able to realize how) to make it into a (dynamic) Script/Function... really cool code, thank you, mrangel!</p>\n\n",
      "PostDate": "2017-11-26T17:47:08.1957046Z",
      "LastEditDate": "2017-11-26T17:50:28.1620469Z",
      "link": null
    },
    {
      "PostId": "acad3e7d-fb3b-47d8-9a87-951856de3ccc",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Saw this and thought \"Wow, you can do that?\"\r\n```\r\nshow menu (\"choose selection method\", month_object.month_scriptdictionary_attribute, false) {\r\n  do (month_object, \"month_scriptdictionary_attribute\", result)\r\n}\r\n```\r\nTried it. Nope; `do` definitely doesn't work with a scriptdictionary and a key. Thought that would be an odd thing to be omitted from the manual.\r\nWould be nice if it could; but then it's not hard to make a function that does that. I was just surprised to see someone apparently doing in one line what I'd taken a fair amount of time polishing.",
      "EditableFormat": "markdown",
      "HTML": "<p>Saw this and thought \"Wow, you can do that?\"</p>\n<pre><code>show menu (\"choose selection method\", month_object.month_scriptdictionary_attribute, false) {\n  do (month_object, \"month_scriptdictionary_attribute\", result)\n}\n</code></pre>\n<p>Tried it. Nope; <code>do</code> definitely doesn't work with a scriptdictionary and a key. Thought that would be an odd thing to be omitted from the manual.<br>\nWould be nice if it could; but then it's not hard to make a function that does that. I was just surprised to see someone apparently doing in one line what I'd taken a fair amount of time polishing.</p>\n\n",
      "PostDate": "2017-11-26T18:08:26.1506743Z",
      "LastEditDate": "2017-11-27T00:22:08.8000219Z",
      "link": null
    },
    {
      "PostId": "7a5b2241-0628-491d-82b0-d6afb3cd6ebd",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel, \r\n\r\nI thought of doing that with foreach...\r\n\r\nRight now I've just got two dictionaries.  (I thought that would be easier on the game than running a foreach loop.)\r\n\r\n---\r\nHere's how I use ShowMenu with Script Dictionary to run the script:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"show menu script\">\r\n    <gameid>8a565181-e882-4c68-8253-69e84fcce2ed</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <scriptDic type=\"scriptdictionary\">\r\n      <item key=\"one\">\r\n        JS.alert (\"You chose scriptDic one.\")\r\n      </item>\r\n      <item key=\"two\">\r\n        msg (\"You ran scriptDic two.\")\r\n      </item>\r\n    </scriptDic>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <description>Enter {command:TEST}</description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"test\">\r\n    <pattern>test</pattern>\r\n    <script>\r\n      ShowMenu (\"Dictionary choices: \", game.scriptDic, true) {\r\n        invoke (ScriptDictionaryItem(game.scriptDic, result))\r\n      }\r\n    </script>\r\n  </command>\r\n</asl>\r\n```\r\n\r\n---\r\nFor a string dictionary, I just ``` msg (result)```",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel,</p>\n<p>I thought of doing that with foreach...</p>\n<p>Right now I've just got two dictionaries.  (I thought that would be easier on the game than running a foreach loop.)</p>\n<hr>\n<p>Here's how I use ShowMenu with Script Dictionary to run the script:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"show menu script\"&gt;\n    &lt;gameid&gt;8a565181-e882-4c68-8253-69e84fcce2ed&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;scriptDic type=\"scriptdictionary\"&gt;\n      &lt;item key=\"one\"&gt;\n        JS.alert (\"You chose scriptDic one.\")\n      &lt;/item&gt;\n      &lt;item key=\"two\"&gt;\n        msg (\"You ran scriptDic two.\")\n      &lt;/item&gt;\n    &lt;/scriptDic&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;description&gt;Enter {command:TEST}&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"test\"&gt;\n    &lt;pattern&gt;test&lt;/pattern&gt;\n    &lt;script&gt;\n      ShowMenu (\"Dictionary choices: \", game.scriptDic, true) {\n        invoke (ScriptDictionaryItem(game.scriptDic, result))\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>For a string dictionary, I just <code>msg (result)</code></p>\n\n",
      "PostDate": "2017-11-26T19:15:35.6216585Z",
      "LastEditDate": "2017-11-26T19:22:51.1772681Z",
      "link": null
    },
    {
      "PostId": "c970d81a-20ba-4fbd-b74c-ee90f6060cb3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Returning a string:\r\n\r\n```\r\nfirsttime {\r\n  game.stringDic = NewStringDictionary()\r\n  i = 0\r\n  while (i<4) {\r\n    i = i + 1\r\n    a = ToWords(i)\r\n    dictionary add (game.stringDic, \"You chose \"+a+\".\", a)\r\n  }\r\n}\r\nShowMenu (\"Dictionary choices: \", game.stringDic, true) {\r\n  msg (result)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Returning a string:</p>\n<pre><code>firsttime {\n  game.stringDic = NewStringDictionary()\n  i = 0\n  while (i&lt;4) {\n    i = i + 1\n    a = ToWords(i)\n    dictionary add (game.stringDic, \"You chose \"+a+\".\", a)\n  }\n}\nShowMenu (\"Dictionary choices: \", game.stringDic, true) {\n  msg (result)\n}\n</code></pre>\n\n",
      "PostDate": "2017-11-26T19:24:06.081983Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2236917-7e36-4b59-961e-60cd735513f0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ mrangel:\r\n\r\nit can be done, I just need to check-on/fix some of the code syntax (since it's having errors, doh!)\r\n\r\n(will edit my previous post with the code, so try it again, and hopefully it'll be syntax-error/error free now, lol)\r\n\r\nfor all Attribute Types except Dictionaries (not sure if String/Object Dictionaries work or not), you can use the 'attr' syntax, but not with dictionaries (not sure if String/Object Dictionaries work or not), I keep forgetting about it, as I like using the 'attr' syntax, lol. I changed all of the dictionaries to the non-attr syntax, just to be safe.\r\n\r\nthe 'show menu' should take the 'keys' of a dictionary for it's menu choices, just like as if it were a list, at least I think it does for string dictionaries, but maybe not for Object/Script dictionaries.\r\n\r\nI used 'invoke' instead of 'do', as with do's syntax/signature, it does seem like it can't work with script dictionaries, only scripts.\r\n\r\nusually using 'do' is better as you can concatenate with it and it works with most Attribute Types, though 'invoke' is quick/easy for scripts and script dictionaries (need to use the 'ScriptDictionaryItem' to get a returned script for 'invoke' to use), though both 'invoke' and 'do' can be passed arguments/parameters, as well:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/do.html\r\nhttp://docs.textadventures.co.uk/quest/scripts/invoke.html\r\n\r\nlet me know if there's still errors with using my code, as it's likely just some stupid typos or syntax errors... it does work... it can be done... just need to get my code correct, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>@ mrangel:</p>\n<p>it can be done, I just need to check-on/fix some of the code syntax (since it's having errors, doh!)</p>\n<p>(will edit my previous post with the code, so try it again, and hopefully it'll be syntax-error/error free now, lol)</p>\n<p>for all Attribute Types except Dictionaries (not sure if String/Object Dictionaries work or not), you can use the 'attr' syntax, but not with dictionaries (not sure if String/Object Dictionaries work or not), I keep forgetting about it, as I like using the 'attr' syntax, lol. I changed all of the dictionaries to the non-attr syntax, just to be safe.</p>\n<p>the 'show menu' should take the 'keys' of a dictionary for it's menu choices, just like as if it were a list, at least I think it does for string dictionaries, but maybe not for Object/Script dictionaries.</p>\n<p>I used 'invoke' instead of 'do', as with do's syntax/signature, it does seem like it can't work with script dictionaries, only scripts.</p>\n<p>usually using 'do' is better as you can concatenate with it and it works with most Attribute Types, though 'invoke' is quick/easy for scripts and script dictionaries (need to use the 'ScriptDictionaryItem' to get a returned script for 'invoke' to use), though both 'invoke' and 'do' can be passed arguments/parameters, as well:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/do.html<br>\nhttp://docs.textadventures.co.uk/quest/scripts/invoke.html</p>\n<p>let me know if there's still errors with using my code, as it's likely just some stupid typos or syntax errors... it does work... it can be done... just need to get my code correct, lol.</p>\n\n",
      "PostDate": "2017-11-26T23:16:35.9552994Z",
      "LastEditDate": "2017-11-26T23:48:02.0839466Z",
      "link": null
    },
    {
      "PostId": "c892db8e-4670-4012-a51b-46a69dfd001a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK\r\n\r\nLook - > \r\n\r\n  http://textadventures.co.uk/forum/quest/topic/tt4jutugqkgljdcdbrcm_a/retrieving-a-key-from-a-dictionary-using-its-value#7a5b2241-0628-491d-82b0-d6afb3cd6ebd\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/tt4jutugqkgljdcdbrcm_a/retrieving-a-key-from-a-dictionary-using-its-value#c970d81a-20ba-4fbd-b74c-ee90f6060cb3",
      "EditableFormat": "markdown",
      "HTML": "<p>HK</p>\n<p>Look - &gt;</p>\n<p>http://textadventures.co.uk/forum/quest/topic/tt4jutugqkgljdcdbrcm_a/retrieving-a-key-from-a-dictionary-using-its-value#7a5b2241-0628-491d-82b0-d6afb3cd6ebd</p>\n<p>http://textadventures.co.uk/forum/quest/topic/tt4jutugqkgljdcdbrcm_a/retrieving-a-key-from-a-dictionary-using-its-value#c970d81a-20ba-4fbd-b74c-ee90f6060cb3</p>\n\n",
      "PostDate": "2017-11-27T00:15:39.155392Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8ea8b760-0427-473e-bea5-f10b460e7a0d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I shouldn't have said anything.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I shouldn't have said anything.</p>\n\n",
      "PostDate": "2017-11-27T00:23:02.3804338Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8633f630-9f18-4ea7-bc32-70011300ab00",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can do this, too:\r\n\r\n```\r\ngame.scriptDictTemp = NewScriptDictionary()\r\nfunctOne => {\r\n  msg (\"This is function one!\")\r\n}\r\ndictionary add (game.scriptDictTemp, \"one\", functOne)\r\nfunctTwo => {\r\n  msg (\"This is function two!\")\r\n}\r\ndictionary add (game.scriptDictTemp, \"two\", functTwo)\r\ncreate (\"dictObjTemp\")\r\nShowMenu (\"Dictionary choices: \", game.scriptDictTemp, true) {\r\n  dictObjTemp.thisScript = ScriptDictionaryItem(game.scriptDictTemp, result)\r\n  do (dictObjTemp, \"thisScript\")\r\n  destroy (\"dictObjTemp\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You can do this, too:</p>\n<pre><code>game.scriptDictTemp = NewScriptDictionary()\nfunctOne =&gt; {\n  msg (\"This is function one!\")\n}\ndictionary add (game.scriptDictTemp, \"one\", functOne)\nfunctTwo =&gt; {\n  msg (\"This is function two!\")\n}\ndictionary add (game.scriptDictTemp, \"two\", functTwo)\ncreate (\"dictObjTemp\")\nShowMenu (\"Dictionary choices: \", game.scriptDictTemp, true) {\n  dictObjTemp.thisScript = ScriptDictionaryItem(game.scriptDictTemp, result)\n  do (dictObjTemp, \"thisScript\")\n  destroy (\"dictObjTemp\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-11-27T00:40:31.6611376Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5c10708b-4afe-48ca-8b26-6fe6684352b5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "EDIT \r\n\r\nI don't know what I had messed up, but this works:\r\n\r\n```\r\nx = FindKey(game.stringDic, \"four\")\r\nmsg (\"The key is \"+x)\r\nShowMenu (\"Dictionary choices: \", game.stringDic, true) {\r\n  msg (result)\r\n}\r\n```\r\n\r\n```\r\n  <function name=\"FindKey\" parameters=\"dict, value\" type=\"string\">\r\n    foreach (key, dict) {\r\n      if (StringDictionaryItem(dict, key) = value) {\r\n        return (key)\r\n      }\r\n    }\r\n  </function>\r\n```\r\n\r\n```\r\n    <start type=\"script\"><![CDATA[\r\n      game.stringDic = NewStringDictionary()\r\n      i = 0\r\n      while (i<4) {\r\n        i = i + 1\r\n        a = ToWords(i)\r\n        dictionary add (game.stringDic, \"You chose \"+a, a)\r\n      }\r\n    ]]></start>\r\n```\r\n\r\n\r\n---\r\n\r\nWhy sorry, mrangel?\r\n\r\nI'm having all kinds of fun with this stuff!\r\n\r\n...and I'm fairly certain that HK is, as well.\r\n\r\n\r\n...and I like your function better than having a reversed dictionary.\r\n\r\nA ```foreach``` can't have that much more effect on Quest's resources than retrieving a value from a dictionary; can it?",
      "EditableFormat": "markdown",
      "HTML": "<p>EDIT</p>\n<p>I don't know what I had messed up, but this works:</p>\n<pre><code>x = FindKey(game.stringDic, \"four\")\nmsg (\"The key is \"+x)\nShowMenu (\"Dictionary choices: \", game.stringDic, true) {\n  msg (result)\n}\n</code></pre>\n<pre><code>  &lt;function name=\"FindKey\" parameters=\"dict, value\" type=\"string\"&gt;\n    foreach (key, dict) {\n      if (StringDictionaryItem(dict, key) = value) {\n        return (key)\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>    &lt;start type=\"script\"&gt;&lt;![CDATA[\n      game.stringDic = NewStringDictionary()\n      i = 0\n      while (i&lt;4) {\n        i = i + 1\n        a = ToWords(i)\n        dictionary add (game.stringDic, \"You chose \"+a, a)\n      }\n    ]]&gt;&lt;/start&gt;\n</code></pre>\n<hr>\n<p>Why sorry, mrangel?</p>\n<p>I'm having all kinds of fun with this stuff!</p>\n<p>...and I'm fairly certain that HK is, as well.</p>\n<p>...and I like your function better than having a reversed dictionary.</p>\n<p>A <code>foreach</code> can't have that much more effect on Quest's resources than retrieving a value from a dictionary; can it?</p>\n\n",
      "PostDate": "2017-11-27T01:20:33.1535216Z",
      "LastEditDate": "2017-11-27T04:28:30.7713572Z",
      "link": null
    },
    {
      "PostId": "d0a19c24-1d5d-4659-bd89-febdabdbeb78",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "in terms of speed (likely not actual significant difference however), having dictionaries (with reversed items), is better: no/few operations vs operations involved with using the 'findkey' method\r\n\r\nin terms of memory/resources, the 'findkey' method is better, as you don't have to have 'quantity of dictionaries x2:reversed items'\r\n\r\nin terms of human (time/effort/typing), using the 'findkey' is superior, as you don't have to have 'quantity of dictionaries x2:reversed items'\r\n\r\n-----------\r\n\r\nthus, using 'findkey' method is better, and it's actually very efficient (iterating through lists/arrays is very fast in terms of computer hardware, as all device's memory is a list/array), especially in terms of human involvement, saves so much time/effort/typing!",
      "EditableFormat": "markdown",
      "HTML": "<p>in terms of speed (likely not actual significant difference however), having dictionaries (with reversed items), is better: no/few operations vs operations involved with using the 'findkey' method</p>\n<p>in terms of memory/resources, the 'findkey' method is better, as you don't have to have 'quantity of dictionaries x2:reversed items'</p>\n<p>in terms of human (time/effort/typing), using the 'findkey' is superior, as you don't have to have 'quantity of dictionaries x2:reversed items'</p>\n<hr>\n<p>thus, using 'findkey' method is better, and it's actually very efficient (iterating through lists/arrays is very fast in terms of computer hardware, as all device's memory is a list/array), especially in terms of human involvement, saves so much time/effort/typing!</p>\n\n",
      "PostDate": "2017-11-27T04:53:38.331874Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c90c233e-fdbf-481d-a165-8563112290b3",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would suggest returning null or throwing an error if nothing is found. It is going to happen at some point, and will be easier to debug if you have it handle it itself.\r\n```\r\n<function name=\"FindKey\" parameters=\"dict, value\">\r\n  foreach (key, dict) {\r\n    if (DictionaryItem(dict, key) = value) {\r\n      return (key)\r\n    }\r\n  }\r\n  return(null)\r\n</function>\r\n\r\n<function name=\"FindKey\" parameters=\"dict, value\">\r\n  foreach (key, dict) {\r\n    if (DictionaryItem(dict, key) = value) {\r\n      return (key)\r\n    }\r\n  }\r\n  error(\"Value not found in dictionary: \" + value)\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I would suggest returning null or throwing an error if nothing is found. It is going to happen at some point, and will be easier to debug if you have it handle it itself.</p>\n<pre><code>&lt;function name=\"FindKey\" parameters=\"dict, value\"&gt;\n  foreach (key, dict) {\n    if (DictionaryItem(dict, key) = value) {\n      return (key)\n    }\n  }\n  return(null)\n&lt;/function&gt;\n\n&lt;function name=\"FindKey\" parameters=\"dict, value\"&gt;\n  foreach (key, dict) {\n    if (DictionaryItem(dict, key) = value) {\n      return (key)\n    }\n  }\n  error(\"Value not found in dictionary: \" + value)\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-11-27T10:02:09.0656544Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fdfdb490-dbd3-4293-8380-de214884a726",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> in terms of speed (likely not actual significant difference however), having dictionaries (with reversed items), is better\r\n\r\nIncorrect. Looking up the key iterates over (on average) half the dictionary. Building the reverse dictionary has to iterate over the whole thing. If you change the dictionary more often than you have to do a reverse lookup, it's faster to scan it each time. Benchmarking on Perl says a lookup function is faster for cases where you have less than √2 lookups per change. This roughly matches up with what I'd expect.\r\n\r\nIn Quest, not sure where the dividing line would be. I suspect it would be higher, because iterating over a dictionary gives you the keys in the same order they were added. Unless there's some really neat black magic going on, I suspect this means the dictionary add and remove functions will be really, really slow.\r\n\r\n(Not slow enough to make a difference in a real game, but comparatively slower than my benchmarks would imply)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>in terms of speed (likely not actual significant difference however), having dictionaries (with reversed items), is better</p>\n</blockquote>\n<p>Incorrect. Looking up the key iterates over (on average) half the dictionary. Building the reverse dictionary has to iterate over the whole thing. If you change the dictionary more often than you have to do a reverse lookup, it's faster to scan it each time. Benchmarking on Perl says a lookup function is faster for cases where you have less than √2 lookups per change. This roughly matches up with what I'd expect.</p>\n<p>In Quest, not sure where the dividing line would be. I suspect it would be higher, because iterating over a dictionary gives you the keys in the same order they were added. Unless there's some really neat black magic going on, I suspect this means the dictionary add and remove functions will be really, really slow.</p>\n<p>(Not slow enough to make a difference in a real game, but comparatively slower than my benchmarks would imply)</p>\n\n",
      "PostDate": "2017-11-27T13:51:27.2512941Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7c28b0ed-0b88-415f-aeba-25d7e016dfcf",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, ```DictionaryItem``` basically performs a ```foreach``` of its own, but returns out of the script when it finds a match?\r\n\r\n---\r\nAlso, check this out: \r\n\r\n[DictFun.aslx](https://gist.githubusercontent.com/KVonGit/1dd7992d6fbed6cfd75ff13e769a6b4a/raw/46bc8ea0aa17a73d7d0147326c7243e89a4cb799/DictFun.aslx \"Click here to check out some code at http://textadventures.co.uk/games/view/j5w1ex6puksylzddbdihwq/dictfun\")\r\n\r\n\r\nhttp://textadventures.co.uk/games/view/j5w1ex6puksylzddbdihwq/dictfun\r\n\r\nI was having WAY too much fun with dictionaries.  \r\n\r\n(I have to improve my dictionary-pimping skills so I can go back to the poker hand thing.  (I just now realized mrangel had two dictionaries going on, and that's why my stuff wasn't working.  (KV sighs and shrugs.)  I'm old.)\r\n\r\n---\r\nMost of the stuff is more easily accomplished using a single list (I've seen it with my own eyes, using the same values), but this was a good learning experience for me. \r\n\r\nSpeaking of that:  \r\n\r\nThanks, mrangel, HK, and Pixie, and everyone else, for teaching me what I know at this point!!!\r\n\r\nYou all are awesome!",
      "EditableFormat": "markdown",
      "HTML": "<p>So, <code>DictionaryItem</code> basically performs a <code>foreach</code> of its own, but returns out of the script when it finds a match?</p>\n<hr>\n<p>Also, check this out:</p>\n<p><a href=\"https://gist.githubusercontent.com/KVonGit/1dd7992d6fbed6cfd75ff13e769a6b4a/raw/46bc8ea0aa17a73d7d0147326c7243e89a4cb799/DictFun.aslx\" title=\"Click here to check out some code at http://textadventures.co.uk/games/view/j5w1ex6puksylzddbdihwq/dictfun\">DictFun.aslx</a></p>\n<p>http://textadventures.co.uk/games/view/j5w1ex6puksylzddbdihwq/dictfun</p>\n<p>I was having WAY too much fun with dictionaries.</p>\n<p>(I have to improve my dictionary-pimping skills so I can go back to the poker hand thing.  (I just now realized mrangel had two dictionaries going on, and that's why my stuff wasn't working.  (KV sighs and shrugs.)  I'm old.)</p>\n<hr>\n<p>Most of the stuff is more easily accomplished using a single list (I've seen it with my own eyes, using the same values), but this was a good learning experience for me.</p>\n<p>Speaking of that:</p>\n<p>Thanks, mrangel, HK, and Pixie, and everyone else, for teaching me what I know at this point!!!</p>\n<p>You all are awesome!</p>\n\n",
      "PostDate": "2017-11-27T16:19:09.0145422Z",
      "LastEditDate": "2017-11-27T16:22:51.9886758Z",
      "link": null
    },
    {
      "PostId": "237896c7-4cb7-412d-af4d-46f955c2794a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So, DictionaryItem basically performs a foreach of its own, but returns out of the script when it finds a match?\r\n\r\nThere's a few ways it could be implemented. The way Perl does it is to store elements by hash of the key, and a list of key-value pairs within each hash bucket; in which case the efficiency of adding or retrieving an element is O(log n). But that method has the disadvantage that `foreach` retrieves the elements in (what looks like) a random order. It's a compromise between memory, speed, and convenience.\r\n\r\nIf the dictionary is stored internally as a list of key-value pairs, then `dictionary add` would have to scan over the whole dictionary to make sure the value doesn't exist, so retrieval and insertion are both O(n). So if your dictionary isn't premade, building the initial reverse dictionary would be O(n^2); while looping over the list checking keys manually will be O(n log n) I think.\r\nSorry, had a stressful day, laptop died, I'm not thinking so clearly. So could be completely wrong about everything.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So, DictionaryItem basically performs a foreach of its own, but returns out of the script when it finds a match?</p>\n</blockquote>\n<p>There's a few ways it could be implemented. The way Perl does it is to store elements by hash of the key, and a list of key-value pairs within each hash bucket; in which case the efficiency of adding or retrieving an element is O(log n). But that method has the disadvantage that <code>foreach</code> retrieves the elements in (what looks like) a random order. It's a compromise between memory, speed, and convenience.</p>\n<p>If the dictionary is stored internally as a list of key-value pairs, then <code>dictionary add</code> would have to scan over the whole dictionary to make sure the value doesn't exist, so retrieval and insertion are both O(n). So if your dictionary isn't premade, building the initial reverse dictionary would be O(n^2); while looping over the list checking keys manually will be O(n log n) I think.<br>\nSorry, had a stressful day, laptop died, I'm not thinking so clearly. So could be completely wrong about everything.</p>\n\n",
      "PostDate": "2017-11-27T20:42:45.8847422Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f85d26a-4a79-438a-8d23-543848c11f03",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would guess Quest dictionaries use C# dictionaries under the hood, which use hash tables according to [here](https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.90).aspx).",
      "EditableFormat": "markdown",
      "HTML": "<p>I would guess Quest dictionaries use C# dictionaries under the hood, which use hash tables according to <a href=\"https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.90).aspx\">here</a>.</p>\n\n",
      "PostDate": "2017-11-27T22:53:55.1400592Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78c28d32-5c71-45a4-8ff5-0eb9989429fa",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "thanks for the info mrangel, and for correcting me, as I'm still trying to understand this type of stuff, sighs, so the information and explanation by you is greatly helpful/appreciated, and again, my apologizes for assuming/stating incorrect things in my post(s).",
      "EditableFormat": "markdown",
      "HTML": "<p>thanks for the info mrangel, and for correcting me, as I'm still trying to understand this type of stuff, sighs, so the information and explanation by you is greatly helpful/appreciated, and again, my apologizes for assuming/stating incorrect things in my post(s).</p>\n\n",
      "PostDate": "2017-11-28T00:12:47.3026356Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "260254f1-4c69-4f2a-a365-dc024b42239f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> retrieval and insertion are both O(n). So if your dictionary isn't premade, building the initial reverse dictionary would be O(n^2); while looping over the list checking keys manually will be O(n log n) I think.\r\n\r\nThat's where I get lost.\r\n\r\nGuess:\r\n\r\n```O``` is the function?\r\n\r\n```(n)``` the amount of time it takes to perform the function?\r\n\r\n```(n^2)``` there are two loops (or iterations) in the function?\r\n\r\n```(n log n)``` uh... huh huh huh...\r\n\r\n---\r\nEDIT:\r\n\r\nDoes [this](https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/ \"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\") lead me astray at any point?\r\n\r\nIf not, I think I get it.\r\n\r\n---\r\nI cheated when I made my last two dictionaries, by the way.\r\n\r\nI made a list, then I wrote a function in the start script that turned that list into a string dictionary.\r\n\r\nThen, I saved the game, opened the save with Notepad++, and copied the the dictionary, pasting it into the actual game.  \r\n\r\nThen, I changed the start script so it made a reverse dictionary, saved, copied and pasted *that* dictionary into the game.\r\n\r\n(It took me longer to type that explanation than it did to make the dictionaries.  Hehehe.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>retrieval and insertion are both O(n). So if your dictionary isn't premade, building the initial reverse dictionary would be O(n^2); while looping over the list checking keys manually will be O(n log n) I think.</p>\n</blockquote>\n<p>That's where I get lost.</p>\n<p>Guess:</p>\n<p><code>O</code> is the function?</p>\n<p><code>(n)</code> the amount of time it takes to perform the function?</p>\n<p><code>(n^2)</code> there are two loops (or iterations) in the function?</p>\n<p><code>(n log n)</code> uh... huh huh huh...</p>\n<hr>\n<p>EDIT:</p>\n<p>Does <a href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\" title=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\">this</a> lead me astray at any point?</p>\n<p>If not, I think I get it.</p>\n<hr>\n<p>I cheated when I made my last two dictionaries, by the way.</p>\n<p>I made a list, then I wrote a function in the start script that turned that list into a string dictionary.</p>\n<p>Then, I saved the game, opened the save with Notepad++, and copied the the dictionary, pasting it into the actual game.</p>\n<p>Then, I changed the start script so it made a reverse dictionary, saved, copied and pasted <em>that</em> dictionary into the game.</p>\n<p>(It took me longer to type that explanation than it did to make the dictionaries.  Hehehe.)</p>\n\n",
      "PostDate": "2017-11-28T00:35:51.7318511Z",
      "LastEditDate": "2017-11-28T00:39:53.9770445Z",
      "link": null
    },
    {
      "PostId": "91bb590f-c222-4ad4-acc2-06250bda6353",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'O' just means the format of the equation/formula, called 'Big O notation'\r\n\r\nthe rest is the formula/equation, depending on the speed and quantity of the operations\r\n\r\nusually any coefficients are insignificant, so they're ignored (not shown in the Big O notation)\r\n\r\nhttps://en.wikipedia.org/wiki/Big_O_notation\r\n\r\nhttps://en.wikipedia.org/wiki/Analysis_of_algorithms\r\n\r\nI'm still trying to learn algorithm analysis...\r\n\r\n--------\r\n\r\n@ KV:\r\n\r\nthat looks like a good link for an intro to this type of stuff.",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'O' just means the format of the equation/formula, called 'Big O notation'</p>\n<p>the rest is the formula/equation, depending on the speed and quantity of the operations</p>\n<p>usually any coefficients are insignificant, so they're ignored (not shown in the Big O notation)</p>\n<p>https://en.wikipedia.org/wiki/Big_O_notation</p>\n<p>https://en.wikipedia.org/wiki/Analysis_of_algorithms</p>\n<p>I'm still trying to learn algorithm analysis...</p>\n<hr>\n<p>@ KV:</p>\n<p>that looks like a good link for an intro to this type of stuff.</p>\n\n",
      "PostDate": "2017-11-28T11:09:03.5678415Z",
      "LastEditDate": "2017-11-28T11:12:19.9143584Z",
      "link": null
    }
  ]
}
