{
  "Topic": {
    "TopicId": "6h_1ofpf6u_vzjf2tyzm3a",
    "ForumId": "10",
    "Title": "End Game when Attribute Equals 10",
    "LastUpdated": "2017-09-03T18:42:08.7966565Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "889d3f8a-3824-4895-98bd-c905b666f789",
      "UserId": 320736,
      "Username": "Jador",
      "AvatarUrl": "https://secure.gravatar.com/avatar/64777628764a68532923e3c8e4946c4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm new to Quest, and I haven't learned enough yet to use the code editor. \r\n\r\nI'm trying to set an Attribute, then check the attribute each turn to see if it equals 10.  If it equals 10, the game ends.  If it does not, nothing happens.  Throughout the game, certain actions cause the Attribute to increase (Counter +1).\r\n\r\nHow do I set up such a script, and where should I put it?  Under Player?  Under Game?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm new to Quest, and I haven't learned enough yet to use the code editor.</p>\n<p>I'm trying to set an Attribute, then check the attribute each turn to see if it equals 10.  If it equals 10, the game ends.  If it does not, nothing happens.  Throughout the game, certain actions cause the Attribute to increase (Counter +1).</p>\n<p>How do I set up such a script, and where should I put it?  Under Player?  Under Game?</p>\n\n",
      "PostDate": "2017-09-03T18:42:08.7966565Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fb96e699-228b-4715-a54a-966583924a3e",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi Jador,\r\nThe script checking if the attribute has reached 10, should be put under the game object. On the tabs of the game object, you'll see one marked 'scripts'. At the bottom of the page, is a box maked 'turn scripts'. Click 'Add' and paste in/put in something like this: (you will need to give the turn script a name, and tick the box 'enabled when game starts'\r\n```\r\nif (player.attributename = 10) {\r\n  finish\r\n}\r\n```\r\nBasically after every turn the player makes in the game the attribute is checked and if true, ie. 10 is reached, it follows the instructions. I assume you will be putting the attribute on the player. How you increase the attribute is of course entirely up to you.\r\nHope this helps.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi Jador,<br>\nThe script checking if the attribute has reached 10, should be put under the game object. On the tabs of the game object, you'll see one marked 'scripts'. At the bottom of the page, is a box maked 'turn scripts'. Click 'Add' and paste in/put in something like this: (you will need to give the turn script a name, and tick the box 'enabled when game starts'</p>\n<pre><code>if (player.attributename = 10) {\n  finish\n}\n</code></pre>\n<p>Basically after every turn the player makes in the game the attribute is checked and if true, ie. 10 is reached, it follows the instructions. I assume you will be putting the attribute on the player. How you increase the attribute is of course entirely up to you.<br>\nHope this helps.</p>\n\n",
      "PostDate": "2017-09-03T19:50:28.9837377Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fd5434ec-7ee3-4e8f-a38e-15e416ee4e2f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-----------------------\r\n\r\nthe 'bread and butter' of quest's scripting/coding is Attribute (one of three, keeping this simple, types of VARIABLES in quest) and the 'if' Script usage, as, especially when used together, these two SUPER Scripts, let's you do 90% of everything that you want to do within your game. This is not easy to learn for people completely new to coding, and is a huge jump from just learning the basics of using quest's GUI/Editor via going through the 'tutorial' on the quest doc site, but you get the largest 'bang for your buck' in learning Attribute and the 'if' Script usage, again, doing so enables you to do 90% of everything that you want to do in your game. Learning more advanced coding/scripting is diminishing returns, as we're left with only 10% of whatever else you want to do within your game. Learning to work with Functions, iteration, looping, recursion, lists, and dictionaries, is 5% to 9%, leaving you with only 5% to 1% remaining things you might want to put into your game. So, you can see how the diminishing returns happens extremely quickly. The most important thing to learn is Attribute and the 'if' Script usage, as this opens up 90% of everything that you want to do within your game. But, this is not going to be easy, though it's vital if you want to make a decent game.\r\n\r\n-------------------------\r\n\r\nQuest has 3 (keeping this simple) types of VARIABLES:\r\n\r\nVARIABLES:\r\n-> Variables: local/temporary VARIABLES (as soon as the parent/container Element's scripting is done, the Variable is destroyed, so in other words, it only exists within its parent/container Element's scripting, and thus why it's \"local\", as a Variable can NOT be used anywhere/everyhwere else, whereas an Attribute CAN be used anywhere/everwhere)\r\n-> Attributes: global/permanent VARIABLES (so long as the parent/container Object exists or still exists)\r\n-> Parameters: deals with Functions and Commands: basically a way of 'transfering' data to a Function/Command or from one Function to another Function\r\n\r\na Variable's scripting syntax:\r\n\r\nNAME_OF_Variable = VALUE_OR_EXPRESSION\r\n\r\nexamples:\r\n\r\nresult = \"hi\"\r\nhandled = false\r\ncount = 0\r\n\r\ndamage = DiceRoll (\"3d6\") + GetRandomInt (0, 10)\r\n\r\nAn Attribute's scripting syntax:\r\n\r\nNAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION\r\n// the 'NAME_OF_OBJECT' has to be an actual existing Object, of course\r\n\r\nexamples:\r\n\r\ngame.state = 0 // the special 'game' Game Settings Object is required by quest for your game to work, so it has to exist, lol.\r\nplayer.alias = \"HK\" // 'player' has to be an actual existing Object, quest requires there to be a Player Object within a Room Object for your game to work, the 'player' Player Object is the default Player Object, so usually it exists, but you can change it's name, so you may not have a 'player' Player Object, but whatever you re-named it to, instead, and thus you'd use that new name instead of 'player'.\r\nplayer.strength = 100\r\norc.dead = false // 'orc' has to be an actual existing Object\r\nkatana.damage = 50 // 'katana' has to be an actual existing Object\r\nplayer.weapon = katana // 'katana' (and of course 'player' too) has to be an actual existing Object\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// conceptually (math's 'order of operations' apply):\r\n// player.damage = katana.damage + katana.damage * player.strength / 100\r\n// player.damage = 50 + 50 * 100 / 100\r\n// player.damage = 50 + (50 * 1 or 5000 / 100) // depends on whether the code's order of operations is read from left to right or right to left (I'm not sure which is it, and am too lazy --- and actually not sure how --- to check it, lol)\r\n// player.damage = 50 + (50)\r\n// player.damage = 100\r\n\r\n------------------\r\n\r\nbesides learning the quest's scripting syntax, the other hard part is to train your brain to think in terms of programming/'if' logic and design, which is not easy, it takes years and may programming classes (lol) to learn various programming designs and logic.\r\n\r\n------------------------\r\n\r\nhere's a link/guide on using these two super scripts, it's a bit more code focused and technical, but I do show how to do this stuff via the GUI/Editor as well within it:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (you can scroll down to the 'two super script' section, but I'd recommend you look at the top part too, as it gives some of the basics of understanding coding and of quest's code structure)\r\n\r\nThe two SUPER scripts:\r\n\r\n1. Attribute (data) usage: run as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> set variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION\r\n2. the 'if' Script (actions/events/behavior) usage: run as script -> add new script -> 'scripts' section/category -> 'if' Script -> if [EXPRESSION] VALUE_OR_EXPRESSION\r\n\r\n-----------\r\n\r\nask if you got any questions or need any help with anything\r\n\r\n-----------\r\n\r\ndesign logic:\r\n\r\nchecking (the 'if' Script) an Attribute, ca be done 3 methods/wheres/whens:\r\n\r\n1. specific checking within a specific location/moment: NOT constantly checking though\r\n2. Turnscripts/Timers (local:specific rooms, or global: any/every room): constantly checking\r\n3. the special 'changedNAME_OF_ATTRIBUTE' Script Attribute: checking upon the Attribute's Value changing, its scripting is activated. (internally, it has to be constantly checking, for it to know when the Attribute's Value changes)\r\n\r\n-----------\r\n\r\nalso, here's a step by step walkthrough demo/sample game that you create, teaching you Attribute usage:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375\r\n\r\nit doesn't get into the 'if' Script Attribute usage though\r\n\r\n------------------\r\n\r\nhere's an example game (of/for/on your OP topic) for you:\r\n\r\n1. (hopefully you can/have download/ed and install/ed the quest desktop/off-line version onto your computer)\r\n2. create a new 'Text Adventure' game\r\n3. name it whatever you want and save it somewhere you can find it (such as onto your desktop)\r\n4. close out of it\r\n5. right click on it (your newly created game file: 'xxx.aslx'), and choose to open it up with a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc)\r\n\r\nwhat you're seeing is your entire game code (in this case, it's the/a default new game code, of the english language version of quest), which will hopefully look something like this (not sure if Pixie's current version changes how it looks, as I'm using an older version of quest):\r\n\r\n```\r\n<asl version=\"550\">\r\n  \r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"example_new_game\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\nthe GAME OBJECT is the 'asl' tag block:\r\n\r\n```\r\n<asl version=\"550\"> <!-- This is the beginning 'asl' tag, which is also known as its signature/header, as it often has special Attributes within it for the tag block itself -->\r\n\r\n  <!-- YOUR ENTIRE MASS OF YOUR GAME CODE/CONTENT MUST BE HERE WITHIN THE/THIS 'ASL' TAG BLOCK -->\r\n\r\n</asl> <!-- This is the ending 'asl' tag (make such you got the '/' in it and in the right place) -->\r\n```\r\n\r\nabout the quest version:\r\n\r\nthe current version of quest is v570 (or is it v580?, meh), but v550, v560, and v570 will all work with the current version of quest.\r\nto see your quest version, in the GUI/Editor, at the menu bar at the top, click either the 'help -> about quest' or 'about', you'll see some long version, for example: quest version  5.7.8.344838293829832983, you only care about the 2 leftmost digits (5.7.x.xxx), and the 3rd leftmost digit (x.x.8.xx) doesn't matter, as you use '0' for it, and that's your 3 digit version number: 570 (from 5.7.8.xxx):\r\n\r\n```\r\n<asl version=\"570\">\r\n</asl>\r\n```\r\n\r\nthe default (english language version) quest engine library (code) files:\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n</asl>\r\n```\r\n\r\nabout library files:\r\n\r\nthe library file name+extension (same as a game file's): xxx.aslx\r\n\r\nthe library files have to be in the same location/folder as your game file (xxx.aslx), in order for your game file to be able to find and use them\r\n\r\n```\r\n<library>\r\n  <!-- code -->\r\n</library>\r\n```\r\n\r\na library file is just code, which is added to and used with/for your game, think of it as like a 'mod, patch, and/or xpac', it can be as simple as adding a single Object to your game, or as complex as being an engine file, yes, quest is powerful, it's made up of library files, so you can create your own unique quest engine, if you're a good programmer and you know quest's code well.\r\n\r\nExample of (one of) the most simple type(s) of library file(s):\r\n\r\nexample_dragon_library_file.aslx\r\n\r\n```\r\n<library>\r\n\r\n  <object name=\"dragon\">\r\n    <inherit name=\"editor_object\" />\r\n  </object>\r\n\r\n</library>\r\n```\r\n\r\nand it being added to a game file:\r\n\r\nexample_game_file.aslx\r\n\r\n```\r\n<asl version=\"550\">\r\n  \r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <!--\r\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  PUT ALL LIBRARY FILE REFERENCES HERE (under the default engine library file reference tag lines and above the 'game' Game Settings Object tag block):\r\n  -->\r\n\r\n  <included ref=\"example_dragon_library_file.aslx\" />\r\n\r\n  <!--\r\n  --------------------------------------------------------------------------------------------------------------------------------------\r\n  -->\r\n\r\n  <game name=\"example_new_game\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\nwhich is the exact same as if you just did this (as this is what is actually done by the programming):\r\n\r\n(when the game is run, it must first be: built-up/'loaded'/'initialized', it first adds the library files' code to the game, from top to bottom, and then it adds the rest of the code within the game file itself to the game. So this is why the engine library files have to be at the top and any custom library files below them, but above the 'game' Game Settings Object --- to be safe anyways, and the order of library files matter, also you have to worry about any compatibility issues, on top of the correct order of library files, if you ever worked with 'mods' in games, you're aware of compatibility issues with quest library files, lol)\r\n\r\nexample_game_file.aslx\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"example_new_game\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <object name=\"player\">\r\n\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n  <object name=\"dragon\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n  </object>\r\n\r\n</asl>\r\n```\r\n\r\nanyways... back to the default new game file:\r\n\r\nnext, after the library files, is a special Object, the 'game' Game Settings Object:\r\n\r\nthis special 'game' Game Settings Object (NOT to be confused with the actual 'asl' GAME OBJECT itself), enables/has global/game-wide controls/settings/attributes, the 'start' Script Attribute (this is the first thing that is done when the game starts: good for, examples: character creation, game introduction, etc etc etc), and other various like-settings (author, first published, version --- version history, category, description, difficulty, cruelty, sub-title, etc) info for a person to look at to see if they're interested in playing your game or not, online.\r\n\r\nthe 'game' Game Settings Object tag block in code is what you see as the 'game' Game Settings Object in the GUI/Editor:\r\n\r\nGUI/Editor's left side's 'tree of stuff':\r\n\r\nOBJECTS\r\n**-> Game -> (after clicking/highlight it) on right side: its various tabs (and its selected tab page): setup, scripts, etc etc, attributes**\r\n->-> Verbs\r\n->-> Commands\r\n-> room\r\n->-> player\r\nFunctions\r\nTimers\r\nAdvanced\r\n-> Libraries\r\n-> Object Types\r\n-> JS\r\n.\r\n.\r\n.\r\nFilter -> Show Library Elements -> (toggle on/off)\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"NAME_OF_YOUR_GAME\">\r\n\r\n    <!--\r\n    These Attributes are for being shown information online (using quest's servers/site), for people to know about your game, in whether they want to play it or not:\r\n    -->\r\n\r\n    <author>NAME_OF_YOU_THE_AUTHOR/CREATOR/OWNER_OF_THE_GAME</author>\r\n    <version>YOUR_VERSION_HISTORY_AS_A_DECIMAL_NUMBER</version>\r\n    <firstpublished>YEAR_THAT_YOU_CREATED/PUBLISHED_YOUR_GAME</firstplished>\r\n    <category>CATEGORY_OF_YOUR_GAME</category\r\n    <subtitle>SUBTITLE_FOR_YOUR_GAME</subtitle>\r\n    <description>DESCRIPTION_FOR_YOUR_GAME</description>\r\n    <!-- etc etc etc Attributes -->\r\n\r\n    <!--\r\n    the 'start' Script Attribute (this is the first thing done when your game starts):\r\n    -->\r\n\r\n    <attr name=\"start\" type=\"script\">\r\n      msg (\"hi, welcome to my game, I hope you enjoy it!\")\r\n    </attr>\r\n\r\n    <!-- whatever other various in-game global/game-wide settings/controls/attributes -->\r\n\r\n    <!-- whatever custom (self created/added) Attributes -->\r\n\r\n  </game>\r\n\r\n</asl>\r\n```\r\n\r\nand, after the 'game' Game Settings Object, whatever Elements you want, the default 'room' Room Object and 'player' Player Object, and my various examples of added/created in-game-use Elements, such as: Objects, Exits, Commands, Verbs, Turnscripts, Timers, Object Types):\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n <game name=\"example_new_game\">\r\n\r\n    <gameid>SOME_RANDOMLY_GENERATED_HASH_STRING</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n\r\n    <attr name=\"start\" type=\"script\">\r\n      greeting_function\r\n      view_info_function (game.pov)\r\n      set_player_alias_function (game.pov)\r\n      player.strength_integer_attribute = input_and_return_strength_function\r\n      view_info_function (game.pov)\r\n      view_info_function (orc_1)\r\n    </attr>\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n  </object>\r\n\r\n  <object name=\"player\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"editor_player\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n    <attr name=\"alias\" type=\"string\">unknown</attr>\r\n    <attr name=\"strength_integer_attribute\" type=\"int\">-1</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"orc_1\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n    <attr name=\"alias\" type=\"string\">orc</attr>\r\n\r\n    <attr name=\"strength_integer_attribute\" type=\"int\">25</attr>\r\n\r\n  </object>\r\n\r\n  <function name=\"greeting_function\">\r\n    msg (\"Greetings!\")\r\n  </function>\r\n\r\n  <function name=\"view_info_function\" parameters=\"object_parameter\">\r\n    msg (object_parameter.name + \"'s Alias: \" + object_parameter.alias)\r\n    msg (object_parameter.alias + \"'s Strength: \" + object_parameter.strength_integer_attribute)\r\n  </function>\r\n\r\n  <function name=\"set_player_alias_function\" parameters=\"player_object_parameter\">\r\n    msg (\"Name?\")\r\n    get input {\r\n      player_object_parameter.alias = result\r\n    }\r\n  </function>\r\n\r\n  <function name=\"input_and_return_strength_function\" type=\"int\">\r\n    <![CDATA[\r\n      msg (\"Strength? (0 to 100)\")\r\n      get input {\r\n        if (IsInt (result)) {\r\n          input_integer_variable = ToInt (result)\r\n          if (input_integer_variable < 0 or input_integer_variable > 100) {\r\n            msg (\"Wrong input (has to be: 0 to 100), try again\")\r\n            input_and_return_strength_function\r\n          } else {\r\n            return (input_integer_variable)\r\n          }\r\n        } else {\r\n          msg (\"Wrong input (type in a number), try again\")\r\n          input_and_return_strength_function\r\n        }\r\n      }\r\n    ]]>\r\n  </function>\r\n\r\n  <!--\r\n  To use the Command below during game play:\r\n  Type into the input/command box during game play, either:\r\n  view player\r\n  view orc_1\r\n  view blahblahblah\r\n  -->\r\n\r\n  <command name=\"view_info_command\">\r\n    <pattern>view #object_parameter#</pattern>\r\n    <script>\r\n      view_info_function (object_parameter)\r\n    </script>\r\n    <unresolved>Wrong input, you need to input an Object that exists within the Room you're currently in</unresolved>\r\n  </command>\r\n\r\n</asl>\r\n```\r\n\r\n6. highlight ALL of it and delete ALL of it\r\n7. highlight, copy, and paste my code below into it, and then save it\r\n8. close out of it\r\n9. open it up and study it in the GUI/Editor and try playing/testing/seeing it out too in action\r\n\r\n(err, taking a break, tired now after trying to explain the quest coding structure. I'll hopefully get around to coding in a sample game for you for what you want to do, if you've not already figured out how to do it)",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>the 'bread and butter' of quest's scripting/coding is Attribute (one of three, keeping this simple, types of VARIABLES in quest) and the 'if' Script usage, as, especially when used together, these two SUPER Scripts, let's you do 90% of everything that you want to do within your game. This is not easy to learn for people completely new to coding, and is a huge jump from just learning the basics of using quest's GUI/Editor via going through the 'tutorial' on the quest doc site, but you get the largest 'bang for your buck' in learning Attribute and the 'if' Script usage, again, doing so enables you to do 90% of everything that you want to do in your game. Learning more advanced coding/scripting is diminishing returns, as we're left with only 10% of whatever else you want to do within your game. Learning to work with Functions, iteration, looping, recursion, lists, and dictionaries, is 5% to 9%, leaving you with only 5% to 1% remaining things you might want to put into your game. So, you can see how the diminishing returns happens extremely quickly. The most important thing to learn is Attribute and the 'if' Script usage, as this opens up 90% of everything that you want to do within your game. But, this is not going to be easy, though it's vital if you want to make a decent game.</p>\n<hr>\n<p>Quest has 3 (keeping this simple) types of VARIABLES:</p>\n<p>VARIABLES:<br>\n-&gt; Variables: local/temporary VARIABLES (as soon as the parent/container Element's scripting is done, the Variable is destroyed, so in other words, it only exists within its parent/container Element's scripting, and thus why it's \"local\", as a Variable can NOT be used anywhere/everyhwere else, whereas an Attribute CAN be used anywhere/everwhere)<br>\n-&gt; Attributes: global/permanent VARIABLES (so long as the parent/container Object exists or still exists)<br>\n-&gt; Parameters: deals with Functions and Commands: basically a way of 'transfering' data to a Function/Command or from one Function to another Function</p>\n<p>a Variable's scripting syntax:</p>\n<p>NAME_OF_Variable = VALUE_OR_EXPRESSION</p>\n<p>examples:</p>\n<p>result = \"hi\"<br>\nhandled = false<br>\ncount = 0</p>\n<p>damage = DiceRoll (\"3d6\") + GetRandomInt (0, 10)</p>\n<p>An Attribute's scripting syntax:</p>\n<p>NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION<br>\n// the 'NAME_OF_OBJECT' has to be an actual existing Object, of course</p>\n<p>examples:</p>\n<p>game.state = 0 // the special 'game' Game Settings Object is required by quest for your game to work, so it has to exist, lol.<br>\nplayer.alias = \"HK\" // 'player' has to be an actual existing Object, quest requires there to be a Player Object within a Room Object for your game to work, the 'player' Player Object is the default Player Object, so usually it exists, but you can change it's name, so you may not have a 'player' Player Object, but whatever you re-named it to, instead, and thus you'd use that new name instead of 'player'.<br>\nplayer.strength = 100<br>\norc.dead = false // 'orc' has to be an actual existing Object<br>\nkatana.damage = 50 // 'katana' has to be an actual existing Object<br>\nplayer.weapon = katana // 'katana' (and of course 'player' too) has to be an actual existing Object</p>\n<p>player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// conceptually (math's 'order of operations' apply):<br>\n// player.damage = katana.damage + katana.damage * player.strength / 100<br>\n// player.damage = 50 + 50 * 100 / 100<br>\n// player.damage = 50 + (50 * 1 or 5000 / 100) // depends on whether the code's order of operations is read from left to right or right to left (I'm not sure which is it, and am too lazy --- and actually not sure how --- to check it, lol)<br>\n// player.damage = 50 + (50)<br>\n// player.damage = 100</p>\n<hr>\n<p>besides learning the quest's scripting syntax, the other hard part is to train your brain to think in terms of programming/'if' logic and design, which is not easy, it takes years and may programming classes (lol) to learn various programming designs and logic.</p>\n<hr>\n<p>here's a link/guide on using these two super scripts, it's a bit more code focused and technical, but I do show how to do this stuff via the GUI/Editor as well within it:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk (you can scroll down to the 'two super script' section, but I'd recommend you look at the top part too, as it gives some of the basics of understanding coding and of quest's code structure)</p>\n<p>The two SUPER scripts:</p>\n<ol>\n<li>Attribute (data) usage: run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; set variable NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = [EXPRESSION] VALUE_OR_EXPRESSION</li>\n<li>the 'if' Script (actions/events/behavior) usage: run as script -&gt; add new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; if [EXPRESSION] VALUE_OR_EXPRESSION</li>\n</ol>\n<hr>\n<p>ask if you got any questions or need any help with anything</p>\n<hr>\n<p>design logic:</p>\n<p>checking (the 'if' Script) an Attribute, ca be done 3 methods/wheres/whens:</p>\n<ol>\n<li>specific checking within a specific location/moment: NOT constantly checking though</li>\n<li>Turnscripts/Timers (local:specific rooms, or global: any/every room): constantly checking</li>\n<li>the special 'changedNAME_OF_ATTRIBUTE' Script Attribute: checking upon the Attribute's Value changing, its scripting is activated. (internally, it has to be constantly checking, for it to know when the Attribute's Value changes)</li>\n</ol>\n<hr>\n<p>also, here's a step by step walkthrough demo/sample game that you create, teaching you Attribute usage:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/5387/i-really-need-help#37375</p>\n<p>it doesn't get into the 'if' Script Attribute usage though</p>\n<hr>\n<p>here's an example game (of/for/on your OP topic) for you:</p>\n<ol>\n<li>(hopefully you can/have download/ed and install/ed the quest desktop/off-line version onto your computer)</li>\n<li>create a new 'Text Adventure' game</li>\n<li>name it whatever you want and save it somewhere you can find it (such as onto your desktop)</li>\n<li>close out of it</li>\n<li>right click on it (your newly created game file: 'xxx.aslx'), and choose to open it up with a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc)</li>\n</ol>\n<p>what you're seeing is your entire game code (in this case, it's the/a default new game code, of the english language version of quest), which will hopefully look something like this (not sure if Pixie's current version changes how it looks, as I'm using an older version of quest):</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  \n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"example_new_game\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>the GAME OBJECT is the 'asl' tag block:</p>\n<pre><code>&lt;asl version=\"550\"&gt; &lt;!-- This is the beginning 'asl' tag, which is also known as its signature/header, as it often has special Attributes within it for the tag block itself --&gt;\n\n  &lt;!-- YOUR ENTIRE MASS OF YOUR GAME CODE/CONTENT MUST BE HERE WITHIN THE/THIS 'ASL' TAG BLOCK --&gt;\n\n&lt;/asl&gt; &lt;!-- This is the ending 'asl' tag (make such you got the '/' in it and in the right place) --&gt;\n</code></pre>\n<p>about the quest version:</p>\n<p>the current version of quest is v570 (or is it v580?, meh), but v550, v560, and v570 will all work with the current version of quest.<br>\nto see your quest version, in the GUI/Editor, at the menu bar at the top, click either the 'help -&gt; about quest' or 'about', you'll see some long version, for example: quest version  5.7.8.344838293829832983, you only care about the 2 leftmost digits (5.7.x.xxx), and the 3rd leftmost digit (x.x.8.xx) doesn't matter, as you use '0' for it, and that's your 3 digit version number: 570 (from 5.7.8.xxx):</p>\n<pre><code>&lt;asl version=\"570\"&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>the default (english language version) quest engine library (code) files:</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>about library files:</p>\n<p>the library file name+extension (same as a game file's): xxx.aslx</p>\n<p>the library files have to be in the same location/folder as your game file (xxx.aslx), in order for your game file to be able to find and use them</p>\n<pre><code>&lt;library&gt;\n  &lt;!-- code --&gt;\n&lt;/library&gt;\n</code></pre>\n<p>a library file is just code, which is added to and used with/for your game, think of it as like a 'mod, patch, and/or xpac', it can be as simple as adding a single Object to your game, or as complex as being an engine file, yes, quest is powerful, it's made up of library files, so you can create your own unique quest engine, if you're a good programmer and you know quest's code well.</p>\n<p>Example of (one of) the most simple type(s) of library file(s):</p>\n<p>example_dragon_library_file.aslx</p>\n<pre><code>&lt;library&gt;\n\n  &lt;object name=\"dragon\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n  &lt;/object&gt;\n\n&lt;/library&gt;\n</code></pre>\n<p>and it being added to a game file:</p>\n<p>example_game_file.aslx</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  \n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;!--\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n  PUT ALL LIBRARY FILE REFERENCES HERE (under the default engine library file reference tag lines and above the 'game' Game Settings Object tag block):\n  --&gt;\n\n  &lt;included ref=\"example_dragon_library_file.aslx\" /&gt;\n\n  &lt;!--\n  --------------------------------------------------------------------------------------------------------------------------------------\n  --&gt;\n\n  &lt;game name=\"example_new_game\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>which is the exact same as if you just did this (as this is what is actually done by the programming):</p>\n<p>(when the game is run, it must first be: built-up/'loaded'/'initialized', it first adds the library files' code to the game, from top to bottom, and then it adds the rest of the code within the game file itself to the game. So this is why the engine library files have to be at the top and any custom library files below them, but above the 'game' Game Settings Object --- to be safe anyways, and the order of library files matter, also you have to worry about any compatibility issues, on top of the correct order of library files, if you ever worked with 'mods' in games, you're aware of compatibility issues with quest library files, lol)</p>\n<p>example_game_file.aslx</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"example_new_game\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;object name=\"player\"&gt;\n\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"dragon\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;/object&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>anyways... back to the default new game file:</p>\n<p>next, after the library files, is a special Object, the 'game' Game Settings Object:</p>\n<p>this special 'game' Game Settings Object (NOT to be confused with the actual 'asl' GAME OBJECT itself), enables/has global/game-wide controls/settings/attributes, the 'start' Script Attribute (this is the first thing that is done when the game starts: good for, examples: character creation, game introduction, etc etc etc), and other various like-settings (author, first published, version --- version history, category, description, difficulty, cruelty, sub-title, etc) info for a person to look at to see if they're interested in playing your game or not, online.</p>\n<p>the 'game' Game Settings Object tag block in code is what you see as the 'game' Game Settings Object in the GUI/Editor:</p>\n<p>GUI/Editor's left side's 'tree of stuff':</p>\n<p>OBJECTS<br>\n<strong>-&gt; Game -&gt; (after clicking/highlight it) on right side: its various tabs (and its selected tab page): setup, scripts, etc etc, attributes</strong><br>\n-&gt;-&gt; Verbs<br>\n-&gt;-&gt; Commands<br>\n-&gt; room<br>\n-&gt;-&gt; player<br>\nFunctions<br>\nTimers<br>\nAdvanced<br>\n-&gt; Libraries<br>\n-&gt; Object Types<br>\n-&gt; JS<br>\n.<br>\n.<br>\n.<br>\nFilter -&gt; Show Library Elements -&gt; (toggle on/off)</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"NAME_OF_YOUR_GAME\"&gt;\n\n    &lt;!--\n    These Attributes are for being shown information online (using quest's servers/site), for people to know about your game, in whether they want to play it or not:\n    --&gt;\n\n    &lt;author&gt;NAME_OF_YOU_THE_AUTHOR/CREATOR/OWNER_OF_THE_GAME&lt;/author&gt;\n    &lt;version&gt;YOUR_VERSION_HISTORY_AS_A_DECIMAL_NUMBER&lt;/version&gt;\n    &lt;firstpublished&gt;YEAR_THAT_YOU_CREATED/PUBLISHED_YOUR_GAME&lt;/firstplished&gt;\n    &lt;category&gt;CATEGORY_OF_YOUR_GAME&lt;/category\n    &lt;subtitle&gt;SUBTITLE_FOR_YOUR_GAME&lt;/subtitle&gt;\n    &lt;description&gt;DESCRIPTION_FOR_YOUR_GAME&lt;/description&gt;\n    &lt;!-- etc etc etc Attributes --&gt;\n\n    &lt;!--\n    the 'start' Script Attribute (this is the first thing done when your game starts):\n    --&gt;\n\n    &lt;attr name=\"start\" type=\"script\"&gt;\n      msg (\"hi, welcome to my game, I hope you enjoy it!\")\n    &lt;/attr&gt;\n\n    &lt;!-- whatever other various in-game global/game-wide settings/controls/attributes --&gt;\n\n    &lt;!-- whatever custom (self created/added) Attributes --&gt;\n\n  &lt;/game&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<p>and, after the 'game' Game Settings Object, whatever Elements you want, the default 'room' Room Object and 'player' Player Object, and my various examples of added/created in-game-use Elements, such as: Objects, Exits, Commands, Verbs, Turnscripts, Timers, Object Types):</p>\n<p>http://docs.textadventures.co.uk/quest/elements/</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n &lt;game name=\"example_new_game\"&gt;\n\n    &lt;gameid&gt;SOME_RANDOMLY_GENERATED_HASH_STRING&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n\n    &lt;attr name=\"start\" type=\"script\"&gt;\n      greeting_function\n      view_info_function (game.pov)\n      set_player_alias_function (game.pov)\n      player.strength_integer_attribute = input_and_return_strength_function\n      view_info_function (game.pov)\n      view_info_function (orc_1)\n    &lt;/attr&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"player\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n    &lt;attr name=\"alias\" type=\"string\"&gt;unknown&lt;/attr&gt;\n    &lt;attr name=\"strength_integer_attribute\" type=\"int\"&gt;-1&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"orc_1\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n    &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n\n    &lt;attr name=\"strength_integer_attribute\" type=\"int\"&gt;25&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;function name=\"greeting_function\"&gt;\n    msg (\"Greetings!\")\n  &lt;/function&gt;\n\n  &lt;function name=\"view_info_function\" parameters=\"object_parameter\"&gt;\n    msg (object_parameter.name + \"'s Alias: \" + object_parameter.alias)\n    msg (object_parameter.alias + \"'s Strength: \" + object_parameter.strength_integer_attribute)\n  &lt;/function&gt;\n\n  &lt;function name=\"set_player_alias_function\" parameters=\"player_object_parameter\"&gt;\n    msg (\"Name?\")\n    get input {\n      player_object_parameter.alias = result\n    }\n  &lt;/function&gt;\n\n  &lt;function name=\"input_and_return_strength_function\" type=\"int\"&gt;\n    &lt;![CDATA[\n      msg (\"Strength? (0 to 100)\")\n      get input {\n        if (IsInt (result)) {\n          input_integer_variable = ToInt (result)\n          if (input_integer_variable &lt; 0 or input_integer_variable &gt; 100) {\n            msg (\"Wrong input (has to be: 0 to 100), try again\")\n            input_and_return_strength_function\n          } else {\n            return (input_integer_variable)\n          }\n        } else {\n          msg (\"Wrong input (type in a number), try again\")\n          input_and_return_strength_function\n        }\n      }\n    ]]&gt;\n  &lt;/function&gt;\n\n  &lt;!--\n  To use the Command below during game play:\n  Type into the input/command box during game play, either:\n  view player\n  view orc_1\n  view blahblahblah\n  --&gt;\n\n  &lt;command name=\"view_info_command\"&gt;\n    &lt;pattern&gt;view #object_parameter#&lt;/pattern&gt;\n    &lt;script&gt;\n      view_info_function (object_parameter)\n    &lt;/script&gt;\n    &lt;unresolved&gt;Wrong input, you need to input an Object that exists within the Room you're currently in&lt;/unresolved&gt;\n  &lt;/command&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<ol start=\"6\">\n<li>highlight ALL of it and delete ALL of it</li>\n<li>highlight, copy, and paste my code below into it, and then save it</li>\n<li>close out of it</li>\n<li>open it up and study it in the GUI/Editor and try playing/testing/seeing it out too in action</li>\n</ol>\n<p>(err, taking a break, tired now after trying to explain the quest coding structure. I'll hopefully get around to coding in a sample game for you for what you want to do, if you've not already figured out how to do it)</p>\n\n",
      "PostDate": "2017-09-03T22:07:08.8162406Z",
      "LastEditDate": "2017-09-03T22:41:33.8992587Z",
      "link": null
    },
    {
      "PostId": "5b1cf3f8-912c-4594-a49a-796577d101d9",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What Agon suggests makes sense.\r\n\r\nIf I were to do it, here is what I would do.  Keep in mind, I have no idea what causes the counter to increase, although I would image it is some significant event.\r\n\r\nI would:\r\n1.   add an object to the game and call it something like 'countdown'.  \r\n2.  Set it as invisible.  Just untick the visible box.\r\n3.  Go to the 'attributes' tab of the object 'countdown'.\r\n4.  Add an attribute.  Name it 'countdowncounter'.  Choose an integer attribute and give it the value of 0.\r\n5.  Click the add change script button.\r\n6.  Here, place an IF script and select 'object attribute equals'.\r\n7.  Choose object 'countdown', attribute 'countdowncounter', and set it equal to 10.\r\n8.  In the THEN part of the script you can add a script to 'Finish Game'.  In the code below, I also added a suitable message.\r\n9.  In the ELSE IFs of this same script, select what you want to happen for each significant step toward 10.  ie. Repeat step #7, but just set it equal to whatever number you please.  In the code below, I set did examples for 1 time and 5 times and 10 times.\r\n10.  For whatever event triggers the counter to increase, add a 'set a variable or attribute' script. \r\n11.  In this script, type your 'object name.object name attribute' in the first box, leave it set as an expression, and type your 'object name.object name attribute +1' in the last box.  This example would be:  Set variable countdown.countdowncounter = expression countdown.countdowncounter +1\r\n\r\nBelow is a working example if you want to copy-paste it in a new game to see how it works.\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Object attribute equals demo\">\r\n    <gameid>e34323e9-3172-4e2e-8b6f-1e41a5c53272</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <object name=\"countdown\">\r\n      <inherit name=\"editor_object\" />\r\n      <visible type=\"boolean\">false</visible>\r\n      <countdowncounter type=\"int\">0</countdowncounter>\r\n      <changedcountdowncounter type=\"script\">\r\n        if (countdown.countdowncounter = 10) {\r\n          msg (\"You have pushed the button of doom too many times! Your world explodes.\")\r\n          finish\r\n        }\r\n        else if (countdown.countdowncounter = 5) {\r\n          msg (\"I really would stop pushing that button!\")\r\n        }\r\n        else if (countdown.countdowncounter = 1) {\r\n          msg (\"You have pushed it once.  I wouldn't push it anymore.\")\r\n        }\r\n      </changedcountdowncounter>\r\n    </object>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"button\">\r\n      <inherit name=\"editor_object\" />\r\n      <push type=\"script\">\r\n        msg (\"You push the button.\")\r\n        countdown.countdowncounter = countdown.countdowncounter + 1\r\n      </push>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>What Agon suggests makes sense.</p>\n<p>If I were to do it, here is what I would do.  Keep in mind, I have no idea what causes the counter to increase, although I would image it is some significant event.</p>\n<p>I would:</p>\n<ol>\n<li>add an object to the game and call it something like 'countdown'.</li>\n<li>Set it as invisible.  Just untick the visible box.</li>\n<li>Go to the 'attributes' tab of the object 'countdown'.</li>\n<li>Add an attribute.  Name it 'countdowncounter'.  Choose an integer attribute and give it the value of 0.</li>\n<li>Click the add change script button.</li>\n<li>Here, place an IF script and select 'object attribute equals'.</li>\n<li>Choose object 'countdown', attribute 'countdowncounter', and set it equal to 10.</li>\n<li>In the THEN part of the script you can add a script to 'Finish Game'.  In the code below, I also added a suitable message.</li>\n<li>In the ELSE IFs of this same script, select what you want to happen for each significant step toward 10.  ie. Repeat step #7, but just set it equal to whatever number you please.  In the code below, I set did examples for 1 time and 5 times and 10 times.</li>\n<li>For whatever event triggers the counter to increase, add a 'set a variable or attribute' script.</li>\n<li>In this script, type your 'object name.object name attribute' in the first box, leave it set as an expression, and type your 'object name.object name attribute +1' in the last box.  This example would be:  Set variable countdown.countdowncounter = expression countdown.countdowncounter +1</li>\n</ol>\n<p>Below is a working example if you want to copy-paste it in a new game to see how it works.</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Object attribute equals demo\"&gt;\n    &lt;gameid&gt;e34323e9-3172-4e2e-8b6f-1e41a5c53272&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;object name=\"countdown\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n      &lt;countdowncounter type=\"int\"&gt;0&lt;/countdowncounter&gt;\n      &lt;changedcountdowncounter type=\"script\"&gt;\n        if (countdown.countdowncounter = 10) {\n          msg (\"You have pushed the button of doom too many times! Your world explodes.\")\n          finish\n        }\n        else if (countdown.countdowncounter = 5) {\n          msg (\"I really would stop pushing that button!\")\n        }\n        else if (countdown.countdowncounter = 1) {\n          msg (\"You have pushed it once.  I wouldn't push it anymore.\")\n        }\n      &lt;/changedcountdowncounter&gt;\n    &lt;/object&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"button\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;push type=\"script\"&gt;\n        msg (\"You push the button.\")\n        countdown.countdowncounter = countdown.countdowncounter + 1\n      &lt;/push&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-09-04T03:06:34.3553774Z",
      "LastEditDate": "2017-09-04T03:07:19.567751Z",
      "link": null
    },
    {
      "PostId": "dfd9b751-475e-4908-96ba-6d7baf01657a",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Doctor Agon's solution will work, but a better way is with a change script if yoiu are using the desktop version (you can use them on the web version, but it is a bit more complicated). That way it will only be checked when the attribute changes, not ever turn.\r\n\r\nGo to the _Attributes_ tab of the object, and click on the attribute. Then click the \"Change script\" button above, and you will get a new script attribute. Paste Doctor Agon's code in there.",
      "EditableFormat": "markdown",
      "HTML": "<p>Doctor Agon's solution will work, but a better way is with a change script if yoiu are using the desktop version (you can use them on the web version, but it is a bit more complicated). That way it will only be checked when the attribute changes, not ever turn.</p>\n<p>Go to the <em>Attributes</em> tab of the object, and click on the attribute. Then click the \"Change script\" button above, and you will get a new script attribute. Paste Doctor Agon's code in there.</p>\n\n",
      "PostDate": "2017-09-04T07:33:24.4037071Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2a9f541-53bf-4dc3-9d6a-956a4db97dba",
      "UserId": 320736,
      "Username": "Jador",
      "AvatarUrl": "https://secure.gravatar.com/avatar/64777628764a68532923e3c8e4946c4d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow.  This is a lot of information.  I haven't gotten into the coding yet, so much of what hegemonkhan and XanMag said isn't quite what I was looking for.  Little too advanced for me yet.\r\n\r\nAgon's advice was spot on though.  Found the Turn Scripts option, and the counter works perfectly now.  Thanks!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow.  This is a lot of information.  I haven't gotten into the coding yet, so much of what hegemonkhan and XanMag said isn't quite what I was looking for.  Little too advanced for me yet.</p>\n<p>Agon's advice was spot on though.  Found the Turn Scripts option, and the counter works perfectly now.  Thanks!</p>\n\n",
      "PostDate": "2017-09-04T17:14:58.2043981Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
