{
  "Topic": {
    "TopicId": "e4w7avd7fueuwihxyv--eg",
    "ForumId": "10",
    "Title": "Script Dictionary - As Attribute",
    "LastUpdated": "2018-06-29T11:01:13.2684124Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "251570e4-49f4-4b2b-aa40-ab3e2cc9f525",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good day everyone,\r\nKV has been invaluable over these last few months in helping me accomplish several goals, but knowing how busy KV has been outside of Quest, I wanted to open this up for the rest of you folks. Would anyone mind running through using a script dictionary? Every time I use one, the only result I see is (script). I have tried assigning a variable at the start and even adding a return, but no matter what the result displayed is (script).\r\n\r\nWhat am I doing?\r\nI have a list of attributes that randomly get assigned a value greater than 0, turning that attribute \"On\" as it were. The value the attribute is assigned is what I'm trying to get.\r\n\r\nSo I have an item with a String Dictionary attribute that contains my list. The attributes are being assigned and \"turned on\", but I want to display the value of the attribute.\r\n\r\nWorking part:\r\nItem: staff1 - attribute string dictionary list (with only each attribute & value).\r\nCall to the function that adds the random attributes to the items, up to 5.\r\nThat function calls another function that iterates through the attributes assigned with a value greater than 0 and adds them to a list. Finally, the last attribute field is populated with the string values of ALL the attributes, but only ones greater than 0 are actually added.\r\n\r\nMy problem:\r\nI can get the name of an attribute to display, because I set a string value, but I cannot get the numeric value to display.  For example, if an attribute is AttackChance, the string value is\r\n\r\n\"Attack Chance: \"+AttackChance+\"\"\r\n\r\nThat should display something like -  Attack Chance: 5\r\nInstead, all I can get is - Attack Chance: +AttackChance+\r\n\r\nI need to get the value assigned to AttackChance to display the full string, with the numeric value and not just the text.\r\n\r\n(object)mag_props.alphabetdict attribute: string dictionary\r\n(object)alphabetdict.alphabetdict attribute: string dictionary (attribute names have a 2 added, so AttackChance = AttackChance2 and each entry looks like this - (AttackChance <--key) (\"Attack Chance: \" + obj.AttackChance + \"<br>\" <---string)\r\n\r\nobject.m_props: string\r\nobject.m_props2: script dictionary (in order to combine the string and int values into one value)\r\nAttackChance2 + BonusDex2 + BonusHits2 + etc + etc\r\nobject.attribute: Integer\r\n\r\nFunction to assign up to 5 attributes:\r\n```\r\n<function name=\"Magical_Props\" parameters=\"object\"><![CDATA[\r\n    obj = object\r\n    if (GetInt(obj, \"rarity\") > 91) {\r\n      magical = NewStringDictionary()\r\n      obj = object\r\n      keys = NewStringList()\r\n      dict = mag_props.alphabetdict\r\n      foreach (key, dict) {\r\n        list add (keys, key)\r\n      }\r\n      list = PickFiveStrings(keys)\r\n      foreach (key, list) {\r\n        val = DictionaryItem (dict, key)\r\n        set (obj, key, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \" = \" + val)\r\n        // for debugging\r\n        msg (GetAttribute(obj, key))\r\n        dictionary add (magical, key + \"2\", val)\r\n      }\r\n      set (obj, \"m_props2\", magical)\r\n      Properties_List1 (obj)\r\n    }\r\n    else if (GetInt(obj, \"rarity\") > 71) {\r\n      magical = NewStringDictionary()\r\n      obj = object\r\n      keys = NewStringList()\r\n      dict = mag_props.alphabetdict\r\n      foreach (key, dict) {\r\n        list add (keys, key)\r\n      }\r\n      list = PickFourStrings(keys)\r\n      foreach (key, list) {\r\n        val = DictionaryItem (dict, key)\r\n        set (obj, key, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \" = \" + val)\r\n        // for debugging\r\n        msg (GetAttribute(obj, key))\r\n        dictionary add (magical, key + \"2\", val)\r\n      }\r\n      set (obj, \"m_props2\", magical)\r\n      Properties_List1 (obj)\r\n    }\r\n    else if (GetInt(obj, \"rarity\") > 51) {\r\n      magical = NewStringDictionary()\r\n      obj = object\r\n      keys = NewStringList()\r\n      dict = mag_props.alphabetdict\r\n      foreach (key, dict) {\r\n        list add (keys, key)\r\n      }\r\n      list = PickThreeStrings(keys)\r\n      foreach (key, list) {\r\n        val = DictionaryItem (dict, key)\r\n        set (obj, key, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \" = \" + val)\r\n        // for debugging\r\n        msg (GetAttribute(obj, key))\r\n        dictionary add (magical, key + \"2\", val)\r\n      }\r\n      set (obj, \"m_props2\", magical)\r\n      Properties_List1 (obj)\r\n    }\r\n    else if (GetInt(obj, \"rarity\") > 31) {\r\n      magical = NewStringDictionary()\r\n      obj = object\r\n      keys = NewStringList()\r\n      dict = mag_props.alphabetdict\r\n      foreach (key, dict) {\r\n        list add (keys, key)\r\n      }\r\n      list = PickTwoStrings(keys)\r\n      foreach (key, list) {\r\n        val = DictionaryItem (dict, key)\r\n        set (obj, key, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \" = \" + val)\r\n        // for debugging\r\n        msg (GetAttribute(obj, key))\r\n        dictionary add (magical, key + \"2\", val)\r\n      }\r\n      set (obj, \"m_props2\", magical)\r\n      Properties_List1 (obj)\r\n    }\r\n    else if (GetInt(obj, \"rarity\") > 11) {\r\n      magical = NewStringDictionary()\r\n      obj = object\r\n      keys = NewStringList()\r\n      dict = mag_props.alphabetdict\r\n      foreach (key, dict) {\r\n        list add (keys, key)\r\n      }\r\n      list = PickOneStrings(keys)\r\n      foreach (key, list) {\r\n        val = DictionaryItem (dict, key)\r\n        set (obj, key, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \" = \" + val)\r\n        // for debugging\r\n        msg (GetAttribute(obj, key))\r\n        dictionary add (magical, key + \"2\", val)\r\n      }\r\n      set (obj, \"m_props2\", magical)\r\n      Properties_List1 (obj)\r\n    }\r\n    msg (\"Magical properties added on \" + obj.name + \"\")\r\n  ]]></function>\r\n```\r\n\r\nFunction to  stuff attributes into a list:\r\n```\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    list = obj.m_props2\r\n    magical2 = NewStringList()\r\n    dict = alphabetdict.alphabetdict\r\n    foreach (key, dict) {\r\n      list add (magical2, key)\r\n    }\r\n    foreach (key, list) {\r\n      val = DictionaryItem (dict, key)\r\n      set (obj, key, val)\r\n      // for debugging\r\n      msg (obj.name + \".\" + key + \" = \" + val)\r\n      // for debugging\r\n      msg (GetAttribute(obj, key))\r\n    }\r\n    set (obj, \"m_props\", (obj.AttackChance2 + obj.BonusDex2 + obj.BonusHits2 + obj.BonusInt2 + obj.BonusMana2 + obj.BonusStam2 + obj.BonusStr2 + obj.Chaos2 + obj.Cold2 + obj.DefendChance2 + obj.Direct2 + obj.Energy2 + obj.Fire2 + obj.LowerManaCost2 + obj.Luck2 + obj.NightSight2 + obj.Physical2 + obj.Poison2 + obj.ReflectPhysical2 + obj.RegenHits2 + obj.RegenMana2 + obj.RegenStam2 + obj.ResistColdBonus2 + obj.ResistEnergyBonus2 + obj.ResistFireBonus2 + obj.ResistPhysicalBonus2 + obj.ResistPoisonBonus2 + obj.SpellChanneling2 + obj.SpellDamage2 + obj.WeaponDamage2 + obj.HitColdArea2 + obj.HitDispel2 + obj.HitEnergyArea2 + obj.HitFireArea2 + obj.HitFireball2 + obj.HitHarm2 + obj.HitLeechHits2 + obj.HitLeechMana2 + obj.HitLeechStam2 + obj.HitLightning2 + obj.HitLowerAttack2 + obj.HitLowerDefend2 + obj.HitMagicArrow2 + obj.HitPhysicalArea2 + obj.MageWeapon2))\r\n  </function>\r\n```\r\n\r\nThanks,\r\n- Raist",
      "EditableFormat": "markdown",
      "HTML": "<p>Good day everyone,<br>\nKV has been invaluable over these last few months in helping me accomplish several goals, but knowing how busy KV has been outside of Quest, I wanted to open this up for the rest of you folks. Would anyone mind running through using a script dictionary? Every time I use one, the only result I see is (script). I have tried assigning a variable at the start and even adding a return, but no matter what the result displayed is (script).</p>\n<p>What am I doing?<br>\nI have a list of attributes that randomly get assigned a value greater than 0, turning that attribute \"On\" as it were. The value the attribute is assigned is what I'm trying to get.</p>\n<p>So I have an item with a String Dictionary attribute that contains my list. The attributes are being assigned and \"turned on\", but I want to display the value of the attribute.</p>\n<p>Working part:<br>\nItem: staff1 - attribute string dictionary list (with only each attribute &amp; value).<br>\nCall to the function that adds the random attributes to the items, up to 5.<br>\nThat function calls another function that iterates through the attributes assigned with a value greater than 0 and adds them to a list. Finally, the last attribute field is populated with the string values of ALL the attributes, but only ones greater than 0 are actually added.</p>\n<p>My problem:<br>\nI can get the name of an attribute to display, because I set a string value, but I cannot get the numeric value to display.  For example, if an attribute is AttackChance, the string value is</p>\n<p>\"Attack Chance: \"+AttackChance+\"\"</p>\n<p>That should display something like -  Attack Chance: 5<br>\nInstead, all I can get is - Attack Chance: +AttackChance+</p>\n<p>I need to get the value assigned to AttackChance to display the full string, with the numeric value and not just the text.</p>\n<p>(object)mag_props.alphabetdict attribute: string dictionary<br>\n(object)alphabetdict.alphabetdict attribute: string dictionary (attribute names have a 2 added, so AttackChance = AttackChance2 and each entry looks like this - (AttackChance &lt;--key) (\"Attack Chance: \" + obj.AttackChance + \"<br>\" &lt;---string)</p>\n<p>object.m_props: string<br>\nobject.m_props2: script dictionary (in order to combine the string and int values into one value)<br>\nAttackChance2 + BonusDex2 + BonusHits2 + etc + etc<br>\nobject.attribute: Integer</p>\n<p>Function to assign up to 5 attributes:</p>\n<pre><code>&lt;function name=\"Magical_Props\" parameters=\"object\"&gt;&lt;![CDATA[\n    obj = object\n    if (GetInt(obj, \"rarity\") &gt; 91) {\n      magical = NewStringDictionary()\n      obj = object\n      keys = NewStringList()\n      dict = mag_props.alphabetdict\n      foreach (key, dict) {\n        list add (keys, key)\n      }\n      list = PickFiveStrings(keys)\n      foreach (key, list) {\n        val = DictionaryItem (dict, key)\n        set (obj, key, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \" = \" + val)\n        // for debugging\n        msg (GetAttribute(obj, key))\n        dictionary add (magical, key + \"2\", val)\n      }\n      set (obj, \"m_props2\", magical)\n      Properties_List1 (obj)\n    }\n    else if (GetInt(obj, \"rarity\") &gt; 71) {\n      magical = NewStringDictionary()\n      obj = object\n      keys = NewStringList()\n      dict = mag_props.alphabetdict\n      foreach (key, dict) {\n        list add (keys, key)\n      }\n      list = PickFourStrings(keys)\n      foreach (key, list) {\n        val = DictionaryItem (dict, key)\n        set (obj, key, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \" = \" + val)\n        // for debugging\n        msg (GetAttribute(obj, key))\n        dictionary add (magical, key + \"2\", val)\n      }\n      set (obj, \"m_props2\", magical)\n      Properties_List1 (obj)\n    }\n    else if (GetInt(obj, \"rarity\") &gt; 51) {\n      magical = NewStringDictionary()\n      obj = object\n      keys = NewStringList()\n      dict = mag_props.alphabetdict\n      foreach (key, dict) {\n        list add (keys, key)\n      }\n      list = PickThreeStrings(keys)\n      foreach (key, list) {\n        val = DictionaryItem (dict, key)\n        set (obj, key, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \" = \" + val)\n        // for debugging\n        msg (GetAttribute(obj, key))\n        dictionary add (magical, key + \"2\", val)\n      }\n      set (obj, \"m_props2\", magical)\n      Properties_List1 (obj)\n    }\n    else if (GetInt(obj, \"rarity\") &gt; 31) {\n      magical = NewStringDictionary()\n      obj = object\n      keys = NewStringList()\n      dict = mag_props.alphabetdict\n      foreach (key, dict) {\n        list add (keys, key)\n      }\n      list = PickTwoStrings(keys)\n      foreach (key, list) {\n        val = DictionaryItem (dict, key)\n        set (obj, key, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \" = \" + val)\n        // for debugging\n        msg (GetAttribute(obj, key))\n        dictionary add (magical, key + \"2\", val)\n      }\n      set (obj, \"m_props2\", magical)\n      Properties_List1 (obj)\n    }\n    else if (GetInt(obj, \"rarity\") &gt; 11) {\n      magical = NewStringDictionary()\n      obj = object\n      keys = NewStringList()\n      dict = mag_props.alphabetdict\n      foreach (key, dict) {\n        list add (keys, key)\n      }\n      list = PickOneStrings(keys)\n      foreach (key, list) {\n        val = DictionaryItem (dict, key)\n        set (obj, key, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \" = \" + val)\n        // for debugging\n        msg (GetAttribute(obj, key))\n        dictionary add (magical, key + \"2\", val)\n      }\n      set (obj, \"m_props2\", magical)\n      Properties_List1 (obj)\n    }\n    msg (\"Magical properties added on \" + obj.name + \"\")\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p>Function to  stuff attributes into a list:</p>\n<pre><code>&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    list = obj.m_props2\n    magical2 = NewStringList()\n    dict = alphabetdict.alphabetdict\n    foreach (key, dict) {\n      list add (magical2, key)\n    }\n    foreach (key, list) {\n      val = DictionaryItem (dict, key)\n      set (obj, key, val)\n      // for debugging\n      msg (obj.name + \".\" + key + \" = \" + val)\n      // for debugging\n      msg (GetAttribute(obj, key))\n    }\n    set (obj, \"m_props\", (obj.AttackChance2 + obj.BonusDex2 + obj.BonusHits2 + obj.BonusInt2 + obj.BonusMana2 + obj.BonusStam2 + obj.BonusStr2 + obj.Chaos2 + obj.Cold2 + obj.DefendChance2 + obj.Direct2 + obj.Energy2 + obj.Fire2 + obj.LowerManaCost2 + obj.Luck2 + obj.NightSight2 + obj.Physical2 + obj.Poison2 + obj.ReflectPhysical2 + obj.RegenHits2 + obj.RegenMana2 + obj.RegenStam2 + obj.ResistColdBonus2 + obj.ResistEnergyBonus2 + obj.ResistFireBonus2 + obj.ResistPhysicalBonus2 + obj.ResistPoisonBonus2 + obj.SpellChanneling2 + obj.SpellDamage2 + obj.WeaponDamage2 + obj.HitColdArea2 + obj.HitDispel2 + obj.HitEnergyArea2 + obj.HitFireArea2 + obj.HitFireball2 + obj.HitHarm2 + obj.HitLeechHits2 + obj.HitLeechMana2 + obj.HitLeechStam2 + obj.HitLightning2 + obj.HitLowerAttack2 + obj.HitLowerDefend2 + obj.HitMagicArrow2 + obj.HitPhysicalArea2 + obj.MageWeapon2))\n  &lt;/function&gt;\n</code></pre>\n<p>Thanks,</p>\n<ul>\n<li>Raist</li>\n</ul>\n\n",
      "PostDate": "2018-06-29T11:01:13.2684124Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "feee3d7d-5a50-4679-81a1-5de3b0a428fd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, I can't understand a word of your explanation.\r\nThe code, I can follow what it's doing. It's inefficient, but it looks like it should work. It's very confusing to read, because you have things like a dictionary named `list` (when a list and a dictionary are very different things).\r\n\r\nIt picks between 1 and 5 keys from the dictionary `mag_props.alphabetdict`.\r\n\r\nFor example, if `mag_props.alphabetdict` had a key `\"NightSight\"` and value `\"someValue\"`, then this function could give obj:\r\n* An attribute `obj.NightSight` with the value `\"someValue\"`\r\n* An attribute `obj.m_props2` which is a dictionary containing the key `\"NightSight2\"` and value `\"someValue\"`\r\n* An attribute `obj.NightSight2` whose value is determined by looking for the value corresponding to the key `\"NightSight2\"` in the dictionary `alphabetdict.alphabetdict`\r\n* An attribute `obj.m_props` which is a huge string containing a whole load of attribute values\r\n\r\nIs that what you want?\r\nWhat do you want it to do?\r\n\r\nMaybe if you give an example of a key and value from each of the dictionaries `mag_props.alphabetdict` and `alphabetdict.alphabetdict`, I'd have a better idea how this is supposed to work?",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, I can't understand a word of your explanation.<br>\nThe code, I can follow what it's doing. It's inefficient, but it looks like it should work. It's very confusing to read, because you have things like a dictionary named <code>list</code> (when a list and a dictionary are very different things).</p>\n<p>It picks between 1 and 5 keys from the dictionary <code>mag_props.alphabetdict</code>.</p>\n<p>For example, if <code>mag_props.alphabetdict</code> had a key <code>\"NightSight\"</code> and value <code>\"someValue\"</code>, then this function could give obj:</p>\n<ul>\n<li>An attribute <code>obj.NightSight</code> with the value <code>\"someValue\"</code></li>\n<li>An attribute <code>obj.m_props2</code> which is a dictionary containing the key <code>\"NightSight2\"</code> and value <code>\"someValue\"</code></li>\n<li>An attribute <code>obj.NightSight2</code> whose value is determined by looking for the value corresponding to the key <code>\"NightSight2\"</code> in the dictionary <code>alphabetdict.alphabetdict</code></li>\n<li>An attribute <code>obj.m_props</code> which is a huge string containing a whole load of attribute values</li>\n</ul>\n<p>Is that what you want?<br>\nWhat do you want it to do?</p>\n<p>Maybe if you give an example of a key and value from each of the dictionaries <code>mag_props.alphabetdict</code> and <code>alphabetdict.alphabetdict</code>, I'd have a better idea how this is supposed to work?</p>\n\n",
      "PostDate": "2018-06-29T11:37:13.3755511Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9cb8467a-07be-4991-b021-1255329a33a7",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the reply mrangel,\r\nYep, that's what it IS doing. The only thing that is NOT happening is the actual integer value assigned to obj.NightSight is not being carried over into the String when it is displayed.\r\n\r\nThe end result should look like this -\r\nAttribute: Int\r\n\r\nThe code is roughly -\r\n\"NightSight: \" +obj.NightSight+\"<br>\"\r\n\r\nThat is the value of NightSight2, so when ALL of the attributes greater than 0 are added to that huge string (obj.m_props), it is adding that NightSight2 value of \"NightSight: \" +obj.NightSight+\"<br>\" (and then each attribute value for AttackChance2, BonusDex2, etc, etc). When you LOOK at the item in the game you see:\r\n\r\nBow\r\nDamage: 6\r\nType: Ranged\r\nAttack Chance: 15\r\nBonus Dexterity: 3\r\n\r\nAttack Chance and Bonus Dexterity are the \"2\" values (AttackChance2, BonusDex2, etc). I cannot get the INT from inside a \"2\" value to actually display the INT, instead it displays something like Attack Chance: +obj.AttackChance+.\r\n\r\nKV suggested changing obj.m_props2 to a Script Dictionary, but when I do that the result displayed is Attack Chance: (script). I added the creation of the lists inside the functions to more easily reference the attributes being changed.\r\n\r\nThis is all happening during initialise for an object, but all of the values exist and are in place when I look in the Debugger (except that INT will not show up instead of  +obj.AttackChance+).\r\n\r\nmag_props.alphabetdict example:\r\n```\r\n<item>\r\n  <key>AttackChance</key>\r\n  <value type=\"string\">1</value>\r\n</item>\r\n```\r\n\r\nalphabetdict.alphabetdict example:\r\n```\r\n<item>\r\n  <key>AttackChance2</key>\r\n  <value type=\"string\">\"Attack Chance: \" + obj.AttackChance + \"<br>\"</value>\r\n</item>\r\n```\r\nThanks,\r\n- Raist",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the reply mrangel,<br>\nYep, that's what it IS doing. The only thing that is NOT happening is the actual integer value assigned to obj.NightSight is not being carried over into the String when it is displayed.</p>\n<p>The end result should look like this -<br>\nAttribute: Int</p>\n<p>The code is roughly -<br>\n\"NightSight: \" +obj.NightSight+\"<br>\"</p>\n<p>That is the value of NightSight2, so when ALL of the attributes greater than 0 are added to that huge string (obj.m_props), it is adding that NightSight2 value of \"NightSight: \" +obj.NightSight+\"<br>\" (and then each attribute value for AttackChance2, BonusDex2, etc, etc). When you LOOK at the item in the game you see:</p>\n<p>Bow<br>\nDamage: 6<br>\nType: Ranged<br>\nAttack Chance: 15<br>\nBonus Dexterity: 3</p>\n<p>Attack Chance and Bonus Dexterity are the \"2\" values (AttackChance2, BonusDex2, etc). I cannot get the INT from inside a \"2\" value to actually display the INT, instead it displays something like Attack Chance: +obj.AttackChance+.</p>\n<p>KV suggested changing obj.m_props2 to a Script Dictionary, but when I do that the result displayed is Attack Chance: (script). I added the creation of the lists inside the functions to more easily reference the attributes being changed.</p>\n<p>This is all happening during initialise for an object, but all of the values exist and are in place when I look in the Debugger (except that INT will not show up instead of  +obj.AttackChance+).</p>\n<p>mag_props.alphabetdict example:</p>\n<pre><code>&lt;item&gt;\n  &lt;key&gt;AttackChance&lt;/key&gt;\n  &lt;value type=\"string\"&gt;1&lt;/value&gt;\n&lt;/item&gt;\n</code></pre>\n<p>alphabetdict.alphabetdict example:</p>\n<pre><code>&lt;item&gt;\n  &lt;key&gt;AttackChance2&lt;/key&gt;\n  &lt;value type=\"string\"&gt;\"Attack Chance: \" + obj.AttackChance + \"&lt;br&gt;\"&lt;/value&gt;\n&lt;/item&gt;\n</code></pre>\n<p>Thanks,</p>\n<ul>\n<li>Raist</li>\n</ul>\n\n",
      "PostDate": "2018-06-29T12:30:22.9361255Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1486a06b-4830-4cca-a576-cac6e9da2143",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you change your `PickFiveStrings` etc. to one `PickSomeStrings` it will be much easier.\r\n```\r\n  <function name=\"PickSomeStrings\" parameters=\"list, n\" type=\"stringlist\"><![CDATA[\r\n    if (n > ListCount(list)) {\r\n      error (\"Trying to get \" + n + \" items from a list of only \" + ListCount(list))\r\n    }\r\n    result = NewStringList()\r\n    for (i, 1, n) {\r\n      s = PickOneString(list)\r\n      while (s in result) {\r\n        s = PickOneString(list)\r\n      }\r\n      list add (result, s)\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n```\r\nYour first function should then be just this:\r\n\r\n```\r\n<function name=\"Magical_Props\" parameters=\"obj\"><![CDATA[\r\n  obj.m_props2 = NewStringDictionary()\r\n  keys = NewStringList()\r\n  foreach (key, mag_props.alphabetdict) {\r\n    list add (keys, key)\r\n  }\r\n  list = PickSomeStrings(keys, (obj.rarity - 1) / 20 + 1)\r\n  foreach (key, list) {\r\n    val = DictionaryItem (mag_props.alphabetdict, key)\r\n    set (obj, key, val)\r\n    // for debugging\r\n    msg (obj.name + \".\" + key + \" = \" + val)\r\n    // for debugging\r\n    msg (GetAttribute(obj, key))\r\n    dictionary add (obj.m_props2, key + \"2\", val)\r\n  }\r\n  Properties_List1 (obj)\r\n]]></function>\r\n```\r\n\r\nWhat that will do is add one to five attributes to the given object, chosen randomly from `mag_props.alphabetdict`.\r\n\r\nFor the second, try this:\r\n\r\n```\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    foreach (key, obj.m_props2) {\r\n      val = DictionaryItem (alphabetdict.alphabetdict, key)\r\n      set (obj, key, val)\r\n      // for debugging\r\n      msg (obj.name + \".\" + key + \" = \" + val)\r\n      // for debugging\r\n      msg (GetAttribute(obj, key))\r\n    }\r\n  </function>  \r\n```\r\n\r\nThe last line I have just deleted. It looks to set the \"m_props\" to the total of all the attributes (an int or a string), and I suspect that is wrong.\r\n\r\nYou talk about script dictionaries in the OP, and it is not clear where they are. Are the properties scripts? There is some background here that we are not seeing.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you change your <code>PickFiveStrings</code> etc. to one <code>PickSomeStrings</code> it will be much easier.</p>\n<pre><code>  &lt;function name=\"PickSomeStrings\" parameters=\"list, n\" type=\"stringlist\"&gt;&lt;![CDATA[\n    if (n &gt; ListCount(list)) {\n      error (\"Trying to get \" + n + \" items from a list of only \" + ListCount(list))\n    }\n    result = NewStringList()\n    for (i, 1, n) {\n      s = PickOneString(list)\n      while (s in result) {\n        s = PickOneString(list)\n      }\n      list add (result, s)\n    }\n    return (result)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p>Your first function should then be just this:</p>\n<pre><code>&lt;function name=\"Magical_Props\" parameters=\"obj\"&gt;&lt;![CDATA[\n  obj.m_props2 = NewStringDictionary()\n  keys = NewStringList()\n  foreach (key, mag_props.alphabetdict) {\n    list add (keys, key)\n  }\n  list = PickSomeStrings(keys, (obj.rarity - 1) / 20 + 1)\n  foreach (key, list) {\n    val = DictionaryItem (mag_props.alphabetdict, key)\n    set (obj, key, val)\n    // for debugging\n    msg (obj.name + \".\" + key + \" = \" + val)\n    // for debugging\n    msg (GetAttribute(obj, key))\n    dictionary add (obj.m_props2, key + \"2\", val)\n  }\n  Properties_List1 (obj)\n]]&gt;&lt;/function&gt;\n</code></pre>\n<p>What that will do is add one to five attributes to the given object, chosen randomly from <code>mag_props.alphabetdict</code>.</p>\n<p>For the second, try this:</p>\n<pre><code>&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    foreach (key, obj.m_props2) {\n      val = DictionaryItem (alphabetdict.alphabetdict, key)\n      set (obj, key, val)\n      // for debugging\n      msg (obj.name + \".\" + key + \" = \" + val)\n      // for debugging\n      msg (GetAttribute(obj, key))\n    }\n  &lt;/function&gt;  \n</code></pre>\n<p>The last line I have just deleted. It looks to set the \"m_props\" to the total of all the attributes (an int or a string), and I suspect that is wrong.</p>\n<p>You talk about script dictionaries in the OP, and it is not clear where they are. Are the properties scripts? There is some background here that we are not seeing.</p>\n\n",
      "PostDate": "2018-06-29T12:49:07.5291313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d71105b-c488-4d21-b9e3-dc7528254c82",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the reply Pixie,\r\nThe attribute obj.m_props2 is the Script Dictionary. KV believed/believes that is the only way to combine a String and an Int into one value. I just can't seem to get it to work so that it actually displays the String/Int combination properly.\r\n\r\n(NOTE: Setting m_props2 to a Script Dictionary gives the result of (script), see this code below)\r\n```\r\n<m_props2 type=\"scriptdictionary\">\r\n\t<item key=\"AttackChance2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"AttackChance2\", Attack Chance: \" + obj.AttackChance + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusDex2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusDex2\", Bonus Dexterity: \" + obj.BonusDex + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusHits2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusHits2\", Bonus Hit Points: \" + obj.BonusHits + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusInt2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusInt2\", Bonus Intelligence: \" + obj.BonusInt + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusMana2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusMana2\", Bonus Mana: \" + obj.BonusMana + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusStam2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusStam2\", Bonus Stamina: \" + obj.BonusStam + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"BonusStr2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"BonusStr2\", BOnus Strength: \" + obj.BonusStr + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Chaos2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Chaos2\", Chaos: \" + obj.Chaos + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Cold2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Cold2\", Cold: \" + obj.Cold + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"DefendChance2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"DefendChance2\", Defense Chance: \" + obj.DefendChance + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Direct2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Direct2\", Direct: \" + obj.Direct + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Energy2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Energy2\", Energy: \" + obj.Energy + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Fire2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Fire2\", Fire: \" + obj.Fire + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"LowerManaCost2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"LowerManaCost2\", Lower Mana Cost: \" + obj.LowerManaCost + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Luck2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Luck2\", Luck: \" + obj.Luck + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"NightSight2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"NightSight2\", Nightsight)\r\n        ]]></item>\r\n\t<item key=\"Physical2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Physical2\", Physical: \" + obj.Physical + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Poison2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Poison2\", Poison: \" + obj.Poison + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ReflectPhysical2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ReflectPhysical2\", Reflect Physical: \" + obj.ReflectPhysical + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"RegenHits2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"RegenHits2\", Hit Point Regeneration: \" + obj.RegenHits + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"RegenMana2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"RegenMana2\", Mana Regeneration: \" + obj.RegenMana + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"RegenStam2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"RegenStam2\", Stamina Regeneration: \" + obj.RegenStam + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ResistColdBonus2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ResistColdBonus2\", Cold Resistance: \" + obj.ResistColdBonus + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ResistEnergyBonus2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ResistEnergyBonus2\", Energy Resistance: \" + obj.ResistEnergyBonus + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ResistFireBonus2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ResistFireBonus2\", Fire Resistance: \" + obj.ResistFireBonus + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ResistPhysicalBonus2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ResistPhysicalBonus2\", Physical Resistance: \" + obj.ResistPhysicalBonus + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"ResistPoisonBonus2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"ResistPoisonBonus2\", Poison Resistance: \" + obj.ResistPoisonBonus + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"Spellchanneling2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"Spellchanneling2\", Spellchanneling)\r\n        ]]></item>\r\n\t<item key=\"SpellDamage2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"SpellDamage2\", Spell Damage: \" + obj.SpellDamage + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"WeaponDamage2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"WeaponDamage2\", Weapon Damage: \" + obj.WeaponDamage + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitColdArea2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitColdArea2\", Hit Cold Area: \" + obj.HitColdArea + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitDispel2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitDispel2\", Hit Dispel: \" + obj.HitDispel + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitEnergyArea2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitEnergyArea2\", Hit Energy Area: \" + obj.HitEnergyArea + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitFireArea2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitFireArea2\", Hit Fire Area: \" + obj.HitFireArea + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitFireball2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitFireball2\", Hit Fireball: \" + obj.HitFireball + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitHarm2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitHarm2\", Hit Harm: \" + obj.HitHarm + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLeechHits2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLeechHits2\", Hit Leech Hits: \" + obj.HitLeechHits + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLeechMana2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLeechMana2\", Hit Leech Mana: \" + obj.HitLeechMana + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLeechStam2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLeechStam2\", Hit Leech Stamina: \" + obj.HitLeechStam + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLightning2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLightning2\", Hit Lightning: \" + obj.HitLightning + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLowerAttack2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLowerAttack2\", Hit Lower Attack: \" + obj.HitLowerAttack + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitLowerDefend2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitLowerDefend2\", Hit Lower Defense: \" + obj.HitLowerDefend + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitMagicArrow2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitMagicArrow2\", Hit Magic Arrow: \" + obj.HitMagicArrow + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"HitPhysicalArea2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"HitPhysicalArea2\", Hit Physical Area: \" + obj.HitPhysicalArea + \"<br>)\r\n        ]]></item>\r\n\t<item key=\"MageWeapon2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"MageWeapon2\", Mage Weapon)\r\n        ]]></item>\r\n</m_props2>\r\n```\r\n\r\nWhen you run this game below, answer Yes/No before doing anything else (you will see attributes being set, because of the debugging lines in the code). Then just open the Debugger and look at one of the objects in the weap_room (they are weapons except for: mag_props and alphabetdict). The function is adding random attributes, based upon an object's Rarity. So any object with a rarity greater than 11, will have at least ONE random attribute added. If you want to see what an object displays when you LOOK at it, just type LOOK SELF (x me) and three weapons will be added to the inventory. Just LOOK at one with a Rarity higher than 10.\r\n\r\nThanks,\r\n- Raist",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the reply Pixie,<br>\nThe attribute obj.m_props2 is the Script Dictionary. KV believed/believes that is the only way to combine a String and an Int into one value. I just can't seem to get it to work so that it actually displays the String/Int combination properly.</p>\n<p>(NOTE: Setting m_props2 to a Script Dictionary gives the result of (script), see this code below)</p>\n<pre><code>&lt;m_props2 type=\"scriptdictionary\"&gt;\n\t&lt;item key=\"AttackChance2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"AttackChance2\", Attack Chance: \" + obj.AttackChance + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusDex2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusDex2\", Bonus Dexterity: \" + obj.BonusDex + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusHits2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusHits2\", Bonus Hit Points: \" + obj.BonusHits + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusInt2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusInt2\", Bonus Intelligence: \" + obj.BonusInt + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusMana2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusMana2\", Bonus Mana: \" + obj.BonusMana + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusStam2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusStam2\", Bonus Stamina: \" + obj.BonusStam + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"BonusStr2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"BonusStr2\", BOnus Strength: \" + obj.BonusStr + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Chaos2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Chaos2\", Chaos: \" + obj.Chaos + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Cold2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Cold2\", Cold: \" + obj.Cold + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"DefendChance2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"DefendChance2\", Defense Chance: \" + obj.DefendChance + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Direct2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Direct2\", Direct: \" + obj.Direct + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Energy2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Energy2\", Energy: \" + obj.Energy + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Fire2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Fire2\", Fire: \" + obj.Fire + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"LowerManaCost2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"LowerManaCost2\", Lower Mana Cost: \" + obj.LowerManaCost + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Luck2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Luck2\", Luck: \" + obj.Luck + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"NightSight2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"NightSight2\", Nightsight)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Physical2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Physical2\", Physical: \" + obj.Physical + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Poison2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Poison2\", Poison: \" + obj.Poison + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ReflectPhysical2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ReflectPhysical2\", Reflect Physical: \" + obj.ReflectPhysical + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"RegenHits2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"RegenHits2\", Hit Point Regeneration: \" + obj.RegenHits + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"RegenMana2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"RegenMana2\", Mana Regeneration: \" + obj.RegenMana + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"RegenStam2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"RegenStam2\", Stamina Regeneration: \" + obj.RegenStam + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ResistColdBonus2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ResistColdBonus2\", Cold Resistance: \" + obj.ResistColdBonus + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ResistEnergyBonus2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ResistEnergyBonus2\", Energy Resistance: \" + obj.ResistEnergyBonus + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ResistFireBonus2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ResistFireBonus2\", Fire Resistance: \" + obj.ResistFireBonus + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ResistPhysicalBonus2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ResistPhysicalBonus2\", Physical Resistance: \" + obj.ResistPhysicalBonus + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"ResistPoisonBonus2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"ResistPoisonBonus2\", Poison Resistance: \" + obj.ResistPoisonBonus + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"Spellchanneling2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"Spellchanneling2\", Spellchanneling)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"SpellDamage2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"SpellDamage2\", Spell Damage: \" + obj.SpellDamage + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"WeaponDamage2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"WeaponDamage2\", Weapon Damage: \" + obj.WeaponDamage + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitColdArea2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitColdArea2\", Hit Cold Area: \" + obj.HitColdArea + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitDispel2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitDispel2\", Hit Dispel: \" + obj.HitDispel + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitEnergyArea2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitEnergyArea2\", Hit Energy Area: \" + obj.HitEnergyArea + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitFireArea2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitFireArea2\", Hit Fire Area: \" + obj.HitFireArea + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitFireball2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitFireball2\", Hit Fireball: \" + obj.HitFireball + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitHarm2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitHarm2\", Hit Harm: \" + obj.HitHarm + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLeechHits2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLeechHits2\", Hit Leech Hits: \" + obj.HitLeechHits + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLeechMana2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLeechMana2\", Hit Leech Mana: \" + obj.HitLeechMana + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLeechStam2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLeechStam2\", Hit Leech Stamina: \" + obj.HitLeechStam + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLightning2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLightning2\", Hit Lightning: \" + obj.HitLightning + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLowerAttack2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLowerAttack2\", Hit Lower Attack: \" + obj.HitLowerAttack + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitLowerDefend2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitLowerDefend2\", Hit Lower Defense: \" + obj.HitLowerDefend + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitMagicArrow2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitMagicArrow2\", Hit Magic Arrow: \" + obj.HitMagicArrow + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"HitPhysicalArea2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"HitPhysicalArea2\", Hit Physical Area: \" + obj.HitPhysicalArea + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n\t&lt;item key=\"MageWeapon2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"MageWeapon2\", Mage Weapon)\n        ]]&gt;&lt;/item&gt;\n&lt;/m_props2&gt;\n</code></pre>\n<p>When you run this game below, answer Yes/No before doing anything else (you will see attributes being set, because of the debugging lines in the code). Then just open the Debugger and look at one of the objects in the weap_room (they are weapons except for: mag_props and alphabetdict). The function is adding random attributes, based upon an object's Rarity. So any object with a rarity greater than 11, will have at least ONE random attribute added. If you want to see what an object displays when you LOOK at it, just type LOOK SELF (x me) and three weapons will be added to the inventory. Just LOOK at one with a Rarity higher than 10.</p>\n<p>Thanks,</p>\n<ul>\n<li>Raist</li>\n</ul>\n\n",
      "PostDate": "2018-06-29T13:06:10.1428971Z",
      "LastEditDate": "2018-06-30T11:33:50.2569804Z",
      "link": null
    },
    {
      "PostId": "cd131a5f-7b3f-4b27-a8f6-a88aee029ed1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n<item>\r\n  <key>AttackChance2</key>\r\n  <value type=\"string\">\"Attack Chance: \" + obj.AttackChance + \"<br>\"</value>\r\n</item>\r\n```\r\n\r\nThere's your problem.\r\nThe value of the AttackChance2 attribute is the string `\"Attack Chance: \" + obj.AttackChance + \"<br>\"` - that exact sequence of characters, including the quotes and the plus signs. That is a string, not an expression.\r\n\r\n**Solution 1**\r\n\r\nYou can get it to be treated as an expression using the `Eval` function; but this is usually a bad idea because it increases your chance of bugs later.\r\n\r\nThis should work with your current `alphabetdict.alphabetdict`, but is inefficient:\r\n\r\n```\r\n<function name=\"Magical_Props\" parameters=\"obj\"><![CDATA[\r\n  dict = mag_props.alphabetdict\r\n  magical = NewStringDictionary()\r\n  keys = NewStringList()\r\n  foreach (key, dict) {\r\n    list add (keys, key)\r\n  }\r\n  if (GetInt(obj, \"rarity\") > 91) {\r\n    list = PickFiveStrings(keys)\r\n  }\r\n  else if (GetInt(obj, \"rarity\") > 71) {\r\n    list = PickFourStrings(keys)\r\n  }\r\n  else if (GetInt(obj, \"rarity\") > 51) {\r\n    list = PickThreeStrings(keys)\r\n  }\r\n  else if (GetInt(obj, \"rarity\") > 31) {\r\n    list = PickTwoStrings(keys)\r\n  }\r\n  else if (GetInt(obj, \"rarity\") > 11) {\r\n    list = PickOneStrings(keys)\r\n  }\r\n  else {\r\n    list = NewStringList()\r\n  }\r\n\r\n  foreach (key, list) {\r\n    val = DictionaryItem (dict, key)\r\n    set (obj, key, val)\r\n    // for debugging\r\n    msg (obj.name + \".\" + key + \" = \" + val)\r\n    // for debugging\r\n    msg (GetAttribute(obj, key))\r\n    dictionary add (magical, key + \"2\", val)\r\n  }\r\n  set (obj, \"m_props2\", magical)\r\n  Properties_List1 (obj)\r\n\r\n  msg (\"Magical properties added on \" + obj.name + \"\")\r\n]]></function>\r\n\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    props = obj.m_props2\r\n    dict = alphabetdict.alphabetdict\r\n    foreach (key, props) {\r\n      val = DictionaryItem (dict, key)\r\n      set (obj, key, Eval(val))\r\n      // for debugging\r\n      msg (obj.name + \".\" + key + \" = \" + val)\r\n      // for debugging\r\n      msg (GetAttribute(obj, key))\r\n    }\r\n    set (obj, \"m_props\", (obj.AttackChance2 + obj.BonusDex2 + obj.BonusHits2 + obj.BonusInt2 + obj.BonusMana2 + obj.BonusStam2 + obj.BonusStr2 + obj.Chaos2 + obj.Cold2 + obj.DefendChance2 + obj.Direct2 + obj.Energy2 + obj.Fire2 + obj.LowerManaCost2 + obj.Luck2 + obj.NightSight2 + obj.Physical2 + obj.Poison2 + obj.ReflectPhysical2 + obj.RegenHits2 + obj.RegenMana2 + obj.RegenStam2 + obj.ResistColdBonus2 + obj.ResistEnergyBonus2 + obj.ResistFireBonus2 + obj.ResistPhysicalBonus2 + obj.ResistPoisonBonus2 + obj.SpellChanneling2 + obj.SpellDamage2 + obj.WeaponDamage2 + obj.HitColdArea2 + obj.HitDispel2 + obj.HitEnergyArea2 + obj.HitFireArea2 + obj.HitFireball2 + obj.HitHarm2 + obj.HitLeechHits2 + obj.HitLeechMana2 + obj.HitLeechStam2 + obj.HitLightning2 + obj.HitLowerAttack2 + obj.HitLowerDefend2 + obj.HitMagicArrow2 + obj.HitPhysicalArea2 + obj.MageWeapon2))\r\n  </function>\r\n```\r\n(I've tidied up the code a bit, removing a lot of code which seems to make no difference at all, as well as adding the Eval. I figured that it's better to go through the whole thing, to make sure I'm not missing any nuances in how it works)\r\n\r\n**Solution 2**\r\n\r\nThis is more efficient code, and less likely to introduce bugs later. But you'd need to change your `alphabetdict.alphabetdict` to look like:\r\n```\r\n<item>\r\n  <key>AttackChance</key>\r\n  <value type=\"string\">Attack Chance</value>\r\n</item>\r\n```\r\n\r\nThen the code would be:\r\n```\r\n<function name=\"Magical_Props\" parameters=\"obj\"><![CDATA[\r\n  dict = mag_props.alphabetdict\r\n  keys = NewStringList()\r\n  foreach (key, dict) {\r\n    list add (keys, key)\r\n  }\r\n  list = NewStringList()\r\n  if (GetInt(obj, \"rarity\") > 11) {\r\n    for (i, 12, GetInt(obj, \"rarity\"), 20) {\r\n      list add (list, PickOneString(ListExclude (keys, list)))\r\n    }\r\n  }\r\n\r\n  foreach (key, list) {\r\n    val = DictionaryItem (dict, key)\r\n    set (obj, key, val)\r\n  }\r\n  Properties_List1 (obj)\r\n\r\n  msg (\"Magical properties added on \" + obj.name + \"\")\r\n]]></function>\r\n\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    dict = alphabetdict.alphabetdict\r\n    props = \"\"\r\n    foreach (key, dict) {\r\n      if (HasAttribute (obj, key)) {\r\n        label = DictionaryItem (dict, key)\r\n        val = label + \": \" + GetAttribute(obj, key) + \"<br/>\"\r\n        set (obj, key+2, val)\r\n        // for debugging\r\n        msg (obj.name + \".\" + key + \"2 = \" + val)\r\n        props = props + val\r\n      }\r\n    }\r\n    set (obj, \"m_props\", props)\r\n  </function>\r\n```\r\n(In this case, the `obj.m_props` string lists all the attributes in the order they appear in `alphabetdict.alphabetdict` rather than having a manual list of them. It's usually better to not have the same list of attributes in multiple places in your code; because if you come to add more attributes later, or if someone else is learning from your code, it doubles the chance of adding a typo or something)\r\n\r\nOf course, this option would only work if all the attributes should be displayed as `name: value<br>`.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>&lt;item&gt;\n  &lt;key&gt;AttackChance2&lt;/key&gt;\n  &lt;value type=\"string\"&gt;\"Attack Chance: \" + obj.AttackChance + \"&lt;br&gt;\"&lt;/value&gt;\n&lt;/item&gt;\n</code></pre>\n<p>There's your problem.<br>\nThe value of the AttackChance2 attribute is the string <code>\"Attack Chance: \" + obj.AttackChance + \"&lt;br&gt;\"</code> - that exact sequence of characters, including the quotes and the plus signs. That is a string, not an expression.</p>\n<p><strong>Solution 1</strong></p>\n<p>You can get it to be treated as an expression using the <code>Eval</code> function; but this is usually a bad idea because it increases your chance of bugs later.</p>\n<p>This should work with your current <code>alphabetdict.alphabetdict</code>, but is inefficient:</p>\n<pre><code>&lt;function name=\"Magical_Props\" parameters=\"obj\"&gt;&lt;![CDATA[\n  dict = mag_props.alphabetdict\n  magical = NewStringDictionary()\n  keys = NewStringList()\n  foreach (key, dict) {\n    list add (keys, key)\n  }\n  if (GetInt(obj, \"rarity\") &gt; 91) {\n    list = PickFiveStrings(keys)\n  }\n  else if (GetInt(obj, \"rarity\") &gt; 71) {\n    list = PickFourStrings(keys)\n  }\n  else if (GetInt(obj, \"rarity\") &gt; 51) {\n    list = PickThreeStrings(keys)\n  }\n  else if (GetInt(obj, \"rarity\") &gt; 31) {\n    list = PickTwoStrings(keys)\n  }\n  else if (GetInt(obj, \"rarity\") &gt; 11) {\n    list = PickOneStrings(keys)\n  }\n  else {\n    list = NewStringList()\n  }\n\n  foreach (key, list) {\n    val = DictionaryItem (dict, key)\n    set (obj, key, val)\n    // for debugging\n    msg (obj.name + \".\" + key + \" = \" + val)\n    // for debugging\n    msg (GetAttribute(obj, key))\n    dictionary add (magical, key + \"2\", val)\n  }\n  set (obj, \"m_props2\", magical)\n  Properties_List1 (obj)\n\n  msg (\"Magical properties added on \" + obj.name + \"\")\n]]&gt;&lt;/function&gt;\n\n&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    props = obj.m_props2\n    dict = alphabetdict.alphabetdict\n    foreach (key, props) {\n      val = DictionaryItem (dict, key)\n      set (obj, key, Eval(val))\n      // for debugging\n      msg (obj.name + \".\" + key + \" = \" + val)\n      // for debugging\n      msg (GetAttribute(obj, key))\n    }\n    set (obj, \"m_props\", (obj.AttackChance2 + obj.BonusDex2 + obj.BonusHits2 + obj.BonusInt2 + obj.BonusMana2 + obj.BonusStam2 + obj.BonusStr2 + obj.Chaos2 + obj.Cold2 + obj.DefendChance2 + obj.Direct2 + obj.Energy2 + obj.Fire2 + obj.LowerManaCost2 + obj.Luck2 + obj.NightSight2 + obj.Physical2 + obj.Poison2 + obj.ReflectPhysical2 + obj.RegenHits2 + obj.RegenMana2 + obj.RegenStam2 + obj.ResistColdBonus2 + obj.ResistEnergyBonus2 + obj.ResistFireBonus2 + obj.ResistPhysicalBonus2 + obj.ResistPoisonBonus2 + obj.SpellChanneling2 + obj.SpellDamage2 + obj.WeaponDamage2 + obj.HitColdArea2 + obj.HitDispel2 + obj.HitEnergyArea2 + obj.HitFireArea2 + obj.HitFireball2 + obj.HitHarm2 + obj.HitLeechHits2 + obj.HitLeechMana2 + obj.HitLeechStam2 + obj.HitLightning2 + obj.HitLowerAttack2 + obj.HitLowerDefend2 + obj.HitMagicArrow2 + obj.HitPhysicalArea2 + obj.MageWeapon2))\n  &lt;/function&gt;\n</code></pre>\n<p>(I've tidied up the code a bit, removing a lot of code which seems to make no difference at all, as well as adding the Eval. I figured that it's better to go through the whole thing, to make sure I'm not missing any nuances in how it works)</p>\n<p><strong>Solution 2</strong></p>\n<p>This is more efficient code, and less likely to introduce bugs later. But you'd need to change your <code>alphabetdict.alphabetdict</code> to look like:</p>\n<pre><code>&lt;item&gt;\n  &lt;key&gt;AttackChance&lt;/key&gt;\n  &lt;value type=\"string\"&gt;Attack Chance&lt;/value&gt;\n&lt;/item&gt;\n</code></pre>\n<p>Then the code would be:</p>\n<pre><code>&lt;function name=\"Magical_Props\" parameters=\"obj\"&gt;&lt;![CDATA[\n  dict = mag_props.alphabetdict\n  keys = NewStringList()\n  foreach (key, dict) {\n    list add (keys, key)\n  }\n  list = NewStringList()\n  if (GetInt(obj, \"rarity\") &gt; 11) {\n    for (i, 12, GetInt(obj, \"rarity\"), 20) {\n      list add (list, PickOneString(ListExclude (keys, list)))\n    }\n  }\n\n  foreach (key, list) {\n    val = DictionaryItem (dict, key)\n    set (obj, key, val)\n  }\n  Properties_List1 (obj)\n\n  msg (\"Magical properties added on \" + obj.name + \"\")\n]]&gt;&lt;/function&gt;\n\n&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    dict = alphabetdict.alphabetdict\n    props = \"\"\n    foreach (key, dict) {\n      if (HasAttribute (obj, key)) {\n        label = DictionaryItem (dict, key)\n        val = label + \": \" + GetAttribute(obj, key) + \"&lt;br/&gt;\"\n        set (obj, key+2, val)\n        // for debugging\n        msg (obj.name + \".\" + key + \"2 = \" + val)\n        props = props + val\n      }\n    }\n    set (obj, \"m_props\", props)\n  &lt;/function&gt;\n</code></pre>\n<p>(In this case, the <code>obj.m_props</code> string lists all the attributes in the order they appear in <code>alphabetdict.alphabetdict</code> rather than having a manual list of them. It's usually better to not have the same list of attributes in multiple places in your code; because if you come to add more attributes later, or if someone else is learning from your code, it doubles the chance of adding a typo or something)</p>\n<p>Of course, this option would only work if all the attributes should be displayed as <code>name: value&lt;br&gt;</code>.</p>\n\n",
      "PostDate": "2018-06-29T13:35:22.7026992Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5b4f8a6b-e7b9-4ab4-b0e0-55e83c90b791",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, just saw your post about making m_props2 a scriptdictionary.\r\n\r\nPretty sure this isn't what you want to do. Because a scriptdictionary's values are *scripts*. If you just want to combine a string and an attribute (and you want to combine them all in different ways), you would want a dictionary of *expressions*. In which case you have a stringdictionary, and use `Eval` as in my example above.\r\n\r\nIf all you want to do is make AttributeName2 equal to `\"Attribute Name: \"+value of attribute + \"<br>\"` then put that expression in the second function, as in my second example. There's no need for the dictionary to contain code at all.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, just saw your post about making m_props2 a scriptdictionary.</p>\n<p>Pretty sure this isn't what you want to do. Because a scriptdictionary's values are <em>scripts</em>. If you just want to combine a string and an attribute (and you want to combine them all in different ways), you would want a dictionary of <em>expressions</em>. In which case you have a stringdictionary, and use <code>Eval</code> as in my example above.</p>\n<p>If all you want to do is make AttributeName2 equal to <code>\"Attribute Name: \"+value of attribute + \"&lt;br&gt;\"</code> then put that expression in the second function, as in my second example. There's no need for the dictionary to contain code at all.</p>\n\n",
      "PostDate": "2018-06-29T13:42:10.3700875Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a907d27f-e7ae-471c-a27c-a899ed10e39f",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the reply mrangel,\r\nI changed the functions to what you have above and the result does work. However, it displays every attribute, when it should only display the attributes with values greater than 0.\r\n\r\nThat was why I was adding them to a temporary list, putting that list into an attribute and then calling the value of that attribute to display the string/int combinations. Having an attribute hold this value, allows me to compare it to the list of keys with the string/int combinations.\r\n\r\n\r\nEDIT: Just saw your other post. KV brought up the ScriptDictionary because that was the only way to get Quest to recognize a String with an Int. Each key would have a value like:\r\n```\r\n<item key=\"AttackChance2\"><![CDATA[\r\n          obj = this\r\n          set (obj, \"AttackChance2\", Attack Chance: \" + obj.AttackChance + \"<br>)\r\n        ]]></item>\r\n```\r\nThat shows -  Attack Chance: (script)\r\nI tried setting the variable in different ways, adding a return function, the result was always (script).",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the reply mrangel,<br>\nI changed the functions to what you have above and the result does work. However, it displays every attribute, when it should only display the attributes with values greater than 0.</p>\n<p>That was why I was adding them to a temporary list, putting that list into an attribute and then calling the value of that attribute to display the string/int combinations. Having an attribute hold this value, allows me to compare it to the list of keys with the string/int combinations.</p>\n<p>EDIT: Just saw your other post. KV brought up the ScriptDictionary because that was the only way to get Quest to recognize a String with an Int. Each key would have a value like:</p>\n<pre><code>&lt;item key=\"AttackChance2\"&gt;&lt;![CDATA[\n          obj = this\n          set (obj, \"AttackChance2\", Attack Chance: \" + obj.AttackChance + \"&lt;br&gt;)\n        ]]&gt;&lt;/item&gt;\n</code></pre>\n<p>That shows -  Attack Chance: (script)<br>\nI tried setting the variable in different ways, adding a return function, the result was always (script).</p>\n\n",
      "PostDate": "2018-06-29T14:22:50.5906431Z",
      "LastEditDate": "2018-06-29T14:29:38.966741Z",
      "link": null
    },
    {
      "PostId": "7c3a45f9-fd68-4ba0-b289-5dcb0616d0ed",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you have a script dictionary, you would need to do:\r\n\r\n```\r\nparams = NewDictionary()\r\ndictionary add (params, \"obj\", obj)\r\ninvoke (val, params)\r\n```\r\n(And remove the line `obj = this`, because `this` doesn't have any meaning in a script dictionary)\r\n\r\nWith a string dictionary where the string is an expression, you'd have:\r\n```\r\nparams = NewDictionary()\r\ndictionary add (params, \"obj\", obj)\r\nset (obj, key, Eval (val, params))\r\n```\r\n\r\n> That was why I was adding them to a temporary list, putting that list into an attribute and then calling the value of that attribute to display the string/int combinations.\r\n\r\nMight make more sense to pass the list to the second function, rather than saving it as an attribute. Unless you need to access it later.\r\n\r\n> However, it displays every attribute, when it should only display the attributes with values greater than 0.\r\n\r\nAh, let's try to fix that…\r\n```\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    dict = mag_props.alphabetdict\r\n    props = \"\"\r\n    foreach (key, dict) {\r\n      if (HasAttribute (obj, key)) {\r\n        if (IsInt (obj.key) and ToInt (obj.key) > 0) {\r\n          val = UnCamelCase (key) + \": \" + GetAttribute(obj, key) + \"<br/>\"\r\n          set (obj, key+2, val)\r\n          // for debugging\r\n          msg (obj.name + \".\" + key + \"2 = \" + val)\r\n          props = props + val\r\n        }\r\n      }\r\n    }\r\n    set (obj, \"m_props\", props)\r\n  </function>\r\n\r\n  <function name=\"UnCamelCase\" parameters=\"input\" type=\"string\">\r\n    output = \"\"\r\n    for (i, 1, LengthOf(input)) {\r\n      letter = Mid (input, i, 1)\r\n      if (letter = UCase (letter) and not output = \"\") {\r\n        output = output + \" \"\r\n      }\r\n      output = output + letter\r\n    }\r\n    return (output)\r\n  </function>\r\n```\r\n(This version should work with the version of Magical_Props in my solution 2; any better?)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you have a script dictionary, you would need to do:</p>\n<pre><code>params = NewDictionary()\ndictionary add (params, \"obj\", obj)\ninvoke (val, params)\n</code></pre>\n<p>(And remove the line <code>obj = this</code>, because <code>this</code> doesn't have any meaning in a script dictionary)</p>\n<p>With a string dictionary where the string is an expression, you'd have:</p>\n<pre><code>params = NewDictionary()\ndictionary add (params, \"obj\", obj)\nset (obj, key, Eval (val, params))\n</code></pre>\n<blockquote>\n<p>That was why I was adding them to a temporary list, putting that list into an attribute and then calling the value of that attribute to display the string/int combinations.</p>\n</blockquote>\n<p>Might make more sense to pass the list to the second function, rather than saving it as an attribute. Unless you need to access it later.</p>\n<blockquote>\n<p>However, it displays every attribute, when it should only display the attributes with values greater than 0.</p>\n</blockquote>\n<p>Ah, let's try to fix that…</p>\n<pre><code>&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    dict = mag_props.alphabetdict\n    props = \"\"\n    foreach (key, dict) {\n      if (HasAttribute (obj, key)) {\n        if (IsInt (obj.key) and ToInt (obj.key) &gt; 0) {\n          val = UnCamelCase (key) + \": \" + GetAttribute(obj, key) + \"&lt;br/&gt;\"\n          set (obj, key+2, val)\n          // for debugging\n          msg (obj.name + \".\" + key + \"2 = \" + val)\n          props = props + val\n        }\n      }\n    }\n    set (obj, \"m_props\", props)\n  &lt;/function&gt;\n\n  &lt;function name=\"UnCamelCase\" parameters=\"input\" type=\"string\"&gt;\n    output = \"\"\n    for (i, 1, LengthOf(input)) {\n      letter = Mid (input, i, 1)\n      if (letter = UCase (letter) and not output = \"\") {\n        output = output + \" \"\n      }\n      output = output + letter\n    }\n    return (output)\n  &lt;/function&gt;\n</code></pre>\n<p>(This version should work with the version of Magical_Props in my solution 2; any better?)</p>\n\n",
      "PostDate": "2018-06-29T15:31:34.8878874Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2860147c-2cf4-49c2-97e2-5b7cf838d159",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for clarifying the ScriptDictionary, that makes sense now.\r\nAdding the list to an attribute is not a huge deal, I can always put it back in if I DO need to access that list for some reason. I just thought it might work better to \"write\" it to an attribute during initialise.\r\n\r\nI adjusted my game to the above code. You have a function added that I do not have. I just downloaded Quest 5.8 beta 11 to be sure.\r\nIsInt\r\nError running script: Error compiling expression 'IsInt (obj,key) and ToInt(obj,key) > 0':\r\nFunctionCallElement: Could not find function 'IsInt(Object)'\r\n\r\nHopefully that is all it is. It seems like the code would work from looking at it. I understand that you cannot compare a Str and an Int, without converting one to the other first. In creating a new Dictionary, Quest changes the value to a string. If it remains an Integer, it simplifies this process a ton. Because then all I have to do is add an attribute to a list if it is greater than 0, set obj.mag_props = list. Because Quest changes the Dictionary to a StringDictionary, all of this has become increasingly...educational. For example, I started with:\r\n```\r\n<alphabetdict type=\"dictionary\">\r\n  <item>\r\n        <key>AttackChance</key>\r\n        <value>1</value>\r\n   </item>\r\n```\r\n\r\nWhen I switched from Code view and back again, Quest changed it to:\r\n```\r\n<alphabetdict type=\"dictionary\">\r\n  <item>\r\n        <key>AttackChance</key>\r\n        <value type=\"string\">1</value>\r\n   </item>\r\n```\r\n\r\nI don't know if it is supposed to do that or not, but after that this was the direction KV helped point me in (most of the code came from KV, I just changed values here and there to see if I could get what I wanted without pestering everyone again).\r\n\r\nThanks,\r\n - Raist",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for clarifying the ScriptDictionary, that makes sense now.<br>\nAdding the list to an attribute is not a huge deal, I can always put it back in if I DO need to access that list for some reason. I just thought it might work better to \"write\" it to an attribute during initialise.</p>\n<p>I adjusted my game to the above code. You have a function added that I do not have. I just downloaded Quest 5.8 beta 11 to be sure.<br>\nIsInt<br>\nError running script: Error compiling expression 'IsInt (obj,key) and ToInt(obj,key) &gt; 0':<br>\nFunctionCallElement: Could not find function 'IsInt(Object)'</p>\n<p>Hopefully that is all it is. It seems like the code would work from looking at it. I understand that you cannot compare a Str and an Int, without converting one to the other first. In creating a new Dictionary, Quest changes the value to a string. If it remains an Integer, it simplifies this process a ton. Because then all I have to do is add an attribute to a list if it is greater than 0, set obj.mag_props = list. Because Quest changes the Dictionary to a StringDictionary, all of this has become increasingly...educational. For example, I started with:</p>\n<pre><code>&lt;alphabetdict type=\"dictionary\"&gt;\n  &lt;item&gt;\n        &lt;key&gt;AttackChance&lt;/key&gt;\n        &lt;value&gt;1&lt;/value&gt;\n   &lt;/item&gt;\n</code></pre>\n<p>When I switched from Code view and back again, Quest changed it to:</p>\n<pre><code>&lt;alphabetdict type=\"dictionary\"&gt;\n  &lt;item&gt;\n        &lt;key&gt;AttackChance&lt;/key&gt;\n        &lt;value type=\"string\"&gt;1&lt;/value&gt;\n   &lt;/item&gt;\n</code></pre>\n<p>I don't know if it is supposed to do that or not, but after that this was the direction KV helped point me in (most of the code came from KV, I just changed values here and there to see if I could get what I wanted without pestering everyone again).</p>\n<p>Thanks,</p>\n<ul>\n<li>Raist</li>\n</ul>\n\n",
      "PostDate": "2018-06-29T16:26:59.8606058Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff01e029-55b1-4bee-8b0a-9fc97e0b0273",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I adjusted my game to the above code. You have a function added that I do not have.\r\n\r\nSorry; blame autocomplete.\r\n\r\nWas typing on my phone, and sometimes it makes weird changes. In this case, it recognised a tap as a tap-and-hold, and did a search and replace.\r\n\r\n> If it remains an Integer, it simplifies this process a ton.\r\n\r\nOK. I'll fix the error in my previous code, and also force the attribute to be saved as an integer for convenience.\r\nI've got RL stuff to deal with now; but I should have it done for you in about half an hour.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I adjusted my game to the above code. You have a function added that I do not have.</p>\n</blockquote>\n<p>Sorry; blame autocomplete.</p>\n<p>Was typing on my phone, and sometimes it makes weird changes. In this case, it recognised a tap as a tap-and-hold, and did a search and replace.</p>\n<blockquote>\n<p>If it remains an Integer, it simplifies this process a ton.</p>\n</blockquote>\n<p>OK. I'll fix the error in my previous code, and also force the attribute to be saved as an integer for convenience.<br>\nI've got RL stuff to deal with now; but I should have it done for you in about half an hour.</p>\n\n",
      "PostDate": "2018-06-29T16:38:58.5387018Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c93e4247-43a4-4137-8eb5-7f063a036221",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n<function name=\"Magical_Props\" parameters=\"obj\"><![CDATA[\r\n  dict = mag_props.alphabetdict\r\n  keys = NewStringList()\r\n  foreach (key, dict) {\r\n    list add (keys, key)\r\n  }\r\n  list = NewStringList()\r\n  if (GetInt(obj, \"rarity\") > 11) {\r\n    for (i, 12, GetInt(obj, \"rarity\"), 20) {\r\n      list add (list, PickOneString(ListExclude (keys, list)))\r\n    }\r\n  }\r\n\r\n  foreach (key, list) {\r\n    val = DictionaryItem (dict, key)\r\n    if (IsInt (val)) {\r\n      val = ToInt (val)\r\n    }\r\n    set (obj, key, val)\r\n  }\r\n  Properties_List1 (obj)\r\n\r\n  msg (\"Magical properties added on \" + obj.name + \"\")\r\n]]></function>\r\n\r\n<function name=\"Properties_List1\" parameters=\"obj\" type=\"list\">\r\n    dict = mag_props.alphabetdict\r\n    props = \"\"\r\n    foreach (key, dict) {\r\n      if (HasInt (obj, key)) {\r\n        if (GetInt(obj, key) > 0) {\r\n          val = UnCamelCase (key) + \": \" + GetInt(obj, key) + \"<br/>\"\r\n          set (obj, key+2, val)\r\n          // for debugging\r\n          msg (obj.name + \".\" + key + \"2 = \" + val)\r\n          props = props + val\r\n        }\r\n      }\r\n    }\r\n    set (obj, \"m_props\", props)\r\n  </function>\r\n\r\n  <function name=\"UnCamelCase\" parameters=\"input\" type=\"string\">\r\n    output = \"\"\r\n    for (i, 1, LengthOf(input)) {\r\n      letter = Mid (input, i, 1)\r\n      if (letter = UCase (letter) and not output = \"\") {\r\n        output = output + \" \"\r\n      }\r\n      output = output + letter\r\n    }\r\n    return (output)\r\n  </function>\r\n```\r\nDoes that work as expected?\r\n\r\nI removed the second dictionary `alphabetdict.alphabetdict` here. You can add it back if you prefer.\r\nBut one of the most common ways to add bugs, and the place you find the hardest bugs to track down, is if you have the same list of attributes in 3 different places in the code, and one of them has a typo or something. So I think it's nearly always better to only have the list in one place. In this case, `mag_props.alphabetdict`.\r\n\r\nIf you need to have more than one dictionary, let me know and I can change it back. But before you include 2 copies of the same data, think about why it's necessary.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>&lt;function name=\"Magical_Props\" parameters=\"obj\"&gt;&lt;![CDATA[\n  dict = mag_props.alphabetdict\n  keys = NewStringList()\n  foreach (key, dict) {\n    list add (keys, key)\n  }\n  list = NewStringList()\n  if (GetInt(obj, \"rarity\") &gt; 11) {\n    for (i, 12, GetInt(obj, \"rarity\"), 20) {\n      list add (list, PickOneString(ListExclude (keys, list)))\n    }\n  }\n\n  foreach (key, list) {\n    val = DictionaryItem (dict, key)\n    if (IsInt (val)) {\n      val = ToInt (val)\n    }\n    set (obj, key, val)\n  }\n  Properties_List1 (obj)\n\n  msg (\"Magical properties added on \" + obj.name + \"\")\n]]&gt;&lt;/function&gt;\n\n&lt;function name=\"Properties_List1\" parameters=\"obj\" type=\"list\"&gt;\n    dict = mag_props.alphabetdict\n    props = \"\"\n    foreach (key, dict) {\n      if (HasInt (obj, key)) {\n        if (GetInt(obj, key) &gt; 0) {\n          val = UnCamelCase (key) + \": \" + GetInt(obj, key) + \"&lt;br/&gt;\"\n          set (obj, key+2, val)\n          // for debugging\n          msg (obj.name + \".\" + key + \"2 = \" + val)\n          props = props + val\n        }\n      }\n    }\n    set (obj, \"m_props\", props)\n  &lt;/function&gt;\n\n  &lt;function name=\"UnCamelCase\" parameters=\"input\" type=\"string\"&gt;\n    output = \"\"\n    for (i, 1, LengthOf(input)) {\n      letter = Mid (input, i, 1)\n      if (letter = UCase (letter) and not output = \"\") {\n        output = output + \" \"\n      }\n      output = output + letter\n    }\n    return (output)\n  &lt;/function&gt;\n</code></pre>\n<p>Does that work as expected?</p>\n<p>I removed the second dictionary <code>alphabetdict.alphabetdict</code> here. You can add it back if you prefer.<br>\nBut one of the most common ways to add bugs, and the place you find the hardest bugs to track down, is if you have the same list of attributes in 3 different places in the code, and one of them has a typo or something. So I think it's nearly always better to only have the list in one place. In this case, <code>mag_props.alphabetdict</code>.</p>\n<p>If you need to have more than one dictionary, let me know and I can change it back. But before you include 2 copies of the same data, think about why it's necessary.</p>\n\n",
      "PostDate": "2018-06-29T16:49:36.381078Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d176c0e5-c4f2-4236-b8e2-4840e12e8d0c",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "And there it is.\r\nThanks mrangel, that worked exactly as I saw in my head. I was thinking I might need three lists to cross-reference from AttackChance->AttackChance2->Attack Chance: 2, so that was why I was using two lists, one had the String values with the Ints that wasn't displaying.\r\n\r\nI appreciate you both taking the time to give me a hand. Thanks for all of the help.\r\n- Raist",
      "EditableFormat": "markdown",
      "HTML": "<p>And there it is.<br>\nThanks mrangel, that worked exactly as I saw in my head. I was thinking I might need three lists to cross-reference from AttackChance-&gt;AttackChance2-&gt;Attack Chance: 2, so that was why I was using two lists, one had the String values with the Ints that wasn't displaying.</p>\n<p>I appreciate you both taking the time to give me a hand. Thanks for all of the help.</p>\n<ul>\n<li>Raist</li>\n</ul>\n\n",
      "PostDate": "2018-06-29T17:00:16.9584771Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
