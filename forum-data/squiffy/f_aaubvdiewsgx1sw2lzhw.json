{
  "Topic": {
    "TopicId": "f_aaubvdiewsgx1sw2lzhw",
    "ForumId": "24",
    "Title": "Are there BUT or OR statements?",
    "LastUpdated": "2021-05-05T13:48:41.508523Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7651a8c2-1ee7-4212-a766-a592bea2cc62",
      "UserId": 518999,
      "Username": "Mr.Dot",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f4786663e44a09a9cd2d148a7e6cf553?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For example:\r\n```\r\n[[section]]:\r\n\r\n'Oooh! Jam!'\r\n\r\n[[Take Jam]]\r\n[[Take Jam]]:\r\n[Eat Jam] or [Save Jam]\r\n\r\n[Eat Jam]:\r\n{if seen Take Jam:'Yummy!'}{else:You don't have jam}\r\n\r\n[Save Jam]:\r\n\r\n[Eat Jam](boop) or [Throw Jam Away]\r\n\r\n[boop]:\r\n{if seen Take Jam:'Yummy!'}{but if seen Eat Jam or Throw Jam Away:You don't have jam}{else:You don't have jam}\r\n\r\n[Throw Jam Away]:\r\nYou threw the jam away.\r\n```\r\n?",
      "EditableFormat": "markdown",
      "HTML": "<p>For example:</p>\n<pre><code>[[section]]:\n\n'Oooh! Jam!'\n\n[[Take Jam]]\n[[Take Jam]]:\n[Eat Jam] or [Save Jam]\n\n[Eat Jam]:\n{if seen Take Jam:'Yummy!'}{else:You don't have jam}\n\n[Save Jam]:\n\n[Eat Jam](boop) or [Throw Jam Away]\n\n[boop]:\n{if seen Take Jam:'Yummy!'}{but if seen Eat Jam or Throw Jam Away:You don't have jam}{else:You don't have jam}\n\n[Throw Jam Away]:\nYou threw the jam away.\n</code></pre>\n<p>?</p>\n\n",
      "PostDate": "2021-05-05T13:48:41.508523Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "873335ca-c3ca-447e-96ec-d4dad3827ef9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Your `but` construct is weird - it would be impossible to add that with Squiffy as it currently stands, because it would need to look at *all* of the code in a text section before displaying any of it. At present, when squiffy sees `{if`, it processes the condition, displays its contents or doesn't, and then moves on to the next bit (storing a little data in case of an `{else`. But your structure seems to assume that `{but` can make it go back and change a part that has already been displayed.\r\n\r\nHowever, if I understand correctly, your construct:\r\n```\r\n{if A:B}{but if C:D}\r\n```\r\ncould be rearranged as:\r\n```\r\n{if A:{if C:D}{else:B}}\r\n```\r\nThat allows the blocks to be processed in the order the interpreter sees them. It seems to do the same thing.\r\n\r\nIt's been suggested before that there should be an `or` operator… I think it would be a good idea, but it's not currently an option. For now I think you will need to have some of your 'else' clauses repeated, or use temporary attributes to keep track of stuff like that. Or use javascript.\r\n\r\nExample:\r\n```\r\n{if seen Take Jam:{@has_jam}}\r\n{if seen Eat Jam:{@not has_jam}}\r\n{if seen Throw Jam Away:{@not has_jam}}\r\n{if has_jam:‘Yummy!’}{else:You don't have jam.}\r\n```\r\nor using javascript:\r\n```\r\n    squiffy.story.set('has_jam', squiffy.story.seen('Take Jam') and not (squiffy.story.seen('Eat Jam') or squiffy.story.seen('Throw Jam Away')))\r\n{if has_jam:‘Yummy!’}{else:You don't have jam.}\r\n```\r\n\r\nOr more logically, for an inventory system:\r\n<pre><code>[[section]]:\r\n\r\n'Oooh! Jam!'\r\n\r\n[[Take Jam]]\r\n[[Take Jam]]:\r\n<b style=\"color:green\">@set has_jam</b>\r\n[Eat Jam] or [Save Jam]\r\n\r\n[Eat Jam]:\r\n<b style=\"color:green\">@set not has_jam</b>\r\n{if seen Take Jam:'Yummy!'}{else:You don't have jam}\r\n\r\n[Save Jam]:\r\n\r\n[Eat Jam](boop) or [Throw Jam Away]\r\n\r\n[boop]:\r\n{<b style=\"color:green\">if has_jam</b>:'Yummy!'}{else:You don't have jam}\r\n\r\n[Throw Jam Away]:\r\n<b style=\"color:green\">@set not has_jam</b>\r\nYou threw the jam away.</code></pre>\r\n\r\nDoing it like that means that if you later decide the player can use the jam somewhere else, you don't need to go back and change the `if` statements everywhere the jam is checked for.",
      "EditableFormat": "markdown",
      "HTML": "<p>Your <code>but</code> construct is weird - it would be impossible to add that with Squiffy as it currently stands, because it would need to look at <em>all</em> of the code in a text section before displaying any of it. At present, when squiffy sees <code>{if</code>, it processes the condition, displays its contents or doesn't, and then moves on to the next bit (storing a little data in case of an <code>{else</code>. But your structure seems to assume that <code>{but</code> can make it go back and change a part that has already been displayed.</p>\n<p>However, if I understand correctly, your construct:</p>\n<pre><code>{if A:B}{but if C:D}\n</code></pre>\n<p>could be rearranged as:</p>\n<pre><code>{if A:{if C:D}{else:B}}\n</code></pre>\n<p>That allows the blocks to be processed in the order the interpreter sees them. It seems to do the same thing.</p>\n<p>It's been suggested before that there should be an <code>or</code> operator… I think it would be a good idea, but it's not currently an option. For now I think you will need to have some of your 'else' clauses repeated, or use temporary attributes to keep track of stuff like that. Or use javascript.</p>\n<p>Example:</p>\n<pre><code>{if seen Take Jam:{@has_jam}}\n{if seen Eat Jam:{@not has_jam}}\n{if seen Throw Jam Away:{@not has_jam}}\n{if has_jam:‘Yummy!’}{else:You don't have jam.}\n</code></pre>\n<p>or using javascript:</p>\n<pre><code>    squiffy.story.set('has_jam', squiffy.story.seen('Take Jam') and not (squiffy.story.seen('Eat Jam') or squiffy.story.seen('Throw Jam Away')))\n{if has_jam:‘Yummy!’}{else:You don't have jam.}\n</code></pre>\n<p>Or more logically, for an inventory system:</p>\n<pre><code>[[section]]:\n\n'Oooh! Jam!'\n\n[[Take Jam]]\n[[Take Jam]]:\n<b style=\"color: green\">@set has_jam</b>\n[Eat Jam] or [Save Jam]\n\n[Eat Jam]:\n<b style=\"color: green\">@set not has_jam</b>\n{if seen Take Jam:'Yummy!'}{else:You don't have jam}\n\n[Save Jam]:\n\n[Eat Jam](boop) or [Throw Jam Away]\n\n[boop]:\n{<b style=\"color: green\">if has_jam</b>:'Yummy!'}{else:You don't have jam}\n\n[Throw Jam Away]:\n<b style=\"color: green\">@set not has_jam</b>\nYou threw the jam away.</code></pre>\n<p>Doing it like that means that if you later decide the player can use the jam somewhere else, you don't need to go back and change the <code>if</code> statements everywhere the jam is checked for.</p>\n\n",
      "PostDate": "2021-05-05T21:44:55.6393631Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
