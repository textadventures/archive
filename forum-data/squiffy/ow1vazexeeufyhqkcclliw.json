{
  "Topic": {
    "TopicId": "ow1vazexeeufyhqkcclliw",
    "ForumId": "24",
    "Title": "Squiffy arrays",
    "LastUpdated": "2022-04-26T21:07:11.7477812Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2e528019-0d4b-4e40-b353-178eaef73b10",
      "UserId": 251768,
      "Username": "Bluevoss",
      "AvatarUrl": "https://i.imgur.com/6mfIIbhb.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey, here's a cute trick I started using in my \"Pathfinder\" game. This creates arrays using javascript functions, but they are in squiffy variables and can last across the duration of your game.\r\n\r\n```\r\n[[function]]:\r\n\r\n    squiffy.setArray=function(id, value){\r\n        set(\"array\"+id,value);\r\n    }    \r\n\r\n    squiffy.getArray=function(id){\r\n        return(get(\"array\"+id));\r\n    }\r\n    \r\n    squiffy.story.go(\"initialize array\");\r\n\r\n[[initialize array]]:\r\n\r\n    var loopCnt;\r\n    \r\n    //showing how a JS loop can work the array, inserting loop+5 values\r\n    for (loopCnt=1; loopCnt<=3; loopCnt++){\r\n        squiffy.setArray(loopCnt, loopCnt+5)\r\n    }\r\n    \r\nValues loaded by loop\r\n\r\n[[Fetch them back]]\r\n\r\n[[Fetch them back]]:\r\n\r\n    set(\"val1\",squiffy.getArray(1));\r\n    set(\"val2\",squiffy.getArray(2));\r\n    set(\"val3\",squiffy.getArray(3));\r\n\r\nValues should be 5+id, or 6,7,8...\r\n\r\n{val1}<br>\r\n{val2}<br>\r\n{val3}<br>\r\n```\r\nIf you have questions, let me know. Basically, the functions allow easy access off a poor-man's array index. You can load values in and pull them out fairly easily. And, if you don't want to bother (for single fetches, say, you can always just pull them out directly using the squiffy name (i.e. {array1})).\r\n\r\nI use this for the various \"Pathfinder\" minigames to allow easier access to 2D and 3D maps. You might find a use for it. Enjoy!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey, here's a cute trick I started using in my \"Pathfinder\" game. This creates arrays using javascript functions, but they are in squiffy variables and can last across the duration of your game.</p>\n<pre><code>[[function]]:\n\n    squiffy.setArray=function(id, value){\n        set(\"array\"+id,value);\n    }    \n\n    squiffy.getArray=function(id){\n        return(get(\"array\"+id));\n    }\n    \n    squiffy.story.go(\"initialize array\");\n\n[[initialize array]]:\n\n    var loopCnt;\n    \n    //showing how a JS loop can work the array, inserting loop+5 values\n    for (loopCnt=1; loopCnt&lt;=3; loopCnt++){\n        squiffy.setArray(loopCnt, loopCnt+5)\n    }\n    \nValues loaded by loop\n\n[[Fetch them back]]\n\n[[Fetch them back]]:\n\n    set(\"val1\",squiffy.getArray(1));\n    set(\"val2\",squiffy.getArray(2));\n    set(\"val3\",squiffy.getArray(3));\n\nValues should be 5+id, or 6,7,8...\n\n{val1}&lt;br&gt;\n{val2}&lt;br&gt;\n{val3}&lt;br&gt;\n</code></pre>\n<p>If you have questions, let me know. Basically, the functions allow easy access off a poor-man's array index. You can load values in and pull them out fairly easily. And, if you don't want to bother (for single fetches, say, you can always just pull them out directly using the squiffy name (i.e. {array1})).</p>\n<p>I use this for the various \"Pathfinder\" minigames to allow easier access to 2D and 3D maps. You might find a use for it. Enjoy!</p>\n\n",
      "PostDate": "2022-04-26T21:07:11.7477812Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
