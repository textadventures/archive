{
  "Topic": {
    "TopicId": "1pse3rhtgeegw563gyt5nq",
    "ForumId": "10",
    "Title": "Skills, attributes ( like health, Magicka, stamina), and classes",
    "LastUpdated": "2018-11-26T01:23:50.0324082Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "81e09025-54ce-4ea2-9309-dd85b4911385",
      "UserId": 387279,
      "Username": "Mephilis78",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've been looking through the Quest Tutorial, and as of yet, I have found no way to implement anything like skills, attributes, or classes like what you would see in Fallout, TES, or basically any other D&D inspired CRPG. Perhaps I'm looking in the wrong place, or there is no way to implement such mechanics. \r\n\r\nDoes anyone have any ideas about how to do this, or what part of the tutorial I should look in? Also, I would like to know if there is a way to use a RNG for things like combat and character interaction?\r\n\r\nI've been going through the Lone Wolf series via a cellphone app, and have been inspired to make a similar thing but with more complicated D&D style mechanics. Actually several if I can manage it. So many ideas......so little time.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've been looking through the Quest Tutorial, and as of yet, I have found no way to implement anything like skills, attributes, or classes like what you would see in Fallout, TES, or basically any other D&amp;D inspired CRPG. Perhaps I'm looking in the wrong place, or there is no way to implement such mechanics.</p>\n<p>Does anyone have any ideas about how to do this, or what part of the tutorial I should look in? Also, I would like to know if there is a way to use a RNG for things like combat and character interaction?</p>\n<p>I've been going through the Lone Wolf series via a cellphone app, and have been inspired to make a similar thing but with more complicated D&amp;D style mechanics. Actually several if I can manage it. So many ideas......so little time.</p>\n\n",
      "PostDate": "2018-11-26T01:23:50.0324082Z",
      "LastEditDate": "2018-11-26T01:25:55.4374819Z",
      "link": null
    },
    {
      "PostId": "7891c7a9-7d2b-48be-ac2c-80d341e478ad",
      "UserId": 383686,
      "Username": "myarichuk",
      "AvatarUrl": "https://i.imgur.com/B2r7Dfxb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi,\r\nThere are no predefined attributes like in TES or Fallout engines, but it is possible to implement them, it just requires some work.\r\n[In this repository](https://github.com/myarichuk/Opend6) you can see my very incomplete (and still ongoing) work to implement d&d style RPG system.\r\n\r\nThe main idea is to have base types with numeric properties like \"strength\" or \"agility\" and have NPCs and player inherit from those types. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,<br>\nThere are no predefined attributes like in TES or Fallout engines, but it is possible to implement them, it just requires some work.<br>\n<a href=\"https://github.com/myarichuk/Opend6\">In this repository</a> you can see my very incomplete (and still ongoing) work to implement d&amp;d style RPG system.</p>\n<p>The main idea is to have base types with numeric properties like \"strength\" or \"agility\" and have NPCs and player inherit from those types.</p>\n\n",
      "PostDate": "2018-11-26T02:23:23.4285673Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "26f2a9a0-19d2-4280-a82a-a215c872539a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's some links/guides to get you started:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\nask if you need help with anything or are confused about anything",
      "EditableFormat": "markdown",
      "HTML": "<p>here's some links/guides to get you started:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>ask if you need help with anything or are confused about anything</p>\n\n",
      "PostDate": "2018-11-26T06:46:08.9225578Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a3b6f48c-0355-40b1-9d19-e586e37720fe",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-------------------\r\n\r\nData (VARIABLES: Attribute and Variable, and their: Value) Types:\r\n\r\n(these are how to create and apply, along with actions which this post does NOT cover: scripting: an_Object's_Script_Attributes/Functions/Commands/Turnscripts/Timers/etc,  a game's stats/attributes/skills/text-dialogue-messages/events/etc-etc-etc)\r\n\r\n------------------------\r\n\r\nVARIABLES:\r\n-> Attributes: global scope (due to being \"attached\", contained within, an Object) and \"permanent\" (so long as the Object containing the Attribute, exists or still exists, of course): player.strength = 100\r\n-> Variables: local scope (can NOT be used outside of its scripting, due to NOT being \"attached\", NOT contained within, an Object) and temporary (ceases to exist when its scripting is completed): strength = 100\r\n-> Parameters/Arguments: deals with Functions/Commands/etc? (basically they're VARIABLES or direct/literal VALUES inputted into the Function/Command/etc for it to then use them within its scripting)\r\n\r\n------------\r\n\r\nThe 'String' Data Type:\r\n\r\na collection of characters (alphabet and numeric/numbers) and/or (some) symbols\r\n\r\nanything encased within the double quotes is a String\r\n\r\n\"a\"\r\n\"abc\"\r\n\r\n\"1\" // this is a String Value due to the double quotes, and NOT an amount (integer:non-decimal/double:decimal) value, you can NOT do arithmetic (addition, subtraction, multiplication, division) on string values\r\n\r\n\"123\" // this is a String Value due to the double quotes, and NOT an amount (integer/double) value, you can NOT do arithmetic (addition, subtraction, multiplication, division) on string values\r\n\r\n\"abc123\"\r\n\"abc_123\"\r\n\"Hi, welcome to my game, I hope you enjoy it\"\r\n\r\ngame.intro = \"Hi, welcome to my game, I hope you enjoy it\"\r\n\r\nplayer.condition = \"normal\"\r\nplayer.condition = \"poisoned\"\r\nplayer.condition = \"dead\"\r\n\r\n-------------------\r\n\r\nThe 'Boolean' Data Type:\r\n\r\ntrue\r\nfalse\r\n\r\n(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Boolean Values)\r\n\r\nthe 'true/false' are special/reserved values for Booleans\r\n\r\nplayer.poisoned = false\r\nplayer.poisoned = true\r\n\r\nplayer.flying = false\r\nplayer.flying = true\r\n\r\nhandled = true\r\nhandled = false\r\n\r\ntv.switchedon = false\r\ntv.switchedon = true\r\n\r\ngame.paused = false\r\ngame.paused = true\r\n\r\norc.dead = false\r\norc.dead = true\r\n\r\n-----------------------\r\n\r\nThe 'Integer' Data Type:\r\n\r\nnon-decimal amount values\r\n\r\n-9999999\r\n-1\r\n0\r\n1\r\n99999999\r\n\r\n(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Integer Values)\r\n\r\nplayer.strength = 100\r\ngame.state = 0\r\n\r\nplayer.strength = 100\r\nkatana.damage = 50\r\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [100] / 100\r\n// player.damage = 100\r\n\r\nplayer.strength = 0\r\nkatana.damage = 50\r\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [0] / 100\r\n// player.damage = 50\r\n\r\nplayer.strength = 50\r\nkatana.damage = 50\r\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [50] / 100\r\n// player.damage = ~ 75\r\n\r\nplayer.strength = 75\r\nkatana.damage = 50\r\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [75] / 100\r\n// player.damage = ~ 87\r\n\r\nplayer.strength = 25\r\nkatana.damage = 50\r\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// player.damage = [50] + [50] * [25] / 100\r\n// player.damage = ~ 62\r\n\r\n----------------------\r\n\r\nThe 'Double' Data Type:\r\n\r\ndouble: floats / floating points: decimal amounts\r\n\r\n-99999.123\r\n-9.123\r\n0.0\r\n9.123\r\n99999.123\r\n\r\n(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Double Values)\r\n\r\n------------------\r\n\r\nThe 'Object' (reference/pointer) Data Type:\r\n\r\nObjects and Object reference/pointer Values are anything without the double quotes and also that are not any of the reserved/special words like 'true/false' and many/some others as well...\r\n\r\ncreate (\"katana\") // creating a 'katana' Object\r\ncreate (\"claymore\") // creating a 'claymore' Object\r\ncreate (\"battle_axe\") // creating a 'battle_axe' Object\r\n\r\nplayer.weapon = katana\r\nplayer.weapon = claymore\r\nplayer.weapon = battle_axe\r\n\r\n// the default 'player' Player Object is the default Player Object of new games, so it already exists, so we don't need to create it\r\n// the default 'room' Room Object is the default Room Object of new games, so it already exists, so we don't need to create it\r\ncreate (\"room2\")\r\ncreate (\"room3\")\r\n// moving (\"teleporting/warping\") the 'player' without using the 'Exits':\r\n// (the built-in 'parent' Object Reference/Pointer Attribute is how containment is actually determined/controlled)\r\nplayer.parent = room\r\nplayer.parent = room2\r\nplayer.parent = room3\r\n\r\n(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Object Reference/Pointer Values)\r\n\r\n---------------\r\n\r\nThe 'List' Data Type:\r\n\r\ntechnically, lists are just a string that is segmented/split/divided into smaller string (or Object reference/pointer) parts/segments/pieces (via a selected separator), which we call as 'items'\r\n\r\ncreate (\"example_object\")\r\nexample_object.color_string = \"red;blue;yellow\"\r\nmsg (example_object.color_string)\r\n// output/results:\r\n// red;blue;yellow\r\nexample_object.color_list = Split (example_object.color_string, \";\")\r\n// we're segmenting our string into items via the ';' character, as our 'SEPERATOR' that the 'Split (STRING, SEPERATOR)' Function uses to segment the string into smaller parts/strings/items, as can be seen below:\r\nDisplayList (example_object.color_list, true)\r\n// output/result:\r\n// 1. red\r\n// 2. blue\r\n// 3. yellow\r\n\r\nand we can then rejoin our list back into a string too:\r\n\r\nexample_object.example_color_string = Join (example_object.color_list, \";\")\r\nmsg (example_object.example_color_string)\r\n// output/results:\r\n// red;blue;yellow\r\n\r\nor, we can just create a new (blank) List, and add/remove items to it:\r\n\r\ncreate (\"example_object\")\r\nexample_object.color_list = NewStringList () // this creates a new (blank) list\r\nlist add (example_object.color_list, \"red\")\r\nlist add (example_object.color_list, \"blue\")\r\nlist add (example_object.color_list, \"yellow\")\r\nDisplayList (example_object.color_list, true)\r\n// output/result:\r\n// 1. red\r\n// 2. blue\r\n// 3. yellow\r\nlist remove (example_object.color_list, \"blue\")\r\nDisplayList (example_object.color_list, true)\r\n// output/result:\r\n// 1. red\r\n// 2. yellow\r\n\r\nyou can also think of Lists as input-output functions too:\r\n\r\n(a list's items are automatically numbered starting at 0, and NOT 1 - this takes some time to get used to, this numbering is known as their 'index number')\r\n\r\na String List's item:\r\ninput: STRING: \"INDEX_NUMBER\"\r\noutput: STRING: \"VALUE\"\r\n\r\nan Object List's item:\r\ninput: STRING: \"INDEX_NUMBER\"\r\noutput: OBJECT (reference/pointer): OBJECT\r\n\r\n// IMPORTANT: you can NOT use the 'Split (LIST, SEPARATOR)' Function to create an Object List (as it can only create String Lists), you must use create a new (blank) Object List Function and add the items (OBJECT references/pointers) to it\r\n\r\nexample_object.color_list = Split (\"red;blue;yellow\", \";\")\r\n\r\nitem 1:\r\ninput: \"0\"\r\noutput: \"red\"\r\n\r\nitem 2:\r\ninput: \"1\"\r\noutput: \"blue\"\r\n\r\nitem 3:\r\ninput: \"2\"\r\noutput: \"blue\"\r\n\r\nitem 4:\r\ninput: \"3\"\r\nERROR: there is no 4th item!\r\n\r\nthis takes people a while to get used to:\r\n3 items: red, blue, and yellow\r\nbut the index numbers are: 0, 1, 2\r\njust got to remember that the last index number (the last item in the list) is: the number of items [ListCount (LIST)] - 1:\r\n3 items, but the last item's index number is 2 (3 items - 1)\r\n\r\nStringListItem (example_object.color_list, \"0\") ===> red\r\nStringListItem (example_object.color_list, \"1\") ===> blue\r\nStringListItem (example_object.color_list, \"2\") ===> yellow\r\nStringListItem (example_object.color_list, \"3\") ===> ERROR! there is no 4th item!\r\n\r\n-------------------------\r\n\r\nThe 'Dictionary' Data Type:\r\n\r\nit's basically the same as lists, except you select/determine/input/type-in what it's input is (its input is customizable, it doesn't automatically use contiguous numbers starting at '0' like lists do, so you could have the input be whatever you want: hi, bye, blah, abc, one, two, three, dragon, king, princess, etc etc etc):\r\n\r\na String Dictionary's item:\r\n\r\ninput: \"STRING\"\r\noutput: \"STRING\"\r\n\r\nan Object Dictionary's item:\r\n\r\ninput: \"STRING\"\r\noutput: OBJECT\r\n\r\nan Script Dictionary's item:\r\n\r\ninput: \"STRING\"\r\noutput: SCRIPT/S\r\n\r\n```\r\ncreate (\"king\")\r\n\r\nking.parent = room\r\n\r\nking.topics_dict = NewStringDictionary ()\r\ndictionary add (king.topics_dict, \"princess\", \"The princess has been kidnapped by a dragon!\")\r\ndictionary add (king.topics_dict, \"dragon\", \"The dragon can only be killed by the legendary dragon slaying sword\")\r\ndictionary add (king.topics_dict, \"sword\", \"An evil wizard stole the legendary dragon slaying sword\")\r\ndictionary add (king.topics_dict, \"wizard\", \"The evil wizard can be found in his tower in the dead lands\")\r\n\r\nking.talk => {\r\n  show menu (\"Topic?\", king.topics_dict, false) {\r\n    // hidden from you (done automatically with the 'show menu / ShowMenu / get input / etc' Functions: result = YOUR_TYPED_IN_OR_MENU_SELECTED_INPUT // (princess/dragon/sword/wizard from the popup menu)\r\n    output_string_variable = StringDictionaryItem (king.topics_dict, result)\r\n    msg (output_string_variable)\r\n  }\r\n}\r\n```\r\n\r\n--------------------\r\n\r\nyou can only do arithmetic operations (addition, subtraction, multiplication, division, and modulus: division, except that it gets/finds/returns the REMAINDER) with INTEGERS and DOUBLES\r\n\r\naddition operation symbol: +\r\nsubtraction operation symbol: -\r\nmultiplication operation symbol: *\r\ndivision operation symbol: /\r\nmodulus operation symbol: %\r\n\r\n-----------------\r\n\r\nwith STRINGS, you can do concatenation (literally putting things/strings together)\r\n\r\nconcatenation operator symbol: +\r\n\r\n--------------\r\n\r\naddition vs concatenation:\r\n\r\n5 + 5 = 10\r\n55 + 55 = 110\r\n\r\n\"5\" + \"5\" = \"55\"\r\n\"55\" + \"55\" = \"5555\"\r\n\r\n5 + \"5\" = ERROR: both humans and computers have no idea how to combine an amount (INTEGER/DOUBLE) and a text (STRING) together, lol\r\n\r\n\"5\" + 5 = ERROR: both humans and computers have no idea how to combine an amount (INTEGER/DOUBLE) and a text (STRING) together, lol\r\n\r\n\"mama\" + \"mia\" = \"mamamia\"\r\n\r\n// the 'SPACE/WHITE_SPACE' is a character/number/symbol just like the 'a/1/_' is a character/number/symbol:\r\n\"mama\" + \" \" + \"mia\" = \"mama mia\" // \"mama\" + \"[SPACE]\" + \"mia\" = \"mama[SPACE]mia\"\r\n\"mama \" + \"mia\" = \"mama mia\" // \"mama[SPACE]\" + \"mia\" = \"mama[SPACE]mia\"\r\n\"mama\" + \" mia\" = \"mama mia\" // \"mama\" + \"[SPACE]mia\" = \"mama[SPACE]mia\"\r\n\r\n\"mama\" + \"5\" = \"mama5\"\r\n\r\n\"5\" + \"mama\" = \"5mama\" // NOTE that this only works for VALUES, as Objects' and Attributes' names can NOT start with a number character, they must start with an alpabet character (and maybe there's a few symbols that you can start with too, such as the commonly usable/allowable underscore character)\r\n\r\nthe useful application of concatenation:\r\n\r\nstring_variable = \"Hi\"\r\nmsg (string_variable)\r\n// output:\r\n// Hi\r\nstring_variable = string_variable + \", my name is HK.\"\r\nmsg (string_variable)\r\n// output:\r\n// Hi, my name is HK.\r\nstring_variable = string_variable + \" What is your name?\"\r\nmsg (string_variable)\r\n// output:\r\n// Hi, my name is HK. What is your name?",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>Data (VARIABLES: Attribute and Variable, and their: Value) Types:</p>\n<p>(these are how to create and apply, along with actions which this post does NOT cover: scripting: an_Object's_Script_Attributes/Functions/Commands/Turnscripts/Timers/etc,  a game's stats/attributes/skills/text-dialogue-messages/events/etc-etc-etc)</p>\n<hr>\n<p>VARIABLES:<br>\n-&gt; Attributes: global scope (due to being \"attached\", contained within, an Object) and \"permanent\" (so long as the Object containing the Attribute, exists or still exists, of course): player.strength = 100<br>\n-&gt; Variables: local scope (can NOT be used outside of its scripting, due to NOT being \"attached\", NOT contained within, an Object) and temporary (ceases to exist when its scripting is completed): strength = 100<br>\n-&gt; Parameters/Arguments: deals with Functions/Commands/etc? (basically they're VARIABLES or direct/literal VALUES inputted into the Function/Command/etc for it to then use them within its scripting)</p>\n<hr>\n<p>The 'String' Data Type:</p>\n<p>a collection of characters (alphabet and numeric/numbers) and/or (some) symbols</p>\n<p>anything encased within the double quotes is a String</p>\n<p>\"a\"<br>\n\"abc\"</p>\n<p>\"1\" // this is a String Value due to the double quotes, and NOT an amount (integer:non-decimal/double:decimal) value, you can NOT do arithmetic (addition, subtraction, multiplication, division) on string values</p>\n<p>\"123\" // this is a String Value due to the double quotes, and NOT an amount (integer/double) value, you can NOT do arithmetic (addition, subtraction, multiplication, division) on string values</p>\n<p>\"abc123\"<br>\n\"abc_123\"<br>\n\"Hi, welcome to my game, I hope you enjoy it\"</p>\n<p>game.intro = \"Hi, welcome to my game, I hope you enjoy it\"</p>\n<p>player.condition = \"normal\"<br>\nplayer.condition = \"poisoned\"<br>\nplayer.condition = \"dead\"</p>\n<hr>\n<p>The 'Boolean' Data Type:</p>\n<p>true<br>\nfalse</p>\n<p>(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Boolean Values)</p>\n<p>the 'true/false' are special/reserved values for Booleans</p>\n<p>player.poisoned = false<br>\nplayer.poisoned = true</p>\n<p>player.flying = false<br>\nplayer.flying = true</p>\n<p>handled = true<br>\nhandled = false</p>\n<p>tv.switchedon = false<br>\ntv.switchedon = true</p>\n<p>game.paused = false<br>\ngame.paused = true</p>\n<p>orc.dead = false<br>\norc.dead = true</p>\n<hr>\n<p>The 'Integer' Data Type:</p>\n<p>non-decimal amount values</p>\n<p>-9999999<br>\n-1<br>\n0<br>\n1<br>\n99999999</p>\n<p>(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Integer Values)</p>\n<p>player.strength = 100<br>\ngame.state = 0</p>\n<p>player.strength = 100<br>\nkatana.damage = 50<br>\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [100] / 100<br>\n// player.damage = 100</p>\n<p>player.strength = 0<br>\nkatana.damage = 50<br>\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [0] / 100<br>\n// player.damage = 50</p>\n<p>player.strength = 50<br>\nkatana.damage = 50<br>\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [50] / 100<br>\n// player.damage = ~ 75</p>\n<p>player.strength = 75<br>\nkatana.damage = 50<br>\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [75] / 100<br>\n// player.damage = ~ 87</p>\n<p>player.strength = 25<br>\nkatana.damage = 50<br>\nplayer.weapon = katana // this Attribute/Data/Value Type will be explained further down, in a different data type section<br>\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// player.damage = [50] + [50] * [25] / 100<br>\n// player.damage = ~ 62</p>\n<hr>\n<p>The 'Double' Data Type:</p>\n<p>double: floats / floating points: decimal amounts</p>\n<p>-99999.123<br>\n-9.123<br>\n0.0<br>\n9.123<br>\n99999.123</p>\n<p>(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Double Values)</p>\n<hr>\n<p>The 'Object' (reference/pointer) Data Type:</p>\n<p>Objects and Object reference/pointer Values are anything without the double quotes and also that are not any of the reserved/special words like 'true/false' and many/some others as well...</p>\n<p>create (\"katana\") // creating a 'katana' Object<br>\ncreate (\"claymore\") // creating a 'claymore' Object<br>\ncreate (\"battle_axe\") // creating a 'battle_axe' Object</p>\n<p>player.weapon = katana<br>\nplayer.weapon = claymore<br>\nplayer.weapon = battle_axe</p>\n<p>// the default 'player' Player Object is the default Player Object of new games, so it already exists, so we don't need to create it<br>\n// the default 'room' Room Object is the default Room Object of new games, so it already exists, so we don't need to create it<br>\ncreate (\"room2\")<br>\ncreate (\"room3\")<br>\n// moving (\"teleporting/warping\") the 'player' without using the 'Exits':<br>\n// (the built-in 'parent' Object Reference/Pointer Attribute is how containment is actually determined/controlled)<br>\nplayer.parent = room<br>\nplayer.parent = room2<br>\nplayer.parent = room3</p>\n<p>(notice how they do NOT have the double quotes, as if they did, they'd be String Values and not Object Reference/Pointer Values)</p>\n<hr>\n<p>The 'List' Data Type:</p>\n<p>technically, lists are just a string that is segmented/split/divided into smaller string (or Object reference/pointer) parts/segments/pieces (via a selected separator), which we call as 'items'</p>\n<p>create (\"example_object\")<br>\nexample_object.color_string = \"red;blue;yellow\"<br>\nmsg (example_object.color_string)<br>\n// output/results:<br>\n// red;blue;yellow<br>\nexample_object.color_list = Split (example_object.color_string, \";\")<br>\n// we're segmenting our string into items via the ';' character, as our 'SEPERATOR' that the 'Split (STRING, SEPERATOR)' Function uses to segment the string into smaller parts/strings/items, as can be seen below:<br>\nDisplayList (example_object.color_list, true)<br>\n// output/result:<br>\n// 1. red<br>\n// 2. blue<br>\n// 3. yellow</p>\n<p>and we can then rejoin our list back into a string too:</p>\n<p>example_object.example_color_string = Join (example_object.color_list, \";\")<br>\nmsg (example_object.example_color_string)<br>\n// output/results:<br>\n// red;blue;yellow</p>\n<p>or, we can just create a new (blank) List, and add/remove items to it:</p>\n<p>create (\"example_object\")<br>\nexample_object.color_list = NewStringList () // this creates a new (blank) list<br>\nlist add (example_object.color_list, \"red\")<br>\nlist add (example_object.color_list, \"blue\")<br>\nlist add (example_object.color_list, \"yellow\")<br>\nDisplayList (example_object.color_list, true)<br>\n// output/result:<br>\n// 1. red<br>\n// 2. blue<br>\n// 3. yellow<br>\nlist remove (example_object.color_list, \"blue\")<br>\nDisplayList (example_object.color_list, true)<br>\n// output/result:<br>\n// 1. red<br>\n// 2. yellow</p>\n<p>you can also think of Lists as input-output functions too:</p>\n<p>(a list's items are automatically numbered starting at 0, and NOT 1 - this takes some time to get used to, this numbering is known as their 'index number')</p>\n<p>a String List's item:<br>\ninput: STRING: \"INDEX_NUMBER\"<br>\noutput: STRING: \"VALUE\"</p>\n<p>an Object List's item:<br>\ninput: STRING: \"INDEX_NUMBER\"<br>\noutput: OBJECT (reference/pointer): OBJECT</p>\n<p>// IMPORTANT: you can NOT use the 'Split (LIST, SEPARATOR)' Function to create an Object List (as it can only create String Lists), you must use create a new (blank) Object List Function and add the items (OBJECT references/pointers) to it</p>\n<p>example_object.color_list = Split (\"red;blue;yellow\", \";\")</p>\n<p>item 1:<br>\ninput: \"0\"<br>\noutput: \"red\"</p>\n<p>item 2:<br>\ninput: \"1\"<br>\noutput: \"blue\"</p>\n<p>item 3:<br>\ninput: \"2\"<br>\noutput: \"blue\"</p>\n<p>item 4:<br>\ninput: \"3\"<br>\nERROR: there is no 4th item!</p>\n<p>this takes people a while to get used to:<br>\n3 items: red, blue, and yellow<br>\nbut the index numbers are: 0, 1, 2<br>\njust got to remember that the last index number (the last item in the list) is: the number of items [ListCount (LIST)] - 1:<br>\n3 items, but the last item's index number is 2 (3 items - 1)</p>\n<p>StringListItem (example_object.color_list, \"0\") ===&gt; red<br>\nStringListItem (example_object.color_list, \"1\") ===&gt; blue<br>\nStringListItem (example_object.color_list, \"2\") ===&gt; yellow<br>\nStringListItem (example_object.color_list, \"3\") ===&gt; ERROR! there is no 4th item!</p>\n<hr>\n<p>The 'Dictionary' Data Type:</p>\n<p>it's basically the same as lists, except you select/determine/input/type-in what it's input is (its input is customizable, it doesn't automatically use contiguous numbers starting at '0' like lists do, so you could have the input be whatever you want: hi, bye, blah, abc, one, two, three, dragon, king, princess, etc etc etc):</p>\n<p>a String Dictionary's item:</p>\n<p>input: \"STRING\"<br>\noutput: \"STRING\"</p>\n<p>an Object Dictionary's item:</p>\n<p>input: \"STRING\"<br>\noutput: OBJECT</p>\n<p>an Script Dictionary's item:</p>\n<p>input: \"STRING\"<br>\noutput: SCRIPT/S</p>\n<pre><code>create (\"king\")\n\nking.parent = room\n\nking.topics_dict = NewStringDictionary ()\ndictionary add (king.topics_dict, \"princess\", \"The princess has been kidnapped by a dragon!\")\ndictionary add (king.topics_dict, \"dragon\", \"The dragon can only be killed by the legendary dragon slaying sword\")\ndictionary add (king.topics_dict, \"sword\", \"An evil wizard stole the legendary dragon slaying sword\")\ndictionary add (king.topics_dict, \"wizard\", \"The evil wizard can be found in his tower in the dead lands\")\n\nking.talk =&gt; {\n  show menu (\"Topic?\", king.topics_dict, false) {\n    // hidden from you (done automatically with the 'show menu / ShowMenu / get input / etc' Functions: result = YOUR_TYPED_IN_OR_MENU_SELECTED_INPUT // (princess/dragon/sword/wizard from the popup menu)\n    output_string_variable = StringDictionaryItem (king.topics_dict, result)\n    msg (output_string_variable)\n  }\n}\n</code></pre>\n<hr>\n<p>you can only do arithmetic operations (addition, subtraction, multiplication, division, and modulus: division, except that it gets/finds/returns the REMAINDER) with INTEGERS and DOUBLES</p>\n<p>addition operation symbol: +<br>\nsubtraction operation symbol: -<br>\nmultiplication operation symbol: *<br>\ndivision operation symbol: /<br>\nmodulus operation symbol: %</p>\n<hr>\n<p>with STRINGS, you can do concatenation (literally putting things/strings together)</p>\n<p>concatenation operator symbol: +</p>\n<hr>\n<p>addition vs concatenation:</p>\n<p>5 + 5 = 10<br>\n55 + 55 = 110</p>\n<p>\"5\" + \"5\" = \"55\"<br>\n\"55\" + \"55\" = \"5555\"</p>\n<p>5 + \"5\" = ERROR: both humans and computers have no idea how to combine an amount (INTEGER/DOUBLE) and a text (STRING) together, lol</p>\n<p>\"5\" + 5 = ERROR: both humans and computers have no idea how to combine an amount (INTEGER/DOUBLE) and a text (STRING) together, lol</p>\n<p>\"mama\" + \"mia\" = \"mamamia\"</p>\n<p>// the 'SPACE/WHITE_SPACE' is a character/number/symbol just like the 'a/1/_' is a character/number/symbol:<br>\n\"mama\" + \" \" + \"mia\" = \"mama mia\" // \"mama\" + \"[SPACE]\" + \"mia\" = \"mama[SPACE]mia\"<br>\n\"mama \" + \"mia\" = \"mama mia\" // \"mama[SPACE]\" + \"mia\" = \"mama[SPACE]mia\"<br>\n\"mama\" + \" mia\" = \"mama mia\" // \"mama\" + \"[SPACE]mia\" = \"mama[SPACE]mia\"</p>\n<p>\"mama\" + \"5\" = \"mama5\"</p>\n<p>\"5\" + \"mama\" = \"5mama\" // NOTE that this only works for VALUES, as Objects' and Attributes' names can NOT start with a number character, they must start with an alpabet character (and maybe there's a few symbols that you can start with too, such as the commonly usable/allowable underscore character)</p>\n<p>the useful application of concatenation:</p>\n<p>string_variable = \"Hi\"<br>\nmsg (string_variable)<br>\n// output:<br>\n// Hi<br>\nstring_variable = string_variable + \", my name is HK.\"<br>\nmsg (string_variable)<br>\n// output:<br>\n// Hi, my name is HK.<br>\nstring_variable = string_variable + \" What is your name?\"<br>\nmsg (string_variable)<br>\n// output:<br>\n// Hi, my name is HK. What is your name?</p>\n\n",
      "PostDate": "2018-11-26T08:09:43.4217072Z",
      "LastEditDate": "2018-11-26T09:02:23.5553551Z",
      "link": null
    },
    {
      "PostId": "6e83e2a6-d564-4e16-b8b4-0822c68fde81",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(sorry posted in the wrong thread)",
      "EditableFormat": "markdown",
      "HTML": "<p>(sorry posted in the wrong thread)</p>\n\n",
      "PostDate": "2018-11-26T09:56:01.0816873Z",
      "LastEditDate": "2018-11-26T09:56:33.3008689Z",
      "link": null
    }
  ]
}
