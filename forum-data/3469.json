{
  "Topic": {
    "TopicId": "3469",
    "ForumId": "10",
    "Title": "How to create randomly awarded treasure. Aka object arrays.",
    "LastUpdated": "2013-02-24T21:01:23+00:00",
    "ReplyCount": 22
  },
  "Posts": [
    {
      "PostId": "22764",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "Hello!\n\nI need a way to award random treasure from a list of existing treasure possibilities.  I might have different &quot;groupings&quot; of treasure to select from, too.  Without knowing the correct syntax, here's what I mean:\n\nlevel_1_treasures = object_array(knife, rope, leather shield, cap);\nlevel_2_treasures = object_array(sword, bow, arrow, throwing_star);\n\n// Choose a random level 1 treasure\nindex = random(0, array_length(level_1_treasures) - 1) ;\ninventory_add(clone_object(level_1_treasures[index]));\n\nIs this something I'll need to code &quot;by hand&quot; in the code editor?\n\nThanks!\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "Hello!<br/><br/>I need a way to award random treasure from a list of existing treasure possibilities.  I might have different &quot;groupings&quot; of treasure to select from, too.  Without knowing the correct syntax, here's what I mean:<br/><br/>level_1_treasures = object_array(knife, rope, leather shield, cap);<br/>level_2_treasures = object_array(sword, bow, arrow, throwing_star);<br/><br/>// Choose a random level 1 treasure<br/>index = random(0, array_length(level_1_treasures) - 1) ;<br/>inventory_add(clone_object(level_1_treasures[index]));<br/><br/>Is this something I'll need to code &quot;by hand&quot; in the code editor?<br/><br/>Thanks!<br/>- Bret",
      "PostDate": "2013-02-17T00:29:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22767",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "No, you don't have to do it by hand in the code editor, but I think it would be easier.\n\nQuest doesn't actually have arrays, but you can store the list of treasures in a string or object list and it would accomplish much the same thing, as lists are indexed. I explained something similar to dwn in another thread, which you can take a look at here: [url:25vu8fn5]http&#58;//forum&#46;textadventures&#46;co&#46;uk/viewtopic&#46;php?f=10&amp;t=3435#p22609[/url:25vu8fn5]",
      "EditableFormat": "bbcode",
      "HTML": "No, you don't have to do it by hand in the code editor, but I think it would be easier.<br/><br/>Quest doesn't actually have arrays, but you can store the list of treasures in a string or object list and it would accomplish much the same thing, as lists are indexed. I explained something similar to dwn in another thread, which you can take a look at here: <a href=\"http&#58;//forum&#46;textadventures&#46;co&#46;uk/viewtopic&#46;php?f=10&amp;t=3435#p22609\" rel=\"nofollow\">http&#58;//forum&#46;textadventures&#46;co&#46;uk/viewtopic&#46;php?f=10&amp;t=3435#p22609</a>",
      "PostDate": "2013-02-17T04:48:54+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22776",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "Thanks for the info.  My code so far looks something like this:\n[code:1ykn2d7l]\ngame&#46;treasureGroup1 = newObjectList()\nlist add (game&#46;treasureGroup1, bookshelf)\nlist add (game&#46;treasureGroup1, shovel)\n      \nmsg(ObjectListItem(game&#46;treasureGroup1, GetRandomInt(1,2) - 1)&#46;name)\n[/code:1ykn2d7l]\n\nMay I update the documentation on the WIKI for newObjectList to include a few examples?\n\nCheers,\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for the info.  My code so far looks something like this:<br/><pre><code><br/>game&#46;treasureGroup1 = newObjectList()<br/>list add (game&#46;treasureGroup1, bookshelf)<br/>list add (game&#46;treasureGroup1, shovel)<br/>      <br/>msg(ObjectListItem(game&#46;treasureGroup1, GetRandomInt(1,2) - 1)&#46;name)<br/></code></pre><br/><br/>May I update the documentation on the WIKI for newObjectList to include a few examples?<br/><br/>Cheers,<br/>- Bret",
      "PostDate": "2013-02-17T07:55:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22787",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "I think everyone is welcome to add to the wiki, but I believe you need to email Alex with your desired username as he disabled user registration due to excessive spam or something like that.",
      "EditableFormat": "bbcode",
      "HTML": "I think everyone is welcome to add to the wiki, but I believe you need to email Alex with your desired username as he disabled user registration due to excessive spam or something like that.",
      "PostDate": "2013-02-17T20:49:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22791",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "Thanks.  I have a follow up question.  Part of my game involves fishing, and one of the things that you can do is dig for worms.  I was intending to clone a &quot;worm&quot; object, but after doing some research on the forums, I'm finding that my tactics might not work:\n\nI noticed that the clone object creates a renamed version of the clone, such as &quot;worm1&quot;.  I also read somewhere that no two objects can have the same name.  Is that still true?  My game would work best if the player could have multiple worms in their inventory.  Would it be better to use a &quot;worm_count&quot; attribute on the player?  Or, maybe I could create a &quot;bait bag&quot; object and it could have a worm_count, grasshopper_count, etc.  I'm much rather be able to create actual worm objects, because I think it would feel more realistic.\n\nAny advice would be appreciated.\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "Thanks.  I have a follow up question.  Part of my game involves fishing, and one of the things that you can do is dig for worms.  I was intending to clone a &quot;worm&quot; object, but after doing some research on the forums, I'm finding that my tactics might not work:<br/><br/>I noticed that the clone object creates a renamed version of the clone, such as &quot;worm1&quot;.  I also read somewhere that no two objects can have the same name.  Is that still true?  My game would work best if the player could have multiple worms in their inventory.  Would it be better to use a &quot;worm_count&quot; attribute on the player?  Or, maybe I could create a &quot;bait bag&quot; object and it could have a worm_count, grasshopper_count, etc.  I'm much rather be able to create actual worm objects, because I think it would feel more realistic.<br/><br/>Any advice would be appreciated.<br/>- Bret",
      "PostDate": "2013-02-18T01:05:12+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22799",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "Yeah, objects in Quest can't have the same name... In situations like this, I often feel that as long as the player is no more the wiser of how it's done, then how it's taken care of &quot;behind the scenes&quot; is largely irrelevant. So handling it with a variable that keeps track of how many worms you have or whatever would be the least headache inducing for you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, objects in Quest can't have the same name... In situations like this, I often feel that as long as the player is no more the wiser of how it's done, then how it's taken care of &quot;behind the scenes&quot; is largely irrelevant. So handling it with a variable that keeps track of how many worms you have or whatever would be the least headache inducing for you. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-02-18T06:34:54+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22808",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "One other thought, items can have the same alias, so all the worm items that copy could look the same, but I'm not sure what happens if multiple items with a shared alias are all in the same room. It might work with a &quot;dragon warrior&quot; style where each worm actually appears separately in the bag.",
      "EditableFormat": "bbcode",
      "HTML": "One other thought, items can have the same alias, so all the worm items that copy could look the same, but I'm not sure what happens if multiple items with a shared alias are all in the same room. It might work with a &quot;dragon warrior&quot; style where each worm actually appears separately in the bag.",
      "PostDate": "2013-02-18T12:34:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22815",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "Yeah, if they all have the same alias it would look something like:\n\n&gt; look in bag\n\nInside the bad you see: A worm, A worm, A worm, A worm, and A worm.\n\nNot ideal. Unless there's some important reason why the worm needs to be an object (i.e. needs to be turned on or off, opened, etc.) then going the route of using variables and such is probably the best approach for what you're trying to do, but that's just my opinion. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, if they all have the same alias it would look something like:<br/><br/>&gt; look in bag<br/><br/>Inside the bad you see: A worm, A worm, A worm, A worm, and A worm.<br/><br/>Not ideal. Unless there's some important reason why the worm needs to be an object (i.e. needs to be turned on or off, opened, etc.) then going the route of using variables and such is probably the best approach for what you're trying to do, but that's just my opinion. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-02-18T17:13:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22817",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "That sounds reasonable.  I'll head in that direction.\n\nIt would be nice to have a feature that supported multiple objects.  The game would simply group objects if it found multiple versions of them.  So, for example, your inventory would say, &quot;worms(5)&quot; instead of worm, worm, worm, worm, worm.  If you said, &quot;eat worm&quot;, it'd just assume you meant &quot;any worm&quot;.  But I could see how that might become a nightmare when it comes to programming.  And, if one of the worms had anything different with it, such as an attribute with a different value, it'd be very difficult to differentiate it when issuing an action.  Anyhow, I'll work around it. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nCheers,\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "That sounds reasonable.  I'll head in that direction.<br/><br/>It would be nice to have a feature that supported multiple objects.  The game would simply group objects if it found multiple versions of them.  So, for example, your inventory would say, &quot;worms(5)&quot; instead of worm, worm, worm, worm, worm.  If you said, &quot;eat worm&quot;, it'd just assume you meant &quot;any worm&quot;.  But I could see how that might become a nightmare when it comes to programming.  And, if one of the worms had anything different with it, such as an attribute with a different value, it'd be very difficult to differentiate it when issuing an action.  Anyhow, I'll work around it. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>Cheers,<br/>- Bret",
      "PostDate": "2013-02-18T17:21:10+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22819",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "Yeah. If you have multiple &quot;worms&quot; in your inventory and you type &quot;eat worm&quot; you'll get a popup window asking you to select which one you want to eat.\n\nI can't really speak for Alex, but he probably could have added this functionality and likely decided it wasn't necessary. You can always create a worm count in the status pane that shows how many you currently have, like &quot;Worms: 5&quot; or something like that.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah. If you have multiple &quot;worms&quot; in your inventory and you type &quot;eat worm&quot; you'll get a popup window asking you to select which one you want to eat.<br/><br/>I can't really speak for Alex, but he probably could have added this functionality and likely decided it wasn't necessary. You can always create a worm count in the status pane that shows how many you currently have, like &quot;Worms: 5&quot; or something like that.",
      "PostDate": "2013-02-18T17:27:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22827",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "I think it would still be a great addition, though.  In my situation, I can probably make do.  But being able to spawn a duplicate object without having to fake it seems really valuable.  Granted, I might be unusual coming from more of an RPG background.  That being said, I hope I'm not coming across needy or disappointed.  I love Quest!",
      "EditableFormat": "bbcode",
      "HTML": "I think it would still be a great addition, though.  In my situation, I can probably make do.  But being able to spawn a duplicate object without having to fake it seems really valuable.  Granted, I might be unusual coming from more of an RPG background.  That being said, I hope I'm not coming across needy or disappointed.  I love Quest!",
      "PostDate": "2013-02-19T04:47:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22829",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I think you probably could code in having it do (and adjust): &quot;worms (5)&quot; in your inventory, this might be fun to try to figure out how to code in, for a noob like me anyways, I might give it a shot, as it seems to be a fun (and useful) coding for me to try to do when I got the time.\n\nAnd if your worms were to be different... you could always (if you don't already) put some attribute (or object type too) on it, allowing you to get that specific worm item, via through that unique attribute (or object type too).\n\nOr, if this can't be done via the inventory pane directly... you could have a storage object in your inventory... and then through the storage object you can get it to work, with &quot;simple&quot; scripting.\n\nI got a storage system made for learned spells, but I still haven't gotten to working on the equipment storage yet, I been busy with real life stuff, so hadn't been doing much quest for this entire month, sighs.\n\n(if you're interested in taking a look at my storage system coding, feel free to let me know, and I'll post it for you)",
      "EditableFormat": "bbcode",
      "HTML": "I think you probably could code in having it do (and adjust): &quot;worms (5)&quot; in your inventory, this might be fun to try to figure out how to code in, for a noob like me anyways, I might give it a shot, as it seems to be a fun (and useful) coding for me to try to do when I got the time.<br/><br/>And if your worms were to be different... you could always (if you don't already) put some attribute (or object type too) on it, allowing you to get that specific worm item, via through that unique attribute (or object type too).<br/><br/>Or, if this can't be done via the inventory pane directly... you could have a storage object in your inventory... and then through the storage object you can get it to work, with &quot;simple&quot; scripting.<br/><br/>I got a storage system made for learned spells, but I still haven't gotten to working on the equipment storage yet, I been busy with real life stuff, so hadn't been doing much quest for this entire month, sighs.<br/><br/>(if you're interested in taking a look at my storage system coding, feel free to let me know, and I'll post it for you)",
      "PostDate": "2013-02-19T06:18:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22846",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "HegemonKan,\n\nYes, I'd absolutely be interested in checking out your storage system code!  Thanks for offering!  I'm a programmer for my profession, so perhaps I could (with a little direction) make the adjustments necessary to make this work.\n\nThanks,\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "HegemonKan,<br/><br/>Yes, I'd absolutely be interested in checking out your storage system code!  Thanks for offering!  I'm a programmer for my profession, so perhaps I could (with a little direction) make the adjustments necessary to make this work.<br/><br/>Thanks,<br/>- Bret",
      "PostDate": "2013-02-20T05:45:13+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22848",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "well if you're a programmer, there's absolutely nothing fancy about the code for my storage code for learned spells, as I'm not a programmer (wish I was, sighs. I'm old now, wish I would've been learning it from when I was little, as it's quite a bit late now).\n\nAlso... my code is really horrible, messy, and &quot;long winded&quot;. For me, just getting a functioning code is a huge achievement for me, as later on, I can go back and try to make the code better (simple, short, clear, efficient; &quot;streamlined&quot;). So, my apologizes for my unbearably noobishly poor codings.\n\nit basically involves making a lot of child objects within a parent object, so your inventory isn't cluttered and also so you can organize them (I don't know how to or if it could be done otherwise), with the actual placement of where the (spell objects) go.\n\nIt could have been just as easy to make the main storage object not have a parent too, but I decided to just go and put it as a child of the player object. (well, maybe there might be some coding difficulties in trying to do this, but I think it could be done)\n\nstorage object type -&gt; immoveable (take, drop, use, give, etc = false) closed container. immoveable book-like objects within immoveable book-like objects, lol.\n\nplayer object\n-&gt; storage object\n-&gt;-&gt; spell storage object\n-&gt;-&gt;-&gt; fire spells storage object\n-&gt;-&gt;-&gt; etc etc etc\n-&gt;-&gt; equipment storage object\n-&gt;-&gt;-&gt; weapons storage object\n-&gt;-&gt;-&gt;-&gt; sword storage object\n-&gt;-&gt;-&gt;-&gt; etc etc etc\n-&gt;-&gt;-&gt; armors storage object\n-&gt;-&gt;-&gt;-&gt; shield storage object\n-&gt;-&gt;-&gt;-&gt; headwear storage object\n-&gt;-&gt;-&gt;-&gt; etc etc etc\n-&gt;-&gt;-&gt; clothing storage object\n-&gt;-&gt;-&gt;-&gt; fingerwear (for ring wearing) storage object\n-&gt;-&gt;-&gt;-&gt; etc etc etc\n-&gt;-&gt; items storage object\n-&gt;-&gt;-&gt; useable items storage object\n-&gt;-&gt;-&gt; non-useable (game progression items) items storage object\n-&gt;-&gt;-&gt; battle items storage object\n\nthen it is a matter of making the code to place your stuff into the correct places.\n(so far, I only got the spells done, as I'm still trying to figure out and work on with the equipment)\n\nso here's my storage codings:\n\n&gt; it's done as a library file (but this can be easily changed or copy and pasted directly into your game file or a new game file too, if you don't want to use it as an added library file to your game file or new game file)\n\n&gt; I copy and pasted this over from one file into a new file, as I didn't have a file just for my storage coding, so if it doesn't work, let me know, as I probably am missing something that is needed that I didn't include in my pasting of it over to the new file, lol.\n\n&gt; this is just for the spell storage system, as I'm still working on how to do the equipment (it's messy as I'm doing more brainstorming of how I want to do it, so I haven't ~ can't ~ yet work on how to do its coding yet).\n\n&gt; I used Pixie's Spell Library coding structure, so this stuff is all his~hers - the credit goes to him~her, for making my spell storage of Pixie's learned spells.\n\n[code:gy8q4xdw]&lt;?xml version=&quot;1&#46;0&quot;?&gt;\n&lt;library&gt;\n\n  &lt;!-- Templates --&gt;\n  \n  &lt;!-- Spell Templates --&gt;\n\n  &lt;template name=&quot;Learn&quot;&gt;learn&lt;/template&gt;\n  &lt;template name=&quot;Cast&quot;&gt;cast&lt;/template&gt;\n  &lt;template name=&quot;Teach&quot;&gt;teach&lt;/template&gt;  \n  &lt;template name=&quot;Spell_Already_Learned&quot;&gt;Oops, you already know this spell&#46;&lt;/template&gt;\n  &lt;dynamictemplate name=&quot;Spell_Learned&quot;&gt;&quot;You've learned the &quot; + GetDisplayAlias(object) + &quot; spell&#46;&quot;&lt;/dynamictemplate&gt;\n  \n  &lt;!-- Verbs --&gt;\n  \n  &lt;!-- Spell Verbs --&gt;\n  \n  &lt;verb&gt;\n    &lt;property&gt;learn&lt;/property&gt;\n    &lt;pattern&gt;learn&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't learn &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  \n  &lt;verb&gt;\n    &lt;property&gt;cast&lt;/property&gt;\n    &lt;pattern&gt;cast&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't cast &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  \n  &lt;verb&gt;\n    &lt;property&gt;teach&lt;/property&gt;\n    &lt;pattern&gt;teach&lt;/pattern&gt;\n    &lt;defaultexpression&gt;&quot;You can't teach &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  \n  &lt;!-- Objects --&gt;\n  \n  &lt;!-- Structure Objects --&gt;\n  \n  &lt;object name=&quot;elemental_structure&quot;&gt;\n    &lt;normal_elemental type=&quot;list&quot;&gt;fire; water; air; earth; light; dark; holy; unholy&lt;/normal_elemental&gt;\n    &lt;nemesis_elemental type=&quot;stringdictionary&quot;&gt;fire = water;water = fire;air = earth;earth = air;light = dark;dark = light;holy = unholy;unholy = holy&lt;/nemesis_elemental&gt;\n  &lt;/object&gt;\n  \n  &lt;!-- Storage Objects --&gt;\n  \n  &lt;object name=&quot;storage&quot;&gt;\n  \n    &lt;inherit name=&quot;storage_type&quot; /&gt;\n    &lt;parent type=&quot;object&quot;&gt;player&lt;/parent&gt;\n\t\n    &lt;!-- Spell Storage Objects --&gt;\n\t\n    &lt;object name=&quot;spell_storage&quot;&gt;\n\t\n      &lt;inherit name=&quot;storage_type&quot; /&gt;\n      &lt;parent type=&quot;object&quot;&gt;storage&lt;/parent&gt;\n\t  \n      &lt;object name=&quot;fire_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;water_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;air_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;earth_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;light_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;dark_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;holy_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n      &lt;object name=&quot;unholy_storage&quot;&gt;\n        &lt;inherit name=&quot;storage_type&quot; /&gt;\n        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;\n      &lt;/object&gt;\n\t  \n    &lt;/object&gt;\n\t\n  &lt;/object&gt;\n  \n  &lt;!-- Types (Object Types) --&gt;\n  \n  &lt;!-- Storage Types (Object Types) --&gt;\n  \n  &lt;type name=&quot;storage_type&quot;&gt;\n    &lt;inherit name=&quot;container_closed&quot; /&gt;\n    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;\n    &lt;inventoryverbs type=&quot;list&quot;&gt;Look; Open; Close&lt;/inventoryverbs&gt;\n  &lt;/type&gt;\n  \n  &lt;!-- Spell Types (Object Types) --&gt;\n  \n  &lt;type name=&quot;spell&quot;&gt;\n    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;\n    &lt;mana_points_cost type=&quot;int&quot;&gt;0&lt;/mana_points_cost&gt;\n    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;\n    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;\n    &lt;learn type=&quot;script&quot;&gt;\n      result = get_elemental (this)\n      switch (result) {\n        case (&quot;fire&quot;) {\n          if (not this&#46;parent = fire_storage) {\n            this&#46;parent = fire_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;water&quot;) {\n          if (not this&#46;parent = water_storage) {\n            this&#46;parent = water_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;air&quot;) {\n          if (not this&#46;parent = air_storage) {\n            this&#46;parent = air_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;earth&quot;) {\n          if (not this&#46;parent = earth_storage) {\n            this&#46;parent = earth_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;light&quot;) {\n          if (not this&#46;parent = light_storage) {\n            this&#46;parent = light_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;dark&quot;) {\n          if (not this&#46;parent = dark_storage) {\n            this&#46;parent = dark_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;holy&quot;) {\n          if (not this&#46;parent = holy_storage) {\n            this&#46;parent = holy_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n        case (&quot;unholy&quot;) {\n          if (not this&#46;parent = unholy_storage) {\n            this&#46;parent = unholy_storage\n            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)\n            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))\n          }\n          else {\n            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)\n          }\n        }\n      }\n    &lt;/learn&gt;\n  &lt;/type&gt;\n  \n  &lt;type name=&quot;fire_elemental&quot; /&gt;\n  &lt;type name=&quot;water_elemental&quot; /&gt;\n  &lt;type name=&quot;air_elemental&quot; /&gt;\n  &lt;type name=&quot;earth_elemental&quot; /&gt;\n  &lt;type name=&quot;light_elemental&quot; /&gt;\n  &lt;type name=&quot;dark_elemental&quot; /&gt;\n  &lt;type name=&quot;holy_elemental&quot; /&gt;\n  &lt;type name=&quot;unholy_elemental&quot; /&gt;\n  \n  &lt;!-- Functions --&gt;\n  \n  &lt;function name=&quot;get_elemental&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;\n    result = null\n    foreach (elem, elemental_structure&#46;normal_elemental) {\n      type = elem + &quot;_elemental&quot;\n      if (DoesInherit (obj,type)) {\n        result = elem\n      }\n    }\n    return (result)\n  &lt;/function&gt;\n  \n&lt;/library&gt;[/code:gy8q4xdw]\n\n--------\n\nP.S.\n\nreally the only code you're interested in for what you want to do, would be this (unless you can't work directly the inventory pane with the codings):\n\nfor what you want to do, it'll obviously be a bit different, and either with more or less complex coding, as you got to figure out how to code with the inventory display titles (if this can be done, I think it can anyways). so, this code below isn't too useful, except as a very loose coding method, and you've got other things you got to code in beyond just &quot;Get_Whatever&quot;, hehe.\n\n[code:gy8q4xdw]  &lt;function name=&quot;get_elemental&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;\n    result = null\n    foreach (elem, elemental_structure&#46;normal_elemental) {\n      type = elem + &quot;_elemental&quot;\n      if (DoesInherit (obj,type)) {\n        result = elem\n      }\n    }\n    return (result)\n  &lt;/function&gt;[/code:gy8q4xdw]\n\nas I think you'll have to (in my noob attempt at guessing how to code it, lol):\n\nneed a way of &quot;checking and getting&quot; a list of the items in your inventory, so that you can then identify the &quot;worm&quot; items, and then figure out how to count them, and then substitute all of the worm items for: a single worm item with it's amount of them (or if you're going to have worms with different attributes, then multiple single worm items of those different worm types, and with it doing the same of removing them and adding in the right number onto the right single worm type name).\n\ni.e.\n\nplayer.inventory:\n\nworm_type_1 (heals 25 HP)\nworm_type_1 (heals 25 HP)\nworm_type_2 (heals 50 HP)\nworm_type_2 (heals 50 HP)\nworm_type_2 (heals 50 HP)\nworm_type_3 (heals 100 HP)\nworm_type_3 (heals 100 HP)\nworm_type_3 (heals 100 HP)\nworm_type_3 (heals 100 HP)\n\n~TO~\n\nplayer.inventory:\n\nworm_type_1 (x2)\nworm_type_2 (x3)\nworm_type_3 (x4)\n\nthen you got to code in when you eat a worm, to adjust the amount shown (and if you eat the last one, it then disappears from your inventory, lol)",
      "EditableFormat": "bbcode",
      "HTML": "well if you're a programmer, there's absolutely nothing fancy about the code for my storage code for learned spells, as I'm not a programmer (wish I was, sighs. I'm old now, wish I would've been learning it from when I was little, as it's quite a bit late now).<br/><br/>Also... my code is really horrible, messy, and &quot;long winded&quot;. For me, just getting a functioning code is a huge achievement for me, as later on, I can go back and try to make the code better (simple, short, clear, efficient; &quot;streamlined&quot;). So, my apologizes for my unbearably noobishly poor codings.<br/><br/>it basically involves making a lot of child objects within a parent object, so your inventory isn't cluttered and also so you can organize them (I don't know how to or if it could be done otherwise), with the actual placement of where the (spell objects) go.<br/><br/>It could have been just as easy to make the main storage object not have a parent too, but I decided to just go and put it as a child of the player object. (well, maybe there might be some coding difficulties in trying to do this, but I think it could be done)<br/><br/>storage object type -&gt; immoveable (take, drop, use, give, etc = false) closed container. immoveable book-like objects within immoveable book-like objects, lol.<br/><br/>player object<br/>-&gt; storage object<br/>-&gt;-&gt; spell storage object<br/>-&gt;-&gt;-&gt; fire spells storage object<br/>-&gt;-&gt;-&gt; etc etc etc<br/>-&gt;-&gt; equipment storage object<br/>-&gt;-&gt;-&gt; weapons storage object<br/>-&gt;-&gt;-&gt;-&gt; sword storage object<br/>-&gt;-&gt;-&gt;-&gt; etc etc etc<br/>-&gt;-&gt;-&gt; armors storage object<br/>-&gt;-&gt;-&gt;-&gt; shield storage object<br/>-&gt;-&gt;-&gt;-&gt; headwear storage object<br/>-&gt;-&gt;-&gt;-&gt; etc etc etc<br/>-&gt;-&gt;-&gt; clothing storage object<br/>-&gt;-&gt;-&gt;-&gt; fingerwear (for ring wearing) storage object<br/>-&gt;-&gt;-&gt;-&gt; etc etc etc<br/>-&gt;-&gt; items storage object<br/>-&gt;-&gt;-&gt; useable items storage object<br/>-&gt;-&gt;-&gt; non-useable (game progression items) items storage object<br/>-&gt;-&gt;-&gt; battle items storage object<br/><br/>then it is a matter of making the code to place your stuff into the correct places.<br/>(so far, I only got the spells done, as I'm still trying to figure out and work on with the equipment)<br/><br/>so here's my storage codings:<br/><br/>&gt; it's done as a library file (but this can be easily changed or copy and pasted directly into your game file or a new game file too, if you don't want to use it as an added library file to your game file or new game file)<br/><br/>&gt; I copy and pasted this over from one file into a new file, as I didn't have a file just for my storage coding, so if it doesn't work, let me know, as I probably am missing something that is needed that I didn't include in my pasting of it over to the new file, lol.<br/><br/>&gt; this is just for the spell storage system, as I'm still working on how to do the equipment (it's messy as I'm doing more brainstorming of how I want to do it, so I haven't ~ can't ~ yet work on how to do its coding yet).<br/><br/>&gt; I used Pixie's Spell Library coding structure, so this stuff is all his~hers - the credit goes to him~her, for making my spell storage of Pixie's learned spells.<br/><br/><pre><code>&lt;?xml version=&quot;1&#46;0&quot;?&gt;<br/>&lt;library&gt;<br/><br/>  &lt;!-- Templates --&gt;<br/>  <br/>  &lt;!-- Spell Templates --&gt;<br/><br/>  &lt;template name=&quot;Learn&quot;&gt;learn&lt;/template&gt;<br/>  &lt;template name=&quot;Cast&quot;&gt;cast&lt;/template&gt;<br/>  &lt;template name=&quot;Teach&quot;&gt;teach&lt;/template&gt;  <br/>  &lt;template name=&quot;Spell_Already_Learned&quot;&gt;Oops, you already know this spell&#46;&lt;/template&gt;<br/>  &lt;dynamictemplate name=&quot;Spell_Learned&quot;&gt;&quot;You've learned the &quot; + GetDisplayAlias(object) + &quot; spell&#46;&quot;&lt;/dynamictemplate&gt;<br/>  <br/>  &lt;!-- Verbs --&gt;<br/>  <br/>  &lt;!-- Spell Verbs --&gt;<br/>  <br/>  &lt;verb&gt;<br/>    &lt;property&gt;learn&lt;/property&gt;<br/>    &lt;pattern&gt;learn&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't learn &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  <br/>  &lt;verb&gt;<br/>    &lt;property&gt;cast&lt;/property&gt;<br/>    &lt;pattern&gt;cast&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't cast &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  <br/>  &lt;verb&gt;<br/>    &lt;property&gt;teach&lt;/property&gt;<br/>    &lt;pattern&gt;teach&lt;/pattern&gt;<br/>    &lt;defaultexpression&gt;&quot;You can't teach &quot; + object&#46;article +&quot;&#46;&quot;&lt;/defaultexpression&gt;<br/>  &lt;/verb&gt;<br/>  <br/>  &lt;!-- Objects --&gt;<br/>  <br/>  &lt;!-- Structure Objects --&gt;<br/>  <br/>  &lt;object name=&quot;elemental_structure&quot;&gt;<br/>    &lt;normal_elemental type=&quot;list&quot;&gt;fire; water; air; earth; light; dark; holy; unholy&lt;/normal_elemental&gt;<br/>    &lt;nemesis_elemental type=&quot;stringdictionary&quot;&gt;fire = water;water = fire;air = earth;earth = air;light = dark;dark = light;holy = unholy;unholy = holy&lt;/nemesis_elemental&gt;<br/>  &lt;/object&gt;<br/>  <br/>  &lt;!-- Storage Objects --&gt;<br/>  <br/>  &lt;object name=&quot;storage&quot;&gt;<br/>  <br/>    &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>    &lt;parent type=&quot;object&quot;&gt;player&lt;/parent&gt;<br/>\t<br/>    &lt;!-- Spell Storage Objects --&gt;<br/>\t<br/>    &lt;object name=&quot;spell_storage&quot;&gt;<br/>\t<br/>      &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>      &lt;parent type=&quot;object&quot;&gt;storage&lt;/parent&gt;<br/>\t  <br/>      &lt;object name=&quot;fire_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;water_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;air_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;earth_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;light_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;dark_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;holy_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>      &lt;object name=&quot;unholy_storage&quot;&gt;<br/>        &lt;inherit name=&quot;storage_type&quot; /&gt;<br/>        &lt;parent type=&quot;object&quot;&gt;spell_storage&lt;/parent&gt;<br/>      &lt;/object&gt;<br/>\t  <br/>    &lt;/object&gt;<br/>\t<br/>  &lt;/object&gt;<br/>  <br/>  &lt;!-- Types (Object Types) --&gt;<br/>  <br/>  &lt;!-- Storage Types (Object Types) --&gt;<br/>  <br/>  &lt;type name=&quot;storage_type&quot;&gt;<br/>    &lt;inherit name=&quot;container_closed&quot; /&gt;<br/>    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;<br/>    &lt;inventoryverbs type=&quot;list&quot;&gt;Look; Open; Close&lt;/inventoryverbs&gt;<br/>  &lt;/type&gt;<br/>  <br/>  &lt;!-- Spell Types (Object Types) --&gt;<br/>  <br/>  &lt;type name=&quot;spell&quot;&gt;<br/>    &lt;drop type=&quot;boolean&quot;&gt;false&lt;/drop&gt;<br/>    &lt;mana_points_cost type=&quot;int&quot;&gt;0&lt;/mana_points_cost&gt;<br/>    &lt;inventoryverbs type=&quot;list&quot;&gt;Learn&lt;/inventoryverbs&gt;<br/>    &lt;displayverbs type=&quot;list&quot;&gt;Learn&lt;/displayverbs&gt;<br/>    &lt;learn type=&quot;script&quot;&gt;<br/>      result = get_elemental (this)<br/>      switch (result) {<br/>        case (&quot;fire&quot;) {<br/>          if (not this&#46;parent = fire_storage) {<br/>            this&#46;parent = fire_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;water&quot;) {<br/>          if (not this&#46;parent = water_storage) {<br/>            this&#46;parent = water_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;air&quot;) {<br/>          if (not this&#46;parent = air_storage) {<br/>            this&#46;parent = air_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;earth&quot;) {<br/>          if (not this&#46;parent = earth_storage) {<br/>            this&#46;parent = earth_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;light&quot;) {<br/>          if (not this&#46;parent = light_storage) {<br/>            this&#46;parent = light_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;dark&quot;) {<br/>          if (not this&#46;parent = dark_storage) {<br/>            this&#46;parent = dark_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;holy&quot;) {<br/>          if (not this&#46;parent = holy_storage) {<br/>            this&#46;parent = holy_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>        case (&quot;unholy&quot;) {<br/>          if (not this&#46;parent = unholy_storage) {<br/>            this&#46;parent = unholy_storage<br/>            this&#46;inventoryverbs = split (&quot;Cast;Teach&quot;,&quot;;&quot;)<br/>            msg (DynamicTemplate (&quot;Spell_Learned&quot;,this))<br/>          }<br/>          else {<br/>            msg (&quot;&#91;Spell_Already_Learned&#93;&quot;)<br/>          }<br/>        }<br/>      }<br/>    &lt;/learn&gt;<br/>  &lt;/type&gt;<br/>  <br/>  &lt;type name=&quot;fire_elemental&quot; /&gt;<br/>  &lt;type name=&quot;water_elemental&quot; /&gt;<br/>  &lt;type name=&quot;air_elemental&quot; /&gt;<br/>  &lt;type name=&quot;earth_elemental&quot; /&gt;<br/>  &lt;type name=&quot;light_elemental&quot; /&gt;<br/>  &lt;type name=&quot;dark_elemental&quot; /&gt;<br/>  &lt;type name=&quot;holy_elemental&quot; /&gt;<br/>  &lt;type name=&quot;unholy_elemental&quot; /&gt;<br/>  <br/>  &lt;!-- Functions --&gt;<br/>  <br/>  &lt;function name=&quot;get_elemental&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;<br/>    result = null<br/>    foreach (elem, elemental_structure&#46;normal_elemental) {<br/>      type = elem + &quot;_elemental&quot;<br/>      if (DoesInherit (obj,type)) {<br/>        result = elem<br/>      }<br/>    }<br/>    return (result)<br/>  &lt;/function&gt;<br/>  <br/>&lt;/library&gt;</code></pre><br/><br/>--------<br/><br/>P.S.<br/><br/>really the only code you're interested in for what you want to do, would be this (unless you can't work directly the inventory pane with the codings):<br/><br/>for what you want to do, it'll obviously be a bit different, and either with more or less complex coding, as you got to figure out how to code with the inventory display titles (if this can be done, I think it can anyways). so, this code below isn't too useful, except as a very loose coding method, and you've got other things you got to code in beyond just &quot;Get_Whatever&quot;, hehe.<br/><br/><pre><code>  &lt;function name=&quot;get_elemental&quot; parameters=&quot;obj&quot; type=&quot;string&quot;&gt;<br/>    result = null<br/>    foreach (elem, elemental_structure&#46;normal_elemental) {<br/>      type = elem + &quot;_elemental&quot;<br/>      if (DoesInherit (obj,type)) {<br/>        result = elem<br/>      }<br/>    }<br/>    return (result)<br/>  &lt;/function&gt;</code></pre><br/><br/>as I think you'll have to (in my noob attempt at guessing how to code it, lol):<br/><br/>need a way of &quot;checking and getting&quot; a list of the items in your inventory, so that you can then identify the &quot;worm&quot; items, and then figure out how to count them, and then substitute all of the worm items for: a single worm item with it's amount of them (or if you're going to have worms with different attributes, then multiple single worm items of those different worm types, and with it doing the same of removing them and adding in the right number onto the right single worm type name).<br/><br/>i.e.<br/><br/>player.inventory:<br/><br/>worm_type_1 (heals 25 HP)<br/>worm_type_1 (heals 25 HP)<br/>worm_type_2 (heals 50 HP)<br/>worm_type_2 (heals 50 HP)<br/>worm_type_2 (heals 50 HP)<br/>worm_type_3 (heals 100 HP)<br/>worm_type_3 (heals 100 HP)<br/>worm_type_3 (heals 100 HP)<br/>worm_type_3 (heals 100 HP)<br/><br/>~TO~<br/><br/>player.inventory:<br/><br/>worm_type_1 (x2)<br/>worm_type_2 (x3)<br/>worm_type_3 (x4)<br/><br/>then you got to code in when you eat a worm, to adjust the amount shown (and if you eat the last one, it then disappears from your inventory, lol)",
      "PostDate": "2013-02-20T07:10:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22875",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "Thanks for your very detailed response.  I need some time to digest that much code!\n\nIn the meantime, is there a way to display an object's attribute in the object's inventory display alias?  I guessed and tried,\n\nBag of worms (#this.number_of_worms#)\n\nBut it just prints it out literally. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nCheers,\n- B",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for your very detailed response.  I need some time to digest that much code!<br/><br/>In the meantime, is there a way to display an object's attribute in the object's inventory display alias?  I guessed and tried,<br/><br/>Bag of worms (#this.number_of_worms#)<br/><br/>But it just prints it out literally. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>Cheers,<br/>- B",
      "PostDate": "2013-02-22T04:36:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22879",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "See Pixie's Combat Library, Pertex' Combat Library, and~or Chase' Wearables Library, they all utilize equipment, and thus have the code for showing~displaying in the inventory, an example: adamantium_armor (equipped)\n\n---------\n\nfrom the wiki:\n\nGetDisplayAlias ( object ) ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetDisplayAlias\">http://quest5.net/wiki/GetDisplayAlias</a><!-- m --> )\n\nReturns a string containing the displayed version of the object name. This will be the alias, if the object has one, otherwise it will just be the object name.\n\nGetDisplayName ( object ) ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetDisplayName\">http://quest5.net/wiki/GetDisplayName</a><!-- m --> )\n\nReturns a string containing the full displayed name of an object. This will be the prefix + the result from GetDisplayAlias + the suffix\n\n----------------\n\nfrom a brief look at their libraries, it looks like you just set it, via these 1-3 methods:\n\n1) object.display = GetDisplayAlias ( object )\n2) object.alias = GetDisplayAlias ( object ) + &quot;(string)&quot;\n\n-----\n\nI didn't see this, and didn't look at their codes closely enough, so this may not be needed at all:\n\n3) object.display = GetDisplayAlias ( object ) + &quot;(string)&quot;\n\n-------------------\n\nalso, you'll have to use a function with a string return, to get just the number value to show up in the above codes.\n\nso, maybe it'll look like this (this might be totally off, lol):\n\n[code:3bjwoxq3]&lt;function name=&quot;get_worm_value&quot; parameters=&quot;object&quot; type=&quot;string&quot;&gt;\n  foreach (item, scopeinventory ()) {\n    if GetBoolean (object,&quot;worm_type&quot;) {\n      if HasAttribute (object,&quot;quantity&quot;) {\n        result = this&#46;quantity\n      }\n    }\n  }\n  return (result)\n&lt;/function&gt;\n\n&lt;script&gt;\n  object&#46;alias = GetDisplayAlias ( object ) + &quot;(get_worm_value ( object ) )&quot; // or however you bloody get the syntax correct, lol\n&lt;/script&gt;[/code:3bjwoxq3]",
      "EditableFormat": "bbcode",
      "HTML": "See Pixie's Combat Library, Pertex' Combat Library, and~or Chase' Wearables Library, they all utilize equipment, and thus have the code for showing~displaying in the inventory, an example: adamantium_armor (equipped)<br/><br/>---------<br/><br/>from the wiki:<br/><br/>GetDisplayAlias ( object ) ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetDisplayAlias\">http://quest5.net/wiki/GetDisplayAlias</a><!-- m --> )<br/><br/>Returns a string containing the displayed version of the object name. This will be the alias, if the object has one, otherwise it will just be the object name.<br/><br/>GetDisplayName ( object ) ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/GetDisplayName\">http://quest5.net/wiki/GetDisplayName</a><!-- m --> )<br/><br/>Returns a string containing the full displayed name of an object. This will be the prefix + the result from GetDisplayAlias + the suffix<br/><br/>----------------<br/><br/>from a brief look at their libraries, it looks like you just set it, via these 1-3 methods:<br/><br/>1) object.display = GetDisplayAlias ( object )<br/>2) object.alias = GetDisplayAlias ( object ) + &quot;(string)&quot;<br/><br/>-----<br/><br/>I didn't see this, and didn't look at their codes closely enough, so this may not be needed at all:<br/><br/>3) object.display = GetDisplayAlias ( object ) + &quot;(string)&quot;<br/><br/>-------------------<br/><br/>also, you'll have to use a function with a string return, to get just the number value to show up in the above codes.<br/><br/>so, maybe it'll look like this (this might be totally off, lol):<br/><br/><pre><code>&lt;function name=&quot;get_worm_value&quot; parameters=&quot;object&quot; type=&quot;string&quot;&gt;<br/>  foreach (item, scopeinventory ()) {<br/>    if GetBoolean (object,&quot;worm_type&quot;) {<br/>      if HasAttribute (object,&quot;quantity&quot;) {<br/>        result = this&#46;quantity<br/>      }<br/>    }<br/>  }<br/>  return (result)<br/>&lt;/function&gt;<br/><br/>&lt;script&gt;<br/>  object&#46;alias = GetDisplayAlias ( object ) + &quot;(get_worm_value ( object ) )&quot; // or however you bloody get the syntax correct, lol<br/>&lt;/script&gt;</code></pre>",
      "PostDate": "2013-02-22T11:15:58+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22896",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "Thanks!  You pointed me in the right direction.  I was thinking about how to do it using the editor, but setting the inventory name in the script made a lot of sense.  Here's what I ended up doing:\n\n[code:pyup215u]\n    &lt;start type=&quot;script&quot;&gt;\n      bag_of_worms&#46;listalias = &quot;bag of worms (&quot; + bag_of_worms&#46;number_of_worms + &quot;)&quot;\n    &lt;/start&gt;\n[/code:pyup215u]\n\nLater, in the code, I just need to remember to set bag_of_worms.listalias anytime the worm count changes.  I'll probably use the same technique for arrows.  <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nCheers,\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "Thanks!  You pointed me in the right direction.  I was thinking about how to do it using the editor, but setting the inventory name in the script made a lot of sense.  Here's what I ended up doing:<br/><br/><pre><code><br/>    &lt;start type=&quot;script&quot;&gt;<br/>      bag_of_worms&#46;listalias = &quot;bag of worms (&quot; + bag_of_worms&#46;number_of_worms + &quot;)&quot;<br/>    &lt;/start&gt;<br/></code></pre><br/><br/>Later, in the code, I just need to remember to set bag_of_worms.listalias anytime the worm count changes.  I'll probably use the same technique for arrows.  <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>Cheers,<br/>- Bret",
      "PostDate": "2013-02-23T05:50:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22910",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "haha... I was overthinking... lol... no need for the &quot;get code&quot;, just simply do, &quot;worms.quantity&quot; (well, if you don't have different types of worms or of their attributes anyways)... doh! I hope that this over thinking of mine, isn't becoming a habit now of mine... ARGH!\n\n----------------\n\nooo, you are working with arrows, hehe.\n\nmy plan (very slowly, due to learning to code lol, working on making an RPG like game as possible with quest):\n\nhave different object types assigned to bows and arrows, to create different types of bows and arrows:\n\n&gt; elemental (fire, water, earth, air, etc) object types on the arrows for elemental damage\n&gt; material (wood, steel, etc) object types on the bows and arrows for different amounts of physical damage or whatever else\n&gt; bow_types (short, long, hunter, battle, war, recurve, etc) object types on bows for different amounts of physical damage or whatever else\n&gt; by having these as object types, I can then make unique attributed bow objects as the objects themselves ( ' Chinghis_Bow '), while adding what object types I want to them, hehe.\n&gt; ooo, coding in a ' rate of fire ' will be needed to as an attribute, I guess: physical damage + elemental damage * rate of fire\n\nset &quot;arrows&quot; as an &quot;amount&quot; int attribute on the characters (players + npcs)\n\nthough, this is a problem, as with all the different types of arrows... I can't have simply ' Arrows (X amount) ' displayed.\n\nI might make a function to check what types of arrows, and return each arrow type with its amount, on a ' show bows and arrows ' command (+function) displaying it on the main pane, as I don't want to clutter up the status attribute pane (I plan to make a lot of these such ' show ??? ' commands (like equipment, stats, spells, and etc &quot;screens&quot;). Or, I could just make each type of arrow having its own attribute, though I'll probably still need to make some fuctions anyways to deal with increasing or lowering the amount, anyways, lol and meh.\n\nOr... maybe I'll require you to equip what arrow you want, then I can have a single display (as it would be the amount of the arrow type that you have equipped, though this means more coding, which hopefully I can figure out, lol).\n\nI'm also deciding whether I want you to equip an ' arrow case ' to hold X amount of arrows (and this ' arrow case's carry amount ' can be changed too, like maybe with a perk or whatever), or whether I should not have this as an object, and just use only as attributes instead, hmm...\n\nNot sure what is the best Game Design + Quest Coding Design for achieving this... hmm...\n\n------\n\nI don't want obviously to have lots of objects or clones used, as I'm going to have enough objects as is, with all the different equipment choices of objects and etc, lol.\n\nthe more attributes the better, than using actual objects... but that means more coding~functions I'll have to create and work with.",
      "EditableFormat": "bbcode",
      "HTML": "haha... I was overthinking... lol... no need for the &quot;get code&quot;, just simply do, &quot;worms.quantity&quot; (well, if you don't have different types of worms or of their attributes anyways)... doh! I hope that this over thinking of mine, isn't becoming a habit now of mine... ARGH!<br/><br/>----------------<br/><br/>ooo, you are working with arrows, hehe.<br/><br/>my plan (very slowly, due to learning to code lol, working on making an RPG like game as possible with quest):<br/><br/>have different object types assigned to bows and arrows, to create different types of bows and arrows:<br/><br/>&gt; elemental (fire, water, earth, air, etc) object types on the arrows for elemental damage<br/>&gt; material (wood, steel, etc) object types on the bows and arrows for different amounts of physical damage or whatever else<br/>&gt; bow_types (short, long, hunter, battle, war, recurve, etc) object types on bows for different amounts of physical damage or whatever else<br/>&gt; by having these as object types, I can then make unique attributed bow objects as the objects themselves ( ' Chinghis_Bow '), while adding what object types I want to them, hehe.<br/>&gt; ooo, coding in a ' rate of fire ' will be needed to as an attribute, I guess: physical damage + elemental damage * rate of fire<br/><br/>set &quot;arrows&quot; as an &quot;amount&quot; int attribute on the characters (players + npcs)<br/><br/>though, this is a problem, as with all the different types of arrows... I can't have simply ' Arrows (X amount) ' displayed.<br/><br/>I might make a function to check what types of arrows, and return each arrow type with its amount, on a ' show bows and arrows ' command (+function) displaying it on the main pane, as I don't want to clutter up the status attribute pane (I plan to make a lot of these such ' show ??? ' commands (like equipment, stats, spells, and etc &quot;screens&quot;). Or, I could just make each type of arrow having its own attribute, though I'll probably still need to make some fuctions anyways to deal with increasing or lowering the amount, anyways, lol and meh.<br/><br/>Or... maybe I'll require you to equip what arrow you want, then I can have a single display (as it would be the amount of the arrow type that you have equipped, though this means more coding, which hopefully I can figure out, lol).<br/><br/>I'm also deciding whether I want you to equip an ' arrow case ' to hold X amount of arrows (and this ' arrow case's carry amount ' can be changed too, like maybe with a perk or whatever), or whether I should not have this as an object, and just use only as attributes instead, hmm...<br/><br/>Not sure what is the best Game Design + Quest Coding Design for achieving this... hmm...<br/><br/>------<br/><br/>I don't want obviously to have lots of objects or clones used, as I'm going to have enough objects as is, with all the different equipment choices of objects and etc, lol.<br/><br/>the more attributes the better, than using actual objects... but that means more coding~functions I'll have to create and work with.",
      "PostDate": "2013-02-24T00:34:47+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22911",
      "UserId": 0,
      "Username": "clone45",
      "UserAvatar": null,
      "UserGravatar": "fc639c6ec32b575e9110652b2ec3ff01",
      "EditableText": "My bows aren't going to be as complex as yours.  In fact, I might even simplify it further by allowing the player to &quot;hunt&quot; if they have a bow and if they're in a location that supports it.  Maybe I won't even deal with arrows. Perhaps I should keep it simple for my first game.\n\nWhat if you simply had magical bows instead of magical arrows?  Like, &quot;a bow of fire&quot;?\n\nCheers,\n- Bret",
      "EditableFormat": "bbcode",
      "HTML": "My bows aren't going to be as complex as yours.  In fact, I might even simplify it further by allowing the player to &quot;hunt&quot; if they have a bow and if they're in a location that supports it.  Maybe I won't even deal with arrows. Perhaps I should keep it simple for my first game.<br/><br/>What if you simply had magical bows instead of magical arrows?  Like, &quot;a bow of fire&quot;?<br/><br/>Cheers,<br/>- Bret",
      "PostDate": "2013-02-24T02:47:19+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22917",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "oh certainly, it could be far more simple, though for realism, it is the projectiles that do the damage, as you're not bashing someone on the head with your bow, lol. I think and hope that the extra complexity will make the ranged combat much more interesting and enjoyable, or at least the illusion of it, lol. Also, the different materials for the arrows can be used for with determining ' Piercing ', to add more realism and more complexity for the ranged combat. Also, I could have an equipment ' Breaking ' and ' Repair ' attributes too, by using different materials for the bows (and other equipment too). Etc Etc Etc. You got to make ranged combat unique, otherwise it's no different than melee combat, and no one likes doing ranged combat in name only, while it functions exactly as if you were using a melee weapon like a sword.\n\nthough, I'm just brainstorming too far ahead... lol. A very ambitious project, especially when I'm still just trying to learn the very basics of coding, hehe.",
      "EditableFormat": "bbcode",
      "HTML": "oh certainly, it could be far more simple, though for realism, it is the projectiles that do the damage, as you're not bashing someone on the head with your bow, lol. I think and hope that the extra complexity will make the ranged combat much more interesting and enjoyable, or at least the illusion of it, lol. Also, the different materials for the arrows can be used for with determining ' Piercing ', to add more realism and more complexity for the ranged combat. Also, I could have an equipment ' Breaking ' and ' Repair ' attributes too, by using different materials for the bows (and other equipment too). Etc Etc Etc. You got to make ranged combat unique, otherwise it's no different than melee combat, and no one likes doing ranged combat in name only, while it functions exactly as if you were using a melee weapon like a sword.<br/><br/>though, I'm just brainstorming too far ahead... lol. A very ambitious project, especially when I'm still just trying to learn the very basics of coding, hehe.",
      "PostDate": "2013-02-24T16:50:37+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22918",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "Actually, from table-top gaming, I would say the difference between enchanted bows vs arrows is that you can keep various arrows on hand for different purposes (I.e. fire arrows, ice arrows, holy arrows, etc.). In the case of a bow, it bestows the effect on any arrow used. So a &quot;fire bow&quot; would turn regular arrows into fire arrows, but it is less versatile. So you could still require a supply of regular arrows to go with it.",
      "EditableFormat": "bbcode",
      "HTML": "Actually, from table-top gaming, I would say the difference between enchanted bows vs arrows is that you can keep various arrows on hand for different purposes (I.e. fire arrows, ice arrows, holy arrows, etc.). In the case of a bow, it bestows the effect on any arrow used. So a &quot;fire bow&quot; would turn regular arrows into fire arrows, but it is less versatile. So you could still require a supply of regular arrows to go with it.",
      "PostDate": "2013-02-24T17:17:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22920",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "that's true, maybe I will make only the bow have the elemental types, but that still leaves the material types for the arrows. It really doesn't matter though how you set it up, as you end up at the same place, just different styles on personal preference.\n\nI just want both bow and arrows to have attributes for adding the damage and~or whatever other effects of the bow and arrow.\n\nFor my own personal taste only, hehe.\n\n------------------\n\nthough... for the amusement of argument on this silly subject... hehe\n\nan enchanted bow works fine for elemental effects, but you can't have an &quot;enchanted bow&quot; which turns wooden arrows into steel arrows... as this isn't even (well, hardly) heard of within fantasy, lol. At least I've never come across an &quot;Alchemy Bow&quot; !",
      "EditableFormat": "bbcode",
      "HTML": "that's true, maybe I will make only the bow have the elemental types, but that still leaves the material types for the arrows. It really doesn't matter though how you set it up, as you end up at the same place, just different styles on personal preference.<br/><br/>I just want both bow and arrows to have attributes for adding the damage and~or whatever other effects of the bow and arrow.<br/><br/>For my own personal taste only, hehe.<br/><br/>------------------<br/><br/>though... for the amusement of argument on this silly subject... hehe<br/><br/>an enchanted bow works fine for elemental effects, but you can't have an &quot;enchanted bow&quot; which turns wooden arrows into steel arrows... as this isn't even (well, hardly) heard of within fantasy, lol. At least I've never come across an &quot;Alchemy Bow&quot; !",
      "PostDate": "2013-02-24T20:41:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22921",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "[quote=&quot;HegemonKhan&quot;:hudhsnfs]an enchanted bow works fine for elemental effects, but you can't have an &quot;enchanted bow&quot; which turns wooden arrows into steel arrows... as this isn't even (well, hardly) heard of within fantasy, lol. At least I've never come across an &quot;Alchemy Bow&quot; ![/quote:hudhsnfs]\n\nEvery DM ever says, &quot;That's a FANTASTIC idea! I can't wait to see the look on my players' faces when they watch a guy pull a normal wooden arrow and then get their shield shattered by an adamantium arrow! WOOHOO!!!&quot;",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>HegemonKhan wrote:</cite>an enchanted bow works fine for elemental effects, but you can't have an &quot;enchanted bow&quot; which turns wooden arrows into steel arrows... as this isn't even (well, hardly) heard of within fantasy, lol. At least I've never come across an &quot;Alchemy Bow&quot; !</blockquote><br/><br/>Every DM ever says, &quot;That's a FANTASTIC idea! I can't wait to see the look on my players' faces when they watch a guy pull a normal wooden arrow and then get their shield shattered by an adamantium arrow! WOOHOO!!!&quot;",
      "PostDate": "2013-02-24T21:01:23+00:00",
      "LastEditDate": null
    }
  ]
}
