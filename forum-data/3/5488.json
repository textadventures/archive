{
  "Topic": {
    "TopicId": "5488",
    "ForumId": "3",
    "Title": "Emergency!: I need help with java!",
    "LastUpdated": "2015-09-22T08:02:15+01:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "38028",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Emergency!: I need help with java school work!\n\nI only got until 12 noon (pacific time: aka: california's time zone) tues, 9-22-15, to get it done\n\nhere's the assignment:\n\n[code:195uer15]You will write a program that reads integer values from a ﬁle named 'input&#46;txt' \nAll the integers will be on one line in the ﬁle, however the number of integers in the ﬁle may \nvary&#46; \nYour program must contain the following two methods in addition to main \nThese should be public static methods that return double \n•computeMean \n• accepts a ﬁlename \n• returns a double value \n• The mean is computed by averaging all the integers in the input ﬁle; return this value \n•computeStandardDeviation \n• accepts a ﬁlename and a double value (the mean) \n• computes and returns the double value that is the standard deviation \nStandard Deviation is deﬁned as (see p461 in the text, problem 15)&#58; \nThe square root of the average of the sum of the squared differences from the mean \nExample, if you have 3 integers, with a mean of 2&#46;5, compute as follows&#58; \nstdDev = sqrt( ( (n1 - 2&#46;5)^2 + (n2 - 2&#46;5)^2 + (n3 - 2&#46;5)^2 ) / 3 ) \nOutput&#58; \nYour program should print the numbers in the input ﬁle \nThen print the mean, to 2 decimal places \nThen print the standard deviation, to 2 decimal places \nExample, input&#46;txt contains 1 2 3 4 5, output is \nInput&#58; 1 2 3 4 5  \nMean&#58; 3&#46;00 \nStdDev&#58; 1&#46;41 \nExample, input&#46;txt contains 8 5 29 20 100 33 292, output is \nInput&#58; 8 5 29 20 100 33 292  \nMean&#58; 69&#46;57 \nStdDev&#58; 95&#46;47 \n\n• You must use the output of the 'computeMean' function as the input mean value for the \n'computeStandardDeviation' function (-2pts) \n• You should read the ﬁle completely inside each of the functions \n• this will result in a total of 3 ﬁle reads (one in the 'main' method, one each in the \ncomputeMean and computeStandardDeviation method) \n• You must use create and use the computeMean and computeStandardDeviation \nmethods, if you do all your work in 'main' you will get 0 points \n• Console output ONLY happens in main \n• do not print out to the console inside of the computeMean or \ncomputeStandardDeviation methods (-1pt per method)[/code:195uer15]\n\nand here's what I've done:\n\n(I don't know java well at all, as can see from all of my errors, sighs, and thus I don't know how, what, or even where to research~look, for how to deal with them. Is my program close to working (just have stupid errors to take care of: the program is logically~functionally fine otherwise), or am I completely off in my design of my program with using java? I really don't yet understand how java programs are structured, as it's very different to what limited coding I know)\n\n[code:195uer15]// program header info&#58;\n\n// Program Purpose&#58;\n\n// Packages~Libraries~Modules&#58;\n\nimport java&#46;util&#46;Scanner;\nimport java&#46;io&#46;FileReader;\nimport java&#46;io&#46;File;\nimport java&#46;io&#46;FileNotFoundException;\n\npublic class Lab04\n{\n\t// Class-Global Constants ~ Variables ~ Object Instantiation&#58;\n\t\n\tstatic Scanner console = new Scanner(System&#46;in);\n\t\n\tstatic double mean, standard_deviation;\n\t\n\tstatic String file_data, file_name;\n\t\n\t// Methods~Functions&#58;\n\t\n\tpublic static void main(String&#91;&#93; args) throws FileNotFoundException\n\t{\n\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;\n\t\t\n\t\t// program&#58;\n\t\t\n\t\tHeader();\n\t\tPurpose();\n\t\tProgram();\n\t}\n\t\n\tpublic static void Header()\n\t{\n\t\t// Header Info Displayment&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;\\n\\n****************************************&quot; +\n\t\t\t&quot;****************************************&quot;);\n\t\tSystem&#46;out&#46;println(&quot;&quot;);\n\t\tSystem&#46;out&#46;println(&quot;&quot;);\n\t\tSystem&#46;out&#46;println(&quot;&quot;);\n\t\tSystem&#46;out&#46;println(&quot;&quot;);\n\t\tSystem&#46;out&#46;println(&quot;&quot;);\n\t\tSystem&#46;out&#46;println(&quot;****************************************&quot; +\n\t\t\t&quot;****************************************\\n\\n&quot;);\n\t}\n\t\n\tpublic static void Purpose()\n\t{\n\t\t// Purpose Displayment&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;xxx purpose xxx\\n\\n&quot;);\n\t}\n\t\n\tpublic static void Program() throws FileNotFoundException\n\t{\n\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;\n\t\n\t\tScanner read_file = new Scanner(new FileReader(&quot;input&#46;txt&quot;));\n\t\t\n\t\t// just for segmenting these file prompts from rest of program&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +\n\t\t\t&quot;----------------------------------------\\n\\n&quot;);\n\t\t\n\t\t// prompting the user that the 'input&#46;txt' file is opened, and being\n\t\t// \t\tread by the program&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file has been opened, and is &quot; +\n\t\t\t&quot;being read by the program&#46;\\n\\n&quot;);\n\t\t\n\t\t// Get, Concatenate~Compute, and return new file data values, storing\n\t\t//\t\tthem into variables for the later-on displayment&#58;\n\t\t\n\t\tfile_data = Concatenate_File_Data(read_file);\n\t\t\n\t\tif (file_data != null)\n\t\t{\n\t\t\tmean = Compute_Mean(read_file);\n\t\t\tstandard_deviation = Compute_Standard_Deviation(read_file, mean);\n\t\t}\n\t\t\n\t\t// close the 'input&#46;txt' File&#58;\n\t\t\n\t\tread_file&#46;close();\n\t\t\n\t\t// prompt the user that the 'input&#46;txt' file has been closed&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file's data has been read and \\n&quot;\n\t\t\t+ &quot;stored, and the file has been closed&#46;\\n\\n&quot;);\n\t\t\t\n\t\t// no simple way of clearing the console screen with java, so I am just\n\t\t//\t\tseparating the file prompts from actual stock ticker program&#58;\n\t\t\t\n\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +\n\t\t\t&quot;----------------------------------------\\n\\n&quot;);\n\t\t\t\n\t\t// quick local variable to get the file name&#58;\n\t\t// (for the immediate next code lines' usage)\n\t\t\n\t\tfile_name = read_file&#46;getName();\n\t\t\n\t\t// checking+correcting variables for their displaying of the results,\n\t\t//\t\tand the displayment of the results&#58;\n\t\t\n\t\tif (file_data == null)\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; null (The file has no &quot; +\n\t\t\t\t&quot;integer data that this program requires)%nMean&#58; null%nStandard&quot;\n\t\t\t\t+ &quot; Deviation&#58; null%n%n&quot;, file_name);\n\t\t}\n\t\telse if (((mean == 0)||(mean &gt;= 0))&amp;&amp;(standard_deviation == -1))\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;\n\t\t\t\t+ &quot;Deviation&#58; (Error&#58; imaginary numbers&#58; square root of &quot; +\n\t\t\t\t&quot;negative number)%n%n&quot;, file_name, file_data, mean,\n\t\t\t\tstandard_deviation);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;\n\t\t\t\t+ &quot;Deviation&#58; %&#46;2f%n%n&quot;, file_name, file_data, mean,\n\t\t\t\tstandard_deviation);\n\t\t}\n\t}\n\t\n\tpublic static String Concatenate_File_Data(read_file_parameter)\n\t{\n\t\tString local_string = read_file_parameter&#46;hasNext();\n\t\t\n\t\tif (!read_file_parameter&#46;hasNext())\n\t\t{\n\t\t\treturn (null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (read_file_parameter&#46;hasNext())\n\t\t\t{\n\t\t\t\tlocal_string +=\n\t\t\t\t\t(&quot; &quot; + String&#46;valueOf(read_file_parameter&#46;nextInt()));\n\t\t\t}\n\t\t\treturn(local_string);\n\t\t}\n\t}\n\t\n\tpublic static double Compute_Mean(read_file_parameter)\n\t{\n\t\tint local_sum = 0, local_counter = 1;\n\t\t\n\t\twhile (read_file_parameter&#46;hasNext())\n\t\t{\n\t\t\tfile_data += String&#46;valueOf(read_file_parameter&#46;nextInt());\n\t\t\tlocal_sum += read_file_parameter&#46;nextInt();\n\t\t\tlocal_counter++;\n\t\t}\n\t\t\n\t\tif (local_sum == 0)\n\t\t{\n\t\t\treturn(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn((double)(local_sum)/(double)(local_counter));\n\t\t}\n\t}\n\t\n\tpublic static double Compute_Standard_Deviation(read_file_parameter,\n\t\tmean_parameter)\n\t{\n\t\tdouble local_sum = 0&#46;0;\n\t\tint local_counter = 1;\n\t\t\n\t\tfor (local_counter; read_file_parameter&#46;hasNext(); local_counter++)\n\t\t{\n\t\t\tlocal_sum += pow(((double)(read_file_parameter&#46;hasNext()) -\n\t\t\t\tmean_parameter), 2&#46;0);\n\t\t}\n\t\t\n\t\tif (local_sum &gt; 0)\n\t\t{\n\t\t\treturn(sqrt((local_sum)/(double)(local_counter)));\n\t\t}\n\t\telse if (local_sum == 0)\n\t\t{\n\t\t\treturn (0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (-1);\n\t\t}\n\t}\n}[/code:195uer15]\n\nif anyone knows java well, any help today or tomarrow, would be greatly appreciated!",
      "EditableFormat": "bbcode",
      "HTML": "Emergency!: I need help with java school work!<br/><br/>I only got until 12 noon (pacific time: aka: california's time zone) tues, 9-22-15, to get it done<br/><br/>here's the assignment:<br/><br/><pre><code>You will write a program that reads integer values from a ﬁle named 'input&#46;txt' <br/>All the integers will be on one line in the ﬁle, however the number of integers in the ﬁle may <br/>vary&#46; <br/>Your program must contain the following two methods in addition to main <br/>These should be public static methods that return double <br/>•computeMean <br/>• accepts a ﬁlename <br/>• returns a double value <br/>• The mean is computed by averaging all the integers in the input ﬁle; return this value <br/>•computeStandardDeviation <br/>• accepts a ﬁlename and a double value (the mean) <br/>• computes and returns the double value that is the standard deviation <br/>Standard Deviation is deﬁned as (see p461 in the text, problem 15)&#58; <br/>The square root of the average of the sum of the squared differences from the mean <br/>Example, if you have 3 integers, with a mean of 2&#46;5, compute as follows&#58; <br/>stdDev = sqrt( ( (n1 - 2&#46;5)^2 + (n2 - 2&#46;5)^2 + (n3 - 2&#46;5)^2 ) / 3 ) <br/>Output&#58; <br/>Your program should print the numbers in the input ﬁle <br/>Then print the mean, to 2 decimal places <br/>Then print the standard deviation, to 2 decimal places <br/>Example, input&#46;txt contains 1 2 3 4 5, output is <br/>Input&#58; 1 2 3 4 5  <br/>Mean&#58; 3&#46;00 <br/>StdDev&#58; 1&#46;41 <br/>Example, input&#46;txt contains 8 5 29 20 100 33 292, output is <br/>Input&#58; 8 5 29 20 100 33 292  <br/>Mean&#58; 69&#46;57 <br/>StdDev&#58; 95&#46;47 <br/><br/>• You must use the output of the 'computeMean' function as the input mean value for the <br/>'computeStandardDeviation' function (-2pts) <br/>• You should read the ﬁle completely inside each of the functions <br/>• this will result in a total of 3 ﬁle reads (one in the 'main' method, one each in the <br/>computeMean and computeStandardDeviation method) <br/>• You must use create and use the computeMean and computeStandardDeviation <br/>methods, if you do all your work in 'main' you will get 0 points <br/>• Console output ONLY happens in main <br/>• do not print out to the console inside of the computeMean or <br/>computeStandardDeviation methods (-1pt per method)</code></pre><br/><br/>and here's what I've done:<br/><br/>(I don't know java well at all, as can see from all of my errors, sighs, and thus I don't know how, what, or even where to research~look, for how to deal with them. Is my program close to working (just have stupid errors to take care of: the program is logically~functionally fine otherwise), or am I completely off in my design of my program with using java? I really don't yet understand how java programs are structured, as it's very different to what limited coding I know)<br/><br/><pre><code>// program header info&#58;<br/><br/>// Program Purpose&#58;<br/><br/>// Packages~Libraries~Modules&#58;<br/><br/>import java&#46;util&#46;Scanner;<br/>import java&#46;io&#46;FileReader;<br/>import java&#46;io&#46;File;<br/>import java&#46;io&#46;FileNotFoundException;<br/><br/>public class Lab04<br/>{<br/>\t// Class-Global Constants ~ Variables ~ Object Instantiation&#58;<br/>\t<br/>\tstatic Scanner console = new Scanner(System&#46;in);<br/>\t<br/>\tstatic double mean, standard_deviation;<br/>\t<br/>\tstatic String file_data, file_name;<br/>\t<br/>\t// Methods~Functions&#58;<br/>\t<br/>\tpublic static void main(String&#91;&#93; args) throws FileNotFoundException<br/>\t{<br/>\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;<br/>\t\t<br/>\t\t// program&#58;<br/>\t\t<br/>\t\tHeader();<br/>\t\tPurpose();<br/>\t\tProgram();<br/>\t}<br/>\t<br/>\tpublic static void Header()<br/>\t{<br/>\t\t// Header Info Displayment&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;\\n\\n****************************************&quot; +<br/>\t\t\t&quot;****************************************&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;&quot;);<br/>\t\tSystem&#46;out&#46;println(&quot;****************************************&quot; +<br/>\t\t\t&quot;****************************************\\n\\n&quot;);<br/>\t}<br/>\t<br/>\tpublic static void Purpose()<br/>\t{<br/>\t\t// Purpose Displayment&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;xxx purpose xxx\\n\\n&quot;);<br/>\t}<br/>\t<br/>\tpublic static void Program() throws FileNotFoundException<br/>\t{<br/>\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;<br/>\t<br/>\t\tScanner read_file = new Scanner(new FileReader(&quot;input&#46;txt&quot;));<br/>\t\t<br/>\t\t// just for segmenting these file prompts from rest of program&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +<br/>\t\t\t&quot;----------------------------------------\\n\\n&quot;);<br/>\t\t<br/>\t\t// prompting the user that the 'input&#46;txt' file is opened, and being<br/>\t\t// \t\tread by the program&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file has been opened, and is &quot; +<br/>\t\t\t&quot;being read by the program&#46;\\n\\n&quot;);<br/>\t\t<br/>\t\t// Get, Concatenate~Compute, and return new file data values, storing<br/>\t\t//\t\tthem into variables for the later-on displayment&#58;<br/>\t\t<br/>\t\tfile_data = Concatenate_File_Data(read_file);<br/>\t\t<br/>\t\tif (file_data != null)<br/>\t\t{<br/>\t\t\tmean = Compute_Mean(read_file);<br/>\t\t\tstandard_deviation = Compute_Standard_Deviation(read_file, mean);<br/>\t\t}<br/>\t\t<br/>\t\t// close the 'input&#46;txt' File&#58;<br/>\t\t<br/>\t\tread_file&#46;close();<br/>\t\t<br/>\t\t// prompt the user that the 'input&#46;txt' file has been closed&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file's data has been read and \\n&quot;<br/>\t\t\t+ &quot;stored, and the file has been closed&#46;\\n\\n&quot;);<br/>\t\t\t<br/>\t\t// no simple way of clearing the console screen with java, so I am just<br/>\t\t//\t\tseparating the file prompts from actual stock ticker program&#58;<br/>\t\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +<br/>\t\t\t&quot;----------------------------------------\\n\\n&quot;);<br/>\t\t\t<br/>\t\t// quick local variable to get the file name&#58;<br/>\t\t// (for the immediate next code lines' usage)<br/>\t\t<br/>\t\tfile_name = read_file&#46;getName();<br/>\t\t<br/>\t\t// checking+correcting variables for their displaying of the results,<br/>\t\t//\t\tand the displayment of the results&#58;<br/>\t\t<br/>\t\tif (file_data == null)<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; null (The file has no &quot; +<br/>\t\t\t\t&quot;integer data that this program requires)%nMean&#58; null%nStandard&quot;<br/>\t\t\t\t+ &quot; Deviation&#58; null%n%n&quot;, file_name);<br/>\t\t}<br/>\t\telse if (((mean == 0)||(mean &gt;= 0))&amp;&amp;(standard_deviation == -1))<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;<br/>\t\t\t\t+ &quot;Deviation&#58; (Error&#58; imaginary numbers&#58; square root of &quot; +<br/>\t\t\t\t&quot;negative number)%n%n&quot;, file_name, file_data, mean,<br/>\t\t\t\tstandard_deviation);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;<br/>\t\t\t\t+ &quot;Deviation&#58; %&#46;2f%n%n&quot;, file_name, file_data, mean,<br/>\t\t\t\tstandard_deviation);<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static String Concatenate_File_Data(read_file_parameter)<br/>\t{<br/>\t\tString local_string = read_file_parameter&#46;hasNext();<br/>\t\t<br/>\t\tif (!read_file_parameter&#46;hasNext())<br/>\t\t{<br/>\t\t\treturn (null);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\twhile (read_file_parameter&#46;hasNext())<br/>\t\t\t{<br/>\t\t\t\tlocal_string +=<br/>\t\t\t\t\t(&quot; &quot; + String&#46;valueOf(read_file_parameter&#46;nextInt()));<br/>\t\t\t}<br/>\t\t\treturn(local_string);<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static double Compute_Mean(read_file_parameter)<br/>\t{<br/>\t\tint local_sum = 0, local_counter = 1;<br/>\t\t<br/>\t\twhile (read_file_parameter&#46;hasNext())<br/>\t\t{<br/>\t\t\tfile_data += String&#46;valueOf(read_file_parameter&#46;nextInt());<br/>\t\t\tlocal_sum += read_file_parameter&#46;nextInt();<br/>\t\t\tlocal_counter++;<br/>\t\t}<br/>\t\t<br/>\t\tif (local_sum == 0)<br/>\t\t{<br/>\t\t\treturn(0);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\treturn((double)(local_sum)/(double)(local_counter));<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static double Compute_Standard_Deviation(read_file_parameter,<br/>\t\tmean_parameter)<br/>\t{<br/>\t\tdouble local_sum = 0&#46;0;<br/>\t\tint local_counter = 1;<br/>\t\t<br/>\t\tfor (local_counter; read_file_parameter&#46;hasNext(); local_counter++)<br/>\t\t{<br/>\t\t\tlocal_sum += pow(((double)(read_file_parameter&#46;hasNext()) -<br/>\t\t\t\tmean_parameter), 2&#46;0);<br/>\t\t}<br/>\t\t<br/>\t\tif (local_sum &gt; 0)<br/>\t\t{<br/>\t\t\treturn(sqrt((local_sum)/(double)(local_counter)));<br/>\t\t}<br/>\t\telse if (local_sum == 0)<br/>\t\t{<br/>\t\t\treturn (0);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\treturn (-1);<br/>\t\t}<br/>\t}<br/>}</code></pre><br/><br/>if anyone knows java well, any help today or tomarrow, would be greatly appreciated!",
      "PostDate": "2015-09-21T02:26:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "38029",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "Hmm, first try to use the camelcase notation for method names and variables -  &quot;concatenateFileData&quot; instead of &quot;Concatenate_File_Data&quot;\n\nYou try to read all numbers from the file into a string \n[code:347344qp]file_data = Concatenate_File_Data(read_file);[/code:347344qp]\n\nAfter that all numbers should be in the variable file_data (camelcase: fileData)\nBut after that you don't work with that string. You try to read the values from the file in computeMean and computeStandardDeviation again. fileData is never used again, so it is useless.\n\nHere is the beginning of the method program as I would do it. It works with a double array.\n\n[code:347344qp]\n\tpublic static void program() throws FileNotFoundException {\n\n\t\tfinal String fileName = &quot;c&#58;\\\\temp\\\\input&#46;txt&quot;;\n\n\t\tScanner readFile = new Scanner(new FileReader(fileName));\n\t\tif (readFile ==null){\n\t\t\treturn;\n\t\t}\t\n\t\tString fileData = null;\n\t\tif (readFile&#46;hasNext()) {\n\t\t\tfileData = readFile&#46;nextLine();\n\t\t}\n\t\treadFile&#46;close();\n\t\t\n\t\tif (fileData != null) {\n\t\t\tString&#91;&#93; values = StringUtils&#46;split(fileData);\n\t\t\tif (values == null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdouble&#91;&#93; numbers = new double&#91;values&#46;length&#93;;\n\t\t\tfor (int i = 0; i &lt; numbers&#46;length; i++) {\n\t\t\t\tnumbers&#91;i&#93; = Double&#46;parseDouble(values&#91;i&#93;);\n\t\t\t}\n\t\t\tmean = computeMean(numbers);\n\t\t\tstandardDeviation = computeStandardDeviation(numbers, mean);\n\t\t}\n\t\t\n\t\t&#46;&#46;&#46;\n\t\t\n\t\tpublic static double computeMean(final double&#91;&#93; numbers) {\n\t    \t\tdouble sum = 0;\n\t    \t\tfor (int i = 0; i &lt; numbers&#46;length; i++) {\n\t       \t\t\t sum += numbers&#91;i&#93;;\n\t    \t\t}\n\t   \t\t return sum / numbers&#46;length;\n\t\t}\n[/code:347344qp]",
      "EditableFormat": "bbcode",
      "HTML": "Hmm, first try to use the camelcase notation for method names and variables -  &quot;concatenateFileData&quot; instead of &quot;Concatenate_File_Data&quot;<br/><br/>You try to read all numbers from the file into a string <br/><pre><code>file_data = Concatenate_File_Data(read_file);</code></pre><br/><br/>After that all numbers should be in the variable file_data (camelcase: fileData)<br/>But after that you don't work with that string. You try to read the values from the file in computeMean and computeStandardDeviation again. fileData is never used again, so it is useless.<br/><br/>Here is the beginning of the method program as I would do it. It works with a double array.<br/><br/><pre><code><br/>\tpublic static void program() throws FileNotFoundException {<br/><br/>\t\tfinal String fileName = &quot;c&#58;\\\\temp\\\\input&#46;txt&quot;;<br/><br/>\t\tScanner readFile = new Scanner(new FileReader(fileName));<br/>\t\tif (readFile ==null){<br/>\t\t\treturn;<br/>\t\t}\t<br/>\t\tString fileData = null;<br/>\t\tif (readFile&#46;hasNext()) {<br/>\t\t\tfileData = readFile&#46;nextLine();<br/>\t\t}<br/>\t\treadFile&#46;close();<br/>\t\t<br/>\t\tif (fileData != null) {<br/>\t\t\tString&#91;&#93; values = StringUtils&#46;split(fileData);<br/>\t\t\tif (values == null){<br/>\t\t\t\treturn;<br/>\t\t\t}<br/>\t\t\tdouble&#91;&#93; numbers = new double&#91;values&#46;length&#93;;<br/>\t\t\tfor (int i = 0; i &lt; numbers&#46;length; i++) {<br/>\t\t\t\tnumbers&#91;i&#93; = Double&#46;parseDouble(values&#91;i&#93;);<br/>\t\t\t}<br/>\t\t\tmean = computeMean(numbers);<br/>\t\t\tstandardDeviation = computeStandardDeviation(numbers, mean);<br/>\t\t}<br/>\t\t<br/>\t\t&#46;&#46;&#46;<br/>\t\t<br/>\t\tpublic static double computeMean(final double&#91;&#93; numbers) {<br/>\t    \t\tdouble sum = 0;<br/>\t    \t\tfor (int i = 0; i &lt; numbers&#46;length; i++) {<br/>\t       \t\t\t sum += numbers&#91;i&#93;;<br/>\t    \t\t}<br/>\t   \t\t return sum / numbers&#46;length;<br/>\t\t}<br/></code></pre>",
      "PostDate": "2015-09-21T08:42:06+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "38034",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thank you very much Pertex for the rush help! I was desparate, as I was having a huge problem with troubleshooting all of my errors, so hoped I could get some help in time before assignment due, from anyone here, so thank you very much Pertex!\n\nI got some help from a class~school mate and my java teacher, and I eventually got my program to work. Most of my mistakes were simple-stupid syntax, as I've not learned how to do them correctly yet, had to do a lot of research (which I now understand better how to look up the errors in the oracle java doc~resource).\n\nI didn't define my Parameters, I got confused with how to do the Type Casting (Data Type Conversions), I used 'hasInt' where I was to use 'nextInt', and I was confused how to work with the Scanner File Object (didn't know what defining to do with it for my parameter variable for it, I tried 'string'... didn't know it was, the Class itself: Scanner), I think that was most of my syntax errors... Oh ya, I couldn't get the 'pow' and 'sqrt' to work... (you can see my comments in my post program below about this, if interested).\n\nI then had some logic errors, I had to take care of...\n\n and the big logic error was that I was getting '0' returned-displayed for my 'mean' and 'standard deviation', and it took me literally plugging in 'msg' [Java: System.out.print(&quot;HK_1......99&quot;); ] everwhere to figure it out... as I looked and looked, totally baffled at why I was getting the zeroes.\n\nthe cause was that the Scanner was at the EoF (End of File)... so when it went to do the 'mean' and 'standard deviation' functions... there was no 'hasNext' (=true), so my 'mean' and 'standard deviation' functions were not running, thus the ' mean ' and 'standard deviation ' were still as their initial values of 0.\n\nthen, I had a small logic error with the mean and std dev functions, in using initial counter at 1 and counter++, when I needed to use counter at 0 and ++counter .... I hope anyways that my mean and standard dev are working correctly now... I hate math... I've no idea if my std dev is working right or not, laughs. I don't even know what standard deviation is, heh.\n\nanyways, here's my working program:\n\n[code:3778z203]// Packages~Libraries~Modules&#58;\n\nimport java&#46;util&#46;Scanner;\nimport java&#46;io&#46;FileReader;\nimport java&#46;io&#46;FileNotFoundException;\n\nimport static java&#46;lang&#46;Math&#46;pow; // this is for only needing to use ' pow() '\nimport static java&#46;lang&#46;Math&#46;sqrt; // this is for only needing to use ' sqrt() '\n\n// otherwise, I have to use ' Class_name&#46;Function_name '\n// aka for this case&#58; ' Math&#46;pow() ' and ' Math&#46;sqrt() '\n// the ' Math ' Class is apart of the ' lang ' package,\n// which is auto-imported by the java program already\n\n// Classes&#58;\n\npublic class Lab04\n{\n\t// Class-Global Constants ~ Variables ~ Object Instantiation&#58;\n\t\n\tstatic Scanner console = new Scanner(System&#46;in);\n\t\n\tstatic double mean, standard_deviation;\n\t\n\tstatic String file_data;\n\t\n\tstatic final String file_name = &quot;input&#46;txt&quot;;\n\t\n\t// Methods~Functions&#58;\n\t\n\tpublic static void main(String&#91;&#93; args) throws FileNotFoundException\n\t{\n\t\tHeader();\n\t\tCrediting_Helpers();\n\t\tPurpose();\n\t\tProgram();\n\t}\n\t\n\tpublic static void Header()\n\t{\n\t\t// Header Info Displayment&#58;\n\t}\n\t\n\tpublic static void Crediting_Helpers()\n\t{\n\t\t// Crediting Helpers Displayment&#58;\n\t}\n\t\n\tpublic static void Purpose()\n\t{\n\t\t// Purpose Displayment&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;The purpose of this program is to get input values &quot;\n\t\t\t+ &quot;from a file and \\ncalculate the mean and standard deviation, and&quot;\n\t\t\t+ &quot; displaying the results \\nto the user&#46;\\n\\n&quot;);\n\t}\n\t\n\tpublic static void Program() throws FileNotFoundException\n\t{\n\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;\n\t\n\t\tScanner read_file = new Scanner(new FileReader(&quot;input&#46;txt&quot;));\n\t\t\n\t\t// just for segmenting these file prompts from rest of program&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +\n\t\t\t&quot;----------------------------------------\\n\\n&quot;);\n\t\t\n\t\t// prompting the user that the 'input&#46;txt' file is opened, and being\n\t\t// \t\tread by the program&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file has been opened, and is &quot; +\n\t\t\t&quot;being read by the program&#46;\\n\\n&quot;);\n\t\t\n\t\t// Get, Concatenate~Compute, and return new file data values, storing\n\t\t//\t\tthem into variables for the later-on displayment&#58;\n\t\t\n\t\tfile_data = Concatenate_File_Data(read_file);\n\t\t\n\t\t// close the 'input&#46;txt' File (due to being at the end of the file)&#58;\n\t\t\n\t\tread_file&#46;close();\n\t\t\n\t\tif (file_data != null)\n\t\t{\n\t\t\t// re-create it, as now it's back to the beginning of file\n\t\t\n\t\t\tScanner read_file_again = new Scanner(new FileReader(&quot;input&#46;txt&quot;));\n\t\t\t\n\t\t\tmean = Compute_Mean(read_file_again);\n\t\t\t\n\t\t\t// close the 'input&#46;txt' File (due to being at the end of the file)&#58;\n\t\t\n\t\t\tread_file_again&#46;close();\n\t\t\t\n\t\t\t// re-create it, as now it's back to the beginning of file\n\t\t\n\t\t\tScanner read_file_again_again =\n\t\t\t\tnew Scanner(new FileReader(&quot;input&#46;txt&quot;));\n\t\t\t\n\t\t\tstandard_deviation =\n\t\t\t\tCompute_Standard_Deviation(read_file_again_again, mean);\n\t\t\t\t\n\t\t\t// close the 'input&#46;txt' File&#58;\n\t\t\n\t\t\tread_file_again_again&#46;close();\n\t\t}\n\t\t\n\t\t// prompt the user that the 'input&#46;txt' file has been closed&#58;\n\t\t\n\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file's data has been read and \\n&quot;\n\t\t\t+ &quot;stored, and the file has been closed&#46;\\n\\n&quot;);\n\t\t\t\n\t\t// no simple way of clearing the console screen with java, so I am just\n\t\t//\t\tseparating the file prompts from actual stock ticker program&#58;\n\t\t\t\n\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +\n\t\t\t&quot;----------------------------------------\\n\\n&quot;);\n\t\t\n\t\t// checking+correcting variables for their displaying of the results,\n\t\t//\t\tand the displayment of the results&#58;\n\t\t\n\t\tif (file_data == null)\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; null (The file has no &quot; +\n\t\t\t\t&quot;integer data that this program requires)%nMean&#58; null%nStandard&quot;\n\t\t\t\t+ &quot; Deviation&#58; null%n%n&quot;, file_name);\n\t\t}\n\t\telse if (((mean == 0&#46;0)||(mean &gt;= 0&#46;0))&amp;&amp;(standard_deviation == -1))\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;\n\t\t\t\t+ &quot;Deviation&#58; (Error&#58; imaginary numbers&#58; square root of &quot; +\n\t\t\t\t&quot;negative number)%n%n&quot;, file_name, file_data, mean,\n\t\t\t\tstandard_deviation);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;\n\t\t\t\t+ &quot;Deviation&#58; %&#46;2f%n%n&quot;, file_name, file_data, mean,\n\t\t\t\tstandard_deviation);\n\t\t}\n\t}\n\t\n\tpublic static String Concatenate_File_Data(Scanner read_file_parameter)\n\t{\t\n\t\tif (!read_file_parameter&#46;hasNextInt())\n\t\t{\n\t\t\treturn (null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString local_string = String&#46;valueOf(read_file_parameter&#46;nextInt());\n\t\t\t\n\t\t\twhile (read_file_parameter&#46;hasNextInt())\n\t\t\t{\n\t\t\t\tlocal_string +=\n\t\t\t\t\t(&quot; &quot; + String&#46;valueOf(read_file_parameter&#46;nextInt()));\n\t\t\t}\n\t\t\treturn(local_string);\n\t\t}\n\t}\n\t\n\tpublic static double Compute_Mean(Scanner read_file_parameter)\n\t{\n\t\tint local_sum = 0, local_counter = 0;\n\t\t\n\t\twhile (read_file_parameter&#46;hasNextInt())\n\t\t{\n\t\t\tlocal_sum += read_file_parameter&#46;nextInt();\n\t\t\t++local_counter;\n\t\t}\n\t\t\n\t\tif (local_sum == 0)\n\t\t{\n\t\t\treturn((double)(local_sum));\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn((double)(local_sum)/(double)(local_counter));\n\t\t}\n\t}\n\t\n\tpublic static double Compute_Standard_Deviation(Scanner read_file_parameter,\n\t\tdouble mean_parameter)\n\t{\n\t\tdouble local_sum = 0&#46;0;\n\t\tint local_counter = 0;\n\t\t\n\t\twhile (read_file_parameter&#46;hasNextInt())\n\t\t{\n\t\t\tlocal_sum += Math&#46;pow((double)(read_file_parameter&#46;nextInt()) -\n\t\t\t\tmean_parameter, 2&#46;0);\n\t\t\t++local_counter;\n\t\t}\n\t\t\n\t\tif (local_sum &gt; 0&#46;0)\n\t\t{\n\t\t\treturn(Math&#46;sqrt(local_sum/(double)(local_counter)));\n\t\t}\n\t\telse if (local_sum == 0&#46;0)\n\t\t{\n\t\t\treturn (local_sum);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (-1);\n\t\t}\n\t}\n}[/code:3778z203]\n\n----------------\n\nthis may be ignorant, but these languages (C++, Python, and Java), are horrible! Quest's XML~user_level, is so so so so wonderfully easy compared to these 3 languages. Alex and Co. have done such an amazing job with quest! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\nNow having experience with learning other languages, I can emphatically say that using quest to learn to program is much better than in trying to use at least these 3 languages to learn to program! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\nC++ and Python are easier for me, Java is the one I'm having most difficult with, so far. Though the classes are going at different speeds... so it's a bit unfair to compare the 3 languages, as I think we're the furthest into Java material vs the other 2.",
      "EditableFormat": "bbcode",
      "HTML": "thank you very much Pertex for the rush help! I was desparate, as I was having a huge problem with troubleshooting all of my errors, so hoped I could get some help in time before assignment due, from anyone here, so thank you very much Pertex!<br/><br/>I got some help from a class~school mate and my java teacher, and I eventually got my program to work. Most of my mistakes were simple-stupid syntax, as I've not learned how to do them correctly yet, had to do a lot of research (which I now understand better how to look up the errors in the oracle java doc~resource).<br/><br/>I didn't define my Parameters, I got confused with how to do the Type Casting (Data Type Conversions), I used 'hasInt' where I was to use 'nextInt', and I was confused how to work with the Scanner File Object (didn't know what defining to do with it for my parameter variable for it, I tried 'string'... didn't know it was, the Class itself: Scanner), I think that was most of my syntax errors... Oh ya, I couldn't get the 'pow' and 'sqrt' to work... (you can see my comments in my post program below about this, if interested).<br/><br/>I then had some logic errors, I had to take care of...<br/><br/> and the big logic error was that I was getting '0' returned-displayed for my 'mean' and 'standard deviation', and it took me literally plugging in 'msg' [Java: System.out.print(&quot;HK_1......99&quot;); ] everwhere to figure it out... as I looked and looked, totally baffled at why I was getting the zeroes.<br/><br/>the cause was that the Scanner was at the EoF (End of File)... so when it went to do the 'mean' and 'standard deviation' functions... there was no 'hasNext' (=true), so my 'mean' and 'standard deviation' functions were not running, thus the ' mean ' and 'standard deviation ' were still as their initial values of 0.<br/><br/>then, I had a small logic error with the mean and std dev functions, in using initial counter at 1 and counter++, when I needed to use counter at 0 and ++counter .... I hope anyways that my mean and standard dev are working correctly now... I hate math... I've no idea if my std dev is working right or not, laughs. I don't even know what standard deviation is, heh.<br/><br/>anyways, here's my working program:<br/><br/><pre><code>// Packages~Libraries~Modules&#58;<br/><br/>import java&#46;util&#46;Scanner;<br/>import java&#46;io&#46;FileReader;<br/>import java&#46;io&#46;FileNotFoundException;<br/><br/>import static java&#46;lang&#46;Math&#46;pow; // this is for only needing to use ' pow() '<br/>import static java&#46;lang&#46;Math&#46;sqrt; // this is for only needing to use ' sqrt() '<br/><br/>// otherwise, I have to use ' Class_name&#46;Function_name '<br/>// aka for this case&#58; ' Math&#46;pow() ' and ' Math&#46;sqrt() '<br/>// the ' Math ' Class is apart of the ' lang ' package,<br/>// which is auto-imported by the java program already<br/><br/>// Classes&#58;<br/><br/>public class Lab04<br/>{<br/>\t// Class-Global Constants ~ Variables ~ Object Instantiation&#58;<br/>\t<br/>\tstatic Scanner console = new Scanner(System&#46;in);<br/>\t<br/>\tstatic double mean, standard_deviation;<br/>\t<br/>\tstatic String file_data;<br/>\t<br/>\tstatic final String file_name = &quot;input&#46;txt&quot;;<br/>\t<br/>\t// Methods~Functions&#58;<br/>\t<br/>\tpublic static void main(String&#91;&#93; args) throws FileNotFoundException<br/>\t{<br/>\t\tHeader();<br/>\t\tCrediting_Helpers();<br/>\t\tPurpose();<br/>\t\tProgram();<br/>\t}<br/>\t<br/>\tpublic static void Header()<br/>\t{<br/>\t\t// Header Info Displayment&#58;<br/>\t}<br/>\t<br/>\tpublic static void Crediting_Helpers()<br/>\t{<br/>\t\t// Crediting Helpers Displayment&#58;<br/>\t}<br/>\t<br/>\tpublic static void Purpose()<br/>\t{<br/>\t\t// Purpose Displayment&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;The purpose of this program is to get input values &quot;<br/>\t\t\t+ &quot;from a file and \\ncalculate the mean and standard deviation, and&quot;<br/>\t\t\t+ &quot; displaying the results \\nto the user&#46;\\n\\n&quot;);<br/>\t}<br/>\t<br/>\tpublic static void Program() throws FileNotFoundException<br/>\t{<br/>\t\t// Local Variable Definitions ~ Initializations ~ Object Instantiating&#58;<br/>\t<br/>\t\tScanner read_file = new Scanner(new FileReader(&quot;input&#46;txt&quot;));<br/>\t\t<br/>\t\t// just for segmenting these file prompts from rest of program&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +<br/>\t\t\t&quot;----------------------------------------\\n\\n&quot;);<br/>\t\t<br/>\t\t// prompting the user that the 'input&#46;txt' file is opened, and being<br/>\t\t// \t\tread by the program&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file has been opened, and is &quot; +<br/>\t\t\t&quot;being read by the program&#46;\\n\\n&quot;);<br/>\t\t<br/>\t\t// Get, Concatenate~Compute, and return new file data values, storing<br/>\t\t//\t\tthem into variables for the later-on displayment&#58;<br/>\t\t<br/>\t\tfile_data = Concatenate_File_Data(read_file);<br/>\t\t<br/>\t\t// close the 'input&#46;txt' File (due to being at the end of the file)&#58;<br/>\t\t<br/>\t\tread_file&#46;close();<br/>\t\t<br/>\t\tif (file_data != null)<br/>\t\t{<br/>\t\t\t// re-create it, as now it's back to the beginning of file<br/>\t\t<br/>\t\t\tScanner read_file_again = new Scanner(new FileReader(&quot;input&#46;txt&quot;));<br/>\t\t\t<br/>\t\t\tmean = Compute_Mean(read_file_again);<br/>\t\t\t<br/>\t\t\t// close the 'input&#46;txt' File (due to being at the end of the file)&#58;<br/>\t\t<br/>\t\t\tread_file_again&#46;close();<br/>\t\t\t<br/>\t\t\t// re-create it, as now it's back to the beginning of file<br/>\t\t<br/>\t\t\tScanner read_file_again_again =<br/>\t\t\t\tnew Scanner(new FileReader(&quot;input&#46;txt&quot;));<br/>\t\t\t<br/>\t\t\tstandard_deviation =<br/>\t\t\t\tCompute_Standard_Deviation(read_file_again_again, mean);<br/>\t\t\t\t<br/>\t\t\t// close the 'input&#46;txt' File&#58;<br/>\t\t<br/>\t\t\tread_file_again_again&#46;close();<br/>\t\t}<br/>\t\t<br/>\t\t// prompt the user that the 'input&#46;txt' file has been closed&#58;<br/>\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;The \\'input&#46;txt\\' file's data has been read and \\n&quot;<br/>\t\t\t+ &quot;stored, and the file has been closed&#46;\\n\\n&quot;);<br/>\t\t\t<br/>\t\t// no simple way of clearing the console screen with java, so I am just<br/>\t\t//\t\tseparating the file prompts from actual stock ticker program&#58;<br/>\t\t\t<br/>\t\tSystem&#46;out&#46;println(&quot;----------------------------------------&quot; +<br/>\t\t\t&quot;----------------------------------------\\n\\n&quot;);<br/>\t\t<br/>\t\t// checking+correcting variables for their displaying of the results,<br/>\t\t//\t\tand the displayment of the results&#58;<br/>\t\t<br/>\t\tif (file_data == null)<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; null (The file has no &quot; +<br/>\t\t\t\t&quot;integer data that this program requires)%nMean&#58; null%nStandard&quot;<br/>\t\t\t\t+ &quot; Deviation&#58; null%n%n&quot;, file_name);<br/>\t\t}<br/>\t\telse if (((mean == 0&#46;0)||(mean &gt;= 0&#46;0))&amp;&amp;(standard_deviation == -1))<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;<br/>\t\t\t\t+ &quot;Deviation&#58; (Error&#58; imaginary numbers&#58; square root of &quot; +<br/>\t\t\t\t&quot;negative number)%n%n&quot;, file_name, file_data, mean,<br/>\t\t\t\tstandard_deviation);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\tSystem&#46;out&#46;printf(&quot;%s contains&#58;%nInput&#58; %s%nMean&#58; %&#46;2f%nStandard &quot;<br/>\t\t\t\t+ &quot;Deviation&#58; %&#46;2f%n%n&quot;, file_name, file_data, mean,<br/>\t\t\t\tstandard_deviation);<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static String Concatenate_File_Data(Scanner read_file_parameter)<br/>\t{\t<br/>\t\tif (!read_file_parameter&#46;hasNextInt())<br/>\t\t{<br/>\t\t\treturn (null);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\tString local_string = String&#46;valueOf(read_file_parameter&#46;nextInt());<br/>\t\t\t<br/>\t\t\twhile (read_file_parameter&#46;hasNextInt())<br/>\t\t\t{<br/>\t\t\t\tlocal_string +=<br/>\t\t\t\t\t(&quot; &quot; + String&#46;valueOf(read_file_parameter&#46;nextInt()));<br/>\t\t\t}<br/>\t\t\treturn(local_string);<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static double Compute_Mean(Scanner read_file_parameter)<br/>\t{<br/>\t\tint local_sum = 0, local_counter = 0;<br/>\t\t<br/>\t\twhile (read_file_parameter&#46;hasNextInt())<br/>\t\t{<br/>\t\t\tlocal_sum += read_file_parameter&#46;nextInt();<br/>\t\t\t++local_counter;<br/>\t\t}<br/>\t\t<br/>\t\tif (local_sum == 0)<br/>\t\t{<br/>\t\t\treturn((double)(local_sum));<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\treturn((double)(local_sum)/(double)(local_counter));<br/>\t\t}<br/>\t}<br/>\t<br/>\tpublic static double Compute_Standard_Deviation(Scanner read_file_parameter,<br/>\t\tdouble mean_parameter)<br/>\t{<br/>\t\tdouble local_sum = 0&#46;0;<br/>\t\tint local_counter = 0;<br/>\t\t<br/>\t\twhile (read_file_parameter&#46;hasNextInt())<br/>\t\t{<br/>\t\t\tlocal_sum += Math&#46;pow((double)(read_file_parameter&#46;nextInt()) -<br/>\t\t\t\tmean_parameter, 2&#46;0);<br/>\t\t\t++local_counter;<br/>\t\t}<br/>\t\t<br/>\t\tif (local_sum &gt; 0&#46;0)<br/>\t\t{<br/>\t\t\treturn(Math&#46;sqrt(local_sum/(double)(local_counter)));<br/>\t\t}<br/>\t\telse if (local_sum == 0&#46;0)<br/>\t\t{<br/>\t\t\treturn (local_sum);<br/>\t\t}<br/>\t\telse<br/>\t\t{<br/>\t\t\treturn (-1);<br/>\t\t}<br/>\t}<br/>}</code></pre><br/><br/>----------------<br/><br/>this may be ignorant, but these languages (C++, Python, and Java), are horrible! Quest's XML~user_level, is so so so so wonderfully easy compared to these 3 languages. Alex and Co. have done such an amazing job with quest! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>Now having experience with learning other languages, I can emphatically say that using quest to learn to program is much better than in trying to use at least these 3 languages to learn to program! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>C++ and Python are easier for me, Java is the one I'm having most difficult with, so far. Though the classes are going at different speeds... so it's a bit unfair to compare the 3 languages, as I think we're the furthest into Java material vs the other 2.",
      "PostDate": "2015-09-22T08:02:15+01:00",
      "LastEditDate": null
    }
  ]
}
