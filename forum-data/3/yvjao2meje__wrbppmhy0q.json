{
  "Topic": {
    "TopicId": "yvjao2meje__wrbppmhy0q",
    "ForumId": "3",
    "Title": "In what does ASL run",
    "LastUpdated": "2021-10-16T15:40:24.0585446Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2bd97c8f-fd9f-4ffd-9ae5-29b2f444726f",
      "UserId": 562814,
      "Username": "grgc",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Greetings All, \r\nPlease forgive me, I have a little, general knowledge of programming, but not a lot.  I found Quest while doing some research.  I am interested in text based games and was learning Python so that I could program my own. Obviously, I realize now that trying to program the whole game in python would require me to reinvent a wheel that already exists in CSS and HTML.\r\n\r\nI am trying to understand in general terms, what the Quest project is, what the ASL scripting language actually runs in, and the role of CSS, HTML and Javascript in that framework.\r\n\r\nI looked at the aslx code for the tutorial game, and it is clearly not enough to run a game. The file is supplementing something else when the game is run. My guess is that the \"something else\" is another, unnamed program built in or around HTML and CSS, using Javascript to run run the asl script.  \r\n\r\nIf I am right, in general terms, then, I think that HTML, CSS and Javascript alone are enough to write a text based game, so the question becomes what role does asl perform, what does this scripting language bring to the table?  \r\n\r\nTo be clear, I really like what I have seen of Quest, and will use it develop games while I study HTML, CSS and Javascript.  In fact, looking at Quest helped realize that it made a lot of sense for me to write my games to be played in the browser.  \r\nI just want to be able to wrap my head around what is actually happening with the coding at a strategic level.  \r\n\r\nThank you for your help, and I apologize if my questions are too vague to be useful.\r\n\r\nGod bless,\r\nGrgc\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Greetings All,<br>\nPlease forgive me, I have a little, general knowledge of programming, but not a lot.  I found Quest while doing some research.  I am interested in text based games and was learning Python so that I could program my own. Obviously, I realize now that trying to program the whole game in python would require me to reinvent a wheel that already exists in CSS and HTML.</p>\n<p>I am trying to understand in general terms, what the Quest project is, what the ASL scripting language actually runs in, and the role of CSS, HTML and Javascript in that framework.</p>\n<p>I looked at the aslx code for the tutorial game, and it is clearly not enough to run a game. The file is supplementing something else when the game is run. My guess is that the \"something else\" is another, unnamed program built in or around HTML and CSS, using Javascript to run run the asl script.</p>\n<p>If I am right, in general terms, then, I think that HTML, CSS and Javascript alone are enough to write a text based game, so the question becomes what role does asl perform, what does this scripting language bring to the table?</p>\n<p>To be clear, I really like what I have seen of Quest, and will use it develop games while I study HTML, CSS and Javascript.  In fact, looking at Quest helped realize that it made a lot of sense for me to write my games to be played in the browser.<br>\nI just want to be able to wrap my head around what is actually happening with the coding at a strategic level.</p>\n<p>Thank you for your help, and I apologize if my questions are too vague to be useful.</p>\n<p>God bless,<br>\nGrgc</p>\n\n",
      "PostDate": "2021-10-16T15:40:24.0585446Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d3e00ac8-1e87-40c8-b161-4f4121346786",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> My guess is that the \"something else\" is another, unnamed program built in or around HTML and CSS, using Javascript to run run the asl script.\r\n\r\nUnfortunately not. Quest is a game engine written in C# with a few of the older parts in visual basic, and available for Windows. Some people have also managed to get it running under linux.\r\n\r\nOn the desktop, the Quest backend runs Chromium (basically the free part of the Chrome browser) and hands that all the HTML/JS used for rendering. So all the frontend stuff the player interacts with is handled in HTML/CSS/JS, but the actual IASL script is run in Quest's own game engine.\r\n(ASLX is the XML file format for a game; IASL seems to be the name of Quest's scripting language; and ASL is I believe the name of the previous file format from earlier versions of the engine, which was a lot more limited. Not 100% sure about that)\r\n\r\nUsing the web version of a game, you will probably notice there is some delay for commands. This is because the frontend is still the same HTML/CSS?JS running in your browser, but every command you enter is sent back to the server, where a copy of Quest is running to handle all the scripts.\r\n\r\n> If I am right, in general terms, then, I think that HTML, CSS and Javascript alone are enough to write a text based game, so the question becomes what role does asl perform, what does this scripting language bring to the table?\r\n\r\nThe best answer I can give is that the underlying code can get relatively complex. Quest's scripting language presents a more abstract form, so the person making the game can think in terms of objects, rooms, commands, and so on. It separates the game logic from the code for UI, layout, event handling, error handling, and other things that could be overwhelming to someone without programming experience.\r\n\r\nThere's a new thing being developed called Quest 6. It's not related to Quest; but is a javascript library that provides the basic functions that would be useful in making a text adventure. There's some discussion about that in the QuestKit forum.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>My guess is that the \"something else\" is another, unnamed program built in or around HTML and CSS, using Javascript to run run the asl script.</p>\n</blockquote>\n<p>Unfortunately not. Quest is a game engine written in C# with a few of the older parts in visual basic, and available for Windows. Some people have also managed to get it running under linux.</p>\n<p>On the desktop, the Quest backend runs Chromium (basically the free part of the Chrome browser) and hands that all the HTML/JS used for rendering. So all the frontend stuff the player interacts with is handled in HTML/CSS/JS, but the actual IASL script is run in Quest's own game engine.<br>\n(ASLX is the XML file format for a game; IASL seems to be the name of Quest's scripting language; and ASL is I believe the name of the previous file format from earlier versions of the engine, which was a lot more limited. Not 100% sure about that)</p>\n<p>Using the web version of a game, you will probably notice there is some delay for commands. This is because the frontend is still the same HTML/CSS?JS running in your browser, but every command you enter is sent back to the server, where a copy of Quest is running to handle all the scripts.</p>\n<blockquote>\n<p>If I am right, in general terms, then, I think that HTML, CSS and Javascript alone are enough to write a text based game, so the question becomes what role does asl perform, what does this scripting language bring to the table?</p>\n</blockquote>\n<p>The best answer I can give is that the underlying code can get relatively complex. Quest's scripting language presents a more abstract form, so the person making the game can think in terms of objects, rooms, commands, and so on. It separates the game logic from the code for UI, layout, event handling, error handling, and other things that could be overwhelming to someone without programming experience.</p>\n<p>There's a new thing being developed called Quest 6. It's not related to Quest; but is a javascript library that provides the basic functions that would be useful in making a text adventure. There's some discussion about that in the QuestKit forum.</p>\n\n",
      "PostDate": "2021-10-16T16:41:03.4129061Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a14f4a6a-9cd4-4a5f-8abb-f7c250b5bd2d",
      "UserId": 562814,
      "Username": "grgc",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hoo ah.  Thank you Brother. That was very helpful.  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hoo ah.  Thank you Brother. That was very helpful.</p>\n\n",
      "PostDate": "2021-10-16T17:09:24.5667784Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
