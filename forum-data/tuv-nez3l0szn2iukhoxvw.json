{
  "Topic": {
    "TopicId": "tuv-nez3l0szn2iukhoxvw",
    "ForumId": "15",
    "Title": "QuestJS updateCustomUI issues and slider implementation",
    "LastUpdated": "2024-05-27T08:34:21.5951852Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d05d8fba-b827-42ec-973d-08fadaf4ac6f",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to use some custom UI design styles in my game to display progress bars for various indicators like Exp and hunger, and hopefully even a custom slider tool to adjust some other player attribute but I keep getting issues using $() for my JS expressions.\r\n\r\nsettings.js:26 Uncaught ReferenceError: $ is not defined\r\n    at settings.updateCustomUI (settings.js:26:2)\r\n    at endTurnUI (_io.js:701:41)\r\n    at io.init (_io.js:1692:3)\r\n    at HTMLScriptElement.scriptOnLoad (_settings.js:213:10)\r\n\r\ndata.js\r\n```\r\n\"use strict\"\r\n\r\ncreateItem(\"me\", PLAYER(), {\r\n  loc:\"lounge\",\r\n  synonyms:['me', 'myself'],\r\n  examine: \"Just a regular guy.\",\r\n  iCurrExp: 0,\r\n  iNextLevelExp: 250,\r\n  iLevel: 1,\r\n  iDifficulty: 90, // Min 1, Max 100 - Slider required\r\n  iFullness: 50,\r\n  iMetabolism: 10\r\n})\r\n\r\ncreateRoom(\"lounge\", {\r\n  desc:\"The lounge is boring, the author really needs to put stuff in it.\",\r\n})\r\n```\r\nsettings.js\r\n```\r\n\"use strict\"\r\n\r\nsettings.title = \"Testing Custom UI\"\r\nsettings.author = \"Your name\"\r\nsettings.version = \"0.1\"\r\nsettings.thanks = []\r\nsettings.warnings = \"No warnings have been set for this game.\"\r\nsettings.playMode = \"dev\"\r\n\r\nsettings.statusPane = \"Status\"\r\nsettings.statusWidthLeft = 160\r\nsettings.statusWidthRight = 0\r\n\r\nsettings.status = [\r\n\tfunction () { return '<td>Level:</td><td style=\"width: 130px;text-align:left;font-size: 10pt;\\\">' + w.me.iLevel + '</td>'},\r\n\tfunction () { return '<td>Exp:</td><td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"><span id=\"exp-indicator\" style=\"background-color:red;padding-right:80px;paddingBottom:5px;\"></span></td>' },\r\n\tfunction () { return '<td>Difficulty:</td><td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"><span id=\"difficulty-indicator\" style=\"background-color:red;padding-right:80px;paddingBottom:5px;\"></span></td>' },\r\n\tfunction () { return '<td>Fullness:</td><td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"><span id=\"fullness-indicator\" style=\"background-color:red;padding-right:50px;paddingBottom:5px;\"></span></td>'}\r\n]\r\n\r\nsettings.customUI = function () {\r\n\r\n}\r\n\r\nsettings.updateCustomUI = function () {\r\n\t$('#exp-indicator').css('padding-right', w.me.iCurrentExp / w.me.iNextLevelExp);\r\n\t$('#difficulty-indicator').css('padding-right', w.me.iDifficulty / 100);\r\n\t$('#fullness-indicator').css('padding-right', w.me.iFullness / 100);\r\n}\r\n```\r\n\r\nI want to figure out why $() doesn't work in settings.updateCustomUI and also how to implement a slider into the mix to adjust difficulty on the fly.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to use some custom UI design styles in my game to display progress bars for various indicators like Exp and hunger, and hopefully even a custom slider tool to adjust some other player attribute but I keep getting issues using $() for my JS expressions.</p>\n<p>settings.js:26 Uncaught ReferenceError: $ is not defined<br>\nat settings.updateCustomUI (settings.js:26:2)<br>\nat endTurnUI (_io.js:701:41)<br>\nat io.init (_io.js:1692:3)<br>\nat HTMLScriptElement.scriptOnLoad (_settings.js:213:10)</p>\n<p>data.js</p>\n<pre><code>\"use strict\"\n\ncreateItem(\"me\", PLAYER(), {\n  loc:\"lounge\",\n  synonyms:['me', 'myself'],\n  examine: \"Just a regular guy.\",\n  iCurrExp: 0,\n  iNextLevelExp: 250,\n  iLevel: 1,\n  iDifficulty: 90, // Min 1, Max 100 - Slider required\n  iFullness: 50,\n  iMetabolism: 10\n})\n\ncreateRoom(\"lounge\", {\n  desc:\"The lounge is boring, the author really needs to put stuff in it.\",\n})\n</code></pre>\n<p>settings.js</p>\n<pre><code>\"use strict\"\n\nsettings.title = \"Testing Custom UI\"\nsettings.author = \"Your name\"\nsettings.version = \"0.1\"\nsettings.thanks = []\nsettings.warnings = \"No warnings have been set for this game.\"\nsettings.playMode = \"dev\"\n\nsettings.statusPane = \"Status\"\nsettings.statusWidthLeft = 160\nsettings.statusWidthRight = 0\n\nsettings.status = [\n\tfunction () { return '&lt;td&gt;Level:&lt;/td&gt;&lt;td style=\"width: 130px;text-align:left;font-size: 10pt;\\\"&gt;' + w.me.iLevel + '&lt;/td&gt;'},\n\tfunction () { return '&lt;td&gt;Exp:&lt;/td&gt;&lt;td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"&gt;&lt;span id=\"exp-indicator\" style=\"background-color:red;padding-right:80px;paddingBottom:5px;\"&gt;&lt;/span&gt;&lt;/td&gt;' },\n\tfunction () { return '&lt;td&gt;Difficulty:&lt;/td&gt;&lt;td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"&gt;&lt;span id=\"difficulty-indicator\" style=\"background-color:red;padding-right:80px;paddingBottom:5px;\"&gt;&lt;/span&gt;&lt;/td&gt;' },\n\tfunction () { return '&lt;td&gt;Fullness:&lt;/td&gt;&lt;td style=\"border: thin solid black;background:lightgray;width: 50px;text-align:left;font-size: 8pt;\\\"&gt;&lt;span id=\"fullness-indicator\" style=\"background-color:red;padding-right:50px;paddingBottom:5px;\"&gt;&lt;/span&gt;&lt;/td&gt;'}\n]\n\nsettings.customUI = function () {\n\n}\n\nsettings.updateCustomUI = function () {\n\t$('#exp-indicator').css('padding-right', w.me.iCurrentExp / w.me.iNextLevelExp);\n\t$('#difficulty-indicator').css('padding-right', w.me.iDifficulty / 100);\n\t$('#fullness-indicator').css('padding-right', w.me.iFullness / 100);\n}\n</code></pre>\n<p>I want to figure out why $() doesn't work in settings.updateCustomUI and also how to implement a slider into the mix to adjust difficulty on the fly.</p>\n\n",
      "PostDate": "2024-05-27T08:34:21.5951852Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "08e42fd0-fe00-402c-8690-ed51d6f08660",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I want to figure out why $() doesn't work in settings.updateCustomUI and also how to implement a slider into the mix to adjust difficulty on the fly.\r\n\r\nAre you using jQuery? I thought it wasn't used in the latest QuestJS.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I want to figure out why $() doesn't work in settings.updateCustomUI and also how to implement a slider into the mix to adjust difficulty on the fly.</p>\n</blockquote>\n<p>Are you using jQuery? I thought it wasn't used in the latest QuestJS.</p>\n\n",
      "PostDate": "2024-05-27T09:51:07.4481155Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "70d911ee-200e-4447-8275-cf8b44088b52",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know what is or isn't used with QuestJS, I've only had Quest 5.8 experience. Were there any Git Hub documentation for customizing UI panes in JQuery for QuestJS 1.4?",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know what is or isn't used with QuestJS, I've only had Quest 5.8 experience. Were there any Git Hub documentation for customizing UI panes in JQuery for QuestJS 1.4?</p>\n\n",
      "PostDate": "2024-05-27T10:07:49.5645972Z",
      "LastEditDate": "2024-05-27T10:51:57.1298787Z",
      "link": null
    },
    {
      "PostId": "9dbd69c3-494d-48f0-a6f4-72ae454bfddf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As far as I can tell, QuestJS doesn't use jQuery. So if you want access to the `$` object, you'll have to import it yourself.\r\n\r\nHowever, most of the features that jQuery provided have now been incorporated into core javascript, so for example:\r\n```\r\n$('#exp-indicator').css('padding-right', w.me.iCurrentExp / w.me.iNextLevelExp);\r\n```\r\ncan probably be replaced by something like:\r\n```\r\ndocument.getElementById(\"exp-indicator\").style.paddingRight = w.me.iCurrentExp / w.me.iNextLevelExp;\r\n```\r\nwhich doesn't require any additional libraries.",
      "EditableFormat": "markdown",
      "HTML": "<p>As far as I can tell, QuestJS doesn't use jQuery. So if you want access to the <code>$</code> object, you'll have to import it yourself.</p>\n<p>However, most of the features that jQuery provided have now been incorporated into core javascript, so for example:</p>\n<pre><code>$('#exp-indicator').css('padding-right', w.me.iCurrentExp / w.me.iNextLevelExp);\n</code></pre>\n<p>can probably be replaced by something like:</p>\n<pre><code>document.getElementById(\"exp-indicator\").style.paddingRight = w.me.iCurrentExp / w.me.iNextLevelExp;\n</code></pre>\n<p>which doesn't require any additional libraries.</p>\n\n",
      "PostDate": "2024-05-27T11:19:32.9103516Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f295c6b4-31bb-4b2f-9a0b-d9f2ce245c7e",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh thanks! Are you able to help with an example slider and it's CSS please?",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh thanks! Are you able to help with an example slider and it's CSS please?</p>\n\n",
      "PostDate": "2024-05-27T11:41:44.7771514Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d1962bf1-a1b7-4ff3-83ca-678db2ebdb28",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd like to implement something like this but I'm unsure how to convert it to using QuestJS's code, can you please help?\r\nhttps://jqueryui.com/slider/#rangemin",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd like to implement something like this but I'm unsure how to convert it to using QuestJS's code, can you please help?<br>\nhttps://jqueryui.com/slider/#rangemin</p>\n\n",
      "PostDate": "2024-05-27T19:06:53.3413901Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c5472f5d-db95-49dd-991a-510855aa64b0",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the difficulty slider, I'd personally just use an `input` with `type=\"range\"`. You can give it an `oninput` attribute to set `iDifficulty` whenever the player updates it. It might also make sense to put that in a separate pane since the player will be editing it directly instead of just viewing it, like the status attributes.\r\n\r\nIt will also probably be helpful for put your CSS in the `style.css` file, that way it'll be more organized so you can find it later, and it's also not cluttering up your code. I took a similar approach as you, just changed a few of the width and height values to be more dynamic.\r\n\r\n***settings.js***\r\n```\r\nsettings.status = [\r\n\t'<td>Level:</td><td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"></td>',\r\n  '<td>Exp:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"exp-indicator\"></div></div></td>',\r\n  '<td>Fullness:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"fullness-indicator\"></div></div></td>',\r\n]\r\n\r\nsettings.updateCustomUI = function () {\r\n  document.getElementById('level-indicator').innerHTML = w.me.iLevel;\r\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrExp / w.me.iNextLevelExp)) * 100 + \"%\";\r\n\tdocument.getElementById('fullness-indicator').style.width = w.me.iFullness + \"%\";\r\n}\r\n\r\nsettings.setup = function() \r\n{\r\n  createAdditionalPane(1, \"Difficulty\", 'difficulty', function() {\r\n\t\tlet html = ''\r\n\t\thtml += '<input type=\"range\" min=\"1\" max=\"100\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-indicator\" oninput=\"w.me.iDifficulty = this.value\">'\r\n\t\treturn html\r\n\t})\r\n}\r\n```\r\n\r\n***style.css***\r\n```\r\n.stat-background {\r\n  border: thin solid black;\r\n  background-color: lightgray;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 3px;\r\n}\r\n\r\n.stat-bar {\r\n  background-color: red;\r\n  height: 5px;\r\n}\r\n\r\n#difficulty-indicator {\r\n  background-color: lightgray;\r\n  accent-color: red;\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>For the difficulty slider, I'd personally just use an <code>input</code> with <code>type=\"range\"</code>. You can give it an <code>oninput</code> attribute to set <code>iDifficulty</code> whenever the player updates it. It might also make sense to put that in a separate pane since the player will be editing it directly instead of just viewing it, like the status attributes.</p>\n<p>It will also probably be helpful for put your CSS in the <code>style.css</code> file, that way it'll be more organized so you can find it later, and it's also not cluttering up your code. I took a similar approach as you, just changed a few of the width and height values to be more dynamic.</p>\n<p><strong><em>settings.js</em></strong></p>\n<pre><code>settings.status = [\n\t'&lt;td&gt;Level:&lt;/td&gt;&lt;td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"&gt;&lt;/td&gt;',\n  '&lt;td&gt;Exp:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"exp-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;',\n  '&lt;td&gt;Fullness:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"fullness-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;',\n]\n\nsettings.updateCustomUI = function () {\n  document.getElementById('level-indicator').innerHTML = w.me.iLevel;\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrExp / w.me.iNextLevelExp)) * 100 + \"%\";\n\tdocument.getElementById('fullness-indicator').style.width = w.me.iFullness + \"%\";\n}\n\nsettings.setup = function() \n{\n  createAdditionalPane(1, \"Difficulty\", 'difficulty', function() {\n\t\tlet html = ''\n\t\thtml += '&lt;input type=\"range\" min=\"1\" max=\"100\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-indicator\" oninput=\"w.me.iDifficulty = this.value\"&gt;'\n\t\treturn html\n\t})\n}\n</code></pre>\n<p><strong><em>style.css</em></strong></p>\n<pre><code>.stat-background {\n  border: thin solid black;\n  background-color: lightgray;\n  width: inherit;\n  height: inherit;\n  padding: 3px;\n}\n\n.stat-bar {\n  background-color: red;\n  height: 5px;\n}\n\n#difficulty-indicator {\n  background-color: lightgray;\n  accent-color: red;\n}\n</code></pre>\n\n",
      "PostDate": "2024-05-27T21:45:02.7267088Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5f6b14fe-7d1c-42c8-b408-fca8075ad233",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Amazing thank you! I want to be able to lock the minimum of the difficulty slider so they can't lower it beyond a certain value except unless other conditions are applied that change the constant minimum allowed value of the slider, should I just set the min value on it to that and leave max as 100? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Amazing thank you! I want to be able to lock the minimum of the difficulty slider so they can't lower it beyond a certain value except unless other conditions are applied that change the constant minimum allowed value of the slider, should I just set the min value on it to that and leave max as 100?</p>\n\n",
      "PostDate": "2024-05-28T16:10:02.9521549Z",
      "LastEditDate": "2024-05-28T16:10:32.1300294Z",
      "link": null
    },
    {
      "PostId": "f1d428e2-5c42-4b4d-9294-c178781a2572",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I've added the slider but I'm not getting any visible updates on the difficulty value when I change the slider position, I added a step by 5 value and I know the range is limited to between 70 and 100 with the current value at 90 but it doesn't visibly change value as far as I know.  Also my event for Hunger and Fullness doesn't appear to work, I try to wait more than 6 times and nothing happens.\r\n\r\ndata.js\r\n```\r\n\"use strict\"\r\n\r\ncreateItem(\"me\", PLAYER(), {\r\n  loc:\"lounge\",\r\n  synonyms:['me', 'myself'],\r\n  examine: \"Just a regular guy.\",\r\n  iCurrentExp: 20,\r\n  iNextLevelExp: 250,\r\n  iLevel: 1,\r\n  iDifficulty: 90,\r\n  iDifficultyMin: 70,\r\n  iFullness: 60,\r\n  iHunger: 40,\r\n  iHungerRate: 10\r\n})\r\n\r\ncreateItem(\"EventHunger\", {\r\n    eventPeriod: 6,\r\n    examine: \"\",\r\n    eventActive: true,\r\n    eventIsActive: function () {\r\n        return true;\r\n    },\r\n    eventScript: function () {\r\n        w.me.iHunger += w.me.iHungerRate\r\n        if (w.me.iHunger < 0) {\r\n            w.me.iHunger = 0\r\n        }\r\n    }\r\n})\r\n\r\ncreateItem(\"EventFullness\", {\r\n    eventPeriod: 6,\r\n    examine: \"\",\r\n    eventActive: true,\r\n    eventIsActive: function () {\r\n        return w.me.fullness > 0;\r\n    },\r\n    eventScript: function () {\r\n        w.me.iFullness += w.me.iHungerRate\r\n        if (w.me.iFullness < 0) {\r\n            w.me.iFullness = 0\r\n        }\r\n    }\r\n})\r\n\r\ncreateRoom(\"lounge\", {\r\n  desc:\"The lounge is boring, the author really needs to put stuff in it.\",\r\n})\r\n```\r\n\r\nsettings.js\r\n```\r\n\"use strict\"\r\n\r\nsettings.title = \"Testing Custom UI\"\r\nsettings.author = \"Your name\"\r\nsettings.version = \"0.1\"\r\nsettings.thanks = []\r\nsettings.warnings = \"No warnings have been set for this game.\"\r\nsettings.playMode = \"dev\"\r\n\r\nsettings.statusPane = \"Status\"\r\nsettings.statusWidthLeft = 160\r\nsettings.statusWidthRight = 0\r\n\r\nsettings.setup = function () {\r\n\r\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\r\n\t\tlet html = ''\r\n\t\thtml += '<div class=\"difficulty-slider-container\">'\r\n\t\thtml += '<input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value\">'\r\n\t\thtml += '<p>Difficulty : <span id=\"difficulty--indicator\">' + w.me.iDifficulty + '%</span></p><br/>'\r\n\t\thtml += '</div>'\r\n\t\treturn html\r\n\t})\r\n}\r\n\r\nsettings.status = [\r\n\t'<td>Level:</td><td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"></td>',\r\n\t'<td>Exp:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"exp-indicator\"></div></div></td>',\r\n\t'<td>Hunger:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"hunger-indicator\"></div></div></td>',\r\n\t'<td>Fullness:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"fullness-indicator\"></div></div></td>',\r\n]\r\n\r\nsettings.customUI = function () {\r\n\r\n}\r\n\r\nsettings.updateCustomUI = function () {\r\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\r\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\r\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\r\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>So I've added the slider but I'm not getting any visible updates on the difficulty value when I change the slider position, I added a step by 5 value and I know the range is limited to between 70 and 100 with the current value at 90 but it doesn't visibly change value as far as I know.  Also my event for Hunger and Fullness doesn't appear to work, I try to wait more than 6 times and nothing happens.</p>\n<p>data.js</p>\n<pre><code>\"use strict\"\n\ncreateItem(\"me\", PLAYER(), {\n  loc:\"lounge\",\n  synonyms:['me', 'myself'],\n  examine: \"Just a regular guy.\",\n  iCurrentExp: 20,\n  iNextLevelExp: 250,\n  iLevel: 1,\n  iDifficulty: 90,\n  iDifficultyMin: 70,\n  iFullness: 60,\n  iHunger: 40,\n  iHungerRate: 10\n})\n\ncreateItem(\"EventHunger\", {\n    eventPeriod: 6,\n    examine: \"\",\n    eventActive: true,\n    eventIsActive: function () {\n        return true;\n    },\n    eventScript: function () {\n        w.me.iHunger += w.me.iHungerRate\n        if (w.me.iHunger &lt; 0) {\n            w.me.iHunger = 0\n        }\n    }\n})\n\ncreateItem(\"EventFullness\", {\n    eventPeriod: 6,\n    examine: \"\",\n    eventActive: true,\n    eventIsActive: function () {\n        return w.me.fullness &gt; 0;\n    },\n    eventScript: function () {\n        w.me.iFullness += w.me.iHungerRate\n        if (w.me.iFullness &lt; 0) {\n            w.me.iFullness = 0\n        }\n    }\n})\n\ncreateRoom(\"lounge\", {\n  desc:\"The lounge is boring, the author really needs to put stuff in it.\",\n})\n</code></pre>\n<p>settings.js</p>\n<pre><code>\"use strict\"\n\nsettings.title = \"Testing Custom UI\"\nsettings.author = \"Your name\"\nsettings.version = \"0.1\"\nsettings.thanks = []\nsettings.warnings = \"No warnings have been set for this game.\"\nsettings.playMode = \"dev\"\n\nsettings.statusPane = \"Status\"\nsettings.statusWidthLeft = 160\nsettings.statusWidthRight = 0\n\nsettings.setup = function () {\n\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\n\t\tlet html = ''\n\t\thtml += '&lt;div class=\"difficulty-slider-container\"&gt;'\n\t\thtml += '&lt;input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value\"&gt;'\n\t\thtml += '&lt;p&gt;Difficulty : &lt;span id=\"difficulty--indicator\"&gt;' + w.me.iDifficulty + '%&lt;/span&gt;&lt;/p&gt;&lt;br/&gt;'\n\t\thtml += '&lt;/div&gt;'\n\t\treturn html\n\t})\n}\n\nsettings.status = [\n\t'&lt;td&gt;Level:&lt;/td&gt;&lt;td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"&gt;&lt;/td&gt;',\n\t'&lt;td&gt;Exp:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"exp-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;',\n\t'&lt;td&gt;Hunger:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"hunger-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;',\n\t'&lt;td&gt;Fullness:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"fullness-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;',\n]\n\nsettings.customUI = function () {\n\n}\n\nsettings.updateCustomUI = function () {\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\n}\n</code></pre>\n\n",
      "PostDate": "2024-05-28T18:34:32.6657277Z",
      "LastEditDate": "2024-05-28T18:37:27.3841449Z",
      "link": null
    },
    {
      "PostId": "86587878-d4fb-4e73-856b-3f6091e0cb82",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The way the difficulty slider and `iDifficulty` attribute currently interact only allows for data to go from the slider to the attribute, it isn't set up to change visually. If you want data to go from the attribute back to the UI, you need to add in some code into the `updateCustomUI`function to make those updates. For every attribute in the UI that can change, you'll need a line updating it, so by my count, you'll need a line for `difficulty-slider-indicator.min`, `difficulty-slider-indicator.value` and `difficulty--indicator.innerHTML`.\r\n\r\nAs far as your event scripts go, the hunger one looks like it's working to me. The fullness one appears to have a typo in the condition, it should probably be `return w.me.iFullness > 0;`. You probably also want to be removing the hunger rate variable from fullness, instead of adding to it.\r\n\r\nWhenever something isn't working the way you expect it to, I find it's helpful to add in `console.log()` statements to see what the values are. So here, you could log the value of `iFullness` in the eventScript, which would show that the script wasn't executing. Likewise, you could log the value of `iDifficulty` to see that changing the value on the slider is updating the attribute, it's just not updating the UI element that you created.",
      "EditableFormat": "markdown",
      "HTML": "<p>The way the difficulty slider and <code>iDifficulty</code> attribute currently interact only allows for data to go from the slider to the attribute, it isn't set up to change visually. If you want data to go from the attribute back to the UI, you need to add in some code into the <code>updateCustomUI</code>function to make those updates. For every attribute in the UI that can change, you'll need a line updating it, so by my count, you'll need a line for <code>difficulty-slider-indicator.min</code>, <code>difficulty-slider-indicator.value</code> and <code>difficulty--indicator.innerHTML</code>.</p>\n<p>As far as your event scripts go, the hunger one looks like it's working to me. The fullness one appears to have a typo in the condition, it should probably be <code>return w.me.iFullness &gt; 0;</code>. You probably also want to be removing the hunger rate variable from fullness, instead of adding to it.</p>\n<p>Whenever something isn't working the way you expect it to, I find it's helpful to add in <code>console.log()</code> statements to see what the values are. So here, you could log the value of <code>iFullness</code> in the eventScript, which would show that the script wasn't executing. Likewise, you could log the value of <code>iDifficulty</code> to see that changing the value on the slider is updating the attribute, it's just not updating the UI element that you created.</p>\n\n",
      "PostDate": "2024-05-28T22:56:14.5917596Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7bfd7f24-7972-4ef2-b57c-6341f93ac094",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried to do what you suggested but I couldn't figure out what you meant with the different lines I needed for the updateCustomUI, I always got this error whenever I tried to update the difficulty-indicator span holding my current %.\r\n\r\nTypeError: Cannot set properties of null (setting 'innerHTML')\r\n    at settings.updateCustomUI (settings.js:46:60)\r\n    at endTurnUI (_io.js:701:41)\r\n    at io.init (_io.js:1692:3)\r\n    at HTMLScriptElement.scriptOnLoad (_settings.js:213:10)\r\n\r\nAlso when I used the slider I wasn't getting instant visual updates on difficulty-indicator and difficulty-indicator2, I had to use the Wait functionality to see an update occur on both. \r\n\r\n\r\n```\r\n\"use strict\"\r\n\r\nsettings.title = \"Testing Custom UI\"\r\nsettings.author = \"Your name\"\r\nsettings.version = \"0.1\"\r\nsettings.thanks = []\r\nsettings.warnings = \"No warnings have been set for this game.\"\r\nsettings.playMode = \"dev\"\r\n\r\nsettings.statusPane = \"Status\"\r\nsettings.statusWidthLeft = 160\r\nsettings.statusWidthRight = 0\r\n\r\nsettings.setup = function () {\r\n\r\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\r\n\t\tlet html = ''\r\n\t\thtml += '<div class=\"difficulty-slider-container\">'\r\n\t\thtml += '<input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value;\">'\r\n\t\thtml += '<p>Difficulty : <span id=\"difficulty-indicator\"></span></p><br/>'\r\n\t\thtml += '</div>'\r\n\t\treturn html\r\n\t})\r\n}\r\n\r\nsettings.status = [\r\n\t'<p><td>Level:</td><td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"></td></p>',\r\n\t'<p><td>Exp:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"exp-indicator\"></div></div></td></p>',\r\n\t'<p><td>Hunger:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"hunger-indicator\"></div></div></td></p>',\r\n\t'<p><td>Fullness:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"fullness-indicator\"></div></div></td></p>',\r\n\t'<p><td>Difficulty:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"difficulty-indicator2\"></div></div></td></p>',\r\n]\r\n\r\nsettings.customUI = function () {\r\n\r\n}\r\n\r\nsettings.updateCustomUI = function () {\r\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\r\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\r\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\r\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\r\n\tdocument.getElementById(\"difficulty-indicator\").text = w.me.iDifficulty + \"%\";\r\n\tdocument.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\r\n\tconsole.log(\"Slider value:\" + w.me.iDifficulty)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried to do what you suggested but I couldn't figure out what you meant with the different lines I needed for the updateCustomUI, I always got this error whenever I tried to update the difficulty-indicator span holding my current %.</p>\n<p>TypeError: Cannot set properties of null (setting 'innerHTML')<br>\nat settings.updateCustomUI (settings.js:46:60)<br>\nat endTurnUI (_io.js:701:41)<br>\nat io.init (_io.js:1692:3)<br>\nat HTMLScriptElement.scriptOnLoad (_settings.js:213:10)</p>\n<p>Also when I used the slider I wasn't getting instant visual updates on difficulty-indicator and difficulty-indicator2, I had to use the Wait functionality to see an update occur on both.</p>\n<pre><code>\"use strict\"\n\nsettings.title = \"Testing Custom UI\"\nsettings.author = \"Your name\"\nsettings.version = \"0.1\"\nsettings.thanks = []\nsettings.warnings = \"No warnings have been set for this game.\"\nsettings.playMode = \"dev\"\n\nsettings.statusPane = \"Status\"\nsettings.statusWidthLeft = 160\nsettings.statusWidthRight = 0\n\nsettings.setup = function () {\n\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\n\t\tlet html = ''\n\t\thtml += '&lt;div class=\"difficulty-slider-container\"&gt;'\n\t\thtml += '&lt;input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value;\"&gt;'\n\t\thtml += '&lt;p&gt;Difficulty : &lt;span id=\"difficulty-indicator\"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br/&gt;'\n\t\thtml += '&lt;/div&gt;'\n\t\treturn html\n\t})\n}\n\nsettings.status = [\n\t'&lt;p&gt;&lt;td&gt;Level:&lt;/td&gt;&lt;td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Exp:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"exp-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Hunger:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"hunger-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Fullness:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"fullness-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Difficulty:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"difficulty-indicator2\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n]\n\nsettings.customUI = function () {\n\n}\n\nsettings.updateCustomUI = function () {\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\n\tdocument.getElementById(\"difficulty-indicator\").text = w.me.iDifficulty + \"%\";\n\tdocument.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\n\tconsole.log(\"Slider value:\" + w.me.iDifficulty)\n}\n</code></pre>\n\n",
      "PostDate": "2024-05-29T22:09:40.6285941Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "015914c6-d00a-4dc5-af08-511abe735df3",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's how I would go about debugging it. First, look for the first line number in the error, that'll tell you where the error is. If you check line 46 of `settings.js`, it's the line where you're setting the text for the difficulty label.\r\n\r\n```\r\ndocument.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\r\n```\r\n\r\nIf we compare that line against the text of the error, it's telling us that we're trying to set `null.innerHTML`, which isn't allowed. So let's replace that line with a console log to see what the `getElementById` function is returning.\r\n\r\n```\r\nconsole.log(document.getElementById(\"difficulty-indicator\"))\r\n```\r\n\r\nNow, when we run it, we see that `null` is printed in the console, which fits with what we see in the error. But that's weird, because we're creating a span with that id in the `settings.setup` function. If you wait one turn, the console log will run again and you'll see that this time, `getElementById` returns the span like you expect. So the real problem is that `settings.updateCustomUI` is being called _before_ `settings.setup`, so we're trying to update that element before it has been created.\r\n\r\nNow, how can we resolve this? One way would be to modify  `settings.updateCustomUI` so that it only tries to update that element if it exists. Another way would be to move your `createAdditionalPane` call into the `settings.customUI` function so that it runs before `settings.updateCustomUI`.\r\n\r\nCurrently, the only function that is updating your custom elements is `settings.updateCustomUI`. Since QuestJS is turn-based, this gets run at the end of every turn, which is why you don't see instant feedback, since the function hasn't run yet. To change it, I would recommend modifying your `oninput` attribute of the `difficulty-slider-indicator` element. Right now, all it does is set `w.me.iDifficulty` to the value of the input, but you could modify it to update the `difficulty-indicator` as well.",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's how I would go about debugging it. First, look for the first line number in the error, that'll tell you where the error is. If you check line 46 of <code>settings.js</code>, it's the line where you're setting the text for the difficulty label.</p>\n<pre><code>document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\n</code></pre>\n<p>If we compare that line against the text of the error, it's telling us that we're trying to set <code>null.innerHTML</code>, which isn't allowed. So let's replace that line with a console log to see what the <code>getElementById</code> function is returning.</p>\n<pre><code>console.log(document.getElementById(\"difficulty-indicator\"))\n</code></pre>\n<p>Now, when we run it, we see that <code>null</code> is printed in the console, which fits with what we see in the error. But that's weird, because we're creating a span with that id in the <code>settings.setup</code> function. If you wait one turn, the console log will run again and you'll see that this time, <code>getElementById</code> returns the span like you expect. So the real problem is that <code>settings.updateCustomUI</code> is being called <em>before</em> <code>settings.setup</code>, so we're trying to update that element before it has been created.</p>\n<p>Now, how can we resolve this? One way would be to modify  <code>settings.updateCustomUI</code> so that it only tries to update that element if it exists. Another way would be to move your <code>createAdditionalPane</code> call into the <code>settings.customUI</code> function so that it runs before <code>settings.updateCustomUI</code>.</p>\n<p>Currently, the only function that is updating your custom elements is <code>settings.updateCustomUI</code>. Since QuestJS is turn-based, this gets run at the end of every turn, which is why you don't see instant feedback, since the function hasn't run yet. To change it, I would recommend modifying your <code>oninput</code> attribute of the <code>difficulty-slider-indicator</code> element. Right now, all it does is set <code>w.me.iDifficulty</code> to the value of the input, but you could modify it to update the <code>difficulty-indicator</code> as well.</p>\n\n",
      "PostDate": "2024-05-29T23:36:12.9806403Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "56107ef2-6ccc-4cfb-be08-eb0e92840ffe",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay doing that I get another error when I make the actual change to the value on the slider, also I don't get a display value on the slider at all on first launch of the game.\r\n\r\nindex.html:69 Uncaught SyntaxError: Unexpected end of input (at index.html:69:64)\r\n\r\n```\r\nsettings.customUI = function () {\r\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\r\n\t\tlet html = ''\r\n\t\thtml += '<div class=\"difficulty-slider-container\">'\r\n\t\thtml += '<input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value; document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\">'\r\n\t\thtml += '<p>Difficulty : <span id=\"difficulty-indicator\"></span></p><br/>'\r\n\t\thtml += '</div>'\r\n\t\treturn html\r\n\t})\r\n}\r\n```\r\n\r\nAlso is there a way to set the slider up so that the absolute minimum of 1 is visible but the slider is locked to the custom minimum of 70 (or attribute value) and the user can't move it beyond that point? At the moment all I'm showing is 70-100 range and not 1 to 100.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay doing that I get another error when I make the actual change to the value on the slider, also I don't get a display value on the slider at all on first launch of the game.</p>\n<p>index.html:69 Uncaught SyntaxError: Unexpected end of input (at index.html:69:64)</p>\n<pre><code>settings.customUI = function () {\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\n\t\tlet html = ''\n\t\thtml += '&lt;div class=\"difficulty-slider-container\"&gt;'\n\t\thtml += '&lt;input type=\"range\" min=\"' + w.me.iDifficultyMin + '\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"w.me.iDifficulty = this.value; document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\"&gt;'\n\t\thtml += '&lt;p&gt;Difficulty : &lt;span id=\"difficulty-indicator\"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br/&gt;'\n\t\thtml += '&lt;/div&gt;'\n\t\treturn html\n\t})\n}\n</code></pre>\n<p>Also is there a way to set the slider up so that the absolute minimum of 1 is visible but the slider is locked to the custom minimum of 70 (or attribute value) and the user can't move it beyond that point? At the moment all I'm showing is 70-100 range and not 1 to 100.</p>\n\n",
      "PostDate": "2024-05-30T06:54:17.8530147Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c5c0fd6-44df-4e2d-a79e-15de19404d67",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You've likely got some syntax error with your quotes and the way you're setting the `oninput` attribute. Easiest solution would be to create a function that runs everything you want to happen whenever difficulty is updated.\r\n```\r\nfunction updateDifficulty(value){\r\n  w.me.iDifficulty = value\r\n  document.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\r\n  document.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\r\n  document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\r\n}\r\n```\r\nThen, change the attribute to be `oninput=\"updateDifficulty(this.value)\"`. This has the added benefit that you can call this function if you want to update the difficulty value elsewhere in your code, and it will automatically update the UI.\r\n\r\nIn fact, this will also help address your other request. You can modify the function to check if the value set in the slider is greater than or equal to your current minimum value. Then, you can hard code the `min` of the input to 0, so it will show the full range, but you can't move the slider below the minimum.\r\n```\r\nfunction updateDifficulty(value){\r\n  if(value >= w.me.iDifficultyMin) w.me.iDifficulty = value\r\n  document.getElementById(\"difficulty-slider-indicator\").value = w.me.iDifficulty\r\n  document.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\r\n  document.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\r\n  document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\r\n}\r\n```\r\nTry to find solutions like this to make your code do what you want it to do. Oftentimes, there won't be a builtin attribute that you can set that fits your precise requirements, so you'll have to build your own.",
      "EditableFormat": "markdown",
      "HTML": "<p>You've likely got some syntax error with your quotes and the way you're setting the <code>oninput</code> attribute. Easiest solution would be to create a function that runs everything you want to happen whenever difficulty is updated.</p>\n<pre><code>function updateDifficulty(value){\n  w.me.iDifficulty = value\n  document.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\n  document.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\n  document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\n}\n</code></pre>\n<p>Then, change the attribute to be <code>oninput=\"updateDifficulty(this.value)\"</code>. This has the added benefit that you can call this function if you want to update the difficulty value elsewhere in your code, and it will automatically update the UI.</p>\n<p>In fact, this will also help address your other request. You can modify the function to check if the value set in the slider is greater than or equal to your current minimum value. Then, you can hard code the <code>min</code> of the input to 0, so it will show the full range, but you can't move the slider below the minimum.</p>\n<pre><code>function updateDifficulty(value){\n  if(value &gt;= w.me.iDifficultyMin) w.me.iDifficulty = value\n  document.getElementById(\"difficulty-slider-indicator\").value = w.me.iDifficulty\n  document.getElementById(\"difficulty-indicator2\").style.width = ((w.me.iDifficulty / 100)) * 100 + \"%\";\n  document.getElementById(\"difficulty-indicator2\").innerHTML = w.me.iDifficulty + \"%\";\n  document.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\";\n}\n</code></pre>\n<p>Try to find solutions like this to make your code do what you want it to do. Oftentimes, there won't be a builtin attribute that you can set that fits your precise requirements, so you'll have to build your own.</p>\n\n",
      "PostDate": "2024-05-30T23:11:38.6704259Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d983234b-a154-4c3c-b805-269ff907199d",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Awesome this now works, thank you so much! \r\n\r\nTwo things, first is a query about the timing of the settings events after I put console.log() into them, for some reason the settings.customUI is ran twice and I don't know why:\r\n\r\nCustomUI - Difficulty Pane\r\nsettings.js:28 CustomUI - Difficulty Pane\r\nsettings.js:39 Settings updateCustomUI\r\nsettings.js:15 Settings Setup\r\n\r\nThe last thing, I want is to try and implement the custom handle to the slider so the value is actually on the handle itself instead of a separate indicator to save space like with this example https://jqueryui.com/slider/#custom-handle but its a little difficult figuring out how to convert JQuery from there to QuestJS, any assistance will be greatly appreciated please.\r\n\r\nsettings.js\r\n```\r\n\"use strict\"\r\n\r\nsettings.title = \"Testing Custom UI\"\r\nsettings.author = \"Your name\"\r\nsettings.version = \"0.1\"\r\nsettings.thanks = []\r\nsettings.warnings = \"No warnings have been set for this game.\"\r\nsettings.playMode = \"dev\"\r\n\r\nsettings.statusPane = \"Status\"\r\nsettings.statusWidthLeft = 160\r\nsettings.statusWidthRight = 0\r\n\r\nsettings.setup = function () {\r\n\tconsole.log(\"Settings Setup\")\r\n\tupdateDifficulty(w.me.iDifficulty)\r\n}\r\n\r\nsettings.status = [\r\n\t'<p><td>Level:</td><td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"></td></p>',\r\n\t'<p><td>Exp:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"exp-indicator\"></div></div></td></p>',\r\n\t'<p><td>Hunger:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"hunger-indicator\"></div></div></td></p>',\r\n\t'<p><td>Fullness:</td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"fullness-indicator\"></div></div></td></p>',\r\n]\r\n\r\nsettings.customUI = function () {\r\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\r\n\t\tconsole.log (\"CustomUI - Difficulty Pane\")\r\n\t\tlet html = ''\r\n\t\thtml += '<div class=\"difficulty-slider-container\">'\r\n\t\thtml += '<div id=\"custom-handle\" class\"ui-slide-handle\"><input type=\"range\" min=\"5\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"updateDifficulty(this.value)\"></div>'\r\n\t\thtml += '<p>Difficulty : <span id=\"difficulty-indicator\"></span></p><br/>'\r\n\t\thtml += '</div>'\r\n\t\treturn html\r\n\t})\r\n}\r\n\r\nsettings.updateCustomUI = function () {\r\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\r\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\r\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\r\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\r\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\r\n}\r\n\r\nfunction updateDifficulty(value) {\r\n\t\r\n\tif (value >= w.me.iDifficultyMin) {\r\n\t\t// Increment the difficulty in 5s\r\n\t\tvar iRemainder = value % 5;\r\n\t\tw.me.iDifficulty = value - iRemainder\r\n\t}\r\n\telse {\r\n\t\t// Enforce the minimum\r\n\t\tw.me.iDifficulty = w.me.iDifficultyMin\r\n    }\r\n\tdocument.getElementById(\"difficulty-slider-indicator\").value = w.me.iDifficulty\r\n\tdocument.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\"\r\n\tvar handle = document.getElementById(\"custom-handle\")\r\n\tconsole.log(\"Handle: \" + handle)\r\n\thandle.text = w.me.iDifficulty + \"%\"\r\n}\r\n```\r\n\r\nstyle.css\r\n```\r\n.stat-background {\r\n    border: thin solid black;\r\n    background-color: lightgray;\r\n    width: inherit;\r\n    height: inherit;\r\n    padding: 3px;\r\n}\r\n\r\n.stat-bar {\r\n    background-color: lightcoral;\r\n    height: 13px;\r\n}\r\n\r\n#custom-handle {\r\n    width: 3em;\r\n    height: 1.6em;\r\n    top: 50%;\r\n    margin-top: -.8em;\r\n    text-align: center;\r\n    line-height: 1.6em;\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Awesome this now works, thank you so much!</p>\n<p>Two things, first is a query about the timing of the settings events after I put console.log() into them, for some reason the settings.customUI is ran twice and I don't know why:</p>\n<p>CustomUI - Difficulty Pane<br>\nsettings.js:28 CustomUI - Difficulty Pane<br>\nsettings.js:39 Settings updateCustomUI<br>\nsettings.js:15 Settings Setup</p>\n<p>The last thing, I want is to try and implement the custom handle to the slider so the value is actually on the handle itself instead of a separate indicator to save space like with this example https://jqueryui.com/slider/#custom-handle but its a little difficult figuring out how to convert JQuery from there to QuestJS, any assistance will be greatly appreciated please.</p>\n<p>settings.js</p>\n<pre><code>\"use strict\"\n\nsettings.title = \"Testing Custom UI\"\nsettings.author = \"Your name\"\nsettings.version = \"0.1\"\nsettings.thanks = []\nsettings.warnings = \"No warnings have been set for this game.\"\nsettings.playMode = \"dev\"\n\nsettings.statusPane = \"Status\"\nsettings.statusWidthLeft = 160\nsettings.statusWidthRight = 0\n\nsettings.setup = function () {\n\tconsole.log(\"Settings Setup\")\n\tupdateDifficulty(w.me.iDifficulty)\n}\n\nsettings.status = [\n\t'&lt;p&gt;&lt;td&gt;Level:&lt;/td&gt;&lt;td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\\\"&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Exp:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"exp-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Hunger:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"hunger-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n\t'&lt;p&gt;&lt;td&gt;Fullness:&lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"fullness-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;',\n]\n\nsettings.customUI = function () {\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\n\t\tconsole.log (\"CustomUI - Difficulty Pane\")\n\t\tlet html = ''\n\t\thtml += '&lt;div class=\"difficulty-slider-container\"&gt;'\n\t\thtml += '&lt;div id=\"custom-handle\" class\"ui-slide-handle\"&gt;&lt;input type=\"range\" min=\"5\" max=\"100\" step=\"5\" value=\"' + w.me.iDifficulty + '\" class=\"slider\" id=\"difficulty-slider-indicator\" oninput=\"updateDifficulty(this.value)\"&gt;&lt;/div&gt;'\n\t\thtml += '&lt;p&gt;Difficulty : &lt;span id=\"difficulty-indicator\"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br/&gt;'\n\t\thtml += '&lt;/div&gt;'\n\t\treturn html\n\t})\n}\n\nsettings.updateCustomUI = function () {\n\tdocument.getElementById('level-indicator').innerHTML = w.me.iLevel;\n\tdocument.getElementById('exp-indicator').style.width = ((w.me.iCurrentExp / w.me.iNextLevelExp)) * 100 + \"%\";\n\tdocument.getElementById('exp-indicator').innerHTML = w.me.iCurrentExp + \"/\" + w.me.iNextLevelExp;\n\tdocument.getElementById(\"hunger-indicator\").style.width = ((w.me.iHunger / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"hunger-indicator\").innerHTML = w.me.iHunger + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").style.width = ((w.me.iFullness / 100)) * 100 + \"%\";\n\tdocument.getElementById(\"fullness-indicator\").innerHTML = w.me.iFullness + \"%\";\n}\n\nfunction updateDifficulty(value) {\n\t\n\tif (value &gt;= w.me.iDifficultyMin) {\n\t\t// Increment the difficulty in 5s\n\t\tvar iRemainder = value % 5;\n\t\tw.me.iDifficulty = value - iRemainder\n\t}\n\telse {\n\t\t// Enforce the minimum\n\t\tw.me.iDifficulty = w.me.iDifficultyMin\n    }\n\tdocument.getElementById(\"difficulty-slider-indicator\").value = w.me.iDifficulty\n\tdocument.getElementById(\"difficulty-indicator\").innerHTML = w.me.iDifficulty + \"%\"\n\tvar handle = document.getElementById(\"custom-handle\")\n\tconsole.log(\"Handle: \" + handle)\n\thandle.text = w.me.iDifficulty + \"%\"\n}\n</code></pre>\n<p>style.css</p>\n<pre><code>.stat-background {\n    border: thin solid black;\n    background-color: lightgray;\n    width: inherit;\n    height: inherit;\n    padding: 3px;\n}\n\n.stat-bar {\n    background-color: lightcoral;\n    height: 13px;\n}\n\n#custom-handle {\n    width: 3em;\n    height: 1.6em;\n    top: 50%;\n    margin-top: -.8em;\n    text-align: center;\n    line-height: 1.6em;\n}\n</code></pre>\n\n",
      "PostDate": "2024-05-31T22:31:54.5307992Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ad63d4d0-d817-410b-9959-e61137cee6b7",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't think `settings.customUI` is run twice, looking through the code it should only be called once. However, the function you create in `createAdditionalPane`does seem to be run at the end of every turn. \r\n```\r\nsettings.customUI = function () {\r\n  console.log(\"customUI\")\r\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\r\n\t\tconsole.log (\"Difficulty Pane\")\r\n\t\tlet html = ''...\r\n```\r\nTo your other question, there are a couple of things you could do:\r\n1. You could add jQuery to your project\r\n2. You could try to adjust the horizontal position of the `<span id=\"difficulty-indicator\">` element in the `updateDifficulty` function so it's centered over the handle\r\n3. You could create some sort of custom component that recreates the functionality of a slider\r\n\r\nBut if all you're trying to do is save some space, the easiest thing to do might be to update the heading of the Difficulty pane in the `updateDifficulty` method\r\n```\r\ndocument.getElementById(\"difficulty-side-pane-heading\").innerHTML = \"Difficulty: \" + w.me.iDifficulty + \"%\"\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't think <code>settings.customUI</code> is run twice, looking through the code it should only be called once. However, the function you create in <code>createAdditionalPane</code>does seem to be run at the end of every turn.</p>\n<pre><code>settings.customUI = function () {\n  console.log(\"customUI\")\n\tcreateAdditionalPane(1, \"Difficulty\", 'difficulty', function () {\n\t\tconsole.log (\"Difficulty Pane\")\n\t\tlet html = ''...\n</code></pre>\n<p>To your other question, there are a couple of things you could do:</p>\n<ol>\n<li>You could add jQuery to your project</li>\n<li>You could try to adjust the horizontal position of the <code>&lt;span id=\"difficulty-indicator\"&gt;</code> element in the <code>updateDifficulty</code> function so it's centered over the handle</li>\n<li>You could create some sort of custom component that recreates the functionality of a slider</li>\n</ol>\n<p>But if all you're trying to do is save some space, the easiest thing to do might be to update the heading of the Difficulty pane in the <code>updateDifficulty</code> method</p>\n<pre><code>document.getElementById(\"difficulty-side-pane-heading\").innerHTML = \"Difficulty: \" + w.me.iDifficulty + \"%\"\n</code></pre>\n\n",
      "PostDate": "2024-06-01T02:05:37.1877344Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0ad7c6f1-3afa-4d0f-8d18-b7070bdbd7f0",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay the last suggestion was what I went with and it looks great so thank you. I did have a query about how to rearrange the order of the displayed panes as I have my Difficulty pane above my Status one and I would rather have the Status always at the top and the custom ones underneath it, how do I control the order in which they are displayed and if I can make some appear or not appear dynamically during gameplay?\r\n\r\nAlso the Status pane seems to have a default CSS style that I'm not seeing by default on the additional panes so can you please tell me what it is so I can apply it to my custom panes too please? If I used the same table formatting for placement the attributes are not positioned correctly with proper spacing and the span bar width doesn't appear to shrink to the proper available space like the one in the Status pane.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay the last suggestion was what I went with and it looks great so thank you. I did have a query about how to rearrange the order of the displayed panes as I have my Difficulty pane above my Status one and I would rather have the Status always at the top and the custom ones underneath it, how do I control the order in which they are displayed and if I can make some appear or not appear dynamically during gameplay?</p>\n<p>Also the Status pane seems to have a default CSS style that I'm not seeing by default on the additional panes so can you please tell me what it is so I can apply it to my custom panes too please? If I used the same table formatting for placement the attributes are not positioned correctly with proper spacing and the span bar width doesn't appear to shrink to the proper available space like the one in the Status pane.</p>\n\n",
      "PostDate": "2024-06-01T21:17:39.2560311Z",
      "LastEditDate": "2024-06-01T21:48:15.4344552Z",
      "link": null
    },
    {
      "PostId": "0510f688-dff0-4253-809e-c244a2f45ef7",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The wiki has some good information about `createAdditionalPane`. The first param is a number that controls the order, so in this case, setting it to 2 for the Difficulty pane will place it below the Status pane.\r\n<https://github.com/ThePix/QuestJS/wiki/Additional-Side-Pane>\r\n\r\nMaking elements visible or invisible is pretty simple if you can get a reference to the element.\r\n```\r\nfunction toggleDifficultyVisibility(){\r\n  const difficultyPane = document.getElementById(\"difficulty-outer\")\r\n  if (difficultyPane.style.display === \"none\"){\r\n    difficultyPane.style.display = \"block\"\r\n  } else {\r\n    difficultyPane.style.display = \"none\"\r\n  }\r\n}\r\n```\r\nHowever, it does look like most of the panes don't have `id` attributes by default. If you want to toggle the visibility of other panes, you'll either need to assign them ids or find another way to reference them.\r\n\r\nFor the CSS, you can check this out yourself if you take a look at the Status pane in your dev tools. It should looks something like this\r\n```\r\n<div class=\"pane-div\">\r\n  <h4 class=\"side-pane-heading\" id=\"status-side-pane-heading\">Status</h4>\r\n  <table id=\"status-pane\">\r\n    <tbody>\r\n      <tr>\r\n        <td>Level:</td>\r\n        <td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\">1</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Exp:</td>\r\n        <td>\r\n          <div class=\"stat-background\">\r\n            <div class=\"stat-bar\" id=\"exp-indicator\" style=\"width: 8%;\">20/250</div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>Hunger:</td>\r\n        <td>\r\n          <div class=\"stat-background\">\r\n            <div class=\"stat-bar\" id=\"hunger-indicator\" style=\"width: 40%;\">40%</div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>Fullness:</td>\r\n        <td>\r\n          <div class=\"stat-background\">\r\n            <div class=\"stat-bar\" id=\"fullness-indicator\" style=\"width: 60%;\">60%</div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n    <p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>\r\n  </table>\r\n</div>\r\n```\r\nThe only thing in there I see that we didn't add to `style.css` ourselves is `status-pane`, which you can find in `default.css`\r\n```\r\n#status-pane {\r\n  padding-left: 5pt;\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>The wiki has some good information about <code>createAdditionalPane</code>. The first param is a number that controls the order, so in this case, setting it to 2 for the Difficulty pane will place it below the Status pane.<br>\n<a href=\"https://github.com/ThePix/QuestJS/wiki/Additional-Side-Pane\">https://github.com/ThePix/QuestJS/wiki/Additional-Side-Pane</a></p>\n<p>Making elements visible or invisible is pretty simple if you can get a reference to the element.</p>\n<pre><code>function toggleDifficultyVisibility(){\n  const difficultyPane = document.getElementById(\"difficulty-outer\")\n  if (difficultyPane.style.display === \"none\"){\n    difficultyPane.style.display = \"block\"\n  } else {\n    difficultyPane.style.display = \"none\"\n  }\n}\n</code></pre>\n<p>However, it does look like most of the panes don't have <code>id</code> attributes by default. If you want to toggle the visibility of other panes, you'll either need to assign them ids or find another way to reference them.</p>\n<p>For the CSS, you can check this out yourself if you take a look at the Status pane in your dev tools. It should looks something like this</p>\n<pre><code>&lt;div class=\"pane-div\"&gt;\n  &lt;h4 class=\"side-pane-heading\" id=\"status-side-pane-heading\"&gt;Status&lt;/h4&gt;\n  &lt;table id=\"status-pane\"&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Level:&lt;/td&gt;\n        &lt;td id=\"level-indicator\" style=\"width: 130px;text-align:left;font-size: 10pt;\"&gt;1&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Exp:&lt;/td&gt;\n        &lt;td&gt;\n          &lt;div class=\"stat-background\"&gt;\n            &lt;div class=\"stat-bar\" id=\"exp-indicator\" style=\"width: 8%;\"&gt;20/250&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Hunger:&lt;/td&gt;\n        &lt;td&gt;\n          &lt;div class=\"stat-background\"&gt;\n            &lt;div class=\"stat-bar\" id=\"hunger-indicator\" style=\"width: 40%;\"&gt;40%&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Fullness:&lt;/td&gt;\n        &lt;td&gt;\n          &lt;div class=\"stat-background\"&gt;\n            &lt;div class=\"stat-bar\" id=\"fullness-indicator\" style=\"width: 60%;\"&gt;60%&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre>\n<p>The only thing in there I see that we didn't add to <code>style.css</code> ourselves is <code>status-pane</code>, which you can find in <code>default.css</code></p>\n<pre><code>#status-pane {\n  padding-left: 5pt;\n}\n</code></pre>\n\n",
      "PostDate": "2024-06-01T23:27:23.702135Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60b67a2b-c7e5-409b-b615-cd5520e9cf36",
      "UserId": 587281,
      "Username": "PsychoVyse",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f359107abf9dc8cfe62bba1e4a8e84a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay that all seems fine to me but I get some issues with the progress bars in the additional panes not stretching to the edge of the panel like they do in the Status pane even though I've manually added the same style which at least helped display the contents in a proper table structure like the Status was doing.\r\n\r\n```\r\n\tcreateAdditionalPane(1, \"Level\", \"level\", function () {\r\n\t\tlet html = ''\r\n\t\thtml += '<div class=\"pane-div\">'\r\n\t\thtml += '<h4 class=\"side-pane-heading\" id=\"level-side-pane-heading\">Level</h4>'\r\n\t\thtml += '<table id=\"level-pane\">'\r\n\t\thtml += '<tbody>'\r\n\t\thtml += '<tr>'\r\n\t\thtml += '<p><td>Exp: </td><td><div class=\"stat-background\"><div class=\"stat-bar\" id=\"exp-indicator\"></div></div></td></p>'\r\n\t\thtml += '</tr>'\r\n\t\thtml += '</tbody>'\r\n\t\thtml += '</table>'\r\n\t\thtml += '</div>'\r\n    })\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay that all seems fine to me but I get some issues with the progress bars in the additional panes not stretching to the edge of the panel like they do in the Status pane even though I've manually added the same style which at least helped display the contents in a proper table structure like the Status was doing.</p>\n<pre><code>\tcreateAdditionalPane(1, \"Level\", \"level\", function () {\n\t\tlet html = ''\n\t\thtml += '&lt;div class=\"pane-div\"&gt;'\n\t\thtml += '&lt;h4 class=\"side-pane-heading\" id=\"level-side-pane-heading\"&gt;Level&lt;/h4&gt;'\n\t\thtml += '&lt;table id=\"level-pane\"&gt;'\n\t\thtml += '&lt;tbody&gt;'\n\t\thtml += '&lt;tr&gt;'\n\t\thtml += '&lt;p&gt;&lt;td&gt;Exp: &lt;/td&gt;&lt;td&gt;&lt;div class=\"stat-background\"&gt;&lt;div class=\"stat-bar\" id=\"exp-indicator\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/p&gt;'\n\t\thtml += '&lt;/tr&gt;'\n\t\thtml += '&lt;/tbody&gt;'\n\t\thtml += '&lt;/table&gt;'\n\t\thtml += '&lt;/div&gt;'\n    })\n</code></pre>\n\n",
      "PostDate": "2024-06-02T18:47:35.3436914Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
