{
  "Topic": {
    "TopicId": "u0xpctg2ckakls-ohsuqcq",
    "ForumId": "18",
    "Title": "Extending the Text Processor",
    "LastUpdated": "2016-10-04T08:39:38.3510633Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "73c202d0-a4e1-4a6f-844a-7b4f4da2cac1",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have created a library that expands the functionality of the Text Processor. The documentation is here (curerently the same as this post, but that web page will get updated if the library changes significantly):\r\nhttps://github.com/ThePix/quest/wiki/Library:-Text-Processor-Plus\r\n\r\nThe library is here:\r\n[TextProcessorPlus](https://github.com/ThePix/quest/blob/master/TextProcessorPlus.aslx)\r\n\r\nLet me know if there are issues.\r\n\r\n### either\r\n\r\nUse \"either\" instead of \"if\" when you also have text for when the condition is false. Here is an example. If `game.weather` is over 5 the player is told it is sunny, otherwise she is told it is cloudy.\r\n```\r\n  You look up at the sky. It is {either game.weather > 5:sunny:cloudy}.\r\n  The player is {either player.male:male:female}.\r\n  Where is the ball? {either ball.parent=player:The player has it:The player is looking everywhere}!\r\n```\r\nNote that you cannot have additional text processor commands inside an `either` section.\r\n\r\n\r\n### eval\r\n\r\nUse `eval` to display the result of a Quest expression. This could be the return value of a function, a calculation, etc.\r\n```\r\n  You look up at the sky. {eval:WeatherDescription()}\r\n  Your health is {eval:GetHealth()}.\r\n  Your progress is {eval:100 * GetScore() / 312}%.\r\n  Hi, {eval:CapFirst(\\\"mary\\\")}\r\n```\r\nThe expression must return a value, you will get an error otherwise. If the expression has double quotes, you will need to escape them (place a backslash before each one), as shown in the last example.\r\n\r\n\r\n### colour\r\n\r\nYou can use `colour` to display the text in a different colour (you can also use `color` if you prefer that spelling). You `back` to change the background colour (highlighting).\r\n```\r\n  Some {back:red:text of a red background} here.\r\n  This text {colour:red:is in red}!\r\n  Some text in {color:green:green} even with funny US spelling.\r\n  Now text {back:red:{color:yellow:in yellow on red}} by nesting.\r\n```\r\n\r\n### popup\r\n\r\nText inside a popup section will appear in blue. If the player clicks it, a popup box will appear showing the rest of the text. The popup can be hidden by clicking it.\r\n\r\nIn this example, it is used to explain an obscure term.\r\n```\r\n  Across the street there is a {popup:TeleMat booth:TeleMat booths offer instant travel around the world; just step inside, type in your destination, and you will be instantly teleported there.}.\r\n```\r\n\r\n### Clothing\r\n\r\nYou can use this in conjuction with my [ClothingLib](https://github.com/ThePix/quest/blob/master/ClothingLib.aslx), and get two extra functions. Note that this library must be above ClothingLib in the list. Three new directives are available.\r\n\r\n_`bare`:_ This text is only seen if the given body part is exposed.\r\n\r\n_`covered`:_ This text is only seen if the given body part is covered.\r\n\r\n_`covering`:_ Shows the outermost garment covering this body part.\r\n\r\nHere are some examples:\r\n```\r\n  Your legs are {bare:legs:exposed}{covered:legs:properly covered}.\r\n  On your chest, you are wearing {covering:chest}, and on your legs {covering:legs}.\r\n```\r\nNote that you can supply an NPC name, and have the text depend on what he or she is wearing, rather than the player.\r\n```\r\n  Mary's legs are {bare:mary:legs:exposed}{covered:mary:legs:properly covered}.\r\n  On her chest, Mary is wearing {covering:mary:chest}, and on her legs {covering:mary:legs}.\r\n```\r\nNote that you cannot have additional text processor commands inside any clothing sections.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have created a library that expands the functionality of the Text Processor. The documentation is here (curerently the same as this post, but that web page will get updated if the library changes significantly):<br>\nhttps://github.com/ThePix/quest/wiki/Library:-Text-Processor-Plus</p>\n<p>The library is here:<br>\n<a href=\"https://github.com/ThePix/quest/blob/master/TextProcessorPlus.aslx\">TextProcessorPlus</a></p>\n<p>Let me know if there are issues.</p>\n<h3>either</h3>\n<p>Use \"either\" instead of \"if\" when you also have text for when the condition is false. Here is an example. If <code>game.weather</code> is over 5 the player is told it is sunny, otherwise she is told it is cloudy.</p>\n<pre><code>  You look up at the sky. It is {either game.weather &gt; 5:sunny:cloudy}.\n  The player is {either player.male:male:female}.\n  Where is the ball? {either ball.parent=player:The player has it:The player is looking everywhere}!\n</code></pre>\n<p>Note that you cannot have additional text processor commands inside an <code>either</code> section.</p>\n<h3>eval</h3>\n<p>Use <code>eval</code> to display the result of a Quest expression. This could be the return value of a function, a calculation, etc.</p>\n<pre><code>  You look up at the sky. {eval:WeatherDescription()}\n  Your health is {eval:GetHealth()}.\n  Your progress is {eval:100 * GetScore() / 312}%.\n  Hi, {eval:CapFirst(\\\"mary\\\")}\n</code></pre>\n<p>The expression must return a value, you will get an error otherwise. If the expression has double quotes, you will need to escape them (place a backslash before each one), as shown in the last example.</p>\n<h3>colour</h3>\n<p>You can use <code>colour</code> to display the text in a different colour (you can also use <code>color</code> if you prefer that spelling). You <code>back</code> to change the background colour (highlighting).</p>\n<pre><code>  Some {back:red:text of a red background} here.\n  This text {colour:red:is in red}!\n  Some text in {color:green:green} even with funny US spelling.\n  Now text {back:red:{color:yellow:in yellow on red}} by nesting.\n</code></pre>\n<h3>popup</h3>\n<p>Text inside a popup section will appear in blue. If the player clicks it, a popup box will appear showing the rest of the text. The popup can be hidden by clicking it.</p>\n<p>In this example, it is used to explain an obscure term.</p>\n<pre><code>  Across the street there is a {popup:TeleMat booth:TeleMat booths offer instant travel around the world; just step inside, type in your destination, and you will be instantly teleported there.}.\n</code></pre>\n<h3>Clothing</h3>\n<p>You can use this in conjuction with my <a href=\"https://github.com/ThePix/quest/blob/master/ClothingLib.aslx\">ClothingLib</a>, and get two extra functions. Note that this library must be above ClothingLib in the list. Three new directives are available.</p>\n<p><em><code>bare</code>:</em> This text is only seen if the given body part is exposed.</p>\n<p><em><code>covered</code>:</em> This text is only seen if the given body part is covered.</p>\n<p><em><code>covering</code>:</em> Shows the outermost garment covering this body part.</p>\n<p>Here are some examples:</p>\n<pre><code>  Your legs are {bare:legs:exposed}{covered:legs:properly covered}.\n  On your chest, you are wearing {covering:chest}, and on your legs {covering:legs}.\n</code></pre>\n<p>Note that you can supply an NPC name, and have the text depend on what he or she is wearing, rather than the player.</p>\n<pre><code>  Mary's legs are {bare:mary:legs:exposed}{covered:mary:legs:properly covered}.\n  On her chest, Mary is wearing {covering:mary:chest}, and on her legs {covering:mary:legs}.\n</code></pre>\n<p>Note that you cannot have additional text processor commands inside any clothing sections.</p>\n\n",
      "PostDate": "2016-10-04T08:39:38.3510633Z",
      "LastEditDate": null
    }
  ]
}
