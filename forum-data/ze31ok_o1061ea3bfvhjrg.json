{
  "Topic": {
    "TopicId": "ze31ok_o1061ea3bfvhjrg",
    "ForumId": "10",
    "Title": "Command bar customization",
    "LastUpdated": "2018-12-03T16:14:25.0146388Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4ef5d75d-64d5-4e38-8548-c89cee34019c",
      "UserId": 388772,
      "Username": "Kyle Lav",
      "AvatarUrl": "https://i.imgur.com/gTw0s2Sb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I'm a little ways into creating my first game with Quest, and I've run into an extremely specific wall. I was toying around with customization options, including changing background colors and fonts, and everything was going well until I tried customizing the command bar. I've scoured the documentation and forums and have been unable to really find clear answers that work to the extent that I'm hoping. I've shifted my goals a few times and even tried testing things out from scratch with an empty game and still can't seem to figure this out.\r\n\r\nThe thing I would like to do is change the background color of the command bar. (I would like to do other things as well, but this is the one thing I can't seem to make any headway on in particular.) I actually have a few different levels of complexity I would be willing to pursue:\r\n\r\n1. Set a custom background color for the default command bar.\r\n2. Set custom styling for the default command bar.\r\n3. Have the background color dynamically change during the game using functions.\r\n\r\nMy original goal was 3, but I can't even achieve 1 even though I know it should be possible as I've seen it in other games. I've tried setting the CSS in various ways in various places to no avail.\r\n\r\nWhat I'd like to ask is not only how to achieve these things, but also what the best practices currently are for customizing the command bar. I've seen a lot of conflicting information from different years about how to manage it, and some of it seems deprecated or obsolete after 5.7 was released.\r\n\r\nIf you'd like, I can post some codes of various solutions I've tried, as well as the issues encountered with them. If I could examine code that actually works though - even just something that permanently changes the background color - I feel like I would be able to eliminate a lot of the guesswork though.\r\n\r\nThanks, and cheers!",
      "EditableFormat": "markdown",
      "HTML": "<p>So I'm a little ways into creating my first game with Quest, and I've run into an extremely specific wall. I was toying around with customization options, including changing background colors and fonts, and everything was going well until I tried customizing the command bar. I've scoured the documentation and forums and have been unable to really find clear answers that work to the extent that I'm hoping. I've shifted my goals a few times and even tried testing things out from scratch with an empty game and still can't seem to figure this out.</p>\n<p>The thing I would like to do is change the background color of the command bar. (I would like to do other things as well, but this is the one thing I can't seem to make any headway on in particular.) I actually have a few different levels of complexity I would be willing to pursue:</p>\n<ol>\n<li>Set a custom background color for the default command bar.</li>\n<li>Set custom styling for the default command bar.</li>\n<li>Have the background color dynamically change during the game using functions.</li>\n</ol>\n<p>My original goal was 3, but I can't even achieve 1 even though I know it should be possible as I've seen it in other games. I've tried setting the CSS in various ways in various places to no avail.</p>\n<p>What I'd like to ask is not only how to achieve these things, but also what the best practices currently are for customizing the command bar. I've seen a lot of conflicting information from different years about how to manage it, and some of it seems deprecated or obsolete after 5.7 was released.</p>\n<p>If you'd like, I can post some codes of various solutions I've tried, as well as the issues encountered with them. If I could examine code that actually works though - even just something that permanently changes the background color - I feel like I would be able to eliminate a lot of the guesswork though.</p>\n<p>Thanks, and cheers!</p>\n\n",
      "PostDate": "2018-12-03T16:14:25.0146388Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0add0432-04f6-4f83-971a-94e49263f529",
      "UserId": 388772,
      "Username": "Kyle Lav",
      "AvatarUrl": "https://i.imgur.com/gTw0s2Sb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Update: I've figured out a way to do what I wanted to do! The code for a short demo of it is below.\r\n\r\nAfter spending some time testing various conditions and analyzing the HTML, I've figured out why all CSS-based approaches fail. Succinctly, whatever you do with CSS gets overridden by element.style. From what I can tell, each time the command bar elements need to be created, the engine uses jQuery or DOM or whatever to create it, and in the process it assigns certain style attributes to the element directly.\r\n\r\nWith a bit of testing though I determined that the background color of the command bar was based on game.defaultbackground, which does not change when you update the background through JS.setBackground. I tried changing the default background color, which sort of worked... but not on the first command bar created, for whatever reason.\r\n\r\nLuckily in my earlier attempts I'd found that setting the CSS of #txtCommand through JS.setCss changes _only_ the first command bar created, so I put the two methods together and it worked! I can now change the background color of the command bar on the fly, and independently of the page background if I so desire.\r\n\r\nMy original goal was to be able to use the borderless command bar and change the background color of the page without the input field looking out of place, which I was able to do in this demo:\r\n\r\n```<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Command Bar Test\">\r\n    <gameid>978bc0e7-fac8-4971-b5d9-149169a56efa</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <defaultbackground>White</defaultbackground>\r\n    <feature_advancedscripts />\r\n    <borderlesscursor />\r\n    <commandcursor><![CDATA[>]]></commandcursor>\r\n    <enablehyperlinks />\r\n    <start type=\"script\">\r\n    </start>\r\n    <autodescription type=\"boolean\">false</autodescription>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description>Enter \"red\", \"green\", \"blue\", or \"white\" to change the color of the background.</description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"red\">\r\n    <pattern>red</pattern>\r\n    <script>\r\n      JS.setBackground (\"#FFC6C6\")\r\n      JS.setCss (\"#txtCommand\", \"background:#FFC6C6\")\r\n      game.defaultbackground = \"#FFC6C6\"\r\n    </script>\r\n  </command>\r\n  <command name=\"green\">\r\n    <pattern>green</pattern>\r\n    <script>\r\n      JS.setBackground (\"#C8F7C8\")\r\n      JS.setCss (\"#txtCommand\", \"background:#C8F7C8\")\r\n      game.defaultbackground = \"#C8F7C8\"\r\n    </script>\r\n  </command>\r\n  <command name=\"blue\">\r\n    <pattern>blue</pattern>\r\n    <script>\r\n      JS.setBackground (\"#C3E7F5\")\r\n      JS.setCss (\"#txtCommand\", \"background:#C3E7F5\")\r\n      game.defaultbackground = \"#C3E7F5\"\r\n    </script>\r\n  </command>\r\n  <command name=\"white\">\r\n    <pattern>white</pattern>\r\n    <script>\r\n      JS.setBackground (\"white\")\r\n      JS.setCss (\"body\", \"background:white\")\r\n      JS.setCss (\"#txtCommand\", \"background:white\")\r\n      game.defaultbackground = \"white\"\r\n    </script>\r\n  </command>\r\n</asl>\r\n```\r\n(There's a little redundancy in the code so you can test out different colors.)\r\n\r\nAs far as I can tell, there's no fallout to changing game.defaultbackground this way, and everything holds up even after reloading a save. Some extra confirmation would be nice, but as it stands I think I've solved my problem.",
      "EditableFormat": "markdown",
      "HTML": "<p>Update: I've figured out a way to do what I wanted to do! The code for a short demo of it is below.</p>\n<p>After spending some time testing various conditions and analyzing the HTML, I've figured out why all CSS-based approaches fail. Succinctly, whatever you do with CSS gets overridden by element.style. From what I can tell, each time the command bar elements need to be created, the engine uses jQuery or DOM or whatever to create it, and in the process it assigns certain style attributes to the element directly.</p>\n<p>With a bit of testing though I determined that the background color of the command bar was based on game.defaultbackground, which does not change when you update the background through JS.setBackground. I tried changing the default background color, which sort of worked... but not on the first command bar created, for whatever reason.</p>\n<p>Luckily in my earlier attempts I'd found that setting the CSS of #txtCommand through JS.setCss changes <em>only</em> the first command bar created, so I put the two methods together and it worked! I can now change the background color of the command bar on the fly, and independently of the page background if I so desire.</p>\n<p>My original goal was to be able to use the borderless command bar and change the background color of the page without the input field looking out of place, which I was able to do in this demo:</p>\n<pre><code>&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Command Bar Test\"&gt;\n    &lt;gameid&gt;978bc0e7-fac8-4971-b5d9-149169a56efa&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;defaultbackground&gt;White&lt;/defaultbackground&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;borderlesscursor /&gt;\n    &lt;commandcursor&gt;&lt;![CDATA[&gt;]]&gt;&lt;/commandcursor&gt;\n    &lt;enablehyperlinks /&gt;\n    &lt;start type=\"script\"&gt;\n    &lt;/start&gt;\n    &lt;autodescription type=\"boolean\"&gt;false&lt;/autodescription&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;Enter \"red\", \"green\", \"blue\", or \"white\" to change the color of the background.&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"red\"&gt;\n    &lt;pattern&gt;red&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.setBackground (\"#FFC6C6\")\n      JS.setCss (\"#txtCommand\", \"background:#FFC6C6\")\n      game.defaultbackground = \"#FFC6C6\"\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"green\"&gt;\n    &lt;pattern&gt;green&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.setBackground (\"#C8F7C8\")\n      JS.setCss (\"#txtCommand\", \"background:#C8F7C8\")\n      game.defaultbackground = \"#C8F7C8\"\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"blue\"&gt;\n    &lt;pattern&gt;blue&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.setBackground (\"#C3E7F5\")\n      JS.setCss (\"#txtCommand\", \"background:#C3E7F5\")\n      game.defaultbackground = \"#C3E7F5\"\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"white\"&gt;\n    &lt;pattern&gt;white&lt;/pattern&gt;\n    &lt;script&gt;\n      JS.setBackground (\"white\")\n      JS.setCss (\"body\", \"background:white\")\n      JS.setCss (\"#txtCommand\", \"background:white\")\n      game.defaultbackground = \"white\"\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>(There's a little redundancy in the code so you can test out different colors.)</p>\n<p>As far as I can tell, there's no fallout to changing game.defaultbackground this way, and everything holds up even after reloading a save. Some extra confirmation would be nice, but as it stands I think I've solved my problem.</p>\n\n",
      "PostDate": "2018-12-05T06:39:54.7822964Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "671ce5fc-5b88-4002-8714-beeb46b86bff",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> From what I can tell, each time the command bar elements need to be created, the engine uses jQuery or DOM or whatever to create it, and in the process it assigns certain style attributes to the element directly.\r\n\r\nIt's not recreated; the JS function `setCommandBarStyle` is just called by the quest core every turn, to reset the style attribute to its defaults. I have no idea why this is done.\r\n\r\nYour method seems to work well. An alternative would be just doing `JS.eval(\"setCommandBarStyle = function(style) {};\")` to disable the automatic reset so that you can adjust the CSS like you would for any other object.\r\n\r\nOr you could use:\r\n`msg (\"<style>#txtCommand { background:#DE3163 !important; }</style>\")`\r\nor \r\n`JS.setCss (\"#txtCommand\", \"background:#DE3163 !important\")`\r\nwhich causes the CSS to override the element's direct style attribute.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>From what I can tell, each time the command bar elements need to be created, the engine uses jQuery or DOM or whatever to create it, and in the process it assigns certain style attributes to the element directly.</p>\n</blockquote>\n<p>It's not recreated; the JS function <code>setCommandBarStyle</code> is just called by the quest core every turn, to reset the style attribute to its defaults. I have no idea why this is done.</p>\n<p>Your method seems to work well. An alternative would be just doing <code>JS.eval(\"setCommandBarStyle = function(style) {};\")</code> to disable the automatic reset so that you can adjust the CSS like you would for any other object.</p>\n<p>Or you could use:<br>\n<code>msg (\"&lt;style&gt;#txtCommand { background:#DE3163 !important; }&lt;/style&gt;\")</code><br>\nor<br>\n<code>JS.setCss (\"#txtCommand\", \"background:#DE3163 !important\")</code><br>\nwhich causes the CSS to override the element's direct style attribute.</p>\n\n",
      "PostDate": "2018-12-05T11:06:55.9194839Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "06e0f6ac-633a-4c8a-a4a7-98746757a8a9",
      "UserId": 388772,
      "Username": "Kyle Lav",
      "AvatarUrl": "https://i.imgur.com/gTw0s2Sb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the clarification! I'm not sure why the styling is reset each turn either, or why it's set directly instead of referring to the #txtCommand id.\r\n\r\nI tried out the first method you described and it worked like a charm. I think I'll go with that one since it eliminates redundancy. Thanks for the help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the clarification! I'm not sure why the styling is reset each turn either, or why it's set directly instead of referring to the #txtCommand id.</p>\n<p>I tried out the first method you described and it worked like a charm. I think I'll go with that one since it eliminates redundancy. Thanks for the help!</p>\n\n",
      "PostDate": "2018-12-06T08:46:44.0259851Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
