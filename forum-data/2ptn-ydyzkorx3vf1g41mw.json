{
  "Topic": {
    "TopicId": "2ptn-ydyzkorx3vf1g41mw",
    "ForumId": "10",
    "Title": "Excluding an object from 'get all'",
    "LastUpdated": "2017-07-16T15:04:47.0405599Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0a4ee34b-7875-4b88-be11-d622e81b3b09",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to to exclude an object when the command is 'get all'?\r\n\r\n(I've looked through the attributes, the docs, and the forums. I bet it's there, but I can't find it.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to to exclude an object when the command is 'get all'?</p>\n<p>(I've looked through the attributes, the docs, and the forums. I bet it's there, but I can't find it.)</p>\n\n",
      "PostDate": "2017-07-16T15:04:47.0405599Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a5aa90fc-2220-4418-a35e-ed2fca933bfb",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't think so for the Function itself, but you can do this (after the fact):\r\n\r\n```\r\nget input {\r\n  if (not result = \"YOUR_UNWANTED_INPUT\") {\r\n    // do whatever for your WANTED inputs\r\n  }\r\n  <!--\r\n  // optionally:\r\n  else {\r\n    // whatever for your unwanted input\r\n  }\r\n  -->\r\n}\r\n\r\nor\r\n\r\nget input {\r\n  if (result = \"YOUR_UNWANTED_INPUT\") {\r\n   // whatever for your unwanted input\r\n  } else {\r\n    // do whatever for your WANTED inputs\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't think so for the Function itself, but you can do this (after the fact):</p>\n<pre><code>get input {\n  if (not result = \"YOUR_UNWANTED_INPUT\") {\n    // do whatever for your WANTED inputs\n  }\n  &lt;!--\n  // optionally:\n  else {\n    // whatever for your unwanted input\n  }\n  --&gt;\n}\n\nor\n\nget input {\n  if (result = \"YOUR_UNWANTED_INPUT\") {\n   // whatever for your unwanted input\n  } else {\n    // do whatever for your WANTED inputs\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-16T23:40:27.6815011Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80c8eacd-e823-416d-ad18-5af54abaaf5e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oops... you said a 'get all' command for Objects... \r\n\r\nI don't recognise this... unless you're refering to the 'AllObjects ()' Function ???\r\n\r\nhere's how you would use this:\r\n\r\n(I'm not sure what you actually want to do, so just taking a guess, as an example for you, lol)\r\n\r\n```\r\n// the 'AllObjects ()' Function creates an Objectlist VARIABLE of EVERY Object in your game! (the lazy-HK's favorite Function, lol)\r\n\r\n// 'foreach' Function then iterates through every item in an Objectlist VARIABLE (which in this case, we're iterating through EVERY Object in the game)\r\n\r\ngame.wanted_objects_objectlist_attribute = NewObjectList ()\r\ngame.unwanted_objects_objectlist_attribute = NewObjectList ()\r\n\r\nforeach (object_variable, AllObjects () ) {\r\n  if (object_variable = NAME_OF_YOUR_UNWANTED_OBJECT) {\r\n    list add (game.unwanted_objects_objectlist_attribute, object_variable)\r\n  } else {\r\n    list add (game.wanted_objects_objectlist_attribute, object_variable)\r\n  }\r\n}\r\n\r\nor\r\n\r\ngame.wanted_objects_objectlist_attribute = NewObjectList ()\r\ngame.unwanted_objects_objectlist_attribute = NewObjectList ()\r\n\r\nforeach (object_variable, AllObjects () ) {\r\n  if (not object_variable = NAME_OF_YOUR_UNWANTED_OBJECT) {\r\n    list add (game.wanted_objects_objectlist_attribute, object_variable)\r\n  } else {\r\n    list add (game.unwanted_objects_objectlist_attribute, object_variable)\r\n  }\r\n}\r\n\r\n// you can then use these new Objectlist VARIABLES (Attributes), for whatever you want. Now, you don't have to use the 'AllObjects()' Function anymore, you can use the 'game.unwanted_objects_objectlist_attribute' to check if you got any of them in some other list or whatever usage.\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oops... you said a 'get all' command for Objects...</p>\n<p>I don't recognise this... unless you're refering to the 'AllObjects ()' Function ???</p>\n<p>here's how you would use this:</p>\n<p>(I'm not sure what you actually want to do, so just taking a guess, as an example for you, lol)</p>\n<pre><code>// the 'AllObjects ()' Function creates an Objectlist VARIABLE of EVERY Object in your game! (the lazy-HK's favorite Function, lol)\n\n// 'foreach' Function then iterates through every item in an Objectlist VARIABLE (which in this case, we're iterating through EVERY Object in the game)\n\ngame.wanted_objects_objectlist_attribute = NewObjectList ()\ngame.unwanted_objects_objectlist_attribute = NewObjectList ()\n\nforeach (object_variable, AllObjects () ) {\n  if (object_variable = NAME_OF_YOUR_UNWANTED_OBJECT) {\n    list add (game.unwanted_objects_objectlist_attribute, object_variable)\n  } else {\n    list add (game.wanted_objects_objectlist_attribute, object_variable)\n  }\n}\n\nor\n\ngame.wanted_objects_objectlist_attribute = NewObjectList ()\ngame.unwanted_objects_objectlist_attribute = NewObjectList ()\n\nforeach (object_variable, AllObjects () ) {\n  if (not object_variable = NAME_OF_YOUR_UNWANTED_OBJECT) {\n    list add (game.wanted_objects_objectlist_attribute, object_variable)\n  } else {\n    list add (game.unwanted_objects_objectlist_attribute, object_variable)\n  }\n}\n\n// you can then use these new Objectlist VARIABLES (Attributes), for whatever you want. Now, you don't have to use the 'AllObjects()' Function anymore, you can use the 'game.unwanted_objects_objectlist_attribute' to check if you got any of them in some other list or whatever usage.\n</code></pre>\n\n",
      "PostDate": "2017-07-16T23:48:53.1867372Z",
      "LastEditDate": "2017-07-16T23:53:14.9793803Z",
      "link": null
    },
    {
      "PostId": "ca4b783a-963c-4685-8985-ae4da7f927a0",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi there, HK!\r\n\r\nI apologize for the way I phrased that.\r\n\r\nLet's say there's an NPC named 'Ralph' in the room along with object2 and object3, and object2 and object3 can both be taken.\r\n\r\nNow, the player has played through this part once already, so he/she is going to enter GET ALL, which will print:\r\n\r\n>object2: You pick it up\r\n>Ralph: You can't take him.\r\n>object3: You pick it up.\r\n\r\nI'd like to exclude certain objects (or objects with a certain attribute I could create, like 'not_included_all') from the TAKE/GET ALL command.\r\n\r\nI **think** it may be something involving this part of ```DoTake```: \r\n\r\n```\r\n\r\nprefix = \"\"\r\nif (ismultiple) {\r\n  prefix = GetDisplayAlias(object) + \": \"\r\n}\r\n```\r\n\r\nAND **especially** this part of DoTake when the command is GET/TAKE ALL, I don't want it to print the TakeUnsuccessfull message for any of the NPCs:\r\n\r\n```\r\n\r\n   if (not found and takemsg = null) {\r\n      takemsg = DynamicTemplate(\"TakeUnsuccessful\", object)\r\n    }\r\n```\r\n\r\n---\r\nNote I am re-reading your replies, and I may be able to use the second method (foreach with the list of objects in player.parent) to exclude certain items from triggering a response from GET/TAKE ALL.\r\nAlternatively, I could do it just like you've written it in a start script, but, if I can figure out how to exclude an object when entering TAKE ALL (i.e., it doesn't list the scenery: YOU CAN'T TAKE THE GROUND), I can probably just add the attributes up-front and not bog the game down via extra start scripts.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi there, HK!</p>\n<p>I apologize for the way I phrased that.</p>\n<p>Let's say there's an NPC named 'Ralph' in the room along with object2 and object3, and object2 and object3 can both be taken.</p>\n<p>Now, the player has played through this part once already, so he/she is going to enter GET ALL, which will print:</p>\n<blockquote>\n<p>object2: You pick it up<br>\nRalph: You can't take him.<br>\nobject3: You pick it up.</p>\n</blockquote>\n<p>I'd like to exclude certain objects (or objects with a certain attribute I could create, like 'not_included_all') from the TAKE/GET ALL command.</p>\n<p>I <strong>think</strong> it may be something involving this part of <code>DoTake</code>:</p>\n<pre><code>\nprefix = \"\"\nif (ismultiple) {\n  prefix = GetDisplayAlias(object) + \": \"\n}\n</code></pre>\n<p>AND <strong>especially</strong> this part of DoTake when the command is GET/TAKE ALL, I don't want it to print the TakeUnsuccessfull message for any of the NPCs:</p>\n<pre><code>\n   if (not found and takemsg = null) {\n      takemsg = DynamicTemplate(\"TakeUnsuccessful\", object)\n    }\n</code></pre>\n<hr>\n<p>Note I am re-reading your replies, and I may be able to use the second method (foreach with the list of objects in player.parent) to exclude certain items from triggering a response from GET/TAKE ALL.<br>\nAlternatively, I could do it just like you've written it in a start script, but, if I can figure out how to exclude an object when entering TAKE ALL (i.e., it doesn't list the scenery: YOU CAN'T TAKE THE GROUND), I can probably just add the attributes up-front and not bog the game down via extra start scripts.</p>\n\n",
      "PostDate": "2017-07-17T00:10:55.7511781Z",
      "LastEditDate": "2017-07-17T00:32:15.0797426Z",
      "link": null
    },
    {
      "PostId": "b45fcf7d-57be-443a-802a-1bf53fa1d8b7",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not familiar with how the built-in stuff works... you'd have to find the relevant part of code that you need from it (filter -> show library elements -> 'toggled on/check-in' -> above in the \"tree of stuff\" as now-revealed light grey text, look under 'take' and/or whatever else that might be related to 'take', and/or maybe the 'handlecommand' too... no idea... don't know the built-in stuff, lol. And add in the needed scripting for what you want... once you found the relevant code for it, lol.\r\n\r\nAlso, there's a 'multiple' feature of Commands, but I don't really understand it and/or how it works, but you can take a look at Chase's 'wearables' (equipment) Library as he uses it in and with his code design. maybe you can understand it and how it works. Also, it may not even be relevant too for the scripting you want to add/adjust for doing your exclusion stuff.\r\n\r\n---------\r\n\r\nas for the exclusion action, there's only two ways of doing it (I think):\r\n\r\nwith an 'if' Script\r\n\r\nand/or\r\n\r\nwith using lists (there's lots of functionality, comparisons you do can, with them: ListContains (xxx), ListExclude(xxx), ListCombine (xxx), ListCount (xxx), sorting too btw, etc etc etc): \r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/using_lists.html\r\nhttp://docs.textadventures.co.uk/quest/using_lists.html\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not familiar with how the built-in stuff works... you'd have to find the relevant part of code that you need from it (filter -&gt; show library elements -&gt; 'toggled on/check-in' -&gt; above in the \"tree of stuff\" as now-revealed light grey text, look under 'take' and/or whatever else that might be related to 'take', and/or maybe the 'handlecommand' too... no idea... don't know the built-in stuff, lol. And add in the needed scripting for what you want... once you found the relevant code for it, lol.</p>\n<p>Also, there's a 'multiple' feature of Commands, but I don't really understand it and/or how it works, but you can take a look at Chase's 'wearables' (equipment) Library as he uses it in and with his code design. maybe you can understand it and how it works. Also, it may not even be relevant too for the scripting you want to add/adjust for doing your exclusion stuff.</p>\n<hr>\n<p>as for the exclusion action, there's only two ways of doing it (I think):</p>\n<p>with an 'if' Script</p>\n<p>and/or</p>\n<p>with using lists (there's lots of functionality, comparisons you do can, with them: ListContains (xxx), ListExclude(xxx), ListCombine (xxx), ListCount (xxx), sorting too btw, etc etc etc):</p>\n<p>http://docs.textadventures.co.uk/quest/guides/using_lists.html<br>\nhttp://docs.textadventures.co.uk/quest/using_lists.html</p>\n\n",
      "PostDate": "2017-07-17T00:43:32.4697818Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8aae4fc0-c155-4dd0-a740-dd1a2c1ef3a1",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Getting dangerous now:\r\n\r\nIf I alter the beginning of the ```DoTake``` script like so:\r\n\r\n```\r\n\r\nprefix = \"\"\r\nif (ismultiple) {\r\n  prefix = GetDisplayAlias(object) + \": \"\r\n        if ((GetDisplayAlias(object) = \"Ralph\")) {\r\n      msg (\"You just took all on RP.\")\r\n    }\r\n\r\n```\r\n\r\n...it prints YOU JUST TOOK ALL ON RP. \r\n\r\nSo, I've found where to insert the code to remove him from the list. Now I need only know the name of the list.\r\n\r\nThis problem is not insurmountable.\r\n\r\nNOTE: I totally copied this script from the GUI before I toyed with it. I **never** alter the source file.\r\n\r\n<details><summary>Here's the whole script, with the lines I added in notated:</summary>\r\n\r\n```\r\n\r\nprefix = \"\"\r\nif (ismultiple) {\r\n  prefix = GetDisplayAlias(object) + \": \"\r\n  \r\n//added this bit in, in an attempt to find out where to alter the list to exclude Ralph (and all NPCs in general)  from GET/TAKE ALL:\r\n\r\n      if ((GetDisplayAlias(object) = \"Ralph\")) {\r\n        msg (\"You just took all on RP.\")\r\n      }\r\n//END OF ADDED IN BIT\r\n\r\n}\r\nif (object.parent = game.pov) {\r\n  msg (prefix + DynamicTemplate(\"AlreadyTaken\", object))\r\n}\r\nelse if (not ListContains(ScopeReachable(), object)) {\r\n  msg (prefix + DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object)))\r\n}\r\nelse {\r\n  volume = 0\r\n  continue = true\r\n  foreach (obj, GetAllChildObjects(game.pov)) {\r\n    if (HasInt(obj, \"volume\")) {\r\n      volume = volume + obj.volume\r\n    }\r\n  }\r\n  if (not Contains(game.pov, object)) {\r\n    volume = volume + GetVolume(object,true)\r\n  }\r\n  if (HasInt(game.pov, \"maxvolume\")) {\r\n    if (volume > game.pov.maxvolume) {\r\n      continue = false\r\n      if (HasString(game.pov, \"containerfullmessage\")) {\r\n        message = prefix + game.pov.containerfullmessage\r\n      }\r\n      else {\r\n        message = prefix + DynamicTemplate(\"FullInventory\", object)\r\n      }\r\n    }\r\n  }\r\n  children = GetDirectChildren(game.pov)\r\n  if (HasInt(game.pov, \"maxobjects\")) {\r\n    if (game.pov.maxobjects > 0) {\r\n      if (ListCount(children) >= game.pov.maxobjects) {\r\n        continue = false\r\n        if (HasString(game.pov, \"containermaxobjects\")) {\r\n          message = prefix + game.pov.containermaxobjects\r\n        }\r\n        else {\r\n          message = prefix + DynamicTemplate(\"MaxObjectsInInventory\", object)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (continue = false) {\r\n    msg (message)\r\n  }\r\n  else {\r\n    found = true\r\n    takemsg = object.takemsg\r\n    switch (TypeOf(object, \"take\")) {\r\n      case (\"script\") {\r\n        if (ismultiple) {\r\n          OutputTextNoBr (prefix)\r\n        }\r\n        do (object, \"take\")\r\n        takemsg = \"\"\r\n      }\r\n      case (\"boolean\") {\r\n        if (object.take = true) {\r\n          object.parent = game.pov\r\n          if (takemsg = null) {\r\n            takemsg = DynamicTemplate(\"TakeSuccessful\", object)\r\n          }\r\n        }\r\n        else {\r\n          found = false\r\n        }\r\n      }\r\n      case (\"string\") {\r\n        object.parent = game.pov\r\n        takemsg = object.take\r\n      }\r\n      default {\r\n        found = false\r\n      }\r\n    }\r\n    if (not found and takemsg = null) {\r\n      takemsg = DynamicTemplate(\"TakeUnsuccessful\", object)\r\n    }\r\n    if (LengthOf(takemsg) > 0) {\r\n      msg (prefix + takemsg)\r\n    }\r\n    if (HasScript(object, \"ontake\")) {\r\n      do (object, \"ontake\")\r\n    }\r\n    if (found and GetBoolean (object, \"scenery\") and object.parent = game.pov) {\r\n      object.scenery = false\r\n    }\r\n  }\r\n}\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Getting dangerous now:</p>\n<p>If I alter the beginning of the <code>DoTake</code> script like so:</p>\n<pre><code>\nprefix = \"\"\nif (ismultiple) {\n  prefix = GetDisplayAlias(object) + \": \"\n        if ((GetDisplayAlias(object) = \"Ralph\")) {\n      msg (\"You just took all on RP.\")\n    }\n\n</code></pre>\n<p>...it prints YOU JUST TOOK ALL ON RP.</p>\n<p>So, I've found where to insert the code to remove him from the list. Now I need only know the name of the list.</p>\n<p>This problem is not insurmountable.</p>\n<p>NOTE: I totally copied this script from the GUI before I toyed with it. I <strong>never</strong> alter the source file.</p>\n<details><summary>Here's the whole script, with the lines I added in notated:</summary>\n<pre><code>\nprefix = \"\"\nif (ismultiple) {\n  prefix = GetDisplayAlias(object) + \": \"\n  \n//added this bit in, in an attempt to find out where to alter the list to exclude Ralph (and all NPCs in general)  from GET/TAKE ALL:\n\n      if ((GetDisplayAlias(object) = \"Ralph\")) {\n        msg (\"You just took all on RP.\")\n      }\n//END OF ADDED IN BIT\n\n}\nif (object.parent = game.pov) {\n  msg (prefix + DynamicTemplate(\"AlreadyTaken\", object))\n}\nelse if (not ListContains(ScopeReachable(), object)) {\n  msg (prefix + DynamicTemplate(\"ObjectNotOpen\", GetBlockingObject(object)))\n}\nelse {\n  volume = 0\n  continue = true\n  foreach (obj, GetAllChildObjects(game.pov)) {\n    if (HasInt(obj, \"volume\")) {\n      volume = volume + obj.volume\n    }\n  }\n  if (not Contains(game.pov, object)) {\n    volume = volume + GetVolume(object,true)\n  }\n  if (HasInt(game.pov, \"maxvolume\")) {\n    if (volume &gt; game.pov.maxvolume) {\n      continue = false\n      if (HasString(game.pov, \"containerfullmessage\")) {\n        message = prefix + game.pov.containerfullmessage\n      }\n      else {\n        message = prefix + DynamicTemplate(\"FullInventory\", object)\n      }\n    }\n  }\n  children = GetDirectChildren(game.pov)\n  if (HasInt(game.pov, \"maxobjects\")) {\n    if (game.pov.maxobjects &gt; 0) {\n      if (ListCount(children) &gt;= game.pov.maxobjects) {\n        continue = false\n        if (HasString(game.pov, \"containermaxobjects\")) {\n          message = prefix + game.pov.containermaxobjects\n        }\n        else {\n          message = prefix + DynamicTemplate(\"MaxObjectsInInventory\", object)\n        }\n      }\n    }\n  }\n  if (continue = false) {\n    msg (message)\n  }\n  else {\n    found = true\n    takemsg = object.takemsg\n    switch (TypeOf(object, \"take\")) {\n      case (\"script\") {\n        if (ismultiple) {\n          OutputTextNoBr (prefix)\n        }\n        do (object, \"take\")\n        takemsg = \"\"\n      }\n      case (\"boolean\") {\n        if (object.take = true) {\n          object.parent = game.pov\n          if (takemsg = null) {\n            takemsg = DynamicTemplate(\"TakeSuccessful\", object)\n          }\n        }\n        else {\n          found = false\n        }\n      }\n      case (\"string\") {\n        object.parent = game.pov\n        takemsg = object.take\n      }\n      default {\n        found = false\n      }\n    }\n    if (not found and takemsg = null) {\n      takemsg = DynamicTemplate(\"TakeUnsuccessful\", object)\n    }\n    if (LengthOf(takemsg) &gt; 0) {\n      msg (prefix + takemsg)\n    }\n    if (HasScript(object, \"ontake\")) {\n      do (object, \"ontake\")\n    }\n    if (found and GetBoolean (object, \"scenery\") and object.parent = game.pov) {\n      object.scenery = false\n    }\n  }\n}\n</code></pre>\n</details>\n\n",
      "PostDate": "2017-07-17T02:22:29.5192551Z",
      "LastEditDate": "2017-07-17T02:27:12.4596643Z",
      "link": null
    },
    {
      "PostId": "9d2adae8-d791-4704-af49-06dd1e1789e0",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "## Making progress:\r\n\r\n### This successfully allows me to add an attribute to an object which excludes it from the TAKE/GET ALL command. (It will ignore said object, as if it were scenery.)\r\n\r\n### This prints no output at all, just like it would if there were nothing to get.\r\n### I'm working on adding \"There is no all to get.\" when there are no objects to take.\r\n\r\n---\r\nI copied the 'take' command then edited the script thusly:\r\n\r\n```\r\n\r\nforeach (obj, object) {\r\n  if (not HasAttribute(obj, \"not_all\")) {\r\n    DoTake (obj, multiple)\r\n  }\r\n}\r\n```\r\n\r\nThen, I just add the attribute 'not_all' to any object I don't want a printed response for when the player's command is TAKE/GET ALL.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<h2>Making progress:</h2>\n<h3>This successfully allows me to add an attribute to an object which excludes it from the TAKE/GET ALL command. (It will ignore said object, as if it were scenery.)</h3>\n<h3>This prints no output at all, just like it would if there were nothing to get.</h3>\n<h3>I'm working on adding \"There is no all to get.\" when there are no objects to take.</h3>\n<hr>\n<p>I copied the 'take' command then edited the script thusly:</p>\n<pre><code>\nforeach (obj, object) {\n  if (not HasAttribute(obj, \"not_all\")) {\n    DoTake (obj, multiple)\n  }\n}\n</code></pre>\n<p>Then, I just add the attribute 'not_all' to any object I don't want a printed response for when the player's command is TAKE/GET ALL.</p>\n\n",
      "PostDate": "2017-07-17T03:45:04.4646401Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "646edc92-c756-4939-8878-005b0fffb6fc",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "SUCCESS!\r\n\r\n---\r\n\r\n### To exclude an object from TAKE/GET ALL\r\n\r\nCreated an attribute called 'not_all' for the object. (NOTE: You can use a Boolean and set it to \"True\" to maintain a professional appearance. You can also just leave it as an empty string. Either, way the code remains the same. (Thanks Pixie!))\r\n\r\nAltered script for the command 'take':\r\n\r\n```\r\nanything_to_take = false\r\nforeach (obj, object) {\r\n  if (not HasAttribute(obj, \"not_all\")) {\r\n    DoTake (obj, multiple)\r\n    anything_to_take = true\r\n    //this signals the presence of an object that is included in TAKE ALL\r\n  }\r\n}\r\nif (not anything_to_take) {\r\n  ///Meaning there is not an object that would be included in TAKE ALL present\r\n  msg (\"There is no all to take.\")\r\n}\r\n```\r\n\r\nAnd that's it!\r\n\r\nIf there is nothing to get, it will print, \"There is no all to take.\"\r\n\r\nOtherwise, it will take everything marked 'can be taken', printing each object's ```takemsg```, just like it normally would.\r\n\r\nThanks for all the help, hegemonkhan and Pixie!",
      "EditableFormat": "markdown",
      "HTML": "<p>SUCCESS!</p>\n<hr>\n<h3>To exclude an object from TAKE/GET ALL</h3>\n<p>Created an attribute called 'not_all' for the object. (NOTE: You can use a Boolean and set it to \"True\" to maintain a professional appearance. You can also just leave it as an empty string. Either, way the code remains the same. (Thanks Pixie!))</p>\n<p>Altered script for the command 'take':</p>\n<pre><code>anything_to_take = false\nforeach (obj, object) {\n  if (not HasAttribute(obj, \"not_all\")) {\n    DoTake (obj, multiple)\n    anything_to_take = true\n    //this signals the presence of an object that is included in TAKE ALL\n  }\n}\nif (not anything_to_take) {\n  ///Meaning there is not an object that would be included in TAKE ALL present\n  msg (\"There is no all to take.\")\n}\n</code></pre>\n<p>And that's it!</p>\n<p>If there is nothing to get, it will print, \"There is no all to take.\"</p>\n<p>Otherwise, it will take everything marked 'can be taken', printing each object's <code>takemsg</code>, just like it normally would.</p>\n<p>Thanks for all the help, hegemonkhan and Pixie!</p>\n\n",
      "PostDate": "2017-07-17T03:55:35.4743679Z",
      "LastEditDate": "2017-07-17T08:51:05.9609679Z",
      "link": null
    },
    {
      "PostId": "fc9a8534-e5eb-4c73-8ddf-e5d6e3fd0a85",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can use a String Attribute, a Boolean Attribute, an Integer/Double Attribute, the 'name' of the Object (using the String Manipulation Functions and a naming/labeling convention/system), or an Object Type for your 'indicator/flag' on your Objects:\r\n\r\n```\r\n// 'Has'-vs-'Get'-Attribute Functions:\r\n//\r\n// the 'Has' just checks if the Object has an Attribute named as specified, the Value of the Attribute is ir-relevant/ignored\r\n// the 'Get' not only checks if the Object has an Attribute named as specified, but also checks if it's Value is the same as specified\r\n\r\n-----------\r\n\r\nnote that there's the 'HasAttribute' and 'GetAttribute', which quest will parse/determine for you (they can be used for any of the specfici Attribute Types or more usually when the Attribute Type is dynamic: you don't know what Attribute Type it will be / it's different each time. Also, they may work with List and Dictionary Attributes too, but I've not tested it yet --- lazy me/HK)\r\n\r\notehrwise, if you know for certain of the Attribute Type, you can use the specific individual types:\r\n\r\nHasString, HasInt, HasBoolean, etc etc etc\r\nGetString, GetInt, GetBoolean, etc etc etc\r\n\r\n--------\r\n\r\nString Attribute usage:\r\n\r\nif (HasString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\")) { /* scripting */ }\r\n\r\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_A\") { /* scripting */ }\r\n\r\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_B\") { /* scripting */ }\r\nif (not GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_A\") { /* scripting */ }\r\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") <> \"STRING_VALUE_A\") { /* scripting */ } // requires the 'CDATA' tags for its use if coding directly in code, the '<>' is/will-ve recognized by quest as 'not equals', it's an alternative to: not xxx = xxx\r\n\r\n-----------\r\n\r\nBoolean Attribute:\r\n\r\nif (NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE) { /* scripting */ }\r\nif (not NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE) { /* scripting */ }\r\n\r\nif (HasBoolean (NAME_OF_OBJECT, \"NAME_OF_Boolean_ATTRIBUTE\")) { /* scripting */ }\r\n\r\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_A) { /* scripting */ }\r\n\r\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_B) { /* scripting */ }\r\nif (not GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_A) { /* scripting */ }\r\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") <> BOOLEAN_VALUE_A) { /* scripting */ }\r\n\r\n----------\r\n\r\nInteger (or Double) Attribute:\r\n\r\nif (HasInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\")) { /* scripting */ }\r\n\r\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_A) { /* scripting */ }\r\n\r\nif (not GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_A) { /* scripting */ }\r\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") <> INTEGER_VALUE_A) { /* scripting */ }\r\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_B) { /* scripting */ }\r\n\r\n-----------\r\n\r\nthe String Manipulation Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom/bottom-last-section: 'string functions')\r\n\r\nStartsWith, EndsWith, Mid, Instr, InstrRev, etc etc etc (maybe)\r\n\r\nfor example:\r\n\r\n<object name=\"potion_1\">\r\n</object>\r\n<object name=\"potion_2\">\r\n</object>\r\n<object name=\"potion_3\">\r\n</object>\r\n<object name=\"sword_1\">\r\n</object>\r\n<object name=\"sword_2\">\r\n</object>\r\n<object name=\"sword_3\">\r\n</object>\r\n\r\n// scripting:\r\n\r\nforeach (object_variable, AllObjects ()) {\r\n  if (StartsWith (object_variable, \"potion\")) {\r\n    list add (game.potion_objectlist_attribute, object_variable)\r\n  } else if (StartsWith (object_variable, \"sword\")) {\r\n    list add (game.sword_objectlist_attribute, object_variable)\r\n  }\r\n}\r\n\r\n--------------------\r\n\r\nObject Types / Types / Inherited Attributes:\r\n\r\nfor example:\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n\r\n<object name=\"orc\">\r\n  <inherit name=\"monster_type\" />\r\n</object>\r\n\r\n<object name=\"ogre\">\r\n  <inherit name=\"monster_type\" />\r\n</object>\r\n\r\n<type name=\"equipment_type\">\r\n</type>\r\n\r\n<object name=\"sword\">\r\n  <inherit name=\"equipment_type\" />\r\n</object>\r\n\r\n<object name=\"axe\">\r\n  <inherit name=\"equipment_type\" />\r\n</object>\r\n\r\n// scripting:\r\n\r\nforeach (object_variable, AllObjects ()) {\r\n  if (DoesInherit (object_variable, \"monster_type\")) {\r\n    list add (game.monster_objectlist_attribute, object_variable)\r\n  } else if (DoesInherit (object_variable, \"equipment_type\")) {\r\n    list add (game.equipment_objectlist_attribute, object_variable)\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>you can use a String Attribute, a Boolean Attribute, an Integer/Double Attribute, the 'name' of the Object (using the String Manipulation Functions and a naming/labeling convention/system), or an Object Type for your 'indicator/flag' on your Objects:</p>\n<pre><code>// 'Has'-vs-'Get'-Attribute Functions:\n//\n// the 'Has' just checks if the Object has an Attribute named as specified, the Value of the Attribute is ir-relevant/ignored\n// the 'Get' not only checks if the Object has an Attribute named as specified, but also checks if it's Value is the same as specified\n\n-----------\n\nnote that there's the 'HasAttribute' and 'GetAttribute', which quest will parse/determine for you (they can be used for any of the specfici Attribute Types or more usually when the Attribute Type is dynamic: you don't know what Attribute Type it will be / it's different each time. Also, they may work with List and Dictionary Attributes too, but I've not tested it yet --- lazy me/HK)\n\notehrwise, if you know for certain of the Attribute Type, you can use the specific individual types:\n\nHasString, HasInt, HasBoolean, etc etc etc\nGetString, GetInt, GetBoolean, etc etc etc\n\n--------\n\nString Attribute usage:\n\nif (HasString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\")) { /* scripting */ }\n\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_A\") { /* scripting */ }\n\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_B\") { /* scripting */ }\nif (not GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = \"STRING_VALUE_A\") { /* scripting */ }\nif (GetString (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") &lt;&gt; \"STRING_VALUE_A\") { /* scripting */ } // requires the 'CDATA' tags for its use if coding directly in code, the '&lt;&gt;' is/will-ve recognized by quest as 'not equals', it's an alternative to: not xxx = xxx\n\n-----------\n\nBoolean Attribute:\n\nif (NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE) { /* scripting */ }\nif (not NAME_OF_OBJECT.NAME_OF_BOOLEAN_ATTRIBUTE) { /* scripting */ }\n\nif (HasBoolean (NAME_OF_OBJECT, \"NAME_OF_Boolean_ATTRIBUTE\")) { /* scripting */ }\n\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_A) { /* scripting */ }\n\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_B) { /* scripting */ }\nif (not GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") = BOOLEAN_VALUE_A) { /* scripting */ }\nif (GetBoolean (NAME_OF_OBJECT, \"NAME_OF_STRING_ATTRIBUTE\") &lt;&gt; BOOLEAN_VALUE_A) { /* scripting */ }\n\n----------\n\nInteger (or Double) Attribute:\n\nif (HasInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\")) { /* scripting */ }\n\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_A) { /* scripting */ }\n\nif (not GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_A) { /* scripting */ }\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") &lt;&gt; INTEGER_VALUE_A) { /* scripting */ }\nif (GetInt (NAME_OF_OBJECT, \"NAME_OF_INTEGER_ATTRIBUTE\") = INTEGER_VALUE_B) { /* scripting */ }\n\n-----------\n\nthe String Manipulation Functions:\n\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom/bottom-last-section: 'string functions')\n\nStartsWith, EndsWith, Mid, Instr, InstrRev, etc etc etc (maybe)\n\nfor example:\n\n&lt;object name=\"potion_1\"&gt;\n&lt;/object&gt;\n&lt;object name=\"potion_2\"&gt;\n&lt;/object&gt;\n&lt;object name=\"potion_3\"&gt;\n&lt;/object&gt;\n&lt;object name=\"sword_1\"&gt;\n&lt;/object&gt;\n&lt;object name=\"sword_2\"&gt;\n&lt;/object&gt;\n&lt;object name=\"sword_3\"&gt;\n&lt;/object&gt;\n\n// scripting:\n\nforeach (object_variable, AllObjects ()) {\n  if (StartsWith (object_variable, \"potion\")) {\n    list add (game.potion_objectlist_attribute, object_variable)\n  } else if (StartsWith (object_variable, \"sword\")) {\n    list add (game.sword_objectlist_attribute, object_variable)\n  }\n}\n\n--------------------\n\nObject Types / Types / Inherited Attributes:\n\nfor example:\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n\n&lt;object name=\"orc\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"equipment_type\"&gt;\n&lt;/type&gt;\n\n&lt;object name=\"sword\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"axe\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n&lt;/object&gt;\n\n// scripting:\n\nforeach (object_variable, AllObjects ()) {\n  if (DoesInherit (object_variable, \"monster_type\")) {\n    list add (game.monster_objectlist_attribute, object_variable)\n  } else if (DoesInherit (object_variable, \"equipment_type\")) {\n    list add (game.equipment_objectlist_attribute, object_variable)\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-17T04:35:15.5995277Z",
      "LastEditDate": "2017-07-17T04:42:01.8138789Z",
      "link": null
    },
    {
      "PostId": "d8603ca3-28cb-4fe8-919f-855fea335f9d",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```StartsWith``` and``` EndsWith``` ??? \r\n\r\nCool!\r\n\r\n---\r\nWhat's the difference between ```Inherited types``` and  ```Attributes```?",
      "EditableFormat": "markdown",
      "HTML": "<p><code>StartsWith</code> and<code>EndsWith</code> ???</p>\n<p>Cool!</p>\n<hr>\n<p>What's the difference between <code>Inherited types</code> and  <code>Attributes</code>?</p>\n\n",
      "PostDate": "2017-07-17T04:44:08.7315111Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ba9f7a8-84cc-4713-95eb-0f1775b09ae1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Object Types / Types: are quest's user-level 'groups/classes' (\"baskets:Object_Types of a bunch of eggs:Attributes\"), which are then added to Objects as 'Inherited Attributes'\r\n\r\nfor example:\r\n\r\n```\r\nVERY YUCK:\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n</object>\r\n```\r\n\r\nVS\r\n\r\n```\r\nmuch much better:\r\n\r\n<object name=\"orc_1\">\r\n  <inherit name=\"orc_type\" /> // this is the 'Inherited Attribute', which is adding the Object Type (and thus all of its Attributes) to this Object\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n// this is the Object Type and the Attributes it holds:\r\n\r\n<type name=\"orc_type\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n</type>\r\n```\r\n\r\n---------------\r\n\r\nbecause the Attributes within an Object Type are 'inherited' via as an 'Inherited Attribute', you can over-ride them:\r\n\r\n```\r\n<object name=\"orc_1\">\r\n  <inherit name=\"orc_type\" />\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <inherit name=\"orc_type\" />\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <inherit name=\"orc_type\" />\r\n  <attr name=\"intelligence\" type=\"int\">0</attr>\r\n  <attr name=\"spirituality\" type=\"int\">0</attr>\r\n  <attr name=\"mentality\" type=\"int\">0</attr>\r\n  <attr name=\"personality\" type=\"int\">0</attr>\r\n  <attr name=\"charisma\" type=\"int\">0</attr>\r\n  <attr name=\"leadership\" type=\"int\">0</attr>\r\n  <attr name=\"alignment\" type=\"int\">0</attr>\r\n  <attr name=\"morality\" type=\"int\">0</attr>\r\n</object>\r\n\r\n<type name=\"orc_type\">\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n</type>\r\n\r\n// results (final Attribute Values):\r\n\r\norc_1:\r\n\r\n  <inherit name=\"orc_type\" />\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n\r\norc_2:\r\n\r\n  <inherit name=\"orc_type\" />\r\n  <attr name=\"strength\" type=\"int\">0</attr>\r\n  <attr name=\"endurance\" type=\"int\">0</attr>\r\n  <attr name=\"dexterity\" type=\"int\">0</attr>\r\n  <attr name=\"agility\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"luck\" type=\"int\">0</attr>\r\n  <attr name=\"piety\" type=\"int\">0</attr>\r\n  <attr name=\"intelligence\" type=\"int\">65</attr>\r\n  <attr name=\"spirituality\" type=\"int\">60</attr>\r\n  <attr name=\"mentality\" type=\"int\">55</attr>\r\n  <attr name=\"personality\" type=\"int\">50</attr>\r\n  <attr name=\"charisma\" type=\"int\">45</attr>\r\n  <attr name=\"leadership\" type=\"int\">40</attr>\r\n  <attr name=\"alignment\" type=\"int\">35</attr>\r\n  <attr name=\"morality\" type=\"int\">30</attr>\r\n\r\norc_3:\r\n\r\n  <inherit name=\"orc_type\" />\r\n  <attr name=\"strength\" type=\"int\">100</attr>\r\n  <attr name=\"endurance\" type=\"int\">95</attr>\r\n  <attr name=\"dexterity\" type=\"int\">90</attr>\r\n  <attr name=\"agility\" type=\"int\">85</attr>\r\n  <attr name=\"speed\" type=\"int\">80</attr>\r\n  <attr name=\"luck\" type=\"int\">75</attr>\r\n  <attr name=\"piety\" type=\"int\">70</attr>\r\n  <attr name=\"intelligence\" type=\"int\">0</attr>\r\n  <attr name=\"spirituality\" type=\"int\">0</attr>\r\n  <attr name=\"mentality\" type=\"int\">0</attr>\r\n  <attr name=\"personality\" type=\"int\">0</attr>\r\n  <attr name=\"charisma\" type=\"int\">0</attr>\r\n  <attr name=\"leadership\" type=\"int\">0</attr>\r\n  <attr name=\"alignment\" type=\"int\">0</attr>\r\n  <attr name=\"morality\" type=\"int\">0</attr>\r\n```\r\n\r\n------------------\r\n\r\nalso note:\r\n\r\nyou can add Script Attributes, List Attributes, Dictionary Attributes, and even Inherited Attributes (layers of Object Types: Object Types within Object Types) to Object Types as well as String Attributes, Boolean Attributes, Integer/Double Attribute and Object (reference/pointer) Attributes\r\n\r\nalso note 2: (a caveat):\r\n\r\nhowever, if you want to change the Value of an Inherited Attribute (an Attribute from an Object Type) on an Object... you must first, create the same Attribute within the Object, as this will cause the Inherited Attribute to be over-ridden/over-writen, and thus now no longer it's an Inherited Attribute, but now a normal Attribute, which you can now adjust it's Value, whereas as an Inherited Attribute, it (The Inherited Attribute's Value) is blocked/restricted from being manipulated/changed/adjusted.",
      "EditableFormat": "markdown",
      "HTML": "<p>Object Types / Types: are quest's user-level 'groups/classes' (\"baskets:Object_Types of a bunch of eggs:Attributes\"), which are then added to Objects as 'Inherited Attributes'</p>\n<p>for example:</p>\n<pre><code>VERY YUCK:\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<p>VS</p>\n<pre><code>much much better:\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt; // this is the 'Inherited Attribute', which is adding the Object Type (and thus all of its Attributes) to this Object\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n// this is the Object Type and the Attributes it holds:\n\n&lt;type name=\"orc_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>because the Attributes within an Object Type are 'inherited' via as an 'Inherited Attribute', you can over-ride them:</p>\n<pre><code>&lt;object name=\"orc_1\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"orc_type\"&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n&lt;/type&gt;\n\n// results (final Attribute Values):\n\norc_1:\n\n  &lt;inherit name=\"orc_type\" /&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n\norc_2:\n\n  &lt;inherit name=\"orc_type\" /&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;65&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;60&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;55&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;50&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;45&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;40&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;35&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;30&lt;/attr&gt;\n\norc_3:\n\n  &lt;inherit name=\"orc_type\" /&gt;\n  &lt;attr name=\"strength\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"endurance\" type=\"int\"&gt;95&lt;/attr&gt;\n  &lt;attr name=\"dexterity\" type=\"int\"&gt;90&lt;/attr&gt;\n  &lt;attr name=\"agility\" type=\"int\"&gt;85&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;80&lt;/attr&gt;\n  &lt;attr name=\"luck\" type=\"int\"&gt;75&lt;/attr&gt;\n  &lt;attr name=\"piety\" type=\"int\"&gt;70&lt;/attr&gt;\n  &lt;attr name=\"intelligence\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"spirituality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"mentality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"personality\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"charisma\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"leadership\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"alignment\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"morality\" type=\"int\"&gt;0&lt;/attr&gt;\n</code></pre>\n<hr>\n<p>also note:</p>\n<p>you can add Script Attributes, List Attributes, Dictionary Attributes, and even Inherited Attributes (layers of Object Types: Object Types within Object Types) to Object Types as well as String Attributes, Boolean Attributes, Integer/Double Attribute and Object (reference/pointer) Attributes</p>\n<p>also note 2: (a caveat):</p>\n<p>however, if you want to change the Value of an Inherited Attribute (an Attribute from an Object Type) on an Object... you must first, create the same Attribute within the Object, as this will cause the Inherited Attribute to be over-ridden/over-writen, and thus now no longer it's an Inherited Attribute, but now a normal Attribute, which you can now adjust it's Value, whereas as an Inherited Attribute, it (The Inherited Attribute's Value) is blocked/restricted from being manipulated/changed/adjusted.</p>\n\n",
      "PostDate": "2017-07-17T05:05:24.9403793Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "66e83730-1db4-4857-8f6c-55d7297d516c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "for an example of a more complex (layered) system of Object Types:\r\n\r\njust some ideas for you (using a bunch of different games' mechanics/features/concepts, lol)\r\n\r\n```\r\n<type name=\"item_type\">\r\n</type>\r\n\r\n<type name=\"event_item_type\">\r\n  <inherit name=\"item_type\" />\r\n  // this would be your non-interactive (non-usable) 'items', really more of like achievements/trophies/progress: event/quest/key items\r\n</type>\r\n\r\n<type name=\"normal_item_type\">\r\n  <inherit name=\"item_type\" />\r\n  // these are your 'normal' (interactive/usable) items\r\n  <attr name=\"quantity\" type=\"int\">0</attr>\r\n  <attr name=\"weight/volume\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"consumable_item_type\">\r\n  <inherit name=\"normal_item_type\" />\r\n  // can be used anywhere\r\n  // using the built-in 'use' stuff works fine here\r\n</type>\r\n\r\n<type name=\"battle_item_type\">\r\n  <inherit name=\"normal_item_type\" />\r\n  // these items can be used in battle: they cast a spell and may or may not use up the item\r\n  // using the built-in 'use' stuff works fine here too\r\n</type>\r\n\r\n<type name=\"world_item_type\">\r\n  <inherit name=\"normal_item_type\" />\r\n  // these can only be used on the world map area: such as items that 'warp to towns', 'sleeping tent for recovering hp/mp', 'transportation calling/summoning items', etc etc etc\r\n  // using the built-in 'use' stuff works fine here too\r\n</type>\r\n\r\n<type name=\"equipment_type\">\r\n  <inherit name=\"normal_item_type\" />\r\n  <attr name=\"equipable\" type=\"boolean\">true</attr>\r\n  <attr name=\"unequipable\" type=\"boolean\">true</attr>\r\n  <attr name=\"equip\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"unequip\" type=\"script\">\r\n  </attr>\r\n  <attr name=\"slot_layer_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\">unknown</attr>\r\n</type>\r\n\r\n<type name=\"cursed_type\">\r\n  <attr name=\"unequipable\" type=\"boolean\">false</attr>\r\n</type>\r\n\r\n<type name=\"weapon_type\">\r\n  <inherit name=\"equipment_type\" />\r\n  <attr name=\"damage\" type=\"int\">0</attr>\r\n  <attr name=\"reach\" type=\"int\">0</attr>\r\n  <attr name=\"speed\" type=\"int\">0</attr>\r\n  <attr name=\"damage_modifier_string_attribute\" type=\"string\">unknown</attr> // if you want multiple damage modifiers, than make this be a Stringlist Attribute\r\n  <attr name=\"damage_modifier_integer_attribute\" type=\"int\">0</attr> // actually we can combine these two damage modifiers (string and int) by using a Dictionary Attribute...\r\n</type>\r\n\r\n<type name=\"armor_type\">\r\n  <inherit name=\"equipment_type\" />\r\n  <attr name=\"armor_class/armor_rating/defense/defense_rating/etc\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"clothing_type\">\r\n  <inherit name=\"equipment_type\" />\r\n  <attr name=\"quality\" type=\"int\">0</attr>\r\n</type>\r\n\r\n<type name=\"bladed_type\">\r\n  <inherit name=\"weapon_type\" />\r\n  // swords (most of them), axes, daggers, knives, shield, etc\r\n  <attr name=\"damage_modifier_string_attribute\" type=\"string\">armored</attr>\r\n  <attr name=\"damage_modifier_integer_attribute\" type=\"int\">-50</attr> // actually, we need to work with decimals (Double Atributes), as this is to be 'half damage' (bladed is weak vs armored)\r\n</type>\r\n\r\n<type name=\"blunted_type\">\r\n  <inherit name=\"weapon_type\" />\r\n  // maces, hammers, clubs, whips, scepters, staffs, spears (the staff part), rods, wands, shield, etc\r\n</type>\r\n\r\n<type name=\"pointed_type\">\r\n  <inherit name=\"weapon_type\" />\r\n  // projectiles: bows, crossbows, guns/firearms (ignoring bluntness of musket ball, as the speed still makes it very piercing), Throwing (most), spear (point end), etc\r\n</type>\r\n\r\n<type name=\"two_handed_type\">\r\n  <attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\">left_hand; right_hand</attr>\r\n</type>\r\n\r\n<type name=\"one_handed_type\">\r\n  // more complex coding/scripting is needed to handle being able to do: 'left_hand' or 'right_hand', slots\r\n</type>\r\n\r\n<type name=\"right_handed_type\">\r\n  <attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\">right_hand</attr>\r\n</type>\r\n\r\n<type name=\"left_handed_type\">\r\n  <attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\">left_hand</attr>\r\n</type>\r\n\r\n<type name=\"sword_type\">\r\n  <inherit name=\"bladed_type\" />\r\n</type>\r\n\r\n<type name=\"axe_type\">\r\n  <inherit name=\"bladed_type\" />\r\n  <attr name=\"damage_modifier_string_attribute\" type=\"string\">demonic</attr> // if you want multiple damage modifiers, than make this be a Stringlist Attribute\r\n  <attr name=\"damage_modifier_integer_attribute\" type=\"int\">200</attr> // actually we can combine these two damage modifiers (string and int) by using a Dictionary Attribute...\r\n</type>\r\n\r\n// -----------------------\r\n\r\nI think you probably get the idea... a lot above is very incomplete without finishing the showing of the layers and layers of Object Types.... as I'm still game-designing this type of stuff myself for my rpg I'm... slowly working on.... lol\r\n```\r\n\r\n----------------\r\n\r\nask me if you got any questions or need help with anything",
      "EditableFormat": "markdown",
      "HTML": "<p>for an example of a more complex (layered) system of Object Types:</p>\n<p>just some ideas for you (using a bunch of different games' mechanics/features/concepts, lol)</p>\n<pre><code>&lt;type name=\"item_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"event_item_type\"&gt;\n  &lt;inherit name=\"item_type\" /&gt;\n  // this would be your non-interactive (non-usable) 'items', really more of like achievements/trophies/progress: event/quest/key items\n&lt;/type&gt;\n\n&lt;type name=\"normal_item_type\"&gt;\n  &lt;inherit name=\"item_type\" /&gt;\n  // these are your 'normal' (interactive/usable) items\n  &lt;attr name=\"quantity\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"weight/volume\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"consumable_item_type\"&gt;\n  &lt;inherit name=\"normal_item_type\" /&gt;\n  // can be used anywhere\n  // using the built-in 'use' stuff works fine here\n&lt;/type&gt;\n\n&lt;type name=\"battle_item_type\"&gt;\n  &lt;inherit name=\"normal_item_type\" /&gt;\n  // these items can be used in battle: they cast a spell and may or may not use up the item\n  // using the built-in 'use' stuff works fine here too\n&lt;/type&gt;\n\n&lt;type name=\"world_item_type\"&gt;\n  &lt;inherit name=\"normal_item_type\" /&gt;\n  // these can only be used on the world map area: such as items that 'warp to towns', 'sleeping tent for recovering hp/mp', 'transportation calling/summoning items', etc etc etc\n  // using the built-in 'use' stuff works fine here too\n&lt;/type&gt;\n\n&lt;type name=\"equipment_type\"&gt;\n  &lt;inherit name=\"normal_item_type\" /&gt;\n  &lt;attr name=\"equipable\" type=\"boolean\"&gt;true&lt;/attr&gt;\n  &lt;attr name=\"unequipable\" type=\"boolean\"&gt;true&lt;/attr&gt;\n  &lt;attr name=\"equip\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"unequip\" type=\"script\"&gt;\n  &lt;/attr&gt;\n  &lt;attr name=\"slot_layer_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\"&gt;unknown&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"cursed_type\"&gt;\n  &lt;attr name=\"unequipable\" type=\"boolean\"&gt;false&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"weapon_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n  &lt;attr name=\"damage\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"reach\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"speed\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"damage_modifier_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt; // if you want multiple damage modifiers, than make this be a Stringlist Attribute\n  &lt;attr name=\"damage_modifier_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt; // actually we can combine these two damage modifiers (string and int) by using a Dictionary Attribute...\n&lt;/type&gt;\n\n&lt;type name=\"armor_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n  &lt;attr name=\"armor_class/armor_rating/defense/defense_rating/etc\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"clothing_type\"&gt;\n  &lt;inherit name=\"equipment_type\" /&gt;\n  &lt;attr name=\"quality\" type=\"int\"&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"bladed_type\"&gt;\n  &lt;inherit name=\"weapon_type\" /&gt;\n  // swords (most of them), axes, daggers, knives, shield, etc\n  &lt;attr name=\"damage_modifier_string_attribute\" type=\"string\"&gt;armored&lt;/attr&gt;\n  &lt;attr name=\"damage_modifier_integer_attribute\" type=\"int\"&gt;-50&lt;/attr&gt; // actually, we need to work with decimals (Double Atributes), as this is to be 'half damage' (bladed is weak vs armored)\n&lt;/type&gt;\n\n&lt;type name=\"blunted_type\"&gt;\n  &lt;inherit name=\"weapon_type\" /&gt;\n  // maces, hammers, clubs, whips, scepters, staffs, spears (the staff part), rods, wands, shield, etc\n&lt;/type&gt;\n\n&lt;type name=\"pointed_type\"&gt;\n  &lt;inherit name=\"weapon_type\" /&gt;\n  // projectiles: bows, crossbows, guns/firearms (ignoring bluntness of musket ball, as the speed still makes it very piercing), Throwing (most), spear (point end), etc\n&lt;/type&gt;\n\n&lt;type name=\"two_handed_type\"&gt;\n  &lt;attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\"&gt;left_hand; right_hand&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"one_handed_type\"&gt;\n  // more complex coding/scripting is needed to handle being able to do: 'left_hand' or 'right_hand', slots\n&lt;/type&gt;\n\n&lt;type name=\"right_handed_type\"&gt;\n  &lt;attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\"&gt;right_hand&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"left_handed_type\"&gt;\n  &lt;attr name=\"slot_stringlist_attribute\" type=\"simplestringlist\"&gt;left_hand&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"sword_type\"&gt;\n  &lt;inherit name=\"bladed_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"axe_type\"&gt;\n  &lt;inherit name=\"bladed_type\" /&gt;\n  &lt;attr name=\"damage_modifier_string_attribute\" type=\"string\"&gt;demonic&lt;/attr&gt; // if you want multiple damage modifiers, than make this be a Stringlist Attribute\n  &lt;attr name=\"damage_modifier_integer_attribute\" type=\"int\"&gt;200&lt;/attr&gt; // actually we can combine these two damage modifiers (string and int) by using a Dictionary Attribute...\n&lt;/type&gt;\n\n// -----------------------\n\nI think you probably get the idea... a lot above is very incomplete without finishing the showing of the layers and layers of Object Types.... as I'm still game-designing this type of stuff myself for my rpg I'm... slowly working on.... lol\n</code></pre>\n<hr>\n<p>ask me if you got any questions or need help with anything</p>\n\n",
      "PostDate": "2017-07-17T05:53:19.0955873Z",
      "LastEditDate": "2017-07-17T06:02:20.6438575Z",
      "link": null
    }
  ]
}
