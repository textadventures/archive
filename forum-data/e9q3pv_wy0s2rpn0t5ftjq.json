{
  "Topic": {
    "TopicId": "e9q3pv_wy0s2rpn0t5ftjq",
    "ForumId": "10",
    "Title": "Verbs vs Commands",
    "LastUpdated": "2017-08-06T19:08:48.1673638Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "98014303-d181-43eb-ab35-204016d1bf05",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/4DfRYkpb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When making an object's verb (let's use \"Eat\" for an example), you select the verb tab on the object (let's use \"Toast\" for an example and add the verb \"Eat\" to the list. Then make sure the verb is displayed in the \"Display Verbs\" and/ or \"Inventory Verbs\". \r\n\r\nThis same verb's script is called if the player types in \"eat toast\" instead of clicking on the verb in the drop down box or panel tab.\r\n\r\nThe question I have is:\r\n1.  How do I make a verb that is the go to/default verb for an item that will be called if I only want to add \"Eat\" to an object's verb list and it will be called without writing in or copy and pasting a script for it each time? I see gray verbs like eat or attack in objects(which are probably inherited in some way). If that's the case, is that an option?\r\n     \r\nRight now I am calling a different function in each object's verb, which saves a little time, but would rather make my own default verb sort that out just by typing in the verb into the object's verb list.\r\n\r\nThe game default verb eat doesn't have a script option, just a template. I don't do templates yet.  \r\n\r\n2.  If a command can/should be used, how can I make the default verb \"Eat\" point to it?\r\n3.  If a default verb can be made, can I make a (game.attribute) script and have the default verb run that attribute's script.\r\n\r\nSomething tells me I'm trying to reinvent the wheel, but as I learn more the lines between behaviors tend to blur. If that makes sense.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>When making an object's verb (let's use \"Eat\" for an example), you select the verb tab on the object (let's use \"Toast\" for an example and add the verb \"Eat\" to the list. Then make sure the verb is displayed in the \"Display Verbs\" and/ or \"Inventory Verbs\".</p>\n<p>This same verb's script is called if the player types in \"eat toast\" instead of clicking on the verb in the drop down box or panel tab.</p>\n<p>The question I have is:</p>\n<ol>\n<li>How do I make a verb that is the go to/default verb for an item that will be called if I only want to add \"Eat\" to an object's verb list and it will be called without writing in or copy and pasting a script for it each time? I see gray verbs like eat or attack in objects(which are probably inherited in some way). If that's the case, is that an option?</li>\n</ol>\n<p>Right now I am calling a different function in each object's verb, which saves a little time, but would rather make my own default verb sort that out just by typing in the verb into the object's verb list.</p>\n<p>The game default verb eat doesn't have a script option, just a template. I don't do templates yet.</p>\n<ol start=\"2\">\n<li>If a command can/should be used, how can I make the default verb \"Eat\" point to it?</li>\n<li>If a default verb can be made, can I make a (game.attribute) script and have the default verb run that attribute's script.</li>\n</ol>\n<p>Something tells me I'm trying to reinvent the wheel, but as I learn more the lines between behaviors tend to blur. If that makes sense.</p>\n\n",
      "PostDate": "2017-08-06T19:08:48.1673638Z",
      "LastEditDate": "2017-08-06T19:14:15.5904231Z",
      "link": null
    },
    {
      "PostId": "459067db-93c6-4ffb-952d-50aee853109c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not quite clear what you're asking for, and also I don't understand Verbs and Commands well enough (Verbs actually are/use Commands \"under the hood\"), and thus it's probably better to let someone who does, help you with it.\r\n\r\n-------\r\n\r\nthough I'll throw some of this out there for you (as I'm not sure what you're asking for exactly), which might help you:\r\n\r\n1. if you want to use the same Verb (NAME) and SCRIPTING on multiple Objects, an example:\r\n\r\n```\r\n<object name=\"object_1\">\r\n  <inherit name=\"my_verb_type\" />\r\n</object>\r\n\r\n<object name=\"object_2\">\r\n  <inherit name=\"my_verb_type\" />\r\n</object>\r\n\r\n<type name=\"my_verb_type\">\r\n  <attr name=\"my_verb\" type=\"script\">\r\n    msg (my_verb)\r\n  </attr>\r\n</type>\r\n\r\n// by doing this, it does the handling of the 'displayverbs/inventoryverbs' for you (if you need to do whatever / manually handle it, then don't use this '<verb>' method. If you add the verb to the displayverbs and put in the '<verb>', you'll have two identical instances:buttons/hyperlinks of the verb, lol):\r\n\r\n<verb>\r\n  <property>my_verb</property>\r\n  <pattern>my_verb</pattern>\r\n  <defaultexpression>You can't do what!</defaultepression>\r\n</verb>\r\n```\r\n\r\n2. if you want to use a the same Verb (NAME) but use different scriptings, an example:\r\n\r\n(I'm just using Functions, but you can also use Object's Script Attribute with Delegates too)\r\n\r\n<object name=\"object_1\">\r\n  <attr name=\"my_verb\" type=\"script\">\r\n    my_function_1\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"object_2\">\r\n  <attr name=\"my_verb\" type=\"script\">\r\n    my_function_2\r\n  </attr>\r\n</object>\r\n\r\n<function name=\"my_function_1\">\r\n  msg (\"blah_1\")\r\n</function>\r\n\r\n<function name=\"my_function_2\">\r\n  msg (\"blah_2\")\r\n</function>\r\n\r\n<verb>\r\n  <property>my_verb</property>\r\n  <pattern>my_verb</pattern>\r\n  <defaultexpression>You can't do what!</defaultepression>\r\n</verb>\r\n```\r\n\r\n3. if you just want to have multiple command-inputs for a single action:\r\n\r\nin the GUI/Editor, for your desired Verb, as a Command or as a Verb, I believe both have a 'pattern' box and/or a 'alt' box, which you can put in multiple command-inputs for it, for examples:\r\n\r\n'fight' Command's Pattern box: fight #object_parameter#; attack #object_parameter#; ETC ETC ETC; fight; attack; combat; engage; battle; hit\r\n\r\n'fight' Verb's Pattern box: fight; attack; combat; engage; battle; hit\r\n// or:\r\n'fight' Verb's 'alt' (alternative names) box: fight; attack; combat; engage; battle; hit",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not quite clear what you're asking for, and also I don't understand Verbs and Commands well enough (Verbs actually are/use Commands \"under the hood\"), and thus it's probably better to let someone who does, help you with it.</p>\n<hr>\n<p>though I'll throw some of this out there for you (as I'm not sure what you're asking for exactly), which might help you:</p>\n<ol>\n<li>if you want to use the same Verb (NAME) and SCRIPTING on multiple Objects, an example:</li>\n</ol>\n<pre><code>&lt;object name=\"object_1\"&gt;\n  &lt;inherit name=\"my_verb_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"object_2\"&gt;\n  &lt;inherit name=\"my_verb_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"my_verb_type\"&gt;\n  &lt;attr name=\"my_verb\" type=\"script\"&gt;\n    msg (my_verb)\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n// by doing this, it does the handling of the 'displayverbs/inventoryverbs' for you (if you need to do whatever / manually handle it, then don't use this '&lt;verb&gt;' method. If you add the verb to the displayverbs and put in the '&lt;verb&gt;', you'll have two identical instances:buttons/hyperlinks of the verb, lol):\n\n&lt;verb&gt;\n  &lt;property&gt;my_verb&lt;/property&gt;\n  &lt;pattern&gt;my_verb&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't do what!&lt;/defaultepression&gt;\n&lt;/verb&gt;\n</code></pre>\n<ol start=\"2\">\n<li>if you want to use a the same Verb (NAME) but use different scriptings, an example:</li>\n</ol>\n<p>(I'm just using Functions, but you can also use Object's Script Attribute with Delegates too)</p>\n\n\n\n\n\n```\n<ol start=\"3\">\n<li>if you just want to have multiple command-inputs for a single action:</li>\n</ol>\n<p>in the GUI/Editor, for your desired Verb, as a Command or as a Verb, I believe both have a 'pattern' box and/or a 'alt' box, which you can put in multiple command-inputs for it, for examples:</p>\n<p>'fight' Command's Pattern box: fight #object_parameter#; attack #object_parameter#; ETC ETC ETC; fight; attack; combat; engage; battle; hit</p>\n<p>'fight' Verb's Pattern box: fight; attack; combat; engage; battle; hit<br>\n// or:<br>\n'fight' Verb's 'alt' (alternative names) box: fight; attack; combat; engage; battle; hit</p>\n\n",
      "PostDate": "2017-08-07T04:34:33.1799386Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af87e29b-58ce-4deb-8ce5-561aaa149294",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello,\r\n\r\nI just made a new command with the pattern ```eat```, and I wrote a little script.\r\n\r\nUpon entering EAT, the player will eat the toast if the toast is carried, no matter what.\r\n\r\nBeyond that, if the player enters EAT while carrying more than one edible item (and none of them are toast), a menu will be displayed to choose what to eat.\r\n\r\nAlso, if the player is only carrying one edible thing, said thing will automatically be eaten.\r\n\r\nNOTE: I added the 'eat' message to each item. Otherwise, it would simply say: \"You eat it.\"\r\n\r\n\r\n---\r\n**New Command**\r\n**Command name:** ```eat_alt```\r\n**Command pattern:**\r\n```eat```\r\n\r\n**Script:**\r\n```\r\nthings_to_eat = NewObjectList()\r\nforeach (o, GetAllChildObjects(player)) {\r\n  if (o.feature_edible) {\r\n    if (HasAttribute(o, \"eat\")) {\r\n      list add (things_to_eat, o)\r\n    }\r\n  }\r\n}\r\nif ((ListCount(things_to_eat)) = 1) {\r\n  foreach (o, things_to_eat) {\r\n    do (o, \"eat\")\r\n  }\r\n}\r\nelse if ((ListCount(things_to_eat)) > 1) {\r\n  ate = false\r\n  foreach (o, things_to_eat) {\r\n    if (o.name = \"piece of toast\") {\r\n      do (piece of toast, \"eat\")\r\n      ate = true\r\n    }\r\n  }\r\n  if (not ate) {\r\n    ShowMenu (\"What would you like to eat?\", things_to_eat, true) {\r\n      result = GetObject(result)\r\n      do (result, \"eat\")\r\n    }\r\n  }\r\n}\r\nelse {\r\n  msg (\"You are carrying nothing edible.\")\r\n}\r\n```\r\n\r\n\r\n---\r\nPlayable example game:\r\nhttp://textadventures.co.uk/games/view/68lcojsxqk2dlheb1llyyq/toast\r\n\r\n---\r\nExample game - complete code:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <dynamictemplate name=\"Eaten\">\"You eat the \" +  object.name  + \".\"</dynamictemplate>\r\n  <game name=\"toast\">\r\n    <gameid>dcd39f0f-0d08-4b9a-b669-86202ea406a0</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"piece of toast\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <feature_edible />\r\n      <take />\r\n      <eatmsg>You eat the toast.</eatmsg>\r\n    </object>\r\n    <object name=\"apple\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <feature_edible />\r\n      <take />\r\n      <eatmsg>You eat the apple.</eatmsg>\r\n    </object>\r\n    <object name=\"orange\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <feature_edible />\r\n      <take />\r\n      <eatmsg>You eat the orange.</eatmsg>\r\n    </object>\r\n    <object name=\"candy bar\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"edible\" />\r\n      <feature_edible />\r\n      <take />\r\n      <eatmsg>You eat the candy bar.</eatmsg>\r\n    </object>\r\n  </object>\r\n  <command name=\"eat_alt\">\r\n    <pattern>eat</pattern>\r\n    <script><![CDATA[\r\n      things_to_eat = NewObjectList()\r\n      foreach (o, GetAllChildObjects(player)) {\r\n        if (o.feature_edible) {\r\n          if (HasAttribute(o, \"eat\")) {\r\n            list add (things_to_eat, o)\r\n          }\r\n        }\r\n      }\r\n      if ((ListCount(things_to_eat)) = 1) {\r\n        foreach (o, things_to_eat) {\r\n          do (o, \"eat\")\r\n        }\r\n      }\r\n      else if ((ListCount(things_to_eat)) > 1) {\r\n        ate = false\r\n        foreach (o, things_to_eat) {\r\n          if (o.name = \"piece of toast\") {\r\n            do (piece of toast, \"eat\")\r\n            ate = true\r\n          }\r\n        }\r\n        if (not ate) {\r\n          ShowMenu (\"What would you like to eat?\", things_to_eat, true) {\r\n            result = GetObject(result)\r\n            do (result, \"eat\")\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You are carrying nothing edible.\")\r\n      }\r\n    ]]></script>\r\n  </command>\r\n</asl>\r\n```\r\n\r\n---\r\n**TRANSCRIPT:**\r\n\r\nYou are in a room.\r\nYou can see a piece of toast, an apple, an orange and a candy bar.\r\n\r\n\\> eat\r\nYou are carrying nothing edible.\r\n\r\n\\> get all\r\npiece of toast: You pick it up.\r\napple: You pick it up.\r\norange: You pick it up.\r\ncandy bar: You pick it up.\r\n\r\n\\> eat\r\nYou eat the toast.\r\n\r\n\\> eat\r\nWhat would you like to eat?\r\n[1: apple](#)\r\n[2: orange](#)\r\n[3: candy bar](#)\r\nYou eat the candy bar.\r\n\r\n\\> eat\r\nWhat would you like to eat?\r\n[1: apple](#)\r\n[2: orange](#)\r\nYou eat the apple.\r\n\r\n\\> eat\r\nYou eat the orange.\r\n\r\n---\r\n**Templates:**\r\n\r\nThese are beyond me, too, but I clicked **Filter --> Show Library Elements**, and searched for 'eat':\r\n\r\nThis brought up many choices, but ```Eaten``` was the Dynamic Template which held the default ```eatmsg```.\r\n\r\nI clicked 'Copy', and changed the line to this: ```\"You eat the \" +  object.name  + \".\"```.\r\n\r\nNow, if the command is to eat the orange, even if you didn't enter an 'eat' message, it will print, \"You eat the orange.\"\r\n\r\nI switched to Code View for a peek, and it added the Dynamic Template bit I'd altered just before ```<game name=\"toast\">```, and here is that line of code: ``` <dynamictemplate name=\"Eaten\">\"You eat the \" +  object.name  + \".\"</dynamictemplate>```\r\n\r\n---\r\nNOTE:\r\n\r\nI tried to make an EAT verb first, but I can't figure out how to do anything with a verb that doesn't apply to an object. (Meaning: I tried to just right-click and make a new, stand-alone, one-word verb: EAT but the parser didn't recognize the command, no matter what I tried.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello,</p>\n<p>I just made a new command with the pattern <code>eat</code>, and I wrote a little script.</p>\n<p>Upon entering EAT, the player will eat the toast if the toast is carried, no matter what.</p>\n<p>Beyond that, if the player enters EAT while carrying more than one edible item (and none of them are toast), a menu will be displayed to choose what to eat.</p>\n<p>Also, if the player is only carrying one edible thing, said thing will automatically be eaten.</p>\n<p>NOTE: I added the 'eat' message to each item. Otherwise, it would simply say: \"You eat it.\"</p>\n<hr>\n<p><strong>New Command</strong><br>\n<strong>Command name:</strong> <code>eat_alt</code><br>\n<strong>Command pattern:</strong><br>\n<code>eat</code></p>\n<p><strong>Script:</strong></p>\n<pre><code>things_to_eat = NewObjectList()\nforeach (o, GetAllChildObjects(player)) {\n  if (o.feature_edible) {\n    if (HasAttribute(o, \"eat\")) {\n      list add (things_to_eat, o)\n    }\n  }\n}\nif ((ListCount(things_to_eat)) = 1) {\n  foreach (o, things_to_eat) {\n    do (o, \"eat\")\n  }\n}\nelse if ((ListCount(things_to_eat)) &gt; 1) {\n  ate = false\n  foreach (o, things_to_eat) {\n    if (o.name = \"piece of toast\") {\n      do (piece of toast, \"eat\")\n      ate = true\n    }\n  }\n  if (not ate) {\n    ShowMenu (\"What would you like to eat?\", things_to_eat, true) {\n      result = GetObject(result)\n      do (result, \"eat\")\n    }\n  }\n}\nelse {\n  msg (\"You are carrying nothing edible.\")\n}\n</code></pre>\n<hr>\n<p>Playable example game:<br>\nhttp://textadventures.co.uk/games/view/68lcojsxqk2dlheb1llyyq/toast</p>\n<hr>\n<p>Example game - complete code:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;dynamictemplate name=\"Eaten\"&gt;\"You eat the \" +  object.name  + \".\"&lt;/dynamictemplate&gt;\n  &lt;game name=\"toast\"&gt;\n    &lt;gameid&gt;dcd39f0f-0d08-4b9a-b669-86202ea406a0&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"piece of toast\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;feature_edible /&gt;\n      &lt;take /&gt;\n      &lt;eatmsg&gt;You eat the toast.&lt;/eatmsg&gt;\n    &lt;/object&gt;\n    &lt;object name=\"apple\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;feature_edible /&gt;\n      &lt;take /&gt;\n      &lt;eatmsg&gt;You eat the apple.&lt;/eatmsg&gt;\n    &lt;/object&gt;\n    &lt;object name=\"orange\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;feature_edible /&gt;\n      &lt;take /&gt;\n      &lt;eatmsg&gt;You eat the orange.&lt;/eatmsg&gt;\n    &lt;/object&gt;\n    &lt;object name=\"candy bar\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"edible\" /&gt;\n      &lt;feature_edible /&gt;\n      &lt;take /&gt;\n      &lt;eatmsg&gt;You eat the candy bar.&lt;/eatmsg&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"eat_alt\"&gt;\n    &lt;pattern&gt;eat&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      things_to_eat = NewObjectList()\n      foreach (o, GetAllChildObjects(player)) {\n        if (o.feature_edible) {\n          if (HasAttribute(o, \"eat\")) {\n            list add (things_to_eat, o)\n          }\n        }\n      }\n      if ((ListCount(things_to_eat)) = 1) {\n        foreach (o, things_to_eat) {\n          do (o, \"eat\")\n        }\n      }\n      else if ((ListCount(things_to_eat)) &gt; 1) {\n        ate = false\n        foreach (o, things_to_eat) {\n          if (o.name = \"piece of toast\") {\n            do (piece of toast, \"eat\")\n            ate = true\n          }\n        }\n        if (not ate) {\n          ShowMenu (\"What would you like to eat?\", things_to_eat, true) {\n            result = GetObject(result)\n            do (result, \"eat\")\n          }\n        }\n      }\n      else {\n        msg (\"You are carrying nothing edible.\")\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><strong>TRANSCRIPT:</strong></p>\n<p>You are in a room.<br>\nYou can see a piece of toast, an apple, an orange and a candy bar.</p>\n<p>&gt; eat<br>\nYou are carrying nothing edible.</p>\n<p>&gt; get all<br>\npiece of toast: You pick it up.<br>\napple: You pick it up.<br>\norange: You pick it up.<br>\ncandy bar: You pick it up.</p>\n<p>&gt; eat<br>\nYou eat the toast.</p>\n<p>&gt; eat<br>\nWhat would you like to eat?<br>\n<a href=\"#\">1: apple</a><br>\n<a href=\"#\">2: orange</a><br>\n<a href=\"#\">3: candy bar</a><br>\nYou eat the candy bar.</p>\n<p>&gt; eat<br>\nWhat would you like to eat?<br>\n<a href=\"#\">1: apple</a><br>\n<a href=\"#\">2: orange</a><br>\nYou eat the apple.</p>\n<p>&gt; eat<br>\nYou eat the orange.</p>\n<hr>\n<p><strong>Templates:</strong></p>\n<p>These are beyond me, too, but I clicked <strong>Filter --&gt; Show Library Elements</strong>, and searched for 'eat':</p>\n<p>This brought up many choices, but <code>Eaten</code> was the Dynamic Template which held the default <code>eatmsg</code>.</p>\n<p>I clicked 'Copy', and changed the line to this: <code>\"You eat the \" + object.name + \".\"</code>.</p>\n<p>Now, if the command is to eat the orange, even if you didn't enter an 'eat' message, it will print, \"You eat the orange.\"</p>\n<p>I switched to Code View for a peek, and it added the Dynamic Template bit I'd altered just before <code>&lt;game name=\"toast\"&gt;</code>, and here is that line of code: <code>&lt;dynamictemplate name=\"Eaten\"&gt;\"You eat the \" + object.name + \".\"&lt;/dynamictemplate&gt;</code></p>\n<hr>\n<p>NOTE:</p>\n<p>I tried to make an EAT verb first, but I can't figure out how to do anything with a verb that doesn't apply to an object. (Meaning: I tried to just right-click and make a new, stand-alone, one-word verb: EAT but the parser didn't recognize the command, no matter what I tried.)</p>\n\n",
      "PostDate": "2017-08-07T07:00:17.9590089Z",
      "LastEditDate": "2017-08-07T07:09:53.2580941Z",
      "link": null
    },
    {
      "PostId": "59163390-185b-48de-9c55-f61e048df71d",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/4DfRYkpb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I really had a day yesterday. I am starting to get so much better at debugging code. Granted my codes are simple but I do copy/paste some serious code from others and have to figure how to tailor them to my game. I got into the CombatTabs files and changed a few things to get a \"Look and a Eat\" verb to describe an object dead or alive as a script and not a string. The \"look verb was over ridden by the lookwhendead string.attribute, so I removed the Look (when dead) text box. Then added my own lookwhendead attribute and had to find the line that called it and changed it to a script call. That was big ta-doings for this old man.\r\n\r\nI was successful in getting both verbs to work between the library and Quest and found it really gives you a sense of accomplishment and pride. I usually just beg for scripts online. Ha! Now I find I want to do it myself. And try not to ask for help but as a fellow at work said last night, \"Scripting is like take a hard test every time you do it.\"",
      "EditableFormat": "markdown",
      "HTML": "<p>I really had a day yesterday. I am starting to get so much better at debugging code. Granted my codes are simple but I do copy/paste some serious code from others and have to figure how to tailor them to my game. I got into the CombatTabs files and changed a few things to get a \"Look and a Eat\" verb to describe an object dead or alive as a script and not a string. The \"look verb was over ridden by the lookwhendead string.attribute, so I removed the Look (when dead) text box. Then added my own lookwhendead attribute and had to find the line that called it and changed it to a script call. That was big ta-doings for this old man.</p>\n<p>I was successful in getting both verbs to work between the library and Quest and found it really gives you a sense of accomplishment and pride. I usually just beg for scripts online. Ha! Now I find I want to do it myself. And try not to ask for help but as a fellow at work said last night, \"Scripting is like take a hard test every time you do it.\"</p>\n\n",
      "PostDate": "2017-08-07T11:30:22.0817975Z",
      "LastEditDate": "2017-08-07T11:38:12.4543658Z",
      "link": null
    }
  ]
}
