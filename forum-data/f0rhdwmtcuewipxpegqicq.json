{
  "Topic": {
    "TopicId": "f0rhdwmtcuewipxpegqicq",
    "ForumId": "10",
    "Title": "adding an adjective to an object after an interation",
    "LastUpdated": "2020-04-01T03:49:16.5910816Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f6341973-ceb5-431b-86b1-02139a1e5e56",
      "UserId": 472985,
      "Username": "lixy",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d15672980df7d55962b73e6fe1229a52?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, completely new to this kind of thing. How might I change an adjective on an object after an interaction? For instance, I'd like the player's clothes to become dirty after digging in the dirt. Is something like that possible?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, completely new to this kind of thing. How might I change an adjective on an object after an interaction? For instance, I'd like the player's clothes to become dirty after digging in the dirt. Is something like that possible?</p>\n\n",
      "PostDate": "2020-04-01T03:49:16.5910816Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "603a39db-d1be-4482-8dc3-6986bf749534",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Depends on what your end goal is.  I would create two objects.  A shirt being worn by the player and a dirty shirt stored in an “item warehouse” (a room ONLY used to store items for moving them around).  When the player digs, just move object shirt to the warehouse and move dirty shirt to the player.  The player of your game won’t even know there are actually two shirts.  It will only appear there is one.  \r\n\r\nThe other option is to change the object description with a flag.  In the look at part of the object, insert an IF script.  If shirt has flag “dirty”, then print message “The shirt is dirty.”  Else, print message “The shirt is clean.”  When the player digs, run a script to set object flag and name the flag “dirty”.  If the player can clean the shirt, unset the flag dirty.\r\n\r\nAsk if you have questions.",
      "EditableFormat": "markdown",
      "HTML": "<p>Depends on what your end goal is.  I would create two objects.  A shirt being worn by the player and a dirty shirt stored in an “item warehouse” (a room ONLY used to store items for moving them around).  When the player digs, just move object shirt to the warehouse and move dirty shirt to the player.  The player of your game won’t even know there are actually two shirts.  It will only appear there is one.</p>\n<p>The other option is to change the object description with a flag.  In the look at part of the object, insert an IF script.  If shirt has flag “dirty”, then print message “The shirt is dirty.”  Else, print message “The shirt is clean.”  When the player digs, run a script to set object flag and name the flag “dirty”.  If the player can clean the shirt, unset the flag dirty.</p>\n<p>Ask if you have questions.</p>\n\n",
      "PostDate": "2020-04-01T06:12:10.8693278Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a854bddf-99c1-41a7-8a18-16b3deb41c81",
      "UserId": 472985,
      "Username": "lixy",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d15672980df7d55962b73e6fe1229a52?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you!</p>\n\n",
      "PostDate": "2020-04-01T07:57:44.9740696Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f8d9baf-b0ab-4275-bde5-8bcd2d644476",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd be more likely to give the object a flag `dirty` and a script attribute `changeddirty` which looks like this:\r\n```\r\nif (this.dirty) {\r\n  if (not HasString (this, \"alias\")) {\r\n    this.alias = this.name\r\n  }\r\n  foreach (attr, Split (\"alias;listalias;original_alias;original_listalias\")) {\r\n    if (HasString (this, attr)) {\r\n      set (this, attr, \"dirty \" + GetString (this, attr))\r\n    }\r\n  }\r\n}\r\nelse {\r\n  foreach (attr, Split (\"alias;listalias;original_alias;original_listalias\")) {\r\n    if (HasString (this, attr)) {\r\n      set (this, attr, Replace (GetString (this, attr), \"dirty \", \"\"))\r\n    }\r\n  }\r\n}\r\n```\r\n(The 'else' part is only necessary if you're going to have the option to wash the shirt again)\r\n(This code is slightly more complex than it would be for a regular object, because I wanted it to work around the code that adds \"(worn)\" to the end of an object's alias, so the shirt doesn't become clean again when the player takes it off)\r\n\r\nThis code will cause the object's alias to change any time its `dirty` flag is set or unset. You could also use something like `{if dirty:It's covered in mud.}` in the object's \"look at\" description.\r\n\r\nI think you might be able to do the same using the \"multistate\" feature of the clothing library, which allows you to add more descriptors using the same system as the 'worn' modifier, but I'm not entirely sure how that works.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd be more likely to give the object a flag <code>dirty</code> and a script attribute <code>changeddirty</code> which looks like this:</p>\n<pre><code>if (this.dirty) {\n  if (not HasString (this, \"alias\")) {\n    this.alias = this.name\n  }\n  foreach (attr, Split (\"alias;listalias;original_alias;original_listalias\")) {\n    if (HasString (this, attr)) {\n      set (this, attr, \"dirty \" + GetString (this, attr))\n    }\n  }\n}\nelse {\n  foreach (attr, Split (\"alias;listalias;original_alias;original_listalias\")) {\n    if (HasString (this, attr)) {\n      set (this, attr, Replace (GetString (this, attr), \"dirty \", \"\"))\n    }\n  }\n}\n</code></pre>\n<p>(The 'else' part is only necessary if you're going to have the option to wash the shirt again)<br>\n(This code is slightly more complex than it would be for a regular object, because I wanted it to work around the code that adds \"(worn)\" to the end of an object's alias, so the shirt doesn't become clean again when the player takes it off)</p>\n<p>This code will cause the object's alias to change any time its <code>dirty</code> flag is set or unset. You could also use something like <code>{if dirty:It's covered in mud.}</code> in the object's \"look at\" description.</p>\n<p>I think you might be able to do the same using the \"multistate\" feature of the clothing library, which allows you to add more descriptors using the same system as the 'worn' modifier, but I'm not entirely sure how that works.</p>\n\n",
      "PostDate": "2020-04-01T10:39:38.2873449Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
