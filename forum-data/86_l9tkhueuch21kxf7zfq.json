{
  "Topic": {
    "TopicId": "86_l9tkhueuch21kxf7zfq",
    "ForumId": "10",
    "Title": "LCase and If",
    "LastUpdated": "2017-07-24T21:54:44.6185076Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2f7f6509-b6e3-425d-a447-a189f06eeeb9",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heya all,\r\n\r\nThanks for all the help recently with my questions. Really I'm running out of functions I'm having difficulty with and more needing to just write, write, and write.\r\n\r\nThen I add more utility and need help uwu.\r\n\r\nRight! Here's the little pest that's screwing me up.\r\n\r\n```{if LCase player.ears=pointed: pointy}```\r\n\r\nYeah, with this I'm just getting the stringy thing appear right in my text.\r\n\r\nI also tried:\r\n\r\n```{if player.ears=LCase (\"pointed\"):pointy``` which got me just as much nowhere.\r\n\r\nNow, either I find a way to sort out how to LCase my ifs and buts when I'm doing them in text, or\r\n\r\nIs there a way to make it so when I use `get input` and then set the result as an attribute that I can **force** that attribute to become lowercase? \r\n\r\nIt's a new thing for me, so I'm not totally sure what I'm doing.\r\n\r\nThanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Heya all,</p>\n<p>Thanks for all the help recently with my questions. Really I'm running out of functions I'm having difficulty with and more needing to just write, write, and write.</p>\n<p>Then I add more utility and need help uwu.</p>\n<p>Right! Here's the little pest that's screwing me up.</p>\n<p><code>{if LCase player.ears=pointed: pointy}</code></p>\n<p>Yeah, with this I'm just getting the stringy thing appear right in my text.</p>\n<p>I also tried:</p>\n<p><code>{if player.ears=LCase (\"pointed\"):pointy</code> which got me just as much nowhere.</p>\n<p>Now, either I find a way to sort out how to LCase my ifs and buts when I'm doing them in text, or</p>\n<p>Is there a way to make it so when I use <code>get input</code> and then set the result as an attribute that I can <strong>force</strong> that attribute to become lowercase?</p>\n<p>It's a new thing for me, so I'm not totally sure what I'm doing.</p>\n<p>Thanks!</p>\n\n",
      "PostDate": "2017-07-24T21:54:44.6185076Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6132d355-103b-45dd-b16d-4e8869079a37",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The curly braces method is sensitive about some things.\r\n\r\nTake it down to lower case when you get the input. (I saved it as a Boolean attribute in this example.)\r\n\r\nIf you check out line 10, you'll note that ```player.pointy``` is created here, and it is ```true```.\r\n\r\nSo, now you can refer to it throughout the game as ```if (player.pointy)```. \r\n\r\nThat's a 'short-cut', which pretty much means ```if (player.pointy = true)```.\r\n\r\n\r\n```\r\nmsg (\"Enter Pointy.\")\r\nget input {\r\n  result = LCase(result)\r\n  if (result = \"pointy\") {\r\n    msg (\"Yay, you entered \\\"\" + result + \"\\\".\")\r\n    player.pointy = true\r\n  }\r\n  else {\r\n    msg (\"Boo! You entered \\\"\" + result + \"\\\".\")\r\n  }\r\n}\r\n```\r\n\r\nNow, the curly braces inside of your text processor input field will play nice:\r\n```\r\n{if player.pointy: pointed.}\r\n\r\n```\r\n\r\nNOTE: When using the curly braces inside of the 'text' field (like in this example), DO NOT use the parentheses (in this instance) :\r\n\r\n**Doesn't work with the parentheses inside of the curly braces when entered into a text field:**\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28563707-616ca65e-70ec-11e7-9054-861b8d223e7a.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28565753-b41054b8-70f2-11e7-97e5-730cf279374e.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28563728-7214a8bc-70ec-11e7-96f6-7a614f369e77.png)\r\n\r\n\r\n**Works without the parentheses:**\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28563815-b682b66a-70ec-11e7-8ac2-3337fe9357b4.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28565753-b41054b8-70f2-11e7-97e5-730cf279374e.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/27799208/28563775-9303fab4-70ec-11e7-876a-b1db69958a9f.png)\r\n\r\n\r\n```{if (player.pointy): pointed}``` will yield a ```FALSE``` result, whereas ```{if player.pointy: pointed}``` will actually check to see if ```player.pointy``` is true or false. (Quest doesn't know what ```(player.pointy)``` means inside the curly braces with the parentheses. (This, I assume, has to do with the way Quest utilizes expansion, but I'm not opening that particular can of worms!))\r\n\r\n---\r\n**UPDATE:** I had it where it set ```player.pointy``` to ```True``` either way, but it is fixed now.\r\n\r\n---\r\nHere's the entire sample game:\r\n\r\n<details><summary>CLICK HERE TO VIEW THE CODE</summary>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"pointed ears\">\r\n    <gameid>449f72a5-219a-4229-b247-496b3d652b1b</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <start type=\"script\">\r\n      msg (\"Enter Pointy.\")\r\n      get input {\r\n        result = (LCase(result))\r\n        if (result = \"pointy\") {\r\n          msg (\"Yay, you entered \\\"\" + result + \"\\\".\")\r\n        }\r\n        else {\r\n          msg (\"Boo! You entered \\\"\" + result + \"\\\".\")\r\n        }\r\n        player.pointy = true\r\n      }\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <description><![CDATA[{if player.pointy: pointy}<br/>]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n<sub style=\"color:white\">this text is added to meet the character requirement when editing a post</sub>\r\n</details>\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The curly braces method is sensitive about some things.</p>\n<p>Take it down to lower case when you get the input. (I saved it as a Boolean attribute in this example.)</p>\n<p>If you check out line 10, you'll note that <code>player.pointy</code> is created here, and it is <code>true</code>.</p>\n<p>So, now you can refer to it throughout the game as <code>if (player.pointy)</code>.</p>\n<p>That's a 'short-cut', which pretty much means <code>if (player.pointy = true)</code>.</p>\n<pre><code>msg (\"Enter Pointy.\")\nget input {\n  result = LCase(result)\n  if (result = \"pointy\") {\n    msg (\"Yay, you entered \\\"\" + result + \"\\\".\")\n    player.pointy = true\n  }\n  else {\n    msg (\"Boo! You entered \\\"\" + result + \"\\\".\")\n  }\n}\n</code></pre>\n<p>Now, the curly braces inside of your text processor input field will play nice:</p>\n<pre><code>{if player.pointy: pointed.}\n\n</code></pre>\n<p>NOTE: When using the curly braces inside of the 'text' field (like in this example), DO NOT use the parentheses (in this instance) :</p>\n<p><strong>Doesn't work with the parentheses inside of the curly braces when entered into a text field:</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28563707-616ca65e-70ec-11e7-9054-861b8d223e7a.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28565753-b41054b8-70f2-11e7-97e5-730cf279374e.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28563728-7214a8bc-70ec-11e7-96f6-7a614f369e77.png\" alt=\"image\"></p>\n<p><strong>Works without the parentheses:</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28563815-b682b66a-70ec-11e7-8ac2-3337fe9357b4.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28565753-b41054b8-70f2-11e7-97e5-730cf279374e.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/27799208/28563775-9303fab4-70ec-11e7-876a-b1db69958a9f.png\" alt=\"image\"></p>\n<p><code>{if (player.pointy): pointed}</code> will yield a <code>FALSE</code> result, whereas <code>{if player.pointy: pointed}</code> will actually check to see if <code>player.pointy</code> is true or false. (Quest doesn't know what <code>(player.pointy)</code> means inside the curly braces with the parentheses. (This, I assume, has to do with the way Quest utilizes expansion, but I'm not opening that particular can of worms!))</p>\n<hr>\n<p><strong>UPDATE:</strong> I had it where it set <code>player.pointy</code> to <code>True</code> either way, but it is fixed now.</p>\n<hr>\n<p>Here's the entire sample game:</p>\n<details><summary>CLICK HERE TO VIEW THE CODE</summary>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"pointed ears\"&gt;\n    &lt;gameid&gt;449f72a5-219a-4229-b247-496b3d652b1b&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;start type=\"script\"&gt;\n      msg (\"Enter Pointy.\")\n      get input {\n        result = (LCase(result))\n        if (result = \"pointy\") {\n          msg (\"Yay, you entered \\\"\" + result + \"\\\".\")\n        }\n        else {\n          msg (\"Boo! You entered \\\"\" + result + \"\\\".\")\n        }\n        player.pointy = true\n      }\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;description&gt;&lt;![CDATA[{if player.pointy: pointy}&lt;br/&gt;]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<p><sub style=\"color: white\">this text is added to meet the character requirement when editing a post</sub></p>\n</details>\n\n",
      "PostDate": "2017-07-24T23:53:06.040695Z",
      "LastEditDate": "2017-07-25T09:40:23.9575186Z",
      "link": null
    },
    {
      "PostId": "4a7231f7-895f-4309-9902-2295f07c16b5",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "RH's first bit of code is great, the second...\r\n\r\nYou need both curved brackets, `(` and `)` and curly, `{` and`}`. The general format is the script command, followed by the parameters that it will use to decide what to do in curved brackets, followed by the code block that it will subsequently run in curly brackets:\r\n\r\n```\r\nscript command ( control parameters) {\r\n  code block\r\n}\r\n```\r\nSo in this case:\r\n```\r\nif (player.pointy) {\r\n  msg(\"The ears are pointy\r\n}\r\n```\r\n\r\nYou also need curly brackets with `LCase`, so that could mean two lots:\r\n\r\n```\r\nif (LCase(player.ears) = \"pointed\") {\r\n  msg(\"The ears are pointy\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>RH's first bit of code is great, the second...</p>\n<p>You need both curved brackets, <code>(</code> and <code>)</code> and curly, <code>{</code> and<code>}</code>. The general format is the script command, followed by the parameters that it will use to decide what to do in curved brackets, followed by the code block that it will subsequently run in curly brackets:</p>\n<pre><code>script command ( control parameters) {\n  code block\n}\n</code></pre>\n<p>So in this case:</p>\n<pre><code>if (player.pointy) {\n  msg(\"The ears are pointy\n}\n</code></pre>\n<p>You also need curly brackets with <code>LCase</code>, so that could mean two lots:</p>\n<pre><code>if (LCase(player.ears) = \"pointed\") {\n  msg(\"The ears are pointy\n}\n</code></pre>\n\n",
      "PostDate": "2017-07-25T07:07:54.9588733Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "156e81dc-f462-4d0f-b865-957b2b0886e7",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep.\r\n\r\n>The general format is the script command, followed by the parameters that it will use to decide what to do in curved brackets, followed by the code block that it will subsequently run in curly brackets\r\n\r\nThis is how I do it as well. (Pixie taught me last week!)\r\n\r\nUsing the curly braces ```{ }``` shortcuts in the GUI's text processor input field is ... not very dependable, to say the least. I think Pixie said it couldn't handle things that are too complicated... may have been HK or someone else... my old mind is failing me...\r\n\r\nBut yes, I use Pixie's format. It's easier to read and easier to find flaws.\r\n\r\nFor instance, I think I always have to use ```LCase``` up front to create a variable because I was trying to do this:\r\n\r\n```\r\nif (LCase(player.ears)) = \"pointed\") {\r\n  msg (\"The ears are pointy.\")\r\n}\r\n```\r\n\r\nSee how I have my apostrophes/curved brackets: ```(LCase(player.ears)) = \"pointed\")```?\r\n\r\nWell, my extra ```)``` behind ```player.ears``` is apparently what's been defeating me this whole time!\r\n\r\nSee, I just put this line directly after getting the input:\r\n\r\n```\r\nplayer.ears = LCase(result)\r\n\r\n```\r\nSo, from there on out, I didn't have to struggle with syntax when using ```LCase```. \r\n\r\nThat, my friends, is what they call: a dirty hack.\r\n\r\nNOTE: One thing I do to test when things like this aren't working is add the ```msg``` command just after getting the input.\r\n\r\nExample:\r\n\r\n```\r\nmsg (\"Type something and press ENTER! HURRY!\")\r\nget input {\r\n  msg (result) //<-- THIS LINE FOR TESTING!\r\n  player.ears = (LCase(result)) //THIS LINE SAVES THE ATTRIBUTE\r\n  msg (player.ears) //<-- THIS LINE FOR TESTING!\r\n}\r\n```\r\n\r\nWhen those two lines print out, that's when I usually start saying what some people may refer to as 'bad words', but, then I dive into the documents at <a style=\"color:white\"  href=\"http://docs.textadventures.co.uk/quest/ \"http://docs.textadventures.co.uk/quest/\">http://docs.textadventures.co.uk/quest/ \"http://docs.textadventures.co.uk/quest/</a>. If that doesn't help, I come right here. Eventually, someone straightens me out, and I'm off to create the next bug in the game!",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep.</p>\n<blockquote>\n<p>The general format is the script command, followed by the parameters that it will use to decide what to do in curved brackets, followed by the code block that it will subsequently run in curly brackets</p>\n</blockquote>\n<p>This is how I do it as well. (Pixie taught me last week!)</p>\n<p>Using the curly braces <code>{ }</code> shortcuts in the GUI's text processor input field is ... not very dependable, to say the least. I think Pixie said it couldn't handle things that are too complicated... may have been HK or someone else... my old mind is failing me...</p>\n<p>But yes, I use Pixie's format. It's easier to read and easier to find flaws.</p>\n<p>For instance, I think I always have to use <code>LCase</code> up front to create a variable because I was trying to do this:</p>\n<pre><code>if (LCase(player.ears)) = \"pointed\") {\n  msg (\"The ears are pointy.\")\n}\n</code></pre>\n<p>See how I have my apostrophes/curved brackets: <code>(LCase(player.ears)) = \"pointed\")</code>?</p>\n<p>Well, my extra <code>)</code> behind <code>player.ears</code> is apparently what's been defeating me this whole time!</p>\n<p>See, I just put this line directly after getting the input:</p>\n<pre><code>player.ears = LCase(result)\n\n</code></pre>\n<p>So, from there on out, I didn't have to struggle with syntax when using <code>LCase</code>.</p>\n<p>That, my friends, is what they call: a dirty hack.</p>\n<p>NOTE: One thing I do to test when things like this aren't working is add the <code>msg</code> command just after getting the input.</p>\n<p>Example:</p>\n<pre><code>msg (\"Type something and press ENTER! HURRY!\")\nget input {\n  msg (result) //&lt;-- THIS LINE FOR TESTING!\n  player.ears = (LCase(result)) //THIS LINE SAVES THE ATTRIBUTE\n  msg (player.ears) //&lt;-- THIS LINE FOR TESTING!\n}\n</code></pre>\n<p>When those two lines print out, that's when I usually start saying what some people may refer to as 'bad words', but, then I dive into the documents at &lt;a style=\"color:white\"  href=\"http://docs.textadventures.co.uk/quest/ \"http://docs.textadventures.co.uk/quest/\"&gt;http://docs.textadventures.co.uk/quest/ \"http://docs.textadventures.co.uk/quest/. If that doesn't help, I come right here. Eventually, someone straightens me out, and I'm off to create the next bug in the game!</p>\n\n",
      "PostDate": "2017-07-25T09:31:55.5464277Z",
      "LastEditDate": "2017-07-25T10:07:51.42604Z",
      "link": null
    },
    {
      "PostId": "425e1e38-0404-463f-8565-a8209a75604c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I misunderstood. RH has pointed out you are using the text process. Which I should have realised...\r\n\r\nThe `if` directive will not work with functions, so basically that will not work.\r\n\r\nYou can use `either` (as of 5.7), which treats the condition as standard code (so strings need quotes, which can be an issue if you do this in code, rather than a text box).\r\n```\r\nYou have{either LCase(player.ears)=\"pointed\": pointy} ears.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I misunderstood. RH has pointed out you are using the text process. Which I should have realised...</p>\n<p>The <code>if</code> directive will not work with functions, so basically that will not work.</p>\n<p>You can use <code>either</code> (as of 5.7), which treats the condition as standard code (so strings need quotes, which can be an issue if you do this in code, rather than a text box).</p>\n<pre><code>You have{either LCase(player.ears)=\"pointed\": pointy} ears.\n</code></pre>\n\n",
      "PostDate": "2017-07-25T09:37:21.2442443Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c02b6ea2-3985-4bfd-890c-68c55d0b71fe",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">You can use either (as of 5.7), which treats the condition as standard code (so strings need quotes, which can be an issue if you do this in code, rather than a text box).\r\n\r\n>```\r\n>You have{either LCase(player.ears)=\"pointed\": pointy} ears.\r\n >```\r\n\r\nShut the FRONT DOOR! Can I do that with ```msg  (\"You have {either LCase(player.ears)=\\\"pointed\\\":pointy} ears.\")```?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>You can use either (as of 5.7), which treats the condition as standard code (so strings need quotes, which can be an issue if you do this in code, rather than a text box).</p>\n</blockquote>\n<blockquote>\n<pre><code>You have{either LCase(player.ears)=\"pointed\": pointy} ears.\n</code></pre>\n</blockquote>\n<p>Shut the FRONT DOOR! Can I do that with <code>msg (\"You have {either LCase(player.ears)=\\\"pointed\\\":pointy} ears.\")</code>?</p>\n\n",
      "PostDate": "2017-07-25T09:47:53.9866555Z",
      "LastEditDate": "2017-07-25T10:08:30.8442541Z",
      "link": null
    },
    {
      "PostId": "101d9f59-140d-4574-af97-d1c132fd07aa",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes.</p>\n\n",
      "PostDate": "2017-07-25T10:04:56.9211313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a9bbcf0e-3b40-41be-a644-390e51f30b57",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for  getting edited post updated)\r\n(filler for  getting edited post updated again)\r\n(filler for  getting edited post updated again2)\r\n\r\n-------------\r\n\r\nas has been stated, the text processor commands, are the easiest and quickest way to do basic text/string scripting, but they can't handle the full usage of scripting. So, you need to use the normal scripting for doing this stuff (you can then use the text processor commands once you got it into something that they can use from the normal scripting, as Pixie and Richard have shown above).\r\n\r\n---------------\r\n\r\nsince, they covered most of this stuff already, let me cover the normal scripting, so you can see an example of how to use it, as I don't think that's been covered by Richard and Pixie in their posts above.\r\n\r\n---------------\r\n\r\n(String/text) Concatenation (literally putting strings together):\r\n\r\nmath addition:\r\n\r\n5 + 5 = 10\r\n55 + 55 = 110\r\n\r\nvs\r\n\r\nString/text Concatenation:\r\n\r\n\"5\" + \"5\" = \"55\"\r\n\"55\" + \"55\" = \"5555\"\r\n\"mama\" + \"mia\" = \"mamamia\"\r\n\"mama\" + \" \" + \"mia\" = \"mama mia\"\r\n\"mama\" + \"5\" = \"mama5\"\r\n\"mama\" + \" \" + \"5\" + \" \" + \"mia\" = \"mama 5 mia\"\r\n\r\n--------\r\n\r\nusing concatenation in normal scripting, an example:\r\n\r\n```\r\nmsg (\"Name?\")\r\nget input {\r\n  if (LCase (result) = \"hk\") {\r\n    string_variable = UCase (result) + \" is an awesome person!\"\r\n  } else {\r\n    string_variable = LCase (result) + \" is an alright person.\"\r\n  }\r\n  string_variable  = string_variable + \" (This is a simple example of concatenation)\"\r\n  msg (string_variable)\r\n}\r\n\r\n// output:\r\n\r\n// if input = \"hk\", \"hK\", \"Hk\", or \"HK\": HK is an awesome person. (This is a simple example of concatenation)\r\n// if not input = \"hk\", \"hK\", \"Hk\", or \"HK\": [input] is an alright person. (This is a simple example of concatenation)\r\n```\r\n\r\nwe can make this as deep layered as want:\r\n\r\n```\r\nmsg (\"Name?\")\r\nget input {\r\n  string_variable = result\r\n  msg (\"Sex?\")\r\n  get input {\r\n    string_variable = string_variable + \" is a \" + result\r\n    msg (\"Age?\")\r\n    get input {\r\n      string_variable = string_variable + \" \" + result + \" year old \"\r\n      msg (\"Race?\")\r\n      get input {\r\n        string_variable = string_variable + result\r\n        msg (\"Class?\")\r\n        get input {\r\n          string_variable = string_variable + \" \" + result + \".\"\r\n          msg (string_variable)\r\n\r\n          // for showing use of this normal scripting and concatenation, with the text process commands:\r\n\r\n          game.my_string = string_variable\r\n\r\n          msg (\"Welcome to my game, I hope you enjoy it! Here's your character that you created: {game.my_string} Now, let's begin the game!\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// (Name: \"HK\")\r\n// (Sex: \"male\")\r\n// (Age: \"18\") // I wish I was 18 still\r\n// (Race: \"human\")\r\n// (Class: \"warrior\")\r\n\r\n// output for these inputs above: HK is a male 18 year old human warrior.\r\n\r\n// output for the last part showing normal scripting and concatenation, used with the text processor commands:\r\n\r\nWelcome to my game, I hope you enjoy it! Here's your character that you created: HK is a male 18 year old human warrior. Now, let's begin the game!\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for  getting edited post updated)<br>\n(filler for  getting edited post updated again)<br>\n(filler for  getting edited post updated again2)</p>\n<hr>\n<p>as has been stated, the text processor commands, are the easiest and quickest way to do basic text/string scripting, but they can't handle the full usage of scripting. So, you need to use the normal scripting for doing this stuff (you can then use the text processor commands once you got it into something that they can use from the normal scripting, as Pixie and Richard have shown above).</p>\n<hr>\n<p>since, they covered most of this stuff already, let me cover the normal scripting, so you can see an example of how to use it, as I don't think that's been covered by Richard and Pixie in their posts above.</p>\n<hr>\n<p>(String/text) Concatenation (literally putting strings together):</p>\n<p>math addition:</p>\n<p>5 + 5 = 10<br>\n55 + 55 = 110</p>\n<p>vs</p>\n<p>String/text Concatenation:</p>\n<p>\"5\" + \"5\" = \"55\"<br>\n\"55\" + \"55\" = \"5555\"<br>\n\"mama\" + \"mia\" = \"mamamia\"<br>\n\"mama\" + \" \" + \"mia\" = \"mama mia\"<br>\n\"mama\" + \"5\" = \"mama5\"<br>\n\"mama\" + \" \" + \"5\" + \" \" + \"mia\" = \"mama 5 mia\"</p>\n<hr>\n<p>using concatenation in normal scripting, an example:</p>\n<pre><code>msg (\"Name?\")\nget input {\n  if (LCase (result) = \"hk\") {\n    string_variable = UCase (result) + \" is an awesome person!\"\n  } else {\n    string_variable = LCase (result) + \" is an alright person.\"\n  }\n  string_variable  = string_variable + \" (This is a simple example of concatenation)\"\n  msg (string_variable)\n}\n\n// output:\n\n// if input = \"hk\", \"hK\", \"Hk\", or \"HK\": HK is an awesome person. (This is a simple example of concatenation)\n// if not input = \"hk\", \"hK\", \"Hk\", or \"HK\": [input] is an alright person. (This is a simple example of concatenation)\n</code></pre>\n<p>we can make this as deep layered as want:</p>\n<pre><code>msg (\"Name?\")\nget input {\n  string_variable = result\n  msg (\"Sex?\")\n  get input {\n    string_variable = string_variable + \" is a \" + result\n    msg (\"Age?\")\n    get input {\n      string_variable = string_variable + \" \" + result + \" year old \"\n      msg (\"Race?\")\n      get input {\n        string_variable = string_variable + result\n        msg (\"Class?\")\n        get input {\n          string_variable = string_variable + \" \" + result + \".\"\n          msg (string_variable)\n\n          // for showing use of this normal scripting and concatenation, with the text process commands:\n\n          game.my_string = string_variable\n\n          msg (\"Welcome to my game, I hope you enjoy it! Here's your character that you created: {game.my_string} Now, let's begin the game!\")\n        }\n      }\n    }\n  }\n}\n\n// (Name: \"HK\")\n// (Sex: \"male\")\n// (Age: \"18\") // I wish I was 18 still\n// (Race: \"human\")\n// (Class: \"warrior\")\n\n// output for these inputs above: HK is a male 18 year old human warrior.\n\n// output for the last part showing normal scripting and concatenation, used with the text processor commands:\n\nWelcome to my game, I hope you enjoy it! Here's your character that you created: HK is a male 18 year old human warrior. Now, let's begin the game!\n</code></pre>\n\n",
      "PostDate": "2017-07-25T10:39:58.8085974Z",
      "LastEditDate": "2017-07-25T10:56:40.4909188Z",
      "link": null
    },
    {
      "PostId": "b8beb8e0-e9fb-4db0-b112-f5759f89a7f2",
      "UserId": 160782,
      "Username": "JenniferKline",
      "AvatarUrl": "https://secure.gravatar.com/avatar/577a4cda5f04217fc7c986ba5b2da370?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Whelp,  this was above and beyond what I expected. Needless to say that I'm pretty much solid on the issue now. Time to post another question!",
      "EditableFormat": "markdown",
      "HTML": "<p>Whelp,  this was above and beyond what I expected. Needless to say that I'm pretty much solid on the issue now. Time to post another question!</p>\n\n",
      "PostDate": "2017-07-26T20:50:07.6342018Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
