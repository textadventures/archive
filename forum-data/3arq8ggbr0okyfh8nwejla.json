{
  "Topic": {
    "TopicId": "3arq8ggbr0okyfh8nwejla",
    "ForumId": "10",
    "Title": "Capturing output",
    "LastUpdated": "2018-02-19T16:20:24.121364Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f9df0c0b-7ac5-40c3-889a-91735a87cf62",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can think of a couple of cases where you might want to run a script you can't easily edit (one of the core functions; or part of a library); and you want to stop it from sending text to the player. Maybe you want to execute a series of commands, but change the output from those commands in some way.\r\n\r\nHere's an idea (off the top of my head, maybe I'll test/improve it later.\r\n\r\n```\r\n<function name=\"StartOutputSpy\">\r\n  JS.eval(\"if(!realAddText){realAddText=addText;}addText=function(t){ASLEvent('os_capture',t);};\")\r\n  if (not HasAttribute(game, \"outputspy_layers\")) {\r\n    game.outputspy_layers = NewList()\r\n  }\r\n  game.outputspy_current = NewStringList()\r\n  list add (game.outputspy_layers, game.outputspy_current)\r\n</function>\r\n\r\n<function name=\"EndOutputSpy\" parameters=\"callback\">\r\n  game.outputspy_callback = callback\r\n  JS.eval(\"addText=realAddText;ASLEvent('os_terminate')\")\r\n</function>\r\n\r\n<function name=\"os_capture\" parameters=\"text\">\r\n  list add (game.outputspy_current, text)\r\n</function>\r\n\r\n<function \"os_terminate\">\r\n  d = game.outputspy_current\r\n  f = game.outputspy_callback\r\n  p = NewDictionary()\r\n  dictionary add (p, \"text\", d)\r\n  invoke (f, p)\r\n  game.outputspy_callback = null\r\n  if (ListCount(game.outputspy_layers) = 1) {\r\n    game.outputspy_current = null\r\n    game.outputspy_layers = null\r\n  }\r\n  else {\r\n    list remove (game.outputspy_layers, d)\r\n    game.outputspy_current = ListItem(game.outputspy_layers, ListCount(game.outputspy_layers)-1)\r\n  }\r\n</function>\r\n```\r\n\r\nThen you can use it like…\r\n```\r\nredactor => {\r\n  foreach (line, text) {\r\n    outputline = \"\"\r\n    foreach (word, Split(line, \" \")) {\r\n      if (GetObject(word) = null) {\r\n        outputline = outputline + \" \" + word\r\n      }\r\n      else {\r\n        outputline = outputline + \" \" + \"[REDACTED]\"\r\n      }\r\n    }\r\n    msg (outputline)\r\n  }\r\n}\r\nStartOutputSpy()\r\nShowRoomDescription()\r\nEndOutputSpy(redactor)\r\n```\r\n... in this example, it shows the room description with all object names changed to \"[REDACTED]\".\r\nYes, it's a silly example. But it might work even if the room's description is a script, because it's overriding addText.\r\n\r\nI'm sure there are more sensible uses for this. And the little obsessive bit of my brain made outputspy_layers because I want it to work correctly even if calls to these functions are nested.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can think of a couple of cases where you might want to run a script you can't easily edit (one of the core functions; or part of a library); and you want to stop it from sending text to the player. Maybe you want to execute a series of commands, but change the output from those commands in some way.</p>\n<p>Here's an idea (off the top of my head, maybe I'll test/improve it later.</p>\n<pre><code>&lt;function name=\"StartOutputSpy\"&gt;\n  JS.eval(\"if(!realAddText){realAddText=addText;}addText=function(t){ASLEvent('os_capture',t);};\")\n  if (not HasAttribute(game, \"outputspy_layers\")) {\n    game.outputspy_layers = NewList()\n  }\n  game.outputspy_current = NewStringList()\n  list add (game.outputspy_layers, game.outputspy_current)\n&lt;/function&gt;\n\n&lt;function name=\"EndOutputSpy\" parameters=\"callback\"&gt;\n  game.outputspy_callback = callback\n  JS.eval(\"addText=realAddText;ASLEvent('os_terminate')\")\n&lt;/function&gt;\n\n&lt;function name=\"os_capture\" parameters=\"text\"&gt;\n  list add (game.outputspy_current, text)\n&lt;/function&gt;\n\n&lt;function \"os_terminate\"&gt;\n  d = game.outputspy_current\n  f = game.outputspy_callback\n  p = NewDictionary()\n  dictionary add (p, \"text\", d)\n  invoke (f, p)\n  game.outputspy_callback = null\n  if (ListCount(game.outputspy_layers) = 1) {\n    game.outputspy_current = null\n    game.outputspy_layers = null\n  }\n  else {\n    list remove (game.outputspy_layers, d)\n    game.outputspy_current = ListItem(game.outputspy_layers, ListCount(game.outputspy_layers)-1)\n  }\n&lt;/function&gt;\n</code></pre>\n<p>Then you can use it like…</p>\n<pre><code>redactor =&gt; {\n  foreach (line, text) {\n    outputline = \"\"\n    foreach (word, Split(line, \" \")) {\n      if (GetObject(word) = null) {\n        outputline = outputline + \" \" + word\n      }\n      else {\n        outputline = outputline + \" \" + \"[REDACTED]\"\n      }\n    }\n    msg (outputline)\n  }\n}\nStartOutputSpy()\nShowRoomDescription()\nEndOutputSpy(redactor)\n</code></pre>\n<p>... in this example, it shows the room description with all object names changed to \"[REDACTED]\".<br>\nYes, it's a silly example. But it might work even if the room's description is a script, because it's overriding addText.</p>\n<p>I'm sure there are more sensible uses for this. And the little obsessive bit of my brain made outputspy_layers because I want it to work correctly even if calls to these functions are nested.</p>\n\n",
      "PostDate": "2018-02-19T16:20:24.121364Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cb235394-b9b0-4cab-a8af-4b5b8ed918a0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This looks pretty cool!",
      "EditableFormat": "markdown",
      "HTML": "<p>This looks pretty cool!</p>\n\n",
      "PostDate": "2018-02-19T16:48:02.6234401Z",
      "LastEditDate": "2018-02-19T17:48:06.3253544Z",
      "link": null
    }
  ]
}
