{
  "Topic": {
    "TopicId": "7ykvyg82ge_1l64r2b_wtw",
    "ForumId": "10",
    "Title": "StringDictionaryItem Error compiling",
    "LastUpdated": "2019-04-21T10:16:56.240418Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a092ab15-2456-43ba-8d6c-4cfa0b5fa634",
      "UserId": 415008,
      "Username": "Millie Jonasen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f549777f47c8c66519c7ca856108a213?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nError running script: Error compiling expression\r\n'this.StringDictionaryItem(Descriptions, 1)': Unknown object or variable 'Descriptions'\r\n```\r\n\r\nI have Descriptions set as a String Dictionary in the objects Attributes, I see now after typing this that it wants a Variable but I don't know where those are or what the difference is between an Attribute and a Variable.\r\n\r\nplease help.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>Error running script: Error compiling expression\n'this.StringDictionaryItem(Descriptions, 1)': Unknown object or variable 'Descriptions'\n</code></pre>\n<p>I have Descriptions set as a String Dictionary in the objects Attributes, I see now after typing this that it wants a Variable but I don't know where those are or what the difference is between an Attribute and a Variable.</p>\n<p>please help.</p>\n\n",
      "PostDate": "2019-04-21T10:16:56.240418Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "538dfad9-6bd8-49a2-bada-4f85408119b4",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/XIlYPQ9b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think it should be:\r\n```\r\nStringListItem(this.Descriptions, 1)\r\n```\r\nwhere ```this.Descriptions``` is a list attribute, not a dictionary attribute.  I don't think that you can reference a dictionary item by index, only a list item.  So you have to make ```Descriptions``` a list, not a dictionary.\r\n\r\n```this``` refers to the parent object of the ```Descriptions```attribute.  ```StringListItem``` is a function (you don't want to put ```this``` before it).\r\n\r\nAnd keep in mind that the first item in a list is at index 0, not at index 1 (which would be the second item).",
      "EditableFormat": "markdown",
      "HTML": "<p>I think it should be:</p>\n<pre><code>StringListItem(this.Descriptions, 1)\n</code></pre>\n<p>where <code>this.Descriptions</code> is a list attribute, not a dictionary attribute.  I don't think that you can reference a dictionary item by index, only a list item.  So you have to make <code>Descriptions</code> a list, not a dictionary.</p>\n<p><code>this</code> refers to the parent object of the <code>Descriptions</code>attribute.  <code>StringListItem</code> is a function (you don't want to put <code>this</code> before it).</p>\n<p>And keep in mind that the first item in a list is at index 0, not at index 1 (which would be the second item).</p>\n\n",
      "PostDate": "2019-04-21T11:01:18.1694287Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4cab99b7-edb4-42bf-b1f3-4ee16de6f941",
      "UserId": 415008,
      "Username": "Millie Jonasen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f549777f47c8c66519c7ca856108a213?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, thankyou. :)\r\nMay I ask why I should not use a Dictionary and what the difference is?",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, thankyou. :)<br>\nMay I ask why I should not use a Dictionary and what the difference is?</p>\n\n",
      "PostDate": "2019-04-21T11:14:18.056203Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a92e02b4-ffc7-424c-aeeb-39c59b3f3abd",
      "UserId": 415008,
      "Username": "Millie Jonasen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f549777f47c8c66519c7ca856108a213?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have it working with the List, so that's cool. But I would be better off with the Dictionary if there's any way I can use it.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have it working with the List, so that's cool. But I would be better off with the Dictionary if there's any way I can use it.</p>\n\n",
      "PostDate": "2019-04-21T11:19:28.7603369Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f9671f41-edc8-4bea-bf31-3a4e4183c40a",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "https://i.imgur.com/XIlYPQ9b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In general, a list is more flexible to use.  From reading the Quest documentation about functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/#dictionary\r\n\r\n...it sounds like dictionaries reference their items by string key, rather than by index.  You can still use a dictionary -- but you have to know the string key.  I don't know if that would be a problem for you.",
      "EditableFormat": "markdown",
      "HTML": "<p>In general, a list is more flexible to use.  From reading the Quest documentation about functions:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/#dictionary</p>\n<p>...it sounds like dictionaries reference their items by string key, rather than by index.  You can still use a dictionary -- but you have to know the string key.  I don't know if that would be a problem for you.</p>\n\n",
      "PostDate": "2019-04-21T11:53:31.1726604Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aabaa10b-5a01-4e55-b47d-4123ae41f44c",
      "UserId": 415008,
      "Username": "Millie Jonasen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f549777f47c8c66519c7ca856108a213?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You give each item a string key s you make the items and it shows you the string and the key you gave it. I was using numbers anyway so that doesn't really change, but it shows you the number for each string where the list does not. Neither method lets you edit the order of the list though, so that really sucks. you have to look at the Code view and edit it that way. For me that's risky, I could break something easily.",
      "EditableFormat": "markdown",
      "HTML": "<p>You give each item a string key s you make the items and it shows you the string and the key you gave it. I was using numbers anyway so that doesn't really change, but it shows you the number for each string where the list does not. Neither method lets you edit the order of the list though, so that really sucks. you have to look at the Code view and edit it that way. For me that's risky, I could break something easily.</p>\n\n",
      "PostDate": "2019-04-21T12:51:28.1638128Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1a8664ec-71af-464e-a9da-19ed10b58493",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nHave you tried this?\r\n\r\n\r\n```\r\nwhatever_goes_here = StringDictionaryItem(this.Descriptions, 1)\r\n```\r\n\r\n---\r\nDepending on what you have in your code, ```this``` may or may not work.\r\n\r\nIf you post some code, we can probably help you get the dictionary working.\r\n\r\n---\r\nIt is much easier to just use lists, though.  I agree with Dcoder (but don't tell him I said that).",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>Have you tried this?</p>\n<pre><code>whatever_goes_here = StringDictionaryItem(this.Descriptions, 1)\n</code></pre>\n<hr>\n<p>Depending on what you have in your code, <code>this</code> may or may not work.</p>\n<p>If you post some code, we can probably help you get the dictionary working.</p>\n<hr>\n<p>It is much easier to just use lists, though.  I agree with Dcoder (but don't tell him I said that).</p>\n\n",
      "PostDate": "2019-04-21T16:24:58.0487947Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d4bf5848-c559-444f-bc6e-33d262b14c9b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you use numbers as the keys, then the big difference between lists and dictionaries is that a list will automatically adjust the numbers when you remove an item; and will automatically work out the number to use when adding an item so you don't need to specify it.\r\n\r\nWhether it's best to use a list or a dictionary depends on what you're doing. If you want to put something in slot \"1\" and something else in slot \"5\" while leaving the ones in between blank, you want a dictionary. If you want to put something in the first available slot, a list is easier because you don't need to keep track of which numbers you used.\r\n\r\nUse whichever suits your situation better :)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you use numbers as the keys, then the big difference between lists and dictionaries is that a list will automatically adjust the numbers when you remove an item; and will automatically work out the number to use when adding an item so you don't need to specify it.</p>\n<p>Whether it's best to use a list or a dictionary depends on what you're doing. If you want to put something in slot \"1\" and something else in slot \"5\" while leaving the ones in between blank, you want a dictionary. If you want to put something in the first available slot, a list is easier because you don't need to keep track of which numbers you used.</p>\n<p>Use whichever suits your situation better :)</p>\n\n",
      "PostDate": "2019-04-21T18:11:26.6519059Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "01372d5d-9162-488d-af38-553db9fa787d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n------------\r\n\r\nLists/Arrays and Dictionaries are basically just input-output functions\r\n\r\n-------------\r\n\r\nfor a list's index numbers (might also work for dictionaries too if you use/assign/set numbers as int values for its inputs), they can be 'int' or 'string' as quest has built-in/automatic programming to handle/convert/parse between ints and strings, for you, so you don't need to do so (quest will convert an index number as an int value into its proper/required string value for you)\r\n\r\n--------------\r\n\r\nLists:\r\n\r\n1. String lists:\r\n\r\nitem:\r\n\r\ninput (\"key\"): index number string/int value (automatically done for you, first item is index number '0' --- takes awhile to get used to starting at '0' instead of '1', second item is index number '1', and so forth. The last item's index number is: ListCount (LIST) - 1)\r\n\r\noutput (\"value\"): string value\r\n\r\n2. Object Lists:\r\n\r\nitem:\r\n\r\ninput (\"key\"): index number string/int value (automatically done for you, first item is index number '0' --- takes awhile to get used to starting at '0' instead of '1', second item is index number '1', and so forth. The last item's index number is: ListCount (LIST) - 1)\r\n\r\noutput (\"value\"): object (reference/pointer) value\r\n\r\n-----------\r\n\r\nDictionaries:\r\n\r\n1. String Dictionary:\r\n\r\nitem:\r\n\r\ninput (\"key\"): string value\r\n\r\noutput (\"value\"): string value\r\n\r\n2. Object Dictionary:\r\n\r\nitem:\r\n\r\ninput (\"key\"): string value\r\n\r\noutput (\"value\"): object (reference/pointer) value\r\n\r\n3. Script Dictionary:\r\n\r\nitem:\r\n\r\ninput (\"key\"): string value\r\n\r\noutput (\"value\"): scripting/scripts (script value/s)\r\n\r\n-----------\r\n\r\nLists:\r\n\r\n1. String Lists:\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringlist_attribute = NewStringList ()\r\nlist add (example_object.example_stringlist_attribute, \"red\")\r\nlist add (example_object.example_stringlist_attribute, \"blue\")\r\nlist add (example_object.example_stringlist_attribute, \"yellow\")\r\n\r\n// item1:\r\n// input: \"0\"\r\n// output: \"red\"\r\n//\r\n// item2:\r\n// input: \"1\"\r\n// output: \"blue\"\r\n//\r\n// item3:\r\n// input: \"2\"\r\n// output: \"yellow\"\r\n//\r\n// item 4:\r\n// input: \"3\"\r\n// output: \"orange\"\r\n// ERROR! there is no 4th item!\r\n\r\n// generalized syntax concept:\r\n// OUTPUT: string = StringListItem (LIST, \"INPUT: index number\")\r\n\r\nstring_variable = StringListItem (example_object.example_stringlist_attribute, \"0\")\r\n// string_variable = \"red\"\r\n\r\nstring_variable = StringListItem (example_object.example_stringlist_attribute, \"1\")\r\n// string_variable = \"blue\"\r\n\r\nstring_variable = StringListItem (example_object.example_stringlist_attribute, \"2\")\r\n// string_variable = \"yellow\"\r\n\r\nstring_variable = StringListItem (example_object.example_stringlist_attribute, \"3\")\r\n// ERROR! there is no 4th item!\r\n\r\n2. Object Lists:\r\n\r\ncreate (\"example_object\")\r\n\r\ncreate (\"red_object\")\r\ncreate (\"blue_object\")\r\ncreate (\"yellow_object\")\r\n\r\nexample_object.example_objectlist_attribute = NewObjectList ()\r\nlist add (example_object.example_stringlist_attribute, red_object)\r\nlist add (example_object.example_stringlist_attribute, blue_object)\r\nlist add (example_object.example_stringlist_attribute, yellow_object)\r\n\r\n// item1:\r\n// input: \"0\"\r\n// output: red_object\r\n//\r\n// item2:\r\n// input: \"1\"\r\n// output: blue_object\r\n//\r\n// item3:\r\n// input: \"2\"\r\n// output: yellow_object\r\n//\r\n// item 4:\r\n// input: \"3\"\r\n// output: orange_object\r\n// ERROR! there is no 4th item!\r\n\r\n// generalized syntax concept:\r\n// OUTPUT: object (reference/pointer) = ObjectListItem (LIST, \"INPUT: index number\")\r\n\r\nobject_variable = ObjectListItem (example_object.example_stringlist_attribute, \"0\")\r\n// object_variable = red_object\r\n\r\nobject_variable = ObjectListItem (example_object.example_stringlist_attribute, \"1\")\r\n// object_variable = blue_object\r\n\r\nobject_variable = ObjectListItem (example_object.example_stringlist_attribute, \"2\")\r\n// object_variable = yellow_object\r\n\r\nobject_variable = ObjectListItem (example_object.example_stringlist_attribute, \"3\")\r\n// ERROR! there is no 4th item!\r\n\r\n--------\r\n\r\nDictionaries:\r\n\r\n1. String Dictionary:\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringdictionary_attribute = NewStringDictionary ()\r\ndictionary add (example_object.example_stringdictionary_attribute, \"princess\", \"the princess was kidnapped by the dragon\")\r\ndictionary add (example_object.example_stringdictionary_attribute, \"dragon\", \"the dragon can only be killed by the dragon slaying sword\")\r\ndictionary add (example_object.example_stringdictionary_attribute, \"sword\", \"the dragon slaying sword was stolen by an evil wizard\")\r\n\r\n// item1:\r\n// input: \"princess\"\r\n// output: \"the princess was kidnapped by the dragon\"\r\n//\r\n// item2:\r\n// input: \"dragon\"\r\n// output: \"the dragon can only be killed by the dragon slaying sword\"\r\n//\r\n// item3:\r\n// input: \"sword\"\r\n// output: \"the dragon slaying sword was stolen by an evil wizard\"\r\n//\r\n// item 4:\r\n// input: \"wizard\"\r\n// output: \"the evil wizard can be found in the dark lands\"\r\n// ERROR! there is no 4th item!\r\n\r\n// generalized syntax concept:\r\n// OUTPUT: string = StringDictionaryItem (DICTIONARY, \"INPUT: string value\")\r\n\r\nstring_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"princess\")\r\n// string_variable = \"the princess was kidnapped by the dragon\"\r\n\r\nstring_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"dragon\")\r\n// string_variable = \"the dragon can only be killed by the dragon slaying sword\"\r\n\r\nstring_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"sword\")\r\n// string_variable = \"the dragon slaying sword was stolen by an evil wizard\"\r\n\r\nstring_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"wizard\")\r\n// ERROR! there is no 4th item!\r\n\r\n--------\r\n\r\nRandomization, example:\r\n\r\n// GetRandomInt (MIN,MAX)\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringlist_attribute = NewStringList ()\r\nlist add (example_object.example_stringlist_attribute, \"red\")\r\nlist add (example_object.example_stringlist_attribute, \"blue\")\r\nlist add (example_object.example_stringlist_attribute, \"yellow\")\r\n\r\nrandom_string_variable = StringListItem (example_object.example_stringlist_attribute, GetRandomInt (0, ListCount (example_object.example_stringlist_attribute) - 1))\r\n\r\n// random_string_variable = [randomly selects only one of these: \"red\"/\"blue\"/\"yellow\"]\r\n\r\n--------\r\n\r\ncombining all the operations as seen above into a single line of code is a bit confusing (especially making sure you get the correct equal number of parenthesis on both sides and in the right places), so here it is broken down:\r\n\r\nitem_count_variable = ListCount (example_object.example_stringlist_attribute)\r\n// item_count_variable = 3\r\n\r\nindex_number_of_last_item_variable = item_count_variable - 1\r\n// index_number_of_last_item_variable = 2\r\n\r\nviable_random_index_number_selected_variable = GetRandomInt (0, index_number_of_last_item_variable)\r\n\r\nrandom_string_variable = StringListItem (example_object.example_stringlist_attribute, viable_random_index_number_selected_variable)\r\n// random_string_variable = [randomly selects only one of these: \"red\"/\"blue\"/\"yellow\"]\r\n\r\n----------\r\n\r\n\"Literally\" creating a String List from/with/as a String Dictionary:\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringdictionary_attribute = NewStringDictionary ()\r\ndictionary add (example_object.example_stringdictionary_attribute, \"0\", \"red\")\r\ndictionary add (example_object.example_stringdictionary_attribute, \"1\", \"blue\")\r\ndictionary add (example_object.example_stringdictionary_attribute, \"2\", \"yellow\")\r\n\r\n// the above is the \"exact same\" as below:\r\n\r\ncreate (\"example_object\")\r\n\r\nexample_object.example_stringlist_attribute = NewStringList ()\r\nlist add (example_object.example_stringlist_attribute, \"red\")\r\nlist add (example_object.example_stringlist_attribute, \"blue\")\r\nlist add (example_object.example_stringlist_attribute, \"yellow\")\r\n\r\n// as can be seen, a 'list' simply does the setting of the string inputs for you: the contigious index numbering (starting at \"0\" for the first item, and then for the next X items: \"1\", \"2\", \"3\", \"4, \"ETC\")\r\n\r\n// a 'list' is just a specialized/specific type of 'dictionary'",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>Lists/Arrays and Dictionaries are basically just input-output functions</p>\n<hr>\n<p>for a list's index numbers (might also work for dictionaries too if you use/assign/set numbers as int values for its inputs), they can be 'int' or 'string' as quest has built-in/automatic programming to handle/convert/parse between ints and strings, for you, so you don't need to do so (quest will convert an index number as an int value into its proper/required string value for you)</p>\n<hr>\n<p>Lists:</p>\n<ol>\n<li>String lists:</li>\n</ol>\n<p>item:</p>\n<p>input (\"key\"): index number string/int value (automatically done for you, first item is index number '0' --- takes awhile to get used to starting at '0' instead of '1', second item is index number '1', and so forth. The last item's index number is: ListCount (LIST) - 1)</p>\n<p>output (\"value\"): string value</p>\n<ol start=\"2\">\n<li>Object Lists:</li>\n</ol>\n<p>item:</p>\n<p>input (\"key\"): index number string/int value (automatically done for you, first item is index number '0' --- takes awhile to get used to starting at '0' instead of '1', second item is index number '1', and so forth. The last item's index number is: ListCount (LIST) - 1)</p>\n<p>output (\"value\"): object (reference/pointer) value</p>\n<hr>\n<p>Dictionaries:</p>\n<ol>\n<li>String Dictionary:</li>\n</ol>\n<p>item:</p>\n<p>input (\"key\"): string value</p>\n<p>output (\"value\"): string value</p>\n<ol start=\"2\">\n<li>Object Dictionary:</li>\n</ol>\n<p>item:</p>\n<p>input (\"key\"): string value</p>\n<p>output (\"value\"): object (reference/pointer) value</p>\n<ol start=\"3\">\n<li>Script Dictionary:</li>\n</ol>\n<p>item:</p>\n<p>input (\"key\"): string value</p>\n<p>output (\"value\"): scripting/scripts (script value/s)</p>\n<hr>\n<p>Lists:</p>\n<ol>\n<li>String Lists:</li>\n</ol>\n<p>create (\"example_object\")</p>\n<p>example_object.example_stringlist_attribute = NewStringList ()<br>\nlist add (example_object.example_stringlist_attribute, \"red\")<br>\nlist add (example_object.example_stringlist_attribute, \"blue\")<br>\nlist add (example_object.example_stringlist_attribute, \"yellow\")</p>\n<p>// item1:<br>\n// input: \"0\"<br>\n// output: \"red\"<br>\n//<br>\n// item2:<br>\n// input: \"1\"<br>\n// output: \"blue\"<br>\n//<br>\n// item3:<br>\n// input: \"2\"<br>\n// output: \"yellow\"<br>\n//<br>\n// item 4:<br>\n// input: \"3\"<br>\n// output: \"orange\"<br>\n// ERROR! there is no 4th item!</p>\n<p>// generalized syntax concept:<br>\n// OUTPUT: string = StringListItem (LIST, \"INPUT: index number\")</p>\n<p>string_variable = StringListItem (example_object.example_stringlist_attribute, \"0\")<br>\n// string_variable = \"red\"</p>\n<p>string_variable = StringListItem (example_object.example_stringlist_attribute, \"1\")<br>\n// string_variable = \"blue\"</p>\n<p>string_variable = StringListItem (example_object.example_stringlist_attribute, \"2\")<br>\n// string_variable = \"yellow\"</p>\n<p>string_variable = StringListItem (example_object.example_stringlist_attribute, \"3\")<br>\n// ERROR! there is no 4th item!</p>\n<ol start=\"2\">\n<li>Object Lists:</li>\n</ol>\n<p>create (\"example_object\")</p>\n<p>create (\"red_object\")<br>\ncreate (\"blue_object\")<br>\ncreate (\"yellow_object\")</p>\n<p>example_object.example_objectlist_attribute = NewObjectList ()<br>\nlist add (example_object.example_stringlist_attribute, red_object)<br>\nlist add (example_object.example_stringlist_attribute, blue_object)<br>\nlist add (example_object.example_stringlist_attribute, yellow_object)</p>\n<p>// item1:<br>\n// input: \"0\"<br>\n// output: red_object<br>\n//<br>\n// item2:<br>\n// input: \"1\"<br>\n// output: blue_object<br>\n//<br>\n// item3:<br>\n// input: \"2\"<br>\n// output: yellow_object<br>\n//<br>\n// item 4:<br>\n// input: \"3\"<br>\n// output: orange_object<br>\n// ERROR! there is no 4th item!</p>\n<p>// generalized syntax concept:<br>\n// OUTPUT: object (reference/pointer) = ObjectListItem (LIST, \"INPUT: index number\")</p>\n<p>object_variable = ObjectListItem (example_object.example_stringlist_attribute, \"0\")<br>\n// object_variable = red_object</p>\n<p>object_variable = ObjectListItem (example_object.example_stringlist_attribute, \"1\")<br>\n// object_variable = blue_object</p>\n<p>object_variable = ObjectListItem (example_object.example_stringlist_attribute, \"2\")<br>\n// object_variable = yellow_object</p>\n<p>object_variable = ObjectListItem (example_object.example_stringlist_attribute, \"3\")<br>\n// ERROR! there is no 4th item!</p>\n<hr>\n<p>Dictionaries:</p>\n<ol>\n<li>String Dictionary:</li>\n</ol>\n<p>create (\"example_object\")</p>\n<p>example_object.example_stringdictionary_attribute = NewStringDictionary ()<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"princess\", \"the princess was kidnapped by the dragon\")<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"dragon\", \"the dragon can only be killed by the dragon slaying sword\")<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"sword\", \"the dragon slaying sword was stolen by an evil wizard\")</p>\n<p>// item1:<br>\n// input: \"princess\"<br>\n// output: \"the princess was kidnapped by the dragon\"<br>\n//<br>\n// item2:<br>\n// input: \"dragon\"<br>\n// output: \"the dragon can only be killed by the dragon slaying sword\"<br>\n//<br>\n// item3:<br>\n// input: \"sword\"<br>\n// output: \"the dragon slaying sword was stolen by an evil wizard\"<br>\n//<br>\n// item 4:<br>\n// input: \"wizard\"<br>\n// output: \"the evil wizard can be found in the dark lands\"<br>\n// ERROR! there is no 4th item!</p>\n<p>// generalized syntax concept:<br>\n// OUTPUT: string = StringDictionaryItem (DICTIONARY, \"INPUT: string value\")</p>\n<p>string_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"princess\")<br>\n// string_variable = \"the princess was kidnapped by the dragon\"</p>\n<p>string_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"dragon\")<br>\n// string_variable = \"the dragon can only be killed by the dragon slaying sword\"</p>\n<p>string_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"sword\")<br>\n// string_variable = \"the dragon slaying sword was stolen by an evil wizard\"</p>\n<p>string_variable = StringDictionaryItem (example_object.example_stringdictionary_attribute, \"wizard\")<br>\n// ERROR! there is no 4th item!</p>\n<hr>\n<p>Randomization, example:</p>\n<p>// GetRandomInt (MIN,MAX)</p>\n<p>create (\"example_object\")</p>\n<p>example_object.example_stringlist_attribute = NewStringList ()<br>\nlist add (example_object.example_stringlist_attribute, \"red\")<br>\nlist add (example_object.example_stringlist_attribute, \"blue\")<br>\nlist add (example_object.example_stringlist_attribute, \"yellow\")</p>\n<p>random_string_variable = StringListItem (example_object.example_stringlist_attribute, GetRandomInt (0, ListCount (example_object.example_stringlist_attribute) - 1))</p>\n<p>// random_string_variable = [randomly selects only one of these: \"red\"/\"blue\"/\"yellow\"]</p>\n<hr>\n<p>combining all the operations as seen above into a single line of code is a bit confusing (especially making sure you get the correct equal number of parenthesis on both sides and in the right places), so here it is broken down:</p>\n<p>item_count_variable = ListCount (example_object.example_stringlist_attribute)<br>\n// item_count_variable = 3</p>\n<p>index_number_of_last_item_variable = item_count_variable - 1<br>\n// index_number_of_last_item_variable = 2</p>\n<p>viable_random_index_number_selected_variable = GetRandomInt (0, index_number_of_last_item_variable)</p>\n<p>random_string_variable = StringListItem (example_object.example_stringlist_attribute, viable_random_index_number_selected_variable)<br>\n// random_string_variable = [randomly selects only one of these: \"red\"/\"blue\"/\"yellow\"]</p>\n<hr>\n<p>\"Literally\" creating a String List from/with/as a String Dictionary:</p>\n<p>create (\"example_object\")</p>\n<p>example_object.example_stringdictionary_attribute = NewStringDictionary ()<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"0\", \"red\")<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"1\", \"blue\")<br>\ndictionary add (example_object.example_stringdictionary_attribute, \"2\", \"yellow\")</p>\n<p>// the above is the \"exact same\" as below:</p>\n<p>create (\"example_object\")</p>\n<p>example_object.example_stringlist_attribute = NewStringList ()<br>\nlist add (example_object.example_stringlist_attribute, \"red\")<br>\nlist add (example_object.example_stringlist_attribute, \"blue\")<br>\nlist add (example_object.example_stringlist_attribute, \"yellow\")</p>\n<p>// as can be seen, a 'list' simply does the setting of the string inputs for you: the contigious index numbering (starting at \"0\" for the first item, and then for the next X items: \"1\", \"2\", \"3\", \"4, \"ETC\")</p>\n<p>// a 'list' is just a specialized/specific type of 'dictionary'</p>\n\n",
      "PostDate": "2019-04-21T23:48:09.0973817Z",
      "LastEditDate": "2019-04-22T00:44:22.7341641Z",
      "link": null
    },
    {
      "PostId": "9602bd3e-9bde-4157-a3d7-fb7355f272b2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Neither method lets you edit the order of the list though, so that really sucks. you have to look at the Code view and edit it that way. For me that's risky, I could break something easily (Millie Jonasen)\r\n\r\nmanaging (sorting, searching, etc) collections/data is an entirely different can of worms...\r\n\r\n(arrays/lists are the most simple forms of collections/data storage, and while modern computers/hardware can extremely efficiently/fast-quickly go through the \"assembly-line\" (sequence) of data storage, which is arrays/lists, but, especially with massive data/collection storage and its managament needs, it can be better/required to use these more advanced/complex forms of collections/data shown below)\r\n\r\nData Management Programming:\r\n\r\n(ADTs: Abstract Data Types/Structures): Linked Lists/Nodes/Chains, Stacks, Queues, Deques, Trees, Maps, Dictionaries\r\n\r\nhttps://en.wikipedia.org/wiki/Linked_list\r\nhttps://en.wikipedia.org/wiki/Stack_(abstract_data_type)\r\nhttps://en.wikipedia.org/wiki/Queue_(abstract_data_type)\r\nhttps://en.wikipedia.org/wiki/Double-ended_queue (deques)\r\nhttps://en.wikipedia.org/wiki/Tree_(data_structure)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Neither method lets you edit the order of the list though, so that really sucks. you have to look at the Code view and edit it that way. For me that's risky, I could break something easily (Millie Jonasen)</p>\n</blockquote>\n<p>managing (sorting, searching, etc) collections/data is an entirely different can of worms...</p>\n<p>(arrays/lists are the most simple forms of collections/data storage, and while modern computers/hardware can extremely efficiently/fast-quickly go through the \"assembly-line\" (sequence) of data storage, which is arrays/lists, but, especially with massive data/collection storage and its managament needs, it can be better/required to use these more advanced/complex forms of collections/data shown below)</p>\n<p>Data Management Programming:</p>\n<p>(ADTs: Abstract Data Types/Structures): Linked Lists/Nodes/Chains, Stacks, Queues, Deques, Trees, Maps, Dictionaries</p>\n<p>https://en.wikipedia.org/wiki/Linked_list<br>\nhttps://en.wikipedia.org/wiki/Stack_(abstract_data_type)<br>\nhttps://en.wikipedia.org/wiki/Queue_(abstract_data_type)<br>\nhttps://en.wikipedia.org/wiki/Double-ended_queue (deques)<br>\nhttps://en.wikipedia.org/wiki/Tree_(data_structure)</p>\n\n",
      "PostDate": "2019-04-22T00:26:00.8291155Z",
      "LastEditDate": "2019-04-22T00:40:34.6459302Z",
      "link": null
    }
  ]
}
