{
  "Topic": {
    "TopicId": "qdujhbxvpk2pwdflcuneta",
    "ForumId": "10",
    "Title": "Questions and further",
    "LastUpdated": "2019-08-27T02:12:59.7823917Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "25aa4f23-984e-4b33-b028-a68b454883a1",
      "UserId": 433533,
      "Username": "mikii",
      "AvatarUrl": "https://secure.gravatar.com/avatar/454fa5e7c44f1d0613624d79a0d61faf?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My goal is to create a small, simple game with images for my friends to help tie-up a storyline we've done in tabletop roleplay (though I obviously am not expecting the sort of flexibility that comes with freeform gaming!) Game-wise, I'm trying to keep it very rudimentary, the sort of hand-holdy click-through gameplay you get from those generic hidden object games (but without the hidden object segments- no interest in that.)\r\n\r\nI've got the story, I've got the images, but I have no head for coding at all. I jumped at Quest because of the gui options, but even with that I keep finding myself totally lost on what seem to be truly basic tasks. It took me the better part of a day off and on to set up the first room and get an item to use the \"open\" picture when you looked at it and it was open and the \"close\" picture when it was closed, and I somehow managed to crash the program twice while during (definitely assume my incompetence there, not quest's). Now I'm trying something else that seems basic: you're in the next room -> you see a figure -> when you look further at the figure you notice a box in its lap -> you look into the box. But I can't figure out nesting the items at all, if nesting is even a thing. Is it just a matter of toggling visibility/invisibility and writing around it? And while I'm asking, how can I make the answer in the \"ask\" command (the yes/no one, not the separate tab) influence anything? What do I need to follow up with?\r\n\r\nFurther than that, there's just a lot a questions I've got and problems I've run into that I feel like could be solved with a quick question and a quick answer but I'm instead dragging out into combing over the tutorial and feeling the absolute gaps where any coding mindset should be. If anyone experienced has discord and wouldn't mind me dropping in to clarify something-or-other along the way, I'd greatly appreciate it! ",
      "EditableFormat": "markdown",
      "HTML": "<p>My goal is to create a small, simple game with images for my friends to help tie-up a storyline we've done in tabletop roleplay (though I obviously am not expecting the sort of flexibility that comes with freeform gaming!) Game-wise, I'm trying to keep it very rudimentary, the sort of hand-holdy click-through gameplay you get from those generic hidden object games (but without the hidden object segments- no interest in that.)</p>\n<p>I've got the story, I've got the images, but I have no head for coding at all. I jumped at Quest because of the gui options, but even with that I keep finding myself totally lost on what seem to be truly basic tasks. It took me the better part of a day off and on to set up the first room and get an item to use the \"open\" picture when you looked at it and it was open and the \"close\" picture when it was closed, and I somehow managed to crash the program twice while during (definitely assume my incompetence there, not quest's). Now I'm trying something else that seems basic: you're in the next room -&gt; you see a figure -&gt; when you look further at the figure you notice a box in its lap -&gt; you look into the box. But I can't figure out nesting the items at all, if nesting is even a thing. Is it just a matter of toggling visibility/invisibility and writing around it? And while I'm asking, how can I make the answer in the \"ask\" command (the yes/no one, not the separate tab) influence anything? What do I need to follow up with?</p>\n<p>Further than that, there's just a lot a questions I've got and problems I've run into that I feel like could be solved with a quick question and a quick answer but I'm instead dragging out into combing over the tutorial and feeling the absolute gaps where any coding mindset should be. If anyone experienced has discord and wouldn't mind me dropping in to clarify something-or-other along the way, I'd greatly appreciate it!</p>\n\n",
      "PostDate": "2019-08-27T02:12:59.7823917Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "882c25b0-57d3-4289-8a0a-dc88195d826a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "unfortunately, even with the GUI/Editor, you still got to have some coding, and its logic too, knowledge/understanding, this is just the way that game-making is, even with the best GUI/Editor of all time (and Quest has a really good one, quest is a really powerful and well-done system/program), you still got to know some coding and its logic.\r\n\r\nI'll let others handle your Object nesting and presumably add/remove Verb displayment and/or toggling the built-in 'visible' and/or 'scenery' Boolean Attributes, for what I  think you want to do, not too clear/sure, on what you want exactly.\r\n\r\n-------\r\n\r\ncoding uses algebra: storing Values **WITHIN** VARIABLES\r\n\r\nMATH: ALGEBRA:\r\n\r\nx = 8\r\n\r\nx + 3 = n\r\n[ x = 8 ] + 3 = n\r\n[ 8 ] + 3 = 11\r\nn = 11\r\n\r\n-------------------\r\n\r\nProgramming:\r\n\r\nAssignment Operation: stores the final (calculated/completed) Value on the right side of the equal sign (Assignment Operator) WITHIN the VARIABLE on the left side of the equal sign (Assignment Operator)\r\n\r\nexamples:\r\n\r\nx = 10 // the final Value of '10' is stored within the 'x' Variable VARIABLE\r\nx = 5 + 5 + 5 // the final Value of '15' is stored within the 'x' Variable VARIABLE\r\nx = \"mama\" // the final Value of 'mama' is stored within the 'x' Variable VARIABLE\r\nx = \"mama\" + \"mia\" // the final Value of 'mamamia' is stored within the 'x' Variable VARIABLES\r\n\r\nx = 0\r\nx = x + 5\r\n// x = 5\r\nx = x + 5\r\n// x = 10\r\nx = x + 5\r\n// x = 15\r\nx = x + 5\r\n// x = 20\r\n\r\n------------\r\n\r\nas programming (using Variable VARIABLES):\r\n\r\nx = 8 // programming (unfortunately, not taught in math classes): the Assignment Operation: the '8' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'x' Variable VARIABLE on the left side of the equal sign (Assignment Operator)\r\n\r\nIMPORTANT: the VARIABLE **MUST** be on the LEFT SIDE of the equal sign (Assignment Operator), and the VALUE OR EXPRESSION, **MUST** be on the RIGHT SIDE of the equal sign (Assignment Operator): 8 = x ----> ERROR!\r\n\r\nn = x + 3\r\n// n = [ x = 8 ] + 3\r\n// n = [ 8 ] + 3\r\n// n = 11 // programming (unfortunately, not taught in math classes): the Assignment Operation: the final (calculated/completed) '11' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'n' Variable VARIABLE on the left side of the equal sign (Assignment Operator)\r\nmsg (n)\r\n// output/displayment:\r\n// 11\r\n\r\nProgramming (using Attribute VARIABLES):\r\n\r\ncreate (\"example_object\")\r\nexample_object.x = 8 // programming: the Assignment Operation: the '8' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'example_object.x' Attribute VARIABLE on the left side of the equal sign (Assignment Operator)\r\n\r\nexample_object.n = example_object.x + 3\r\n// example_object.n = [ example_object.x = 8 ] + 3\r\n// example_object.n = [ 8 ] + 3\r\n// example_object.n = 11 // programming: the Assignment Operation: the final (calculated/completed) Value of '11' on the right side of the equal sign (Assigment Operator) is stored WITHIN the 'example_object.n' Attribute VARIABLE on the left side of the equal sign (Assignment Operator)\r\nmsg (example_object.n)\r\n// output/displayment:\r\n// 11\r\n\r\nProgramming can use NON-amount (Strings, Booleans, Object references/points, Lists, Dictionaries, Scripts, etc) Values too (whereas Math just uses amount Values: Integers and Doubles/Floats/Floating-Points/Decimals/Fractionals):\r\n\r\nString Values example:\r\n\r\n// Concatenation Operation: literally putting together / next-to-each-other, two strings\r\n\r\nx = \"mama\"\r\ny = \"mia\"\r\nz = x + y\r\n// z = \"mamamia\"\r\nmsg (z)\r\n// output/displayment:\r\n// mamamia\r\n\r\nMath (Arithmetic: Addition) vs Concatenation:\r\n\r\nMath (Arithmetic: Addition):\r\n\r\n5 + 5 = 10\r\n55 + 55 = 110\r\n\r\nConcatenation:\r\n\r\n\"5\" + \"5\" = \"55\"\r\n\"55\" + \"55\" = \"5555\"\r\n\r\n\"mama\" + \"mia\" = \"mamamia\"\r\n\r\n\"mama\" + \"5\" = \"mama5\"\r\n\r\n\"5\" + \"mama\" = \"5mama\" // however, usually this causes an error, as it's very bad to have the names of things, starting with a number character, as strings often are used for the names of things\r\n\r\n\"mama\" + \"5\" + \"mia\" = \"mama5mia\"\r\n\r\n// the '[SPACE/WHITE-SPACE]' is a character, just like 'a', '1', and '&' are characters:\r\n\r\n\"mama\" + \" \" + \"mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama\" + \"[SPACE]\" + \"mia\"\r\n\r\n\"mama \" + \"mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama[SPACE]\" + \"mia\"\r\n\r\n\"mama\" + \" mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama\" + \"[SPACE]mia\"\r\n\r\n-------\r\n\r\nhow the built-in 'ask/Ask' Script/Function works:\r\n\r\nit's a bit misleading, as it's a 'yes/no' type of questioning, it's NOT for a normal (open-ended) question, for those, you'd use the built-in 'show menu / ShowMenu' Script/Functions and/or the built-in 'get input' Script/Function.\r\n\r\nin code, example:\r\n\r\n```\r\nask (\"Do you want to end the game?\") {\r\n\r\n  // for the user playing the game: the menu choices/options, selecting one of them:\r\n  //\r\n  // yes\r\n  // no\r\n\r\n  // quest automatically (hidden from you), converts your choice/selection (yes/no) to its boolean equivalent (true/false), like so:\r\n  //\r\n  // yes -> true\r\n  // no -> false\r\n\r\n  // quest automatically (hidden from you), sets: result = YOUR_SELECTED_CHOICE/OPTION\r\n  //\r\n  // so, either:\r\n  //\r\n  // result = true\r\n  // or\r\n  // result = false\r\n\r\n  // we then need the 'if' Script/Function (or we can also use the 'switch' Script/Function instead), to handle the conditional:\r\n\r\n  if (result) {\r\n    // the above is the shortened form of this, and how it works too:\r\n    // if (result = true) {\r\n    // if ( [ result = true ] = true) {\r\n    // if (true = true) {\r\n    // indeed, true = true ---> TRUE\r\n    // if (TRUE) {\r\n    // thus, do the nested two 'msg' and 'finish' scripts below (and SKIP the 'else' test):\r\n\r\n    msg (\"You chose to end the game\")\r\n    msg (\"Ending the game now...\")\r\n\r\n    finish // this 'finish' Script/Function call, ends the game\r\n\r\n  } else {\r\n    // the above is the shortened form of this, and how it works too:\r\n    // else if (result = false) {\r\n    // else if ( [ result = false ] = false) {\r\n   // else if (false = false) {\r\n   // indeed, false = false ---> TRUE\r\n   // else if (TRUE) {\r\n   // thus, do the nested single 'msg' script below\r\n\r\n   msg (\"You chose NOT to end the game\")\r\n  \r\n}\r\n\r\n---------\r\n\r\nfurther explanation of how it works:\r\n\r\nresult = true\r\n\r\nif (result) {\r\n    // if ( [ result = true ] = true)\r\n   // if ( [true] = true)\r\n  // TRUE, so do the 'msg (\"1\")' script nested below (and skip the 'else' test):\r\n  msg (\"1\")\r\n} else {\r\n  msg (\"2\")\r\n}\r\n\r\nresult = false\r\n\r\nif (result) {\r\n    // if ( [ result = false ] = true)\r\n   // if ( [false] = true)\r\n  // FALSE, so jump to the 'else' below (SKIP the nested 'msg (\"1\")' script below)\r\n  msg (\"1\")\r\n} else {\r\n   // if ( [ result = false ] = false)\r\n  // if ( [false] = false)\r\n  // TRUE, so do the 'msg (\"2\")' script nested below:\r\n  msg (\"2\")\r\n}\r\n```\r\n\r\n---------------------\r\n\r\nString Matching, how it works underneath:\r\n\r\n```\r\nx = \"dragon\"\r\n\r\nif (x = \"dragon\") {\r\n  msg (\"MATCH\")\r\n} else {\r\n  msg (\"NOT match\")\r\n}\r\n\r\n// if ( [ x = \"dragon\" ] = \"dragon\")\r\n// if ( [ \"dragon\" ] = \"dragon\")\r\n// if ( [ \"d\" ] = \"d\") // match success\r\n// if ( [ \"r\" ] = \"r\") // match success\r\n// if ( [ \"a\" ] = \"a\") // match success\r\n// if ( [ \"g\" ] = \"g\") // match success\r\n// if ( [ \"o\" ] = \"o\") // match success\r\n// if ( [ \"n\" ] = \"n\") // match success\r\n// indeed, [ \"dragon\" ] = \"dragon\"\r\n\r\n-------------\r\n\r\nimportant: quest IS upper-lower case sensitive!\r\n\r\n---------\r\n\r\nx = \"dragoN\"\r\n\r\nif (x = \"dragon\") {\r\n  msg (\"MATCH\")\r\n} else {\r\n  msg (\"NOT match\")\r\n}\r\n\r\n// if ( [ x = \"dragoN\" ] = \"dragon\")\r\n// if ( [ \"dragoN\" ] = \"dragon\")\r\n// if ( [ \"d\" ] = \"d\") // match success\r\n// if ( [ \"r\" ] = \"r\") // match success\r\n// if ( [ \"a\" ] = \"a\") // match success\r\n// if ( [ \"g\" ] = \"g\") // match success\r\n// if ( [ \"o\" ] = \"o\") // match success\r\n// if ( [ \"N\" ] = \"n\") // match FAIL\r\n// FAIL, [ \"dragoN\" ]  is not equal to \"dragon\"\r\n\r\n------------\r\n\r\nx = \"dragon\"\r\n\r\nif (x = \"dragoN\") {\r\n  msg (\"MATCH\")\r\n} else {\r\n  msg (\"NOT match\")\r\n}\r\n\r\n// if ( [ x = \"dragon\" ] = \"dragoN\")\r\n// if ( [ \"dragon\" ] = \"dragoN\")\r\n// if ( [ \"d\" ] = \"d\") // match success\r\n// if ( [ \"r\" ] = \"r\") // match success\r\n// if ( [ \"a\" ] = \"a\") // match success\r\n// if ( [ \"g\" ] = \"g\") // match success\r\n// if ( [ \"o\" ] = \"o\") // match success\r\n// if ( [ \"n\" ] = \"N\") // match FAIL\r\n// FAIL, [ \"dragon\" ]  is not equal to \"dragoN\"\r\n```\r\n\r\n--------------\r\n\r\n```\r\n// 'AND' Logic:\r\n\r\nmsg (\"if you do both: cleaning your room and mowing the lawn, then and only then, do you get five dollars\")\r\n\r\nplayer.currency = 0\r\n\r\nif (room_cleaned and mowed_lawn) {\r\n  player.currency = player.currency + 5\r\n  msg (\"You cleaned your room and mowed the lawn, so, you get 5 dollars\")\r\n} else if (room_cleaned) {\r\n  msg (\"You cleaned your room but you didn't mow the lawn, so, you do NOT get five dollars\")\r\n} else if (mowed_lawn) {\r\n  msg (\"You mowed the lawn but you didn't clean the room, so, you do NOT get five dollars\")\r\n} else {\r\n  msg (\"You didn't clean your room, nor did you mow the lawn, so, you do NOT get five dollars\")\r\n}\r\n\r\n----------\r\n\r\n// 'OR' Logic:\r\n\r\nmsg (\"if you either: clean your room or mow the lawn or do both: cleaning your room and mowing the lawn, then you get five dollars\")\r\n\r\nplayer.currency = 0\r\n\r\nif (room_cleaned or mowed_lawn) {\r\n  player.currency = player.currency + 5\r\n  if (room_cleaned and mowed_lawn) {\r\n    msg (\"You cleaned your room and mowed the lawn, you get five dollars\")\r\n  } else if (room_cleaned) {\r\n    msg (\"You cleaned your room, but you didn't mow the lawn, you get five dollars\")\r\n  } else {\r\n    msg (\"You mowed the lawn, but you didn't clean your room, you get five dollars\")\r\n  }\r\n} else {\r\n  msg (\"You didn't clean your room, nor did you mow the lawn, so, you do NOT get five dollars\")\r\n}\r\n\r\n```\r\n\r\n------------\r\n\r\nBoolean Logic / Truth Tables:\r\n\r\nDefinition Logic:\r\n\r\ntrue -> TRUE\r\nfalse -> FALSE\r\n\r\nNegation ('NOT') Logic:\r\n\r\nnot true -> FALSE\r\nnot false -> TRUE\r\n\r\n'AND' (conjunction) Logic:\r\n\r\ntrue and true -> TRUE\r\ntrue and false -> FALSE\r\nfalse and true -> FALSE\r\nfalse and false -> FALSE\r\n\r\n'OR' (disjunction) Logic:\r\n\r\ntrue or true -> TRUE\r\ntrue or false -> TRUE\r\nfalse or true -> TRUE\r\nfalse or false -> FALSE",
      "EditableFormat": "markdown",
      "HTML": "<p>unfortunately, even with the GUI/Editor, you still got to have some coding, and its logic too, knowledge/understanding, this is just the way that game-making is, even with the best GUI/Editor of all time (and Quest has a really good one, quest is a really powerful and well-done system/program), you still got to know some coding and its logic.</p>\n<p>I'll let others handle your Object nesting and presumably add/remove Verb displayment and/or toggling the built-in 'visible' and/or 'scenery' Boolean Attributes, for what I  think you want to do, not too clear/sure, on what you want exactly.</p>\n<hr>\n<p>coding uses algebra: storing Values <strong>WITHIN</strong> VARIABLES</p>\n<p>MATH: ALGEBRA:</p>\n<p>x = 8</p>\n<p>x + 3 = n<br>\n[ x = 8 ] + 3 = n<br>\n[ 8 ] + 3 = 11<br>\nn = 11</p>\n<hr>\n<p>Programming:</p>\n<p>Assignment Operation: stores the final (calculated/completed) Value on the right side of the equal sign (Assignment Operator) WITHIN the VARIABLE on the left side of the equal sign (Assignment Operator)</p>\n<p>examples:</p>\n<p>x = 10 // the final Value of '10' is stored within the 'x' Variable VARIABLE<br>\nx = 5 + 5 + 5 // the final Value of '15' is stored within the 'x' Variable VARIABLE<br>\nx = \"mama\" // the final Value of 'mama' is stored within the 'x' Variable VARIABLE<br>\nx = \"mama\" + \"mia\" // the final Value of 'mamamia' is stored within the 'x' Variable VARIABLES</p>\n<p>x = 0<br>\nx = x + 5<br>\n// x = 5<br>\nx = x + 5<br>\n// x = 10<br>\nx = x + 5<br>\n// x = 15<br>\nx = x + 5<br>\n// x = 20</p>\n<hr>\n<p>as programming (using Variable VARIABLES):</p>\n<p>x = 8 // programming (unfortunately, not taught in math classes): the Assignment Operation: the '8' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'x' Variable VARIABLE on the left side of the equal sign (Assignment Operator)</p>\n<p>IMPORTANT: the VARIABLE <strong>MUST</strong> be on the LEFT SIDE of the equal sign (Assignment Operator), and the VALUE OR EXPRESSION, <strong>MUST</strong> be on the RIGHT SIDE of the equal sign (Assignment Operator): 8 = x ----&gt; ERROR!</p>\n<p>n = x + 3<br>\n// n = [ x = 8 ] + 3<br>\n// n = [ 8 ] + 3<br>\n// n = 11 // programming (unfortunately, not taught in math classes): the Assignment Operation: the final (calculated/completed) '11' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'n' Variable VARIABLE on the left side of the equal sign (Assignment Operator)<br>\nmsg (n)<br>\n// output/displayment:<br>\n// 11</p>\n<p>Programming (using Attribute VARIABLES):</p>\n<p>create (\"example_object\")<br>\nexample_object.x = 8 // programming: the Assignment Operation: the '8' Integer Value on the right side of the equal sign (Assignment Operator) is stored WITHIN the 'example_object.x' Attribute VARIABLE on the left side of the equal sign (Assignment Operator)</p>\n<p>example_object.n = example_object.x + 3<br>\n// example_object.n = [ example_object.x = 8 ] + 3<br>\n// example_object.n = [ 8 ] + 3<br>\n// example_object.n = 11 // programming: the Assignment Operation: the final (calculated/completed) Value of '11' on the right side of the equal sign (Assigment Operator) is stored WITHIN the 'example_object.n' Attribute VARIABLE on the left side of the equal sign (Assignment Operator)<br>\nmsg (example_object.n)<br>\n// output/displayment:<br>\n// 11</p>\n<p>Programming can use NON-amount (Strings, Booleans, Object references/points, Lists, Dictionaries, Scripts, etc) Values too (whereas Math just uses amount Values: Integers and Doubles/Floats/Floating-Points/Decimals/Fractionals):</p>\n<p>String Values example:</p>\n<p>// Concatenation Operation: literally putting together / next-to-each-other, two strings</p>\n<p>x = \"mama\"<br>\ny = \"mia\"<br>\nz = x + y<br>\n// z = \"mamamia\"<br>\nmsg (z)<br>\n// output/displayment:<br>\n// mamamia</p>\n<p>Math (Arithmetic: Addition) vs Concatenation:</p>\n<p>Math (Arithmetic: Addition):</p>\n<p>5 + 5 = 10<br>\n55 + 55 = 110</p>\n<p>Concatenation:</p>\n<p>\"5\" + \"5\" = \"55\"<br>\n\"55\" + \"55\" = \"5555\"</p>\n<p>\"mama\" + \"mia\" = \"mamamia\"</p>\n<p>\"mama\" + \"5\" = \"mama5\"</p>\n<p>\"5\" + \"mama\" = \"5mama\" // however, usually this causes an error, as it's very bad to have the names of things, starting with a number character, as strings often are used for the names of things</p>\n<p>\"mama\" + \"5\" + \"mia\" = \"mama5mia\"</p>\n<p>// the '[SPACE/WHITE-SPACE]' is a character, just like 'a', '1', and '&amp;' are characters:</p>\n<p>\"mama\" + \" \" + \"mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama\" + \"[SPACE]\" + \"mia\"</p>\n<p>\"mama \" + \"mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama[SPACE]\" + \"mia\"</p>\n<p>\"mama\" + \" mia\" = \"mama mia\" // just if you can't see the SPACE (not actual/working code): \"mama\" + \"[SPACE]mia\"</p>\n<hr>\n<p>how the built-in 'ask/Ask' Script/Function works:</p>\n<p>it's a bit misleading, as it's a 'yes/no' type of questioning, it's NOT for a normal (open-ended) question, for those, you'd use the built-in 'show menu / ShowMenu' Script/Functions and/or the built-in 'get input' Script/Function.</p>\n<p>in code, example:</p>\n<pre><code>ask (\"Do you want to end the game?\") {\n\n  // for the user playing the game: the menu choices/options, selecting one of them:\n  //\n  // yes\n  // no\n\n  // quest automatically (hidden from you), converts your choice/selection (yes/no) to its boolean equivalent (true/false), like so:\n  //\n  // yes -&gt; true\n  // no -&gt; false\n\n  // quest automatically (hidden from you), sets: result = YOUR_SELECTED_CHOICE/OPTION\n  //\n  // so, either:\n  //\n  // result = true\n  // or\n  // result = false\n\n  // we then need the 'if' Script/Function (or we can also use the 'switch' Script/Function instead), to handle the conditional:\n\n  if (result) {\n    // the above is the shortened form of this, and how it works too:\n    // if (result = true) {\n    // if ( [ result = true ] = true) {\n    // if (true = true) {\n    // indeed, true = true ---&gt; TRUE\n    // if (TRUE) {\n    // thus, do the nested two 'msg' and 'finish' scripts below (and SKIP the 'else' test):\n\n    msg (\"You chose to end the game\")\n    msg (\"Ending the game now...\")\n\n    finish // this 'finish' Script/Function call, ends the game\n\n  } else {\n    // the above is the shortened form of this, and how it works too:\n    // else if (result = false) {\n    // else if ( [ result = false ] = false) {\n   // else if (false = false) {\n   // indeed, false = false ---&gt; TRUE\n   // else if (TRUE) {\n   // thus, do the nested single 'msg' script below\n\n   msg (\"You chose NOT to end the game\")\n  \n}\n\n---------\n\nfurther explanation of how it works:\n\nresult = true\n\nif (result) {\n    // if ( [ result = true ] = true)\n   // if ( [true] = true)\n  // TRUE, so do the 'msg (\"1\")' script nested below (and skip the 'else' test):\n  msg (\"1\")\n} else {\n  msg (\"2\")\n}\n\nresult = false\n\nif (result) {\n    // if ( [ result = false ] = true)\n   // if ( [false] = true)\n  // FALSE, so jump to the 'else' below (SKIP the nested 'msg (\"1\")' script below)\n  msg (\"1\")\n} else {\n   // if ( [ result = false ] = false)\n  // if ( [false] = false)\n  // TRUE, so do the 'msg (\"2\")' script nested below:\n  msg (\"2\")\n}\n</code></pre>\n<hr>\n<p>String Matching, how it works underneath:</p>\n<pre><code>x = \"dragon\"\n\nif (x = \"dragon\") {\n  msg (\"MATCH\")\n} else {\n  msg (\"NOT match\")\n}\n\n// if ( [ x = \"dragon\" ] = \"dragon\")\n// if ( [ \"dragon\" ] = \"dragon\")\n// if ( [ \"d\" ] = \"d\") // match success\n// if ( [ \"r\" ] = \"r\") // match success\n// if ( [ \"a\" ] = \"a\") // match success\n// if ( [ \"g\" ] = \"g\") // match success\n// if ( [ \"o\" ] = \"o\") // match success\n// if ( [ \"n\" ] = \"n\") // match success\n// indeed, [ \"dragon\" ] = \"dragon\"\n\n-------------\n\nimportant: quest IS upper-lower case sensitive!\n\n---------\n\nx = \"dragoN\"\n\nif (x = \"dragon\") {\n  msg (\"MATCH\")\n} else {\n  msg (\"NOT match\")\n}\n\n// if ( [ x = \"dragoN\" ] = \"dragon\")\n// if ( [ \"dragoN\" ] = \"dragon\")\n// if ( [ \"d\" ] = \"d\") // match success\n// if ( [ \"r\" ] = \"r\") // match success\n// if ( [ \"a\" ] = \"a\") // match success\n// if ( [ \"g\" ] = \"g\") // match success\n// if ( [ \"o\" ] = \"o\") // match success\n// if ( [ \"N\" ] = \"n\") // match FAIL\n// FAIL, [ \"dragoN\" ]  is not equal to \"dragon\"\n\n------------\n\nx = \"dragon\"\n\nif (x = \"dragoN\") {\n  msg (\"MATCH\")\n} else {\n  msg (\"NOT match\")\n}\n\n// if ( [ x = \"dragon\" ] = \"dragoN\")\n// if ( [ \"dragon\" ] = \"dragoN\")\n// if ( [ \"d\" ] = \"d\") // match success\n// if ( [ \"r\" ] = \"r\") // match success\n// if ( [ \"a\" ] = \"a\") // match success\n// if ( [ \"g\" ] = \"g\") // match success\n// if ( [ \"o\" ] = \"o\") // match success\n// if ( [ \"n\" ] = \"N\") // match FAIL\n// FAIL, [ \"dragon\" ]  is not equal to \"dragoN\"\n</code></pre>\n<hr>\n<pre><code>// 'AND' Logic:\n\nmsg (\"if you do both: cleaning your room and mowing the lawn, then and only then, do you get five dollars\")\n\nplayer.currency = 0\n\nif (room_cleaned and mowed_lawn) {\n  player.currency = player.currency + 5\n  msg (\"You cleaned your room and mowed the lawn, so, you get 5 dollars\")\n} else if (room_cleaned) {\n  msg (\"You cleaned your room but you didn't mow the lawn, so, you do NOT get five dollars\")\n} else if (mowed_lawn) {\n  msg (\"You mowed the lawn but you didn't clean the room, so, you do NOT get five dollars\")\n} else {\n  msg (\"You didn't clean your room, nor did you mow the lawn, so, you do NOT get five dollars\")\n}\n\n----------\n\n// 'OR' Logic:\n\nmsg (\"if you either: clean your room or mow the lawn or do both: cleaning your room and mowing the lawn, then you get five dollars\")\n\nplayer.currency = 0\n\nif (room_cleaned or mowed_lawn) {\n  player.currency = player.currency + 5\n  if (room_cleaned and mowed_lawn) {\n    msg (\"You cleaned your room and mowed the lawn, you get five dollars\")\n  } else if (room_cleaned) {\n    msg (\"You cleaned your room, but you didn't mow the lawn, you get five dollars\")\n  } else {\n    msg (\"You mowed the lawn, but you didn't clean your room, you get five dollars\")\n  }\n} else {\n  msg (\"You didn't clean your room, nor did you mow the lawn, so, you do NOT get five dollars\")\n}\n\n</code></pre>\n<hr>\n<p>Boolean Logic / Truth Tables:</p>\n<p>Definition Logic:</p>\n<p>true -&gt; TRUE<br>\nfalse -&gt; FALSE</p>\n<p>Negation ('NOT') Logic:</p>\n<p>not true -&gt; FALSE<br>\nnot false -&gt; TRUE</p>\n<p>'AND' (conjunction) Logic:</p>\n<p>true and true -&gt; TRUE<br>\ntrue and false -&gt; FALSE<br>\nfalse and true -&gt; FALSE<br>\nfalse and false -&gt; FALSE</p>\n<p>'OR' (disjunction) Logic:</p>\n<p>true or true -&gt; TRUE<br>\ntrue or false -&gt; TRUE<br>\nfalse or true -&gt; TRUE<br>\nfalse or false -&gt; FALSE</p>\n\n",
      "PostDate": "2019-08-27T05:24:42.5929125Z",
      "LastEditDate": "2019-08-27T06:39:31.3380604Z",
      "link": null
    },
    {
      "PostId": "b98537af-0371-4f61-9943-3859206dbc44",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I recommend is, don't skip any part of the beginner's tutorial if you are just starting out, it's there for a reason. The other tutorials, you can pick and choose as you please.\r\n\r\nOther than that, experimenting with other eople's codes and libraries is the best way to learn.",
      "EditableFormat": "markdown",
      "HTML": "<p>What I recommend is, don't skip any part of the beginner's tutorial if you are just starting out, it's there for a reason. The other tutorials, you can pick and choose as you please.</p>\n<p>Other than that, experimenting with other eople's codes and libraries is the best way to learn.</p>\n\n",
      "PostDate": "2019-08-27T05:34:26.761054Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
