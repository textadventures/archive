{
  "Topic": {
    "TopicId": "fey3jk4o9ukglaf7nmnmgg",
    "ForumId": "10",
    "Title": "Recognize player commands",
    "LastUpdated": "2024-05-30T09:32:41.3648805Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "be5d6305-a88c-41ff-a1f7-009fc2f2a2da",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to identify what the player did?\r\nFor example: I want to see if the player tries an exit but its locked which prints a msg hinting on how to unlock it.\r\n```\r\nif (game.pov.trapped){\r\n    lockexits = ScopeExits ()\r\n    while (ListCount (lockexits) > 0) {\r\n      x = PickOneObject (lockexits)\r\n      list remove (lockexits, x)\r\n      x.locked = true\r\n      x.lockmessage = \"It won't budge! You have to do the ritual; there's no other way.\"\r\n    }\r\n}\r\n// player gets the lock message, but chooses to try the door again.\r\nIf (//player chooses to try to open door one more time//){\r\n   msg(\"Maybe I should check the Book of Tyke again. It could hold the secret to unlocking it.\")\r\n   list add (booktyke.inventoryverbs , \"Draken\")\r\n}\r\n\r\nThere are a lot of rooms that this can happen. These have exits. Should I just manually modify these exits' scripts? I was curious  if there's a way to do it with a script/function.",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to identify what the player did?<br>\nFor example: I want to see if the player tries an exit but its locked which prints a msg hinting on how to unlock it.</p>\n<pre><code>if (game.pov.trapped){\n    lockexits = ScopeExits ()\n    while (ListCount (lockexits) &gt; 0) {\n      x = PickOneObject (lockexits)\n      list remove (lockexits, x)\n      x.locked = true\n      x.lockmessage = \"It won't budge! You have to do the ritual; there's no other way.\"\n    }\n}\n// player gets the lock message, but chooses to try the door again.\nIf (//player chooses to try to open door one more time//){\n   msg(\"Maybe I should check the Book of Tyke again. It could hold the secret to unlocking it.\")\n   list add (booktyke.inventoryverbs , \"Draken\")\n}\n\nThere are a lot of rooms that this can happen. These have exits. Should I just manually modify these exits' scripts? I was curious  if there's a way to do it with a script/function.\n</code></pre>\n\n",
      "PostDate": "2024-05-30T09:32:41.3648805Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "79e0b913-4f67-48ff-a1ed-032359a39d37",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want to check what command the player used, you can look at `game.pov.currentcommandpattern`. So you could do something like:\r\n```\r\nif (game.pov.currentcommandpattern = go) {\r\n  // This script will only run if the player tried to go through an exit\r\n}\r\n```\r\n\r\nHowever, in this case it looks like your script is running when the exits *become* locked, at which point they won't have tried them yet. In this case, it might make more sense to assign a script to the exit.\r\n\r\n*However*, it might also make more sense to make a custom command.\r\nIf the command the player entered matches more than one command, it will use one that's in the room rather than the global command. So you could make a command that looks like this:\r\nName: `fake_go`\r\nPattern (regular expression): `^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$`\r\nScript:\r\n```\r\nif ( not GetBoolean (exit, \"tried\")) {\r\n  msg (\"It won't budge! You have to do the ritual; there's no other way.\")\r\n  exit.tried = true\r\n}\r\nelse {\r\n  msg (\"It still won't budge.\")\r\n  msg(\"Maybe I should check the Book of Tyke again. It could hold the secret to unlocking it.\")\r\n  list add (booktyke.inventoryverbs , \"Draken\")\r\n}\r\n```\r\n\r\nYou can put this command inside a box somewhere (so it doesn't count as a global command), and then you can do:\r\n* `MoveObjectHere (fake_go)` - to lock all exits by replacing the standard `go` command with a specific one for the current room\r\n* `AddToInventory (fake_go)` - to allow the player to use exits again (putting a command in the inventory is a simple way to effectively disable it and let the default one run)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want to check what command the player used, you can look at <code>game.pov.currentcommandpattern</code>. So you could do something like:</p>\n<pre><code>if (game.pov.currentcommandpattern = go) {\n  // This script will only run if the player tried to go through an exit\n}\n</code></pre>\n<p>However, in this case it looks like your script is running when the exits <em>become</em> locked, at which point they won't have tried them yet. In this case, it might make more sense to assign a script to the exit.</p>\n<p><em>However</em>, it might also make more sense to make a custom command.<br>\nIf the command the player entered matches more than one command, it will use one that's in the room rather than the global command. So you could make a command that looks like this:<br>\nName: <code>fake_go</code><br>\nPattern (regular expression): <code>^go to (?&lt;exit&gt;.*)$|^go (?&lt;exit&gt;.*)$|^(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$</code><br>\nScript:</p>\n<pre><code>if ( not GetBoolean (exit, \"tried\")) {\n  msg (\"It won't budge! You have to do the ritual; there's no other way.\")\n  exit.tried = true\n}\nelse {\n  msg (\"It still won't budge.\")\n  msg(\"Maybe I should check the Book of Tyke again. It could hold the secret to unlocking it.\")\n  list add (booktyke.inventoryverbs , \"Draken\")\n}\n</code></pre>\n<p>You can put this command inside a box somewhere (so it doesn't count as a global command), and then you can do:</p>\n<ul>\n<li><code>MoveObjectHere (fake_go)</code> - to lock all exits by replacing the standard <code>go</code> command with a specific one for the current room</li>\n<li><code>AddToInventory (fake_go)</code> - to allow the player to use exits again (putting a command in the inventory is a simple way to effectively disable it and let the default one run)</li>\n</ul>\n\n",
      "PostDate": "2024-05-30T10:40:19.114843Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c3e0298e-3436-4321-898b-73def48d0673",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "These are all new stuff for me, thanks for the help! \r\nWhat if the player is using the compass to move around instead of commands? Will the fake command work? or do I have to use game.pov.currentcommandpattern = go?\r\n\r\nI tried using this code too:\r\n```\r\nif (game.pov.trapped){\r\n    lockexits = ScopeExits ()\r\n    while (ListCount (lockexits) > 0) {\r\n      x = PickOneObject (lockexits)\r\n      list remove (lockexits, x)\r\n      x.locked = true\r\n      x.lockmessage = \"It won't budge! You have to do the ritual; there's no other way.\"\r\n      x.runscript = true\r\n      x.script = Script: firsttime{msg(\"It won't budge!\")}otherwise{msg(\"You can leave\") player.parent = this.to}\r\n    }\r\n}\r\n```\r\nObviously it didn't work which made me wonder is there a way to code a script attribute that will be defined midgame? (for scoped objects?)",
      "EditableFormat": "markdown",
      "HTML": "<p>These are all new stuff for me, thanks for the help!<br>\nWhat if the player is using the compass to move around instead of commands? Will the fake command work? or do I have to use game.pov.currentcommandpattern = go?</p>\n<p>I tried using this code too:</p>\n<pre><code>if (game.pov.trapped){\n    lockexits = ScopeExits ()\n    while (ListCount (lockexits) &gt; 0) {\n      x = PickOneObject (lockexits)\n      list remove (lockexits, x)\n      x.locked = true\n      x.lockmessage = \"It won't budge! You have to do the ritual; there's no other way.\"\n      x.runscript = true\n      x.script = Script: firsttime{msg(\"It won't budge!\")}otherwise{msg(\"You can leave\") player.parent = this.to}\n    }\n}\n</code></pre>\n<p>Obviously it didn't work which made me wonder is there a way to code a script attribute that will be defined midgame? (for scoped objects?)</p>\n\n",
      "PostDate": "2024-05-30T15:33:54.8092647Z",
      "LastEditDate": "2024-05-30T15:42:25.9232011Z",
      "link": null
    },
    {
      "PostId": "53b306fd-4804-4a91-abd0-f5dd27ed951d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What if the player is using the compass to move around instead of commands? Will the fake command work?\r\n\r\nClicking the compass buttons just types the direction name (\"north\", \"south\", etc) into the command bar and sends it immediately, so it should work just the same.\r\n\r\nThe pattern I gave for the fake command is exactly the same as the pattern given in `English.aslx` for the `go` command; so it will match exactly the same inputs. (If you're using another language, you could temporarily add the line `msg (go.pattern)` to a script somewhere, to get it to tell you what the pattern should be)\r\n\r\n> Obviously it didn't work which made me wonder is there a way to code a script attribute that will be defined midgame?\r\n\r\nYes; you could do something like:\r\n```\r\nx.script => {\r\n  firsttime {\r\n    msg(\"It won't budge!\")\r\n  }\r\n  otherwise {\r\n    msg(\"You can leave\")\r\n    player.parent = this.to\r\n  }\r\n}\r\n```\r\n\r\nThe `=>` operator assigns a script - that's why you have to use `>=` for greater-than-or-equal-to numeric comparisons (some languages allow either form, but Quest doesn't)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What if the player is using the compass to move around instead of commands? Will the fake command work?</p>\n</blockquote>\n<p>Clicking the compass buttons just types the direction name (\"north\", \"south\", etc) into the command bar and sends it immediately, so it should work just the same.</p>\n<p>The pattern I gave for the fake command is exactly the same as the pattern given in <code>English.aslx</code> for the <code>go</code> command; so it will match exactly the same inputs. (If you're using another language, you could temporarily add the line <code>msg (go.pattern)</code> to a script somewhere, to get it to tell you what the pattern should be)</p>\n<blockquote>\n<p>Obviously it didn't work which made me wonder is there a way to code a script attribute that will be defined midgame?</p>\n</blockquote>\n<p>Yes; you could do something like:</p>\n<pre><code>x.script =&gt; {\n  firsttime {\n    msg(\"It won't budge!\")\n  }\n  otherwise {\n    msg(\"You can leave\")\n    player.parent = this.to\n  }\n}\n</code></pre>\n<p>The <code>=&gt;</code> operator assigns a script - that's why you have to use <code>&gt;=</code> for greater-than-or-equal-to numeric comparisons (some languages allow either form, but Quest doesn't)</p>\n\n",
      "PostDate": "2024-05-31T08:49:52.0834989Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f37694de-e97f-47bf-a804-4c2e8d0dc17b",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Appreciate your help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Appreciate your help!</p>\n\n",
      "PostDate": "2024-06-01T15:11:31.1446381Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
