{
  "Topic": {
    "TopicId": "1571",
    "ForumId": "10",
    "Title": "Open Challenge: 'it' functionality",
    "LastUpdated": "2007-01-19T23:59:36+00:00",
    "ReplyCount": 9
  },
  "Posts": [
    {
      "PostId": "12271",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I type &quot;s&quot;.  I receive the message:\n\n&quot;You cannot go that way.  The door is closed.&quot;\n\nI type &quot;open it&quot;.  I receive the message:\n\n&quot;I don't know what 'it' you're referring to.&quot;\n\nThis happens because I never actually referenced the door object yet.  The first message, however, clearly indicates that a door is there, and so using 'it' in a responsive command would be natural.  My attempts to manually set quest.lastobject have failed.\n\nAnyone got a way to do this?",
      "EditableFormat": "bbcode",
      "HTML": "I type &quot;s&quot;.  I receive the message:<br/><br/>&quot;You cannot go that way.  The door is closed.&quot;<br/><br/>I type &quot;open it&quot;.  I receive the message:<br/><br/>&quot;I don't know what 'it' you're referring to.&quot;<br/><br/>This happens because I never actually referenced the door object yet.  The first message, however, clearly indicates that a door is there, and so using 'it' in a responsive command would be natural.  My attempts to manually set quest.lastobject have failed.<br/><br/>Anyone got a way to do this?",
      "PostDate": "2007-01-19T17:49:16+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12272",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "I'm pretty sure Quest used to do this, though not as vague as you are suggesting. It was more like...\n\n&gt;go to door\n\nThe door is locked you can't go through it.\n\n&gt;unlock it\n\nYou unlock the door.\n\nPulling the feature off through code would require in your case a custom travel command for each compass direction interacting with exit direction properties the room would have, where as trying to south would interact (and fail) with the south exit property then redirect a common IT variable to the door object blocking the path.\n\nIt wouldn't be that difficult at all really for normal commands to have an after-turn script that parses #quest.input# or whatever the last command variable it is, find the space in the input and saves the last word to be referenced as it until changed. Though with travel you would most likely be forced to turn your directions/doors/caves/whatever into either actual objects or a series of room properties.",
      "EditableFormat": "bbcode",
      "HTML": "I'm pretty sure Quest used to do this, though not as vague as you are suggesting. It was more like...<br/><br/>&gt;go to door<br/><br/>The door is locked you can't go through it.<br/><br/>&gt;unlock it<br/><br/>You unlock the door.<br/><br/>Pulling the feature off through code would require in your case a custom travel command for each compass direction interacting with exit direction properties the room would have, where as trying to south would interact (and fail) with the south exit property then redirect a common IT variable to the door object blocking the path.<br/><br/>It wouldn't be that difficult at all really for normal commands to have an after-turn script that parses #quest.input# or whatever the last command variable it is, find the space in the input and saves the last word to be referenced as it until changed. Though with travel you would most likely be forced to turn your directions/doors/caves/whatever into either actual objects or a series of room properties.",
      "PostDate": "2007-01-19T17:55:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12274",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:1y3nvrjv]I'm pretty sure Quest used to do this, though not as vague as you are suggesting. It was more like... \n\n&gt;go to door \n\nThe door is locked you can't go through it. \n\n&gt;unlock it \n\nYou unlock the door.[/quote:1y3nvrjv] \n\nYeah, that still works.  My problem is that I don't reference the door, I just try to go south.\n\n[quote:1y3nvrjv]Pulling the feature off through code would require in your case a custom travel command for each compass direction interacting with exit direction properties the room would have, where as trying to south would interact abd fail with the south exit property then redirect a common IT variable to the door object blocking the path. [/quote:1y3nvrjv]\n\nKind of what I already have set up.  Except that the directional commands interact with exit objects, not properties.  I cannot, however, seem to set the quest.lastobject string variable.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I'm pretty sure Quest used to do this, though not as vague as you are suggesting. It was more like... <br/><br/>&gt;go to door <br/><br/>The door is locked you can't go through it. <br/><br/>&gt;unlock it <br/><br/>You unlock the door.</p></blockquote> <br/><br/>Yeah, that still works.  My problem is that I don't reference the door, I just try to go south.<br/><br/><blockquote><p>Pulling the feature off through code would require in your case a custom travel command for each compass direction interacting with exit direction properties the room would have, where as trying to south would interact abd fail with the south exit property then redirect a common IT variable to the door object blocking the path. </p></blockquote><br/><br/>Kind of what I already have set up.  Except that the directional commands interact with exit objects, not properties.  I cannot, however, seem to set the quest.lastobject string variable.",
      "PostDate": "2007-01-19T17:58:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12275",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "In typical fashion I wouldn't rely on Quest's built in ability to use IT, instead create something alone the lines of a before-turn script that will test an input variable, unlock #whatever#, to see if the #whatever# = IT and if so sub your own personal last interacted object variable.",
      "EditableFormat": "bbcode",
      "HTML": "In typical fashion I wouldn't rely on Quest's built in ability to use IT, instead create something alone the lines of a before-turn script that will test an input variable, unlock #whatever#, to see if the #whatever# = IT and if so sub your own personal last interacted object variable.",
      "PostDate": "2007-01-19T18:01:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12276",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I also have\n\n[code:2ps7cjph]set string &lt;quest&#46;lastobject; #Game_LastObject#&gt;[/code:2ps7cjph]\n\nin the beforeturn script.\n\nWhen the door object is checked to see if it's open via the command 'command &lt;s&gt;', I have\n\n[code:2ps7cjph]set string &lt;Game_LastObject; #Self#&gt;[/code:2ps7cjph]\n\nThis is in the OnFailedUse action of the door object.  #Self# is a variable I set for every object at the beginning of actions with\n\n[code:2ps7cjph]set string &lt;Self; $thisobject$&gt;[/code:2ps7cjph]\n\nJust because it's easier to reference #Self#.\n\nFor some reason, manually setting quest.lastobject at other times doesn't work, so in the beforeturn script I set it to equal a variable that I have already set.  In this case, #Game_LastObject#.  Even then, using the word 'it' in a command fails.",
      "EditableFormat": "bbcode",
      "HTML": "I also have<br/><br/><pre><code>set string &lt;quest&#46;lastobject; #Game_LastObject#&gt;</code></pre><br/><br/>in the beforeturn script.<br/><br/>When the door object is checked to see if it's open via the command 'command &lt;s&gt;', I have<br/><br/><pre><code>set string &lt;Game_LastObject; #Self#&gt;</code></pre><br/><br/>This is in the OnFailedUse action of the door object.  #Self# is a variable I set for every object at the beginning of actions with<br/><br/><pre><code>set string &lt;Self; $thisobject$&gt;</code></pre><br/><br/>Just because it's easier to reference #Self#.<br/><br/>For some reason, manually setting quest.lastobject at other times doesn't work, so in the beforeturn script I set it to equal a variable that I have already set.  In this case, #Game_LastObject#.  Even then, using the word 'it' in a command fails.",
      "PostDate": "2007-01-19T18:06:43+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12277",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "Oh man that was exciting. I hurriedly threw this together thinking you and I were both racing towards the same solution.\n\nThe trick was that Quest only identifies an object as the #quest.lastobject# variable once the object has been defined using the input #@variable# to identify the actual game object a player was referring to as an alias. So the trick is to identify objects without the @ modifier for variables, which is easy enough.\n\nHere's my sloppy code to show that it works, referring to the objects as IT. Realistically, you could re-use all of the same variables in the Before/After turn scripts, I just gave each it's own set for clarity. It also displays a bit ugly, but I'll probably go ahead and pretty things up later.\n\nThe open challenge was awesome fun, and if you think of any other challenges post them.\n\n\n[code:1jyro526]\n' &quot;IT-Game&quot;\n\ndefine game &lt;IT-Game&gt;\n\tasl-version &lt;400&gt;\n\tgametype singleplayer\n\tstart &lt;IT-Room&gt;\n\tgame author &lt;TheRizzle&gt;\n\tgame info &lt;A sample/tutorial example on implementing the use of IT to refer to the last used object&#46;&gt;\n\tbeforeturn &#123;\n\t\tif &#40; $lengthof&#40;#quest&#46;command#&#41;$ &gt; 0 &#41; then &#123;\n\t\tset numeric &lt;quest&#46;SubIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt;\n\t\tset numeric &lt;quest&#46;SubIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt;\n\t\tset numeric &lt;quest&#46;SubIT-Math; %quest&#46;SubIT-LocateEnd% - %quest&#46;SubIT-LocateStart%&gt;\n\t\tset string &lt;quest&#46;SubIT-Parse; $right&#40;#quest&#46;command#; %quest&#46;SubIT-Math%&#41;$&gt;\n\t\tset string &lt;quest&#46;SubIT-Format; $left&#40;#quest&#46;command#; %quest&#46;SubIT-LocateStart%&#41;$&gt;\n\t\tif &#40; #quest&#46;SubIT-Parse# = it &#41; then exec &lt;#quest&#46;SubIT-Format# #quest&#46;FindIT-Parse#&gt; else msg &lt;no&gt;\n\t\t&#125;\n\t&#125;\n\tafterturn &#123;\n\t\tset numeric &lt;quest&#46;FindIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt;\n\t\tset numeric &lt;quest&#46;FindIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt;\n\t\tset numeric &lt;quest&#46;FindIT-Math; %quest&#46;FindIT-LocateEnd% - %quest&#46;FindIT-LocateStart%&gt;\n\t\tset string &lt;quest&#46;FindIT-Parse; $right&#40;#quest&#46;command#;%quest&#46;FindIT-Math%&#41;$&gt;\n\t\tmsg &lt;It = #quest&#46;FindIT-Parse#&gt;\n\t&#125;\n\tcommand &lt;push #object#&gt; &#123; \n\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt;\n\t&#125;\n\tcommand &lt;punch #object#&gt; &#123;\n\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; punch&#41;$&gt;\n\t&#125;\nend define\n\ndefine options\n\tdebug on\n\tpanes disabled\nend define\n\ndefine room &lt;IT-Room&gt;\n\n\tdefine object &lt;obj001&gt;\n\t\talias &lt;ball&gt;\n\t\tlook &lt;You see a blue ball&#46;&gt;\n\t\tprefix &lt;a blue&gt;\n\t\tdisplaytype &lt;Object&gt;\n\t\tarticle &lt;it&gt;\n\t\tgender &lt;it&gt;\n\t\tproperties &lt;push=You push the ball&#46;; punch=You punch the ball&#46;&gt;\n\tend define\n\n\tdefine object &lt;obj002&gt;\n\t\talias &lt;dog&gt;\n\t\tlook &lt;You see a brown dog&#46;&gt;\n\t\tprefix &lt;a brown&gt;\n\t\tdisplaytype &lt;Object&gt;\n\t\tarticle &lt;it&gt;\n\t\tgender &lt;it&gt;\n\t\tproperties &lt;push=You push the dog&#46;; punch=You punch the dog&#46;&gt;\n\tend define\n\nend define\n\n[/code:1jyro526]",
      "EditableFormat": "bbcode",
      "HTML": "Oh man that was exciting. I hurriedly threw this together thinking you and I were both racing towards the same solution.<br/><br/>The trick was that Quest only identifies an object as the #quest.lastobject# variable once the object has been defined using the input #@variable# to identify the actual game object a player was referring to as an alias. So the trick is to identify objects without the @ modifier for variables, which is easy enough.<br/><br/>Here's my sloppy code to show that it works, referring to the objects as IT. Realistically, you could re-use all of the same variables in the Before/After turn scripts, I just gave each it's own set for clarity. It also displays a bit ugly, but I'll probably go ahead and pretty things up later.<br/><br/>The open challenge was awesome fun, and if you think of any other challenges post them.<br/><br/><br/><pre><code><br/>' &quot;IT-Game&quot;<br/><br/>define game &lt;IT-Game&gt;<br/>\tasl-version &lt;400&gt;<br/>\tgametype singleplayer<br/>\tstart &lt;IT-Room&gt;<br/>\tgame author &lt;TheRizzle&gt;<br/>\tgame info &lt;A sample/tutorial example on implementing the use of IT to refer to the last used object&#46;&gt;<br/>\tbeforeturn &#123;<br/>\t\tif &#40; $lengthof&#40;#quest&#46;command#&#41;$ &gt; 0 &#41; then &#123;<br/>\t\tset numeric &lt;quest&#46;SubIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt;<br/>\t\tset numeric &lt;quest&#46;SubIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt;<br/>\t\tset numeric &lt;quest&#46;SubIT-Math; %quest&#46;SubIT-LocateEnd% - %quest&#46;SubIT-LocateStart%&gt;<br/>\t\tset string &lt;quest&#46;SubIT-Parse; $right&#40;#quest&#46;command#; %quest&#46;SubIT-Math%&#41;$&gt;<br/>\t\tset string &lt;quest&#46;SubIT-Format; $left&#40;#quest&#46;command#; %quest&#46;SubIT-LocateStart%&#41;$&gt;<br/>\t\tif &#40; #quest&#46;SubIT-Parse# = it &#41; then exec &lt;#quest&#46;SubIT-Format# #quest&#46;FindIT-Parse#&gt; else msg &lt;no&gt;<br/>\t\t&#125;<br/>\t&#125;<br/>\tafterturn &#123;<br/>\t\tset numeric &lt;quest&#46;FindIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt;<br/>\t\tset numeric &lt;quest&#46;FindIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt;<br/>\t\tset numeric &lt;quest&#46;FindIT-Math; %quest&#46;FindIT-LocateEnd% - %quest&#46;FindIT-LocateStart%&gt;<br/>\t\tset string &lt;quest&#46;FindIT-Parse; $right&#40;#quest&#46;command#;%quest&#46;FindIT-Math%&#41;$&gt;<br/>\t\tmsg &lt;It = #quest&#46;FindIT-Parse#&gt;<br/>\t&#125;<br/>\tcommand &lt;push #object#&gt; &#123; <br/>\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt;<br/>\t&#125;<br/>\tcommand &lt;punch #object#&gt; &#123;<br/>\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; punch&#41;$&gt;<br/>\t&#125;<br/>end define<br/><br/>define options<br/>\tdebug on<br/>\tpanes disabled<br/>end define<br/><br/>define room &lt;IT-Room&gt;<br/><br/>\tdefine object &lt;obj001&gt;<br/>\t\talias &lt;ball&gt;<br/>\t\tlook &lt;You see a blue ball&#46;&gt;<br/>\t\tprefix &lt;a blue&gt;<br/>\t\tdisplaytype &lt;Object&gt;<br/>\t\tarticle &lt;it&gt;<br/>\t\tgender &lt;it&gt;<br/>\t\tproperties &lt;push=You push the ball&#46;; punch=You punch the ball&#46;&gt;<br/>\tend define<br/><br/>\tdefine object &lt;obj002&gt;<br/>\t\talias &lt;dog&gt;<br/>\t\tlook &lt;You see a brown dog&#46;&gt;<br/>\t\tprefix &lt;a brown&gt;<br/>\t\tdisplaytype &lt;Object&gt;<br/>\t\tarticle &lt;it&gt;<br/>\t\tgender &lt;it&gt;<br/>\t\tproperties &lt;push=You push the dog&#46;; punch=You punch the dog&#46;&gt;<br/>\tend define<br/><br/>end define<br/><br/></code></pre>",
      "PostDate": "2007-01-19T19:31:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12281",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:tmvyu1aa]Oh man that was exciting. I hurriedly threw this together thinking you and I were both racing towards the same solution. [/quote:tmvyu1aa]\n\nI think we were.\n\n[quote:tmvyu1aa]The open challenge was awesome fun, and if you think of any other challenges post them. [/quote:tmvyu1aa]\n\nSure, I think it's fun too.  And if you've got any, lemme' know.  I'm actively coding a game right now, so problems are bound to crop up.  I'll be sure to post them before I figure them out.\n\nBut.  The fun ain't over with this one.  Look how I changed your code:\n\n[code:tmvyu1aa]' &quot;IT-Game&quot; \n\ndefine game &lt;IT-Game&gt; \n   asl-version &lt;400&gt; \n   gametype singleplayer \n   start &lt;IT-Room&gt; \n   game author &lt;TheRizzle&gt; \n   game info &lt;A sample/tutorial example on implementing the use of IT to refer to the last used object&#46;&gt; \n   beforeturn &#123; \n      if &#40; $lengthof&#40;#quest&#46;command#&#41;$ &gt; 0 &#41; then &#123; \n      set numeric &lt;quest&#46;SubIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt; \n      set numeric &lt;quest&#46;SubIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt; \n      set numeric &lt;quest&#46;SubIT-Math; %quest&#46;SubIT-LocateEnd% - %quest&#46;SubIT-LocateStart%&gt; \n      set string &lt;quest&#46;SubIT-Parse; $right&#40;#quest&#46;command#; %quest&#46;SubIT-Math%&#41;$&gt; \n      set string &lt;quest&#46;SubIT-Format; $left&#40;#quest&#46;command#; %quest&#46;SubIT-LocateStart%&#41;$&gt; \n      if &#40; #quest&#46;SubIT-Parse# = it &#41; then exec &lt;#quest&#46;SubIT-Format# #quest&#46;FindIT-Parse#&gt; else msg &lt;no&gt; \n      &#125; \n   &#125; \n   afterturn &#123; \n      set numeric &lt;quest&#46;FindIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt; \n      set numeric &lt;quest&#46;FindIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt; \n      set numeric &lt;quest&#46;FindIT-Math; %quest&#46;FindIT-LocateEnd% - %quest&#46;FindIT-LocateStart%&gt; \n      set string &lt;quest&#46;FindIT-Parse; $right&#40;#quest&#46;command#;%quest&#46;FindIT-Math%&#41;$&gt; \n      msg &lt;It = #quest&#46;FindIT-Parse#&gt; \n   &#125; \n   command &lt;push #object#&gt; &#123; \n      for each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt; \n   &#125; \n   command &lt;punch #object#&gt; &#123; \n      for each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; punch&#41;$&gt; \n   &#125; \nend define \n\ndefine options \n   debug on \n   panes disabled \nend define \n\ndefine room &lt;IT-Room&gt; \n\n   define object &lt;obj001&gt; \n      alias &lt;ball&gt; \n      look &lt;You see a blue ball&#46;&gt; \n      prefix &lt;a blue&gt; \n      displaytype &lt;Object&gt; \n      article &lt;it&gt; \n      gender &lt;it&gt; \n      properties &lt;push=You push the ball&#46;; punch=You punch the ball&#46;&gt; \n   end define \n\n   define object &lt;obj002&gt; \n      alias &lt;dog&gt; \n      look &lt;You see a brown dog&#46;&gt; \n      alt &lt;brown; brown dog&gt;\n      prefix &lt;a brown&gt; \n      displaytype &lt;Object&gt; \n      article &lt;it&gt; \n      gender &lt;it&gt; \n      properties &lt;push=You push the brown dog&#46;; punch=You punch the brown dog&#46;&gt; \n   end define \n   \n   define object &lt;obj003&gt; \n         alias &lt;dog&gt;\n         alt &lt;grey; grey dog&gt;\n         look &lt;You see a grey dog&#46;&gt; \n         prefix &lt;a grey&gt; \n         displaytype &lt;Object&gt; \n         article &lt;it&gt; \n         gender &lt;it&gt; \n         properties &lt;push=You push the grey dog&#46;; punch=You punch the grey dog&#46;&gt; \n   end define \n\nend define[/code:tmvyu1aa] \n\nWith two dogs, albeit different colors, I push them both when typing 'push dog'.  Decidedly not user-friendly - I should be given a disambiguation here.  Any solution?  I got about as far as you did, when I realized that I'd need to disambiguate.  The alt property is unreadable in Quest.  One solution I can think of is to create an alternate alt property, then use InStr.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Oh man that was exciting. I hurriedly threw this together thinking you and I were both racing towards the same solution. </p></blockquote><br/><br/>I think we were.<br/><br/><blockquote><p>The open challenge was awesome fun, and if you think of any other challenges post them. </p></blockquote><br/><br/>Sure, I think it's fun too.  And if you've got any, lemme' know.  I'm actively coding a game right now, so problems are bound to crop up.  I'll be sure to post them before I figure them out.<br/><br/>But.  The fun ain't over with this one.  Look how I changed your code:<br/><br/><pre><code>' &quot;IT-Game&quot; <br/><br/>define game &lt;IT-Game&gt; <br/>   asl-version &lt;400&gt; <br/>   gametype singleplayer <br/>   start &lt;IT-Room&gt; <br/>   game author &lt;TheRizzle&gt; <br/>   game info &lt;A sample/tutorial example on implementing the use of IT to refer to the last used object&#46;&gt; <br/>   beforeturn &#123; <br/>      if &#40; $lengthof&#40;#quest&#46;command#&#41;$ &gt; 0 &#41; then &#123; <br/>      set numeric &lt;quest&#46;SubIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt; <br/>      set numeric &lt;quest&#46;SubIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt; <br/>      set numeric &lt;quest&#46;SubIT-Math; %quest&#46;SubIT-LocateEnd% - %quest&#46;SubIT-LocateStart%&gt; <br/>      set string &lt;quest&#46;SubIT-Parse; $right&#40;#quest&#46;command#; %quest&#46;SubIT-Math%&#41;$&gt; <br/>      set string &lt;quest&#46;SubIT-Format; $left&#40;#quest&#46;command#; %quest&#46;SubIT-LocateStart%&#41;$&gt; <br/>      if &#40; #quest&#46;SubIT-Parse# = it &#41; then exec &lt;#quest&#46;SubIT-Format# #quest&#46;FindIT-Parse#&gt; else msg &lt;no&gt; <br/>      &#125; <br/>   &#125; <br/>   afterturn &#123; <br/>      set numeric &lt;quest&#46;FindIT-LocateStart; $instr&#40;#quest&#46;command#;_;&#41;$&gt; <br/>      set numeric &lt;quest&#46;FindIT-LocateEnd; $lengthof&#40;#quest&#46;command#&#41;$&gt; <br/>      set numeric &lt;quest&#46;FindIT-Math; %quest&#46;FindIT-LocateEnd% - %quest&#46;FindIT-LocateStart%&gt; <br/>      set string &lt;quest&#46;FindIT-Parse; $right&#40;#quest&#46;command#;%quest&#46;FindIT-Math%&#41;$&gt; <br/>      msg &lt;It = #quest&#46;FindIT-Parse#&gt; <br/>   &#125; <br/>   command &lt;push #object#&gt; &#123; <br/>      for each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt; <br/>   &#125; <br/>   command &lt;punch #object#&gt; &#123; <br/>      for each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #object# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; punch&#41;$&gt; <br/>   &#125; <br/>end define <br/><br/>define options <br/>   debug on <br/>   panes disabled <br/>end define <br/><br/>define room &lt;IT-Room&gt; <br/><br/>   define object &lt;obj001&gt; <br/>      alias &lt;ball&gt; <br/>      look &lt;You see a blue ball&#46;&gt; <br/>      prefix &lt;a blue&gt; <br/>      displaytype &lt;Object&gt; <br/>      article &lt;it&gt; <br/>      gender &lt;it&gt; <br/>      properties &lt;push=You push the ball&#46;; punch=You punch the ball&#46;&gt; <br/>   end define <br/><br/>   define object &lt;obj002&gt; <br/>      alias &lt;dog&gt; <br/>      look &lt;You see a brown dog&#46;&gt; <br/>      alt &lt;brown; brown dog&gt;<br/>      prefix &lt;a brown&gt; <br/>      displaytype &lt;Object&gt; <br/>      article &lt;it&gt; <br/>      gender &lt;it&gt; <br/>      properties &lt;push=You push the brown dog&#46;; punch=You punch the brown dog&#46;&gt; <br/>   end define <br/>   <br/>   define object &lt;obj003&gt; <br/>         alias &lt;dog&gt;<br/>         alt &lt;grey; grey dog&gt;<br/>         look &lt;You see a grey dog&#46;&gt; <br/>         prefix &lt;a grey&gt; <br/>         displaytype &lt;Object&gt; <br/>         article &lt;it&gt; <br/>         gender &lt;it&gt; <br/>         properties &lt;push=You push the grey dog&#46;; punch=You punch the grey dog&#46;&gt; <br/>   end define <br/><br/>end define</code></pre> <br/><br/>With two dogs, albeit different colors, I push them both when typing 'push dog'.  Decidedly not user-friendly - I should be given a disambiguation here.  Any solution?  I got about as far as you did, when I realized that I'd need to disambiguate.  The alt property is unreadable in Quest.  One solution I can think of is to create an alternate alt property, then use InStr.",
      "PostDate": "2007-01-19T20:29:40+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12282",
      "UserId": 0,
      "Username": "I think Im Dead",
      "UserAvatar": null,
      "UserGravatar": "662782b48efa4728f8d0773b83c01ddf",
      "EditableText": "Well the easier solution for this aspect, rather than disambiguate in this step, it'd be preferred to store the object name instead of alias so that IT would always refer to the intended object, ie; last used.\n\nNow disambiguation in the typical manner Quest uses, popping up a window to select the desired object, just isn't possible. However, analyzing each object in the room then giving a list option of objects with that alias, taking the choice then re-executing the original command while referring to the desired object name.\n\nNow, I've complete a script which should do something along these lines, except that there appears to be a problem with Quest 4.0 as I'm getting a runtime out of range error due to a numeric variable resting inside of a string variables name. It could be my coding, although I'm quite sure that I've used  numerics inside of strings a thousand times prior to 4.0. Either way, here's the code, albeit unfinished due to being unable to process the list, but here's hoping Alex reads this post and can clarify if it's a true bug or not.\n\nP.S. I have tried the numeric both inside and outside of [ ] brackets, to no avail.\n\n[code:3ckbi9fv]\n\tbeforeturn &#123;\n\t\tif &#40; $lengthof&#40;#quest&#46;input#&#41;$ &gt; 0 &#41; then &#123; \n\t\t\tset numeric &lt;dis-obj-count; 0&gt;\n\t\t\tfor each object in &lt;#quest&#46;currentroom#&gt; &#123;\n\t\t\t\tif &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #quest&#46;input# &#41; then &#123;\n\t\t\t\t\tset numeric &lt;dis-obj-count; %dis-obj-count% + 1&gt;\n\t\t\t\t\tset string &lt;dis-obj&#91;%dis-obj-count%&#93;; #quest&#46;thing#&gt;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\tif &#40; %dis-obj-count% &gt; 1 &#41; then &#123;\n\t\t\t\tmsg &lt;Which object did you mean?|n&gt;\n\t\t\t\tfor &lt;i;1;%dis-obj-count%&gt; &#123;\n\t\t\t\t\tmsg &lt;%i%&#46; $displayname&#40;#dis-obj&#91;%dis-obj-count%&#93;#&#41;$|n&gt;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\t' Selection of applicable object choices code would go here&#46;\n\t\t&#125;\n\t&#125;\n\tcommand &lt;push #quest&#46;input#&gt; &#123; \n\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #quest&#46;input# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt;\n\t&#125;\n[/code:3ckbi9fv]",
      "EditableFormat": "bbcode",
      "HTML": "Well the easier solution for this aspect, rather than disambiguate in this step, it'd be preferred to store the object name instead of alias so that IT would always refer to the intended object, ie; last used.<br/><br/>Now disambiguation in the typical manner Quest uses, popping up a window to select the desired object, just isn't possible. However, analyzing each object in the room then giving a list option of objects with that alias, taking the choice then re-executing the original command while referring to the desired object name.<br/><br/>Now, I've complete a script which should do something along these lines, except that there appears to be a problem with Quest 4.0 as I'm getting a runtime out of range error due to a numeric variable resting inside of a string variables name. It could be my coding, although I'm quite sure that I've used  numerics inside of strings a thousand times prior to 4.0. Either way, here's the code, albeit unfinished due to being unable to process the list, but here's hoping Alex reads this post and can clarify if it's a true bug or not.<br/><br/>P.S. I have tried the numeric both inside and outside of [ ] brackets, to no avail.<br/><br/><pre><code><br/>\tbeforeturn &#123;<br/>\t\tif &#40; $lengthof&#40;#quest&#46;input#&#41;$ &gt; 0 &#41; then &#123; <br/>\t\t\tset numeric &lt;dis-obj-count; 0&gt;<br/>\t\t\tfor each object in &lt;#quest&#46;currentroom#&gt; &#123;<br/>\t\t\t\tif &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #quest&#46;input# &#41; then &#123;<br/>\t\t\t\t\tset numeric &lt;dis-obj-count; %dis-obj-count% + 1&gt;<br/>\t\t\t\t\tset string &lt;dis-obj&#91;%dis-obj-count%&#93;; #quest&#46;thing#&gt;<br/>\t\t\t\t&#125;<br/>\t\t\t&#125;<br/>\t\t\tif &#40; %dis-obj-count% &gt; 1 &#41; then &#123;<br/>\t\t\t\tmsg &lt;Which object did you mean?|n&gt;<br/>\t\t\t\tfor &lt;i;1;%dis-obj-count%&gt; &#123;<br/>\t\t\t\t\tmsg &lt;%i%&#46; $displayname&#40;#dis-obj&#91;%dis-obj-count%&#93;#&#41;$|n&gt;<br/>\t\t\t\t&#125;<br/>\t\t\t&#125;<br/>\t\t\t' Selection of applicable object choices code would go here&#46;<br/>\t\t&#125;<br/>\t&#125;<br/>\tcommand &lt;push #quest&#46;input#&gt; &#123; <br/>\t\tfor each object in &lt;#quest&#46;currentroom#&gt; if &#40; $objectproperty&#40;#quest&#46;thing#; alias&#41;$ = #quest&#46;input# &#41; then msg &lt;$objectproperty&#40;#quest&#46;thing#; push&#41;$&gt;<br/>\t&#125;<br/></code></pre>",
      "PostDate": "2007-01-19T21:30:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12283",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "The correct syntax would be #dis-obj[dis-obj-count]#.\n\nAs for the rest of this thread, I'm somewhat baffled. I think a feature request would be simpler than all of that code... but maybe less fun <!-- s:) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "The correct syntax would be #dis-obj[dis-obj-count]#.<br/><br/>As for the rest of this thread, I'm somewhat baffled. I think a feature request would be simpler than all of that code... but maybe less fun <!-- s:) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2007-01-19T22:14:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12287",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:2nvftf0k]As for the rest of this thread, I'm somewhat baffled. I think a feature request would be simpler than all of that code... but maybe less fun [/quote:2nvftf0k]\n\nMore fun and probably (if solved) more expedient than waiting for the next release.  Of course, this exposes problems and transmutes them into requests.\n\nWhat you've done, ITID, is made your own disambiguation menu, albeit in-game rather than in a popup.  I did a similar thing earlier, [url=http&#58;//www&#46;axeuk&#46;com/phpBB2/viewtopic&#46;php?t=1209&amp;highlight=:2nvftf0k]here[/url:2nvftf0k], (if you follow the thread a bit).  This was the same solution I was thinking of, except yours is much smaller and cleaner than what I was going to attempt.\n\nWell, I'm off to feature request.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>As for the rest of this thread, I'm somewhat baffled. I think a feature request would be simpler than all of that code... but maybe less fun </p></blockquote><br/><br/>More fun and probably (if solved) more expedient than waiting for the next release.  Of course, this exposes problems and transmutes them into requests.<br/><br/>What you've done, ITID, is made your own disambiguation menu, albeit in-game rather than in a popup.  I did a similar thing earlier, <a href=\"http&#58;//www&#46;axeuk&#46;com/phpBB2/viewtopic&#46;php?t=1209&amp;highlight=\" rel=\"nofollow\">here</a>, (if you follow the thread a bit).  This was the same solution I was thinking of, except yours is much smaller and cleaner than what I was going to attempt.<br/><br/>Well, I'm off to feature request.",
      "PostDate": "2007-01-19T23:59:36+00:00",
      "LastEditDate": null
    }
  ]
}
