{
  "Topic": {
    "TopicId": "nqzl0-m0u0aani3gpjfbsa",
    "ForumId": "10",
    "Title": "Coins",
    "LastUpdated": "2018-05-30T21:57:20.7400125Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "632c9e7b-3bca-4cb3-9e5d-049cb5da8461",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm back to this again.  (Sorry.)\r\n\r\n---\r\nI still haven't found a way to easily handle coins (or tokens, or any object can \r\n\r\n---\r\nI know it an be done.  It's just that I don't know how to code it.\r\n\r\nWhen I am in this situation, I see if Inform 7 will handle it.  If it will, that means I'm definitely slacking, because Quest can do anything Inform can do.\r\n\r\nSo...  Here is the entire code of an Inform 7 game which will handle tokens as a player would expect:\r\n\r\n```i7\r\n\"Coins\" by KV\r\n\r\nThe Braying Ass is a room.  \"This tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.\"\r\n\r\n\r\nA token is a kind of thing.\r\n\r\n10 tokens are carried by the player.\r\n```\r\n\r\n---\r\n\r\n\r\n\r\n***Coins\r\nAn Interactive Fiction by KV\r\nRelease 1 / Serial number 180530 / Inform 7 build 6M62 (I6/v6.33 lib 6/12N) SD***\r\n\r\n**Braying Ass**\r\nThis tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.\r\n\r\n\\>i\r\nYou are carrying:\r\n  ten tokens\r\n\r\n\\>drop tokens\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\n\r\n\\>i\r\nYou are carrying nothing.\r\n\r\n\\>l\r\nBraying Ass\r\nThis tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.\r\n\r\nYou can see ten tokens here.\r\n\r\n\\>get one token\r\nTaken.\r\n\r\n\\>get 5 tokens\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\n\r\n\\>i\r\nYou are carrying:\r\n  six tokens\r\n\r\n\\>drop 3 tokens\r\ntoken: Dropped.\r\ntoken: Dropped.\r\ntoken: Dropped.\r\n\r\n\\>get six tokens\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\ntoken: Taken.\r\n\r\n\\>\r\n\r\n---\r\nHave I posted this same thing before?  If so, I apologize!\r\n\r\n...but I know this can be pulled off in Quest.  I'm pretty sure I'm just over-complicating things.\r\n\r\nI'm thinking maybe it could work like Groups in Pixie's NpcLib, but I'll be [expletive deleted] if I can see how that code works.\r\n\r\n---\r\nAgain, sorry to post about this again.  I can usually find old posts with the search, but I looked for old posts concerning this for quite a while before giving up and creating this thread.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm back to this again.  (Sorry.)</p>\n<hr>\n<p>I still haven't found a way to easily handle coins (or tokens, or any object can</p>\n<hr>\n<p>I know it an be done.  It's just that I don't know how to code it.</p>\n<p>When I am in this situation, I see if Inform 7 will handle it.  If it will, that means I'm definitely slacking, because Quest can do anything Inform can do.</p>\n<p>So...  Here is the entire code of an Inform 7 game which will handle tokens as a player would expect:</p>\n<pre><code>\"Coins\" by KV\n\nThe Braying Ass is a room.  \"This tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.\"\n\n\nA token is a kind of thing.\n\n10 tokens are carried by the player.\n</code></pre>\n<hr>\n<p><strong><em>Coins<br>\nAn Interactive Fiction by KV<br>\nRelease 1 / Serial number 180530 / Inform 7 build 6M62 (I6/v6.33 lib 6/12N) SD</em></strong></p>\n<p><strong>Braying Ass</strong><br>\nThis tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.</p>\n<p>&gt;i<br>\nYou are carrying:<br>\nten tokens</p>\n<p>&gt;drop tokens<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.</p>\n<p>&gt;i<br>\nYou are carrying nothing.</p>\n<p>&gt;l<br>\nBraying Ass<br>\nThis tavern looks like it hasn't been cleaned for at least three decades.  Besides that, it's pretty nice.</p>\n<p>You can see ten tokens here.</p>\n<p>&gt;get one token<br>\nTaken.</p>\n<p>&gt;get 5 tokens<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.</p>\n<p>&gt;i<br>\nYou are carrying:<br>\nsix tokens</p>\n<p>&gt;drop 3 tokens<br>\ntoken: Dropped.<br>\ntoken: Dropped.<br>\ntoken: Dropped.</p>\n<p>&gt;get six tokens<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.<br>\ntoken: Taken.</p>\n<p>&gt;</p>\n<hr>\n<p>Have I posted this same thing before?  If so, I apologize!</p>\n<p>...but I know this can be pulled off in Quest.  I'm pretty sure I'm just over-complicating things.</p>\n<p>I'm thinking maybe it could work like Groups in Pixie's NpcLib, but I'll be [expletive deleted] if I can see how that code works.</p>\n<hr>\n<p>Again, sorry to post about this again.  I can usually find old posts with the search, but I looked for old posts concerning this for quite a while before giving up and creating this thread.</p>\n\n",
      "PostDate": "2018-05-30T21:57:20.7400125Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "89f20656-e95c-49f1-967d-91dc3d5dc95a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I had all the parts of that sorted; but never got around to turning it into something I could share.\r\n\r\nMy method is to turn the token into a transparent container; and have the changedparent script put them inside each other and rename them (so the outermost one has the alias \"ten tokens\" (with the alt \"tokens\"), the one inside that is named \"nine tokens\", and so on down to the innermost \"one token\" (alts \"1 token\" and \"token\").\r\nThen you have a turnscript (the same one that indents your listalias) add a prefix to the listalias, which causes updateList to skip it. So even though they're in a container, you only see the top one. The bit that gave me trouble was hiding the inner items from the \"You can see\" list; which is a real pain if you can't override the functions in CoreDescriptions. I managed it in JS, but in code so ugly that I wouldn't share it. Really needs polishing.",
      "EditableFormat": "markdown",
      "HTML": "<p>I had all the parts of that sorted; but never got around to turning it into something I could share.</p>\n<p>My method is to turn the token into a transparent container; and have the changedparent script put them inside each other and rename them (so the outermost one has the alias \"ten tokens\" (with the alt \"tokens\"), the one inside that is named \"nine tokens\", and so on down to the innermost \"one token\" (alts \"1 token\" and \"token\").<br>\nThen you have a turnscript (the same one that indents your listalias) add a prefix to the listalias, which causes updateList to skip it. So even though they're in a container, you only see the top one. The bit that gave me trouble was hiding the inner items from the \"You can see\" list; which is a real pain if you can't override the functions in CoreDescriptions. I managed it in JS, but in code so ugly that I wouldn't share it. Really needs polishing.</p>\n\n",
      "PostDate": "2018-05-30T22:23:49.1849596Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f8734962-fd21-44f1-b400-abdb3f4ef27f",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> My method is to turn the token into a transparent container; and have the changedparent script put them inside each other and rename them...\r\n\r\nYeah!  That's what I was searching for!\r\n\r\nI'll be patient if it's a work-in-progress, though.\r\n\r\n>  I managed it in JS, but in code so ugly that I wouldn't share it. \r\n\r\nThat poor code!\r\n\r\nYou have your way with her when no one is looking, but you won't take her out in public!\r\n\r\n\r\n---\r\nPS\r\n\r\nWhat's the name of your new book, mrangel?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>My method is to turn the token into a transparent container; and have the changedparent script put them inside each other and rename them...</p>\n</blockquote>\n<p>Yeah!  That's what I was searching for!</p>\n<p>I'll be patient if it's a work-in-progress, though.</p>\n<blockquote>\n<p>I managed it in JS, but in code so ugly that I wouldn't share it.</p>\n</blockquote>\n<p>That poor code!</p>\n<p>You have your way with her when no one is looking, but you won't take her out in public!</p>\n<hr>\n<p>PS</p>\n<p>What's the name of your new book, mrangel?</p>\n\n",
      "PostDate": "2018-05-30T22:53:36.6976728Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4f644bcc-ecff-43de-806a-f5274fbba04e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What's the name of your new book, mrangel?\r\n\r\nThe latest one is <a href=\"https://smarturl.it/whitebox\">Inside the Box</a>. Went from \"pre-order\" to \"live\" 8 minutes ago :D And I'm uploading a new version with a few typos corrected (oops) right now. Hopefully the Kindle thing will manage to update everyone's copy automatically.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What's the name of your new book, mrangel?</p>\n</blockquote>\n<p>The latest one is <a href=\"https://smarturl.it/whitebox\">Inside the Box</a>. Went from \"pre-order\" to \"live\" 8 minutes ago :D And I'm uploading a new version with a few typos corrected (oops) right now. Hopefully the Kindle thing will manage to update everyone's copy automatically.</p>\n\n",
      "PostDate": "2018-05-30T23:09:58.0978803Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "29f9edc4-23d6-4305-93b1-bf2edb5a530c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT:** This is stupid. See below.\r\n\r\n... as I was looking back at this just now, I see an easier way to do it.\r\n`token.contentsprefix = \":HIDECONTENTS:\"`\r\n\r\n```\r\nrealAddText = addText;\r\nfunction addText(t) {\r\n  while (t.match(/\\(:HIDECONTENTS:[^\\(\\)]+\\)/)) {\r\n    t = t.replace(/\\s*\\(:HIDECONTENTS:[^\\(\\)]+\\)\\s*/);\r\n  }\r\n  realAddText(t);\r\n}\r\n```\r\n\r\nHiding the extra elements in the side panes is probably a trivial modification to your existing turnscript. Code fragment:\r\n```\r\nif (GetBoolean(obj, \"stacking\") and Equal(obj.prototype, obj.parent.prototype)) {\r\n  // the same thing you're doing to hide scenery objects in the inventory\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT:</strong> This is stupid. See below.</p>\n<p>... as I was looking back at this just now, I see an easier way to do it.<br>\n<code>token.contentsprefix = \":HIDECONTENTS:\"</code></p>\n<pre><code>realAddText = addText;\nfunction addText(t) {\n  while (t.match(/\\(:HIDECONTENTS:[^\\(\\)]+\\)/)) {\n    t = t.replace(/\\s*\\(:HIDECONTENTS:[^\\(\\)]+\\)\\s*/);\n  }\n  realAddText(t);\n}\n</code></pre>\n<p>Hiding the extra elements in the side panes is probably a trivial modification to your existing turnscript. Code fragment:</p>\n<pre><code>if (GetBoolean(obj, \"stacking\") and Equal(obj.prototype, obj.parent.prototype)) {\n  // the same thing you're doing to hide scenery objects in the inventory\n}\n</code></pre>\n\n",
      "PostDate": "2018-05-30T23:24:10.1838639Z",
      "LastEditDate": "2018-06-01T09:32:41.6054657Z",
      "link": null
    },
    {
      "PostId": "289f707f-3eba-4ae0-893b-3be1ca0464b6",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Cool!\r\n\r\nI'll try this out shortly.",
      "EditableFormat": "markdown",
      "HTML": "<p>Cool!</p>\n<p>I'll try this out shortly.</p>\n\n",
      "PostDate": "2018-05-30T23:28:57.0798105Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b9dcd1d-f603-4d1d-97c4-d0a2cee80709",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So your \"ten tokens\", \"three tokens\", \"token\", etc. objects are all in scope, all reachable, but we have javascript so that only the top-level one shows up in the inventory/room/panes.\r\n\r\nThen the stacking scripts themselves:\r\n\r\n```\r\nstackable_object.changedparent => {\r\n  if (not this.parent = null) {\r\n    stackable = FilterByAttribute(GetDirectChildren(this.parent), \"prototype\", this.prototype)\r\n    if (ListCount(stackable) > 1) {\r\n      stackparent = ListItem(stackable, 0)\r\n      list remove (stackable, stackparent)\r\n      foreach (o, stackable) {\r\n        o.parent = stackparent\r\n      }\r\n    }\r\n    if (Equal(this.parent.prototype, this.prototype)) {\r\n      do (this.parent, \"updateStackAlias\")\r\n    }\r\n  }\r\n  if (not oldvalue = null) {\r\n    if (Equal(oldvalue.prototype, this.prototype)) {\r\n      do (oldvalue, \"updateStackAlias\")\r\n    }\r\n  }\r\n  do (this, \"updateStackAlias\")\r\n}\r\n\r\nstackable_object.updateStackAlias => {\r\n  if (HasAttribute(this, \"stackalias\")) {\r\n    this.alt = ListExclude(this.alt, this.stackalias)\r\n  }\r\n  this.stackalias = NewStringList()\r\n  count = ListCount(FilterByAttribute(GetAllChildObjects(this), \"prototype\", this.prototype)) + 1\r\n  if (count = 1) {\r\n    this.alias = this.singular\r\n    this.listalias = this.singular\r\n    list add (this.stackalias, this.singular)\r\n    list add (this.stackalias, \"one \"+this.singular)\r\n    list add (this.stackalias, \"1 \"+this.singular)\r\n  }\r\n  else {\r\n    if (not Equal(this.prototype, this.parent.prototype)) {\r\n      list add (this.stackalias, \"all \"+this.plural)\r\n    }\r\n    this.alias = ToWords(count) + \" \" + this.plural\r\n    this.listalias = this.plural + \" (\"+count+\")\"\r\n    list add (this.stackalias, this.plural)\r\n    list add (this.stackalias, ToWords(count)+\" \"+this.plural)\r\n    list add (this.stackalias, \"\"+count+\" \"+this.plural)\r\n    list add (this.stackalias, this.listalias)\r\n  }\r\n  this.alt = ListCombine (this.alt, this.stackalias)\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>So your \"ten tokens\", \"three tokens\", \"token\", etc. objects are all in scope, all reachable, but we have javascript so that only the top-level one shows up in the inventory/room/panes.</p>\n<p>Then the stacking scripts themselves:</p>\n<pre><code>stackable_object.changedparent =&gt; {\n  if (not this.parent = null) {\n    stackable = FilterByAttribute(GetDirectChildren(this.parent), \"prototype\", this.prototype)\n    if (ListCount(stackable) &gt; 1) {\n      stackparent = ListItem(stackable, 0)\n      list remove (stackable, stackparent)\n      foreach (o, stackable) {\n        o.parent = stackparent\n      }\n    }\n    if (Equal(this.parent.prototype, this.prototype)) {\n      do (this.parent, \"updateStackAlias\")\n    }\n  }\n  if (not oldvalue = null) {\n    if (Equal(oldvalue.prototype, this.prototype)) {\n      do (oldvalue, \"updateStackAlias\")\n    }\n  }\n  do (this, \"updateStackAlias\")\n}\n\nstackable_object.updateStackAlias =&gt; {\n  if (HasAttribute(this, \"stackalias\")) {\n    this.alt = ListExclude(this.alt, this.stackalias)\n  }\n  this.stackalias = NewStringList()\n  count = ListCount(FilterByAttribute(GetAllChildObjects(this), \"prototype\", this.prototype)) + 1\n  if (count = 1) {\n    this.alias = this.singular\n    this.listalias = this.singular\n    list add (this.stackalias, this.singular)\n    list add (this.stackalias, \"one \"+this.singular)\n    list add (this.stackalias, \"1 \"+this.singular)\n  }\n  else {\n    if (not Equal(this.prototype, this.parent.prototype)) {\n      list add (this.stackalias, \"all \"+this.plural)\n    }\n    this.alias = ToWords(count) + \" \" + this.plural\n    this.listalias = this.plural + \" (\"+count+\")\"\n    list add (this.stackalias, this.plural)\n    list add (this.stackalias, ToWords(count)+\" \"+this.plural)\n    list add (this.stackalias, \"\"+count+\" \"+this.plural)\n    list add (this.stackalias, this.listalias)\n  }\n  this.alt = ListCombine (this.alt, this.stackalias)\n}\n</code></pre>\n\n",
      "PostDate": "2018-05-30T23:40:36.6239244Z",
      "LastEditDate": "2018-05-30T23:45:25.2156891Z",
      "link": null
    },
    {
      "PostId": "be0cad1f-edad-4f83-8945-cacd092492da",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Noting that if you type \"get bananas\", it'll give you a disambiguation menu asking how many you want)",
      "EditableFormat": "markdown",
      "HTML": "<p>(Noting that if you type \"get bananas\", it'll give you a disambiguation menu asking how many you want)</p>\n\n",
      "PostDate": "2018-05-30T23:42:24.823404Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca774fbb-1375-4ce6-ad7c-98c342721cfb",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I still haven't tried this code...\r\n\r\n...but I am currently reading this:\r\n\r\n[![Inside the Box by Angel Wedge](https://images-na.ssl-images-amazon.com/images/I/51nNaa5j43L._SY346_.jpg)](https://www.amazon.com/Inside-Box-Angel-Wedge-ebook/dp/B07CP5XS44 \"Inside The Box - Kindle Edition\")",
      "EditableFormat": "markdown",
      "HTML": "<p>I still haven't tried this code...</p>\n<p>...but I am currently reading this:</p>\n<p><a href=\"https://www.amazon.com/Inside-Box-Angel-Wedge-ebook/dp/B07CP5XS44\" title=\"Inside The Box - Kindle Edition\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51nNaa5j43L._SY346_.jpg\" alt=\"Inside the Box by Angel Wedge\"></a></p>\n\n",
      "PostDate": "2018-06-01T05:42:05.4305005Z",
      "LastEditDate": "2018-06-01T05:44:51.3183978Z",
      "link": null
    },
    {
      "PostId": "1cd03684-6459-45ca-88e1-45c0ef187cac",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just realised I'm doing this really inefficiently.\r\nYou don't need to mess about overriding updateList to make an object disappear; just make all but one of the stacked objects scenery. (Assuming you already have the fix so that scenery objects in the inventory are hidden)\r\n\r\nI **think** this should be all you need (apply usual disclaimer; top-of-head coding, not tested):\r\n\r\n(note: can't remember how this works with clones. If you clone a stackable object, you need to ensure that its `changedparent` script is called, because I don't remember if 'changed' scripts are called for clones when they are first assigned a value)\r\n```\r\n<function name=\"MakeStackable\" parameters=\"object\">\r\n  object.changedparent => {\r\n    this.hasbeenmoved = true\r\n    if (not this.parent = null) {\r\n      stackable = FilterByAttribute(GetDirectChildren(this.parent), \"prototype\", this.prototype)\r\n      if (ListCount(stackable) > 1) {\r\n        // GetDirectChildren returns the objects in the same order they will appear in a disambiguation menu\r\n        // if the player types \"get bananas\". I think this is the most sensible order to put them in.\r\n        if (Equal(this.prototype, this.parent.prototype)) {\r\n          stackparent = ListItem(stackable, ListCount(stackable)-1)\r\n        }\r\n        else {\r\n          stackparent = ListItem(stackable, 0)\r\n        }\r\n        list remove (stackable, stackparent)\r\n        foreach (o, stackable) {\r\n          o.parent = stackparent\r\n        }\r\n      }\r\n      if (Equal(this.parent.prototype, this.prototype)) {\r\n        do (this.parent, \"updateStackAlias\")\r\n      }\r\n    }\r\n    if (not oldvalue = null) {\r\n      if (Equal(oldvalue.prototype, this.prototype)) {\r\n        do (oldvalue, \"updateStackAlias\")\r\n      }\r\n    }\r\n    do (this, \"updateStackAlias\")\r\n  }\r\n\r\n  object.updateStackAlias => {\r\n    if (not this.parent = null) {\r\n      if (Equal(this.prototype, this.parent.prototype)) {\r\n        if (not GetBoolean(this, \"scenery\")) {\r\n          this.isreallyscenery = false\r\n        }\r\n        this.scenery = true\r\n      }\r\n      else {\r\n        this.scenery = GetBoolean (this, \"isreallyscenery\")\r\n      }\r\n    }\r\n    if (HasAttribute(this, \"stackalias\")) {\r\n      this.alt = ListExclude(this.alt, this.stackalias)\r\n    }\r\n    this.stackalias = NewStringList()\r\n    count = ListCount(FilterByAttribute(GetAllChildObjects(this), \"prototype\", this.prototype)) + 1\r\n    if (count = 1) {\r\n      this.alias = this.singular\r\n      this.listalias = this.singular\r\n      list add (this.stackalias, this.singular)\r\n      list add (this.stackalias, \"one \"+this.singular)\r\n      list add (this.stackalias, \"1 \"+this.singular)\r\n    }\r\n    else {\r\n      if (not Equal(this.prototype, this.parent.prototype)) {\r\n        list add (this.stackalias, \"all \"+this.plural)\r\n        list add (this.stackalias, \"the \"+this.plural)\r\n      }\r\n      this.alias = ToWords(count) + \" \" + this.plural\r\n      this.listalias = this.plural + \" (\"+count+\")\"\r\n      list add (this.stackalias, this.plural)\r\n      list add (this.stackalias, ToWords(count)+\" \"+this.plural)\r\n      list add (this.stackalias, \"\"+count+\" \"+this.plural)\r\n      list add (this.stackalias, this.listalias)\r\n    }\r\n    this.alt = ListCombine (this.alt, this.stackalias)\r\n  }\r\n\r\n  if (not object.parent = null) {\r\n    if (Equal(object.prototype, object.parent.prototype)) {\r\n      object.scenery = true;\r\n    }\r\n  }\r\n  if (not HasString(object, \"plural\")) {\r\n    object.plural = GetDisplayAlias(object)+\"s\"\r\n  }\r\n  if (not HasString(object, \"singular\")) {\r\n    object.singular = GetDisplayAlias(object)+\"s\"\r\n  }\r\n  object.isreallyscenery = GetBoolean(object, \"scenery\")\r\n  do (object, \"updateStackAlias\")\r\n</function>\r\n```\r\n\r\nAnd thanks KV :D So far that book has 1 sale and 23 pages read on Kindle Unlimited, earning me an impressive £1.79",
      "EditableFormat": "markdown",
      "HTML": "<p>I just realised I'm doing this really inefficiently.<br>\nYou don't need to mess about overriding updateList to make an object disappear; just make all but one of the stacked objects scenery. (Assuming you already have the fix so that scenery objects in the inventory are hidden)</p>\n<p>I <strong>think</strong> this should be all you need (apply usual disclaimer; top-of-head coding, not tested):</p>\n<p>(note: can't remember how this works with clones. If you clone a stackable object, you need to ensure that its <code>changedparent</code> script is called, because I don't remember if 'changed' scripts are called for clones when they are first assigned a value)</p>\n<pre><code>&lt;function name=\"MakeStackable\" parameters=\"object\"&gt;\n  object.changedparent =&gt; {\n    this.hasbeenmoved = true\n    if (not this.parent = null) {\n      stackable = FilterByAttribute(GetDirectChildren(this.parent), \"prototype\", this.prototype)\n      if (ListCount(stackable) &gt; 1) {\n        // GetDirectChildren returns the objects in the same order they will appear in a disambiguation menu\n        // if the player types \"get bananas\". I think this is the most sensible order to put them in.\n        if (Equal(this.prototype, this.parent.prototype)) {\n          stackparent = ListItem(stackable, ListCount(stackable)-1)\n        }\n        else {\n          stackparent = ListItem(stackable, 0)\n        }\n        list remove (stackable, stackparent)\n        foreach (o, stackable) {\n          o.parent = stackparent\n        }\n      }\n      if (Equal(this.parent.prototype, this.prototype)) {\n        do (this.parent, \"updateStackAlias\")\n      }\n    }\n    if (not oldvalue = null) {\n      if (Equal(oldvalue.prototype, this.prototype)) {\n        do (oldvalue, \"updateStackAlias\")\n      }\n    }\n    do (this, \"updateStackAlias\")\n  }\n\n  object.updateStackAlias =&gt; {\n    if (not this.parent = null) {\n      if (Equal(this.prototype, this.parent.prototype)) {\n        if (not GetBoolean(this, \"scenery\")) {\n          this.isreallyscenery = false\n        }\n        this.scenery = true\n      }\n      else {\n        this.scenery = GetBoolean (this, \"isreallyscenery\")\n      }\n    }\n    if (HasAttribute(this, \"stackalias\")) {\n      this.alt = ListExclude(this.alt, this.stackalias)\n    }\n    this.stackalias = NewStringList()\n    count = ListCount(FilterByAttribute(GetAllChildObjects(this), \"prototype\", this.prototype)) + 1\n    if (count = 1) {\n      this.alias = this.singular\n      this.listalias = this.singular\n      list add (this.stackalias, this.singular)\n      list add (this.stackalias, \"one \"+this.singular)\n      list add (this.stackalias, \"1 \"+this.singular)\n    }\n    else {\n      if (not Equal(this.prototype, this.parent.prototype)) {\n        list add (this.stackalias, \"all \"+this.plural)\n        list add (this.stackalias, \"the \"+this.plural)\n      }\n      this.alias = ToWords(count) + \" \" + this.plural\n      this.listalias = this.plural + \" (\"+count+\")\"\n      list add (this.stackalias, this.plural)\n      list add (this.stackalias, ToWords(count)+\" \"+this.plural)\n      list add (this.stackalias, \"\"+count+\" \"+this.plural)\n      list add (this.stackalias, this.listalias)\n    }\n    this.alt = ListCombine (this.alt, this.stackalias)\n  }\n\n  if (not object.parent = null) {\n    if (Equal(object.prototype, object.parent.prototype)) {\n      object.scenery = true;\n    }\n  }\n  if (not HasString(object, \"plural\")) {\n    object.plural = GetDisplayAlias(object)+\"s\"\n  }\n  if (not HasString(object, \"singular\")) {\n    object.singular = GetDisplayAlias(object)+\"s\"\n  }\n  object.isreallyscenery = GetBoolean(object, \"scenery\")\n  do (object, \"updateStackAlias\")\n&lt;/function&gt;\n</code></pre>\n<p>And thanks KV :D So far that book has 1 sale and 23 pages read on Kindle Unlimited, earning me an impressive £1.79</p>\n\n",
      "PostDate": "2018-06-01T10:01:52.6738069Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "014fd7e0-c460-4c56-b532-82f9bfff41a3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you have the Kindle app in your phone, you should marvel at the Word Runner.\r\n\r\nOne word at a time?  I thought it was going to scroll the text...  or turn the page at a set interval...",
      "EditableFormat": "markdown",
      "HTML": "<p>If you have the Kindle app in your phone, you should marvel at the Word Runner.</p>\n<p>One word at a time?  I thought it was going to scroll the text...  or turn the page at a set interval...</p>\n\n",
      "PostDate": "2018-06-01T10:37:59.803416Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
