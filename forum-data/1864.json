{
  "Topic": {
    "TopicId": "1864",
    "ForumId": "10",
    "Title": "quest.add.item.name and limited containerism",
    "LastUpdated": "2008-04-29T22:33:13+01:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "14956",
      "UserId": 0,
      "Username": "wsquires",
      "UserAvatar": null,
      "UserGravatar": "a05959621d38181f935e617da51de4b6",
      "EditableText": "Here's the situation:\n\nI have a container object (named &quot;device&quot;.) I also have four key objects in the game; red key, green key, blue key, and black key (with object names, greenkey, redkey, bluekey, and blackkey). Using the &quot;Advanced&quot; tab, I create a boolean property &quot;is key&quot; on each one (but on no other objects in the game). The keys are takeable, and the device is not. The device is set up so that it's neither openable, nor closeable. The player also can't remove objects from it, but adding objects is controlled by a script.\n\nWhat I want is for the user to only be able to add the keys - &quot;Put key in device&quot; - to the container, but I can't get it to evaluate quest.add.item.name to the actual key object. I think the logic of the script is correct, but the syntax of the if comparison is wrong. It says in the script area (when I click on the Add verb in the container tab):\n\nif #quest.add.item.name# has the property &quot;is key&quot; then\n...\n\nI believe that the game engine is trying to evaluate &quot;#quest.add.item.name#&quot; down to &quot;#bluekey#&quot;, &quot;#greenkey#&quot;, &quot;#redkey&quot;, or &quot;#blackkey#&quot; when I (during playtesting) use the keys in the 'correct' manner, instead of evaluating them to the object named by &quot;#bluekey#&quot;, etc... so that it'll test the object, not the string &quot;#bluekey#&quot; to see if it has the &quot;is key&quot; property.\n\nI've even tried removing &quot;.name&quot; from the above test, thinking it (&quot;#quest.add.item#&quot;) would then evaluate to an object, but nope!\n\nThis is driving me nuts, as there's got to be a way to make a container that only holds certain types of items. And this (the Quest game I'm currently working on) isn't the only one I'd like to use this technique on! And hard-coding the item names isn't flexible, because what if I want to add a yellow key, or a gold key? Then I gotta rewrite that part of the script again - YiQ!\n\nFor anyone whose interested, email me and I'll attach the .cas file (so far) for you to play with. It's a spoof of Myst, a sort of Myst pre-history involving a hacker, some desert islands, and... Oh, wait. I'll give too much away.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "Here's the situation:<br/><br/>I have a container object (named &quot;device&quot;.) I also have four key objects in the game; red key, green key, blue key, and black key (with object names, greenkey, redkey, bluekey, and blackkey). Using the &quot;Advanced&quot; tab, I create a boolean property &quot;is key&quot; on each one (but on no other objects in the game). The keys are takeable, and the device is not. The device is set up so that it's neither openable, nor closeable. The player also can't remove objects from it, but adding objects is controlled by a script.<br/><br/>What I want is for the user to only be able to add the keys - &quot;Put key in device&quot; - to the container, but I can't get it to evaluate quest.add.item.name to the actual key object. I think the logic of the script is correct, but the syntax of the if comparison is wrong. It says in the script area (when I click on the Add verb in the container tab):<br/><br/>if #quest.add.item.name# has the property &quot;is key&quot; then<br/>...<br/><br/>I believe that the game engine is trying to evaluate &quot;#quest.add.item.name#&quot; down to &quot;#bluekey#&quot;, &quot;#greenkey#&quot;, &quot;#redkey&quot;, or &quot;#blackkey#&quot; when I (during playtesting) use the keys in the 'correct' manner, instead of evaluating them to the object named by &quot;#bluekey#&quot;, etc... so that it'll test the object, not the string &quot;#bluekey#&quot; to see if it has the &quot;is key&quot; property.<br/><br/>I've even tried removing &quot;.name&quot; from the above test, thinking it (&quot;#quest.add.item#&quot;) would then evaluate to an object, but nope!<br/><br/>This is driving me nuts, as there's got to be a way to make a container that only holds certain types of items. And this (the Quest game I'm currently working on) isn't the only one I'd like to use this technique on! And hard-coding the item names isn't flexible, because what if I want to add a yellow key, or a gold key? Then I gotta rewrite that part of the script again - YiQ!<br/><br/>For anyone whose interested, email me and I'll attach the .cas file (so far) for you to play with. It's a spoof of Myst, a sort of Myst pre-history involving a hacker, some desert islands, and... Oh, wait. I'll give too much away.  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2008-04-25T20:56:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "14958",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Ok, where did you get &quot;#quest.add.item.name#&quot; from?\nFrom what I see it's not in the obvious places of the help file (containers/built-in strings).\n.... oh, I've got it now.... The help documentation might need a bit of reviewing!\n\nQuest should evaluate that down to &quot;bluekey&quot; &quot;redkey&quot; etc (so yes, you're correct).\nWithout looking at the code itself, we won't know precisely what's going on - but I'd suggest looking at:\n1) the boolean property (try using one word - or underscore - as a property name.... eg. 'key' or 'is_key')\n2) the object definition.. Sometimes the container stuff can be a tiny bit tricky.. double check everything is ok.",
      "EditableFormat": "bbcode",
      "HTML": "Ok, where did you get &quot;#quest.add.item.name#&quot; from?<br/>From what I see it's not in the obvious places of the help file (containers/built-in strings).<br/>.... oh, I've got it now.... The help documentation might need a bit of reviewing!<br/><br/>Quest should evaluate that down to &quot;bluekey&quot; &quot;redkey&quot; etc (so yes, you're correct).<br/>Without looking at the code itself, we won't know precisely what's going on - but I'd suggest looking at:<br/>1) the boolean property (try using one word - or underscore - as a property name.... eg. 'key' or 'is_key')<br/>2) the object definition.. Sometimes the container stuff can be a tiny bit tricky.. double check everything is ok.",
      "PostDate": "2008-04-26T23:05:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "14969",
      "UserId": 0,
      "Username": "wsquires",
      "UserAvatar": null,
      "UserGravatar": "a05959621d38181f935e617da51de4b6",
      "EditableText": "Tried replacing 'is key' with 'is_key'; no effect. Here are the relevant sections from the asl file.\n\n\tdefine object &lt;bluekey&gt;\n\t\talias &lt;key&gt;\n\t\tlook &lt;This is a blue, metal key.&gt;\n\t\ttake\n\t\tprefix &lt;a blue&gt;\n\t\tdisplaytype &lt;Object&gt;\n\t\tarticle &lt;it&gt;\n\t\tgender &lt;it&gt;\n\t\tproperties &lt;is_key&gt;\n\tend define\n\n\tdefine object &lt;device&gt;\n\t\tlook &lt;The device takes 4 keys. It has a red button on it.&gt;\n\t\ttake msg &lt;You can't - it's welded to the metal pole.&gt;\n\t\tprefix &lt;a&gt;\n\t\tdisplaytype &lt;Object&gt;\n\t\tarticle &lt;it&gt;\n\t\tgender &lt;it&gt;\n\t\tcontainer\n\t\ttransparent\n\t\topen msg &lt;You can't - it's hermetically sealed.&gt;\n\t\tclose msg &lt;It's already hermetically sealed.&gt;\n\t\tadd {\n\t\t\tif property &lt;#quest.add.object.name#; is_key&gt; then {\n\t\t\t\tmsg &lt;You insert the key into the device.&gt;\n\t\t\t\tadd &lt;#quest.add.object.name#; device&gt; } else msg &lt;You can't add that to the device - it doesn't fit the keyholes!&gt;\n\t\t}\n\t\tremove msg &lt;You can't - it's stuck.&gt;\n\t\tlist {\n\t\t\tif property &lt;bluekey; parent&gt; then msg &lt;The blue key is inserted into the device.&gt;\n\t\t\tif property &lt;redkey; parent&gt; then msg &lt;The red key is inserted into the device.&gt;\n\t\t\tif property &lt;greenkey; parent&gt; then msg &lt;The green key is inserted into the device.&gt;\n\t\t\tif property &lt;blackkey; parent&gt; then msg &lt;The black key is inserted into the device.&gt;\n\t\t}\n\t\tlist empty &lt;There are no keys inserted.&gt;\n\tend define\n\nThe other keys (greenkey, redkey, and blackkey) are defined similarly to bluekey, save for the name, description and the prefix. Further investigation reveals that it's not even calling the add action on the 'device' when the player types 'put key in device' - it just says, &quot;You can't put that there.&quot; instead of my custom message.",
      "EditableFormat": "bbcode",
      "HTML": "Tried replacing 'is key' with 'is_key'; no effect. Here are the relevant sections from the asl file.<br/><br/>\tdefine object &lt;bluekey&gt;<br/>\t\talias &lt;key&gt;<br/>\t\tlook &lt;This is a blue, metal key.&gt;<br/>\t\ttake<br/>\t\tprefix &lt;a blue&gt;<br/>\t\tdisplaytype &lt;Object&gt;<br/>\t\tarticle &lt;it&gt;<br/>\t\tgender &lt;it&gt;<br/>\t\tproperties &lt;is_key&gt;<br/>\tend define<br/><br/>\tdefine object &lt;device&gt;<br/>\t\tlook &lt;The device takes 4 keys. It has a red button on it.&gt;<br/>\t\ttake msg &lt;You can't - it's welded to the metal pole.&gt;<br/>\t\tprefix &lt;a&gt;<br/>\t\tdisplaytype &lt;Object&gt;<br/>\t\tarticle &lt;it&gt;<br/>\t\tgender &lt;it&gt;<br/>\t\tcontainer<br/>\t\ttransparent<br/>\t\topen msg &lt;You can't - it's hermetically sealed.&gt;<br/>\t\tclose msg &lt;It's already hermetically sealed.&gt;<br/>\t\tadd {<br/>\t\t\tif property &lt;#quest.add.object.name#; is_key&gt; then {<br/>\t\t\t\tmsg &lt;You insert the key into the device.&gt;<br/>\t\t\t\tadd &lt;#quest.add.object.name#; device&gt; } else msg &lt;You can't add that to the device - it doesn't fit the keyholes!&gt;<br/>\t\t}<br/>\t\tremove msg &lt;You can't - it's stuck.&gt;<br/>\t\tlist {<br/>\t\t\tif property &lt;bluekey; parent&gt; then msg &lt;The blue key is inserted into the device.&gt;<br/>\t\t\tif property &lt;redkey; parent&gt; then msg &lt;The red key is inserted into the device.&gt;<br/>\t\t\tif property &lt;greenkey; parent&gt; then msg &lt;The green key is inserted into the device.&gt;<br/>\t\t\tif property &lt;blackkey; parent&gt; then msg &lt;The black key is inserted into the device.&gt;<br/>\t\t}<br/>\t\tlist empty &lt;There are no keys inserted.&gt;<br/>\tend define<br/><br/>The other keys (greenkey, redkey, and blackkey) are defined similarly to bluekey, save for the name, description and the prefix. Further investigation reveals that it's not even calling the add action on the 'device' when the player types 'put key in device' - it just says, &quot;You can't put that there.&quot; instead of my custom message.",
      "PostDate": "2008-04-28T14:37:09+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "14973",
      "UserId": 0,
      "Username": "wsquires",
      "UserAvatar": null,
      "UserGravatar": "a05959621d38181f935e617da51de4b6",
      "EditableText": "Problem solved. Lesson learned? Make sure script-controlled containers are open initially! The Clue? It (QDK) was giving the standard response instead of the custom one I put in, yet the scripts for controlling the listing of the container contents worked perfectly! <!-- s:oops: --><img src=\"{SMILIES_PATH}/icon_redface.gif\" alt=\":oops:\" title=\"Embarassed\" /><!-- s:oops: --> \n\nSo let this be a lesson - when you control access to a container object (via the &quot;add&quot; and &quot;drop&quot; actions), make sure the container is open so the player can attempt to put stuff in it. And - of course - control the &quot;open&quot; and &quot;close&quot; actions as well if necessary!",
      "EditableFormat": "bbcode",
      "HTML": "Problem solved. Lesson learned? Make sure script-controlled containers are open initially! The Clue? It (QDK) was giving the standard response instead of the custom one I put in, yet the scripts for controlling the listing of the container contents worked perfectly! <!-- s:oops: --><img src=\"{SMILIES_PATH}/icon_redface.gif\" alt=\":oops:\" title=\"Embarassed\" /><!-- s:oops: --> <br/><br/>So let this be a lesson - when you control access to a container object (via the &quot;add&quot; and &quot;drop&quot; actions), make sure the container is open so the player can attempt to put stuff in it. And - of course - control the &quot;open&quot; and &quot;close&quot; actions as well if necessary!",
      "PostDate": "2008-04-29T14:24:10+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "14976",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "oh, I think I can across something very similar before!!\n\nI couldn't put something on a surface because of some similar problem.... or something.\n\nGlad you figured it out!",
      "EditableFormat": "bbcode",
      "HTML": "oh, I think I can across something very similar before!!<br/><br/>I couldn't put something on a surface because of some similar problem.... or something.<br/><br/>Glad you figured it out!",
      "PostDate": "2008-04-29T22:33:13+01:00",
      "LastEditDate": null
    }
  ]
}
