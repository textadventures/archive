{
  "Topic": {
    "TopicId": "4262",
    "ForumId": "10",
    "Title": "Division operation",
    "LastUpdated": "2015-02-25T19:36:11+00:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "28335",
      "UserId": 0,
      "Username": "tlk",
      "UserAvatar": null,
      "UserGravatar": "2d59720246577f1d45f7a580bf58be52",
      "EditableText": "So first off I'm still using 5.4. I'm sure most are probably using 5.5 now, but I haven't made the switch yet, and honestly am just as curious as to whether the same thing happens with it as what I'm seeing with 5.4 if someone's willing to try. I'm working on a combat system which utilizes lots of integers for HP, accuracy, damage, etc, and has a lot of mathematical operations going on to measure everything against each other and calculate results, and I noticed that when I divide an odd number it always rounds the result down. Example:\n\n[code:4ccx4p4q]x = 7\ny = x / 2\nmsg (y)[/code:4ccx4p4q]\n\nshould, to my way of thinking, return 3.5, but in practice returns 3. Thanks to the insight of my girlfriend (credit where credit's due) I've determined that you can make it work by setting x to equal 7.0 instead of just 7, which I'm pretty sure will resolve the problems it creates for me, but I still just don't understand why it doesn't work without it. Particularly when this:\n\n[code:4ccx4p4q]x = 7\ny = x - 1&#46;5\nmsg (y)[/code:4ccx4p4q]\n\nreturns 5.5 without the need for x to be 7.0. Any thoughts? Am I missing something simple?",
      "EditableFormat": "bbcode",
      "HTML": "So first off I'm still using 5.4. I'm sure most are probably using 5.5 now, but I haven't made the switch yet, and honestly am just as curious as to whether the same thing happens with it as what I'm seeing with 5.4 if someone's willing to try. I'm working on a combat system which utilizes lots of integers for HP, accuracy, damage, etc, and has a lot of mathematical operations going on to measure everything against each other and calculate results, and I noticed that when I divide an odd number it always rounds the result down. Example:<br/><br/><pre><code>x = 7<br/>y = x / 2<br/>msg (y)</code></pre><br/><br/>should, to my way of thinking, return 3.5, but in practice returns 3. Thanks to the insight of my girlfriend (credit where credit's due) I've determined that you can make it work by setting x to equal 7.0 instead of just 7, which I'm pretty sure will resolve the problems it creates for me, but I still just don't understand why it doesn't work without it. Particularly when this:<br/><br/><pre><code>x = 7<br/>y = x - 1&#46;5<br/>msg (y)</code></pre><br/><br/>returns 5.5 without the need for x to be 7.0. Any thoughts? Am I missing something simple?",
      "PostDate": "2014-04-03T00:25:20+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28336",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "No, this is common in programming but is kind of assumed rather than stated most of the time. Integer division will return integers. Floating point (i.e. '7.0') will return floating point. Any operation using floating point will generally return floating point.",
      "EditableFormat": "bbcode",
      "HTML": "No, this is common in programming but is kind of assumed rather than stated most of the time. Integer division will return integers. Floating point (i.e. '7.0') will return floating point. Any operation using floating point will generally return floating point.",
      "PostDate": "2014-04-03T02:14:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28341",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "To expand on George's response, integers and double (aka floating point) values behave differently when being operated on. Integer values will always return integer results, and operations on doubles return &quot;double&quot; results.\n\nWhat seems to be the case is that Quest (or its expression parser) infers the type of a variable or attribute by what you assign to it. For example, if you do:\n\nsomevar = &quot;hello&quot;\n\nthen somevar will be a string. Similarly, if you do:\n\nsomevar = 8\n\nthen somevar will be an integer, and so on for &quot;somevar = 8.0&quot; and it being double.\n\nWhen you have:\n\nx = 7\ny = x / 2\n\nall the operands are integers, and so the result will be an integer value. By default, integer operations truncate (they drop any fractional part).\n\nWhen you have: \n\nx = 7\ny = x - 1.5\n\nx will be an integer value, but when you go to compute y, you have both an integer and a double. What should happen? What does happen is that the integer value is &quot;promoted&quot; to a double, and then the operation is performed entirely in floating point, with a double result. That's why it &quot;works&quot; in that case.\n\nPromotion happens in other cases as well, usually in the way you'd want. If you do:\n\nx = 7\ns = &quot;Hello&quot; + x\n\nthen &quot;s&quot; will be &quot;Hello7&quot;. In that case, the integer has been promoted to a string. Similarly,\n\nx = 7.5\ns = &quot;Hello&quot; + x\n\nshould yield &quot;s&quot; being &quot;Hello7.5&quot;.\n\nFor your initial example, any of the following should give you the result you want (as far as the y value):\n\nx = 7.0\ny = x / 2\n\nx = 7\ny = x / 2.0\n\nx = 7.0\ny = x / 2.0\n\nIn all three cases, the y computation will be promoted to floating point, as long as at least one operand is floating point. The x value will vary depending on what you assign to it.",
      "EditableFormat": "bbcode",
      "HTML": "To expand on George's response, integers and double (aka floating point) values behave differently when being operated on. Integer values will always return integer results, and operations on doubles return &quot;double&quot; results.<br/><br/>What seems to be the case is that Quest (or its expression parser) infers the type of a variable or attribute by what you assign to it. For example, if you do:<br/><br/>somevar = &quot;hello&quot;<br/><br/>then somevar will be a string. Similarly, if you do:<br/><br/>somevar = 8<br/><br/>then somevar will be an integer, and so on for &quot;somevar = 8.0&quot; and it being double.<br/><br/>When you have:<br/><br/>x = 7<br/>y = x / 2<br/><br/>all the operands are integers, and so the result will be an integer value. By default, integer operations truncate (they drop any fractional part).<br/><br/>When you have: <br/><br/>x = 7<br/>y = x - 1.5<br/><br/>x will be an integer value, but when you go to compute y, you have both an integer and a double. What should happen? What does happen is that the integer value is &quot;promoted&quot; to a double, and then the operation is performed entirely in floating point, with a double result. That's why it &quot;works&quot; in that case.<br/><br/>Promotion happens in other cases as well, usually in the way you'd want. If you do:<br/><br/>x = 7<br/>s = &quot;Hello&quot; + x<br/><br/>then &quot;s&quot; will be &quot;Hello7&quot;. In that case, the integer has been promoted to a string. Similarly,<br/><br/>x = 7.5<br/>s = &quot;Hello&quot; + x<br/><br/>should yield &quot;s&quot; being &quot;Hello7.5&quot;.<br/><br/>For your initial example, any of the following should give you the result you want (as far as the y value):<br/><br/>x = 7.0<br/>y = x / 2<br/><br/>x = 7<br/>y = x / 2.0<br/><br/>x = 7.0<br/>y = x / 2.0<br/><br/>In all three cases, the y computation will be promoted to floating point, as long as at least one operand is floating point. The x value will vary depending on what you assign to it.",
      "PostDate": "2014-04-03T07:16:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28343",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "@Jay, \n\nyou mean GEORGE's response (in this case, it's not me posting a response ~ I didn't get here soon enough, lol), unless you mean from a post of mine somewhere else, where I explained integers vs doubles (floats~floating points).\n\n------\n\njust to add a small comment:\n\nit depends on the underlying code, so it depends how it is programmed to compute (which you can change if you're good at it):\n\ntruncate (drop the decimal~fraction part of it) ~ as Jay shown, is how quest does it\nthe actual answer (as an integer or double)\nrounding down or up (up &gt;= X.5 or down &lt; X.5)\n\n-----\n\nthe other big problem with coding (just as it is with yourself doing a math problem) is:\n\nrounding (precision)\n\nas if you round early in a computation, due to how they deciding to code the rounding, it can completely messes up the final result, to a totally wrong answer, which can thus completely mess up your created game obviously.\n\nif you're a math+programming nerd, it's fun to see how your calculators are programmed with its rounding.",
      "EditableFormat": "bbcode",
      "HTML": "@Jay, <br/><br/>you mean GEORGE's response (in this case, it's not me posting a response ~ I didn't get here soon enough, lol), unless you mean from a post of mine somewhere else, where I explained integers vs doubles (floats~floating points).<br/><br/>------<br/><br/>just to add a small comment:<br/><br/>it depends on the underlying code, so it depends how it is programmed to compute (which you can change if you're good at it):<br/><br/>truncate (drop the decimal~fraction part of it) ~ as Jay shown, is how quest does it<br/>the actual answer (as an integer or double)<br/>rounding down or up (up &gt;= X.5 or down &lt; X.5)<br/><br/>-----<br/><br/>the other big problem with coding (just as it is with yourself doing a math problem) is:<br/><br/>rounding (precision)<br/><br/>as if you round early in a computation, due to how they deciding to code the rounding, it can completely messes up the final result, to a totally wrong answer, which can thus completely mess up your created game obviously.<br/><br/>if you're a math+programming nerd, it's fun to see how your calculators are programmed with its rounding.",
      "PostDate": "2014-04-03T09:02:12+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28344",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "&lt;doh!&gt; My bad. And I have no idea why either... lol  Many apologies to all.",
      "EditableFormat": "bbcode",
      "HTML": "&lt;doh!&gt; My bad. And I have no idea why either... lol  Many apologies to all.",
      "PostDate": "2014-04-03T11:25:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28345",
      "UserId": 0,
      "Username": "tlk",
      "UserAvatar": null,
      "UserGravatar": "2d59720246577f1d45f7a580bf58be52",
      "EditableText": "Ahhhhh, that clears so much up for me. Just my lack of any real programming knowledge again. Thanks all!\n\nThe problem I was running into was trying to give three options, each with some percent chance of happening based on player attributes, which when added together would add up to 100%. Under certain circumstances value A would be halved and value B would make up the difference, but when I halved the former and then halved it again to figure out how much to add to the latter, I ended up with the three adding up to only 99% because of the rounding. Hardly game-breaking, but the kind of thing I would notice and would bug me if I were playing a game (the percentages are shown to the player to aid in deciding what to do).\n\nAll of Jay's suggestions work for my purposes, but just as an observation I've noticed that you can't pass floating point into the GetRandomInt function, as it returns an error. I'm assuming this is true of other integer-based functions as well, but haven't tried any. It doesn't cause me a problem, but I thought it was worth pointing out just in case anyone else was both trying to avoid the truncation and using that function.\n\nQuick related question: is there a way to tell if an integer is an even or odd number? I've looked around the function list and on the forums and can't find one.\n\nEDIT: Nevermind, just realized you can do it with mod (%), duh. For some reason I was only looking for a function.",
      "EditableFormat": "bbcode",
      "HTML": "Ahhhhh, that clears so much up for me. Just my lack of any real programming knowledge again. Thanks all!<br/><br/>The problem I was running into was trying to give three options, each with some percent chance of happening based on player attributes, which when added together would add up to 100%. Under certain circumstances value A would be halved and value B would make up the difference, but when I halved the former and then halved it again to figure out how much to add to the latter, I ended up with the three adding up to only 99% because of the rounding. Hardly game-breaking, but the kind of thing I would notice and would bug me if I were playing a game (the percentages are shown to the player to aid in deciding what to do).<br/><br/>All of Jay's suggestions work for my purposes, but just as an observation I've noticed that you can't pass floating point into the GetRandomInt function, as it returns an error. I'm assuming this is true of other integer-based functions as well, but haven't tried any. It doesn't cause me a problem, but I thought it was worth pointing out just in case anyone else was both trying to avoid the truncation and using that function.<br/><br/>Quick related question: is there a way to tell if an integer is an even or odd number? I've looked around the function list and on the forums and can't find one.<br/><br/>EDIT: Nevermind, just realized you can do it with mod (%), duh. For some reason I was only looking for a function.",
      "PostDate": "2014-04-03T13:17:40+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28351",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "you could try leaving the value used (in 'GetRandomInt' for example) as a ratio~fraction (not sure if this will work or not though):\n\nGetRandomInt (0,7/2)\n\ninstead of:\n\nGetRandomInt (0,3.5)",
      "EditableFormat": "bbcode",
      "HTML": "you could try leaving the value used (in 'GetRandomInt' for example) as a ratio~fraction (not sure if this will work or not though):<br/><br/>GetRandomInt (0,7/2)<br/><br/>instead of:<br/><br/>GetRandomInt (0,3.5)",
      "PostDate": "2014-04-03T19:13:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28352",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Probably more than you want to know, but...\n\nThere are four functions for converting doubles to integers: truncate, floor, round and ceiling.\n\n&quot;truncate&quot; returns the integer with the fractional part dropped (rounded toward 0).\ntruncate(3.1) = 3\ntruncate(3.5) = 3\ntruncate(3.7) = 3\ntruncate(4.0) = 4\ntruncate(-3.1) = -3\n\n&quot;floor&quot; returns the integer that is less than or equal to the value passed (rounded toward negative infinity):\nfloor(3.1) = 3\nfloor(3.5) = 3\nfloor(3.7) = 3\nfloor(4.0) = 4\nfloor(-3.1) = -4\n\n&quot;ceiling&quot; returns the integer that is greater than or equal to the value passed (rounded toward infinity):\n\nceiling(3.1) = 4\nceiling(3.5) = 4\nceiling(3.7) = 4\nceiling(4.0) = 4\nceiling(-3.1) = -3\n\n&quot;round&quot; returns the integer which is the double value rounded toward 0 if fractional part is &lt; 0.5, otherwise away from 0:\n\nround(3.1) = 3\nround(3.5) = 4\nround(3.7) = 4\nround(4.0) = 4\nround(-3.1) = -3\nround(-3.5) = -4\n\n(I hope I got all those right.)\n\nSo for your GetRandomInt case, assuming the number is always greater than 0, you could use truncate or floor. I assume if the value is 3.5, you don't want the random numbers to go up to 4... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nThere is also a cast operator, but you can explore that on your own (or ask me, if you're really curious).",
      "EditableFormat": "bbcode",
      "HTML": "Probably more than you want to know, but...<br/><br/>There are four functions for converting doubles to integers: truncate, floor, round and ceiling.<br/><br/>&quot;truncate&quot; returns the integer with the fractional part dropped (rounded toward 0).<br/>truncate(3.1) = 3<br/>truncate(3.5) = 3<br/>truncate(3.7) = 3<br/>truncate(4.0) = 4<br/>truncate(-3.1) = -3<br/><br/>&quot;floor&quot; returns the integer that is less than or equal to the value passed (rounded toward negative infinity):<br/>floor(3.1) = 3<br/>floor(3.5) = 3<br/>floor(3.7) = 3<br/>floor(4.0) = 4<br/>floor(-3.1) = -4<br/><br/>&quot;ceiling&quot; returns the integer that is greater than or equal to the value passed (rounded toward infinity):<br/><br/>ceiling(3.1) = 4<br/>ceiling(3.5) = 4<br/>ceiling(3.7) = 4<br/>ceiling(4.0) = 4<br/>ceiling(-3.1) = -3<br/><br/>&quot;round&quot; returns the integer which is the double value rounded toward 0 if fractional part is &lt; 0.5, otherwise away from 0:<br/><br/>round(3.1) = 3<br/>round(3.5) = 4<br/>round(3.7) = 4<br/>round(4.0) = 4<br/>round(-3.1) = -3<br/>round(-3.5) = -4<br/><br/>(I hope I got all those right.)<br/><br/>So for your GetRandomInt case, assuming the number is always greater than 0, you could use truncate or floor. I assume if the value is 3.5, you don't want the random numbers to go up to 4... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>There is also a cast operator, but you can explore that on your own (or ask me, if you're really curious).",
      "PostDate": "2014-04-03T19:43:54+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28355",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "another thing you could do, is to create your own function 'GetRandomDouble', but this probably takes a good bit of coding ability.",
      "EditableFormat": "bbcode",
      "HTML": "another thing you could do, is to create your own function 'GetRandomDouble', but this probably takes a good bit of coding ability.",
      "PostDate": "2014-04-04T02:23:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28357",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Ironically, I just discovered (while trying to implement the above suggestion) that there is already a function called GetRandomDouble. (This fact caused me untold grief as it would never find my function inside an expression and kept complaining about parameters.) This function looks like this:\n\n[code:3iuo9mwg]value = GetRandomDouble()[/code:3iuo9mwg]\n\nand returns a value between 0.0 and 1.0. This can be used to create a general purpose GetRandom function:\n\n[code:3iuo9mwg]  &lt;function name=&quot;GetRandom&quot; parameters=&quot;lower,upper&quot; type=&quot;double&quot;&gt;\n  \treturn (GetRandomDouble()*(upper-lower) + lower)\n  &lt;/function&gt;[/code:3iuo9mwg]\nFor those times when you do want a full floating-point random number...",
      "EditableFormat": "bbcode",
      "HTML": "Ironically, I just discovered (while trying to implement the above suggestion) that there is already a function called GetRandomDouble. (This fact caused me untold grief as it would never find my function inside an expression and kept complaining about parameters.) This function looks like this:<br/><br/><pre><code>value = GetRandomDouble()</code></pre><br/><br/>and returns a value between 0.0 and 1.0. This can be used to create a general purpose GetRandom function:<br/><br/><pre><code>  &lt;function name=&quot;GetRandom&quot; parameters=&quot;lower,upper&quot; type=&quot;double&quot;&gt;<br/>  \treturn (GetRandomDouble()*(upper-lower) + lower)<br/>  &lt;/function&gt;</code></pre><br/>For those times when you do want a full floating-point random number...",
      "PostDate": "2014-04-04T07:34:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "34951",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "Thread necromancy - ignore. I'm afk but need to add this to my records. It's radio rental, but looks useful.",
      "EditableFormat": "bbcode",
      "HTML": "Thread necromancy - ignore. I'm afk but need to add this to my records. It's radio rental, but looks useful.",
      "PostDate": "2015-02-25T19:36:11+00:00",
      "LastEditDate": null
    }
  ]
}
