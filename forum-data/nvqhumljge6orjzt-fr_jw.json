{
  "Topic": {
    "TopicId": "nvqhumljge6orjzt-fr_jw",
    "ForumId": "10",
    "Title": "Want a command to check if object has a verb and run object's verb script",
    "LastUpdated": "2022-08-06T11:31:09.0345549Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f619ca05-3160-4a8a-b13a-21aa2680f49d",
      "UserId": 600018,
      "Username": "Laxon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b8846d6baeb82d3d861dd43a2066b67f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have created a verb called \"follow\" and assigned it to a character.\r\n\r\nThe verb (for this character) is set up as a script (so I can do \"Do (object, \"follow\") - it doesn't seem to work unless it is a \"Run Script\") even though, for this character, all it does is print a message (nothing gets moved anywhere).\r\n\r\nIn a runthrough my tester used the command \"go with\" instead of follow. So now I have created a command \"go with\".\r\n\r\nThe problem is, I want the \"go with\" to check if there is a \"follow\" verb for the object and run that (else generic print message text).\r\n\r\nI have worked at this for hours now and NOTHING works. Like, the only thing I have read in the docs is that verbs are treated as an \"attribute\" therefore hasattribute (object, follow) should work??? Anyway, it doesn't. I can see the verb \"follow\" appearing as an attribute in the object's \"attribute\" table so I am tearing my hair out as to why this doesn't work.\r\n\r\nEssentially, if I use HasAttribute (object, \"follow\") it treats literally every object as if it doesn't have the attribute, so clearly Quest is _not_ treating a verb as an attribute.\r\n\r\nSo what can I do? Just to recap (in brief):\r\n\r\nI want to be able to check if an object has a specific verb associated to it, and run the script if so (and then I will add a \"else\" for a generic response if there is no \"follow\" verb added to that object).\r\n\r\nPlease help! Surely this must be something other people want to do???\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have created a verb called \"follow\" and assigned it to a character.</p>\n<p>The verb (for this character) is set up as a script (so I can do \"Do (object, \"follow\") - it doesn't seem to work unless it is a \"Run Script\") even though, for this character, all it does is print a message (nothing gets moved anywhere).</p>\n<p>In a runthrough my tester used the command \"go with\" instead of follow. So now I have created a command \"go with\".</p>\n<p>The problem is, I want the \"go with\" to check if there is a \"follow\" verb for the object and run that (else generic print message text).</p>\n<p>I have worked at this for hours now and NOTHING works. Like, the only thing I have read in the docs is that verbs are treated as an \"attribute\" therefore hasattribute (object, follow) should work??? Anyway, it doesn't. I can see the verb \"follow\" appearing as an attribute in the object's \"attribute\" table so I am tearing my hair out as to why this doesn't work.</p>\n<p>Essentially, if I use HasAttribute (object, \"follow\") it treats literally every object as if it doesn't have the attribute, so clearly Quest is <em>not</em> treating a verb as an attribute.</p>\n<p>So what can I do? Just to recap (in brief):</p>\n<p>I want to be able to check if an object has a specific verb associated to it, and run the script if so (and then I will add a \"else\" for a generic response if there is no \"follow\" verb added to that object).</p>\n<p>Please help! Surely this must be something other people want to do???</p>\n\n",
      "PostDate": "2022-08-06T11:31:09.0345549Z",
      "LastEditDate": "2022-08-06T11:33:19.1943581Z",
      "link": null
    },
    {
      "PostId": "b6a4e729-aa67-47a4-8846-bdbedf6101c6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can suggest three solutions here.\r\n\r\n1. You could do it the same way the verb itself does (all verbs are just commands with the same built-in script):\r\n```\r\nif (HasScript (object, \"follow\")) {\r\n  do (object, \"follow\")\r\n}\r\nelse if (HasString (object, \"follow\")) {\r\n  msg (object.follow)\r\n}\r\nelse {\r\n  msg (\"I don't understand your command.\")\r\n}\r\n```\r\n\r\n2. Just run the \"follow\" verb itself, and let that handle running the script:\r\n```\r\ndo (follow, \"script\", QuickParams (\"object\", object))\r\n```\r\n\r\n3. The most sensible one, I think: change the pattern for the 'follow' command so that it allows itself to be written two different ways. I'm not sure how to do this with the #object# shorthand that Quest uses (perhaps someone more experienced can help with that), but if you make the verb's pattern a regular expression, it would be something like: `^(go with|follow) (?<object>.+)$`. Instead of having one command run another, this would just have one verb that can be activated by the player typing two different things (like get/take in the built-in commands)",
      "EditableFormat": "markdown",
      "HTML": "<p>I can suggest three solutions here.</p>\n<ol>\n<li>You could do it the same way the verb itself does (all verbs are just commands with the same built-in script):</li>\n</ol>\n<pre><code>if (HasScript (object, \"follow\")) {\n  do (object, \"follow\")\n}\nelse if (HasString (object, \"follow\")) {\n  msg (object.follow)\n}\nelse {\n  msg (\"I don't understand your command.\")\n}\n</code></pre>\n<ol start=\"2\">\n<li>Just run the \"follow\" verb itself, and let that handle running the script:</li>\n</ol>\n<pre><code>do (follow, \"script\", QuickParams (\"object\", object))\n</code></pre>\n<ol start=\"3\">\n<li>The most sensible one, I think: change the pattern for the 'follow' command so that it allows itself to be written two different ways. I'm not sure how to do this with the #object# shorthand that Quest uses (perhaps someone more experienced can help with that), but if you make the verb's pattern a regular expression, it would be something like: <code>^(go with|follow) (?&lt;object&gt;.+)$</code>. Instead of having one command run another, this would just have one verb that can be activated by the player typing two different things (like get/take in the built-in commands)</li>\n</ol>\n\n",
      "PostDate": "2022-08-06T13:11:17.7850562Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
