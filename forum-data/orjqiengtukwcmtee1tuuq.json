{
  "Topic": {
    "TopicId": "orjqiengtukwcmtee1tuuq",
    "ForumId": "10",
    "Title": "Restricting Choices",
    "LastUpdated": "2018-10-16T02:13:43.9829215Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7ce48e4f-52ae-4e6a-8f37-b16ee274cb23",
      "UserId": 354112,
      "Username": "AxolotlAxl",
      "AvatarUrl": "https://secure.gravatar.com/avatar/476a434b7edae4bbdc7e548fb114be29?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So first, context. At the beginning of the game, the player chooses a class to play as. Further, i.e. a battle scene, I want to have some options be unavailable depending on the class they took. Say, the player chose Warrior, and thus the battle option of Burn them with a Firebolt would be restricted/unable to be chosen since Warriors can't cast spells. How do I implement this, or is it not possible?\r\nAs well, I am running Quest on my laptop, and it's a Gamebook option rather than the Textbook option.\r\nThanks for the help!",
      "EditableFormat": "markdown",
      "HTML": "<p>So first, context. At the beginning of the game, the player chooses a class to play as. Further, i.e. a battle scene, I want to have some options be unavailable depending on the class they took. Say, the player chose Warrior, and thus the battle option of Burn them with a Firebolt would be restricted/unable to be chosen since Warriors can't cast spells. How do I implement this, or is it not possible?<br>\nAs well, I am running Quest on my laptop, and it's a Gamebook option rather than the Textbook option.<br>\nThanks for the help!</p>\n\n",
      "PostDate": "2018-10-16T02:13:43.9829215Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f792bd4f-0d76-4ee5-9048-04329564fc2c",
      "UserId": 378821,
      "Username": "Svarii",
      "AvatarUrl": "https://i.imgur.com/cJ10zyPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Personally I would add an attribute to the character object called characterClass(or whatever you prefer) and use a switch statement to display the available options.\r\nI have not used quest for a gamebook, just text adventure but it's likely just a matter of using a switch.\r\nI prefer twine for gamebooks.\r\nGamebooks are my UML, then I convert what I wrote into a text adventure.  Try it.\r\nText adventure is way cooler IMO.",
      "EditableFormat": "markdown",
      "HTML": "<p>Personally I would add an attribute to the character object called characterClass(or whatever you prefer) and use a switch statement to display the available options.<br>\nI have not used quest for a gamebook, just text adventure but it's likely just a matter of using a switch.<br>\nI prefer twine for gamebooks.<br>\nGamebooks are my UML, then I convert what I wrote into a text adventure.  Try it.<br>\nText adventure is way cooler IMO.</p>\n\n",
      "PostDate": "2018-10-16T05:18:34.701944Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ac6d549c-d9fa-4399-b027-9d1344771ce3",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I suppose if you made different commands for each class, as well as different weapons and functions for the enemies, that would work. I use The Pixie's zombie code for my combat, and I have had success with replacing certain functions to fix grammar mistakes. It was hard, by I was successful.",
      "EditableFormat": "markdown",
      "HTML": "<p>I suppose if you made different commands for each class, as well as different weapons and functions for the enemies, that would work. I use The Pixie's zombie code for my combat, and I have had success with replacing certain functions to fix grammar mistakes. It was hard, by I was successful.</p>\n\n",
      "PostDate": "2018-10-16T06:21:07.6406641Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b6217404-6e3e-4fcd-9893-fcfce2b19022",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Something like this?\r\n\r\n```\r\nswitch (player.class) {\r\n  case (\"Warrior\") {\r\n    attacks = Split (\"Cleave;Shield bash;Whirlwind;Charge\", \";\")\r\n    ShowMenu (\"\", attacks, true) {\r\n      switch (result) {\r\n        case (\"Cleave\") {\r\n          msg (\"You cleave the fridge out of your enemy. Boomshakalak.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Shield bash\") {\r\n          msg (\"You bash your shield into the face of your enemy.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Whirlwind\") {\r\n          msg (\"Like a storm you come down upon the group of enemies. Boo-yah!\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Charge\") {\r\n          msg (\"You charge your foo and yell GERONIMOOOOOOO!!!\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n<br><br>\r\nYou still need to script:\r\n\r\n1. The other classes (I only made warrior)\r\n2. Everything else that needs to happen when you attack.\r\n3. Maybe change the ```msg ``` since I just wrote nonsense.\r\n\r\n\r\nEdit: \r\nPut the code above in a function and call it whenever you type ```attack```(or whatever verb you'll use).\r\n\r\nIf you're unsure as to where to put the other classes, check it in GUI mode. It should be logical to you where everything goes now that you have one class.\r\n(If you already do know... nevermind :))\r\n\r\nAlso: This works if the player object has the class attribute set to ```string``` and \"Warrior\".\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Something like this?</p>\n<pre><code>switch (player.class) {\n  case (\"Warrior\") {\n    attacks = Split (\"Cleave;Shield bash;Whirlwind;Charge\", \";\")\n    ShowMenu (\"\", attacks, true) {\n      switch (result) {\n        case (\"Cleave\") {\n          msg (\"You cleave the fridge out of your enemy. Boomshakalak.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Shield bash\") {\n          msg (\"You bash your shield into the face of your enemy.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Whirlwind\") {\n          msg (\"Like a storm you come down upon the group of enemies. Boo-yah!\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Charge\") {\n          msg (\"You charge your foo and yell GERONIMOOOOOOO!!!\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p><br><br><br>\nYou still need to script:</p>\n<ol>\n<li>The other classes (I only made warrior)</li>\n<li>Everything else that needs to happen when you attack.</li>\n<li>Maybe change the <code>msg</code> since I just wrote nonsense.</li>\n</ol>\n<p>Edit:<br>\nPut the code above in a function and call it whenever you type <code>attack</code>(or whatever verb you'll use).</p>\n<p>If you're unsure as to where to put the other classes, check it in GUI mode. It should be logical to you where everything goes now that you have one class.<br>\n(If you already do know... nevermind :))</p>\n<p>Also: This works if the player object has the class attribute set to <code>string</code> and \"Warrior\".</p>\n\n",
      "PostDate": "2018-10-16T08:51:41.9696577Z",
      "LastEditDate": "2018-10-16T08:55:10.1354439Z",
      "link": null
    },
    {
      "PostId": "8769daec-80fb-462d-8830-f6cb48a9bbc6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I am not sure how restricted you will be in Gamebook (and that may be an issue with some suggestions above). Personally I would do it as a text adventure, but with hyperlinks, because this will be complex and you ned the extra functionality.\r\n\r\nAs a modification to CheeseMyBaby's idea, I would give the player an attribute that lists the options, and set that up at character creation.\r\n```\r\nswitch (player.class) {\r\n  case (\"Warrior\") {\r\n    player.attacks = Split (\"Strike;Cleave;Shield bash;Charge\")\r\n  }\r\n  case (\"Wizard\") {\r\n    player.attacks = Split (\"Strike;Fireball;Lightning bolt;Mana drain\")\r\n  }\r\n  case (\"Rogue\") {\r\n    player.attacks = Split (\"Strike;Back attack;Charge\")\r\n  }\r\n}\r\n```\r\n    \r\nThen use that when giving the player options:\r\n\r\n```\r\n    ShowMenu (\"Choose your attack\", player.attacks, true) {\r\n      switch (result) {\r\n        case (\"Strike\") {\r\n          msg (\"You attack the guy with your mighty weapon.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Cleave\") {\r\n          msg (\"You cleave the fridge out of your enemy. Boomshakalak.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Shield bash\") {\r\n          msg (\"You bash your shield into the face of your enemy.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Charge\") {\r\n          msg (\"You charge your foo and yell GERONIMOOOOOOO!!!\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n        case (\"Fireball\") {\r\n          msg (\"You shoot a ball of fire at your hapless foe and laugh as it is consumed in fire.\")\r\n          // SCRIPT DAMAGE, HEALTH and what not HERE\r\n        }\r\n       // etc.\r\n      }\r\n    }\r\n```\r\n\r\nYou can even add extra attacks as the game progresses.\r\n\r\n```\r\nlist add (player.attacks, \"Divine retribution\")\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I am not sure how restricted you will be in Gamebook (and that may be an issue with some suggestions above). Personally I would do it as a text adventure, but with hyperlinks, because this will be complex and you ned the extra functionality.</p>\n<p>As a modification to CheeseMyBaby's idea, I would give the player an attribute that lists the options, and set that up at character creation.</p>\n<pre><code>switch (player.class) {\n  case (\"Warrior\") {\n    player.attacks = Split (\"Strike;Cleave;Shield bash;Charge\")\n  }\n  case (\"Wizard\") {\n    player.attacks = Split (\"Strike;Fireball;Lightning bolt;Mana drain\")\n  }\n  case (\"Rogue\") {\n    player.attacks = Split (\"Strike;Back attack;Charge\")\n  }\n}\n</code></pre>\n<p>Then use that when giving the player options:</p>\n<pre><code>    ShowMenu (\"Choose your attack\", player.attacks, true) {\n      switch (result) {\n        case (\"Strike\") {\n          msg (\"You attack the guy with your mighty weapon.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Cleave\") {\n          msg (\"You cleave the fridge out of your enemy. Boomshakalak.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Shield bash\") {\n          msg (\"You bash your shield into the face of your enemy.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Charge\") {\n          msg (\"You charge your foo and yell GERONIMOOOOOOO!!!\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n        case (\"Fireball\") {\n          msg (\"You shoot a ball of fire at your hapless foe and laugh as it is consumed in fire.\")\n          // SCRIPT DAMAGE, HEALTH and what not HERE\n        }\n       // etc.\n      }\n    }\n</code></pre>\n<p>You can even add extra attacks as the game progresses.</p>\n<pre><code>list add (player.attacks, \"Divine retribution\")\n</code></pre>\n\n",
      "PostDate": "2018-10-16T09:17:38.1614076Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "681edb58-9a8e-4494-95cc-9f49dbb20ef7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't see why everyone is making it so complex.\r\nIf you want the same options to be available in every battle, it makes sense to have a menu like shown above. But if it's just a case of restricting choices, you could do it with simple script-and-text pages.\r\n\r\nIn the page where they've chosen to be a warrior, I assume you have a script like:\r\n```\r\nplayer.class = \"Warrior\"\r\n```\r\n\r\nand then on the battle page, you would have something like:\r\n```\r\nif (player.class = \"Warrior\") {\r\n  dictionary remove (this.options, \"Burn them with a Firebolt\")\r\n}\r\n```\r\nor more likely:\r\n```\r\nif (not player.class = \"Wizard\") {\r\n  dictionary remove (this.options, \"Burn them with a Firebolt\")\r\n}\r\n```\r\n\r\nYou can put as many options as you need in the script, and it will remove the named options from the current page.\r\nThat's probably the simplest way to do it if you want to just restrict the options, rather than creating a full combat system (which is the impression I got from your first post).",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't see why everyone is making it so complex.<br>\nIf you want the same options to be available in every battle, it makes sense to have a menu like shown above. But if it's just a case of restricting choices, you could do it with simple script-and-text pages.</p>\n<p>In the page where they've chosen to be a warrior, I assume you have a script like:</p>\n<pre><code>player.class = \"Warrior\"\n</code></pre>\n<p>and then on the battle page, you would have something like:</p>\n<pre><code>if (player.class = \"Warrior\") {\n  dictionary remove (this.options, \"Burn them with a Firebolt\")\n}\n</code></pre>\n<p>or more likely:</p>\n<pre><code>if (not player.class = \"Wizard\") {\n  dictionary remove (this.options, \"Burn them with a Firebolt\")\n}\n</code></pre>\n<p>You can put as many options as you need in the script, and it will remove the named options from the current page.<br>\nThat's probably the simplest way to do it if you want to just restrict the options, rather than creating a full combat system (which is the impression I got from your first post).</p>\n\n",
      "PostDate": "2018-10-16T09:36:33.3116716Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e79090b0-4603-4b75-b6b9-c0e2419268b2",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Snap. I missed the fact that it's a gamebook. I know nothing about those.",
      "EditableFormat": "markdown",
      "HTML": "<p>Snap. I missed the fact that it's a gamebook. I know nothing about those.</p>\n\n",
      "PostDate": "2018-10-16T10:08:09.9283598Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "35f98be3-768b-4bc7-86ea-71f4871750a1",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@MrA\r\n\r\nI figured it actually would be less complicated that way. If there’s lots of classes and every class has 3-5 possible attacks there would be a whole lot of excluding later on. \r\nI might be wrong. It’s been known to happen. Pretty much most of the time :)\r\n\r\nEither way, I’m guessing it might help for the OP to be presented with more ways than one. I’ve always appreciated that personally.\r\n\r\n@Pix\r\nSweet! Now I learned how to be more effective. Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>@MrA</p>\n<p>I figured it actually would be less complicated that way. If there’s lots of classes and every class has 3-5 possible attacks there would be a whole lot of excluding later on.<br>\nI might be wrong. It’s been known to happen. Pretty much most of the time :)</p>\n<p>Either way, I’m guessing it might help for the OP to be presented with more ways than one. I’ve always appreciated that personally.</p>\n<p>@Pix<br>\nSweet! Now I learned how to be more effective. Thanks!</p>\n\n",
      "PostDate": "2018-10-16T15:36:48.5951922Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4283768b-5674-46bb-b8ac-e78e5b835427",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I've seen two ways of handling combat in (actual printed) gamebooks. One is that every combat situation has like \"If you are a wizard, you may turn to page 393 to cast Word of Immolation on the goblin\". In that case, the attacks aren't the same each time, so it's probably less work to have one `if` statement to disable it for each option on the page.\r\n\r\nAnd the other is having an actual battle system; which could be done with a lot of use of `ShowMenu`, but would really be easier to implement as a text adventure that looks like a gamebook.\r\n\r\nActually, if you're doing this a lot, here's a third method. As a game-wide thing, you could have this as your `game.roomenter` script (\"Script when entering page\" in the game's \"Script\" tab):\r\n```\r\nif (HasAttribute (player.parent, \"options\") and not HasAttribute (player.parent, \"alloptions\")) {\r\n  player.parent.alloptions = player.parent.options\r\n}\r\nif (HasAttribute (player.parent, \"alloptions\")) {\r\n  options = NewStringDictionary()\r\n  class = player.class\r\n  foreach (key, player.parent.alloptions) {\r\n    option = DictionaryItem (player.parent.alloptions, key)\r\n    pos = IndexOf (option, \"]\")\r\n    if (StartsWith (option, \"[\") and pos > 0) {\r\n      classes = Mid (option, 2, pos - 2)\r\n      option = Trim (Mid (option, pos + 1))\r\n      if (ListContains (Split(classes), class)) {\r\n        dictionary add (options, key, option)\r\n      }\r\n    }\r\n    else {\r\n      dictionary add (options, key, option)\r\n    }\r\n  }\r\n  player.parent.options = options\r\n}\r\n```\r\n\r\nSo if there's a lot of options that depend on character class, but they're not the same in every battle, you can make them all normal gamebook pages. But enter the text for the link as `[Barbarian;Knight] Smash the goblin with your battleaxe` or `[Wizard] Cast a nasty spell at the ogre`. With that script in place, the links that the player isn't the right class for will automatically be hidden.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I've seen two ways of handling combat in (actual printed) gamebooks. One is that every combat situation has like \"If you are a wizard, you may turn to page 393 to cast Word of Immolation on the goblin\". In that case, the attacks aren't the same each time, so it's probably less work to have one <code>if</code> statement to disable it for each option on the page.</p>\n<p>And the other is having an actual battle system; which could be done with a lot of use of <code>ShowMenu</code>, but would really be easier to implement as a text adventure that looks like a gamebook.</p>\n<p>Actually, if you're doing this a lot, here's a third method. As a game-wide thing, you could have this as your <code>game.roomenter</code> script (\"Script when entering page\" in the game's \"Script\" tab):</p>\n<pre><code>if (HasAttribute (player.parent, \"options\") and not HasAttribute (player.parent, \"alloptions\")) {\n  player.parent.alloptions = player.parent.options\n}\nif (HasAttribute (player.parent, \"alloptions\")) {\n  options = NewStringDictionary()\n  class = player.class\n  foreach (key, player.parent.alloptions) {\n    option = DictionaryItem (player.parent.alloptions, key)\n    pos = IndexOf (option, \"]\")\n    if (StartsWith (option, \"[\") and pos &gt; 0) {\n      classes = Mid (option, 2, pos - 2)\n      option = Trim (Mid (option, pos + 1))\n      if (ListContains (Split(classes), class)) {\n        dictionary add (options, key, option)\n      }\n    }\n    else {\n      dictionary add (options, key, option)\n    }\n  }\n  player.parent.options = options\n}\n</code></pre>\n<p>So if there's a lot of options that depend on character class, but they're not the same in every battle, you can make them all normal gamebook pages. But enter the text for the link as <code>[Barbarian;Knight] Smash the goblin with your battleaxe</code> or <code>[Wizard] Cast a nasty spell at the ogre</code>. With that script in place, the links that the player isn't the right class for will automatically be hidden.</p>\n\n",
      "PostDate": "2018-10-16T18:53:11.1192786Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "45371826-7c17-4f55-983c-31081ffa25d9",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sounds about right. Like I said, I missed the fact that it's a gamebook.  I keep forgetting that choice even exists when starting a new project in Quest (since I've only started two and I've been working on them since March. Or May. I forget... that too).\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Sounds about right. Like I said, I missed the fact that it's a gamebook.  I keep forgetting that choice even exists when starting a new project in Quest (since I've only started two and I've been working on them since March. Or May. I forget... that too).</p>\n\n",
      "PostDate": "2018-10-16T19:05:54.6833302Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "22c9bb2a-85aa-43fd-86cb-8c6f0ef7972f",
      "UserId": 354112,
      "Username": "AxolotlAxl",
      "AvatarUrl": "https://secure.gravatar.com/avatar/476a434b7edae4bbdc7e548fb114be29?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you all for the massive help! I am switching it to a text game rather than gamebook, because someone pointed out that it was easier. I also planned only 1 or 2 attacks per class, and 3 or 4 classes. So I hope to implement all these and finish up my game soon! Thanks again for the example code, I kinda suck at figuring out what I need to write lol",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you all for the massive help! I am switching it to a text game rather than gamebook, because someone pointed out that it was easier. I also planned only 1 or 2 attacks per class, and 3 or 4 classes. So I hope to implement all these and finish up my game soon! Thanks again for the example code, I kinda suck at figuring out what I need to write lol</p>\n\n",
      "PostDate": "2018-10-19T17:26:41.606057Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
