{
  "Topic": {
    "TopicId": "yqzkut-gseocsq2k_sa40w",
    "ForumId": "10",
    "Title": "Locked doors like Resident Evil",
    "LastUpdated": "2020-07-13T02:00:17.5224561Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "93a43539-5d5c-4fe1-8223-2f5f21079530",
      "UserId": 288526,
      "Username": "matsumoto",
      "AvatarUrl": "http://i.imgur.com/4E11r1Qb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a project where the player has to collect different theme keys (like in the Resident Evil games, these keys often are supposed to unlock several different doors).\r\n\r\nStandard doors work to me with a simple script, to make it more appealing:\r\n\r\n    msg (\"You go through the door.\")\r\n    play sound (\"0001_b.wav\", true, false)\r\n    play sound (\"0021_b.wav\", true, false)\r\n    player.parent = this.to\r\n\r\nThe sound effects are to have a knob turning and the door opening. So here are the two things I'd like to do if the door is locked\r\n\r\n1.  **Play the knob sound**\r\n2. **Display the message** \"It's locked. There's a carving of the Wind\".\r\n\r\nWith the ```Print message when locked``` option in the exit I manage to do the second part, however, I can't play a sound nor can I make a script to run only if the exit is locked.\r\n\r\nI checked the forum and found this:\r\nhttps://textadventures.co.uk/forum/quest/topic/eweqzj1dkuyb3juacbgvrg/run-script-if-door-is-locked\r\n\r\nSeems like what I need, however the part:\r\n```if(this.locked)```\r\nDoesn't work, as the message in ```Print message when locked``` overrides it. Deleting that message doesn't work, as it just makes the game not say anything if the player tries to use the locked door.\r\n\r\nAnother thing that would be great to know:\r\nSay I have 3 doors that requird the Wind Key, after unlocking all of them, is it possible to tell the player that this key has no more use and can be discarded? I wanna implement inventory limitations so that'd allow the player to know he can drop the key with no fear of having to backtrack for it.\r\n\r\nThanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a project where the player has to collect different theme keys (like in the Resident Evil games, these keys often are supposed to unlock several different doors).</p>\n<p>Standard doors work to me with a simple script, to make it more appealing:</p>\n<pre><code>msg (\"You go through the door.\")\nplay sound (\"0001_b.wav\", true, false)\nplay sound (\"0021_b.wav\", true, false)\nplayer.parent = this.to\n</code></pre>\n<p>The sound effects are to have a knob turning and the door opening. So here are the two things I'd like to do if the door is locked</p>\n<ol>\n<li><strong>Play the knob sound</strong></li>\n<li><strong>Display the message</strong> \"It's locked. There's a carving of the Wind\".</li>\n</ol>\n<p>With the <code>Print message when locked</code> option in the exit I manage to do the second part, however, I can't play a sound nor can I make a script to run only if the exit is locked.</p>\n<p>I checked the forum and found this:<br>\nhttps://textadventures.co.uk/forum/quest/topic/eweqzj1dkuyb3juacbgvrg/run-script-if-door-is-locked</p>\n<p>Seems like what I need, however the part:<br>\n<code>if(this.locked)</code><br>\nDoesn't work, as the message in <code>Print message when locked</code> overrides it. Deleting that message doesn't work, as it just makes the game not say anything if the player tries to use the locked door.</p>\n<p>Another thing that would be great to know:<br>\nSay I have 3 doors that requird the Wind Key, after unlocking all of them, is it possible to tell the player that this key has no more use and can be discarded? I wanna implement inventory limitations so that'd allow the player to know he can drop the key with no fear of having to backtrack for it.</p>\n<p>Thanks in advance!</p>\n\n",
      "PostDate": "2020-07-13T02:00:17.5224561Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c9ece30a-1f62-4ba5-9d73-ce4b9a95028d",
      "UserId": 207026,
      "Username": "Pykrete",
      "AvatarUrl": "https://i.imgur.com/n9Ygszeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... Well, one way to get around it would be to completely bypass the in-built lock function.\r\n\r\nRather than setting the exit to locked, make an attribute for it instead -- 'locked' is taken by Quest, I assume, so just call it lock. You can make it a Boolean - true or false - or an integer that goes from 0 to 1. 0 for unlocked, 1 for locked. The same effect, but some people prefer one way or the other.\r\n\r\nGive your exit a name, first. It's the box just above the checkbox for 'visible'.\r\n\r\nActivate the 'run a script' button beneath that box that sets the 'print when locked' message, then make an if check.\r\n\r\n```\r\nif (exit name.lock = 1) {\r\n//Stuff in this section will appear when the door is locked! You can make a second if check to see if the player has a key -- if it's an item, check to see if the item's .parent attribute is the player object -- in other words, is it in their inventory! If the key is simply an attribute set to true in the player's attributes, then instead check to see if that attribute is true or false.\r\nif (player.key) {\r\nmsg (\"You insert the key, give it a turn, and the door opens!\")\r\n//Then move the player into the room, which can be as simple as inserting a move object script where the object is the player, and the new room is the target destination!\r\nMoveObject (player, roomname)\r\n}\r\nelse if (not player.key) {\r\nmsg (\"You don't have the right key for this door!\")\r\n}\r\n}\r\nelse if (exit name.lock = 0) {\r\n//The door's already unlocked, so you don't have to worry about anything here, other than inserting the script to move the player into the next room as above, seeing as you disabled the automatic movement!\r\nMoveObject (player, room)\r\n}\r\n```\r\n\r\nThat should look neater -- with the //comments appearing in green -- in the engine itself. Have a play with it, but be aware that the great thing about Quest is that you can have 50 solutions for one problem, and the best advice I can give is if it works, it ain't stupid!\r\n\r\nI need to go pass out, but if there are any issues, I'll try to help tomorrow if no one else has offered solutions or advice! Hell, someone might have a solution more in keeping with your original question. I've not played with the built-in locks in ages, so my solution was to work around them.\r\n\r\nOh! As for your second question, yeah, that's totally possible. You could make an attribute on the key object or the player entitled Wind Key Uses, set it to 3, and then every door you unlock with it in the manner above, add in;\r\n\r\n```\r\nplayer.Wind Key Uses = player.Wind Key Uses - 1\r\n```\r\n\r\nThen, you could use a change script, a timer script or just an if check at the end of each door unlock with the Wind Key to check if this variable has hit 0. If it has, you can print a message telling them to discard it... or you could just move the object out of their inventory into a dev room, or even outright destroy the object, with a message like 'The Wind Key crumbles to dust, its purpose fulfilled!'\r\n\r\nedit; Your existing code already handles player movement in another valid way, d'oh. Then you should be able to understand that mess I posted just fine, I hope! Good luck!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... Well, one way to get around it would be to completely bypass the in-built lock function.</p>\n<p>Rather than setting the exit to locked, make an attribute for it instead -- 'locked' is taken by Quest, I assume, so just call it lock. You can make it a Boolean - true or false - or an integer that goes from 0 to 1. 0 for unlocked, 1 for locked. The same effect, but some people prefer one way or the other.</p>\n<p>Give your exit a name, first. It's the box just above the checkbox for 'visible'.</p>\n<p>Activate the 'run a script' button beneath that box that sets the 'print when locked' message, then make an if check.</p>\n<pre><code>if (exit name.lock = 1) {\n//Stuff in this section will appear when the door is locked! You can make a second if check to see if the player has a key -- if it's an item, check to see if the item's .parent attribute is the player object -- in other words, is it in their inventory! If the key is simply an attribute set to true in the player's attributes, then instead check to see if that attribute is true or false.\nif (player.key) {\nmsg (\"You insert the key, give it a turn, and the door opens!\")\n//Then move the player into the room, which can be as simple as inserting a move object script where the object is the player, and the new room is the target destination!\nMoveObject (player, roomname)\n}\nelse if (not player.key) {\nmsg (\"You don't have the right key for this door!\")\n}\n}\nelse if (exit name.lock = 0) {\n//The door's already unlocked, so you don't have to worry about anything here, other than inserting the script to move the player into the next room as above, seeing as you disabled the automatic movement!\nMoveObject (player, room)\n}\n</code></pre>\n<p>That should look neater -- with the //comments appearing in green -- in the engine itself. Have a play with it, but be aware that the great thing about Quest is that you can have 50 solutions for one problem, and the best advice I can give is if it works, it ain't stupid!</p>\n<p>I need to go pass out, but if there are any issues, I'll try to help tomorrow if no one else has offered solutions or advice! Hell, someone might have a solution more in keeping with your original question. I've not played with the built-in locks in ages, so my solution was to work around them.</p>\n<p>Oh! As for your second question, yeah, that's totally possible. You could make an attribute on the key object or the player entitled Wind Key Uses, set it to 3, and then every door you unlock with it in the manner above, add in;</p>\n<pre><code>player.Wind Key Uses = player.Wind Key Uses - 1\n</code></pre>\n<p>Then, you could use a change script, a timer script or just an if check at the end of each door unlock with the Wind Key to check if this variable has hit 0. If it has, you can print a message telling them to discard it... or you could just move the object out of their inventory into a dev room, or even outright destroy the object, with a message like 'The Wind Key crumbles to dust, its purpose fulfilled!'</p>\n<p>edit; Your existing code already handles player movement in another valid way, d'oh. Then you should be able to understand that mess I posted just fine, I hope! Good luck!</p>\n\n",
      "PostDate": "2020-07-13T03:55:42.6202402Z",
      "LastEditDate": "2020-07-13T03:57:02.6230714Z",
      "link": null
    },
    {
      "PostId": "81bee131-39de-4bac-8584-bc150ced0f71",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem is that the script on an exit runs instead of sending the player through it; so only if the door isn't locked. So you would probably want to have your own attribute, maybe `unlocked`, to keep track of when the door has been unlocked without using Quest's default \"lock\" behaviour.\r\n\r\nSo the script would be something like:\r\n<pre><code>play sound (\"0001_b.wav\", true, false)\r\nif (GetBoolean (this, \"unlocked\")) {\r\n  msg (\"You go through the door.\")\r\n  play sound (\"0021_b.wav\", true, false)\r\n  player.parent = this.to\r\n}\r\nelse {\r\n  if (ContainsReachable (game.pov, <em style=\"color: green; font-family:initial;\">wind key</em>)) {\r\n    msg (\"You unlock the door with the wind key and go through.\")\r\n    play sound (\"0021_b.wav\", true, false)\r\n    this.unlocked = true\r\n    player.parent = this.to\r\n  }\r\n  else {\r\n    msg (\"It's locked. There's a carving of the Wind.\")\r\n  }\r\n}</code></pre>\r\n\r\nI'm assuming that the key is an object that might be in the player's inventory; while Pykrete thought it might be an attribute set on the player. Both ways work, but I prefer to use objects as objects myself.\r\n\r\n> Say I have 3 doors that requird the Wind Key, after unlocking all of them, is it possible to tell the player that this key has no more use and can be discarded? I wanna implement inventory limitations so that'd allow the player to know he can drop the key with no fear of having to backtrack for it.\r\n\r\nThere's 2 ways you could do that. You could give the key a `uses` attribute to track how many doors each key is needed for, but I wouldn't do it that way. Instead, I'd give the door a `key` attribute that points to the appropriate key. In this version you don't need an `unlocked` attribute; you can just remove `key`, which makes the code a little simpler.\r\n```\r\nplay sound (\"0001_b.wav\", true, false)\r\nif (HasObject (this, \"key\")) {\r\n  if (ContainsReachable (game.pov, this.key)) {\r\n    msg (\"You unlock the door with the \" + GetDisplayAlias (this.key) + \" and go through.\")\r\n    if (ListCount (FilterByAttribute (AllExits(), \"key\", this.key)) = 1) {\r\n      // This is the only door left using that key\r\n      msg (\"The key crumbles into dust, its purpose fulfilled.\")\r\n      RemoveObject (key)\r\n    }\r\n    this.key = null\r\n  }\r\n  else {\r\n    msg (\"It's locked. \" + this.lockmessage)\r\n  }\r\n}\r\nelse {\r\n  msg (\"You go through the door.\")\r\n}\r\nif (not HasObject (this, \"key\")) {\r\n  play sound (\"0021_b.wav\", true, false)\r\n  player.parent = this.to\r\n}\r\n```\r\nIn this case, it checks if there is an exit other than this one that needs the same key, and otherwise destroys it.",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem is that the script on an exit runs instead of sending the player through it; so only if the door isn't locked. So you would probably want to have your own attribute, maybe <code>unlocked</code>, to keep track of when the door has been unlocked without using Quest's default \"lock\" behaviour.</p>\n<p>So the script would be something like:</p>\n<pre><code>play sound (\"0001_b.wav\", true, false)\nif (GetBoolean (this, \"unlocked\")) {\n  msg (\"You go through the door.\")\n  play sound (\"0021_b.wav\", true, false)\n  player.parent = this.to\n}\nelse {\n  if (ContainsReachable (game.pov, <em style=\"color: green; font-family: initial\">wind key</em>)) {\n    msg (\"You unlock the door with the wind key and go through.\")\n    play sound (\"0021_b.wav\", true, false)\n    this.unlocked = true\n    player.parent = this.to\n  }\n  else {\n    msg (\"It's locked. There's a carving of the Wind.\")\n  }\n}</code></pre>\n<p>I'm assuming that the key is an object that might be in the player's inventory; while Pykrete thought it might be an attribute set on the player. Both ways work, but I prefer to use objects as objects myself.</p>\n<blockquote>\n<p>Say I have 3 doors that requird the Wind Key, after unlocking all of them, is it possible to tell the player that this key has no more use and can be discarded? I wanna implement inventory limitations so that'd allow the player to know he can drop the key with no fear of having to backtrack for it.</p>\n</blockquote>\n<p>There's 2 ways you could do that. You could give the key a <code>uses</code> attribute to track how many doors each key is needed for, but I wouldn't do it that way. Instead, I'd give the door a <code>key</code> attribute that points to the appropriate key. In this version you don't need an <code>unlocked</code> attribute; you can just remove <code>key</code>, which makes the code a little simpler.</p>\n<pre><code>play sound (\"0001_b.wav\", true, false)\nif (HasObject (this, \"key\")) {\n  if (ContainsReachable (game.pov, this.key)) {\n    msg (\"You unlock the door with the \" + GetDisplayAlias (this.key) + \" and go through.\")\n    if (ListCount (FilterByAttribute (AllExits(), \"key\", this.key)) = 1) {\n      // This is the only door left using that key\n      msg (\"The key crumbles into dust, its purpose fulfilled.\")\n      RemoveObject (key)\n    }\n    this.key = null\n  }\n  else {\n    msg (\"It's locked. \" + this.lockmessage)\n  }\n}\nelse {\n  msg (\"You go through the door.\")\n}\nif (not HasObject (this, \"key\")) {\n  play sound (\"0021_b.wav\", true, false)\n  player.parent = this.to\n}\n</code></pre>\n<p>In this case, it checks if there is an exit other than this one that needs the same key, and otherwise destroys it.</p>\n\n",
      "PostDate": "2020-07-13T11:18:00.8903912Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b533cbbd-6795-41c2-8cf4-847123d5d691",
      "UserId": 288526,
      "Username": "matsumoto",
      "AvatarUrl": "http://i.imgur.com/4E11r1Qb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you so much for you replies, I managed to do something that is like between both answers and that works well for me.\r\n\r\nAlthough I started to wonder... What if I had a door that needs a key, but the player has another way around it. (what I mean is, the locked door would just save a lot of time during the navigation, but not really stop the player from progessing). So how can I handle the situation where the player might unlock it from either side?\r\n\r\nI'm assuming I can do something like:\r\n\r\n    if (this.lock) {\r\n    if (Wind Key.parent = player) {\r\n     play sound (\"0031_a.wav\", true, false)\r\n    msg (\"You used the \" +Wind Key.alias +\".\")\r\n    Wind Key.uses = Wind Key.uses -1\r\n    this.lock = false\r\n    if (Wind Key.uses=0) {\r\n      RemoveObject = Wind Key\r\n      msg (\"The \" + Wind Key.alias + \" is now useless. Discarded it.\")\r\n    }\r\n    else {\r\n     }\r\n    }\r\n      else {\r\n    msg (\"The door is locked. Under the keyhole you see a carving of wind.\")\r\n    play sound (\"0041_b.wav\", true, false)\r\n    }\r\n    }\r\n    else {\r\n     msg (\"You go through the door.\")\r\n     play sound (\"0001_b.wav\", true, false)\r\n     play sound (\"0021_b.wav\", true, false)\r\n     MoveObject (player, this.to)\r\n    }\r\n\r\nBy using the line:\r\n\r\n    this.lock = false\r\n\r\nTo also set the other side's lock to ```false``` too. Is that a good way to handle it?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you so much for you replies, I managed to do something that is like between both answers and that works well for me.</p>\n<p>Although I started to wonder... What if I had a door that needs a key, but the player has another way around it. (what I mean is, the locked door would just save a lot of time during the navigation, but not really stop the player from progessing). So how can I handle the situation where the player might unlock it from either side?</p>\n<p>I'm assuming I can do something like:</p>\n<pre><code>if (this.lock) {\nif (Wind Key.parent = player) {\n play sound (\"0031_a.wav\", true, false)\nmsg (\"You used the \" +Wind Key.alias +\".\")\nWind Key.uses = Wind Key.uses -1\nthis.lock = false\nif (Wind Key.uses=0) {\n  RemoveObject = Wind Key\n  msg (\"The \" + Wind Key.alias + \" is now useless. Discarded it.\")\n}\nelse {\n }\n}\n  else {\nmsg (\"The door is locked. Under the keyhole you see a carving of wind.\")\nplay sound (\"0041_b.wav\", true, false)\n}\n}\nelse {\n msg (\"You go through the door.\")\n play sound (\"0001_b.wav\", true, false)\n play sound (\"0021_b.wav\", true, false)\n MoveObject (player, this.to)\n}\n</code></pre>\n<p>By using the line:</p>\n<pre><code>this.lock = false\n</code></pre>\n<p>To also set the other side's lock to <code>false</code> too. Is that a good way to handle it?</p>\n\n",
      "PostDate": "2020-07-14T02:50:09.6451194Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6599a9d8-51d6-4384-b48b-7e2cd7a61e74",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What if I had a door that needs a key, but the player has another way around it.\r\n\r\nMy preferred way of doing this is using a changescript. If you have a script attribute named `changedlock`, Quest will run it automatically every time the `lock` attribute changes. So you would make it:\r\n```\r\nname_of_other_exit.lock = this.lock\r\n```\r\n\r\nOr if you don't want to name your exits, you could do:\r\n```\r\notherside = GetObject  (GetExitByLink (this.to, this.parent))\r\notherside.lock = this.lock\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What if I had a door that needs a key, but the player has another way around it.</p>\n</blockquote>\n<p>My preferred way of doing this is using a changescript. If you have a script attribute named <code>changedlock</code>, Quest will run it automatically every time the <code>lock</code> attribute changes. So you would make it:</p>\n<pre><code>name_of_other_exit.lock = this.lock\n</code></pre>\n<p>Or if you don't want to name your exits, you could do:</p>\n<pre><code>otherside = GetObject  (GetExitByLink (this.to, this.parent))\notherside.lock = this.lock\n</code></pre>\n\n",
      "PostDate": "2020-07-14T08:26:04.0350328Z",
      "LastEditDate": "2020-07-14T08:26:40.0649728Z",
      "link": null
    },
    {
      "PostId": "3f93c0cf-af0c-46d5-bae4-531b2f89874f",
      "UserId": 288526,
      "Username": "matsumoto",
      "AvatarUrl": "http://i.imgur.com/4E11r1Qb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's actually way simpler than I expected.\r\n\r\n>If you have a script attribute named ```changedlock```, Quest will run it automatically every time the ```lock``` attribute changes. \r\n\r\nDoes this mean I don't actually have to use the command:\r\n\r\n    name_of_other_exit.lock = this.lock\r\n\r\nManually once the door is unlocked?",
      "EditableFormat": "markdown",
      "HTML": "<p>That's actually way simpler than I expected.</p>\n<blockquote>\n<p>If you have a script attribute named <code>changedlock</code>, Quest will run it automatically every time the <code>lock</code> attribute changes.</p>\n</blockquote>\n<p>Does this mean I don't actually have to use the command:</p>\n<pre><code>name_of_other_exit.lock = this.lock\n</code></pre>\n<p>Manually once the door is unlocked?</p>\n\n",
      "PostDate": "2020-07-14T17:26:04.5186818Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d6148dd9-8d5d-4ce2-9505-ba27626507f7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Does this mean I don't actually have to use the command:\r\n\r\nYou can put that line in a changescript, or after you unlock the door.\r\n\r\nThe advantage of the changescript is that in games where there's more than one way to unlock or open a door, the same changescript will handle all of them. It's a one-line way to keep an attribute synchronised between two different objects or exits.\r\n\r\nIn your case, because there's only one way to unlock the door, it's just as easy to set the `lock` attribute for both exits in the same place. But if you do that, you'll need to remember to unlock both exits any time you add another way to unlock a door in future. I tend to prefer using changescripts as a \"just in case\" measure; it means that if I add some features in future, the number of details I need to remember to deal with is smaller.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Does this mean I don't actually have to use the command:</p>\n</blockquote>\n<p>You can put that line in a changescript, or after you unlock the door.</p>\n<p>The advantage of the changescript is that in games where there's more than one way to unlock or open a door, the same changescript will handle all of them. It's a one-line way to keep an attribute synchronised between two different objects or exits.</p>\n<p>In your case, because there's only one way to unlock the door, it's just as easy to set the <code>lock</code> attribute for both exits in the same place. But if you do that, you'll need to remember to unlock both exits any time you add another way to unlock a door in future. I tend to prefer using changescripts as a \"just in case\" measure; it means that if I add some features in future, the number of details I need to remember to deal with is smaller.</p>\n\n",
      "PostDate": "2020-07-14T21:13:26.3269711Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
