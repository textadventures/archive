{
  "Topic": {
    "TopicId": "isydool7teme3jknl1rv9a",
    "ForumId": "10",
    "Title": "ShowMenu script collageüòÅ ",
    "LastUpdated": "2020-05-17T18:30:16.5692512Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a36491b3-51cb-400e-bc8c-0881851135fa",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a short equipping system and have reached a snag in the show menu script. I am attempting to give the player a choice of which hand a torch will go if both hands are holding something. I don't know what the result is to put in a condition for the result because of the way I patched the code together. No errors, just a blank response.\r\n\r\nNot sure if I am using \"StartsWith\" correctly.\r\nI used ```player.equipped = StringListSort (player.equipped)``` because I can then know the order of the list and pull them by position, knowing shield was before sword or short sword because they were in alphabetical order but could not get a working response using ```if (result = StringListItem (player.equipped, 0)```. \r\nI have tried to get the value of result using ```msg(result)``` but where ever I put it in the script it will not print.\r\n\r\nCan anyone see what I need to do?\r\n\r\nThis is the \"light\" verb for the torch.\r\n```\r\nif (Got(object)) {\r\n  if (player.left_hand <> null and player.right_hand <> null and player.both_hands = null) {\r\n    player.equipped = StringListSort (player.equipped)\r\n    options = player.equipped\r\n    game.temp = object\r\n    ShowMenu (\"Which will you unequip?\", options, true) {\r\n      object = game.temp\r\n      get input {\r\n        if (result = StartsWith(\"Shield\")) {\r\n          ClearTurn\r\n          msg (\"You shoulder your shield and use your flint and steel to light your torch, holding it out in front of you.\")\r\n          player.left_hand.listalias = player.left_hand.originalalias\r\n          player.left_hand.equipped = False\r\n          player.left_hand = this\r\n        }\r\n        else if (result = StartsWith(result, \"Sword\")) {\r\n          ClearTurn\r\n          ShowRoomDescription\r\n          msg (\"You sheath your weapon and use your flint and steel to light your torch, holding it out in front of you.\")\r\n          player.onehanded.listalias = player.onehanded.originalalias\r\n          player.onehanded.equipped = False\r\n          player.onehanded = this\r\n        }\r\n      }\r\n      on ready {\r\n        list add (object.inventoryverbs, \"Snuff\")\r\n        list remove (object.inventoryverbs, \"Light\")\r\n        object.listalias = object.listalias + \" (lit)\"\r\n        object.burned = True\r\n        object.lightsource = True\r\n        EnableTurnScript (torchturnscript)\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n<details><summary>Click for whole system code.</summary>\r\n\r\n\r\n```<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <dynamictemplate name=\"DefaultSpeakTo\">You get no response.</dynamictemplate>\r\n  <game name=\"Equipping System 5-13-20\">\r\n    <gameid>ac896f77-268d-4e18-912b-bf01791b129e</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2020</firstpublished>\r\n    <feature_lightdark />\r\n    <feature_limitinventory />\r\n    <feature_annotations />\r\n    <feature_advancedwearables />\r\n    <feature_advancedscripts />\r\n    <feature_devmode />\r\n    <allowlookdirections />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <attr name=\"empty_hands\">fists</attr>\r\n      <attr name=\"both_hand_item\">fists</attr>\r\n      <attr name=\"left_hand_item\">fist</attr>\r\n      <attr name=\"right_hand_item\">fist</attr>\r\n      <equipped type=\"stringlist\" />\r\n      <object name=\"short_sword\">\r\n        <inherit name=\"editor_object\" />\r\n        <one_handed_weapon />\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <attr name=\"can_equip_left\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_weapon\" type=\"boolean\">false</attr>\r\n        <one_handed_item />\r\n        <attr name=\"one_handed_defense\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_item\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_defense\" type=\"boolean\">false</attr>\r\n        <displayverbs type=\"stringlist\">\r\n          <value>Look at</value>\r\n          <value>Take</value>\r\n        </displayverbs>\r\n        <inventoryverbs type=\"stringlist\">\r\n          <value>Look at</value>\r\n          <value>Drop</value>\r\n          <value>Equip</value>\r\n        </inventoryverbs>\r\n        <attr name=\"is_weapon\" type=\"string\"></attr>\r\n        <alias>short sword</alias>\r\n        <originalalias type=\"string\"></originalalias>\r\n        <listalias>Short Sword</listalias>\r\n        <category type=\"script\">\r\n          ClearTurn\r\n          EquipOneHandedWeapon (this)\r\n        </category>\r\n      </object>\r\n      <object name=\"long_sword\">\r\n        <inherit name=\"editor_object\" />\r\n        <two_handed_weapon />\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <attr name=\"one_handed_weapon\" type=\"boolean\">false</attr>\r\n        <attr name=\"one_handed_item\" type=\"boolean\">false</attr>\r\n        <attr name=\"one_handed_defense\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_defense\" type=\"boolean\">false</attr>\r\n        <two_handed_item />\r\n        <alias>long sword</alias>\r\n        <listalias>Long Sword</listalias>\r\n        <originalalias>Long Sword</originalalias>\r\n        <inventoryverbs type=\"stringlist\">\r\n          <value>Look at</value>\r\n          <value>Drop</value>\r\n          <value>Equip</value>\r\n        </inventoryverbs>\r\n        <attr name=\"is_weapon\" type=\"string\"></attr>\r\n        <category type=\"script\">\r\n          ClearTurn\r\n          EquipTwoHandedWeapon (this)\r\n        </category>\r\n      </object>\r\n      <object name=\"torch\">\r\n        <inherit name=\"editor_object\" />\r\n        <one_handed_item />\r\n        <one_handed_weapon />\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <attr name=\"one_handed_defense\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_item\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_defense\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_weapon\" type=\"boolean\">false</attr>\r\n        <attr name=\"is_torch\" type=\"string\"></attr>\r\n        <alias>torch</alias>\r\n        <listalias>Torch</listalias>\r\n        <originalalias>Torch</originalalias>\r\n        <inventoryverbs type=\"stringlist\">\r\n          <value>Look at</value>\r\n          <value>Drop</value>\r\n          <value>Light</value>\r\n        </inventoryverbs>\r\n        <attr name=\"feature_switchable\" type=\"boolean\">false</attr>\r\n        <feature_lightdark />\r\n        <lightsource type=\"boolean\">false</lightsource>\r\n        <lightstrength>strong</lightstrength>\r\n        <volume type=\"int\">1</volume>\r\n        <life type=\"int\">50</life>\r\n        <price type=\"int\">1</price>\r\n        <category type=\"script\">\r\n          ClearTurn\r\n          LightAndUseTorch (this)\r\n        </category>\r\n      </object>\r\n      <object name=\"shield\">\r\n        <inherit name=\"editor_object\" />\r\n        <one_handed_weapon />\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <attr name=\"two_handed_weapon\" type=\"boolean\">false</attr>\r\n        <one_handed_defense />\r\n        <one_handed_item />\r\n        <attr name=\"two_handed_item\" type=\"boolean\">false</attr>\r\n        <attr name=\"two_handed_defense\" type=\"boolean\">false</attr>\r\n        <inventoryverbs type=\"stringlist\">\r\n          <value>Look at</value>\r\n          <value>Drop</value>\r\n          <value>Equip</value>\r\n        </inventoryverbs>\r\n        <attr name=\"is_shield\" type=\"string\"></attr>\r\n        <listalias>Shield</listalias>\r\n        <originalalias>Shield</originalalias>\r\n        <category type=\"script\">\r\n          ClearTurn\r\n          EquipOneHandedShield (this)\r\n        </category>\r\n        <lightsource type=\"boolean\">false</lightsource>\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <command name=\"equip\">\r\n    <pattern>equip #object#</pattern>\r\n    <script><![CDATA[\r\n      ClearTurn\r\n      if (not (HasAttribute(object, \"equipped\"))) {\r\n        msg (\"That is not something you can equip.\")\r\n      }\r\n      else if (object.equipped = True) {\r\n        msg (\"That is already equipped.\")\r\n      }\r\n      else if (HasAttribute(object, \"is_weapon\")) {\r\n        object.listalias = object.listalias + \"<small> (equipped)</small>\"\r\n        object.equipped = True\r\n        do (object, \"category\")\r\n      }\r\n      else if (HasAttribute(object, \"is_torch\")) {\r\n        object.listalias = object.listalias + \"<small> (lit)</small>\"\r\n        object.equipped = True\r\n        do (object, \"category\")\r\n      }\r\n      else if (HasAttribute(object, \"is_shield\")) {\r\n        object.listalias = object.listalias + \"<small> (equipped)</small>\"\r\n        object.equipped = True\r\n        do (object, \"category\")\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <command name=\"light\">\r\n    <pattern>light #object#; burn #object#</pattern>\r\n    <unresolved type=\"string\"></unresolved>\r\n    <script><![CDATA[\r\n      if (object.lightsource = True) {\r\n        msg (\"It is already lit.\")\r\n      }\r\n      if (Got(object)) {\r\n        if (player.left_hand <> null and player.right_hand <> null and player.both_hands = null) {\r\n          player.equipped = StringListSort (player.equipped)\r\n          options = player.equipped\r\n          game.temp = object\r\n          ShowMenu (\"Which will you unequip?\", options, true) {\r\n            object = game.temp\r\n            get input {\r\n              msg (result)\r\n              if (result = StartsWith(\"Shield\")) {\r\n                ClearTurn\r\n                msg (\"You shoulder your shield and use your flint and steel to light your torch, holding it out in front of you.\")\r\n                player.left_hand.listalias = player.left_hand.originalalias\r\n                player.left_hand.equipped = False\r\n                player.left_hand = this\r\n              }\r\n              else if (result = StartsWith(result, \"Sword\")) {\r\n                ClearTurn\r\n                ShowRoomDescription\r\n                msg (\"You sheath your weapon and use your flint and steel to light your torch, holding it out in front of you.\")\r\n                player.onehanded.listalias = player.onehanded.originalalias\r\n                player.onehanded.equipped = False\r\n                player.onehanded = this\r\n              }\r\n              else {\r\n                msg (result)\r\n              }\r\n            }\r\n            on ready {\r\n              msg (result)\r\n              list add (object.inventoryverbs, \"Snuff\")\r\n              list remove (object.inventoryverbs, \"Light\")\r\n              object.listalias = object.listalias + \" (lit)\"\r\n              object.burned = True\r\n              object.lightsource = True\r\n              EnableTurnScript (torchturnscript)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <turnscript name=\"torchturnscript\">\r\n    <script>\r\n      torch.life = torch.life - 1\r\n      if (torch.life = 10) {\r\n        torch.listalias = torch.alias + \" (dimming)\"\r\n        if (torch.parent = player.parent) {\r\n          msg (\"{color:Red:Your torch is getting dimmer!}\")\r\n        }\r\n      }\r\n      if (torch.life = 5) {\r\n        torch.listalias = torch.alias + \" (dim)\"\r\n        if (torch.parent = player.parent or torch.parent = player) {\r\n          msg (\"{color:Red:The torch is about to burn out and the room is growing darker.}\")\r\n        }\r\n      }\r\n      if (torch.life = 0) {\r\n        torch.listalias = torch.alias + \" (burned out)\"\r\n        torch.lightsource = false\r\n        torch.price = 0\r\n        list remove (torch.inventoryverbs, \"snuff\")\r\n        torch.lightsource = false\r\n        DisableTurnScript (torchturnscript)\r\n        torch.cannotswitchon = \"You cannot light the torch, it has burned up.\"\r\n        if (torch.parent = player.parent or torch.parent = player) {\r\n          msg (\"Your torch flickers and dies.\")\r\n        }\r\n        if (room.dark = true) {\r\n          msg (It is too dark to see!)\r\n        }\r\n      }\r\n    </script>\r\n  </turnscript>\r\n  <function name=\"EquipOneHandedWeapon\" parameters=\"object\"><![CDATA[\r\n    if (player.right_hand = null) {\r\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in your right hand.\")\r\n    }\r\n    else if (player.right_hand <> null) {\r\n      if (HasAttribute(player.right_hand, \"is_torch\")) {\r\n        player.right_hand.lightsource = False\r\n      }\r\n      msg (\"You put away your \" + GetDisplayAlias(player.right_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in your right hand.\")\r\n      list remove (player.right_hand.inventoryverbs, \"Unequip\")\r\n      list add (player.right_hand.inventoryverbs, \"Equip\")\r\n      player.right_hand.listalias = player.right_hand.originalalias\r\n    }\r\n    player.both_hands = null\r\n    player.right_hand = object\r\n    list add (player.equipped, object.listalias)\r\n    list add (object.inventoryverbs, \"Unequip\")\r\n    list remove (object.inventoryverbs, \"Equip\")\r\n  ]]></function>\r\n  <function name=\"ClearTurn\">\r\n    ClearScreen\r\n    ShowRoomDescription\r\n  </function>\r\n  <function name=\"EquipTwoHandedWeapon\" parameters=\"object\"><![CDATA[\r\n    if (player.right_hand = null) {\r\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in both hands.\")\r\n    }\r\n    else if (player.right_hand <> null and player.right_hand = player.left_hand) {\r\n      msg (\"You put away your \" + GetDisplayAlias(player.right_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in both hand.\")\r\n      list remove (player.right_hand.inventoryverbs, \"Unequip\")\r\n      list add (player.right_hand.inventoryverbs, \"Equip\")\r\n      player.right_hand.listalias = player.right_hand.orignalalias\r\n      player.right_hand.equipped = False\r\n    }\r\n    player.both_hands = object\r\n    player.right_hand = object\r\n    player.left_hand = object\r\n    object.equipped = True\r\n    list add (player.equipped, object.listalias)\r\n    list add (object.inventoryverbs, \"Unequip\")\r\n    list remove (object.inventoryverbs, \"Equip\")\r\n  ]]></function>\r\n  <function name=\"LightAndUseTorch\">\r\n  </function>\r\n  <function name=\"EquipOneHandedShield\" parameters=\"object\"><![CDATA[\r\n    if (player.left_hand = null and player.both_hands = null) {\r\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\r\n    }\r\n    else if (player.left_hand <> null and player.both_hands = null) {\r\n      msg (\"You put away your \" + GetDisplayAlias(player.left_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\r\n      list remove (player.left_hand.inventoryverbs, \"Unequip\")\r\n      list add (player.left_hand.inventoryverbs, \"Equip\")\r\n      player.left_hand.listalias = player.left_hand.originalalias\r\n      player.left_hand.equipped = False\r\n      // /needs torch worked in///\r\n    }\r\n    else if (player.both_hands <> null) {\r\n      msg (\"You put away your \" + GetDisplayAlias(player.both_hands) + \" and equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\r\n      list remove (player.both_hands.inventoryverbs, \"Unequip\")\r\n      list add (player.both_hands.inventoryverbs, \"Equip\")\r\n      player.both_hands.listalias = player.both_hands.originalalias\r\n      player.both_hands.equipped = False\r\n    }\r\n    object.equipped = True\r\n    player.both_hands = null\r\n    player.left_hand = object\r\n    list add (player.equipped, object.listalias)\r\n    list add (object.inventoryverbs, \"Unequip\")\r\n    list remove (object.inventoryverbs, \"Equip\")\r\n  ]]></function>\r\n</asl>\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a short equipping system and have reached a snag in the show menu script. I am attempting to give the player a choice of which hand a torch will go if both hands are holding something. I don't know what the result is to put in a condition for the result because of the way I patched the code together. No errors, just a blank response.</p>\n<p>Not sure if I am using \"StartsWith\" correctly.<br>\nI used <code>player.equipped = StringListSort (player.equipped)</code> because I can then know the order of the list and pull them by position, knowing shield was before sword or short sword because they were in alphabetical order but could not get a working response using <code>if (result = StringListItem (player.equipped, 0)</code>.<br>\nI have tried to get the value of result using <code>msg(result)</code> but where ever I put it in the script it will not print.</p>\n<p>Can anyone see what I need to do?</p>\n<p>This is the \"light\" verb for the torch.</p>\n<pre><code>if (Got(object)) {\n  if (player.left_hand &lt;&gt; null and player.right_hand &lt;&gt; null and player.both_hands = null) {\n    player.equipped = StringListSort (player.equipped)\n    options = player.equipped\n    game.temp = object\n    ShowMenu (\"Which will you unequip?\", options, true) {\n      object = game.temp\n      get input {\n        if (result = StartsWith(\"Shield\")) {\n          ClearTurn\n          msg (\"You shoulder your shield and use your flint and steel to light your torch, holding it out in front of you.\")\n          player.left_hand.listalias = player.left_hand.originalalias\n          player.left_hand.equipped = False\n          player.left_hand = this\n        }\n        else if (result = StartsWith(result, \"Sword\")) {\n          ClearTurn\n          ShowRoomDescription\n          msg (\"You sheath your weapon and use your flint and steel to light your torch, holding it out in front of you.\")\n          player.onehanded.listalias = player.onehanded.originalalias\n          player.onehanded.equipped = False\n          player.onehanded = this\n        }\n      }\n      on ready {\n        list add (object.inventoryverbs, \"Snuff\")\n        list remove (object.inventoryverbs, \"Light\")\n        object.listalias = object.listalias + \" (lit)\"\n        object.burned = True\n        object.lightsource = True\n        EnableTurnScript (torchturnscript)\n      }\n    }\n  }\n}\n</code></pre>\n<details><summary>Click for whole system code.</summary>\n<pre><code>&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;dynamictemplate name=\"DefaultSpeakTo\"&gt;You get no response.&lt;/dynamictemplate&gt;\n  &lt;game name=\"Equipping System 5-13-20\"&gt;\n    &lt;gameid&gt;ac896f77-268d-4e18-912b-bf01791b129e&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2020&lt;/firstpublished&gt;\n    &lt;feature_lightdark /&gt;\n    &lt;feature_limitinventory /&gt;\n    &lt;feature_annotations /&gt;\n    &lt;feature_advancedwearables /&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;feature_devmode /&gt;\n    &lt;allowlookdirections /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;attr name=\"empty_hands\"&gt;fists&lt;/attr&gt;\n      &lt;attr name=\"both_hand_item\"&gt;fists&lt;/attr&gt;\n      &lt;attr name=\"left_hand_item\"&gt;fist&lt;/attr&gt;\n      &lt;attr name=\"right_hand_item\"&gt;fist&lt;/attr&gt;\n      &lt;equipped type=\"stringlist\" /&gt;\n      &lt;object name=\"short_sword\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;one_handed_weapon /&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;attr name=\"can_equip_left\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_weapon\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;one_handed_item /&gt;\n        &lt;attr name=\"one_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_item\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;displayverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Look at&lt;/value&gt;\n          &lt;value&gt;Take&lt;/value&gt;\n        &lt;/displayverbs&gt;\n        &lt;inventoryverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Look at&lt;/value&gt;\n          &lt;value&gt;Drop&lt;/value&gt;\n          &lt;value&gt;Equip&lt;/value&gt;\n        &lt;/inventoryverbs&gt;\n        &lt;attr name=\"is_weapon\" type=\"string\"&gt;&lt;/attr&gt;\n        &lt;alias&gt;short sword&lt;/alias&gt;\n        &lt;originalalias type=\"string\"&gt;&lt;/originalalias&gt;\n        &lt;listalias&gt;Short Sword&lt;/listalias&gt;\n        &lt;category type=\"script\"&gt;\n          ClearTurn\n          EquipOneHandedWeapon (this)\n        &lt;/category&gt;\n      &lt;/object&gt;\n      &lt;object name=\"long_sword\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;two_handed_weapon /&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;attr name=\"one_handed_weapon\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"one_handed_item\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"one_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;two_handed_item /&gt;\n        &lt;alias&gt;long sword&lt;/alias&gt;\n        &lt;listalias&gt;Long Sword&lt;/listalias&gt;\n        &lt;originalalias&gt;Long Sword&lt;/originalalias&gt;\n        &lt;inventoryverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Look at&lt;/value&gt;\n          &lt;value&gt;Drop&lt;/value&gt;\n          &lt;value&gt;Equip&lt;/value&gt;\n        &lt;/inventoryverbs&gt;\n        &lt;attr name=\"is_weapon\" type=\"string\"&gt;&lt;/attr&gt;\n        &lt;category type=\"script\"&gt;\n          ClearTurn\n          EquipTwoHandedWeapon (this)\n        &lt;/category&gt;\n      &lt;/object&gt;\n      &lt;object name=\"torch\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;one_handed_item /&gt;\n        &lt;one_handed_weapon /&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;attr name=\"one_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_item\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_weapon\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"is_torch\" type=\"string\"&gt;&lt;/attr&gt;\n        &lt;alias&gt;torch&lt;/alias&gt;\n        &lt;listalias&gt;Torch&lt;/listalias&gt;\n        &lt;originalalias&gt;Torch&lt;/originalalias&gt;\n        &lt;inventoryverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Look at&lt;/value&gt;\n          &lt;value&gt;Drop&lt;/value&gt;\n          &lt;value&gt;Light&lt;/value&gt;\n        &lt;/inventoryverbs&gt;\n        &lt;attr name=\"feature_switchable\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;feature_lightdark /&gt;\n        &lt;lightsource type=\"boolean\"&gt;false&lt;/lightsource&gt;\n        &lt;lightstrength&gt;strong&lt;/lightstrength&gt;\n        &lt;volume type=\"int\"&gt;1&lt;/volume&gt;\n        &lt;life type=\"int\"&gt;50&lt;/life&gt;\n        &lt;price type=\"int\"&gt;1&lt;/price&gt;\n        &lt;category type=\"script\"&gt;\n          ClearTurn\n          LightAndUseTorch (this)\n        &lt;/category&gt;\n      &lt;/object&gt;\n      &lt;object name=\"shield\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;one_handed_weapon /&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;attr name=\"two_handed_weapon\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;one_handed_defense /&gt;\n        &lt;one_handed_item /&gt;\n        &lt;attr name=\"two_handed_item\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;attr name=\"two_handed_defense\" type=\"boolean\"&gt;false&lt;/attr&gt;\n        &lt;inventoryverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Look at&lt;/value&gt;\n          &lt;value&gt;Drop&lt;/value&gt;\n          &lt;value&gt;Equip&lt;/value&gt;\n        &lt;/inventoryverbs&gt;\n        &lt;attr name=\"is_shield\" type=\"string\"&gt;&lt;/attr&gt;\n        &lt;listalias&gt;Shield&lt;/listalias&gt;\n        &lt;originalalias&gt;Shield&lt;/originalalias&gt;\n        &lt;category type=\"script\"&gt;\n          ClearTurn\n          EquipOneHandedShield (this)\n        &lt;/category&gt;\n        &lt;lightsource type=\"boolean\"&gt;false&lt;/lightsource&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"equip\"&gt;\n    &lt;pattern&gt;equip #object#&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      ClearTurn\n      if (not (HasAttribute(object, \"equipped\"))) {\n        msg (\"That is not something you can equip.\")\n      }\n      else if (object.equipped = True) {\n        msg (\"That is already equipped.\")\n      }\n      else if (HasAttribute(object, \"is_weapon\")) {\n        object.listalias = object.listalias + \"&lt;small&gt; (equipped)&lt;/small&gt;\"\n        object.equipped = True\n        do (object, \"category\")\n      }\n      else if (HasAttribute(object, \"is_torch\")) {\n        object.listalias = object.listalias + \"&lt;small&gt; (lit)&lt;/small&gt;\"\n        object.equipped = True\n        do (object, \"category\")\n      }\n      else if (HasAttribute(object, \"is_shield\")) {\n        object.listalias = object.listalias + \"&lt;small&gt; (equipped)&lt;/small&gt;\"\n        object.equipped = True\n        do (object, \"category\")\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"light\"&gt;\n    &lt;pattern&gt;light #object#; burn #object#&lt;/pattern&gt;\n    &lt;unresolved type=\"string\"&gt;&lt;/unresolved&gt;\n    &lt;script&gt;&lt;![CDATA[\n      if (object.lightsource = True) {\n        msg (\"It is already lit.\")\n      }\n      if (Got(object)) {\n        if (player.left_hand &lt;&gt; null and player.right_hand &lt;&gt; null and player.both_hands = null) {\n          player.equipped = StringListSort (player.equipped)\n          options = player.equipped\n          game.temp = object\n          ShowMenu (\"Which will you unequip?\", options, true) {\n            object = game.temp\n            get input {\n              msg (result)\n              if (result = StartsWith(\"Shield\")) {\n                ClearTurn\n                msg (\"You shoulder your shield and use your flint and steel to light your torch, holding it out in front of you.\")\n                player.left_hand.listalias = player.left_hand.originalalias\n                player.left_hand.equipped = False\n                player.left_hand = this\n              }\n              else if (result = StartsWith(result, \"Sword\")) {\n                ClearTurn\n                ShowRoomDescription\n                msg (\"You sheath your weapon and use your flint and steel to light your torch, holding it out in front of you.\")\n                player.onehanded.listalias = player.onehanded.originalalias\n                player.onehanded.equipped = False\n                player.onehanded = this\n              }\n              else {\n                msg (result)\n              }\n            }\n            on ready {\n              msg (result)\n              list add (object.inventoryverbs, \"Snuff\")\n              list remove (object.inventoryverbs, \"Light\")\n              object.listalias = object.listalias + \" (lit)\"\n              object.burned = True\n              object.lightsource = True\n              EnableTurnScript (torchturnscript)\n            }\n          }\n        }\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;turnscript name=\"torchturnscript\"&gt;\n    &lt;script&gt;\n      torch.life = torch.life - 1\n      if (torch.life = 10) {\n        torch.listalias = torch.alias + \" (dimming)\"\n        if (torch.parent = player.parent) {\n          msg (\"{color:Red:Your torch is getting dimmer!}\")\n        }\n      }\n      if (torch.life = 5) {\n        torch.listalias = torch.alias + \" (dim)\"\n        if (torch.parent = player.parent or torch.parent = player) {\n          msg (\"{color:Red:The torch is about to burn out and the room is growing darker.}\")\n        }\n      }\n      if (torch.life = 0) {\n        torch.listalias = torch.alias + \" (burned out)\"\n        torch.lightsource = false\n        torch.price = 0\n        list remove (torch.inventoryverbs, \"snuff\")\n        torch.lightsource = false\n        DisableTurnScript (torchturnscript)\n        torch.cannotswitchon = \"You cannot light the torch, it has burned up.\"\n        if (torch.parent = player.parent or torch.parent = player) {\n          msg (\"Your torch flickers and dies.\")\n        }\n        if (room.dark = true) {\n          msg (It is too dark to see!)\n        }\n      }\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;function name=\"EquipOneHandedWeapon\" parameters=\"object\"&gt;&lt;![CDATA[\n    if (player.right_hand = null) {\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in your right hand.\")\n    }\n    else if (player.right_hand &lt;&gt; null) {\n      if (HasAttribute(player.right_hand, \"is_torch\")) {\n        player.right_hand.lightsource = False\n      }\n      msg (\"You put away your \" + GetDisplayAlias(player.right_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in your right hand.\")\n      list remove (player.right_hand.inventoryverbs, \"Unequip\")\n      list add (player.right_hand.inventoryverbs, \"Equip\")\n      player.right_hand.listalias = player.right_hand.originalalias\n    }\n    player.both_hands = null\n    player.right_hand = object\n    list add (player.equipped, object.listalias)\n    list add (object.inventoryverbs, \"Unequip\")\n    list remove (object.inventoryverbs, \"Equip\")\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"ClearTurn\"&gt;\n    ClearScreen\n    ShowRoomDescription\n  &lt;/function&gt;\n  &lt;function name=\"EquipTwoHandedWeapon\" parameters=\"object\"&gt;&lt;![CDATA[\n    if (player.right_hand = null) {\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in both hands.\")\n    }\n    else if (player.right_hand &lt;&gt; null and player.right_hand = player.left_hand) {\n      msg (\"You put away your \" + GetDisplayAlias(player.right_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in both hand.\")\n      list remove (player.right_hand.inventoryverbs, \"Unequip\")\n      list add (player.right_hand.inventoryverbs, \"Equip\")\n      player.right_hand.listalias = player.right_hand.orignalalias\n      player.right_hand.equipped = False\n    }\n    player.both_hands = object\n    player.right_hand = object\n    player.left_hand = object\n    object.equipped = True\n    list add (player.equipped, object.listalias)\n    list add (object.inventoryverbs, \"Unequip\")\n    list remove (object.inventoryverbs, \"Equip\")\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"LightAndUseTorch\"&gt;\n  &lt;/function&gt;\n  &lt;function name=\"EquipOneHandedShield\" parameters=\"object\"&gt;&lt;![CDATA[\n    if (player.left_hand = null and player.both_hands = null) {\n      msg (\"You equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\n    }\n    else if (player.left_hand &lt;&gt; null and player.both_hands = null) {\n      msg (\"You put away your \" + GetDisplayAlias(player.left_hand) + \" and equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\n      list remove (player.left_hand.inventoryverbs, \"Unequip\")\n      list add (player.left_hand.inventoryverbs, \"Equip\")\n      player.left_hand.listalias = player.left_hand.originalalias\n      player.left_hand.equipped = False\n      // /needs torch worked in///\n    }\n    else if (player.both_hands &lt;&gt; null) {\n      msg (\"You put away your \" + GetDisplayAlias(player.both_hands) + \" and equip your \" + GetDisplayAlias(object) + \" in your left hand.\")\n      list remove (player.both_hands.inventoryverbs, \"Unequip\")\n      list add (player.both_hands.inventoryverbs, \"Equip\")\n      player.both_hands.listalias = player.both_hands.originalalias\n      player.both_hands.equipped = False\n    }\n    object.equipped = True\n    player.both_hands = null\n    player.left_hand = object\n    list add (player.equipped, object.listalias)\n    list add (object.inventoryverbs, \"Unequip\")\n    list remove (object.inventoryverbs, \"Equip\")\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2020-05-17T18:30:16.5692512Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "73f6da35-91ac-401c-9c5d-7c789454b15c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You're running `ShowMenu`,  getting a result in `result`, and then running `get input`, which also puts its result in `result`.\r\n\r\nIf the player types something that starts with neither `Sword` nor `Shield`, they'll be able to light a torch without using either hand.\r\n\r\n`if (result = StartsWith (\"sword\"))` should be `if (StartsWith (result, \"Sword\"))`.\r\n\r\nYou seem to be using a whole bunch of different variables, making the situation more complex than it needs to be. You initially check `left_hand` and `right_hand`, which makes sense. But then you're also checking `both_hands`, and I can't see any reason for that. And later on, you have `player.onehanded`, which I would expect to be `right_hand`.",
      "EditableFormat": "markdown",
      "HTML": "<p>You're running <code>ShowMenu</code>,  getting a result in <code>result</code>, and then running <code>get input</code>, which also puts its result in <code>result</code>.</p>\n<p>If the player types something that starts with neither <code>Sword</code> nor <code>Shield</code>, they'll be able to light a torch without using either hand.</p>\n<p><code>if (result = StartsWith (\"sword\"))</code> should be <code>if (StartsWith (result, \"Sword\"))</code>.</p>\n<p>You seem to be using a whole bunch of different variables, making the situation more complex than it needs to be. You initially check <code>left_hand</code> and <code>right_hand</code>, which makes sense. But then you're also checking <code>both_hands</code>, and I can't see any reason for that. And later on, you have <code>player.onehanded</code>, which I would expect to be <code>right_hand</code>.</p>\n\n",
      "PostDate": "2020-05-17T19:45:17.338398Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0f4ee7e3-b042-4b18-9527-5ee644cbf436",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Right about the ```player.onehanded deal```. I copied an old script and was testing the shield part. hadn't changed the sword part yet.\r\nThe bothhands is for two handed items. I made extra attributes and some I will use and others delete. The both hands is getting deleted as I check that left and right are different or same to determine the two  handed weapon.\r\nWill check the fix later as I need some shut eye. Thank mrangel.",
      "EditableFormat": "markdown",
      "HTML": "<p>Right about the <code>player.onehanded deal</code>. I copied an old script and was testing the shield part. hadn't changed the sword part yet.<br>\nThe bothhands is for two handed items. I made extra attributes and some I will use and others delete. The both hands is getting deleted as I check that left and right are different or same to determine the two  handed weapon.<br>\nWill check the fix later as I need some shut eye. Thank mrangel.</p>\n\n",
      "PostDate": "2020-05-17T21:49:44.2317149Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f820752-113d-46f6-bc4c-ce9888591463",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think I would have the light command looking something more like:\r\n```\r\nif (not GetBoolean (object, \"is_torch\")) {\r\n  msg (CapFirst (Conjugate (object, \"be\")) + \"n't a torch.\")\r\n}\r\nelse if (GetBoolean (object, \"lightsource\")) {\r\n  msg (\"It is already lit.\")\r\n}\r\nelse if (not Got (object)) {\r\n  msg (\"You haven't got it.\")\r\n}\r\nelse {\r\n  if (GetBoolean (object, \"equipped\")) {\r\n    object.lightsource = true\r\n  }\r\n  else if (player.left_hand = null or player.right_hand = player.left_hand) {\r\n    player.left_hand = object\r\n  }\r\n  else if (player.right_hand = null) {\r\n    player.right_hand = object\r\n  }\r\n  else {\r\n    msg (\"Your hands are full.\")\r\n    options = NewStringDictionary()\r\n    dictionary add (options, \"left_hand\", GetDisplayAlias (player.left_hand))\r\n    dictionary add (options, \"right_hand\", GetDisplayAlias (player.right_hand))\r\n    this.object = object\r\n    ShowMenu (\"Which object would you like to unequip?\", options, true) {\r\n      set (player, result, light.object)\r\n      light.object.lightsource = light.object.equipped\r\n    }\r\n  }\r\n  object.lightsource = object.equipped\r\n}\r\n```\r\n\r\n(That's assuming that `player.changedleft_hand` and `player.changedright_hand` will set the `equipped` flag on the object that's placed in them, as I believe you mentioned in a previous thread; and that the torch's `changedlightsource` script can handle changing its inventoryverbs and alias)\r\n\r\nMy brain's not in the right gear right now; but breaking the code down like this seems simpler to me. Although as your \"equip\" command automatically lights an equipped torch, it might be easier to just have an \"equip\" function, and have the torch's `changedequipped` script light it.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think I would have the light command looking something more like:</p>\n<pre><code>if (not GetBoolean (object, \"is_torch\")) {\n  msg (CapFirst (Conjugate (object, \"be\")) + \"n't a torch.\")\n}\nelse if (GetBoolean (object, \"lightsource\")) {\n  msg (\"It is already lit.\")\n}\nelse if (not Got (object)) {\n  msg (\"You haven't got it.\")\n}\nelse {\n  if (GetBoolean (object, \"equipped\")) {\n    object.lightsource = true\n  }\n  else if (player.left_hand = null or player.right_hand = player.left_hand) {\n    player.left_hand = object\n  }\n  else if (player.right_hand = null) {\n    player.right_hand = object\n  }\n  else {\n    msg (\"Your hands are full.\")\n    options = NewStringDictionary()\n    dictionary add (options, \"left_hand\", GetDisplayAlias (player.left_hand))\n    dictionary add (options, \"right_hand\", GetDisplayAlias (player.right_hand))\n    this.object = object\n    ShowMenu (\"Which object would you like to unequip?\", options, true) {\n      set (player, result, light.object)\n      light.object.lightsource = light.object.equipped\n    }\n  }\n  object.lightsource = object.equipped\n}\n</code></pre>\n<p>(That's assuming that <code>player.changedleft_hand</code> and <code>player.changedright_hand</code> will set the <code>equipped</code> flag on the object that's placed in them, as I believe you mentioned in a previous thread; and that the torch's <code>changedlightsource</code> script can handle changing its inventoryverbs and alias)</p>\n<p>My brain's not in the right gear right now; but breaking the code down like this seems simpler to me. Although as your \"equip\" command automatically lights an equipped torch, it might be easier to just have an \"equip\" function, and have the torch's <code>changedequipped</code> script light it.</p>\n\n",
      "PostDate": "2020-05-17T22:45:47.6085255Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d2abcb3b-dfa9-4f51-bc3d-9dba765ee34d",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">This is the \"light\" verb for the torch.\r\n\r\nThat should be \"command\" not a verb.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This is the \"light\" verb for the torch.</p>\n</blockquote>\n<p>That should be \"command\" not a verb.</p>\n\n",
      "PostDate": "2020-05-18T02:50:24.2883622Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a17293f9-8e42-44eb-8473-a6fda661cdd1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "At the core, I think here you have a system where you have two equipment slots `right_hand` and `left_hand`. A short sword goes in the right; a shield in the left; longsword in both; and the torch in either. It sounds like that should be a fairly simple system‚Ä¶ but then I end up thinking about a couple of edge cases that might confuse players. For example, it seems awkward to ask the player which hand to hold a torch in when they don't have anything equipped; it should just pick it up in one hand by default. But if the player lights a torch and then equips a one-hand item, it should presumably move the torch to the other hand rather than dropping it.\r\n\r\nNow the programming bit of my brain is intrigued by the idea of a \"simple\" system (made up of quite a large number of simple changescripts and functions) that will behave intuitively (from the player's point of view) in all cases. Not sure if it would wind up with more or less code than the monolithic equip functions; but I'd hope it would be more extensible.\r\n\r\nAnd I really need to stick to the question you asked; because I have a lot of writing to do, and my book sales are starting to slump again.\r\n\r\n<hr/>\r\n\r\nI notice that you use a flag `is_torch` to check if an object is a torch; but your turnscript assumes that only one torch will ever exist.\r\n\r\nIt might be easier to do something like:\r\n```\r\n<turnscript name=\"objects\">\r\n  <script>\r\n    foreach (object, AllObjects()) {\r\n      if (HasScript (object, \"everyturn\")) {\r\n        do (object, \"everyturn\")\r\n      }\r\n    }\r\n  </script>\r\n</turnscript>\r\n```\r\nthen you could give the torch an attribute:\r\n```\r\n<attr name=\"everyturn\" type=\"script\">\r\n  if (this.lightsource) {\r\n    this.life = this.life - 1\r\n    switch (this.life) {\r\n      case (10) {\r\n        // code\r\n      }\r\n      case (5) {\r\n        // code\r\n      }\r\n      case (0) {\r\n        // code\r\n      }\r\n    }\r\n  }\r\n</attr>\r\n```\r\nSo you don't need a separate turnscript for every torch; and this way, you could use the same turnscript for any other object that has a lifespan or that does something every turn.\r\n\r\n(Also, I'd note that in the script for the torch going out, you have `if (room.dark = true)` - this could lead to issues. You should probably have `if (CheckDarkness())` instead, so that it doesn't say \"It is too dark to see\" if the torch goes out in a room containing another light source)",
      "EditableFormat": "markdown",
      "HTML": "<p>At the core, I think here you have a system where you have two equipment slots <code>right_hand</code> and <code>left_hand</code>. A short sword goes in the right; a shield in the left; longsword in both; and the torch in either. It sounds like that should be a fairly simple system‚Ä¶ but then I end up thinking about a couple of edge cases that might confuse players. For example, it seems awkward to ask the player which hand to hold a torch in when they don't have anything equipped; it should just pick it up in one hand by default. But if the player lights a torch and then equips a one-hand item, it should presumably move the torch to the other hand rather than dropping it.</p>\n<p>Now the programming bit of my brain is intrigued by the idea of a \"simple\" system (made up of quite a large number of simple changescripts and functions) that will behave intuitively (from the player's point of view) in all cases. Not sure if it would wind up with more or less code than the monolithic equip functions; but I'd hope it would be more extensible.</p>\n<p>And I really need to stick to the question you asked; because I have a lot of writing to do, and my book sales are starting to slump again.</p>\n<hr>\n<p>I notice that you use a flag <code>is_torch</code> to check if an object is a torch; but your turnscript assumes that only one torch will ever exist.</p>\n<p>It might be easier to do something like:</p>\n<pre><code>&lt;turnscript name=\"objects\"&gt;\n  &lt;script&gt;\n    foreach (object, AllObjects()) {\n      if (HasScript (object, \"everyturn\")) {\n        do (object, \"everyturn\")\n      }\n    }\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n</code></pre>\n<p>then you could give the torch an attribute:</p>\n<pre><code>&lt;attr name=\"everyturn\" type=\"script\"&gt;\n  if (this.lightsource) {\n    this.life = this.life - 1\n    switch (this.life) {\n      case (10) {\n        // code\n      }\n      case (5) {\n        // code\n      }\n      case (0) {\n        // code\n      }\n    }\n  }\n&lt;/attr&gt;\n</code></pre>\n<p>So you don't need a separate turnscript for every torch; and this way, you could use the same turnscript for any other object that has a lifespan or that does something every turn.</p>\n<p>(Also, I'd note that in the script for the torch going out, you have <code>if (room.dark = true)</code> - this could lead to issues. You should probably have <code>if (CheckDarkness())</code> instead, so that it doesn't say \"It is too dark to see\" if the torch goes out in a room containing another light source)</p>\n\n",
      "PostDate": "2020-05-18T11:28:36.2751986Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c0b0e82-263a-46c8-8312-dcf76532a501",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Originally, the first line of the \"light \" script equipped the torch if hands were null. I only posted the portion of the script that pertained to the issue I was having.\r\n\r\nI like that turnscript. I also like using small scripts with more attributes containing fewer actions as this may allow for a crossover of other uses as you demonstrated. \r\n\r\nRemember that the game script I posted here was a test game just for lighting a torch. The full game has many more related scripts, attributes, and commands, some relating still to torches. I am also allowing the player to use the torch as a weapon and when they make a hit it will drastically reduce the number of turns the torch has left to burn.  I am working feverishly to integrate these new scripts you offer with mine and make as many improvements to mine using your advice and script parts.  \r\n\r\nI do like it when you go beyond any issues I am asking about and you cover other problems in the script or things further down the road that may cause conflict. I don't see things coming as you do.\r\n\r\nI noticed you had not posted a video lately and was wondering what was happening. I'm guessing this forum is your drug of choice. And you are mostly single-handedly answering questions. \r\n \r\nWriting demands focus but it is necessary to use some moderate procrastination to give the conscious brain a break and allow the subconscious a chance to behave creatively and offer eureka moments to issues and add to the creative process. After all, that is where the true power of the mind lies. \r\n\r\nHa, I have been watching clinical psychologist Jordan B. Peterson on YouTube this week...",
      "EditableFormat": "markdown",
      "HTML": "<p>Originally, the first line of the \"light \" script equipped the torch if hands were null. I only posted the portion of the script that pertained to the issue I was having.</p>\n<p>I like that turnscript. I also like using small scripts with more attributes containing fewer actions as this may allow for a crossover of other uses as you demonstrated.</p>\n<p>Remember that the game script I posted here was a test game just for lighting a torch. The full game has many more related scripts, attributes, and commands, some relating still to torches. I am also allowing the player to use the torch as a weapon and when they make a hit it will drastically reduce the number of turns the torch has left to burn.  I am working feverishly to integrate these new scripts you offer with mine and make as many improvements to mine using your advice and script parts.</p>\n<p>I do like it when you go beyond any issues I am asking about and you cover other problems in the script or things further down the road that may cause conflict. I don't see things coming as you do.</p>\n<p>I noticed you had not posted a video lately and was wondering what was happening. I'm guessing this forum is your drug of choice. And you are mostly single-handedly answering questions.</p>\n<p>Writing demands focus but it is necessary to use some moderate procrastination to give the conscious brain a break and allow the subconscious a chance to behave creatively and offer eureka moments to issues and add to the creative process. After all, that is where the true power of the mind lies.</p>\n<p>Ha, I have been watching clinical psychologist Jordan B. Peterson on YouTube this week...</p>\n\n",
      "PostDate": "2020-05-19T00:09:35.0003616Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e7a05059-b1a2-4402-9ee1-7b5ff526e9a2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've got 3 more videos that need editing‚Ä¶ keep putting it off. I'm keeping up with a little of the writing, but might not be enough to keep my patreon supporters satisfied; so keep trying to focus on that. Going back to coding is often a sign I'm struggling with anxiety, which seems to kill my creativity so I try to hide by working on something I can still do instead.\r\n\r\nWill hopefully be back to productivity some time in the near future.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've got 3 more videos that need editing‚Ä¶ keep putting it off. I'm keeping up with a little of the writing, but might not be enough to keep my patreon supporters satisfied; so keep trying to focus on that. Going back to coding is often a sign I'm struggling with anxiety, which seems to kill my creativity so I try to hide by working on something I can still do instead.</p>\n<p>Will hopefully be back to productivity some time in the near future.</p>\n\n",
      "PostDate": "2020-05-19T00:24:31.7186177Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3395207f-3552-4606-a1be-b1223da9bdb5",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Could you explain this \r\n```\r\n set (player, result, light.object)\r\n light.object.lightsource = light.object.equipped\r\n``` \r\n\r\nNever seen anything like it before. Is this using the command \"light\" as a reference? \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Could you explain this</p>\n<pre><code> set (player, result, light.object)\n light.object.lightsource = light.object.equipped\n</code></pre>\n<p>Never seen anything like it before. Is this using the command \"light\" as a reference?</p>\n\n",
      "PostDate": "2020-05-19T12:05:03.594345Z",
      "LastEditDate": "2020-05-19T14:02:51.8002158Z",
      "link": null
    },
    {
      "PostId": "02899f8d-66a4-4b1d-be3f-45ffddbf928a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Never seen anything like it before. Is this using the command \"light\" as a reference?\r\n\r\nYes; commands have attributes just like any other object. The only attributes they have by default are `script`, `scope`, `pattern`, `name`, and `parent`, but there's nothing to stop you sticking more attributes on there.\r\n\r\nI tend to use the command, rather than the game object, to store temporary variables for menus and similar; because it makes it harder for the variables from two scripts to get confused. It matches up with the `this.object = object` immediately before the call to ShowMenu.\r\n\r\n(note: within a command script, `this` refers to the command)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Never seen anything like it before. Is this using the command \"light\" as a reference?</p>\n</blockquote>\n<p>Yes; commands have attributes just like any other object. The only attributes they have by default are <code>script</code>, <code>scope</code>, <code>pattern</code>, <code>name</code>, and <code>parent</code>, but there's nothing to stop you sticking more attributes on there.</p>\n<p>I tend to use the command, rather than the game object, to store temporary variables for menus and similar; because it makes it harder for the variables from two scripts to get confused. It matches up with the <code>this.object = object</code> immediately before the call to ShowMenu.</p>\n<p>(note: within a command script, <code>this</code> refers to the command)</p>\n\n",
      "PostDate": "2020-05-19T18:09:38.0918041Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2ed67c02-c7f7-49e6-b646-5181e0fa0ba3",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">(Also, I'd note that in the script for the torch going out, you have if (room.dark = true) - this could lead to issues. You should probably have if (CheckDarkness()) instead so that it doesn't say \"It is too dark to see\" if the torch goes out in a room containing another light source)\r\n\r\nI really don't need anything here because the room will go dark automatically if the torch goes out if there are no other torches in the room, and will announce the room is dark or show dark room description I've set. As long as I have other torches in the room set up as light sources, the room will stay lit. Right?\r\n\r\nIf I use```ShowRoomDescription``` in a dark room, will it show the dark room description or the lit room?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(Also, I'd note that in the script for the torch going out, you have if (room.dark = true) - this could lead to issues. You should probably have if (CheckDarkness()) instead so that it doesn't say \"It is too dark to see\" if the torch goes out in a room containing another light source)</p>\n</blockquote>\n<p>I really don't need anything here because the room will go dark automatically if the torch goes out if there are no other torches in the room, and will announce the room is dark or show dark room description I've set. As long as I have other torches in the room set up as light sources, the room will stay lit. Right?</p>\n<p>If I use<code>ShowRoomDescription</code> in a dark room, will it show the dark room description or the lit room?</p>\n\n",
      "PostDate": "2020-05-20T10:51:53.9769283Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9875ea7b-578b-45fd-9f1b-35e11b201a09",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I really don't need anything here because the room will go dark automatically if the torch goes out if there are no other torches in the room, and will announce the room is dark or show dark room description I've set. As long as I have other torches in the room set up as light sources, the room will stay lit. Right?\r\n\r\n`room.dark` only specifies whether the room would be dark in the absence of other light sources. With your code as written, if the torch goes out the \"It is too dark to see\" message will appear regardless of other light sources.\r\n\r\n> If I use `ShowRoomDescription` in a dark room, will it show the dark room description or the lit room?\r\n\r\n`ShowRoomDescription` uses `CheckDarkness` to determine which description to show; so checks both the room's `dark` flag and the presence of light sources.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I really don't need anything here because the room will go dark automatically if the torch goes out if there are no other torches in the room, and will announce the room is dark or show dark room description I've set. As long as I have other torches in the room set up as light sources, the room will stay lit. Right?</p>\n</blockquote>\n<p><code>room.dark</code> only specifies whether the room would be dark in the absence of other light sources. With your code as written, if the torch goes out the \"It is too dark to see\" message will appear regardless of other light sources.</p>\n<blockquote>\n<p>If I use <code>ShowRoomDescription</code> in a dark room, will it show the dark room description or the lit room?</p>\n</blockquote>\n<p><code>ShowRoomDescription</code> uses <code>CheckDarkness</code> to determine which description to show; so checks both the room's <code>dark</code> flag and the presence of light sources.</p>\n\n",
      "PostDate": "2020-05-20T13:28:50.4259551Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
