{
  "Topic": {
    "TopicId": "wm_2sq74w0af2m3j7tlhng",
    "ForumId": "10",
    "Title": "Removing an <element> from a string.  (It seems to have no problem with a <script>, but <style> is being problematic.)",
    "LastUpdated": "2018-01-29T03:53:51.7043219Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f8aac3d5-be8e-4e8b-8d51-72a4827955c7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\n  <function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n    tagStart = Instr(string,\"<\"+element+\">\")\r\n    lengthOfTag = Instr(tagStart, string,\"</\"+element+\">\")\r\n    element = Mid(string,tagStart,lengthOfTag)\r\n    stripped = Replace(string,element,\"\")\r\n    return (stripped)\r\n  ]]></function>\r\n```\r\n\r\n---\r\n\r\n      one = \"<p>Hello.</p><script>addTextAndScroll('Hello from script element!');</script>\"\r\n      two = \"<style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\"\r\n      msg (one)\r\n      oneStripped = RemoveElement(\"script\",one)\r\n      msg (oneStripped)\r\n      // The style doesn't work (probably because of the {} replacements).\r\n      msg (two)\r\n      // The next line will not be what I planned\r\n      msg (RemoveElement(\"style\",two))\r\n      twoStrippedScript = RemoveElement(\"script\",two)\r\n      msg(twoStrippedScript)\r\n      // The next line will not be what I planned\r\n      msg (RemoveElement(\"style\",twoStrippedScript))\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/35492951-6b1f48ec-0475-11e8-8b9f-e0603aa9559e.png)\r\n\r\n---\r\nNOTE:  I need to set the altered string to an attribute on an in-game object without using any ```ASLEvent()```s.",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>  &lt;function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n    tagStart = Instr(string,\"&lt;\"+element+\"&gt;\")\n    lengthOfTag = Instr(tagStart, string,\"&lt;/\"+element+\"&gt;\")\n    element = Mid(string,tagStart,lengthOfTag)\n    stripped = Replace(string,element,\"\")\n    return (stripped)\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<hr>\n<pre><code>  one = \"&lt;p&gt;Hello.&lt;/p&gt;&lt;script&gt;addTextAndScroll('Hello from script element!');&lt;/script&gt;\"\n  two = \"&lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\"\n  msg (one)\n  oneStripped = RemoveElement(\"script\",one)\n  msg (oneStripped)\n  // The style doesn't work (probably because of the {} replacements).\n  msg (two)\n  // The next line will not be what I planned\n  msg (RemoveElement(\"style\",two))\n  twoStrippedScript = RemoveElement(\"script\",two)\n  msg(twoStrippedScript)\n  // The next line will not be what I planned\n  msg (RemoveElement(\"style\",twoStrippedScript))\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35492951-6b1f48ec-0475-11e8-8b9f-e0603aa9559e.png\" alt=\"image\"></p>\n<hr>\n<p>NOTE:  I need to set the altered string to an attribute on an in-game object without using any <code>ASLEvent()</code>s.</p>\n\n",
      "PostDate": "2018-01-29T03:53:51.7043219Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "35b1a97d-07c1-4633-aa82-de6f0e59f5a3",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem with stuff like this is that printing to screen messes up what you see so much. Here is an alternative version of the function:\r\n```\r\n  <function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n    elementStart = Instr(string, \"<\" + element)\r\n    if (elementStart > 0) {\r\n      elementEnd = Instr(elementStart, string,\"</\"+element+\">\") + 3 + LengthOf(element)\r\n      element = Mid(string, elementStart, elementEnd - elementStart)\r\n      stripped = Replace(string, element, \"\")\r\n      return (stripped)\r\n    }\r\n    else {\r\n      return (string)\r\n    }\r\n  ]]></function>\r\n```\r\nI tested it with:\r\n```\r\n      msg (\"---------------------------------------------------\")\r\n      one = \"<tag>Hello.</tag><other att=\\\"fjgg\\\">addTextAndScroll('Hello from script element!');</other>\"\r\n      msg (one)\r\n      msg (\"---------------------------------------------------\")\r\n      msg (RemoveElement(\"tag\",one))\r\n      msg (\"---------------------------------------------------\")\r\n      msg (RemoveElement(\"other\",one))\r\n      msg (\"---------------------------------------------------\")\r\n```\r\nChanging the tags to `script` or `style` will not change how the function works, so that should be fine. However, it may well affect what you _see_.",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem with stuff like this is that printing to screen messes up what you see so much. Here is an alternative version of the function:</p>\n<pre><code>  &lt;function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n    elementStart = Instr(string, \"&lt;\" + element)\n    if (elementStart &gt; 0) {\n      elementEnd = Instr(elementStart, string,\"&lt;/\"+element+\"&gt;\") + 3 + LengthOf(element)\n      element = Mid(string, elementStart, elementEnd - elementStart)\n      stripped = Replace(string, element, \"\")\n      return (stripped)\n    }\n    else {\n      return (string)\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p>I tested it with:</p>\n<pre><code>      msg (\"---------------------------------------------------\")\n      one = \"&lt;tag&gt;Hello.&lt;/tag&gt;&lt;other att=\\\"fjgg\\\"&gt;addTextAndScroll('Hello from script element!');&lt;/other&gt;\"\n      msg (one)\n      msg (\"---------------------------------------------------\")\n      msg (RemoveElement(\"tag\",one))\n      msg (\"---------------------------------------------------\")\n      msg (RemoveElement(\"other\",one))\n      msg (\"---------------------------------------------------\")\n</code></pre>\n<p>Changing the tags to <code>script</code> or <code>style</code> will not change how the function works, so that should be fine. However, it may well affect what you <em>see</em>.</p>\n\n",
      "PostDate": "2018-01-29T09:11:22.0342736Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5399a644-4d38-40b9-ae1b-5ecb360fdf33",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> `lengthOfTag = Instr(tagStart, string,\"</\"+element+\">\")`\r\n\r\nAs far as I can tell, this doesn't give you the length of the tag. It gives the number of characters in the string before the `</element>`.\r\n\r\n`tagEnd = Instr(tagStart, string,\"</\"+element+\">\")` - number of characters before the closing tag\r\n`lengthOfTag = tagEnd - tagStart` - length, excluding the closing tag\r\n`lengthOfTag = lengthOfTag + LengthOf(\"</\"+element+\">\")` - or just `LengthOf(element)+3`\r\n\r\nThe function as you had it would leave the ending tag if your element is at the start of the string; but capture 2 extra characters for every character before the element. So it will work correctly only if the number of characters before the element equals the length of the ending tag; or if the element is at the end of the string (as in your script example).",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><code>lengthOfTag = Instr(tagStart, string,\"&lt;/\"+element+\"&gt;\")</code></p>\n</blockquote>\n<p>As far as I can tell, this doesn't give you the length of the tag. It gives the number of characters in the string before the <code>&lt;/element&gt;</code>.</p>\n<p><code>tagEnd = Instr(tagStart, string,\"&lt;/\"+element+\"&gt;\")</code> - number of characters before the closing tag<br>\n<code>lengthOfTag = tagEnd - tagStart</code> - length, excluding the closing tag<br>\n<code>lengthOfTag = lengthOfTag + LengthOf(\"&lt;/\"+element+\"&gt;\")</code> - or just <code>LengthOf(element)+3</code></p>\n<p>The function as you had it would leave the ending tag if your element is at the start of the string; but capture 2 extra characters for every character before the element. So it will work correctly only if the number of characters before the element equals the length of the ending tag; or if the element is at the end of the string (as in your script example).</p>\n\n",
      "PostDate": "2018-01-29T10:51:21.7394079Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dd2d24fd-fb6a-4e3a-968d-1a968758b9ee",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Though if you're using this on arbitrary bits of HTML strings (rather than code you provided), remember that the opening tag may contain attributes, and the closing tag is permitted spaces; `</style  >` is valid. As is `<script />`.\r\n\r\nSo...\r\n```\r\n<function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n  startPos = Instr (string, \"<\"+element)\r\n  if (startPos = 0) {\r\n    return (string)\r\n  }\r\n  endPos = Instr (startPos, string, \">\")\r\n  if (endPos = 0) {\r\n    error (\"Element doesn't terminate\")\r\n  }\r\n  if (Mid (string, endPos-1, 1) = \"/\") {\r\n    endPos = endPos + 1\r\n  }\r\n  else {\r\n    endPos = Instr (endPos, string, \"</\"+element)\r\n    if (endPos = 0) {\r\n      error (\"No closing tag!\")\r\n    }\r\n    endPos = Instr (endPos + LengthOf(element), string, \">\")\r\n    if (endPos = 0) {\r\n      error (\"Closing tag doesn't terminate!\")\r\n    }\r\n    endPos = endPos + 1\r\n  }\r\n  return Left (string, startPos) + Right (string, LengthOf(string) - endPos\r\n</function>\r\n```\r\n(Used Left and Right rather than Mid and Replace; because string searches are slow. In this case, the difference probably isn't much, but Replace is still checking every character of the string to see if the element is there, when you already know what character number it starts at)\r\n\r\n(and yes, this will still get confused if you have an attribute that contains XML; or nested elements of the same type. But it's a little more robust)",
      "EditableFormat": "markdown",
      "HTML": "<p>Though if you're using this on arbitrary bits of HTML strings (rather than code you provided), remember that the opening tag may contain attributes, and the closing tag is permitted spaces; <code>&lt;/style &gt;</code> is valid. As is <code>&lt;script /&gt;</code>.</p>\n<p>So...</p>\n<pre><code>&lt;function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n  startPos = Instr (string, \"&lt;\"+element)\n  if (startPos = 0) {\n    return (string)\n  }\n  endPos = Instr (startPos, string, \"&gt;\")\n  if (endPos = 0) {\n    error (\"Element doesn't terminate\")\n  }\n  if (Mid (string, endPos-1, 1) = \"/\") {\n    endPos = endPos + 1\n  }\n  else {\n    endPos = Instr (endPos, string, \"&lt;/\"+element)\n    if (endPos = 0) {\n      error (\"No closing tag!\")\n    }\n    endPos = Instr (endPos + LengthOf(element), string, \"&gt;\")\n    if (endPos = 0) {\n      error (\"Closing tag doesn't terminate!\")\n    }\n    endPos = endPos + 1\n  }\n  return Left (string, startPos) + Right (string, LengthOf(string) - endPos\n&lt;/function&gt;\n</code></pre>\n<p>(Used Left and Right rather than Mid and Replace; because string searches are slow. In this case, the difference probably isn't much, but Replace is still checking every character of the string to see if the element is there, when you already know what character number it starts at)</p>\n<p>(and yes, this will still get confused if you have an attribute that contains XML; or nested elements of the same type. But it's a little more robust)</p>\n\n",
      "PostDate": "2018-01-29T11:19:13.7723174Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c20658a8-d25f-4eda-a4e0-b1f7a7ea546a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, guys!\r\n\r\nI'll test these out.\r\n\r\n---\r\nI guess I could have mentioned that I'm saving the string as plain text in the end.\r\n\r\n<details>\r\n\r\nWhen I don't remove the \\<script> elements and use ```var plainText = $(\"#whatever\").text()```, string \"one\" is this:\r\n\r\n```\r\nHello.addTextAndScroll('Hello from script element!');\r\n```\r\n\r\n...but after I strip it (using the code I posted):\r\n\r\n```\r\nHello.\r\n```\r\n\r\n---\r\nThis is how I'm testing it (with a JS.alert()):\r\n\r\n```\r\none = \"<div id='test-stuff'><p>Hello.</p><script>addTextAndScroll('Hello from script element!');</script></div>\"\r\n//two = \"<style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\"\r\nmsg (one)\r\nmsg(\"<hr/>\")\r\noneStripped = RemoveElement(\"script\",one)\r\nmsg(\"<div id='test-again'>\"+oneStripped+\"</div>\")\r\nJS.eval(\"var txtToShow = $('#test-stuff').text();alert(txtToShow);var strippedTxt = $('#test-again').text();alert(strippedTxt);\")\r\n\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/35514155-e7d98be0-04ca-11e8-941d-bf948922c451.png)\r\n![image](https://user-images.githubusercontent.com/30656341/35514006-7c355112-04ca-11e8-8180-7ecf07a0ef20.png)\r\n![image](https://user-images.githubusercontent.com/30656341/35514018-818eefd8-04ca-11e8-800e-5a7c93db23af.png)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, guys!</p>\n<p>I'll test these out.</p>\n<hr>\n<p>I guess I could have mentioned that I'm saving the string as plain text in the end.</p>\n<details>\n<p>When I don't remove the &lt;script&gt; elements and use <code>var plainText = $(\"#whatever\").text()</code>, string \"one\" is this:</p>\n<pre><code>Hello.addTextAndScroll('Hello from script element!');\n</code></pre>\n<p>...but after I strip it (using the code I posted):</p>\n<pre><code>Hello.\n</code></pre>\n<hr>\n<p>This is how I'm testing it (with a JS.alert()):</p>\n<pre><code>one = \"&lt;div id='test-stuff'&gt;&lt;p&gt;Hello.&lt;/p&gt;&lt;script&gt;addTextAndScroll('Hello from script element!');&lt;/script&gt;&lt;/div&gt;\"\n//two = \"&lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\"\nmsg (one)\nmsg(\"&lt;hr/&gt;\")\noneStripped = RemoveElement(\"script\",one)\nmsg(\"&lt;div id='test-again'&gt;\"+oneStripped+\"&lt;/div&gt;\")\nJS.eval(\"var txtToShow = $('#test-stuff').text();alert(txtToShow);var strippedTxt = $('#test-again').text();alert(strippedTxt);\")\n\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35514155-e7d98be0-04ca-11e8-941d-bf948922c451.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/30656341/35514006-7c355112-04ca-11e8-8180-7ecf07a0ef20.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/30656341/35514018-818eefd8-04ca-11e8-800e-5a7c93db23af.png\" alt=\"image\"></p>\n</details>\n\n",
      "PostDate": "2018-01-29T14:04:21.2178654Z",
      "LastEditDate": "2018-01-30T22:07:49.3665011Z",
      "link": null
    },
    {
      "PostId": "c61f6e85-7397-4408-990e-f4d04c0f29b2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're using the one I posted, might be worth noting that to remove all instances of a particular element (rather than just the first) from a string, you could change the last line to:\r\n`return (Left (string, startPos) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))`\r\n\r\n\r\nAnd yes, I know I missed out the brackets from the return statement in the last post. I've been writing Perl again the last couple of days.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're using the one I posted, might be worth noting that to remove all instances of a particular element (rather than just the first) from a string, you could change the last line to:<br>\n<code>return (Left (string, startPos) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))</code></p>\n<p>And yes, I know I missed out the brackets from the return statement in the last post. I've been writing Perl again the last couple of days.</p>\n\n",
      "PostDate": "2018-01-29T14:43:07.7974016Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9585848b-20ec-4592-96d0-4279c5240b38",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Trying to go by the character count let something slip by, no matter what I tried.\r\n\r\nI've got some regex going on now:\r\n\r\n<details>\r\n\r\n```\r\nregEx = \"(?<text><(|.+|\\\\s+)script(|.+|\\\\s+)>(|.+|\\\\s+)<(|.+|\\\\s+)/script(|\\\\s+)>)\"\r\n//\r\nplayer.this = \"Text here.<script>alert('hello');</script>\"\r\n//msg (IsRegexMatch(regEx,player.this))\r\nplayer.thisdict = NewDictionary()\r\nplayer.thisdict = Populate(regEx,player.this)\r\nplayer.thistxt = DictionaryItem(player.thisdict,\"text\")\r\nplayer.newthis = Replace(player.this,player.thistxt,\"\")\r\n//JS.alert(player.thistxt)\r\n//JS.alert(player.newthis)\r\n//\r\nplayer.that = \"<script onerror='alert('ti');>console.log('Hey you');</script ><p>I am a paragraph!</p>\"\r\n//msg (IsRegexMatch(regEx,player.that))\r\nplayer.thatdict = NewDictionary()\r\nplayer.thatdict = Populate(regEx,player.that)\r\nplayer.thattxt = DictionaryItem(player.thatdict,\"text\")\r\nplayer.newthat = Replace(player.that,player.thattxt,\"\")\r\n//JS.alert(player.thattxt)\r\n//JS.aler(player.newthat)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35539499-7a97ef8e-0517-11e8-9d5b-5563b425c7e2.png)\r\n\r\n---\r\nWhat did I overlook?\r\n\r\n(I always overlook something...)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Trying to go by the character count let something slip by, no matter what I tried.</p>\n<p>I've got some regex going on now:</p>\n<details>\n<pre><code>regEx = \"(?&lt;text&gt;&lt;(|.+|\\\\s+)script(|.+|\\\\s+)&gt;(|.+|\\\\s+)&lt;(|.+|\\\\s+)/script(|\\\\s+)&gt;)\"\n//\nplayer.this = \"Text here.&lt;script&gt;alert('hello');&lt;/script&gt;\"\n//msg (IsRegexMatch(regEx,player.this))\nplayer.thisdict = NewDictionary()\nplayer.thisdict = Populate(regEx,player.this)\nplayer.thistxt = DictionaryItem(player.thisdict,\"text\")\nplayer.newthis = Replace(player.this,player.thistxt,\"\")\n//JS.alert(player.thistxt)\n//JS.alert(player.newthis)\n//\nplayer.that = \"&lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script &gt;&lt;p&gt;I am a paragraph!&lt;/p&gt;\"\n//msg (IsRegexMatch(regEx,player.that))\nplayer.thatdict = NewDictionary()\nplayer.thatdict = Populate(regEx,player.that)\nplayer.thattxt = DictionaryItem(player.thatdict,\"text\")\nplayer.newthat = Replace(player.that,player.thattxt,\"\")\n//JS.alert(player.thattxt)\n//JS.aler(player.newthat)\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35539499-7a97ef8e-0517-11e8-9d5b-5563b425c7e2.png\" alt=\"image\"></p>\n<hr>\n<p>What did I overlook?</p>\n<p>(I always overlook something...)</p>\n</details>\n\n",
      "PostDate": "2018-01-29T23:13:05.4663853Z",
      "LastEditDate": "2018-01-30T22:07:11.0302107Z",
      "link": null
    },
    {
      "PostId": "3474a9ea-3709-4221-85b0-177216fd33e2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try it on this string: `Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);</script><p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert(\"Here's another script!\");</script>...<p>I think I missed something just now</p>`\r\n\r\n:)",
      "EditableFormat": "markdown",
      "HTML": "<p>Try it on this string: <code>Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;/script&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert(\"Here's another script!\");&lt;/script&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;</code></p>\n<p>:)</p>\n\n",
      "PostDate": "2018-01-30T02:30:07.7058849Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d18f4b02-4c70-4375-83c9-8a632003b15b",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Testing now...\r\n\r\nChanging this to single quotes:  ```alert('Here's another script!')```\r\n\r\nBe right back...",
      "EditableFormat": "markdown",
      "HTML": "<p>Testing now...</p>\n<p>Changing this to single quotes:  <code>alert('Here's another script!')</code></p>\n<p>Be right back...</p>\n\n",
      "PostDate": "2018-01-30T02:39:05.8729354Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d5376397-0f88-4285-8cef-39e70827eaf7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "![image](https://user-images.githubusercontent.com/30656341/35545434-b4688256-0534-11e8-9414-709b4b5b7b05.png)\r\n\r\nCurses!!!",
      "EditableFormat": "markdown",
      "HTML": "<p><img src=\"https://user-images.githubusercontent.com/30656341/35545434-b4688256-0534-11e8-9414-709b4b5b7b05.png\" alt=\"image\"></p>\n<p>Curses!!!</p>\n\n",
      "PostDate": "2018-01-30T02:41:16.7760741Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6e469d2b-b574-47d9-ad95-61bcb6268091",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, that's dirty!!!   (Which is what I was hoping for!)\r\n\r\n<details>\r\n\r\nI fixed it a third of the way.  (Still working.)\r\n\r\n\r\n```\r\nregEx = \"(?<text><(|\\\\s+)script(|.+|\\\\s+)>(|.+|\\\\s+)<(|.+|\\\\s+)/script(|\\\\s+)>)\"\r\ndict = NewDictionary()\r\ndict = Populate(regEx,data)\r\nsnippet = DictionaryItem(dict,\"text\")\r\nplayer.tempSnippet = snippet\r\nresult = Replace(data,snippet,\"\")\r\nreturn (result)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35545624-8eaebc5a-0535-11e8-96b2-8dafbab20d51.png)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, that's dirty!!!   (Which is what I was hoping for!)</p>\n<details>\n<p>I fixed it a third of the way.  (Still working.)</p>\n<pre><code>regEx = \"(?&lt;text&gt;&lt;(|\\\\s+)script(|.+|\\\\s+)&gt;(|.+|\\\\s+)&lt;(|.+|\\\\s+)/script(|\\\\s+)&gt;)\"\ndict = NewDictionary()\ndict = Populate(regEx,data)\nsnippet = DictionaryItem(dict,\"text\")\nplayer.tempSnippet = snippet\nresult = Replace(data,snippet,\"\")\nreturn (result)\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35545624-8eaebc5a-0535-11e8-96b2-8dafbab20d51.png\" alt=\"image\"></p>\n</details>\n\n",
      "PostDate": "2018-01-30T02:56:09.350252Z",
      "LastEditDate": "2018-01-30T22:06:41.9786389Z",
      "link": null
    },
    {
      "PostId": "3e93f816-e068-4b8a-aeb9-ad7884b4ac72",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That was pretty good, mrangel!\r\n\r\n<details>\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35547794-ea62d9e0-0540-11e8-9426-b4adff7a5eb3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35547812-07f57a80-0541-11e8-8b30-80fc92fb584a.png)\r\n\r\n```\r\nregEx = \"(?<text><(|\\\\s+)script(|.+|\\\\s+)>(|.+|\\\\s+)<(|.+|\\\\s+)/script(|\\\\s+)>)\"\r\nLog (\"Stripping:\")\r\nLog (data)\r\ndataList = NewStringList()\r\nnewdataList = NewStringList()\r\ndataList = Split(data,\"/script\")\r\nforeach (o, dataList) {\r\n  Log(\"Running foreach\")\r\n  Log(o)\r\n  if (EndsWith(o,\"<\")) {\r\n    o = o + \"/script>\"\r\n  }\r\n  if (EndsWith(o,\"< \")) {\r\n    o = o + \" /script>\"\r\n  }\r\n  if (StartsWith(o,\" >\")) {\r\n    o = Right(o,LengthOf(o)-2)\r\n  }\r\n  if (StartsWith(o,\">\")) {\r\n    o = Right(o,LengthOf(o)-1)\r\n  }\r\n  Log (\"Processing:\")\r\n  Log (o)\r\n  if (IsRegexMatch(regEx,o)) {\r\n    Log (\"FOUND MATCH:\")\r\n    dict = NewDictionary()\r\n    dict = Populate(regEx,o)\r\n    snippet = DictionaryItem(dict,\"text\")\r\n    Log (\"Removing:\")\r\n    Log (snippet)\r\n    o = Replace(o,snippet,\"\")\r\n    Log (\"Stripped result:\")\r\n    Log (o)\r\n    list add(newdataList,o)\r\n  }\r\n  else {\r\n    Log (\"NO MATCH\")\r\n    list add(newdataList,o)\r\n  }\r\n}\r\nnewdata = \"\"\r\nif (ListCount(newdataList)>0) {\r\n  data = Join(newdataList,\"\")\r\n  Log(\"Joined result:\")\r\n  Log(data)\r\n}\r\nLog (\"RETURNING:\")\r\nLog (data)\r\nreturn (data)\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>That was pretty good, mrangel!</p>\n<details>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35547794-ea62d9e0-0540-11e8-9426-b4adff7a5eb3.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35547812-07f57a80-0541-11e8-8b30-80fc92fb584a.png\" alt=\"image\"></p>\n<pre><code>regEx = \"(?&lt;text&gt;&lt;(|\\\\s+)script(|.+|\\\\s+)&gt;(|.+|\\\\s+)&lt;(|.+|\\\\s+)/script(|\\\\s+)&gt;)\"\nLog (\"Stripping:\")\nLog (data)\ndataList = NewStringList()\nnewdataList = NewStringList()\ndataList = Split(data,\"/script\")\nforeach (o, dataList) {\n  Log(\"Running foreach\")\n  Log(o)\n  if (EndsWith(o,\"&lt;\")) {\n    o = o + \"/script&gt;\"\n  }\n  if (EndsWith(o,\"&lt; \")) {\n    o = o + \" /script&gt;\"\n  }\n  if (StartsWith(o,\" &gt;\")) {\n    o = Right(o,LengthOf(o)-2)\n  }\n  if (StartsWith(o,\"&gt;\")) {\n    o = Right(o,LengthOf(o)-1)\n  }\n  Log (\"Processing:\")\n  Log (o)\n  if (IsRegexMatch(regEx,o)) {\n    Log (\"FOUND MATCH:\")\n    dict = NewDictionary()\n    dict = Populate(regEx,o)\n    snippet = DictionaryItem(dict,\"text\")\n    Log (\"Removing:\")\n    Log (snippet)\n    o = Replace(o,snippet,\"\")\n    Log (\"Stripped result:\")\n    Log (o)\n    list add(newdataList,o)\n  }\n  else {\n    Log (\"NO MATCH\")\n    list add(newdataList,o)\n  }\n}\nnewdata = \"\"\nif (ListCount(newdataList)&gt;0) {\n  data = Join(newdataList,\"\")\n  Log(\"Joined result:\")\n  Log(data)\n}\nLog (\"RETURNING:\")\nLog (data)\nreturn (data)\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-01-30T04:09:41.0377043Z",
      "LastEditDate": "2018-01-30T22:06:18.8614851Z",
      "link": null
    },
    {
      "PostId": "fe322eef-3e9a-4c2f-9a48-bd4c26317586",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "jQuery is much easier (but each ```ASLEvent()``` ends a turn (and calls the turn scripts and all that)):\r\n\r\n```\r\nfunction stripScript(){\r\n\tvar gameContent = $(\"#divOutput\").html();\r\n\talert(\"Stripping script elements from: \\n\\n\"+gameContent);\r\n\t$(\"#transcript-content\").html(gameContent);\r\n\t$(\"#transcript-content\").find('script').remove();\r\n        // TODO: Replace <br> with \"\\n\", and  \\\r\n        //    add \"\\n\" at the beginning and end of each header and <p>!!!\r\n        //\r\n        //  It's easy (now that I've learned how from MrAngel), \\\r\n        //      I just haven't done it yet.\r\n        //\r\n\t//var txt = $(\"#transcript-content\").text();\r\n        //  Just displaying as HTML for now.\r\n\tvar txt = $(\"#transcript-content\").html();\r\n\ttxt = \"Stripped: \" + txt;\r\n\talert(txt);\r\n\t$(\"#transcript-content\").html(txt);\r\n\t$(\"#transcript-content\").show();\r\n\taddLogEntry(txt);\r\n};\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35550036-2b0a86de-054e-11e8-91c2-ca0e9caef6dd.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>jQuery is much easier (but each <code>ASLEvent()</code> ends a turn (and calls the turn scripts and all that)):</p>\n<pre><code>function stripScript(){\n\tvar gameContent = $(\"#divOutput\").html();\n\talert(\"Stripping script elements from: \\n\\n\"+gameContent);\n\t$(\"#transcript-content\").html(gameContent);\n\t$(\"#transcript-content\").find('script').remove();\n        // TODO: Replace &lt;br&gt; with \"\\n\", and  \\\n        //    add \"\\n\" at the beginning and end of each header and &lt;p&gt;!!!\n        //\n        //  It's easy (now that I've learned how from MrAngel), \\\n        //      I just haven't done it yet.\n        //\n\t//var txt = $(\"#transcript-content\").text();\n        //  Just displaying as HTML for now.\n\tvar txt = $(\"#transcript-content\").html();\n\ttxt = \"Stripped: \" + txt;\n\talert(txt);\n\t$(\"#transcript-content\").html(txt);\n\t$(\"#transcript-content\").show();\n\taddLogEntry(txt);\n};\n\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35550036-2b0a86de-054e-11e8-91c2-ca0e9caef6dd.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-01-30T05:47:18.3857Z",
      "LastEditDate": "2018-01-30T22:12:20.5843042Z",
      "link": null
    },
    {
      "PostId": "c47525df-87bf-4fcc-b54e-5f63a6c0fc18",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Trying to go by the character count let something slip by, no matter what I tried.\r\n\r\nWhat did my one miss? I'm scripting on my phone off the top of my head, while my laptop prepares a new book, so didn't actually test it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Trying to go by the character count let something slip by, no matter what I tried.</p>\n</blockquote>\n<p>What did my one miss? I'm scripting on my phone off the top of my head, while my laptop prepares a new book, so didn't actually test it.</p>\n\n",
      "PostDate": "2018-01-30T14:01:51.9955021Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "032b911c-3708-4474-af76-38ed5f94378a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">What did my one miss?\r\n\r\n\r\n<details>\r\n\r\n\r\n```\r\nplayer.this = \"Text here.<script>alert('hello');</script>\"\r\nplayer.newthis = StripScriptElement(player.this)\r\nplayer.that = \"<script onerror='alert('ti');>console.log('Hey you');</script ><p>I am a paragraph!</p>\"\r\nplayer.newthat = StripScriptElement(player.that)\r\nplayer.mrangelstext = \"Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);</script><p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert('Here's another script!');</script>...<p>I think I missed something just now</p>\"\r\nmsg (player.mrangelstext)\r\nplayer.newmrangelstext = RemoveElement(\"script\",player.mrangelstext)\r\nmsg (player.newmrangelstext)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35581989-0c186146-05b3-11e8-993d-e74bb95ebca1.png)\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35582048-389350dc-05b3-11e8-93a9-b3d7dad88e7e.png)\r\n\r\n---\r\n```\r\nplayer.styleelement = \"<style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\"\r\nmsg (player.styleelement)\r\nplayer.styleelement2 = RemoveElement(\"script\",player.styleelement)\r\nmsg (player.styleelement2)\r\nplayer.styleelement3 = RemoveElement(\"style\",player.styleelement2)\r\nmsg (player.styleelement3)\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35582319-1c248b9a-05b4-11e8-8400-b3f1c7ff7918.png)\r\n![image](https://user-images.githubusercontent.com/30656341/35582330-2695a6fe-05b4-11e8-814b-e58bbcec07f7.png)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What did my one miss?</p>\n</blockquote>\n<details>\n<pre><code>player.this = \"Text here.&lt;script&gt;alert('hello');&lt;/script&gt;\"\nplayer.newthis = StripScriptElement(player.this)\nplayer.that = \"&lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script &gt;&lt;p&gt;I am a paragraph!&lt;/p&gt;\"\nplayer.newthat = StripScriptElement(player.that)\nplayer.mrangelstext = \"Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;/script&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert('Here's another script!');&lt;/script&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\"\nmsg (player.mrangelstext)\nplayer.newmrangelstext = RemoveElement(\"script\",player.mrangelstext)\nmsg (player.newmrangelstext)\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35581989-0c186146-05b3-11e8-993d-e74bb95ebca1.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35582048-389350dc-05b3-11e8-93a9-b3d7dad88e7e.png\" alt=\"image\"></p>\n<hr>\n<pre><code>player.styleelement = \"&lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\"\nmsg (player.styleelement)\nplayer.styleelement2 = RemoveElement(\"script\",player.styleelement)\nmsg (player.styleelement2)\nplayer.styleelement3 = RemoveElement(\"style\",player.styleelement2)\nmsg (player.styleelement3)\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35582319-1c248b9a-05b4-11e8-8400-b3f1c7ff7918.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/30656341/35582330-2695a6fe-05b4-11e8-814b-e58bbcec07f7.png\" alt=\"image\"></p>\n</details>\n\n",
      "PostDate": "2018-01-30T17:54:52.8953323Z",
      "LastEditDate": "2018-01-30T22:05:06.3055935Z",
      "link": null
    },
    {
      "PostId": "ded09024-9d74-4a18-a085-f0a72f4158ac",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That last script I posted seems to catch everything.\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Strip the Scripts\">\r\n    <gameid>32998548-63f8-4e13-ae49-8dc5afc3bd28</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\"><![CDATA[\r\n      player.mrangelstext = \"Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);</script><p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert('Here's another script!');</script>...<p>I think I missed something just now</p>\"\r\n      msg (player.mrangelstext)\r\n      player.newmrangelstext = StripHTMLElement(\"script\",player.mrangelstext)\r\n      msg (player.newmrangelstext)\r\n      player.two = \"<style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\"\r\n      msg (player.two)\r\n      player.twoStrippedScript = StripHTMLElement(\"script\",player.two)\r\n      msg (player.twoStrippedScript)\r\n      player.newtwo = StripHTMLElement(\"style\",player.twoStrippedScript)\r\n      msg (player.newtwo)\r\n    ]]></enter>\r\n    <beforeenter type=\"script\"><![CDATA[\r\n       player.this = \"Text here.<script>alert('hello');</script>\"\r\n       player.newthis = StripHTMLElement(\"script\",player.this)\r\n       player.that = \"<script onerror='alert('ti');>console.log('Hey you');</script ><p>I am a paragraph!</p>\"\r\n      player.newthat = StripHTMLElement(\"script\",player.that)\r\n    ]]></beforeenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <function name=\"StripHTMLElement\" parameters=\"element, data\" type=\"string\"><![CDATA[\r\n    regEx = \"(?<text><(|\\\\s+)\"+element+\"(|.+|\\\\s+)>(|.+|\\\\s+)<(|.+|\\\\s+)/\"+element+\"(|\\\\s+)>)\"\r\n    Log (\"Stripping:\")\r\n    Log (data)\r\n    dataList = NewStringList()\r\n    newdataList = NewStringList()\r\n    dataList = Split(data,\"/\"+element+\"\")\r\n    foreach (o, dataList) {\r\n      Log (\"Running foreach\")\r\n      Log (o)\r\n      if (EndsWith(o,\"<\")) {\r\n        o = o + \"/\"+element+\">\"\r\n      }\r\n      if (EndsWith(o,\"< \")) {\r\n        o = o + \" /\"+element+\">\"\r\n      }\r\n      if (StartsWith(o,\" >\")) {\r\n        o = Right(o,LengthOf(o)-2)\r\n      }\r\n      if (StartsWith(o,\">\")) {\r\n        o = Right(o,LengthOf(o)-1)\r\n      }\r\n      Log (\"Processing:\")\r\n      Log (o)\r\n      if (IsRegexMatch(regEx,o)) {\r\n        Log (\"FOUND MATCH:\")\r\n        dict = NewDictionary()\r\n        dict = Populate(regEx,o)\r\n        snippet = DictionaryItem(dict,\"text\")\r\n        Log (\"Removing:\")\r\n        Log (snippet)\r\n        o = Replace(o,snippet,\"\")\r\n        Log (\"Stripped result:\")\r\n        Log (o)\r\n        list add (newdataList, o)\r\n      }\r\n      else {\r\n        Log (\"NO MATCH\")\r\n        list add (newdataList, o)\r\n      }\r\n    }\r\n    newdata = \"\"\r\n    if (ListCount(newdataList)>0) {\r\n      data = Join(newdataList,\"\")\r\n      Log (\"Joined result:\")\r\n      Log (data)\r\n    }\r\n    Log (\"RETURNING:\")\r\n    Log (data)\r\n    return (data)\r\n  ]]></function>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/35583926-0849196a-05b9-11e8-828a-d3d0de051507.png)\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/35584032-571193ba-05b9-11e8-8fb5-8ba5ff28ccc1.png)\r\n\r\n---\r\n```\r\n1/30/2018 12:27:08 PM Stripping:\r\n1/30/2018 12:27:08 PM Text here.<script>alert('hello');</script>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM Text here.<script>alert('hello');<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM Text here.<script>alert('hello');</script>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <script>alert('hello');</script>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM Text here.\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM >\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM \r\n1/30/2018 12:27:08 PM NO MATCH\r\n1/30/2018 12:27:08 PM Joined result:\r\n1/30/2018 12:27:08 PM Text here.\r\n1/30/2018 12:27:08 PM RETURNING:\r\n1/30/2018 12:27:08 PM Text here.\r\n1/30/2018 12:27:08 PM Stripping:\r\n1/30/2018 12:27:08 PM <script onerror='alert('ti');>console.log('Hey you');</script ><p>I am a paragraph!</p>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM <script onerror='alert('ti');>console.log('Hey you');<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <script onerror='alert('ti');>console.log('Hey you');</script>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <script onerror='alert('ti');>console.log('Hey you');</script>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM \r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM  ><p>I am a paragraph!</p>\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <p>I am a paragraph!</p>\r\n1/30/2018 12:27:08 PM NO MATCH\r\n1/30/2018 12:27:08 PM Joined result:\r\n1/30/2018 12:27:08 PM <p>I am a paragraph!</p>\r\n1/30/2018 12:27:08 PM RETURNING:\r\n1/30/2018 12:27:08 PM <p>I am a paragraph!</p>\r\n1/30/2018 12:27:08 PM Stripping:\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);</script><p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert('Here's another script!');</script>...<p>I think I missed something just now</p>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1><script>$('h1').css(color: red);</script>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <script>$('h1').css(color: red);</script>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM ><p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert('Here's another script!');<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <p>Now who's talking?</p><h1>Do you expect this to work?</h1><script>alert('Here's another script!');</script>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <script>alert('Here's another script!');</script>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM <p>Now who's talking?</p><h1>Do you expect this to work?</h1>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM >...<p>I think I missed something just now</p>\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM ...<p>I think I missed something just now</p>\r\n1/30/2018 12:27:08 PM NO MATCH\r\n1/30/2018 12:27:08 PM Joined result:\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1><p>Now who's talking?</p><h1>Do you expect this to work?</h1>...<p>I think I missed something just now</p>\r\n1/30/2018 12:27:08 PM RETURNING:\r\n1/30/2018 12:27:08 PM Let's see how this works...<h1>Hahahahaha!</h1><p>Now who's talking?</p><h1>Do you expect this to work?</h1>...<p>I think I missed something just now</p>\r\n1/30/2018 12:27:08 PM Stripping:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span><script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <script>addTextAndScroll('<p>hello from script element!!!<p>');</script>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM >\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM \r\n1/30/2018 12:27:08 PM NO MATCH\r\n1/30/2018 12:27:08 PM Joined result:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM RETURNING:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM Stripping:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style><span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@<\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style>\r\n1/30/2018 12:27:08 PM FOUND MATCH:\r\n1/30/2018 12:27:08 PM Removing:\r\n1/30/2018 12:27:08 PM <style>#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@</style>\r\n1/30/2018 12:27:08 PM Stripped result:\r\n1/30/2018 12:27:08 PM \r\n1/30/2018 12:27:08 PM Running foreach\r\n1/30/2018 12:27:08 PM ><span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM Processing:\r\n1/30/2018 12:27:08 PM <span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM NO MATCH\r\n1/30/2018 12:27:08 PM Joined result:\r\n1/30/2018 12:27:08 PM <span id='test-p'>This is text with its own style element.</span>\r\n1/30/2018 12:27:08 PM RETURNING:\r\n1/30/2018 12:27:08 PM <span id='test-p'>This is text with its own style element.</span>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>That last script I posted seems to catch everything.</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Strip the Scripts\"&gt;\n    &lt;gameid&gt;32998548-63f8-4e13-ae49-8dc5afc3bd28&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;&lt;![CDATA[\n      player.mrangelstext = \"Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;/script&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert('Here's another script!');&lt;/script&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\"\n      msg (player.mrangelstext)\n      player.newmrangelstext = StripHTMLElement(\"script\",player.mrangelstext)\n      msg (player.newmrangelstext)\n      player.two = \"&lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\"\n      msg (player.two)\n      player.twoStrippedScript = StripHTMLElement(\"script\",player.two)\n      msg (player.twoStrippedScript)\n      player.newtwo = StripHTMLElement(\"style\",player.twoStrippedScript)\n      msg (player.newtwo)\n    ]]&gt;&lt;/enter&gt;\n    &lt;beforeenter type=\"script\"&gt;&lt;![CDATA[\n       player.this = \"Text here.&lt;script&gt;alert('hello');&lt;/script&gt;\"\n       player.newthis = StripHTMLElement(\"script\",player.this)\n       player.that = \"&lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script &gt;&lt;p&gt;I am a paragraph!&lt;/p&gt;\"\n      player.newthat = StripHTMLElement(\"script\",player.that)\n    ]]&gt;&lt;/beforeenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"StripHTMLElement\" parameters=\"element, data\" type=\"string\"&gt;&lt;![CDATA[\n    regEx = \"(?&lt;text&gt;&lt;(|\\\\s+)\"+element+\"(|.+|\\\\s+)&gt;(|.+|\\\\s+)&lt;(|.+|\\\\s+)/\"+element+\"(|\\\\s+)&gt;)\"\n    Log (\"Stripping:\")\n    Log (data)\n    dataList = NewStringList()\n    newdataList = NewStringList()\n    dataList = Split(data,\"/\"+element+\"\")\n    foreach (o, dataList) {\n      Log (\"Running foreach\")\n      Log (o)\n      if (EndsWith(o,\"&lt;\")) {\n        o = o + \"/\"+element+\"&gt;\"\n      }\n      if (EndsWith(o,\"&lt; \")) {\n        o = o + \" /\"+element+\"&gt;\"\n      }\n      if (StartsWith(o,\" &gt;\")) {\n        o = Right(o,LengthOf(o)-2)\n      }\n      if (StartsWith(o,\"&gt;\")) {\n        o = Right(o,LengthOf(o)-1)\n      }\n      Log (\"Processing:\")\n      Log (o)\n      if (IsRegexMatch(regEx,o)) {\n        Log (\"FOUND MATCH:\")\n        dict = NewDictionary()\n        dict = Populate(regEx,o)\n        snippet = DictionaryItem(dict,\"text\")\n        Log (\"Removing:\")\n        Log (snippet)\n        o = Replace(o,snippet,\"\")\n        Log (\"Stripped result:\")\n        Log (o)\n        list add (newdataList, o)\n      }\n      else {\n        Log (\"NO MATCH\")\n        list add (newdataList, o)\n      }\n    }\n    newdata = \"\"\n    if (ListCount(newdataList)&gt;0) {\n      data = Join(newdataList,\"\")\n      Log (\"Joined result:\")\n      Log (data)\n    }\n    Log (\"RETURNING:\")\n    Log (data)\n    return (data)\n  ]]&gt;&lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35583926-0849196a-05b9-11e8-828a-d3d0de051507.png\" alt=\"image\"></p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35584032-571193ba-05b9-11e8-8fb5-8ba5ff28ccc1.png\" alt=\"image\"></p>\n<hr>\n<pre><code>1/30/2018 12:27:08 PM Stripping:\n1/30/2018 12:27:08 PM Text here.&lt;script&gt;alert('hello');&lt;/script&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM Text here.&lt;script&gt;alert('hello');&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM Text here.&lt;script&gt;alert('hello');&lt;/script&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;script&gt;alert('hello');&lt;/script&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM Text here.\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &gt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM \n1/30/2018 12:27:08 PM NO MATCH\n1/30/2018 12:27:08 PM Joined result:\n1/30/2018 12:27:08 PM Text here.\n1/30/2018 12:27:08 PM RETURNING:\n1/30/2018 12:27:08 PM Text here.\n1/30/2018 12:27:08 PM Stripping:\n1/30/2018 12:27:08 PM &lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script &gt;&lt;p&gt;I am a paragraph!&lt;/p&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;script onerror='alert('ti');&gt;console.log('Hey you');&lt;/script&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM \n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM  &gt;&lt;p&gt;I am a paragraph!&lt;/p&gt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;p&gt;I am a paragraph!&lt;/p&gt;\n1/30/2018 12:27:08 PM NO MATCH\n1/30/2018 12:27:08 PM Joined result:\n1/30/2018 12:27:08 PM &lt;p&gt;I am a paragraph!&lt;/p&gt;\n1/30/2018 12:27:08 PM RETURNING:\n1/30/2018 12:27:08 PM &lt;p&gt;I am a paragraph!&lt;/p&gt;\n1/30/2018 12:27:08 PM Stripping:\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;/script&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert('Here's another script!');&lt;/script&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;script&gt;$('h1').css(color: red);&lt;/script&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;script&gt;$('h1').css(color: red);&lt;/script&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert('Here's another script!');&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;&lt;script&gt;alert('Here's another script!');&lt;/script&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;script&gt;alert('Here's another script!');&lt;/script&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM &lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM ...&lt;p&gt;I think I missed something just now&lt;/p&gt;\n1/30/2018 12:27:08 PM NO MATCH\n1/30/2018 12:27:08 PM Joined result:\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\n1/30/2018 12:27:08 PM RETURNING:\n1/30/2018 12:27:08 PM Let's see how this works...&lt;h1&gt;Hahahahaha!&lt;/h1&gt;&lt;p&gt;Now who's talking?&lt;/p&gt;&lt;h1&gt;Do you expect this to work?&lt;/h1&gt;...&lt;p&gt;I think I missed something just now&lt;/p&gt;\n1/30/2018 12:27:08 PM Stripping:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;&lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;script&gt;addTextAndScroll('&lt;p&gt;hello from script element!!!&lt;p&gt;');&lt;/script&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &gt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM \n1/30/2018 12:27:08 PM NO MATCH\n1/30/2018 12:27:08 PM Joined result:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM RETURNING:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM Stripping:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;\n1/30/2018 12:27:08 PM FOUND MATCH:\n1/30/2018 12:27:08 PM Removing:\n1/30/2018 12:27:08 PM &lt;style&gt;#test-p@@@open@@@color:green;font-weight:bold;@@@close@@@&lt;/style&gt;\n1/30/2018 12:27:08 PM Stripped result:\n1/30/2018 12:27:08 PM \n1/30/2018 12:27:08 PM Running foreach\n1/30/2018 12:27:08 PM &gt;&lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM Processing:\n1/30/2018 12:27:08 PM &lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM NO MATCH\n1/30/2018 12:27:08 PM Joined result:\n1/30/2018 12:27:08 PM &lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n1/30/2018 12:27:08 PM RETURNING:\n1/30/2018 12:27:08 PM &lt;span id='test-p'&gt;This is text with its own style element.&lt;/span&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-01-30T18:13:53.3301567Z",
      "LastEditDate": "2018-01-30T22:05:31.6377658Z",
      "link": null
    },
    {
      "PostId": "1004a581-e9d7-4c80-98e7-d507ee594bbf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Writing script while half asleep is rarely a good idea :p\r\nLooking at my script again, I seem to have missed that Instr works like the VB version of the function (the first character is 1, not 0).\r\n\r\nWhat I meant was:\r\n```\r\n<function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n  startPos = Instr (string, \"<\"+element)\r\n  if (startPos = 0) {\r\n    return (string)\r\n  }\r\n  endPos = Instr (startPos, string, \">\")\r\n  if (endPos = 0) {\r\n    error (\"Element doesn't terminate\")\r\n  }\r\n  if (not Mid (string, endPos-1, 1) = \"/\") {\r\n    endPos = Instr (endPos, string, \"</\"+element)\r\n    if (endPos = 0) {\r\n      error (\"No closing tag!\")\r\n    }\r\n    endPos = Instr (endPos + LengthOf(element), string, \">\")\r\n    if (endPos = 0) {\r\n      error (\"Closing tag doesn't terminate!\")\r\n    }\r\n  }\r\n  return (Left (string, startPos - 1) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Writing script while half asleep is rarely a good idea :p<br>\nLooking at my script again, I seem to have missed that Instr works like the VB version of the function (the first character is 1, not 0).</p>\n<p>What I meant was:</p>\n<pre><code>&lt;function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n  startPos = Instr (string, \"&lt;\"+element)\n  if (startPos = 0) {\n    return (string)\n  }\n  endPos = Instr (startPos, string, \"&gt;\")\n  if (endPos = 0) {\n    error (\"Element doesn't terminate\")\n  }\n  if (not Mid (string, endPos-1, 1) = \"/\") {\n    endPos = Instr (endPos, string, \"&lt;/\"+element)\n    if (endPos = 0) {\n      error (\"No closing tag!\")\n    }\n    endPos = Instr (endPos + LengthOf(element), string, \"&gt;\")\n    if (endPos = 0) {\n      error (\"Closing tag doesn't terminate!\")\n    }\n  }\n  return (Left (string, startPos - 1) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-30T21:15:09.9652099Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6f543fbb-2a5a-47fb-b6e0-1c04bf901f75",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">(the first character is 1, not 0)\r\n\r\nThe same thing got me, but I had the luxury of being able to just run it through the desktop version of Quest.\r\n\r\n(The web editor is NOT the version to just test random things out with!  ERRORS GALORE! SCRIPTS DELETED!  AARGH!!!)\r\n\r\n---\r\nI know that you (and HK) are just theorizing or sharing wisdom 99% of the time.\r\n\r\n(Probably Pixie and XanMag, too.)\r\n\r\n...and 99% of THOSE times, you hit the bulls-eye, so...\r\n\r\nYou guys are just bad-asses!\r\n\r\nI don't think I've got a full year of using Quest (or programming at all) under my belt quite yet.  I still have to try something out before I know if it will work.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(the first character is 1, not 0)</p>\n</blockquote>\n<p>The same thing got me, but I had the luxury of being able to just run it through the desktop version of Quest.</p>\n<p>(The web editor is NOT the version to just test random things out with!  ERRORS GALORE! SCRIPTS DELETED!  AARGH!!!)</p>\n<hr>\n<p>I know that you (and HK) are just theorizing or sharing wisdom 99% of the time.</p>\n<p>(Probably Pixie and XanMag, too.)</p>\n<p>...and 99% of THOSE times, you hit the bulls-eye, so...</p>\n<p>You guys are just bad-asses!</p>\n<p>I don't think I've got a full year of using Quest (or programming at all) under my belt quite yet.  I still have to try something out before I know if it will work.</p>\n\n",
      "PostDate": "2018-01-30T21:36:11.818945Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cdd26ca3-d03b-4db0-9466-d6d39db23b7a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That last code you posted works perfectly, by the way.\r\n\r\nJust had to close the CDATA out on that last line.\r\n\r\nThis appears to be the best solution:\r\n```\r\n<function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n  startPos = Instr (string, \"<\"+element)\r\n  if (startPos = 0) {\r\n    return (string)\r\n  }\r\n  endPos = Instr (startPos, string, \">\")\r\n  if (endPos = 0) {\r\n    error (\"Element doesn't terminate\")\r\n  }\r\n  if (not Mid (string, endPos-1, 1) = \"/\") {\r\n    endPos = Instr (endPos, string, \"</\"+element)\r\n    if (endPos = 0) {\r\n      error (\"No closing tag!\")\r\n    }\r\n    endPos = Instr (endPos + LengthOf(element), string, \">\")\r\n    if (endPos = 0) {\r\n      error (\"Closing tag doesn't terminate!\")\r\n    }\r\n  }\r\n  return (Left (string, startPos - 1) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))\r\n]]></function>\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>That last code you posted works perfectly, by the way.</p>\n<p>Just had to close the CDATA out on that last line.</p>\n<p>This appears to be the best solution:</p>\n<pre><code>&lt;function name=\"RemoveElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n  startPos = Instr (string, \"&lt;\"+element)\n  if (startPos = 0) {\n    return (string)\n  }\n  endPos = Instr (startPos, string, \"&gt;\")\n  if (endPos = 0) {\n    error (\"Element doesn't terminate\")\n  }\n  if (not Mid (string, endPos-1, 1) = \"/\") {\n    endPos = Instr (endPos, string, \"&lt;/\"+element)\n    if (endPos = 0) {\n      error (\"No closing tag!\")\n    }\n    endPos = Instr (endPos + LengthOf(element), string, \"&gt;\")\n    if (endPos = 0) {\n      error (\"Closing tag doesn't terminate!\")\n    }\n  }\n  return (Left (string, startPos - 1) + RemoveElement (element, Right (string, LengthOf(string) - endPos)))\n]]&gt;&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-30T21:57:20.9548789Z",
      "LastEditDate": "2018-01-30T21:59:05.7843978Z",
      "link": null
    },
    {
      "PostId": "0eb91f19-e284-4b45-b1a1-26dace22a403",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This gets past both of our scripts:\r\n\r\n```\r\n<css><![CDATA[<style type=\"text/css\">div#txtCommandDiv {border:none; font-size:12pt; font-family:Georgia, serif; } input#txtCommand { outline:none; border:none; font-size:16px; margin:0; padding:0; }</style>\r\n   \r\n       <style type=\"text/css\">\r\n                 \r\n        div#txtCommandDiv {\r\n            border: none;\r\n            background: no-repeat;\r\n          }\r\n          input#txtCommand {\r\n            outline:none;\r\n            border: none;\r\n            margin:0;\r\n            padding:0;\r\n            max-width: 1000px;\r\n          }\r\n          #status { display: none !important; visibility: hidden !important; }       \r\n          </style>\r\n                                                                                                                                                                                                                                                                                                                                                                                    ]]></css>\r\n```\r\n\r\n\r\n...and it's in the turn script, so the output is this (with either of our Quest codes OR with jQuery's ```$(element).text()```):\r\n\r\n---\r\n\r\n**TRANSCRIPT:**\r\n\r\n\r\n```\r\n   \r\n       \r\n                 \r\n        div#txtCommandDiv {\r\n            border: none;\r\n            background: no-repeat;\r\n          }\r\n          input#txtCommand {\r\n            outline:none;\r\n            border: none;\r\n            margin:0;\r\n            padding:0;\r\n            max-width: 1000px;\r\n          }\r\n          #status { display: none !important; visibility: hidden !important; }       \r\n          \r\n                                                                                                                                                                                                                                                                                                                                                                                    \r\n\r\n\r\n\r\n\r\n\r\n   \r\n       \r\n                 \r\n        div#txtCommandDiv {\r\n            border: none;\r\n            background: no-repeat;\r\n          }\r\n          input#txtCommand {\r\n            outline:none;\r\n            border: none;\r\n            margin:0;\r\n            padding:0;\r\n            max-width: 1000px;\r\n          }\r\n          #status { display: none !important; visibility: hidden !important; }       \r\n          \r\n                                                                                                                                                                                                                                                                                                                                                                                    \r\n\r\n\r\n   \r\n       \r\n                 \r\n        div#txtCommandDiv {\r\n            border: none;\r\n            background: no-repeat;\r\n          }\r\n          input#txtCommand {\r\n            outline:none;\r\n            border: none;\r\n            margin:0;\r\n            padding:0;\r\n            max-width: 1000px;\r\n          }\r\n          #status { display: none !important; visibility: hidden !important; }       \r\n          \r\n                                                                                                                                                                                                                                                                                                                                                                                    \r\nIt all started innocently enough...\r\n\r\n   \r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This gets past both of our scripts:</p>\n<pre><code>&lt;css&gt;&lt;![CDATA[&lt;style type=\"text/css\"&gt;div#txtCommandDiv {border:none; font-size:12pt; font-family:Georgia, serif; } input#txtCommand { outline:none; border:none; font-size:16px; margin:0; padding:0; }&lt;/style&gt;\n   \n       &lt;style type=\"text/css\"&gt;\n                 \n        div#txtCommandDiv {\n            border: none;\n            background: no-repeat;\n          }\n          input#txtCommand {\n            outline:none;\n            border: none;\n            margin:0;\n            padding:0;\n            max-width: 1000px;\n          }\n          #status { display: none !important; visibility: hidden !important; }       \n          &lt;/style&gt;\n                                                                                                                                                                                                                                                                                                                                                                                    ]]&gt;&lt;/css&gt;\n</code></pre>\n<p>...and it's in the turn script, so the output is this (with either of our Quest codes OR with jQuery's <code>$(element).text()</code>):</p>\n<hr>\n<p><strong>TRANSCRIPT:</strong></p>\n<pre><code>   \n       \n                 \n        div#txtCommandDiv {\n            border: none;\n            background: no-repeat;\n          }\n          input#txtCommand {\n            outline:none;\n            border: none;\n            margin:0;\n            padding:0;\n            max-width: 1000px;\n          }\n          #status { display: none !important; visibility: hidden !important; }       \n          \n                                                                                                                                                                                                                                                                                                                                                                                    \n\n\n\n\n\n   \n       \n                 \n        div#txtCommandDiv {\n            border: none;\n            background: no-repeat;\n          }\n          input#txtCommand {\n            outline:none;\n            border: none;\n            margin:0;\n            padding:0;\n            max-width: 1000px;\n          }\n          #status { display: none !important; visibility: hidden !important; }       \n          \n                                                                                                                                                                                                                                                                                                                                                                                    \n\n\n   \n       \n                 \n        div#txtCommandDiv {\n            border: none;\n            background: no-repeat;\n          }\n          input#txtCommand {\n            outline:none;\n            border: none;\n            margin:0;\n            padding:0;\n            max-width: 1000px;\n          }\n          #status { display: none !important; visibility: hidden !important; }       \n          \n                                                                                                                                                                                                                                                                                                                                                                                    \nIt all started innocently enough...\n\n   \n</code></pre>\n\n",
      "PostDate": "2018-02-04T22:51:10.6149938Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "29819234-7732-4190-8662-014858aeedaf",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just now saw the post with your function, Pixie!\r\n\r\nIt seems to be working!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>I just now saw the post with your function, Pixie!</p>\n<p>It seems to be working!!!</p>\n\n",
      "PostDate": "2018-02-06T20:16:45.4281586Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b229af34-6755-44f1-831a-deb530c37d80",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oops...\r\n\r\nNope.\r\n\r\nWell, it works *too*&nbsp; good.\r\n\r\nIt removes the text after the \\<style> element, too.\r\n\r\n```\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\"><![CDATA[\r\n      msg(player.kv_att)\r\n    ]]></enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <attr name=\"kv_att\"><![CDATA[\r\n      \r\n      <style>\r\n      \r\n        #divOutput *{\r\n          color:green;\r\n          background:lightgray;\r\n        }\r\n        \r\n      </style>\r\n      \r\n      \"Hello, there,\" says the old-timing man.  \"You got any bourbon on  ya'?\"\r\n      <br/>\r\n      \"No, sir,\" you reply.  \"Sure don't.\"\r\n      <br/>\r\n      And that's when you notice it.\r\n      <br/>\r\n      The double-quotes are not escaped in the source code!!!\r\n      <br/>\r\n      Well... At least there are line breaks now!\r\n                                                ]]></attr>\r\n    </object>\r\n  </object>\r\n  <function name=\"StripElement\" parameters=\"element, string\" type=\"string\"><![CDATA[\r\n    elementStart = Instr(string, \"<\" + element)\r\n    if (elementStart > 0) {\r\n      elementEnd = Instr(elementStart, string,\"</\"+element+\">\") + 3 + LengthOf(element)\r\n      element = Mid(string, elementStart, elementEnd - elementStart)\r\n      stripped = Replace(string, element, \"\")\r\n      return (stripped)\r\n    }\r\n    else {\r\n      return (string)\r\n    }\r\n  ]]></function>\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35883695-c42e6498-0b4d-11e8-9cc1-8cbfc25b4f92.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>Oops...</p>\n<p>Nope.</p>\n<p>Well, it works <em>too</em>&nbsp; good.</p>\n<p>It removes the text after the &lt;style&gt; element, too.</p>\n<pre><code>  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;&lt;![CDATA[\n      msg(player.kv_att)\n    ]]&gt;&lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;attr name=\"kv_att\"&gt;&lt;![CDATA[\n      \n      &lt;style&gt;\n      \n        #divOutput *{\n          color:green;\n          background:lightgray;\n        }\n        \n      &lt;/style&gt;\n      \n      \"Hello, there,\" says the old-timing man.  \"You got any bourbon on  ya'?\"\n      &lt;br/&gt;\n      \"No, sir,\" you reply.  \"Sure don't.\"\n      &lt;br/&gt;\n      And that's when you notice it.\n      &lt;br/&gt;\n      The double-quotes are not escaped in the source code!!!\n      &lt;br/&gt;\n      Well... At least there are line breaks now!\n                                                ]]&gt;&lt;/attr&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"StripElement\" parameters=\"element, string\" type=\"string\"&gt;&lt;![CDATA[\n    elementStart = Instr(string, \"&lt;\" + element)\n    if (elementStart &gt; 0) {\n      elementEnd = Instr(elementStart, string,\"&lt;/\"+element+\"&gt;\") + 3 + LengthOf(element)\n      element = Mid(string, elementStart, elementEnd - elementStart)\n      stripped = Replace(string, element, \"\")\n      return (stripped)\n    }\n    else {\n      return (string)\n    }\n  ]]&gt;&lt;/function&gt;\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35883695-c42e6498-0b4d-11e8-9cc1-8cbfc25b4f92.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-02-06T20:57:46.5427333Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
