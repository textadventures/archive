{
  "Topic": {
    "TopicId": "4kulp6kmtkgyoehheclula",
    "ForumId": "10",
    "Title": "YouTube Javascript Iframe API",
    "LastUpdated": "2018-12-01T06:03:20.1824734Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9a7000d2-10b8-48cf-9b34-221c01ec6afd",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Do I have access to the YouTube Iframe API from the web interface?\r\nI tried playing with JS.eval, but if that is supposed to work, I don't seem to understand how.\r\n\r\nhttps://developers.google.com/youtube/iframe_api_reference#Examples\r\n\r\n  I can only use the web interface, so I can't create functions and libraries to add to the game.\r\n\r\nIf there is a way to get it to work from the Web Interface, it looks like I can dynamically create arrays of video clips to play, I will be able to listen for various triggers based on video state, ready, finished playing, etc. and that will add some extra cool stuff I can do with these videos to work around the limitations of not being able to autoplay* from a web browser.\r\n\r\n*very similar situation with other browsers\r\n\r\n```\r\n\"Warning: To prevent unsolicited downloads over cellular networks at the user’s expense, embedded media cannot be played automatically in Safari on iOS — the user always initiates playback.\"\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Do I have access to the YouTube Iframe API from the web interface?<br>\nI tried playing with JS.eval, but if that is supposed to work, I don't seem to understand how.</p>\n<p>https://developers.google.com/youtube/iframe_api_reference#Examples</p>\n<p>I can only use the web interface, so I can't create functions and libraries to add to the game.</p>\n<p>If there is a way to get it to work from the Web Interface, it looks like I can dynamically create arrays of video clips to play, I will be able to listen for various triggers based on video state, ready, finished playing, etc. and that will add some extra cool stuff I can do with these videos to work around the limitations of not being able to autoplay* from a web browser.</p>\n<p>*very similar situation with other browsers</p>\n<pre><code>\"Warning: To prevent unsolicited downloads over cellular networks at the user’s expense, embedded media cannot be played automatically in Safari on iOS — the user always initiates playback.\"\n</code></pre>\n\n",
      "PostDate": "2018-12-01T06:03:20.1824734Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6c4e8e45-71cc-49e2-a8ff-4451712d83b1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Do I have access to the YouTube Iframe API from the web interface?\r\n\r\nIt's a javascript API.\r\nQuest sends HTML and Javascript to the player's browser. There is no restriction on what that javascript can include, because as far as Quest is concerned it's just a string that needs to be sent to the browser. You can do absolutely anything that you could do in a static webpage.\r\n\r\nI don't think there should be any problems with using the example code shown on that page in Quest; though it might be neater to have something like this to load the library:\r\n```\r\n$(function (){\r\n  onYouTubeIframeAPIReady = function () {\r\n    // any code here that you want to run as soon as the API is ready - probably not necessary if you're just loading it ready to run when you add videos to the page later\r\n  };\r\n\r\n  // This line loads the API:\r\n  $('<script>', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\r\n});\r\n```\r\n\r\n> I can only use the web interface, so I can't create functions and libraries to add to the game.\r\n\r\nYou can't create libraries, but that shouldn't matter too much. It just means you'll have to create all your functions one by one if you want to reuse them in another game.\r\nYou can create functions fine; the only real limitation of the web version is that you can't replace Quest functions that are defined in the core libraries.\r\n\r\nIf you mean javascript functions, you can override them just fine. You might not be able to include *.js files, but there's nothing to stop you minifying a javascript file and putting the whole thing in a JS.eval() statement.\r\n\r\nMy favourite way to make it easier to play with javascript is this UI Initialisation script:\r\n```\r\nforeach (jsobj, AllRooms()) {\r\n  if (StartsWith (jsobj.name, \"JS_\")) {\r\n    if (HasString (jsobj, \"description\")) {\r\n      jstring = jsobj.description\r\n      jstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\r\n      jstring = Replace(jstring,\"«\",Chr(60))\r\n      jstring = Replace(jstring,\"»\",Chr(62))\r\n      JS.eval (jstring)\r\n    }\r\n  }\r\n}\r\n```\r\nThis means that any rooms with \"JS_\" at the start of their names will have their descriptions treated as javascript and sent to the browser. Just use « and » in place of &lt; and &gt; within the code, to avoid the editor mangling it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Do I have access to the YouTube Iframe API from the web interface?</p>\n</blockquote>\n<p>It's a javascript API.<br>\nQuest sends HTML and Javascript to the player's browser. There is no restriction on what that javascript can include, because as far as Quest is concerned it's just a string that needs to be sent to the browser. You can do absolutely anything that you could do in a static webpage.</p>\n<p>I don't think there should be any problems with using the example code shown on that page in Quest; though it might be neater to have something like this to load the library:</p>\n<pre><code>$(function (){\n  onYouTubeIframeAPIReady = function () {\n    // any code here that you want to run as soon as the API is ready - probably not necessary if you're just loading it ready to run when you add videos to the page later\n  };\n\n  // This line loads the API:\n  $('&lt;script&gt;', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\n});\n</code></pre>\n<blockquote>\n<p>I can only use the web interface, so I can't create functions and libraries to add to the game.</p>\n</blockquote>\n<p>You can't create libraries, but that shouldn't matter too much. It just means you'll have to create all your functions one by one if you want to reuse them in another game.<br>\nYou can create functions fine; the only real limitation of the web version is that you can't replace Quest functions that are defined in the core libraries.</p>\n<p>If you mean javascript functions, you can override them just fine. You might not be able to include *.js files, but there's nothing to stop you minifying a javascript file and putting the whole thing in a JS.eval() statement.</p>\n<p>My favourite way to make it easier to play with javascript is this UI Initialisation script:</p>\n<pre><code>foreach (jsobj, AllRooms()) {\n  if (StartsWith (jsobj.name, \"JS_\")) {\n    if (HasString (jsobj, \"description\")) {\n      jstring = jsobj.description\n      jstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\n      jstring = Replace(jstring,\"«\",Chr(60))\n      jstring = Replace(jstring,\"»\",Chr(62))\n      JS.eval (jstring)\n    }\n  }\n}\n</code></pre>\n<p>This means that any rooms with \"JS_\" at the start of their names will have their descriptions treated as javascript and sent to the browser. Just use « and » in place of &lt; and &gt; within the code, to avoid the editor mangling it.</p>\n\n",
      "PostDate": "2018-12-01T11:14:20.3764745Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d0cc3186-eb8f-4987-9723-08f1e2c2937f",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "To test, I put this in the game user interface init\r\n\r\n```\r\n$(function (){\r\n  onYouTubeIframeAPIReady = function () {\r\n  }\r\n  ;\r\n  $('<script>', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\r\n}\r\n);\r\n```\r\n\r\nError: Error adding script attribute 'inituserinterface' to element 'game': Missing '}'\r\n\r\nI don't see anything missing, and I don't understand what I would need to change.  Last time I worked with HTML was when it was still 1.0 in 1996.  I focused mostly on CISCO network management and CLI work, even though I studied coding, I didn't play with it as much as looking at a report from routers and switches and understanding how to fix the issue.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>To test, I put this in the game user interface init</p>\n<pre><code>$(function (){\n  onYouTubeIframeAPIReady = function () {\n  }\n  ;\n  $('&lt;script&gt;', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\n}\n);\n</code></pre>\n<p>Error: Error adding script attribute 'inituserinterface' to element 'game': Missing '}'</p>\n<p>I don't see anything missing, and I don't understand what I would need to change.  Last time I worked with HTML was when it was still 1.0 in 1996.  I focused mostly on CISCO network management and CLI work, even though I studied coding, I didn't play with it as much as looking at a report from routers and switches and understanding how to fix the issue.</p>\n\n",
      "PostDate": "2018-12-01T20:28:16.9744721Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60c7e3c7-1209-4650-9309-6bf09beeae74",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest can't directly read Javascript.  You have to use ```JS.eval()```, like so:\r\n\r\n```\r\nJS.eval (\"$(function (){  onYouTubeIframeAPIReady = function () {  }  ;  $('<script>', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');});\")\r\n```\r\n\r\n---\r\nNOTE:  This is untested and assumes that JS code works properly when ran at that point in the game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest can't directly read Javascript.  You have to use <code>JS.eval()</code>, like so:</p>\n<pre><code>JS.eval (\"$(function (){  onYouTubeIframeAPIReady = function () {  }  ;  $('&lt;script&gt;', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');});\")\n</code></pre>\n<hr>\n<p>NOTE:  This is untested and assumes that JS code works properly when ran at that point in the game.</p>\n\n",
      "PostDate": "2018-12-01T22:17:16.2295504Z",
      "LastEditDate": "2018-12-01T22:18:33.0508021Z",
      "link": null
    },
    {
      "PostId": "3653b927-20eb-44c7-9738-3d972da8a121",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I still don't understand what this is supposed to do for me.  The more I play with this, the more it feels like I am just throwing code into a black hole.  \r\n\r\nI am starting to remember why I always disliked programming, too many levels of abstraction that aren't relevant to the language used to produce the results.  \r\n\r\nI almost need to have an actual conversation with someone about the capabilities of Quest and what I would like to produce so I get understand how to proceed.  \r\n\r\nAnd having to reload the website every time there is a problem with the code, or error messages that don't clarify the error, it feels like I keep walking into the same glass wall.  \r\n\r\nI have no desire to create complex environments for players to interact with, I don't want to write long stretches of story for the player to read.  \r\n\r\nI just want to load YouTube video clips, images, and perhaps some menus that allow the player to take different paths through the information.  \r\n\r\nThe only two benefits I can see of the API is having flags that can potentially tell Quest when a video is done playing, so some other action can be take based on that trigger.  The second being the ability to pass array of video id's into the API and have it play them like a playlist.  \r\n\r\nThe first, I don't think quest can do for me, other than using timers to estimate how long a person would take to watch a video based on clip length and a buffer.\r\n\r\nThe second I can use String lists and switch case statements and flags and timers and waits or some combination of features to load the videos one by one from a string list using the ShowYoutbe() function.   Cumbersome and probably going to bog down the engine if the playlists get to big.\r\n\r\nOtherwise, the API isn't overly useful at this point.",
      "EditableFormat": "markdown",
      "HTML": "<p>I still don't understand what this is supposed to do for me.  The more I play with this, the more it feels like I am just throwing code into a black hole.</p>\n<p>I am starting to remember why I always disliked programming, too many levels of abstraction that aren't relevant to the language used to produce the results.</p>\n<p>I almost need to have an actual conversation with someone about the capabilities of Quest and what I would like to produce so I get understand how to proceed.</p>\n<p>And having to reload the website every time there is a problem with the code, or error messages that don't clarify the error, it feels like I keep walking into the same glass wall.</p>\n<p>I have no desire to create complex environments for players to interact with, I don't want to write long stretches of story for the player to read.</p>\n<p>I just want to load YouTube video clips, images, and perhaps some menus that allow the player to take different paths through the information.</p>\n<p>The only two benefits I can see of the API is having flags that can potentially tell Quest when a video is done playing, so some other action can be take based on that trigger.  The second being the ability to pass array of video id's into the API and have it play them like a playlist.</p>\n<p>The first, I don't think quest can do for me, other than using timers to estimate how long a person would take to watch a video based on clip length and a buffer.</p>\n<p>The second I can use String lists and switch case statements and flags and timers and waits or some combination of features to load the videos one by one from a string list using the ShowYoutbe() function.   Cumbersome and probably going to bog down the engine if the playlists get to big.</p>\n<p>Otherwise, the API isn't overly useful at this point.</p>\n\n",
      "PostDate": "2018-12-02T03:59:02.2146129Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4590dd75-6c30-459c-bb6a-abad54077f29",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The only two benefits I can see of the API is having flags that can potentially tell Quest when a video is done playing, so some other action can be take based on that trigger.\r\n\r\nLooks easy enough. The API's state change event is called whenever a video player changes state; with the valid states being: Paused, Buffering, Cued, Playing, and Ended. You could use this to trigger an ASLEvent if you want the javascript to notify Quest that the video has finished.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The only two benefits I can see of the API is having flags that can potentially tell Quest when a video is done playing, so some other action can be take based on that trigger.</p>\n</blockquote>\n<p>Looks easy enough. The API's state change event is called whenever a video player changes state; with the valid states being: Paused, Buffering, Cued, Playing, and Ended. You could use this to trigger an ASLEvent if you want the javascript to notify Quest that the video has finished.</p>\n\n",
      "PostDate": "2018-12-02T09:03:59.3587361Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b5304a33-a11d-4350-8b01-a9c713bc7cfb",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ok. The problem I am having is getting a player window to show using the API.  \r\n\r\nAll the code I try doesn't bring up a window.  \r\n\r\ndo I need to run any changes to my game's HTML with this?   \r\nSeems from looking at how other people are using the API on their sites, they open their code with a <div> </div>  element that creates the space for the Iframe to function in.\r\n\r\nWill Quest handle this form me?  Or do I need to implement my own CSS and HTML as well as Javascript.  \r\n\r\nI see here\r\nhttp://docs.textadventures.co.uk/quest/ui-custom.html\r\n\r\nThat I can use JS.setCss and perhaps some other JS functions.\r\n\r\nand \r\nhttp://docs.textadventures.co.uk/quest/ui-callback.html\r\n\r\nfor ASLEvent callbacks.\r\n\r\nRight at the moment, I am not getting a window to pop up.\r\n\r\nhere is the mess of sample code I am playing with\r\n```\r\nJS.eval (\"$(var player; function (){  onYouTubeIframeAPIReady = function () { player = new YT.Player('player', {\r\n      height: '390',\r\n      width: '640',\r\n      videoId: 'M7lc1UVf-VE',\r\n      events: {\r\n        'onReady': onPlayerReady,\r\n        'onStateChange': onPlayerStateChange\r\n      }\r\n    }\r\n    ); }\r\n  function onPlayerReady(event) {\r\n    event.target.playVideo();\r\n  }\r\n    ;  $('<script>', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');});\")\r\n```\r\nfollowing error, I am sure the formatting of my code is troublesome, just a quick copy and paste to test if it works.\r\n```\r\nError: Error adding script attribute 'script' to element 'youtubeTest': Missing quote character in ; $('\r\n ```\r\n\r\nI have the code in a function called youtubeTest which is called from the videos object with a verb called explore. \r\n\r\nThis is going to be a learning curve, but hopefully once I get over this hump, I can start building something interesting and fun, at least for me.",
      "EditableFormat": "markdown",
      "HTML": "<p>ok. The problem I am having is getting a player window to show using the API.</p>\n<p>All the code I try doesn't bring up a window.</p>\n<p>do I need to run any changes to my game's HTML with this?<br>\nSeems from looking at how other people are using the API on their sites, they open their code with a </p><div> </div>  element that creates the space for the Iframe to function in.<p></p>\n<p>Will Quest handle this form me?  Or do I need to implement my own CSS and HTML as well as Javascript.</p>\n<p>I see here<br>\nhttp://docs.textadventures.co.uk/quest/ui-custom.html</p>\n<p>That I can use JS.setCss and perhaps some other JS functions.</p>\n<p>and<br>\nhttp://docs.textadventures.co.uk/quest/ui-callback.html</p>\n<p>for ASLEvent callbacks.</p>\n<p>Right at the moment, I am not getting a window to pop up.</p>\n<p>here is the mess of sample code I am playing with</p>\n<pre><code>JS.eval (\"$(var player; function (){  onYouTubeIframeAPIReady = function () { player = new YT.Player('player', {\n      height: '390',\n      width: '640',\n      videoId: 'M7lc1UVf-VE',\n      events: {\n        'onReady': onPlayerReady,\n        'onStateChange': onPlayerStateChange\n      }\n    }\n    ); }\n  function onPlayerReady(event) {\n    event.target.playVideo();\n  }\n    ;  $('&lt;script&gt;', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');});\")\n</code></pre>\n<p>following error, I am sure the formatting of my code is troublesome, just a quick copy and paste to test if it works.</p>\n<pre><code>Error: Error adding script attribute 'script' to element 'youtubeTest': Missing quote character in ; $('\n</code></pre>\n<p>I have the code in a function called youtubeTest which is called from the videos object with a verb called explore.</p>\n<p>This is going to be a learning curve, but hopefully once I get over this hump, I can start building something interesting and fun, at least for me.</p>\n\n",
      "PostDate": "2018-12-02T19:58:29.4246234Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ffadbb63-29b0-4bad-bd2d-04dff8c2a3dc",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Your ```JS.eval()``` code has to all be on the same line.\r\n\r\nIf you have those line breaks in the code, Quest will get very confused.\r\n\r\n---\r\nYou could also try creating a room and pasting your JS code into the description, to be converted by ```JS.eval()``` in your user interface initialisation script, as mrangel suggests here:\r\n\r\n>My favourite way to make it easier to play with javascript is this UI Initialisation script:\r\n```\r\nforeach (jsobj, AllRooms()) {\r\n  if (StartsWith (jsobj.name, \"JS_\")) {\r\n    if (HasString (jsobj, \"description\")) {\r\n      jstring = jsobj.description\r\n      jstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\r\n      jstring = Replace(jstring,\"«\",Chr(60))\r\n      jstring = Replace(jstring,\"»\",Chr(62))\r\n      JS.eval (jstring)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n>This means that any rooms with \"JS_\" at the start of their names will have their descriptions treated as javascript and sent to the browser. Just use « and » in place of < and > within the code, to avoid the editor mangling it.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Your <code>JS.eval()</code> code has to all be on the same line.</p>\n<p>If you have those line breaks in the code, Quest will get very confused.</p>\n<hr>\n<p>You could also try creating a room and pasting your JS code into the description, to be converted by <code>JS.eval()</code> in your user interface initialisation script, as mrangel suggests here:</p>\n<blockquote>\n<p>My favourite way to make it easier to play with javascript is this UI Initialisation script:</p>\n</blockquote>\n<pre><code>foreach (jsobj, AllRooms()) {\n  if (StartsWith (jsobj.name, \"JS_\")) {\n    if (HasString (jsobj, \"description\")) {\n      jstring = jsobj.description\n      jstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\n      jstring = Replace(jstring,\"«\",Chr(60))\n      jstring = Replace(jstring,\"»\",Chr(62))\n      JS.eval (jstring)\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p>This means that any rooms with \"JS_\" at the start of their names will have their descriptions treated as javascript and sent to the browser. Just use « and » in place of &lt; and &gt; within the code, to avoid the editor mangling it.</p>\n</blockquote>\n\n",
      "PostDate": "2018-12-02T20:21:04.7881638Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "93140d2a-a030-4058-86d0-a77dcaa12bc0",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I can also do this with objects and their descriptions, or just rooms?  Say I wanted to use the videos object as the place where I put this code, or any other non-room object \r\n(say things I place on the walls of the room, like little cubes that activate as a sequence of events is completed, like a puzzle. I could use an examine verb to activate a video playback as long as the smartphone is equipped?)\r\n\r\n And what about the code format?\r\nDo I need to put the various API functions each in their own JS.eval () call?\r\n\r\nAnd as far as the code, I should store it in a variable? \r\nsomething like this from here, \r\nhttp://docs.textadventures.co.uk/quest/ui-javascript3.html\r\nJust put the entire function code I want to call inside some variable so it doesn't upset the Quest compiler?\r\n\r\n```\r\ns = \"$('#gamePanesFinished').html('<h2>Game Over</h2>\"\r\ns = s + \"<p>This game has finished and you are dead!</p>\"\r\ns = s + \"<img src=\\\"\" + GetFileURL(\"gravestone.png\") + \"\\\" />\"\r\ns = s + \"');\"\r\nJS.eval (s)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>So I can also do this with objects and their descriptions, or just rooms?  Say I wanted to use the videos object as the place where I put this code, or any other non-room object<br>\n(say things I place on the walls of the room, like little cubes that activate as a sequence of events is completed, like a puzzle. I could use an examine verb to activate a video playback as long as the smartphone is equipped?)</p>\n<p>And what about the code format?<br>\nDo I need to put the various API functions each in their own JS.eval () call?</p>\n<p>And as far as the code, I should store it in a variable?<br>\nsomething like this from here,<br>\nhttp://docs.textadventures.co.uk/quest/ui-javascript3.html<br>\nJust put the entire function code I want to call inside some variable so it doesn't upset the Quest compiler?</p>\n<pre><code>s = \"$('#gamePanesFinished').html('&lt;h2&gt;Game Over&lt;/h2&gt;\"\ns = s + \"&lt;p&gt;This game has finished and you are dead!&lt;/p&gt;\"\ns = s + \"&lt;img src=\\\"\" + GetFileURL(\"gravestone.png\") + \"\\\" /&gt;\"\ns = s + \"');\"\nJS.eval (s)\n</code></pre>\n\n",
      "PostDate": "2018-12-02T21:32:34.352495Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fad1b72b-23d0-4dd9-8895-e8b7451fffee",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So I can also do this with objects and their descriptions, or just rooms?\r\n\r\nI used rooms because they have a description field which gives you a big textbox, large enough for putting javascript in.\r\nNote that these are not rooms the player can enter; they are just containers for a large piece of javascript. They exist just so that you can have a large chunk of code in a string without having to paste `s = s + \"` at the start of every line.\r\n\r\n> Do I need to put the various API functions each in their own JS.eval () call?\r\n\r\nThere's a chance that could lead to some odd errors; I've not looked into this particular API in much depth, but in most cases you're better putting all the related javascript functions in one script.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So I can also do this with objects and their descriptions, or just rooms?</p>\n</blockquote>\n<p>I used rooms because they have a description field which gives you a big textbox, large enough for putting javascript in.<br>\nNote that these are not rooms the player can enter; they are just containers for a large piece of javascript. They exist just so that you can have a large chunk of code in a string without having to paste <code>s = s + \"</code> at the start of every line.</p>\n<blockquote>\n<p>Do I need to put the various API functions each in their own JS.eval () call?</p>\n</blockquote>\n<p>There's a chance that could lead to some odd errors; I've not looked into this particular API in much depth, but in most cases you're better putting all the related javascript functions in one script.</p>\n\n",
      "PostDate": "2018-12-03T03:08:53.4737572Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "53a54620-f126-4e41-8ff3-398200fb322d",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have tried this with « » and < >, the only thing I get is an empty iframe when I use iframe in the room description with < >.\r\nWhat ever Quest is setup to do to code is like dealing with QuakeC in the early days of Quake modding, when there was no documentation and nothing made sense in the console.\r\nI have this code in the   \r\ngame start up init\r\n```\r\nif (StartsWith (jsobj.name, \"JS_\")) {\r\n  if (HasString (jsobj, \"description\")) {\r\n    jstring = jsobj.description\r\n    jstring = Replace(jstring,Chr(60) + \"br/\" + Chr(62), \"\\n\")\r\n    jstring = Replace(jstring,\"«\", Chr(60))\r\n    jstring = Replace(jstring,\"»\", Chr(62))\r\n    JS.eval (jstring)\r\n  }\r\n}\r\n```\r\n\r\nNothing else works, even with the above foreach (){} that evaluates the room description and runs it in a JS.eval(jstring).  I have put that code in a function that is called with I look at a room description, and in the game init script.  Nothing happens.  There is no YouTube iframe player loaded, only this empty box, as below, AND ONLY when I leave the iframe inline in the description as it is here.\r\n\r\nthis was encouraging for a moment, until I realized that it was just parsing the HTML and nothing was running the Java script.\r\nBut, it seems promising.  IF I can set this up so that the  player can look at different 'rooms' like an Alternate Reality overlay with Google Glasses, that would be cool.  But so far, nothing is working.\r\nThis is what is now in the JS_functionCallTest look at room description \r\nJust trying to see if I can get anything else to work, and nothing.\r\n\r\n\r\n```\r\nmsg(\"fuckme')\r\nJS.eval(){\r\n<iframe>\r\n<div id=\"player\"></div>\r\n\r\n    <script>\r\n      // 2. This code loads the IFrame Player API code asynchronously.\r\n      var tag = document.createElement('script');\r\n\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      var firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n      // 3. This function creates an «iframe» (and YouTube player)\r\n      //    after the API code downloads.\r\n      var player;\r\n      function onYouTubeIframeAPIReady() {\r\n        player = new YT.Player('player', {\r\n          height: '390',\r\n          width: '640',\r\n          videoId: 'M7lc1UVf-VE',\r\n          events: {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n          }\r\n        });\r\n      }\r\n\r\n      // 4. The API will call this function when the video player is ready.\r\n      function onPlayerReady(event) {\r\n        event.target.playVideo();\r\n      }\r\n\r\n      // 5. The API calls this function when the player's state changes.\r\n      //    The function indicates that when playing a video (state=1),\r\n      //    the player should play for six seconds and then stop.\r\n      var done = false;\r\n      function onPlayerStateChange(event) {\r\n        if (event.data == YT.PlayerState.PLAYING && !done) {\r\n          setTimeout(stopVideo, 6000);\r\n          done = true;\r\n        }\r\n      }\r\n      function stopVideo() {\r\n        player.stopVideo();\r\n      }\r\n    </script>\r\n</iframe>\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I have tried this with « » and &lt; &gt;, the only thing I get is an empty iframe when I use iframe in the room description with &lt; &gt;.<br>\nWhat ever Quest is setup to do to code is like dealing with QuakeC in the early days of Quake modding, when there was no documentation and nothing made sense in the console.<br>\nI have this code in the<br>\ngame start up init</p>\n<pre><code>if (StartsWith (jsobj.name, \"JS_\")) {\n  if (HasString (jsobj, \"description\")) {\n    jstring = jsobj.description\n    jstring = Replace(jstring,Chr(60) + \"br/\" + Chr(62), \"\\n\")\n    jstring = Replace(jstring,\"«\", Chr(60))\n    jstring = Replace(jstring,\"»\", Chr(62))\n    JS.eval (jstring)\n  }\n}\n</code></pre>\n<p>Nothing else works, even with the above foreach (){} that evaluates the room description and runs it in a JS.eval(jstring).  I have put that code in a function that is called with I look at a room description, and in the game init script.  Nothing happens.  There is no YouTube iframe player loaded, only this empty box, as below, AND ONLY when I leave the iframe inline in the description as it is here.</p>\n<p>this was encouraging for a moment, until I realized that it was just parsing the HTML and nothing was running the Java script.<br>\nBut, it seems promising.  IF I can set this up so that the  player can look at different 'rooms' like an Alternate Reality overlay with Google Glasses, that would be cool.  But so far, nothing is working.<br>\nThis is what is now in the JS_functionCallTest look at room description<br>\nJust trying to see if I can get anything else to work, and nothing.</p>\n<pre><code>msg(\"fuckme')\nJS.eval(){\n&lt;iframe&gt;\n&lt;div id=\"player\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n      // 2. This code loads the IFrame Player API code asynchronously.\n      var tag = document.createElement('script');\n\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n      // 3. This function creates an «iframe» (and YouTube player)\n      //    after the API code downloads.\n      var player;\n      function onYouTubeIframeAPIReady() {\n        player = new YT.Player('player', {\n          height: '390',\n          width: '640',\n          videoId: 'M7lc1UVf-VE',\n          events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange\n          }\n        });\n      }\n\n      // 4. The API will call this function when the video player is ready.\n      function onPlayerReady(event) {\n        event.target.playVideo();\n      }\n\n      // 5. The API calls this function when the player's state changes.\n      //    The function indicates that when playing a video (state=1),\n      //    the player should play for six seconds and then stop.\n      var done = false;\n      function onPlayerStateChange(event) {\n        if (event.data == YT.PlayerState.PLAYING &amp;&amp; !done) {\n          setTimeout(stopVideo, 6000);\n          done = true;\n        }\n      }\n      function stopVideo() {\n        player.stopVideo();\n      }\n    &lt;/script&gt;\n&lt;/iframe&gt;\n}\n</code></pre>\n\n",
      "PostDate": "2018-12-03T17:45:23.3911082Z",
      "LastEditDate": "2018-12-03T17:47:35.069025Z",
      "link": null
    },
    {
      "PostId": "02b03496-d929-4718-a6b1-b21ebf9ca0bf",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You've got syntax issues, but we'll get to those in a moment.\r\n\r\n---\r\nAre you making a gamebook or a text adventure?",
      "EditableFormat": "markdown",
      "HTML": "<p>You've got syntax issues, but we'll get to those in a moment.</p>\n<hr>\n<p>Are you making a gamebook or a text adventure?</p>\n\n",
      "PostDate": "2018-12-03T18:26:52.5808953Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "004f842f-57cd-4259-94f5-9423dc6c13db",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "text adventure. \r\n\r\nAt this point, I am just copying and pasting code from the youtube iframe api site, because I don't have a step through debugger, maybe I can use the chrome inspect element, but that seems cumbersome, and I don't understand what changes need to be made to fit within the confines of the Quest engine.",
      "EditableFormat": "markdown",
      "HTML": "<p>text adventure.</p>\n<p>At this point, I am just copying and pasting code from the youtube iframe api site, because I don't have a step through debugger, maybe I can use the chrome inspect element, but that seems cumbersome, and I don't understand what changes need to be made to fit within the confines of the Quest engine.</p>\n\n",
      "PostDate": "2018-12-03T19:22:54.6653948Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "812c4324-8e86-4357-9f24-51c3e00d28be",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is how I got it to do something (not 100% sure it's exactly what you want it to do):\r\n\r\n**STEP 1**\r\n\r\nCreate a room.  Name it ```YouTubeAPI```\r\n\r\n**NOTE**\r\n\r\nBefore we proceed any further, note that any time we put ``//`` in Javascript, that comments out the rest of that line of code.  When using ```JS.eval()``` in Quest, we must feed that function a string parameter (which is exactly 1 line of code long).  mrangel has a script to convert JS that is not written inline to a string which Quest can process (which is accomplished by removing the line breaks).  Therefore, the first line of code in that Javascript script will comment out the <u>entire script</u>, unless we format it differently.\r\n\r\nWhere they have: ```// comment here```, I have changed it to ```/* comment here */```.  This leaves the notes intact, but only comments out the text between ```/*``` and ```*/```.\r\n\r\nSo, back to it:\r\n\r\n**STEP 2**\r\n\r\nClick on the \"Room\" tab, and paste this into the text field (note that I have fixed all the comments as described above):\r\n\r\n```\r\n       /* 2. This code loads the IFrame Player API code asynchronously. */\r\n      var tag = document.createElement('script');\r\n\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      var firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n      /*3. This function creates an <iframe> (and YouTube player) */\r\n      /*  after the API code downloads. */\r\n      var player;\r\n      function onYouTubeIframeAPIReady() {\r\n        player = new YT.Player('player', {\r\n          height: '390',\r\n          width: '640',\r\n          videoId: 'M7lc1UVf-VE',\r\n          events: {\r\n            'onReady': onPlayerReady,\r\n            'onStateChange': onPlayerStateChange\r\n          }\r\n        });\r\n      }\r\n\r\n      /* 4. The API will call this function when the video player is ready. */\r\n      function onPlayerReady(event) {\r\n        event.target.playVideo();\r\n      }\r\n\r\n      /* 5. The API calls this function when the player's state changes. */\r\n      /*    The function indicates that when playing a video (state=1), */\r\n      /*    the player should play for six seconds and then stop. */\r\n      var done = false;\r\n      function onPlayerStateChange(event) {\r\n        if (event.data == YT.PlayerState.PLAYING && !done) {\r\n          setTimeout(stopVideo, 6000);\r\n          done = true;\r\n        }\r\n      }\r\n      function stopVideo() {\r\n        player.stopVideo();\r\n      }\r\n```\r\n\r\n---\r\nAt this point, it should look something very much like this:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49395911-65360d00-f6fd-11e8-8444-47a38fa32c21.png)\r\n\r\n---\r\n**STEP 3**\r\n\r\nCreate a new function, and name it ```SetupYouTubeAPI```\r\n\r\nClick on \"Code View\" and paste this in:\r\n\r\n```\r\nmsg (Chr(60) + \"div id=\\\"player\\\">\"+Chr(60)+\"/div>\")\r\njstring = YouTubeAPI.description\r\njstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\r\njstring = Replace(jstring,\"«\",Chr(60))\r\njstring = Replace(jstring,\"»\",Chr(62))\r\nJS.eval (jstring)\r\n```\r\n\r\n---\r\nThat should look like this with Code View still open after pasting:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49396789-97486e80-f6ff-11e8-825e-11615e877a78.png)\r\n\r\n---\r\nAfter you click \"OK\", it will look like this:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49396731-7849dc80-f6ff-11e8-8d7c-dba35cd633d4.png)\r\n\r\n---\r\n**STEP 4**\r\n\r\nThis is the part where we call that function to open a video.\r\n\r\nI'm not sure how your stuff is set up, so I'm just going to create a TEST command which will call that function.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49396324-74698a80-f6fe-11e8-801f-d67b358aa7f7.png)\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/49396283-5ef46080-f6fe-11e8-832e-af40e1e17e3a.png)\r\n\r\n---\r\n**NOW FOR A TEST DRIVE**\r\n\r\nStart the game and enter the command **TEST** once play begins.\r\n\r\nhttps://play2.textadventures.co.uk/Play.aspx?id=editor/f3dba380-af21-429e-a87f-36ab5a8a8154%2fYouTube+API+Example+Game.aslx\r\n\r\n---\r\nALSO NOTE:\r\n\r\nI did not use mrangel's method (calling the JS from the UI Init script) because I don't know if you want the video to load when play begins.",
      "EditableFormat": "markdown",
      "HTML": "<p>This is how I got it to do something (not 100% sure it's exactly what you want it to do):</p>\n<p><strong>STEP 1</strong></p>\n<p>Create a room.  Name it <code>YouTubeAPI</code></p>\n<p><strong>NOTE</strong></p>\n<p>Before we proceed any further, note that any time we put <code>//</code> in Javascript, that comments out the rest of that line of code.  When using <code>JS.eval()</code> in Quest, we must feed that function a string parameter (which is exactly 1 line of code long).  mrangel has a script to convert JS that is not written inline to a string which Quest can process (which is accomplished by removing the line breaks).  Therefore, the first line of code in that Javascript script will comment out the <u>entire script</u>, unless we format it differently.</p>\n<p>Where they have: <code>// comment here</code>, I have changed it to <code>/* comment here */</code>.  This leaves the notes intact, but only comments out the text between <code>/*</code> and <code>*/</code>.</p>\n<p>So, back to it:</p>\n<p><strong>STEP 2</strong></p>\n<p>Click on the \"Room\" tab, and paste this into the text field (note that I have fixed all the comments as described above):</p>\n<pre><code>       /* 2. This code loads the IFrame Player API code asynchronously. */\n      var tag = document.createElement('script');\n\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n      /*3. This function creates an &lt;iframe&gt; (and YouTube player) */\n      /*  after the API code downloads. */\n      var player;\n      function onYouTubeIframeAPIReady() {\n        player = new YT.Player('player', {\n          height: '390',\n          width: '640',\n          videoId: 'M7lc1UVf-VE',\n          events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange\n          }\n        });\n      }\n\n      /* 4. The API will call this function when the video player is ready. */\n      function onPlayerReady(event) {\n        event.target.playVideo();\n      }\n\n      /* 5. The API calls this function when the player's state changes. */\n      /*    The function indicates that when playing a video (state=1), */\n      /*    the player should play for six seconds and then stop. */\n      var done = false;\n      function onPlayerStateChange(event) {\n        if (event.data == YT.PlayerState.PLAYING &amp;&amp; !done) {\n          setTimeout(stopVideo, 6000);\n          done = true;\n        }\n      }\n      function stopVideo() {\n        player.stopVideo();\n      }\n</code></pre>\n<hr>\n<p>At this point, it should look something very much like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49395911-65360d00-f6fd-11e8-8444-47a38fa32c21.png\" alt=\"image\"></p>\n<hr>\n<p><strong>STEP 3</strong></p>\n<p>Create a new function, and name it <code>SetupYouTubeAPI</code></p>\n<p>Click on \"Code View\" and paste this in:</p>\n<pre><code>msg (Chr(60) + \"div id=\\\"player\\\"&gt;\"+Chr(60)+\"/div&gt;\")\njstring = YouTubeAPI.description\njstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\njstring = Replace(jstring,\"«\",Chr(60))\njstring = Replace(jstring,\"»\",Chr(62))\nJS.eval (jstring)\n</code></pre>\n<hr>\n<p>That should look like this with Code View still open after pasting:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49396789-97486e80-f6ff-11e8-825e-11615e877a78.png\" alt=\"image\"></p>\n<hr>\n<p>After you click \"OK\", it will look like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49396731-7849dc80-f6ff-11e8-8d7c-dba35cd633d4.png\" alt=\"image\"></p>\n<hr>\n<p><strong>STEP 4</strong></p>\n<p>This is the part where we call that function to open a video.</p>\n<p>I'm not sure how your stuff is set up, so I'm just going to create a TEST command which will call that function.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49396324-74698a80-f6fe-11e8-801f-d67b358aa7f7.png\" alt=\"image\"></p>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49396283-5ef46080-f6fe-11e8-832e-af40e1e17e3a.png\" alt=\"image\"></p>\n<hr>\n<p><strong>NOW FOR A TEST DRIVE</strong></p>\n<p>Start the game and enter the command <strong>TEST</strong> once play begins.</p>\n<p>https://play2.textadventures.co.uk/Play.aspx?id=editor/f3dba380-af21-429e-a87f-36ab5a8a8154%2fYouTube+API+Example+Game.aslx</p>\n<hr>\n<p>ALSO NOTE:</p>\n<p>I did not use mrangel's method (calling the JS from the UI Init script) because I don't know if you want the video to load when play begins.</p>\n\n",
      "PostDate": "2018-12-03T19:35:31.4870664Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f650cce4-1e75-4372-ae88-384883b8cc77",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you K.V. it is something I can work with.  \r\n\r\nI will play with it some more today.  \r\n\r\nTomorrow morning I am being dropped off in Terlingua, a small ghost town that has grown into a small community in recent decades.  Great place to be homeless it seems, I will figure it out.   https://www.google.com/maps/place/Terlingua,+TX+79852/@29.3215855,-103.6160191,15z/data=!3m1!4b1!4m5!3m4!1s0x86edf9745881eb03:0x134b70c0b975c160!8m2!3d29.321586!4d-103.6160191?hl=en\r\n\r\nSo, I may not be playing with this as much until I get myself settled in my new place. \r\n\r\nThe life of an itinerate philosopher.   (let's be honest, vagabond) \r\n\r\nSo, hopefully my next post here is a success story and the game can begin growing.  \r\n\r\nOne Question\r\n```\r\nAs this develops, I am going to want to be able to make function calls from quest, or pass StringLists of video ids, while inside the JS.eval() script.  This will allow for changes in video playlists, and other features.  Is that all going to be through the ASLEvent code?\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you K.V. it is something I can work with.</p>\n<p>I will play with it some more today.</p>\n<p>Tomorrow morning I am being dropped off in Terlingua, a small ghost town that has grown into a small community in recent decades.  Great place to be homeless it seems, I will figure it out.   https://www.google.com/maps/place/Terlingua,+TX+79852/@29.3215855,-103.6160191,15z/data=!3m1!4b1!4m5!3m4!1s0x86edf9745881eb03:0x134b70c0b975c160!8m2!3d29.321586!4d-103.6160191?hl=en</p>\n<p>So, I may not be playing with this as much until I get myself settled in my new place.</p>\n<p>The life of an itinerate philosopher.   (let's be honest, vagabond)</p>\n<p>So, hopefully my next post here is a success story and the game can begin growing.</p>\n<p>One Question</p>\n<pre><code>As this develops, I am going to want to be able to make function calls from quest, or pass StringLists of video ids, while inside the JS.eval() script.  This will allow for changes in video playlists, and other features.  Is that all going to be through the ASLEvent code?\n</code></pre>\n\n",
      "PostDate": "2018-12-03T19:45:51.1272566Z",
      "LastEditDate": "2018-12-03T19:46:34.4120396Z",
      "link": null
    },
    {
      "PostId": "2c551476-c048-4ee8-b71a-d75c5514bb8e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> As this develops, I am going to want to be able to make function calls from quest, or pass StringLists of video ids, while inside the JS.eval() script.  This will allow for changes in video playlists, and other features.  Is that all going to be through the ASLEvent code?\r\n\r\nMmm...  Theoretically, but, honestly, that is some of the most complicated stuff one could attempt in the online editor.\r\n\r\nIf I were starting with, let's say, video 1, and the player had to watch that before getting access to video 2, I would handle all of this completely differently.\r\n\r\nI would probably make two out-of-play objects (out-of-play: meaning not found in any location during play), and I would put video objects inside of those.\r\n\r\nI would have ```playlist_object``` and ```video_archive```.  (The names don't really matter.  Name them whatever.)  These are the two out-of-play objects which hold the videos.\r\n\r\nFor the first video, I would create an object named ```video1```.  For its description, I would use this for the script (substituting the proper video ID):\r\n```\r\nShowYouTube (\"M7lc1UVf-VE\")\r\n```\r\n\r\n---\r\nWhoops.  Sorry about that.  I work in Code View...\r\n\r\nThat looks like this in the GUI:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49398283-771aae80-f703-11e8-94fa-8e1f1c655431.png)\r\n\r\n---\r\nNow, put ```video1``` inside of ```playlist_object```.\r\n\r\nBasically, every video inside of ```playlist_object``` can be watched during play.  The video objects inside of ```video_archive``` cannot be accessed by the player.  Once the player reaches a point where ```video2``` is unlocked, we can just move ```video2``` from ```video_archive``` to ```playlist_object```, like so:\r\n\r\n```\r\nMoveObject (video2, playlist_object)\r\n```\r\n\r\n---\r\nFrom there, it depends upon how you have things set up.\r\n\r\nIf the player is using an in-game phone object to access these videos, you could just rename ```playlist_object``` to ```Video Directory``` or something like that.  Make the phone a container.  Make ```Video Directory``` a container which is inside of the phone object, and when the player enters X VIDEO DIRECTORY, it would show a list of all the videos inside of it.  Then the player could just enter X VIDEO1  or X VIDEO2.\r\n\r\n---\r\nThere are probably more than 100 ways to do it, but, if you want to keep up with which videos get watched to add videos to the game, I'd suggest something more like what I just described.  All that Javascript (with YouTubeAPI) will probably end up driving you completely insane, even if you are already fluent in JS and Quest.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>As this develops, I am going to want to be able to make function calls from quest, or pass StringLists of video ids, while inside the JS.eval() script.  This will allow for changes in video playlists, and other features.  Is that all going to be through the ASLEvent code?</p>\n</blockquote>\n<p>Mmm...  Theoretically, but, honestly, that is some of the most complicated stuff one could attempt in the online editor.</p>\n<p>If I were starting with, let's say, video 1, and the player had to watch that before getting access to video 2, I would handle all of this completely differently.</p>\n<p>I would probably make two out-of-play objects (out-of-play: meaning not found in any location during play), and I would put video objects inside of those.</p>\n<p>I would have <code>playlist_object</code> and <code>video_archive</code>.  (The names don't really matter.  Name them whatever.)  These are the two out-of-play objects which hold the videos.</p>\n<p>For the first video, I would create an object named <code>video1</code>.  For its description, I would use this for the script (substituting the proper video ID):</p>\n<pre><code>ShowYouTube (\"M7lc1UVf-VE\")\n</code></pre>\n<hr>\n<p>Whoops.  Sorry about that.  I work in Code View...</p>\n<p>That looks like this in the GUI:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49398283-771aae80-f703-11e8-94fa-8e1f1c655431.png\" alt=\"image\"></p>\n<hr>\n<p>Now, put <code>video1</code> inside of <code>playlist_object</code>.</p>\n<p>Basically, every video inside of <code>playlist_object</code> can be watched during play.  The video objects inside of <code>video_archive</code> cannot be accessed by the player.  Once the player reaches a point where <code>video2</code> is unlocked, we can just move <code>video2</code> from <code>video_archive</code> to <code>playlist_object</code>, like so:</p>\n<pre><code>MoveObject (video2, playlist_object)\n</code></pre>\n<hr>\n<p>From there, it depends upon how you have things set up.</p>\n<p>If the player is using an in-game phone object to access these videos, you could just rename <code>playlist_object</code> to <code>Video Directory</code> or something like that.  Make the phone a container.  Make <code>Video Directory</code> a container which is inside of the phone object, and when the player enters X VIDEO DIRECTORY, it would show a list of all the videos inside of it.  Then the player could just enter X VIDEO1  or X VIDEO2.</p>\n<hr>\n<p>There are probably more than 100 ways to do it, but, if you want to keep up with which videos get watched to add videos to the game, I'd suggest something more like what I just described.  All that Javascript (with YouTubeAPI) will probably end up driving you completely insane, even if you are already fluent in JS and Quest.</p>\n\n",
      "PostDate": "2018-12-03T20:06:36.930295Z",
      "LastEditDate": "2018-12-03T20:12:48.8949006Z",
      "link": null
    },
    {
      "PostId": "ce8248f3-ecd2-418b-83c3-20018c9d03db",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "don't sweat the screen shots, I only work in code view, the GUI is a lost slower. \r\n\r\nCooking a last dinner here at this old fort/WWII POW camp officers headquarters in Marfa texas.  \r\n\r\nThe API is so that I can trigger events based on video viewing.  Because there are going to be entire playlists, and perhaps I can get a picture to show up at a certain time when the video is playing, slow down playback to highlight something, there are a lot of benefits to having the API. \r\n\r\nCall it code camp.  \r\n\r\nThanks again!\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>don't sweat the screen shots, I only work in code view, the GUI is a lost slower.</p>\n<p>Cooking a last dinner here at this old fort/WWII POW camp officers headquarters in Marfa texas.</p>\n<p>The API is so that I can trigger events based on video viewing.  Because there are going to be entire playlists, and perhaps I can get a picture to show up at a certain time when the video is playing, slow down playback to highlight something, there are a lot of benefits to having the API.</p>\n<p>Call it code camp.</p>\n<p>Thanks again!</p>\n\n",
      "PostDate": "2018-12-03T23:57:54.6343405Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4737ba37-6bb8-4e41-a397-dea4790aaca2",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think I have the gist of ASLEvents figured out, and now that the YouTube player is working, I can mess around inside this framework to make something that sparkles, hopefully.  And now that I have an understanding of how to leverage Quest objects to run Javascript API, it might get interesting.\r\n\r\nI created a function testASLEvent(test_) that takes on parameter\r\n```\r\nmsg (test_)\r\n```\r\n\r\n```\r\n  /* 4. The API will call this function when the video player is ready. */\r\n      function onPlayerReady(event) {\r\n        event.target.playVideo();\r\n      var test = \"bing bong\";  <- something to display\r\n      ASLEvent(\"testASLEvent\", test); <- call ASLEvent\r\n      }\r\n```\r\n\r\nRan the test and got the video and a bing bong.\r\n\r\nCheers.  Something to think about now.  I will probably use an extended version of your idea of having a video repository object that holds lists of videos, and another object that deals with currently cued videos.  \r\n\r\nA quest game can only be 20MB?  I don't think this little bit of code is going to become a problem, but that is good to know.\r\n\r\nThanks again K.V.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think I have the gist of ASLEvents figured out, and now that the YouTube player is working, I can mess around inside this framework to make something that sparkles, hopefully.  And now that I have an understanding of how to leverage Quest objects to run Javascript API, it might get interesting.</p>\n<p>I created a function testASLEvent(test_) that takes on parameter</p>\n<pre><code>msg (test_)\n</code></pre>\n<pre><code>  /* 4. The API will call this function when the video player is ready. */\n      function onPlayerReady(event) {\n        event.target.playVideo();\n      var test = \"bing bong\";  &lt;- something to display\n      ASLEvent(\"testASLEvent\", test); &lt;- call ASLEvent\n      }\n</code></pre>\n<p>Ran the test and got the video and a bing bong.</p>\n<p>Cheers.  Something to think about now.  I will probably use an extended version of your idea of having a video repository object that holds lists of videos, and another object that deals with currently cued videos.</p>\n<p>A quest game can only be 20MB?  I don't think this little bit of code is going to become a problem, but that is good to know.</p>\n<p>Thanks again K.V.</p>\n\n",
      "PostDate": "2018-12-04T04:05:36.3197185Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "874427ec-a0ba-4fce-9bcb-feb9b2d4abec",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Running more tests,\r\n\r\nI added this a function called EditYouTubeAPI\r\n```\r\nClearScreen\r\njstring = YouTubeAPI.description\r\njstring = Replace(jstring, \"test = \\\"bing bong\\\"\", \"test = \\\"bong bing\\\"\")\r\nYouTubeAPI.description = jstring\r\n```\r\nand it replaces the variable assignment test here \r\n```\r\n /* 4. The API will call this function when the video player is ready. */\r\n      function onPlayerReady(event) {\r\n        event.target.playVideo();\r\n      var test = \"bing bong\"; \r\n      ASLEvent(\"testASLEvent\", test);\r\n      }\r\n```\r\n\r\nThis is the easiest way I know of to change a playlist.  I just need to convert a stringlist into the form needed for a playlist in the API.  I can work on that later. \r\n\r\nThe issue I am having, I can't get another iframe to start when I run test again.\r\n\r\nI can run it once, I get a video and the ASLEvent output, but I cannot use the test command again to load another video.\r\n\r\nI am going to have to think about this. because I am going to want to be able to call up another video at some point.  \r\n\r\nBut, when I type \r\ntest\r\na second time, the output in quest is blank.\r\n\r\nAny ideas?   Is the current iframe code running and preventing a new iframe from being created?\r\n\r\n  ",
      "EditableFormat": "markdown",
      "HTML": "<p>Running more tests,</p>\n<p>I added this a function called EditYouTubeAPI</p>\n<pre><code>ClearScreen\njstring = YouTubeAPI.description\njstring = Replace(jstring, \"test = \\\"bing bong\\\"\", \"test = \\\"bong bing\\\"\")\nYouTubeAPI.description = jstring\n</code></pre>\n<p>and it replaces the variable assignment test here</p>\n<pre><code> /* 4. The API will call this function when the video player is ready. */\n      function onPlayerReady(event) {\n        event.target.playVideo();\n      var test = \"bing bong\"; \n      ASLEvent(\"testASLEvent\", test);\n      }\n</code></pre>\n<p>This is the easiest way I know of to change a playlist.  I just need to convert a stringlist into the form needed for a playlist in the API.  I can work on that later.</p>\n<p>The issue I am having, I can't get another iframe to start when I run test again.</p>\n<p>I can run it once, I get a video and the ASLEvent output, but I cannot use the test command again to load another video.</p>\n<p>I am going to have to think about this. because I am going to want to be able to call up another video at some point.</p>\n<p>But, when I type<br>\ntest<br>\na second time, the output in quest is blank.</p>\n<p>Any ideas?   Is the current iframe code running and preventing a new iframe from being created?</p>\n\n",
      "PostDate": "2018-12-04T05:27:12.6138649Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b32b013d-6006-4b78-a4b8-27018515c0fa",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I looked up remove() for iframe \r\nfound this \r\nhttps://stackoverflow.com/questions/31808185/how-to-delete-html-elements-in-an-iframe-using-javascript\r\n\r\n```\r\nYou can use\r\n\r\n$(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\r\nIt is better to use remove()\r\n\r\nexample: $(\"#iFrameId\").contents().find(\"#yourDiv\").remove();\r\n\r\nExplaination\r\n\r\nempty() will remove all the contents of the selection.\r\n\r\nremove() will remove the selection and its contents and all the event handlers associated with it.\r\n\r\nFor reference: 1) http://api.jquery.com/remove/ 2) http://api.jquery.com/empty/\r\n```\r\n\r\nI also found this, so I can set the iframe id, but I would still need to set a div in my code to remove it it seems\r\nhttps://www.dyn-web.com/tutorials/iframes/dyn-gen/\r\n```\r\nvar ifrm = document.createElement('iframe');\r\nifrm.setAttribute('id', 'ifrm'); // assign an id\r\n\r\n//document.body.appendChild(ifrm); // to place at end of document\r\n\r\n// to place before another page element\r\nvar el = document.getElementById('marker');\r\nel.parentNode.insertBefore(ifrm, el);\r\n\r\n// assign url\r\nifrm.setAttribute('src', 'demo.html');\r\n```\r\n\r\nand this has some info that may lead to answer for finding the iframe id\r\nhttps://www.codeproject.com/Questions/597144/howplustoplusgetplustheplusiframeplusid\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I looked up remove() for iframe<br>\nfound this<br>\nhttps://stackoverflow.com/questions/31808185/how-to-delete-html-elements-in-an-iframe-using-javascript</p>\n<pre><code>You can use\n\n$(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\nIt is better to use remove()\n\nexample: $(\"#iFrameId\").contents().find(\"#yourDiv\").remove();\n\nExplaination\n\nempty() will remove all the contents of the selection.\n\nremove() will remove the selection and its contents and all the event handlers associated with it.\n\nFor reference: 1) http://api.jquery.com/remove/ 2) http://api.jquery.com/empty/\n</code></pre>\n<p>I also found this, so I can set the iframe id, but I would still need to set a div in my code to remove it it seems<br>\nhttps://www.dyn-web.com/tutorials/iframes/dyn-gen/</p>\n<pre><code>var ifrm = document.createElement('iframe');\nifrm.setAttribute('id', 'ifrm'); // assign an id\n\n//document.body.appendChild(ifrm); // to place at end of document\n\n// to place before another page element\nvar el = document.getElementById('marker');\nel.parentNode.insertBefore(ifrm, el);\n\n// assign url\nifrm.setAttribute('src', 'demo.html');\n</code></pre>\n<p>and this has some info that may lead to answer for finding the iframe id<br>\nhttps://www.codeproject.com/Questions/597144/howplustoplusgetplustheplusiframeplusid</p>\n\n",
      "PostDate": "2018-12-04T06:14:47.5221659Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "67c580aa-00a1-40e8-a7fe-ccdba3ac7978",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The `onYouTubeIframeAPIReady()` is called when the API is succesfully loaded for the first time. The script to create a player should not be in that function unless you only want one player.\r\n\r\nYou should have the code to start the API in your UI initialisation script so that the API is ready to be used. Then, when you want to actually display a video, you do the `new YT.Player` bit.",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>onYouTubeIframeAPIReady()</code> is called when the API is succesfully loaded for the first time. The script to create a player should not be in that function unless you only want one player.</p>\n<p>You should have the code to start the API in your UI initialisation script so that the API is ready to be used. Then, when you want to actually display a video, you do the <code>new YT.Player</code> bit.</p>\n\n",
      "PostDate": "2018-12-04T09:12:42.5175014Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "12e037c7-86e3-4c7f-8271-bea0b725e4a1",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "And Quest can only take long string as function commands?\r\nSo I have to setup the onYouTubeIframeAPIReady() in a variable, jstring, for instance, along with the API asynchronous download bit, and then run \r\nJS.eval(jstring)\r\n\r\nI tried moving the code in question to the UI Init script, and it throws an error.  Putting the raw code in the JS.eval() throws an error.\r\n\r\nMoved the code into a room description and put a function call in the UI init that has the jstring = room.description\r\njstring = replace()\r\nJS.eval(jstring)\r\nbit,\r\nand it works, but still only one player and it won't load new videos.\r\n\r\nDo, I need to give the iframe and div id tags and setup a new object with code to invoke a new video inside the same player?\r\nbecause even moving the code to the UI Init, at least the way I have gotten it to work, is causing the same problem, and now it won't stop playing the video at the specified time.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>And Quest can only take long string as function commands?<br>\nSo I have to setup the onYouTubeIframeAPIReady() in a variable, jstring, for instance, along with the API asynchronous download bit, and then run<br>\nJS.eval(jstring)</p>\n<p>I tried moving the code in question to the UI Init script, and it throws an error.  Putting the raw code in the JS.eval() throws an error.</p>\n<p>Moved the code into a room description and put a function call in the UI init that has the jstring = room.description<br>\njstring = replace()<br>\nJS.eval(jstring)<br>\nbit,<br>\nand it works, but still only one player and it won't load new videos.</p>\n<p>Do, I need to give the iframe and div id tags and setup a new object with code to invoke a new video inside the same player?<br>\nbecause even moving the code to the UI Init, at least the way I have gotten it to work, is causing the same problem, and now it won't stop playing the video at the specified time.</p>\n\n",
      "PostDate": "2018-12-04T11:31:26.4819487Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8224d0e7-ac43-4be8-8d7d-efedb10b9bd3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">And Quest can only take long string as function commands?\r\n\r\nNegative.\r\n\r\nThe ```JS.eval()``` function takes a single string as a parameter.\r\n\r\nQuest reads each line of code like it's Quest code.\r\n\r\nSo, this would not work in a Quest script:\r\n```\r\nJS.eval(\"function testMe(txt){\r\n  alert (txt);\r\n  };\r\n  testMe('hello, world!');\r\n\")\r\n```\r\n\r\n---\r\n...but this would:\r\n\r\n```\r\nJS.eval(\"function testMe(txt){  alert (txt);  };  testMe('hello, world!');\")\r\n```\r\n\r\n---\r\n...and so would this:\r\n```\r\ns = \"function testMe(txt){\"\r\ns = s + \"  alert (txt);\"\r\ns = s + \"  };\"\r\ns = s + \"  testMe('hello, world!');\"\r\nJS.eval(s)\r\n```\r\n\r\n---\r\n...and the ```room.description``` attribute is a single string.  So we can feed that to ```JS.eval()``` like this:\r\n\r\n```\r\nJS.eval(room.description)\r\n```\r\n\r\n---\r\n**EDIT**\r\n\r\nBUT, if your room description has line breaks, that will show up as ```<br/>``` within the JS code, and that would cause problems.  Which is why mrangel does this:\r\n\r\n```\r\njstring = room.description\r\njstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\r\njstring = Replace(jstring,\"«\",Chr(60))\r\njstring = Replace(jstring,\"»\",Chr(62))\r\nJS.eval (jstring)\r\n```\r\n\r\n---\r\nI recommend completing the tutorial before proceeding any further.  It's quite short and teaches almost everything you'll need to know about Quest.\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/creating_a_simple_game.html\r\n\r\n---\r\nAlso, I know I said this before, but you are messing with some of the most complicated stuff you could mess with in a Quest game.\r\n\r\n...and that is the truth.\r\n\r\nPassing things to and from JS can be very frustrating, even for experienced users.\r\n\r\nThe screen will scroll the video up with every command, too.  So you'll need to learn how to play with the CSS settings and how Quest will drive you insane while trying to do so.\r\n\r\nPlus, I don't think anyone here (including myself) is familiar with YouTube API.\r\n\r\nI'm not saying you won't succeed.  I'm just saying doing the tutorial game first will help you avoid many, many frustrating obstacles.  From there, you'll probably be unstoppable.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>And Quest can only take long string as function commands?</p>\n</blockquote>\n<p>Negative.</p>\n<p>The <code>JS.eval()</code> function takes a single string as a parameter.</p>\n<p>Quest reads each line of code like it's Quest code.</p>\n<p>So, this would not work in a Quest script:</p>\n<pre><code>JS.eval(\"function testMe(txt){\n  alert (txt);\n  };\n  testMe('hello, world!');\n\")\n</code></pre>\n<hr>\n<p>...but this would:</p>\n<pre><code>JS.eval(\"function testMe(txt){  alert (txt);  };  testMe('hello, world!');\")\n</code></pre>\n<hr>\n<p>...and so would this:</p>\n<pre><code>s = \"function testMe(txt){\"\ns = s + \"  alert (txt);\"\ns = s + \"  };\"\ns = s + \"  testMe('hello, world!');\"\nJS.eval(s)\n</code></pre>\n<hr>\n<p>...and the <code>room.description</code> attribute is a single string.  So we can feed that to <code>JS.eval()</code> like this:</p>\n<pre><code>JS.eval(room.description)\n</code></pre>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>BUT, if your room description has line breaks, that will show up as <code>&lt;br/&gt;</code> within the JS code, and that would cause problems.  Which is why mrangel does this:</p>\n<pre><code>jstring = room.description\njstring = Replace(jstring,Chr(60)+\"br/\"+Chr(62),\"\\n\")\njstring = Replace(jstring,\"«\",Chr(60))\njstring = Replace(jstring,\"»\",Chr(62))\nJS.eval (jstring)\n</code></pre>\n<hr>\n<p>I recommend completing the tutorial before proceeding any further.  It's quite short and teaches almost everything you'll need to know about Quest.</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/creating_a_simple_game.html</p>\n<hr>\n<p>Also, I know I said this before, but you are messing with some of the most complicated stuff you could mess with in a Quest game.</p>\n<p>...and that is the truth.</p>\n<p>Passing things to and from JS can be very frustrating, even for experienced users.</p>\n<p>The screen will scroll the video up with every command, too.  So you'll need to learn how to play with the CSS settings and how Quest will drive you insane while trying to do so.</p>\n<p>Plus, I don't think anyone here (including myself) is familiar with YouTube API.</p>\n<p>I'm not saying you won't succeed.  I'm just saying doing the tutorial game first will help you avoid many, many frustrating obstacles.  From there, you'll probably be unstoppable.</p>\n\n",
      "PostDate": "2018-12-04T15:13:44.6841603Z",
      "LastEditDate": "2018-12-04T15:16:50.059358Z",
      "link": null
    },
    {
      "PostId": "4cbd7a6b-8468-4854-a7a9-15b709f95f43",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Do, I need to give the iframe and div id tags and setup a new object with code to invoke a new video inside the same player?\r\n\r\nYou can create a new player whenever you want one.\r\nOr you can cause an existing player to load a new video.\r\n\r\nYou can do whichever works best for the game you want to create. I'd probably go with the latter.\r\n\r\nHere's how I'd arrange the code off the top of my head:\r\n\r\n<details><summary>A ton of untested code</summary>\r\n\r\n```\r\n$(function (){\r\n  // some frame-global variables to keep track of state\r\n  var pendingVideos = [];\r\n  var lastPlayer;\r\n  var ytApiLoaded = 0;\r\n  var playerid = 1;\r\n  var pendingPlayer;\r\n\r\n  // Called on startup\r\n  // this doesn't create a single player like the example code\r\n  // instead it just starts playing any videos that Quest added to the queue before our connection to youtube was established\r\n  onYouTubeIframeAPIReady = function () {\r\n    ytApiLoaded = 1;\r\n    if (pendingVideos.length) {\r\n      CreateYoutubePlayer();\r\n    }\r\n  };\r\n\r\n  QueueYoutubeVideo = function (id) {\r\n    if (lastPlayer) {\r\n      if (lastPlayer.getPlayerState() == 1) {\r\n        lastPlayer.cueVideoById(id);\r\n      } else {\r\n        lastPlayer.loadVideoById(id);\r\n      }\r\n    } else {\r\n      pendingVideos.push(id);\r\n      CreateYoutubePlayer();\r\n    }\r\n  };\r\n\r\n  onPlayerReady = function (event) {\r\n    var player = event.target;\r\n    player.playVideo();\r\n    if (pendingVideos) {\r\n      $.each(pendingVideos, function (i, id) { player.cueVideoById(id); });\r\n      pendingVideos = [];\r\n    }\r\n  };\r\n\r\n  var StateChanged = function(event) {\r\n    var player = event.target;\r\n    switch (event.data) {\r\n      case 0:\r\n        ASLEvent ('YoutubeVideoFinished', player.getVideoUrl());\r\n        break;\r\n      case 2:\r\n        ASLEvent ('YoutubeVideoPaused', player.getVideoUrl());\r\n        break;\r\n      case 3:\r\n        ASLEvent ('YoutubeVideoBuffering', player.getVideoUrl());\r\n        break;\r\n    }\r\n  };\r\n\r\n  CreateYoutubePlayer = function(settings) {\r\n    if (lastPlayer) {\r\n      if (lastPlayer.getPlayerState()) {\r\n        lastPlayer.pauseVideo();\r\n      }\r\n    }\r\n    if (!settings) {\r\n      settings = pendingVideos.shift();\r\n    }\r\n    if (typeof settings === 'string') {\r\n      settings = {videoId: settings};\r\n    }\r\n    settings = $.extend({width: 640, height: 480, events: {onReady: onPlayerReady, onStateChange: StateChanged}}, settings);\r\n    if (!pendingPlayer) {\r\n      while ($('#playerElement'+playerid).length) { playerid++; }\r\n      settings['id'] = 'playerElement'+playerid;\r\n      AddText($('«div»', settings));\r\n      pendingPlayer = 'playerElement' + playerId;\r\n    }\r\n    if (settings['videoId']) {\r\n      lastPlayer = new YT.Player (pendingPlayer, settings);\r\n      pendingPlayer = null;\r\n    }\r\n  };\r\n\r\n  $('«script»', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\r\n});\r\n```\r\n</details>\r\n\r\n...\r\n\r\nOK, I started typing that and didn't realise how long it would take. Not tested.\r\n\r\nPutting that in your room description (with the code in the UI initialisation script to call it) should mean that unless I made any mistakes, you can then do (from Quest):\r\n* `JS.CreateYoutubePlayer(\"some-id\")` - creates a new player and starts a given video (pausing the previous player if it's still playing, so you don't have 2 players running at once)\r\n* `JS.QueueYoutubeVideo(\"some-id\")` - adds a video to the end of the current playlist for the last player displayed; or creates a new player if there isn't one open.\r\n\r\nThe ID for those can either be a string containing the ID; or a stringdictionary with the keys \"videoId\", \"startSeconds\", and \"endSeconds\"\r\n\r\nYou could also create Quest functions `YoutubeVideoPaused`, `YoutubeVideoBuffering` and `YoutubeVideoFinished` which take a single parameter (a video URL - the API doesn't seem to give out the video ID easily) if you want Quest to respond to those events.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Do, I need to give the iframe and div id tags and setup a new object with code to invoke a new video inside the same player?</p>\n</blockquote>\n<p>You can create a new player whenever you want one.<br>\nOr you can cause an existing player to load a new video.</p>\n<p>You can do whichever works best for the game you want to create. I'd probably go with the latter.</p>\n<p>Here's how I'd arrange the code off the top of my head:</p>\n<details><summary>A ton of untested code</summary>\n<pre><code>$(function (){\n  // some frame-global variables to keep track of state\n  var pendingVideos = [];\n  var lastPlayer;\n  var ytApiLoaded = 0;\n  var playerid = 1;\n  var pendingPlayer;\n\n  // Called on startup\n  // this doesn't create a single player like the example code\n  // instead it just starts playing any videos that Quest added to the queue before our connection to youtube was established\n  onYouTubeIframeAPIReady = function () {\n    ytApiLoaded = 1;\n    if (pendingVideos.length) {\n      CreateYoutubePlayer();\n    }\n  };\n\n  QueueYoutubeVideo = function (id) {\n    if (lastPlayer) {\n      if (lastPlayer.getPlayerState() == 1) {\n        lastPlayer.cueVideoById(id);\n      } else {\n        lastPlayer.loadVideoById(id);\n      }\n    } else {\n      pendingVideos.push(id);\n      CreateYoutubePlayer();\n    }\n  };\n\n  onPlayerReady = function (event) {\n    var player = event.target;\n    player.playVideo();\n    if (pendingVideos) {\n      $.each(pendingVideos, function (i, id) { player.cueVideoById(id); });\n      pendingVideos = [];\n    }\n  };\n\n  var StateChanged = function(event) {\n    var player = event.target;\n    switch (event.data) {\n      case 0:\n        ASLEvent ('YoutubeVideoFinished', player.getVideoUrl());\n        break;\n      case 2:\n        ASLEvent ('YoutubeVideoPaused', player.getVideoUrl());\n        break;\n      case 3:\n        ASLEvent ('YoutubeVideoBuffering', player.getVideoUrl());\n        break;\n    }\n  };\n\n  CreateYoutubePlayer = function(settings) {\n    if (lastPlayer) {\n      if (lastPlayer.getPlayerState()) {\n        lastPlayer.pauseVideo();\n      }\n    }\n    if (!settings) {\n      settings = pendingVideos.shift();\n    }\n    if (typeof settings === 'string') {\n      settings = {videoId: settings};\n    }\n    settings = $.extend({width: 640, height: 480, events: {onReady: onPlayerReady, onStateChange: StateChanged}}, settings);\n    if (!pendingPlayer) {\n      while ($('#playerElement'+playerid).length) { playerid++; }\n      settings['id'] = 'playerElement'+playerid;\n      AddText($('«div»', settings));\n      pendingPlayer = 'playerElement' + playerId;\n    }\n    if (settings['videoId']) {\n      lastPlayer = new YT.Player (pendingPlayer, settings);\n      pendingPlayer = null;\n    }\n  };\n\n  $('«script»', {src:'https://www.youtube.com/iframe_api'}).prependTo('head');\n});\n</code></pre>\n</details>\n<p>...</p>\n<p>OK, I started typing that and didn't realise how long it would take. Not tested.</p>\n<p>Putting that in your room description (with the code in the UI initialisation script to call it) should mean that unless I made any mistakes, you can then do (from Quest):</p>\n<ul>\n<li><code>JS.CreateYoutubePlayer(\"some-id\")</code> - creates a new player and starts a given video (pausing the previous player if it's still playing, so you don't have 2 players running at once)</li>\n<li><code>JS.QueueYoutubeVideo(\"some-id\")</code> - adds a video to the end of the current playlist for the last player displayed; or creates a new player if there isn't one open.</li>\n</ul>\n<p>The ID for those can either be a string containing the ID; or a stringdictionary with the keys \"videoId\", \"startSeconds\", and \"endSeconds\"</p>\n<p>You could also create Quest functions <code>YoutubeVideoPaused</code>, <code>YoutubeVideoBuffering</code> and <code>YoutubeVideoFinished</code> which take a single parameter (a video URL - the API doesn't seem to give out the video ID easily) if you want Quest to respond to those events.</p>\n\n",
      "PostDate": "2018-12-04T19:32:03.6882917Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "430953c0-66b7-4347-9db7-6e3d46c2013a",
      "UserId": 385800,
      "Username": "egoproctor",
      "AvatarUrl": "https://i.imgur.com/PLDGAZAb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A  YouTube id I would supply.\r\nAn example:  https://youtu.be/iyhMKRpw6EM\r\n~~~\r\nhttps://youtu.be/---->iyhMKRpw6EM\r\nExtra parameters follow the ?\r\nThat's what I know.\r\n\r\nI would like to either, pass these ids into variables and string lists, and then  use those variables and string lists to format ids properly for JS.eval() and quest.\r\n\r\nOr, write those variables and strings into different room descriptions, \r\nExample \r\n~~~\r\ncurrentVidoesObj\r\nqueuedVideosObj\r\nwatchedVideosObj\r\nplayerPuzzleBoxVideosObj\r\npictureGalleryObj\r\nsoundStudioObj\r\n~~~\r\nstoring variables and lists for each video in the object, loading the information to either\r\nYouTubeIframAPI \r\nor\r\n*.?Obj.description \r\n\r\nI don't know what's happening to the code at the web GUI level, so all results are unexpected. It's an interesting adventure.\r\nThe Gui is nice for targeted edits, but I prefer code view.\r\n\r\nThanks mrangel for the function descriptions.\r\n\r\nAnd Thank You KV for the function code.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>A  YouTube id I would supply.<br>\nAn example:  https://youtu.be/iyhMKRpw6EM</p>\n<pre><code>https://youtu.be/----&gt;iyhMKRpw6EM\nExtra parameters follow the ?\nThat's what I know.\n\nI would like to either, pass these ids into variables and string lists, and then  use those variables and string lists to format ids properly for JS.eval() and quest.\n\nOr, write those variables and strings into different room descriptions, \nExample \n</code></pre>\n<p>currentVidoesObj<br>\nqueuedVideosObj<br>\nwatchedVideosObj<br>\nplayerPuzzleBoxVideosObj<br>\npictureGalleryObj<br>\nsoundStudioObj</p>\n<pre><code>storing variables and lists for each video in the object, loading the information to either\nYouTubeIframAPI \nor\n*.?Obj.description \n\nI don't know what's happening to the code at the web GUI level, so all results are unexpected. It's an interesting adventure.\nThe Gui is nice for targeted edits, but I prefer code view.\n\nThanks mrangel for the function descriptions.\n\nAnd Thank You KV for the function code.\n</code></pre>\n\n",
      "PostDate": "2018-12-05T01:57:31.9139423Z",
      "LastEditDate": "2018-12-05T15:00:41.8455977Z",
      "link": null
    }
  ]
}
