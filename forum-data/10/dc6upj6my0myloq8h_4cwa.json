{
  "Topic": {
    "TopicId": "dc6upj6my0myloq8h_4cwa",
    "ForumId": "10",
    "Title": "How to efficiently encode 'if value 1 = A, then set value 2 to B' with 100 different values each for A and B paired up?",
    "LastUpdated": "2020-04-30T14:46:24.8044108Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "640b9f58-f1c2-48dd-bec8-548e31565c23",
      "UserId": 233882,
      "Username": "lucidaxe",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ad8a6ec8e410fc0c58b0efb85e20450e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello!\r\n\r\nI'm a newbie when it comes to Quest, but I was wondering about how to go about the following, in the most efficient way.\r\n\r\nI would like to set a variable, called \"Threshold\", to a specific whole number (integer) value, based on what (integer) value another variable, called \"ARV\", is currently set to. In a spreadsheet, I've made pairings of corresponding \"ARV\" and \"Threshold\" values. There are about 100 pairings based on 100 possible values that ARV can take (from 1 up to 100).\r\n\r\nThe idea is that the game should check 'what is the current value for ARV?' and then set the value for Threshold accordingly.\r\n\r\nSo this could perhaps be done with a script, but I don't know if 100 lines of this won't cause the system to bug out: \r\nIf variable ARV = 1, then set variable Threshold to 101.\r\nElseif variable ARV = 2, then set variable Threshold to 104.\r\nElseif variable ARV = 3, then set variable Threshold to 105.\r\n...\r\n\r\nI'm wondering if there is a sort of quick list (system) you can easily use in Quest where two values are stored as pairs. Then if value A (from variable ARV) equals value 1 (for ARV) stored in the list, the value in that list paired with value 1 (the value for Threshold) is automatically returned from said list in some way. Maybe this would eliminate the need for 100 lines of conditions in a script?\r\n\r\nPlease keep in mind I'm a complete newbie so in-depth answers would be much appreciated. By that I mean, please explain your reasoning for a solution, as well as describing _step by step_ how to implement the solution exactly.\r\n\r\nThanks for any help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello!</p>\n<p>I'm a newbie when it comes to Quest, but I was wondering about how to go about the following, in the most efficient way.</p>\n<p>I would like to set a variable, called \"Threshold\", to a specific whole number (integer) value, based on what (integer) value another variable, called \"ARV\", is currently set to. In a spreadsheet, I've made pairings of corresponding \"ARV\" and \"Threshold\" values. There are about 100 pairings based on 100 possible values that ARV can take (from 1 up to 100).</p>\n<p>The idea is that the game should check 'what is the current value for ARV?' and then set the value for Threshold accordingly.</p>\n<p>So this could perhaps be done with a script, but I don't know if 100 lines of this won't cause the system to bug out:<br>\nIf variable ARV = 1, then set variable Threshold to 101.<br>\nElseif variable ARV = 2, then set variable Threshold to 104.<br>\nElseif variable ARV = 3, then set variable Threshold to 105.<br>\n...</p>\n<p>I'm wondering if there is a sort of quick list (system) you can easily use in Quest where two values are stored as pairs. Then if value A (from variable ARV) equals value 1 (for ARV) stored in the list, the value in that list paired with value 1 (the value for Threshold) is automatically returned from said list in some way. Maybe this would eliminate the need for 100 lines of conditions in a script?</p>\n<p>Please keep in mind I'm a complete newbie so in-depth answers would be much appreciated. By that I mean, please explain your reasoning for a solution, as well as describing <em>step by step</em> how to implement the solution exactly.</p>\n<p>Thanks for any help!</p>\n\n",
      "PostDate": "2020-04-30T14:46:24.8044108Z",
      "LastEditDate": "2020-04-30T14:52:21.4641509Z",
      "link": null
    },
    {
      "PostId": "b954d6d9-efe5-4aad-801d-7f757da968d5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a predictable relationship between the two values? If there is, you could include some kind of formula.\r\n\r\nIf not, I'd suggest making a list of possible values. In code view, I think it would look something like:\r\n```\r\n<thresholdvalues type=\"list\">\r\n  <value type=\"int\">0</value>\r\n  <value type=\"int\">101</value>\r\n  <value type=\"int\">104</value>\r\n  <value type=\"int\">105</value>\r\n…\r\n</thresholdvalues>\r\n```\r\nProbably placed inside the `game` element, unless an object is more relevant.\r\n\r\nYou can then use faster code, such as:\r\n```\r\nThreshold = ListItem (game.thresholdvalues, ARV)\r\n```\r\n\r\n(Note: I added a dummy value at the beginning of the list, because lists are numbered from 0)\r\n\r\nOr, if it would take too long to put all those values from your spreadsheet into the list, you could do:\r\n<pre><code>firsttime {\r\n  game.threshold_values = Split(\"0;101;104;105;106<em style=\"font-family: initial\">;etc …</em>\")\r\n}\r\nThreshold = ToInt (ListItem (game.threshold_values, ARV))</code></pre>\r\nMost spreadsheets will let you copy a row of items as a list with tab characters or commas in between; so if you want to avoid copying out the whole list manually, you could try pasting them into a text editor and use search and replace to put semicolons between instead. Again, I put a 0 in between for the case where ARV is 0, which I think you said won't happen.",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a predictable relationship between the two values? If there is, you could include some kind of formula.</p>\n<p>If not, I'd suggest making a list of possible values. In code view, I think it would look something like:</p>\n<pre><code>&lt;thresholdvalues type=\"list\"&gt;\n  &lt;value type=\"int\"&gt;0&lt;/value&gt;\n  &lt;value type=\"int\"&gt;101&lt;/value&gt;\n  &lt;value type=\"int\"&gt;104&lt;/value&gt;\n  &lt;value type=\"int\"&gt;105&lt;/value&gt;\n…\n&lt;/thresholdvalues&gt;\n</code></pre>\n<p>Probably placed inside the <code>game</code> element, unless an object is more relevant.</p>\n<p>You can then use faster code, such as:</p>\n<pre><code>Threshold = ListItem (game.thresholdvalues, ARV)\n</code></pre>\n<p>(Note: I added a dummy value at the beginning of the list, because lists are numbered from 0)</p>\n<p>Or, if it would take too long to put all those values from your spreadsheet into the list, you could do:</p>\n<pre><code>firsttime {\n  game.threshold_values = Split(\"0;101;104;105;106<em style=\"font-family: initial\">;etc …</em>\")\n}\nThreshold = ToInt (ListItem (game.threshold_values, ARV))</code></pre>\n<p>Most spreadsheets will let you copy a row of items as a list with tab characters or commas in between; so if you want to avoid copying out the whole list manually, you could try pasting them into a text editor and use search and replace to put semicolons between instead. Again, I put a 0 in between for the case where ARV is 0, which I think you said won't happen.</p>\n\n",
      "PostDate": "2020-04-30T15:47:34.1079257Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82b10d85-18b1-43d4-8808-511fbf8dcc9f",
      "UserId": 233882,
      "Username": "lucidaxe",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ad8a6ec8e410fc0c58b0efb85e20450e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi! Thank you very much for the reply.\r\n\r\nTo answer some of the questions/considerations you brought up:\r\n\r\n- Is there a predictable relationship between the two values?\r\n\r\nNo relationship that could be expressed in one easy formula, and/or using simple steps. It's definitely much easier to just write the answers down to be read when the game needs them, so to speak.\r\n\r\n- Probably placed inside the game element, unless an object is more relevant.\r\n\r\nI don't think a designated object is relevant, it would pretty much just be a list that I'd want to access anytime using any relevant script. So I think the game object is probably the way to go for me then. :)\r\n\r\n- Or, if it would take too long to put all those values from your spreadsheet into the list, you could do...\r\n\r\nI don't particularly mind taking the time to manually copy them. I am curious though, is there a functional difference or any kind of caveat that goes with using the second method as opposed to the first?\r\n\r\n- I added a dummy value at the beginning of the list, because lists are numbered from 0. [...] I put a 0 in between for the case where ARV is 0, which I think you said won't happen.\r\n\r\nYou're correct, the range of values that ARV can take would go from 1 up to 100, excluding 0. I presume you include the dummy then, so that the 'ARV' in the code can be read directly from the ARV variable, and the list will automatically produce the corresponding value it has stored for that position. Position 1 - 100 being filled with the values, whereas position 0 (filled with value 0) should technically never be called upon because the ARV variable should never be set to 0.\r\n\r\nNow, if you were to insist to put the values in from the very first position in the list (so without wasting a position on a dummy value), could you then write something like...\r\n\r\n```Threshold = ListItem (game.thresholdvalues, ARV - 1)```\r\n\r\nand would Quest still be able to automatically read in the value from the ARV variable, subtract 1, and then use that value as an indicator for the position in the list? Or would you need to create a second variable \"ARVadjusted\", set ARVadjusted to ARV - 1, and adjust the code to read ARVadjusted rather than ARV. (```Threshold = ListItem (game.thresholdvalues, ARVadjusted)```)\r\n\r\n**In any case, I'm very grateful for your help!**",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi! Thank you very much for the reply.</p>\n<p>To answer some of the questions/considerations you brought up:</p>\n<ul>\n<li>Is there a predictable relationship between the two values?</li>\n</ul>\n<p>No relationship that could be expressed in one easy formula, and/or using simple steps. It's definitely much easier to just write the answers down to be read when the game needs them, so to speak.</p>\n<ul>\n<li>Probably placed inside the game element, unless an object is more relevant.</li>\n</ul>\n<p>I don't think a designated object is relevant, it would pretty much just be a list that I'd want to access anytime using any relevant script. So I think the game object is probably the way to go for me then. :)</p>\n<ul>\n<li>Or, if it would take too long to put all those values from your spreadsheet into the list, you could do...</li>\n</ul>\n<p>I don't particularly mind taking the time to manually copy them. I am curious though, is there a functional difference or any kind of caveat that goes with using the second method as opposed to the first?</p>\n<ul>\n<li>I added a dummy value at the beginning of the list, because lists are numbered from 0. [...] I put a 0 in between for the case where ARV is 0, which I think you said won't happen.</li>\n</ul>\n<p>You're correct, the range of values that ARV can take would go from 1 up to 100, excluding 0. I presume you include the dummy then, so that the 'ARV' in the code can be read directly from the ARV variable, and the list will automatically produce the corresponding value it has stored for that position. Position 1 - 100 being filled with the values, whereas position 0 (filled with value 0) should technically never be called upon because the ARV variable should never be set to 0.</p>\n<p>Now, if you were to insist to put the values in from the very first position in the list (so without wasting a position on a dummy value), could you then write something like...</p>\n<p><code>Threshold = ListItem (game.thresholdvalues, ARV - 1)</code></p>\n<p>and would Quest still be able to automatically read in the value from the ARV variable, subtract 1, and then use that value as an indicator for the position in the list? Or would you need to create a second variable \"ARVadjusted\", set ARVadjusted to ARV - 1, and adjust the code to read ARVadjusted rather than ARV. (<code>Threshold = ListItem (game.thresholdvalues, ARVadjusted)</code>)</p>\n<p><strong>In any case, I'm very grateful for your help!</strong></p>\n\n",
      "PostDate": "2020-04-30T17:05:31.3973402Z",
      "LastEditDate": "2020-04-30T17:34:08.877123Z",
      "link": null
    },
    {
      "PostId": "91aff51a-3cb8-4146-ade1-b7ec7b8a13b1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I am curious though, is there a functional difference or any kind of caveat that goes with using the second method as opposed to the first?\r\n\r\nEither way works well. The main difference is that using `Split` gives an array of *strings*, so if you want to compare the resulting threshold to another number, you'll need to use `ToInt` on it first.\r\n\r\nThe real reason I quoted two methods was because I wasn't 100% sure on the XML syntax for a list.\r\n\r\n> Now, if you were to insist to put the values in from the very first position in the list (so without wasting a position on a dummy value), could you then write something like...\r\n> `Threshold = ListItem (game.thresholdvalues, ARV - 1)`\r\n\r\nYes, that works fine. I'd normally suggest that; but experience on here shows that a lot of people will end up using the list elsewhere, and miss out the -1 in just one place, leading to errors that are very hard to track down. Seems that adding a dummy zeroth element is sometimes easier to understand for people without a programming background.\r\n\r\nUse whichever method feels most natural to you :) But I'd advise against mixing them, because that makes it easier to slip up.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I am curious though, is there a functional difference or any kind of caveat that goes with using the second method as opposed to the first?</p>\n</blockquote>\n<p>Either way works well. The main difference is that using <code>Split</code> gives an array of <em>strings</em>, so if you want to compare the resulting threshold to another number, you'll need to use <code>ToInt</code> on it first.</p>\n<p>The real reason I quoted two methods was because I wasn't 100% sure on the XML syntax for a list.</p>\n<blockquote>\n<p>Now, if you were to insist to put the values in from the very first position in the list (so without wasting a position on a dummy value), could you then write something like...<br>\n<code>Threshold = ListItem (game.thresholdvalues, ARV - 1)</code></p>\n</blockquote>\n<p>Yes, that works fine. I'd normally suggest that; but experience on here shows that a lot of people will end up using the list elsewhere, and miss out the -1 in just one place, leading to errors that are very hard to track down. Seems that adding a dummy zeroth element is sometimes easier to understand for people without a programming background.</p>\n<p>Use whichever method feels most natural to you :) But I'd advise against mixing them, because that makes it easier to slip up.</p>\n\n",
      "PostDate": "2020-04-30T20:03:36.70492Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ca1791ec-6a90-4836-b4a1-6a67a8235550",
      "UserId": 233882,
      "Username": "lucidaxe",
      "AvatarUrl": "https://secure.gravatar.com/avatar/ad8a6ec8e410fc0c58b0efb85e20450e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I see. I think I'll use the first method so the values are stored as integers from the get-go, since I will be using a lot of comparisons of other numbers to the Threshold value. And I probably will put in a dummy first element just so that I can refer to the ARV value directly, and pull the corresponding value for that element of the list. It's something I could definitely see myself losing track of later down the line, otherwise.\r\n\r\nAlrighty, thank you very much!",
      "EditableFormat": "markdown",
      "HTML": "<p>I see. I think I'll use the first method so the values are stored as integers from the get-go, since I will be using a lot of comparisons of other numbers to the Threshold value. And I probably will put in a dummy first element just so that I can refer to the ARV value directly, and pull the corresponding value for that element of the list. It's something I could definitely see myself losing track of later down the line, otherwise.</p>\n<p>Alrighty, thank you very much!</p>\n\n",
      "PostDate": "2020-05-01T09:58:22.8327416Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9e420f2b-551f-410f-94e7-1350e76e3b5c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm probably not understanding what you want, and mrangel already has helped you, but if you just want pairings (input -> output), quest has 'dictionary' Attributes for that:\r\n\r\nhttps://docs.textadventures.co.uk/quest/using_dictionaries.html\r\n\r\na quick simple example:\r\n\r\n(would of course need a bit more coding and adjusted coding for using your own VARIABLES with it, for its actual working application/usage for your game)\r\n\r\n```\r\n<game name=\"NAME_OF_GAME\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"1\"))\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"one\"))\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"2\"))\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"two\"))\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"3\"))\r\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"three\"))\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n\r\n  <example_dictionary_attribute type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>1</key>\r\n      <value>one</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>one</key>\r\n      <value>1</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>2</key>\r\n      <value>two</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>two</key>\r\n      <value>2</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>3</key>\r\n      <value>three</value>\r\n    </item>\r\n\r\n    <item>\r\n      <key>three</key>\r\n      <value>3</value>\r\n    </item>\r\n\r\n  </example_dictionary_attribute>\r\n\r\n</object>\r\n\r\n-------------------\r\n\r\n// output:\r\n\r\none\r\n1\r\ntwo\r\n2\r\nthree\r\n3\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm probably not understanding what you want, and mrangel already has helped you, but if you just want pairings (input -&gt; output), quest has 'dictionary' Attributes for that:</p>\n<p>https://docs.textadventures.co.uk/quest/using_dictionaries.html</p>\n<p>a quick simple example:</p>\n<p>(would of course need a bit more coding and adjusted coding for using your own VARIABLES with it, for its actual working application/usage for your game)</p>\n<pre><code>&lt;game name=\"NAME_OF_GAME\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"1\"))\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"one\"))\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"2\"))\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"two\"))\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"3\"))\n    msg (StringDictionaryItem (example_object.example_dictionary_attribute, \"three\"))\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n\n  &lt;example_dictionary_attribute type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;1&lt;/key&gt;\n      &lt;value&gt;one&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;one&lt;/key&gt;\n      &lt;value&gt;1&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;2&lt;/key&gt;\n      &lt;value&gt;two&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;two&lt;/key&gt;\n      &lt;value&gt;2&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;3&lt;/key&gt;\n      &lt;value&gt;three&lt;/value&gt;\n    &lt;/item&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;three&lt;/key&gt;\n      &lt;value&gt;3&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/example_dictionary_attribute&gt;\n\n&lt;/object&gt;\n\n-------------------\n\n// output:\n\none\n1\ntwo\n2\nthree\n3\n</code></pre>\n\n",
      "PostDate": "2020-05-04T18:14:54.4225067Z",
      "LastEditDate": "2020-05-04T18:22:55.1364333Z",
      "link": null
    }
  ]
}
