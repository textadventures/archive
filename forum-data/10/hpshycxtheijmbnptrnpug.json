{
  "Topic": {
    "TopicId": "hpshycxtheijmbnptrnpug",
    "ForumId": "10",
    "Title": "Setting a name (Gamebook)",
    "LastUpdated": "2019-03-27T18:51:38.0193815Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a07e1edc-7237-471d-9d0d-e05340ff413e",
      "UserId": 388479,
      "Username": "JumpJack",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi guys. I'm a total newbie with this stuff.\r\n\r\nIm working on a game were I would like the player to have the option to set a name for something.\r\n\r\nFor example, the main character might have a pet dog. When someone plays the game, they are prompted to type a name for the dog. Throughout the game the dog is then named what ever was input by the player.\r\n\r\nI'd really appreciate any advice on how this can be achieved.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi guys. I'm a total newbie with this stuff.</p>\n<p>Im working on a game were I would like the player to have the option to set a name for something.</p>\n<p>For example, the main character might have a pet dog. When someone plays the game, they are prompted to type a name for the dog. Throughout the game the dog is then named what ever was input by the player.</p>\n<p>I'd really appreciate any advice on how this can be achieved.</p>\n\n",
      "PostDate": "2019-03-27T18:51:38.0193815Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7a9c5437-e83a-4de8-9545-bfb739deebb7",
      "UserId": 412520,
      "Username": "Ninjagorulz",
      "AvatarUrl": "https://i.imgur.com/ReW9iiYb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Greetings and welcome to Quest! I'm no expert, but I think I can help. \r\n\r\nHere is some code that will do this. It's script code, so you will have to change your page to \"Text + Script\" or \"Script.\" Find the \"code view\" button in the new section dedicated to script and paste in the code. It works by asking the player for input (in this case the name for a dog), and it will save what you put in as the name {player.DogName}. I don't understand it too well myself, but as far as I can tell it basically sets an attribute to the player. By using {player.DogName}, the attribute is displayed.\r\n\r\n```\r\nmsg (\"What is your dog's name?\")\r\nGetInput() {\r\n  player.DogName = result\r\n  msg (\"Your dog's name is {player.DogName}.<br/>\")\r\n}\r\n```\r\n\r\nI hope this is helpful, and if you want a better explanation, see this forum post: https://textadventures.co.uk/forum/quest/topic/4708/adding-player-name-in-game\r\n\r\nDon't be afraid to search around the forums, there are a surprising amount of questions answered on here! If you have any other questions you'd like to ask me, feel free to do so! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Greetings and welcome to Quest! I'm no expert, but I think I can help.</p>\n<p>Here is some code that will do this. It's script code, so you will have to change your page to \"Text + Script\" or \"Script.\" Find the \"code view\" button in the new section dedicated to script and paste in the code. It works by asking the player for input (in this case the name for a dog), and it will save what you put in as the name {player.DogName}. I don't understand it too well myself, but as far as I can tell it basically sets an attribute to the player. By using {player.DogName}, the attribute is displayed.</p>\n<pre><code>msg (\"What is your dog's name?\")\nGetInput() {\n  player.DogName = result\n  msg (\"Your dog's name is {player.DogName}.&lt;br/&gt;\")\n}\n</code></pre>\n<p>I hope this is helpful, and if you want a better explanation, see this forum post: https://textadventures.co.uk/forum/quest/topic/4708/adding-player-name-in-game</p>\n<p>Don't be afraid to search around the forums, there are a surprising amount of questions answered on here! If you have any other questions you'd like to ask me, feel free to do so!</p>\n\n",
      "PostDate": "2019-05-03T04:04:49.8239772Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6b827ddd-a832-4753-af47-1a3530a25e72",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n----------------\r\n\r\nNinjagorulz has it right, just a little more into understanding Attributes (the 'Attribute' VARIABLE)....\r\n\r\n--------------\r\n\r\nhopefully, you guys/girls know algebra mathematics (VARIABLE usage), as that's basically what are Attributes\r\n\r\nx = 10\r\nx + 30 = ?\r\n[10] + 30 = 40\r\n40 = 40\r\n\r\nor, as usually, as you got to find the value of the variable:\r\n\r\nx = ?\r\nx + 30 = 40\r\nx = 10\r\n[10] + 30 = 40\r\n40 = 40\r\n\r\nhowever, with (Object-Oriented) programming/coding, we got Objects, which can have/store their own Attributes, which store/hold Values, just like how in algebra mathematics, we have variables holding/storing Amount (integers/non-decimal-numbers or double/floats/floating-points/decimal-numbers) Values, but with programming, we can also hold/store Non-Amount Values: Strings, Booleans, Object References/Pointers, Scripts, Lists, Dictionaries, and etc\r\n\r\nthis is just like the real world, for an example:\r\n\r\nObject: john\r\n\r\nA (String) Attribute of the 'john' Object: hair_color\r\n\r\nThe (String) Value stored/held within/by the 'hair_color' String Attribute of/within/by the 'john' Object: \"black\"\r\n\r\njohn.hair_color = \"black\"\r\n\r\nObject: jeff\r\n\r\nA (String) Attribute of the 'jeff' Object: hair_color\r\n\r\nThe (String) Value stored/held within/by the 'hair_color' String Attribute of/within/by the 'jeff' Object: \"brown\"\r\n\r\njeff.hair_color = \"brown\"\r\n\r\nwhich is the exact same as with algebra mathematics:\r\n\r\nnotice how instead of using the 'x,y,z,a,b,c,n,etc' for a VARIABLE (storing/holding a Value), we're using:\r\n\r\nx = 10 ---> john.hair_color = \"black\"\r\ny = 49 ---> jeff.hair_color = \"brown\"\r\n\r\nx ---> john.hair_color\r\ny ---> jeff.hair_color\r\n\r\n10 ---> \"black\"\r\n49 ---> \"brown\"\r\n\r\nhopefully, you notice the difference between using an 'x' Variable VARIABLE and using an Attribute VARIABLE\r\n\r\nthere can be one and only one 'x' Variable VARIABLE:\r\n\r\nx = 10\r\nx = 20 // instead of storing '10', the same 'x' variable is now storing '20'\r\n\r\nhowever, there can be lots of Attribute VARIABLES, as they're tied/associated/attached/connected to (held/stored within) Objects:\r\n\r\njohn.hair_color = \"black\"\r\njeff.hair_color = \"brown\"\r\njill.hair_color = \"yellow\"\r\njim.hair_color = \"grey\"\r\njoe.hair_color = \"white\"\r\n\r\nas you can see, we can have 5 'hair_color' String Attributes, as they're tied/associated/attached/connected to (held/stored within) various different Objects:\r\n\r\njohn\r\njeff\r\njill\r\njim\r\njoe\r\n\r\njohn.hair_color = \"brown\"\r\n// is completely different/separate from:\r\njeff.hair_color = \"black\"\r\n// is completely different/separate from:\r\njill.hair_color = \"yellow\"\r\n// is completely different/separate from:\r\njim.hair_color = \"grey\"\r\n// is completely different/separate from:\r\njoe.hair_color = \"white\"\r\n\r\njust like in real life, in how:\r\n\r\njohn has black hair\r\njeff has brown hair\r\njill has yellow hair\r\njim has grey hair\r\njoe has white hair\r\n\r\nbut you can't have multiple 'x' variables, each holding/storing different values:\r\n\r\nx = 10\r\nx = 20\r\nx = 30\r\nx = 40\r\nx = 50\r\n\r\n(instead of having 5 different 'x' variables, we just have a single 'x' variable, which is changing/setting the Value that it is holding/storing, from: 10 to 20 to 30 to 40 to 50)\r\n\r\n-----------\r\n\r\nso, you can hopefully see how useful an 'Object-Oriented' structure is, allowing for multiple Objects, each with their own Attributes and stored/held Values:\r\n\r\njohn.hair_color = \"black\"\r\njohn.age = 30\r\njohn.age_type = \"adult\"\r\njohn.dead = false\r\njohn.weight 200.36\r\n\r\njeff.hair_color = \"brown\"\r\njohn.age = 90\r\njohn.age_type = \"adult\"\r\njohn.dead = true\r\njohn.weight = 100.295879\r\n\r\njill.hair_color = \"yellow\"\r\njill.age = 10\r\njill.age_type = \"child\"\r\njill.dead = false\r\njill.weight = 93.7\r\n\r\njim.hair_color = \"grey\"\r\njim.age = 1\r\njim.age_type = \"baby\"\r\njim.dead = false\r\njim.weight 999.21435\r\n\r\njoe.hair_color = \"white\"\r\njoe.age = 15\r\njoe.age_type = \"teen\"\r\njoe.dead = true\r\njoe.weight 0.36\r\n\r\nand more of the same (we can use 'x' as an Attribute, in this example, the x's are Integer Attributes, as they're storing Integer Values, notice that these ARE four separate 'x' Attributes, as they're attached to Objects, unlike in algebra mathematics, which just have Variable VARIABLES, and not Attribute VARIABLES)\r\n\r\nball_1.x = 10\r\nball_2.x = 30\r\nball_3.x = 50\r\nball_4.x = 90\r\n\r\nmsg (ball_1.x)\r\nmsg (ball_2.x)\r\nmsg (ball_3.x)\r\nmsg (ball_4.x)\r\n\r\n// output/displayment:\r\n10\r\n30\r\n50\r\n90\r\n\r\nVS\r\n\r\nx = 10\r\nx = 20\r\nx = 30\r\nx = 40\r\n\r\nmsg (x)\r\nmsg (x)\r\nmsg (x)\r\nmsg (x)\r\n\r\n// output/displayment:\r\n40\r\n40\r\n40\r\n40\r\n\r\n------------\r\n\r\nlastly...\r\n\r\nVERY IMPORTANT:\r\n\r\nin programming, there's also the 'Assignment' Operation:\r\n\r\nx = 10 // the '10' Integer Value is stored into the 'x' Integer Variable VARIABLE\r\n\r\nplayer.strength = 100 // the '100' Integer Value is stored into the 'strength' Integer Attribute VARIABLE, which the 'strength' Integer Attribute VARIABLE, is stored within the 'player' Object\r\n\r\nplayer.alias = \"HK\" // the \"HK\" String Value is stored into the 'alias' String Attribute VARIABLE, which the 'alias' String Attribute VARIABLE, is (also, as Objects can store multiple Attributes) stored within the 'player' Object\r\n\r\nyou can NOT switch/reverse an expression of an Assignment Operation around!\r\n\r\nthis is because the programming is programmed/parsed to understand it only in a certain syntax order/placement:\r\n\r\nthe Final Value on the right side of the '=' Assignment Operator is stored within the VARIABLE on the left side of the '=' Assignment Operator\r\n\r\nfor example:\r\n\r\nx = 10 + 20 + 30 // the Final (Integer) Value of '60' is stored within the 'x' Variable VARIABLE\r\n\r\nmore examples:\r\n\r\nplayer.alias = \"HK\" // NO error\r\n\"HK\" = player.alias // ERROR!\r\n\r\nplayer.strength = 100 / NO error\r\n100 = player.strength // ERROR!\r\n\r\nx = 10 // NO error\r\n10 = x// ERROR!\r\n\r\nwhereas in algebra mathematics, unfortunately, they never explain that you're actually doing a 'Comparison' Operation, which is why you can switch/reverse the expression around:\r\n\r\nin algebra math:\r\n\r\nx = 10 // NO error\r\n10 = x // NO error\r\n\r\nx + 40 = 50 // NO error\r\n50 = x + 40 // NO error\r\n\r\nin programming, to do a Comparison Operation, you use (as its done within) the 'if' Script/Function (and there's some other Scripts/Functions that also do Comparison Operations):\r\n\r\n```\r\nif (x = 10) { /* scripting */ } // NO error\r\nif (10 = x) { /* scripting */ } // NO error\r\n\r\nif (player.strength = 100) { /* scripting */ } // NO error\r\nif (100 = player.strength) { /* scripting */ } // NO error\r\n\r\nif (player.alias = \"HK\") { /* scripting */ } // NO error\r\nif (\"HK\" = player.alias) { /* scripting */ } // NO error\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>Ninjagorulz has it right, just a little more into understanding Attributes (the 'Attribute' VARIABLE)....</p>\n<hr>\n<p>hopefully, you guys/girls know algebra mathematics (VARIABLE usage), as that's basically what are Attributes</p>\n<p>x = 10<br>\nx + 30 = ?<br>\n[10] + 30 = 40<br>\n40 = 40</p>\n<p>or, as usually, as you got to find the value of the variable:</p>\n<p>x = ?<br>\nx + 30 = 40<br>\nx = 10<br>\n[10] + 30 = 40<br>\n40 = 40</p>\n<p>however, with (Object-Oriented) programming/coding, we got Objects, which can have/store their own Attributes, which store/hold Values, just like how in algebra mathematics, we have variables holding/storing Amount (integers/non-decimal-numbers or double/floats/floating-points/decimal-numbers) Values, but with programming, we can also hold/store Non-Amount Values: Strings, Booleans, Object References/Pointers, Scripts, Lists, Dictionaries, and etc</p>\n<p>this is just like the real world, for an example:</p>\n<p>Object: john</p>\n<p>A (String) Attribute of the 'john' Object: hair_color</p>\n<p>The (String) Value stored/held within/by the 'hair_color' String Attribute of/within/by the 'john' Object: \"black\"</p>\n<p>john.hair_color = \"black\"</p>\n<p>Object: jeff</p>\n<p>A (String) Attribute of the 'jeff' Object: hair_color</p>\n<p>The (String) Value stored/held within/by the 'hair_color' String Attribute of/within/by the 'jeff' Object: \"brown\"</p>\n<p>jeff.hair_color = \"brown\"</p>\n<p>which is the exact same as with algebra mathematics:</p>\n<p>notice how instead of using the 'x,y,z,a,b,c,n,etc' for a VARIABLE (storing/holding a Value), we're using:</p>\n<p>x = 10 ---&gt; john.hair_color = \"black\"<br>\ny = 49 ---&gt; jeff.hair_color = \"brown\"</p>\n<p>x ---&gt; john.hair_color<br>\ny ---&gt; jeff.hair_color</p>\n<p>10 ---&gt; \"black\"<br>\n49 ---&gt; \"brown\"</p>\n<p>hopefully, you notice the difference between using an 'x' Variable VARIABLE and using an Attribute VARIABLE</p>\n<p>there can be one and only one 'x' Variable VARIABLE:</p>\n<p>x = 10<br>\nx = 20 // instead of storing '10', the same 'x' variable is now storing '20'</p>\n<p>however, there can be lots of Attribute VARIABLES, as they're tied/associated/attached/connected to (held/stored within) Objects:</p>\n<p>john.hair_color = \"black\"<br>\njeff.hair_color = \"brown\"<br>\njill.hair_color = \"yellow\"<br>\njim.hair_color = \"grey\"<br>\njoe.hair_color = \"white\"</p>\n<p>as you can see, we can have 5 'hair_color' String Attributes, as they're tied/associated/attached/connected to (held/stored within) various different Objects:</p>\n<p>john<br>\njeff<br>\njill<br>\njim<br>\njoe</p>\n<p>john.hair_color = \"brown\"<br>\n// is completely different/separate from:<br>\njeff.hair_color = \"black\"<br>\n// is completely different/separate from:<br>\njill.hair_color = \"yellow\"<br>\n// is completely different/separate from:<br>\njim.hair_color = \"grey\"<br>\n// is completely different/separate from:<br>\njoe.hair_color = \"white\"</p>\n<p>just like in real life, in how:</p>\n<p>john has black hair<br>\njeff has brown hair<br>\njill has yellow hair<br>\njim has grey hair<br>\njoe has white hair</p>\n<p>but you can't have multiple 'x' variables, each holding/storing different values:</p>\n<p>x = 10<br>\nx = 20<br>\nx = 30<br>\nx = 40<br>\nx = 50</p>\n<p>(instead of having 5 different 'x' variables, we just have a single 'x' variable, which is changing/setting the Value that it is holding/storing, from: 10 to 20 to 30 to 40 to 50)</p>\n<hr>\n<p>so, you can hopefully see how useful an 'Object-Oriented' structure is, allowing for multiple Objects, each with their own Attributes and stored/held Values:</p>\n<p>john.hair_color = \"black\"<br>\njohn.age = 30<br>\njohn.age_type = \"adult\"<br>\njohn.dead = false<br>\njohn.weight 200.36</p>\n<p>jeff.hair_color = \"brown\"<br>\njohn.age = 90<br>\njohn.age_type = \"adult\"<br>\njohn.dead = true<br>\njohn.weight = 100.295879</p>\n<p>jill.hair_color = \"yellow\"<br>\njill.age = 10<br>\njill.age_type = \"child\"<br>\njill.dead = false<br>\njill.weight = 93.7</p>\n<p>jim.hair_color = \"grey\"<br>\njim.age = 1<br>\njim.age_type = \"baby\"<br>\njim.dead = false<br>\njim.weight 999.21435</p>\n<p>joe.hair_color = \"white\"<br>\njoe.age = 15<br>\njoe.age_type = \"teen\"<br>\njoe.dead = true<br>\njoe.weight 0.36</p>\n<p>and more of the same (we can use 'x' as an Attribute, in this example, the x's are Integer Attributes, as they're storing Integer Values, notice that these ARE four separate 'x' Attributes, as they're attached to Objects, unlike in algebra mathematics, which just have Variable VARIABLES, and not Attribute VARIABLES)</p>\n<p>ball_1.x = 10<br>\nball_2.x = 30<br>\nball_3.x = 50<br>\nball_4.x = 90</p>\n<p>msg (ball_1.x)<br>\nmsg (ball_2.x)<br>\nmsg (ball_3.x)<br>\nmsg (ball_4.x)</p>\n<p>// output/displayment:<br>\n10<br>\n30<br>\n50<br>\n90</p>\n<p>VS</p>\n<p>x = 10<br>\nx = 20<br>\nx = 30<br>\nx = 40</p>\n<p>msg (x)<br>\nmsg (x)<br>\nmsg (x)<br>\nmsg (x)</p>\n<p>// output/displayment:<br>\n40<br>\n40<br>\n40<br>\n40</p>\n<hr>\n<p>lastly...</p>\n<p>VERY IMPORTANT:</p>\n<p>in programming, there's also the 'Assignment' Operation:</p>\n<p>x = 10 // the '10' Integer Value is stored into the 'x' Integer Variable VARIABLE</p>\n<p>player.strength = 100 // the '100' Integer Value is stored into the 'strength' Integer Attribute VARIABLE, which the 'strength' Integer Attribute VARIABLE, is stored within the 'player' Object</p>\n<p>player.alias = \"HK\" // the \"HK\" String Value is stored into the 'alias' String Attribute VARIABLE, which the 'alias' String Attribute VARIABLE, is (also, as Objects can store multiple Attributes) stored within the 'player' Object</p>\n<p>you can NOT switch/reverse an expression of an Assignment Operation around!</p>\n<p>this is because the programming is programmed/parsed to understand it only in a certain syntax order/placement:</p>\n<p>the Final Value on the right side of the '=' Assignment Operator is stored within the VARIABLE on the left side of the '=' Assignment Operator</p>\n<p>for example:</p>\n<p>x = 10 + 20 + 30 // the Final (Integer) Value of '60' is stored within the 'x' Variable VARIABLE</p>\n<p>more examples:</p>\n<p>player.alias = \"HK\" // NO error<br>\n\"HK\" = player.alias // ERROR!</p>\n<p>player.strength = 100 / NO error<br>\n100 = player.strength // ERROR!</p>\n<p>x = 10 // NO error<br>\n10 = x// ERROR!</p>\n<p>whereas in algebra mathematics, unfortunately, they never explain that you're actually doing a 'Comparison' Operation, which is why you can switch/reverse the expression around:</p>\n<p>in algebra math:</p>\n<p>x = 10 // NO error<br>\n10 = x // NO error</p>\n<p>x + 40 = 50 // NO error<br>\n50 = x + 40 // NO error</p>\n<p>in programming, to do a Comparison Operation, you use (as its done within) the 'if' Script/Function (and there's some other Scripts/Functions that also do Comparison Operations):</p>\n<pre><code>if (x = 10) { /* scripting */ } // NO error\nif (10 = x) { /* scripting */ } // NO error\n\nif (player.strength = 100) { /* scripting */ } // NO error\nif (100 = player.strength) { /* scripting */ } // NO error\n\nif (player.alias = \"HK\") { /* scripting */ } // NO error\nif (\"HK\" = player.alias) { /* scripting */ } // NO error\n</code></pre>\n\n",
      "PostDate": "2019-05-03T08:34:24.2513507Z",
      "LastEditDate": "2019-05-03T09:04:50.1784374Z",
      "link": null
    }
  ]
}
