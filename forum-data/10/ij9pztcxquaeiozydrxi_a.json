{
  "Topic": {
    "TopicId": "ij9pztcxquaeiozydrxi_a",
    "ForumId": "10",
    "Title": "Allow a command to require object1 for an action on object2",
    "LastUpdated": "2017-01-08T14:42:02.2175789Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d78c5fd0-5240-49c7-8886-b5590b8bd5ce",
      "UserId": 285064,
      "Username": "jef",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a9807e610847bc8c42e5f3c58dfd7b06?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, I’ve scoured the tutorials and forums for days, because it seems like this should be a common issue, but I can’t figure out how to do it. (FYI: I’m using the offline editor and am more comfortable with the GUI than the Code view.)\r\n\r\nMy game requires the use of certain objects in order to complete certain actions. As written, the game more or less works, but the human playing would have to hit on the exact phraseology in order to succeed. I would like to allow multiple ways for them to input those directives. For example, I want the player to be able to climb a tree, but for them to have to get a specific object first (call it “climbingapparatus”) in order to do so. Here is what I have done:\r\n1.  Create the objects “tree” and “climbingapparatus”  (DONE)\r\n2. On the Verbs tab for the object “tree”, create a Verb “climb” and select “Require another object”  (DONE).  Now the player can select “climbingapparatus” from a menu if they have that object but “climbingapparatus” doesn’t appear in the menu if they haven’t found it yet. \r\n3. Create a bunch of if-thens giving responses for various things the player might try (e.g., attempting to use the wrong object) (DONE)\r\n\r\nSo this method of “Require another object” within a specific verb works OK. But I want the human to be able to input “climb” (by itself) or “climb up” (without specifying the object) or maybe other things like “go up the tree” or “scale the tree” or who knows what else, instead of only allowing for the exact phrase “climb tree”. But I can’t figure out how to implement that. (Note: I am open to re-working the whole thing and ditching what I have done above in order to achieve the desired results. In fact, ideally all the synonymous ways a person could input their instructions would all point to the same section of code (whether that be a Command, a Function, a Verb, or what have you) and if I wanted to modify it later I would only have to change it in one place. (While we’re changing everything anyway, I would probably prefer it to ask for an open-ended response than ask the user to select from a menu, though it would be nice to learn how to do both anyway.) Here is what I have tried:\r\n1. I have created the command “climb” and added synonyms to it (separated by semi-colons in the “pattern” box).  (DONE)\r\n2. I put an if-then in there so that, for example, the command “climb” will only work when the “tree” is reachable. (DONE)\r\n3. I made the command “climb” call up a function “climbing” (DONE) … I don’t know if that is necessary or helpful; it can be removed.\r\n\r\nIn other words, I can take several different user inputs and make them do the same action, as long as that action is defined in a Command or a Function. But I can only figure out how to “require another object” using a Verb. I can’t figure out how to allow for synonyms and still allow the user to input or select the object they want to use for the action. \r\n\r\nFrom what I’ve been reading in the tutorials, guides, and forum discussions, I’m thinking that the answer is going to be one of these functionalities: either I need to use parameters somehow (I still haven’t found a clear enough beginner-level explanation of how to do that), or maybe “Run object’s script attribute” (again, even after reading everything I could find, I still haven’t been able to use that successfully) or maybe “Ask a question” (such as “What object do you want to use?”) or “Show menu” (which may in turn require setting up a list for them to choose from – it would just be reachable objects, probably -- and again I’ve been reading and trialing and erroring and I still can’t figure out how to create a list like that). Etc. \r\n\r\nIf this seems like a lot of work just so they can say “climb” (by itself) as well as “climb tree”, it’s really more than that, because I want to figure out how to do this for not just this one action, but pretty much every major action in the game. Say I want the player to have to use a hammer to break open a closed box. I would like a variety of human inputs (hit box; use hammer; hit box with hammer; smash box; break box; break open box; use hammer on box; hit hammer against box; etc.) to either succeed (if they've specified the right object) or ask them to specify which object they want to use. Ideally I would want to spell out all the if-thens (for what happens when the person tries various ‘incorrect’ objects on the box, etc.) only one time in the program, and then have all the synonyms point to or call that function (or access that script, or whatever the appropriate terminology is).\r\n\r\nThanks in advance.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, I’ve scoured the tutorials and forums for days, because it seems like this should be a common issue, but I can’t figure out how to do it. (FYI: I’m using the offline editor and am more comfortable with the GUI than the Code view.)</p>\n<p>My game requires the use of certain objects in order to complete certain actions. As written, the game more or less works, but the human playing would have to hit on the exact phraseology in order to succeed. I would like to allow multiple ways for them to input those directives. For example, I want the player to be able to climb a tree, but for them to have to get a specific object first (call it “climbingapparatus”) in order to do so. Here is what I have done:</p>\n<ol>\n<li>Create the objects “tree” and “climbingapparatus”  (DONE)</li>\n<li>On the Verbs tab for the object “tree”, create a Verb “climb” and select “Require another object”  (DONE).  Now the player can select “climbingapparatus” from a menu if they have that object but “climbingapparatus” doesn’t appear in the menu if they haven’t found it yet.</li>\n<li>Create a bunch of if-thens giving responses for various things the player might try (e.g., attempting to use the wrong object) (DONE)</li>\n</ol>\n<p>So this method of “Require another object” within a specific verb works OK. But I want the human to be able to input “climb” (by itself) or “climb up” (without specifying the object) or maybe other things like “go up the tree” or “scale the tree” or who knows what else, instead of only allowing for the exact phrase “climb tree”. But I can’t figure out how to implement that. (Note: I am open to re-working the whole thing and ditching what I have done above in order to achieve the desired results. In fact, ideally all the synonymous ways a person could input their instructions would all point to the same section of code (whether that be a Command, a Function, a Verb, or what have you) and if I wanted to modify it later I would only have to change it in one place. (While we’re changing everything anyway, I would probably prefer it to ask for an open-ended response than ask the user to select from a menu, though it would be nice to learn how to do both anyway.) Here is what I have tried:</p>\n<ol>\n<li>I have created the command “climb” and added synonyms to it (separated by semi-colons in the “pattern” box).  (DONE)</li>\n<li>I put an if-then in there so that, for example, the command “climb” will only work when the “tree” is reachable. (DONE)</li>\n<li>I made the command “climb” call up a function “climbing” (DONE) … I don’t know if that is necessary or helpful; it can be removed.</li>\n</ol>\n<p>In other words, I can take several different user inputs and make them do the same action, as long as that action is defined in a Command or a Function. But I can only figure out how to “require another object” using a Verb. I can’t figure out how to allow for synonyms and still allow the user to input or select the object they want to use for the action.</p>\n<p>From what I’ve been reading in the tutorials, guides, and forum discussions, I’m thinking that the answer is going to be one of these functionalities: either I need to use parameters somehow (I still haven’t found a clear enough beginner-level explanation of how to do that), or maybe “Run object’s script attribute” (again, even after reading everything I could find, I still haven’t been able to use that successfully) or maybe “Ask a question” (such as “What object do you want to use?”) or “Show menu” (which may in turn require setting up a list for them to choose from – it would just be reachable objects, probably -- and again I’ve been reading and trialing and erroring and I still can’t figure out how to create a list like that). Etc.</p>\n<p>If this seems like a lot of work just so they can say “climb” (by itself) as well as “climb tree”, it’s really more than that, because I want to figure out how to do this for not just this one action, but pretty much every major action in the game. Say I want the player to have to use a hammer to break open a closed box. I would like a variety of human inputs (hit box; use hammer; hit box with hammer; smash box; break box; break open box; use hammer on box; hit hammer against box; etc.) to either succeed (if they've specified the right object) or ask them to specify which object they want to use. Ideally I would want to spell out all the if-thens (for what happens when the person tries various ‘incorrect’ objects on the box, etc.) only one time in the program, and then have all the synonyms point to or call that function (or access that script, or whatever the appropriate terminology is).</p>\n<p>Thanks in advance.</p>\n\n",
      "PostDate": "2017-01-08T14:42:02.2175789Z",
      "LastEditDate": "2017-01-08T14:42:28.0127541Z"
    },
    {
      "PostId": "0547f1d4-8c6e-4cdc-a314-460e03274e6c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the easiest way (any/all 'if'/programming is a lot of work: computers are stupid, programming, even the best/perfect code design, still takes many more lines than it does between how humans communicating with each other) would be to have two (or rather 3) custom Commands of your own:\r\n\r\n(in my example, I use the '#text#' type Parameter, but you can use '#object#' type Parameter too, either and both-together can work, but they require a bit of different and/or tricky scripting)\r\n\r\n```\r\n<command name=\"no_input_climb_command\">\r\n  <pattern>climb</pattern>\r\n  <script>\r\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\r\n  </script>\r\n</command>\r\n\r\n<command name=\"input_climb_1_command\">\r\n  <pattern>scale #text#</pattern> // I'm using 'scale' as there might be issues with the parsing of the patterns of these 3 Commands\r\n  <script>\r\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\r\n  </script>\r\n</command>\r\n\r\n<command name=\"input_climb_2_command\">\r\n  <pattern>ascend #text_1# with #text_2#;ascend #text_1# using #text_2#;etc etc etc</pattern> // I'm using 'ascend' as there might be issues with the parsing of the patterns of these 3 Commands\r\n  <script>\r\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\r\n  </script>\r\n</command>\r\n```\r\n\r\n-----------------\r\n\r\nhow the Command's Parameters (#text# and/or #object#) work:\r\n\r\nin the Command's 'Pattern' text box, to use the Parameters, you have to have:\r\n\r\n#text# or #textXXX# or #object# or #objectXXX#\r\n\r\nquest recognizes the Parameters via their first part:\r\n\r\n#text\r\n#object\r\n\r\nafter this you can add whatever you want onto it (my 'XXX' representation), for example:\r\n\r\n#text_1\r\n#text_2\r\n#textfakljdklasjdlkajdkl // though never do this, lol... make it more readable for yourself --- but hopefully you get the idea I'm trying to convey\r\n#textppppppppppp\r\n\r\n#object_1\r\n#object_2\r\n#objectkdfljjfoiefkn\r\n#objectwwwwwww\r\n\r\nand then lastly of course you need to add the ending '#' to it:\r\n\r\n#text_1#\r\n#text_2#\r\n#textfakljdklasjdlkajdkl#\r\n#textppppppppppp#\r\n\r\n#object_1#\r\n#object_2#\r\n#objectkdfljjfoiefkn#\r\n#objectwwwwwww#\r\n\r\nyou also do NOT have to add anything to it if you're just using a single Parameter of each type (adding to its name is really just required when you want/need to use multiple Parameters):\r\n\r\n#text#\r\n#object#\r\n\r\n----------------\r\n\r\nthe '#....#' tells quest that this position/segment in the entire/full input by the person playing the game is to be used as an input (via storing/setting it to the Parameter) by the Command's scripting.\r\n\r\nHowever, the Parameter Variable itself (what is used in the Command's scripting) is with OUT the '#s', for example:\r\n\r\n```\r\n<command name=\"kiss_command\">\r\n  <pattern>kiss #text#</pattern>\r\n  <script>\r\n    msg (\"You kiss the \" + text + \".\")\r\n  </script>\r\n</command> \r\n\r\n// input: kiss frog\r\n// output: You kiss the frog.\r\n// so what is going on:\r\n// 'kiss' is the what I call the 'indicator/activator' word/term/command/string (the first word/term/command/string in your pattern), as it tells the parser what command you want to be doing: meaning that every command needs to have a different first word/term/command/string for their pattern to identify them from each other.\r\n// then after the (space), we got the specified position of what will be used (stored/set'ed/saved within) by the 'text' Parameter Variable, which in this case is 'frog', see below:\r\n// text <==== #text# <===== \"frog\"\r\n// text = #text# = \"frog\"\r\n// text = \"frog\"\r\n//\r\n// and now within the Command's scripting, our 'msg' Script is using our 'text' Parameter variable, to give us the result/output:\r\n// You kiss the frog.\r\n```\r\n\r\n------\r\n\r\nlet's look at a more complex Command, so you can see how everything works:\r\n\r\n```\r\n<command name=\"mix_command\">\r\n  <pattern>mix #text# #text_1# #text_2# #textABC# #object# #object_1# #object_2# #objectABC#</pattern>\r\n  <script>\r\n    msg (text)\r\n    msg (text_1)\r\n    msg (text_2)\r\n    msg (textABC)\r\n    msg (object.name)\r\n    msg (object_1.name)\r\n    msg (object_2.name)\r\n    msg (objectABC.name)\r\n  </script>\r\n</command>\r\n\r\n<object name=\"room\">\r\n</room>\r\n\r\n<object name=\"player\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"apple\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"orange\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"banana\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n<object name=\"grape\">\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n</object>\r\n\r\n// input by person playing game: mix red blue yellow green apple orange banana grape\r\n// output:\r\nred\r\nblue\r\nyellow\r\ngreen\r\napple\r\norange\r\nbanana\r\ngrape\r\n\r\n--------------------\r\n\r\nnotice the difference required for using the '#object#' vs using '#text#\r\n\r\n-----------------\r\n\r\nfor #text# to an Object:\r\n\r\nmy_object_variable = GetObject (text)\r\n\r\nor\r\n\r\nforeach (object_placeholder_variable, AllObjects()) {\r\n  if (object_placeholder_variable.alias = text) {\r\n    game.my_object_attribute = object_placeholder_variable\r\n  }\r\n}\r\n\r\n-----\r\n\r\nfor #object#:\r\n\r\nthis only looks for if the Object is in the same room as you, so if you want to use an Object not in the same room as you, then you got to use that 'foreach (placeholder_variable, AllObjects())' shown above (though with some small tweaking as you're working with #object# and not #text#)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think the easiest way (any/all 'if'/programming is a lot of work: computers are stupid, programming, even the best/perfect code design, still takes many more lines than it does between how humans communicating with each other) would be to have two (or rather 3) custom Commands of your own:</p>\n<p>(in my example, I use the '#text#' type Parameter, but you can use '#object#' type Parameter too, either and both-together can work, but they require a bit of different and/or tricky scripting)</p>\n<pre><code>&lt;command name=\"no_input_climb_command\"&gt;\n  &lt;pattern&gt;climb&lt;/pattern&gt;\n  &lt;script&gt;\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=\"input_climb_1_command\"&gt;\n  &lt;pattern&gt;scale #text#&lt;/pattern&gt; // I'm using 'scale' as there might be issues with the parsing of the patterns of these 3 Commands\n  &lt;script&gt;\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=\"input_climb_2_command\"&gt;\n  &lt;pattern&gt;ascend #text_1# with #text_2#;ascend #text_1# using #text_2#;etc etc etc&lt;/pattern&gt; // I'm using 'ascend' as there might be issues with the parsing of the patterns of these 3 Commands\n  &lt;script&gt;\n    // it sounds like you understand the scripting needed to handle all of this, but if you need any help, let me know\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>how the Command's Parameters (#text# and/or #object#) work:</p>\n<p>in the Command's 'Pattern' text box, to use the Parameters, you have to have:</p>\n<p>#text# or #textXXX# or #object# or #objectXXX#</p>\n<p>quest recognizes the Parameters via their first part:</p>\n<p>#text<br>\n#object</p>\n<p>after this you can add whatever you want onto it (my 'XXX' representation), for example:</p>\n<p>#text_1<br>\n#text_2<br>\n#textfakljdklasjdlkajdkl // though never do this, lol... make it more readable for yourself --- but hopefully you get the idea I'm trying to convey<br>\n#textppppppppppp</p>\n<p>#object_1<br>\n#object_2<br>\n#objectkdfljjfoiefkn<br>\n#objectwwwwwww</p>\n<p>and then lastly of course you need to add the ending '#' to it:</p>\n<p>#text_1#<br>\n#text_2#<br>\n#textfakljdklasjdlkajdkl#<br>\n#textppppppppppp#</p>\n<p>#object_1#<br>\n#object_2#<br>\n#objectkdfljjfoiefkn#<br>\n#objectwwwwwww#</p>\n<p>you also do NOT have to add anything to it if you're just using a single Parameter of each type (adding to its name is really just required when you want/need to use multiple Parameters):</p>\n<p>#text#<br>\n#object#</p>\n<hr>\n<p>the '#....#' tells quest that this position/segment in the entire/full input by the person playing the game is to be used as an input (via storing/setting it to the Parameter) by the Command's scripting.</p>\n<p>However, the Parameter Variable itself (what is used in the Command's scripting) is with OUT the '#s', for example:</p>\n<pre><code>&lt;command name=\"kiss_command\"&gt;\n  &lt;pattern&gt;kiss #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (\"You kiss the \" + text + \".\")\n  &lt;/script&gt;\n&lt;/command&gt; \n\n// input: kiss frog\n// output: You kiss the frog.\n// so what is going on:\n// 'kiss' is the what I call the 'indicator/activator' word/term/command/string (the first word/term/command/string in your pattern), as it tells the parser what command you want to be doing: meaning that every command needs to have a different first word/term/command/string for their pattern to identify them from each other.\n// then after the (space), we got the specified position of what will be used (stored/set'ed/saved within) by the 'text' Parameter Variable, which in this case is 'frog', see below:\n// text &lt;==== #text# &lt;===== \"frog\"\n// text = #text# = \"frog\"\n// text = \"frog\"\n//\n// and now within the Command's scripting, our 'msg' Script is using our 'text' Parameter variable, to give us the result/output:\n// You kiss the frog.\n</code></pre>\n<hr>\n<p>let's look at a more complex Command, so you can see how everything works:</p>\n<pre><code>&lt;command name=\"mix_command\"&gt;\n  &lt;pattern&gt;mix #text# #text_1# #text_2# #textABC# #object# #object_1# #object_2# #objectABC#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (text)\n    msg (text_1)\n    msg (text_2)\n    msg (textABC)\n    msg (object.name)\n    msg (object_1.name)\n    msg (object_2.name)\n    msg (objectABC.name)\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/room&gt;\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"apple\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orange\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"banana\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"grape\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n&lt;/object&gt;\n\n// input by person playing game: mix red blue yellow green apple orange banana grape\n// output:\nred\nblue\nyellow\ngreen\napple\norange\nbanana\ngrape\n\n--------------------\n\nnotice the difference required for using the '#object#' vs using '#text#\n\n-----------------\n\nfor #text# to an Object:\n\nmy_object_variable = GetObject (text)\n\nor\n\nforeach (object_placeholder_variable, AllObjects()) {\n  if (object_placeholder_variable.alias = text) {\n    game.my_object_attribute = object_placeholder_variable\n  }\n}\n\n-----\n\nfor #object#:\n\nthis only looks for if the Object is in the same room as you, so if you want to use an Object not in the same room as you, then you got to use that 'foreach (placeholder_variable, AllObjects())' shown above (though with some small tweaking as you're working with #object# and not #text#)\n</code></pre>\n\n",
      "PostDate": "2017-01-08T19:34:40.1893656Z",
      "LastEditDate": "2017-01-08T21:50:27.9056229Z"
    },
    {
      "PostId": "b0f56d9d-85db-4c01-a922-38f14775ef39",
      "UserId": 285307,
      "Username": "ScaryCat",
      "AvatarUrl": "https://secure.gravatar.com/avatar/fce023e61afb459dde4e21aa30c42c68?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could try \r\n_verb: \"climb tree\"_\r\n_if: player is carrying object: climbing apparatus._ \r\nand then add in the subsection of that the script _Move object: player - to object/room: treetop._ \r\nOr something like that. Then no matter what they type, it will only work if they have that object in their inventory. \r\nHope this helps, and that I understood the problem correctly. This would be in the web version, but I imagine the same could be done in a similar way for the offline version. ",
      "EditableFormat": "markdown",
      "HTML": "<p>You could try<br>\n<em>verb: \"climb tree\"</em><br>\n<em>if: player is carrying object: climbing apparatus.</em><br>\nand then add in the subsection of that the script <em>Move object: player - to object/room: treetop.</em><br>\nOr something like that. Then no matter what they type, it will only work if they have that object in their inventory.<br>\nHope this helps, and that I understood the problem correctly. This would be in the web version, but I imagine the same could be done in a similar way for the offline version.</p>\n\n",
      "PostDate": "2017-01-09T20:15:55.1652425Z",
      "LastEditDate": null
    },
    {
      "PostId": "cff19162-1a7d-492f-88f4-c5e5b4aa530a",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can allow for synonyms with verbs, too, in the same way you add synonyms for the commands.  If this helps.\r\n\r\nYou can also use 'fancy' commands like:\r\n\r\n^(pour|dump|add|empty|put|use) (the |)(bottle|water|bottle of water) (on|over|into|onto) (the |)(seedling)\r\n\r\nObviously, this is an example only.  Just put the verbs and nouns in as you need them.  =)\r\n\r\nNote:  I am no expert on this.  It is basically a copy-paste job from The Pixie (I think) from many moons ago.  =)\r\nThis will save you some trouble with duplicate command entries.  I found this very helpful when I was doing similar stuff.",
      "EditableFormat": "markdown",
      "HTML": "<p>You can allow for synonyms with verbs, too, in the same way you add synonyms for the commands.  If this helps.</p>\n<p>You can also use 'fancy' commands like:</p>\n<p>^(pour|dump|add|empty|put|use) (the |)(bottle|water|bottle of water) (on|over|into|onto) (the |)(seedling)</p>\n<p>Obviously, this is an example only.  Just put the verbs and nouns in as you need them.  =)</p>\n<p>Note:  I am no expert on this.  It is basically a copy-paste job from The Pixie (I think) from many moons ago.  =)<br>\nThis will save you some trouble with duplicate command entries.  I found this very helpful when I was doing similar stuff.</p>\n\n",
      "PostDate": "2017-01-09T21:07:13.4976889Z",
      "LastEditDate": "2017-01-09T21:12:47.6707912Z"
    },
    {
      "PostId": "294d849f-ae13-423f-b21f-9b925d24f445",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is not straightforward.\r\n\r\nI would do this as three separate commands, one with no nouns (CLIMB, etc), one with one (CLIMB TREE, etc.) and one with two (CLIMB TREE WITH CLIMBINGAPPARATUS, etc.). In addition you might also want to do USE CLIMBINGAPPARATUS...\r\n\r\nFor each one you need to check the relevent objects are present and, for some, that the right object has been used in the command. If all is okay, have them all call a function, and have the function handle the actual response.\r\n\r\nYou might want to look at this:\r\nhttps://github.com/ThePix/quest/wiki/Using-Complex-Commands",
      "EditableFormat": "markdown",
      "HTML": "<p>This is not straightforward.</p>\n<p>I would do this as three separate commands, one with no nouns (CLIMB, etc), one with one (CLIMB TREE, etc.) and one with two (CLIMB TREE WITH CLIMBINGAPPARATUS, etc.). In addition you might also want to do USE CLIMBINGAPPARATUS...</p>\n<p>For each one you need to check the relevent objects are present and, for some, that the right object has been used in the command. If all is okay, have them all call a function, and have the function handle the actual response.</p>\n<p>You might want to look at this:<br>\nhttps://github.com/ThePix/quest/wiki/Using-Complex-Commands</p>\n\n",
      "PostDate": "2017-01-09T21:49:35.8695892Z",
      "LastEditDate": "2017-01-09T21:49:50.1375219Z"
    },
    {
      "PostId": "f4bffb8a-2949-4528-a27f-f1cfe44b8046",
      "UserId": 285064,
      "Username": "jef",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a9807e610847bc8c42e5f3c58dfd7b06?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you everyone for your replies. \r\n\r\nPixie, I discovered your Complex Command page just after I posted the original question, and found it extremely helpful. In case you're curious, I was initially confused by your statement that \"Quest will already have assigned values to two special variables, in this case called object_cord and object_hook. We do not know specifically what they are\" and it took me some trial and error to figure out how the computer assigned objects to those variables. I think the names object_cord and object_hook threw me off, because I was expecting them to be the cord and the hook. But they weren't necessarily. And you said we didn't know what objects the computer assigned to those variables (!). So they could be anything? It confused me for a while. But now I get it, and it seems obvious in retrospect: they are whatever the person typed into those places when they input the command. (HK, in retrospect, it looks like you were explaining that, but my eyes must have glazed over before that the first time I read your response. Sorry.) Anyway, overall, like I said, very helpful, I've had the tab open all week referencing that page.\r\n\r\nScaryCat, thanks, I am sort of using your method but I would still like to improve it (see below). \r\n\r\nHK, thank you very much for your detailed response. It's still above my level of comprehension, but every time I read through it I understand a little bit more. For all I know you've solved my problem completely, but if so I haven't understood it yet. But I especially appreciate the explanation of Parameters, because I didn't know what those were at all, and now I kind of do. \r\n\r\nXanMag, your brief reply was the most helpful so far. I didn't know verbs could have synonyms; that's one big reason I was trying to use commands and functions. So thanks for that. Related to that, I'm just going to put a note here for future reference of myself or anyone else with the same issues, according to what I've figured out:\r\n 1. you can edit the consequences of a verb on the Verbs tab of a specific object, but you can't add synonyms there;  you have to do that when you first create it, or do it to the whole verb by clicking on it in the Verbs section of the tree on the left. Best I can tell, the Pattern field can be filled in with synonyms like a Command can, whereas the Attribute is the unique identifier, like an object's \"Name\".\r\n2. synonyms that start with the same word (like \"climb\" and \"climb up\") won't work right if you put the shorter one first (Command Pattern: climb; climb up), because if the person types \"climb up tree\" the program will match it to the verb (or command) \"climb\" first and then it will think \"up tree\" is an object (which it doesn't recognize) but if you put the shorter one last (Command Pattern: climb up; climb) then it will work right (at least so far, for me) because it will try to match \"climb up\" before it looks at \"climb\", so it will recognize \"tree\" as an object of the verb \"climb up\" instead of trying to make \"up tree\" into an object of the verb \"climb\". Or at least, I assume that's what it's doing; either way, it seems to be working that way.\r\n\r\n**But I'm still not sure about this part:**\r\nHow can I prompt the user to input the object they want to use, if they don't choose an object. On one of the required actions in my game, I kind of have it set up the way ScaryCat suggested, where if the player has the right object then the action works and if they don't then it doesn't. But what I would like to happen is for the computer to prompt the user to input the object they want to use. To stick with the climbing example, here is what I would like to happen:\r\n1. If the user types \"climb tree with climbingapparatus\" then it should work; they have specified both necessary objects. I can do this with Commands thanks to your previous responses and Pixie's tutorial. \r\n2. If they just type \"climb tree\" (specifying only one of the necessary object: the direct object of the verb) then I would like them to be asked which object they want to use to climb it. (This can be done easily with a Verb by selecting Require Another Object, and now that I know Verbs can have synonyms then that solves a lot of my problem because I didn't want to set up the same list of objects and results for a whole mess of different verbs, but still, see below.)\r\n3. If they type \"climb using climbingapparatus\" (specifying only the second [indirect?] object) then I would like it to work -- because the tree is the only climbable thing around -- instead of requiring them to get the wording exactly right by specifying the tree. (Again, I can now make a Command incorporating an object like this, thanks to you all.)\r\n4. **Here's where I'm struggling:** If they just type \"climb\" (without specifying any objects) then, like option 2 above, I would like them to be asked what they want to use to climb and let them input a response. Since they did not input an object, it seems this cannot be a Verb, it must be a Command. And there doesn't seem to be a Require Another Object option for Commands. So... how can I prompt them to input an object, and then use their input to drive different consequences. (Right now I have it set up with just a message like \"How do you want to climb?\", but it's just a message and their response is in no way related to previous inputs or outputs, so they would have to retype the whole directive (including the word \"climb\"), instead of just answering a question like \"Which object will you use to climb?\" and they can literally just say \"climbingapparatus\" (or some other object, which won't work).)\r\n\r\nNote: In situations where they have not specified the object to use, I am willing to settle for a popup menu where the user selects from the objects available -- but in a perfect world, I want my human player to have to come up with the idea of using that object themself, not just pick it from a list. This is because in the game the thing we've been calling \"climbingapparatus\" is not actually an item traditionally used for climbing trees, although it will get the job done. But I want the player to think of it. If when they type \"climb tree\" they are presented with a list of objects to use, they may just try all of them until they hit the right one, and again, it doesn't really require the human player to figure anything out. Or, using ScaryCat's idea (and I have one set up that way now), if I make it so climbing is successful just by the mere fact of them having the object, then, again, they can succeed without necessarily figuring out the puzzle; they could just go around and collect all the objects and then type \"climb tree\" and succeed without actually coming up with the correct idea for _how_ to climb it.  I would like them to have to have the idea of using that object as a method of climbing a tree, and tell the computer to do that. And that applies equally whether they type \"climb tree\" or just \"climb\".\r\n\r\nThanks again, everyone. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you everyone for your replies.</p>\n<p>Pixie, I discovered your Complex Command page just after I posted the original question, and found it extremely helpful. In case you're curious, I was initially confused by your statement that \"Quest will already have assigned values to two special variables, in this case called object_cord and object_hook. We do not know specifically what they are\" and it took me some trial and error to figure out how the computer assigned objects to those variables. I think the names object_cord and object_hook threw me off, because I was expecting them to be the cord and the hook. But they weren't necessarily. And you said we didn't know what objects the computer assigned to those variables (!). So they could be anything? It confused me for a while. But now I get it, and it seems obvious in retrospect: they are whatever the person typed into those places when they input the command. (HK, in retrospect, it looks like you were explaining that, but my eyes must have glazed over before that the first time I read your response. Sorry.) Anyway, overall, like I said, very helpful, I've had the tab open all week referencing that page.</p>\n<p>ScaryCat, thanks, I am sort of using your method but I would still like to improve it (see below).</p>\n<p>HK, thank you very much for your detailed response. It's still above my level of comprehension, but every time I read through it I understand a little bit more. For all I know you've solved my problem completely, but if so I haven't understood it yet. But I especially appreciate the explanation of Parameters, because I didn't know what those were at all, and now I kind of do.</p>\n<p>XanMag, your brief reply was the most helpful so far. I didn't know verbs could have synonyms; that's one big reason I was trying to use commands and functions. So thanks for that. Related to that, I'm just going to put a note here for future reference of myself or anyone else with the same issues, according to what I've figured out:</p>\n<ol>\n<li>you can edit the consequences of a verb on the Verbs tab of a specific object, but you can't add synonyms there;  you have to do that when you first create it, or do it to the whole verb by clicking on it in the Verbs section of the tree on the left. Best I can tell, the Pattern field can be filled in with synonyms like a Command can, whereas the Attribute is the unique identifier, like an object's \"Name\".</li>\n<li>synonyms that start with the same word (like \"climb\" and \"climb up\") won't work right if you put the shorter one first (Command Pattern: climb; climb up), because if the person types \"climb up tree\" the program will match it to the verb (or command) \"climb\" first and then it will think \"up tree\" is an object (which it doesn't recognize) but if you put the shorter one last (Command Pattern: climb up; climb) then it will work right (at least so far, for me) because it will try to match \"climb up\" before it looks at \"climb\", so it will recognize \"tree\" as an object of the verb \"climb up\" instead of trying to make \"up tree\" into an object of the verb \"climb\". Or at least, I assume that's what it's doing; either way, it seems to be working that way.</li>\n</ol>\n<p><strong>But I'm still not sure about this part:</strong><br>\nHow can I prompt the user to input the object they want to use, if they don't choose an object. On one of the required actions in my game, I kind of have it set up the way ScaryCat suggested, where if the player has the right object then the action works and if they don't then it doesn't. But what I would like to happen is for the computer to prompt the user to input the object they want to use. To stick with the climbing example, here is what I would like to happen:</p>\n<ol>\n<li>If the user types \"climb tree with climbingapparatus\" then it should work; they have specified both necessary objects. I can do this with Commands thanks to your previous responses and Pixie's tutorial.</li>\n<li>If they just type \"climb tree\" (specifying only one of the necessary object: the direct object of the verb) then I would like them to be asked which object they want to use to climb it. (This can be done easily with a Verb by selecting Require Another Object, and now that I know Verbs can have synonyms then that solves a lot of my problem because I didn't want to set up the same list of objects and results for a whole mess of different verbs, but still, see below.)</li>\n<li>If they type \"climb using climbingapparatus\" (specifying only the second [indirect?] object) then I would like it to work -- because the tree is the only climbable thing around -- instead of requiring them to get the wording exactly right by specifying the tree. (Again, I can now make a Command incorporating an object like this, thanks to you all.)</li>\n<li><strong>Here's where I'm struggling:</strong> If they just type \"climb\" (without specifying any objects) then, like option 2 above, I would like them to be asked what they want to use to climb and let them input a response. Since they did not input an object, it seems this cannot be a Verb, it must be a Command. And there doesn't seem to be a Require Another Object option for Commands. So... how can I prompt them to input an object, and then use their input to drive different consequences. (Right now I have it set up with just a message like \"How do you want to climb?\", but it's just a message and their response is in no way related to previous inputs or outputs, so they would have to retype the whole directive (including the word \"climb\"), instead of just answering a question like \"Which object will you use to climb?\" and they can literally just say \"climbingapparatus\" (or some other object, which won't work).)</li>\n</ol>\n<p>Note: In situations where they have not specified the object to use, I am willing to settle for a popup menu where the user selects from the objects available -- but in a perfect world, I want my human player to have to come up with the idea of using that object themself, not just pick it from a list. This is because in the game the thing we've been calling \"climbingapparatus\" is not actually an item traditionally used for climbing trees, although it will get the job done. But I want the player to think of it. If when they type \"climb tree\" they are presented with a list of objects to use, they may just try all of them until they hit the right one, and again, it doesn't really require the human player to figure anything out. Or, using ScaryCat's idea (and I have one set up that way now), if I make it so climbing is successful just by the mere fact of them having the object, then, again, they can succeed without necessarily figuring out the puzzle; they could just go around and collect all the objects and then type \"climb tree\" and succeed without actually coming up with the correct idea for <em>how</em> to climb it.  I would like them to have to have the idea of using that object as a method of climbing a tree, and tell the computer to do that. And that applies equally whether they type \"climb tree\" or just \"climb\".</p>\n<p>Thanks again, everyone.</p>\n\n",
      "PostDate": "2017-01-14T03:22:25.5445899Z",
      "LastEditDate": null
    },
    {
      "PostId": "b5e93cf6-77bb-4098-9692-39aab8f051e3",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "prompting (displayment/output for the) person playing the game is via the 'msg' Script (GUI/Editor: run as script -> add new script -> 'output' section -> 'print a message' Script -> [MESSAGE]:text/string ONLY, or, [EXPRESSION]:\"TEXT/string only\" or VARIABLE only or \"TEXT/string\"+VARIABLE, script options)\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/msg.html\r\n\r\nyou can also use other built-in Functions too, which do/have prompting as a part of them:\r\n\r\n'show menu', 'ShowMenu', 'ask', 'Ask', etc etc etc\r\n\r\n----------\r\n\r\nthere's only two ways to get typed-in input from the person playing the game:\r\n\r\n1. the 'get input' Script/Function (GUI/Editor: run as script -> add new script -> 'output' section/category... I think -> 'get input' Script)\r\n\r\n2. Commands (the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html )\r\n\r\n------\r\n\r\nfor example:\r\n\r\n```\r\nmsg (\"Object for climbing the tree?\")\r\nget input {\r\n  // quest, for 'get input', 'show menu / ShowMenu', and 'ask/Ask', automatically (hidden from you) sets your input to the built-in 'result' Variable:\r\n  // result = YOUR_INPUT\r\n  // which, you can then use 'result', such as seen below:\r\n  if (GetObject (result) = climbingapparatus or climbingapparatus.alias = result or result = \"climbingapparatus\") {\r\n    // your climbing the tree scripting/script(s)\r\n  } else {\r\n    msg (\"That object doesn't work and/or wrong input\")\r\n  }\r\n}\r\n```\r\n\r\n--------------\r\n\r\nyou also may need to use this design, and/or you can jsut study it (ask me if you aren't able to understand it):\r\n\r\n(from my old combat code, but the Credit goes to Pertex for this code, as he/she helped me with my combat code)\r\n\r\n```\r\n<function name=\"battle_system\" parameters=\"self,text\" type=\"boolean\">\r\n    enemy = GetObject (text)\r\n    if (enemy = null) {\r\n      foreach (obj,AllObjects()) {\r\n        if (obj.alias=text) {\r\n          enemy = obj\r\n        }\r\n      }\r\n    }\r\n    if (enemy = null) {\r\n      msg (\"There is no \" + text + \" here.\")\r\n    }\r\n  }\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>prompting (displayment/output for the) person playing the game is via the 'msg' Script (GUI/Editor: run as script -&gt; add new script -&gt; 'output' section -&gt; 'print a message' Script -&gt; [MESSAGE]:text/string ONLY, or, [EXPRESSION]:\"TEXT/string only\" or VARIABLE only or \"TEXT/string\"+VARIABLE, script options)</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/msg.html</p>\n<p>you can also use other built-in Functions too, which do/have prompting as a part of them:</p>\n<p>'show menu', 'ShowMenu', 'ask', 'Ask', etc etc etc</p>\n<hr>\n<p>there's only two ways to get typed-in input from the person playing the game:</p>\n<ol>\n<li>\n<p>the 'get input' Script/Function (GUI/Editor: run as script -&gt; add new script -&gt; 'output' section/category... I think -&gt; 'get input' Script)</p>\n</li>\n<li>\n<p>Commands (the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html )</p>\n</li>\n</ol>\n<hr>\n<p>for example:</p>\n<pre><code>msg (\"Object for climbing the tree?\")\nget input {\n  // quest, for 'get input', 'show menu / ShowMenu', and 'ask/Ask', automatically (hidden from you) sets your input to the built-in 'result' Variable:\n  // result = YOUR_INPUT\n  // which, you can then use 'result', such as seen below:\n  if (GetObject (result) = climbingapparatus or climbingapparatus.alias = result or result = \"climbingapparatus\") {\n    // your climbing the tree scripting/script(s)\n  } else {\n    msg (\"That object doesn't work and/or wrong input\")\n  }\n}\n</code></pre>\n<hr>\n<p>you also may need to use this design, and/or you can jsut study it (ask me if you aren't able to understand it):</p>\n<p>(from my old combat code, but the Credit goes to Pertex for this code, as he/she helped me with my combat code)</p>\n<pre><code>&lt;function name=\"battle_system\" parameters=\"self,text\" type=\"boolean\"&gt;\n    enemy = GetObject (text)\n    if (enemy = null) {\n      foreach (obj,AllObjects()) {\n        if (obj.alias=text) {\n          enemy = obj\n        }\n      }\n    }\n    if (enemy = null) {\n      msg (\"There is no \" + text + \" here.\")\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2017-01-14T05:11:48.4139996Z",
      "LastEditDate": "2017-01-14T05:19:42.7499483Z"
    },
    {
      "PostId": "46add64d-5615-48fe-96be-77ccf89acdad",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "actually, this might be a good way of doing it (if it works, here you go, it's more powerful/versatile/scalable than what you wanted for your game design, should you want to use a more complex game design in the future, otherwise it still works fine for what you want now --- again if it works, lol):\r\n\r\n(Credit also goes to you, for your discovery/testing of how the parsing works, as I've used that in/for its pattern, hehe)\r\n\r\n```\r\n<command name=\"climb_command\">\r\n  <pattern>climb with #text_2#;climb using #text_2#;climb #text_1# with #text_2#;climb #text_1# using #text_2#;climb #text_1#;climb</pattern>\r\n  <script>\r\n    if (text_2 = null) {\r\n      if (text_1 = null) {\r\n        msg (\"Climb what?\")\r\n        get input {\r\n          if (Contains (player.parent, GetObject (result)) and GetString (GetObject (result), \"type_of_object\") = \"tree\") {\r\n            msg (\"Climb tree with/using what?\")\r\n            get input {\r\n              if (result = \"climbingapparatus\") {\r\n                if (Got (GetObject(result))) {\r\n                  // your able to climb tree's script(s)\r\n                } else {\r\n                  msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\r\n                }\r\n              } else {\r\n                msg (\"Wrong input\")\r\n              }\r\n            }\r\n          } else {\r\n            msg (\"wrong input\")\r\n          }\r\n        }\r\n      } else if (Contains (player.parent, GetObject (text_1)) and GetString (GetObject (text_1), \"type_of_object\") = \"tree\") {\r\n        msg (\"Climb tree with/using what?\")\r\n        get input {\r\n          if (result = \"climbingapparatus\") {\r\n            if (Got (GetObject(result))) {\r\n              // your able to climb tree's script(s)\r\n            } else {\r\n              msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\r\n            }\r\n          } else {\r\n            msg (\"Wrong input\")\r\n          }\r\n        }\r\n      } else {\r\n        msg (\"Wrong input\")\r\n      }\r\n    } else if (Contains (player.parent, GetObject (text_1)) and GetString (GetObject (text_1), \"type_of_object\") = \"tree\") {\r\n      if (text_2 = \"climbingapparatus\") {\r\n        if (Got (GetObject(text_2))) {\r\n          // your able to climb tree's script(s)\r\n        } else {\r\n          msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\r\n        }\r\n      } else {\r\n        msg (\"Wrong input\")\r\n      }\r\n    } else {\r\n      msg (\"Wrong input\")\r\n    }\r\n  </script>\r\n</command>\r\n\r\n// example of the design concept (you have to have your climb'able tree Objects have (add/create) a String Attribute named 'type_of_object' with their string Value as 'tree' --- see my 'tree_type' Object Type / Type below the 'ogre_1' Object, below):\r\n\r\n<object name=\"room_1\">\r\n</object>\r\n\r\n<object name=\"room_2\">\r\n</object>\r\n\r\n<object name=\"room_3\">\r\n  <inherit name=\"shop_type\" />\r\n</object>\r\n\r\n<object name=\"tree_1\">\r\n  <inherit name=\"tree_type\" />\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n</object>\r\n\r\n<object name=\"tree_2\">\r\n  <inherit name=\"tree_type\" />\r\n  <attr name=\"parent\" type=\"object\">room_2</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"parent\" type=\"object\">room_1</attr>\r\n</object>\r\n\r\n<object name=\"ogre_1\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"parent\" type=\"object\">room_2</attr>\r\n</object>\r\n\r\n<type name=\"tree_type\">\r\n  <attr name=\"type_of_object\" type=\"string\">tree</attr>\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n  <attr name=\"type_of_object\" type=\"string\">monster</attr>\r\n  // blah Attributes (life, condition/dead, damage, defense, fight, etc etc etc)\r\n</type>\r\n\r\n<type name=\"shop_type\">\r\n  <attr name=\"type_of_object\" type=\"string\">shop</attr>\r\n  // blah Attributes (buy, sell, etc etc etc)\r\n</type>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>actually, this might be a good way of doing it (if it works, here you go, it's more powerful/versatile/scalable than what you wanted for your game design, should you want to use a more complex game design in the future, otherwise it still works fine for what you want now --- again if it works, lol):</p>\n<p>(Credit also goes to you, for your discovery/testing of how the parsing works, as I've used that in/for its pattern, hehe)</p>\n<pre><code>&lt;command name=\"climb_command\"&gt;\n  &lt;pattern&gt;climb with #text_2#;climb using #text_2#;climb #text_1# with #text_2#;climb #text_1# using #text_2#;climb #text_1#;climb&lt;/pattern&gt;\n  &lt;script&gt;\n    if (text_2 = null) {\n      if (text_1 = null) {\n        msg (\"Climb what?\")\n        get input {\n          if (Contains (player.parent, GetObject (result)) and GetString (GetObject (result), \"type_of_object\") = \"tree\") {\n            msg (\"Climb tree with/using what?\")\n            get input {\n              if (result = \"climbingapparatus\") {\n                if (Got (GetObject(result))) {\n                  // your able to climb tree's script(s)\n                } else {\n                  msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\n                }\n              } else {\n                msg (\"Wrong input\")\n              }\n            }\n          } else {\n            msg (\"wrong input\")\n          }\n        }\n      } else if (Contains (player.parent, GetObject (text_1)) and GetString (GetObject (text_1), \"type_of_object\") = \"tree\") {\n        msg (\"Climb tree with/using what?\")\n        get input {\n          if (result = \"climbingapparatus\") {\n            if (Got (GetObject(result))) {\n              // your able to climb tree's script(s)\n            } else {\n              msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\n            }\n          } else {\n            msg (\"Wrong input\")\n          }\n        }\n      } else {\n        msg (\"Wrong input\")\n      }\n    } else if (Contains (player.parent, GetObject (text_1)) and GetString (GetObject (text_1), \"type_of_object\") = \"tree\") {\n      if (text_2 = \"climbingapparatus\") {\n        if (Got (GetObject(text_2))) {\n          // your able to climb tree's script(s)\n        } else {\n          msg (\"You need to be carrying that Object in your inventory in order to be able to use it here\")\n        }\n      } else {\n        msg (\"Wrong input\")\n      }\n    } else {\n      msg (\"Wrong input\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n// example of the design concept (you have to have your climb'able tree Objects have (add/create) a String Attribute named 'type_of_object' with their string Value as 'tree' --- see my 'tree_type' Object Type / Type below the 'ogre_1' Object, below):\n\n&lt;object name=\"room_1\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room_2\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"room_3\"&gt;\n  &lt;inherit name=\"shop_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"tree_1\"&gt;\n  &lt;inherit name=\"tree_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"tree_2\"&gt;\n  &lt;inherit name=\"tree_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_2&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ogre_1\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;room_2&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=\"tree_type\"&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;tree&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;monster&lt;/attr&gt;\n  // blah Attributes (life, condition/dead, damage, defense, fight, etc etc etc)\n&lt;/type&gt;\n\n&lt;type name=\"shop_type\"&gt;\n  &lt;attr name=\"type_of_object\" type=\"string\"&gt;shop&lt;/attr&gt;\n  // blah Attributes (buy, sell, etc etc etc)\n&lt;/type&gt;\n</code></pre>\n\n",
      "PostDate": "2017-01-14T06:41:34.0035702Z",
      "LastEditDate": "2017-01-14T06:56:04.2051345Z"
    }
  ]
}
