{
  "Topic": {
    "TopicId": "5whcwzrh_e2vwiwjmxpkvg",
    "ForumId": "10",
    "Title": "Random objects/encounters in different areas of the game",
    "LastUpdated": "2016-12-24T21:21:42.7495017Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "245e4e32-a371-40a5-93e3-d24ee2fdb97c",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm attempting to create a set of objects/encounters that can randomly appear in some areas of my game.\r\n\r\nFirstly, I'd like to create a set of possible encounters that can happen. Some encounters should be more likely than others to happen. I believe GetRandomInt would be useful for this, but how can I make certain integers more likely to be rolled than others?\r\n\r\nSecondly, only certain encounters should be possible in certain areas of the game, and in some areas no encounters should be possible.\r\n\r\nThirdly, the encounters should be repeatable.\r\n\r\nHow could I go about approaching this?\r\n\r\nThanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm attempting to create a set of objects/encounters that can randomly appear in some areas of my game.</p>\n<p>Firstly, I'd like to create a set of possible encounters that can happen. Some encounters should be more likely than others to happen. I believe GetRandomInt would be useful for this, but how can I make certain integers more likely to be rolled than others?</p>\n<p>Secondly, only certain encounters should be possible in certain areas of the game, and in some areas no encounters should be possible.</p>\n<p>Thirdly, the encounters should be repeatable.</p>\n<p>How could I go about approaching this?</p>\n<p>Thanks in advance!</p>\n\n",
      "PostDate": "2016-12-24T21:21:42.7495017Z",
      "LastEditDate": null
    },
    {
      "PostId": "0dd7a72f-e59f-4beb-964e-8733c53ca710",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the first question, instead of trying to make certain integers more likely than other's I'd simply roll a larger range of random integers then check for a specific range of numbers to equal a specific result\r\nie: <code> \r\nchance = GetRandomInt (0, 100)\r\nif (chance <= 15){\r\n//scenario #1\r\n}\r\nelse if (15 < chance >= 50){\r\n//scenario #2\r\n}\r\nelse {\r\n//scenario #3\r\n}</code>\r\nSo anything below 15 is scenario #1, 15-50 is scenario #2, and 51-100 is #3\r\n\r\nYou can use a similar technique if you want to create a chance to even have an encounter in any given area.\r\n\r\nFor area specific encounters you have a few options. Probably the most straightforwards would be to give the area itself an attribute list that holds the names of any encounter that can happen there. Then when an encounter is about to happen you pick a random item from that list then do that encounter. You can combine ListCount (list) with the GetRandomInt (integer min, integer max) to pick a number within the range of the list no matter it's size.\r\nie:<code>\r\n//select a random encounter\r\nid = GetRandomInt (0,  ListCount (area.encounters) -1)\r\n//-1 because lists start at 0 so the max value is one below the item count\r\nencounter = StringListItem (area.encounters, id)\r\ndo (area, encounter)</code>\r\n\r\nMaking an encounter repeatable is pretty simple, tho depends how complex the encounters are. Key things are to remember not to create or destroy anything outside the encounter that shouldn't be repeated, and to reset any attributes that don't carry over after the encounter so that it works the same when it happens again.\r\n\r\nEDIT: also for reference here's a link to the documentation which has lists and info about scripts, functions, and all kinds of other generally useful stuff http://docs.textadventures.co.uk/quest/functions/",
      "EditableFormat": "markdown",
      "HTML": "<p>For the first question, instead of trying to make certain integers more likely than other's I'd simply roll a larger range of random integers then check for a specific range of numbers to equal a specific result<br>\nie: <code><br>\nchance = GetRandomInt (0, 100)<br>\nif (chance &lt;= 15){<br>\n//scenario #1<br>\n}<br>\nelse if (15 &lt; chance &gt;= 50){<br>\n//scenario #2<br>\n}<br>\nelse {<br>\n//scenario #3<br>\n}</code><br>\nSo anything below 15 is scenario #1, 15-50 is scenario #2, and 51-100 is #3</p>\n<p>You can use a similar technique if you want to create a chance to even have an encounter in any given area.</p>\n<p>For area specific encounters you have a few options. Probably the most straightforwards would be to give the area itself an attribute list that holds the names of any encounter that can happen there. Then when an encounter is about to happen you pick a random item from that list then do that encounter. You can combine ListCount (list) with the GetRandomInt (integer min, integer max) to pick a number within the range of the list no matter it's size.<br>\nie:<code><br>\n//select a random encounter<br>\nid = GetRandomInt (0,  ListCount (area.encounters) -1)<br>\n//-1 because lists start at 0 so the max value is one below the item count<br>\nencounter = StringListItem (area.encounters, id)<br>\ndo (area, encounter)</code></p>\n<p>Making an encounter repeatable is pretty simple, tho depends how complex the encounters are. Key things are to remember not to create or destroy anything outside the encounter that shouldn't be repeated, and to reset any attributes that don't carry over after the encounter so that it works the same when it happens again.</p>\n<p>EDIT: also for reference here's a link to the documentation which has lists and info about scripts, functions, and all kinds of other generally useful stuff http://docs.textadventures.co.uk/quest/functions/</p>\n\n",
      "PostDate": "2016-12-24T23:57:06.7180684Z",
      "LastEditDate": "2016-12-25T00:00:31.7765949Z"
    },
    {
      "PostId": "643222dc-9be2-46ed-a0b9-6a229c45d25a",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK... I program in BASIC, not Quest, but it sounds like you want something like this:\r\n(This is a sample of my room map)\r\nRE is what chance you meet a creature. IE: room #1 20% otherwise nothing\r\nDice(1,2) rolls a die (random number generator) , in this case, return a 1 or a 2...\r\nCR is what creature you meet. IE:\r\n#0 is no creature\r\n#1 is a male creature\r\n#2 is a female creature\r\n#3 is a lizard\r\n\r\nRoom 1:  RoomName = \"Entrance Cave\": RE = 20: CR = Dice(1, 2)\r\nRoom 2:RoomName= \"Side Cave\": RE = 30: CR = 3\r\nRoom 8: RoomName= \" Middle of hallway \": RE = 25: CR = Dice(1, 2)\r\nRoom 9: RoomName = \" South end of hallway \": RE = 0: CR = 0\r\n\r\nFor quest, I would think you would add the code in the \"enter room\" section for each room.\r\nAnd you could (or should) be able to set it up for more than just 1 encounter event.\r\nIE, a lizard and a male creature.\r\nAnother option, and I'm not sure how, You could run a start game script that set's up each encounter\r\nfor each room first so that when you play that run, nothing changes, but everything changes the next time you play.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>OK... I program in BASIC, not Quest, but it sounds like you want something like this:<br>\n(This is a sample of my room map)<br>\nRE is what chance you meet a creature. IE: room #1 20% otherwise nothing<br>\nDice(1,2) rolls a die (random number generator) , in this case, return a 1 or a 2...<br>\nCR is what creature you meet. IE:<br>\n#0 is no creature<br>\n#1 is a male creature<br>\n#2 is a female creature<br>\n#3 is a lizard</p>\n<p>Room 1:  RoomName = \"Entrance Cave\": RE = 20: CR = Dice(1, 2)<br>\nRoom 2:RoomName= \"Side Cave\": RE = 30: CR = 3<br>\nRoom 8: RoomName= \" Middle of hallway \": RE = 25: CR = Dice(1, 2)<br>\nRoom 9: RoomName = \" South end of hallway \": RE = 0: CR = 0</p>\n<p>For quest, I would think you would add the code in the \"enter room\" section for each room.<br>\nAnd you could (or should) be able to set it up for more than just 1 encounter event.<br>\nIE, a lizard and a male creature.<br>\nAnother option, and I'm not sure how, You could run a start game script that set's up each encounter<br>\nfor each room first so that when you play that run, nothing changes, but everything changes the next time you play.</p>\n\n",
      "PostDate": "2016-12-25T04:44:08.6749629Z",
      "LastEditDate": null
    },
    {
      "PostId": "7c2f4d97-4481-4397-b606-87512c5529ef",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just to add to Tin's post/content:\r\n\r\nthere's 4 built-in Randomization Functions:\r\n\r\nGetRandomInt (min_value, max_value) // an algorithm selects (and returns) a number between and including the min and max values\r\n// GetRandomInt (0,9) // selects and returns: 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9\r\n\r\nGetRandomDouble () // an algorithm selects and returns a decimal/fraction (between 0.0 and 1.0), no input by you required\r\n// let's say the algorithm selects (and returns): 0.7\r\n\r\nDiceRoll (\"NUMBER_OF_DICEdNUMBER_OF_SIDES\") // similuates rolling a dice or die of however many sides\r\n// DiceRoll (\"1d6\") // a normal six-sided single dice: 1x(1 to 6), min roll: 1, max roll: 6\r\n// DiceRoll (\"3d12\") /// rolling 3 die each with 12-sides: 1x(1 to 12) + 1x(1 to 12) + 1x(1 to 12), min roll: 3 (1+1+1), max roll: 36 (12+12+12)\r\n\r\nRandomChance (VALUE_AS PERCENT: 0-100) // has a percent of your input of returning 'true'\r\n// RandomChance (30) // there's a 30% percent chance it'll return 'true'\r\n\r\n-------\r\n\r\nas Tin mentioned, you use the 'GetRandomChance' with a List Attribute // checking for a wide range of values probably produces more randomness than just the algorithm itself does.\r\n\r\nand for an example, lets say we got a treasure chest or a drop from a monster....\r\n\r\nlet's say the choices for the drop/treasure chest are:\r\n\r\nred, blue, yellow\r\n\r\nwe use the 'GetRandomInt' and a List Atribute to select the item:\r\n\r\ncolor_list_variable = split (\"red;blue;yellow\", \";\")\r\nitem_variable = StringListItem (color_list_variable, GetRandomInt (0, ListCount (color_list_variable) - 1))\r\n\r\nnow, we can use the RandomChance, as to whether you actually get that selected item or not (so the 'GetRandomInt' and 'RandomChance' go well together if you want this type of design in your game):\r\n\r\n```\r\nif (item_variable = \"red\" and RandomChance (70)) {\r\n  player.item_string_attribute = item_variable\r\n} else if (item_variable = \"blue\" and RandomChance (33)) {\r\n  player.item_string_attribute = item_variable\r\n} else if (item_variable = \"yellow\" and RandomChance (90)) {\r\n  player.item_string_attribute = item_variable\r\n} else {\r\n  msg (\"nothing\")\r\n}\r\n```\r\n\r\n--------\r\n\r\neach area (room), object (Object), or monster (Object) would have its own List Attribute of items/events/actions that can be selected.",
      "EditableFormat": "markdown",
      "HTML": "<p>just to add to Tin's post/content:</p>\n<p>there's 4 built-in Randomization Functions:</p>\n<p>GetRandomInt (min_value, max_value) // an algorithm selects (and returns) a number between and including the min and max values<br>\n// GetRandomInt (0,9) // selects and returns: 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9</p>\n<p>GetRandomDouble () // an algorithm selects and returns a decimal/fraction (between 0.0 and 1.0), no input by you required<br>\n// let's say the algorithm selects (and returns): 0.7</p>\n<p>DiceRoll (\"NUMBER_OF_DICEdNUMBER_OF_SIDES\") // similuates rolling a dice or die of however many sides<br>\n// DiceRoll (\"1d6\") // a normal six-sided single dice: 1x(1 to 6), min roll: 1, max roll: 6<br>\n// DiceRoll (\"3d12\") /// rolling 3 die each with 12-sides: 1x(1 to 12) + 1x(1 to 12) + 1x(1 to 12), min roll: 3 (1+1+1), max roll: 36 (12+12+12)</p>\n<p>RandomChance (VALUE_AS PERCENT: 0-100) // has a percent of your input of returning 'true'<br>\n// RandomChance (30) // there's a 30% percent chance it'll return 'true'</p>\n<hr>\n<p>as Tin mentioned, you use the 'GetRandomChance' with a List Attribute // checking for a wide range of values probably produces more randomness than just the algorithm itself does.</p>\n<p>and for an example, lets say we got a treasure chest or a drop from a monster....</p>\n<p>let's say the choices for the drop/treasure chest are:</p>\n<p>red, blue, yellow</p>\n<p>we use the 'GetRandomInt' and a List Atribute to select the item:</p>\n<p>color_list_variable = split (\"red;blue;yellow\", \";\")<br>\nitem_variable = StringListItem (color_list_variable, GetRandomInt (0, ListCount (color_list_variable) - 1))</p>\n<p>now, we can use the RandomChance, as to whether you actually get that selected item or not (so the 'GetRandomInt' and 'RandomChance' go well together if you want this type of design in your game):</p>\n<pre><code>if (item_variable = \"red\" and RandomChance (70)) {\n  player.item_string_attribute = item_variable\n} else if (item_variable = \"blue\" and RandomChance (33)) {\n  player.item_string_attribute = item_variable\n} else if (item_variable = \"yellow\" and RandomChance (90)) {\n  player.item_string_attribute = item_variable\n} else {\n  msg (\"nothing\")\n}\n</code></pre>\n<hr>\n<p>each area (room), object (Object), or monster (Object) would have its own List Attribute of items/events/actions that can be selected.</p>\n\n",
      "PostDate": "2016-12-25T04:52:37.4890561Z",
      "LastEditDate": "2016-12-25T05:04:46.4018699Z"
    },
    {
      "PostId": "6f2e351d-74b1-4d7d-86eb-a53c986a3da0",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Brilliant, that makes sense. Thanks so much for the help guys!\r\n\r\nNow I'm stuck on trying to figure out how to create a catalogue of objects, which can then be cloned and sent to the player's location. I'm not sure how to refer to the cloned object in a script. If the original object was named 'object' then would the clone be named 'object_1'?\r\n\r\nI think I'll also need to set up a turn counter so that if the player ignores them, they will disappear from that room after they leave.",
      "EditableFormat": "markdown",
      "HTML": "<p>Brilliant, that makes sense. Thanks so much for the help guys!</p>\n<p>Now I'm stuck on trying to figure out how to create a catalogue of objects, which can then be cloned and sent to the player's location. I'm not sure how to refer to the cloned object in a script. If the original object was named 'object' then would the clone be named 'object_1'?</p>\n<p>I think I'll also need to set up a turn counter so that if the player ignores them, they will disappear from that room after they leave.</p>\n\n",
      "PostDate": "2016-12-25T12:07:03.4815836Z",
      "LastEditDate": "2016-12-25T12:14:04.622679Z"
    },
    {
      "PostId": "48009330-33aa-4aae-a40b-f2bff4062200",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "unfortunately, in the GUI/Editor's: 'whatever' Object -> 'Attributes' Tab -> Attributes -> Add, you can't create an Object List/Dictionary Attribute, you'll have to do so in code and/or maybe via GUI/Editor scripting too.\r\n\r\nin code:\r\n\r\n```\r\n<object name=\"example_object\">\r\n  <attr name=\"example_objectlist_attribute\" type=\"objectlist\">toy;ball;hat;shoe</attr>\r\n</object>\r\n\r\n<object name=\"toy\">\r\n</object>\r\n\r\n<object name=\"ball\">\r\n</object>\r\n\r\n<object name=\"hat\">\r\n</object>\r\n\r\n<object name=\"shoe\">\r\n</object>\r\n```\r\n\r\n-----------\r\n\r\nor via code's scripting:\r\n\r\n```\r\nobjectlist_variable = split (\"toy;shoe;ball;hat\", \";\") // maybe this doesn't work... (maybe it'll be a String List and not an Object List)\r\n\r\n// or:\r\n\r\nobjectlist_variable = NewObjectList ()\r\nlist add (objectlist_variable, toy)\r\nlist add (objectlist_variable, ball)\r\nlist add (objectlist_variable, hat)\r\nlist add (objectlist_variable, shoe)\r\n\r\n// the Objects have to actually exist of course (see the code box above -- too lazy to copy and paste it again, lol)\r\n```\r\n\r\n--------------\r\n\r\nand/or maybe you can do so within the GUI/Editor's scripting via this way:\r\n\r\nrun as script -> add new script -> 'variables' category/section -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable example_objectlist_variable = [EXPRESSION] NewObjectList ()\r\n\r\nand then whatever the path for the 'list add' in the GUI/Editor (I don't know the GUI/Editor stuff well), taking a guess (too lazy to open up quest to check)\r\n\r\nrun as script -> add new script -> 'object' category/section -> 'add an Object to an object list --- or something like this probably' Script\r\n\r\n------------------\r\n\r\nthere's also many built-in Objectlist Attributes you can use too:\r\n\r\nthe various Scopes ( http://docs.textadventures.co.uk/quest/scopes.html )\r\nGetDirectChildren ( http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html )\r\nGetAllChildObjects ( http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html )\r\nAllObjects ( http://docs.textadventures.co.uk/quest/functions/allobjects.html )\r\n\r\n--------\r\n\r\nchecking for what items are in your Lists:\r\n\r\nGot ( http://docs.textadventures.co.uk/quest/functions/corelibrary/got.html ) // this checks, via the 'foreach', if the item is in your 'ScopeInventory' (which is a list of all the Object's contained within the currently controlled Player Object, 'game.pov', such as the default 'player' Player Object. This is also known as your 'inventory')\r\nListContains ( http://docs.textadventures.co.uk/quest/functions/listcontains.html )\r\nDictionaryContains ( http://docs.textadventures.co.uk/quest/functions/dictionarycontains.html )\r\n\r\n------\r\n\r\niterating/cycling through all items in a list (this is what makes lists so useful), and then doing some action with whatever ones you want:\r\n\r\nforeach ( http://docs.textadventures.co.uk/quest/scripts/foreach.html )\r\n\r\n---------\r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/using_lists.html\r\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk\r\n\r\n---------\r\n\r\nand there's also the built-in 'displayverbs' and 'inventoryverbs' Stringlist Attribute, which determines what Verbs are/are-shown as the buttons and hyperlinks:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5023/how-to-use-display-verbs-and-inventory-verbs-effectively",
      "EditableFormat": "markdown",
      "HTML": "<p>unfortunately, in the GUI/Editor's: 'whatever' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add, you can't create an Object List/Dictionary Attribute, you'll have to do so in code and/or maybe via GUI/Editor scripting too.</p>\n<p>in code:</p>\n<pre><code>&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_objectlist_attribute\" type=\"objectlist\"&gt;toy;ball;hat;shoe&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"toy\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"ball\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"hat\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"shoe\"&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>or via code's scripting:</p>\n<pre><code>objectlist_variable = split (\"toy;shoe;ball;hat\", \";\") // maybe this doesn't work... (maybe it'll be a String List and not an Object List)\n\n// or:\n\nobjectlist_variable = NewObjectList ()\nlist add (objectlist_variable, toy)\nlist add (objectlist_variable, ball)\nlist add (objectlist_variable, hat)\nlist add (objectlist_variable, shoe)\n\n// the Objects have to actually exist of course (see the code box above -- too lazy to copy and paste it again, lol)\n</code></pre>\n<hr>\n<p>and/or maybe you can do so within the GUI/Editor's scripting via this way:</p>\n<p>run as script -&gt; add new script -&gt; 'variables' category/section -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable example_objectlist_variable = [EXPRESSION] NewObjectList ()</p>\n<p>and then whatever the path for the 'list add' in the GUI/Editor (I don't know the GUI/Editor stuff well), taking a guess (too lazy to open up quest to check)</p>\n<p>run as script -&gt; add new script -&gt; 'object' category/section -&gt; 'add an Object to an object list --- or something like this probably' Script</p>\n<hr>\n<p>there's also many built-in Objectlist Attributes you can use too:</p>\n<p>the various Scopes ( http://docs.textadventures.co.uk/quest/scopes.html )<br>\nGetDirectChildren ( http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html )<br>\nGetAllChildObjects ( http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html )<br>\nAllObjects ( http://docs.textadventures.co.uk/quest/functions/allobjects.html )</p>\n<hr>\n<p>checking for what items are in your Lists:</p>\n<p>Got ( http://docs.textadventures.co.uk/quest/functions/corelibrary/got.html ) // this checks, via the 'foreach', if the item is in your 'ScopeInventory' (which is a list of all the Object's contained within the currently controlled Player Object, 'game.pov', such as the default 'player' Player Object. This is also known as your 'inventory')<br>\nListContains ( http://docs.textadventures.co.uk/quest/functions/listcontains.html )<br>\nDictionaryContains ( http://docs.textadventures.co.uk/quest/functions/dictionarycontains.html )</p>\n<hr>\n<p>iterating/cycling through all items in a list (this is what makes lists so useful), and then doing some action with whatever ones you want:</p>\n<p>foreach ( http://docs.textadventures.co.uk/quest/scripts/foreach.html )</p>\n<hr>\n<p>http://docs.textadventures.co.uk/quest/guides/using_lists.html<br>\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk<br>\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk</p>\n<hr>\n<p>and there's also the built-in 'displayverbs' and 'inventoryverbs' Stringlist Attribute, which determines what Verbs are/are-shown as the buttons and hyperlinks:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5023/how-to-use-display-verbs-and-inventory-verbs-effectively</p>\n\n",
      "PostDate": "2016-12-25T13:18:32.3800836Z",
      "LastEditDate": "2016-12-25T13:53:38.9313011Z"
    },
    {
      "PostId": "ece5b9f9-6037-4b9d-8c5e-d369db992ffe",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "as for the Cloned Objects, you need something to identify/indicate/flag, which there's a few various ways of doing so:\r\n\r\n1. using the original Object's 'name' (ID) String Attribute, via the 'String Manipulation' Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very botton)\r\n\r\nthis requires you to have a naming structure though, for example you can use:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/string/startswith.html\r\n\r\n// original Object's 'name' (ID) String Attribute:\r\n\r\nobject\r\n\r\n```\r\n<object name=\"object\">\r\n</object>\r\n```\r\n\r\nand the cloning adds a number to the name (as the 'name' String Attribute is the ID for quest, and thus 'names' must be unique), I've not actually used cloning yet, so I'm not sure whether it does this: 'object_1' or 'object1', nor do I known what number it starts with, lol. But, this does not matter, as we can use the 'StartsWith' Function, so:\r\n\r\n```\r\nif (StartsWith (this.name, \"object\") {\r\n  // script\r\n}\r\n```\r\n\r\nand some other useful ones:\r\n\r\nEndsWith, Mid\r\n\r\nfor example, of using 'EndsWith' (this can NOT be used with clones obviously as consequtive numbers are added to the end):\r\n\r\n```\r\n<object name=\"katana_sword\">\r\n</object>\r\n\r\n<object name=\"claymore_sword\">\r\n</object>\r\n\r\n<object name=\"short_sword_sword\">\r\n</object>\r\n\r\n<object name=\"short_bow_bow\">\r\n</object>\r\n\r\n<object name=\"long_bow_bow\">\r\n</object>\r\n\r\n// scripting example (you'd want to do this example scripting at the start of the game, via the 'game' Game object's 'start' Script):\r\n\r\nforeach (object_variable, AllObjects()) {\r\n  if (EndsWith (object_variable.name, \"sword\") {\r\n    list add (game.sword_objectlist_attribute, object_variable)\r\n  } else if (EndsWith (object_variable.name, \"bow\") {\r\n    list add (game.bow_objectlist_attribute, object_variable)\r\n  }\r\n}\r\n```\r\n\r\n2. using another Attribute:\r\n\r\nthe simplist would be the built-in 'alias' String Attribute:\r\n\r\n```\r\n// pretend we cloned a single 'orc' Object, instead of creating multiple ones (this is essentially what the 'cloning' is doing though, meh) as I've done below, lol:\r\n\r\n// cloning, includes that Object's Attributes, so all the clones of the 'orc' Object will get an 'alias' String Attribute with the Value of 'orc', on them\r\n\r\n<object name=\"orc\">\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_99\">\r\n  <attr name=\"alias\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"dragon\">\r\n  <attr name=\"alias\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_1\">\r\n  <attr name=\"alias\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_2\">\r\n  <attr name=\"alias\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_99\">\r\n  <attr name=\"alias\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\nand then in/with scripting you can check that Attribute:\r\n\r\nif (this.alias = \"orc\") {\r\n  // scripting\r\n} else if (this.alias = \"dragon\") {\r\n  // scripting\r\n}\r\n```\r\n\r\nbut, you can use any Attribute you want (and any type of Attribute, it does NOT have to be a String Attribute --- Boolean Attributes are used by a lot of people as they're simple: true/false, for example, an 'undead' Boolean Attribute, a 'zombie' would have it's 'undead' Boolean Attribute's Value set as 'true', whereas an 'orc' would have its 'undead' Boolean Attribute's Value set as 'false'), for example (I use a String Attribute again though):\r\n\r\n```\r\n<object name=\"orc\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_3\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"orc_99\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">orc</attr>\r\n</object>\r\n\r\n<object name=\"dragon\">\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_1\">\r\n  <attr name=\"alias\" type=\"string\">water dragon</attr>\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_2\">\r\n  <attr name=\"alias\" type=\"string\">fire dragon</attr>\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">dragon</attr>\r\n</object>\r\n\r\n<object name=\"dragon_99\">\r\n  <attr name=\"alias\" type=\"string\">Bahamut (King of Dragons)</attr>\r\n  <attr name=\"monster_type_string_attribute\" type=\"string\">dragon</attr>\r\n</object>\r\n```\r\n\r\n---------\r\n\r\n'this' is a special keyword/keycommand/keyfunction/whatever (lol), which refers to the containing Object of the scripting (such as an Object's Verbs / Script Attributes) you're using the 'this' within, so it's very useful to use.\r\n\r\nfor example:\r\n\r\n```\r\n<object name=\"orc\">\r\n  <attr name=\"fight\" type=\"script\">\r\n    msg (\"You fight the \" + this.name + \" and kill it\")\r\n    // outputs: You fight the orc and kill it\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"dragon\">\r\n  <attr name=\"fight\" type=\"script\">\r\n    msg (\"You fight the \" + this.name + \" and kill it\")\r\n    // outputs: You fight the dragon and kill it\r\n  </attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>fight</property>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't fight that!</defaultexpression>\r\n</verb>\r\n```\r\n\r\nbut 'this' is really useful for more advanced usages that need/use dynamic objects (many objects or no structured names to them), such as a lot of scripting uses with Objects lists and/or otherwise working with many Objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>as for the Cloned Objects, you need something to identify/indicate/flag, which there's a few various ways of doing so:</p>\n<ol>\n<li>using the original Object's 'name' (ID) String Attribute, via the 'String Manipulation' Functions:</li>\n</ol>\n<p>http://docs.textadventures.co.uk/quest/functions/ (scroll down to the very botton)</p>\n<p>this requires you to have a naming structure though, for example you can use:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/string/startswith.html</p>\n<p>// original Object's 'name' (ID) String Attribute:</p>\n<p>object</p>\n<pre><code>&lt;object name=\"object\"&gt;\n&lt;/object&gt;\n</code></pre>\n<p>and the cloning adds a number to the name (as the 'name' String Attribute is the ID for quest, and thus 'names' must be unique), I've not actually used cloning yet, so I'm not sure whether it does this: 'object_1' or 'object1', nor do I known what number it starts with, lol. But, this does not matter, as we can use the 'StartsWith' Function, so:</p>\n<pre><code>if (StartsWith (this.name, \"object\") {\n  // script\n}\n</code></pre>\n<p>and some other useful ones:</p>\n<p>EndsWith, Mid</p>\n<p>for example, of using 'EndsWith' (this can NOT be used with clones obviously as consequtive numbers are added to the end):</p>\n<pre><code>&lt;object name=\"katana_sword\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"claymore_sword\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"short_sword_sword\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"short_bow_bow\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"long_bow_bow\"&gt;\n&lt;/object&gt;\n\n// scripting example (you'd want to do this example scripting at the start of the game, via the 'game' Game object's 'start' Script):\n\nforeach (object_variable, AllObjects()) {\n  if (EndsWith (object_variable.name, \"sword\") {\n    list add (game.sword_objectlist_attribute, object_variable)\n  } else if (EndsWith (object_variable.name, \"bow\") {\n    list add (game.bow_objectlist_attribute, object_variable)\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>using another Attribute:</li>\n</ol>\n<p>the simplist would be the built-in 'alias' String Attribute:</p>\n<pre><code>// pretend we cloned a single 'orc' Object, instead of creating multiple ones (this is essentially what the 'cloning' is doing though, meh) as I've done below, lol:\n\n// cloning, includes that Object's Attributes, so all the clones of the 'orc' Object will get an 'alias' String Attribute with the Value of 'orc', on them\n\n&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_99\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_1\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_2\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_99\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\nand then in/with scripting you can check that Attribute:\n\nif (this.alias = \"orc\") {\n  // scripting\n} else if (this.alias = \"dragon\") {\n  // scripting\n}\n</code></pre>\n<p>but, you can use any Attribute you want (and any type of Attribute, it does NOT have to be a String Attribute --- Boolean Attributes are used by a lot of people as they're simple: true/false, for example, an 'undead' Boolean Attribute, a 'zombie' would have it's 'undead' Boolean Attribute's Value set as 'true', whereas an 'orc' would have its 'undead' Boolean Attribute's Value set as 'false'), for example (I use a String Attribute again though):</p>\n<pre><code>&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_3\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_99\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;orc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon\"&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_1\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;water dragon&lt;/attr&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_2\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;fire dragon&lt;/attr&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon_99\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;Bahamut (King of Dragons)&lt;/attr&gt;\n  &lt;attr name=\"monster_type_string_attribute\" type=\"string\"&gt;dragon&lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>'this' is a special keyword/keycommand/keyfunction/whatever (lol), which refers to the containing Object of the scripting (such as an Object's Verbs / Script Attributes) you're using the 'this' within, so it's very useful to use.</p>\n<p>for example:</p>\n<pre><code>&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    msg (\"You fight the \" + this.name + \" and kill it\")\n    // outputs: You fight the orc and kill it\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"dragon\"&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    msg (\"You fight the \" + this.name + \" and kill it\")\n    // outputs: You fight the dragon and kill it\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't fight that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<p>but 'this' is really useful for more advanced usages that need/use dynamic objects (many objects or no structured names to them), such as a lot of scripting uses with Objects lists and/or otherwise working with many Objects.</p>\n\n",
      "PostDate": "2016-12-25T13:45:03.9657432Z",
      "LastEditDate": "2016-12-25T14:00:44.9128574Z"
    },
    {
      "PostId": "04e80dbd-0052-431b-b92b-4f0d16b17f61",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can take a look at this thread for some examples/ideas, it might be of some help for you with some things you might want to do in your game:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22483\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22486 (the key/legend for all of my abrevs, I've learned to never use abrevs ever again, lol --- I got the damage types and defense types mixed up in my code. this is really old code of mine when I was first learning to code --- now, instead of abrevs, I'm very descriptive with my 'names' of Objects, Attributes, Functions, etc, lol --- it let's me know exactly what I'm working with as well as ensuring it's unique, lol. For example, I can do/have this/these: player.strength_integer_attribute = 100, and: player.strength_string_attribute=\"strong\" --- but this is my own naming/labeling convention/system)\r\n\r\n---------\r\n\r\nLists and Dictionaries are not easy to understand and use if you're new to coding, so let us know if you need help with them.\r\n\r\nyou can also take a look at this too, but it's a bit advanced usage with Lists/Dictionaries, for another example of what you can do with lists/dictionaries:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk",
      "EditableFormat": "markdown",
      "HTML": "<p>you can take a look at this thread for some examples/ideas, it might be of some help for you with some things you might want to do in your game:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22483</p>\n<p>http://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22486 (the key/legend for all of my abrevs, I've learned to never use abrevs ever again, lol --- I got the damage types and defense types mixed up in my code. this is really old code of mine when I was first learning to code --- now, instead of abrevs, I'm very descriptive with my 'names' of Objects, Attributes, Functions, etc, lol --- it let's me know exactly what I'm working with as well as ensuring it's unique, lol. For example, I can do/have this/these: player.strength_integer_attribute = 100, and: player.strength_string_attribute=\"strong\" --- but this is my own naming/labeling convention/system)</p>\n<hr>\n<p>Lists and Dictionaries are not easy to understand and use if you're new to coding, so let us know if you need help with them.</p>\n<p>you can also take a look at this too, but it's a bit advanced usage with Lists/Dictionaries, for another example of what you can do with lists/dictionaries:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk</p>\n\n",
      "PostDate": "2016-12-25T14:03:48.3773194Z",
      "LastEditDate": "2016-12-25T14:14:26.5290745Z"
    },
    {
      "PostId": "772c21c0-5034-4fce-a5c9-f9dc0c79728b",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@scrimshaw04 - care to share details on what kind of stuff your encounters are going to include?\r\n\r\nUnless you want multiple of the same enemies showing up in a group in a way they need to be separate objects, I'd personally avoid cloning them altogether. You can create an out of game storage area and keep an instance of every enemy there and move them to the players location as needed for combat, then when all.\r\n\r\nAt one point I had a game where there was only a single enemy object and it was pulling all of it's stats from a library after the encounter determined what the enemy would be, tho that method is quite a bit trickier to set up.",
      "EditableFormat": "markdown",
      "HTML": "<p>@scrimshaw04 - care to share details on what kind of stuff your encounters are going to include?</p>\n<p>Unless you want multiple of the same enemies showing up in a group in a way they need to be separate objects, I'd personally avoid cloning them altogether. You can create an out of game storage area and keep an instance of every enemy there and move them to the players location as needed for combat, then when all.</p>\n<p>At one point I had a game where there was only a single enemy object and it was pulling all of it's stats from a library after the encounter determined what the enemy would be, tho that method is quite a bit trickier to set up.</p>\n\n",
      "PostDate": "2016-12-25T23:02:14.5961123Z",
      "LastEditDate": null
    },
    {
      "PostId": "da912c4e-1dae-4272-84a0-de005ee4680d",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You guys are incredibly helpful, huge thanks to you all!\r\n\r\nUnfortunately thanks to Christmas I won't have time to work on this project again for a bit over a week (I'm away from home and only have my phone), so I'll have to go through and parse all of these suggestions then.\r\n\r\nFor context I'm working on a prehistory themed adventure, with a hunting mechanic. I want the player to be able to traverse a number of different biomes, each with its own set of wildlife that have a chance to randomly appear. The player can choose to either capture the animal alive (which adds an 'alive' version of the animal to their inventory which is a distinct object from the object that appears in the room) or dead (ditto, but with a dead version). I'm not planning on including combat for now, but I feel like it might be necessary eventually if I want to include larger creatures such as wolves. I definitely will not be including a levelling system, but something akin to hit points might be necessary. I'm drawing a lot of inspiration from Zelda on the level design, so perhaps heart containers are a reasonable compromise.\r\n\r\nEven within these biomes there will be specific areas where certain creatures that inhabit it will or will not appear. For example, rabbits might appear in every part of a temperate forests, but salmon will only appear in a stream.\r\n\r\nI realise this is a pretty ambitious first project, so at the moment I'm working on a fairly self-contained prologue, and restricting the number of mechanics. Hunting is a secondary mechanic, but it's one of the main things I wanted to include in the game, and it provides additional options for the player to solve some of the puzzles.\r\n\r\nIdeally I'd like to just be able to tick a box for each room quickly that 'this animal' and 'that animal' can spawn there, but I suspect it will be more complicated than that.",
      "EditableFormat": "markdown",
      "HTML": "<p>You guys are incredibly helpful, huge thanks to you all!</p>\n<p>Unfortunately thanks to Christmas I won't have time to work on this project again for a bit over a week (I'm away from home and only have my phone), so I'll have to go through and parse all of these suggestions then.</p>\n<p>For context I'm working on a prehistory themed adventure, with a hunting mechanic. I want the player to be able to traverse a number of different biomes, each with its own set of wildlife that have a chance to randomly appear. The player can choose to either capture the animal alive (which adds an 'alive' version of the animal to their inventory which is a distinct object from the object that appears in the room) or dead (ditto, but with a dead version). I'm not planning on including combat for now, but I feel like it might be necessary eventually if I want to include larger creatures such as wolves. I definitely will not be including a levelling system, but something akin to hit points might be necessary. I'm drawing a lot of inspiration from Zelda on the level design, so perhaps heart containers are a reasonable compromise.</p>\n<p>Even within these biomes there will be specific areas where certain creatures that inhabit it will or will not appear. For example, rabbits might appear in every part of a temperate forests, but salmon will only appear in a stream.</p>\n<p>I realise this is a pretty ambitious first project, so at the moment I'm working on a fairly self-contained prologue, and restricting the number of mechanics. Hunting is a secondary mechanic, but it's one of the main things I wanted to include in the game, and it provides additional options for the player to solve some of the puzzles.</p>\n<p>Ideally I'd like to just be able to tick a box for each room quickly that 'this animal' and 'that animal' can spawn there, but I suspect it will be more complicated than that.</p>\n\n",
      "PostDate": "2016-12-26T06:25:02.4320955Z",
      "LastEditDate": "2016-12-26T06:41:07.7939619Z"
    },
    {
      "PostId": "e4dcc10b-615c-41a8-a644-43ffaf2a0200",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's a quick example for you to look at, ask about anything you don't understand, or anything you need help with.\r\n\r\n(the animals are not located within the biomes, they're held/stored within an \"internal\" --- the person playing the game doesn't know about / isn't aware of / can't goto/visit it ---  storage/data Object, for easier management/better organization for the game maker)\r\n\r\n(let me know if you need a design where the animals are located within the biomes)\r\n\r\n```\r\n<object name=\"forest_room_object\">\r\n  <inherit name=\"biome_type\" />\r\n  // this will over-ride the 'hunting_animals_objectlist_attribute' of the Inherited Attribute from the 'biome_type' Object Type:\r\n  <attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\">wolf;deer;boar;bear</attr>\r\n</object>\r\n\r\n<object name=\"jungle_room_object\">\r\n  <inherit name=\"biome_type\" />\r\n  // this will over-ride the 'hunting_animals_objectlist_attribute' of the Inherited Attribute from the 'biome_type' Object Type:\r\n   <attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\">blah1;blah2;blah3</attr>\r\n</object>\r\n\r\n<object name=\"hunting_animals_data_object\">\r\n  <object name=\"unknown\">\r\n  </object>\r\n  <object name=\"wolf\">\r\n    <inherit name=\"hunting_animals_type\" />\r\n  </object>\r\n  <object name=\"boar\">\r\n    <inherit name=\"hunting_animals_type\" />\r\n  </object>\r\n  <object name=\"deer\">\r\n    <inherit name=\"hunting_animals_type\" />\r\n  </object>\r\n  <object name=\"bear\">\r\n    <inherit name=\"hunting_animals_type\" />\r\n    // these will over-ride the Inherited Attributes from the 'hunting_animals_type' Object Type:\r\n    <attr name=\"heart_containers_life_string_attribute\" type=\"string\">10/10</attr>\r\n    <attr name=\"current_heart_containers_life_integer_attribute\" type=\"int\">10</attr>\r\n    <attr name=\"maximum_heart_containers_life_integer_attribute\" type=\"int\">10</attr>\r\n  </object>\r\n  <object name=\"blah1\">\r\n  </object>\r\n  <object name=\"blah2\">\r\n  </object>\r\n  <object name=\"blah3\">\r\n  </object>\r\n</object>\r\n\r\n<type name=\"biome_type\">\r\n  <attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\">unknown</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">hunt</attr>\r\n  <attr name=\"hunt\" type=\"script\">\r\n    randomly_selected_animal = ObjectListItem (this.hunting_animals_objectlist_attribute, GetRandomInt (0, ListCount (this.hunting_animals_objectlist_attribute) - 1))\r\n   // combat Function (so you can loop it)\r\n   ask (\"Do you want to kill it? (otherwise, you'll capture it alive)\") {\r\n     if (result) {\r\n       randomly_selected_animal.condition_string_attribute = \"dead\"\r\n     }\r\n     // we don't need an 'else' as the default/initial condition is already set as being: 'alive', and this is also why I ask if you want to kill it instead of capturing it, making it insignificantly more efficient lol, as you don't have a 'not' operation, lol\r\n    /*\r\n    if you want to see it asking about capturing, it'd be like this:\r\n    ask (\"Do you want to capture it alive? (otherwise, you'll kill it)\") {\r\n       // again, there's no action to do for choosing to capture it, as it's already initially set as being alive\r\n       if (not result) {\r\n         randomly_selected_animal.condition_string_attribute = \"dead\"\r\n       }\r\n     }\r\n     */\r\n   }\r\n   MoveObject (randomly_selected_animal, player) // or (it's the same thing): randomly_selected_animal.parent = player\r\n   // actually, I need to do the 'CloneAndMove', for this design to work, my bad\r\n  </attr>\r\n</type>\r\n\r\n<type name=\"hunting_animals_type\">\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr> // using a String Attribute, allows for more than just two/binary choices of Values. Boolean: true/false, whereas, a String: normal/alive, dead, unconscious, poisoned, stunned, paralyzed, etc. Using a Stringlist Attribute allows for multiple Values at the same time, ie 'poisoned and petrified'\r\n  <attr name=\"heart_containers_life_string_attribute\" type=\"string\">1/1</attr>\r\n  <attr name=\"current_heart_containers_life_integer_attribute\" type=\"int\">1</attr>\r\n  <attr name=\"maximum_heart_containers_life_integer_attribute\" type=\"int\">1</attr>\r\n  <attr name=\"changedcurrent_heart_containers_life_integer_attribute\" type=\"script\">\r\n    this.heart_containers_life_string_attribute = this.current_heart_containers_life_integer_attribute + \"/\" + this.maximum_heart_containers_life_integer_attribute\r\n  </attr>\r\n  <attr name=\"changedmaximum_heart_containers_life_integer_attribute\" type=\"script\">\r\n    this.heart_containers_life_string_attribute = this.current_heart_containers_life_integer_attribute + \"/\" + this.maximum_heart_containers_life_integer_attribute\r\n  </attr>\r\n</type>\r\n\r\n<verb>\r\n  <property>hunt</property>\r\n  <pattern>hunt<pattern>\r\n  <defaultexpression>You can't hunt that!</attr>\r\n</verb>\r\n```\r\n\r\n------------\r\n\r\nI didn't implement anything for this yet:\r\n\r\n\"\r\nEven within these biomes there will be specific areas where certain creatures that inhabit it will or will not appear. For example, rabbits might appear in every part of a temperate forests, but salmon will only appear in a stream.\r\n(scrim)\r\n\"",
      "EditableFormat": "markdown",
      "HTML": "<p>here's a quick example for you to look at, ask about anything you don't understand, or anything you need help with.</p>\n<p>(the animals are not located within the biomes, they're held/stored within an \"internal\" --- the person playing the game doesn't know about / isn't aware of / can't goto/visit it ---  storage/data Object, for easier management/better organization for the game maker)</p>\n<p>(let me know if you need a design where the animals are located within the biomes)</p>\n<pre><code>&lt;object name=\"forest_room_object\"&gt;\n  &lt;inherit name=\"biome_type\" /&gt;\n  // this will over-ride the 'hunting_animals_objectlist_attribute' of the Inherited Attribute from the 'biome_type' Object Type:\n  &lt;attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\"&gt;wolf;deer;boar;bear&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"jungle_room_object\"&gt;\n  &lt;inherit name=\"biome_type\" /&gt;\n  // this will over-ride the 'hunting_animals_objectlist_attribute' of the Inherited Attribute from the 'biome_type' Object Type:\n   &lt;attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\"&gt;blah1;blah2;blah3&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"hunting_animals_data_object\"&gt;\n  &lt;object name=\"unknown\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"wolf\"&gt;\n    &lt;inherit name=\"hunting_animals_type\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"boar\"&gt;\n    &lt;inherit name=\"hunting_animals_type\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"deer\"&gt;\n    &lt;inherit name=\"hunting_animals_type\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"bear\"&gt;\n    &lt;inherit name=\"hunting_animals_type\" /&gt;\n    // these will over-ride the Inherited Attributes from the 'hunting_animals_type' Object Type:\n    &lt;attr name=\"heart_containers_life_string_attribute\" type=\"string\"&gt;10/10&lt;/attr&gt;\n    &lt;attr name=\"current_heart_containers_life_integer_attribute\" type=\"int\"&gt;10&lt;/attr&gt;\n    &lt;attr name=\"maximum_heart_containers_life_integer_attribute\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;/object&gt;\n  &lt;object name=\"blah1\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"blah2\"&gt;\n  &lt;/object&gt;\n  &lt;object name=\"blah3\"&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;type name=\"biome_type\"&gt;\n  &lt;attr name=\"hunting_animals_objectlist_attribute\" type=\"objectlist\"&gt;unknown&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;hunt&lt;/attr&gt;\n  &lt;attr name=\"hunt\" type=\"script\"&gt;\n    randomly_selected_animal = ObjectListItem (this.hunting_animals_objectlist_attribute, GetRandomInt (0, ListCount (this.hunting_animals_objectlist_attribute) - 1))\n   // combat Function (so you can loop it)\n   ask (\"Do you want to kill it? (otherwise, you'll capture it alive)\") {\n     if (result) {\n       randomly_selected_animal.condition_string_attribute = \"dead\"\n     }\n     // we don't need an 'else' as the default/initial condition is already set as being: 'alive', and this is also why I ask if you want to kill it instead of capturing it, making it insignificantly more efficient lol, as you don't have a 'not' operation, lol\n    /*\n    if you want to see it asking about capturing, it'd be like this:\n    ask (\"Do you want to capture it alive? (otherwise, you'll kill it)\") {\n       // again, there's no action to do for choosing to capture it, as it's already initially set as being alive\n       if (not result) {\n         randomly_selected_animal.condition_string_attribute = \"dead\"\n       }\n     }\n     */\n   }\n   MoveObject (randomly_selected_animal, player) // or (it's the same thing): randomly_selected_animal.parent = player\n   // actually, I need to do the 'CloneAndMove', for this design to work, my bad\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"hunting_animals_type\"&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt; // using a String Attribute, allows for more than just two/binary choices of Values. Boolean: true/false, whereas, a String: normal/alive, dead, unconscious, poisoned, stunned, paralyzed, etc. Using a Stringlist Attribute allows for multiple Values at the same time, ie 'poisoned and petrified'\n  &lt;attr name=\"heart_containers_life_string_attribute\" type=\"string\"&gt;1/1&lt;/attr&gt;\n  &lt;attr name=\"current_heart_containers_life_integer_attribute\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"maximum_heart_containers_life_integer_attribute\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_heart_containers_life_integer_attribute\" type=\"script\"&gt;\n    this.heart_containers_life_string_attribute = this.current_heart_containers_life_integer_attribute + \"/\" + this.maximum_heart_containers_life_integer_attribute\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_heart_containers_life_integer_attribute\" type=\"script\"&gt;\n    this.heart_containers_life_string_attribute = this.current_heart_containers_life_integer_attribute + \"/\" + this.maximum_heart_containers_life_integer_attribute\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;hunt&lt;/property&gt;\n  &lt;pattern&gt;hunt&lt;pattern&gt;\n  &lt;defaultexpression&gt;You can't hunt that!&lt;/attr&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>I didn't implement anything for this yet:</p>\n<p>\"<br>\nEven within these biomes there will be specific areas where certain creatures that inhabit it will or will not appear. For example, rabbits might appear in every part of a temperate forests, but salmon will only appear in a stream.<br>\n(scrim)<br>\n\"</p>\n\n",
      "PostDate": "2016-12-26T07:12:25.4129701Z",
      "LastEditDate": "2016-12-26T08:09:05.1254115Z"
    },
    {
      "PostId": "add63ad7-6117-4591-ac3c-934a1135de1b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Use clones; it is not that bad.\r\n\r\nThe only trick is to make sure scripts on the original do not refer to itself directly. If you have an object called \"salmon\" that you want to clone, then in the scripts, rather than using \"salmon\", use \"this\", which is a special Quest code for whatever the script belongs to. That way, the script will reference the clone, rather than the original, when it is on the clone.\r\n\r\nI would give every original an alias, and then if you want, say, to check if something is a salmon, you can just see if the alias is \"salmon\" (the name will be unique for each clone).\r\n\r\nKeep all the originals in a room inaccessible to the player, and create clones with the `CloneObjectAndMove` function.",
      "EditableFormat": "markdown",
      "HTML": "<p>Use clones; it is not that bad.</p>\n<p>The only trick is to make sure scripts on the original do not refer to itself directly. If you have an object called \"salmon\" that you want to clone, then in the scripts, rather than using \"salmon\", use \"this\", which is a special Quest code for whatever the script belongs to. That way, the script will reference the clone, rather than the original, when it is on the clone.</p>\n<p>I would give every original an alias, and then if you want, say, to check if something is a salmon, you can just see if the alias is \"salmon\" (the name will be unique for each clone).</p>\n<p>Keep all the originals in a room inaccessible to the player, and create clones with the <code>CloneObjectAndMove</code> function.</p>\n\n",
      "PostDate": "2016-12-26T10:55:13.8037663Z",
      "LastEditDate": null
    },
    {
      "PostId": "9c770584-3e88-4ff8-9623-42798fd43f22",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Cool, I'm starting to understand this system a little more. I'll need to try it myself, but that's a lot for me to go on.\r\n\r\nSo as I understand it, I after I use 'this' to clone an object, henceforth 'this' will refer to the cloned object? What if I want to run a seperate script that also refers to the clone, in that case 'this' wouldn't work. I'm unclear on what you mean by 'when it is on the clone', because I'm unsure how to apply a script to the clone in the first place.\r\n\r\nI'm currently using a setup like you suggested and cloning objects from an inaccessible room, but without knowing how to refer to the cloned specifically it has some problems, like not being able to remove cloned objects correctly.\r\n\r\nApologies if this is a basic question, I'm completely new to programming/scripting.\r\n\r\nAnd thanks again!",
      "EditableFormat": "markdown",
      "HTML": "<p>Cool, I'm starting to understand this system a little more. I'll need to try it myself, but that's a lot for me to go on.</p>\n<p>So as I understand it, I after I use 'this' to clone an object, henceforth 'this' will refer to the cloned object? What if I want to run a seperate script that also refers to the clone, in that case 'this' wouldn't work. I'm unclear on what you mean by 'when it is on the clone', because I'm unsure how to apply a script to the clone in the first place.</p>\n<p>I'm currently using a setup like you suggested and cloning objects from an inaccessible room, but without knowing how to refer to the cloned specifically it has some problems, like not being able to remove cloned objects correctly.</p>\n<p>Apologies if this is a basic question, I'm completely new to programming/scripting.</p>\n<p>And thanks again!</p>\n\n",
      "PostDate": "2016-12-26T12:01:39.0612299Z",
      "LastEditDate": "2016-12-26T14:10:34.398939Z"
    },
    {
      "PostId": "3bcacc2d-fbb5-4ab1-ab9d-67b888b89706",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah but I guess I can check for objects in the room that the player is in with the alias of a creature instead then. In that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.\r\n\r\nFor now my plan for the random generation system is this (I'm not sure how to write it in the correct syntax):\r\n1. Assign every room in the game with Boolean attributes for every possible creature that could be spawned (I should be able to do this by modifying the template room object, I think). Booleans set to true mean that creature can spawn there.\r\n2. Run a script every time the player enters a room that checks for each of these attributes. The same script makes a dice roll out of 100 for each creature to see if it successfully spawns.\r\n3. Create some more Boolean attributes on the template room that trigger different ways the creatures can spawn. If multiple creatures are selected, the default will be to add them all to a list then randomly choose one creature from that list to spawn. Unfortunately this might skew the probabilities a little but I think I can live with that. Other attributes might say that a room has a chance to spawn 2 or 3 instances of a selected creature, or spawn multiple species.\r\n4. Every time the player enters a new room, check for any leftover objects with an alias that matches any creature, or maybe even a 'creature' attribute and remove them.\r\n\r\nI can probably refine that a little more, but that's the gist so far. I don't expect anyone to write the code for me, writing down my thoughts just helps me to clarify my idea.\r\n\r\nThe player also needs to be able to release trapped creatures from their inventory, which means they are completely removed from the game. For some reason I haven't managed to get that to work yet, but I'm sure I can figure it out.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah but I guess I can check for objects in the room that the player is in with the alias of a creature instead then. In that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.</p>\n<p>For now my plan for the random generation system is this (I'm not sure how to write it in the correct syntax):</p>\n<ol>\n<li>Assign every room in the game with Boolean attributes for every possible creature that could be spawned (I should be able to do this by modifying the template room object, I think). Booleans set to true mean that creature can spawn there.</li>\n<li>Run a script every time the player enters a room that checks for each of these attributes. The same script makes a dice roll out of 100 for each creature to see if it successfully spawns.</li>\n<li>Create some more Boolean attributes on the template room that trigger different ways the creatures can spawn. If multiple creatures are selected, the default will be to add them all to a list then randomly choose one creature from that list to spawn. Unfortunately this might skew the probabilities a little but I think I can live with that. Other attributes might say that a room has a chance to spawn 2 or 3 instances of a selected creature, or spawn multiple species.</li>\n<li>Every time the player enters a new room, check for any leftover objects with an alias that matches any creature, or maybe even a 'creature' attribute and remove them.</li>\n</ol>\n<p>I can probably refine that a little more, but that's the gist so far. I don't expect anyone to write the code for me, writing down my thoughts just helps me to clarify my idea.</p>\n<p>The player also needs to be able to release trapped creatures from their inventory, which means they are completely removed from the game. For some reason I haven't managed to get that to work yet, but I'm sure I can figure it out.</p>\n\n",
      "PostDate": "2016-12-26T14:32:18.50075Z",
      "LastEditDate": "2016-12-26T14:35:39.031928Z"
    },
    {
      "PostId": "5ffc373f-88e9-4575-b7fa-f44d98ac166c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this is some of the more advanced programming concepts, so don't worry if this is difficult to understand/follow:\r\n\r\n(if you've been understanding any of this, wow, as this should be really hard when you're totally new to programming/coding... you start off slow... learning 1 thing at a time, laughs. Oh well, go ahead and jump right into coding, best way to learn, hehe! If you want to teach someone to swim, throw them into the deep end of a pool! hehe :D I jumped right into programming too, I first started with the 'character creation' guide, hehe. Took me quite a while to learn it... though I'm stupid, and you're likely much more smart, so you'll get stuff faster than I did, wish I was smart/smarter, oh well, sighs)\r\n\r\n( http://docs.textadventures.co.uk/quest/guides/character_creation.html )\r\n\r\nand here's my own struggle with learning to code (via leanring to code with quest), when I found it 4 years ago:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread\r\n\r\n(and now, all from/thanks to quest, I'm taking programming classes in college and been shocked at how well quest has prepared me for them!)\r\n\r\n----------------\r\n\r\nabout using 'this', maybe this (sorry, a not-intended bad pun) will help:\r\n\r\n(the 'orc_1' and 'orc_2' Objects, represent doing/using cloning)\r\n\r\n```\r\nconceptually, instead of doing this (ugh!), for example:\r\n\r\n<object name=\"player\">\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">10</attr>\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">999</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr>\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">5</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[\r\n    if (orc_1.condition_string_attribute = \"alive\") {\r\n      orc_1.current_life_integer_attribute = orc_1.current_life_integer_attribute - player.damage_integer_attribute\r\n      if (orc_1.current_life_intger_attribute < 1) {\r\n        orc_1.condition_string_attribute = \"dead\"\r\n      } else {\r\n        player.current_life_integer_attribute = player.current_integer_attribute - orc_1.damage_integer_attribute\r\n        if (player.current_life_integer_attribute < 1) {\r\n          msg (\"You were killed by the \" + orc_1.name + \".\")\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    } else {\r\n      msg (\"The \" + orc_1.name + \" is already dead, silly.\")\r\n    }\r\n  ]]></attr>\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr>\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">5</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[\r\n    if (orc_2.condition_string_attribute = \"alive\") {\r\n      orc_2.current_life_integer_attribute = orc_2.current_life_integer_attribute - player.damage_integer_attribute\r\n      if (orc_2.current_life_intger_attribute < 1) {\r\n        orc_2.condition_string_attribute = \"dead\"\r\n      } else {\r\n        player.current_life_integer_attribute = player.current_integer_attribute - orc_2.damage_integer_attribute\r\n        if (player.current_life_integer_attribute < 1) {\r\n          msg (\"You were killed by the \" + orc_2.name + \".\")\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    } else {\r\n      msg (\"The \" + orc_2.name + \" is already dead, silly.\")\r\n    }\r\n  ]]></attr>\r\n</object>\r\n\r\n// imagine if we had 'orc_1' to 'orc_99' Objects.... that's a ton of code! YUCK! UGH!\r\n\r\n// ---------------------------------------------------------\r\n\r\n// conceptually, doing this is much better (but still MAJOR YUCK/UGH!):\r\n\r\n<object name=\"player\">\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">10</attr>\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">999</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr>\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">5</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[\r\n    if (this.condition_string_attribute = \"alive\") { // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n      if (this.current_life_intger_attribute < 1) { // // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n        this.condition_string_attribute = \"dead\" // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n      } else {\r\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n        if (player.current_life_integer_attribute < 1) {\r\n          msg (\"You were killed by the \" + this.name + \".\") // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    } else {\r\n      msg (\"The \" + this.name + \" is already dead, silly.\") // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\r\n    }\r\n  ]]></attr>\r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr>\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">5</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[\r\n    if (this.condition_string_attribute = \"alive\") { // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n      if (this.current_life_intger_attribute < 1) { // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n        this.condition_string_attribute = \"dead\" // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n      } else {\r\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n        if (player.current_life_integer_attribute < 1) {\r\n          msg (\"You were killed by the \" + this.name + \".\") // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    } else {\r\n      msg (\"The \" + this.name + \" is already dead, silly.\") // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\r\n    }\r\n  ]]></attr>\r\n</object>\r\n\r\n// -------------------------------------------------\r\n\r\n// and this is even/extremely much better (though still not the best... but this is good enough for this concept lesson):\r\n\r\n<object name=\"player\">\r\n  <inherit name=\"character_type\" /> // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'player' Player Object, and thus if they use the 'this', that 'this' scripting, now added to this 'player' Player Object, will now be an Object reference to the 'player' Player Object (conceptually: quest will replace 'this' with 'player') \r\n  <attr name=\"damage_integer_attribute\" type=\"int\">10</attr>\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">999</attr>\r\n</object>\r\n\r\n<object name=\"orc_1\">\r\n  <inherit name=\"orc_type\" /> // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'orc_1' Object, and thus if they use the 'this', that 'this' scripting, now added to this 'orc_1' Object, will now be an Object reference to the 'orc_1' Object (quest will replace 'this' with 'orc_1') \r\n</object>\r\n\r\n<object name=\"orc_2\">\r\n  <inherit name=\"orc_type\" /> // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'orc_2' Object, and thus if they use the 'this', that 'this' scripting, now added to this 'orc_2' Object, will now be an Object reference to the 'orc_2' Object (quest will replace 'this' with 'orc_2') \r\n</object>\r\n\r\n<type name=\"orc_type\">\r\n  <inherit name=\"monster_type\" />\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">5</attr>\r\n</type>\r\n\r\n<type name=\"monster_type\">\r\n  <inherit name=\"character_type\" />\r\n  <attr name=\"condition_string_attribute\" type=\"string\">alive</attr>\r\n  <attr name=\"displayverbs\" type=\"listextend\">fight</attr>\r\n  <attr name=\"fight\" type=\"script\"><![CDATA[\r\n    if (this.condition_string_attribute = \"alive\") {\r\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute\r\n      if (this.current_life_intger_attribute < 1) {\r\n        this.condition_string_attribute = \"dead\"\r\n      } else {\r\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute\r\n        if (player.current_life_integer_attribute < 1) {\r\n          msg (\"You were killed by the \" + this.name + \".\")\r\n          msg (\"GAME OVER\")\r\n          finish\r\n        }\r\n      }\r\n    } else {\r\n      msg (\"The \" + this.name + \" is already dead, silly.\")\r\n    }\r\n  ]]></attr>\r\n</type>\r\n\r\n<type name=\"character_type\">\r\n  <attr name=\"damage_integer_attribute\" type=\"int\">1</attr>\r\n  <attr name=\"current_life_integer_attribute\" type=\"int\">1</attr>\r\n</type>\r\n```\r\n\r\n-------------\r\n\r\nthis example of mine above, uses predetermined/known (static usage) Objects, well, when we're (dynamic usage): randomly selecting who knows what Objects and want to apply the same stuff to any of them (such as via cloning), this is were the 'this' special keyword/keycommand/keyfunction/whatever-exactly-it-is-lol, really shines!",
      "EditableFormat": "markdown",
      "HTML": "<p>this is some of the more advanced programming concepts, so don't worry if this is difficult to understand/follow:</p>\n<p>(if you've been understanding any of this, wow, as this should be really hard when you're totally new to programming/coding... you start off slow... learning 1 thing at a time, laughs. Oh well, go ahead and jump right into coding, best way to learn, hehe! If you want to teach someone to swim, throw them into the deep end of a pool! hehe :D I jumped right into programming too, I first started with the 'character creation' guide, hehe. Took me quite a while to learn it... though I'm stupid, and you're likely much more smart, so you'll get stuff faster than I did, wish I was smart/smarter, oh well, sighs)</p>\n<p>( http://docs.textadventures.co.uk/quest/guides/character_creation.html )</p>\n<p>and here's my own struggle with learning to code (via leanring to code with quest), when I found it 4 years ago:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread</p>\n<p>(and now, all from/thanks to quest, I'm taking programming classes in college and been shocked at how well quest has prepared me for them!)</p>\n<hr>\n<p>about using 'this', maybe this (sorry, a not-intended bad pun) will help:</p>\n<p>(the 'orc_1' and 'orc_2' Objects, represent doing/using cloning)</p>\n<pre><code>conceptually, instead of doing this (ugh!), for example:\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;999&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[\n    if (orc_1.condition_string_attribute = \"alive\") {\n      orc_1.current_life_integer_attribute = orc_1.current_life_integer_attribute - player.damage_integer_attribute\n      if (orc_1.current_life_intger_attribute &lt; 1) {\n        orc_1.condition_string_attribute = \"dead\"\n      } else {\n        player.current_life_integer_attribute = player.current_integer_attribute - orc_1.damage_integer_attribute\n        if (player.current_life_integer_attribute &lt; 1) {\n          msg (\"You were killed by the \" + orc_1.name + \".\")\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    } else {\n      msg (\"The \" + orc_1.name + \" is already dead, silly.\")\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[\n    if (orc_2.condition_string_attribute = \"alive\") {\n      orc_2.current_life_integer_attribute = orc_2.current_life_integer_attribute - player.damage_integer_attribute\n      if (orc_2.current_life_intger_attribute &lt; 1) {\n        orc_2.condition_string_attribute = \"dead\"\n      } else {\n        player.current_life_integer_attribute = player.current_integer_attribute - orc_2.damage_integer_attribute\n        if (player.current_life_integer_attribute &lt; 1) {\n          msg (\"You were killed by the \" + orc_2.name + \".\")\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    } else {\n      msg (\"The \" + orc_2.name + \" is already dead, silly.\")\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n\n// imagine if we had 'orc_1' to 'orc_99' Objects.... that's a ton of code! YUCK! UGH!\n\n// ---------------------------------------------------------\n\n// conceptually, doing this is much better (but still MAJOR YUCK/UGH!):\n\n&lt;object name=\"player\"&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;999&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[\n    if (this.condition_string_attribute = \"alive\") { // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n      if (this.current_life_intger_attribute &lt; 1) { // // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n        this.condition_string_attribute = \"dead\" // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n      } else {\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n        if (player.current_life_integer_attribute &lt; 1) {\n          msg (\"You were killed by the \" + this.name + \".\") // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    } else {\n      msg (\"The \" + this.name + \" is already dead, silly.\") // this 'this' is contained within the 'orc_1' Object, and thus the 'this' is an Object reference to the 'orc_1' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_1')\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[\n    if (this.condition_string_attribute = \"alive\") { // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n      if (this.current_life_intger_attribute &lt; 1) { // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n        this.condition_string_attribute = \"dead\" // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n      } else {\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n        if (player.current_life_integer_attribute &lt; 1) {\n          msg (\"You were killed by the \" + this.name + \".\") // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    } else {\n      msg (\"The \" + this.name + \" is already dead, silly.\") // this 'this' is contained within the 'orc_2' Object, and thus the 'this' is an Object reference to the 'orc_2' Object (conceptually this will help you understand it I hope: quest will replace 'this' with 'orc_2')\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n\n// -------------------------------------------------\n\n// and this is even/extremely much better (though still not the best... but this is good enough for this concept lesson):\n\n&lt;object name=\"player\"&gt;\n  &lt;inherit name=\"character_type\" /&gt; // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'player' Player Object, and thus if they use the 'this', that 'this' scripting, now added to this 'player' Player Object, will now be an Object reference to the 'player' Player Object (conceptually: quest will replace 'this' with 'player') \n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;10&lt;/attr&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;999&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"orc_1\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt; // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'orc_1' Object, and thus if they use the 'this', that 'this' scripting, now added to this 'orc_1' Object, will now be an Object reference to the 'orc_1' Object (quest will replace 'this' with 'orc_1') \n&lt;/object&gt;\n\n&lt;object name=\"orc_2\"&gt;\n  &lt;inherit name=\"orc_type\" /&gt; // Object Types ('Types') or 'groups/classes' will add their Attributes, as Inherited Attributes, to this 'orc_2' Object, and thus if they use the 'this', that 'this' scripting, now added to this 'orc_2' Object, will now be an Object reference to the 'orc_2' Object (quest will replace 'this' with 'orc_2') \n&lt;/object&gt;\n\n&lt;type name=\"orc_type\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;5&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"monster_type\"&gt;\n  &lt;inherit name=\"character_type\" /&gt;\n  &lt;attr name=\"condition_string_attribute\" type=\"string\"&gt;alive&lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"listextend\"&gt;fight&lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;&lt;![CDATA[\n    if (this.condition_string_attribute = \"alive\") {\n      this.current_life_integer_attribute = this.current_life_integer_attribute - player.damage_integer_attribute\n      if (this.current_life_intger_attribute &lt; 1) {\n        this.condition_string_attribute = \"dead\"\n      } else {\n        player.current_life_integer_attribute = player.current_integer_attribute - this.damage_integer_attribute\n        if (player.current_life_integer_attribute &lt; 1) {\n          msg (\"You were killed by the \" + this.name + \".\")\n          msg (\"GAME OVER\")\n          finish\n        }\n      }\n    } else {\n      msg (\"The \" + this.name + \" is already dead, silly.\")\n    }\n  ]]&gt;&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=\"character_type\"&gt;\n  &lt;attr name=\"damage_integer_attribute\" type=\"int\"&gt;1&lt;/attr&gt;\n  &lt;attr name=\"current_life_integer_attribute\" type=\"int\"&gt;1&lt;/attr&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>this example of mine above, uses predetermined/known (static usage) Objects, well, when we're (dynamic usage): randomly selecting who knows what Objects and want to apply the same stuff to any of them (such as via cloning), this is were the 'this' special keyword/keycommand/keyfunction/whatever-exactly-it-is-lol, really shines!</p>\n\n",
      "PostDate": "2016-12-26T15:28:33.3271007Z",
      "LastEditDate": "2016-12-26T16:07:06.0105419Z"
    },
    {
      "PostId": "a923e241-0fc5-410c-8e8e-4810f4eab4cf",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"\r\nIn that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.\r\n(scrim)\r\n\"\r\n\r\n--------------------------\r\n\r\nhere's an example:\r\n\r\n```\r\n<object name=\"animal_room\">\r\n  <attr name=\"animal_objectlist_attribute\" type=\"objectlist\">bat;rat</attr>\r\n</object>\r\n\r\n<object name=\"bat_clone_1\">\r\n  <attr name=\"alias\" type=\"string\">fruit bat</attr>\r\n</object>\r\n\r\n<object name=\"bat_clone_2\">\r\n  <attr name=\"alias\" type=\"string\">vampire bat</attr>\r\n</object>\r\n\r\n<object name=\"rat_clone_1\">\r\n</object>\r\n\r\n<object name=\"rat_clone_2\">\r\n</object>\r\n\r\n// scripting example:\r\n\r\nforeach (object_variable, animal_room.animal_objectlist_attribute) {\r\n  if (StartsWith (object_variable.name, \"bat\") and object_variable.alias = \"vampire bat\") {\r\n    msg (\"We've specifically got-to the 'vampire bat' from our bat clones\")\r\n    // we'd do some action of course, which would be with/to our 'vampire bat', such as moving it within the 'player' Playe object:\r\n    MoveObject (object_variable, player)\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>\"<br>\nIn that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.<br>\n(scrim)<br>\n\"</p>\n<hr>\n<p>here's an example:</p>\n<pre><code>&lt;object name=\"animal_room\"&gt;\n  &lt;attr name=\"animal_objectlist_attribute\" type=\"objectlist\"&gt;bat;rat&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"bat_clone_1\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;fruit bat&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"bat_clone_2\"&gt;\n  &lt;attr name=\"alias\" type=\"string\"&gt;vampire bat&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"rat_clone_1\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"rat_clone_2\"&gt;\n&lt;/object&gt;\n\n// scripting example:\n\nforeach (object_variable, animal_room.animal_objectlist_attribute) {\n  if (StartsWith (object_variable.name, \"bat\") and object_variable.alias = \"vampire bat\") {\n    msg (\"We've specifically got-to the 'vampire bat' from our bat clones\")\n    // we'd do some action of course, which would be with/to our 'vampire bat', such as moving it within the 'player' Playe object:\n    MoveObject (object_variable, player)\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2016-12-26T15:54:50.0232164Z",
      "LastEditDate": null
    },
    {
      "PostId": "68729b5a-2fee-4ca3-8a1b-4de0c7d1f39f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Booleans are nice and have their uses, but take a look at this:\r\n\r\nyour usually 'status effects / conditions' in RPGs:\r\n\r\nplayer.poisoned = false\r\nplayer.asleep = false\r\nplayer.petrified = false\r\nplayer.confused = false\r\nplayer.silenced = false\r\netc etc etc\r\n \r\nYUCK! (N Attributes)\r\n\r\nyou get poisoned:\r\n\r\nplayer.poisoned = true\r\nplayer.asleep = false\r\nplayer.petrified = false\r\nplayer.confused = false\r\nplayer.silenced = false\r\netc etc etc\r\n\r\nyou get silenced:\r\n\r\nplayer.poisoned = false\r\nplayer.asleep = false\r\nplayer.petrified = false\r\nplayer.confused = false\r\nplayer.silenced = true\r\netc etc etc\r\n\r\nyou get poisoned and silenced (having multiple Boolean Attributes, DO allow for multiple conditions, a positive, whereas a single String Attribute does not, however, a single Stringlist Attribute does, and it, a single Stringlist Attribute, is (for really big/complex designs) better than multiple Boolean Attributes):\r\n\r\nplayer.poisoned = true\r\nplayer.asleep = false\r\nplayer.petrified = false\r\nplayer.confused = false\r\nplayer.silenced = true\r\netc etc etc\r\n\r\n// scripting example:\r\n\r\n```\r\nif (player.normal) {\r\n  msg (\"you're normal\")\r\n} else if (player.poisoned) {\r\n  msg (\"You're poisoned\")\r\n} else if (player.asleep) {\r\n  msg (\"You're asleep\")\r\n} else if (player.silenced) {\r\n  msg (\"You're silenced\")\r\n} else if (player.petrified) {\r\n  msg (\"You're petrified\")\r\n} else if (player.poisoned and player.confused) {\r\n  msg (\"You're poisoned and confused\")\r\n}\r\n// etc 'else ifs'...\r\n```\r\n\r\nYUCK!\r\n\r\n--------------------------------------------------\r\n\r\nwhereas, much better (a single Attribute):\r\n\r\nplayer.condition_string_attribute = \"normal\"\r\n\r\nyou get poisoned:\r\n\r\nplayer.condition_string_attribute = \"poisoned\"\r\n\r\nyou get silenced:\r\n\r\nplayer.condition_string_attribute = \"silenced\"\r\n\r\nwe can't have two conditions at the same time with a single String Attribute, however.\r\n\r\n// scripting example:\r\n\r\n```\r\nif (player.condition_string_attribute = \"normal\") {\r\n  msg (\"You're normal\")\r\n} else if (player.condition_string_attribute = \"poisoned\") {\r\n  msg (\"You're poisoned\")\r\n} else if (player.condition_string_attribute = \"silenced\") {\r\n  msg (\"You're silenced\")\r\n}\r\n// etc 'else ifs'....\r\n```\r\n\r\na bit better... unless you need/want multiple effects/conditions at the same time...\r\n\r\n-------------------\r\n\r\nand (for a really big conplex game) really better (a single List Attribute):\r\n\r\nplayer.condition_stringlist_attribute = NewStringList ()\r\nlist add (player.condition_stringlist_attribute, \"normal\")\r\n\r\nyou get poisoned (continuing from above state):\r\n\r\nlist add (player.condition_stringlist_attribute, \"poisoned\")\r\nlist remove (player.condition_stringlist_attribute, \"normal\")\r\n\r\nyou get silenced (continuing from above state):\r\n\r\nlist add (player.condition_stringlist_attribute, \"silenced\")\r\nlist remove (player.condition_stringlist_attribute, \"poison\")\r\n\r\nyou get poisoned and silenced (continuing from above state):\r\n\r\nlist add (player.condition_stringlist_attribute, \"poisoned\")\r\n\r\nyou get poisoned and silenced and confused (continuing from above state):\r\n\r\nlist add (player.condition_stringlist_attribute, \"confused\")\r\n\r\nyou get poisoned and silenced and confused (continuing from intial/default state: 'normal' only):\r\n\r\nlist add (player.condition_stringlist_attribute, \"confused\")\r\nlist add (player.condition_stringlist_attribute, \"poisoned\")\r\nlist add (player.condition_stringlist_attribute, \"silenced\")\r\nlist remove (player.condition_stringlist_attribute, \"normal\")\r\n\r\n// scripting example:\r\n\r\n```\r\n<object name=\"player\">\r\n  // I don't know if the special 'changedXXX' Script Attribute can work with Lists... if not... than we'd have to use a Turnscript Element instead:\r\n  <attr name=\"changedcondition_stringlist_attribute\" type=\"script\"><![CDATA[\r\n    foreach (string_variable, player.condition_stringlist_attribute) {\r\n      if (string_variable = \"poisoned\") {\r\n        player.current_life_attribute = player.current_life_attribute - 50\r\n      }\r\n    }\r\n ]]></attr>\r\n <attr name=\"changedcurrent_life_attribute\" type=\"script\"><![CDATA[\r\n   if (player.current_life_attribute < 1) {\r\n     msg (You've died.\")\r\n     msg (\"GAME OVER\")\r\n     finish\r\n   }\r\n ]]></attr>\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Booleans are nice and have their uses, but take a look at this:</p>\n<p>your usually 'status effects / conditions' in RPGs:</p>\n<p>player.poisoned = false<br>\nplayer.asleep = false<br>\nplayer.petrified = false<br>\nplayer.confused = false<br>\nplayer.silenced = false<br>\netc etc etc</p>\n<p>YUCK! (N Attributes)</p>\n<p>you get poisoned:</p>\n<p>player.poisoned = true<br>\nplayer.asleep = false<br>\nplayer.petrified = false<br>\nplayer.confused = false<br>\nplayer.silenced = false<br>\netc etc etc</p>\n<p>you get silenced:</p>\n<p>player.poisoned = false<br>\nplayer.asleep = false<br>\nplayer.petrified = false<br>\nplayer.confused = false<br>\nplayer.silenced = true<br>\netc etc etc</p>\n<p>you get poisoned and silenced (having multiple Boolean Attributes, DO allow for multiple conditions, a positive, whereas a single String Attribute does not, however, a single Stringlist Attribute does, and it, a single Stringlist Attribute, is (for really big/complex designs) better than multiple Boolean Attributes):</p>\n<p>player.poisoned = true<br>\nplayer.asleep = false<br>\nplayer.petrified = false<br>\nplayer.confused = false<br>\nplayer.silenced = true<br>\netc etc etc</p>\n<p>// scripting example:</p>\n<pre><code>if (player.normal) {\n  msg (\"you're normal\")\n} else if (player.poisoned) {\n  msg (\"You're poisoned\")\n} else if (player.asleep) {\n  msg (\"You're asleep\")\n} else if (player.silenced) {\n  msg (\"You're silenced\")\n} else if (player.petrified) {\n  msg (\"You're petrified\")\n} else if (player.poisoned and player.confused) {\n  msg (\"You're poisoned and confused\")\n}\n// etc 'else ifs'...\n</code></pre>\n<p>YUCK!</p>\n<hr>\n<p>whereas, much better (a single Attribute):</p>\n<p>player.condition_string_attribute = \"normal\"</p>\n<p>you get poisoned:</p>\n<p>player.condition_string_attribute = \"poisoned\"</p>\n<p>you get silenced:</p>\n<p>player.condition_string_attribute = \"silenced\"</p>\n<p>we can't have two conditions at the same time with a single String Attribute, however.</p>\n<p>// scripting example:</p>\n<pre><code>if (player.condition_string_attribute = \"normal\") {\n  msg (\"You're normal\")\n} else if (player.condition_string_attribute = \"poisoned\") {\n  msg (\"You're poisoned\")\n} else if (player.condition_string_attribute = \"silenced\") {\n  msg (\"You're silenced\")\n}\n// etc 'else ifs'....\n</code></pre>\n<p>a bit better... unless you need/want multiple effects/conditions at the same time...</p>\n<hr>\n<p>and (for a really big conplex game) really better (a single List Attribute):</p>\n<p>player.condition_stringlist_attribute = NewStringList ()<br>\nlist add (player.condition_stringlist_attribute, \"normal\")</p>\n<p>you get poisoned (continuing from above state):</p>\n<p>list add (player.condition_stringlist_attribute, \"poisoned\")<br>\nlist remove (player.condition_stringlist_attribute, \"normal\")</p>\n<p>you get silenced (continuing from above state):</p>\n<p>list add (player.condition_stringlist_attribute, \"silenced\")<br>\nlist remove (player.condition_stringlist_attribute, \"poison\")</p>\n<p>you get poisoned and silenced (continuing from above state):</p>\n<p>list add (player.condition_stringlist_attribute, \"poisoned\")</p>\n<p>you get poisoned and silenced and confused (continuing from above state):</p>\n<p>list add (player.condition_stringlist_attribute, \"confused\")</p>\n<p>you get poisoned and silenced and confused (continuing from intial/default state: 'normal' only):</p>\n<p>list add (player.condition_stringlist_attribute, \"confused\")<br>\nlist add (player.condition_stringlist_attribute, \"poisoned\")<br>\nlist add (player.condition_stringlist_attribute, \"silenced\")<br>\nlist remove (player.condition_stringlist_attribute, \"normal\")</p>\n<p>// scripting example:</p>\n<pre><code>&lt;object name=\"player\"&gt;\n  // I don't know if the special 'changedXXX' Script Attribute can work with Lists... if not... than we'd have to use a Turnscript Element instead:\n  &lt;attr name=\"changedcondition_stringlist_attribute\" type=\"script\"&gt;&lt;![CDATA[\n    foreach (string_variable, player.condition_stringlist_attribute) {\n      if (string_variable = \"poisoned\") {\n        player.current_life_attribute = player.current_life_attribute - 50\n      }\n    }\n ]]&gt;&lt;/attr&gt;\n &lt;attr name=\"changedcurrent_life_attribute\" type=\"script\"&gt;&lt;![CDATA[\n   if (player.current_life_attribute &lt; 1) {\n     msg (You've died.\")\n     msg (\"GAME OVER\")\n     finish\n   }\n ]]&gt;&lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2016-12-26T16:24:32.4990745Z",
      "LastEditDate": "2016-12-26T16:45:40.9927887Z"
    },
    {
      "PostId": "137fe24b-ee2d-48d2-814a-3c1ab7d91dbe",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> So as I understand it, I after I use 'this' to clone an object, henceforth 'this' will refer to the cloned object? What if I want to run a seperate script that also refers to the clone, in that case 'this' wouldn't work. I'm unclear on what you mean by 'when it is on the clone', because I'm unsure how to apply a script to the clone in the first place.\r\n\r\nScripts are all attached to something, whether that is a turn script, a command, a room or an object; the script is an attribute of the thing. The \"this\" refers to the thing the script is an attribute of.\r\n\r\nWhen you create a clone, it gets all the attributes of the original, including the scripts. If the script attributes use \"this\", they now refer to the clone.\r\n\r\n> Ah but I guess I can check for objects in the room that the player is in with the alias of a creature instead then. In that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.\r\n\r\nYou could have a script that searches the room for monsters with that alias. That is easier than searching for monsters that have a name that start with something, I would say. There is no trivial way to do this.\r\n\r\n> For now my plan for the random generation system is this (I'm not sure how to write it in the correct syntax):\r\n\r\nI would create a type for each room-biome, and have the script in the type. The room with the forest_with_stream type will then produce creatures of the appropriate type (and as with cloning, use \"this\" to refer to the room itself).\r\n\r\nIf you run the script whenever the player enters the room, the player can get more to appear just by stepping into another room then stepping back into this room. You might want to think about a delay.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>So as I understand it, I after I use 'this' to clone an object, henceforth 'this' will refer to the cloned object? What if I want to run a seperate script that also refers to the clone, in that case 'this' wouldn't work. I'm unclear on what you mean by 'when it is on the clone', because I'm unsure how to apply a script to the clone in the first place.</p>\n</blockquote>\n<p>Scripts are all attached to something, whether that is a turn script, a command, a room or an object; the script is an attribute of the thing. The \"this\" refers to the thing the script is an attribute of.</p>\n<p>When you create a clone, it gets all the attributes of the original, including the scripts. If the script attributes use \"this\", they now refer to the clone.</p>\n<blockquote>\n<p>Ah but I guess I can check for objects in the room that the player is in with the alias of a creature instead then. In that case, if I were to spawn multiple instances of a creature in a room for some reason then I wouldn't be able to refer to a specific one, because they would all have the same alias, right? That might not be a problem for now, but it could be in the future.</p>\n</blockquote>\n<p>You could have a script that searches the room for monsters with that alias. That is easier than searching for monsters that have a name that start with something, I would say. There is no trivial way to do this.</p>\n<blockquote>\n<p>For now my plan for the random generation system is this (I'm not sure how to write it in the correct syntax):</p>\n</blockquote>\n<p>I would create a type for each room-biome, and have the script in the type. The room with the forest_with_stream type will then produce creatures of the appropriate type (and as with cloning, use \"this\" to refer to the room itself).</p>\n<p>If you run the script whenever the player enters the room, the player can get more to appear just by stepping into another room then stepping back into this room. You might want to think about a delay.</p>\n\n",
      "PostDate": "2016-12-26T22:14:23.3199631Z",
      "LastEditDate": null
    },
    {
      "PostId": "0f93af80-e479-4b9e-939d-5fe213582556",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh that makes so much more sense! I can use a separate script to clone one of the template creatures, and them have a script using 'this' on the creature object that triggers when it's in the same room as the player.\r\n\r\nAnd I see what you're saying about the booleans creating a tonne of unnecessary code. I don't really understand adding or removing things from lists yet because I haven't used them, but I'm sure I'll understand it more when I can actually put it into practice.\r\n\r\nThanks everyone, that's heaps for me to work on. I'll be back once I can get programming once more.\r\n\r\nAlso thanks hegemon. :) I work in motion graphics, which occasionally touches on some simple scripting (I believe After Effects uses JavaScript?), so maybe I can't say that I'm that new. AE also requires you to plan ahead and think about parent-child relationships, so I'm sure that helps me to understand the logic a little more. Games are my real passion, but normally I'm more of a visual person.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh that makes so much more sense! I can use a separate script to clone one of the template creatures, and them have a script using 'this' on the creature object that triggers when it's in the same room as the player.</p>\n<p>And I see what you're saying about the booleans creating a tonne of unnecessary code. I don't really understand adding or removing things from lists yet because I haven't used them, but I'm sure I'll understand it more when I can actually put it into practice.</p>\n<p>Thanks everyone, that's heaps for me to work on. I'll be back once I can get programming once more.</p>\n<p>Also thanks hegemon. :) I work in motion graphics, which occasionally touches on some simple scripting (I believe After Effects uses JavaScript?), so maybe I can't say that I'm that new. AE also requires you to plan ahead and think about parent-child relationships, so I'm sure that helps me to understand the logic a little more. Games are my real passion, but normally I'm more of a visual person.</p>\n\n",
      "PostDate": "2016-12-26T23:40:55.859193Z",
      "LastEditDate": "2016-12-26T23:50:20.3596947Z"
    },
    {
      "PostId": "a4ab2d60-0101-4499-8e9b-36c82a6971b8",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry guys, I have a very simple question. In a script like this: \r\n\r\n```\r\nforeach (obj, AllObjects()) {\r\n  if (DoesInherit(obj, \"object_animal\")) {\r\n    RemoveObject (obj.this)\r\n  }\r\n  else {\r\n  }\r\n} \r\n```\r\n\r\nWhat is the correct syntax for using 'this' after RemoveObject? The example I have here is obviously incorrect.\r\n\r\nMy goal is to check for any objects of that inherit the 'object_animal' type when the player enters a room and remove them.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry guys, I have a very simple question. In a script like this:</p>\n<pre><code>foreach (obj, AllObjects()) {\n  if (DoesInherit(obj, \"object_animal\")) {\n    RemoveObject (obj.this)\n  }\n  else {\n  }\n} \n</code></pre>\n<p>What is the correct syntax for using 'this' after RemoveObject? The example I have here is obviously incorrect.</p>\n<p>My goal is to check for any objects of that inherit the 'object_animal' type when the player enters a room and remove them.</p>\n\n",
      "PostDate": "2016-12-29T04:13:31.3590635Z",
      "LastEditDate": "2016-12-29T04:15:30.8570032Z"
    },
    {
      "PostId": "64801514-161f-4323-80ef-7889897456c2",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "RemoveObject (obj.this)\r\n\r\nI believe this would be the best route. I think I have it correct. \r\n```\r\nRemoveObject (this)\r\n```\r\n\r\nAnonynn. ",
      "EditableFormat": "markdown",
      "HTML": "<p>RemoveObject (obj.this)</p>\n<p>I believe this would be the best route. I think I have it correct.</p>\n<pre><code>RemoveObject (this)\n</code></pre>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2016-12-29T05:07:44.6302147Z",
      "LastEditDate": null
    },
    {
      "PostId": "9e4de085-1524-4df9-b961-b5806fc34038",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hm, I've tried that and it doesn't seem to be working. Perhaps there's something else in my script that's wrong?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hm, I've tried that and it doesn't seem to be working. Perhaps there's something else in my script that's wrong?</p>\n\n",
      "PostDate": "2016-12-29T06:29:31.69868Z",
      "LastEditDate": null
    },
    {
      "PostId": "d0726058-3e40-4e30-8dbe-750dfaaf4e69",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another question: player.parent refers to the room which the player is currently in. So how do I refer to an attribute of player.parent in a script elsewhere?\r\n\r\nFor example, I want to run a script every time the player enters a room. The script only runs if the room inherits a certain type, or if a certain boolean is set to 'true'. What would be the correct syntax for checking one of these attributes?\r\n\r\nObviously something like player.parent (DoesInherit(obj, \"object_spawn\")) is incorrect, but I'm not sure how to write it correctly. Would I use 'for'? As in, for (player.parent) > (DoesInherit(obj, \"object_spawn\"))?",
      "EditableFormat": "markdown",
      "HTML": "<p>Another question: player.parent refers to the room which the player is currently in. So how do I refer to an attribute of player.parent in a script elsewhere?</p>\n<p>For example, I want to run a script every time the player enters a room. The script only runs if the room inherits a certain type, or if a certain boolean is set to 'true'. What would be the correct syntax for checking one of these attributes?</p>\n<p>Obviously something like player.parent (DoesInherit(obj, \"object_spawn\")) is incorrect, but I'm not sure how to write it correctly. Would I use 'for'? As in, for (player.parent) &gt; (DoesInherit(obj, \"object_spawn\"))?</p>\n\n",
      "PostDate": "2016-12-29T08:15:37.2422325Z",
      "LastEditDate": null
    },
    {
      "PostId": "c0616dfb-a20b-4df0-9214-60e2d00fd5db",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure quite what you are trying t do, but this maybe:\r\n```\r\nRemoveObject (obj)\r\n```\r\nTo access the attribute of an attribute, just use anther dot:\r\n```\r\nplayer.parent.attribute\r\n```\r\nBut the code you have looks like you are doing something a bit different? Are you trying to find all the objects in the room? That would be different.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure quite what you are trying t do, but this maybe:</p>\n<pre><code>RemoveObject (obj)\n</code></pre>\n<p>To access the attribute of an attribute, just use anther dot:</p>\n<pre><code>player.parent.attribute\n</code></pre>\n<p>But the code you have looks like you are doing something a bit different? Are you trying to find all the objects in the room? That would be different.</p>\n\n",
      "PostDate": "2016-12-29T12:06:05.0735936Z",
      "LastEditDate": null
    },
    {
      "PostId": "733fce68-bfc2-4aa6-acc8-6b295a6c82a8",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, RemoveObject (obj) is close! However it seems to prevent any other objects of that type from spawning, unfortunately.\r\n\r\nWhat I'm trying to do is make sure that any objects that have previously been spawned are removed before the player enters. Ideally the cloned objects would be removed as soon as the player enters another room, but I haven't figured out a solution for that yet. Perhaps running a check on all objects of a particular type and removing ones that _don't_ share a parent with the player?\r\n\r\nHere's the code I'm using currently\r\n\r\n```\r\nroom = player.parent\r\nforeach (obj, AllObjects()) {\r\n  if (obj.parent = player.parent and DoesInherit(obj, \"object_animal\")) {\r\n    RemoveObject (obj)\r\n  }\r\n  else {\r\n  }\r\n}\r\nif (room.spawn = true) {\r\n  if (room.spawn_rabbit = true) {\r\n    chance_rabbit = GetRandomInt (0, 100)\r\n    chance_rabbit_spawn = room.spawn_rabbit_chance\r\n    if (chance_rabbit <= chance_rabbit_spawn) {\r\n      CloneObjectAndMove (rabbit, room)\r\n    }\r\n  }\r\n  if (room.spawn_doe = true) {\r\n    chance_doe  = GetRandomInt (0, 100)\r\n    chance_doe_spawn = room.spawn_doe_chance\r\n    if (chance_doe <= chance_doe_spawn) {\r\n      CloneObjectAndMove (doe, room)\r\n    }\r\n  }\r\n  if (room.spawn_salmon = true) {\r\n    chance_salmon = GetRandomInt (0, 100)\r\n    chance_salmon_spawn = room.spawn_salmon_chance\r\n    if (chance_salmon <= chance_salmon_spawn) {\r\n      CloneObjectAndMove (salmon, room)\r\n    }\r\n  }\r\n}\r\nelse {\r\n}\r\n```\r\n\r\nThe other unfortunate thing about this script is that it allows multiple animals to spawn at once. I haven't been able to figure out a way to arrange it so that only one animal will spawn at a time, without drastically compromising the probabilities of some of them. I haven't quite grasped lists yet, but I'm sure they'd be useful for this.\r\n\r\nThanks again!\r\n\r\n\r\nEDIT: I'm also wrestling with trying to assign the animals a size integer when they're spawned. Each animal will have a range of sizes  that it can spawn at that are represented numerically (a rabbit might be 4 - 20 for example). I'm trying to figure out if I can assign that integer to the clone and have it stay persistent for just that clone. Changedparent seems to work when the object is moved, but not when it's cloned.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, RemoveObject (obj) is close! However it seems to prevent any other objects of that type from spawning, unfortunately.</p>\n<p>What I'm trying to do is make sure that any objects that have previously been spawned are removed before the player enters. Ideally the cloned objects would be removed as soon as the player enters another room, but I haven't figured out a solution for that yet. Perhaps running a check on all objects of a particular type and removing ones that <em>don't</em> share a parent with the player?</p>\n<p>Here's the code I'm using currently</p>\n<pre><code>room = player.parent\nforeach (obj, AllObjects()) {\n  if (obj.parent = player.parent and DoesInherit(obj, \"object_animal\")) {\n    RemoveObject (obj)\n  }\n  else {\n  }\n}\nif (room.spawn = true) {\n  if (room.spawn_rabbit = true) {\n    chance_rabbit = GetRandomInt (0, 100)\n    chance_rabbit_spawn = room.spawn_rabbit_chance\n    if (chance_rabbit &lt;= chance_rabbit_spawn) {\n      CloneObjectAndMove (rabbit, room)\n    }\n  }\n  if (room.spawn_doe = true) {\n    chance_doe  = GetRandomInt (0, 100)\n    chance_doe_spawn = room.spawn_doe_chance\n    if (chance_doe &lt;= chance_doe_spawn) {\n      CloneObjectAndMove (doe, room)\n    }\n  }\n  if (room.spawn_salmon = true) {\n    chance_salmon = GetRandomInt (0, 100)\n    chance_salmon_spawn = room.spawn_salmon_chance\n    if (chance_salmon &lt;= chance_salmon_spawn) {\n      CloneObjectAndMove (salmon, room)\n    }\n  }\n}\nelse {\n}\n</code></pre>\n<p>The other unfortunate thing about this script is that it allows multiple animals to spawn at once. I haven't been able to figure out a way to arrange it so that only one animal will spawn at a time, without drastically compromising the probabilities of some of them. I haven't quite grasped lists yet, but I'm sure they'd be useful for this.</p>\n<p>Thanks again!</p>\n<p>EDIT: I'm also wrestling with trying to assign the animals a size integer when they're spawned. Each animal will have a range of sizes  that it can spawn at that are represented numerically (a rabbit might be 4 - 20 for example). I'm trying to figure out if I can assign that integer to the clone and have it stay persistent for just that clone. Changedparent seems to work when the object is moved, but not when it's cloned.</p>\n\n",
      "PostDate": "2016-12-29T12:35:23.2147518Z",
      "LastEditDate": "2016-12-29T13:20:17.236033Z"
    },
    {
      "PostId": "36eb1a6c-784f-4ce9-9fa8-2df7dd942083",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the first section of your code\r\n```room = player.parent\r\nforeach (obj, AllObjects()) {\r\n  if (obj.parent = player.parent and DoesInherit(obj, \"object_animal\")) {\r\n    RemoveObject (obj)\r\n  }\r\n  else {\r\n  }\r\n}\r\n```\r\nI'd suggest using http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html in the future, helps keep the code a bit cleaner although your current version is functionally the same, just with an extra step.\r\nie:\r\n```\r\nforeach (obj, GetDirectChildren (player.parent)) {\r\n  if (DoesInherit(obj, \"object_animal\")) {\r\n    RemoveObject (obj)\r\n  }\r\n  else {\r\n  }\r\n}\r\n````\r\nAs for making sure encounter objects get cleaned up, is there a scenario where you want the player to come back to a room and have those objects still be there? If not then I'd clean them up when the player is done with the encounter and/or leaves the room instead of waiting for them to re-enter.\r\n\r\nAs for how/when you'd clear something like that it seems like you're already aware of using changed attributes such as 'changedparent'. You can use this on the player to clear things as you leave a room and only have to check that room due to the changed attribute script having access to a temporary variable called 'oldvalue'. It stores the previous value of the attribute in question when the changed script triggers. In the case of 'changedparent', 'oldvalue' contains the previous parent, so you can check the previous rooms contents and clear them when the player's parent changes.\r\n\r\nFor your animal spawns you could either modify the original checks to prevent multiple spawns (probably more complicated) or add a check after the spawns are run and remove extras.\r\n\r\nOne question to answer there is do you want certain animals to have priority over others when spawned at the same time? If so the solution is relatively simple as you run an if check in the order of priority and remove all the extras when the highest priority animal is detected. Otherwise you'll probably want to build a list of all the animals that passed the spawn check then select one from that list at random to keep. You could either do a room check for animal objects again to build the list, or the way I'd do it would be to build a list when your running your spawn chances and not create any clones at that point. Then after all the spawn chances are checked you run a check on the spawn list, if empty, do nothing, if the list contains more than one item, select one at random and spawn that animal.\r\n\r\nie: check the room for multi spawns\r\n```\r\n//clear room spawnlist before running checks\r\nroom.spawnlist = NewObjectList ()\r\nforeach (obj, GetDirectChildren (player.parent)){\r\n if(DoesInherit(obj, \"object_animal\")){\r\n  //add animal objects to the spawn list\r\n  list add (room.spawnlist, obj)\r\n }\r\n}\r\nif (ListCount (room.spawnlist) > 1) {\r\n//more than one animal spawned, pick one at random\r\nrand = GetRandomInt (0, ListCount (room.spawnlist) -1)\r\nspawned = ObjectListItem (room.spawnlist, rand)\r\n//\r\n//animal selected, remove all others\r\n foreach (obj, room.spawnlist) {\r\n   if (not obj = spawned) {\r\n     RemoveObject (obj)\r\n   }\r\n }\r\n}\r\n//other cases are a single spawn or no spawns, nothing special happens so no check required\r\n```\r\nie: create a list before spawning\r\n```\r\n//clear room spawnlist before running checks\r\nroom.spawnlist = NewObjectList ()\r\n//\r\n//example of a spawn check\r\nif (room.spawn = true) {\r\n  if (room.spawn_rabbit = true) {\r\n    chance_rabbit = GetRandomInt (0, 100)\r\n    chance_rabbit_spawn = room.spawn_rabbit_chance\r\n    if (chance_rabbit <= chance_rabbit_spawn) {\r\n//**\r\n//add item to list instead of cloning\r\n      list add (room.spawnlist, rabbit)\r\n    }\r\n//...\r\n//check list for spawn count\r\nif (ListCount (room.spawnlist) = 1){\r\n //only one spawn so clone the object\r\n CloneObjectAndMove (ObjectListItem (room.spawn, 0), room)\r\n}\r\nelse if (ListCount (room.spawnlist) > 1){\r\n //more than one spawned, select one at random\r\n rand = GetRandomInt (0, ListCount (room.spawnlist) -1)\r\n //clone selected\r\n CloneObjectAndMove (ObjectListItem (room.spawn, rand), room)\r\n}\r\nelse{\r\n //only other possibility is no spawn this section isn't necessary as nothing happens.\r\n}\r\n```\r\n\r\nAnd I do generally comment all my scripts almost this much so I can remember what parts do what when I inevitably have to go back and make changes to fix things I forgot to account for, heh.",
      "EditableFormat": "markdown",
      "HTML": "<p>For the first section of your code</p>\n<pre><code>foreach (obj, AllObjects()) {\n  if (obj.parent = player.parent and DoesInherit(obj, \"object_animal\")) {\n    RemoveObject (obj)\n  }\n  else {\n  }\n}\n</code></pre>\n<p>I'd suggest using http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html in the future, helps keep the code a bit cleaner although your current version is functionally the same, just with an extra step.<br>\nie:</p>\n<pre><code>foreach (obj, GetDirectChildren (player.parent)) {\n  if (DoesInherit(obj, \"object_animal\")) {\n    RemoveObject (obj)\n  }\n  else {\n  }\n}\n</code></pre>\n<p>As for making sure encounter objects get cleaned up, is there a scenario where you want the player to come back to a room and have those objects still be there? If not then I'd clean them up when the player is done with the encounter and/or leaves the room instead of waiting for them to re-enter.</p>\n<p>As for how/when you'd clear something like that it seems like you're already aware of using changed attributes such as 'changedparent'. You can use this on the player to clear things as you leave a room and only have to check that room due to the changed attribute script having access to a temporary variable called 'oldvalue'. It stores the previous value of the attribute in question when the changed script triggers. In the case of 'changedparent', 'oldvalue' contains the previous parent, so you can check the previous rooms contents and clear them when the player's parent changes.</p>\n<p>For your animal spawns you could either modify the original checks to prevent multiple spawns (probably more complicated) or add a check after the spawns are run and remove extras.</p>\n<p>One question to answer there is do you want certain animals to have priority over others when spawned at the same time? If so the solution is relatively simple as you run an if check in the order of priority and remove all the extras when the highest priority animal is detected. Otherwise you'll probably want to build a list of all the animals that passed the spawn check then select one from that list at random to keep. You could either do a room check for animal objects again to build the list, or the way I'd do it would be to build a list when your running your spawn chances and not create any clones at that point. Then after all the spawn chances are checked you run a check on the spawn list, if empty, do nothing, if the list contains more than one item, select one at random and spawn that animal.</p>\n<p>ie: check the room for multi spawns</p>\n<pre><code>//clear room spawnlist before running checks\nroom.spawnlist = NewObjectList ()\nforeach (obj, GetDirectChildren (player.parent)){\n if(DoesInherit(obj, \"object_animal\")){\n  //add animal objects to the spawn list\n  list add (room.spawnlist, obj)\n }\n}\nif (ListCount (room.spawnlist) &gt; 1) {\n//more than one animal spawned, pick one at random\nrand = GetRandomInt (0, ListCount (room.spawnlist) -1)\nspawned = ObjectListItem (room.spawnlist, rand)\n//\n//animal selected, remove all others\n foreach (obj, room.spawnlist) {\n   if (not obj = spawned) {\n     RemoveObject (obj)\n   }\n }\n}\n//other cases are a single spawn or no spawns, nothing special happens so no check required\n</code></pre>\n<p>ie: create a list before spawning</p>\n<pre><code>//clear room spawnlist before running checks\nroom.spawnlist = NewObjectList ()\n//\n//example of a spawn check\nif (room.spawn = true) {\n  if (room.spawn_rabbit = true) {\n    chance_rabbit = GetRandomInt (0, 100)\n    chance_rabbit_spawn = room.spawn_rabbit_chance\n    if (chance_rabbit &lt;= chance_rabbit_spawn) {\n//**\n//add item to list instead of cloning\n      list add (room.spawnlist, rabbit)\n    }\n//...\n//check list for spawn count\nif (ListCount (room.spawnlist) = 1){\n //only one spawn so clone the object\n CloneObjectAndMove (ObjectListItem (room.spawn, 0), room)\n}\nelse if (ListCount (room.spawnlist) &gt; 1){\n //more than one spawned, select one at random\n rand = GetRandomInt (0, ListCount (room.spawnlist) -1)\n //clone selected\n CloneObjectAndMove (ObjectListItem (room.spawn, rand), room)\n}\nelse{\n //only other possibility is no spawn this section isn't necessary as nothing happens.\n}\n</code></pre>\n<p>And I do generally comment all my scripts almost this much so I can remember what parts do what when I inevitably have to go back and make changes to fix things I forgot to account for, heh.</p>\n\n",
      "PostDate": "2016-12-29T17:25:47.25053Z",
      "LastEditDate": "2016-12-29T21:19:00.2899622Z"
    },
    {
      "PostId": "a97f5636-83d2-4bac-a35a-fa0e88d09991",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this has surely already been explained (hadn't read the other posts yet), but just to give my own explanation anyways:\r\n\r\nthe 'foreach' Function creates/uses a temporary placeholder Variable:\r\n\r\nforeach (NAME_OF_TEMPORARY_PLACEHOLDER_VARIABLE, NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE) { /* scripting */ }\r\n\r\nthe temporary placeholder variable stores, each of the items in the list individually one after the other, thus the 'each' in foreach, so it works like this, for an example:\r\n\r\nteam_object.team_list_attribute = split (\"joe;jeff;jim\", \";\")\r\n\r\nforeach (team_member, team_object.team_list_atribute) {\r\n-> msg (team_member)\r\n}\r\n\r\n// effectively, what it does:\r\n\r\nteam_member = \"joe\"\r\nmsg (team_member)\r\nteam_member = \"jeff\"\r\nmsg (team_member)\r\nteam_member = \"jim\"\r\nmsg (team_member)\r\n\r\n// output:\r\njoe\r\njeff\r\njim\r\n\r\nyou can of course do more/various/different scripting with your temporary placeholder variable, whether it's value is an Object (from an Objectlist Attribute) or a String (from a Stringlist Attribute) --- you can even also effectively convert a String into an Object via, for example: GetObject (team_member_as_a_string_variable) --- , for example of using Objects and an Objectlist Attribute:\r\n\r\n```\r\n<object name=\"team_object\">\r\n  <attr name=\"team_objectlist_attribute\" type=\"objectlist\">joe;jeff;jim</attr>\r\n</object>\r\n\r\n<object name=\"joe\">\r\n  <attr name=\"run_laps\" type=\"script\">\r\n    msg (this.name + \" runs laps\")\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"jeff\">\r\n  <attr name=\"run_laps\" type=\"script\">\r\n    msg (this.name + \" runs laps\")\r\n  </attr>\r\n</object>\r\n\r\n<object name=\"jim\">\r\n  <attr name=\"run_laps\" type=\"script\">\r\n    msg (this.name + \" runs laps\")\r\n  </attr>\r\n</object>\r\n\r\n// scripting:\r\n\r\nforeach (team_member, team_object.team_objectlist_attribute) {\r\n  invoke (team_member.run_laps)\r\n}\r\n\r\n// effectively, it's doing this:\r\n\r\nteam_member = joe\r\ninvoke (team_member.run_laps)\r\ninvoke (joe.run_laps)\r\nteam_member = jeff\r\ninvoke (team_member.run_laps)\r\ninvoke (jeff.run_laps)\r\nteam_member = jim\r\ninvoke (team_member.run_laps)\r\ninvoke (jim.run_laps)\r\n\r\n// output:\r\n\r\njoe runs laps\r\njeff runs laps\r\njim runs laps\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>this has surely already been explained (hadn't read the other posts yet), but just to give my own explanation anyways:</p>\n<p>the 'foreach' Function creates/uses a temporary placeholder Variable:</p>\n<p>foreach (NAME_OF_TEMPORARY_PLACEHOLDER_VARIABLE, NAME_OF_OBJECT.NAME_OF_LIST_ATTRIBUTE) { /* scripting */ }</p>\n<p>the temporary placeholder variable stores, each of the items in the list individually one after the other, thus the 'each' in foreach, so it works like this, for an example:</p>\n<p>team_object.team_list_attribute = split (\"joe;jeff;jim\", \";\")</p>\n<p>foreach (team_member, team_object.team_list_atribute) {<br>\n-&gt; msg (team_member)<br>\n}</p>\n<p>// effectively, what it does:</p>\n<p>team_member = \"joe\"<br>\nmsg (team_member)<br>\nteam_member = \"jeff\"<br>\nmsg (team_member)<br>\nteam_member = \"jim\"<br>\nmsg (team_member)</p>\n<p>// output:<br>\njoe<br>\njeff<br>\njim</p>\n<p>you can of course do more/various/different scripting with your temporary placeholder variable, whether it's value is an Object (from an Objectlist Attribute) or a String (from a Stringlist Attribute) --- you can even also effectively convert a String into an Object via, for example: GetObject (team_member_as_a_string_variable) --- , for example of using Objects and an Objectlist Attribute:</p>\n<pre><code>&lt;object name=\"team_object\"&gt;\n  &lt;attr name=\"team_objectlist_attribute\" type=\"objectlist\"&gt;joe;jeff;jim&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"joe\"&gt;\n  &lt;attr name=\"run_laps\" type=\"script\"&gt;\n    msg (this.name + \" runs laps\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"jeff\"&gt;\n  &lt;attr name=\"run_laps\" type=\"script\"&gt;\n    msg (this.name + \" runs laps\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"jim\"&gt;\n  &lt;attr name=\"run_laps\" type=\"script\"&gt;\n    msg (this.name + \" runs laps\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting:\n\nforeach (team_member, team_object.team_objectlist_attribute) {\n  invoke (team_member.run_laps)\n}\n\n// effectively, it's doing this:\n\nteam_member = joe\ninvoke (team_member.run_laps)\ninvoke (joe.run_laps)\nteam_member = jeff\ninvoke (team_member.run_laps)\ninvoke (jeff.run_laps)\nteam_member = jim\ninvoke (team_member.run_laps)\ninvoke (jim.run_laps)\n\n// output:\n\njoe runs laps\njeff runs laps\njim runs laps\n</code></pre>\n\n",
      "PostDate": "2016-12-29T18:43:49.7080958Z",
      "LastEditDate": "2016-12-29T18:58:34.6351319Z"
    },
    {
      "PostId": "bf887609-6cd7-419f-8e6a-f5206c55ff52",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Right, I think I get it. Invoke seems pretty handy, it might explain why the scripts that I've attached to the object_animal type aren't working.\r\n\r\nHere's an example: I want to create a script attribute on all animals so that if they're particularly large or particularly small the script will change their alias to describe that. I have a size integer attribute which is randomised between a specified range.\r\n\r\nSo the script I threw together quickly is\r\n\r\n```\r\nsize = this.animal_size\r\nsize_max = this.animal_size_max\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio >= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = \"\"\r\n}\r\n```\r\n\r\nAnd the alias is [#animal_size_adj] Rabbit, for example\r\n\r\nIt hasn't worked so far, but if I invoke (this.animal_size_adj_script) before the animal spawns, maybe that will work.\r\n\r\nAlso, for reference, here's the spawning script I have so far, which exists in the 'script when entering a room' field.\r\n\r\n```\r\nforeach (obj, GetDirectChildren (player.parent)) {\r\n  if (DoesInherit(obj, \"object_animal\")) {\r\n    destroy (obj)\r\n  }\r\n  else {\r\n  }\r\n}\r\nif (room.spawn = true) {\r\n  if (room.spawn_rabbit = true) {\r\n    msg (\"Spawn rabbit\")\r\n    chance_rabbit = GetRandomInt (0, 100)\r\n    chance_rabbit_spawn = room.spawn_rabbit_chance\r\n    if (chance_rabbit <= chance_rabbit_spawn) {\r\n      ClonePrototype (rabbit, room)\r\n    }\r\n  }\r\n  if (room.spawn_doe_whitetailed = true) {\r\n    msg (\"Spawn deer\")\r\n    chance_deer = GetRandomInt (0, 100)\r\n    chance_deer_spawn = room.spawn_deer_chance\r\n    if (chance_deer <= chance_deer_spawn) {\r\n      ClonePrototype (deer, room)\r\n    }\r\n  }\r\n  if (room.spawn_salmon = true) {\r\n    msg (\"Spawn Salmon\")\r\n    chance_salmon = GetRandomInt (0, 100)\r\n    chance_salmon_spawn = room.spawn_salmon_chance\r\n    if (chance_salmon <= chance_salmon_spawn) {\r\n      ClonePrototype (salmon, room)\r\n    }\r\n  }\r\n}\r\nelse {\r\n}\r\nroom.spawnlist = NewObjectList ()\r\nforeach (obj, GetDirectChildren (player.parent)) {\r\n  if (DoesInherit(obj, \"object_animal\")) {\r\n    // add animal objects to the spawn list\r\n    list add (room.spawnlist, obj)\r\n  }\r\n}\r\nif (ListCount (room.spawnlist) > 1) {\r\n  // more than one animal spawned, pick one at random\r\n  rand = GetRandomInt (0, ListCount (room.spawnlist) -1)\r\n  spawned = ObjectListItem (room.spawnlist, rand)\r\n  //\r\n  // animal selected, remove all others\r\n  foreach (obj, room.spawnlist) {\r\n    if (not obj = spawned) {\r\n      RemoveObject (obj)\r\n    }\r\n  }\r\n}\r\n```\r\nI've also discovered Pixie's ClonePrototype function, which seems like it could be very handy if I want to, say, have different colours or descriptors on the animals that spawn. I don't really understand how functions work yet though, so that's something I'll need to look into further.\r\n\r\nUnfortunately I'm still rather busy thanks to family/new years,  but hopefully I'll be back into the swing of things soon.",
      "EditableFormat": "markdown",
      "HTML": "<p>Right, I think I get it. Invoke seems pretty handy, it might explain why the scripts that I've attached to the object_animal type aren't working.</p>\n<p>Here's an example: I want to create a script attribute on all animals so that if they're particularly large or particularly small the script will change their alias to describe that. I have a size integer attribute which is randomised between a specified range.</p>\n<p>So the script I threw together quickly is</p>\n<pre><code>size = this.animal_size\nsize_max = this.animal_size_max\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &gt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = \"\"\n}\n</code></pre>\n<p>And the alias is [#animal_size_adj] Rabbit, for example</p>\n<p>It hasn't worked so far, but if I invoke (this.animal_size_adj_script) before the animal spawns, maybe that will work.</p>\n<p>Also, for reference, here's the spawning script I have so far, which exists in the 'script when entering a room' field.</p>\n<pre><code>foreach (obj, GetDirectChildren (player.parent)) {\n  if (DoesInherit(obj, \"object_animal\")) {\n    destroy (obj)\n  }\n  else {\n  }\n}\nif (room.spawn = true) {\n  if (room.spawn_rabbit = true) {\n    msg (\"Spawn rabbit\")\n    chance_rabbit = GetRandomInt (0, 100)\n    chance_rabbit_spawn = room.spawn_rabbit_chance\n    if (chance_rabbit &lt;= chance_rabbit_spawn) {\n      ClonePrototype (rabbit, room)\n    }\n  }\n  if (room.spawn_doe_whitetailed = true) {\n    msg (\"Spawn deer\")\n    chance_deer = GetRandomInt (0, 100)\n    chance_deer_spawn = room.spawn_deer_chance\n    if (chance_deer &lt;= chance_deer_spawn) {\n      ClonePrototype (deer, room)\n    }\n  }\n  if (room.spawn_salmon = true) {\n    msg (\"Spawn Salmon\")\n    chance_salmon = GetRandomInt (0, 100)\n    chance_salmon_spawn = room.spawn_salmon_chance\n    if (chance_salmon &lt;= chance_salmon_spawn) {\n      ClonePrototype (salmon, room)\n    }\n  }\n}\nelse {\n}\nroom.spawnlist = NewObjectList ()\nforeach (obj, GetDirectChildren (player.parent)) {\n  if (DoesInherit(obj, \"object_animal\")) {\n    // add animal objects to the spawn list\n    list add (room.spawnlist, obj)\n  }\n}\nif (ListCount (room.spawnlist) &gt; 1) {\n  // more than one animal spawned, pick one at random\n  rand = GetRandomInt (0, ListCount (room.spawnlist) -1)\n  spawned = ObjectListItem (room.spawnlist, rand)\n  //\n  // animal selected, remove all others\n  foreach (obj, room.spawnlist) {\n    if (not obj = spawned) {\n      RemoveObject (obj)\n    }\n  }\n}\n</code></pre>\n<p>I've also discovered Pixie's ClonePrototype function, which seems like it could be very handy if I want to, say, have different colours or descriptors on the animals that spawn. I don't really understand how functions work yet though, so that's something I'll need to look into further.</p>\n<p>Unfortunately I'm still rather busy thanks to family/new years,  but hopefully I'll be back into the swing of things soon.</p>\n\n",
      "PostDate": "2016-12-30T13:31:00.0551019Z",
      "LastEditDate": "2016-12-30T13:34:33.7329281Z"
    },
    {
      "PostId": "1fda7585-56e2-465e-b8b7-6c23cae849b6",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Script Attributes (and the 'ScriptDictionaryItem(xxx)' Function for Scriptdictionary Attributes) require the use of 'do' ( http://docs.textadventures.co.uk/quest/scripts/do.html ) or 'invoke' ( http://docs.textadventures.co.uk/quest/scripts/invoke.html ) Script/Functions (the 'do' Function is more powerful/useful than the 'invoke' as it can concatenate, but for simple Script Attribute usage, invoke is fine).\r\n\r\nA Script Attribute (+ Delegate usage) is just like a Function (+ Parameters/Arguments), so just as you have to 'call' a Function to activate/use/do it, so too do you have to 'invoke' or 'do' a Script Attribute to activate/use/do it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Script Attributes (and the 'ScriptDictionaryItem(xxx)' Function for Scriptdictionary Attributes) require the use of 'do' ( http://docs.textadventures.co.uk/quest/scripts/do.html ) or 'invoke' ( http://docs.textadventures.co.uk/quest/scripts/invoke.html ) Script/Functions (the 'do' Function is more powerful/useful than the 'invoke' as it can concatenate, but for simple Script Attribute usage, invoke is fine).</p>\n<p>A Script Attribute (+ Delegate usage) is just like a Function (+ Parameters/Arguments), so just as you have to 'call' a Function to activate/use/do it, so too do you have to 'invoke' or 'do' a Script Attribute to activate/use/do it.</p>\n\n",
      "PostDate": "2016-12-30T14:35:07.0832671Z",
      "LastEditDate": "2016-12-30T14:55:25.0163473Z"
    },
    {
      "PostId": "50926d88-0db8-444d-9d7c-58332693e32a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"\r\nsize = this.animal_size\r\nsize_max = this.animal_size_max\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio >= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = \"\"\r\n}\r\n(scrim)\r\n\"\r\n\r\n-------------------\r\n\r\nyour code looks fine\r\n\r\nto then change the 'alias', you can do something like this:\r\n\r\nstring concatenation, and using this:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/corelibrary/getdisplayalias.html\r\n\r\n```\r\nsize = this.animal_size\r\nsize_max = this.animal_size_max\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio >= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = \"\"\r\n}\r\nthis.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\r\nmsg (this.alias)\r\n\r\n// for example output:\r\n//\r\n// large rabbit\r\n// or\r\n// small rabbit\r\n// or\r\n// (space) rabbit\r\n```\r\n\r\n-----------\r\n\r\nthough, you can tweak the code, to make it a bit better:\r\n\r\n```\r\nsize = this.animal_size\r\nsize_max = this.animal_size_max\r\nratio = size / size_max\r\nif (ratio >= 0.8) {\r\n  this.animal_size_adj = \"Large\"\r\n}\r\nelse if (ratio >= 0.2) {\r\n  this.animal_size_adj = \"Small\"\r\n}\r\nelse {\r\n  this.animal_size_adj = null\r\n}\r\nif (not GetString (this, \"animal_size_adj\") = null) { // maybe you can just do this instead: if (HasString (this, \"animal_size_adj\")) {\r\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\r\n}\r\nmsg (this.alias)\r\n\r\n// for example output:\r\n//\r\n// large rabbit\r\n// or\r\n// small rabbit\r\n// or\r\n// rabbit\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>\"<br>\nsize = this.animal_size<br>\nsize_max = this.animal_size_max<br>\nratio = size / size_max<br>\nif (ratio &gt;= 0.8) {<br>\nthis.animal_size_adj = \"Large\"<br>\n}<br>\nelse if (ratio &gt;= 0.2) {<br>\nthis.animal_size_adj = \"Small\"<br>\n}<br>\nelse {<br>\nthis.animal_size_adj = \"\"<br>\n}<br>\n(scrim)<br>\n\"</p>\n<hr>\n<p>your code looks fine</p>\n<p>to then change the 'alias', you can do something like this:</p>\n<p>string concatenation, and using this:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/corelibrary/getdisplayalias.html</p>\n<pre><code>size = this.animal_size\nsize_max = this.animal_size_max\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &gt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = \"\"\n}\nthis.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\nmsg (this.alias)\n\n// for example output:\n//\n// large rabbit\n// or\n// small rabbit\n// or\n// (space) rabbit\n</code></pre>\n<hr>\n<p>though, you can tweak the code, to make it a bit better:</p>\n<pre><code>size = this.animal_size\nsize_max = this.animal_size_max\nratio = size / size_max\nif (ratio &gt;= 0.8) {\n  this.animal_size_adj = \"Large\"\n}\nelse if (ratio &gt;= 0.2) {\n  this.animal_size_adj = \"Small\"\n}\nelse {\n  this.animal_size_adj = null\n}\nif (not GetString (this, \"animal_size_adj\") = null) { // maybe you can just do this instead: if (HasString (this, \"animal_size_adj\")) {\n  this.alias = this.animal_size_adj + \" \" + GetDisplayAlias (this)\n}\nmsg (this.alias)\n\n// for example output:\n//\n// large rabbit\n// or\n// small rabbit\n// or\n// rabbit\n</code></pre>\n\n",
      "PostDate": "2016-12-30T14:46:03.6215052Z",
      "LastEditDate": "2016-12-30T14:51:13.5754029Z"
    },
    {
      "PostId": "69c7ed16-44f9-4979-8311-96d069c6176b",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Great, thank you! I can invoke the script, but unfortunately it gives me the error: \"Unknown object or variable 'this'\".\r\n\r\nWhich seems strange to me, because if 'this' was going to be recognised anywhere I figured it would be when it was inside an attribute script. Obj doesn't work either.",
      "EditableFormat": "markdown",
      "HTML": "<p>Great, thank you! I can invoke the script, but unfortunately it gives me the error: \"Unknown object or variable 'this'\".</p>\n<p>Which seems strange to me, because if 'this' was going to be recognised anywhere I figured it would be when it was inside an attribute script. Obj doesn't work either.</p>\n\n",
      "PostDate": "2016-12-31T00:12:14.1868056Z",
      "LastEditDate": "2016-12-31T00:24:59.7913198Z"
    },
    {
      "PostId": "f1575463-49ac-42da-a805-496f19b70273",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You cannot use `this` if you call a script with `invoke`; use `do` instead.",
      "EditableFormat": "markdown",
      "HTML": "<p>You cannot use <code>this</code> if you call a script with <code>invoke</code>; use <code>do</code> instead.</p>\n\n",
      "PostDate": "2016-12-31T09:07:09.4953533Z",
      "LastEditDate": null
    },
    {
      "PostId": "2e8b4c68-31c6-4875-b95a-37b8f4e835a2",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah okay, I missed that. I should be able to test it out tomorrow, thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah okay, I missed that. I should be able to test it out tomorrow, thanks!</p>\n\n",
      "PostDate": "2016-12-31T09:38:09.5443745Z",
      "LastEditDate": null
    },
    {
      "PostId": "97d5d9ea-0c1a-4dd7-87d4-2d510d8e8b84",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, thanks Pixie, sorry about that, didn't realize 'this' couldn't be used with 'invoke', now 'do' is even more superior to 'invoke', lol",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, thanks Pixie, sorry about that, didn't realize 'this' couldn't be used with 'invoke', now 'do' is even more superior to 'invoke', lol</p>\n\n",
      "PostDate": "2016-12-31T18:25:10.2403395Z",
      "LastEditDate": null
    },
    {
      "PostId": "b9c8920e-ebaa-41e0-9d20-0c1acae25cb5",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Success! It's finally working, thank a tonne everyone! If anyone is referencing this post in the future, the script I used to 'do' the script attribute on the spawns was\r\n\r\n```\r\nforeach (obj, GetDirectChildren (player.parent)) {\r\n  if (DoesInherit(obj, \"object_animal\")) {\r\n    do (obj, \"animal_size_adj_script\")\r\n  }\r\n  else {\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Success! It's finally working, thank a tonne everyone! If anyone is referencing this post in the future, the script I used to 'do' the script attribute on the spawns was</p>\n<pre><code>foreach (obj, GetDirectChildren (player.parent)) {\n  if (DoesInherit(obj, \"object_animal\")) {\n    do (obj, \"animal_size_adj_script\")\n  }\n  else {\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-02T03:54:26.9697978Z",
      "LastEditDate": "2017-01-02T06:23:51.2955135Z"
    }
  ]
}
