{
  "Topic": {
    "TopicId": "1631",
    "ForumId": "10",
    "Title": "Quest verb crash",
    "LastUpdated": "2007-03-09T19:57:01+00:00",
    "ReplyCount": 17
  },
  "Posts": [
    {
      "PostId": "12934",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "[code:cojipbyw]verb &lt;look on&gt; if property &lt;#quest&#46;lastobject#; list&gt; then exec &lt;look on #quest&#46;lastobject#;normal&gt; else msg &lt;You don't see anything on the #quest&#46;lastobject#&gt;[/code:cojipbyw]\r\nI know this is because it goes into an infinite loop (as quest crashes and doesn't produce a message box.. And I've done it before by an infinite loop).\r\nBut is there any way to get exec to bypass the verb and get onto the normal list activity?\r\n\r\nI say this because I am planning to do alot of verb's in a library for commands and may want to do the normal action for some things (take for example).\r\n\r\n.. On that side note, I'll be releasing a preliminary user test in the not too distance future to see how people like the way it's displayed, and would like as much feedback as possible to improve it.",
      "EditableFormat": "bbcode",
      "HTML": "<pre><code>verb &lt;look on&gt; if property &lt;#quest&#46;lastobject#; list&gt; then exec &lt;look on #quest&#46;lastobject#;normal&gt; else msg &lt;You don't see anything on the #quest&#46;lastobject#&gt;</code></pre><br/>I know this is because it goes into an infinite loop (as quest crashes and doesn't produce a message box.. And I've done it before by an infinite loop).<br/>But is there any way to get exec to bypass the verb and get onto the normal list activity?<br/><br/>I say this because I am planning to do alot of verb's in a library for commands and may want to do the normal action for some things (take for example).<br/><br/>.. On that side note, I'll be releasing a preliminary user test in the not too distance future to see how people like the way it's displayed, and would like as much feedback as possible to improve it.",
      "PostDate": "2007-03-02T15:43:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12935",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Not quite sure what you're trying to do with that code?\r\n\r\nWhy not implement it using a command instead?",
      "EditableFormat": "bbcode",
      "HTML": "Not quite sure what you're trying to do with that code?<br/><br/>Why not implement it using a command instead?",
      "PostDate": "2007-03-02T15:56:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12936",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Two reasons, simplicity and the fact &quot;command #@object#&quot; doesn't catch all objects - simply because objects without aliases don't get parsed (although in my right-proper game/preview will have 'em).\r\nPlus I'd have to do more coding with a command.\r\n\r\nI'm currently investigating possible ways forward.",
      "EditableFormat": "bbcode",
      "HTML": "Two reasons, simplicity and the fact &quot;command #@object#&quot; doesn't catch all objects - simply because objects without aliases don't get parsed (although in my right-proper game/preview will have 'em).<br/>Plus I'd have to do more coding with a command.<br/><br/>I'm currently investigating possible ways forward.",
      "PostDate": "2007-03-02T16:49:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12937",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "&quot;command #@object#&quot; [i:39quwmq6]does[/i:39quwmq6] catch all objects.\r\n\r\nYou don't need to do any more coding with a command, in your case. In fact I think it makes things a lot simpler.\r\n\r\n[code:39quwmq6]\ncommand &lt;look on #@object#&gt; if property &lt;#object#; list&gt; then exec &lt;look on #object#;normal&gt; else msg &lt;You don't see anything on the #@object#&gt;\n[/code:39quwmq6]",
      "EditableFormat": "bbcode",
      "HTML": "&quot;command #@object#&quot; <span style=\"font-style:italic;\">does</span> catch all objects.<br/><br/>You don't need to do any more coding with a command, in your case. In fact I think it makes things a lot simpler.<br/><br/><pre><code><br/>command &lt;look on #@object#&gt; if property &lt;#object#; list&gt; then exec &lt;look on #object#;normal&gt; else msg &lt;You don't see anything on the #@object#&gt;<br/></code></pre>",
      "PostDate": "2007-03-02T16:54:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12938",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Yeah, sorry - I was getting the &quot;I cannot see that object here&quot; message.. which threw me off a typo in code with a &quot;#qobject#&quot; instead of &quot;#object#&quot;.\r\n\r\nI tried that, and it still crashes Quest when using that command.\r\nThe command is as yours above, and;\r\n[code:1sk1vurf]define object &lt;table&gt;\n   surface\nend define\ndefine object &lt;cup&gt;\n   parent &lt;table&gt;\nend define[/code:1sk1vurf]\r\nThat is correct - no?\r\n\r\nAlso, is there a way to get a list of objects in a container?\r\n\r\nlist doesn't contain anything as a property.\r\n\r\n[Edit]\r\nOne additional note - the command is in a library.. Not sure if that'll make a difference to how the commands are evaluated.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, sorry - I was getting the &quot;I cannot see that object here&quot; message.. which threw me off a typo in code with a &quot;#qobject#&quot; instead of &quot;#object#&quot;.<br/><br/>I tried that, and it still crashes Quest when using that command.<br/>The command is as yours above, and;<br/><pre><code>define object &lt;table&gt;<br/>   surface<br/>end define<br/>define object &lt;cup&gt;<br/>   parent &lt;table&gt;<br/>end define</code></pre><br/>That is correct - no?<br/><br/>Also, is there a way to get a list of objects in a container?<br/><br/>list doesn't contain anything as a property.<br/><br/>[Edit]<br/>One additional note - the command is in a library.. Not sure if that'll make a difference to how the commands are evaluated.",
      "PostDate": "2007-03-02T17:32:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12939",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "That problem is a stack overflow, not an infinite loop.\r\n\r\nIt is possible to rewrite the Quest runner so as to fail more gracefully on stack overflow (I'm trying to implement the new Geas in that way), but CAS/ASL is difficult to handle in such a manner.",
      "EditableFormat": "bbcode",
      "HTML": "That problem is a stack overflow, not an infinite loop.<br/><br/>It is possible to rewrite the Quest runner so as to fail more gracefully on stack overflow (I'm trying to implement the new Geas in that way), but CAS/ASL is difficult to handle in such a manner.",
      "PostDate": "2007-03-02T20:13:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12940",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "The stack overflows because of the infinite loop..\r\n\r\nYou're correct in saying that the car blows up because the fuel was flammable - but I am saying that I see a guy throwing a match towards the leaking fuel tank.. If you get the analogy. (you could also argue that several other flames were in the vicinity so any one of them could potentially cause the fuel to ignite the same way..)\r\n\r\nI actually found a way around my little problem using the built-in list commands for the objects..\r\nUsing &quot;list empty&quot; and making the object invisible (which actually helps things for me a little in the situation).. So I guess this thread can become dormant now..",
      "EditableFormat": "bbcode",
      "HTML": "The stack overflows because of the infinite loop..<br/><br/>You're correct in saying that the car blows up because the fuel was flammable - but I am saying that I see a guy throwing a match towards the leaking fuel tank.. If you get the analogy. (you could also argue that several other flames were in the vicinity so any one of them could potentially cause the fuel to ignite the same way..)<br/><br/>I actually found a way around my little problem using the built-in list commands for the objects..<br/>Using &quot;list empty&quot; and making the object invisible (which actually helps things for me a little in the situation).. So I guess this thread can become dormant now..",
      "PostDate": "2007-03-02T21:15:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12941",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "An infinite loop leads to repeating the exact same state.  It won't crash the program.",
      "EditableFormat": "bbcode",
      "HTML": "An infinite loop leads to repeating the exact same state.  It won't crash the program.",
      "PostDate": "2007-03-02T22:37:10+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12943",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "If you want to get technical about it, there's no such thing as an infinite loop. Power failures, the fact that there can NEVER be an exact repetition of all the events which caused that first loop (being it down the the electron level).\r\nThere is always a 'limit' on things which are potentially 'infinite'.. Otherwise we would have proof that infinity exists - and to my knowledge there has been only theory.\r\n\r\nThis 'infinite' loop calls itself, which calls itself, causing the stack to overflow..\r\n\r\nIt's a recursive, continual loop which is self-sustaining.. I don't know what else to call this other than &quot;infinite&quot; where the limit is the amount of stack space.",
      "EditableFormat": "bbcode",
      "HTML": "If you want to get technical about it, there's no such thing as an infinite loop. Power failures, the fact that there can NEVER be an exact repetition of all the events which caused that first loop (being it down the the electron level).<br/>There is always a 'limit' on things which are potentially 'infinite'.. Otherwise we would have proof that infinity exists - and to my knowledge there has been only theory.<br/><br/>This 'infinite' loop calls itself, which calls itself, causing the stack to overflow..<br/><br/>It's a recursive, continual loop which is self-sustaining.. I don't know what else to call this other than &quot;infinite&quot; where the limit is the amount of stack space.",
      "PostDate": "2007-03-03T14:50:49+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12996",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "I've found the original problem is due to a bug with the &quot;normal&quot; parameter to the &quot;exec&quot; command - this is broken in v4.0, and will still process user-defined commands and verbs, hence the &quot;out of stack space&quot; error.\r\n\r\nFor v4.01, I've fixed this problem. I've also made Quest fail gracefully even if you try something like:\r\n\r\ncommand &lt;test&gt; exec &lt;test&gt;",
      "EditableFormat": "bbcode",
      "HTML": "I've found the original problem is due to a bug with the &quot;normal&quot; parameter to the &quot;exec&quot; command - this is broken in v4.0, and will still process user-defined commands and verbs, hence the &quot;out of stack space&quot; error.<br/><br/>For v4.01, I've fixed this problem. I've also made Quest fail gracefully even if you try something like:<br/><br/>command &lt;test&gt; exec &lt;test&gt;",
      "PostDate": "2007-03-07T18:31:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12997",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I think the problem is more due to the fact that Quest requires every verb / command, once matched, to handle the command.",
      "EditableFormat": "bbcode",
      "HTML": "I think the problem is more due to the fact that Quest requires every verb / command, once matched, to handle the command.",
      "PostDate": "2007-03-07T19:41:40+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "12999",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Yes, that is the current design - although it's not every verb/command that matches the input, but the first one.\r\n\r\nI can see how there may be alternative approaches - some kind of flag marking whether a particular command or verb has already been run as part of a turn, for example - but I can't see anything particularly neat or simple that would avoid this problem.\r\n\r\nBesides, I think the comparative simplicity of the command handler is a strength - it takes out a lot of the guesswork involved in questions like &quot;how might Quest interpret this particular input?&quot; and &quot;how can I get this particular command to work?&quot;.\r\n\r\nOf course I'm grateful for any feedback on this if you have any ideas for improvements to the parser.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, that is the current design - although it's not every verb/command that matches the input, but the first one.<br/><br/>I can see how there may be alternative approaches - some kind of flag marking whether a particular command or verb has already been run as part of a turn, for example - but I can't see anything particularly neat or simple that would avoid this problem.<br/><br/>Besides, I think the comparative simplicity of the command handler is a strength - it takes out a lot of the guesswork involved in questions like &quot;how might Quest interpret this particular input?&quot; and &quot;how can I get this particular command to work?&quot;.<br/><br/>Of course I'm grateful for any feedback on this if you have any ideas for improvements to the parser.",
      "PostDate": "2007-03-07T19:55:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13000",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "The TADS 2 method (IIRC):\r\n- The library contains a &quot;Thing&quot; class, which has action routines for all system verbs.\r\n- It also contains a class &quot;Container&quot;, derived from Thing, which has the &quot;open&quot;, &quot;close&quot;, &quot;look in&quot;, etc. routines replaced.  There are similar classes corresponding to supporters, clothing, and so on.\r\n- An action routine can call the corresponding action routine in the parent class.\r\n\r\nSo you could have something like:\r\n\r\nMetalThing is a subclass of Thing.  IronThing is a subclass of MetalThing.\r\n\r\nIn IronThing, doTake() is  \r\n[code:h5bk5mka]\n&#123;\n  if &#40;magnetic_field&#46;is_on&#41;\n    &quot;It's solidly stuck to the floor!&quot;;\n  else\n    inherited&#46;doTake&#40;&#41;;\n&#125;\n[/code:h5bk5mka]\n\nIn MetalThing, doTake() is\n[code:h5bk5mka]\n&#123;\n  if &#40;this&#46;is_hot&#41;\n    &quot;You try to, but it's too hot&#46;&quot;;\n  else\n    inherited&#46;toTake&#40;&#41;;\n&#125;\n[/code:h5bk5mka]\r\n\r\nAnd Thing.doTake() checks the player's capacity, and, if all tests pass, moves the object to the player's inventory and prints appropriate output.\r\n\r\nThe Inform method:\r\n- For each verb, there is a ____Sub routine that does the typical work.\r\n- An object may have one or more &quot;before&quot; routines.\r\n- Whenever the parser tries to run an action, it will call the direct object's before routines in sequence.\r\n-   Each one may return true, to indicate that it has handled the action, or false, to indicate that it has not.\r\n-   The parser will continue to run the before routines until one returns true, or it runs out.  If it runs out, it calls the ____Sub routine.\r\n\r\nThe important thing is that both methods have a way of passing the buck, if they can't immediately process it, and passing in such a way will always bottom out.  Also, none of those commands are special; inherited, rtrue, and rfalse are also ordinary variables / commands.",
      "EditableFormat": "bbcode",
      "HTML": "The TADS 2 method (IIRC):<br/>- The library contains a &quot;Thing&quot; class, which has action routines for all system verbs.<br/>- It also contains a class &quot;Container&quot;, derived from Thing, which has the &quot;open&quot;, &quot;close&quot;, &quot;look in&quot;, etc. routines replaced.  There are similar classes corresponding to supporters, clothing, and so on.<br/>- An action routine can call the corresponding action routine in the parent class.<br/><br/>So you could have something like:<br/><br/>MetalThing is a subclass of Thing.  IronThing is a subclass of MetalThing.<br/><br/>In IronThing, doTake() is  <br/><pre><code><br/>&#123;<br/>  if &#40;magnetic_field&#46;is_on&#41;<br/>    &quot;It's solidly stuck to the floor!&quot;;<br/>  else<br/>    inherited&#46;doTake&#40;&#41;;<br/>&#125;<br/></code></pre><br/><br/>In MetalThing, doTake() is<br/><pre><code><br/>&#123;<br/>  if &#40;this&#46;is_hot&#41;<br/>    &quot;You try to, but it's too hot&#46;&quot;;<br/>  else<br/>    inherited&#46;toTake&#40;&#41;;<br/>&#125;<br/></code></pre><br/><br/>And Thing.doTake() checks the player's capacity, and, if all tests pass, moves the object to the player's inventory and prints appropriate output.<br/><br/>The Inform method:<br/>- For each verb, there is a ____Sub routine that does the typical work.<br/>- An object may have one or more &quot;before&quot; routines.<br/>- Whenever the parser tries to run an action, it will call the direct object's before routines in sequence.<br/>-   Each one may return true, to indicate that it has handled the action, or false, to indicate that it has not.<br/>-   The parser will continue to run the before routines until one returns true, or it runs out.  If it runs out, it calls the ____Sub routine.<br/><br/>The important thing is that both methods have a way of passing the buck, if they can't immediately process it, and passing in such a way will always bottom out.  Also, none of those commands are special; inherited, rtrue, and rfalse are also ordinary variables / commands.",
      "PostDate": "2007-03-07T21:16:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13016",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "[quote=&quot;Alex&quot;:etrjon3h]I've found the original problem is due to a bug with the &quot;normal&quot; parameter to the &quot;exec&quot; command - this is broken in v4.0, and will still process user-defined commands and verbs, hence the &quot;out of stack space&quot; error.\n\nFor v4.01, I've fixed this problem. I've also made Quest fail gracefully even if you try something like:\n\ncommand &lt;test&gt; exec &lt;test&gt;[/quote:etrjon3h]\r\n\r\nHow are you doing this?  Did you switch from the system stack to an explicit stack, or are you comparing an exec'd command against the current command?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Alex wrote:</cite>I've found the original problem is due to a bug with the &quot;normal&quot; parameter to the &quot;exec&quot; command - this is broken in v4.0, and will still process user-defined commands and verbs, hence the &quot;out of stack space&quot; error.<br/><br/>For v4.01, I've fixed this problem. I've also made Quest fail gracefully even if you try something like:<br/><br/>command &lt;test&gt; exec &lt;test&gt;</blockquote><br/><br/>How are you doing this?  Did you switch from the system stack to an explicit stack, or are you comparing an exec'd command against the current command?",
      "PostDate": "2007-03-08T18:12:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13018",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Neither. The stack error still actually occurs, but Quest now handles the error so it doesn't fall over. When the stack error occurs, Quest stops processing the script.\r\n\r\nThis means that the result is a small delay while it is recursively calling functions, but then an error is written to the ASL log and play can resume.",
      "EditableFormat": "bbcode",
      "HTML": "Neither. The stack error still actually occurs, but Quest now handles the error so it doesn't fall over. When the stack error occurs, Quest stops processing the script.<br/><br/>This means that the result is a small delay while it is recursively calling functions, but then an error is written to the ASL log and play can resume.",
      "PostDate": "2007-03-08T18:29:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13025",
      "UserId": 0,
      "Username": "Elexxorine",
      "UserAvatar": null,
      "UserGravatar": "a220ee44d8fe2f07029cf1f61b98bf40",
      "EditableText": "So it now realises it's in an endless loops and exits it?",
      "EditableFormat": "bbcode",
      "HTML": "So it now realises it's in an endless loops and exits it?",
      "PostDate": "2007-03-09T09:17:43+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13028",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Essentially, yes.",
      "EditableFormat": "bbcode",
      "HTML": "Essentially, yes.",
      "PostDate": "2007-03-09T10:38:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "13034",
      "UserId": 0,
      "Username": "Elexxorine",
      "UserAvatar": null,
      "UserGravatar": "a220ee44d8fe2f07029cf1f61b98bf40",
      "EditableText": "Neat.... That'll be a life-saver.",
      "EditableFormat": "bbcode",
      "HTML": "Neat.... That'll be a life-saver.",
      "PostDate": "2007-03-09T19:57:01+00:00",
      "LastEditDate": null
    }
  ]
}
