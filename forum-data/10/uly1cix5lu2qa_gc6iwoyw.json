{
  "Topic": {
    "TopicId": "uly1cix5lu2qa_gc6iwoyw",
    "ForumId": "10",
    "Title": "Identify Objects by Common Attribute",
    "LastUpdated": "2019-08-07T21:04:51.8521712Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "cdffec45-7a0d-4e4e-93e3-ac4d464d80c5",
      "UserId": 361137,
      "Username": "MattFinucane",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6ad7e460f58b3d70943597a77da9378b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi! \r\n\r\nI'd like to have the player searched at one point in my game, and if *any* objects in the player's inventory have the attribute \"forbidden\" for there to be consequences. \r\n\r\nIdeally in this instance, I'd like to then be able to list all the objects in the player's inventory that meet this condition, a kind of \"this is where you fucked up\", but that's less important. \r\n\r\nAny help in achieving this would be much appreciated! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi!</p>\n<p>I'd like to have the player searched at one point in my game, and if <em>any</em> objects in the player's inventory have the attribute \"forbidden\" for there to be consequences.</p>\n<p>Ideally in this instance, I'd like to then be able to list all the objects in the player's inventory that meet this condition, a kind of \"this is where you fucked up\", but that's less important.</p>\n<p>Any help in achieving this would be much appreciated!</p>\n\n",
      "PostDate": "2019-08-07T21:04:51.8521712Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c95493f7-0c73-4a85-92b0-5a0e79183435",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If the attribute is a boolean one, then you'd want something like:\r\n```\r\nforbiddenobjects = FilterByAttribute (ScopeInventory(), \"forbidden\", true)\r\n```\r\n\r\nIf the 'forbidden' attribute has different values, but you want to find all objects that have that attribute, then you'd do:\r\n```\r\nforbiddenobjects = FilterByNotAttribute (ScopeInventory(), \"forbidden\", null)\r\n```\r\n(an attribute that doesn't exist is the same as an attribute whose value is `null`, so you search for the ones whose value is not null)\r\n\r\nYour logic probably ends up looking like:\r\n```\r\nforbiddenobjects = FilterByNotAttribute (ScopeInventory(), \"forbidden\", null)\r\nif (ListCount (forbiddenobjects) = 0) {\r\n  msg (\"Okay, you can pass.\")\r\n}\r\nelse {\r\n  msg (\"You aren't allowed to come in here carrying \"+FormatList (forbiddenobjects, \",\", \", and\", \"\")+\"!\")\r\n  // insert consequences here\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>If the attribute is a boolean one, then you'd want something like:</p>\n<pre><code>forbiddenobjects = FilterByAttribute (ScopeInventory(), \"forbidden\", true)\n</code></pre>\n<p>If the 'forbidden' attribute has different values, but you want to find all objects that have that attribute, then you'd do:</p>\n<pre><code>forbiddenobjects = FilterByNotAttribute (ScopeInventory(), \"forbidden\", null)\n</code></pre>\n<p>(an attribute that doesn't exist is the same as an attribute whose value is <code>null</code>, so you search for the ones whose value is not null)</p>\n<p>Your logic probably ends up looking like:</p>\n<pre><code>forbiddenobjects = FilterByNotAttribute (ScopeInventory(), \"forbidden\", null)\nif (ListCount (forbiddenobjects) = 0) {\n  msg (\"Okay, you can pass.\")\n}\nelse {\n  msg (\"You aren't allowed to come in here carrying \"+FormatList (forbiddenobjects, \",\", \", and\", \"\")+\"!\")\n  // insert consequences here\n}\n</code></pre>\n\n",
      "PostDate": "2019-08-07T23:23:45.0230345Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a27f31aa-c4d1-4528-a09c-5fdd3cb8fd7e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can also do this (but the newer 'FilterByAttribute' and 'FilterByNotAttribute' helper Functions do it for you):\r\n\r\n```\r\ngame.count = 0\r\n\r\nforeach (object_variable, ScopeInventory()) {\r\n  if (HasAttribute (object_variable, \"forbidden\")) {\r\n    game.count = game.count + 1\r\n  }\r\n}\r\n\r\nif (game.count = 0) {\r\n  // WHATEVER\r\n} else {\r\n  // WHATEVER\r\n}\r\n```\r\n\r\nor\r\n\r\n```\r\ngame.count = 0\r\n\r\nforeach (object_variable, ScopeInventory()) {\r\n  if (GetAttribute (object_variable, \"forbidden\") = WHATEVER_VALUE) {\r\n    game.count = game.count + 1\r\n  }\r\n}\r\n\r\nif (game.count = 0) {\r\n  // WHATEVER\r\n} else {\r\n  // WHATEVER\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>you can also do this (but the newer 'FilterByAttribute' and 'FilterByNotAttribute' helper Functions do it for you):</p>\n<pre><code>game.count = 0\n\nforeach (object_variable, ScopeInventory()) {\n  if (HasAttribute (object_variable, \"forbidden\")) {\n    game.count = game.count + 1\n  }\n}\n\nif (game.count = 0) {\n  // WHATEVER\n} else {\n  // WHATEVER\n}\n</code></pre>\n<p>or</p>\n<pre><code>game.count = 0\n\nforeach (object_variable, ScopeInventory()) {\n  if (GetAttribute (object_variable, \"forbidden\") = WHATEVER_VALUE) {\n    game.count = game.count + 1\n  }\n}\n\nif (game.count = 0) {\n  // WHATEVER\n} else {\n  // WHATEVER\n}\n</code></pre>\n\n",
      "PostDate": "2019-08-08T07:33:08.0905633Z",
      "LastEditDate": "2019-08-08T07:33:31.5487939Z",
      "link": null
    },
    {
      "PostId": "f38b40f1-8a49-4049-a982-a27964360afa",
      "UserId": 361137,
      "Username": "MattFinucane",
      "AvatarUrl": "https://i.imgur.com/fMGef9Eb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks both for the quick responses - I don't generally use the code editor view except to check things, but will give this a shot (doesn't look *too* complicated). \r\n\r\nA quick follow-up question - I'd like to improve on the in-built 'if object contains' such that if an object the player contains (i.e. a backpack) contains the requisite item, the function would still work. Basically how can I make that IF go down multiple levels without resorting to an if statement for every conceivable sub-container? \r\n\r\nThanks again! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks both for the quick responses - I don't generally use the code editor view except to check things, but will give this a shot (doesn't look <em>too</em> complicated).</p>\n<p>A quick follow-up question - I'd like to improve on the in-built 'if object contains' such that if an object the player contains (i.e. a backpack) contains the requisite item, the function would still work. Basically how can I make that IF go down multiple levels without resorting to an if statement for every conceivable sub-container?</p>\n<p>Thanks again!</p>\n\n",
      "PostDate": "2019-08-08T08:22:15.5999776Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "718b7c8c-7717-482f-8ad2-3ddc3156e919",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'd like to improve on the in-built 'if object contains' such that if an object the player contains (i.e. a backpack) contains the requisite item, the function would still work.\r\n\r\nThere are a few different ways to check if the player contains an object. The expression in the if statement could be any of the following (I'm testing if the player object `game.pov` contains an object called `gem` as an example, but the same will work for any objects)\r\n* `gem.parent = game.pov` - tests if the gem is directly held by a player, not in a container\r\n* `ContainsReachable (game.pov, gem)` - also finds the gem if it is in an open container the player is holding\r\n* `ContainsVisible (game.pov, gem)` - as above, but also finds objects inside transparent containers that the player can see but can't use.\r\n* `Contains (game.pov, gem)` - Finds all objects inside the player, including invisible objects and those inside containers, regardless of whether the player can see or reach them. This is the code that is generated by \"if object contains\" in the GUI editor.\r\n\r\nIt's worth noting that `ContainsVisible` and `ContainsReachable` are both false if the gem is invisible; the other two don't care, they only test the location of the gem.\r\n\r\nIf you want to get a list of objects in a particular function, you've got a similar set of functions (these each return a list of objects):\r\n\r\n* `GetDirectChildren (game.pov)` - returns all objects directly inside a container, not in subcontainers. In this case, it finds objects the player is carrying. This will include invisible items.\r\n* `ScopeReachableInventory ()` - returns all inventory objects the player can use from their inventory; this is all objects inside the player that aren't invisible, in an invisible container, or inside a closed container\r\n* `ScopeInventory()` - as above, but objects in a closed container will be included if the container is transparent.\r\n* `GetAllChildObjects (game.pov)` - gets a list of all objects inside the player. This only checks the location, and doesn't care if an object is invisible or inside a container.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'd like to improve on the in-built 'if object contains' such that if an object the player contains (i.e. a backpack) contains the requisite item, the function would still work.</p>\n</blockquote>\n<p>There are a few different ways to check if the player contains an object. The expression in the if statement could be any of the following (I'm testing if the player object <code>game.pov</code> contains an object called <code>gem</code> as an example, but the same will work for any objects)</p>\n<ul>\n<li><code>gem.parent = game.pov</code> - tests if the gem is directly held by a player, not in a container</li>\n<li><code>ContainsReachable (game.pov, gem)</code> - also finds the gem if it is in an open container the player is holding</li>\n<li><code>ContainsVisible (game.pov, gem)</code> - as above, but also finds objects inside transparent containers that the player can see but can't use.</li>\n<li><code>Contains (game.pov, gem)</code> - Finds all objects inside the player, including invisible objects and those inside containers, regardless of whether the player can see or reach them. This is the code that is generated by \"if object contains\" in the GUI editor.</li>\n</ul>\n<p>It's worth noting that <code>ContainsVisible</code> and <code>ContainsReachable</code> are both false if the gem is invisible; the other two don't care, they only test the location of the gem.</p>\n<p>If you want to get a list of objects in a particular function, you've got a similar set of functions (these each return a list of objects):</p>\n<ul>\n<li><code>GetDirectChildren (game.pov)</code> - returns all objects directly inside a container, not in subcontainers. In this case, it finds objects the player is carrying. This will include invisible items.</li>\n<li><code>ScopeReachableInventory ()</code> - returns all inventory objects the player can use from their inventory; this is all objects inside the player that aren't invisible, in an invisible container, or inside a closed container</li>\n<li><code>ScopeInventory()</code> - as above, but objects in a closed container will be included if the container is transparent.</li>\n<li><code>GetAllChildObjects (game.pov)</code> - gets a list of all objects inside the player. This only checks the location, and doesn't care if an object is invisible or inside a container.</li>\n</ul>\n\n",
      "PostDate": "2019-08-08T10:04:23.2681249Z",
      "LastEditDate": "2019-08-08T10:12:54.4846981Z",
      "link": null
    },
    {
      "PostId": "c8dd6f1e-cb0e-4120-8f24-8c06361063e0",
      "UserId": 361137,
      "Username": "MattFinucane",
      "AvatarUrl": "https://i.imgur.com/fMGef9Eb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very helpful, thanks again - will try these both out this evening and report back! ",
      "EditableFormat": "markdown",
      "HTML": "<p>Very helpful, thanks again - will try these both out this evening and report back!</p>\n\n",
      "PostDate": "2019-08-08T13:12:31.2196803Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2dd083a4-622b-4c30-acf1-fbbf63ec0da2",
      "UserId": 361137,
      "Username": "MattFinucane",
      "AvatarUrl": "https://i.imgur.com/fMGef9Eb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks both! Everything you provided worked, especially when I tweaked the first code with GetAllChildObjects, so the sentries would search the player's bags as well. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks both! Everything you provided worked, especially when I tweaked the first code with GetAllChildObjects, so the sentries would search the player's bags as well.</p>\n\n",
      "PostDate": "2019-08-08T22:10:01.1937373Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
