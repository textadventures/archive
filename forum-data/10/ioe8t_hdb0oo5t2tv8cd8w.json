{
  "Topic": {
    "TopicId": "ioe8t_hdb0oo5t2tv8cd8w",
    "ForumId": "10",
    "Title": "Newbie question - how to set maximum/minimum number for status attribute?",
    "LastUpdated": "2019-07-07T13:13:56.1388691Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b989f5dd-8348-4786-9559-e2b530abdb74",
      "UserId": 427470,
      "Username": "Boucherus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/fb6a706bc70592781ebc09c622e03210?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, I'm very new to Quest (and to scripting in general). In my game I'm trying to add status attributes for characteristics such as intelligence, kindness etc that affect dialogue and actions, where 100 would be very intelligent and 0 would be really stupid, or 100 would be altruistic and 0 would be cruel/sadistic. \r\n\r\nThe problem is I'm not sure on how to cap these attributes at 100 and have a minimum of 0 to prevent it going into negatives. \r\n\r\nCan anyone teach me how to do this? I'm not even sure where to begin - I assume in the game object's scripts section?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, I'm very new to Quest (and to scripting in general). In my game I'm trying to add status attributes for characteristics such as intelligence, kindness etc that affect dialogue and actions, where 100 would be very intelligent and 0 would be really stupid, or 100 would be altruistic and 0 would be cruel/sadistic.</p>\n<p>The problem is I'm not sure on how to cap these attributes at 100 and have a minimum of 0 to prevent it going into negatives.</p>\n<p>Can anyone teach me how to do this? I'm not even sure where to begin - I assume in the game object's scripts section?</p>\n\n",
      "PostDate": "2019-07-07T13:13:56.1388691Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fa27e03e-0575-4b4c-9952-ab648f67adc5",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's a lot of different ways to do this.\r\n\r\nWhat I would do is use Changescripts.\r\n\r\nBasically, let's say you have the object FriendlyWizard. And he has attribute Intellect, which will range from 0-100.\r\n\r\nWhen you create that attribute, select it and click the tiny button with a 'plus' sign to create a Changescript.\r\n\r\nA changescript is basically just \"Whenever this object's attribute changes, do this.\"\r\n\r\nUnder the changescript you put code dictating how high and how low it can go, something like this:\r\n```\r\nif (FriendlyWizard.Intellect>100){\r\nFriendlyWizard.Intellect=100\r\n}\r\nelse if (FriendlyWizard.Intellect<0){\r\nFriendlyWizard.Intellect=0\r\n}\r\n```\r\nAnd this handles it!\r\n\r\nIf you want to change the mins and maxes - like, say, the Wizard drinks a super magic potion and now they can go up to 200 - you instead have additional attributes for those: FriendlyWizard.MaxInt and FriendlyWizard.MinInt, in place of the 100 and 0.\r\n\r\nHope this helps!",
      "EditableFormat": "markdown",
      "HTML": "<p>There's a lot of different ways to do this.</p>\n<p>What I would do is use Changescripts.</p>\n<p>Basically, let's say you have the object FriendlyWizard. And he has attribute Intellect, which will range from 0-100.</p>\n<p>When you create that attribute, select it and click the tiny button with a 'plus' sign to create a Changescript.</p>\n<p>A changescript is basically just \"Whenever this object's attribute changes, do this.\"</p>\n<p>Under the changescript you put code dictating how high and how low it can go, something like this:</p>\n<pre><code>if (FriendlyWizard.Intellect&gt;100){\nFriendlyWizard.Intellect=100\n}\nelse if (FriendlyWizard.Intellect&lt;0){\nFriendlyWizard.Intellect=0\n}\n</code></pre>\n<p>And this handles it!</p>\n<p>If you want to change the mins and maxes - like, say, the Wizard drinks a super magic potion and now they can go up to 200 - you instead have additional attributes for those: FriendlyWizard.MaxInt and FriendlyWizard.MinInt, in place of the 100 and 0.</p>\n<p>Hope this helps!</p>\n\n",
      "PostDate": "2019-07-07T14:29:35.4843136Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2cb566fb-ccf4-415a-93fc-6caa79314e7e",
      "UserId": 427470,
      "Username": "Boucherus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/fb6a706bc70592781ebc09c622e03210?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very helpful, thank you! Follow up question regarding it, so I put in: \r\n```if (player.Intelligence>100) {\r\n  player.Intelligence = 100\r\n}\r\nelse if (player.Intelligence<0) {\r\n  player.Intelligence = 0\r\n}\r\n```\r\nBut my issue is when the game starts, it requests the player to input their starting intelligence and other attributes, but the player can type literally anything in (for example, if I type the word \"tiger\", then the status attribute will say Intelligence: tiger)\r\n\r\nHow can I limit it so that the player can only type in a number between 0 and 100?\r\n\r\nThank you for your help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Very helpful, thank you! Follow up question regarding it, so I put in:</p>\n<pre><code>  player.Intelligence = 100\n}\nelse if (player.Intelligence&lt;0) {\n  player.Intelligence = 0\n}\n</code></pre>\n<p>But my issue is when the game starts, it requests the player to input their starting intelligence and other attributes, but the player can type literally anything in (for example, if I type the word \"tiger\", then the status attribute will say Intelligence: tiger)</p>\n<p>How can I limit it so that the player can only type in a number between 0 and 100?</p>\n<p>Thank you for your help!</p>\n\n",
      "PostDate": "2019-07-07T14:48:09.796602Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff34a070-7da5-4729-81a2-56a5416b23d6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You need to check the result the player typed.\r\n\r\nThe function `IsInt` will test if a string can be turned into a number; and the function `ToInt` will turn the string `100` into the number `100`.\r\n\r\nSo you'd create a _function_ (maybe call it something like `SetIntelligence`) that asks the question, and instead of just assigning the response to an attribute, you'd do something like:\r\n```\r\n  if (not IsInt (result)) {\r\n    msg (\"Please enter a number.\")\r\n    // call the function to ask the question again\r\n    SetIntelligence()\r\n  }\r\n  else {\r\n    intresult = ToInt (result)\r\n    if (intresult < 0 or intresult > 100) {\r\n      msg (\"Intelligence must be between 0 and 100\r\n      // call the function to ask again\r\n      SetIntelligence()\r\n    }\r\n    else {\r\n      player.intelligence = intresult\r\n    }\r\n  }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You need to check the result the player typed.</p>\n<p>The function <code>IsInt</code> will test if a string can be turned into a number; and the function <code>ToInt</code> will turn the string <code>100</code> into the number <code>100</code>.</p>\n<p>So you'd create a <em>function</em> (maybe call it something like <code>SetIntelligence</code>) that asks the question, and instead of just assigning the response to an attribute, you'd do something like:</p>\n<pre><code>  if (not IsInt (result)) {\n    msg (\"Please enter a number.\")\n    // call the function to ask the question again\n    SetIntelligence()\n  }\n  else {\n    intresult = ToInt (result)\n    if (intresult &lt; 0 or intresult &gt; 100) {\n      msg (\"Intelligence must be between 0 and 100\n      // call the function to ask again\n      SetIntelligence()\n    }\n    else {\n      player.intelligence = intresult\n    }\n  }\n</code></pre>\n\n",
      "PostDate": "2019-07-07T23:42:02.1279266Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "848dd1a4-766c-4dd9-9f36-f13866fe871b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-------------------\r\n\r\nyour typed-in input for the 'get input' Script/Function is always taken as a String Value, however, you can then check it, and/or convert it to other Data Types\r\n\r\nhttps://docs.textadventures.co.uk/quest/elements/\r\n\r\nhttps://docs.textadventures.co.uk/quest/types/ (Data Types)\r\n\r\nhttps://docs.textadventures.co.uk/quest/scripts/\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/ (categorical order)\r\nhttps://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphabetical order)\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/string/isnumeric.html (checks if string value can be converted to an integer or to a double, basically it is just doing both 'IsInt' and 'IsDouble' Scripts/Functions)\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/isint.html (checks if string value can be converted to an integer)\r\nhttps://docs.textadventures.co.uk/quest/functions/isdouble.html (checks if string value can be converted to a double)\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/toint.html (converts a string to an integer)\r\nhttps://docs.textadventures.co.uk/quest/functions/todouble.html (converts a string to a double)\r\n\r\n```\r\n<game name=\"EXAMPLE\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      msg (\"Strength? (0 to 100)\")\r\n\r\n      get input {\r\n\r\n        // quest automatically (hidden from you), STORES your String Value input into the built-in 'result' Variable, and because it's a String Value, quest causes (its able to parse the value for you, quest is programmed very powerfully/usefully with parsing) the 'result' Variable to be a String Variable:\r\n\r\n        // result = YOUR_TYPED_IN_INPUT_AS_A_STRING_VALUE\r\n\r\n        // the 'IsInt' Script/Function checks if the input value can be converted into Integer Value (aka, if the input is: ..., -999, -1, 0, 1, 999, ...):\r\n\r\n        if (IsInt (result)) {\r\n\r\n          // the 'ToInt' Script/Function actually converts your string value input into an integer value, and then we're storing it into an Integer Variable (my custom 'input_integer_variable' as seen below):\r\n\r\n          input_integer_variable = ToInt (result)\r\n\r\n          // we then check if its in-bounds (0 to 100) or not:\r\n\r\n          if (input_integer_variable >= 0 and input_integer_variable <= 100) {\r\n\r\n            player.strength_integer_attribute = input_integer_variable\r\n\r\n          } else {\r\n\r\n            msg (\"Error: wrong input: type in a number from 0 to 100\")\r\n\r\n            invoke (game.start) // loops (calls this entire scripting: does it again)\r\n\r\n          }\r\n\r\n        } else {\r\n\r\n          msg (\"Error: wrong input: type in an integer number\")\r\n\r\n          invoke (game.start) // loops (calls this entire scripting: does it again)\r\n\r\n        }\r\n\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n</game>\r\n```\r\n\r\n----------\r\n\r\nto do this in the GUI/Editor:\r\n\r\n```\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] IsInt (result)\r\n\r\n-> then -> add new script\r\n\r\nelse\r\n\r\n-> add new script\r\n\r\n----------\r\n\r\nadd new script -> 'scripts' section/category -> 'if' Script -> (see below)\r\n\r\nif [EXPRESSION] input_integer_variable >= 0 and input_integer_variable <= 100\r\n\r\n-> then -> add new script\r\n\r\nelse\r\n\r\n-> add new script\r\n\r\n--------------\r\n\r\nadd new script -> 'variables' section/category -> 'set a variable or attribute' Script (see below)\r\n\r\nset variable input_integer_variable = [EXPRESSION] ToInt (result)\r\n\r\n------------\r\n\r\nadd new script -> 'variables' section/category -> 'set a variable or attribute' Script (see below)\r\n\r\nset variable player.strength_integer_attribute = [EXPRESSION] input_integer_variable\r\n```\r\n\r\n--------------\r\n\r\nP.S.\r\n\r\nhere's the built-in randomization Scripts/Functions:\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/getrandomint.html\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/getrandomdouble.html\r\n\r\nhttps://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html\r\n\r\nexamples:\r\n\r\n```\r\nplayer.strength_integer_attribute = DiceRoll (\"1d6\")\r\n\r\n// you're rolling a normal (6-sided) single die: 1 dice with 6 sides\r\n\r\n// so, in this case/example, your strength will only be randomly: 1 to 6\r\n\r\n-----------------\r\n\r\nplayer.strength_integer_attribute = GetRandomInt (0,100)\r\n\r\n---------------\r\n\r\ncreate (\"katana\")\r\n\r\nkatana.damage_double_attribute = 50.0\r\n\r\nplayer.weapon = katana\r\n\r\nplayer.damage_double_attribute = player.weapon.damage_double_attribute + player.weapon.damage_double_attribute * GetRandomDouble ()\r\n\r\n// player.damage_double_attribute = [50.0] + [ (50.0) * (0.0 to 1.0, EXCLUSIVE, I think, meh) ]\r\n\r\n// so, let's say that the 'GetRandomDouble' returns/gets/selects: 0.5\r\n\r\n// player.damage_double_attribute = [50.0] + [ (50.0) * (0.5) ]\r\n// player.damage_double_attribute = [50.0] + [25.0]\r\n// player.damage_double_attribute = 75.0\r\n\r\n----------------\r\n\r\nboolean_variable = RandomChance (75)\r\n\r\n// true: 75%\r\n// false: 25%\r\n\r\nif (boolean_variable) {\r\n\r\n  // true: 75%\r\n\r\n  msg (\"The death spell cast against you, was successful\")\r\n\r\n  msg (\"You were killed by the death spell\")\r\n\r\n  msg (\"GAME OVER\")\r\n\r\n  finish\r\n\r\n} else {\r\n\r\n  // false: 25%\r\n\r\n  msg (\"The death spell cast against you, failed\")\r\n\r\n  msg (\"You survived the death spell, you're still alive\")\r\n\r\n]\r\n\r\n-----------\r\n\r\nexample of how Negation ('NOT') works:\r\n\r\nboolean_variable = RandomChance (75)\r\n\r\n// true: 75%\r\n// false: 25%\r\n\r\nif (not boolean_variable) {\r\n\r\n  // false: 25%\r\n\r\n  msg (\"The death spell cast against you, failed\")\r\n\r\n  msg (\"You survived the death spell, you're still alive\")\r\n\r\n} else {\r\n\r\n  // true: 75%\r\n\r\n  msg (\"The death spell cast against you, was successful\")\r\n\r\n  msg (\"You were killed by the death spell\")\r\n\r\n  msg (\"GAME OVER\")\r\n\r\n  finish\r\n\r\n]\r\n\r\n------------------\r\n\r\nexample 2 of how Negation ('NOT') works:\r\n\r\n(I hope I got this, the logic, right, lol)\r\n\r\nboolean_variable = not RandomChance (75)\r\n\r\n// true: 25% // (75% true -> NOT -> 75% false -> 25% true)\r\n// false: 75% // (25% false -> NOT -> 25% true -> 75% false)\r\n\r\nif (boolean_variable) {\r\n\r\n  // true: 25%\r\n\r\n  msg (\"The death spell cast against you, was successful\")\r\n\r\n  msg (\"You were killed by the death spell\")\r\n\r\n  msg (\"GAME OVER\")\r\n\r\n  finish\r\n\r\n} else {\r\n\r\n  // false: 75%\r\n\r\n  msg (\"The death spell cast against you, failed\")\r\n\r\n  msg (\"You survived the death spell, you're still alive\")\r\n\r\n]\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>your typed-in input for the 'get input' Script/Function is always taken as a String Value, however, you can then check it, and/or convert it to other Data Types</p>\n<p>https://docs.textadventures.co.uk/quest/elements/</p>\n<p>https://docs.textadventures.co.uk/quest/types/ (Data Types)</p>\n<p>https://docs.textadventures.co.uk/quest/scripts/</p>\n<p>https://docs.textadventures.co.uk/quest/functions/ (categorical order)<br>\nhttps://docs.textadventures.co.uk/quest/functions/index_allfunctions.html (alphabetical order)</p>\n<p>https://docs.textadventures.co.uk/quest/functions/string/isnumeric.html (checks if string value can be converted to an integer or to a double, basically it is just doing both 'IsInt' and 'IsDouble' Scripts/Functions)</p>\n<p>https://docs.textadventures.co.uk/quest/functions/isint.html (checks if string value can be converted to an integer)<br>\nhttps://docs.textadventures.co.uk/quest/functions/isdouble.html (checks if string value can be converted to a double)</p>\n<p>https://docs.textadventures.co.uk/quest/functions/toint.html (converts a string to an integer)<br>\nhttps://docs.textadventures.co.uk/quest/functions/todouble.html (converts a string to a double)</p>\n<pre><code>&lt;game name=\"EXAMPLE\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      msg (\"Strength? (0 to 100)\")\n\n      get input {\n\n        // quest automatically (hidden from you), STORES your String Value input into the built-in 'result' Variable, and because it's a String Value, quest causes (its able to parse the value for you, quest is programmed very powerfully/usefully with parsing) the 'result' Variable to be a String Variable:\n\n        // result = YOUR_TYPED_IN_INPUT_AS_A_STRING_VALUE\n\n        // the 'IsInt' Script/Function checks if the input value can be converted into Integer Value (aka, if the input is: ..., -999, -1, 0, 1, 999, ...):\n\n        if (IsInt (result)) {\n\n          // the 'ToInt' Script/Function actually converts your string value input into an integer value, and then we're storing it into an Integer Variable (my custom 'input_integer_variable' as seen below):\n\n          input_integer_variable = ToInt (result)\n\n          // we then check if its in-bounds (0 to 100) or not:\n\n          if (input_integer_variable &gt;= 0 and input_integer_variable &lt;= 100) {\n\n            player.strength_integer_attribute = input_integer_variable\n\n          } else {\n\n            msg (\"Error: wrong input: type in a number from 0 to 100\")\n\n            invoke (game.start) // loops (calls this entire scripting: does it again)\n\n          }\n\n        } else {\n\n          msg (\"Error: wrong input: type in an integer number\")\n\n          invoke (game.start) // loops (calls this entire scripting: does it again)\n\n        }\n\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n</code></pre>\n<hr>\n<p>to do this in the GUI/Editor:</p>\n<pre><code>add new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] IsInt (result)\n\n-&gt; then -&gt; add new script\n\nelse\n\n-&gt; add new script\n\n----------\n\nadd new script -&gt; 'scripts' section/category -&gt; 'if' Script -&gt; (see below)\n\nif [EXPRESSION] input_integer_variable &gt;= 0 and input_integer_variable &lt;= 100\n\n-&gt; then -&gt; add new script\n\nelse\n\n-&gt; add new script\n\n--------------\n\nadd new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script (see below)\n\nset variable input_integer_variable = [EXPRESSION] ToInt (result)\n\n------------\n\nadd new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script (see below)\n\nset variable player.strength_integer_attribute = [EXPRESSION] input_integer_variable\n</code></pre>\n<hr>\n<p>P.S.</p>\n<p>here's the built-in randomization Scripts/Functions:</p>\n<p>https://docs.textadventures.co.uk/quest/functions/corelibrary/diceroll.html</p>\n<p>https://docs.textadventures.co.uk/quest/functions/getrandomint.html</p>\n<p>https://docs.textadventures.co.uk/quest/functions/getrandomdouble.html</p>\n<p>https://docs.textadventures.co.uk/quest/functions/corelibrary/randomchance.html</p>\n<p>examples:</p>\n<pre><code>player.strength_integer_attribute = DiceRoll (\"1d6\")\n\n// you're rolling a normal (6-sided) single die: 1 dice with 6 sides\n\n// so, in this case/example, your strength will only be randomly: 1 to 6\n\n-----------------\n\nplayer.strength_integer_attribute = GetRandomInt (0,100)\n\n---------------\n\ncreate (\"katana\")\n\nkatana.damage_double_attribute = 50.0\n\nplayer.weapon = katana\n\nplayer.damage_double_attribute = player.weapon.damage_double_attribute + player.weapon.damage_double_attribute * GetRandomDouble ()\n\n// player.damage_double_attribute = [50.0] + [ (50.0) * (0.0 to 1.0, EXCLUSIVE, I think, meh) ]\n\n// so, let's say that the 'GetRandomDouble' returns/gets/selects: 0.5\n\n// player.damage_double_attribute = [50.0] + [ (50.0) * (0.5) ]\n// player.damage_double_attribute = [50.0] + [25.0]\n// player.damage_double_attribute = 75.0\n\n----------------\n\nboolean_variable = RandomChance (75)\n\n// true: 75%\n// false: 25%\n\nif (boolean_variable) {\n\n  // true: 75%\n\n  msg (\"The death spell cast against you, was successful\")\n\n  msg (\"You were killed by the death spell\")\n\n  msg (\"GAME OVER\")\n\n  finish\n\n} else {\n\n  // false: 25%\n\n  msg (\"The death spell cast against you, failed\")\n\n  msg (\"You survived the death spell, you're still alive\")\n\n]\n\n-----------\n\nexample of how Negation ('NOT') works:\n\nboolean_variable = RandomChance (75)\n\n// true: 75%\n// false: 25%\n\nif (not boolean_variable) {\n\n  // false: 25%\n\n  msg (\"The death spell cast against you, failed\")\n\n  msg (\"You survived the death spell, you're still alive\")\n\n} else {\n\n  // true: 75%\n\n  msg (\"The death spell cast against you, was successful\")\n\n  msg (\"You were killed by the death spell\")\n\n  msg (\"GAME OVER\")\n\n  finish\n\n]\n\n------------------\n\nexample 2 of how Negation ('NOT') works:\n\n(I hope I got this, the logic, right, lol)\n\nboolean_variable = not RandomChance (75)\n\n// true: 25% // (75% true -&gt; NOT -&gt; 75% false -&gt; 25% true)\n// false: 75% // (25% false -&gt; NOT -&gt; 25% true -&gt; 75% false)\n\nif (boolean_variable) {\n\n  // true: 25%\n\n  msg (\"The death spell cast against you, was successful\")\n\n  msg (\"You were killed by the death spell\")\n\n  msg (\"GAME OVER\")\n\n  finish\n\n} else {\n\n  // false: 75%\n\n  msg (\"The death spell cast against you, failed\")\n\n  msg (\"You survived the death spell, you're still alive\")\n\n]\n</code></pre>\n\n",
      "PostDate": "2019-07-08T00:08:55.320104Z",
      "LastEditDate": "2019-07-08T01:02:14.7184492Z",
      "link": null
    }
  ]
}
