{
  "Topic": {
    "TopicId": "596",
    "ForumId": "10",
    "Title": "Library Creation",
    "LastUpdated": "2004-12-21T22:29:40+00:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "4560",
      "UserId": 0,
      "Username": "Shadowalker",
      "UserAvatar": null,
      "UserGravatar": "766dd24e40206a88104a4c2211d8483b",
      "EditableText": "Hi. I was just wondering how I create my own library. Let's say, for example, as someone mentioned in a previous thread, I wanted a property, &quot;Dark Room.&quot; How do I create that as a &quot;Library Property,&quot; among other things? Basically, just how do I create a library. Thanks",
      "EditableFormat": "bbcode",
      "HTML": "Hi. I was just wondering how I create my own library. Let's say, for example, as someone mentioned in a previous thread, I wanted a property, &quot;Dark Room.&quot; How do I create that as a &quot;Library Property,&quot; among other things? Basically, just how do I create a library. Thanks",
      "PostDate": "2004-12-17T11:41:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4561",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ebayfan414 wrote:\n\n[quote:36lqgwzq]I was just wondering how I create my own library.[/quote:36lqgwzq]\n\nThe basic instructions for how to create a library are included in the Quest help documentation, both online and supplied as part of the download.\n\nHowever, making libraries does involve writing ASL ([b:36lqgwzq]A[/b:36lqgwzq]dventure [b:36lqgwzq]S[/b:36lqgwzq]cripting [b:36lqgwzq]L[/b:36lqgwzq]anguage) code yourself, (you can't do it from QDK) which means that to write libraries you need to know how to program to some extent.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "ebayfan414 wrote:<br/><br/><blockquote><p>I was just wondering how I create my own library.</p></blockquote><br/><br/>The basic instructions for how to create a library are included in the Quest help documentation, both online and supplied as part of the download.<br/><br/>However, making libraries does involve writing ASL (<span style=\"font-weight:bold;\">A</span>dventure <span style=\"font-weight:bold;\">S</span>cripting <span style=\"font-weight:bold;\">L</span>anguage) code yourself, (you can't do it from QDK) which means that to write libraries you need to know how to program to some extent.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-12-17T12:56:16+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4567",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I don't really know asl, but I want to create my own library. So, if I want to create a command for the library, what I'm doing is creating it in qdk, then opening it up in wordpad, so I can see how it's written in asl. I don't know if you understand what I mean, but it's working for me. Anyway, I just wanted to know how I can bypass a command. For example, let's say i'm creating an object type of \"moveable.\" So you will be able to check it off if you want to be able to take it or not. I know there is already a tab for that in qdk, but I'm just using that as an example, if I were to create another tab for beaing able to \"take\" an object, what is the code I use to bypass the original \"take\" command? Also, I added \"moveable\" as a type. Then I created a ball. I gave ball \"moveable\" type, and said that IF player TAKES object, IF OBJECT is of MOVEABLE type, then give. else....etc. It didn't work. Is that because I didn't override the built-in programming? Sorry if all this is a little unclear....thanks---ebayfan414",
      "EditableFormat": "bbcode",
      "HTML": "Well, I don't really know asl, but I want to create my own library. So, if I want to create a command for the library, what I'm doing is creating it in qdk, then opening it up in wordpad, so I can see how it's written in asl. I don't know if you understand what I mean, but it's working for me. Anyway, I just wanted to know how I can bypass a command. For example, let's say i'm creating an object type of \"moveable.\" So you will be able to check it off if you want to be able to take it or not. I know there is already a tab for that in qdk, but I'm just using that as an example, if I were to create another tab for beaing able to \"take\" an object, what is the code I use to bypass the original \"take\" command? Also, I added \"moveable\" as a type. Then I created a ball. I gave ball \"moveable\" type, and said that IF player TAKES object, IF OBJECT is of MOVEABLE type, then give. else....etc. It didn't work. Is that because I didn't override the built-in programming? Sorry if all this is a little unclear....thanks---ebayfan414",
      "PostDate": "2004-12-19T09:32:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4575",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi\n\nI'm a bit puzzled as to what exactly you are asking for help with here  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_e_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? --> \n\nFirstly, a library is a completely separate file that you add to your game either from QDK or manually with the 'Include &lt;name of lib here&gt;.\n\nAdding user commands is a completely different and unrelated question.  You can make your own commands in a library or in Quest, it has nothing to do with libraries as such.\n\nYour question about overriding the inbuilt 'take' doesn't actually make any sense to me, you can write your own take scripts on an object by object (or type by type) basis anyway so there isn't usually any point in messing with the inbuilt take.\n\nWhat I'm saying (if it makes sense to you) is that rather than override the global take command for all objects and then have to make a test for being of a specific type every time, why not just override the 'take' for the objects of the specific type in the first place - you don't need the tests at all this way, so it is much neater (and you don't have to re-create normal take handling).  \n\nHere's an example - save the code below as 'test.asl' and run it/open it in QDK - I've used a 'take' action in a type rather than a user command - you can see how much easier this is that having to test EVERY take command the player issues <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --> \n\n[code:9lpaurri]' &quot;test&quot;\n' Created with QDK Pro 3&#46;53\n\ndefine game &lt;test&gt;\n\tasl-version &lt;350&gt;\n\tgametype singleplayer\n\tstart &lt;start&gt;\n\tgame author &lt;Al &#40;MaDbRiT&#41;&gt;\n\tgame info &lt;Created with QDK Pro 3&#46;53&gt;\nend define\n\ndefine type &lt;special&gt;\n\taction &lt;take&gt; &#123;\n\t\tmsg &lt;This is a special type object - it opened an exit when you took it&#46;&gt;\n\t\tgive &lt;screen&gt;\n\t\tcreate exit south &lt;start; secret room&gt;\n\t&#125;\nend define\n\ndefine synonyms\nend define\n\ndefine room &lt;start&gt;\n\tprefix &lt;the&gt;\n\tlook &lt;start room&gt;\n\n\tdefine object &lt;widget&gt;\n\t\tlook &lt;This is a standard Quest object&gt;\n\t\ttake\n\t\tprefix &lt;a&gt;\n\tend define\n\n\tdefine object &lt;screen&gt;\n\t\tlook &lt;a tall, ornamental screen&#46;&gt;\n\t\tprefix &lt;a&gt;\n\t\ttype &lt;special&gt;\n\tend define\n\nend define\n\ndefine room &lt;secret room&gt;\n\tprefix &lt;the&gt;\nend define\n\ndefine text &lt;intro&gt;\n\nend define\n\ndefine text &lt;win&gt;\n\nend define\n\ndefine text &lt;lose&gt;\n\nend define[/code:9lpaurri]\n\n\nThat said it is very easy to replace any of the Quest commands with your own (I do it a lot in my typelib.qlb library) and you should find you can make tests etc as you indicate.  If it doesn't work you probably have either a syntax error or a logic problem - neither of which we can help you with without seeing the problem code.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Hi<br/><br/>I'm a bit puzzled as to what exactly you are asking for help with here  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_e_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? --> <br/><br/>Firstly, a library is a completely separate file that you add to your game either from QDK or manually with the 'Include &lt;name of lib here&gt;.<br/><br/>Adding user commands is a completely different and unrelated question.  You can make your own commands in a library or in Quest, it has nothing to do with libraries as such.<br/><br/>Your question about overriding the inbuilt 'take' doesn't actually make any sense to me, you can write your own take scripts on an object by object (or type by type) basis anyway so there isn't usually any point in messing with the inbuilt take.<br/><br/>What I'm saying (if it makes sense to you) is that rather than override the global take command for all objects and then have to make a test for being of a specific type every time, why not just override the 'take' for the objects of the specific type in the first place - you don't need the tests at all this way, so it is much neater (and you don't have to re-create normal take handling).  <br/><br/>Here's an example - save the code below as 'test.asl' and run it/open it in QDK - I've used a 'take' action in a type rather than a user command - you can see how much easier this is that having to test EVERY take command the player issues <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --> <br/><br/><pre><code>' &quot;test&quot;<br/>' Created with QDK Pro 3&#46;53<br/><br/>define game &lt;test&gt;<br/>\tasl-version &lt;350&gt;<br/>\tgametype singleplayer<br/>\tstart &lt;start&gt;<br/>\tgame author &lt;Al &#40;MaDbRiT&#41;&gt;<br/>\tgame info &lt;Created with QDK Pro 3&#46;53&gt;<br/>end define<br/><br/>define type &lt;special&gt;<br/>\taction &lt;take&gt; &#123;<br/>\t\tmsg &lt;This is a special type object - it opened an exit when you took it&#46;&gt;<br/>\t\tgive &lt;screen&gt;<br/>\t\tcreate exit south &lt;start; secret room&gt;<br/>\t&#125;<br/>end define<br/><br/>define synonyms<br/>end define<br/><br/>define room &lt;start&gt;<br/>\tprefix &lt;the&gt;<br/>\tlook &lt;start room&gt;<br/><br/>\tdefine object &lt;widget&gt;<br/>\t\tlook &lt;This is a standard Quest object&gt;<br/>\t\ttake<br/>\t\tprefix &lt;a&gt;<br/>\tend define<br/><br/>\tdefine object &lt;screen&gt;<br/>\t\tlook &lt;a tall, ornamental screen&#46;&gt;<br/>\t\tprefix &lt;a&gt;<br/>\t\ttype &lt;special&gt;<br/>\tend define<br/><br/>end define<br/><br/>define room &lt;secret room&gt;<br/>\tprefix &lt;the&gt;<br/>end define<br/><br/>define text &lt;intro&gt;<br/><br/>end define<br/><br/>define text &lt;win&gt;<br/><br/>end define<br/><br/>define text &lt;lose&gt;<br/><br/>end define</code></pre><br/><br/><br/>That said it is very easy to replace any of the Quest commands with your own (I do it a lot in my typelib.qlb library) and you should find you can make tests etc as you indicate.  If it doesn't work you probably have either a syntax error or a logic problem - neither of which we can help you with without seeing the problem code.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-12-19T14:36:22+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4576",
      "UserId": 0,
      "Username": "Shadowalker",
      "UserAvatar": null,
      "UserGravatar": "766dd24e40206a88104a4c2211d8483b",
      "EditableText": "Hi there: Thanks for the help. Man the people in these forums are so helpfull!  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> Anyway, about libraries, I know what they are. I explained badly. What I meant to say is that in the library file I'm creating, there are some commands that I don't know. (A lot actually, since I'm new to ASL.) To see how they are written in ASL, I do it in QDK first. For example, if I don't know how to write a procedure in ASL, I write it in QDK first, and then open up that file in a word-editing program, such as wordpad. I then know how to write it in my library. I don't actually use the .ASL file...just for viewing purposes is what I meant. \n\nI think that what you're saying is that I should add a 'take' action as part of a type, let's say, type &quot;moveable.&quot; That's what I thought of before, only I thought that if your &quot;take&quot; action, let's say, gives the item to the player, but the original &quot;Player can't take item&quot; is checked, then that would override [b:vo9uhqle]your[/b:vo9uhqle] &quot;take&quot; action.\n\nIf I'm wrong, (which I probably am) it's just that I'm inexperienced in this type of programming. I haven't tried your code yet, cause I just got on my computer, but I'm gonna try it tonight. Thanks for the help-- <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Hi there: Thanks for the help. Man the people in these forums are so helpfull!  <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> Anyway, about libraries, I know what they are. I explained badly. What I meant to say is that in the library file I'm creating, there are some commands that I don't know. (A lot actually, since I'm new to ASL.) To see how they are written in ASL, I do it in QDK first. For example, if I don't know how to write a procedure in ASL, I write it in QDK first, and then open up that file in a word-editing program, such as wordpad. I then know how to write it in my library. I don't actually use the .ASL file...just for viewing purposes is what I meant. <br/><br/>I think that what you're saying is that I should add a 'take' action as part of a type, let's say, type &quot;moveable.&quot; That's what I thought of before, only I thought that if your &quot;take&quot; action, let's say, gives the item to the player, but the original &quot;Player can't take item&quot; is checked, then that would override <span style=\"font-weight:bold;\">your</span> &quot;take&quot; action.<br/><br/>If I'm wrong, (which I probably am) it's just that I'm inexperienced in this type of programming. I haven't tried your code yet, cause I just got on my computer, but I'm gonna try it tonight. Thanks for the help-- <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2004-12-20T06:32:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4578",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ebayfan414 wrote:\n\n[quote:261inail]I think that what you're saying is that I should add a 'take' action as part of a type, let's say, type \"moveable.\" That's what I thought of before, only I thought that if your \"take\" action, let's say, gives the item to the player, but the original \"Player can't take item\" is checked, then that would override your \"take\" action. [/quote:261inail]\n\nThis is (IMHO) one of Quest's slightly confusing areas. There are actually four possible 'take' methods with Quest and understanding the order of precedence can make your head hurt - when are 'actions' not actions? \n\nAt the bottom of the heap is a straightforward 'take' message as typed into the QDK take message box - Quest calls this a 'tag' and it has the lowest rating. if any of the following alternatives are coded, then this take tag is ignored.\n\nNext up is a take 'script',  created if you use the 'edit script' box on the QDK take tab. This script will run instead of the simple take tag message if you provide it.  It will not run if the object has a take 'action' as described next...\n\nA take 'action' will override both a take script and a take tag, but the potential confusion doesn't end there, because Quest supports object orientated programming techniques, there are actually two ways for an object to gain a 'take' action.\n\n1: The action can be inherited from a type.  This is what I did in the example above. Here the 'action' I coded is inherited by the object(s) defined as being of the type 'special'.  This action overrides any tag or script that the author provides through QDK, but is not the top of the heap, because it can be overridden by a (local to the specific object) 'action'.\n\n2: The action can be coded in QDK under the 'add actions and properties' window for the particular obect. This action will override any inherited action (i.e. it is a specialisation) and of course also override any take tag or take script provided.\n\nWhile this is a little bit complicated, it does make ASL very powerful and flexible in practice. Careful declaration of types with their inherited actions and properties makes coding variations on a theme (object wise) really very easy to do - more so because Quest supports [i:261inail]multiple[/i:261inail] inheritance.   \n\nSo, the order of precedence (from the top) is:\n\n1: a locally coded action (specialisation)\n2: an inherited action (from a type declaration)\n3: a take 'script'\n4: a take 'tag'\n\nHope this helps you get your head around the example given.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "ebayfan414 wrote:<br/><br/><blockquote><p>I think that what you're saying is that I should add a 'take' action as part of a type, let's say, type \"moveable.\" That's what I thought of before, only I thought that if your \"take\" action, let's say, gives the item to the player, but the original \"Player can't take item\" is checked, then that would override your \"take\" action. </p></blockquote><br/><br/>This is (IMHO) one of Quest's slightly confusing areas. There are actually four possible 'take' methods with Quest and understanding the order of precedence can make your head hurt - when are 'actions' not actions? <br/><br/>At the bottom of the heap is a straightforward 'take' message as typed into the QDK take message box - Quest calls this a 'tag' and it has the lowest rating. if any of the following alternatives are coded, then this take tag is ignored.<br/><br/>Next up is a take 'script',  created if you use the 'edit script' box on the QDK take tab. This script will run instead of the simple take tag message if you provide it.  It will not run if the object has a take 'action' as described next...<br/><br/>A take 'action' will override both a take script and a take tag, but the potential confusion doesn't end there, because Quest supports object orientated programming techniques, there are actually two ways for an object to gain a 'take' action.<br/><br/>1: The action can be inherited from a type.  This is what I did in the example above. Here the 'action' I coded is inherited by the object(s) defined as being of the type 'special'.  This action overrides any tag or script that the author provides through QDK, but is not the top of the heap, because it can be overridden by a (local to the specific object) 'action'.<br/><br/>2: The action can be coded in QDK under the 'add actions and properties' window for the particular obect. This action will override any inherited action (i.e. it is a specialisation) and of course also override any take tag or take script provided.<br/><br/>While this is a little bit complicated, it does make ASL very powerful and flexible in practice. Careful declaration of types with their inherited actions and properties makes coding variations on a theme (object wise) really very easy to do - more so because Quest supports <span style=\"font-style:italic;\">multiple</span> inheritance.   <br/><br/>So, the order of precedence (from the top) is:<br/><br/>1: a locally coded action (specialisation)<br/>2: an inherited action (from a type declaration)<br/>3: a take 'script'<br/>4: a take 'tag'<br/><br/>Hope this helps you get your head around the example given.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-12-20T08:55:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4594",
      "UserId": 0,
      "Username": "Shadowalker",
      "UserAvatar": null,
      "UserGravatar": "766dd24e40206a88104a4c2211d8483b",
      "EditableText": "Hi: Thanks for all the help. Yeah, it is kinda confusing! I think I got it though. But anyway, I don't think I'll program that many &quot;take&quot; actions for one object, so I don't think I'll run into that problem. And thanks for the code; It worked",
      "EditableFormat": "bbcode",
      "HTML": "Hi: Thanks for all the help. Yeah, it is kinda confusing! I think I got it though. But anyway, I don't think I'll program that many &quot;take&quot; actions for one object, so I don't think I'll run into that problem. And thanks for the code; It worked",
      "PostDate": "2004-12-21T21:44:51+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4596",
      "UserId": 0,
      "Username": "007bond",
      "UserAvatar": null,
      "UserGravatar": "4c2673a2d8666a97b5c1082c5cf2e0e5",
      "EditableText": "Just out of interest, what is the library going to be called and what will it do?",
      "EditableFormat": "bbcode",
      "HTML": "Just out of interest, what is the library going to be called and what will it do?",
      "PostDate": "2004-12-21T21:59:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4597",
      "UserId": 0,
      "Username": "007bond",
      "UserAvatar": null,
      "UserGravatar": "4c2673a2d8666a97b5c1082c5cf2e0e5",
      "EditableText": "Just out of interest, what is the library going to be called and what will it do?  And also to Al, when is TypeLib 3 going to be released?\n\n[EDIT] Sorry for the double post, I pressed escape one second to late to enter something else",
      "EditableFormat": "bbcode",
      "HTML": "Just out of interest, what is the library going to be called and what will it do?  And also to Al, when is TypeLib 3 going to be released?<br/><br/>[EDIT] Sorry for the double post, I pressed escape one second to late to enter something else",
      "PostDate": "2004-12-21T21:59:39+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4598",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "007Bond wrote;\n\n[quote:24ubcsoi]when is TypeLib 3 going to be released[/quote:24ubcsoi]\n\nIt is now in (I hope) the final stages of testing after having to have a major code overhaul in the last couple of months.\n\nWhen my testers stop finding bugs I've missed it will be released -  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> \n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "007Bond wrote;<br/><br/><blockquote><p>when is TypeLib 3 going to be released</p></blockquote><br/><br/>It is now in (I hope) the final stages of testing after having to have a major code overhaul in the last couple of months.<br/><br/>When my testers stop finding bugs I've missed it will be released -  <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --> <br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-12-21T22:13:32+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "4600",
      "UserId": 0,
      "Username": "007bond",
      "UserAvatar": null,
      "UserGravatar": "4c2673a2d8666a97b5c1082c5cf2e0e5",
      "EditableText": "I know how you feel.  I often get my brother to test my programs.  He opens it, and the first thing he does in it produces an error.  In other words, he just walks in and instantly finds a problem.  It's so annoying when you've just spent the last hour putting a few new features or fixing bugs, and he comes and finds another one!",
      "EditableFormat": "bbcode",
      "HTML": "I know how you feel.  I often get my brother to test my programs.  He opens it, and the first thing he does in it produces an error.  In other words, he just walks in and instantly finds a problem.  It's so annoying when you've just spent the last hour putting a few new features or fixing bugs, and he comes and finds another one!",
      "PostDate": "2004-12-21T22:29:40+00:00",
      "LastEditDate": null
    }
  ]
}
