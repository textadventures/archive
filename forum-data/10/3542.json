{
  "Topic": {
    "TopicId": "3542",
    "ForumId": "10",
    "Title": "Quest copying library code for an object into game?",
    "LastUpdated": "2013-03-17T16:00:20+00:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "23422",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "For details please see:\n<!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1258\">http://quest.codeplex.com/workitem/1258</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "For details please see:<br/><!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/workitem/1258\">http://quest.codeplex.com/workitem/1258</a><!-- m -->",
      "PostDate": "2013-03-15T19:50:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23461",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I discovered the same problem and was basically told, &quot;Don't do that.&quot; (That, basically, libraries are meant for code and not meant to include additions to the overall room topology, which should all reside in the main aslx file - something which I disagree with as an overall organizational principle, and I still consider this a bug).\n\nI resorted to setting the parent in code instead of in data.",
      "EditableFormat": "bbcode",
      "HTML": "I discovered the same problem and was basically told, &quot;Don't do that.&quot; (That, basically, libraries are meant for code and not meant to include additions to the overall room topology, which should all reside in the main aslx file - something which I disagree with as an overall organizational principle, and I still consider this a bug).<br/><br/>I resorted to setting the parent in code instead of in data.",
      "PostDate": "2013-03-16T10:06:53+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23467",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;jaynabonne&quot;:2526ejfr]I discovered the same problem and was basically told, &quot;Don't do that.&quot; (That, basically, libraries are meant for code and not meant to include additions to the overall room topology, which should all reside in the main aslx file - something which I disagree with as an overall organizational principle, and I still consider this a bug).\n\nI resorted to setting the parent in code instead of in data.[/quote:2526ejfr]\n\nAs I suspected.\n\nWhat I wanted to do is to have a new type which player and NPCs can inherit from, and which would add some objects to them by default. Those objects should have handling logic in the library but it should be customizable in the editor for each character.\n\nSince it is impossible to add objects to characters this way (due to Quest just copying the code over and worse yet, not displaying the object which is added in the editor), I am at a loss as to how to solve this problem.\n\nI could programmatically add the objects to the character when they inherit from certain type (that would probably require that I add game start script which would do the actual object creation), but then I cannot customize individual characters from the editor because those dynamically created objects don't exist in the code. Worse yet, I don't know how to add a script to the object I just created, not to mention how tedious would it be to loop through all the objects and add several scripts to each one of them.\n\nIt turns out that the only solution is to create objects in the editor and then inherit them from the object type. When you have 10 characters going around and adding several objects per character and then inheriting those objects from their respective types is much more tedious and error prone compared to simply being able to make characters inherit from a type and have the objects added automatically.\n\nFurthermore, there should be a way to say that an object is a part of player and [b:2526ejfr]not[/b:2526ejfr] in the inventory so it can be visible without having to create a player as an open container with all the problems which arise from that such as listing those objects together with inventory items and saying that the player is containing them. Inform 7 has a way to define objects which are part of something and that is really a missing feature here.\n\nIf you are curious why would I need such a feature, I am trying to create anatomically correct player and NPCs.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>I discovered the same problem and was basically told, &quot;Don't do that.&quot; (That, basically, libraries are meant for code and not meant to include additions to the overall room topology, which should all reside in the main aslx file - something which I disagree with as an overall organizational principle, and I still consider this a bug).<br/><br/>I resorted to setting the parent in code instead of in data.</blockquote><br/><br/>As I suspected.<br/><br/>What I wanted to do is to have a new type which player and NPCs can inherit from, and which would add some objects to them by default. Those objects should have handling logic in the library but it should be customizable in the editor for each character.<br/><br/>Since it is impossible to add objects to characters this way (due to Quest just copying the code over and worse yet, not displaying the object which is added in the editor), I am at a loss as to how to solve this problem.<br/><br/>I could programmatically add the objects to the character when they inherit from certain type (that would probably require that I add game start script which would do the actual object creation), but then I cannot customize individual characters from the editor because those dynamically created objects don't exist in the code. Worse yet, I don't know how to add a script to the object I just created, not to mention how tedious would it be to loop through all the objects and add several scripts to each one of them.<br/><br/>It turns out that the only solution is to create objects in the editor and then inherit them from the object type. When you have 10 characters going around and adding several objects per character and then inheriting those objects from their respective types is much more tedious and error prone compared to simply being able to make characters inherit from a type and have the objects added automatically.<br/><br/>Furthermore, there should be a way to say that an object is a part of player and <span style=\"font-weight:bold;\">not</span> in the inventory so it can be visible without having to create a player as an open container with all the problems which arise from that such as listing those objects together with inventory items and saying that the player is containing them. Inform 7 has a way to define objects which are part of something and that is really a missing feature here.<br/><br/>If you are curious why would I need such a feature, I am trying to create anatomically correct player and NPCs.",
      "PostDate": "2013-03-16T13:29:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23469",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "So let me try to get my head around this a bit.\n\nFirst off, if you haven't realized, you can't add nested objects directly to types. That may not apply here, but I wanted to mention it just in case. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nSecond, Quest only pulls things into the main aslx file if you assign a parent to an object which is already in the Quest main file. So, for instance, you can build entire object hierarchies in your libraries, and they won't encounter this bug as long as you don't try to set a parent to something in the main game file.\n\nYou don't have to resort to dynamically creating objects just to have runtime assignment. One possibility is to inherit from the type as you are creating, and have the main object have a *list* of objects to be added. Then there would be a single script in the type that would iterate over that list and then either assign or clone the objects onto the character.\n\nIf that doesn't apply, then let's discuss further. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "So let me try to get my head around this a bit.<br/><br/>First off, if you haven't realized, you can't add nested objects directly to types. That may not apply here, but I wanted to mention it just in case. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Second, Quest only pulls things into the main aslx file if you assign a parent to an object which is already in the Quest main file. So, for instance, you can build entire object hierarchies in your libraries, and they won't encounter this bug as long as you don't try to set a parent to something in the main game file.<br/><br/>You don't have to resort to dynamically creating objects just to have runtime assignment. One possibility is to inherit from the type as you are creating, and have the main object have a *list* of objects to be added. Then there would be a single script in the type that would iterate over that list and then either assign or clone the objects onto the character.<br/><br/>If that doesn't apply, then let's discuss further. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-03-16T13:57:20+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23478",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "Yes I am aware about the parent thing.\n\nThe problem with runtime creation is obviously the inability to create custom descriptions and actions for various characters and to work in the editor in general.\n\nAnother thing to watch is say if you create object &quot;beard&quot; (khm) on the player and then on another character, the other one will be called beard1 and so on. I have no idea how could I programmatically process them.\n\nFinally, there is a matter of how those objects will be displayed. If they are children of the player they will be in their inventory. Showing them for any interaction (so you could &quot;pull beard&quot; for example) would require all players and NPCs to be open containers which is really ugly, not to mention mixing of things that should be [b:15o7jr4i]part of an object[/b:15o7jr4i] with the inventory items.\n\nI must admit that I am still trying to wrap my own head around the problem and the more I think, the more I believe the problem is that Quest has no &quot;part of&quot; semantics for objects but instead treats everything as the children, causing all sorts of handling and visibility problems.\n\nIf you want to discuss what I want to do in more details, we could continue via PM, or even better, email.",
      "EditableFormat": "bbcode",
      "HTML": "Yes I am aware about the parent thing.<br/><br/>The problem with runtime creation is obviously the inability to create custom descriptions and actions for various characters and to work in the editor in general.<br/><br/>Another thing to watch is say if you create object &quot;beard&quot; (khm) on the player and then on another character, the other one will be called beard1 and so on. I have no idea how could I programmatically process them.<br/><br/>Finally, there is a matter of how those objects will be displayed. If they are children of the player they will be in their inventory. Showing them for any interaction (so you could &quot;pull beard&quot; for example) would require all players and NPCs to be open containers which is really ugly, not to mention mixing of things that should be <span style=\"font-weight:bold;\">part of an object</span> with the inventory items.<br/><br/>I must admit that I am still trying to wrap my own head around the problem and the more I think, the more I believe the problem is that Quest has no &quot;part of&quot; semantics for objects but instead treats everything as the children, causing all sorts of handling and visibility problems.<br/><br/>If you want to discuss what I want to do in more details, we could continue via PM, or even better, email.",
      "PostDate": "2013-03-16T19:15:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23496",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "With respect to &quot;beard&quot;, &quot;beard1&quot;, etc., that implies that you're using the object internal name for display. Set the object alias to &quot;beard&quot; and it will be beard regardless of the object's name. If you have a prototype object with alias &quot;beard&quot; and you clone it, the clone will have display &quot;beard&quot; as well since that's what the alias will be as well (at least, it better be!).\n\nFor the rest, let me think a bit more.",
      "EditableFormat": "bbcode",
      "HTML": "With respect to &quot;beard&quot;, &quot;beard1&quot;, etc., that implies that you're using the object internal name for display. Set the object alias to &quot;beard&quot; and it will be beard regardless of the object's name. If you have a prototype object with alias &quot;beard&quot; and you clone it, the clone will have display &quot;beard&quot; as well since that's what the alias will be as well (at least, it better be!).<br/><br/>For the rest, let me think a bit more.",
      "PostDate": "2013-03-17T11:16:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23497",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "There is a corresponding concept for room-level obejcts - scenery. These are objects that can be looked at, etc but which don't show up in the &quot;Places and Objects&quot; list. Unfortunately, that doesn't work for held objects.\n\nI'd say that woud be useful feature to add to Quest - something similar to &quot;scenery&quot; but for &quot;held&quot; objects - perhaps &quot;adornment&quot; or &quot;facet&quot; or something.",
      "EditableFormat": "bbcode",
      "HTML": "There is a corresponding concept for room-level obejcts - scenery. These are objects that can be looked at, etc but which don't show up in the &quot;Places and Objects&quot; list. Unfortunately, that doesn't work for held objects.<br/><br/>I'd say that woud be useful feature to add to Quest - something similar to &quot;scenery&quot; but for &quot;held&quot; objects - perhaps &quot;adornment&quot; or &quot;facet&quot; or something.",
      "PostDate": "2013-03-17T11:24:09+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23505",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;jaynabonne&quot;:4b97zqbz]There is a corresponding concept for room-level obejcts - scenery. These are objects that can be looked at, etc but which don't show up in the &quot;Places and Objects&quot; list. Unfortunately, that doesn't work for held objects.\n\nI'd say that woud be useful feature to add to Quest - something similar to &quot;scenery&quot; but for &quot;held&quot; objects - perhaps &quot;adornment&quot; or &quot;facet&quot; or something.[/quote:4b97zqbz]\n\nBut they are not exactly scenery -- there should be a way of interacting with them as well as and showing and hiding them too (for example &quot;chest&quot; could be hidden by &quot;t-shirt&quot;).\n\nMaybe they could stay in the inventory window, but be shown grouped right next to player and with different (configurable) color?\n\nAlso, current inventory could use some tree-like indentation to better differentiate to which object something belongs.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>There is a corresponding concept for room-level obejcts - scenery. These are objects that can be looked at, etc but which don't show up in the &quot;Places and Objects&quot; list. Unfortunately, that doesn't work for held objects.<br/><br/>I'd say that woud be useful feature to add to Quest - something similar to &quot;scenery&quot; but for &quot;held&quot; objects - perhaps &quot;adornment&quot; or &quot;facet&quot; or something.</blockquote><br/><br/>But they are not exactly scenery -- there should be a way of interacting with them as well as and showing and hiding them too (for example &quot;chest&quot; could be hidden by &quot;t-shirt&quot;).<br/><br/>Maybe they could stay in the inventory window, but be shown grouped right next to player and with different (configurable) color?<br/><br/>Also, current inventory could use some tree-like indentation to better differentiate to which object something belongs.",
      "PostDate": "2013-03-17T16:00:20+00:00",
      "LastEditDate": null
    }
  ]
}
