{
  "Topic": {
    "TopicId": "p_igh7ejyewpw81alw7g4q",
    "ForumId": "10",
    "Title": "Torch Script",
    "LastUpdated": "2020-05-03T12:44:28.8458226Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3086bff6-dd49-4c14-8929-e3c3eeee721d",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In this verb script for a torch, the line ```do (player.shield, \"nobonus\")``` gives the error  \r\n>Error running script: Object reference not set to an instance of an object.\r\n\r\nI am removing the equipped shield and replacing it with a torch. Or if the player chooses to remove the weapon then I am going to add that in as well.\r\n\r\nHow do I run the \"nobonus\"  attribute in this case?\r\n```\r\nif (this.switchedon = true) {\r\n  msg (\"It is already lit.\")\r\n}\r\nif (HasAttribute(torch.parent, \"nolight\")) {\r\n  msg (\"It is not yours to light.\")\r\n}\r\nelse if (player.shield <> null and player.onehanded <> null) {\r\n  options = Split(\"Shield;Weapon\", \";\")\r\n  game.temp = this\r\n  ShowMenu (\"Which will you unequip?\", options, true) {\r\n    this = game.temp\r\n    switch (result) {\r\n      case (\"Shield\") {\r\n        msg (\"You put away your shield and light your torch, holding it out to see.\")\r\n        player.shield.listalias = Replace(player.shield.listalias, \" (equipped)\", \"\")\r\n        player.shield.equipped = False\r\n        player.shield = this\r\n      }\r\n      case (\"Weapon\") {\r\n        msg (\"You put away your weapon and light your torch, holding it out to see.\")\r\n        player.onehanded.listalias = player.onehanded.orginalalias\r\n        do (player.onehanded, \"nobonus\")\r\n        player.onehanded.equipped = False\r\n        player.onehanded = this\r\n      }\r\n    }\r\n    on ready {\r\n      this.switchedon = True\r\n      list add (this.inventoryverbs, \"Snuff\")\r\n      list remove (this.inventoryverbs, \"Light\")\r\n      this.listalias = this.listalias + \" (lit)\"\r\n      torch.burned = True\r\n      ShouldMonstersAttack\r\n      EnableTurnScript (torchturnscript)\r\n    }\r\n  }\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>In this verb script for a torch, the line <code>do (player.shield, \"nobonus\")</code> gives the error</p>\n<blockquote>\n<p>Error running script: Object reference not set to an instance of an object.</p>\n</blockquote>\n<p>I am removing the equipped shield and replacing it with a torch. Or if the player chooses to remove the weapon then I am going to add that in as well.</p>\n<p>How do I run the \"nobonus\"  attribute in this case?</p>\n<pre><code>if (this.switchedon = true) {\n  msg (\"It is already lit.\")\n}\nif (HasAttribute(torch.parent, \"nolight\")) {\n  msg (\"It is not yours to light.\")\n}\nelse if (player.shield &lt;&gt; null and player.onehanded &lt;&gt; null) {\n  options = Split(\"Shield;Weapon\", \";\")\n  game.temp = this\n  ShowMenu (\"Which will you unequip?\", options, true) {\n    this = game.temp\n    switch (result) {\n      case (\"Shield\") {\n        msg (\"You put away your shield and light your torch, holding it out to see.\")\n        player.shield.listalias = Replace(player.shield.listalias, \" (equipped)\", \"\")\n        player.shield.equipped = False\n        player.shield = this\n      }\n      case (\"Weapon\") {\n        msg (\"You put away your weapon and light your torch, holding it out to see.\")\n        player.onehanded.listalias = player.onehanded.orginalalias\n        do (player.onehanded, \"nobonus\")\n        player.onehanded.equipped = False\n        player.onehanded = this\n      }\n    }\n    on ready {\n      this.switchedon = True\n      list add (this.inventoryverbs, \"Snuff\")\n      list remove (this.inventoryverbs, \"Light\")\n      this.listalias = this.listalias + \" (lit)\"\n      torch.burned = True\n      ShouldMonstersAttack\n      EnableTurnScript (torchturnscript)\n    }\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2020-05-03T12:44:28.8458226Z",
      "LastEditDate": "2020-05-03T23:12:17.4498456Z",
      "link": null
    },
    {
      "PostId": "289ee8b7-19ca-44ac-891b-763166271032",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Put a changedequipped on the torch so I don't need to do anything in this script!\r\n```\r\nif (this.equipped = False) {\r\n  player.armour = player.armour - 1\r\n}\r\nif (this.equipped = True) {\r\n  player.armour = player.armour + 1\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Put a changedequipped on the torch so I don't need to do anything in this script!</p>\n<pre><code>if (this.equipped = False) {\n  player.armour = player.armour - 1\n}\nif (this.equipped = True) {\n  player.armour = player.armour + 1\n}\n</code></pre>\n\n",
      "PostDate": "2020-05-03T22:39:01.5929518Z",
      "LastEditDate": "2020-05-03T22:39:30.5797454Z",
      "link": null
    },
    {
      "PostId": "e5b02cf4-da66-4b19-a9df-6acf9112a464",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Using changescripts probably makes an equipment system much easier :-p\r\nI suspect that if you used both `changedequipped` scripts on each weapon and `changedonehanded` (etc) scripts on the player, you could cut your code in half; letting Quest's magic do a lot of the work for you.",
      "EditableFormat": "markdown",
      "HTML": "<p>Using changescripts probably makes an equipment system much easier :-p<br>\nI suspect that if you used both <code>changedequipped</code> scripts on each weapon and <code>changedonehanded</code> (etc) scripts on the player, you could cut your code in half; letting Quest's magic do a lot of the work for you.</p>\n\n",
      "PostDate": "2020-05-04T10:14:24.4339238Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60134208-fd4a-452d-8620-b8fe1d0f1927",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was working with the changescript and realized what you just posted. Came here to mention it and here you are. Now I'll have to spend a month discovering just how much it can do with them. Thanks Mrangel. Time to get another book. And watch a video. I too write but have yet to publish anything. I don't have the deep thought process of the characters that you have. \r\n\r\nAllowed gratuitous and shameless plug: [Mrangel's Amazon Books](https://www.amazon.com/Angel-Wedge/e/B00N5Q5XIK?ref_=dbs_p_ebk_r00_abau_000000) -To help a top answer poster on the forum. One of our own!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I was working with the changescript and realized what you just posted. Came here to mention it and here you are. Now I'll have to spend a month discovering just how much it can do with them. Thanks Mrangel. Time to get another book. And watch a video. I too write but have yet to publish anything. I don't have the deep thought process of the characters that you have.</p>\n<p>Allowed gratuitous and shameless plug: <a href=\"https://www.amazon.com/Angel-Wedge/e/B00N5Q5XIK?ref_=dbs_p_ebk_r00_abau_000000\">Mrangel's Amazon Books</a> -To help a top answer poster on the forum. One of our own!</p>\n\n",
      "PostDate": "2020-05-05T02:33:06.5105745Z",
      "LastEditDate": "2020-05-05T02:41:28.8010655Z",
      "link": null
    },
    {
      "PostId": "57e31739-e1fd-4c60-b90d-69b7dbde3e00",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would have started from something like `changedonehanded`:\r\n```\r\nnewvalue = this.equipped\r\nif (IsDefined (\"oldvalue\")) [{\r\n  oldvalue.equipped = false\r\n}\r\nif (newvalue = this.equipped and not weapon = null) {\r\n  this.onehanded.equipped = true\r\n}\r\n```\r\n\r\nThen if a weapon's `changedequipped` adds or removes any necessary stat values, its equip verb could be as simple as:\r\n```\r\nif (this.equipped) {\r\n  msg (\"You're already holding your sword.\")\r\n}\r\nelse {\r\n  player.onehanded = this\r\n}\r\n```\r\nA previous weapon is unequipped automatically; and the code feels simpler because it's broken up into smaller bits. If there are special cases (like a sword that can be used in one hand or two, or a cursed sword that you can't unequip), they have slightly more complex scripts - but the complexity is limited to one item, rather than having huge trees of if statements in the main script.\r\n\r\nActually, I'd probably make `changedequipped` look like:\r\n```\r\nif (this.equipped) {\r\n  list add (player.equipactions, \"raise your \" + this.alias)\r\n  // adjust player's combat values if necessary\r\n}\r\nelse {\r\n  list add (player.equipactions, \"put away your \" + this.alias)\r\n  // adjust player's combat values if necessary\r\n}\r\n```\r\nand equip verb:\r\n```\r\nif (this.equipped) {\r\n  msg (\"You're already holding your \" + this.alias + \".\")\r\n}\r\nelse {\r\n  player.equipactions = NewStringList()\r\n  player.onehanded = this\r\n  msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\r\n}\r\n```\r\nto get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use `{random`, and they get put together afterwards.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would have started from something like <code>changedonehanded</code>:</p>\n<pre><code>newvalue = this.equipped\nif (IsDefined (\"oldvalue\")) [{\n  oldvalue.equipped = false\n}\nif (newvalue = this.equipped and not weapon = null) {\n  this.onehanded.equipped = true\n}\n</code></pre>\n<p>Then if a weapon's <code>changedequipped</code> adds or removes any necessary stat values, its equip verb could be as simple as:</p>\n<pre><code>if (this.equipped) {\n  msg (\"You're already holding your sword.\")\n}\nelse {\n  player.onehanded = this\n}\n</code></pre>\n<p>A previous weapon is unequipped automatically; and the code feels simpler because it's broken up into smaller bits. If there are special cases (like a sword that can be used in one hand or two, or a cursed sword that you can't unequip), they have slightly more complex scripts - but the complexity is limited to one item, rather than having huge trees of if statements in the main script.</p>\n<p>Actually, I'd probably make <code>changedequipped</code> look like:</p>\n<pre><code>if (this.equipped) {\n  list add (player.equipactions, \"raise your \" + this.alias)\n  // adjust player's combat values if necessary\n}\nelse {\n  list add (player.equipactions, \"put away your \" + this.alias)\n  // adjust player's combat values if necessary\n}\n</code></pre>\n<p>and equip verb:</p>\n<pre><code>if (this.equipped) {\n  msg (\"You're already holding your \" + this.alias + \".\")\n}\nelse {\n  player.equipactions = NewStringList()\n  player.onehanded = this\n  msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\n}\n</code></pre>\n<p>to get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use <code>{random</code>, and they get put together afterwards.</p>\n\n",
      "PostDate": "2020-05-05T08:37:21.8257125Z",
      "LastEditDate": "2020-05-05T23:16:32.6134889Z",
      "link": null
    },
    {
      "PostId": "614578fc-a89f-44bd-a1ff-5b3b36385222",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If I add a verb \"equip\" to the weapon do I need to remove the global command \"equip\"?",
      "EditableFormat": "markdown",
      "HTML": "<p>If I add a verb \"equip\" to the weapon do I need to remove the global command \"equip\"?</p>\n\n",
      "PostDate": "2020-05-05T21:03:40.9777812Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a61e513b-d5ba-4781-bca2-20770a52152d",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I'm a bit lost.\r\nWhat am I missing in this example using the new scripts?\r\nI don't know where to add the responses you reference here.\r\n>to get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use {random, and they get put together afterwards.\r\n\r\n**EDITED:**\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Equipping system\">\r\n    <gameid>250ece70-5ca1-437b-b317-46d4c28e5221</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2020</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <changedonehanded type=\"script\">\r\n        newvalue = this.equipped\r\n        if (IsDefined (\"oldvalue\")) {\r\n          oldvalue.equipped = false\r\n        }\r\n        if (weapon = this.equipped and not weapon = null) {\r\n          this.onehanded.equipped = true\r\n        }\r\n      </changedonehanded>\r\n      <object name=\"small_sword\">\r\n        <inherit name=\"editor_object\" />\r\n        <equip type=\"script\">\r\n          if (this.equipped) {\r\n            msg (\"You're already holding your \" + this.alias + \".\")\r\n          }\r\n          else {\r\n            player.equipactions = NewStringList()\r\n            player.onehanded = this\r\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\r\n          }\r\n        </equip>\r\n        <changedequipped type=\"script\">\r\n          if (this.equipped) {\r\n            list add (player.equipactions, \"raise your \" + this.alias)\r\n          }\r\n          else {\r\n            list add (player.equipactions, \"put away your \" + this.alias)\r\n          }\r\n        </changedequipped>\r\n        <alias>sword</alias>\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <one_handed />\r\n        <listalias>Sword</listalias>\r\n        <price type=\"int\">3</price>\r\n        <volume type=\"int\">2</volume>\r\n        <damage>5d2</damage>\r\n        <orignalalias>Sword</orignalalias>\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>equip</property>\r\n    <pattern>equip</pattern>\r\n    <defaultexpression>\"You can't equip \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n</asl>\r\n```\r\nI get this for a response.\r\n>> equip sword\r\nError running script: Error compiling expression 'oldvalue': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'\r\nYou can't do that.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I'm a bit lost.<br>\nWhat am I missing in this example using the new scripts?<br>\nI don't know where to add the responses you reference here.</p>\n<blockquote>\n<p>to get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use {random, and they get put together afterwards.</p>\n</blockquote>\n<p><strong>EDITED:</strong></p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Equipping system\"&gt;\n    &lt;gameid&gt;250ece70-5ca1-437b-b317-46d4c28e5221&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2020&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;changedonehanded type=\"script\"&gt;\n        newvalue = this.equipped\n        if (IsDefined (\"oldvalue\")) {\n          oldvalue.equipped = false\n        }\n        if (weapon = this.equipped and not weapon = null) {\n          this.onehanded.equipped = true\n        }\n      &lt;/changedonehanded&gt;\n      &lt;object name=\"small_sword\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;equip type=\"script\"&gt;\n          if (this.equipped) {\n            msg (\"You're already holding your \" + this.alias + \".\")\n          }\n          else {\n            player.equipactions = NewStringList()\n            player.onehanded = this\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\n          }\n        &lt;/equip&gt;\n        &lt;changedequipped type=\"script\"&gt;\n          if (this.equipped) {\n            list add (player.equipactions, \"raise your \" + this.alias)\n          }\n          else {\n            list add (player.equipactions, \"put away your \" + this.alias)\n          }\n        &lt;/changedequipped&gt;\n        &lt;alias&gt;sword&lt;/alias&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;one_handed /&gt;\n        &lt;listalias&gt;Sword&lt;/listalias&gt;\n        &lt;price type=\"int\"&gt;3&lt;/price&gt;\n        &lt;volume type=\"int\"&gt;2&lt;/volume&gt;\n        &lt;damage&gt;5d2&lt;/damage&gt;\n        &lt;orignalalias&gt;Sword&lt;/orignalalias&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;equip&lt;/property&gt;\n    &lt;pattern&gt;equip&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't equip \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>I get this for a response.</p>\n<blockquote>\n<blockquote>\n<p>equip sword<br>\nError running script: Error compiling expression 'oldvalue': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'<br>\nYou can't do that.</p>\n</blockquote>\n</blockquote>\n\n",
      "PostDate": "2020-05-05T22:40:55.7345857Z",
      "LastEditDate": "2020-05-05T23:46:28.2579462Z",
      "link": null
    },
    {
      "PostId": "34866c6b-19b9-4811-902c-a39eaa7f0630",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If I add a verb \"equip\" to the weapon do I need to remove the global command \"equip\"?\r\n\r\nI assumed you were using a verb. The same thing works just as well as a global command; would just presumably have an attribute on a weapon to tell the command which slot(s) it goes in.\r\n\r\n<hr/>\r\n\r\n> What am I missing in this example using the new scripts?\r\n\r\nI left an error in the script (hazards of writing on my phone); I got a couple of variable names confused. And when I was correcting it, I realised that I made the player's changescript more complex than it needs to be. It can just be:\r\n```\r\n        if (IsDefined (\"oldvalue\")) {\r\n          if (not oldvalue = null) {\r\n            oldvalue.equipped = false\r\n          }\r\n        }\r\n        if (not this.onehanded = null) {\r\n          this.onehanded.equipped = true\r\n        }\r\n```\r\n\r\nI don't need to check if unequipping the previous weapon has failed - a cursed weapon that the player can't unequip can just set `player.onehanded` back to itself in its changedequipped script, and everything else will work sensibly.\r\n\r\n> I don't know where to add the responses you reference here.\r\n> > to get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use {random, and they get put together afterwards.\r\n\r\nIn the `changedequipped` script for each weapon.\r\n\r\n<pre><code>          if (this.equipped) {\r\n            list add (player.equipactions, <em style=\"color: blue\">\"raise your \" + this.alias</em>)\r\n          }\r\n          else {\r\n            list add (player.equipactions, <em style=\"color: blue\">\"put away your \" + this.alias</em>)\r\n          }</code></pre>\r\nIf this script is given to a type, you could either use generic messages, or get them from some attribute.\r\n\r\nDoes that make sense?\r\n\r\nThe \"equip\" command/verb changes `player.onehanded` (I'd probably name the attribute `lefthand` and `righthand`; but used the variable name you were using for the example).\r\n`changedonehanded` then checks if there was an oldvalue (a previously equipped weapon) in that slot, and sets its `equipped` flag to false. And its `changedequipped` adds \"unstring your bow\" or \"lower your sword\" or whatever to the list `player.equipactions`.\r\n`changedonehanded` then changes `equipped` to true for the newly equipped weapon, which fires its `changedequipped` script, and adds \"draw your sword\" or whatever to the `equipactions` list.\r\n\r\nThen control returns to the equip command/varb, which prints out the list (using `FormatList` to add commas and the word \"and\" between items as necessary). Basically giving a one-sentence description of all each item that was unequipped or equipped.\r\n\r\nIn the case of a two-handed weapon (like the warhammer in my example), the equip verb might look more like:\r\n```\r\n          if (this.equipped) {\r\n            msg (\"You're already holding your \" + this.alias + \".\")\r\n          }\r\n          else {\r\n            player.equipactions = NewStringList()\r\n            // This line is optional; it just makes the output a little nicer\r\n            player.shield = null\r\n            player.onehanded = this\r\n            player.shield = this\r\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\r\n          }\r\n```\r\nand the `changedequipped` would have a little extra logic to make sure it's unequipped from both slots (so that if it's automatically removed by equipping a one-hand sword, the shield slot is now free as well):\r\n```\r\n          if (this.equipped) {\r\n            list add (player.equipactions, \"shoulder your \" + this.alias)\r\n          }\r\n          else {\r\n            if (player.onehanded = this) player.onehanded = null\r\n            if (player.shield = this) player.shield = null\r\n            list add (player.equipactions, \"grip your \" + this.alias + \" in both hands\")\r\n          }\r\n```\r\n\r\n> I get this for a response.\r\n\r\nNot sure what to make of that… possibly oldvalue is `null`? (I've not checked that). Added a check to the script earlier in this post.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If I add a verb \"equip\" to the weapon do I need to remove the global command \"equip\"?</p>\n</blockquote>\n<p>I assumed you were using a verb. The same thing works just as well as a global command; would just presumably have an attribute on a weapon to tell the command which slot(s) it goes in.</p>\n<hr>\n<blockquote>\n<p>What am I missing in this example using the new scripts?</p>\n</blockquote>\n<p>I left an error in the script (hazards of writing on my phone); I got a couple of variable names confused. And when I was correcting it, I realised that I made the player's changescript more complex than it needs to be. It can just be:</p>\n<pre><code>        if (IsDefined (\"oldvalue\")) {\n          if (not oldvalue = null) {\n            oldvalue.equipped = false\n          }\n        }\n        if (not this.onehanded = null) {\n          this.onehanded.equipped = true\n        }\n</code></pre>\n<p>I don't need to check if unequipping the previous weapon has failed - a cursed weapon that the player can't unequip can just set <code>player.onehanded</code> back to itself in its changedequipped script, and everything else will work sensibly.</p>\n<blockquote>\n<p>I don't know where to add the responses you reference here.</p>\n<blockquote>\n<p>to get a response like \"You unstring your bow, lower your shield, and grip the warhammer in both hands.\" without a ton of logic - you could give different weapons different messages depending on type, or even use {random, and they get put together afterwards.</p>\n</blockquote>\n</blockquote>\n<p>In the <code>changedequipped</code> script for each weapon.</p>\n<pre><code>          if (this.equipped) {\n            list add (player.equipactions, <em style=\"color: blue\">\"raise your \" + this.alias</em>)\n          }\n          else {\n            list add (player.equipactions, <em style=\"color: blue\">\"put away your \" + this.alias</em>)\n          }</code></pre>\n<p>If this script is given to a type, you could either use generic messages, or get them from some attribute.</p>\n<p>Does that make sense?</p>\n<p>The \"equip\" command/verb changes <code>player.onehanded</code> (I'd probably name the attribute <code>lefthand</code> and <code>righthand</code>; but used the variable name you were using for the example).<br>\n<code>changedonehanded</code> then checks if there was an oldvalue (a previously equipped weapon) in that slot, and sets its <code>equipped</code> flag to false. And its <code>changedequipped</code> adds \"unstring your bow\" or \"lower your sword\" or whatever to the list <code>player.equipactions</code>.<br>\n<code>changedonehanded</code> then changes <code>equipped</code> to true for the newly equipped weapon, which fires its <code>changedequipped</code> script, and adds \"draw your sword\" or whatever to the <code>equipactions</code> list.</p>\n<p>Then control returns to the equip command/varb, which prints out the list (using <code>FormatList</code> to add commas and the word \"and\" between items as necessary). Basically giving a one-sentence description of all each item that was unequipped or equipped.</p>\n<p>In the case of a two-handed weapon (like the warhammer in my example), the equip verb might look more like:</p>\n<pre><code>          if (this.equipped) {\n            msg (\"You're already holding your \" + this.alias + \".\")\n          }\n          else {\n            player.equipactions = NewStringList()\n            // This line is optional; it just makes the output a little nicer\n            player.shield = null\n            player.onehanded = this\n            player.shield = this\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\n          }\n</code></pre>\n<p>and the <code>changedequipped</code> would have a little extra logic to make sure it's unequipped from both slots (so that if it's automatically removed by equipping a one-hand sword, the shield slot is now free as well):</p>\n<pre><code>          if (this.equipped) {\n            list add (player.equipactions, \"shoulder your \" + this.alias)\n          }\n          else {\n            if (player.onehanded = this) player.onehanded = null\n            if (player.shield = this) player.shield = null\n            list add (player.equipactions, \"grip your \" + this.alias + \" in both hands\")\n          }\n</code></pre>\n<blockquote>\n<p>I get this for a response.</p>\n</blockquote>\n<p>Not sure what to make of that… possibly oldvalue is <code>null</code>? (I've not checked that). Added a check to the script earlier in this post.</p>\n\n",
      "PostDate": "2020-05-05T23:48:14.208645Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6d76f60c-9930-4159-8f8e-874969419c51",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No matter whether the sword is equipped (true or false) the response is\r\n**EDIT:** I took out the scripts and reloaded them. I may have it working now. I will respond later.\r\n\r\n>> equip sword\r\nYou shoulder your sword.\r\n\r\nWhere my example script is now.\r\n**EDITED**\r\nnewest one\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Equipping system\">\r\n    <gameid>250ece70-5ca1-437b-b317-46d4c28e5221</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2020</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <changedonehanded type=\"script\">\r\n        if (IsDefined (\"oldvalue\")) {\r\n          if (not oldvalue = null) {\r\n            oldvalue.equipped = false\r\n          }\r\n        }\r\n        if (not this.onehanded = null) {\r\n          this.onehanded.equipped = true\r\n        }\r\n      </changedonehanded>\r\n      <equipactions type=\"stringlist\" />\r\n      <object name=\"small_sword\">\r\n        <inherit name=\"editor_object\" />\r\n        <equip type=\"script\">\r\n          if (this.equipped) {\r\n            msg (\"You're already holding your \" + this.alias + \".\")\r\n          }\r\n          else {\r\n            player.equipactions = NewStringList()\r\n            player.onehanded = this\r\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\r\n          }\r\n        </equip>\r\n        <changedequipped type=\"script\">\r\n          if (this.equipped) {\r\n            list add (player.equipactions, \"raise your \" + this.alias)\r\n            // adjust player's combat values if necessary\r\n          }\r\n          else {\r\n            list add (player.equipactions, \"put away your \" + this.alias)\r\n            // adjust player's combat values if necessary\r\n          }\r\n        </changedequipped>\r\n        <alias>sword</alias>\r\n        <equipped type=\"boolean\">false</equipped>\r\n        <one_handed />\r\n        <listalias>Sword</listalias>\r\n        <price type=\"int\">3</price>\r\n        <volume type=\"int\">2</volume>\r\n        <damage>5d2</damage>\r\n        <orignalalias>Sword</orignalalias>\r\n        <take />\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>equip</property>\r\n    <pattern>equip</pattern>\r\n    <defaultexpression>\"You can't equip \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>No matter whether the sword is equipped (true or false) the response is<br>\n<strong>EDIT:</strong> I took out the scripts and reloaded them. I may have it working now. I will respond later.</p>\n<blockquote>\n<blockquote>\n<p>equip sword<br>\nYou shoulder your sword.</p>\n</blockquote>\n</blockquote>\n<p>Where my example script is now.<br>\n<strong>EDITED</strong><br>\nnewest one</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Equipping system\"&gt;\n    &lt;gameid&gt;250ece70-5ca1-437b-b317-46d4c28e5221&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2020&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;changedonehanded type=\"script\"&gt;\n        if (IsDefined (\"oldvalue\")) {\n          if (not oldvalue = null) {\n            oldvalue.equipped = false\n          }\n        }\n        if (not this.onehanded = null) {\n          this.onehanded.equipped = true\n        }\n      &lt;/changedonehanded&gt;\n      &lt;equipactions type=\"stringlist\" /&gt;\n      &lt;object name=\"small_sword\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;equip type=\"script\"&gt;\n          if (this.equipped) {\n            msg (\"You're already holding your \" + this.alias + \".\")\n          }\n          else {\n            player.equipactions = NewStringList()\n            player.onehanded = this\n            msg (\"You \" + FormatList (player.equipactions, \", \", \"and\", \"can't do that\") + \".\")\n          }\n        &lt;/equip&gt;\n        &lt;changedequipped type=\"script\"&gt;\n          if (this.equipped) {\n            list add (player.equipactions, \"raise your \" + this.alias)\n            // adjust player's combat values if necessary\n          }\n          else {\n            list add (player.equipactions, \"put away your \" + this.alias)\n            // adjust player's combat values if necessary\n          }\n        &lt;/changedequipped&gt;\n        &lt;alias&gt;sword&lt;/alias&gt;\n        &lt;equipped type=\"boolean\"&gt;false&lt;/equipped&gt;\n        &lt;one_handed /&gt;\n        &lt;listalias&gt;Sword&lt;/listalias&gt;\n        &lt;price type=\"int\"&gt;3&lt;/price&gt;\n        &lt;volume type=\"int\"&gt;2&lt;/volume&gt;\n        &lt;damage&gt;5d2&lt;/damage&gt;\n        &lt;orignalalias&gt;Sword&lt;/orignalalias&gt;\n        &lt;take /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;equip&lt;/property&gt;\n    &lt;pattern&gt;equip&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't equip \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2020-05-06T00:32:22.8769944Z",
      "LastEditDate": "2020-05-06T02:30:35.9176308Z",
      "link": null
    },
    {
      "PostId": "fa2c5ec3-b3e3-4cc3-bc2e-e81d9a3357fb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I should be working, but my brain's stuck in code mode :-S\r\n\r\nNow thinking of a way to make it work for equipment that an NPC can equip… changing `player` to `object.parent` in a lot of cases. You'd have something like:\r\n```\r\n<function name=\"PrintEquipLine\" parameters=\"character\">\r\n  if (EndsWith (TypeOf (character, \"equipactions\"), \"list\")) {\r\n    if (ListCount (character.equipactions) > 0) {\r\n      msg (CapFirst (GetDisplayAlias (character) + \" \" +ProcessText (FormatList (character.equipactions, \", \", \", and \", \"\"), QuickParams (\"owner\", character)) + \".\")\r\n    }\r\n    character.equipactions = NewStringList()\r\n  }\r\n</function>\r\n\r\n<turnscript name=\"equip_actions\">\r\n  <enabled />\r\n  <script>\r\n    scope = ScopeVisible()\r\n    foreach (character, AllObjects()) {\r\n      if (EndsWith (TypeOf (character, \"equipactions\"), \"list\")) {\r\n        if (ListCount (character.equipactions) > 0) {\r\n          if (ListContains (scope, character)) {\r\n            PrintEquipLine (character)\r\n          }\r\n          else {\r\n            character.equipactions = NewStringList()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </script>\r\n</turnscript>\r\n```\r\n(so the string for equipping an item could be, for example, `\"{conjugate:owner:draw} {either owner=game.pov:your:a} shiny revolver\", \"{conjugate:owner:cock} it\"` … and any characters who equip/unequip items will be printed out at the end of the turn even if whatever script caused them to drop stuff doesn't do it directly)\r\n\r\nOh… I've used \"conjugate\" there.\r\nFrom my start script:\r\n```\r\nconj => {\r\n  args = Tsplit (section)\r\n  obj = ObjectForTextProcessor (ListItem (args, 1))\r\n  if (obj = null) {\r\n    obj = eval (ListItem (args, 1), ParamsForTextProcessor())\r\n  }\r\n  if (obj = null) {\r\n    game.textprocessorcommandresult = \"@@@open@@@\" + ProcessTextSection (section, data) + \"@@@close@@@\"\r\n  }\r\n  else {\r\n    game.textprocessorcommandresult = Conjugate (obj, ListItem (args, 2))\r\n  }\r\n}\r\ngame.textprocessorcommands = game.textprocessorcommands\r\ndictionart add (game.textprocessorcommands, \"conjugate:\", conj)\r\n```\r\n(so you can use `{conjugate:objectname:draw}` to get \"draw\" or \"draws\" depending on the object)\r\n\r\nYeah… I'm looking at a system that started out as a nice idea because it's simpler, and started adding little bits of complexity so it can do nice things.\r\n\r\nAnd then I'm looking at a way to automate the \"Would you like to unequip your sword, or your shield?\" thing for the torch.\r\nThe way I'm thinking about it, the \"light\" verb would then look like:\r\n```\r\nTryEquipObject (player, this, true) {\r\n  this.switchedon = true\r\n  this.burned = true\r\n  EnableTurnScript (torchturnscript)\r\n}\r\n```\r\n(because I'd be putting stuff like changing inventoryverbs and listalias into the torch's `changedswitchedon` script)\r\n\r\nMy brain wants to type out the workings of TryEquipObject while it's in my mind… but I know I really need to get back to the soul-destroying slog of marketing.",
      "EditableFormat": "markdown",
      "HTML": "<p>I should be working, but my brain's stuck in code mode :-S</p>\n<p>Now thinking of a way to make it work for equipment that an NPC can equip… changing <code>player</code> to <code>object.parent</code> in a lot of cases. You'd have something like:</p>\n<pre><code>&lt;function name=\"PrintEquipLine\" parameters=\"character\"&gt;\n  if (EndsWith (TypeOf (character, \"equipactions\"), \"list\")) {\n    if (ListCount (character.equipactions) &gt; 0) {\n      msg (CapFirst (GetDisplayAlias (character) + \" \" +ProcessText (FormatList (character.equipactions, \", \", \", and \", \"\"), QuickParams (\"owner\", character)) + \".\")\n    }\n    character.equipactions = NewStringList()\n  }\n&lt;/function&gt;\n\n&lt;turnscript name=\"equip_actions\"&gt;\n  &lt;enabled /&gt;\n  &lt;script&gt;\n    scope = ScopeVisible()\n    foreach (character, AllObjects()) {\n      if (EndsWith (TypeOf (character, \"equipactions\"), \"list\")) {\n        if (ListCount (character.equipactions) &gt; 0) {\n          if (ListContains (scope, character)) {\n            PrintEquipLine (character)\n          }\n          else {\n            character.equipactions = NewStringList()\n          }\n        }\n      }\n    }\n  &lt;/script&gt;\n&lt;/turnscript&gt;\n</code></pre>\n<p>(so the string for equipping an item could be, for example, <code>\"{conjugate:owner:draw} {either owner=game.pov:your:a} shiny revolver\", \"{conjugate:owner:cock} it\"</code> … and any characters who equip/unequip items will be printed out at the end of the turn even if whatever script caused them to drop stuff doesn't do it directly)</p>\n<p>Oh… I've used \"conjugate\" there.<br>\nFrom my start script:</p>\n<pre><code>conj =&gt; {\n  args = Tsplit (section)\n  obj = ObjectForTextProcessor (ListItem (args, 1))\n  if (obj = null) {\n    obj = eval (ListItem (args, 1), ParamsForTextProcessor())\n  }\n  if (obj = null) {\n    game.textprocessorcommandresult = \"@@@open@@@\" + ProcessTextSection (section, data) + \"@@@close@@@\"\n  }\n  else {\n    game.textprocessorcommandresult = Conjugate (obj, ListItem (args, 2))\n  }\n}\ngame.textprocessorcommands = game.textprocessorcommands\ndictionart add (game.textprocessorcommands, \"conjugate:\", conj)\n</code></pre>\n<p>(so you can use <code>{conjugate:objectname:draw}</code> to get \"draw\" or \"draws\" depending on the object)</p>\n<p>Yeah… I'm looking at a system that started out as a nice idea because it's simpler, and started adding little bits of complexity so it can do nice things.</p>\n<p>And then I'm looking at a way to automate the \"Would you like to unequip your sword, or your shield?\" thing for the torch.<br>\nThe way I'm thinking about it, the \"light\" verb would then look like:</p>\n<pre><code>TryEquipObject (player, this, true) {\n  this.switchedon = true\n  this.burned = true\n  EnableTurnScript (torchturnscript)\n}\n</code></pre>\n<p>(because I'd be putting stuff like changing inventoryverbs and listalias into the torch's <code>changedswitchedon</code> script)</p>\n<p>My brain wants to type out the workings of TryEquipObject while it's in my mind… but I know I really need to get back to the soul-destroying slog of marketing.</p>\n\n",
      "PostDate": "2020-05-06T20:29:58.7009083Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "712bb36a-daa0-4980-b25d-2bbcc9821937",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": " Instead of using switchedon = true or false, I have been recently using lightsource = true or false. Is it not the direct route to what causes a room to be seen? I have not tested it yet.\r\n\r\nYou are leagues ahead of me and have no near future thoughts that I could implement such scripts successfully. It is the reason I can not use many libraries. When a small change is needed to be made I can not follow the chain of scripts back up the line to ensure the success of that change. I steal small pieces that I do understand and make such wonderfully clunky coded scripts. I do, however, still gain the rush when something finally works.",
      "EditableFormat": "markdown",
      "HTML": "<p>Instead of using switchedon = true or false, I have been recently using lightsource = true or false. Is it not the direct route to what causes a room to be seen? I have not tested it yet.</p>\n<p>You are leagues ahead of me and have no near future thoughts that I could implement such scripts successfully. It is the reason I can not use many libraries. When a small change is needed to be made I can not follow the chain of scripts back up the line to ensure the success of that change. I steal small pieces that I do understand and make such wonderfully clunky coded scripts. I do, however, still gain the rush when something finally works.</p>\n\n",
      "PostDate": "2020-05-07T05:20:23.9900558Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71226a5a-6f9e-4070-884e-1d1585efbb50",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I have been recently using lightsource = true or false\r\n\r\nThat makes the code simpler :) One less thing to change.\r\nI did notice in your code that you often seem to have a few different ways of storing the same information. So cutting down on them might make the code more manageable.\r\n\r\nAnd where it's useful to have the same info in multiple places (like `player.shield` and `someShieldObject.equipped`), it can be a lot simpler to use changescripts so that changing either of them changes the other. Then your other scripts can just worry about whichever is easiest for them :)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I have been recently using lightsource = true or false</p>\n</blockquote>\n<p>That makes the code simpler :) One less thing to change.<br>\nI did notice in your code that you often seem to have a few different ways of storing the same information. So cutting down on them might make the code more manageable.</p>\n<p>And where it's useful to have the same info in multiple places (like <code>player.shield</code> and <code>someShieldObject.equipped</code>), it can be a lot simpler to use changescripts so that changing either of them changes the other. Then your other scripts can just worry about whichever is easiest for them :)</p>\n\n",
      "PostDate": "2020-05-07T09:09:27.2457742Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "02708f68-b7a7-4c29-ab37-3ef77836e99b",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In some cases, I need several ways to store the same information. As an example, Using the \"originalalias\". When an item such as a torch that is not a weapon but can be equipped in the same attribute as weapons and does not have the same (equipped) tag after it in the inventory pane, but (lit)(unlit)(dimmer)(dimming)(burned out). I have given these items an \"orignalalias\" to refer to when I what to go back to adjust the alias, while using the same EquipFuction as a shield or weapon. It is a process I built and will/may change but at the time I was only trying to build a workable script. I can go back and tweak later.\r\n\r\nLet's call it a necessity of ignorance...If I wanted to discuss a dog with a German but was ignorant of the German language I may,  instead of referring its breed for a clearer understanding, just call it a \"hund\".  Weak metaphor but I hope you get my drift.\r\n\r\nThere are so many steps I have to look up here on the forums, I have to finagle a few steps to get some kind of structure. ",
      "EditableFormat": "markdown",
      "HTML": "<p>In some cases, I need several ways to store the same information. As an example, Using the \"originalalias\". When an item such as a torch that is not a weapon but can be equipped in the same attribute as weapons and does not have the same (equipped) tag after it in the inventory pane, but (lit)(unlit)(dimmer)(dimming)(burned out). I have given these items an \"orignalalias\" to refer to when I what to go back to adjust the alias, while using the same EquipFuction as a shield or weapon. It is a process I built and will/may change but at the time I was only trying to build a workable script. I can go back and tweak later.</p>\n<p>Let's call it a necessity of ignorance...If I wanted to discuss a dog with a German but was ignorant of the German language I may,  instead of referring its breed for a clearer understanding, just call it a \"hund\".  Weak metaphor but I hope you get my drift.</p>\n<p>There are so many steps I have to look up here on the forums, I have to finagle a few steps to get some kind of structure.</p>\n\n",
      "PostDate": "2020-05-08T01:43:06.1010775Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
