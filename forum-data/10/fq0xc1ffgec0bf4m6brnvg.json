{
  "Topic": {
    "TopicId": "fq0xc1ffgec0bf4m6brnvg",
    "ForumId": "10",
    "Title": "Referencing a Target Enemy's Attributes / Children (w/ Inherited Object Type) During Damage Calculation",
    "LastUpdated": "2018-09-13T09:15:31.1388279Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "85c90a3e-9bc8-4056-bdae-1328b80fa689",
      "UserId": 314849,
      "Username": "only3a3test",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cf2033b1a0dabd7c3fd8b228c3b3eede?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "First, some context: I am new to combat, so my decisions might seem a little wacky. I created the game attribute **truerandom** when I needed a crutch random value. This is being used to determine a player's *chance of a critical hit* and a player's *variance in damage*. It also contains the attribute **combat** with all of the options for combat, which are going to be *Normal, Weapon, Ability,* and *Spell*. I'd like to get through Normal attacks before I tackle the rest.\r\n\r\nI created an object type for all enemies because I want to set the foundation for all later enemies, for which there is going to be a system in place to randomize encounters. All enemies have the attribute **damageset** which is a value that my script will edit while calculating: *the player's STR (and, later, weapon) modifiers, whether or not the hit an enemy receives is critical, the player's variance in damage,* and *the damage reduced by the armor an enemy is wearing*. The player's attribute **STR** determines their damage output, and is added to the \"damageset,\" whereas the **armor** rating of the target's clothing is subtracted from the \"damageset\" value. At the end of all the calculations, the enemy's **health** will be subtracted by their modified \"damageset\" value.\r\n\r\nYou can see all this at work below. As you can tell, referencing an enemy's attribute is becoming a challenge for me because it is an object type. I made the following code the result of the verb *Attack* on an enemy:\r\n\r\n```\r\nShowMenu (\"<b>Attack <font color=#6b3ed6>\" + this.alias + \"</font></b> with:</b>\", game.combat, true) {\r\n  if (result = \"Normal\") {\r\n    game.truerandom = GetRandomInt(1,30)\r\n    if (game.truerandom = 30) {\r\n      msg (\"It's a <b><font color =\\\"darkred\\\">CRITICAL</font></b> hit!\")\r\n      game.truerandom = GetRandomInt(-2,2)\r\n      this.damageset = player.STR + game.truerandom\r\n      foreach (p, GetDirectChildren(this)) {\r\n        if (GetBoolean(p, \"worn\")) {\r\n          this.damageset = this.damageset - ( p.armor / 2 )\r\n        }\r\n      }\r\n      this.health = this.health - this.damageset * 2\r\n      if (this.damageset = 0) {\r\n        msg (this.alias + \" takes no damage!\")\r\n      }\r\n      else {\r\n        msg (this.alias + \" takes \" + this.damageset * 2 + \" damage!\")\r\n      }\r\n    }\r\n    else {\r\n      game.truerandom = GetRandomInt(-2,2)\r\n      this.damageset = player.STR + game.truerandom\r\n      foreach (p, GetDirectChildren(this)) {\r\n        if (GetBoolean(p, \"worn\")) {\r\n          this.damageset = this.damageset - ( p.armor / 2 )\r\n          if (this.damageset < 0) {\r\n            this.damageset = 0\r\n          }\r\n        }\r\n      }\r\n      this.health = this.health - this.damageset\r\n      if (this.damageset = 0) {\r\n        msg (this.alias + \" takes no damage!\")\r\n      }\r\n      else {\r\n        msg (this.alias + \" takes \" + this.damageset + \" damage!\")\r\n      }\r\n    }\r\n    msg (this.alias + \" has <font color=#cc3300>\" + this.health + \"</font> HP.\")\r\n  }\r\n```\r\nThe error I am running into is a simple one: ```Error running script: Error compiling expression 'this': Unknown object or variable 'this'```\r\n\r\nI know the problem is with using *this* (because the CRITICAL text appears before the error message), but I'm unsure of what else to use to reference the *children target that the player selected to attack*. I anticipated that, since my code is inherited by all enemies as a verb, using *this* to refer to them would make sense, thus calling their damageset attribute. I also understand that I'm going to need a better way to get the children of that enemy than *GetDirectChildren(this)*, for similar reasons.\r\n\r\nStill learning the language! Thanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>First, some context: I am new to combat, so my decisions might seem a little wacky. I created the game attribute <strong>truerandom</strong> when I needed a crutch random value. This is being used to determine a player's <em>chance of a critical hit</em> and a player's <em>variance in damage</em>. It also contains the attribute <strong>combat</strong> with all of the options for combat, which are going to be <em>Normal, Weapon, Ability,</em> and <em>Spell</em>. I'd like to get through Normal attacks before I tackle the rest.</p>\n<p>I created an object type for all enemies because I want to set the foundation for all later enemies, for which there is going to be a system in place to randomize encounters. All enemies have the attribute <strong>damageset</strong> which is a value that my script will edit while calculating: <em>the player's STR (and, later, weapon) modifiers, whether or not the hit an enemy receives is critical, the player's variance in damage,</em> and <em>the damage reduced by the armor an enemy is wearing</em>. The player's attribute <strong>STR</strong> determines their damage output, and is added to the \"damageset,\" whereas the <strong>armor</strong> rating of the target's clothing is subtracted from the \"damageset\" value. At the end of all the calculations, the enemy's <strong>health</strong> will be subtracted by their modified \"damageset\" value.</p>\n<p>You can see all this at work below. As you can tell, referencing an enemy's attribute is becoming a challenge for me because it is an object type. I made the following code the result of the verb <em>Attack</em> on an enemy:</p>\n<pre><code>ShowMenu (\"&lt;b&gt;Attack &lt;font color=#6b3ed6&gt;\" + this.alias + \"&lt;/font&gt;&lt;/b&gt; with:&lt;/b&gt;\", game.combat, true) {\n  if (result = \"Normal\") {\n    game.truerandom = GetRandomInt(1,30)\n    if (game.truerandom = 30) {\n      msg (\"It's a &lt;b&gt;&lt;font color =\\\"darkred\\\"&gt;CRITICAL&lt;/font&gt;&lt;/b&gt; hit!\")\n      game.truerandom = GetRandomInt(-2,2)\n      this.damageset = player.STR + game.truerandom\n      foreach (p, GetDirectChildren(this)) {\n        if (GetBoolean(p, \"worn\")) {\n          this.damageset = this.damageset - ( p.armor / 2 )\n        }\n      }\n      this.health = this.health - this.damageset * 2\n      if (this.damageset = 0) {\n        msg (this.alias + \" takes no damage!\")\n      }\n      else {\n        msg (this.alias + \" takes \" + this.damageset * 2 + \" damage!\")\n      }\n    }\n    else {\n      game.truerandom = GetRandomInt(-2,2)\n      this.damageset = player.STR + game.truerandom\n      foreach (p, GetDirectChildren(this)) {\n        if (GetBoolean(p, \"worn\")) {\n          this.damageset = this.damageset - ( p.armor / 2 )\n          if (this.damageset &lt; 0) {\n            this.damageset = 0\n          }\n        }\n      }\n      this.health = this.health - this.damageset\n      if (this.damageset = 0) {\n        msg (this.alias + \" takes no damage!\")\n      }\n      else {\n        msg (this.alias + \" takes \" + this.damageset + \" damage!\")\n      }\n    }\n    msg (this.alias + \" has &lt;font color=#cc3300&gt;\" + this.health + \"&lt;/font&gt; HP.\")\n  }\n</code></pre>\n<p>The error I am running into is a simple one: <code>Error running script: Error compiling expression 'this': Unknown object or variable 'this'</code></p>\n<p>I know the problem is with using <em>this</em> (because the CRITICAL text appears before the error message), but I'm unsure of what else to use to reference the <em>children target that the player selected to attack</em>. I anticipated that, since my code is inherited by all enemies as a verb, using <em>this</em> to refer to them would make sense, thus calling their damageset attribute. I also understand that I'm going to need a better way to get the children of that enemy than <em>GetDirectChildren(this)</em>, for similar reasons.</p>\n<p>Still learning the language! Thanks in advance!</p>\n\n",
      "PostDate": "2018-09-13T09:15:31.1388279Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "022aed16-c797-4f44-92c8-2b2ee7cd3379",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel can get into much more accurate detail, but the simpliest fix-method is simply to store 'this' (which is storing the direct parent Object of the scripting) within an Attribute (as Attributes bypass all of these scope issues/problems, lol), an example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    invoke (example_object_1.example_script_attribute)\r\n    invoke (example_object_2.example_script_attribute)\r\n\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"unknown_object\">\r\n</object>\r\n\r\n<object name=\"data_object\">\r\n\r\n  <attr name=\"example_object_attribute\" type=\"object\">unknown_object</attr>\r\n\r\n</object>\r\n\r\n<object name=\"example_object_1\">\r\n\r\n  <inherit name=\"example_type\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">rectangle</attr>\r\n\r\n</object>\r\n\r\n<object name=\"example_object_2\">\r\n\r\n  <inherit name=\"example_type\" />\r\n\r\n  <attr name=\"alias\" type=\"string\">triangle</attr>\r\n\r\n</object>\r\n\r\n<type name=\"example_type\">\r\n\r\n  <attr name=\"example_script_attribute\" type=\"script\">\r\n\r\n    data_object.example_object_attribute = this\r\n\r\n    show menu (\"blah\", Split (\"blah;blah;blah\", \";\"), false) {\r\n      msg (data_object.example_object_attribute.name)\r\n      msg (data_object.example_object_attribute.alias)\r\n    }\r\n\r\n  </attr>\r\n\r\n</type>\r\n\r\n// ----------------------------\r\n\r\noutput:\r\n\r\nexample_object_1\r\nrectangle\r\nexample_object_2\r\ntriangle\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel can get into much more accurate detail, but the simpliest fix-method is simply to store 'this' (which is storing the direct parent Object of the scripting) within an Attribute (as Attributes bypass all of these scope issues/problems, lol), an example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    invoke (example_object_1.example_script_attribute)\n    invoke (example_object_2.example_script_attribute)\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"unknown_object\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"data_object\"&gt;\n\n  &lt;attr name=\"example_object_attribute\" type=\"object\"&gt;unknown_object&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"example_object_1\"&gt;\n\n  &lt;inherit name=\"example_type\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;rectangle&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"example_object_2\"&gt;\n\n  &lt;inherit name=\"example_type\" /&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;triangle&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;type name=\"example_type\"&gt;\n\n  &lt;attr name=\"example_script_attribute\" type=\"script\"&gt;\n\n    data_object.example_object_attribute = this\n\n    show menu (\"blah\", Split (\"blah;blah;blah\", \";\"), false) {\n      msg (data_object.example_object_attribute.name)\n      msg (data_object.example_object_attribute.alias)\n    }\n\n  &lt;/attr&gt;\n\n&lt;/type&gt;\n\n// ----------------------------\n\noutput:\n\nexample_object_1\nrectangle\nexample_object_2\ntriangle\n</code></pre>\n\n",
      "PostDate": "2018-09-13T11:25:03.6759285Z",
      "LastEditDate": "2018-09-13T11:43:59.8328094Z",
      "link": null
    },
    {
      "PostId": "3cc417d6-8f7c-4a51-b7dd-d542b883524c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n-----------------------------\r\n\r\nhowever... you don't want every single (err multiple: however many objects you give the object type to) Object(s) to have this combat script... which is what you're doing by putting it into an Object Type....\r\n\r\nrather you should just have a single combat script belonging within a single Function or within a single Object's Script Attribute + Delegate, and pass in the Objects and whatever data you need into it... no reason for redundant combat code held within every object, you only need one instance of the combat code, and provide it with the needed data (ie: for this battle, the 'orc' monster, for another battle, the 'dragon' monster).\r\n\r\n---------------\r\n\r\nfor example...\r\n\r\n---------\r\n\r\nusing delegates + Object's Script Attributes:\r\n\r\n```\r\n<delegate name=\"combat_delegate\" parameters=\"enemy_object_parameter\" />\r\n\r\n<game name=\"example_game\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    rundelegate (combat_object, \"combat_script_attribute\", orc)\r\n\r\n    on ready {\r\n\r\n      player.life = 999 // to restore your life for the dragon battle below, lol\r\n\r\n      rundelegate (combat_object, \"combat_script_attribute\", dragon)\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"life\" type=\"int\">999</attr>\r\n\r\n</object>\r\n\r\n<object name=\"orc\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"damage\" type=\"int\">10</attr>\r\n\r\n</object>\r\n\r\n<object name=\"dragon\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"damage\" type=\"int\">100</attr>\r\n\r\n</object>\r\n\r\n<object name=\"combat_object\">\r\n\r\n  <attr name=\"combat_script_attribute\" type=\"combat_delegate\">\r\n\r\n    <![CDATA[\r\n\r\n      if (player.life > 0) {\r\n        player.life = player.life - enemy_object_parameter.damage\r\n        msg (player.life)\r\n        rundelegate (combat_object, \"combat_script_attribute\", enemy_object_parameter)\r\n      } else {\r\n        msg (\"You were killed by the \" + enemy_object_parameter.name + \"!\")\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n</object>\r\n```\r\n\r\n----------\r\n\r\nusing Functions:\r\n\r\n```\r\n<game name=\"example_game\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    combat_function (orc)\r\n\r\n    on ready {\r\n\r\n      player.life = 999 // to restore your life for the dragon battle below, lol\r\n\r\n      combat_function (dragon)\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n</game>\r\n\r\n<object name=\"room\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"life\" type=\"int\">999</attr>\r\n\r\n</object>\r\n\r\n<object name=\"orc\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"damage\" type=\"int\">10</attr>\r\n\r\n</object>\r\n\r\n<object name=\"dragon\">\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"damage\" type=\"int\">100</attr>\r\n\r\n</object>\r\n\r\n<function name=\"combat_function\" parameters=\"enemy_object_parameter\">\r\n\r\n  <![CDATA[\r\n\r\n    if (player.life > 0) {\r\n      player.life = player.life - enemy_object_parameter.damage\r\n      msg (player.life)\r\n      combat_function (enemy_object_parameter)\r\n    } else {\r\n      msg (\"You were killed by the \" + enemy_object_parameter.name + \"!\")\r\n    }\r\n\r\n  ]]>\r\n\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>however... you don't want every single (err multiple: however many objects you give the object type to) Object(s) to have this combat script... which is what you're doing by putting it into an Object Type....</p>\n<p>rather you should just have a single combat script belonging within a single Function or within a single Object's Script Attribute + Delegate, and pass in the Objects and whatever data you need into it... no reason for redundant combat code held within every object, you only need one instance of the combat code, and provide it with the needed data (ie: for this battle, the 'orc' monster, for another battle, the 'dragon' monster).</p>\n<hr>\n<p>for example...</p>\n<hr>\n<p>using delegates + Object's Script Attributes:</p>\n<pre><code>&lt;delegate name=\"combat_delegate\" parameters=\"enemy_object_parameter\" /&gt;\n\n&lt;game name=\"example_game\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    rundelegate (combat_object, \"combat_script_attribute\", orc)\n\n    on ready {\n\n      player.life = 999 // to restore your life for the dragon battle below, lol\n\n      rundelegate (combat_object, \"combat_script_attribute\", dragon)\n\n    }\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"orc\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"damage\" type=\"int\"&gt;10&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"dragon\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"damage\" type=\"int\"&gt;100&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"combat_object\"&gt;\n\n  &lt;attr name=\"combat_script_attribute\" type=\"combat_delegate\"&gt;\n\n    &lt;![CDATA[\n\n      if (player.life &gt; 0) {\n        player.life = player.life - enemy_object_parameter.damage\n        msg (player.life)\n        rundelegate (combat_object, \"combat_script_attribute\", enemy_object_parameter)\n      } else {\n        msg (\"You were killed by the \" + enemy_object_parameter.name + \"!\")\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>using Functions:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    combat_function (orc)\n\n    on ready {\n\n      player.life = 999 // to restore your life for the dragon battle below, lol\n\n      combat_function (dragon)\n\n    }\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"orc\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"damage\" type=\"int\"&gt;10&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"dragon\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"damage\" type=\"int\"&gt;100&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;function name=\"combat_function\" parameters=\"enemy_object_parameter\"&gt;\n\n  &lt;![CDATA[\n\n    if (player.life &gt; 0) {\n      player.life = player.life - enemy_object_parameter.damage\n      msg (player.life)\n      combat_function (enemy_object_parameter)\n    } else {\n      msg (\"You were killed by the \" + enemy_object_parameter.name + \"!\")\n    }\n\n  ]]&gt;\n\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-09-13T11:50:24.7145491Z",
      "LastEditDate": "2018-09-13T12:30:04.3539924Z",
      "link": null
    },
    {
      "PostId": "04125db3-635a-427a-851a-cbbe493e24da",
      "UserId": 314849,
      "Username": "only3a3test",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cf2033b1a0dabd7c3fd8b228c3b3eede?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's awesome. I understand your point about redundancy so I'm fixing all that now. I am using functions.\r\n\r\nI wasn't aware attributes could be used like that because I thought it might cause some kind of read error (namely that _data_object.example_object_attribute.name_ ~ _data_object.example_object_attribute.alias_ tidbit).\r\n\r\nUpdate: all is going well so far after implementing those changes. I managed to bypass the scope issues caused by ShowMenu in my function by setting the variable to the targeted enemy before invoking the menu, then calling another function with all the code depending on the player's decision. Thanks for all the recommendations!",
      "EditableFormat": "markdown",
      "HTML": "<p>That's awesome. I understand your point about redundancy so I'm fixing all that now. I am using functions.</p>\n<p>I wasn't aware attributes could be used like that because I thought it might cause some kind of read error (namely that <em>data_object.example_object_attribute.name</em> ~ <em>data_object.example_object_attribute.alias</em> tidbit).</p>\n<p>Update: all is going well so far after implementing those changes. I managed to bypass the scope issues caused by ShowMenu in my function by setting the variable to the targeted enemy before invoking the menu, then calling another function with all the code depending on the player's decision. Thanks for all the recommendations!</p>\n\n",
      "PostDate": "2018-09-16T05:23:35.8679681Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8d274b11-128a-486d-9927-158cdf97848f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In case it makes it easier to understand why the scope issues exist, try thinking of ShowMenu as a function to \"create some links that will run this script when clicked\". The links are displayed, the function that called ShowMenu ends, and all of that function's variables disappear. All that remains is a list of links on the player's screen, and a script that will be run when they're clicked. So that script can't use any variables except `result`, and any variables created within that script.",
      "EditableFormat": "markdown",
      "HTML": "<p>In case it makes it easier to understand why the scope issues exist, try thinking of ShowMenu as a function to \"create some links that will run this script when clicked\". The links are displayed, the function that called ShowMenu ends, and all of that function's variables disappear. All that remains is a list of links on the player's screen, and a script that will be run when they're clicked. So that script can't use any variables except <code>result</code>, and any variables created within that script.</p>\n\n",
      "PostDate": "2018-09-16T10:40:45.5669707Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
