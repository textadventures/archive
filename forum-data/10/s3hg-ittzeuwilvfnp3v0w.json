{
  "Topic": {
    "TopicId": "s3hg-ittzeuwilvfnp3v0w",
    "ForumId": "10",
    "Title": "Back to RPGLib again",
    "LastUpdated": "2021-09-16T19:02:35.3828921Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "5dc07e5d-1d34-4953-a374-3ba182dd95db",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello world!\r\n\r\nThe last few days, there's been a structure spinning around in my head. It's probably a little too heavyweight for most games, but I think I've seen an interesting way for an RPG-style battle system to work. This is inspired by the RPGLib I tried writing years ago, but streamlines and with some of the issues worked out.\r\n\r\nWould appreciate any feedback :)\r\n\r\nBasically, rather than `ResolveNextName` actually running a command, it just stuffs the command and all the resolved parameters for it into a list. Each entry in the event list basically holds an object (the player in this case), an action (the command), and a bunch of parameters.\r\n\r\nIn this system, `FinishTurn` loops over any active NPCs, and they also return an action, which is added to the same list.\r\n\r\nThe list of actions then goes through a number of phases. The actual list of phases is flexible. For the test game I'm building, I've got:\r\n* turn_start\r\n* choose_action (for NPCs)\r\n* choose_target (for NPCs)\r\n* determine_hit\r\n* determine_damage\r\n* apply_damage\r\n* battle_consequences (check if the character is dead)\r\n* npc_movement\r\n* output_phase (display the results)\r\n* turn_end\r\n* sync\r\n\r\nIf a command can be used during combat, it can have scripts which are run on any of those phases, as well as metaphases (such as \"after_apply_damage\"). Status effects (represented by turnscripts) are also grouped into the same phases. So, for example, if you have a magical item that automatically heals you from an attack that would have been fatal, it could run on the phase \"after_apply_damage\" to heal you again if your health is below zero; so it happens before the consequences phase.\r\n\r\nEquipment/clothes can also have scripts that trigger in a given phase when you're wearing them.\r\n\r\nBasically, this means that a status effect or magical item can trigger at any point during the turn, between other effects.\r\n\r\n(Note: 'classic' turnscripts that don't have the extra flags will fire during the \"sync\" phase, mimicking the behaviour of Quest 5.7.x. This lets you use them for stuff like a stacking system, graphical inventory, disabling object links for objects that have gone out of scope, and so on. These things don't need to be run more than once regardless of how many actions the player does.)\r\n\r\nIn the event that no combat is in progress, the sequence would instead be the simpler:\r\n* turn_start\r\n* choose_action\r\n* npc_movement\r\n* script\r\n* turn_end\r\n* sync\r\n\r\nThis means that NPCs who aren't in the current room can still move around, and the player can do non-combat actions, but \"every turn\" turnscripts still run. This also means that ongoing status effects can still run, but it's easy for them to behave differently depending if it's a combat turn or not.\r\n\r\nSo like when the player attacks an NPC, the engine checks for a `determine_hit` script to decide if the attack connects or not. It will look for a `determine_hit` script on the player, any status effects that currently apply too them, the command, and the `battlesystem` object (which basically does the default, by looking if the command has an accuracy modifier and rolling dice). And it looks for `wield_determine_hit` scripts on the player's weapon (if applicable), `equip_determine_hit` on their equipment, and `target_determine_hit` on the orc (and any status effects on it).\r\n\r\nMost of these scripts won't be there. But because they're checked for, making a status effect that kicks in at any of these points is really simple. And because the \"default\" calculations (for when a specific weapon doesn't do anything weird) are all in the `battlesystem` object, it's easy to adapt for different rules. You can have a simple battle system, or a more complex one, and have more or fewer phases as necessary. The only hardcoded ones in the library will be `script` (for non-combat actions), `turn_end` (for legacy turnscripts), and `sync` (which is a little bit special because it ignores SuppressTurnScripts())\r\n\r\nSo… what do  you think?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello world!</p>\n<p>The last few days, there's been a structure spinning around in my head. It's probably a little too heavyweight for most games, but I think I've seen an interesting way for an RPG-style battle system to work. This is inspired by the RPGLib I tried writing years ago, but streamlines and with some of the issues worked out.</p>\n<p>Would appreciate any feedback :)</p>\n<p>Basically, rather than <code>ResolveNextName</code> actually running a command, it just stuffs the command and all the resolved parameters for it into a list. Each entry in the event list basically holds an object (the player in this case), an action (the command), and a bunch of parameters.</p>\n<p>In this system, <code>FinishTurn</code> loops over any active NPCs, and they also return an action, which is added to the same list.</p>\n<p>The list of actions then goes through a number of phases. The actual list of phases is flexible. For the test game I'm building, I've got:</p>\n<ul>\n<li>turn_start</li>\n<li>choose_action (for NPCs)</li>\n<li>choose_target (for NPCs)</li>\n<li>determine_hit</li>\n<li>determine_damage</li>\n<li>apply_damage</li>\n<li>battle_consequences (check if the character is dead)</li>\n<li>npc_movement</li>\n<li>output_phase (display the results)</li>\n<li>turn_end</li>\n<li>sync</li>\n</ul>\n<p>If a command can be used during combat, it can have scripts which are run on any of those phases, as well as metaphases (such as \"after_apply_damage\"). Status effects (represented by turnscripts) are also grouped into the same phases. So, for example, if you have a magical item that automatically heals you from an attack that would have been fatal, it could run on the phase \"after_apply_damage\" to heal you again if your health is below zero; so it happens before the consequences phase.</p>\n<p>Equipment/clothes can also have scripts that trigger in a given phase when you're wearing them.</p>\n<p>Basically, this means that a status effect or magical item can trigger at any point during the turn, between other effects.</p>\n<p>(Note: 'classic' turnscripts that don't have the extra flags will fire during the \"sync\" phase, mimicking the behaviour of Quest 5.7.x. This lets you use them for stuff like a stacking system, graphical inventory, disabling object links for objects that have gone out of scope, and so on. These things don't need to be run more than once regardless of how many actions the player does.)</p>\n<p>In the event that no combat is in progress, the sequence would instead be the simpler:</p>\n<ul>\n<li>turn_start</li>\n<li>choose_action</li>\n<li>npc_movement</li>\n<li>script</li>\n<li>turn_end</li>\n<li>sync</li>\n</ul>\n<p>This means that NPCs who aren't in the current room can still move around, and the player can do non-combat actions, but \"every turn\" turnscripts still run. This also means that ongoing status effects can still run, but it's easy for them to behave differently depending if it's a combat turn or not.</p>\n<p>So like when the player attacks an NPC, the engine checks for a <code>determine_hit</code> script to decide if the attack connects or not. It will look for a <code>determine_hit</code> script on the player, any status effects that currently apply too them, the command, and the <code>battlesystem</code> object (which basically does the default, by looking if the command has an accuracy modifier and rolling dice). And it looks for <code>wield_determine_hit</code> scripts on the player's weapon (if applicable), <code>equip_determine_hit</code> on their equipment, and <code>target_determine_hit</code> on the orc (and any status effects on it).</p>\n<p>Most of these scripts won't be there. But because they're checked for, making a status effect that kicks in at any of these points is really simple. And because the \"default\" calculations (for when a specific weapon doesn't do anything weird) are all in the <code>battlesystem</code> object, it's easy to adapt for different rules. You can have a simple battle system, or a more complex one, and have more or fewer phases as necessary. The only hardcoded ones in the library will be <code>script</code> (for non-combat actions), <code>turn_end</code> (for legacy turnscripts), and <code>sync</code> (which is a little bit special because it ignores SuppressTurnScripts())</p>\n<p>So… what do  you think?</p>\n\n",
      "PostDate": "2021-09-16T19:02:35.3828921Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8bb90224-3f49-4c5c-bb7c-27499d5757ee",
      "UserId": 924,
      "Username": "Pertex",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4cc1e52f99452e841ecf4cbee9eadde9?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sounds exciting, I am curious about the test game",
      "EditableFormat": "markdown",
      "HTML": "<p>Sounds exciting, I am curious about the test game</p>\n\n",
      "PostDate": "2021-09-20T11:42:57.2939342Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bc2cd1c6-b991-4cd0-a022-6aef30a8d3f5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The test game that I'm looking at was actually a remake of an existing game; which has something of a cult following, but clearly wasn't developed by someone with programming experience; and it seems that some of the reviews are left by people who have problems with the web player (especially the save/load system) as a result.\r\n\r\nIt looks like I might not be able to do that now, as the official webpage for the game is a massive forum thread, and it seems that on page ninety-something, someone else has taken over as the official maintainer. Wouldn't want to step on their toes.\r\n\r\nStill, I might try to get my RPGlib built.",
      "EditableFormat": "markdown",
      "HTML": "<p>The test game that I'm looking at was actually a remake of an existing game; which has something of a cult following, but clearly wasn't developed by someone with programming experience; and it seems that some of the reviews are left by people who have problems with the web player (especially the save/load system) as a result.</p>\n<p>It looks like I might not be able to do that now, as the official webpage for the game is a massive forum thread, and it seems that on page ninety-something, someone else has taken over as the official maintainer. Wouldn't want to step on their toes.</p>\n<p>Still, I might try to get my RPGlib built.</p>\n\n",
      "PostDate": "2021-09-22T11:14:15.3947693Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
