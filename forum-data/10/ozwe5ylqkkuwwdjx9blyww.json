{
  "Topic": {
    "TopicId": "ozwe5ylqkkuwwdjx9blyww",
    "ForumId": "10",
    "Title": "Do I Have A Memory Leak? (Solved)",
    "LastUpdated": "2019-01-19T15:53:39.1638999Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e5db6866-ae8a-444a-a8b7-a674d9a06d17",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So in my code, I do a lot of cloning objects. Like, you take your spaceship to a system, and it clones a bunch of CelestialBodyBase into the SpaceRoom (First changing the alias, so like CelestialBodyBase.alias=\"Sol\", =\"Earth\", etc) to get the different stars and planets. When you go to a different system, I use FilterByAttribute to clean the old clones out.\r\n```\r\nforeach (SolarBody, FilterByAttribute(GetDirectChildren(SpaceRoom), \"prototype\", CelestialBodyBase)) {\r\n RemoveObject (SolarBody)\r\n```\r\nAnd I've thought this is all fine. But recently I opened the Debugger while testing one of the boss fights, and realized there was a TON of clones with their data still in the Debugger. CelestialBodyBase1, CelestialBodyBase2, etc. And those residual objects don't have a parent attribute, so I can only guess that 'Remove' merely 'removes' their parent attribute and puts them into nowhere, while not actually DELETING the object itself.\r\n\r\nSo my question is, how can I actually truly permanently delete these residual objects? Or is it not an issue and the Debugger is just being silly?",
      "EditableFormat": "markdown",
      "HTML": "<p>So in my code, I do a lot of cloning objects. Like, you take your spaceship to a system, and it clones a bunch of CelestialBodyBase into the SpaceRoom (First changing the alias, so like CelestialBodyBase.alias=\"Sol\", =\"Earth\", etc) to get the different stars and planets. When you go to a different system, I use FilterByAttribute to clean the old clones out.</p>\n<pre><code>foreach (SolarBody, FilterByAttribute(GetDirectChildren(SpaceRoom), \"prototype\", CelestialBodyBase)) {\n RemoveObject (SolarBody)\n</code></pre>\n<p>And I've thought this is all fine. But recently I opened the Debugger while testing one of the boss fights, and realized there was a TON of clones with their data still in the Debugger. CelestialBodyBase1, CelestialBodyBase2, etc. And those residual objects don't have a parent attribute, so I can only guess that 'Remove' merely 'removes' their parent attribute and puts them into nowhere, while not actually DELETING the object itself.</p>\n<p>So my question is, how can I actually truly permanently delete these residual objects? Or is it not an issue and the Debugger is just being silly?</p>\n\n",
      "PostDate": "2019-01-19T15:53:39.1638999Z",
      "LastEditDate": "2019-01-19T21:56:48.8384916Z",
      "link": null
    },
    {
      "PostId": "091b270c-986a-4840-85e9-9451e798a94b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the 'RemoveObject (NAME_OF_OBJECT)' merely sets the Object's 'parent' Object (reference/pointer) to 'null' (the direct parent is the 'ASL' GAME OBJECT):\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/corelibrary/removeobject.html\r\n\r\nthe 'destroy (NAME_OF_OBJECT_AS_A_STRING_DATA_TYPE)' destroys the Object (I'm not sure how memory/pointers/etc actually are done/handle in quest's internal coding though):\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/destroy.html\r\n\r\n--------\r\n\r\n```\r\ncreate (\"npc\")\r\n// npc.parent = null\r\n\r\nnpc.parent = room\r\n\r\nRemoveObject (npc)\r\n// npc.parent = null\r\n\r\ndestroy (npc.name) // npc.name = \"npc\"\r\n// or:\r\n// destroy (\"npc\")\r\n// or:\r\n// string_variable = npc.name // or: string_variable = \"npc\"\r\n// destroy (string_variable)\r\n```\r\n\r\n--------------\r\n\r\nI think mrangel/pixie explained that quest safeguards, via:\r\n\r\nevery created Object (a pointer/reference to its address) is stored within a master/internal Objectlist (forgot the name of it) of the quest engine, so even if you mess anything up, its still in that master Objectlist and will/can be properly handled by quest engine",
      "EditableFormat": "markdown",
      "HTML": "<p>the 'RemoveObject (NAME_OF_OBJECT)' merely sets the Object's 'parent' Object (reference/pointer) to 'null' (the direct parent is the 'ASL' GAME OBJECT):</p>\n<p>http://docs.textadventures.co.uk/quest/functions/corelibrary/removeobject.html</p>\n<p>the 'destroy (NAME_OF_OBJECT_AS_A_STRING_DATA_TYPE)' destroys the Object (I'm not sure how memory/pointers/etc actually are done/handle in quest's internal coding though):</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/destroy.html</p>\n<hr>\n<pre><code>create (\"npc\")\n// npc.parent = null\n\nnpc.parent = room\n\nRemoveObject (npc)\n// npc.parent = null\n\ndestroy (npc.name) // npc.name = \"npc\"\n// or:\n// destroy (\"npc\")\n// or:\n// string_variable = npc.name // or: string_variable = \"npc\"\n// destroy (string_variable)\n</code></pre>\n<hr>\n<p>I think mrangel/pixie explained that quest safeguards, via:</p>\n<p>every created Object (a pointer/reference to its address) is stored within a master/internal Objectlist (forgot the name of it) of the quest engine, so even if you mess anything up, its still in that master Objectlist and will/can be properly handled by quest engine</p>\n\n",
      "PostDate": "2019-01-19T18:41:24.4794705Z",
      "LastEditDate": "2019-01-19T18:54:48.3849757Z",
      "link": null
    },
    {
      "PostId": "11997a39-ba0e-4732-b884-536ca3672c9b",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you! My debugger's looking nice and clean with this fix. A simple\r\n```\r\ndestroy (ObjectIWantGone.name)\r\n```\r\nor\r\n```\r\ndestroy (this.name)\r\n```\r\nas the situation warrants.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you! My debugger's looking nice and clean with this fix. A simple</p>\n<pre><code>destroy (ObjectIWantGone.name)\n</code></pre>\n<p>or</p>\n<pre><code>destroy (this.name)\n</code></pre>\n<p>as the situation warrants.</p>\n\n",
      "PostDate": "2019-01-19T21:56:30.8404275Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
