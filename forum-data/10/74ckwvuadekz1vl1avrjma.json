{
  "Topic": {
    "TopicId": "74ckwvuadekz1vl1avrjma",
    "ForumId": "10",
    "Title": "Error concerning exits",
    "LastUpdated": "2024-09-21T20:54:30.1607614Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "795b538a-b906-4e55-9803-56906abbce61",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Heyall\r\n\r\nI've encountered a rather peculiar error.\r\nMy code uses two _while_ functions. The first one is for finding exits and setting them to visible again and the second one is for picking 3 random exits and setting exit.visible to false.\r\nNow when I use the while separately they work, but when I add them together it returns errors. The errors are either object not set to an instance of an object or can't set the object to element.\r\n\r\nFirst While:\r\n<details>\r\n\r\n```\r\nwhile (ListCount(z) > 0) {\r\n  this.exi = PickOneObject (z)\r\n  list remove (z, this.exi)\r\n  this.exi.visible = true\r\n}\r\n```\r\n\r\n</details>\r\nIt works!\r\n\r\n\r\n\r\nSecond While:\r\n<details>\r\n\r\n```\r\nwhile (run forest.repli < 3) {\r\n  this.nexi = PickOneObject (c)\r\n  list remove (c, this.nexi)\r\n  run forest.repli = run forest.repli + 1\r\n  this.nexi.visible = false\r\n}\r\n```\r\n\r\n</details>\r\nIt works!\r\n\r\nThe whole code:\r\n<details>\r\n\r\n```\r\nrun forest.repli = 0\r\nrun forest.matlist = run forest.matlistbase\r\n// run forest.exitlistbase is an objectlist of the room exits created in start script. I did it this way because //ScopeExitsForRoom(room) won't show exits that are not visible.\r\nz = run forest.exitlistbase\r\nc = run forest.exitlistbase\r\nd = run forest.exitlistbase\r\nwhile (ListCount(z) > 0) {\r\n  this.exi = PickOneObject (z)\r\n  list remove (z, this.exi)\r\n  this.exi.visible = true\r\n}\r\nwhile (run forest.repli < 3) {\r\n  this.nexi = PickOneObject (c)\r\n  list remove (c, this.nexi)\r\n  run forest.repli = run forest.repli + 1\r\n  this.nexi.visible = false\r\n}\r\n```\r\n\r\n</details>\r\n\r\nError running script: Error compiling expression 'this.nexi': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'\r\n\r\n\r\nAlso using ScopeExitsForRoom(room) won't consider invisible exits. So I had to make an objectlist of the exits in the start script of the game object and then make exits invisible by using code instead of UI.\r\nIs there a way to scope exits that also include invisible exits for a particular room?",
      "EditableFormat": "markdown",
      "HTML": "<p>Heyall</p>\n<p>I've encountered a rather peculiar error.<br>\nMy code uses two <em>while</em> functions. The first one is for finding exits and setting them to visible again and the second one is for picking 3 random exits and setting exit.visible to false.<br>\nNow when I use the while separately they work, but when I add them together it returns errors. The errors are either object not set to an instance of an object or can't set the object to element.</p>\n<p>First While:</p>\n<details>\n<pre><code>while (ListCount(z) &gt; 0) {\n  this.exi = PickOneObject (z)\n  list remove (z, this.exi)\n  this.exi.visible = true\n}\n</code></pre>\n</details>\nIt works!\n<p>Second While:</p>\n<details>\n<pre><code>while (run forest.repli &lt; 3) {\n  this.nexi = PickOneObject (c)\n  list remove (c, this.nexi)\n  run forest.repli = run forest.repli + 1\n  this.nexi.visible = false\n}\n</code></pre>\n</details>\nIt works!\n<p>The whole code:</p>\n<details>\n<pre><code>run forest.repli = 0\nrun forest.matlist = run forest.matlistbase\n// run forest.exitlistbase is an objectlist of the room exits created in start script. I did it this way because //ScopeExitsForRoom(room) won't show exits that are not visible.\nz = run forest.exitlistbase\nc = run forest.exitlistbase\nd = run forest.exitlistbase\nwhile (ListCount(z) &gt; 0) {\n  this.exi = PickOneObject (z)\n  list remove (z, this.exi)\n  this.exi.visible = true\n}\nwhile (run forest.repli &lt; 3) {\n  this.nexi = PickOneObject (c)\n  list remove (c, this.nexi)\n  run forest.repli = run forest.repli + 1\n  this.nexi.visible = false\n}\n</code></pre>\n</details>\n<p>Error running script: Error compiling expression 'this.nexi': RootExpressionElement: Cannot convert type 'Object' to expression result of 'Element'</p>\n<p>Also using ScopeExitsForRoom(room) won't consider invisible exits. So I had to make an objectlist of the exits in the start script of the game object and then make exits invisible by using code instead of UI.<br>\nIs there a way to scope exits that also include invisible exits for a particular room?</p>\n\n",
      "PostDate": "2024-09-21T20:54:30.1607614Z",
      "LastEditDate": "2024-09-21T20:58:05.8998771Z",
      "link": null
    },
    {
      "PostId": "74552eb4-cc11-49f9-9352-4f063fd29f86",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem is that lists are passed by reference. So your variables `z`, `c`, and `d` are references to the same list in memory.\r\n\r\nYour first loop removes all the elements from the list `z`, which also removes the elements from `run forest.exitlistbase`, and from its other list references `c` and `d`.\r\n\r\nThen the second loop runs, and you try to do `this.nexi = PickOneObject (c)`, which sets `this.nexi` to `null` because list `c` doesn't contain any objects. And you get a weird and confusing error as a result.\r\n\r\nWhy does the first loop need to remove the elements from the list? Wouldn't it be simpler to make it:\r\n```\r\nforeach (exi, z) {\r\n  exi.visible = true\r\n}\r\n```\r\nwhich does the same thing, except it doesn't remove all the elements from the list (and also doesn't cause a load of unnecessary processor load generating random numbers so it can make the objects visible in a random order)",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem is that lists are passed by reference. So your variables <code>z</code>, <code>c</code>, and <code>d</code> are references to the same list in memory.</p>\n<p>Your first loop removes all the elements from the list <code>z</code>, which also removes the elements from <code>run forest.exitlistbase</code>, and from its other list references <code>c</code> and <code>d</code>.</p>\n<p>Then the second loop runs, and you try to do <code>this.nexi = PickOneObject (c)</code>, which sets <code>this.nexi</code> to <code>null</code> because list <code>c</code> doesn't contain any objects. And you get a weird and confusing error as a result.</p>\n<p>Why does the first loop need to remove the elements from the list? Wouldn't it be simpler to make it:</p>\n<pre><code>foreach (exi, z) {\n  exi.visible = true\n}\n</code></pre>\n<p>which does the same thing, except it doesn't remove all the elements from the list (and also doesn't cause a load of unnecessary processor load generating random numbers so it can make the objects visible in a random order)</p>\n\n",
      "PostDate": "2024-09-21T22:38:58.0779942Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f7ee9352-5599-437d-bf09-9c6d4b1c52b7",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I see. Well that's weird. Why would it remove from run forest.exitlistbase? I thought it'd only remove from the z reference.\r\n\r\nWhat if instead of z, c and d, I make new run forest attributes? This way it would store the object list.\r\n\r\nYour code is much simpler, I hadn't noticed.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I see. Well that's weird. Why would it remove from run forest.exitlistbase? I thought it'd only remove from the z reference.</p>\n<p>What if instead of z, c and d, I make new run forest attributes? This way it would store the object list.</p>\n<p>Your code is much simpler, I hadn't noticed.</p>\n\n",
      "PostDate": "2024-09-22T06:38:56.8401002Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "44420381-9bfd-4444-a385-a70aafe9d4ca",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I see. Well that's weird. Why would it remove from run forest.exitlistbase? I thought it'd only remove from the z reference.\r\n\r\nLists and dictionaries are passed by reference; in this case, `z` is simply a reference to `run forest.exitlistbase`, not a copy of the list. It's one of the quirks you have to get used to if you use them a lot.\r\nThis is how functions can change a list which is passed to them - which is sometimes a very useful feature.\r\n\r\n> What if instead of z, c and d, I make new run forest attributes? This way it would store the object list.\r\n\r\nThat's right. If the part to the left of the `=` is an object attribute, it will create a new list, copying the contents.\r\n\r\nThat's similar to why in some of the core code, you have lines like `object.inventoryverbs = object.inventoryverbs` - forcing the engine to create a new list, separate from other references to it.\r\n\r\n> Your code is much simpler, I hadn't noticed.\r\n\r\nThe `foreach` method is the quickest way to do something to every member of  a list. Where possible, you should use that rather than removing elements from the list.\r\n\r\nLooking at your full code, it looks like you are making all the exits visible, then making three of them not visible again. In this case, it might also make more sense to do it in the opposite order - make three of them notvisible, and then make *the rest* visible, so that the notvisible ones don't need to be changed twice.\r\n\r\nI also note from your comment that you tried `ScopeExitsForRoom` but found that it doesn't find non-visible exits. In this case, you could use <code>FilterByAttribute (AllExits (), \"parent\", <em style=\"color: blue\">Name of room</em>)</code> to get all exits in the room.\r\n\r\nSo your code would be something like:\r\n```\r\nexitlist = FilterByAttribute (AllExits (), \"parent\", run forest)\r\nfor (i, 1, 3) {\r\n  exi = PickOneObject (exitlist)\r\n  exi.visible = false\r\n}\r\nforeach (exi, exitlist) {\r\n  exi.visible = true\r\n}\r\n```\r\n(assuming that `run forest` is the room)\r\nGet a list of exits in the room; pick three of them at random and set their `visible` to false; and then loop over the ones that are still in the list making `visible` true.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I see. Well that's weird. Why would it remove from run forest.exitlistbase? I thought it'd only remove from the z reference.</p>\n</blockquote>\n<p>Lists and dictionaries are passed by reference; in this case, <code>z</code> is simply a reference to <code>run forest.exitlistbase</code>, not a copy of the list. It's one of the quirks you have to get used to if you use them a lot.<br>\nThis is how functions can change a list which is passed to them - which is sometimes a very useful feature.</p>\n<blockquote>\n<p>What if instead of z, c and d, I make new run forest attributes? This way it would store the object list.</p>\n</blockquote>\n<p>That's right. If the part to the left of the <code>=</code> is an object attribute, it will create a new list, copying the contents.</p>\n<p>That's similar to why in some of the core code, you have lines like <code>object.inventoryverbs = object.inventoryverbs</code> - forcing the engine to create a new list, separate from other references to it.</p>\n<blockquote>\n<p>Your code is much simpler, I hadn't noticed.</p>\n</blockquote>\n<p>The <code>foreach</code> method is the quickest way to do something to every member of  a list. Where possible, you should use that rather than removing elements from the list.</p>\n<p>Looking at your full code, it looks like you are making all the exits visible, then making three of them not visible again. In this case, it might also make more sense to do it in the opposite order - make three of them notvisible, and then make <em>the rest</em> visible, so that the notvisible ones don't need to be changed twice.</p>\n<p>I also note from your comment that you tried <code>ScopeExitsForRoom</code> but found that it doesn't find non-visible exits. In this case, you could use <code>FilterByAttribute (AllExits (), \"parent\", <em style=\"color: blue\">Name of room</em>)</code> to get all exits in the room.</p>\n<p>So your code would be something like:</p>\n<pre><code>exitlist = FilterByAttribute (AllExits (), \"parent\", run forest)\nfor (i, 1, 3) {\n  exi = PickOneObject (exitlist)\n  exi.visible = false\n}\nforeach (exi, exitlist) {\n  exi.visible = true\n}\n</code></pre>\n<p>(assuming that <code>run forest</code> is the room)<br>\nGet a list of exits in the room; pick three of them at random and set their <code>visible</code> to false; and then loop over the ones that are still in the list making <code>visible</code> true.</p>\n\n",
      "PostDate": "2024-09-22T10:53:31.4524222Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "caf43717-fa9a-4159-88c6-25889555d020",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"My God, I get it now...\" Thanks for the reference tip.\r\n\r\nYour Scope using filterbyattribute is very nice too. I had first tried using it, but instead with <code>FilterByType</code> and use type \"exit\", but I guess this function doesn't work for exits so I abandoned the idea. The filtering by \"parent\" fixes my problem.\r\n\r\nThe reason I make the exits visible first is because this function is a loop; the player uses the exit which leads back to the same room over and over and the function fires again. Since in the last run, 3 of the exits are invisible, I need them to be visible again first and then remove three of them.\r\nI used <code>While</code> in combination with <code>PickOneObject</code> because I want the three invisible exits to be random each time. I think the <code>FilterByAttribute</code> lists the exits in the same way each time. ",
      "EditableFormat": "markdown",
      "HTML": "<p>\"My God, I get it now...\" Thanks for the reference tip.</p>\n<p>Your Scope using filterbyattribute is very nice too. I had first tried using it, but instead with <code>FilterByType</code> and use type \"exit\", but I guess this function doesn't work for exits so I abandoned the idea. The filtering by \"parent\" fixes my problem.</p>\n<p>The reason I make the exits visible first is because this function is a loop; the player uses the exit which leads back to the same room over and over and the function fires again. Since in the last run, 3 of the exits are invisible, I need them to be visible again first and then remove three of them.<br>\nI used <code>While</code> in combination with <code>PickOneObject</code> because I want the three invisible exits to be random each time. I think the <code>FilterByAttribute</code> lists the exits in the same way each time.</p>\n\n",
      "PostDate": "2024-09-22T11:12:20.7515204Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8de4e87d-c2bd-40bd-92ff-c0ad223a2d36",
      "UserId": 652801,
      "Username": "Gng",
      "AvatarUrl": "https://i.imgur.com/w0pOzA9b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another question arises.\r\n\r\nI want the exits to have look attribute. It works fine but also I want to randomly assign each look with run forest attributes which are \"pond\" and \"river\" for example. These attributes are string that describe the scenery.\r\nThe this.matlist attribute is a string list containing \"pond\", \"river\" and other strings.\r\n\r\n```\r\nthis.matlist = this.matlistbase\r\nthis.zwar = ScopeExitsForRoom(run forest)\r\nforeach (exi, this.zwar) {\r\n  sti = PickOneString(this.matlist)\r\n  list remove (this.matlist, sti)\r\n  exi.look = this.sti\r\n}\r\n```\r\nError running script: Object reference not set to an instance of an object.\r\n\r\nI think the problem is that sti is string and this.sti won't accept strings. I don't know how to solve that.\r\nI  could make a stringlist of the description itself, but I just want to experiment with it and see if it's possible to di it this way.\r\n\r\nSOLVED: I can just use <code>GetAttribute</code>\r\n```\r\nthis.matlist = this.matlistbase\r\nthis.zwar = ScopeExitsForRoom(run forest)\r\nforeach (exi, this.zwar) {\r\n  sti = PickOneString(this.matlist)\r\n  list remove (this.matlist, sti)\r\n  pti = GetAttribute (run forest, sti)\r\n  exi.look = pti\r\n}\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Another question arises.</p>\n<p>I want the exits to have look attribute. It works fine but also I want to randomly assign each look with run forest attributes which are \"pond\" and \"river\" for example. These attributes are string that describe the scenery.<br>\nThe this.matlist attribute is a string list containing \"pond\", \"river\" and other strings.</p>\n<pre><code>this.matlist = this.matlistbase\nthis.zwar = ScopeExitsForRoom(run forest)\nforeach (exi, this.zwar) {\n  sti = PickOneString(this.matlist)\n  list remove (this.matlist, sti)\n  exi.look = this.sti\n}\n</code></pre>\n<p>Error running script: Object reference not set to an instance of an object.</p>\n<p>I think the problem is that sti is string and this.sti won't accept strings. I don't know how to solve that.<br>\nI  could make a stringlist of the description itself, but I just want to experiment with it and see if it's possible to di it this way.</p>\n<p>SOLVED: I can just use <code>GetAttribute</code></p>\n<pre><code>this.matlist = this.matlistbase\nthis.zwar = ScopeExitsForRoom(run forest)\nforeach (exi, this.zwar) {\n  sti = PickOneString(this.matlist)\n  list remove (this.matlist, sti)\n  pti = GetAttribute (run forest, sti)\n  exi.look = pti\n}\n\n</code></pre>\n\n",
      "PostDate": "2024-09-22T11:16:56.27109Z",
      "LastEditDate": "2024-09-22T11:45:18.2896192Z",
      "link": null
    }
  ]
}
