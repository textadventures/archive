{
  "Topic": {
    "TopicId": "lyxihkcrnkgl1v97f1ym8w",
    "ForumId": "10",
    "Title": "Placing things in scope [SOLVED]",
    "LastUpdated": "2018-01-27T02:38:19.4581731Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8525be89-328d-4f7c-bdb1-63fdda6fc0ec",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Before you read anything in this thread, you should familiarize yourself with the actual information.\r\n\r\n\r\nhttp://docs.textadventures.co.uk/quest/scopes.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/commands_with_unusual.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/advanced_scope.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/ui-callback.html\r\n\r\nhttp://docs.textadventures.co.uk/quest/advanced_game_script.html\r\n\r\n---\r\nI am attempting to wrap my mind around things which can be accomplished with scope.\r\n\r\n...but I'm not doing a very good job.\r\n\r\n---\r\nAnyone have any good examples?",
      "EditableFormat": "markdown",
      "HTML": "<p>Before you read anything in this thread, you should familiarize yourself with the actual information.</p>\n<p>http://docs.textadventures.co.uk/quest/scopes.html</p>\n<p>http://docs.textadventures.co.uk/quest/commands_with_unusual.html</p>\n<p>http://docs.textadventures.co.uk/quest/advanced_scope.html</p>\n<p>http://docs.textadventures.co.uk/quest/ui-callback.html</p>\n<p>http://docs.textadventures.co.uk/quest/advanced_game_script.html</p>\n<hr>\n<p>I am attempting to wrap my mind around things which can be accomplished with scope.</p>\n<p>...but I'm not doing a very good job.</p>\n<hr>\n<p>Anyone have any good examples?</p>\n\n",
      "PostDate": "2018-01-27T02:38:19.4581731Z",
      "LastEditDate": "2018-02-19T22:37:33.203265Z",
      "link": null
    },
    {
      "PostId": "d6e8aa4a-d4cf-4e19-9f58-6a6485166205",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In Quest 5.7.2 you can just put ```world``` in the Scope field of the command.",
      "EditableFormat": "markdown",
      "HTML": "<p>In Quest 5.7.2 you can just put <code>world</code> in the Scope field of the command.</p>\n\n",
      "PostDate": "2018-02-02T06:36:22.0543166Z",
      "LastEditDate": "2018-02-19T22:35:19.5907993Z",
      "link": null
    },
    {
      "PostId": "00356d99-1398-426a-84bd-91bcbb600bec",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "K.V., why do you talk to yourself?",
      "EditableFormat": "markdown",
      "HTML": "<p>K.V., why do you talk to yourself?</p>\n\n",
      "PostDate": "2018-02-02T20:13:11.100606Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2f1839d5-75dc-4cb2-9538-0541a07e55e2",
      "UserId": 341744,
      "Username": "adran06",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "XD I read this post when it first went up, and totally missed that",
      "EditableFormat": "markdown",
      "HTML": "<p>XD I read this post when it first went up, and totally missed that</p>\n\n",
      "PostDate": "2018-02-02T20:42:40.3678946Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "be09a230-b18f-4e98-91f4-104f4278e7c8",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "# POP QUIZ\r\n\r\n## Why do I talk to myself?\r\n\r\nA\\.  I am a crazy person.\r\n\r\nB\\.  I can come back to this thread months from now (after I've forgotten the details), and I'll be proud of myself for leaving good notes.\r\n\r\nC\\.  I was just trying to help you guys and gals.\r\n\r\nD\\.  No one else listens to me.\r\n\r\nE\\.  All of the above.",
      "EditableFormat": "markdown",
      "HTML": "<h1>POP QUIZ</h1>\n<h2>Why do I talk to myself?</h2>\n<p>A.  I am a crazy person.</p>\n<p>B.  I can come back to this thread months from now (after I've forgotten the details), and I'll be proud of myself for leaving good notes.</p>\n<p>C.  I was just trying to help you guys and gals.</p>\n<p>D.  No one else listens to me.</p>\n<p>E.  All of the above.</p>\n\n",
      "PostDate": "2018-02-02T20:58:36.7568925Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "78de514f-3ab3-468d-b831-290bab673d8d",
      "UserId": 341744,
      "Username": "adran06",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "E obviously. Mostly A, but definitely E.",
      "EditableFormat": "markdown",
      "HTML": "<p>E obviously. Mostly A, but definitely E.</p>\n\n",
      "PostDate": "2018-02-02T21:48:53.4631759Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91b4c4f1-fd13-4c85-872e-18f114e33214",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Absolutely right!\r\n\r\nYou get a star for the day!!!\r\n\r\n\r\n<span style='color:gold;font-size:375%;'>&#9734;</span>",
      "EditableFormat": "markdown",
      "HTML": "<p>Absolutely right!</p>\n<p>You get a star for the day!!!</p>\n<p><span style=\"color: gold; font-size: 375%\">â˜†</span></p>\n\n",
      "PostDate": "2018-02-02T23:20:33.0769243Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bf205e9e-7780-4822-b50f-a5487ff91e98",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "F. You are one of the few people smart enough to understand yourself.  : )",
      "EditableFormat": "markdown",
      "HTML": "<p>F. You are one of the few people smart enough to understand yourself.  : )</p>\n\n",
      "PostDate": "2018-02-05T12:34:58.6590803Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8bda7c28-91ab-4480-a4fb-64115a36bd5d",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "D.\r\n\r\nDefinitely D.  With a little A sprinkled in.",
      "EditableFormat": "markdown",
      "HTML": "<p>D.</p>\n<p>Definitely D.  With a little A sprinkled in.</p>\n\n",
      "PostDate": "2018-02-06T00:24:42.5062939Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b91ec876-64db-4253-89ac-e4a947f200dc",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I still can't do very much with scope...\r\n\r\n(To see what brought me back to this, click here: http://textadventures.co.uk/forum/quest/topic/egoik0xgukucht6dikjtrw/make-npc-companion-carry-objects#2295ed97-4720-49e5-8e5f-26448b8132c4)\r\n\r\n---\r\n### The Kindergarten Stuff\r\n\r\nI can make a game with a clock object, which does not exist in the game world (meaning it isn't in a room).\r\n\r\nI then enable 'Advanced features' on the game object, and put this in the Scope backdrop thingy:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/36359266-ce29ef04-14de-11e8-99c2-f09506374ddf.png)\r\n\r\n---\r\nNow I can interact with the clock, no matter what.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/36359273-eb6fa0a4-14de-11e8-8a9c-4d01b75243b9.png)\r\n\r\n\r\nThat clock is IN SCOPE!\r\n\r\n---\r\nExample game's code:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6623.30864-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Scoping Things Out\">\r\n    <gameid>0d1663e9-87f0-47b1-8ca1-49cb3cc40ec6</gameid>\r\n    <version>0.0.1</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <scopebackdrop type=\"script\">\r\n      list add (items, clockobject)\r\n    </scopebackdrop>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <object name=\"clock_object\">\r\n    <inherit name=\"editor_object\" />\r\n    <alias>clock</alias>\r\n    <look type=\"script\">\r\n      msg (\"You check the time.\")\r\n      // I have ClockLib.aslx included in all of my games in my Core.aslx file.\r\n      // This runs the 'clock' command's script, which just prints the clock message.\r\n      invoke (clock.script)\r\n    </look>\r\n    <listalias>clock (which reads {game.clock})</listalias>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n    </displayverbs>\r\n  </object>\r\n  <function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = ProcessText(obj.listalias)\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n\r\n---\r\n### First Grade Stuff\r\n\r\nIn a totally different example, I can place the direct children of Fred (who is carrying things) in scope in a command.\r\n\r\nIn this example, if you ASK FRED FOR [SOMETHING], the direct children of Fred are placed in scope before that command runs the main script, allowing you to interact with them.\r\n\r\n(You can enter FRED, INVENTORY to get a list of the things he's carrying in this example.  (It was a very rough draft, and I didn't write the code which listed his belongings in any other scripts, such as LOOK AT (or just in his alias string).))\r\n\r\nExample game's code:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Fred Carries Things\">\r\n    <gameid>803a9ebb-d611-4253-b116-698982bba250</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"Fred\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <givedict type=\"scriptdictionary\">\r\n        <item key=\"thingy\"><![CDATA[\r\n          msg (\"\\\"It's my favorite thingy,\\\" says Fred.  \\\"Take good care of it.\\\"<br/><br/>He hands it over.\")\r\n          AddToInventory (thingy)\r\n        ]]></item>\r\n        <item key=\"widget\"><![CDATA[\r\n          firsttime {\r\n            msg (\"\\\"This widget is mine,\\\" says Fred.  \\\"Go find your own.\\\"<br/>\")\r\n          }\r\n          otherwise {\r\n            msg (\"\\\"I've already told you,\\\" says Fred.  \\\"You can't have it.\\\"<br/>\")\r\n          }\r\n        ]]></item>\r\n      </givedict>\r\n      <giver />\r\n      <object name=\"widget\">\r\n        <inherit name=\"editor_object\" />\r\n      </object>\r\n      <object name=\"thingy\">\r\n        <inherit name=\"editor_object\" />\r\n      </object>\r\n      <object name=\"cane\">\r\n        <inherit name=\"editor_object\" />\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <command name=\"npc_inventory_cmd\">\r\n    <pattern>#object#, inventory;#object#, i;#object# inventory;#object# i</pattern>\r\n    <script>\r\n      PrintNpcInventory (object)\r\n    </script>\r\n  </command>\r\n  <command name=\"ask_npc_for_object_cmd\">\r\n    <pattern>ask #object1# for #object2#;#object1#, give me #object2#;get #object2# from #object1#;take #object2# from #object1#</pattern>\r\n    <scope>Fred</scope>\r\n    <script>\r\n      if (not HasAttribute(object1,\"giver\")) {\r\n        msg (CapFirst(object1.gender) + \" can't do that.\")\r\n      }\r\n      else {\r\n        if (DictionaryContains(object1.givedict,object2.name)) {\r\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\r\n        }\r\n        else {\r\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n  <function name=\"FormatNpcInventory\" parameters=\"npc\" type=\"string\"><![CDATA[\r\n    if (ListCount(GetDirectChildren(npc))<1) {\r\n      return (\"nothing\")\r\n    }\r\n    return (FormatObjectList(\"\", npc, \"and\", \"\"))\r\n  ]]></function>\r\n  <function name=\"PrintNpcInventory\" parameters=\"npc\">\r\n    msg (CapFirst(GetDisplayName(npc)) + \" is carrying \" + FormatNpcInventory(npc) + \".\")\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\n### After Dropping Out\r\n\r\nThat's right.  I dropped of scope school (although it was actually more of a \"learn by trial and error\" thing).\r\n\r\nI decided it would be much easier to alter the ```ScopeReachableNotHeldForRoom()``` function like so:\r\n```\r\n    <function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\">\r\n      <![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    if (HasScript(game, \"scopebackdrop\")) {\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n      do (game, \"scopebackdrop\", dict)\r\n    }\r\n    else if (HasAttribute(game, \"scopebackdrop\")) {\r\n      result = ListCombine (game.scopebackdrop, result)\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n    }\r\n    return (result)\r\n  ]]>\r\n    </function>\r\n\r\n```\r\n\r\n---\r\nThen, I added these two functions:\r\n```\r\n  <function name=\"AddToScope\" parameters=\"obj\">\r\n    if (not ListContains(game.scopebackdrop,obj)) {\r\n      list add (game.scopebackdrop, obj)\r\n    }\r\n  </function>\r\n```\r\n\r\n```\r\n  <function name=\"RemoveFromScope\" parameters=\"obj\">\r\n    if (ListContains(game.scopebackdrop,obj)) {\r\n      list remove (game.scopebackdrop, obj)\r\n    }\r\n  </function>\r\n```\r\n\r\n---\r\n## Now I can place things in scope (and vice-versa) at will.\r\n\r\n```AddToScope(object)```\r\n\r\n```RemoveFromScope(object)```\r\n\r\nThe same thing may be possible with the default functions (using variables and attributes, as well as object names), but I tried, and tried, and I could never get much of anything to work for me.  (This is probably due to ignorance on my part, but I digress.)\r\n\r\n---\r\nI've added those functions to the example game with the clock.\r\n\r\nThere are two test commands:\r\n\r\n```test1``` adds an object named \"dummy\" to scope, and ```test2``` removes it.\r\n\r\n---\r\nNOTE:  You can still make an object scenery if you don't want it displayed in the Places and Objects pane, but you would still like the player to be able to interact with it.\r\n\r\n\r\nRevised example game with clock:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6623.30864-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Scoping Things Out\">\r\n    <gameid>0d1663e9-87f0-47b1-8ca1-49cb3cc40ec6</gameid>\r\n    <version>0.0.1</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <scopebackdrop type=\"objectlist\">clock_object</scopebackdrop>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[{command:test1}<br/><br/>{command:test2}]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <object name=\"clock_object\">\r\n    <inherit name=\"editor_object\" />\r\n    <alias>clock</alias>\r\n    <listalias>clock (which reads {game.clock})</listalias>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n    </displayverbs>\r\n    <look type=\"script\">\r\n      msg (\"You check the time.\")\r\n      // I have ClockLib.aslx included in all of my games in my Core.aslx file.\r\n      // This runs the 'clock' command's script, which just prints the clock message.\r\n      invoke (clock.script)\r\n    </look>\r\n  </object>\r\n  <object name=\"dummy\">\r\n    <inherit name=\"editor_object\" />\r\n  </object>\r\n  <command name=\"scope_test1_cmd\">\r\n    <pattern>test1</pattern>\r\n    <script>\r\n      AddToScope (dummy)\r\n    </script>\r\n  </command>\r\n  <command name=\"scope_test2_cmd\">\r\n    <pattern>test2</pattern>\r\n    <script>\r\n      RemoveFromScope (dummy)\r\n    </script>\r\n  </command>\r\n  <function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\"><![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    if (HasAttribute(game, \"scopebackdrop\")) {\r\n      result = ListCombine (game.scopebackdrop, result)\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n    }\r\n    return (result)\r\n  ]]></function>\r\n  <function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\">\r\n    if (HasString(obj, \"listalias\")) {\r\n      result = ProcessText(obj.listalias)\r\n    }\r\n    else {\r\n      result = GetDisplayAlias(obj)\r\n    }\r\n    return (result)\r\n  </function>\r\n  <function name=\"AddToScope\" parameters=\"obj\">\r\n    if (not ListContains(game.scopebackdrop,obj)) {\r\n      list add (game.scopebackdrop, obj)\r\n    }\r\n  </function>\r\n  <function name=\"RemoveFromScope\" parameters=\"obj\">\r\n    if (ListContains(game.scopebackdrop,obj)) {\r\n      list remove (game.scopebackdrop, obj)\r\n    }\r\n  </function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I still can't do very much with scope...</p>\n<p>(To see what brought me back to this, click here: http://textadventures.co.uk/forum/quest/topic/egoik0xgukucht6dikjtrw/make-npc-companion-carry-objects#2295ed97-4720-49e5-8e5f-26448b8132c4)</p>\n<hr>\n<h3>The Kindergarten Stuff</h3>\n<p>I can make a game with a clock object, which does not exist in the game world (meaning it isn't in a room).</p>\n<p>I then enable 'Advanced features' on the game object, and put this in the Scope backdrop thingy:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/36359266-ce29ef04-14de-11e8-99c2-f09506374ddf.png\" alt=\"image\"></p>\n<hr>\n<p>Now I can interact with the clock, no matter what.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/36359273-eb6fa0a4-14de-11e8-8a9c-4d01b75243b9.png\" alt=\"image\"></p>\n<p>That clock is IN SCOPE!</p>\n<hr>\n<p>Example game's code:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6623.30864--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Scoping Things Out\"&gt;\n    &lt;gameid&gt;0d1663e9-87f0-47b1-8ca1-49cb3cc40ec6&lt;/gameid&gt;\n    &lt;version&gt;0.0.1&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;scopebackdrop type=\"script\"&gt;\n      list add (items, clockobject)\n    &lt;/scopebackdrop&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"clock_object\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;alias&gt;clock&lt;/alias&gt;\n    &lt;look type=\"script\"&gt;\n      msg (\"You check the time.\")\n      // I have ClockLib.aslx included in all of my games in my Core.aslx file.\n      // This runs the 'clock' command's script, which just prints the clock message.\n      invoke (clock.script)\n    &lt;/look&gt;\n    &lt;listalias&gt;clock (which reads {game.clock})&lt;/listalias&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Look at&lt;/value&gt;\n    &lt;/displayverbs&gt;\n  &lt;/object&gt;\n  &lt;function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\"&gt;\n    if (HasString(obj, \"listalias\")) {\n      result = ProcessText(obj.listalias)\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<h3>First Grade Stuff</h3>\n<p>In a totally different example, I can place the direct children of Fred (who is carrying things) in scope in a command.</p>\n<p>In this example, if you ASK FRED FOR [SOMETHING], the direct children of Fred are placed in scope before that command runs the main script, allowing you to interact with them.</p>\n<p>(You can enter FRED, INVENTORY to get a list of the things he's carrying in this example.  (It was a very rough draft, and I didn't write the code which listed his belongings in any other scripts, such as LOOK AT (or just in his alias string).))</p>\n<p>Example game's code:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Fred Carries Things\"&gt;\n    &lt;gameid&gt;803a9ebb-d611-4253-b116-698982bba250&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Fred\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;givedict type=\"scriptdictionary\"&gt;\n        &lt;item key=\"thingy\"&gt;&lt;![CDATA[\n          msg (\"\\\"It's my favorite thingy,\\\" says Fred.  \\\"Take good care of it.\\\"&lt;br/&gt;&lt;br/&gt;He hands it over.\")\n          AddToInventory (thingy)\n        ]]&gt;&lt;/item&gt;\n        &lt;item key=\"widget\"&gt;&lt;![CDATA[\n          firsttime {\n            msg (\"\\\"This widget is mine,\\\" says Fred.  \\\"Go find your own.\\\"&lt;br/&gt;\")\n          }\n          otherwise {\n            msg (\"\\\"I've already told you,\\\" says Fred.  \\\"You can't have it.\\\"&lt;br/&gt;\")\n          }\n        ]]&gt;&lt;/item&gt;\n      &lt;/givedict&gt;\n      &lt;giver /&gt;\n      &lt;object name=\"widget\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"thingy\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n      &lt;/object&gt;\n      &lt;object name=\"cane\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"npc_inventory_cmd\"&gt;\n    &lt;pattern&gt;#object#, inventory;#object#, i;#object# inventory;#object# i&lt;/pattern&gt;\n    &lt;script&gt;\n      PrintNpcInventory (object)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"ask_npc_for_object_cmd\"&gt;\n    &lt;pattern&gt;ask #object1# for #object2#;#object1#, give me #object2#;get #object2# from #object1#;take #object2# from #object1#&lt;/pattern&gt;\n    &lt;scope&gt;Fred&lt;/scope&gt;\n    &lt;script&gt;\n      if (not HasAttribute(object1,\"giver\")) {\n        msg (CapFirst(object1.gender) + \" can't do that.\")\n      }\n      else {\n        if (DictionaryContains(object1.givedict,object2.name)) {\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\n        }\n        else {\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"FormatNpcInventory\" parameters=\"npc\" type=\"string\"&gt;&lt;![CDATA[\n    if (ListCount(GetDirectChildren(npc))&lt;1) {\n      return (\"nothing\")\n    }\n    return (FormatObjectList(\"\", npc, \"and\", \"\"))\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"PrintNpcInventory\" parameters=\"npc\"&gt;\n    msg (CapFirst(GetDisplayName(npc)) + \" is carrying \" + FormatNpcInventory(npc) + \".\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<h3>After Dropping Out</h3>\n<p>That's right.  I dropped of scope school (although it was actually more of a \"learn by trial and error\" thing).</p>\n<p>I decided it would be much easier to alter the <code>ScopeReachableNotHeldForRoom()</code> function like so:</p>\n<pre><code>    &lt;function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\"&gt;\n      &lt;![CDATA[\n    result = NewObjectList()\n    foreach (obj, GetAllChildObjects(room)) {\n      if (ContainsReachable(room, obj) and obj &lt;&gt; game.pov and not Contains(game.pov, obj)) {\n        list add (result, obj)\n      }\n    }\n    if (HasScript(game, \"scopebackdrop\")) {\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n      do (game, \"scopebackdrop\", dict)\n    }\n    else if (HasAttribute(game, \"scopebackdrop\")) {\n      result = ListCombine (game.scopebackdrop, result)\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n    }\n    return (result)\n  ]]&gt;\n    &lt;/function&gt;\n\n</code></pre>\n<hr>\n<p>Then, I added these two functions:</p>\n<pre><code>  &lt;function name=\"AddToScope\" parameters=\"obj\"&gt;\n    if (not ListContains(game.scopebackdrop,obj)) {\n      list add (game.scopebackdrop, obj)\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"RemoveFromScope\" parameters=\"obj\"&gt;\n    if (ListContains(game.scopebackdrop,obj)) {\n      list remove (game.scopebackdrop, obj)\n    }\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<h2>Now I can place things in scope (and vice-versa) at will.</h2>\n<p><code>AddToScope(object)</code></p>\n<p><code>RemoveFromScope(object)</code></p>\n<p>The same thing may be possible with the default functions (using variables and attributes, as well as object names), but I tried, and tried, and I could never get much of anything to work for me.  (This is probably due to ignorance on my part, but I digress.)</p>\n<hr>\n<p>I've added those functions to the example game with the clock.</p>\n<p>There are two test commands:</p>\n<p><code>test1</code> adds an object named \"dummy\" to scope, and <code>test2</code> removes it.</p>\n<hr>\n<p>NOTE:  You can still make an object scenery if you don't want it displayed in the Places and Objects pane, but you would still like the player to be able to interact with it.</p>\n<p>Revised example game with clock:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6623.30864--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Scoping Things Out\"&gt;\n    &lt;gameid&gt;0d1663e9-87f0-47b1-8ca1-49cb3cc40ec6&lt;/gameid&gt;\n    &lt;version&gt;0.0.1&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;scopebackdrop type=\"objectlist\"&gt;clock_object&lt;/scopebackdrop&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[{command:test1}&lt;br/&gt;&lt;br/&gt;{command:test2}]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"clock_object\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;alias&gt;clock&lt;/alias&gt;\n    &lt;listalias&gt;clock (which reads {game.clock})&lt;/listalias&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Look at&lt;/value&gt;\n    &lt;/displayverbs&gt;\n    &lt;look type=\"script\"&gt;\n      msg (\"You check the time.\")\n      // I have ClockLib.aslx included in all of my games in my Core.aslx file.\n      // This runs the 'clock' command's script, which just prints the clock message.\n      invoke (clock.script)\n    &lt;/look&gt;\n  &lt;/object&gt;\n  &lt;object name=\"dummy\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n  &lt;/object&gt;\n  &lt;command name=\"scope_test1_cmd\"&gt;\n    &lt;pattern&gt;test1&lt;/pattern&gt;\n    &lt;script&gt;\n      AddToScope (dummy)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"scope_test2_cmd\"&gt;\n    &lt;pattern&gt;test2&lt;/pattern&gt;\n    &lt;script&gt;\n      RemoveFromScope (dummy)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\"&gt;&lt;![CDATA[\n    result = NewObjectList()\n    foreach (obj, GetAllChildObjects(room)) {\n      if (ContainsReachable(room, obj) and obj &lt;&gt; game.pov and not Contains(game.pov, obj)) {\n        list add (result, obj)\n      }\n    }\n    if (HasAttribute(game, \"scopebackdrop\")) {\n      result = ListCombine (game.scopebackdrop, result)\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n    }\n    return (result)\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"GetListDisplayAlias\" parameters=\"obj\" type=\"string\"&gt;\n    if (HasString(obj, \"listalias\")) {\n      result = ProcessText(obj.listalias)\n    }\n    else {\n      result = GetDisplayAlias(obj)\n    }\n    return (result)\n  &lt;/function&gt;\n  &lt;function name=\"AddToScope\" parameters=\"obj\"&gt;\n    if (not ListContains(game.scopebackdrop,obj)) {\n      list add (game.scopebackdrop, obj)\n    }\n  &lt;/function&gt;\n  &lt;function name=\"RemoveFromScope\" parameters=\"obj\"&gt;\n    if (ListContains(game.scopebackdrop,obj)) {\n      list remove (game.scopebackdrop, obj)\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n</details>",
      "PostDate": "2018-02-19T02:34:42.5780286Z",
      "LastEditDate": "2018-02-19T06:56:22.7666061Z",
      "link": null
    },
    {
      "PostId": "f86e7b0d-8eb3-4bf9-bedb-558807e29209",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to learn how to work with what is built into Quest instead of using my functions I modded and/or created (which you can find at the end of my previous post in this thread).\r\n\r\nI've read this numerous times:\r\n\r\nhttp://docs.textadventures.co.uk/quest/advanced_scope.html\r\n\r\n...but I still can't figure out how to make this work for the life of me:\r\n\r\n\r\n**EDIT:  See the next post for the correct version of this script.**\r\n\r\n<details>\r\n\r\n```\r\n  <command name=\"ask_npc_for_object_cmd\">\r\n    <pattern>ask #object1# for #object2#;#object1#, give me #object2#;get #object2# from #object1#;take #object2# from #object1#</pattern>\r\n    <scope>object2=object1</scope>\r\n    <script>\r\n      if (not HasAttribute(object1,\"giver\")) {\r\n        msg (CapFirst(object1.gender) + \" can't do that.\")\r\n      }\r\n      else {\r\n        if (DictionaryContains(object1.givedict,object2.name)) {\r\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\r\n        }\r\n        else {\r\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n```\r\n\r\n</details>\r\n\r\n---\r\n```giver``` is an attribute which only exists on NPCs who will give you things.\r\n\r\nEach \"giver\" has a script dictionary called ```givedict```, with an entry for each item they may be carrying.\r\n\r\n---\r\nPS\r\n\r\nFred is the only NPC in this game.\r\n\r\nI even changed ```object2=object1``` to ```object2=Fred```, but it didn't work.\r\n\r\nThe only thing that I've tried that worked (without altering any functions) was putting ```Fred``` in the scope field.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to learn how to work with what is built into Quest instead of using my functions I modded and/or created (which you can find at the end of my previous post in this thread).</p>\n<p>I've read this numerous times:</p>\n<p>http://docs.textadventures.co.uk/quest/advanced_scope.html</p>\n<p>...but I still can't figure out how to make this work for the life of me:</p>\n<p><strong>EDIT:  See the next post for the correct version of this script.</strong></p>\n<details>\n<pre><code>  &lt;command name=\"ask_npc_for_object_cmd\"&gt;\n    &lt;pattern&gt;ask #object1# for #object2#;#object1#, give me #object2#;get #object2# from #object1#;take #object2# from #object1#&lt;/pattern&gt;\n    &lt;scope&gt;object2=object1&lt;/scope&gt;\n    &lt;script&gt;\n      if (not HasAttribute(object1,\"giver\")) {\n        msg (CapFirst(object1.gender) + \" can't do that.\")\n      }\n      else {\n        if (DictionaryContains(object1.givedict,object2.name)) {\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\n        }\n        else {\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n</details>\n<hr>\n<p><code>giver</code> is an attribute which only exists on NPCs who will give you things.</p>\n<p>Each \"giver\" has a script dictionary called <code>givedict</code>, with an entry for each item they may be carrying.</p>\n<hr>\n<p>PS</p>\n<p>Fred is the only NPC in this game.</p>\n<p>I even changed <code>object2=object1</code> to <code>object2=Fred</code>, but it didn't work.</p>\n<p>The only thing that I've tried that worked (without altering any functions) was putting <code>Fred</code> in the scope field.</p>\n\n",
      "PostDate": "2018-02-19T03:39:53.9876724Z",
      "LastEditDate": "2018-02-19T22:40:54.8364558Z",
      "link": null
    },
    {
      "PostId": "404e41ec-ab6b-4373-acaa-d6fc2b5af88a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "UPDATE\r\n\r\nmrangel posted code that made this work for this command without altering any built-in functions.\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/egoik0xgukucht6dikjtrw/make-npc-companion-carry-objects#881090f2-ad95-4139-958a-5050fde36a8d\r\n\r\n\r\n<details>\r\n\r\n```\r\n  <command name=\"ask_npc_for_object_cmd\">\r\n    <pattern>ask #object1# for #object2#;#object1#, give me #object2#</pattern>\r\n    <scope>object1=room|object2=none</scope>\r\n    <changecommandscope type=\"script\">\r\n      if (variable = \"object1\") {\r\n        // for 'object1', remove all non-giver items from scope\r\n        // I'm assuming \"giver\" is a boolean attribute?\r\n        foreach (to_remove, FilterByNotAttribute (items, \"giver\", true)) {\r\n          list remove (items, to_remove)\r\n        }\r\n      }\r\n      else if (variable = \"object2\") {\r\n        giver = DictionaryItem(matched, \"object1\")\r\n        // get the first matched object (giver), and add its children to scope\r\n        foreach (o, GetDirectChildren(giver)) {\r\n          list add (items, o)\r\n        }\r\n      }\r\n    </changecommandscope>\r\n    <script>\r\n      if (not HasAttribute(object1,\"giver\")) {\r\n        msg (CapFirst(object1.gender) + \" can't do that.\")\r\n      }\r\n      else {\r\n        if (DictionaryContains(object1.givedict,object2.name)) {\r\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\r\n        }\r\n        else {\r\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\r\n        }\r\n      }\r\n    </script>\r\n  </command>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nI am very happy now that I have seen this work!!!\r\n\r\n---\r\nI still prefer my method, where I alter one function, add two small functions, then change ```game.scopebackdrop``` to an object list.  This way, I can place whatever I please in or out of scope in any given situation before any command is entered (or before anything else happens, for that matter).  Thus negating the need to doctor numerous commands, which would to lead to me forgetting to change the scope of a command or two, which would mean my game had bugs.\r\n\r\n---\r\nI'm sure Quest's default scripts are better than the hack I came up with in most instances, and it works for me either way now (thanks to mrangel and The Pixie), so I'm calling this one **[SOLVED]**.",
      "EditableFormat": "markdown",
      "HTML": "<p>UPDATE</p>\n<p>mrangel posted code that made this work for this command without altering any built-in functions.</p>\n<p>http://textadventures.co.uk/forum/quest/topic/egoik0xgukucht6dikjtrw/make-npc-companion-carry-objects#881090f2-ad95-4139-958a-5050fde36a8d</p>\n<details>\n<pre><code>  &lt;command name=\"ask_npc_for_object_cmd\"&gt;\n    &lt;pattern&gt;ask #object1# for #object2#;#object1#, give me #object2#&lt;/pattern&gt;\n    &lt;scope&gt;object1=room|object2=none&lt;/scope&gt;\n    &lt;changecommandscope type=\"script\"&gt;\n      if (variable = \"object1\") {\n        // for 'object1', remove all non-giver items from scope\n        // I'm assuming \"giver\" is a boolean attribute?\n        foreach (to_remove, FilterByNotAttribute (items, \"giver\", true)) {\n          list remove (items, to_remove)\n        }\n      }\n      else if (variable = \"object2\") {\n        giver = DictionaryItem(matched, \"object1\")\n        // get the first matched object (giver), and add its children to scope\n        foreach (o, GetDirectChildren(giver)) {\n          list add (items, o)\n        }\n      }\n    &lt;/changecommandscope&gt;\n    &lt;script&gt;\n      if (not HasAttribute(object1,\"giver\")) {\n        msg (CapFirst(object1.gender) + \" can't do that.\")\n      }\n      else {\n        if (DictionaryContains(object1.givedict,object2.name)) {\n          invoke (ScriptDictionaryItem(object1.givedict, object2.name))\n        }\n        else {\n          msg (CapFirst(GetDisplayName(object1)) + \" shakes \" + object1.possessive + \" head.\")\n        }\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n</details>\n<hr>\n<p>I am very happy now that I have seen this work!!!</p>\n<hr>\n<p>I still prefer my method, where I alter one function, add two small functions, then change <code>game.scopebackdrop</code> to an object list.  This way, I can place whatever I please in or out of scope in any given situation before any command is entered (or before anything else happens, for that matter).  Thus negating the need to doctor numerous commands, which would to lead to me forgetting to change the scope of a command or two, which would mean my game had bugs.</p>\n<hr>\n<p>I'm sure Quest's default scripts are better than the hack I came up with in most instances, and it works for me either way now (thanks to mrangel and The Pixie), so I'm calling this one <strong>[SOLVED]</strong>.</p>\n\n",
      "PostDate": "2018-02-19T04:01:30.4972275Z",
      "LastEditDate": "2018-02-19T22:41:56.5562833Z",
      "link": null
    },
    {
      "PostId": "27ee8280-e04b-444d-bac7-e76e47c45cf9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I still prefer my method, where I alter one function, add two small functions, then change `game.scopebackdrop` to an object list.\r\n\r\nThat has its uses; but as far as I can tell, it only works if you want to change the scope for all commands whose scope is currently `room`.\r\n`changecommandscope` is designed for the circumstances where you want a specific command (like this one) to have an unusual scope.\r\n\r\n> I even changed object2=object1 to object2=Fred, but it didn't work.\r\n\r\nYou'd want the scope to be `object1=room|object2=Fred` in that case. It doesn't check for the presence of an `=` in the string unless there's also a `|`, I believe.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I still prefer my method, where I alter one function, add two small functions, then change <code>game.scopebackdrop</code> to an object list.</p>\n</blockquote>\n<p>That has its uses; but as far as I can tell, it only works if you want to change the scope for all commands whose scope is currently <code>room</code>.<br>\n<code>changecommandscope</code> is designed for the circumstances where you want a specific command (like this one) to have an unusual scope.</p>\n<blockquote>\n<p>I even changed object2=object1 to object2=Fred, but it didn't work.</p>\n</blockquote>\n<p>You'd want the scope to be <code>object1=room|object2=Fred</code> in that case. It doesn't check for the presence of an <code>=</code> in the string unless there's also a <code>|</code>, I believe.</p>\n\n",
      "PostDate": "2018-02-19T09:11:32.0364296Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4560429c-489e-478c-a858-6f5f51c7b8bb",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I still prefer my method, where I alter one function, add two small functions, then change game.scopebackdrop to an object list.\r\n>>That has its uses; but as far as I can tell, it only works if you want to change the scope for all commands whose scope is currently ```room```.\r\n\r\nSorry, I'm scatter-brained, and my posts reflect that.\r\n\r\nI meant this:\r\n\r\n```\r\n    <function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\">\r\n      <![CDATA[\r\n    result = NewObjectList()\r\n    foreach (obj, GetAllChildObjects(room)) {\r\n      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    // If the game is set up the normal way, where scopebackdrop is a script attribute\r\n    if (HasScript(game, \"scopebackdrop\")) {\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n      do (game, \"scopebackdrop\", dict)\r\n    }\r\n     // Else, if the game is set up my new way, where scopebackdrop is an object list\r\n    else if (HasAttribute(game, \"scopebackdrop\")) {\r\n      result = ListCombine (game.scopebackdrop, result)\r\n      dict = NewDictionary()\r\n      dictionary add (dict, \"items\", result)\r\n    }\r\n    return (result)\r\n  ]]>\r\n    </function>\r\n```\r\n```\r\n  <function name=\"AddToScope\" parameters=\"obj\">\r\n    if (not HasScript(game, \"scopebackdrop\")) {\r\n      if (not ListContains(game.scopebackdrop,obj)) {\r\n        list add (game.scopebackdrop, obj)\r\n      }\r\n    }\r\n  </function>\r\n```\r\n```\r\n<!--  \r\n  This will only remove things from scopebackdrop!  \r\n  Anything actually in scope will not be effected.\r\n -->\r\n  <function name=\"RemoveFromScope\" parameters=\"obj\">\r\n    if (not HasScript(game, \"scopebackdrop\")) {\r\n      if (ListContains(game.scopebackdrop,obj)) {\r\n        list remove (game.scopebackdrop, obj)\r\n      }\r\n    }\r\n  </function>\r\n```\r\n\r\n---\r\nThe ```room``` variable will (or should) always be ```game.pov.parent```, since the ```ScopeReachableNotHeldForRoom()``` function is being called internally.  (I never directly call that function, at any rate.)\r\n\r\n---\r\nOne issue with my setup is you'd need a script to place an object in (or out of) scope BEFORE the player enters a command, but, as long as I use a room enter (and/or exit) script, possibly a turn script, this solves a lot of scenery object problems in regards to all available commands.\r\n\r\nOkay...  I say \"problems\", but that may be poor wording.\r\n\r\nI mean I don't like to clone (or create duplicate) scenery objects.  I also don't like to move objects around.  (I'm thinking mainly of doors in games where rooms move around.)\r\n\r\n\r\n---\r\nI might also wish to change the items in the ```scopebackdrop```script  around at any given point.  \r\n\r\nThe way it's set up by default, we can't add or remove items from the existing script.  We can replace the script, or we can remove it, but that's it. \r\n\r\n(I actually found a way to retrieve the items from the existing ```scopebackdrop``` script by creating a script with its own \"items\" list, then running the ```scopebackdrop``` script from within the newly created script, then copying that ```items``` list to a newly created list: ```game.backdrop_items```.  Then, I added my object to that list, and, finally, I replaced the ```scopebackdrop``` script with a new one: ```list add(items,game.backdrop_items)```.  That was a bunch of stuff going on, especially considering I've neglected to mention all the code checking to see if things actually existed, and... blah.  I decided it was much easier to switch over to the method at the very beginning of this post!)\r\n\r\n\r\nI know there are many ways any given scenario could be handled, but I wanted to get a handle on controlling the scope to handle a few things, and I wanted it to effect all available commands sometimes, but only specific commands other times.  (The latter is where I will use the newly added scope features, once I've learned how to do so.)\r\n\r\n\r\n---\r\nIn Inform (and I know I can get Quest to do whatever Inform can do; once I acquire the know-how), I can put a tree in my front yard and make it so you can see it from the street like so:\r\n```\r\nAfter deciding the scope of the player when location is The Street:\r\n\tplace tree in scope.\r\n```\r\n\r\n---\r\nIf I wanted to add the house (or anything else), it would be:\r\n```\r\nAfter deciding the scope of the player when location is The Street:\r\n\tplace tree in scope;\r\n        place house in scope.\r\n```\r\n\r\n---\r\nNow, I can pretty much cover that particular scenario in Quest with a before enter script on the street:\r\n```\r\nAddToScope(tree)\r\nAddToScope(house)\r\n```\r\n\r\nThen, the exit script:\r\n```\r\nRemoveFromScope(tree)\r\nRemoveFromScope(house)\r\n```\r\n\r\n---\r\nWITH THE DEFAULT SETUP:\r\n\r\nIf we could put things like ```Ralph.parent``` as the scope (which we probably can, and I just don't know that), we could keep him in scope, wherever he may roam.  \r\n\r\n(One problem with this is that it places everything in a room in scope.  We can't just place one object in scope (I don't think).  That happens to be what we want here, but it is not always the case.)\r\n\r\nLet's say we have a pair of spy glasses, complete with audio and video features.\r\n\r\nRalph has a pair, as well.\r\n\r\nWhen you don your glasses, you wish to see (or examine) everything in whatever room Ralph is in.\r\n\r\nYou also want to be able to enter commands like, \"RALPH, GET THE PINK PANTHER\", and have Ralph get the diamond without having to use ```#text#``` in your command pattern.\r\n\r\nIn fact, you want to be able to enter ANY command to interact with things you can \"see\", without Quest saying, \"I can't see that (the thing I just mentioned).\"\r\n\r\n---\r\nI was thinking maybe something like this would work with the default setup, but you can't use things like ```Ralph.parent```:\r\n\r\n```\r\nif (whatever){\r\n  foreach(cmd,AllCommands()){\r\n    if(HasString(cmd,\"scope\")){\r\n      cmd.scope = cmd.scope + \",Ralph.parent\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---\r\nSo, I ended up with this:\r\n\r\n**To enable:**\r\n```\r\n    game.pov.parent.ralph_parent = Ralph.parent\r\n    foreach (cmd, AllCommands()) {\r\n      if (not cmd.name = \"go\") {\r\n        if (HasString(cmd,\"scope\")) {\r\n          cmd.scope_bak = cmd.scope\r\n          cmd.scope = cmd.scope + \";ralph_parent\"\r\n        }\r\n        else {\r\n          cmd.scope_bak = \"\"\r\n          cmd.scope = \"ralph_parent\"\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n**To disable:**:\r\n```\r\n      foreach (cmd, AllCommands()) {\r\n        if (HasString(cmd,\"scope\")) {\r\n          cmd.scope = cmd.scope_bak\r\n        }\r\n      }\r\n      this.ralph_parent = null\r\n```\r\n\r\n\r\n---\r\n>You'd want the scope to be ```object1=room|object2=Fred``` in that case. It doesn't check for the presence of an ```=``` in the string unless there's also a ```|```, I believe.\r\n\r\nAha!\r\n\r\nThat's a tasty nugget, if I ever saw one!\r\n\r\n\r\n---\r\nAll in all, I'm thinking there are times when I'd need to use the ```scope``` attribute of a command and other times when I'd want to add or remove items from the ```scopebackdrop``` \"list\".  \r\n\r\nAll I've really done is change the ```scopebackdrop``` attribute to an object list which can be very easily modified.\r\n\r\nConversely, mrangel has written some awesome code which allows us to do all sorts of things with scope of a specific command.  I'm just not smart enough to be able to work it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I still prefer my method, where I alter one function, add two small functions, then change game.scopebackdrop to an object list.</p>\n<blockquote>\n<p>That has its uses; but as far as I can tell, it only works if you want to change the scope for all commands whose scope is currently <code>room</code>.</p>\n</blockquote>\n</blockquote>\n<p>Sorry, I'm scatter-brained, and my posts reflect that.</p>\n<p>I meant this:</p>\n<pre><code>    &lt;function name=\"ScopeReachableNotHeldForRoom\" parameters=\"room\" type=\"objectlist\"&gt;\n      &lt;![CDATA[\n    result = NewObjectList()\n    foreach (obj, GetAllChildObjects(room)) {\n      if (ContainsReachable(room, obj) and obj &lt;&gt; game.pov and not Contains(game.pov, obj)) {\n        list add (result, obj)\n      }\n    }\n    // If the game is set up the normal way, where scopebackdrop is a script attribute\n    if (HasScript(game, \"scopebackdrop\")) {\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n      do (game, \"scopebackdrop\", dict)\n    }\n     // Else, if the game is set up my new way, where scopebackdrop is an object list\n    else if (HasAttribute(game, \"scopebackdrop\")) {\n      result = ListCombine (game.scopebackdrop, result)\n      dict = NewDictionary()\n      dictionary add (dict, \"items\", result)\n    }\n    return (result)\n  ]]&gt;\n    &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"AddToScope\" parameters=\"obj\"&gt;\n    if (not HasScript(game, \"scopebackdrop\")) {\n      if (not ListContains(game.scopebackdrop,obj)) {\n        list add (game.scopebackdrop, obj)\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<pre><code>&lt;!--  \n  This will only remove things from scopebackdrop!  \n  Anything actually in scope will not be effected.\n --&gt;\n  &lt;function name=\"RemoveFromScope\" parameters=\"obj\"&gt;\n    if (not HasScript(game, \"scopebackdrop\")) {\n      if (ListContains(game.scopebackdrop,obj)) {\n        list remove (game.scopebackdrop, obj)\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>The <code>room</code> variable will (or should) always be <code>game.pov.parent</code>, since the <code>ScopeReachableNotHeldForRoom()</code> function is being called internally.  (I never directly call that function, at any rate.)</p>\n<hr>\n<p>One issue with my setup is you'd need a script to place an object in (or out of) scope BEFORE the player enters a command, but, as long as I use a room enter (and/or exit) script, possibly a turn script, this solves a lot of scenery object problems in regards to all available commands.</p>\n<p>Okay...  I say \"problems\", but that may be poor wording.</p>\n<p>I mean I don't like to clone (or create duplicate) scenery objects.  I also don't like to move objects around.  (I'm thinking mainly of doors in games where rooms move around.)</p>\n<hr>\n<p>I might also wish to change the items in the <code>scopebackdrop</code>script  around at any given point.</p>\n<p>The way it's set up by default, we can't add or remove items from the existing script.  We can replace the script, or we can remove it, but that's it.</p>\n<p>(I actually found a way to retrieve the items from the existing <code>scopebackdrop</code> script by creating a script with its own \"items\" list, then running the <code>scopebackdrop</code> script from within the newly created script, then copying that <code>items</code> list to a newly created list: <code>game.backdrop_items</code>.  Then, I added my object to that list, and, finally, I replaced the <code>scopebackdrop</code> script with a new one: <code>list add(items,game.backdrop_items)</code>.  That was a bunch of stuff going on, especially considering I've neglected to mention all the code checking to see if things actually existed, and... blah.  I decided it was much easier to switch over to the method at the very beginning of this post!)</p>\n<p>I know there are many ways any given scenario could be handled, but I wanted to get a handle on controlling the scope to handle a few things, and I wanted it to effect all available commands sometimes, but only specific commands other times.  (The latter is where I will use the newly added scope features, once I've learned how to do so.)</p>\n<hr>\n<p>In Inform (and I know I can get Quest to do whatever Inform can do; once I acquire the know-how), I can put a tree in my front yard and make it so you can see it from the street like so:</p>\n<pre><code>After deciding the scope of the player when location is The Street:\n\tplace tree in scope.\n</code></pre>\n<hr>\n<p>If I wanted to add the house (or anything else), it would be:</p>\n<pre><code>After deciding the scope of the player when location is The Street:\n\tplace tree in scope;\n        place house in scope.\n</code></pre>\n<hr>\n<p>Now, I can pretty much cover that particular scenario in Quest with a before enter script on the street:</p>\n<pre><code>AddToScope(tree)\nAddToScope(house)\n</code></pre>\n<p>Then, the exit script:</p>\n<pre><code>RemoveFromScope(tree)\nRemoveFromScope(house)\n</code></pre>\n<hr>\n<p>WITH THE DEFAULT SETUP:</p>\n<p>If we could put things like <code>Ralph.parent</code> as the scope (which we probably can, and I just don't know that), we could keep him in scope, wherever he may roam.</p>\n<p>(One problem with this is that it places everything in a room in scope.  We can't just place one object in scope (I don't think).  That happens to be what we want here, but it is not always the case.)</p>\n<p>Let's say we have a pair of spy glasses, complete with audio and video features.</p>\n<p>Ralph has a pair, as well.</p>\n<p>When you don your glasses, you wish to see (or examine) everything in whatever room Ralph is in.</p>\n<p>You also want to be able to enter commands like, \"RALPH, GET THE PINK PANTHER\", and have Ralph get the diamond without having to use <code>#text#</code> in your command pattern.</p>\n<p>In fact, you want to be able to enter ANY command to interact with things you can \"see\", without Quest saying, \"I can't see that (the thing I just mentioned).\"</p>\n<hr>\n<p>I was thinking maybe something like this would work with the default setup, but you can't use things like <code>Ralph.parent</code>:</p>\n<pre><code>if (whatever){\n  foreach(cmd,AllCommands()){\n    if(HasString(cmd,\"scope\")){\n      cmd.scope = cmd.scope + \",Ralph.parent\"\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>So, I ended up with this:</p>\n<p><strong>To enable:</strong></p>\n<pre><code>    game.pov.parent.ralph_parent = Ralph.parent\n    foreach (cmd, AllCommands()) {\n      if (not cmd.name = \"go\") {\n        if (HasString(cmd,\"scope\")) {\n          cmd.scope_bak = cmd.scope\n          cmd.scope = cmd.scope + \";ralph_parent\"\n        }\n        else {\n          cmd.scope_bak = \"\"\n          cmd.scope = \"ralph_parent\"\n        }\n      }\n    }\n</code></pre>\n<p><strong>To disable:</strong>:</p>\n<pre><code>      foreach (cmd, AllCommands()) {\n        if (HasString(cmd,\"scope\")) {\n          cmd.scope = cmd.scope_bak\n        }\n      }\n      this.ralph_parent = null\n</code></pre>\n<hr>\n<blockquote>\n<p>You'd want the scope to be <code>object1=room|object2=Fred</code> in that case. It doesn't check for the presence of an <code>=</code> in the string unless there's also a <code>|</code>, I believe.</p>\n</blockquote>\n<p>Aha!</p>\n<p>That's a tasty nugget, if I ever saw one!</p>\n<hr>\n<p>All in all, I'm thinking there are times when I'd need to use the <code>scope</code> attribute of a command and other times when I'd want to add or remove items from the <code>scopebackdrop</code> \"list\".</p>\n<p>All I've really done is change the <code>scopebackdrop</code> attribute to an object list which can be very easily modified.</p>\n<p>Conversely, mrangel has written some awesome code which allows us to do all sorts of things with scope of a specific command.  I'm just not smart enough to be able to work it.</p>\n\n",
      "PostDate": "2018-02-19T20:50:14.0031993Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5492f546-6c11-4cba-8a3b-18b579ee0f48",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just for the record, I am not on the same level as mrangel, Pixie, or Pertex.  (I'm sure I've left someone out.  Sorry!)\r\n\r\nThose guys are playing chess.  I'm just playing checkers.\r\n\r\nWhen I drone on and on about things (i.e., scope), it's either because:\r\n\r\nA\\.  Whoever I'm corresponding with isn't understanding what I'm trying to accomplish (and/or why).\r\n\r\nB\\.  I believe A to be the case when it isn't, and I'm just being <s>dumb</s> silly.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just for the record, I am not on the same level as mrangel, Pixie, or Pertex.  (I'm sure I've left someone out.  Sorry!)</p>\n<p>Those guys are playing chess.  I'm just playing checkers.</p>\n<p>When I drone on and on about things (i.e., scope), it's either because:</p>\n<p>A.  Whoever I'm corresponding with isn't understanding what I'm trying to accomplish (and/or why).</p>\n<p>B.  I believe A to be the case when it isn't, and I'm just being <s>dumb</s> silly.</p>\n\n",
      "PostDate": "2018-02-19T21:02:16.4199702Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "79dcf75e-baaf-44bf-bc4e-d58a111a45e6",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a question about scope (I've read and read and read about it, I get the point of scopes, I understand the commands but still I can't put them to use.)\r\n\r\nI have a book case. \r\n\r\nAs it is now I have to:\r\n1. Open it\r\n2. Type 'look', to see what's inside.\r\n\r\nI want to:\r\n1. Open it and get the content listed.\r\n\r\nI'm about to pull my hair out. And my beard. \r\nEdith: And my head. GAAAAH!",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a question about scope (I've read and read and read about it, I get the point of scopes, I understand the commands but still I can't put them to use.)</p>\n<p>I have a book case.</p>\n<p>As it is now I have to:</p>\n<ol>\n<li>Open it</li>\n<li>Type 'look', to see what's inside.</li>\n</ol>\n<p>I want to:</p>\n<ol>\n<li>Open it and get the content listed.</li>\n</ol>\n<p>I'm about to pull my hair out. And my beard.<br>\nEdith: And my head. GAAAAH!</p>\n\n",
      "PostDate": "2018-04-09T08:56:43.7941045Z",
      "LastEditDate": "2018-04-09T08:59:08.4184642Z",
      "link": null
    },
    {
      "PostId": "3167bf4e-4d5e-453a-939a-687c9e649098",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "And I apologize for hijacking a perfectly informative thread and making it about me and my total inability to get things done.",
      "EditableFormat": "markdown",
      "HTML": "<p>And I apologize for hijacking a perfectly informative thread and making it about me and my total inability to get things done.</p>\n\n",
      "PostDate": "2018-04-09T08:57:43.1074581Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "39db9e3f-7fe9-4ea6-8024-56319602ddf0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@CheeseMyBaby\r\n\r\nOn the \"container\" tab, there is an option \"List contents when object is looked at or opened\".\r\n\r\nOr if you want a little more control over the format of the message, you could use the 'script when the object is opened':\r\n```\r\n  msg (FormatObjectList(\"You manage to open it, and inside you see \", this, \", and\", \"nothing but dust\"))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@CheeseMyBaby</p>\n<p>On the \"container\" tab, there is an option \"List contents when object is looked at or opened\".</p>\n<p>Or if you want a little more control over the format of the message, you could use the 'script when the object is opened':</p>\n<pre><code>  msg (FormatObjectList(\"You manage to open it, and inside you see \", this, \", and\", \"nothing but dust\"))\n</code></pre>\n\n",
      "PostDate": "2018-04-09T10:21:36.7218493Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e694f2fa-5912-496c-86ba-214bc4408024",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel\r\nI had picked open/closeable instead of container. Sheeeeeeeeeeeeeeez!\r\n\r\nThank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel<br>\nI had picked open/closeable instead of container. Sheeeeeeeeeeeeeeez!</p>\n<p>Thank you!</p>\n\n",
      "PostDate": "2018-04-09T11:27:40.9991455Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "46fccb6b-a740-4fe3-bcca-bea79aa82e56",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "those options in the GUI/Editor, are built-in Object Types, which you can read about here (scroll down to the bottom/last section):\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html\r\n\r\nyou used the 'openable' Object Type / Inherited Attribute, which is used for 'door' applications, as opposed to a openable/closable/lockable 'container' applications\r\n\r\n(though they're connected to/with a lot of other code, so there's a lot more issues going on with using them, the documentation doesn't cover all this interwoven-ness and other attributes that they have)\r\n\r\n------------\r\n\r\n(a cool/sneaky idea: having a 'door' Object be a container: the door has a secret compartment, hehe. Few people would ever think of a door having something hidden within it, hehe)",
      "EditableFormat": "markdown",
      "HTML": "<p>those options in the GUI/Editor, are built-in Object Types, which you can read about here (scroll down to the bottom/last section):</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html</p>\n<p>you used the 'openable' Object Type / Inherited Attribute, which is used for 'door' applications, as opposed to a openable/closable/lockable 'container' applications</p>\n<p>(though they're connected to/with a lot of other code, so there's a lot more issues going on with using them, the documentation doesn't cover all this interwoven-ness and other attributes that they have)</p>\n<hr>\n<p>(a cool/sneaky idea: having a 'door' Object be a container: the door has a secret compartment, hehe. Few people would ever think of a door having something hidden within it, hehe)</p>\n\n",
      "PostDate": "2018-04-10T01:26:19.0473699Z",
      "LastEditDate": "2018-04-10T01:28:44.8246796Z",
      "link": null
    },
    {
      "PostId": "6d0d82ac-fbc3-4f6a-98cb-acaff377f188",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very true hege!",
      "EditableFormat": "markdown",
      "HTML": "<p>Very true hege!</p>\n\n",
      "PostDate": "2018-04-10T08:11:01.6454712Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4fb4b6c2-e576-4d59-b0fd-ab491fa4e611",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK is quite clever/creative in hiding things/spaces, HK grins toothily :D\r\n\r\nIf HK hid something, no one could ever find it, muwhahaha!",
      "EditableFormat": "markdown",
      "HTML": "<p>HK is quite clever/creative in hiding things/spaces, HK grins toothily :D</p>\n<p>If HK hid something, no one could ever find it, muwhahaha!</p>\n\n",
      "PostDate": "2018-04-10T18:02:28.3601289Z",
      "LastEditDate": "2018-04-10T18:02:58.2875692Z",
      "link": null
    },
    {
      "PostId": "eb71bf9b-e938-4ad6-879e-24bca895c60f",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Could you please hide my inability to code then HK? =)",
      "EditableFormat": "markdown",
      "HTML": "<p>Could you please hide my inability to code then HK? =)</p>\n\n",
      "PostDate": "2018-04-12T07:51:41.4239012Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
