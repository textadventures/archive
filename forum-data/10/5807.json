{
  "Topic": {
    "TopicId": "5807",
    "ForumId": "10",
    "Title": "If Not Question :)",
    "LastUpdated": "2016-01-05T15:54:01+00:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "40228",
      "UserId": 0,
      "Username": "Anonynn",
      "UserAvatar": "7661_1463890118.jpg",
      "UserGravatar": "2eea18890a69714beb5b926a7b559e64",
      "EditableText": "So I had a logic question that I'm having trouble sorting through. I get the concept, just not how to implement it. \n\nBasically, I have two different types of containers. \n1. Ones that CAN hold water and items.\n2. Ones that can ONLY hold items. \n\nI have two water objects so far...\n1. Fresh Water.\n2. Dirty Water. \n\nSo my question is, how do I handle containers that cannot hold anything [i:15zqknhn]except[/i:15zqknhn] water.\n\nHere's a script of one item that [b:15zqknhn]cannot[/b:15zqknhn] hold water. \n\nif (Contains (small_sack,fresh_water)) {\n  msg (&quot;&lt;br/&gt;You cannot store liquids in this small sack! &lt;br/&gt;&quot;)\n  RemoveObject (fresh_water)\n}\nelse if (Contains (small_sack,dirty_water)) {\n  msg (&quot;&lt;br/&gt;You cannot store liquids in this small sack! &lt;br/&gt;&quot;)\n  RemoveObject (dirty_water)\n}\n \nSee it's easier to do it this way because I only have two water items. But what would be the logic for... \n\nRemoving any item that is NOT water?  Since &quot;Remove Item&quot; applies to one item. \n\nThanks in advance!",
      "EditableFormat": "bbcode",
      "HTML": "So I had a logic question that I'm having trouble sorting through. I get the concept, just not how to implement it. <br/><br/>Basically, I have two different types of containers. <br/>1. Ones that CAN hold water and items.<br/>2. Ones that can ONLY hold items. <br/><br/>I have two water objects so far...<br/>1. Fresh Water.<br/>2. Dirty Water. <br/><br/>So my question is, how do I handle containers that cannot hold anything <span style=\"font-style:italic;\">except</span> water.<br/><br/>Here's a script of one item that <span style=\"font-weight:bold;\">cannot</span> hold water. <br/><br/>if (Contains (small_sack,fresh_water)) {<br/>  msg (&quot;&lt;br/&gt;You cannot store liquids in this small sack! &lt;br/&gt;&quot;)<br/>  RemoveObject (fresh_water)<br/>}<br/>else if (Contains (small_sack,dirty_water)) {<br/>  msg (&quot;&lt;br/&gt;You cannot store liquids in this small sack! &lt;br/&gt;&quot;)<br/>  RemoveObject (dirty_water)<br/>}<br/> <br/>See it's easier to do it this way because I only have two water items. But what would be the logic for... <br/><br/>Removing any item that is NOT water?  Since &quot;Remove Item&quot; applies to one item. <br/><br/>Thanks in advance!",
      "PostDate": "2016-01-05T03:59:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40230",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Can you use something like this here?\n\nif (not obj = \n\nI used it when dropping all inventory except two items.  It seems like you could use something similar in your filling container message?  Just a thought.\n\nIt was from this thread if you can pull any use out of it?\n\n<!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=5699\">viewtopic.php?f=10&amp;t=5699</a><!-- l -->",
      "EditableFormat": "bbcode",
      "HTML": "Can you use something like this here?<br/><br/>if (not obj = <br/><br/>I used it when dropping all inventory except two items.  It seems like you could use something similar in your filling container message?  Just a thought.<br/><br/>It was from this thread if you can pull any use out of it?<br/><br/><!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=10&amp;t=5699\">viewtopic.php?f=10&amp;t=5699</a><!-- l -->",
      "PostDate": "2016-01-05T05:08:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40231",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "To deal with multiple items, you need to use lists, as they allow you to iterate (cycle) through all of the items (via using 'foreach' Function) and act or don't act upon them depending on if they match or don't match your conditions (your 'if' scripts).\n\n--------------------------\n\nIMPORTANT NOTE:\n\nwhen adding~putting Objects into an Objectlist Attribute (or when getting~creating an Objectlist containing Objects), those Objects are [b:1sd56ob5][size=150:1sd56ob5]*NOT*[/size:1sd56ob5][/b:1sd56ob5] physically moved into the Objectlist. Think of an Objectlist Attribute as like a PE class student roster (a piece of paper with the PE students names on it, NOT the actual physical students themselves on the paper roster, lol), which can be used to do actions upon those Objects, but the Objects themselves remain physically where-ever they are located at, despite their names being put into~onto the roster~Objectlist Attribute, (unless the action you're doing is a 'MoveObject' Function that moves an Object to inside of another Object, of course). An Object can NEVER physically be inside or put into an Objectlist.\n\n------------------------\n\nThese two Functions below, will put all of the desired (see~read the differences between the two functions below) items in an Object, into an objectlist:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n\nif you want to do the same for specifically the Player Object, you can use this too:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m -->\n\nor, if you want~need to (or can: the very lazy way, lol), you can use an objectlist containing every single object in your entire game:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n\n------------------\n\nAs for the water issue, the best way (or you can use the 'not' negation keyword instead) would be to give your Objects an Attribute that distinguishes that Object as a water vs non-water/other Object, for example (using a String Attribute as it gives more versatility, but if you rather you can use a Boolean Attribute too, or there's also using an Object Type and its Inherited Attribute, too):\n\nusing a String Attribute:\n\n[code:1sd56ob5](Object Name&#58; fresh_water)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; water\n\n(Object Name&#58; dirty_water)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; water\n\n(Object Name&#58; holy_water)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; water\n\n(Object Name&#58; poisoned_water)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; water\n\n(Object Name&#58; cocacola)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; soda\n\n(Object Name&#58; pepsi)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; soda\n\n(Object Name&#58; rootbeer)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; soda\n\n(Object Name&#58; green_tea)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; tea\n\n(Object Name&#58; black_coffee)\nAttribute Name&#58; type_of_object\nAttribute Type&#58; string\nAttribute Value&#58; coffee[/code:1sd56ob5]\n\nusing a Boolean Attribute:\n\n[code:1sd56ob5](Object Name&#58; fresh_water)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; true\n\n(Object Name&#58; dirty_water)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; true\n\n(Object Name&#58; holy_water)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; true\n\n(Object Name&#58; poisoned_water)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; true\n\n(Object Name&#58; cocacola)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; false\n\n(Object Name&#58; pepsi)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; false\n\n(Object Name&#58; rootbeer)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; false\n\n(Object Name&#58; green_tea)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; false\n\n(Object Name&#58; black_coffee)\nAttribute Name&#58; IsWater\nAttribute Type&#58; boolean\nAttribute Value&#58; false[/code:1sd56ob5]\n\nusing an Object Type (Inherited Attribute):\n\n[code:1sd56ob5]Object Type Name&#58; water_type\nObject Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)\n\nObject Type Name&#58; soda_type\nObject Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)\n\nObject Type Name&#58; tea_type\nObject Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)\n\nObject Type Name&#58; coffee_type\nObject Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)\n\n(Object Name&#58; fresh_water)\nInherited Attribute&#58; water_type\n\n(Object Name&#58; dirty_water)\nInherited Attribute&#58; water_type\n\n(Object Name&#58; holy_water)\nInherited Attribute&#58; water_type\n\n(Object Name&#58; poisoned_water)\nInherited Attribute&#58; water_type\n\n(Object Name&#58; cocacola)\nInherited Attribute&#58; soda_type\n\n(Object Name&#58; pepsi)\nInherited Attribute&#58; soda_type\n\n(Object Name&#58; green_tea)\nInherited Attribute&#58; tea_type\n\n(Object Name&#58; black_coffee)\nInherited Attribute&#58; coffee_type[/code:1sd56ob5]\n\n------------------------------------------\n\nwhich allows you to check for this Attribute and its Value, via an 'if' Script inside of the 'foreach' Function...\n\nthe examples below is now showing the complete scripting coding (you got to still actually create the Objects and Attributes as shown above, of course) for doing what you want:\n\nusing String Attributes:\n\n[code:1sd56ob5]objectlist_variable = GetDirectChildren (small_sack)\nforeach (object_item, objectlist_variable) {\n  if (GetString (object_item, &quot;type_of_object&quot;) = &quot;water&quot;) {\n    RemoveObject (object_item)\n  } else if (GetString (object_item, &quot;type_of_object&quot;) = &quot;soda&quot;) {\n    msg (&quot;You drink the soda, Aaahhh, so good!&quot;)\n  } else if (GetString (object_item, &quot;type_of_object&quot;) = &quot;tea&quot;) {\n    msg (&quot;Tea is not your favorite drink, but you can handle it&quot;)\n  } else {\n    msg (&quot;(You spit out the coffee, as you can't stand the stuff!)&quot;)\n  }\n}[/code:1sd56ob5]\n\nusing Boolean Attributes:\n\n[code:1sd56ob5]objectlist_variable = GetDirectChildren (small_sack)\nforeach (object_item, objectlist_variable) {\n  if (GetBoolean (object_item, &quot;IsWater&quot;)) {\n    RemoveObject (object_item)\n  } else {\n    msg (&quot;You drink down the liquid regardlessly, even if it's coffee&#46;&#46;&#46;&quot;)\n  }\n}[/code:1sd56ob5]\n\nusing Object Types (Inherited Attributes):\n\n[code:1sd56ob5]objectlist_variable = GetDirectChildren (small_sack)\nforeach (object_item, objectlist_variable) {\n  if (DoesInherit (object_item, &quot;water_type&quot;)) {\n    RemoveObject (object_item)\n  } else if (DoesInherit (object_item, &quot;soda_type&quot;)) {\n    msg (&quot;You drink the soda, Aaahhh, so good!&quot;)\n  } else if (DoesInherit (object_item, &quot;tea_type&quot;)) {\n    msg (&quot;Tea is not your favorite drink, but you can handle it&quot;)\n  } else {\n    msg (&quot;(You spit out the coffee, as you can't stand the stuff!)&quot;)\n  }\n}[/code:1sd56ob5]",
      "EditableFormat": "bbcode",
      "HTML": "To deal with multiple items, you need to use lists, as they allow you to iterate (cycle) through all of the items (via using 'foreach' Function) and act or don't act upon them depending on if they match or don't match your conditions (your 'if' scripts).<br/><br/>--------------------------<br/><br/>IMPORTANT NOTE:<br/><br/>when adding~putting Objects into an Objectlist Attribute (or when getting~creating an Objectlist containing Objects), those Objects are <span style=\"font-weight:bold;\"><span style=\"font-size:150\">*NOT*</span></span> physically moved into the Objectlist. Think of an Objectlist Attribute as like a PE class student roster (a piece of paper with the PE students names on it, NOT the actual physical students themselves on the paper roster, lol), which can be used to do actions upon those Objects, but the Objects themselves remain physically where-ever they are located at, despite their names being put into~onto the roster~Objectlist Attribute, (unless the action you're doing is a 'MoveObject' Function that moves an Object to inside of another Object, of course). An Object can NEVER physically be inside or put into an Objectlist.<br/><br/>------------------------<br/><br/>These two Functions below, will put all of the desired (see~read the differences between the two functions below) items in an Object, into an objectlist:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><br/>if you want to do the same for specifically the Player Object, you can use this too:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m --><br/><br/>or, if you want~need to (or can: the very lazy way, lol), you can use an objectlist containing every single object in your entire game:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><br/>------------------<br/><br/>As for the water issue, the best way (or you can use the 'not' negation keyword instead) would be to give your Objects an Attribute that distinguishes that Object as a water vs non-water/other Object, for example (using a String Attribute as it gives more versatility, but if you rather you can use a Boolean Attribute too, or there's also using an Object Type and its Inherited Attribute, too):<br/><br/>using a String Attribute:<br/><br/><pre><code>(Object Name&#58; fresh_water)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; water<br/><br/>(Object Name&#58; dirty_water)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; water<br/><br/>(Object Name&#58; holy_water)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; water<br/><br/>(Object Name&#58; poisoned_water)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; water<br/><br/>(Object Name&#58; cocacola)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; soda<br/><br/>(Object Name&#58; pepsi)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; soda<br/><br/>(Object Name&#58; rootbeer)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; soda<br/><br/>(Object Name&#58; green_tea)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; tea<br/><br/>(Object Name&#58; black_coffee)<br/>Attribute Name&#58; type_of_object<br/>Attribute Type&#58; string<br/>Attribute Value&#58; coffee</code></pre><br/><br/>using a Boolean Attribute:<br/><br/><pre><code>(Object Name&#58; fresh_water)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; true<br/><br/>(Object Name&#58; dirty_water)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; true<br/><br/>(Object Name&#58; holy_water)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; true<br/><br/>(Object Name&#58; poisoned_water)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; true<br/><br/>(Object Name&#58; cocacola)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; false<br/><br/>(Object Name&#58; pepsi)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; false<br/><br/>(Object Name&#58; rootbeer)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; false<br/><br/>(Object Name&#58; green_tea)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; false<br/><br/>(Object Name&#58; black_coffee)<br/>Attribute Name&#58; IsWater<br/>Attribute Type&#58; boolean<br/>Attribute Value&#58; false</code></pre><br/><br/>using an Object Type (Inherited Attribute):<br/><br/><pre><code>Object Type Name&#58; water_type<br/>Object Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)<br/><br/>Object Type Name&#58; soda_type<br/>Object Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)<br/><br/>Object Type Name&#58; tea_type<br/>Object Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)<br/><br/>Object Type Name&#58; coffee_type<br/>Object Type Attribute(s)&#58; (optional, but not necessary to add~create any for just this 'water vs non-water' differentiation)<br/><br/>(Object Name&#58; fresh_water)<br/>Inherited Attribute&#58; water_type<br/><br/>(Object Name&#58; dirty_water)<br/>Inherited Attribute&#58; water_type<br/><br/>(Object Name&#58; holy_water)<br/>Inherited Attribute&#58; water_type<br/><br/>(Object Name&#58; poisoned_water)<br/>Inherited Attribute&#58; water_type<br/><br/>(Object Name&#58; cocacola)<br/>Inherited Attribute&#58; soda_type<br/><br/>(Object Name&#58; pepsi)<br/>Inherited Attribute&#58; soda_type<br/><br/>(Object Name&#58; green_tea)<br/>Inherited Attribute&#58; tea_type<br/><br/>(Object Name&#58; black_coffee)<br/>Inherited Attribute&#58; coffee_type</code></pre><br/><br/>------------------------------------------<br/><br/>which allows you to check for this Attribute and its Value, via an 'if' Script inside of the 'foreach' Function...<br/><br/>the examples below is now showing the complete scripting coding (you got to still actually create the Objects and Attributes as shown above, of course) for doing what you want:<br/><br/>using String Attributes:<br/><br/><pre><code>objectlist_variable = GetDirectChildren (small_sack)<br/>foreach (object_item, objectlist_variable) {<br/>  if (GetString (object_item, &quot;type_of_object&quot;) = &quot;water&quot;) {<br/>    RemoveObject (object_item)<br/>  } else if (GetString (object_item, &quot;type_of_object&quot;) = &quot;soda&quot;) {<br/>    msg (&quot;You drink the soda, Aaahhh, so good!&quot;)<br/>  } else if (GetString (object_item, &quot;type_of_object&quot;) = &quot;tea&quot;) {<br/>    msg (&quot;Tea is not your favorite drink, but you can handle it&quot;)<br/>  } else {<br/>    msg (&quot;(You spit out the coffee, as you can't stand the stuff!)&quot;)<br/>  }<br/>}</code></pre><br/><br/>using Boolean Attributes:<br/><br/><pre><code>objectlist_variable = GetDirectChildren (small_sack)<br/>foreach (object_item, objectlist_variable) {<br/>  if (GetBoolean (object_item, &quot;IsWater&quot;)) {<br/>    RemoveObject (object_item)<br/>  } else {<br/>    msg (&quot;You drink down the liquid regardlessly, even if it's coffee&#46;&#46;&#46;&quot;)<br/>  }<br/>}</code></pre><br/><br/>using Object Types (Inherited Attributes):<br/><br/><pre><code>objectlist_variable = GetDirectChildren (small_sack)<br/>foreach (object_item, objectlist_variable) {<br/>  if (DoesInherit (object_item, &quot;water_type&quot;)) {<br/>    RemoveObject (object_item)<br/>  } else if (DoesInherit (object_item, &quot;soda_type&quot;)) {<br/>    msg (&quot;You drink the soda, Aaahhh, so good!&quot;)<br/>  } else if (DoesInherit (object_item, &quot;tea_type&quot;)) {<br/>    msg (&quot;Tea is not your favorite drink, but you can handle it&quot;)<br/>  } else {<br/>    msg (&quot;(You spit out the coffee, as you can't stand the stuff!)&quot;)<br/>  }<br/>}</code></pre>",
      "PostDate": "2016-01-05T05:34:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40238",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Using a combination of the above two responses gives a possibly simpler alternative:\n\n[code:3hkl64il]\nremoved = false\nchildren = GetDirectChildren (small_sack)\nforeach (child, children) {\n  if (not child = fresh_water and not child = dirty_water) {\n    RemoveObject (object_item)\n    removed = true\n  }\n  \n  if (removed) {\n      msg(&quot;You can only place water in the sack&#46;&quot;)\n  }\n}[/code:3hkl64il]\nThe extra &quot;removed&quot; logic is so that you only get the message once even if there are multiple items removed.",
      "EditableFormat": "bbcode",
      "HTML": "Using a combination of the above two responses gives a possibly simpler alternative:<br/><br/><pre><code><br/>removed = false<br/>children = GetDirectChildren (small_sack)<br/>foreach (child, children) {<br/>  if (not child = fresh_water and not child = dirty_water) {<br/>    RemoveObject (object_item)<br/>    removed = true<br/>  }<br/>  <br/>  if (removed) {<br/>      msg(&quot;You can only place water in the sack&#46;&quot;)<br/>  }<br/>}</code></pre><br/>The extra &quot;removed&quot; logic is so that you only get the message once even if there are multiple items removed.",
      "PostDate": "2016-01-05T12:57:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40242",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Ha.  I'm getting a [i:2zdhmezr]little[/i:2zdhmezr] closer to not being a total code idiot!  Getting closer... inch by inch... <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "EditableFormat": "bbcode",
      "HTML": "Ha.  I'm getting a <span style=\"font-style:italic;\">little</span> closer to not being a total code idiot!  Getting closer... inch by inch... <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->",
      "PostDate": "2016-01-05T15:06:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40243",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "[quote=&quot;XanMag&quot;:300yx0xq]Ha.  I'm getting a [i:300yx0xq]little[/i:300yx0xq] closer to not being a total code idiot!  Getting closer... inch by inch... <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: -->[/quote:300yx0xq]\nAnd better than my hacks <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>XanMag wrote:</cite>Ha.  I'm getting a <span style=\"font-style:italic;\">little</span> closer to not being a total code idiot!  Getting closer... inch by inch... <!-- s:lol: --><img src=\"{SMILIES_PATH}/icon_lol.gif\" alt=\":lol:\" title=\"Laughing\" /><!-- s:lol: --></blockquote><br/>And better than my hacks <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2016-01-05T15:54:01+00:00",
      "LastEditDate": null
    }
  ]
}
