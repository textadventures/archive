{
  "Topic": {
    "TopicId": "paiwycecpkydyi8orgfo6g",
    "ForumId": "10",
    "Title": "Variables in Object Reference",
    "LastUpdated": "2018-01-23T10:35:48.028566Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fc403328-63b4-47b2-8324-34a85c9975fc",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Say I have \"player.stamina\"\r\n\r\nCan I use a variable to reference that? Say I have a string variable called mname. Can I say mname.stamina to reference player.stamina? If so, how do I do it?",
      "EditableFormat": "markdown",
      "HTML": "<p>Say I have \"player.stamina\"</p>\n<p>Can I use a variable to reference that? Say I have a string variable called mname. Can I say mname.stamina to reference player.stamina? If so, how do I do it?</p>\n\n",
      "PostDate": "2018-01-23T10:35:48.028566Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3f833c70-e657-4afd-a439-519336065f01",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nmsg(\"{player.stamina}\")\r\n```\r\n\r\n...or\r\n\r\n```\r\nmsg(player.stamina)\r\n```\r\n\r\n...or\r\n\r\n```\r\nmsg(\"Stamina: \"+player.stamina)\r\n```\r\n\r\n...or\r\n```\r\nmsg(\"Stamina: {player.stamina}\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>msg(\"{player.stamina}\")\n</code></pre>\n<p>...or</p>\n<pre><code>msg(player.stamina)\n</code></pre>\n<p>...or</p>\n<pre><code>msg(\"Stamina: \"+player.stamina)\n</code></pre>\n<p>...or</p>\n<pre><code>msg(\"Stamina: {player.stamina}\")\n</code></pre>\n\n",
      "PostDate": "2018-01-23T10:54:41.1657807Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4e4733ed-407c-4f20-9e17-175c031fced3",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "no no. I mean, what if I have a function that references several objects and I want to pass it a parameter to reference an object. So in the above examples if I wanted the parameter (we'll call the parameter mname) to be in those messages to be player:\r\n\r\nmsg (mname.stamina) where mname would be the passed parameter of player",
      "EditableFormat": "markdown",
      "HTML": "<p>no no. I mean, what if I have a function that references several objects and I want to pass it a parameter to reference an object. So in the above examples if I wanted the parameter (we'll call the parameter mname) to be in those messages to be player:</p>\n<p>msg (mname.stamina) where mname would be the passed parameter of player</p>\n\n",
      "PostDate": "2018-01-23T11:23:49.4593729Z",
      "LastEditDate": "2018-01-23T11:57:41.8000242Z",
      "link": null
    },
    {
      "PostId": "faa8ce11-ef9c-4b49-bca5-4c83c9af34d8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can do this:\r\n```\r\nmname = player\r\nmsg(mname.stamina)\r\n```\r\nOr send `player` as an argument to a function, and have `mname` as a parameter of the function, then do this:\r\n```\r\nmsg(mname.stamina)\r\n```\r\nNot sure what you mean by \"messages to be player\" though.",
      "EditableFormat": "markdown",
      "HTML": "<p>You can do this:</p>\n<pre><code>mname = player\nmsg(mname.stamina)\n</code></pre>\n<p>Or send <code>player</code> as an argument to a function, and have <code>mname</code> as a parameter of the function, then do this:</p>\n<pre><code>msg(mname.stamina)\n</code></pre>\n<p>Not sure what you mean by \"messages to be player\" though.</p>\n\n",
      "PostDate": "2018-01-23T12:02:08.029452Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "819084a2-ff04-4cc9-94e8-2499fa1400af",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What I mean, is, if the object was called wildwolf and I wanted to pass that object name to the function combat:\r\n\r\ncombat (\"wildwolf\")\r\n\r\nthen in the function:\r\n\r\n```<function name=\"combat\" parameters=\"mname\" type=\"string\">```\r\n\r\nThen inside that function I'd like to do:\r\n\r\nmsg (mname.stamina)\r\n\r\nBut, when I try to use that in a msg to create a table. As such:\r\n\r\n```<table style=\"width: 75%\"><tr><th>Combantant</th> <th align=\"center\">Skill</th> <th align=\"center\">Stamina</th> <th align=\"center\">Luck</th></tr> <tr> <td><b><font color=\"blue\">Player</b></font></td> <td align=\"center\">{player.skillcurrent}</td> <td align=\"center\">{player.staminacurrent}</td> <td align=\"center\">{player.luckcurrent}</td> </tr> <td><b><font color=\"red\">{mname.alias}</b></font></td> <td align=\"center\">{mname.mskill}</td> <td align=\"center\">{mname.mstamina}</td></tr> </table>```\r\n\r\nIn the table instead of the alias, stamina and skill of the object, it is printing {mname.alias}, {mname.skill} and {mname.stamina}\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>What I mean, is, if the object was called wildwolf and I wanted to pass that object name to the function combat:</p>\n<p>combat (\"wildwolf\")</p>\n<p>then in the function:</p>\n<p><code>&lt;function name=\"combat\" parameters=\"mname\" type=\"string\"&gt;</code></p>\n<p>Then inside that function I'd like to do:</p>\n<p>msg (mname.stamina)</p>\n<p>But, when I try to use that in a msg to create a table. As such:</p>\n<p><code>&lt;table style=\"width: 75%\"&gt;&lt;tr&gt;&lt;th&gt;Combantant&lt;/th&gt; &lt;th align=\"center\"&gt;Skill&lt;/th&gt; &lt;th align=\"center\"&gt;Stamina&lt;/th&gt; &lt;th align=\"center\"&gt;Luck&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;&lt;font color=\"blue\"&gt;Player&lt;/b&gt;&lt;/font&gt;&lt;/td&gt; &lt;td align=\"center\"&gt;{player.skillcurrent}&lt;/td&gt; &lt;td align=\"center\"&gt;{player.staminacurrent}&lt;/td&gt; &lt;td align=\"center\"&gt;{player.luckcurrent}&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;&lt;b&gt;&lt;font color=\"red\"&gt;{mname.alias}&lt;/b&gt;&lt;/font&gt;&lt;/td&gt; &lt;td align=\"center\"&gt;{mname.mskill}&lt;/td&gt; &lt;td align=\"center\"&gt;{mname.mstamina}&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;</code></p>\n<p>In the table instead of the alias, stamina and skill of the object, it is printing {mname.alias}, {mname.skill} and {mname.stamina}</p>\n\n",
      "PostDate": "2018-01-23T12:31:02.8123302Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fa46e8f5-b965-4010-ae6c-adc38dc93d1c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You need to send the object, not its name, to the function, so:\r\n```\r\ncombat (wildwolf)\r\n```\r\nWhen it has quotes around it, it is a string.",
      "EditableFormat": "markdown",
      "HTML": "<p>You need to send the object, not its name, to the function, so:</p>\n<pre><code>combat (wildwolf)\n</code></pre>\n<p>When it has quotes around it, it is a string.</p>\n\n",
      "PostDate": "2018-01-23T13:00:03.5931039Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a48ec755-13dd-4ce6-ba1d-1b0a73d525b8",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, that fixed some errors. But it is still not working right in the table. I get this:\r\n\r\nCombantant\tSkill\tStamina\tLuck\r\nPlayer\t                      8\t       21\t             9\r\n{mname.alias}\t{mname.mskill}\t{mname.mstamina}",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, that fixed some errors. But it is still not working right in the table. I get this:</p>\n<p>Combantant\tSkill\tStamina\tLuck<br>\nPlayer\t                      8\t       21\t             9<br>\n{mname.alias}\t{mname.mskill}\t{mname.mstamina}</p>\n\n",
      "PostDate": "2018-01-23T13:14:59.1338763Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0211fd0d-2ffb-4117-88ef-6facb644a796",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The other problem is that the text processor cannot use local variable, which includes parameters from functions. When you do the `msg` command, the bit of Quest that is handling that has no idea what `mname` is.\r\n\r\nThe best way around that is to insert the values into the string, something like:\r\n\r\n```\r\n\"The thing is called \" + mname.alias + \".\"\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The other problem is that the text processor cannot use local variable, which includes parameters from functions. When you do the <code>msg</code> command, the bit of Quest that is handling that has no idea what <code>mname</code> is.</p>\n<p>The best way around that is to insert the values into the string, something like:</p>\n<pre><code>\"The thing is called \" + mname.alias + \".\"\n</code></pre>\n\n",
      "PostDate": "2018-01-23T14:07:24.8880483Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d0db814-2672-49fe-b0be-bc6d876eba17",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If mname is an object reference, you can use:\r\n```\r\nmsg (\"The thing is called \" + mname.alias + \".\")\r\n```\r\nas Pixie suggests.\r\n\r\nUsing a variable that contains the name of an object is generally a bad idea; but there might be some circumstances where that's what you've got (for example, the GetExit functions return the name of an exit, not an actual object). In that case, there's two ways to do it:\r\n1. `msg (\"The thing is called \" + GetObject(mname).alias + \".\")`\r\n2. `msg (\"The thing is called {\" + mname + \".alias}.\")`\r\n\r\nI'm not 100% sure, but I think the second one of those will be more efficient.",
      "EditableFormat": "markdown",
      "HTML": "<p>If mname is an object reference, you can use:</p>\n<pre><code>msg (\"The thing is called \" + mname.alias + \".\")\n</code></pre>\n<p>as Pixie suggests.</p>\n<p>Using a variable that contains the name of an object is generally a bad idea; but there might be some circumstances where that's what you've got (for example, the GetExit functions return the name of an exit, not an actual object). In that case, there's two ways to do it:</p>\n<ol>\n<li><code>msg (\"The thing is called \" + GetObject(mname).alias + \".\")</code></li>\n<li><code>msg (\"The thing is called {\" + mname + \".alias}.\")</code></li>\n</ol>\n<p>I'm not 100% sure, but I think the second one of those will be more efficient.</p>\n\n",
      "PostDate": "2018-01-23T16:06:05.6959069Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6fe1d080-3102-4a53-800c-cb50a6d027d8",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n------------------\r\n\r\nif/when you can, using the text processor commands is very convenient/nice/great/wonderful/easier-(for more simple stuff anyways)/quicker/etc\r\n\r\n--------\r\n\r\nhowever, you can always fall back on and use the \"normal\" scripting too (as well as thus also being able to use very useful concatenation):\r\n\r\nthe secret trick: break it into chunks:\r\n\r\n```\r\n\"TEXT\"\r\n+ VARIABLE +\r\n```\r\n\r\nfor example:\r\n\r\n```\r\nplayer.alias = \"Joe\"\r\nplayer.age_int = 18\r\nplayer.age_str = \"adult\"\r\nplayer.sex = \"male\"\r\nplayer.race = \"human\"\r\nplayer.class = \"warrior\"\r\n```\r\n\r\n// output/displayment:\r\n\r\n```\r\nJoe is a 18 year old adult male human warrior.\r\n```\r\n\r\nusing text processor commands:\r\n\r\n```\r\nmsg (\"{player.alias} is a {player.age_int} year old {player.age_str} {player.sex} {player.race} {player.class}.\")\r\n```\r\n\r\nusing \"normal\" scripting:\r\n\r\n```\r\nmsg (player.alias + \" is a \" + player.age_int + \" year old \" + player.age_str + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\")\r\n```\r\n\r\nthe chunks: 12\r\n\r\n```\r\n01. player.alias +\r\n02. \"(SPACE)is(SPACE)a(SPACE)\"\r\n03. + player.age_int +\r\n04. \"(SPACE)year(SPACE)old(SPACE)\"\r\n05. + player.age_str +\r\n06. \"(SPACE)\"\r\n07. + player.sex +\r\n08. \"(SPACE)\"\r\n09. + player.race +\r\n10. \"(SPACE)\"\r\n11. + player.class +\r\n12. \"(DOT/PERIOD)\"\r\n```\r\n\r\nor, if this makes more sense:\r\n\r\nthe chunks (and CONNECTORS: +): 23\r\n\r\n```\r\n01. player.alias\r\n02. (CONNECTOR_OF_STRING-VARIABLE): +\r\n03. \"(SPACE)is(SPACE)a(SPACE)\"\r\n04. (CONNECTOR_OF_STRING-VARIABLE): +\r\n05. player.age_int\r\n06. (CONNECTOR_OF_STRING-VARIABLE): +\r\n07. \"(SPACE)year(SPACE)old(SPACE)\"\r\n08. (CONNECTOR_OF_STRING-VARIABLE): +\r\n09. player.age_str\r\n10. (CONNECTOR_OF_STRING-VARIABLE): +\r\n11. \"(SPACE)\"\r\n12. (CONNECTOR_OF_STRING-VARIABLE): +\r\n13. player.sex\r\n14. (CONNECTOR_OF_STRING-VARIABLE): +\r\n15. \"(SPACE)\"\r\n16. (CONNECTOR_OF_STRING-VARIABLE): +\r\n17. player.race\r\n18. (CONNECTOR_OF_STRING-VARIABLE): +\r\n19. \"(SPACE)\"\r\n20. (CONNECTOR_OF_STRING-VARIABLE): +\r\n21. player.class\r\n22. (CONNECTOR_OF_STRING-VARIABLE): +\r\n23. \"(DOT/PERIOD)\"\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>if/when you can, using the text processor commands is very convenient/nice/great/wonderful/easier-(for more simple stuff anyways)/quicker/etc</p>\n<hr>\n<p>however, you can always fall back on and use the \"normal\" scripting too (as well as thus also being able to use very useful concatenation):</p>\n<p>the secret trick: break it into chunks:</p>\n<pre><code>\"TEXT\"\n+ VARIABLE +\n</code></pre>\n<p>for example:</p>\n<pre><code>player.alias = \"Joe\"\nplayer.age_int = 18\nplayer.age_str = \"adult\"\nplayer.sex = \"male\"\nplayer.race = \"human\"\nplayer.class = \"warrior\"\n</code></pre>\n<p>// output/displayment:</p>\n<pre><code>Joe is a 18 year old adult male human warrior.\n</code></pre>\n<p>using text processor commands:</p>\n<pre><code>msg (\"{player.alias} is a {player.age_int} year old {player.age_str} {player.sex} {player.race} {player.class}.\")\n</code></pre>\n<p>using \"normal\" scripting:</p>\n<pre><code>msg (player.alias + \" is a \" + player.age_int + \" year old \" + player.age_str + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\")\n</code></pre>\n<p>the chunks: 12</p>\n<pre><code>01. player.alias +\n02. \"(SPACE)is(SPACE)a(SPACE)\"\n03. + player.age_int +\n04. \"(SPACE)year(SPACE)old(SPACE)\"\n05. + player.age_str +\n06. \"(SPACE)\"\n07. + player.sex +\n08. \"(SPACE)\"\n09. + player.race +\n10. \"(SPACE)\"\n11. + player.class +\n12. \"(DOT/PERIOD)\"\n</code></pre>\n<p>or, if this makes more sense:</p>\n<p>the chunks (and CONNECTORS: +): 23</p>\n<pre><code>01. player.alias\n02. (CONNECTOR_OF_STRING-VARIABLE): +\n03. \"(SPACE)is(SPACE)a(SPACE)\"\n04. (CONNECTOR_OF_STRING-VARIABLE): +\n05. player.age_int\n06. (CONNECTOR_OF_STRING-VARIABLE): +\n07. \"(SPACE)year(SPACE)old(SPACE)\"\n08. (CONNECTOR_OF_STRING-VARIABLE): +\n09. player.age_str\n10. (CONNECTOR_OF_STRING-VARIABLE): +\n11. \"(SPACE)\"\n12. (CONNECTOR_OF_STRING-VARIABLE): +\n13. player.sex\n14. (CONNECTOR_OF_STRING-VARIABLE): +\n15. \"(SPACE)\"\n16. (CONNECTOR_OF_STRING-VARIABLE): +\n17. player.race\n18. (CONNECTOR_OF_STRING-VARIABLE): +\n19. \"(SPACE)\"\n20. (CONNECTOR_OF_STRING-VARIABLE): +\n21. player.class\n22. (CONNECTOR_OF_STRING-VARIABLE): +\n23. \"(DOT/PERIOD)\"\n</code></pre>\n\n",
      "PostDate": "2018-01-23T20:35:13.8540847Z",
      "LastEditDate": "2018-01-23T20:44:28.3116391Z",
      "link": null
    },
    {
      "PostId": "e52ef511-0193-466e-981c-b3e17a4ba62a",
      "UserId": 340011,
      "Username": "wooterslw",
      "AvatarUrl": "https://secure.gravatar.com/avatar/7d20dd39301d8b9be2be0abaf005968d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That made no sense. lol But Pixie's example worked. Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>That made no sense. lol But Pixie's example worked. Thanks!</p>\n\n",
      "PostDate": "2018-01-23T20:51:56.9849536Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "080b1e05-7056-427b-8d57-22261588a11d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was just trying to explain how to correctly do the syntax for the \"normal\" scripting method, as it's very confusing for non-coders or for beginners at coding.\r\n\r\nwhen I first started... I had trouble with it... and the \"secret trick of breaking it into chunks\", made the syntax easy for me to get correct without errors.\r\n\r\n---------\r\n\r\nhere's the comparison of the two methods:\r\n\r\nfor an example:\r\n\r\n```\r\nplayer.alias = \"Joe\"\r\nplayer.age_int = 18\r\nplayer.age_str = \"adult\"\r\nplayer.sex = \"male\"\r\nplayer.race = \"human\"\r\nplayer.class = \"warrior\"\r\n```\r\n\r\nif you want this output/displayment of:\r\n\r\n```\r\nJoe is a 18 year old adult male human warrior.\r\n```\r\n\r\nto get it coded/written/syntax'ed correctly without errors:\r\n\r\n1. using text processor commands:\r\n\r\n```\r\nmsg (\"{player.alias} is a {player.age_int} year old {player.age_str} {player.sex} {player.race} {player.class}.\")\r\n```\r\n\r\nor\r\n\r\n2. using \"normal\" scripting:\r\n\r\n```\r\nmsg (player.alias + \" is a \" + player.age_int + \" year old \" + player.age_str + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I was just trying to explain how to correctly do the syntax for the \"normal\" scripting method, as it's very confusing for non-coders or for beginners at coding.</p>\n<p>when I first started... I had trouble with it... and the \"secret trick of breaking it into chunks\", made the syntax easy for me to get correct without errors.</p>\n<hr>\n<p>here's the comparison of the two methods:</p>\n<p>for an example:</p>\n<pre><code>player.alias = \"Joe\"\nplayer.age_int = 18\nplayer.age_str = \"adult\"\nplayer.sex = \"male\"\nplayer.race = \"human\"\nplayer.class = \"warrior\"\n</code></pre>\n<p>if you want this output/displayment of:</p>\n<pre><code>Joe is a 18 year old adult male human warrior.\n</code></pre>\n<p>to get it coded/written/syntax'ed correctly without errors:</p>\n<ol>\n<li>using text processor commands:</li>\n</ol>\n<pre><code>msg (\"{player.alias} is a {player.age_int} year old {player.age_str} {player.sex} {player.race} {player.class}.\")\n</code></pre>\n<p>or</p>\n<ol start=\"2\">\n<li>using \"normal\" scripting:</li>\n</ol>\n<pre><code>msg (player.alias + \" is a \" + player.age_int + \" year old \" + player.age_str + \" \" + player.sex + \" \" + player.race + \" \" + player.class + \".\")\n</code></pre>\n\n",
      "PostDate": "2018-01-23T20:58:52.9371301Z",
      "LastEditDate": "2018-01-23T21:04:10.4088063Z",
      "link": null
    }
  ]
}
