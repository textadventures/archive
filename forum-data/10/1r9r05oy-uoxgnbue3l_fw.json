{
  "Topic": {
    "TopicId": "1r9r05oy-uoxgnbue3l_fw",
    "ForumId": "10",
    "Title": "setting an attribute equivalent to the result of a function",
    "LastUpdated": "2018-08-15T23:39:40.6840187Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d7b55024-b989-42a9-baaf-7c7ccfd04476",
      "UserId": 372309,
      "Username": "apelisson57",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello everyone,\r\n\r\nI'm trying to do something like this:\r\n\r\nGiven an object which has a two attributes, ```object.length``` and ```object.width```, I want to write a function ```CalculateArea(height, width)``` which, when called will return the area (i.e. length * width), and make it so that ```object.area``` is equivalent to the return value of that function.\r\n\r\nMy function looks like this: \r\n```\r\n<function name=\"CalculateArea\" parameters=\"object, length, width\" type=\"int\">\r\n    newlength = GetAttribute (object, length)\r\n    newwidth = GetAttribute (object, width)\r\n    areaReturn = newlength * newwidth\r\n    return (areaReturn)\r\n </function>\r\n```\r\n\r\nThe problem is, the attribute itself looks like it is a script rather than an int:\r\n```\r\n<area type=\"script\">\r\n        CalculateArea (object, length, width)\r\n </bmi>\r\n```\r\nAdditionally, when trying to test it out in the game by printing the expression ```\"The area is \" + object.area```, I just get \"The area is Script:\"\r\n\r\nI don't want to just set the area outright, since length and width can change depending on events in the game, and I wanted to be able to update the area attribute automatically. Is this possible? Or should I look for another way/update it manually?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello everyone,</p>\n<p>I'm trying to do something like this:</p>\n<p>Given an object which has a two attributes, <code>object.length</code> and <code>object.width</code>, I want to write a function <code>CalculateArea(height, width)</code> which, when called will return the area (i.e. length * width), and make it so that <code>object.area</code> is equivalent to the return value of that function.</p>\n<p>My function looks like this:</p>\n<pre><code>&lt;function name=\"CalculateArea\" parameters=\"object, length, width\" type=\"int\"&gt;\n    newlength = GetAttribute (object, length)\n    newwidth = GetAttribute (object, width)\n    areaReturn = newlength * newwidth\n    return (areaReturn)\n &lt;/function&gt;\n</code></pre>\n<p>The problem is, the attribute itself looks like it is a script rather than an int:</p>\n<pre><code>&lt;area type=\"script\"&gt;\n        CalculateArea (object, length, width)\n &lt;/bmi&gt;\n</code></pre>\n<p>Additionally, when trying to test it out in the game by printing the expression <code>\"The area is \" + object.area</code>, I just get \"The area is Script:\"</p>\n<p>I don't want to just set the area outright, since length and width can change depending on events in the game, and I wanted to be able to update the area attribute automatically. Is this possible? Or should I look for another way/update it manually?</p>\n\n",
      "PostDate": "2018-08-15T23:39:40.6840187Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "14166c2b-5c77-4f18-8c84-7c107b1202af",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The script that calculates the area, and the value of the area, are different things.\r\n\r\nIn this case, you want two script attributes:\r\n\r\n```\r\n<changedlength type=\"script\">\r\n  this.area = CalculateArea (this, \"length\", \"width\")\r\n</changedlength>\r\n\r\n<changedwidth type=\"script\">\r\n  this.area = CalculateArea (this, \"length\", \"width\")\r\n</changedwidth>\r\n```\r\n\r\nThe special \"changed\" script attributes are called whenever an attribute changes. So in this case, the area attribute changes automatically whenever the height or width changes.\r\n\r\nI have no idea why you are passing the name of the length and width attributes to CalculateArea. This seems really pointless, unless you have some objects where the attributes are named differently, but I've not touched it because I guess you're using this as an example and your real code is more complex.",
      "EditableFormat": "markdown",
      "HTML": "<p>The script that calculates the area, and the value of the area, are different things.</p>\n<p>In this case, you want two script attributes:</p>\n<pre><code>&lt;changedlength type=\"script\"&gt;\n  this.area = CalculateArea (this, \"length\", \"width\")\n&lt;/changedlength&gt;\n\n&lt;changedwidth type=\"script\"&gt;\n  this.area = CalculateArea (this, \"length\", \"width\")\n&lt;/changedwidth&gt;\n</code></pre>\n<p>The special \"changed\" script attributes are called whenever an attribute changes. So in this case, the area attribute changes automatically whenever the height or width changes.</p>\n<p>I have no idea why you are passing the name of the length and width attributes to CalculateArea. This seems really pointless, unless you have some objects where the attributes are named differently, but I've not touched it because I guess you're using this as an example and your real code is more complex.</p>\n\n",
      "PostDate": "2018-08-15T23:57:27.422727Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "68aeed43-9cc8-4c37-bb79-e15703ddaa61",
      "UserId": 372309,
      "Username": "apelisson57",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So how would I call the changedlength/changedwidth attribute scripts? Would I put a line ```object.changedlength``` immediately after I change the length?",
      "EditableFormat": "markdown",
      "HTML": "<p>So how would I call the changedlength/changedwidth attribute scripts? Would I put a line <code>object.changedlength</code> immediately after I change the length?</p>\n\n",
      "PostDate": "2018-08-16T00:34:35.1118324Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b2bac6a1-bf15-4523-a9c9-93bf8eba0a18",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`changedlength` is called automatically whenever `length` is changed.",
      "EditableFormat": "markdown",
      "HTML": "<p><code>changedlength</code> is called automatically whenever <code>length</code> is changed.</p>\n\n",
      "PostDate": "2018-08-16T01:26:25.8840241Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6b73e31d-cf21-4bbd-a651-8cbf0ef41695",
      "UserId": 372309,
      "Username": "apelisson57",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, thank you so much for the advice!\r\n\r\nI think my main problem with using Quest has been approaching it like any other programming language rather than keeping in mind that it functions a lot differently.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, thank you so much for the advice!</p>\n<p>I think my main problem with using Quest has been approaching it like any other programming language rather than keeping in mind that it functions a lot differently.</p>\n\n",
      "PostDate": "2018-08-16T02:39:58.2959704Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2f7b9e88-96a9-4ec8-90a3-c5563ad33b21",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(quest actually is not too different from the main programming languages, aside from it also being a text adventure game engine, but you do got to learn it, its syntaxes, and its various features/functionalities, like with any programming language/software)\r\n\r\nthere's a lot of built-in functionality already for you (and Pixie has been adding in more RPG and whatever useful functionality - which has been lacking), the special built-in 'changedNAME_OF_ATTRIBUTE' Script Attributes are very useful, as they're fired/activated/executed automatically upon that Attribute's Value changing\r\n\r\nthe other method is using Turnscripts, which fire/activate/execute every internal 'turn' (either an entered command/typed-in-input into the text command box at the bottom of the screen and/or a mouse click upon whatever), so long as the Turnscript is enabled, and if a local Turnscript, if you're in the same room as it, of course.\r\n\r\n--------\r\n\r\nyou could certainly have made your own Script Attribute to call/use/activate/execute your function (however, it by itself is only a single usage, so if you want it to be a multiple/continuous usage, you got to make it be so through various methods):\r\n\r\n(modified it into a more simple design for this example... but if you want it the same as your design, let me know)\r\n\r\n-----------------\r\n\r\n```\r\n<object name=\"new_rectangle\">\r\n\r\n  <attr name=\"area\" type=\"int\">0</attr>\r\n\r\n  <attr name\"area_script\" type=\"script\">\r\n\r\n    this.area = CalculateArea (old_rectangle)\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"old_rectangle\">\r\n\r\n  <attr name=\"length\" type=\"int\">5</attr>\r\n  <attr name=\"width\" type=\"int\">10</attr>\r\n\r\n</object>\r\n\r\n<function name=\"CalculateArea\" parameters=\"object\" type=\"int\">\r\n\r\n    if (HasInt (object, \"length\") and HasInt (object, \"width\")) {\r\n      newlength = GetAttribute (object, \"length\")\r\n      newwidth = GetAttribute (object, \"width\")\r\n      areaReturn = newlength * newwidth\r\n      return (areaReturn)\r\n    } else if (HasInt (object, \"length\")) {\r\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'width' Integer Attribute, which is required\")\r\n      return (-1)\r\n    } else {\r\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'length' Integer Attribute, which is required\")\r\n      return (-2)\r\n    }\r\n\r\n </function>\r\n```\r\n\r\n-----------\r\n\r\nand if you want to use a bit more advanced encapsulation design:\r\n\r\n(modified it into a more simple design for this example... but if you want it the same as your design, let me know)\r\n\r\n('delegates' in quest are basically Function Prototypes, which enable your Objects' Script Attributes to act as Functions: having/using parameters and/or return values)\r\n\r\nhttp://docs.textadventures.co.uk/quest/types/using_delegates.html\r\n\r\nif you have a return value, you must use: RunDelegateFunction (XXX)\r\n\r\notherwise, you use: rundelegate (XXX)\r\n\r\n```\r\n<delegate name=\"area_delegate\" parameters=\"object\" type=\"int\" />\r\n\r\n<object name=\"new_rectangle\">\r\n\r\n  <attr name=\"area\" type=\"int\">0</attr>\r\n\r\n  <attr name=\"area_2\" type=\"int\">0</attr>\r\n\r\n  <attr name\"SetArea\" type=\"script\">\r\n\r\n    this.area = RunDelegateFunction (old_rectangle, \"CalculateArea\", old_rectangle)\r\n\r\n    this.area_2 = RunDelegateFunction (old_rectangle, \"CalculateArea\", old_rectangle_2)\r\n\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"old_rectangle_2\">\r\n\r\n  <attr name=\"length\" type=\"int\">8</attr>\r\n  <attr name=\"width\" type=\"int\">3</attr>\r\n\r\n</object>\r\n\r\n<object name=\"old_rectangle\">\r\n\r\n  <attr name=\"length\" type=\"int\">5</attr>\r\n  <attr name=\"width\" type=\"int\">10</attr>\r\n\r\n  <attr name=\"CalculateArea\" type=\"area_delegate\">\r\n\r\n    if (HasInt (object, \"length\") and HasInt (object, \"width\")) {\r\n      newlength = GetAttribute (object, \"length\")\r\n      newwidth = GetAttribute (object, \"width\")\r\n      areaReturn = newlength * newwidth\r\n      return (areaReturn)\r\n    } else if (HasInt (object, \"length\")) {\r\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'width' Integer Attribute, which is required\")\r\n      return (-1)\r\n    } else {\r\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'length' Integer Attribute, which is required\")\r\n      return (-2)\r\n    }\r\n\r\n  </attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(quest actually is not too different from the main programming languages, aside from it also being a text adventure game engine, but you do got to learn it, its syntaxes, and its various features/functionalities, like with any programming language/software)</p>\n<p>there's a lot of built-in functionality already for you (and Pixie has been adding in more RPG and whatever useful functionality - which has been lacking), the special built-in 'changedNAME_OF_ATTRIBUTE' Script Attributes are very useful, as they're fired/activated/executed automatically upon that Attribute's Value changing</p>\n<p>the other method is using Turnscripts, which fire/activate/execute every internal 'turn' (either an entered command/typed-in-input into the text command box at the bottom of the screen and/or a mouse click upon whatever), so long as the Turnscript is enabled, and if a local Turnscript, if you're in the same room as it, of course.</p>\n<hr>\n<p>you could certainly have made your own Script Attribute to call/use/activate/execute your function (however, it by itself is only a single usage, so if you want it to be a multiple/continuous usage, you got to make it be so through various methods):</p>\n<p>(modified it into a more simple design for this example... but if you want it the same as your design, let me know)</p>\n<hr>\n<pre><code>&lt;object name=\"new_rectangle\"&gt;\n\n  &lt;attr name=\"area\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name\"area_script\" type=\"script\"&gt;\n\n    this.area = CalculateArea (old_rectangle)\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"old_rectangle\"&gt;\n\n  &lt;attr name=\"length\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"width\" type=\"int\"&gt;10&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;function name=\"CalculateArea\" parameters=\"object\" type=\"int\"&gt;\n\n    if (HasInt (object, \"length\") and HasInt (object, \"width\")) {\n      newlength = GetAttribute (object, \"length\")\n      newwidth = GetAttribute (object, \"width\")\n      areaReturn = newlength * newwidth\n      return (areaReturn)\n    } else if (HasInt (object, \"length\")) {\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'width' Integer Attribute, which is required\")\n      return (-1)\n    } else {\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'length' Integer Attribute, which is required\")\n      return (-2)\n    }\n\n &lt;/function&gt;\n</code></pre>\n<hr>\n<p>and if you want to use a bit more advanced encapsulation design:</p>\n<p>(modified it into a more simple design for this example... but if you want it the same as your design, let me know)</p>\n<p>('delegates' in quest are basically Function Prototypes, which enable your Objects' Script Attributes to act as Functions: having/using parameters and/or return values)</p>\n<p>http://docs.textadventures.co.uk/quest/types/using_delegates.html</p>\n<p>if you have a return value, you must use: RunDelegateFunction (XXX)</p>\n<p>otherwise, you use: rundelegate (XXX)</p>\n<pre><code>&lt;delegate name=\"area_delegate\" parameters=\"object\" type=\"int\" /&gt;\n\n&lt;object name=\"new_rectangle\"&gt;\n\n  &lt;attr name=\"area\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name=\"area_2\" type=\"int\"&gt;0&lt;/attr&gt;\n\n  &lt;attr name\"SetArea\" type=\"script\"&gt;\n\n    this.area = RunDelegateFunction (old_rectangle, \"CalculateArea\", old_rectangle)\n\n    this.area_2 = RunDelegateFunction (old_rectangle, \"CalculateArea\", old_rectangle_2)\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"old_rectangle_2\"&gt;\n\n  &lt;attr name=\"length\" type=\"int\"&gt;8&lt;/attr&gt;\n  &lt;attr name=\"width\" type=\"int\"&gt;3&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"old_rectangle\"&gt;\n\n  &lt;attr name=\"length\" type=\"int\"&gt;5&lt;/attr&gt;\n  &lt;attr name=\"width\" type=\"int\"&gt;10&lt;/attr&gt;\n\n  &lt;attr name=\"CalculateArea\" type=\"area_delegate\"&gt;\n\n    if (HasInt (object, \"length\") and HasInt (object, \"width\")) {\n      newlength = GetAttribute (object, \"length\")\n      newwidth = GetAttribute (object, \"width\")\n      areaReturn = newlength * newwidth\n      return (areaReturn)\n    } else if (HasInt (object, \"length\")) {\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'width' Integer Attribute, which is required\")\n      return (-1)\n    } else {\n      msg (\"ERROR: the inputted \" + object.name + \" Object doesn't have a 'length' Integer Attribute, which is required\")\n      return (-2)\n    }\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2018-08-16T07:55:56.3516815Z",
      "LastEditDate": "2018-08-16T08:13:56.0146336Z",
      "link": null
    }
  ]
}
