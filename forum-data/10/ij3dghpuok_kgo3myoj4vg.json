{
  "Topic": {
    "TopicId": "ij3dghpuok_kgo3myoj4vg",
    "ForumId": "10",
    "Title": "Thinking about the text processor",
    "LastUpdated": "2018-04-17T11:02:15.5523864Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "781e31d3-774d-4efd-b4a4-6d8b36bb6271",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looking at how the text processor is implemented, I wonder if it could be made more flexible.\r\n\r\nIf you look in CoreOutput.aslx now, you'll see this function:\r\n\r\n```\r\n  <function name=\"ProcessTextCommand\" type=\"string\" parameters=\"section, data\">\r\n    if (StartsWith(section, \"if \")) {\r\n      return (ProcessTextCommand_If(section, data))\r\n    }\r\n    else if (StartsWith(section, \"either \")) {\r\n      return (ProcessTextCommand_Either(section, data))\r\n    }\r\n    else if (StartsWith(section, \"here \")) {\r\n      return (ProcessTextCommand_Here(section, data, true))\r\n    }\r\n    else if (StartsWith(section, \"nothere \")) {\r\n[···and so on···]\r\n```\r\n\r\nI was just thinking, it might be useful to put all those options in a script dictionary:\r\n```\r\n  <function name=\"ProcessTextCommand\" type=\"string\" parameters=\"section, data\">\r\n    params = NewDictionary()\r\n    dictionary add (params, \"section\", section)\r\n    dictionary add (params, \"data\", data)\r\n    foreach (command, game.textprocessorcommands) {\r\n      if (StartsWith(section, command)) {\r\n        invoke (ScriptDictionaryItem(game.textprocessorcommands, command), params)\r\n        if (HasString(game, \"textprocessorcommandresult\")) {\r\n          result = game.textprocessorcommandresult\r\n          game.textprocessorcommandresult = null\r\n          return (result)\r\n        }\r\n      }\r\n    }\r\n    // If we haven't returned yet, the stuff from the final else clause goes here\r\n    // to handle the {object.attribute} notation\r\n  </function>\r\n```\r\n\r\nIt's a bit of a hassle handling return values (as I don't think a script attribute can just return something; though I could be misremembering). But having a loop over a dictionary rather than a huge list of `else if` clauses would make it easier to add your own text processor commands; which I think might be useful in some circumstances.",
      "EditableFormat": "markdown",
      "HTML": "<p>Looking at how the text processor is implemented, I wonder if it could be made more flexible.</p>\n<p>If you look in CoreOutput.aslx now, you'll see this function:</p>\n<pre><code>  &lt;function name=\"ProcessTextCommand\" type=\"string\" parameters=\"section, data\"&gt;\n    if (StartsWith(section, \"if \")) {\n      return (ProcessTextCommand_If(section, data))\n    }\n    else if (StartsWith(section, \"either \")) {\n      return (ProcessTextCommand_Either(section, data))\n    }\n    else if (StartsWith(section, \"here \")) {\n      return (ProcessTextCommand_Here(section, data, true))\n    }\n    else if (StartsWith(section, \"nothere \")) {\n[···and so on···]\n</code></pre>\n<p>I was just thinking, it might be useful to put all those options in a script dictionary:</p>\n<pre><code>  &lt;function name=\"ProcessTextCommand\" type=\"string\" parameters=\"section, data\"&gt;\n    params = NewDictionary()\n    dictionary add (params, \"section\", section)\n    dictionary add (params, \"data\", data)\n    foreach (command, game.textprocessorcommands) {\n      if (StartsWith(section, command)) {\n        invoke (ScriptDictionaryItem(game.textprocessorcommands, command), params)\n        if (HasString(game, \"textprocessorcommandresult\")) {\n          result = game.textprocessorcommandresult\n          game.textprocessorcommandresult = null\n          return (result)\n        }\n      }\n    }\n    // If we haven't returned yet, the stuff from the final else clause goes here\n    // to handle the {object.attribute} notation\n  &lt;/function&gt;\n</code></pre>\n<p>It's a bit of a hassle handling return values (as I don't think a script attribute can just return something; though I could be misremembering). But having a loop over a dictionary rather than a huge list of <code>else if</code> clauses would make it easier to add your own text processor commands; which I think might be useful in some circumstances.</p>\n\n",
      "PostDate": "2018-04-17T11:02:15.5523864Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e20626f7-9f30-4b93-ae3d-1e52b7737a2d",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It will be in Quest 5.8...",
      "EditableFormat": "markdown",
      "HTML": "<p>It will be in Quest 5.8...</p>\n\n",
      "PostDate": "2018-05-02T12:46:05.7221399Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fc732d9-5960-480b-91f0-0e6755ca5ff2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ mrangel:\r\n\r\nyep, good spot with how the text processor commands are coding (and where its coding is located in the core code, lol) !!!\r\n\r\nas any long (numerous) 'if/switch' checking conditions, can (should) be done instread by list/dictionary iteration, making it easier on us humans\r\n\r\nI need to get more familar with the core code myself... sighs... HK is lazy...\r\n\r\n---------\r\n\r\n@ mrangel:\r\n\r\nhttp://docs.textadventures.co.uk/quest/types/using_delegates.html\r\n\r\nScript Attributes can function exactly like a Function (return, parameters) via using 'Delegates' (basically a Delegate is just like a 'Prototype' for a Function, but for a Script Attribute instead):\r\n\r\n```\r\n<function name=\"example_function\"> parameters=\"example_string_parameter\" type=\"string\">\r\n  return (example_string_parameter)\r\n</function>\r\n\r\n// scripting example: \r\n\r\nstring_variable = example_function (\"hi\")\r\nmsg (string_variable)\r\n\r\n// --------------------------------------\r\n\r\nwhich you can see is the same (aside from the difference of an Object vs a Function, lol) as a Script Attribute using Delegates:\r\n\r\n<delegate name=\"example_delegate\" parameters=\"example_string_parameter\" type=\"string\" />\r\n\r\n<object name=\"example_object\">\r\n\r\n  <attr name=\"example_script_attribute\" type=\"example_delegate\">\r\n    return (example_string_parameter)\r\n  </attr>\r\n\r\n</object>\r\n\r\n// scripting example:\r\n\r\n// rundelegate: for NO return value\r\n// RunDelegateFunction: for a return value\r\n\r\nstring_variable = RunDelegateFunction (example_object, \"example_script_attribute\", \"hi\")\r\nmsg (string_variable)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@ mrangel:</p>\n<p>yep, good spot with how the text processor commands are coding (and where its coding is located in the core code, lol) !!!</p>\n<p>as any long (numerous) 'if/switch' checking conditions, can (should) be done instread by list/dictionary iteration, making it easier on us humans</p>\n<p>I need to get more familar with the core code myself... sighs... HK is lazy...</p>\n<hr>\n<p>@ mrangel:</p>\n<p>http://docs.textadventures.co.uk/quest/types/using_delegates.html</p>\n<p>Script Attributes can function exactly like a Function (return, parameters) via using 'Delegates' (basically a Delegate is just like a 'Prototype' for a Function, but for a Script Attribute instead):</p>\n<pre><code>&lt;function name=\"example_function\"&gt; parameters=\"example_string_parameter\" type=\"string\"&gt;\n  return (example_string_parameter)\n&lt;/function&gt;\n\n// scripting example: \n\nstring_variable = example_function (\"hi\")\nmsg (string_variable)\n\n// --------------------------------------\n\nwhich you can see is the same (aside from the difference of an Object vs a Function, lol) as a Script Attribute using Delegates:\n\n&lt;delegate name=\"example_delegate\" parameters=\"example_string_parameter\" type=\"string\" /&gt;\n\n&lt;object name=\"example_object\"&gt;\n\n  &lt;attr name=\"example_script_attribute\" type=\"example_delegate\"&gt;\n    return (example_string_parameter)\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n// scripting example:\n\n// rundelegate: for NO return value\n// RunDelegateFunction: for a return value\n\nstring_variable = RunDelegateFunction (example_object, \"example_script_attribute\", \"hi\")\nmsg (string_variable)\n</code></pre>\n\n",
      "PostDate": "2018-05-02T15:25:52.9190349Z",
      "LastEditDate": "2018-05-02T15:29:25.0468755Z",
      "link": null
    }
  ]
}
