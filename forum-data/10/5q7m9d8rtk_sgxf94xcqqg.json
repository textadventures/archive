{
  "Topic": {
    "TopicId": "5q7m9d8rtk_sgxf94xcqqg",
    "ForumId": "10",
    "Title": "Some questions about 'show menu'",
    "LastUpdated": "2018-03-17T17:10:31.6789848Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "25f4d0b4-67ea-4c48-9561-82b727ce3722",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it possible to create menu options without numbers?\r\n\r\nIs it possible to create menu options without starting a new line? \r\n  Or having a menu option inside normal text?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it possible to create menu options without numbers?</p>\n<p>Is it possible to create menu options without starting a new line?<br>\nOr having a menu option inside normal text?</p>\n\n",
      "PostDate": "2018-03-17T17:10:31.6789848Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63158614-f4e1-4a3a-a82b-a31ad2b67c19",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just found [this thread](https://textadventures.co.uk/forum/quest/topic/tboxwutslekq5nffgxdrtg/abusing-showmenu/ \"this thread\").",
      "EditableFormat": "markdown",
      "HTML": "<p>Just found <a href=\"https://textadventures.co.uk/forum/quest/topic/tboxwutslekq5nffgxdrtg/abusing-showmenu/\" title=\"this thread\">this thread</a>.</p>\n\n",
      "PostDate": "2018-03-17T17:16:45.244583Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0baffb48-be70-45a1-ab70-f98f2119bc63",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "there's also the built-in 'DisplayList' Script/Function (though creating your own menu in how you want it is best): http://docs.textadventures.co.uk/quest/functions/corelibrary/displaylist.html\r\n\r\nDisplayList (NAME_OF_LIST, true) // the 'true' Boolean Value will cause the displayed list items to be numbered\r\nDisplayList (NAME_OF_LIST, false) // the 'false' Boolean Value will cause the displayed list items to be NOT numbered\r\n\r\n--------\r\n\r\nthere's a few Scripts/Functions that have popup window and in-line (in the big text box as hyperlinks) menus:\r\n\r\n'show menu (XXX)' (popup window) vs 'ShowMenu (XXX)' (in-line/hyperlinks)\r\n'ask (XXX)' (popup window) vs 'Ask (XXX)' (in-line/hyperlinks)\r\n\r\nand there's probably some more that I'm forgetting right now, lol",
      "EditableFormat": "markdown",
      "HTML": "<p>there's also the built-in 'DisplayList' Script/Function (though creating your own menu in how you want it is best): http://docs.textadventures.co.uk/quest/functions/corelibrary/displaylist.html</p>\n<p>DisplayList (NAME_OF_LIST, true) // the 'true' Boolean Value will cause the displayed list items to be numbered<br>\nDisplayList (NAME_OF_LIST, false) // the 'false' Boolean Value will cause the displayed list items to be NOT numbered</p>\n<hr>\n<p>there's a few Scripts/Functions that have popup window and in-line (in the big text box as hyperlinks) menus:</p>\n<p>'show menu (XXX)' (popup window) vs 'ShowMenu (XXX)' (in-line/hyperlinks)<br>\n'ask (XXX)' (popup window) vs 'Ask (XXX)' (in-line/hyperlinks)</p>\n<p>and there's probably some more that I'm forgetting right now, lol</p>\n\n",
      "PostDate": "2018-03-17T17:22:56.6162491Z",
      "LastEditDate": "2018-03-17T17:26:10.4107655Z",
      "link": null
    },
    {
      "PostId": "f731337b-5a13-48d5-812b-0e8bb226a045",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Popup sounds interesting ...  \r\n\r\nMy problem with DisplayList in the past was the fact **I haven't figured out**, if possible, how to get a response to run a script on click. Like you click on a menu option and baddabadammm... Script!",
      "EditableFormat": "markdown",
      "HTML": "<p>Popup sounds interesting ...</p>\n<p>My problem with DisplayList in the past was the fact <strong>I haven't figured out</strong>, if possible, how to get a response to run a script on click. Like you click on a menu option and baddabadammm... Script!</p>\n\n",
      "PostDate": "2018-03-17T21:59:57.6423554Z",
      "LastEditDate": "2018-03-18T15:20:38.9479336Z",
      "link": null
    },
    {
      "PostId": "4ac161d0-7669-4226-86b9-f8022e1c57a6",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you want the 'verb' drop downs on hyperlink click, then you can use the 'object' text processor command (and create/have that Object you're using in the text processor command, of course):\r\n\r\nmsg (\"{object:NAME_OF_OBJECT}\")\r\n\r\n-----------------\r\n\r\nhere's an example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (\"{object:example_ball_object:ball}\")\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"example_ball_object\">\r\n  <attr name=\"kick\" type=\"script\">\r\n    msg (\"You kick the ball\")\r\n  </attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>kick</property>\r\n  <pattern>kick</pattern>\r\n  <defaultexpression>You can't kick that!</defaultexpression>\r\n</verb>\r\n```\r\n\r\n-----------------------\r\n\r\nif you want a script to run  on hyperlink click, then you can use the 'command' text processor command (and create/have that Command you're using in the text processor, of course):\r\n\r\nmsg (\"{command:NAME_OF_COMMAND}\")\r\n\r\n--------------\r\n\r\nhere's an example:\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    msg (\"{command:example_help_command:help}\")\r\n  </attr>\r\n</game>\r\n\r\n<command name=\"example_help_command\">\r\n  <pattern>help</pattern>\r\n  <script>\r\n    msg (\"When you need help, you can always type in: help\")\r\n  </script>\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>if you want the 'verb' drop downs on hyperlink click, then you can use the 'object' text processor command (and create/have that Object you're using in the text processor command, of course):</p>\n<p>msg (\"{object:NAME_OF_OBJECT}\")</p>\n<hr>\n<p>here's an example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (\"{object:example_ball_object:ball}\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"example_ball_object\"&gt;\n  &lt;attr name=\"kick\" type=\"script\"&gt;\n    msg (\"You kick the ball\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;kick&lt;/property&gt;\n  &lt;pattern&gt;kick&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't kick that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>if you want a script to run  on hyperlink click, then you can use the 'command' text processor command (and create/have that Command you're using in the text processor, of course):</p>\n<p>msg (\"{command:NAME_OF_COMMAND}\")</p>\n<hr>\n<p>here's an example:</p>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    msg (\"{command:example_help_command:help}\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;command name=\"example_help_command\"&gt;\n  &lt;pattern&gt;help&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (\"When you need help, you can always type in: help\")\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-18T13:55:40.8579019Z",
      "LastEditDate": "2018-03-18T13:59:42.8498267Z",
      "link": null
    },
    {
      "PostId": "77a1f505-08f9-40ad-8adc-6d27b5fe3526",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">if you want a script to run on hyperlink click, then you can use the 'command' text processor command (and create/have that Command you're using in the text processor, of course):\r\n>\r\n>msg (\"{command:NAME_OF_COMMAND}\")\r\n\r\nThat's very helpful. Thanks. \r\n\r\nWhy do you add **':help'** in the text processor?\r\n\r\nEdit:\r\nOkay I got it. This prints the command as any text you want.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>if you want a script to run on hyperlink click, then you can use the 'command' text processor command (and create/have that Command you're using in the text processor, of course):</p>\n<p>msg (\"{command:NAME_OF_COMMAND}\")</p>\n</blockquote>\n<p>That's very helpful. Thanks.</p>\n<p>Why do you add <strong>':help'</strong> in the text processor?</p>\n<p>Edit:<br>\nOkay I got it. This prints the command as any text you want.</p>\n\n",
      "PostDate": "2018-03-18T15:34:21.6151721Z",
      "LastEditDate": "2018-03-18T18:11:28.8825891Z",
      "link": null
    },
    {
      "PostId": "3c0c573e-106c-486f-8e70-95c6ac61711c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK ... I've rolled the code from the previous post you linked, and an earlier one on a similar subject, together.\r\n\r\nI've got some code (not yet tested) that adds a few more attributes you can change on the game object to change the behaviour of ShowMenu:\r\n\r\n* `game.alwaysshowmenunumbers` - boolean. Setting to false will make the numbers disappear.\r\n* `game.showmenutype` - string. Can be `\"number\"`, `\"bullet\"`, `\"flat\"`, or some other string which will be used as a bullet when ShowMenu is called. (\"flat\" displays the menu as a single line using FormatList).\r\n* `game.hidemenus` - boolean. If set to false, choosing a menu option will remove the links, but won't actually vanish the menu.\r\n* `game.showmenutryharder` - boolean. If true, typing a word that appears in exactly one of the menu options will choose that option; or the start of a word (like when typing object names).\r\n* `game.showmenuunresolvedcommand` - boolean. As above, but this behaviour will be pushed into the unresolved command handler, so that it only happens if the word isn't also a command. This may cause bugs if you have a command which modifies `game.unresolvedcommandhandler` during play.\r\n\r\nThere are also functions you can use to get finer-grained control, outputting a menu in pieces:\r\n\r\n* `StartShowMenu (caption)`\r\n  * Starts a menu, and displays the caption. If you do this more than once in the same menu, subsequent ones will just print the caption.\r\n* `EndShowMenu (allowCancel, hideAfterMenu, callback)`\r\n  * Marks the end of the menu, and sets the callback.\r\n  * `hideAfterMenu` - boolean. If true, everything between StartShowMenu and EndShowMenu will be hidden once an option is chosen. If false, the links will be disabled but remain on screen.\r\n* `MenuCancelledCallback (script)`\r\n  * Set a script to be run if the menu is not called.\r\n  * Note that this is a **misleading function name**, as I couldn't think of a better one.\r\n  * In the case of a menu with `allowCancel` set to false, this will be run each time the player enters something that can't be parsed as a valid choice. If you call `ClearMenu` from within the callback, you also need to call `MenuCancelledCallback(null)`.\r\n  * The callback will get the parameters:\r\n    * `options` - a dictionary of options the player didn't choose from\r\n    * `input` - what the player actually entered\r\n    * `command` - if applicable, the command that was executed instead of choosing a menu option (note that in this case, the callback will be run _after_ the command)\r\n* `AddMenuOption (option, result, displayNumber)`\r\n  * **Returns** a string containing all the HTML for a clickable link menu option. You need to use `msg()` to pass this to the player.\r\n  * `option` - The option to display. Calls GetDisplayAlias() if it's an object, using `linkcolour` if set, and ToString() for any other type that isn't a string.\r\n  * `result` - The value that the 'result' variable will be set to in the callback.\r\n    * String - `result` in the callback will be the string\r\n    * Object - `result` in the callback will be the object's name\r\n    * Anything else - `result` in the callback will be `option`'s name if it's an object, and `option` otherwise\r\n  * `displayNumber` - boolean. If true, will allow the player to select the option by typing its number. Will display like \"Would you like Red (1), Blue (2), or Yellow (3)?\". If this is a format string instead, `!` will be replaced by the option, and `#` by the number.\r\n* `AddMenuNumberedList (options)`\r\n  * **Returns** the HTML for a numbered list, like the original ShowMenu displays. You can modify this string if you want before outputting it.\r\n  * `options` - I *think* this should handle an options list in any of the formats ShowMenu supports\r\n* `AddMenuBulletList (options, bullet)`\r\n  * **Returns** a bulleted list; as above, but without numbering the options\r\n  * If `game.alwaysshowmenunumbers` is set, will add bracketed numbers after each option\r\n  * `bullet` - string, to display before each option. If `\"\"`, will return a HTML `<ul>` element instead.\r\n* `AddMenuFlatList (options, lastjoiner)`\r\n  * **Returns** a list of options on a single line, generated using `FormatList`.\r\n  * `lastjoiner` - you probably want `\"[Or]\"` or `\"[And]\"` here.\r\n* `ShowMenu`\r\n  * Same parameters as the default one. This will call `StartShowMenu`, then either AddMenuNumberedList, AddMenuBulletList, or AddMenuFlatList (depending on the value of `game.showmenutype`), then EndShowMenu.\r\n  * I've attempted to ensure that if none of the game attributes mentioned above are set, this will behave exactly the same as the standard ShowMenu function.\r\n\r\nIs there anything else I should add before I share this rather ugly code?",
      "EditableFormat": "markdown",
      "HTML": "<p>OK ... I've rolled the code from the previous post you linked, and an earlier one on a similar subject, together.</p>\n<p>I've got some code (not yet tested) that adds a few more attributes you can change on the game object to change the behaviour of ShowMenu:</p>\n<ul>\n<li><code>game.alwaysshowmenunumbers</code> - boolean. Setting to false will make the numbers disappear.</li>\n<li><code>game.showmenutype</code> - string. Can be <code>\"number\"</code>, <code>\"bullet\"</code>, <code>\"flat\"</code>, or some other string which will be used as a bullet when ShowMenu is called. (\"flat\" displays the menu as a single line using FormatList).</li>\n<li><code>game.hidemenus</code> - boolean. If set to false, choosing a menu option will remove the links, but won't actually vanish the menu.</li>\n<li><code>game.showmenutryharder</code> - boolean. If true, typing a word that appears in exactly one of the menu options will choose that option; or the start of a word (like when typing object names).</li>\n<li><code>game.showmenuunresolvedcommand</code> - boolean. As above, but this behaviour will be pushed into the unresolved command handler, so that it only happens if the word isn't also a command. This may cause bugs if you have a command which modifies <code>game.unresolvedcommandhandler</code> during play.</li>\n</ul>\n<p>There are also functions you can use to get finer-grained control, outputting a menu in pieces:</p>\n<ul>\n<li><code>StartShowMenu (caption)</code>\n<ul>\n<li>Starts a menu, and displays the caption. If you do this more than once in the same menu, subsequent ones will just print the caption.</li>\n</ul>\n</li>\n<li><code>EndShowMenu (allowCancel, hideAfterMenu, callback)</code>\n<ul>\n<li>Marks the end of the menu, and sets the callback.</li>\n<li><code>hideAfterMenu</code> - boolean. If true, everything between StartShowMenu and EndShowMenu will be hidden once an option is chosen. If false, the links will be disabled but remain on screen.</li>\n</ul>\n</li>\n<li><code>MenuCancelledCallback (script)</code>\n<ul>\n<li>Set a script to be run if the menu is not called.</li>\n<li>Note that this is a <strong>misleading function name</strong>, as I couldn't think of a better one.</li>\n<li>In the case of a menu with <code>allowCancel</code> set to false, this will be run each time the player enters something that can't be parsed as a valid choice. If you call <code>ClearMenu</code> from within the callback, you also need to call <code>MenuCancelledCallback(null)</code>.</li>\n<li>The callback will get the parameters:\n<ul>\n<li><code>options</code> - a dictionary of options the player didn't choose from</li>\n<li><code>input</code> - what the player actually entered</li>\n<li><code>command</code> - if applicable, the command that was executed instead of choosing a menu option (note that in this case, the callback will be run <em>after</em> the command)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>AddMenuOption (option, result, displayNumber)</code>\n<ul>\n<li><strong>Returns</strong> a string containing all the HTML for a clickable link menu option. You need to use <code>msg()</code> to pass this to the player.</li>\n<li><code>option</code> - The option to display. Calls GetDisplayAlias() if it's an object, using <code>linkcolour</code> if set, and ToString() for any other type that isn't a string.</li>\n<li><code>result</code> - The value that the 'result' variable will be set to in the callback.\n<ul>\n<li>String - <code>result</code> in the callback will be the string</li>\n<li>Object - <code>result</code> in the callback will be the object's name</li>\n<li>Anything else - <code>result</code> in the callback will be <code>option</code>'s name if it's an object, and <code>option</code> otherwise</li>\n</ul>\n</li>\n<li><code>displayNumber</code> - boolean. If true, will allow the player to select the option by typing its number. Will display like \"Would you like Red (1), Blue (2), or Yellow (3)?\". If this is a format string instead, <code>!</code> will be replaced by the option, and <code>#</code> by the number.</li>\n</ul>\n</li>\n<li><code>AddMenuNumberedList (options)</code>\n<ul>\n<li><strong>Returns</strong> the HTML for a numbered list, like the original ShowMenu displays. You can modify this string if you want before outputting it.</li>\n<li><code>options</code> - I <em>think</em> this should handle an options list in any of the formats ShowMenu supports</li>\n</ul>\n</li>\n<li><code>AddMenuBulletList (options, bullet)</code>\n<ul>\n<li><strong>Returns</strong> a bulleted list; as above, but without numbering the options</li>\n<li>If <code>game.alwaysshowmenunumbers</code> is set, will add bracketed numbers after each option</li>\n<li><code>bullet</code> - string, to display before each option. If <code>\"\"</code>, will return a HTML <code>&lt;ul&gt;</code> element instead.</li>\n</ul>\n</li>\n<li><code>AddMenuFlatList (options, lastjoiner)</code>\n<ul>\n<li><strong>Returns</strong> a list of options on a single line, generated using <code>FormatList</code>.</li>\n<li><code>lastjoiner</code> - you probably want <code>\"[Or]\"</code> or <code>\"[And]\"</code> here.</li>\n</ul>\n</li>\n<li><code>ShowMenu</code>\n<ul>\n<li>Same parameters as the default one. This will call <code>StartShowMenu</code>, then either AddMenuNumberedList, AddMenuBulletList, or AddMenuFlatList (depending on the value of <code>game.showmenutype</code>), then EndShowMenu.</li>\n<li>I've attempted to ensure that if none of the game attributes mentioned above are set, this will behave exactly the same as the standard ShowMenu function.</li>\n</ul>\n</li>\n</ul>\n<p>Is there anything else I should add before I share this rather ugly code?</p>\n\n",
      "PostDate": "2018-03-19T14:18:25.2334317Z",
      "LastEditDate": "2018-03-19T16:06:20.241464Z",
      "link": null
    },
    {
      "PostId": "f21b7a40-a4cb-4045-9859-d18b031f6ddb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(A silly example that came to mind for the menu-cancelled callback; if it's a conversation menu, you could have something like:\r\n```\r\nMenuCancelledCallback () {\r\n  if (not IsDefined(\"command\")) {\r\n    // This is called if the player types something the parser can't understand\r\n    msg (\"Bob taps his foot impatiently as you drift off into your own thoughts, then gives up and goes back to his work. Maybe you should try {command:talk to bob:talking to him again} and hope he's not too upset?\")\r\n  }\r\n  else if (command = go) {\r\n    // could also test game.pov.parent, to see if you've actually moved or just walked into a wall/locked door/etc\r\n    msg (\"You hear Bob's voice call after you “Hey, don't walk off while I'm talking, jerk!”\")\r\n  }\r\n  else if (ListCount(game.pov.currentcommandresolvedobjects) > 0) {\r\n    msg (\"“Hey!” Bob mutters angrily, “Stop messing 'round with that \" + GetDisplayAlias(PickOneObject(game.pov.currentcommandresolvedobjects)) + \"! You gotta pay attention when somebody's talking to you!”\")\r\n    msg (\"He turns away from you and goes back to reading the paper.\")\r\n  }\r\n  else {\r\n    msg (\"Bob snorts angrily as you ignore him, and goes back to reading the paper.\")\r\n  }\r\n}\r\n```\r\nThis is off the top of my head, but you get the idea)",
      "EditableFormat": "markdown",
      "HTML": "<p>(A silly example that came to mind for the menu-cancelled callback; if it's a conversation menu, you could have something like:</p>\n<pre><code>MenuCancelledCallback () {\n  if (not IsDefined(\"command\")) {\n    // This is called if the player types something the parser can't understand\n    msg (\"Bob taps his foot impatiently as you drift off into your own thoughts, then gives up and goes back to his work. Maybe you should try {command:talk to bob:talking to him again} and hope he's not too upset?\")\n  }\n  else if (command = go) {\n    // could also test game.pov.parent, to see if you've actually moved or just walked into a wall/locked door/etc\n    msg (\"You hear Bob's voice call after you “Hey, don't walk off while I'm talking, jerk!”\")\n  }\n  else if (ListCount(game.pov.currentcommandresolvedobjects) &gt; 0) {\n    msg (\"“Hey!” Bob mutters angrily, “Stop messing 'round with that \" + GetDisplayAlias(PickOneObject(game.pov.currentcommandresolvedobjects)) + \"! You gotta pay attention when somebody's talking to you!”\")\n    msg (\"He turns away from you and goes back to reading the paper.\")\n  }\n  else {\n    msg (\"Bob snorts angrily as you ignore him, and goes back to reading the paper.\")\n  }\n}\n</code></pre>\n<p>This is off the top of my head, but you get the idea)</p>\n\n",
      "PostDate": "2018-03-19T16:25:33.986662Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ae37b264-6d67-4af2-bffc-685f8f97d369",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, here's the code. Again, untested, may contain typos (or I may have missed a CDATA block), as I don't have a Windows machine handy to test it. But hopefully fewer errors this time.\r\n\r\nEdit: Slight change (improvement to `linkcolour` handling)\r\n\r\nBy default it should behave just like the standard ShowMenu, except that typing the text from one of the menu options will select it.\r\n\r\n```\r\n<function name=\"StartShowMenu\" parameters=\"caption\">\r\n  if (not HasString(game, \"menuoutputsection\")) {\r\n    game.menuoutputsection = StartNewOutputSection()\r\n  }\r\n  msg (caption)\r\n  game.menuoptionskeys = NewStringList()\r\n  game.menudisplayedoptions = NewStringDictionary()\r\n  game.menucallback => {\r\n    error (\"Menu callback not set\")\r\n  }\r\n</function>\r\n\r\n<function name=\"MenuCancelledCallback\" parameters=\"callback\">\r\n  game.menucancelcallback = callback\r\n</function>\r\n\r\n<function name=\"AddMenuOption\" type=\"string\" parameters=\"option, result, displayNumber\">\r\n  <![CDATA[\r\n  if (not HasString(game, \"menuoutputsection\")) {\r\n    StartShowMenu(\"\")\r\n  }\r\n  if (TypeOf(option) = \"object\") {\r\n    optionText = GetDisplayAlias(option)\r\n    optionTag = option.name\r\n    if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n      colour = option.linkcolour\r\n    }\r\n    else {\r\n      colour = GetLinkTextColour()\r\n      if (TypeOf(result) = \"object\") {\r\n        if (HasString(result, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\r\n          colour = result.linkcolour\r\n        }\r\n      }\r\n    }\r\n    style = GetCurrentTextFormat(colour)\r\n  }\r\n  else if (TypeOf(option) = \"string\") {\r\n    optionText = option\r\n    optionTag = option\r\n    style = GetCurrentLinkTextFormat()\r\n  }\r\n  else {\r\n    optionText = ToString(option)\r\n    optionTag = optionText\r\n    style = \"\"\r\n  }\r\n  if (IsDefined(\"result\")) {\r\n    if (TypeOf(result) = \"string\") {\r\n      if (LengthOf(result) > 0) {\r\n        optionTag = result\r\n      }\r\n    }\r\n    else if (TypeOf(result) = \"object\") {\r\n      optionTag = result.name\r\n    }\r\n  }\r\n  result = \"<a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optionTag) + \"')\\\">\" + optionText + \"</a>\"\r\n  dictionary add (game.menudisplayedoptions, optionTag, optionText)\r\n  if (TypeOf(displayNumber) = \"string\") {\r\n    if (IndexOf (displayNumber, \"!\") > 0) {\r\n      result = Replace (displayNumber, \"!\", result)\r\n    }\r\n    else {\r\n      result = displayNumber + \" \" + result\r\n    }\r\n    if (IndexOf (result, \"#\") > 0) {\r\n      list add (game.menuoptionskeys, optionTag)\r\n      result = Replace (displaynumber, \"#\", ListCount(game.menuoptionskeys))\r\n    }\r\n  }\r\n  else if (Equal(displayNumber, true) or GetBoolean(game, \"alwaysshowmenunumbers\")) {\r\n    list add (game.menuoptionskeys, optionTag)\r\n    result = result + \" (\" + ListCount(game.menuoptionskeys) + \")\"\r\n  }\r\n  return (result)\r\n  ]]>\r\n</function>\r\n\r\n<function name=\"EndShowMenu\" parameters=\"allowCancel, hideAfterMenu, callback\">\r\n  if (not HasString(game, \"menuoutputsection\")) {\r\n    error(\"Menu not started\")\r\n  }\r\n  EndOutputSection (game.menuoutputsection)\r\n  game.menuallowcancel = allowCancel\r\n  game.menucallback = callback\r\n  game.menuhideafter = hideAfterMenu\r\n</function>\r\n\r\n<function name=\"AddMenuNumberedList\" parameters=\"options\">\r\n<![CDATA[\r\n  if (TypeOf(options) = \"object\") {\r\n    options = GetDirectChildren(options)\r\n  }\r\n  else if (TypeOf(options) = \"string\") {\r\n    options = Split(options)\r\n  }\r\n\r\n  result = NewStringList()\r\n  foreach (o, options) {\r\n    optionText = o\r\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\r\n      optionText = DictionaryItem(options, o)\r\n    }\r\n    list add (result, AddMenuOption(optionText, o, \"#. \"))\r\n  }\r\n  return (Join (result, \"<br/>\"))\r\n]]>\r\n</function>\r\n\r\n<function name=\"AddMenuBulletList\" parameters=\"options, bullet\">\r\n<![CDATA[\r\n  if (not TypeOf(bullet) = \"string\") {\r\n    bullet = \"\"\r\n  }\r\n  if (TypeOf(options) = \"object\") {\r\n    options = GetDirectChildren(options)\r\n  }\r\n  else if (TypeOf(options) = \"string\") {\r\n    options = Split(options)\r\n  }\r\n\r\n  result = NewStringList()\r\n  foreach (o, options) {\r\n    optionText = o\r\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\r\n      optionText = DictionaryItem(options, o)\r\n    }\r\n    list add (result, bullet + AddMenuOption(optionText, o, false))\r\n  }\r\n  if (bullet = \"\") {\r\n    return (\"<ul><li>\" + Join(result, \"</li>\\n<li>\") + \"</li></ul>\\n\")\r\n  }\r\n  else {\r\n    return (Join (result, \"<br/>\"))\r\n  }\r\n]]>\r\n</function>\r\n\r\n<function name=\"AddMenuFlatList\" parameters=\"options, lastjoiner\">\r\n<![CDATA[\r\n  if (TypeOf(options) = \"object\") {\r\n    options = GetDirectChildren(options)\r\n  }\r\n  else if (TypeOf(options) = \"string\") {\r\n    options = Split(options)\r\n  }\r\n\r\n  result = NewStringList()\r\n  foreach (o, options) {\r\n    optionText = o\r\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\r\n      optionText = DictionaryItem(options, o)\r\n    }\r\n    list add (result, \"· \" + AddMenuOption(optionText, o, false))\r\n  }\r\n  return (FormatList(result, \",\", lastjoiner, \"\"))\r\n]]>\r\n</function>\r\n\r\n<function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\">\r\n  StartShowMenu(caption)\r\n  type = \"number\"\r\n  if (Equal (game.alwaysshowmenunumbers, false)) {\r\n    type = \"bullet\"\r\n  }\r\n  if (HasString (game, \"showmenutype\")) {\r\n    type = LCase(game.showmenutype)\r\n  }\r\n  if (type = \"bullet\") {\r\n    msg (AddMenuBulletList(options), \"\")\r\n  }\r\n  else if (type = \"flat\") {\r\n    msg (AddMenuFlatList(options, \"[Or]\"))\r\n  }\r\n  else if (type = \"number\") {\r\n    msg (AddMenuNumberedList(options))\r\n  }\r\n  else {\r\n    msg (AddMenuBulletList(options), type)\r\n  }\r\n  if (not HasBoolean(game, \"hidemenus\")) {\r\n    game.hidemenus = true\r\n  }\r\n  EndShowMenu(allowCancel, game.hidemenus, callback)\r\n</function>\r\n\r\n<function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\">\r\n  <![CDATA[\r\n  handled = false\r\n  if (IsInt(input)) {\r\n    number = ToInt(input)\r\n    if (number > 0 and number <= ListCount(game.menuoptionskeys)) {\r\n      ShowMenuResponse(StringListItem(game.menuoptionskeys, number - 1))\r\n      if(HasAttribute(game, \"menudisplayedoptions\")) {\r\n        game.menudisplayedoptions = null\r\n      }\r\n      game.menucancelcallback = null\r\n      return (true)\r\n    }\r\n  }\r\n  else if(HasAttribute(game, \"menudisplayedoptions\")) {\r\n    foreach (option, game.menudisplayedoptions) {\r\n      if (LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {\r\n        ShowMenuResponse(option)\r\n        game.menucancelcallback = null\r\n        return (true)\r\n      }\r\n    }\r\n    if (GetBoolean(game, \"showmenutryharder\") or not GetBoolean(game, \"menuallowcancel\")) {\r\n      handled = HandleMenuTextHarder (game.menudisplayedoptions, input, \"menucancelcallback\")\r\n      game.menudisplayedoptions = null\r\n      return (handled)\r\n    }\r\n    else if (GetBoolean(game, \"showmenuunresolvedcommand\")) {\r\n      if (HasScript(game, \"unresolvedcommandhandler\")) {\r\n        game.unresolvedcommandbackup = game.unresolvedcommandhandler\r\n      }\r\n      if (HasScript(game, \"menucancelcallback\")) {\r\n        game.menucancelcallbackdelayed = game.menucancelcallback\r\n        game.menucancelcallback = null\r\n      }\r\n      SetTurnTimeout(0) {\r\n        if (HasScript (game, \"menucancelcallbackdelayed\")) {\r\n          params = NewDictionary()\r\n          dictionary add (params, \"options\", game.menuoptionsforsecondtry)\r\n          dictionary add (params, \"input\", game.pov.currentcommand)\r\n          dictionary add (params, \"command\", game.pov.currentcommandpattern)\r\n          do (game, \"menucancelcallbackdelayed\", params)\r\n          game.menucancelcallbackdelayed = null\r\n        }\r\n        game.menuoptionsforsecondtry = null\r\n        if (HasScript(game, \"unresolvedcommandbackup\")) {\r\n          game.unresolvedcommandhandler = game.unresolvedcommandbackup\r\n          game.unresolvedcommandbackup = null\r\n        }\r\n      }\r\n      game.unresolvedcommandhandler => {\r\n        handled = HandleMenuTextHarder (game.menuoptionsforsecondtry, command, \"menucancelcallbackdelayed\")\r\n        if (HasScript(game, \"unresolvedcommandbackup\")) {\r\n          game.unresolvedcommandhandler = game.unresolvedcommandbackup\r\n          game.unresolvedcommandbackup = null\r\n        }\r\n        if (not handled) {\r\n          if (HasScript(game, \"unresolvedcommandhandler\")) {\r\n            params = NewDictionary()\r\n            dictionary add(params, \"command\", command)\r\n            do (game, \"unresolvedcommandhandler\", params)\r\n          } else {\r\n            msg (Template(\"UnrecognisedCommand\"))\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (false)\r\n  ]]>\r\n</function>\r\n\r\n<function name=\"HandleMenuTextHarder\" parameters=\"options, input, cancelcallback\">\r\n  possibilities = NewStringList()\r\n  foreach (option, options) {\r\n    list add (possibilities, option)\r\n  }\r\n  foreach (word, Split(LCase(input), \" \")) {\r\n    stillpossible = NewStringList()\r\n    foreach (option, possibilities) {\r\n      words_in_option = Split(LCase(StringDictionaryItem(options, option)), \" \")\r\n      found = false\r\n      foreach (w, words_in_option) {\r\n        if (StartsWith(w, word)) {\r\n          found = true\r\n        }\r\n      }\r\n      if (found) {\r\n        list add (stillpossible, option)\r\n      }\r\n    }\r\n    possibilities = stillpossible\r\n  }\r\n  if (ListCount (possibilities) = 1) {\r\n    ShowMenuResponse(possibilities[0])\r\n    set (game, cancelcallback, null)\r\n    return (true)\r\n  }\r\n  else if (HasScript(game, cancelcallback)) {\r\n    params = NewDictionary()\r\n    dictionary add (params, \"options\", options)\r\n    dictionary add (params, \"input\", input)\r\n    do (game, cancelcallback, params)\r\n    if (GetBoolean(game, \"menuallowcancel\")) {\r\n      set (game, cancelcallback, null)\r\n    }\r\n  }\r\n  return (false)\r\n</function>\r\n  \r\n<function name=\"ClearMenu\">\r\n  if (HasString(game, \"menuoutputsection\")) {\r\n    if (GetBoolean(game, \"menuhideafter\")) {\r\n      HideOutputSection(game.menuoutputsection)\r\n    }\r\n    else {\r\n      JS.eval(\"name = '\"+game.menuoutputsection+\"';EndOutputSection(name);$('.' + name + ' .cmdlink').attr('onclick', '');\")\r\n    }\r\n    game.menuoutputsection = null\r\n  }\r\n  game.menuoptions = null\r\n  if (HasAttribute(game, \"menudisplayedoptions\")) {\r\n    game.menuoptionsforsecondtry = game.menudisplayedoptions\r\n    game.menudisplayedoptions = null\r\n  }\r\n  game.menucallback = null\r\n</function>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, here's the code. Again, untested, may contain typos (or I may have missed a CDATA block), as I don't have a Windows machine handy to test it. But hopefully fewer errors this time.</p>\n<p>Edit: Slight change (improvement to <code>linkcolour</code> handling)</p>\n<p>By default it should behave just like the standard ShowMenu, except that typing the text from one of the menu options will select it.</p>\n<pre><code>&lt;function name=\"StartShowMenu\" parameters=\"caption\"&gt;\n  if (not HasString(game, \"menuoutputsection\")) {\n    game.menuoutputsection = StartNewOutputSection()\n  }\n  msg (caption)\n  game.menuoptionskeys = NewStringList()\n  game.menudisplayedoptions = NewStringDictionary()\n  game.menucallback =&gt; {\n    error (\"Menu callback not set\")\n  }\n&lt;/function&gt;\n\n&lt;function name=\"MenuCancelledCallback\" parameters=\"callback\"&gt;\n  game.menucancelcallback = callback\n&lt;/function&gt;\n\n&lt;function name=\"AddMenuOption\" type=\"string\" parameters=\"option, result, displayNumber\"&gt;\n  &lt;![CDATA[\n  if (not HasString(game, \"menuoutputsection\")) {\n    StartShowMenu(\"\")\n  }\n  if (TypeOf(option) = \"object\") {\n    optionText = GetDisplayAlias(option)\n    optionTag = option.name\n    if (HasString(option, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n      colour = option.linkcolour\n    }\n    else {\n      colour = GetLinkTextColour()\n      if (TypeOf(result) = \"object\") {\n        if (HasString(result, \"linkcolour\") and GetUIOption(\"UseGameColours\") = \"true\") {\n          colour = result.linkcolour\n        }\n      }\n    }\n    style = GetCurrentTextFormat(colour)\n  }\n  else if (TypeOf(option) = \"string\") {\n    optionText = option\n    optionTag = option\n    style = GetCurrentLinkTextFormat()\n  }\n  else {\n    optionText = ToString(option)\n    optionTag = optionText\n    style = \"\"\n  }\n  if (IsDefined(\"result\")) {\n    if (TypeOf(result) = \"string\") {\n      if (LengthOf(result) &gt; 0) {\n        optionTag = result\n      }\n    }\n    else if (TypeOf(result) = \"object\") {\n      optionTag = result.name\n    }\n  }\n  result = \"&lt;a class=\\\"cmdlink\\\" style=\\\"\" + style + \"\\\" onclick=\\\"ASLEvent('ShowMenuResponse','\" + EscapeQuotes(optionTag) + \"')\\\"&gt;\" + optionText + \"&lt;/a&gt;\"\n  dictionary add (game.menudisplayedoptions, optionTag, optionText)\n  if (TypeOf(displayNumber) = \"string\") {\n    if (IndexOf (displayNumber, \"!\") &gt; 0) {\n      result = Replace (displayNumber, \"!\", result)\n    }\n    else {\n      result = displayNumber + \" \" + result\n    }\n    if (IndexOf (result, \"#\") &gt; 0) {\n      list add (game.menuoptionskeys, optionTag)\n      result = Replace (displaynumber, \"#\", ListCount(game.menuoptionskeys))\n    }\n  }\n  else if (Equal(displayNumber, true) or GetBoolean(game, \"alwaysshowmenunumbers\")) {\n    list add (game.menuoptionskeys, optionTag)\n    result = result + \" (\" + ListCount(game.menuoptionskeys) + \")\"\n  }\n  return (result)\n  ]]&gt;\n&lt;/function&gt;\n\n&lt;function name=\"EndShowMenu\" parameters=\"allowCancel, hideAfterMenu, callback\"&gt;\n  if (not HasString(game, \"menuoutputsection\")) {\n    error(\"Menu not started\")\n  }\n  EndOutputSection (game.menuoutputsection)\n  game.menuallowcancel = allowCancel\n  game.menucallback = callback\n  game.menuhideafter = hideAfterMenu\n&lt;/function&gt;\n\n&lt;function name=\"AddMenuNumberedList\" parameters=\"options\"&gt;\n&lt;![CDATA[\n  if (TypeOf(options) = \"object\") {\n    options = GetDirectChildren(options)\n  }\n  else if (TypeOf(options) = \"string\") {\n    options = Split(options)\n  }\n\n  result = NewStringList()\n  foreach (o, options) {\n    optionText = o\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\n      optionText = DictionaryItem(options, o)\n    }\n    list add (result, AddMenuOption(optionText, o, \"#. \"))\n  }\n  return (Join (result, \"&lt;br/&gt;\"))\n]]&gt;\n&lt;/function&gt;\n\n&lt;function name=\"AddMenuBulletList\" parameters=\"options, bullet\"&gt;\n&lt;![CDATA[\n  if (not TypeOf(bullet) = \"string\") {\n    bullet = \"\"\n  }\n  if (TypeOf(options) = \"object\") {\n    options = GetDirectChildren(options)\n  }\n  else if (TypeOf(options) = \"string\") {\n    options = Split(options)\n  }\n\n  result = NewStringList()\n  foreach (o, options) {\n    optionText = o\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\n      optionText = DictionaryItem(options, o)\n    }\n    list add (result, bullet + AddMenuOption(optionText, o, false))\n  }\n  if (bullet = \"\") {\n    return (\"&lt;ul&gt;&lt;li&gt;\" + Join(result, \"&lt;/li&gt;\\n&lt;li&gt;\") + \"&lt;/li&gt;&lt;/ul&gt;\\n\")\n  }\n  else {\n    return (Join (result, \"&lt;br/&gt;\"))\n  }\n]]&gt;\n&lt;/function&gt;\n\n&lt;function name=\"AddMenuFlatList\" parameters=\"options, lastjoiner\"&gt;\n&lt;![CDATA[\n  if (TypeOf(options) = \"object\") {\n    options = GetDirectChildren(options)\n  }\n  else if (TypeOf(options) = \"string\") {\n    options = Split(options)\n  }\n\n  result = NewStringList()\n  foreach (o, options) {\n    optionText = o\n    if (EndsWith(TypeOf(o), \"dictionary\")) {\n      optionText = DictionaryItem(options, o)\n    }\n    list add (result, \"· \" + AddMenuOption(optionText, o, false))\n  }\n  return (FormatList(result, \",\", lastjoiner, \"\"))\n]]&gt;\n&lt;/function&gt;\n\n&lt;function name=\"ShowMenu\" parameters=\"caption, options, allowCancel, callback\"&gt;\n  StartShowMenu(caption)\n  type = \"number\"\n  if (Equal (game.alwaysshowmenunumbers, false)) {\n    type = \"bullet\"\n  }\n  if (HasString (game, \"showmenutype\")) {\n    type = LCase(game.showmenutype)\n  }\n  if (type = \"bullet\") {\n    msg (AddMenuBulletList(options), \"\")\n  }\n  else if (type = \"flat\") {\n    msg (AddMenuFlatList(options, \"[Or]\"))\n  }\n  else if (type = \"number\") {\n    msg (AddMenuNumberedList(options))\n  }\n  else {\n    msg (AddMenuBulletList(options), type)\n  }\n  if (not HasBoolean(game, \"hidemenus\")) {\n    game.hidemenus = true\n  }\n  EndShowMenu(allowCancel, game.hidemenus, callback)\n&lt;/function&gt;\n\n&lt;function name=\"HandleMenuTextResponse\" parameters=\"input\" type=\"boolean\"&gt;\n  &lt;![CDATA[\n  handled = false\n  if (IsInt(input)) {\n    number = ToInt(input)\n    if (number &gt; 0 and number &lt;= ListCount(game.menuoptionskeys)) {\n      ShowMenuResponse(StringListItem(game.menuoptionskeys, number - 1))\n      if(HasAttribute(game, \"menudisplayedoptions\")) {\n        game.menudisplayedoptions = null\n      }\n      game.menucancelcallback = null\n      return (true)\n    }\n  }\n  else if(HasAttribute(game, \"menudisplayedoptions\")) {\n    foreach (option, game.menudisplayedoptions) {\n      if (LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option))) = LCase(Trim(input))) {\n        ShowMenuResponse(option)\n        game.menucancelcallback = null\n        return (true)\n      }\n    }\n    if (GetBoolean(game, \"showmenutryharder\") or not GetBoolean(game, \"menuallowcancel\")) {\n      handled = HandleMenuTextHarder (game.menudisplayedoptions, input, \"menucancelcallback\")\n      game.menudisplayedoptions = null\n      return (handled)\n    }\n    else if (GetBoolean(game, \"showmenuunresolvedcommand\")) {\n      if (HasScript(game, \"unresolvedcommandhandler\")) {\n        game.unresolvedcommandbackup = game.unresolvedcommandhandler\n      }\n      if (HasScript(game, \"menucancelcallback\")) {\n        game.menucancelcallbackdelayed = game.menucancelcallback\n        game.menucancelcallback = null\n      }\n      SetTurnTimeout(0) {\n        if (HasScript (game, \"menucancelcallbackdelayed\")) {\n          params = NewDictionary()\n          dictionary add (params, \"options\", game.menuoptionsforsecondtry)\n          dictionary add (params, \"input\", game.pov.currentcommand)\n          dictionary add (params, \"command\", game.pov.currentcommandpattern)\n          do (game, \"menucancelcallbackdelayed\", params)\n          game.menucancelcallbackdelayed = null\n        }\n        game.menuoptionsforsecondtry = null\n        if (HasScript(game, \"unresolvedcommandbackup\")) {\n          game.unresolvedcommandhandler = game.unresolvedcommandbackup\n          game.unresolvedcommandbackup = null\n        }\n      }\n      game.unresolvedcommandhandler =&gt; {\n        handled = HandleMenuTextHarder (game.menuoptionsforsecondtry, command, \"menucancelcallbackdelayed\")\n        if (HasScript(game, \"unresolvedcommandbackup\")) {\n          game.unresolvedcommandhandler = game.unresolvedcommandbackup\n          game.unresolvedcommandbackup = null\n        }\n        if (not handled) {\n          if (HasScript(game, \"unresolvedcommandhandler\")) {\n            params = NewDictionary()\n            dictionary add(params, \"command\", command)\n            do (game, \"unresolvedcommandhandler\", params)\n          } else {\n            msg (Template(\"UnrecognisedCommand\"))\n          }\n        }\n      }\n    }\n  }\n  return (false)\n  ]]&gt;\n&lt;/function&gt;\n\n&lt;function name=\"HandleMenuTextHarder\" parameters=\"options, input, cancelcallback\"&gt;\n  possibilities = NewStringList()\n  foreach (option, options) {\n    list add (possibilities, option)\n  }\n  foreach (word, Split(LCase(input), \" \")) {\n    stillpossible = NewStringList()\n    foreach (option, possibilities) {\n      words_in_option = Split(LCase(StringDictionaryItem(options, option)), \" \")\n      found = false\n      foreach (w, words_in_option) {\n        if (StartsWith(w, word)) {\n          found = true\n        }\n      }\n      if (found) {\n        list add (stillpossible, option)\n      }\n    }\n    possibilities = stillpossible\n  }\n  if (ListCount (possibilities) = 1) {\n    ShowMenuResponse(possibilities[0])\n    set (game, cancelcallback, null)\n    return (true)\n  }\n  else if (HasScript(game, cancelcallback)) {\n    params = NewDictionary()\n    dictionary add (params, \"options\", options)\n    dictionary add (params, \"input\", input)\n    do (game, cancelcallback, params)\n    if (GetBoolean(game, \"menuallowcancel\")) {\n      set (game, cancelcallback, null)\n    }\n  }\n  return (false)\n&lt;/function&gt;\n  \n&lt;function name=\"ClearMenu\"&gt;\n  if (HasString(game, \"menuoutputsection\")) {\n    if (GetBoolean(game, \"menuhideafter\")) {\n      HideOutputSection(game.menuoutputsection)\n    }\n    else {\n      JS.eval(\"name = '\"+game.menuoutputsection+\"';EndOutputSection(name);$('.' + name + ' .cmdlink').attr('onclick', '');\")\n    }\n    game.menuoutputsection = null\n  }\n  game.menuoptions = null\n  if (HasAttribute(game, \"menudisplayedoptions\")) {\n    game.menuoptionsforsecondtry = game.menudisplayedoptions\n    game.menudisplayedoptions = null\n  }\n  game.menucallback = null\n&lt;/function&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-19T16:28:29.3999826Z",
      "LastEditDate": "2018-03-19T18:04:11.0358861Z",
      "link": null
    },
    {
      "PostId": "ad2da56d-c158-4892-bce1-bda40c56ad84",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(OK, I messed up there. That needs fixing, I know what to do, it'll just take a little more effort… I need to play with ClearMenu so that it backs up all of the menu attributes, in case TryHarder is called after the menu has been cleared, and double-check that nothing messes up if the callback function calls `ShowMenu` itself)",
      "EditableFormat": "markdown",
      "HTML": "<p>(OK, I messed up there. That needs fixing, I know what to do, it'll just take a little more effort… I need to play with ClearMenu so that it backs up all of the menu attributes, in case TryHarder is called after the menu has been cleared, and double-check that nothing messes up if the callback function calls <code>ShowMenu</code> itself)</p>\n\n",
      "PostDate": "2018-03-19T18:28:13.3269738Z",
      "LastEditDate": "2018-03-19T18:34:07.8253629Z",
      "link": null
    }
  ]
}
