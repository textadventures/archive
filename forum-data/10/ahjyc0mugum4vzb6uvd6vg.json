{
  "Topic": {
    "TopicId": "ahjyc0mugum4vzb6uvd6vg",
    "ForumId": "10",
    "Title": "Using a Variable result to call an Object (Solved)",
    "LastUpdated": "2018-08-30T03:13:47.301385Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "23d32672-2f84-4cfb-a423-85490801072c",
      "UserId": 372999,
      "Username": "Nakita Block",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3bae1b35d822d93e538260a988f64861?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know a better way to title it because it's more complex than that.  Since I don't have an actual code for this (I've been trying to see if it's possible before writing a bunch of stuff out) I'll just make something up like I did in the editor.\r\n\r\nLet's say I have a couple object variables Room.Name1 and Room.Name2, which, according to this particular script I want to write, the number may possibly go to double digits.\r\n\r\nSo now let's say I'm going to have something that will need to read an integer to know which Room.Name to use. So is there some kind of way to use two variables together to call it? I'll give an example, although I know it doesn't work, but it will let you know what I'm trying to do.\r\n\r\n```\r\ntemp1 = \"Name\"\r\ntemp2 = \"2\"\r\ntemp3 = temp1 + temp2\r\n\r\nDoAnActionWith Room.temp3\r\n```\r\n\r\nSo I know that doesn't work, but hopefully you'll understand what I'm trying to accomplish.\r\n\r\nThank you so much in advance!\r\n\r\nI'm guessing there's a better way to utilize this type of process with a list or dictionary, but I just don't understand how to use those. The actual variables being called are static, but they need to be called according to the specific integer requested.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know a better way to title it because it's more complex than that.  Since I don't have an actual code for this (I've been trying to see if it's possible before writing a bunch of stuff out) I'll just make something up like I did in the editor.</p>\n<p>Let's say I have a couple object variables Room.Name1 and Room.Name2, which, according to this particular script I want to write, the number may possibly go to double digits.</p>\n<p>So now let's say I'm going to have something that will need to read an integer to know which Room.Name to use. So is there some kind of way to use two variables together to call it? I'll give an example, although I know it doesn't work, but it will let you know what I'm trying to do.</p>\n<pre><code>temp1 = \"Name\"\ntemp2 = \"2\"\ntemp3 = temp1 + temp2\n\nDoAnActionWith Room.temp3\n</code></pre>\n<p>So I know that doesn't work, but hopefully you'll understand what I'm trying to accomplish.</p>\n<p>Thank you so much in advance!</p>\n<p>I'm guessing there's a better way to utilize this type of process with a list or dictionary, but I just don't understand how to use those. The actual variables being called are static, but they need to be called according to the specific integer requested.</p>\n\n",
      "PostDate": "2018-08-30T03:13:47.301385Z",
      "LastEditDate": "2018-08-30T10:28:49.5686286Z",
      "link": null
    },
    {
      "PostId": "a7e312ef-21ac-42f1-be2b-bec1d319801e",
      "UserId": 372999,
      "Username": "Nakita Block",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3bae1b35d822d93e538260a988f64861?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually let me explain it a little better. The reason I'm using Objects are because they will be certain types of buildings that will be making things. Like a sawmill that produces lumber, but there are also sawmill upgrades, so I have an object called \"Sawmill\"\r\n\r\nAnd then I use Sawmill attributes Level1, Level2, etc so I'm guessing that eventually I'm going to need to have the program figure out what that level number is, or if I upgrade, it's going to need to know which attribute to go to next, and it will need to be called accordingly.\r\n\r\nBecause my knowledge of the language is still quite limited, that seems to be the fastest way because I can set the attribute to the number I need for that level. And since the Sawmill's level attribute won't be the same as, say, a Blacksmith, I can't use a universal leveling system. I'm really trying stay as far away from deep If/Else nests if possible, so I'm trying to keep these numbers static",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually let me explain it a little better. The reason I'm using Objects are because they will be certain types of buildings that will be making things. Like a sawmill that produces lumber, but there are also sawmill upgrades, so I have an object called \"Sawmill\"</p>\n<p>And then I use Sawmill attributes Level1, Level2, etc so I'm guessing that eventually I'm going to need to have the program figure out what that level number is, or if I upgrade, it's going to need to know which attribute to go to next, and it will need to be called accordingly.</p>\n<p>Because my knowledge of the language is still quite limited, that seems to be the fastest way because I can set the attribute to the number I need for that level. And since the Sawmill's level attribute won't be the same as, say, a Blacksmith, I can't use a universal leveling system. I'm really trying stay as far away from deep If/Else nests if possible, so I'm trying to keep these numbers static</p>\n\n",
      "PostDate": "2018-08-30T03:26:46.1406257Z",
      "LastEditDate": "2018-08-30T03:30:54.4739256Z",
      "link": null
    },
    {
      "PostId": "8877ba9d-e319-46b8-b52b-72ccdda3a355",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Take a look at the String (Manipulation) Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/#string\r\n\r\nthere's also Concatenation, a quick simple example:\r\n\r\n```\r\nstring_variable = \"Hi\"\r\nmsg (string_variable)\r\n\r\nstring_variable = string_variable + \", how are you?\"\r\nmsg (string_variable)\r\n\r\nstring_variable = string_variable + \" My name is HK\"\r\nmsg (string_variable)\r\n\r\nstring_variable = string_variable + \", what is your name?\"\r\nmsg (string_variable)\r\n\r\nget input {\r\n  player.alias = result\r\n  // let's say you typed in: Nakita\r\n  // result = \"Nakita\"\r\n  // player.alias = \"Nakita\"\r\n}\r\n\r\nstring_variable = string_variable + \" Ah, nice to meet you, \" + player.alias + \"!\"\r\nmsg (string_variable)\r\n\r\n// output/results/display:\r\n\r\nHi\r\nHi, how are you?\r\nHi, how are you? My name is HK\r\nHi, how are you? My name is HK, what is your name?\r\nHi, how are you? My name is HK, what is your name? Ah, nice to meet you, Nakita!\r\n```\r\n\r\n-------\r\n\r\nthen there's using List/Dictionary Attributes:\r\n\r\n(Lists/Dictionaries are just containers of items of input-output functions. They can hold/store multiple items, and thus you can add/remove items, and iterate, via 'for' and 'foreach', through their items, doing whatever actions you wish for/upon them)\r\n\r\nhttp://docs.textadventures.co.uk/quest/using_lists.html\r\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html\r\n\r\n(this is a bit old and has some mistakes in it... I have other posts floating around which are newer and probably do a better and/or more concise job of trying to explain Lists and Dictionaries):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk\r\n\r\nwhich is from within this link, which has more useful guides/resources you might want to look at as well:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\nLists:\r\n\r\nItem 1:\r\ninput: key (as a string/integer): index number: 0\r\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)\r\n\r\nItem 2:\r\ninput: key (as a string/integer): index number: 1\r\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)\r\n\r\nItem 3:\r\ninput: key (as a string/integer): index number: 2\r\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)\r\n\r\netc etc etc\r\n\r\nDictionaries:\r\n\r\nItem 1:\r\ninput: key (as a string): WHATEVER\r\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)\r\n\r\nItem 2:\r\ninput: key (as a string): WHATEVER\r\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)\r\n\r\nItem 3:\r\ninput: key (as a string): WHATEVER\r\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)\r\n\r\netc etc etc\r\n\r\n-----------\r\n\r\n```\r\nLists:\r\n\r\nVARIABLE = ListItem (LIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned (string or object refernce/pointer) output\r\n// quest will parse the Data Type when you use this function, so this is a dynamic function\r\n\r\nmsg (VARIABLE)\r\n// or:\r\nmsg (StringListItem (LIST, INDEX_NUMBER_INPUT))\r\n\r\nVARIABLE = StringListItem (STRINGLIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned string output\r\n\r\nmsg (VARIABLE)\r\n// or:\r\nmsg (StringListItem (STRINGLIST, INDEX_NUMBER_INPUT))\r\n\r\nVARIABLE = ObjectListItem (OBJECTLIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned object reference/pointer output\r\n\r\nmsg (VARIABLE)\r\n// or:\r\nmsg (ObjectListItem (OBJECTLIST, INDEX_NUMBER_INPUT))\r\n```\r\n\r\n-------------\r\n\r\n```\r\nDictionaries:\r\n\r\nVARIABLE = DictionaryItem (DICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned (string or object reference/pointer or script) output\r\n// quest will parse the Data Type when you use this function, so this is a dynamic function\r\n\r\nif (TypeOf (VARIABLE) = \"string\" or TypeOf (VARIABLE) = \"object\") {\r\n  msg (VARIABLE)\r\n} else if (TypeOf (VARIABLE) = \"script\") {\r\n  invoke (VARIABLE)\r\n}\r\n\r\n// or:\r\n\r\nif (TypeOf (DICTIONARY) = \"stringdictionary\" or TypeOf (DICTIONARY) = \"objectdictionary\") {\r\n  msg (VARIABLE)\r\n} else if (TypeOf (DICTIONARY) = \"scriptdictionary\") {\r\n  invoke (VARIABLE)\r\n}\r\n\r\n// or:\r\n\r\nif (TypeOf (DICTIONARY) = \"stringdictionary\" or TypeOf (DICTIONARY) = \"objectdictionary\") {\r\n  msg (DictionaryItem (DICTIONARY, STRING_INPUT))\r\n} else if (TypeOf (DICTIONARY) = \"scriptdictionary\") {\r\n  invoke (DictionaryItem (DICTIONARY, STRING_INPUT))\r\n}\r\n\r\nVARIABLE = StringDictionaryItem (STRINGDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned string output\r\n\r\nmsg (VARIABLE)\r\n// or:\r\nmsg (StringDictionaryItem (OBJECTDICTIONARY, STRING_INPUT))\r\n\r\nVARIABLE = ObjectDictionaryItem (OBJECTDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned object reference/pointer output\r\n\r\nmsg (VARIABLE)\r\n// or:\r\nmsg (ObjectDictionaryItem (OBJECTDICTIONARY, STRING_INPUT))\r\n\r\nVARIABLE = ScriptDictionaryItem (SCRIPTDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\r\n// VARIABLE = returned script(s) output\r\n\r\ninvoke (VARIABLE)\r\n// or:\r\ninvoke (ScriptDictionaryItem (SCRIPTDICTIONARY, STRING_INPUT))\r\n```\r\n\r\n------------\r\n\r\nthere's the 'foreach', 'for', and 'while' Functions, and/or looping and/or recursion methods, for doing iteration:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/foreach.html\r\nhttp://docs.textadventures.co.uk/quest/scripts/for.html\r\nhttp://docs.textadventures.co.uk/quest/scripts/while.html\r\n\r\nsome quick simple examples:\r\n\r\n```\r\nobject_variable_1 = create (\"structures\")\r\n\r\nobject_variable_2 = create (\"lumbermill\")\r\nobject_variable_2.parent = object_variable_1\r\n\r\nobject_variable_2 = create (\"blacksmith\")\r\nobject_variable_2.parent = object_variable_1\r\n\r\nobject_variable_1.objectlist_attribute = NewObjectList ()\r\nlist add (object_variable_1.objectlist_attribute, lumbermill)\r\nlist add (object_variable_1.objectlist_attribute, blacksmith)\r\n\r\nobject_variable_1.stringlist_attribute = NewStringList ()\r\nlist add (object_variable_1.stringlist_attribute, \"damage\")\r\nlist add (object_variable_1.stringlist_attribute, \"defense\")\r\n\r\n// this is very inefficient to nest iterations like this (but it's just an example for you to see what can be done):\r\n\r\nforeach (object_variable_3, object_variable_1.objectlist_attribute) {\r\n\r\n  foreach (string_variable, object_variable_1.stringlist_attribute) {\r\n\r\n    for (numbering_integer_variable, 1, 4) {\r\n\r\n      numbering_string_variable = ToString (numbering_integer_variable)\r\n\r\n      attribute_name_string_variable =  string_variable + \"_upgrade_\" + numbering_string_variable\r\n\r\n      set (object_variable_1.name, attribute_name_string_variable, numbering_integer_variable + 1)\r\n\r\n  }\r\n}\r\n\r\n// this will create these Objects and their Attributes and their Values:\r\n\r\nstructures.objectlist_attribute = [lumbermill,blacksmith] // pseudo-code (can't use 'Split' for Object lists, nor Object Dictionaries)\r\nstructures.stringlist_attribute = Split (\"damage;defense\", \";\")\r\n\r\n// (also, the 'lumbermill' and 'blacksmith' Objects are contained within the 'structures' Object):\r\nlumbermill.parent = structures\r\nblacksmith.parent = structures\r\n\r\nlumbermill.damage_upgrade_1 = 2\r\nlumbermill.damage_upgrade_2 = 3\r\nlumbermill.damage_upgrade_3 = 4\r\nlumbermill.damage_upgrade_4 = 5\r\n\r\nlumbermill.defense_upgrade_1 = 2\r\nlumbermill.defense_upgrade_2 = 3\r\nlumbermill.defense_upgrade_3 = 4\r\nlumbermill.defense_upgrade_4 = 5\r\n\r\nblacksmith.damage_upgrade_1 = 2\r\nblacksmith.damage_upgrade_2 = 3\r\nblacksmith.damage_upgrade_3 = 4\r\nblacksmith.damage_upgrade_4 = 5\r\n\r\nblacksmith.defense_upgrade_1 = 2\r\nblacksmith.defense_upgrade_2 = 3\r\nblacksmith.defense_upgrade_3 = 4\r\nblacksmith.defense_upgrade_4 = 5\r\n```\r\n\r\n-------\r\n\r\nI'm not quite sure I understand exactly what you want done...\r\n\r\n(sounds a bit like old warcraft games and other such games, with buildings and upgrades to units/resources/etc)\r\n\r\ndo you mean something like this?\r\n\r\n(Object Name: lumber_mill_1)\r\nAttribute Name: damage_1\r\nAttribute Value: 2 // such as using as a modifier for your 'archer' units' damage\r\n\r\n(Object Name: lumber_mill_1)\r\nAttribute Name: damage_2\r\nAttribute Value: 3 // such as using as a modifier for your 'archer' units' damage\r\n\r\n(Object Name: lumber_mill_1)\r\nAttribute Name: defense_1\r\nAttribute Value: 2 // such as using as a modifier for your 'archer' units' armor_class\r\n\r\n(Object Name: lumber_mill_1)\r\nAttribute Name: defense_2\r\nAttribute Value: 3 // such as using as a modifier for your 'archer' units' armor_class\r\n\r\n(Object Name: lumber_mill_2)\r\nAttribute Name: damage_1\r\nAttribute Value: 4 // such as using as a modifier for your 'archer' units' damage\r\n\r\n(Object Name: lumber_mill_2)\r\nAttribute Name: damage_2\r\nAttribute Value: 5 // such as using as a modifier for your 'archer' units' damage\r\n\r\n(Object Name: lumber_mill_2)\r\nAttribute Name: defense_1\r\nAttribute Value: 4 // such as using as a modifier for your 'archer' units' armor_class\r\n\r\n(Object Name: lumber_mill_2)\r\nAttribute Name: defense_2\r\nAttribute Value: 5 // such as using as a modifier for your 'archer' units' armor_class\r\n\r\nand then having a way of handling it, which is what you need help with from us\r\n\r\n---------\r\n\r\nI'm new to doing this type of game design... so I may not be able to provide the best design method for doing this stuff (mrangel or pixie or whoever can probably craft a better design method than me for this type of stuff) and also there's a lot of different design methods you can do, and it depends on exactly what game design you want, as well...\r\n\r\nhere's some examples..\r\n\r\n```\r\n<object name=\"units\">\r\n\r\n  <structure_objectlist type=\"objectlist\">\r\n\r\n    <value>archers</value>\r\n    <value>knights</value>\r\n\r\n  </structure_objectlist>\r\n\r\n  <object name=\"archers\">\r\n\r\n    <attr name=\"damage\" type=\"int\">1</attr>\r\n    <attr name=\"defense\" type=\"int\">1</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"knights\">\r\n\r\n    <attr name=\"damage\" type=\"int\">2</attr>\r\n    <attr name=\"defense\" type=\"int\">2</attr>\r\n\r\n  </object>\r\n\r\n</object>\r\n\r\n<object name=\"structures\">\r\n\r\n  <structure_objectlist type=\"objectlist\">\r\n\r\n    <value>lumbermill</value>\r\n    <value>blacksmith</value>\r\n\r\n  </structure_objectlist>\r\n\r\n  <object name=\"lumbermill\">\r\n\r\n    <attr name=\"lumbermill_upgrade_level\" type=\"int\">0</attr>\r\n\r\n    <attr name=\"damage_upgrade_level\" type=\"int\">0</attr>\r\n    <attr name=\"defense_upgrade_level\" type=\"int\">0</attr>\r\n\r\n    <attr name=\"damage_upgrade_1\" type=\"int\">2</attr>\r\n    <attr name=\"damage_upgrade_2\" type=\"int\">3</attr>\r\n    <attr name=\"damage_upgrade_3\" type=\"int\">4</attr>\r\n    <attr name=\"damage_upgrade_4\" type=\"int\">5</attr>\r\n\r\n    <attr name=\"defense_upgrade_1\" type=\"int\">2</attr>\r\n    <attr name=\"defense_upgrade_2\" type=\"int\">3</attr>\r\n    <attr name=\"defense_upgrade_3\" type=\"int\">4</attr>\r\n    <attr name=\"defense_upgrade_4\" type=\"int\">5</attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"blacksmith\">\r\n\r\n    <attr name=\"blacksmith_upgrade_level\" type=\"int\">0</attr>\r\n\r\n    <attr name=\"damage_upgrade_level\" type=\"int\">0</attr>\r\n    <attr name=\"defense_upgrade_level\" type=\"int\">0</attr>\r\n\r\n    <attr name=\"damage_upgrade_1\" type=\"int\">2</attr>\r\n    <attr name=\"damage_upgrade_2\" type=\"int\">3</attr>\r\n    <attr name=\"damage_upgrade_3\" type=\"int\">4</attr>\r\n    <attr name=\"damage_upgrade_4\" type=\"int\">5</attr>\r\n\r\n    <attr name=\"defense_upgrade_1\" type=\"int\">2</attr>\r\n    <attr name=\"defense_upgrade_2\" type=\"int\">3</attr>\r\n    <attr name=\"defense_upgrade_3\" type=\"int\">4</attr>\r\n    <attr name=\"defense_upgrade_4\" type=\"int\">5</attr>\r\n\r\n  </object>\r\n\r\n</object>\r\n```\r\n\r\n(err... too much work, and too hard, especially without knowing exactly what you want in your game and how you want it done)\r\n(need more clear Objectives and will need some time as well... others might be able to help you better and faster than I can)",
      "EditableFormat": "markdown",
      "HTML": "<p>Take a look at the String (Manipulation) Functions:</p>\n<p>http://docs.textadventures.co.uk/quest/functions/#string</p>\n<p>there's also Concatenation, a quick simple example:</p>\n<pre><code>string_variable = \"Hi\"\nmsg (string_variable)\n\nstring_variable = string_variable + \", how are you?\"\nmsg (string_variable)\n\nstring_variable = string_variable + \" My name is HK\"\nmsg (string_variable)\n\nstring_variable = string_variable + \", what is your name?\"\nmsg (string_variable)\n\nget input {\n  player.alias = result\n  // let's say you typed in: Nakita\n  // result = \"Nakita\"\n  // player.alias = \"Nakita\"\n}\n\nstring_variable = string_variable + \" Ah, nice to meet you, \" + player.alias + \"!\"\nmsg (string_variable)\n\n// output/results/display:\n\nHi\nHi, how are you?\nHi, how are you? My name is HK\nHi, how are you? My name is HK, what is your name?\nHi, how are you? My name is HK, what is your name? Ah, nice to meet you, Nakita!\n</code></pre>\n<hr>\n<p>then there's using List/Dictionary Attributes:</p>\n<p>(Lists/Dictionaries are just containers of items of input-output functions. They can hold/store multiple items, and thus you can add/remove items, and iterate, via 'for' and 'foreach', through their items, doing whatever actions you wish for/upon them)</p>\n<p>http://docs.textadventures.co.uk/quest/using_lists.html<br>\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html</p>\n<p>(this is a bit old and has some mistakes in it... I have other posts floating around which are newer and probably do a better and/or more concise job of trying to explain Lists and Dictionaries):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n<p>which is from within this link, which has more useful guides/resources you might want to look at as well:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>Lists:</p>\n<p>Item 1:<br>\ninput: key (as a string/integer): index number: 0<br>\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)</p>\n<p>Item 2:<br>\ninput: key (as a string/integer): index number: 1<br>\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)</p>\n<p>Item 3:<br>\ninput: key (as a string/integer): index number: 2<br>\noutput: value: format string: WHATEVER (if a String List: then the output is a String, if an Object List, then the output is an Object reference/pointer)</p>\n<p>etc etc etc</p>\n<p>Dictionaries:</p>\n<p>Item 1:<br>\ninput: key (as a string): WHATEVER<br>\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)</p>\n<p>Item 2:<br>\ninput: key (as a string): WHATEVER<br>\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)</p>\n<p>Item 3:<br>\ninput: key (as a string): WHATEVER<br>\noutput: value: format string: WHATEVER (if a String Dictionary: then the output is a String, if an Object Dictionary, then the output is an Object reference/pointer, if a Script Dictionary, then the output/s is/are Script/s)</p>\n<p>etc etc etc</p>\n<hr>\n<pre><code>Lists:\n\nVARIABLE = ListItem (LIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned (string or object refernce/pointer) output\n// quest will parse the Data Type when you use this function, so this is a dynamic function\n\nmsg (VARIABLE)\n// or:\nmsg (StringListItem (LIST, INDEX_NUMBER_INPUT))\n\nVARIABLE = StringListItem (STRINGLIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned string output\n\nmsg (VARIABLE)\n// or:\nmsg (StringListItem (STRINGLIST, INDEX_NUMBER_INPUT))\n\nVARIABLE = ObjectListItem (OBJECTLIST, INDEX_NUMBER_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned object reference/pointer output\n\nmsg (VARIABLE)\n// or:\nmsg (ObjectListItem (OBJECTLIST, INDEX_NUMBER_INPUT))\n</code></pre>\n<hr>\n<pre><code>Dictionaries:\n\nVARIABLE = DictionaryItem (DICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned (string or object reference/pointer or script) output\n// quest will parse the Data Type when you use this function, so this is a dynamic function\n\nif (TypeOf (VARIABLE) = \"string\" or TypeOf (VARIABLE) = \"object\") {\n  msg (VARIABLE)\n} else if (TypeOf (VARIABLE) = \"script\") {\n  invoke (VARIABLE)\n}\n\n// or:\n\nif (TypeOf (DICTIONARY) = \"stringdictionary\" or TypeOf (DICTIONARY) = \"objectdictionary\") {\n  msg (VARIABLE)\n} else if (TypeOf (DICTIONARY) = \"scriptdictionary\") {\n  invoke (VARIABLE)\n}\n\n// or:\n\nif (TypeOf (DICTIONARY) = \"stringdictionary\" or TypeOf (DICTIONARY) = \"objectdictionary\") {\n  msg (DictionaryItem (DICTIONARY, STRING_INPUT))\n} else if (TypeOf (DICTIONARY) = \"scriptdictionary\") {\n  invoke (DictionaryItem (DICTIONARY, STRING_INPUT))\n}\n\nVARIABLE = StringDictionaryItem (STRINGDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned string output\n\nmsg (VARIABLE)\n// or:\nmsg (StringDictionaryItem (OBJECTDICTIONARY, STRING_INPUT))\n\nVARIABLE = ObjectDictionaryItem (OBJECTDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned object reference/pointer output\n\nmsg (VARIABLE)\n// or:\nmsg (ObjectDictionaryItem (OBJECTDICTIONARY, STRING_INPUT))\n\nVARIABLE = ScriptDictionaryItem (SCRIPTDICTIONARY, STRING_INPUT) // this Function returns the output of the given input (see below)\n// VARIABLE = returned script(s) output\n\ninvoke (VARIABLE)\n// or:\ninvoke (ScriptDictionaryItem (SCRIPTDICTIONARY, STRING_INPUT))\n</code></pre>\n<hr>\n<p>there's the 'foreach', 'for', and 'while' Functions, and/or looping and/or recursion methods, for doing iteration:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/foreach.html<br>\nhttp://docs.textadventures.co.uk/quest/scripts/for.html<br>\nhttp://docs.textadventures.co.uk/quest/scripts/while.html</p>\n<p>some quick simple examples:</p>\n<pre><code>object_variable_1 = create (\"structures\")\n\nobject_variable_2 = create (\"lumbermill\")\nobject_variable_2.parent = object_variable_1\n\nobject_variable_2 = create (\"blacksmith\")\nobject_variable_2.parent = object_variable_1\n\nobject_variable_1.objectlist_attribute = NewObjectList ()\nlist add (object_variable_1.objectlist_attribute, lumbermill)\nlist add (object_variable_1.objectlist_attribute, blacksmith)\n\nobject_variable_1.stringlist_attribute = NewStringList ()\nlist add (object_variable_1.stringlist_attribute, \"damage\")\nlist add (object_variable_1.stringlist_attribute, \"defense\")\n\n// this is very inefficient to nest iterations like this (but it's just an example for you to see what can be done):\n\nforeach (object_variable_3, object_variable_1.objectlist_attribute) {\n\n  foreach (string_variable, object_variable_1.stringlist_attribute) {\n\n    for (numbering_integer_variable, 1, 4) {\n\n      numbering_string_variable = ToString (numbering_integer_variable)\n\n      attribute_name_string_variable =  string_variable + \"_upgrade_\" + numbering_string_variable\n\n      set (object_variable_1.name, attribute_name_string_variable, numbering_integer_variable + 1)\n\n  }\n}\n\n// this will create these Objects and their Attributes and their Values:\n\nstructures.objectlist_attribute = [lumbermill,blacksmith] // pseudo-code (can't use 'Split' for Object lists, nor Object Dictionaries)\nstructures.stringlist_attribute = Split (\"damage;defense\", \";\")\n\n// (also, the 'lumbermill' and 'blacksmith' Objects are contained within the 'structures' Object):\nlumbermill.parent = structures\nblacksmith.parent = structures\n\nlumbermill.damage_upgrade_1 = 2\nlumbermill.damage_upgrade_2 = 3\nlumbermill.damage_upgrade_3 = 4\nlumbermill.damage_upgrade_4 = 5\n\nlumbermill.defense_upgrade_1 = 2\nlumbermill.defense_upgrade_2 = 3\nlumbermill.defense_upgrade_3 = 4\nlumbermill.defense_upgrade_4 = 5\n\nblacksmith.damage_upgrade_1 = 2\nblacksmith.damage_upgrade_2 = 3\nblacksmith.damage_upgrade_3 = 4\nblacksmith.damage_upgrade_4 = 5\n\nblacksmith.defense_upgrade_1 = 2\nblacksmith.defense_upgrade_2 = 3\nblacksmith.defense_upgrade_3 = 4\nblacksmith.defense_upgrade_4 = 5\n</code></pre>\n<hr>\n<p>I'm not quite sure I understand exactly what you want done...</p>\n<p>(sounds a bit like old warcraft games and other such games, with buildings and upgrades to units/resources/etc)</p>\n<p>do you mean something like this?</p>\n<p>(Object Name: lumber_mill_1)<br>\nAttribute Name: damage_1<br>\nAttribute Value: 2 // such as using as a modifier for your 'archer' units' damage</p>\n<p>(Object Name: lumber_mill_1)<br>\nAttribute Name: damage_2<br>\nAttribute Value: 3 // such as using as a modifier for your 'archer' units' damage</p>\n<p>(Object Name: lumber_mill_1)<br>\nAttribute Name: defense_1<br>\nAttribute Value: 2 // such as using as a modifier for your 'archer' units' armor_class</p>\n<p>(Object Name: lumber_mill_1)<br>\nAttribute Name: defense_2<br>\nAttribute Value: 3 // such as using as a modifier for your 'archer' units' armor_class</p>\n<p>(Object Name: lumber_mill_2)<br>\nAttribute Name: damage_1<br>\nAttribute Value: 4 // such as using as a modifier for your 'archer' units' damage</p>\n<p>(Object Name: lumber_mill_2)<br>\nAttribute Name: damage_2<br>\nAttribute Value: 5 // such as using as a modifier for your 'archer' units' damage</p>\n<p>(Object Name: lumber_mill_2)<br>\nAttribute Name: defense_1<br>\nAttribute Value: 4 // such as using as a modifier for your 'archer' units' armor_class</p>\n<p>(Object Name: lumber_mill_2)<br>\nAttribute Name: defense_2<br>\nAttribute Value: 5 // such as using as a modifier for your 'archer' units' armor_class</p>\n<p>and then having a way of handling it, which is what you need help with from us</p>\n<hr>\n<p>I'm new to doing this type of game design... so I may not be able to provide the best design method for doing this stuff (mrangel or pixie or whoever can probably craft a better design method than me for this type of stuff) and also there's a lot of different design methods you can do, and it depends on exactly what game design you want, as well...</p>\n<p>here's some examples..</p>\n<pre><code>&lt;object name=\"units\"&gt;\n\n  &lt;structure_objectlist type=\"objectlist\"&gt;\n\n    &lt;value&gt;archers&lt;/value&gt;\n    &lt;value&gt;knights&lt;/value&gt;\n\n  &lt;/structure_objectlist&gt;\n\n  &lt;object name=\"archers\"&gt;\n\n    &lt;attr name=\"damage\" type=\"int\"&gt;1&lt;/attr&gt;\n    &lt;attr name=\"defense\" type=\"int\"&gt;1&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"knights\"&gt;\n\n    &lt;attr name=\"damage\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;attr name=\"defense\" type=\"int\"&gt;2&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"structures\"&gt;\n\n  &lt;structure_objectlist type=\"objectlist\"&gt;\n\n    &lt;value&gt;lumbermill&lt;/value&gt;\n    &lt;value&gt;blacksmith&lt;/value&gt;\n\n  &lt;/structure_objectlist&gt;\n\n  &lt;object name=\"lumbermill\"&gt;\n\n    &lt;attr name=\"lumbermill_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n\n    &lt;attr name=\"damage_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n\n    &lt;attr name=\"damage_upgrade_1\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_2\" type=\"int\"&gt;3&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_3\" type=\"int\"&gt;4&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_4\" type=\"int\"&gt;5&lt;/attr&gt;\n\n    &lt;attr name=\"defense_upgrade_1\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_2\" type=\"int\"&gt;3&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_3\" type=\"int\"&gt;4&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_4\" type=\"int\"&gt;5&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"blacksmith\"&gt;\n\n    &lt;attr name=\"blacksmith_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n\n    &lt;attr name=\"damage_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_level\" type=\"int\"&gt;0&lt;/attr&gt;\n\n    &lt;attr name=\"damage_upgrade_1\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_2\" type=\"int\"&gt;3&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_3\" type=\"int\"&gt;4&lt;/attr&gt;\n    &lt;attr name=\"damage_upgrade_4\" type=\"int\"&gt;5&lt;/attr&gt;\n\n    &lt;attr name=\"defense_upgrade_1\" type=\"int\"&gt;2&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_2\" type=\"int\"&gt;3&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_3\" type=\"int\"&gt;4&lt;/attr&gt;\n    &lt;attr name=\"defense_upgrade_4\" type=\"int\"&gt;5&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/object&gt;\n</code></pre>\n<p>(err... too much work, and too hard, especially without knowing exactly what you want in your game and how you want it done)<br>\n(need more clear Objectives and will need some time as well... others might be able to help you better and faster than I can)</p>\n\n",
      "PostDate": "2018-08-30T05:42:25.4715382Z",
      "LastEditDate": "2018-08-30T06:13:19.9811666Z",
      "link": null
    },
    {
      "PostId": "9b71059d-89e8-4c9f-8fc8-4fb80dcea776",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "An object can only have one (unchangeable) name.  The value for each attribute of that object can change repeatedly, however.\r\n\r\nSo if you are going to script an action with your object, it doesn't matter if its attributes have changed -- it's still the same object.  I don't think I really understood your question...",
      "EditableFormat": "markdown",
      "HTML": "<p>An object can only have one (unchangeable) name.  The value for each attribute of that object can change repeatedly, however.</p>\n<p>So if you are going to script an action with your object, it doesn't matter if its attributes have changed -- it's still the same object.  I don't think I really understood your question...</p>\n\n",
      "PostDate": "2018-08-30T06:10:35.0582459Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "166c768b-93f2-4c77-bc24-1d86bf29ea1e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just to add to Dcoder's post:\r\n\r\nObjects can be given custom String Attributes too for their in-game \"name\", especially in using the built-in 'alias' String Attribute, as it has already built-in functionality for it, unlike if you create a custom String Attribute.\r\n\r\nSo, you can iterate increasing numbers onto (via catenation) these String Attributes for the 'in-game' name of your Objects\r\n\r\nbut, as Dcoder said, the Object's 'name' String Attribute is the ID for quest, so it must be unique and thus also it can't be changed",
      "EditableFormat": "markdown",
      "HTML": "<p>just to add to Dcoder's post:</p>\n<p>Objects can be given custom String Attributes too for their in-game \"name\", especially in using the built-in 'alias' String Attribute, as it has already built-in functionality for it, unlike if you create a custom String Attribute.</p>\n<p>So, you can iterate increasing numbers onto (via catenation) these String Attributes for the 'in-game' name of your Objects</p>\n<p>but, as Dcoder said, the Object's 'name' String Attribute is the ID for quest, so it must be unique and thus also it can't be changed</p>\n\n",
      "PostDate": "2018-08-30T06:16:59.0727563Z",
      "LastEditDate": "2018-08-30T06:17:37.9101139Z",
      "link": null
    },
    {
      "PostId": "a2f0ae55-6ebc-45e1-8f32-34fd4d02e017",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Piggybacking off of HK...\r\n\r\nDon't know if this helps, but say you have a Sawmill object, with a \"level\" integer attribute set to 1.  You could put the following into the Sawmill's alias:\r\n```\r\nSawmill Lvl{Sawmill.level}\r\n```\r\nIt will say \"Sawmill Lvl1\".  You will also have to put the above text into the Sawmill's Display Alias under the Object tab.  When the \"level\" attribute changes, so will the alias.",
      "EditableFormat": "markdown",
      "HTML": "<p>Piggybacking off of HK...</p>\n<p>Don't know if this helps, but say you have a Sawmill object, with a \"level\" integer attribute set to 1.  You could put the following into the Sawmill's alias:</p>\n<pre><code>Sawmill Lvl{Sawmill.level}\n</code></pre>\n<p>It will say \"Sawmill Lvl1\".  You will also have to put the above text into the Sawmill's Display Alias under the Object tab.  When the \"level\" attribute changes, so will the alias.</p>\n\n",
      "PostDate": "2018-08-30T06:49:35.3180898Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "17a50cdb-0913-46d6-b6a5-75dc0130f2bb",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Maybe this is what you want...\r\n```\r\ngame.ChosenRoom = GetObject(Room.temp3)\r\n```\r\n```Room.temp3``` (e.g., \"Sawmill3\") is a string attribute, but is also the alias (string name) of a room.  Using the ```GetObject``` function, ```game.ChosenRoom``` has been assigned an object value that is the same as the room with the alias of \"Sawmill3\".  Now you can just script whatever you want to ```game.ChosenRoom```.",
      "EditableFormat": "markdown",
      "HTML": "<p>Maybe this is what you want...</p>\n<pre><code>game.ChosenRoom = GetObject(Room.temp3)\n</code></pre>\n<p><code>Room.temp3</code> (e.g., \"Sawmill3\") is a string attribute, but is also the alias (string name) of a room.  Using the <code>GetObject</code> function, <code>game.ChosenRoom</code> has been assigned an object value that is the same as the room with the alias of \"Sawmill3\".  Now you can just script whatever you want to <code>game.ChosenRoom</code>.</p>\n\n",
      "PostDate": "2018-08-30T07:58:50.4553055Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a6a1638f-cfa6-4372-9c26-338046e1e849",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, so not exactly sure what you are trying to do, but to give a building a level, just give it a level attribute, and set that to the number:\r\n```\r\nsawmill.level = 3\r\n```\r\n\r\nGetting a bit more complicated...\r\n\r\nIf the player can buy additional equipment to upgrade a building, you could handle that a number of ways, but one would be to have each upgrade as an object, and add the object to an upgrades list\r\n```\r\nsawmill.upgrades = NewObjectList()\r\nlist add (sawmill.upgrades, titanium saw)\r\nlist add (sawmill.upgrades, smoking area)\r\n```\r\nYou could then give each upgrade attributes that give bonuses:\r\n```\r\nsmoking area.happiness = 10\r\n```\r\nAnd add them up to get an overall bonus:\r\n```\r\nhappiness = sawmill.happiness\r\nforeach (obj, sawmill.upgrades) {\r\n  if (HasInt(obj, \"happiness\")) {\r\n    happiness = happiness + obj.happiness\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, so not exactly sure what you are trying to do, but to give a building a level, just give it a level attribute, and set that to the number:</p>\n<pre><code>sawmill.level = 3\n</code></pre>\n<p>Getting a bit more complicated...</p>\n<p>If the player can buy additional equipment to upgrade a building, you could handle that a number of ways, but one would be to have each upgrade as an object, and add the object to an upgrades list</p>\n<pre><code>sawmill.upgrades = NewObjectList()\nlist add (sawmill.upgrades, titanium saw)\nlist add (sawmill.upgrades, smoking area)\n</code></pre>\n<p>You could then give each upgrade attributes that give bonuses:</p>\n<pre><code>smoking area.happiness = 10\n</code></pre>\n<p>And add them up to get an overall bonus:</p>\n<pre><code>happiness = sawmill.happiness\nforeach (obj, sawmill.upgrades) {\n  if (HasInt(obj, \"happiness\")) {\n    happiness = happiness + obj.happiness\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-08-30T09:12:39.5477071Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fe6fd39b-a4d8-4420-a47e-4de10e948397",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, your Sawmill object has attributes named \"Level1\", \"Level2\", \"Level3\" and so on.\r\nWhat do those attributes contain?\r\n\r\nIn any case, your code would look something like:\r\n\r\n```\r\ntemp1 = 2\r\ntemp2 = \"Level\" + temp2\r\ntemp3 = GetAttribute (Sawmill, temp2)\r\n\r\n// do something with temp3\r\n```\r\nor possibly:\r\n```\r\ntemp1 = \"Sawmill\"\r\ntemp2 = 3\r\n\r\ntemp3 = GetAttribute (temp1, \"Level\"+temp2)\r\n\r\n// do something with temp3\r\n```\r\nIt's really hard to understand what you actually want this to do. But this code will get the value of the attribute `Sawmill.Level3` based on the first two variables set.\r\n\r\nHowever, this is an inefficient way to do something that would be a _lot_ easier to use lists for.\r\n\r\n\r\nI could understand a little better if you had different objects named \"Sawmill1\", \"Sawmill2\", etc that behaved in different ways.\r\nIn that case, your code would be more like:\r\n```\r\ntemp1 = \"Sawmill\"\r\ntemp2 = 3\r\n\r\nobject = GetObject (temp1 + temp2)\r\n\r\n// do something with the objects\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>So, your Sawmill object has attributes named \"Level1\", \"Level2\", \"Level3\" and so on.<br>\nWhat do those attributes contain?</p>\n<p>In any case, your code would look something like:</p>\n<pre><code>temp1 = 2\ntemp2 = \"Level\" + temp2\ntemp3 = GetAttribute (Sawmill, temp2)\n\n// do something with temp3\n</code></pre>\n<p>or possibly:</p>\n<pre><code>temp1 = \"Sawmill\"\ntemp2 = 3\n\ntemp3 = GetAttribute (temp1, \"Level\"+temp2)\n\n// do something with temp3\n</code></pre>\n<p>It's really hard to understand what you actually want this to do. But this code will get the value of the attribute <code>Sawmill.Level3</code> based on the first two variables set.</p>\n<p>However, this is an inefficient way to do something that would be a <em>lot</em> easier to use lists for.</p>\n<p>I could understand a little better if you had different objects named \"Sawmill1\", \"Sawmill2\", etc that behaved in different ways.<br>\nIn that case, your code would be more like:</p>\n<pre><code>temp1 = \"Sawmill\"\ntemp2 = 3\n\nobject = GetObject (temp1 + temp2)\n\n// do something with the objects\n</code></pre>\n\n",
      "PostDate": "2018-08-30T09:52:39.139371Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "512c738d-e5e8-44ce-969e-d711bab09423",
      "UserId": 372999,
      "Username": "Nakita Block",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3bae1b35d822d93e538260a988f64861?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The Alias thing might be what I'm looking for, for this particular example. I'll have to check it after work when I have more time.\r\n\r\nI wasn't trying to change the attribute name, I was trying to use the data from a variable to determine which attribute would be read.\r\n\r\nAgain this is just an example because I haven't made anything yet. I was just playing around with a blank script trying to get something to work.  I created an Object and then I added Attributes like Speed1, Speed2, etc. But this example, which I'll just use Sawmill again:\r\n\r\n```\r\nSawmill.Speed1 = 50\r\nSawmill.Speed2 = 100\r\nSawmill.Speed3 = 250\r\n```\r\nAnd we'll pretend the game has been played a while and we've upgraded the Sawmill to level 3.\r\n\r\n```\r\nSawmillLvl = 3\r\n```\r\nThe day is over and we need to check to see what kind of work the Sawmill has done for us. \r\n\r\n```\r\nStrVariable = \"Sawmill.Speed\" + SawmillLvl //To create \"Sawmill.Speed3\"\r\n```\r\nNow I'm trying to use StrVariable to read the info from Sawmill.Speed3.\r\nInstead of making IF SawmillLvl = 1 (Do this) ELSE IF SawmillLvl = 2 (Do this) because I plan on making a LOT of levels.\r\n\r\nIn short, I'm trying to \"hack\" the script into using Arrays according to how I'm used to seeing Arrays, e.g. <i>Sawmill.Power(n)</i>\r\n\r\nAfter reading the wonderful replies you have offered it seems that it's a lot easier to create a List to do this instead, since the data that I add to the List will be static throughout the game. BUT if it's possible to utilize that kind of manipulation in the example above it could certainly prove useful in some other way.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>The Alias thing might be what I'm looking for, for this particular example. I'll have to check it after work when I have more time.</p>\n<p>I wasn't trying to change the attribute name, I was trying to use the data from a variable to determine which attribute would be read.</p>\n<p>Again this is just an example because I haven't made anything yet. I was just playing around with a blank script trying to get something to work.  I created an Object and then I added Attributes like Speed1, Speed2, etc. But this example, which I'll just use Sawmill again:</p>\n<pre><code>Sawmill.Speed1 = 50\nSawmill.Speed2 = 100\nSawmill.Speed3 = 250\n</code></pre>\n<p>And we'll pretend the game has been played a while and we've upgraded the Sawmill to level 3.</p>\n<pre><code>SawmillLvl = 3\n</code></pre>\n<p>The day is over and we need to check to see what kind of work the Sawmill has done for us.</p>\n<pre><code>StrVariable = \"Sawmill.Speed\" + SawmillLvl //To create \"Sawmill.Speed3\"\n</code></pre>\n<p>Now I'm trying to use StrVariable to read the info from Sawmill.Speed3.<br>\nInstead of making IF SawmillLvl = 1 (Do this) ELSE IF SawmillLvl = 2 (Do this) because I plan on making a LOT of levels.</p>\n<p>In short, I'm trying to \"hack\" the script into using Arrays according to how I'm used to seeing Arrays, e.g. <i>Sawmill.Power(n)</i></p>\n<p>After reading the wonderful replies you have offered it seems that it's a lot easier to create a List to do this instead, since the data that I add to the List will be static throughout the game. BUT if it's possible to utilize that kind of manipulation in the example above it could certainly prove useful in some other way.</p>\n\n",
      "PostDate": "2018-08-30T10:26:07.3102198Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b86214eb-8493-43c4-9f0a-ec4a53bd23cf",
      "UserId": 372999,
      "Username": "Nakita Block",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3bae1b35d822d93e538260a988f64861?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dcoder and mrangel, that's exactly it! GetObject (tempname)\r\n\r\nAnd let me tell you.. When you're searching for something through the list of commands, but you don't really know what you're looking for, the words just start to run together and get more and more confusing.\r\n\r\nIn either case, I'm going to make a List instead, but I'm absolutely certain that GetObject will definitely come in handy at some point because of the way that I make games. Thank you guys ever so much for your input, because even those things that were listed that didn't go with what I Was looking for were great examples for other things that I'll use in the future. You guys are extremely helpful.",
      "EditableFormat": "markdown",
      "HTML": "<p>Dcoder and mrangel, that's exactly it! GetObject (tempname)</p>\n<p>And let me tell you.. When you're searching for something through the list of commands, but you don't really know what you're looking for, the words just start to run together and get more and more confusing.</p>\n<p>In either case, I'm going to make a List instead, but I'm absolutely certain that GetObject will definitely come in handy at some point because of the way that I make games. Thank you guys ever so much for your input, because even those things that were listed that didn't go with what I Was looking for were great examples for other things that I'll use in the future. You guys are extremely helpful.</p>\n\n",
      "PostDate": "2018-08-30T10:27:04.5031949Z",
      "LastEditDate": "2018-08-30T10:37:25.2079058Z",
      "link": null
    },
    {
      "PostId": "023220dc-92e4-4d66-b8f7-75cef835299e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> In short, I'm trying to \"hack\" the script into using Arrays according to how I'm used to seeing Arrays, e.g. _Sawmill.Power(n)_\r\n\r\nIf you already know how to use arrays, then you might as well create a list. Then you can refer to `Sawmill.power[n]` like you'd expect (Note: that's equivalent to `ListItem (Sawmill.power, n)`. The square-bracket notation is syntactic sugar for people who are used to arrays in other languages)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>In short, I'm trying to \"hack\" the script into using Arrays according to how I'm used to seeing Arrays, e.g. <em>Sawmill.Power(n)</em></p>\n</blockquote>\n<p>If you already know how to use arrays, then you might as well create a list. Then you can refer to <code>Sawmill.power[n]</code> like you'd expect (Note: that's equivalent to <code>ListItem (Sawmill.power, n)</code>. The square-bracket notation is syntactic sugar for people who are used to arrays in other languages)</p>\n\n",
      "PostDate": "2018-08-30T10:38:37.3531585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c8e3c5df-0aaa-4074-b4b4-124dfbe28b0d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "arrays and lists are basically the same thing (I know there's probably some technical differences)\r\n\r\nthe term 'list' might be used, just because its more friendly to non-coders than the scary sounding term of 'array'\r\n\r\n----------\r\n\r\nData Type Conversions:\r\n\r\n// conceptually only (due to order of operations of the code lines):\r\n\r\ninteger_variable = ToInt (string_variable)\r\nstring_variable = ToString (integer_variable)\r\n\r\ndouble_variable = ToDouble (string_variable)\r\nstring_variable = ToString (double_variable)\r\n\r\nstring_variable = object_variable.name\r\nobject_variable = GetObject (string_variable)\r\n\r\n'ToString' also works on: Strings, Object references/pointers, Scripts, Lists, and Dictionaries ( http://docs.textadventures.co.uk/quest/functions/tostring.html )\r\n\r\n---------------\r\n\r\nData Type Checking:\r\n\r\nIsXXX // if (IsXXX (XXX)) { SCRIPTING }\r\n\r\nHasXXX // if (HasXXX (OBJECT_NAME,ATTRIBUTE_NAME)) { SCRIPTING }\r\n\r\nGetObject // if (not GetObject (OBJECT_NAME) = null) { SCRIPTING }\r\n\r\nTypeOf // if (TypeOf (VALUE) = \"DATA_TYPE\") { SCRIPTING } // or:  if (TypeOf (OBJECT_NAME, ATTRIBUTE_NAME) = \"DATA_TYPE\") { SCRIPTING }\r\n\r\nDoesInherit // if (DoesInherit (OBJECT_NAME, OBJECT_TYPE_NAME)) { SCRIPTING }\r\n\r\n------\r\n\r\nAttribute Value Checking:\r\n\r\nGetXXX // if (GetXXX (OBJECT_NAME, ATTRIBUTE_NAME) = VALUE) { SCRIPTING }",
      "EditableFormat": "markdown",
      "HTML": "<p>arrays and lists are basically the same thing (I know there's probably some technical differences)</p>\n<p>the term 'list' might be used, just because its more friendly to non-coders than the scary sounding term of 'array'</p>\n<hr>\n<p>Data Type Conversions:</p>\n<p>// conceptually only (due to order of operations of the code lines):</p>\n<p>integer_variable = ToInt (string_variable)<br>\nstring_variable = ToString (integer_variable)</p>\n<p>double_variable = ToDouble (string_variable)<br>\nstring_variable = ToString (double_variable)</p>\n<p>string_variable = object_variable.name<br>\nobject_variable = GetObject (string_variable)</p>\n<p>'ToString' also works on: Strings, Object references/pointers, Scripts, Lists, and Dictionaries ( http://docs.textadventures.co.uk/quest/functions/tostring.html )</p>\n<hr>\n<p>Data Type Checking:</p>\n<p>IsXXX // if (IsXXX (XXX)) { SCRIPTING }</p>\n<p>HasXXX // if (HasXXX (OBJECT_NAME,ATTRIBUTE_NAME)) { SCRIPTING }</p>\n<p>GetObject // if (not GetObject (OBJECT_NAME) = null) { SCRIPTING }</p>\n<p>TypeOf // if (TypeOf (VALUE) = \"DATA_TYPE\") { SCRIPTING } // or:  if (TypeOf (OBJECT_NAME, ATTRIBUTE_NAME) = \"DATA_TYPE\") { SCRIPTING }</p>\n<p>DoesInherit // if (DoesInherit (OBJECT_NAME, OBJECT_TYPE_NAME)) { SCRIPTING }</p>\n<hr>\n<p>Attribute Value Checking:</p>\n<p>GetXXX // if (GetXXX (OBJECT_NAME, ATTRIBUTE_NAME) = VALUE) { SCRIPTING }</p>\n\n",
      "PostDate": "2018-08-30T17:18:16.1432506Z",
      "LastEditDate": "2018-08-30T17:57:35.402417Z",
      "link": null
    }
  ]
}
