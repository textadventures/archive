{
  "Topic": {
    "TopicId": "vp6vqa12vu21v3ukivslmg",
    "ForumId": "10",
    "Title": "I'm having trouble with a list function I in the documentation.",
    "LastUpdated": "2023-11-08T03:48:28.2589255Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fb5d1b70-675e-41ef-9652-3184ec30f07d",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, I started making a text game years ago, and I found a function that creates a list of strings. I attached it to a verb, so when the verb is used, one of the listed strings, in this case, a message, is played, then that message is removed from the list. When all all the message strings have been cycled through the game executes code to move on in the programming.\r\nUnfortunately, I accidentally deleted the object that contained this code and haven't been able to find a suitable replacement. I thought I had this code from the Documentation, but it doesn't function like the description said it would and not in the way I need.\r\nThe code I found was \r\nlist = Split (\"One;Two;Three\")\r\nfor (i, 1, 5) {\r\n  if (ListCount(list) > 0) {\r\n    s = PickOneString (list)\r\n    list remove (list, s)\r\n    msg (list)\r\n  }\r\n  else {\r\n    msg (\"Default\")\r\n  }\r\n}\r\n\r\nWhen I run it, it shows it's process by printing \r\nList: One; Two; \r\nList: One; \r\nList: \r\nDefault\r\nDefault\r\n\r\nIt always leaves out one of the strings and does not remove the one that was selected. My old code just printed the selected string without Springs the process of choosing it.\r\nWhat is a code I can use to achieve the effect I want?",
      "EditableFormat": "markdown",
      "HTML": "<p>So, I started making a text game years ago, and I found a function that creates a list of strings. I attached it to a verb, so when the verb is used, one of the listed strings, in this case, a message, is played, then that message is removed from the list. When all all the message strings have been cycled through the game executes code to move on in the programming.<br>\nUnfortunately, I accidentally deleted the object that contained this code and haven't been able to find a suitable replacement. I thought I had this code from the Documentation, but it doesn't function like the description said it would and not in the way I need.<br>\nThe code I found was<br>\nlist = Split (\"One;Two;Three\")<br>\nfor (i, 1, 5) {<br>\nif (ListCount(list) &gt; 0) {<br>\ns = PickOneString (list)<br>\nlist remove (list, s)<br>\nmsg (list)<br>\n}<br>\nelse {<br>\nmsg (\"Default\")<br>\n}<br>\n}</p>\n<p>When I run it, it shows it's process by printing<br>\nList: One; Two;<br>\nList: One;<br>\nList:<br>\nDefault<br>\nDefault</p>\n<p>It always leaves out one of the strings and does not remove the one that was selected. My old code just printed the selected string without Springs the process of choosing it.<br>\nWhat is a code I can use to achieve the effect I want?</p>\n\n",
      "PostDate": "2023-11-08T03:48:28.2589255Z",
      "LastEditDate": "2023-11-08T03:50:17.8009787Z",
      "link": null
    },
    {
      "PostId": "473b6d1b-8642-45c9-8ead-0a0c524e3ff5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It always leaves out one of the strings and does not remove the one that was selected.\r\n\r\nI'm not sure what you mean there. In your example, the first string it selected was Three, which was removed (as demonstrated by the fact that it output \"List: One; Two;\"\r\n\r\nIt selects a string from the list, removes it, and then displays the remaining contents of the list.\r\n\r\nWe can probably help you, but it's not clear what you expected this code to do.\r\nYou've shown us what it *does* do, but could you give an example of the output you *want* to see? Show what it should look like.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It always leaves out one of the strings and does not remove the one that was selected.</p>\n</blockquote>\n<p>I'm not sure what you mean there. In your example, the first string it selected was Three, which was removed (as demonstrated by the fact that it output \"List: One; Two;\"</p>\n<p>It selects a string from the list, removes it, and then displays the remaining contents of the list.</p>\n<p>We can probably help you, but it's not clear what you expected this code to do.<br>\nYou've shown us what it <em>does</em> do, but could you give an example of the output you <em>want</em> to see? Show what it should look like.</p>\n\n",
      "PostDate": "2023-11-08T17:33:07.3398714Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4adf9147-23dc-4b3f-a8c0-3246a5552b47",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I did give an example of what happens when I run the code, but I see it could be expanded so I will try again. \r\nI have revised the code a little to hopefully make it a little more clear. \r\nHere is the revised code.\r\n\"list = Split (\"Hey;Hi;Hello\")\r\nfor (i, 1, 5) {\r\n  if (ListCount(list) > 0) {\r\n    s = PickOneString (list)\r\n    list remove (list, s)\r\n    msg (list)\r\n  }\r\n  else {\r\n    msg (\"Goodbye\")\r\n  }\r\n}\"\r\nAs you can see it has three options to run and remove before it does the default message of Goodbye.\r\nNow I will show you what happens when I use the verb in the game. I want you to keep in mind that everything I show is printed when the code is run.\r\n(First Run)\r\nList: Hey; Hi; \r\nList: Hi; \r\nList: \r\nGoodbye\r\nGoodbye\r\n(Second Run)\r\nList: Hey; Hello; \r\nList: Hello; \r\nList: \r\nGoodbye\r\nGoodbye\r\n(Third Run)\r\nList: Hi; Hello; \r\nList: Hi; \r\nList: \r\nGoodbye\r\nGoodbye\r\n(Fourth Run)\r\nList: Hey; Hi; \r\nList: Hey; \r\nList: \r\nGoodbye\r\nGoodbye\r\n\r\nWhat is supposed to happen, according to the documentation, is that it should have randomly selected one of the three strings once each, then when it ran out, give the default message of Goodbye. Instead, it selected the same string multiple times and printed the default message after it each time.\r\nAlso, in my old code it did not show its process running the code that I wanted. With my old code, it looked like this.\r\n(First Run)\r\nHello\r\n(Second Run)\r\nHey\r\n(Third Run)\r\nHi\r\n(Final Run)\r\nGoodBye\r\n\r\nHow do I get the results I just gave an example of?",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I did give an example of what happens when I run the code, but I see it could be expanded so I will try again.<br>\nI have revised the code a little to hopefully make it a little more clear.<br>\nHere is the revised code.<br>\n\"list = Split (\"Hey;Hi;Hello\")<br>\nfor (i, 1, 5) {<br>\nif (ListCount(list) &gt; 0) {<br>\ns = PickOneString (list)<br>\nlist remove (list, s)<br>\nmsg (list)<br>\n}<br>\nelse {<br>\nmsg (\"Goodbye\")<br>\n}<br>\n}\"<br>\nAs you can see it has three options to run and remove before it does the default message of Goodbye.<br>\nNow I will show you what happens when I use the verb in the game. I want you to keep in mind that everything I show is printed when the code is run.<br>\n(First Run)<br>\nList: Hey; Hi;<br>\nList: Hi;<br>\nList:<br>\nGoodbye<br>\nGoodbye<br>\n(Second Run)<br>\nList: Hey; Hello;<br>\nList: Hello;<br>\nList:<br>\nGoodbye<br>\nGoodbye<br>\n(Third Run)<br>\nList: Hi; Hello;<br>\nList: Hi;<br>\nList:<br>\nGoodbye<br>\nGoodbye<br>\n(Fourth Run)<br>\nList: Hey; Hi;<br>\nList: Hey;<br>\nList:<br>\nGoodbye<br>\nGoodbye</p>\n<p>What is supposed to happen, according to the documentation, is that it should have randomly selected one of the three strings once each, then when it ran out, give the default message of Goodbye. Instead, it selected the same string multiple times and printed the default message after it each time.<br>\nAlso, in my old code it did not show its process running the code that I wanted. With my old code, it looked like this.<br>\n(First Run)<br>\nHello<br>\n(Second Run)<br>\nHey<br>\n(Third Run)<br>\nHi<br>\n(Final Run)<br>\nGoodBye</p>\n<p>How do I get the results I just gave an example of?</p>\n\n",
      "PostDate": "2023-11-08T20:07:53.30351Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ccbd6335-0948-4ba1-9929-ebbd56b40c02",
      "UserId": 629874,
      "Username": "GeminiNeule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9389e52d9e54b6af823cac64629bf3f0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Instead of  ```msg(list)``` you probably want to put ```msg(s)``` in your code, since ```s``` is the word that was picked.",
      "EditableFormat": "markdown",
      "HTML": "<p>Instead of  <code>msg(list)</code> you probably want to put <code>msg(s)</code> in your code, since <code>s</code> is the word that was picked.</p>\n\n",
      "PostDate": "2023-11-09T06:25:13.0029178Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77cb057e-a969-4425-99d5-43bca0e7b8de",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, so it did make a change. Instead of this\r\nList: Hey; Hi;\r\nList: Hi;\r\nList:\r\nGoodbye\r\nGoodbye\r\nAfter your suggestion, it now says\r\nHey\r\nHello\r\nHi\r\nGoodbye\r\nGoodbye\r\nI guess I can call that an improvement because it no longer says List: before a lot of the text. However, I still show all the possible messages and repeat the default. As I said, I just want the code to run, and it only says the one message it selected randomly, then removed it from the list and keeps doing so until none are left, and it plays the default message.\r\nIt still is not what I want as this point. Any further suggestions?",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, so it did make a change. Instead of this<br>\nList: Hey; Hi;<br>\nList: Hi;<br>\nList:<br>\nGoodbye<br>\nGoodbye<br>\nAfter your suggestion, it now says<br>\nHey<br>\nHello<br>\nHi<br>\nGoodbye<br>\nGoodbye<br>\nI guess I can call that an improvement because it no longer says List: before a lot of the text. However, I still show all the possible messages and repeat the default. As I said, I just want the code to run, and it only says the one message it selected randomly, then removed it from the list and keeps doing so until none are left, and it plays the default message.<br>\nIt still is not what I want as this point. Any further suggestions?</p>\n\n",
      "PostDate": "2023-11-09T20:08:28.0898979Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6a03b331-6245-4303-94b8-f4a2cd09aa0d",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I really need help with this. As I said, this is the last coding hurdle I have to overcome, and then I can just focus on creating content. I know it's possible because someone on here told me how to before. It's an important component to give my game a way to stand out in design.\r\nIt occurs to me that I might not have explained the issue in a way that makes sense for everybody. So I you have a question about my explanations or for clarification, just ask.",
      "EditableFormat": "markdown",
      "HTML": "<p>I really need help with this. As I said, this is the last coding hurdle I have to overcome, and then I can just focus on creating content. I know it's possible because someone on here told me how to before. It's an important component to give my game a way to stand out in design.<br>\nIt occurs to me that I might not have explained the issue in a way that makes sense for everybody. So I you have a question about my explanations or for clarification, just ask.</p>\n\n",
      "PostDate": "2023-11-11T00:45:40.1995132Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "aa8beda2-e5a1-4c85-a4af-e77d58772969",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I feel like I saw this in the tutorial where you make zombies?   Let me look\r\n\r\nIt looks like Pixie spent some time talking about various ways to use split lists when programming NPCs to pick from lists of actions.  Maybe this will help https://docs.textadventures.co.uk/quest/independent_npcs.html\r\n\r\nI'm only just surface-level learning with the lists and dictionaries yet.  So I might not be far behind you before i'm wondering something like this myself.",
      "EditableFormat": "markdown",
      "HTML": "<p>I feel like I saw this in the tutorial where you make zombies?   Let me look</p>\n<p>It looks like Pixie spent some time talking about various ways to use split lists when programming NPCs to pick from lists of actions.  Maybe this will help https://docs.textadventures.co.uk/quest/independent_npcs.html</p>\n<p>I'm only just surface-level learning with the lists and dictionaries yet.  So I might not be far behind you before i'm wondering something like this myself.</p>\n\n",
      "PostDate": "2023-11-11T12:56:45.3439426Z",
      "LastEditDate": "2023-11-11T13:00:18.0061498Z",
      "link": null
    },
    {
      "PostId": "57deefe6-119b-4f30-9f86-f740cd1212de",
      "UserId": 629874,
      "Username": "GeminiNeule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9389e52d9e54b6af823cac64629bf3f0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, I think I misunderstood what you meant with \"first run\", \"second run\"...  Each time you run the function/verb you only want to print one of the options, not all of them, correct?\r\n\r\nIn this case there are two changes you need to make:\r\nThe list needs to be persistent and not recreated every time the function is run. Easiest way would be to add a string list as an attribute to the object the verb is running on. After this you need to access this attribute, which depend on the way you implemented it.\r\n\r\nThe second change is to get rid off the for-loop. That one is responsible for printing everything at once, which you don't want.\r\n\r\n\r\nWith these two changes the script of a **verb** on an object, which holds the list on a string list attribute called  ```greetings``` would look like this:\r\n\r\n```\r\nif (ListCount(this.greetings) > 0) {\r\n  picked = PickOneString (this.greetings)\r\n  list remove (this.greetings, picked)\r\n  msg (picked)\r\n}\r\nelse {\r\n  msg (\"Goodbye\")\r\n}\r\n```\r\n\r\nI also renamed the variable as I personally don't  like one letter variables. The keyword ```this``` only works for scripts that belong to the same object that also holds the attribute. You could also use the name of the object ( ```my_talking_npc.greetings```), which would break in case you rename the object.\r\nIf you use a function instead, you either would need to either provide the list (and I am not even sure that removing from that list would be a persistent change (aka \"call by reference\")) or the object that holds the list and make sure the attribute actually exists on that object. So a lot more complicated and volatile.\r\n\r\nIf this is about conversations, take a look at Pixies Conversations Lib.:\r\nhttps://github.com/ThePix/quest/wiki/Library:-Conversations",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, I think I misunderstood what you meant with \"first run\", \"second run\"...  Each time you run the function/verb you only want to print one of the options, not all of them, correct?</p>\n<p>In this case there are two changes you need to make:<br>\nThe list needs to be persistent and not recreated every time the function is run. Easiest way would be to add a string list as an attribute to the object the verb is running on. After this you need to access this attribute, which depend on the way you implemented it.</p>\n<p>The second change is to get rid off the for-loop. That one is responsible for printing everything at once, which you don't want.</p>\n<p>With these two changes the script of a <strong>verb</strong> on an object, which holds the list on a string list attribute called  <code>greetings</code> would look like this:</p>\n<pre><code>if (ListCount(this.greetings) &gt; 0) {\n  picked = PickOneString (this.greetings)\n  list remove (this.greetings, picked)\n  msg (picked)\n}\nelse {\n  msg (\"Goodbye\")\n}\n</code></pre>\n<p>I also renamed the variable as I personally don't  like one letter variables. The keyword <code>this</code> only works for scripts that belong to the same object that also holds the attribute. You could also use the name of the object ( <code>my_talking_npc.greetings</code>), which would break in case you rename the object.<br>\nIf you use a function instead, you either would need to either provide the list (and I am not even sure that removing from that list would be a persistent change (aka \"call by reference\")) or the object that holds the list and make sure the attribute actually exists on that object. So a lot more complicated and volatile.</p>\n<p>If this is about conversations, take a look at Pixies Conversations Lib.:<br>\nhttps://github.com/ThePix/quest/wiki/Library:-Conversations</p>\n\n",
      "PostDate": "2023-11-11T15:59:18.3934716Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9902e125-7e48-4a3f-854a-190d1bf79e55",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@GeminiNeule\r\nI tried what you suggested, and it works great. In fact, it's even better than the old code I was using because in that one, I had to enter the text of each message in the split part of the code, and it was very confusing the longer it got. This way, the messages are in an attribute with a separate entry for each response. Much more organized and easier to edit.\r\nThank you so much.\r\nAnd thanks to everyone else who replied.",
      "EditableFormat": "markdown",
      "HTML": "<p>@GeminiNeule<br>\nI tried what you suggested, and it works great. In fact, it's even better than the old code I was using because in that one, I had to enter the text of each message in the split part of the code, and it was very confusing the longer it got. This way, the messages are in an attribute with a separate entry for each response. Much more organized and easier to edit.<br>\nThank you so much.<br>\nAnd thanks to everyone else who replied.</p>\n\n",
      "PostDate": "2023-11-11T20:50:02.9667499Z",
      "LastEditDate": "2023-11-11T23:32:41.2988433Z",
      "link": null
    },
    {
      "PostId": "ffd64785-7c0a-47b8-9904-fcd798048aa8",
      "UserId": 629874,
      "Username": "GeminiNeule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9389e52d9e54b6af823cac64629bf3f0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you go to the \"Attributes\" tab on an object, you can add an attribute in the bottom section. When you select that new attribute, you can select the type in a combobox on the right section next to the list. Default attribute type would be \"String\", you should be able to switch that to \"String List\".\r\n\r\nYou can also set up an attribute via code, but this should not be within the verb script, because this would basically restore the list to it's original state everytime and you never run out of options. Such code would look like this:\r\n\r\n```\r\nmy_talking_npc.greetings = Split (\"Hey;Hi;Hello\")\r\n```\r\n\r\nOr you could first create an empty StringList and add items to it seperately. I use this often when the content of the list depends on other conditions. \r\n```\r\nmy_talking_npc.greetings = NewStringlist()\r\nlist add (my_talking_npc.greetings, \"Hi\")\r\n```\r\n\r\nI try to not add attributes within the code, because this is harder to maintain if you need to find out which piece of code adds a certain attribute and you need to check whether or not a certain object possesses the attribute you are looking for (there is a function for that, but using it everywhere bloats the code).\r\n\r\nIf you want to know how it actually looks like in code view, look at ```inventoryverbs``` in the following sample.\r\n```\r\n      <object name=\"example_object\">\r\n        <inherit name=\"editor_object\" />\r\n        <drop type=\"boolean\">false</drop>\r\n        <inventoryverbs type=\"stringlist\">\r\n          <value>Untersuche</value>\r\n          <value>Benutze</value>\r\n        </inventoryverbs>\r\n        <feature_usegive />\r\n        <use type=\"script\">\r\n        </use>\r\n      </object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>If you go to the \"Attributes\" tab on an object, you can add an attribute in the bottom section. When you select that new attribute, you can select the type in a combobox on the right section next to the list. Default attribute type would be \"String\", you should be able to switch that to \"String List\".</p>\n<p>You can also set up an attribute via code, but this should not be within the verb script, because this would basically restore the list to it's original state everytime and you never run out of options. Such code would look like this:</p>\n<pre><code>my_talking_npc.greetings = Split (\"Hey;Hi;Hello\")\n</code></pre>\n<p>Or you could first create an empty StringList and add items to it seperately. I use this often when the content of the list depends on other conditions.</p>\n<pre><code>my_talking_npc.greetings = NewStringlist()\nlist add (my_talking_npc.greetings, \"Hi\")\n</code></pre>\n<p>I try to not add attributes within the code, because this is harder to maintain if you need to find out which piece of code adds a certain attribute and you need to check whether or not a certain object possesses the attribute you are looking for (there is a function for that, but using it everywhere bloats the code).</p>\n<p>If you want to know how it actually looks like in code view, look at <code>inventoryverbs</code> in the following sample.</p>\n<pre><code>      &lt;object name=\"example_object\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;drop type=\"boolean\"&gt;false&lt;/drop&gt;\n        &lt;inventoryverbs type=\"stringlist\"&gt;\n          &lt;value&gt;Untersuche&lt;/value&gt;\n          &lt;value&gt;Benutze&lt;/value&gt;\n        &lt;/inventoryverbs&gt;\n        &lt;feature_usegive /&gt;\n        &lt;use type=\"script\"&gt;\n        &lt;/use&gt;\n      &lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2023-11-11T23:25:05.6288917Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e8a1ed16-be6b-4775-a8b0-4b0a192a0935",
      "UserId": 579887,
      "Username": "Rankin87",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8331c55bc45cfe5681f62b3a1d4b6a92?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@GeminiNeule\r\nI tried what you suggested, and it works great. In fact, it's even better than the old code I was using because in that one, I had to enter the text of each message in the split part of the code, and it was very confusing the longer it got. This way, the messages are in an attribute with a separate entry for each response. It is much more organized and easier to edit.\r\nHowever, I just turned the attribute into a list of strings and entered each response individually which worked great when called by your code.\r\nThank you so much.\r\nAnd thanks to everyone else who replied.",
      "EditableFormat": "markdown",
      "HTML": "<p>@GeminiNeule<br>\nI tried what you suggested, and it works great. In fact, it's even better than the old code I was using because in that one, I had to enter the text of each message in the split part of the code, and it was very confusing the longer it got. This way, the messages are in an attribute with a separate entry for each response. It is much more organized and easier to edit.<br>\nHowever, I just turned the attribute into a list of strings and entered each response individually which worked great when called by your code.<br>\nThank you so much.<br>\nAnd thanks to everyone else who replied.</p>\n\n",
      "PostDate": "2023-11-11T23:32:48.4584785Z",
      "LastEditDate": "2023-11-11T23:36:24.8732202Z",
      "link": null
    },
    {
      "PostId": "bc8c7ad0-744f-4d76-85e9-77ca67053a8b",
      "UserId": 629874,
      "Username": "GeminiNeule",
      "AvatarUrl": "https://secure.gravatar.com/avatar/9389e52d9e54b6af823cac64629bf3f0?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Glad to help. Happy writing! :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Glad to help. Happy writing! :)</p>\n\n",
      "PostDate": "2023-11-12T13:57:18.4700464Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
