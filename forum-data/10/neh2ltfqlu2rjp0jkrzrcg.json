{
  "Topic": {
    "TopicId": "neh2ltfqlu2rjp0jkrzrcg",
    "ForumId": "10",
    "Title": "Can someone tell me how to finish this script? Assigning the script to the local clone is extremely difficult.",
    "LastUpdated": "2018-12-04T00:43:42.6200672Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d7e9db6b-6fac-4a5b-b7d5-d65a03feccd1",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nif (ListContains(ScopeReachable(), Boar)) {\r\n  if (Got(Bow)) {\r\n    if (Bow.arrows > 0) {\r\n      if (RandomChance(Kill.chance)) {\r\n      }\r\n      else {\r\n        msg (\"You missed, and the boar ran away.\")\r\n      }\r\n      Bow.arrows = Bow.arrows - 1\r\n    }\r\n    else {\r\n      msg (\"You don't have any arrows.\")\r\n    }\r\n  }\r\n  else {\r\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\r\n  }\r\n}\r\n\r\n```\r\nMy issue is removing the this 'boar' clone if the player has missed it, or giving it a 'dead' variable if the player has hit it. The problem with both is referring specifically to the local clone, not the prototype or all clones.\r\n\r\nOnce the player enters any room, there is a 10% chance of a boar spawning, using this script:\r\n```\r\nif (RandomChance(10)) {\r\n  CloneObjectAndMove (Boar, player.parent)\r\n```\r\nI need to tell Quest that when the player types \"kill boar\", the command is referring to the local clone. How do I do that in the most simplest way? Would \"boar.player.parent\" even make sense as a means of referring to that clone? If I use ScopeReachable (which i hardly know how to use), how do I get it to scan the list of reachable boars, select the local boar, and assign the command to it?",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>if (ListContains(ScopeReachable(), Boar)) {\n  if (Got(Bow)) {\n    if (Bow.arrows &gt; 0) {\n      if (RandomChance(Kill.chance)) {\n      }\n      else {\n        msg (\"You missed, and the boar ran away.\")\n      }\n      Bow.arrows = Bow.arrows - 1\n    }\n    else {\n      msg (\"You don't have any arrows.\")\n    }\n  }\n  else {\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\n  }\n}\n\n</code></pre>\n<p>My issue is removing the this 'boar' clone if the player has missed it, or giving it a 'dead' variable if the player has hit it. The problem with both is referring specifically to the local clone, not the prototype or all clones.</p>\n<p>Once the player enters any room, there is a 10% chance of a boar spawning, using this script:</p>\n<pre><code>if (RandomChance(10)) {\n  CloneObjectAndMove (Boar, player.parent)\n</code></pre>\n<p>I need to tell Quest that when the player types \"kill boar\", the command is referring to the local clone. How do I do that in the most simplest way? Would \"boar.player.parent\" even make sense as a means of referring to that clone? If I use ScopeReachable (which i hardly know how to use), how do I get it to scan the list of reachable boars, select the local boar, and assign the command to it?</p>\n\n",
      "PostDate": "2018-12-04T00:43:42.6200672Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a79afe69-ecb0-47db-80f0-3bd56d5f833b",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nif (RandomChance(10)) {\r\n  game.stored_clone_object_attribute = CloneObject (Boar)\r\n  game.stored_clone_object_attribute.parent = player.parent // moves the cloned object to the same room as you're in (as we changed the line above to just 'CloneObject', instead of what it was 'CloneObjectAndMove', so we needed to manually do it with this line here\r\n}\r\n```\r\n\r\nthe 'game.stored_clone_object_attribute' (you can replace it with whatever Object and your own-named Attribute that you want, this is just a quick example) is storing (a reference/pointer to/of) your local/temporary clone Object, meaning you can use it for whatever/where-ever you want/need to use that local/temporary clone object\r\n\r\nlike so:\r\n\r\n```\r\nif (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\r\n  if (Got(Bow)) {\r\n    if (Bow.arrows > 0) {\r\n      if (RandomChance(Kill.chance)) {\r\n        game.stored_clone_object_attribute.dead = true // setting the (boar) clone to being 'dead'\r\n        msg (\"You killed the boar!\")\r\n      }\r\n      else {\r\n        msg (\"You missed, and the boar ran away.\")\r\n        destroy (game.stored_clone_object_attribute.name) // destroying the clone object\r\n      }\r\n      Bow.arrows = Bow.arrows - 1\r\n    }\r\n    else {\r\n      msg (\"You don't have any arrows.\")\r\n    }\r\n  }\r\n  else {\r\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\r\n  }\r\n}\r\n```\r\n\r\n-------\r\n\r\nif you want to store multiple cloned objects, then we'd just use an Object List Attribute instead of an Object (reference/pointer) Attribute:\r\n\r\n```\r\n<game name=\"example\">\r\n  <attr name=\"start\" type=\"script\">\r\n    game.stored_clone_objectlist_attribute = NewObjectList ()\r\n  </attr>\r\n</game>\r\n\r\n// ----------------------------\r\n\r\nif (RandomChance(10)) {\r\n  clone_object_variable = CloneObject (Boar)\r\n  list add (game.stored_clone_objectlist_attribute, clone_object_variable)\r\n  clone_object_variable.parent = player.parent\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>if (RandomChance(10)) {\n  game.stored_clone_object_attribute = CloneObject (Boar)\n  game.stored_clone_object_attribute.parent = player.parent // moves the cloned object to the same room as you're in (as we changed the line above to just 'CloneObject', instead of what it was 'CloneObjectAndMove', so we needed to manually do it with this line here\n}\n</code></pre>\n<p>the 'game.stored_clone_object_attribute' (you can replace it with whatever Object and your own-named Attribute that you want, this is just a quick example) is storing (a reference/pointer to/of) your local/temporary clone Object, meaning you can use it for whatever/where-ever you want/need to use that local/temporary clone object</p>\n<p>like so:</p>\n<pre><code>if (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\n  if (Got(Bow)) {\n    if (Bow.arrows &gt; 0) {\n      if (RandomChance(Kill.chance)) {\n        game.stored_clone_object_attribute.dead = true // setting the (boar) clone to being 'dead'\n        msg (\"You killed the boar!\")\n      }\n      else {\n        msg (\"You missed, and the boar ran away.\")\n        destroy (game.stored_clone_object_attribute.name) // destroying the clone object\n      }\n      Bow.arrows = Bow.arrows - 1\n    }\n    else {\n      msg (\"You don't have any arrows.\")\n    }\n  }\n  else {\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\n  }\n}\n</code></pre>\n<hr>\n<p>if you want to store multiple cloned objects, then we'd just use an Object List Attribute instead of an Object (reference/pointer) Attribute:</p>\n<pre><code>&lt;game name=\"example\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    game.stored_clone_objectlist_attribute = NewObjectList ()\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n// ----------------------------\n\nif (RandomChance(10)) {\n  clone_object_variable = CloneObject (Boar)\n  list add (game.stored_clone_objectlist_attribute, clone_object_variable)\n  clone_object_variable.parent = player.parent\n}\n</code></pre>\n\n",
      "PostDate": "2018-12-04T04:19:33.9400174Z",
      "LastEditDate": "2018-12-04T04:28:31.6879527Z",
      "link": null
    },
    {
      "PostId": "be239078-b32e-435e-9916-fed4ec9b4d97",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you set the pattern of the kill command to (regular expression) `^kill (?<object>boar)$` then the command script will have access to a variable `object` which is in the same room as the player and has an alias starting with \"boar\". If there is no boar present, the player will get the default \"I can't see that\" message.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you set the pattern of the kill command to (regular expression) <code>^kill (?&lt;object&gt;boar)$</code> then the command script will have access to a variable <code>object</code> which is in the same room as the player and has an alias starting with \"boar\". If there is no boar present, the player will get the default \"I can't see that\" message.</p>\n\n",
      "PostDate": "2018-12-04T09:03:09.7461593Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "89365b56-792f-4f72-9301-37858216dab1",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Genius, now let's see if I understand this enough to make it function properly.",
      "EditableFormat": "markdown",
      "HTML": "<p>Genius, now let's see if I understand this enough to make it function properly.</p>\n\n",
      "PostDate": "2018-12-04T15:39:52.3116947Z",
      "LastEditDate": "2018-12-04T15:41:12.1962608Z",
      "link": null
    },
    {
      "PostId": "596b0444-f39f-4938-9532-5241d17e08df",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay so I think it works perfectly, but I have encountered an odd problem arising for a reason i I cannot find. After crafting a bow and arrows, and typing \"kill boar\", I get \"You need a bow to shoot the boar, it is too fast to kill otherwise\".\r\n\r\nThis is my script for crafting a bow so far:\r\n```\r\nCloneObjectAndMove (Bow, player)\r\nmsg (\"You have crafted a bow.\")\r\n```\r\nI am even told after crafting a bow, \"You have crafted a bow\" - as I intended, yet despite apparently having a bow, I cannot kill the boar.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay so I think it works perfectly, but I have encountered an odd problem arising for a reason i I cannot find. After crafting a bow and arrows, and typing \"kill boar\", I get \"You need a bow to shoot the boar, it is too fast to kill otherwise\".</p>\n<p>This is my script for crafting a bow so far:</p>\n<pre><code>CloneObjectAndMove (Bow, player)\nmsg (\"You have crafted a bow.\")\n</code></pre>\n<p>I am even told after crafting a bow, \"You have crafted a bow\" - as I intended, yet despite apparently having a bow, I cannot kill the boar.</p>\n\n",
      "PostDate": "2018-12-04T16:09:12.2594586Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e3384a50-bdde-41a5-bdd0-137e91589b7f",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "):",
      "EditableFormat": "markdown",
      "HTML": "<p>):</p>\n\n",
      "PostDate": "2018-12-04T17:13:45.7984499Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "59fbc6f8-23ef-4dbc-a86d-6a0cd3ebb95d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oops... you actually got the same problem with the 'bow' as you do/did with the 'boar', see below:\r\n\r\n```\r\nif (Got(Bow)) {\r\n```\r\n\r\nyou're checking if you got the original 'Bow' Object within your inventory (contained within your Player Object)\r\n\r\nbut you're moving the clone of the 'bow' into your inventory\r\n\r\n```\r\nCloneObjectAndMove (Bow, player)\r\n```\r\n\r\nso, you got to have it reference the 'bow' clone:\r\n\r\n```\r\nif (Got(CLONE_OF_THE_BOW)) {\r\n```\r\n\r\nsee, if you can figure out how to do the same, that you did with the 'boar clone' and the 'boar', with the 'bow clone' and the 'bow'",
      "EditableFormat": "markdown",
      "HTML": "<p>oops... you actually got the same problem with the 'bow' as you do/did with the 'boar', see below:</p>\n<pre><code>if (Got(Bow)) {\n</code></pre>\n<p>you're checking if you got the original 'Bow' Object within your inventory (contained within your Player Object)</p>\n<p>but you're moving the clone of the 'bow' into your inventory</p>\n<pre><code>CloneObjectAndMove (Bow, player)\n</code></pre>\n<p>so, you got to have it reference the 'bow' clone:</p>\n<pre><code>if (Got(CLONE_OF_THE_BOW)) {\n</code></pre>\n<p>see, if you can figure out how to do the same, that you did with the 'boar clone' and the 'boar', with the 'bow clone' and the 'bow'</p>\n\n",
      "PostDate": "2018-12-04T17:33:17.2212994Z",
      "LastEditDate": "2018-12-04T18:14:16.5982285Z",
      "link": null
    },
    {
      "PostId": "10f00052-a03d-40d2-b19d-a7f31db6c864",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ohhh I see. I was under the impression that it worked before because it printed \"You have crafted a bow\" -  but that was purely print. Clones are pesky, but I can leash them if I try :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Ohhh I see. I was under the impression that it worked before because it printed \"You have crafted a bow\" -  but that was purely print. Clones are pesky, but I can leash them if I try :)</p>\n\n",
      "PostDate": "2018-12-04T17:59:24.9042183Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80bcf12d-3f36-43e5-97e0-fcdcb5f5d58c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "To check if you're carrying a clone of the Bow, you'd want to use:\r\n```\r\nif (ListCount (FilterByAttribute (ScopeInventory(), \"prototype\", Bow)) > 0) {\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>To check if you're carrying a clone of the Bow, you'd want to use:</p>\n<pre><code>if (ListCount (FilterByAttribute (ScopeInventory(), \"prototype\", Bow)) &gt; 0) {\n</code></pre>\n\n",
      "PostDate": "2018-12-04T18:07:50.9930535Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f738eefe-4f75-496d-adb9-968eafbd74b2",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, still not working. This is what I have thus far:\r\n\r\n(\"Kill Boar\" command)\r\n```\r\nif (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\r\n  if (Got(game.bow_clone)) {\r\n    if (Bow.arrows > 0) {\r\n      if (RandomChance(Kill.chance)) {\r\n        game.stored_clone_object_attribute.dead = true\r\n        msg (\"You killed the boar!\")\r\n      }\r\n      else {\r\n        msg (\"You missed, and the boar ran away.\")\r\n        destroy (game.stored_clone_object_attribute.name)\r\n      }\r\n      Bow.arrows = Bow.arrows - 1\r\n    }\r\n    else {\r\n      msg (\"You don't have any arrows.\")\r\n    }\r\n  }\r\n  else {\r\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\r\n  }\r\n}\r\n```\r\n(\"Craft Bow\" command)\r\n```\r\ngame.bow_clone = CloneObject (Bow)\r\nCloneObjectAndMove (game.bow_clone, player)\r\nmsg (\"You have crafted a bow.\")",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, still not working. This is what I have thus far:</p>\n<p>(\"Kill Boar\" command)</p>\n<pre><code>if (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\n  if (Got(game.bow_clone)) {\n    if (Bow.arrows &gt; 0) {\n      if (RandomChance(Kill.chance)) {\n        game.stored_clone_object_attribute.dead = true\n        msg (\"You killed the boar!\")\n      }\n      else {\n        msg (\"You missed, and the boar ran away.\")\n        destroy (game.stored_clone_object_attribute.name)\n      }\n      Bow.arrows = Bow.arrows - 1\n    }\n    else {\n      msg (\"You don't have any arrows.\")\n    }\n  }\n  else {\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\n  }\n}\n</code></pre>\n<p>(\"Craft Bow\" command)</p>\n<pre><code>game.bow_clone = CloneObject (Bow)\nCloneObjectAndMove (game.bow_clone, player)\nmsg (\"You have crafted a bow.\")\n</code></pre>\n\n",
      "PostDate": "2018-12-04T18:57:24.1910985Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e7524f40-3247-4469-8d20-2d563d4b0caa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's worth noting that HK's code only allows you to kill the last boar that was created. If you leave the room that contained it and encounter another boar, you can't go back and kill the previous one later.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's worth noting that HK's code only allows you to kill the last boar that was created. If you leave the room that contained it and encounter another boar, you can't go back and kill the previous one later.</p>\n\n",
      "PostDate": "2018-12-04T19:58:35.5708762Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "60fe3fe4-1fe0-4e6e-9de3-31d4cd5ee107",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n----------\r\n\r\nyou almost got it...\r\n\r\n```\r\ngame.bow_clone = CloneObject (Bow)\r\nCloneObjectAndMove (game.bow_clone, player) // <---- this is doing the double cloning (you're cloning the clone), we need to change this problem code line\r\nmsg (\"You have crafted a bow.\")\r\n```\r\n\r\nyou're cloning the clone of the bow... you accidentally are doing double cloning..\r\n\r\nhere's the change/fix:\r\n\r\n```\r\ngame.bow_clone = CloneObject (Bow)\r\ngame.bow_clone.parent = player // or: MoveObject (game.bow_clone, player)\r\nmsg (\"You have crafted a bow.\")\r\n```\r\n\r\nand to clean up my code a bit further (making sure the clones are destroyed -- I over-looked this issue with my previous post's code):\r\n\r\n```\r\nif (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\r\n  if (Got(game.bow_clone)) {\r\n    if (Bow.arrows > 0) {\r\n      if (RandomChance(Kill.chance)) {\r\n        game.stored_clone_object_attribute.dead = true\r\n        msg (\"You killed the boar!\")\r\n      }\r\n      else {\r\n        msg (\"You missed, and the boar ran away.\")\r\n      }\r\n      Bow.arrows = Bow.arrows - 1\r\n    }\r\n    else {\r\n      msg (\"You don't have any arrows.\")\r\n    }\r\n  }\r\n  else {\r\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\r\n  }\r\n}\r\non ready {\r\n  destroy (game.stored_clone_object_attribute.name)\r\n  destroy (game.bow_clone.name)\r\n  game.stored_clone_object_attribute = null\r\n  game.bow_clone = null \r\n}\r\n```\r\n\r\n-------------\r\n\r\nmrangel is right that my code only handles the current clone Object, use his method using the built-in stuff for how Commands work, via his use of the 'regex' and of the built-in 'object' Object Variable for the Command handling's internal usage.\r\n\r\nyou can use my code, but you'd need to use Object List Attributes instead (if you want to handle multiple/previous clones), see my first post... but there's a little extra code work... involved... ask fi you need help with it.. if you're going to use this method of mine... but it's better to just use mrangel's method, as he's using the built-in code, making it easier, as it already does internally what my code does.",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>you almost got it...</p>\n<pre><code>game.bow_clone = CloneObject (Bow)\nCloneObjectAndMove (game.bow_clone, player) // &lt;---- this is doing the double cloning (you're cloning the clone), we need to change this problem code line\nmsg (\"You have crafted a bow.\")\n</code></pre>\n<p>you're cloning the clone of the bow... you accidentally are doing double cloning..</p>\n<p>here's the change/fix:</p>\n<pre><code>game.bow_clone = CloneObject (Bow)\ngame.bow_clone.parent = player // or: MoveObject (game.bow_clone, player)\nmsg (\"You have crafted a bow.\")\n</code></pre>\n<p>and to clean up my code a bit further (making sure the clones are destroyed -- I over-looked this issue with my previous post's code):</p>\n<pre><code>if (ListContains(ScopeReachable(), game.stored_clone_object_attribute)) {\n  if (Got(game.bow_clone)) {\n    if (Bow.arrows &gt; 0) {\n      if (RandomChance(Kill.chance)) {\n        game.stored_clone_object_attribute.dead = true\n        msg (\"You killed the boar!\")\n      }\n      else {\n        msg (\"You missed, and the boar ran away.\")\n      }\n      Bow.arrows = Bow.arrows - 1\n    }\n    else {\n      msg (\"You don't have any arrows.\")\n    }\n  }\n  else {\n    msg (\"You need a bow to shoot the boar, it is too fast to kill otherwise.\")\n  }\n}\non ready {\n  destroy (game.stored_clone_object_attribute.name)\n  destroy (game.bow_clone.name)\n  game.stored_clone_object_attribute = null\n  game.bow_clone = null \n}\n</code></pre>\n<hr>\n<p>mrangel is right that my code only handles the current clone Object, use his method using the built-in stuff for how Commands work, via his use of the 'regex' and of the built-in 'object' Object Variable for the Command handling's internal usage.</p>\n<p>you can use my code, but you'd need to use Object List Attributes instead (if you want to handle multiple/previous clones), see my first post... but there's a little extra code work... involved... ask fi you need help with it.. if you're going to use this method of mine... but it's better to just use mrangel's method, as he's using the built-in code, making it easier, as it already does internally what my code does.</p>\n\n",
      "PostDate": "2018-12-04T22:12:42.7915512Z",
      "LastEditDate": "2018-12-04T22:19:21.743255Z",
      "link": null
    },
    {
      "PostId": "6429d36b-2182-4a3a-a327-2f03055745fa",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Woo! It works just fine and dandy.\r\n\r\nAs for all this \"regex\" and Object List Attributes... I say to you, whaaaaat? I'm not certain what you guys mean, or how your suggestions work. Also, what is this code and what does it do?\r\n```\r\non ready {\r\n  destroy (game.stored_clone_object_attribute.name)\r\n  destroy (game.bow_clone.name)\r\n  game.stored_clone_object_attribute = null\r\n  game.bow_clone = null \r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Woo! It works just fine and dandy.</p>\n<p>As for all this \"regex\" and Object List Attributes... I say to you, whaaaaat? I'm not certain what you guys mean, or how your suggestions work. Also, what is this code and what does it do?</p>\n<pre><code>on ready {\n  destroy (game.stored_clone_object_attribute.name)\n  destroy (game.bow_clone.name)\n  game.stored_clone_object_attribute = null\n  game.bow_clone = null \n}\n</code></pre>\n\n",
      "PostDate": "2018-12-04T23:34:30.8043061Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "070dbf0f-69dc-4c5c-995b-13b83439ebaa",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the two 'destroy' code lines destroy/delete your cloned objects, so you don't have a ton of 'boar' and 'bow' clone objects taking up memory: slowing down your game possibly...\r\n\r\nthe other two code lines, is to just stop the Attributes from still pointing to those cloned objects (which don't exist anymore, due to the two 'destroy' code lines above\r\n\r\nit's just some coding safe guards to prevent coding/memory/space/performance issues for you and your game",
      "EditableFormat": "markdown",
      "HTML": "<p>the two 'destroy' code lines destroy/delete your cloned objects, so you don't have a ton of 'boar' and 'bow' clone objects taking up memory: slowing down your game possibly...</p>\n<p>the other two code lines, is to just stop the Attributes from still pointing to those cloned objects (which don't exist anymore, due to the two 'destroy' code lines above</p>\n<p>it's just some coding safe guards to prevent coding/memory/space/performance issues for you and your game</p>\n\n",
      "PostDate": "2018-12-05T04:04:08.7111579Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "00c62de0-15d5-4b3f-b60d-e34e1234f4c5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@HK:\r\n\r\nYou're destroying the bow and the boar outside the 'if' block; so whether or not they exist.\r\nIf the player doesn't have a bow, it will display the message that they don't have a bow, then destroy the boar clone, then generate an error.\r\n\r\nYou don't need to do this:\r\n>       game.stored_clone_object_attribute = null\r\n>       game.bow_clone = null \r\nThe C# method `ElementFactory.RemoveReferences` (which is called from `ElementFactory.DestroyElement`) already iterates over all attributes of all objects, and removes any that point to a destroyed object.\r\n\r\nAlso, given that there's a number of arrows, I suspect that a bow isn't intended to be a single use item.\r\n\r\nThe description of the problem implies that there are multiple boars in different locations. Your code only works if there is only ever one boar clone and one bow clone in the game at a time.",
      "EditableFormat": "markdown",
      "HTML": "<p>@HK:</p>\n<p>You're destroying the bow and the boar outside the 'if' block; so whether or not they exist.<br>\nIf the player doesn't have a bow, it will display the message that they don't have a bow, then destroy the boar clone, then generate an error.</p>\n<p>You don't need to do this:</p>\n<blockquote>\n<pre><code>  game.stored_clone_object_attribute = null\n  game.bow_clone = null \n</code></pre>\n</blockquote>\n<p>The C# method <code>ElementFactory.RemoveReferences</code> (which is called from <code>ElementFactory.DestroyElement</code>) already iterates over all attributes of all objects, and removes any that point to a destroyed object.</p>\n<p>Also, given that there's a number of arrows, I suspect that a bow isn't intended to be a single use item.</p>\n<p>The description of the problem implies that there are multiple boars in different locations. Your code only works if there is only ever one boar clone and one bow clone in the game at a time.</p>\n\n",
      "PostDate": "2018-12-05T10:39:23.1097642Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "604bbd05-4287-4aba-82d1-63a160898b6f",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel you are correct in all of your assumptions about my game, so should I incorporate everything else mentioned to me or am I okay with how my game is now?",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel you are correct in all of your assumptions about my game, so should I incorporate everything else mentioned to me or am I okay with how my game is now?</p>\n\n",
      "PostDate": "2018-12-06T01:40:08.8999565Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
