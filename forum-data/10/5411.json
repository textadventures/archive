{
  "Topic": {
    "TopicId": "5411",
    "ForumId": "10",
    "Title": "Multiple conditions met",
    "LastUpdated": "2015-08-12T00:02:34+01:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "37529",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "I am in the midst of an all day game creation affair here, so bear with the recent stupid questions...\n\nIn my game, there are 4 conditions that need met.  Four chips need to be placed in a circuit board.  The chips can be placed in any order.  I would like to give the option of reminding the player which chips have been accurately placed, so when the player looks at the board, they can see which shapes of chips they need to install.  So, let's say there are 4 chips - A,B,C, and D.  If player puts C in first, they can look at an image and see the board with chip C in place.  Then they but chip A in and I would like them to be able to see the image with chip A and C in.  Etc, etc.  And the chips are not actually lettered - they are shapes, so it makes imaging them a little more difficult than just saying 'You have accurately installed chips A, B, and D.\n\nAlso, and more importantly, I need to know how to set a flag on the board once ALL four chips have been placed, so it can be completed and used appropriately.\n\nThere has to be an easier way than I am thinking...  And in your responses... please be gentle and speak slowly (the less code heavy the better).  I'm tired.   <!-- s:( --><img src=\"{SMILIES_PATH}/icon_sad.gif\" alt=\":(\" title=\"Sad\" /><!-- s:( -->",
      "EditableFormat": "bbcode",
      "HTML": "I am in the midst of an all day game creation affair here, so bear with the recent stupid questions...<br/><br/>In my game, there are 4 conditions that need met.  Four chips need to be placed in a circuit board.  The chips can be placed in any order.  I would like to give the option of reminding the player which chips have been accurately placed, so when the player looks at the board, they can see which shapes of chips they need to install.  So, let's say there are 4 chips - A,B,C, and D.  If player puts C in first, they can look at an image and see the board with chip C in place.  Then they but chip A in and I would like them to be able to see the image with chip A and C in.  Etc, etc.  And the chips are not actually lettered - they are shapes, so it makes imaging them a little more difficult than just saying 'You have accurately installed chips A, B, and D.<br/><br/>Also, and more importantly, I need to know how to set a flag on the board once ALL four chips have been placed, so it can be completed and used appropriately.<br/><br/>There has to be an easier way than I am thinking...  And in your responses... please be gentle and speak slowly (the less code heavy the better).  I'm tired.   <!-- s:( --><img src=\"{SMILIES_PATH}/icon_sad.gif\" alt=\":(\" title=\"Sad\" /><!-- s:( -->",
      "PostDate": "2015-08-10T03:31:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37533",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "Are you using pics or the drawing functions?\n\nAs for the flag, maybe I don't understand, couldn't you just add 1 to a variable when each is installed, then check if it is equal to 4?",
      "EditableFormat": "bbcode",
      "HTML": "Are you using pics or the drawing functions?<br/><br/>As for the flag, maybe I don't understand, couldn't you just add 1 to a variable when each is installed, then check if it is equal to 4?",
      "PostDate": "2015-08-10T05:24:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37534",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I presume you're working with an Object (your board) and placing Objects (your chips) into it.\n\nWhile, using Objects isn't too much more work, it's a bit easy with using a List instead, though understanding list usage takes some time, it's not easy to learn.\n\nActually, even with working with Objects, you still have to work with Lists anyways, hehe, as they're the solution to your questions.\n\n---------\n\nthe main thing you need is the way to check for what Objects (chips) are within your Object (board) and~or to display~tell~show the person the Objects (chips) that are in the Object (board), which is done via:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/hasobject.html\">http://docs.textadventures.co.uk/quest/ ... bject.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m -->\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m -->\n\nand alternatives for your Player Object~s:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m -->\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/got.html\">http://docs.textadventures.co.uk/quest/ ... y/got.html</a><!-- m -->\n\n----------\n\nand either use:\n\nTm123's method of an Integer Attribute, which is increased, as you move your chips into your board\n~OR~\nListCount ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m --> ) + optionally also ListContains ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m --> )\n\naka:\n\n[code:2y0ma5bo]if (ListCount (Object_name&#46;Object_List_Attribute_name) = 4 and ListContains (Object_name&#46;Object_List_Attribute_name, A_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, B_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, C_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, D_chip)) {\n  msg (&quot;your board has all 4 types of chips, now do what you want it to do when it has all 4 types of chips&quot;)\n}\n\nelse if (ListCount (Object_name&#46;Object_List_Attribute_name) = 4 and ListContains (Object_name&#46;Object_List_Attribute_name, A_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, B_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, C_chip)) {\n  msg (&quot;your board has 4 items, but only 3 of those items are the correct type of chips&#46; The chip you're missing is the D_chip&quot;)\n}\n\n// etc 'else ifs'[/code:2y0ma5bo]\n\nor alternatively, you can use 'foreach' instead to cycle through your items in your list, and if they match up (or not) with your chips, doing a similiar design purpose as seen above.",
      "EditableFormat": "bbcode",
      "HTML": "I presume you're working with an Object (your board) and placing Objects (your chips) into it.<br/><br/>While, using Objects isn't too much more work, it's a bit easy with using a List instead, though understanding list usage takes some time, it's not easy to learn.<br/><br/>Actually, even with working with Objects, you still have to work with Lists anyways, hehe, as they're the solution to your questions.<br/><br/>---------<br/><br/>the main thing you need is the way to check for what Objects (chips) are within your Object (board) and~or to display~tell~show the person the Objects (chips) that are in the Object (board), which is done via:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getallchildobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/getdirectchildren.html\">http://docs.textadventures.co.uk/quest/ ... ldren.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scopes.html\">http://docs.textadventures.co.uk/quest/scopes.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\">http://docs.textadventures.co.uk/quest/ ... jects.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/hasobject.html\">http://docs.textadventures.co.uk/quest/ ... bject.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/scripts/foreach.html\">http://docs.textadventures.co.uk/quest/ ... reach.html</a><!-- m --><br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/guides/using_lists.html\">http://docs.textadventures.co.uk/quest/ ... lists.html</a><!-- m --><br/><br/>and alternatives for your Player Object~s:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/scopeinventory.html\">http://docs.textadventures.co.uk/quest/ ... ntory.html</a><!-- m --><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/corelibrary/got.html\">http://docs.textadventures.co.uk/quest/ ... y/got.html</a><!-- m --><br/><br/>----------<br/><br/>and either use:<br/><br/>Tm123's method of an Integer Attribute, which is increased, as you move your chips into your board<br/>~OR~<br/>ListCount ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcount.html\">http://docs.textadventures.co.uk/quest/ ... count.html</a><!-- m --> ) + optionally also ListContains ( <!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/listcontains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m --> )<br/><br/>aka:<br/><br/><pre><code>if (ListCount (Object_name&#46;Object_List_Attribute_name) = 4 and ListContains (Object_name&#46;Object_List_Attribute_name, A_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, B_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, C_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, D_chip)) {<br/>  msg (&quot;your board has all 4 types of chips, now do what you want it to do when it has all 4 types of chips&quot;)<br/>}<br/><br/>else if (ListCount (Object_name&#46;Object_List_Attribute_name) = 4 and ListContains (Object_name&#46;Object_List_Attribute_name, A_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, B_chip) and ListContains (Object_name&#46;Object_List_Attribute_name, C_chip)) {<br/>  msg (&quot;your board has 4 items, but only 3 of those items are the correct type of chips&#46; The chip you're missing is the D_chip&quot;)<br/>}<br/><br/>// etc 'else ifs'</code></pre><br/><br/>or alternatively, you can use 'foreach' instead to cycle through your items in your list, and if they match up (or not) with your chips, doing a similiar design purpose as seen above.",
      "PostDate": "2015-08-10T05:41:00+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37544",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "@ TM123, I am using pics.  \n\nAnd I guess I wouldn't need a flag set.  The board is inside of a land mine.  Once the four chips are installed, then it is ready to receive the 5th piece (C4) and then finally a sixth piece (a spring).  At this point it will be closed again and ready for use.  I can easily do the 5th and 6th step seeing that it is only one piece each (I'll just swap a new object in).  My problem is setting it up so that the &quot;code&quot; recognizes the 4th chip is installed.  I could easily force the player to but the chips in in a specific order, but that defeats the purpose of the puzzle that is set up.  Also, I have 6 vehicles that need disabled (in any order) and a multi-step problem that needs solved (in any order) to complete the game... so I need to learn how to do this.\n\nAnd, as long as I have been around, you'd think something this useful and obvious I'd understand by now, but... \n\nSo, I think the whole add 1 to a variable and check to see if it equals 4 is what I need, but I don't know how to do that.\n\nEDIT ADD:  \n\nIf I can figure out this little puzzle problem, that would help me tremendously.  This is code I plan on putting in my tutorial room for the such a problem.  I would like to use the puzzle pieces in any order to complete the puzzle.  Thanks in advance.\n\n[code:1jhd26sb]  &lt;object name=&quot;multiple conditions met room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;jigsaw puzzle&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;surface&quot; /&gt;\n      &lt;look type=&quot;script&quot;&gt;\n      &lt;/look&gt;\n      &lt;takemsg&gt;You don't dare pick up the jigsaw puzzle&#46;  It will certainly fall apart&#46;&lt;/takemsg&gt;\n      &lt;feature_container /&gt;\n      &lt;contentsprefix&gt;in which there are&lt;/contentsprefix&gt;\n      &lt;listchildren /&gt;\n      &lt;hidechildren /&gt;\n      &lt;object name=&quot;thousands of placed pieces&quot;&gt;\n        &lt;inherit name=&quot;editor_object&quot; /&gt;\n        &lt;scenery type=&quot;boolean&quot;&gt;false&lt;/scenery&gt;\n        &lt;visible /&gt;\n        &lt;takemsg&gt;You don't want to destroy the puzzle&#46;  You want to finish it!&lt;/takemsg&gt;\n        &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;standard piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;It's kind of square shaped with notches cut out on one side and tabs on the adjacent sides&#46;&lt;/look&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(standard piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (standard piece)\n        }\n      &lt;/take&gt;\n      &lt;feature_usegive /&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;You easily find the place that this puzzle piece goes&#46;&quot;)\n          MoveObject (standard piece, jigsaw puzzle)\n          SetObjectFlagOn (standard piece, &quot;placed&quot;)\n          MakeObjectInvisible (standard piece)\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;border piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;Flat on one side with a standard puzzle cut on the other&#46;  It goes on the outside&#46;&lt;/look&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(border piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (border piece)\n        }\n      &lt;/take&gt;\n      &lt;feature_usegive /&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;Without a problem, you find where the piece goes&#46;&quot;)\n          MoveObject (border piece, jigsaw puzzle)\n          SetObjectFlagOn (border piece, &quot;placed&quot;)\n          MakeObjectInvisible (border piece)\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;corner piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;It's your typical corner piece&#46;&lt;/look&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(corner piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (corner piece)\n        }\n      &lt;/take&gt;\n      &lt;feature_usegive /&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;In mere seconds, you connect the piece perfectly in the jigsaw puzzle&#46;&quot;)\n          MoveObject (corner piece, jigsaw puzzle)\n          SetObjectFlagOn (corner piece, &quot;placed&quot;)\n          MakeObjectInvisible (corner piece)\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;awkward piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;This is one of those weird pieces that don't look typical - just an odd, irregular shape&#46;&lt;/look&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(awkward piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (awkward piece)\n        }\n      &lt;/take&gt;\n      &lt;feature_usegive /&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;You find a place for the awkward puzzle piece&#46;&quot;)\n          MoveObject (awkward piece, jigsaw puzzle)\n          SetObjectFlagOn (awkward piece, &quot;placed&quot;)\n          MakeObjectInvisible (awkward piece)\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;Magoo&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;look&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/look&gt;\n      &lt;attr name=&quot;pov_look&quot;&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/attr&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;[/code:1jhd26sb]\n\nSo... what I did above (for practice for my big game) is this.  I have four pieces.  I take the standard piece.  I use standard piece on puzzle.  In that script, I moved standard piece to parent object puzzle.  I make that piece invisible (so when you look at the puzzle you can't &quot;see&quot; the standard piece, only 'thousands of placed puzzle pieces' (which I already included as a child of the puzzle).  I repeated with the remaining puzzle pieces.  Now I just need to know how to check to see how many missing pieces remain in the puzzle and give an appropriate description of the puzzle (i.e. there appear to be 3 missing pieces; only two pieces remain; a single piece is missing; congratulation the puzzle is complete).  Make sense?\n\nThanks again!\n\nXanMag",
      "EditableFormat": "bbcode",
      "HTML": "@ TM123, I am using pics.  <br/><br/>And I guess I wouldn't need a flag set.  The board is inside of a land mine.  Once the four chips are installed, then it is ready to receive the 5th piece (C4) and then finally a sixth piece (a spring).  At this point it will be closed again and ready for use.  I can easily do the 5th and 6th step seeing that it is only one piece each (I'll just swap a new object in).  My problem is setting it up so that the &quot;code&quot; recognizes the 4th chip is installed.  I could easily force the player to but the chips in in a specific order, but that defeats the purpose of the puzzle that is set up.  Also, I have 6 vehicles that need disabled (in any order) and a multi-step problem that needs solved (in any order) to complete the game... so I need to learn how to do this.<br/><br/>And, as long as I have been around, you'd think something this useful and obvious I'd understand by now, but... <br/><br/>So, I think the whole add 1 to a variable and check to see if it equals 4 is what I need, but I don't know how to do that.<br/><br/>EDIT ADD:  <br/><br/>If I can figure out this little puzzle problem, that would help me tremendously.  This is code I plan on putting in my tutorial room for the such a problem.  I would like to use the puzzle pieces in any order to complete the puzzle.  Thanks in advance.<br/><br/><pre><code>  &lt;object name=&quot;multiple conditions met room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;jigsaw puzzle&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;surface&quot; /&gt;<br/>      &lt;look type=&quot;script&quot;&gt;<br/>      &lt;/look&gt;<br/>      &lt;takemsg&gt;You don't dare pick up the jigsaw puzzle&#46;  It will certainly fall apart&#46;&lt;/takemsg&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;contentsprefix&gt;in which there are&lt;/contentsprefix&gt;<br/>      &lt;listchildren /&gt;<br/>      &lt;hidechildren /&gt;<br/>      &lt;object name=&quot;thousands of placed pieces&quot;&gt;<br/>        &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>        &lt;scenery type=&quot;boolean&quot;&gt;false&lt;/scenery&gt;<br/>        &lt;visible /&gt;<br/>        &lt;takemsg&gt;You don't want to destroy the puzzle&#46;  You want to finish it!&lt;/takemsg&gt;<br/>        &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;<br/>      &lt;/object&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;standard piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;It's kind of square shaped with notches cut out on one side and tabs on the adjacent sides&#46;&lt;/look&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(standard piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (standard piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;You easily find the place that this puzzle piece goes&#46;&quot;)<br/>          MoveObject (standard piece, jigsaw puzzle)<br/>          SetObjectFlagOn (standard piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (standard piece)<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;border piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;Flat on one side with a standard puzzle cut on the other&#46;  It goes on the outside&#46;&lt;/look&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(border piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (border piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;Without a problem, you find where the piece goes&#46;&quot;)<br/>          MoveObject (border piece, jigsaw puzzle)<br/>          SetObjectFlagOn (border piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (border piece)<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;corner piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;It's your typical corner piece&#46;&lt;/look&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(corner piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (corner piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;In mere seconds, you connect the piece perfectly in the jigsaw puzzle&#46;&quot;)<br/>          MoveObject (corner piece, jigsaw puzzle)<br/>          SetObjectFlagOn (corner piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (corner piece)<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;awkward piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;This is one of those weird pieces that don't look typical - just an odd, irregular shape&#46;&lt;/look&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(awkward piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (awkward piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;You find a place for the awkward puzzle piece&#46;&quot;)<br/>          MoveObject (awkward piece, jigsaw puzzle)<br/>          SetObjectFlagOn (awkward piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (awkward piece)<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;Magoo&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;look&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/look&gt;<br/>      &lt;attr name=&quot;pov_look&quot;&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/attr&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;</code></pre><br/><br/>So... what I did above (for practice for my big game) is this.  I have four pieces.  I take the standard piece.  I use standard piece on puzzle.  In that script, I moved standard piece to parent object puzzle.  I make that piece invisible (so when you look at the puzzle you can't &quot;see&quot; the standard piece, only 'thousands of placed puzzle pieces' (which I already included as a child of the puzzle).  I repeated with the remaining puzzle pieces.  Now I just need to know how to check to see how many missing pieces remain in the puzzle and give an appropriate description of the puzzle (i.e. there appear to be 3 missing pieces; only two pieces remain; a single piece is missing; congratulation the puzzle is complete).  Make sense?<br/><br/>Thanks again!<br/><br/>XanMag",
      "PostDate": "2015-08-10T15:03:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37552",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "sorry I totally forgot this link, it's much easier than using 'ListContains' and Lists:\n\n<!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/contains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m -->\n\nusing this as an example:\n\nObject Name: treasure_chest\n-&gt; Object Name: candy\n-&gt; Object Name: chocolate\n-&gt; Object Name: fire_coin\n\n[code:7qdr531a]if (Contains (treasure_chest, candy) and Contains (treasure_chest, chocolate) and Contains (treasure_chest, fire_coin)) {\n  // example, a script to show~upload&#58; picture_1\n} else if (Contains (treasure_chest, candy) and Contains (treasure_chest, chocolate)) {\n  // example, a script to show~upload&#58; picture_2\n} else if (Contains (treasure_chest, candy)) {\n  // example, a script to show~upload&#58; picture_3\n}[/code:7qdr531a]\n\n--------------\n\nif your puzzle requires working with 'ListCount' (the number~amount of items~Objects in an Object), then you must use ~work wth (create and use): Lists, as you can't directly count the number~amount of (sub~child) Objects within an (parent) Object, but you can when using a List.\n\nindirectly you can do it with an Object, via:\n\nfor example: the number~amount of Objects in~on your 'player' Player Object, aka in your 'inventory' Object List\n\n(we're actually using a pre-built Object List, in this example, the: 'player' Player Object's Objectlist Attribute: inventory)\n(so, we're really not technically using an Object at all...lol. I lied above, laughs)\n\n[code:7qdr531a]count_variable = 0\nforeach (object_variable, ScopeInventory) {\n  count_variable = count_variable + 1\n}\nplayer&#46;number_of_objects_held = count_variable[/code:7qdr531a]\n\notherwise, you got to create a List (and add your Object's names to it) ~ there's many pre-built-defined Lists too (like the 'Scopes', 'AllObjects()', and etc) so you may not need to create a list and add your object's names to it, and then you can use 'ListCount' to find the number of items in your list.",
      "EditableFormat": "bbcode",
      "HTML": "sorry I totally forgot this link, it's much easier than using 'ListContains' and Lists:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://docs.textadventures.co.uk/quest/functions/contains.html\">http://docs.textadventures.co.uk/quest/ ... tains.html</a><!-- m --><br/><br/>using this as an example:<br/><br/>Object Name: treasure_chest<br/>-&gt; Object Name: candy<br/>-&gt; Object Name: chocolate<br/>-&gt; Object Name: fire_coin<br/><br/><pre><code>if (Contains (treasure_chest, candy) and Contains (treasure_chest, chocolate) and Contains (treasure_chest, fire_coin)) {<br/>  // example, a script to show~upload&#58; picture_1<br/>} else if (Contains (treasure_chest, candy) and Contains (treasure_chest, chocolate)) {<br/>  // example, a script to show~upload&#58; picture_2<br/>} else if (Contains (treasure_chest, candy)) {<br/>  // example, a script to show~upload&#58; picture_3<br/>}</code></pre><br/><br/>--------------<br/><br/>if your puzzle requires working with 'ListCount' (the number~amount of items~Objects in an Object), then you must use ~work wth (create and use): Lists, as you can't directly count the number~amount of (sub~child) Objects within an (parent) Object, but you can when using a List.<br/><br/>indirectly you can do it with an Object, via:<br/><br/>for example: the number~amount of Objects in~on your 'player' Player Object, aka in your 'inventory' Object List<br/><br/>(we're actually using a pre-built Object List, in this example, the: 'player' Player Object's Objectlist Attribute: inventory)<br/>(so, we're really not technically using an Object at all...lol. I lied above, laughs)<br/><br/><pre><code>count_variable = 0<br/>foreach (object_variable, ScopeInventory) {<br/>  count_variable = count_variable + 1<br/>}<br/>player&#46;number_of_objects_held = count_variable</code></pre><br/><br/>otherwise, you got to create a List (and add your Object's names to it) ~ there's many pre-built-defined Lists too (like the 'Scopes', 'AllObjects()', and etc) so you may not need to create a list and add your object's names to it, and then you can use 'ListCount' to find the number of items in your list.",
      "PostDate": "2015-08-10T23:44:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37555",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "[quote:q4i01v44]Now I just need to know how to check to see how many missing pieces remain in the puzzle and give an appropriate description of the puzzle (i.e. there appear to be 3 missing pieces; only two pieces remain; a single piece is missing; congratulation the puzzle is complete).[/quote:q4i01v44]\n\nHere's how. Jigsaw Puzzle has MissingPieceCount integer attribute set to 4. The placing the pieces scripts have an added statement to decrease the count. The puzzle's look description is a script which changes according to MissingPieceCount. There is a change script on the puzzle &quot;changedMissingPieceCount&quot; (lower case &quot;c&quot; is a must) which prints a message telling how many pieces are missing, and finally &quot;congratulations!&quot; when the count is zero, and sets the puzzle.completed flag to true.\n\n[code:q4i01v44]&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;\n&lt;asl version=&quot;550&quot;&gt;\n  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;\n  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;\n  &lt;game name=&quot;puzzle&quot;&gt;\n    &lt;gameid&gt;02d1f70c-1629-4df6-b482-019cfdaa83cd&lt;/gameid&gt;\n    &lt;version&gt;1&#46;0&lt;/version&gt;\n    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=&quot;room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n  &lt;/object&gt;\n  &lt;object name=&quot;multiple conditions met room&quot;&gt;\n    &lt;inherit name=&quot;editor_room&quot; /&gt;\n    &lt;object name=&quot;jigsaw puzzle&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;surface&quot; /&gt;\n      &lt;takemsg&gt;You don't dare pick up the jigsaw puzzle&#46;  It will certainly fall apart&#46;&lt;/takemsg&gt;\n      &lt;feature_container /&gt;\n      &lt;contentsprefix&gt;in which there are&lt;/contentsprefix&gt;\n      &lt;listchildren /&gt;\n      &lt;hidechildren /&gt;\n      &lt;MissingPieceCount type=&quot;int&quot;&gt;4&lt;/MissingPieceCount&gt;\n      &lt;look type=&quot;script&quot;&gt;\n        switch (jigsaw puzzle&#46;MissingPieceCount) {\n          case (4) {\n            msg (&quot;It appears to be missing four pieces&#46;&quot;)\n          }\n          case (3) {\n            msg (&quot;It appears to be missing three pieces&#46;&quot;)\n          }\n          case (2) {\n            msg (&quot;It appears to be missing two pieces&#46;&quot;)\n          }\n          case (1) {\n            msg (&quot;It is missing only one piece&#46;&quot;)\n          }\n          case (0) {\n            msg (&quot;The puzzle is completed&#46;&quot;)\n          }\n        }\n      &lt;/look&gt;\n      &lt;changedMissingPieceCount type=&quot;script&quot;&gt;\n        msg (&quot;The missing piece count is now &quot; +  jigsaw puzzle&#46;MissingPieceCount)\n        if (jigsaw puzzle&#46;MissingPieceCount = 0) {\n          msg (&quot;CONGRATULATIONS!! YOU HAVE COMPLETED THE PUZZLE&quot;)\n          SetObjectFlagOn (jigsaw puzzle, &quot;Completed&quot;)\n        }\n      &lt;/changedMissingPieceCount&gt;\n      &lt;Completed type=&quot;boolean&quot;&gt;false&lt;/Completed&gt;\n      &lt;object name=&quot;thousands of placed pieces&quot;&gt;\n        &lt;inherit name=&quot;editor_object&quot; /&gt;\n        &lt;scenery type=&quot;boolean&quot;&gt;false&lt;/scenery&gt;\n        &lt;visible /&gt;\n        &lt;takemsg&gt;You don't want to destroy the puzzle&#46;  You want to finish it!&lt;/takemsg&gt;\n        &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;standard piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;It's kind of square shaped with notches cut out on one side and tabs on the adjacent sides&#46;&lt;/look&gt;\n      &lt;feature_usegive /&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(standard piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (standard piece)\n        }\n      &lt;/take&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;You easily find the place that this puzzle piece goes&#46;&quot;)\n          MoveObject (standard piece, jigsaw puzzle)\n          SetObjectFlagOn (standard piece, &quot;placed&quot;)\n          MakeObjectInvisible (standard piece)\n          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;border piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;Flat on one side with a standard puzzle cut on the other&#46;  It goes on the outside&#46;&lt;/look&gt;\n      &lt;feature_usegive /&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(border piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (border piece)\n        }\n      &lt;/take&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;Without a problem, you find where the piece goes&#46;&quot;)\n          MoveObject (border piece, jigsaw puzzle)\n          SetObjectFlagOn (border piece, &quot;placed&quot;)\n          MakeObjectInvisible (border piece)\n          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;corner piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;It's your typical corner piece&#46;&lt;/look&gt;\n      &lt;feature_usegive /&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(corner piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (corner piece)\n        }\n      &lt;/take&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;In mere seconds, you connect the piece perfectly in the jigsaw puzzle&#46;&quot;)\n          MoveObject (corner piece, jigsaw puzzle)\n          SetObjectFlagOn (corner piece, &quot;placed&quot;)\n          MakeObjectInvisible (corner piece)\n          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;awkward piece&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;look&gt;This is one of those weird pieces that don't look typical - just an odd, irregular shape&#46;&lt;/look&gt;\n      &lt;feature_usegive /&gt;\n      &lt;take type=&quot;script&quot;&gt;\n        if (GetBoolean(awkward piece, &quot;placed&quot;)) {\n          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)\n        }\n        else {\n          msg (&quot;Taken&#46;&quot;)\n          AddToInventory (awkward piece)\n        }\n      &lt;/take&gt;\n      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;\n        &lt;item key=&quot;jigsaw puzzle&quot;&gt;\n          msg (&quot;You find a place for the awkward puzzle piece&#46;&quot;)\n          MoveObject (awkward piece, jigsaw puzzle)\n          SetObjectFlagOn (awkward piece, &quot;placed&quot;)\n          MakeObjectInvisible (awkward piece)\n          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1\n        &lt;/item&gt;\n      &lt;/selfuseon&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;Magoo&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n      &lt;look&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/look&gt;\n      &lt;attr name=&quot;pov_look&quot;&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/attr&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;player&quot;&gt;\n      &lt;inherit name=&quot;editor_object&quot; /&gt;\n      &lt;inherit name=&quot;editor_player&quot; /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;[/code:q4i01v44]",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Now I just need to know how to check to see how many missing pieces remain in the puzzle and give an appropriate description of the puzzle (i.e. there appear to be 3 missing pieces; only two pieces remain; a single piece is missing; congratulation the puzzle is complete).</p></blockquote><br/><br/>Here's how. Jigsaw Puzzle has MissingPieceCount integer attribute set to 4. The placing the pieces scripts have an added statement to decrease the count. The puzzle's look description is a script which changes according to MissingPieceCount. There is a change script on the puzzle &quot;changedMissingPieceCount&quot; (lower case &quot;c&quot; is a must) which prints a message telling how many pieces are missing, and finally &quot;congratulations!&quot; when the count is zero, and sets the puzzle.completed flag to true.<br/><br/><pre><code>&lt;!--Saved by Quest 5&#46;6&#46;5621&#46;18142--&gt;<br/>&lt;asl version=&quot;550&quot;&gt;<br/>  &lt;include ref=&quot;English&#46;aslx&quot; /&gt;<br/>  &lt;include ref=&quot;Core&#46;aslx&quot; /&gt;<br/>  &lt;game name=&quot;puzzle&quot;&gt;<br/>    &lt;gameid&gt;02d1f70c-1629-4df6-b482-019cfdaa83cd&lt;/gameid&gt;<br/>    &lt;version&gt;1&#46;0&lt;/version&gt;<br/>    &lt;firstpublished&gt;2015&lt;/firstpublished&gt;<br/>  &lt;/game&gt;<br/>  &lt;object name=&quot;room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>  &lt;/object&gt;<br/>  &lt;object name=&quot;multiple conditions met room&quot;&gt;<br/>    &lt;inherit name=&quot;editor_room&quot; /&gt;<br/>    &lt;object name=&quot;jigsaw puzzle&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;surface&quot; /&gt;<br/>      &lt;takemsg&gt;You don't dare pick up the jigsaw puzzle&#46;  It will certainly fall apart&#46;&lt;/takemsg&gt;<br/>      &lt;feature_container /&gt;<br/>      &lt;contentsprefix&gt;in which there are&lt;/contentsprefix&gt;<br/>      &lt;listchildren /&gt;<br/>      &lt;hidechildren /&gt;<br/>      &lt;MissingPieceCount type=&quot;int&quot;&gt;4&lt;/MissingPieceCount&gt;<br/>      &lt;look type=&quot;script&quot;&gt;<br/>        switch (jigsaw puzzle&#46;MissingPieceCount) {<br/>          case (4) {<br/>            msg (&quot;It appears to be missing four pieces&#46;&quot;)<br/>          }<br/>          case (3) {<br/>            msg (&quot;It appears to be missing three pieces&#46;&quot;)<br/>          }<br/>          case (2) {<br/>            msg (&quot;It appears to be missing two pieces&#46;&quot;)<br/>          }<br/>          case (1) {<br/>            msg (&quot;It is missing only one piece&#46;&quot;)<br/>          }<br/>          case (0) {<br/>            msg (&quot;The puzzle is completed&#46;&quot;)<br/>          }<br/>        }<br/>      &lt;/look&gt;<br/>      &lt;changedMissingPieceCount type=&quot;script&quot;&gt;<br/>        msg (&quot;The missing piece count is now &quot; +  jigsaw puzzle&#46;MissingPieceCount)<br/>        if (jigsaw puzzle&#46;MissingPieceCount = 0) {<br/>          msg (&quot;CONGRATULATIONS!! YOU HAVE COMPLETED THE PUZZLE&quot;)<br/>          SetObjectFlagOn (jigsaw puzzle, &quot;Completed&quot;)<br/>        }<br/>      &lt;/changedMissingPieceCount&gt;<br/>      &lt;Completed type=&quot;boolean&quot;&gt;false&lt;/Completed&gt;<br/>      &lt;object name=&quot;thousands of placed pieces&quot;&gt;<br/>        &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>        &lt;scenery type=&quot;boolean&quot;&gt;false&lt;/scenery&gt;<br/>        &lt;visible /&gt;<br/>        &lt;takemsg&gt;You don't want to destroy the puzzle&#46;  You want to finish it!&lt;/takemsg&gt;<br/>        &lt;usedefaultprefix type=&quot;boolean&quot;&gt;false&lt;/usedefaultprefix&gt;<br/>      &lt;/object&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;standard piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;It's kind of square shaped with notches cut out on one side and tabs on the adjacent sides&#46;&lt;/look&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(standard piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (standard piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;You easily find the place that this puzzle piece goes&#46;&quot;)<br/>          MoveObject (standard piece, jigsaw puzzle)<br/>          SetObjectFlagOn (standard piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (standard piece)<br/>          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;border piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;Flat on one side with a standard puzzle cut on the other&#46;  It goes on the outside&#46;&lt;/look&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(border piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (border piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;Without a problem, you find where the piece goes&#46;&quot;)<br/>          MoveObject (border piece, jigsaw puzzle)<br/>          SetObjectFlagOn (border piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (border piece)<br/>          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;corner piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;It's your typical corner piece&#46;&lt;/look&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(corner piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (corner piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;In mere seconds, you connect the piece perfectly in the jigsaw puzzle&#46;&quot;)<br/>          MoveObject (corner piece, jigsaw puzzle)<br/>          SetObjectFlagOn (corner piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (corner piece)<br/>          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;awkward piece&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;look&gt;This is one of those weird pieces that don't look typical - just an odd, irregular shape&#46;&lt;/look&gt;<br/>      &lt;feature_usegive /&gt;<br/>      &lt;take type=&quot;script&quot;&gt;<br/>        if (GetBoolean(awkward piece, &quot;placed&quot;)) {<br/>          msg (&quot;You have already placed this piece correctly&#46;  No need to take it out now!&quot;)<br/>        }<br/>        else {<br/>          msg (&quot;Taken&#46;&quot;)<br/>          AddToInventory (awkward piece)<br/>        }<br/>      &lt;/take&gt;<br/>      &lt;selfuseon type=&quot;scriptdictionary&quot;&gt;<br/>        &lt;item key=&quot;jigsaw puzzle&quot;&gt;<br/>          msg (&quot;You find a place for the awkward puzzle piece&#46;&quot;)<br/>          MoveObject (awkward piece, jigsaw puzzle)<br/>          SetObjectFlagOn (awkward piece, &quot;placed&quot;)<br/>          MakeObjectInvisible (awkward piece)<br/>          jigsaw puzzle&#46;MissingPieceCount = jigsaw puzzle&#46;MissingPieceCount - 1<br/>        &lt;/item&gt;<br/>      &lt;/selfuseon&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;Magoo&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>      &lt;look&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/look&gt;<br/>      &lt;attr name=&quot;pov_look&quot;&gt;You're Magoo&#46;  A simple being trapped in a test game&#46;&lt;/attr&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;player&quot;&gt;<br/>      &lt;inherit name=&quot;editor_object&quot; /&gt;<br/>      &lt;inherit name=&quot;editor_player&quot; /&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/asl&gt;</code></pre>",
      "PostDate": "2015-08-11T01:13:51+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37557",
      "UserId": 0,
      "Username": "TM123",
      "UserAvatar": null,
      "UserGravatar": "6f54d3b84fe319d79f8df732b1676a50",
      "EditableText": "oh - about the pics. If I'm not mistaken, you'd need 16: one with no chips, 4 with one of each, 6 with all combinations of 2, 4 with all combinations of 3, and one with all 4.\nSuggestion: each chip represents a binary bit of a 4 bit number. A = 1, B = 2, C = 4, D = 8.\nHave an attribute SumInstalledChips. When they install each chip, the value would be added to the attribute. This would give you all the combinations, numbered 0 to 15. Name the pics &quot;Pic0&quot; to &quot;Pic15&quot; based on which chips are in them. (B and C = 6, all 4 = 15 etc) Then the file name would be &quot;Pic&quot; + SumInstalledChips",
      "EditableFormat": "bbcode",
      "HTML": "oh - about the pics. If I'm not mistaken, you'd need 16: one with no chips, 4 with one of each, 6 with all combinations of 2, 4 with all combinations of 3, and one with all 4.<br/>Suggestion: each chip represents a binary bit of a 4 bit number. A = 1, B = 2, C = 4, D = 8.<br/>Have an attribute SumInstalledChips. When they install each chip, the value would be added to the attribute. This would give you all the combinations, numbered 0 to 15. Name the pics &quot;Pic0&quot; to &quot;Pic15&quot; based on which chips are in them. (B and C = 6, all 4 = 15 etc) Then the file name would be &quot;Pic&quot; + SumInstalledChips",
      "PostDate": "2015-08-11T01:38:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "37579",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "@TM123\n\nI got the puzzle problem to work perfectly.  Thanks!\n\nNow... the trick will be to translate all of this into my main game.\n\nFor my land mine...\nThis is pretty much identical to the puzzle problem that we (mostly you) just solved.  The land mine will be a jigsaw puzzle and the different chips will be my puzzle pieces.  Solution:  I'd add an intenger attribute to my land mine equal to 6 [code:1g7jwzqc]&lt;MissingPieceCount type=&quot;int&quot;&gt;6&lt;/MissingPieceCount&gt;[/code:1g7jwzqc] and with each correct placement of my 6 total parts I'd have a line like this [code:1g7jwzqc]metal plate&#46;MissingPieceCount = metal plate&#46;MissingPieceCount - 1[/code:1g7jwzqc]  I'd have to add a changedMissingPieceCount attribute on the land mine that tells the player the land mine is ready for use 'If' the MissingPieceCount equals 0.  I'd also add a flag here that makes the 'use' of the land mine effective.\n\nFor the security cell...\nBackground and *spoiler* - the player must use a dryer sheet on themselves AND spray the room with water at which point they can crawl through a grate and into the cell.  They can do this in any order.  My grate will be my jigsaw puzzle.  The dryer sheet and the spraying will be my puzzle pieces.  Solution:  I'd add an integer attribute to my grate equal to 2 - [code:1g7jwzqc]&lt;GrateRemovalCount type=&quot;int&quot;&gt;2&lt;/GrateRemovalCount&gt;[/code:1g7jwzqc].  When the player uses the dryer sheet on themselves and sprays the room with water I'd have a line of code at the end of that script (respectively) like this [code:1g7jwzqc]grate&#46;GrateRemovalCount = grate&#46;GrateRemovalCount - 1[/code:1g7jwzqc].  I'd have to add a changedGrateRemovalCount attribute to the grate that gives the player a hint that removal of the grate is now possible 'If&quot; the GrateRemovalCount equals 0.  I'd also Unlock the exit leading from the grate room to the maximum security prison cell.\n\nFor the get away...\nBackground - there are six vehicles that need disabling before the player can make a safe get away.  \nAdd an integer to the game equal to 6[code:1g7jwzqc]&lt;VehiclesDisabledCount type=&quot;int&quot;&gt;6&lt;/VehiclesDisabledCount&gt;[/code:1g7jwzqc]  When each vehicle is disabled, I'd add a line of code like so: [code:1g7jwzqc]game&#46;VehiclesDisabledCount = VehicleDisabledCount - 1[/code:1g7jwzqc].  I would add a changedVehicleDisabledCount attribute to the game that raises a flag that the garage door (escape route) can now be raised with the correct code 'If' the VehicleDisabledCount equals 0.\n\nNow, most of this junk none of you will find useful.  I'm really just trying to walk myself through it here on the forum so I can reference it later, BUT... if any of you see any major errors in my method, please point it out before I screw stuff up and make it harder on myself!!!\n\nThanks a ton!!\n\nXanMag",
      "EditableFormat": "bbcode",
      "HTML": "@TM123<br/><br/>I got the puzzle problem to work perfectly.  Thanks!<br/><br/>Now... the trick will be to translate all of this into my main game.<br/><br/>For my land mine...<br/>This is pretty much identical to the puzzle problem that we (mostly you) just solved.  The land mine will be a jigsaw puzzle and the different chips will be my puzzle pieces.  Solution:  I'd add an intenger attribute to my land mine equal to 6 <pre><code>&lt;MissingPieceCount type=&quot;int&quot;&gt;6&lt;/MissingPieceCount&gt;</code></pre> and with each correct placement of my 6 total parts I'd have a line like this <pre><code>metal plate&#46;MissingPieceCount = metal plate&#46;MissingPieceCount - 1</code></pre>  I'd have to add a changedMissingPieceCount attribute on the land mine that tells the player the land mine is ready for use 'If' the MissingPieceCount equals 0.  I'd also add a flag here that makes the 'use' of the land mine effective.<br/><br/>For the security cell...<br/>Background and *spoiler* - the player must use a dryer sheet on themselves AND spray the room with water at which point they can crawl through a grate and into the cell.  They can do this in any order.  My grate will be my jigsaw puzzle.  The dryer sheet and the spraying will be my puzzle pieces.  Solution:  I'd add an integer attribute to my grate equal to 2 - <pre><code>&lt;GrateRemovalCount type=&quot;int&quot;&gt;2&lt;/GrateRemovalCount&gt;</code></pre>.  When the player uses the dryer sheet on themselves and sprays the room with water I'd have a line of code at the end of that script (respectively) like this <pre><code>grate&#46;GrateRemovalCount = grate&#46;GrateRemovalCount - 1</code></pre>.  I'd have to add a changedGrateRemovalCount attribute to the grate that gives the player a hint that removal of the grate is now possible 'If&quot; the GrateRemovalCount equals 0.  I'd also Unlock the exit leading from the grate room to the maximum security prison cell.<br/><br/>For the get away...<br/>Background - there are six vehicles that need disabling before the player can make a safe get away.  <br/>Add an integer to the game equal to 6<pre><code>&lt;VehiclesDisabledCount type=&quot;int&quot;&gt;6&lt;/VehiclesDisabledCount&gt;</code></pre>  When each vehicle is disabled, I'd add a line of code like so: <pre><code>game&#46;VehiclesDisabledCount = VehicleDisabledCount - 1</code></pre>.  I would add a changedVehicleDisabledCount attribute to the game that raises a flag that the garage door (escape route) can now be raised with the correct code 'If' the VehicleDisabledCount equals 0.<br/><br/>Now, most of this junk none of you will find useful.  I'm really just trying to walk myself through it here on the forum so I can reference it later, BUT... if any of you see any major errors in my method, please point it out before I screw stuff up and make it harder on myself!!!<br/><br/>Thanks a ton!!<br/><br/>XanMag",
      "PostDate": "2015-08-12T00:02:34+01:00",
      "LastEditDate": null
    }
  ]
}
