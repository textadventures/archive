{
  "Topic": {
    "TopicId": "idlkabshhu60a21c2os66q",
    "ForumId": "10",
    "Title": "Using 'this' in script dictionaries, and counting the number of indices",
    "LastUpdated": "2017-01-07T03:47:18.0845275Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "360aa78f-940c-452c-823d-f10b2f338a33",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey all, I'm setting up a system that will randomise some descriptions in my game. I'm using a script dictionary which has a whole bunch of msgs, but occaisonally needs to refer to this.alias. Unfortunately when I envoke one the scripts in my dictionary it doesn't recognise what 'this' is. I can't use a specific object name, because the library will be applied to a range of objects. For example one of the scripts in my dictionary might look like this:\r\n\r\n```\r\nmsg (\"The \" + this.alias + \" is looking fine.\")\r\n```\r\n\r\nSecondly, is there any way I can retrieve the number of items in a dictionary as an integer? The reason being is that I'm selecting a random script from the dictionary using code similar to this:\r\n\r\n```\r\n  n = ToString (GetRandomInt(0,x))\r\n  invoke (ScriptDictionaryItem (this.script_library, n))\r\n```\r\n\r\nI'd like x to be the number of items in the dictionary, so that I don't have to manually change it every time I add a new index.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey all, I'm setting up a system that will randomise some descriptions in my game. I'm using a script dictionary which has a whole bunch of msgs, but occaisonally needs to refer to this.alias. Unfortunately when I envoke one the scripts in my dictionary it doesn't recognise what 'this' is. I can't use a specific object name, because the library will be applied to a range of objects. For example one of the scripts in my dictionary might look like this:</p>\n<pre><code>msg (\"The \" + this.alias + \" is looking fine.\")\n</code></pre>\n<p>Secondly, is there any way I can retrieve the number of items in a dictionary as an integer? The reason being is that I'm selecting a random script from the dictionary using code similar to this:</p>\n<pre><code>  n = ToString (GetRandomInt(0,x))\n  invoke (ScriptDictionaryItem (this.script_library, n))\n</code></pre>\n<p>I'd like x to be the number of items in the dictionary, so that I don't have to manually change it every time I add a new index.</p>\n\n",
      "PostDate": "2017-01-07T03:47:18.0845275Z",
      "LastEditDate": "2017-01-07T03:48:39.1109504Z"
    },
    {
      "PostId": "af86ff18-94bc-42b0-86e7-b53f1df6163a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I too struggle to understand Script Dictionaries (and a few other things in whether you can pass Parameters/Arguments which has ~ \"Dictionary Values\" in their syntax or if this is refering to how it works underneath --- the doc is not clear/detailed on some stuff argh, in whether you can pass Parameters/Arguments/inputs for it or not. If not, then you can't use Script Dictionaries obviously if you need to pass Arguments/Parameters/inputs, which means you're going to have to change/craft a design with using Functions or Objects (and thus being able to use Script Attributes and Delegates: this allows you to have Parameters/Arguments and return types for Script Attributes, as you have with Functions), instead of using a Script Dictionary.\r\n\r\nIf you can pass/use Parameters/Arguments, then you must use 'do' and not 'invoke', as 'do' is able to use Parameters/Arguments (which then if the Script Dictionary can do/use as well, will take those Parameters/Arguments from 'do' and use them for its scripting). 'Invoke' is not able to take Parameters/Arguments. 'Do' (Script Attributes) and 'Set' (Attributes) are the powerful/useful Functions, whereas 'invoke' and using scripting (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION) for Attributes are limited in their functionality. 'Invoke' can't use Parameters/Arguments, and the scripting can't use VARIABLES nor concatenation for its Object and Attribute, whereas 'set' can.\r\n\r\nI don't think Dictionaries use/have index numbers, as you have a string for its key/reference instead*\r\n\r\n*(take an actual human language dictionary. let's say you want to look up the definition of 'spulunking -- can't spell lol'. To get to it's definition, you can be given its page number which is what a List's index number essentially is, or, since the human dictionary is ordered alphabetically, you can get to 'spulunking' by using that string 'spulunking' itself too, you keep turning the pages until you get to the 's' section, and then you keep turning pages until you get to all the rest of the letters in 'spulunking', which is what/how quest/programming's Dictionary Attribute works)\r\n\r\nYou can though get the quantity of items from both Lists and Dictionaries, via: ListCount or DictionaryCount\r\n(note that if you're working with Lists, the last item's index number is 1 less than the ListCount value, as List's index number starts at 0 not 1)\r\n\r\nYou can also check whether the List and Dictionary has an item or not via: ListContains or DictionaryContains or via your own scripting using 'foreach', but normally you'd just use the built-in ListContains/DictionaryContains, as they're using 'foreach' themselves underneath.\r\n\r\nthis link has all of the Functions for Dictionaries as hyperlinks:\r\n\r\nhttp://docs.textadventures.co.uk/quest/using_dictionaries.html (you see the very bottom sentence mentions the 'DictionaryContains' and 'DictionaryCount' functions)\r\n\r\nVARIABLE = DictionaryCount (DICTIONARY)\r\n\r\nyou have a problem with this, as Dictionaries don't have index numbers (at least I'm pretty sure of, meh):\r\n\r\nn = ToString (GetRandomInt(0,x))\r\ninvoke (ScriptDictionaryItem (this.script_library, n))\r\n\r\nso, you need to do this:\r\n\r\ncreate a String List Attribute that has all of the strings/keys of your Dictionary\r\nthe 'getrandomint' will get the 'string' item from your String List Attribute\r\nthat string will get the scripting from the Script Dictionary Attribute\r\nso, it should look like this:\r\n\r\n(unfortunately, 'this' can't work with a Script Dictionary, unless you can use Parameters/Arguments, as the scriptings of a Script Dictionaries' items/keys is a different scope/level/layer, and thus 'this' can't traverse those different scopes/levels/layers (this is what Parameters/Arguments allow for / do)\r\n\r\n(also, if you can use Parameters/Arguments with Script Dictionaries, you need to use 'do' instead of 'invoke', though good luck on how to code it's syntax correctly... and let me know how its done, lol. As I'm not sure on the syntax for doing it myself)\r\n\r\nx = ListCount (STRINGLIST)\r\nn = StringListItem (STRINGLIST, GetRandomInt(0, x - 1))\r\ninvoke (ScriptDictionaryItem (SCRIPTDICTIONARY, n))\r\n\r\nor, you can put it all on one line (multiple lines is easier to read/understand and to have the syntax right --- getting the correct number of parenthesis right and in the right places on a single line is not easy, lol. But sometimes you just like the conciseness of having it all on one line... meh):\r\n\r\ninvoke (ScriptDictionaryItem (SCRIPTDICTIONARY, StringListItem (STRINGLIST, GetRandomInt (0, ListCount (STRINGLIST) - 1))))\r\n\r\nand here's for Lists' Functions:\r\n\r\nhttp://docs.textadventures.co.uk/quest/guides/using_lists.html\r\n\r\nalso, you can take a look at this, though it's a bit advance (and has some mess ups --- I was learning how to use Lists and Dictionaries with this coding myself, hehe), but you can at least use it to see how you can use Lists and Dictionaries together and how its syntax is done (I think I've done it as a single line instead of using multiple lines, so I made it harder on myself, meh):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk\r\n\r\nand if you want to take a look at my own guide on using Lists/Dictionaries (if you don't already know of it):\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk",
      "EditableFormat": "markdown",
      "HTML": "<p>I too struggle to understand Script Dictionaries (and a few other things in whether you can pass Parameters/Arguments which has ~ \"Dictionary Values\" in their syntax or if this is refering to how it works underneath --- the doc is not clear/detailed on some stuff argh, in whether you can pass Parameters/Arguments/inputs for it or not. If not, then you can't use Script Dictionaries obviously if you need to pass Arguments/Parameters/inputs, which means you're going to have to change/craft a design with using Functions or Objects (and thus being able to use Script Attributes and Delegates: this allows you to have Parameters/Arguments and return types for Script Attributes, as you have with Functions), instead of using a Script Dictionary.</p>\n<p>If you can pass/use Parameters/Arguments, then you must use 'do' and not 'invoke', as 'do' is able to use Parameters/Arguments (which then if the Script Dictionary can do/use as well, will take those Parameters/Arguments from 'do' and use them for its scripting). 'Invoke' is not able to take Parameters/Arguments. 'Do' (Script Attributes) and 'Set' (Attributes) are the powerful/useful Functions, whereas 'invoke' and using scripting (NAME_OF_OBJECT.NAME_OF_ATTRIBUTE = VALUE_OR_EXPRESSION) for Attributes are limited in their functionality. 'Invoke' can't use Parameters/Arguments, and the scripting can't use VARIABLES nor concatenation for its Object and Attribute, whereas 'set' can.</p>\n<p>I don't think Dictionaries use/have index numbers, as you have a string for its key/reference instead*</p>\n<p>*(take an actual human language dictionary. let's say you want to look up the definition of 'spulunking -- can't spell lol'. To get to it's definition, you can be given its page number which is what a List's index number essentially is, or, since the human dictionary is ordered alphabetically, you can get to 'spulunking' by using that string 'spulunking' itself too, you keep turning the pages until you get to the 's' section, and then you keep turning pages until you get to all the rest of the letters in 'spulunking', which is what/how quest/programming's Dictionary Attribute works)</p>\n<p>You can though get the quantity of items from both Lists and Dictionaries, via: ListCount or DictionaryCount<br>\n(note that if you're working with Lists, the last item's index number is 1 less than the ListCount value, as List's index number starts at 0 not 1)</p>\n<p>You can also check whether the List and Dictionary has an item or not via: ListContains or DictionaryContains or via your own scripting using 'foreach', but normally you'd just use the built-in ListContains/DictionaryContains, as they're using 'foreach' themselves underneath.</p>\n<p>this link has all of the Functions for Dictionaries as hyperlinks:</p>\n<p>http://docs.textadventures.co.uk/quest/using_dictionaries.html (you see the very bottom sentence mentions the 'DictionaryContains' and 'DictionaryCount' functions)</p>\n<p>VARIABLE = DictionaryCount (DICTIONARY)</p>\n<p>you have a problem with this, as Dictionaries don't have index numbers (at least I'm pretty sure of, meh):</p>\n<p>n = ToString (GetRandomInt(0,x))<br>\ninvoke (ScriptDictionaryItem (this.script_library, n))</p>\n<p>so, you need to do this:</p>\n<p>create a String List Attribute that has all of the strings/keys of your Dictionary<br>\nthe 'getrandomint' will get the 'string' item from your String List Attribute<br>\nthat string will get the scripting from the Script Dictionary Attribute<br>\nso, it should look like this:</p>\n<p>(unfortunately, 'this' can't work with a Script Dictionary, unless you can use Parameters/Arguments, as the scriptings of a Script Dictionaries' items/keys is a different scope/level/layer, and thus 'this' can't traverse those different scopes/levels/layers (this is what Parameters/Arguments allow for / do)</p>\n<p>(also, if you can use Parameters/Arguments with Script Dictionaries, you need to use 'do' instead of 'invoke', though good luck on how to code it's syntax correctly... and let me know how its done, lol. As I'm not sure on the syntax for doing it myself)</p>\n<p>x = ListCount (STRINGLIST)<br>\nn = StringListItem (STRINGLIST, GetRandomInt(0, x - 1))<br>\ninvoke (ScriptDictionaryItem (SCRIPTDICTIONARY, n))</p>\n<p>or, you can put it all on one line (multiple lines is easier to read/understand and to have the syntax right --- getting the correct number of parenthesis right and in the right places on a single line is not easy, lol. But sometimes you just like the conciseness of having it all on one line... meh):</p>\n<p>invoke (ScriptDictionaryItem (SCRIPTDICTIONARY, StringListItem (STRINGLIST, GetRandomInt (0, ListCount (STRINGLIST) - 1))))</p>\n<p>and here's for Lists' Functions:</p>\n<p>http://docs.textadventures.co.uk/quest/guides/using_lists.html</p>\n<p>also, you can take a look at this, though it's a bit advance (and has some mess ups --- I was learning how to use Lists and Dictionaries with this coding myself, hehe), but you can at least use it to see how you can use Lists and Dictionaries together and how its syntax is done (I think I've done it as a single line instead of using multiple lines, so I made it harder on myself, meh):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5138/explore-and-travel-code-sample-by-hk</p>\n<p>and if you want to take a look at my own guide on using Lists/Dictionaries (if you don't already know of it):</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5137/list-and-dictionary-extensive-guide-by-hk</p>\n\n",
      "PostDate": "2017-01-07T04:49:44.1116836Z",
      "LastEditDate": "2017-01-07T04:52:24.7964681Z"
    },
    {
      "PostId": "1d306a81-6807-43ea-8e0b-d6b01efd75d6",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oops... my bad... I forgot that if you use numbers for your Dictionaries' keys/strings (to mimic a List's use of index numbers), then you don't need a String List Attribute.\r\n\r\nso, this would work fine/perfectly (you had it nearly right, aside from the issue with 'this' not working and a few small details), if your Dictionary uses numbers for its keys/strings, an example for you:\r\n\r\n```\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"1\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"2\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"3\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\n// scripting:\r\n\r\nn = ToString (GetRandomInt(1, DictionaryCount (example_object.example_scriptdictionary)))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n\r\n// if you want as single code line:\r\n\r\n// invoke (ScriptDictionaryItem (example_object.example_scriptdictionary, ToString (GetRandomInt (1, DictionaryCount (example_object.example_scriptdictionary)))))\r\n\r\n--------------------------------------------------------------------------\r\n\r\nor (see how it differs, look at the above and the below, based on what numbers you use for the Dictionary's key/string)\r\n\r\n---------------------------------------------------------------------------\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"0\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"1\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"2\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\n// scripting:\r\n\r\nn = ToString (GetRandomInt(0, DictionaryCount (example_object.example_scriptdictionary) - 1))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n\r\n// if you want as single code line:\r\n\r\n// invoke (ScriptDictionaryItem (example_object.example_scriptdictionary, ToString (GetRandomInt(0, DictionaryCount (example_object.example_scriptdictionary) - 1))))\r\n```\r\n\r\n-----------\r\n\r\nP.S.\r\n\r\nhopefully this is obvious, but the numbers used MUST be contigious (the order of the items' numbers don't matter, but you must be able to take all of the numbers and be able to count from the lowest to the highest: contigious-ness)\r\n\r\nfor example:\r\n\r\n(oops, just realized, this was missing something in order for it to work, laughs. See if you can notice it, I'll have the corrected version further below)\r\n\r\n```\r\nworks fine:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"10\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"8\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"9\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary)))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n\r\n-------------------------\r\n\r\ndoes NOT work:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"11\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"8\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"9\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary)))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n```\r\n\r\n-------------------------------\r\n\r\ncorrected version:\r\n\r\nit's simpliest to use numbers: 1...N, for you Dictionary item's keys/strings, as no need for a 'DictionaryCount(x) -1' (0...N) or 'Dictionarycount(x) - 1 + N' (N...M)\r\n\r\nbut my example shows if you want to start with a number over/greater-than 1, just so you can see it works (and how if done non-contigiously, does NOT work), but these examples would work for starting with '0' or '1' and adjusted as needed, too.\r\n\r\n```\r\nworks fine:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"10\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"8\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"9\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 7))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n\r\n-------------------------\r\n\r\ndoes NOT work:\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_scriptdictionary\" type=\"scriptdictionary\">\r\n    <item key=\"11\">\r\n      msg (\"blah1\")\r\n    </item>\r\n    <item key=\"8\">\r\n      msg (\"blah2\")\r\n    </item>\r\n    <item key=\"9\">\r\n      msg (\"blah1\")\r\n    </item>\r\n  </attr>\r\n</object>\r\n\r\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 7))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n\r\nor, also doesn't work:\r\n\r\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 8))\r\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oops... my bad... I forgot that if you use numbers for your Dictionaries' keys/strings (to mimic a List's use of index numbers), then you don't need a String List Attribute.</p>\n<p>so, this would work fine/perfectly (you had it nearly right, aside from the issue with 'this' not working and a few small details), if your Dictionary uses numbers for its keys/strings, an example for you:</p>\n<pre><code>&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"1\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"2\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"3\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting:\n\nn = ToString (GetRandomInt(1, DictionaryCount (example_object.example_scriptdictionary)))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n\n// if you want as single code line:\n\n// invoke (ScriptDictionaryItem (example_object.example_scriptdictionary, ToString (GetRandomInt (1, DictionaryCount (example_object.example_scriptdictionary)))))\n\n--------------------------------------------------------------------------\n\nor (see how it differs, look at the above and the below, based on what numbers you use for the Dictionary's key/string)\n\n---------------------------------------------------------------------------\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"0\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"1\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"2\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// scripting:\n\nn = ToString (GetRandomInt(0, DictionaryCount (example_object.example_scriptdictionary) - 1))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n\n// if you want as single code line:\n\n// invoke (ScriptDictionaryItem (example_object.example_scriptdictionary, ToString (GetRandomInt(0, DictionaryCount (example_object.example_scriptdictionary) - 1))))\n</code></pre>\n<hr>\n<p>P.S.</p>\n<p>hopefully this is obvious, but the numbers used MUST be contigious (the order of the items' numbers don't matter, but you must be able to take all of the numbers and be able to count from the lowest to the highest: contigious-ness)</p>\n<p>for example:</p>\n<p>(oops, just realized, this was missing something in order for it to work, laughs. See if you can notice it, I'll have the corrected version further below)</p>\n<pre><code>works fine:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"10\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"8\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"9\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary)))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n\n-------------------------\n\ndoes NOT work:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"11\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"8\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"9\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary)))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n</code></pre>\n<hr>\n<p>corrected version:</p>\n<p>it's simpliest to use numbers: 1...N, for you Dictionary item's keys/strings, as no need for a 'DictionaryCount(x) -1' (0...N) or 'Dictionarycount(x) - 1 + N' (N...M)</p>\n<p>but my example shows if you want to start with a number over/greater-than 1, just so you can see it works (and how if done non-contigiously, does NOT work), but these examples would work for starting with '0' or '1' and adjusted as needed, too.</p>\n<pre><code>works fine:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"10\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"8\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"9\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 7))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n\n-------------------------\n\ndoes NOT work:\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_scriptdictionary\" type=\"scriptdictionary\"&gt;\n    &lt;item key=\"11\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n    &lt;item key=\"8\"&gt;\n      msg (\"blah2\")\n    &lt;/item&gt;\n    &lt;item key=\"9\"&gt;\n      msg (\"blah1\")\n    &lt;/item&gt;\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 7))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n\nor, also doesn't work:\n\nn = ToString (GetRandomInt(8, DictionaryCount (example_object.example_scriptdictionary) + 8))\ninvoke (ScriptDictionaryItem (example_object.example_scriptdictionary, n))\n</code></pre>\n\n",
      "PostDate": "2017-01-07T05:22:57.7937201Z",
      "LastEditDate": "2017-01-07T05:50:35.1874831Z"
    },
    {
      "PostId": "4275ef79-4c66-420f-938a-6e8e09d03237",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wait, I'm confused. Sorry for being dense but I've read your explanation a few times and I still don't understand.\r\n\r\nFirst to clarify. When you refer to parameters and arguments, you mean 'Parameter (Argument)' correct?\r\n\r\nSo you're saying that you're not sure if I use\r\n```\r\ndo (ScriptDictionaryItem (this.script_library, n))\r\n```\r\n\r\nIf I could use a second parameter/argument within the brackets of the first parameter? I think that's fine, because that's not what I'm trying to do.\r\n\r\nAlso from what I understand I can't reference object.attributes within a script inside a script library unless I use do (including this.attribute).\r\n\r\nUnfortunately, when I change 'invoke' to 'do', I get an error saying that the script expected 2 or 3 parameters. I'm not sure why, as far as I can tell the above syntax should be correct.\r\n\r\nAlso DictionaryCount is exactly what I was looking for, so thank you!",
      "EditableFormat": "markdown",
      "HTML": "<p>Wait, I'm confused. Sorry for being dense but I've read your explanation a few times and I still don't understand.</p>\n<p>First to clarify. When you refer to parameters and arguments, you mean 'Parameter (Argument)' correct?</p>\n<p>So you're saying that you're not sure if I use</p>\n<pre><code>do (ScriptDictionaryItem (this.script_library, n))\n</code></pre>\n<p>If I could use a second parameter/argument within the brackets of the first parameter? I think that's fine, because that's not what I'm trying to do.</p>\n<p>Also from what I understand I can't reference object.attributes within a script inside a script library unless I use do (including this.attribute).</p>\n<p>Unfortunately, when I change 'invoke' to 'do', I get an error saying that the script expected 2 or 3 parameters. I'm not sure why, as far as I can tell the above syntax should be correct.</p>\n<p>Also DictionaryCount is exactly what I was looking for, so thank you!</p>\n\n",
      "PostDate": "2017-01-07T07:04:35.1711077Z",
      "LastEditDate": "2017-01-07T07:13:58.5764333Z"
    },
    {
      "PostId": "769551e9-84ae-464b-b11e-0f6890dd2d74",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "no ignorance on your part, I throw a lot of terms at you, and often not with clarity and/or incorrectly, and they're confusing, even without me making them even more confusing because I'm not being precise/clear with them and/or not explaining them.\r\n\r\n------------\r\n\r\n// this is a bit more technical, deeper into the 'programming weeds' (general programming / non-quest programming):\r\n\r\nin programming languages, you can or need-to (depends on your program code structure, using multiple files/libraries and thus linker, and compiler) have 'PROTOTYPES', which tell the compiler and human the Function's HEADER/SIGNATURE ahead of time, pretend example using quest:\r\n\r\n// function PROTOTYPE:\r\n\r\n// (actually/technically, the names of the options' variables' names don't matter, they do NOT have to match up with the DEFINITION's HEADER/SIGNATURE options' variables' names, but the types and options and the name of the function, do, of course)\r\n\r\n```\r\n<function name=\"two_string_concatenation_function\" parameters=\"parameter_variable_1, parameter_variable_2\" type=\"string\" etc less or more options />\r\n```\r\n\r\nbut quest doesn't require or have Prototypes for Functions\r\n\r\n----------------------\r\n\r\nhowever... if you want to use Objects and Script Attributes, quest has 'Delegates', which allow for you to have Arguments/Parameters and return type for your Object's Script Attributes (as normally you can't as Script Attributes don't have Arguments/Parameters and return type). Quest's 'Delegates' are literally the same thing as 'Prototypes' except they're for an Object's Script Attribute, if you want to see a guide on using Delegates (though it's a bit advanced/confusing if you're new to coding --- it actually took me quite a while and only recently to finally understand them myself, lol):\r\n\r\nhttp://docs.textadventures.co.uk/quest/types/using_delegates.html\r\n\r\n-----------------------\r\n\r\n'Parameters' are the names of special VARIABLES specified and used by a Function's (and Commands and maybe some other stuff too) scripting in its definition (specified within the header/signature and used in the body):\r\n\r\n// function DEFINITION (its creation: what it does, how it does it, inputs/Parameters, output:return type, etc etc etc):\r\n\r\n```\r\n<function name=\"two_string_concatenation_function\" parameters=\"parameter_variable_1, parameter_variable_2\" type=\"string\" etc less or more options> // function HEADER/SIGNATURE code line, and beginning function block tag\r\n  // function BODY (contents/scripting):\r\n  return (parameter_variable_1 + parameter_variable_2)\r\n</function> // ending function block tag\r\n```\r\n\r\n--------------------\r\n\r\nthe 'Arguments' are the position/slot matching inputs in the function's 'call' (the actual using/doing/activating/executing/invoking/calling of the function) code line / scripting:\r\n\r\n```\r\nx = two_string_concatenation_function (\"mama\",\"mia\")\r\nmsg (x)\r\n// output: mamamia\r\n```\r\n\r\nso '\"mama\" is Argument position/slot 1 which matches up with the function's DEFINITION's HEADER/SIGNATURE 's Parameter position/slot 1, essentially this is what is going on:\r\n\r\nparameter_variable_1 = \"mama\"\r\n\r\nand \"mia\" is Argument position/slot 2 which matches up with the function's DEFINITION's HEADER/SIGNATURE 's Parameter position/slot 2, essentially this is what is going on:\r\n\r\nparameter_variable_2 = \"mia\"\r\n\r\n-------\r\n\r\nSo the Function call's 'Arguments' are the inputs (either as VARIABLES or LITERALS: direct values) for the Function, which are stored/saved/set to/into the corresponding Parameters' variables, and then which those Parameters' variables are used by the Function's scripting.\r\n\r\n------\r\n\r\nVARIABLE usage for Arguments:\r\n\r\nVariable VARIABLE:\r\n\r\na = \"mama\"\r\nb = \"mia\"\r\n\r\nx = two_string_concatenation_function (a,b)\r\nmsg (x)\r\n// output: mamamia\r\n\r\nAttribute VARIABLE:\r\n\r\ngame.a = \"mama\"\r\ngame.b = \"mia\"\r\n\r\nx = two_string_concatenation_function (game.a, game.b)\r\nmsg (x)\r\n// output: mamamia\r\n\r\nLITERALS (direct values) usage for Arguments:\r\n\r\nx = two_string_concatenation_function (\"mama\", \"mia\")\r\nmsg (x)\r\n// output: mamamia\r\n\r\n------\r\n\r\ndoes this help clear up the terms (and their concepts and concepts), or did I just confuse you more?",
      "EditableFormat": "markdown",
      "HTML": "<p>no ignorance on your part, I throw a lot of terms at you, and often not with clarity and/or incorrectly, and they're confusing, even without me making them even more confusing because I'm not being precise/clear with them and/or not explaining them.</p>\n<hr>\n<p>// this is a bit more technical, deeper into the 'programming weeds' (general programming / non-quest programming):</p>\n<p>in programming languages, you can or need-to (depends on your program code structure, using multiple files/libraries and thus linker, and compiler) have 'PROTOTYPES', which tell the compiler and human the Function's HEADER/SIGNATURE ahead of time, pretend example using quest:</p>\n<p>// function PROTOTYPE:</p>\n<p>// (actually/technically, the names of the options' variables' names don't matter, they do NOT have to match up with the DEFINITION's HEADER/SIGNATURE options' variables' names, but the types and options and the name of the function, do, of course)</p>\n<pre><code>&lt;function name=\"two_string_concatenation_function\" parameters=\"parameter_variable_1, parameter_variable_2\" type=\"string\" etc less or more options /&gt;\n</code></pre>\n<p>but quest doesn't require or have Prototypes for Functions</p>\n<hr>\n<p>however... if you want to use Objects and Script Attributes, quest has 'Delegates', which allow for you to have Arguments/Parameters and return type for your Object's Script Attributes (as normally you can't as Script Attributes don't have Arguments/Parameters and return type). Quest's 'Delegates' are literally the same thing as 'Prototypes' except they're for an Object's Script Attribute, if you want to see a guide on using Delegates (though it's a bit advanced/confusing if you're new to coding --- it actually took me quite a while and only recently to finally understand them myself, lol):</p>\n<p>http://docs.textadventures.co.uk/quest/types/using_delegates.html</p>\n<hr>\n<p>'Parameters' are the names of special VARIABLES specified and used by a Function's (and Commands and maybe some other stuff too) scripting in its definition (specified within the header/signature and used in the body):</p>\n<p>// function DEFINITION (its creation: what it does, how it does it, inputs/Parameters, output:return type, etc etc etc):</p>\n<pre><code>&lt;function name=\"two_string_concatenation_function\" parameters=\"parameter_variable_1, parameter_variable_2\" type=\"string\" etc less or more options&gt; // function HEADER/SIGNATURE code line, and beginning function block tag\n  // function BODY (contents/scripting):\n  return (parameter_variable_1 + parameter_variable_2)\n&lt;/function&gt; // ending function block tag\n</code></pre>\n<hr>\n<p>the 'Arguments' are the position/slot matching inputs in the function's 'call' (the actual using/doing/activating/executing/invoking/calling of the function) code line / scripting:</p>\n<pre><code>x = two_string_concatenation_function (\"mama\",\"mia\")\nmsg (x)\n// output: mamamia\n</code></pre>\n<p>so '\"mama\" is Argument position/slot 1 which matches up with the function's DEFINITION's HEADER/SIGNATURE 's Parameter position/slot 1, essentially this is what is going on:</p>\n<p>parameter_variable_1 = \"mama\"</p>\n<p>and \"mia\" is Argument position/slot 2 which matches up with the function's DEFINITION's HEADER/SIGNATURE 's Parameter position/slot 2, essentially this is what is going on:</p>\n<p>parameter_variable_2 = \"mia\"</p>\n<hr>\n<p>So the Function call's 'Arguments' are the inputs (either as VARIABLES or LITERALS: direct values) for the Function, which are stored/saved/set to/into the corresponding Parameters' variables, and then which those Parameters' variables are used by the Function's scripting.</p>\n<hr>\n<p>VARIABLE usage for Arguments:</p>\n<p>Variable VARIABLE:</p>\n<p>a = \"mama\"<br>\nb = \"mia\"</p>\n<p>x = two_string_concatenation_function (a,b)<br>\nmsg (x)<br>\n// output: mamamia</p>\n<p>Attribute VARIABLE:</p>\n<p>game.a = \"mama\"<br>\ngame.b = \"mia\"</p>\n<p>x = two_string_concatenation_function (game.a, game.b)<br>\nmsg (x)<br>\n// output: mamamia</p>\n<p>LITERALS (direct values) usage for Arguments:</p>\n<p>x = two_string_concatenation_function (\"mama\", \"mia\")<br>\nmsg (x)<br>\n// output: mamamia</p>\n<hr>\n<p>does this help clear up the terms (and their concepts and concepts), or did I just confuse you more?</p>\n\n",
      "PostDate": "2017-01-07T07:39:18.6668166Z",
      "LastEditDate": "2017-01-07T08:41:22.1011132Z"
    },
    {
      "PostId": "0a2b54f5-0b68-4ebc-81c5-ed995f4b127d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"\r\nUnfortunately, when I change 'invoke' to 'do', I get an error saying that the script expected 2 or 3 parameters. I'm not sure why, as far as I can tell the above syntax should be correct\r\n(scrim)\r\n\"\r\n\r\n--------------\r\n\r\nthis is because, let's look at 'do' Function's DEFINITION / syntax:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/do.html\r\n\r\n// no more than 2 Parameters/inputs:\r\ndo (object, string attribute name)\r\n\r\n// more than 2 Parameters/inputs (this is an example of me being confused, but I think this means you can give it Parameters, but normally Script Attributes don't/can't use Parameters.... so this would mean you'd have to create a Delegate for this Script Attribute, or indeed I'm not understanding the documentation... see, I'm confused by it myself, laughs):\r\n\r\ndo (object, string attribute name, dictionary parameters)\r\n\r\ncompared to what you did:\r\n\r\ndo (ScriptDictionaryItem (this.script_library, n))\r\n\r\nyou have only a single input, 'ScriptDictionaryItem (this.script_library, n)', in/for you 'do' Function, but it requires at least 2 inputs (OBJECT/NAME_OF_OBJECT, NAME_OF_SCRIPT_ATTRIBUTE)\r\n\r\nhence the error\r\n\r\n----------\r\n\r\n'do' is more confusing than 'invoke' when you want to use 'ScriptDictionaryItem'\r\n\r\nI think... it'd be like this (and you can't use 'this'):\r\n\r\ndo (NAME_OF_OBJECT, \"script_library\", ScriptDictionaryItem (NAME_OF_OBJECT.script_library, n))\r\n\r\nerr... actually... maybe you can NOT use 'do' at all with 'ScriptDictionaryitem'....\r\n\r\nI think if you're using 'ScriptDictionaryItem' you got to use 'invoke'...\r\n\r\nsorry, this is confusing for me too... I don't really understand this stuff that well myself.\r\n\r\nerr... again.... I think this might work....\r\n\r\ndo (NAME_OF_OBJECT, \"script_library\", n)\r\n\r\nI'm trying to understand/learn this along with you, as I try to help you, laughs.\r\n\r\n-------\r\n\r\n'invoke' is more simple:\r\n\r\nhttp://docs.textadventures.co.uk/quest/scripts/invoke.html\r\n\r\ninvoke (script)\r\n\r\nyou can see that it's Argument/input is literally a Script Value, so that's why the 'ScriptDictionaryItem' Function works, as it returns a Script Value\r\n\r\nso, 'invoke (ScriptDictionaryItem (this.script_library, n))', works / works fine / no errors\r\n\r\nalso, another example of using a built-in Script Attribute (though you got to change the 'description' to being a Script Attribute from its default of a String Attribute when using the GUI/Editor, and of course give it contents/scripts):\r\n\r\ninvoke (room.description)\r\n\r\nand this is I think again for if you have a Script that can take Arguments/Parameters/Inputs (which would mean you'd have to create a Delegate for it, if I'm understanding this stuff correctly, lol):\r\n\r\ninvoke (script, dictionary parameters)\r\n\r\n--------\r\n\r\nbut, 'do' requires a different and confusing-to-get-it-right syntax (and more arguments/parameters/inputs)\r\n\r\nactually... now I think I'm understanding it:\r\n\r\nyou can NOT use 'do' and 'ScriptDictionaryitem', as none of the required inputs/parameters/arguments of 'do' is that of a Script Value, and the 'ScriptDictionaryItem' Function returns a Script Value, hence the error / incompatibility of them used together.\r\n\r\n---------\r\n\r\nso...\r\n\r\n// for what you're doing:\r\n// n = SOME_STRING\r\n// that 'SOME_STRING' must be a key/string of/for/within one of your Script Dictionary Attribute's items' keys, hopefully obviously\r\n// and since you're using the 'GetRandomInt', you need your script dictionary's items' keys' strings to be contigious numbers (easiest is using: 1...N)\r\n\r\nI think these are the same thing, and hopefully will both work:\r\n\r\ninvoke (ScriptDictionaryItem (NAME_OF_OBJECT.NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE, n)\r\n\r\nor\r\n\r\ndo (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)",
      "EditableFormat": "markdown",
      "HTML": "<p>\"<br>\nUnfortunately, when I change 'invoke' to 'do', I get an error saying that the script expected 2 or 3 parameters. I'm not sure why, as far as I can tell the above syntax should be correct<br>\n(scrim)<br>\n\"</p>\n<hr>\n<p>this is because, let's look at 'do' Function's DEFINITION / syntax:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/do.html</p>\n<p>// no more than 2 Parameters/inputs:<br>\ndo (object, string attribute name)</p>\n<p>// more than 2 Parameters/inputs (this is an example of me being confused, but I think this means you can give it Parameters, but normally Script Attributes don't/can't use Parameters.... so this would mean you'd have to create a Delegate for this Script Attribute, or indeed I'm not understanding the documentation... see, I'm confused by it myself, laughs):</p>\n<p>do (object, string attribute name, dictionary parameters)</p>\n<p>compared to what you did:</p>\n<p>do (ScriptDictionaryItem (this.script_library, n))</p>\n<p>you have only a single input, 'ScriptDictionaryItem (this.script_library, n)', in/for you 'do' Function, but it requires at least 2 inputs (OBJECT/NAME_OF_OBJECT, NAME_OF_SCRIPT_ATTRIBUTE)</p>\n<p>hence the error</p>\n<hr>\n<p>'do' is more confusing than 'invoke' when you want to use 'ScriptDictionaryItem'</p>\n<p>I think... it'd be like this (and you can't use 'this'):</p>\n<p>do (NAME_OF_OBJECT, \"script_library\", ScriptDictionaryItem (NAME_OF_OBJECT.script_library, n))</p>\n<p>err... actually... maybe you can NOT use 'do' at all with 'ScriptDictionaryitem'....</p>\n<p>I think if you're using 'ScriptDictionaryItem' you got to use 'invoke'...</p>\n<p>sorry, this is confusing for me too... I don't really understand this stuff that well myself.</p>\n<p>err... again.... I think this might work....</p>\n<p>do (NAME_OF_OBJECT, \"script_library\", n)</p>\n<p>I'm trying to understand/learn this along with you, as I try to help you, laughs.</p>\n<hr>\n<p>'invoke' is more simple:</p>\n<p>http://docs.textadventures.co.uk/quest/scripts/invoke.html</p>\n<p>invoke (script)</p>\n<p>you can see that it's Argument/input is literally a Script Value, so that's why the 'ScriptDictionaryItem' Function works, as it returns a Script Value</p>\n<p>so, 'invoke (ScriptDictionaryItem (this.script_library, n))', works / works fine / no errors</p>\n<p>also, another example of using a built-in Script Attribute (though you got to change the 'description' to being a Script Attribute from its default of a String Attribute when using the GUI/Editor, and of course give it contents/scripts):</p>\n<p>invoke (room.description)</p>\n<p>and this is I think again for if you have a Script that can take Arguments/Parameters/Inputs (which would mean you'd have to create a Delegate for it, if I'm understanding this stuff correctly, lol):</p>\n<p>invoke (script, dictionary parameters)</p>\n<hr>\n<p>but, 'do' requires a different and confusing-to-get-it-right syntax (and more arguments/parameters/inputs)</p>\n<p>actually... now I think I'm understanding it:</p>\n<p>you can NOT use 'do' and 'ScriptDictionaryitem', as none of the required inputs/parameters/arguments of 'do' is that of a Script Value, and the 'ScriptDictionaryItem' Function returns a Script Value, hence the error / incompatibility of them used together.</p>\n<hr>\n<p>so...</p>\n<p>// for what you're doing:<br>\n// n = SOME_STRING<br>\n// that 'SOME_STRING' must be a key/string of/for/within one of your Script Dictionary Attribute's items' keys, hopefully obviously<br>\n// and since you're using the 'GetRandomInt', you need your script dictionary's items' keys' strings to be contigious numbers (easiest is using: 1...N)</p>\n<p>I think these are the same thing, and hopefully will both work:</p>\n<p>invoke (ScriptDictionaryItem (NAME_OF_OBJECT.NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE, n)</p>\n<p>or</p>\n<p>do (NAME_OF_OBJECT, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)</p>\n\n",
      "PostDate": "2017-01-07T08:05:16.877371Z",
      "LastEditDate": "2017-01-07T08:44:33.0501135Z"
    },
    {
      "PostId": "b2e8d7f2-1cb2-419c-9d60-3313dcc90adb",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "by using 'do', you can work with varying (\"dynamic\") Objects (though I don't know fully your design), so here's an example:\r\n\r\nobject_variable = ObjectListItem (game.my_objectlist, GetRandomInt (0, ListCount (game.my_objectlist) - 1))\r\ndo (object_variable, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)\r\n// if the above 'do' code line doesn't work, then try this (I always get confused on whether and/or when you need the '.name' or not, lol):\r\n// do (object_variable.name, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)\r\n\r\nthis would require that each of your Objects have the same named Script Dictionary Attribute, and as can be seen, you'll have to create an Object List Attribute, so you can randomly select one of your Objects and thus do its Script Dictionary\r\n\r\nbut this is my example design, as I don't know what yours is fully.\r\n\r\n----------\r\n\r\nI think Jay (Jaynabonne) has some really clever/ingenious ways to do what you want possibly involving using a Script Dictionary with/within a Script Dictionary... I still need to go back and try to understand it myself... (I don't even know if I favorited the page/post... argh, or if I did... were that favorited link is... lol)\r\n\r\nso, you might want to try to get his help on this stuff... (and he's, and Pixie and everyone lol is, much more clear and better at explaining stuff and knowledgeable)",
      "EditableFormat": "markdown",
      "HTML": "<p>by using 'do', you can work with varying (\"dynamic\") Objects (though I don't know fully your design), so here's an example:</p>\n<p>object_variable = ObjectListItem (game.my_objectlist, GetRandomInt (0, ListCount (game.my_objectlist) - 1))<br>\ndo (object_variable, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)<br>\n// if the above 'do' code line doesn't work, then try this (I always get confused on whether and/or when you need the '.name' or not, lol):<br>\n// do (object_variable.name, \"NAME_OF_SCRIPT_DICTIONARY_ATTRIBUTE\", n)</p>\n<p>this would require that each of your Objects have the same named Script Dictionary Attribute, and as can be seen, you'll have to create an Object List Attribute, so you can randomly select one of your Objects and thus do its Script Dictionary</p>\n<p>but this is my example design, as I don't know what yours is fully.</p>\n<hr>\n<p>I think Jay (Jaynabonne) has some really clever/ingenious ways to do what you want possibly involving using a Script Dictionary with/within a Script Dictionary... I still need to go back and try to understand it myself... (I don't even know if I favorited the page/post... argh, or if I did... were that favorited link is... lol)</p>\n<p>so, you might want to try to get his help on this stuff... (and he's, and Pixie and everyone lol is, much more clear and better at explaining stuff and knowledgeable)</p>\n\n",
      "PostDate": "2017-01-07T08:55:57.0918877Z",
      "LastEditDate": "2017-01-07T09:03:10.7029501Z"
    },
    {
      "PostId": "9a3aa1f5-a7cb-4aa9-85c3-5aa1bae130b2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just to recap or explain/clarify further with Arguments/Parameters:\r\n\r\n```\r\nfunction_call_:_name_of_function (argument_position_1_:_input_1, argument_2_position_2_:_input_2, etc etc etc less or more arguments --- must match up with parameters)\r\n\r\nparameter_variable_1_position_1 = argument_1_position_1_:_input_1\r\nparameter_variable_2_position_2 = argument_2_position_2_:_input_2\r\netc etc etc parameter = etc etc etc argument\r\n\r\n<function name=\"blah\" parameters=\"parameter_variable_1_position_1;parameter_variable_2_position_2, etc etc etc less or more parameter --- must match up with arguments\">\r\n   // scripting which uses your parameters' variables\r\n</function>\r\n\r\nwe can even transfer our inputs to more functions (basically Arguments/Parameters are ways of transfering inputs into functions, including from one function to another):\r\n\r\n// 'P' for parameter\r\n// 'F' for function\r\n// 'AI' for argument/input\r\n\r\n<function name=\"F1\" parameters=\"P1_F1, P2_F1\">\r\n  msg (\"F1: \" + P1_F1 + \" \" + P2_F1)\r\n  F2 (P1_F1, P2_F1)\r\n</function>\r\n\r\n<function name=\"F2\" parameters=\"P1_F2, P2_F2\">\r\n  msg (\"F2: \" + P1_F2 + \" \" + P2_F2)\r\n  F3 (P1_F2, P2_F2)\r\n</function>\r\n\r\n<function name=\"F3\" parameters=\"P1_F3, P2_F3\">\r\n  msg (\"F3: \" + P1_F3 + \" \" + P2_F3) \r\n</function>\r\n\r\nAI_1 = \"mama\"\r\nAI_2 = \"mia\"\r\nF1 (AI_1, AI_2)\r\n\r\n// output:\r\n\r\nF1: mama mia\r\nF2: mama mia\r\nF3: mama mia\r\n\r\nso, we can change the names of the parameters' variables' names between function, it doesn't matter, as it's the positions that are used to match them up.\r\n\r\nor, we can leave the names of the parameters' variables' names between functions the same too (whichever is best for you or the design/situation, or preferred by you):\r\n\r\n<function name=\"F1\" parameters=\"P1, P2\">\r\n  msg (\"F1: \" + P1 + \" \" + P2)\r\n  F2 (P1, P2)\r\n</function>\r\n\r\n<function name=\"F2\" parameters=\"P1, P2\">\r\n  msg (\"F2: \" + P1 + \" \" + P2)\r\n  F3 (P1, P2)\r\n</function>\r\n\r\n<function name=\"F3\" parameters=\"P1, P2\">\r\n  msg (\"F3: \" + P1 + \" \" + P2) \r\n</function>\r\n\r\nAI_1 = \"mama\"\r\nAI_2 = \"mia\"\r\nF1 (AI_1, AI_2)\r\n\r\n// output:\r\n\r\nF1: mama mia\r\nF2: mama mia\r\nF3: mama mia\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>just to recap or explain/clarify further with Arguments/Parameters:</p>\n<pre><code>function_call_:_name_of_function (argument_position_1_:_input_1, argument_2_position_2_:_input_2, etc etc etc less or more arguments --- must match up with parameters)\n\nparameter_variable_1_position_1 = argument_1_position_1_:_input_1\nparameter_variable_2_position_2 = argument_2_position_2_:_input_2\netc etc etc parameter = etc etc etc argument\n\n&lt;function name=\"blah\" parameters=\"parameter_variable_1_position_1;parameter_variable_2_position_2, etc etc etc less or more parameter --- must match up with arguments\"&gt;\n   // scripting which uses your parameters' variables\n&lt;/function&gt;\n\nwe can even transfer our inputs to more functions (basically Arguments/Parameters are ways of transfering inputs into functions, including from one function to another):\n\n// 'P' for parameter\n// 'F' for function\n// 'AI' for argument/input\n\n&lt;function name=\"F1\" parameters=\"P1_F1, P2_F1\"&gt;\n  msg (\"F1: \" + P1_F1 + \" \" + P2_F1)\n  F2 (P1_F1, P2_F1)\n&lt;/function&gt;\n\n&lt;function name=\"F2\" parameters=\"P1_F2, P2_F2\"&gt;\n  msg (\"F2: \" + P1_F2 + \" \" + P2_F2)\n  F3 (P1_F2, P2_F2)\n&lt;/function&gt;\n\n&lt;function name=\"F3\" parameters=\"P1_F3, P2_F3\"&gt;\n  msg (\"F3: \" + P1_F3 + \" \" + P2_F3) \n&lt;/function&gt;\n\nAI_1 = \"mama\"\nAI_2 = \"mia\"\nF1 (AI_1, AI_2)\n\n// output:\n\nF1: mama mia\nF2: mama mia\nF3: mama mia\n\nso, we can change the names of the parameters' variables' names between function, it doesn't matter, as it's the positions that are used to match them up.\n\nor, we can leave the names of the parameters' variables' names between functions the same too (whichever is best for you or the design/situation, or preferred by you):\n\n&lt;function name=\"F1\" parameters=\"P1, P2\"&gt;\n  msg (\"F1: \" + P1 + \" \" + P2)\n  F2 (P1, P2)\n&lt;/function&gt;\n\n&lt;function name=\"F2\" parameters=\"P1, P2\"&gt;\n  msg (\"F2: \" + P1 + \" \" + P2)\n  F3 (P1, P2)\n&lt;/function&gt;\n\n&lt;function name=\"F3\" parameters=\"P1, P2\"&gt;\n  msg (\"F3: \" + P1 + \" \" + P2) \n&lt;/function&gt;\n\nAI_1 = \"mama\"\nAI_2 = \"mia\"\nF1 (AI_1, AI_2)\n\n// output:\n\nF1: mama mia\nF2: mama mia\nF3: mama mia\n</code></pre>\n\n",
      "PostDate": "2017-01-07T09:25:24.4786973Z",
      "LastEditDate": "2017-01-07T09:34:56.4474351Z"
    },
    {
      "PostId": "e6587a0f-5ab2-4086-ba9d-9ded46aa45c7",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Getting the number of items is easy, use `DictionaryCount`. However, if you count from zero, you need to go up to the count minus 1.\r\n\r\nIf I was doing this, I would create a new type, and add the scripts to that, rather than to a script dictionary. Make your objects of that type, and they will get all those scripts, and if you use `do` to invoke the scripts, you can use `this` inside them. The names of the scripts can then be stored in a string list, and randomly selected from there.\r\n\r\nIf you are dead set on using a script dictionary, use script0, script1, etc. as the keys. When you want to run a script, first assign it to an object.\r\n```\r\nn = ToString (GetRandomInt(0, DictionaryCount(game.scripts) - 1)\r\nmyobject.scripttorun = ScriptDictionaryItem(game.scripts, \"\" + n)\r\ndo(myobject, \"scripttorun\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Getting the number of items is easy, use <code>DictionaryCount</code>. However, if you count from zero, you need to go up to the count minus 1.</p>\n<p>If I was doing this, I would create a new type, and add the scripts to that, rather than to a script dictionary. Make your objects of that type, and they will get all those scripts, and if you use <code>do</code> to invoke the scripts, you can use <code>this</code> inside them. The names of the scripts can then be stored in a string list, and randomly selected from there.</p>\n<p>If you are dead set on using a script dictionary, use script0, script1, etc. as the keys. When you want to run a script, first assign it to an object.</p>\n<pre><code>n = ToString (GetRandomInt(0, DictionaryCount(game.scripts) - 1)\nmyobject.scripttorun = ScriptDictionaryItem(game.scripts, \"\" + n)\ndo(myobject, \"scripttorun\")\n</code></pre>\n\n",
      "PostDate": "2017-01-07T09:35:25.329132Z",
      "LastEditDate": null
    },
    {
      "PostId": "bb0cc4ad-c28b-4b0b-9215-ed777ef3b38d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ pixie:\r\n\r\ndo you know if the Script Dictionary can be given/take Parameters (be able to work dynamically) ???\r\n\r\nor, is there another/more (as you just gave one ingenious method design in your post, awesome!) alternative/cleaver methods/designs of being able to work dynamically (needing various Parameters/inputs) with a Script Dictionary ???\r\n\r\nor, is there jsut no way with the Script dictionary to work dynamically with it?\r\n\r\n----\r\n\r\nP.S.\r\n\r\nI think maybe somehow you can with having a Script dictionary be nested in a Script Dictionary or something like that (a script dictionary having script dictionary items or whatever meh), Jay was trying to show/explain it to me, but at the time it was over my head and probably still is over my head meh... if I could fine the post/thread... again...",
      "EditableFormat": "markdown",
      "HTML": "<p>@ pixie:</p>\n<p>do you know if the Script Dictionary can be given/take Parameters (be able to work dynamically) ???</p>\n<p>or, is there another/more (as you just gave one ingenious method design in your post, awesome!) alternative/cleaver methods/designs of being able to work dynamically (needing various Parameters/inputs) with a Script Dictionary ???</p>\n<p>or, is there jsut no way with the Script dictionary to work dynamically with it?</p>\n<hr>\n<p>P.S.</p>\n<p>I think maybe somehow you can with having a Script dictionary be nested in a Script Dictionary or something like that (a script dictionary having script dictionary items or whatever meh), Jay was trying to show/explain it to me, but at the time it was over my head and probably still is over my head meh... if I could fine the post/thread... again...</p>\n\n",
      "PostDate": "2017-01-07T09:40:20.8368846Z",
      "LastEditDate": "2017-01-07T09:45:38.8207843Z"
    },
    {
      "PostId": "9be898d2-fdab-4d57-9dfc-c02506379c00",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have never used a script dictionary, but I see no reason why a script in one would not take parametetrs when used with `invoke`. I cannot imagine why Quest would care.",
      "EditableFormat": "markdown",
      "HTML": "<p>I have never used a script dictionary, but I see no reason why a script in one would not take parametetrs when used with <code>invoke</code>. I cannot imagine why Quest would care.</p>\n\n",
      "PostDate": "2017-01-07T09:48:47.5249332Z",
      "LastEditDate": null
    },
    {
      "PostId": "3fb8340a-d527-4a90-8590-7bfe211e6c96",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Both \"do\" and \"invoke\" have variants that take a dictionary of parameters. \"this\" is just a default parameter added in by \"do\". So to use \"invoke\" and have it look like a \"do\", create a parameter dictionary and add a \"this\" parameter. Or call it \"object\" or \"target\" or whatever you want. :) If you're not using \"do\", then you're not limited to just calling it \"this\".\r\n\r\n```\r\n      parameters = NewDictionary()\r\n      dictionary add (parameters, \"this\", some_object_i_care_about)\r\n      dictionary add(parameters, \"param1\", some_param_i_want_to_pass_in)\r\n      invoke (ScriptDictionaryItem(script_dictionary, which), parameters)\r\n```\r\nWhatever parameters you add will be available in the script by those names.",
      "EditableFormat": "markdown",
      "HTML": "<p>Both \"do\" and \"invoke\" have variants that take a dictionary of parameters. \"this\" is just a default parameter added in by \"do\". So to use \"invoke\" and have it look like a \"do\", create a parameter dictionary and add a \"this\" parameter. Or call it \"object\" or \"target\" or whatever you want. :) If you're not using \"do\", then you're not limited to just calling it \"this\".</p>\n<pre><code>      parameters = NewDictionary()\n      dictionary add (parameters, \"this\", some_object_i_care_about)\n      dictionary add(parameters, \"param1\", some_param_i_want_to_pass_in)\n      invoke (ScriptDictionaryItem(script_dictionary, which), parameters)\n</code></pre>\n<p>Whatever parameters you add will be available in the script by those names.</p>\n\n",
      "PostDate": "2017-01-07T15:02:42.4761863Z",
      "LastEditDate": "2017-01-07T15:04:52.6515757Z"
    },
    {
      "PostId": "6242c106-6b76-4827-aff2-ac4adf640f10",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Alternatively you can transfer the dictionary script onto the object in question by creating a script attribute to act as the local storage, then run it from the object itself so all local references work correctly\r\nie:\r\n<code>\r\n//in the object\r\nthis.script = ScriptDictionaryItem (storage.dictionary, \"script1\")\r\ndo (this, \"script\")\r\n</code>",
      "EditableFormat": "markdown",
      "HTML": "<p>Alternatively you can transfer the dictionary script onto the object in question by creating a script attribute to act as the local storage, then run it from the object itself so all local references work correctly<br>\nie:<br>\n<code><br>\n//in the object<br>\nthis.script = ScriptDictionaryItem (storage.dictionary, \"script1\")<br>\ndo (this, \"script\")<br>\n</code></p>\n\n",
      "PostDate": "2017-01-07T20:47:06.978968Z",
      "LastEditDate": null
    },
    {
      "PostId": "8acebe0d-6f86-418a-8751-c9443a0d56d5",
      "UserId": 283832,
      "Username": "scrimshaw04",
      "AvatarUrl": "https://secure.gravatar.com/avatar/8d126990ac9c6b79315d4db221bf6ef7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for your help everyone! Clearly I have a lot more to learn, but the system I have seems to be working perfectly now.\r\n\r\nI have one last syntax-related question. The keys I've been using for my dictionary are \"1, 2, 3, etc...\". This is fine so far because I'm still in the early stages, and none of the dictionaries have a large number of scripts yet. However using a script similar to this...\r\n\r\n```\r\nn = ToString (GetRandomInt(0, DictionaryCount(game.scripts) - 1)\r\nmyobject.scripttorun = ScriptDictionaryItem(game.scripts, \"\" + n)\r\ndo(myobject, \"scripttorun\")\r\n```\r\n\r\nWhat would happen if the number of items in my dictionary was to exceed 10? Because the keys are actually strings, I'm not sure how quest interprets them. 0-9 should be fine because they're single digits, but 10 might break it because it contains more than one character. Is there a better naming convention I could use for my keys?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for your help everyone! Clearly I have a lot more to learn, but the system I have seems to be working perfectly now.</p>\n<p>I have one last syntax-related question. The keys I've been using for my dictionary are \"1, 2, 3, etc...\". This is fine so far because I'm still in the early stages, and none of the dictionaries have a large number of scripts yet. However using a script similar to this...</p>\n<pre><code>n = ToString (GetRandomInt(0, DictionaryCount(game.scripts) - 1)\nmyobject.scripttorun = ScriptDictionaryItem(game.scripts, \"\" + n)\ndo(myobject, \"scripttorun\")\n</code></pre>\n<p>What would happen if the number of items in my dictionary was to exceed 10? Because the keys are actually strings, I'm not sure how quest interprets them. 0-9 should be fine because they're single digits, but 10 might break it because it contains more than one character. Is there a better naming convention I could use for my keys?</p>\n\n",
      "PostDate": "2017-01-14T11:46:54.6498327Z",
      "LastEditDate": "2017-01-14T11:47:36.4165766Z"
    },
    {
      "PostId": "dea79f60-60b3-4f5e-ad06-a967313cc949",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not entirely sure where you're seeing the potential problem with double digits in your script, the way you have it setup should be fine as long as the keys within the dictionary contain all the correct integers, ie: not accidentally skipping a number or such.\r\n\r\nAlso due to the fact that 'n' is a string variable you shouldn't need the \"\" + n' and should be able to just use 'n' in the key section of your ScriptDictionaryItem.\r\n\r\nActually when looking that over you could actually store 'n' as an integer and keep the dictionary call the same since you can do 'string =  \"\" + 'integer' to add a non-string value into a string.\r\n\r\nSo in other words whichever way is easier to keep track of for you, right now you doubled up on converting your dictionary count into a string, which won't actually hurt but isn't necessary.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not entirely sure where you're seeing the potential problem with double digits in your script, the way you have it setup should be fine as long as the keys within the dictionary contain all the correct integers, ie: not accidentally skipping a number or such.</p>\n<p>Also due to the fact that 'n' is a string variable you shouldn't need the \"\" + n' and should be able to just use 'n' in the key section of your ScriptDictionaryItem.</p>\n<p>Actually when looking that over you could actually store 'n' as an integer and keep the dictionary call the same since you can do 'string =  \"\" + 'integer' to add a non-string value into a string.</p>\n<p>So in other words whichever way is easier to keep track of for you, right now you doubled up on converting your dictionary count into a string, which won't actually hurt but isn't necessary.</p>\n\n",
      "PostDate": "2017-01-14T12:39:28.0998449Z",
      "LastEditDate": "2017-01-14T12:40:24.165581Z"
    },
    {
      "PostId": "392316d5-c667-4791-8a8e-f8f598102264",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "With programming/coding, the Attribute/Value/Data Types are very important (mis-matching these usually causes an error: 4 + \"4\" = ERROR!, \"4\" + 4 = ERROR!, \"4\" + \"4\" = \"44\", 4 + 4 = 8). This means that you could be using the converting Functions a lot in your scriptings.\r\n\r\n------------\r\n\r\nA String (aka-also: text) is just a collection of characters/symbols/letters/numbers (but some symbols might not be allowed):\r\n\r\n(the names of anything can NOT start with a number and probably most symbols too, so to be safe, start with a letter)\r\n\r\n(also note that quest's strings ARE case sensitive: \"a\" is NOT equal to \"A\", and vice versa: \"A\" is NOT equal to \"a\" --- http://www.asciitable.com/ )\r\n\r\n(there's many string manipulation functions, such as converting a string to all upper case letters, and many more: http://docs.textadventures.co.uk/quest/functions/ -- scroll down to the very bottom to the 'string functions' )\r\n\r\n(having double quotes encasing something tells quest that what is within the double quotes, is to be seen/recognized/identified as a string value by quest)\r\n\r\n(though the GUI/Editor sometimes handle this for you, so you don't need the double quotes: [MESSAGE] script option for example, but if you do anything directly in code or use the GUI/Editor's [EXPRESSION] script option, then you need to put in the double quotes yourself for your strings)\r\n\r\n\"0\"\r\n\"1\"\r\n\"9\"\r\n\"10\"\r\n\"312897312731286984\"\r\n\"a\"\r\n\"abc\"\r\n\"abc_abc_abc_zzz_zzz_zzz_9877654231_32686326\"\r\n\r\n\"hi, how are you? my name is hk, what is your name? ah, bob, well, nice to meet you bob. do you play any sports? yes? what sports? ah basketball, that's cool. I like soccer. blah blah blah blah blah\"\r\n\r\n------------------\r\n\r\n```\r\nif you want double quotes to be displayed, you need to use the 'escape' character, the '\\' --- backslash character, remember that two forwardslash characters is for comments: // your_comments, and also for block comments you do this: /* your_comments */, and then the double quote (no space between them --- the escape character is on the left side of the symbol: double quote --- there might be a few more symbols or whatever to use with the escape character, but I've just used the double quote for it): \\\"\r\n\r\nfor example:\r\n\r\nstring_variable = \"HK says, \\\"hi\\\", to you.\"\r\nmsg (string_variable)\r\n// output:\r\nHK says, \"hi\", to you.\r\n```\r\n\r\n-------------------\r\n\r\nQuest can convert any string (that is just numbers) into an integer or double (that is a valid syntax/form/written decimal number):\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/toint.html\r\nhttp://docs.textadventures.co.uk/quest/functions/todouble.html\r\n\r\nstring_variable = \"123456789\"\r\ninteger_variable = ToInt (string_variable)\r\n// integer_variable = 123456789\r\n\r\nstring_variable = \"12345.6789\"\r\ndouble_variable = ToDouble (string_variable)\r\n// double_variable = 12345.6789\r\n\r\nand it can do the reverse (integer/double to string) too:\r\n\r\ninteger_variable = 123456789\r\nstring_variable = ToString (integer_variable)\r\n// string_variable = \"123456789\"\r\n\r\ndouble_variable = 12345.6789\r\nstring_variable = ToString (double_variable)\r\n// string_variable = \"12345.6789\"\r\n\r\n---------\r\n\r\nyou can also check first if the string is 'numeric' (it is either an integer:true or double:true or neither:false):\r\n\r\nstring_variable = \"123\"\r\nboolean_variable = IsNumeric (string_variable)\r\n// boolean_variable = true\r\n\r\nstring_variable = \"12.3\"\r\nboolean_variable = IsNumeric (string_variable)\r\n// boolean_variable = true\r\n\r\nstring_variable = \"abc\"\r\nboolean_variable = IsNumeric (string_variable)\r\n// boolean_variable = false\r\n\r\nand you can check if a string is an integer: IsInt\r\n\r\nand you can check if a string is a double: IsDouble\r\n\r\n--------\r\n\r\nalso you can check if the Object has an Attribute:\r\n\r\n(they return true/false like the 'IsXXX' Functions)\r\n\r\nHasAttribute\r\nHasString\r\nHasInt\r\nHasDouble\r\nHasBoolean\r\nHasObject\r\nHasScript\r\n\r\nlastly, you can check the Object both has an Attribute and the Value of it:\r\n\r\n(returns the Object's Attribute's Value or 'null' if it fails: the Object doesn't have that Attribute or if using it with 'if' string matching/comparison, the Object's Attribute's Value doesn't match with your specified Value) \r\n\r\nGetAttribute\r\nGetString\r\nGetInt\r\nGetDouble\r\nGetObject\r\nGetScript\r\nGetBoolean",
      "EditableFormat": "markdown",
      "HTML": "<p>With programming/coding, the Attribute/Value/Data Types are very important (mis-matching these usually causes an error: 4 + \"4\" = ERROR!, \"4\" + 4 = ERROR!, \"4\" + \"4\" = \"44\", 4 + 4 = 8). This means that you could be using the converting Functions a lot in your scriptings.</p>\n<hr>\n<p>A String (aka-also: text) is just a collection of characters/symbols/letters/numbers (but some symbols might not be allowed):</p>\n<p>(the names of anything can NOT start with a number and probably most symbols too, so to be safe, start with a letter)</p>\n<p>(also note that quest's strings ARE case sensitive: \"a\" is NOT equal to \"A\", and vice versa: \"A\" is NOT equal to \"a\" --- http://www.asciitable.com/ )</p>\n<p>(there's many string manipulation functions, such as converting a string to all upper case letters, and many more: http://docs.textadventures.co.uk/quest/functions/ -- scroll down to the very bottom to the 'string functions' )</p>\n<p>(having double quotes encasing something tells quest that what is within the double quotes, is to be seen/recognized/identified as a string value by quest)</p>\n<p>(though the GUI/Editor sometimes handle this for you, so you don't need the double quotes: [MESSAGE] script option for example, but if you do anything directly in code or use the GUI/Editor's [EXPRESSION] script option, then you need to put in the double quotes yourself for your strings)</p>\n<p>\"0\"<br>\n\"1\"<br>\n\"9\"<br>\n\"10\"<br>\n\"312897312731286984\"<br>\n\"a\"<br>\n\"abc\"<br>\n\"abc_abc_abc_zzz_zzz_zzz_9877654231_32686326\"</p>\n<p>\"hi, how are you? my name is hk, what is your name? ah, bob, well, nice to meet you bob. do you play any sports? yes? what sports? ah basketball, that's cool. I like soccer. blah blah blah blah blah\"</p>\n<hr>\n<pre><code>if you want double quotes to be displayed, you need to use the 'escape' character, the '\\' --- backslash character, remember that two forwardslash characters is for comments: // your_comments, and also for block comments you do this: /* your_comments */, and then the double quote (no space between them --- the escape character is on the left side of the symbol: double quote --- there might be a few more symbols or whatever to use with the escape character, but I've just used the double quote for it): \\\"\n\nfor example:\n\nstring_variable = \"HK says, \\\"hi\\\", to you.\"\nmsg (string_variable)\n// output:\nHK says, \"hi\", to you.\n</code></pre>\n<hr>\n<p>Quest can convert any string (that is just numbers) into an integer or double (that is a valid syntax/form/written decimal number):</p>\n<p>http://docs.textadventures.co.uk/quest/functions/toint.html<br>\nhttp://docs.textadventures.co.uk/quest/functions/todouble.html</p>\n<p>string_variable = \"123456789\"<br>\ninteger_variable = ToInt (string_variable)<br>\n// integer_variable = 123456789</p>\n<p>string_variable = \"12345.6789\"<br>\ndouble_variable = ToDouble (string_variable)<br>\n// double_variable = 12345.6789</p>\n<p>and it can do the reverse (integer/double to string) too:</p>\n<p>integer_variable = 123456789<br>\nstring_variable = ToString (integer_variable)<br>\n// string_variable = \"123456789\"</p>\n<p>double_variable = 12345.6789<br>\nstring_variable = ToString (double_variable)<br>\n// string_variable = \"12345.6789\"</p>\n<hr>\n<p>you can also check first if the string is 'numeric' (it is either an integer:true or double:true or neither:false):</p>\n<p>string_variable = \"123\"<br>\nboolean_variable = IsNumeric (string_variable)<br>\n// boolean_variable = true</p>\n<p>string_variable = \"12.3\"<br>\nboolean_variable = IsNumeric (string_variable)<br>\n// boolean_variable = true</p>\n<p>string_variable = \"abc\"<br>\nboolean_variable = IsNumeric (string_variable)<br>\n// boolean_variable = false</p>\n<p>and you can check if a string is an integer: IsInt</p>\n<p>and you can check if a string is a double: IsDouble</p>\n<hr>\n<p>also you can check if the Object has an Attribute:</p>\n<p>(they return true/false like the 'IsXXX' Functions)</p>\n<p>HasAttribute<br>\nHasString<br>\nHasInt<br>\nHasDouble<br>\nHasBoolean<br>\nHasObject<br>\nHasScript</p>\n<p>lastly, you can check the Object both has an Attribute and the Value of it:</p>\n<p>(returns the Object's Attribute's Value or 'null' if it fails: the Object doesn't have that Attribute or if using it with 'if' string matching/comparison, the Object's Attribute's Value doesn't match with your specified Value)</p>\n<p>GetAttribute<br>\nGetString<br>\nGetInt<br>\nGetDouble<br>\nGetObject<br>\nGetScript<br>\nGetBoolean</p>\n\n",
      "PostDate": "2017-01-14T15:32:40.7013427Z",
      "LastEditDate": "2017-01-14T16:07:39.2353838Z"
    }
  ]
}
