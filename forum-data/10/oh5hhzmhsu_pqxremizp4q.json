{
  "Topic": {
    "TopicId": "oh5hhzmhsu_pqxremizp4q",
    "ForumId": "10",
    "Title": "Having an object function like scenery inside your inventory",
    "LastUpdated": "2018-01-21T07:38:15.3478248Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "cbf39a97-536e-4959-bbb3-1e0f022a53c3",
      "UserId": 329383,
      "Username": "J_J",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d6dcf2651a8e3cfe546c1fe096981552?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you had a book, but a scenery item called book's cover, which let's you look specifically at the cover... Is there a way to have both in your inventory but have the cover not visible. For instance if the book was functionally a shelf, so that it's cover goes where ever it goes, but without showing up as a separate item in your inventory?",
      "EditableFormat": "markdown",
      "HTML": "<p>If you had a book, but a scenery item called book's cover, which let's you look specifically at the cover... Is there a way to have both in your inventory but have the cover not visible. For instance if the book was functionally a shelf, so that it's cover goes where ever it goes, but without showing up as a separate item in your inventory?</p>\n\n",
      "PostDate": "2018-01-21T07:38:15.3478248Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "507bb9cf-1a83-4e48-b4ee-eb3a2c165a59",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "let me know if the 'scenery' and/or 'visible' doesn't work within the inventory (inventory === the 'player' Player Object)\r\n\r\n```\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"book\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"contained_closed\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  <attr name=\"changedparent\" type=\"script\">\r\n    cover.parent = book.parent\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"cover\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"scenery\" type=\"boolean\">true</attr>\r\n\r\n  <!--\r\n  or instead of the 'scenery' Boolean Attribute:\r\n  <attr name=\"visible\" type=\"boolean\">false</attr>  \r\n  -->\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>let me know if the 'scenery' and/or 'visible' doesn't work within the inventory (inventory === the 'player' Player Object)</p>\n<pre><code>&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"book\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"contained_closed\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n    cover.parent = book.parent\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"cover\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"scenery\" type=\"boolean\"&gt;true&lt;/attr&gt;\n\n  &lt;!--\n  or instead of the 'scenery' Boolean Attribute:\n  &lt;attr name=\"visible\" type=\"boolean\"&gt;false&lt;/attr&gt;  \n  --&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-21T14:11:08.4019271Z",
      "LastEditDate": "2018-01-21T14:12:53.54064Z",
      "link": null
    },
    {
      "PostId": "e385b79a-1318-448c-8c9e-73ab9c4be6ed",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've never been able to make something in the inventory (or even something in something that's in the inventory) 'invisible'.\r\n\r\n(When you make something invisible in Quest, you are essentially removing it from play.  I know what you mean by invisible in this post, though.  Just for the record.)\r\n\r\n\r\nOne way to handle it is to create a turn script which makes sure the cover is always in the same room as the book.  (Also, if the book is in inventory, the script puts the cover in the location of the player.  This way, it is always there if the book is there, but never in the inventory.)\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6595.20017_KVMod-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"A Book with a Cover\">\r\n    <gameid>3176e0e2-bccf-41a6-9e59-f2dc233f6c07</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <scopebackdrop type=\"script\">\r\n    </scopebackdrop>\r\n    <author>KV</author>\r\n    <subtitle>(An Example Game)</subtitle>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"book\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"openable\" />\r\n      <take />\r\n      <feature_container />\r\n      <read>{either book.isopen:You read a few pages, but the book sucks, so you stop.|It isn't open.}</read>\r\n      <look><![CDATA[It's <b>The Importance of Being K.V.</b>.]]></look>\r\n      <inventoryverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Drop</value>\r\n        <value>Open</value>\r\n        <value>Close</value>\r\n      </inventoryverbs>\r\n    </object>\r\n    <object name=\"cover\">\r\n      <inherit name=\"editor_object\" />\r\n      <scenery />\r\n      <look>{either not book.isopen:It's made of leather.|The inside of the cover has no markings whatsoever.}</look>\r\n      <alt type=\"stringlist\">\r\n        <value>book cover</value>\r\n      </alt>\r\n    </object>\r\n    <exit alias=\"north\" to=\"another room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"another room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <turnscript name=\"cover_turnscript\">\r\n    <enabled />\r\n    <script>\r\n      if (book.parent = game.pov) {\r\n        cover.parent = book.parent.parent\r\n      }\r\n      else {\r\n        cover.parent = book.parent\r\n      }\r\n    </script>\r\n  </turnscript>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>I've never been able to make something in the inventory (or even something in something that's in the inventory) 'invisible'.</p>\n<p>(When you make something invisible in Quest, you are essentially removing it from play.  I know what you mean by invisible in this post, though.  Just for the record.)</p>\n<p>One way to handle it is to create a turn script which makes sure the cover is always in the same room as the book.  (Also, if the book is in inventory, the script puts the cover in the location of the player.  This way, it is always there if the book is there, but never in the inventory.)</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6595.20017_KVMod--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"A Book with a Cover\"&gt;\n    &lt;gameid&gt;3176e0e2-bccf-41a6-9e59-f2dc233f6c07&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;scopebackdrop type=\"script\"&gt;\n    &lt;/scopebackdrop&gt;\n    &lt;author&gt;KV&lt;/author&gt;\n    &lt;subtitle&gt;(An Example Game)&lt;/subtitle&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"book\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"openable\" /&gt;\n      &lt;take /&gt;\n      &lt;feature_container /&gt;\n      &lt;read&gt;{either book.isopen:You read a few pages, but the book sucks, so you stop.|It isn't open.}&lt;/read&gt;\n      &lt;look&gt;&lt;![CDATA[It's &lt;b&gt;The Importance of Being K.V.&lt;/b&gt;.]]&gt;&lt;/look&gt;\n      &lt;inventoryverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Drop&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n        &lt;value&gt;Close&lt;/value&gt;\n      &lt;/inventoryverbs&gt;\n    &lt;/object&gt;\n    &lt;object name=\"cover\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;{either not book.isopen:It's made of leather.|The inside of the cover has no markings whatsoever.}&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;book cover&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"another room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"another room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"cover_turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      if (book.parent = game.pov) {\n        cover.parent = book.parent.parent\n      }\n      else {\n        cover.parent = book.parent\n      }\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-01-21T17:31:08.2853726Z",
      "LastEditDate": "2018-01-21T17:35:10.4930945Z",
      "link": null
    },
    {
      "PostId": "13b573cf-c715-4583-b1b1-25a12a93f5c1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's a totally different approach.\r\n\r\nThis time, I made the book a closed container, set it to transparent, and put the cover inside of the book.  (The cover is scenery.)\r\n\r\nThen, I modified the ```ScopeInventory()``` function to exclude an object with the attribute ```scenerywhenheld``` set to true.\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6595.21257_KVMod-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"A Book with a Cover\">\r\n    <gameid>3176e0e2-bccf-41a6-9e59-f2dc233f6c07</gameid>\r\n    <version>2.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_advancedscripts />\r\n    <author>KV</author>\r\n    <subtitle>(An Example Game)</subtitle>\r\n    <scopebackdrop type=\"script\">\r\n    </scopebackdrop>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"book\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <take />\r\n      <feature_container />\r\n      <read>{either book.isopen:You read a few pages, but the book sucks, so you stop.|It isn't open.}</read>\r\n      <look><![CDATA[It's <b>The Importance of Being K.V.</b>.]]></look>\r\n      <inventoryverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Drop</value>\r\n        <value>Open</value>\r\n        <value>Close</value>\r\n      </inventoryverbs>\r\n      <transparent />\r\n      <object name=\"cover\">\r\n        <inherit name=\"editor_object\" />\r\n        <scenery />\r\n        <look>{either not book.isopen:It's made of leather.|The inside of the cover has no markings whatsoever.}</look>\r\n        <alt type=\"stringlist\">\r\n          <value>book cover</value>\r\n        </alt>\r\n        <scenerywhenheld />\r\n      </object>\r\n    </object>\r\n    <exit alias=\"north\" to=\"another room\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"another room\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <function name=\"ScopeInventory\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    exclude = FilterByAttribute(GetAllChildObjects(game.pov),\"scenerywhenheld\",true)\r\n    foreach (obj, ListExclude(GetAllChildObjects(game.pov),exclude)) {\r\n      if (ContainsVisible(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's a totally different approach.</p>\n<p>This time, I made the book a closed container, set it to transparent, and put the cover inside of the book.  (The cover is scenery.)</p>\n<p>Then, I modified the <code>ScopeInventory()</code> function to exclude an object with the attribute <code>scenerywhenheld</code> set to true.</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6595.21257_KVMod--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"A Book with a Cover\"&gt;\n    &lt;gameid&gt;3176e0e2-bccf-41a6-9e59-f2dc233f6c07&lt;/gameid&gt;\n    &lt;version&gt;2.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;author&gt;KV&lt;/author&gt;\n    &lt;subtitle&gt;(An Example Game)&lt;/subtitle&gt;\n    &lt;scopebackdrop type=\"script\"&gt;\n    &lt;/scopebackdrop&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"book\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;take /&gt;\n      &lt;feature_container /&gt;\n      &lt;read&gt;{either book.isopen:You read a few pages, but the book sucks, so you stop.|It isn't open.}&lt;/read&gt;\n      &lt;look&gt;&lt;![CDATA[It's &lt;b&gt;The Importance of Being K.V.&lt;/b&gt;.]]&gt;&lt;/look&gt;\n      &lt;inventoryverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Drop&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n        &lt;value&gt;Close&lt;/value&gt;\n      &lt;/inventoryverbs&gt;\n      &lt;transparent /&gt;\n      &lt;object name=\"cover\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;scenery /&gt;\n        &lt;look&gt;{either not book.isopen:It's made of leather.|The inside of the cover has no markings whatsoever.}&lt;/look&gt;\n        &lt;alt type=\"stringlist\"&gt;\n          &lt;value&gt;book cover&lt;/value&gt;\n        &lt;/alt&gt;\n        &lt;scenerywhenheld /&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"another room\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"another room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;function name=\"ScopeInventory\" type=\"objectlist\"&gt;\n    result = NewObjectList()\n    exclude = FilterByAttribute(GetAllChildObjects(game.pov),\"scenerywhenheld\",true)\n    foreach (obj, ListExclude(GetAllChildObjects(game.pov),exclude)) {\n      if (ContainsVisible(game.pov, obj)) {\n        list add (result, obj)\n      }\n    }\n    return (result)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-01-21T19:37:01.4502868Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ce0f5101-db47-4c4f-8951-8a53a35549b3",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, \r\nI'm a beginner at programming, but maby it's a help. \r\nIf you use the standard inventory, I would place a menu at the book's \"look at\" verb. \r\n\r\n> \\>look at book\r\n>\r\n> This is the book's description. \r\n>\r\n> Look at the book's cover? \r\n>\r\n> 1. Yes\r\n> 2. No\r\n\r\n\r\nOr a different menu. Something like:\r\n\r\n> \\>look at book\r\n>\r\n> This is the book's description. \r\n> \r\n>\r\n> 1. Look at the book's cover.\r\n> 2. Read the book\r\n> 3. Look at the Book's back.\r\n\r\nSorry, isn't what you asked for but maby it helps.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi,<br>\nI'm a beginner at programming, but maby it's a help.<br>\nIf you use the standard inventory, I would place a menu at the book's \"look at\" verb.</p>\n<blockquote>\n<p>&gt;look at book</p>\n<p>This is the book's description.</p>\n<p>Look at the book's cover?</p>\n<ol>\n<li>Yes</li>\n<li>No</li>\n</ol>\n</blockquote>\n<p>Or a different menu. Something like:</p>\n<blockquote>\n<p>&gt;look at book</p>\n<p>This is the book's description.</p>\n<ol>\n<li>Look at the book's cover.</li>\n<li>Read the book</li>\n<li>Look at the Book's back.</li>\n</ol>\n</blockquote>\n<p>Sorry, isn't what you asked for but maby it helps.</p>\n\n",
      "PostDate": "2018-01-22T18:41:07.5459221Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b648e35e-4385-42c4-ad9c-217c5dad33b4",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ya, probably better to just not use a second Object for a 'book' Object's cover (easier ways to get/do the same effect, such as Curt already pointed out, just using the 'look' Verb/Script_attribute for the cover's description), but maybe the OP'er has a reason for doing so... meh.\r\n\r\nI'm not that familiar with all of quest's built-in stuff, so didn't know and don't know how to get around the inventory problem with 'hiding/invisibilty/scenery' of displayment of Objects, as seen in my above post.\r\n\r\n---------\r\n\r\nwhen I started playing around with quest for my first time... I wanted a 'bed' Object (that you could sleep on) and also an 'under the bed' Object (for being a container: \"hiding/putting/finding/storing stuff under the bed\")... but I didn't know of other ways (and don't currently, though I think I could maybe come up with how to do so and with probably needing some research into quest's built-in stuff, lol) that this effect could be done back then, hence using two Objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>ya, probably better to just not use a second Object for a 'book' Object's cover (easier ways to get/do the same effect, such as Curt already pointed out, just using the 'look' Verb/Script_attribute for the cover's description), but maybe the OP'er has a reason for doing so... meh.</p>\n<p>I'm not that familiar with all of quest's built-in stuff, so didn't know and don't know how to get around the inventory problem with 'hiding/invisibilty/scenery' of displayment of Objects, as seen in my above post.</p>\n<hr>\n<p>when I started playing around with quest for my first time... I wanted a 'bed' Object (that you could sleep on) and also an 'under the bed' Object (for being a container: \"hiding/putting/finding/storing stuff under the bed\")... but I didn't know of other ways (and don't currently, though I think I could maybe come up with how to do so and with probably needing some research into quest's built-in stuff, lol) that this effect could be done back then, hence using two Objects.</p>\n\n",
      "PostDate": "2018-01-22T19:05:57.0240525Z",
      "LastEditDate": "2018-01-22T19:09:31.2273136Z",
      "link": null
    },
    {
      "PostId": "9e244cd9-0d55-4ac2-b4fe-ec2c714b0bc1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, but you can just look at the book, look at the cover, or read the book [my way](http://textadventures.co.uk/forum/quest/topic/oh5hhzmhsu_pqxremizp4q/having-an-object-function-like-scenery-inside-your-inventory#13b573cf-c715-4583-b1b1-25a12a93f5c1).\r\n\r\n(This is a text adventure and not a gamebook; correct?)\r\n\r\n---\r\n>I'm not that familiar with all of quest's built-in stuff, so didn't know and don't know how to get around the inventory problem with 'hiding/invisibilty/scenery' of displayment of Objects\r\n\r\n>>didn't know and don't know how \r\n\r\nDid you not try this?\r\n\r\nThis totally does it.\r\n\r\nYou simply set a Boolean attribute named \"scenerywhenheld\" on your object to ```true```, and put this for ```ScopeInventory()```:\r\n\r\n\r\n```\r\n  <function name=\"ScopeInventory\" type=\"objectlist\">\r\n    result = NewObjectList()\r\n    exclude = FilterByAttribute(GetAllChildObjects(game.pov),\"scenerywhenheld\",true)\r\n    foreach (obj, ListExclude(GetAllChildObjects(game.pov),exclude)) {\r\n      if (ContainsVisible(game.pov, obj)) {\r\n        list add (result, obj)\r\n      }\r\n    }\r\n    return (result)\r\n  </function>\r\n```\r\n\r\n\r\n---\r\n>a 'bed' Object (that you could sleep on) and also an 'under the bed' Object (for being a container: \"hiding/putting/finding/storing stuff under the bed\")\r\n\r\nHey!\r\n\r\nI just did that in a game!\r\n\r\nI thought adding this take script was a good idea, too:\r\n```\r\nif (StartsWith(LCase(player.currentcommand),\"get\")) {\r\n  msg (\"You can't fit under it.\")\r\n}\r\nelse {\r\n  msg (\"How in the world could you do that?\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, but you can just look at the book, look at the cover, or read the book <a href=\"http://textadventures.co.uk/forum/quest/topic/oh5hhzmhsu_pqxremizp4q/having-an-object-function-like-scenery-inside-your-inventory#13b573cf-c715-4583-b1b1-25a12a93f5c1\">my way</a>.</p>\n<p>(This is a text adventure and not a gamebook; correct?)</p>\n<hr>\n<blockquote>\n<p>I'm not that familiar with all of quest's built-in stuff, so didn't know and don't know how to get around the inventory problem with 'hiding/invisibilty/scenery' of displayment of Objects</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>didn't know and don't know how</p>\n</blockquote>\n</blockquote>\n<p>Did you not try this?</p>\n<p>This totally does it.</p>\n<p>You simply set a Boolean attribute named \"scenerywhenheld\" on your object to <code>true</code>, and put this for <code>ScopeInventory()</code>:</p>\n<pre><code>  &lt;function name=\"ScopeInventory\" type=\"objectlist\"&gt;\n    result = NewObjectList()\n    exclude = FilterByAttribute(GetAllChildObjects(game.pov),\"scenerywhenheld\",true)\n    foreach (obj, ListExclude(GetAllChildObjects(game.pov),exclude)) {\n      if (ContainsVisible(game.pov, obj)) {\n        list add (result, obj)\n      }\n    }\n    return (result)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<blockquote>\n<p>a 'bed' Object (that you could sleep on) and also an 'under the bed' Object (for being a container: \"hiding/putting/finding/storing stuff under the bed\")</p>\n</blockquote>\n<p>Hey!</p>\n<p>I just did that in a game!</p>\n<p>I thought adding this take script was a good idea, too:</p>\n<pre><code>if (StartsWith(LCase(player.currentcommand),\"get\")) {\n  msg (\"You can't fit under it.\")\n}\nelse {\n  msg (\"How in the world could you do that?\")\n}\n</code></pre>\n\n",
      "PostDate": "2018-01-22T19:50:09.4859645Z",
      "LastEditDate": "2018-01-22T19:54:12.7200093Z",
      "link": null
    },
    {
      "PostId": "2eccbc2f-7ade-49a9-b6fb-2da17fef6433",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes,  I gave up on the build in inventory since I found out how hard it is to make item stacks with it. For now my player's inventory need only...\r\n...a backpack (containing loot and more)\r\n...a journal (collecting everything with a wiki-like menu, npcs, story, places, quests, achievements, stats and skills) \r\n...and a weapon. \r\nMy goal is to keep the inventory poorly filled and don't stack my stuff as statusattribute. Still working on it.\r\n\r\nEdit: My first game and room had a bed, too, but I just hid a dagger under the scenery pillow and a storage box under the bed. lol",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes,  I gave up on the build in inventory since I found out how hard it is to make item stacks with it. For now my player's inventory need only...<br>\n...a backpack (containing loot and more)<br>\n...a journal (collecting everything with a wiki-like menu, npcs, story, places, quests, achievements, stats and skills)<br>\n...and a weapon.<br>\nMy goal is to keep the inventory poorly filled and don't stack my stuff as statusattribute. Still working on it.</p>\n<p>Edit: My first game and room had a bed, too, but I just hid a dagger under the scenery pillow and a storage box under the bed. lol</p>\n\n",
      "PostDate": "2018-01-22T20:11:07.4181902Z",
      "LastEditDate": "2018-01-22T20:39:02.9895759Z",
      "link": null
    },
    {
      "PostId": "292e6d68-2a34-4bd3-921a-dd5a01f2d473",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can stack with 'statusattributes', you just need to use String Attributes for them, here's an example (not of stacking, but you can use it to do stacking):\r\n\r\n```\r\n<object name=\"player\">\r\n\r\n  <attr name=\"life\" type=\"string\">999/999</attr>\r\n\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n\r\n  <statusattributes type=\"stringdictionary\">\r\n\r\n    <item>\r\n      <key>life</key>\r\n      <value>Life: !</value>\r\n    </item>\r\n\r\n  </statusattributes>\r\n\r\n</object>\r\n```\r\n\r\n// initial output/displayment in the status pane during game play:\r\n\r\nLife: 999/999\r\n\r\nas current and/or maximum life changes, it'll be updated/displayed correctly, for example if you lose 500 life:\r\n\r\nLife: 499/999\r\n\r\n-------\r\n\r\nyou should be able to apply this for stacking too, but if need help let me know",
      "EditableFormat": "markdown",
      "HTML": "<p>you can stack with 'statusattributes', you just need to use String Attributes for them, here's an example (not of stacking, but you can use it to do stacking):</p>\n<pre><code>&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"life\" type=\"string\"&gt;999/999&lt;/attr&gt;\n\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n\n  &lt;statusattributes type=\"stringdictionary\"&gt;\n\n    &lt;item&gt;\n      &lt;key&gt;life&lt;/key&gt;\n      &lt;value&gt;Life: !&lt;/value&gt;\n    &lt;/item&gt;\n\n  &lt;/statusattributes&gt;\n\n&lt;/object&gt;\n</code></pre>\n<p>// initial output/displayment in the status pane during game play:</p>\n<p>Life: 999/999</p>\n<p>as current and/or maximum life changes, it'll be updated/displayed correctly, for example if you lose 500 life:</p>\n<p>Life: 499/999</p>\n<hr>\n<p>you should be able to apply this for stacking too, but if need help let me know</p>\n\n",
      "PostDate": "2018-01-23T02:28:00.35314Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ec400ea6-aea0-4c05-9d31-53b9ed951b73",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oh... my bad... didn't read your post closely... you do NOT want to have a long 'statusattributes' displayment (aka, many items being displayed)....\r\n\r\nwell, you can always create your own 'storage' system, and 'info menus' system\r\n\r\nwon't get into a storage system here...\r\n\r\nbut for a 'info menu' system, here's some methods:\r\n\r\n```\r\n<object name=\"player\">\r\n</object>\r\n\r\n<object name=\"info_button\">\r\n\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">info</attr>\r\n\r\n  <attr name=\"stats\" type=\"script\">\r\n    // blah scripting (see the 'stats_command' Command's scripting)\r\n  </attr>\r\n\r\n  <attr name=\"gear\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"spells\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"items\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"actions_button\">\r\n\r\n  <attr name=\"parent\" type=\"object\">player</attr>\r\n\r\n  <attr name=\"alias\" type=\"string\">actions</attr>\r\n\r\n  <attr name=\"talk\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"search\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"fight\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"magic\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n  <attr name=\"equip\" type=\"script\">\r\n    // blah scripting\r\n  </attr>\r\n\r\n</object>\r\n\r\n<verb>\r\n  <property>talk</property>\r\n  <pattern>talk</pattern>\r\n  <defaultexpression>You can't talk right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>search</property>\r\n  <pattern>search</pattern>\r\n  <defaultexpression>You can't search that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>fight</property>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't fight that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>magic</property>\r\n  <pattern>magic</pattern>\r\n  <defaultexpression>You can't use magic right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>item</property>\r\n  <pattern>item</pattern>\r\n  <defaultexpression>You can't use items right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>equip</property>\r\n  <pattern>equip</pattern>\r\n  <defaultexpression>You can't equip that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>stats</property>\r\n  <pattern>stats</pattern>\r\n  <defaultexpression>You can't view your stats right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>gear</property>\r\n  <pattern>gear</pattern>\r\n  <defaultexpression>You can't view your gear right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>spells</property>\r\n  <pattern>spells</pattern>\r\n  <defaultexpression>You can't view your spells right now!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>items</property>\r\n  <pattern>items</pattern>\r\n  <defaultexpression>You can't view your items right now!</defaultexpression>\r\n</verb>\r\n\r\n<command name=\"stats_command\">\r\n\r\n  <pattern>stats</pattern>\r\n\r\n  <script>\r\n    ClearScreen\r\n    msg (\"Character Screen\")\r\n    msg (\"\")\r\n    msg (\"Level: \" + player.level)\r\n    msg (\"Experience: \" + player.experience)\r\n    msg (\"Currency: \" + player.currency)\r\n    msg (\"Strength: \" + player.strength)\r\n    // etc character stats\r\n    wait {\r\n      ClearScreen\r\n    }\r\n  </script>\r\n\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oh... my bad... didn't read your post closely... you do NOT want to have a long 'statusattributes' displayment (aka, many items being displayed)....</p>\n<p>well, you can always create your own 'storage' system, and 'info menus' system</p>\n<p>won't get into a storage system here...</p>\n<p>but for a 'info menu' system, here's some methods:</p>\n<pre><code>&lt;object name=\"player\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"info_button\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;info&lt;/attr&gt;\n\n  &lt;attr name=\"stats\" type=\"script\"&gt;\n    // blah scripting (see the 'stats_command' Command's scripting)\n  &lt;/attr&gt;\n\n  &lt;attr name=\"gear\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"spells\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"items\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"actions_button\"&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;player&lt;/attr&gt;\n\n  &lt;attr name=\"alias\" type=\"string\"&gt;actions&lt;/attr&gt;\n\n  &lt;attr name=\"talk\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"search\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"magic\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n  &lt;attr name=\"equip\" type=\"script\"&gt;\n    // blah scripting\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk&lt;/property&gt;\n  &lt;pattern&gt;talk&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't talk right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;search&lt;/property&gt;\n  &lt;pattern&gt;search&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't search that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't fight that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;magic&lt;/property&gt;\n  &lt;pattern&gt;magic&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't use magic right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;item&lt;/property&gt;\n  &lt;pattern&gt;item&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't use items right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;equip&lt;/property&gt;\n  &lt;pattern&gt;equip&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't equip that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;stats&lt;/property&gt;\n  &lt;pattern&gt;stats&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't view your stats right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;gear&lt;/property&gt;\n  &lt;pattern&gt;gear&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't view your gear right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;spells&lt;/property&gt;\n  &lt;pattern&gt;spells&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't view your spells right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;items&lt;/property&gt;\n  &lt;pattern&gt;items&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't view your items right now!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;command name=\"stats_command\"&gt;\n\n  &lt;pattern&gt;stats&lt;/pattern&gt;\n\n  &lt;script&gt;\n    ClearScreen\n    msg (\"Character Screen\")\n    msg (\"\")\n    msg (\"Level: \" + player.level)\n    msg (\"Experience: \" + player.experience)\n    msg (\"Currency: \" + player.currency)\n    msg (\"Strength: \" + player.strength)\n    // etc character stats\n    wait {\n      ClearScreen\n    }\n  &lt;/script&gt;\n\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2018-01-23T02:49:40.1676895Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "414563dd-3cd0-483c-acbf-04ec713663cb",
      "UserId": 329383,
      "Username": "J_J",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d6dcf2651a8e3cfe546c1fe096981552?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I realized I asked this days ago...but I've finally been able to try it out. Thank you for all the suggestions you guys. I ended up just having the object transport room to room. Is working awesome, but it is really helpful to see all the different ideas for this!\r\n\r\nI'm a bit curious about the suggestion of using a menu. I'm not using any menus for my game. Is that the standard now in Parcer fiction? My game is more old school, and give you verb hints in the descriptions when you look at objects. I really like this style of game... but is it going to turn off players?",
      "EditableFormat": "markdown",
      "HTML": "<p>I realized I asked this days ago...but I've finally been able to try it out. Thank you for all the suggestions you guys. I ended up just having the object transport room to room. Is working awesome, but it is really helpful to see all the different ideas for this!</p>\n<p>I'm a bit curious about the suggestion of using a menu. I'm not using any menus for my game. Is that the standard now in Parcer fiction? My game is more old school, and give you verb hints in the descriptions when you look at objects. I really like this style of game... but is it going to turn off players?</p>\n\n",
      "PostDate": "2018-01-27T03:33:51.5911877Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3fe20a16-1a87-4217-8bec-7002a88326ca",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">My game is more old school, and give you verb hints in the descriptions when you look at objects. I really like this style of game...\r\n\r\nSame here, but I think we are the minority.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>My game is more old school, and give you verb hints in the descriptions when you look at objects. I really like this style of game...</p>\n</blockquote>\n<p>Same here, but I think we are the minority.</p>\n\n",
      "PostDate": "2018-01-27T04:06:32.1983159Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
