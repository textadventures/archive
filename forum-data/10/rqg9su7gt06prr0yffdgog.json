{
  "Topic": {
    "TopicId": "rqg9su7gt06prr0yffdgog",
    "ForumId": "10",
    "Title": "Running a function before command runs",
    "LastUpdated": "2019-02-05T12:33:15.6201011Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d848cb12-6c69-4e07-aa32-a55e74155eb6",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would like to run a function anytime the player enters a command or verb. Either through the``` #inputTextCommand``` or by clicking a ```#verbButton``` in the ```#gamepanes```.\r\n\r\nCan you think of a way to do this without adding the function to every command?",
      "EditableFormat": "markdown",
      "HTML": "<p>I would like to run a function anytime the player enters a command or verb. Either through the<code>#inputTextCommand</code> or by clicking a <code>#verbButton</code> in the <code>#gamepanes</code>.</p>\n<p>Can you think of a way to do this without adding the function to every command?</p>\n\n",
      "PostDate": "2019-02-05T12:33:15.6201011Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0b3adc5b-93f0-4c39-9ed7-8f9e5c24e6c1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could override the function `HandleSingleCommand`?\r\n\r\nThat's called after the game has determined which command the player entered, but before checking the objects mentioned in the command against the available objects.\r\n\r\nThe default function is:\r\n```\r\n  <function name=\"HandleSingleCommandPattern\" parameters=\"command, thiscommand, varlist\">\r\n    // current command string\r\n    game.pov.currentcommand = command\r\n   \r\n    // current command object\r\n    game.pov.currentcommandpattern = thiscommand\r\n   \r\n    // string dictionary of variables, e.g. object1=\"book\"; object2=\"table\"\r\n    game.pov.currentcommandvarlist = varlist\r\n   \r\n    // string list of variables left to resolve\r\n    game.pov.currentcommandvarlistqueue = NewStringList()\r\n    foreach (key, varlist) {\r\n      list add (game.pov.currentcommandvarlistqueue, key)\r\n    }\r\n\r\n    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object\r\n    game.pov.currentcommandresolvedelements = NewDictionary()\r\n\r\n    // list of resolved elements, e.g. book_object; table_object\r\n    game.pov.currentcommandresolvedobjects = NewObjectList()\r\n\r\n    game.pov.currentcommandunresolvedobject = null\r\n    game.pov.currentcommandpendingvariable = null\r\n    ResolveNextName\r\n  </function>\r\n```\r\nYou could add your own line to that function, to run whichever script you want.\r\nIf you want to know whether the player typed a command or clicked a link, you could look at `game.pov.commandmetadata`. If the player clicked a command link or a verb button, then this will be a string dictionary in which the key is the alias of the selected object (as it appears in the command string), and the value is the object's name.\r\n\r\nIf you're doing this a lot, it might even be possible to modify a couple of functions to make a new kind of turnscript, that runs before the command is executed. Might be a bit tricky to work with, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could override the function <code>HandleSingleCommand</code>?</p>\n<p>That's called after the game has determined which command the player entered, but before checking the objects mentioned in the command against the available objects.</p>\n<p>The default function is:</p>\n<pre><code>  &lt;function name=\"HandleSingleCommandPattern\" parameters=\"command, thiscommand, varlist\"&gt;\n    // current command string\n    game.pov.currentcommand = command\n   \n    // current command object\n    game.pov.currentcommandpattern = thiscommand\n   \n    // string dictionary of variables, e.g. object1=\"book\"; object2=\"table\"\n    game.pov.currentcommandvarlist = varlist\n   \n    // string list of variables left to resolve\n    game.pov.currentcommandvarlistqueue = NewStringList()\n    foreach (key, varlist) {\n      list add (game.pov.currentcommandvarlistqueue, key)\n    }\n\n    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object\n    game.pov.currentcommandresolvedelements = NewDictionary()\n\n    // list of resolved elements, e.g. book_object; table_object\n    game.pov.currentcommandresolvedobjects = NewObjectList()\n\n    game.pov.currentcommandunresolvedobject = null\n    game.pov.currentcommandpendingvariable = null\n    ResolveNextName\n  &lt;/function&gt;\n</code></pre>\n<p>You could add your own line to that function, to run whichever script you want.<br>\nIf you want to know whether the player typed a command or clicked a link, you could look at <code>game.pov.commandmetadata</code>. If the player clicked a command link or a verb button, then this will be a string dictionary in which the key is the alias of the selected object (as it appears in the command string), and the value is the object's name.</p>\n<p>If you're doing this a lot, it might even be possible to modify a couple of functions to make a new kind of turnscript, that runs before the command is executed. Might be a bit tricky to work with, though.</p>\n\n",
      "PostDate": "2019-02-05T14:43:48.9747829Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
