{
  "Topic": {
    "TopicId": "al9_amv9uesdxshkigbhoq",
    "ForumId": "10",
    "Title": "Changing all NPC from friendly to aggressive",
    "LastUpdated": "2017-09-04T23:32:21.1272908Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ba4bae7c-52ae-4566-8f21-5b237475cc79",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I decide to revamp my game(again). I am creating races of NPC's using a race type. If the player attacks one friendly NPC of a certain race type, how can I change all of that type to aggressive/enemy. They all inherit a friendly = true attribute. just unclear how to change that to false for a race type. \r\nI have created a race tab on quest to create the NPCs so perhaps there is something I can add there.",
      "EditableFormat": "markdown",
      "HTML": "<p>I decide to revamp my game(again). I am creating races of NPC's using a race type. If the player attacks one friendly NPC of a certain race type, how can I change all of that type to aggressive/enemy. They all inherit a friendly = true attribute. just unclear how to change that to false for a race type.<br>\nI have created a race tab on quest to create the NPCs so perhaps there is something I can add there.</p>\n\n",
      "PostDate": "2017-09-04T23:32:21.1272908Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6a9ae193-2b38-4d9b-bec3-d533c65b4b84",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If friendly = false, attack player?\r\n\r\nSomething like that.\r\n\r\nI personally love the aggression system Morrowind and other Elder Scrolls games have. Each creature has a certain \"aggression level,\" although the creature has this individually, unlike what you said. Once the aggression level reaches a certain point, the npc behaves differently.  It may be friendly, neutral, aggressive, and go out of its way to attack the player no matter what.",
      "EditableFormat": "markdown",
      "HTML": "<p>If friendly = false, attack player?</p>\n<p>Something like that.</p>\n<p>I personally love the aggression system Morrowind and other Elder Scrolls games have. Each creature has a certain \"aggression level,\" although the creature has this individually, unlike what you said. Once the aggression level reaches a certain point, the npc behaves differently.  It may be friendly, neutral, aggressive, and go out of its way to attack the player no matter what.</p>\n\n",
      "PostDate": "2017-09-04T23:39:27.3226739Z",
      "LastEditDate": "2017-09-04T23:40:17.8230799Z",
      "link": null
    },
    {
      "PostId": "935b94c2-e19d-42e2-91ee-7eef709a7708",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Right. But I need to be able to have NPCs of that race to attack the player from then on. I need to change all npcs to friendly = false.\r\n\r\nI'm also wanting to use this script for a light spell to change dark rooms to lighted. \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Right. But I need to be able to have NPCs of that race to attack the player from then on. I need to change all npcs to friendly = false.</p>\n<p>I'm also wanting to use this script for a light spell to change dark rooms to lighted.</p>\n\n",
      "PostDate": "2017-09-05T00:51:38.7498658Z",
      "LastEditDate": "2017-09-05T01:06:36.8954894Z",
      "link": null
    },
    {
      "PostId": "9d5ec5c2-ff48-481a-b328-2dca808b7326",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "After thinking about it, I believe adding an attribute/flag to the player to be read when the npc comes in contact with player it will change the npc friendly flag to false is the best way to go. That's the best I can come up with.",
      "EditableFormat": "markdown",
      "HTML": "<p>After thinking about it, I believe adding an attribute/flag to the player to be read when the npc comes in contact with player it will change the npc friendly flag to false is the best way to go. That's the best I can come up with.</p>\n\n",
      "PostDate": "2017-09-05T01:13:18.6515079Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7b5cc505-2a20-4237-bcf3-3fc8439365ef",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This may not be the best way to go about it, but what I would do is create a permanent object list with the game's startup script. Let's say the race you want to change are Bunny People (yes, I'm being a little silly), I would have them all inherit the attribute: *race = \"BunnyPeople\"*. Then in the game startup script, I would add the following code:\r\n\r\n```\r\nTheBunnyPeople = NewObjectList()\r\nforeach (NPC, AllObjects()) {\r\n  if (NPC.race = \"BunnyPeople\") {\r\n    list add (TheBunnyPeople, NPC)\r\n  }\r\n}\r\ngame.TheBunnyPeople = TheBunnyPeople\r\n```\r\nThat script checks all game objects. For every object that is among the Bunny People, it adds them to an object list,  and then permanently stores that list to *game.TheBunnyPeople*. From this point on, you can refer to all Bunny People in the game from that list, no matter where they are. \r\n\r\nIn your scenario, once the condition has been met to make them hostile, I'd run this script:\r\n```\r\nforeach (NPC, game.TheBunnyPeople) {\r\n  SetObjectFlagOff (NPC, \"friendly\")\r\n}\r\n```\r\n\r\nAssuming I didn't make any errors (and I very well may have), that should make all the Bunny People in the entire game hostile. If there is anything else that you want to do to the Bunny People, the good news is that anything you can do with any other object list can be done to *game.TheBunnyPeople* once you've created that list in the startup.  \r\n\r\nOf course, you'll have to change my examples of Bunny People to whatever you are actually using, but hopefully you get the idea.",
      "EditableFormat": "markdown",
      "HTML": "<p>This may not be the best way to go about it, but what I would do is create a permanent object list with the game's startup script. Let's say the race you want to change are Bunny People (yes, I'm being a little silly), I would have them all inherit the attribute: <em>race = \"BunnyPeople\"</em>. Then in the game startup script, I would add the following code:</p>\n<pre><code>TheBunnyPeople = NewObjectList()\nforeach (NPC, AllObjects()) {\n  if (NPC.race = \"BunnyPeople\") {\n    list add (TheBunnyPeople, NPC)\n  }\n}\ngame.TheBunnyPeople = TheBunnyPeople\n</code></pre>\n<p>That script checks all game objects. For every object that is among the Bunny People, it adds them to an object list,  and then permanently stores that list to <em>game.TheBunnyPeople</em>. From this point on, you can refer to all Bunny People in the game from that list, no matter where they are.</p>\n<p>In your scenario, once the condition has been met to make them hostile, I'd run this script:</p>\n<pre><code>foreach (NPC, game.TheBunnyPeople) {\n  SetObjectFlagOff (NPC, \"friendly\")\n}\n</code></pre>\n<p>Assuming I didn't make any errors (and I very well may have), that should make all the Bunny People in the entire game hostile. If there is anything else that you want to do to the Bunny People, the good news is that anything you can do with any other object list can be done to <em>game.TheBunnyPeople</em> once you've created that list in the startup.</p>\n<p>Of course, you'll have to change my examples of Bunny People to whatever you are actually using, but hopefully you get the idea.</p>\n\n",
      "PostDate": "2017-09-05T01:41:39.6754048Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "94dd7308-2cb4-41b1-9315-07622efc238b",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's what I was looking for! Thanks Humble  Maybe make it a function and call it when needed\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>That's what I was looking for! Thanks Humble  Maybe make it a function and call it when needed</p>\n\n",
      "PostDate": "2017-09-05T02:21:40.7302778Z",
      "LastEditDate": "2017-09-05T02:27:37.2745663Z",
      "link": null
    },
    {
      "PostId": "c3076fc3-fb3b-4b96-a914-5939f4eaba78",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think adding \"game.friendly = false\" directly onto your \"player attack\" function/command is the best way to go.\r\nBefore that, you will need to edit the creature spawn script, or wherever you keep the attributes.\r\n\r\nHow does having one attribute say game.friendly, and one say this.aggression/obj.agression sound?\r\n```\r\nif (game.friendly = false) {\r\n  this.agression = true\r\n}\r\n```\r\n(I didn't realise someone else answered the question.)\r\n\r\nI still think having an aggression level is a good idea.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think adding \"game.friendly = false\" directly onto your \"player attack\" function/command is the best way to go.<br>\nBefore that, you will need to edit the creature spawn script, or wherever you keep the attributes.</p>\n<p>How does having one attribute say game.friendly, and one say this.aggression/obj.agression sound?</p>\n<pre><code>if (game.friendly = false) {\n  this.agression = true\n}\n</code></pre>\n<p>(I didn't realise someone else answered the question.)</p>\n<p>I still think having an aggression level is a good idea.</p>\n\n",
      "PostDate": "2017-09-05T02:32:25.2783982Z",
      "LastEditDate": "2017-09-05T02:42:09.8326159Z",
      "link": null
    },
    {
      "PostId": "83d04e6b-6515-4b35-a8a6-1537a0b14a7c",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How about a player attribute called (whatever_race_friendly = true) ie. orc, elf, human.  Then when whatever race is attacked the corresponding flag can be changed to \"false\" and when the (whatever race) comes in contact with player it will read the flag and control whether it attacks or not. \r\n```\r\nif (orc.parent = player.parent and player.orc_friendly = false)\r\n   then (attack_player script)\r\nelse (give'm a big old smooch)\r\n```\r\njmnevil54 ,\r\n(laughing) That's what you said earlier in your first reply! Here I thought I figured it out....\r\n\r\nProudly Humble's script may be the ticket too...We'll see ",
      "EditableFormat": "markdown",
      "HTML": "<p>How about a player attribute called (whatever_race_friendly = true) ie. orc, elf, human.  Then when whatever race is attacked the corresponding flag can be changed to \"false\" and when the (whatever race) comes in contact with player it will read the flag and control whether it attacks or not.</p>\n<pre><code>if (orc.parent = player.parent and player.orc_friendly = false)\n   then (attack_player script)\nelse (give'm a big old smooch)\n</code></pre>\n<p>jmnevil54 ,<br>\n(laughing) That's what you said earlier in your first reply! Here I thought I figured it out....</p>\n<p>Proudly Humble's script may be the ticket too...We'll see</p>\n\n",
      "PostDate": "2017-09-05T04:59:48.3374024Z",
      "LastEditDate": "2017-09-05T05:14:38.5202083Z",
      "link": null
    },
    {
      "PostId": "26460251-f9a2-4d86-add0-10e063b2ba86",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Proudly Humbly method is really the only way to do it:\r\n\r\nhave/create/generate a list for each race type (as you don't want to be iterating through every object in the game, every time, lol), as that way you can set each of them to how you want them, via the iterating (foreach) Function.\r\n\r\n----------\r\n\r\nif you want to have a more complex system, via having a scale (integer):\r\n\r\n0 to 33: hostile // attacks you immediately / \"on sight\", etc features\r\n34 to 66: neutral // whatever features\r\n67 to 100: friendly // whatever features\r\n\r\n(you can of course have more segments/levels than just 3, but this is just an example)\r\n\r\ninstead of just a toggle (boolean):\r\n\r\nhostile = true // attacks you immediately / \"on sight\", etc features\r\nhostile = false // doesn't attack you, etc features\r\n\r\n```\r\n// using pseudo TES: Morrowind's 'disposition' Attribute as concept (disposition is a good word for this game aspect, lol) example:\r\n\r\n<attr name=\"changeddisposition_integer\" type=\"script\">\r\n  <![CDATA[\r\n    if (this.disposition_integer >  66) {\r\n      this.disposition_string = \"friendly\"\r\n    } else if (this.disposition_integer > 33) {\r\n      this.disposition_string = \"neutral\"\r\n    } else {\r\n      this.disposition_string = \"hostile\"\r\n    }\r\n  ]]>\r\n</attr>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Proudly Humbly method is really the only way to do it:</p>\n<p>have/create/generate a list for each race type (as you don't want to be iterating through every object in the game, every time, lol), as that way you can set each of them to how you want them, via the iterating (foreach) Function.</p>\n<hr>\n<p>if you want to have a more complex system, via having a scale (integer):</p>\n<p>0 to 33: hostile // attacks you immediately / \"on sight\", etc features<br>\n34 to 66: neutral // whatever features<br>\n67 to 100: friendly // whatever features</p>\n<p>(you can of course have more segments/levels than just 3, but this is just an example)</p>\n<p>instead of just a toggle (boolean):</p>\n<p>hostile = true // attacks you immediately / \"on sight\", etc features<br>\nhostile = false // doesn't attack you, etc features</p>\n<pre><code>// using pseudo TES: Morrowind's 'disposition' Attribute as concept (disposition is a good word for this game aspect, lol) example:\n\n&lt;attr name=\"changeddisposition_integer\" type=\"script\"&gt;\n  &lt;![CDATA[\n    if (this.disposition_integer &gt;  66) {\n      this.disposition_string = \"friendly\"\n    } else if (this.disposition_integer &gt; 33) {\n      this.disposition_string = \"neutral\"\n    } else {\n      this.disposition_string = \"hostile\"\n    }\n  ]]&gt;\n&lt;/attr&gt;\n</code></pre>\n\n",
      "PostDate": "2017-09-05T06:47:41.5667441Z",
      "LastEditDate": "2017-09-05T06:56:53.8481246Z",
      "link": null
    },
    {
      "PostId": "180a0261-d802-423a-957d-d1e62cc73d93",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You should be able to do this to get a list of your NPCs:\r\n```\r\nlistofnpcs = FilterByType(AllObjects(), \"BunnyPeople\")",
      "EditableFormat": "markdown",
      "HTML": "<p>You should be able to do this to get a list of your NPCs:</p>\n<pre><code>listofnpcs = FilterByType(AllObjects(), \"BunnyPeople\")\n</code></pre>\n\n",
      "PostDate": "2017-09-05T06:50:07.7202474Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e94bb100-71d5-4641-b336-be9896cd353e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My first thought would be having a 'race' attribute, and using something like this to make them all hate you:\r\n```\r\nforeach (bunny, FilterByAttribute(AllObjects(), \"race\", \"BunnyPeople\")) {\r\n  bunny.friendly = false\r\n}\r\n```\r\n\r\nMany Looks like many different ways to do it :)",
      "EditableFormat": "markdown",
      "HTML": "<p>My first thought would be having a 'race' attribute, and using something like this to make them all hate you:</p>\n<pre><code>foreach (bunny, FilterByAttribute(AllObjects(), \"race\", \"BunnyPeople\")) {\n  bunny.friendly = false\n}\n</code></pre>\n<p>Many Looks like many different ways to do it :)</p>\n\n",
      "PostDate": "2017-09-05T11:20:02.9071365Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9b8c90f0-4582-4922-b310-ad96da4df4a3",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I really hope there are bunny people in your game after all this, Forgewright.",
      "EditableFormat": "markdown",
      "HTML": "<p>I really hope there are bunny people in your game after all this, Forgewright.</p>\n\n",
      "PostDate": "2017-09-05T12:22:35.1052482Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3d8c2cd6-a435-4bfb-aa51-47b11aada511",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm confused. So what was your process in making the enemies? Are they made by the regular \"object\" button, or by a function?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm confused. So what was your process in making the enemies? Are they made by the regular \"object\" button, or by a function?</p>\n\n",
      "PostDate": "2017-09-05T14:03:07.7479701Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2dbc2cee-916e-4e70-8597-42e7846508bf",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Pixie said:\r\n> I really hope there are bunny people in your game after all this, Forgewright.\r\n\r\nand orcs too, Pixie. Then at some point if the races get along... orc bunnies.",
      "EditableFormat": "markdown",
      "HTML": "<p>Pixie said:</p>\n<blockquote>\n<p>I really hope there are bunny people in your game after all this, Forgewright.</p>\n</blockquote>\n<p>and orcs too, Pixie. Then at some point if the races get along... orc bunnies.</p>\n\n",
      "PostDate": "2017-09-05T17:09:54.2498049Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fd4538e-51ee-4898-8ae9-426e64891a40",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "jmnevil54 said:\r\n> So what was your process in making the enemies? Are they made by the regular \"object\" button, or by a function?\r\n\r\nYes, the object button, with the combatlib tab and a race tab I made(just to see if I could make a tab...yay!) the race tab add race, and agility, strength, intelligence, friendly or not to player. plus whatever I want to the NPCs.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>jmnevil54 said:</p>\n<blockquote>\n<p>So what was your process in making the enemies? Are they made by the regular \"object\" button, or by a function?</p>\n</blockquote>\n<p>Yes, the object button, with the combatlib tab and a race tab I made(just to see if I could make a tab...yay!) the race tab add race, and agility, strength, intelligence, friendly or not to player. plus whatever I want to the NPCs.</p>\n\n",
      "PostDate": "2017-09-05T17:16:01.4395294Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fa1f7146-2b9b-4ad4-aa7f-46ccdb99818d",
      "UserId": 251335,
      "Username": "Proudly Humble",
      "AvatarUrl": "http://i.imgur.com/BIofNn8b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Glad I could help. I had a similar problem some time back and creating object lists this way was the solution I came up with. When I read your post, I wanted to share my solution. I've long suspected there was a solution similar to what Pixie supplied, but that was (and still is) in an area I'm unfamiliar with, and what I have is good enough for me.\r\n\r\nYes, I would actually make this a function. Actually, I'd put both scripts into functions (to keep the startup script neater and to help track errors on startup). The first function I'd name Character_Setup and call it as the game loads. If you have other races that you might want to reference globally, you could expand this Character_Setup function to something like:\r\n\r\n**Character_Setup**\r\n```\r\nTheBunnyPeople = NewObjectList()\r\nOrcs = NewObjectList()\r\nPixies = NewObjectList()\r\nHumbleYellowMinions = NewObjectList()\r\nforeach (NPC, AllObjects()) {\r\n  if (NPC.race = \"BunnyPeople\") {\r\n    list add (TheBunnyPeople, NPC)\r\n  }\r\n  else if (NPC.race = \"orc\") {\r\n    list add (Orcs, \"NPC\")\r\n  }\r\n  else if (NPC.race = \"Pixie\") {\r\n    list add (Pixies, \"NPC\")\r\n  }\r\n  else if (NPC.race = \"HumbleYellowMinion\") {\r\n    list add (HumbleYellowMinions, \"NPC\")\r\n  }\r\n}\r\ngame.TheBunnyPeople = TheBunnyPeople\r\ngame.Orcs = Orcs\r\ngame.Pixies = Pixies\r\ngame.HumbleYellowMinions = HumbleYellowMinions \r\n```\r\n\r\n...and so on. \r\n\r\nThere are many different ways you could do the second function, which is the one that actually _changes_ the attribute. You could create one just simply to make all of the one race hostile. And you could add another one to make them friendly again. \r\n\r\nOr you could create just one function, and determine the kindness/hostility with a parameter. In the follwing case, I would add a parameter named \"mode\":\r\n\r\n**Change_Hostility**\r\n```\r\nforeach (NPC, game.TheBunnyPeople) {\r\n  if (mode = \"mean\") {\r\n    SetObjectFlagOff (NPC, \"friendly\")\r\n  }\r\n  if (mode = \"kind\") {\r\n    SetObjectFlagOn (NPC, \"friendly\")\r\n  }\r\n}\r\n```\r\n\r\nSo you could change the demeanor of the Bunny People with this simple line of script when conditions are met:\r\n\r\n```\r\nChange_Hostility (\"mean\")\r\n```\r\n\r\nor\r\n\r\n```\r\nChange_Hostility (\"kind\")\r\n```\r\n\r\n\r\nYou could create functions like this for each and every race. Or you could have a function with two parameters that would work with any race set up with the Character_Setup function (which is what I would do). The two parameters, in order, would be NPCList and mode.\r\n\r\n**Change_Hostility** \r\n```\r\nforeach (NPC, NPCList) {\r\n  if (mode = \"mean\") {\r\n    SetObjectFlagOff (NPC, \"friendly\")\r\n  }\r\n  if (mode = \"kind\") {\r\n    SetObjectFlagOn (NPC, \"friendly\")\r\n  }\r\n}\r\n```\r\nFor instance, this simple line of code would call the Change_Hostility funtion and make all pixies in a game turn peaceful:\r\n\r\n```\r\nChange_Hostility (game.Pixies, \"kind\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Glad I could help. I had a similar problem some time back and creating object lists this way was the solution I came up with. When I read your post, I wanted to share my solution. I've long suspected there was a solution similar to what Pixie supplied, but that was (and still is) in an area I'm unfamiliar with, and what I have is good enough for me.</p>\n<p>Yes, I would actually make this a function. Actually, I'd put both scripts into functions (to keep the startup script neater and to help track errors on startup). The first function I'd name Character_Setup and call it as the game loads. If you have other races that you might want to reference globally, you could expand this Character_Setup function to something like:</p>\n<p><strong>Character_Setup</strong></p>\n<pre><code>TheBunnyPeople = NewObjectList()\nOrcs = NewObjectList()\nPixies = NewObjectList()\nHumbleYellowMinions = NewObjectList()\nforeach (NPC, AllObjects()) {\n  if (NPC.race = \"BunnyPeople\") {\n    list add (TheBunnyPeople, NPC)\n  }\n  else if (NPC.race = \"orc\") {\n    list add (Orcs, \"NPC\")\n  }\n  else if (NPC.race = \"Pixie\") {\n    list add (Pixies, \"NPC\")\n  }\n  else if (NPC.race = \"HumbleYellowMinion\") {\n    list add (HumbleYellowMinions, \"NPC\")\n  }\n}\ngame.TheBunnyPeople = TheBunnyPeople\ngame.Orcs = Orcs\ngame.Pixies = Pixies\ngame.HumbleYellowMinions = HumbleYellowMinions \n</code></pre>\n<p>...and so on.</p>\n<p>There are many different ways you could do the second function, which is the one that actually <em>changes</em> the attribute. You could create one just simply to make all of the one race hostile. And you could add another one to make them friendly again.</p>\n<p>Or you could create just one function, and determine the kindness/hostility with a parameter. In the follwing case, I would add a parameter named \"mode\":</p>\n<p><strong>Change_Hostility</strong></p>\n<pre><code>foreach (NPC, game.TheBunnyPeople) {\n  if (mode = \"mean\") {\n    SetObjectFlagOff (NPC, \"friendly\")\n  }\n  if (mode = \"kind\") {\n    SetObjectFlagOn (NPC, \"friendly\")\n  }\n}\n</code></pre>\n<p>So you could change the demeanor of the Bunny People with this simple line of script when conditions are met:</p>\n<pre><code>Change_Hostility (\"mean\")\n</code></pre>\n<p>or</p>\n<pre><code>Change_Hostility (\"kind\")\n</code></pre>\n<p>You could create functions like this for each and every race. Or you could have a function with two parameters that would work with any race set up with the Character_Setup function (which is what I would do). The two parameters, in order, would be NPCList and mode.</p>\n<p><strong>Change_Hostility</strong></p>\n<pre><code>foreach (NPC, NPCList) {\n  if (mode = \"mean\") {\n    SetObjectFlagOff (NPC, \"friendly\")\n  }\n  if (mode = \"kind\") {\n    SetObjectFlagOn (NPC, \"friendly\")\n  }\n}\n</code></pre>\n<p>For instance, this simple line of code would call the Change_Hostility funtion and make all pixies in a game turn peaceful:</p>\n<pre><code>Change_Hostility (game.Pixies, \"kind\")\n</code></pre>\n\n",
      "PostDate": "2017-09-05T18:31:09.1138682Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2364cff8-a776-466b-90f5-31d3f2a91f54",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-----------------------------\r\n\r\nit's basically the difference between Java and C++ engines/software in how they work:\r\n\r\n1. you can code in everything yourself (lots of manual work, but it's only one time, and I think it's usually faster for the compiler doing it, than quest running scripts to automatically do it for you)\r\n\r\n2. you can use scripts to generate your code/content (less/least manual work,but every time you play the game, it has to do all of the scripting, to generate your game content, which is probably slower than it compiling the game from permanent code done by you)\r\n\r\n------------\r\n\r\nfor example:\r\n\r\n1. you code everything in yourself/manually (a skeleton example below only obviously, lol):\r\n\r\n```\r\n<object name=\"monster\">\r\n\r\n  <attr name=\"monster_stringlist\" type=\"simplestringlist\">orc;ogre</attr>\r\n  <attr name=\"monster_objectlist\" type=\"objectlist\">orc;ogre</attr>\r\n\r\n  <object name=\"orc\">\r\n    <inherit name=\"orc_type\" />\r\n  </object>\r\n\r\n  <object name=\"ogre\">\r\n    <inherit name=\"ogre_type\" />\r\n  </object>\r\n\r\n</object>\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n\r\n<type name=\"orc_type\">\r\n  <inherit name=\"monster_type\" />\r\n</type>\r\n\r\n<type name=\"ogre_type\">\r\n  <inherit name=\"monster_type\" />\r\n</type>\r\n```\r\n\r\n2. using scripting to generate your code/content (a skeleton example below only obviously, lol):\r\n\r\n```\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    do (content_generation, \"content_generation_script\")\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"content_generation\">\r\n  <attr name=\"content_generation_script\" type=\"script\">\r\n    create (monster)\r\n    create (orc, orc_type)\r\n    create (ogre, ogre_type)\r\n    object_variable_1 = GetObject (orc)\r\n    object_variable_1.parent = monster\r\n    object_variable_2 = GetObject (ogre)\r\n    object_variable_2.parent = monster\r\n    monster.monster_stringlist = NewStringList ()\r\n    monster.monster_objectlist = NewObjectList ()\r\n    foreach (object_variable_3, AllObjects ()) {\r\n      if (DoesInherit (object_variable_3, \"monster_type\")) {\r\n        list add (monster.monster_stringlist, object_variable_3.name)\r\n        list add (monster.monster_objectlist, object_variable_3)\r\n      }\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n<!--\r\nThere might be a scripting way of creating the Object Types too, but I'm not sure, so I just manually created/coded them in below\r\n-->\r\n\r\n<type name=\"monster_type\">\r\n</type>\r\n\r\n<type name=\"orc_type\">\r\n  <inherit name=\"monster_type\" />\r\n</type>\r\n\r\n<type name=\"ogre_type\">\r\n  <inherit name=\"monster_type\" />\r\n</type>\r\n```\r\n\r\n------------------\r\n\r\nP.S.\r\n\r\npersonally, now that I've learned how Delegates work, I usually use Objects and their Script Attributes (+ Delegates), instead of Functions now, as it does allow for great organization/compartmentalization/encapsulation design, and it allows for more dynamic scripting too, as you can directly match-up/check those Objects with what you want to do within the scripting, making it dynamic, whereas you can't do that as directly with using Functions.\r\n\r\nhere's how Delegates work:\r\n\r\nDelegates are basically how you can turn a Script Attribute into a Function, meaning that the Script Attribute can have a return value and/or arguments/parameters, just like a Function does/has.\r\n\r\n```\r\n// (Delegates are kind of similar to creating a 'prototype', except it's a 'prototype' for a Script Attribute, instead of a Function)\r\n// (probably a good/safe place to put delegates is right under your library reference tags and above your 'game' Game Settings Object)\r\n\r\n<delegate name=\"return_sum_of_two_integers_delegate\" parameters=\"integer_parameter_1, integer_parameter_2\" type=\"int\" />\r\n\r\n// ----------------------------------------\r\n\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    get input {\r\n      integer_variable_1 = ToInt (result)\r\n      get input {\r\n        integer_variable_2 = ToInt (result)\r\n        this.sum = do (example_object, \"sum_of_two_integers_script_attribute\", integer_variable_1, integer_variable_2)\r\n        this.sum_2 = do (example_object_2, \"example_script_attribute_2\", integer_variable_1, integer_variable_2)\r\n        msg (this.sum)\r\n        msg (this.sum_2)\r\n      }\r\n    }\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"sum_of_two_integers_script_attribute\" type=\"return_sum_of_two_integers_delegate\">\r\n    if (TypeOf (integer_parameter_1) = \"int\" andTypeOf (integer_parameter_2) = \"int\") {\r\n      return (integer_parameter_1 + integer_parameter_2)\r\n    } else {\r\n      msg (\"wrong input, try again\")\r\n    }\r\n  </attr>\r\n</object>\r\n\r\n// the below is to just show that a Delegate can be used for multiple Script Attributes:\r\n\r\n<object name=\"example_object_2\">\r\n  <attr name=\"example_script_attribute_2\" type=\"return_sum_of_two_integers_delegate\">\r\n    if (TypeOf (integer_parameter_1) = \"int\" andTypeOf (integer_parameter_2) = \"int\") {\r\n      return (integer_parameter_1 + integer_parameter_2)\r\n    } else {\r\n      msg (\"wrong input, try again\")\r\n    }\r\n  </attr>\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>it's basically the difference between Java and C++ engines/software in how they work:</p>\n<ol>\n<li>\n<p>you can code in everything yourself (lots of manual work, but it's only one time, and I think it's usually faster for the compiler doing it, than quest running scripts to automatically do it for you)</p>\n</li>\n<li>\n<p>you can use scripts to generate your code/content (less/least manual work,but every time you play the game, it has to do all of the scripting, to generate your game content, which is probably slower than it compiling the game from permanent code done by you)</p>\n</li>\n</ol>\n<hr>\n<p>for example:</p>\n<ol>\n<li>you code everything in yourself/manually (a skeleton example below only obviously, lol):</li>\n</ol>\n<pre><code>&lt;object name=\"monster\"&gt;\n\n  &lt;attr name=\"monster_stringlist\" type=\"simplestringlist\"&gt;orc;ogre&lt;/attr&gt;\n  &lt;attr name=\"monster_objectlist\" type=\"objectlist\"&gt;orc;ogre&lt;/attr&gt;\n\n  &lt;object name=\"orc\"&gt;\n    &lt;inherit name=\"orc_type\" /&gt;\n  &lt;/object&gt;\n\n  &lt;object name=\"ogre\"&gt;\n    &lt;inherit name=\"ogre_type\" /&gt;\n  &lt;/object&gt;\n\n&lt;/object&gt;\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"orc_type\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"ogre_type\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/type&gt;\n</code></pre>\n<ol start=\"2\">\n<li>using scripting to generate your code/content (a skeleton example below only obviously, lol):</li>\n</ol>\n<pre><code>&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    do (content_generation, \"content_generation_script\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"content_generation\"&gt;\n  &lt;attr name=\"content_generation_script\" type=\"script\"&gt;\n    create (monster)\n    create (orc, orc_type)\n    create (ogre, ogre_type)\n    object_variable_1 = GetObject (orc)\n    object_variable_1.parent = monster\n    object_variable_2 = GetObject (ogre)\n    object_variable_2.parent = monster\n    monster.monster_stringlist = NewStringList ()\n    monster.monster_objectlist = NewObjectList ()\n    foreach (object_variable_3, AllObjects ()) {\n      if (DoesInherit (object_variable_3, \"monster_type\")) {\n        list add (monster.monster_stringlist, object_variable_3.name)\n        list add (monster.monster_objectlist, object_variable_3)\n      }\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;!--\nThere might be a scripting way of creating the Object Types too, but I'm not sure, so I just manually created/coded them in below\n--&gt;\n\n&lt;type name=\"monster_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"orc_type\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/type&gt;\n\n&lt;type name=\"ogre_type\"&gt;\n  &lt;inherit name=\"monster_type\" /&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>P.S.</p>\n<p>personally, now that I've learned how Delegates work, I usually use Objects and their Script Attributes (+ Delegates), instead of Functions now, as it does allow for great organization/compartmentalization/encapsulation design, and it allows for more dynamic scripting too, as you can directly match-up/check those Objects with what you want to do within the scripting, making it dynamic, whereas you can't do that as directly with using Functions.</p>\n<p>here's how Delegates work:</p>\n<p>Delegates are basically how you can turn a Script Attribute into a Function, meaning that the Script Attribute can have a return value and/or arguments/parameters, just like a Function does/has.</p>\n<pre><code>// (Delegates are kind of similar to creating a 'prototype', except it's a 'prototype' for a Script Attribute, instead of a Function)\n// (probably a good/safe place to put delegates is right under your library reference tags and above your 'game' Game Settings Object)\n\n&lt;delegate name=\"return_sum_of_two_integers_delegate\" parameters=\"integer_parameter_1, integer_parameter_2\" type=\"int\" /&gt;\n\n// ----------------------------------------\n\n&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    get input {\n      integer_variable_1 = ToInt (result)\n      get input {\n        integer_variable_2 = ToInt (result)\n        this.sum = do (example_object, \"sum_of_two_integers_script_attribute\", integer_variable_1, integer_variable_2)\n        this.sum_2 = do (example_object_2, \"example_script_attribute_2\", integer_variable_1, integer_variable_2)\n        msg (this.sum)\n        msg (this.sum_2)\n      }\n    }\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"sum_of_two_integers_script_attribute\" type=\"return_sum_of_two_integers_delegate\"&gt;\n    if (TypeOf (integer_parameter_1) = \"int\" andTypeOf (integer_parameter_2) = \"int\") {\n      return (integer_parameter_1 + integer_parameter_2)\n    } else {\n      msg (\"wrong input, try again\")\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// the below is to just show that a Delegate can be used for multiple Script Attributes:\n\n&lt;object name=\"example_object_2\"&gt;\n  &lt;attr name=\"example_script_attribute_2\" type=\"return_sum_of_two_integers_delegate\"&gt;\n    if (TypeOf (integer_parameter_1) = \"int\" andTypeOf (integer_parameter_2) = \"int\") {\n      return (integer_parameter_1 + integer_parameter_2)\n    } else {\n      msg (\"wrong input, try again\")\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-09-05T20:04:04.4804653Z",
      "LastEditDate": "2017-09-05T20:25:45.6601406Z",
      "link": null
    },
    {
      "PostId": "eb79c675-107b-4152-9213-71d04245e914",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I quite like Proudly Humble's way of setting it up. But for the Character_setup script, I'd suggest it can be easier if you give the lists consistent naming. For example:\r\n```\r\nforeach (NPC, AllObjects()) {\r\n  if (HasString (NPC, \"race\")) {\r\n    race = NPC.race\r\n    if (not HasAttribute (game, \"list_of_\"+race)) {\r\n      set (game, \"list_of_\"+race, NewObjectList())\r\n    }\r\n    racelist = GetAttribute (game, \"list_of_\"+race)\r\n    list add (racelist, NPC)\r\n  }\r\n}\r\n```\r\n\r\nThen you have your lists ```game.list_of_bunnyperson```, ```game.list_of_orc```, and so on; and giving a character a new race will create a new list automatically.\r\n\r\nOr as this script is only running once, if you want to use names like the one you've chosen, it's not that much difference to use the builtin filters:\r\n```\r\ngame.TheBunnyPeople = FilterByAttribute (AllObjects(), \"race\", \"BunnyPeople\")\r\ngame.Orcs = FilterByAttribute (AllObjects(), \"race\", \"orc\")\r\ngame.Pixies = FilterByAttribute (AllObjects(), \"race\", \"Pixie\")\r\ngame.HumbleYellowMinions = FilterByAttribute (AllObjects(), \"race\", \"HumbleYellowMinion\")\r\n```\r\n\r\nSorry if there's errors in there, I'm writing off the top of my head and half asleep right now.",
      "EditableFormat": "markdown",
      "HTML": "<p>I quite like Proudly Humble's way of setting it up. But for the Character_setup script, I'd suggest it can be easier if you give the lists consistent naming. For example:</p>\n<pre><code>foreach (NPC, AllObjects()) {\n  if (HasString (NPC, \"race\")) {\n    race = NPC.race\n    if (not HasAttribute (game, \"list_of_\"+race)) {\n      set (game, \"list_of_\"+race, NewObjectList())\n    }\n    racelist = GetAttribute (game, \"list_of_\"+race)\n    list add (racelist, NPC)\n  }\n}\n</code></pre>\n<p>Then you have your lists <code>game.list_of_bunnyperson</code>, <code>game.list_of_orc</code>, and so on; and giving a character a new race will create a new list automatically.</p>\n<p>Or as this script is only running once, if you want to use names like the one you've chosen, it's not that much difference to use the builtin filters:</p>\n<pre><code>game.TheBunnyPeople = FilterByAttribute (AllObjects(), \"race\", \"BunnyPeople\")\ngame.Orcs = FilterByAttribute (AllObjects(), \"race\", \"orc\")\ngame.Pixies = FilterByAttribute (AllObjects(), \"race\", \"Pixie\")\ngame.HumbleYellowMinions = FilterByAttribute (AllObjects(), \"race\", \"HumbleYellowMinion\")\n</code></pre>\n<p>Sorry if there's errors in there, I'm writing off the top of my head and half asleep right now.</p>\n\n",
      "PostDate": "2017-09-06T09:17:14.7744106Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
