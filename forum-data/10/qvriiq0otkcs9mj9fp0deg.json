{
  "Topic": {
    "TopicId": "qvriiq0otkcs9mj9fp0deg",
    "ForumId": "10",
    "Title": "Trouble making a WIELD command SOLVED!!!!!!!!!!",
    "LastUpdated": "2019-06-04T06:11:02.8512194Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8de53f66-6aaa-4bfe-bedd-24f1ebb97b4f",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello im not sure what im doing wrong but i followed the tutorials model for commands so i made a verb called wield and also a command: wield #object#,                                       The stone has the integral of weapon set to 1 so it should be considered a weapon\r\n\r\nif expression not HasInt(object, \"weapon\")   print message Only a fool would use this as a weapon        So i tried wielding the snake in the room but it didn't tell me only a fool would use this as a weapon, I'm so lost",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello im not sure what im doing wrong but i followed the tutorials model for commands so i made a verb called wield and also a command: wield #object#,                                       The stone has the integral of weapon set to 1 so it should be considered a weapon</p>\n<p>if expression not HasInt(object, \"weapon\")   print message Only a fool would use this as a weapon        So i tried wielding the snake in the room but it didn't tell me only a fool would use this as a weapon, I'm so lost</p>\n\n",
      "PostDate": "2019-06-04T06:11:02.8512194Z",
      "LastEditDate": "2019-06-05T00:27:04.7294564Z",
      "link": null
    },
    {
      "PostId": "7a300a58-5c7c-41a4-bf54-8d69817359ba",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My bad i think it's because the verb overrides my command",
      "EditableFormat": "markdown",
      "HTML": "<p>My bad i think it's because the verb overrides my command</p>\n\n",
      "PostDate": "2019-06-04T06:20:04.0779565Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3cc71fbf-aa98-4fb4-b11a-9746c036eede",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Can somebody help me please? Im trying to make a verb called wield that can be used like the wear command because right now to equip my stone i have to type wear stone ;(",
      "EditableFormat": "markdown",
      "HTML": "<p>Can somebody help me please? Im trying to make a verb called wield that can be used like the wear command because right now to equip my stone i have to type wear stone ;(</p>\n\n",
      "PostDate": "2019-06-04T06:39:37.2897545Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e26702b0-9fb8-495b-8937-041147e34e0c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> i made a verb called wield and also a command\r\n\r\nA verb is a special type of command. So basically you've made 2 different commands that respond to the same input from the player.\r\n\r\nVerbs are for commands that do something different depending what you do them to. For example, \"use\" would be a good verb, because using a motorbike, using a snorkel, and using a saw do very different things. (Except it isn't, because \"use\" is a special case; but it's a good example of the kind of thing verbs are good for)\r\n\r\nA *command* has a script which is run every time you use the command, regardless of the object you use.\r\n\r\nA *verb* is a special kind of command, where this script is preset. All it does is check if the object has a script attribute with the same name as the verb, and run that.\r\n\r\nYou probably want to delete the verb, so that the command will run.\r\n\r\n<hr />\r\n\r\nAlternatively, if you're using the desktop version of Quest, I would suggest modifying the existing *wear* command so that it works with different words. By default, there are 4 different patterns for the \"wear\" command: \"wear #object#\", \"put on #object#\", \"put #object# on\", or \"don #object#\". If you add \"wield #object#\" and \"equip #object#\" to that list, then the player can enter \"wield rock\" or \"wear rock\" and both will work (and the player will probably not even notice). The only hard part would be putting the right one on the object's inventoryverbs menu.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>i made a verb called wield and also a command</p>\n</blockquote>\n<p>A verb is a special type of command. So basically you've made 2 different commands that respond to the same input from the player.</p>\n<p>Verbs are for commands that do something different depending what you do them to. For example, \"use\" would be a good verb, because using a motorbike, using a snorkel, and using a saw do very different things. (Except it isn't, because \"use\" is a special case; but it's a good example of the kind of thing verbs are good for)</p>\n<p>A <em>command</em> has a script which is run every time you use the command, regardless of the object you use.</p>\n<p>A <em>verb</em> is a special kind of command, where this script is preset. All it does is check if the object has a script attribute with the same name as the verb, and run that.</p>\n<p>You probably want to delete the verb, so that the command will run.</p>\n<hr>\n<p>Alternatively, if you're using the desktop version of Quest, I would suggest modifying the existing <em>wear</em> command so that it works with different words. By default, there are 4 different patterns for the \"wear\" command: \"wear #object#\", \"put on #object#\", \"put #object# on\", or \"don #object#\". If you add \"wield #object#\" and \"equip #object#\" to that list, then the player can enter \"wield rock\" or \"wear rock\" and both will work (and the player will probably not even notice). The only hard part would be putting the right one on the object's inventoryverbs menu.</p>\n\n",
      "PostDate": "2019-06-04T08:55:57.3441769Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5f2dbc80-1331-4bec-bd35-fa37f9429e25",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangel thank you so much!!!!!! Do you know where/how i can modifyt the existing wear command please?",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangel thank you so much!!!!!! Do you know where/how i can modifyt the existing wear command please?</p>\n\n",
      "PostDate": "2019-06-04T15:01:20.7306258Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "77e9143d-173d-45f7-bfcf-1262e1ff3945",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I only use the online version of Quest, which can't do this.\r\nI know that in the desktop version it's possible to view and edit the built-in elements, but I don't know where the option is.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I only use the online version of Quest, which can't do this.<br>\nI know that in the desktop version it's possible to view and edit the built-in elements, but I don't know where the option is.</p>\n\n",
      "PostDate": "2019-06-04T17:22:17.7702838Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7818e344-5169-426b-ae4a-d6d7eb0d249e",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "No worries thanks",
      "EditableFormat": "markdown",
      "HTML": "<p>No worries thanks</p>\n\n",
      "PostDate": "2019-06-04T19:39:57.3624845Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "01338f2c-2749-4d04-8010-ee3cf88b986c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "at the lower [edit: left] corner is the 'filter' button, click on that, and then click on the 'show library elements' so that it is checked/toggled 'on', which will reveal all of the built-in stuff of quest, as the light grey text in the left side's \"Tree of Stuff\", but then you got to find what you're looking for...\r\n\r\nthere's sections for 'Commands', 'Verbs', but you also might have to look at the individual Objects' Script Attributes too: \r\n\r\nleft side's \"Tree of Stuff\" -> 'WHATEVER' Object -> right side -> 'Attributes' Tab -> 'Attributes' (the box at the bottom) -> search for the Script Attribute (or you can change/edit/delete a non-Script Attribute as well) -> click on it so it is highlighted and then adjust/change/edit/delete it as desired\r\n\r\nthis is how to change the built-in stuff from within the GUI/Editor (by doing it this way, it forces you to click on the 'copy' button in the upper right corner, so that it protects you from messing up the quest coding itself, as otherwise, you'd have to re-download and install quest again)\r\n\r\nyou can also always just right click on your game/library 'WHATEVER.aslx' files themselves, and choose to 'open' them with a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc) to directly get to your game/library code itself, being able to change it as you want. But this isn't the underlying built-in code of the quest engine...\r\n\r\nyou can always go into the quest folder and directly change the quest engine 'core' files themselves too (see above)... but this is messing with the quest program/software/engine files directly, so you got to really know what you're doing... or you'll mess up quest, and have to re-download and install it again",
      "EditableFormat": "markdown",
      "HTML": "<p>at the lower [edit: left] corner is the 'filter' button, click on that, and then click on the 'show library elements' so that it is checked/toggled 'on', which will reveal all of the built-in stuff of quest, as the light grey text in the left side's \"Tree of Stuff\", but then you got to find what you're looking for...</p>\n<p>there's sections for 'Commands', 'Verbs', but you also might have to look at the individual Objects' Script Attributes too:</p>\n<p>left side's \"Tree of Stuff\" -&gt; 'WHATEVER' Object -&gt; right side -&gt; 'Attributes' Tab -&gt; 'Attributes' (the box at the bottom) -&gt; search for the Script Attribute (or you can change/edit/delete a non-Script Attribute as well) -&gt; click on it so it is highlighted and then adjust/change/edit/delete it as desired</p>\n<p>this is how to change the built-in stuff from within the GUI/Editor (by doing it this way, it forces you to click on the 'copy' button in the upper right corner, so that it protects you from messing up the quest coding itself, as otherwise, you'd have to re-download and install quest again)</p>\n<p>you can also always just right click on your game/library 'WHATEVER.aslx' files themselves, and choose to 'open' them with a text editor software (notepad, wordpad, Apple: text editor, notepad++, etc) to directly get to your game/library code itself, being able to change it as you want. But this isn't the underlying built-in code of the quest engine...</p>\n<p>you can always go into the quest folder and directly change the quest engine 'core' files themselves too (see above)... but this is messing with the quest program/software/engine files directly, so you got to really know what you're doing... or you'll mess up quest, and have to re-download and install it again</p>\n\n",
      "PostDate": "2019-06-04T20:00:49.1880347Z",
      "LastEditDate": "2019-06-05T00:30:49.3431898Z",
      "link": null
    },
    {
      "PostId": "71507881-3d41-4269-b546-b43ddb221719",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "hegemonkhan this is great help too you guys very nice i can only thank you more ;) hehe!!!!!!!!!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>hegemonkhan this is great help too you guys very nice i can only thank you more ;) hehe!!!!!!!!!!!</p>\n\n",
      "PostDate": "2019-06-04T21:21:21.0965736Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d90d8405-a608-4866-a3d2-e6583c81c019",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In this case, you'd need to copy the `wear` and `remove` commands, but you only need to change their pattern (the script will work fine). I'm not sure how it looks in the editor, but if the pattern is something like `put on; wear; put #object# on; don` you'd change it to `put on; wear; put #object# on; don; wield; equip`. And do the same for the \"remove\" command, maybe adding \"unequip\" and \"sheathe\".\r\n\r\nYou would also need to copy the `_SetVerbsForGarment` function. I'd suggest replacing its script with something like:\r\n```\r\nouter = _GetOuterForGarment(game.pov, garment)\r\nverblist = Split(\"[LookAt];[Drop]\")\r\nif (outer = null) {\r\n  canwear = true\r\n}\r\nelse if (outer.wear_layer < garment.wear_layer) {\r\n  canwear = true\r\n}\r\nelse {\r\n  canwear = false\r\n}\r\nif (canwear) {\r\n  if (not GetBoolean (garment, \"worn\")) {\r\n    if (HasString (garment, \"customwearverb\")) {\r\n      list add (verblist, garment.customwearverb)\r\n    }\r\n    else {\r\n      list add (verblist, \"[Wear]\")\r\n    }\r\n  }\r\n  else if (GetBoolean (garment, \"removeable\")) {\r\n    if (HasString (garment, \"customremoveverb\")) {\r\n      list add (verblist, garment.customremoveverb)\r\n    }\r\n    else {\r\n      list add (verblist, \"[Remove]\")\r\n    }\r\n  }\r\n}\r\nif (GetBoolean (garment, \"worn\")) {\r\n  if (HasAttribute (garment, \"wornverbs\")) {\r\n    verblist = ListCompact (ListCombine (verblist, garment.wornverbs))\r\n  }\r\n}\r\nelse if (HasAttribute (garment, \"invverbs\")) {\r\n  verblist = ListCompact (ListCombine (verblist, garment.invverbs))\r\n}\r\ngarment.inventoryverbs = verblist\r\n```\r\nThen you would give weapons a pair of string attributes named `customwearverb` and `customremoveverb`, which contain the word you want to appear instead of \"wear\" and \"remove\" in the buttons on the inventory pane, and the popup when you click on the item.\r\n\r\nDoing it this way, the player could still type \"wield hat\" or \"wear rock\", because \"wield\" and \"wear\" are the same thing as far as Quest is concerned; this function just changes what shows up on the buttons/menu.",
      "EditableFormat": "markdown",
      "HTML": "<p>In this case, you'd need to copy the <code>wear</code> and <code>remove</code> commands, but you only need to change their pattern (the script will work fine). I'm not sure how it looks in the editor, but if the pattern is something like <code>put on; wear; put #object# on; don</code> you'd change it to <code>put on; wear; put #object# on; don; wield; equip</code>. And do the same for the \"remove\" command, maybe adding \"unequip\" and \"sheathe\".</p>\n<p>You would also need to copy the <code>_SetVerbsForGarment</code> function. I'd suggest replacing its script with something like:</p>\n<pre><code>outer = _GetOuterForGarment(game.pov, garment)\nverblist = Split(\"[LookAt];[Drop]\")\nif (outer = null) {\n  canwear = true\n}\nelse if (outer.wear_layer &lt; garment.wear_layer) {\n  canwear = true\n}\nelse {\n  canwear = false\n}\nif (canwear) {\n  if (not GetBoolean (garment, \"worn\")) {\n    if (HasString (garment, \"customwearverb\")) {\n      list add (verblist, garment.customwearverb)\n    }\n    else {\n      list add (verblist, \"[Wear]\")\n    }\n  }\n  else if (GetBoolean (garment, \"removeable\")) {\n    if (HasString (garment, \"customremoveverb\")) {\n      list add (verblist, garment.customremoveverb)\n    }\n    else {\n      list add (verblist, \"[Remove]\")\n    }\n  }\n}\nif (GetBoolean (garment, \"worn\")) {\n  if (HasAttribute (garment, \"wornverbs\")) {\n    verblist = ListCompact (ListCombine (verblist, garment.wornverbs))\n  }\n}\nelse if (HasAttribute (garment, \"invverbs\")) {\n  verblist = ListCompact (ListCombine (verblist, garment.invverbs))\n}\ngarment.inventoryverbs = verblist\n</code></pre>\n<p>Then you would give weapons a pair of string attributes named <code>customwearverb</code> and <code>customremoveverb</code>, which contain the word you want to appear instead of \"wear\" and \"remove\" in the buttons on the inventory pane, and the popup when you click on the item.</p>\n<p>Doing it this way, the player could still type \"wield hat\" or \"wear rock\", because \"wield\" and \"wear\" are the same thing as far as Quest is concerned; this function just changes what shows up on the buttons/menu.</p>\n\n",
      "PostDate": "2019-06-04T23:11:33.330943Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7335cac9-6797-4ade-951f-00634daa8af3",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That worked :) solved i will learn more!",
      "EditableFormat": "markdown",
      "HTML": "<p>That worked :) solved i will learn more!</p>\n\n",
      "PostDate": "2019-06-05T00:26:45.8473765Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
