{
  "Topic": {
    "TopicId": "4391",
    "ForumId": "10",
    "Title": "\"You can't do that yet, Padawan...\"",
    "LastUpdated": "2015-02-18T18:28:35+00:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "29036",
      "UserId": 0,
      "Username": "TheMaestro",
      "UserAvatar": null,
      "UserGravatar": "f34dbb5ba04fb65bc84e0f9049fca0e7",
      "EditableText": "Newbie questions are newbie questions, but I am actually kind of stumped by this.\n\nSo there's a locked door in this room, requires a key. Key's hidden, but if the player uses a certain item in their inventory, they can reveal it. In fact, this item is supposed to reveal lots of items like that. The only problem is, I don't want the player to be able to use it all the time, for reasons that make sense within the context of the story. Most specifically, in this opening setting, I want the player to try and use the door so that I can explain exactly why it is they have to use the item (tutorial levels, ftw?).\n\nAs it is, the item can be used right off the bat, revealing the keys and skipping large chunks of narration accidentally. So my question here is, is there a way to lock out a certain verb on an object until specific conditions are met, either by making it simply not there, or by causing it to show a prompt instead to the effect of &quot;you cannot use that object just yet?&quot;",
      "EditableFormat": "bbcode",
      "HTML": "Newbie questions are newbie questions, but I am actually kind of stumped by this.<br/><br/>So there's a locked door in this room, requires a key. Key's hidden, but if the player uses a certain item in their inventory, they can reveal it. In fact, this item is supposed to reveal lots of items like that. The only problem is, I don't want the player to be able to use it all the time, for reasons that make sense within the context of the story. Most specifically, in this opening setting, I want the player to try and use the door so that I can explain exactly why it is they have to use the item (tutorial levels, ftw?).<br/><br/>As it is, the item can be used right off the bat, revealing the keys and skipping large chunks of narration accidentally. So my question here is, is there a way to lock out a certain verb on an object until specific conditions are met, either by making it simply not there, or by causing it to show a prompt instead to the effect of &quot;you cannot use that object just yet?&quot;",
      "PostDate": "2014-06-07T00:48:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29038",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "to do what you want involves some work (possibly) in the code, and also with lists and~or dictionaries, which, as a new person to quest (and I presume also to coding), will probably be too much for you at this point, but if you're interested:\n\nadd the verb, when you want it to be available during game play (and remove it again when you don't want it available):\n\n1. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m --> (page 1, range: A-S)\n2. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/w/index.php?title=Category:All_Functions_and_Script_Commands&amp;pagefrom=Set#mw-pages\">http://quest5.net/w/index.php?title=Cat ... t#mw-pages</a><!-- m --> (page 2, range: S-Z)\n3. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m -->\n4. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Displayverbs\">http://quest5.net/wiki/Displayverbs</a><!-- m -->\n5. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Inventoryverbs\">http://quest5.net/wiki/Inventoryverbs</a><!-- m -->\n\n---------\n\nor, an easier method is to use a 'boolean attribute check', in your Verb's scripting:\n\n'key' (Object) -&gt; Attributes (Tab) -&gt; Attributes -&gt; Add -&gt;\n\nObject (Name ~ ID): key\nAttribute Name: activated_flag_boolean\nAttribute Type: boolean ( or also known as a 'flag' )\nAttribute Value: false\n\nVerb: use key\n\nif (key.activated_flag_boolean = false) {\n-&gt; msg (&quot;Sorry, you can't use the key yet to unlock things&quot;)\n} else if (key.activated_flag_boolean = true) {\n-&gt; // 'unlock whatever Object' Scripts\n}\n\nsome other scripting (some other Verb, a Turnscript, or a Timer, a Function, etc) in the game, where~when that will thus activate the key, via changing the Key's boolean attribute ' activated_flag_boolean ', from ' = false ', to ' = true ' :\n\n// (optional) if .... {\n-&gt; key.activated_flag_boolean = true\n// (optional) }\n\nand to de-activate the key again:\n\n// (optional) if .... {\n-&gt; key.activated_flag_boolean = false\n// (optional) }\n\n-----------\n\nand, you'll need this stuff below too:\n\nthe two most powerful~useful Scripts (you can do like 90% of what you want with these two scripts):\n\n1. run as script -&gt; add a script -&gt; scripts -&gt; if [EXPRESSION] -&gt; (see below)\n\n2. run as script -&gt; add a script -&gt; variables -&gt; set a variable or attribute -&gt; (see below)\n\nObject.Attribute = Value_or_Expression\n\nin code (I'm lazy, so I'm doing it in code as it's quick and easy):\n\nif (Object.Attribute = Value_or_Expression) {\n-&gt; // scripts\n} else if ... {\n-&gt; // scripts\n} else {\n-&gt; // scripts\n}\n\nfor examples:\n\nif (orc.dead_boolean = false) {\n-&gt; // fight scripts\n} else if (orc.dead_boolean = true) {\n-&gt; msg (&quot;The orc is already dead, silly.&quot;)\n}\n\nif (player.age_integer &lt; 0) {\n-&gt; player.age_integer = 0\n}\nif (player.age_integer &gt;= 0 and player.age_integer &lt; 4) {\n-&gt; player.age_string = &quot;baby&quot;\n} else if (player.age_integer &gt;= 4 and player.age_integer &lt; 13) {\n-&gt; player.age_string = &quot;child&quot;\n} else if (player.age_integer &gt;= 13 and player.age_integer &lt; 20) {\n-&gt; player.age_string = &quot;teen&quot;\n} else if (player.age_integer &gt;= 20) {\n-&gt; player.age_string = &quot;adult&quot;\n}\n\nplayer.cash = player.cash + 50\n\nplayer.cash = player.cash - 40\n\nplayer.cash = player.cash * 3\n\nplayer.cash = player.cash / 2\n\nplayer.cash = player.cash + orc.cash\n\nif (player.cash &gt;= wooden_sword.cost) {\n-&gt; wooden_sword.parent = player\n-&gt; player.cash = player.cash - wooden_sword.cost\n-&gt; msg (&quot;You bought (and taken) the wooden sword&quot;)\n} else if (player.cash &lt; wooden_sword.cost) {\n-&gt; msg (&quot;Sorry, you don't have enough cash.&quot;)\n}\n\nweapon.offense_integer = 50\nplayer.strength_integer = 100\norc.endurance_integer = 25\nplayer.physical_damage_integer = weapon.offense_integer + weapon.offense_integer * (player.strength_integer - orc.endurance_integer) / 100\n// player.physical_damage_integer = 50 + 50 * (100 - 25) / 100\n// 50 + 50 * (3/4)\n// 50 + (25 * 3) / 2\n// 50 + (75 / 2)\n// player.physical_damage_integer = ~ 90",
      "EditableFormat": "bbcode",
      "HTML": "to do what you want involves some work (possibly) in the code, and also with lists and~or dictionaries, which, as a new person to quest (and I presume also to coding), will probably be too much for you at this point, but if you're interested:<br/><br/>add the verb, when you want it to be available during game play (and remove it again when you don't want it available):<br/><br/>1. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Category:All_Functions_and_Script_Commands\">http://quest5.net/wiki/Category:All_Fun ... t_Commands</a><!-- m --> (page 1, range: A-S)<br/>2. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/w/index.php?title=Category:All_Functions_and_Script_Commands&amp;pagefrom=Set#mw-pages\">http://quest5.net/w/index.php?title=Cat ... t#mw-pages</a><!-- m --> (page 2, range: S-Z)<br/>3. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Using_Lists\">http://quest5.net/wiki/Using_Lists</a><!-- m --><br/>4. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Displayverbs\">http://quest5.net/wiki/Displayverbs</a><!-- m --><br/>5. <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Inventoryverbs\">http://quest5.net/wiki/Inventoryverbs</a><!-- m --><br/><br/>---------<br/><br/>or, an easier method is to use a 'boolean attribute check', in your Verb's scripting:<br/><br/>'key' (Object) -&gt; Attributes (Tab) -&gt; Attributes -&gt; Add -&gt;<br/><br/>Object (Name ~ ID): key<br/>Attribute Name: activated_flag_boolean<br/>Attribute Type: boolean ( or also known as a 'flag' )<br/>Attribute Value: false<br/><br/>Verb: use key<br/><br/>if (key.activated_flag_boolean = false) {<br/>-&gt; msg (&quot;Sorry, you can't use the key yet to unlock things&quot;)<br/>} else if (key.activated_flag_boolean = true) {<br/>-&gt; // 'unlock whatever Object' Scripts<br/>}<br/><br/>some other scripting (some other Verb, a Turnscript, or a Timer, a Function, etc) in the game, where~when that will thus activate the key, via changing the Key's boolean attribute ' activated_flag_boolean ', from ' = false ', to ' = true ' :<br/><br/>// (optional) if .... {<br/>-&gt; key.activated_flag_boolean = true<br/>// (optional) }<br/><br/>and to de-activate the key again:<br/><br/>// (optional) if .... {<br/>-&gt; key.activated_flag_boolean = false<br/>// (optional) }<br/><br/>-----------<br/><br/>and, you'll need this stuff below too:<br/><br/>the two most powerful~useful Scripts (you can do like 90% of what you want with these two scripts):<br/><br/>1. run as script -&gt; add a script -&gt; scripts -&gt; if [EXPRESSION] -&gt; (see below)<br/><br/>2. run as script -&gt; add a script -&gt; variables -&gt; set a variable or attribute -&gt; (see below)<br/><br/>Object.Attribute = Value_or_Expression<br/><br/>in code (I'm lazy, so I'm doing it in code as it's quick and easy):<br/><br/>if (Object.Attribute = Value_or_Expression) {<br/>-&gt; // scripts<br/>} else if ... {<br/>-&gt; // scripts<br/>} else {<br/>-&gt; // scripts<br/>}<br/><br/>for examples:<br/><br/>if (orc.dead_boolean = false) {<br/>-&gt; // fight scripts<br/>} else if (orc.dead_boolean = true) {<br/>-&gt; msg (&quot;The orc is already dead, silly.&quot;)<br/>}<br/><br/>if (player.age_integer &lt; 0) {<br/>-&gt; player.age_integer = 0<br/>}<br/>if (player.age_integer &gt;= 0 and player.age_integer &lt; 4) {<br/>-&gt; player.age_string = &quot;baby&quot;<br/>} else if (player.age_integer &gt;= 4 and player.age_integer &lt; 13) {<br/>-&gt; player.age_string = &quot;child&quot;<br/>} else if (player.age_integer &gt;= 13 and player.age_integer &lt; 20) {<br/>-&gt; player.age_string = &quot;teen&quot;<br/>} else if (player.age_integer &gt;= 20) {<br/>-&gt; player.age_string = &quot;adult&quot;<br/>}<br/><br/>player.cash = player.cash + 50<br/><br/>player.cash = player.cash - 40<br/><br/>player.cash = player.cash * 3<br/><br/>player.cash = player.cash / 2<br/><br/>player.cash = player.cash + orc.cash<br/><br/>if (player.cash &gt;= wooden_sword.cost) {<br/>-&gt; wooden_sword.parent = player<br/>-&gt; player.cash = player.cash - wooden_sword.cost<br/>-&gt; msg (&quot;You bought (and taken) the wooden sword&quot;)<br/>} else if (player.cash &lt; wooden_sword.cost) {<br/>-&gt; msg (&quot;Sorry, you don't have enough cash.&quot;)<br/>}<br/><br/>weapon.offense_integer = 50<br/>player.strength_integer = 100<br/>orc.endurance_integer = 25<br/>player.physical_damage_integer = weapon.offense_integer + weapon.offense_integer * (player.strength_integer - orc.endurance_integer) / 100<br/>// player.physical_damage_integer = 50 + 50 * (100 - 25) / 100<br/>// 50 + 50 * (3/4)<br/>// 50 + (25 * 3) / 2<br/>// 50 + (75 / 2)<br/>// player.physical_damage_integer = ~ 90",
      "PostDate": "2014-06-07T03:44:44+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29039",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you're using &quot;use item&quot; as your command, then HK's response should suffice as a start.\n\nIf instead you're using &quot;use item on blah&quot; to specialize it for each object, then you can do something similar (by putting an &quot;active&quot; check in each object handling script) or there are ways to hook into the command earlier to put in a common up-front check, which I won't get into unless you really need it, as it would probably just confuse things. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "If you're using &quot;use item&quot; as your command, then HK's response should suffice as a start.<br/><br/>If instead you're using &quot;use item on blah&quot; to specialize it for each object, then you can do something similar (by putting an &quot;active&quot; check in each object handling script) or there are ways to hook into the command earlier to put in a common up-front check, which I won't get into unless you really need it, as it would probably just confuse things. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-06-07T08:44:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29040",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "TheMaestro, I'd like to offer some additional thoughts which take a different tack on your question. You can take these or leave these. I'm just going to throw them out in case you hadn't considered them. Consider this all my opinion - but as I'm outside you head, perhaps it can offer a different perspective.\n\nOne of the biggest &quot;immersion losses&quot; I find in IF games is arbitrarily bizarre behavior put in by the game author which doesn't fit the &quot;reality&quot; of the game world but is put there to artificially force the player along certain paths. Looked at from the author's point of view, it makes sense. From the player's point of view, it's just odd.\n\nAs an example, let's say I have an apple in my inventory. (I don't know why I always use apples in my examples.) A natural thing would be to eat the apple. Now, if I type, &quot;eat apple&quot; and the game responds, &quot;You can't eat that right now,&quot; as the player I'd be mystified. The reality of an apple is that it can be eaten. The choice by the game author to prevent me from eating the apple just then might work for what he/she wants, but it makes no sense to me as the player and only serves to reinforce that I'm not in a different world with logical rules but in a false reality with capricious behaviors. In other words, I can't use logic to work out the game since the responses are based on ulterior motives, not on the reality as I perceive it.\n\nIn a game I've been designing (and working on forever and getting nowhere), your character can sense the emotions of others. At some point, you will be made aware of this. It's part of the immersion process for the player, to gradually gain knowledge of the game world. Now let's say someone replays the game. They know about this &quot;sense&quot; ability. Does it make sense to prevent them from using it before they are told about it? Not in a logical world, no. If the ability is meant to exist as a physical reality in this world, then it exists, period. So I decided that I would not prevent a player from using it if they knew about it. In other words, I would chart out my initial path for the player, but if they had prior knowledge, well, I wasn't going to tell them that something they know exists doesn't - yet.\n\nAnother example: I have played games where the author wants people to discover items via a specific process of looking at things. There might be a desk, and then when you look at the desk you see a key on the desk. Then you can take the key and exit the room. When I played the game a second time, I right away typed &quot;take key&quot;, and it said &quot;You can't see a key.&quot; I had to actually look at the desk to enable the option to see and take the key - even though it was there all along! (In a game world reality sense.) That just seemed wrong to me. Perhaps you could not list the key in what's currently seen until someone looks at the desk. But to say it doesn't exist and then suddenly it does... irritating, arbitrary and needlessly constraining.\n\nSo what is my point? Let's say you were physically in this game world of yours, and you had this item in your hand. If you tried to use it before reading some text, would the heavens open up and a voice boom down saying, &quot;Thou cannot use that yet!&quot; That would be a very strange and unnatural occurrence. But that's basically what you're setting up in your scenario for your game.\n\nWhat is the solution? For something like the apple case I mentioned before, you could keep the blocking behavior but have the text be something like, &quot;You're not hungry yet.&quot; That at least has some logical reasoning behind it. You don't know when you will be hungry, but you figure you will be at some point, so all is ok.\n\nIn your case (and remember that I have no idea what the item is), I would recommend that the player not even be given the object until it makes sense to use it. Why should they have it if they can't use it? Perhaps put the item near where the text is. That would encourage people to read the text either before taking the item or shortly afterwards, as they would have a logical connection. And if they don't read the text? Well, that's their loss.\n\nBut (in my opinion!) the item should behave as the item behaves, without arbitrary, capricious, author-imposed sequencing strangeness that makes it inexplicitly not work at times that only make sense to the game author.\n\nAs I said up front, just some thoughts... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "TheMaestro, I'd like to offer some additional thoughts which take a different tack on your question. You can take these or leave these. I'm just going to throw them out in case you hadn't considered them. Consider this all my opinion - but as I'm outside you head, perhaps it can offer a different perspective.<br/><br/>One of the biggest &quot;immersion losses&quot; I find in IF games is arbitrarily bizarre behavior put in by the game author which doesn't fit the &quot;reality&quot; of the game world but is put there to artificially force the player along certain paths. Looked at from the author's point of view, it makes sense. From the player's point of view, it's just odd.<br/><br/>As an example, let's say I have an apple in my inventory. (I don't know why I always use apples in my examples.) A natural thing would be to eat the apple. Now, if I type, &quot;eat apple&quot; and the game responds, &quot;You can't eat that right now,&quot; as the player I'd be mystified. The reality of an apple is that it can be eaten. The choice by the game author to prevent me from eating the apple just then might work for what he/she wants, but it makes no sense to me as the player and only serves to reinforce that I'm not in a different world with logical rules but in a false reality with capricious behaviors. In other words, I can't use logic to work out the game since the responses are based on ulterior motives, not on the reality as I perceive it.<br/><br/>In a game I've been designing (and working on forever and getting nowhere), your character can sense the emotions of others. At some point, you will be made aware of this. It's part of the immersion process for the player, to gradually gain knowledge of the game world. Now let's say someone replays the game. They know about this &quot;sense&quot; ability. Does it make sense to prevent them from using it before they are told about it? Not in a logical world, no. If the ability is meant to exist as a physical reality in this world, then it exists, period. So I decided that I would not prevent a player from using it if they knew about it. In other words, I would chart out my initial path for the player, but if they had prior knowledge, well, I wasn't going to tell them that something they know exists doesn't - yet.<br/><br/>Another example: I have played games where the author wants people to discover items via a specific process of looking at things. There might be a desk, and then when you look at the desk you see a key on the desk. Then you can take the key and exit the room. When I played the game a second time, I right away typed &quot;take key&quot;, and it said &quot;You can't see a key.&quot; I had to actually look at the desk to enable the option to see and take the key - even though it was there all along! (In a game world reality sense.) That just seemed wrong to me. Perhaps you could not list the key in what's currently seen until someone looks at the desk. But to say it doesn't exist and then suddenly it does... irritating, arbitrary and needlessly constraining.<br/><br/>So what is my point? Let's say you were physically in this game world of yours, and you had this item in your hand. If you tried to use it before reading some text, would the heavens open up and a voice boom down saying, &quot;Thou cannot use that yet!&quot; That would be a very strange and unnatural occurrence. But that's basically what you're setting up in your scenario for your game.<br/><br/>What is the solution? For something like the apple case I mentioned before, you could keep the blocking behavior but have the text be something like, &quot;You're not hungry yet.&quot; That at least has some logical reasoning behind it. You don't know when you will be hungry, but you figure you will be at some point, so all is ok.<br/><br/>In your case (and remember that I have no idea what the item is), I would recommend that the player not even be given the object until it makes sense to use it. Why should they have it if they can't use it? Perhaps put the item near where the text is. That would encourage people to read the text either before taking the item or shortly afterwards, as they would have a logical connection. And if they don't read the text? Well, that's their loss.<br/><br/>But (in my opinion!) the item should behave as the item behaves, without arbitrary, capricious, author-imposed sequencing strangeness that makes it inexplicitly not work at times that only make sense to the game author.<br/><br/>As I said up front, just some thoughts... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-06-07T11:06:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29045",
      "UserId": 0,
      "Username": "TheMaestro",
      "UserAvatar": null,
      "UserGravatar": "f34dbb5ba04fb65bc84e0f9049fca0e7",
      "EditableText": "Actually, I think I get you perfectly. The idea I had was for the player to be able to detect hidden items through the use of his hat (it's that kind of game). Later on, this skill becomes vital to detect things that aren't as permanent as a set of keys on a night-stand, but at this juncture, I felt like it was important for the player to get a practical demonstration of how the item is supposed to be used since, otherwise, nobody would think that touching the brim of one's fashionable fedora could heighten the main character's sense of perception and detective skills. It was just filtered through a rather mundane puzzle, trying to find one's house keys before leaving for work.\n\nI was just sort of worried about people clicking the textbox that says &quot;hat,&quot; seeing the command to &quot;touch the brim&quot; and suddenly revealing a set of keys before they've even done any sort of walking around and figuring out that they have to be finding things, let alone that these things require the assistance of a magical old-fashioned hat. Of course, like you say, that does sort of negate the possibility that somebody playing the sequence over again knows all about the hat's powers and probably just wants to move on through the semi-tutorial.\n\nIn any case, it'd probably be easiest to just set the hat out of the immediate reach rather than use a web of flags to hide its use from the player. I really appreciate your candidness, Jay. I'll admit that perhaps I was a bit too hasty on the programming lingo. Thanks.",
      "EditableFormat": "bbcode",
      "HTML": "Actually, I think I get you perfectly. The idea I had was for the player to be able to detect hidden items through the use of his hat (it's that kind of game). Later on, this skill becomes vital to detect things that aren't as permanent as a set of keys on a night-stand, but at this juncture, I felt like it was important for the player to get a practical demonstration of how the item is supposed to be used since, otherwise, nobody would think that touching the brim of one's fashionable fedora could heighten the main character's sense of perception and detective skills. It was just filtered through a rather mundane puzzle, trying to find one's house keys before leaving for work.<br/><br/>I was just sort of worried about people clicking the textbox that says &quot;hat,&quot; seeing the command to &quot;touch the brim&quot; and suddenly revealing a set of keys before they've even done any sort of walking around and figuring out that they have to be finding things, let alone that these things require the assistance of a magical old-fashioned hat. Of course, like you say, that does sort of negate the possibility that somebody playing the sequence over again knows all about the hat's powers and probably just wants to move on through the semi-tutorial.<br/><br/>In any case, it'd probably be easiest to just set the hat out of the immediate reach rather than use a web of flags to hide its use from the player. I really appreciate your candidness, Jay. I'll admit that perhaps I was a bit too hasty on the programming lingo. Thanks.",
      "PostDate": "2014-06-07T21:06:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29046",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you'd be satisfied with just hiding the verb from the hat's menu, then there should be some way to do that. For example, if you click on the hat object in the editor and go to the Object tab, there is a checkbox there that lets you disable the automatically generated verb list. That means your &quot;touch brim&quot; verb won't show up in the verb menu. That sets an attribute on the hat object named &quot;usestandardverblist&quot;. The later, when they have gone through what you wish them to go through, you can set usestandardverblist = false, and the &quot;touch brim&quot; verb will show up in the menu.\n\nOf course, if you have other custom verbs, they will come and go as well. If that's the case, then you could leave usestandardverblist permanently true and modify the hat's &quot;inventoryverbs&quot; list on the fly to add and remove as desired. (That was the direction HK was pointing you.)\n\nThe player would still be able to type the &quot;touch brim&quot; command (however it is set up, if they can) if they know it, but you wouldn't need to come up with code to provide alternate behavior.",
      "EditableFormat": "bbcode",
      "HTML": "If you'd be satisfied with just hiding the verb from the hat's menu, then there should be some way to do that. For example, if you click on the hat object in the editor and go to the Object tab, there is a checkbox there that lets you disable the automatically generated verb list. That means your &quot;touch brim&quot; verb won't show up in the verb menu. That sets an attribute on the hat object named &quot;usestandardverblist&quot;. The later, when they have gone through what you wish them to go through, you can set usestandardverblist = false, and the &quot;touch brim&quot; verb will show up in the menu.<br/><br/>Of course, if you have other custom verbs, they will come and go as well. If that's the case, then you could leave usestandardverblist permanently true and modify the hat's &quot;inventoryverbs&quot; list on the fly to add and remove as desired. (That was the direction HK was pointing you.)<br/><br/>The player would still be able to type the &quot;touch brim&quot; command (however it is set up, if they can) if they know it, but you wouldn't need to come up with code to provide alternate behavior.",
      "PostDate": "2014-06-07T22:09:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "34828",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "That's interesting. I also have an object that you have to discover for it to appear. I didn't think of second play throughs!\n\n(I glean a lot of info by reading old threads whilst bored...)",
      "EditableFormat": "bbcode",
      "HTML": "That's interesting. I also have an object that you have to discover for it to appear. I didn't think of second play throughs!<br/><br/>(I glean a lot of info by reading old threads whilst bored...)",
      "PostDate": "2015-02-18T18:28:35+00:00",
      "LastEditDate": null
    }
  ]
}
