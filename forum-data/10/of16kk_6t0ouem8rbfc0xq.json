{
  "Topic": {
    "TopicId": "of16kk_6t0ouem8rbfc0xq",
    "ForumId": "10",
    "Title": "How to tp to any room with commands?",
    "LastUpdated": "2024-01-24T17:18:54.7281434Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d7ea9a5f-5031-4269-b23c-f3aa69f25b40",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/a59YNl7b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I just started learning how to write commands from a recent mrangel's post.\r\nIt triggered a potentially useful idea that I could play around with.\r\nExcept that it did not work.\r\n\r\nBasically, I right click command and got a command which is not inside any room.\r\nI typed tp #object#\r\nand left it nameless.\r\nIts script is move object player to expression #object#\r\nor Its script is move object player to expression result\r\n\r\nThe error is I can't see the room.\r\n\r\nThe only way I could get it to work is \r\nI typed tp room2\r\nand left it nameless.\r\nIts script is move object player to expression room2\r\n\r\nWhich is not so useful anymore, as I need to write out 100 commands\r\nfor 100 rooms, no way, I am doing that.",
      "EditableFormat": "markdown",
      "HTML": "<p>So I just started learning how to write commands from a recent mrangel's post.<br>\nIt triggered a potentially useful idea that I could play around with.<br>\nExcept that it did not work.</p>\n<p>Basically, I right click command and got a command which is not inside any room.<br>\nI typed tp #object#<br>\nand left it nameless.<br>\nIts script is move object player to expression #object#<br>\nor Its script is move object player to expression result</p>\n<p>The error is I can't see the room.</p>\n<p>The only way I could get it to work is<br>\nI typed tp room2<br>\nand left it nameless.<br>\nIts script is move object player to expression room2</p>\n<p>Which is not so useful anymore, as I need to write out 100 commands<br>\nfor 100 rooms, no way, I am doing that.</p>\n\n",
      "PostDate": "2024-01-24T17:18:54.7281434Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7910444a-d74e-4c63-9bdd-4a10a5769c8f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The `#` in the pattern tells the interpreter that the thing between them is a variable name. So the variable name you use in the script would be `object`.\r\n\r\nSo the command setup wiuld be:\r\n* Pattern: `teleport #object#` (command pattern)\r\n* Scope: `world`\r\n* Script: `MoveObject (game.pov, object)`",
      "EditableFormat": "markdown",
      "HTML": "<p>The <code>#</code> in the pattern tells the interpreter that the thing between them is a variable name. So the variable name you use in the script would be <code>object</code>.</p>\n<p>So the command setup wiuld be:</p>\n<ul>\n<li>Pattern: <code>teleport #object#</code> (command pattern)</li>\n<li>Scope: <code>world</code></li>\n<li>Script: <code>MoveObject (game.pov, object)</code></li>\n</ul>\n\n",
      "PostDate": "2024-01-25T14:26:10.7735617Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cb549011-f515-4e5c-b2ce-68bfc929e95d",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/a59YNl7b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks a lot.\r\n\r\nFor my future reference and simplified to my weak english:\r\nmrangel's answer is completely correct.\r\nPattern: teleport #object# (command pattern)\r\nScope: world\r\nScript: MoveObject (game.pov, object)\r\n\r\nThere are four categories to deal with commands, and the name is indeed not required for simple coding.\r\nThe first category is the command pattern, by typing #object#, it means to tell the computer that the variable in the script is an object.\r\n\r\nError running script: Unhandled command variable 'objec' - command variable names must begin with 'object', 'exit' or 'text'\r\nThis error test shows that in this script or even most scripts that the command variable can only be #object#, #exit#, #text#.\r\n\r\nFor tping the whole map, the scope have to be world even though the computer stated \"leave it blank for everywhere\".\r\n\r\nThe script is simply MoveObject (game.pov, object) or MoveObject (player, object)\r\nPlayer is exactly the same as game.pov, just that game.pov will never change while player can change to another character/object which is probably why game.pov is used.\r\n\r\nOne of the most important bit is to remove ## from #object#, because ## represents all possible objects. After the commands finds all possible #object# from player's typing, it will select the objects with same name from player's typing, if there is another room with the same name, the player will be asked to choose one of them, so generally, this is not important information but I say it for potential future conflicts. \r\n\r\nThe important information is that in the actual script, it has to be written as object and not #object#, because you are controlling the object directly and not from a list of possible objects.\r\n\r\nBut there is one issue which I have just resolved, it is possible to tp into undead or zombies or whatever, which is not what we wanted.\r\nThere is a fail and pass example.\r\nFail example:\r\nif (object.isroom = true) {\r\n    MoveObject (player, object)\r\n  }\r\n  else {\r\n    msg (\"You can only tp to a room.\")\r\n\r\nAlthough the fail example looks very logical, the computer cannot understands it because you need to set undead.isroom = false first, which is difficult because my rpg games can potentially have 100 enemies, so I will need to set enemy.isroom 100 times.\r\nBut if you do not care about errors, this code still works when tping, it just gives an ignorable error when tping to an undead instead of msg \"You can only tp to a room.\"\r\n\r\nSo the pass example:\r\nif (GetBoolean(object, \"isroom\")) {\r\n  MoveObject (player, object)\r\n}\r\nelse {\r\n  msg (\"You can only tp to a room.\")\r\n}\r\n\r\nSo, somehow this works, but I do not understand flags or why the computer prefers boolean.\r\nBut since it works, who cares :P\r\n\r\nAfter further investigation, the following also work.\r\nif (HasAttribute(object, \"isroom\")) {\r\n  MoveObject (player, object)\r\n}\r\nelse {\r\n  msg (\"You can only tp to a room.\")\r\n}\r\n\r\nFor future reference, the fail case 1 shows this:\r\nError running script: Error compiling expression 'object.isroom = true': CompareElement: Operation 'Equal' is not defined for types 'Object' and 'Boolean'\r\n\r\nPossibly this means the computer do not like to combine = and boolean together.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks a lot.</p>\n<p>For my future reference and simplified to my weak english:<br>\nmrangel's answer is completely correct.<br>\nPattern: teleport #object# (command pattern)<br>\nScope: world<br>\nScript: MoveObject (game.pov, object)</p>\n<p>There are four categories to deal with commands, and the name is indeed not required for simple coding.<br>\nThe first category is the command pattern, by typing #object#, it means to tell the computer that the variable in the script is an object.</p>\n<p>Error running script: Unhandled command variable 'objec' - command variable names must begin with 'object', 'exit' or 'text'<br>\nThis error test shows that in this script or even most scripts that the command variable can only be #object#, #exit#, #text#.</p>\n<p>For tping the whole map, the scope have to be world even though the computer stated \"leave it blank for everywhere\".</p>\n<p>The script is simply MoveObject (game.pov, object) or MoveObject (player, object)<br>\nPlayer is exactly the same as game.pov, just that game.pov will never change while player can change to another character/object which is probably why game.pov is used.</p>\n<p>One of the most important bit is to remove ## from #object#, because ## represents all possible objects. After the commands finds all possible #object# from player's typing, it will select the objects with same name from player's typing, if there is another room with the same name, the player will be asked to choose one of them, so generally, this is not important information but I say it for potential future conflicts.</p>\n<p>The important information is that in the actual script, it has to be written as object and not #object#, because you are controlling the object directly and not from a list of possible objects.</p>\n<p>But there is one issue which I have just resolved, it is possible to tp into undead or zombies or whatever, which is not what we wanted.<br>\nThere is a fail and pass example.<br>\nFail example:<br>\nif (object.isroom = true) {<br>\nMoveObject (player, object)<br>\n}<br>\nelse {<br>\nmsg (\"You can only tp to a room.\")</p>\n<p>Although the fail example looks very logical, the computer cannot understands it because you need to set undead.isroom = false first, which is difficult because my rpg games can potentially have 100 enemies, so I will need to set enemy.isroom 100 times.<br>\nBut if you do not care about errors, this code still works when tping, it just gives an ignorable error when tping to an undead instead of msg \"You can only tp to a room.\"</p>\n<p>So the pass example:<br>\nif (GetBoolean(object, \"isroom\")) {<br>\nMoveObject (player, object)<br>\n}<br>\nelse {<br>\nmsg (\"You can only tp to a room.\")<br>\n}</p>\n<p>So, somehow this works, but I do not understand flags or why the computer prefers boolean.<br>\nBut since it works, who cares :P</p>\n<p>After further investigation, the following also work.<br>\nif (HasAttribute(object, \"isroom\")) {<br>\nMoveObject (player, object)<br>\n}<br>\nelse {<br>\nmsg (\"You can only tp to a room.\")<br>\n}</p>\n<p>For future reference, the fail case 1 shows this:<br>\nError running script: Error compiling expression 'object.isroom = true': CompareElement: Operation 'Equal' is not defined for types 'Object' and 'Boolean'</p>\n<p>Possibly this means the computer do not like to combine = and boolean together.</p>\n\n",
      "PostDate": "2024-01-25T15:27:53.5609479Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "37809f00-2426-4cda-beb0-68b23c20fb8d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The reason you get \"Operation 'Equal' is not defined for types 'Object' and 'Boolean'\" is because the `=` comparison only works for objects that have the same type.\r\n\r\nIf an object doesn't have an `isroom` flag, trying to access that variable will give you the special value `null`, which basically means \"no such attribute\".\r\n\r\nThe type of `null` is \"object\". The type of `true` is \"boolean\". So `=` can't compare them.\r\n\r\nThe `GetBoolean` function makes this easier - it treats non-boolean values as `false`.\r\n\r\nScope is a bit more flexible than it used to be. Its values used to be \"inventory\" (objects the player is holding), \"notheld\" (objects in the same room as the player), or \"all\" (the default; all objects the player can see). Now, you can also make it the name of a room or an objectlist attribute; or \"world\" to include objects the player can't see.\r\n\r\nIf you want to make choosing rooms easier, you could add this line to your start script:\r\n```\r\ngame.pov.teleport_destinations = AllRooms()\r\n```\r\nand then you can set a command's scope to `teleport_destinations`. That means that if the player types the start of a room name, the list of options to choose from will only include rooms. You can add and remove items from the list too..\r\n\r\nHope that makes sense.",
      "EditableFormat": "markdown",
      "HTML": "<p>The reason you get \"Operation 'Equal' is not defined for types 'Object' and 'Boolean'\" is because the <code>=</code> comparison only works for objects that have the same type.</p>\n<p>If an object doesn't have an <code>isroom</code> flag, trying to access that variable will give you the special value <code>null</code>, which basically means \"no such attribute\".</p>\n<p>The type of <code>null</code> is \"object\". The type of <code>true</code> is \"boolean\". So <code>=</code> can't compare them.</p>\n<p>The <code>GetBoolean</code> function makes this easier - it treats non-boolean values as <code>false</code>.</p>\n<p>Scope is a bit more flexible than it used to be. Its values used to be \"inventory\" (objects the player is holding), \"notheld\" (objects in the same room as the player), or \"all\" (the default; all objects the player can see). Now, you can also make it the name of a room or an objectlist attribute; or \"world\" to include objects the player can't see.</p>\n<p>If you want to make choosing rooms easier, you could add this line to your start script:</p>\n<pre><code>game.pov.teleport_destinations = AllRooms()\n</code></pre>\n<p>and then you can set a command's scope to <code>teleport_destinations</code>. That means that if the player types the start of a room name, the list of options to choose from will only include rooms. You can add and remove items from the list too..</p>\n<p>Hope that makes sense.</p>\n\n",
      "PostDate": "2024-01-25T20:08:37.5300159Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2b96ed78-1c6b-4a74-a382-5b6918a68282",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/a59YNl7b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, it have been a great help.\r\nI can make harry portal now :3\r\n\r\nI guess if(= true)-else loop gives null on else, which is not seen or displayed, creating a deep rabbit hole mystery.\r\nNull is more like an object attribute while true is more like a boolean which is probably why I could not understand flags, but now I know that when writing a script for a flag, it is probably best to avoid if(=true)-else loop, and use scripts like if (GetBoolean) else, if (HasAttribute) else.\r\n\r\nI do not like the different values of scopes, but it is probably designed for a more realistic and logical game unlike mine. So, being only able to target inventory scope makes more sense if you are trying to eat something, you cannot possibly eat a hamburger from 100 rooms away.\r\n\r\nThat teleport_destinations script is very useful, it means even without typing fully the target name, the game will automatically ask you a list of options that fits best. It is useful as it can be used as a shortcut typing or to let player understand what he typed wrong.\r\n\r\nThe tp idea that I have stems from ragnarok online so it goes a bit further than just tping like a harry portal rpg game.\r\nThere can be 4 different ways to tp.\r\n1. Player tps itself to a target location, which is what we have been talking.\r\nThis is not just useful in an adventure, this is also useful for admins trying to shortcut their way to test and fix some bugs.\r\n\r\n2. Player tps itself randomly in a map, this can be done by naming your dungeon room with all the same names but with a number behind like it, raptorjungle1 to raptorjungle20. When the player random tp, make random number script to generate 1 to 20 and add it the main tp script as discussed above, viola, this is done.\r\n\r\n3. Player rotates tp itself to a significant location, so lets say you have a large map like 100 rooms, but actually your game is about fishing only and there are 4 fishing spots. It is possible to create a rotatetp script, set game.fishingspot = 0, whenever the player press the button, the script is triggered and +1 to game.fishingspot. After the addition, tp the player to 1 of the 4 fishing spot which is equals to your game.fishingspot. At game.fishingspot =5, simply reset it to game.fishingspot=1.\r\n\r\n4. Player can tp to an area that he had setups a destination before like the portal 1 and 2 video game. This is simply done by giving the player a portal a and portal b objects, when the player clicks on either, use a script to teleport the player to the other portal object by using moveto portal.parent.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, it have been a great help.<br>\nI can make harry portal now :3</p>\n<p>I guess if(= true)-else loop gives null on else, which is not seen or displayed, creating a deep rabbit hole mystery.<br>\nNull is more like an object attribute while true is more like a boolean which is probably why I could not understand flags, but now I know that when writing a script for a flag, it is probably best to avoid if(=true)-else loop, and use scripts like if (GetBoolean) else, if (HasAttribute) else.</p>\n<p>I do not like the different values of scopes, but it is probably designed for a more realistic and logical game unlike mine. So, being only able to target inventory scope makes more sense if you are trying to eat something, you cannot possibly eat a hamburger from 100 rooms away.</p>\n<p>That teleport_destinations script is very useful, it means even without typing fully the target name, the game will automatically ask you a list of options that fits best. It is useful as it can be used as a shortcut typing or to let player understand what he typed wrong.</p>\n<p>The tp idea that I have stems from ragnarok online so it goes a bit further than just tping like a harry portal rpg game.<br>\nThere can be 4 different ways to tp.</p>\n<ol>\n<li>\n<p>Player tps itself to a target location, which is what we have been talking.<br>\nThis is not just useful in an adventure, this is also useful for admins trying to shortcut their way to test and fix some bugs.</p>\n</li>\n<li>\n<p>Player tps itself randomly in a map, this can be done by naming your dungeon room with all the same names but with a number behind like it, raptorjungle1 to raptorjungle20. When the player random tp, make random number script to generate 1 to 20 and add it the main tp script as discussed above, viola, this is done.</p>\n</li>\n<li>\n<p>Player rotates tp itself to a significant location, so lets say you have a large map like 100 rooms, but actually your game is about fishing only and there are 4 fishing spots. It is possible to create a rotatetp script, set game.fishingspot = 0, whenever the player press the button, the script is triggered and +1 to game.fishingspot. After the addition, tp the player to 1 of the 4 fishing spot which is equals to your game.fishingspot. At game.fishingspot =5, simply reset it to game.fishingspot=1.</p>\n</li>\n<li>\n<p>Player can tp to an area that he had setups a destination before like the portal 1 and 2 video game. This is simply done by giving the player a portal a and portal b objects, when the player clicks on either, use a script to teleport the player to the other portal object by using moveto portal.parent.</p>\n</li>\n</ol>\n\n",
      "PostDate": "2024-01-26T03:02:03.2707126Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
