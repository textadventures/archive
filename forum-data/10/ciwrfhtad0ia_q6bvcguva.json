{
  "Topic": {
    "TopicId": "ciwrfhtad0ia_q6bvcguva",
    "ForumId": "10",
    "Title": "Tying pretend physical strings together and getting different results.",
    "LastUpdated": "2018-09-29T07:59:43.3759716Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "724ad266-383b-4993-8dcc-bba96e1d63ab",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have 7 wires.\r\n\r\n* red wire\r\n* orange wire\r\n* yellow wire\r\n* green wire\r\n* blue wire\r\n* indigo wire\r\n* violet wire\r\n\r\nI want the player to be able to tie them all together (that's the easy part).\r\nI also want the player to be able to tie the red wire to the indigo wire. Or the green wire to the blue wire and the orange wire.\r\nSee where I'm going with this?\r\n\r\nIf the player ties the red and orange wire together he/she would end up with one wire that's red AND orange (and twice as long)\r\nand so on....\r\n\r\nThere's quite a lot(!) of different possibilities and  I can't figure out how to script it.\r\nAny takers?",
      "EditableFormat": "markdown",
      "HTML": "<p>I have 7 wires.</p>\n<ul>\n<li>red wire</li>\n<li>orange wire</li>\n<li>yellow wire</li>\n<li>green wire</li>\n<li>blue wire</li>\n<li>indigo wire</li>\n<li>violet wire</li>\n</ul>\n<p>I want the player to be able to tie them all together (that's the easy part).<br>\nI also want the player to be able to tie the red wire to the indigo wire. Or the green wire to the blue wire and the orange wire.<br>\nSee where I'm going with this?</p>\n<p>If the player ties the red and orange wire together he/she would end up with one wire that's red AND orange (and twice as long)<br>\nand so on....</p>\n<p>There's quite a lot(!) of different possibilities and  I can't figure out how to script it.<br>\nAny takers?</p>\n\n",
      "PostDate": "2018-09-29T07:59:43.3759716Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "db333b38-7958-4140-9a5e-e8e8bfc6a797",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n----------------\r\n\r\nthis will create/format a string, like so (for examples):\r\n\r\nred wire\r\nred-blue-yellow wire\r\nred-blue-yellow-green-purple-orange wire\r\n\r\n(it can handle/do all/any combinations -- if not, let me know, as I thus made mistakes in the code and need to fix them up)\r\n\r\n(total combinations for your 7 items/colors/values = 7 x 6 x 5 x 4 x 3 x 2 = 5040 --- if I did the math/calculation right, lol)\r\n\r\n---------------------------\r\n\r\nthis code can NOT handle your wire color values having spaces in them (if you add more, or change the/your, wire color values: they can NOT have spaces in them)\r\n\r\n(I can adjust my code, if you want/need to be able to put spaces into your wire color values, it'll just take a little bit more added code and only very trivial work on my part)\r\n\r\n----------------------\r\n\r\nthe 'done' Value in the wire color stringlist attribute is required for the code to work, so you can't take it out or nor re-name it (well, you can re-name it if you want to, actually: if you need help on what you need to change in the code, then just ask me for help) \r\n\r\n-----------------------\r\n\r\nto use/implement my code within your game (within some Element that does scripting: Verb, Command, Object's Script Attribute, Turnscript, Timer, Function):\r\n\r\n```\r\ninvoke (wire_object.wire_script_attribute)\r\n```\r\n\r\n--------------------\r\n\r\n```\r\n<library>\r\n\r\n  <delegate name=\"wire_delegate\" type=\"string\" />\r\n\r\n  <object name=\"wire_object\">\r\n\r\n    <attr name=\"previous_wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <attr name=\"wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <wire_color_stringlist_attribute type=\"stringlist\">\r\n      <value>done</value>\r\n      <value>red</value>\r\n      <value>orange</value>\r\n      <value>yellow</value>\r\n      <value>green</value>\r\n      <value>blue</value>\r\n      <value>indigo</value>\r\n      <value>violet</value>\r\n    </wire_color_stringlist_attribute>\r\n\r\n    <attr name=\"wire_script_attribute\">\r\n      this.previous_wire_string_attribute = this.wire_string_attribute\r\n      this.wire_string_attribute = \"\"\r\n      this.wire_buffer_stringlist_attribute = NewStringList ()\r\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\r\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\r\n      }\r\n      on ready {\r\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n        // -------------------------\r\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\r\n        msg (\"You created a \" + string_variable)\r\n        msg (\"You created a \" + wire_object.wire_string_attribute)\r\n        // --------------------------\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\">\r\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\r\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n        return (string_variable)\r\n      } else {\r\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\r\n          this = wire_object\r\n          if (result = \"done\") {\r\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n            return (string_variable)\r\n          } else {\r\n            list remove (this.wire_buffer_stringlist_attribute, result)\r\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n          } \r\n        }\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\">\r\n      string_variable = this.wire_string_attribute\r\n      RTrim (string_variable) // this might return the trimmed string, so: string_variable = RTrim (string_variable)\r\n      string_variable = Replace (string_variable, \" \", \"-\")\r\n      string_variable = string_variable + \" wire\"\r\n      this.wire_string_attribute = string_variable\r\n      return (string_variable)\r\n    </attr>\r\n\r\n  </object>\r\n\r\n</library>\r\n```\r\n\r\n----------------\r\n\r\nI just wrote/typed this code as a post here... so let me know if it doesn't work... lol\r\n\r\n(I made this as a library file, if you need help on how to add it to (use it with) your game, and/or also need more help on how to implement/use my code within your game, let me know, and I'll help you)\r\n\r\n----------\r\n\r\nP.S.\r\n\r\nif you need to also work with a length amount of your created colored wire, my code can easily accomadate (can't spell, lol) it/that, so just let me know, and I'll adjust my code for being able to give your created colored wire strings a length amount as well.",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>this will create/format a string, like so (for examples):</p>\n<p>red wire<br>\nred-blue-yellow wire<br>\nred-blue-yellow-green-purple-orange wire</p>\n<p>(it can handle/do all/any combinations -- if not, let me know, as I thus made mistakes in the code and need to fix them up)</p>\n<p>(total combinations for your 7 items/colors/values = 7 x 6 x 5 x 4 x 3 x 2 = 5040 --- if I did the math/calculation right, lol)</p>\n<hr>\n<p>this code can NOT handle your wire color values having spaces in them (if you add more, or change the/your, wire color values: they can NOT have spaces in them)</p>\n<p>(I can adjust my code, if you want/need to be able to put spaces into your wire color values, it'll just take a little bit more added code and only very trivial work on my part)</p>\n<hr>\n<p>the 'done' Value in the wire color stringlist attribute is required for the code to work, so you can't take it out or nor re-name it (well, you can re-name it if you want to, actually: if you need help on what you need to change in the code, then just ask me for help)</p>\n<hr>\n<p>to use/implement my code within your game (within some Element that does scripting: Verb, Command, Object's Script Attribute, Turnscript, Timer, Function):</p>\n<pre><code>invoke (wire_object.wire_script_attribute)\n</code></pre>\n<hr>\n<pre><code>&lt;library&gt;\n\n  &lt;delegate name=\"wire_delegate\" type=\"string\" /&gt;\n\n  &lt;object name=\"wire_object\"&gt;\n\n    &lt;attr name=\"previous_wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;wire_color_stringlist_attribute type=\"stringlist\"&gt;\n      &lt;value&gt;done&lt;/value&gt;\n      &lt;value&gt;red&lt;/value&gt;\n      &lt;value&gt;orange&lt;/value&gt;\n      &lt;value&gt;yellow&lt;/value&gt;\n      &lt;value&gt;green&lt;/value&gt;\n      &lt;value&gt;blue&lt;/value&gt;\n      &lt;value&gt;indigo&lt;/value&gt;\n      &lt;value&gt;violet&lt;/value&gt;\n    &lt;/wire_color_stringlist_attribute&gt;\n\n    &lt;attr name=\"wire_script_attribute\"&gt;\n      this.previous_wire_string_attribute = this.wire_string_attribute\n      this.wire_string_attribute = \"\"\n      this.wire_buffer_stringlist_attribute = NewStringList ()\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\n      }\n      on ready {\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\n        // -------------------------\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\n        msg (\"You created a \" + string_variable)\n        msg (\"You created a \" + wire_object.wire_string_attribute)\n        // --------------------------\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\"&gt;\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n        return (string_variable)\n      } else {\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\n          this = wire_object\n          if (result = \"done\") {\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n            return (string_variable)\n          } else {\n            list remove (this.wire_buffer_stringlist_attribute, result)\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\n          } \n        }\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\"&gt;\n      string_variable = this.wire_string_attribute\n      RTrim (string_variable) // this might return the trimmed string, so: string_variable = RTrim (string_variable)\n      string_variable = Replace (string_variable, \" \", \"-\")\n      string_variable = string_variable + \" wire\"\n      this.wire_string_attribute = string_variable\n      return (string_variable)\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/library&gt;\n</code></pre>\n<hr>\n<p>I just wrote/typed this code as a post here... so let me know if it doesn't work... lol</p>\n<p>(I made this as a library file, if you need help on how to add it to (use it with) your game, and/or also need more help on how to implement/use my code within your game, let me know, and I'll help you)</p>\n<hr>\n<p>P.S.</p>\n<p>if you need to also work with a length amount of your created colored wire, my code can easily accomadate (can't spell, lol) it/that, so just let me know, and I'll adjust my code for being able to give your created colored wire strings a length amount as well.</p>\n\n",
      "PostDate": "2018-09-29T11:27:21.8122765Z",
      "LastEditDate": "2018-09-29T13:33:24.3657436Z",
      "link": null
    },
    {
      "PostId": "af2034c6-727b-493d-91a1-45a6a106632f",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sheez Hege, that's beautiful! Thank you for taking the time to help me with this!\r\n\r\nI've added the Lib to the game but I'm not sure what to do with this: ```invoke (wire_object.wire_script_attribute)```\r\nIs that supposed to go in a \"tie strings together\" type script?\r\n\r\nEdit: Ah, and I get this when running the game:\r\n> Failed to load game.\r\nThe following errors occurred:\r\nError: Error adding script attribute 'script' to element 'k7': Function not found: 'RTrim'\r\n\r\nI still run 5.7.2 of the desktop version.  Might that have something to do with it? =)",
      "EditableFormat": "markdown",
      "HTML": "<p>Sheez Hege, that's beautiful! Thank you for taking the time to help me with this!</p>\n<p>I've added the Lib to the game but I'm not sure what to do with this: <code>invoke (wire_object.wire_script_attribute)</code><br>\nIs that supposed to go in a \"tie strings together\" type script?</p>\n<p>Edit: Ah, and I get this when running the game:</p>\n<blockquote>\n<p>Failed to load game.<br>\nThe following errors occurred:<br>\nError: Error adding script attribute 'script' to element 'k7': Function not found: 'RTrim'</p>\n</blockquote>\n<p>I still run 5.7.2 of the desktop version.  Might that have something to do with it? =)</p>\n\n",
      "PostDate": "2018-09-29T12:37:24.1452556Z",
      "LastEditDate": "2018-09-29T12:42:50.6224262Z",
      "link": null
    },
    {
      "PostId": "4c00be56-20e0-4809-80cb-e280a9e7ab5e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "that hopefully should be all you need... ya, you'd put it into whataver code you're using...\r\n\r\nsome quick (multiple -- you wouldn't be using them all together as like I did below) examples (just using a Script Attribute, Command, and Function as some of the multiple types of examples):\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <include ref=\"wire_library.aslx\" />\r\n\r\n  <game name=\"example\">\r\n\r\n    <attr name=\"start\" type=\"script\">\r\n      invoke (wire_object.wire_script_attribute)\r\n      // or:\r\n      wire_function\r\n    </attr>\r\n\r\n  </game>\r\n\r\n  <function name=\"wire_function\">\r\n    invoke (wire_object.wire_script_attribute)\r\n  </function>\r\n\r\n  <command name=\"wire_command\">\r\n    <pattern>wire;test;w;t</pattern>\r\n    <script>\r\n     invoke (wire_object.wire_script_attribute)\r\n     // or:\r\n     wire_function\r\n    </script>\r\n  </command>\r\n\r\n</asl>\r\n```\r\n--------------\r\n\r\nP.S.\r\n\r\ndon't thank me yet... not until my code is actually fully working and working correctly, lol\r\n\r\nP.S.S.\r\n\r\nthis was actually fun code to do for me, as I needed more practice with using recursion, lol. And, also, the working on the String Manipulation/Formatting  was pretty fun too.",
      "EditableFormat": "markdown",
      "HTML": "<p>that hopefully should be all you need... ya, you'd put it into whataver code you're using...</p>\n<p>some quick (multiple -- you wouldn't be using them all together as like I did below) examples (just using a Script Attribute, Command, and Function as some of the multiple types of examples):</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;include ref=\"wire_library.aslx\" /&gt;\n\n  &lt;game name=\"example\"&gt;\n\n    &lt;attr name=\"start\" type=\"script\"&gt;\n      invoke (wire_object.wire_script_attribute)\n      // or:\n      wire_function\n    &lt;/attr&gt;\n\n  &lt;/game&gt;\n\n  &lt;function name=\"wire_function\"&gt;\n    invoke (wire_object.wire_script_attribute)\n  &lt;/function&gt;\n\n  &lt;command name=\"wire_command\"&gt;\n    &lt;pattern&gt;wire;test;w;t&lt;/pattern&gt;\n    &lt;script&gt;\n     invoke (wire_object.wire_script_attribute)\n     // or:\n     wire_function\n    &lt;/script&gt;\n  &lt;/command&gt;\n\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>P.S.</p>\n<p>don't thank me yet... not until my code is actually fully working and working correctly, lol</p>\n<p>P.S.S.</p>\n<p>this was actually fun code to do for me, as I needed more practice with using recursion, lol. And, also, the working on the String Manipulation/Formatting  was pretty fun too.</p>\n\n",
      "PostDate": "2018-09-29T12:44:25.3170932Z",
      "LastEditDate": "2018-09-29T13:13:03.6017697Z",
      "link": null
    },
    {
      "PostId": "f01912a2-ff42-4675-9bff-4a4ebab02e81",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "hmm... 'RTrim' has been around a  long time... maybe the new version changed it... or... I got some mistake in my code...",
      "EditableFormat": "markdown",
      "HTML": "<p>hmm... 'RTrim' has been around a  long time... maybe the new version changed it... or... I got some mistake in my code...</p>\n\n",
      "PostDate": "2018-09-29T12:46:18.5816409Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9a025ec7-04b4-44f5-aa7e-efba6ade0b4e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "maybe... RTrim... returns the trimmed string...\r\n\r\n(also, 'Replace' does return a string... spotted another mistake in my code... lol)\r\n\r\ntry this code:\r\n\r\n```\r\n<library>\r\n\r\n  <delegate name=\"wire_delegate\" type=\"string\" />\r\n\r\n  <object name=\"wire_object\">\r\n\r\n    <attr name=\"previous_wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <attr name=\"wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <wire_color_stringlist_attribute type=\"stringlist\">\r\n      <value>done</value>\r\n      <value>red</value>\r\n      <value>orange</value>\r\n      <value>yellow</value>\r\n      <value>green</value>\r\n      <value>blue</value>\r\n      <value>indigo</value>\r\n      <value>violet</value>\r\n    </wire_color_stringlist_attribute>\r\n\r\n    <attr name=\"wire_script_attribute\">\r\n      this.previous_wire_string_attribute = this.wire_string_attribute\r\n      this.wire_string_attribute = \"\"\r\n      this.wire_buffer_stringlist_attribute = NewStringList ()\r\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\r\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\r\n      }\r\n      on ready {\r\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n        // -------------------------\r\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\r\n        msg (\"You created a \" + string_variable)\r\n        msg (\"You created a \" + wire_object.wire_string_attribute)\r\n        // --------------------------\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\">\r\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\r\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n        return (string_variable)\r\n      } else {\r\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\r\n          this = wire_object\r\n          if (result = \"done\") {\r\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n            return (string_variable)\r\n          } else {\r\n            list remove (this.wire_buffer_stringlist_attribute, result)\r\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n          } \r\n        }\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\">\r\n      string_variable = this.wire_string_attribute\r\n      string_variable = RTrim (string_variable)\r\n      string_variable = Replace (string_variable, \" \", \"-\")\r\n      string_variable = string_variable + \" wire\"\r\n      this.wire_string_attribute = string_variable\r\n      return (string_variable)\r\n    </attr>\r\n\r\n  </object>\r\n\r\n</library>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>maybe... RTrim... returns the trimmed string...</p>\n<p>(also, 'Replace' does return a string... spotted another mistake in my code... lol)</p>\n<p>try this code:</p>\n<pre><code>&lt;library&gt;\n\n  &lt;delegate name=\"wire_delegate\" type=\"string\" /&gt;\n\n  &lt;object name=\"wire_object\"&gt;\n\n    &lt;attr name=\"previous_wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;wire_color_stringlist_attribute type=\"stringlist\"&gt;\n      &lt;value&gt;done&lt;/value&gt;\n      &lt;value&gt;red&lt;/value&gt;\n      &lt;value&gt;orange&lt;/value&gt;\n      &lt;value&gt;yellow&lt;/value&gt;\n      &lt;value&gt;green&lt;/value&gt;\n      &lt;value&gt;blue&lt;/value&gt;\n      &lt;value&gt;indigo&lt;/value&gt;\n      &lt;value&gt;violet&lt;/value&gt;\n    &lt;/wire_color_stringlist_attribute&gt;\n\n    &lt;attr name=\"wire_script_attribute\"&gt;\n      this.previous_wire_string_attribute = this.wire_string_attribute\n      this.wire_string_attribute = \"\"\n      this.wire_buffer_stringlist_attribute = NewStringList ()\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\n      }\n      on ready {\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\n        // -------------------------\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\n        msg (\"You created a \" + string_variable)\n        msg (\"You created a \" + wire_object.wire_string_attribute)\n        // --------------------------\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\"&gt;\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n        return (string_variable)\n      } else {\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\n          this = wire_object\n          if (result = \"done\") {\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n            return (string_variable)\n          } else {\n            list remove (this.wire_buffer_stringlist_attribute, result)\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\n          } \n        }\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\"&gt;\n      string_variable = this.wire_string_attribute\n      string_variable = RTrim (string_variable)\n      string_variable = Replace (string_variable, \" \", \"-\")\n      string_variable = string_variable + \" wire\"\n      this.wire_string_attribute = string_variable\n      return (string_variable)\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/library&gt;\n</code></pre>\n\n",
      "PostDate": "2018-09-29T12:51:05.6005479Z",
      "LastEditDate": "2018-09-29T13:33:55.1306458Z",
      "link": null
    },
    {
      "PostId": "c12f2175-5e52-4967-bace-a0c682d3b1dc",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oops... I just spotted that I used 'this' within the 'show menu' Function... whoopsy...\r\n\r\nnew fixed code:\r\n\r\n```\r\n<library>\r\n\r\n  <delegate name=\"wire_delegate\" type=\"string\" />\r\n\r\n  <object name=\"wire_object\">\r\n\r\n    <attr name=\"previous_wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <attr name=\"wire_string_attribute\" type=\"string\">unknown</attr>\r\n\r\n    <wire_color_stringlist_attribute type=\"stringlist\">\r\n      <value>done</value>\r\n      <value>red</value>\r\n      <value>orange</value>\r\n      <value>yellow</value>\r\n      <value>green</value>\r\n      <value>blue</value>\r\n      <value>indigo</value>\r\n      <value>violet</value>\r\n    </wire_color_stringlist_attribute>\r\n\r\n    <attr name=\"wire_script_attribute\">\r\n      this.previous_wire_string_attribute = this.wire_string_attribute\r\n      this.wire_string_attribute = \"\"\r\n      this.wire_buffer_stringlist_attribute = NewStringList ()\r\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\r\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\r\n      }\r\n      on ready {\r\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n        // -------------------------\r\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\r\n        msg (\"You created a \" + string_variable)\r\n        msg (\"You created a \" + wire_object.wire_string_attribute)\r\n        // --------------------------\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\">\r\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\r\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n        return (string_variable)\r\n      } else {\r\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\r\n          this = wire_object\r\n          if (result = \"done\") {\r\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\r\n            return (string_variable)\r\n          } else {\r\n            list remove (this.wire_buffer_stringlist_attribute, result)\r\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\r\n          } \r\n        }\r\n      }\r\n    </attr>\r\n\r\n    <attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\">\r\n      string_variable = this.wire_string_attribute\r\n      string_variable = RTrim (string_variable)\r\n      string_variable = Replace (string_variable, \" \", \"-\")\r\n      string_variable = string_variable + \" wire\"\r\n      this.wire_string_attribute = string_variable\r\n      return (string_variable)\r\n    </attr>\r\n\r\n  </object>\r\n\r\n</library>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oops... I just spotted that I used 'this' within the 'show menu' Function... whoopsy...</p>\n<p>new fixed code:</p>\n<pre><code>&lt;library&gt;\n\n  &lt;delegate name=\"wire_delegate\" type=\"string\" /&gt;\n\n  &lt;object name=\"wire_object\"&gt;\n\n    &lt;attr name=\"previous_wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_attribute\" type=\"string\"&gt;unknown&lt;/attr&gt;\n\n    &lt;wire_color_stringlist_attribute type=\"stringlist\"&gt;\n      &lt;value&gt;done&lt;/value&gt;\n      &lt;value&gt;red&lt;/value&gt;\n      &lt;value&gt;orange&lt;/value&gt;\n      &lt;value&gt;yellow&lt;/value&gt;\n      &lt;value&gt;green&lt;/value&gt;\n      &lt;value&gt;blue&lt;/value&gt;\n      &lt;value&gt;indigo&lt;/value&gt;\n      &lt;value&gt;violet&lt;/value&gt;\n    &lt;/wire_color_stringlist_attribute&gt;\n\n    &lt;attr name=\"wire_script_attribute\"&gt;\n      this.previous_wire_string_attribute = this.wire_string_attribute\n      this.wire_string_attribute = \"\"\n      this.wire_buffer_stringlist_attribute = NewStringList ()\n      foreach (string_variable, this.wire_color_stringlist_attribute) {\n        list add (this.wire_buffer_stringlist_attribute, string_variable)\n      }\n      on ready {\n        string_variable = RunDelegateFunction (this, \"wire_handling_script_attribute\")\n        // -------------------------\n        // (you can change below for how/what you want to do with the colored wire string), the below example, is just a quick display code line of the colored wire string:\n        msg (\"You created a \" + string_variable)\n        msg (\"You created a \" + wire_object.wire_string_attribute)\n        // --------------------------\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_handling_script_attribute\" type=\"wire_delegate\"&gt;\n      if (ListCount (this.wire_buffer_stringlist_attribute) = 1) {\n        string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n        return (string_variable)\n      } else {\n        show menu (\"Select choice\", this.wire_buffer_stringlist_attribute, false) { // or if you want random selection: result = PickOneString (this.wire_buffer_stringlist_attribute)\n          this = wire_object\n          if (result = \"done\") {\n            string_variable = RunDelegateFunction (this, \"wire_string_formatting_script_attribute\")\n            return (string_variable)\n          } else {\n            list remove (this.wire_buffer_stringlist_attribute, result)\n            this.wire_string_attribute = this.wire_string_attribute + result + \" \" + RunDelegateFunction (this, \"wire_handling_script_attribute\")\n          } \n        }\n      }\n    &lt;/attr&gt;\n\n    &lt;attr name=\"wire_string_formatting_script_attribute\" type=\"wire_delegate\"&gt;\n      string_variable = this.wire_string_attribute\n      string_variable = RTrim (string_variable)\n      string_variable = Replace (string_variable, \" \", \"-\")\n      string_variable = string_variable + \" wire\"\n      this.wire_string_attribute = string_variable\n      return (string_variable)\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/library&gt;\n</code></pre>\n\n",
      "PostDate": "2018-09-29T13:32:44.5197282Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28cbaec5-bf17-40e0-9210-753abb5081cd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This seems a horribly complex way to approach a simple problem. Is there a reason for using delegates? Is there a reason the wires aren't objects?",
      "EditableFormat": "markdown",
      "HTML": "<p>This seems a horribly complex way to approach a simple problem. Is there a reason for using delegates? Is there a reason the wires aren't objects?</p>\n\n",
      "PostDate": "2018-09-29T16:17:10.8577096Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d7f87dcd-3074-4fd2-9288-b189f4806901",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mra To me all ways (in this matter) feels horribly complex :)\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>@mra To me all ways (in this matter) feels horribly complex :)</p>\n\n",
      "PostDate": "2018-09-29T16:39:10.5947926Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "512ef7a3-7d7f-49d8-bef2-f0435c7c45b0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "main operations:\r\n\r\n'wire_script_attribute':\r\n\r\n1. store the previous colored wire string (just in-case you'd have a need for it) // if you have a need to store multiple previous colored wire strings, that can be easily coded in (we just need to use a String List Attribute, instead of a String Attribute) \r\n2. copy wire color list (as we'll remove the wire color choices from this copy list, so we don't mess with the list of wire colors)\r\n\r\n'wire_handling_script_attribute':\r\n\r\n3. string concatenation + looping/tail-recursion + wire color selection (via menu selection using our copy list), to build our colored wire string. (And, as we select wire colors, remove those wire colors from our copy list)\r\n\r\n'wire_string_formatting_script_attribute':\r\n\r\n4. if/when you choose 'done' from the menu selection or if you selected all of the wire colors (no more wire colors to choose from: the copy list only has 1 item, the 'done' choice, remaining) from #3 operation above: finish formatting the colored wire string for use",
      "EditableFormat": "markdown",
      "HTML": "<p>main operations:</p>\n<p>'wire_script_attribute':</p>\n<ol>\n<li>store the previous colored wire string (just in-case you'd have a need for it) // if you have a need to store multiple previous colored wire strings, that can be easily coded in (we just need to use a String List Attribute, instead of a String Attribute)</li>\n<li>copy wire color list (as we'll remove the wire color choices from this copy list, so we don't mess with the list of wire colors)</li>\n</ol>\n<p>'wire_handling_script_attribute':</p>\n<ol start=\"3\">\n<li>string concatenation + looping/tail-recursion + wire color selection (via menu selection using our copy list), to build our colored wire string. (And, as we select wire colors, remove those wire colors from our copy list)</li>\n</ol>\n<p>'wire_string_formatting_script_attribute':</p>\n<ol start=\"4\">\n<li>if/when you choose 'done' from the menu selection or if you selected all of the wire colors (no more wire colors to choose from: the copy list only has 1 item, the 'done' choice, remaining) from #3 operation above: finish formatting the colored wire string for use</li>\n</ol>\n\n",
      "PostDate": "2018-09-29T17:39:28.3395172Z",
      "LastEditDate": "2018-09-29T18:10:45.6745986Z",
      "link": null
    },
    {
      "PostId": "5946ed3e-b5a9-468d-b6c2-fd45d7deab7a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would probably have done something more like a stacking system; where the wires are objects that can be carried around, and can be tied together to make a single object.\r\n\r\nNot sure from the OP which kind of wires you'd prefer.\r\n\r\nHere's a first attempt (typing code in the forum, so no guarantees it'd work) of the kind of structure I'd use:\r\n<details>\r\n<summary>code</summary>\r\n\r\nThis was half written on my phone, and hasn't been tested at all. It still has issues. I figured that you might want the player to be able to tie wires onto a wire that's poking out of a machine or something, so didn't limit it to the inventory. But as it currently stands, the \"tie\" command puts the completed wire in the same place as its *first\" argument, and doesn't check if the others can be taken/dropped. This is fixable, but will make the code a bit longer and may be awkward if any of your wires have take/drop scripts.\r\n```\r\n<type name=\"wire\">\r\n  <attr name=\"update_attributes\" type=\"script\">\r\n    if (HasAttribute (this, \"wireparts\")) {\r\n      colourlist = NewStringList()\r\n      wirelength = 0\r\n      foreach (wire, this.wireparts) {\r\n        if (HasString (wire, \"wirecolour\")) {\r\n          list add (colourlist, wire.wirecolour)\r\n        }\r\n        if (HasInt (wire.wirelength)) {\r\n          wirelength = wirelength + wire.wirelength\r\n        }\r\n      }\r\n      this.wirelength = wirelength\r\n      this.longcolour = FormatList (colourlist, \", \", \", and\", \"no\")\r\n      colourlist = ListCompact (colourlist)\r\n      this.wirecolour = Join (colourlist, \"/\")\r\n    }\r\n    this.alias = this.wirecolour + \" \" + this.wiretype\r\n  </attr>\r\n  <look type=\"string\">{either HasAttribute(this, \"wireparts\"):A length of {this.wiretype}, made of smaller {this.longcolour} pieces knotted together.:A piece of {this.wirecolour} {this.wiretype}.}</look>\r\n  <wirelength type=\"int\">1</wirelength>\r\n  <wiretype type=\"string\">wire</wiretype>\r\n  <wirecolour type=\"string\">plain</wirecolour>\r\n  <inventoryverbs type=\"listextend\">Tie;Untie</inventoryverbs>\r\n  <take/>\r\n  <drop/>\r\n</type>\r\n\r\n<command name=\"untie\">\r\n  <pattern>^untie (?<object>.+)$</pattern>\r\n  <changecommandscope type=\"script\"><![CDATA[\r\n    // Allow the player to untie a single wire from its parts, even if the single wire isn't in scope\r\n    i = 0\r\n    while (i < ListCount (items)) {\r\n      obj = ListItem (items, i)\r\n      if (HasAttribute (obj, \"wireparts\")) {\r\n        foreach (subwire, obj.wireparts) {\r\n          list add (items, subwire)\r\n        }\r\n      }\r\n      i = i + 1\r\n    }\r\n  ]]></changecommandscope>\r\n  <script>\r\n    if (ListContains (ScopeReachable(), object)) {\r\n      if (HasAttribute (object, \"wireparts\")) {\r\n        foreach (part, object.wireparts) {\r\n          part.parent = object.parent\r\n        }\r\n        msg (\"You untie the knots, and separate the \"+object.wiretype+\" into \"+ListCount(object.wireparts)+\" pieces.\")\r\n      }\r\n      else if (DoesInherit (object, \"wire\")) {\r\n        msg (\"It isn't tied to anything,\")\r\n      }\r\n      else {\r\n        msg (\"You can't untie that.\")\r\n      }\r\n    }\r\n    else if (ListContains (ScopeReachable(), object.parent) and DoesInherit (object.parent, \"wire\")) {\r\n      knot = object.parent\r\n      pos = IndexOf (knot.wireparts, object)\r\n      switch (pos) {\r\n        case (-1) {\r\n          // This shouldn't happen\r\n        }\r\n        case (0) {\r\n          list remove (knot.wireparts, object)\r\n        }\r\n        case (ListCount(knot.wireparts) - 1) {\r\n          list remove (knot.wireparts, object)\r\n        }\r\n        case (1) {\r\n          list remove (knot.wireparts, object)\r\n          endpiece = ListItem (knot.wireparts, 0)\r\n          list remove (knot.wireparts, endpiece)\r\n          endpiece.parent = knot.parent\r\n        }\r\n        case (ListCount(knot.wireparts) - 2) {\r\n          list remove (knot.wireparts, object)\r\n          endpiece = ListItem (knot.wireparts, ListCount(knot.wireparts) - 1)\r\n          list remove (knot.wireparts, endpiece)\r\n          endpiece.parent = knot.parent\r\n        }\r\n        default {\r\n          list remove (knot.wireparts, object)\r\n          newknot = GetUniqueElementName(\"wire\")\r\n          create (newknot, \"wire\")\r\n          newknot = GetObject (newknot)\r\n          newknot.parent = knot.parent\r\n          newknot.wireparts = NewObjectList()\r\n          while (ListCount (knot.wireparts) > pos) {\r\n            part = ListItem (knot.wireparts, pos)\r\n            list remove (knot.wireparts, part)\r\n            list add (newknot.wireparts, part)\r\n            part.parent = newknot\r\n          }\r\n          do (newknot, \"update_attributes\")\r\n        }\r\n      }\r\n      object.parent = knot.parent\r\n      if (ListCount (knot.wireparts) = 1) {\r\n        part = ListItem (knot.wireparts, 0)\r\n        part.parent = knot.parent\r\n        destroy (knot.name)\r\n      }\r\n      else {\r\n        do (knot, \"update_attributes\")\r\n      }\r\n    }\r\n    else {\r\n      msg (\"I can't reach that.\")\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<command name=\"tie\">\r\n  <pattern>^tie (?<object>.+?)( together| to (?<object2>.+)|)$</pattern>\r\n  <allow_all />\r\n  <changecommandscope type=\"script\"><![CDATA[\r\n    // restricts scope to just wires\r\n    i = 0\r\n    while (i < ListCount (items)) {\r\n      item = ListItem (items, i)\r\n      if (DoesInherit (item, \"wire\")) {\r\n        i = i + 1\r\n      }\r\n      else {\r\n        list remove (items, i)\r\n      }\r\n    }\r\n  ]]></changecommandscope>\r\n  <script><![CDATA[\r\n    wires = NewObjectList()\r\n    if (IsDefined(\"object\")) {\r\n      if (EndsWith (TypeOf (object), \"list\")) {\r\n        wires = object\r\n      }\r\n      else {\r\n        list add (wires, object)\r\n      }\r\n    }\r\n    if (IsDefined(\"object2\")) {\r\n      if (EndsWith (TypeOf (object2), \"list\")) {\r\n        wires = ListCombine (wires, object2)\r\n      }\r\n      else {\r\n        list add (wires, object2)\r\n      }\r\n    }\r\n    wires = ListCompact (wires)\r\n    if (ListCount (wires) < 2) {\r\n      allwires = FilterByType (ScopeReachable(), \"wire\")\r\n      if (ListCount (allwires) = 2) {\r\n        wires = ListCompact (ListCombine (wires, allwires))\r\n      }\r\n      else {\r\n        msg (\"You need at least two wires to tie together.\")\r\n        if (ListCount (allwires) > 2) {\r\n          message = \"What would you like to tie\"\r\n          if (ListCount (wires) = 1) message = message + \" it to\"\r\n          this.disambiguation_wires = wires\r\n          ShowMenu (message+\"?\", ListExclude (allwires, wires), true) {\r\n            wires = tie.disambiguation_wires\r\n            list add (wires, result)\r\n            do (tie, \"script\", QuickParams (\"object\", wires))\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      // We've got enough wires.\r\n      knot = null\r\n      tied = NewStringList()\r\n      foreach (wire, wires) {\r\n        if (not ListContains (ScopeReachable(), wire)) {\r\n          msg (\"You can't get the \"+GetDisplayAlias(wire)+\".\")\r\n        }\r\n        else if (HasAttribute (wire, \"wireparts\")) {\r\n          list add (tied, GetDisplayName (wire))\r\n          if (knot = null) {\r\n            knot = wire\r\n          }\r\n          else {\r\n            foreach (subwire, wire.wireparts) {\r\n              list add (knot.wireparts, subwire)\r\n              MoveObject (subwire, knot)\r\n            }\r\n            destroy (wire.name)\r\n          }\r\n        }\r\n        else {\r\n          list add (tied, GetDisplayName (wire))\r\n          if (knot = null) {\r\n            knot = GetUniqueElementName(\"wire\")\r\n            create (knot, \"wire\")\r\n            knot = GetObject (knot)\r\n            knot.parent = wire.parent\r\n            knot.wireparts = NewObjectList()\r\n          }\r\n          list add (knot.wireparts, wire)\r\n          MoveObject (wire, knot)\r\n        }\r\n      }\r\n      if (knot = null) {\r\n        msg (\"Something went wrong.\")\r\n      }\r\n      else if (LengthOf (knot.wireparts) < 2) {\r\n        msg (\"You couldn't tie ir.\")\r\n        foreach (wire, knot.wireparts) {\r\n          MoveObject (wire, knot.parent)\r\n        }\r\n        destroy (knot.name)\r\n      }\r\n      else {\r\n        do (knot, \"update_attributes\")\r\n        msg (\"You tie \"+FormatList(tied, \", \", \", and\", \"nothing\")+\" together.\")\r\n      }\r\n    }\r\n  ]]></script>\r\n</command>\r\n```\r\n\r\nWith this, you should be able to create wires easily enough. Something like:\r\n```\r\n<object name=\"redwire\">\r\n  <inherit name=\"wire\"/>\r\n  <wirecolour>red</wirecolour>\r\n  <wirelength>3</wirelength>\r\n</object>\r\n```\r\nThe player can enter commands like `tie red wire to blue wire`, or `tie red wire, green wire, and blue wire`, or `tie all together`. Not entirely sure on the format of lists it will accept, as I've not done much with multiple commands. This will create a new wire with an alias like \"red/green/blue wire\".\r\nIf you have some command where the player is using a wire, and you want to check if it includes the red one, you can use `Contains (someobject, redwire)`, or `Instr (someobject.wirecolour, \"red\") > 0`.\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>I would probably have done something more like a stacking system; where the wires are objects that can be carried around, and can be tied together to make a single object.</p>\n<p>Not sure from the OP which kind of wires you'd prefer.</p>\n<p>Here's a first attempt (typing code in the forum, so no guarantees it'd work) of the kind of structure I'd use:</p>\n<details>\n<summary>code</summary>\n<p>This was half written on my phone, and hasn't been tested at all. It still has issues. I figured that you might want the player to be able to tie wires onto a wire that's poking out of a machine or something, so didn't limit it to the inventory. But as it currently stands, the \"tie\" command puts the completed wire in the same place as its *first\" argument, and doesn't check if the others can be taken/dropped. This is fixable, but will make the code a bit longer and may be awkward if any of your wires have take/drop scripts.</p>\n<pre><code>&lt;type name=\"wire\"&gt;\n  &lt;attr name=\"update_attributes\" type=\"script\"&gt;\n    if (HasAttribute (this, \"wireparts\")) {\n      colourlist = NewStringList()\n      wirelength = 0\n      foreach (wire, this.wireparts) {\n        if (HasString (wire, \"wirecolour\")) {\n          list add (colourlist, wire.wirecolour)\n        }\n        if (HasInt (wire.wirelength)) {\n          wirelength = wirelength + wire.wirelength\n        }\n      }\n      this.wirelength = wirelength\n      this.longcolour = FormatList (colourlist, \", \", \", and\", \"no\")\n      colourlist = ListCompact (colourlist)\n      this.wirecolour = Join (colourlist, \"/\")\n    }\n    this.alias = this.wirecolour + \" \" + this.wiretype\n  &lt;/attr&gt;\n  &lt;look type=\"string\"&gt;{either HasAttribute(this, \"wireparts\"):A length of {this.wiretype}, made of smaller {this.longcolour} pieces knotted together.:A piece of {this.wirecolour} {this.wiretype}.}&lt;/look&gt;\n  &lt;wirelength type=\"int\"&gt;1&lt;/wirelength&gt;\n  &lt;wiretype type=\"string\"&gt;wire&lt;/wiretype&gt;\n  &lt;wirecolour type=\"string\"&gt;plain&lt;/wirecolour&gt;\n  &lt;inventoryverbs type=\"listextend\"&gt;Tie;Untie&lt;/inventoryverbs&gt;\n  &lt;take/&gt;\n  &lt;drop/&gt;\n&lt;/type&gt;\n\n&lt;command name=\"untie\"&gt;\n  &lt;pattern&gt;^untie (?&lt;object&gt;.+)$&lt;/pattern&gt;\n  &lt;changecommandscope type=\"script\"&gt;&lt;![CDATA[\n    // Allow the player to untie a single wire from its parts, even if the single wire isn't in scope\n    i = 0\n    while (i &lt; ListCount (items)) {\n      obj = ListItem (items, i)\n      if (HasAttribute (obj, \"wireparts\")) {\n        foreach (subwire, obj.wireparts) {\n          list add (items, subwire)\n        }\n      }\n      i = i + 1\n    }\n  ]]&gt;&lt;/changecommandscope&gt;\n  &lt;script&gt;\n    if (ListContains (ScopeReachable(), object)) {\n      if (HasAttribute (object, \"wireparts\")) {\n        foreach (part, object.wireparts) {\n          part.parent = object.parent\n        }\n        msg (\"You untie the knots, and separate the \"+object.wiretype+\" into \"+ListCount(object.wireparts)+\" pieces.\")\n      }\n      else if (DoesInherit (object, \"wire\")) {\n        msg (\"It isn't tied to anything,\")\n      }\n      else {\n        msg (\"You can't untie that.\")\n      }\n    }\n    else if (ListContains (ScopeReachable(), object.parent) and DoesInherit (object.parent, \"wire\")) {\n      knot = object.parent\n      pos = IndexOf (knot.wireparts, object)\n      switch (pos) {\n        case (-1) {\n          // This shouldn't happen\n        }\n        case (0) {\n          list remove (knot.wireparts, object)\n        }\n        case (ListCount(knot.wireparts) - 1) {\n          list remove (knot.wireparts, object)\n        }\n        case (1) {\n          list remove (knot.wireparts, object)\n          endpiece = ListItem (knot.wireparts, 0)\n          list remove (knot.wireparts, endpiece)\n          endpiece.parent = knot.parent\n        }\n        case (ListCount(knot.wireparts) - 2) {\n          list remove (knot.wireparts, object)\n          endpiece = ListItem (knot.wireparts, ListCount(knot.wireparts) - 1)\n          list remove (knot.wireparts, endpiece)\n          endpiece.parent = knot.parent\n        }\n        default {\n          list remove (knot.wireparts, object)\n          newknot = GetUniqueElementName(\"wire\")\n          create (newknot, \"wire\")\n          newknot = GetObject (newknot)\n          newknot.parent = knot.parent\n          newknot.wireparts = NewObjectList()\n          while (ListCount (knot.wireparts) &gt; pos) {\n            part = ListItem (knot.wireparts, pos)\n            list remove (knot.wireparts, part)\n            list add (newknot.wireparts, part)\n            part.parent = newknot\n          }\n          do (newknot, \"update_attributes\")\n        }\n      }\n      object.parent = knot.parent\n      if (ListCount (knot.wireparts) = 1) {\n        part = ListItem (knot.wireparts, 0)\n        part.parent = knot.parent\n        destroy (knot.name)\n      }\n      else {\n        do (knot, \"update_attributes\")\n      }\n    }\n    else {\n      msg (\"I can't reach that.\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=\"tie\"&gt;\n  &lt;pattern&gt;^tie (?&lt;object&gt;.+?)( together| to (?&lt;object2&gt;.+)|)$&lt;/pattern&gt;\n  &lt;allow_all /&gt;\n  &lt;changecommandscope type=\"script\"&gt;&lt;![CDATA[\n    // restricts scope to just wires\n    i = 0\n    while (i &lt; ListCount (items)) {\n      item = ListItem (items, i)\n      if (DoesInherit (item, \"wire\")) {\n        i = i + 1\n      }\n      else {\n        list remove (items, i)\n      }\n    }\n  ]]&gt;&lt;/changecommandscope&gt;\n  &lt;script&gt;&lt;![CDATA[\n    wires = NewObjectList()\n    if (IsDefined(\"object\")) {\n      if (EndsWith (TypeOf (object), \"list\")) {\n        wires = object\n      }\n      else {\n        list add (wires, object)\n      }\n    }\n    if (IsDefined(\"object2\")) {\n      if (EndsWith (TypeOf (object2), \"list\")) {\n        wires = ListCombine (wires, object2)\n      }\n      else {\n        list add (wires, object2)\n      }\n    }\n    wires = ListCompact (wires)\n    if (ListCount (wires) &lt; 2) {\n      allwires = FilterByType (ScopeReachable(), \"wire\")\n      if (ListCount (allwires) = 2) {\n        wires = ListCompact (ListCombine (wires, allwires))\n      }\n      else {\n        msg (\"You need at least two wires to tie together.\")\n        if (ListCount (allwires) &gt; 2) {\n          message = \"What would you like to tie\"\n          if (ListCount (wires) = 1) message = message + \" it to\"\n          this.disambiguation_wires = wires\n          ShowMenu (message+\"?\", ListExclude (allwires, wires), true) {\n            wires = tie.disambiguation_wires\n            list add (wires, result)\n            do (tie, \"script\", QuickParams (\"object\", wires))\n          }\n        }\n      }\n    }\n    else {\n      // We've got enough wires.\n      knot = null\n      tied = NewStringList()\n      foreach (wire, wires) {\n        if (not ListContains (ScopeReachable(), wire)) {\n          msg (\"You can't get the \"+GetDisplayAlias(wire)+\".\")\n        }\n        else if (HasAttribute (wire, \"wireparts\")) {\n          list add (tied, GetDisplayName (wire))\n          if (knot = null) {\n            knot = wire\n          }\n          else {\n            foreach (subwire, wire.wireparts) {\n              list add (knot.wireparts, subwire)\n              MoveObject (subwire, knot)\n            }\n            destroy (wire.name)\n          }\n        }\n        else {\n          list add (tied, GetDisplayName (wire))\n          if (knot = null) {\n            knot = GetUniqueElementName(\"wire\")\n            create (knot, \"wire\")\n            knot = GetObject (knot)\n            knot.parent = wire.parent\n            knot.wireparts = NewObjectList()\n          }\n          list add (knot.wireparts, wire)\n          MoveObject (wire, knot)\n        }\n      }\n      if (knot = null) {\n        msg (\"Something went wrong.\")\n      }\n      else if (LengthOf (knot.wireparts) &lt; 2) {\n        msg (\"You couldn't tie ir.\")\n        foreach (wire, knot.wireparts) {\n          MoveObject (wire, knot.parent)\n        }\n        destroy (knot.name)\n      }\n      else {\n        do (knot, \"update_attributes\")\n        msg (\"You tie \"+FormatList(tied, \", \", \", and\", \"nothing\")+\" together.\")\n      }\n    }\n  ]]&gt;&lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n<p>With this, you should be able to create wires easily enough. Something like:</p>\n<pre><code>&lt;object name=\"redwire\"&gt;\n  &lt;inherit name=\"wire\"/&gt;\n  &lt;wirecolour&gt;red&lt;/wirecolour&gt;\n  &lt;wirelength&gt;3&lt;/wirelength&gt;\n&lt;/object&gt;\n</code></pre>\n<p>The player can enter commands like <code>tie red wire to blue wire</code>, or <code>tie red wire, green wire, and blue wire</code>, or <code>tie all together</code>. Not entirely sure on the format of lists it will accept, as I've not done much with multiple commands. This will create a new wire with an alias like \"red/green/blue wire\".<br>\nIf you have some command where the player is using a wire, and you want to check if it includes the red one, you can use <code>Contains (someobject, redwire)</code>, or <code>Instr (someobject.wirecolour, \"red\") &gt; 0</code>.</p>\n</details>\n\n",
      "PostDate": "2018-09-30T15:14:07.6249859Z",
      "LastEditDate": "2018-10-01T08:28:49.5155151Z",
      "link": null
    },
    {
      "PostId": "fcf6241e-172f-4e62-9411-cfebbed35f37",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You both have given me a lot to think about.\r\nThe wires are indeed physical game objects. The player can find them in different places... so maybe MrA's way is more suiting for me in this case?\r\nThere's a lot of code and I'm at work now so I can't really check it until tonight.\r\nEither way, again, <b>thanks</b> for taking the time guys!",
      "EditableFormat": "markdown",
      "HTML": "<p>You both have given me a lot to think about.<br>\nThe wires are indeed physical game objects. The player can find them in different places... so maybe MrA's way is more suiting for me in this case?<br>\nThere's a lot of code and I'm at work now so I can't really check it until tonight.<br>\nEither way, again, <b>thanks</b> for taking the time guys!</p>\n\n",
      "PostDate": "2018-10-01T07:17:19.6705831Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e153f3ae-9610-477c-aef6-c0d85721a1b9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Edited mine, the first prototype of something that might work, but still has a few issues. Most notably, if the wires aren't all in the same place, it should check that they can be taken or dropped before tying them together.",
      "EditableFormat": "markdown",
      "HTML": "<p>Edited mine, the first prototype of something that might work, but still has a few issues. Most notably, if the wires aren't all in the same place, it should check that they can be taken or dropped before tying them together.</p>\n\n",
      "PostDate": "2018-10-01T08:32:49.0293609Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
