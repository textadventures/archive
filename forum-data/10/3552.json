{
  "Topic": {
    "TopicId": "3552",
    "ForumId": "10",
    "Title": "Timed Script not working after menu",
    "LastUpdated": "2013-03-19T16:25:11+00:00",
    "ReplyCount": 20
  },
  "Posts": [
    {
      "PostId": "23513",
      "UserId": 0,
      "Username": "Asyranok",
      "UserAvatar": null,
      "UserGravatar": "59faabf56b4e313fc3f5a76f43bfc38d",
      "EditableText": "Hi,\n\nI decided to edit another section of my game for the time being due to latency issues making timed scripts not work online.\n\nI already added a section at the beginning of my game that allows users to choose to skip or play the introduction. It worked just fine, so I added the same code to a later section using lots of timed scripts. Now, this later section will not play at all. The timed scripts will not work when under this menu selection system.\n\nCould someone take a look and see if I'm not making a simple mistake?\n\nI have attached my game file with the conversation library. To get to the section in question and play it, start the game and get through the introductory sequences. Then, type &quot;move player&quot;. It will automatically move the player into the sequence that isn't working for me. The game hangs on the first timed script sequence.",
      "EditableFormat": "bbcode",
      "HTML": "Hi,<br/><br/>I decided to edit another section of my game for the time being due to latency issues making timed scripts not work online.<br/><br/>I already added a section at the beginning of my game that allows users to choose to skip or play the introduction. It worked just fine, so I added the same code to a later section using lots of timed scripts. Now, this later section will not play at all. The timed scripts will not work when under this menu selection system.<br/><br/>Could someone take a look and see if I'm not making a simple mistake?<br/><br/>I have attached my game file with the conversation library. To get to the section in question and play it, start the game and get through the introductory sequences. Then, type &quot;move player&quot;. It will automatically move the player into the sequence that isn't working for me. The game hangs on the first timed script sequence.<div><a href=\"/attachment/555\">WAKEnewentrytomilitarycomplex.aslx</a></div><div><a href=\"/attachment/554\">ConvLib (1).aslx</a></div>",
      "PostDate": "2013-03-17T18:26:30+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23518",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I'm still looking it over, but one interesting thing is that once it's &quot;hung&quot;, if you type a command, then the timers kick off, and it keeps going.",
      "EditableFormat": "bbcode",
      "HTML": "I'm still looking it over, but one interesting thing is that once it's &quot;hung&quot;, if you type a command, then the timers kick off, and it keeps going.",
      "PostDate": "2013-03-17T20:41:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23519",
      "UserId": 0,
      "Username": "Asyranok",
      "UserAvatar": null,
      "UserGravatar": "59faabf56b4e313fc3f5a76f43bfc38d",
      "EditableText": "Oh wow. That's really strange!\n\nAlso, thanks for looking into it. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "Oh wow. That's really strange!<br/><br/>Also, thanks for looking into it. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2013-03-17T20:49:09+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23520",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It's definitely related to the menu. If I replace the ShowMenu line with &quot;if(true)&quot; after setting a result variable to &quot;Play Sequence&quot;, then the timers fire as expected. It's most likely a bug. I'm just wondering what is triggering it, as you had a menu and sequence before.",
      "EditableFormat": "bbcode",
      "HTML": "It's definitely related to the menu. If I replace the ShowMenu line with &quot;if(true)&quot; after setting a result variable to &quot;Play Sequence&quot;, then the timers fire as expected. It's most likely a bug. I'm just wondering what is triggering it, as you had a menu and sequence before.",
      "PostDate": "2013-03-17T20:58:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23521",
      "UserId": 0,
      "Username": "Asyranok",
      "UserAvatar": null,
      "UserGravatar": "59faabf56b4e313fc3f5a76f43bfc38d",
      "EditableText": "It could be where I have the script maybe? Although I will say that I tried it originally in the &quot;Before Entering for First Time&quot; script area, then I tried it in the &quot;Before Entering&quot; area. Finally, I moved it to its current spot in the room description.\n\nIt didn't work in any location, so that may rule out it being a location-specific bug.",
      "EditableFormat": "bbcode",
      "HTML": "It could be where I have the script maybe? Although I will say that I tried it originally in the &quot;Before Entering for First Time&quot; script area, then I tried it in the &quot;Before Entering&quot; area. Finally, I moved it to its current spot in the room description.<br/><br/>It didn't work in any location, so that may rule out it being a location-specific bug.",
      "PostDate": "2013-03-17T21:07:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23522",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "Out of curiosity, what happens if you use show menu instead of ShowMenu?",
      "EditableFormat": "bbcode",
      "HTML": "Out of curiosity, what happens if you use show menu instead of ShowMenu?",
      "PostDate": "2013-03-17T21:08:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23523",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Asyranok: Yeah, I tried that as well. I even tried removing the &quot;firsttime&quot;. No joy.\n\nlevicki: Good idea. It works fine that way.",
      "EditableFormat": "bbcode",
      "HTML": "Asyranok: Yeah, I tried that as well. I even tried removing the &quot;firsttime&quot;. No joy.<br/><br/>levicki: Good idea. It works fine that way.",
      "PostDate": "2013-03-17T21:51:16+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23524",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;jaynabonne&quot;:2ihqxac0]Asyranok: Yeah, I tried that as well. I even tried removing the &quot;firsttime&quot;. No joy.\n\nlevicki: Good idea. It works fine that way.[/quote:2ihqxac0]\n\nSo its a bug in new ShowMenu(), most likely something in JS part of it (other parts look to simple to cause that).\n\n@Asyranok:\nI know you are still at the beginning of the coding, but you should consider rewriting this:\n[code:2ihqxac0]\n            switch (result) {\n              case (&quot;Move to first spot&quot;) {\n                Constellation01&#46;order = 1\n              }\n              case (&quot;Move to second spot&quot;) {\n                Constellation01&#46;order = 2\n              }\n              &#46;&#46;&#46;\n[/code:2ihqxac0]\n\nYou just need to use a dictionary:\n[code:2ihqxac0]\n    &lt;order_dictionary type=&quot;stringdictionary&quot;&gt;\n      &lt;item&gt;\n        &lt;key&gt;Move to first spot&lt;/key&gt; // or even better just &quot;first&quot;\n        &lt;value&gt;1&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;Move to second spot&lt;/key&gt; // or even better just &quot;second&quot;\n        &lt;value&gt;2&lt;/value&gt;\n      &lt;/item&gt;\n      &#46;&#46;&#46;\n    &lt;/order_dictionary&gt;\n[/code:2ihqxac0]\n\nAnd then write:\n[code:2ihqxac0]\norder = StringDictionaryItem(order_dictionary, player_choice) // where player_choice is a string &quot;Move to first spot&quot;, etc\n[/code:2ihqxac0]\nVariable order will be string so if you need a number to assign just use ToInt() around StringDictionaryItem(). You can now put that code into a function to which you pass a constelation object as a parameter and reuse the same code for all of them instead of having tons of cases with the same code repeating over and over.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>Asyranok: Yeah, I tried that as well. I even tried removing the &quot;firsttime&quot;. No joy.<br/><br/>levicki: Good idea. It works fine that way.</blockquote><br/><br/>So its a bug in new ShowMenu(), most likely something in JS part of it (other parts look to simple to cause that).<br/><br/>@Asyranok:<br/>I know you are still at the beginning of the coding, but you should consider rewriting this:<br/><pre><code><br/>            switch (result) {<br/>              case (&quot;Move to first spot&quot;) {<br/>                Constellation01&#46;order = 1<br/>              }<br/>              case (&quot;Move to second spot&quot;) {<br/>                Constellation01&#46;order = 2<br/>              }<br/>              &#46;&#46;&#46;<br/></code></pre><br/><br/>You just need to use a dictionary:<br/><pre><code><br/>    &lt;order_dictionary type=&quot;stringdictionary&quot;&gt;<br/>      &lt;item&gt;<br/>        &lt;key&gt;Move to first spot&lt;/key&gt; // or even better just &quot;first&quot;<br/>        &lt;value&gt;1&lt;/value&gt;<br/>      &lt;/item&gt;<br/>      &lt;item&gt;<br/>        &lt;key&gt;Move to second spot&lt;/key&gt; // or even better just &quot;second&quot;<br/>        &lt;value&gt;2&lt;/value&gt;<br/>      &lt;/item&gt;<br/>      &#46;&#46;&#46;<br/>    &lt;/order_dictionary&gt;<br/></code></pre><br/><br/>And then write:<br/><pre><code><br/>order = StringDictionaryItem(order_dictionary, player_choice) // where player_choice is a string &quot;Move to first spot&quot;, etc<br/></code></pre><br/>Variable order will be string so if you need a number to assign just use ToInt() around StringDictionaryItem(). You can now put that code into a function to which you pass a constelation object as a parameter and reuse the same code for all of them instead of having tons of cases with the same code repeating over and over.",
      "PostDate": "2013-03-17T22:10:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23525",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Ok, so I just had to work out the difference in the two cases... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> The difference is that for the intro sequence, you have this:\n\nShowMenu\nwait\nSetTimeout\n\nwhereas for the complex sequence, you just have:\n\nShowMenu\nSetTimeout\n\nThe intervening &quot;wait&quot; in the intro sequence seems to avoid the issue. (If I add a &quot;wait&quot; to the latter one, it works.)\n\nSo it's definitely a bug, but with an awkward workaround...",
      "EditableFormat": "bbcode",
      "HTML": "Ok, so I just had to work out the difference in the two cases... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> The difference is that for the intro sequence, you have this:<br/><br/>ShowMenu<br/>wait<br/>SetTimeout<br/><br/>whereas for the complex sequence, you just have:<br/><br/>ShowMenu<br/>SetTimeout<br/><br/>The intervening &quot;wait&quot; in the intro sequence seems to avoid the issue. (If I add a &quot;wait&quot; to the latter one, it works.)<br/><br/>So it's definitely a bug, but with an awkward workaround...",
      "PostDate": "2013-03-17T22:15:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23529",
      "UserId": 0,
      "Username": "Asyranok",
      "UserAvatar": null,
      "UserGravatar": "59faabf56b4e313fc3f5a76f43bfc38d",
      "EditableText": "Thanks, Jay, for taking the time to help me! I'm glad you were able to figure out what was going on, as I was lost <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->\n\nThanks, Levicki, I will change that as soon as I have the time. It looks more efficient.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, Jay, for taking the time to help me! I'm glad you were able to figure out what was going on, as I was lost <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --><br/><br/>Thanks, Levicki, I will change that as soon as I have the time. It looks more efficient.",
      "PostDate": "2013-03-18T01:41:29+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23532",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "[quote=&quot;Asyranok&quot;:1f90zfqc]Thanks, Levicki, I will change that as soon as I have the time. It looks more efficient.[/quote:1f90zfqc]\n\nYou are welcome, but please note that it is not only more efficient -- it is also more readable, and much easier to change how it works later because you have to edit only in one place, not in several.\n\nAn unwritten rule of thumb in programming:\n\nWhenever you are tempted to use copy &amp; paste on a part of code just stop and think how you could convert that code into a callable function.\n\nAnother thing I forgot to suggest:\n[code:1f90zfqc]\nif (condition1) {\n  if (condition2) {\n    if (condition3) {\n      msg (&quot;yes&quot;)\n    }\n    else {\n      msg (&quot;no&quot;)\n    }\n  }\n  else {\n    msg (&quot;no&quot;)\n  }\n}\nelse {\n  msg (&quot;no&quot;)\n}\n[/code:1f90zfqc]\nIs also not really good style -- if &quot;no&quot; is always the same message (I put &quot;no&quot; for brevity, but it can be a long and complex one too) first thing you want to do is to make a template:\n[code:1f90zfqc]\n&lt;template name=&quot;Yes&quot;&gt;Here comes a story continuation once all the conditions are met&#46;&lt;/template&gt;\n&lt;template name=&quot;No&quot;&gt;Here comes my really long explanation why you can't do something until all the conditions are met&#46;&lt;/template&gt;\n&#46;&#46;&#46;\n  msg(Template(&quot;No&quot;))\n[/code:1f90zfqc]\nThis way you will avoid copy &amp; paste for text and you will have to edit only in one place when you want to change the text.\n\nAlso, unless you want to show different messages for each stage of puzzle completion (for example to give player some hints on how to proceed if the steps are different or need to be in certain order), the above can be written as:\n[code:1f90zfqc]\nif (condition1 and condition2 and condition3) {\n  msg (Template(&quot;Yes&quot;))\n}\nelse {\n  msg (Template(&quot;No&quot;))\n}\n[/code:1f90zfqc]\n\nFinally, regarding the story, it sounds interesting but I find it a bit of a stretch that Duffy's wristband has such a large range that it can affect translation when he is away and you talk to Ziggy. Maybe she should have her own?\n\nHope my suggestions help.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Asyranok wrote:</cite>Thanks, Levicki, I will change that as soon as I have the time. It looks more efficient.</blockquote><br/><br/>You are welcome, but please note that it is not only more efficient -- it is also more readable, and much easier to change how it works later because you have to edit only in one place, not in several.<br/><br/>An unwritten rule of thumb in programming:<br/><br/>Whenever you are tempted to use copy &amp; paste on a part of code just stop and think how you could convert that code into a callable function.<br/><br/>Another thing I forgot to suggest:<br/><pre><code><br/>if (condition1) {<br/>  if (condition2) {<br/>    if (condition3) {<br/>      msg (&quot;yes&quot;)<br/>    }<br/>    else {<br/>      msg (&quot;no&quot;)<br/>    }<br/>  }<br/>  else {<br/>    msg (&quot;no&quot;)<br/>  }<br/>}<br/>else {<br/>  msg (&quot;no&quot;)<br/>}<br/></code></pre><br/>Is also not really good style -- if &quot;no&quot; is always the same message (I put &quot;no&quot; for brevity, but it can be a long and complex one too) first thing you want to do is to make a template:<br/><pre><code><br/>&lt;template name=&quot;Yes&quot;&gt;Here comes a story continuation once all the conditions are met&#46;&lt;/template&gt;<br/>&lt;template name=&quot;No&quot;&gt;Here comes my really long explanation why you can't do something until all the conditions are met&#46;&lt;/template&gt;<br/>&#46;&#46;&#46;<br/>  msg(Template(&quot;No&quot;))<br/></code></pre><br/>This way you will avoid copy &amp; paste for text and you will have to edit only in one place when you want to change the text.<br/><br/>Also, unless you want to show different messages for each stage of puzzle completion (for example to give player some hints on how to proceed if the steps are different or need to be in certain order), the above can be written as:<br/><pre><code><br/>if (condition1 and condition2 and condition3) {<br/>  msg (Template(&quot;Yes&quot;))<br/>}<br/>else {<br/>  msg (Template(&quot;No&quot;))<br/>}<br/></code></pre><br/><br/>Finally, regarding the story, it sounds interesting but I find it a bit of a stretch that Duffy's wristband has such a large range that it can affect translation when he is away and you talk to Ziggy. Maybe she should have her own?<br/><br/>Hope my suggestions help.",
      "PostDate": "2013-03-18T09:07:34+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23534",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "While on the subject of &quot;unwritten&quot; rules of programming, I'd like to ask a question that I've been wondering about&#058;\n\nwhen should you put code into a function (and thus be used via calling the function) vs just writing the code in where you want it.\n\nI am *NOT* asking about in regards to how often the code is going to be used elsewhere.\n\nI'm asking about in terms of programming, what I mean is, like with using this example (I think this will explain better what I'm trying to ask about, and ignore the uber simplicity of my example, lol. It address the question that I'm trying to ask about):\n\nwhich is better to do via programming efficiency? (if I may call it this, as I don't know what to call it, lol)\n(and also, when do I do it which way?)\n\n&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;\n  game.turns = game.turns + 1\n&lt;turnscript&gt;\n\nOR\n\n&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;\n  game_turns_function\n&lt;turnscript&gt;\n\n&lt;function name=&quot;game_turns_function&quot;&gt;\n  game.turns = game.turns + 1\n&lt;/function&gt;\n\nwhen should I put a code~script block into a function vs just using the raw code~script block ???\n\nIs there a difference in terms of programming? and, if there is a difference,\nIs it better to do it one way for certain situations, and the other way for other certain situations?",
      "EditableFormat": "bbcode",
      "HTML": "While on the subject of &quot;unwritten&quot; rules of programming, I'd like to ask a question that I've been wondering about&#058;<br/><br/>when should you put code into a function (and thus be used via calling the function) vs just writing the code in where you want it.<br/><br/>I am *NOT* asking about in regards to how often the code is going to be used elsewhere.<br/><br/>I'm asking about in terms of programming, what I mean is, like with using this example (I think this will explain better what I'm trying to ask about, and ignore the uber simplicity of my example, lol. It address the question that I'm trying to ask about):<br/><br/>which is better to do via programming efficiency? (if I may call it this, as I don't know what to call it, lol)<br/>(and also, when do I do it which way?)<br/><br/>&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;<br/>  game.turns = game.turns + 1<br/>&lt;turnscript&gt;<br/><br/>OR<br/><br/>&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;<br/>  game_turns_function<br/>&lt;turnscript&gt;<br/><br/>&lt;function name=&quot;game_turns_function&quot;&gt;<br/>  game.turns = game.turns + 1<br/>&lt;/function&gt;<br/><br/>when should I put a code~script block into a function vs just using the raw code~script block ???<br/><br/>Is there a difference in terms of programming? and, if there is a difference,<br/>Is it better to do it one way for certain situations, and the other way for other certain situations?",
      "PostDate": "2013-03-18T13:54:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23535",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "HK, here's my take.\n\nFor something like your example, I think a function that only has that one line and is only used in that one place would detract from the understandability of the code. It forces someone reading the code to look somewhere else. And I think that is the key for me in terms of functions. Functions (in any language) can be used as an organizational tool to:\n\n1) Create pieces that are called from more than one place, to avoid having the same code all over the place (semantically as well as syntactically - in other words, you're not just compressing code by finding the same lines in different places. It has to *mean* the same thing in all the places it's used).\n\n2) Isolate code that you think someone (or you) might want to change in the future\n\n3) Break code down into more manageable pieces. For example, you would not want to have a single script that scans page after page after page. It becomes too difficult for someone looking at the code to take in. By breaking the code down into logical pieces, someone can get a good sense of the overall structure of a piece of code and then drill down into called functions if those pieces need to be understood in detail. It provides a way to &quot;chunk up&quot; the code.\n\n4) Provide clean entry points to an area of functionality. That might be outside the scope of what you're asking. But if, in your example, that code logicially fit into a library - part of a bigger whole - then you could define all that code together as functions.\n\nSo the aesthetics for me are: 1) Logical grouping of code, in terms of functionality or even policy (that is, keeping all code together that makes certain decisions about how the code operates) and 2) Ease of understanding and maintenance.\n\nAs an example of policy, if you want the game object to own what happens with turns, then instead of putting the code in the turn script (or even a function), you might want to invoke a script on the game object, so that all the code for turns is under the game object's control.\n\nI'd say that the more you program, the more you'll develop an instinct for how code should be broken down. But there is no one answer. In the end, it's your creation, and it all depends on what makes sense to you. Just as with writing, where you develop your own style about sentence length, when to make a new paragraph, how to organize text into chapters, etc, so too with programming you'll build your own style. There are guidelines and lots of opinions, but in the end, it's what makes sense to you. <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->",
      "EditableFormat": "bbcode",
      "HTML": "HK, here's my take.<br/><br/>For something like your example, I think a function that only has that one line and is only used in that one place would detract from the understandability of the code. It forces someone reading the code to look somewhere else. And I think that is the key for me in terms of functions. Functions (in any language) can be used as an organizational tool to:<br/><br/>1) Create pieces that are called from more than one place, to avoid having the same code all over the place (semantically as well as syntactically - in other words, you're not just compressing code by finding the same lines in different places. It has to *mean* the same thing in all the places it's used).<br/><br/>2) Isolate code that you think someone (or you) might want to change in the future<br/><br/>3) Break code down into more manageable pieces. For example, you would not want to have a single script that scans page after page after page. It becomes too difficult for someone looking at the code to take in. By breaking the code down into logical pieces, someone can get a good sense of the overall structure of a piece of code and then drill down into called functions if those pieces need to be understood in detail. It provides a way to &quot;chunk up&quot; the code.<br/><br/>4) Provide clean entry points to an area of functionality. That might be outside the scope of what you're asking. But if, in your example, that code logicially fit into a library - part of a bigger whole - then you could define all that code together as functions.<br/><br/>So the aesthetics for me are: 1) Logical grouping of code, in terms of functionality or even policy (that is, keeping all code together that makes certain decisions about how the code operates) and 2) Ease of understanding and maintenance.<br/><br/>As an example of policy, if you want the game object to own what happens with turns, then instead of putting the code in the turn script (or even a function), you might want to invoke a script on the game object, so that all the code for turns is under the game object's control.<br/><br/>I'd say that the more you program, the more you'll develop an instinct for how code should be broken down. But there is no one answer. In the end, it's your creation, and it all depends on what makes sense to you. Just as with writing, where you develop your own style about sentence length, when to make a new paragraph, how to organize text into chapters, etc, so too with programming you'll build your own style. There are guidelines and lots of opinions, but in the end, it's what makes sense to you. <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->",
      "PostDate": "2013-03-18T14:10:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23544",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "Since Jay has already answered the theoretical part I will just cover your question with a direct example:\n\nPutting such a simple one-liner:\n[code:1z9f510e]\ngame&#46;turns = game&#46;turns + 1\n[/code:1z9f510e]\nInto a function does not make sense.\n\nIt would however make sense if you wanted to increase game.turns [b:1z9f510e]by a variable amount[/b:1z9f510e]:\n[code:1z9f510e]\n&lt;function name=&quot;game_turns_function&quot; parameters=&quot;turns&quot;&gt;\ngame&#46;turns = game&#46;turns + turns\n&lt;/function&gt;\n[/code:1z9f510e]\n\nAnd now you can call the function from a turn script&#058;\n[code:1z9f510e]\n&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;\ngame_turns_function(1)\n&lt;turnscript&gt;\n[/code:1z9f510e]\n\nBut now you can also call it from any other object script! For example, you can make passing through every exit take a different number of turns:\n[code:1z9f510e]\n  &lt;exit alias=&quot;south&quot; to=&quot;lounge&quot;&gt;\n    &lt;inherit name=&quot;southdirection&quot; /&gt;\n    &lt;attr name=&quot;turns&quot; type=&quot;integer&quot;&gt;5&lt;/attr&gt;\n    &lt;script type=&quot;script&quot;&gt;\n      &#46;&#46;&#46; process your exit checking, unlocking, etc &#46;&#46;&#46;\n      game_turns_function(this&#46;turns)\n    &lt;/script&gt;\n  &lt;/exit&gt;\n[/code:1z9f510e]\n\nYou can even go further by creating a new type and moving attributes and scripts there so each object inheriting from new type will have default handling where you will only have to change the turns attribute value to make them behave differently.\n\nHope this example helps.",
      "EditableFormat": "bbcode",
      "HTML": "Since Jay has already answered the theoretical part I will just cover your question with a direct example:<br/><br/>Putting such a simple one-liner:<br/><pre><code><br/>game&#46;turns = game&#46;turns + 1<br/></code></pre><br/>Into a function does not make sense.<br/><br/>It would however make sense if you wanted to increase game.turns <span style=\"font-weight:bold;\">by a variable amount</span>:<br/><pre><code><br/>&lt;function name=&quot;game_turns_function&quot; parameters=&quot;turns&quot;&gt;<br/>game&#46;turns = game&#46;turns + turns<br/>&lt;/function&gt;<br/></code></pre><br/><br/>And now you can call the function from a turn script&#058;<br/><pre><code><br/>&lt;turnscript name=&quot;game_turns_turnscript&quot;&gt;<br/>game_turns_function(1)<br/>&lt;turnscript&gt;<br/></code></pre><br/><br/>But now you can also call it from any other object script! For example, you can make passing through every exit take a different number of turns:<br/><pre><code><br/>  &lt;exit alias=&quot;south&quot; to=&quot;lounge&quot;&gt;<br/>    &lt;inherit name=&quot;southdirection&quot; /&gt;<br/>    &lt;attr name=&quot;turns&quot; type=&quot;integer&quot;&gt;5&lt;/attr&gt;<br/>    &lt;script type=&quot;script&quot;&gt;<br/>      &#46;&#46;&#46; process your exit checking, unlocking, etc &#46;&#46;&#46;<br/>      game_turns_function(this&#46;turns)<br/>    &lt;/script&gt;<br/>  &lt;/exit&gt;<br/></code></pre><br/><br/>You can even go further by creating a new type and moving attributes and scripts there so each object inheriting from new type will have default handling where you will only have to change the turns attribute value to make them behave differently.<br/><br/>Hope this example helps.",
      "PostDate": "2013-03-18T21:11:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23546",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks to both of you (and ya, sorry about the uber short simple example, replace it with a large code~script block and not a single definition~attribute~variable line, lol. Actually, don't just replace it with a single large code~script as well, see below for hopefully something that makes sense of what I'm trying to ask about, lol)\n\nso, for the most part the difference is for what's best or needed by you (organization or purpose) in what you want to do.\n\nI though I was more asking about... maybe this is a better way to say it (sorry for not being clear):\n\nprocessing power, does the game engine run faster if your code is more broken down into more functions (being called upon) than just sticking the raw code~script blocks into the code where you want it, or is it worse for performance?\n\nI mean, for nesting code, is it better to use a bunch of layers (via function calling), or to just have the raw script~code in the desired nested code location?\n\nwhat's better in terms of processing~performance of the game engine in regards to code:\n\ncode location\n-&gt; call function 1\n-&gt;-&gt; call function 2*\n-&gt;-&gt;-&gt; etc\n\n*function 1\n-&gt; call function 2**\n\n**function 2\n-&gt; call function 3\n\nor just:\n\ncode location\n-&gt; raw script 1\n-&gt;-&gt; raw script 2\n-&gt;-&gt;-&gt; raw script 3\n\n----\n\nor maybe this is how I should phrase it:\n\nis it better or worse to have layers upon layers of calling functions or to have as least layers as possible of calling functions ??\n\n-------------\n\nI was just reading some of that book edition on &quot;Mr. Mike&quot; and game programming~making, and he talks about how you want to keep your code as &quot;flat layered&quot; as you can (if I remember correctly), but this was more due to working with a team, and having to connect all the different work~elements~systems together in being in sync for the making of a game, as it can cause more hassle by having too deeply layered code, again if I understood it correctly.\n\nSo, i was just wondering if it matters in terms of the programming and~or its processing~performance with quest, if layers of code makes a difference or not. \n\ni.e.\n\nif quest has to search for multiple functions and functions within those functions to run some code, can it handle this fine, or will it be slowed down or even have problems with doing it? or would it be better to have as little layers upon layers of finding chunks of code of when trying to do some main code?\n\nor, maybe this makes sense, lol:\n\nis it better to have all nested script, right there in the code location (the main~specific code you're working with), or is it better to be referencing it (the nested script of the main~specific code you're working with) from many other locations and even further nested layers of those other locations?",
      "EditableFormat": "bbcode",
      "HTML": "thanks to both of you (and ya, sorry about the uber short simple example, replace it with a large code~script block and not a single definition~attribute~variable line, lol. Actually, don't just replace it with a single large code~script as well, see below for hopefully something that makes sense of what I'm trying to ask about, lol)<br/><br/>so, for the most part the difference is for what's best or needed by you (organization or purpose) in what you want to do.<br/><br/>I though I was more asking about... maybe this is a better way to say it (sorry for not being clear):<br/><br/>processing power, does the game engine run faster if your code is more broken down into more functions (being called upon) than just sticking the raw code~script blocks into the code where you want it, or is it worse for performance?<br/><br/>I mean, for nesting code, is it better to use a bunch of layers (via function calling), or to just have the raw script~code in the desired nested code location?<br/><br/>what's better in terms of processing~performance of the game engine in regards to code:<br/><br/>code location<br/>-&gt; call function 1<br/>-&gt;-&gt; call function 2*<br/>-&gt;-&gt;-&gt; etc<br/><br/>*function 1<br/>-&gt; call function 2**<br/><br/>**function 2<br/>-&gt; call function 3<br/><br/>or just:<br/><br/>code location<br/>-&gt; raw script 1<br/>-&gt;-&gt; raw script 2<br/>-&gt;-&gt;-&gt; raw script 3<br/><br/>----<br/><br/>or maybe this is how I should phrase it:<br/><br/>is it better or worse to have layers upon layers of calling functions or to have as least layers as possible of calling functions ??<br/><br/>-------------<br/><br/>I was just reading some of that book edition on &quot;Mr. Mike&quot; and game programming~making, and he talks about how you want to keep your code as &quot;flat layered&quot; as you can (if I remember correctly), but this was more due to working with a team, and having to connect all the different work~elements~systems together in being in sync for the making of a game, as it can cause more hassle by having too deeply layered code, again if I understood it correctly.<br/><br/>So, i was just wondering if it matters in terms of the programming and~or its processing~performance with quest, if layers of code makes a difference or not. <br/><br/>i.e.<br/><br/>if quest has to search for multiple functions and functions within those functions to run some code, can it handle this fine, or will it be slowed down or even have problems with doing it? or would it be better to have as little layers upon layers of finding chunks of code of when trying to do some main code?<br/><br/>or, maybe this makes sense, lol:<br/><br/>is it better to have all nested script, right there in the code location (the main~specific code you're working with), or is it better to be referencing it (the nested script of the main~specific code you're working with) from many other locations and even further nested layers of those other locations?",
      "PostDate": "2013-03-18T23:50:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23547",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I'm not sure about what &quot;Mr Mike&quot; is saying, but I'd say that you would only bother optimizing something that has an actual performance problem. For most of what you will be doing in Quest, the difference caused by the overhead of function calls will be on the order of milliseconds. It's just not even worth worrying about. \n\nSo basically: if you end up with part of the code being slower than you'd like, by all means optimize it. But unless you get into some really processing-intensive coding, I wouldn't even let it cross your mind. Computers are fast enough that for what Quest games normally do, it doesn't even factor in.\n\nThat is a good question, though. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I'm not sure about what &quot;Mr Mike&quot; is saying, but I'd say that you would only bother optimizing something that has an actual performance problem. For most of what you will be doing in Quest, the difference caused by the overhead of function calls will be on the order of milliseconds. It's just not even worth worrying about. <br/><br/>So basically: if you end up with part of the code being slower than you'd like, by all means optimize it. But unless you get into some really processing-intensive coding, I wouldn't even let it cross your mind. Computers are fast enough that for what Quest games normally do, it doesn't even factor in.<br/><br/>That is a good question, though. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-03-19T00:47:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23554",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks for the additional response, jaynebonne, and sorry for me being so unclear on what I was trying to ask about. I wish I knew the programming terminology and~or concepts better, and so I'm not fumbling around with trying to ask about such stuff.\n\n------\n\nand I was refering to this:\n\n<!-- m --><a class=\"postlink\" href=\"http://freecodingtutorial.files.wordpress.com/2011/10/game-coding-complete.pdf\">http://freecodingtutorial.files.wordpre ... mplete.pdf</a><!-- m -->\n\nsorry, for the unexplained reference of &quot;mr. mike&quot;, lol.\n\n-------\n\nI can't find from where I was reading it (good luck finding it... 754 pages... lol... though I didn't get that far into reading but I don't know how far I got and I think also also skipped ahead and read those parts so I've no idea where I was reading the stuff from), but I just happened to re-come across this snippet, though the surrounding text may not be on the subject: 229 pg in the comment box. I think it is talking about the inherited (or object types) properties (if we wee talking about quest), so I was wondering about the coding &quot;heirarchy&quot; too.",
      "EditableFormat": "bbcode",
      "HTML": "thanks for the additional response, jaynebonne, and sorry for me being so unclear on what I was trying to ask about. I wish I knew the programming terminology and~or concepts better, and so I'm not fumbling around with trying to ask about such stuff.<br/><br/>------<br/><br/>and I was refering to this:<br/><br/><!-- m --><a class=\"postlink\" href=\"http://freecodingtutorial.files.wordpress.com/2011/10/game-coding-complete.pdf\">http://freecodingtutorial.files.wordpre ... mplete.pdf</a><!-- m --><br/><br/>sorry, for the unexplained reference of &quot;mr. mike&quot;, lol.<br/><br/>-------<br/><br/>I can't find from where I was reading it (good luck finding it... 754 pages... lol... though I didn't get that far into reading but I don't know how far I got and I think also also skipped ahead and read those parts so I've no idea where I was reading the stuff from), but I just happened to re-come across this snippet, though the surrounding text may not be on the subject: 229 pg in the comment box. I think it is talking about the inherited (or object types) properties (if we wee talking about quest), so I was wondering about the coding &quot;heirarchy&quot; too.",
      "PostDate": "2013-03-19T07:00:41+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23558",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "My opinion - it's misguided. Let's examine the two sentences that are actually intact (the others seem to be missing words?).\n\n[quote:bspjj155]Object-oriented coding techniques make it easy to\nextend one class into another, but there is a risk of confusion\nand error when the new class is so different from the original\nthat it might as well be a completely new class.[/quote:bspjj155]\n\nWell, that makes no sense. The point of inheritance in the standard sense is to model an &quot;is-a&quot; kind of relationship. As a crude example, you could have an &quot;Animal&quot; base class with a &quot;Mammal&quot; derived class, and then two derived classes from that, &quot;dog&quot; and &quot;cat.&quot; So you have &quot;a Mammal is an Animal&quot;, &quot;a Dog is a Mammal, which means it also is an Animal&quot;, and similarly for a cat. Yes, if you derive incorrectly and, say, derive a Cat from a Car, such that your Cat now has four wheels, then you deserve all the confusion you get. That's not a flaw of object-oriented design - that's the danger of bad design, period. It doesn't follow to not use inheritance - it follows that you use it properly. If the new class is so different from the original that it might as well be a new class, then there is your clue - make it a new class. And if you have a screw, you use a screwdriver, not a hammer. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\n[quote:bspjj155]A deep inheritance tree complicates the\nproblems of changing something in a base class without\nadversely affecting many classes that inherit from it.[/quote:bspjj155]\n\nSo, again, it comes down to design. If you have a class hierarchy with a well thought-out design, what sort of change would you be making in the base class that would have adverse effects on the derived classes? If it has an adverse effect, then it means it's probably not a proper change. It requires you to acually know your code before you make changes and to make sure the changes are logical.\n\nWIth the sentence fragment I see, I sense he wants to recommend using helper functions and keeping the classes distinct instead of class inheritance. But depending on what you do, this will end up with the same problem. What happens if you have classes that all rely on the same helper function and you change the helper function? A base class with functionality is identical issue-wise to functionality that is broken out and called. The latter ends up not being encapsulated in an &quot;object&quot;, but the perils are the same. Basically, in the end, it's all code calling code. The only way you will be able to keep changes from affecting a wide range of code is to keep all the code entirely separate - and then you run into the *other* grief, which is maintaining multiple copies of identical functionality, spread out across the code base. Believe me, I'd rather have to keep a class hierarchy sane than try to keep multiple pieces of common code in line.\n\nThese comments together imply to me that the author, either himself or via others' horror stories, has encounted bad design in OO situations. That is not an inherent flaw with OO techniques. Whatever technique you use, bad design will bite you. A well worked out OO design will modularize and encapsulate your code and make life much easier and (ideally) prevent spaghetti code and bugs. It's not a straightjacket that forces you to write good code, however.",
      "EditableFormat": "bbcode",
      "HTML": "My opinion - it's misguided. Let's examine the two sentences that are actually intact (the others seem to be missing words?).<br/><br/><blockquote><p>Object-oriented coding techniques make it easy to<br/>extend one class into another, but there is a risk of confusion<br/>and error when the new class is so different from the original<br/>that it might as well be a completely new class.</p></blockquote><br/><br/>Well, that makes no sense. The point of inheritance in the standard sense is to model an &quot;is-a&quot; kind of relationship. As a crude example, you could have an &quot;Animal&quot; base class with a &quot;Mammal&quot; derived class, and then two derived classes from that, &quot;dog&quot; and &quot;cat.&quot; So you have &quot;a Mammal is an Animal&quot;, &quot;a Dog is a Mammal, which means it also is an Animal&quot;, and similarly for a cat. Yes, if you derive incorrectly and, say, derive a Cat from a Car, such that your Cat now has four wheels, then you deserve all the confusion you get. That's not a flaw of object-oriented design - that's the danger of bad design, period. It doesn't follow to not use inheritance - it follows that you use it properly. If the new class is so different from the original that it might as well be a new class, then there is your clue - make it a new class. And if you have a screw, you use a screwdriver, not a hammer. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/><blockquote><p>A deep inheritance tree complicates the<br/>problems of changing something in a base class without<br/>adversely affecting many classes that inherit from it.</p></blockquote><br/><br/>So, again, it comes down to design. If you have a class hierarchy with a well thought-out design, what sort of change would you be making in the base class that would have adverse effects on the derived classes? If it has an adverse effect, then it means it's probably not a proper change. It requires you to acually know your code before you make changes and to make sure the changes are logical.<br/><br/>WIth the sentence fragment I see, I sense he wants to recommend using helper functions and keeping the classes distinct instead of class inheritance. But depending on what you do, this will end up with the same problem. What happens if you have classes that all rely on the same helper function and you change the helper function? A base class with functionality is identical issue-wise to functionality that is broken out and called. The latter ends up not being encapsulated in an &quot;object&quot;, but the perils are the same. Basically, in the end, it's all code calling code. The only way you will be able to keep changes from affecting a wide range of code is to keep all the code entirely separate - and then you run into the *other* grief, which is maintaining multiple copies of identical functionality, spread out across the code base. Believe me, I'd rather have to keep a class hierarchy sane than try to keep multiple pieces of common code in line.<br/><br/>These comments together imply to me that the author, either himself or via others' horror stories, has encounted bad design in OO situations. That is not an inherent flaw with OO techniques. Whatever technique you use, bad design will bite you. A well worked out OO design will modularize and encapsulate your code and make life much easier and (ideally) prevent spaghetti code and bugs. It's not a straightjacket that forces you to write good code, however.",
      "PostDate": "2013-03-19T10:37:17+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23566",
      "UserId": 0,
      "Username": "levicki",
      "UserAvatar": null,
      "UserGravatar": "be743462cd257b8490bed6cc0d3795ea",
      "EditableText": "Jay, nice explanation, but I think that in this particular example it would have been sufficient if you just said &quot;Take anything that begins with free... on the Internet with a chunk of salt&quot;. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "Jay, nice explanation, but I think that in this particular example it would have been sufficient if you just said &quot;Take anything that begins with free... on the Internet with a chunk of salt&quot;. <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2013-03-19T15:59:25+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23567",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "That too. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "That too. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-03-19T16:01:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "23568",
      "UserId": 0,
      "Username": "TriangleGames",
      "UserAvatar": null,
      "UserGravatar": "134d9e995777da65c5cf8efda551d579",
      "EditableText": "lol !\nI've had trouble finding books on programming that I liked. In my experience they seem to often be written by either\nA) A professional writer, who researched the program language to write the book, and isn't the greatest programmer\nB) An extreme nerd who is great with programming, but is not particularly good at communicating with people\n\nThe &quot;[i:3mwtmj4c]For Dummies[/i:3mwtmj4c]&quot; books I've read are clear, but not especially thorough or well organized. Another book I tried was thorough, but very fast paced and laden with &quot;nerd humor&quot; which I enjoyed but was also distracted by.\nOf course, it doesn't help that not knowing the proper terminology makes it hard to look stuff up in a glossary or index.",
      "EditableFormat": "bbcode",
      "HTML": "lol !<br/>I've had trouble finding books on programming that I liked. In my experience they seem to often be written by either<br/>A) A professional writer, who researched the program language to write the book, and isn't the greatest programmer<br/>B) An extreme nerd who is great with programming, but is not particularly good at communicating with people<br/><br/>The &quot;<span style=\"font-style:italic;\">For Dummies</span>&quot; books I've read are clear, but not especially thorough or well organized. Another book I tried was thorough, but very fast paced and laden with &quot;nerd humor&quot; which I enjoyed but was also distracted by.<br/>Of course, it doesn't help that not knowing the proper terminology makes it hard to look stuff up in a glossary or index.",
      "PostDate": "2013-03-19T16:25:11+00:00",
      "LastEditDate": null
    }
  ]
}
