{
  "Topic": {
    "TopicId": "qgml8fsqbektze7youj3ca",
    "ForumId": "10",
    "Title": "How to display player attributes as a fraction?",
    "LastUpdated": "2019-07-07T00:53:19.0038463Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "6936e41e-0192-493a-ad79-e31d21e3da38",
      "UserId": 302338,
      "Username": "UnknownCleric2420",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f2899e5627b26987cbab91c32bf4c912?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, hey again everyone! Thanks so much for your help on the day/night cycle problem!\r\n\r\nThis time I wanna know if it's possible to display player attributes as a fraction that you can change dynamically. For example, a Stamina meter. What I would like is for the Stamina meter to display as (Value)/100. The Value would change depending on what the player does, I.E. Attacking costs 5 Stamina, moving costs 3, ETC.\r\n\r\nMy guess is that the best way to do it would be to store the current Stamina as player.StamCurrent and the max as player.StamMax, then set the value of player.Stamina to (player.StamCurrent) / (player.StamMax)?\r\nFor example:\r\n```\r\nplayer.StamCurrent = 100\r\nplayer.StamMax = 100\r\nplayer.Stamina = player.StamCurrent / player.StamMax (This is what the player would see)\r\n```\r\nThe only issue I see with this is that the fraction would simplify, causing 50/100 to appear as 1/2, and 100/100 to appear as 1. If this would even remotely work at all.\r\n\r\nEDIT: While this is not the most graceful solution, until I can figure out a way to do it the way I originally wanted to do it this'll have to work.\r\n\r\nWhile it's not graceful, it's pretty simple: Store the Max and Current values for the Stamina as different attributes that the player can see. So in the menu it would say:\r\nHealth: 100/100\r\nMoney: $40\r\nStamina: 100\r\nMax Stamina: 100",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, hey again everyone! Thanks so much for your help on the day/night cycle problem!</p>\n<p>This time I wanna know if it's possible to display player attributes as a fraction that you can change dynamically. For example, a Stamina meter. What I would like is for the Stamina meter to display as (Value)/100. The Value would change depending on what the player does, I.E. Attacking costs 5 Stamina, moving costs 3, ETC.</p>\n<p>My guess is that the best way to do it would be to store the current Stamina as player.StamCurrent and the max as player.StamMax, then set the value of player.Stamina to (player.StamCurrent) / (player.StamMax)?<br>\nFor example:</p>\n<pre><code>player.StamCurrent = 100\nplayer.StamMax = 100\nplayer.Stamina = player.StamCurrent / player.StamMax (This is what the player would see)\n</code></pre>\n<p>The only issue I see with this is that the fraction would simplify, causing 50/100 to appear as 1/2, and 100/100 to appear as 1. If this would even remotely work at all.</p>\n<p>EDIT: While this is not the most graceful solution, until I can figure out a way to do it the way I originally wanted to do it this'll have to work.</p>\n<p>While it's not graceful, it's pretty simple: Store the Max and Current values for the Stamina as different attributes that the player can see. So in the menu it would say:<br>\nHealth: 100/100<br>\nMoney: $40<br>\nStamina: 100<br>\nMax Stamina: 100</p>\n\n",
      "PostDate": "2019-07-07T00:53:19.0038463Z",
      "LastEditDate": "2019-07-07T01:10:38.4973516Z",
      "link": null
    },
    {
      "PostId": "208980db-4c05-41f8-836e-0eb58a58fdb1",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "YES, it is possible!\r\n\r\nFirst, your current method, and the way to PREVENT simplification.\r\n\r\nYou simply need player.Stamina to be a _String_ attribute as opposed to a number. So you do:\r\n```\r\nplayer.Stamina=player.StamCurrent+\"/\"+player.StamMax\r\n```\r\nIf StamCurrent=50 and player.StamMax=100, then it'll print out 50/100.\r\n\r\nBut what if you want to change the demoninator? What if you want to store, say, Stamina as being 0-100, but only want the player to see 0-50?\r\n\r\nWe introduce a new attribute, player.StamFractionSet, as a number. In short, player.StamFractionSet is set to whatever number you want the player to see as the 'StamMax'.\r\n\r\nThe code then becomes:\r\n```\r\nplayer.Stamina=(player.StamCurrent*(player.StamFractionSet/player.StamMax))+\"/\"+player.StamFractionSet\r\n```\r\nWith a StamCurrent of 50, StamMax of 100, and StamFractionSet of 50, the player will then see 25/50.\r\n\r\nAlso, you can add the Stam and MaxStam attributes to the player as ones that are not visible, ie add them directly to the player Object, and not the 'player attributes' you see in the Game tab.\r\n\r\nHope this helps!",
      "EditableFormat": "markdown",
      "HTML": "<p>YES, it is possible!</p>\n<p>First, your current method, and the way to PREVENT simplification.</p>\n<p>You simply need player.Stamina to be a <em>String</em> attribute as opposed to a number. So you do:</p>\n<pre><code>player.Stamina=player.StamCurrent+\"/\"+player.StamMax\n</code></pre>\n<p>If StamCurrent=50 and player.StamMax=100, then it'll print out 50/100.</p>\n<p>But what if you want to change the demoninator? What if you want to store, say, Stamina as being 0-100, but only want the player to see 0-50?</p>\n<p>We introduce a new attribute, player.StamFractionSet, as a number. In short, player.StamFractionSet is set to whatever number you want the player to see as the 'StamMax'.</p>\n<p>The code then becomes:</p>\n<pre><code>player.Stamina=(player.StamCurrent*(player.StamFractionSet/player.StamMax))+\"/\"+player.StamFractionSet\n</code></pre>\n<p>With a StamCurrent of 50, StamMax of 100, and StamFractionSet of 50, the player will then see 25/50.</p>\n<p>Also, you can add the Stam and MaxStam attributes to the player as ones that are not visible, ie add them directly to the player Object, and not the 'player attributes' you see in the Game tab.</p>\n<p>Hope this helps!</p>\n\n",
      "PostDate": "2019-07-07T01:30:21.7615545Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b7e617ae-656f-42b8-bafa-8c01569fc9fa",
      "UserId": 302338,
      "Username": "UnknownCleric2420",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f2899e5627b26987cbab91c32bf4c912?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks so much yet again for the help! I would definitely like to change the player's maximum Stamina at one point.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks so much yet again for the help! I would definitely like to change the player's maximum Stamina at one point.</p>\n\n",
      "PostDate": "2019-07-07T02:35:01.4743184Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2d810d0b-09d3-4e3e-ab69-df0d54b99b86",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Keep in mind that if you want to change the ACTUAL MaxStamina, then you'll also have to change the StamFractionSet appropriately.\r\n\r\nLike, if MaxStamina goes from 100 to 98, then StamFractionSet has to go from 50 to 49.",
      "EditableFormat": "markdown",
      "HTML": "<p>Keep in mind that if you want to change the ACTUAL MaxStamina, then you'll also have to change the StamFractionSet appropriately.</p>\n<p>Like, if MaxStamina goes from 100 to 98, then StamFractionSet has to go from 50 to 49.</p>\n\n",
      "PostDate": "2019-07-07T02:48:35.6145029Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "94c348c1-fdd0-4e7d-91b8-16d7839d7c4f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting this edited post, updated/posted)\r\n\r\n--------------\r\n\r\njust a bit of explanation:\r\n\r\n```\r\nplayer.StamCurrent = 100\r\nplayer.StamMax = 100\r\nplayer.Stamina = player.StamCurrent / player.StamMax\r\n```\r\n\r\nfor your\r\n\r\n```\r\nplayer.Stamina = player.StamCurrent / player.StamMax\r\n```\r\n\r\nthe 'player.Stamina' Attribute is an Integer Attribute:\r\n\r\nplayer.Stamina = INTEGER_VALUE / INTEGER_VALUE\r\n\r\nand, this is an Assignment Operation, so the FINAL VALUE (an Integer Value: int / int = int) gets STORED into the 'player.Stamina' Integer Attribute VARIABLE\r\n\r\nalso, you're doing a division operation, via the '/' symbol in it\r\n\r\nwhich, is not what you wanted, as you want to keep the 'int / int' for displayment, but you're calculating (dividing) it instead, because you wrote/coded an Integer Attribute Assignment Operation\r\n\r\n------\r\n\r\ninstead, you needed to code/write in a String Attribute Assignment Operation:\r\n\r\nstrings are NOT amounts, and only amounts can be calculated (math done on them), strings can't be calculated, but they can be concatenated (literally put together or rather put next to each other)\r\n\r\n```\r\nplayer.Stamina = player.StamCurrent + \"/\" + player.StamMax\r\n```\r\n\r\nnow, this is a String Attribute (having TEXT and VARIABLE)\r\n\r\n```\r\nTEXT: \"/\" ------- this is NO longer a division operator, as it's now TEXT (a String Value), and so it's NOT a division operation, and also the use of the '+' symbols along with the TEXT, are concatenation (string) operations, telling quest that the Final Value is a String Value, and thus the Assignment VARIABLE is to be a String VARIABLE, making it a String VARIABLE Assignment Operation\r\n\r\nVARIABLES: 'player.StamCurrent' and 'player.StamMax'\r\n```\r\n\r\nso, we're concatenating the VARIABLES and TEXT together:\r\n\r\n(under the scenes, quest is powerful/smart with its parsing, and so, it is converting the Integer Values of the 'player.StamCurrent' and 'player.StamMax' into String Values, as the expression is a concatenation/string expression, so that's why the integer values are being converted under the scenes by quest for you, without you having to do it yourself, into string values)\r\n\r\n```\r\n[VARIABLE1] [TEXT] [VARIABLE2]\r\n[player.StamCurrent] [\"/\"] [player.StamMax]\r\n\r\nplayer.StamCurrent = 50\r\nplayer.StamMax = 100\r\n\r\n[50] [\"/\"] [100]\r\n50 / 100\r\n\r\nFINAL Value (a String Value): \"50 / 100\"\r\n```\r\n\r\nwhich the FINAL VALUE, then lastly gets STORED INTO the 'player.Stamina' String Attribute VARIABLE:\r\n\r\n```\r\nplayer.Stamina = player.StamCurrent + \"/\" + player.StamMax\r\n// player.Stamina = [player.StamCurrent] [\"/\"] [player.StamMax]\r\n// player.Stamina = [50] [\"/\"] [100]\r\n// player.Stamina = \"50 / 100\"\r\n```\r\n\r\n-------------------------------------------\r\n\r\nData/VARIABLE/Attribute/Value Types are extremely important!\r\n\r\n-----\r\n\r\nAmount (can do math/calculations/arithmetic on them) Data Types:\r\n\r\nintegers (ints): ...,-999, -1, 0, 1, 999,...\r\n\r\ndoubles (double/floats/floating-points/decimals/fractions): ..., -999.123, -1.9999999999999, 0.0, 1.123, 999.1111111111111, ....\r\n\r\n----------\r\n\r\nNON-AMOUNT (can NOT do math/calculations/arithmetic on them) Data Types:\r\n\r\nStrings\r\n\r\nBooleans\r\n\r\nObject reference/pointers\r\n\r\nScripts\r\n\r\nLists\r\n\r\nDictionaries\r\n\r\n------------------------\r\n\r\nquest is able to parse from the VALUE, what Data Type it is:\r\n\r\nvar = \"hi\" // the 'var' Variable VARIABLE is created as a String Variable, as its FINAL VALUE \"hi\" is a String Value\r\n\r\nvar = \"hi\" + \", my name is HK\" + \", what is your name?\"  // the 'var' Variable VARIABLE is created as a String Variable, as its FINAL VALUE \"hi, my name is HK, what is your name?\" is a String Value\r\n\r\nvar = 5 // the 'var' Variable VARIABLE is created as a Integer Variable, as its FINAL VALUE '5' is an Integer Value\r\n\r\nvar = 5.5 // the 'var' Variable VARIABLE is created as a Double Variable, as its FINAL VALUE '5.5' is a Double Value\r\n\r\nvar = false // the 'var' Variable VARIABLE is created as a Boolean Variable, as its FINAL VALUE 'false' is a Boolean Value\r\n\r\nvar = true // the 'var' Variable VARIABLE is created as a Boolean Variable, as its FINAL VALUE 'true' is a Boolean Value\r\n\r\ncreate (\"katana\")\r\nvar = katana // the 'var' Variable VARIABLE is created as an Object reference/pointer Variable, as its FINAL VALUE 'katana' is an Object reference/pointer Value\r\n\r\nvar = NewStringList () // the 'var' Variable VARIABLE is created as a Stringlist Variable, as its FINAL VALUE is a new/blank String List\r\nlist add (var, \"red\")\r\nlist add (var, \"blue\")\r\nlist add (var, \"yellow\")\r\nDisplayList (var, true) // or (not sure on correct syntax): DisplayList (var, 1)\r\n// displayment:\r\n// 1. red\r\n// 2. blue\r\n// 3. yellow\r\n\r\n--------\r\n\r\nbut if you're creating/adding the Attributes through the GUI/Editor's 'Attribute' Tab... you need to make sure you're setting the correct Attribute Type for the usage that you're using it in\r\n\r\nfor example:\r\n\r\nin the GUI/Editor:\r\n\r\nadd/create Object -> name: katana\r\n\r\n'katana' Object -> 'Attributes' Tab -> Attributes -> Add -> (see below)\r\n\r\n[Object Name: katana]\r\nAttribute Name: damage\r\nAttribute Type: string\r\nAttribute Value: 50\r\n\r\nand then in Scripting (such as in a Verb, like say 'attack'), you got this:\r\n\r\norc.current_life = orc.current_life - katana.damage\r\n\r\nand the 'orc.current_life' is an Integer Attribute\r\n\r\nthen you'll get an error:\r\n\r\nnon-matching data type error:\r\n\r\nINT = INT - STRING ---> ERROR: DOES NOT COMPUTE!\r\n\r\nso, you got to be careful, and here's the correction/fix:\r\n\r\nadd/create Object -> name: katana\r\n\r\n'katana' Object -> 'Attributes' Tab -> Attributes -> Add -> (see below)\r\n\r\n[Object Name: katana]\r\nAttribute Name: damage\r\nAttribute Type: int <------- fix/correction is here (it was 'string', but now we changed it to 'int')\r\nAttribute Value: 50\r\n\r\nand then in Scripting (such as in a Verb, like say 'attack'), you got this:\r\n\r\norc.current_life = orc.current_life - katana.damage\r\n\r\nand the 'orc.current_life' is an Integer Attribute\r\n\r\nand now:\r\n\r\nINT = INT - INT // NO error!\r\n\r\n--------\r\n\r\nPS\r\n\r\nif this just confuses you even more, ignore it, as I didn't realize it would be harder to explain than I thought it would, so I did a really bad job with it, and likely just confused you, so ignore this if it jsut confuses you more, sorry about this poor attempt at trying to explain this stuff.",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting this edited post, updated/posted)</p>\n<hr>\n<p>just a bit of explanation:</p>\n<pre><code>player.StamCurrent = 100\nplayer.StamMax = 100\nplayer.Stamina = player.StamCurrent / player.StamMax\n</code></pre>\n<p>for your</p>\n<pre><code>player.Stamina = player.StamCurrent / player.StamMax\n</code></pre>\n<p>the 'player.Stamina' Attribute is an Integer Attribute:</p>\n<p>player.Stamina = INTEGER_VALUE / INTEGER_VALUE</p>\n<p>and, this is an Assignment Operation, so the FINAL VALUE (an Integer Value: int / int = int) gets STORED into the 'player.Stamina' Integer Attribute VARIABLE</p>\n<p>also, you're doing a division operation, via the '/' symbol in it</p>\n<p>which, is not what you wanted, as you want to keep the 'int / int' for displayment, but you're calculating (dividing) it instead, because you wrote/coded an Integer Attribute Assignment Operation</p>\n<hr>\n<p>instead, you needed to code/write in a String Attribute Assignment Operation:</p>\n<p>strings are NOT amounts, and only amounts can be calculated (math done on them), strings can't be calculated, but they can be concatenated (literally put together or rather put next to each other)</p>\n<pre><code>player.Stamina = player.StamCurrent + \"/\" + player.StamMax\n</code></pre>\n<p>now, this is a String Attribute (having TEXT and VARIABLE)</p>\n<pre><code>TEXT: \"/\" ------- this is NO longer a division operator, as it's now TEXT (a String Value), and so it's NOT a division operation, and also the use of the '+' symbols along with the TEXT, are concatenation (string) operations, telling quest that the Final Value is a String Value, and thus the Assignment VARIABLE is to be a String VARIABLE, making it a String VARIABLE Assignment Operation\n\nVARIABLES: 'player.StamCurrent' and 'player.StamMax'\n</code></pre>\n<p>so, we're concatenating the VARIABLES and TEXT together:</p>\n<p>(under the scenes, quest is powerful/smart with its parsing, and so, it is converting the Integer Values of the 'player.StamCurrent' and 'player.StamMax' into String Values, as the expression is a concatenation/string expression, so that's why the integer values are being converted under the scenes by quest for you, without you having to do it yourself, into string values)</p>\n<pre><code>[VARIABLE1] [TEXT] [VARIABLE2]\n[player.StamCurrent] [\"/\"] [player.StamMax]\n\nplayer.StamCurrent = 50\nplayer.StamMax = 100\n\n[50] [\"/\"] [100]\n50 / 100\n\nFINAL Value (a String Value): \"50 / 100\"\n</code></pre>\n<p>which the FINAL VALUE, then lastly gets STORED INTO the 'player.Stamina' String Attribute VARIABLE:</p>\n<pre><code>player.Stamina = player.StamCurrent + \"/\" + player.StamMax\n// player.Stamina = [player.StamCurrent] [\"/\"] [player.StamMax]\n// player.Stamina = [50] [\"/\"] [100]\n// player.Stamina = \"50 / 100\"\n</code></pre>\n<hr>\n<p>Data/VARIABLE/Attribute/Value Types are extremely important!</p>\n<hr>\n<p>Amount (can do math/calculations/arithmetic on them) Data Types:</p>\n<p>integers (ints): ...,-999, -1, 0, 1, 999,...</p>\n<p>doubles (double/floats/floating-points/decimals/fractions): ..., -999.123, -1.9999999999999, 0.0, 1.123, 999.1111111111111, ....</p>\n<hr>\n<p>NON-AMOUNT (can NOT do math/calculations/arithmetic on them) Data Types:</p>\n<p>Strings</p>\n<p>Booleans</p>\n<p>Object reference/pointers</p>\n<p>Scripts</p>\n<p>Lists</p>\n<p>Dictionaries</p>\n<hr>\n<p>quest is able to parse from the VALUE, what Data Type it is:</p>\n<p>var = \"hi\" // the 'var' Variable VARIABLE is created as a String Variable, as its FINAL VALUE \"hi\" is a String Value</p>\n<p>var = \"hi\" + \", my name is HK\" + \", what is your name?\"  // the 'var' Variable VARIABLE is created as a String Variable, as its FINAL VALUE \"hi, my name is HK, what is your name?\" is a String Value</p>\n<p>var = 5 // the 'var' Variable VARIABLE is created as a Integer Variable, as its FINAL VALUE '5' is an Integer Value</p>\n<p>var = 5.5 // the 'var' Variable VARIABLE is created as a Double Variable, as its FINAL VALUE '5.5' is a Double Value</p>\n<p>var = false // the 'var' Variable VARIABLE is created as a Boolean Variable, as its FINAL VALUE 'false' is a Boolean Value</p>\n<p>var = true // the 'var' Variable VARIABLE is created as a Boolean Variable, as its FINAL VALUE 'true' is a Boolean Value</p>\n<p>create (\"katana\")<br>\nvar = katana // the 'var' Variable VARIABLE is created as an Object reference/pointer Variable, as its FINAL VALUE 'katana' is an Object reference/pointer Value</p>\n<p>var = NewStringList () // the 'var' Variable VARIABLE is created as a Stringlist Variable, as its FINAL VALUE is a new/blank String List<br>\nlist add (var, \"red\")<br>\nlist add (var, \"blue\")<br>\nlist add (var, \"yellow\")<br>\nDisplayList (var, true) // or (not sure on correct syntax): DisplayList (var, 1)<br>\n// displayment:<br>\n// 1. red<br>\n// 2. blue<br>\n// 3. yellow</p>\n<hr>\n<p>but if you're creating/adding the Attributes through the GUI/Editor's 'Attribute' Tab... you need to make sure you're setting the correct Attribute Type for the usage that you're using it in</p>\n<p>for example:</p>\n<p>in the GUI/Editor:</p>\n<p>add/create Object -&gt; name: katana</p>\n<p>'katana' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; (see below)</p>\n<p>[Object Name: katana]<br>\nAttribute Name: damage<br>\nAttribute Type: string<br>\nAttribute Value: 50</p>\n<p>and then in Scripting (such as in a Verb, like say 'attack'), you got this:</p>\n<p>orc.current_life = orc.current_life - katana.damage</p>\n<p>and the 'orc.current_life' is an Integer Attribute</p>\n<p>then you'll get an error:</p>\n<p>non-matching data type error:</p>\n<p>INT = INT - STRING ---&gt; ERROR: DOES NOT COMPUTE!</p>\n<p>so, you got to be careful, and here's the correction/fix:</p>\n<p>add/create Object -&gt; name: katana</p>\n<p>'katana' Object -&gt; 'Attributes' Tab -&gt; Attributes -&gt; Add -&gt; (see below)</p>\n<p>[Object Name: katana]<br>\nAttribute Name: damage<br>\nAttribute Type: int &lt;------- fix/correction is here (it was 'string', but now we changed it to 'int')<br>\nAttribute Value: 50</p>\n<p>and then in Scripting (such as in a Verb, like say 'attack'), you got this:</p>\n<p>orc.current_life = orc.current_life - katana.damage</p>\n<p>and the 'orc.current_life' is an Integer Attribute</p>\n<p>and now:</p>\n<p>INT = INT - INT // NO error!</p>\n<hr>\n<p>PS</p>\n<p>if this just confuses you even more, ignore it, as I didn't realize it would be harder to explain than I thought it would, so I did a really bad job with it, and likely just confused you, so ignore this if it jsut confuses you more, sorry about this poor attempt at trying to explain this stuff.</p>\n\n",
      "PostDate": "2019-07-07T06:22:14.5977923Z",
      "LastEditDate": "2019-07-07T06:35:48.4852031Z",
      "link": null
    }
  ]
}
