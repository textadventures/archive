{
  "Topic": {
    "TopicId": "clovlkt3sesqd6i2adogta",
    "ForumId": "10",
    "Title": "About the JS function \"ASLEvent\"",
    "LastUpdated": "2018-01-16T15:49:07.8288027Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0f79040c-64ea-461c-a7ec-565348e1c14a",
      "UserId": 340757,
      "Username": "dantruong02",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d737bbf769e67d57bc707956414916af?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm working on something with Quest that uses JavaScript frequently, with Quest sending values to a JS function and JS functions passing them back to Quest. ASLEvent only being able to take one string parameter functions really limits what I can do with this. Only being able to get a string back means I have to do annoying conversions and type checking, as I'm sending back and forth multiple data types.\r\n\r\nThis, combined with the fact that Quest script processing and JavaScript processing seem to be asynchronous makes it even harder to work with. For example, if I were to run Quest Function 1 that calls JS Function (that in turn calls another Quest function that sets object attributes), and then call Quest Function 2 the line after, Quest Function 2 would run before or in the middle of the JS function, causing errors in some situations.\r\n\r\nIt would be nice if there was a more graceful approach to having Quest and JavaScript communicate, because things that should be very simple end up becoming a hassle.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm working on something with Quest that uses JavaScript frequently, with Quest sending values to a JS function and JS functions passing them back to Quest. ASLEvent only being able to take one string parameter functions really limits what I can do with this. Only being able to get a string back means I have to do annoying conversions and type checking, as I'm sending back and forth multiple data types.</p>\n<p>This, combined with the fact that Quest script processing and JavaScript processing seem to be asynchronous makes it even harder to work with. For example, if I were to run Quest Function 1 that calls JS Function (that in turn calls another Quest function that sets object attributes), and then call Quest Function 2 the line after, Quest Function 2 would run before or in the middle of the JS function, causing errors in some situations.</p>\n<p>It would be nice if there was a more graceful approach to having Quest and JavaScript communicate, because things that should be very simple end up becoming a hassle.</p>\n\n",
      "PostDate": "2018-01-16T15:49:07.8288027Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "26a471ae-6c39-451a-93a6-66dd02b07ed5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello,\r\n\r\nIf you post some code, we can probably help you smooth things over.\r\n\r\n(I've been learning to make better use of ASLEvents this week, myself.)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello,</p>\n<p>If you post some code, we can probably help you smooth things over.</p>\n<p>(I've been learning to make better use of ASLEvents this week, myself.)</p>\n\n",
      "PostDate": "2018-01-16T15:53:36.0665506Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "046a58b9-20e0-4c4a-915f-132107301045",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "### **One thing at a time**\r\n\r\n---\r\n#### **Thing 1:**\r\n\r\n>ASLEvent only being able to take one string parameter functions really limits what I can do with this. \r\n\r\nYou have to set your Quest function up to split a single parameter into however many you need.\r\n\r\n```\r\n  <function name=\"SetName\" parameters=\"param\">\r\n    params = Split(param,\"|\")\r\n    first = params[0]\r\n    last = params[1]\r\n    player.firstname = first\r\n    player.lastname = last\r\n  </function>\r\n```\r\n\r\n---\r\nThe JS:\r\n```\r\ngetName = function(){\r\n  var firstName = prompt(\"What is your first name?\");\r\n  var lastName = prompt(\"What is your last name?\");\r\n  ASLEvent('SetName',firstName+'|'+lastName);\r\n};\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<h3><strong>One thing at a time</strong></h3>\n<hr>\n<h4><strong>Thing 1:</strong></h4>\n<blockquote>\n<p>ASLEvent only being able to take one string parameter functions really limits what I can do with this.</p>\n</blockquote>\n<p>You have to set your Quest function up to split a single parameter into however many you need.</p>\n<pre><code>  &lt;function name=\"SetName\" parameters=\"param\"&gt;\n    params = Split(param,\"|\")\n    first = params[0]\n    last = params[1]\n    player.firstname = first\n    player.lastname = last\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>The JS:</p>\n<pre><code>getName = function(){\n  var firstName = prompt(\"What is your first name?\");\n  var lastName = prompt(\"What is your last name?\");\n  ASLEvent('SetName',firstName+'|'+lastName);\n};\n\n</code></pre>\n\n",
      "PostDate": "2018-01-16T17:20:52.7451969Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "140d6816-a797-41b5-8365-758b7aeb084d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "#### **Thing 2**\r\n\r\n>For example, if I were to run Quest Function 1 that calls JS Function (that in turn calls another Quest function that sets object attributes), and then call Quest Function 2 the line after, Quest Function 2 would run before or in the middle of the JS function, causing errors in some situations.\r\n\r\n**Example 1:**\r\n\r\nLet's put this in the start script:\r\n```\r\nJS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','');};\")\r\nJS.getName ()\r\n```\r\n\r\nAnd here are our two functions being called by ```ASLEvent()```s:\r\n```\r\n  <function name=\"SetName\" parameters=\"param\">\r\n    params = Split(param,\"|\")\r\n    first = params[0]\r\n    last = params[1]\r\n    player.firstname = first\r\n    player.lastname = last\r\n  </function>\r\n```\r\n```\r\n  <function name=\"ShowName\">\r\n    msg (player.firstname +\" \"+player.lastname)\r\n  </function>\r\n```\r\n\r\n---\r\nNote that the ```ShowName``` function doesn't have any parameters.  Because of that, the ```ASLEvent()``` will not work.  And, if there is a way to call a function from an ```ASLEvent()``` which doesn't take any parameters, I haven't figured out how to do it.\r\n\r\nSo, let's add a worthless parameter to the ```ShowName()``` function, and add a worthless parameter to the ```ASLEvent()```, just to appease Quest:\r\n\r\n\r\nRevised start script:\r\n```\r\nJS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','bs_value');};\")\r\nJS.getName ()\r\n```\r\n\r\nRevised ```ShowName()``` function:\r\n```\r\n  <function name=\"ShowName\" parameters=\"bs_value\">\r\n    msg (player.firstname +\" \"+player.lastname)\r\n  </function>\r\n```\r\n\r\n---\r\nNow, that works.\r\n\r\n...but I'm calling everything from JS!\r\n\r\nWhat if we wanted to just call ```ShowName()``` normally?  And what if we didn't want to use that useless ```bs_parameter```?\r\n\r\nLet's strip some things down.\r\n\r\nWe'll remove the ```ASLEvent()``` calling ```ShowName()``` from the JS function and remove the parameter from the ```ShowName()``` function while we're at it.\r\n\r\nThen, we'll add a ```SetTurnTimeout(1)```, and *that* script will call the normal Quest function after the ```ASLEvent()``` has been called, and everything will work out.\r\n\r\nRevised start script:\r\n```\r\nJS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);};\")\r\nJS.getName ()\r\nSetTurnTimeout (1) {\r\n  ShowName\r\n}\r\n```\r\n\r\nRe-revised function:\r\n```\r\n  <function name=\"ShowName\">\r\n    msg (player.firstname +\" \"+player.lastname)\r\n  </function>\r\n```\r\n\r\n---\r\nNow, that works.\r\n\r\n---\r\nWould you like to know how I figured that out?\r\n\r\nI didn't, really.\r\n\r\nI added an ASLEvent to the start script of my game.\r\n\r\nMy game has a turn script, which is enabled when play begins, but doesn't actually fire until you've entered your first command.  (That's just how turn scripts work.  They don't fire when the game loads.  They fire after the first turn has been taken.)\r\n\r\nSo, I noticed that my turn script was firing BEFORE entering my first command when I had an ```ASLEvent()``` in my start script, and I began to piece things together.\r\n\r\nIn fact, if you call 2 ```ASLEvent()```s in your start script, the turn script will fire TWICE!!!\r\n\r\n---\r\nBefore I go changing things around, I'll show you the output I get right now, with a single ```ASLEvent()``` in the start script.\r\n\r\nThe only thing I haven't shown you is the turn script:\r\n```\r\n  <turnscript name=\"turnscript\">\r\n    <enabled />\r\n    <script>\r\n      msg (\"Running the turnscript.\")\r\n    </script>\r\n  </turnscript>\r\n```\r\nHere's what I get:\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35004774-e411a65a-fab6-11e7-8c12-1817d5770351.png)\r\n\r\n\r\n---\r\nHere's the entire code for that, just for archival purposes (and to avoid confusion):\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"ASLEvents\">\r\n    <gameid>0414da24-6327-456f-bcb6-53f1d0246587</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <start type=\"script\">\r\n      JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);};\")\r\n      JS.getName ()\r\n      SetTurnTimeout (1) {\r\n        ShowName()\r\n      }\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <turnscript name=\"turnscript\">\r\n    <enabled />\r\n    <script>\r\n      msg (\"Running the turnscript.\")\r\n    </script>\r\n  </turnscript>\r\n  <function name=\"SetName\" parameters=\"param\">\r\n    params = Split(param,\"|\")\r\n    first = params[0]\r\n    last = params[1]\r\n    player.firstname = first\r\n    player.lastname = last\r\n  </function>\r\n  <function name=\"ShowName\">\r\n    msg (player.firstname +\" \"+player.lastname)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n\r\n---\r\nOkay, let's flip back to the first way I had it working, just to show how the turn script is firing once for each ```ASLEvent()```.\r\n\r\nThe entire code:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"ASLEvents\">\r\n    <gameid>0414da24-6327-456f-bcb6-53f1d0246587</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <start type=\"script\">\r\n      JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','bs_value');};\")\r\n      JS.getName ()\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <turnscript name=\"turnscript\">\r\n    <enabled />\r\n    <script>\r\n      msg (\"Running the turnscript.\")\r\n    </script>\r\n  </turnscript>\r\n  <function name=\"SetName\" parameters=\"param\">\r\n    params = Split(param,\"|\")\r\n    first = params[0]\r\n    last = params[1]\r\n    player.firstname = first\r\n    player.lastname = last\r\n  </function>\r\n  <function name=\"ShowName\" parameters=\"bs_value\">\r\n    msg (player.firstname +\" \"+player.lastname)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/35004995-9f9b3058-fab7-11e7-994d-256c339281ae.png)\r\n\r\n---\r\n### So...\r\n\r\n#### ***This is what I've (sort of) figured out so far:***\r\n\r\n- It's best to only call one ```ASLEvent()``` at a time.\r\n\r\n-  An ```ASLEvent()``` can only handle one parameter (and I think it HAS TO pass a single parameter), but a Quest function can split that up into however many parameters you want (and you can call numerous Quest functions from a Quest function, if necessary).\r\n\r\n- Use a ```SetTurnTimeout(1)``` to nest the Quest script you want to invoke AFTER an ```ASLEvent()``` which sets attributes which will be needed in the Quest script.\r\n\r\n\r\n---\r\nThings I don't know:\r\n\r\n- How would I know?  (Ha-ha!)\r\n\r\n---\r\nAnyone else have any input concerning ```ASLEvent()```s?\r\n\r\n(I'm sure I've forgotten something, and I've even *more* certain I'm unaware of something.)",
      "EditableFormat": "markdown",
      "HTML": "<h4><strong>Thing 2</strong></h4>\n<blockquote>\n<p>For example, if I were to run Quest Function 1 that calls JS Function (that in turn calls another Quest function that sets object attributes), and then call Quest Function 2 the line after, Quest Function 2 would run before or in the middle of the JS function, causing errors in some situations.</p>\n</blockquote>\n<p><strong>Example 1:</strong></p>\n<p>Let's put this in the start script:</p>\n<pre><code>JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','');};\")\nJS.getName ()\n</code></pre>\n<p>And here are our two functions being called by <code>ASLEvent()</code>s:</p>\n<pre><code>  &lt;function name=\"SetName\" parameters=\"param\"&gt;\n    params = Split(param,\"|\")\n    first = params[0]\n    last = params[1]\n    player.firstname = first\n    player.lastname = last\n  &lt;/function&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"ShowName\"&gt;\n    msg (player.firstname +\" \"+player.lastname)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>Note that the <code>ShowName</code> function doesn't have any parameters.  Because of that, the <code>ASLEvent()</code> will not work.  And, if there is a way to call a function from an <code>ASLEvent()</code> which doesn't take any parameters, I haven't figured out how to do it.</p>\n<p>So, let's add a worthless parameter to the <code>ShowName()</code> function, and add a worthless parameter to the <code>ASLEvent()</code>, just to appease Quest:</p>\n<p>Revised start script:</p>\n<pre><code>JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','bs_value');};\")\nJS.getName ()\n</code></pre>\n<p>Revised <code>ShowName()</code> function:</p>\n<pre><code>  &lt;function name=\"ShowName\" parameters=\"bs_value\"&gt;\n    msg (player.firstname +\" \"+player.lastname)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>Now, that works.</p>\n<p>...but I'm calling everything from JS!</p>\n<p>What if we wanted to just call <code>ShowName()</code> normally?  And what if we didn't want to use that useless <code>bs_parameter</code>?</p>\n<p>Let's strip some things down.</p>\n<p>We'll remove the <code>ASLEvent()</code> calling <code>ShowName()</code> from the JS function and remove the parameter from the <code>ShowName()</code> function while we're at it.</p>\n<p>Then, we'll add a <code>SetTurnTimeout(1)</code>, and <em>that</em> script will call the normal Quest function after the <code>ASLEvent()</code> has been called, and everything will work out.</p>\n<p>Revised start script:</p>\n<pre><code>JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);};\")\nJS.getName ()\nSetTurnTimeout (1) {\n  ShowName\n}\n</code></pre>\n<p>Re-revised function:</p>\n<pre><code>  &lt;function name=\"ShowName\"&gt;\n    msg (player.firstname +\" \"+player.lastname)\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>Now, that works.</p>\n<hr>\n<p>Would you like to know how I figured that out?</p>\n<p>I didn't, really.</p>\n<p>I added an ASLEvent to the start script of my game.</p>\n<p>My game has a turn script, which is enabled when play begins, but doesn't actually fire until you've entered your first command.  (That's just how turn scripts work.  They don't fire when the game loads.  They fire after the first turn has been taken.)</p>\n<p>So, I noticed that my turn script was firing BEFORE entering my first command when I had an <code>ASLEvent()</code> in my start script, and I began to piece things together.</p>\n<p>In fact, if you call 2 <code>ASLEvent()</code>s in your start script, the turn script will fire TWICE!!!</p>\n<hr>\n<p>Before I go changing things around, I'll show you the output I get right now, with a single <code>ASLEvent()</code> in the start script.</p>\n<p>The only thing I haven't shown you is the turn script:</p>\n<pre><code>  &lt;turnscript name=\"turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      msg (\"Running the turnscript.\")\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n</code></pre>\n<p>Here's what I get:</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35004774-e411a65a-fab6-11e7-8c12-1817d5770351.png\" alt=\"image\"></p>\n<hr>\n<p>Here's the entire code for that, just for archival purposes (and to avoid confusion):</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"ASLEvents\"&gt;\n    &lt;gameid&gt;0414da24-6327-456f-bcb6-53f1d0246587&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;start type=\"script\"&gt;\n      JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);};\")\n      JS.getName ()\n      SetTurnTimeout (1) {\n        ShowName()\n      }\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      msg (\"Running the turnscript.\")\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;function name=\"SetName\" parameters=\"param\"&gt;\n    params = Split(param,\"|\")\n    first = params[0]\n    last = params[1]\n    player.firstname = first\n    player.lastname = last\n  &lt;/function&gt;\n  &lt;function name=\"ShowName\"&gt;\n    msg (player.firstname +\" \"+player.lastname)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>Okay, let's flip back to the first way I had it working, just to show how the turn script is firing once for each <code>ASLEvent()</code>.</p>\n<p>The entire code:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"ASLEvents\"&gt;\n    &lt;gameid&gt;0414da24-6327-456f-bcb6-53f1d0246587&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;start type=\"script\"&gt;\n      JS.eval (\"getName = function(){  var firstName = prompt('What is your first name?');  var lastName = prompt('What is your last name?');  ASLEvent('SetName',firstName+'|'+lastName);  ASLEvent ('ShowName','bs_value');};\")\n      JS.getName ()\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"turnscript\"&gt;\n    &lt;enabled /&gt;\n    &lt;script&gt;\n      msg (\"Running the turnscript.\")\n    &lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;function name=\"SetName\" parameters=\"param\"&gt;\n    params = Split(param,\"|\")\n    first = params[0]\n    last = params[1]\n    player.firstname = first\n    player.lastname = last\n  &lt;/function&gt;\n  &lt;function name=\"ShowName\" parameters=\"bs_value\"&gt;\n    msg (player.firstname +\" \"+player.lastname)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/35004995-9f9b3058-fab7-11e7-994d-256c339281ae.png\" alt=\"image\"></p>\n<hr>\n<h3>So...</h3>\n<h4><strong><em>This is what I've (sort of) figured out so far:</em></strong></h4>\n<ul>\n<li>\n<p>It's best to only call one <code>ASLEvent()</code> at a time.</p>\n</li>\n<li>\n<p>An <code>ASLEvent()</code> can only handle one parameter (and I think it HAS TO pass a single parameter), but a Quest function can split that up into however many parameters you want (and you can call numerous Quest functions from a Quest function, if necessary).</p>\n</li>\n<li>\n<p>Use a <code>SetTurnTimeout(1)</code> to nest the Quest script you want to invoke AFTER an <code>ASLEvent()</code> which sets attributes which will be needed in the Quest script.</p>\n</li>\n</ul>\n<hr>\n<p>Things I don't know:</p>\n<ul>\n<li>How would I know?  (Ha-ha!)</li>\n</ul>\n<hr>\n<p>Anyone else have any input concerning <code>ASLEvent()</code>s?</p>\n<p>(I'm sure I've forgotten something, and I've even <em>more</em> certain I'm unaware of something.)</p>\n\n",
      "PostDate": "2018-01-16T18:33:39.2680612Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7af5986b-36a9-4e13-924b-f81d82a9d36d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**Resources:**\r\n\r\n---\r\n**[JavaScript to Quest with ASLEvent](http://docs.textadventures.co.uk/quest/ui-callback.html)**\r\n[docs.textadventures.co.uk/quest/ui-callback.html](http://docs.textadventures.co.uk/quest/ui-callback.html)\r\n<span style='font-family:\"Times New Roman\"'>JavaScript to Quest with ASLEvent. We can think of the game as two distinct parts , the game world, handled by Quest, and the user interface, handled by JavaScript in the browser window (even the desktop version uses a browser). The JS object can be uses to pass information and commands from Quest to JavaScript; how ...</span>\r\n\r\n---\r\n**[Quest 5 - Documentation](http://docs.textadventures.co.uk/quest/)**\r\n[docs.textadventures.co.uk/quest/](http://docs.textadventures.co.uk/quest/)\r\n<span style='font-family:\"Times New Roman\"'>... (simple options you can set from the game object); Display verbs · Custom commands and status pane (adding extra panes to your game); Simple Customisation · Customisation part 1 (three pages that explore customisation in detail); Customisation part 2 · Customisation part 3 · ASLEvent: Handling events in JavaScript ...</span>\r\n\r\n---\r\n**[Using Javascript](http://docs.textadventures.co.uk/quest/using_javascript.html)**\r\n[docs.textadventures.co.uk/quest/using_javascript.html](http://docs.textadventures.co.uk/quest/using_javascript.html)\r\n<span style='font-family:\"Times New Roman\"'>To do this, the button must have an attribute, “onclick”, with some Javascript code, using the special function ASLEvent : ASLEvent(\"ProcessButtonClick\", id);. This is Javascript calling a ProcessButtonClick function which should be defined in the Quest game. It passes a parameter - the id of the button clicked - to indicate ...</span>\r\n\r\n---\r\n**[Adding a Dialogue Panel](http://docs.textadventures.co.uk/quest/ui-dialogue.html)**\r\n[docs.textadventures.co.uk/quest/ui-dialogue.html](http://docs.textadventures.co.uk/quest/ui-dialogue.html)\r\n<span style='font-family:\"Times New Roman\"'>This will be done with the special JavaScript function ASLEvent , which is provided by Quest. A complication here is that that can only take two paramters; the name of the Quest function to use, and a string. Either we need to use it numerous times, once for each value, or use it once but send it all the data in a single string.</span>",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>Resources:</strong></p>\n<hr>\n<p><strong><a href=\"http://docs.textadventures.co.uk/quest/ui-callback.html\">JavaScript to Quest with ASLEvent</a></strong><br>\n<a href=\"http://docs.textadventures.co.uk/quest/ui-callback.html\">docs.textadventures.co.uk/quest/ui-callback.html</a><br>\n<span style=\"font-family: &quot;Times New Roman&quot;\">JavaScript to Quest with ASLEvent. We can think of the game as two distinct parts , the game world, handled by Quest, and the user interface, handled by JavaScript in the browser window (even the desktop version uses a browser). The JS object can be uses to pass information and commands from Quest to JavaScript; how ...</span></p>\n<hr>\n<p><strong><a href=\"http://docs.textadventures.co.uk/quest/\">Quest 5 - Documentation</a></strong><br>\n<a href=\"http://docs.textadventures.co.uk/quest/\">docs.textadventures.co.uk/quest/</a><br>\n<span style=\"font-family: &quot;Times New Roman&quot;\">... (simple options you can set from the game object); Display verbs · Custom commands and status pane (adding extra panes to your game); Simple Customisation · Customisation part 1 (three pages that explore customisation in detail); Customisation part 2 · Customisation part 3 · ASLEvent: Handling events in JavaScript ...</span></p>\n<hr>\n<p><strong><a href=\"http://docs.textadventures.co.uk/quest/using_javascript.html\">Using Javascript</a></strong><br>\n<a href=\"http://docs.textadventures.co.uk/quest/using_javascript.html\">docs.textadventures.co.uk/quest/using_javascript.html</a><br>\n<span style=\"font-family: &quot;Times New Roman&quot;\">To do this, the button must have an attribute, “onclick”, with some Javascript code, using the special function ASLEvent : ASLEvent(\"ProcessButtonClick\", id);. This is Javascript calling a ProcessButtonClick function which should be defined in the Quest game. It passes a parameter - the id of the button clicked - to indicate ...</span></p>\n<hr>\n<p><strong><a href=\"http://docs.textadventures.co.uk/quest/ui-dialogue.html\">Adding a Dialogue Panel</a></strong><br>\n<a href=\"http://docs.textadventures.co.uk/quest/ui-dialogue.html\">docs.textadventures.co.uk/quest/ui-dialogue.html</a><br>\n<span style=\"font-family: &quot;Times New Roman&quot;\">This will be done with the special JavaScript function ASLEvent , which is provided by Quest. A complication here is that that can only take two paramters; the name of the Quest function to use, and a string. Either we need to use it numerous times, once for each value, or use it once but send it all the data in a single string.</span></p>\n\n",
      "PostDate": "2018-01-16T18:56:10.3907347Z",
      "LastEditDate": "2018-01-16T19:00:40.0617351Z",
      "link": null
    }
  ]
}
