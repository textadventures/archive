{
  "Topic": {
    "TopicId": "br0xweduwuas0ojbrv-lxw",
    "ForumId": "10",
    "Title": "changing an objects description after using verb",
    "LastUpdated": "2020-04-27T09:46:13.5154251Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7852db01-2049-4348-aa24-77ff15211a85",
      "UserId": 477235,
      "Username": "Gmarcroft",
      "AvatarUrl": "https://secure.gravatar.com/avatar/09efb7a62b2d7284ca88ad5a19dd8ffa?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I want to change the description of an object following an interaction with the object by the character:\r\n\r\nI have a bed, the description says that is messy and my character has the option to tidy the bed.  I have set the tidy up verb using a script to show a message and then I want to run additional scripts that 1. remove the tidy verb from the object so the character can't repeatedly tidy the bed  and 2. allow me to change the description of the object so that it reflects the new state of the object (now tidy).  How can I do this?",
      "EditableFormat": "markdown",
      "HTML": "<p>I want to change the description of an object following an interaction with the object by the character:</p>\n<p>I have a bed, the description says that is messy and my character has the option to tidy the bed.  I have set the tidy up verb using a script to show a message and then I want to run additional scripts that 1. remove the tidy verb from the object so the character can't repeatedly tidy the bed  and 2. allow me to change the description of the object so that it reflects the new state of the object (now tidy).  How can I do this?</p>\n\n",
      "PostDate": "2020-04-27T09:46:13.5154251Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5eee46a3-33e1-4152-a4f2-407d551a71b0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are 3 main ways to go about changing a description.\r\n\r\n**1. The 'look' script**\r\nYou can make the bed's description be a script. Then you can check if the verb has been run yet, and show a different description accordingly. You could check if the verb has been removed - but it's usually better to set a flag, so that \r\n```\r\nmsg (\"It's your bed. You sleep here.\")\r\nif (GetBoolean (this, \"istidy\")) {\r\n  msg (\"It looks a lot better now the sheets are properly straightened.\")\r\n}\r\nelse {\r\n  msg (\"The sheets are all rumpled, half on the bed and half on the floor. You really should {command:tidy bed:tidy it up}.\")\r\n}\r\n```\r\n\r\n**2. Text processor**\r\nThe text processor makes it easier to have an object description that varies depending on game events. Similar to the above:\r\n<pre><code>It's your bed. You sleep here. The sheets are really {either GetBoolean (<b style=\"color: blue; font-family: initial\">bed</b>, \"istidy\"):neat:messy} right now.</code></pre>\r\nNote that in this version, the blue <b style=\"color: blue\">bed</b> indicates the *name* of the object, not it's alias. In method 1 I used *this* instead to refer to the current object, but I think the text processor doesn't let you use *this* in a look description.\r\n\r\nIn both of these cases, it's checking a flag to see if the bed is tidy. So the verb script would look something like:\r\n```\r\nif (GetBoolean (this, \"istidy\")) {\r\n  msg (\"The bed is already tidy. You don't need to do it again.\")\r\n}\r\nelse {\r\n  msg (\"You tidy the bed.\")\r\n  this.istidy = true\r\n}\r\n```\r\n\r\n**3. Changing the description**\r\nThis can be simpler, but  runs into problems if an object has multiple ways in which it can be changed.\r\nThe verb script in this case would just have an extra line with the new description:\r\n<pre><code>if (GetBoolean (this, \"istidy\")) {\r\n  msg (\"The bed is already tidy. You don't need to do it again.\")\r\n}\r\nelse {\r\n  msg (\"You tidy the bed.\")\r\n  this.istidy = true\r\n<b style=\"color: green\">  this.look = \"Your bed. It looks a lot better now that it's tidy.\"</b>\r\n}</code></pre>\r\n\r\n**Removing the verb**\r\nIn the scripts above, I've got it so that the \"tidy\" verb will generate a sensible message if the player tries to do it twice.\r\n\r\nIf you also want to remove it from the dropdown menu, you can use add the line:\r\n```\r\nthis.generatedverbslist = ListExclude (this.generatedverbslist, \"Tidy\")\r\n```\r\n\r\nThe way displayed verbs are handled is actually quite weird. There are three lists:\r\n* `displayverbs` is used when the player is in the room with an object. It can be edited on the object's \"Object\" tab.\r\n* `inventoryverbs` is used when the player is carrying the object. It can be edited on the object's \"Object\" tab.\r\n* `generatedverbslist` is an extra list which is generated automatically from the verbs on the object's \"Verbs\" tab.\r\n\r\nOn the \"Object\" tab, ticking \"Disable automatically generated display verb list for this object\" will ignore `generatedverbslist`; in which case you can put all the verbs onto the lists manually, and remove the verb from `displayverbs` when you want to remove it. Ticking \"Only display verbs from this object's Verbs tab\" will cause it to use `generatedverbslist` only.\r\n\r\n**_Actually_ removing the verb**\r\nIf you want to actually remove the _Tidy_ verb from the bed, you can do that. This will mean that you get the standard response \"I can't tidy it\" when you try to tidy the bed. Your verb script would look like:\r\n\r\n```\r\nmsg (\"You tidy the bed.\")\r\nthis.tidy = null\r\nthis.generatedverbslist = null\r\n```\r\nNote that I set `this.tidy` to null; deleting the script from the object. But then I also need to set `this.generatedverbslist` to null, otherwise it would still appear on the menus and verb buttons. Setting `this.generatedverbslist` to null forces the Quest engine to regenerate the command.\r\n\r\nIf you are using this version with the text processor code above, you'd want to change `GetBoolean (bed, \"istidy\")` to `HasScript (bed, \"tidy\")` - there's no need to have a flag as well when you can just check for the presence of the verb.",
      "EditableFormat": "markdown",
      "HTML": "<p>There are 3 main ways to go about changing a description.</p>\n<p><strong>1. The 'look' script</strong><br>\nYou can make the bed's description be a script. Then you can check if the verb has been run yet, and show a different description accordingly. You could check if the verb has been removed - but it's usually better to set a flag, so that</p>\n<pre><code>msg (\"It's your bed. You sleep here.\")\nif (GetBoolean (this, \"istidy\")) {\n  msg (\"It looks a lot better now the sheets are properly straightened.\")\n}\nelse {\n  msg (\"The sheets are all rumpled, half on the bed and half on the floor. You really should {command:tidy bed:tidy it up}.\")\n}\n</code></pre>\n<p><strong>2. Text processor</strong><br>\nThe text processor makes it easier to have an object description that varies depending on game events. Similar to the above:</p>\n<pre><code>It's your bed. You sleep here. The sheets are really {either GetBoolean (<b style=\"color: blue; font-family: initial\">bed</b>, \"istidy\"):neat:messy} right now.</code></pre>\n<p>Note that in this version, the blue <b style=\"color: blue\">bed</b> indicates the <em>name</em> of the object, not it's alias. In method 1 I used <em>this</em> instead to refer to the current object, but I think the text processor doesn't let you use <em>this</em> in a look description.</p>\n<p>In both of these cases, it's checking a flag to see if the bed is tidy. So the verb script would look something like:</p>\n<pre><code>if (GetBoolean (this, \"istidy\")) {\n  msg (\"The bed is already tidy. You don't need to do it again.\")\n}\nelse {\n  msg (\"You tidy the bed.\")\n  this.istidy = true\n}\n</code></pre>\n<p><strong>3. Changing the description</strong><br>\nThis can be simpler, but  runs into problems if an object has multiple ways in which it can be changed.<br>\nThe verb script in this case would just have an extra line with the new description:</p>\n<pre><code>if (GetBoolean (this, \"istidy\")) {\n  msg (\"The bed is already tidy. You don't need to do it again.\")\n}\nelse {\n  msg (\"You tidy the bed.\")\n  this.istidy = true\n<b style=\"color: green\">  this.look = \"Your bed. It looks a lot better now that it's tidy.\"</b>\n}</code></pre>\n<p><strong>Removing the verb</strong><br>\nIn the scripts above, I've got it so that the \"tidy\" verb will generate a sensible message if the player tries to do it twice.</p>\n<p>If you also want to remove it from the dropdown menu, you can use add the line:</p>\n<pre><code>this.generatedverbslist = ListExclude (this.generatedverbslist, \"Tidy\")\n</code></pre>\n<p>The way displayed verbs are handled is actually quite weird. There are three lists:</p>\n<ul>\n<li><code>displayverbs</code> is used when the player is in the room with an object. It can be edited on the object's \"Object\" tab.</li>\n<li><code>inventoryverbs</code> is used when the player is carrying the object. It can be edited on the object's \"Object\" tab.</li>\n<li><code>generatedverbslist</code> is an extra list which is generated automatically from the verbs on the object's \"Verbs\" tab.</li>\n</ul>\n<p>On the \"Object\" tab, ticking \"Disable automatically generated display verb list for this object\" will ignore <code>generatedverbslist</code>; in which case you can put all the verbs onto the lists manually, and remove the verb from <code>displayverbs</code> when you want to remove it. Ticking \"Only display verbs from this object's Verbs tab\" will cause it to use <code>generatedverbslist</code> only.</p>\n<p><strong><em>Actually</em> removing the verb</strong><br>\nIf you want to actually remove the <em>Tidy</em> verb from the bed, you can do that. This will mean that you get the standard response \"I can't tidy it\" when you try to tidy the bed. Your verb script would look like:</p>\n<pre><code>msg (\"You tidy the bed.\")\nthis.tidy = null\nthis.generatedverbslist = null\n</code></pre>\n<p>Note that I set <code>this.tidy</code> to null; deleting the script from the object. But then I also need to set <code>this.generatedverbslist</code> to null, otherwise it would still appear on the menus and verb buttons. Setting <code>this.generatedverbslist</code> to null forces the Quest engine to regenerate the command.</p>\n<p>If you are using this version with the text processor code above, you'd want to change <code>GetBoolean (bed, \"istidy\")</code> to <code>HasScript (bed, \"tidy\")</code> - there's no need to have a flag as well when you can just check for the presence of the verb.</p>\n\n",
      "PostDate": "2020-04-27T10:42:42.2137078Z",
      "LastEditDate": "2020-04-28T12:31:10.2852991Z",
      "link": null
    },
    {
      "PostId": "0a5a6bfd-91a1-4e1a-8cbd-b55eaac9e1d0",
      "UserId": 477235,
      "Username": "Gmarcroft",
      "AvatarUrl": "https://secure.gravatar.com/avatar/09efb7a62b2d7284ca88ad5a19dd8ffa?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow thank you so much for such a comprehensive answer.  I'll have a try and see how I get on.  Thank you!!! :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow thank you so much for such a comprehensive answer.  I'll have a try and see how I get on.  Thank you!!! :)</p>\n\n",
      "PostDate": "2020-04-28T09:51:33.748875Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
