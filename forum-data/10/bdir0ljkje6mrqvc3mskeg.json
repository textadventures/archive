{
  "Topic": {
    "TopicId": "bdir0ljkje6mrqvc3mskeg",
    "ForumId": "10",
    "Title": "Conjugating objects in descriptions",
    "LastUpdated": "2018-06-03T16:15:43.6621351Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "61acbc92-699f-418e-8dbb-e4df9ed71bd1",
      "UserId": 362499,
      "Username": "quaestor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f932fa5e212b8dd84c8d445b7d84b218?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would like to know what is the best way to conjugate verbs describing an object when the object's number is unknown. For example, when dealing with common functionality across multiple objects of variable plurality through object types and displaying a simple default message defined in the type itself, I want to be able to write, dynamically, \"it is red\" or \"they are red\". The article is defined on an object-per-object basis, and as a basic attribute I am satisfied with it. However, verb conjugation is a problem. I do not want to create a passive verb, I do not want to add a redundant plurality attribute, and as there are multiple types of plural objects, parsing them all is awkward, though it seems like the best solution from my perspective. Is there any better way of doing it? If not, what IS the syntax for validating whether an object's type is singular or plural?",
      "EditableFormat": "markdown",
      "HTML": "<p>I would like to know what is the best way to conjugate verbs describing an object when the object's number is unknown. For example, when dealing with common functionality across multiple objects of variable plurality through object types and displaying a simple default message defined in the type itself, I want to be able to write, dynamically, \"it is red\" or \"they are red\". The article is defined on an object-per-object basis, and as a basic attribute I am satisfied with it. However, verb conjugation is a problem. I do not want to create a passive verb, I do not want to add a redundant plurality attribute, and as there are multiple types of plural objects, parsing them all is awkward, though it seems like the best solution from my perspective. Is there any better way of doing it? If not, what IS the syntax for validating whether an object's type is singular or plural?</p>\n\n",
      "PostDate": "2018-06-03T16:15:43.6621351Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "705d8476-418a-44e0-86c6-a1ae81cb1a8e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try using the `Conjugate` function?\r\n\r\n`msg (GetDisplayAlias(obj) + \" \" + Conjugate (obj, \"answer\") + \" your question.\")`\r\n\r\n(the English one has proper lists of verb forms for \"do\" and \"be\"; for everything else it looks like it just decides if it should add an 's'. Different language libraries might have more advanced forms of this function)\r\n\r\nIt's also used by `WriteVerb`. Depending on the object you pass it, `WriteVerb (obj, \"be\")` could return \"He is\", \"You are\", \"They are\", and so on.",
      "EditableFormat": "markdown",
      "HTML": "<p>Try using the <code>Conjugate</code> function?</p>\n<p><code>msg (GetDisplayAlias(obj) + \" \" + Conjugate (obj, \"answer\") + \" your question.\")</code></p>\n<p>(the English one has proper lists of verb forms for \"do\" and \"be\"; for everything else it looks like it just decides if it should add an 's'. Different language libraries might have more advanced forms of this function)</p>\n<p>It's also used by <code>WriteVerb</code>. Depending on the object you pass it, <code>WriteVerb (obj, \"be\")</code> could return \"He is\", \"You are\", \"They are\", and so on.</p>\n\n",
      "PostDate": "2018-06-03T16:39:58.6265216Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "56614c1e-c4fc-4834-a4d2-7d8fb102d57f",
      "UserId": 362499,
      "Username": "quaestor",
      "AvatarUrl": "https://secure.gravatar.com/avatar/f932fa5e212b8dd84c8d445b7d84b218?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you, that seems perfect. I thought that Conjugate required creating a new Verb entry since the documentation did not specify the argument type.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, that seems perfect. I thought that Conjugate required creating a new Verb entry since the documentation did not specify the argument type.</p>\n\n",
      "PostDate": "2018-06-03T16:51:56.6971291Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6644cc5c-ecd2-4e17-99d8-849b4349d854",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "On the desktop version, you could override the function to add your own verbs, if you want it to handle more irregular ones. The version I see in English.aslx looks like:\r\n```\r\n  <function name=\"Conjugate\" type=\"string\" parameters=\"obj, verb\">\r\n    gender = obj.gender\r\n    if (gender = \"he\" or gender = \"she\") {\r\n      gender = \"it\"\r\n    }\r\n    switch (verb) {\r\n      case (\"be\") {\r\n        switch (gender) {\r\n          case (\"i\") {\r\n            return (\"am\")\r\n          }\r\n          case (\"you\") {\r\n            return (\"are\")\r\n          }\r\n          case (\"it\") {\r\n            return (\"is\")\r\n          }\r\n          case (\"we\") {\r\n            return (\"are\")\r\n          }\r\n          case (\"they\") {\r\n            return (\"are\")\r\n          }\r\n          default {\r\n            return (\"is\")\r\n          }\r\n        }\r\n      }\r\n      case (\"do\") {\r\n        switch (gender) {\r\n          case (\"i\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"you\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"it\") {\r\n            return (\"does\")\r\n          }\r\n          case (\"we\") {\r\n            return (\"do\")\r\n          }\r\n          case (\"they\") {\r\n            return (\"do\")\r\n          }\r\n          default {\r\n            return (\"do\")\r\n          }      \r\n        }\r\n      }\r\n      default {\r\n        if (gender = \"it\") {\r\n          return (verb + \"s\")\r\n        }\r\n        else {\r\n          return (verb)\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n```\r\nSo if there's more irregular verbs, you can just add more `case` blocks to that.",
      "EditableFormat": "markdown",
      "HTML": "<p>On the desktop version, you could override the function to add your own verbs, if you want it to handle more irregular ones. The version I see in English.aslx looks like:</p>\n<pre><code>  &lt;function name=\"Conjugate\" type=\"string\" parameters=\"obj, verb\"&gt;\n    gender = obj.gender\n    if (gender = \"he\" or gender = \"she\") {\n      gender = \"it\"\n    }\n    switch (verb) {\n      case (\"be\") {\n        switch (gender) {\n          case (\"i\") {\n            return (\"am\")\n          }\n          case (\"you\") {\n            return (\"are\")\n          }\n          case (\"it\") {\n            return (\"is\")\n          }\n          case (\"we\") {\n            return (\"are\")\n          }\n          case (\"they\") {\n            return (\"are\")\n          }\n          default {\n            return (\"is\")\n          }\n        }\n      }\n      case (\"do\") {\n        switch (gender) {\n          case (\"i\") {\n            return (\"do\")\n          }\n          case (\"you\") {\n            return (\"do\")\n          }\n          case (\"it\") {\n            return (\"does\")\n          }\n          case (\"we\") {\n            return (\"do\")\n          }\n          case (\"they\") {\n            return (\"do\")\n          }\n          default {\n            return (\"do\")\n          }      \n        }\n      }\n      default {\n        if (gender = \"it\") {\n          return (verb + \"s\")\n        }\n        else {\n          return (verb)\n        }\n      }\n    }\n  &lt;/function&gt;\n</code></pre>\n<p>So if there's more irregular verbs, you can just add more <code>case</code> blocks to that.</p>\n\n",
      "PostDate": "2018-06-03T17:09:37.4885632Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b4b64351-b722-430d-b114-f0a7ffc6368c",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The above is spam. They are getting more clever, and copying text from earlier posts to make it look like they are joining the discussion.\r\n\r\n[to whoever deletes it, please delete this too when you do]",
      "EditableFormat": "markdown",
      "HTML": "<p>The above is spam. They are getting more clever, and copying text from earlier posts to make it look like they are joining the discussion.</p>\n<p>[to whoever deletes it, please delete this too when you do]</p>\n\n",
      "PostDate": "2018-06-25T06:51:24.0781235Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
