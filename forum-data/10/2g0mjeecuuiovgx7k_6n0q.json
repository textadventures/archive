{
  "Topic": {
    "TopicId": "2g0mjeecuuiovgx7k_6n0q",
    "ForumId": "10",
    "Title": "NPC random pathfinding",
    "LastUpdated": "2017-12-06T02:45:53.4685781Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0cb96c63-5687-4bc1-858b-39ac0fe9c719",
      "UserId": 334590,
      "Username": "doubleoathseven",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I'm building a game at the moment and have a cleaner droid who moves randomly from room to room among a set range.\r\n\r\nI'm quite deliberately moving the object rather than getting it to use exits, simulating the fact that the little fella is using service hatches that the player is too large to fit through, so that it can 'clean' (ie pick up objects under a certain volume left around and drop them off in a specific 'bin' object) rooms that are locked. Note: I'm just working on the pathfinding at the moment and will get to the cleaning scripts later.\r\n\r\nSo, the game runs this at gamestart:\r\n```\r\nr21apath = NewObjectList ()\r\nlist add = (r21apath, aviary)\r\nlist add = (r21apath, courtyard)\r\nlist add = (r21apath, dark hall)\r\nlist add = (r21apath, the cells)\r\nlist add = (r21apath, dungeon)\r\n```\r\nAs well as starting an 8-second BotTimer. \r\n\r\nOur little r21a, the cleaner, starts in the courtyard. The courtyard is the third room the player ever enters, so the droid doesn't do anything, in order to guarantee you see it.\r\n\r\nBut the first time you look at r21a, it sets the BotTimer to the following script :\r\n```\r\nn = GetRandomInt (0, 4)\r\nif (r21a.parent = player.parent) {\r\n\tmsg (\"r21a leaves \" + r21a.parent + \"\")\r\n}\r\nr21a.parent = ObjectListItem(r21apath, n) \r\nif (r21a.parent = player.parent) {\r\n\tmsg (\"r21a enters \" + r21a.parent + \"\")\r\n}\r\n```\r\n\r\nPlease note I've been busy at work and have been writing this on my phone and haven't really had the chance to put the code into Quest yet.\r\n\r\nSo my questions (finally),  to those coders more proficient than I, are:\r\n\r\n1. Does this look workable?\r\n\r\n2. Would there be a DRY way to implement this as a function? I'd imagine something along the lines of giving the cleaner and other pathfinders a 'pathfinder' flag, running a foreach at game-start to create a list named after each pathfinder. Can you create a list and have its name decided by a script? Could a pathfinder have its visitable rooms set as attributes and then the gamestart foreach could fetch those details to add to the list?\r\n\r\n3. Help? ",
      "EditableFormat": "markdown",
      "HTML": "<p>So I'm building a game at the moment and have a cleaner droid who moves randomly from room to room among a set range.</p>\n<p>I'm quite deliberately moving the object rather than getting it to use exits, simulating the fact that the little fella is using service hatches that the player is too large to fit through, so that it can 'clean' (ie pick up objects under a certain volume left around and drop them off in a specific 'bin' object) rooms that are locked. Note: I'm just working on the pathfinding at the moment and will get to the cleaning scripts later.</p>\n<p>So, the game runs this at gamestart:</p>\n<pre><code>r21apath = NewObjectList ()\nlist add = (r21apath, aviary)\nlist add = (r21apath, courtyard)\nlist add = (r21apath, dark hall)\nlist add = (r21apath, the cells)\nlist add = (r21apath, dungeon)\n</code></pre>\n<p>As well as starting an 8-second BotTimer.</p>\n<p>Our little r21a, the cleaner, starts in the courtyard. The courtyard is the third room the player ever enters, so the droid doesn't do anything, in order to guarantee you see it.</p>\n<p>But the first time you look at r21a, it sets the BotTimer to the following script :</p>\n<pre><code>n = GetRandomInt (0, 4)\nif (r21a.parent = player.parent) {\n\tmsg (\"r21a leaves \" + r21a.parent + \"\")\n}\nr21a.parent = ObjectListItem(r21apath, n) \nif (r21a.parent = player.parent) {\n\tmsg (\"r21a enters \" + r21a.parent + \"\")\n}\n</code></pre>\n<p>Please note I've been busy at work and have been writing this on my phone and haven't really had the chance to put the code into Quest yet.</p>\n<p>So my questions (finally),  to those coders more proficient than I, are:</p>\n<ol>\n<li>\n<p>Does this look workable?</p>\n</li>\n<li>\n<p>Would there be a DRY way to implement this as a function? I'd imagine something along the lines of giving the cleaner and other pathfinders a 'pathfinder' flag, running a foreach at game-start to create a list named after each pathfinder. Can you create a list and have its name decided by a script? Could a pathfinder have its visitable rooms set as attributes and then the gamestart foreach could fetch those details to add to the list?</p>\n</li>\n<li>\n<p>Help?</p>\n</li>\n</ol>\n\n",
      "PostDate": "2017-12-06T02:45:53.4685781Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "34664c2e-38f1-4a41-81d7-01315fdceb12",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looks good...\r\nAnd a good idea about a function...\r\nAnd if the function, or functions includes a map, you could expand where the droid goes...\r\nLike this:\r\n(not real code)\r\nfunction Droid_move()\r\nIf r21a.parent =aviary {\r\nr21apath=(\"north room, east room,courtyard\", \",\")\r\n}\r\nif r21a.parent =Courtyard{\r\nr21apath=(\"aviary,dark hall,the cells,dungeon\", \",\")\r\n}\r\nif r21a.parent =dark hall {\r\nr21apath=(\"room1,room2,room3,room4,room5,courtyard\", \",\")\r\n}\r\nthen do this for every room the droid can go to and it allows you to control where it goes.\r\n(someone else will give you a ForEachExit search thingy that will do the same...)\r\n\r\nThen you random selected room from the r21apath list\r\n\r\nOne thing to watch out for is spaces...\r\nr21apath=(\"room1,room2,room3,room4,room5,courtyard\", \",\")\r\nis not the same as\r\nr21apath=(\"room1, room2, room3, room4, room5, courtyard\", \",\")\r\nQuest sees the space in front of the room names in the list and tells you that room1 is not the same as room1...\r\n(Took a while to find that one!!!)\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Looks good...<br>\nAnd a good idea about a function...<br>\nAnd if the function, or functions includes a map, you could expand where the droid goes...<br>\nLike this:<br>\n(not real code)<br>\nfunction Droid_move()<br>\nIf r21a.parent =aviary {<br>\nr21apath=(\"north room, east room,courtyard\", \",\")<br>\n}<br>\nif r21a.parent =Courtyard{<br>\nr21apath=(\"aviary,dark hall,the cells,dungeon\", \",\")<br>\n}<br>\nif r21a.parent =dark hall {<br>\nr21apath=(\"room1,room2,room3,room4,room5,courtyard\", \",\")<br>\n}<br>\nthen do this for every room the droid can go to and it allows you to control where it goes.<br>\n(someone else will give you a ForEachExit search thingy that will do the same...)</p>\n<p>Then you random selected room from the r21apath list</p>\n<p>One thing to watch out for is spaces...<br>\nr21apath=(\"room1,room2,room3,room4,room5,courtyard\", \",\")<br>\nis not the same as<br>\nr21apath=(\"room1, room2, room3, room4, room5, courtyard\", \",\")<br>\nQuest sees the space in front of the room names in the list and tells you that room1 is not the same as room1...<br>\n(Took a while to find that one!!!)</p>\n\n",
      "PostDate": "2017-12-06T03:50:31.0778317Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e98a27cf-046f-47ea-9eb7-874559ed1ee6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`r21apath` needs to be attached to an object. Personally, I would give the r21a object an attribute called \"path\", so it is `r21a.path`. This answers your point 2; just check if an object has a `path` attribute.\r\n\r\nYou could put all the rooms r21a can visit inside another room (one the player cannot access), representing the zone. Then (supposing it is called \"cleaning zone\"):\r\n```\r\nr21a.path = GetDirectChildren(cleaning zone)\r\n```\r\nAnd you could use `PickOneObject` to select the next room. Also check if the room actually changed. The then could be (assuming all rooms have aliases).\r\n```\r\nnewRoom = PickOneObject (r21a.path)\r\nif (not newRoom = r21a.parent) {\r\n  if (r21a.parent = player.parent) {\r\n    msg (\"r21a leaves \" + r21a.parent.alias + \".\")\r\n  }\r\n  if (newRoom  = player.parent) {\r\n    msg (\"r21a enters \" + r21a.parent.alias + \".\")\r\n  }\r\n  r21a.parent = newRoom \r\n}\r\n```\r\n\r\nYou could easily put that in a function, just change \"r21a\" for \"npc\", and have \"npc\" as a parameter.\r\n\r\n\r\nMore advanced...  If you are using the desktop version, the best way to make it DRY is using types. Have the above as a script on the \"robot type\", and change \"r21a\" for \"this\" (\"this\" indicates the thing the script is attached to), called \"takeaturn\". Then have all the robots inherit from the \"robot type\", which in tirn inherits from the \"npc type\". Each turn (i.e., 8 seconds), run the \"takeaturn\" script of all the NPCs; for the robot NPCs, that would be the script above, but other NPCs could have their own script for their own behaviour.\r\n```\r\nforeach (npc, FilterByType(AllObjects(), \"npc type\")) {\r\n  do(npc, \"takeaturn\")\r\n}\r\n```\r\n\r\nNot relevant in this case, but for completeness Quest does have `PickOneExit` and `PickOneUnlockedExit` for when you want an NPC to use exits.",
      "EditableFormat": "markdown",
      "HTML": "<p><code>r21apath</code> needs to be attached to an object. Personally, I would give the r21a object an attribute called \"path\", so it is <code>r21a.path</code>. This answers your point 2; just check if an object has a <code>path</code> attribute.</p>\n<p>You could put all the rooms r21a can visit inside another room (one the player cannot access), representing the zone. Then (supposing it is called \"cleaning zone\"):</p>\n<pre><code>r21a.path = GetDirectChildren(cleaning zone)\n</code></pre>\n<p>And you could use <code>PickOneObject</code> to select the next room. Also check if the room actually changed. The then could be (assuming all rooms have aliases).</p>\n<pre><code>newRoom = PickOneObject (r21a.path)\nif (not newRoom = r21a.parent) {\n  if (r21a.parent = player.parent) {\n    msg (\"r21a leaves \" + r21a.parent.alias + \".\")\n  }\n  if (newRoom  = player.parent) {\n    msg (\"r21a enters \" + r21a.parent.alias + \".\")\n  }\n  r21a.parent = newRoom \n}\n</code></pre>\n<p>You could easily put that in a function, just change \"r21a\" for \"npc\", and have \"npc\" as a parameter.</p>\n<p>More advanced...  If you are using the desktop version, the best way to make it DRY is using types. Have the above as a script on the \"robot type\", and change \"r21a\" for \"this\" (\"this\" indicates the thing the script is attached to), called \"takeaturn\". Then have all the robots inherit from the \"robot type\", which in tirn inherits from the \"npc type\". Each turn (i.e., 8 seconds), run the \"takeaturn\" script of all the NPCs; for the robot NPCs, that would be the script above, but other NPCs could have their own script for their own behaviour.</p>\n<pre><code>foreach (npc, FilterByType(AllObjects(), \"npc type\")) {\n  do(npc, \"takeaturn\")\n}\n</code></pre>\n<p>Not relevant in this case, but for completeness Quest does have <code>PickOneExit</code> and <code>PickOneUnlockedExit</code> for when you want an NPC to use exits.</p>\n\n",
      "PostDate": "2017-12-06T08:22:29.9611296Z",
      "LastEditDate": "2017-12-06T08:38:43.9176901Z",
      "link": null
    },
    {
      "PostId": "5ca2493a-204a-43d9-b821-135b8c87c8aa",
      "UserId": 334590,
      "Username": "doubleoathseven",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Pixie, thanks!\r\n\r\nI worked through that and made a few minor adjustments - both because of a few different gameplay elements that I had that were were interfering and also because I likely made errors in code entry (my pc has no internet connection, so I didn't have the option of copying and pasting your code).\r\n\r\nI've edited the ```lookat``` command so that it sets a ```lookedat``` flag and coded that into the timer as ```if (GetBoolean(object, \"lookedat\")){``` expression. Mainly because I want the player to encounter the NPCs in specific rooms - bit of a hassle if they wander off before you even get there.\r\n\r\nI'll post the code when I can plug the computer in again.\r\n\r\nAs a quick side note, how would you deal with NPCs that share some but not all of their paths? Logically it seems to me that the overlapping rooms would have to both be nested inside two uber-rooms. I didn't think Quest could do that. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Pixie, thanks!</p>\n<p>I worked through that and made a few minor adjustments - both because of a few different gameplay elements that I had that were were interfering and also because I likely made errors in code entry (my pc has no internet connection, so I didn't have the option of copying and pasting your code).</p>\n<p>I've edited the <code>lookat</code> command so that it sets a <code>lookedat</code> flag and coded that into the timer as <code>if (GetBoolean(object, \"lookedat\")){</code> expression. Mainly because I want the player to encounter the NPCs in specific rooms - bit of a hassle if they wander off before you even get there.</p>\n<p>I'll post the code when I can plug the computer in again.</p>\n<p>As a quick side note, how would you deal with NPCs that share some but not all of their paths? Logically it seems to me that the overlapping rooms would have to both be nested inside two uber-rooms. I didn't think Quest could do that.</p>\n\n",
      "PostDate": "2017-12-06T12:54:42.9631931Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7c84e9d8-2811-4b19-a6d1-39a243335370",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If they share some but not all rooms in their paths, you might have to explicitly create the path attribute as you did in your first example.\r\n\r\nI'd probably have done this using exits anyway, but had the NPC not check if the exit is locked or visible (so you can use an invisible exit to indicate a path NPCs can take but the player can't).",
      "EditableFormat": "markdown",
      "HTML": "<p>If they share some but not all rooms in their paths, you might have to explicitly create the path attribute as you did in your first example.</p>\n<p>I'd probably have done this using exits anyway, but had the NPC not check if the exit is locked or visible (so you can use an invisible exit to indicate a path NPCs can take but the player can't).</p>\n\n",
      "PostDate": "2017-12-09T11:18:09.6640913Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "08ade023-45ae-4e00-b427-fcfa881ad9d2",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, apologies to doubleoathseven for hijacking the thread, but I have a similar issue in my game.\r\n\r\nI'd like my npc character to either follow a pre-determined path between 5 rooms for example;\r\nroom1 => room2 => room3 => room2 => room4 => room5, then reverse direction back to room1 then repeat.\r\n\r\nOr to randomly select it's route based on the exits available between those 5 rooms.\r\n\r\nThere would be other rooms off these 5 where the npc character wouldn't go/patrol, so an attribute would be attached to these 5 rooms, eg. 'patrol route'.\r\n\r\nNot sure yet which option to go with, but also unsure how to go about coding either option.\r\nI've looked at previous threads but can't seem to find a solution unless I've missed something.\r\nCan anyone help.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, apologies to doubleoathseven for hijacking the thread, but I have a similar issue in my game.</p>\n<p>I'd like my npc character to either follow a pre-determined path between 5 rooms for example;<br>\nroom1 =&gt; room2 =&gt; room3 =&gt; room2 =&gt; room4 =&gt; room5, then reverse direction back to room1 then repeat.</p>\n<p>Or to randomly select it's route based on the exits available between those 5 rooms.</p>\n<p>There would be other rooms off these 5 where the npc character wouldn't go/patrol, so an attribute would be attached to these 5 rooms, eg. 'patrol route'.</p>\n<p>Not sure yet which option to go with, but also unsure how to go about coding either option.<br>\nI've looked at previous threads but can't seem to find a solution unless I've missed something.<br>\nCan anyone help.</p>\n\n",
      "PostDate": "2017-12-13T09:45:42.46403Z",
      "LastEditDate": "2017-12-13T10:04:23.9169499Z",
      "link": null
    },
    {
      "PostId": "26721e3f-3981-427d-9fdf-1cf9dc8e7d3a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n--------------------------------------------------------------\r\n\r\n@ Dr. Agon:\r\n\r\n-------------------------------\r\n\r\nFor your 'non-random' method, you're asking for doing a recursion operation, hehe:\r\n\r\n(in trying to do this, I realized that direct recursion couldn't work, so I had to create an indirect recursion effect/operation, lol)\r\n\r\n(hopefully this does work... been working on this a long time... and I'm still not really comfortable with recursion, as I've not really done much work/practice with it. I'm sure Pixie and/or mrangel can create much more efficient coding, as I'm still a noob at this type, recursion or whatever design, of coding, as it's advanced coding design for me, I really struggled with this code of mine. Been working on this post/code for some hours now, sighs)\r\n\r\n(I'll try to explain it / walk you through it, if you can't follow/understand it, just let me know)\r\n\r\n(I can add more scalable/dynamic scripting, but this is just an example, let me know if you want or need help with more scalability/dynamic-ness of it)\r\n\r\n```\r\n<delegate name=\"recursion_delegate\" parameters=\"object_parameter\" />\r\n\r\n<game name=\"example_game\">\r\n</game>\r\n\r\n<object name=\"room_data_object\">\r\n\r\n  <object name=\"room\">\r\n  </object>\r\n\r\n  <object name=\"npc_1_room_data_object\">\r\n\r\n    <object name=\"room_1\">\r\n    </object>\r\n\r\n    <object name=\"room_2\">\r\n    </object>\r\n\r\n    <object name=\"room_3\">\r\n    </object>\r\n\r\n    <object name=\"room_4\">\r\n    </object>\r\n\r\n    <object name=\"room_5\">\r\n    </object>\r\n\r\n  </object>\r\n\r\n  <object name=\"npc_2_room_data_object\">\r\n\r\n    <object name=\"room_6\">\r\n    </object>\r\n\r\n    <object name=\"room_7\">\r\n    </object>\r\n\r\n    <object name=\"room_8\">\r\n    </object>\r\n\r\n    <object name=\"room_9\">\r\n    </object>\r\n\r\n    <object name=\"room_10\">\r\n    </object>\r\n\r\n  </object>\r\n\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <attr name=\"parent\"> type=\"object\">room</attr>\r\n\r\n  <attr name=\"changedparent\" type=\"script\">\r\n    rundelegate (recursion_object, \"recursion_script_attribute\", npc_1)\r\n    rundelegate (recursion_object, \"recursion_script_attribute\", npc_2)\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"recursion_object\">\r\n\r\n  <attr name=\"recursion_script_attribute\" type=\"recursion_delegate\">\r\n    if (not object_parameter.recursion_boolean_attribute) {\r\n      list add (object_parameter.recursion_objectlist_attribute, object_parameter.parent)\r\n      object_parameter.parent = ObjectListItem (object_parameter.patrol_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute))\r\n      if (ListCount (object_parameter.recursion_objectlist_attribute) = ListCount (object_parameter.patrol_objectlist_attribute) - 1) {\r\n        object_parameter.recursion_boolean_attribute = true\r\n      }\r\n    } else {\r\n      object_parameter.parent = ObjectListItem (object_parameter.patrol_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute) - 1)\r\n      list remove (object_parameter.recursion_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute) - 1)\r\n      if (ListCount (object_parameter.recursion_objectlist_attribute) = 0) {\r\n        object_parameter.recursion_boolean_attribute = false\r\n      }\r\n    }\r\n  </attr>\r\n\r\n</object>\r\n\r\n<object name=\"npc_data_object\">\r\n\r\n  <object name=\"npc_1\">\r\n\r\n    <attr name=\"parent\" type=\"object\">room_1</attr>\r\n\r\n    <attr name=\"recursion_boolean_attribute\" type=\"boolean\">false</attr>\r\n\r\n    <attr name=\"recursion_objectlist_attribute\" type=\"objectlist\">\r\n    </attr>\r\n\r\n    <attr name=\"patrol_objectlist_attribute\" type=\"objectlist\">\r\n      <value>room_1</value>\r\n      <value>room_2</value>\r\n      <value>room_3</value>\r\n      <value>room_4</value>\r\n      <value>room_5</value>\r\n    </attr>\r\n\r\n  </object>\r\n\r\n  <object name=\"npc_2\">\r\n\r\n    <attr name=\"parent\" type=\"object\">room_6</attr>\r\n\r\n    <attr name=\"recursion_boolean_attribute\" type=\"boolean\">false</attr>\r\n\r\n    <attr name=\"recursion_objectlist_attribute\" type=\"objectlist\">\r\n    </attr>\r\n\r\n    <attr name=\"patrol_objectlist_attribute\" type=\"objectlist\">\r\n      <value>room_6</value>\r\n      <value>room_7</value>\r\n      <value>room_8</value>\r\n      <value>room_9</value>\r\n      <value>room_10</value>\r\n    </attr>\r\n\r\n  </object>\r\n\r\n</object>\r\n\r\n<!--\r\nNote to self:\r\n\r\nI can move the, 'recursion_objectlist_attribute' and 'recursion_boolean_attribute', over to the 'recursion_object' (instead of redundantly having every npc have it, YUCK! lol), and just remember that it'd have to be cleared/overwritten (and for the boolean, set it back to default value: false) when done, so it's blank for the next time its used with different rooms.\r\n\r\n(too tired/exhausted to go ahead and adjust my code right now, lol. I need a break, sighs)\r\n-->\r\n```\r\n\r\n-----------------\r\n\r\nrandomization of what room to go to is very easy....\r\n\r\n--------------\r\n\r\nrandomization + (recursive) retracing of the randomized sequence is much more difficult (surely, but I've not even tried to think of doing it, as I'm tired from just getting my code above done, sighs)\r\n\r\n------------------\r\n\r\nactually... I couldn't help from thinking about it as I wrote this part of my post, lol....\r\n\r\nand I think... my code will be able to easily incorporate/adapt to adding in a randomized sequence... hopefully... otherwise... it'll be very difficult for me to do, lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>@ Dr. Agon:</p>\n<hr>\n<p>For your 'non-random' method, you're asking for doing a recursion operation, hehe:</p>\n<p>(in trying to do this, I realized that direct recursion couldn't work, so I had to create an indirect recursion effect/operation, lol)</p>\n<p>(hopefully this does work... been working on this a long time... and I'm still not really comfortable with recursion, as I've not really done much work/practice with it. I'm sure Pixie and/or mrangel can create much more efficient coding, as I'm still a noob at this type, recursion or whatever design, of coding, as it's advanced coding design for me, I really struggled with this code of mine. Been working on this post/code for some hours now, sighs)</p>\n<p>(I'll try to explain it / walk you through it, if you can't follow/understand it, just let me know)</p>\n<p>(I can add more scalable/dynamic scripting, but this is just an example, let me know if you want or need help with more scalability/dynamic-ness of it)</p>\n<pre><code>&lt;delegate name=\"recursion_delegate\" parameters=\"object_parameter\" /&gt;\n\n&lt;game name=\"example_game\"&gt;\n&lt;/game&gt;\n\n&lt;object name=\"room_data_object\"&gt;\n\n  &lt;object name=\"room\"&gt;\n  &lt;/object&gt;\n\n  &lt;object name=\"npc_1_room_data_object\"&gt;\n\n    &lt;object name=\"room_1\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_2\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_3\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_4\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_5\"&gt;\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"npc_2_room_data_object\"&gt;\n\n    &lt;object name=\"room_6\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_7\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_8\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_9\"&gt;\n    &lt;/object&gt;\n\n    &lt;object name=\"room_10\"&gt;\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"parent\"&gt; type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;attr name=\"changedparent\" type=\"script\"&gt;\n    rundelegate (recursion_object, \"recursion_script_attribute\", npc_1)\n    rundelegate (recursion_object, \"recursion_script_attribute\", npc_2)\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"recursion_object\"&gt;\n\n  &lt;attr name=\"recursion_script_attribute\" type=\"recursion_delegate\"&gt;\n    if (not object_parameter.recursion_boolean_attribute) {\n      list add (object_parameter.recursion_objectlist_attribute, object_parameter.parent)\n      object_parameter.parent = ObjectListItem (object_parameter.patrol_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute))\n      if (ListCount (object_parameter.recursion_objectlist_attribute) = ListCount (object_parameter.patrol_objectlist_attribute) - 1) {\n        object_parameter.recursion_boolean_attribute = true\n      }\n    } else {\n      object_parameter.parent = ObjectListItem (object_parameter.patrol_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute) - 1)\n      list remove (object_parameter.recursion_objectlist_attribute, ListCount (object_parameter.recursion_objectlist_attribute) - 1)\n      if (ListCount (object_parameter.recursion_objectlist_attribute) = 0) {\n        object_parameter.recursion_boolean_attribute = false\n      }\n    }\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"npc_data_object\"&gt;\n\n  &lt;object name=\"npc_1\"&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room_1&lt;/attr&gt;\n\n    &lt;attr name=\"recursion_boolean_attribute\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n    &lt;attr name=\"recursion_objectlist_attribute\" type=\"objectlist\"&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"patrol_objectlist_attribute\" type=\"objectlist\"&gt;\n      &lt;value&gt;room_1&lt;/value&gt;\n      &lt;value&gt;room_2&lt;/value&gt;\n      &lt;value&gt;room_3&lt;/value&gt;\n      &lt;value&gt;room_4&lt;/value&gt;\n      &lt;value&gt;room_5&lt;/value&gt;\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"npc_2\"&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room_6&lt;/attr&gt;\n\n    &lt;attr name=\"recursion_boolean_attribute\" type=\"boolean\"&gt;false&lt;/attr&gt;\n\n    &lt;attr name=\"recursion_objectlist_attribute\" type=\"objectlist\"&gt;\n    &lt;/attr&gt;\n\n    &lt;attr name=\"patrol_objectlist_attribute\" type=\"objectlist\"&gt;\n      &lt;value&gt;room_6&lt;/value&gt;\n      &lt;value&gt;room_7&lt;/value&gt;\n      &lt;value&gt;room_8&lt;/value&gt;\n      &lt;value&gt;room_9&lt;/value&gt;\n      &lt;value&gt;room_10&lt;/value&gt;\n    &lt;/attr&gt;\n\n  &lt;/object&gt;\n\n&lt;/object&gt;\n\n&lt;!--\nNote to self:\n\nI can move the, 'recursion_objectlist_attribute' and 'recursion_boolean_attribute', over to the 'recursion_object' (instead of redundantly having every npc have it, YUCK! lol), and just remember that it'd have to be cleared/overwritten (and for the boolean, set it back to default value: false) when done, so it's blank for the next time its used with different rooms.\n\n(too tired/exhausted to go ahead and adjust my code right now, lol. I need a break, sighs)\n--&gt;\n</code></pre>\n<hr>\n<p>randomization of what room to go to is very easy....</p>\n<hr>\n<p>randomization + (recursive) retracing of the randomized sequence is much more difficult (surely, but I've not even tried to think of doing it, as I'm tired from just getting my code above done, sighs)</p>\n<hr>\n<p>actually... I couldn't help from thinking about it as I wrote this part of my post, lol....</p>\n<p>and I think... my code will be able to easily incorporate/adapt to adding in a randomized sequence... hopefully... otherwise... it'll be very difficult for me to do, lol.</p>\n\n",
      "PostDate": "2017-12-13T19:53:00.8319464Z",
      "LastEditDate": "2017-12-13T20:25:12.3208055Z",
      "link": null
    },
    {
      "PostId": "8897fb91-f6fc-4755-82e6-1f5482901960",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK,\r\n\r\n\r\nYou did almost the same thing I did, but you made it a little longer than I did before giving up for the night.\r\n\r\nNOTE: This will do nothing at the moment.\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Pathfinding NPC\">\r\n    <gameid>fb4843e9-acc1-4079-922f-99301c91ccea</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <start type=\"script\">\r\n      NPC.roomlist = NewObjectList()\r\n      list add (NPC.roomlist, room1)\r\n      list add (NPC.roomlist, room2)\r\n      list add (NPC.roomlist, room3)\r\n      list add (NPC.roomlist, room4)\r\n      list add (NPC.roomlist, room5)\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"north\" to=\"room1\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room1\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"north\" to=\"room2\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <object name=\"NPC\">\r\n      <inherit name=\"editor_object\" />\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <prefix>an</prefix>\r\n      <turnscript name=\"NPC_pathfinding_turnscript\">\r\n        <script>\r\n          if (not HasAttribute(NPC, \"lastvisited\")) {\r\n            NPC.lastvisited = NewObjectList()\r\n          }\r\n          if (ListCount(NPC.lastvisited=2)) {\r\n            lastroom = NPC.lastvisited[0]\r\n            list remove (NPC.lastvisited, NPC.lastvisited[0])\r\n          }\r\n          list add (NPC.lastvisited, NPC.parent)\r\n          i = 0\r\n          foreach (room, NPC.roomlist) {\r\n            if (lastroom = room) {\r\n              if (NPC.roomlist[i+1] = NPC.parent) {\r\n              // Yawn.  Stretch.  I'll finish this tomorrow!\r\n              }\r\n            }\r\n          }\r\n        </script>\r\n      </turnscript>\r\n    </object>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"room3\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <exit alias=\"south\" to=\"room1\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room3\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"room4\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <exit alias=\"south\" to=\"room2\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room4\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room3\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"north\" to=\"room5\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room5\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room4\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>HK,</p>\n<p>You did almost the same thing I did, but you made it a little longer than I did before giving up for the night.</p>\n<p>NOTE: This will do nothing at the moment.</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Pathfinding NPC\"&gt;\n    &lt;gameid&gt;fb4843e9-acc1-4079-922f-99301c91ccea&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;start type=\"script\"&gt;\n      NPC.roomlist = NewObjectList()\n      list add (NPC.roomlist, room1)\n      list add (NPC.roomlist, room2)\n      list add (NPC.roomlist, room3)\n      list add (NPC.roomlist, room4)\n      list add (NPC.roomlist, room5)\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"room1\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room1\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"north\" to=\"room2\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"NPC\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;prefix&gt;an&lt;/prefix&gt;\n      &lt;turnscript name=\"NPC_pathfinding_turnscript\"&gt;\n        &lt;script&gt;\n          if (not HasAttribute(NPC, \"lastvisited\")) {\n            NPC.lastvisited = NewObjectList()\n          }\n          if (ListCount(NPC.lastvisited=2)) {\n            lastroom = NPC.lastvisited[0]\n            list remove (NPC.lastvisited, NPC.lastvisited[0])\n          }\n          list add (NPC.lastvisited, NPC.parent)\n          i = 0\n          foreach (room, NPC.roomlist) {\n            if (lastroom = room) {\n              if (NPC.roomlist[i+1] = NPC.parent) {\n              // Yawn.  Stretch.  I'll finish this tomorrow!\n              }\n            }\n          }\n        &lt;/script&gt;\n      &lt;/turnscript&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"room3\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"south\" to=\"room1\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"room4\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"south\" to=\"room2\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room4\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room3\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"north\" to=\"room5\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room5\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room4\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2017-12-13T20:14:53.374158Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "81ad190f-cfd7-4980-bd04-a8013514987a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ah, so KV is already capable/understanding of, recursion / this-type of, advanced design/logic ...\r\n\r\nsorry for not including you in the list with pixie and mrangel who can probably do more efficient coding, didn't know you were already at this level of coding ability. (I was hoping you hadn't advanced to understanding this type of advanced coding, meh, you're really smart to be getting/learning/understanding such advanced coding/concepts/designs so quickly, sighs. You've already surpassed me in coding)\r\n\r\nHK will now (hopefully) remember to include you amongst pixie and mrangel (and pertex and etc --- though they don't post that often)\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>ah, so KV is already capable/understanding of, recursion / this-type of, advanced design/logic ...</p>\n<p>sorry for not including you in the list with pixie and mrangel who can probably do more efficient coding, didn't know you were already at this level of coding ability. (I was hoping you hadn't advanced to understanding this type of advanced coding, meh, you're really smart to be getting/learning/understanding such advanced coding/concepts/designs so quickly, sighs. You've already surpassed me in coding)</p>\n<p>HK will now (hopefully) remember to include you amongst pixie and mrangel (and pertex and etc --- though they don't post that often)</p>\n\n",
      "PostDate": "2017-12-13T20:20:34.5681628Z",
      "LastEditDate": "2017-12-13T20:26:39.088492Z",
      "link": null
    },
    {
      "PostId": "c39db6e4-dd49-48d7-a92f-a9706fa8c210",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey, how about this?\r\n\r\n(It seems to work when I test it.)\r\n\r\n**EDITED: Added USE verb to button and made it switch from random to ...um... not random when pressing or using it.**\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Pathfinding NPC\">\r\n    <gameid>fb4843e9-acc1-4079-922f-99301c91ccea</gameid>\r\n    <version>1.2</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <appendobjectdescription />\r\n    <start type=\"script\">\r\n      NPC.roomlist = NewObjectList()\r\n      list add (NPC.roomlist, room1)\r\n      list add (NPC.roomlist, room2)\r\n      list add (NPC.roomlist, room3)\r\n      list add (NPC.roomlist, room4)\r\n      list add (NPC.roomlist, room5)\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"north\" to=\"room1\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room1\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n      EnableTurnScript (NPC_pathfinding_turnscript)\r\n    </enter>\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"north\" to=\"room2\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <object name=\"NPC\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <prefix>an</prefix>\r\n      <look>The NPC is tidying up from room to room.</look>\r\n      <inroomdescription>{once:The NPC sees you looking at him and gets back to work,}{notfirst:The NPC is passing through here while} tidying up from room to room.</inroomdescription>\r\n    </object>\r\n    <object name=\"random button\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <press type=\"script\">\r\n        if (not NPC.move_randomly) {\r\n          NPC.move_randomly = true\r\n          msg (\"The NPC is now moving randomly.\")\r\n        }\r\n        else {\r\n          NPC.move_randomly = false\r\n          msg (\"The NPC is no longer moving randomly.\")\r\n        }\r\n      </press>\r\n      <feature_usegive />\r\n      <use type=\"script\">\r\n        invoke (this.press)\r\n      </use>\r\n    </object>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"room3\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <exit alias=\"south\" to=\"room1\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room3\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"room4\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n    <exit alias=\"south\" to=\"room2\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room4\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room3\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"north\" to=\"room5\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room5\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room4\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n  </object>\r\n  <turnscript name=\"NPC_pathfinding_turnscript\">\r\n    <script><![CDATA[\r\n      firsttime {\r\n        NPC.moves = 0\r\n        NPC.moveup = true\r\n        NPC.move_randomly = false\r\n      }\r\n      if (NPC.moves = ListCount(NPC.roomlist)-1) {\r\n        NPC.moveup = false\r\n      }\r\n      if (NPC.moves = 0) {\r\n        NPC.moveup = true\r\n      }\r\n      if (NPC.moveup) {\r\n        if (NPC.moves < ListCount(NPC.roomlist)-1) {\r\n          NPC.moves = NPC.moves + 1\r\n        }\r\n        else if (NPC.moves = ListCount(NPC.roomlist)-1) {\r\n          NPC.moveup = false\r\n          NPC.moves = NPC.moves -1\r\n        }\r\n      }\r\n      if (not NPC.moveup) {\r\n        if (NPC.moves > 0) {\r\n          NPC.moves = NPC.moves - 1\r\n        }\r\n        else if (NPC.moves = 0) {\r\n          NPC.moveup = true\r\n          NPC.moves = NPC.moves * 1\r\n        }\r\n      }\r\n      // For debugging:\r\n      msg (NPC.roomlist[NPC.moves])\r\n      if (NPC.move_randomly) {\r\n        NPC.moves = GetRandomInt(0,ListCount(NPC.roomlist)-1)\r\n      }\r\n      MoveObject (NPC, NPC.roomlist[NPC.moves])\r\n    ]]></script>\r\n  </turnscript>\r\n  <verb>\r\n    <property>press</property>\r\n    <pattern>press;push</pattern>\r\n    <defaultexpression>\"You can't press;push \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey, how about this?</p>\n<p>(It seems to work when I test it.)</p>\n<p><strong>EDITED: Added USE verb to button and made it switch from random to ...um... not random when pressing or using it.</strong></p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Pathfinding NPC\"&gt;\n    &lt;gameid&gt;fb4843e9-acc1-4079-922f-99301c91ccea&lt;/gameid&gt;\n    &lt;version&gt;1.2&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;appendobjectdescription /&gt;\n    &lt;start type=\"script\"&gt;\n      NPC.roomlist = NewObjectList()\n      list add (NPC.roomlist, room1)\n      list add (NPC.roomlist, room2)\n      list add (NPC.roomlist, room3)\n      list add (NPC.roomlist, room4)\n      list add (NPC.roomlist, room5)\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"room1\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room1\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n      EnableTurnScript (NPC_pathfinding_turnscript)\n    &lt;/enter&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"north\" to=\"room2\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"NPC\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;prefix&gt;an&lt;/prefix&gt;\n      &lt;look&gt;The NPC is tidying up from room to room.&lt;/look&gt;\n      &lt;inroomdescription&gt;{once:The NPC sees you looking at him and gets back to work,}{notfirst:The NPC is passing through here while} tidying up from room to room.&lt;/inroomdescription&gt;\n    &lt;/object&gt;\n    &lt;object name=\"random button\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;press type=\"script\"&gt;\n        if (not NPC.move_randomly) {\n          NPC.move_randomly = true\n          msg (\"The NPC is now moving randomly.\")\n        }\n        else {\n          NPC.move_randomly = false\n          msg (\"The NPC is no longer moving randomly.\")\n        }\n      &lt;/press&gt;\n      &lt;feature_usegive /&gt;\n      &lt;use type=\"script\"&gt;\n        invoke (this.press)\n      &lt;/use&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"room3\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"south\" to=\"room1\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"room4\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"south\" to=\"room2\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room4\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room3\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"north\" to=\"room5\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room5\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room4\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;turnscript name=\"NPC_pathfinding_turnscript\"&gt;\n    &lt;script&gt;&lt;![CDATA[\n      firsttime {\n        NPC.moves = 0\n        NPC.moveup = true\n        NPC.move_randomly = false\n      }\n      if (NPC.moves = ListCount(NPC.roomlist)-1) {\n        NPC.moveup = false\n      }\n      if (NPC.moves = 0) {\n        NPC.moveup = true\n      }\n      if (NPC.moveup) {\n        if (NPC.moves &lt; ListCount(NPC.roomlist)-1) {\n          NPC.moves = NPC.moves + 1\n        }\n        else if (NPC.moves = ListCount(NPC.roomlist)-1) {\n          NPC.moveup = false\n          NPC.moves = NPC.moves -1\n        }\n      }\n      if (not NPC.moveup) {\n        if (NPC.moves &gt; 0) {\n          NPC.moves = NPC.moves - 1\n        }\n        else if (NPC.moves = 0) {\n          NPC.moveup = true\n          NPC.moves = NPC.moves * 1\n        }\n      }\n      // For debugging:\n      msg (NPC.roomlist[NPC.moves])\n      if (NPC.move_randomly) {\n        NPC.moves = GetRandomInt(0,ListCount(NPC.roomlist)-1)\n      }\n      MoveObject (NPC, NPC.roomlist[NPC.moves])\n    ]]&gt;&lt;/script&gt;\n  &lt;/turnscript&gt;\n  &lt;verb&gt;\n    &lt;property&gt;press&lt;/property&gt;\n    &lt;pattern&gt;press;push&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't press;push \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-12-13T20:43:39.7056741Z",
      "LastEditDate": "2017-12-13T20:49:28.1877899Z",
      "link": null
    },
    {
      "PostId": "892eb227-1b91-4448-9048-9bad1ef4587b",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, So I am a Basic programmer and not an object programmer...\r\nso, this is how I would see the solution:\r\n(Setup)\r\nNPC.room=1\r\nNPC.direction=1\r\nNPC.roomlist=Split(\"room1, room2, room3, room4, room5\", \",\")\r\nAnd for the NPC move:\r\nNPC.room=NPC.room +NPC.direction\r\nif NPC.room=4 {\r\nNPC.Direction=-1\r\n}\r\nif NPC.room=0 {\r\nNPC.direction=1\r\n}\r\nmsg(\"NPC is in room: \" +NPC.roomlist(NPC.room) +\".\")\r\n\r\nThen loop it for every time the NPC moves...\r\nOr, make it a function and pass the NPC stats and have the function move it, then any NPC could have it's own path and movement list.\r\nAnd, if you add a NPC.roommax then you can have any number of path lengths...\r\nAnd for random selection... A d4 works... 1=move left, 2=move right, 3 and 4=stay in the room.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, So I am a Basic programmer and not an object programmer...<br>\nso, this is how I would see the solution:<br>\n(Setup)<br>\nNPC.room=1<br>\nNPC.direction=1<br>\nNPC.roomlist=Split(\"room1, room2, room3, room4, room5\", \",\")<br>\nAnd for the NPC move:<br>\nNPC.room=NPC.room +NPC.direction<br>\nif NPC.room=4 {<br>\nNPC.Direction=-1<br>\n}<br>\nif NPC.room=0 {<br>\nNPC.direction=1<br>\n}<br>\nmsg(\"NPC is in room: \" +NPC.roomlist(NPC.room) +\".\")</p>\n<p>Then loop it for every time the NPC moves...<br>\nOr, make it a function and pass the NPC stats and have the function move it, then any NPC could have it's own path and movement list.<br>\nAnd, if you add a NPC.roommax then you can have any number of path lengths...<br>\nAnd for random selection... A d4 works... 1=move left, 2=move right, 3 and 4=stay in the room.</p>\n\n",
      "PostDate": "2017-12-13T20:46:42.9063812Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "33367947-3b46-44d6-8256-9af9279eaea3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK,\r\n\r\nYou're cool.  I don't like being on lists, anyway. (Hehehe.)\r\n\r\n...and I learned the recursion directly from you, so I don't know why you say you're not good at it.  (I'm watching you.)\r\n\r\nI do appreciate your kind words, but not as much as all your help.\r\n\r\n---\r\nDL,\r\n\r\nHey!\r\n\r\nThat looks like it will work, too.\r\n\r\nI used a boolean instead of an integer for the direction, but it looks pretty similar besides that.\r\n\r\n---\r\nHK,\r\n\r\nI still have no clue about delegates, if that makes you feel any better.",
      "EditableFormat": "markdown",
      "HTML": "<p>HK,</p>\n<p>You're cool.  I don't like being on lists, anyway. (Hehehe.)</p>\n<p>...and I learned the recursion directly from you, so I don't know why you say you're not good at it.  (I'm watching you.)</p>\n<p>I do appreciate your kind words, but not as much as all your help.</p>\n<hr>\n<p>DL,</p>\n<p>Hey!</p>\n<p>That looks like it will work, too.</p>\n<p>I used a boolean instead of an integer for the direction, but it looks pretty similar besides that.</p>\n<hr>\n<p>HK,</p>\n<p>I still have no clue about delegates, if that makes you feel any better.</p>\n\n",
      "PostDate": "2017-12-13T20:54:08.5524156Z",
      "LastEditDate": "2017-12-13T20:54:52.7088957Z",
      "link": null
    },
    {
      "PostId": "1ee8f081-7d9c-4add-b473-291e63b19238",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ Dark Lizard:\r\n\r\nI'd definitely would include you too as great programmer, though quest is mostly programming using Objects (and etc higher language stuff/structures: Lists, Dictionaries, Object Types, etc) and its design/logic is based off of it, and I don't think you've yet come as far as KV with Object programming and its design/logic, yet.\r\n\r\nIf quest was assembly language (or other early/lower languages like basic) program, you'd definitely be one of the top coders!\r\n\r\n--------\r\n\r\nas you know, modern high level languages, are very different mindset/design/logic/structure, than low level or early/lower-level languages.\r\n\r\nI started with modern high level languages, so I'm more familiar with it, whereas, without Jay's help, I'd never even begin to be able to understand assembly language. they're completely different ways of thinking... due to their different structures/functionalities\r\n\r\nWhereas, you started with basic, and thus are more familiar with it and low level languages, whereas, these modern high level languages are still new to you. they're completely different ways of thinking... due to their different structures/functionalities",
      "EditableFormat": "markdown",
      "HTML": "<p>@ Dark Lizard:</p>\n<p>I'd definitely would include you too as great programmer, though quest is mostly programming using Objects (and etc higher language stuff/structures: Lists, Dictionaries, Object Types, etc) and its design/logic is based off of it, and I don't think you've yet come as far as KV with Object programming and its design/logic, yet.</p>\n<p>If quest was assembly language (or other early/lower languages like basic) program, you'd definitely be one of the top coders!</p>\n<hr>\n<p>as you know, modern high level languages, are very different mindset/design/logic/structure, than low level or early/lower-level languages.</p>\n<p>I started with modern high level languages, so I'm more familiar with it, whereas, without Jay's help, I'd never even begin to be able to understand assembly language. they're completely different ways of thinking... due to their different structures/functionalities</p>\n<p>Whereas, you started with basic, and thus are more familiar with it and low level languages, whereas, these modern high level languages are still new to you. they're completely different ways of thinking... due to their different structures/functionalities</p>\n\n",
      "PostDate": "2017-12-13T21:01:14.1425045Z",
      "LastEditDate": "2017-12-13T21:05:51.6239752Z",
      "link": null
    },
    {
      "PostId": "42360532-5cdc-4cc0-9c0c-ac59e4c293e0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dark Lizard's method is most efficient, as it's not using the overhead of all the stuff we're using.\r\n\r\nHowever, the high level overhead stuff makes it more scalable and human-friendly, which is why most programming is high level programming.\r\n\r\nLots of people can learn high level coding, but the low level coding stuff that Dark Lizard does, is much harder for us, who've been exposed first to high level programming.\r\n\r\nlearning low level programming is not something everyone can learn on their own. You got to be really smart to learn low level coding, and even if you're being taught/helped in learning low level programming... it's still very challanging/confusing... sighs.\r\n\r\nlots of people can do at least basic high level coding/scripting, but much fewer people can do assembly language",
      "EditableFormat": "markdown",
      "HTML": "<p>Dark Lizard's method is most efficient, as it's not using the overhead of all the stuff we're using.</p>\n<p>However, the high level overhead stuff makes it more scalable and human-friendly, which is why most programming is high level programming.</p>\n<p>Lots of people can learn high level coding, but the low level coding stuff that Dark Lizard does, is much harder for us, who've been exposed first to high level programming.</p>\n<p>learning low level programming is not something everyone can learn on their own. You got to be really smart to learn low level coding, and even if you're being taught/helped in learning low level programming... it's still very challanging/confusing... sighs.</p>\n<p>lots of people can do at least basic high level coding/scripting, but much fewer people can do assembly language</p>\n\n",
      "PostDate": "2017-12-13T21:10:39.8427085Z",
      "LastEditDate": "2017-12-13T21:13:53.8629349Z",
      "link": null
    },
    {
      "PostId": "c9642e09-496e-4e3b-97fd-8ee18e4fb3a9",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n(again, filler for getting edited post, updated/posted)\r\n\r\n---------------------\r\n\r\n@ KV:\r\n\r\nit took me awhile to understand delegates, but they're actually pretty simple...\r\n\r\nyou could definitely understand them quickly, I can try to help you (I'm not the best at helping though, Pixie or whoever is much better), if you're interested in learning them. (err, see below, lol)\r\n\r\n----------\r\n\r\nDelegate's just turn a Script Attribute basically into a Function, but you're using a Script Attribute, which means its attached to an Object, which makes it much more useful (just in terms of organization/structure, let alone other applications) than Functions.\r\n\r\n```\r\n<delegate name=\"example_delegate\" parameters=\"param\" />\r\n// or:\r\n<delegate name=\"example_delegate\" type=\"string\" />\r\n// or:\r\n<delegate name=\"example_delegate\" parameters=\"param\" type=\"string\" />\r\n\r\nsee how this (see above) is the exact same as a Function's header/signature code line (see below)?\r\n\r\n<function name=\"example_function\" parameters=\"param\">\r\n// or:\r\n<function name=\"example_function\" type=\"string\">\r\n// or:\r\n<function name=\"example_function\" parameters=\"param\" type=\"string\">\r\n\r\nand whatever Script Attribute(s) which will use the Delegate, act as the Function's body/content/scripting (see below):\r\n\r\n(note that for the Script Attribute's: type=\"xxx\", you put in the NAME_OF_THE_DELEGATE that you want the Script Attribute to use, instead of: type=\"script\")\r\n\r\n<delegate name=\"example_delegate\" parameters=\"param\" />\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"example_delegate\">\r\n    msg (param)\r\n  </attr>\r\n</object>\r\n\r\nis the same as:\r\n\r\n<function name=\"example_function\" parameters=\"param\">\r\n  msg (param)\r\n</function>\r\n\r\n---------\r\n\r\n// to call/use/do them, there's a bit more to remember with Delegates, than compared to normal Script Attributes and Functions\r\n\r\n--------\r\n\r\n// if your delegate ONLY has parameters, then you use 'rundelegate (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)' :\r\n\r\n<delegate name=\"example_delegate\" parameters=\"param\" />\r\n\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    rundelegate (example_object, \"example_script_attribute\", \"hi\")\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"example_delegate\">\r\n    msg (param)\r\n  </attr>\r\n</object>\r\n\r\n1. param (of '<delegate name...>') <==== \"hi\" (from 'rundelegate')\r\n\r\n2. the '<attr name=\"xxx\" type=\"NAME_OF_DELEGATE\"...>' is telling that Script Attribute to use that Delegate, and thus:\r\n\r\n3. the 'example_script_attribute' then uses 'param' (which is storing \"hi\") as a variable in its scripting, just as a Function does.\r\n\r\n------------------------------------------\r\n\r\n// if your delegate returns a value (regardless of: with or without parameters), then you got to use 'RunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS/TYPE, TYPE)' :\r\n\r\n========\r\nthere's NO difference in whether, type=\"xxx\" or 'parameters=\"xxx\", (this is the same with a Function's header/signature) comes first, if you're having both of them:\r\n\r\n<delegate name=\"example_2_delegate\" type=\"string\" parameters=\"param\" />\r\n// is the same as:\r\n<delegate name=\"example_2_delegate\" parameters=\"param\" type=\"string\"  />\r\n\r\njust as with Functions (and Commands)\r\n\r\nwhat does matter is the placement matching (if you got multiple PARAMS/ARGS you're using) of the PARAMS with the ARGS\r\n\r\nthough, don't forget that the delegate requires the Object and the Script Attribute as well (in the order/placement shown below) within its call/usage/doing:\r\n\r\nrundelegate (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)\r\n// or:\r\nRunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\")\r\n// or:\r\nRunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)\r\n\r\nwhich is like using/doing/calling/running a normal Script Attribute:\r\n\r\ndo (OBJECT, \"SCRIPT ATTRIBUTE\")\r\n// or:\r\ndo (OBJECT, \"SCRIPT ATTRIBUTE\", DICTIONARY ARGS/PARAMS)\r\n\r\nbut unlike a Function:\r\n\r\nexample_function\r\n// or:\r\nexample_function (ARGS/PARAMS)\r\n=========\r\n\r\n<delegate name=\"example_2_delegate\" type=\"string\" />\r\n\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    string_variable = RunDelegateFunction (example_object, \"example_script_attribute\")\r\n    msg (string_variable)\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"example_2_delegate\">\r\n    return (\"hi\")\r\n  </attr>\r\n</object>\r\n\r\n// or:\r\n\r\n<delegate name=\"example_3_delegate\" parameters=\"param\" type=\"string\" />\r\n\r\n<game name=\"example_game\">\r\n  <attr name=\"start\" type=\"script\">\r\n    string_variable = RunDelegateFunction (example_object, \"example_script_attribute\", \"hi\")\r\n    msg (string_variable)\r\n  </attr>\r\n</game>\r\n\r\n<object name=\"example_object\">\r\n  <attr name=\"example_script_attribute\" type=\"example_3_delegate\">\r\n    return (\"give me a \" + param + \"gh five if you were able to understand delegates from this post of mine!\")\r\n  </attr>\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)<br>\n(again, filler for getting edited post, updated/posted)</p>\n<hr>\n<p>@ KV:</p>\n<p>it took me awhile to understand delegates, but they're actually pretty simple...</p>\n<p>you could definitely understand them quickly, I can try to help you (I'm not the best at helping though, Pixie or whoever is much better), if you're interested in learning them. (err, see below, lol)</p>\n<hr>\n<p>Delegate's just turn a Script Attribute basically into a Function, but you're using a Script Attribute, which means its attached to an Object, which makes it much more useful (just in terms of organization/structure, let alone other applications) than Functions.</p>\n<pre><code>&lt;delegate name=\"example_delegate\" parameters=\"param\" /&gt;\n// or:\n&lt;delegate name=\"example_delegate\" type=\"string\" /&gt;\n// or:\n&lt;delegate name=\"example_delegate\" parameters=\"param\" type=\"string\" /&gt;\n\nsee how this (see above) is the exact same as a Function's header/signature code line (see below)?\n\n&lt;function name=\"example_function\" parameters=\"param\"&gt;\n// or:\n&lt;function name=\"example_function\" type=\"string\"&gt;\n// or:\n&lt;function name=\"example_function\" parameters=\"param\" type=\"string\"&gt;\n\nand whatever Script Attribute(s) which will use the Delegate, act as the Function's body/content/scripting (see below):\n\n(note that for the Script Attribute's: type=\"xxx\", you put in the NAME_OF_THE_DELEGATE that you want the Script Attribute to use, instead of: type=\"script\")\n\n&lt;delegate name=\"example_delegate\" parameters=\"param\" /&gt;\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"example_delegate\"&gt;\n    msg (param)\n  &lt;/attr&gt;\n&lt;/object&gt;\n\nis the same as:\n\n&lt;function name=\"example_function\" parameters=\"param\"&gt;\n  msg (param)\n&lt;/function&gt;\n\n---------\n\n// to call/use/do them, there's a bit more to remember with Delegates, than compared to normal Script Attributes and Functions\n\n--------\n\n// if your delegate ONLY has parameters, then you use 'rundelegate (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)' :\n\n&lt;delegate name=\"example_delegate\" parameters=\"param\" /&gt;\n\n&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    rundelegate (example_object, \"example_script_attribute\", \"hi\")\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"example_delegate\"&gt;\n    msg (param)\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n1. param (of '&lt;delegate name...&gt;') &lt;==== \"hi\" (from 'rundelegate')\n\n2. the '&lt;attr name=\"xxx\" type=\"NAME_OF_DELEGATE\"...&gt;' is telling that Script Attribute to use that Delegate, and thus:\n\n3. the 'example_script_attribute' then uses 'param' (which is storing \"hi\") as a variable in its scripting, just as a Function does.\n\n------------------------------------------\n\n// if your delegate returns a value (regardless of: with or without parameters), then you got to use 'RunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS/TYPE, TYPE)' :\n\n========\nthere's NO difference in whether, type=\"xxx\" or 'parameters=\"xxx\", (this is the same with a Function's header/signature) comes first, if you're having both of them:\n\n&lt;delegate name=\"example_2_delegate\" type=\"string\" parameters=\"param\" /&gt;\n// is the same as:\n&lt;delegate name=\"example_2_delegate\" parameters=\"param\" type=\"string\"  /&gt;\n\njust as with Functions (and Commands)\n\nwhat does matter is the placement matching (if you got multiple PARAMS/ARGS you're using) of the PARAMS with the ARGS\n\nthough, don't forget that the delegate requires the Object and the Script Attribute as well (in the order/placement shown below) within its call/usage/doing:\n\nrundelegate (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)\n// or:\nRunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\")\n// or:\nRunDelegateFunction (OBJECT, \"SCRIPT ATTRIBUTE\", ARGS/PARAMS)\n\nwhich is like using/doing/calling/running a normal Script Attribute:\n\ndo (OBJECT, \"SCRIPT ATTRIBUTE\")\n// or:\ndo (OBJECT, \"SCRIPT ATTRIBUTE\", DICTIONARY ARGS/PARAMS)\n\nbut unlike a Function:\n\nexample_function\n// or:\nexample_function (ARGS/PARAMS)\n=========\n\n&lt;delegate name=\"example_2_delegate\" type=\"string\" /&gt;\n\n&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    string_variable = RunDelegateFunction (example_object, \"example_script_attribute\")\n    msg (string_variable)\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"example_2_delegate\"&gt;\n    return (\"hi\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n// or:\n\n&lt;delegate name=\"example_3_delegate\" parameters=\"param\" type=\"string\" /&gt;\n\n&lt;game name=\"example_game\"&gt;\n  &lt;attr name=\"start\" type=\"script\"&gt;\n    string_variable = RunDelegateFunction (example_object, \"example_script_attribute\", \"hi\")\n    msg (string_variable)\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;object name=\"example_object\"&gt;\n  &lt;attr name=\"example_script_attribute\" type=\"example_3_delegate\"&gt;\n    return (\"give me a \" + param + \"gh five if you were able to understand delegates from this post of mine!\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-12-13T21:43:50.0118375Z",
      "LastEditDate": "2017-12-13T22:29:21.4221427Z",
      "link": null
    },
    {
      "PostId": "ca1325d7-9355-45f3-b6f3-c7f91a060ad2",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ DL:\r\n\r\nlooked more closely at your code, really ingenius using the 'direction (+/-)' mechanism!\r\n\r\nin hindsight, you're basically doing 'shifting', but still I think it's ingenius, as I'd never think to use 'shifting', lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>@ DL:</p>\n<p>looked more closely at your code, really ingenius using the 'direction (+/-)' mechanism!</p>\n<p>in hindsight, you're basically doing 'shifting', but still I think it's ingenius, as I'd never think to use 'shifting', lol.</p>\n\n",
      "PostDate": "2017-12-13T22:41:27.1218772Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ee908397-cd2d-4361-a480-e6e725580c49",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When I learned Basic... It was just about as high of a language as you could get... (3 or 4 decades ago!!!)\r\nWell, there were a few other \"learning\" languages... Logo for one (forgot another one I was just thinking about...)\r\nBut, from what I am picking up here, I can understand HTML programming better, Not that I will be doing any HTML programming, but it may get me started into looking a little bit deeper into VB.net...\r\nQuest is cool for writing text adventure games. It is built for that. It has a lot of power for building very good works of art...\r\nBy combining my knowledge of Basic, with Quest, I can see stuff that \"you guys\" would overlook because \"Quest and OOP (Object Orientated Programming) does it differently...\r\nBut, I'm getting there...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>When I learned Basic... It was just about as high of a language as you could get... (3 or 4 decades ago!!!)<br>\nWell, there were a few other \"learning\" languages... Logo for one (forgot another one I was just thinking about...)<br>\nBut, from what I am picking up here, I can understand HTML programming better, Not that I will be doing any HTML programming, but it may get me started into looking a little bit deeper into VB.net...<br>\nQuest is cool for writing text adventure games. It is built for that. It has a lot of power for building very good works of art...<br>\nBy combining my knowledge of Basic, with Quest, I can see stuff that \"you guys\" would overlook because \"Quest and OOP (Object Orientated Programming) does it differently...<br>\nBut, I'm getting there...</p>\n\n",
      "PostDate": "2017-12-14T09:43:17.4451023Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ffed18b-b30e-4fa9-a9c6-a6b4f84378d4",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's not easy, older people have a hard time with modern high level programming languages, as these didn't exist back then for them, thus, they had to work with less built-up functionality, and thus learned more of lower level languages and their various techniques. Younger people are introduced to the modern high level languages, but have a very hard time with learning the lower level languages and thus have a hard time with working with a lot less functionality.\r\n\r\nlow level languages build upon computer architecture (hardware/circuitry/logic-gates/machine-language), adding more functionality/control'ability to the human user, and then that enabled high level languages to be built-on top of the low level languages, adding even more functionality/control'ability to the human user, and high level languages have continued to build upon what has already been built. This makes it ever harder to learn about and use a computer, as it's just too much stuff for people to know and understand.\r\n\r\nThe cause of this building of more functionality/control'ability is technological advancement. Hardware was limited in the past, so programming languages were very simple in their functionality, you had to be really creative and efficient to get done what you wanted. Imagine trying to work with literally only 256 bytes of memory compared to what we've got now (tera bytes and more).\r\n\r\nthink of having a house that is only like 10x10x10 feet, you're a lot more limited in what you can have in your house. compared to having a house that is like 1000x1000x1000 feet. With the 10x10x10 feet house, you're dealing with HOW to put what you need into it, and NOT what you need to put into it. With the 1000x1000x1000 feet house, you're dealing with WHAT things to put into it, and NOT how to put those things into it, lol.\r\n\r\nalso, imagine having only a chisel and a hammer, compared to having a multitude of hydrolic construction vehicles and etc tools/equipment.\r\n\r\n----------\r\n\r\nhowever, with more and more building up of functionality/ccontrol'ability for the human user... came a new demand of it: complex design/structure, management/logic/understanding, and etc... which really pushes our brains (at least mine, lol) to the limit.\r\n\r\nOOP/OOD is very different than assembly/low/early programming\r\n\r\ntake the 'chisel and hammer' vs 'modern construction vehicles/tools/equipment/technology':\r\n\r\nwith only a chisel and hammer, you're using your intelligence to figure out how to do what you want to do with only that chisel and hammer. You're not using intelligence to figure out how to most effectively use that chisel and hammer together, lol. There's no complexity in using a chisel and hammer... the hammer is used to hit the chisel, and that is all, lol.\r\n\r\nwhen you got the plethera of modern construction vehicles/tools/equipment/technology at your disposal... you can do whatever you want to do, that's NOT the problem! The problem is what is the best way to use what you got available to use, you're dealing with how to use all that stuff/options that is your vehicles/tools/equipment/technology/etc, but NOT with how to do what you want to do, as you got the total means to do whatever you want to do. But what's the best way to go about it with those means.\r\n\r\nsee, it's complete opposite challenges/mindset, and why it's so hard to cross-over from either side. High-Level vs Low-Level.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's not easy, older people have a hard time with modern high level programming languages, as these didn't exist back then for them, thus, they had to work with less built-up functionality, and thus learned more of lower level languages and their various techniques. Younger people are introduced to the modern high level languages, but have a very hard time with learning the lower level languages and thus have a hard time with working with a lot less functionality.</p>\n<p>low level languages build upon computer architecture (hardware/circuitry/logic-gates/machine-language), adding more functionality/control'ability to the human user, and then that enabled high level languages to be built-on top of the low level languages, adding even more functionality/control'ability to the human user, and high level languages have continued to build upon what has already been built. This makes it ever harder to learn about and use a computer, as it's just too much stuff for people to know and understand.</p>\n<p>The cause of this building of more functionality/control'ability is technological advancement. Hardware was limited in the past, so programming languages were very simple in their functionality, you had to be really creative and efficient to get done what you wanted. Imagine trying to work with literally only 256 bytes of memory compared to what we've got now (tera bytes and more).</p>\n<p>think of having a house that is only like 10x10x10 feet, you're a lot more limited in what you can have in your house. compared to having a house that is like 1000x1000x1000 feet. With the 10x10x10 feet house, you're dealing with HOW to put what you need into it, and NOT what you need to put into it. With the 1000x1000x1000 feet house, you're dealing with WHAT things to put into it, and NOT how to put those things into it, lol.</p>\n<p>also, imagine having only a chisel and a hammer, compared to having a multitude of hydrolic construction vehicles and etc tools/equipment.</p>\n<hr>\n<p>however, with more and more building up of functionality/ccontrol'ability for the human user... came a new demand of it: complex design/structure, management/logic/understanding, and etc... which really pushes our brains (at least mine, lol) to the limit.</p>\n<p>OOP/OOD is very different than assembly/low/early programming</p>\n<p>take the 'chisel and hammer' vs 'modern construction vehicles/tools/equipment/technology':</p>\n<p>with only a chisel and hammer, you're using your intelligence to figure out how to do what you want to do with only that chisel and hammer. You're not using intelligence to figure out how to most effectively use that chisel and hammer together, lol. There's no complexity in using a chisel and hammer... the hammer is used to hit the chisel, and that is all, lol.</p>\n<p>when you got the plethera of modern construction vehicles/tools/equipment/technology at your disposal... you can do whatever you want to do, that's NOT the problem! The problem is what is the best way to use what you got available to use, you're dealing with how to use all that stuff/options that is your vehicles/tools/equipment/technology/etc, but NOT with how to do what you want to do, as you got the total means to do whatever you want to do. But what's the best way to go about it with those means.</p>\n<p>see, it's complete opposite challenges/mindset, and why it's so hard to cross-over from either side. High-Level vs Low-Level.</p>\n\n",
      "PostDate": "2017-12-14T20:28:11.119558Z",
      "LastEditDate": "2017-12-14T20:34:00.13296Z",
      "link": null
    },
    {
      "PostId": "2f98650e-43c0-4f6a-bc12-e6ab09240e16",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@DL, looking at your code and also HK comment about shifting, I was reminded of an adventure game, I programmed when I was younger, back in my BASIC days. The adventure operated on a 6x5 grid, east or west (+1 or -1), north or south (+5 or -5), moved the player. Up or Down (+30 or -30). ",
      "EditableFormat": "markdown",
      "HTML": "<p>@DL, looking at your code and also HK comment about shifting, I was reminded of an adventure game, I programmed when I was younger, back in my BASIC days. The adventure operated on a 6x5 grid, east or west (+1 or -1), north or south (+5 or -5), moved the player. Up or Down (+30 or -30).</p>\n\n",
      "PostDate": "2017-12-14T23:31:08.0415597Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "24f34c01-f88e-488d-8486-7dba64605ff6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Dr Agon\r\nThat reminds me of a programming exercise regarding a tray full of Tetris blocks; the challenge being to find the most memory-efficient method of determining whether a certain block would fit into a certain grid. Various programmers tried representing the tray as various kinds of arrays, but were rejected. The correct solution was to represent the tray as a long long int (64-bit integer to represent an 8x8 grid of blocks).",
      "EditableFormat": "markdown",
      "HTML": "<p>@Dr Agon<br>\nThat reminds me of a programming exercise regarding a tray full of Tetris blocks; the challenge being to find the most memory-efficient method of determining whether a certain block would fit into a certain grid. Various programmers tried representing the tray as various kinds of arrays, but were rejected. The correct solution was to represent the tray as a long long int (64-bit integer to represent an 8x8 grid of blocks).</p>\n\n",
      "PostDate": "2017-12-15T15:21:48.4759351Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "47dbda75-777b-4004-9e85-fa7626685294",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"Correct\"? Maybe, maybe not... But it was the simplest or smallest solution...\r\n\r\n(But I think we are sliding off topic here... and maybe confusing a few people...)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>\"Correct\"? Maybe, maybe not... But it was the simplest or smallest solution...</p>\n<p>(But I think we are sliding off topic here... and maybe confusing a few people...)</p>\n\n",
      "PostDate": "2017-12-15T18:51:58.5745042Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
