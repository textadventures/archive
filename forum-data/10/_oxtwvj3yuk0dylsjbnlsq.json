{
  "Topic": {
    "TopicId": "_oxtwvj3yuk0dylsjbnlsq",
    "ForumId": "10",
    "Title": "Menus",
    "LastUpdated": "2020-01-11T11:51:50.2304848Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3d05c877-778c-421f-a936-f656cf10a8e3",
      "UserId": 454147,
      "Username": "OddyOdding",
      "AvatarUrl": "https://secure.gravatar.com/avatar/46d799318c81316f3f32b16239da762a?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I wanted to create a gun with 4 modes to choose from, The gun will initiate a different reaction when used by a n object or if the gun is set to a different mode, can anyone tell me how to code something like that? I've checked the tutorial and unfourtunately I'm not even good at making a basic menu. ",
      "EditableFormat": "markdown",
      "HTML": "<p>I wanted to create a gun with 4 modes to choose from, The gun will initiate a different reaction when used by a n object or if the gun is set to a different mode, can anyone tell me how to code something like that? I've checked the tutorial and unfourtunately I'm not even good at making a basic menu.</p>\n\n",
      "PostDate": "2020-01-11T11:51:50.2304848Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "59d2128b-5fd1-4662-8c86-7235c82e84a3",
      "UserId": 445604,
      "Username": "Y4T5UR0",
      "AvatarUrl": "https://i.imgur.com/HJN9Gwwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "From the title, I believe you want to add a menu in which the players can change the mode. As an example, I will call the four modes Normal, Simple, Advanced and Expert.\r\nThis time, I added a verb called \"change mode\" for the gun, and there is a script running.\r\nYou may want to use a similar code:\r\n```\r\nShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), false) {\r\n  if (result=\"Normal\") {\r\n    GUN.mode = \"normal\"\r\n  }\r\n  if (result=\"Simple\") {\r\n    GUN.mode = \"simple\"\r\n  }\r\n  if (result=\"Advanced\") {\r\n    GUN.mode = \"advanced\"\r\n  }\r\n  if (result=\"Expert\") {\r\n    GUN.mode = \"expert\"\r\n  }\r\n}\r\n```\r\n\r\nOh, also, make an attribute for the gun, let's call it \"mode\" for now.\r\nIt's a string list, and basically will be set after the menu.\r\nFor example, clicking on the expert option from above will make the mode contains the string \"expert\".\r\n\r\nNow now, what's the use for doing this?\r\nJust for an example, though, I added an attribute called \"Attack\" to the gun. So, if the mode is changed, the Attack will also change, and along with that, the player's Atk will change because there's a change script for GUN.Attack, in which:\r\n```\r\nif (GUN.worn=true) {\r\n  player.Atk = GUN.Attack\r\n}\r\n```\r\nconsidering the player's atk without gun is a 0.\r\n\r\nFull code:\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"testing2\">\r\n    <gameid>b23b3fc5-5ecb-48c7-940a-f83b382073d7</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2020</firstpublished>\r\n    <roomenter type=\"script\">\r\n    </roomenter>\r\n    <start type=\"script\">\r\n    </start>\r\n    <feature_advancedwearables />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <firstenter type=\"script\">\r\n    </firstenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <statusattributes type=\"stringdictionary\">\r\n        <item>\r\n          <key>Atk</key>\r\n          <value></value>\r\n        </item>\r\n      </statusattributes>\r\n      <Atk type=\"int\">0</Atk>\r\n    </object>\r\n    <object name=\"GUN\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"wearable\" />\r\n      <attr name=\"feature_startscript\" type=\"boolean\">false</attr>\r\n      <mode>normal</mode>\r\n      <changemode type=\"script\">\r\n        ShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), false) {\r\n          if (result=\"Normal\") {\r\n            GUN.mode = \"normal\"\r\n          }\r\n          if (result=\"Simple\") {\r\n            GUN.mode = \"simple\"\r\n          }\r\n          if (result=\"Advanced\") {\r\n            GUN.mode = \"advanced\"\r\n          }\r\n          if (result=\"Expert\") {\r\n            GUN.mode = \"expert\"\r\n          }\r\n        }\r\n      </changemode>\r\n      <changedmode type=\"script\">\r\n        if (this.mode=\"normal\") {\r\n          GUN.Attack = 50\r\n        }\r\n        if (this.mode=\"advanced\") {\r\n          GUN.Attack = 70\r\n        }\r\n        if (this.mode=\"simple\") {\r\n          GUN.Attack = 15\r\n        }\r\n        if (this.mode=\"expert\") {\r\n          GUN.Attack = 10\r\n        }\r\n      </changedmode>\r\n      <Attack type=\"int\">50</Attack>\r\n      <feature_wearable />\r\n      <onafterwear type=\"script\">\r\n        player.Atk = player.Atk + GUN.Attack\r\n      </onafterwear>\r\n      <onafterremove type=\"script\">\r\n        player.Atk = 0\r\n      </onafterremove>\r\n      <usestandardverblist />\r\n      <changedAttack type=\"script\">\r\n        if (GUN.worn=true) {\r\n          player.Atk = GUN.Attack\r\n        }\r\n      </changedAttack>\r\n      <inventoryverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Drop</value>\r\n        <value>Wear</value>\r\n        <value>Remove</value>\r\n        <value>Change mode</value>\r\n      </inventoryverbs>\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>changemode</property>\r\n    <pattern>change mode</pattern>\r\n    <defaultexpression>\"You can't change mode \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n</asl>\r\n```\r\nThere may be useless or meaningless things added though due to my brain being so slow today :v\r\nHope it helps xD",
      "EditableFormat": "markdown",
      "HTML": "<p>From the title, I believe you want to add a menu in which the players can change the mode. As an example, I will call the four modes Normal, Simple, Advanced and Expert.<br>\nThis time, I added a verb called \"change mode\" for the gun, and there is a script running.<br>\nYou may want to use a similar code:</p>\n<pre><code>ShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), false) {\n  if (result=\"Normal\") {\n    GUN.mode = \"normal\"\n  }\n  if (result=\"Simple\") {\n    GUN.mode = \"simple\"\n  }\n  if (result=\"Advanced\") {\n    GUN.mode = \"advanced\"\n  }\n  if (result=\"Expert\") {\n    GUN.mode = \"expert\"\n  }\n}\n</code></pre>\n<p>Oh, also, make an attribute for the gun, let's call it \"mode\" for now.<br>\nIt's a string list, and basically will be set after the menu.<br>\nFor example, clicking on the expert option from above will make the mode contains the string \"expert\".</p>\n<p>Now now, what's the use for doing this?<br>\nJust for an example, though, I added an attribute called \"Attack\" to the gun. So, if the mode is changed, the Attack will also change, and along with that, the player's Atk will change because there's a change script for GUN.Attack, in which:</p>\n<pre><code>if (GUN.worn=true) {\n  player.Atk = GUN.Attack\n}\n</code></pre>\n<p>considering the player's atk without gun is a 0.</p>\n<p>Full code:</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"testing2\"&gt;\n    &lt;gameid&gt;b23b3fc5-5ecb-48c7-940a-f83b382073d7&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2020&lt;/firstpublished&gt;\n    &lt;roomenter type=\"script\"&gt;\n    &lt;/roomenter&gt;\n    &lt;start type=\"script\"&gt;\n    &lt;/start&gt;\n    &lt;feature_advancedwearables /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;firstenter type=\"script\"&gt;\n    &lt;/firstenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;statusattributes type=\"stringdictionary\"&gt;\n        &lt;item&gt;\n          &lt;key&gt;Atk&lt;/key&gt;\n          &lt;value&gt;&lt;/value&gt;\n        &lt;/item&gt;\n      &lt;/statusattributes&gt;\n      &lt;Atk type=\"int\"&gt;0&lt;/Atk&gt;\n    &lt;/object&gt;\n    &lt;object name=\"GUN\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"wearable\" /&gt;\n      &lt;attr name=\"feature_startscript\" type=\"boolean\"&gt;false&lt;/attr&gt;\n      &lt;mode&gt;normal&lt;/mode&gt;\n      &lt;changemode type=\"script\"&gt;\n        ShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), false) {\n          if (result=\"Normal\") {\n            GUN.mode = \"normal\"\n          }\n          if (result=\"Simple\") {\n            GUN.mode = \"simple\"\n          }\n          if (result=\"Advanced\") {\n            GUN.mode = \"advanced\"\n          }\n          if (result=\"Expert\") {\n            GUN.mode = \"expert\"\n          }\n        }\n      &lt;/changemode&gt;\n      &lt;changedmode type=\"script\"&gt;\n        if (this.mode=\"normal\") {\n          GUN.Attack = 50\n        }\n        if (this.mode=\"advanced\") {\n          GUN.Attack = 70\n        }\n        if (this.mode=\"simple\") {\n          GUN.Attack = 15\n        }\n        if (this.mode=\"expert\") {\n          GUN.Attack = 10\n        }\n      &lt;/changedmode&gt;\n      &lt;Attack type=\"int\"&gt;50&lt;/Attack&gt;\n      &lt;feature_wearable /&gt;\n      &lt;onafterwear type=\"script\"&gt;\n        player.Atk = player.Atk + GUN.Attack\n      &lt;/onafterwear&gt;\n      &lt;onafterremove type=\"script\"&gt;\n        player.Atk = 0\n      &lt;/onafterremove&gt;\n      &lt;usestandardverblist /&gt;\n      &lt;changedAttack type=\"script\"&gt;\n        if (GUN.worn=true) {\n          player.Atk = GUN.Attack\n        }\n      &lt;/changedAttack&gt;\n      &lt;inventoryverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Drop&lt;/value&gt;\n        &lt;value&gt;Wear&lt;/value&gt;\n        &lt;value&gt;Remove&lt;/value&gt;\n        &lt;value&gt;Change mode&lt;/value&gt;\n      &lt;/inventoryverbs&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;changemode&lt;/property&gt;\n    &lt;pattern&gt;change mode&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't change mode \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>There may be useless or meaningless things added though due to my brain being so slow today :v<br>\nHope it helps xD</p>\n\n",
      "PostDate": "2020-01-12T06:45:30.8535905Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ed662a7-ef5d-48c3-ad73-fcb49d140b0b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The menu code shown above could be simpler:\r\n```\r\nShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), true) {\r\n  gun.mode = LCase (result)\r\n}\r\n```\r\n\r\nThen in the \"use on\" script, or anywhere it matters what the current mode is, you can do:\r\n```\r\nswitch (gun.mode) {\r\n  case (\"simple\") {\r\n    // do something here\r\n  }\r\n  case (\"normal\") {\r\n    // do something else here\r\n  }\r\n  case (\"advanced\", \"expert\") {\r\n    // do it like this if there's any circumstances where 2 modes do the same thing\r\n  }\r\n}\r\n```\r\n\r\n<details><summary>Or a more advanced option [click to expand]…</summary>\r\n\r\nIf you have multiple items you want to set the mode of, or if you'd like to do it without the menu, you could use a command. I'd probably do something like:\r\n```\r\nif (HasAttribute (object, \"availablemodes\")) {\r\n  options = NewStringList()\r\n  if (IsDefined (\"text\")) {\r\n    if (ListContains (object.availablemodes, LCase(text))) {\r\n      list add (options, LCase(text))\r\n    }\r\n    else {\r\n      foreach (mode, object.availablemodes) {\r\n        if (Instr (mode, LCase (text)) > 0) {\r\n          list add (options, LCase(text))\r\n        }\r\n      }\r\n    }\r\n    if (ListCount (options) = 0) {\r\n      options = object.availablemodes\r\n      msg (CapFirst(object.article)+\" doesn't have a \"+text+\" mode.<br/>You can choose from:\")\r\n    }\r\n    else if (ListCount (options) > 1) {\r\n      msg (\"Which mode did you mean?\")\r\n    }\r\n  }\r\n  else {\r\n    options = object.availablemodes\r\n    msg (\"Which mode would you like to set \"+object.article+\" to?\")\r\n  }\r\n  if (ListCount (options) = 1) {\r\n    object.mode = ListItem (options, 0)\r\n  }\r\n  else {\r\n    menu = NewStringList()\r\n    foreach (mode, options) {\r\n      list add (menu, \"{command:set \"+GetDisplayAlias(object)+\" mode to \"+mode+\":\"+CapFirst(mode)+\"}\")\r\n    }\r\n    SuppressTurnscripts()\r\n    msg (FormatList (menu, \", \", \", or\", \"\")+\"?\")\r\n  }\r\n}\r\nelse {\r\n  SuppressTurnscripts()\r\n  msg (CapFirst(object.article)+\" doesn't have a mode you can set.\")\r\n}\r\n```\r\n\r\nwith the command pattern: `^(set |mode |to (?<text>.+?) )+(?<object>.+?)(mode|to|(?<text>.+?)| )*$`\r\n\r\nSo then the player can type `set gun to normal mode` or `mode gun advanced` or whatever, and it should work fine. Or they can type `set mode gun` and it will ask them what mode they want.\r\n\r\nWith this command, you would give the gun a stringlist attribute `availablemodes` which is a list of all the modes it has. You could put \"set mode\" on its displayverbs, which will present the player with a list of options, or you could put \"set mode simple\" or whatever on the displayverbs, so they can choose directly (though if you have a lot of modes, this would clutter the verbs list)\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>The menu code shown above could be simpler:</p>\n<pre><code>ShowMenu (\"Pick a mode\", Split(\"Normal;Simple;Advanced;Expert\"), true) {\n  gun.mode = LCase (result)\n}\n</code></pre>\n<p>Then in the \"use on\" script, or anywhere it matters what the current mode is, you can do:</p>\n<pre><code>switch (gun.mode) {\n  case (\"simple\") {\n    // do something here\n  }\n  case (\"normal\") {\n    // do something else here\n  }\n  case (\"advanced\", \"expert\") {\n    // do it like this if there's any circumstances where 2 modes do the same thing\n  }\n}\n</code></pre>\n<details><summary>Or a more advanced option [click to expand]…</summary>\n<p>If you have multiple items you want to set the mode of, or if you'd like to do it without the menu, you could use a command. I'd probably do something like:</p>\n<pre><code>if (HasAttribute (object, \"availablemodes\")) {\n  options = NewStringList()\n  if (IsDefined (\"text\")) {\n    if (ListContains (object.availablemodes, LCase(text))) {\n      list add (options, LCase(text))\n    }\n    else {\n      foreach (mode, object.availablemodes) {\n        if (Instr (mode, LCase (text)) &gt; 0) {\n          list add (options, LCase(text))\n        }\n      }\n    }\n    if (ListCount (options) = 0) {\n      options = object.availablemodes\n      msg (CapFirst(object.article)+\" doesn't have a \"+text+\" mode.&lt;br/&gt;You can choose from:\")\n    }\n    else if (ListCount (options) &gt; 1) {\n      msg (\"Which mode did you mean?\")\n    }\n  }\n  else {\n    options = object.availablemodes\n    msg (\"Which mode would you like to set \"+object.article+\" to?\")\n  }\n  if (ListCount (options) = 1) {\n    object.mode = ListItem (options, 0)\n  }\n  else {\n    menu = NewStringList()\n    foreach (mode, options) {\n      list add (menu, \"{command:set \"+GetDisplayAlias(object)+\" mode to \"+mode+\":\"+CapFirst(mode)+\"}\")\n    }\n    SuppressTurnscripts()\n    msg (FormatList (menu, \", \", \", or\", \"\")+\"?\")\n  }\n}\nelse {\n  SuppressTurnscripts()\n  msg (CapFirst(object.article)+\" doesn't have a mode you can set.\")\n}\n</code></pre>\n<p>with the command pattern: <code>^(set |mode |to (?&lt;text&gt;.+?) )+(?&lt;object&gt;.+?)(mode|to|(?&lt;text&gt;.+?)| )*$</code></p>\n<p>So then the player can type <code>set gun to normal mode</code> or <code>mode gun advanced</code> or whatever, and it should work fine. Or they can type <code>set mode gun</code> and it will ask them what mode they want.</p>\n<p>With this command, you would give the gun a stringlist attribute <code>availablemodes</code> which is a list of all the modes it has. You could put \"set mode\" on its displayverbs, which will present the player with a list of options, or you could put \"set mode simple\" or whatever on the displayverbs, so they can choose directly (though if you have a lot of modes, this would clutter the verbs list)</p>\n</details>\n\n",
      "PostDate": "2020-01-12T11:30:40.3667754Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
