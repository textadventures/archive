{
  "Topic": {
    "TopicId": "1712",
    "ForumId": "10",
    "Title": "Object property data-types",
    "LastUpdated": "2007-07-16T12:29:50+01:00",
    "ReplyCount": 11
  },
  "Posts": [
    {
      "PostId": "13504",
      "UserId": 0,
      "Username": "henrytj",
      "UserAvatar": null,
      "UserGravatar": "5f6247178d5dd662b392a89e1e31284c",
      "EditableText": "I am new to Quest and trying to use the QDK from a non-programmers POV. \r\n\r\nFirst of all an object's property seems limited to only text strings. (Booleans seem possible, but seem a poorly indicated option in the interface.) Numbers can be entered as property values but they cant seem be be treated as numbers. It would seem to be a common thing to decrement a weapon clip ammo count or health level, or sum up the weights in the inventory to determine if the player can take another object of a certain weight, such as a small key verses a sledge hammer, both of which might open a door, one destructively, one not.  \r\n\r\nSo it would be good to have object property data types. \r\nText (string)\r\nNumber (at least integer, if not also the option for real)\r\nTrue/False (boolean)\r\n\r\nand it would be nice to have an enumerated data type where a choice could be picked from a list of values. So a property of CoffeeTemp could be one of (Cold, Cool, Warm, Hot, and ScaldingHot).\r\n\r\nIf not adding an enumerated data type, at least the ability to define constant values that can be compared against and values copied to properties. Constants should not be changeable by the code and safe from corruption by the accidental placing of them on the wrong side of a data modifying action.",
      "EditableFormat": "bbcode",
      "HTML": "I am new to Quest and trying to use the QDK from a non-programmers POV. <br/><br/>First of all an object's property seems limited to only text strings. (Booleans seem possible, but seem a poorly indicated option in the interface.) Numbers can be entered as property values but they cant seem be be treated as numbers. It would seem to be a common thing to decrement a weapon clip ammo count or health level, or sum up the weights in the inventory to determine if the player can take another object of a certain weight, such as a small key verses a sledge hammer, both of which might open a door, one destructively, one not.  <br/><br/>So it would be good to have object property data types. <br/>Text (string)<br/>Number (at least integer, if not also the option for real)<br/>True/False (boolean)<br/><br/>and it would be nice to have an enumerated data type where a choice could be picked from a list of values. So a property of CoffeeTemp could be one of (Cold, Cool, Warm, Hot, and ScaldingHot).<br/><br/>If not adding an enumerated data type, at least the ability to define constant values that can be compared against and values copied to properties. Constants should not be changeable by the code and safe from corruption by the accidental placing of them on the wrong side of a data modifying action.",
      "PostDate": "2007-07-13T02:26:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13514",
      "UserId": 0,
      "Username": "henrytj",
      "UserAvatar": null,
      "UserGravatar": "5f6247178d5dd662b392a89e1e31284c",
      "EditableText": "To stress what I said before, object properties are limited in Quest. Yes you can put some text into them, but testing the the property values against a fixed constant or changing the state(value) of the property has to be done with a work-around, and those are things you are likely to want to do in a dynamic game. Quest seems limited to making &quot;static&quot; games where things (room and object properties) dont change much. For me an improvement would be for Quest to have more clear property control where I can at least know when a property is boolean, or numeric and perform math, at least Inc and Dec on it.",
      "EditableFormat": "bbcode",
      "HTML": "To stress what I said before, object properties are limited in Quest. Yes you can put some text into them, but testing the the property values against a fixed constant or changing the state(value) of the property has to be done with a work-around, and those are things you are likely to want to do in a dynamic game. Quest seems limited to making &quot;static&quot; games where things (room and object properties) dont change much. For me an improvement would be for Quest to have more clear property control where I can at least know when a property is boolean, or numeric and perform math, at least Inc and Dec on it.",
      "PostDate": "2007-07-14T07:41:51+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13516",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "I doubt that's doable without heavily changing Quest; Quest has a very limited understanding of variable typing and is largely just string interpolation.",
      "EditableFormat": "bbcode",
      "HTML": "I doubt that's doable without heavily changing Quest; Quest has a very limited understanding of variable typing and is largely just string interpolation.",
      "PostDate": "2007-07-14T12:03:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13517",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Hi\r\n\r\nI'm slightly puzzled by this thread, although I've pretty much 'dropped out' of Quest since version 4 came along,  I am sure Quest had numeric, string and boolean variables - and that [i:2dux4u9c]properties[/i:2dux4u9c] could also be numeric, string or boolean last time I looked.\r\n\r\nI do believe that \r\n\r\nproperty dead           : - a boolean  (i.e. it's true or false)\r\nproperty age=15       : - a numeric (Quest deals in Integers only AFAIK)\r\nproperty name=Fred  : - a string.\r\n\r\nAlso increment and decrement of numeric variables is available through the inc &amp; dec statements - with a default of 1/-1 respectively but an optional parameter that lets the inc/dec amount be specified.\r\n\r\nI don't think you can (last time I looked) directly inc/dec numeric properties. This is a minor inconvenience, but you could probably write inc &amp; dec functions if that REALLY bothers you.  One can certainly perform simple maths and comparisons on numeric properties, my (long obsolete) 'TypeLib' library made a lot of use of that ability.\r\n\r\nRegards to all!\r\n\r\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Hi<br/><br/>I'm slightly puzzled by this thread, although I've pretty much 'dropped out' of Quest since version 4 came along,  I am sure Quest had numeric, string and boolean variables - and that <span style=\"font-style:italic;\">properties</span> could also be numeric, string or boolean last time I looked.<br/><br/>I do believe that <br/><br/>property dead           : - a boolean  (i.e. it's true or false)<br/>property age=15       : - a numeric (Quest deals in Integers only AFAIK)<br/>property name=Fred  : - a string.<br/><br/>Also increment and decrement of numeric variables is available through the inc &amp; dec statements - with a default of 1/-1 respectively but an optional parameter that lets the inc/dec amount be specified.<br/><br/>I don't think you can (last time I looked) directly inc/dec numeric properties. This is a minor inconvenience, but you could probably write inc &amp; dec functions if that REALLY bothers you.  One can certainly perform simple maths and comparisons on numeric properties, my (long obsolete) 'TypeLib' library made a lot of use of that ability.<br/><br/>Regards to all!<br/><br/>Al (MaDbRiT)",
      "PostDate": "2007-07-14T21:06:00+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13518",
      "UserId": 0,
      "Username": "007bond",
      "UserAvatar": null,
      "UserGravatar": "4c2673a2d8666a97b5c1082c5cf2e0e5",
      "EditableText": "Good to hear from you again MaDbRiT!",
      "EditableFormat": "bbcode",
      "HTML": "Good to hear from you again MaDbRiT!",
      "PostDate": "2007-07-14T22:49:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13523",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Yes, I also thought a simple:\r\n(#object:property# + 3)\r\n\r\nWould work.\r\nEither that, or Using the good ol' $objectproperty(object;property)$ function to get the number:\r\n($objectproperty(object:property)$ + 3)\r\n\r\nAnd if that diamond ring still don't shine:\r\nset numeric [ temp = #object:property# ]\r\nset numeric [ result = %temp% + 3 ]\r\n\r\nAs for enumerated values - are you talking about during design of the game?\r\nDuring the game you can have it logically, using the numbers 0 - n .. You can also have an array holding the string values. Changing the object property to property+x will give it a different value.\r\n\r\nThe only reason for you to be thinking about this is if you're creating a system for other coders to use, so that another person can create their own enumerated values - in which case, it [i:1e8yl10l]can[/i:1e8yl10l] be botched together.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, I also thought a simple:<br/>(#object:property# + 3)<br/><br/>Would work.<br/>Either that, or Using the good ol' $objectproperty(object;property)$ function to get the number:<br/>($objectproperty(object:property)$ + 3)<br/><br/>And if that diamond ring still don't shine:<br/>set numeric [ temp = #object:property# ]<br/>set numeric [ result = %temp% + 3 ]<br/><br/>As for enumerated values - are you talking about during design of the game?<br/>During the game you can have it logically, using the numbers 0 - n .. You can also have an array holding the string values. Changing the object property to property+x will give it a different value.<br/><br/>The only reason for you to be thinking about this is if you're creating a system for other coders to use, so that another person can create their own enumerated values - in which case, it <span style=\"font-style:italic;\">can</span> be botched together.",
      "PostDate": "2007-07-15T04:45:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13525",
      "UserId": 0,
      "Username": "henrytj",
      "UserAvatar": null,
      "UserGravatar": "5f6247178d5dd662b392a89e1e31284c",
      "EditableText": "[quote=&quot;Freak&quot;:3adqzbuk]I doubt that's doable without heavily changing Quest; Quest has a very limited understanding of variable typing and is largely just string interpolation.[/quote:3adqzbuk]\r\n\r\nOkay, and I understand the problems with drastic changes with a system. How about this? Make properties a sort of variant type (like I think in VB) where its stored as text, but if you do something math related to it, then Quest tries to treat the property as a number. THat way you can increment and decriment a property (if the property string can be interpreted as a number.)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Freak wrote:</cite>I doubt that's doable without heavily changing Quest; Quest has a very limited understanding of variable typing and is largely just string interpolation.</blockquote><br/><br/>Okay, and I understand the problems with drastic changes with a system. How about this? Make properties a sort of variant type (like I think in VB) where its stored as text, but if you do something math related to it, then Quest tries to treat the property as a number. THat way you can increment and decriment a property (if the property string can be interpreted as a number.)",
      "PostDate": "2007-07-15T07:32:06+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13526",
      "UserId": 0,
      "Username": "henrytj",
      "UserAvatar": null,
      "UserGravatar": "5f6247178d5dd662b392a89e1e31284c",
      "EditableText": "I have to admit that I did not try every possible way to decrement/increment a property. I have placed my evaluation of Quest on hold for the time and turned my attention to Inform. I also need to download and try-out Adrift. \r\n\r\nAnyway, let me try to come up, in a hurry, with an example of something I might want to do as a game maker. Now, because this is for a class, I need something non-violent.\r\n\r\nLets say I have a game where a box of rare comic books has somehow been scattered around the game space. I might want a &quot;Condition&quot; property for each comic book. The Condition property would be from a ordered list (Mint, Fine, Good, Fair, Poor, Junk) where Mint=5, Fine=4, etc. (Not sure these are the official comic book condition names, but I would research that more if I made the game.) I like code to read (If ComicBook.Condition = MintCondition Then ...) rather than (If ComicBook.Condition = 5 Then ...) (Using pseudo-code and no particular language here for example sake.) or (If ComicBook.Condition &lt; Poor Then ...&quot;its now Junk&quot;)\r\n\r\nLets say that my game logic is that I can make an array of comic books. Then each turn I can generate a random number such that there is 1/10 of a chance that one of the comics will drop one level in value (someone stepped on it, it got damp, a kid picked it up and read it, etc.) If a comic book gets damaged, then I use another random number to pick which comic book out of the array is the one to get damaged (Condition property gets decremented.). With each drop in Condition it looses half its Value (another property) from the previous condition. Another property, would of course be Title such as &quot;Spiderman # 54&quot;. (Guessing again. I might pull real titles and current values from maybe the Overstreet Guide.)\r\n\r\nSo the goal of the game would be to search and rescue all the rare comic books before they loose too much of their value. Anyway, sorry if this is not well worked out as its off the top of my head just now.",
      "EditableFormat": "bbcode",
      "HTML": "I have to admit that I did not try every possible way to decrement/increment a property. I have placed my evaluation of Quest on hold for the time and turned my attention to Inform. I also need to download and try-out Adrift. <br/><br/>Anyway, let me try to come up, in a hurry, with an example of something I might want to do as a game maker. Now, because this is for a class, I need something non-violent.<br/><br/>Lets say I have a game where a box of rare comic books has somehow been scattered around the game space. I might want a &quot;Condition&quot; property for each comic book. The Condition property would be from a ordered list (Mint, Fine, Good, Fair, Poor, Junk) where Mint=5, Fine=4, etc. (Not sure these are the official comic book condition names, but I would research that more if I made the game.) I like code to read (If ComicBook.Condition = MintCondition Then ...) rather than (If ComicBook.Condition = 5 Then ...) (Using pseudo-code and no particular language here for example sake.) or (If ComicBook.Condition &lt; Poor Then ...&quot;its now Junk&quot;)<br/><br/>Lets say that my game logic is that I can make an array of comic books. Then each turn I can generate a random number such that there is 1/10 of a chance that one of the comics will drop one level in value (someone stepped on it, it got damp, a kid picked it up and read it, etc.) If a comic book gets damaged, then I use another random number to pick which comic book out of the array is the one to get damaged (Condition property gets decremented.). With each drop in Condition it looses half its Value (another property) from the previous condition. Another property, would of course be Title such as &quot;Spiderman # 54&quot;. (Guessing again. I might pull real titles and current values from maybe the Overstreet Guide.)<br/><br/>So the goal of the game would be to search and rescue all the rare comic books before they loose too much of their value. Anyway, sorry if this is not well worked out as its off the top of my head just now.",
      "PostDate": "2007-07-15T08:38:15+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13528",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "HenryTj wrote\r\n\r\n[quote:v7bt154p]I like code to read (If ComicBook.Condition = MintCondition Then [/quote:v7bt154p]\r\n\r\nI can think of a few ways to enable comparing properties in this way in Quest, none of them elegant and to be honest all of them would need pretty messy code for increment/decrement elsewhere to enable them to be used.\r\n\r\nBUT If you wrote the 'messy code' as a library, you could effectively hide it from your coders and make it possible for them to do that kind of comparison without understanding or seeing the messy stuff behind the scenes...\r\n\r\nThis is the feature that endears Quest to me, you can tailor things a lot and just give users 'add in libraries' to make thinks simpler for them.\r\n\r\n\r\nHaving set that, I'm assuming you'd be holding the comic books in a numeric based array, so having to deal with a numeric based condition would not seem too much of a stretch to me.\r\n\r\nAl\r\n\r\nMaDbRiT",
      "EditableFormat": "bbcode",
      "HTML": "HenryTj wrote<br/><br/><blockquote><p>I like code to read (If ComicBook.Condition = MintCondition Then </p></blockquote><br/><br/>I can think of a few ways to enable comparing properties in this way in Quest, none of them elegant and to be honest all of them would need pretty messy code for increment/decrement elsewhere to enable them to be used.<br/><br/>BUT If you wrote the 'messy code' as a library, you could effectively hide it from your coders and make it possible for them to do that kind of comparison without understanding or seeing the messy stuff behind the scenes...<br/><br/>This is the feature that endears Quest to me, you can tailor things a lot and just give users 'add in libraries' to make thinks simpler for them.<br/><br/><br/>Having set that, I'm assuming you'd be holding the comic books in a numeric based array, so having to deal with a numeric based condition would not seem too much of a stretch to me.<br/><br/>Al<br/><br/>MaDbRiT",
      "PostDate": "2007-07-15T12:01:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13531",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Comparisons eh..\r\n\r\nI see two main ways around this:\r\n\r\nloads of variables like:\r\n%mint% = 5\r\n%fine%  = 4\r\n...\r\n\r\nWhen you do the comparison you can do this:\r\n[code:don8azd6]if &#40; #object&#58;condition# = %mint% &#41; then &#46;&#46;&#46;[/code:don8azd6]\nor\n[code:don8azd6]select case &lt;#object&#58;condition#&gt;\ncase &lt;%mint%&gt;\ncase &lt;%fine%&gt;[/code:don8azd6] (I hope)..\n\nOR you can use numbers directly and comment on which is which:\n[code:don8azd6]if &#40;#object&#58;condition# &gt; 2 &#41; then &#123;\n' object is worse than fine[/code:don8azd6]\nand\n[code:don8azd6]select case &lt;#object&#58;condition#&gt;\ncase &lt;1&gt;\n' mint\ncase &lt;2&gt;\n' fine[/code:don8azd6]",
      "EditableFormat": "bbcode",
      "HTML": "Comparisons eh..<br/><br/>I see two main ways around this:<br/><br/>loads of variables like:<br/>%mint% = 5<br/>%fine%  = 4<br/>...<br/><br/>When you do the comparison you can do this:<br/><pre><code>if &#40; #object&#58;condition# = %mint% &#41; then &#46;&#46;&#46;</code></pre><br/>or<br/><pre><code>select case &lt;#object&#58;condition#&gt;<br/>case &lt;%mint%&gt;<br/>case &lt;%fine%&gt;</code></pre> (I hope)..<br/><br/>OR you can use numbers directly and comment on which is which:<br/><pre><code>if &#40;#object&#58;condition# &gt; 2 &#41; then &#123;<br/>' object is worse than fine</code></pre><br/>and<br/><pre><code>select case &lt;#object&#58;condition#&gt;<br/>case &lt;1&gt;<br/>' mint<br/>case &lt;2&gt;<br/>' fine</code></pre>",
      "PostDate": "2007-07-15T15:17:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13534",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "You're missing the benefits of an enumerated type / symbolic constants:\r\n\r\n1)  You can't accidentally change the value of a symbolic constant at runtime.  (set numeric &lt;mint; 17&gt;  will be prevented.)\r\n\r\n2)  If you mistype the name of a symbolic constant / enumerated type, the error is caught at compile time (or at worst load time).",
      "EditableFormat": "bbcode",
      "HTML": "You're missing the benefits of an enumerated type / symbolic constants:<br/><br/>1)  You can't accidentally change the value of a symbolic constant at runtime.  (set numeric &lt;mint; 17&gt;  will be prevented.)<br/><br/>2)  If you mistype the name of a symbolic constant / enumerated type, the error is caught at compile time (or at worst load time).",
      "PostDate": "2007-07-15T18:25:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13541",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Yeah.. Constants are useful for typo's I [i:i7x4qr83]guess[/i:i7x4qr83].\r\n\r\nThen again, how many typo's do you actually make which assigns a value?\r\nI also thought constants should be on the right of the comparison to also help avoid that type of problem.\r\n\r\nWith enumeration - you can have a status variable, with limits (1 - 15 for example).. With 'name.current' and &quot;name.old' variables which are changed when the original is changed (I think the script is run after the value is changed - and that is why you need 3, and not 2, status var's).. So that changing it to an invalid number will get it changed back to the old value - effectively refusing to change.. I guess you can create a 'sort-of' constant that way, making a status variable which changes itself to the correct value if it is changed - and outputting an error message.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah.. Constants are useful for typo's I <span style=\"font-style:italic;\">guess</span>.<br/><br/>Then again, how many typo's do you actually make which assigns a value?<br/>I also thought constants should be on the right of the comparison to also help avoid that type of problem.<br/><br/>With enumeration - you can have a status variable, with limits (1 - 15 for example).. With 'name.current' and &quot;name.old' variables which are changed when the original is changed (I think the script is run after the value is changed - and that is why you need 3, and not 2, status var's).. So that changing it to an invalid number will get it changed back to the old value - effectively refusing to change.. I guess you can create a 'sort-of' constant that way, making a status variable which changes itself to the correct value if it is changed - and outputting an error message.",
      "PostDate": "2007-07-16T12:29:50+01:00",
      "LastEditDate": null
    }
  ]
}
