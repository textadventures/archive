{
  "Topic": {
    "TopicId": "plmgxd4_i02x5p_f2kimvg",
    "ForumId": "10",
    "Title": "Using \"or\" to trigger scripts",
    "LastUpdated": "2017-01-03T18:09:04.4039482Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8df14b2f-71cf-4b6a-a1f4-98c04472f345",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey coding peoples, think this is pretty simple, but not exactly sure how to do it...and searching for “OR” in the forums isn't going to narrow things down to much\r\n\r\nI'd like for a script to check for one of a handful of attributes on the player before passing(Or not) Currently for testing I'm just using a basic test for what class a player has, this is set as player.class attribute. \r\n\r\nI've tried this which seems logical\r\n\r\nif (player.class = (\"mage\") or (\"rogue\")) { \r\nmsg (“hello there”)\r\n} \r\n\r\nI get an error of\r\n“AndOrElement: Operation 'Or' is not defined for types 'Boolean' and 'String' “",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey coding peoples, think this is pretty simple, but not exactly sure how to do it...and searching for “OR” in the forums isn't going to narrow things down to much</p>\n<p>I'd like for a script to check for one of a handful of attributes on the player before passing(Or not) Currently for testing I'm just using a basic test for what class a player has, this is set as player.class attribute.</p>\n<p>I've tried this which seems logical</p>\n<p>if (player.class = (\"mage\") or (\"rogue\")) {<br>\nmsg (“hello there”)<br>\n}</p>\n<p>I get an error of<br>\n“AndOrElement: Operation 'Or' is not defined for types 'Boolean' and 'String' “</p>\n\n",
      "PostDate": "2017-01-03T18:09:04.4039482Z",
      "LastEditDate": null
    },
    {
      "PostId": "94a605aa-f960-40cb-81f9-6a6cdb523043",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try:\r\n```\r\nif (player.class = \"mage\" or player.class = \"rogue\") {\r\n    msg (“hello there”)\r\n}\r\n```\r\nYou can only join boolean expressions with \"and\" and \"or\", which those above are - but you can also join boolean variables:\r\n\r\n```\r\nif (player.isDirty or player.isSick) {\r\n    msg (“hello there”)\r\n}\r\n```\r\nor even:\r\n\r\n```\r\nif (player.class = \"mage\" and not player.isSick) {\r\n    msg (“hello there”)\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Try:</p>\n<pre><code>if (player.class = \"mage\" or player.class = \"rogue\") {\n    msg (“hello there”)\n}\n</code></pre>\n<p>You can only join boolean expressions with \"and\" and \"or\", which those above are - but you can also join boolean variables:</p>\n<pre><code>if (player.isDirty or player.isSick) {\n    msg (“hello there”)\n}\n</code></pre>\n<p>or even:</p>\n<pre><code>if (player.class = \"mage\" and not player.isSick) {\n    msg (“hello there”)\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-03T19:18:46.7093948Z",
      "LastEditDate": null
    },
    {
      "PostId": "0b06c1f4-85cf-45e6-9a18-ad5786007e3a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "as jay shows, each condition (aka, when separated by 'or' or 'and') must be a (full - oxymoronic but whatever) statement (think of Attribute syntax as a sentence, a 'statement' coding language terminology is the equivent to a 'sentence' human/english-language terminology):\r\n\r\n(condition 1) or (condition 2)\r\n(player.strength = 100) or (player.strength = 0) ---> works\r\n\r\n'player.strength' would be the 'noun'\r\nthe '= 100/=0' would be the 'verb' (or maybe more technically the '=' is the verb and the '100/0' is the \"subject/whatever the english terminology, meh-lol\" --- of what is the verb's resulting effect)\r\n\r\nso just as a sentence requires a 'noun' and a 'verb', so too must each of your conditions:\r\n\r\nif (player.strength = 100 or player.strength = 0 or player.strength = 50 or player.strength = 25 or player.strength = 75)\r\n\r\nthe reason as jay explains, is that each condition must be able to be broken down into boolean 'false' or 'true' at the high-human level (which is thus further broken down into low-computer-near-electrical level bits '0' and '1', the machine code level, which the hardware/electricity components, ?transistors?, of having 'X voltage/current' or 'Y voltage current' is somehow associated/connected with the programming logical '1' or '0' - I still don't quite get this physics/engineering of how the association/connection occurs of the logical to the physical or vice-versa, almost understanding this stuff, but not quite fully yet). Everything in programming is ultimately a '0' or a '1' bit. Functions, Objects, etc, EVERYTHING is ultimately a '0' or a '1'. Thankfully, programming has been built up over the years and we got high level programming, which is much more human friendly and human capable than trying to do complex stuff at the low level (the low level requires multiple code lines compared to a single code line at the upper level, so... if you think you've coded a lot at the upper level... imagine converting all of that to coding at the low level... yikes... the high level has a lot more features too, but this does mean more overhead / more inefficiency, but usually the efficiency is insignificant to the other benefits of high level programming. Think of high level programming as ms word on your computer, compared to low level programming as having to write by hand in pen. We love the 'copy and paste' of ms word, we can't imagine having to write by hand in pen without 'copy and paste' or even without being able to 'erase', having to re-write the ENTIRE document if we need to change anything or if we mess up)\r\n\r\n--------------------------------\r\n\r\nif you're interested:\r\n\r\nany/all (1, 2, 3, a, b, c, A, B, C, !, @, #, etc etc etc) character/symbol (and also some few non-keyboard/input stuff/thingy-ies too: see the ASCII's 'Dec/decimal values from 0 to 31' --- the left column, as Dec/Decimal value of '32' is the start of the keyboard keys with the spacebar key) is associated a number value to/for it (the original USA-only language/symbols/characters ASCII: http://www.asciitable.com/ or the unicode, which just expands/adds-to the orginal USA's ASCII with the rest of the world's language/characters/symbols: http://unicode.org/charts/ / https://en.wikipedia.org/wiki/List_of_Unicode_characters), which is I think done as an 'instruction set' at the low level or is hard-coded/embedded into the hardware itself (The Operating System, OS, you buy and install/load does this for you --- it's one of the things the OS does, the OS is what connects, \"allows the communication of\", the computer hardware to the computer software, and vice-versa, and thus why all computers require an OS, unless you're a computer expert and you know how to code and use your computer at the hardware level yourself).\r\n\r\nany number value, can be represented by the binary numbering system, and thus everything is a '0' or '1'.\r\n\r\nthe decimal system (0-9 digits):\r\n\r\n```\r\neach digit (starting from the right of course):\r\n\r\n(powers of) base 10 = decimal\r\n\r\n(digit: 0-9) * (10^0)\r\n(digit: 0-9) * (10^1)\r\n(digit: 0-9) * (10^2)\r\netc etc etc\r\n\r\n53\r\n(3) * (10^0 = 1) = 3\r\n(5) * (10^1 = 10) = 50\r\n50 + 3 = 53\r\n\r\n100\r\n(0) * (10^0 = 1) = 0\r\n(0) * (10^1 = 10) = 0\r\n(1) * (10^2 = 100) = 100\r\n100 + 0 + 0 = 100\r\n\r\n129\r\n(9) * (10^0 = 1) = 9\r\n(2) * (10^1 = 10) = 20\r\n(1) * (10^2 = 100) = 100\r\n100 + 20 + 9 = 129\r\n\r\n----------------------\r\n\r\n0000 = 0\r\n0001 = 1\r\n...\r\n0009 = 9\r\n0010 = 10\r\n0011 = 11\r\n...\r\n0019 = 19\r\n0020 = 20\r\n...\r\n0099 = 99\r\n0100 = 100\r\n0101 = 101\r\n....\r\n0110 = 110\r\n....\r\n0999 = 999\r\n1000 = 1000\r\n```\r\n\r\nthe binary numbering system (0-1 digits):\r\n\r\n```\r\neach digit (starting from the right of course):\r\n\r\n(powers of) base 2 = decimal\r\n\r\n(digit: 0-1) * (2^0)\r\n(digit: 0-1) * (2^1)\r\n(digit: 0-1) * (2^2)\r\netc etc etc\r\n\r\n53 decimal\r\n(powers of base 2: 2^0=1, 2^1=2, 2^2=4, 2^3=8, 2^4=16, 2^5=32, 2^6=64, 2^7=128, 2^8=256, 2^9=512, 2^10 = 1024, 2^11 = 2048, 2^12 = 4096, etc etc etc. How much RAM does your computer have? this is a binary value, find it: 2^N = your RAM)\r\n\r\n2^6 = 64 ---> 53 - 64 ---> the 7th digit (from the right) is a '0'\r\n2^5 = 32 ---> the 6th digit (from the right) is a '1'\r\n53 - 32 = 21\r\n2^4 = 16 ---> the 5th digit (from the right) is a '1'\r\n21 - 16 = 5\r\n2^3 = 8 ---> 5 - 8 ---> the 4th digit (from the right) is a '0'\r\n2^2 = 4 ---> the 3rd digit (from the right) is a '1'\r\n5 - 4 = 1\r\n2^1 = 2 ---> the 2nd digit (from the right) is a '0'\r\n2^0 = 1 ---> the rightmost digit is a '1'\r\n1 - 1 - 0\r\n=\r\n110101 binary == 53 decimal\r\n\r\n0110101 (= 110101) // just so you can match it up with the equation below (as you might get confused when looking at 110101 to the equation below, if you don't remember to look at it from right to left, so use the '0110101' so you can look at it from left to right)\r\n[0 * (2^6)] + [1 * (2^5)] + [1 * (2^4)] + [0 * (2^3)] + [1* (2^2)] + [0 * (2^1)] + [1 * (2^0)] = 53\r\n(2^5) + (2^4) + (2^2) + (2^0) = 53\r\n(32) + (16) + (4) + (1) = 53\r\n\r\n-------------------------------\r\n\r\n(binary ~ decimal)\r\n\r\n0000 ~ 0000 = 0\r\n0001 ~ 0001 = 1\r\n0010 ~ 0002 = 2\r\n0011 ~ 0003 = 3\r\n0100 ~ 0004 = 4\r\n0101 ~ 0005 = 5\r\n0110 ~ 0006 = 6\r\n0111 ~ 0007 = 7\r\n1000 ~ 0008 = 8\r\n\r\n1 1011 ~ 53\r\n\r\n1111 1111 ~ 255\r\n\r\n1 0000 0000 ~ 256\r\n```\r\n\r\n----------\r\n\r\nhere's the equivolent as a (well 2) sentence(s) of incorrect coding syntax (what you did, why you got the ERROR):\r\n\r\nif (run 1 mile or run 4 mile)... ERROR: What is running 1 mile? What is running 4 miles?\r\nif (bob run 1 mile or run 4 mile)... ERROR: What is running 4 miles?\r\n\r\nunfortunately, in programming you can't do this (or if it can be done... usually it's not programmed in or it's just too much work or too complex, anyways, meh):\r\n\r\nif [ (bob) and (run 1 mile or run 4 miles) ]\r\n// math distribution: 'bob' is being applied correctly to 'run 1 mile' and to 'run 4 miles'\r\n// if [ (5) * (4 or 7) ]\r\n// 5 * 4 = 20\r\n// or\r\n// 5 * 7 = 35\r\n\r\nthe programming requires this (each condition is a full statement/expression), thus no distribution ability:\r\n\r\nif [ (5 * 4) or (5 * 7) ]\r\n\r\n------------\r\n\r\nmany games, especially the old console games, have the '256' cutoff (0-255) (255 decimal = 1111 1111 binary = 8 bits = 1 byte) for various data/stats (if a value goes over 255, it's reset to: 0 or 0 + amount over 255, so for example, instead of having 300 strength, you'd have only 0 or 45 strength, which is not cool, a \"bug\" for the game player, as they went from having 255 strength to having only 0 or 45 strength, despite getting +45 strength which should be 300 strength not 0 or 45 strength!, but technically it's not a true bug - it's intentional to protect the entire game data/memory and/or how 'addition' operation actually works / is done/programmed at the low level: bit shifting/rotating, not going to get into trying to explain it however here. If you don't get the 0 or 45 strength with my example... programmer's coding error, as you're getting into data/memory you're not suppose to, messing ALL of it up, and/or also possibly enabling you power to do what you want, aka manipulate/change, with it, \"hexidecimal:base 16 / hexeditor software\" hacking)",
      "EditableFormat": "markdown",
      "HTML": "<p>as jay shows, each condition (aka, when separated by 'or' or 'and') must be a (full - oxymoronic but whatever) statement (think of Attribute syntax as a sentence, a 'statement' coding language terminology is the equivent to a 'sentence' human/english-language terminology):</p>\n<p>(condition 1) or (condition 2)<br>\n(player.strength = 100) or (player.strength = 0) ---&gt; works</p>\n<p>'player.strength' would be the 'noun'<br>\nthe '= 100/=0' would be the 'verb' (or maybe more technically the '=' is the verb and the '100/0' is the \"subject/whatever the english terminology, meh-lol\" --- of what is the verb's resulting effect)</p>\n<p>so just as a sentence requires a 'noun' and a 'verb', so too must each of your conditions:</p>\n<p>if (player.strength = 100 or player.strength = 0 or player.strength = 50 or player.strength = 25 or player.strength = 75)</p>\n<p>the reason as jay explains, is that each condition must be able to be broken down into boolean 'false' or 'true' at the high-human level (which is thus further broken down into low-computer-near-electrical level bits '0' and '1', the machine code level, which the hardware/electricity components, ?transistors?, of having 'X voltage/current' or 'Y voltage current' is somehow associated/connected with the programming logical '1' or '0' - I still don't quite get this physics/engineering of how the association/connection occurs of the logical to the physical or vice-versa, almost understanding this stuff, but not quite fully yet). Everything in programming is ultimately a '0' or a '1' bit. Functions, Objects, etc, EVERYTHING is ultimately a '0' or a '1'. Thankfully, programming has been built up over the years and we got high level programming, which is much more human friendly and human capable than trying to do complex stuff at the low level (the low level requires multiple code lines compared to a single code line at the upper level, so... if you think you've coded a lot at the upper level... imagine converting all of that to coding at the low level... yikes... the high level has a lot more features too, but this does mean more overhead / more inefficiency, but usually the efficiency is insignificant to the other benefits of high level programming. Think of high level programming as ms word on your computer, compared to low level programming as having to write by hand in pen. We love the 'copy and paste' of ms word, we can't imagine having to write by hand in pen without 'copy and paste' or even without being able to 'erase', having to re-write the ENTIRE document if we need to change anything or if we mess up)</p>\n<hr>\n<p>if you're interested:</p>\n<p>any/all (1, 2, 3, a, b, c, A, B, C, !, @, #, etc etc etc) character/symbol (and also some few non-keyboard/input stuff/thingy-ies too: see the ASCII's 'Dec/decimal values from 0 to 31' --- the left column, as Dec/Decimal value of '32' is the start of the keyboard keys with the spacebar key) is associated a number value to/for it (the original USA-only language/symbols/characters ASCII: http://www.asciitable.com/ or the unicode, which just expands/adds-to the orginal USA's ASCII with the rest of the world's language/characters/symbols: http://unicode.org/charts/ / https://en.wikipedia.org/wiki/List_of_Unicode_characters), which is I think done as an 'instruction set' at the low level or is hard-coded/embedded into the hardware itself (The Operating System, OS, you buy and install/load does this for you --- it's one of the things the OS does, the OS is what connects, \"allows the communication of\", the computer hardware to the computer software, and vice-versa, and thus why all computers require an OS, unless you're a computer expert and you know how to code and use your computer at the hardware level yourself).</p>\n<p>any number value, can be represented by the binary numbering system, and thus everything is a '0' or '1'.</p>\n<p>the decimal system (0-9 digits):</p>\n<pre><code>each digit (starting from the right of course):\n\n(powers of) base 10 = decimal\n\n(digit: 0-9) * (10^0)\n(digit: 0-9) * (10^1)\n(digit: 0-9) * (10^2)\netc etc etc\n\n53\n(3) * (10^0 = 1) = 3\n(5) * (10^1 = 10) = 50\n50 + 3 = 53\n\n100\n(0) * (10^0 = 1) = 0\n(0) * (10^1 = 10) = 0\n(1) * (10^2 = 100) = 100\n100 + 0 + 0 = 100\n\n129\n(9) * (10^0 = 1) = 9\n(2) * (10^1 = 10) = 20\n(1) * (10^2 = 100) = 100\n100 + 20 + 9 = 129\n\n----------------------\n\n0000 = 0\n0001 = 1\n...\n0009 = 9\n0010 = 10\n0011 = 11\n...\n0019 = 19\n0020 = 20\n...\n0099 = 99\n0100 = 100\n0101 = 101\n....\n0110 = 110\n....\n0999 = 999\n1000 = 1000\n</code></pre>\n<p>the binary numbering system (0-1 digits):</p>\n<pre><code>each digit (starting from the right of course):\n\n(powers of) base 2 = decimal\n\n(digit: 0-1) * (2^0)\n(digit: 0-1) * (2^1)\n(digit: 0-1) * (2^2)\netc etc etc\n\n53 decimal\n(powers of base 2: 2^0=1, 2^1=2, 2^2=4, 2^3=8, 2^4=16, 2^5=32, 2^6=64, 2^7=128, 2^8=256, 2^9=512, 2^10 = 1024, 2^11 = 2048, 2^12 = 4096, etc etc etc. How much RAM does your computer have? this is a binary value, find it: 2^N = your RAM)\n\n2^6 = 64 ---&gt; 53 - 64 ---&gt; the 7th digit (from the right) is a '0'\n2^5 = 32 ---&gt; the 6th digit (from the right) is a '1'\n53 - 32 = 21\n2^4 = 16 ---&gt; the 5th digit (from the right) is a '1'\n21 - 16 = 5\n2^3 = 8 ---&gt; 5 - 8 ---&gt; the 4th digit (from the right) is a '0'\n2^2 = 4 ---&gt; the 3rd digit (from the right) is a '1'\n5 - 4 = 1\n2^1 = 2 ---&gt; the 2nd digit (from the right) is a '0'\n2^0 = 1 ---&gt; the rightmost digit is a '1'\n1 - 1 - 0\n=\n110101 binary == 53 decimal\n\n0110101 (= 110101) // just so you can match it up with the equation below (as you might get confused when looking at 110101 to the equation below, if you don't remember to look at it from right to left, so use the '0110101' so you can look at it from left to right)\n[0 * (2^6)] + [1 * (2^5)] + [1 * (2^4)] + [0 * (2^3)] + [1* (2^2)] + [0 * (2^1)] + [1 * (2^0)] = 53\n(2^5) + (2^4) + (2^2) + (2^0) = 53\n(32) + (16) + (4) + (1) = 53\n\n-------------------------------\n\n(binary ~ decimal)\n\n0000 ~ 0000 = 0\n0001 ~ 0001 = 1\n0010 ~ 0002 = 2\n0011 ~ 0003 = 3\n0100 ~ 0004 = 4\n0101 ~ 0005 = 5\n0110 ~ 0006 = 6\n0111 ~ 0007 = 7\n1000 ~ 0008 = 8\n\n1 1011 ~ 53\n\n1111 1111 ~ 255\n\n1 0000 0000 ~ 256\n</code></pre>\n<hr>\n<p>here's the equivolent as a (well 2) sentence(s) of incorrect coding syntax (what you did, why you got the ERROR):</p>\n<p>if (run 1 mile or run 4 mile)... ERROR: What is running 1 mile? What is running 4 miles?<br>\nif (bob run 1 mile or run 4 mile)... ERROR: What is running 4 miles?</p>\n<p>unfortunately, in programming you can't do this (or if it can be done... usually it's not programmed in or it's just too much work or too complex, anyways, meh):</p>\n<p>if [ (bob) and (run 1 mile or run 4 miles) ]<br>\n// math distribution: 'bob' is being applied correctly to 'run 1 mile' and to 'run 4 miles'<br>\n// if [ (5) * (4 or 7) ]<br>\n// 5 * 4 = 20<br>\n// or<br>\n// 5 * 7 = 35</p>\n<p>the programming requires this (each condition is a full statement/expression), thus no distribution ability:</p>\n<p>if [ (5 * 4) or (5 * 7) ]</p>\n<hr>\n<p>many games, especially the old console games, have the '256' cutoff (0-255) (255 decimal = 1111 1111 binary = 8 bits = 1 byte) for various data/stats (if a value goes over 255, it's reset to: 0 or 0 + amount over 255, so for example, instead of having 300 strength, you'd have only 0 or 45 strength, which is not cool, a \"bug\" for the game player, as they went from having 255 strength to having only 0 or 45 strength, despite getting +45 strength which should be 300 strength not 0 or 45 strength!, but technically it's not a true bug - it's intentional to protect the entire game data/memory and/or how 'addition' operation actually works / is done/programmed at the low level: bit shifting/rotating, not going to get into trying to explain it however here. If you don't get the 0 or 45 strength with my example... programmer's coding error, as you're getting into data/memory you're not suppose to, messing ALL of it up, and/or also possibly enabling you power to do what you want, aka manipulate/change, with it, \"hexidecimal:base 16 / hexeditor software\" hacking)</p>\n\n",
      "PostDate": "2017-01-05T20:31:45.1522746Z",
      "LastEditDate": "2017-01-05T23:24:21.3525818Z"
    }
  ]
}
