{
  "Topic": {
    "TopicId": "dl-uvy4pwe69xu2aykjaxa",
    "ForumId": "10",
    "Title": "Calling the 'look' command as part of a script",
    "LastUpdated": "2019-08-13T21:33:16.0303511Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "702918ba-8541-4ab4-93c6-743b64196191",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://secure.gravatar.com/avatar/0648693262f94bee651402ef84e1772e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi!\r\n\r\nI have an object in my game which changes the state of the room when used. Specifically, I have a \"cord\" which you can (verb: pull) to light up the room, using the built in light/dark scripts. The room in question starts dark.\r\n\r\nAfter pulling the cord and the associated script running with the description and lighting the room, I want the game to wait until a key is pressed - no problem - and then clear the screen and automatically 'look' to get the 'room is light' description.\r\n\r\nNothing groundbreaking I know, but it's my first time working with Quest - the last text adventure I made was on the C64 in BASIC V2 in 1995 - and for the life of me I can't get the game to use the 'look' command.\r\n\r\nTo be honest, just knowing how to invoke commands in the fashion would be a big help in general!\r\n\r\nIf anyone could help, I'd be really grateful. I'm sure it's something obvious I'm missing - I feel like I can see the solution, like when a word is stuck on the tip of your tongue - I'm just looking everywhere except at it!\r\n\r\nHere's my script in code format. The object is Cord, the room is Shack Interior:\r\n\r\n```if (not GetBoolean(Cord, \"used\")) {\r\n  SetLight (Shack Interior)\r\n  SetObjectFlagOn (Cord, \"used\")\r\n  msg (\"Dislodging several layers of dust, you tentatively pull on the cord. Much to your relief, it <i>is</i> a light switch - it even works! The whole of the shack is bathed in a nicotine glow from a bare bulb above your head.\")\r\n  msg (\"Press any key to continue\")\r\n  wait {\r\n    ClearScreen\r\n  }\r\n}\r\nelse {\r\n  msg (\"The light is already on, and you're keeping it that way.\")\r\n}```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi!</p>\n<p>I have an object in my game which changes the state of the room when used. Specifically, I have a \"cord\" which you can (verb: pull) to light up the room, using the built in light/dark scripts. The room in question starts dark.</p>\n<p>After pulling the cord and the associated script running with the description and lighting the room, I want the game to wait until a key is pressed - no problem - and then clear the screen and automatically 'look' to get the 'room is light' description.</p>\n<p>Nothing groundbreaking I know, but it's my first time working with Quest - the last text adventure I made was on the C64 in BASIC V2 in 1995 - and for the life of me I can't get the game to use the 'look' command.</p>\n<p>To be honest, just knowing how to invoke commands in the fashion would be a big help in general!</p>\n<p>If anyone could help, I'd be really grateful. I'm sure it's something obvious I'm missing - I feel like I can see the solution, like when a word is stuck on the tip of your tongue - I'm just looking everywhere except at it!</p>\n<p>Here's my script in code format. The object is Cord, the room is Shack Interior:</p>\n<pre><code>  SetLight (Shack Interior)\n  SetObjectFlagOn (Cord, \"used\")\n  msg (\"Dislodging several layers of dust, you tentatively pull on the cord. Much to your relief, it &lt;i&gt;is&lt;/i&gt; a light switch - it even works! The whole of the shack is bathed in a nicotine glow from a bare bulb above your head.\")\n  msg (\"Press any key to continue\")\n  wait {\n    ClearScreen\n  }\n}\nelse {\n  msg (\"The light is already on, and you're keeping it that way.\")\n}```\n</code></pre>\n\n",
      "PostDate": "2019-08-13T21:33:16.0303511Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a9c636e9-8b05-4e44-8d0e-1844c14c5bd2",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, the first line of my code was missing. For clarity:\r\n\r\n```\r\nif (not GetBoolean(Cord, \"used\")) {\r\n  SetLight (Shack Interior)\r\n  SetObjectFlagOn (Cord, \"used\")\r\n  msg (\"Dislodging several layers of dust, you tentatively pull on the cord. Much to your relief, it <i>is</i> a light switch - it even works! The whole of the shack is bathed in a nicotine glow from a bare bulb above your head.\")\r\n  msg (\"Press any key to continue\")\r\n  wait {\r\n    ClearScreen\r\n  }\r\n}\r\nelse {\r\n  msg (\"The light is already on, and you're keeping it that way.\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, the first line of my code was missing. For clarity:</p>\n<pre><code>if (not GetBoolean(Cord, \"used\")) {\n  SetLight (Shack Interior)\n  SetObjectFlagOn (Cord, \"used\")\n  msg (\"Dislodging several layers of dust, you tentatively pull on the cord. Much to your relief, it &lt;i&gt;is&lt;/i&gt; a light switch - it even works! The whole of the shack is bathed in a nicotine glow from a bare bulb above your head.\")\n  msg (\"Press any key to continue\")\n  wait {\n    ClearScreen\n  }\n}\nelse {\n  msg (\"The light is already on, and you're keeping it that way.\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-08-13T21:48:10.5757123Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d0e09064-dbc9-492c-81f7-1a66cddbcc5d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There's 3 obvious ways to do this.\r\n\r\n**Best solution**\r\n\r\nThere's already a function to show the room description. The code you want is simploy:\r\n```\r\nShowRoomDescription()\r\n```\r\n<hr />\r\n\r\n**Alternative solution**\r\n\r\nIn case you want to call other commands from a script at some point in the future, I'll explain how you do that.\r\n\r\nCommands are objects, and their scripts are stored in a script attribute named \"script\". So to run the look command, you could use:\r\n```\r\ndo (look, \"script\")\r\n```\r\n\r\nIf you wanted to script a command that takes an object name (like \"look cord\") you'd put it in a dictionary like this:\r\n```\r\ndo (lookat, \"script\", QuickParams (\"object\", Cord))\r\n```\r\n(worth noting that in the core commands, \"look\" and \"lookat\" are separate commands.\r\n\r\n<hr />\r\n\r\n**Less polished solution**\r\n\r\nIf you want to call a command without messing about with objects, you can do:\r\n```\r\nHandleSingleCommand (\"look\")\r\n```\r\nThat will act exactly as if the player typed in that command (including asking them which one they meant if there are two objects with the same name). This is probably the worst solution, because it's rather inefficient and may also mess with your turnscripts. But if you want to run a command as if the player typed it, this is a lot easier to work with.",
      "EditableFormat": "markdown",
      "HTML": "<p>There's 3 obvious ways to do this.</p>\n<p><strong>Best solution</strong></p>\n<p>There's already a function to show the room description. The code you want is simploy:</p>\n<pre><code>ShowRoomDescription()\n</code></pre>\n<hr>\n<p><strong>Alternative solution</strong></p>\n<p>In case you want to call other commands from a script at some point in the future, I'll explain how you do that.</p>\n<p>Commands are objects, and their scripts are stored in a script attribute named \"script\". So to run the look command, you could use:</p>\n<pre><code>do (look, \"script\")\n</code></pre>\n<p>If you wanted to script a command that takes an object name (like \"look cord\") you'd put it in a dictionary like this:</p>\n<pre><code>do (lookat, \"script\", QuickParams (\"object\", Cord))\n</code></pre>\n<p>(worth noting that in the core commands, \"look\" and \"lookat\" are separate commands.</p>\n<hr>\n<p><strong>Less polished solution</strong></p>\n<p>If you want to call a command without messing about with objects, you can do:</p>\n<pre><code>HandleSingleCommand (\"look\")\n</code></pre>\n<p>That will act exactly as if the player typed in that command (including asking them which one they meant if there are two objects with the same name). This is probably the worst solution, because it's rather inefficient and may also mess with your turnscripts. But if you want to run a command as if the player typed it, this is a lot easier to work with.</p>\n\n",
      "PostDate": "2019-08-13T21:49:34.4897126Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a26b67ec-2f49-455e-a07e-f6690377f5fd",
      "UserId": 432182,
      "Username": "Mataeus",
      "AvatarUrl": "https://i.imgur.com/67NYu7hb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Every bit of that information is useful - thank you so much! In this case, the 'best solution' you note really is. Occam's Razor and all that.\r\n\r\nThank you so much!",
      "EditableFormat": "markdown",
      "HTML": "<p>Every bit of that information is useful - thank you so much! In this case, the 'best solution' you note really is. Occam's Razor and all that.</p>\n<p>Thank you so much!</p>\n\n",
      "PostDate": "2019-08-13T22:11:16.7252384Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
