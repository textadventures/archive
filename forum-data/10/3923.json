{
  "Topic": {
    "TopicId": "3923",
    "ForumId": "10",
    "Title": "Inherited types and objects referring to themselves",
    "LastUpdated": "2013-09-20T11:12:51+01:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "26312",
      "UserId": 0,
      "Username": "Slent",
      "UserAvatar": "6984_1379369689.png",
      "UserGravatar": "735aaf35bb538e1483a67fa49881c233",
      "EditableText": "Hello all\n\nI am currently working on making some object types which would make me able to inherit attributes on appropriate objects. One of these object types should always have an equip verb, calling an equip command. This command requires that the object itself is being passed to it by the object running the command through the verb (I hope that is clearly formulated <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P -->).\n\nThe problem comes when I have inherited this object type. If I on the object type try to call the function and pass on the &quot;&lt;object_type_name&gt;&quot; in the function, when I run the function on the object that inherited this type, it simply states that it cannot find &lt;object_type_name&gt;, instead of searching for the new objects name, which inherit the object type (still hope you're with me - it's hard to formulate <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->).\n\nTherefore I got to thinking; when referring to the player object we can use game.pov. Is there a similar command just to use on objects? I've tried to search around for something, but haven't been able to find a solution. If I've overlooked a wiki or forum thread/post about it, can you direct me there? <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> If this is not possible, is there another way to solve this problem? I could just not have the verb and function set on the object type, I just thought it would be handier if it was <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nThanks!",
      "EditableFormat": "bbcode",
      "HTML": "Hello all<br/><br/>I am currently working on making some object types which would make me able to inherit attributes on appropriate objects. One of these object types should always have an equip verb, calling an equip command. This command requires that the object itself is being passed to it by the object running the command through the verb (I hope that is clearly formulated <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P -->).<br/><br/>The problem comes when I have inherited this object type. If I on the object type try to call the function and pass on the &quot;&lt;object_type_name&gt;&quot; in the function, when I run the function on the object that inherited this type, it simply states that it cannot find &lt;object_type_name&gt;, instead of searching for the new objects name, which inherit the object type (still hope you're with me - it's hard to formulate <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->).<br/><br/>Therefore I got to thinking; when referring to the player object we can use game.pov. Is there a similar command just to use on objects? I've tried to search around for something, but haven't been able to find a solution. If I've overlooked a wiki or forum thread/post about it, can you direct me there? <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> If this is not possible, is there another way to solve this problem? I could just not have the verb and function set on the object type, I just thought it would be handier if it was <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Thanks!",
      "PostDate": "2013-09-19T14:11:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26313",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "If you have a script attached to an object, you can refer to that object inside the script with the word &quot;this&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "If you have a script attached to an object, you can refer to that object inside the script with the word &quot;this&quot;.",
      "PostDate": "2013-09-19T15:00:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26314",
      "UserId": 0,
      "Username": "Slent",
      "UserAvatar": "6984_1379369689.png",
      "UserGravatar": "735aaf35bb538e1483a67fa49881c233",
      "EditableText": "Well, that was easy, thanks! I don't know why I didn't try only this. I tried object.this, inherited_object.this etc. but never only this.",
      "EditableFormat": "bbcode",
      "HTML": "Well, that was easy, thanks! I don't know why I didn't try only this. I tried object.this, inherited_object.this etc. but never only this.",
      "PostDate": "2013-09-19T15:06:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26315",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "as Pixie said, you can use &quot;this&quot; which will become defined to whatever is the script's parent object, which makes it work well with being a script attribute for your Object Type.\n\nand just to use it in scripting, for example:\n\nObject.Attribute\n..^\n..V\nthis.Attribute\n\nthis.strength\nthis.alias\netc...\n\n&quot;this&quot; is used instead of the object's name, but will get that (parent) object for the script.\n\nthe &quot;this&quot; pointer acts like a &quot;GetObject&quot; function, but only for its script attribute's parent object.",
      "EditableFormat": "bbcode",
      "HTML": "as Pixie said, you can use &quot;this&quot; which will become defined to whatever is the script's parent object, which makes it work well with being a script attribute for your Object Type.<br/><br/>and just to use it in scripting, for example:<br/><br/>Object.Attribute<br/>..^<br/>..V<br/>this.Attribute<br/><br/>this.strength<br/>this.alias<br/>etc...<br/><br/>&quot;this&quot; is used instead of the object's name, but will get that (parent) object for the script.<br/><br/>the &quot;this&quot; pointer acts like a &quot;GetObject&quot; function, but only for its script attribute's parent object.",
      "PostDate": "2013-09-20T00:54:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26316",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Keep in mind once you get deeper into coding - especially if you start calling your own scripts - that the &quot;this&quot; variable only comes in when you call a script via &quot;do&quot;:\n\ndo (someobject, &quot;somescript&quot;)\n\nThat's how Quest assigns the &quot;this&quot; param (someobject, in this case). If you call a script with:\n\ninvoke(somescript)\n\nthen there will not be a &quot;this&quot; variable. That might be a bit subtle, but I wanted to try to be clear about where &quot;this&quot; comes from. It's not so much an attribute of the script as it is a result of how the script it called.",
      "EditableFormat": "bbcode",
      "HTML": "Keep in mind once you get deeper into coding - especially if you start calling your own scripts - that the &quot;this&quot; variable only comes in when you call a script via &quot;do&quot;:<br/><br/>do (someobject, &quot;somescript&quot;)<br/><br/>That's how Quest assigns the &quot;this&quot; param (someobject, in this case). If you call a script with:<br/><br/>invoke(somescript)<br/><br/>then there will not be a &quot;this&quot; variable. That might be a bit subtle, but I wanted to try to be clear about where &quot;this&quot; comes from. It's not so much an attribute of the script as it is a result of how the script it called.",
      "PostDate": "2013-09-20T10:03:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "26317",
      "UserId": 0,
      "Username": "Slent",
      "UserAvatar": "6984_1379369689.png",
      "UserGravatar": "735aaf35bb538e1483a67fa49881c233",
      "EditableText": "That is very true jayna, and something to keep in mind when working on more complex code <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "That is very true jayna, and something to keep in mind when working on more complex code <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-09-20T11:12:51+01:00",
      "LastEditDate": null
    }
  ]
}
