{
  "Topic": {
    "TopicId": "fa0qyd4vgkgvq05quoggya",
    "ForumId": "10",
    "Title": "Jigsaw maps pieced together",
    "LastUpdated": "2024-05-21T03:12:48.6681689Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "173f9bc2-2b2a-435b-aac2-ecf83a58e56f",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, it is hard to explain this idea, I might need to reply a few more questions before I articulate well enough on what I am trying to do\r\n\r\nSo for rooms 1 to 20\r\nAnd rooms b1 to b20\r\nAnd rooms c1 to c20\r\n\r\nThey already have their existing npcs, enemies, possibly cities and even dungeons\r\n\r\nBut I want to reuse the same premade stuffs on different games,\r\nor to perhaps randomize the game map layout on every new game\r\n\r\nAt the top of rooms 1 to 20, which is room15\r\nwhen player enters room15, he triggers a hidden randomizer code that links this room (room15) to either roomb1 or roomc1\r\n\r\nThen the game remembers roomb1 is already activated\r\nSo at the right hand side of rooms 1 to 20, which is room5\r\nwhen player enters room5, he triggers a hidden randomizer code that links this room (room5) to either roomb1 or roomc1, but because roomb1 was already activated, it directly chooses roomc1\r\n\r\nSo, this is for a different game layout map on every new game\r\n\r\nBut what if I want something more complicated, map templates for a different game\r\nImagine I already predid 1000 different rooms split into perhaps 10 different quest apps or alphabets\r\nWhen I make a new game or five new games, possibly rpg\r\nI copy and paste the 1000 differents rooms in different order so that they are linked in the way I want,\r\nmaking the game feel different on every game, but actually I am reusing my old map layouts but redesigning it a bit\r\n\r\nHow do I do this method in the easiest way, because I have tried copying codes\r\n1. rooms with same number will override other rooms with same number\r\nSolved: This is solved by using alphabets like roomb1, but maybe you have better ideas\r\n2. when a room is linked to another room, it create towards and backwards exit,\r\nthis means you have to delete and modify the codes, you can't just copy and paste which is what I wanted\r\n3. creating an exit might possibly solve all my issues and make the code easy to admin/modify/upgrade, however when I create an exit, it actually gives me a literal object which I have to click on it to move to that destination\r\nPerhaps, I could just continue with this, 1 clicking object moving per 100 rooms is not that bad after all, but the map view is distorted, so generally, I hate this, I just want the default feel of moving up, down, left, right to explore the world, and not click any button to exit\r\n4. I possibly know how to randomize or set the npcs' shop items, or enemies' stats, or treasures already, I just need help with this room template thingy\r\n5. Infinite maze is the best and easiest game creator, but it feels the same everytime you play, a jigsaw maps pieced together can offer some randomization yet feel fresh, and even extendable to many different layout assets waiting to be combined in different ways to mass produce many games\r\n6. Map view can be huge issue, if jigsaw map templates are hit together on the same spot, the map might appear weirdly",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, it is hard to explain this idea, I might need to reply a few more questions before I articulate well enough on what I am trying to do</p>\n<p>So for rooms 1 to 20<br>\nAnd rooms b1 to b20<br>\nAnd rooms c1 to c20</p>\n<p>They already have their existing npcs, enemies, possibly cities and even dungeons</p>\n<p>But I want to reuse the same premade stuffs on different games,<br>\nor to perhaps randomize the game map layout on every new game</p>\n<p>At the top of rooms 1 to 20, which is room15<br>\nwhen player enters room15, he triggers a hidden randomizer code that links this room (room15) to either roomb1 or roomc1</p>\n<p>Then the game remembers roomb1 is already activated<br>\nSo at the right hand side of rooms 1 to 20, which is room5<br>\nwhen player enters room5, he triggers a hidden randomizer code that links this room (room5) to either roomb1 or roomc1, but because roomb1 was already activated, it directly chooses roomc1</p>\n<p>So, this is for a different game layout map on every new game</p>\n<p>But what if I want something more complicated, map templates for a different game<br>\nImagine I already predid 1000 different rooms split into perhaps 10 different quest apps or alphabets<br>\nWhen I make a new game or five new games, possibly rpg<br>\nI copy and paste the 1000 differents rooms in different order so that they are linked in the way I want,<br>\nmaking the game feel different on every game, but actually I am reusing my old map layouts but redesigning it a bit</p>\n<p>How do I do this method in the easiest way, because I have tried copying codes</p>\n<ol>\n<li>rooms with same number will override other rooms with same number<br>\nSolved: This is solved by using alphabets like roomb1, but maybe you have better ideas</li>\n<li>when a room is linked to another room, it create towards and backwards exit,<br>\nthis means you have to delete and modify the codes, you can't just copy and paste which is what I wanted</li>\n<li>creating an exit might possibly solve all my issues and make the code easy to admin/modify/upgrade, however when I create an exit, it actually gives me a literal object which I have to click on it to move to that destination<br>\nPerhaps, I could just continue with this, 1 clicking object moving per 100 rooms is not that bad after all, but the map view is distorted, so generally, I hate this, I just want the default feel of moving up, down, left, right to explore the world, and not click any button to exit</li>\n<li>I possibly know how to randomize or set the npcs' shop items, or enemies' stats, or treasures already, I just need help with this room template thingy</li>\n<li>Infinite maze is the best and easiest game creator, but it feels the same everytime you play, a jigsaw maps pieced together can offer some randomization yet feel fresh, and even extendable to many different layout assets waiting to be combined in different ways to mass produce many games</li>\n<li>Map view can be huge issue, if jigsaw map templates are hit together on the same spot, the map might appear weirdly</li>\n</ol>\n\n",
      "PostDate": "2024-05-21T03:12:48.6681689Z",
      "LastEditDate": "2024-05-21T03:14:56.6075461Z",
      "link": null
    },
    {
      "PostId": "cbf60728-80eb-4c6b-8e60-de0abab50da3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This doesn't sound like it should be difficult; but a little hard to answer in an abstract situation like this. I'll do the best I can.\r\n\r\n> when a room is linked to another room, it create towards and backwards exit,\r\n\r\nThat sounds like desirable behaviour to me. Don't you want exits to be created in both directions?\r\nI have in the past used scripts to create the reverse exits automatically (not using the core `CreateBiExits` function, because it has some minor issues which bug me)\r\n\r\nMy first thought, if room15 has an exit which can lead to either roomb1 or roomc1, would be to have something like this in the beforefirstenter script:\r\n\r\n```\r\ndestinations = Split (\"roomb1;roomc1\")\r\nrooms = NewObjectList()\r\nforeach (roomname, destinations) {\r\n  room = GetObject (roomname)\r\n  if (not GetBoolean (room, \"connected\")) {\r\n    list add (rooms, room)\r\n  }\r\n}\r\nif (ListCount (rooms) > 0) {\r\n  destination = PickOneObject (rooms)\r\n  destination.connected = true\r\n  create exit (\"north\", this, destination, \"northdirection\")\r\n  create exit (\"south\", destination, this, \"southdirection\")\r\n}\r\n```\r\nIs that something like what you're doing?\r\n\r\n> creating an exit might possibly solve all my issues and make the code easy to admin/modify/upgrade, however when I create an exit, it actually gives me a literal object which I have to click on it to move to that destination\r\n\r\nI don't know why that would happen; unless you're giving the exit an alias which isn't on the standard list of directions. I've helped someone who had this problem before; turned out that she was giving a new exit the alias \"North\" instead of \"north\".\r\n\r\n> Map view can be huge issue, if jigsaw map templates are hit together on the same spot, the map might appear weirdly\r\n\r\nIt might be a bit more complex to assemble a random map if you need to avoid overlapping rooms. Am I correct in thinking that you have multi-room pieces of the dungeon which need to avoid overlapping? In this case, you would probably need to have some kind of internal map, keeping track of which spaces in the dungeon are used. Normally I would think of using a couple of dictionaries (or a linked list) to organise something like this; but because those data structures are a little weird in Quest, it might be easier to use alternatives; one thing I thought of is giving each cluster of rooms a kind of ASCII-art attribute showing what it looks like in the map; and have a function which loops over this string character by character, checking if two maps would collide.\r\n\r\nHowever, if you have some room-groups which might not fit based on where others are placed, there could be situations where the last group to be connected to the map won't fit. For this reason, you would need to run some map generation at the start of the game; repeating until all necessary areas have been successfully placed.\r\n\r\nHope that makes sense; just some first thoughts off the top of my head.",
      "EditableFormat": "markdown",
      "HTML": "<p>This doesn't sound like it should be difficult; but a little hard to answer in an abstract situation like this. I'll do the best I can.</p>\n<blockquote>\n<p>when a room is linked to another room, it create towards and backwards exit,</p>\n</blockquote>\n<p>That sounds like desirable behaviour to me. Don't you want exits to be created in both directions?<br>\nI have in the past used scripts to create the reverse exits automatically (not using the core <code>CreateBiExits</code> function, because it has some minor issues which bug me)</p>\n<p>My first thought, if room15 has an exit which can lead to either roomb1 or roomc1, would be to have something like this in the beforefirstenter script:</p>\n<pre><code>destinations = Split (\"roomb1;roomc1\")\nrooms = NewObjectList()\nforeach (roomname, destinations) {\n  room = GetObject (roomname)\n  if (not GetBoolean (room, \"connected\")) {\n    list add (rooms, room)\n  }\n}\nif (ListCount (rooms) &gt; 0) {\n  destination = PickOneObject (rooms)\n  destination.connected = true\n  create exit (\"north\", this, destination, \"northdirection\")\n  create exit (\"south\", destination, this, \"southdirection\")\n}\n</code></pre>\n<p>Is that something like what you're doing?</p>\n<blockquote>\n<p>creating an exit might possibly solve all my issues and make the code easy to admin/modify/upgrade, however when I create an exit, it actually gives me a literal object which I have to click on it to move to that destination</p>\n</blockquote>\n<p>I don't know why that would happen; unless you're giving the exit an alias which isn't on the standard list of directions. I've helped someone who had this problem before; turned out that she was giving a new exit the alias \"North\" instead of \"north\".</p>\n<blockquote>\n<p>Map view can be huge issue, if jigsaw map templates are hit together on the same spot, the map might appear weirdly</p>\n</blockquote>\n<p>It might be a bit more complex to assemble a random map if you need to avoid overlapping rooms. Am I correct in thinking that you have multi-room pieces of the dungeon which need to avoid overlapping? In this case, you would probably need to have some kind of internal map, keeping track of which spaces in the dungeon are used. Normally I would think of using a couple of dictionaries (or a linked list) to organise something like this; but because those data structures are a little weird in Quest, it might be easier to use alternatives; one thing I thought of is giving each cluster of rooms a kind of ASCII-art attribute showing what it looks like in the map; and have a function which loops over this string character by character, checking if two maps would collide.</p>\n<p>However, if you have some room-groups which might not fit based on where others are placed, there could be situations where the last group to be connected to the map won't fit. For this reason, you would need to run some map generation at the start of the game; repeating until all necessary areas have been successfully placed.</p>\n<p>Hope that makes sense; just some first thoughts off the top of my head.</p>\n\n",
      "PostDate": "2024-05-21T14:29:51.3683784Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1755a0bf-192e-47bf-aa7a-6f96cc450c09",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It is night time, so I am keeping it short\r\n\r\nYes I like to have towards and backwards exit, but if I have to explain why I want it to be simpler or less coding\r\nAs foolish as I sound, I am imagining automatic via code or perhaps use quick GUI, scroll down connect exits\r\n\r\nImagine a jigsaw puzzle, you have 3 room templates for different areas like kitchen, brewery, inn, stable, castle\r\nSo in a 100 room game, the player will walk and trigger random rooms to access permanently, so 100/3 = 33 manual hardwork to write in towards and backwards exit, and the manual hardwork will become more as your game becomes bigger\r\n\r\nThe reason why I am using 100 rooms templates to make 1000 rooms game is because of this, I can't do that many manual hardwork, it is also why I love reusing infinite maze over and over again, easy and no workload =D\r\nBut as you can see, eventually players can easily recognize the patterns of 100 rooms template and they will get bored, if it does not feel random, it is going to feel like the same game for them, ultimately this means 3 to 10 rooms template are best even though they can be incomprehensible to work with, at least for the now me\r\n\r\n________________________________\r\n\r\nYes, your awesome code is what I am looking, but as usual, it will take me some time to understand it\r\n\r\n________________________________\r\n\r\nExample A game code:\r\nUsing your code, create exit (\"south\", destination, this, \"southdirection\")\r\nUnfortunately, when the player moves, the map is screwed up, the map might be important for a rpg game\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"test2 empty rooms\">\r\n    <gameid>2485958b-dbb4-403e-9158-42169e4faf57</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2024</firstpublished>\r\n    <gridmap />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"north\" to=\"room1\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room1\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"room\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"northwest\" to=\"room2\">\r\n      <inherit name=\"northwestdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n      create exit (\"north\", this, roomb1, \"northdirection\")\r\n    </enter>\r\n    <exit alias=\"southeast\" to=\"room1\">\r\n      <inherit name=\"southeastdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"room3\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room4\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room5\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room6\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room7\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room8\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room9\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"room10\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb1\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"north\" to=\"roomb2\">\r\n      <inherit name=\"northdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"roomb2\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"south\" to=\"roomb1\">\r\n      <inherit name=\"southdirection\" />\r\n    </exit>\r\n    <exit alias=\"northeast\" to=\"roomb3\">\r\n      <inherit name=\"northeastdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"roomb3\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"southwest\" to=\"roomb2\">\r\n      <inherit name=\"southwestdirection\" />\r\n    </exit>\r\n    <exit alias=\"east\" to=\"roomb4\">\r\n      <inherit name=\"eastdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"roomb4\">\r\n    <inherit name=\"editor_room\" />\r\n    <exit alias=\"west\" to=\"roomb3\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n  </object>\r\n  <object name=\"roomb5\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb6\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb7\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb8\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb9\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <object name=\"roomb10\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n</asl>\r\n```\r\n</details>\r\n\r\n_____________________________________\r\n\r\nAnd you have already solved a mystery!\r\n\r\n>I don't know why that would happen; unless you're giving the exit an alias which isn't on the standard list of directions. I've helped someone who had this problem before; turned out that she was giving a new exit the alias \"North\" instead of \"north\".\r\n\r\nI wrote the exit name as \"tunnel\" instead of north\r\n\r\n___________________________________\r\n\r\nLets not go into dictionaries  and data structures, I haven't truly understand the fishy error's dictionaries yet =D\r\nGenerally, the map might work if rooms are overlapping in same xyz, but the players may feel out of place, once they were in this xyz and it was a stable but moving another pathway, this same xyz becomes a temple\r\n\r\nI am looking more for theoretical answers rather than coding, so anyone giving ideas would be equally helpful\r\nFor example, for 3 room templates, use a grid of 3x3, this stops the templates from ever crossing each other, meaning if a stable have 4 rooms, there will be 5 emptiness to fill up the grid of 3x3\r\nI am sure there are more ideas, I am just not artistic or understand dimensional things enough",
      "EditableFormat": "markdown",
      "HTML": "<p>It is night time, so I am keeping it short</p>\n<p>Yes I like to have towards and backwards exit, but if I have to explain why I want it to be simpler or less coding<br>\nAs foolish as I sound, I am imagining automatic via code or perhaps use quick GUI, scroll down connect exits</p>\n<p>Imagine a jigsaw puzzle, you have 3 room templates for different areas like kitchen, brewery, inn, stable, castle<br>\nSo in a 100 room game, the player will walk and trigger random rooms to access permanently, so 100/3 = 33 manual hardwork to write in towards and backwards exit, and the manual hardwork will become more as your game becomes bigger</p>\n<p>The reason why I am using 100 rooms templates to make 1000 rooms game is because of this, I can't do that many manual hardwork, it is also why I love reusing infinite maze over and over again, easy and no workload =D<br>\nBut as you can see, eventually players can easily recognize the patterns of 100 rooms template and they will get bored, if it does not feel random, it is going to feel like the same game for them, ultimately this means 3 to 10 rooms template are best even though they can be incomprehensible to work with, at least for the now me</p>\n<hr>\n<p>Yes, your awesome code is what I am looking, but as usual, it will take me some time to understand it</p>\n<hr>\n<p>Example A game code:<br>\nUsing your code, create exit (\"south\", destination, this, \"southdirection\")<br>\nUnfortunately, when the player moves, the map is screwed up, the map might be important for a rpg game</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"test2 empty rooms\"&gt;\n    &lt;gameid&gt;2485958b-dbb4-403e-9158-42169e4faf57&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2024&lt;/firstpublished&gt;\n    &lt;gridmap /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"north\" to=\"room1\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room1\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"room\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"northwest\" to=\"room2\"&gt;\n      &lt;inherit name=\"northwestdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n      create exit (\"north\", this, roomb1, \"northdirection\")\n    &lt;/enter&gt;\n    &lt;exit alias=\"southeast\" to=\"room1\"&gt;\n      &lt;inherit name=\"southeastdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room4\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room5\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room6\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room7\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room8\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room9\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room10\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb1\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"north\" to=\"roomb2\"&gt;\n      &lt;inherit name=\"northdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"south\" to=\"roomb1\"&gt;\n      &lt;inherit name=\"southdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"northeast\" to=\"roomb3\"&gt;\n      &lt;inherit name=\"northeastdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb3\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"southwest\" to=\"roomb2\"&gt;\n      &lt;inherit name=\"southwestdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;exit alias=\"east\" to=\"roomb4\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb4\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;exit alias=\"west\" to=\"roomb3\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb5\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb6\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb7\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb8\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb9\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;object name=\"roomb10\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>And you have already solved a mystery!</p>\n<blockquote>\n<p>I don't know why that would happen; unless you're giving the exit an alias which isn't on the standard list of directions. I've helped someone who had this problem before; turned out that she was giving a new exit the alias \"North\" instead of \"north\".</p>\n</blockquote>\n<p>I wrote the exit name as \"tunnel\" instead of north</p>\n<hr>\n<p>Lets not go into dictionaries  and data structures, I haven't truly understand the fishy error's dictionaries yet =D<br>\nGenerally, the map might work if rooms are overlapping in same xyz, but the players may feel out of place, once they were in this xyz and it was a stable but moving another pathway, this same xyz becomes a temple</p>\n<p>I am looking more for theoretical answers rather than coding, so anyone giving ideas would be equally helpful<br>\nFor example, for 3 room templates, use a grid of 3x3, this stops the templates from ever crossing each other, meaning if a stable have 4 rooms, there will be 5 emptiness to fill up the grid of 3x3<br>\nI am sure there are more ideas, I am just not artistic or understand dimensional things enough</p>\n\n",
      "PostDate": "2024-05-21T16:29:42.6745765Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
