{
  "Topic": {
    "TopicId": "igjn9ziem0cifdy5xifsza",
    "ForumId": "10",
    "Title": "Question: Filling in a Character's Name",
    "LastUpdated": "2020-04-11T21:03:42.2578901Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a84bdd7a-c821-49cf-be36-1f4b8ce0525e",
      "UserId": 475157,
      "Username": "Gooseberry",
      "AvatarUrl": "https://i.imgur.com/vXNApy5b.gif",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "What is the <u><b>{} code</b></u> for letting the player enter in a name for the character? I looked at text formatting, but I may have looked straight past it because it wasn't made clear to my simple mind lol.\r\nI know about <b>{player.alias}</b> but that's only used after you put in the text fill, right?",
      "EditableFormat": "markdown",
      "HTML": "<p>What is the <u><b>{} code</b></u> for letting the player enter in a name for the character? I looked at text formatting, but I may have looked straight past it because it wasn't made clear to my simple mind lol.<br>\nI know about <b>{player.alias}</b> but that's only used after you put in the text fill, right?</p>\n\n",
      "PostDate": "2020-04-11T21:03:42.2578901Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eefd4867-16d9-4c54-b51a-c74bba9da886",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, for what you want, you will need this tutorial here:\r\n\r\nhttps://docs.textadventures.co.uk/quest/asking_a_question.html\r\n\r\nI have found it's presentation is a little ugly. You need using the command bar and make sure the player notices it is a pause for typing whatever the input you are asking for. In the case of something permanent as character name, perhaps you may fins useful adding a confirmation.\r\n\r\nBut in general terms, if naming a character is all you want for now, just copy and paste the first code you see in the link above and it will work perfectly.\r\n\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, for what you want, you will need this tutorial here:</p>\n<p>https://docs.textadventures.co.uk/quest/asking_a_question.html</p>\n<p>I have found it's presentation is a little ugly. You need using the command bar and make sure the player notices it is a pause for typing whatever the input you are asking for. In the case of something permanent as character name, perhaps you may fins useful adding a confirmation.</p>\n<p>But in general terms, if naming a character is all you want for now, just copy and paste the first code you see in the link above and it will work perfectly.</p>\n\n",
      "PostDate": "2020-04-11T21:37:24.0685823Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3ed38d7a-0d73-4c17-8483-a54387e3cd90",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was going to say there isn't a text processor code for allowing the player to input something; but it might be a useful feature to add. I'll take a look in the morning, if I have more time to think about it. I think it would be nice (particularly for gamebooks) if you could have a \"fill in the blank\" type text box placed inline in the text, which would set a variable when it was completed.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was going to say there isn't a text processor code for allowing the player to input something; but it might be a useful feature to add. I'll take a look in the morning, if I have more time to think about it. I think it would be nice (particularly for gamebooks) if you could have a \"fill in the blank\" type text box placed inline in the text, which would set a variable when it was completed.</p>\n\n",
      "PostDate": "2020-04-11T23:03:25.1442347Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4561e1a1-0f8d-44da-aa77-479e046b33b2",
      "UserId": 163617,
      "Username": "Deckrect ",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually, it would be great because is ecxactly what I need right now.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually, it would be great because is ecxactly what I need right now.</p>\n\n",
      "PostDate": "2020-04-11T23:04:33.4807161Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "47ff1ef4-dc97-4d88-8b50-45f7d98729db",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Actually, it would be great because is ecxactly what I need right now.\r\n\r\nOff the top of my head… I'll probably need to do some debugging on this later.\r\n\r\nTo display a \"fill in the blank\" kind of space to put an input field in the text, we'll need a bit of javascript. In this case, a script that will run after `addText`, to bind events to new text as it appears.\r\n```\r\n$(function () {\r\n  var originalAddText = addText;\r\n  addText = function (text) {\r\n    var latest = getCurrentDiv().children().last();\r\n    addText(text);\r\n    latest.nextAll().find('.inlineinput').each(function () {\r\n      var $this = $(this);\r\n      var changed = 0;\r\n      $this.change(\r\n        e => changed = $this.text().length > 0\r\n      ).keydown(function (ev) {\r\n        if (ev.which === 13) {\r\n          changed = $this.text().length > 0;\r\n          ev.stopPropagation(); ev.preventDefault();\r\n          $this.blur();\r\n        }\r\n      }).blur(function (e) {\r\n        if (changed) {\r\n          ASLEvent('InlineValueEdit', $this.data('questattribute')+\"=\"+$this.attr('contenteditable', 'false').text());\r\n          changed = 0;\r\n        }\r\n      }).attr('contenteditable', 'true');\r\n    });\r\n  };\r\n});\r\n```\r\n\r\nThen a function to actually generate the HTML. For the text processor, we'd want to add an element to the scriptdictionary `game.textprocessorcommands`:\r\n```\r\n<item key=\"inline:\">\r\n  params = Tsplit (section + \":\")\r\n  attr = ListItem (params, 1)\r\n  if (ListCount (params) > 2) {\r\n    default = ProcessTextSection (ListItem (params, 2), data)\r\n  }\r\n  else {\r\n    default = \"\";\r\n  }\r\n  game.textprocessorcommandresult = \"<span class=\\\"inlineinput\\\" data-questattribute=\\\"\" + attr + \"\\\">\" + default + \"</span>\"\r\n</item>\r\n```\r\n\r\nAnd then a function to handle the entered value:\r\n```\r\n<function name=\"InlineValueEdit\" parameters=\"params\">\r\n  equal = Instr (params, \"=\")\r\n  if (not equal > 3) {\r\n    error (\"Invalid object name in InlineValueEdit!\")\r\n  }\r\n  attr = Left (params, equal-1)\r\n  value = Mid (params, equal + 1)\r\n  if (Instr (attr, \".\") = 0) {\r\n    attr = \"game.\" + attr\r\n  }\r\n  target = null\r\n  attr = Split (attr, \".\")\r\n  for (i, 0, ListCount (attr)-2) {\r\n    segment = ListItem (attr, i)\r\n    if (target = null) {\r\n      target = GetObject (segment)\r\n    }\r\n    else {\r\n      target = GetAttribute (target, segment)\r\n    }\r\n    if (target = null) {\r\n      result = \"Couldn't find object \"\r\n      for (j, 0, i) {\r\n        result = result + ListItem (attr, j) + \".\"\r\n      }\r\n      error (Left (result, LengthOf(result) - 1) + \" in InlineValueEdit.\")\r\n    }\r\n  }\r\n  set (target, ListItem (attr, ListCount (attr)-1), value)\r\n</function>\r\n```\r\nThat's a bit horrible; but it basically takes a string like `game.pov.alias=George` (handed to it by the javascript above) and breaks it down into parts.\r\n\r\nI put it into a loop so you could use `game.pov.alias` and have it work correctly. But really, this could probably be done with a simpler piece of code.\r\n\r\nAnd I really need to get on with some actual work now… I've got a free book promotion and a charity promotion to organise, I'm supposed to be writing a novel, and I'm supposed to be doing a daily video series about how I'm writing a novel… and I've not done any of it today.\r\n\r\nI'll come back to this later and try to make sure it works.\r\nIf it does work (which is possible), you could just include `“Hello, my name is {inline:player.alias}, how can I help you”` in the output text; the player can click in the text box and press enter, and it will change their alias.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Actually, it would be great because is ecxactly what I need right now.</p>\n</blockquote>\n<p>Off the top of my head… I'll probably need to do some debugging on this later.</p>\n<p>To display a \"fill in the blank\" kind of space to put an input field in the text, we'll need a bit of javascript. In this case, a script that will run after <code>addText</code>, to bind events to new text as it appears.</p>\n<pre><code>$(function () {\n  var originalAddText = addText;\n  addText = function (text) {\n    var latest = getCurrentDiv().children().last();\n    addText(text);\n    latest.nextAll().find('.inlineinput').each(function () {\n      var $this = $(this);\n      var changed = 0;\n      $this.change(\n        e =&gt; changed = $this.text().length &gt; 0\n      ).keydown(function (ev) {\n        if (ev.which === 13) {\n          changed = $this.text().length &gt; 0;\n          ev.stopPropagation(); ev.preventDefault();\n          $this.blur();\n        }\n      }).blur(function (e) {\n        if (changed) {\n          ASLEvent('InlineValueEdit', $this.data('questattribute')+\"=\"+$this.attr('contenteditable', 'false').text());\n          changed = 0;\n        }\n      }).attr('contenteditable', 'true');\n    });\n  };\n});\n</code></pre>\n<p>Then a function to actually generate the HTML. For the text processor, we'd want to add an element to the scriptdictionary <code>game.textprocessorcommands</code>:</p>\n<pre><code>&lt;item key=\"inline:\"&gt;\n  params = Tsplit (section + \":\")\n  attr = ListItem (params, 1)\n  if (ListCount (params) &gt; 2) {\n    default = ProcessTextSection (ListItem (params, 2), data)\n  }\n  else {\n    default = \"\";\n  }\n  game.textprocessorcommandresult = \"&lt;span class=\\\"inlineinput\\\" data-questattribute=\\\"\" + attr + \"\\\"&gt;\" + default + \"&lt;/span&gt;\"\n&lt;/item&gt;\n</code></pre>\n<p>And then a function to handle the entered value:</p>\n<pre><code>&lt;function name=\"InlineValueEdit\" parameters=\"params\"&gt;\n  equal = Instr (params, \"=\")\n  if (not equal &gt; 3) {\n    error (\"Invalid object name in InlineValueEdit!\")\n  }\n  attr = Left (params, equal-1)\n  value = Mid (params, equal + 1)\n  if (Instr (attr, \".\") = 0) {\n    attr = \"game.\" + attr\n  }\n  target = null\n  attr = Split (attr, \".\")\n  for (i, 0, ListCount (attr)-2) {\n    segment = ListItem (attr, i)\n    if (target = null) {\n      target = GetObject (segment)\n    }\n    else {\n      target = GetAttribute (target, segment)\n    }\n    if (target = null) {\n      result = \"Couldn't find object \"\n      for (j, 0, i) {\n        result = result + ListItem (attr, j) + \".\"\n      }\n      error (Left (result, LengthOf(result) - 1) + \" in InlineValueEdit.\")\n    }\n  }\n  set (target, ListItem (attr, ListCount (attr)-1), value)\n&lt;/function&gt;\n</code></pre>\n<p>That's a bit horrible; but it basically takes a string like <code>game.pov.alias=George</code> (handed to it by the javascript above) and breaks it down into parts.</p>\n<p>I put it into a loop so you could use <code>game.pov.alias</code> and have it work correctly. But really, this could probably be done with a simpler piece of code.</p>\n<p>And I really need to get on with some actual work now… I've got a free book promotion and a charity promotion to organise, I'm supposed to be writing a novel, and I'm supposed to be doing a daily video series about how I'm writing a novel… and I've not done any of it today.</p>\n<p>I'll come back to this later and try to make sure it works.<br>\nIf it does work (which is possible), you could just include <code>“Hello, my name is {inline:player.alias}, how can I help you”</code> in the output text; the player can click in the text box and press enter, and it will change their alias.</p>\n\n",
      "PostDate": "2020-04-12T16:04:06.3821948Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "637ecd2f-a591-4e5f-8b55-762d7659bdf0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "set the desired 'PageX' Object's 'page type' Attribute to: [script] or [script + text]\r\n\r\nadd new script -> 'output' section/category (I think) -> 'print a message' Script -> (see below)\r\n\r\nprint [MESSAGE] TYPE_IN_WHAT_YOU_WANT_DISPLAYED_HERE\r\n\r\n// or (if you want/need to use VARIABLES, and not just TEXT:\r\nprint [EXPRESSION] COMPLEX_EXPRESSION\r\n// (COMPLEX_EXPRESSION: SEE_ASK_HOW_TO_SCRIPT_TEXT_WITH_VARIABLES_OR_JUST_VARIABLES_WITHOUT_TEXT)\r\n\r\nadd new script -> 'scripts' section/category (I think) -> 'get input' Script\r\n\r\n-> then -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable player.alias = result\r\n// (this is storing your input to the 'alias' String Attribute of your Player Object)\r\n\r\n---------------\r\n\r\n// you can then use it within a text processor command (example in code):\r\n\r\nmsg (\"Name: {player.alias}\")\r\n\r\nor, not using the text processor commands (an example):\r\n\r\nmsg (\"Name: \" + player.alias)\r\n\r\nthe 'msg' Script/Function in code is achieved through the GUI/Editor via:\r\n\r\nadd new script -> 'output' section/category -> 'print a message' Script ->\r\n\r\n// an example:\r\nprint [EXPRESSION] \"Name: \" + player.alias\r\n\r\n// replace 'player' with 'game.pov' (for example: 'game.pov.alias' instead of 'player.alias') if you changed the Player Object's 'name' ID String Attribute to something else other than the default 'player' for the Player Object's 'name' ID String Attribute",
      "EditableFormat": "markdown",
      "HTML": "<p>set the desired 'PageX' Object's 'page type' Attribute to: [script] or [script + text]</p>\n<p>add new script -&gt; 'output' section/category (I think) -&gt; 'print a message' Script -&gt; (see below)</p>\n<p>print [MESSAGE] TYPE_IN_WHAT_YOU_WANT_DISPLAYED_HERE</p>\n<p>// or (if you want/need to use VARIABLES, and not just TEXT:<br>\nprint [EXPRESSION] COMPLEX_EXPRESSION<br>\n// (COMPLEX_EXPRESSION: SEE_ASK_HOW_TO_SCRIPT_TEXT_WITH_VARIABLES_OR_JUST_VARIABLES_WITHOUT_TEXT)</p>\n<p>add new script -&gt; 'scripts' section/category (I think) -&gt; 'get input' Script</p>\n<p>-&gt; then -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable player.alias = result<br>\n// (this is storing your input to the 'alias' String Attribute of your Player Object)</p>\n<hr>\n<p>// you can then use it within a text processor command (example in code):</p>\n<p>msg (\"Name: {player.alias}\")</p>\n<p>or, not using the text processor commands (an example):</p>\n<p>msg (\"Name: \" + player.alias)</p>\n<p>the 'msg' Script/Function in code is achieved through the GUI/Editor via:</p>\n<p>add new script -&gt; 'output' section/category -&gt; 'print a message' Script -&gt;</p>\n<p>// an example:<br>\nprint [EXPRESSION] \"Name: \" + player.alias</p>\n<p>// replace 'player' with 'game.pov' (for example: 'game.pov.alias' instead of 'player.alias') if you changed the Player Object's 'name' ID String Attribute to something else other than the default 'player' for the Player Object's 'name' ID String Attribute</p>\n\n",
      "PostDate": "2020-04-12T16:14:38.3642584Z",
      "LastEditDate": "2020-04-12T16:26:12.5849343Z",
      "link": null
    }
  ]
}
