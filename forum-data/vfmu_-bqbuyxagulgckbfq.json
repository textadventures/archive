{
  "Topic": {
    "TopicId": "vfmu_-bqbuyxagulgckbfq",
    "ForumId": "15",
    "Title": "Custom functions (and such) for Quest 6 AKA QuestJS v0.3",
    "LastUpdated": "2020-12-04T18:11:24.095922Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "762596d6-f452-4617-b374-b20b704b42dc",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```js\r\n\r\n//For QuestJS v0.3\r\nfunction isWearing(char,obj){\r\n    //char should be the object who can wear obj\r\n    var worn = (obj.getWorn() && obj.loc===char.name)?true:false\r\n    return worn\r\n}\r\n```\r\n\r\n---\r\n# EXAMPLE:\r\n\r\nImagine a game with a wearable object named \"mask\".\r\n\r\nIn the JS code, the mask is referred to as: ```w.mask```.\r\n\r\nThe default player object is set to ```w.me```, but I prefer to take the advice of mrangel and use ```game.player``` in my code (just to make sure the code targets the actual player object, which is not always ```w.me```).\r\n\r\n```\r\n    if (isWearing(game.player,w.mask)){\r\n        //The current player object is wearing the object named \"mask\".\r\n        //Do (or don't) stuff!\r\n    }else{\r\n        //The current player object is NOT wearing the object named \"mask\"!\r\n        //Do (or don't) do stuff!\r\n    }\r\n```\r\n\r\n---\r\nI plan to add more custom code to this thread.\r\n\r\nAll comments and suggestions welcomed!",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>\n//For QuestJS v0.3\nfunction isWearing(char,obj){\n    //char should be the object who can wear obj\n    var worn = (obj.getWorn() &amp;&amp; obj.loc===char.name)?true:false\n    return worn\n}\n</code></pre>\n<hr>\n<h1>EXAMPLE:</h1>\n<p>Imagine a game with a wearable object named \"mask\".</p>\n<p>In the JS code, the mask is referred to as: <code>w.mask</code>.</p>\n<p>The default player object is set to <code>w.me</code>, but I prefer to take the advice of mrangel and use <code>game.player</code> in my code (just to make sure the code targets the actual player object, which is not always <code>w.me</code>).</p>\n<pre><code>    if (isWearing(game.player,w.mask)){\n        //The current player object is wearing the object named \"mask\".\n        //Do (or don't) stuff!\n    }else{\n        //The current player object is NOT wearing the object named \"mask\"!\n        //Do (or don't) do stuff!\n    }\n</code></pre>\n<hr>\n<p>I plan to add more custom code to this thread.</p>\n<p>All comments and suggestions welcomed!</p>\n\n",
      "PostDate": "2020-12-04T18:11:24.095922Z",
      "LastEditDate": "2020-12-04T18:22:25.3803655Z",
      "link": null
    },
    {
      "PostId": "b4e41fbd-457f-454a-8b49-16916053745e",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```js\r\n//I created this to help user 'Dakin Quelia' on the forum, and I find it useful.\r\n// http://textadventures.co.uk/forum/questkit/topic/cvlcnikvo0oj3bt8nqsnig/solved-about-questjs-list-of-functions-avalaible-for-items-rooms\r\n//This returns an object (aka dictionary).\r\n//It only needs the obj argument: listItemAtts(obj)\r\n//A true arg can be added to print data in-game as well: listItemAtts(obj,true)\r\n//  (Adding a false boolean arg is not necessary, as that is the default.)\r\n//UPDATED 2020.12.4\r\nfunction listItemAtts(obj,pt=false){\r\n\t//IF pt is true, the properties will be printed in-game via msg()\r\n\tvar keys = Object.keys(obj);\r\n\tvar txt = '';\r\n\tvar a = 0;\r\n\tkeys.forEach(key => {txt+=a.toString() + \": \" + keys[a]+\"<br/>\";a++;})\r\n\tif(pt) { msg(obj.name + \" PROPERTIES:\");msg(txt);}  //pt is false by default\r\n\treturn keys;\t\r\n};\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>//I created this to help user 'Dakin Quelia' on the forum, and I find it useful.\n// http://textadventures.co.uk/forum/questkit/topic/cvlcnikvo0oj3bt8nqsnig/solved-about-questjs-list-of-functions-avalaible-for-items-rooms\n//This returns an object (aka dictionary).\n//It only needs the obj argument: listItemAtts(obj)\n//A true arg can be added to print data in-game as well: listItemAtts(obj,true)\n//  (Adding a false boolean arg is not necessary, as that is the default.)\n//UPDATED 2020.12.4\nfunction listItemAtts(obj,pt=false){\n\t//IF pt is true, the properties will be printed in-game via msg()\n\tvar keys = Object.keys(obj);\n\tvar txt = '';\n\tvar a = 0;\n\tkeys.forEach(key =&gt; {txt+=a.toString() + \": \" + keys[a]+\"&lt;br/&gt;\";a++;})\n\tif(pt) { msg(obj.name + \" PROPERTIES:\");msg(txt);}  //pt is false by default\n\treturn keys;\t\n};\n</code></pre>\n\n",
      "PostDate": "2020-12-04T18:53:31.2028337Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e0ce097c-62da-43cc-b463-99d6abd54bd2",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```js\r\n//Returns a list of objects comprised of all world (w) objects.\r\nfunction allObjects(){\r\n\tvar arr = listItemAtts(w)  //Create list of names of all objects in w object\r\n\tarr.splice(arr.indexOf(\"game\"),1) //Remove the game object\r\n\t//arr.splice(arr.indexOf(\"me\"),1) //Remove the default player object\r\n\t//arr.splice(arr.indexOf(\"background\"),1) //Remove the background object\r\n\tvar scriptArr = [] //Create temp array to hold scripts\r\n\tarr.forEach(a => {if(typeof(w[a][\"eventScript\"])==='function') scriptArr.push(a)}) //Find the turnscripts\r\n\tarr = array.subtract(arr,scriptArr)  //Remove the turnscripts\r\n\t//arr.forEach(a=>{console.log(a)}) //Debugging purposes\r\n\tvar arrTwo = []  //Create the actual array\r\n\tarr.forEach(a => {arrTwo.push(w[a])}) //Use objects' names to add actual objects to arrTwo\r\n\treturn arrTwo\r\n}\r\n```\r\n\r\n---\r\nThis is my Quest 6 equivalent of [AllObjects](http://docs.textadventures.co.uk/quest/functions/allobjects.html \"Quest 5 Doc: AllObjects\").\r\n\r\nIt works the same.  It returns an objectlist of all in-game objects.\r\n\r\n---\r\nNOTE\r\n\r\nThere may be an existing function that does this, but I couldn't find one after a good few minutes and decided it would be faster (and more fun) to make my own.\r\n\r\n---\r\nIMPORTANT NOTE\r\n\r\nThis requires my [listItemAtts](http://textadventures.co.uk/forum/questkit/topic/vfmu_-bqbuyxagulgckbfq/custom-functions-and-such-for-quest-6-aka-questjs-v0-3#b4e41fbd-457f-454a-8b49-16916053745e \"View the code for listItemAtts!\") function!",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>//Returns a list of objects comprised of all world (w) objects.\nfunction allObjects(){\n\tvar arr = listItemAtts(w)  //Create list of names of all objects in w object\n\tarr.splice(arr.indexOf(\"game\"),1) //Remove the game object\n\t//arr.splice(arr.indexOf(\"me\"),1) //Remove the default player object\n\t//arr.splice(arr.indexOf(\"background\"),1) //Remove the background object\n\tvar scriptArr = [] //Create temp array to hold scripts\n\tarr.forEach(a =&gt; {if(typeof(w[a][\"eventScript\"])==='function') scriptArr.push(a)}) //Find the turnscripts\n\tarr = array.subtract(arr,scriptArr)  //Remove the turnscripts\n\t//arr.forEach(a=&gt;{console.log(a)}) //Debugging purposes\n\tvar arrTwo = []  //Create the actual array\n\tarr.forEach(a =&gt; {arrTwo.push(w[a])}) //Use objects' names to add actual objects to arrTwo\n\treturn arrTwo\n}\n</code></pre>\n<hr>\n<p>This is my Quest 6 equivalent of <a href=\"http://docs.textadventures.co.uk/quest/functions/allobjects.html\" title=\"Quest 5 Doc: AllObjects\">AllObjects</a>.</p>\n<p>It works the same.  It returns an objectlist of all in-game objects.</p>\n<hr>\n<p>NOTE</p>\n<p>There may be an existing function that does this, but I couldn't find one after a good few minutes and decided it would be faster (and more fun) to make my own.</p>\n<hr>\n<p>IMPORTANT NOTE</p>\n<p>This requires my <a href=\"http://textadventures.co.uk/forum/questkit/topic/vfmu_-bqbuyxagulgckbfq/custom-functions-and-such-for-quest-6-aka-questjs-v0-3#b4e41fbd-457f-454a-8b49-16916053745e\" title=\"View the code for listItemAtts!\">listItemAtts</a> function!</p>\n\n",
      "PostDate": "2020-12-04T19:00:51.1123105Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e219a7d3-e337-41b5-9bcd-c12e86d3051a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> NOTE\r\nThere may be an existing function that does this, but I couldn't find one after a good few minutes and decided it would be faster (and more fun) to make my own.\r\n\r\nTop of my head:\r\n```\r\nfunction allObjects(){\r\n  return Object.keys(w).filter(x => (x !== \"game\" && typeof(w[x][\"eventScript\"])!=='function')).map(x => w[x]);\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>NOTE<br>\nThere may be an existing function that does this, but I couldn't find one after a good few minutes and decided it would be faster (and more fun) to make my own.</p>\n</blockquote>\n<p>Top of my head:</p>\n<pre><code>function allObjects(){\n  return Object.keys(w).filter(x =&gt; (x !== \"game\" &amp;&amp; typeof(w[x][\"eventScript\"])!=='function')).map(x =&gt; w[x]);\n}\n</code></pre>\n\n",
      "PostDate": "2020-12-04T20:05:01.0118856Z",
      "LastEditDate": "2020-12-04T20:08:38.2378171Z",
      "link": null
    },
    {
      "PostId": "923f4fd9-19f8-47f7-ad38-cc5d3eb00e88",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey!\r\n\r\nThat works perfectly!\r\n\r\nGo, mrangel, go!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey!</p>\n<p>That works perfectly!</p>\n<p>Go, mrangel, go!!!</p>\n\n",
      "PostDate": "2020-12-04T20:12:23.6575773Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "69573c9e-1bf3-4d77-a57e-0fe5a0f57fe9",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Dude...\r\n\r\n```.map(x => w[x])``` is freaking awesome!  I can use that to make another function much more efficient.\r\n\r\nThanks, mrangel!",
      "EditableFormat": "markdown",
      "HTML": "<p>Dude...</p>\n<p><code>.map(x =&gt; w[x])</code> is freaking awesome!  I can use that to make another function much more efficient.</p>\n<p>Thanks, mrangel!</p>\n\n",
      "PostDate": "2020-12-04T20:16:24.3464549Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "81d33ebd-60d1-4d11-aaae-534164bf08c4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm a little curious about this in your `isWearing`:\r\n```\r\n  var worn = (obj.getWorn() && obj.loc===char.name)?true:false\r\n```\r\nIs there a reason for the true and false at the end?\r\nIt seems to be an additional operator which has (almost) the same effect as:\r\n```\r\nvar worn = (obj.getWorn() && obj.loc===char.name);\r\n```\r\nIf you're worried that getWorn might return values that count as false but aren't boolean (such as zero or an empty string), the standard way to force a value to a boolean would be:\r\n```\r\n  var worn = !!(obj.getWorn() && obj.loc===char.name);\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm a little curious about this in your <code>isWearing</code>:</p>\n<pre><code>  var worn = (obj.getWorn() &amp;&amp; obj.loc===char.name)?true:false\n</code></pre>\n<p>Is there a reason for the true and false at the end?<br>\nIt seems to be an additional operator which has (almost) the same effect as:</p>\n<pre><code>var worn = (obj.getWorn() &amp;&amp; obj.loc===char.name);\n</code></pre>\n<p>If you're worried that getWorn might return values that count as false but aren't boolean (such as zero or an empty string), the standard way to force a value to a boolean would be:</p>\n<pre><code>  var worn = !!(obj.getWorn() &amp;&amp; obj.loc===char.name);\n</code></pre>\n\n",
      "PostDate": "2020-12-04T20:19:12.7399076Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9e782c34-fbde-4d6e-b0a5-582f9c737ce6",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I'm a little curious about this in your isWearing:\r\n\r\nI'm just winging it.  I know enough JS to be dangerous, is all.\r\n\r\nHa!\r\n\r\nBut, hey!  The ```!!``` is new to me, too!  That will also negate numerous lines of my code!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm a little curious about this in your isWearing:</p>\n</blockquote>\n<p>I'm just winging it.  I know enough JS to be dangerous, is all.</p>\n<p>Ha!</p>\n<p>But, hey!  The <code>!!</code> is new to me, too!  That will also negate numerous lines of my code!</p>\n\n",
      "PostDate": "2020-12-04T20:34:35.7066746Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dda8e2b2-c062-45ef-8995-53eab9f5632b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> But, hey! The `!!` is new to me, too! That will also negate numerous lines of my code!\r\n\r\nIf you're using it a lot I would be worried. In 99% of circumstances, there is no need to care about whether a value is boolean `true` or another truthy value.\r\n\r\nIn fact, `!!` is just the `!` operator (logical not) twice. Putting `!` before any truthy value gives `false`, and putting it before any falsey value gives boolean `true`, so using it twice can convert truthy to `true` and falsey to `false`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>But, hey! The <code>!!</code> is new to me, too! That will also negate numerous lines of my code!</p>\n</blockquote>\n<p>If you're using it a lot I would be worried. In 99% of circumstances, there is no need to care about whether a value is boolean <code>true</code> or another truthy value.</p>\n<p>In fact, <code>!!</code> is just the <code>!</code> operator (logical not) twice. Putting <code>!</code> before any truthy value gives <code>false</code>, and putting it before any falsey value gives boolean <code>true</code>, so using it twice can convert truthy to <code>true</code> and falsey to <code>false</code>.</p>\n\n",
      "PostDate": "2020-12-04T20:45:36.3148504Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "517f47a8-d487-4492-a9dd-07f03725feeb",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I should have posted [this](http://textadventures.co.uk/forum/general/topic/8zy8t_k7e02alcsmkswdeg/seeking-info-concerning-js-functions#7f5e1f88-6474-4952-9e64-0472686e6839) in this thread, I guess.\r\n\r\n```js\r\nObject.prototype.isWearing = function(obj){ return (obj.getWorn() && obj.loc===this.name)};\r\n```\r\n\r\nWith that code (which pretty much came from mrangel), this can be done with any game object:\r\n\r\n```if (w.Ralph.isWearing(w.facemask))```\r\n\r\nOR\r\n\r\n```var vestWorn = w.Norton.isWearing(w.vest)```\r\n\r\n---\r\n> If you're using it a lot I would be worried.\r\n\r\nYeah, I played around with it a little and decided against using it liberally.  It's still a nice trick to know, though!",
      "EditableFormat": "markdown",
      "HTML": "<p>I should have posted <a href=\"http://textadventures.co.uk/forum/general/topic/8zy8t_k7e02alcsmkswdeg/seeking-info-concerning-js-functions#7f5e1f88-6474-4952-9e64-0472686e6839\">this</a> in this thread, I guess.</p>\n<pre><code>Object.prototype.isWearing = function(obj){ return (obj.getWorn() &amp;&amp; obj.loc===this.name)};\n</code></pre>\n<p>With that code (which pretty much came from mrangel), this can be done with any game object:</p>\n<p><code>if (w.Ralph.isWearing(w.facemask))</code></p>\n<p>OR</p>\n<p><code>var vestWorn = w.Norton.isWearing(w.vest)</code></p>\n<hr>\n<blockquote>\n<p>If you're using it a lot I would be worried.</p>\n</blockquote>\n<p>Yeah, I played around with it a little and decided against using it liberally.  It's still a nice trick to know, though!</p>\n\n",
      "PostDate": "2020-12-04T21:48:43.3964307Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "18f4655c-9904-442c-84f0-e717cb2b50d0",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is in my ```settings.setup```:\r\n\r\n```js\r\n    //MODIFY 'ABOUT' COMMAND to include 'info' and 'information' (for old INFOCOM-heads, like me)\r\n    findCmd(\"MetaCredits\").regexes = [/^info$|^information$|^about$|^credits?$|^version$/];\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>This is in my <code>settings.setup</code>:</p>\n<pre><code>    //MODIFY 'ABOUT' COMMAND to include 'info' and 'information' (for old INFOCOM-heads, like me)\n    findCmd(\"MetaCredits\").regexes = [/^info$|^information$|^about$|^credits?$|^version$/];\n</code></pre>\n\n",
      "PostDate": "2020-12-04T22:57:03.707728Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "99816f96-c0b2-4bc5-8c8a-4588b53cec55",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Yeah, I played around with it a little and decided against using it liberally. It's still a nice trick to know, though!\r\n\r\nI have to wonder, why do you need it? Does the engine use type-based control somewhere? There are very few booleans in JS.\r\n(The guy who showed me the `!!` trick put it as \"If you need to convert to boolean, there's probably a serious problem with your design. But here's how to do it.\")",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Yeah, I played around with it a little and decided against using it liberally. It's still a nice trick to know, though!</p>\n</blockquote>\n<p>I have to wonder, why do you need it? Does the engine use type-based control somewhere? There are very few booleans in JS.<br>\n(The guy who showed me the <code>!!</code> trick put it as \"If you need to convert to boolean, there's probably a serious problem with your design. But here's how to do it.\")</p>\n\n",
      "PostDate": "2020-12-04T23:29:43.0926733Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1880ea37-4b51-4043-b222-506b11a927be",
      "UserId": 301690,
      "Username": "Richard Headkid",
      "AvatarUrl": "http://i.imgur.com/WUGXS8yb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I have to wonder, why do you need it?\r\n\r\nI was thinking about things that \"might return values that count as false but aren't boolean (such as zero or an empty string)\", but I quickly realized using ```!!``` probably wasn't a good idea.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I have to wonder, why do you need it?</p>\n</blockquote>\n<p>I was thinking about things that \"might return values that count as false but aren't boolean (such as zero or an empty string)\", but I quickly realized using <code>!!</code> probably wasn't a good idea.</p>\n\n",
      "PostDate": "2020-12-05T01:37:36.0622171Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7f678ae9-0ae1-4dc3-ac80-1e1ec5bbbc79",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A lot of boolean functions actually return a value that you can *treat* as a boolean. (although JS doesn't do this quite as much as Perl does). A lot of people use them without even knowing.\r\n\r\nIn general, it's best to leave these values as the type they come out as; because once you get into more advanced coding you might learn why that value is useful.\r\n\r\n!! is useful if you need a real boolean, but there are very  few situations where a boolean value is needed. These can mostly be grouped into 3 classes: where you're passing it to a badly designed function, where the value is going out of your program (save file or over the network), and where it matters for reference counting.\r\n\r\nSome random examples of things you might expect to return a boolean which don't:\r\n`a && b` is actually the same as `a ? b : a`, and `a || b` is treated as `a ? a : b`.\r\nSeems some people thing that using `.match()` on a string returns true if the string matches the regex. For example, `mystring.match(/\\b\\w{4}\\b/g)` will return true if the string contains any four letter words. In fact it returns an array of all the four-letter words in the string; but if you treat that result as a boolean, it will do exactly what you want.",
      "EditableFormat": "markdown",
      "HTML": "<p>A lot of boolean functions actually return a value that you can <em>treat</em> as a boolean. (although JS doesn't do this quite as much as Perl does). A lot of people use them without even knowing.</p>\n<p>In general, it's best to leave these values as the type they come out as; because once you get into more advanced coding you might learn why that value is useful.</p>\n<p>!! is useful if you need a real boolean, but there are very  few situations where a boolean value is needed. These can mostly be grouped into 3 classes: where you're passing it to a badly designed function, where the value is going out of your program (save file or over the network), and where it matters for reference counting.</p>\n<p>Some random examples of things you might expect to return a boolean which don't:<br>\n<code>a &amp;&amp; b</code> is actually the same as <code>a ? b : a</code>, and <code>a || b</code> is treated as <code>a ? a : b</code>.<br>\nSeems some people thing that using <code>.match()</code> on a string returns true if the string matches the regex. For example, <code>mystring.match(/\\b\\w{4}\\b/g)</code> will return true if the string contains any four letter words. In fact it returns an array of all the four-letter words in the string; but if you treat that result as a boolean, it will do exactly what you want.</p>\n\n",
      "PostDate": "2020-12-05T09:50:53.4928359Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
