{
  "Topic": {
    "TopicId": "s9h31_bc-02rdqogqr7q_g",
    "ForumId": "10",
    "Title": "Vending Machine (sodas only (at the moment)) [WORK IN PROGRESS]",
    "LastUpdated": "2017-12-26T04:29:23.6112248Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f1d8b0fb-e11e-4e27-85ee-a67d3333c24d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Te0Y5FPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello, everyone.\r\n\r\nPoint out the flaws, please.\r\n\r\nhttp://textadventures.co.uk/games/view/r-a9zqtml0kxj5vywas_-g/vending-machine\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <dynamictemplate name=\"ObjectNotOpen\">\"The \"+GetDisplayAlias(object) + \" \" + Conjugate(object, \"be\") + \" not open.\"</dynamictemplate>\r\n  <game name=\"Vending Machine\">\r\n    <gameid>ac777d98-ee5d-4371-a0c2-353536868b35</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <showmoney />\r\n    <start type=\"script\">\r\n      CloneDollarAndMove (break_room)\r\n      CloneDollarAndMove (break_room)\r\n    </start>\r\n  </game>\r\n  <object name=\"break_room\">\r\n    <inherit name=\"editor_room\" />\r\n    <alias>break room</alias>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"vending_machine\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_open\" />\r\n      <feature_container />\r\n      <open type=\"boolean\">false</open>\r\n      <close type=\"boolean\">false</close>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Take</value>\r\n      </displayverbs>\r\n      <takemsg>It's much too big.</takemsg>\r\n      <alias>Vending Machine</alias>\r\n      <credit type=\"int\">0</credit>\r\n      <isopen />\r\n      <transparent type=\"boolean\">false</transparent>\r\n      <hidechildren />\r\n      <listchildren />\r\n      <look><![CDATA[The machine has {vending_machine.credit} credit{if vending_machine.credit<>1:s}.<br/><br/>On it, you can see {object:buttons} and a {object:slot}, and there is a {object:tray} at the bottom.]]></look>\r\n      <addscript type=\"script\"><![CDATA[\r\n        if (not object.prototype = quest_buck) {\r\n          msg (CapFirst(object.article) + \" doesn't fit into the slot.\")\r\n        }\r\n        else {\r\n          vending_machine.credit = vending_machine.credit + 1\r\n          msg (\"Done.<br/>The machine has {vending_machine.credit} credit{if vending_machine.credit<>1:s} now.\")\r\n          game.pov.money = game.pov.money - 1\r\n          RemoveObject (object)\r\n        }\r\n      ]]></addscript>\r\n    </object>\r\n    <object name=\"slot\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_open\" />\r\n      <scenery />\r\n      <look><![CDATA[It has something written just above it.<br/><br/>It reads:  \"INSERT ONE QUEST BUCK\".]]></look>\r\n      <feature_container />\r\n      <open type=\"boolean\">false</open>\r\n      <close type=\"boolean\">false</close>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n      </displayverbs>\r\n      <takemsg>It's part of the machine.</takemsg>\r\n      <addscript type=\"script\"><![CDATA[\r\n        if (not object.prototype = quest_buck) {\r\n          msg (CapFirst(object.article) + \" doesn't fit into the slot.\")\r\n        }\r\n        else {\r\n          vending_machine.credit = vending_machine.credit + 1\r\n          msg (\"Done.<br/>The machine has {vending_machine.credit} credit{if vending_machine.credit<>1:s} now.\")\r\n          game.pov.money = game.pov.money - 1\r\n          RemoveObject (object)\r\n        }\r\n      ]]></addscript>\r\n    </object>\r\n    <object name=\"buttons\">\r\n      <inherit name=\"editor_object\" />\r\n      <takemsg>They are part of the machine.</takemsg>\r\n      <scenery />\r\n      <look>There are two buttons: a {object:cola_button:Quest Cola} button and a {object:diet_cola_button:Diet Quest Cola} button.</look>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n      </displayverbs>\r\n    </object>\r\n    <object name=\"diet_cola_button\">\r\n      <inherit name=\"editor_object\" />\r\n      <scenery />\r\n      <takemsg>It's part of the machine.</takemsg>\r\n      <alias>Diet Quest button</alias>\r\n      <look>It reads: \"DIET QUEST\".</look>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n      </displayverbs>\r\n      <press type=\"script\"><![CDATA[\r\n        if (vending_machine.credit>0) {\r\n          BuyDrink (diet_cola_can)\r\n        }\r\n        else {\r\n          msg (\"The vending machine doesn't have any credits.\")\r\n        }\r\n      ]]></press>\r\n      <push type=\"script\">\r\n        invoke (this.press)\r\n      </push>\r\n    </object>\r\n    <object name=\"cola_button\">\r\n      <inherit name=\"editor_object\" />\r\n      <takemsg>It's part of the machine.</takemsg>\r\n      <scenery />\r\n      <alias>Quest Cola button</alias>\r\n      <look>It reads: \"QUEST COLA\".</look>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n      </displayverbs>\r\n      <press type=\"script\"><![CDATA[\r\n        if (vending_machine.credit>0) {\r\n          BuyDrink (cola_can)\r\n        }\r\n        else {\r\n          msg (\"The vending machine doesn't have any credits.\")\r\n        }\r\n      ]]></press>\r\n      <push type=\"script\">\r\n        invoke (this.press)\r\n      </push>\r\n    </object>\r\n    <object name=\"tray\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <scenery />\r\n      <feature_container />\r\n      <takemsg>It's part of the machine.</takemsg>\r\n      <close type=\"boolean\">false</close>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Look at</value>\r\n        <value>Open</value>\r\n      </displayverbs>\r\n      <look><![CDATA[A black tray {either tray.isopen:(currently open)|that swivels in when you push it.<br/><br/>It reads: \"PUSH TO OPEN\"}.]]></look>\r\n      <onopen type=\"script\"><![CDATA[\r\n        SetTurnTimeout (4) {\r\n          tray.isopen = false\r\n          msg (\"<br/>The tray just closed.\")\r\n        }\r\n      ]]></onopen>\r\n      <addscript type=\"script\">\r\n        msg (\"Putting anything in there would be pointless.\")\r\n      </addscript>\r\n      <push type=\"script\">\r\n        invoke (tray.press)\r\n      </push>\r\n      <press type=\"script\">\r\n        if (not tray.isopen) {\r\n          msg (\"The tray opens.\")\r\n          tray.isopen = true\r\n          // invoke (tray.onopen)\r\n        }\r\n        else {\r\n          msg (\"It's already open.\")\r\n        }\r\n      </press>\r\n      <listchildren />\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>press</property>\r\n    <pattern>press</pattern>\r\n    <defaultexpression>\"You can't press \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <command name=\"no_use\">\r\n    <pattern>use #object#</pattern>\r\n    <script>\r\n      msg (\"I don't understand your command.\")\r\n    </script>\r\n  </command>\r\n  <object name=\"cola_can\">\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"container_closed\" />\r\n    <alias>can of Quest Cola</alias>\r\n    <take />\r\n    <feature_container />\r\n    <close type=\"boolean\">false</close>\r\n    <openmsg>You pop the top.</openmsg>\r\n    <instock type=\"int\">2</instock>\r\n    <look>A Quest Cola can.</look>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Take</value>\r\n      <value>Open</value>\r\n    </displayverbs>\r\n    <drink type=\"script\"><![CDATA[\r\n      if (this.isopen) {\r\n        if (ListCount(GetDirectChildren(this))>0) {\r\n          foreach (drink, GetDirectChildren(this)) {\r\n            if (HasAttribute(drink,\"drink\")) {\r\n              do (drink, \"drink\")\r\n              return (true)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          msg (\"It's empty.\")\r\n        }\r\n      }\r\n      else {\r\n        msg (\"It isn't open.\")\r\n      }\r\n    ]]></drink>\r\n    <object name=\"cola\">\r\n      <inherit name=\"editor_object\" />\r\n      <drinks type=\"int\">6</drinks>\r\n      <alias>cola</alias>\r\n      <look>It's brown.</look>\r\n      <smell>It smells sweet and fizzity!</smell>\r\n      <taste>Not bad.</taste>\r\n      <drink type=\"script\">\r\n        DrinkCola (this)\r\n      </drink>\r\n    </object>\r\n  </object>\r\n  <object name=\"diet_cola_can\">\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"container_closed\" />\r\n    <alias>can of Diet Quest Cola</alias>\r\n    <take />\r\n    <feature_container />\r\n    <close type=\"boolean\">false</close>\r\n    <openmsg>You pop the top.</openmsg>\r\n    <look>A Diet Quest Cola can.</look>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n      <value>Take</value>\r\n      <value>Open</value>\r\n    </displayverbs>\r\n    <instock type=\"int\">4</instock>\r\n    <drink type=\"script\"><![CDATA[\r\n      if (this.isopen) {\r\n        if (ListCount(GetDirectChildren(this))>0) {\r\n          foreach (drink, GetDirectChildren(this)) {\r\n            if (HasAttribute(drink,\"drink\")) {\r\n              do (drink, \"drink\")\r\n              return (true)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          msg (\"It's empty.\")\r\n        }\r\n      }\r\n      else {\r\n        msg (\"It isn't open.\")\r\n      }\r\n    ]]></drink>\r\n    <object name=\"diet_cola\">\r\n      <inherit name=\"editor_object\" />\r\n      <drinks type=\"int\">6</drinks>\r\n      <alias>diet cola</alias>\r\n      <look>It's brown.</look>\r\n      <smell>It smells fizzity!</smell>\r\n      <taste>Not bad.</taste>\r\n      <drink type=\"script\">\r\n        DrinkCola (this)\r\n      </drink>\r\n    </object>\r\n  </object>\r\n  <object name=\"quest_buck\">\r\n    <inherit name=\"editor_object\" />\r\n    <take />\r\n    <look><![CDATA[One Quest Buck.  <br/><br/>It has a picture of Alex Warren on one side, and a big <span style='font-size:200%;'> Q</span> on the other.<br/><br/>(It's worth one unidollar.)]]></look>\r\n    <alias>Quest Buck</alias>\r\n    <alt type=\"stringlist\">\r\n      <value>dollar</value>\r\n      <value>money</value>\r\n    </alt>\r\n    <ontake type=\"script\">\r\n      game.pov.money = game.pov.money + 1\r\n    </ontake>\r\n  </object>\r\n  <function name=\"BuyDrink\" parameters=\"drink\"><![CDATA[\r\n    if (drink.instock > 0) {\r\n      vending_machine.credit = vending_machine.credit - 1\r\n      drink.instock = drink.instock - 1\r\n      thisClone = CloneObjectAndMove(drink,tray)\r\n      thisClone.prototype = drink\r\n      msg (\"The machine drops a can into the tray.\")\r\n    }\r\n    else {\r\n      msg (\"The machine is sold out of \"+GetDisplayAlias(drink)+\"s.\")\r\n    }\r\n  ]]></function>\r\n  <function name=\"DrinkCola\" parameters=\"this\"><![CDATA[\r\n    if (this.drinks>0) {\r\n      msg (\"You take a drink.\")\r\n      this.drinks = this.drinks - 1\r\n      if (this.drinks<1) {\r\n        msg (\"  The can is now empty.\")\r\n        this.parent.alias = \"empty can\"\r\n        if (HasString(this.parent,\"look\")) {\r\n          this.parent.look = this.parent.look + \"<br/><br/>It is empty.\"\r\n        }\r\n        RemoveObject (this)\r\n      }\r\n    }\r\n    else {\r\n      msg (\"It's all gone.\")\r\n      this.parent.alias = \"empty can\"\r\n      if (HasString(this.parent,\"look\")) {\r\n        this.parent.look = this.parent.look + \"<br/>\"+CapFirst(object.article)+\"is empty.\"\r\n      }\r\n      RemoveObject (this)\r\n    }\r\n  ]]></function>\r\n  <function name=\"CloneDollarAndMove\" parameters=\"room\">\r\n    newDollar = CloneObjectAndMove(quest_buck,room)\r\n    newDollar.prototype = quest_buck\r\n  </function>\r\n</asl>\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello, everyone.</p>\n<p>Point out the flaws, please.</p>\n<p>http://textadventures.co.uk/games/view/r-a9zqtml0kxj5vywas_-g/vending-machine</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;dynamictemplate name=\"ObjectNotOpen\"&gt;\"The \"+GetDisplayAlias(object) + \" \" + Conjugate(object, \"be\") + \" not open.\"&lt;/dynamictemplate&gt;\n  &lt;game name=\"Vending Machine\"&gt;\n    &lt;gameid&gt;ac777d98-ee5d-4371-a0c2-353536868b35&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;showmoney /&gt;\n    &lt;start type=\"script\"&gt;\n      CloneDollarAndMove (break_room)\n      CloneDollarAndMove (break_room)\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"break_room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;alias&gt;break room&lt;/alias&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"vending_machine\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_open\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;open type=\"boolean\"&gt;false&lt;/open&gt;\n      &lt;close type=\"boolean\"&gt;false&lt;/close&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Take&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;takemsg&gt;It's much too big.&lt;/takemsg&gt;\n      &lt;alias&gt;Vending Machine&lt;/alias&gt;\n      &lt;credit type=\"int\"&gt;0&lt;/credit&gt;\n      &lt;isopen /&gt;\n      &lt;transparent type=\"boolean\"&gt;false&lt;/transparent&gt;\n      &lt;hidechildren /&gt;\n      &lt;listchildren /&gt;\n      &lt;look&gt;&lt;![CDATA[The machine has {vending_machine.credit} credit{if vending_machine.credit&lt;&gt;1:s}.&lt;br/&gt;&lt;br/&gt;On it, you can see {object:buttons} and a {object:slot}, and there is a {object:tray} at the bottom.]]&gt;&lt;/look&gt;\n      &lt;addscript type=\"script\"&gt;&lt;![CDATA[\n        if (not object.prototype = quest_buck) {\n          msg (CapFirst(object.article) + \" doesn't fit into the slot.\")\n        }\n        else {\n          vending_machine.credit = vending_machine.credit + 1\n          msg (\"Done.&lt;br/&gt;The machine has {vending_machine.credit} credit{if vending_machine.credit&lt;&gt;1:s} now.\")\n          game.pov.money = game.pov.money - 1\n          RemoveObject (object)\n        }\n      ]]&gt;&lt;/addscript&gt;\n    &lt;/object&gt;\n    &lt;object name=\"slot\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_open\" /&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;&lt;![CDATA[It has something written just above it.&lt;br/&gt;&lt;br/&gt;It reads:  \"INSERT ONE QUEST BUCK\".]]&gt;&lt;/look&gt;\n      &lt;feature_container /&gt;\n      &lt;open type=\"boolean\"&gt;false&lt;/open&gt;\n      &lt;close type=\"boolean\"&gt;false&lt;/close&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;takemsg&gt;It's part of the machine.&lt;/takemsg&gt;\n      &lt;addscript type=\"script\"&gt;&lt;![CDATA[\n        if (not object.prototype = quest_buck) {\n          msg (CapFirst(object.article) + \" doesn't fit into the slot.\")\n        }\n        else {\n          vending_machine.credit = vending_machine.credit + 1\n          msg (\"Done.&lt;br/&gt;The machine has {vending_machine.credit} credit{if vending_machine.credit&lt;&gt;1:s} now.\")\n          game.pov.money = game.pov.money - 1\n          RemoveObject (object)\n        }\n      ]]&gt;&lt;/addscript&gt;\n    &lt;/object&gt;\n    &lt;object name=\"buttons\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;takemsg&gt;They are part of the machine.&lt;/takemsg&gt;\n      &lt;scenery /&gt;\n      &lt;look&gt;There are two buttons: a {object:cola_button:Quest Cola} button and a {object:diet_cola_button:Diet Quest Cola} button.&lt;/look&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n      &lt;/displayverbs&gt;\n    &lt;/object&gt;\n    &lt;object name=\"diet_cola_button\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;scenery /&gt;\n      &lt;takemsg&gt;It's part of the machine.&lt;/takemsg&gt;\n      &lt;alias&gt;Diet Quest button&lt;/alias&gt;\n      &lt;look&gt;It reads: \"DIET QUEST\".&lt;/look&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;press type=\"script\"&gt;&lt;![CDATA[\n        if (vending_machine.credit&gt;0) {\n          BuyDrink (diet_cola_can)\n        }\n        else {\n          msg (\"The vending machine doesn't have any credits.\")\n        }\n      ]]&gt;&lt;/press&gt;\n      &lt;push type=\"script\"&gt;\n        invoke (this.press)\n      &lt;/push&gt;\n    &lt;/object&gt;\n    &lt;object name=\"cola_button\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;takemsg&gt;It's part of the machine.&lt;/takemsg&gt;\n      &lt;scenery /&gt;\n      &lt;alias&gt;Quest Cola button&lt;/alias&gt;\n      &lt;look&gt;It reads: \"QUEST COLA\".&lt;/look&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;press type=\"script\"&gt;&lt;![CDATA[\n        if (vending_machine.credit&gt;0) {\n          BuyDrink (cola_can)\n        }\n        else {\n          msg (\"The vending machine doesn't have any credits.\")\n        }\n      ]]&gt;&lt;/press&gt;\n      &lt;push type=\"script\"&gt;\n        invoke (this.press)\n      &lt;/push&gt;\n    &lt;/object&gt;\n    &lt;object name=\"tray\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;scenery /&gt;\n      &lt;feature_container /&gt;\n      &lt;takemsg&gt;It's part of the machine.&lt;/takemsg&gt;\n      &lt;close type=\"boolean\"&gt;false&lt;/close&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Look at&lt;/value&gt;\n        &lt;value&gt;Open&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;look&gt;&lt;![CDATA[A black tray {either tray.isopen:(currently open)|that swivels in when you push it.&lt;br/&gt;&lt;br/&gt;It reads: \"PUSH TO OPEN\"}.]]&gt;&lt;/look&gt;\n      &lt;onopen type=\"script\"&gt;&lt;![CDATA[\n        SetTurnTimeout (4) {\n          tray.isopen = false\n          msg (\"&lt;br/&gt;The tray just closed.\")\n        }\n      ]]&gt;&lt;/onopen&gt;\n      &lt;addscript type=\"script\"&gt;\n        msg (\"Putting anything in there would be pointless.\")\n      &lt;/addscript&gt;\n      &lt;push type=\"script\"&gt;\n        invoke (tray.press)\n      &lt;/push&gt;\n      &lt;press type=\"script\"&gt;\n        if (not tray.isopen) {\n          msg (\"The tray opens.\")\n          tray.isopen = true\n          // invoke (tray.onopen)\n        }\n        else {\n          msg (\"It's already open.\")\n        }\n      &lt;/press&gt;\n      &lt;listchildren /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;press&lt;/property&gt;\n    &lt;pattern&gt;press&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't press \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;command name=\"no_use\"&gt;\n    &lt;pattern&gt;use #object#&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"I don't understand your command.\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"cola_can\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"container_closed\" /&gt;\n    &lt;alias&gt;can of Quest Cola&lt;/alias&gt;\n    &lt;take /&gt;\n    &lt;feature_container /&gt;\n    &lt;close type=\"boolean\"&gt;false&lt;/close&gt;\n    &lt;openmsg&gt;You pop the top.&lt;/openmsg&gt;\n    &lt;instock type=\"int\"&gt;2&lt;/instock&gt;\n    &lt;look&gt;A Quest Cola can.&lt;/look&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Look at&lt;/value&gt;\n      &lt;value&gt;Take&lt;/value&gt;\n      &lt;value&gt;Open&lt;/value&gt;\n    &lt;/displayverbs&gt;\n    &lt;drink type=\"script\"&gt;&lt;![CDATA[\n      if (this.isopen) {\n        if (ListCount(GetDirectChildren(this))&gt;0) {\n          foreach (drink, GetDirectChildren(this)) {\n            if (HasAttribute(drink,\"drink\")) {\n              do (drink, \"drink\")\n              return (true)\n            }\n          }\n        }\n        else {\n          msg (\"It's empty.\")\n        }\n      }\n      else {\n        msg (\"It isn't open.\")\n      }\n    ]]&gt;&lt;/drink&gt;\n    &lt;object name=\"cola\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;drinks type=\"int\"&gt;6&lt;/drinks&gt;\n      &lt;alias&gt;cola&lt;/alias&gt;\n      &lt;look&gt;It's brown.&lt;/look&gt;\n      &lt;smell&gt;It smells sweet and fizzity!&lt;/smell&gt;\n      &lt;taste&gt;Not bad.&lt;/taste&gt;\n      &lt;drink type=\"script\"&gt;\n        DrinkCola (this)\n      &lt;/drink&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"diet_cola_can\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"container_closed\" /&gt;\n    &lt;alias&gt;can of Diet Quest Cola&lt;/alias&gt;\n    &lt;take /&gt;\n    &lt;feature_container /&gt;\n    &lt;close type=\"boolean\"&gt;false&lt;/close&gt;\n    &lt;openmsg&gt;You pop the top.&lt;/openmsg&gt;\n    &lt;look&gt;A Diet Quest Cola can.&lt;/look&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Look at&lt;/value&gt;\n      &lt;value&gt;Take&lt;/value&gt;\n      &lt;value&gt;Open&lt;/value&gt;\n    &lt;/displayverbs&gt;\n    &lt;instock type=\"int\"&gt;4&lt;/instock&gt;\n    &lt;drink type=\"script\"&gt;&lt;![CDATA[\n      if (this.isopen) {\n        if (ListCount(GetDirectChildren(this))&gt;0) {\n          foreach (drink, GetDirectChildren(this)) {\n            if (HasAttribute(drink,\"drink\")) {\n              do (drink, \"drink\")\n              return (true)\n            }\n          }\n        }\n        else {\n          msg (\"It's empty.\")\n        }\n      }\n      else {\n        msg (\"It isn't open.\")\n      }\n    ]]&gt;&lt;/drink&gt;\n    &lt;object name=\"diet_cola\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;drinks type=\"int\"&gt;6&lt;/drinks&gt;\n      &lt;alias&gt;diet cola&lt;/alias&gt;\n      &lt;look&gt;It's brown.&lt;/look&gt;\n      &lt;smell&gt;It smells fizzity!&lt;/smell&gt;\n      &lt;taste&gt;Not bad.&lt;/taste&gt;\n      &lt;drink type=\"script\"&gt;\n        DrinkCola (this)\n      &lt;/drink&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"quest_buck\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;take /&gt;\n    &lt;look&gt;&lt;![CDATA[One Quest Buck.  &lt;br/&gt;&lt;br/&gt;It has a picture of Alex Warren on one side, and a big &lt;span style='font-size:200%;'&gt; Q&lt;/span&gt; on the other.&lt;br/&gt;&lt;br/&gt;(It's worth one unidollar.)]]&gt;&lt;/look&gt;\n    &lt;alias&gt;Quest Buck&lt;/alias&gt;\n    &lt;alt type=\"stringlist\"&gt;\n      &lt;value&gt;dollar&lt;/value&gt;\n      &lt;value&gt;money&lt;/value&gt;\n    &lt;/alt&gt;\n    &lt;ontake type=\"script\"&gt;\n      game.pov.money = game.pov.money + 1\n    &lt;/ontake&gt;\n  &lt;/object&gt;\n  &lt;function name=\"BuyDrink\" parameters=\"drink\"&gt;&lt;![CDATA[\n    if (drink.instock &gt; 0) {\n      vending_machine.credit = vending_machine.credit - 1\n      drink.instock = drink.instock - 1\n      thisClone = CloneObjectAndMove(drink,tray)\n      thisClone.prototype = drink\n      msg (\"The machine drops a can into the tray.\")\n    }\n    else {\n      msg (\"The machine is sold out of \"+GetDisplayAlias(drink)+\"s.\")\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"DrinkCola\" parameters=\"this\"&gt;&lt;![CDATA[\n    if (this.drinks&gt;0) {\n      msg (\"You take a drink.\")\n      this.drinks = this.drinks - 1\n      if (this.drinks&lt;1) {\n        msg (\"  The can is now empty.\")\n        this.parent.alias = \"empty can\"\n        if (HasString(this.parent,\"look\")) {\n          this.parent.look = this.parent.look + \"&lt;br/&gt;&lt;br/&gt;It is empty.\"\n        }\n        RemoveObject (this)\n      }\n    }\n    else {\n      msg (\"It's all gone.\")\n      this.parent.alias = \"empty can\"\n      if (HasString(this.parent,\"look\")) {\n        this.parent.look = this.parent.look + \"&lt;br/&gt;\"+CapFirst(object.article)+\"is empty.\"\n      }\n      RemoveObject (this)\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"CloneDollarAndMove\" parameters=\"room\"&gt;\n    newDollar = CloneObjectAndMove(quest_buck,room)\n    newDollar.prototype = quest_buck\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2017-12-26T04:29:23.6112248Z",
      "LastEditDate": "2017-12-26T12:35:48.1008293Z",
      "link": null
    },
    {
      "PostId": "bbf4d3f8-7b24-45ba-9efa-c053aca161f7",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One of the displayed verbs for the tray is \"push\":\r\n\r\n```\r\n> push tray\r\nError running script: Error compiling expression 'tray.open': RootExpressionElement: Cannot convert type 'Boolean' to expression result of 'IScript'\r\n```\r\n\r\nThe state of the tray should be noted in the descripotion; whether open and if there is something in it (I guess the can can be seen even if closed).\r\n\r\nShould understand \"put money in machine\", if only to say it needs to go in slot.\r\n\r\nWhen the tray closes, you get told twice.\r\n\r\nThe cannot see the can in the tray, even if the tray is open.\r\n\r\nApart from that, looks good!\r\n\r\nBe useful to add another coin and see how it handles two credits.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>One of the displayed verbs for the tray is \"push\":</p>\n<pre><code>&gt; push tray\nError running script: Error compiling expression 'tray.open': RootExpressionElement: Cannot convert type 'Boolean' to expression result of 'IScript'\n</code></pre>\n<p>The state of the tray should be noted in the descripotion; whether open and if there is something in it (I guess the can can be seen even if closed).</p>\n<p>Should understand \"put money in machine\", if only to say it needs to go in slot.</p>\n<p>When the tray closes, you get told twice.</p>\n<p>The cannot see the can in the tray, even if the tray is open.</p>\n<p>Apart from that, looks good!</p>\n<p>Be useful to add another coin and see how it handles two credits.</p>\n\n",
      "PostDate": "2017-12-26T10:03:01.3197652Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05b442b1-2264-40e1-b3c1-eef55fc3b62d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Te0Y5FPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks, Pix!\r\n\r\nJust so people can learn from my errors:\r\n\r\n---\r\n> **\\>push tray**\r\nError running script:\r\n\r\nI'd set up **press tray**, and I meant to make **push tray** invoke ```tray.press```, but I put ```invoke (tray.open)```, which tries to run a Boolean attribute as a script, which throws an error.\r\n\r\n**[FIXED]**\r\n\r\n---\r\n>The state of the tray should be noted in the description; whether open and if there is something in it (I guess the can can be seen even if closed).\r\n\r\nEasy fix:\r\n\r\n```\r\nA black tray {either tray.isopen:(currently open)|that swivels in when you push it.\r\n\r\nIt reads: \"PUSH TO OPEN\"}.\r\n```\r\n\r\n\r\n**[FIXED]**\r\n\r\n\r\n---\r\n>When the tray closes, you get told twice.\r\n\r\nI didn't have anything checking if the tray was open before running the script which opens it (which sets a turn timeout before it automatically closes).\r\n\r\n```\r\nif (not tray.isopen) {\r\n  msg (\"The tray opens.\")\r\n  tray.isopen = true\r\n  invoke (tray.onopen)\r\n}\r\nelse {\r\n  msg (\"It's already open.\")\r\n}\r\n```\r\n\r\nAlso, it prints the message twice because I have an open message set up, and I was calling that change script twice:\r\n\r\n```\r\nif (not tray.isopen) {\r\n  msg (\"The tray opens.\")\r\n  tray.isopen = true   //This called the change script the first time.\r\n  //invoke (tray.onopen) //This called the change script a second time.\r\n}\r\nelse {\r\n  msg (\"It's already open.\")\r\n}\r\n```\r\n\r\n**[FIXED]**\r\n\r\n---\r\n>cannot see the can in the tray, even if the tray is open.\r\n\r\nI didn't have **List children when object is looked at or opened** selected.  (Doh!)\r\n\r\n\r\n**[FIXED]**\r\n\r\n---\r\n>Apart from that, looks good!\r\n\r\nThanks!!!\r\n\r\n---\r\n>Be useful to add another coin and see how it handles two credits.\r\n\r\nAn excellent idea.\r\n\r\nI changed this script to check if the object has the attribute ```prototype``` set to ```quest_buck```, and I cloned the dollar  to test it out, and it worked well.\r\n\r\n---\r\n>Should understand \"put money in machine\", if only to say it needs to go in slot.\r\n\r\nI had this working initially, but I set the machine (which is a container) to closed after I put the drinks in it, so it broke.\r\n\r\n...I guess there's no sense in the drinks actually being in the vending machine, huh?\r\n\r\nONE MINUTE LATER...\r\n\r\nI put the drinks under the **object** object, and set the machine to open.\r\n\r\nNow putting the money in the machine works just like putting it into the slot.\r\n\r\n**[FIXED]**\r\n\r\n---\r\nNow, I have to learn how to make two or more **Quest Buck**s automatically become **Quest Bucks**, which shows **2 Quest Bucks** or **3 Quest Bucks**, or what have you.\r\n\r\nThen, I want to be able to do this (pretend we start with 4 Quest Bucks):\r\n\r\n\\>put 1 Quest Buck in slot\r\nYou put one Quest Buck into the slot.\r\n(You now have 3 Quest Bucks.)\r\n\r\n---\r\nThe posted code has been updated.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks, Pix!</p>\n<p>Just so people can learn from my errors:</p>\n<hr>\n<blockquote>\n<p><strong>&gt;push tray</strong><br>\nError running script:</p>\n</blockquote>\n<p>I'd set up <strong>press tray</strong>, and I meant to make <strong>push tray</strong> invoke <code>tray.press</code>, but I put <code>invoke (tray.open)</code>, which tries to run a Boolean attribute as a script, which throws an error.</p>\n<p><strong>[FIXED]</strong></p>\n<hr>\n<blockquote>\n<p>The state of the tray should be noted in the description; whether open and if there is something in it (I guess the can can be seen even if closed).</p>\n</blockquote>\n<p>Easy fix:</p>\n<pre><code>A black tray {either tray.isopen:(currently open)|that swivels in when you push it.\n\nIt reads: \"PUSH TO OPEN\"}.\n</code></pre>\n<p><strong>[FIXED]</strong></p>\n<hr>\n<blockquote>\n<p>When the tray closes, you get told twice.</p>\n</blockquote>\n<p>I didn't have anything checking if the tray was open before running the script which opens it (which sets a turn timeout before it automatically closes).</p>\n<pre><code>if (not tray.isopen) {\n  msg (\"The tray opens.\")\n  tray.isopen = true\n  invoke (tray.onopen)\n}\nelse {\n  msg (\"It's already open.\")\n}\n</code></pre>\n<p>Also, it prints the message twice because I have an open message set up, and I was calling that change script twice:</p>\n<pre><code>if (not tray.isopen) {\n  msg (\"The tray opens.\")\n  tray.isopen = true   //This called the change script the first time.\n  //invoke (tray.onopen) //This called the change script a second time.\n}\nelse {\n  msg (\"It's already open.\")\n}\n</code></pre>\n<p><strong>[FIXED]</strong></p>\n<hr>\n<blockquote>\n<p>cannot see the can in the tray, even if the tray is open.</p>\n</blockquote>\n<p>I didn't have <strong>List children when object is looked at or opened</strong> selected.  (Doh!)</p>\n<p><strong>[FIXED]</strong></p>\n<hr>\n<blockquote>\n<p>Apart from that, looks good!</p>\n</blockquote>\n<p>Thanks!!!</p>\n<hr>\n<blockquote>\n<p>Be useful to add another coin and see how it handles two credits.</p>\n</blockquote>\n<p>An excellent idea.</p>\n<p>I changed this script to check if the object has the attribute <code>prototype</code> set to <code>quest_buck</code>, and I cloned the dollar  to test it out, and it worked well.</p>\n<hr>\n<blockquote>\n<p>Should understand \"put money in machine\", if only to say it needs to go in slot.</p>\n</blockquote>\n<p>I had this working initially, but I set the machine (which is a container) to closed after I put the drinks in it, so it broke.</p>\n<p>...I guess there's no sense in the drinks actually being in the vending machine, huh?</p>\n<p>ONE MINUTE LATER...</p>\n<p>I put the drinks under the <strong>object</strong> object, and set the machine to open.</p>\n<p>Now putting the money in the machine works just like putting it into the slot.</p>\n<p><strong>[FIXED]</strong></p>\n<hr>\n<p>Now, I have to learn how to make two or more <strong>Quest Buck</strong>s automatically become <strong>Quest Bucks</strong>, which shows <strong>2 Quest Bucks</strong> or <strong>3 Quest Bucks</strong>, or what have you.</p>\n<p>Then, I want to be able to do this (pretend we start with 4 Quest Bucks):</p>\n<p>&gt;put 1 Quest Buck in slot<br>\nYou put one Quest Buck into the slot.<br>\n(You now have 3 Quest Bucks.)</p>\n<hr>\n<p>The posted code has been updated.</p>\n\n",
      "PostDate": "2017-12-26T12:34:47.0909392Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0441f3c3-866a-4833-a354-60bb20da6102",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Te0Y5FPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I must learn how to adapt this Inform 7 code to Quest:\r\n\r\n```\r\nAfter deciding the scope of the player while quest_bucks is carried by the player: place quest_buck in scope.\r\n```\r\n\r\n---\r\nMaybe something like:\r\n\r\n```\r\nif(Got(quest_bucks)){\r\n  if (HasAttribute(game, \"scopebackdrop\")){\r\n    game.scopebackdropbak = game.scopebackdrop\r\n  }\r\n  game.scopebackdrop => {\r\n    list add (items, quest_buck)\r\n  }\r\n  quest_buck.scenery = true\r\n}\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I must learn how to adapt this Inform 7 code to Quest:</p>\n<pre><code>After deciding the scope of the player while quest_bucks is carried by the player: place quest_buck in scope.\n</code></pre>\n<hr>\n<p>Maybe something like:</p>\n<pre><code>if(Got(quest_bucks)){\n  if (HasAttribute(game, \"scopebackdrop\")){\n    game.scopebackdropbak = game.scopebackdrop\n  }\n  game.scopebackdrop =&gt; {\n    list add (items, quest_buck)\n  }\n  quest_buck.scenery = true\n}\n\n</code></pre>\n\n",
      "PostDate": "2017-12-26T12:53:58.7100591Z",
      "LastEditDate": "2017-12-26T13:00:11.7701091Z",
      "link": null
    },
    {
      "PostId": "e840e7a5-febf-4bf2-b7ce-b827148acbc6",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay... I have no idea what either version is supposed to do.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay... I have no idea what either version is supposed to do.</p>\n\n",
      "PostDate": "2017-12-26T17:17:05.3295352Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0eb8e554-813a-4756-aef5-c677d7a3fb3a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Te0Y5FPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "#### **\\> I have no idea what either version is supposed to do.**\r\n\r\nThat's probably because I'm not thinking about it right.\r\n\r\nI was thinking:\r\n\r\nIf the player is carrying Quest Bucks (multiple), then a Quest Buck is in scope, but not actually in the inventory.\r\n\r\nThen, one could enter **put Quest Buck in slot**.  (When this happened, Quest Bucks would be decreased by 1.)\r\n\r\n...but that would probably bring up the disambiguation menu...\r\n\r\n<samp>\r\nDo you mean?\r\n\r\n<span>1. [Quest Bucks]()\r\n<span>2. [Quest Buck]()\r\n\r\n</samp>\r\n\r\n---\r\nBasically, I want to have ```n``` Quest Bucks, and be able to enter **put 1 Quest Buck in slot** or **put 2 Quest Bucks in slot**.\r\n\r\nSo... I guess the scope has jack to do with squat.\r\n\r\nHrmm...\r\n\r\nDo I need to study up on stacking?  Is that what stacking is?  (Rhetorical.  I'm going to look it up right now.  (Do feel free to chime in, though.  I just don't want to put anyone out whilst I'm reading up on stacking in this very forum.))\r\n\r\n---\r\nHere's an example of what that scope script would do (although it has nothing to do with money or vending machines):\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"No Commands\">\r\n    <gameid>94a496f3-563a-4a94-8e31-0c9b7390cff6</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n  </game>\r\n  <object name=\"your teepee\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <exit alias=\"out\" to=\"field\">\r\n      <inherit name=\"outdirection\" />\r\n    </exit>\r\n    <object name=\"black_shard\">\r\n      <inherit name=\"editor_object\" />\r\n      <alias>black shard of ∞</alias>\r\n      <look>It's the black shard, which gives you the power to see magically protected realms.</look>\r\n      <take />\r\n      <drop type=\"boolean\">false</drop>\r\n      <dropmsg>You wouldn't dare drop such a valuable item.</dropmsg>\r\n    </object>\r\n  </object>\r\n  <object name=\"enchanted castle\">\r\n    <look type=\"script\"><![CDATA[\r\n      msg (\"You close your eyes and concentrate on the castle.  You feel a sudden shift in reality.<br/>\")\r\n      MoveObject (game.pov, enchanted castle)\r\n      finish\r\n    ]]></look>\r\n    <description><![CDATA[<br/>This is entrance to an enchanted castle.<br/><br/>KV is lazy and did not fill in very many details, seeming how this is just an example game.<br/><br/><center><h3>CONGRATULATIONS!</h3><h1>YOU HAVE WON!</h1></center>]]></description>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Look at</value>\r\n    </displayverbs>\r\n  </object>\r\n  <object name=\"field\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <beforeenter type=\"script\"><![CDATA[\r\n      if (Got(black_shard)) {\r\n        if (HasAttribute(game, \"scopebackdrop\")) {\r\n          game.scopebackdropbak = game.scopebackdrop\r\n        }\r\n        game.scopebackdrop => {\r\n          list add (items, enchanted castle)\r\n        }\r\n      }\r\n    ]]></beforeenter>\r\n    <onexit type=\"script\">\r\n      if (HasAttribute(game, \"scopebackdropbak\")) {\r\n        game.scopebackdrop = game.scopebackdropbak\r\n      }\r\n      else {\r\n        game.scopebackdrop = null\r\n      }\r\n    </onexit>\r\n    <description><![CDATA[<br/>This vast field appears to go on forever in every direction.{either black_shard.parent=game.pov:<br/><br/>You can see a {object:enchanted castle} off in the distance.|}]]></description>\r\n    <exit alias=\"in\" to=\"your teepee\">\r\n      <inherit name=\"indirection\" />\r\n    </exit>\r\n    <object name=\"teepee_outside\">\r\n      <inherit name=\"editor_object\" />\r\n      <scenery type=\"boolean\">false</scenery>\r\n      <alias>your teepee</alias>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <takemsg>The teepee is too big and bulky to tote around for no good reason.</takemsg>\r\n    </object>\r\n    <command name=\"enter_teepee\">\r\n      <pattern>enter #object#</pattern>\r\n      <script>\r\n        if (object = teepee_outside) {\r\n          MoveObject (game.pov, your teepee)\r\n        }\r\n        else {\r\n          msg (\"You can't enter \"+object.article+\".\")\r\n        }\r\n      </script>\r\n    </command>\r\n  </object>\r\n  <walkthrough name=\"kv\">\r\n    <steps type=\"simplestringlist\">\r\n      o\r\n      enter teepee\r\n      get shard\r\n      o\r\n      in\r\n      o\r\n      x castle\r\n    </steps>\r\n  </walkthrough>\r\n</asl>\r\n```\r\n\r\n---\r\nThere would be more than one location from which you could see the enchanted castle in an actual game, of course.\r\n\r\nI guess I could just leave the scopebackdrop script alone, only adding the castle once.  Then, make it visible or invisible.\r\n\r\n...but I digress.\r\n\r\nI need to learn to make an object into a group of objects.\r\n\r\nLet's say I have an object named **poker chip**, which exists out of play.\r\n\r\nTo add a new chip to play, I would do this:\r\n\r\n```\r\nnewChip = CloneObjectAndMoveHere(poker chip)\r\nnewChip.prototype = poker chip\r\n```\r\n\r\n---\r\nNow, there is another out-of-play object named **poker chips**, which I move to the player (or simply make visible) when he or she has more than one **poker chip**.  I then move each **poker chip** into **poker chips**.\r\n\r\nThen, I could do something like this:\r\n```\r\npoker chips.count = ListCount(GetDirectChildren(poker chips))\r\npoker chips.alias = ToWords(poker chips.count) + \" poker chips\"\r\n```\r\n\r\n---\r\nThis is where I get stuck while theorizing this.\r\n\r\nI want to then be able to **PUT 2 CHIPS ON TABLE**  or **PUT 1 CHIP ON TABLE**.\r\n\r\n---\r\nLike I say, there are probably already good examples posted already, I'm just typing and theorizing instead of searching and learning.\r\n\r\nI'm off to search now, though!\r\n\r\n---\r\nPS\r\n\r\nSorry.  I've had too much sugar today, and I'm all scatter-brained and stuff.",
      "EditableFormat": "markdown",
      "HTML": "<h4><strong>&gt; I have no idea what either version is supposed to do.</strong></h4>\n<p>That's probably because I'm not thinking about it right.</p>\n<p>I was thinking:</p>\n<p>If the player is carrying Quest Bucks (multiple), then a Quest Buck is in scope, but not actually in the inventory.</p>\n<p>Then, one could enter <strong>put Quest Buck in slot</strong>.  (When this happened, Quest Bucks would be decreased by 1.)</p>\n<p>...but that would probably bring up the disambiguation menu...</p>\n<samp>\nDo you mean?\n<p><span>1. <a href=\"\">Quest Bucks</a><br>\n<span>2. <a href=\"\">Quest Buck</a></span></span></p>\n</samp>\n<hr>\n<p>Basically, I want to have <code>n</code> Quest Bucks, and be able to enter <strong>put 1 Quest Buck in slot</strong> or <strong>put 2 Quest Bucks in slot</strong>.</p>\n<p>So... I guess the scope has jack to do with squat.</p>\n<p>Hrmm...</p>\n<p>Do I need to study up on stacking?  Is that what stacking is?  (Rhetorical.  I'm going to look it up right now.  (Do feel free to chime in, though.  I just don't want to put anyone out whilst I'm reading up on stacking in this very forum.))</p>\n<hr>\n<p>Here's an example of what that scope script would do (although it has nothing to do with money or vending machines):</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"No Commands\"&gt;\n    &lt;gameid&gt;94a496f3-563a-4a94-8e31-0c9b7390cff6&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"your teepee\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"out\" to=\"field\"&gt;\n      &lt;inherit name=\"outdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"black_shard\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;alias&gt;black shard of ∞&lt;/alias&gt;\n      &lt;look&gt;It's the black shard, which gives you the power to see magically protected realms.&lt;/look&gt;\n      &lt;take /&gt;\n      &lt;drop type=\"boolean\"&gt;false&lt;/drop&gt;\n      &lt;dropmsg&gt;You wouldn't dare drop such a valuable item.&lt;/dropmsg&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"enchanted castle\"&gt;\n    &lt;look type=\"script\"&gt;&lt;![CDATA[\n      msg (\"You close your eyes and concentrate on the castle.  You feel a sudden shift in reality.&lt;br/&gt;\")\n      MoveObject (game.pov, enchanted castle)\n      finish\n    ]]&gt;&lt;/look&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;br/&gt;This is entrance to an enchanted castle.&lt;br/&gt;&lt;br/&gt;KV is lazy and did not fill in very many details, seeming how this is just an example game.&lt;br/&gt;&lt;br/&gt;&lt;center&gt;&lt;h3&gt;CONGRATULATIONS!&lt;/h3&gt;&lt;h1&gt;YOU HAVE WON!&lt;/h1&gt;&lt;/center&gt;]]&gt;&lt;/description&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Look at&lt;/value&gt;\n    &lt;/displayverbs&gt;\n  &lt;/object&gt;\n  &lt;object name=\"field\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;beforeenter type=\"script\"&gt;&lt;![CDATA[\n      if (Got(black_shard)) {\n        if (HasAttribute(game, \"scopebackdrop\")) {\n          game.scopebackdropbak = game.scopebackdrop\n        }\n        game.scopebackdrop =&gt; {\n          list add (items, enchanted castle)\n        }\n      }\n    ]]&gt;&lt;/beforeenter&gt;\n    &lt;onexit type=\"script\"&gt;\n      if (HasAttribute(game, \"scopebackdropbak\")) {\n        game.scopebackdrop = game.scopebackdropbak\n      }\n      else {\n        game.scopebackdrop = null\n      }\n    &lt;/onexit&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;br/&gt;This vast field appears to go on forever in every direction.{either black_shard.parent=game.pov:&lt;br/&gt;&lt;br/&gt;You can see a {object:enchanted castle} off in the distance.|}]]&gt;&lt;/description&gt;\n    &lt;exit alias=\"in\" to=\"your teepee\"&gt;\n      &lt;inherit name=\"indirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"teepee_outside\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;scenery type=\"boolean\"&gt;false&lt;/scenery&gt;\n      &lt;alias&gt;your teepee&lt;/alias&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;takemsg&gt;The teepee is too big and bulky to tote around for no good reason.&lt;/takemsg&gt;\n    &lt;/object&gt;\n    &lt;command name=\"enter_teepee\"&gt;\n      &lt;pattern&gt;enter #object#&lt;/pattern&gt;\n      &lt;script&gt;\n        if (object = teepee_outside) {\n          MoveObject (game.pov, your teepee)\n        }\n        else {\n          msg (\"You can't enter \"+object.article+\".\")\n        }\n      &lt;/script&gt;\n    &lt;/command&gt;\n  &lt;/object&gt;\n  &lt;walkthrough name=\"kv\"&gt;\n    &lt;steps type=\"simplestringlist\"&gt;\n      o\n      enter teepee\n      get shard\n      o\n      in\n      o\n      x castle\n    &lt;/steps&gt;\n  &lt;/walkthrough&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>There would be more than one location from which you could see the enchanted castle in an actual game, of course.</p>\n<p>I guess I could just leave the scopebackdrop script alone, only adding the castle once.  Then, make it visible or invisible.</p>\n<p>...but I digress.</p>\n<p>I need to learn to make an object into a group of objects.</p>\n<p>Let's say I have an object named <strong>poker chip</strong>, which exists out of play.</p>\n<p>To add a new chip to play, I would do this:</p>\n<pre><code>newChip = CloneObjectAndMoveHere(poker chip)\nnewChip.prototype = poker chip\n</code></pre>\n<hr>\n<p>Now, there is another out-of-play object named <strong>poker chips</strong>, which I move to the player (or simply make visible) when he or she has more than one <strong>poker chip</strong>.  I then move each <strong>poker chip</strong> into <strong>poker chips</strong>.</p>\n<p>Then, I could do something like this:</p>\n<pre><code>poker chips.count = ListCount(GetDirectChildren(poker chips))\npoker chips.alias = ToWords(poker chips.count) + \" poker chips\"\n</code></pre>\n<hr>\n<p>This is where I get stuck while theorizing this.</p>\n<p>I want to then be able to <strong>PUT 2 CHIPS ON TABLE</strong>  or <strong>PUT 1 CHIP ON TABLE</strong>.</p>\n<hr>\n<p>Like I say, there are probably already good examples posted already, I'm just typing and theorizing instead of searching and learning.</p>\n<p>I'm off to search now, though!</p>\n<hr>\n<p>PS</p>\n<p>Sorry.  I've had too much sugar today, and I'm all scatter-brained and stuff.</p>\n\n",
      "PostDate": "2017-12-26T18:53:18.2625933Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80bfab69-10b7-4cd6-85ba-53e5e33d494e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would do money as an attribute. When the player picks some up, destroy the object and update the attribute. Listing it with a status attributes would be easiest, but you could have a wallet object or whatever.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would do money as an attribute. When the player picks some up, destroy the object and update the attribute. Listing it with a status attributes would be easiest, but you could have a wallet object or whatever.</p>\n\n",
      "PostDate": "2017-12-26T19:44:03.5594416Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f78ca8f8-476d-4cf7-b8b6-803c4f9b7edb",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/Te0Y5FPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**\\>I would do money as an attribute. When the player picks some up, destroy the object and update the attribute. Listing it with a status attributes would be easiest, but you could have a wallet object or whatever.**\r\n\r\nI gotcha.\r\n\r\nThat's what I've got scripted at the moment.  (And when I say, \"I've got it scripted,\" that just means I copied it from one of your examples.  Hehehe.)\r\n\r\n---\r\nThis is my experiment, which combines what Pixie just said with something I vaguely remember mrangel posting a while back:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Chips\">\r\n    <gameid>f2806bf4-e541-440d-8778-ea1dfdef45a7</gameid>\r\n    <version>0.0.1</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <showmoney />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <enter type=\"script\">\r\n    </enter>\r\n    <beforeenter type=\"script\"><![CDATA[\r\n      i = 4\r\n      while (i>0) {\r\n        CloneObjectAndMoveHere (chip)\r\n        i = i - 1\r\n      }\r\n    ]]></beforeenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <object name=\"poker_chips\">\r\n        <inherit name=\"editor_object\" />\r\n        <visible type=\"boolean\">false</visible>\r\n        <alias>poker chip</alias>\r\n        <look><![CDATA[You have {poker_chips.count} chip{if poker_chips.count<>1:s}.]]></look>\r\n        <count type=\"int\">0</count>\r\n        <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n        <single type=\"object\">chip</single>\r\n        <drop type=\"script\"><![CDATA[\r\n          amount = poker_chips.count\r\n          while (poker_chips.count>0) {\r\n            i = ToString(poker_chips.count)\r\n            i = ToInt(i)\r\n            left = i - amount\r\n            // msg (\"To drop: \"+amount+\" out of \"+i+\", leaving \"+left+\".\")\r\n            // msg (object.single)\r\n            while (i>left) {\r\n              newObj = CloneObject (poker_chips.single)\r\n              MoveObjectHere (newObj)\r\n              newObj.prototype = poker_chips.single\r\n              i = i - 1\r\n            }\r\n            poker_chips.count = poker_chips.count - amount\r\n            msg (\"Done.\")\r\n            switch (poker_chips.count) {\r\n              case (1) {\r\n                poker_chips.alias = poker_chips.single.alias\r\n              }\r\n              case (0) {\r\n                MakeObjectInvisible (poker_chips)\r\n              }\r\n              default {\r\n                poker_chips.alias = ToWords(poker_chips.count)+\" \"+GetDisplayAlias(object.single)+\"s\"\r\n              }\r\n            }\r\n          }\r\n        ]]></drop>\r\n      </object>\r\n    </object>\r\n    <object name=\"baton\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <look>This is only here to see if you can drop it.</look>\r\n    </object>\r\n  </object>\r\n  <object name=\"chip\">\r\n    <inherit name=\"editor_object\" />\r\n    <alias>poker chip</alias>\r\n    <look>A red poker chip, worth $1.</look>\r\n    <take type=\"script\"><![CDATA[\r\n      if (not poker_chips.visible) {\r\n        MakeObjectVisible (poker_chips)\r\n      }\r\n      poker_chips.count = poker_chips.count + 1\r\n      if (poker_chips.count>1) {\r\n        poker_chips.alias = ToWords(poker_chips.count)+\"\"+\" poker chips\"\r\n      }\r\n      RemoveObject (this)\r\n      msg (\"You pick it up.\")\r\n    ]]></take>\r\n  </object>\r\n  <command name=\"drop_n_objects\">\r\n    <pattern type=\"string\"><![CDATA[^drop (?<text>\\d+) (?<object>.*)$]]></pattern>\r\n    <script><![CDATA[\r\n      // msg (object)\r\n      // msg (text)\r\n      amount = ToInt(text)\r\n      if (HasAttribute(object,\"count\")) {\r\n        if (amount<=object.count) {\r\n          i = ToString(object.count)\r\n          i = ToInt(i)\r\n          left = i - amount\r\n          // msg (\"To drop: \"+amount+\" out of \"+i+\", leaving \"+left+\".\")\r\n          // msg (object.single)\r\n          while (i>left) {\r\n            newObj = CloneObject (object.single)\r\n            MoveObjectHere (newObj)\r\n            newObj.prototype = object.single\r\n            i = i - 1\r\n          }\r\n          object.count = object.count - amount\r\n          msg (\"Done.\")\r\n          switch (object.count) {\r\n            case (1) {\r\n              object.alias = object.single.alias\r\n            }\r\n            case (0) {\r\n              msg (\"That was your last \"+GetDisplayAlias(object)+\".\")\r\n              MakeObjectInvisible (object)\r\n            }\r\n            default {\r\n              object.alias = ToWords(object.count)+\" \"+GetDisplayAlias(object.single)+\"s\"\r\n            }\r\n          }\r\n        }\r\n        else if (ToInt(text)>=object.count) {\r\n          msg (\"You don't have that many.\")\r\n        }\r\n      }\r\n      else {\r\n        foreach (obj, object) {\r\n          DoDrop (obj, multiple)\r\n        }\r\n      }\r\n    ]]></script>\r\n  </command>\r\n  <walkthrough name=\"kv\">\r\n    <steps type=\"simplestringlist\">\r\n      i\r\n      get all\r\n      i\r\n      x chips\r\n      drop 2 chips\r\n      i\r\n      x chips\r\n      get all\r\n      drop 1 chip\r\n      x\r\n      i\r\n      x chips\r\n      get all\r\n      drop 3 chips\r\n      i\r\n      x chip\r\n      1\r\n      get all\r\n      drop baton\r\n      get it\r\n      drop all\r\n    </steps>\r\n  </walkthrough>\r\n</asl>\r\n```\r\n\r\n\r\n---\r\nI can drop ```n``` chips, but I can't make it work on the take script for the life of me.\r\n\r\nWhat I've got for the drop script is all I can recall from an older post by mrangel.  (Which means its my bastardized version, so it's more like some code based on a vague memory of a post by mrangel.  (Just to do mrangel justice.  He didn't write this messy script.))",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>&gt;I would do money as an attribute. When the player picks some up, destroy the object and update the attribute. Listing it with a status attributes would be easiest, but you could have a wallet object or whatever.</strong></p>\n<p>I gotcha.</p>\n<p>That's what I've got scripted at the moment.  (And when I say, \"I've got it scripted,\" that just means I copied it from one of your examples.  Hehehe.)</p>\n<hr>\n<p>This is my experiment, which combines what Pixie just said with something I vaguely remember mrangel posting a while back:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6404.15496--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Chips\"&gt;\n    &lt;gameid&gt;f2806bf4-e541-440d-8778-ea1dfdef45a7&lt;/gameid&gt;\n    &lt;version&gt;0.0.1&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;showmoney /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;enter type=\"script\"&gt;\n    &lt;/enter&gt;\n    &lt;beforeenter type=\"script\"&gt;&lt;![CDATA[\n      i = 4\n      while (i&gt;0) {\n        CloneObjectAndMoveHere (chip)\n        i = i - 1\n      }\n    ]]&gt;&lt;/beforeenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;object name=\"poker_chips\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n        &lt;alias&gt;poker chip&lt;/alias&gt;\n        &lt;look&gt;&lt;![CDATA[You have {poker_chips.count} chip{if poker_chips.count&lt;&gt;1:s}.]]&gt;&lt;/look&gt;\n        &lt;count type=\"int\"&gt;0&lt;/count&gt;\n        &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n        &lt;single type=\"object\"&gt;chip&lt;/single&gt;\n        &lt;drop type=\"script\"&gt;&lt;![CDATA[\n          amount = poker_chips.count\n          while (poker_chips.count&gt;0) {\n            i = ToString(poker_chips.count)\n            i = ToInt(i)\n            left = i - amount\n            // msg (\"To drop: \"+amount+\" out of \"+i+\", leaving \"+left+\".\")\n            // msg (object.single)\n            while (i&gt;left) {\n              newObj = CloneObject (poker_chips.single)\n              MoveObjectHere (newObj)\n              newObj.prototype = poker_chips.single\n              i = i - 1\n            }\n            poker_chips.count = poker_chips.count - amount\n            msg (\"Done.\")\n            switch (poker_chips.count) {\n              case (1) {\n                poker_chips.alias = poker_chips.single.alias\n              }\n              case (0) {\n                MakeObjectInvisible (poker_chips)\n              }\n              default {\n                poker_chips.alias = ToWords(poker_chips.count)+\" \"+GetDisplayAlias(object.single)+\"s\"\n              }\n            }\n          }\n        ]]&gt;&lt;/drop&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=\"baton\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;look&gt;This is only here to see if you can drop it.&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"chip\"&gt;\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;alias&gt;poker chip&lt;/alias&gt;\n    &lt;look&gt;A red poker chip, worth $1.&lt;/look&gt;\n    &lt;take type=\"script\"&gt;&lt;![CDATA[\n      if (not poker_chips.visible) {\n        MakeObjectVisible (poker_chips)\n      }\n      poker_chips.count = poker_chips.count + 1\n      if (poker_chips.count&gt;1) {\n        poker_chips.alias = ToWords(poker_chips.count)+\"\"+\" poker chips\"\n      }\n      RemoveObject (this)\n      msg (\"You pick it up.\")\n    ]]&gt;&lt;/take&gt;\n  &lt;/object&gt;\n  &lt;command name=\"drop_n_objects\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^drop (?&lt;text&gt;\\d+) (?&lt;object&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      // msg (object)\n      // msg (text)\n      amount = ToInt(text)\n      if (HasAttribute(object,\"count\")) {\n        if (amount&lt;=object.count) {\n          i = ToString(object.count)\n          i = ToInt(i)\n          left = i - amount\n          // msg (\"To drop: \"+amount+\" out of \"+i+\", leaving \"+left+\".\")\n          // msg (object.single)\n          while (i&gt;left) {\n            newObj = CloneObject (object.single)\n            MoveObjectHere (newObj)\n            newObj.prototype = object.single\n            i = i - 1\n          }\n          object.count = object.count - amount\n          msg (\"Done.\")\n          switch (object.count) {\n            case (1) {\n              object.alias = object.single.alias\n            }\n            case (0) {\n              msg (\"That was your last \"+GetDisplayAlias(object)+\".\")\n              MakeObjectInvisible (object)\n            }\n            default {\n              object.alias = ToWords(object.count)+\" \"+GetDisplayAlias(object.single)+\"s\"\n            }\n          }\n        }\n        else if (ToInt(text)&gt;=object.count) {\n          msg (\"You don't have that many.\")\n        }\n      }\n      else {\n        foreach (obj, object) {\n          DoDrop (obj, multiple)\n        }\n      }\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;walkthrough name=\"kv\"&gt;\n    &lt;steps type=\"simplestringlist\"&gt;\n      i\n      get all\n      i\n      x chips\n      drop 2 chips\n      i\n      x chips\n      get all\n      drop 1 chip\n      x\n      i\n      x chips\n      get all\n      drop 3 chips\n      i\n      x chip\n      1\n      get all\n      drop baton\n      get it\n      drop all\n    &lt;/steps&gt;\n  &lt;/walkthrough&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>I can drop <code>n</code> chips, but I can't make it work on the take script for the life of me.</p>\n<p>What I've got for the drop script is all I can recall from an older post by mrangel.  (Which means its my bastardized version, so it's more like some code based on a vague memory of a post by mrangel.  (Just to do mrangel justice.  He didn't write this messy script.))</p>\n\n",
      "PostDate": "2017-12-26T23:35:59.1804544Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
