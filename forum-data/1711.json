{
  "Topic": {
    "TopicId": "1711",
    "ForumId": "10",
    "Title": "Object Types change requests",
    "LastUpdated": "2007-07-17T12:48:58+01:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "13497",
      "UserId": 0,
      "Username": "cangelo",
      "UserAvatar": null,
      "UserGravatar": "1b8de8e7a06afeccae35afb22dc64a58",
      "EditableText": "2 Requests are in here for the QDK\r\n\r\n\r\n1) Rename Object Type\r\n\r\nWhen I &quot;Edit&quot; an &quot;Object Type&quot;, I would like to be able to rename the object type.\r\n\r\nFor example.  I initially created a type &quot;Door&quot;, which had a property for determining if the door was opened or closed and a property to determine if it was locked or unlocked.  It also had actions for opening/closing the object it was attached to and actions for locking/unlocking the object.\r\n\r\nI decided to separate this into two generic types (Openable and Lockable) so that every door didn't necessarily have lock functionality and so that I don't have to manually tell the QDK to ignore (&quot;NOT&quot;) certain properties/actions.\r\n\r\nI would have preferred to rename the object type to openable via the QDK rather than creating a new object type.\r\n\r\nSince openable is not really a word, I may wish to change the name again later.\r\n\r\n\r\n2) Auto fill / remove properties and actions from objects with a given object type and editing default value for the given object.\r\n\r\nWhen I select an object type or types for a game object, I would like the QDK to visually display the properties and actions 'inherited' in the window.  This would be good for reference and I could then 'not' properties and actions if I wanted to not include them.  Along with this might come a 3rd feature request that would allow me to enter the initial state of each property as I select them (via the same interface already there for the Properties tab with the &quot;value&quot; text box).\r\n\r\nI hope this makes sense.  I'm just learning to use this system and trying to figure out how to organize the finer points and create some re-useable types/scripts.",
      "EditableFormat": "bbcode",
      "HTML": "2 Requests are in here for the QDK<br/><br/><br/>1) Rename Object Type<br/><br/>When I &quot;Edit&quot; an &quot;Object Type&quot;, I would like to be able to rename the object type.<br/><br/>For example.  I initially created a type &quot;Door&quot;, which had a property for determining if the door was opened or closed and a property to determine if it was locked or unlocked.  It also had actions for opening/closing the object it was attached to and actions for locking/unlocking the object.<br/><br/>I decided to separate this into two generic types (Openable and Lockable) so that every door didn't necessarily have lock functionality and so that I don't have to manually tell the QDK to ignore (&quot;NOT&quot;) certain properties/actions.<br/><br/>I would have preferred to rename the object type to openable via the QDK rather than creating a new object type.<br/><br/>Since openable is not really a word, I may wish to change the name again later.<br/><br/><br/>2) Auto fill / remove properties and actions from objects with a given object type and editing default value for the given object.<br/><br/>When I select an object type or types for a game object, I would like the QDK to visually display the properties and actions 'inherited' in the window.  This would be good for reference and I could then 'not' properties and actions if I wanted to not include them.  Along with this might come a 3rd feature request that would allow me to enter the initial state of each property as I select them (via the same interface already there for the Properties tab with the &quot;value&quot; text box).<br/><br/>I hope this makes sense.  I'm just learning to use this system and trying to figure out how to organize the finer points and create some re-useable types/scripts.",
      "PostDate": "2007-07-12T22:49:50+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13522",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Types are a collection of properties which are inherited upon the point of assignment... Ie, they don't really exist until the code comes to that point and the object is given the default properties defined in the type...\r\n\r\nThis is important because - picking specific values from a type would suggest that you are taking a specific 'type' (say, red clothes) and trying to generalize them (any colour clothes for instance).\r\n\r\nIt's more idealistic to create a general type (clothes) and then specific sub-types through inheritance (clothes, of which are socks... Which are red)..\r\n\r\nSo you could have one specific type (red socks) or 3 types which you can each give to the object (clothes/red/socks).\r\n- I think that's what you were trying to do with question 2?",
      "EditableFormat": "bbcode",
      "HTML": "Types are a collection of properties which are inherited upon the point of assignment... Ie, they don't really exist until the code comes to that point and the object is given the default properties defined in the type...<br/><br/>This is important because - picking specific values from a type would suggest that you are taking a specific 'type' (say, red clothes) and trying to generalize them (any colour clothes for instance).<br/><br/>It's more idealistic to create a general type (clothes) and then specific sub-types through inheritance (clothes, of which are socks... Which are red)..<br/><br/>So you could have one specific type (red socks) or 3 types which you can each give to the object (clothes/red/socks).<br/>- I think that's what you were trying to do with question 2?",
      "PostDate": "2007-07-15T04:30:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13537",
      "UserId": 0,
      "Username": "cangelo",
      "UserAvatar": null,
      "UserGravatar": "1b8de8e7a06afeccae35afb22dc64a58",
      "EditableText": "Maybe I'm misunderstanding here but I think we're talking in different directions and I'm positive I wasn't very clear in my description.\r\n\r\nExample of what I'm saying:\r\nNOTE: I realize this is an incomplete example\r\n\r\n\r\nLOCKABLE TYPE\r\n1) Select Game Menu\r\n2) Select Object Types Menu\r\n3) Click Add\r\n4) Type Lockable\r\n5) Under properties tab, Add name:is_locked and value:false\r\n6) Under Actions tab, Add lock and pretend there is a script\r\n7) Under Action tab, Add unlock and pretend there is a script\r\n8) Click OK button\r\n\r\n\r\nOPENABLE TYPE\r\n1) Select Game Menu\r\n2) Select Object Types Menu\r\n3) Click Add\r\n4) Type Openable\r\n5) Under properties tab, Add name:is_open and value:false\r\n6) Under Actions tab, Add close and pretend there is a script\r\n7) Under Action tab, Add open and pretend there is a script\r\n8) Click OK button\r\n\r\n\r\nOBJECT IN ROOM\r\n1) Create A Room: Room 1\r\n2) Create A Door: Door 1\r\n3) Select Door 1\r\n4) Click the Advanced Tab\r\n5) Click Edit Properties and Actions button\r\n- NOTE: No properties or actions currently\r\n6) In Properties and Actions Dialog select Types Tab\r\n7) Press Add and select Type: Openable\r\n8) Press Add and select Type: Lockable\r\n\r\nNOTE that if you click on properties and/or actions, none are listed unless you add them.\r\n\r\nWHAT I WOULD LIKE TO SEE, is the 'inherited' properties from the added types to automatically be filled in at this level for reference and in the event I want to overwrite them or 'Not' them via the interface.\r\n\r\nIn the end, I changed my directions and started creating a library instead because I prefer editing a library file for the scripts and I can create a tab interface on the main screen.  However, I still think this could be useful to those that depend on the script editor and Types Dialog.",
      "EditableFormat": "bbcode",
      "HTML": "Maybe I'm misunderstanding here but I think we're talking in different directions and I'm positive I wasn't very clear in my description.<br/><br/>Example of what I'm saying:<br/>NOTE: I realize this is an incomplete example<br/><br/><br/>LOCKABLE TYPE<br/>1) Select Game Menu<br/>2) Select Object Types Menu<br/>3) Click Add<br/>4) Type Lockable<br/>5) Under properties tab, Add name:is_locked and value:false<br/>6) Under Actions tab, Add lock and pretend there is a script<br/>7) Under Action tab, Add unlock and pretend there is a script<br/>8) Click OK button<br/><br/><br/>OPENABLE TYPE<br/>1) Select Game Menu<br/>2) Select Object Types Menu<br/>3) Click Add<br/>4) Type Openable<br/>5) Under properties tab, Add name:is_open and value:false<br/>6) Under Actions tab, Add close and pretend there is a script<br/>7) Under Action tab, Add open and pretend there is a script<br/>8) Click OK button<br/><br/><br/>OBJECT IN ROOM<br/>1) Create A Room: Room 1<br/>2) Create A Door: Door 1<br/>3) Select Door 1<br/>4) Click the Advanced Tab<br/>5) Click Edit Properties and Actions button<br/>- NOTE: No properties or actions currently<br/>6) In Properties and Actions Dialog select Types Tab<br/>7) Press Add and select Type: Openable<br/>8) Press Add and select Type: Lockable<br/><br/>NOTE that if you click on properties and/or actions, none are listed unless you add them.<br/><br/>WHAT I WOULD LIKE TO SEE, is the 'inherited' properties from the added types to automatically be filled in at this level for reference and in the event I want to overwrite them or 'Not' them via the interface.<br/><br/>In the end, I changed my directions and started creating a library instead because I prefer editing a library file for the scripts and I can create a tab interface on the main screen.  However, I still think this could be useful to those that depend on the script editor and Types Dialog.",
      "PostDate": "2007-07-16T01:39:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13542",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Erm, so you'd like to be able to edit types through objects instead of actually editing the types?\r\n.... But how would you then know whether you're editing a type and not the object itself?\r\n\r\n(sorry, headache, my brain is both active and trying to avoid thinking - quite amusing)\r\n\r\n*deep breath*...right, first things first..\r\n\r\nYou create types (I wouldn't actually create an openable type myself, as door's that don't open sure aren't doors, and what's the point of locking/unlocking something if you can't open it!?).\r\n\r\nNow, when you are in QDK and creating the game, assigning a type doesn't just change the object to have those properties/actions. It simply adds a &quot;type &lt;&gt;&quot; line into the object code.\r\nOnce the object is created by Quest (the game-player) then the type's default properties and actions are given to the object - so it's run-time.\r\n\r\nIf you wanted to &quot;not&quot; a property provided by the type, then you simply create the not property... But I do see your point in the fact you need to go find out the correct property.\r\n\r\nPerhaps having them a faded colour or something similar.. I've never quite liked QDK.",
      "EditableFormat": "bbcode",
      "HTML": "Erm, so you'd like to be able to edit types through objects instead of actually editing the types?<br/>.... But how would you then know whether you're editing a type and not the object itself?<br/><br/>(sorry, headache, my brain is both active and trying to avoid thinking - quite amusing)<br/><br/>*deep breath*...right, first things first..<br/><br/>You create types (I wouldn't actually create an openable type myself, as door's that don't open sure aren't doors, and what's the point of locking/unlocking something if you can't open it!?).<br/><br/>Now, when you are in QDK and creating the game, assigning a type doesn't just change the object to have those properties/actions. It simply adds a &quot;type &lt;&gt;&quot; line into the object code.<br/>Once the object is created by Quest (the game-player) then the type's default properties and actions are given to the object - so it's run-time.<br/><br/>If you wanted to &quot;not&quot; a property provided by the type, then you simply create the not property... But I do see your point in the fact you need to go find out the correct property.<br/><br/>Perhaps having them a faded colour or something similar.. I've never quite liked QDK.",
      "PostDate": "2007-07-16T12:45:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13543",
      "UserId": 0,
      "Username": "Elexxorine",
      "UserAvatar": null,
      "UserGravatar": "a220ee44d8fe2f07029cf1f61b98bf40",
      "EditableText": "Yeah. I found QDK quite difficult to work with too, ll those new windows to edit stuff and much harder to see the bigger picture of what you're doing. Coding as ASL is much easier nd simpler, though I sometimes get QDK to create the game file sometimes as I can never remember all the define game settings you should use. lolz.",
      "EditableFormat": "bbcode",
      "HTML": "Yeah. I found QDK quite difficult to work with too, ll those new windows to edit stuff and much harder to see the bigger picture of what you're doing. Coding as ASL is much easier nd simpler, though I sometimes get QDK to create the game file sometimes as I can never remember all the define game settings you should use. lolz.",
      "PostDate": "2007-07-16T13:35:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13544",
      "UserId": 0,
      "Username": "cangelo",
      "UserAvatar": null,
      "UserGravatar": "1b8de8e7a06afeccae35afb22dc64a58",
      "EditableText": "[quote=&quot;Tr0n&quot;:2gaaope4]\nNow, when you are in QDK and creating the game, assigning a type doesn't just change the object to have those properties/actions. It simply adds a &quot;type &lt;&gt;&quot; line into the object code.\nOnce the object is created by Quest (the game-player) then the type's default properties and actions are given to the object - so it's run-time.\n\nIf you wanted to &quot;not&quot; a property provided by the type, then you simply create the not property... But I do see your point in the fact you need to go find out the correct property.\n\nPerhaps having them a faded colour or something similar[/quote:2gaaope4]\n\nHeh.  Yeah, a faded color might be good to show it's inherited from at type.  \n\nThe type interface basically allows you to override or overload properties and actions so if you overrode it, then it wouldn't be faded anymore.\n\n[quote=&quot;Tr0n&quot;:2gaaope4]\nYou create types (I wouldn't actually create an openable type myself, as door's that don't open sure aren't doors, and what's the point of locking/unlocking something if you can't open it!?).\n[/quote:2gaaope4]\n\nIt's for reusability. Doors are not the only openable items.  Bags, Chests, Windows, You mouth, etc etc.  The basic openable functionality simply includes properties to determine if the created object is open or not and actions to open/close the object.  \n\nYou can even include code within the actions (open/close) to see if the object is Lockable too and that knows it can't open if it is locked.  However, not all doors, chests, etc need a lock state.  And potentially there could be some type of object where it needs a lock state and it's not openable.  So, tying locked to open or vice versa is assuming much and potentially causing to duplicate code on another object type.\n\nI am starting to create an ASL/Quest library based on the Tads 3 object model, which I personally think is very nice.  If I can successfully (albeit slowly) do this over time then I get the best of both worlds.\n\n[quote=&quot;Tr0n&quot;:2gaaope4]\nI've never quite liked QDK.\n[/quote:2gaaope4]\r\n\r\nI personally like the QDK as a visual interface but don't like like using the script builder (which is why I moved to libraries that allow you to visually add what you need).  However, there are plenty of non-programmers that probably would depend on the script builder since there aren't libraries available to do everything they need.\r\n\r\nI suppose in the end, it would be great to have a huge library (ie: Tads 3) and not need the object type interface at all.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Tr0n wrote:</cite><br/>Now, when you are in QDK and creating the game, assigning a type doesn't just change the object to have those properties/actions. It simply adds a &quot;type &lt;&gt;&quot; line into the object code.<br/>Once the object is created by Quest (the game-player) then the type's default properties and actions are given to the object - so it's run-time.<br/><br/>If you wanted to &quot;not&quot; a property provided by the type, then you simply create the not property... But I do see your point in the fact you need to go find out the correct property.<br/><br/>Perhaps having them a faded colour or something similar</blockquote><br/><br/>Heh.  Yeah, a faded color might be good to show it's inherited from at type.  <br/><br/>The type interface basically allows you to override or overload properties and actions so if you overrode it, then it wouldn't be faded anymore.<br/><br/><blockquote><cite>Tr0n wrote:</cite><br/>You create types (I wouldn't actually create an openable type myself, as door's that don't open sure aren't doors, and what's the point of locking/unlocking something if you can't open it!?).<br/></blockquote><br/><br/>It's for reusability. Doors are not the only openable items.  Bags, Chests, Windows, You mouth, etc etc.  The basic openable functionality simply includes properties to determine if the created object is open or not and actions to open/close the object.  <br/><br/>You can even include code within the actions (open/close) to see if the object is Lockable too and that knows it can't open if it is locked.  However, not all doors, chests, etc need a lock state.  And potentially there could be some type of object where it needs a lock state and it's not openable.  So, tying locked to open or vice versa is assuming much and potentially causing to duplicate code on another object type.<br/><br/>I am starting to create an ASL/Quest library based on the Tads 3 object model, which I personally think is very nice.  If I can successfully (albeit slowly) do this over time then I get the best of both worlds.<br/><br/><blockquote><cite>Tr0n wrote:</cite><br/>I've never quite liked QDK.<br/></blockquote><br/><br/>I personally like the QDK as a visual interface but don't like like using the script builder (which is why I moved to libraries that allow you to visually add what you need).  However, there are plenty of non-programmers that probably would depend on the script builder since there aren't libraries available to do everything they need.<br/><br/>I suppose in the end, it would be great to have a huge library (ie: Tads 3) and not need the object type interface at all.",
      "PostDate": "2007-07-16T14:01:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13548",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "[quote=&quot;cangelo&quot;:3chmdhrn]I am starting to create an ASL/Quest library based on the Tads 3 object model, which I personally think is very nice.  If I can successfully (albeit slowly) do this over time then I get the best of both worlds.[/quote:3chmdhrn]\r\n\r\nYou'd be very hard pressed to do that; ASL is a clumsy language and not well suited to the task.\r\n\r\nAssembly languages usually have a rigid syntax that is easy for machines to parse, but requires breaking things into small steps.  Higher level languages (usually context-free grammars) are harder for machines to parse, but work in a more convenient step size.  ASL has the small step size of assembly, but has the difficult parsing of an HLL.\r\n\r\nThe more &quot;static&quot; languages (that do all the work at compile time), like C, have very extensive error checking.  More &quot;dynamic&quot; languages like LISP have the added power of closures, macros, and run-time code evaluation, at a cost of being able to verify less at load/compile time.  Quest has even less error-checking than the dynamic languages, without the corresponding power.\r\n\r\nI won't go into the horrible design of the object model or of qsg.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>cangelo wrote:</cite>I am starting to create an ASL/Quest library based on the Tads 3 object model, which I personally think is very nice.  If I can successfully (albeit slowly) do this over time then I get the best of both worlds.</blockquote><br/><br/>You'd be very hard pressed to do that; ASL is a clumsy language and not well suited to the task.<br/><br/>Assembly languages usually have a rigid syntax that is easy for machines to parse, but requires breaking things into small steps.  Higher level languages (usually context-free grammars) are harder for machines to parse, but work in a more convenient step size.  ASL has the small step size of assembly, but has the difficult parsing of an HLL.<br/><br/>The more &quot;static&quot; languages (that do all the work at compile time), like C, have very extensive error checking.  More &quot;dynamic&quot; languages like LISP have the added power of closures, macros, and run-time code evaluation, at a cost of being able to verify less at load/compile time.  Quest has even less error-checking than the dynamic languages, without the corresponding power.<br/><br/>I won't go into the horrible design of the object model or of qsg.",
      "PostDate": "2007-07-17T12:01:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "13550",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "[quote:3art3kxm]You can even include code within the actions (open/close) to see if the object is Lockable too and that knows it can't open if it is locked. However, not all doors, chests, etc need a lock state. And potentially there could be some type of object where it needs a lock state and it's not openable. So, tying locked to open or vice versa is assuming much and potentially causing to duplicate code on another object type.[/quote:3art3kxm]What I'm trying to say, is that instead of assigning, say, 3 types to the door, you can have one type (door) which inherits the other 3 types, and only have to give the door one type, etc.\r\n\r\nI did start work on a couple of things, but found I kept running into blocked walls.. I can't remember where I left off..",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>You can even include code within the actions (open/close) to see if the object is Lockable too and that knows it can't open if it is locked. However, not all doors, chests, etc need a lock state. And potentially there could be some type of object where it needs a lock state and it's not openable. So, tying locked to open or vice versa is assuming much and potentially causing to duplicate code on another object type.</p></blockquote>What I'm trying to say, is that instead of assigning, say, 3 types to the door, you can have one type (door) which inherits the other 3 types, and only have to give the door one type, etc.<br/><br/>I did start work on a couple of things, but found I kept running into blocked walls.. I can't remember where I left off..",
      "PostDate": "2007-07-17T12:48:58+01:00",
      "LastEditDate": null
    }
  ]
}
