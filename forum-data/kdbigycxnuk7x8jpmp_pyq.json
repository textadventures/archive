{
  "Topic": {
    "TopicId": "kdbigycxnuk7x8jpmp_pyq",
    "ForumId": "10",
    "Title": "Creating a steal function (Solved, i think)",
    "LastUpdated": "2017-01-25T00:52:11.9774055Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a36e7eb5-891e-4235-b0f8-56f45f5d5756",
      "UserId": 227864,
      "Username": "Talon",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b6191c9adc337e83fec8e293e3fc584?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "// feels a bit like an idoit, somehow my command function had been classified as an object rather than a command pattern)\r\nI'm sure this has been tried many times before, but I'd like to make a steal command, the basic premise is to move items from an NPC to the players inventory\r\n\r\nThere are two major problems I have run across, the first is having the item that are stealable on the NPC's object makes them impossible to see, The two ways I see of solving this logically(If not narritvly) are using a function to list the contents of the npc, or making the npcs a transparent container. \r\n\tAn aside to this is I'd rather have the items appear JUST when the npc is looked at rather than be put in the places and things section of the room\r\n\r\n\r\nThe second problem I come across is actually moving the object from one to another dynamically, I've thought of putting a script on as an attribute on the npc similarly to a search function, with passing it giving the player the items . Is this the best way to do it?\r\n\r\nI think i'm messing up the Steal command... it doesn't' seem to register, not even getting the debug text line. \r\n(Command) Steal from #object#\r\n\r\nThe script its supposed to run\r\nmsg (\"Steal enable\")\r\nif (HasScript(object \"steal\")) {\r\n  do (object, \"steal\")\r\n} ",
      "EditableFormat": "markdown",
      "HTML": "<p>// feels a bit like an idoit, somehow my command function had been classified as an object rather than a command pattern)<br>\nI'm sure this has been tried many times before, but I'd like to make a steal command, the basic premise is to move items from an NPC to the players inventory</p>\n<p>There are two major problems I have run across, the first is having the item that are stealable on the NPC's object makes them impossible to see, The two ways I see of solving this logically(If not narritvly) are using a function to list the contents of the npc, or making the npcs a transparent container.<br>\nAn aside to this is I'd rather have the items appear JUST when the npc is looked at rather than be put in the places and things section of the room</p>\n<p>The second problem I come across is actually moving the object from one to another dynamically, I've thought of putting a script on as an attribute on the npc similarly to a search function, with passing it giving the player the items . Is this the best way to do it?</p>\n<p>I think i'm messing up the Steal command... it doesn't' seem to register, not even getting the debug text line.<br>\n(Command) Steal from #object#</p>\n<p>The script its supposed to run<br>\nmsg (\"Steal enable\")<br>\nif (HasScript(object \"steal\")) {<br>\n&nbsp;&nbsp;do (object, \"steal\")<br>\n}</p>\n\n",
      "PostDate": "2017-01-25T00:52:11.9774055Z",
      "LastEditDate": "2017-01-25T00:59:51.5659407Z"
    },
    {
      "PostId": "7f4d45c6-612d-4a87-b29c-248580643924",
      "UserId": 107651,
      "Username": "OurJud",
      "AvatarUrl": "http://i.imgur.com/wfM9qy6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Why don't you just explain what the NPC is carrying in the narrative? You don't have to reply on the auto-generated objects and exits.\r\n\r\nThe best way to move object is to use the move script.",
      "EditableFormat": "markdown",
      "HTML": "<p>Why don't you just explain what the NPC is carrying in the narrative? You don't have to reply on the auto-generated objects and exits.</p>\n<p>The best way to move object is to use the move script.</p>\n\n",
      "PostDate": "2017-01-25T01:52:00.9940815Z",
      "LastEditDate": "2017-01-25T01:53:07.9698552Z"
    },
    {
      "PostId": "dd9d614c-18c0-4893-bd0d-7bbb382ae832",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could make it easy and create a \"Global Command\" and a \"Function\" if you want. A global command so the action can be called upon anytime, and the function so that as your game grows you can add to the function and call upon it without having to update every npc. \r\n\r\nNPC\r\nAttribute Add\r\nsteal \r\nset to boolean False or True\r\n\r\nCommand Pattern\r\nsteal;thief;pillage;gank etc\r\nName: Stealing\r\nScript\r\n```\r\nif (obj.steal=True) {\r\nStealFunction\r\n}\r\nelse {\r\nmsg (\"You cannot steal from this NPC\") \r\n}\r\n```\r\nStealFunction\r\nReturn Type: None\r\nParameters: Leave Blank\r\nScript\r\n```\r\nif (RandomChance(50)) {\r\nmsg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\nelse {\r\nif (RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n  }\r\nelse if (RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n  }\r\n else {\r\n msg (\"You tried to steal something but failed this time.\")\r\n  }\r\n}\r\n```\r\nI'm not 100% sure this will work, but it should give you a good start. A good programmer could correct any mistakes I've made :) \r\n\r\nHope it helps!\r\n\r\n\r\nAnonynn. ",
      "EditableFormat": "markdown",
      "HTML": "<p>You could make it easy and create a \"Global Command\" and a \"Function\" if you want. A global command so the action can be called upon anytime, and the function so that as your game grows you can add to the function and call upon it without having to update every npc.</p>\n<p>NPC<br>\nAttribute Add<br>\nsteal<br>\nset to boolean False or True</p>\n<p>Command Pattern<br>\nsteal;thief;pillage;gank etc<br>\nName: Stealing<br>\nScript</p>\n<pre><code>if (obj.steal=True) {\nStealFunction\n}\nelse {\nmsg (\"You cannot steal from this NPC\") \n}\n</code></pre>\n<p>StealFunction<br>\nReturn Type: None<br>\nParameters: Leave Blank<br>\nScript</p>\n<pre><code>if (RandomChance(50)) {\nmsg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\nelse {\nif (RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n  }\nelse if (RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n  }\n else {\n msg (\"You tried to steal something but failed this time.\")\n  }\n}\n</code></pre>\n<p>I'm not 100% sure this will work, but it should give you a good start. A good programmer could correct any mistakes I've made :)</p>\n<p>Hope it helps!</p>\n<p>Anonynn.</p>\n\n",
      "PostDate": "2017-01-25T04:29:09.3808006Z",
      "LastEditDate": "2017-01-25T04:30:40.7920077Z"
    },
    {
      "PostId": "31f9aca6-0acc-45be-a17e-b4fc520aef90",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6ea66c3566e5688ecd2f5da936a37e82?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Why do you have a fail for both the first condition, and the last? If you don't fail (randomchance 50) then all the else statements should be success of some sort.",
      "EditableFormat": "markdown",
      "HTML": "<p>Why do you have a fail for both the first condition, and the last? If you don't fail (randomchance 50) then all the else statements should be success of some sort.</p>\n\n",
      "PostDate": "2017-01-29T00:31:31.7518952Z",
      "LastEditDate": null
    },
    {
      "PostId": "3c16b657-1119-4e65-a8fa-a8f7d816790a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think it works properly (though it could probably be done a bit more concisely/efficiently in terms of code design):\r\n\r\n```\r\nif (RandomChance(50)) {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n} else {\r\n  if (RandomChance(25)) {\r\n    msg (\"You stole insert item here\")\r\n    MoveObject (precious diamond, player)\r\n  } else if (RandomChance(25)) {\r\n    msg (\"You swiped some gold!\")\r\n    player.gold = player.gold + 5\r\n  } else {\r\n    msg (\"You tried to steal something but failed this time.\")\r\n  }\r\n}\r\n```\r\n\r\n-------\r\n\r\nHK edit: this is incorrect ---> slightly more concise/efficient, I think:\r\n\r\nHK edit: err.. I'm having trouble (as you can see below, my code isn't any better) ... or maybe there's just no way to reduce it to a single 'fail' message, meh... lol\r\n\r\n```\r\nif (RandomChance(50)) {\r\n  if (RandomChance(25)) {\r\n    msg (\"You stole insert item here\")\r\n    MoveObject (precious diamond, player)\r\n  } else if (RandomChance(25)) {\r\n    msg (\"You swiped some gold!\")\r\n    player.gold = player.gold + 5\r\n  } else {\r\n    msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n  }\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```\r\n\r\n------\r\n\r\nnot sure if this is actually better...\r\n\r\n(actually, this is VERY DIFFERENT... my bad)\r\n\r\n```\r\nif (RandomChance(50) and RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (RandomChance(50) and RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```\r\n\r\n-----------\r\n\r\nmaybe this way, lol:\r\n\r\n(I'm sure this is more concise, but not sure in terms of its actual efficiency/performance/operations, but if there's a way to make it so, this is it, as far as I can deduce, lol)\r\n\r\n```\r\nboolean_variable = RandomChance (50)\r\nif (boolean_variable and RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (boolean_variable and RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think it works properly (though it could probably be done a bit more concisely/efficiently in terms of code design):</p>\n<pre><code>if (RandomChance(50)) {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n} else {\n  if (RandomChance(25)) {\n    msg (\"You stole insert item here\")\n    MoveObject (precious diamond, player)\n  } else if (RandomChance(25)) {\n    msg (\"You swiped some gold!\")\n    player.gold = player.gold + 5\n  } else {\n    msg (\"You tried to steal something but failed this time.\")\n  }\n}\n</code></pre>\n<hr>\n<p>HK edit: this is incorrect ---&gt; slightly more concise/efficient, I think:</p>\n<p>HK edit: err.. I'm having trouble (as you can see below, my code isn't any better) ... or maybe there's just no way to reduce it to a single 'fail' message, meh... lol</p>\n<pre><code>if (RandomChance(50)) {\n  if (RandomChance(25)) {\n    msg (\"You stole insert item here\")\n    MoveObject (precious diamond, player)\n  } else if (RandomChance(25)) {\n    msg (\"You swiped some gold!\")\n    player.gold = player.gold + 5\n  } else {\n    msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n  }\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n<hr>\n<p>not sure if this is actually better...</p>\n<p>(actually, this is VERY DIFFERENT... my bad)</p>\n<pre><code>if (RandomChance(50) and RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (RandomChance(50) and RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n<hr>\n<p>maybe this way, lol:</p>\n<p>(I'm sure this is more concise, but not sure in terms of its actual efficiency/performance/operations, but if there's a way to make it so, this is it, as far as I can deduce, lol)</p>\n<pre><code>boolean_variable = RandomChance (50)\nif (boolean_variable and RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (boolean_variable and RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-29T01:24:49.9893418Z",
      "LastEditDate": "2017-01-29T01:38:58.4169155Z"
    },
    {
      "PostId": "cbac883f-9ba5-4ad5-a82d-c8ca052dd0a9",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6ea66c3566e5688ecd2f5da936a37e82?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Don't use boolean in this code. that's an on/off switch.\r\n\r\nThis:\r\n\r\nif (RandomChance(50)) \r\n  {\r\n  }\r\nelse msg (\"You didn't get anything.\")\r\n\r\nis your frame. It says check a random percentage and if it's 50 percent or lower, then you succeed, otherwise send the player a fail message. So if we only want there to be a 50 percent chance the gold can be stolen, and the number if 0 - 50, the functions inside the {} will run. If it's 51 or more, the fail message will display.\r\n\r\nIn between those {} put your various success calls:\r\nif (RandonChance(10)) msg (\"You got gold.\")\r\nIf (RandomChance(20)) msg (\"You got a diamond.\")\r\nIf (RandomChance(30)) msg (\"You got splinters! Ouch.\")\r\nIf (RandomChance(50)) msg (\"A mousetrap snaps on your fingers.\")\r\nelse msg (\"Your target is broke. You got air.\")\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Don't use boolean in this code. that's an on/off switch.</p>\n<p>This:</p>\n<p>if (RandomChance(50))<br>\n{<br>\n}<br>\nelse msg (\"You didn't get anything.\")</p>\n<p>is your frame. It says check a random percentage and if it's 50 percent or lower, then you succeed, otherwise send the player a fail message. So if we only want there to be a 50 percent chance the gold can be stolen, and the number if 0 - 50, the functions inside the {} will run. If it's 51 or more, the fail message will display.</p>\n<p>In between those {} put your various success calls:<br>\nif (RandonChance(10)) msg (\"You got gold.\")<br>\nIf (RandomChance(20)) msg (\"You got a diamond.\")<br>\nIf (RandomChance(30)) msg (\"You got splinters! Ouch.\")<br>\nIf (RandomChance(50)) msg (\"A mousetrap snaps on your fingers.\")<br>\nelse msg (\"Your target is broke. You got air.\")</p>\n\n",
      "PostDate": "2017-01-29T01:52:23.9799805Z",
      "LastEditDate": "2017-01-29T01:53:38.3761473Z"
    },
    {
      "PostId": "f07930c3-1fa7-4f5c-8761-170714300c62",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "hmm... looked at my code again... \r\n\r\nHK edit: this is NOT true ----> this is definately the most concise/efficient you can make it!\r\n\r\n```\r\nif (RandomChance (50)) {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n} else if (RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n}\r\n// we (STILL-ARGH) need a fail prompting here, so this code doesn't even work (in terms of being better)... DOH!\r\n```\r\n\r\nHK Edit: NOOOOOOOOOO, this fails.... ARGH! I was wrong... as this doesn't even work (again a missing prompt of failure with this bad/failed design of mine). My previous post is the best you can make it, I think (though not sure about actual efficiency/operations, meh)\r\n\r\n--------\r\n\r\nthis is the most concise design possible (whether it's actually more efficient/operations, is another matter):\r\n\r\n```\r\nboolean_variable = RandomChance (50)\r\nif (boolean_variable and RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (boolean_variable and RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>hmm... looked at my code again...</p>\n<p>HK edit: this is NOT true ----&gt; this is definately the most concise/efficient you can make it!</p>\n<pre><code>if (RandomChance (50)) {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n} else if (RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n}\n// we (STILL-ARGH) need a fail prompting here, so this code doesn't even work (in terms of being better)... DOH!\n</code></pre>\n<p>HK Edit: NOOOOOOOOOO, this fails.... ARGH! I was wrong... as this doesn't even work (again a missing prompt of failure with this bad/failed design of mine). My previous post is the best you can make it, I think (though not sure about actual efficiency/operations, meh)</p>\n<hr>\n<p>this is the most concise design possible (whether it's actually more efficient/operations, is another matter):</p>\n<pre><code>boolean_variable = RandomChance (50)\nif (boolean_variable and RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (boolean_variable and RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-29T02:07:34.5557812Z",
      "LastEditDate": "2017-01-29T02:11:50.3391528Z"
    },
    {
      "PostId": "01429534-ecf5-435c-b41a-3346cbde9d0f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "we could do this, but it's NOT the same (not the same mechanics/equation/formula algorithm design):\r\n\r\n```\r\nif (RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```\r\n\r\n----------------\r\n\r\n**This explains the algorithms/designs (axioms):**\r\n\r\n**as there's a big difference between the mechanics/formula/equation/math/odds of them:**\r\n\r\n**odds: 50% (or fail prompt) -> 25% -> 25% (or fail prompt)**\r\n**odds: (0.5, or fail prompt) -> (0.5 * 0.25) -> (0.5 * 0.25 * 0.25, or fail prompt)**\r\n**odds: (1/2, or 1/2 for fail prompt) -> (1/8 for item) -> (1/32 for gold, or 31/32 for fail prompt)**\r\n**VS**\r\n**odds: 25% -> 25% (or fail prompt)**\r\n**odds: (0.25) -> (0.25 * 0.25, or fail prompt)**\r\n**odds: (1/4 for item) -> (1/16 for gold, or 15/16 for fail prompt)**\r\n\r\n// shouldn't the item (precious diamond) be more rare to get than gold? lol (maybe gold is much more valuable... meh --- I'm just joking around, though with this algorithm, you can see that you probably do want to switch the gold and precious diamond, so that the precious diamond is the more rare thing to get, than gold is)\r\n\r\n--------\r\n\r\nso again, this (at the very bottom of this post) is the most concise design possible for Anonynn's algorithm/design (axiom) of:\r\n\r\n**odds: 50% (or fail prompt) -> 25% -> 25% (or fail prompt)**\r\n**odds: (0.5, or fail prompt) -> (0.5 * 0.25) -> (0.5 * 0.25 * 0.25, or fail prompt)**\r\n**odds: (1/2, or 1/2 for fail prompt) -> (1/8 for item) -> (1/32 for gold, or 31/32 for fail prompt)**\r\n\r\nEQUALS:\r\n\r\n```\r\n// Anonynn's original code:\r\n\r\nif (RandomChance(50)) {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n} else {\r\n  if (RandomChance(25)) {\r\n    msg (\"You stole insert item here\")\r\n    MoveObject (precious diamond, player)\r\n  } else if (RandomChance(25)) {\r\n    msg (\"You swiped some gold!\")\r\n    player.gold = player.gold + 5\r\n  } else {\r\n    msg (\"You tried to steal something but failed this time.\")\r\n  }\r\n}\r\n```\r\n\r\n-----\r\n\r\nmost concise code design possible using Anonynn's axiom (aka her original code directly above):\r\n\r\n```\r\nboolean_variable = RandomChance (50)\r\nif (boolean_variable and RandomChance(25)) {\r\n  msg (\"You stole insert item here\")\r\n  MoveObject (precious diamond, player)\r\n} else if (boolean_variable and RandomChance(25)) {\r\n  msg (\"You swiped some gold!\")\r\n  player.gold = player.gold + 5\r\n} else {\r\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>we could do this, but it's NOT the same (not the same mechanics/equation/formula algorithm design):</p>\n<pre><code>if (RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n<hr>\n<p><strong>This explains the algorithms/designs (axioms):</strong></p>\n<p><strong>as there's a big difference between the mechanics/formula/equation/math/odds of them:</strong></p>\n<p><strong>odds: 50% (or fail prompt) -&gt; 25% -&gt; 25% (or fail prompt)</strong><br>\n<strong>odds: (0.5, or fail prompt) -&gt; (0.5 * 0.25) -&gt; (0.5 * 0.25 * 0.25, or fail prompt)</strong><br>\n<strong>odds: (1/2, or 1/2 for fail prompt) -&gt; (1/8 for item) -&gt; (1/32 for gold, or 31/32 for fail prompt)</strong><br>\n<strong>VS</strong><br>\n<strong>odds: 25% -&gt; 25% (or fail prompt)</strong><br>\n<strong>odds: (0.25) -&gt; (0.25 * 0.25, or fail prompt)</strong><br>\n<strong>odds: (1/4 for item) -&gt; (1/16 for gold, or 15/16 for fail prompt)</strong></p>\n<p>// shouldn't the item (precious diamond) be more rare to get than gold? lol (maybe gold is much more valuable... meh --- I'm just joking around, though with this algorithm, you can see that you probably do want to switch the gold and precious diamond, so that the precious diamond is the more rare thing to get, than gold is)</p>\n<hr>\n<p>so again, this (at the very bottom of this post) is the most concise design possible for Anonynn's algorithm/design (axiom) of:</p>\n<p><strong>odds: 50% (or fail prompt) -&gt; 25% -&gt; 25% (or fail prompt)</strong><br>\n<strong>odds: (0.5, or fail prompt) -&gt; (0.5 * 0.25) -&gt; (0.5 * 0.25 * 0.25, or fail prompt)</strong><br>\n<strong>odds: (1/2, or 1/2 for fail prompt) -&gt; (1/8 for item) -&gt; (1/32 for gold, or 31/32 for fail prompt)</strong></p>\n<p>EQUALS:</p>\n<pre><code>// Anonynn's original code:\n\nif (RandomChance(50)) {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n} else {\n  if (RandomChance(25)) {\n    msg (\"You stole insert item here\")\n    MoveObject (precious diamond, player)\n  } else if (RandomChance(25)) {\n    msg (\"You swiped some gold!\")\n    player.gold = player.gold + 5\n  } else {\n    msg (\"You tried to steal something but failed this time.\")\n  }\n}\n</code></pre>\n<hr>\n<p>most concise code design possible using Anonynn's axiom (aka her original code directly above):</p>\n<pre><code>boolean_variable = RandomChance (50)\nif (boolean_variable and RandomChance(25)) {\n  msg (\"You stole insert item here\")\n  MoveObject (precious diamond, player)\n} else if (boolean_variable and RandomChance(25)) {\n  msg (\"You swiped some gold!\")\n  player.gold = player.gold + 5\n} else {\n  msg (\"You tried to steal something but unfortunately you didn't! Oh noes! Egads!\")\n}\n</code></pre>\n\n",
      "PostDate": "2017-01-29T02:19:29.5730867Z",
      "LastEditDate": "2017-01-29T03:03:05.8986865Z"
    },
    {
      "PostId": "bb073b92-25c1-4114-9926-00a691560b10",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6ea66c3566e5688ecd2f5da936a37e82?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you're overthinking again. \r\n\r\n1. don't use boolean. it's not necessary. think yes/no when you think of boolean.\r\n\r\nAll you need is an if/else statement with some if/else statement nested inside it.\r\n\r\nIf/else is automatically yes/no\r\n\r\nPsudeo code:\r\n\r\nIf (this) do this\r\nelse do this\r\n\r\nIf randomchance is 50 (or less) = yes\r\nelse = randomchane wasn't 50 or less so that = an automatic no\r\n\r\n\r\nSo the starting frame is:\r\n\r\n```\r\nif (RandomChance(50))\r\n     {\r\n              {\r\n              insert success messages here\r\n              }\r\n else \r\n        {\r\n        msg (\"You tried to steal something but failed this time.\")\r\n       }\r\n}\r\n\r\nNow we create the messages that the player will get if attempt is successful:\r\n\r\nif (RandomChance (10)) \r\n      {\r\n       msg (\"\")\r\n      }\r\n else if (RandomChance (20))\r\n      {\r\n       msg (\" \")\r\n       }\r\n else if (RandomChance (30))\r\n       {\r\n       msg (\" \")\r\n       }\r\nelse if (RandomChance (40))\r\n      {\r\n       msg (\" \")\r\n      }\r\nelse\r\n      {\r\n      msg (\" \")\r\n       }\r\n\r\nNow we put those all together:\r\n\r\nif (RandomChance(50))\r\n      {\r\n            {\r\n               if (RandomChance (10)) \r\n                      {\r\n                      msg (\"\")\r\n                       }\r\n                else if (RandomChance (20))\r\n                        {\r\n                 msg (\" \")\r\n                       }\r\n                     else if (RandomChance (30))\r\n                        {\r\n                         msg (\" \")\r\n                          }\r\n                   else if (RandomChance (40))\r\n                          {\r\n                    msg (\" \")\r\n                       }\r\n                  else\r\n                        {\r\n                  msg (\" \")\r\n                         }\r\n               }\r\n else \r\n          {\r\n          msg (\"You tried to steal something but failed this time.\")\r\n          }\r\n}\r\n```\r\n\r\nwhen this runs, the game will check the chance. If it is 50% or less, it'll go through the nested if/else statements for success and return one of them. If it is NOT 50%, it'll ignore all of them and just display the failure message\r\n\r\nObviously, you'll also need to have it do stuff like adding gold or whatever is appropriate for each success message. Those functions will be added right after the message, or right before it, in the set of curly braces the message resides in.\r\n\r\nAlso, notice the logic of the random amounts. Start with the lowest chance, then the next highest, and next highest and so on. This lets you keep YOU organizes. you put the rarest thing first, and go on up to the most common thing. You do that every time you code something like this and then down the road you don't have to try to translate what you were doing.\r\n\r\n\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>you're overthinking again.</p>\n<ol>\n<li>don't use boolean. it's not necessary. think yes/no when you think of boolean.</li>\n</ol>\n<p>All you need is an if/else statement with some if/else statement nested inside it.</p>\n<p>If/else is automatically yes/no</p>\n<p>Psudeo code:</p>\n<p>If (this) do this<br>\nelse do this</p>\n<p>If randomchance is 50 (or less) = yes<br>\nelse = randomchane wasn't 50 or less so that = an automatic no</p>\n<p>So the starting frame is:</p>\n<pre><code>if (RandomChance(50))\n     {\n              {\n              insert success messages here\n              }\n else \n        {\n        msg (\"You tried to steal something but failed this time.\")\n       }\n}\n\nNow we create the messages that the player will get if attempt is successful:\n\nif (RandomChance (10)) \n      {\n       msg (\"\")\n      }\n else if (RandomChance (20))\n      {\n       msg (\" \")\n       }\n else if (RandomChance (30))\n       {\n       msg (\" \")\n       }\nelse if (RandomChance (40))\n      {\n       msg (\" \")\n      }\nelse\n      {\n      msg (\" \")\n       }\n\nNow we put those all together:\n\nif (RandomChance(50))\n      {\n            {\n               if (RandomChance (10)) \n                      {\n                      msg (\"\")\n                       }\n                else if (RandomChance (20))\n                        {\n                 msg (\" \")\n                       }\n                     else if (RandomChance (30))\n                        {\n                         msg (\" \")\n                          }\n                   else if (RandomChance (40))\n                          {\n                    msg (\" \")\n                       }\n                  else\n                        {\n                  msg (\" \")\n                         }\n               }\n else \n          {\n          msg (\"You tried to steal something but failed this time.\")\n          }\n}\n</code></pre>\n<p>when this runs, the game will check the chance. If it is 50% or less, it'll go through the nested if/else statements for success and return one of them. If it is NOT 50%, it'll ignore all of them and just display the failure message</p>\n<p>Obviously, you'll also need to have it do stuff like adding gold or whatever is appropriate for each success message. Those functions will be added right after the message, or right before it, in the set of curly braces the message resides in.</p>\n<p>Also, notice the logic of the random amounts. Start with the lowest chance, then the next highest, and next highest and so on. This lets you keep YOU organizes. you put the rarest thing first, and go on up to the most common thing. You do that every time you code something like this and then down the road you don't have to try to translate what you were doing.</p>\n\n",
      "PostDate": "2017-01-29T04:32:30.0612645Z",
      "LastEditDate": "2017-01-29T09:28:38.7705578Z"
    },
    {
      "PostId": "59f2259a-f712-49c7-86ac-f837789b0903",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "crystalwizard, I've been puzzling over the multiple calls to GetRandomChance with the increasing values. I did notice that you had noted this in your answer as \"a good thing\", but I wondered what the probabilities actually were. So I worked out the probabilities, and it ended up being strange.\r\n\r\nIgnoring the 50% chance thing up front, we can compute the probability of hitting each branch for a given pass through the code.\r\n\r\nFor the first item, you have a **10%** chance. That's simple enough.\r\n\r\nFor the second item, you have a 90% chance from the first roll, and then a 20% from the second, which gives you an overall probability of **18%**.\r\n\r\nFor the third, it's similar: 90% * 80% * 30%, which gives **21.6%**.\r\n\r\nSo far so good. Now the next one gets weird.\r\n\r\nFor the fourth, you have 90% * 80% * 70% * 40%... which gives **20.16%**. Less than the one above.\r\n\r\nAnd your final branch has probability of 90% * 80% * 70% * 60% or **30.24%**.\r\n\r\nI've added these probabilities up (10 + 18 + 21.6 + 20.16 + 30.24) and gotten 100, so that leads me to believe I didn't make an error.\r\n\r\nIf you had proceeded further with another item (at 50%), then that probability would have been around **17%**, which is less again from the previous. I'm wondering if it's approximating more a bell curve than a strict increase... (I can do many math things, but there's also a lot of theoretical math I'm simply not set up for. I'm sure someone out there would have a definitive answer as to why it behaves this way.) It could also be just that you're taking a larger and larger percent of a rapidly diminishing probability.\r\n\r\nAnyway, just wanted to mention that, as your code doesn't seem to be doing quite what you implied you thought it was doing. :)\r\n\r\nWhen I was working on my response library, I allowed choosing randomly from a list of choices, where each choice could have a weight. The algorithm was to sum up the various weights and then use that total as a divisor for the various individual weights when selecting using a probability **from a single roll**. That works especially well if items can come and go within the list.  I think cascading probabilities is going to give you grief, unless it is broad branches like the \"50% chance you might get something\" one above.",
      "EditableFormat": "markdown",
      "HTML": "<p>crystalwizard, I've been puzzling over the multiple calls to GetRandomChance with the increasing values. I did notice that you had noted this in your answer as \"a good thing\", but I wondered what the probabilities actually were. So I worked out the probabilities, and it ended up being strange.</p>\n<p>Ignoring the 50% chance thing up front, we can compute the probability of hitting each branch for a given pass through the code.</p>\n<p>For the first item, you have a <strong>10%</strong> chance. That's simple enough.</p>\n<p>For the second item, you have a 90% chance from the first roll, and then a 20% from the second, which gives you an overall probability of <strong>18%</strong>.</p>\n<p>For the third, it's similar: 90% * 80% * 30%, which gives <strong>21.6%</strong>.</p>\n<p>So far so good. Now the next one gets weird.</p>\n<p>For the fourth, you have 90% * 80% * 70% * 40%... which gives <strong>20.16%</strong>. Less than the one above.</p>\n<p>And your final branch has probability of 90% * 80% * 70% * 60% or <strong>30.24%</strong>.</p>\n<p>I've added these probabilities up (10 + 18 + 21.6 + 20.16 + 30.24) and gotten 100, so that leads me to believe I didn't make an error.</p>\n<p>If you had proceeded further with another item (at 50%), then that probability would have been around <strong>17%</strong>, which is less again from the previous. I'm wondering if it's approximating more a bell curve than a strict increase... (I can do many math things, but there's also a lot of theoretical math I'm simply not set up for. I'm sure someone out there would have a definitive answer as to why it behaves this way.) It could also be just that you're taking a larger and larger percent of a rapidly diminishing probability.</p>\n<p>Anyway, just wanted to mention that, as your code doesn't seem to be doing quite what you implied you thought it was doing. :)</p>\n<p>When I was working on my response library, I allowed choosing randomly from a list of choices, where each choice could have a weight. The algorithm was to sum up the various weights and then use that total as a divisor for the various individual weights when selecting using a probability <strong>from a single roll</strong>. That works especially well if items can come and go within the list.  I think cascading probabilities is going to give you grief, unless it is broad branches like the \"50% chance you might get something\" one above.</p>\n\n",
      "PostDate": "2017-01-29T09:57:29.31334Z",
      "LastEditDate": "2017-01-29T11:30:29.1288007Z"
    },
    {
      "PostId": "eba84160-f74b-4d27-8e00-31a87a0e201e",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/6ea66c3566e5688ecd2f5da936a37e82?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I wasn't trying for a bell curve, just a set of \"if you succeeded, did you get this, did you get that, did you get, ...\" Which can be all over the place, really. You could even give every item the same random chance... -> You have a 50% chance to get something if you steal. You succeeded with that, so... now we check to see what you got:\r\n1. you have a 50% chance to have gotten a ring. Nope. \r\n2. Okay, you have a 50% chance to have gotten gold. Nope. \r\n3. Okay, you have a 50% chance to have gotten pocket lint. Nope. \r\n4. Okay.... \r\n\r\nUntil finally you run out of stuff you might have gotten, didn't get any of them, and get the message that your target was broke and all you got was air. That actually makes it far more realistic, as you always face a schrodinger's cat situation when trying to steal something you can't see - Does it exist or not till you try to take it? And what might it be.\r\n\r\nThe reason for the rising percentages in my illustration to start is that well, if you didn't get this (and you had a slim chance), maybe you got this - not much better chance, but something of a better chance. You didn't get that, maybe you got this, an even better chance.... and so on. The percents don't have to be rising, they can be in any order, it just keeps it easier to organize from a programing perspective (not that I commented my code as I should have).\r\n\r\nPersonally, coming from an AD&D background, I'd prefer a table of objects, and to roll a dice to see what object is acquired if success == yes. But that requires Quest to have the ability to store a global table, and then read it when needed.",
      "EditableFormat": "markdown",
      "HTML": "<p>I wasn't trying for a bell curve, just a set of \"if you succeeded, did you get this, did you get that, did you get, ...\" Which can be all over the place, really. You could even give every item the same random chance... -&gt; You have a 50% chance to get something if you steal. You succeeded with that, so... now we check to see what you got:</p>\n<ol>\n<li>you have a 50% chance to have gotten a ring. Nope.</li>\n<li>Okay, you have a 50% chance to have gotten gold. Nope.</li>\n<li>Okay, you have a 50% chance to have gotten pocket lint. Nope.</li>\n<li>Okay....</li>\n</ol>\n<p>Until finally you run out of stuff you might have gotten, didn't get any of them, and get the message that your target was broke and all you got was air. That actually makes it far more realistic, as you always face a schrodinger's cat situation when trying to steal something you can't see - Does it exist or not till you try to take it? And what might it be.</p>\n<p>The reason for the rising percentages in my illustration to start is that well, if you didn't get this (and you had a slim chance), maybe you got this - not much better chance, but something of a better chance. You didn't get that, maybe you got this, an even better chance.... and so on. The percents don't have to be rising, they can be in any order, it just keeps it easier to organize from a programing perspective (not that I commented my code as I should have).</p>\n<p>Personally, coming from an AD&amp;D background, I'd prefer a table of objects, and to roll a dice to see what object is acquired if success == yes. But that requires Quest to have the ability to store a global table, and then read it when needed.</p>\n\n",
      "PostDate": "2017-01-29T19:34:38.8444996Z",
      "LastEditDate": "2017-01-29T19:37:06.9283346Z"
    },
    {
      "PostId": "32b46b51-3fde-4351-bd70-75f4a5d60f38",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I know you weren't trying for a bell curve. (It may not even be one.) Which is why I brought it up to begin with. Perhaps I misunderstood this: \"Also, notice the logic of the random amounts. Start with the lowest chance then the next highest, and next highest and so on.\" To me that implied the chances of you getting an item was increasing, which wasn't the case. I was simply pointing that out, in case you thought it was working a different way than what you intended. Since you had specifically mentioned \"the logic of the random amounts\" increasing, I assumed \"the logic\" was what you stated afterwards.\r\n\r\nAlso keep in mind that even with a 50% scheme, the probabilities for each item drop off wildly (well, exponentially) the more you have. So if you had four items, they will have probabilities 1/2 for the first, 1/4 for the second, then 1/8 and 1/16, as you go along your \"if\"s. If you're willing for the last one to end up selected so infrequently (only one time in sixteen), then it's an acceptable scheme. If you had 10 items, the last item would only be selected 1 in 1024 times. So you can see the problem as you scale.\r\n\r\nAnd it effectively comes down to the opposite of what you had said: with cascading \"if\"s, apart from mucking about with the probabilities to artificially boost things (which you can only do so far), you will end up typically with the first item having the _highest_ chance, not the rarest, since the probabilities do drop off so quickly the more random numbers you choose.\r\n\r\nBut basically, as long as it's working the way you want, then great! :)",
      "EditableFormat": "markdown",
      "HTML": "<p>I know you weren't trying for a bell curve. (It may not even be one.) Which is why I brought it up to begin with. Perhaps I misunderstood this: \"Also, notice the logic of the random amounts. Start with the lowest chance then the next highest, and next highest and so on.\" To me that implied the chances of you getting an item was increasing, which wasn't the case. I was simply pointing that out, in case you thought it was working a different way than what you intended. Since you had specifically mentioned \"the logic of the random amounts\" increasing, I assumed \"the logic\" was what you stated afterwards.</p>\n<p>Also keep in mind that even with a 50% scheme, the probabilities for each item drop off wildly (well, exponentially) the more you have. So if you had four items, they will have probabilities 1/2 for the first, 1/4 for the second, then 1/8 and 1/16, as you go along your \"if\"s. If you're willing for the last one to end up selected so infrequently (only one time in sixteen), then it's an acceptable scheme. If you had 10 items, the last item would only be selected 1 in 1024 times. So you can see the problem as you scale.</p>\n<p>And it effectively comes down to the opposite of what you had said: with cascading \"if\"s, apart from mucking about with the probabilities to artificially boost things (which you can only do so far), you will end up typically with the first item having the <em>highest</em> chance, not the rarest, since the probabilities do drop off so quickly the more random numbers you choose.</p>\n<p>But basically, as long as it's working the way you want, then great! :)</p>\n\n",
      "PostDate": "2017-01-29T20:04:01.2847264Z",
      "LastEditDate": null
    },
    {
      "PostId": "dabb04f5-1f9b-4960-8f61-06dfd63dcea0",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "_Why do you have a fail for both the first condition, and the last? If you don't fail (randomchance 50) then all the else statements should be success of some sort._\r\n\r\nI set it up that way because I prefer a balanced way of doing things. I would want the odds of successfully pick-pocketing to be lower than the success, that way it would be exciting to the player, or a more meaningful success when they actually do rob someone. Hell, you could even make it that instead of a second fail, they actually get caught and attacked. :) \r\n\r\nYou could also do...\r\n```\r\nchance = GetRandomInt(0, 100)\r\nif (chance <=50) {\r\n //do this\r\n}\r\nelse {\r\n  if (15 < chance >=30) {\r\n  //do this\r\n  else if (31 <chance>=50) {\r\n  //do this\r\n  } \r\n  else {\r\n  //do this\r\n}\r\n}\r\n```\r\nAnd so on :) ",
      "EditableFormat": "markdown",
      "HTML": "<p><em>Why do you have a fail for both the first condition, and the last? If you don't fail (randomchance 50) then all the else statements should be success of some sort.</em></p>\n<p>I set it up that way because I prefer a balanced way of doing things. I would want the odds of successfully pick-pocketing to be lower than the success, that way it would be exciting to the player, or a more meaningful success when they actually do rob someone. Hell, you could even make it that instead of a second fail, they actually get caught and attacked. :)</p>\n<p>You could also do...</p>\n<pre><code>chance = GetRandomInt(0, 100)\nif (chance &lt;=50) {\n //do this\n}\nelse {\n  if (15 &lt; chance &gt;=30) {\n  //do this\n  else if (31 &lt;chance&gt;=50) {\n  //do this\n  } \n  else {\n  //do this\n}\n}\n</code></pre>\n<p>And so on :)</p>\n\n",
      "PostDate": "2017-01-29T20:13:31.4249817Z",
      "LastEditDate": "2017-01-29T20:17:11.2555716Z"
    }
  ]
}
