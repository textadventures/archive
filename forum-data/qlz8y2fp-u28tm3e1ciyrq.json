{
  "Topic": {
    "TopicId": "qlz8y2fp-u28tm3e1ciyrq",
    "ForumId": "10",
    "Title": "Please adjust case changing functions to skip injected code",
    "LastUpdated": "2021-06-06T00:17:36.3890371Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "44fe4d74-78be-4fd8-a3c1-771753d92ab4",
      "UserId": 335979,
      "Username": "LeFibS",
      "AvatarUrl": "https://i.imgur.com/yB42Dzeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello! \r\n\r\nIt's possible for displayed strings to contain code in the form {=DoSomething()}. Templates can even include other Templates without needing to use the mildly less intuitive Dynamic Templates.\r\n\r\n```\r\n  <template name=\"ColorRed\">#f23</template>\r\n  <template name=\"ColorGreen\">#4d2</template>\r\n\r\n<!-- ... -->\r\n\r\n  <template name=\"ColorON\">{=Template(\"ColorGreen\")}</template>\r\n  <template name=\"ColorOFF\">{=Template(\"ColorRed\")}</template>\r\n```\r\n\r\nMy code library uses this to allow game authors to quickly change colors in specific contexts while sticking to a predetermined color palette, giving a MUD-like feel.\r\n\r\nHowever, because injected code is for all intents and purposes plain text until processed at display time, it is affected by case functions such as LCase(). Code is almost always case-sensitive, as are Template names, so this generally means that code injected into strings stops working when case functions are introduced:\r\n\r\n```Error running script: Error evaluating expression 'ToString(eval(section))': Error evaluating expression 'template(\"colorred\")': No template named 'colorred'```\r\n\r\nSpecifically, the contents of Template(\"ColorOFF\") are faithfully pasted, but those contents are {=Template(\"ColorRed\")}, which consequently becomes the all-lowercase template(\"colorred\"), which produces an error as Template names are case-sensitive.\r\n\r\nThis can hypothetically be fixed if the case functions are altered to ignore all text between {= and }, thus no longer affecting injected code. If casing needs to be applied to said code, it can simply be repeated inside of that code, e.g.\r\n\r\n```\r\nThis part of the string is affected by casing, but {=LCase(\"THIS PART ISN'T\")}, so LCase() must be repeated.\r\n```\r\n\r\nIn the meantime, I'll just have to redo the code to not bump into this problem...",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello!</p>\n<p>It's possible for displayed strings to contain code in the form {=DoSomething()}. Templates can even include other Templates without needing to use the mildly less intuitive Dynamic Templates.</p>\n<pre><code>  &lt;template name=\"ColorRed\"&gt;#f23&lt;/template&gt;\n  &lt;template name=\"ColorGreen\"&gt;#4d2&lt;/template&gt;\n\n&lt;!-- ... --&gt;\n\n  &lt;template name=\"ColorON\"&gt;{=Template(\"ColorGreen\")}&lt;/template&gt;\n  &lt;template name=\"ColorOFF\"&gt;{=Template(\"ColorRed\")}&lt;/template&gt;\n</code></pre>\n<p>My code library uses this to allow game authors to quickly change colors in specific contexts while sticking to a predetermined color palette, giving a MUD-like feel.</p>\n<p>However, because injected code is for all intents and purposes plain text until processed at display time, it is affected by case functions such as LCase(). Code is almost always case-sensitive, as are Template names, so this generally means that code injected into strings stops working when case functions are introduced:</p>\n<p><code>Error running script: Error evaluating expression 'ToString(eval(section))': Error evaluating expression 'template(\"colorred\")': No template named 'colorred'</code></p>\n<p>Specifically, the contents of Template(\"ColorOFF\") are faithfully pasted, but those contents are {=Template(\"ColorRed\")}, which consequently becomes the all-lowercase template(\"colorred\"), which produces an error as Template names are case-sensitive.</p>\n<p>This can hypothetically be fixed if the case functions are altered to ignore all text between {= and }, thus no longer affecting injected code. If casing needs to be applied to said code, it can simply be repeated inside of that code, e.g.</p>\n<pre><code>This part of the string is affected by casing, but {=LCase(\"THIS PART ISN'T\")}, so LCase() must be repeated.\n</code></pre>\n<p>In the meantime, I'll just have to redo the code to not bump into this problem...</p>\n\n",
      "PostDate": "2021-06-06T00:17:36.3890371Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2f47be07-4c30-4a2d-95c1-bcc4b3696d8b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Where are the case-changing functions being used? This looks to me like the it could be resolved by putting the case changing functions outside of other code.\r\n\r\nMost likely, what you want to do is something like:\r\n<pre><code>msg (LCase (ProcessText (<i style=\"font-family: initial\">somestring</i>))</code></pre>\r\nThis runs `ProcessText` to replace all your `{=Template…}` sections with the contents of the template, and then calls `LCase` on the result, so there is no error.\r\n\r\n<hr/>\r\n\r\nIf you really want to change the case of all text that is not part of a text processor directive, you could make a function like:\r\n```\r\n<function name=\"UCasePartial\" parameters=\"input\" type=\"string\">\r\n  output = \"\"\r\n  depth = 0\r\n  for (i, 1, LengthOf(input)) {\r\n    char = Mid (input, i, 1)\r\n    if (char = \"{\") depth = depth + 1\r\n    else if (char = \"}\") depth = depth - 1\r\n    if (depth = 0) char = UCase (char)\r\n    output = output + char\r\n  }\r\n  return (output)\r\n</function>\r\n```\r\nHowever, this also does not change the case of text inside the embedded template – it just skips all text processor directives.",
      "EditableFormat": "markdown",
      "HTML": "<p>Where are the case-changing functions being used? This looks to me like the it could be resolved by putting the case changing functions outside of other code.</p>\n<p>Most likely, what you want to do is something like:</p>\n<pre><code>msg (LCase (ProcessText (<i style=\"font-family: initial\">somestring</i>))</code></pre>\n<p>This runs <code>ProcessText</code> to replace all your <code>{=Template…}</code> sections with the contents of the template, and then calls <code>LCase</code> on the result, so there is no error.</p>\n<hr>\n<p>If you really want to change the case of all text that is not part of a text processor directive, you could make a function like:</p>\n<pre><code>&lt;function name=\"UCasePartial\" parameters=\"input\" type=\"string\"&gt;\n  output = \"\"\n  depth = 0\n  for (i, 1, LengthOf(input)) {\n    char = Mid (input, i, 1)\n    if (char = \"{\") depth = depth + 1\n    else if (char = \"}\") depth = depth - 1\n    if (depth = 0) char = UCase (char)\n    output = output + char\n  }\n  return (output)\n&lt;/function&gt;\n</code></pre>\n<p>However, this also does not change the case of text inside the embedded template – it just skips all text processor directives.</p>\n\n",
      "PostDate": "2021-06-06T09:58:23.4598313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "abf0943b-1a5a-4402-85f6-79dc29d79c9e",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah. . .\r\n\r\n```LCase``` is just doing its one and only job: making ***everything*** you feed it lower case.\r\n\r\nThis is like saying, \"I eat chili with beans, but I want my stomach to skip over the beans (as if they were corn) because I don't want to fart.\"\r\n\r\nIf you don't want to fart, but you *do* (for whatever reason) want whole beans in your toilet, just put the whole beans in the toilet instead of eating them.\r\n\r\nIf mrangel's solution isn't what you seek, click \"Details\" to see my dumb idea:\r\n\r\n<details>\r\n\r\n---\r\nHere's a crazy idea, if you are only applying ```LCase``` to your strings:\r\n\r\nDon't make your template names upper case.\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"color_red\">#f23</template>\r\n  <template name=\"color_green\">#4d2</template>\r\n  <template name=\"color_on\">{=Template(\"color_green\")}</template>\r\n  <template name=\"color_off\">{=Template(\"color_red\")}</template>\r\n  <game name=\"template nesting\">\r\n    <gameid>4a25b53c-f065-428f-83c0-8e756c565ca6</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <enter type=\"script\">\r\n      msg (Template(\"color_red\"))\r\n      msg (Template(\"color_green\"))\r\n      msg (LCase(Template(\"color_on\")))\r\n      msg (LCase(Template(\"color_off\")))\r\n    </enter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah. . .</p>\n<p><code>LCase</code> is just doing its one and only job: making <strong><em>everything</em></strong> you feed it lower case.</p>\n<p>This is like saying, \"I eat chili with beans, but I want my stomach to skip over the beans (as if they were corn) because I don't want to fart.\"</p>\n<p>If you don't want to fart, but you <em>do</em> (for whatever reason) want whole beans in your toilet, just put the whole beans in the toilet instead of eating them.</p>\n<p>If mrangel's solution isn't what you seek, click \"Details\" to see my dumb idea:</p>\n<details>\n<hr>\n<p>Here's a crazy idea, if you are only applying <code>LCase</code> to your strings:</p>\n<p>Don't make your template names upper case.</p>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"color_red\"&gt;#f23&lt;/template&gt;\n  &lt;template name=\"color_green\"&gt;#4d2&lt;/template&gt;\n  &lt;template name=\"color_on\"&gt;{=Template(\"color_green\")}&lt;/template&gt;\n  &lt;template name=\"color_off\"&gt;{=Template(\"color_red\")}&lt;/template&gt;\n  &lt;game name=\"template nesting\"&gt;\n    &lt;gameid&gt;4a25b53c-f065-428f-83c0-8e756c565ca6&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;enter type=\"script\"&gt;\n      msg (Template(\"color_red\"))\n      msg (Template(\"color_green\"))\n      msg (LCase(Template(\"color_on\")))\n      msg (LCase(Template(\"color_off\")))\n    &lt;/enter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-06-06T11:45:27.9737044Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5afaddb3-0b6f-410d-8a60-6ec9327716ae",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Also, skimming over the code, wouldn't it be quicker to put:\r\n```\r\n  <template name=\"ColorON\">[ColorGreen]</template>\r\n```\r\nrather than\r\n```\r\n  <template name=\"ColorON\">{=Template(\"ColorGreen\")}</template>\r\n```\r\n\r\nI've not tried it (don't have the desktop editor), but it looks to me like the [Template] construct should work recursively. And in this case, the template substitution happens when the template is parsed, rather than when it's sent to the player, so there's no  problem with case folding.\r\n\r\n<hr/>\r\n\r\n(This question also makes me wonder why there isn't a text processor function for changing case; it seems like most of the dynamic templates in the language file are only dynamic because they call `CapFirst` ~ so having case functions (and possibly Conjugate) in the text processor would make them so much simpler)\r\n\r\nSomething like:\r\n```\r\n      <item key=\"uc:\">\r\n        game.textprocessorcommandresult = UCase (ProcessTextSection (Mid (section, 4), data))\r\n      </item>\r\n      <item key=\"lc:\">\r\n        game.textprocessorcommandresult = LCase (ProcessTextSection (Mid (section, 4), data))\r\n      </item>\r\n      <item key=\"cap:\">\r\n        game.textprocessorcommandresult = CapFirst (ProcessTextSection (Mid (section, 5), data))\r\n      </item>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Also, skimming over the code, wouldn't it be quicker to put:</p>\n<pre><code>  &lt;template name=\"ColorON\"&gt;[ColorGreen]&lt;/template&gt;\n</code></pre>\n<p>rather than</p>\n<pre><code>  &lt;template name=\"ColorON\"&gt;{=Template(\"ColorGreen\")}&lt;/template&gt;\n</code></pre>\n<p>I've not tried it (don't have the desktop editor), but it looks to me like the [Template] construct should work recursively. And in this case, the template substitution happens when the template is parsed, rather than when it's sent to the player, so there's no  problem with case folding.</p>\n<hr>\n<p>(This question also makes me wonder why there isn't a text processor function for changing case; it seems like most of the dynamic templates in the language file are only dynamic because they call <code>CapFirst</code> ~ so having case functions (and possibly Conjugate) in the text processor would make them so much simpler)</p>\n<p>Something like:</p>\n<pre><code>      &lt;item key=\"uc:\"&gt;\n        game.textprocessorcommandresult = UCase (ProcessTextSection (Mid (section, 4), data))\n      &lt;/item&gt;\n      &lt;item key=\"lc:\"&gt;\n        game.textprocessorcommandresult = LCase (ProcessTextSection (Mid (section, 4), data))\n      &lt;/item&gt;\n      &lt;item key=\"cap:\"&gt;\n        game.textprocessorcommandresult = CapFirst (ProcessTextSection (Mid (section, 5), data))\n      &lt;/item&gt;\n</code></pre>\n\n",
      "PostDate": "2021-06-06T12:35:30.4800686Z",
      "LastEditDate": "2021-06-06T12:42:14.7891453Z",
      "link": null
    },
    {
      "PostId": "cc3483e6-9c19-4967-8245-faa1364007e0",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "After testing this code while writing this post, I realized that none of this will help fight an author using ``` UCase``` or ```LCase``` on a string containing a text processor directive.\r\n\r\nYou said:\r\n> My code library uses this to allow game authors to quickly change colors in specific contexts while sticking to a predetermined color palette\r\n\r\nThat makes me think you have no idea when someone might decide to use ``` UCase``` or ```LCase``` on a string containing a text processor directive.\r\n\r\nIf that is the case, this may sound mean, buy they just need to learn (by trial and error, or by your example) when to use ``` UCase``` or ```LCase``` on a string and when **not** to use ``` UCase``` or ```LCase``` on a string.\r\n\r\nI shall attempt to explain the issue (with no fart jokes this time).\r\n\r\nThe ```ProcessText``` function has 1 parameter, which is ```text```.\r\n\r\nThe problem in your case is that ```text``` is being run through ```LCase``` by the author ***before*** sending ```text``` to ```ProcessText```.\r\n\r\nNow, ```ProcessText``` has no way to know what has happened to ```text``` (if anything) before ```text``` was passed to it.\r\n\r\nThere is no telling what got sent to ```ProcessText``` either. All sorts of things behind the scenes use ```ProcessText```.\r\n\r\nAnd we can't really add a line in ```ProcessText``` that changes specific characters back into upper case or lower case characters as needed, because **(1)** ```ProcessText``` doesn't know what anything is supposed to be and **(2)** Windows is <u>not</u> case-sensitive (neither is Quest on Windows), but the game running inside of Quest on Windows **is** case-sensitive because most of the code is running through the Chromium (open-source Chrome) browser (which is case-sensitive).\r\n\r\nWhat am I rambling on about that for?\r\n\r\nWell, I had a bright idea. I'd create a text-processor directive twice: one with an all lower-case name and the other with an all upper-case name. This would catch it no matter what an author did with ```UCase``` or ```LCase```.\r\n\r\nBut silly me!  Quest is not case-sensitive, therefore sees \"COLOR_OFF\" and \"color_off\" (as well as \"CoLOr_oFf\" and \"cOloR_OfF\") as the same text, and it throws an error about trying to create something that already exists.  Ha ha! I am silly!\r\n\r\nSo, anyway, I tried all the things I could think of to intercept an author using ```UCase``` or ```LCase``` on a string containing a text processor directive before sending it to ```ProcessText``` so Quest could be updated to handle such things by default, but I don't think it can be done.\r\n\r\nI haven't tested mrangel's code, but it looks like you could modify ```UCase``` and ```LCase``` in your library, modifying each as per mrangel's example if you wanted to, and then you wouldn't need to explain any extra custom steps to those using your library.\r\n\r\n---\r\nOr, you could add custom text processor directives.\r\n\r\nhttps://docs.textadventures.co.uk/quest/text_processor.html#extending\r\n\r\n---\r\nHere is one example game.\r\n\r\nI set the game's default text color to red. I created the ```ColorGreen``` template (just to try to stick close to your method).\r\n\r\nI created two new text processor directives: ```color_on``` and ```color_off```.\r\n\r\nHere is an example line of code to print text with it:\r\n\r\n```msg (\"{color_on}This color is on,{color_off}but this color is off.\")```\r\n\r\nHere is an example room description that works as expected:\r\n\r\n```\r\n{color_on}{=LCase(\"THIS IS IN COLOR.\")}{color_off} BUT THIS IS NOT IN COLOR.\r\n\r\n{color_on}{=UCase(\"this is in color.\")}{color_off} but this is not in color.\r\n\r\n{color_on}This is a test to see if the color will work after a line break.\r\n\r\nIf this is still in color, it worked. {color_off}The color is now off.\r\n```\r\n\r\n**EXAMPLE GAME**\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"ColorRed\">#f23</template>\r\n  <template name=\"ColorGreen\">#4d2</template>\r\n  <template name=\"ColorON\">[ColorGreen]</template>\r\n  <template name=\"ColorOFF\">[ColorRed]</template>\r\n  <game name=\"template nesting\">\r\n    <gameid>4a25b53c-f065-428f-83c0-8e756c565ca6</gameid>\r\n    <version>0.2</version>\r\n    <firstpublished>2021</firstpublished>\r\n    <defaultforeground>Red</defaultforeground>\r\n    <start type=\"script\"><![CDATA[\r\n      game.textprocessorcommands = game.textprocessorcommands\r\n      scr => {\r\n        s = Mid(section, 6)\r\n        s = Replace (s, \"COLOR_ON\", \"color_on\")\r\n        game.textprocessorcommandresult = \"<span style=\\\"color:\" + Template (\"ColorGreen\") + \"\\\">\"\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"color_on\", scr)\r\n      scr => {\r\n        s = Mid(section, 6)\r\n        s = Replace (s, \"COLOR_OFF\", \"color_off\")\r\n        game.textprocessorcommandresult = \"</span>\"\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"color_off\", scr)\r\n    ]]></start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[{color_on}{=LCase(\"THIS IS IN COLOR.\")}{color_off} BUT THIS IS NOT IN COLOR.<br/><br/>{color_on}{=UCase(\"this is in color.\")}{color_off} but this is not in color.<br/><br/>{color_on}This is a test to see if the color will work after a line break.<br/><br/>If this is still in color, it worked. {color_off}The color is now off.]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>After testing this code while writing this post, I realized that none of this will help fight an author using <code>UCase</code> or <code>LCase</code> on a string containing a text processor directive.</p>\n<p>You said:</p>\n<blockquote>\n<p>My code library uses this to allow game authors to quickly change colors in specific contexts while sticking to a predetermined color palette</p>\n</blockquote>\n<p>That makes me think you have no idea when someone might decide to use <code>UCase</code> or <code>LCase</code> on a string containing a text processor directive.</p>\n<p>If that is the case, this may sound mean, buy they just need to learn (by trial and error, or by your example) when to use <code>UCase</code> or <code>LCase</code> on a string and when <strong>not</strong> to use <code>UCase</code> or <code>LCase</code> on a string.</p>\n<p>I shall attempt to explain the issue (with no fart jokes this time).</p>\n<p>The <code>ProcessText</code> function has 1 parameter, which is <code>text</code>.</p>\n<p>The problem in your case is that <code>text</code> is being run through <code>LCase</code> by the author <strong><em>before</em></strong> sending <code>text</code> to <code>ProcessText</code>.</p>\n<p>Now, <code>ProcessText</code> has no way to know what has happened to <code>text</code> (if anything) before <code>text</code> was passed to it.</p>\n<p>There is no telling what got sent to <code>ProcessText</code> either. All sorts of things behind the scenes use <code>ProcessText</code>.</p>\n<p>And we can't really add a line in <code>ProcessText</code> that changes specific characters back into upper case or lower case characters as needed, because <strong>(1)</strong> <code>ProcessText</code> doesn't know what anything is supposed to be and <strong>(2)</strong> Windows is <u>not</u> case-sensitive (neither is Quest on Windows), but the game running inside of Quest on Windows <strong>is</strong> case-sensitive because most of the code is running through the Chromium (open-source Chrome) browser (which is case-sensitive).</p>\n<p>What am I rambling on about that for?</p>\n<p>Well, I had a bright idea. I'd create a text-processor directive twice: one with an all lower-case name and the other with an all upper-case name. This would catch it no matter what an author did with <code>UCase</code> or <code>LCase</code>.</p>\n<p>But silly me!  Quest is not case-sensitive, therefore sees \"COLOR_OFF\" and \"color_off\" (as well as \"CoLOr_oFf\" and \"cOloR_OfF\") as the same text, and it throws an error about trying to create something that already exists.  Ha ha! I am silly!</p>\n<p>So, anyway, I tried all the things I could think of to intercept an author using <code>UCase</code> or <code>LCase</code> on a string containing a text processor directive before sending it to <code>ProcessText</code> so Quest could be updated to handle such things by default, but I don't think it can be done.</p>\n<p>I haven't tested mrangel's code, but it looks like you could modify <code>UCase</code> and <code>LCase</code> in your library, modifying each as per mrangel's example if you wanted to, and then you wouldn't need to explain any extra custom steps to those using your library.</p>\n<hr>\n<p>Or, you could add custom text processor directives.</p>\n<p>https://docs.textadventures.co.uk/quest/text_processor.html#extending</p>\n<hr>\n<p>Here is one example game.</p>\n<p>I set the game's default text color to red. I created the <code>ColorGreen</code> template (just to try to stick close to your method).</p>\n<p>I created two new text processor directives: <code>color_on</code> and <code>color_off</code>.</p>\n<p>Here is an example line of code to print text with it:</p>\n<p><code>msg (\"{color_on}This color is on,{color_off}but this color is off.\")</code></p>\n<p>Here is an example room description that works as expected:</p>\n<pre><code>{color_on}{=LCase(\"THIS IS IN COLOR.\")}{color_off} BUT THIS IS NOT IN COLOR.\n\n{color_on}{=UCase(\"this is in color.\")}{color_off} but this is not in color.\n\n{color_on}This is a test to see if the color will work after a line break.\n\nIf this is still in color, it worked. {color_off}The color is now off.\n</code></pre>\n<p><strong>EXAMPLE GAME</strong></p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"ColorRed\"&gt;#f23&lt;/template&gt;\n  &lt;template name=\"ColorGreen\"&gt;#4d2&lt;/template&gt;\n  &lt;template name=\"ColorON\"&gt;[ColorGreen]&lt;/template&gt;\n  &lt;template name=\"ColorOFF\"&gt;[ColorRed]&lt;/template&gt;\n  &lt;game name=\"template nesting\"&gt;\n    &lt;gameid&gt;4a25b53c-f065-428f-83c0-8e756c565ca6&lt;/gameid&gt;\n    &lt;version&gt;0.2&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n    &lt;defaultforeground&gt;Red&lt;/defaultforeground&gt;\n    &lt;start type=\"script\"&gt;&lt;![CDATA[\n      game.textprocessorcommands = game.textprocessorcommands\n      scr =&gt; {\n        s = Mid(section, 6)\n        s = Replace (s, \"COLOR_ON\", \"color_on\")\n        game.textprocessorcommandresult = \"&lt;span style=\\\"color:\" + Template (\"ColorGreen\") + \"\\\"&gt;\"\n      }\n      dictionary add (game.textprocessorcommands, \"color_on\", scr)\n      scr =&gt; {\n        s = Mid(section, 6)\n        s = Replace (s, \"COLOR_OFF\", \"color_off\")\n        game.textprocessorcommandresult = \"&lt;/span&gt;\"\n      }\n      dictionary add (game.textprocessorcommands, \"color_off\", scr)\n    ]]&gt;&lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[{color_on}{=LCase(\"THIS IS IN COLOR.\")}{color_off} BUT THIS IS NOT IN COLOR.&lt;br/&gt;&lt;br/&gt;{color_on}{=UCase(\"this is in color.\")}{color_off} but this is not in color.&lt;br/&gt;&lt;br/&gt;{color_on}This is a test to see if the color will work after a line break.&lt;br/&gt;&lt;br/&gt;If this is still in color, it worked. {color_off}The color is now off.]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-06-06T13:00:38.7028007Z",
      "LastEditDate": "2021-06-06T13:31:23.6489812Z",
      "link": null
    },
    {
      "PostId": "41ad02df-38ba-4e1d-8128-70cb4ef19e15",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> This question also makes me wonder why there isn't a text processor function for changing case; it seems like most of the dynamic templates in the language file are only dynamic because they call ```CapFirst``` ~ so having case functions (and possibly ```Conjugate```) in the text processor would make them so much simpler\r\n\r\nI was thinking this, too.\r\n\r\nAfter I wrote the last post (which I was writing while you were writing your last post), I decided I was about to create text processor directives for upper- and lower-case.\r\n\r\nI'm going to test it out now. (I am thinking there is a 50% chance it will alter the text of any nested text-processor directives and mess everything all up, though.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>This question also makes me wonder why there isn't a text processor function for changing case; it seems like most of the dynamic templates in the language file are only dynamic because they call <code>CapFirst</code> ~ so having case functions (and possibly <code>Conjugate</code>) in the text processor would make them so much simpler</p>\n</blockquote>\n<p>I was thinking this, too.</p>\n<p>After I wrote the last post (which I was writing while you were writing your last post), I decided I was about to create text processor directives for upper- and lower-case.</p>\n<p>I'm going to test it out now. (I am thinking there is a 50% chance it will alter the text of any nested text-processor directives and mess everything all up, though.)</p>\n\n",
      "PostDate": "2021-06-06T13:04:32.6763766Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d9b5d665-ec45-4384-8175-84c9660a6d56",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Also, skimming over the code, wouldn't it be quicker to put: [...] rather than [...]\r\n>\r\n> I've not tried it (don't have the desktop editor), but it looks to me like the [Template] construct should work recursively. And in this case, the template substitution happens when the template is parsed, rather than when it's sent to the player, so there's no problem with case folding.\r\n\r\nYes, sir. I just tested and approved this, and I updated my last example game using it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Also, skimming over the code, wouldn't it be quicker to put: [...] rather than [...]</p>\n<p>I've not tried it (don't have the desktop editor), but it looks to me like the [Template] construct should work recursively. And in this case, the template substitution happens when the template is parsed, rather than when it's sent to the player, so there's no problem with case folding.</p>\n</blockquote>\n<p>Yes, sir. I just tested and approved this, and I updated my last example game using it.</p>\n\n",
      "PostDate": "2021-06-06T13:11:10.7061813Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e5257c8e-3b03-4cf2-9e07-4d8428bd9660",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**UPDATED**\r\n\r\n*Room description*\r\n\r\n```\r\n{color_on}{lc:THIS IS IN COLOR.}{color_off} BUT THIS IS NOT IN COLOR.\r\n\r\n{color_on}{uc:this is in color.}{color_off} but this is not in color.\r\n\r\n{color_on}{cap:this} is a test to see if the color will work after a line break.\r\n\r\nIf this is still in color, it worked. {color_off}The color is now off.\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/120926103-2b189e00-c6a1-11eb-927b-17ed5b76851a.png)\r\n\r\n**EXAMPLE GAME**\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"ColorGreen\">#4d2</template>\r\n  <template name=\"ColorON\">[ColorGreen]</template>\r\n  <game name=\"template nesting\">\r\n    <gameid>4a25b53c-f065-428f-83c0-8e756c565ca6</gameid>\r\n    <version>0.4</version>\r\n    <firstpublished>2021</firstpublished>\r\n    <defaultforeground>Red</defaultforeground>\r\n    <start type=\"script\"><![CDATA[\r\n      game.textprocessorcommands = game.textprocessorcommands\r\n      scr => {\r\n        s = Mid(section, 6)\r\n        s = Replace (s, \"COLOR_ON\", \"color_on\")\r\n        // ^^^ just in case someone makes it upper-case before sending to ProcessText\r\n        game.textprocessorcommandresult = \"<span style=\\\"color:\" + Template (\"ColorGreen\") + \"\\\">\"\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"color_on\", scr)\r\n      scr => {\r\n        s = Mid(section, 6)\r\n        s = Replace (s, \"COLOR_OFF\", \"color_off\")\r\n        // ^^^ just in case someone makes it upper-case before sending to ProcessText\r\n        game.textprocessorcommandresult = \"</span>\"\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"color_off\", scr)\r\n      scr => {\r\n        s = Mid (section, 4)\r\n        s = ProcessTextSection (s, data)\r\n        s = UCase (s)\r\n        game.textprocessorcommandresult = s\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"uc\", scr)\r\n      scr => {\r\n        s = Mid(section, 4)\r\n        s = LCase(s)\r\n        game.textprocessorcommandresult = s\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"lc\", scr)\r\n      scr => {\r\n        s = Mid(section, 5)\r\n        s = CapFirst(s)\r\n        game.textprocessorcommandresult = s\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"cap\", scr)\r\n    ]]></start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[{color_on}{lc:THIS IS IN COLOR.}{color_off} BUT THIS IS NOT IN COLOR.<br/><br/>{color_on}{uc:this is in color.}{color_off} but this is not in color.<br/><br/>{color_on}{cap:this} is a test to see if the color will work after a line break.<br/><br/>If this is still in color, it worked. {color_off}The color is now off.]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>UPDATED</strong></p>\n<p><em>Room description</em></p>\n<pre><code>{color_on}{lc:THIS IS IN COLOR.}{color_off} BUT THIS IS NOT IN COLOR.\n\n{color_on}{uc:this is in color.}{color_off} but this is not in color.\n\n{color_on}{cap:this} is a test to see if the color will work after a line break.\n\nIf this is still in color, it worked. {color_off}The color is now off.\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/120926103-2b189e00-c6a1-11eb-927b-17ed5b76851a.png\" alt=\"image\"></p>\n<p><strong>EXAMPLE GAME</strong></p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"ColorGreen\"&gt;#4d2&lt;/template&gt;\n  &lt;template name=\"ColorON\"&gt;[ColorGreen]&lt;/template&gt;\n  &lt;game name=\"template nesting\"&gt;\n    &lt;gameid&gt;4a25b53c-f065-428f-83c0-8e756c565ca6&lt;/gameid&gt;\n    &lt;version&gt;0.4&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n    &lt;defaultforeground&gt;Red&lt;/defaultforeground&gt;\n    &lt;start type=\"script\"&gt;&lt;![CDATA[\n      game.textprocessorcommands = game.textprocessorcommands\n      scr =&gt; {\n        s = Mid(section, 6)\n        s = Replace (s, \"COLOR_ON\", \"color_on\")\n        // ^^^ just in case someone makes it upper-case before sending to ProcessText\n        game.textprocessorcommandresult = \"&lt;span style=\\\"color:\" + Template (\"ColorGreen\") + \"\\\"&gt;\"\n      }\n      dictionary add (game.textprocessorcommands, \"color_on\", scr)\n      scr =&gt; {\n        s = Mid(section, 6)\n        s = Replace (s, \"COLOR_OFF\", \"color_off\")\n        // ^^^ just in case someone makes it upper-case before sending to ProcessText\n        game.textprocessorcommandresult = \"&lt;/span&gt;\"\n      }\n      dictionary add (game.textprocessorcommands, \"color_off\", scr)\n      scr =&gt; {\n        s = Mid (section, 4)\n        s = ProcessTextSection (s, data)\n        s = UCase (s)\n        game.textprocessorcommandresult = s\n      }\n      dictionary add (game.textprocessorcommands, \"uc\", scr)\n      scr =&gt; {\n        s = Mid(section, 4)\n        s = LCase(s)\n        game.textprocessorcommandresult = s\n      }\n      dictionary add (game.textprocessorcommands, \"lc\", scr)\n      scr =&gt; {\n        s = Mid(section, 5)\n        s = CapFirst(s)\n        game.textprocessorcommandresult = s\n      }\n      dictionary add (game.textprocessorcommands, \"cap\", scr)\n    ]]&gt;&lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[{color_on}{lc:THIS IS IN COLOR.}{color_off} BUT THIS IS NOT IN COLOR.&lt;br/&gt;&lt;br/&gt;{color_on}{uc:this is in color.}{color_off} but this is not in color.&lt;br/&gt;&lt;br/&gt;{color_on}{cap:this} is a test to see if the color will work after a line break.&lt;br/&gt;&lt;br/&gt;If this is still in color, it worked. {color_off}The color is now off.]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-06-06T13:29:52.1773963Z",
      "LastEditDate": "2021-06-15T02:34:11.5170394Z",
      "link": null
    },
    {
      "PostId": "c734a8ad-89dd-4a95-a167-371aa30a068a",
      "UserId": 335979,
      "Username": "LeFibS",
      "AvatarUrl": "https://i.imgur.com/yB42Dzeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, I forgot all about this topic! Oops.\r\n\r\nI wasn't aware that I could call ProcessText() at will. This will probably be very useful, though I think it will be more elegant in this situation to use the [Template] notation (which I'd completely forgotten was a thing, though I'm sure it was brought to my attention ages ago.) If [Template] processes before LCase() as attested, then it should work just fine for most foreseeable situations in this library.\r\n\r\nThanks for the feedback!",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, I forgot all about this topic! Oops.</p>\n<p>I wasn't aware that I could call ProcessText() at will. This will probably be very useful, though I think it will be more elegant in this situation to use the [Template] notation (which I'd completely forgotten was a thing, though I'm sure it was brought to my attention ages ago.) If [Template] processes before LCase() as attested, then it should work just fine for most foreseeable situations in this library.</p>\n<p>Thanks for the feedback!</p>\n\n",
      "PostDate": "2021-06-14T21:22:04.1873488Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2441713d-7ec2-46e3-a5c6-57298d63be12",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@KV\r\n\r\nI only just noticed, but you have:\r\n>       scr => {\r\n>         s = Mid(section, 4)\r\n>         s = UCase(s)\r\n>         game.textprocessorcommandresult = s\r\n>       }\r\n>      dictionary add (game.textprocessorcommands, \"uc\", scr)\r\n\r\nA user typing `{cap:{lamp.alias}}` probably wants `Magic lamp`, not `{Lamp.alias}` (which then comes out as unparsed code because the object name doesn't match)\r\n\r\nWouldn't it make more sense to put:\r\n<pre><code>      scr => {\r\n        s = Mid (section, 4)\r\n        <b style=\"color: green\">s = ProcessTextSection (s, data)</b>\r\n        s = UCase (s)\r\n        game.textprocessorcommandresult = s\r\n      }\r\n      dictionary add (game.textprocessorcommands, \"uc\", scr)</code></pre>\r\nThat way, any other text processor commands in the text are run *before* uppercasing the result. And similar for the other functions. Although I think it would make more sense for the case changing functions to skip HTML, so that `{cap:{object:lamp}}` will capitalise the first letter of the name rather than the generated `<`.",
      "EditableFormat": "markdown",
      "HTML": "<p>@KV</p>\n<p>I only just noticed, but you have:</p>\n<blockquote>\n<pre><code>  scr =&gt; {\n    s = Mid(section, 4)\n    s = UCase(s)\n    game.textprocessorcommandresult = s\n  }\n dictionary add (game.textprocessorcommands, \"uc\", scr)\n</code></pre>\n</blockquote>\n<p>A user typing <code>{cap:{lamp.alias}}</code> probably wants <code>Magic lamp</code>, not <code>{Lamp.alias}</code> (which then comes out as unparsed code because the object name doesn't match)</p>\n<p>Wouldn't it make more sense to put:</p>\n<pre><code>      scr =&gt; {\n        s = Mid (section, 4)\n        <b style=\"color: green\">s = ProcessTextSection (s, data)</b>\n        s = UCase (s)\n        game.textprocessorcommandresult = s\n      }\n      dictionary add (game.textprocessorcommands, \"uc\", scr)</code></pre>\n<p>That way, any other text processor commands in the text are run <em>before</em> uppercasing the result. And similar for the other functions. Although I think it would make more sense for the case changing functions to skip HTML, so that <code>{cap:{object:lamp}}</code> will capitalise the first letter of the name rather than the generated <code>&lt;</code>.</p>\n\n",
      "PostDate": "2021-06-15T00:34:09.271308Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ab474164-62e1-4a18-a348-c7e9f7945272",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I only just noticed, but you have [...] Wouldn't it make more sense to put [...]\r\n\r\nMy Magic 8-Ball says: ```Signs point to yes.```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I only just noticed, but you have [...] Wouldn't it make more sense to put [...]</p>\n</blockquote>\n<p>My Magic 8-Ball says: <code>Signs point to yes.</code></p>\n\n",
      "PostDate": "2021-06-15T02:05:32.1596913Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82cad780-bb79-424c-85ac-5689c2a9f9cf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nscr => {\r\n  s = Mid (section, 4)\r\n  s = ProcessTextSection (s, data)\r\n  s = SafeUCase (s)\r\n  game.textprocessorcommandresult = s\r\n}\r\ndictionary add (game.textprocessorcommands, \"uc\", scr)\r\nscr => {\r\n  s = Mid (section, 4)\r\n  s = ProcessTextSection (s, data)\r\n  s = SafeLCase (s)\r\n  game.textprocessorcommandresult = s\r\n}\r\ndictionary add (game.textprocessorcommands, \"lc\", scr)\r\nscr => {\r\n  s = Mid (section, 5)\r\n  s = ProcessTextSection (s, data)\r\n  s = SafeCapFirst (s)\r\n  game.textprocessorcommandresult = s\r\n}\r\ndictionary add (game.textprocessorcommands, \"cap\", scr)\r\n```\r\nand…\r\n```\r\n<function name=\"SafeUCase\" parameters=\"input\" type=\"string\">\r\n  output = \"\"\r\n  pos = 1\r\n  while (pos <= LengthOf (input)) {\r\n    start = pos\r\n    if (IsRegexMatch (\"^.{\" + (pos-1) + \"}<\\\\w\", input)) {\r\n      pos = FindTagEnd (input, pos)\r\n      if (pos = 0) {\r\n        // tag with no \">\" isn't a real tag\r\n        return (output + UCase (Mid (input, start)))\r\n      }\r\n      pos = pos + 1\r\n      output = output + Mid (input, start, pos - start)\r\n    }\r\n    else {\r\n      pos = Instr (pos, input, \"<\")\r\n      if (pos = 0) {\r\n        // no more \"<\" in the string\r\n        return (output + UCase (Mid (input, start)))\r\n      }\r\n      output = output + UCase (Mid (input, start, pos))\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n\r\n<function name=\"SafeLCase\" parameters=\"input\" type=\"string\">\r\n  output = \"\"\r\n  pos = 1\r\n  while (pos <= LengthOf (input)) {\r\n    start = pos\r\n    while (IsRegexMatch (\"^.{\" + (pos-1) + \"}<\\\\w\", input)) {\r\n      pos = FindTagEnd (input, pos)\r\n      if (pos = 0) {\r\n        // tag with no \">\" isn't a real tag\r\n        return (output + LCase (Mid (input, start)))\r\n      }\r\n      pos = pos + 1\r\n      output = output + Mid (input, start, pos - start)\r\n    }\r\n    else {\r\n      pos = Instr (pos, input, \"<\")\r\n      if (pos = 0) {\r\n        // no more \"<\" in the string\r\n        return (output + LCase (Mid (input, start)))\r\n      }\r\n      output = output + LCase (Mid (input, start, pos))\r\n    }\r\n  }\r\n  return (output)\r\n</function>\r\n\r\n<function name=\"SafeCapFirst\" parameters=\"s\" type=\"string\">\r\n  pos = 1\r\n  while (IsRegexMatch (\"^.{\" + (pos-1) + \"}<\\\\w\", input)) {\r\n    found = FindTagEnd (s, pos)\r\n    if (found = 0) {\r\n      return (Left (s, pos) + UCase (Mid (s, pos+1, 1)) + Mid (s, pos+2))\r\n    }\r\n    else {\r\n      pos = found + 1\r\n    }\r\n  }\r\n  return (Left (s, pos-1) + UCase (Mid (s, pos, 1)) + Mid (s, pos+1))\r\n</function>\r\n\r\n<function name=\"FindTagEnd\" parameters=\"s, pos\" type=\"int\">\r\n  // finds the first \">\" in a string that is not inside a quoted string\r\n  quote = \"\"\r\n  if (not IsDefined (\"pos\")) {\r\n    pos = 1\r\n  }\r\n  for (i, pos, LengthOf (s)) {\r\n    char = Mid (s, i, 1)\r\n    switch (char) {\r\n      case (\">\") {\r\n        return (i)\r\n      }\r\n      case (\"\\\"\", \"'\") {\r\n        if (quote = \"\") {\r\n          quote = char\r\n        }\r\n        else if (quote = char) {\r\n          quote = \"\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (0)\r\n</function>\r\n```\r\nThat version of CapFirst is still a bit wonky… I think in most cases, a naive user might expect `CapFirst(\"\\\"hello!\\\" he cried\")` to give you `\"Hello!\" he cried` – capitalising the first non-punctuation character.\r\n\r\nBut that's a harder task than you might think. Here's a guess:\r\n```\r\n<function name=\"IntuitiveCapFirst\" parameters=\"s\" type=\"string\">\r\n  regex = \"^(?<left>(<\\\\w([^=\\\"'>]+|=[^>'\\\"]|=\\\"[^\\\"]\\\"|='[^']')*>|<(?!\\\\w|([^=\\\"'>]+|=[^>'\\\"]|=\\\"[^\\\"]\\\"|='[^']')*>)|[^\\\\w\\\\d<]+)*)(?<right>.*)$\"\r\n  if (IsRegexMatch (regex, s, \"SplitAtFirstVisibleCharacter\")) {\r\n    parts = Populate (regex, s, \"SplitAtFirstVisibleCharacter\")\r\n    return (DictionaryItem (parts, \"left\") + CapFirst (DictionaryItem (parts, \"left\")))\r\n  }\r\n  else {\r\n    // I don't think it should be possible to get here, unless I made a mistake in the regex\r\n    return (CapFirst (s))\r\n  }\r\n</function>\r\n```\r\n(not tested yet)\r\nThis *should* capitalise the first letter or number that isn't part of an HTML tag. It's more complex than it needs to be because it doesn't just search for the first `>` after the `<`, but understands that you can have things like `<img alt=\"Some string that contains a > or <\" />`",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>scr =&gt; {\n  s = Mid (section, 4)\n  s = ProcessTextSection (s, data)\n  s = SafeUCase (s)\n  game.textprocessorcommandresult = s\n}\ndictionary add (game.textprocessorcommands, \"uc\", scr)\nscr =&gt; {\n  s = Mid (section, 4)\n  s = ProcessTextSection (s, data)\n  s = SafeLCase (s)\n  game.textprocessorcommandresult = s\n}\ndictionary add (game.textprocessorcommands, \"lc\", scr)\nscr =&gt; {\n  s = Mid (section, 5)\n  s = ProcessTextSection (s, data)\n  s = SafeCapFirst (s)\n  game.textprocessorcommandresult = s\n}\ndictionary add (game.textprocessorcommands, \"cap\", scr)\n</code></pre>\n<p>and…</p>\n<pre><code>&lt;function name=\"SafeUCase\" parameters=\"input\" type=\"string\"&gt;\n  output = \"\"\n  pos = 1\n  while (pos &lt;= LengthOf (input)) {\n    start = pos\n    if (IsRegexMatch (\"^.{\" + (pos-1) + \"}&lt;\\\\w\", input)) {\n      pos = FindTagEnd (input, pos)\n      if (pos = 0) {\n        // tag with no \"&gt;\" isn't a real tag\n        return (output + UCase (Mid (input, start)))\n      }\n      pos = pos + 1\n      output = output + Mid (input, start, pos - start)\n    }\n    else {\n      pos = Instr (pos, input, \"&lt;\")\n      if (pos = 0) {\n        // no more \"&lt;\" in the string\n        return (output + UCase (Mid (input, start)))\n      }\n      output = output + UCase (Mid (input, start, pos))\n    }\n  }\n  return (output)\n&lt;/function&gt;\n\n&lt;function name=\"SafeLCase\" parameters=\"input\" type=\"string\"&gt;\n  output = \"\"\n  pos = 1\n  while (pos &lt;= LengthOf (input)) {\n    start = pos\n    while (IsRegexMatch (\"^.{\" + (pos-1) + \"}&lt;\\\\w\", input)) {\n      pos = FindTagEnd (input, pos)\n      if (pos = 0) {\n        // tag with no \"&gt;\" isn't a real tag\n        return (output + LCase (Mid (input, start)))\n      }\n      pos = pos + 1\n      output = output + Mid (input, start, pos - start)\n    }\n    else {\n      pos = Instr (pos, input, \"&lt;\")\n      if (pos = 0) {\n        // no more \"&lt;\" in the string\n        return (output + LCase (Mid (input, start)))\n      }\n      output = output + LCase (Mid (input, start, pos))\n    }\n  }\n  return (output)\n&lt;/function&gt;\n\n&lt;function name=\"SafeCapFirst\" parameters=\"s\" type=\"string\"&gt;\n  pos = 1\n  while (IsRegexMatch (\"^.{\" + (pos-1) + \"}&lt;\\\\w\", input)) {\n    found = FindTagEnd (s, pos)\n    if (found = 0) {\n      return (Left (s, pos) + UCase (Mid (s, pos+1, 1)) + Mid (s, pos+2))\n    }\n    else {\n      pos = found + 1\n    }\n  }\n  return (Left (s, pos-1) + UCase (Mid (s, pos, 1)) + Mid (s, pos+1))\n&lt;/function&gt;\n\n&lt;function name=\"FindTagEnd\" parameters=\"s, pos\" type=\"int\"&gt;\n  // finds the first \"&gt;\" in a string that is not inside a quoted string\n  quote = \"\"\n  if (not IsDefined (\"pos\")) {\n    pos = 1\n  }\n  for (i, pos, LengthOf (s)) {\n    char = Mid (s, i, 1)\n    switch (char) {\n      case (\"&gt;\") {\n        return (i)\n      }\n      case (\"\\\"\", \"'\") {\n        if (quote = \"\") {\n          quote = char\n        }\n        else if (quote = char) {\n          quote = \"\"\n        }\n      }\n    }\n  }\n  return (0)\n&lt;/function&gt;\n</code></pre>\n<p>That version of CapFirst is still a bit wonky… I think in most cases, a naive user might expect <code>CapFirst(\"\\\"hello!\\\" he cried\")</code> to give you <code>\"Hello!\" he cried</code> – capitalising the first non-punctuation character.</p>\n<p>But that's a harder task than you might think. Here's a guess:</p>\n<pre><code>&lt;function name=\"IntuitiveCapFirst\" parameters=\"s\" type=\"string\"&gt;\n  regex = \"^(?&lt;left&gt;(&lt;\\\\w([^=\\\"'&gt;]+|=[^&gt;'\\\"]|=\\\"[^\\\"]\\\"|='[^']')*&gt;|&lt;(?!\\\\w|([^=\\\"'&gt;]+|=[^&gt;'\\\"]|=\\\"[^\\\"]\\\"|='[^']')*&gt;)|[^\\\\w\\\\d&lt;]+)*)(?&lt;right&gt;.*)$\"\n  if (IsRegexMatch (regex, s, \"SplitAtFirstVisibleCharacter\")) {\n    parts = Populate (regex, s, \"SplitAtFirstVisibleCharacter\")\n    return (DictionaryItem (parts, \"left\") + CapFirst (DictionaryItem (parts, \"left\")))\n  }\n  else {\n    // I don't think it should be possible to get here, unless I made a mistake in the regex\n    return (CapFirst (s))\n  }\n&lt;/function&gt;\n</code></pre>\n<p>(not tested yet)<br>\nThis <em>should</em> capitalise the first letter or number that isn't part of an HTML tag. It's more complex than it needs to be because it doesn't just search for the first <code>&gt;</code> after the <code>&lt;</code>, but understands that you can have things like <code>&lt;img alt=\"Some string that contains a &gt; or &lt;\" /&gt;</code></p>\n\n",
      "PostDate": "2021-06-15T10:22:27.7946638Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
