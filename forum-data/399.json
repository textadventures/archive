{
  "Topic": {
    "TopicId": "399",
    "ForumId": "10",
    "Title": "null synonyms",
    "LastUpdated": "2004-05-24T11:03:57+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "2677",
      "UserId": 0,
      "Username": "billchelonis",
      "UserAvatar": null,
      "UserGravatar": "c392dd292ff05b8f98616cbfecf7b77b",
      "EditableText": "I saw in someone else's game sourcecode they used a null synonym. In other words, changing words like \"of, to, the\" to a blank string via synonyms. \n\ni.e. \n[code:1rtr5vuo]\ndefine synonyms\n      on; the; of = \nend define\n[/code:1rtr5vuo]\n\n... I have found this doesn't really work too well though, and if you try it in the QDK editor itself vs. a text editor you'll find that QDK doesn't like that empty string, so here is my workaround for this. Setup a synonym for an actual word named \"null\" :\n\n[code:1rtr5vuo]\ndefine synonyms\n      on; the; of = null\nend define\n[/code:1rtr5vuo]\n...and then write up a \"beforeturn\" script like this:\n\n[code:1rtr5vuo]\nbeforeturn &#123;\n\t\tif &#40; $instr&#40;#quest&#46;command#;null_&#41;$ &gt;= 1 &#41; then &#123;\n\t\t\t' REM see synonym NULL where on = NULL&#46; this is for things like &quot;put hook on rope&quot; which changes to &quot;put hook rope&quot;\n\t\t\tset string &lt;substring; null_&gt;\n\t\t\tset numeric &lt;p1; $instr&#40;#quest&#46;command#;#substring#&#41;$&gt;\n\t\t\tdec &lt;p1&gt;\n\t\t\tset string &lt;s1; $left&#40;#quest&#46;command#;%p1%&#41;$&gt;\n\t\t\tinc &lt;p1; $lengthof&#40;#substring#&#41;$&gt;\n\t\t\tset string &lt;s2; $mid&#40;#quest&#46;command#;%p1%&#41;$&gt;\n\t\t\tset string &lt;quest&#46;command; #s1# #s2#&gt;\n\t\t\tset string &lt;quest&#46;originalcommand; #s1# #s2#&gt;\n\t\t\t' REM stop quest&#46;command and then re-run it&#46; otherwise the above work is no good\n\t\t\tdontprocess\n\t\t\texec &lt;#quest&#46;command#&gt;\n\t\t&#125;\t\t\n\t&#125;\n[/code:1rtr5vuo]\n\n\nWhat happens is the script will loop through the quest.command every time it encounters the word \"null\" in the command, and wipes it out and re-runs the command until there are no \"null\" words. So this way you can really eliminate out some synonyms or parts of object aliases that used words like \"of, the, to, on\" etc. and simplify things.\n\nNow, where this really comes in useful is in your custom commands because now you can make a custom command that has:\n\nput #@mything# #@myotherthing#\n\ninstead of...\n\nput #@mything# on #@myotherthing#\n\nIt wouldn't be a command syntax the player would necessarily be aware of, or even make much sense. What it does, though is simplify your code a little (internally and behind the scenes). \n\nIn the above example, I wrote a routine to put a rope over a wall, and aliased out everything so the command is really shortened to \"put rope wall.\" Now for putting objects IN things, I probably will have a different command for that or allow the word \"IN\" to stay vs. nulling it out. \n\nAnyhow just something I thought I'd share. Not sure if this is the best way to null out words you don't want, but it seems to work better than putting in an empty string synonym (at least since QDK doesn't seem to like those).\n\nOne thing to be careful of though. If you null out the word \"on\" then later want to have a \"wear\" command (i.e. put on clothes), the player's command of \"put on jacket\" changes to \"put jacket\" (which in some games means \"drop jacket\"). To avoid this you should probably add a synonym above the \"null\" synonym to change \"put on\" to \"wear\" :\n\n[code:1rtr5vuo]\ndefine synonyms\n      put on = wear\n      on; the; of = null\nend define\n[/code:1rtr5vuo]\n\nIf you do it in that order, it catches the \"on\" before it can nullify \"on\" and the player command for \"put on jacket\" is processed correctly.\n\nThe downside is if you wanted to allow the player to \"put jacket on\" then you're back to the old \"put jacket\" (i.e. \"drop jacket\" interpretation). However you could write up your own \"put #@mything#\" routine and query the player \"Where do you wish to put #mything#?\"\n\nOf course in my code above I used the substring \"null_\" where the underscore means the code is looking for the word null with a space after it. So it would not nullify out the last null by itself at the end of a command. So you could have a custom command for \"put #@mything# null\" and have it execute the \"wear @#mything#\" command, and allow just \"put #@mything#\" to still act as a drop object command.",
      "EditableFormat": "bbcode",
      "HTML": "I saw in someone else's game sourcecode they used a null synonym. In other words, changing words like \"of, to, the\" to a blank string via synonyms. <br/><br/>i.e. <br/><pre><code><br/>define synonyms<br/>      on; the; of = <br/>end define<br/></code></pre><br/><br/>... I have found this doesn't really work too well though, and if you try it in the QDK editor itself vs. a text editor you'll find that QDK doesn't like that empty string, so here is my workaround for this. Setup a synonym for an actual word named \"null\" :<br/><br/><pre><code><br/>define synonyms<br/>      on; the; of = null<br/>end define<br/></code></pre><br/>...and then write up a \"beforeturn\" script like this:<br/><br/><pre><code><br/>beforeturn &#123;<br/>\t\tif &#40; $instr&#40;#quest&#46;command#;null_&#41;$ &gt;= 1 &#41; then &#123;<br/>\t\t\t' REM see synonym NULL where on = NULL&#46; this is for things like &quot;put hook on rope&quot; which changes to &quot;put hook rope&quot;<br/>\t\t\tset string &lt;substring; null_&gt;<br/>\t\t\tset numeric &lt;p1; $instr&#40;#quest&#46;command#;#substring#&#41;$&gt;<br/>\t\t\tdec &lt;p1&gt;<br/>\t\t\tset string &lt;s1; $left&#40;#quest&#46;command#;%p1%&#41;$&gt;<br/>\t\t\tinc &lt;p1; $lengthof&#40;#substring#&#41;$&gt;<br/>\t\t\tset string &lt;s2; $mid&#40;#quest&#46;command#;%p1%&#41;$&gt;<br/>\t\t\tset string &lt;quest&#46;command; #s1# #s2#&gt;<br/>\t\t\tset string &lt;quest&#46;originalcommand; #s1# #s2#&gt;<br/>\t\t\t' REM stop quest&#46;command and then re-run it&#46; otherwise the above work is no good<br/>\t\t\tdontprocess<br/>\t\t\texec &lt;#quest&#46;command#&gt;<br/>\t\t&#125;\t\t<br/>\t&#125;<br/></code></pre><br/><br/><br/>What happens is the script will loop through the quest.command every time it encounters the word \"null\" in the command, and wipes it out and re-runs the command until there are no \"null\" words. So this way you can really eliminate out some synonyms or parts of object aliases that used words like \"of, the, to, on\" etc. and simplify things.<br/><br/>Now, where this really comes in useful is in your custom commands because now you can make a custom command that has:<br/><br/>put #@mything# #@myotherthing#<br/><br/>instead of...<br/><br/>put #@mything# on #@myotherthing#<br/><br/>It wouldn't be a command syntax the player would necessarily be aware of, or even make much sense. What it does, though is simplify your code a little (internally and behind the scenes). <br/><br/>In the above example, I wrote a routine to put a rope over a wall, and aliased out everything so the command is really shortened to \"put rope wall.\" Now for putting objects IN things, I probably will have a different command for that or allow the word \"IN\" to stay vs. nulling it out. <br/><br/>Anyhow just something I thought I'd share. Not sure if this is the best way to null out words you don't want, but it seems to work better than putting in an empty string synonym (at least since QDK doesn't seem to like those).<br/><br/>One thing to be careful of though. If you null out the word \"on\" then later want to have a \"wear\" command (i.e. put on clothes), the player's command of \"put on jacket\" changes to \"put jacket\" (which in some games means \"drop jacket\"). To avoid this you should probably add a synonym above the \"null\" synonym to change \"put on\" to \"wear\" :<br/><br/><pre><code><br/>define synonyms<br/>      put on = wear<br/>      on; the; of = null<br/>end define<br/></code></pre><br/><br/>If you do it in that order, it catches the \"on\" before it can nullify \"on\" and the player command for \"put on jacket\" is processed correctly.<br/><br/>The downside is if you wanted to allow the player to \"put jacket on\" then you're back to the old \"put jacket\" (i.e. \"drop jacket\" interpretation). However you could write up your own \"put #@mything#\" routine and query the player \"Where do you wish to put #mything#?\"<br/><br/>Of course in my code above I used the substring \"null_\" where the underscore means the code is looking for the word null with a space after it. So it would not nullify out the last null by itself at the end of a command. So you could have a custom command for \"put #@mything# null\" and have it execute the \"wear @#mything#\" command, and allow just \"put #@mything#\" to still act as a drop object command.",
      "PostDate": "2004-05-03T11:01:24+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "2736",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "How would you diferentiate between under/over/in/beside/left/right/etc...",
      "EditableFormat": "bbcode",
      "HTML": "How would you diferentiate between under/over/in/beside/left/right/etc...",
      "PostDate": "2004-05-23T05:18:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "2742",
      "UserId": 0,
      "Username": "billchelonis",
      "UserAvatar": null,
      "UserGravatar": "c392dd292ff05b8f98616cbfecf7b77b",
      "EditableText": "Well, after experimenting with Quest's custom commands awhile I figured out other ways to do this. The example above was just for making a null word without getting a compiler error. I wasn't implying you'd make \"on\" null in all games. This was just an example.\n\nI think the custom commands might need a bit more documentation though, because how do you know that you have to do the command syntax in this order:\n\nclimb over #@mything# with #@myotherthing#;climb #@mything# with #@myotherthing#;climb #@mything#\n\nvs. a backwards order:\nclimb #@mything#;climb #@mything# with #@myotherthing#;climb over #@mything#\n\nThe backwards order example doesn't seem to work... it's like the game doesn't recognize some of the commands and only catches the first one. i.e. climb #@mything#\n\nI didn't realize this at first and was using null words and aliases to change things like \"climb over\" to \"climbover\" or \"climb over &lt;something&gt; with &lt;somethingelse&gt;\" to just:   climbover #@mything# #@myotherthing#\n\nSo in that workaround case some words like \"on\" were actually nulled out or replaced, but now I know you've got to write out the commands in a certain order (most complex to simplest).",
      "EditableFormat": "bbcode",
      "HTML": "Well, after experimenting with Quest's custom commands awhile I figured out other ways to do this. The example above was just for making a null word without getting a compiler error. I wasn't implying you'd make \"on\" null in all games. This was just an example.<br/><br/>I think the custom commands might need a bit more documentation though, because how do you know that you have to do the command syntax in this order:<br/><br/>climb over #@mything# with #@myotherthing#;climb #@mything# with #@myotherthing#;climb #@mything#<br/><br/>vs. a backwards order:<br/>climb #@mything#;climb #@mything# with #@myotherthing#;climb over #@mything#<br/><br/>The backwards order example doesn't seem to work... it's like the game doesn't recognize some of the commands and only catches the first one. i.e. climb #@mything#<br/><br/>I didn't realize this at first and was using null words and aliases to change things like \"climb over\" to \"climbover\" or \"climb over &lt;something&gt; with &lt;somethingelse&gt;\" to just:   climbover #@mything# #@myotherthing#<br/><br/>So in that workaround case some words like \"on\" were actually nulled out or replaced, but now I know you've got to write out the commands in a certain order (most complex to simplest).",
      "PostDate": "2004-05-24T01:12:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "2746",
      "UserId": 0,
      "Username": "Anonymous",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the 'null synonym' (making 'noise words' = a blank) was something I came up with for one of my early Quest libraries - at the time it worked well enough although I confess it wa hardly elegant <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nAs for the required sequencing of user commands, I think it makes most sense if you regard each component of a multi command (reading conventionally left to right) as an individual line to be processed in top to bottom order - Looked at in this way it becomes obvious which order the commands have to be in to work as required.\n\nFor example a command written like so:\n\n\ncommand &lt;climb #@thing#; climb over #@thing#&gt; do &lt;climbprocedure&gt;\n\nshould be 'read' as being exactly equal to:\n\ncommand &lt;climb #@thing#&gt; do &lt;climbprocedure&gt;\ncommand &lt;climb over #@thing#&gt; do &lt;climbprocedure&gt;\n\n\nthen it becomes obvious why a player input of \"climb over fence\" won't work. Quest happily matches this to the first command and tries to interpret climb with the variable #thing# holding 'over fence' as if 'over fence' was an object...  oops!\n\nDoing them in reverse (correct) order it becomes:\n\ncommand &lt;climb over #@thing#; climb #@thing#&gt; do &lt;climbprocedure&gt;\n\nwhich should be 'read' as being exactly equal to:\n\ncommand &lt;climb over #@thing#&gt; do &lt;climbprocedure&gt;\ncommand &lt;climb #@thing#&gt; do &lt;climbprocedure&gt;\n\nNow \"climb over fence\" matches the first command &amp; so it will work properly. Inputting \"climb fence\" would not match the first command but be caught by the second command and therefor also work properly.\n\nBasic rule of thumb is to do the specific stuff first, and have your basic catch all construct at the end. This 'filters' the command down until it finds a match if one is provided.\n\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "I think the 'null synonym' (making 'noise words' = a blank) was something I came up with for one of my early Quest libraries - at the time it worked well enough although I confess it wa hardly elegant <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>As for the required sequencing of user commands, I think it makes most sense if you regard each component of a multi command (reading conventionally left to right) as an individual line to be processed in top to bottom order - Looked at in this way it becomes obvious which order the commands have to be in to work as required.<br/><br/>For example a command written like so:<br/><br/><br/>command &lt;climb #@thing#; climb over #@thing#&gt; do &lt;climbprocedure&gt;<br/><br/>should be 'read' as being exactly equal to:<br/><br/>command &lt;climb #@thing#&gt; do &lt;climbprocedure&gt;<br/>command &lt;climb over #@thing#&gt; do &lt;climbprocedure&gt;<br/><br/><br/>then it becomes obvious why a player input of \"climb over fence\" won't work. Quest happily matches this to the first command and tries to interpret climb with the variable #thing# holding 'over fence' as if 'over fence' was an object...  oops!<br/><br/>Doing them in reverse (correct) order it becomes:<br/><br/>command &lt;climb over #@thing#; climb #@thing#&gt; do &lt;climbprocedure&gt;<br/><br/>which should be 'read' as being exactly equal to:<br/><br/>command &lt;climb over #@thing#&gt; do &lt;climbprocedure&gt;<br/>command &lt;climb #@thing#&gt; do &lt;climbprocedure&gt;<br/><br/>Now \"climb over fence\" matches the first command &amp; so it will work properly. Inputting \"climb fence\" would not match the first command but be caught by the second command and therefor also work properly.<br/><br/>Basic rule of thumb is to do the specific stuff first, and have your basic catch all construct at the end. This 'filters' the command down until it finds a match if one is provided.<br/><br/><br/>Al (MaDbRiT)",
      "PostDate": "2004-05-24T11:03:57+01:00",
      "LastEditDate": null
    }
  ]
}
