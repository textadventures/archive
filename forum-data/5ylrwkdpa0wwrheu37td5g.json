{
  "Topic": {
    "TopicId": "5ylrwkdpa0wwrheu37td5g",
    "ForumId": "10",
    "Title": "Attribute balance",
    "LastUpdated": "2017-02-21T15:38:28.5955907Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3e9ab097-3cd4-4e05-95d0-6c68ea5d2385",
      "UserId": 291467,
      "Username": "Tyrannobear",
      "AvatarUrl": "https://graph.facebook.com/1419244644793813/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a very interesting question. I know how to make certain results dependent on a specific attribute (e.g. if ammunition is greater than 0, the gun fires, else the gun clicks). But I want to make it so that if one attribute is greater than another attribute you get a different result. Specifically, I have two warring nations, and I want to make it so that if the player's nation has a greater military strength, they win the battle, but if the NPC's nation has a greater military strength, they lose. Is this possible to do in Quest? If so, how?",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a very interesting question. I know how to make certain results dependent on a specific attribute (e.g. if ammunition is greater than 0, the gun fires, else the gun clicks). But I want to make it so that if one attribute is greater than another attribute you get a different result. Specifically, I have two warring nations, and I want to make it so that if the player's nation has a greater military strength, they win the battle, but if the NPC's nation has a greater military strength, they lose. Is this possible to do in Quest? If so, how?</p>\n\n",
      "PostDate": "2017-02-21T15:38:28.5955907Z",
      "LastEditDate": null
    },
    {
      "PostId": "220d15fb-8bb2-48bf-9f5c-1f7a6348bae6",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sounds like a simple \"if script\" --- you basically answered it yourself with your example ^_^ \r\n\r\nEssentially, you could create one **Attribute** on your _player.object_, one on your _gun.object_, and you could create one **Type** called, _nation_ with an *Attribute*. \r\n\r\nPlayer.Object\r\npower **Int**  (referring to it would be _player.power_)\r\n\r\nGun.Object\r\nammunition **Int** (or battery, lifetime etc whatever you wanted) (referring to it would be _gun.ammunition_)\r\n\r\n```\r\nif (gun.ammunition > 0) {\r\nmsg (\"POW! The gun fires!\")\r\nelse {\r\nmsg (\"Click! Click! Oh noes! You are out of teh bulletz! Egads!\")\r\n}\r\n```\r\n\r\nType\r\nAttribute\r\nnationpower **Int** (have all your \"nations\" inherit this attribute)\r\n```\r\nThen you just have to compare them which I am completely blanking on at the moment. @_@",
      "EditableFormat": "markdown",
      "HTML": "<p>Sounds like a simple \"if script\" --- you basically answered it yourself with your example ^_^</p>\n<p>Essentially, you could create one <strong>Attribute</strong> on your <em>player.object</em>, one on your <em>gun.object</em>, and you could create one <strong>Type</strong> called, <em>nation</em> with an <em>Attribute</em>.</p>\n<p>Player.Object<br>\npower <strong>Int</strong>  (referring to it would be <em>player.power</em>)</p>\n<p>Gun.Object<br>\nammunition <strong>Int</strong> (or battery, lifetime etc whatever you wanted) (referring to it would be <em>gun.ammunition</em>)</p>\n<pre><code>if (gun.ammunition &gt; 0) {\nmsg (\"POW! The gun fires!\")\nelse {\nmsg (\"Click! Click! Oh noes! You are out of teh bulletz! Egads!\")\n}\n</code></pre>\n<p>Type<br>\nAttribute<br>\nnationpower <strong>Int</strong> (have all your \"nations\" inherit this attribute)</p>\n<pre><code>Then you just have to compare them which I am completely blanking on at the moment. @_@\n</code></pre>\n\n",
      "PostDate": "2017-02-21T18:14:11.7037275Z",
      "LastEditDate": "2017-02-21T18:14:45.4795594Z"
    },
    {
      "PostId": "d43a815f-4224-4559-b942-a189e3ff91eb",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It works exactly the same as your ammo script, except you compare the attribute to another attribute rather than a fixed number\r\n\r\nie:\r\n```\r\nif (player.military > opponent.military) {\r\n//you win the fight\r\n}\r\nelse if (player.military < opponent.military) {\r\n//you lose\r\n}\r\nelse {\r\n// the armies are even\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>It works exactly the same as your ammo script, except you compare the attribute to another attribute rather than a fixed number</p>\n<p>ie:</p>\n<pre><code>if (player.military &gt; opponent.military) {\n//you win the fight\n}\nelse if (player.military &lt; opponent.military) {\n//you lose\n}\nelse {\n// the armies are even\n}\n</code></pre>\n\n",
      "PostDate": "2017-02-21T20:47:57.5485652Z",
      "LastEditDate": null
    },
    {
      "PostId": "df815cc1-29ff-4fda-9a2d-5d276f76ee62",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a \"problem\" with the simple victory here...\r\nIE: You and I are the two fighting...\r\nYou bring 100 units\r\nAnd I manage to get 101 units to the battle\r\nI win, but how many units do I loose?\r\nBetter, but a little harder...\r\nloop through each side, roll a d6, 1=kill (or 1,2= kill)\r\nIE: your 100 units fire, and get 35 kills\r\nMy side fires an get 25 kills...\r\nYou loose 25, I loose 35...\r\nYou now have 75 units and I have 66...\r\nYou fire, 15 kills, I get 30 ( I got lucky!!!)\r\nYou now have 45, I have 51...\r\nand so on until one side is out of units...\r\nYou: 6, Me: 0\r\nYou win, but it cost you 94 units that will need to be rebuilt before your next battle...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a \"problem\" with the simple victory here...<br>\nIE: You and I are the two fighting...<br>\nYou bring 100 units<br>\nAnd I manage to get 101 units to the battle<br>\nI win, but how many units do I loose?<br>\nBetter, but a little harder...<br>\nloop through each side, roll a d6, 1=kill (or 1,2= kill)<br>\nIE: your 100 units fire, and get 35 kills<br>\nMy side fires an get 25 kills...<br>\nYou loose 25, I loose 35...<br>\nYou now have 75 units and I have 66...<br>\nYou fire, 15 kills, I get 30 ( I got lucky!!!)<br>\nYou now have 45, I have 51...<br>\nand so on until one side is out of units...<br>\nYou: 6, Me: 0<br>\nYou win, but it cost you 94 units that will need to be rebuilt before your next battle...</p>\n\n",
      "PostDate": "2017-02-22T05:13:19.0037405Z",
      "LastEditDate": null
    },
    {
      "PostId": "aac951c9-99da-475c-9c7d-01535dae6b84",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ DarkLizard:\r\n\r\nan example (it can be changed up, depending on what/how exactly you want the design to be for your game)\r\n\r\n```\r\n<object name=\"global_data_object\">\r\n  <attr name=\"self_1_unit_quantity_integer_attribute\" type=\"int\">999</attr>\r\n  <attr name=\"self_2_unit_quantity_integer_attribute\" type=\"int\">500</attr>\r\n  <attr name=\"enemy_1_unit_quantity_integer_attribute\" type=\"int\">100</attr>\r\n  <attr name=\"enemy_2_unit_quantity_integer_attribute\" type=\"int\">200</attr>\r\n  <attr name=\"enemy_3_unit_quantity_integer_attribute\" type=\"int\">50</attr>\r\n</object>\r\n\r\n<function name=\"combat_function\" parameters=\"self_unit_quantity_integer_parameter, enemy_unit_quantity_integer_parameter\">\r\n  done_boolean_variable = false\r\n  while (not done_boolean_variable) {\r\n    self_unit_quantity_integer_variable = self_unit_quantity_integer_parameter\r\n    enemy_unit_quantity_integer_variable = enemy_unit_quantity_integer_parameter\r\n    for (not_used_variable, 1, self_unit_quantity_integer_variable) {\r\n      if (DiceRoll (\"1d6\") < 3) { // a '1' or '2' valued dice roll is a hit/kill, '3-6' valued dice rolls are misses\r\n        enemy_unit_quantity_integer_parameter = enemy_unit_quantity_integer_parameter - 1\r\n      }\r\n    }\r\n    for (not_used_variable, 1, enemy_unit_quantity_integer_variable) {\r\n      if (DiceRoll (\"1d6\") < 3) { // a '1' or '2' valued dice roll is a hit/kill, '3-6' valued dice rolls are misses\r\n        self_unit_quantity_integer_parameter = self_unit_quantity_integer_parameter - 1\r\n      }\r\n    }\r\n    if (self_unit_quantity_integer_parameter < 1) {\r\n      msg (\"You lost the battle, and the enemy has \" + enemy_unit_quantity_integer_parameter + \" units left\")\r\n      done_boolean_variable = true\r\n    } else if (enemy_unit_quantity_integer_parameter < 1) {\r\n      msg (\"You won the battle, but you only have \" + self_unit_quantity_integer_parameter + \" units left\")\r\n      done_boolean_variable = true\r\n    }\r\n  }\r\n</function>\r\n\r\n// -----------------------------------------\r\n\r\n// calling (using) the Function (scripting), examples:\r\n\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\r\n\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\r\n\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\r\n\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\r\n\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\r\n\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>@ DarkLizard:</p>\n<p>an example (it can be changed up, depending on what/how exactly you want the design to be for your game)</p>\n<pre><code>&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"self_1_unit_quantity_integer_attribute\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"self_2_unit_quantity_integer_attribute\" type=\"int\"&gt;500&lt;/attr&gt;\n  &lt;attr name=\"enemy_1_unit_quantity_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt;\n  &lt;attr name=\"enemy_2_unit_quantity_integer_attribute\" type=\"int\"&gt;200&lt;/attr&gt;\n  &lt;attr name=\"enemy_3_unit_quantity_integer_attribute\" type=\"int\"&gt;50&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;function name=\"combat_function\" parameters=\"self_unit_quantity_integer_parameter, enemy_unit_quantity_integer_parameter\"&gt;\n  done_boolean_variable = false\n  while (not done_boolean_variable) {\n    self_unit_quantity_integer_variable = self_unit_quantity_integer_parameter\n    enemy_unit_quantity_integer_variable = enemy_unit_quantity_integer_parameter\n    for (not_used_variable, 1, self_unit_quantity_integer_variable) {\n      if (DiceRoll (\"1d6\") &lt; 3) { // a '1' or '2' valued dice roll is a hit/kill, '3-6' valued dice rolls are misses\n        enemy_unit_quantity_integer_parameter = enemy_unit_quantity_integer_parameter - 1\n      }\n    }\n    for (not_used_variable, 1, enemy_unit_quantity_integer_variable) {\n      if (DiceRoll (\"1d6\") &lt; 3) { // a '1' or '2' valued dice roll is a hit/kill, '3-6' valued dice rolls are misses\n        self_unit_quantity_integer_parameter = self_unit_quantity_integer_parameter - 1\n      }\n    }\n    if (self_unit_quantity_integer_parameter &lt; 1) {\n      msg (\"You lost the battle, and the enemy has \" + enemy_unit_quantity_integer_parameter + \" units left\")\n      done_boolean_variable = true\n    } else if (enemy_unit_quantity_integer_parameter &lt; 1) {\n      msg (\"You won the battle, but you only have \" + self_unit_quantity_integer_parameter + \" units left\")\n      done_boolean_variable = true\n    }\n  }\n&lt;/function&gt;\n\n// -----------------------------------------\n\n// calling (using) the Function (scripting), examples:\n\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\n\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\n\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\n\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\n\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\n\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\n</code></pre>\n\n",
      "PostDate": "2017-02-22T23:39:54.4755167Z",
      "LastEditDate": "2017-02-23T07:40:41.6242183Z"
    },
    {
      "PostId": "5d886014-22d4-4562-8abe-f977ae97cc7a",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep, that's the idea...\r\nThanks.\r\n(Looks longer that what would have created using Basic!)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep, that's the idea...<br>\nThanks.<br>\n(Looks longer that what would have created using Basic!)</p>\n\n",
      "PostDate": "2017-02-23T04:07:00.7896463Z",
      "LastEditDate": null
    },
    {
      "PostId": "41248159-24a9-4040-b496-d92cf8f0ea0b",
      "UserId": 291467,
      "Username": "Tyrannobear",
      "AvatarUrl": "https://graph.facebook.com/1419244644793813/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the replies. I'm just checking back to see if I have any replies while I have a spare minute, so I haven't read much just yet. I will say this: DarkLizerd, I like your idea :) I'm still a MASSIVE noob when it comes to this though xD\r\n\r\nThanks for everyone's replies. I'll start trying a few of your answers out when I've got time to actually open the game file :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the replies. I'm just checking back to see if I have any replies while I have a spare minute, so I haven't read much just yet. I will say this: DarkLizerd, I like your idea :) I'm still a MASSIVE noob when it comes to this though xD</p>\n<p>Thanks for everyone's replies. I'll start trying a few of your answers out when I've got time to actually open the game file :)</p>\n\n",
      "PostDate": "2017-02-23T10:04:09.8137583Z",
      "LastEditDate": null
    },
    {
      "PostId": "a6cc7e46-b2e8-4921-94ac-3503aca0c54d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's my old and poor combat code (it was based upon/built from Pertex' combat code structure/design, so all credit goes to Pertex), you can take a look at for ideas on how to do some various combat things:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22483\r\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22486 (the key/legend for all of my abrevs --- I've learned since to never ever use abrevs ever again, lol)\r\n\r\nbut, you should look into Pixie's Combat Library, to see/study/use some really good code and code design",
      "EditableFormat": "markdown",
      "HTML": "<p>here's my old and poor combat code (it was based upon/built from Pertex' combat code structure/design, so all credit goes to Pertex), you can take a look at for ideas on how to do some various combat things:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22483<br>\nhttp://textadventures.co.uk/forum/quest/topic/3348/noobie-hks-help-me-thread#22486 (the key/legend for all of my abrevs --- I've learned since to never ever use abrevs ever again, lol)</p>\n<p>but, you should look into Pixie's Combat Library, to see/study/use some really good code and code design</p>\n\n",
      "PostDate": "2017-02-23T10:47:24.52855Z",
      "LastEditDate": null
    },
    {
      "PostId": "d249f98c-7f6b-48f6-9abd-0271504ec1d2",
      "UserId": 291467,
      "Username": "Tyrannobear",
      "AvatarUrl": "https://graph.facebook.com/1419244644793813/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Update:\r\n\r\nI created a test file and just created an opponent object. I gave both objects a military attribute (as an integer), then used the expression given by TinFoilMkIV. It worked. I'm not entirely sure what I was doing wrong before, tbh.\r\n\r\nhegemonkhan, I also used your code in the test file, but every time I tried to leave code view, it gave me an error. I don't really understand coding, so I'm probably making a huge error. I'll keep your code in mind for when I'm more clued up on how it works, though. Thanks for your help :) And thanks again for the extra links you sent in your last reply. I'll check those out.",
      "EditableFormat": "markdown",
      "HTML": "<p>Update:</p>\n<p>I created a test file and just created an opponent object. I gave both objects a military attribute (as an integer), then used the expression given by TinFoilMkIV. It worked. I'm not entirely sure what I was doing wrong before, tbh.</p>\n<p>hegemonkhan, I also used your code in the test file, but every time I tried to leave code view, it gave me an error. I don't really understand coding, so I'm probably making a huge error. I'll keep your code in mind for when I'm more clued up on how it works, though. Thanks for your help :) And thanks again for the extra links you sent in your last reply. I'll check those out.</p>\n\n",
      "PostDate": "2017-02-23T13:45:46.227643Z",
      "LastEditDate": null
    },
    {
      "PostId": "b8a1921d-b218-4d20-b3c0-774be8aeb0d3",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oh, the code doesn't work, as it's not updated for the new versions (mainy of/for List/Dictionary Attributes) of syntax/coding that occured from ~ v5.3-v5.5. You'd also have to change the top/first line:\r\n\r\n```\r\nfrom: <asl version=\"530\">\r\nto: <asl version=\"550\"> // or: <asl version=\"560\">\r\n```\r\n\r\nas well as update all of the List/Dictionary coding/syntax to it's current form/syntax.\r\n\r\nAside from being lazy, there's no reason to update it, as it's really bad/poor code, so it just works as a study/idea guide for people on some ways of doing various things with the coding of/for combat.\r\n\r\nI know it's hard to understand code, when you're new to it, but if you can try taking a look at it, hopefully some things will make some sense, and maybe you can see how to do the same via using the GUI/Editor. Basically my combat works like this:\r\n\r\n(most of the important/main coding, which is the Functions, is at the bottom, read my code generally from the bottom up, to see the important stuff to study/understand)\r\n\r\n1. a main 'battle_system' Function to handle/get/setup you and the enemy and etc stuff (getting the enemy object, seeing if you can engage in combat or not)\r\n2. a 'battle sequence' Function that handles who goes first and etc (aka, the order of combat turns, handling the combat rounds)\r\n3. a 'self_battle_turn' Function for handling your combat turn\r\n4. a 'enemy_battle_turn' Function for handling the A.I./enemy combat turn\r\n\r\n----------\r\n\r\nmy apologies for not informing you that my (outdated) code doesn't work.",
      "EditableFormat": "markdown",
      "HTML": "<p>oh, the code doesn't work, as it's not updated for the new versions (mainy of/for List/Dictionary Attributes) of syntax/coding that occured from ~ v5.3-v5.5. You'd also have to change the top/first line:</p>\n<pre><code>from: &lt;asl version=\"530\"&gt;\nto: &lt;asl version=\"550\"&gt; // or: &lt;asl version=\"560\"&gt;\n</code></pre>\n<p>as well as update all of the List/Dictionary coding/syntax to it's current form/syntax.</p>\n<p>Aside from being lazy, there's no reason to update it, as it's really bad/poor code, so it just works as a study/idea guide for people on some ways of doing various things with the coding of/for combat.</p>\n<p>I know it's hard to understand code, when you're new to it, but if you can try taking a look at it, hopefully some things will make some sense, and maybe you can see how to do the same via using the GUI/Editor. Basically my combat works like this:</p>\n<p>(most of the important/main coding, which is the Functions, is at the bottom, read my code generally from the bottom up, to see the important stuff to study/understand)</p>\n<ol>\n<li>a main 'battle_system' Function to handle/get/setup you and the enemy and etc stuff (getting the enemy object, seeing if you can engage in combat or not)</li>\n<li>a 'battle sequence' Function that handles who goes first and etc (aka, the order of combat turns, handling the combat rounds)</li>\n<li>a 'self_battle_turn' Function for handling your combat turn</li>\n<li>a 'enemy_battle_turn' Function for handling the A.I./enemy combat turn</li>\n</ol>\n<hr>\n<p>my apologies for not informing you that my (outdated) code doesn't work.</p>\n\n",
      "PostDate": "2017-02-23T21:13:35.1148787Z",
      "LastEditDate": "2017-02-24T04:23:12.8018157Z"
    },
    {
      "PostId": "7bdaf9f7-7495-441d-8a5b-976d19aac4b1",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would do the combat as a function...\r\n(not true code...)\r\nPlayer.army=100\r\nEnemy.army=100\r\n\r\nstart loop {\r\nif Player.army<0 then \"player lost!\" exit loop\r\nif Enemy.army<0 then \"The enemy is defeated!\" exit loop\r\nEnemy.army= Enemy.army -shoot(Player.army)\r\nPlayer.army=Player.army-shoot(Enemy.army)\r\n}\r\n\r\nfunction shoot(Attacker) \r\n  return DiceRoll(1d6)*Attacker\r\n// this will count as a hit on 1 out of 6, but, it may give a 100% hit if dice roll was a \"6\"\r\nend function\r\n\r\nsecond option\r\nfunction shoot(Attacker)\r\nH=0  // count of hits\r\nfor (A,1,Attacker){\r\n  if(DiceRoll(1d6)<3 then H=H+1\r\n}\r\nreturn(H)\r\nend function\r\n\r\n(This is a mix of Basic, which I know VERY! well, and Quest, which I know VERRY! little. But I'm sure someone here\r\ncan clean this up easy)\r\nYou could add a \"retreat\" command after each round if the battle is turning against you,\r\nat the cost of a free attack against you...\r\nAnd a moral roll, so that, if the enemy is loosing, he may flee the fight, and you get one last attack.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I would do the combat as a function...<br>\n(not true code...)<br>\nPlayer.army=100<br>\nEnemy.army=100</p>\n<p>start loop {<br>\nif Player.army&lt;0 then \"player lost!\" exit loop<br>\nif Enemy.army&lt;0 then \"The enemy is defeated!\" exit loop<br>\nEnemy.army= Enemy.army -shoot(Player.army)<br>\nPlayer.army=Player.army-shoot(Enemy.army)<br>\n}</p>\n<p>function shoot(Attacker)<br>\nreturn DiceRoll(1d6)*Attacker<br>\n// this will count as a hit on 1 out of 6, but, it may give a 100% hit if dice roll was a \"6\"<br>\nend function</p>\n<p>second option<br>\nfunction shoot(Attacker)<br>\nH=0  // count of hits<br>\nfor (A,1,Attacker){<br>\nif(DiceRoll(1d6)&lt;3 then H=H+1<br>\n}<br>\nreturn(H)<br>\nend function</p>\n<p>(This is a mix of Basic, which I know VERY! well, and Quest, which I know VERRY! little. But I'm sure someone here<br>\ncan clean this up easy)<br>\nYou could add a \"retreat\" command after each round if the battle is turning against you,<br>\nat the cost of a free attack against you...<br>\nAnd a moral roll, so that, if the enemy is loosing, he may flee the fight, and you get one last attack.</p>\n\n",
      "PostDate": "2017-02-24T03:47:10.7951897Z",
      "LastEditDate": null
    },
    {
      "PostId": "7c1b5c15-9488-4c84-9fe2-63c472b4354e",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "my code does an individual roll for each/every individual unit for whether they get a kill/hit or not.\r\n\r\nalso, the design (I didn't know what you wanted, so I decided upon doing this design for an example for you) of my code does this effect:\r\n\r\nboth sides get to do rolls for their starting size of/at each combat round (which is why I used two, iterations: the 'for' Functions, and had to use copy local attributes, to hold the initial rounds' armies sizes, while using the original global attributes to do the actual subtractions from, in order to have both sides/armies using their initial sizes for the rolls. A different design would be to have them take turns and that generally would mean that who'ever attacks first is reducing the other side's size and thus that reduced size would be used for the dice rolls on their turn after whoever goes first)\r\n\r\n-------\r\n\r\nI'm sure my code can be made a bit more efficient, but it's not too far off in terms of top efficiency. Unfortunately, for efficiency/performance, high level code/language, does have much more overhead, than does basic or especially assembly (low level language), but for scale and human usability, high level language is better. There's a reason language has moved away from the early and/or low-evel languages to the more robust (more functions/conveniences/etc, but more overhead) current high level languages in use, like: C++, Java, Python, etc (it can take a year to learn everything that these language packages provide for you to use!)\r\n\r\n------\r\n\r\nI don't know basic, but I've worked with MS-DoS (well modern computer's cmd line/prompt/shell anyways) and Assembly, which generally has the code lines which you can jump around and also create blocks('label:') of code lines, for loops/iterations/function-macros-effects. Is this how the 'basic' language design works? or no?",
      "EditableFormat": "markdown",
      "HTML": "<p>my code does an individual roll for each/every individual unit for whether they get a kill/hit or not.</p>\n<p>also, the design (I didn't know what you wanted, so I decided upon doing this design for an example for you) of my code does this effect:</p>\n<p>both sides get to do rolls for their starting size of/at each combat round (which is why I used two, iterations: the 'for' Functions, and had to use copy local attributes, to hold the initial rounds' armies sizes, while using the original global attributes to do the actual subtractions from, in order to have both sides/armies using their initial sizes for the rolls. A different design would be to have them take turns and that generally would mean that who'ever attacks first is reducing the other side's size and thus that reduced size would be used for the dice rolls on their turn after whoever goes first)</p>\n<hr>\n<p>I'm sure my code can be made a bit more efficient, but it's not too far off in terms of top efficiency. Unfortunately, for efficiency/performance, high level code/language, does have much more overhead, than does basic or especially assembly (low level language), but for scale and human usability, high level language is better. There's a reason language has moved away from the early and/or low-evel languages to the more robust (more functions/conveniences/etc, but more overhead) current high level languages in use, like: C++, Java, Python, etc (it can take a year to learn everything that these language packages provide for you to use!)</p>\n<hr>\n<p>I don't know basic, but I've worked with MS-DoS (well modern computer's cmd line/prompt/shell anyways) and Assembly, which generally has the code lines which you can jump around and also create blocks('label:') of code lines, for loops/iterations/function-macros-effects. Is this how the 'basic' language design works? or no?</p>\n\n",
      "PostDate": "2017-02-24T04:31:11.286582Z",
      "LastEditDate": "2017-02-24T04:56:28.9542239Z"
    },
    {
      "PostId": "f04f600e-7d42-4cad-9311-21706567dbc3",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Basic and Quest appear to be cousins...\r\nBoth high level, and easy to learn.\r\nBut I my case, I think in Basic, then need to convert the command into Quest...\r\nBut you just think in Quest first, this makes it easer for you...\r\n\r\nBut I will get there some day...\r\nYea, mine did not show a step of saving the kills so that they can be killed after both sides shot...\r\nA personal note... Your variable names are WAYYY!!! to long to easy follow.\r\nI use much shorter ones. (personal lazy habit)\r\nBut I know this is all just personal choices and the computer could not care less.\r\nfrom your thread#22486, looks like you started with short variables too...\r\n\r\nDid you set the army sizes or did you make them random, I could not follow that part or your code...\r\nHere is an example: Basic-Quest\r\n\r\nBasic:\r\nfor a=1 to 10\r\nPrint A\r\nnext A\r\n(the output would be: 1 2 3 4... 10)\r\nwhich I could also do on the same line:\r\nfor a=1 to 10: Print A: next A\r\n\r\nQuest:\r\n for (A, 1, 10) {\r\n     msg (A)\r\n    }\r\n(The output would be the same)\r\nCan Quest do single line?\r\nWould it look like:\r\nfor (a,1,10){ msg(a)}\r\n\r\nActually both would be:\r\n1\r\n2\r\n3\r\n4\r\n...\r\n10\r\nOK, I'm learning Quest my the minute... (yea, that fast)\r\nYour function does both sides of the attacks, right?\r\nI just had a simple generic single sided attack function.\r\nI could see where yours would be quicker, 1 call instead of 2...\r\nBut why self_1 and _2 and enemy_1, _2, _3 ???\r\nThat I don't follow...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Basic and Quest appear to be cousins...<br>\nBoth high level, and easy to learn.<br>\nBut I my case, I think in Basic, then need to convert the command into Quest...<br>\nBut you just think in Quest first, this makes it easer for you...</p>\n<p>But I will get there some day...<br>\nYea, mine did not show a step of saving the kills so that they can be killed after both sides shot...<br>\nA personal note... Your variable names are WAYYY!!! to long to easy follow.<br>\nI use much shorter ones. (personal lazy habit)<br>\nBut I know this is all just personal choices and the computer could not care less.<br>\nfrom your thread#22486, looks like you started with short variables too...</p>\n<p>Did you set the army sizes or did you make them random, I could not follow that part or your code...<br>\nHere is an example: Basic-Quest</p>\n<p>Basic:<br>\nfor a=1 to 10<br>\nPrint A<br>\nnext A<br>\n(the output would be: 1 2 3 4... 10)<br>\nwhich I could also do on the same line:<br>\nfor a=1 to 10: Print A: next A</p>\n<p>Quest:<br>\nfor (A, 1, 10) {<br>\nmsg (A)<br>\n}<br>\n(The output would be the same)<br>\nCan Quest do single line?<br>\nWould it look like:<br>\nfor (a,1,10){ msg(a)}</p>\n<p>Actually both would be:<br>\n1<br>\n2<br>\n3<br>\n4<br>\n...<br>\n10<br>\nOK, I'm learning Quest my the minute... (yea, that fast)<br>\nYour function does both sides of the attacks, right?<br>\nI just had a simple generic single sided attack function.<br>\nI could see where yours would be quicker, 1 call instead of 2...<br>\nBut why self_1 and _2 and enemy_1, _2, _3 ???<br>\nThat I don't follow...</p>\n\n",
      "PostDate": "2017-02-24T06:27:18.5346043Z",
      "LastEditDate": null
    },
    {
      "PostId": "9c2bf9a3-4935-45d6-bb2c-9935c9605564",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "oh, the army sizes would be a totally separate case: depends on however you want to design your game. We can get into how your armies and their unit-sizes are generated/determined.\r\n\r\nfor my example, to show case the functions only, I just quickly created 2 armies of yours ('self') and 3 rival ('enemy') armies, via merely as Integer Attributes of my 'global_data_object' Object, just so you can see how the Function can take different inputs/arguments/parameters (which in this case is the different armies, one of yours and one of the enemies):\r\n\r\n```\r\n<object name=\"global_data_object\">\r\n\r\n  // two armies of yours:\r\n  <attr name=\"self_1_unit_quantity_integer_attribute\" type=\"int\">999</attr> // one army of yours, having 999 forces/units\r\n  <attr name=\"self_2_unit_quantity_integer_attribute\" type=\"int\">500</attr> // another army of yours, having 500 forces/units\r\n\r\n  // three armies of rivals:\r\n  <attr name=\"enemy_1_unit_quantity_integer_attribute\" type=\"int\">100</attr> // you hopefully understand now\r\n  <attr name=\"enemy_2_unit_quantity_integer_attribute\" type=\"int\">200</attr> // ....\r\n  <attr name=\"enemy_3_unit_quantity_integer_attribute\" type=\"int\">50</attr> // ....\r\n\r\n</object>\r\n```\r\n\r\n-----------\r\n\r\nand this is just an example of all of the different combinations of battles you can do:\r\n\r\n```\r\n// your army 1 vs enemy army 1:\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\r\n\r\n// your army 1 vs enemy army 2:\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\r\n\r\n// your army 1 vs enemy army 3:\r\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\r\n\r\n// your army 2 vs enemy army 1:\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\r\n\r\n// your army 2 vs enemy army 2:\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\r\n\r\n// your army 2 vs enemy army 3:\r\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\r\n```\r\n\r\n------------\r\n\r\noh, ya, just my personal preference, I know the convention is to have short labels/names (and single camel case), but for me, I like them being descriptive (and I hate shifting: upper case vs lower case, and I love underscores: as I have a hard time reading the label when there's no space between their words, for example: intStrength vs int_strength), as I can just read it and know exactly what I'm working with. It's kinda like instead of having an additional comment for what I'm doing, I put the comment into the label/name of it, itself, lol. It is a pain (a lot more typing on my part) and not easy to read them, I do admit I too have trouble some times with them. But, it's better than when I first started to learn to code and went about abrev'ing everything and forgetting what everything stands for and/or getting them confused/mixed up, laughs. I've learned never ever ever to abrev ever again. I try to make it as short as I can but without losing knowing what it is I'm working with. The reason for most of it's length is because I like that it ensures uniqueness and is good for organization, for example:\r\n\r\nplayer.strength_integer_attribute = 100\r\nplayer.strength_string_attribute = \"strong\"\r\n\r\nthis way, I clearly have 2 'strength' Attributes, one as an integer and one as a string. I like this descriptive clarity for myself. It's more useful for me than the irritation of having to type more and read fully/slowly due to such long labels/names.\r\n\r\n----------\r\n\r\nI think quest can do horizontal code, or maybe just some things horizontal code, haven't really tested it much...\r\n\r\n---------\r\n\r\nsome of quest's Functions are capable of using concatenation, including that of a Function's return value, for example:\r\n\r\n```\r\n// just example of being able to have a Function's return value within another Function's header/signature (as a input/argument/parameter):\r\n\r\nshow menu (\"Color?\", split (\"red;blue;yellow\", \";\"), false) { /* scripting */ }\r\n// quest automatically (hidden from you), with the 'show menu', 'Showmenu', and 'get input' Functions does this: result = YOUR_INPUT/SELECTION, which you can then use the built-in 'result' Variable for whatever you want\r\nmsg (\"Displaying your selected color: \" + result)\r\n\r\nvs\r\n\r\ncolor_list = split (\"red;blue;yellow\", \";\")\r\nshow menu (\"Color?\", color_list, false) { /* scripting */ }\r\n// quest automatically (hidden from you), with the 'show menu', 'Showmenu', and 'get input' Functions does this: result = YOUR_INPUT/SELECTION, which you can then use this built-in 'result' Variable for whatever you want\r\nmsg (\"Displaying your selected color: \" + result)\r\n```\r\n\r\n--------\r\n\r\nexample of complex concatenation and Functions within Functions' headers/signatures/parameters/arguments/inputs:\r\n\r\n(not a practical example though, lol. That would take me awhile to come up with and craft/code correctly...)\r\n\r\n```\r\n<object name=\"global_data_object\">\r\n  <attr name=\"verb_list\" type=\"simplestringlist\">talk;search;equip</attr>\r\n  <attr name=\"talk_script_attribute\" type=\"script\">\r\n    msg (\"talk\")\r\n  </attr>\r\n  <attr name=\"search_script_attribute\" type=\"script\">\r\n    msg (\"search\")\r\n  </attr>\r\n  <attr name=\"equip_script_attribute\" type=\"script\">\r\n    msg (\"equip\")\r\n  </attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>talk_script_attribute</property>\r\n  <pattern>talk_script_attribute</pattern>\r\n  <defaultexpression>You can't talk with that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>search_script_attribute</property>\r\n  <pattern>search_script_attribute</pattern>\r\n  <defaultexpression>You can't search that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>equip_script_attribute</property>\r\n  <pattern>equip_script_attribute</pattern>\r\n  <defaultexpression>You can't equip that!</defaultexpression>\r\n</verb>\r\n\r\n// scripting:\r\n\r\nrandom_number = GetRandomInt (0, ListCount (global_data_object.verb_list) - 1)\r\nrandom_choice = StringListItem (global_data_object.verb_list, random_number)\r\ndo (global_data_object, random_choice + \"_script_attribute\")\r\n\r\n// I think you can combine the above all into one line (not recommended due to human readability/understanding difficulty, and especially prone to having a missing/NOT:even-matching-sided parenthesis when trying to write it in, lol):\r\n\r\ndo (global_data_object, StringListItem (global_data_object.verb_list, GetRandomInt (0, ListCount (global_data_object.verb_list) - 1)) + \"_script_attribute\")\r\n\r\n// --------------\r\n\r\nthe 'do' and 'set' Functions, for example, are powerful as you can concatenate with them, as shown with 'do' above.\r\n\r\n// -----------\r\n\r\nwhereas, for example, you can't with 'invoke':\r\n\r\ninvoke (global_data_object.talk_script_attribute) // NO error, but you're stuck with using static inputs\r\nor\r\ninvoke (global_data_object.search_script_attribute) // NO error\r\nor\r\ninvoke (global_data_object.equip_script_attribute) // NO error\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>oh, the army sizes would be a totally separate case: depends on however you want to design your game. We can get into how your armies and their unit-sizes are generated/determined.</p>\n<p>for my example, to show case the functions only, I just quickly created 2 armies of yours ('self') and 3 rival ('enemy') armies, via merely as Integer Attributes of my 'global_data_object' Object, just so you can see how the Function can take different inputs/arguments/parameters (which in this case is the different armies, one of yours and one of the enemies):</p>\n<pre><code>&lt;object name=\"global_data_object\"&gt;\n\n  // two armies of yours:\n  &lt;attr name=\"self_1_unit_quantity_integer_attribute\" type=\"int\"&gt;999&lt;/attr&gt; // one army of yours, having 999 forces/units\n  &lt;attr name=\"self_2_unit_quantity_integer_attribute\" type=\"int\"&gt;500&lt;/attr&gt; // another army of yours, having 500 forces/units\n\n  // three armies of rivals:\n  &lt;attr name=\"enemy_1_unit_quantity_integer_attribute\" type=\"int\"&gt;100&lt;/attr&gt; // you hopefully understand now\n  &lt;attr name=\"enemy_2_unit_quantity_integer_attribute\" type=\"int\"&gt;200&lt;/attr&gt; // ....\n  &lt;attr name=\"enemy_3_unit_quantity_integer_attribute\" type=\"int\"&gt;50&lt;/attr&gt; // ....\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<p>and this is just an example of all of the different combinations of battles you can do:</p>\n<pre><code>// your army 1 vs enemy army 1:\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\n\n// your army 1 vs enemy army 2:\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\n\n// your army 1 vs enemy army 3:\ncombat_function (global_data_object.self_1_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\n\n// your army 2 vs enemy army 1:\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_1_unit_quantity_integer_attribute)\n\n// your army 2 vs enemy army 2:\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_2_unit_quantity_integer_attribute)\n\n// your army 2 vs enemy army 3:\ncombat_function (global_data_object.self_2_unit_quantity_integer_attribute, global_data_object.enemy_3_unit_quantity_integer_attribute)\n</code></pre>\n<hr>\n<p>oh, ya, just my personal preference, I know the convention is to have short labels/names (and single camel case), but for me, I like them being descriptive (and I hate shifting: upper case vs lower case, and I love underscores: as I have a hard time reading the label when there's no space between their words, for example: intStrength vs int_strength), as I can just read it and know exactly what I'm working with. It's kinda like instead of having an additional comment for what I'm doing, I put the comment into the label/name of it, itself, lol. It is a pain (a lot more typing on my part) and not easy to read them, I do admit I too have trouble some times with them. But, it's better than when I first started to learn to code and went about abrev'ing everything and forgetting what everything stands for and/or getting them confused/mixed up, laughs. I've learned never ever ever to abrev ever again. I try to make it as short as I can but without losing knowing what it is I'm working with. The reason for most of it's length is because I like that it ensures uniqueness and is good for organization, for example:</p>\n<p>player.strength_integer_attribute = 100<br>\nplayer.strength_string_attribute = \"strong\"</p>\n<p>this way, I clearly have 2 'strength' Attributes, one as an integer and one as a string. I like this descriptive clarity for myself. It's more useful for me than the irritation of having to type more and read fully/slowly due to such long labels/names.</p>\n<hr>\n<p>I think quest can do horizontal code, or maybe just some things horizontal code, haven't really tested it much...</p>\n<hr>\n<p>some of quest's Functions are capable of using concatenation, including that of a Function's return value, for example:</p>\n<pre><code>// just example of being able to have a Function's return value within another Function's header/signature (as a input/argument/parameter):\n\nshow menu (\"Color?\", split (\"red;blue;yellow\", \";\"), false) { /* scripting */ }\n// quest automatically (hidden from you), with the 'show menu', 'Showmenu', and 'get input' Functions does this: result = YOUR_INPUT/SELECTION, which you can then use the built-in 'result' Variable for whatever you want\nmsg (\"Displaying your selected color: \" + result)\n\nvs\n\ncolor_list = split (\"red;blue;yellow\", \";\")\nshow menu (\"Color?\", color_list, false) { /* scripting */ }\n// quest automatically (hidden from you), with the 'show menu', 'Showmenu', and 'get input' Functions does this: result = YOUR_INPUT/SELECTION, which you can then use this built-in 'result' Variable for whatever you want\nmsg (\"Displaying your selected color: \" + result)\n</code></pre>\n<hr>\n<p>example of complex concatenation and Functions within Functions' headers/signatures/parameters/arguments/inputs:</p>\n<p>(not a practical example though, lol. That would take me awhile to come up with and craft/code correctly...)</p>\n<pre><code>&lt;object name=\"global_data_object\"&gt;\n  &lt;attr name=\"verb_list\" type=\"simplestringlist\"&gt;talk;search;equip&lt;/attr&gt;\n  &lt;attr name=\"talk_script_attribute\" type=\"script\"&gt;\n    msg (\"talk\")\n  &lt;/attr&gt;\n  &lt;attr name=\"search_script_attribute\" type=\"script\"&gt;\n    msg (\"search\")\n  &lt;/attr&gt;\n  &lt;attr name=\"equip_script_attribute\" type=\"script\"&gt;\n    msg (\"equip\")\n  &lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk_script_attribute&lt;/property&gt;\n  &lt;pattern&gt;talk_script_attribute&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't talk with that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;search_script_attribute&lt;/property&gt;\n  &lt;pattern&gt;search_script_attribute&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't search that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;equip_script_attribute&lt;/property&gt;\n  &lt;pattern&gt;equip_script_attribute&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't equip that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n// scripting:\n\nrandom_number = GetRandomInt (0, ListCount (global_data_object.verb_list) - 1)\nrandom_choice = StringListItem (global_data_object.verb_list, random_number)\ndo (global_data_object, random_choice + \"_script_attribute\")\n\n// I think you can combine the above all into one line (not recommended due to human readability/understanding difficulty, and especially prone to having a missing/NOT:even-matching-sided parenthesis when trying to write it in, lol):\n\ndo (global_data_object, StringListItem (global_data_object.verb_list, GetRandomInt (0, ListCount (global_data_object.verb_list) - 1)) + \"_script_attribute\")\n\n// --------------\n\nthe 'do' and 'set' Functions, for example, are powerful as you can concatenate with them, as shown with 'do' above.\n\n// -----------\n\nwhereas, for example, you can't with 'invoke':\n\ninvoke (global_data_object.talk_script_attribute) // NO error, but you're stuck with using static inputs\nor\ninvoke (global_data_object.search_script_attribute) // NO error\nor\ninvoke (global_data_object.equip_script_attribute) // NO error\n</code></pre>\n\n",
      "PostDate": "2017-02-24T07:38:48.1527793Z",
      "LastEditDate": "2017-02-24T08:34:13.528973Z"
    },
    {
      "PostId": "2d89ebaa-1240-40fe-a2c2-096630f5d7a3",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So... 5 armies... got-it...\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>So... 5 armies... got-it...</p>\n\n",
      "PostDate": "2017-02-24T10:04:11.7916235Z",
      "LastEditDate": null
    },
    {
      "PostId": "d3e9ac49-cc9f-48e2-83f4-5a3fb4bb194c",
      "UserId": 291467,
      "Username": "Tyrannobear",
      "AvatarUrl": "https://graph.facebook.com/1419244644793813/picture?width=80&height=80",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, so, my original question was definitely answered. I'm actually not sure what I did wrong the first time, but TinFoilMkIV's reply solved the issue.\r\n\r\nOn top of this, DarkLizerd gave me some constructive criticism regarding the simplicity of my combat system. This resulted in a lot of useful instructions on combat systems. I've learned a lot from this thread, so thanks fellow game makers :)",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, so, my original question was definitely answered. I'm actually not sure what I did wrong the first time, but TinFoilMkIV's reply solved the issue.</p>\n<p>On top of this, DarkLizerd gave me some constructive criticism regarding the simplicity of my combat system. This resulted in a lot of useful instructions on combat systems. I've learned a lot from this thread, so thanks fellow game makers :)</p>\n\n",
      "PostDate": "2017-02-24T18:15:34.9117819Z",
      "LastEditDate": null
    },
    {
      "PostId": "95e188e3-25f1-4fc1-9f1b-24a1e3c61fa2",
      "UserId": 168877,
      "Username": "TinFoilMkIV",
      "AvatarUrl": "http://i.imgur.com/j34jdCvb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Glad to be of help. Also wanted to add that the simplicity of your original idea is not necessarily a bad thing. Depending on how you want to game to play it can be a good idea to keep things simple and straight forwards. I suppose it comes down to how big of a part the battle between armies is to your game and how predictable you want them to be. I've played games where the variable outcomes works well and I've played others with very static outcomes in which random chance could potentially break the whole game.\r\n\r\nSo just something to keep in mind.",
      "EditableFormat": "markdown",
      "HTML": "<p>Glad to be of help. Also wanted to add that the simplicity of your original idea is not necessarily a bad thing. Depending on how you want to game to play it can be a good idea to keep things simple and straight forwards. I suppose it comes down to how big of a part the battle between armies is to your game and how predictable you want them to be. I've played games where the variable outcomes works well and I've played others with very static outcomes in which random chance could potentially break the whole game.</p>\n<p>So just something to keep in mind.</p>\n\n",
      "PostDate": "2017-02-24T23:24:09.8419106Z",
      "LastEditDate": null
    },
    {
      "PostId": "79d19a8b-beca-4580-97ec-877397d5072c",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Simple works if simple is all you need...\r\nIf the guy with the biggest bat wins every time, you just need a bigger bat to beat him...\r\nBut it never gives an underdog a chance...\r\nGlad to help.\r\n(And a free Quest lesson... bonus!)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Simple works if simple is all you need...<br>\nIf the guy with the biggest bat wins every time, you just need a bigger bat to beat him...<br>\nBut it never gives an underdog a chance...<br>\nGlad to help.<br>\n(And a free Quest lesson... bonus!)</p>\n\n",
      "PostDate": "2017-02-25T05:31:31.391556Z",
      "LastEditDate": null
    }
  ]
}
