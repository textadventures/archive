{
  "Topic": {
    "TopicId": "ur5igvykxkiuddhx3jepdw",
    "ForumId": "18",
    "Title": "Repeating ProcessText",
    "LastUpdated": "2019-11-19T09:10:14.979452Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "57692b3c-585a-481c-8fc3-26ab099112e1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi folks!\r\n\r\nToday's random thought about the core code.\r\nThere are a few situations where it looks to me like the text processor has issues due to processing commands top-down. For example, if you put another text processor command inside the condition for an `{if` block, it won't work. The `{if` is changed to `@@@open@@@if` before it processes the parts within the if block. And then after it's done the inner bit, it wouldn't attempt the if again. It only turns the `@@@open@@@` back right before outputting the text. I can't see many situations where this would be useful, but I think it could be a hidden gotcha for anyone who expects it to work.\r\n\r\nSo off the top of my head, here's a simple change:\r\n```\r\n  <function name=\"ProcessText\" type=\"string\" parameters=\"text\">\r\n    data = NewDictionary()\r\n    dictionary add (data, \"fulltext\", text)\r\n    originaltext = text\r\n    text = ProcessTextSection(text, data)\r\n    text = Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\")\r\n    if (GetBoolean (game, \"slowtextprocessor\")) {\r\n      while (not text = originaltext and IsRegexMatch(\"\\{.+?\\}\", text)) {\r\n        originaltext = text\r\n        text = ProcessTextSection(text, data)\r\n        text = Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\")\r\n      }\r\n    }\r\n    return (text)\r\n  </function>\r\n```\r\n\r\nBasically, as long as the output from the text processor still contains `{` and `}` pairs (either because a transclusion or eval added them, or because a statement failed) the text processor runs again on the new string.\r\n\r\nIf a statement failed to evaluate the first time, but now succeeds because of changes made inside it, this will work fine. If a statement fails for reasons not related to other text processor commands inside it, it will still fail and the text processor will run  one more time to check, until all sections that can be processed have been.\r\n\r\nI've made it check for a boolean, `game.slowtextprocessor`, because this will be slow, and should only be enabled if necessary.\r\n\r\nI know this is random, it just popped into my head when I woke up this morning.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi folks!</p>\n<p>Today's random thought about the core code.<br>\nThere are a few situations where it looks to me like the text processor has issues due to processing commands top-down. For example, if you put another text processor command inside the condition for an <code>{if</code> block, it won't work. The <code>{if</code> is changed to <code>@@@open@@@if</code> before it processes the parts within the if block. And then after it's done the inner bit, it wouldn't attempt the if again. It only turns the <code>@@@open@@@</code> back right before outputting the text. I can't see many situations where this would be useful, but I think it could be a hidden gotcha for anyone who expects it to work.</p>\n<p>So off the top of my head, here's a simple change:</p>\n<pre><code>  &lt;function name=\"ProcessText\" type=\"string\" parameters=\"text\"&gt;\n    data = NewDictionary()\n    dictionary add (data, \"fulltext\", text)\n    originaltext = text\n    text = ProcessTextSection(text, data)\n    text = Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\")\n    if (GetBoolean (game, \"slowtextprocessor\")) {\n      while (not text = originaltext and IsRegexMatch(\"\\{.+?\\}\", text)) {\n        originaltext = text\n        text = ProcessTextSection(text, data)\n        text = Replace(Replace(text, \"@@@open@@@\", \"{\"), \"@@@close@@@\", \"}\")\n      }\n    }\n    return (text)\n  &lt;/function&gt;\n</code></pre>\n<p>Basically, as long as the output from the text processor still contains <code>{</code> and <code>}</code> pairs (either because a transclusion or eval added them, or because a statement failed) the text processor runs again on the new string.</p>\n<p>If a statement failed to evaluate the first time, but now succeeds because of changes made inside it, this will work fine. If a statement fails for reasons not related to other text processor commands inside it, it will still fail and the text processor will run  one more time to check, until all sections that can be processed have been.</p>\n<p>I've made it check for a boolean, <code>game.slowtextprocessor</code>, because this will be slow, and should only be enabled if necessary.</p>\n<p>I know this is random, it just popped into my head when I woke up this morning.</p>\n\n",
      "PostDate": "2019-11-19T09:10:14.979452Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
