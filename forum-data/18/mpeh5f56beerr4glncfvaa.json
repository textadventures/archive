{
  "Topic": {
    "TopicId": "mpeh5f56beerr4glncfvaa",
    "ForumId": "18",
    "Title": "Randomly picking from a dictionary",
    "LastUpdated": "2022-06-21T10:43:09.7409949Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "87e8a58e-2757-4dfe-bfcd-8f248a0e0221",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Since I had occasion to need to pick a random script from a dictionary, I thought I'd put the code I worked out eventually here, as there is no equivalent to the PickOne() function for dictionaries afaik.\r\n\r\nDictionary is keyed with 'one', 'two', etc.\r\n\r\n```\r\nx = GetRandomInt (1, DictionaryCount(this.dictionary))\r\ny = ToWords(x)\r\nforeach (key, this.dictionary) {\r\n  if (y=key) {\r\n    invoke (ScriptDictionaryItem (this.dictionary, y))\r\n  }\r\n}\r\n```\r\nAdding keys to the dictionary is easy too, just use ToWords and DictionaryCount(this.dictionary)+1 as the new key.",
      "EditableFormat": "markdown",
      "HTML": "<p>Since I had occasion to need to pick a random script from a dictionary, I thought I'd put the code I worked out eventually here, as there is no equivalent to the PickOne() function for dictionaries afaik.</p>\n<p>Dictionary is keyed with 'one', 'two', etc.</p>\n<pre><code>x = GetRandomInt (1, DictionaryCount(this.dictionary))\ny = ToWords(x)\nforeach (key, this.dictionary) {\n  if (y=key) {\n    invoke (ScriptDictionaryItem (this.dictionary, y))\n  }\n}\n</code></pre>\n<p>Adding keys to the dictionary is easy too, just use ToWords and DictionaryCount(this.dictionary)+1 as the new key.</p>\n\n",
      "PostDate": "2022-06-21T10:43:09.7409949Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eec438da-4047-4ef0-bc6a-8e5fc92d26ec",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This seems a weird solution.\r\n\r\nI can't see any situation in which a dictionary with predefined keys like this would be better than a list. You can always use numeric keys, and then call `ToWords` on them when you want to display them to the player.\r\n\r\nIt might be useful to pick a random key from a dictionary in some cases; in which case I'd expect to see something like this:\r\n```\r\nindex = GetRandomInt (1, DictionaryCount(somedictionary))\r\nforeach (key, somedictionary) {\r\n  index = index - 1\r\n  if (index = 0) {\r\n    selected_key = key\r\n    selected_value = DictionaryItem (somedictionary, key)\r\n  }\r\n}\r\n```\r\n\r\nBut for the dictionary you describe… why not just use a list?",
      "EditableFormat": "markdown",
      "HTML": "<p>This seems a weird solution.</p>\n<p>I can't see any situation in which a dictionary with predefined keys like this would be better than a list. You can always use numeric keys, and then call <code>ToWords</code> on them when you want to display them to the player.</p>\n<p>It might be useful to pick a random key from a dictionary in some cases; in which case I'd expect to see something like this:</p>\n<pre><code>index = GetRandomInt (1, DictionaryCount(somedictionary))\nforeach (key, somedictionary) {\n  index = index - 1\n  if (index = 0) {\n    selected_key = key\n    selected_value = DictionaryItem (somedictionary, key)\n  }\n}\n</code></pre>\n<p>But for the dictionary you describe… why not just use a list?</p>\n\n",
      "PostDate": "2022-06-21T16:51:42.6002677Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5e364335-d7fd-464e-b38e-df38b256b8f6",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Because it's a script dictionary, not a string dictionary. I want a random script selected from the dictionary. Why go to the extra step of making a list of the keys to randomly select from?\r\n\r\nThe exact context is that I want a command to pick a random script from the dictionary to determine the response. So I have the command attribute call the code above and pick a random key from the dictionary to do the script. Not sure how I would do that with lists?",
      "EditableFormat": "markdown",
      "HTML": "<p>Because it's a script dictionary, not a string dictionary. I want a random script selected from the dictionary. Why go to the extra step of making a list of the keys to randomly select from?</p>\n<p>The exact context is that I want a command to pick a random script from the dictionary to determine the response. So I have the command attribute call the code above and pick a random key from the dictionary to do the script. Not sure how I would do that with lists?</p>\n\n",
      "PostDate": "2022-06-21T17:09:00.2891354Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "11167793-7253-44f8-8d66-b4bf3595adda",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Because it's a script dictionary, not a string dictionary. I want a random script selected from the dictionary. Why go to the extra step of making a list of the keys to randomly select from?\r\n\r\nMaking an extra list to hold the keys is about 30 times less efficient than just putting the scripts in a list.\r\nUsing arbitrary keys to make a dictionary act like a list is around ~120 times less efficient. You're looping over the list every time, which will get bad fast if it's a big list.\r\n\r\nIs there any reason not to just put the scripts in a list?\r\n\r\nEdit: If you're using the desktop editor, I believe the GUI doesn't give you a way to create a list of scripts. I didn't think of this at first because the web editor has the same problem with scriptdictionarys, so I'm used to working with a bunch of initialisation scripts filled with `list add` and `dictionary add` instructions. So if you're working around the limitations of the editor, that kind of makes sense. Although in that case, it still seems more efficient to convert the dictionary to a list on startup rather than jumping through hoops every time you use it.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Because it's a script dictionary, not a string dictionary. I want a random script selected from the dictionary. Why go to the extra step of making a list of the keys to randomly select from?</p>\n</blockquote>\n<p>Making an extra list to hold the keys is about 30 times less efficient than just putting the scripts in a list.<br>\nUsing arbitrary keys to make a dictionary act like a list is around ~120 times less efficient. You're looping over the list every time, which will get bad fast if it's a big list.</p>\n<p>Is there any reason not to just put the scripts in a list?</p>\n<p>Edit: If you're using the desktop editor, I believe the GUI doesn't give you a way to create a list of scripts. I didn't think of this at first because the web editor has the same problem with scriptdictionarys, so I'm used to working with a bunch of initialisation scripts filled with <code>list add</code> and <code>dictionary add</code> instructions. So if you're working around the limitations of the editor, that kind of makes sense. Although in that case, it still seems more efficient to convert the dictionary to a list on startup rather than jumping through hoops every time you use it.</p>\n\n",
      "PostDate": "2022-06-21T19:31:42.2115265Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6a8706c1-f282-440a-96c3-e94fc293893c",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"If you're using the desktop editor, I believe the GUI doesn't give you a way to create a list of scripts.\"\r\n\r\nThis. I didn't even know it was possible to make a list of scripts. How does one go about that?  The functions etc in the docs seem to only cover stringlists and objectlists...",
      "EditableFormat": "markdown",
      "HTML": "<p>\"If you're using the desktop editor, I believe the GUI doesn't give you a way to create a list of scripts.\"</p>\n<p>This. I didn't even know it was possible to make a list of scripts. How does one go about that?  The functions etc in the docs seem to only cover stringlists and objectlists...</p>\n\n",
      "PostDate": "2022-06-22T15:06:33.7499631Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "acae3ad0-afd4-412b-b86b-8e326196d16b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As well as stringlists and objectlists, there are untyped lists; created using `NewList()` and you access items with `ListItem()`. An untyped list can have any type of data in it, including strings, scripts, objects, numbers, and other lists and dictionaries.\r\n\r\nOne gotcha is that you can't use the return value of `ListItem` as an argument to a built-in function.\r\n\r\nFor example:\r\n```\r\nif (ListItem (somelist, 0)) {\r\n```\r\nwill give an error, because `if` requires a boolean argument, and the declared return type of `ListItem` isn't boolean.\r\n\r\nBut this:\r\n```\r\nvalue = ListItem (somelist, 0)\r\nif (value) {\r\n```\r\nwill work fine, as long as the 0th item in the list is true or false.",
      "EditableFormat": "markdown",
      "HTML": "<p>As well as stringlists and objectlists, there are untyped lists; created using <code>NewList()</code> and you access items with <code>ListItem()</code>. An untyped list can have any type of data in it, including strings, scripts, objects, numbers, and other lists and dictionaries.</p>\n<p>One gotcha is that you can't use the return value of <code>ListItem</code> as an argument to a built-in function.</p>\n<p>For example:</p>\n<pre><code>if (ListItem (somelist, 0)) {\n</code></pre>\n<p>will give an error, because <code>if</code> requires a boolean argument, and the declared return type of <code>ListItem</code> isn't boolean.</p>\n<p>But this:</p>\n<pre><code>value = ListItem (somelist, 0)\nif (value) {\n</code></pre>\n<p>will work fine, as long as the 0th item in the list is true or false.</p>\n\n",
      "PostDate": "2022-06-22T17:30:32.8963936Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b89e054d-e50e-4bc6-835d-c356f888829f",
      "UserId": 593524,
      "Username": "ackthrice",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c2df0c7f44d1aebf391e46e96f5c619f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you! The docs make it seem like a regular list can still only have strings or objects in them. This does make a lot of sense.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you! The docs make it seem like a regular list can still only have strings or objects in them. This does make a lot of sense.</p>\n\n",
      "PostDate": "2022-06-22T20:15:19.5429358Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
