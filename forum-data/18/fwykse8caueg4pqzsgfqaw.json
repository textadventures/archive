{
  "Topic": {
    "TopicId": "fwykse8caueg4pqzsgfqaw",
    "ForumId": "18",
    "Title": "More list functions",
    "LastUpdated": "2018-03-22T15:15:01.4768182Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ffd6f4b6-aa8f-4499-a5f5-516ffda731d2",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey folks!\r\nI've found a few times that I'm writing extra functions to do something with a list, and I thought it might be good to roll out a function that will take care of most list-editing functions.\r\nThis is loosely based on the behaviour of Perl's `splice` function, which seems to do just about everything you might want. Anyone find this useful?\r\n\r\n<details>\r\n<summary>Some code...</summary>\r\n\r\n```\r\n<function name=\"ListSplice\" parameters=\"list, start, length, replacements\" type=\"list\"><![CDATA[\r\n  removed = NewList()\r\n  output = NewList()\r\n  original_length = length\r\n  original_replacements = replacements\r\n  if (TypeOf(start) = \"int\") {\r\n    if (start < 0) {\r\n      start = start + LengthOf(list)\r\n    }\r\n  }\r\n  else if (ListContains(list, start)) {\r\n    start = IndexOf(list, start)\r\n  }\r\n  else if (TypeOf(start) = \"null\"){\r\n    start = ListCount (list)\r\n  }\r\n  else if (not EndsWith(TypeOf(start), \"list\")) {\r\n    return (null)\r\n  }\r\n  if (TypeOf(length) = \"int\") {\r\n    if (length < 0) {\r\n      length = length + ListCount(list) - start\r\n    }\r\n  }\r\n  else if (TypeOf(length) = \"null\") {\r\n    length = ListCount(list)\r\n  }\r\n  copying = true\r\n  while (LengthOf(list) > 0) {\r\n    item = ListItem(list, 0)\r\n    if (copying) {\r\n      if (EndsWith(TypeOf(start), \"list\")) {\r\n        if (ListContains(start, item)) {\r\n          list remove (start, item)\r\n          copying = false\r\n        }\r\n        else if (start > 0) {\r\n          start = start - 1\r\n        }\r\n        else {\r\n          copying = false\r\n        }\r\n      }\r\n    }\r\n    if (copying) {\r\n      list add (output, item)\r\n    }\r\n    else {\r\n      if (not TypeOf(replacements) = \"null\") {\r\n        if (EndsWith(TypeOf(replacements), \"list\")) {\r\n          foreach (r, replacements) {\r\n            list add (output, r)\r\n          }\r\n          replacements = null\r\n        }\r\n        else {\r\n          list add (output, replacements)\r\n        }\r\n      }\r\n      if (not TypeOf(length) = \"int\") {\r\n        if (EndsWith(TypeOf(length), \"list\")) {\r\n          if (ListContains(length, item)) {\r\n            length = 0\r\n          }\r\n        }\r\n        if (Equal(item, length)) {\r\n          length = 0\r\n        }\r\n        list add (removed, item)\r\n      }\r\n      else if (length > 0) {\r\n        length = length - 1\r\n        list add (removed, item)\r\n      }\r\n      else {\r\n        list add (list, item)\r\n      }\r\n      if (Equal(length, 0) and EndsWith(TypeOf(start), \"list\")) {\r\n        length = original_length\r\n        replacements = original_replacements\r\n        copying = true\r\n      }\r\n    }\r\n    list remove (list, item)\r\n  }\r\n  foreach (item, output) {\r\n    list add (list, item)\r\n  }\r\n  return (removed)\r\n]]></function>\r\n```\r\n\r\n</details>\r\n\r\nThe command is:\r\n`ListSplice (list, start, length, replacements)`\r\n\r\nThis can add or remove elements from a list. It returns a list of the elements removed, in case you need them.\r\n\r\nArguments:\r\n* `list` - The list to modify\r\n* `start` - Where to start. It can be:\r\n  * A positive number - Number of the first element to remove\r\n  * A negative number - Number from the end of the list\r\n  * Zero - the elements are removed/inserted at the start of the list\r\n  * `null` - elements from `replacement` are inserted at the end of the list\r\n  * An object/string/whatever - remove the specified element from the list if it exists\r\n    * If it's not in the list, do nothing\r\n  * A list - as if the function was called for each of the elements in the list\r\n    * So if \"start\" is `Split(\"apple;banana;fish\")` and length is `2`, it will remove those three elements and the elements immediately after them\r\n* `length` - Where to stop removing elements. Can be:\r\n  * Zero - don't remove any elements; just insert `replacement` before the element specified by `start`\r\n  * A positive number - remove that number of elements, starting with the one specified by `start`\r\n  * A negative number - remove elements, leaving this number at the end of the list\r\n  * null - remove all elements from `start` to the end of the list\r\n  * A string/object/other - remove elements up to and including one that's equal to this element if it exists\r\n    * If it's not in the list, remove all elements to the end of the list\r\n    * If `length` is a list, remove elements up to and including any of the elements in it\r\n* `replacement` - What to replace the removed elements with, or what to insert.\r\n  * `null` - Don't insert anything, just remove\r\n  * A list - add these elements in place of the removed ones, or before the `start` element if nothing is removed\r\n  * Any other data type - replace *each* removed element with this value\r\n\r\n\r\nExamples:\r\n* `ListSplice (somelist, 0, 3, null)` - removes (and returns) the first 3 elements from somelist\r\n* `ListSplice (somelist, -3, null, null)` - removes (and returns) the last 3 elements from somelist\r\n* `ListSplice (somelist, 0, -3, null)` - removes (and returns) all except the last 3 elements from somelist\r\n* `ListSplice (somelist, -2, 1, \"Heee's coming!\")` - replaces the penultimate element of list with \"Heee's coming!\", and return what it was before\r\n* `ListSplice (somelist, null, 0, Split(\"a;b;c\"))` - adds 3 strings to the end of somelist\r\n* `ListSplice (somelist, \"turn left\", 1, \"No, your other left!\")` - replaces the first instance of \"turn left\" with \"No, your other left!\"\r\n* `ListSplice (somelist, \"D\", -2, \"Nyuk!\")` - replaces the element \"D\" if it exists, and all subsequent elements except the last two, with \"Nyuk!\"",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey folks!<br>\nI've found a few times that I'm writing extra functions to do something with a list, and I thought it might be good to roll out a function that will take care of most list-editing functions.<br>\nThis is loosely based on the behaviour of Perl's <code>splice</code> function, which seems to do just about everything you might want. Anyone find this useful?</p>\n<details>\n<summary>Some code...</summary>\n<pre><code>&lt;function name=\"ListSplice\" parameters=\"list, start, length, replacements\" type=\"list\"&gt;&lt;![CDATA[\n  removed = NewList()\n  output = NewList()\n  original_length = length\n  original_replacements = replacements\n  if (TypeOf(start) = \"int\") {\n    if (start &lt; 0) {\n      start = start + LengthOf(list)\n    }\n  }\n  else if (ListContains(list, start)) {\n    start = IndexOf(list, start)\n  }\n  else if (TypeOf(start) = \"null\"){\n    start = ListCount (list)\n  }\n  else if (not EndsWith(TypeOf(start), \"list\")) {\n    return (null)\n  }\n  if (TypeOf(length) = \"int\") {\n    if (length &lt; 0) {\n      length = length + ListCount(list) - start\n    }\n  }\n  else if (TypeOf(length) = \"null\") {\n    length = ListCount(list)\n  }\n  copying = true\n  while (LengthOf(list) &gt; 0) {\n    item = ListItem(list, 0)\n    if (copying) {\n      if (EndsWith(TypeOf(start), \"list\")) {\n        if (ListContains(start, item)) {\n          list remove (start, item)\n          copying = false\n        }\n        else if (start &gt; 0) {\n          start = start - 1\n        }\n        else {\n          copying = false\n        }\n      }\n    }\n    if (copying) {\n      list add (output, item)\n    }\n    else {\n      if (not TypeOf(replacements) = \"null\") {\n        if (EndsWith(TypeOf(replacements), \"list\")) {\n          foreach (r, replacements) {\n            list add (output, r)\n          }\n          replacements = null\n        }\n        else {\n          list add (output, replacements)\n        }\n      }\n      if (not TypeOf(length) = \"int\") {\n        if (EndsWith(TypeOf(length), \"list\")) {\n          if (ListContains(length, item)) {\n            length = 0\n          }\n        }\n        if (Equal(item, length)) {\n          length = 0\n        }\n        list add (removed, item)\n      }\n      else if (length &gt; 0) {\n        length = length - 1\n        list add (removed, item)\n      }\n      else {\n        list add (list, item)\n      }\n      if (Equal(length, 0) and EndsWith(TypeOf(start), \"list\")) {\n        length = original_length\n        replacements = original_replacements\n        copying = true\n      }\n    }\n    list remove (list, item)\n  }\n  foreach (item, output) {\n    list add (list, item)\n  }\n  return (removed)\n]]&gt;&lt;/function&gt;\n</code></pre>\n</details>\n<p>The command is:<br>\n<code>ListSplice (list, start, length, replacements)</code></p>\n<p>This can add or remove elements from a list. It returns a list of the elements removed, in case you need them.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>list</code> - The list to modify</li>\n<li><code>start</code> - Where to start. It can be:\n<ul>\n<li>A positive number - Number of the first element to remove</li>\n<li>A negative number - Number from the end of the list</li>\n<li>Zero - the elements are removed/inserted at the start of the list</li>\n<li><code>null</code> - elements from <code>replacement</code> are inserted at the end of the list</li>\n<li>An object/string/whatever - remove the specified element from the list if it exists\n<ul>\n<li>If it's not in the list, do nothing</li>\n</ul>\n</li>\n<li>A list - as if the function was called for each of the elements in the list\n<ul>\n<li>So if \"start\" is <code>Split(\"apple;banana;fish\")</code> and length is <code>2</code>, it will remove those three elements and the elements immediately after them</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>length</code> - Where to stop removing elements. Can be:\n<ul>\n<li>Zero - don't remove any elements; just insert <code>replacement</code> before the element specified by <code>start</code></li>\n<li>A positive number - remove that number of elements, starting with the one specified by <code>start</code></li>\n<li>A negative number - remove elements, leaving this number at the end of the list</li>\n<li>null - remove all elements from <code>start</code> to the end of the list</li>\n<li>A string/object/other - remove elements up to and including one that's equal to this element if it exists\n<ul>\n<li>If it's not in the list, remove all elements to the end of the list</li>\n<li>If <code>length</code> is a list, remove elements up to and including any of the elements in it</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>replacement</code> - What to replace the removed elements with, or what to insert.\n<ul>\n<li><code>null</code> - Don't insert anything, just remove</li>\n<li>A list - add these elements in place of the removed ones, or before the <code>start</code> element if nothing is removed</li>\n<li>Any other data type - replace <em>each</em> removed element with this value</li>\n</ul>\n</li>\n</ul>\n<p>Examples:</p>\n<ul>\n<li><code>ListSplice (somelist, 0, 3, null)</code> - removes (and returns) the first 3 elements from somelist</li>\n<li><code>ListSplice (somelist, -3, null, null)</code> - removes (and returns) the last 3 elements from somelist</li>\n<li><code>ListSplice (somelist, 0, -3, null)</code> - removes (and returns) all except the last 3 elements from somelist</li>\n<li><code>ListSplice (somelist, -2, 1, \"Heee's coming!\")</code> - replaces the penultimate element of list with \"Heee's coming!\", and return what it was before</li>\n<li><code>ListSplice (somelist, null, 0, Split(\"a;b;c\"))</code> - adds 3 strings to the end of somelist</li>\n<li><code>ListSplice (somelist, \"turn left\", 1, \"No, your other left!\")</code> - replaces the first instance of \"turn left\" with \"No, your other left!\"</li>\n<li><code>ListSplice (somelist, \"D\", -2, \"Nyuk!\")</code> - replaces the element \"D\" if it exists, and all subsequent elements except the last two, with \"Nyuk!\"</li>\n</ul>\n\n",
      "PostDate": "2018-03-22T15:15:01.4768182Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
