{
  "Topic": {
    "TopicId": "4uc4lqmsnuslsuwh_wimkg",
    "ForumId": "18",
    "Title": "Expanded Achievements for QuestJS",
    "LastUpdated": "2023-07-30T00:41:31.8049684Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "dd8b5ec4-aa44-4db7-8ad8-324d2dc43623",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This library is based on The Pixie's achievements feature in QuestJS 1.4. It's quite a good idea and implementation to reward the player, encourage exploration, and improve replayability. I wanted to do something a bit different, where the player could see a list of uncompleted achievements to help guide them, which didn't appear to be possible in the current system. Apart from that change, this library is otherwise very similar to the existing feature.\r\n\r\nInstead of creating achievements when they are completed, this library requires them to be defined when the game loads. Somewhat like a normal QuestJS object, each achievement has a ```name``` and an``` alias```, with the former being used to identify the object and the later being used to display. Each achievement also has a ```details``` and ```afterDetails```, which are displayed before and after the achievement is completed, respectively. Finally, each achievement has a ```condition``` function, which should return a boolean, true if the achievement should be complete, false if otherwise.\r\n\r\nEach turn, the condition functions for all uncompleted achievements are run. If any evaluate to true, a message is printed, and the date is saved to the achievement object.\r\n\r\nHere is the current code for the library:\r\n\r\n```javascript\r\n\"use strict\"\r\n\r\nfunction createAchievement(args) {\r\n  if (!args.name || typeof args.name !== 'string') errormsg(\"Achievement created without name.\")\r\n  if (!args.alias || typeof args.alias !== 'string') errormsg(`Achievement ${args.name}: created without alias.`)\r\n  if (!args.details || typeof args.details !== 'string') errormsg(`Achievement ${args.name}: created without details.`)\r\n  if (!args.afterDetails || typeof args.afterDetails !== 'string') errormsg(`Achievement ${args.name}: created without afterDetails.`)\r\n  if (!args.condition || typeof args.condition !== 'function') errormsg(`Achievement ${args.name}: created without condition.`)\r\n  achievements.achievements.push(args)\r\n}\r\n\r\nconst achievements = {\r\n  achievements: [],\r\n  \r\n  achievementsKey: \"QJS:\" + settings.title + \":achievements\",\r\n\r\n  getAchievements(achieved) {\r\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\r\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\r\n    return achieved ? achievements.filter(ach => { return !!ach.achieved }) : achievements.filter(ach => { return !ach.achieved })\r\n  },\r\n\r\n  getAllAchievements() {\r\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\r\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\r\n    return achievements.sort(function (a, b) {\r\n      if (!a.achieved && !!b.achieved) return -1\r\n      if (!b.achieved && !!a.achieved) return 1\r\n      if (!!a.achieved && !!b.achieved) return a.achieved - b.achieved\r\n      return a.name.localeCompare(b.name)\r\n    })\r\n  },\r\n\r\n  listAchievements(achievements) {\r\n    achievements.forEach(ach => {\r\n      msg(`${ach.achieved ? \"&#9745;\" : \"&#9744;\"} ${ach.alias} - ${ach.achieved ? ach.afterDetails : ach.details}${ach.achieved ? \" - \" + new Date(ach.achieved).toDateString() : ''}`)\r\n    })\r\n  },\r\n\r\n  setAchievement(name) {\r\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\r\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\r\n    const achievement = achievements.find(ach => { return ach.name === name })\r\n    if (!achievement.achieved) {\r\n      achievement.achieved = Date.now()\r\n      localStorage.setItem(this.achievementsKey, JSON.stringify(achievements))\r\n    }\r\n    msg(`Achievement unlocked: ${achievement.alias} - ${achievement.details}`)\r\n  },\r\n\r\n  endTurn() {\r\n    this.getAchievements(false).forEach(ach => {\r\n      const achievement = this.achievements.find(match => { return match.name === ach.name })\r\n        if (achievement.condition()) this.setAchievement(ach.name)\r\n      })\r\n  },\r\n\r\n  persistAchievements() {\r\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\r\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\r\n    this.achievements.forEach(achievement => {\r\n      if (!achievements.find(ach => { return achievement.name === ach.name })) achievements.push(achievement)\r\n    })\r\n    localStorage.setItem(this.achievementsKey, JSON.stringify(achievements))\r\n  },\r\n}\r\n\r\nsettings.modulesToEndTurn.push(achievements)\r\n```\r\n\r\nAnd here are the steps to install it:\r\n\r\n1. Copy ```achievements.js``` to the QuestJS ```/lib``` directory\r\n2. Add ```settings.customLibraries.push({folder:'lib',files:['achievements']})``` to ```settings.js```\r\n3. Add ```achievements.persistAchievements()``` to the ```settings.setup``` function\r\n\r\nYou can create an achievement like this:\r\n\r\n```javascript\r\n  createAchievement({\r\n    name:\"unique_achievement_id\",\r\n    alias:\"Cool Achievement Name!\",\r\n    details:\"Message to display before achievement is completed\",\r\n    afterDetails:\"Message to display after achievement is completed\",\r\n    condition:function(){\r\n        return (w.player.did_a_cool_thing}))\r\n    }\r\n  })\r\n```\r\n\r\nYou can use the following functions to retrieve and print a list of achievements:\r\n\r\n* _achievements.getAchievements_\r\n\r\nTakes a boolean, returns a list of completed achievements when passed ```true``` and uncompleted achievements when passed ```false```\r\n\r\n* _achievements.getAllAchievements_\r\n\r\nReturns a list of all possible achievements, sorted by name for uncompleted achievements and date achieved for completed achievements\r\n\r\n* _achievements.listAchievements_\r\n\r\nTakes a list of achievements and prints them to the screen\r\n\r\n☐ Uncompleted Achievement - This is what's in details!\r\n\r\n☑ Completed Achievement - This is what's in afterDetails! - Sat Jul 29 2023\r\n\r\nAnd here's a link to the github, in case I need to fix any bugs:\r\n\r\nhttps://github.com/cellarderecho/derecho-quest-libs/tree/main/achievements",
      "EditableFormat": "markdown",
      "HTML": "<p>This library is based on The Pixie's achievements feature in QuestJS 1.4. It's quite a good idea and implementation to reward the player, encourage exploration, and improve replayability. I wanted to do something a bit different, where the player could see a list of uncompleted achievements to help guide them, which didn't appear to be possible in the current system. Apart from that change, this library is otherwise very similar to the existing feature.</p>\n<p>Instead of creating achievements when they are completed, this library requires them to be defined when the game loads. Somewhat like a normal QuestJS object, each achievement has a <code>name</code> and an<code>alias</code>, with the former being used to identify the object and the later being used to display. Each achievement also has a <code>details</code> and <code>afterDetails</code>, which are displayed before and after the achievement is completed, respectively. Finally, each achievement has a <code>condition</code> function, which should return a boolean, true if the achievement should be complete, false if otherwise.</p>\n<p>Each turn, the condition functions for all uncompleted achievements are run. If any evaluate to true, a message is printed, and the date is saved to the achievement object.</p>\n<p>Here is the current code for the library:</p>\n<pre><code>\"use strict\"\n\nfunction createAchievement(args) {\n  if (!args.name || typeof args.name !== 'string') errormsg(\"Achievement created without name.\")\n  if (!args.alias || typeof args.alias !== 'string') errormsg(`Achievement ${args.name}: created without alias.`)\n  if (!args.details || typeof args.details !== 'string') errormsg(`Achievement ${args.name}: created without details.`)\n  if (!args.afterDetails || typeof args.afterDetails !== 'string') errormsg(`Achievement ${args.name}: created without afterDetails.`)\n  if (!args.condition || typeof args.condition !== 'function') errormsg(`Achievement ${args.name}: created without condition.`)\n  achievements.achievements.push(args)\n}\n\nconst achievements = {\n  achievements: [],\n  \n  achievementsKey: \"QJS:\" + settings.title + \":achievements\",\n\n  getAchievements(achieved) {\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\n    return achieved ? achievements.filter(ach =&gt; { return !!ach.achieved }) : achievements.filter(ach =&gt; { return !ach.achieved })\n  },\n\n  getAllAchievements() {\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\n    return achievements.sort(function (a, b) {\n      if (!a.achieved &amp;&amp; !!b.achieved) return -1\n      if (!b.achieved &amp;&amp; !!a.achieved) return 1\n      if (!!a.achieved &amp;&amp; !!b.achieved) return a.achieved - b.achieved\n      return a.name.localeCompare(b.name)\n    })\n  },\n\n  listAchievements(achievements) {\n    achievements.forEach(ach =&gt; {\n      msg(`${ach.achieved ? \"&amp;#9745;\" : \"&amp;#9744;\"} ${ach.alias} - ${ach.achieved ? ach.afterDetails : ach.details}${ach.achieved ? \" - \" + new Date(ach.achieved).toDateString() : ''}`)\n    })\n  },\n\n  setAchievement(name) {\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\n    const achievement = achievements.find(ach =&gt; { return ach.name === name })\n    if (!achievement.achieved) {\n      achievement.achieved = Date.now()\n      localStorage.setItem(this.achievementsKey, JSON.stringify(achievements))\n    }\n    msg(`Achievement unlocked: ${achievement.alias} - ${achievement.details}`)\n  },\n\n  endTurn() {\n    this.getAchievements(false).forEach(ach =&gt; {\n      const achievement = this.achievements.find(match =&gt; { return match.name === ach.name })\n        if (achievement.condition()) this.setAchievement(ach.name)\n      })\n  },\n\n  persistAchievements() {\n    const achievementsJSON = localStorage.getItem(this.achievementsKey)\n    const achievements = achievementsJSON ? JSON.parse(achievementsJSON) : []\n    this.achievements.forEach(achievement =&gt; {\n      if (!achievements.find(ach =&gt; { return achievement.name === ach.name })) achievements.push(achievement)\n    })\n    localStorage.setItem(this.achievementsKey, JSON.stringify(achievements))\n  },\n}\n\nsettings.modulesToEndTurn.push(achievements)\n</code></pre>\n<p>And here are the steps to install it:</p>\n<ol>\n<li>Copy <code>achievements.js</code> to the QuestJS <code>/lib</code> directory</li>\n<li>Add <code>settings.customLibraries.push({folder:'lib',files:['achievements']})</code> to <code>settings.js</code></li>\n<li>Add <code>achievements.persistAchievements()</code> to the <code>settings.setup</code> function</li>\n</ol>\n<p>You can create an achievement like this:</p>\n<pre><code>  createAchievement({\n    name:\"unique_achievement_id\",\n    alias:\"Cool Achievement Name!\",\n    details:\"Message to display before achievement is completed\",\n    afterDetails:\"Message to display after achievement is completed\",\n    condition:function(){\n        return (w.player.did_a_cool_thing}))\n    }\n  })\n</code></pre>\n<p>You can use the following functions to retrieve and print a list of achievements:</p>\n<ul>\n<li><em>achievements.getAchievements</em></li>\n</ul>\n<p>Takes a boolean, returns a list of completed achievements when passed <code>true</code> and uncompleted achievements when passed <code>false</code></p>\n<ul>\n<li><em>achievements.getAllAchievements</em></li>\n</ul>\n<p>Returns a list of all possible achievements, sorted by name for uncompleted achievements and date achieved for completed achievements</p>\n<ul>\n<li><em>achievements.listAchievements</em></li>\n</ul>\n<p>Takes a list of achievements and prints them to the screen</p>\n<p>☐ Uncompleted Achievement - This is what's in details!</p>\n<p>☑ Completed Achievement - This is what's in afterDetails! - Sat Jul 29 2023</p>\n<p>And here's a link to the github, in case I need to fix any bugs:</p>\n<p>https://github.com/cellarderecho/derecho-quest-libs/tree/main/achievements</p>\n\n",
      "PostDate": "2023-07-30T00:41:31.8049684Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "479091ee-5789-4282-8aa1-cd9a502642f2",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is good. Would you be happy for it to be added (slightly edited) to QuestJS?\r\n\r\nI think `achievements.persistAchievements()` can go on the end of the achievements.js file, making it easier for authors, unless you know otherwise?",
      "EditableFormat": "markdown",
      "HTML": "<p>This is good. Would you be happy for it to be added (slightly edited) to QuestJS?</p>\n<p>I think <code>achievements.persistAchievements()</code> can go on the end of the achievements.js file, making it easier for authors, unless you know otherwise?</p>\n\n",
      "PostDate": "2023-08-09T09:44:10.6154715Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4a23730a-c8e5-427c-9640-413897be7cc3",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I ended up pretty much re-wring it. The new version combines the old and what you have above. The `createAchievement` behaves just the same, so you should be able to swap pretty easily. You need to do `settings.libraries.push('achievements')` to include the file. There is also an ACHIEVEMENTS command now.\r\n\r\nMore details here:\r\n\r\nhttps://github.com/ThePix/QuestJS/wiki/Achievements",
      "EditableFormat": "markdown",
      "HTML": "<p>I ended up pretty much re-wring it. The new version combines the old and what you have above. The <code>createAchievement</code> behaves just the same, so you should be able to swap pretty easily. You need to do <code>settings.libraries.push('achievements')</code> to include the file. There is also an ACHIEVEMENTS command now.</p>\n<p>More details here:</p>\n<p>https://github.com/ThePix/QuestJS/wiki/Achievements</p>\n\n",
      "PostDate": "2023-08-11T11:42:11.1630716Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "23ca0eb2-17d6-4178-8e12-8cebddeac830",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nicely done! I had a similar idea to eliminate ```persistAchievements()``` by combining it with ```createAchievement```, but your implementation is much better. There were two minor changes that I made after posting that could be included in your version, if you agree.\r\n\r\nFirst, I updated ```createAchievement``` to exit the function early if anything critical is missing. For your version, I think this would just be ```name``` and ```details```.\r\n\r\nSecond, I updated localeCompare (line 46 in your version) to compare the ```alias``` instead of the ```name```.\r\n\r\nThanks for taking the time to improve this, I hope other people find it useful!",
      "EditableFormat": "markdown",
      "HTML": "<p>Nicely done! I had a similar idea to eliminate <code>persistAchievements()</code> by combining it with <code>createAchievement</code>, but your implementation is much better. There were two minor changes that I made after posting that could be included in your version, if you agree.</p>\n<p>First, I updated <code>createAchievement</code> to exit the function early if anything critical is missing. For your version, I think this would just be <code>name</code> and <code>details</code>.</p>\n<p>Second, I updated localeCompare (line 46 in your version) to compare the <code>alias</code> instead of the <code>name</code>.</p>\n<p>Thanks for taking the time to improve this, I hope other people find it useful!</p>\n\n",
      "PostDate": "2023-08-12T14:21:59.7748157Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
