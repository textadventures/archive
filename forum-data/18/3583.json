{
  "Topic": {
    "TopicId": "3583",
    "ForumId": "18",
    "Title": "Inject Javascript from ASLX file",
    "LastUpdated": "2013-05-23T01:19:16+01:00",
    "ReplyCount": 3
  },
  "Posts": [
    {
      "PostId": "23767",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Here's another bit of esoterica. But if you're using Javascript, it might come in handy.\n\nThe attached file has a simple function that allows you to inject Javascript onto the current page from an ASLX file as opposed to having it statically in an associated .js file.\n\nAdvantages:\n- You can keep your Javascript in the same file as your ASLX code\n- You can, if necessary, generate custom Javascript on the fly.\n- You can choose to only insert Javascript when you actually need it.\n\nDisadvantages:\nIf you store your JS in a string attribute on an object (e.g. the game), keep in mind that all newlines are removed, meaning that the entire  bit of JS code ends up on a single line. This means:\n- You can't have &quot;to end of line&quot; comments (those starting with //) as it will comment out all following code.\n- You must terminate all your JS statements with a &quot;;&quot;, as there are no line ends to give you the implicit statement end.\n- Also, with each ClearScreen, you will most likely need to inject the Javascript again (as you do, for example, with style sheets).\n\nClearly, if you have large JS libaries, you will want to keep them as .js files. But for small pieces, or if you're doing some experimentation, (or if you're distributing an ASLX library that needs to also include some Javascript), then it might be handy to keep the JS code with your aslx code.\n\nSample:\n(You would need to include InjectJavascript.js in your project)\n\n[code:o39znry4]&lt;game&gt;\n&#46;&#46;&#46;\n    &lt;js&gt; &lt;!&#91;CDATA&#91;\n    function setText(layer, text) {\n      var element = document&#46;getElementById(layer)\n      element&#46;innerHTML=text;\n    }\n    &#93;&#93;&gt;&lt;/js&gt;\n&lt;/game&gt;[/code:o39znry4]\n\nThen at some point, you can simply do:\n\n[code:o39znry4]JS&#46;InjectJavascript(game&#46;js)[/code:o39znry4]\nto install the function.\n\nThen you can do something like:\n\n[code:o39znry4]JS&#46;setText(layer, &quot;This is new layer text&quot;)[/code:o39znry4]\nto invoke it.\n\nThe Javascript code in the attachment is simple:\n\n[code:o39znry4]function InjectJavascript(script) {\n    var elem = document&#46;createElement(&quot;script&quot;);\n    elem&#46;innerHTML = script;\n    var tag = document&#46;getElementsByTagName(&quot;script&quot;)&#91;0&#93;;\n    tag&#46;parentNode&#46;insertBefore(elem, tag);\n}[/code:o39znry4]",
      "EditableFormat": "bbcode",
      "HTML": "Here's another bit of esoterica. But if you're using Javascript, it might come in handy.<br/><br/>The attached file has a simple function that allows you to inject Javascript onto the current page from an ASLX file as opposed to having it statically in an associated .js file.<br/><br/>Advantages:<br/>- You can keep your Javascript in the same file as your ASLX code<br/>- You can, if necessary, generate custom Javascript on the fly.<br/>- You can choose to only insert Javascript when you actually need it.<br/><br/>Disadvantages:<br/>If you store your JS in a string attribute on an object (e.g. the game), keep in mind that all newlines are removed, meaning that the entire  bit of JS code ends up on a single line. This means:<br/>- You can't have &quot;to end of line&quot; comments (those starting with //) as it will comment out all following code.<br/>- You must terminate all your JS statements with a &quot;;&quot;, as there are no line ends to give you the implicit statement end.<br/>- Also, with each ClearScreen, you will most likely need to inject the Javascript again (as you do, for example, with style sheets).<br/><br/>Clearly, if you have large JS libaries, you will want to keep them as .js files. But for small pieces, or if you're doing some experimentation, (or if you're distributing an ASLX library that needs to also include some Javascript), then it might be handy to keep the JS code with your aslx code.<br/><br/>Sample:<br/>(You would need to include InjectJavascript.js in your project)<br/><br/><pre><code>&lt;game&gt;<br/>&#46;&#46;&#46;<br/>    &lt;js&gt; &lt;!&#91;CDATA&#91;<br/>    function setText(layer, text) {<br/>      var element = document&#46;getElementById(layer)<br/>      element&#46;innerHTML=text;<br/>    }<br/>    &#93;&#93;&gt;&lt;/js&gt;<br/>&lt;/game&gt;</code></pre><br/><br/>Then at some point, you can simply do:<br/><br/><pre><code>JS&#46;InjectJavascript(game&#46;js)</code></pre><br/>to install the function.<br/><br/>Then you can do something like:<br/><br/><pre><code>JS&#46;setText(layer, &quot;This is new layer text&quot;)</code></pre><br/>to invoke it.<br/><br/>The Javascript code in the attachment is simple:<br/><br/><pre><code>function InjectJavascript(script) {<br/>    var elem = document&#46;createElement(&quot;script&quot;);<br/>    elem&#46;innerHTML = script;<br/>    var tag = document&#46;getElementsByTagName(&quot;script&quot;)&#91;0&#93;;<br/>    tag&#46;parentNode&#46;insertBefore(elem, tag);<br/>}</code></pre><div><a href=\"/attachment/570\">InjectJavascript.zip</a></div>",
      "PostDate": "2013-03-29T23:14:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "24691",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "What's the difference between using this library and using[code:1s5e1cyn]JS&#46;eval (game&#46;js)[/code:1s5e1cyn]? Or is it basically the same thing?",
      "EditableFormat": "bbcode",
      "HTML": "What's the difference between using this library and using<pre><code>JS&#46;eval (game&#46;js)</code></pre>? Or is it basically the same thing?",
      "PostDate": "2013-05-22T23:52:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24692",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I haven't tried the JS.eval approach. Perhaps that's a better way. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I haven't tried the JS.eval approach. Perhaps that's a better way. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-05-23T00:30:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "24696",
      "UserId": 0,
      "Username": "Sora574",
      "UserAvatar": null,
      "UserGravatar": "5691c27a3aa3e56e879a3f8545b28ef2",
      "EditableText": "There's several other ways you could do it, too.\nFor example, to put it straight into the HTML, you could use\n[code:14ii25mu]JS&#46;eval (&quot;$('head')&#46;append('&lt;script type=\\&quot;text/javascript\\&quot;&gt;&quot; + game&#46;js + &quot;&lt;/script&gt;');&quot;)[/code:14ii25mu]\nThis would solve the problem of when you use 'ClearScreen' the scripts go away.\n\nNOTE: I didn't actually test that. I'm just kind of guessing <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "There's several other ways you could do it, too.<br/>For example, to put it straight into the HTML, you could use<br/><pre><code>JS&#46;eval (&quot;$('head')&#46;append('&lt;script type=\\&quot;text/javascript\\&quot;&gt;&quot; + game&#46;js + &quot;&lt;/script&gt;');&quot;)</code></pre><br/>This would solve the problem of when you use 'ClearScreen' the scripts go away.<br/><br/>NOTE: I didn't actually test that. I'm just kind of guessing <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-05-23T01:19:16+01:00",
      "LastEditDate": null
    }
  ]
}
