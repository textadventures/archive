{
  "Topic": {
    "TopicId": "4317",
    "ForumId": "18",
    "Title": "Time and Date Coding",
    "LastUpdated": "2014-05-06T21:31:29+01:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "28670",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Pixie's Clock Library, is still a bit too complex for me, and it also (currently) just allows for you to only increase the minimum unit of time, so I've been trying to work on making my own coding for date~time stuff, and I've just finally figured out a design method to be able to increase any unit of time~date, which I'll show below. As I develop a code system of mine own, I'll update this thread with it. Now that I've found the design method, it seems so obvious, but it took me a long time to figure it out, lol.\n\nhere's my design method for being able to increase any unit of time~date:\n\nThis is for directly increasing these units (the first part of the trick):\n\n(HK edited)\nsecond_count = Value\nminute_count = Value\nhour_count = Value\nday_count = Value\nmonth_count = Value\nyear_count = Value\n\nsecond_count = second_count + Value\nminute_count = minute_count + Value\nhour_count = hour_count + Value\nday_count = day_count + Value\nmonth_count = month_count + Value\nyear_count = year_count + Value\n\nnow, the (second and big part of the) trick, to enable your date~time clocking to stay correct:\n\n// second_integer = second_count\nminute_integer = second_integer / 60 + minute_count\nhour_integer = minute_integer / 60 + hour_count\nday_integer = hour_integer / 24 + day_count\nmonth_integer = day_integer / (28 or 29 or 30 or 31 ~ extra coding required ~ not covering it here) + month_count\nyear_integer = month_integer / 12 + year_count\n\nand then the 'clock' code lines:\n\nclock_second = second_integer % 60\nclock_minute = minute_integer % 60\nclock_hour = hour_integer % 24\nclock_day = day_integer % (28 or 29 or 30 or 31 ~ extra coding required ~ not covering it here)\nclock_month = month_integer % 12\n\n*** I know we need the &quot;changed&quot; Script lines included here, but I'll add them in later, when I got my entire code system done.\n\n*** There's also a lot more code lines of stuff needed as well, but I'm getting there... eventually... as I find the time to do so.\n\nI hope this design method works, anyways. If you do spot any glaring issue with this design method not working correctly, let me know, as I can't see any issue myself.\n\n(I've no idea if this design method can handle increasing multiple units, for example: +6 mins and 54 secs, so if you can make sense of whether this can or can't, please let me know, lol. I'll need at least another full day to try to mentally figure this out myself, if I even can, lol)",
      "EditableFormat": "bbcode",
      "HTML": "Pixie's Clock Library, is still a bit too complex for me, and it also (currently) just allows for you to only increase the minimum unit of time, so I've been trying to work on making my own coding for date~time stuff, and I've just finally figured out a design method to be able to increase any unit of time~date, which I'll show below. As I develop a code system of mine own, I'll update this thread with it. Now that I've found the design method, it seems so obvious, but it took me a long time to figure it out, lol.<br/><br/>here's my design method for being able to increase any unit of time~date:<br/><br/>This is for directly increasing these units (the first part of the trick):<br/><br/>(HK edited)<br/>second_count = Value<br/>minute_count = Value<br/>hour_count = Value<br/>day_count = Value<br/>month_count = Value<br/>year_count = Value<br/><br/>second_count = second_count + Value<br/>minute_count = minute_count + Value<br/>hour_count = hour_count + Value<br/>day_count = day_count + Value<br/>month_count = month_count + Value<br/>year_count = year_count + Value<br/><br/>now, the (second and big part of the) trick, to enable your date~time clocking to stay correct:<br/><br/>// second_integer = second_count<br/>minute_integer = second_integer / 60 + minute_count<br/>hour_integer = minute_integer / 60 + hour_count<br/>day_integer = hour_integer / 24 + day_count<br/>month_integer = day_integer / (28 or 29 or 30 or 31 ~ extra coding required ~ not covering it here) + month_count<br/>year_integer = month_integer / 12 + year_count<br/><br/>and then the 'clock' code lines:<br/><br/>clock_second = second_integer % 60<br/>clock_minute = minute_integer % 60<br/>clock_hour = hour_integer % 24<br/>clock_day = day_integer % (28 or 29 or 30 or 31 ~ extra coding required ~ not covering it here)<br/>clock_month = month_integer % 12<br/><br/>*** I know we need the &quot;changed&quot; Script lines included here, but I'll add them in later, when I got my entire code system done.<br/><br/>*** There's also a lot more code lines of stuff needed as well, but I'm getting there... eventually... as I find the time to do so.<br/><br/>I hope this design method works, anyways. If you do spot any glaring issue with this design method not working correctly, let me know, as I can't see any issue myself.<br/><br/>(I've no idea if this design method can handle increasing multiple units, for example: +6 mins and 54 secs, so if you can make sense of whether this can or can't, please let me know, lol. I'll need at least another full day to try to mentally figure this out myself, if I even can, lol)",
      "PostDate": "2014-05-05T03:28:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28671",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "A couple of thoughts:\n\n1) I'm not sure what &quot;Value&quot; is in your first part and why it's being added to all the different elements simultaneously. Perhaps it's meant to be different values for different units (e.g. second_value, minute_value, etc)?\n\n2) I think you need to decide whether you're doing elapsed time or absolute date time. By that I mean, when you start the game, are all the counts zero, or are they set to the current date somehow? The implementations will differ depending. The reason for this is that you're getting into months and years, and the complexity of &quot;how many days are in a month&quot; raises its ugly head (as your note indicates) as the number of days in the month depends on what month it is. And that can only be calculated from an absolute sort of date time. You could arbitrarily assign the beginning of your game to a date to give it a frame of reference (in which case, it's not elapsed time - hence my question). I can appreciate your ambition, but you might want to do an initial implementation to the day level and then see if you even need to go to months. Again, it depends on whether you're counting (relative) elapsed time from start of game or trying to simulate an actual (absolute) date.\n\nThe other confusion is which of the variables are your actual tracking ones. At the core, you will have variables that represent your time. It seems in this case that it's the &quot;_count&quot; ones, and all the rest are computed from those. If that's the case, then you don't need to keep all the intermediate ones. Perhaps the &quot;_count&quot; variables to hold the time you update and the &quot;clock_&quot; ones to represent what someone would see. The others in between don't need to be kept.\n\nFinally, your algorithm also implies that the base level time variables are not kept normalized. In other words, if you keep adding seconds over and over, then the seconds_count variable will keep going up, but the others never will. They will remain 0 forever. And you're relying on code further downstream to normalize things. You might save yourself some grief (and variables) if you just normalize the base ones rather then generate the almost-normalized intermediate &quot;integer&quot; ones. In other words:\n\n1) Update your counts with the value deltas.\n2) Perform the calculations back on the &quot;_count&quot; variables, not onto new &quot;_integer&quot; ones. That is:\n[code:unaqn21u]    minutes_count = minutes_count + seconds_count/60    // add seconds to minutes\n    seconds_count = seconds_count % 60                           // normalize seconds\n    hours_count = hours_count + minutes_count/60           // add minutes to hours\n    minutes_count = minutes_count % 60                          // normalize minutes\n   etc&#46;[/code:unaqn21u]\n3) Use those directly to calculate the clock.\n\nMost time keeping systems don't even bother with different variables. They just track seconds (or some fraction thereof) and just convert to display format when needed. You'd have a single variables &quot;seconds&quot; and just derive the other units from it as needed, with some variant of what we have seen. (I thought I had offered some code to you before that does this. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "EditableFormat": "bbcode",
      "HTML": "A couple of thoughts:<br/><br/>1) I'm not sure what &quot;Value&quot; is in your first part and why it's being added to all the different elements simultaneously. Perhaps it's meant to be different values for different units (e.g. second_value, minute_value, etc)?<br/><br/>2) I think you need to decide whether you're doing elapsed time or absolute date time. By that I mean, when you start the game, are all the counts zero, or are they set to the current date somehow? The implementations will differ depending. The reason for this is that you're getting into months and years, and the complexity of &quot;how many days are in a month&quot; raises its ugly head (as your note indicates) as the number of days in the month depends on what month it is. And that can only be calculated from an absolute sort of date time. You could arbitrarily assign the beginning of your game to a date to give it a frame of reference (in which case, it's not elapsed time - hence my question). I can appreciate your ambition, but you might want to do an initial implementation to the day level and then see if you even need to go to months. Again, it depends on whether you're counting (relative) elapsed time from start of game or trying to simulate an actual (absolute) date.<br/><br/>The other confusion is which of the variables are your actual tracking ones. At the core, you will have variables that represent your time. It seems in this case that it's the &quot;_count&quot; ones, and all the rest are computed from those. If that's the case, then you don't need to keep all the intermediate ones. Perhaps the &quot;_count&quot; variables to hold the time you update and the &quot;clock_&quot; ones to represent what someone would see. The others in between don't need to be kept.<br/><br/>Finally, your algorithm also implies that the base level time variables are not kept normalized. In other words, if you keep adding seconds over and over, then the seconds_count variable will keep going up, but the others never will. They will remain 0 forever. And you're relying on code further downstream to normalize things. You might save yourself some grief (and variables) if you just normalize the base ones rather then generate the almost-normalized intermediate &quot;integer&quot; ones. In other words:<br/><br/>1) Update your counts with the value deltas.<br/>2) Perform the calculations back on the &quot;_count&quot; variables, not onto new &quot;_integer&quot; ones. That is:<br/><pre><code>    minutes_count = minutes_count + seconds_count/60    // add seconds to minutes<br/>    seconds_count = seconds_count % 60                           // normalize seconds<br/>    hours_count = hours_count + minutes_count/60           // add minutes to hours<br/>    minutes_count = minutes_count % 60                          // normalize minutes<br/>   etc&#46;</code></pre><br/>3) Use those directly to calculate the clock.<br/><br/>Most time keeping systems don't even bother with different variables. They just track seconds (or some fraction thereof) and just convert to display format when needed. You'd have a single variables &quot;seconds&quot; and just derive the other units from it as needed, with some variant of what we have seen. (I thought I had offered some code to you before that does this. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> )",
      "PostDate": "2014-05-05T12:05:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28672",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I should have explained more of what I posted, so my apologizes.\n\n1. it's just for completeness (for noobs on how to do...), the addition code lines. So, 'Value' would just be whatever amount that you want to increase to~for that specific unit.\n\n2. the start date~time can be whatever, though I'll see about these issues (such as dealing with leap year and etc) you raise as I slowly develop an entire system of it.\n\nyes, for the days, I'd need (for just explaining): &quot;if (month_string = &quot;january&quot;), days = 31&quot;. I'll have this code stuff when I got my full system done. But, my purpose initially for this post, is just to show how you can (conceptually) set up a 'clock code' design method, where you can increase any unit, and not just a single unit, while keeping it (clock date~time) still working correctly.\n\nthis is going to be hard to explain. as my initial post is already not making sense resulting in your post about it, laughs. hmm...\n\nthe '_counts' is purely the total of the added~increased amounts for that unit. This (in my unstanding of it) is needed, to allow the clock's date~time string ( ' XhrsX:XminsX:XsecsX ' Time, and ' XmonthX(space)XdayX, XyearX ' or ' XmonthX-XdayX-XyearX ' Date ) correct, as it will otherwise cause it to mess up, if you don't separate the two variables ('_count' and '_integer') as the two variables that they are.\n\nand the '_integer = _integer / Value + _count' (in my understanding) is required as well to keep it correct too. It took my brain a lot of thinking to this understanding, so I hope it wasn't in vain, lol, I hope I got it understood correctly, laughs. I'm not sure if I can come up with a proof of hopefully why this design (of the two variables~attributes: '_count' and '_integer' ) is required, but I'll try to show my thinking on it...\n\nsecond_count = Value\nminute_count = Value\nhour_count = Value\nday_count = Value\nminute_integer = second_count / 60 + minute_count\nhour_integer = minute_integer / 60 + hour_count\nday_integer = hour_integer / 24 + day_count\n\nsecond_count = 60\nminute_count = 0\nhour_count = 0\nsecond_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)\nminute_integer = 60 / 60 + 0 -&gt; 1 min -&gt; 1 % 60 -&gt; XX:01:00 (hrs:mins:secs)\nhour_integer = 1 / 60 + 0 -&gt; 0 + 0 -&gt; 0 hr -&gt; 0 % 60 -&gt; 00:01:00 (hrs:mins:secs)\n// the 'clock time~date' matches up with the '_counts' total time~date\n\nsecond_count = 30\nminute_count = 60\nhour_count = 0\nsecond_integer -&gt; 30 sec -&gt; 30 % 60 -&gt; XX:XX:30 (hrs:mins:secs)\nminute_integer = 30 / 60 + 60 -&gt; 0 + 60 -&gt; 60 min -&gt; 60 % 60 -&gt; XX:00:30 (hrs:mins:secs)\nhour_integer = 60 / 60 + 0 -&gt; 1 + 0 -&gt; 1 hr -&gt; 1 % 60 -&gt; 01:00:30 (hrs:mins:secs)\n// the 'clock time~date' matches up with the '_counts' total time~date\n\nsecond_count = 60\nminute_count = 60\nhour_count = 60\nday_count = 0\nsecond_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)\nminute_integer = 60 / 60 + 60 -&gt; 1 + 60 -&gt; 61 min -&gt; 61 % 60 -&gt; XX:01:00 (hrs:mins:secs)\nhour_integer = 60 / 60 + 60 -&gt; 1 + 60 -&gt; 61 hr -&gt; 61 % 60 -&gt; 01:00:30 (hrs:mins:secs)\nday_integer = 61 / 60 + 0 -&gt; 1 + 0 -&gt; 1 day -&gt; 1 / 24 -&gt; 01:01:00:30 (days:hrs:mins:secs)\n// the 'clock time~date' matches up with the '_counts' total time~date\n\nsecond_count = 60\nminute_count = 30\nhour_count = 0\nsecond_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)\nminute_integer = 60 / 60 + 30 -&gt; 1 + 30 -&gt; 31 min -&gt; 31 % 60 -&gt; XX:31:00 (hrs:mins:secs)\nhour_integer = 31 / 60 + 0 -&gt; 0 + 0 -&gt; 0 hr -&gt; 0 % 60 -&gt; 00:31:00 (hrs:mins:secs)\n// the 'clock time~date' matches up with the '_counts' total time~date\n\n// also, you can increase the units again and again, without messing up the clock time~date as well, as I believe it will get messed up by not having the '_count' separated as it's own attribute from the '_integer' attribute, and '_integer' attribute is able to be aware of both a change directly by an increase to the unit, and through the effect of increasing another (a 'lower~more basic') unit, which then changes a 'higher~less basic' unit, without the clock date~time being messed up (via an &quot;over or double counting&quot; the increasing of units).\n\nhopefully, from these 4 tests, you can now see how I think you really do require the '_count' and '_integer' variables~attributes.\n\n3. I want a design method that enables you to increase to any unit, and not just a single unit, which all the other units are then adjusted from that single unit (Pixie already has such a Clock Library for this, and, ah, it was you who also helped me also with clock coding, hehe. I couldn't remember who else had helped~shown me clock coding, lol. I should've known it was you, argh!).\n\nFor an example, you got 3 different actions in your game, action_1 progresses the game by 30 secs, action_2 progresses the game by 5 hrs, and action_3 progresses the game by 21 minutes. So, to keep the clock time~date correct, along with this ability of being able to specify the unit and its amount of increase, I believe that my design method is required, you must have 2 attributes~variables, a '_count' and a '_integer&quot;, in order for it to work.",
      "EditableFormat": "bbcode",
      "HTML": "I should have explained more of what I posted, so my apologizes.<br/><br/>1. it's just for completeness (for noobs on how to do...), the addition code lines. So, 'Value' would just be whatever amount that you want to increase to~for that specific unit.<br/><br/>2. the start date~time can be whatever, though I'll see about these issues (such as dealing with leap year and etc) you raise as I slowly develop an entire system of it.<br/><br/>yes, for the days, I'd need (for just explaining): &quot;if (month_string = &quot;january&quot;), days = 31&quot;. I'll have this code stuff when I got my full system done. But, my purpose initially for this post, is just to show how you can (conceptually) set up a 'clock code' design method, where you can increase any unit, and not just a single unit, while keeping it (clock date~time) still working correctly.<br/><br/>this is going to be hard to explain. as my initial post is already not making sense resulting in your post about it, laughs. hmm...<br/><br/>the '_counts' is purely the total of the added~increased amounts for that unit. This (in my unstanding of it) is needed, to allow the clock's date~time string ( ' XhrsX:XminsX:XsecsX ' Time, and ' XmonthX(space)XdayX, XyearX ' or ' XmonthX-XdayX-XyearX ' Date ) correct, as it will otherwise cause it to mess up, if you don't separate the two variables ('_count' and '_integer') as the two variables that they are.<br/><br/>and the '_integer = _integer / Value + _count' (in my understanding) is required as well to keep it correct too. It took my brain a lot of thinking to this understanding, so I hope it wasn't in vain, lol, I hope I got it understood correctly, laughs. I'm not sure if I can come up with a proof of hopefully why this design (of the two variables~attributes: '_count' and '_integer' ) is required, but I'll try to show my thinking on it...<br/><br/>second_count = Value<br/>minute_count = Value<br/>hour_count = Value<br/>day_count = Value<br/>minute_integer = second_count / 60 + minute_count<br/>hour_integer = minute_integer / 60 + hour_count<br/>day_integer = hour_integer / 24 + day_count<br/><br/>second_count = 60<br/>minute_count = 0<br/>hour_count = 0<br/>second_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)<br/>minute_integer = 60 / 60 + 0 -&gt; 1 min -&gt; 1 % 60 -&gt; XX:01:00 (hrs:mins:secs)<br/>hour_integer = 1 / 60 + 0 -&gt; 0 + 0 -&gt; 0 hr -&gt; 0 % 60 -&gt; 00:01:00 (hrs:mins:secs)<br/>// the 'clock time~date' matches up with the '_counts' total time~date<br/><br/>second_count = 30<br/>minute_count = 60<br/>hour_count = 0<br/>second_integer -&gt; 30 sec -&gt; 30 % 60 -&gt; XX:XX:30 (hrs:mins:secs)<br/>minute_integer = 30 / 60 + 60 -&gt; 0 + 60 -&gt; 60 min -&gt; 60 % 60 -&gt; XX:00:30 (hrs:mins:secs)<br/>hour_integer = 60 / 60 + 0 -&gt; 1 + 0 -&gt; 1 hr -&gt; 1 % 60 -&gt; 01:00:30 (hrs:mins:secs)<br/>// the 'clock time~date' matches up with the '_counts' total time~date<br/><br/>second_count = 60<br/>minute_count = 60<br/>hour_count = 60<br/>day_count = 0<br/>second_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)<br/>minute_integer = 60 / 60 + 60 -&gt; 1 + 60 -&gt; 61 min -&gt; 61 % 60 -&gt; XX:01:00 (hrs:mins:secs)<br/>hour_integer = 60 / 60 + 60 -&gt; 1 + 60 -&gt; 61 hr -&gt; 61 % 60 -&gt; 01:00:30 (hrs:mins:secs)<br/>day_integer = 61 / 60 + 0 -&gt; 1 + 0 -&gt; 1 day -&gt; 1 / 24 -&gt; 01:01:00:30 (days:hrs:mins:secs)<br/>// the 'clock time~date' matches up with the '_counts' total time~date<br/><br/>second_count = 60<br/>minute_count = 30<br/>hour_count = 0<br/>second_integer -&gt; 60 sec -&gt; 60 % 60 -&gt; XX:XX:00 (hrs:mins:secs)<br/>minute_integer = 60 / 60 + 30 -&gt; 1 + 30 -&gt; 31 min -&gt; 31 % 60 -&gt; XX:31:00 (hrs:mins:secs)<br/>hour_integer = 31 / 60 + 0 -&gt; 0 + 0 -&gt; 0 hr -&gt; 0 % 60 -&gt; 00:31:00 (hrs:mins:secs)<br/>// the 'clock time~date' matches up with the '_counts' total time~date<br/><br/>// also, you can increase the units again and again, without messing up the clock time~date as well, as I believe it will get messed up by not having the '_count' separated as it's own attribute from the '_integer' attribute, and '_integer' attribute is able to be aware of both a change directly by an increase to the unit, and through the effect of increasing another (a 'lower~more basic') unit, which then changes a 'higher~less basic' unit, without the clock date~time being messed up (via an &quot;over or double counting&quot; the increasing of units).<br/><br/>hopefully, from these 4 tests, you can now see how I think you really do require the '_count' and '_integer' variables~attributes.<br/><br/>3. I want a design method that enables you to increase to any unit, and not just a single unit, which all the other units are then adjusted from that single unit (Pixie already has such a Clock Library for this, and, ah, it was you who also helped me also with clock coding, hehe. I couldn't remember who else had helped~shown me clock coding, lol. I should've known it was you, argh!).<br/><br/>For an example, you got 3 different actions in your game, action_1 progresses the game by 30 secs, action_2 progresses the game by 5 hrs, and action_3 progresses the game by 21 minutes. So, to keep the clock time~date correct, along with this ability of being able to specify the unit and its amount of increase, I believe that my design method is required, you must have 2 attributes~variables, a '_count' and a '_integer&quot;, in order for it to work.",
      "PostDate": "2014-05-06T01:59:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28673",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "HK, I want to second Jay's suggestion to track one variable, seconds, and then have conversion and display functions. If you want to add twenty minutes, internally you just add 1200 seconds, etc.",
      "EditableFormat": "bbcode",
      "HTML": "HK, I want to second Jay's suggestion to track one variable, seconds, and then have conversion and display functions. If you want to add twenty minutes, internally you just add 1200 seconds, etc.",
      "PostDate": "2014-05-06T02:39:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28674",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "The problems with not using two attributes is... (see below):\n\n[quote=&quot;Jay&quot;:1i37o6ed]    minutes_count = minutes_count + seconds_count/60    // add seconds to minutes\n    seconds_count = seconds_count % 60                           // normalize seconds\n    hours_count = hours_count + minutes_count/60           // add minutes to hours\n    minutes_count = minutes_count % 60                          // normalize minutes\n   etc.[/quote:1i37o6ed]\n\n1. what if I wanted to add 90 secs instead of 30 secs and 1 min...\n\nand\n\n2. (see below example)\n\nseconds_count: 60\nseconds_count: 60 % 60 -&gt; 0 secs\nminutes_count: 60\nminutes_count: 60 % 60 -&gt; 0 mins\nminutes_count: 0 + 0 / 60 -&gt; 0 + 0 -&gt; 0 mins\nhours_count: 60\nhours_count: 60 + 0 / 60 -&gt; 60 + 0 -&gt; 60 hrs\n// missing 61 minutes of time: total times of... 61:01:00 (sum of the '_counts', starting time amount) VS 60:00:00 (your final time result, ending time amount)\n\n// this gets worse, if you increase the units again, far away from what the actual time should be (too tired to work out an example right now though).\n\nand\n\n3. (I think your code lines require that you just and only increase the 'seconds' unit), I'm tired right now, but I think there's a problem with this as well... but this will take some thought and work on my part, and I'm too tired right now for that needed effort, lol.",
      "EditableFormat": "bbcode",
      "HTML": "The problems with not using two attributes is... (see below):<br/><br/><blockquote><cite>Jay wrote:</cite>    minutes_count = minutes_count + seconds_count/60    // add seconds to minutes<br/>    seconds_count = seconds_count % 60                           // normalize seconds<br/>    hours_count = hours_count + minutes_count/60           // add minutes to hours<br/>    minutes_count = minutes_count % 60                          // normalize minutes<br/>   etc.</blockquote><br/><br/>1. what if I wanted to add 90 secs instead of 30 secs and 1 min...<br/><br/>and<br/><br/>2. (see below example)<br/><br/>seconds_count: 60<br/>seconds_count: 60 % 60 -&gt; 0 secs<br/>minutes_count: 60<br/>minutes_count: 60 % 60 -&gt; 0 mins<br/>minutes_count: 0 + 0 / 60 -&gt; 0 + 0 -&gt; 0 mins<br/>hours_count: 60<br/>hours_count: 60 + 0 / 60 -&gt; 60 + 0 -&gt; 60 hrs<br/>// missing 61 minutes of time: total times of... 61:01:00 (sum of the '_counts', starting time amount) VS 60:00:00 (your final time result, ending time amount)<br/><br/>// this gets worse, if you increase the units again, far away from what the actual time should be (too tired to work out an example right now though).<br/><br/>and<br/><br/>3. (I think your code lines require that you just and only increase the 'seconds' unit), I'm tired right now, but I think there's a problem with this as well... but this will take some thought and work on my part, and I'm too tired right now for that needed effort, lol.",
      "PostDate": "2014-05-06T02:57:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28677",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "So let's work it out. Let's say we're at the start where they're all zero.\n\nseconds_count = 0\nminutes_count = 0\nhours_count = 0\ndays_count = 0\n\n1) 90 seconds case\nseconds_count -&gt; 0+90\nminutes_count = 0\nhours_count = 0\ndays_count = 0\n\n[code:3p2scwhl]minutes_count = minutes_count + seconds_count/60 // add seconds to minutes[/code:3p2scwhl]\nminutes_count = 0 + (90/60) = 0 + 1 = 1\n\n[code:3p2scwhl]seconds_count = seconds_count % 60 // normalize seconds[/code:3p2scwhl]\nseconds_count = 90 % 60 = 30\n\nThe rest remain the same.\n\n2) 30 seconds  + 1 minute case\nseconds_count -&gt; 0+30\nminutes_count -&gt; 0 + 1\nhours_count = 0\ndays_count = 0\n\n[code:3p2scwhl]minutes_count = minutes_count + seconds_count/60 // add seconds to minutes[/code:3p2scwhl]\nminutes_count = 1 + 30/60 = 1 + 0 = 1\n\n[code:3p2scwhl]seconds_count = seconds_count % 60 // normalize seconds[/code:3p2scwhl]\nseconds_count = 30 % 60 = 30\n\nThe rest remain the same.\n\nIn both cases, you end up with:\nseconds_count = 30\nminutes_count = 1\nhours_count = 0\ndays_count = 0\n\nYou can add any number of seconds/minutes/hours/days. But be sure you update minutes by the number of minutes the seconds hold before you normalize the seconds, update hours with the number of hours in minutes before you normalize minutes, etc. And it cascades upwards.",
      "EditableFormat": "bbcode",
      "HTML": "So let's work it out. Let's say we're at the start where they're all zero.<br/><br/>seconds_count = 0<br/>minutes_count = 0<br/>hours_count = 0<br/>days_count = 0<br/><br/>1) 90 seconds case<br/>seconds_count -&gt; 0+90<br/>minutes_count = 0<br/>hours_count = 0<br/>days_count = 0<br/><br/><pre><code>minutes_count = minutes_count + seconds_count/60 // add seconds to minutes</code></pre><br/>minutes_count = 0 + (90/60) = 0 + 1 = 1<br/><br/><pre><code>seconds_count = seconds_count % 60 // normalize seconds</code></pre><br/>seconds_count = 90 % 60 = 30<br/><br/>The rest remain the same.<br/><br/>2) 30 seconds  + 1 minute case<br/>seconds_count -&gt; 0+30<br/>minutes_count -&gt; 0 + 1<br/>hours_count = 0<br/>days_count = 0<br/><br/><pre><code>minutes_count = minutes_count + seconds_count/60 // add seconds to minutes</code></pre><br/>minutes_count = 1 + 30/60 = 1 + 0 = 1<br/><br/><pre><code>seconds_count = seconds_count % 60 // normalize seconds</code></pre><br/>seconds_count = 30 % 60 = 30<br/><br/>The rest remain the same.<br/><br/>In both cases, you end up with:<br/>seconds_count = 30<br/>minutes_count = 1<br/>hours_count = 0<br/>days_count = 0<br/><br/>You can add any number of seconds/minutes/hours/days. But be sure you update minutes by the number of minutes the seconds hold before you normalize the seconds, update hours with the number of hours in minutes before you normalize minutes, etc. And it cascades upwards.",
      "PostDate": "2014-05-06T21:31:29+01:00",
      "LastEditDate": null
    }
  ]
}
