{
  "Topic": {
    "TopicId": "zk89qv05mkcmxqugwy3exa",
    "ForumId": "10",
    "Title": "Magic Spell Checker",
    "LastUpdated": "2018-05-10T21:48:50.297109Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "57965b49-d052-4f21-98f3-0404b369fbe0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\nSo, I have numerous commands that cast magic spells...\r\n\r\nThere are a few rules which apply to all spell commands.  For instance, you can't cast any spells on something which is somehow protected from magic (which would have an attribute like ```magic_resistant```).\r\n\r\nCan I add an attribute to a command, like ```spell_cmd```, then check for the attribute in ```HandleSingleCommand``` or something?  This way, if I had 20 spell commands, I wouldn't have to check for a magic resistant object in every script.  I could just check for the attribute up front.  \r\n\r\nSomething like this in ```HandleSingleCommand```, maybe?\r\n\r\n```\r\nif (GetBoolean(GetObject(game.pov.currentcommandpattern.name), \"spell_cmd\"){\r\n  if (GetBoolean(object, \"spell_resistant\")){\r\n    msg (\"You can't do that.\")\r\n    return (false)\r\n  }\r\n}\r\n// Proceed with the normal script...\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<p>So, I have numerous commands that cast magic spells...</p>\n<p>There are a few rules which apply to all spell commands.  For instance, you can't cast any spells on something which is somehow protected from magic (which would have an attribute like <code>magic_resistant</code>).</p>\n<p>Can I add an attribute to a command, like <code>spell_cmd</code>, then check for the attribute in <code>HandleSingleCommand</code> or something?  This way, if I had 20 spell commands, I wouldn't have to check for a magic resistant object in every script.  I could just check for the attribute up front.</p>\n<p>Something like this in <code>HandleSingleCommand</code>, maybe?</p>\n<pre><code>if (GetBoolean(GetObject(game.pov.currentcommandpattern.name), \"spell_cmd\"){\n  if (GetBoolean(object, \"spell_resistant\")){\n    msg (\"You can't do that.\")\n    return (false)\n  }\n}\n// Proceed with the normal script...\n</code></pre>\n\n",
      "PostDate": "2018-05-10T21:48:50.297109Z",
      "LastEditDate": "2018-05-11T15:44:22.5847393Z",
      "link": null
    },
    {
      "PostId": "4f5df934-6e0c-4bc5-88f9-a1efdfeccb94",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I see no reason why not.\r\n\r\nThough it seems a little odd to do `GetObject(game.pov.currentcommandpattern.name)` rather than just using `game.pov.currentcommandpattern`.\r\n\r\nI was actually wondering if (in a more general sense) it might be possible to have a lot of error messages generated by the parser. I can see the system in my head, but after ten minutes thinking, I still can't see a good way to describe it :S I already looked into allowing a command's scope to filter the list by attributes or similar; in this case, if the player tries a visible object that isn't in scope (for example if spell resistant items are excluded from the scope of spells), it could pull the appropriate error message or template out of a dictionary on the command object.",
      "EditableFormat": "markdown",
      "HTML": "<p>I see no reason why not.</p>\n<p>Though it seems a little odd to do <code>GetObject(game.pov.currentcommandpattern.name)</code> rather than just using <code>game.pov.currentcommandpattern</code>.</p>\n<p>I was actually wondering if (in a more general sense) it might be possible to have a lot of error messages generated by the parser. I can see the system in my head, but after ten minutes thinking, I still can't see a good way to describe it :S I already looked into allowing a command's scope to filter the list by attributes or similar; in this case, if the player tries a visible object that isn't in scope (for example if spell resistant items are excluded from the scope of spells), it could pull the appropriate error message or template out of a dictionary on the command object.</p>\n\n",
      "PostDate": "2018-05-10T22:25:09.6602924Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6d9804fa-85aa-4d20-9330-b527f2cc4015",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "just some food for thought only\r\n\r\n(doing a universal 'magic resistance' check is fine too, whatever magic system design you want to do)\r\n\r\n--------------\r\n\r\na more complex magic system:\r\n\r\na fire dragon may 'absorb' fire damage (healing the fire dragon instead)\r\n\r\na fire sorcerer may 'reflect' fire damage (usually at half damage back upon you/attacker)\r\n\r\na fire lizard may 'nullify' fire damage (no damage done to the fire lizard: it has \"immunity\" to fire damage)\r\n\r\na fire genie may 'reduce' fire damage (the fire genie is \"strong\" against fire magic, usually half damage is only done to it)\r\n\r\nand a human bandit may receive the 'normal' fire damage upon it\r\n\r\nand/or you can have a fire imp actually being 'weak' to the fire damage as well (doing x1.5 or x2 or whatever extra damage to it) \r\n\r\n----\r\n\r\nand a 'water' monster would be \"weak\" to 'fire' damage (or it too can be protected from its opposing element: strong, immune, absorb, reflect) (or it can just receive the 'normal' damage to it as well)\r\n\r\nand other (non-same and non-opposite) element damage types would do \"normal\" damage (or it too can be any of these as well: strong, immune, absorb, reflect, weak) to the monster\r\n\r\n-------\r\n\r\nwith this magic system... it might be better to use pixies' string dictionary design (see pixie's magic/spell library / I think this is included now in his combat library 3.0/2.0/whatever-version) for checking for opposing elements, and if have the same (or opposite, or: neither same nor opposite) element, then another check for which of these different magic effects, ie: OBJECT.magic_damage_effect_type_string_attribute = (one of these: normal, weak, strong, absorb, reflect, immune), it has...\r\n\r\nthen, if you're still able to do damage to it (or done back to yourself, in regards to 'reflect', lol), you can check if its (or your) fire resistance prevents it from 'hitting' (actually doing damage or not) it (or you): \"resistance (like Armor Class/\"AC\") or magical_defense' in whether a physical hit actually hits/damages you or not)\r\n\r\nthen, you can check/determine how much actual damage is done to it (or you): \"reduction/magic_defense or resistance\" (determines how much you're actually damaged for)\r\n\r\nmeh, choose whatever terminology for the various things... not sure if there's any standard terminology... lol... so many rpgs... even D&D... isn't really the basis anymore of RPGs... due to just how many rpgs there are and their different systems/mechanics and unique terminologies... lol",
      "EditableFormat": "markdown",
      "HTML": "<p>just some food for thought only</p>\n<p>(doing a universal 'magic resistance' check is fine too, whatever magic system design you want to do)</p>\n<hr>\n<p>a more complex magic system:</p>\n<p>a fire dragon may 'absorb' fire damage (healing the fire dragon instead)</p>\n<p>a fire sorcerer may 'reflect' fire damage (usually at half damage back upon you/attacker)</p>\n<p>a fire lizard may 'nullify' fire damage (no damage done to the fire lizard: it has \"immunity\" to fire damage)</p>\n<p>a fire genie may 'reduce' fire damage (the fire genie is \"strong\" against fire magic, usually half damage is only done to it)</p>\n<p>and a human bandit may receive the 'normal' fire damage upon it</p>\n<p>and/or you can have a fire imp actually being 'weak' to the fire damage as well (doing x1.5 or x2 or whatever extra damage to it)</p>\n<hr>\n<p>and a 'water' monster would be \"weak\" to 'fire' damage (or it too can be protected from its opposing element: strong, immune, absorb, reflect) (or it can just receive the 'normal' damage to it as well)</p>\n<p>and other (non-same and non-opposite) element damage types would do \"normal\" damage (or it too can be any of these as well: strong, immune, absorb, reflect, weak) to the monster</p>\n<hr>\n<p>with this magic system... it might be better to use pixies' string dictionary design (see pixie's magic/spell library / I think this is included now in his combat library 3.0/2.0/whatever-version) for checking for opposing elements, and if have the same (or opposite, or: neither same nor opposite) element, then another check for which of these different magic effects, ie: OBJECT.magic_damage_effect_type_string_attribute = (one of these: normal, weak, strong, absorb, reflect, immune), it has...</p>\n<p>then, if you're still able to do damage to it (or done back to yourself, in regards to 'reflect', lol), you can check if its (or your) fire resistance prevents it from 'hitting' (actually doing damage or not) it (or you): \"resistance (like Armor Class/\"AC\") or magical_defense' in whether a physical hit actually hits/damages you or not)</p>\n<p>then, you can check/determine how much actual damage is done to it (or you): \"reduction/magic_defense or resistance\" (determines how much you're actually damaged for)</p>\n<p>meh, choose whatever terminology for the various things... not sure if there's any standard terminology... lol... so many rpgs... even D&amp;D... isn't really the basis anymore of RPGs... due to just how many rpgs there are and their different systems/mechanics and unique terminologies... lol</p>\n\n",
      "PostDate": "2018-05-11T07:16:38.9374031Z",
      "LastEditDate": "2018-05-11T07:40:14.0248546Z",
      "link": null
    },
    {
      "PostId": "38d8f5f9-f341-45f2-b4ef-b83d6e4ec270",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was hoping for a cool way to check spelling. Oh well...\r\n\r\nFor my combat library, I had a spell type that does all that sort of general stuff, and that then calls another script that belongs to the individual spell. I used objects to represent spells, rather than commands...\r\n\r\nBut that is okay, because commands are objects too! Not quite as easy, as the script attribute seems protected in some way, but you can do it.\r\n\r\nFirst override `ResolveNextName` so it will call \"prescript\" if it exists, rather than \"script\". This is just the end of it:\r\n```\r\n  if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\r\n    // TO DO: game.unresolved* should be game.pov.unresolved*\r\n    game.unresolvedcommand = null\r\n    game.unresolvedcommandvarlist = null\r\n    game.unresolvedcommandkey = null\r\n  }\r\n  if (HasScript(game.pov.currentcommandpattern, \"script\")) {\r\n    if (HasScript(game.pov.currentcommandpattern, \"prescript\")) {\r\n      do (game.pov.currentcommandpattern, \"prescript\", game.pov.currentcommandresolvedelements)\r\n    }\r\n    else {\r\n      // This is the bit that actually runs the commands\r\n      do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\r\n    }\r\n  }\r\n  HandleNextCommandQueueItem\r\n}\r\n```\r\nNow create a new type, and give it a \"prescript\" script attribute.\r\n```\r\nif (GetBoolean(object, \"magic_resistant\")) {\r\n  msg (\"The \" + GetDisplayName(object) + \" resists the spell.\")\r\n}\r\nelse {\r\n  do (this, \"script\", game.pov.currentcommandresolvedelements)\r\n}\r\n```\r\nThen give all your spells this type.\r\n\r\nNote that all commands of the same type must use the same set of variables (object, text1, whatever).",
      "EditableFormat": "markdown",
      "HTML": "<p>I was hoping for a cool way to check spelling. Oh well...</p>\n<p>For my combat library, I had a spell type that does all that sort of general stuff, and that then calls another script that belongs to the individual spell. I used objects to represent spells, rather than commands...</p>\n<p>But that is okay, because commands are objects too! Not quite as easy, as the script attribute seems protected in some way, but you can do it.</p>\n<p>First override <code>ResolveNextName</code> so it will call \"prescript\" if it exists, rather than \"script\". This is just the end of it:</p>\n<pre><code>  if (not GetBoolean(game.pov.currentcommandpattern, \"isoops\")) {\n    // TO DO: game.unresolved* should be game.pov.unresolved*\n    game.unresolvedcommand = null\n    game.unresolvedcommandvarlist = null\n    game.unresolvedcommandkey = null\n  }\n  if (HasScript(game.pov.currentcommandpattern, \"script\")) {\n    if (HasScript(game.pov.currentcommandpattern, \"prescript\")) {\n      do (game.pov.currentcommandpattern, \"prescript\", game.pov.currentcommandresolvedelements)\n    }\n    else {\n      // This is the bit that actually runs the commands\n      do (game.pov.currentcommandpattern, \"script\", game.pov.currentcommandresolvedelements)\n    }\n  }\n  HandleNextCommandQueueItem\n}\n</code></pre>\n<p>Now create a new type, and give it a \"prescript\" script attribute.</p>\n<pre><code>if (GetBoolean(object, \"magic_resistant\")) {\n  msg (\"The \" + GetDisplayName(object) + \" resists the spell.\")\n}\nelse {\n  do (this, \"script\", game.pov.currentcommandresolvedelements)\n}\n</code></pre>\n<p>Then give all your spells this type.</p>\n<p>Note that all commands of the same type must use the same set of variables (object, text1, whatever).</p>\n\n",
      "PostDate": "2018-05-11T08:00:49.4397165Z",
      "LastEditDate": "2018-05-11T08:01:35.4936866Z",
      "link": null
    },
    {
      "PostId": "930306b7-b74b-4f0d-8612-9a9bbb7a0f36",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "When I was playing with the advanced scope script, I thought about being able to specify that the scope was limited to containers, or to objects in containers, or to objects with a specific attribute, or similar.\r\n\r\nBut now, I'm thinking that could better be represented by a dictionary.\r\n\r\nI'm poking around to see if I can make it work. Basically, the parser goes through the keys in the dictionary, and removes objects that don't fit them from scope. If this means that there's no matching items in scope and the command falls back on secondaryscope, then the parser looks back to see which of these clauses (if any) removed that object from scope, and displays the appropriate message instead of running the script.\r\n\r\nSo the 'open' command could have a `scopefilter` dictionary with key \"!isopen\" and value \"You can't open that\", and key \"isopen=true\" with value \"It's already open!\". If there's multiple objects that match what the player typed, then Quest will assume the one that isn't filtered out by any of those criteria; and if there isn't one, it can display the error message without having to call the command's script.\r\n\r\nI assume you can have a command inherit from a type which provides a dictionary :p\r\n(the big stumbling block so far is trying to work out whether the dictionary keys should be the pattern that causes that message to display, or the pattern that allows the item to remain in scope)",
      "EditableFormat": "markdown",
      "HTML": "<p>When I was playing with the advanced scope script, I thought about being able to specify that the scope was limited to containers, or to objects in containers, or to objects with a specific attribute, or similar.</p>\n<p>But now, I'm thinking that could better be represented by a dictionary.</p>\n<p>I'm poking around to see if I can make it work. Basically, the parser goes through the keys in the dictionary, and removes objects that don't fit them from scope. If this means that there's no matching items in scope and the command falls back on secondaryscope, then the parser looks back to see which of these clauses (if any) removed that object from scope, and displays the appropriate message instead of running the script.</p>\n<p>So the 'open' command could have a <code>scopefilter</code> dictionary with key \"!isopen\" and value \"You can't open that\", and key \"isopen=true\" with value \"It's already open!\". If there's multiple objects that match what the player typed, then Quest will assume the one that isn't filtered out by any of those criteria; and if there isn't one, it can display the error message without having to call the command's script.</p>\n<p>I assume you can have a command inherit from a type which provides a dictionary :p<br>\n(the big stumbling block so far is trying to work out whether the dictionary keys should be the pattern that causes that message to display, or the pattern that allows the item to remain in scope)</p>\n\n",
      "PostDate": "2018-05-11T08:51:08.3248746Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0b377122-cafa-443e-be45-2d5099bfb9c8",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I was hoping for a cool way to check spelling. Oh well...\r\n\r\nSorry!  Didn't mean to get your hopes up.  (I am still researching the SpellCheck settings.  I theorize that there is a way Quest can disable the spellcheck if a language other than the dictionary's language is being used.)\r\n\r\nUPDATE\r\n\r\nWell, I don't know if SpellCheck can ignore languages other than English, Spanish, French, and German.  This info seems to say it cannot:\r\n\r\nhttps://blogs.msdn.microsoft.com/text/2009/10/02/custom-dictionaries/\r\n\r\n---\r\n> For my combat library, I had a spell type that does all that sort of general stuff, and that then calls another script that belongs to the individual spell. I used objects to represent spells, rather than commands...\r\n\r\nI think this is what I'm using...  I thought this was what I was using...  Maybe I just need to go through the code I've already got.  (Hehehe.)\r\n\r\n---\r\nHK,\r\n\r\nOh, heck yeah!  Lots of that stuff will be checked, too.  (You listed a few I hadn't thought of.  Well played!)\r\n\r\n---\r\nmrangel,\r\n\r\nIt sounds like you're cooking up some good code!  ",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I was hoping for a cool way to check spelling. Oh well...</p>\n</blockquote>\n<p>Sorry!  Didn't mean to get your hopes up.  (I am still researching the SpellCheck settings.  I theorize that there is a way Quest can disable the spellcheck if a language other than the dictionary's language is being used.)</p>\n<p>UPDATE</p>\n<p>Well, I don't know if SpellCheck can ignore languages other than English, Spanish, French, and German.  This info seems to say it cannot:</p>\n<p>https://blogs.msdn.microsoft.com/text/2009/10/02/custom-dictionaries/</p>\n<hr>\n<blockquote>\n<p>For my combat library, I had a spell type that does all that sort of general stuff, and that then calls another script that belongs to the individual spell. I used objects to represent spells, rather than commands...</p>\n</blockquote>\n<p>I think this is what I'm using...  I thought this was what I was using...  Maybe I just need to go through the code I've already got.  (Hehehe.)</p>\n<hr>\n<p>HK,</p>\n<p>Oh, heck yeah!  Lots of that stuff will be checked, too.  (You listed a few I hadn't thought of.  Well played!)</p>\n<hr>\n<p>mrangel,</p>\n<p>It sounds like you're cooking up some good code!</p>\n\n",
      "PostDate": "2018-05-11T15:43:07.3362062Z",
      "LastEditDate": "2018-05-11T17:00:54.2465113Z",
      "link": null
    }
  ]
}
