{
  "Topic": {
    "TopicId": "fzzuxxnomei9linnqlpzaq",
    "ForumId": "10",
    "Title": "Branching Dialogue",
    "LastUpdated": "2018-05-06T23:19:05.5401985Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3276197d-779d-4b5b-a203-0776e74cd398",
      "UserId": 252266,
      "Username": "apiooo",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi, hoping this is quite a noddy question.\r\n\r\nI'd like to write some dialogue where the player can choose from two options, and their choice result in different response from an npc.\r\n\r\nI.e.\r\n\r\n\"What is your favorite colour?\r\n1 - Blue\r\n2 - Red\r\n(Press 1 or 2 accordingly)\"\r\n\r\nThen if the user types \"1\" into the search bar they get a response \"Blue like the sky\", but if they type 2 then they get a response \"Red like fire\".\r\n\r\nSeems like it should be simple, but I can't see an obvious way of doing it.\r\n\r\nThanks,",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi, hoping this is quite a noddy question.</p>\n<p>I'd like to write some dialogue where the player can choose from two options, and their choice result in different response from an npc.</p>\n<p>I.e.</p>\n<p>\"What is your favorite colour?<br>\n1 - Blue<br>\n2 - Red<br>\n(Press 1 or 2 accordingly)\"</p>\n<p>Then if the user types \"1\" into the search bar they get a response \"Blue like the sky\", but if they type 2 then they get a response \"Red like fire\".</p>\n<p>Seems like it should be simple, but I can't see an obvious way of doing it.</p>\n<p>Thanks,</p>\n\n",
      "PostDate": "2018-05-06T23:19:05.5401985Z",
      "LastEditDate": "2018-05-06T23:38:41.592243Z",
      "link": null
    },
    {
      "PostId": "cda4327b-a487-418e-9a20-a113f65f3546",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "1.  I used a Get input script.  Then I added a switch script.\r\n2.  In the Switch script box, type in 'LCase(result)'.  This makes all responses typed by the player lower case and recognized in your cases!  Very useful!\r\n3.  I added in the print message script when you entered the room, the key words you could use when you answer the angry man.\r\n4A.  I added each word as a case for the switch script.  Make sure you type it inside quotes - \"mother\" and if you have more than one word per case separate with commas - \"mother',\"mom\",\"ma\"\r\n4B.  For these cases, you then are prompted to enter other scripts that you want to run.  In your example, it would be a print message script.\r\n5.  Make sure you add a default for any comment you do not want him to recognize.\r\n\r\nThis was from my library of solutions I have built so the angry man in my example is your NPC.",
      "EditableFormat": "markdown",
      "HTML": "<ol>\n<li>I used a Get input script.  Then I added a switch script.</li>\n<li>In the Switch script box, type in 'LCase(result)'.  This makes all responses typed by the player lower case and recognized in your cases!  Very useful!</li>\n<li>I added in the print message script when you entered the room, the key words you could use when you answer the angry man.<br>\n4A.  I added each word as a case for the switch script.  Make sure you type it inside quotes - \"mother\" and if you have more than one word per case separate with commas - \"mother',\"mom\",\"ma\"<br>\n4B.  For these cases, you then are prompted to enter other scripts that you want to run.  In your example, it would be a print message script.</li>\n<li>Make sure you add a default for any comment you do not want him to recognize.</li>\n</ol>\n<p>This was from my library of solutions I have built so the angry man in my example is your NPC.</p>\n\n",
      "PostDate": "2018-05-07T00:42:55.8420003Z",
      "LastEditDate": "2018-05-07T00:44:17.8394295Z",
      "link": null
    },
    {
      "PostId": "39880261-c671-4508-9a93-ba3fe7e2f9e1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it a gamebook or a text adventure?\r\n\r\nIf it's a text adventure, it has ShowMenu built-in, so you can do:\r\n\r\n```\r\n// VERSION 2\r\nShowMenu(\"What is your favorite color?\", Split(\"Red;Blue\", \";\"), false){\r\n  if (result = \"Red\"){\r\n    msg (\"You chose 'Red'.\")\r\n  }\r\n  else if (result = \"Blue\"){\r\n    msg (\"You chose 'Blue'.\")\r\n  }\r\n  else {\r\n    msg (\"Due to a series of unfortunate events, you are reading this message.  (If I were you, I'd contact the author.  This game is buggy!)\")\r\n  }\r\n}\r\n```\r\n\r\n---\r\nIf you are creating a gamebook, you  can add ShowMenu by like this:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/phlhxhlrak_j3qns2icxbg/can-gamebooks-use-showmenu#3d7982e9-e206-4ac4-af3d-a83cf24d50cd\r\n\r\n---\r\nEDIT\r\n\r\nI just now saw XanMag's solution, which should also work, but ShowMenu allows entering '1' or '2' to make a choice (or the player can click the choice).",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it a gamebook or a text adventure?</p>\n<p>If it's a text adventure, it has ShowMenu built-in, so you can do:</p>\n<pre><code>// VERSION 2\nShowMenu(\"What is your favorite color?\", Split(\"Red;Blue\", \";\"), false){\n  if (result = \"Red\"){\n    msg (\"You chose 'Red'.\")\n  }\n  else if (result = \"Blue\"){\n    msg (\"You chose 'Blue'.\")\n  }\n  else {\n    msg (\"Due to a series of unfortunate events, you are reading this message.  (If I were you, I'd contact the author.  This game is buggy!)\")\n  }\n}\n</code></pre>\n<hr>\n<p>If you are creating a gamebook, you  can add ShowMenu by like this:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/phlhxhlrak_j3qns2icxbg/can-gamebooks-use-showmenu#3d7982e9-e206-4ac4-af3d-a83cf24d50cd</p>\n<hr>\n<p>EDIT</p>\n<p>I just now saw XanMag's solution, which should also work, but ShowMenu allows entering '1' or '2' to make a choice (or the player can click the choice).</p>\n\n",
      "PostDate": "2018-05-07T00:50:07.730382Z",
      "LastEditDate": "2018-05-07T20:49:18.5990942Z",
      "link": null
    },
    {
      "PostId": "476c548c-3ae8-4712-ae8b-6022e01e1b5b",
      "UserId": 348994,
      "Username": "CheeseMyBaby",
      "AvatarUrl": "https://i.imgur.com/c5nBbAgb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "XanMag's and K.V's solutions is a good way to go.\r\n\r\nIf you want lots of conversations that branches out into several conversation \"paths\" I'd recommend taking a look at Pix's conversation library (convlib).\r\n\r\nIt's super easy to set up and use and gives you a lot of control as to what conversation topics/paths will be shown after one has been chosen.\r\nRead more (and download if you want to) here:\r\n\r\n<a href=\"https://github.com/ThePix/quest/wiki/Library:-Conversations\">The Pixie's ConvLib on github</a>",
      "EditableFormat": "markdown",
      "HTML": "<p>XanMag's and K.V's solutions is a good way to go.</p>\n<p>If you want lots of conversations that branches out into several conversation \"paths\" I'd recommend taking a look at Pix's conversation library (convlib).</p>\n<p>It's super easy to set up and use and gives you a lot of control as to what conversation topics/paths will be shown after one has been chosen.<br>\nRead more (and download if you want to) here:</p>\n<p><a href=\"https://github.com/ThePix/quest/wiki/Library:-Conversations\">The Pixie's ConvLib on github</a></p>\n\n",
      "PostDate": "2018-05-07T07:06:20.0277542Z",
      "LastEditDate": "2018-05-07T07:10:56.2015985Z",
      "link": null
    },
    {
      "PostId": "5bf099f9-63c9-493a-a6d2-dd4436dda67c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@KV:\r\n> `// There are only two choices, so the player chose blue.`\r\n\r\nIn a simple case like this, a fair assumption. But a bad habit to get into.\r\n\r\nThere are a few situations where `result` can be something that wasn't one of the provided options. So it's good to get into the habit of always checking. I usually prefer a `switch` statement for this, with the `default`being `error (\"Can't happen! In pick-a-colour question, result was: \"+result)`.\r\n\r\nWhen it doesn't cost you anything, it's really good to get into the habit of checking to make sure that the variables you get are what you expect. It's just like a function that displays an error if you give it a string instead of an object; even if you know you're passing it strings every time it's used. Because when you edit the game later, you don't know if you're going to make a typo and send the wrong value. One mantra I try to live by is \"fail early\". If I make a typo in the code, or mis-remember how something worked when making changes, then it should fail immediately, with an error message that tells me what is wrong.\r\n\r\nIn this case, for example, if you'd made a typo when coding and put `Split(\"Red;Bl ue\")`, clicking 'Bl ue' would give the right response message and you might not notice (extra spaces can be almost invisible in some fonts), but later in the game when some NPC checks to see if the character's favourite colour is Blue, it wouldn't match. An extra 'if' statement would result in an error right away, and could save you a lot of headaches.",
      "EditableFormat": "markdown",
      "HTML": "<p>@KV:</p>\n<blockquote>\n<p><code>// There are only two choices, so the player chose blue.</code></p>\n</blockquote>\n<p>In a simple case like this, a fair assumption. But a bad habit to get into.</p>\n<p>There are a few situations where <code>result</code> can be something that wasn't one of the provided options. So it's good to get into the habit of always checking. I usually prefer a <code>switch</code> statement for this, with the <code>default</code>being <code>error (\"Can't happen! In pick-a-colour question, result was: \"+result)</code>.</p>\n<p>When it doesn't cost you anything, it's really good to get into the habit of checking to make sure that the variables you get are what you expect. It's just like a function that displays an error if you give it a string instead of an object; even if you know you're passing it strings every time it's used. Because when you edit the game later, you don't know if you're going to make a typo and send the wrong value. One mantra I try to live by is \"fail early\". If I make a typo in the code, or mis-remember how something worked when making changes, then it should fail immediately, with an error message that tells me what is wrong.</p>\n<p>In this case, for example, if you'd made a typo when coding and put <code>Split(\"Red;Bl ue\")</code>, clicking 'Bl ue' would give the right response message and you might not notice (extra spaces can be almost invisible in some fonts), but later in the game when some NPC checks to see if the character's favourite colour is Blue, it wouldn't match. An extra 'if' statement would result in an error right away, and could save you a lot of headaches.</p>\n\n",
      "PostDate": "2018-05-07T12:13:25.5860313Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5707bd78-2ba2-424e-82ff-6a7a114df9cb",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Everything mrangel says is true.\r\n\r\nIn my example, though, the boolean is set to false, which will prevent the player from ignoring the menu, which means the player cannot succesfully enter anything besides the two choices.",
      "EditableFormat": "markdown",
      "HTML": "<p>Everything mrangel says is true.</p>\n<p>In my example, though, the boolean is set to false, which will prevent the player from ignoring the menu, which means the player cannot succesfully enter anything besides the two choices.</p>\n\n",
      "PostDate": "2018-05-07T14:38:58.7552622Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6ced8fc5-1583-46f5-bc22-25423715ad07",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this can be scaled up in complexity/dynamic-ness... but Apiooo probably doesn't need that headache... whereas, I'm still trying to code in such a scale-up-ness of this functionality for my game... lol. There's a lot of handling that can be done/needed with menu (input selections) functionality\r\n\r\n-----------\r\n\r\nP.S.\r\n\r\nI don't think quest has a built-in 'error and exception handling' (\"try-catch\") system for a person's own game/code/content to use (I'm not talking about the system that exists for quest itself / its underlying code)... which I just realized yesterday... as I was working on part of my game, and needed/realized an error and exception handling system/functionality would be very useful instead of individual error messages (which isn't a good design for editing/scaling/dynamic-ness/etc).\r\n\r\nI'll at some point try to create a 'error and exception handling' (\"try-catch\") library for everyone... but not right away... though it probably won't be as good as what Pixie/Mrangel/KV could do... but this is something that I think I can do, at least the basic stuff of it anyways (some stuff might get a bit more complicated for me, not sure), so, no need to create such a library yourselves, unless you want to and/or need to (can't wait for me to get around to it at some point in the hopefully not too distant future, lol).",
      "EditableFormat": "markdown",
      "HTML": "<p>this can be scaled up in complexity/dynamic-ness... but Apiooo probably doesn't need that headache... whereas, I'm still trying to code in such a scale-up-ness of this functionality for my game... lol. There's a lot of handling that can be done/needed with menu (input selections) functionality</p>\n<hr>\n<p>P.S.</p>\n<p>I don't think quest has a built-in 'error and exception handling' (\"try-catch\") system for a person's own game/code/content to use (I'm not talking about the system that exists for quest itself / its underlying code)... which I just realized yesterday... as I was working on part of my game, and needed/realized an error and exception handling system/functionality would be very useful instead of individual error messages (which isn't a good design for editing/scaling/dynamic-ness/etc).</p>\n<p>I'll at some point try to create a 'error and exception handling' (\"try-catch\") library for everyone... but not right away... though it probably won't be as good as what Pixie/Mrangel/KV could do... but this is something that I think I can do, at least the basic stuff of it anyways (some stuff might get a bit more complicated for me, not sure), so, no need to create such a library yourselves, unless you want to and/or need to (can't wait for me to get around to it at some point in the hopefully not too distant future, lol).</p>\n\n",
      "PostDate": "2018-05-07T14:50:36.5136621Z",
      "LastEditDate": "2018-05-07T14:54:15.2672578Z",
      "link": null
    },
    {
      "PostId": "26b4ab37-ffff-4364-8e50-5f70f67fbd28",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> In my example, though, the boolean is set to false, which will prevent the player from ignoring the menu, which means the player cannot succesfully enter anything besides the two choices.\r\n\r\nIf the boolean was true, typing anything else wouldn't call that script anyway, so you wouldn't need to check for that case.\r\n\r\nBut there are a few edge cases where a menu might fail to be hidden (for example, if a menu is terminated by a timeout event rather than by the player choosing something). In these cases, when you display your menu, the player could scroll back and click a link on a menu in a previous room. Your callback is triggered, with the `result` variable being one of the options from a *previous* call to ShowMenu.\r\n\r\nEven if you're sure your game isn't prone to any weird edge-case bugs, it's better to explicitly check for your options. It means that if you typo in the list of options, you find out as soon as you click that option rather than getting a hard-to-diagnose bug at some later point.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>In my example, though, the boolean is set to false, which will prevent the player from ignoring the menu, which means the player cannot succesfully enter anything besides the two choices.</p>\n</blockquote>\n<p>If the boolean was true, typing anything else wouldn't call that script anyway, so you wouldn't need to check for that case.</p>\n<p>But there are a few edge cases where a menu might fail to be hidden (for example, if a menu is terminated by a timeout event rather than by the player choosing something). In these cases, when you display your menu, the player could scroll back and click a link on a menu in a previous room. Your callback is triggered, with the <code>result</code> variable being one of the options from a <em>previous</em> call to ShowMenu.</p>\n<p>Even if you're sure your game isn't prone to any weird edge-case bugs, it's better to explicitly check for your options. It means that if you typo in the list of options, you find out as soon as you click that option rather than getting a hard-to-diagnose bug at some later point.</p>\n\n",
      "PostDate": "2018-05-07T16:19:36.8668772Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "872ff285-128c-4755-8d01-b2c3d0933ea0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "True.  \r\n\r\nI should not teach aspiring coders to script lazily.\r\n\r\nI have edited my code. ",
      "EditableFormat": "markdown",
      "HTML": "<p>True.</p>\n<p>I should not teach aspiring coders to script lazily.</p>\n<p>I have edited my code.</p>\n\n",
      "PostDate": "2018-05-07T21:16:24.5714462Z",
      "LastEditDate": "2018-05-07T21:57:06.280785Z",
      "link": null
    },
    {
      "PostId": "af887e8b-53c2-453d-a9bd-1b023cb2d87c",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I disagree a bit... getting into good practice of handling human errors/inputs/code/etc... is for those interested in learning code to this greater degree, as if someone just wants some simple code functionality and doesn't know coding... there's no reason to do thorough/dynamic/scalable/good-practice-input-handling-etc code designs, you don't do a super code design, when all you want/need is something simple. Razor's Edge, and all that... don't use/make a nuke to kill a fly when a simple fly-swatter (or even more cool and effective: a salt shooting gun, hehe -- it really does work: the salt grains are like shotgun wide-burst shrapnel for the fly, which it can't avoid, hehe) will do, lol.\r\n\r\nnow, if someone is doing complex/large-scale coding/game-making like a massive RPG... then it matters... and saves you time (if you're capable of that level of code designing, lol) and from a lot of headaches/hair-pulling... as you try to trouble-shoot stuff and/or add/build onto your game/etc",
      "EditableFormat": "markdown",
      "HTML": "<p>I disagree a bit... getting into good practice of handling human errors/inputs/code/etc... is for those interested in learning code to this greater degree, as if someone just wants some simple code functionality and doesn't know coding... there's no reason to do thorough/dynamic/scalable/good-practice-input-handling-etc code designs, you don't do a super code design, when all you want/need is something simple. Razor's Edge, and all that... don't use/make a nuke to kill a fly when a simple fly-swatter (or even more cool and effective: a salt shooting gun, hehe -- it really does work: the salt grains are like shotgun wide-burst shrapnel for the fly, which it can't avoid, hehe) will do, lol.</p>\n<p>now, if someone is doing complex/large-scale coding/game-making like a massive RPG... then it matters... and saves you time (if you're capable of that level of code designing, lol) and from a lot of headaches/hair-pulling... as you try to trouble-shoot stuff and/or add/build onto your game/etc</p>\n\n",
      "PostDate": "2018-05-08T05:46:38.6852834Z",
      "LastEditDate": "2018-05-08T05:49:34.8879998Z",
      "link": null
    }
  ]
}
