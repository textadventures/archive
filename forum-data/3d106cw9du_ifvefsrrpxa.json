{
  "Topic": {
    "TopicId": "3d106cw9du_ifvefsrrpxa",
    "ForumId": "10",
    "Title": "Finding \"Verbs\" in the Quest Help screen",
    "LastUpdated": "2020-03-12T02:15:35.3718423Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "73cfe155-d058-4f7e-8c05-96484dfc95af",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd like to know more on the use of Verbs (located under game in the tree on the left of the screen)\r\nI can't seem to find any help on Verbs in the Quest help screen.\r\nIf it's there then could someone tell me what heading its under so I can find it please.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd like to know more on the use of Verbs (located under game in the tree on the left of the screen)<br>\nI can't seem to find any help on Verbs in the Quest help screen.<br>\nIf it's there then could someone tell me what heading its under so I can find it please.</p>\n\n",
      "PostDate": "2020-03-12T02:15:35.3718423Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "85d0bbad-f859-47ac-b479-0a3f9e772d0d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "is this what you wanted? https://docs.textadventures.co.uk/quest/elements/verb.html\r\n\r\n(note that all of the Attributes: 'name' / 'pattern' / 'property' / 'unresolved' / template' / response', within the Verb are optional)\r\n\r\n```\r\n<verb name=\"NAME_OF_VERB\" pattern=\"INPUT_PATTERN\" unresolved=\"TEXT_DISPLAYED_WHEN_UNRESOLVED\" property=\"NAME_OF_ACTUAL_VERBS_ATTRIBUTE_BEING_USED_WHICH_IS_EITHER_A_SCRIPT_ATTRIBUTE_OR_A_STRING_ATTRIBUTE_WITHIN_THE_OBJECT_BEING_USED_ELSE_IF_NO_ATTRIBUTE_THAN_IT_DOES_THE_DEFAULT_RESPONSE_ELSE_IF_A_INVALID_ATTRIBUTE_TYPE_IS_USED_THEN_GET_AN_ERROR_MESSAGE\" response=\"TEXT_FOR_DISPLAYING_DEFAULT_RESPONSE\" template=\"TEMPLATE_NAME\">\r\n  // scripting\r\n</verb>\r\n\r\nor\r\n\r\n<verb>\r\n\r\n  <name>NAME_OF_VERB</name>\r\n\r\n  <pattern>INPUT_PATTERN</pattern>\r\n\r\n  <unresolved>TEXT_DISPLAYED_WHEN_UNRESOLVED</unresolved>\r\n  <property>NAME_OF_ACTUAL_VERBS_ATTRIBUTE_BEING_USED_WHICH_IS_EITHER_A_SCRIPT_ATTRIBUTE_OR_A_STRING_ATTRIBUTE_WITHIN_THE_OBJECT_BEING_USED_ELSE_IF_NO_ATTRIBUTE_THAN_IT_DOES_THE_DEFAULT_RESPONSE_ELSE_IF_AN_INVALID_ATTRIBUTE_TYPE_IS_USED_THEN_GET_AN_ERROR_MESSAGE</property>\r\n\r\n  <response>TEXT_FOR_DISPLAYING_DEFAULT_RESPONSE</response>\r\n\r\n  <template>TEMPLATE_NAME</template>\r\n\r\n</verb>\r\n```\r\n\r\nif not, let me know",
      "EditableFormat": "markdown",
      "HTML": "<p>is this what you wanted? https://docs.textadventures.co.uk/quest/elements/verb.html</p>\n<p>(note that all of the Attributes: 'name' / 'pattern' / 'property' / 'unresolved' / template' / response', within the Verb are optional)</p>\n<pre><code>&lt;verb name=\"NAME_OF_VERB\" pattern=\"INPUT_PATTERN\" unresolved=\"TEXT_DISPLAYED_WHEN_UNRESOLVED\" property=\"NAME_OF_ACTUAL_VERBS_ATTRIBUTE_BEING_USED_WHICH_IS_EITHER_A_SCRIPT_ATTRIBUTE_OR_A_STRING_ATTRIBUTE_WITHIN_THE_OBJECT_BEING_USED_ELSE_IF_NO_ATTRIBUTE_THAN_IT_DOES_THE_DEFAULT_RESPONSE_ELSE_IF_A_INVALID_ATTRIBUTE_TYPE_IS_USED_THEN_GET_AN_ERROR_MESSAGE\" response=\"TEXT_FOR_DISPLAYING_DEFAULT_RESPONSE\" template=\"TEMPLATE_NAME\"&gt;\n  // scripting\n&lt;/verb&gt;\n\nor\n\n&lt;verb&gt;\n\n  &lt;name&gt;NAME_OF_VERB&lt;/name&gt;\n\n  &lt;pattern&gt;INPUT_PATTERN&lt;/pattern&gt;\n\n  &lt;unresolved&gt;TEXT_DISPLAYED_WHEN_UNRESOLVED&lt;/unresolved&gt;\n  &lt;property&gt;NAME_OF_ACTUAL_VERBS_ATTRIBUTE_BEING_USED_WHICH_IS_EITHER_A_SCRIPT_ATTRIBUTE_OR_A_STRING_ATTRIBUTE_WITHIN_THE_OBJECT_BEING_USED_ELSE_IF_NO_ATTRIBUTE_THAN_IT_DOES_THE_DEFAULT_RESPONSE_ELSE_IF_AN_INVALID_ATTRIBUTE_TYPE_IS_USED_THEN_GET_AN_ERROR_MESSAGE&lt;/property&gt;\n\n  &lt;response&gt;TEXT_FOR_DISPLAYING_DEFAULT_RESPONSE&lt;/response&gt;\n\n  &lt;template&gt;TEMPLATE_NAME&lt;/template&gt;\n\n&lt;/verb&gt;\n</code></pre>\n<p>if not, let me know</p>\n\n",
      "PostDate": "2020-03-14T16:37:39.8472691Z",
      "LastEditDate": "2020-03-14T16:44:38.9888282Z",
      "link": null
    },
    {
      "PostId": "50d043b3-bf7f-40d4-a99c-286ead37d80e",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi hegemonkhan.\r\n\r\nIt was information I was seeking about fulling in the blank fields after you have created a new verb for the Game Verbs.\r\nLooking at the user interface you can select a 'command pattern' or a 'regular expression' (not certain which is means by regular expression.\r\nDoes 'command pattern' mean I can enter more than one word as the verb?\r\nThen there is 'attribute'  What would be entered into this blank field?\r\nAnother field is 'scope' (I'm not certain how you would use this or what to type in. Maybe scope is the object that you use the verb on.\r\n\r\nYou also have a drop down menu that lists Text, Template, Expression.\r\nI understand the use of text and I think you use expression to display things such as player.alias. I'm not certain how you use Template.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi hegemonkhan.</p>\n<p>It was information I was seeking about fulling in the blank fields after you have created a new verb for the Game Verbs.<br>\nLooking at the user interface you can select a 'command pattern' or a 'regular expression' (not certain which is means by regular expression.<br>\nDoes 'command pattern' mean I can enter more than one word as the verb?<br>\nThen there is 'attribute'  What would be entered into this blank field?<br>\nAnother field is 'scope' (I'm not certain how you would use this or what to type in. Maybe scope is the object that you use the verb on.</p>\n<p>You also have a drop down menu that lists Text, Template, Expression.<br>\nI understand the use of text and I think you use expression to display things such as player.alias. I'm not certain how you use Template.</p>\n\n",
      "PostDate": "2020-03-15T23:13:42.2626084Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8e7f170f-6b7f-48b5-a6fc-399437b5d82e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Most of those are the same as for <a href=\"http://docs.textadventures.co.uk/quest/commands.html\">commands</a>.\r\n\r\nLooking at the user interface you can select a 'command pattern' or a 'regular expression' (not certain which is means by regular expression.\r\nDoes 'command pattern' mean I can enter more than one word as the verb?\r\n\r\nA \"regular expression\" is a complex language which is often used in programming for search-and-replace functionality.  Regular expressions are incredibly powerful, but may be hard to work with; I believe I posted a summary of some of the simpler features in response to a recent question here. A regular expression looks like `^paint (?<object>.+)$`.\r\n\r\nCommand patterns are a simpler way of setting a pattern; Quest converts them into regular expressions when the game starts. A command pattern might look like `paint #object#`, or `say #text#`, or `kick #object#;hit #object#;smash #object#`. You can list alternatives by putting a semicolon between them.\r\n\r\n> Then there is 'attribute' What would be entered into this blank field?\r\n\r\nA verb is a special type of command, which has a predefined script.\r\nThe script checks if the object it is being used on has a specific script attribute.\r\n\r\nSo, for example, if \"attribute\" is set to \"break\" then using this verb on an object will check to see if that object has a script attribute named \"break\", and run it. If the attribute doesn't exist, the default message will be printed. The attribute is normally the same as the name of the verb, and is set automatically by giving an object this verb.\r\n\r\n> Another field is 'scope' (I'm not certain how you would use this or what to type in. Maybe scope is the object that you use the verb on.\r\n\r\nScope will usually be something like `visible`, `room`, or `inventory` - but there are an awful lot of options like `container` as well, which help Quest to guess which object the player meant.",
      "EditableFormat": "markdown",
      "HTML": "<p>Most of those are the same as for <a href=\"http://docs.textadventures.co.uk/quest/commands.html\">commands</a>.</p>\n<p>Looking at the user interface you can select a 'command pattern' or a 'regular expression' (not certain which is means by regular expression.<br>\nDoes 'command pattern' mean I can enter more than one word as the verb?</p>\n<p>A \"regular expression\" is a complex language which is often used in programming for search-and-replace functionality.  Regular expressions are incredibly powerful, but may be hard to work with; I believe I posted a summary of some of the simpler features in response to a recent question here. A regular expression looks like <code>^paint (?&lt;object&gt;.+)$</code>.</p>\n<p>Command patterns are a simpler way of setting a pattern; Quest converts them into regular expressions when the game starts. A command pattern might look like <code>paint #object#</code>, or <code>say #text#</code>, or <code>kick #object#;hit #object#;smash #object#</code>. You can list alternatives by putting a semicolon between them.</p>\n<blockquote>\n<p>Then there is 'attribute' What would be entered into this blank field?</p>\n</blockquote>\n<p>A verb is a special type of command, which has a predefined script.<br>\nThe script checks if the object it is being used on has a specific script attribute.</p>\n<p>So, for example, if \"attribute\" is set to \"break\" then using this verb on an object will check to see if that object has a script attribute named \"break\", and run it. If the attribute doesn't exist, the default message will be printed. The attribute is normally the same as the name of the verb, and is set automatically by giving an object this verb.</p>\n<blockquote>\n<p>Another field is 'scope' (I'm not certain how you would use this or what to type in. Maybe scope is the object that you use the verb on.</p>\n</blockquote>\n<p>Scope will usually be something like <code>visible</code>, <code>room</code>, or <code>inventory</code> - but there are an awful lot of options like <code>container</code> as well, which help Quest to guess which object the player meant.</p>\n\n",
      "PostDate": "2020-03-16T00:47:50.4572126Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "fa3863db-b316-4c79-9524-065988088108",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh… templates are a weird thing you probably don't need. They're used to separate text from code, which is really useful if you're developing the same game in multiple languages, or if you're writing a library.\r\n\r\nBasically, if you have a line in a library somewhere:\r\n```\r\n<dynamictemplate name=\"CantSmoke\">\"You can't smoke the \"+object.alias+\".\"</dynamictemplate>\r\n```\r\nthen for your \"smoke\" verb you could choose \"Template\" type default message, and put `CantSmoke` in the box.\r\n\r\nSome of the built-in verbs use this feature, so that the `<dynamictemplate` line is placed in the language file, meaning that the message is right for whichever language the game creator has chosen.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh… templates are a weird thing you probably don't need. They're used to separate text from code, which is really useful if you're developing the same game in multiple languages, or if you're writing a library.</p>\n<p>Basically, if you have a line in a library somewhere:</p>\n<pre><code>&lt;dynamictemplate name=\"CantSmoke\"&gt;\"You can't smoke the \"+object.alias+\".\"&lt;/dynamictemplate&gt;\n</code></pre>\n<p>then for your \"smoke\" verb you could choose \"Template\" type default message, and put <code>CantSmoke</code> in the box.</p>\n<p>Some of the built-in verbs use this feature, so that the <code>&lt;dynamictemplate</code> line is placed in the language file, meaning that the message is right for whichever language the game creator has chosen.</p>\n\n",
      "PostDate": "2020-03-16T04:01:29.105244Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f6addbf0-9131-4c73-bc73-2676d25b7f46",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel.\r\n\r\nThat makes things clearer for me.\r\nI might experiment on some of the things you've told me about to get some experience in using them.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel.</p>\n<p>That makes things clearer for me.<br>\nI might experiment on some of the things you've told me about to get some experience in using them.</p>\n\n",
      "PostDate": "2020-03-16T04:14:41.8985977Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e05bdc7-a53c-4e5c-b278-8c397ae5626e",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi mrangle\r\n\r\nYou wrote\r\nScope will usually be something like visible, room, or inventory \r\n\r\nI'm thinking this means that if I typed inventory into the Scope field then the verb would only work if the object was in the players inventory.  I tried this but it does not seem to be working so maybe having inventory in the scope field does something else. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi mrangle</p>\n<p>You wrote<br>\nScope will usually be something like visible, room, or inventory</p>\n<p>I'm thinking this means that if I typed inventory into the Scope field then the verb would only work if the object was in the players inventory.  I tried this but it does not seem to be working so maybe having inventory in the scope field does something else.</p>\n\n",
      "PostDate": "2020-03-17T10:45:08.47702Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "972b98fe-dad5-474a-9409-dd5cc0fe0be6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's based on how Quest looks up object names.\r\n\r\nFor example, if there is a red flower on the ground, and a blue flower in the inventory. The player types \"drop flower\", and the drop command has scope `inventory`, so it knows that the player means the blue flower.\r\n\r\nWhen checking the object name a player has typed, Quest will look at:\r\n1. Objects in scope whose alias exactly matches what the player typed\r\n2. Objects in scope whose alias includes all the words the player typed\r\n3. Other visible objects whose alias exactly matches what the player typed\r\n4. Other visible objects whose alias includes all the words the player typed\r\n\r\nAt each of those 4 stages, if it finds exactly one matching object, Quest will run the command script using that object. If it finds more than one, it will display a menu asking the player which they meant. And if it finds none, it will look at the next group of object.\r\n\r\nIf you want to make a command (or verb) only work when the object is held, you'll need to check it in your own script. However, it does work the other way - if the scope variable is the name of a room or container (or the name of an objectlist attribute of the player), then the player will be able to use the verb on objects in that room even if they can't see them.\r\n\r\nNow that I think about it, this seems a little counterintuitive for verbs. I think there should be a checkbox in the editor, to restrict the verb to objects that are in scope. It would basically involve changing the `defaultverb` type:\r\n\r\n<pre><code>&lt;type name=\"defaultverb\">\r\n  &lt;separator>[VerbObjectSeparator]&lt;/separator>\r\n  &lt;multiobjectmenu>[MultiObjectVerbMenu]&lt;/multiobjectmenu>\r\n  &lt;multiobjectdefault>[DefaultMultiObjectVerb]&lt;/multiobjectdefault>\r\n  &lt;multiobjectmenuempty>[NoObjectsAvailable]&lt;/multiobjectmenuempty>\r\n  &lt;script type=\"script\">\r\n    &lt;![CDATA[\r\n    if (not IsDefined(\"object2\")) {\r\n      object2 = null\r\n    }\r\n<b style=\"border: 1px solid green; display: block\">    if (GetBoolean (object, \"enforcescope\") and not ListContains (GetScope (\"object\", \"object\", \"object\"), object)) {\r\n      if (HasString (this, \"scopemessage\")) {\r\n        msg (this.scopemessage)\r\n      }\r\n      else {\r\n        msg (\"You can't do that.\")\r\n      }\r\n    }\r\n    else {</b>      switch (TypeOf(object, this.property)) {\r\n        case (\"script\") {\r\n          if (object2 = null) {\r\n            do (object, this.property)\r\n          }\r\n          else {\r\n            msg (this.multiobjectdefault)\r\n          }\r\n        }\r\n        case (\"string\") {\r\n          if (object2 = null) {\r\n            msg (GetString(object, this.property))\r\n          }\r\n          else {\r\n            msg (this.multiobjectdefault)\r\n          }\r\n        }\r\n        case (\"scriptdictionary\") {\r\n          if (not object2 = null) {\r\n            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)\r\n          }\r\n          else {\r\n            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())\r\n            excludelist = NewObjectList()\r\n            list add (excludelist, game.pov)\r\n            list add (excludelist, object)\r\n            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\n            if (ListCount(candidates) = 0) {\r\n              msg (this.multiobjectmenuempty)\r\n            }\r\n            else {\r\n              game.pov.multiverb = this.property\r\n              game.pov.multiverbobject = object\r\n              game.pov.multiverbobjectdefault = this.multiobjectdefault\r\n              ShowMenu (this.multiobjectmenu, candidates, true) {\r\n                if (not result = null) {\r\n                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)\r\n                  game.pov.multiverb = null\r\n                  game.pov.multiverbobject = null\r\n                  game.pov.multiverbobjectdefault = null\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        case (\"null\") {\r\n          if (HasString (this, \"defaulttext\")) {\r\n            msg (this.defaulttext)\r\n          }\r\n          else if (not this.defaulttemplate = null) {\r\n            msg (DynamicTemplate(this.defaulttemplate, object))\r\n          }\r\n          else if (not this.defaultexpression = null) {\r\n            params = NewDictionary()\r\n            dictionary add (params, \"object\", object)\r\n            msg (Eval(this.defaultexpression, params))\r\n          }\r\n          else {\r\n            error (\"No verb response defined\")\r\n          }\r\n        }\r\n        default {\r\n          error (\"No verb response defined\")\r\n        }\r\n      }\r\n<b style=\"border: 1px solid green\">    }</b>\r\n    ]]>\r\n  &lt;/script>\r\n&lt;/type></code></pre>\r\n\r\nThen you could make a verb like:\r\n```\r\n<verb name=\"read\">\r\n  <property>read</property>\r\n  <scope type=\"string\">inventory</scope>\r\n  <enforcescope />\r\n  <scopemessage type=\"string\">You can only read things you are holding.</scope>\r\n</verb>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>It's based on how Quest looks up object names.</p>\n<p>For example, if there is a red flower on the ground, and a blue flower in the inventory. The player types \"drop flower\", and the drop command has scope <code>inventory</code>, so it knows that the player means the blue flower.</p>\n<p>When checking the object name a player has typed, Quest will look at:</p>\n<ol>\n<li>Objects in scope whose alias exactly matches what the player typed</li>\n<li>Objects in scope whose alias includes all the words the player typed</li>\n<li>Other visible objects whose alias exactly matches what the player typed</li>\n<li>Other visible objects whose alias includes all the words the player typed</li>\n</ol>\n<p>At each of those 4 stages, if it finds exactly one matching object, Quest will run the command script using that object. If it finds more than one, it will display a menu asking the player which they meant. And if it finds none, it will look at the next group of object.</p>\n<p>If you want to make a command (or verb) only work when the object is held, you'll need to check it in your own script. However, it does work the other way - if the scope variable is the name of a room or container (or the name of an objectlist attribute of the player), then the player will be able to use the verb on objects in that room even if they can't see them.</p>\n<p>Now that I think about it, this seems a little counterintuitive for verbs. I think there should be a checkbox in the editor, to restrict the verb to objects that are in scope. It would basically involve changing the <code>defaultverb</code> type:</p>\n<pre><code>&lt;type name=\"defaultverb\"&gt;\n  &lt;separator&gt;[VerbObjectSeparator]&lt;/separator&gt;\n  &lt;multiobjectmenu&gt;[MultiObjectVerbMenu]&lt;/multiobjectmenu&gt;\n  &lt;multiobjectdefault&gt;[DefaultMultiObjectVerb]&lt;/multiobjectdefault&gt;\n  &lt;multiobjectmenuempty&gt;[NoObjectsAvailable]&lt;/multiobjectmenuempty&gt;\n  &lt;script type=\"script\"&gt;\n    &lt;![CDATA[\n    if (not IsDefined(\"object2\")) {\n      object2 = null\n    }\n<b style=\"border: 1px solid green; display: block\">    if (GetBoolean (object, \"enforcescope\") and not ListContains (GetScope (\"object\", \"object\", \"object\"), object)) {\n      if (HasString (this, \"scopemessage\")) {\n        msg (this.scopemessage)\n      }\n      else {\n        msg (\"You can't do that.\")\n      }\n    }\n    else {</b>      switch (TypeOf(object, this.property)) {\n        case (\"script\") {\n          if (object2 = null) {\n            do (object, this.property)\n          }\n          else {\n            msg (this.multiobjectdefault)\n          }\n        }\n        case (\"string\") {\n          if (object2 = null) {\n            msg (GetString(object, this.property))\n          }\n          else {\n            msg (this.multiobjectdefault)\n          }\n        }\n        case (\"scriptdictionary\") {\n          if (not object2 = null) {\n            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)\n          }\n          else {\n            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())\n            excludelist = NewObjectList()\n            list add (excludelist, game.pov)\n            list add (excludelist, object)\n            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\n            if (ListCount(candidates) = 0) {\n              msg (this.multiobjectmenuempty)\n            }\n            else {\n              game.pov.multiverb = this.property\n              game.pov.multiverbobject = object\n              game.pov.multiverbobjectdefault = this.multiobjectdefault\n              ShowMenu (this.multiobjectmenu, candidates, true) {\n                if (not result = null) {\n                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)\n                  game.pov.multiverb = null\n                  game.pov.multiverbobject = null\n                  game.pov.multiverbobjectdefault = null\n                }\n              }\n            }\n          }\n        }\n        case (\"null\") {\n          if (HasString (this, \"defaulttext\")) {\n            msg (this.defaulttext)\n          }\n          else if (not this.defaulttemplate = null) {\n            msg (DynamicTemplate(this.defaulttemplate, object))\n          }\n          else if (not this.defaultexpression = null) {\n            params = NewDictionary()\n            dictionary add (params, \"object\", object)\n            msg (Eval(this.defaultexpression, params))\n          }\n          else {\n            error (\"No verb response defined\")\n          }\n        }\n        default {\n          error (\"No verb response defined\")\n        }\n      }\n<b style=\"border: 1px solid green\">    }</b>\n    ]]&gt;\n  &lt;/script&gt;\n&lt;/type&gt;</code></pre>\n<p>Then you could make a verb like:</p>\n<pre><code>&lt;verb name=\"read\"&gt;\n  &lt;property&gt;read&lt;/property&gt;\n  &lt;scope type=\"string\"&gt;inventory&lt;/scope&gt;\n  &lt;enforcescope /&gt;\n  &lt;scopemessage type=\"string\"&gt;You can only read things you are holding.&lt;/scope&gt;\n&lt;/verb&gt;\n</code></pre>\n\n",
      "PostDate": "2020-03-17T12:17:00.823661Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1c156d94-ae44-4de0-b410-49daa2f9f1ae",
      "UserId": 454326,
      "Username": "Brian5757",
      "AvatarUrl": "https://secure.gravatar.com/avatar/411c3e8cd4782d4a996f292940a61069?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel for the code.\r\nI might consider adding the extra code later.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel for the code.<br>\nI might consider adding the extra code later.</p>\n\n",
      "PostDate": "2020-03-18T01:03:56.2947943Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
