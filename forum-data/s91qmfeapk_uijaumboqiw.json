{
  "Topic": {
    "TopicId": "s91qmfeapk_uijaumboqiw",
    "ForumId": "10",
    "Title": "Making a Fireplace that can burn certain objects?",
    "LastUpdated": "2018-07-10T06:21:24.8215147Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d16cc191-7edb-4ec1-bd00-1e1eef5a195b",
      "UserId": 367635,
      "Username": "lunalullaby",
      "AvatarUrl": "https://secure.gravatar.com/avatar/60010839813e8eaacbc09ddaa194b152?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm totally new to Quest...and coding to a large extent, and I'm trying to create some things that may be out of my league, but I want to try a bit of everything to start with. Right now I have this fireplace that I want to make capable of turning certain objects to ash. I have looked over the tutorials for making one object into another, so I created an object to be burned (a note), some ash, and the fireplace itself, but I'm having trouble making it so that when I type in something like \"burn note in fireplace\", it will actually do that. I can get it to work if I say \"use note with fireplace\", but that's not quite how one would go about trying to preform that action, you know? Anyway any help would be very appreciated! You may have to explain it as though you're talking to a child: this is a bit overwhelming to me but I really want to learn all I can about it! Thanks in advance!",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm totally new to Quest...and coding to a large extent, and I'm trying to create some things that may be out of my league, but I want to try a bit of everything to start with. Right now I have this fireplace that I want to make capable of turning certain objects to ash. I have looked over the tutorials for making one object into another, so I created an object to be burned (a note), some ash, and the fireplace itself, but I'm having trouble making it so that when I type in something like \"burn note in fireplace\", it will actually do that. I can get it to work if I say \"use note with fireplace\", but that's not quite how one would go about trying to preform that action, you know? Anyway any help would be very appreciated! You may have to explain it as though you're talking to a child: this is a bit overwhelming to me but I really want to learn all I can about it! Thanks in advance!</p>\n\n",
      "PostDate": "2018-07-10T06:21:24.8215147Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5fbdbfd6-23ae-4e24-9348-ee4cdcb1e254",
      "UserId": 329383,
      "Username": "J_J",
      "AvatarUrl": "https://secure.gravatar.com/avatar/d6dcf2651a8e3cfe546c1fe096981552?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would use a command instead of a verb. You can put in any combination of phrases like this: \"burn #object# in fireplace\" then as an if expression write: \"if object = note\" and then add the msg, make the note invisible and replace it with ash. \r\n\r\nThe command will let you burn multiple items this way, or give snarky comments if they try and burn something you don't want them to.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would use a command instead of a verb. You can put in any combination of phrases like this: \"burn #object# in fireplace\" then as an if expression write: \"if object = note\" and then add the msg, make the note invisible and replace it with ash.</p>\n<p>The command will let you burn multiple items this way, or give snarky comments if they try and burn something you don't want them to.</p>\n\n",
      "PostDate": "2018-07-10T06:53:30.6615065Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3958bf89-6241-4559-b2ba-0a5e873e2ff0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "also, here's some links to get you started with learning quest and its coding:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\n(take it slow, one thing at a time, as it's quite OVER-whelming and a lot of stuff to learn, when you're totally new to quest and to coding)\r\n\r\n(ask if you need help with anything and/or need anything explained more/better)",
      "EditableFormat": "markdown",
      "HTML": "<p>also, here's some links to get you started with learning quest and its coding:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>(take it slow, one thing at a time, as it's quite OVER-whelming and a lot of stuff to learn, when you're totally new to quest and to coding)</p>\n<p>(ask if you need help with anything and/or need anything explained more/better)</p>\n\n",
      "PostDate": "2018-07-10T07:19:43.3264124Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "48805d52-1e2a-43f7-9954-7dcb79f8cb74",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "to add to J_J's post:\r\n\r\nThere's two ways of getting/using typed-in inputs:\r\n\r\n1. the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html\r\n\r\nin the GUI/Editor: add new script -> 'output' section/category -> 'get input' Script/Function -> [add scripting: add new script/s]\r\n\r\n```\r\n<!--\r\nexample using a 'Function' Element, called by the built-in 'start' Script Attribute of the 'game' Object (the 'game.start' Script Attribute is activated/executed/run/fired at game start, as the very first thing done by the game, when you play it, making the 'game.start' Script Attribute good for game introduction,character creation, and/or whatever else you want done before the person is able to start playing your game)\r\n-->\r\n\r\n<game name=\"NAME_OF_GAME\">\r\n\r\n  <attr name=\"start\" type=\"script\">\r\n\r\n    set_name_of_player_function\r\n\r\n    on ready {\r\n\r\n      msg (\"Player Name: \" + player.alias)\r\n\r\n    }\r\n\r\n  </attr>\r\n\r\n</game>\r\n\r\n<function name=\"set_name_of_player_function\">\r\n\r\n  msg (\"Name?\")\r\n\r\n  get input {\r\n\r\n    player.alias = result\r\n\r\n  }\r\n\r\n</function>\r\n```\r\n\r\n2. the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html\r\n\r\nin the GUI/Editor: left side's \"tree of stuff (Elements)\" -> under 'game' -> 'Commands' -> Add -> [set up your Command]\r\n\r\n```\r\n<command name=\"NAME_OF_COMMAND\">\r\n\r\n  <pattern>PATTERN_EXPRESSION</pattern>\r\n\r\n  <script>\r\n\r\n    // scripting\r\n\r\n  </script>\r\n\r\n</command>\r\n```\r\n\r\n---------------------\r\n\r\nThe 'Command' Element has a lot of functionality, so we'll be using that (as already stated by J_J in his/her post)\r\n\r\nthe 'pattern' of the Command is instructions for how it is to handle/parse/understand your typed-in input/s during game play\r\n\r\nthe first 'word' of the 'pattern' needs to be unique, as it will be what distinguishes one Command from another, so Quest will know which Command to use. I like to call this first 'word', as: the command activator word\r\n\r\nfor example, the built-in 'use' and 'useon' Commands, uses (pun sorry): guess what its activator word is (answer: use)\r\n\r\n(at the bottom left corner, is the 'filter' -> 'show library elements' -> shows (show/hide toggle) the built-in stuff in the left side's \"tree of stuff\" as light grey text, for example the 'use' and 'useon' Commands)\r\n\r\n```\r\n<command name=\"use\">\r\n\r\n  <pattern>use #object#</pattern>\r\n\r\n</command>\r\n\r\n<command name=\"useon\">\r\n\r\n  <pattern>use #object1# on #object2#;use #object1# with #object2#</pattern>\r\n\r\n</command>\r\n```\r\n\r\nso, you should use 'burn' for your Command for what you want to do:\r\n\r\n(you can name the Command whatever you want, you don't have to use my name in the example below)\r\n\r\n(try to quickly create a naming/labeling system/convention that works well for you, as it's a huge pain to go back and change everything to a different/new/better naming/labeling system/convention, lol)\r\n\r\n```\r\n<command name=\"burn_command\">\r\n\r\n  <pattern>burn</pattern>\r\n\r\n</command>\r\n```\r\n\r\nnow, we're going to be typing in for our input, what object we want to try to burn, and thus we need to tell quest to store that part of our input into a VARIABLE, so that we can then act upon it with our Command:\r\n\r\nthis is done by putting the below into the 'pattern' of the Command:\r\n\r\n#object#\r\nor\r\n#objectXXX#\r\n\r\n(the 'XXX' is my way of saying that you can write in whatever you want for it, for examples: #object1#, #object_1#, #object2#, #object_2#, #object_1_parameter#, #object_2_parameter#, etc etc etc. You must have it start with '#object' and end with '#')\r\n\r\nnow, there's also:\r\n\r\n#text#\r\nor\r\n#textXXX#\r\n\r\n(the 'XXX' is my way of saying that you can write in whatever you want for it, for examples: #text1#, #text_1#, #text2#, #text_2#, #text_1_parameter#, #text_2_parameter#, etc etc etc. You must have it start with '#text' and end with '#')\r\n\r\nbut, we're going to be using '#object#/#objectXXX#', as we want to it look for Objects, and not just use the inputted text, which is the difference between using the '#object#/#objectXXX#' and '#text#/#textXXX#'\r\n\r\n```\r\n<command name=\"burn_command\">\r\n\r\n  <pattern>burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#</pattern>\r\n\r\n</command>\r\n```\r\n\r\nthe semicolon separates the pattern expressions, so you can handle different inputs (handling \"guess the verb\", as what might be obvious to you to type in 'burn', it might not be for someone else, they may type in 'fry', and also notice that you could type in 'in' or maybe 'with' depending on what action the person playing the game is trying)\r\n\r\nvery important: have the most complex/longest pattern expressions be first to least complex/long pattern expressions last, as otherwise it'll never be able to parse the longer/complex inputs during game play\r\n\r\nnow, for how it works:\r\n\r\nsay I type in during game play:\r\n\r\nburn note in fireplace\r\n// or\r\n// burn note with fireplace\r\n// or\r\n// fry note in fireplace\r\n// or\r\n// fry note with fireplace\r\n// or\r\n// incinerate note in fireplace\r\n// or\r\n// incinerate note with fireplace\r\n\r\nnotice how my input matches up (as it HAS TO) with the 'pattern' of the Command (same 1 space between burn+note, note+in, and in+fireplace) (same placement of 'burn', 'note', 'in', and 'fireplace' between my input and the 'pattern' of the Command)\r\n\r\nnow, those '#' symbols in the 'pattern' of the Command, take the inputted text in the same placement as it, and will store it into a 'Variable' VARIABLE of the same name as it (minus the '#' symbols):\r\n\r\nso, for my example, the 'Variable' VARIABLES would be:\r\n\r\nobject_1\r\nobject_2\r\n\r\nstored in 'object_1' would be (a pointer/reference to) the 'note' Object\r\nstored in 'object_2' would be (a pointer/reference to) the 'fireplace' Object\r\n\r\nnow, since I'm using the '#object#/#objectXXX#', the 'note' and 'fireplace' must be existing Objects, and those Objects must be reachable (within the current room you're in and accessible, for example: not within a closed container Object), otherwise it fails to find them and thus it doesn't have them stored and thus you can use them in the Command's scripting, and thus the Command's 'unresolved' message is displayed letting you know your inputs failed:\r\n\r\n```\r\n<command name=\"burn_command\">\r\n\r\n  <pattern>burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#</pattern>\r\n\r\n  <script>\r\n\r\n    // scripting\r\n\r\n  </script>\r\n\r\n  <unresolved>Wrong inputs, try again!</unresolved>\r\n\r\n</command>\r\n```\r\n\r\nnow... the scripting... and using our 'object_1' and 'object_2' 'Variable' VARIABLES:\r\n\r\n(a simple example only, hopefully you'll be able to understand this stuff... I'm using some stuff you probably don't know about yet, so, if not, ask us to explain it, or about/of whatever stuff in it)\r\n\r\n```\r\n<game name=\"NAME_OF_GAME\">\r\n</game>\r\n\r\n<object name=\"room\">\r\n\r\n  <inherit name=\"editor_room\" />\r\n\r\n</object>\r\n\r\n<object name=\"internal_storage\">\r\n</object>\r\n\r\n<object name=\"player\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n  <inherit name=\"editor_player\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"note\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <inherit name=\"flammable_type\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"fireplace\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <inherit name=\"spark_type\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n</object>\r\n\r\n<object name=\"ash\">\r\n\r\n  <inherit name=\"editor_object\" />\r\n\r\n  <attr name=\"parent\" type=\"object\">internal_storage</attr>\r\n\r\n</object>\r\n\r\n<type name=\"flammable_type\">\r\n</type>\r\n\r\n<type name=\"spark_type\">\r\n</type>\r\n\r\n<command name=\"burn_command\">\r\n\r\n  <pattern>burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#</pattern>\r\n\r\n  <script>\r\n\r\n    // this is just a simple example, so it doesn't handle all of the issues associated with all of the functionality involved (see if you can see/spot/understand/realize some of these issues, hint: think logically about what you're doing and what are all of the different things/scenarios/actions/situations that can happen with what you're doing, what happens if you were to try doing this again, etc etc etc)\r\n\r\n    if (DoesInherit (object_1, \"flammable_type\") and DoesInherit (object_2, \"spark_type\")) {\r\n\r\n      object_1.parent = internal_storage\r\n\r\n      ash.parent = player.parent\r\n\r\n    }\r\n\r\n  </script>\r\n\r\n  <unresolved>Wrong inputs, try again!</unresolved>\r\n\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>to add to J_J's post:</p>\n<p>There's two ways of getting/using typed-in inputs:</p>\n<ol>\n<li>the 'get input' Script/Function: http://docs.textadventures.co.uk/quest/scripts/get_input.html</li>\n</ol>\n<p>in the GUI/Editor: add new script -&gt; 'output' section/category -&gt; 'get input' Script/Function -&gt; [add scripting: add new script/s]</p>\n<pre><code>&lt;!--\nexample using a 'Function' Element, called by the built-in 'start' Script Attribute of the 'game' Object (the 'game.start' Script Attribute is activated/executed/run/fired at game start, as the very first thing done by the game, when you play it, making the 'game.start' Script Attribute good for game introduction,character creation, and/or whatever else you want done before the person is able to start playing your game)\n--&gt;\n\n&lt;game name=\"NAME_OF_GAME\"&gt;\n\n  &lt;attr name=\"start\" type=\"script\"&gt;\n\n    set_name_of_player_function\n\n    on ready {\n\n      msg (\"Player Name: \" + player.alias)\n\n    }\n\n  &lt;/attr&gt;\n\n&lt;/game&gt;\n\n&lt;function name=\"set_name_of_player_function\"&gt;\n\n  msg (\"Name?\")\n\n  get input {\n\n    player.alias = result\n\n  }\n\n&lt;/function&gt;\n</code></pre>\n<ol start=\"2\">\n<li>the 'Command' Element: http://docs.textadventures.co.uk/quest/elements/command.html</li>\n</ol>\n<p>in the GUI/Editor: left side's \"tree of stuff (Elements)\" -&gt; under 'game' -&gt; 'Commands' -&gt; Add -&gt; [set up your Command]</p>\n<pre><code>&lt;command name=\"NAME_OF_COMMAND\"&gt;\n\n  &lt;pattern&gt;PATTERN_EXPRESSION&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    // scripting\n\n  &lt;/script&gt;\n\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>The 'Command' Element has a lot of functionality, so we'll be using that (as already stated by J_J in his/her post)</p>\n<p>the 'pattern' of the Command is instructions for how it is to handle/parse/understand your typed-in input/s during game play</p>\n<p>the first 'word' of the 'pattern' needs to be unique, as it will be what distinguishes one Command from another, so Quest will know which Command to use. I like to call this first 'word', as: the command activator word</p>\n<p>for example, the built-in 'use' and 'useon' Commands, uses (pun sorry): guess what its activator word is (answer: use)</p>\n<p>(at the bottom left corner, is the 'filter' -&gt; 'show library elements' -&gt; shows (show/hide toggle) the built-in stuff in the left side's \"tree of stuff\" as light grey text, for example the 'use' and 'useon' Commands)</p>\n<pre><code>&lt;command name=\"use\"&gt;\n\n  &lt;pattern&gt;use #object#&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n&lt;command name=\"useon\"&gt;\n\n  &lt;pattern&gt;use #object1# on #object2#;use #object1# with #object2#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>so, you should use 'burn' for your Command for what you want to do:</p>\n<p>(you can name the Command whatever you want, you don't have to use my name in the example below)</p>\n<p>(try to quickly create a naming/labeling system/convention that works well for you, as it's a huge pain to go back and change everything to a different/new/better naming/labeling system/convention, lol)</p>\n<pre><code>&lt;command name=\"burn_command\"&gt;\n\n  &lt;pattern&gt;burn&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>now, we're going to be typing in for our input, what object we want to try to burn, and thus we need to tell quest to store that part of our input into a VARIABLE, so that we can then act upon it with our Command:</p>\n<p>this is done by putting the below into the 'pattern' of the Command:</p>\n<p>#object#<br>\nor<br>\n#objectXXX#</p>\n<p>(the 'XXX' is my way of saying that you can write in whatever you want for it, for examples: #object1#, #object_1#, #object2#, #object_2#, #object_1_parameter#, #object_2_parameter#, etc etc etc. You must have it start with '#object' and end with '#')</p>\n<p>now, there's also:</p>\n<p>#text#<br>\nor<br>\n#textXXX#</p>\n<p>(the 'XXX' is my way of saying that you can write in whatever you want for it, for examples: #text1#, #text_1#, #text2#, #text_2#, #text_1_parameter#, #text_2_parameter#, etc etc etc. You must have it start with '#text' and end with '#')</p>\n<p>but, we're going to be using '#object#/#objectXXX#', as we want to it look for Objects, and not just use the inputted text, which is the difference between using the '#object#/#objectXXX#' and '#text#/#textXXX#'</p>\n<pre><code>&lt;command name=\"burn_command\"&gt;\n\n  &lt;pattern&gt;burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>the semicolon separates the pattern expressions, so you can handle different inputs (handling \"guess the verb\", as what might be obvious to you to type in 'burn', it might not be for someone else, they may type in 'fry', and also notice that you could type in 'in' or maybe 'with' depending on what action the person playing the game is trying)</p>\n<p>very important: have the most complex/longest pattern expressions be first to least complex/long pattern expressions last, as otherwise it'll never be able to parse the longer/complex inputs during game play</p>\n<p>now, for how it works:</p>\n<p>say I type in during game play:</p>\n<p>burn note in fireplace<br>\n// or<br>\n// burn note with fireplace<br>\n// or<br>\n// fry note in fireplace<br>\n// or<br>\n// fry note with fireplace<br>\n// or<br>\n// incinerate note in fireplace<br>\n// or<br>\n// incinerate note with fireplace</p>\n<p>notice how my input matches up (as it HAS TO) with the 'pattern' of the Command (same 1 space between burn+note, note+in, and in+fireplace) (same placement of 'burn', 'note', 'in', and 'fireplace' between my input and the 'pattern' of the Command)</p>\n<p>now, those '#' symbols in the 'pattern' of the Command, take the inputted text in the same placement as it, and will store it into a 'Variable' VARIABLE of the same name as it (minus the '#' symbols):</p>\n<p>so, for my example, the 'Variable' VARIABLES would be:</p>\n<p>object_1<br>\nobject_2</p>\n<p>stored in 'object_1' would be (a pointer/reference to) the 'note' Object<br>\nstored in 'object_2' would be (a pointer/reference to) the 'fireplace' Object</p>\n<p>now, since I'm using the '#object#/#objectXXX#', the 'note' and 'fireplace' must be existing Objects, and those Objects must be reachable (within the current room you're in and accessible, for example: not within a closed container Object), otherwise it fails to find them and thus it doesn't have them stored and thus you can use them in the Command's scripting, and thus the Command's 'unresolved' message is displayed letting you know your inputs failed:</p>\n<pre><code>&lt;command name=\"burn_command\"&gt;\n\n  &lt;pattern&gt;burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    // scripting\n\n  &lt;/script&gt;\n\n  &lt;unresolved&gt;Wrong inputs, try again!&lt;/unresolved&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>now... the scripting... and using our 'object_1' and 'object_2' 'Variable' VARIABLES:</p>\n<p>(a simple example only, hopefully you'll be able to understand this stuff... I'm using some stuff you probably don't know about yet, so, if not, ask us to explain it, or about/of whatever stuff in it)</p>\n<pre><code>&lt;game name=\"NAME_OF_GAME\"&gt;\n&lt;/game&gt;\n\n&lt;object name=\"room\"&gt;\n\n  &lt;inherit name=\"editor_room\" /&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"internal_storage\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;inherit name=\"editor_player\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"note\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;inherit name=\"flammable_type\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"fireplace\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;inherit name=\"spark_type\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;object name=\"ash\"&gt;\n\n  &lt;inherit name=\"editor_object\" /&gt;\n\n  &lt;attr name=\"parent\" type=\"object\"&gt;internal_storage&lt;/attr&gt;\n\n&lt;/object&gt;\n\n&lt;type name=\"flammable_type\"&gt;\n&lt;/type&gt;\n\n&lt;type name=\"spark_type\"&gt;\n&lt;/type&gt;\n\n&lt;command name=\"burn_command\"&gt;\n\n  &lt;pattern&gt;burn #object_1# in #object_2#;burn #object_1# with #object_2#;fry #object_1# in #object_2#;fry #object_1# with #object_2#;incinerate #object_1# in #object_2#;incinerate #object_1# with #object_2#&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    // this is just a simple example, so it doesn't handle all of the issues associated with all of the functionality involved (see if you can see/spot/understand/realize some of these issues, hint: think logically about what you're doing and what are all of the different things/scenarios/actions/situations that can happen with what you're doing, what happens if you were to try doing this again, etc etc etc)\n\n    if (DoesInherit (object_1, \"flammable_type\") and DoesInherit (object_2, \"spark_type\")) {\n\n      object_1.parent = internal_storage\n\n      ash.parent = player.parent\n\n    }\n\n  &lt;/script&gt;\n\n  &lt;unresolved&gt;Wrong inputs, try again!&lt;/unresolved&gt;\n\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2018-07-10T08:47:15.1538835Z",
      "LastEditDate": "2018-07-10T09:00:35.022638Z",
      "link": null
    },
    {
      "PostId": "ccf8e996-da0f-4fe7-8f2e-da4b7542ca55",
      "UserId": 28419,
      "Username": "pascal.marchese",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a0ab02717f4df07b322761fc1d51dda6?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could start doing:\r\n1) a new TYPE for combustible objects. For example you could create a  ```<TYPE name=\"type_wood\">``` with attributes and a script \"BURN\" that starts when the object is in the fireplace. \r\n2) Apply this type to every objects that you want to burn.\r\n3) Make a turnscript that check if the objects is in the fireplace and eventually starts the \"burn\" script.",
      "EditableFormat": "markdown",
      "HTML": "<p>You could start doing:</p>\n<ol>\n<li>a new TYPE for combustible objects. For example you could create a  <code>&lt;TYPE name=\"type_wood\"&gt;</code> with attributes and a script \"BURN\" that starts when the object is in the fireplace.</li>\n<li>Apply this type to every objects that you want to burn.</li>\n<li>Make a turnscript that check if the objects is in the fireplace and eventually starts the \"burn\" script.</li>\n</ol>\n\n",
      "PostDate": "2018-07-10T09:07:57.1728279Z",
      "LastEditDate": "2018-07-10T22:33:03.5614737Z",
      "link": null
    },
    {
      "PostId": "eb6025c5-baad-4c52-9aa2-394ebf4beb2e",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There are several ways you could do this. Pascal's is probably the best if you want a system that handles fire properly. I will offer a simpler approach, which will do what you want, I think.\r\n\r\nI would do this with two commands, one to handle BURN PAPER and one to handle BURN PAPER IN FIREPLACE. Before we get to the commands, give the fireplace a new attribute \"fire\", set it to be a Boolean and true. This will tell Quest this is something objects can be burned on. Then for the paper, give it an attribute \"ashes\", and make this a string that can be used for the name (alias) of the ashes, say \"ashes of the paper\". You could also give the paper another attribute \"ashes_look\" and that will be used for the description of the ashes.\r\n\r\nFor the first command give it this pattern:\r\n\r\n```\r\nburn #object1# on #object2#;burn #object1# in #object2#;burn #object1# with #object2#\r\n```\r\n\r\nGive it a name, \"cmd_burn_with\" (commands do not usually need names, but this will be useful later). Paste in the code:\r\n\r\n```\r\nif (not GetBoolean(object2, \"fire\")) {\r\n  msg (CapFirst(GetDisplayName(object2)) + \" \" + Conjugate(object2, \"be\") + \"n't a fire.\")\r\n}\r\nelse if (not HasString(object1, \"ashes\")) {\r\n  msg (WriteVerb(object1, \"do\") + \"n't burn.\")\r\n}\r\nelse {\r\n  msg (\"You burn the \" + GetDisplayAlias(object1) + \" with the \" + GetDisplayAlias(object2) + \".\")\r\n  create (\"ashes of \" + object1.name)\r\n  ashes = GetObject(\"ashes of \" + object1.name)\r\n  ashes.parent = object1.parent\r\n  ashes.alias = object1.ashes\r\n  if (HasString(object1, \"ashes_look\")) {\r\n    ashes.look = object1.ashes_look\r\n  }\r\n  else {\r\n    ashes.look = \"This is all that is left of the \" + GetDisplayAlias(object1) + \" after you burnt \" + object1.article + \".\"\r\n  }\r\n  object1.parent = null\r\n}\r\n```\r\n\r\nThe code checks if the second object is on fire (i.e., the \"fire\" attribute is true), then checks the first object can be burnt (i.e., it has an \"ashes\" string). If so, it creates a new object, the ashes of the first object, placing that whereever the first object is, and then removes that object.\r\n\r\nThe second command has this pattern:\r\n\r\n```\r\nburn #object1#\r\n```\r\nHere is the code:\r\n```\r\nl = FilterByAttribute(ScopeReachable(), \"fire\", true)\r\nif (ListCount(l) = 0) {\r\n  msg (\"There is no fire here to burn anything on.\")\r\n}\r\nelse {\r\n  d = NewDictionary()\r\n  dictionary add (d, \"object1\", object1)\r\n  dictionary add (d, \"object2\", ObjectListItem(l, 0))\r\n  do (cmd_burn_with, \"script\", d)\r\n}\r\n```\r\nThis looks for an object present with the \"fire\" attribute. If it finds one, it passes that and object1 to the first command to do all the work. Note that if there are two fires in the room, one will be selected arbitarily by Quest.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>There are several ways you could do this. Pascal's is probably the best if you want a system that handles fire properly. I will offer a simpler approach, which will do what you want, I think.</p>\n<p>I would do this with two commands, one to handle BURN PAPER and one to handle BURN PAPER IN FIREPLACE. Before we get to the commands, give the fireplace a new attribute \"fire\", set it to be a Boolean and true. This will tell Quest this is something objects can be burned on. Then for the paper, give it an attribute \"ashes\", and make this a string that can be used for the name (alias) of the ashes, say \"ashes of the paper\". You could also give the paper another attribute \"ashes_look\" and that will be used for the description of the ashes.</p>\n<p>For the first command give it this pattern:</p>\n<pre><code>burn #object1# on #object2#;burn #object1# in #object2#;burn #object1# with #object2#\n</code></pre>\n<p>Give it a name, \"cmd_burn_with\" (commands do not usually need names, but this will be useful later). Paste in the code:</p>\n<pre><code>if (not GetBoolean(object2, \"fire\")) {\n  msg (CapFirst(GetDisplayName(object2)) + \" \" + Conjugate(object2, \"be\") + \"n't a fire.\")\n}\nelse if (not HasString(object1, \"ashes\")) {\n  msg (WriteVerb(object1, \"do\") + \"n't burn.\")\n}\nelse {\n  msg (\"You burn the \" + GetDisplayAlias(object1) + \" with the \" + GetDisplayAlias(object2) + \".\")\n  create (\"ashes of \" + object1.name)\n  ashes = GetObject(\"ashes of \" + object1.name)\n  ashes.parent = object1.parent\n  ashes.alias = object1.ashes\n  if (HasString(object1, \"ashes_look\")) {\n    ashes.look = object1.ashes_look\n  }\n  else {\n    ashes.look = \"This is all that is left of the \" + GetDisplayAlias(object1) + \" after you burnt \" + object1.article + \".\"\n  }\n  object1.parent = null\n}\n</code></pre>\n<p>The code checks if the second object is on fire (i.e., the \"fire\" attribute is true), then checks the first object can be burnt (i.e., it has an \"ashes\" string). If so, it creates a new object, the ashes of the first object, placing that whereever the first object is, and then removes that object.</p>\n<p>The second command has this pattern:</p>\n<pre><code>burn #object1#\n</code></pre>\n<p>Here is the code:</p>\n<pre><code>l = FilterByAttribute(ScopeReachable(), \"fire\", true)\nif (ListCount(l) = 0) {\n  msg (\"There is no fire here to burn anything on.\")\n}\nelse {\n  d = NewDictionary()\n  dictionary add (d, \"object1\", object1)\n  dictionary add (d, \"object2\", ObjectListItem(l, 0))\n  do (cmd_burn_with, \"script\", d)\n}\n</code></pre>\n<p>This looks for an object present with the \"fire\" attribute. If it finds one, it passes that and object1 to the first command to do all the work. Note that if there are two fires in the room, one will be selected arbitarily by Quest.</p>\n\n",
      "PostDate": "2018-07-10T09:30:49.9946604Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ac7080b9-8069-4df6-9e0e-8d0da8a3f7b2",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "^bookmarked\r\n\r\nThanks, Pixie.",
      "EditableFormat": "markdown",
      "HTML": "<p>^bookmarked</p>\n<p>Thanks, Pixie.</p>\n\n",
      "PostDate": "2018-07-10T12:06:51.3308943Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cc82db8e-15bf-4d26-b6b7-0d4d3e3b132d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would have probably gone for the simpler option, and made the fireplace a container with a script.\r\n\r\n==> put paper in fireplace\r\n\r\n_It burns to ash!_",
      "EditableFormat": "markdown",
      "HTML": "<p>I would have probably gone for the simpler option, and made the fireplace a container with a script.</p>\n<p>==&gt; put paper in fireplace</p>\n<p><em>It burns to ash!</em></p>\n\n",
      "PostDate": "2018-07-10T12:42:53.2482046Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eecad79a-9b83-4967-8972-7379810b6e61",
      "UserId": 367635,
      "Username": "lunalullaby",
      "AvatarUrl": "https://i.imgur.com/1XTNQT2b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the advice J_J! I was kinda scared no one would reply to this! When I tried that and did a quick playthrough, though, I got this error message:\r\n\r\nError running script: Error compiling expression 'Sticky Note': RootExpressionElement: Cannot convert type 'Element' to expression result of 'Boolean'\r\n\r\nWhich...I do not understand. \r\n\r\n(EDIT)\r\n\r\nOh jeeze I should have refreshed my page before posting! So many helpful comments! I'll get back to you all once I've tried them out! Thanks so much!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the advice J_J! I was kinda scared no one would reply to this! When I tried that and did a quick playthrough, though, I got this error message:</p>\n<p>Error running script: Error compiling expression 'Sticky Note': RootExpressionElement: Cannot convert type 'Element' to expression result of 'Boolean'</p>\n<p>Which...I do not understand.</p>\n<p>(EDIT)</p>\n<p>Oh jeeze I should have refreshed my page before posting! So many helpful comments! I'll get back to you all once I've tried them out! Thanks so much!</p>\n\n",
      "PostDate": "2018-07-10T18:25:24.4947357Z",
      "LastEditDate": "2018-07-10T18:28:29.1137621Z",
      "link": null
    },
    {
      "PostId": "2238a362-a513-4633-9d21-71933402c8dc",
      "UserId": 28419,
      "Username": "pascal.marchese",
      "AvatarUrl": "https://i.imgur.com/qjm4RcRb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In this summer days I am struggling with the code, trying to create a \"simplified\" combustion system.  If the result will be ok I'll share the code.\r\nThe basics seems simple (I must said \"seems\", but it wasn't).\r\nWe can divide the combustion process of wood in three steps:\r\n1) Drying\r\n2) Burning\r\n3) Coal.\r\n\r\nMy goal is to code something that can \"give the feeling\" (not to apply the rules of physics and thermodynamics that are too far from my possibilities), and to create a simplified CRAFTING system.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>In this summer days I am struggling with the code, trying to create a \"simplified\" combustion system.  If the result will be ok I'll share the code.<br>\nThe basics seems simple (I must said \"seems\", but it wasn't).<br>\nWe can divide the combustion process of wood in three steps:</p>\n<ol>\n<li>Drying</li>\n<li>Burning</li>\n<li>Coal.</li>\n</ol>\n<p>My goal is to code something that can \"give the feeling\" (not to apply the rules of physics and thermodynamics that are too far from my possibilities), and to create a simplified CRAFTING system.</p>\n\n",
      "PostDate": "2018-07-16T20:44:14.9833297Z",
      "LastEditDate": "2018-07-19T20:27:44.5689308Z",
      "link": null
    },
    {
      "PostId": "7f8fa1e8-dfb0-466d-8522-cf2040d338ad",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There was this a while back, I've tried contacting the user in the past, but to no avail, so not sure how far they came with their code. If anyone has any more info about it, maybe they can post any further developments.\r\nhttp://textadventures.co.uk/forum/samples/topic/ml6jq-varughw7yeme--iw/world-template\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>There was this a while back, I've tried contacting the user in the past, but to no avail, so not sure how far they came with their code. If anyone has any more info about it, maybe they can post any further developments.<br>\nhttp://textadventures.co.uk/forum/samples/topic/ml6jq-varughw7yeme--iw/world-template</p>\n\n",
      "PostDate": "2018-07-16T23:29:33.4108792Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9d9ca279-af0a-4fd2-85f0-07d6393083c7",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nRemove (paper)\r\nmsg (\"It burns to ash!\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>Remove (paper)\nmsg (\"It burns to ash!\")\n</code></pre>\n\n",
      "PostDate": "2018-07-17T21:28:26.7304388Z",
      "LastEditDate": "2018-07-17T21:28:54.7547513Z",
      "link": null
    }
  ]
}
