{
  "Topic": {
    "TopicId": "4378",
    "ForumId": "10",
    "Title": "How to make a function change the object that called it?",
    "LastUpdated": "2014-06-02T02:34:29+01:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "28979",
      "UserId": 0,
      "Username": "plospo",
      "UserAvatar": null,
      "UserGravatar": "e1aae0fa3545c4338dcfef5ab4f11388",
      "EditableText": "Hello!\nI'm a new user, as indicated by my amount of posts, but so far my learning curve has been pretty smooth and I'm having lots of fun.\n\nNow to the question: I'm trying to make a function that changes the object attribute of the object it's called from. For example, when you &quot;bash&quot; an object, it calls the &quot;break&quot; function which changes the attribute of the object to &quot;broken&quot;.\n\n...But when the object verb calls the function, how do I make the function know that it's supposed to change the attribute of THAT particular object? Having it change the attribute of a specific object is easy, then I just type in the name in the &quot;Set object's attribute&quot; command.\n\nThat very same command also features an &quot;expression&quot; tab, instead of &quot;name&quot;, where I figure I'll have to type something to make it change the attribute of ANY object it's called from. But what is the syntax for that!?  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? -->\n\nIf this is an easy answered question, that perhaps have already been answered in another post, then forgive a noob and please give me a link <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I've googled enough for today.\n\nThis would save me sooooo much time not having to copy-paste stuff for each individual object. Thanks in advance!",
      "EditableFormat": "bbcode",
      "HTML": "Hello!<br/>I'm a new user, as indicated by my amount of posts, but so far my learning curve has been pretty smooth and I'm having lots of fun.<br/><br/>Now to the question: I'm trying to make a function that changes the object attribute of the object it's called from. For example, when you &quot;bash&quot; an object, it calls the &quot;break&quot; function which changes the attribute of the object to &quot;broken&quot;.<br/><br/>...But when the object verb calls the function, how do I make the function know that it's supposed to change the attribute of THAT particular object? Having it change the attribute of a specific object is easy, then I just type in the name in the &quot;Set object's attribute&quot; command.<br/><br/>That very same command also features an &quot;expression&quot; tab, instead of &quot;name&quot;, where I figure I'll have to type something to make it change the attribute of ANY object it's called from. But what is the syntax for that!?  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? --><br/><br/>If this is an easy answered question, that perhaps have already been answered in another post, then forgive a noob and please give me a link <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> I've googled enough for today.<br/><br/>This would save me sooooo much time not having to copy-paste stuff for each individual object. Thanks in advance!",
      "PostDate": "2014-06-01T12:03:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28982",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "You use &quot;this&quot; to refer to the object that the verb has been called on. So to set &quot;broken&quot; you'd use &quot;this.broken&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "You use &quot;this&quot; to refer to the object that the verb has been called on. So to set &quot;broken&quot; you'd use &quot;this.broken&quot;.",
      "PostDate": "2014-06-01T14:39:28+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28985",
      "UserId": 0,
      "Username": "plospo",
      "UserAvatar": null,
      "UserGravatar": "e1aae0fa3545c4338dcfef5ab4f11388",
      "EditableText": "Woah, that was easy... heh how embarassing.\nBut thanks a lot!",
      "EditableFormat": "bbcode",
      "HTML": "Woah, that was easy... heh how embarassing.<br/>But thanks a lot!",
      "PostDate": "2014-06-01T17:42:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "28986",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "It's easy when you know it. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> No need for embarrassment.",
      "EditableFormat": "bbcode",
      "HTML": "It's easy when you know it. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> No need for embarrassment.",
      "PostDate": "2014-06-01T17:54:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "29003",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "also, you can use the 'parameters' attribute for functions too, an example:\n\n&lt;command name=&quot;show_character_information_command&quot;&gt;\n-&gt; &lt;pattern&gt;showcharinfo #object#&lt;/pattern&gt;\n-&gt; &lt;script&gt;\n-&gt;-&gt; // what you type in during game play = #object# = (object)\n-&gt;-&gt; show_character_information_function (object)\n-&gt; &lt;/script&gt;\n&lt;/command&gt;\n\n// (object) = &quot;object_x&quot;\n\n&lt;function name=&quot;show_character_information_function&quot; parameters=&quot;object_x&quot;&gt;\n-&gt; ClearScreen\n-&gt; msg (object_x.alias)\n-&gt; msg (object_x.gender_string)\n-&gt; msg (object_x.race_string)\n-&gt; msg (object_x.class_string)\n-&gt; wait {\n-&gt;-&gt; ClearScreen\n-&gt; }\n&lt;/function&gt;\n\nfor examples:\n\nplayer1.alias = &quot;HK&quot;\nplayer1.gender_string = &quot;male&quot;\nplayer1.race_string = &quot;human&quot;\nplayer1.class_string = &quot;warrior&quot;\n\nplayer2.alias = &quot;plospo&quot;\nplayer2.gender_string = &quot;male&quot; // or &quot;female&quot; ~ I don't know, lol\nplayer2.race_string = &quot;human&quot;\nplayer2.class_string = &quot;wizard&quot; // just pretend you want to be a wizard character, only for example\n\nif you type in:\n\nshowcharinfo player1\n\noutputs:\n\nHK\nmale\nhuman\nwarrior\n\nif you type in:\n\nshowcharinfo player2\n\nplospo\nmale // or female\nhuman\nwizard // or whatever class you want to be\n\n--------\n\nand you can go as deep in layers as you want:\n\nplayer1, player2\n\nfunction1 (HK,plospo)\n-&gt; function2 (me,you)\n-&gt;-&gt; function3 (self,enemy)\n\nthe object being used remains the same, regardless of what you name~label each parameter item, by POSITION:\n\nfunction (parameters' POSITIONS: 1,2,3,etc)\n\nplayer1 = HK = me = self\nplayer2 = plospo = you = enemy\n\nOR, you can use the same labels too for all the parameters:\n\nfunction1 (player1,player2)\n-&gt; function2 (player1,player2)\n-&gt;-&gt; function3 (player1,player2)\n\nor\n\nfunction1 (red,blue)\n-&gt; function2 (red,blue)\n-&gt;-&gt; function3 (red,blue)\n\nwill still use the exact same objects (player1 and player2) as:\n\nfunction1 (HK,plospo)\n-&gt; function2 (me,you)\n-&gt;-&gt; function3 (self,enemy)\n\n--------------\n\nI forgot to show exactly how parameters work though within the function itself:\n\nplayer1,player2\n\n// player1 = HK\n// player2 = plospo\n\nfunction1 (HK,plospo)\n-&gt; if (HK.speed &gt; plospo.speed) {\n-&gt;-&gt; function2 (me,you)\n-&gt;-&gt; // player1 = HK = me\n-&gt;-&gt; // player2 = plospo = you\n-&gt; } else if (HK.speed &lt; plospo.speed) {\n-&gt;-&gt; function2 (you,me)\n-&gt;-&gt; // player1 = HK = you\n-&gt;-&gt; // player2 = plospo = me \n-&gt; }\n\n---------\n\n// player1 = HK = me = self\n// player2 = plospo = you = enemy\n\nfunction2 (self,enemy)\n-&gt; enemy.hp = enemy.hp - self.damage\n-&gt; // player2.hp = player2.hp - player1.damage\n\n~OR~\n\nplayer1 = HK = you = enemy\nplayer2 = plospo = me = self\n\nfunction2 (enemy,self)\n-&gt; enemy.hp = enemy.hp - self.damage\n-&gt; // player1.hp = player1.hp - player2.damage",
      "EditableFormat": "bbcode",
      "HTML": "also, you can use the 'parameters' attribute for functions too, an example:<br/><br/>&lt;command name=&quot;show_character_information_command&quot;&gt;<br/>-&gt; &lt;pattern&gt;showcharinfo #object#&lt;/pattern&gt;<br/>-&gt; &lt;script&gt;<br/>-&gt;-&gt; // what you type in during game play = #object# = (object)<br/>-&gt;-&gt; show_character_information_function (object)<br/>-&gt; &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>// (object) = &quot;object_x&quot;<br/><br/>&lt;function name=&quot;show_character_information_function&quot; parameters=&quot;object_x&quot;&gt;<br/>-&gt; ClearScreen<br/>-&gt; msg (object_x.alias)<br/>-&gt; msg (object_x.gender_string)<br/>-&gt; msg (object_x.race_string)<br/>-&gt; msg (object_x.class_string)<br/>-&gt; wait {<br/>-&gt;-&gt; ClearScreen<br/>-&gt; }<br/>&lt;/function&gt;<br/><br/>for examples:<br/><br/>player1.alias = &quot;HK&quot;<br/>player1.gender_string = &quot;male&quot;<br/>player1.race_string = &quot;human&quot;<br/>player1.class_string = &quot;warrior&quot;<br/><br/>player2.alias = &quot;plospo&quot;<br/>player2.gender_string = &quot;male&quot; // or &quot;female&quot; ~ I don't know, lol<br/>player2.race_string = &quot;human&quot;<br/>player2.class_string = &quot;wizard&quot; // just pretend you want to be a wizard character, only for example<br/><br/>if you type in:<br/><br/>showcharinfo player1<br/><br/>outputs:<br/><br/>HK<br/>male<br/>human<br/>warrior<br/><br/>if you type in:<br/><br/>showcharinfo player2<br/><br/>plospo<br/>male // or female<br/>human<br/>wizard // or whatever class you want to be<br/><br/>--------<br/><br/>and you can go as deep in layers as you want:<br/><br/>player1, player2<br/><br/>function1 (HK,plospo)<br/>-&gt; function2 (me,you)<br/>-&gt;-&gt; function3 (self,enemy)<br/><br/>the object being used remains the same, regardless of what you name~label each parameter item, by POSITION:<br/><br/>function (parameters' POSITIONS: 1,2,3,etc)<br/><br/>player1 = HK = me = self<br/>player2 = plospo = you = enemy<br/><br/>OR, you can use the same labels too for all the parameters:<br/><br/>function1 (player1,player2)<br/>-&gt; function2 (player1,player2)<br/>-&gt;-&gt; function3 (player1,player2)<br/><br/>or<br/><br/>function1 (red,blue)<br/>-&gt; function2 (red,blue)<br/>-&gt;-&gt; function3 (red,blue)<br/><br/>will still use the exact same objects (player1 and player2) as:<br/><br/>function1 (HK,plospo)<br/>-&gt; function2 (me,you)<br/>-&gt;-&gt; function3 (self,enemy)<br/><br/>--------------<br/><br/>I forgot to show exactly how parameters work though within the function itself:<br/><br/>player1,player2<br/><br/>// player1 = HK<br/>// player2 = plospo<br/><br/>function1 (HK,plospo)<br/>-&gt; if (HK.speed &gt; plospo.speed) {<br/>-&gt;-&gt; function2 (me,you)<br/>-&gt;-&gt; // player1 = HK = me<br/>-&gt;-&gt; // player2 = plospo = you<br/>-&gt; } else if (HK.speed &lt; plospo.speed) {<br/>-&gt;-&gt; function2 (you,me)<br/>-&gt;-&gt; // player1 = HK = you<br/>-&gt;-&gt; // player2 = plospo = me <br/>-&gt; }<br/><br/>---------<br/><br/>// player1 = HK = me = self<br/>// player2 = plospo = you = enemy<br/><br/>function2 (self,enemy)<br/>-&gt; enemy.hp = enemy.hp - self.damage<br/>-&gt; // player2.hp = player2.hp - player1.damage<br/><br/>~OR~<br/><br/>player1 = HK = you = enemy<br/>player2 = plospo = me = self<br/><br/>function2 (enemy,self)<br/>-&gt; enemy.hp = enemy.hp - self.damage<br/>-&gt; // player1.hp = player1.hp - player2.damage",
      "PostDate": "2014-06-02T02:34:29+01:00",
      "LastEditDate": null
    }
  ]
}
