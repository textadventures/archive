{
  "Topic": {
    "TopicId": "4880",
    "ForumId": "10",
    "Title": "Commands Vs Object Functions",
    "LastUpdated": "2014-12-08T22:11:12+00:00",
    "ReplyCount": 19
  },
  "Posts": [
    {
      "PostId": "32660",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "I don't know if I'm alone in this, but ever since discovering the power of command patterns, I hardly do anything with an object's function tabs, choosing instead to set a series of commands.\n\nMaybe I'm missing out on lots of features and simple/correct ways of doing things with objects, but I no longer see the point in giving objects their own functionality such as 'edible', 'enterable', 'open/closable', etc, when I can control all that with command patterns that run a script. There are exceptions, such as setting something to a container, for instance (as in the case of my knapsack), so that things can be put inside, or a torch to 'switchable'.\n\nSo let's take food as an example.\n\nMy first job when creating an object is to imagine all the things a player might want to do with it. So, instead of bothering with the objects 'can be eaten' tab', I'd just set a series of commands on that object. If it were an apple, for instance, I would set a command pattern for 'throw apple; toss apple; lob apple;' and then run a script which checks the player is carrying the apple before throwing out a response to the command. I would then set a pattern for 'eat apple; consume apple...' and so on until I'd exhausted everything a player might want to logically do with it.\n\nMaybe that wasn't the best example, but my point is that so far, I've been able to control the use of objects by setting commands on the object and/or room it is likely to used in, rather than religiously giving each its own set of functionality tabs by setting its 'type'.",
      "EditableFormat": "bbcode",
      "HTML": "I don't know if I'm alone in this, but ever since discovering the power of command patterns, I hardly do anything with an object's function tabs, choosing instead to set a series of commands.<br/><br/>Maybe I'm missing out on lots of features and simple/correct ways of doing things with objects, but I no longer see the point in giving objects their own functionality such as 'edible', 'enterable', 'open/closable', etc, when I can control all that with command patterns that run a script. There are exceptions, such as setting something to a container, for instance (as in the case of my knapsack), so that things can be put inside, or a torch to 'switchable'.<br/><br/>So let's take food as an example.<br/><br/>My first job when creating an object is to imagine all the things a player might want to do with it. So, instead of bothering with the objects 'can be eaten' tab', I'd just set a series of commands on that object. If it were an apple, for instance, I would set a command pattern for 'throw apple; toss apple; lob apple;' and then run a script which checks the player is carrying the apple before throwing out a response to the command. I would then set a pattern for 'eat apple; consume apple...' and so on until I'd exhausted everything a player might want to logically do with it.<br/><br/>Maybe that wasn't the best example, but my point is that so far, I've been able to control the use of objects by setting commands on the object and/or room it is likely to used in, rather than religiously giving each its own set of functionality tabs by setting its 'type'.",
      "PostDate": "2014-12-08T05:13:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32664",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "Yeah, I'm wondering the same thing.\n\nAre verbs basically just 'easy mode' for someone who doesn't want to mess with custom commands?",
      "EditableFormat": "bbcode",
      "HTML": "Yeah, I'm wondering the same thing.<br/><br/>Are verbs basically just 'easy mode' for someone who doesn't want to mess with custom commands?",
      "PostDate": "2014-12-08T05:24:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32666",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "I'm not sure, to be honest. The thing with setting verbs is you're limited to one word. I'm sure they have their uses, but I don't fully understand what they are. However, commands allow you to set anything you damn well please, which is why I love them.\n\nIf you were prepared to put in enough work and time, you could have a logical and unique response to practically anything a player typed.",
      "EditableFormat": "bbcode",
      "HTML": "I'm not sure, to be honest. The thing with setting verbs is you're limited to one word. I'm sure they have their uses, but I don't fully understand what they are. However, commands allow you to set anything you damn well please, which is why I love them.<br/><br/>If you were prepared to put in enough work and time, you could have a logical and unique response to practically anything a player typed.",
      "PostDate": "2014-12-08T05:40:20+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32667",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "COMMANDS:\n-&gt; Commands (fully customizable COMMAND)\n-&gt; Verbs (limited customization COMMAND)\n\nVerbs are just a sub-Command, they're local, aka they only work upon~for that specific Object; their customization is limited to only acting upon that specific object, yes in essence it's a simplified (less customiz'able) Command.\n\nObject: knapsack\nVerb: take (it applies 'take' specifically~only for the 'knapsack' Object)\n\nObject: sword\nVerb: take (it applies 'take' specifically~only for the 'sword' Object)\n\nCommands are fully customizable; they're global, they can act upon any object:\n\npattern: take #object#\nScript&#058; MoveObject (object, player)\nScript&#058; msg (&quot;You take the &quot; + object.name + &quot;.&quot;)\n\n------------\n\nall built-in scripting (take, takeall, take xxx, drop, dropall, drop xxx, etc etc etc) are Commands, though as you've realized, they're very broad~generalized, whereas in making your own Commands, you can make them more specifically (though this is a bit of 're-inventing the wheel', as this is the purpose of Verbs. In a way, OurJud, you're basically creating your own Verbs, but via as Commands. Though, if you want to use the user's inputs, then you need to use Commands, as Verbs use the buttons and hyperlinks, so you're doing it perfectly OurJud for your game making  design of using inputs only, hehe).",
      "EditableFormat": "bbcode",
      "HTML": "COMMANDS:<br/>-&gt; Commands (fully customizable COMMAND)<br/>-&gt; Verbs (limited customization COMMAND)<br/><br/>Verbs are just a sub-Command, they're local, aka they only work upon~for that specific Object; their customization is limited to only acting upon that specific object, yes in essence it's a simplified (less customiz'able) Command.<br/><br/>Object: knapsack<br/>Verb: take (it applies 'take' specifically~only for the 'knapsack' Object)<br/><br/>Object: sword<br/>Verb: take (it applies 'take' specifically~only for the 'sword' Object)<br/><br/>Commands are fully customizable; they're global, they can act upon any object:<br/><br/>pattern: take #object#<br/>Script&#058; MoveObject (object, player)<br/>Script&#058; msg (&quot;You take the &quot; + object.name + &quot;.&quot;)<br/><br/>------------<br/><br/>all built-in scripting (take, takeall, take xxx, drop, dropall, drop xxx, etc etc etc) are Commands, though as you've realized, they're very broad~generalized, whereas in making your own Commands, you can make them more specifically (though this is a bit of 're-inventing the wheel', as this is the purpose of Verbs. In a way, OurJud, you're basically creating your own Verbs, but via as Commands. Though, if you want to use the user's inputs, then you need to use Commands, as Verbs use the buttons and hyperlinks, so you're doing it perfectly OurJud for your game making  design of using inputs only, hehe).",
      "PostDate": "2014-12-08T05:41:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32668",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "[quote=&quot;HegemonKhan&quot;:8brvvpn4]... so you're doing it perfectly OurJud for your game making  design of using inputs only, hehe).[/quote:8brvvpn4]\nCool! Thanks  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>HegemonKhan wrote:</cite>... so you're doing it perfectly OurJud for your game making  design of using inputs only, hehe).</blockquote><br/>Cool! Thanks  <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-12-08T05:44:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32670",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "[quote=&quot;OurJud&quot;:rj0l6659]The thing with setting verbs is you're limited to one word. [/quote:rj0l6659]\n\nThis is the deal-breaker for me. If there was just a way to set aliases I'd probably use them a lot more.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>OurJud wrote:</cite>The thing with setting verbs is you're limited to one word. </blockquote><br/><br/>This is the deal-breaker for me. If there was just a way to set aliases I'd probably use them a lot more.",
      "PostDate": "2014-12-08T05:53:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32671",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "The purpose of Verbs, is that you can add specific scripts for that Object (simple scripting), whereas with Commands (to do the same), you'll need much more complex scripting (lots of 'checking' IF scripts) to handle all the different things that the user can input and 'iterating' through all of the different types of Objects, and what to do for each of them. Verbs, just make this easier~simplier for people, if they're not good at coding.\n\nVerbs are for specific Objects:\n\nObject: sword\nVerb: take\nScript&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)\nScript&#058; MoveObject (sword, player)\n\nObject: cuirass\nVerb: take\n// obviously, we don't want the 'sword' Object's response~msg Script to be used, as it is just for the sword, we don't want it to be global, as it is specific~local (for the sword ONLY), hence the purpose of Verbs\nScript&#058; msg (&quot;You put on the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)\nScript&#058; MoveObject (cuirass, player)\n\nVS\n\nCommands are for global~generalized~broad usages:\n\nCommand: take_command\nPattern: take #object#\nScript&#058; msg (&quot;You equip the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)\nScript&#058; MoveObject (object, player)\n\nCommands also can be scripted for specific Object usages too:\n\n~ OurJud's specific usage (simplified coding):\n\nCommand: take_sword\nPattern: take sword\nScript&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)\nScript&#058; MoveObject (sword, player)\n\nCommand: take_cuirass\nPattern: take cuirass\nScript&#058; msg (&quot;You put on the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)\nScript&#058; MoveObject (cuirass, player)\n\nComplex Logic Coding (specific usage):\n\nCommand: take_command\nPattern: take #object#\nScript&#058; if (object.name = &quot;sword&quot;) {\n-&gt; Script&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)\nScript&#058; if (object.name = &quot;cuirass&quot;) {\n-&gt; Script&#058; msg (&quot;You take the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)\nScript&#058; } else {\n-&gt; Script&#058; msg (&quot;You take the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)\nScript&#058; }\nScript&#058; MoveObject (object, player)\n\nor, even more complex logic coding:\n\n(not the best code, but it should get the idea across)\n\nCommand: take_command\nPattern: take #object#\nScript&#058; if (object.equipment_type = &quot;sword&quot;) {\n-&gt; Script&#058; if (object.name = &quot;fire_sword&quot;) {\n-&gt;-&gt; Script&#058; msg (&quot;You take the fire sword in your hand, vowing revenge upon the death of your family.&quot;)\n-&gt; Script&#058; } else if (object.name = &quot;water_sword&quot;) {\n-&gt;-&gt; Script&#058; msg (&quot;You take the water sword in your hand, vowing revenge upon the death of your family.&quot;)\n-&gt; Script&#058; }\nScript&#058; } else if (object.equipment_type = &quot;mail&quot;) {\n-&gt; Script&#058; if (object.name = &quot;dragon_mail&quot;) {\n-&gt;-&gt; Script&#058; msg (&quot;You take the dragon mail, to protect you as you seek vengence upon the murderers of your family.&quot;)\n-&gt; Script&#058; } ekse if (object.name = &quot;mithril_mail&quot;) {\n-&gt;-&gt; Script&#058; msg (&quot;You take the mithril mail, to protect you as you seek vengence upon the murderers of your family.&quot;)\n-&gt; Script&#058; }\nScript&#058; } else {\n-&gt; Script&#058; msg (&quot;You take the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)\nScript&#058; }\nScript&#058; MoveObject (object, player)",
      "EditableFormat": "bbcode",
      "HTML": "The purpose of Verbs, is that you can add specific scripts for that Object (simple scripting), whereas with Commands (to do the same), you'll need much more complex scripting (lots of 'checking' IF scripts) to handle all the different things that the user can input and 'iterating' through all of the different types of Objects, and what to do for each of them. Verbs, just make this easier~simplier for people, if they're not good at coding.<br/><br/>Verbs are for specific Objects:<br/><br/>Object: sword<br/>Verb: take<br/>Script&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)<br/>Script&#058; MoveObject (sword, player)<br/><br/>Object: cuirass<br/>Verb: take<br/>// obviously, we don't want the 'sword' Object's response~msg Script to be used, as it is just for the sword, we don't want it to be global, as it is specific~local (for the sword ONLY), hence the purpose of Verbs<br/>Script&#058; msg (&quot;You put on the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)<br/>Script&#058; MoveObject (cuirass, player)<br/><br/>VS<br/><br/>Commands are for global~generalized~broad usages:<br/><br/>Command: take_command<br/>Pattern: take #object#<br/>Script&#058; msg (&quot;You equip the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)<br/>Script&#058; MoveObject (object, player)<br/><br/>Commands also can be scripted for specific Object usages too:<br/><br/>~ OurJud's specific usage (simplified coding):<br/><br/>Command: take_sword<br/>Pattern: take sword<br/>Script&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)<br/>Script&#058; MoveObject (sword, player)<br/><br/>Command: take_cuirass<br/>Pattern: take cuirass<br/>Script&#058; msg (&quot;You put on the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)<br/>Script&#058; MoveObject (cuirass, player)<br/><br/>Complex Logic Coding (specific usage):<br/><br/>Command: take_command<br/>Pattern: take #object#<br/>Script&#058; if (object.name = &quot;sword&quot;) {<br/>-&gt; Script&#058; msg (&quot;You take the sword in your hand, vowing revenge upon the death of your family.&quot;)<br/>Script&#058; if (object.name = &quot;cuirass&quot;) {<br/>-&gt; Script&#058; msg (&quot;You take the cuirass, to protect you as you seek vengence upon the murderers of your family.&quot;)<br/>Script&#058; } else {<br/>-&gt; Script&#058; msg (&quot;You take the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)<br/>Script&#058; }<br/>Script&#058; MoveObject (object, player)<br/><br/>or, even more complex logic coding:<br/><br/>(not the best code, but it should get the idea across)<br/><br/>Command: take_command<br/>Pattern: take #object#<br/>Script&#058; if (object.equipment_type = &quot;sword&quot;) {<br/>-&gt; Script&#058; if (object.name = &quot;fire_sword&quot;) {<br/>-&gt;-&gt; Script&#058; msg (&quot;You take the fire sword in your hand, vowing revenge upon the death of your family.&quot;)<br/>-&gt; Script&#058; } else if (object.name = &quot;water_sword&quot;) {<br/>-&gt;-&gt; Script&#058; msg (&quot;You take the water sword in your hand, vowing revenge upon the death of your family.&quot;)<br/>-&gt; Script&#058; }<br/>Script&#058; } else if (object.equipment_type = &quot;mail&quot;) {<br/>-&gt; Script&#058; if (object.name = &quot;dragon_mail&quot;) {<br/>-&gt;-&gt; Script&#058; msg (&quot;You take the dragon mail, to protect you as you seek vengence upon the murderers of your family.&quot;)<br/>-&gt; Script&#058; } ekse if (object.name = &quot;mithril_mail&quot;) {<br/>-&gt;-&gt; Script&#058; msg (&quot;You take the mithril mail, to protect you as you seek vengence upon the murderers of your family.&quot;)<br/>-&gt; Script&#058; }<br/>Script&#058; } else {<br/>-&gt; Script&#058; msg (&quot;You take the &quot; + object.name + &quot;, vowing revenge upon the murderers of your family.&quot;)<br/>Script&#058; }<br/>Script&#058; MoveObject (object, player)",
      "PostDate": "2014-12-08T05:57:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32672",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "[quote=&quot;Marzipan&quot;:16o3uqy5][quote=&quot;OurJud&quot;:16o3uqy5]The thing with setting verbs is you're limited to one word. [/quote:16o3uqy5]\nIf there was just a way to set aliases I'd probably use them a lot more.[/quote:16o3uqy5]\nThere is. Every object and room has a 'name' field and an 'alias' field.\n\nWhich is something I've been meaning to ask, which of these does the game recognise in commands?\n\nIf I created a gun as an object, gave it the name 'gun' and the alias 'pistol', does this simply mean the game would understand both 'get gun' and 'get pistol' ? Or does the alias have another function?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Marzipan wrote:</cite><blockquote><p><b>&quot;OurJud&quot;</b></p><p>The thing with setting verbs is you're limited to one word. </blockquote><br/>If there was just a way to set aliases I'd probably use them a lot more.</p></blockquote><br/>There is. Every object and room has a 'name' field and an 'alias' field.<br/><br/>Which is something I've been meaning to ask, which of these does the game recognise in commands?<br/><br/>If I created a gun as an object, gave it the name 'gun' and the alias 'pistol', does this simply mean the game would understand both 'get gun' and 'get pistol' ? Or does the alias have another function?",
      "PostDate": "2014-12-08T05:57:58+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32674",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.\n\nAs far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.",
      "EditableFormat": "bbcode",
      "HTML": "No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.<br/><br/>As far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.",
      "PostDate": "2014-12-08T06:32:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32676",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "[quote=&quot;Marzipan&quot;:2343g2ek]No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.\n\nAs far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.[/quote:2343g2ek]\nOh, is that what they're for? I disabled the option to display the room name in descriptions, right from the word go.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Marzipan wrote:</cite>No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.<br/><br/>As far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.</blockquote><br/>Oh, is that what they're for? I disabled the option to display the room name in descriptions, right from the word go.",
      "PostDate": "2014-12-08T06:39:08+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32679",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "it also depends upon what you have (Aliases or no Aliases) in your game, as this is what the person playing the game, sees in the game: 'NAME' vs 'ALIAS'\n\n#object# only searches for what is in your inventory, however\n\n[code:241l57bv]// Object ('Name' String Attribute)&#58; player\n// Object 'Alias' String Attribute&#58; HK\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + text&#46;name + &quot;&#46;&quot;)\n    // outputs&#58; hi, player&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #object#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + object&#46;alias + &quot;&#46;&quot;)\n    // outputs&#58; hi, player&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + text&#46;alias + &quot;&#46;&quot;)\n    // outputs&#58; hi, HK&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #object#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + object&#46;name + &quot;&#46;&quot;)\n    // outputs&#58; hi, HK&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n// -----------------------\n\n// Object ('Name' String Attribute)&#58; player\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + text&#46;name + &quot;&#46;&quot;)\n    // outputs&#58; hi, player&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #object#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + object&#46;alias + &quot;&#46;&quot;)\n    // outputs&#58; ERROR!\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + text&#46;alias + &quot;&#46;&quot;)\n    // outputs&#58; ERROR!\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #object#&lt;/pattern&gt;\n  &lt;script&gt;\n    msg (&quot;hi, &quot; + object&#46;name + &quot;&#46;&quot;)\n    // outputs&#58; hi, HK&#46;\n  &lt;/script&gt;\n&lt;/command&gt;\n\n// -------------------\n\n// Object ('Name' String Attribute)&#58; player\n// Object 'Alias' String Attribute&#58; HK\n\n// but the person playing the game, doesn't know that the Object's 'name' is 'player', they're only able to thus type in&#58; 'HK'\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    // user types in&#58; HK\n    object_x = GetObject (text)\n    msg (&quot;hi, &quot; + object_x&#46;name + &quot;&#46;&quot;)\n    // outputs&#58; ERROR, as there is no Object (NAMED) 'HK'\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=&quot;hi_command&quot;&gt;\n  &lt;pattern&gt;hi #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    // user types in&#58; HK\n    object_x = GetObject (text)\n    if (object_x = null) {\n      foreach (object_xx, AllObjects () ) {\n        if (object_xx&#46;alias = text) {\n          object_x = object_xx\n        }\n      }\n    }\n    if (not object_x = null) {\n      msg (&quot;hi, &quot; + object_x&#46;name + &quot;&#46;&quot;)\n      // outputs&#58; hi, player&#46;\n    }\n  &lt;/script&gt;\n&lt;/command&gt;[/code:241l57bv]",
      "EditableFormat": "bbcode",
      "HTML": "it also depends upon what you have (Aliases or no Aliases) in your game, as this is what the person playing the game, sees in the game: 'NAME' vs 'ALIAS'<br/><br/>#object# only searches for what is in your inventory, however<br/><br/><pre><code>// Object ('Name' String Attribute)&#58; player<br/>// Object 'Alias' String Attribute&#58; HK<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + text&#46;name + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, player&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #object#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + object&#46;alias + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, player&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + text&#46;alias + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, HK&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #object#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + object&#46;name + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, HK&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>// -----------------------<br/><br/>// Object ('Name' String Attribute)&#58; player<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + text&#46;name + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, player&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #object#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + object&#46;alias + &quot;&#46;&quot;)<br/>    // outputs&#58; ERROR!<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + text&#46;alias + &quot;&#46;&quot;)<br/>    // outputs&#58; ERROR!<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #object#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    msg (&quot;hi, &quot; + object&#46;name + &quot;&#46;&quot;)<br/>    // outputs&#58; hi, HK&#46;<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>// -------------------<br/><br/>// Object ('Name' String Attribute)&#58; player<br/>// Object 'Alias' String Attribute&#58; HK<br/><br/>// but the person playing the game, doesn't know that the Object's 'name' is 'player', they're only able to thus type in&#58; 'HK'<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    // user types in&#58; HK<br/>    object_x = GetObject (text)<br/>    msg (&quot;hi, &quot; + object_x&#46;name + &quot;&#46;&quot;)<br/>    // outputs&#58; ERROR, as there is no Object (NAMED) 'HK'<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>&lt;command name=&quot;hi_command&quot;&gt;<br/>  &lt;pattern&gt;hi #text#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    // user types in&#58; HK<br/>    object_x = GetObject (text)<br/>    if (object_x = null) {<br/>      foreach (object_xx, AllObjects () ) {<br/>        if (object_xx&#46;alias = text) {<br/>          object_x = object_xx<br/>        }<br/>      }<br/>    }<br/>    if (not object_x = null) {<br/>      msg (&quot;hi, &quot; + object_x&#46;name + &quot;&#46;&quot;)<br/>      // outputs&#58; hi, player&#46;<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;</code></pre>",
      "PostDate": "2014-12-08T06:52:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32680",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "The same thing applies to normal 'object' objects too though, not just rooms. If you've got an object name that uses an apostrophe, or the words 'or, in, and'...'firefly in a jar' for example, the program can't handle that so you'd have to name it something else and then use the alias to make it display right.\n\nI'm sure it has plenty of other uses too. Have the actual name be something short and easy to refer to in the code, or have an object1, object2, object3 that can all be switched around while looking the same to the player, etc.",
      "EditableFormat": "bbcode",
      "HTML": "The same thing applies to normal 'object' objects too though, not just rooms. If you've got an object name that uses an apostrophe, or the words 'or, in, and'...'firefly in a jar' for example, the program can't handle that so you'd have to name it something else and then use the alias to make it display right.<br/><br/>I'm sure it has plenty of other uses too. Have the actual name be something short and easy to refer to in the code, or have an object1, object2, object3 that can all be switched around while looking the same to the player, etc.",
      "PostDate": "2014-12-08T06:57:22+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32682",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "use the 'NAME' for your own game making~design organization (and if~when able to do advanced parsing scripting lol), for example:\n\nObject Name: orc_mlvl_99\nObject Alias: orc king\n\nObject Name: orc_mlvl_01\nObject Alias: orc baby\n\nObject Name: orc_mlvl_50\nObject Alias: orc berserker\n\nor\n\nObject Name: monster_01\nObject Alias: orc\n\nObject Name: monster_02\nObject Alias: ogre\n\nObject Name: monster_03\nObject Alias: troll\n\nObject Name: npc_01\nObject Alias: wise owl\n\nObject Name: npc_02\nObject Alias: ged the wizard\n\nObject Name: npc_03\nObject Alias: john the merchant\n\nObject Name: pc_01\nObject Name: HK\n\nObject Name: pc_02\nObject Name: OJ\n\nObject Name: pc_03\nObject Name: Marz\n\nor to be even more secretive towards the player of your game:\n\nObject Name: orc_mlvl_99\nObject Alias: orc\n\nObject Name: orc_mlvl_01\nObject Alias: orc\n\nObject Name: orc_mlvl_50\nObject Alias: orc\n\nas you don't want them to know if they're facing a powerful monster or a weak monster ahead of time.",
      "EditableFormat": "bbcode",
      "HTML": "use the 'NAME' for your own game making~design organization (and if~when able to do advanced parsing scripting lol), for example:<br/><br/>Object Name: orc_mlvl_99<br/>Object Alias: orc king<br/><br/>Object Name: orc_mlvl_01<br/>Object Alias: orc baby<br/><br/>Object Name: orc_mlvl_50<br/>Object Alias: orc berserker<br/><br/>or<br/><br/>Object Name: monster_01<br/>Object Alias: orc<br/><br/>Object Name: monster_02<br/>Object Alias: ogre<br/><br/>Object Name: monster_03<br/>Object Alias: troll<br/><br/>Object Name: npc_01<br/>Object Alias: wise owl<br/><br/>Object Name: npc_02<br/>Object Alias: ged the wizard<br/><br/>Object Name: npc_03<br/>Object Alias: john the merchant<br/><br/>Object Name: pc_01<br/>Object Name: HK<br/><br/>Object Name: pc_02<br/>Object Name: OJ<br/><br/>Object Name: pc_03<br/>Object Name: Marz<br/><br/>or to be even more secretive towards the player of your game:<br/><br/>Object Name: orc_mlvl_99<br/>Object Alias: orc<br/><br/>Object Name: orc_mlvl_01<br/>Object Alias: orc<br/><br/>Object Name: orc_mlvl_50<br/>Object Alias: orc<br/><br/>as you don't want them to know if they're facing a powerful monster or a weak monster ahead of time.",
      "PostDate": "2014-12-08T07:12:02+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32689",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "[quote=&quot;Marzipan&quot;:2ybywvxh]No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.\n\nAs far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.[/quote:2ybywvxh]\n\nthere's one 'not quite' method for doing this:\n\nuse the Object as a more general category, for your 'sub' Verbs:\n\n(just a quick and poor example, lol)\n\nObject: character\nVerb: stats\nVerb: equipment\nVerb: magic\nVerb: items\n\nObject: action\nVerb: fight\nVerb: magic\nVerb: steal\nVerb: sneak\nVerb: talk\nVerb: sleep\nVerb: rest\n\nObject: travel\nVerb: homeland\nVerb: grassland\nVerb: dungeon\nVerb: castle\nVerb: town",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Marzipan wrote:</cite>No, I meant aliases for the verbs. Say I've got a pinata object, with a command I can let the player break, smash, or hit it, but with verbs I'm limited to just one.<br/><br/>As far as object aliases, the most use I've gotten out of them is when Quest won't let me name a room properly, I can still have it show up to the player the way I want with an alias.</blockquote><br/><br/>there's one 'not quite' method for doing this:<br/><br/>use the Object as a more general category, for your 'sub' Verbs:<br/><br/>(just a quick and poor example, lol)<br/><br/>Object: character<br/>Verb: stats<br/>Verb: equipment<br/>Verb: magic<br/>Verb: items<br/><br/>Object: action<br/>Verb: fight<br/>Verb: magic<br/>Verb: steal<br/>Verb: sneak<br/>Verb: talk<br/>Verb: sleep<br/>Verb: rest<br/><br/>Object: travel<br/>Verb: homeland<br/>Verb: grassland<br/>Verb: dungeon<br/>Verb: castle<br/>Verb: town",
      "PostDate": "2014-12-08T08:02:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32691",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "If you have an alias for an object, the player will have to type that in; it will not recognise the name. If there is no alias, it will recognise the name. If you have several words you want Quest to recognise, add them to the list of &quot;Other names&quot; on the Object tab.\n\nVerbs do not have a list like that, but you can still have multiple words, you just separate them with a semi-colon in the first text box (i.e., the unlabelled one above attribute).\n\nThe advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.",
      "EditableFormat": "bbcode",
      "HTML": "If you have an alias for an object, the player will have to type that in; it will not recognise the name. If there is no alias, it will recognise the name. If you have several words you want Quest to recognise, add them to the list of &quot;Other names&quot; on the Object tab.<br/><br/>Verbs do not have a list like that, but you can still have multiple words, you just separate them with a semi-colon in the first text box (i.e., the unlabelled one above attribute).<br/><br/>The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.",
      "PostDate": "2014-12-08T08:13:10+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32702",
      "UserId": 0,
      "Username": "OurJud",
      "UserAvatar": "7473_1417206896.jpg",
      "UserGravatar": "7892e1059c02a91b34ffd60deb7402ff",
      "EditableText": "[quote=&quot;The Pixie&quot;:jgkz9g5x]The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.[/quote:jgkz9g5x]\nI'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?\n\nLet's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>The Pixie wrote:</cite>The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.</blockquote><br/>I'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?<br/><br/>Let's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?",
      "PostDate": "2014-12-08T14:59:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32703",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "[quote=&quot;The Pixie&quot;:3fxlmbkw]Verbs do not have a list like that, but you can still have multiple words, you just separate them with a semi-colon in the first text box (i.e., the unlabelled one above attribute).[/quote:3fxlmbkw]\n\nSee, I was sure I tried that before and just got a bunch of weird errors, but now I've got it working. Though it still feels slightly clunky that you go to the object to create the verb, then go to the 'Verb' list on the left to add the aliases, and then go back to the object to print the message. Seems like that's something that would be simpler if it was all done in one place.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>The Pixie wrote:</cite>Verbs do not have a list like that, but you can still have multiple words, you just separate them with a semi-colon in the first text box (i.e., the unlabelled one above attribute).</blockquote><br/><br/>See, I was sure I tried that before and just got a bunch of weird errors, but now I've got it working. Though it still feels slightly clunky that you go to the object to create the verb, then go to the 'Verb' list on the left to add the aliases, and then go back to the object to print the message. Seems like that's something that would be simpler if it was all done in one place.",
      "PostDate": "2014-12-08T15:00:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32704",
      "UserId": 0,
      "Username": "Marzipan",
      "UserAvatar": null,
      "UserGravatar": "96db8d4d178365a7065b1872e874bc83",
      "EditableText": "[quote:3m8mcwf6]Let's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?[/quote:3m8mcwf6]\n\nThe benefit I can see is that you don't have to worry about having a script check if the player is holding the object first. And if you have several smashable items in the game, you can just quickly attach the same verb to each one. \n\nI'll probably still just stick with commands for the most part, though.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Let's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?</p></blockquote><br/><br/>The benefit I can see is that you don't have to worry about having a script check if the player is holding the object first. And if you have several smashable items in the game, you can just quickly attach the same verb to each one. <br/><br/>I'll probably still just stick with commands for the most part, though.",
      "PostDate": "2014-12-08T15:05:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32709",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "[quote=&quot;OurJud&quot;:2wgpiela][quote=&quot;The Pixie&quot;:2wgpiela]The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.[/quote:2wgpiela]\nI'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?\n\nLet's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?[/quote:2wgpiela]\n\nbecause you wouldn't create~add a 'smash' Verb to that Object, unless that Object is an Object that you want to be 'smashable' (which, in this case), it would have the 'smash' Verb added to it, making it be 'smashable'.\n\nObject: vase\nVerb: smash\n\nObject: the_concept~idea_of_love (or whatever can't be logically 'physically smashed', as my mind is failing me, lol)\nVerb: (whatever Verb, except for a 'smash' Verb)\n\n---------------------\n\nvery easy: you select the Verbs for each Object:\n\nObject: monster\nVerb: fight\n\nObject: townsperson\nVerb: talk\n\nObject: merchant\nVerb: buy\nVerb: sell\n\nas it would be il-logical to do the reverse:\n\nObject: monster\nVerb: talk\n\nObject: townsperson\nVerb: fight\n\nObject: monster\nVerb: talk\nVerb: fight\n\nObject: townsperson\nVerb: fight\nVerb: talk\n\nor the il-logical:\n\nObject: chest\nVerb: goto // HUH?!\n\nObject: forest (room)\nVerb: open // HUH?!\n\nObject: forest (room)\nVerb: buy // HUH?!\nVerb: sell // HUH?!\n\nand it's this simple, just add the Verbs that you want that Object you have, to distinguish the Objects from one another.\n\nVS\n\na Command:\n\n(err, I didn't really use different Verb examples ~ oops I messed up, but you get the idea hopefully)\n\n[code:2wgpiela]&lt;game name=&quot;xxx&quot;&gt;\n&lt;/game&gt;\n\n&lt;object name=&quot;room&quot;&gt;\n  &lt;object name=&quot;player&quot;&gt;\n    &lt;object name=&quot;potion_storage_object&quot;&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;sword_storage_object&quot;&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;axe_storage_object&quot;&gt;\n    &lt;/object&gt;\n    &lt;object name=&quot;food_storage_object&quot;&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;command name=&quot;godtake_command&quot;&gt;\n  &lt;pattern&gt;godtake&lt;/pattern&gt;\n  &lt;script&gt;\n    foreach (object_x, AllObjects ()) {\n      if (not object_x&#46;parent = player) {\n        if (object_x&#46;type_string = &quot;potion&quot;) {\n          object_x&#46;parent = potion_storage_object\n        } else if (object_x&#46;type_string = &quot;sword&quot;) {\n          object_x&#46;parent = sword_storage_object\n        } else if (object_x&#46;type_string = &quot;axe&quot;) {\n          object_x&#46;parent = axe_storage_object\n        } else if (object_x&#46;type_string = &quot;food&quot;) {\n          object_x&#46;parent = food_storage_object\n        }\n        // you get the idea&#46;&#46;&#46;\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;[/code:2wgpiela]\n\nhere, using Verb examples, as I should've done already:\n\n[code:2wgpiela]&lt;game name=&quot;xxx&quot;&gt;\n&lt;/game&gt;\n\n&lt;object name=&quot;room&quot;&gt;\n  &lt;object name=&quot;player&quot;&gt;\n  &lt;/object&gt;\n&lt;/object&gt;\n\n&lt;command name=&quot;godverb_command&quot;&gt;\n  &lt;pattern&gt;godverb&lt;/pattern&gt;\n  &lt;script&gt;\n    foreach (object_x, AllObjects ()) {\n      if (object_x&#46;type_string = &quot;potion&quot;) {\n        invoke (object_x&#46;drink)\n      } else if (object_x&#46;type_string = &quot;sword&quot;) {\n        invoke (object_x&#46;equip)\n      } else if (object_x&#46;type_string = &quot;axe&quot;) {\n        invoke (object_x&#46;unequip)\n      } else if (object_x&#46;type_string = &quot;food&quot;) {\n        invoke (object_x&#46;eat)\n      }\n      // you get the idea&#46;&#46;&#46;\n    }\n  &lt;/script&gt;\n&lt;/command&gt;[/code:2wgpiela]",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>OurJud wrote:</cite><blockquote><p><b>&quot;The Pixie&quot;</b></p><p>The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.</blockquote><br/>I'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?<br/><br/>Let's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?</p></blockquote><br/><br/>because you wouldn't create~add a 'smash' Verb to that Object, unless that Object is an Object that you want to be 'smashable' (which, in this case), it would have the 'smash' Verb added to it, making it be 'smashable'.<br/><br/>Object: vase<br/>Verb: smash<br/><br/>Object: the_concept~idea_of_love (or whatever can't be logically 'physically smashed', as my mind is failing me, lol)<br/>Verb: (whatever Verb, except for a 'smash' Verb)<br/><br/>---------------------<br/><br/>very easy: you select the Verbs for each Object:<br/><br/>Object: monster<br/>Verb: fight<br/><br/>Object: townsperson<br/>Verb: talk<br/><br/>Object: merchant<br/>Verb: buy<br/>Verb: sell<br/><br/>as it would be il-logical to do the reverse:<br/><br/>Object: monster<br/>Verb: talk<br/><br/>Object: townsperson<br/>Verb: fight<br/><br/>Object: monster<br/>Verb: talk<br/>Verb: fight<br/><br/>Object: townsperson<br/>Verb: fight<br/>Verb: talk<br/><br/>or the il-logical:<br/><br/>Object: chest<br/>Verb: goto // HUH?!<br/><br/>Object: forest (room)<br/>Verb: open // HUH?!<br/><br/>Object: forest (room)<br/>Verb: buy // HUH?!<br/>Verb: sell // HUH?!<br/><br/>and it's this simple, just add the Verbs that you want that Object you have, to distinguish the Objects from one another.<br/><br/>VS<br/><br/>a Command:<br/><br/>(err, I didn't really use different Verb examples ~ oops I messed up, but you get the idea hopefully)<br/><br/><pre><code>&lt;game name=&quot;xxx&quot;&gt;<br/>&lt;/game&gt;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;object name=&quot;player&quot;&gt;<br/>    &lt;object name=&quot;potion_storage_object&quot;&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;sword_storage_object&quot;&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;axe_storage_object&quot;&gt;<br/>    &lt;/object&gt;<br/>    &lt;object name=&quot;food_storage_object&quot;&gt;<br/>    &lt;/object&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;<br/><br/>&lt;command name=&quot;godtake_command&quot;&gt;<br/>  &lt;pattern&gt;godtake&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    foreach (object_x, AllObjects ()) {<br/>      if (not object_x&#46;parent = player) {<br/>        if (object_x&#46;type_string = &quot;potion&quot;) {<br/>          object_x&#46;parent = potion_storage_object<br/>        } else if (object_x&#46;type_string = &quot;sword&quot;) {<br/>          object_x&#46;parent = sword_storage_object<br/>        } else if (object_x&#46;type_string = &quot;axe&quot;) {<br/>          object_x&#46;parent = axe_storage_object<br/>        } else if (object_x&#46;type_string = &quot;food&quot;) {<br/>          object_x&#46;parent = food_storage_object<br/>        }<br/>        // you get the idea&#46;&#46;&#46;<br/>      }<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;</code></pre><br/><br/>here, using Verb examples, as I should've done already:<br/><br/><pre><code>&lt;game name=&quot;xxx&quot;&gt;<br/>&lt;/game&gt;<br/><br/>&lt;object name=&quot;room&quot;&gt;<br/>  &lt;object name=&quot;player&quot;&gt;<br/>  &lt;/object&gt;<br/>&lt;/object&gt;<br/><br/>&lt;command name=&quot;godverb_command&quot;&gt;<br/>  &lt;pattern&gt;godverb&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    foreach (object_x, AllObjects ()) {<br/>      if (object_x&#46;type_string = &quot;potion&quot;) {<br/>        invoke (object_x&#46;drink)<br/>      } else if (object_x&#46;type_string = &quot;sword&quot;) {<br/>        invoke (object_x&#46;equip)<br/>      } else if (object_x&#46;type_string = &quot;axe&quot;) {<br/>        invoke (object_x&#46;unequip)<br/>      } else if (object_x&#46;type_string = &quot;food&quot;) {<br/>        invoke (object_x&#46;eat)<br/>      }<br/>      // you get the idea&#46;&#46;&#46;<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;</code></pre>",
      "PostDate": "2014-12-08T21:40:47+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32711",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote=&quot;OurJud&quot;:1oidiu0h][quote=&quot;The Pixie&quot;:1oidiu0h]The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.[/quote:1oidiu0h]\nI'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?\n\nLet's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?[/quote:1oidiu0h]\nI was think about &quot;smash #object#;break #object#;throw #object&quot;, where you would have to check the object could be smashed.\n\nHowever, the verb system does allow more flexible matching than you have there. You could set vessel and pot to be synonyms of the vase, then Quest would match:\nSMASH VASE\nBREAK THE POT\nTHROW      VESSEL\n\nIf you have lots of verbs for the vase, you only need to set the synonyms once. If you have lots of objects that can be smashed you only have to set the synonyms of smash once. This will really come into its own after beta-testing, and some says they tried DESTROY AMPHORA, and it did not work. If you used verbs, you just add &quot;destroy&quot; to the verb, and &quot;amphora&quot; to the object. Two changes and all done. If you were doing commands, you have a lot more work.\n\nHowever, as I said, it is not a big deal either way.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>OurJud wrote:</cite><blockquote><p><b>&quot;The Pixie&quot;</b></p><p>The advantage of verbs is that you do not have to worry about whether the action is applicable to the object. For example, you can set a SMASH verb for an item, and in the script you know what the item is. If you use a command, you first have to check if the item is smashable. It is not a big deal really. Where verbs become really good is when you make up your own types, but you might want to wait a while before looking at that.</blockquote><br/>I'm struggling to get my head around that one. Why does using a verb mean you don't have to check if the item is smashable?<br/><br/>Let's say I have a vase, and on that vase I set a command pattern of 'smash vase; break vase; throw vase' which runs a script describing the action of smashing it, how are you saying it would be done better with a verb?</p></blockquote><br/>I was think about &quot;smash #object#;break #object#;throw #object&quot;, where you would have to check the object could be smashed.<br/><br/>However, the verb system does allow more flexible matching than you have there. You could set vessel and pot to be synonyms of the vase, then Quest would match:<br/>SMASH VASE<br/>BREAK THE POT<br/>THROW      VESSEL<br/><br/>If you have lots of verbs for the vase, you only need to set the synonyms once. If you have lots of objects that can be smashed you only have to set the synonyms of smash once. This will really come into its own after beta-testing, and some says they tried DESTROY AMPHORA, and it did not work. If you used verbs, you just add &quot;destroy&quot; to the verb, and &quot;amphora&quot; to the object. Two changes and all done. If you were doing commands, you have a lot more work.<br/><br/>However, as I said, it is not a big deal either way.",
      "PostDate": "2014-12-08T22:11:12+00:00",
      "LastEditDate": null
    }
  ]
}
