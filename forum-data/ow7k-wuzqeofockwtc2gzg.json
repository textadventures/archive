{
  "Topic": {
    "TopicId": "ow7k-wuzqeofockwtc2gzg",
    "ForumId": "10",
    "Title": "Is there any way to log player choices?",
    "LastUpdated": "2020-07-05T14:45:20.023451Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ed6689ab-182b-4643-8c52-4c0399b58d41",
      "UserId": 462147,
      "Username": "hungryplayer",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b405ba4ed3b848b0459a54d7fc98d371?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm curious to catalogue the choices made by players in my games.  \r\n\r\nIs there any way to do this other than \"so please email this log output back to me?\"",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm curious to catalogue the choices made by players in my games.</p>\n<p>Is there any way to do this other than \"so please email this log output back to me?\"</p>\n\n",
      "PostDate": "2020-07-05T14:45:20.023451Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2bd3600e-3d09-47b1-a2f0-28a8d8c5dd5d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're creating a transcript during the game (for example, by storing the important choices in a variable), you could save that to a server you have access to.\r\n\r\nOne way of doing this could be to upload the string to a simple web service like <a href=\"https://file.io\">file.io</a> - but you'd still need some way for the player to send in the file ID so you could access it again.\r\nI think it should be possible to set up a form using Google Forms (so that the results are saved to a spreadsheet on your Google Drive), and have the game post to it in the background. This is probably easier than building an entire service from scratch, but it's still a significant amount of work.\r\n\r\nNot sure if anyone has come up with any other ideas yet.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're creating a transcript during the game (for example, by storing the important choices in a variable), you could save that to a server you have access to.</p>\n<p>One way of doing this could be to upload the string to a simple web service like <a href=\"https://file.io/\">file.io</a> - but you'd still need some way for the player to send in the file ID so you could access it again.<br>\nI think it should be possible to set up a form using Google Forms (so that the results are saved to a spreadsheet on your Google Drive), and have the game post to it in the background. This is probably easier than building an entire service from scratch, but it's still a significant amount of work.</p>\n<p>Not sure if anyone has come up with any other ideas yet.</p>\n\n",
      "PostDate": "2020-07-05T16:10:56.4098419Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a866cf9d-da8c-4c32-a673-ca8a3efef076",
      "UserId": 462147,
      "Username": "hungryplayer",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b405ba4ed3b848b0459a54d7fc98d371?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way for the \"run javascript\" link to access information about the game's variables?  Also, can you execute functions from the same javascript \"scope\" in more than one \"execute javascript\" command?\r\n\r\nI'm thinking you could transfer the variables to javascript, then have that send it somewhere (websockets or whatever.)\r\nIn fact, perhaps you could print the variables on the screen, have the javascript read it, hide the variables quickly, then call the javascript again and dispatch the information?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way for the \"run javascript\" link to access information about the game's variables?  Also, can you execute functions from the same javascript \"scope\" in more than one \"execute javascript\" command?</p>\n<p>I'm thinking you could transfer the variables to javascript, then have that send it somewhere (websockets or whatever.)<br>\nIn fact, perhaps you could print the variables on the screen, have the javascript read it, hide the variables quickly, then call the javascript again and dispatch the information?</p>\n\n",
      "PostDate": "2020-07-06T14:03:03.3445953Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d9225a72-c1c0-40cd-b9f6-9feb5008f7c9",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there a way for the \"run javascript\" link to access information about the game's variables?\r\n\r\nYes. The most logical way to do it (so that any odd characters in the string are escaped properly) is to create a javascript function.\r\n\r\nYou can then do <code>JS.<em>function_name</em>(<em>parameters</em>)</code> in Quest. The parameters can be string, int, double, stringlist, objectlist, or stringdictionary; and will be automatically converted to the equivalent javascript types.\r\n\r\nA lot of people on here just use `JS.eval`, passing to it a javascript string with Quest variables in it. This can be unreliable, and is quite a lot of effort to make sure the values are escaped\r\n\r\n> Also, can you execute functions from the same javascript \"scope\" in more than one \"execute javascript\" command?\r\n\r\nWhen you run javascript, you will normally be passing a string to `eval`, which means the code's local scope is private to itself. There's nothing to stop you using global JS variables; but I'd suggest it might be better to use `jQuery.ready` to enclose your function definitions.\r\n\r\nFor example, the JS code:\r\n```\r\n$(function () {\r\n  var some_variable;\r\n\r\n  setValueA = function(a) {\r\n    some_variable = a;\r\n  };\r\n\r\n  showValueA = function () {\r\n    addText (\"<p>Some_variable is currently \"+some_variable + \"</p>\");\r\n  };\r\n});\r\n```\r\nYou could compress that to a single line of minified javascript; including something like:\r\n```\r\nJS.eval(\"$(function(){var n;setValueA=function(e){n=e},showValueA=function(){addText('<p>Some_variable is currently '+n+'</p>')}});\")\r\n```\r\nin your UI Initialisation script. And then in your Quest code you can do:\r\n`JS.setValueA (game.someattribute)`\r\nand\r\n`JS.showValueA()`\r\n\r\nYour JS functions have a variable shared between them, because they were created inside the same scope.\r\n\r\nDoes that make sense? I'm not so good at explaining.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there a way for the \"run javascript\" link to access information about the game's variables?</p>\n</blockquote>\n<p>Yes. The most logical way to do it (so that any odd characters in the string are escaped properly) is to create a javascript function.</p>\n<p>You can then do <code>JS.<em>function_name</em>(<em>parameters</em>)</code> in Quest. The parameters can be string, int, double, stringlist, objectlist, or stringdictionary; and will be automatically converted to the equivalent javascript types.</p>\n<p>A lot of people on here just use <code>JS.eval</code>, passing to it a javascript string with Quest variables in it. This can be unreliable, and is quite a lot of effort to make sure the values are escaped</p>\n<blockquote>\n<p>Also, can you execute functions from the same javascript \"scope\" in more than one \"execute javascript\" command?</p>\n</blockquote>\n<p>When you run javascript, you will normally be passing a string to <code>eval</code>, which means the code's local scope is private to itself. There's nothing to stop you using global JS variables; but I'd suggest it might be better to use <code>jQuery.ready</code> to enclose your function definitions.</p>\n<p>For example, the JS code:</p>\n<pre><code>$(function () {\n  var some_variable;\n\n  setValueA = function(a) {\n    some_variable = a;\n  };\n\n  showValueA = function () {\n    addText (\"&lt;p&gt;Some_variable is currently \"+some_variable + \"&lt;/p&gt;\");\n  };\n});\n</code></pre>\n<p>You could compress that to a single line of minified javascript; including something like:</p>\n<pre><code>JS.eval(\"$(function(){var n;setValueA=function(e){n=e},showValueA=function(){addText('&lt;p&gt;Some_variable is currently '+n+'&lt;/p&gt;')}});\")\n</code></pre>\n<p>in your UI Initialisation script. And then in your Quest code you can do:<br>\n<code>JS.setValueA (game.someattribute)</code><br>\nand<br>\n<code>JS.showValueA()</code></p>\n<p>Your JS functions have a variable shared between them, because they were created inside the same scope.</p>\n<p>Does that make sense? I'm not so good at explaining.</p>\n\n",
      "PostDate": "2020-07-06T14:27:21.6455794Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
