{
  "Topic": {
    "TopicId": "b9291iyjteg0qapf_h-4lq",
    "ForumId": "10",
    "Title": "Using Google Image or other Image board image requests at runtime",
    "LastUpdated": "2021-12-27T20:18:12.5499617Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "aaa0658b-e850-467e-9ecc-8b8b62188063",
      "UserId": 444448,
      "Username": "TheOtherBen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Can you access image results and images with in them for display? I get that everything is HTML. I can construct the same url I would need for a image board search, and get the return data from the request somehow, right? At least resolve something to the images direct url...",
      "EditableFormat": "markdown",
      "HTML": "<p>Can you access image results and images with in them for display? I get that everything is HTML. I can construct the same url I would need for a image board search, and get the return data from the request somehow, right? At least resolve something to the images direct url...</p>\n\n",
      "PostDate": "2021-12-27T20:18:12.5499617Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "671fceb4-e6eb-4c4e-bbf0-6b94f118145b",
      "UserId": 444448,
      "Username": "TheOtherBen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm going to go with the answer, \"Quest doesn't support => or async function type calls as they are Unexpected tokens.\" I'm not even sure fetch works because I can't get an object to help handle the request. So I guess it just doesn't support it? Am I doing something wrong with either of these within the context of Quest? Pretty sure these are two ways to do it generally.\r\n\r\n```\r\nfunction fetchPrint(url){\r\n\tfetch(imageUrl)\r\n\t.then(response => response.blob())\r\n\t.then(imageBlob => {\r\n    const imageObjectURL = URL.createObjectURL(imageBlob);\r\n    ASLEvent(\"JSMessage\", imageObjectURL);\r\n  });\r\n}\r\n\r\nfunction fetchX(url){\r\n\tasync function getText(file) {\r\n\tlet x = await fetch(file);\r\n  \tlet y = await x.text();\r\n  \tASLEvent(\"JSMessage\", y);\r\n\t}\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm going to go with the answer, \"Quest doesn't support =&gt; or async function type calls as they are Unexpected tokens.\" I'm not even sure fetch works because I can't get an object to help handle the request. So I guess it just doesn't support it? Am I doing something wrong with either of these within the context of Quest? Pretty sure these are two ways to do it generally.</p>\n<pre><code>function fetchPrint(url){\n\tfetch(imageUrl)\n\t.then(response =&gt; response.blob())\n\t.then(imageBlob =&gt; {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    ASLEvent(\"JSMessage\", imageObjectURL);\n  });\n}\n\nfunction fetchX(url){\n\tasync function getText(file) {\n\tlet x = await fetch(file);\n  \tlet y = await x.text();\n  \tASLEvent(\"JSMessage\", y);\n\t}\n}\n</code></pre>\n\n",
      "PostDate": "2021-12-31T17:38:49.741141Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "72394dde-eaf6-4100-a807-dadd80bc8684",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Quest doesn't support => or async function type calls \r\n\r\nIt's not up to Quest. Javascript support is up to the browser the player is using.\r\nIf you mean the desktop player, that's a pretty old version of Chromium (I don't remember the exact version, but it's old).\r\n\r\nIf I want to get stuff from the web in a Quest game I would normally use jQuery's functions; which abstract over most of the variations between browsers.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Quest doesn't support =&gt; or async function type calls</p>\n</blockquote>\n<p>It's not up to Quest. Javascript support is up to the browser the player is using.<br>\nIf you mean the desktop player, that's a pretty old version of Chromium (I don't remember the exact version, but it's old).</p>\n<p>If I want to get stuff from the web in a Quest game I would normally use jQuery's functions; which abstract over most of the variations between browsers.</p>\n\n",
      "PostDate": "2021-12-31T20:03:56.3933271Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "20f912a7-030f-498d-bec5-9807050e6d65",
      "UserId": 444448,
      "Username": "TheOtherBen",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I do mean the desktop player of course, but that's what I figured is the prob with bob. I'll see about doing it with JQuery another time. Kinda lost the magic.",
      "EditableFormat": "markdown",
      "HTML": "<p>I do mean the desktop player of course, but that's what I figured is the prob with bob. I'll see about doing it with JQuery another time. Kinda lost the magic.</p>\n\n",
      "PostDate": "2021-12-31T20:56:09.7989439Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
