{
  "Topic": {
    "TopicId": "6347",
    "ForumId": "10",
    "Title": "Args/Params for Dictionaries?",
    "LastUpdated": "2016-05-21T21:13:01+01:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "42916",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "quick question:\n\ndo dictionaries have (aka: can they be given) args/params ?\n\notherwise, I'd have to use verbose/ugly/messy 'if/switch' Function scripting... (if I'm not able to pass in an Object arg/param into a dictionary script)\n(or, how would be the best way to do this then?)\n\nfor a more clear example of what I'm hoping that I can do (via Dictionaries having args/params):\n\n[code:2nfzenhf]invoke (ScriptDictionaryItem (Script_Dictionary_Attribute_name, itemX, &lt;arg/param&#58; npc&gt;))\n\n&lt;attr name=&quot;Script_Dictionary_Attribute_name&quot; type=&quot;scriptdictionary&quot; parameters=&quot;object_parameter&quot;&gt;\n  &lt;item key=&quot;item1&quot;&gt;\n    Function_1_name (object_parameter)\n  &lt;/item&gt;\n  &lt;item key=&quot;item2&quot;&gt;\n    Function_2_name (object_parameter)\n  &lt;/item&gt;\n&lt;/attr&gt;[/code:2nfzenhf]\n\n------------\n\nadditional question while on topic for this post:\n\nwhich is more efficient/optiminal, using dictionaries vs using if/switch functions, does it differ after a certain point of size of data-content/number of operations (aka: for only a few operations, the if/switch function is more efficient/optiminal, but over x operations, then using a dictionary is more effective/optiminal ~ similar to how effective/optiminal different searching functions are based upon data/operational size: binary searching is more effective for large sizes whereas sequencial searching is more effective for small sizes)",
      "EditableFormat": "bbcode",
      "HTML": "quick question:<br/><br/>do dictionaries have (aka: can they be given) args/params ?<br/><br/>otherwise, I'd have to use verbose/ugly/messy 'if/switch' Function scripting... (if I'm not able to pass in an Object arg/param into a dictionary script)<br/>(or, how would be the best way to do this then?)<br/><br/>for a more clear example of what I'm hoping that I can do (via Dictionaries having args/params):<br/><br/><pre><code>invoke (ScriptDictionaryItem (Script_Dictionary_Attribute_name, itemX, &lt;arg/param&#58; npc&gt;))<br/><br/>&lt;attr name=&quot;Script_Dictionary_Attribute_name&quot; type=&quot;scriptdictionary&quot; parameters=&quot;object_parameter&quot;&gt;<br/>  &lt;item key=&quot;item1&quot;&gt;<br/>    Function_1_name (object_parameter)<br/>  &lt;/item&gt;<br/>  &lt;item key=&quot;item2&quot;&gt;<br/>    Function_2_name (object_parameter)<br/>  &lt;/item&gt;<br/>&lt;/attr&gt;</code></pre><br/><br/>------------<br/><br/>additional question while on topic for this post:<br/><br/>which is more efficient/optiminal, using dictionaries vs using if/switch functions, does it differ after a certain point of size of data-content/number of operations (aka: for only a few operations, the if/switch function is more efficient/optiminal, but over x operations, then using a dictionary is more effective/optiminal ~ similar to how effective/optiminal different searching functions are based upon data/operational size: binary searching is more effective for large sizes whereas sequencial searching is more effective for small sizes)",
      "PostDate": "2016-05-18T14:10:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42919",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I think the simple answer is no. I am not sure why you would want to; are you not better creating the dictionary just before invoking the script, so the values are all current?\n\nWhen I was messing around I had to change the XML to this. I know Quest accepts (and generates) your style, but not for me this time. Not sure why.\n[code:26w2n5ao]    &lt;Script_Dictionary_Attribute_name type=&quot;scriptdictionary&quot;&gt;\n      &lt;item key=&quot;item1&quot;&gt;\n        Function_1_name (object_parameter)\n      &lt;/item&gt;\n      &lt;item key=&quot;item2&quot;&gt;\n        Function_2_name (object_parameter)\n      &lt;/item&gt;\n    &lt;/Script_Dictionary_Attribute_name&gt;[/code:26w2n5ao]\nI got this to work successfully:\n[code:26w2n5ao]dict = NewDictionary()\ndictionary add (dict, &quot;object_parameter&quot;, player)\nscr = ScriptDictionaryItem(game&#46;Script_Dictionary_Attribute_name, &quot;item1&quot;)\ninvoke (scr, dict)[/code:26w2n5ao]\nIf your scripts have different parameters, you can add them all to the dictionary. It may not be quite as efficient, but would be easier.\n\nIf you are worried about efficiency, set up a loop that does it 10,000 times and time it, then do it the other way and see what the difference is. Personally, I would suggest simple and easy to understand are more important.\n\nWhy is a script dictionary better than script attributes on an object? Both are accessed via a string. The above example may well be easier that way, if you could attach the script to the object_parameter (or its type), and reference it in the scripts with &quot;this&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "I think the simple answer is no. I am not sure why you would want to; are you not better creating the dictionary just before invoking the script, so the values are all current?<br/><br/>When I was messing around I had to change the XML to this. I know Quest accepts (and generates) your style, but not for me this time. Not sure why.<br/><pre><code>    &lt;Script_Dictionary_Attribute_name type=&quot;scriptdictionary&quot;&gt;<br/>      &lt;item key=&quot;item1&quot;&gt;<br/>        Function_1_name (object_parameter)<br/>      &lt;/item&gt;<br/>      &lt;item key=&quot;item2&quot;&gt;<br/>        Function_2_name (object_parameter)<br/>      &lt;/item&gt;<br/>    &lt;/Script_Dictionary_Attribute_name&gt;</code></pre><br/>I got this to work successfully:<br/><pre><code>dict = NewDictionary()<br/>dictionary add (dict, &quot;object_parameter&quot;, player)<br/>scr = ScriptDictionaryItem(game&#46;Script_Dictionary_Attribute_name, &quot;item1&quot;)<br/>invoke (scr, dict)</code></pre><br/>If your scripts have different parameters, you can add them all to the dictionary. It may not be quite as efficient, but would be easier.<br/><br/>If you are worried about efficiency, set up a loop that does it 10,000 times and time it, then do it the other way and see what the difference is. Personally, I would suggest simple and easy to understand are more important.<br/><br/>Why is a script dictionary better than script attributes on an object? Both are accessed via a string. The above example may well be easier that way, if you could attach the script to the object_parameter (or its type), and reference it in the scripts with &quot;this&quot;.",
      "PostDate": "2016-05-18T15:10:56+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42921",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "oh ya, sorry about that...\n\nI guess quest still doesn't have the (I was hoping it did in its most recent version):\n\n&lt;attr name=&quot;blah&quot; type=&quot;blah&quot;&gt;content&lt;/attr&gt;\n\nsyntax working for dictionaries (and maybe a few other things too), as it still requires (only) the old style syntax:\n\n&lt;Attribute_name type=&quot;blah&quot;&gt;content&lt;/Attribute_name&gt;",
      "EditableFormat": "bbcode",
      "HTML": "oh ya, sorry about that...<br/><br/>I guess quest still doesn't have the (I was hoping it did in its most recent version):<br/><br/>&lt;attr name=&quot;blah&quot; type=&quot;blah&quot;&gt;content&lt;/attr&gt;<br/><br/>syntax working for dictionaries (and maybe a few other things too), as it still requires (only) the old style syntax:<br/><br/>&lt;Attribute_name type=&quot;blah&quot;&gt;content&lt;/Attribute_name&gt;",
      "PostDate": "2016-05-18T15:24:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42922",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "the reason is, is that this is a long function chain (still working on the character creation system), which requires me to be able to pass args/params along through it... so if there's no way of giving a dictionary args/params, then I can't use them (easily/simply) in my long function chain... (now that my finals are over, I'm trying to get back into working on my game coding... which is still just the character creation part, lol)",
      "EditableFormat": "bbcode",
      "HTML": "the reason is, is that this is a long function chain (still working on the character creation system), which requires me to be able to pass args/params along through it... so if there's no way of giving a dictionary args/params, then I can't use them (easily/simply) in my long function chain... (now that my finals are over, I'm trying to get back into working on my game coding... which is still just the character creation part, lol)",
      "PostDate": "2016-05-18T15:29:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42924",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "ah, very ingenius, Pixie!\n\n----------\n\n[code:2r932yl1]dict = NewDictionary()\ndictionary add (dict, &quot;object_parameter&quot;, player)\nscr = ScriptDictionaryItem(game&#46;Script_Dictionary_Attribute_name, &quot;item1&quot;)\ninvoke (scr, dict)[/code:2r932yl1]\n\n[quote=&quot;Pixie&quot;:2r932yl1]Why is a script dictionary better than script attributes on an object? Both are accessed via a string. The above example may well be easier that way, if you could attach the script to the object_parameter (or its type), and reference it in the scripts with &quot;this&quot;.[/quote:2r932yl1]\n\n---------\n\nif I understand, generally/loosely, you're nesting or adding both of them as keys/values (or are creating two dictionaries and then using them together), which then allows you to use them together, which is in-effect the same as using args/params, right?",
      "EditableFormat": "bbcode",
      "HTML": "ah, very ingenius, Pixie!<br/><br/>----------<br/><br/><pre><code>dict = NewDictionary()<br/>dictionary add (dict, &quot;object_parameter&quot;, player)<br/>scr = ScriptDictionaryItem(game&#46;Script_Dictionary_Attribute_name, &quot;item1&quot;)<br/>invoke (scr, dict)</code></pre><br/><br/><blockquote><cite>Pixie wrote:</cite>Why is a script dictionary better than script attributes on an object? Both are accessed via a string. The above example may well be easier that way, if you could attach the script to the object_parameter (or its type), and reference it in the scripts with &quot;this&quot;.</blockquote><br/><br/>---------<br/><br/>if I understand, generally/loosely, you're nesting or adding both of them as keys/values (or are creating two dictionaries and then using them together), which then allows you to use them together, which is in-effect the same as using args/params, right?",
      "PostDate": "2016-05-18T15:35:35+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42928",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Yes, one dictionary has the scripts, the other all the parameters they want.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, one dictionary has the scripts, the other all the parameters they want.",
      "PostDate": "2016-05-18T15:43:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42937",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thank you Pixie for the help with the dictionary usage/information! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "EditableFormat": "bbcode",
      "HTML": "thank you Pixie for the help with the dictionary usage/information! <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D -->",
      "PostDate": "2016-05-18T17:31:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42958",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "(Edit: I realize now that I'm just repeating more verbosely what The Pixie already said, but I'll leave it anyway, in case it's helpful.)\n\nAs a possible alternative, depending on your design, you might be better off without a script dictionary at all. I'm not sure about the semantics of these script in relation to the object being passed, but if you're calling behaviors on an object, then you might be better off putting the scripts either onto the object directly (if for a single object) or into a type you inherit from (if shared across multiple objects). \n\nThe underlying idea is that a Quest object is effectively a dictionary anyway. And if you use &quot;do&quot; instead of &quot;invoke&quot;, then you get a built-in &quot;this&quot; pointer. So moving the scripts onto the object (or an inherited type) means you can simply do:\n\n[code:2zddqgem]do (npc, itemX)[/code:2zddqgem]\n\nto run your script. And you'd have (roughly - fix the syntax as needed, as I'm at work and going from memory):\n[code:2zddqgem]&lt;object name=&quot;npc&quot;&gt;\n    &lt;item1 type=&quot;script&quot;&gt;\n       // stuff goes here\n    &lt;/item1&gt;\n    &lt;item2 type=&quot;script&quot;&gt;\n       // stuff goes here\n    &lt;/item2&gt;\n&lt;/object&gt;[/code:2zddqgem]\n\nOr you could encode it a bit and have\n\n[code:2zddqgem]do (npc, &quot;handle_&quot; + itemX)[/code:2zddqgem]\n\n[code:2zddqgem]&lt;object name=&quot;npc&quot;&gt;\n    &lt;handle_item1 type=&quot;script&quot;&gt;\n       // stuff goes here\n    &lt;/handle_item1&gt;\n    &lt;handle_item2 type=&quot;script&quot;&gt;\n       // stuff goes here\n    &lt;/handle_item2&gt;\n\n&lt;/object&gt;[/code:2zddqgem]\nThat might not work with your design, but I'm throwing it out there, just in case. (And if you did go the &quot;do&quot; route, it also has a variant that takes an arguments dictionary, in case you needed additional parameters beyond &quot;this&quot;.)\n\nIn the entire time I've been using Quest, in all the various bits of coding I've done, I've never used a script dictionary. Using an object to hold the scripts has always been easier and more meaningful from a design point of view. Your mileage may vary. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "(Edit: I realize now that I'm just repeating more verbosely what The Pixie already said, but I'll leave it anyway, in case it's helpful.)<br/><br/>As a possible alternative, depending on your design, you might be better off without a script dictionary at all. I'm not sure about the semantics of these script in relation to the object being passed, but if you're calling behaviors on an object, then you might be better off putting the scripts either onto the object directly (if for a single object) or into a type you inherit from (if shared across multiple objects). <br/><br/>The underlying idea is that a Quest object is effectively a dictionary anyway. And if you use &quot;do&quot; instead of &quot;invoke&quot;, then you get a built-in &quot;this&quot; pointer. So moving the scripts onto the object (or an inherited type) means you can simply do:<br/><br/><pre><code>do (npc, itemX)</code></pre><br/><br/>to run your script. And you'd have (roughly - fix the syntax as needed, as I'm at work and going from memory):<br/><pre><code>&lt;object name=&quot;npc&quot;&gt;<br/>    &lt;item1 type=&quot;script&quot;&gt;<br/>       // stuff goes here<br/>    &lt;/item1&gt;<br/>    &lt;item2 type=&quot;script&quot;&gt;<br/>       // stuff goes here<br/>    &lt;/item2&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>Or you could encode it a bit and have<br/><br/><pre><code>do (npc, &quot;handle_&quot; + itemX)</code></pre><br/><br/><pre><code>&lt;object name=&quot;npc&quot;&gt;<br/>    &lt;handle_item1 type=&quot;script&quot;&gt;<br/>       // stuff goes here<br/>    &lt;/handle_item1&gt;<br/>    &lt;handle_item2 type=&quot;script&quot;&gt;<br/>       // stuff goes here<br/>    &lt;/handle_item2&gt;<br/><br/>&lt;/object&gt;</code></pre><br/>That might not work with your design, but I'm throwing it out there, just in case. (And if you did go the &quot;do&quot; route, it also has a variant that takes an arguments dictionary, in case you needed additional parameters beyond &quot;this&quot;.)<br/><br/>In the entire time I've been using Quest, in all the various bits of coding I've done, I've never used a script dictionary. Using an object to hold the scripts has always been easier and more meaningful from a design point of view. Your mileage may vary. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2016-05-19T12:40:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42959",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "[quote=&quot;jaynabonne&quot;:ytzgs24v]... In the entire time I've been using Quest, in all the various bits of coding I've done, I've never used a script dictionary. ...[/quote:ytzgs24v]\nSame here",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>... In the entire time I've been using Quest, in all the various bits of coding I've done, I've never used a script dictionary. ...</blockquote><br/>Same here",
      "PostDate": "2016-05-19T13:05:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42998",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "thanks Jay, about using Objects and 'do'. I'm still trying to wrap my brain around understanding Object usage in terms of what I'm trying to do for my design. I still look at it procedurally, using functions/scripting/dictionaries/invoke. It's going to take some time to change my brain over to using Object constructs more and how for what I want to do with my designs.",
      "EditableFormat": "bbcode",
      "HTML": "thanks Jay, about using Objects and 'do'. I'm still trying to wrap my brain around understanding Object usage in terms of what I'm trying to do for my design. I still look at it procedurally, using functions/scripting/dictionaries/invoke. It's going to take some time to change my brain over to using Object constructs more and how for what I want to do with my designs.",
      "PostDate": "2016-05-21T19:57:23+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43000",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you have an npc, then you have an object already. This isn't a procedural vs object-oriented question. It's just a question of where you put the scripts: either on the object in question so you can take advantage of the fact that Quest will pass the relevant object for you, or in a separate dictionary, where you have to resort to the above per The Pixie to inject the object into the script yourself. If you remember that a Quest object *is* a dictionary (in fact, one that's easier to use, assuming you already have one), then it's no conceptual difference at all.",
      "EditableFormat": "bbcode",
      "HTML": "If you have an npc, then you have an object already. This isn't a procedural vs object-oriented question. It's just a question of where you put the scripts: either on the object in question so you can take advantage of the fact that Quest will pass the relevant object for you, or in a separate dictionary, where you have to resort to the above per The Pixie to inject the object into the script yourself. If you remember that a Quest object *is* a dictionary (in fact, one that's easier to use, assuming you already have one), then it's no conceptual difference at all.",
      "PostDate": "2016-05-21T21:13:01+01:00",
      "LastEditDate": null
    }
  ]
}
