{
  "Topic": {
    "TopicId": "3312",
    "ForumId": "10",
    "Title": "Process",
    "LastUpdated": "2012-11-23T21:21:42+00:00",
    "ReplyCount": 2
  },
  "Posts": [
    {
      "PostId": "21848",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Now that I've begun stepping into the Quest code, I was wondering about guidelines or at least the preferred process for implementing changes. \n\nAs an example: looking at &quot;HandleCommand&quot;, I can see at least two possible immediate simple changes based on both my own experience and what I have read in the forums:\n\n1) Allow (via a game attribute) multiple command processing to be turned off.\n2) Disable (via a game attribute) echoing the command the user has just typed.\n\nOr, coming at a different way:\n1) Invoke a script on the game object which takes the input line and returns a list of commands (defaults to current behavior of splitting the command line, but a simple override could just return the command line as is).\n2) Invoke a script on the game object to echo the line (defaults to current behavior of echoing but a simple override would do nothing).\n\nThat raises a few questions. First, can we just go in and start mucking with things, or should we create an issue first so that it can be at least tracked and possibly even pre-approved? I know that it is often down to a single person (Alex in this case) to have the design principles in mind and enforce them, and make sure that the code doesn't go off the rails, so the question is, is that done and if so how?\n\nThe second question is just that of design philosophy. In the two &quot;ways&quot; above, the former allows behavior change with a simple game attribute change but is less flexible. The latter way gives the move advanced scripter more control, but might be tricky for the more novice.\n\nI suppose a third question would be: if we do make multiple changes, is it better to have separate pulls for each of them, so they can be separately approved/rejected and integrated? Or is a single pull able to be selectively accepted? (Or does it matter?)\n\nAny thoughts on the above would be greatly appreciated!",
      "EditableFormat": "bbcode",
      "HTML": "Now that I've begun stepping into the Quest code, I was wondering about guidelines or at least the preferred process for implementing changes. <br/><br/>As an example: looking at &quot;HandleCommand&quot;, I can see at least two possible immediate simple changes based on both my own experience and what I have read in the forums:<br/><br/>1) Allow (via a game attribute) multiple command processing to be turned off.<br/>2) Disable (via a game attribute) echoing the command the user has just typed.<br/><br/>Or, coming at a different way:<br/>1) Invoke a script on the game object which takes the input line and returns a list of commands (defaults to current behavior of splitting the command line, but a simple override could just return the command line as is).<br/>2) Invoke a script on the game object to echo the line (defaults to current behavior of echoing but a simple override would do nothing).<br/><br/>That raises a few questions. First, can we just go in and start mucking with things, or should we create an issue first so that it can be at least tracked and possibly even pre-approved? I know that it is often down to a single person (Alex in this case) to have the design principles in mind and enforce them, and make sure that the code doesn't go off the rails, so the question is, is that done and if so how?<br/><br/>The second question is just that of design philosophy. In the two &quot;ways&quot; above, the former allows behavior change with a simple game attribute change but is less flexible. The latter way gives the move advanced scripter more control, but might be tricky for the more novice.<br/><br/>I suppose a third question would be: if we do make multiple changes, is it better to have separate pulls for each of them, so they can be separately approved/rejected and integrated? Or is a single pull able to be selectively accepted? (Or does it matter?)<br/><br/>Any thoughts on the above would be greatly appreciated!",
      "PostDate": "2012-11-23T16:35:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "21849",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "In this particular case I think it's better to have simple boolean attributes on the game object that can turn the options on or off. I think if a game author wants complete control, they can just go in and modify the core library anyway, so I can't see much value in having a separate mechanism for a game script to override the behaviour.\n\nIf you create an issue first, that will at least give everybody some idea of what you're working on, so people can comment on it. But on the other hand if it's quite quick to implement, there's no harm in just going ahead and doing it and then sending a pull request.\n\nFor multiple unrelated changes, I'd prefer you to use separate forks. That way the changes can be merged (or not) independently - as a pull request is all or nothing (well, there may be some advanced Mercurial things I'm not aware of I suppose but it makes sense to me to just keep things simple).",
      "EditableFormat": "bbcode",
      "HTML": "In this particular case I think it's better to have simple boolean attributes on the game object that can turn the options on or off. I think if a game author wants complete control, they can just go in and modify the core library anyway, so I can't see much value in having a separate mechanism for a game script to override the behaviour.<br/><br/>If you create an issue first, that will at least give everybody some idea of what you're working on, so people can comment on it. But on the other hand if it's quite quick to implement, there's no harm in just going ahead and doing it and then sending a pull request.<br/><br/>For multiple unrelated changes, I'd prefer you to use separate forks. That way the changes can be merged (or not) independently - as a pull request is all or nothing (well, there may be some advanced Mercurial things I'm not aware of I suppose but it makes sense to me to just keep things simple).",
      "PostDate": "2012-11-23T19:21:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "21851",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Understood. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Thanks very much.",
      "EditableFormat": "bbcode",
      "HTML": "Understood. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Thanks very much.",
      "PostDate": "2012-11-23T21:21:42+00:00",
      "LastEditDate": null
    }
  ]
}
