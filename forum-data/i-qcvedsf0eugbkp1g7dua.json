{
  "Topic": {
    "TopicId": "i-qcvedsf0eugbkp1g7dua",
    "ForumId": "20",
    "Title": "On Parsing",
    "LastUpdated": "2017-01-21T22:15:08.939081Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "963bbec2-2f60-4094-b41c-d6466239693f",
      "UserId": 286124,
      "Username": "benergize",
      "AvatarUrl": "http://i.imgur.com/dFzVKNCb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hey all. My name's Ben, and I'm a programmer. I wrote my own JS text-adventure engine, and I thought it would be cool to share how some of it works.\r\n\r\nThe parser takes input from a plain old regular HTML input box, but the page is styled so it looks like an old school command line. When the player presses enter, the text in the text box is sent to a parser for processing. There are actually like 8 different separate parsers controlled by game statuses. The game processes input differently depending what status it's on, so if ```status==8``` for example, the game knows it's in combat mode and will send received inputs to parseCombat instead of parseInput.\r\n\r\nThe important parser is parseInput, which handles primary dungeon navigation (ie, 'look around', 'take object', 'talk to orc', etc). It works like this:\r\n\r\n1. Check for specific inputs like XYZZY to do things like teleports.\r\n2. If none are found, check if the input is a 'look around' query, and if it is, return a formatted list of objects in the room.\r\n3. If it's not, separate the input by spaces and start processing it word by word.\r\n4. If one of the words is found to match the name of an object in the room, set the subject to the object\r\n5. If one of the words is found to match a verb that the parser knows, set the action to the verb.\r\n6. If both a verb and an action are found, read off the corresponding text (or execute a corresponding function) from the targeted object.\r\n7. If a verb was found but an object wasn't, ask the player what they want to perform that verb on (ie, if the player entered 'take' the game will ask, \"what do you want to take?\"), and then if the next user input is just an object, perform the action on that object.\r\n8. If none of the above conditions are met, return a message that the command wasn't understood.\r\n</ol>\r\n\r\nThat's the long and short of primary dungeon navigation. Not actually that complicated when you get down to it, but certainly took a while to write. The whole game takes up about 8000 lines of code, give or take. Always makes me chuckle to think that my engine (written between 2015 and now) is only just getting close to the power of Zork's (which came out in 1977 :p ).\r\n\r\nHope that was somewhat interesting. You can see the engine in action in my game Underground Dungeon. I'll be posting some massive bug fixes and engine improvements in the next couple days.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hey all. My name's Ben, and I'm a programmer. I wrote my own JS text-adventure engine, and I thought it would be cool to share how some of it works.</p>\n<p>The parser takes input from a plain old regular HTML input box, but the page is styled so it looks like an old school command line. When the player presses enter, the text in the text box is sent to a parser for processing. There are actually like 8 different separate parsers controlled by game statuses. The game processes input differently depending what status it's on, so if <code>status==8</code> for example, the game knows it's in combat mode and will send received inputs to parseCombat instead of parseInput.</p>\n<p>The important parser is parseInput, which handles primary dungeon navigation (ie, 'look around', 'take object', 'talk to orc', etc). It works like this:</p>\n<ol>\n<li>Check for specific inputs like XYZZY to do things like teleports.</li>\n<li>If none are found, check if the input is a 'look around' query, and if it is, return a formatted list of objects in the room.</li>\n<li>If it's not, separate the input by spaces and start processing it word by word.</li>\n<li>If one of the words is found to match the name of an object in the room, set the subject to the object</li>\n<li>If one of the words is found to match a verb that the parser knows, set the action to the verb.</li>\n<li>If both a verb and an action are found, read off the corresponding text (or execute a corresponding function) from the targeted object.</li>\n<li>If a verb was found but an object wasn't, ask the player what they want to perform that verb on (ie, if the player entered 'take' the game will ask, \"what do you want to take?\"), and then if the next user input is just an object, perform the action on that object.</li>\n<li>If none of the above conditions are met, return a message that the command wasn't understood.</li>\n</ol>\n\n<p>That's the long and short of primary dungeon navigation. Not actually that complicated when you get down to it, but certainly took a while to write. The whole game takes up about 8000 lines of code, give or take. Always makes me chuckle to think that my engine (written between 2015 and now) is only just getting close to the power of Zork's (which came out in 1977 :p ).</p>\n<p>Hope that was somewhat interesting. You can see the engine in action in my game Underground Dungeon. I'll be posting some massive bug fixes and engine improvements in the next couple days.</p>\n\n",
      "PostDate": "2017-01-21T22:15:08.939081Z",
      "LastEditDate": null
    },
    {
      "PostId": "8c3df940-00f9-48c1-9069-fefdcbe6ad5e",
      "UserId": 279343,
      "Username": "Ewald",
      "AvatarUrl": "http://i.imgur.com/luGYAiqb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've given your game a try and the parser works fine.\r\nIf it doesn't get the commands entered it makes clear why it doesn't. Great job!\r\nOne thing though, it doesn't understand 'restart'?",
      "EditableFormat": "markdown",
      "HTML": "<p>I've given your game a try and the parser works fine.<br>\nIf it doesn't get the commands entered it makes clear why it doesn't. Great job!<br>\nOne thing though, it doesn't understand 'restart'?</p>\n\n",
      "PostDate": "2017-01-22T00:05:13.2065624Z",
      "LastEditDate": null
    },
    {
      "PostId": "2b18524e-8340-4355-9f9a-2963aac0c629",
      "UserId": 9112,
      "Username": "Jay Nabonne",
      "AvatarUrl": "https://secure.gravatar.com/avatar/379859a7f1952a65399fc63997e68f0b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Game is here: https://textadventures.co.uk/games/view/gfeokxwhhkacym2c6njupq/underground-dungeon\r\n\r\nMy only feedback is that your choices for verbs differ from the conventions used in other text adventure games:\r\n\r\nThe standard shortcut abbreviation for \"look\" in TA games (the general \"see what's in the room\") is \"l\". And the shortcut for \"examine\" (or \"look at\") is \"x\". You seem to have those reversed. You have \"x\" on its own mapping to \"look\", whereas \"l\" is mapped to \"examine\" (or \"look at\"). While it's up to you how you map your commands, I'd recommend sticking with what people know from decades of game playing. :)\r\n\r\n(A minor note about the javascript: check out when to use \"===\" vs \"==\".)\r\n\r\nNice work, in general!",
      "EditableFormat": "markdown",
      "HTML": "<p>Game is here: https://textadventures.co.uk/games/view/gfeokxwhhkacym2c6njupq/underground-dungeon</p>\n<p>My only feedback is that your choices for verbs differ from the conventions used in other text adventure games:</p>\n<p>The standard shortcut abbreviation for \"look\" in TA games (the general \"see what's in the room\") is \"l\". And the shortcut for \"examine\" (or \"look at\") is \"x\". You seem to have those reversed. You have \"x\" on its own mapping to \"look\", whereas \"l\" is mapped to \"examine\" (or \"look at\"). While it's up to you how you map your commands, I'd recommend sticking with what people know from decades of game playing. :)</p>\n<p>(A minor note about the javascript: check out when to use \"===\" vs \"==\".)</p>\n<p>Nice work, in general!</p>\n\n",
      "PostDate": "2017-01-22T15:20:52.1970574Z",
      "LastEditDate": "2017-01-22T15:21:09.187299Z"
    },
    {
      "PostId": "bdbbfbf1-3225-4725-ae26-afb940b7ee8b",
      "UserId": 286124,
      "Username": "benergize",
      "AvatarUrl": "http://i.imgur.com/dFzVKNCb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Jay Nabonne - Thank you for the pointers! I don't know why, but at the time I was under the impression \"===\" was for comparing disparate data types (which makes no sense), so that's something I need to correct. The parsers I'm used to are _very_ oldschool and haven't had 'x' 'i'  etc. I'll fix that when I get a chance.\r\n\r\n@Ewald - I'll add a restart command, thanks for the recommendation!",
      "EditableFormat": "markdown",
      "HTML": "<p>@Jay Nabonne - Thank you for the pointers! I don't know why, but at the time I was under the impression \"===\" was for comparing disparate data types (which makes no sense), so that's something I need to correct. The parsers I'm used to are <em>very</em> oldschool and haven't had 'x' 'i'  etc. I'll fix that when I get a chance.</p>\n<p>@Ewald - I'll add a restart command, thanks for the recommendation!</p>\n\n",
      "PostDate": "2017-03-13T12:57:38.8921109Z",
      "LastEditDate": null
    }
  ]
}
