{
  "Topic": {
    "TopicId": "8cruwmf6xuyutjqmivie1g",
    "ForumId": "18",
    "Title": "Using Rooms For Other Things",
    "LastUpdated": "2017-06-29T07:57:18.2392711Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b8f1b580-8717-46fd-bcb6-2be9fb2b4aff",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "### Rooms as data structures\r\n\r\n\r\nIt can often be useful to use the Quest world model as a way to hold data. You can add any number of attributes of any type to a room, making it as flexible as a Dictionary, but you can also define complex relationships between rooms using exits.\r\n\r\nHere are some examples to illustrate.\r\n\r\n\r\n### A Computer System\r\n\r\nThis is a way to model a computer system that gives the user a set number of options in a menu. When the player makes a selection, she is presented with a new screen, and a new set of options. What we have, then, is a set of nodes, each of which has a set of options leading to other nodes...\r\n\r\nSo basically the same as a Quest game world, except we have nodes rather than rooms. So why not use rooms and disguise them as nodes? What you could do is set up a number of rooms, with exits between them, and then track where the player is with a new attribute on the player object. In each node/room, list the exits as the options.\r\n\r\nMore here:\r\nhttps://github.com/ThePix/quest/wiki/Modelling-a-computer-system\r\n\r\n\r\n### Conversations\r\n\r\nYou could do pretty much the same thing to handle conversations; at each point in the conversation, the player can select an option based on the exits from there.\r\n\r\n\r\n### NPC Mood\r\n\r\nAs well as tracking the conversation, you could track the mood of NPCs. You could have a set of rooms, one for each mood. Each NPC could have his own attribute pointing to his current mood, and when the player interacts you could check the current mood against the interact, and see if his mood has changed; if it has, follow the exit to the new mood. This would not be trivial, but if you do want to track moods, this would be a good way to do it.\r\n\r\n\r\n### Weather\r\n\r\nWe could even track the weather the same way. Each turn there is a small chance of change, and if it does change, randomly pick one of the exits to go to a new weather type. You could add a message to the exit, such as \"The rain is getting heavier\".\r\n\r\nhttps://github.com/ThePix/quest/wiki/Weather-Library\r\n",
      "EditableFormat": "markdown",
      "HTML": "<h3>Rooms as data structures</h3>\n<p>It can often be useful to use the Quest world model as a way to hold data. You can add any number of attributes of any type to a room, making it as flexible as a Dictionary, but you can also define complex relationships between rooms using exits.</p>\n<p>Here are some examples to illustrate.</p>\n<h3>A Computer System</h3>\n<p>This is a way to model a computer system that gives the user a set number of options in a menu. When the player makes a selection, she is presented with a new screen, and a new set of options. What we have, then, is a set of nodes, each of which has a set of options leading to other nodes...</p>\n<p>So basically the same as a Quest game world, except we have nodes rather than rooms. So why not use rooms and disguise them as nodes? What you could do is set up a number of rooms, with exits between them, and then track where the player is with a new attribute on the player object. In each node/room, list the exits as the options.</p>\n<p>More here:<br>\nhttps://github.com/ThePix/quest/wiki/Modelling-a-computer-system</p>\n<h3>Conversations</h3>\n<p>You could do pretty much the same thing to handle conversations; at each point in the conversation, the player can select an option based on the exits from there.</p>\n<h3>NPC Mood</h3>\n<p>As well as tracking the conversation, you could track the mood of NPCs. You could have a set of rooms, one for each mood. Each NPC could have his own attribute pointing to his current mood, and when the player interacts you could check the current mood against the interact, and see if his mood has changed; if it has, follow the exit to the new mood. This would not be trivial, but if you do want to track moods, this would be a good way to do it.</p>\n<h3>Weather</h3>\n<p>We could even track the weather the same way. Each turn there is a small chance of change, and if it does change, randomly pick one of the exits to go to a new weather type. You could add a message to the exit, such as \"The rain is getting heavier\".</p>\n<p>https://github.com/ThePix/quest/wiki/Weather-Library</p>\n\n",
      "PostDate": "2017-06-29T07:57:18.2392711Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
