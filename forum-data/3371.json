{
  "Topic": {
    "TopicId": "3371",
    "ForumId": "10",
    "Title": "Chr function",
    "LastUpdated": "2012-12-24T15:04:59+00:00",
    "ReplyCount": 13
  },
  "Posts": [
    {
      "PostId": "22159",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "What is the use of the Chr function? \n\nAs an example, if I do:\n\nmsg(Chr(65))\n\nI would expect (or hope) it would print an &quot;A&quot;. Instead it just prints &quot;65&quot;. So it seems a &quot;Chr&quot; is just returning an integer, but then what use is it?\n\nAnother &quot;Chr&quot; clue: if you iterate through a string with &quot;foreach&quot;, it gives you &quot;Chars&quot; back. You can tell that because if you try to pass it to Asc, then it says it can't find function &quot;Asc(Char)&quot;.  However, if I call &quot;Asc(Chr(65))&quot;, it says it can't find function &quot;Asc(Int32)&quot;. That seems to me to imply that Chr is just returning in Int32. Perhaps my confusion is coming in because it's a bug? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nSo... is there a way to create a string with a character having a specific ASCII value?",
      "EditableFormat": "bbcode",
      "HTML": "What is the use of the Chr function? <br/><br/>As an example, if I do:<br/><br/>msg(Chr(65))<br/><br/>I would expect (or hope) it would print an &quot;A&quot;. Instead it just prints &quot;65&quot;. So it seems a &quot;Chr&quot; is just returning an integer, but then what use is it?<br/><br/>Another &quot;Chr&quot; clue: if you iterate through a string with &quot;foreach&quot;, it gives you &quot;Chars&quot; back. You can tell that because if you try to pass it to Asc, then it says it can't find function &quot;Asc(Char)&quot;.  However, if I call &quot;Asc(Chr(65))&quot;, it says it can't find function &quot;Asc(Int32)&quot;. That seems to me to imply that Chr is just returning in Int32. Perhaps my confusion is coming in because it's a bug? <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>So... is there a way to create a string with a character having a specific ASCII value?",
      "PostDate": "2012-12-18T20:59:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22161",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Bugs bugs everywhere - it's like an episode of &quot;I'm a Celebrity&quot;...\n\nIt would seem that the Chr function has never worked, so good find! Checked in a fix now.\n\nAs for foreaching through a string, is this useful? Because a string implements IEnumerable in .net, it's returning Chars here, but Quest hasn't got any support for Chars which is the reason for #1201 which you logged on the Issue Tracker. Either we support this and convert the char to a string, or we throw an exception in this case and you can use a for loop with the Mid function to go through a string character by character.",
      "EditableFormat": "bbcode",
      "HTML": "Bugs bugs everywhere - it's like an episode of &quot;I'm a Celebrity&quot;...<br/><br/>It would seem that the Chr function has never worked, so good find! Checked in a fix now.<br/><br/>As for foreaching through a string, is this useful? Because a string implements IEnumerable in .net, it's returning Chars here, but Quest hasn't got any support for Chars which is the reason for #1201 which you logged on the Issue Tracker. Either we support this and convert the char to a string, or we throw an exception in this case and you can use a for loop with the Mid function to go through a string character by character.",
      "PostDate": "2012-12-19T11:36:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22162",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I think as long as you can use Chars in some limited String contexts, more or less, it *can* be useful. (And without that ability, Chr would be useless, since you wouldn't be able to do anything with the return value.) For example, you could do a foreach on the string and weed out or replace characters. I know you can still use Mid, but something feels more efficient with characters rather than unit-length strings. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nAs far as 1201 goes, I think I found it a bit disconcerting that a valid Quest object (of any type) passed to TypeOf would generate an exception - given that the only way to avoid it is to know what type the thing is ahead of time, which is the whole point of TypeOf to begin with, for those times you don't know. I'd even be happy with TypeOf returning an empty string or null instead of an exception, so that I can at least skip bad types if need be.",
      "EditableFormat": "bbcode",
      "HTML": "I think as long as you can use Chars in some limited String contexts, more or less, it *can* be useful. (And without that ability, Chr would be useless, since you wouldn't be able to do anything with the return value.) For example, you could do a foreach on the string and weed out or replace characters. I know you can still use Mid, but something feels more efficient with characters rather than unit-length strings. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>As far as 1201 goes, I think I found it a bit disconcerting that a valid Quest object (of any type) passed to TypeOf would generate an exception - given that the only way to avoid it is to know what type the thing is ahead of time, which is the whole point of TypeOf to begin with, for those times you don't know. I'd even be happy with TypeOf returning an empty string or null instead of an exception, so that I can at least skip bad types if need be.",
      "PostDate": "2012-12-19T12:53:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22163",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "An alternative would be to have Chr return a unit-length string instead of a character. That would make it (more or less) the inverse of Asc and might make things more consistent.",
      "EditableFormat": "bbcode",
      "HTML": "An alternative would be to have Chr return a unit-length string instead of a character. That would make it (more or less) the inverse of Asc and might make things more consistent.",
      "PostDate": "2012-12-19T12:58:28+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22164",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "The fix I checked in makes Chr return a string.\n\nI think generic dictionaries are the only type that Quest &quot;understands&quot; that will cause an error with TypeOf, and player.currentcommandresolvedelements should be the only place where this type exists. It's sort of a not-really supported type, as you can't save it (you'll find that player.currentcommandresolvedelements gets set to null when saving a .quest-save file). But that's really just because I haven't got round to adding support for saving and loading this type yet, or handling it in the attributes editor, because I don't think most games need this type (string dictionaries and object dictionaries should be sufficient - if you really need a dictionary that can hold either... why?)",
      "EditableFormat": "bbcode",
      "HTML": "The fix I checked in makes Chr return a string.<br/><br/>I think generic dictionaries are the only type that Quest &quot;understands&quot; that will cause an error with TypeOf, and player.currentcommandresolvedelements should be the only place where this type exists. It's sort of a not-really supported type, as you can't save it (you'll find that player.currentcommandresolvedelements gets set to null when saving a .quest-save file). But that's really just because I haven't got round to adding support for saving and loading this type yet, or handling it in the attributes editor, because I don't think most games need this type (string dictionaries and object dictionaries should be sufficient - if you really need a dictionary that can hold either... why?)",
      "PostDate": "2012-12-19T16:12:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22165",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Going off the last part, I had explored (and initially used) generic dictionaries briefly, before I discovered by looking in the code that they didn't serialize. My case: for conversations, I wanted (and still want) to allow topics to have associations. For example, if you ask someone about her father, she might say, &quot;My father was a farmer from Tibo.&quot; That would have a strong topic value for &quot;father&quot; (since that's the requested topic), but there might be auxilliary topics brought in for things like &quot;farming&quot;, &quot;family&quot;, &quot;Tibo&quot;, &quot;mother&quot;, &quot;sister&quot;, etc, all with relevant weights. That way, if the NPC offers additional chit-chat, she can pick something to say that is not only based on &quot;father&quot;, but related in some way to what has been discussed. (And the topics would merge and disappear over time, similar to the way a human mind works).\n\nThe natural data structure to me for that is a vector of weights (or a set of topic/weight pairs), which expresses in Quest efficiently as a dictionary of doubles. And the generic dictionary supports adding any type as a value, so I was able to use it. But... it doesn't save. So now, since I want this to persist across turns and also be saved, I have to keep the weight vector persistently as a string dictionary, and then convert it back and forth to a numeric one when I use it. It's a pain and who knows what sort of performance problems that will cause if I have to, say, search through several hundred &quot;phrases&quot; to decide which one a character will say.\n\nThe bottom line: people will always want what you can provide as far as functionality, especially as Quest apps become more complex, especially if it is a generalzation of an existing feature. I know I would go crazy if I could have arbitrary nesting of dictionaries or lists (i.e. dictionaries whose elements are dictionaries, and lists of lists could support multi-dimensional arrays). As of now, I would have to create objects at each level. Which I can do and have done, but it suppresses the design a bit, to have the only expression be painful... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nWhile speaking of dictionaries, I'd love to see a &quot;dictionary set&quot; which always does a name/value set regardless of whether the value already exists (the current behavior of erring if a value exists for &quot;add&quot; is just an annoying pain; it has never been useful to me for anything. I've never encountered an associative array with that behavior before) and the ability to do a remove on a key and have it silently succeed if the key doesn't exist. I know I could write my own (and Pixie has done that), but it just rubs that a simple add has to turn into an if-exist-then-delete-before-add, even if buried in my own code. Ok, rant over. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Going off the last part, I had explored (and initially used) generic dictionaries briefly, before I discovered by looking in the code that they didn't serialize. My case: for conversations, I wanted (and still want) to allow topics to have associations. For example, if you ask someone about her father, she might say, &quot;My father was a farmer from Tibo.&quot; That would have a strong topic value for &quot;father&quot; (since that's the requested topic), but there might be auxilliary topics brought in for things like &quot;farming&quot;, &quot;family&quot;, &quot;Tibo&quot;, &quot;mother&quot;, &quot;sister&quot;, etc, all with relevant weights. That way, if the NPC offers additional chit-chat, she can pick something to say that is not only based on &quot;father&quot;, but related in some way to what has been discussed. (And the topics would merge and disappear over time, similar to the way a human mind works).<br/><br/>The natural data structure to me for that is a vector of weights (or a set of topic/weight pairs), which expresses in Quest efficiently as a dictionary of doubles. And the generic dictionary supports adding any type as a value, so I was able to use it. But... it doesn't save. So now, since I want this to persist across turns and also be saved, I have to keep the weight vector persistently as a string dictionary, and then convert it back and forth to a numeric one when I use it. It's a pain and who knows what sort of performance problems that will cause if I have to, say, search through several hundred &quot;phrases&quot; to decide which one a character will say.<br/><br/>The bottom line: people will always want what you can provide as far as functionality, especially as Quest apps become more complex, especially if it is a generalzation of an existing feature. I know I would go crazy if I could have arbitrary nesting of dictionaries or lists (i.e. dictionaries whose elements are dictionaries, and lists of lists could support multi-dimensional arrays). As of now, I would have to create objects at each level. Which I can do and have done, but it suppresses the design a bit, to have the only expression be painful... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>While speaking of dictionaries, I'd love to see a &quot;dictionary set&quot; which always does a name/value set regardless of whether the value already exists (the current behavior of erring if a value exists for &quot;add&quot; is just an annoying pain; it has never been useful to me for anything. I've never encountered an associative array with that behavior before) and the ability to do a remove on a key and have it silently succeed if the key doesn't exist. I know I could write my own (and Pixie has done that), but it just rubs that a simple add has to turn into an if-exist-then-delete-before-add, even if buried in my own code. Ok, rant over. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2012-12-19T17:49:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22166",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Good points. #899 is logged for the generic dictionary saver - I will look into making it work with any types that Quest supports, so you'll be able to have dictionaries containing dictionaries and so on. I will look at this for v5.4.\n\nI like the &quot;dictionary set&quot; idea too.",
      "EditableFormat": "bbcode",
      "HTML": "Good points. #899 is logged for the generic dictionary saver - I will look into making it work with any types that Quest supports, so you'll be able to have dictionaries containing dictionaries and so on. I will look at this for v5.4.<br/><br/>I like the &quot;dictionary set&quot; idea too.",
      "PostDate": "2012-12-20T10:43:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22174",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Not to flip-flop too much, but I was thinking about this some more, and if I can save you some work... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nNow that we can enumerate the attributes on an object, we can possibly use objects as a more robust (and easier to use!) dictionary. I just realized that instead of a dictionary with doubles, I can use an object with double attributes, and that would save fine, I can enumerate the attributes, and I can much more easily set and retrieve values.\n\nTwo questions:\n1) Is there a way to remove/delete an attribute from an object? \n2) Do you see any performance hit to querying attribute values vs members of a dictionary? (I realize you may not know offhand. If so, don't worry about it. But if you have any definite knowledge that would point to a performance issue, I'd love to know about it.)\n\nThanks for the discussion. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Not to flip-flop too much, but I was thinking about this some more, and if I can save you some work... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>Now that we can enumerate the attributes on an object, we can possibly use objects as a more robust (and easier to use!) dictionary. I just realized that instead of a dictionary with doubles, I can use an object with double attributes, and that would save fine, I can enumerate the attributes, and I can much more easily set and retrieve values.<br/><br/>Two questions:<br/>1) Is there a way to remove/delete an attribute from an object? <br/>2) Do you see any performance hit to querying attribute values vs members of a dictionary? (I realize you may not know offhand. If so, don't worry about it. But if you have any definite knowledge that would point to a performance issue, I'd love to know about it.)<br/><br/>Thanks for the discussion. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2012-12-21T11:45:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22176",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "To remove an attribute, just set it to null.\n\nA dictionary may be slightly quicker. Attributes are saved in dictionaries, but Quest also has to look through inherited types to see if a value is defined there (although it will only do this if it doesn't find the attribute in the object directly).",
      "EditableFormat": "bbcode",
      "HTML": "To remove an attribute, just set it to null.<br/><br/>A dictionary may be slightly quicker. Attributes are saved in dictionaries, but Quest also has to look through inherited types to see if a value is defined there (although it will only do this if it doesn't find the attribute in the object directly).",
      "PostDate": "2012-12-21T14:49:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22177",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Great. Thanks!",
      "EditableFormat": "bbcode",
      "HTML": "Great. Thanks!",
      "PostDate": "2012-12-21T16:13:49+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22195",
      "UserId": 0,
      "Username": "pzolla",
      "UserAvatar": null,
      "UserGravatar": "7b4b436eab19d6b8493f0483f302d010",
      "EditableText": "Can you give a quick example of the structure of a 'double' attribute?",
      "EditableFormat": "bbcode",
      "HTML": "Can you give a quick example of the structure of a 'double' attribute?",
      "PostDate": "2012-12-24T13:13:02+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22196",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If I get your question, a double is just a floating point number, like 1.5, 3.14159, or -42.0. That is in contrast to an int, which is just an integer value (like 1, 3, or -42).",
      "EditableFormat": "bbcode",
      "HTML": "If I get your question, a double is just a floating point number, like 1.5, 3.14159, or -42.0. That is in contrast to an int, which is just an integer value (like 1, 3, or -42).",
      "PostDate": "2012-12-24T14:13:33+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22197",
      "UserId": 0,
      "Username": "pzolla",
      "UserAvatar": null,
      "UserGravatar": "7b4b436eab19d6b8493f0483f302d010",
      "EditableText": "[quote=&quot;jaynabonne&quot;:2ulcg7zd]\nNow that we can enumerate the attributes on an object, we can possibly use objects as a more robust (and easier to use!) dictionary. I just realized that instead of a dictionary with doubles, I can use an object with double attributes, and that would save fine, I can enumerate the attributes, and I can much more easily set and retrieve values.\n[/quote:2ulcg7zd]\n\nSorry, I should have quoted the original text.  I was trying to understand what you were referring to in this statement.  I was thinking you were referring to something called a &quot;double attribute&quot; as opposed to an attribute whose value was a 'double' vs. 'int', 'string' etc.\n\nSo you are basically stating that an alternative to a dictionary is to create an object that would act as a surrogate dictionary, set attributes which would act like the index, with the values of the attribute being the equivalent to the values of a dictionary.  Correct?\n\nedit: typo",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite><br/>Now that we can enumerate the attributes on an object, we can possibly use objects as a more robust (and easier to use!) dictionary. I just realized that instead of a dictionary with doubles, I can use an object with double attributes, and that would save fine, I can enumerate the attributes, and I can much more easily set and retrieve values.<br/></blockquote><br/><br/>Sorry, I should have quoted the original text.  I was trying to understand what you were referring to in this statement.  I was thinking you were referring to something called a &quot;double attribute&quot; as opposed to an attribute whose value was a 'double' vs. 'int', 'string' etc.<br/><br/>So you are basically stating that an alternative to a dictionary is to create an object that would act as a surrogate dictionary, set attributes which would act like the index, with the values of the attribute being the equivalent to the values of a dictionary.  Correct?<br/><br/>edit: typo",
      "PostDate": "2012-12-24T14:33:42+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "22198",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Yes, that's what I had in mind. By &quot;double attribute&quot;, I just meant an attribute having a double value (or double &quot;type&quot;). The attribute names would be the same as the dictionary keys, and the attribute values would be the corresponding values. The one piece that was missing pre-5.3 was the ability to enumerate the &quot;keys&quot; (attribute names) of an object.\n\nOf course, using the built-in dictioaries are probably easier and more straightforward in general (e.g. you can just assign on to a variable or object attribute by invoking &quot;NewXXXX&quot;). But it is an option if you want something special - for example, a persistent &quot;dictionary&quot; that doesn't fit the string- or object-dictionary form.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, that's what I had in mind. By &quot;double attribute&quot;, I just meant an attribute having a double value (or double &quot;type&quot;). The attribute names would be the same as the dictionary keys, and the attribute values would be the corresponding values. The one piece that was missing pre-5.3 was the ability to enumerate the &quot;keys&quot; (attribute names) of an object.<br/><br/>Of course, using the built-in dictioaries are probably easier and more straightforward in general (e.g. you can just assign on to a variable or object attribute by invoking &quot;NewXXXX&quot;). But it is an option if you want something special - for example, a persistent &quot;dictionary&quot; that doesn't fit the string- or object-dictionary form.",
      "PostDate": "2012-12-24T15:04:59+00:00",
      "LastEditDate": null
    }
  ]
}
