{
  "Topic": {
    "TopicId": "uqurbtjzfeofqyaf2gw5rq",
    "ForumId": "10",
    "Title": "Creating a function to modify \"opposite\" stats based on a simple line in script.",
    "LastUpdated": "2023-05-10T04:34:14.9039674Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "523528f0-ccbc-491b-b5a7-91bea92e857f",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have created a system of Stats which are used to dramatically alter my game when incorporated with flags, descriptions, and scripts based on growing and changing player perspective.  Using Pixie's CombatLib, I've modified some of the library to help keep the process simpler.  If x flag and object has xdesc for printing descriptions, and the flags can be set or unset depending upon levels of stats and/or choices made in the game.\r\n\r\nThe stats are set up as \"opposites\", so they don't have negatives, but when one reaches zero, the next step down is actually an increase in the opposite stat:\r\n\r\nOpposite stats:\r\n\r\nagility ~ clumsiness\r\nbravery ~ anxiety \r\ncharisma ~ antipathy\r\ncuriosity ~ disregard\r\nintelligence ~ stupidity\r\nselfawareness ~ selfdelusion\r\nstamina ~ unhealth\r\nstealth ~ overtness\r\nstrength ~ weakness\r\ntrust  ~ cynicism\r\nselflessness ~ greed\r\npurity ~ perversion\r\n\r\nPerspective flags are set based on choices in Character Generation and also final selection of one out of many \"key\" objects that allow access to the realms in the game.\r\n\r\n\r\nPerspective flags:\r\nMage                  \r\nWarrior\r\nDiplomat\r\nCollector\r\nNinja\r\nRich\r\nBiblesight\r\nExplorer\r\nTraveler\r\nGoth\r\nCatlover\r\nGender\r\nBornagain\r\nPervert\r\nNight\r\nselfaware\r\nalive\r\ndead\r\npossibly \"Necromancer?\"\r\n\r\nAnyway, I made a function script that doesn't error, but I also haven't gotten it to do what I want when running script on a taken object.\r\n\r\nFunction:\r\n  <function name=\"statchg\" parameters=\"attribute, int, opattribute\"><![CDATA[\r\n    if (attribute = 0) {\r\n      if (opattribute =  0) {\r\n        attribute = attribute +int\r\n      }\r\n      else if (opattribute = int) {\r\n        opattribute = 0\r\n      }\r\n      else if (opattribute > int) {\r\n        opattribute = opattribute -int\r\n      }\r\n      else if (opattribute < int) {\r\n        opattribute = 0\r\n        attribute = attribute +(int - opattribute)\r\n      }\r\n    }\r\n    else if (attribute > 0) {\r\n      attribute = attribute +int\r\n    }\r\n    UpdateStatus\r\n  ]]></function>\r\n\r\nA sample object I made to test the script is:\r\n\r\n    <object name=\"stattester\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <ontake type=\"script\">\r\n        statchg (player.charisma, 2, player.antipathy)\r\n        statchg (player.curiosity, 2, player.disregard)\r\n        statchg (player.stealth, 2, player.overtness)\r\n        statchg (player.agility, 2, player.clumsiness)\r\n        statchg (player.trust, 2, player.cynicism)\r\n      </ontake>\r\n    </object>\r\n\r\nI'm not sure what's missing from the code(s) for this to work.  The list of stats includes all of these already have integers of different values to test their changes (\"opposites\" also have values)\r\n\r\nYet when I take the object, the player stats don't change at all.\r\n\r\nPlease and  thanks for any info/ideas!\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I have created a system of Stats which are used to dramatically alter my game when incorporated with flags, descriptions, and scripts based on growing and changing player perspective.  Using Pixie's CombatLib, I've modified some of the library to help keep the process simpler.  If x flag and object has xdesc for printing descriptions, and the flags can be set or unset depending upon levels of stats and/or choices made in the game.</p>\n<p>The stats are set up as \"opposites\", so they don't have negatives, but when one reaches zero, the next step down is actually an increase in the opposite stat:</p>\n<p>Opposite stats:</p>\n<p>agility ~ clumsiness<br>\nbravery ~ anxiety<br>\ncharisma ~ antipathy<br>\ncuriosity ~ disregard<br>\nintelligence ~ stupidity<br>\nselfawareness ~ selfdelusion<br>\nstamina ~ unhealth<br>\nstealth ~ overtness<br>\nstrength ~ weakness<br>\ntrust  ~ cynicism<br>\nselflessness ~ greed<br>\npurity ~ perversion</p>\n<p>Perspective flags are set based on choices in Character Generation and also final selection of one out of many \"key\" objects that allow access to the realms in the game.</p>\n<p>Perspective flags:<br>\nMage<br>\nWarrior<br>\nDiplomat<br>\nCollector<br>\nNinja<br>\nRich<br>\nBiblesight<br>\nExplorer<br>\nTraveler<br>\nGoth<br>\nCatlover<br>\nGender<br>\nBornagain<br>\nPervert<br>\nNight<br>\nselfaware<br>\nalive<br>\ndead<br>\npossibly \"Necromancer?\"</p>\n<p>Anyway, I made a function script that doesn't error, but I also haven't gotten it to do what I want when running script on a taken object.</p>\n<p>Function:<br>\n</p>\n<p>A sample object I made to test the script is:</p>\n<pre><code>&lt;object name=\"stattester\"&gt;\n  &lt;inherit name=\"editor_object\" /&gt;\n  &lt;take /&gt;\n  &lt;ontake type=\"script\"&gt;\n    statchg (player.charisma, 2, player.antipathy)\n    statchg (player.curiosity, 2, player.disregard)\n    statchg (player.stealth, 2, player.overtness)\n    statchg (player.agility, 2, player.clumsiness)\n    statchg (player.trust, 2, player.cynicism)\n  &lt;/ontake&gt;\n&lt;/object&gt;\n</code></pre>\n<p>I'm not sure what's missing from the code(s) for this to work.  The list of stats includes all of these already have integers of different values to test their changes (\"opposites\" also have values)</p>\n<p>Yet when I take the object, the player stats don't change at all.</p>\n<p>Please and  thanks for any info/ideas!</p>\n\n",
      "PostDate": "2023-05-10T04:34:14.9039674Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09642783-f35a-4c83-ab86-3303a854b745",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, don't know why the function didn't paste over:\r\n\r\n  function name=\"statchg\" parameters=\"attribute, int, opattribute\"><![CDATA[\r\n    if (attribute = 0) {\r\n      if (opattribute =  0) {\r\n        attribute = attribute +int\r\n      }\r\n      else if (opattribute = int) {\r\n        opattribute = 0\r\n      }\r\n      else if (opattribute > int) {\r\n        opattribute = opattribute -int\r\n      }\r\n      else if (opattribute < int) {\r\n        opattribute = 0\r\n        attribute = attribute +(int - opattribute)\r\n      }\r\n    }\r\n    else if (attribute > 0) {\r\n      attribute = attribute +int\r\n    }\r\n    UpdateStatus\r\n\r\ntrying without the closing line in case the browser/gui doesn't like complete functions. and now trying without opening less-than",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, don't know why the function didn't paste over:</p>\n<p>function name=\"statchg\" parameters=\"attribute, int, opattribute\"&gt;&lt;![CDATA[<br>\nif (attribute = 0) {<br>\nif (opattribute =  0) {<br>\nattribute = attribute +int<br>\n}<br>\nelse if (opattribute = int) {<br>\nopattribute = 0<br>\n}<br>\nelse if (opattribute &gt; int) {<br>\nopattribute = opattribute -int<br>\n}<br>\nelse if (opattribute &lt; int) {<br>\nopattribute = 0<br>\nattribute = attribute +(int - opattribute)<br>\n}<br>\n}<br>\nelse if (attribute &gt; 0) {<br>\nattribute = attribute +int<br>\n}<br>\nUpdateStatus</p>\n<p>trying without the closing line in case the browser/gui doesn't like complete functions. and now trying without opening less-than</p>\n\n",
      "PostDate": "2023-05-10T04:38:03.7009552Z",
      "LastEditDate": "2023-05-10T04:39:54.6612713Z",
      "link": null
    },
    {
      "PostId": "679f90af-84d1-498f-add0-e97eae6e214a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Function parameters are passed by value.\r\n\r\nWhen you call:\r\n```\r\nstatchg (player.charisma, 2, player.antipathy)\r\n```\r\nQuest looks up the current value of `player.charisma`, the number `2` , and the current value of `player.antipathy`. Those 3 *numbers* are passed into the function.\r\n\r\nThe function then creates 3 new variables named `attribute`, `int`, and `opattribute`, whose initial values are the 3 numbers it was passed. Those variables are *local*: they only exist within the function, and are discarded when it finishes. The function does not know which attribute those values came from.\r\n\r\nIf you want the function to edit the original attribute, you need to pass in the name of the attribute.",
      "EditableFormat": "markdown",
      "HTML": "<p>Function parameters are passed by value.</p>\n<p>When you call:</p>\n<pre><code>statchg (player.charisma, 2, player.antipathy)\n</code></pre>\n<p>Quest looks up the current value of <code>player.charisma</code>, the number <code>2</code> , and the current value of <code>player.antipathy</code>. Those 3 <em>numbers</em> are passed into the function.</p>\n<p>The function then creates 3 new variables named <code>attribute</code>, <code>int</code>, and <code>opattribute</code>, whose initial values are the 3 numbers it was passed. Those variables are <em>local</em>: they only exist within the function, and are discarded when it finishes. The function does not know which attribute those values came from.</p>\n<p>If you want the function to edit the original attribute, you need to pass in the name of the attribute.</p>\n\n",
      "PostDate": "2023-05-10T06:26:56.7909115Z",
      "LastEditDate": "2023-05-10T06:27:24.140959Z",
      "link": null
    },
    {
      "PostId": "642edeb4-5df4-4684-a46b-af074205e668",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> trying without the closing line in case the browser/gui doesn't like complete functions. and now trying without opening less-than\r\n\r\nYou need to put a line of three backticks (<code>```</code>) above and below the function. You did this for one function in your first post, but not the other.\r\n\r\n> Yet when I take the object, the player stats don't change at all.\r\n\r\nI think what you mean is something like:\r\n\r\n```\r\n<function name=\"statchg\" parameters=\"attrname, i, oppname\"><![CDATA[\r\n  attrval = GetInt (player, attrname)\r\n  oppval = GetInt (player, oppname)\r\n  if (attrval = 0) {\r\n    if (oppval = 0) {\r\n      attrval = attrval + i\r\n    }\r\n    else if (oppval = i) {\r\n      oppval = 0\r\n    }\r\n    else if (oppval > i) {\r\n      oppval = oppval - i\r\n    }\r\n    else if (oppval < i) {\r\n      oppval = 0\r\n      attrval = attrval + (i - oppval)\r\n    }\r\n  }\r\n  else if (attrval > 0) {\r\n    attrval = attrval + i\r\n  }\r\n  set (player, attrname, attrval)\r\n  set (player, oppname, oppval)\r\n  UpdateStatus\r\n</function>\r\n```\r\nFor this logic, my first thought was that you were trying to make it so that if the stat is negative, it goes into the \"opposite\" stat instead, in which case it would be easier to work using a temporary variable which is allowed to be negative. Like this:\r\n```\r\n<function name=\"statchg\" parameters=\"attr, i, opposite\"><![CDATA[\r\n  value = GetInt (player, attr) - GetInt (player, opposite) + i\r\n  if (value > 0) {\r\n    set (player, attr, value)\r\n    set (player, opposite, 0)\r\n  }\r\n  else {\r\n    set (player, attr, 0)\r\n    set (player, opposite, -value)\r\n  }\r\n  UpdateStatus\r\n</function>\r\n```\r\nWas that your intention?\r\n\r\nBoth of these would be called using the *name* of the attributes to change. For example:\r\n```\r\nstatchg (\"charisma\", 2, \"antipathy\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>trying without the closing line in case the browser/gui doesn't like complete functions. and now trying without opening less-than</p>\n</blockquote>\n<p>You need to put a line of three backticks (<code>```</code>) above and below the function. You did this for one function in your first post, but not the other.</p>\n<blockquote>\n<p>Yet when I take the object, the player stats don't change at all.</p>\n</blockquote>\n<p>I think what you mean is something like:</p>\n<pre><code>&lt;function name=\"statchg\" parameters=\"attrname, i, oppname\"&gt;&lt;![CDATA[\n  attrval = GetInt (player, attrname)\n  oppval = GetInt (player, oppname)\n  if (attrval = 0) {\n    if (oppval = 0) {\n      attrval = attrval + i\n    }\n    else if (oppval = i) {\n      oppval = 0\n    }\n    else if (oppval &gt; i) {\n      oppval = oppval - i\n    }\n    else if (oppval &lt; i) {\n      oppval = 0\n      attrval = attrval + (i - oppval)\n    }\n  }\n  else if (attrval &gt; 0) {\n    attrval = attrval + i\n  }\n  set (player, attrname, attrval)\n  set (player, oppname, oppval)\n  UpdateStatus\n&lt;/function&gt;\n</code></pre>\n<p>For this logic, my first thought was that you were trying to make it so that if the stat is negative, it goes into the \"opposite\" stat instead, in which case it would be easier to work using a temporary variable which is allowed to be negative. Like this:</p>\n<pre><code>&lt;function name=\"statchg\" parameters=\"attr, i, opposite\"&gt;&lt;![CDATA[\n  value = GetInt (player, attr) - GetInt (player, opposite) + i\n  if (value &gt; 0) {\n    set (player, attr, value)\n    set (player, opposite, 0)\n  }\n  else {\n    set (player, attr, 0)\n    set (player, opposite, -value)\n  }\n  UpdateStatus\n&lt;/function&gt;\n</code></pre>\n<p>Was that your intention?</p>\n<p>Both of these would be called using the <em>name</em> of the attributes to change. For example:</p>\n<pre><code>statchg (\"charisma\", 2, \"antipathy\")\n</code></pre>\n\n",
      "PostDate": "2023-05-10T06:59:20.1647541Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bc7ec829-dad5-440b-86ae-2196fce8356d",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mr. Angel!\r\n\r\nThank you for the clarity!  The \"working with functions\" tutorials that look like they'd get more specific are the ones that seem to be missing or links redirected to general menus.  \r\n\r\nYou are astute.  Yes, rather than having positive and negative greed values, and merely adding or subtracting integers from my stats, I want it set up so that bringing a stat \"past\" zero via subtracting actually keeps the stat at zero and adds remaining points to the \"opposite\" stat.  And then also checking that When I add value to a stat that's at zero, the \"opposite\" stat is subtracted from down to zero first before the remaining value is actually added to the target stat... I can't remember off-hand, but I think I still had planned to have to work that bit of math in, or thought it might have to go into a separate function.\r\n\r\nI'll take the knowledge you just gave me and work with it (if it's not actually already the perfect solution) to see what I can come up with.  I hadn't seen that the function is only taking the values of the attributes and not actually \"recognizing\" which attributes they are and then applying the new values at the end.  Your code looks (at first glance to a novice) as if you both understood what I was doing and made it work, and understood how functions work better than I did.\r\n\r\nThank you again!  And thanks for being here for folks in the forum and for your super prompt response!",
      "EditableFormat": "markdown",
      "HTML": "<p>Mr. Angel!</p>\n<p>Thank you for the clarity!  The \"working with functions\" tutorials that look like they'd get more specific are the ones that seem to be missing or links redirected to general menus.</p>\n<p>You are astute.  Yes, rather than having positive and negative greed values, and merely adding or subtracting integers from my stats, I want it set up so that bringing a stat \"past\" zero via subtracting actually keeps the stat at zero and adds remaining points to the \"opposite\" stat.  And then also checking that When I add value to a stat that's at zero, the \"opposite\" stat is subtracted from down to zero first before the remaining value is actually added to the target stat... I can't remember off-hand, but I think I still had planned to have to work that bit of math in, or thought it might have to go into a separate function.</p>\n<p>I'll take the knowledge you just gave me and work with it (if it's not actually already the perfect solution) to see what I can come up with.  I hadn't seen that the function is only taking the values of the attributes and not actually \"recognizing\" which attributes they are and then applying the new values at the end.  Your code looks (at first glance to a novice) as if you both understood what I was doing and made it work, and understood how functions work better than I did.</p>\n<p>Thank you again!  And thanks for being here for folks in the forum and for your super prompt response!</p>\n\n",
      "PostDate": "2023-05-10T17:01:23.2648575Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "353967de-4d83-4c91-99c5-375fa3ac68ce",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, finally had a mo to try these codes out, and it looks like both failed for essentially the same reason, but I'm not precisely sure on what that reason is.  Is it that the function still isn't reading the input from taking the \"stat tester\" object above?\r\n\r\nstatchg (player.charisma, 2, player.antipathy) \r\n\r\nAs an example of one of the five sets of attributes, run through your first suggestion errors as:\r\n\r\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'\r\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'\r\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'\r\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'\r\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'\r\n\r\nand through the second script errors as:\r\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'\r\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'\r\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'\r\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'\r\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'\r\n\r\nTrying with just the attribute names, but not player:\r\n\r\nstatchg (charisma, 2, antipathy)\r\nstatchg (curiosity, 2, disregard)\r\nstatchg (stealth, 2, overtness)\r\nstatchg (agility, 2, clumsiness)\r\nstatchg (trust, 2, cynicism)\r\n\r\nin both the first and second function throws:\r\n\r\nError running script: Error compiling expression 'charisma': Unknown object or variable 'charisma'\r\n\r\nWhich would make me think that the \"player.\" needs to be added back in so it knows the \"object\" where the attribute is found... but we already saw the error that leads to.\r\n\r\nExperimenting a bit, but I'll thank you for any help!\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, finally had a mo to try these codes out, and it looks like both failed for essentially the same reason, but I'm not precisely sure on what that reason is.  Is it that the function still isn't reading the input from taking the \"stat tester\" object above?</p>\n<p>statchg (player.charisma, 2, player.antipathy)</p>\n<p>As an example of one of the five sets of attributes, run through your first suggestion errors as:</p>\n<p>Error running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'<br>\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'<br>\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'<br>\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'<br>\nError running script: Error compiling expression 'GetInt (player, attrname)': FunctionCallElement: Could find not function 'GetInt(Element, Int32)'</p>\n<p>and through the second script errors as:<br>\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'<br>\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'<br>\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'<br>\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'<br>\nError running script: Error compiling expression 'GetInt (player, attr) - GetInt (player, opposite) + i': Unknown object or variable 'attr'</p>\n<p>Trying with just the attribute names, but not player:</p>\n<p>statchg (charisma, 2, antipathy)<br>\nstatchg (curiosity, 2, disregard)<br>\nstatchg (stealth, 2, overtness)<br>\nstatchg (agility, 2, clumsiness)<br>\nstatchg (trust, 2, cynicism)</p>\n<p>in both the first and second function throws:</p>\n<p>Error running script: Error compiling expression 'charisma': Unknown object or variable 'charisma'</p>\n<p>Which would make me think that the \"player.\" needs to be added back in so it knows the \"object\" where the attribute is found... but we already saw the error that leads to.</p>\n<p>Experimenting a bit, but I'll thank you for any help!</p>\n\n",
      "PostDate": "2023-05-11T03:26:54.9039986Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "31d92bb5-0542-4471-bf69-e3768a421203",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Tried changing the input to this with or without space between \"GetName\" and the parenthesis and quest wouldn't read either to create the script for passing into the function.\r\n\r\nstatchg (GetName(player.charisma), 2, (GetName(player.antipathy))\r\nstatchg (GetName(player.curiosity), 2, GetName(player.disregard))\r\nstatchg (GetName(player.stealth), 2, GetName(player.overtness))\r\nstatchg (GetName(player.agility), 2, GetName(player.clumsiness))\r\nstatchg (GetName(player.trust), 2, GetName(player.cynicism))",
      "EditableFormat": "markdown",
      "HTML": "<p>Tried changing the input to this with or without space between \"GetName\" and the parenthesis and quest wouldn't read either to create the script for passing into the function.</p>\n<p>statchg (GetName(player.charisma), 2, (GetName(player.antipathy))<br>\nstatchg (GetName(player.curiosity), 2, GetName(player.disregard))<br>\nstatchg (GetName(player.stealth), 2, GetName(player.overtness))<br>\nstatchg (GetName(player.agility), 2, GetName(player.clumsiness))<br>\nstatchg (GetName(player.trust), 2, GetName(player.cynicism))</p>\n\n",
      "PostDate": "2023-05-11T03:46:00.0754452Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d69c071-f2b7-471d-9e4f-fe01c6068140",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm trying to figure out the way you mentioned of \"passing the attribute name\" instead of the value through the function.  I had imagined that your scripts handled that.   \r\n\r\nI could figure out a complicated script with a bunch of ifs, and just substitute the attributes each time depending on which ones I wanted to modify... but the whole goal was to put the heavy work into the function and have something simpler to put in the scripts on the objects.\r\n\r\nBefore I got the idea of the \"opposites\" I was putting in each circumstance something like \r\nplayer.charisma = player.charisma +1\r\nplayer.greed = player.greed = +2\r\nplayer.stealth = player.stealth -2\r\n\r\nbut then I realized I could have all attributes that kept positive values by completing pairs of opposites, and hopefully also create a function that would keep things pretty simple on the triggering end.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm trying to figure out the way you mentioned of \"passing the attribute name\" instead of the value through the function.  I had imagined that your scripts handled that.</p>\n<p>I could figure out a complicated script with a bunch of ifs, and just substitute the attributes each time depending on which ones I wanted to modify... but the whole goal was to put the heavy work into the function and have something simpler to put in the scripts on the objects.</p>\n<p>Before I got the idea of the \"opposites\" I was putting in each circumstance something like<br>\nplayer.charisma = player.charisma +1<br>\nplayer.greed = player.greed = +2<br>\nplayer.stealth = player.stealth -2</p>\n<p>but then I realized I could have all attributes that kept positive values by completing pairs of opposites, and hopefully also create a function that would keep things pretty simple on the triggering end.</p>\n\n",
      "PostDate": "2023-05-11T04:08:11.2827139Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9312cf89-94e0-4dc3-81a7-d9c056558a34",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> `statchg (player.charisma, 2, player.antipathy)`\r\n\r\nIf you do this, you are passing the value of the attribute. The function expects the name of the attribute, so this doesn't work.\r\n\r\n> `statchg (charisma, 2, antipathy)`\r\n\r\nIn this case, you are trying to pass the value of local variables called `charisma` and `antipathy`. You get an error because those variables don't exist.\r\n\r\n> `statchg (GetName(player.charisma), 2, (GetName(player.antipathy))`\r\n\r\nThat's a good thought; but there is no function `GetName` that does this. It is not possible to look at a number and work out which attribute it came from. You need to just give the function the name, and let it look up the value.\r\n\r\n> Which would make me think that the \"player.\" needs to be added back in so it knows the \"object\" where the attribute is found\r\n\r\nThe function I gave already knows that the string it receives is the name of an attribute of the `player` object. It uses the expression `GetInt (player, attr)` to get the value of an integer attribute of the `player` object whose name is in the string variable `attr`.\r\n\r\n> I'm trying to figure out the way you mentioned of \"passing the attribute name\" instead of the value through the function. I had imagined that your scripts handled that.\r\n\r\nThe example I gave was:\r\n<code style=\"color: green\">statchg (\"charisma\", 2, \"antipathy\")</code>\r\n\r\nNote that there are quotes (`\"`) around the word charisma, telling Quest to treat it as text, rather than the name of a variable or function.\r\n\r\nThis is what the function I gave you expects: the name of the attribute, rather than the value of it.\r\n\r\n\r\n> but then I realized I could have all attributes that kept positive values by completing pairs of opposites, and hopefully also create a function that would keep things pretty simple on the triggering end.\r\n\r\nUsing a feature called \"changescripts\", you could make it so that code like `player.charisma = player.charisma - 3` automatically calls a function in the background. But I would say that is a fairly advanced topic (and it's quite easy to crash the game with an error in a changescript, which makes them hard to debug). So probably better to stick to functions for now.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><code>statchg (player.charisma, 2, player.antipathy)</code></p>\n</blockquote>\n<p>If you do this, you are passing the value of the attribute. The function expects the name of the attribute, so this doesn't work.</p>\n<blockquote>\n<p><code>statchg (charisma, 2, antipathy)</code></p>\n</blockquote>\n<p>In this case, you are trying to pass the value of local variables called <code>charisma</code> and <code>antipathy</code>. You get an error because those variables don't exist.</p>\n<blockquote>\n<p><code>statchg (GetName(player.charisma), 2, (GetName(player.antipathy))</code></p>\n</blockquote>\n<p>That's a good thought; but there is no function <code>GetName</code> that does this. It is not possible to look at a number and work out which attribute it came from. You need to just give the function the name, and let it look up the value.</p>\n<blockquote>\n<p>Which would make me think that the \"player.\" needs to be added back in so it knows the \"object\" where the attribute is found</p>\n</blockquote>\n<p>The function I gave already knows that the string it receives is the name of an attribute of the <code>player</code> object. It uses the expression <code>GetInt (player, attr)</code> to get the value of an integer attribute of the <code>player</code> object whose name is in the string variable <code>attr</code>.</p>\n<blockquote>\n<p>I'm trying to figure out the way you mentioned of \"passing the attribute name\" instead of the value through the function. I had imagined that your scripts handled that.</p>\n</blockquote>\n<p>The example I gave was:<br>\n<code style=\"color: green\">statchg (\"charisma\", 2, \"antipathy\")</code></p>\n<p>Note that there are quotes (<code>\"</code>) around the word charisma, telling Quest to treat it as text, rather than the name of a variable or function.</p>\n<p>This is what the function I gave you expects: the name of the attribute, rather than the value of it.</p>\n<blockquote>\n<p>but then I realized I could have all attributes that kept positive values by completing pairs of opposites, and hopefully also create a function that would keep things pretty simple on the triggering end.</p>\n</blockquote>\n<p>Using a feature called \"changescripts\", you could make it so that code like <code>player.charisma = player.charisma - 3</code> automatically calls a function in the background. But I would say that is a fairly advanced topic (and it's quite easy to crash the game with an error in a changescript, which makes them hard to debug). So probably better to stick to functions for now.</p>\n\n",
      "PostDate": "2023-05-11T09:45:11.3980659Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d6961b15-80e8-4da9-bce9-9a854326d705",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you again Mr. Angel!  Ok, so I was missing the Quotation marks.  I'm starting to learn about how to use the functions from you!  \r\nMaybe you should make a little tutorial or documentation on these things for us? \r\n\r\nSo quotes as input into the function tells the function that we're sending text, not interpreting the value of something!  I'm definitely saving that important bit in my notes!\r\n\r\nThank  you again, going to try it with the quotes now!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you again Mr. Angel!  Ok, so I was missing the Quotation marks.  I'm starting to learn about how to use the functions from you!<br>\nMaybe you should make a little tutorial or documentation on these things for us?</p>\n<p>So quotes as input into the function tells the function that we're sending text, not interpreting the value of something!  I'm definitely saving that important bit in my notes!</p>\n<p>Thank  you again, going to try it with the quotes now!</p>\n\n",
      "PostDate": "2023-05-12T01:51:25.5574175Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2b9c5d6-3fbe-4932-9517-00e71ddcf393",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It works perfectly as imagined, thank you Mr. Angel for teaching me about functions!\r\n\r\nThe only slight change I had to make was because a little bit of the original math was foolish human math.\r\n\r\n    else if (oppval < i) {\r\n      oppval = 0\r\n      attrval = attrval + (i - oppval)\r\n\r\nThat doesn't work, because I zeroed the oppval before adding to the attrval!  That's how we'd normally do it in our minds \"first we add the stuff to the negative and make it zero, then put the remainder onto the positive value.  but the function obviously added zero to the equation \"i-oppval\".  The current Oppval after zeroing, not the original Oppval held in a short-term memory somewhere!\r\n\r\nFixing it was as simple as moving the last bit before the bit above it!\r\n\r\nThanks again!  You're an awesome resource Mr. Angel!  \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>It works perfectly as imagined, thank you Mr. Angel for teaching me about functions!</p>\n<p>The only slight change I had to make was because a little bit of the original math was foolish human math.</p>\n<pre><code>else if (oppval &lt; i) {\n  oppval = 0\n  attrval = attrval + (i - oppval)\n</code></pre>\n<p>That doesn't work, because I zeroed the oppval before adding to the attrval!  That's how we'd normally do it in our minds \"first we add the stuff to the negative and make it zero, then put the remainder onto the positive value.  but the function obviously added zero to the equation \"i-oppval\".  The current Oppval after zeroing, not the original Oppval held in a short-term memory somewhere!</p>\n<p>Fixing it was as simple as moving the last bit before the bit above it!</p>\n<p>Thanks again!  You're an awesome resource Mr. Angel!</p>\n\n",
      "PostDate": "2023-05-12T02:20:36.1652307Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "74bdb8c8-a3b3-4325-8169-cdcd4bbdcba8",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "smh.  I made the new function \"statchgup\" because it worked for adding positives to the system and began work on a \"statchgdn\" for subtracting (adding negatives) to the system.  Got it to about half-work, then remembered \"Wait, Mr. Angel made a second version of the function to try too!\"\r\n\r\nYour second version works perfectly and required no revision. Not to mention being shorter and cleaner.\r\n\r\nYou're a coding genius, Mr. Angel.",
      "EditableFormat": "markdown",
      "HTML": "<p>smh.  I made the new function \"statchgup\" because it worked for adding positives to the system and began work on a \"statchgdn\" for subtracting (adding negatives) to the system.  Got it to about half-work, then remembered \"Wait, Mr. Angel made a second version of the function to try too!\"</p>\n<p>Your second version works perfectly and required no revision. Not to mention being shorter and cleaner.</p>\n<p>You're a coding genius, Mr. Angel.</p>\n\n",
      "PostDate": "2023-05-12T03:55:53.1480633Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "473ff330-1c74-4bd8-8118-75c3745272d8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> smh. I made the new function \"statchgup\" because it worked for adding positives to the system and began work on a \"statchgdn\" for subtracting (adding negatives) to the system.\r\n\r\nI was kind of wondering whether you were only intending to use it one way; or whether that was an oversight.\r\n\r\nAlthough… I don't think a second function would actually be necessary. With the version I wrote, these two have the same effect:\r\n\r\n* `statchg (\"strength\", -2, \"weakness\")`\r\n* `statchg (\"weakness\", 2, \"strength\")`\r\n\r\nInteresting different way to look at the stats.\r\n\r\n(This reminds me of a tabletop RPG system I used many years ago, which also had negative stats… but they didn't act as negatives in that one. Somebody with strength 1/weakness 0 would be pretty average and unremarkable, while someone with strength 8/weakness 8 would never fail to open a heavy door, but would have a very high chance of suffering an injury in the process)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>smh. I made the new function \"statchgup\" because it worked for adding positives to the system and began work on a \"statchgdn\" for subtracting (adding negatives) to the system.</p>\n</blockquote>\n<p>I was kind of wondering whether you were only intending to use it one way; or whether that was an oversight.</p>\n<p>Although… I don't think a second function would actually be necessary. With the version I wrote, these two have the same effect:</p>\n<ul>\n<li><code>statchg (\"strength\", -2, \"weakness\")</code></li>\n<li><code>statchg (\"weakness\", 2, \"strength\")</code></li>\n</ul>\n<p>Interesting different way to look at the stats.</p>\n<p>(This reminds me of a tabletop RPG system I used many years ago, which also had negative stats… but they didn't act as negatives in that one. Somebody with strength 1/weakness 0 would be pretty average and unremarkable, while someone with strength 8/weakness 8 would never fail to open a heavy door, but would have a very high chance of suffering an injury in the process)</p>\n\n",
      "PostDate": "2023-05-12T07:19:35.4166385Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e665cfc8-1ca5-49fa-847f-db9d66f48de0",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very interesting! idea with the \"opposite\" stats Mr. Angel.  It sounds like it would be a fun play.\r\n\r\nYou know, I didn't stop to think about the negation being commutative like that in the formula!  Makes perfect sense.  Sometimes I get a little hung up in the brain with negation.\r\n\r\nI like your second formula much better though.  Very clean and neat.",
      "EditableFormat": "markdown",
      "HTML": "<p>Very interesting! idea with the \"opposite\" stats Mr. Angel.  It sounds like it would be a fun play.</p>\n<p>You know, I didn't stop to think about the negation being commutative like that in the formula!  Makes perfect sense.  Sometimes I get a little hung up in the brain with negation.</p>\n<p>I like your second formula much better though.  Very clean and neat.</p>\n\n",
      "PostDate": "2023-05-12T18:52:35.3688861Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dc419e44-bdab-479e-b288-28b3acf547fe",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "As I enter the changes in stats using the new, I'm now wondering if there's an even more complex function I can make that could allow the input to be as simple as:\r\n\r\nstatchg (\"perversion\", +2)\r\n\r\nIs there a way to allow a function to look up a dictionary or something that has the opposite stats all predefined?  That way it would know to do all that math and checking with the other stat even with the input from the script giving just the one stat?\r\n\r\nI guess I'm now looking for a \"functions in Quest\" tutor haha.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>As I enter the changes in stats using the new, I'm now wondering if there's an even more complex function I can make that could allow the input to be as simple as:</p>\n<p>statchg (\"perversion\", +2)</p>\n<p>Is there a way to allow a function to look up a dictionary or something that has the opposite stats all predefined?  That way it would know to do all that math and checking with the other stat even with the input from the script giving just the one stat?</p>\n<p>I guess I'm now looking for a \"functions in Quest\" tutor haha.</p>\n\n",
      "PostDate": "2023-05-12T19:36:57.8729658Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e62a455-23e7-4621-b8ea-3dad935f9caf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Is there a way to allow a function to look up a dictionary or something that has the opposite stats all predefined?\r\n\r\nI was thinking about that.\r\nOne way would be to have a stringdictionary attribute; `game.stat_opposites` or something, where the key is a stat and the value is its opposite. Then you could just change the function as:\r\n```\r\n<function name=\"statchg\" parameters=\"attrname, i\"><![CDATA[\r\n  oppname = DictionaryItem (game.stat_opposites, attrname)\r\n  attrval = GetInt (player, attrname)\r\n```\r\nand then continue as before.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is there a way to allow a function to look up a dictionary or something that has the opposite stats all predefined?</p>\n</blockquote>\n<p>I was thinking about that.<br>\nOne way would be to have a stringdictionary attribute; <code>game.stat_opposites</code> or something, where the key is a stat and the value is its opposite. Then you could just change the function as:</p>\n<pre><code>&lt;function name=\"statchg\" parameters=\"attrname, i\"&gt;&lt;![CDATA[\n  oppname = DictionaryItem (game.stat_opposites, attrname)\n  attrval = GetInt (player, attrname)\n</code></pre>\n<p>and then continue as before.</p>\n\n",
      "PostDate": "2023-05-12T20:03:57.8703795Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "06d9696c-66dd-4e89-858b-c462afb6da9e",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Simple and yet awesomely affective.\r\nSo, if I understand correctly, for the function to work well, I'd have to have something like:\r\n\r\nKey: selflessness value: greed\r\nKey: greed value: selflessness\r\n\r\nEtc.\r\n\r\nWhere each individual stat is defined by its opposite.  I'm going to attempt to make and implement it now!",
      "EditableFormat": "markdown",
      "HTML": "<p>Simple and yet awesomely affective.<br>\nSo, if I understand correctly, for the function to work well, I'd have to have something like:</p>\n<p>Key: selflessness value: greed<br>\nKey: greed value: selflessness</p>\n<p>Etc.</p>\n<p>Where each individual stat is defined by its opposite.  I'm going to attempt to make and implement it now!</p>\n\n",
      "PostDate": "2023-05-12T21:15:31.5083015Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b5abbff9-7e28-4c1b-a144-d47fa5ac8a1e",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "so modified for the second function you gave, I have:\r\n\r\nopposite = DictionaryItem (game.stat_opposites, attrname)\r\nvalue = GetInt (player, attr) - GetInt (player, opposite) + i\r\nif (value > 0) {\r\n  set (player, attr, value)\r\n  set (player, opposite, 0)\r\n}\r\nelse {\r\n  set (player, attr, 0)\r\n  set (player, opposite, -value)\r\n}\r\nUpdateStatus",
      "EditableFormat": "markdown",
      "HTML": "<p>so modified for the second function you gave, I have:</p>\n<p>opposite = DictionaryItem (game.stat_opposites, attrname)<br>\nvalue = GetInt (player, attr) - GetInt (player, opposite) + i<br>\nif (value &gt; 0) {<br>\nset (player, attr, value)<br>\nset (player, opposite, 0)<br>\n}<br>\nelse {<br>\nset (player, attr, 0)<br>\nset (player, opposite, -value)<br>\n}<br>\nUpdateStatus</p>\n\n",
      "PostDate": "2023-05-12T21:23:04.2688776Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80f47a5d-9226-40b0-8136-b76c1af93179",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "works beautifully, but I had to change it ever so slightly more than just above.\r\n\r\nI decided to put the string dictionary on the player, because I haven't been using game.pov for these.  I'm thinking if I do have changes of pov, I'll also have different stats and different perspective flags and descripton scripts for those.\r\n\r\nSo I put the dictionary on the player and also had to change attrname to attr because I'm using your second suggested function.\r\n\r\nopposite = DictionaryItem (player.stat_opposites, attr)\r\nvalue = GetInt (player, attr) - GetInt (player, opposite) + i\r\nif (value > 0) {\r\n  set (player, attr, value)\r\n  set (player, opposite, 0)\r\n}\r\nelse {\r\n  set (player, attr, 0)\r\n  set (player, opposite, -value)\r\n}\r\nUpdateStatus\r\n\r\na tidy solution which makes it easy to modify this complex stat system with simple script.\r\n\r\nAs always, thanks again mrangel",
      "EditableFormat": "markdown",
      "HTML": "<p>works beautifully, but I had to change it ever so slightly more than just above.</p>\n<p>I decided to put the string dictionary on the player, because I haven't been using game.pov for these.  I'm thinking if I do have changes of pov, I'll also have different stats and different perspective flags and descripton scripts for those.</p>\n<p>So I put the dictionary on the player and also had to change attrname to attr because I'm using your second suggested function.</p>\n<p>opposite = DictionaryItem (player.stat_opposites, attr)<br>\nvalue = GetInt (player, attr) - GetInt (player, opposite) + i<br>\nif (value &gt; 0) {<br>\nset (player, attr, value)<br>\nset (player, opposite, 0)<br>\n}<br>\nelse {<br>\nset (player, attr, 0)<br>\nset (player, opposite, -value)<br>\n}<br>\nUpdateStatus</p>\n<p>a tidy solution which makes it easy to modify this complex stat system with simple script.</p>\n<p>As always, thanks again mrangel</p>\n\n",
      "PostDate": "2023-05-12T21:49:58.7936659Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2588679a-7b60-427a-b893-0092ca19abdd",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/HiZKEtPb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Kinda late here, and didn't read most of the comments... but\r\nWhy have 2 attributes: agility ~ clumsiness\r\nwhen you can just use agility...\r\nbut adjust the values from positive to negative...\r\nIE: if agility is +5, then you are agile, but...\r\nif agility is -5, then you are clumsy...\r\nThis sounds much more simple to me...\r\n(I'm checking back through the comments now...)",
      "EditableFormat": "markdown",
      "HTML": "<p>Kinda late here, and didn't read most of the comments... but<br>\nWhy have 2 attributes: agility ~ clumsiness<br>\nwhen you can just use agility...<br>\nbut adjust the values from positive to negative...<br>\nIE: if agility is +5, then you are agile, but...<br>\nif agility is -5, then you are clumsy...<br>\nThis sounds much more simple to me...<br>\n(I'm checking back through the comments now...)</p>\n\n",
      "PostDate": "2023-05-13T02:05:04.4650622Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d6b8420d-a4c9-4c36-9ffd-6ad5ae048945",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's an alternate version; without the function.\r\n\r\nYou could give the player a script attribute named `changedstrength` with code like:\r\n```\r\nif (not this.strength = 0) {\r\n  value = this.strength\r\n  if (not this.weakness = 0) {\r\n    value = value - this.weakness\r\n  }\r\n  if (value > 0) {\r\n    this.weakness = 0\r\n    this strength = value\r\n  }\r\n  else {\r\n    this.strength = 0\r\n    this.weakness = -value\r\n  }\r\n}\r\n```\r\n(off the top of my head… I might have made some careless error there)\r\n\r\nIf you do this for all the attributes (including the negative ones) then you can just change values with something like:\r\n```\r\nplayer.strength = player.strength - 3\r\n```\r\nand it will automatically redirect the points into weakness if necessary.\r\n\r\n<hr style=\"border-top: 1px dotted blue\"/>\r\n\r\n@DarkLizerd\r\n> when you can just use agility...\r\nbut adjust the values from positive to negative...\r\n\r\nI assume it's a look-and-feel thing. Mathematically it's equivalent; but it can give different player experience. Like how a stat from 1-100 feels different from a stat that goes 0-10 with one decimal place, even though they're the same numbers behind the scenes.",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's an alternate version; without the function.</p>\n<p>You could give the player a script attribute named <code>changedstrength</code> with code like:</p>\n<pre><code>if (not this.strength = 0) {\n  value = this.strength\n  if (not this.weakness = 0) {\n    value = value - this.weakness\n  }\n  if (value &gt; 0) {\n    this.weakness = 0\n    this strength = value\n  }\n  else {\n    this.strength = 0\n    this.weakness = -value\n  }\n}\n</code></pre>\n<p>(off the top of my head… I might have made some careless error there)</p>\n<p>If you do this for all the attributes (including the negative ones) then you can just change values with something like:</p>\n<pre><code>player.strength = player.strength - 3\n</code></pre>\n<p>and it will automatically redirect the points into weakness if necessary.</p>\n<hr style=\"border-top: 1px dotted blue\">\n<p>@DarkLizerd</p>\n<blockquote>\n<p>when you can just use agility...<br>\nbut adjust the values from positive to negative...</p>\n</blockquote>\n<p>I assume it's a look-and-feel thing. Mathematically it's equivalent; but it can give different player experience. Like how a stat from 1-100 feels different from a stat that goes 0-10 with one decimal place, even though they're the same numbers behind the scenes.</p>\n\n",
      "PostDate": "2023-05-13T14:06:33.078055Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9ad93e84-6235-448f-86df-59d68b06f98b",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes @Darklizerd!  That's the idea.  I want the \"Ninja,\" the \"Rich,\" and maybe the Necromancer characters to have \"Greed\" and \"Cynicism\"  rather than \"negative Selflessness\" and \"negative trust\" stats. And the \"Born again\" to be dealing with \"Selflessness\" and \"Purity\" rather than \"negative Greed\" and \"negative\" perversion, etc.   This game is going to have a myriad of perspectives and biases affecting not only descriptions, but which objects in the game are accessible, etc.  \r\n\r\nThe stats are one of the ways to track and change these mid-game.  Also going to use flag system.  I already have a \"perspectives\" function to work with descriptions, and am thinking about a \"change alias\" function.\r\n\r\nThere will also be objects/exits, etc hidden and/or inaccessible depending upon stats and flags.\r\n\r\nSo depending upon one's perspective they might see the \"Bible\" as \"The Holy Bible\" or \"a book of hate speech\" or \"Abraham Lincoln's Bible\" or \"an old Bible.\"  It might be the one artifact out of the group which makes  extra special things happen for them, or maybe they can't see and interact with it at all, etc.  \r\n\r\nEach character \"type\" will have it's own artifact which is powerful for everyone who can get it, but more powerful for them.\r\n\r\nThere are also doors in the world which lead to dramatically different worlds/realms.  Each accessible after getting these key artifacts which are more suited to one \"type\" of character over all the others.  So each type has their own \"world\" which is going to be more at home for them, and other worlds they might be able to discover how to enter, but which are more or less suited to them in different ways.\r\n\r\nI'm having a lot of fun with the concept development, and also fun with discovering how to work the code.  Super indebted to Pixie and Mrangel for their contributions in forum and via tutorials and libraries.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes @Darklizerd!  That's the idea.  I want the \"Ninja,\" the \"Rich,\" and maybe the Necromancer characters to have \"Greed\" and \"Cynicism\"  rather than \"negative Selflessness\" and \"negative trust\" stats. And the \"Born again\" to be dealing with \"Selflessness\" and \"Purity\" rather than \"negative Greed\" and \"negative\" perversion, etc.   This game is going to have a myriad of perspectives and biases affecting not only descriptions, but which objects in the game are accessible, etc.</p>\n<p>The stats are one of the ways to track and change these mid-game.  Also going to use flag system.  I already have a \"perspectives\" function to work with descriptions, and am thinking about a \"change alias\" function.</p>\n<p>There will also be objects/exits, etc hidden and/or inaccessible depending upon stats and flags.</p>\n<p>So depending upon one's perspective they might see the \"Bible\" as \"The Holy Bible\" or \"a book of hate speech\" or \"Abraham Lincoln's Bible\" or \"an old Bible.\"  It might be the one artifact out of the group which makes  extra special things happen for them, or maybe they can't see and interact with it at all, etc.</p>\n<p>Each character \"type\" will have it's own artifact which is powerful for everyone who can get it, but more powerful for them.</p>\n<p>There are also doors in the world which lead to dramatically different worlds/realms.  Each accessible after getting these key artifacts which are more suited to one \"type\" of character over all the others.  So each type has their own \"world\" which is going to be more at home for them, and other worlds they might be able to discover how to enter, but which are more or less suited to them in different ways.</p>\n<p>I'm having a lot of fun with the concept development, and also fun with discovering how to work the code.  Super indebted to Pixie and Mrangel for their contributions in forum and via tutorials and libraries.</p>\n\n",
      "PostDate": "2023-05-13T20:09:39.857483Z",
      "LastEditDate": "2023-05-13T20:27:23.2220672Z",
      "link": null
    },
    {
      "PostId": "588873a9-0753-4434-bcf6-1a04d0fb8e1f",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the additional ideas Mrangel!  \r\n\r\nIf I don't use it for this precisely, it certainly may come in useful elsewhere.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the additional ideas Mrangel!</p>\n<p>If I don't use it for this precisely, it certainly may come in useful elsewhere.</p>\n\n",
      "PostDate": "2023-05-13T20:22:54.6959632Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
