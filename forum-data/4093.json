{
  "Topic": {
    "TopicId": "4093",
    "ForumId": "10",
    "Title": "help~question with~on coding mechanics",
    "LastUpdated": "2013-12-30T22:36:53+00:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "27323",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "using this structure (or if you got a better one, please share it, hehe):\n\nyour age: game.pov.age_integer\nyour year of birth: game.pov.year_integer\nstarting year of the game: global_data_object.year_integer = game.pov.age_integer + game.pov.year_integer\nself-explanatory: global_data_object.old_leap_year_integer\nself-explanatory: global_data_object.new_leap_year_integer\n\nin my limited coding ability, I am using &quot;old and new leap year integers&quot; to increment the &quot;leap year&quot; for the checking of it (such as for whether february has 28 or 29 days, and thus also whether there are 365 or 364 days in that year), as after some thinking on this, this method seemed best and easiest to implement. I can code in a &quot;foreach&quot;, but that would generate a huge list of leap year dates (even despite being able to code in a limit upon the number of leap year dates generated), so this isn't a good method, although it is cool code~math-wise, lol.\n\nfor example of how this method works (if I were to use a~this static method) conceptually (quasi-code):\n\nglobal_data_object.year_integer = 2014\nglobal_data_object.old_leap_year_integer = 2012\nglobal_data_object.new_leap_year_integer = 2016\n\nwhen (ie if) &quot;global_data_object.year_integer = global_data_object.new_leap_year_integer ( ie = 2016)&quot;, then:\n\nglobal_data_object.old_leap_year_integer = 2016\nglobal_data_object.new_leap_year_integer = 2020 (ie 2016 + 4)\n\n------------\n\nhowever, dynamically, I can't pre-set the &quot;old and new leap year integers&quot;, so I need a function (equation~formula~alogorithm), for generating~setting them:\n\n&lt;function name=&quot;a_function&quot;&gt;\n-&gt; result_x = global_data_object.year_integer\n-&gt; if (result_x / 4 = &quot;an integer&quot;) {\n-&gt;-&gt; global_data_object.old_leap_year_integer = result_x\n-&gt;-&gt; global_data_object.new_leap_year_integer = result_x + 4\n-&gt; else if (result_x / 4 = &quot;a double&quot;) {\n-&gt;-&gt; b_function (result_x)\n-&gt; }\n&lt;/function&gt;\n\n&lt;function name=&quot;b_function&quot; parameters=&quot;result_x&quot;&gt;\n-&gt; result_x = result_x + 1\n-&gt; if (result_x / 4 = &quot;an integer&quot;) {\n-&gt;-&gt; global_data_object.new_leap_year_integer = result_x\n-&gt;-&gt; global_data_object.old_leap_year_integer = result_x - 4\n-&gt; else if (result_x / 4 = &quot;a double&quot;) {\n-&gt;-&gt; b_function (result_x)\n-&gt; }\n&lt;/function&gt;\n\n--------------------------------------------------\n\nso, my questions are:\n\nfirst, would this structure work?\n\nsecond, would the &quot;IsInt&quot; and~or &quot;IsDouble&quot; check for the resultant value of the &quot;result_x / 4&quot; ???\n\nthird, if answer is &quot;no&quot; for my &quot;second&quot; question, how would I code for this then? Using greater than and lesser than, somehow?",
      "EditableFormat": "bbcode",
      "HTML": "using this structure (or if you got a better one, please share it, hehe):<br/><br/>your age: game.pov.age_integer<br/>your year of birth: game.pov.year_integer<br/>starting year of the game: global_data_object.year_integer = game.pov.age_integer + game.pov.year_integer<br/>self-explanatory: global_data_object.old_leap_year_integer<br/>self-explanatory: global_data_object.new_leap_year_integer<br/><br/>in my limited coding ability, I am using &quot;old and new leap year integers&quot; to increment the &quot;leap year&quot; for the checking of it (such as for whether february has 28 or 29 days, and thus also whether there are 365 or 364 days in that year), as after some thinking on this, this method seemed best and easiest to implement. I can code in a &quot;foreach&quot;, but that would generate a huge list of leap year dates (even despite being able to code in a limit upon the number of leap year dates generated), so this isn't a good method, although it is cool code~math-wise, lol.<br/><br/>for example of how this method works (if I were to use a~this static method) conceptually (quasi-code):<br/><br/>global_data_object.year_integer = 2014<br/>global_data_object.old_leap_year_integer = 2012<br/>global_data_object.new_leap_year_integer = 2016<br/><br/>when (ie if) &quot;global_data_object.year_integer = global_data_object.new_leap_year_integer ( ie = 2016)&quot;, then:<br/><br/>global_data_object.old_leap_year_integer = 2016<br/>global_data_object.new_leap_year_integer = 2020 (ie 2016 + 4)<br/><br/>------------<br/><br/>however, dynamically, I can't pre-set the &quot;old and new leap year integers&quot;, so I need a function (equation~formula~alogorithm), for generating~setting them:<br/><br/>&lt;function name=&quot;a_function&quot;&gt;<br/>-&gt; result_x = global_data_object.year_integer<br/>-&gt; if (result_x / 4 = &quot;an integer&quot;) {<br/>-&gt;-&gt; global_data_object.old_leap_year_integer = result_x<br/>-&gt;-&gt; global_data_object.new_leap_year_integer = result_x + 4<br/>-&gt; else if (result_x / 4 = &quot;a double&quot;) {<br/>-&gt;-&gt; b_function (result_x)<br/>-&gt; }<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;b_function&quot; parameters=&quot;result_x&quot;&gt;<br/>-&gt; result_x = result_x + 1<br/>-&gt; if (result_x / 4 = &quot;an integer&quot;) {<br/>-&gt;-&gt; global_data_object.new_leap_year_integer = result_x<br/>-&gt;-&gt; global_data_object.old_leap_year_integer = result_x - 4<br/>-&gt; else if (result_x / 4 = &quot;a double&quot;) {<br/>-&gt;-&gt; b_function (result_x)<br/>-&gt; }<br/>&lt;/function&gt;<br/><br/>--------------------------------------------------<br/><br/>so, my questions are:<br/><br/>first, would this structure work?<br/><br/>second, would the &quot;IsInt&quot; and~or &quot;IsDouble&quot; check for the resultant value of the &quot;result_x / 4&quot; ???<br/><br/>third, if answer is &quot;no&quot; for my &quot;second&quot; question, how would I code for this then? Using greater than and lesser than, somehow?",
      "PostDate": "2013-12-30T10:30:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27325",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "First, for your a and b functions, everything after the first line of each is the same - that cries out for that bit to be factored out into a separate common function.\n\nSecond, a normal year has 365 days, and a leap year has 366. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (Generally - for an exception, look up September 1752. Yes, I wrote some calendar code once...)\n\nThird, a year is a leap year if it's divisible by 400 or (failing that) if it's divisible by 4 but not by 100. So 2000 is a leap year, but 2100 is not.\n\nFourth, what you're really looking for with &quot;is divisible by&quot; is whether the remainder after division is 0. That's where your friendly mod operator comes in. So if year % 4 = 0, then it's evenly divisible by 4.\n\nI have to think about your algorithm a bit. There has to be an easier way. One question is why you need the old and new leap year values.",
      "EditableFormat": "bbcode",
      "HTML": "First, for your a and b functions, everything after the first line of each is the same - that cries out for that bit to be factored out into a separate common function.<br/><br/>Second, a normal year has 365 days, and a leap year has 366. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (Generally - for an exception, look up September 1752. Yes, I wrote some calendar code once...)<br/><br/>Third, a year is a leap year if it's divisible by 400 or (failing that) if it's divisible by 4 but not by 100. So 2000 is a leap year, but 2100 is not.<br/><br/>Fourth, what you're really looking for with &quot;is divisible by&quot; is whether the remainder after division is 0. That's where your friendly mod operator comes in. So if year % 4 = 0, then it's evenly divisible by 4.<br/><br/>I have to think about your algorithm a bit. There has to be an easier way. One question is why you need the old and new leap year values.",
      "PostDate": "2013-12-30T11:51:14+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27326",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "BTW, if you don't care about the multiple of 100s years, you could just do:\n\nold_leap_year = year - (year % 4)\nnew_leap_year = old_leap_year + 4\n\nThat fits the algorithm (I think) you were trying to do.",
      "EditableFormat": "bbcode",
      "HTML": "BTW, if you don't care about the multiple of 100s years, you could just do:<br/><br/>old_leap_year = year - (year % 4)<br/>new_leap_year = old_leap_year + 4<br/><br/>That fits the algorithm (I think) you were trying to do.",
      "PostDate": "2013-12-30T11:58:59+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27330",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm trying jayna, this date~time~calender coding is a challenge for me to try to figure out... I'm doing my best at trying to get this set up in code, as best as I can, lol. So, forgive the ugliness of it, it's what I've been able to come up with so far in design.\n\nI'm sure date~time~calender stuff is pretty basic programming, but I'm still very new to coding~programming, and so this is a challenge for me to code-logic understand and to figure it's design out... sighs.\n\n-----------\n\nactually, in the poor (yes, I know this can be coded better, maybe I can make something better if I keep working at it, but this is what I was able to do for now) coding that I have, these two functions are needed for it to work, and they're not exactly the same (take a closer look at them, in how they're needed for what is my coding design).\n\nusing the simple testing of plugging in numbers:\n\nyear = 0\n\na_function:\n\n0 / 4 = 0 -&gt; old_leap_year = 0 and new_leap_year = 0 + 4\n\nyear = 0\nold_leap_year = 0\nnew_leap_year = 4\n\n-----------------\n\nyear = 4\n\na_function:\n\n4 / 4 = 1 -&gt; old_leap_year = 4 and new_leap_year = 0 + 4\n\nyear = 4\nold_leap_year = 4\nnew_leap_year = 8\n\n-----------------\n\nyear = 8\n\na_function:\n\n8 / 4 = 2 -&gt; old_leap_year = 8 and new_leap_year = 0 + 4\n\nyear = 8\nold_leap_year = 8\nnew_leap_year = 12\n\n-------------------\n\nyear = 1\n\na_function:\n\n1 / 4 = 0.25 -&gt; b_function\n\nb_function:\n\n1 + 1 = 2\n2 / 4 = 0.50 -&gt; b_function\n\n2 + 1 = 3\n3 / 4 = 0.75 -&gt; b_function\n\n3 + 1 = 4\n4 / 4 = 1\n\nyear = 1\n+ &quot;function resultant years&quot;\n\nNEW_leap_year = 4\nyear = 1\nOLD_leap_year = 4 - 4 = 0\n\n------------------\n\nyear = 5\n\na_function:\n\n5 / 4 = 1.25 -&gt; b_function\n\nb_function:\n\n5 + 1 = 6\n6 / 4 = 1.50 -&gt; b_function\n\n6 + 1 = 7\n7 / 4 = 1.75 -&gt; b_function\n\n7 + 1 = 8\n8 / 4 = 2\n\nyear = 5\n+ &quot;function resultant years&quot;\n\nNEW_leap_year = 8\nyear = 5\nOLD_leap_year = 8 - 4 = 4\n\n--------\n\nyear = 7\n\na_function:\n\n7 / 4 = 1.75 -&gt; b_function\n\nb_function:\n\n7 + 1 = 8\n8 / 4 = 2 \n\nyear = 7\n+ &quot;function resultant years&quot;\n\nNEW_leap_year = 8\nyear = 7\nOLD_leap_year = 8 - 4 = 4\n\n---------\n\nyou're probably wondering why the &quot;old_leap&quot; matters if the &quot;year&quot; is already exceeding it....\n\nremember that the &quot;change&quot; method that I'm using is this:\n\nyear = 0\nold_leap = 0\nnew_leap = old_leap + 4\n\nif (year = new_leap) {\n-&gt; old_leap = year\n-&gt; new_leap = old_leap + 4\n}\n\nas this allows me do the easy incrementing of the leap years by &quot;new_leap = old_leap + 4&quot;, and also to be able to use &quot;if year = leap_year, then days in february = 29 and days in year = 366, else days in february = 28 and days in year = 365&quot;\n\n----------\n\nerr... used my memory... I was off by one day... argh!\n\nmy bad memory: 364 and 365\ncorrect: 365.25 -&gt; 365 and 366 (every 4th year ~ 29 days in february instead of 28)\n\n----------\n\nya, it's ugly and messy... but unless I'm missing or over-looking something obvious, it should work... lol\n\n----------\n\nI figured that the &quot;%&quot; could be used too, but I was hoping that the &quot;ToInt&quot; and~or &quot;ToDouble&quot;, could do the same job... so, can they or not?\n\n---------\n\nall this work on my part....\n\n[quote=&quot;Jayna&quot;:21ar5dh7]Yes, I wrote some calendar code once...)\n\nold_leap_year = year - (year % 4)\nnew_leap_year = old_leap_year + 4[/quote:21ar5dh7]\n\nI'm depressed... I should quit trying to code... lol (j/k, THANK YOU jayna!, I'm learning bit by bit, lol, of coding and of coding better, from you, hehe)\n\n(I really need to get a better comprehension of the &quot;%&quot;... I understood it... but not how to apply it beyond its definition... it never occured to me to do this: year - year % 4, ARGH!)\n\nI do think my code works... but it sure is the &quot;long ways&quot; of doing your quick and simple:\n\nold_leap_year = year - (year % 4)\nnew_leap_year = old_leap_year + 4\n\nthough my code finds the new_leap_year and then subtracts to get the old_leap_year, the reverse of yours\n\ndon't worry about trying to follow my code, as I know how hard it is to follow others' processii of code, math equations, and~or just another person's brain's thoughts-thinking. It took me along time to make sense of what Pertex' was even doing in~with his combat code, it took me awhile just to make sense of his code structure~design so that I could just follow~read it properly, let alone actually understanding how the code worked, hehe.",
      "EditableFormat": "bbcode",
      "HTML": "I'm trying jayna, this date~time~calender coding is a challenge for me to try to figure out... I'm doing my best at trying to get this set up in code, as best as I can, lol. So, forgive the ugliness of it, it's what I've been able to come up with so far in design.<br/><br/>I'm sure date~time~calender stuff is pretty basic programming, but I'm still very new to coding~programming, and so this is a challenge for me to code-logic understand and to figure it's design out... sighs.<br/><br/>-----------<br/><br/>actually, in the poor (yes, I know this can be coded better, maybe I can make something better if I keep working at it, but this is what I was able to do for now) coding that I have, these two functions are needed for it to work, and they're not exactly the same (take a closer look at them, in how they're needed for what is my coding design).<br/><br/>using the simple testing of plugging in numbers:<br/><br/>year = 0<br/><br/>a_function:<br/><br/>0 / 4 = 0 -&gt; old_leap_year = 0 and new_leap_year = 0 + 4<br/><br/>year = 0<br/>old_leap_year = 0<br/>new_leap_year = 4<br/><br/>-----------------<br/><br/>year = 4<br/><br/>a_function:<br/><br/>4 / 4 = 1 -&gt; old_leap_year = 4 and new_leap_year = 0 + 4<br/><br/>year = 4<br/>old_leap_year = 4<br/>new_leap_year = 8<br/><br/>-----------------<br/><br/>year = 8<br/><br/>a_function:<br/><br/>8 / 4 = 2 -&gt; old_leap_year = 8 and new_leap_year = 0 + 4<br/><br/>year = 8<br/>old_leap_year = 8<br/>new_leap_year = 12<br/><br/>-------------------<br/><br/>year = 1<br/><br/>a_function:<br/><br/>1 / 4 = 0.25 -&gt; b_function<br/><br/>b_function:<br/><br/>1 + 1 = 2<br/>2 / 4 = 0.50 -&gt; b_function<br/><br/>2 + 1 = 3<br/>3 / 4 = 0.75 -&gt; b_function<br/><br/>3 + 1 = 4<br/>4 / 4 = 1<br/><br/>year = 1<br/>+ &quot;function resultant years&quot;<br/><br/>NEW_leap_year = 4<br/>year = 1<br/>OLD_leap_year = 4 - 4 = 0<br/><br/>------------------<br/><br/>year = 5<br/><br/>a_function:<br/><br/>5 / 4 = 1.25 -&gt; b_function<br/><br/>b_function:<br/><br/>5 + 1 = 6<br/>6 / 4 = 1.50 -&gt; b_function<br/><br/>6 + 1 = 7<br/>7 / 4 = 1.75 -&gt; b_function<br/><br/>7 + 1 = 8<br/>8 / 4 = 2<br/><br/>year = 5<br/>+ &quot;function resultant years&quot;<br/><br/>NEW_leap_year = 8<br/>year = 5<br/>OLD_leap_year = 8 - 4 = 4<br/><br/>--------<br/><br/>year = 7<br/><br/>a_function:<br/><br/>7 / 4 = 1.75 -&gt; b_function<br/><br/>b_function:<br/><br/>7 + 1 = 8<br/>8 / 4 = 2 <br/><br/>year = 7<br/>+ &quot;function resultant years&quot;<br/><br/>NEW_leap_year = 8<br/>year = 7<br/>OLD_leap_year = 8 - 4 = 4<br/><br/>---------<br/><br/>you're probably wondering why the &quot;old_leap&quot; matters if the &quot;year&quot; is already exceeding it....<br/><br/>remember that the &quot;change&quot; method that I'm using is this:<br/><br/>year = 0<br/>old_leap = 0<br/>new_leap = old_leap + 4<br/><br/>if (year = new_leap) {<br/>-&gt; old_leap = year<br/>-&gt; new_leap = old_leap + 4<br/>}<br/><br/>as this allows me do the easy incrementing of the leap years by &quot;new_leap = old_leap + 4&quot;, and also to be able to use &quot;if year = leap_year, then days in february = 29 and days in year = 366, else days in february = 28 and days in year = 365&quot;<br/><br/>----------<br/><br/>err... used my memory... I was off by one day... argh!<br/><br/>my bad memory: 364 and 365<br/>correct: 365.25 -&gt; 365 and 366 (every 4th year ~ 29 days in february instead of 28)<br/><br/>----------<br/><br/>ya, it's ugly and messy... but unless I'm missing or over-looking something obvious, it should work... lol<br/><br/>----------<br/><br/>I figured that the &quot;%&quot; could be used too, but I was hoping that the &quot;ToInt&quot; and~or &quot;ToDouble&quot;, could do the same job... so, can they or not?<br/><br/>---------<br/><br/>all this work on my part....<br/><br/><blockquote><cite>Jayna wrote:</cite>Yes, I wrote some calendar code once...)<br/><br/>old_leap_year = year - (year % 4)<br/>new_leap_year = old_leap_year + 4</blockquote><br/><br/>I'm depressed... I should quit trying to code... lol (j/k, THANK YOU jayna!, I'm learning bit by bit, lol, of coding and of coding better, from you, hehe)<br/><br/>(I really need to get a better comprehension of the &quot;%&quot;... I understood it... but not how to apply it beyond its definition... it never occured to me to do this: year - year % 4, ARGH!)<br/><br/>I do think my code works... but it sure is the &quot;long ways&quot; of doing your quick and simple:<br/><br/>old_leap_year = year - (year % 4)<br/>new_leap_year = old_leap_year + 4<br/><br/>though my code finds the new_leap_year and then subtracts to get the old_leap_year, the reverse of yours<br/><br/>don't worry about trying to follow my code, as I know how hard it is to follow others' processii of code, math equations, and~or just another person's brain's thoughts-thinking. It took me along time to make sense of what Pertex' was even doing in~with his combat code, it took me awhile just to make sense of his code structure~design so that I could just follow~read it properly, let alone actually understanding how the code worked, hehe.",
      "PostDate": "2013-12-30T16:56:13+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27334",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I'm glad you're not depressed. lol. As you say, it's all about learning, and we're all doing that.\n\nMod (%) can be useful, especially for determining if something is evenly divisible. What it also gives you (as used above) is how far off you are from being evenly divisible. If the mod returns 2, for example, then the number is 2 above being evenly divisible. If that makes sense... It's like the extra bit left over after dividing evenly.\n\nAnyway, I'm glad to help, and I hope it all works out. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "I'm glad you're not depressed. lol. As you say, it's all about learning, and we're all doing that.<br/><br/>Mod (%) can be useful, especially for determining if something is evenly divisible. What it also gives you (as used above) is how far off you are from being evenly divisible. If the mod returns 2, for example, then the number is 2 above being evenly divisible. If that makes sense... It's like the extra bit left over after dividing evenly.<br/><br/>Anyway, I'm glad to help, and I hope it all works out. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-12-30T18:53:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27337",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "well, if there wasn't the &quot;%~mod&quot; function, there's my two functions, which should~could work, with a little more code with finishing them up and also some tinkering of it as well (if the &quot;IsInt&quot; and~or &quot;IsDouble doesn't work, I'd have to craft code for it... I can do this, I should be able to anyways, but it would be even more added coding... laughs).\n\ndepressed was the wrong word... jealous~envious is a more accurate word, laughs. At least now, I'm finally aware of just how powerful~useful the &quot;%~mod&quot; is, as it can be used~applied for doing lots of things, including what I was trying to do here, lol.\n\nI am aware now of the great utility of these:\n\n1. if (expression) { script }\n2. object.attribute = value_or_expression\n3. %~mod (division and its remainder)",
      "EditableFormat": "bbcode",
      "HTML": "well, if there wasn't the &quot;%~mod&quot; function, there's my two functions, which should~could work, with a little more code with finishing them up and also some tinkering of it as well (if the &quot;IsInt&quot; and~or &quot;IsDouble doesn't work, I'd have to craft code for it... I can do this, I should be able to anyways, but it would be even more added coding... laughs).<br/><br/>depressed was the wrong word... jealous~envious is a more accurate word, laughs. At least now, I'm finally aware of just how powerful~useful the &quot;%~mod&quot; is, as it can be used~applied for doing lots of things, including what I was trying to do here, lol.<br/><br/>I am aware now of the great utility of these:<br/><br/>1. if (expression) { script }<br/>2. object.attribute = value_or_expression<br/>3. %~mod (division and its remainder)",
      "PostDate": "2013-12-30T22:36:53+00:00",
      "LastEditDate": null
    }
  ]
}
