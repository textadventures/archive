{
  "Topic": {
    "TopicId": "gplg-3n6g0onqgsjs1zvvw",
    "ForumId": "10",
    "Title": "Script Specific to Object in Inventory",
    "LastUpdated": "2020-02-21T01:53:54.5230688Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "82e48ee7-9a6c-4265-a293-6f245b56d913",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Currently the player has every single obtainable object in their inventory, which are all invisible. This way when the player \"picks up\" a clone of that object (really just decreases the value of the clone, making it invisible if the value = 0), the value of the object in the inventory increases by the amount taken.\r\n\r\nHow do I set it so that when the player \"takes\" the object, this happens? Currently, it's hard fooling around with \"take\" since it interferes with the take function.",
      "EditableFormat": "markdown",
      "HTML": "<p>Currently the player has every single obtainable object in their inventory, which are all invisible. This way when the player \"picks up\" a clone of that object (really just decreases the value of the clone, making it invisible if the value = 0), the value of the object in the inventory increases by the amount taken.</p>\n<p>How do I set it so that when the player \"takes\" the object, this happens? Currently, it's hard fooling around with \"take\" since it interferes with the take function.</p>\n\n",
      "PostDate": "2020-02-21T01:53:54.5230688Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e238221a-a801-4e40-b93a-019b77261143",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "):",
      "EditableFormat": "markdown",
      "HTML": "<p>):</p>\n\n",
      "PostDate": "2020-02-22T16:47:02.1679318Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ad255f52-61df-4708-9306-d16e448f2a1d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure I understand the question.\r\n\r\nYou're using a stacking system with a `value` being the number in that location. That seems pretty standard.\r\nI've seen a lot of variations of this system with the original object being placed somewhere inaccessible, and an object cloning itself where necessary.\r\n\r\nDo you mean that the original objects are all in the player's inventory, set to invisible until they are picked up? I've not come across that, but it seems like it would make the system easier because you know that the prototype is the player's copy.\r\n\r\nYou'd give these items a take script like:\r\n```\r\nthis.prototype.value = this.prototype.value + this.value\r\nthis.prototype.visible = true\r\ndestroy (this.name)\r\n```\r\nand the drop script would be:\r\n```\r\nCloneObjectAndMove (this, destination)\r\nthis.value = 0\r\nthis.visible = false\r\n```\r\nOr if you want it to work with containers which have scripts attached:\r\n```\r\nnewClone = CloneObject (this)\r\nif (HasScript (destination, \"addscript\")) {\r\n  do (destination, \"addscript\", QuickParams (\"destination\", destination, \"object\", this))\r\n}\r\nelse {\r\n  newClone.parent = destination\r\n}\r\nif (newClone.parent = this.parent) {\r\n  destroy (newClone.name)\r\n}\r\nelse {\r\n  this.value = 0\r\n  this.visible = false\r\n}\r\n```\r\n\r\n<hr/>\r\n\r\nBut…\r\nIt might make more sense to modify the `changedparent` script instead (which I believe is the more common way to handle scripts like this). This guarantees that moving the object around using scripts will continue to work correctly.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure I understand the question.</p>\n<p>You're using a stacking system with a <code>value</code> being the number in that location. That seems pretty standard.<br>\nI've seen a lot of variations of this system with the original object being placed somewhere inaccessible, and an object cloning itself where necessary.</p>\n<p>Do you mean that the original objects are all in the player's inventory, set to invisible until they are picked up? I've not come across that, but it seems like it would make the system easier because you know that the prototype is the player's copy.</p>\n<p>You'd give these items a take script like:</p>\n<pre><code>this.prototype.value = this.prototype.value + this.value\nthis.prototype.visible = true\ndestroy (this.name)\n</code></pre>\n<p>and the drop script would be:</p>\n<pre><code>CloneObjectAndMove (this, destination)\nthis.value = 0\nthis.visible = false\n</code></pre>\n<p>Or if you want it to work with containers which have scripts attached:</p>\n<pre><code>newClone = CloneObject (this)\nif (HasScript (destination, \"addscript\")) {\n  do (destination, \"addscript\", QuickParams (\"destination\", destination, \"object\", this))\n}\nelse {\n  newClone.parent = destination\n}\nif (newClone.parent = this.parent) {\n  destroy (newClone.name)\n}\nelse {\n  this.value = 0\n  this.visible = false\n}\n</code></pre>\n<hr>\n<p>But…<br>\nIt might make more sense to modify the <code>changedparent</code> script instead (which I believe is the more common way to handle scripts like this). This guarantees that moving the object around using scripts will continue to work correctly.</p>\n\n",
      "PostDate": "2020-02-22T17:10:05.6964667Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c5f26e69-20ba-493a-9687-65433c371ca1",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mrangel you genius, spot on again in determining my intentions.  Those scripts do seem very clever, and should work if I understand them correctly. What do you mean by modifying the changedparent script though?",
      "EditableFormat": "markdown",
      "HTML": "<p>Mrangel you genius, spot on again in determining my intentions.  Those scripts do seem very clever, and should work if I understand them correctly. What do you mean by modifying the changedparent script though?</p>\n\n",
      "PostDate": "2020-02-23T05:01:29.1967343Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff1a89a8-4bbe-43f6-93e1-306aa6d37d82",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If an object has a `changedparent` script attribute, this will be run every time the object moves for any reason. This could be used to check the new location for an existing clone of the same object and combine them if necessary. This works if an object is taken, dropped, put into a container, or moved by any other script or command.\r\n\r\nThe `changedparent` script would look something like:\r\n```\r\nif (HasObject (this, \"prototype\") and not this = this.prototype) {\r\n  // Moving a clone\r\n  if (this.parent = game.pov) {\r\n    // Into the inventory\r\n    this.prototype.value = this.prototype.value + this.value\r\n    this.prototype.visible = true\r\n    destroy (this.name)\r\n  }\r\n  else {\r\n    // check if the destination already has a clone of the same object\r\n    foreach (sibling, GetDirectChildren (this.parent)) {\r\n      if (sibling.prototype = this.prototype and not sibling = this) {\r\n        this.value = this.value + sibling.value\r\n        destroy (sibling.name)\r\n      }\r\n    }\r\n  }\r\n}\r\nelse if (not this.parent = game.pov) {\r\n  // this is the original; so force it to stay in the inventory\r\n  destination = this.parent\r\n  this.parent = game.pov\r\n  CloneObjectAndMove (this, destination)\r\n  this.value = 0\r\n  this.visible = false\r\n}\r\n```\r\nThis could be coupled with a `changedvalue` script, also meaning that you can change an object's value in script whenever you want, and trust Quest to make it visible or invisible as appropriate. If you use this, the \"visible\" lines in the above script are unnecessary\r\n```\r\nthis.visible = (this.value > 0)\r\n```\r\n\r\nThis method means that you don't need to write a different script for every situation in which an object might change in location or number; these scripts cover every situation, so don't need a custom take/drop script.",
      "EditableFormat": "markdown",
      "HTML": "<p>If an object has a <code>changedparent</code> script attribute, this will be run every time the object moves for any reason. This could be used to check the new location for an existing clone of the same object and combine them if necessary. This works if an object is taken, dropped, put into a container, or moved by any other script or command.</p>\n<p>The <code>changedparent</code> script would look something like:</p>\n<pre><code>if (HasObject (this, \"prototype\") and not this = this.prototype) {\n  // Moving a clone\n  if (this.parent = game.pov) {\n    // Into the inventory\n    this.prototype.value = this.prototype.value + this.value\n    this.prototype.visible = true\n    destroy (this.name)\n  }\n  else {\n    // check if the destination already has a clone of the same object\n    foreach (sibling, GetDirectChildren (this.parent)) {\n      if (sibling.prototype = this.prototype and not sibling = this) {\n        this.value = this.value + sibling.value\n        destroy (sibling.name)\n      }\n    }\n  }\n}\nelse if (not this.parent = game.pov) {\n  // this is the original; so force it to stay in the inventory\n  destination = this.parent\n  this.parent = game.pov\n  CloneObjectAndMove (this, destination)\n  this.value = 0\n  this.visible = false\n}\n</code></pre>\n<p>This could be coupled with a <code>changedvalue</code> script, also meaning that you can change an object's value in script whenever you want, and trust Quest to make it visible or invisible as appropriate. If you use this, the \"visible\" lines in the above script are unnecessary</p>\n<pre><code>this.visible = (this.value &gt; 0)\n</code></pre>\n<p>This method means that you don't need to write a different script for every situation in which an object might change in location or number; these scripts cover every situation, so don't need a custom take/drop script.</p>\n\n",
      "PostDate": "2020-02-23T09:36:09.6036857Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f79ec45b-1639-4764-9c87-eb8e5e18ce7f",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The problem with that take script is that it's only good for all or nothing. But I need a script that allows the player to select a value from the cloned object (ex: \"take 3 sticks\" when there are 10 sticks) rather than just destroying the clone and adding it's value to the prototype value.",
      "EditableFormat": "markdown",
      "HTML": "<p>The problem with that take script is that it's only good for all or nothing. But I need a script that allows the player to select a value from the cloned object (ex: \"take 3 sticks\" when there are 10 sticks) rather than just destroying the clone and adding it's value to the prototype value.</p>\n\n",
      "PostDate": "2020-03-11T18:27:02.6866844Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71ced067-f12c-41d2-a6d1-5bddd41f04aa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not hard to do. If you have a command with the pattern `^take (?<text_count>\\d+) (?<object>.+)$` then you have a variable with the number. The scripts can be easily adapted.",
      "EditableFormat": "markdown",
      "HTML": "<p>Not hard to do. If you have a command with the pattern <code>^take (?&lt;text_count&gt;\\d+) (?&lt;object&gt;.+)$</code> then you have a variable with the number. The scripts can be easily adapted.</p>\n\n",
      "PostDate": "2020-03-11T19:20:00.7060938Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "671e901e-d31d-4386-aa92-204203c9b076",
      "UserId": 260969,
      "Username": "Enpherdaen",
      "AvatarUrl": "http://i.imgur.com/OSFSM1ab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Would this work?\r\n\r\n```\r\nmsg (\"How much do you want to take?\")\r\nget input {\r\n  if (this.value > result) {\r\n    this.prototype.value = this.prototype.value + result\r\n    this.prototype.visible = true\r\n    this.value = this.value - result\r\n  }\r\n  else if (this.value = 0) {\r\n    this.visible = false\r\n  }\r\n  else if (this.value < result) {\r\n    msg (\"There aren't that many sticks here.\")\r\n  }\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>Would this work?</p>\n<pre><code>msg (\"How much do you want to take?\")\nget input {\n  if (this.value &gt; result) {\n    this.prototype.value = this.prototype.value + result\n    this.prototype.visible = true\n    this.value = this.value - result\n  }\n  else if (this.value = 0) {\n    this.visible = false\n  }\n  else if (this.value &lt; result) {\n    msg (\"There aren't that many sticks here.\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2020-03-11T19:27:18.7651445Z",
      "LastEditDate": "2020-03-11T20:40:35.5937284Z",
      "link": null
    }
  ]
}
