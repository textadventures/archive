{
  "Topic": {
    "TopicId": "6459",
    "ForumId": "10",
    "Title": "Verbs like to room",
    "LastUpdated": "2016-06-27T01:34:10+01:00",
    "ReplyCount": 17
  },
  "Posts": [
    {
      "PostId": "43757",
      "UserId": 0,
      "Username": "Deckrect",
      "UserAvatar": null,
      "UserGravatar": "13c7167a5f539c7d2d1ce248f7dbbdfe",
      "EditableText": "Ok. The whole idea is like this: I want the player character may execute an action, so it would be a verb. However, i don't want he/she/it execute this action everywhere, but only when at some specific rooms, which are a long list for adding ifs to the verb. Is there ant simple way of linking to a room the idea that the verb may be executed there? \n\nActually, it goes a little further, because i would really appreciate having other verbs valid only at specific rooms.",
      "EditableFormat": "bbcode",
      "HTML": "Ok. The whole idea is like this: I want the player character may execute an action, so it would be a verb. However, i don't want he/she/it execute this action everywhere, but only when at some specific rooms, which are a long list for adding ifs to the verb. Is there ant simple way of linking to a room the idea that the verb may be executed there? <br/><br/>Actually, it goes a little further, because i would really appreciate having other verbs valid only at specific rooms.",
      "PostDate": "2016-06-25T23:37:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43760",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Verbs and commands can be added to rooms. Then they only apply in those rooms.\n\nNote that there is a difference between verbs and commands. Verbs are special forms of commands that apply to objects. The pattern should include an object reference. Commands can be simple things like &quot;jump&quot;, but they can even be things that seem like verbs (e.g. &quot;unlock safe&quot;). If you only need something to apply to one object, it might make sense to make it a command where the object is part of the pattern rather than making it a general purpose verb that could apply to all objects. Without knowing what you're doing, I can't recommend one over the other. But I just wanted to let you know that having the player do something can be accomplished with either verbs or commands, not just verbs, depending on what you're trying to do.",
      "EditableFormat": "bbcode",
      "HTML": "Verbs and commands can be added to rooms. Then they only apply in those rooms.<br/><br/>Note that there is a difference between verbs and commands. Verbs are special forms of commands that apply to objects. The pattern should include an object reference. Commands can be simple things like &quot;jump&quot;, but they can even be things that seem like verbs (e.g. &quot;unlock safe&quot;). If you only need something to apply to one object, it might make sense to make it a command where the object is part of the pattern rather than making it a general purpose verb that could apply to all objects. Without knowing what you're doing, I can't recommend one over the other. But I just wanted to let you know that having the player do something can be accomplished with either verbs or commands, not just verbs, depending on what you're trying to do.",
      "PostDate": "2016-06-26T04:49:19+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43762",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Verbs:\n\nyou also can have scripting do the full/entire work for you:\n\ngive your desired rooms an indicator/flag Attribute (String Attribute or Stringlist Attribute ... or Boolean Attribute: *but it's better to use a String or Stringlist), which thus can be checked, and thus you can create/add Verbs to those specific rooms, for example:\n\nI like using 'type_of_object' as my (indicator/flag) String (or Stringlist) Attribute's name (and also to include the type of attribute into the name, use underscores, and no uppercase, as well - my personal naming/labeling convention) to separate it from all the other things that use 'type' in their names/whatever)\n\n[code:zko9euky]&lt;object name=&quot;room_1&quot;&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;dungeon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_2&quot;&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;world&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_3&quot;&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;dungeon&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_4&quot;&gt;\n  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;world&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;function name=&quot;populate_verbs_function&quot;&gt;\n  foreach (object_variable, AllObjects()) {\n    if (GetString (object_variable, &quot;type_of_object_string_attribute&quot;) = &quot;dungeon&quot;) {\n      // script to create/add your dungeon Verb to it, the 'set' Function/Script, and I assume that you can create/add a Script Attribute (which is what a Verb is) with it&#46;&#46;&#46;\n    }\n    // optional extra condition checking for other types of objects&#58;\n    else if (GetString (object_variable, &quot;type_object_string_attribute&quot;) = &quot;world&quot;) {\n      // script to create/add your world Verb to it, the 'set' Function/Script, and I assume that you can create/add a Script Attribute (which is what a Verb is) with it&#46;&#46;&#46;\n    }\n  }\n&lt;/function&gt;\n\n&lt;game name=&quot;blah&quot;&gt;\n  &lt;attr name=&quot;start&quot; type=&quot;script&quot;&gt;\n    populate_verbs_function\n  &lt;/attr&gt;\n&lt;/game&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;dungeon_verbs_property&lt;/property&gt;\n  &lt;pattern&gt;dungeon_verbs_pattern&lt;/pattern&gt;\n  &lt;defaultexpression&gt;dungeon_verbs_default_expression&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n// optional extra Verbs&#58;\n&lt;verb&gt;\n  &lt;property&gt;world_verbs_property&lt;/property&gt;\n  &lt;pattern&gt;world_verbs_pattern&lt;/pattern&gt;\n  &lt;defaultexpression&gt;world_verbs_default_expression&lt;/defaultexpression&gt;\n&lt;/verb&gt;[/code:zko9euky]\n\n--------\n\nyou can also use Object Types (quest's user level of Groups/Classes) to reduce the workload by yourself (not as much as using scripting, of course):\n\n(Object Types are found under/within the 'Advanced' on the left side's &quot;tree of stuff&quot; or in the 'advenced' under/within the top menu bar's 'add' category)\n\n[code:zko9euky]&lt;object name=&quot;room_1&quot;&gt;\n  &lt;inherit name=&quot;dungeon_object_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_2&quot;&gt;\n  &lt;inherit name=&quot;world_object_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_3&quot;&gt;\n  &lt;inherit name=&quot;dungeon_object_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_4&quot;&gt;\n  &lt;inherit name=&quot;world_object_type&quot; /&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;dungeon_object_type&quot;&gt;\n  &lt;attr name=&quot;YOUR_VERBS_NAME&quot; type=&quot;script&quot;&gt;\n    // your dungeon Verb's script(s)\n  &lt;/attr&gt;\n&lt;/type&gt;\n\n// optional extra object types&#58;\n&lt;type name=&quot;world_object_type&quot;&gt;\n  &lt;attr name=&quot;YOUR_VERBS_NAME&quot; type=&quot;script&quot;&gt;\n    // your world Verb's script(s)\n  &lt;/attr&gt;\n&lt;/type&gt;[/code:zko9euky]\n\n--------------------\n\nCommands:\n\nCommands are different in that they take in typed-in input during game play (so they're universal, not tied to a specific Object like a Verb), examples:\n\n[code:zko9euky]// this Command, upon typing in 'info' during game play, will only display your currently controlled character (Player Object)&#58;\n\n&lt;object name=&quot;player&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;\n  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;18&lt;/attr&gt; // I wish I was still 18, lol\n  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;\n  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;\n  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;\n  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;warrior&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;player_2&quot;&gt;\n  &lt;feature_player /&gt; // this is how you set/tell quest that this Object can be a Player Object (what it does through using the GUI~Editor's option), and I think this ('&lt;feature_player&gt;') is syntax shorthand for&#58; &lt;attr name=&quot;feature_player&quot; type=&quot;boolean&quot;&gt;true&lt;/attr&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;Mike&lt;/attr&gt;\n  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;\n  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;\n  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;\n  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;wizard&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;monster_1&quot;&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;30&lt;/attr&gt;\n  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;\n  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;\n  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;berserker&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;command name=&quot;static_character_information_screen_command&quot;&gt;\n  &lt;pattern&gt;info&lt;/pattern&gt;\n  &lt;script&gt;\n    ClearScreen\n    msg (&quot;Name&#58; &quot; + game&#46;pov&#46;alias)\n    msg (&quot;Age&#58; &quot; + game&#46;pov&#46;age_integer_attribute + &quot; (&quot; + game&#46;pov&#46;age_string_attribute + &quot;)&quot;)\n    msg (&quot;Sex&#58; &quot; + game&#46;pov&#46;sex_string_attribute)\n    msg (&quot;Race&#58; &quot; + game&#46;pov&#46;race_string_attribute)\n    msg (&quot;Class&#58; &quot; + game&#46;pov&#46;class_string_attribute)\n    wait {\n      ClearScreen\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n// Input&#58;\n\ninfo\n\n// Output&#58;\n\nit'll either show the stats for 'player' or 'player_2' (due to using 'game&#46;pov' only --- otherwise, this would be limited to a single specified Object only), depending on which is the game&#46;pov (your currently controlled Player Object), but it will NOT show the stats for the 'monster_1'\n\nVS\n\n// this Command, upon typing in 'info (whatever object)' during game play, will display that inputted Object's information&#58;\n\n&lt;command name=&quot;dynamic_character_information_screen_command&quot;&gt;\n  // you're not limited to a single parameter, and there's two types of parameters&#58; #text# / #textXXX# or #object# / #objectXXX#, as you can see, you parameter must start with '#text' or #object' and end of course with the '#'\n  &lt;pattern&gt;info #object_parameter#&lt;/pattern&gt;\n  &lt;script&gt;\n    ClearScreen\n    msg (&quot;Name&#58; &quot; + object_parameter&#46;alias)\n    msg (&quot;Age&#58; &quot; + object_parameter&#46;age_integer_attribute + &quot; (&quot; + object_parameter&#46;age_string_attribute + &quot;)&quot;)\n    msg (&quot;Sex&#58; &quot; + object_parameter&#46;sex_string_attribute)\n    msg (&quot;Race&#58; &quot; + object_parameter&#46;race_string_attribute)\n    msg (&quot;Class&#58; &quot; + object_parameter&#46;class_string_attribute)\n    wait {\n      ClearScreen\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n// inputs&#58;\n\nsince we're using the '#object#' parameter, it means that quest will look for an Object with the same 'name' ID String Attribute as the inputted name, and if it can't find an Object with that 'name' ID String Attribute, it'll then look for an Object with an 'alias' String Attribute of that inputted name, and if it still fails, then it returns 'null' (so&#58; no error occurs if it can't find an Object, don't need to worry about coding to handle it not finding such an Object with the same 'name' ID String Attribute or 'alias' String Attribute)\n\ninfo player\ninfo HK\ninfo player_2\ninfo Mike\ninfo monster_1\ninfo orc\n\noutputs&#58;\n\nit'll display (assuming the Object has those Attributes --- we should have coding to check if the Object has these Attributes too, but meh, this is just a quick example for you of using Commands) the stats of the inputted Object, so it can show the stats of any of the 3 Objects&#58; 'player', 'player_2', or 'monster_1'&#46;[/code:zko9euky]\n\n------------------------------------------------\n\n* why a String (or Stringlist) is better than Booleans, example:\n\nusing Boolean Attributes:\n\n// very cumbersome (BAD DESIGN!), but it does allow for easy/simple (coding-wise) use of having multiple (any combination of) effects at the same time:\nplayer.poisoned = false // change to 'true' when poisoned\nplayer.asleep = false // change to 'true' when put asleep\nplayer.stunned = false // etc etc etc\nplayer.paralyzed = false // etc etc etc\nplayer.petrified = false // etc etc etc\nplayer.silenced = false\nplayer.confused = false\nplayer.cursed = false\nplayer.undead = false\nplayer.dead = false\nplayer.unconscious = false\netc etc etc Boolean Attributes (in this example of: conditions/effects/status_effects)\n\nVS\n\nusing a String Attribute:\n\n// NO cumbersome-ness (GOOD DESIGN!), but limited to only a single effect at a time:\n\nplayer.condition = &quot;normal&quot; // change to &quot;whatever effect/condition/status_effect&quot; when it happens to the 'player' Player Object:\n// player.condition = &quot;poisoned&quot;\n// player.condition = &quot;asleep&quot;\n\nVS\n\nusing a Stringlist Attribute:\n\n// some Cumbersome-ness in the extra coding needed but this can't be helped as it's a List (it's still a GOOD DESIGN! it's probably better than using gazillions of Boolean Attributes --- just for your own sanity, the fewer the Attributes you got to create and handle the better for you personally, lol --- , well unless you only have a few effects/condtions/whatever, but for large amounts, Lists are probably better than Booleans - at least if you can easily create the coding needed with using lists and/or for your game design needs, if you want/need to have multiple conditions at the same time):\n\nplayer.condition_list = split (&quot;normal&quot;, &quot;;&quot;)\n\nsay you (want to) get/be poisoned and petrified:\n\nplayer.condition_list = split (&quot;poisoned;petrified&quot;, &quot;;&quot;)\n~ OR ~\nlist remove (player.condition_list, &quot;normal&quot;)\nlist add (player.condition_list, &quot;poisoned&quot;)\nlist add (player.condition_list, &quot;petrified&quot;)",
      "EditableFormat": "bbcode",
      "HTML": "Verbs:<br/><br/>you also can have scripting do the full/entire work for you:<br/><br/>give your desired rooms an indicator/flag Attribute (String Attribute or Stringlist Attribute ... or Boolean Attribute: *but it's better to use a String or Stringlist), which thus can be checked, and thus you can create/add Verbs to those specific rooms, for example:<br/><br/>I like using 'type_of_object' as my (indicator/flag) String (or Stringlist) Attribute's name (and also to include the type of attribute into the name, use underscores, and no uppercase, as well - my personal naming/labeling convention) to separate it from all the other things that use 'type' in their names/whatever)<br/><br/><pre><code>&lt;object name=&quot;room_1&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;dungeon&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_2&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;world&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_3&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;dungeon&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_4&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object_string_attribute&quot; type=&quot;string&quot;&gt;world&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;function name=&quot;populate_verbs_function&quot;&gt;<br/>  foreach (object_variable, AllObjects()) {<br/>    if (GetString (object_variable, &quot;type_of_object_string_attribute&quot;) = &quot;dungeon&quot;) {<br/>      // script to create/add your dungeon Verb to it, the 'set' Function/Script, and I assume that you can create/add a Script Attribute (which is what a Verb is) with it&#46;&#46;&#46;<br/>    }<br/>    // optional extra condition checking for other types of objects&#58;<br/>    else if (GetString (object_variable, &quot;type_object_string_attribute&quot;) = &quot;world&quot;) {<br/>      // script to create/add your world Verb to it, the 'set' Function/Script, and I assume that you can create/add a Script Attribute (which is what a Verb is) with it&#46;&#46;&#46;<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;game name=&quot;blah&quot;&gt;<br/>  &lt;attr name=&quot;start&quot; type=&quot;script&quot;&gt;<br/>    populate_verbs_function<br/>  &lt;/attr&gt;<br/>&lt;/game&gt;<br/><br/>&lt;verb&gt;<br/>  &lt;property&gt;dungeon_verbs_property&lt;/property&gt;<br/>  &lt;pattern&gt;dungeon_verbs_pattern&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;dungeon_verbs_default_expression&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;<br/><br/>// optional extra Verbs&#58;<br/>&lt;verb&gt;<br/>  &lt;property&gt;world_verbs_property&lt;/property&gt;<br/>  &lt;pattern&gt;world_verbs_pattern&lt;/pattern&gt;<br/>  &lt;defaultexpression&gt;world_verbs_default_expression&lt;/defaultexpression&gt;<br/>&lt;/verb&gt;</code></pre><br/><br/>--------<br/><br/>you can also use Object Types (quest's user level of Groups/Classes) to reduce the workload by yourself (not as much as using scripting, of course):<br/><br/>(Object Types are found under/within the 'Advanced' on the left side's &quot;tree of stuff&quot; or in the 'advenced' under/within the top menu bar's 'add' category)<br/><br/><pre><code>&lt;object name=&quot;room_1&quot;&gt;<br/>  &lt;inherit name=&quot;dungeon_object_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_2&quot;&gt;<br/>  &lt;inherit name=&quot;world_object_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_3&quot;&gt;<br/>  &lt;inherit name=&quot;dungeon_object_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_4&quot;&gt;<br/>  &lt;inherit name=&quot;world_object_type&quot; /&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;dungeon_object_type&quot;&gt;<br/>  &lt;attr name=&quot;YOUR_VERBS_NAME&quot; type=&quot;script&quot;&gt;<br/>    // your dungeon Verb's script(s)<br/>  &lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>// optional extra object types&#58;<br/>&lt;type name=&quot;world_object_type&quot;&gt;<br/>  &lt;attr name=&quot;YOUR_VERBS_NAME&quot; type=&quot;script&quot;&gt;<br/>    // your world Verb's script(s)<br/>  &lt;/attr&gt;<br/>&lt;/type&gt;</code></pre><br/><br/>--------------------<br/><br/>Commands:<br/><br/>Commands are different in that they take in typed-in input during game play (so they're universal, not tied to a specific Object like a Verb), examples:<br/><br/><pre><code>// this Command, upon typing in 'info' during game play, will only display your currently controlled character (Player Object)&#58;<br/><br/>&lt;object name=&quot;player&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;HK&lt;/attr&gt;<br/>  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;18&lt;/attr&gt; // I wish I was still 18, lol<br/>  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;<br/>  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;<br/>  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;<br/>  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;warrior&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;player_2&quot;&gt;<br/>  &lt;feature_player /&gt; // this is how you set/tell quest that this Object can be a Player Object (what it does through using the GUI~Editor's option), and I think this ('&lt;feature_player&gt;') is syntax shorthand for&#58; &lt;attr name=&quot;feature_player&quot; type=&quot;boolean&quot;&gt;true&lt;/attr&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;Mike&lt;/attr&gt;<br/>  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;<br/>  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;<br/>  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;human&lt;/attr&gt;<br/>  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;wizard&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;monster_1&quot;&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>  &lt;attr name=&quot;age_integer_attribute&quot; type=&quot;int&quot;&gt;30&lt;/attr&gt;<br/>  &lt;attr name=&quot;age_string_attribute&quot; type=&quot;string&quot;&gt;adult&lt;/attr&gt;<br/>  &lt;attr name=&quot;sex_string_attribute&quot; type=&quot;string&quot;&gt;male&lt;/attr&gt;<br/>  &lt;attr name=&quot;race_string_attribute&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>  &lt;attr name=&quot;class_string_attribute&quot; type=&quot;string&quot;&gt;berserker&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;command name=&quot;static_character_information_screen_command&quot;&gt;<br/>  &lt;pattern&gt;info&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    ClearScreen<br/>    msg (&quot;Name&#58; &quot; + game&#46;pov&#46;alias)<br/>    msg (&quot;Age&#58; &quot; + game&#46;pov&#46;age_integer_attribute + &quot; (&quot; + game&#46;pov&#46;age_string_attribute + &quot;)&quot;)<br/>    msg (&quot;Sex&#58; &quot; + game&#46;pov&#46;sex_string_attribute)<br/>    msg (&quot;Race&#58; &quot; + game&#46;pov&#46;race_string_attribute)<br/>    msg (&quot;Class&#58; &quot; + game&#46;pov&#46;class_string_attribute)<br/>    wait {<br/>      ClearScreen<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>// Input&#58;<br/><br/>info<br/><br/>// Output&#58;<br/><br/>it'll either show the stats for 'player' or 'player_2' (due to using 'game&#46;pov' only --- otherwise, this would be limited to a single specified Object only), depending on which is the game&#46;pov (your currently controlled Player Object), but it will NOT show the stats for the 'monster_1'<br/><br/>VS<br/><br/>// this Command, upon typing in 'info (whatever object)' during game play, will display that inputted Object's information&#58;<br/><br/>&lt;command name=&quot;dynamic_character_information_screen_command&quot;&gt;<br/>  // you're not limited to a single parameter, and there's two types of parameters&#58; #text# / #textXXX# or #object# / #objectXXX#, as you can see, you parameter must start with '#text' or #object' and end of course with the '#'<br/>  &lt;pattern&gt;info #object_parameter#&lt;/pattern&gt;<br/>  &lt;script&gt;<br/>    ClearScreen<br/>    msg (&quot;Name&#58; &quot; + object_parameter&#46;alias)<br/>    msg (&quot;Age&#58; &quot; + object_parameter&#46;age_integer_attribute + &quot; (&quot; + object_parameter&#46;age_string_attribute + &quot;)&quot;)<br/>    msg (&quot;Sex&#58; &quot; + object_parameter&#46;sex_string_attribute)<br/>    msg (&quot;Race&#58; &quot; + object_parameter&#46;race_string_attribute)<br/>    msg (&quot;Class&#58; &quot; + object_parameter&#46;class_string_attribute)<br/>    wait {<br/>      ClearScreen<br/>    }<br/>  &lt;/script&gt;<br/>&lt;/command&gt;<br/><br/>// inputs&#58;<br/><br/>since we're using the '#object#' parameter, it means that quest will look for an Object with the same 'name' ID String Attribute as the inputted name, and if it can't find an Object with that 'name' ID String Attribute, it'll then look for an Object with an 'alias' String Attribute of that inputted name, and if it still fails, then it returns 'null' (so&#58; no error occurs if it can't find an Object, don't need to worry about coding to handle it not finding such an Object with the same 'name' ID String Attribute or 'alias' String Attribute)<br/><br/>info player<br/>info HK<br/>info player_2<br/>info Mike<br/>info monster_1<br/>info orc<br/><br/>outputs&#58;<br/><br/>it'll display (assuming the Object has those Attributes --- we should have coding to check if the Object has these Attributes too, but meh, this is just a quick example for you of using Commands) the stats of the inputted Object, so it can show the stats of any of the 3 Objects&#58; 'player', 'player_2', or 'monster_1'&#46;</code></pre><br/><br/>------------------------------------------------<br/><br/>* why a String (or Stringlist) is better than Booleans, example:<br/><br/>using Boolean Attributes:<br/><br/>// very cumbersome (BAD DESIGN!), but it does allow for easy/simple (coding-wise) use of having multiple (any combination of) effects at the same time:<br/>player.poisoned = false // change to 'true' when poisoned<br/>player.asleep = false // change to 'true' when put asleep<br/>player.stunned = false // etc etc etc<br/>player.paralyzed = false // etc etc etc<br/>player.petrified = false // etc etc etc<br/>player.silenced = false<br/>player.confused = false<br/>player.cursed = false<br/>player.undead = false<br/>player.dead = false<br/>player.unconscious = false<br/>etc etc etc Boolean Attributes (in this example of: conditions/effects/status_effects)<br/><br/>VS<br/><br/>using a String Attribute:<br/><br/>// NO cumbersome-ness (GOOD DESIGN!), but limited to only a single effect at a time:<br/><br/>player.condition = &quot;normal&quot; // change to &quot;whatever effect/condition/status_effect&quot; when it happens to the 'player' Player Object:<br/>// player.condition = &quot;poisoned&quot;<br/>// player.condition = &quot;asleep&quot;<br/><br/>VS<br/><br/>using a Stringlist Attribute:<br/><br/>// some Cumbersome-ness in the extra coding needed but this can't be helped as it's a List (it's still a GOOD DESIGN! it's probably better than using gazillions of Boolean Attributes --- just for your own sanity, the fewer the Attributes you got to create and handle the better for you personally, lol --- , well unless you only have a few effects/condtions/whatever, but for large amounts, Lists are probably better than Booleans - at least if you can easily create the coding needed with using lists and/or for your game design needs, if you want/need to have multiple conditions at the same time):<br/><br/>player.condition_list = split (&quot;normal&quot;, &quot;;&quot;)<br/><br/>say you (want to) get/be poisoned and petrified:<br/><br/>player.condition_list = split (&quot;poisoned;petrified&quot;, &quot;;&quot;)<br/>~ OR ~<br/>list remove (player.condition_list, &quot;normal&quot;)<br/>list add (player.condition_list, &quot;poisoned&quot;)<br/>list add (player.condition_list, &quot;petrified&quot;)",
      "PostDate": "2016-06-26T06:33:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43763",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you do want to go the scripting route (e.g. if you need to have the verb or command in multiple rooms - hmm, I've never tried having base types for commands to put the common code in one place), you'd be better off keying the verb activity off of a flag in the desired rooms rather than adding an &quot;if&quot; for the name of each. That way, you can have a single &quot;if&quot; (e.g. if (HasAttribute(player.pov, &quot;doverbhere&quot;)) which doesn't need to know about the rooms, and then you can simply mark each room by setting that attribute. It will apply in those rooms, and it won't in the ones without the attribute. You can also use types to mark a room instead ( if (DoesInherit(player.pov, &quot;verbisactivehere&quot;) ).\n\nEither way, listing all the room names in &quot;if&quot;s is probably the least desirable way to go, because then one routine is required to have knowledge about all the places it's used (this is known as &quot;tight coupling&quot;, which is generally a bad thing to have in programming).",
      "EditableFormat": "bbcode",
      "HTML": "If you do want to go the scripting route (e.g. if you need to have the verb or command in multiple rooms - hmm, I've never tried having base types for commands to put the common code in one place), you'd be better off keying the verb activity off of a flag in the desired rooms rather than adding an &quot;if&quot; for the name of each. That way, you can have a single &quot;if&quot; (e.g. if (HasAttribute(player.pov, &quot;doverbhere&quot;)) which doesn't need to know about the rooms, and then you can simply mark each room by setting that attribute. It will apply in those rooms, and it won't in the ones without the attribute. You can also use types to mark a room instead ( if (DoesInherit(player.pov, &quot;verbisactivehere&quot;) ).<br/><br/>Either way, listing all the room names in &quot;if&quot;s is probably the least desirable way to go, because then one routine is required to have knowledge about all the places it's used (this is known as &quot;tight coupling&quot;, which is generally a bad thing to have in programming).",
      "PostDate": "2016-06-26T07:00:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43771",
      "UserId": 0,
      "Username": "Deckrect",
      "UserAvatar": null,
      "UserGravatar": "13c7167a5f539c7d2d1ce248f7dbbdfe",
      "EditableText": "Hahahaha. I confess took some time until I get able to understand the proposals here. \n\nBy default, when I see something like command in Quest editor I just skip. It sound too important and too high level for my skills. I suppose would be a nice moment to study commands. \n\nLets take a look on two actual cases. One is the sing verb. I want a singer character be able to sing a song. However, I don't want it happens during all the game. It may sing when at the stage, during a scene cheering up a girl, during a dinner and other situations /rooms. However, each time it sings, a different massage will be displayed taking in account the place and audience reaction. When singing at other places, different massages will be printed instead of just saying &quot;you can't do that&quot;\n\nAnother case is that I plan using a Drama point. It is recurring in my projects, just changing name as desired. \n\nThe idea for this specific project is that the player may use the verb / command to Invoke the drama on something. It works as both a hint system or a task resolution, depending on the situation. When used on a talisman, it reveals a secret opening, when used on an enemy, allows winning a fight or when used in a room, hints a secret passage. That is why I am pursuing so much case by case solutions instead of general commands.",
      "EditableFormat": "bbcode",
      "HTML": "Hahahaha. I confess took some time until I get able to understand the proposals here. <br/><br/>By default, when I see something like command in Quest editor I just skip. It sound too important and too high level for my skills. I suppose would be a nice moment to study commands. <br/><br/>Lets take a look on two actual cases. One is the sing verb. I want a singer character be able to sing a song. However, I don't want it happens during all the game. It may sing when at the stage, during a scene cheering up a girl, during a dinner and other situations /rooms. However, each time it sings, a different massage will be displayed taking in account the place and audience reaction. When singing at other places, different massages will be printed instead of just saying &quot;you can't do that&quot;<br/><br/>Another case is that I plan using a Drama point. It is recurring in my projects, just changing name as desired. <br/><br/>The idea for this specific project is that the player may use the verb / command to Invoke the drama on something. It works as both a hint system or a task resolution, depending on the situation. When used on a talisman, it reveals a secret opening, when used on an enemy, allows winning a fight or when used in a room, hints a secret passage. That is why I am pursuing so much case by case solutions instead of general commands.",
      "PostDate": "2016-06-26T11:47:49+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43774",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "For the &quot;sing&quot; case, I think you definitely want a command instead of a verb, as a verb requires a target object, and you wouldn't do something like &quot;sing book&quot; or &quot;sing apple&quot;. And even if it's &quot;sing song&quot;, there wouldn't be a visible &quot;song&quot; object to physically target.\n\nIf you go the &quot;local command to room&quot; approach, then it will work for what you want for &quot;sing&quot;, as each instance has a different effect, and there's no need to have a single global command with all the unrelated cases in it. The problem with having the commands in each room is that when you're outside one of those rooms, Quest will respond to &quot;sing&quot; with something like &quot;I don't understand what you mean&quot; instead of &quot;This isn't a good place to sing.&quot; You can solve that by actually creating a global sing command that does nothing besides print out your default &quot;No singing here&quot; message. Then override it in the rooms you wish to have it actually do something.\n\nThe &quot;Drama&quot; point I'm not sure about, as you didn't give an example of what would be typed. But if you will be using it on an object (&quot;use drama on talisman&quot;), then that would be using the built in &quot;use&quot; system, and if it's more &quot;Drama talisman&quot;, then that could be a verb. Or not, depending on what you want to do. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "For the &quot;sing&quot; case, I think you definitely want a command instead of a verb, as a verb requires a target object, and you wouldn't do something like &quot;sing book&quot; or &quot;sing apple&quot;. And even if it's &quot;sing song&quot;, there wouldn't be a visible &quot;song&quot; object to physically target.<br/><br/>If you go the &quot;local command to room&quot; approach, then it will work for what you want for &quot;sing&quot;, as each instance has a different effect, and there's no need to have a single global command with all the unrelated cases in it. The problem with having the commands in each room is that when you're outside one of those rooms, Quest will respond to &quot;sing&quot; with something like &quot;I don't understand what you mean&quot; instead of &quot;This isn't a good place to sing.&quot; You can solve that by actually creating a global sing command that does nothing besides print out your default &quot;No singing here&quot; message. Then override it in the rooms you wish to have it actually do something.<br/><br/>The &quot;Drama&quot; point I'm not sure about, as you didn't give an example of what would be typed. But if you will be using it on an object (&quot;use drama on talisman&quot;), then that would be using the built in &quot;use&quot; system, and if it's more &quot;Drama talisman&quot;, then that could be a verb. Or not, depending on what you want to do. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2016-06-26T15:36:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43775",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote:1535iqeq]why a String (or Stringlist) is better than Booleans, example:\n\nusing Boolean Attributes:\n\n// very cumbersome (BAD DESIGN!), but it does allow for easy/simple (coding-wise) use of having multiple (any combination of) effects at the same time:\nplayer.poisoned = false // change to 'true' when poisoned\nplayer.asleep = false // change to 'true' when put asleep\nplayer.stunned = false // etc etc etc\nplayer.paralyzed = false // etc etc etc\nplayer.petrified = false // etc etc etc\nplayer.silenced = false\nplayer.confused = false\nplayer.cursed = false\nplayer.undead = false\nplayer.dead = false\nplayer.unconscious = false\netc etc etc Boolean Attributes (in this example of: conditions/effects/status_effects)[/quote:1535iqeq]\nIf there is only a single &quot;condition&quot; state, then using bools *would* be bad, since only one would be active at a time. So, yes, in the case you're describing, what you actually have is an enumerated type, and you should code it that way. That doesn't mean bools are bad in general. In fact, if you needed multiple state flags set at once, it would be a good way. No language feature is good or bad on its own. It comes down to what's needed.\n\nAnd the code you posted isn't really applicable to what we're talking about here, nor is it what I was referring to (assuming you went back and made all those edits with comments after my response based on what I had said, which I'm not sure but seems likely since you're critiquing the use of flags, which I had suggested, but in a different unrelated context).\n\nThe best case (as usual) is to avoid script you don't need and use the built-in facilities in the language (any language) to make life easier when possible. In this case, the &quot;verb/command in a room&quot; ability works as desired, and even going the route of types to identify rooms (which I had suggested) would be overkill, now that the needs are known.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>why a String (or Stringlist) is better than Booleans, example:<br/><br/>using Boolean Attributes:<br/><br/>// very cumbersome (BAD DESIGN!), but it does allow for easy/simple (coding-wise) use of having multiple (any combination of) effects at the same time:<br/>player.poisoned = false // change to 'true' when poisoned<br/>player.asleep = false // change to 'true' when put asleep<br/>player.stunned = false // etc etc etc<br/>player.paralyzed = false // etc etc etc<br/>player.petrified = false // etc etc etc<br/>player.silenced = false<br/>player.confused = false<br/>player.cursed = false<br/>player.undead = false<br/>player.dead = false<br/>player.unconscious = false<br/>etc etc etc Boolean Attributes (in this example of: conditions/effects/status_effects)</p></blockquote><br/>If there is only a single &quot;condition&quot; state, then using bools *would* be bad, since only one would be active at a time. So, yes, in the case you're describing, what you actually have is an enumerated type, and you should code it that way. That doesn't mean bools are bad in general. In fact, if you needed multiple state flags set at once, it would be a good way. No language feature is good or bad on its own. It comes down to what's needed.<br/><br/>And the code you posted isn't really applicable to what we're talking about here, nor is it what I was referring to (assuming you went back and made all those edits with comments after my response based on what I had said, which I'm not sure but seems likely since you're critiquing the use of flags, which I had suggested, but in a different unrelated context).<br/><br/>The best case (as usual) is to avoid script you don't need and use the built-in facilities in the language (any language) to make life easier when possible. In this case, the &quot;verb/command in a room&quot; ability works as desired, and even going the route of types to identify rooms (which I had suggested) would be overkill, now that the needs are known.",
      "PostDate": "2016-06-26T15:45:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43779",
      "UserId": 0,
      "Username": "Deckrect",
      "UserAvatar": null,
      "UserGravatar": "13c7167a5f539c7d2d1ce248f7dbbdfe",
      "EditableText": "Oh, Jay. I really appreciate the use of flags. I cannot do everything I want with it, but every time I am about using a string attribute, I pause and wonder if I would use a boolean. \n\nThrough this thread you two guys gave me a clear insight about what commands and verbs are and how they work as well.  \n\nI suppose that many of my problems, including the sing stuff, would be solved by a local command. However I am not yet sure about how implementing this. \n\nTalking about the dramatic drama thing drama, I guess you, Jay, is absolutely right about the verb approach. I guess I was just not thinking clearly. Perhaps I could hide on the relevant objects a verb named drama and the player would type &quot;drama villain &quot; in order to defeat the villain object in a direct and simple way. I can do the same on other objects for different effects. Each time the player &quot;dramas&quot; an Object, it responds with a useful different effect related to the Object itself. \n\nAs I said once somewhere in the forum, I really prefer using the GUI and the tools Quest offers than go messing around implementing codes I don't really understand fully as you, experts do. So, anything suggesting using built in resources is my best option. \n\nAnd talking about built-in, where may I find a list of built-in verbs, it's working and if it's possible editing it. One of the books in my game may be read. However Quest has this verb as default, but I could not figure how adapting the desired effect.",
      "EditableFormat": "bbcode",
      "HTML": "Oh, Jay. I really appreciate the use of flags. I cannot do everything I want with it, but every time I am about using a string attribute, I pause and wonder if I would use a boolean. <br/><br/>Through this thread you two guys gave me a clear insight about what commands and verbs are and how they work as well.  <br/><br/>I suppose that many of my problems, including the sing stuff, would be solved by a local command. However I am not yet sure about how implementing this. <br/><br/>Talking about the dramatic drama thing drama, I guess you, Jay, is absolutely right about the verb approach. I guess I was just not thinking clearly. Perhaps I could hide on the relevant objects a verb named drama and the player would type &quot;drama villain &quot; in order to defeat the villain object in a direct and simple way. I can do the same on other objects for different effects. Each time the player &quot;dramas&quot; an Object, it responds with a useful different effect related to the Object itself. <br/><br/>As I said once somewhere in the forum, I really prefer using the GUI and the tools Quest offers than go messing around implementing codes I don't really understand fully as you, experts do. So, anything suggesting using built in resources is my best option. <br/><br/>And talking about built-in, where may I find a list of built-in verbs, it's working and if it's possible editing it. One of the books in my game may be read. However Quest has this verb as default, but I could not figure how adapting the desired effect.",
      "PostDate": "2016-06-26T16:39:29+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43780",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "If you click the word Filter at the bottom left (below the object pane), and then select &quot;Show Library Elements&quot;, then it will show in all the built-in stuff: verbs, commands, types, etc. You can even pick one of the built-in elements and copy it into your game for editing (the button for that will appear in the top right of the screen when you select one of the built-ins).",
      "EditableFormat": "bbcode",
      "HTML": "If you click the word Filter at the bottom left (below the object pane), and then select &quot;Show Library Elements&quot;, then it will show in all the built-in stuff: verbs, commands, types, etc. You can even pick one of the built-in elements and copy it into your game for editing (the button for that will appear in the top right of the screen when you select one of the built-ins).",
      "PostDate": "2016-06-26T16:53:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43781",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Having said that, be aware that verbs are typically bare bones. Something like &quot;read&quot; will have no default behavior besides &quot;you can't read that&quot;. It's up to you to define the behavior in your object, and you can do that by selecting the object and then its &quot;Verbs&quot; tab and adding in the verb you want (e.g. read). It's usually better to define the verb before you try to add it to an object, if you want to create a new verb. Quest will auto-define a new verb for you from the object verb tab, but there have been problems with that approach.",
      "EditableFormat": "bbcode",
      "HTML": "Having said that, be aware that verbs are typically bare bones. Something like &quot;read&quot; will have no default behavior besides &quot;you can't read that&quot;. It's up to you to define the behavior in your object, and you can do that by selecting the object and then its &quot;Verbs&quot; tab and adding in the verb you want (e.g. read). It's usually better to define the verb before you try to add it to an object, if you want to create a new verb. Quest will auto-define a new verb for you from the object verb tab, but there have been problems with that approach.",
      "PostDate": "2016-06-26T16:56:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43783",
      "UserId": 0,
      "Username": "Deckrect",
      "UserAvatar": null,
      "UserGravatar": "13c7167a5f539c7d2d1ce248f7dbbdfe",
      "EditableText": "That's exactly the point. I tried the &quot;read&quot; verb on an item and the custom verbs tab complained it already existed. So I began to wonder how alter the built-in verbs to my endings.",
      "EditableFormat": "bbcode",
      "HTML": "That's exactly the point. I tried the &quot;read&quot; verb on an item and the custom verbs tab complained it already existed. So I began to wonder how alter the built-in verbs to my endings.",
      "PostDate": "2016-06-26T20:11:40+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43784",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "It is not complaining, it is being helpful. Just select &quot;read&quot; and then put in the custom text or script for that item.",
      "EditableFormat": "bbcode",
      "HTML": "It is not complaining, it is being helpful. Just select &quot;read&quot; and then put in the custom text or script for that item.",
      "PostDate": "2016-06-26T20:29:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43785",
      "UserId": 0,
      "Username": "Deckrect",
      "UserAvatar": null,
      "UserGravatar": "13c7167a5f539c7d2d1ce248f7dbbdfe",
      "EditableText": "That is what I will try doing next working session. I guess tomorrow we will know if the matter is solved and jump onto the next issue I will struggling with. I need finding a way to learn faster.",
      "EditableFormat": "bbcode",
      "HTML": "That is what I will try doing next working session. I guess tomorrow we will know if the matter is solved and jump onto the next issue I will struggling with. I need finding a way to learn faster.",
      "PostDate": "2016-06-26T20:49:03+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43786",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "There's not too much difference from Commands and Verbs, just different designs are used on their different ways that they can be implemented. So, you can use whichever you're more comfortable with.\n\nfrom your recent post explaining more about what you want... it seems more like you just need to know about using Functions (if you don't know about them already), as you can put your desired scripting into a Function, and then where-ever/when-ever you want to do that scripting (various Object's Verbs or within a global Command or various local:individual-room-only Commands) you just add in the GUI~Editor's 'call function' Script (using the function's name in its small rectangle text box of its big add box) or in code you literally just write/type in the Function's name. Of course the scripting within your Function will need to address whatever the needs that have already been talked about.\n\n-------\n\nSorry for my assumptions about code design Jay, I'm still just beginning in understanding code designs/etc, and obviously have got my assumptions wrong on some of this stuff, sighs. I was thinking more about as game maker, having lots of Attributes (especially via using Booleans) as opposed to less Attributes, is a lot more work for you, so when you can, I thought it would be better to use Strings and/or Lists to lessen the amount of Attributes, assumingly that overall even with the extra code scripting for/if using Lists, would be less than all the scripting needed to work with Booleans as well as having all those Boolean Attributes themselves. So, as can be seen, my understanding on design/efficiency/etc is still very limited/noobish/beginner, as I try to think about this stuff, being introduced to it more and more, as I'm learning more programming and especially from the assembly/computer architecture class. I'm in a learning phase trying to learn, and thus am making a lot of mistakes as I try to learn more about designs and/or efficiencies/how code processes work/etc.",
      "EditableFormat": "bbcode",
      "HTML": "There's not too much difference from Commands and Verbs, just different designs are used on their different ways that they can be implemented. So, you can use whichever you're more comfortable with.<br/><br/>from your recent post explaining more about what you want... it seems more like you just need to know about using Functions (if you don't know about them already), as you can put your desired scripting into a Function, and then where-ever/when-ever you want to do that scripting (various Object's Verbs or within a global Command or various local:individual-room-only Commands) you just add in the GUI~Editor's 'call function' Script (using the function's name in its small rectangle text box of its big add box) or in code you literally just write/type in the Function's name. Of course the scripting within your Function will need to address whatever the needs that have already been talked about.<br/><br/>-------<br/><br/>Sorry for my assumptions about code design Jay, I'm still just beginning in understanding code designs/etc, and obviously have got my assumptions wrong on some of this stuff, sighs. I was thinking more about as game maker, having lots of Attributes (especially via using Booleans) as opposed to less Attributes, is a lot more work for you, so when you can, I thought it would be better to use Strings and/or Lists to lessen the amount of Attributes, assumingly that overall even with the extra code scripting for/if using Lists, would be less than all the scripting needed to work with Booleans as well as having all those Boolean Attributes themselves. So, as can be seen, my understanding on design/efficiency/etc is still very limited/noobish/beginner, as I try to think about this stuff, being introduced to it more and more, as I'm learning more programming and especially from the assembly/computer architecture class. I'm in a learning phase trying to learn, and thus am making a lot of mistakes as I try to learn more about designs and/or efficiencies/how code processes work/etc.",
      "PostDate": "2016-06-27T00:31:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43788",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "HK, as with everything, it depends. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> And I was mostly mentioning it not as criticism but *because* I know you're learning, and I was hoping it would be helpful.",
      "EditableFormat": "bbcode",
      "HTML": "HK, as with everything, it depends. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> And I was mostly mentioning it not as criticism but *because* I know you're learning, and I was hoping it would be helpful.",
      "PostDate": "2016-06-27T01:03:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43789",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "it is very helpful, I appreciate the corrections/explanations, as it helps me build up a better/more-correct understanding of it! I must apologize, if I came off badly in my post. I didn't mean that at all, sighs. I had only intended to explain that I'm just giving my best understanding of things as I try to help others understand these things, but that understanding of mine is still limited, beginning level, and often incorrect. I learn best by trial and error, I throw out/post my understanding, and it gets corrected/explained by others, hehe:D Is this post correct? no, here's why it is not and here is what is correct. Thank you, now I've learned something from my mistakes and through a trial and error of my use of ideas/presumed-underandings process!",
      "EditableFormat": "bbcode",
      "HTML": "it is very helpful, I appreciate the corrections/explanations, as it helps me build up a better/more-correct understanding of it! I must apologize, if I came off badly in my post. I didn't mean that at all, sighs. I had only intended to explain that I'm just giving my best understanding of things as I try to help others understand these things, but that understanding of mine is still limited, beginning level, and often incorrect. I learn best by trial and error, I throw out/post my understanding, and it gets corrected/explained by others, hehe:D Is this post correct? no, here's why it is not and here is what is correct. Thank you, now I've learned something from my mistakes and through a trial and error of my use of ideas/presumed-underandings process!",
      "PostDate": "2016-06-27T01:21:08+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43790",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Well, I must say, given the way your posts have been as of late, you have learned quite well. And we all have much to learn. Sheesh, I feel out of date sometimes. lol",
      "EditableFormat": "bbcode",
      "HTML": "Well, I must say, given the way your posts have been as of late, you have learned quite well. And we all have much to learn. Sheesh, I feel out of date sometimes. lol",
      "PostDate": "2016-06-27T01:23:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "43791",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "well... I'm hitting a bit of a plateau in my progression, sighs. But, I've come a long ways from having started from nothing, thanks to quest, you, pixie, pertex, and all the others here, and also the programming classes I've been taking now, despite me not being that smart and programming (and the math and physics/electronics/logic also involved, argh, lol) being indeed difficult to learn, as it's a major field of study / school-carreer choice/path, that I hope I can make it through to (at least) a bacheler's in CS, lol. I got a long ways to go... the math and physics I got to also learn scares me a bit... sighs. I started to struggle in math upon hitting calculus and I've never really learned/delved into physics at all either (all I had was a basic physics class in high school and never done any robotics/engineering stuff on my own as hobby/whatever).",
      "EditableFormat": "bbcode",
      "HTML": "well... I'm hitting a bit of a plateau in my progression, sighs. But, I've come a long ways from having started from nothing, thanks to quest, you, pixie, pertex, and all the others here, and also the programming classes I've been taking now, despite me not being that smart and programming (and the math and physics/electronics/logic also involved, argh, lol) being indeed difficult to learn, as it's a major field of study / school-carreer choice/path, that I hope I can make it through to (at least) a bacheler's in CS, lol. I got a long ways to go... the math and physics I got to also learn scares me a bit... sighs. I started to struggle in math upon hitting calculus and I've never really learned/delved into physics at all either (all I had was a basic physics class in high school and never done any robotics/engineering stuff on my own as hobby/whatever).",
      "PostDate": "2016-06-27T01:34:10+01:00",
      "LastEditDate": null
    }
  ]
}
