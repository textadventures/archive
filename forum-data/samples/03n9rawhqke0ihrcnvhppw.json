{
  "Topic": {
    "TopicId": "03n9rawhqke0ihrcnvhppw",
    "ForumId": "18",
    "Title": "Quest Object Links within HTML Table?  [Super Solved]",
    "LastUpdated": "2018-12-02T01:51:40.3365131Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "006a1071-d80e-4713-8dd4-769dd347765c",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is this doable?  I made an HTML table by piecing together several strings and printing it in javascript like so:\r\n```\r\n$(\"#marketPane\").html(t)\r\n```\r\n...where (t) contains a long string of HTML.  However, in the HTML table, there are objects that are printed that I want to make Quest object links instead, so the player can just click on them and see the list of displayverbs.\r\n\r\nAmong other things, I tried using the text processor {object:whatever}, putting that into the string of HTML but couldn't get that to work:\r\n```\r\n\"<td>{object:whatever}</td>\"  // this is just printed out literally\r\n\"<td>{eval:{object:whatever}}</td>\"  // same\r\n\"<td>\" + {object:whatever} + \"</td>\"  // error message\r\n```\r\nI also tried fiddling with the ```GetDisplayVerbs``` built-in function, calling it with an object's string name as an argument, but I either got errors or nothing at all:\r\n```\r\n<a onclick=\\\"ASLEvent('GetDisplayVerbs', 'object.name');\\\"></a>\r\n```\r\nIs this even doable?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Is this doable?  I made an HTML table by piecing together several strings and printing it in javascript like so:</p>\n<pre><code>$(\"#marketPane\").html(t)\n</code></pre>\n<p>...where (t) contains a long string of HTML.  However, in the HTML table, there are objects that are printed that I want to make Quest object links instead, so the player can just click on them and see the list of displayverbs.</p>\n<p>Among other things, I tried using the text processor {object:whatever}, putting that into the string of HTML but couldn't get that to work:</p>\n<pre><code>\"&lt;td&gt;{object:whatever}&lt;/td&gt;\"  // this is just printed out literally\n\"&lt;td&gt;{eval:{object:whatever}}&lt;/td&gt;\"  // same\n\"&lt;td&gt;\" + {object:whatever} + \"&lt;/td&gt;\"  // error message\n</code></pre>\n<p>I also tried fiddling with the <code>GetDisplayVerbs</code> built-in function, calling it with an object's string name as an argument, but I either got errors or nothing at all:</p>\n<pre><code>&lt;a onclick=\\\"ASLEvent('GetDisplayVerbs', 'object.name');\\\"&gt;&lt;/a&gt;\n</code></pre>\n<p>Is this even doable?</p>\n\n",
      "PostDate": "2018-12-02T01:51:40.3365131Z",
      "LastEditDate": "2018-12-15T06:11:03.9983556Z",
      "link": null
    },
    {
      "PostId": "486e24c1-a0e4-4f55-921d-68de00c46b5d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You want to use Quest's `ProcessText()` function to turn the text processor directives into HTML before you pass them to the javascript.\r\n\r\nFor example `t = ProcessText(\"{object:whatever}\")` will set the variable t to a string like: `<a id=\"verblink1234\" style=\"font-face: FogLihtenNo04, Scrambled Tofu; color: puce\" class=\"cmdlink elementmenu\" data-elementid=\"whatever\">Whatever Object</a>`.\r\n\r\nIf you're using **Quest** to assemble the string `t` and then pass it to Javascript, just call ProcessText on the string first.\r\n\r\nIf you're using **javascript** code to generate the link, then you'll need to set it up like the example I gave there. The minimum working link will be `<a  class=\"cmdlink elementmenu\" data-elementid=\"objectname\">link text</a>`. The `elementmenu` class causes the link to display a verbs menu when it is clicked.\r\n\r\nOne possible problem with that: At the end of every turn, Quest runs the function `UpdateObjectLinks`, which sends to javascript a list of all objects currently visible, and their displayverbs. This then calls the javascript function UpdateObjectLinks which goes through all visible links and either creates the verb menu ready for when they're clicked on, or disables them if you can no longer see that object. So if you create an object link in javascript, it won't work until Quest's \"end of turn\" cleanup runs. If your javascript was started from within Quest, this is still fine. If not, you will probably want to run `ASLEvent('UpdateObjectLinks')` to force it to fill in the menmu data for your new link.",
      "EditableFormat": "markdown",
      "HTML": "<p>You want to use Quest's <code>ProcessText()</code> function to turn the text processor directives into HTML before you pass them to the javascript.</p>\n<p>For example <code>t = ProcessText(\"{object:whatever}\")</code> will set the variable t to a string like: <code>&lt;a id=\"verblink1234\" style=\"font-face: FogLihtenNo04, Scrambled Tofu; color: puce\" class=\"cmdlink elementmenu\" data-elementid=\"whatever\"&gt;Whatever Object&lt;/a&gt;</code>.</p>\n<p>If you're using <strong>Quest</strong> to assemble the string <code>t</code> and then pass it to Javascript, just call ProcessText on the string first.</p>\n<p>If you're using <strong>javascript</strong> code to generate the link, then you'll need to set it up like the example I gave there. The minimum working link will be <code>&lt;a class=\"cmdlink elementmenu\" data-elementid=\"objectname\"&gt;link text&lt;/a&gt;</code>. The <code>elementmenu</code> class causes the link to display a verbs menu when it is clicked.</p>\n<p>One possible problem with that: At the end of every turn, Quest runs the function <code>UpdateObjectLinks</code>, which sends to javascript a list of all objects currently visible, and their displayverbs. This then calls the javascript function UpdateObjectLinks which goes through all visible links and either creates the verb menu ready for when they're clicked on, or disables them if you can no longer see that object. So if you create an object link in javascript, it won't work until Quest's \"end of turn\" cleanup runs. If your javascript was started from within Quest, this is still fine. If not, you will probably want to run <code>ASLEvent('UpdateObjectLinks')</code> to force it to fill in the menmu data for your new link.</p>\n\n",
      "PostDate": "2018-12-02T09:31:01.657727Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cd303aa0-7a84-40be-833d-627a0eeb7d03",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Partial success!  I'm assembling the string ```t``` in Quest and then passing it to JS.  So ```ProcessText(\"{object:whatever}\")``` works to print the alias of the object, but it still doesn't display as a clickable object link.  I'm going to try ```ASLEvent('UpdateObjectLinks')``` next...",
      "EditableFormat": "markdown",
      "HTML": "<p>Partial success!  I'm assembling the string <code>t</code> in Quest and then passing it to JS.  So <code>ProcessText(\"{object:whatever}\")</code> works to print the alias of the object, but it still doesn't display as a clickable object link.  I'm going to try <code>ASLEvent('UpdateObjectLinks')</code> next...</p>\n\n",
      "PostDate": "2018-12-02T10:25:41.6622631Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e0444360-d156-46f8-8d18-7d55c690c04a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You don't need to call UpdateObjectLinks manually if you're sending the string from Quest; it's done automatically after running turnscripts every turn.\r\n\r\nIf the link isn't clickable, it probably means the object isn't visible. Like when the player leaves a room, all the objects in that room become non-clickable.\r\n\r\nThere's two ways around this, if you really want a verb menu to be displayed for objects that aren't visible. One is to modify the UpdateObjectLinks function so that it includes all the objects you want when it's compiling its list of which objects should have links. The other is to override the javascript (I can show you the code for that when I get back, if you need it).",
      "EditableFormat": "markdown",
      "HTML": "<p>You don't need to call UpdateObjectLinks manually if you're sending the string from Quest; it's done automatically after running turnscripts every turn.</p>\n<p>If the link isn't clickable, it probably means the object isn't visible. Like when the player leaves a room, all the objects in that room become non-clickable.</p>\n<p>There's two ways around this, if you really want a verb menu to be displayed for objects that aren't visible. One is to modify the UpdateObjectLinks function so that it includes all the objects you want when it's compiling its list of which objects should have links. The other is to override the javascript (I can show you the code for that when I get back, if you need it).</p>\n\n",
      "PostDate": "2018-12-02T12:01:18.5764385Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d83ddca5-728c-4a74-8579-212edd357211",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This post may contain sensitive material.\r\n\r\n<details>\r\n\r\n\r\nThis works for me in Quest 5.7.2 (which is what's installed on this old Windows 7 machine I am currently using).\r\n\r\nAt first, it didn't work, then I realized I'd changed the defaults in Quest on this machine, and the hyperlinks were disabled by default.  Once I enabled the hyperlinks, it miraculously worked for me!\r\n\r\n```\r\n<!--Saved by Quest 5.7.6729.435-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Table with Object Link\">\r\n    <gameid>b6723229-eb97-4ab6-84d6-4da010311753</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <enablehyperlinks />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[<table><tr><th>OBJECT:</th></tr><tr><td>{object:dildo}</td></tr></table>]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"dildo\">\r\n      <inherit name=\"editor_object\" />\r\n      <look><![CDATA[It has an inscription which reads:<br/><br/>PROPERTY OF XM]]></look>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/49340015-b069f600-f5ff-11e8-83c1-f6356131a75f.png)\r\n\r\n---\r\nTo add a little JS to the mix, I gave my ```<td>``` an id of ```table-object1``` and added a **test** command to change the text:\r\n\r\n```\r\n<!--Saved by Quest 5.7.6729.435-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Table with Object Link\">\r\n    <gameid>b6723229-eb97-4ab6-84d6-4da010311753</gameid>\r\n    <version>2.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <enablehyperlinks />\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description><![CDATA[<table><tr><th>OBJECT:</th></tr><tr><td id=\"table-object1\">{object:dildo}</td></tr></table>]]></description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"dildo\">\r\n      <inherit name=\"editor_object\" />\r\n      <look><![CDATA[It has an inscription which reads:<br/><br/>PROPERTY OF XM]]></look>\r\n    </object>\r\n  </object>\r\n  <command name=\"test\">\r\n    <pattern>test</pattern>\r\n    <script>\r\n      t = ProcessText(\"{object:dildo:sex toy}\")\r\n      JS.eval (\"$('#table-object1').html('\" + t + \"');\")\r\n    </script>\r\n  </command>\r\n</asl>\r\n```\r\n\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/49340256-0be9b300-f603-11e8-85c9-cc1ad22fdd2a.png)\r\n\r\n</details>\r\n\r\n---\r\n**EDIT**\r\n\r\nI'm bad about not refreshing my page before posting things. MrAngel is probably onto something, but I didn't see his post about how maybe the object wasn't in scope until I'd already posted this.",
      "EditableFormat": "markdown",
      "HTML": "<p>This post may contain sensitive material.</p>\n<details>\n<p>This works for me in Quest 5.7.2 (which is what's installed on this old Windows 7 machine I am currently using).</p>\n<p>At first, it didn't work, then I realized I'd changed the defaults in Quest on this machine, and the hyperlinks were disabled by default.  Once I enabled the hyperlinks, it miraculously worked for me!</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6729.435--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Table with Object Link\"&gt;\n    &lt;gameid&gt;b6723229-eb97-4ab6-84d6-4da010311753&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;enablehyperlinks /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;table&gt;&lt;tr&gt;&lt;th&gt;OBJECT:&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;{object:dildo}&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"dildo\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;&lt;![CDATA[It has an inscription which reads:&lt;br/&gt;&lt;br/&gt;PROPERTY OF XM]]&gt;&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49340015-b069f600-f5ff-11e8-83c1-f6356131a75f.png\" alt=\"image\"></p>\n<hr>\n<p>To add a little JS to the mix, I gave my <code>&lt;td&gt;</code> an id of <code>table-object1</code> and added a <strong>test</strong> command to change the text:</p>\n<pre><code>&lt;!--Saved by Quest 5.7.6729.435--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Table with Object Link\"&gt;\n    &lt;gameid&gt;b6723229-eb97-4ab6-84d6-4da010311753&lt;/gameid&gt;\n    &lt;version&gt;2.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;enablehyperlinks /&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description&gt;&lt;![CDATA[&lt;table&gt;&lt;tr&gt;&lt;th&gt;OBJECT:&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td id=\"table-object1\"&gt;{object:dildo}&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;]]&gt;&lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"dildo\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;&lt;![CDATA[It has an inscription which reads:&lt;br/&gt;&lt;br/&gt;PROPERTY OF XM]]&gt;&lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"test\"&gt;\n    &lt;pattern&gt;test&lt;/pattern&gt;\n    &lt;script&gt;\n      t = ProcessText(\"{object:dildo:sex toy}\")\n      JS.eval (\"$('#table-object1').html('\" + t + \"');\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49340256-0be9b300-f603-11e8-85c9-cc1ad22fdd2a.png\" alt=\"image\"></p>\n</details>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>I'm bad about not refreshing my page before posting things. MrAngel is probably onto something, but I didn't see his post about how maybe the object wasn't in scope until I'd already posted this.</p>\n\n",
      "PostDate": "2018-12-02T12:56:18.8020263Z",
      "LastEditDate": "2018-12-02T15:27:49.0534136Z",
      "link": null
    },
    {
      "PostId": "a88fde71-03ff-4e5f-8c27-4d27e470c697",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just because it's buzzing around in my head now, here's some javascript that will make the verbs menu display for an object that isn't visible:\r\n\r\n```\r\n$(function () {\r\n  var forcedVerbs = {};\r\n  var original_updateObjectLinks = updateObjectLinks;\r\n  updateObjectLinks = function(data) {\r\n    original_updateObjectLinks($.extend(data, forcedVerbs));\r\n  };\r\n  forceLinkVerbs = function (object, verbs) {\r\n    if (verbs) {\r\n      forcedVerbs[object] = verbs;\r\n    } else {\r\n      delete (forcedVerbs[object]);\r\n    }\r\n  };\r\n});\r\n```\r\nor if you're on the web version:\r\n```\r\nJS.eval(\"$(function() {var fv={};var uol=updateObjectLinks;updateObjectLinks=function(d) {uol($.extend(d,fv));};forceLinkVerbs=function(i,vb) {if(vb) {fv[i]=vb;} else {delete (fv[i]);}};});\")\r\n```\r\n\r\nThen you can do something like `JS.forceLinkVerbs(\"jenny\", \"call/think about/look for\")` in Quest, immediately after printing out `{object:jenny}`, to make your verbs appear. The verbs passed to this function will be displayed instead of the object's displayverbs or inventoryverbs, and will stop the object link being disabled when it goes out of scope.\r\n\r\n(Note: If the object is visible, its regular displayverbs or inventoryverbs will still be used in the sidebar. This only modified object links)\r\n\r\n(Note2: Most built-in commands will generate a message like \"You can't see that\" if the object isn't reachable)\r\n\r\n(Note3: `JS.forceLinkVerbs(\"objectname\", \"\")` will restore the object's links to their default behaviour)\r\n\r\n(Note4: I'm typing this off the top of my head, so sorry if it has errors)",
      "EditableFormat": "markdown",
      "HTML": "<p>Just because it's buzzing around in my head now, here's some javascript that will make the verbs menu display for an object that isn't visible:</p>\n<pre><code>$(function () {\n  var forcedVerbs = {};\n  var original_updateObjectLinks = updateObjectLinks;\n  updateObjectLinks = function(data) {\n    original_updateObjectLinks($.extend(data, forcedVerbs));\n  };\n  forceLinkVerbs = function (object, verbs) {\n    if (verbs) {\n      forcedVerbs[object] = verbs;\n    } else {\n      delete (forcedVerbs[object]);\n    }\n  };\n});\n</code></pre>\n<p>or if you're on the web version:</p>\n<pre><code>JS.eval(\"$(function() {var fv={};var uol=updateObjectLinks;updateObjectLinks=function(d) {uol($.extend(d,fv));};forceLinkVerbs=function(i,vb) {if(vb) {fv[i]=vb;} else {delete (fv[i]);}};});\")\n</code></pre>\n<p>Then you can do something like <code>JS.forceLinkVerbs(\"jenny\", \"call/think about/look for\")</code> in Quest, immediately after printing out <code>{object:jenny}</code>, to make your verbs appear. The verbs passed to this function will be displayed instead of the object's displayverbs or inventoryverbs, and will stop the object link being disabled when it goes out of scope.</p>\n<p>(Note: If the object is visible, its regular displayverbs or inventoryverbs will still be used in the sidebar. This only modified object links)</p>\n<p>(Note2: Most built-in commands will generate a message like \"You can't see that\" if the object isn't reachable)</p>\n<p>(Note3: <code>JS.forceLinkVerbs(\"objectname\", \"\")</code> will restore the object's links to their default behaviour)</p>\n<p>(Note4: I'm typing this off the top of my head, so sorry if it has errors)</p>\n\n",
      "PostDate": "2018-12-02T17:08:05.7576645Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "72232c62-1d74-49cf-b360-7d4af2f739fd",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel\r\nThank you for your excellent info.  To make my objects visible, what if I just put them as scenery objects in the room? Although I am learning what I can from your code, I'm trying to stick to simpler solutions wherever possible, so that I can edit them myself.\r\n\r\n@KV\r\nIn your second code post, you have a line:\r\n```\r\nJS.eval (\"$('#table-object1').html('\" + t + \"');\")\r\n```\r\nI've been trying to do that as:\r\n```\r\nJS.eval (\"$('#table-object1').html(t);\")\r\n```\r\n...which of course didn't work.  So I've learned yet another thing!  (This syntax is so confusing and seemingly arbitrary.)  So I don't even need to send my ```t``` variable from Quest to a JS function to print it out; I can just do it all in Quest.\r\n\r\nOn a side note, you need a ```use``` verb on that toy.  I'm getting to know XanMag better too : )",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel<br>\nThank you for your excellent info.  To make my objects visible, what if I just put them as scenery objects in the room? Although I am learning what I can from your code, I'm trying to stick to simpler solutions wherever possible, so that I can edit them myself.</p>\n<p>@KV<br>\nIn your second code post, you have a line:</p>\n<pre><code>JS.eval (\"$('#table-object1').html('\" + t + \"');\")\n</code></pre>\n<p>I've been trying to do that as:</p>\n<pre><code>JS.eval (\"$('#table-object1').html(t);\")\n</code></pre>\n<p>...which of course didn't work.  So I've learned yet another thing!  (This syntax is so confusing and seemingly arbitrary.)  So I don't even need to send my <code>t</code> variable from Quest to a JS function to print it out; I can just do it all in Quest.</p>\n<p>On a side note, you need a <code>use</code> verb on that toy.  I'm getting to know XanMag better too : )</p>\n\n",
      "PostDate": "2018-12-02T23:28:23.6628062Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6fb696d3-6ad4-4c93-bfcb-9a77b61c1152",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">To make my objects visible, what if I just put them as scenery objects in the room?\r\n\r\nSo to answer my own question, designating objects as scenery disables their displayverbs list from showing up, even when their object links are displayed.  So that is not a solution.  I'm going to try modifying the ```UpdateObjectLinks``` function now...",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>To make my objects visible, what if I just put them as scenery objects in the room?</p>\n</blockquote>\n<p>So to answer my own question, designating objects as scenery disables their displayverbs list from showing up, even when their object links are displayed.  So that is not a solution.  I'm going to try modifying the <code>UpdateObjectLinks</code> function now...</p>\n\n",
      "PostDate": "2018-12-03T00:20:40.2960283Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f4c3e0b6-8b90-49e7-8c0d-cca4152e9c8f",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<b>Issue #1</b> - So here is the section of ```UpdateObjectLinks``` that, well, updates the object links:\r\n```\r\ndata = NewStringDictionary()\r\nforeach (object, ScopeVisible()) {\r\n  dictionary add (data, object.name, Join(GetDisplayVerbs(object), \"/\"))\r\n}\r\n----------------------------- I added this part (below) ----------------------------------------\r\nif (game.pov.parent = Market) {\r\n  foreach (item, game.data) {\r\n    dictionary add (data, item, Join(GetDisplayVerbs(object), \"/\"))\r\n  }\r\n}\r\n---------------------------- I added this part (above) ------------------------------------------\r\nJS.updateObjectLinks (data)\r\n```\r\nSo Quest puts all visible objects into a string dictionary called ```data```.  I just added my non-visible items (whose display verbs list I want shown/clickable) from my stringlist ```game.data``` into ```data```.  Then ```JS.updateObjectLinks (data)``` is run.  My non-visible items will show their object links, but clicking on the links still shows nothing, no displayverbs list.\r\n\r\n<b>Issue #2</b> - I want to display my non-visible objects in that long HTML string ```t```.  So if I do:\r\n```\r\n<td>{object:SpecificItemName}</td>\r\n```\r\n...that displays correctly.  But what if I want to use a variable instead of a specific object?  These don't work; they display literally:\r\n```\r\n<td>{object:variable}</td>\r\n<td>{object:variable.name}</td>\r\n<td>{object:{=variable}}</td>\r\n<td>{object:{=variable.name}}</td>\r\n```\r\nAny additional adult toy examples would be appreciated...",
      "EditableFormat": "markdown",
      "HTML": "<p><b>Issue #1</b> - So here is the section of <code>UpdateObjectLinks</code> that, well, updates the object links:</p>\n<pre><code>data = NewStringDictionary()\nforeach (object, ScopeVisible()) {\n  dictionary add (data, object.name, Join(GetDisplayVerbs(object), \"/\"))\n}\n----------------------------- I added this part (below) ----------------------------------------\nif (game.pov.parent = Market) {\n  foreach (item, game.data) {\n    dictionary add (data, item, Join(GetDisplayVerbs(object), \"/\"))\n  }\n}\n---------------------------- I added this part (above) ------------------------------------------\nJS.updateObjectLinks (data)\n</code></pre>\n<p>So Quest puts all visible objects into a string dictionary called <code>data</code>.  I just added my non-visible items (whose display verbs list I want shown/clickable) from my stringlist <code>game.data</code> into <code>data</code>.  Then <code>JS.updateObjectLinks (data)</code> is run.  My non-visible items will show their object links, but clicking on the links still shows nothing, no displayverbs list.</p>\n<p><b>Issue #2</b> - I want to display my non-visible objects in that long HTML string <code>t</code>.  So if I do:</p>\n<pre><code>&lt;td&gt;{object:SpecificItemName}&lt;/td&gt;\n</code></pre>\n<p>...that displays correctly.  But what if I want to use a variable instead of a specific object?  These don't work; they display literally:</p>\n<pre><code>&lt;td&gt;{object:variable}&lt;/td&gt;\n&lt;td&gt;{object:variable.name}&lt;/td&gt;\n&lt;td&gt;{object:{=variable}}&lt;/td&gt;\n&lt;td&gt;{object:{=variable.name}}&lt;/td&gt;\n</code></pre>\n<p>Any additional adult toy examples would be appreciated...</p>\n\n",
      "PostDate": "2018-12-03T01:58:43.7086305Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "26d81ff9-0e10-436a-9047-15e0a9c980f5",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, again answering one of my own questions...\r\n\r\nFor Issue #2, I should use ```game.text_processor_variables```, which is explained under http://docs.textadventures.co.uk/quest/text_processor.html (under \"Local variables\")\r\n\r\nUPDATE:  Issue #2 is back in play.  I couldn't get this to work right (sigh).\r\n\r\nUPDATE2:  In the text processor, I tried to use attributes instead of variables to display object links -- Quest doesn't seem to allow this as you can't nest the attribute within the ```{object:XXX}``` directive, as per my other post.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, again answering one of my own questions...</p>\n<p>For Issue #2, I should use <code>game.text_processor_variables</code>, which is explained under http://docs.textadventures.co.uk/quest/text_processor.html (under \"Local variables\")</p>\n<p>UPDATE:  Issue #2 is back in play.  I couldn't get this to work right (sigh).</p>\n<p>UPDATE2:  In the text processor, I tried to use attributes instead of variables to display object links -- Quest doesn't seem to allow this as you can't nest the attribute within the <code>{object:XXX}</code> directive, as per my other post.</p>\n\n",
      "PostDate": "2018-12-03T02:12:53.4793333Z",
      "LastEditDate": "2018-12-03T07:32:24.5169161Z",
      "link": null
    },
    {
      "PostId": "2ba682c6-7b81-4a92-b317-6e6cdccb4925",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tested the forced verb lists javascript above, and can confirm that it works.\r\n\r\n(I actually entered it in the javascript console on some random game, rather than creating one to test it. But it seems to work, and not to break the verb menu for other objects)\r\n\r\n> For Issue #2, I should use game.text_processor_variables,\r\n\r\nWhich version of Quest are you using?\r\ntext_processor_variables is new in 5.8\r\n\r\n> UPDATE2: In the text processor, I tried to use attributes instead of variables to display object links\r\n\r\nThat's a pretty sensible way to do it. Unfortunately, yes, this is a weakness of the text processor.\r\nIf you're writing Quest code, you could always take an object name before running the text processor. For example `t = \"{object:\" + obj.name + \"}\"` (leaves your variable `t` containing the string `{object:pencil}` which you can then pass to the text processor normally).\r\n\r\nIf you have a message which wants to get an object name from an attribute somewhere, you could also preprocess it.\r\nI think you might be able to do, for example, `someobject.someattribute = \"{object:pencil}\"`, and then later you can pass `\"{someobject.someattribute}\"` to the text processor.",
      "EditableFormat": "markdown",
      "HTML": "<p>I tested the forced verb lists javascript above, and can confirm that it works.</p>\n<p>(I actually entered it in the javascript console on some random game, rather than creating one to test it. But it seems to work, and not to break the verb menu for other objects)</p>\n<blockquote>\n<p>For Issue #2, I should use game.text_processor_variables,</p>\n</blockquote>\n<p>Which version of Quest are you using?<br>\ntext_processor_variables is new in 5.8</p>\n<blockquote>\n<p>UPDATE2: In the text processor, I tried to use attributes instead of variables to display object links</p>\n</blockquote>\n<p>That's a pretty sensible way to do it. Unfortunately, yes, this is a weakness of the text processor.<br>\nIf you're writing Quest code, you could always take an object name before running the text processor. For example <code>t = \"{object:\" + obj.name + \"}\"</code> (leaves your variable <code>t</code> containing the string <code>{object:pencil}</code> which you can then pass to the text processor normally).</p>\n<p>If you have a message which wants to get an object name from an attribute somewhere, you could also preprocess it.<br>\nI think you might be able to do, for example, <code>someobject.someattribute = \"{object:pencil}\"</code>, and then later you can pass <code>\"{someobject.someattribute}\"</code> to the text processor.</p>\n\n",
      "PostDate": "2018-12-03T15:20:30.2722417Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f25f9e07-da6a-4750-acea-ed3943aff2c9",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry it's taken me so long to respond; I have been busy all week long.  Just for the record, I am using Quest 5.8 on the desktop.\r\n\r\nThis is what I've got so far -- for the object links in my built-up ```t``` variable, I'm using ```\"{object:\" + obj.name + \"}\"```, as mrangel suggested (this is genius!).  Quest accepts this, but, by itself, this isn't enough to make the links appear as those objects aren't visible (though the font changes for some reason).  To make them full-fledged links, I added:\r\n```\r\nif (game.pov.parent = Market) {\r\n  foreach (item, game.data) {\r\n    dictionary add (data, item, Join(GetDisplayVerbs(object), \"/\"))\r\n  }\r\n}\r\n```\r\nto ```UpdateObjectLinks``` (as mentioned previously) in order to add my objects to Quest's ```data``` dictionary, making them \"visible\".  Now the links display but the displayverbs still don't show up when you click the link.  So I added mrangel's js code (above) to my .js script:\r\n```\r\n$(function enableObjectLinks() {\r\n  var forcedVerbs = {};\r\n  var original_updateObjectLinks = updateObjectLinks;\r\n  updateObjectLinks = function(data) {\r\n    original_updateObjectLinks($.extend(data, forcedVerbs));\r\n  };\r\n  forceLinkVerbs = function (object, verbs) {\r\n    if (verbs) {\r\n      forcedVerbs[object] = verbs;\r\n    } else {\r\n      delete (forcedVerbs[object]);\r\n    }\r\n  };\r\n});\r\n```\r\nI named the function ```enableObjectLinks``` and am calling it from my UserInitInterface tab.  I'm also supposed to call ```JS.forceLinkVerbs(\"myobject\", \"buy/sell\")``` immediately after my object links are printed.  This is my (relevant) code I'm using to print those in HTML:\r\n```\r\n$('#marketPane').html(t);\r\nsetCss (\".MPListing\", \"color:DarkCyan;\");\r\n```\r\n```#marketPane``` is the element that contains ```t``` (bear in mind that there are multiple object links in ```t```), and ```.MPListing``` is just the class id for any lines of HTML containing those object links.\r\n\r\n**Issue #1** Placing ```JS.forceLinkVerbs(\"myobject\", \"buy/sell\")``` on the next line of js code doesn't seem to do anything.  Do I have to call that js function inside the ```t``` variable?\r\n\r\n**Issue #2** I hate to bug you with this, but when the object links are printed, the color and font is changed.  Is there any way to change them to the right color/font?\r\n\r\nThanks again for all your help.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry it's taken me so long to respond; I have been busy all week long.  Just for the record, I am using Quest 5.8 on the desktop.</p>\n<p>This is what I've got so far -- for the object links in my built-up <code>t</code> variable, I'm using <code>\"{object:\" + obj.name + \"}\"</code>, as mrangel suggested (this is genius!).  Quest accepts this, but, by itself, this isn't enough to make the links appear as those objects aren't visible (though the font changes for some reason).  To make them full-fledged links, I added:</p>\n<pre><code>if (game.pov.parent = Market) {\n  foreach (item, game.data) {\n    dictionary add (data, item, Join(GetDisplayVerbs(object), \"/\"))\n  }\n}\n</code></pre>\n<p>to <code>UpdateObjectLinks</code> (as mentioned previously) in order to add my objects to Quest's <code>data</code> dictionary, making them \"visible\".  Now the links display but the displayverbs still don't show up when you click the link.  So I added mrangel's js code (above) to my .js script:</p>\n<pre><code>$(function enableObjectLinks() {\n  var forcedVerbs = {};\n  var original_updateObjectLinks = updateObjectLinks;\n  updateObjectLinks = function(data) {\n    original_updateObjectLinks($.extend(data, forcedVerbs));\n  };\n  forceLinkVerbs = function (object, verbs) {\n    if (verbs) {\n      forcedVerbs[object] = verbs;\n    } else {\n      delete (forcedVerbs[object]);\n    }\n  };\n});\n</code></pre>\n<p>I named the function <code>enableObjectLinks</code> and am calling it from my UserInitInterface tab.  I'm also supposed to call <code>JS.forceLinkVerbs(\"myobject\", \"buy/sell\")</code> immediately after my object links are printed.  This is my (relevant) code I'm using to print those in HTML:</p>\n<pre><code>$('#marketPane').html(t);\nsetCss (\".MPListing\", \"color:DarkCyan;\");\n</code></pre>\n<p><code>#marketPane</code> is the element that contains <code>t</code> (bear in mind that there are multiple object links in <code>t</code>), and <code>.MPListing</code> is just the class id for any lines of HTML containing those object links.</p>\n<p><strong>Issue #1</strong> Placing <code>JS.forceLinkVerbs(\"myobject\", \"buy/sell\")</code> on the next line of js code doesn't seem to do anything.  Do I have to call that js function inside the <code>t</code> variable?</p>\n<p><strong>Issue #2</strong> I hate to bug you with this, but when the object links are printed, the color and font is changed.  Is there any way to change them to the right color/font?</p>\n<p>Thanks again for all your help.</p>\n\n",
      "PostDate": "2018-12-09T06:42:23.2783778Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "56a71dc8-af04-41ef-aa34-e777f5941c53",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I named the function enableObjectLinks and am calling it\r\n\r\nDon't. The function should be unnamed, just like it was in the code I gave you, and the `$(` immediately before the `function ()` means it will call itself as soon as all the other JS files have been loaded.\r\n\r\n> Placing `JS.forceLinkVerbs(\"myobject\", \"buy/sell\")` on the next line of js code doesn't seem to do anything.\r\n\r\nThat's Quest code. If you're calling it from the javascript side, you just want:\r\n`forceLinkVerbs(\"myobject\", \"buy/sell\")`",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I named the function enableObjectLinks and am calling it</p>\n</blockquote>\n<p>Don't. The function should be unnamed, just like it was in the code I gave you, and the <code>$(</code> immediately before the <code>function ()</code> means it will call itself as soon as all the other JS files have been loaded.</p>\n<blockquote>\n<p>Placing <code>JS.forceLinkVerbs(\"myobject\", \"buy/sell\")</code> on the next line of js code doesn't seem to do anything.</p>\n</blockquote>\n<p>That's Quest code. If you're calling it from the javascript side, you just want:<br>\n<code>forceLinkVerbs(\"myobject\", \"buy/sell\")</code></p>\n\n",
      "PostDate": "2018-12-09T09:42:49.2443494Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "55982cd3-fc93-4a6e-b4d1-6fb8e9c8816c",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, I got rid of the new name and am not calling it in the UI Init tab.\r\n\r\nI placed ```forceLinkVerbs(\"cloth\", \"buy/sell\")``` directly after ```$('#marketPane').html(t);``` (\"cloth\" is one of the objects).  The displayverbs still don't show up when you click on the link.  Also, since there are multiple objects, I need to replace \"cloth\" with something that represents those multiple objects -- what is the syntax for that?\r\n\r\nUPDATE: I undid my modifications to ```UpdateObjectLinks``` since your JS already includes that.  You know, my mod and your JS each had the same result in the sense that each enabled the object links, but clicking on the links still did nothing.\r\n\r\nUPDATE2: As for calling forceLinkVerbs on multiple objects, can I use JS \"Loop Fors\"? (I'm studying w3schools.com)\r\n\r\nUPDATE3: Added semi-colon after ```forceLinkVerbs(\"cloth\", \"buy/sell\")``` but that made no difference.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, I got rid of the new name and am not calling it in the UI Init tab.</p>\n<p>I placed <code>forceLinkVerbs(\"cloth\", \"buy/sell\")</code> directly after <code>$('#marketPane').html(t);</code> (\"cloth\" is one of the objects).  The displayverbs still don't show up when you click on the link.  Also, since there are multiple objects, I need to replace \"cloth\" with something that represents those multiple objects -- what is the syntax for that?</p>\n<p>UPDATE: I undid my modifications to <code>UpdateObjectLinks</code> since your JS already includes that.  You know, my mod and your JS each had the same result in the sense that each enabled the object links, but clicking on the links still did nothing.</p>\n<p>UPDATE2: As for calling forceLinkVerbs on multiple objects, can I use JS \"Loop Fors\"? (I'm studying w3schools.com)</p>\n<p>UPDATE3: Added semi-colon after <code>forceLinkVerbs(\"cloth\", \"buy/sell\")</code> but that made no difference.</p>\n\n",
      "PostDate": "2018-12-09T10:38:15.9818182Z",
      "LastEditDate": "2018-12-09T12:54:42.8370585Z",
      "link": null
    },
    {
      "PostId": "3f3b8dda-8dad-42b5-89a0-258633d25387",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The code works for me; I can't work out what you're doing different.\r\nCan you share what you've got so far so I can take a look at it?",
      "EditableFormat": "markdown",
      "HTML": "<p>The code works for me; I can't work out what you're doing different.<br>\nCan you share what you've got so far so I can take a look at it?</p>\n\n",
      "PostDate": "2018-12-09T16:13:48.8159557Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "710c8fac-80b6-477b-a8e2-dedbf43f2f06",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, so my UI Init tab runs this setup JS function:\r\n```\r\nfunction setupMarketPane() {\r\n    var t = \"<table id=\\\"marketPane\\\"></table>\";\r\n    $(\"body\").append(t, $(\"#marketPane\"));    \r\n    $(\"#marketPane\").insertAfter($(\"#gridPanel\")).width('39.5%').css({'position':'fixed','z-index':'5','height':'0px','margin-top':'44px','margin-left':'18px','background-color':'FloralWhite','transition':'height 0.3s'});    \r\n};\r\n```\r\nThis creates the ```t``` variable (HTML built-up string) and ```marketPane``` element (holds the HTML table) and appends them to the body so that they will not be cleared on ```ClearScreen```.\r\n\r\nThen after the player enters the Market room, this Quest function is called:\r\n```\r\nt = \"<table id=\\\"marketPane\\\"><th class=\\\"MPTitle\\\" colspan=\\\"4\\\">THE AGORA</th><tr><th class=\\\"MPProps\\\" width=\\\"50%\\\">ITEM</th><th class=\\\"MPProps\\\" width=\\\"25%\\\">LOAD</th><th class=\\\"MPProps\\\" width=\\\"10%\\\">QUANTITY</th><th class=\\\"MPProps\\\" width=\\\"15%\\\">PRICE</th></tr>\"\r\n// ITEMS RANDOMIZER -\r\nt = t + \"<th class=\\\"MPCategory\\\" colspan=\\\"4\\\">Commodities</th>\"\r\ngame.AgoraCommCopy = game.AgoraComm\r\nCommNum = GetRandomInt(1,3)\r\nfor (CommLoop, 1, CommNum, 1) {\r\n  c = PickOneString (game.AgoraCommCopy)\r\n  list remove (game.AgoraCommCopy, c)\r\n  c = GetObject(c)\r\n  qty = GetRandomInt(c.QtyMin,c.QtyMax)\r\n  price = GetRandomInt(c.PriceMin,c.PriceMax)\r\n  t = t + \"<tr><td class=\\\"MPListing\\\" width=\\\"50%\\\">\" + ProcessText(\"{object:\" + c.name + \"}\") + \"</td><td class=\\\"MPListing\\\" width=\\\"25%\\\">\" + c.load + \"</td><td class=\\\"MPListing\\\" width=\\\"10%\\\">\" + qty + \"</td><td class=\\\"MPListing\\\" width=\\\"15%\\\">\" + price + \"</td></tr>\"\r\n}\r\n// Directly below - Extra unmodified row needed at end of table to enable proper vertical spacing.\r\nt = t + \"<tr></tr></table>\"\r\ngame.t = t\r\nJS.openMarketPane (t)\r\n```\r\nSo the above function builds up the t variable (title, subtitle, category subtitle, and randomized listings of items (where the object links are).  Where it says ```\" + ProcessText(\"{object:\" + c.name + \"}\") + \"``` is where the object links are printed.  At the end of all of this, JS.openMarketPane (t) is called:\r\n```\r\nfunction openMarketPane(t) {\r\n    $('#marketPane').height('580px').html(t).css({'border':'2px solid DarkCyan'});\r\n    forceLinkVerbs(\"wines\", \"Look at/Take\");\r\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\r\n    forceLinkVerbs(\"cloth\", \"look at/use\")\r\n    setCss (\".MPTitle\", \"height:20px;padding-top:20px;padding-bottom:5px;font-size:20px;text-align:center;color:DarkCyan;\");\r\n    setCss (\".MPProps\", \"height:20px;padding:3px 20px 15px;text-align:left;font-style:italic;color:DarkTurquoise;\");\r\n    setCss (\".MPCategory\", \"height:20px;padding:3px;color:DarkCyan;\");\r\n    setCss (\".MPListing\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");\r\n};\r\n```\r\nThen there is your JS code:\r\n```\r\n$(function () {\r\n  var forcedVerbs = {};\r\n  var original_updateObjectLinks = updateObjectLinks;\r\n  updateObjectLinks = function(data) {\r\n    original_updateObjectLinks($.extend(data, forcedVerbs));\r\n  };\r\n  forceLinkVerbs = function (object, verbs) {\r\n    if (verbs) {\r\n      forcedVerbs[object] = verbs;\r\n    } else {\r\n      delete (forcedVerbs[object]);\r\n    }\r\n  };\r\n});\r\n```\r\nPlease ask if there are any questions about this (questionable?) code...",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, so my UI Init tab runs this setup JS function:</p>\n<pre><code>function setupMarketPane() {\n    var t = \"&lt;table id=\\\"marketPane\\\"&gt;&lt;/table&gt;\";\n    $(\"body\").append(t, $(\"#marketPane\"));    \n    $(\"#marketPane\").insertAfter($(\"#gridPanel\")).width('39.5%').css({'position':'fixed','z-index':'5','height':'0px','margin-top':'44px','margin-left':'18px','background-color':'FloralWhite','transition':'height 0.3s'});    \n};\n</code></pre>\n<p>This creates the <code>t</code> variable (HTML built-up string) and <code>marketPane</code> element (holds the HTML table) and appends them to the body so that they will not be cleared on <code>ClearScreen</code>.</p>\n<p>Then after the player enters the Market room, this Quest function is called:</p>\n<pre><code>t = \"&lt;table id=\\\"marketPane\\\"&gt;&lt;th class=\\\"MPTitle\\\" colspan=\\\"4\\\"&gt;THE AGORA&lt;/th&gt;&lt;tr&gt;&lt;th class=\\\"MPProps\\\" width=\\\"50%\\\"&gt;ITEM&lt;/th&gt;&lt;th class=\\\"MPProps\\\" width=\\\"25%\\\"&gt;LOAD&lt;/th&gt;&lt;th class=\\\"MPProps\\\" width=\\\"10%\\\"&gt;QUANTITY&lt;/th&gt;&lt;th class=\\\"MPProps\\\" width=\\\"15%\\\"&gt;PRICE&lt;/th&gt;&lt;/tr&gt;\"\n// ITEMS RANDOMIZER -\nt = t + \"&lt;th class=\\\"MPCategory\\\" colspan=\\\"4\\\"&gt;Commodities&lt;/th&gt;\"\ngame.AgoraCommCopy = game.AgoraComm\nCommNum = GetRandomInt(1,3)\nfor (CommLoop, 1, CommNum, 1) {\n  c = PickOneString (game.AgoraCommCopy)\n  list remove (game.AgoraCommCopy, c)\n  c = GetObject(c)\n  qty = GetRandomInt(c.QtyMin,c.QtyMax)\n  price = GetRandomInt(c.PriceMin,c.PriceMax)\n  t = t + \"&lt;tr&gt;&lt;td class=\\\"MPListing\\\" width=\\\"50%\\\"&gt;\" + ProcessText(\"{object:\" + c.name + \"}\") + \"&lt;/td&gt;&lt;td class=\\\"MPListing\\\" width=\\\"25%\\\"&gt;\" + c.load + \"&lt;/td&gt;&lt;td class=\\\"MPListing\\\" width=\\\"10%\\\"&gt;\" + qty + \"&lt;/td&gt;&lt;td class=\\\"MPListing\\\" width=\\\"15%\\\"&gt;\" + price + \"&lt;/td&gt;&lt;/tr&gt;\"\n}\n// Directly below - Extra unmodified row needed at end of table to enable proper vertical spacing.\nt = t + \"&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;\"\ngame.t = t\nJS.openMarketPane (t)\n</code></pre>\n<p>So the above function builds up the t variable (title, subtitle, category subtitle, and randomized listings of items (where the object links are).  Where it says <code>\" + ProcessText(\"{object:\" + c.name + \"}\") + \"</code> is where the object links are printed.  At the end of all of this, JS.openMarketPane (t) is called:</p>\n<pre><code>function openMarketPane(t) {\n    $('#marketPane').height('580px').html(t).css({'border':'2px solid DarkCyan'});\n    forceLinkVerbs(\"wines\", \"Look at/Take\");\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\n    forceLinkVerbs(\"cloth\", \"look at/use\")\n    setCss (\".MPTitle\", \"height:20px;padding-top:20px;padding-bottom:5px;font-size:20px;text-align:center;color:DarkCyan;\");\n    setCss (\".MPProps\", \"height:20px;padding:3px 20px 15px;text-align:left;font-style:italic;color:DarkTurquoise;\");\n    setCss (\".MPCategory\", \"height:20px;padding:3px;color:DarkCyan;\");\n    setCss (\".MPListing\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");\n};\n</code></pre>\n<p>Then there is your JS code:</p>\n<pre><code>$(function () {\n  var forcedVerbs = {};\n  var original_updateObjectLinks = updateObjectLinks;\n  updateObjectLinks = function(data) {\n    original_updateObjectLinks($.extend(data, forcedVerbs));\n  };\n  forceLinkVerbs = function (object, verbs) {\n    if (verbs) {\n      forcedVerbs[object] = verbs;\n    } else {\n      delete (forcedVerbs[object]);\n    }\n  };\n});\n</code></pre>\n<p>Please ask if there are any questions about this (questionable?) code...</p>\n\n",
      "PostDate": "2018-12-10T01:36:26.3407149Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09d5b40d-a459-4dd6-a61c-a681f4dbe952",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ok, I just figured out why the displayverbs weren't working for me.  It's because I set the z-index of ```marketPane``` to 5.  When I set it to 0, then the displayverbs show up.  Yay!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ok, I just figured out why the displayverbs weren't working for me.  It's because I set the z-index of <code>marketPane</code> to 5.  When I set it to 0, then the displayverbs show up.  Yay!</p>\n\n",
      "PostDate": "2018-12-10T09:19:44.1465154Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71c81f81-4e2b-4e5d-8339-865306fa574d",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just can't see the problem there :S\r\n\r\nThough I would point out that having two tables inside each other with the same ID is a little odd. It's not valid HTML; though I suspect the browser will just ignore it. I would suggest that the `t` passed to openMarketPane shouldn't include `<table id=\\\"marketPane\\\">` or `</table>`, as this HTML string is being placed *inside* the existing `<table>` tag.\r\n\r\nAlso, your setupMarketPane function seems to be a little inefficient. You're appending the new element at the end of the body, and then calling insertAfter to remove it from there and place it elsewhere in the document. It may be slightly more efficient to write:\r\n```\r\nfunction setupMarketPane() {\r\n    $('<table>',  {id: 'marketPane'}).css({position:'fixed', 'z-index':5, width:'39.5%', height:0, marginTop:44, marginLeft:18, backgroundColor:'FloralWhite', transition:'height 0.3s'}).insertAfter('#gridPanel');\r\n};\r\n```\r\n\r\nAgain, this is a little neater, maybe a little more efficient, but I don't think it could be causing your problem.\r\n\r\n<hr/>\r\n\r\nOne last thought, which I'm sure you've double-checked a dozen times, but:\r\n```\r\n    forceLinkVerbs(\"wines\", \"Look at/Take\");\r\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\r\n    forceLinkVerbs(\"cloth\", \"look at/use\")\r\n```\r\nHave you double checked that those object names are correct? Not capitalised, or anything like that? That's the only think I can think of at this point.\r\n\r\nOh, also, the third forceLinkVerbs line is missing its semicolon.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just can't see the problem there :S</p>\n<p>Though I would point out that having two tables inside each other with the same ID is a little odd. It's not valid HTML; though I suspect the browser will just ignore it. I would suggest that the <code>t</code> passed to openMarketPane shouldn't include <code>&lt;table id=\\\"marketPane\\\"&gt;</code> or <code>&lt;/table&gt;</code>, as this HTML string is being placed <em>inside</em> the existing <code>&lt;table&gt;</code> tag.</p>\n<p>Also, your setupMarketPane function seems to be a little inefficient. You're appending the new element at the end of the body, and then calling insertAfter to remove it from there and place it elsewhere in the document. It may be slightly more efficient to write:</p>\n<pre><code>function setupMarketPane() {\n    $('&lt;table&gt;',  {id: 'marketPane'}).css({position:'fixed', 'z-index':5, width:'39.5%', height:0, marginTop:44, marginLeft:18, backgroundColor:'FloralWhite', transition:'height 0.3s'}).insertAfter('#gridPanel');\n};\n</code></pre>\n<p>Again, this is a little neater, maybe a little more efficient, but I don't think it could be causing your problem.</p>\n<hr>\n<p>One last thought, which I'm sure you've double-checked a dozen times, but:</p>\n<pre><code>    forceLinkVerbs(\"wines\", \"Look at/Take\");\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\n    forceLinkVerbs(\"cloth\", \"look at/use\")\n</code></pre>\n<p>Have you double checked that those object names are correct? Not capitalised, or anything like that? That's the only think I can think of at this point.</p>\n<p>Oh, also, the third forceLinkVerbs line is missing its semicolon.</p>\n\n",
      "PostDate": "2018-12-10T09:44:40.2018939Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b630f322-3e53-4364-80f0-3702cdd55d48",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Ok, I just figured out why the displayverbs weren't working for me. It's because I set the z-index of marketPane to 5. When I set it to 0, then the displayverbs show up. Yay!\r\n\r\nAh ... the outer marketPane table was appearing in front of the inner one, and catching all the clicks?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Ok, I just figured out why the displayverbs weren't working for me. It's because I set the z-index of marketPane to 5. When I set it to 0, then the displayverbs show up. Yay!</p>\n</blockquote>\n<p>Ah ... the outer marketPane table was appearing in front of the inner one, and catching all the clicks?</p>\n\n",
      "PostDate": "2018-12-10T09:48:56.1208624Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ec9a134-3627-42b4-949e-b036d2e867f9",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, my marketPane was appearing over the displayverbs!\r\n\r\nWhat do you mean \"outer\" and \"inner\" marketPane?  I thought that there was only one!?\r\n\r\nUPDATE: I see, marketPane is a table, and t is also a table within marketPane.  So I should get rid of the table tags from t.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, my marketPane was appearing over the displayverbs!</p>\n<p>What do you mean \"outer\" and \"inner\" marketPane?  I thought that there was only one!?</p>\n<p>UPDATE: I see, marketPane is a table, and t is also a table within marketPane.  So I should get rid of the table tags from t.</p>\n\n",
      "PostDate": "2018-12-10T10:00:20.877074Z",
      "LastEditDate": "2018-12-10T10:06:05.3802149Z",
      "link": null
    },
    {
      "PostId": "95b33088-5147-4fe4-af5c-15502dbd85f4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah; your generated HTML was starting with `<table id=\"marketPane\"><table id=\"marketPane\"><tr>` and ending with `</tr></table></table>`.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah; your generated HTML was starting with <code>&lt;table id=\"marketPane\"&gt;&lt;table id=\"marketPane\"&gt;&lt;tr&gt;</code> and ending with <code>&lt;/tr&gt;&lt;/table&gt;&lt;/table&gt;</code>.</p>\n\n",
      "PostDate": "2018-12-10T10:15:23.0231592Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f5bc92ed-5f19-4ebd-9729-7576fd40e6c0",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Unfortunately, when I replaced my ```setupMarketPane``` code with yours, the HTML table would not even display anymore after the player enters the market room.  Any idea why that might be?\r\n\r\nUPDATE:\r\n\"I would suggest that the t passed to openMarketPane shouldn't include <table id=\\\"marketPane\\\"> or </table>, as this HTML string is being placed inside the existing <table> tag.\"\r\n\r\nWhen I delete the inner table tags from the t variable, then the table displays but is completely blank!",
      "EditableFormat": "markdown",
      "HTML": "<p>Unfortunately, when I replaced my <code>setupMarketPane</code> code with yours, the HTML table would not even display anymore after the player enters the market room.  Any idea why that might be?</p>\n<p>UPDATE:<br>\n\"I would suggest that the t passed to openMarketPane shouldn't include &lt;table id=\"marketPane\"&gt; or , as this HTML string is being placed inside the existing  tag.\"<p></p><p>When I delete the inner table tags from the t variable, then the table displays but is completely blank!</p><table>\n\n\n</table></p>",
      "PostDate": "2018-12-11T05:08:27.5024708Z",
      "LastEditDate": "2018-12-11T08:47:20.545033Z",
      "link": null
    },
    {
      "PostId": "7dc43f11-81c9-4dc7-8866-1a4836563ac2",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another thing -- here is an abridged version of the JS function ```openMarketPane``` (above) where the ```t``` table is printed out:\r\n```\r\nfunction openMarketPane(t) {\r\n    $('#marketPane').height('580px').html(t).css({'border':'2px solid DarkCyan'});\r\n    forceLinkVerbs(\"wines\", \"Buy/Sell\");\r\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\r\n    forceLinkVerbs(\"cloth\", \"Buy/Sell\");\r\n};\r\n```\r\nSince I'm going to have dozens of possible randomized objects printed out in this table in the future, I don't want to have to call ```forceLinkVerbs();``` for every object.  So what I'm doing is this -- in that big Quest function where objects are randomly selected and the ```t``` variable is built up (above), I made a string (```acc```) composed of all the objects that are currently being printed out, with a single space between each object, e.g., ```cloth wines olive_oil```.  This string ```acc``` is sent along with ```t``` to this new version of the JS function ```openMarketPane```:\r\n```\r\nfunction openMarketPane(t, acc) {\r\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\r\n    acc.split(\" \");\r\n    var idx;    \r\n    for (idx = 0; idx < acc.length; idx++) {\r\n        forceLinkVerbs(acc[idx].trim(), \"Buy/Sell\");\r\n    }\r\n    window.alert(acc)\r\n};\r\n```\r\nSo ```acc``` should be converted into an array with spaces as separators.  The ```for``` loop should run ```forceLinkVerbs``` for each string (object) in the array, trimming away the blank spaces for each.\r\n\r\nBut this new openMarketPane function doesn't work -- the table is printed out but the objects don't have their links enabled.  ```window.alert(acc)``` confirms that ```acc``` is, in fact, a string list of all the objects that should be printed out, separated by single spaces.  If I can't get this to work, then I'll have to go back to a long list of ```forceLinkVerbs``` calls...",
      "EditableFormat": "markdown",
      "HTML": "<p>Another thing -- here is an abridged version of the JS function <code>openMarketPane</code> (above) where the <code>t</code> table is printed out:</p>\n<pre><code>function openMarketPane(t) {\n    $('#marketPane').height('580px').html(t).css({'border':'2px solid DarkCyan'});\n    forceLinkVerbs(\"wines\", \"Buy/Sell\");\n    forceLinkVerbs(\"olive oil\", \"Buy/Sell\");\n    forceLinkVerbs(\"cloth\", \"Buy/Sell\");\n};\n</code></pre>\n<p>Since I'm going to have dozens of possible randomized objects printed out in this table in the future, I don't want to have to call <code>forceLinkVerbs();</code> for every object.  So what I'm doing is this -- in that big Quest function where objects are randomly selected and the <code>t</code> variable is built up (above), I made a string (<code>acc</code>) composed of all the objects that are currently being printed out, with a single space between each object, e.g., <code>cloth wines olive_oil</code>.  This string <code>acc</code> is sent along with <code>t</code> to this new version of the JS function <code>openMarketPane</code>:</p>\n<pre><code>function openMarketPane(t, acc) {\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\n    acc.split(\" \");\n    var idx;    \n    for (idx = 0; idx &lt; acc.length; idx++) {\n        forceLinkVerbs(acc[idx].trim(), \"Buy/Sell\");\n    }\n    window.alert(acc)\n};\n</code></pre>\n<p>So <code>acc</code> should be converted into an array with spaces as separators.  The <code>for</code> loop should run <code>forceLinkVerbs</code> for each string (object) in the array, trimming away the blank spaces for each.</p>\n<p>But this new openMarketPane function doesn't work -- the table is printed out but the objects don't have their links enabled.  <code>window.alert(acc)</code> confirms that <code>acc</code> is, in fact, a string list of all the objects that should be printed out, separated by single spaces.  If I can't get this to work, then I'll have to go back to a long list of <code>forceLinkVerbs</code> calls...</p>\n\n",
      "PostDate": "2018-12-11T08:16:21.9057703Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "63c76c5d-8ae3-4d6a-93a5-ede771d84330",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`acc.split(\" \")` returns an array, just like `Split(acc, \" \")` in Quest. It doesn't modify acc itself..\r\n\r\nAlso, there's no reason not to use `$.each` here:\r\n```\r\nfunction openMarketPane(t, acc) {\r\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\r\n    $.each(acc.split(\" \"), function (idx, val) {\r\n        forceLinkVerbs(val, \"Buy/Sell\");\r\n    });\r\n};\r\n```\r\n(`$.each` takes two parameters. The first is an array, the second is a function which will be run on every member of the array. That function is passed two parameters: the index into the array, and the item from the array. The syntax looks a bit weird until you get used to it, but it can make your code a lot smaller)\r\n\r\n<hr />\r\n\r\nAlso, why stick them together into a string? You can just pass a stringlist from Quest. (Note: valid data types for paramaters using the `JS.` command are: string, object, int, double, boolean, stringlist, stringdictionary. If I remember correctly. You can pass a stringlist, but not a plain list even if its members are strings).\r\n\r\nOr even keep the loop in Quest; you could put: `JS.forceLinkVerbs (c.name, \"Buy/Sell\")` inside your object randomizer loop, eliminating the need to assemble a list and then loop over it again.\r\n\r\n<hr />\r\n\r\nActually... I'm wondering why setupMarketPane is necessary.\r\nIf your string `t` includes the `<table>` tag, then you could omit setupMarketPane, and have \r\n```\r\nfunction openMarketPane(t, acc) {\r\n    $(t).insertAfter('#gridPanel');\r\n    // add .css(), .height(), etc if necessary; or include the style=\"\" within t\r\n    $.each(acc.split(\" \"), function (idx) {\r\n        forceLinkVerbs(acc[idx], \"Buy/Sell\");\r\n    });\r\n};\r\n```\r\n\r\nSorry, my brain's jumping all over the place today.\r\n\r\n<hr/>\r\n\r\n> Unfortunately, when I replaced my setupMarketPane code with yours, the HTML table would not even display anymore after the player enters the market room. Any idea why that might be?\r\n\r\nI just tested it with all your CSS, and it looks like it's appearing off the bottom of the screen. You're setting `position: fixed` but not specifying where it should be fixed, which is usually discouraged. If you add the CSS property `top: 0` or `bottom: 0` it appears fine.\r\n\r\nI'm a little puzzled, because when I test it, it does exactly the same with your initial code. (When I was playing with this before, I just assumed your CSS was fine and didn't look at it, so I didn't notice this issue earlier)\r\n\r\n<hr/>\r\n\r\n> When I delete the inner table tags from the t variable, then the table displays but is completely blank!\r\n\r\nI can't replicate this. I tried everything I can think of, but I can't get that to happen.\r\n\r\n<hr/>\r\n\r\n(another side-note: your string `t` looks long and unwieldy, which makes it a little harder to track what is going on. It might be possible to streamline it by setting `class=\"MPListing` on the row instead of every cell (so it only appears once per line), and doing:\r\n`setCss (\".MPListing td\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");`",
      "EditableFormat": "markdown",
      "HTML": "<p><code>acc.split(\" \")</code> returns an array, just like <code>Split(acc, \" \")</code> in Quest. It doesn't modify acc itself..</p>\n<p>Also, there's no reason not to use <code>$.each</code> here:</p>\n<pre><code>function openMarketPane(t, acc) {\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\n    $.each(acc.split(\" \"), function (idx, val) {\n        forceLinkVerbs(val, \"Buy/Sell\");\n    });\n};\n</code></pre>\n<p>(<code>$.each</code> takes two parameters. The first is an array, the second is a function which will be run on every member of the array. That function is passed two parameters: the index into the array, and the item from the array. The syntax looks a bit weird until you get used to it, but it can make your code a lot smaller)</p>\n<hr>\n<p>Also, why stick them together into a string? You can just pass a stringlist from Quest. (Note: valid data types for paramaters using the <code>JS.</code> command are: string, object, int, double, boolean, stringlist, stringdictionary. If I remember correctly. You can pass a stringlist, but not a plain list even if its members are strings).</p>\n<p>Or even keep the loop in Quest; you could put: <code>JS.forceLinkVerbs (c.name, \"Buy/Sell\")</code> inside your object randomizer loop, eliminating the need to assemble a list and then loop over it again.</p>\n<hr>\n<p>Actually... I'm wondering why setupMarketPane is necessary.<br>\nIf your string <code>t</code> includes the <code>&lt;table&gt;</code> tag, then you could omit setupMarketPane, and have</p>\n<pre><code>function openMarketPane(t, acc) {\n    $(t).insertAfter('#gridPanel');\n    // add .css(), .height(), etc if necessary; or include the style=\"\" within t\n    $.each(acc.split(\" \"), function (idx) {\n        forceLinkVerbs(acc[idx], \"Buy/Sell\");\n    });\n};\n</code></pre>\n<p>Sorry, my brain's jumping all over the place today.</p>\n<hr>\n<blockquote>\n<p>Unfortunately, when I replaced my setupMarketPane code with yours, the HTML table would not even display anymore after the player enters the market room. Any idea why that might be?</p>\n</blockquote>\n<p>I just tested it with all your CSS, and it looks like it's appearing off the bottom of the screen. You're setting <code>position: fixed</code> but not specifying where it should be fixed, which is usually discouraged. If you add the CSS property <code>top: 0</code> or <code>bottom: 0</code> it appears fine.</p>\n<p>I'm a little puzzled, because when I test it, it does exactly the same with your initial code. (When I was playing with this before, I just assumed your CSS was fine and didn't look at it, so I didn't notice this issue earlier)</p>\n<hr>\n<blockquote>\n<p>When I delete the inner table tags from the t variable, then the table displays but is completely blank!</p>\n</blockquote>\n<p>I can't replicate this. I tried everything I can think of, but I can't get that to happen.</p>\n<hr>\n<p>(another side-note: your string <code>t</code> looks long and unwieldy, which makes it a little harder to track what is going on. It might be possible to streamline it by setting <code>class=\"MPListing</code> on the row instead of every cell (so it only appears once per line), and doing:<br>\n<code>setCss (\".MPListing td\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");</code></p>\n\n",
      "PostDate": "2018-12-11T09:52:22.222342Z",
      "LastEditDate": "2018-12-11T10:07:03.3650117Z",
      "link": null
    },
    {
      "PostId": "4bb5f1b3-46f3-4ff3-a430-b5394c4dc38f",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Haha!  I laughed while reading this because you are repeatedly asking why I did things in such an inefficient way!  Simple, because I don't know what I'm doing! (the perfect example of a little knowledge being dangerous...)",
      "EditableFormat": "markdown",
      "HTML": "<p>Haha!  I laughed while reading this because you are repeatedly asking why I did things in such an inefficient way!  Simple, because I don't know what I'm doing! (the perfect example of a little knowledge being dangerous...)</p>\n\n",
      "PostDate": "2018-12-11T10:18:29.3333693Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0cb741b6-5715-46d2-a0f2-645293c26ea7",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "FINAL CODE(?)\r\n```\r\nfunction setupMarketPane() {\r\n    $('<table>',  {id: \"marketPane\"}).insertAfter($(\"#gridPanel\")).width('39.5%').css({'position':'fixed','z-index':'0','height':'0px','margin-top':'44px','margin-left':'18px','background-color':'FloralWhite','transition':'height 0.3s'});    \r\n};\r\n```\r\nI chose to keep ```setupMarketPane``` as this script only needs to be run once per gaming session.  Yes, a table is being placed within another table, both with the same ID -- it is strange but it works!  I have to put the inner table within something (another table, a row, etc.), or else only a blank table prints out.  I might give each table a different ID if I run into a problem there.  Appending the ```t``` variable to the body was unnecessary.\r\n\r\nThis is the Quest function ```MarketItemsGenerator```:\r\n```\r\nt = \"<table id=\\\"marketPane\\\"><th class=\\\"MPTitle\\\" colspan=\\\"4\\\">THE AGORA</th><tr class=\\\"MPProps\\\"><th width=\\\"50%\\\">ITEM</th><th width=\\\"25%\\\">LOAD</th><th width=\\\"10%\\\">QUANTITY</th><th width=\\\"15%\\\">PRICE</th></tr>\"\r\n// ITEMS RANDOMIZER -\r\nt = t + \"<th class=\\\"MPCategory\\\" colspan=\\\"4\\\">Commodities</th>\"\r\ngame.AgoraCommCopy = game.AgoraComm\r\nCommNum = GetRandomInt(1,3)\r\nfor (CommLoop, 1, CommNum, 1) {\r\n  c = PickOneString (game.AgoraCommCopy)\r\n  list remove (game.AgoraCommCopy, c)\r\n  c = GetObject(c)\r\n  qty = GetRandomInt(c.QtyMin,c.QtyMax)\r\n  price = GetRandomInt(c.PriceMin,c.PriceMax)\r\n  t = t + \"<tr class=\\\"MPListing\\\"><td width=\\\"50%\\\">\" + ProcessText(\"{object:\" + c.name + \"}\") + \"</td><td width=\\\"25%\\\">\" + c.load + \"</td><td width=\\\"10%\\\">\" + qty + \"</td><td width=\\\"15%\\\">\" + price + \"</td></tr>\"\r\n  JS.forceLinkVerbs (c.name, \"BUY/SELL\")\r\n}\r\nt = t + \"<tr></tr></table>\"\r\ngame.t = t\r\nJS.openMarketPane (t)\r\n```\r\nSo I cleaned up my ```t``` string as you suggested.  I'm also calling ```JS.forceLinkVerbs (c.name, \"Buy/Sell\")``` in here as that is the most elegant solution.  I actually wanted to do something like that before, but didn't think it would work -- I thought that you had to print the object links first and then mess around with the display verbs, but obviously that isn't so.\r\n\r\nThen your JS code is unchanged:\r\n```\r\n$(function () {\r\n  var forcedVerbs = {};\r\n  var original_updateObjectLinks = updateObjectLinks;\r\n  updateObjectLinks = function(data) {\r\n    original_updateObjectLinks($.extend(data, forcedVerbs));\r\n  };\r\n  forceLinkVerbs = function (object, verbs) {\r\n    if (verbs) {\r\n      forcedVerbs[object] = verbs;\r\n    } else {\r\n      delete (forcedVerbs[object]);\r\n    }\r\n  };\r\n});\r\n```\r\nFollowed finally by ```openMarketPane``` printing everything out:\r\n```\r\nfunction openMarketPane(t) {\r\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\r\n    setCss (\".MPTitle\", \"height:20px;padding-top:20px;padding-bottom:5px;font-size:20px;text-align:center;color:DarkCyan;\");\r\n    setCss (\".MPProps th\", \"height:20px;padding:3px 20px 15px;text-align:left;font-style:italic;color:DarkTurquoise;\");\r\n    setCss (\".MPCategory\", \"height:20px;padding:3px;color:DarkCyan;\");\r\n    setCss (\".MPListing td\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");\r\n};\r\n```\r\nThere was one more issue -- the current font I'm using is \"Courgette\".  When printing the HTML table, Quest uses some other font that is NOT Courgette.  This is not a problem, except that when the object links are created with ```\" + ProcessText(\"{object:\" + c.name + \"}\") + \"``` under ```MarketItemsGenerator```, then the font of those object links changes to Courgette (so the HTML table is showing two different fonts).  This must occur when Quest runs one of its built-in turnscripts (it happens AFTER UpdateObjectLinks).\r\n\r\nIs there a relatively simple way to change the object link font to, say, the same font as the HTML table?  If this is too complicated to fix, I will let this one go...\r\n\r\nThanks again.",
      "EditableFormat": "markdown",
      "HTML": "<p>FINAL CODE(?)</p>\n<pre><code>function setupMarketPane() {\n    $('&lt;table&gt;',  {id: \"marketPane\"}).insertAfter($(\"#gridPanel\")).width('39.5%').css({'position':'fixed','z-index':'0','height':'0px','margin-top':'44px','margin-left':'18px','background-color':'FloralWhite','transition':'height 0.3s'});    \n};\n</code></pre>\n<p>I chose to keep <code>setupMarketPane</code> as this script only needs to be run once per gaming session.  Yes, a table is being placed within another table, both with the same ID -- it is strange but it works!  I have to put the inner table within something (another table, a row, etc.), or else only a blank table prints out.  I might give each table a different ID if I run into a problem there.  Appending the <code>t</code> variable to the body was unnecessary.</p>\n<p>This is the Quest function <code>MarketItemsGenerator</code>:</p>\n<pre><code>t = \"&lt;table id=\\\"marketPane\\\"&gt;&lt;th class=\\\"MPTitle\\\" colspan=\\\"4\\\"&gt;THE AGORA&lt;/th&gt;&lt;tr class=\\\"MPProps\\\"&gt;&lt;th width=\\\"50%\\\"&gt;ITEM&lt;/th&gt;&lt;th width=\\\"25%\\\"&gt;LOAD&lt;/th&gt;&lt;th width=\\\"10%\\\"&gt;QUANTITY&lt;/th&gt;&lt;th width=\\\"15%\\\"&gt;PRICE&lt;/th&gt;&lt;/tr&gt;\"\n// ITEMS RANDOMIZER -\nt = t + \"&lt;th class=\\\"MPCategory\\\" colspan=\\\"4\\\"&gt;Commodities&lt;/th&gt;\"\ngame.AgoraCommCopy = game.AgoraComm\nCommNum = GetRandomInt(1,3)\nfor (CommLoop, 1, CommNum, 1) {\n  c = PickOneString (game.AgoraCommCopy)\n  list remove (game.AgoraCommCopy, c)\n  c = GetObject(c)\n  qty = GetRandomInt(c.QtyMin,c.QtyMax)\n  price = GetRandomInt(c.PriceMin,c.PriceMax)\n  t = t + \"&lt;tr class=\\\"MPListing\\\"&gt;&lt;td width=\\\"50%\\\"&gt;\" + ProcessText(\"{object:\" + c.name + \"}\") + \"&lt;/td&gt;&lt;td width=\\\"25%\\\"&gt;\" + c.load + \"&lt;/td&gt;&lt;td width=\\\"10%\\\"&gt;\" + qty + \"&lt;/td&gt;&lt;td width=\\\"15%\\\"&gt;\" + price + \"&lt;/td&gt;&lt;/tr&gt;\"\n  JS.forceLinkVerbs (c.name, \"BUY/SELL\")\n}\nt = t + \"&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;\"\ngame.t = t\nJS.openMarketPane (t)\n</code></pre>\n<p>So I cleaned up my <code>t</code> string as you suggested.  I'm also calling <code>JS.forceLinkVerbs (c.name, \"Buy/Sell\")</code> in here as that is the most elegant solution.  I actually wanted to do something like that before, but didn't think it would work -- I thought that you had to print the object links first and then mess around with the display verbs, but obviously that isn't so.</p>\n<p>Then your JS code is unchanged:</p>\n<pre><code>$(function () {\n  var forcedVerbs = {};\n  var original_updateObjectLinks = updateObjectLinks;\n  updateObjectLinks = function(data) {\n    original_updateObjectLinks($.extend(data, forcedVerbs));\n  };\n  forceLinkVerbs = function (object, verbs) {\n    if (verbs) {\n      forcedVerbs[object] = verbs;\n    } else {\n      delete (forcedVerbs[object]);\n    }\n  };\n});\n</code></pre>\n<p>Followed finally by <code>openMarketPane</code> printing everything out:</p>\n<pre><code>function openMarketPane(t) {\n    $(\"#marketPane\").height('580px').html(t).css({'border':'2px solid DarkCyan'});\n    setCss (\".MPTitle\", \"height:20px;padding-top:20px;padding-bottom:5px;font-size:20px;text-align:center;color:DarkCyan;\");\n    setCss (\".MPProps th\", \"height:20px;padding:3px 20px 15px;text-align:left;font-style:italic;color:DarkTurquoise;\");\n    setCss (\".MPCategory\", \"height:20px;padding:3px;color:DarkCyan;\");\n    setCss (\".MPListing td\", \"height:20px;padding:3px 20px;text-align:left;color:DarkCyan;\");\n};\n</code></pre>\n<p>There was one more issue -- the current font I'm using is \"Courgette\".  When printing the HTML table, Quest uses some other font that is NOT Courgette.  This is not a problem, except that when the object links are created with <code>\" + ProcessText(\"{object:\" + c.name + \"}\") + \"</code> under <code>MarketItemsGenerator</code>, then the font of those object links changes to Courgette (so the HTML table is showing two different fonts).  This must occur when Quest runs one of its built-in turnscripts (it happens AFTER UpdateObjectLinks).</p>\n<p>Is there a relatively simple way to change the object link font to, say, the same font as the HTML table?  If this is too complicated to fix, I will let this one go...</p>\n<p>Thanks again.</p>\n\n",
      "PostDate": "2018-12-14T10:51:17.3316824Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7c24d688-adf2-4ae7-b880-cf7677d45417",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "`{object:` forces the link to use the fonts specified in the game's settings.\r\n\r\nIf you want to force it to use the same font as the table, you probably want to run:\r\n`$('#marketPane a').css('font-face', 'inherit');`\r\n\r\nOr, to stop it messing about with the link formatting at all, you could skip using ProcessText entirely and just use: `\"<a class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + c.name + \"\\\">\" + GetDisplayAlias(c) + \"</a>\"`.\r\n\r\nI recommended ProcessText rather than generating your own HTML because it formats the link the same as other links, which I assumed you would want.\r\n\r\n(Sorry for any errors, I'm on my phone so can't double-check right now)",
      "EditableFormat": "markdown",
      "HTML": "<p><code>{object:</code> forces the link to use the fonts specified in the game's settings.</p>\n<p>If you want to force it to use the same font as the table, you probably want to run:<br>\n<code>$('#marketPane a').css('font-face', 'inherit');</code></p>\n<p>Or, to stop it messing about with the link formatting at all, you could skip using ProcessText entirely and just use: <code>\"&lt;a class=\\\"cmdlink elementmenu\\\" data-elementid=\\\"\" + c.name + \"\\\"&gt;\" + GetDisplayAlias(c) + \"&lt;/a&gt;\"</code>.</p>\n<p>I recommended ProcessText rather than generating your own HTML because it formats the link the same as other links, which I assumed you would want.</p>\n<p>(Sorry for any errors, I'm on my phone so can't double-check right now)</p>\n\n",
      "PostDate": "2018-12-14T15:09:23.3866137Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "137e1fb6-7a6b-4ce5-b626-0023bd0b8f1a",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```$('#marketPane a').css('font-family', 'inherit');``` seems to do the trick.\r\n\r\nThank you very much, MrAngel!",
      "EditableFormat": "markdown",
      "HTML": "<p><code>$('#marketPane a').css('font-family', 'inherit');</code> seems to do the trick.</p>\n<p>Thank you very much, MrAngel!</p>\n\n",
      "PostDate": "2018-12-15T05:02:04.230703Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
