{
  "Topic": {
    "TopicId": "e7k407aevuq339hjmiszea",
    "ForumId": "18",
    "Title": "Modulus (cyclic, odd/even, factoring/divisibility)",
    "LastUpdated": "2017-09-13T06:21:54.5129855Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "812d9428-9e41-4e96-b39c-46e148f153dd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting edited post, updated/posted)\r\n\r\n-------------------------\r\n\r\n(made this as a thread here, so it doesn't get lost in the main forum, and as it should be useful for anyone learning to code, and/or who don't know about the 'modulus' operator/operation yet and its applications/power/uses: cyclic, odd/even, factoring/divisibility)\r\n\r\n------------------------------\r\n\r\nthe '%' is the 'modulus' operator/operation, which is just division, EXCEPT it finds/gets/returns the REMAINDER\r\n\r\nhttps://en.wikipedia.org/wiki/Modulo_operation ('modulus' is usually used as its easier to say/remember, it's latin --- what science doesn't use latin --- lol, so it's some kind of grammer form of it, most likely: see link below)\r\n\r\nhttps://en.wikipedia.org/wiki/Modulus\r\n\r\n-----------------\r\n\r\nThe reason why the '% (modulus)' operator/operation is so useful, is because:\r\n\r\nthe REMAINDER (of division) is very special, as it can be used for:\r\n\r\n1. cyclic\r\n2. (odd/even)-ness of a number\r\n3. factoring/divisible-ness of a number\r\n\r\n-------------------------\r\n\r\n1. cyclic (repeating/limited sequences):\r\n\r\nnumber systems: 0 to N digits (decimal/metric number system: base 10: 0 to 9 digits, binary/digital number system: base 2: 0 to 1 digits, hexidecimal number system: base 16: 0 to 9 to A::10 to F::15 digits, octal number system: base 8: 0 to 7 digits, viking/american/\"imperial\"/curvature/time unit/measurement system: base 12: 0 to 11 digits, etc etc etc)\r\n\r\ntime/dates: 0 to N digits (seconds/minutes: 0 to 59, civilian-hours/months-in-a-year: 0 to 11, military-hours: 0 to 23, days-in-a-week: 0 to 6, etc etc etc)\r\n\r\netc etc etc stuff\r\n\r\n2. (odd/even)-ness of a number\r\n\r\nis 59 odd or even? ODD\r\nis 88 odd or even? EVEN\r\n\r\n3. factoring/divisible-ness of a number\r\n\r\nis 49 divisible by 7 ? / is '7' a factor of '49' ? ---> YES/TRUE\r\nis 48 divisible by 7 ? / is '7' a factor of '48' ?---> NO/FALSE\r\n\r\nis 63 divisible by 3 ? / is '3' a factor of '63' ? ---> YES/TRUE\r\nis 62 divisible by  3? / is '3' a factor of '62' ? ---> NO/FALSE\r\n\r\n-----------------------\r\n\r\nhow does it work?\r\n\r\n----------------\r\n\r\nCyclic:\r\n\r\nlet's take a simple example of the (4) seasons (using a small number so it's easy/quick to show it):\r\n\r\n4 quantity of digits: base 4 = 4^N: 0 to 3 digits:\r\n\r\nN = 1, as we're just taking the seasons: 4^(N:1) = 4 seasons\r\n\r\n// concept only (we'd have to use a Dictionary Attribute to actually literally do this, which is too much effort, as the point here is to explain the modulus, not Dictionary Attribute usage, lol):\r\n0 = winter\r\n1 = spring\r\n2 = summer\r\n3 = autumn\r\n\r\ngame.count = 0\r\n// pretend this is an infinite loop:\r\ngame.season = (game.count) % 4\r\ngame.count = game.count + 1\r\n\r\n-----\r\n\r\n// game.count = 0\r\ngame.season = (0) % 4 = (Q: 0, R: 0) = R: 0 = 0 = winter\r\n\r\n// game.count = 1\r\ngame.season = (1) % 4 = (Q: 0, R: 1) = R: 1 = 1 = spring\r\n\r\n// game.count = 2\r\ngame.season = (2) % 4 = (Q: 0, R: 2) = R: 2 = 2 = summer\r\n\r\n// game.count = 3\r\ngame.season = (3) % 4 = (Q: 0, R: 3) = R: 3 = 3 = autumn\r\n\r\n// game.count = 4\r\ngame.season = (4) % 4 = (Q: 1, R: 0) = R: 0 = 0 = winter\r\n\r\n// game.count = 5\r\ngame.season = (5) % 4 = (Q: 1, R: 1) = R: 1 = 1 = spring\r\n\r\n// game.count = 6\r\ngame.season = (6) % 4 = (Q: 1, R: 2) = R: 2 = 2 = summer\r\n\r\n// game.count = 7\r\ngame.season = (7) % 4 = (Q: 1, R: 3) = R: 3 = 3 = autumn\r\n\r\n// game.count = 8\r\ngame.season = (8) % 4 = (Q: 2, R: 0) = R: 0 = 0 = winter\r\n\r\n// game.count = 9\r\ngame.season = (9) % 4 = (Q: 2, R: 1) = R: 1 = 1 = spring\r\n\r\nyou get the idea now....\r\n\r\n----------\r\n\r\nthis works for any: % VALUE\r\n\r\nso, let's see...\r\n\r\nlet's do clock time displayment of seconds-or-minutes (% 60), as this directly uses the '0 to 59' (no fancy math equation nor additional code work to adjust it to the desired number, lol) to see that it does:\r\n\r\ngame.clock_seconds = game.count % 60\r\n\r\n// game.count = 0\r\ngame.clock_seconds = (0) % 60 = (Q: 0, R: 0) = R: 0 = 0\r\n\r\n... (yada yada yada) ....\r\n\r\n// game.count = 59\r\ngame.clock_seconds = (59) % 60 = (Q: 0, R: 59) = R: 59 = 59\r\n\r\n// game.count = 60\r\ngame.clock_seconds = (60) % 60 = (Q: 1, R: 0) = R: 0 = 0\r\n\r\n// game.count = 61\r\ngame.clock_seconds = (61) % 60 = (Q: 1, R: 1) = R: 1 = 1\r\n\r\n... (yada yada yada) ....\r\n\r\n// game.count = 119\r\ngame.clock_seconds = (119) % 60 = 119 / 60 = Q: 1 ---> 1 * 60 = 60 ---> 119 - 60 = R: 59 = 59\r\n\r\n// game.count = 120\r\ngame.clock_seconds = (120) % 60 = (Q: 2, R: 0) = R: 0 = 0\r\n\r\n// game.count = 121\r\ngame.clock_seconds = (121) % 60 = 121 / 60 = Q: 2 ---> 2 * 60 = 120 ---> 121 - 120 = R: 1 = 1\r\n\r\n---\r\n\r\n// game.count = 579\r\ngame.clock_seconds = (579) % 60 = 579 / 60 = Q: 9 ---> 9 * 60 = 540 ---> 579 - 540 = R: 29 = 29\r\n\r\n-----------\r\n\r\n(Odd/Even)-ness of a number:\r\n\r\n```\r\n// anything divisible by 2 (aka, no remainder), is an even number:\r\n\r\n// game.number = WHATEVER_INTEGER_VALUE\r\n\r\n// (an 'integer' number is a non-decimal number: ..., -999, -1, 0, 1, 999, ....)\r\n// (a 'double/float/floating-point/decimal' number is a decimal number: ..., -987.123, -1.546, 0.0, 13.8, 912.87, ...)\r\n// (not used in programming or at least not usually anyways, lol: a 'whole' number is a positive number: not negative and not 0, I think, lol)\r\n\r\nif (game.number % 2 = 0) {\r\n  msg (\"The number \" + game.number + \" is even\")\r\n} else { // ***\r\n  msg (\"The number \" + game.number + \" is odd\")\r\n}\r\n\r\n// ***\r\n// this is not needed (as the 'else' is all we need), but this is to just show you mathematically (shown as code of course, as we're coding here, lol) what's happening (as whenever you divide a number by 2, you either get 0 or 1 for the remainder) for the 'else' condition:\r\n// else if (game.number % 2 = 1) {\r\n\r\n// in other words, we could do this code design instead:\r\n\r\nif (game.number % 2 = 1) {\r\n  msg (\"The number \" + game.number + \" is odd\")\r\n} else {\r\n  msg (\"The number \" + game.number + \" is even\")\r\n}\r\n```\r\n\r\n---------------\r\n\r\nfactoring/divisible-ness of a number:\r\n\r\n```\r\nif (game.number % 1 = 0) { // LOL, as every number is of course divisible by 1, LOL\r\n  msg (\"The number \" + game.number + \" is divisible by 1, or to say it another way, 1 is a factor of \" + game.number)\r\n} else if (game.number % 2 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 2, or to say it another way, 2 is a factor of \" + game.number)\r\n} else if (game.number % 3 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 3, or to say it another way, 3 is a factor of \" + game.number)\r\n} else if (game.number % 4 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 4, or to say it another way, 4 is a factor of \" + game.number)\r\n} else if (game.number % 5 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 5, or to say it another way, 5 is a factor of \" + game.number)\r\n} else if (game.number % 6 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 6, or to say it another way, 6 is a factor of \" + game.number)\r\n} else if (game.number % 7 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 7, or to say it another way, 7 is a factor of \" + game.number)\r\n} else if (game.number % 8 = 0) {\r\n  msg (\"The number \" + game.number + \" is divisible by 8, or to say it another way, 8 is a factor of \" + game.number)\r\n}\r\n// and on and on, you get the idea.....\r\nelse if (game.number % game.number = 0) { // LOL, as every number is divisible by itself, as well, lol\r\n  msg (\"The number \" + game.number + \" is divisible by \" + game.number + \", or to say it another way, \" + game.number + \" is a factor of \" + game.number)\r\n}\r\n```\r\n\r\n-----------------------------------------------------------\r\n\r\nto re-hash cyclic:\r\n\r\n```\r\nVARIABLE_B = VARIABLE_A_or_B % VALUE\r\n\r\n// ------------------------\r\n\r\nthe 'VALUE' is the range/sequence of digits: 0 to VALUE-1\r\n\r\n% 1: 0,0,0,... // I wonder if this works, or if there's some weird/fascinating quirk that prevents it from working... I should try/test it!\r\n% 2: 0,1,0,1,0,1,0,1,...\r\n% 3: 0,1,2,0,1,2,0,1,2,....\r\n% 4: 0,1,2,3,0,1,2,3,0,1,2,3,....\r\n% 5: 0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,....\r\n% 6: 0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5....\r\n% 7: 0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,....\r\n% 8: 0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,....\r\n... you get the idea...\r\n% 12: 0,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,...\r\n... you get the idea...\r\n(HELL NO, if you thought I was going to do: % 60, lol. This is why we got computers and programming, to do this type of hard/long work for us, lol. And, NO computers don't have rights! Don't you dare think it's a good idea to give computers, rights! I like having my slave computer doing work that I don't want to do! Yes, HK is a KKK when it comes to computer slaves! And so are all programmers, too. We like having computers do stuff for us! We love having our computer slaves doing hard/long work that we don't want to do ourselves!)\r\n\r\nseconds/minutes have '60' units/digits, so you do: % 60 ---> 0 to 59\r\ncivilian hours has '12' units/digits, so you do: % 12 ----> 0 to 11 // (this unfortunately is an example of when it needs to be adjusted, as civilian hours are: 1 to 12: 1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,...)\r\nmilitary hours has '24' units/digits, so you do: % 24 ----> 0 to 23\r\netc etc etc\r\n\r\nyou never change the % VALUE, it must be matched up to what you're using it for (aka, military time is based on 24 hours, so you use '24' for your modulus value: % 24), as it won't work if you change it, for example, if you do for seconds/minutes: % 61, it's going to screw everything up majorly wrongly! What you can do: is adjust its equation/expression that you use it in or you do 'if' checks to adjust the value to what it should be, the common reason for using either of these methods, is that you don't want to use/have '0' as the min (wanting to use/have '1' as the min) and you don't want to use/have 'VALUE-1' as the max (wanting to use/have 'VALUE' as the max, such as with civilian hours as an example).",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting edited post, updated/posted)</p>\n<hr>\n<p>(made this as a thread here, so it doesn't get lost in the main forum, and as it should be useful for anyone learning to code, and/or who don't know about the 'modulus' operator/operation yet and its applications/power/uses: cyclic, odd/even, factoring/divisibility)</p>\n<hr>\n<p>the '%' is the 'modulus' operator/operation, which is just division, EXCEPT it finds/gets/returns the REMAINDER</p>\n<p>https://en.wikipedia.org/wiki/Modulo_operation ('modulus' is usually used as its easier to say/remember, it's latin --- what science doesn't use latin --- lol, so it's some kind of grammer form of it, most likely: see link below)</p>\n<p>https://en.wikipedia.org/wiki/Modulus</p>\n<hr>\n<p>The reason why the '% (modulus)' operator/operation is so useful, is because:</p>\n<p>the REMAINDER (of division) is very special, as it can be used for:</p>\n<ol>\n<li>cyclic</li>\n<li>(odd/even)-ness of a number</li>\n<li>factoring/divisible-ness of a number</li>\n</ol>\n<hr>\n<ol>\n<li>cyclic (repeating/limited sequences):</li>\n</ol>\n<p>number systems: 0 to N digits (decimal/metric number system: base 10: 0 to 9 digits, binary/digital number system: base 2: 0 to 1 digits, hexidecimal number system: base 16: 0 to 9 to A::10 to F::15 digits, octal number system: base 8: 0 to 7 digits, viking/american/\"imperial\"/curvature/time unit/measurement system: base 12: 0 to 11 digits, etc etc etc)</p>\n<p>time/dates: 0 to N digits (seconds/minutes: 0 to 59, civilian-hours/months-in-a-year: 0 to 11, military-hours: 0 to 23, days-in-a-week: 0 to 6, etc etc etc)</p>\n<p>etc etc etc stuff</p>\n<ol start=\"2\">\n<li>(odd/even)-ness of a number</li>\n</ol>\n<p>is 59 odd or even? ODD<br>\nis 88 odd or even? EVEN</p>\n<ol start=\"3\">\n<li>factoring/divisible-ness of a number</li>\n</ol>\n<p>is 49 divisible by 7 ? / is '7' a factor of '49' ? ---&gt; YES/TRUE<br>\nis 48 divisible by 7 ? / is '7' a factor of '48' ?---&gt; NO/FALSE</p>\n<p>is 63 divisible by 3 ? / is '3' a factor of '63' ? ---&gt; YES/TRUE<br>\nis 62 divisible by  3? / is '3' a factor of '62' ? ---&gt; NO/FALSE</p>\n<hr>\n<p>how does it work?</p>\n<hr>\n<p>Cyclic:</p>\n<p>let's take a simple example of the (4) seasons (using a small number so it's easy/quick to show it):</p>\n<p>4 quantity of digits: base 4 = 4^N: 0 to 3 digits:</p>\n<p>N = 1, as we're just taking the seasons: 4^(N:1) = 4 seasons</p>\n<p>// concept only (we'd have to use a Dictionary Attribute to actually literally do this, which is too much effort, as the point here is to explain the modulus, not Dictionary Attribute usage, lol):<br>\n0 = winter<br>\n1 = spring<br>\n2 = summer<br>\n3 = autumn</p>\n<p>game.count = 0<br>\n// pretend this is an infinite loop:<br>\ngame.season = (game.count) % 4<br>\ngame.count = game.count + 1</p>\n<hr>\n<p>// game.count = 0<br>\ngame.season = (0) % 4 = (Q: 0, R: 0) = R: 0 = 0 = winter</p>\n<p>// game.count = 1<br>\ngame.season = (1) % 4 = (Q: 0, R: 1) = R: 1 = 1 = spring</p>\n<p>// game.count = 2<br>\ngame.season = (2) % 4 = (Q: 0, R: 2) = R: 2 = 2 = summer</p>\n<p>// game.count = 3<br>\ngame.season = (3) % 4 = (Q: 0, R: 3) = R: 3 = 3 = autumn</p>\n<p>// game.count = 4<br>\ngame.season = (4) % 4 = (Q: 1, R: 0) = R: 0 = 0 = winter</p>\n<p>// game.count = 5<br>\ngame.season = (5) % 4 = (Q: 1, R: 1) = R: 1 = 1 = spring</p>\n<p>// game.count = 6<br>\ngame.season = (6) % 4 = (Q: 1, R: 2) = R: 2 = 2 = summer</p>\n<p>// game.count = 7<br>\ngame.season = (7) % 4 = (Q: 1, R: 3) = R: 3 = 3 = autumn</p>\n<p>// game.count = 8<br>\ngame.season = (8) % 4 = (Q: 2, R: 0) = R: 0 = 0 = winter</p>\n<p>// game.count = 9<br>\ngame.season = (9) % 4 = (Q: 2, R: 1) = R: 1 = 1 = spring</p>\n<p>you get the idea now....</p>\n<hr>\n<p>this works for any: % VALUE</p>\n<p>so, let's see...</p>\n<p>let's do clock time displayment of seconds-or-minutes (% 60), as this directly uses the '0 to 59' (no fancy math equation nor additional code work to adjust it to the desired number, lol) to see that it does:</p>\n<p>game.clock_seconds = game.count % 60</p>\n<p>// game.count = 0<br>\ngame.clock_seconds = (0) % 60 = (Q: 0, R: 0) = R: 0 = 0</p>\n<p>... (yada yada yada) ....</p>\n<p>// game.count = 59<br>\ngame.clock_seconds = (59) % 60 = (Q: 0, R: 59) = R: 59 = 59</p>\n<p>// game.count = 60<br>\ngame.clock_seconds = (60) % 60 = (Q: 1, R: 0) = R: 0 = 0</p>\n<p>// game.count = 61<br>\ngame.clock_seconds = (61) % 60 = (Q: 1, R: 1) = R: 1 = 1</p>\n<p>... (yada yada yada) ....</p>\n<p>// game.count = 119<br>\ngame.clock_seconds = (119) % 60 = 119 / 60 = Q: 1 ---&gt; 1 * 60 = 60 ---&gt; 119 - 60 = R: 59 = 59</p>\n<p>// game.count = 120<br>\ngame.clock_seconds = (120) % 60 = (Q: 2, R: 0) = R: 0 = 0</p>\n<p>// game.count = 121<br>\ngame.clock_seconds = (121) % 60 = 121 / 60 = Q: 2 ---&gt; 2 * 60 = 120 ---&gt; 121 - 120 = R: 1 = 1</p>\n<hr>\n<p>// game.count = 579<br>\ngame.clock_seconds = (579) % 60 = 579 / 60 = Q: 9 ---&gt; 9 * 60 = 540 ---&gt; 579 - 540 = R: 29 = 29</p>\n<hr>\n<p>(Odd/Even)-ness of a number:</p>\n<pre><code>// anything divisible by 2 (aka, no remainder), is an even number:\n\n// game.number = WHATEVER_INTEGER_VALUE\n\n// (an 'integer' number is a non-decimal number: ..., -999, -1, 0, 1, 999, ....)\n// (a 'double/float/floating-point/decimal' number is a decimal number: ..., -987.123, -1.546, 0.0, 13.8, 912.87, ...)\n// (not used in programming or at least not usually anyways, lol: a 'whole' number is a positive number: not negative and not 0, I think, lol)\n\nif (game.number % 2 = 0) {\n  msg (\"The number \" + game.number + \" is even\")\n} else { // ***\n  msg (\"The number \" + game.number + \" is odd\")\n}\n\n// ***\n// this is not needed (as the 'else' is all we need), but this is to just show you mathematically (shown as code of course, as we're coding here, lol) what's happening (as whenever you divide a number by 2, you either get 0 or 1 for the remainder) for the 'else' condition:\n// else if (game.number % 2 = 1) {\n\n// in other words, we could do this code design instead:\n\nif (game.number % 2 = 1) {\n  msg (\"The number \" + game.number + \" is odd\")\n} else {\n  msg (\"The number \" + game.number + \" is even\")\n}\n</code></pre>\n<hr>\n<p>factoring/divisible-ness of a number:</p>\n<pre><code>if (game.number % 1 = 0) { // LOL, as every number is of course divisible by 1, LOL\n  msg (\"The number \" + game.number + \" is divisible by 1, or to say it another way, 1 is a factor of \" + game.number)\n} else if (game.number % 2 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 2, or to say it another way, 2 is a factor of \" + game.number)\n} else if (game.number % 3 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 3, or to say it another way, 3 is a factor of \" + game.number)\n} else if (game.number % 4 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 4, or to say it another way, 4 is a factor of \" + game.number)\n} else if (game.number % 5 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 5, or to say it another way, 5 is a factor of \" + game.number)\n} else if (game.number % 6 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 6, or to say it another way, 6 is a factor of \" + game.number)\n} else if (game.number % 7 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 7, or to say it another way, 7 is a factor of \" + game.number)\n} else if (game.number % 8 = 0) {\n  msg (\"The number \" + game.number + \" is divisible by 8, or to say it another way, 8 is a factor of \" + game.number)\n}\n// and on and on, you get the idea.....\nelse if (game.number % game.number = 0) { // LOL, as every number is divisible by itself, as well, lol\n  msg (\"The number \" + game.number + \" is divisible by \" + game.number + \", or to say it another way, \" + game.number + \" is a factor of \" + game.number)\n}\n</code></pre>\n<hr>\n<p>to re-hash cyclic:</p>\n<pre><code>VARIABLE_B = VARIABLE_A_or_B % VALUE\n\n// ------------------------\n\nthe 'VALUE' is the range/sequence of digits: 0 to VALUE-1\n\n% 1: 0,0,0,... // I wonder if this works, or if there's some weird/fascinating quirk that prevents it from working... I should try/test it!\n% 2: 0,1,0,1,0,1,0,1,...\n% 3: 0,1,2,0,1,2,0,1,2,....\n% 4: 0,1,2,3,0,1,2,3,0,1,2,3,....\n% 5: 0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,....\n% 6: 0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5....\n% 7: 0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,....\n% 8: 0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,....\n... you get the idea...\n% 12: 0,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,...\n... you get the idea...\n(HELL NO, if you thought I was going to do: % 60, lol. This is why we got computers and programming, to do this type of hard/long work for us, lol. And, NO computers don't have rights! Don't you dare think it's a good idea to give computers, rights! I like having my slave computer doing work that I don't want to do! Yes, HK is a KKK when it comes to computer slaves! And so are all programmers, too. We like having computers do stuff for us! We love having our computer slaves doing hard/long work that we don't want to do ourselves!)\n\nseconds/minutes have '60' units/digits, so you do: % 60 ---&gt; 0 to 59\ncivilian hours has '12' units/digits, so you do: % 12 ----&gt; 0 to 11 // (this unfortunately is an example of when it needs to be adjusted, as civilian hours are: 1 to 12: 1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,...)\nmilitary hours has '24' units/digits, so you do: % 24 ----&gt; 0 to 23\netc etc etc\n\nyou never change the % VALUE, it must be matched up to what you're using it for (aka, military time is based on 24 hours, so you use '24' for your modulus value: % 24), as it won't work if you change it, for example, if you do for seconds/minutes: % 61, it's going to screw everything up majorly wrongly! What you can do: is adjust its equation/expression that you use it in or you do 'if' checks to adjust the value to what it should be, the common reason for using either of these methods, is that you don't want to use/have '0' as the min (wanting to use/have '1' as the min) and you don't want to use/have 'VALUE-1' as the max (wanting to use/have 'VALUE' as the max, such as with civilian hours as an example).\n</code></pre>\n\n",
      "PostDate": "2017-09-13T06:21:54.5129855Z",
      "LastEditDate": "2017-09-13T11:36:36.056771Z",
      "link": null
    },
    {
      "PostId": "adc056eb-e02b-4893-84fe-794bc77d1827",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nCredit to 'mrangel' for this code fix, for getting the equation corrected and accurate:\r\n\r\n(as unfortunately, you actually have some errors with using/thing that a just, doing 'nothing' or doing a '+1', is all you need, as the errors with them aren't generally apparent --- at least they weren't for me --- but I'm not that smart nor good at math lol-sighs, unless you do extensive testing of numbers and/or are really smart and can recognize these errors that will occur, unlike me)\r\n\r\n```\r\nhk ...\r\ncivilian_hour = hour_count % 12\r\n\r\nWouldn't it be...\r\ncivilian_hour = 1 + ((hour_count + 11) % 12)\r\n?\r\nBecause you want it to go 1,2,…11,12,1,2…\r\n\r\n(+11 rather than -1 because some obscure languages mess up in odd ways using the modulo operator on a negative, and it's easier to write it that way than to test if -1 would work right)\r\n```\r\n\r\n-----------------\r\n\r\nso, to re-hash:\r\n\r\nCORRECT/ACCURATE (error free) (credit to 'mrangel' for this correct/accurate equation):\r\n\r\n1. civilian_hour = 1 + ((hour_count + 11) % 12)\r\n\r\n------------------\r\n\r\nWRONG (error prone):\r\n\r\n1. civilian_hour = hour_count % 12 // 0 to 11, when you need it to be: 1 to 12\r\n2. civilian_hour = (hour_count % 12) + 1 // doesn't match up with the 'hour_count' (confusing and might cause issues for you too), and as especially when/for 'hour_count = 0,12,24,36,etc', that should be '12', not '1'.",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>Credit to 'mrangel' for this code fix, for getting the equation corrected and accurate:</p>\n<p>(as unfortunately, you actually have some errors with using/thing that a just, doing 'nothing' or doing a '+1', is all you need, as the errors with them aren't generally apparent --- at least they weren't for me --- but I'm not that smart nor good at math lol-sighs, unless you do extensive testing of numbers and/or are really smart and can recognize these errors that will occur, unlike me)</p>\n<pre><code>hk ...\ncivilian_hour = hour_count % 12\n\nWouldn't it be...\ncivilian_hour = 1 + ((hour_count + 11) % 12)\n?\nBecause you want it to go 1,2,…11,12,1,2…\n\n(+11 rather than -1 because some obscure languages mess up in odd ways using the modulo operator on a negative, and it's easier to write it that way than to test if -1 would work right)\n</code></pre>\n<hr>\n<p>so, to re-hash:</p>\n<p>CORRECT/ACCURATE (error free) (credit to 'mrangel' for this correct/accurate equation):</p>\n<ol>\n<li>civilian_hour = 1 + ((hour_count + 11) % 12)</li>\n</ol>\n<hr>\n<p>WRONG (error prone):</p>\n<ol>\n<li>civilian_hour = hour_count % 12 // 0 to 11, when you need it to be: 1 to 12</li>\n<li>civilian_hour = (hour_count % 12) + 1 // doesn't match up with the 'hour_count' (confusing and might cause issues for you too), and as especially when/for 'hour_count = 0,12,24,36,etc', that should be '12', not '1'.</li>\n</ol>\n\n",
      "PostDate": "2017-09-13T06:31:38.6300682Z",
      "LastEditDate": "2017-09-13T06:47:31.4877328Z",
      "link": null
    },
    {
      "PostId": "c24e7f77-675f-4d85-a52a-0467e792f3e1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Nice, HK!",
      "EditableFormat": "markdown",
      "HTML": "<p>Nice, HK!</p>\n\n",
      "PostDate": "2017-09-13T07:16:11.7723102Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a766fe26-9fb5-4d9b-a649-d8f85eba4931",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\"civilian_hour = 1 + ((hour_count + 11) % 12)\"\r\nCan someone explain to me what the \"%\" means?\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>\"civilian_hour = 1 + ((hour_count + 11) % 12)\"<br>\nCan someone explain to me what the \"%\" means?</p>\n\n",
      "PostDate": "2017-09-13T16:50:43.2349162Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5c4af270-8b50-4237-8484-7465ef4ee84a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "jmnevil54: First line of this thread explains it.\r\n\r\n% is the modulo operator, or remainder. `((hour_count + 11) % 12)` gives the remainder when `(hour_count + 11)` is divided by 12. Or in other words, the number of hours since (hour_count + 11) was a multiple of 12.\r\n\r\nIt's very useful for things like time, where numbers go in loops. It's good that the symbol has a slash in it, because `/` and `%` are often used together, so it makes sense to have similar symbols. For example\r\n`number_of_minutes / 60` gives a number of hours, and\r\n`number_of_minutes % 60` gives the number of minutes since the last whole hour.",
      "EditableFormat": "markdown",
      "HTML": "<p>jmnevil54: First line of this thread explains it.</p>\n<p>% is the modulo operator, or remainder. <code>((hour_count + 11) % 12)</code> gives the remainder when <code>(hour_count + 11)</code> is divided by 12. Or in other words, the number of hours since (hour_count + 11) was a multiple of 12.</p>\n<p>It's very useful for things like time, where numbers go in loops. It's good that the symbol has a slash in it, because <code>/</code> and <code>%</code> are often used together, so it makes sense to have similar symbols. For example<br>\n<code>number_of_minutes / 60</code> gives a number of hours, and<br>\n<code>number_of_minutes % 60</code> gives the number of minutes since the last whole hour.</p>\n\n",
      "PostDate": "2017-09-13T17:08:32.8326717Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2bc488bb-9768-4b2f-97ee-73a383142108",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@mrangel So it's just dividing with a remainder. 'Kay, thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>@mrangel So it's just dividing with a remainder. 'Kay, thanks!</p>\n\n",
      "PostDate": "2017-09-13T18:56:51.5835311Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c7f00d8f-9b6c-4dfe-a4e2-e6bcfdc5e53f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "getting a bit (bad pun, not intended, lol) into the code-technical-stuff (and heavy/advanced/not-commonly-known-methods-in-doing math) here:\r\n\r\nin programming, you actually can't handle arithmetic of a decimal/fractional value directly\r\n\r\nso, the trick is to break it up\r\n\r\n6.49\r\n+4.99\r\n= CAN'T DO DIRECTLY IN PROGRAMMING\r\n\r\nso you break it up into two operations:\r\n\r\nnon-decimal numbers operation:\r\n6\r\n+4\r\n= 10\r\n\r\nand\r\n\r\ndecimal/fractional numbers operation:\r\n49\r\n+99\r\n= 148 // (the 1 is a carry)\r\n\r\napplying the carry:\r\n10\r\n+1 (carry)\r\n= 11\r\n\r\ncombining back into the full answer:\r\n11 + (dot) + 48 = 11.48\r\n\r\n----------------\r\n\r\nhow addition, subtraction, multiplication, and division actually is done... is more advanced/even-more-technical... deals with bit manipulation: bit shifting, bit logic, boolean logic, 1st compliments, 2nd compliments, storing/loading the location/placement of the '(dot/point/period)' (hence 'floating-point' = decimal/fractional number), etc etc etc",
      "EditableFormat": "markdown",
      "HTML": "<p>getting a bit (bad pun, not intended, lol) into the code-technical-stuff (and heavy/advanced/not-commonly-known-methods-in-doing math) here:</p>\n<p>in programming, you actually can't handle arithmetic of a decimal/fractional value directly</p>\n<p>so, the trick is to break it up</p>\n<p>6.49<br>\n+4.99<br>\n= CAN'T DO DIRECTLY IN PROGRAMMING</p>\n<p>so you break it up into two operations:</p>\n<p>non-decimal numbers operation:<br>\n6<br>\n+4<br>\n= 10</p>\n<p>and</p>\n<p>decimal/fractional numbers operation:<br>\n49<br>\n+99<br>\n= 148 // (the 1 is a carry)</p>\n<p>applying the carry:<br>\n10<br>\n+1 (carry)<br>\n= 11</p>\n<p>combining back into the full answer:<br>\n11 + (dot) + 48 = 11.48</p>\n<hr>\n<p>how addition, subtraction, multiplication, and division actually is done... is more advanced/even-more-technical... deals with bit manipulation: bit shifting, bit logic, boolean logic, 1st compliments, 2nd compliments, storing/loading the location/placement of the '(dot/point/period)' (hence 'floating-point' = decimal/fractional number), etc etc etc</p>\n\n",
      "PostDate": "2017-09-14T09:39:16.9418125Z",
      "LastEditDate": "2017-09-14T09:47:53.2055173Z",
      "link": null
    },
    {
      "PostId": "97f1ca4e-d2ab-4cd3-88ec-2838cc404cba",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah!\r\n\r\nA Double Int!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah!</p>\n<p>A Double Int!</p>\n\n",
      "PostDate": "2017-09-14T09:47:53.486756Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9dd72800-410e-4a51-885e-fa7dbc6c19d5",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if interested in delving into this stuff, here's a glimpse into it:\r\n\r\nhttps://courses.cs.vt.edu/csonline/NumberSystems/Lessons/SubtractionWithTwosComplement/index.html (instead of doing subtraction directly, you can do addition via using 2's compliment of the substracted number)\r\n\r\nhaven't found any good (complete) links on this type of stuff yet... still looking...\r\n\r\n---------\r\n\r\nHK edit:\r\n\r\nhere's a pretty good link site:\r\n\r\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/\r\n\r\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/represent.html (compliments, number systems, etc)\r\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/arith.int.html (integer arithmetic)\r\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/arith.flpt.html (decimal/fractional/\"floating-point\" arithmetic)",
      "EditableFormat": "markdown",
      "HTML": "<p>if interested in delving into this stuff, here's a glimpse into it:</p>\n<p>https://courses.cs.vt.edu/csonline/NumberSystems/Lessons/SubtractionWithTwosComplement/index.html (instead of doing subtraction directly, you can do addition via using 2's compliment of the substracted number)</p>\n<p>haven't found any good (complete) links on this type of stuff yet... still looking...</p>\n<hr>\n<p>HK edit:</p>\n<p>here's a pretty good link site:</p>\n<p>http://pages.cs.wisc.edu/~smoler/x86text/lect.notes/</p>\n<p>http://pages.cs.wisc.edu/~smoler/x86text/lect.notes/represent.html (compliments, number systems, etc)<br>\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/arith.int.html (integer arithmetic)<br>\nhttp://pages.cs.wisc.edu/~smoler/x86text/lect.notes/arith.flpt.html (decimal/fractional/\"floating-point\" arithmetic)</p>\n\n",
      "PostDate": "2017-09-14T09:52:59.6675984Z",
      "LastEditDate": "2017-09-14T10:28:12.3150902Z",
      "link": null
    }
  ]
}
