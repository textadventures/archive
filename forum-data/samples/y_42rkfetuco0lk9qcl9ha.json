{
  "Topic": {
    "TopicId": "y_42rkfetuco0lk9qcl9ha",
    "ForumId": "18",
    "Title": "Dismissable Dialog for QuestJS",
    "LastUpdated": "2024-06-02T16:27:29.5394196Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ad47e49f-5dad-41b4-9545-d4f34e87b69e",
      "UserId": 659063,
      "Username": "cellarderecho",
      "AvatarUrl": "https://secure.gravatar.com/avatar/c0c504aab6249b22fd8633e13dc9c62f?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The default dialog in QuestJS is a nifty feature to receive and process input from the player using a variety of widgets. This library expands on this feature by allowing scripts to be added to each widget to process the input immediately upon player interaction. It also allows the dialog to be dismissed by clicking outside the borders of the dialog.\r\n\r\n### Current Code\r\nThe code can be found at <https://github.com/cellarderecho/derecho-quest-libs/tree/main/dismissable-dialog>, if I make any changes.\r\n```\r\n\"use strict\"\r\n\r\ndocument.addEventListener('click', function(event) {\r\n  var dialog = document.getElementById('dialog');\r\n  if (io.dialogDismissable && event.target !== dialog && !dialog.contains(event.target)) {\r\n    io.dialogCancel();\r\n  }\r\n});\r\n\r\nio.dialogDismissable = false\r\n\r\nio.dialog = function(data) {\r\n  if (test.testing || settings.walkthroughMenuResponses.length > 0) {\r\n    return\r\n  }\r\n\r\n  world.suppressEndTurn = true\r\n\r\n  io.dialogWidgets = data.widgets\r\n  io.dialogOkayScript = data.okayScript\r\n  io.dialogCancelScript = data.cancelScript\r\n  const diag = document.getElementById(\"dialog\")\r\n  diag.innerHTML = \"\";\r\n\r\n  const heading = document.createElement('h3');\r\n  heading.className = 'dialog-heading';\r\n  heading.textContent = data.title;\r\n  diag.appendChild(heading);\r\n\r\n  if (data.desc) {\r\n    const p = document.createElement('p');\r\n    p.textContent = data.desc;\r\n    diag.appendChild(p);\r\n  }\r\n\r\n  if (data.html) {\r\n    diag.insertAdjacentHTML('beforeend', data.html);\r\n  }\r\n\r\n  for (const el of data.widgets) {\r\n    diag.appendChild(io.setWidget(el));\r\n  }\r\n\r\n  if (!data.dismissable || !data.suppressCancel || !data.suppressOkay) {\r\n    const hr = document.createElement('hr');\r\n    diag.appendChild(hr);\r\n\r\n    const p = document.createElement('p');\r\n    if (!data.suppressCancel) {\r\n      const cancel = document.createElement('input');\r\n      cancel.type = 'button';\r\n      cancel.value = 'Cancel';\r\n      cancel.style.color = 'grey';\r\n      cancel.style.float = 'right';\r\n      cancel.addEventListener('click', io.dialogCancel);\r\n      p.appendChild(cancel);\r\n    }\r\n\r\n    if (!data.dismissable || !data.suppressOkay) {\r\n      const okay = document.createElement('input');\r\n      okay.type = 'button';\r\n      okay.value = 'Okay';\r\n      okay.style.color = 'grey';\r\n      okay.style.float = 'right';\r\n      okay.addEventListener('click', io.dialogOkay);\r\n      p.appendChild(okay);\r\n    }\r\n    diag.appendChild(p);\r\n  }\r\n\r\n  diag.style.width = '400px';\r\n  diag.style.height = 'auto';\r\n  diag.style.top = '80px';\r\n  diag.style.position = 'fixed';\r\n  diag.style.display = 'block';\r\n\r\n  document.body.appendChild(diag);\r\n\r\n  io.disable(3);\r\n\r\n  if (data.dismissable) {\r\n    const dismissScript = document.createElement('script');\r\n    dismissScript.text = 'setTimeout(function() { io.dialogDismissable = true; }, 0);';\r\n    diag.appendChild(dismissScript);\r\n  }\r\n}\r\n\r\nio.setWidget = function(options) {\r\n  let type = options.type;\r\n  if (type === 'auto') {\r\n    type = Object.keys(options.data).length > settings.widgetRadioMax ? 'dropdown' : 'radio';\r\n  }\r\n\r\n  const widgetDiv = document.createElement('div');\r\n  widgetDiv.id = `dialog-div-${options.name}`;\r\n  widgetDiv.className = 'widget';\r\n\r\n  const h4 = document.createElement('h4');\r\n  h4.textContent = options.title;\r\n  widgetDiv.appendChild(h4);\r\n\r\n  if (type === 'radio') {\r\n    let value = (typeof options.value === 'string' && Object.keys(options.data).includes(options.value)) ? options.value : Object.keys(options.data)[0];\r\n\r\n    const div = document.createElement('div');\r\n    div.id = options.name;\r\n    div.style.display = 'none';\r\n    widgetDiv.appendChild(div);\r\n\r\n    for (const key in options.data) {\r\n      const input = document.createElement('input');\r\n      input.type = 'radio';\r\n      input.name = options.name;\r\n      input.id = key;\r\n      input.value = key;\r\n\r\n      if (key === value) {\r\n        input.checked = true;\r\n      }\r\n      if (options.hasOwnProperty('oninput')) {\r\n        input.addEventListener('input', (event) => {\r\n          io.onWidgetInput(options.name, event.target.value)\r\n        });\r\n      }\r\n      \r\n      widgetDiv.appendChild(input);\r\n\r\n      const label = document.createElement('label');\r\n      label.htmlFor = key;\r\n      label.textContent = options.data[key];\r\n      widgetDiv.appendChild(label);\r\n\r\n      const br = document.createElement('br');\r\n      widgetDiv.appendChild(br);\r\n    }\r\n  }\r\n\r\n  else if (type === 'dropdown') {\r\n    let value = (typeof options.value === 'string' && Object.keys(options.data).includes(options.value)) ? options.value : Object.keys(options.data)[0]\r\n\r\n    const select = document.createElement('select');\r\n    select.name = options.name;\r\n    select.id = options.name;\r\n    if (options.hasOwnProperty('oninput')) {\r\n      select.addEventListener('change', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n    const br = document.createElement('br')\r\n    select.appendChild(br)\r\n    for (const key in options.data) {\r\n      const option = document.createElement('option');\r\n      option.value = key\r\n      if (key === value){\r\n        option.selected = \"selected\"\r\n      }\r\n      option.textContent = options.data[key]\r\n      select.appendChild(option)\r\n    }  \r\n    widgetDiv.appendChild(select);\r\n  }\r\n\r\n  else if (type === 'dropdownPlus') {\r\n    let index = options.data.findIndex(el => el.name === options.value);\r\n    if (index === -1) index = 0\r\n\r\n    const select = document.createElement('select');\r\n    select.name = options.name;\r\n    select.id = options.name;\r\n    if (options.hasOwnProperty('oninput')) {\r\n      select.addEventListener('change', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n    const br = document.createElement('br')\r\n    select.appendChild(br)\r\n\r\n    for (let i = 0; i < options.data.length; i++) {\r\n      const  el = options.data[i]\r\n      const option = document.createElement('option');\r\n      option.value = el.name\r\n      if (i === index){\r\n        option.selected = \"selected\"\r\n\r\n      }\r\n      option.textContent = el.title\r\n      select.appendChild(option)\r\n    }\r\n\r\n    widgetDiv.appendChild(select);\r\n\r\n    const p = document.createElement('p')\r\n    p.className = \"dialog-text\"\r\n    p.id = `${options.name}-text`\r\n    p.textContent = options.data[index].text\r\n\r\n    widgetDiv.appendChild(p);\r\n  }\r\n\r\n  else if (type === 'checkbox') {\r\n    const input = document.createElement('input');\r\n    input.type = \"checkbox\"\r\n    input.name = options.name;\r\n    input.id = options.name;\r\n    if (options.value) input.checked = true\r\n    if (options.hasOwnProperty('oninput')) {\r\n      input.addEventListener('input', (event) => {\r\n        io.onWidgetInput(options.name, event.target.checked)\r\n      });\r\n    }\r\n \r\n    widgetDiv.appendChild(input);\r\n\r\n    const label = document.createElement('label')\r\n    label.htmlFor = options.name;\r\n    label.textContent = options.data;\r\n    widgetDiv.appendChild(label);\r\n  }\r\n\r\n  else if (type === 'color' || type === 'colour') {\r\n    const colorRegex = /^#(?:[0-9a-fA-F]{3}){1,2}$/\r\n    let value = (typeof options.value === 'string' && options.value.match(colorRegex)) ? options.value : '#000000'\r\n    const input = document.createElement('input');\r\n    input.type = \"color\"\r\n    input.name = options.name;\r\n    input.id = options.name;\r\n    input.value = value;\r\n    if (options.hasOwnProperty('oninput')) {\r\n      input.addEventListener('input', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n \r\n    widgetDiv.appendChild(input);\r\n\r\n  }\r\n\r\n  else if (type === 'range' || type === 'number') {\r\n    const value = typeof options.value === 'number' ? options.value : 0\r\n    const input = document.createElement('input');\r\n    input.type = type\r\n    input.name = options.name;\r\n    input.id = options.name;\r\n    input.value = value;\r\n    if (options.min) input.min = options.min\r\n    if (options.max) input.max = options.max\r\n    if (options.step) input.step = options.step\r\n    if (options.hasOwnProperty('oninput')) {\r\n      input.addEventListener('input', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n \r\n    widgetDiv.appendChild(input);\r\n\r\n  }\r\n\r\n  else if (type === 'text' || type === 'password') {\r\n    const value = typeof options.value === 'string' ? options.value : ''\r\n    const input = document.createElement('input');\r\n    input.type = type\r\n    input.name = options.name;\r\n    input.id = options.name;\r\n    input.value = value;\r\n    if (options.min) input.minlength = options.min\r\n    if (options.max) input.maxlength = options.max\r\n    if (options.pattern) input.pattern = options.pattern\r\n    if (options.placeholder) input.placeholder = options.placeholder\r\n    if (options.hasOwnProperty('oninput')) {\r\n      input.addEventListener('blur', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n\r\n    widgetDiv.appendChild(input);\r\n\r\n  }\r\n\r\n  else if (type === 'file') {\r\n    const value = typeof options.value === 'string' ? options.value : ''\r\n    const input = document.createElement('input');\r\n    input.type = type\r\n    input.name = options.name;\r\n    input.id = options.name;\r\n    input.value = value;\r\n    if (options.accept) input.accept = options.accept\r\n    if (options.hasOwnProperty('oninput')) {\r\n      input.addEventListener('input', (event) => {\r\n        io.onWidgetInput(options.name, event.target.value)\r\n      });\r\n    }\r\n \r\n    widgetDiv.appendChild(input);\r\n\r\n  }\r\n\r\n  if (options.comment) {\r\n    const p = document.createElement('p');\r\n    p.className = 'dialog-comment';\r\n    p.textContent = options.comment;\r\n    widgetDiv.appendChild(p);\r\n  }\r\n\r\n  return widgetDiv;\r\n};\r\n\r\nio.onWidgetInput = function(widgetName, value){\r\n  const result = {}\r\n  result[widgetName] = value\r\n  io.dialogWidgets.find(widget => widget.name === widgetName).oninput(result)\r\n}\r\n\r\nio.htmlValue = function(options) {\r\n  //log(options.name)\r\n  // use type to cover the auto type\r\n  const type = document.querySelector('#' + options.name).type\r\n\r\n  let value\r\n  \r\n  if (options.type === 'dropdownPlus') {\r\n    value = document.querySelector('#' + options.name).value\r\n    options.checked = 0\r\n    for (const el of options.data) {\r\n      if (el.name === value) break\r\n      options.checked++\r\n    }\r\n  }\r\n  else if (type === 'select-one') {\r\n    value = document.querySelector('#' + options.name).value\r\n    options.checked = 0\r\n    for (const key in options.data) {\r\n      if (key === value) break\r\n      options.checked++\r\n    }\r\n  }\r\n  else if (type === 'checkbox') {\r\n    value = document.querySelector('#' + options.name).checked\r\n    options.checked = value\r\n  }\r\n  else if (type === 'text' || type === 'number' || type === 'password' || type === 'range' || type === 'color' || type === 'file') {\r\n    value = document.querySelector('#' + options.name).value\r\n    if (type === 'number') value = parseInt(value)\r\n    options.checked = value\r\n  }\r\n  else {  // radio button has no type\r\n    value = document.querySelector('input[name=\"' + options.name + '\"]:checked').value\r\n    options.checked = 0\r\n    for (const key in options.data) {\r\n      if (key === value) break\r\n      options.checked++\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nio.dialogOkay = function() {\r\n  const diag = document.getElementById(\"dialog\")  \r\n  diag.style.display = 'none'\r\n  io.enable()\r\n  io.dialogDismissable = false\r\n  const results = {}\r\n  for (const data of io.dialogWidgets) {\r\n    results[data.name] = io.htmlValue(data)\r\n  }\r\n  //log(results)\r\n  io.dialogOkayScript(results)\r\n  world.endTurn(world.SUCCESS)\r\n}\r\n\r\nio.dialogCancel = function() {\r\n  const diag = document.getElementById(\"dialog\")  \r\n  diag.style.display = 'none'\r\n  io.enable()\r\n  io.dialogDismissable = false\r\n  if (io.dialogCancelScript) io.dialogCancelScript()\r\n  world.endTurn(world.FAILED)\r\n}\r\n```\r\n\r\n### Parameters for `io.dialog()`\r\n- `title` - The title of the dialog\r\n- `widgets` - A list of widgets to display in the dialog\r\n- `okayScript` - A script to run when \"Okay\" is clicked. Returns a dictionary with each widget's current value.\r\n- `cancelScript` - A script to run when \"Cancel\" is clicked.\r\n- `suppressOkay` - A boolean to hide the \"Okay\" button. Only effective if `dismissable` is also set to `true`.\r\n- `suppressCancel` - A boolean to hide the \"Cancel\" button.\r\n- `dismissable` - A boolean to allow the dialog to be hidden by clicking outside its borders. The `cancelScript` is executed if this happens.\r\n\r\n### Widgets\r\n\r\nThere are two main changes that the dismissable dialog makes to the default QuestJS dialog widgets.\r\n\r\n1. The default widget value can be set with `value`. The type of the value must match the type of the data returned (e.g. a \"range\" widget returns a number, so it may only be provided a number in the value)\r\n2. The `oninput` script can be provided to be called whenever the player provides an input to the widget. This script may specify up to one parameter, which will be passed a dictionary with the widget name and the current value.\r\n3. A new `file` type widget is added.\r\n\r\n### Example\r\n\r\n```\r\nconst onInputFunc = function (input){\r\n      console.log(input)\r\n    }\r\n    \r\n    const widgets = {\r\n      title:'Test All Dialog Widgets',\r\n      widgets:[\r\n        { type: 'radio', title: 'Radio', name: 'radio', data: {radio1:'Option 1', radio2: 'Option 2'}, oninput: onInputFunc, value: 'radio2' },\r\n        { type: 'dropdown', title: 'Dropdown', name: 'dropdown', data: {dropdown1:'Option 1', dropdown2: 'Option 2'}, oninput: onInputFunc, value: 'dropdown2' },\r\n        { type:'dropdownPlus', title:'DropdownPlus', name:'dropdownPlus', lines:4, data:[\r\n          {name:'dropdownPlus1', title:'Option 1', text:'Text for option 1'},\r\n          {name:'dropdownPlus2', title:'Option 2', text:'Text for option 2'},\r\n        ], oninput: onInputFunc, value: 'dropdownPlus2'},\r\n        { type:'checkbox', title:'Checkbox', name:'checkbox', data:'Checked?', oninput: onInputFunc, value: true},\r\n        { type: 'color', title: 'Color', name: 'color', oninput: onInputFunc, value: '#77767b' },\r\n        { type:'range', title:'Range', name:'range', data:'Range?', min: 0, max: 10, step: 2, oninput: onInputFunc, value: 6},\r\n        { type:'number', title:'Number', name:'number', data:'Number?', min: 0, max: 10, oninput: onInputFunc, value: 3},\r\n        { type:'text', title:'Text', name:'text', min: 3, max: 10, oninput: onInputFunc, value: 'text'},\r\n        { type:'password', title:'Password', name:'password', min: 3, max: 10, oninput: onInputFunc, placeholder: 'password'},\r\n        { type:'file', title: 'File', name: 'file', accept: \".txt,.json\", oninput: onInputFunc}\r\n      ],\r\n      okayScript:function(results) {\r\n        console.log(results)\r\n      },\r\n      cancelScript:function(results) {\r\n        console.log(results)\r\n      },\r\n      suppressOkay: true,\r\n      suppressCancel: true,\r\n      dismissable: true\r\n    }\r\n    \r\n    io.dialog(widgets)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>The default dialog in QuestJS is a nifty feature to receive and process input from the player using a variety of widgets. This library expands on this feature by allowing scripts to be added to each widget to process the input immediately upon player interaction. It also allows the dialog to be dismissed by clicking outside the borders of the dialog.</p>\n<h3>Current Code</h3>\n<p>The code can be found at <a href=\"https://github.com/cellarderecho/derecho-quest-libs/tree/main/dismissable-dialog\">https://github.com/cellarderecho/derecho-quest-libs/tree/main/dismissable-dialog</a>, if I make any changes.</p>\n<pre><code>\"use strict\"\n\ndocument.addEventListener('click', function(event) {\n  var dialog = document.getElementById('dialog');\n  if (io.dialogDismissable &amp;&amp; event.target !== dialog &amp;&amp; !dialog.contains(event.target)) {\n    io.dialogCancel();\n  }\n});\n\nio.dialogDismissable = false\n\nio.dialog = function(data) {\n  if (test.testing || settings.walkthroughMenuResponses.length &gt; 0) {\n    return\n  }\n\n  world.suppressEndTurn = true\n\n  io.dialogWidgets = data.widgets\n  io.dialogOkayScript = data.okayScript\n  io.dialogCancelScript = data.cancelScript\n  const diag = document.getElementById(\"dialog\")\n  diag.innerHTML = \"\";\n\n  const heading = document.createElement('h3');\n  heading.className = 'dialog-heading';\n  heading.textContent = data.title;\n  diag.appendChild(heading);\n\n  if (data.desc) {\n    const p = document.createElement('p');\n    p.textContent = data.desc;\n    diag.appendChild(p);\n  }\n\n  if (data.html) {\n    diag.insertAdjacentHTML('beforeend', data.html);\n  }\n\n  for (const el of data.widgets) {\n    diag.appendChild(io.setWidget(el));\n  }\n\n  if (!data.dismissable || !data.suppressCancel || !data.suppressOkay) {\n    const hr = document.createElement('hr');\n    diag.appendChild(hr);\n\n    const p = document.createElement('p');\n    if (!data.suppressCancel) {\n      const cancel = document.createElement('input');\n      cancel.type = 'button';\n      cancel.value = 'Cancel';\n      cancel.style.color = 'grey';\n      cancel.style.float = 'right';\n      cancel.addEventListener('click', io.dialogCancel);\n      p.appendChild(cancel);\n    }\n\n    if (!data.dismissable || !data.suppressOkay) {\n      const okay = document.createElement('input');\n      okay.type = 'button';\n      okay.value = 'Okay';\n      okay.style.color = 'grey';\n      okay.style.float = 'right';\n      okay.addEventListener('click', io.dialogOkay);\n      p.appendChild(okay);\n    }\n    diag.appendChild(p);\n  }\n\n  diag.style.width = '400px';\n  diag.style.height = 'auto';\n  diag.style.top = '80px';\n  diag.style.position = 'fixed';\n  diag.style.display = 'block';\n\n  document.body.appendChild(diag);\n\n  io.disable(3);\n\n  if (data.dismissable) {\n    const dismissScript = document.createElement('script');\n    dismissScript.text = 'setTimeout(function() { io.dialogDismissable = true; }, 0);';\n    diag.appendChild(dismissScript);\n  }\n}\n\nio.setWidget = function(options) {\n  let type = options.type;\n  if (type === 'auto') {\n    type = Object.keys(options.data).length &gt; settings.widgetRadioMax ? 'dropdown' : 'radio';\n  }\n\n  const widgetDiv = document.createElement('div');\n  widgetDiv.id = `dialog-div-${options.name}`;\n  widgetDiv.className = 'widget';\n\n  const h4 = document.createElement('h4');\n  h4.textContent = options.title;\n  widgetDiv.appendChild(h4);\n\n  if (type === 'radio') {\n    let value = (typeof options.value === 'string' &amp;&amp; Object.keys(options.data).includes(options.value)) ? options.value : Object.keys(options.data)[0];\n\n    const div = document.createElement('div');\n    div.id = options.name;\n    div.style.display = 'none';\n    widgetDiv.appendChild(div);\n\n    for (const key in options.data) {\n      const input = document.createElement('input');\n      input.type = 'radio';\n      input.name = options.name;\n      input.id = key;\n      input.value = key;\n\n      if (key === value) {\n        input.checked = true;\n      }\n      if (options.hasOwnProperty('oninput')) {\n        input.addEventListener('input', (event) =&gt; {\n          io.onWidgetInput(options.name, event.target.value)\n        });\n      }\n      \n      widgetDiv.appendChild(input);\n\n      const label = document.createElement('label');\n      label.htmlFor = key;\n      label.textContent = options.data[key];\n      widgetDiv.appendChild(label);\n\n      const br = document.createElement('br');\n      widgetDiv.appendChild(br);\n    }\n  }\n\n  else if (type === 'dropdown') {\n    let value = (typeof options.value === 'string' &amp;&amp; Object.keys(options.data).includes(options.value)) ? options.value : Object.keys(options.data)[0]\n\n    const select = document.createElement('select');\n    select.name = options.name;\n    select.id = options.name;\n    if (options.hasOwnProperty('oninput')) {\n      select.addEventListener('change', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n    const br = document.createElement('br')\n    select.appendChild(br)\n    for (const key in options.data) {\n      const option = document.createElement('option');\n      option.value = key\n      if (key === value){\n        option.selected = \"selected\"\n      }\n      option.textContent = options.data[key]\n      select.appendChild(option)\n    }  \n    widgetDiv.appendChild(select);\n  }\n\n  else if (type === 'dropdownPlus') {\n    let index = options.data.findIndex(el =&gt; el.name === options.value);\n    if (index === -1) index = 0\n\n    const select = document.createElement('select');\n    select.name = options.name;\n    select.id = options.name;\n    if (options.hasOwnProperty('oninput')) {\n      select.addEventListener('change', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n    const br = document.createElement('br')\n    select.appendChild(br)\n\n    for (let i = 0; i &lt; options.data.length; i++) {\n      const  el = options.data[i]\n      const option = document.createElement('option');\n      option.value = el.name\n      if (i === index){\n        option.selected = \"selected\"\n\n      }\n      option.textContent = el.title\n      select.appendChild(option)\n    }\n\n    widgetDiv.appendChild(select);\n\n    const p = document.createElement('p')\n    p.className = \"dialog-text\"\n    p.id = `${options.name}-text`\n    p.textContent = options.data[index].text\n\n    widgetDiv.appendChild(p);\n  }\n\n  else if (type === 'checkbox') {\n    const input = document.createElement('input');\n    input.type = \"checkbox\"\n    input.name = options.name;\n    input.id = options.name;\n    if (options.value) input.checked = true\n    if (options.hasOwnProperty('oninput')) {\n      input.addEventListener('input', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.checked)\n      });\n    }\n \n    widgetDiv.appendChild(input);\n\n    const label = document.createElement('label')\n    label.htmlFor = options.name;\n    label.textContent = options.data;\n    widgetDiv.appendChild(label);\n  }\n\n  else if (type === 'color' || type === 'colour') {\n    const colorRegex = /^#(?:[0-9a-fA-F]{3}){1,2}$/\n    let value = (typeof options.value === 'string' &amp;&amp; options.value.match(colorRegex)) ? options.value : '#000000'\n    const input = document.createElement('input');\n    input.type = \"color\"\n    input.name = options.name;\n    input.id = options.name;\n    input.value = value;\n    if (options.hasOwnProperty('oninput')) {\n      input.addEventListener('input', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n \n    widgetDiv.appendChild(input);\n\n  }\n\n  else if (type === 'range' || type === 'number') {\n    const value = typeof options.value === 'number' ? options.value : 0\n    const input = document.createElement('input');\n    input.type = type\n    input.name = options.name;\n    input.id = options.name;\n    input.value = value;\n    if (options.min) input.min = options.min\n    if (options.max) input.max = options.max\n    if (options.step) input.step = options.step\n    if (options.hasOwnProperty('oninput')) {\n      input.addEventListener('input', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n \n    widgetDiv.appendChild(input);\n\n  }\n\n  else if (type === 'text' || type === 'password') {\n    const value = typeof options.value === 'string' ? options.value : ''\n    const input = document.createElement('input');\n    input.type = type\n    input.name = options.name;\n    input.id = options.name;\n    input.value = value;\n    if (options.min) input.minlength = options.min\n    if (options.max) input.maxlength = options.max\n    if (options.pattern) input.pattern = options.pattern\n    if (options.placeholder) input.placeholder = options.placeholder\n    if (options.hasOwnProperty('oninput')) {\n      input.addEventListener('blur', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n\n    widgetDiv.appendChild(input);\n\n  }\n\n  else if (type === 'file') {\n    const value = typeof options.value === 'string' ? options.value : ''\n    const input = document.createElement('input');\n    input.type = type\n    input.name = options.name;\n    input.id = options.name;\n    input.value = value;\n    if (options.accept) input.accept = options.accept\n    if (options.hasOwnProperty('oninput')) {\n      input.addEventListener('input', (event) =&gt; {\n        io.onWidgetInput(options.name, event.target.value)\n      });\n    }\n \n    widgetDiv.appendChild(input);\n\n  }\n\n  if (options.comment) {\n    const p = document.createElement('p');\n    p.className = 'dialog-comment';\n    p.textContent = options.comment;\n    widgetDiv.appendChild(p);\n  }\n\n  return widgetDiv;\n};\n\nio.onWidgetInput = function(widgetName, value){\n  const result = {}\n  result[widgetName] = value\n  io.dialogWidgets.find(widget =&gt; widget.name === widgetName).oninput(result)\n}\n\nio.htmlValue = function(options) {\n  //log(options.name)\n  // use type to cover the auto type\n  const type = document.querySelector('#' + options.name).type\n\n  let value\n  \n  if (options.type === 'dropdownPlus') {\n    value = document.querySelector('#' + options.name).value\n    options.checked = 0\n    for (const el of options.data) {\n      if (el.name === value) break\n      options.checked++\n    }\n  }\n  else if (type === 'select-one') {\n    value = document.querySelector('#' + options.name).value\n    options.checked = 0\n    for (const key in options.data) {\n      if (key === value) break\n      options.checked++\n    }\n  }\n  else if (type === 'checkbox') {\n    value = document.querySelector('#' + options.name).checked\n    options.checked = value\n  }\n  else if (type === 'text' || type === 'number' || type === 'password' || type === 'range' || type === 'color' || type === 'file') {\n    value = document.querySelector('#' + options.name).value\n    if (type === 'number') value = parseInt(value)\n    options.checked = value\n  }\n  else {  // radio button has no type\n    value = document.querySelector('input[name=\"' + options.name + '\"]:checked').value\n    options.checked = 0\n    for (const key in options.data) {\n      if (key === value) break\n      options.checked++\n    }\n  }\n\n  return value\n}\n\nio.dialogOkay = function() {\n  const diag = document.getElementById(\"dialog\")  \n  diag.style.display = 'none'\n  io.enable()\n  io.dialogDismissable = false\n  const results = {}\n  for (const data of io.dialogWidgets) {\n    results[data.name] = io.htmlValue(data)\n  }\n  //log(results)\n  io.dialogOkayScript(results)\n  world.endTurn(world.SUCCESS)\n}\n\nio.dialogCancel = function() {\n  const diag = document.getElementById(\"dialog\")  \n  diag.style.display = 'none'\n  io.enable()\n  io.dialogDismissable = false\n  if (io.dialogCancelScript) io.dialogCancelScript()\n  world.endTurn(world.FAILED)\n}\n</code></pre>\n<h3>Parameters for <code>io.dialog()</code></h3>\n<ul>\n<li><code>title</code> - The title of the dialog</li>\n<li><code>widgets</code> - A list of widgets to display in the dialog</li>\n<li><code>okayScript</code> - A script to run when \"Okay\" is clicked. Returns a dictionary with each widget's current value.</li>\n<li><code>cancelScript</code> - A script to run when \"Cancel\" is clicked.</li>\n<li><code>suppressOkay</code> - A boolean to hide the \"Okay\" button. Only effective if <code>dismissable</code> is also set to <code>true</code>.</li>\n<li><code>suppressCancel</code> - A boolean to hide the \"Cancel\" button.</li>\n<li><code>dismissable</code> - A boolean to allow the dialog to be hidden by clicking outside its borders. The <code>cancelScript</code> is executed if this happens.</li>\n</ul>\n<h3>Widgets</h3>\n<p>There are two main changes that the dismissable dialog makes to the default QuestJS dialog widgets.</p>\n<ol>\n<li>The default widget value can be set with <code>value</code>. The type of the value must match the type of the data returned (e.g. a \"range\" widget returns a number, so it may only be provided a number in the value)</li>\n<li>The <code>oninput</code> script can be provided to be called whenever the player provides an input to the widget. This script may specify up to one parameter, which will be passed a dictionary with the widget name and the current value.</li>\n<li>A new <code>file</code> type widget is added.</li>\n</ol>\n<h3>Example</h3>\n<pre><code>const onInputFunc = function (input){\n      console.log(input)\n    }\n    \n    const widgets = {\n      title:'Test All Dialog Widgets',\n      widgets:[\n        { type: 'radio', title: 'Radio', name: 'radio', data: {radio1:'Option 1', radio2: 'Option 2'}, oninput: onInputFunc, value: 'radio2' },\n        { type: 'dropdown', title: 'Dropdown', name: 'dropdown', data: {dropdown1:'Option 1', dropdown2: 'Option 2'}, oninput: onInputFunc, value: 'dropdown2' },\n        { type:'dropdownPlus', title:'DropdownPlus', name:'dropdownPlus', lines:4, data:[\n          {name:'dropdownPlus1', title:'Option 1', text:'Text for option 1'},\n          {name:'dropdownPlus2', title:'Option 2', text:'Text for option 2'},\n        ], oninput: onInputFunc, value: 'dropdownPlus2'},\n        { type:'checkbox', title:'Checkbox', name:'checkbox', data:'Checked?', oninput: onInputFunc, value: true},\n        { type: 'color', title: 'Color', name: 'color', oninput: onInputFunc, value: '#77767b' },\n        { type:'range', title:'Range', name:'range', data:'Range?', min: 0, max: 10, step: 2, oninput: onInputFunc, value: 6},\n        { type:'number', title:'Number', name:'number', data:'Number?', min: 0, max: 10, oninput: onInputFunc, value: 3},\n        { type:'text', title:'Text', name:'text', min: 3, max: 10, oninput: onInputFunc, value: 'text'},\n        { type:'password', title:'Password', name:'password', min: 3, max: 10, oninput: onInputFunc, placeholder: 'password'},\n        { type:'file', title: 'File', name: 'file', accept: \".txt,.json\", oninput: onInputFunc}\n      ],\n      okayScript:function(results) {\n        console.log(results)\n      },\n      cancelScript:function(results) {\n        console.log(results)\n      },\n      suppressOkay: true,\n      suppressCancel: true,\n      dismissable: true\n    }\n    \n    io.dialog(widgets)\n</code></pre>\n\n",
      "PostDate": "2024-06-02T16:27:29.5394196Z",
      "LastEditDate": "2024-06-04T11:14:44.8057569Z",
      "link": null
    }
  ]
}
