{
  "Topic": {
    "TopicId": "_9oe4afbsukhpqrkjfz9lw",
    "ForumId": "18",
    "Title": "Script Dictionaries hurt my head",
    "LastUpdated": "2023-06-17T18:46:41.9432698Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f5feb9b3-c0ba-4e80-b9b1-33bab24430c5",
      "UserId": 433826,
      "Username": "ThatGoddess",
      "AvatarUrl": "https://i.imgur.com/SFWbOxsb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So, as you might know, I'm working on some libraries. With a lot of input needed by the creator, script dictionaries are an absolute must, but... these things are cursed in libraries. I've had three distinct problems, which I'm not even sure if I could replicate them?\r\n\r\n**Problem Number 1:**\r\n\r\nThe entire dictionary, all the entries added via a nicely made tab that I double checked exist in an attribute now, just... disappears when the game starts. Completely empty in the debugger.\r\n\r\nI have no idea _why_ that happened and this is the one I can't replicate either, but it certainly happened and the only way of getting around it was to rewrite the entire script to not use a script dictionary.\r\n\r\n**Problem Number 2:**\r\n\r\nNot getting around one for a function, I try the script dictionary again and... it works! Too well. Whenever I add something to the script dictionary provided by a custom Object Type, it changes the value for the entire Type, giving the key and script to every single object inheriting it. Why? I don't know, no other attribute type does that, it's just scripts.\r\nBut fine, I can work around that, just check if the attribute exists before I search it, to handle if the creator doesn't need it.\r\n\r\n**Problem Number 3:**\r\nNow that I worked around #2, let me just revert the library and delete the Dictionary from the type and... now the attribute is still present on the affected objects and I can't delete them... great. Luckily I managed to work around that as well by putting the attribute back into the library, copying the type, deleting it there and **then** deleting it out of the library. Quest crashed twice but it worked, so.\r\n\r\nNow. I have absolutely 0 idea why any of that happened the way it did, all I know is that these things are so broken they may as well be haunted... which sucks, given how important they are to libraries.\r\n\r\nSo I really hope that these get looked at. But for now I'm off to soothe my head.",
      "EditableFormat": "markdown",
      "HTML": "<p>So, as you might know, I'm working on some libraries. With a lot of input needed by the creator, script dictionaries are an absolute must, but... these things are cursed in libraries. I've had three distinct problems, which I'm not even sure if I could replicate them?</p>\n<p><strong>Problem Number 1:</strong></p>\n<p>The entire dictionary, all the entries added via a nicely made tab that I double checked exist in an attribute now, just... disappears when the game starts. Completely empty in the debugger.</p>\n<p>I have no idea <em>why</em> that happened and this is the one I can't replicate either, but it certainly happened and the only way of getting around it was to rewrite the entire script to not use a script dictionary.</p>\n<p><strong>Problem Number 2:</strong></p>\n<p>Not getting around one for a function, I try the script dictionary again and... it works! Too well. Whenever I add something to the script dictionary provided by a custom Object Type, it changes the value for the entire Type, giving the key and script to every single object inheriting it. Why? I don't know, no other attribute type does that, it's just scripts.<br>\nBut fine, I can work around that, just check if the attribute exists before I search it, to handle if the creator doesn't need it.</p>\n<p><strong>Problem Number 3:</strong><br>\nNow that I worked around #2, let me just revert the library and delete the Dictionary from the type and... now the attribute is still present on the affected objects and I can't delete them... great. Luckily I managed to work around that as well by putting the attribute back into the library, copying the type, deleting it there and <strong>then</strong> deleting it out of the library. Quest crashed twice but it worked, so.</p>\n<p>Now. I have absolutely 0 idea why any of that happened the way it did, all I know is that these things are so broken they may as well be haunted... which sucks, given how important they are to libraries.</p>\n<p>So I really hope that these get looked at. But for now I'm off to soothe my head.</p>\n\n",
      "PostDate": "2023-06-17T18:46:41.9432698Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6432f53d-f234-472c-a108-39aa413cba63",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I Haven't started working with the Script dictionaries yet, but I think I will eventually.\r\n\r\nI seem to remember that Pixie put somewhere in documentation that Dictionaries shouldn't be added to libraries generally, because if they need to be updated during the game, they won't be.  You would have to create them in the Game start/initialisation script or something like that.  So like, separate from the library include it with the instructions that the creator must put them there.\r\n\r\nAs far as types, are you saying that adding a script dictionary to an individual object that has an inherited a type adds it to the type template?  Or are you saying that you'd added the dictionary to the type template, and now are surprised that it shows up on every object that inherits the type?\r\n\r\nSometimes when I'm tired, (or my brain hurts for some reason) I do things like changing something where I shouldn't be changing it, and then wondering what happened.  So don't think I'm picking on you about the types.  But everything you add to the \"type\" at the bottom of the game in the advanced section gets added to everything that inherits.  But it shouldn't be added to the type automatically if you've changed an individual object.  That would surprise me.\r\n\r\nAlso, there have been times when I changed something that had auto-added attributes to a bunch of objects, changed it back, and then wondered why they didn't go away for a moment.   I learned the hard way (but still sometimes forget) that if I'm going to change a library, or type, or really anything largely significant... I want a copy named with a new test-version decimal to work in.  That way both versions exist.\r\n\r\nI can go to an earlier version before those attributes were mass added by the type and add the new type that doesn't do that.  Then it runs fine.\r\n\r\nIn your case, maybe start a clean game and then re-add the objects after putting the type that doesn't have those attributes?  Or go into code mode and find and delete those attributes you don't want?",
      "EditableFormat": "markdown",
      "HTML": "<p>I Haven't started working with the Script dictionaries yet, but I think I will eventually.</p>\n<p>I seem to remember that Pixie put somewhere in documentation that Dictionaries shouldn't be added to libraries generally, because if they need to be updated during the game, they won't be.  You would have to create them in the Game start/initialisation script or something like that.  So like, separate from the library include it with the instructions that the creator must put them there.</p>\n<p>As far as types, are you saying that adding a script dictionary to an individual object that has an inherited a type adds it to the type template?  Or are you saying that you'd added the dictionary to the type template, and now are surprised that it shows up on every object that inherits the type?</p>\n<p>Sometimes when I'm tired, (or my brain hurts for some reason) I do things like changing something where I shouldn't be changing it, and then wondering what happened.  So don't think I'm picking on you about the types.  But everything you add to the \"type\" at the bottom of the game in the advanced section gets added to everything that inherits.  But it shouldn't be added to the type automatically if you've changed an individual object.  That would surprise me.</p>\n<p>Also, there have been times when I changed something that had auto-added attributes to a bunch of objects, changed it back, and then wondered why they didn't go away for a moment.   I learned the hard way (but still sometimes forget) that if I'm going to change a library, or type, or really anything largely significant... I want a copy named with a new test-version decimal to work in.  That way both versions exist.</p>\n<p>I can go to an earlier version before those attributes were mass added by the type and add the new type that doesn't do that.  Then it runs fine.</p>\n<p>In your case, maybe start a clean game and then re-add the objects after putting the type that doesn't have those attributes?  Or go into code mode and find and delete those attributes you don't want?</p>\n\n",
      "PostDate": "2023-06-18T18:37:20.1916846Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1fd43d27-2828-45ac-b311-08ccbdc956a8",
      "UserId": 433826,
      "Username": "ThatGoddess",
      "AvatarUrl": "https://i.imgur.com/SFWbOxsb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've fixed everything up by now, but no, I've worked enough with this to at least _mostly_ know what I'm doing... writing a cool 1000+ lines worth of libraries in a short span of time will do that to you!\r\n\r\nIt's a script dictionary added to a type, which in turn was added and edited at a single exit which then added both key and value to the type itself, in turn adding it to everything else... it's fixed now, by removing it from the type and creating it via a tab, while treating its possible non-existense accordingly. I have no idea why this happened and I think I don't want to!\r\n\r\nBut string dictionaries are working fine, is the other thing. Not a single problem encountered there! Object ones I have yet to use, but so far only string dictionaries are causing these massive, confusing problems... but hey, that library _should_ be fully done and the next one will... need them as well... great...\r\n\r\nBut hey, by now I know how to abuse quest as much as it abuses me, so we'll see who breaks first!",
      "EditableFormat": "markdown",
      "HTML": "<p>I've fixed everything up by now, but no, I've worked enough with this to at least <em>mostly</em> know what I'm doing... writing a cool 1000+ lines worth of libraries in a short span of time will do that to you!</p>\n<p>It's a script dictionary added to a type, which in turn was added and edited at a single exit which then added both key and value to the type itself, in turn adding it to everything else... it's fixed now, by removing it from the type and creating it via a tab, while treating its possible non-existense accordingly. I have no idea why this happened and I think I don't want to!</p>\n<p>But string dictionaries are working fine, is the other thing. Not a single problem encountered there! Object ones I have yet to use, but so far only string dictionaries are causing these massive, confusing problems... but hey, that library <em>should</em> be fully done and the next one will... need them as well... great...</p>\n<p>But hey, by now I know how to abuse quest as much as it abuses me, so we'll see who breaks first!</p>\n\n",
      "PostDate": "2023-06-18T22:27:36.6962775Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "05788b44-daef-4f13-841c-34d16c88b8ce",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Issue 2 is because of the way lists and dictionaries are implemented; they act as pointers in some ways.\r\n\r\nIt *should* give an error if you try to add or remove dictionary items on an inherited dictionary; maybe scriptdictionary isn't checked.\r\n\r\nIt's the same reason libraries which play with displayverbs have to do something like\r\n```\r\nobject.displayverbs = object.displayverbs\r\n```\r\nfirst; disconnecting the object's list from the type's list.",
      "EditableFormat": "markdown",
      "HTML": "<p>Issue 2 is because of the way lists and dictionaries are implemented; they act as pointers in some ways.</p>\n<p>It <em>should</em> give an error if you try to add or remove dictionary items on an inherited dictionary; maybe scriptdictionary isn't checked.</p>\n<p>It's the same reason libraries which play with displayverbs have to do something like</p>\n<pre><code>object.displayverbs = object.displayverbs\n</code></pre>\n<p>first; disconnecting the object's list from the type's list.</p>\n\n",
      "PostDate": "2023-06-19T07:50:46.5622595Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3fd2876b-facb-4f14-ade5-1144c3e85c05",
      "UserId": 433826,
      "Username": "ThatGoddess",
      "AvatarUrl": "https://i.imgur.com/SFWbOxsb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well... yes and no.\r\n\r\nInherited dictionaries need to be copied first by modifying them on the object in the editor (or via that script), yes. I assume that's the same for script dictionaries, though I hope I will never have to add to them midgame.\r\n\r\nBut this isn't that problem. This is worse. **This is in the editor. _With an already copied attribute._**",
      "EditableFormat": "markdown",
      "HTML": "<p>Well... yes and no.</p>\n<p>Inherited dictionaries need to be copied first by modifying them on the object in the editor (or via that script), yes. I assume that's the same for script dictionaries, though I hope I will never have to add to them midgame.</p>\n<p>But this isn't that problem. This is worse. <strong>This is in the editor. <em>With an already copied attribute.</em></strong></p>\n\n",
      "PostDate": "2023-06-19T09:26:00.4036197Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bddeb08b-940a-4876-a60a-21e4320f3d87",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@ThatGoddess\r\n\r\nI wrote a bunch of libraries without using script dictionaries; they may not be that necessary - though I do not know what you are trying to do, so they might be!\r\n\r\nProblem 1: Are you using the Quest editor as opposed to a text editor? I do recall adding something to a game using the editor and it not getting saved. I think that was a type (or something to do with a type), so yes, there are issues... Use a text editor, if you can deal with the XML.\r\n\r\n\r\n\r\n@Ip Man\r\n\r\nWith regards to \"Dictionaries shouldn't be added to libraries generally\" that is for QuestJS, which saves games in a very different way to Quest 5. Quest 5 saves everything, so should be fine.",
      "EditableFormat": "markdown",
      "HTML": "<p>@ThatGoddess</p>\n<p>I wrote a bunch of libraries without using script dictionaries; they may not be that necessary - though I do not know what you are trying to do, so they might be!</p>\n<p>Problem 1: Are you using the Quest editor as opposed to a text editor? I do recall adding something to a game using the editor and it not getting saved. I think that was a type (or something to do with a type), so yes, there are issues... Use a text editor, if you can deal with the XML.</p>\n<p>@Ip Man</p>\n<p>With regards to \"Dictionaries shouldn't be added to libraries generally\" that is for QuestJS, which saves games in a very different way to Quest 5. Quest 5 saves everything, so should be fine.</p>\n\n",
      "PostDate": "2023-06-20T11:02:45.308832Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a87f451d-d18c-4d4c-96c0-ed39d27610e8",
      "UserId": 433826,
      "Username": "ThatGoddess",
      "AvatarUrl": "https://i.imgur.com/SFWbOxsb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@The Pixie\r\n\r\nIt's a pretty comprehensive movement overhaul, which needs script dictionaries for a few things, including handling the descriptions and exits! Somehow caused me less trouble than making a Questing system though, that one really made me respect yours a whole lot more!\r\n\r\nAnd yeah, I'm using the quest editor to put everything together! It's only happened that one time, and I'm guessing the empty attributed provided by the type had overruled the edited one on the object? IIRC it didn't show up as copied in the attribute view so it's probably an issue with editing type provided attributes via a tab, now that I think about it? ",
      "EditableFormat": "markdown",
      "HTML": "<p>@The Pixie</p>\n<p>It's a pretty comprehensive movement overhaul, which needs script dictionaries for a few things, including handling the descriptions and exits! Somehow caused me less trouble than making a Questing system though, that one really made me respect yours a whole lot more!</p>\n<p>And yeah, I'm using the quest editor to put everything together! It's only happened that one time, and I'm guessing the empty attributed provided by the type had overruled the edited one on the object? IIRC it didn't show up as copied in the attribute view so it's probably an issue with editing type provided attributes via a tab, now that I think about it?</p>\n\n",
      "PostDate": "2023-06-20T11:28:38.4038478Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
