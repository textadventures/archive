{
  "Topic": {
    "TopicId": "5862",
    "ForumId": "18",
    "Title": "Complex commands",
    "LastUpdated": "2016-01-18T08:01:57+00:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "40514",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "So you want to use THIS with THAT? what is the best way to handle it?\n\nTIE CORD TO HOOK\nCUT ROPE WITH KNIFE\nATTACK GOBLIN WITH KNIFE\nGET HOT COAL WITH TONGS\nIGNITE FIREWORK WITH MATCH\n\nFirst, remember that GIVE and USE are already built in; if you want to use them, tick the feature on one of the items, and go to the Use/give tab. \n\nAs an example, I am going to implement TIE CORD TO HOOK.\n\n\n[b:3d8itizi][i:3d8itizi]Command Pattern[/i:3d8itizi][/b:3d8itizi]\n\nFirst you need a command pattern. We could do this:\n[code:3d8itizi]tie cord to hook[/code:3d8itizi]\nIf you do that then the player has to type that exact phrase or Quest will not recognise it. We can concatenate alternatives by separating them with semi-colons (and optionally spaces too).\n[code:3d8itizi]tie cord to hook; tie thread to hook; tie string to hook[/code:3d8itizi]\nHowever, we can do even better, and let Quest handle the synonyms, by using #object#.\n[code:3d8itizi]tie #object# to hook[/code:3d8itizi]\nAs long as you have set up the cord with these alternative names (the Other names list on the Object tab), Quest will match #object# against any of them. An important benefit here is that your game will have the same set of synonyms for an object whether the player is trying to ick it up, look at it or tie it to a hook.\n\nAnd you can have as many objects as you like in the pattern; just make sure they start object so Quest will match them against objects that are present. We need two here, the cord and the hook:\n[code:3d8itizi]tie #object_cord# to #object_hook#[/code:3d8itizi]\nYou might now want to include alternative verbs.\n[code:3d8itizi]tie #object_cord# to #object_hook#; attach #object_cord# to #object_hook#; fasten #object_cord# to #object_hook#[/code:3d8itizi]\n\n\n[b:3d8itizi][i:3d8itizi]Regular Expression (optional!)[/i:3d8itizi][/b:3d8itizi]\n\nIf you are feeling brave, you could use a regular expression here (remember to set Regular expression from the drop down list).\n[code:3d8itizi]^(tie|attach|fasten) (?&lt;object_cord&gt;&#46;*) to (?&lt;object_hook&gt;&#46;*)$[/code:3d8itizi]\nThe ^ at the start says Quest must match this to the start of the command, whilst the $ at the end says this must ber the end of the command. The (tie|attach|fasten) tells Quest it has to match to one of these. (?&lt;object_cord&gt;.*) is equivalent to #object_cord#. Plain text, like &quot;to&quot;, has to be matched exactly.\n\nMay be not much point in this example, but if you have variations in the joining word to handle too, you could be looking at a lot of combinations, so this way may be easier. For example:\n[code:3d8itizi]^(get|pick up|take) (?&lt;object_cord&gt;&#46;*) (using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*)$[/code:3d8itizi]\nOr even:\n[code:3d8itizi]^((get|pick up|take) (the |)(?&lt;object_cord&gt;&#46;*) (using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*)|(using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*) (get|pick up|take) (the |)(?&lt;object_cord&gt;&#46;*))$[/code:3d8itizi]\nThat will handle any of these:\n\n      get hat with hook\n      pick up hat using hook\n      take the hat with the hook\n      using the hook take the hat\n\n      \n[b:3d8itizi][i:3d8itizi]Script[/i:3d8itizi][/b:3d8itizi]\n\nSo we have a command pattern or regular expression that Quest will use to match this command, now we need to do something, so we need a script. Because we used this as the command pattern:\n[code:3d8itizi]tie #object_cord# to #object_hook#[/code:3d8itizi]\n... Quest will already have assigned values to two special variables, in this case called object_cord and object_hook. We do not know specifically what they are, but they will be objects that are present in the current room or in the player's inventory.\n\nThe way to write the code is going to be the same for most commands. Think of a checklist; what do we need to check before allowing the command to work?\n\n1. The player has the first object\n2. The first object is the cord\n3. The second object is the hook\n4. The cord is not already tied to the hook\n\nAs Quest will only match an object if it is present, so we do not need to check if the hook is present, it must be if Quest found it (and you may choose not to check number 1; does the player need the cord in his inventory or should the command work if the cord is lying on the ground?).\n\nFor these four conditions, we convert them to a if/else if/else cascade, at each step testing if it is [i:3d8itizi]not[/i:3d8itizi] so:\n[code:3d8itizi]// 1&#46; The player has the first object\nif (not object_cord&#46;parent = player) {\n  msg(&quot;You are not holding &quot; + GetDisplayName(object_cord) + &quot;&#46;&quot;)\n}\n// 2&#46; The first object is the cord\nelse if (not object_cord = cord) {\n  msg(&quot;You cannot tie the &quot; + GetDisplayName(object_cord) + &quot; to anytthing&#46;&quot;)\n}\n// 3&#46; The second object is the hook\nelse if (not object_hook = hook) {\n  msg(&quot;You cannot tie anything to the &quot; + GetDisplayName(object_hook) + &quot;&#46;&quot;)\n}\n// 4&#46; The cord is not already tied to the hook\nelse if (GetBoolean(object_cord, &quot;tiedtohook&quot;)) {\n  msg(&quot;You've already done that&#46;&quot;)\n}\n// Everything checked, so do it\nelse {\n  msg(&quot;You tie the cord to the hook&#46;&quot;)\n  cord&#46;tiedtohook = true\n  code&#46;take = false\n  cord&#46;parent = player&#46;parent\n}[/code:3d8itizi]\n\n\n[b:3d8itizi][i:3d8itizi]More General[/i:3d8itizi][/b:3d8itizi]\n\nSuppose there are several objects the cord might be tied to, what is the best way to handle that? What we want is a command that can handle tying the cord to any such object, so the first thing to do is to flag an object as attachable. Go to the Attributes tab of each object, and add a new attribute, [i:3d8itizi]attachable[/i:3d8itizi], set it to be a Boolean, and tick it. Now our command can check if the object has that set, and if it does, the cord can be tied to it.\n\nThe code here has two changes. Condition number 3 now checks the [i:3d8itizi]attachable[/i:3d8itizi] flag, instead of checking the object in the hook. Also, at the end, an attribute on the cord gets set to the object it is attached to, so you can test what that was if necessary.\n[code:3d8itizi]// 1&#46; The player has the first object\nif (not object_cord&#46;parent = player) {\n  msg(&quot;You are not holding &quot; + GetDisplayName(object_cord) + &quot;&#46;&quot;)\n}\n// 2&#46; The first object is the cord\nelse if (not object_cord = cord) {\n  msg(&quot;You cannot tie the &quot; + GetDisplayName(object_cord) + &quot; to anytthing&#46;&quot;)\n}\n// 3&#46; The second object is the attachable\nelse if (not GetBoolean(object_hook, &quot;attachable&quot;)) {\n  msg(&quot;You cannot tie anything to the &quot; + GetDisplayName(object_hook) + &quot;&#46;&quot;)\n}\n// 4&#46; The cord is not already tied to the hook\nelse if (GetBoolean(object_cord, &quot;tiedtohook&quot;)) {\n  msg(&quot;You've already done that&#46;&quot;)\n}\n// Everything checked, so do it\nelse {\n  msg(&quot;You tie the cord to the hook&#46;&quot;)\n  cord&#46;tiedtohook = true\n  code&#46;take = false\n  cord&#46;parent = player&#46;parent\n  cord&#46;attachedto = object_hook\n}[/code:3d8itizi]",
      "EditableFormat": "bbcode",
      "HTML": "So you want to use THIS with THAT? what is the best way to handle it?<br/><br/>TIE CORD TO HOOK<br/>CUT ROPE WITH KNIFE<br/>ATTACK GOBLIN WITH KNIFE<br/>GET HOT COAL WITH TONGS<br/>IGNITE FIREWORK WITH MATCH<br/><br/>First, remember that GIVE and USE are already built in; if you want to use them, tick the feature on one of the items, and go to the Use/give tab. <br/><br/>As an example, I am going to implement TIE CORD TO HOOK.<br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Command Pattern</span></span><br/><br/>First you need a command pattern. We could do this:<br/><pre><code>tie cord to hook</code></pre><br/>If you do that then the player has to type that exact phrase or Quest will not recognise it. We can concatenate alternatives by separating them with semi-colons (and optionally spaces too).<br/><pre><code>tie cord to hook; tie thread to hook; tie string to hook</code></pre><br/>However, we can do even better, and let Quest handle the synonyms, by using #object#.<br/><pre><code>tie #object# to hook</code></pre><br/>As long as you have set up the cord with these alternative names (the Other names list on the Object tab), Quest will match #object# against any of them. An important benefit here is that your game will have the same set of synonyms for an object whether the player is trying to ick it up, look at it or tie it to a hook.<br/><br/>And you can have as many objects as you like in the pattern; just make sure they start object so Quest will match them against objects that are present. We need two here, the cord and the hook:<br/><pre><code>tie #object_cord# to #object_hook#</code></pre><br/>You might now want to include alternative verbs.<br/><pre><code>tie #object_cord# to #object_hook#; attach #object_cord# to #object_hook#; fasten #object_cord# to #object_hook#</code></pre><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Regular Expression (optional!)</span></span><br/><br/>If you are feeling brave, you could use a regular expression here (remember to set Regular expression from the drop down list).<br/><pre><code>^(tie|attach|fasten) (?&lt;object_cord&gt;&#46;*) to (?&lt;object_hook&gt;&#46;*)$</code></pre><br/>The ^ at the start says Quest must match this to the start of the command, whilst the $ at the end says this must ber the end of the command. The (tie|attach|fasten) tells Quest it has to match to one of these. (?&lt;object_cord&gt;.*) is equivalent to #object_cord#. Plain text, like &quot;to&quot;, has to be matched exactly.<br/><br/>May be not much point in this example, but if you have variations in the joining word to handle too, you could be looking at a lot of combinations, so this way may be easier. For example:<br/><pre><code>^(get|pick up|take) (?&lt;object_cord&gt;&#46;*) (using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*)$</code></pre><br/>Or even:<br/><pre><code>^((get|pick up|take) (the |)(?&lt;object_cord&gt;&#46;*) (using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*)|(using|holding|with) (the |)(?&lt;object_hook&gt;&#46;*) (get|pick up|take) (the |)(?&lt;object_cord&gt;&#46;*))$</code></pre><br/>That will handle any of these:<br/><br/>      get hat with hook<br/>      pick up hat using hook<br/>      take the hat with the hook<br/>      using the hook take the hat<br/><br/>      <br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">Script</span></span><br/><br/>So we have a command pattern or regular expression that Quest will use to match this command, now we need to do something, so we need a script. Because we used this as the command pattern:<br/><pre><code>tie #object_cord# to #object_hook#</code></pre><br/>... Quest will already have assigned values to two special variables, in this case called object_cord and object_hook. We do not know specifically what they are, but they will be objects that are present in the current room or in the player's inventory.<br/><br/>The way to write the code is going to be the same for most commands. Think of a checklist; what do we need to check before allowing the command to work?<br/><br/>1. The player has the first object<br/>2. The first object is the cord<br/>3. The second object is the hook<br/>4. The cord is not already tied to the hook<br/><br/>As Quest will only match an object if it is present, so we do not need to check if the hook is present, it must be if Quest found it (and you may choose not to check number 1; does the player need the cord in his inventory or should the command work if the cord is lying on the ground?).<br/><br/>For these four conditions, we convert them to a if/else if/else cascade, at each step testing if it is <span style=\"font-style:italic;\">not</span> so:<br/><pre><code>// 1&#46; The player has the first object<br/>if (not object_cord&#46;parent = player) {<br/>  msg(&quot;You are not holding &quot; + GetDisplayName(object_cord) + &quot;&#46;&quot;)<br/>}<br/>// 2&#46; The first object is the cord<br/>else if (not object_cord = cord) {<br/>  msg(&quot;You cannot tie the &quot; + GetDisplayName(object_cord) + &quot; to anytthing&#46;&quot;)<br/>}<br/>// 3&#46; The second object is the hook<br/>else if (not object_hook = hook) {<br/>  msg(&quot;You cannot tie anything to the &quot; + GetDisplayName(object_hook) + &quot;&#46;&quot;)<br/>}<br/>// 4&#46; The cord is not already tied to the hook<br/>else if (GetBoolean(object_cord, &quot;tiedtohook&quot;)) {<br/>  msg(&quot;You've already done that&#46;&quot;)<br/>}<br/>// Everything checked, so do it<br/>else {<br/>  msg(&quot;You tie the cord to the hook&#46;&quot;)<br/>  cord&#46;tiedtohook = true<br/>  code&#46;take = false<br/>  cord&#46;parent = player&#46;parent<br/>}</code></pre><br/><br/><br/><span style=\"font-weight:bold;\"><span style=\"font-style:italic;\">More General</span></span><br/><br/>Suppose there are several objects the cord might be tied to, what is the best way to handle that? What we want is a command that can handle tying the cord to any such object, so the first thing to do is to flag an object as attachable. Go to the Attributes tab of each object, and add a new attribute, <span style=\"font-style:italic;\">attachable</span>, set it to be a Boolean, and tick it. Now our command can check if the object has that set, and if it does, the cord can be tied to it.<br/><br/>The code here has two changes. Condition number 3 now checks the <span style=\"font-style:italic;\">attachable</span> flag, instead of checking the object in the hook. Also, at the end, an attribute on the cord gets set to the object it is attached to, so you can test what that was if necessary.<br/><pre><code>// 1&#46; The player has the first object<br/>if (not object_cord&#46;parent = player) {<br/>  msg(&quot;You are not holding &quot; + GetDisplayName(object_cord) + &quot;&#46;&quot;)<br/>}<br/>// 2&#46; The first object is the cord<br/>else if (not object_cord = cord) {<br/>  msg(&quot;You cannot tie the &quot; + GetDisplayName(object_cord) + &quot; to anytthing&#46;&quot;)<br/>}<br/>// 3&#46; The second object is the attachable<br/>else if (not GetBoolean(object_hook, &quot;attachable&quot;)) {<br/>  msg(&quot;You cannot tie anything to the &quot; + GetDisplayName(object_hook) + &quot;&#46;&quot;)<br/>}<br/>// 4&#46; The cord is not already tied to the hook<br/>else if (GetBoolean(object_cord, &quot;tiedtohook&quot;)) {<br/>  msg(&quot;You've already done that&#46;&quot;)<br/>}<br/>// Everything checked, so do it<br/>else {<br/>  msg(&quot;You tie the cord to the hook&#46;&quot;)<br/>  cord&#46;tiedtohook = true<br/>  code&#46;take = false<br/>  cord&#46;parent = player&#46;parent<br/>  cord&#46;attachedto = object_hook<br/>}</code></pre>",
      "PostDate": "2016-01-12T14:44:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40530",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "You can also do this using two-object verbs: <!-- m --><a class=\"postlink\" href=\"http://blog.textadventures.co.uk/2012/03/20/shoot-monster-with-ray-gun-burn-corpse-with-incinerator-two-object-verbs-in-quest-5-2/\">http://blog.textadventures.co.uk/2012/0 ... quest-5-2/</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "You can also do this using two-object verbs: <!-- m --><a class=\"postlink\" href=\"http://blog.textadventures.co.uk/2012/03/20/shoot-monster-with-ray-gun-burn-corpse-with-incinerator-two-object-verbs-in-quest-5-2/\">http://blog.textadventures.co.uk/2012/0 ... quest-5-2/</a><!-- m -->",
      "PostDate": "2016-01-12T18:54:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40573",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "You can make fun of me all you want behind my back, but for now, just tolerate me... <!-- s:oops: --><img src=\"{SMILIES_PATH}/icon_redface.gif\" alt=\":oops:\" title=\"Embarassed\" /><!-- s:oops: --> \n\nScenario:  \n\nI would like to add a command that will handle essentially this, &quot;tell children to shut up&quot;.\n\nIn the command box, I would like to avoid typing all of the synonyms for children (which is the name of my object) in the command bar.  \n\nHow I currently handle this: tell children to shut up; tell kids to shut up; tell kid to shut up; tell child to shut up; ask kids to be quiet; ask children to be quiet; ask kid to be quiet; ask child to be quiet; etc.  Tedious and unnecessary I believe. \n\nSo, What I would like to do - something like this:  tell #object# to shut up; ask #object# to be quiet; etc...\n\nIf I do that, how do I handle the response?  I assume I would somehow do something like this:  If #object# = children then print appropriate response, but I have no real idea how to do that without the GUI.  I do have 'kids', 'kid', 'child' as 'other names' for children.  \n\nThanks is advance.",
      "EditableFormat": "bbcode",
      "HTML": "You can make fun of me all you want behind my back, but for now, just tolerate me... <!-- s:oops: --><img src=\"{SMILIES_PATH}/icon_redface.gif\" alt=\":oops:\" title=\"Embarassed\" /><!-- s:oops: --> <br/><br/>Scenario:  <br/><br/>I would like to add a command that will handle essentially this, &quot;tell children to shut up&quot;.<br/><br/>In the command box, I would like to avoid typing all of the synonyms for children (which is the name of my object) in the command bar.  <br/><br/>How I currently handle this: tell children to shut up; tell kids to shut up; tell kid to shut up; tell child to shut up; ask kids to be quiet; ask children to be quiet; ask kid to be quiet; ask child to be quiet; etc.  Tedious and unnecessary I believe. <br/><br/>So, What I would like to do - something like this:  tell #object# to shut up; ask #object# to be quiet; etc...<br/><br/>If I do that, how do I handle the response?  I assume I would somehow do something like this:  If #object# = children then print appropriate response, but I have no real idea how to do that without the GUI.  I do have 'kids', 'kid', 'child' as 'other names' for children.  <br/><br/>Thanks is advance.",
      "PostDate": "2016-01-13T01:51:37+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40577",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Here is a regular expression you can use:\n\n^(tell|ask) (?&lt;object&gt;.*) to (be quiet|keep quiet|shut up|hush|be silent)$\n\nIn your code:\n[code:1p47vuxx]if (not object = children) {\n  msg(&quot;You tell the &quot; + GetDisplayName(object) + &quot; to be quiet&#46; Not that it was talking much anyway&#46;&quot;)\n}\nelse {\n  msg(&quot;You tell the children to keep quiet&#46; stuff happens&#46;&quot;)\n}[/code:1p47vuxx]",
      "EditableFormat": "bbcode",
      "HTML": "Here is a regular expression you can use:<br/><br/>^(tell|ask) (?&lt;object&gt;.*) to (be quiet|keep quiet|shut up|hush|be silent)$<br/><br/>In your code:<br/><pre><code>if (not object = children) {<br/>  msg(&quot;You tell the &quot; + GetDisplayName(object) + &quot; to be quiet&#46; Not that it was talking much anyway&#46;&quot;)<br/>}<br/>else {<br/>  msg(&quot;You tell the children to keep quiet&#46; stuff happens&#46;&quot;)<br/>}</code></pre>",
      "PostDate": "2016-01-13T09:02:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40586",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "I have used this and it seems to be working great.  I would however, like to give a different response for the other living person in the room that is not &quot;children&quot;.  I tried to add an else if (object = woman) then print message but it only gave the then command under not children.\n\nTo solve this, do I need to put this as a separate 'if' above the script you provided? (I'd try it, but I am not home at the moment)\n\nThanks again!",
      "EditableFormat": "bbcode",
      "HTML": "I have used this and it seems to be working great.  I would however, like to give a different response for the other living person in the room that is not &quot;children&quot;.  I tried to add an else if (object = woman) then print message but it only gave the then command under not children.<br/><br/>To solve this, do I need to put this as a separate 'if' above the script you provided? (I'd try it, but I am not home at the moment)<br/><br/>Thanks again!",
      "PostDate": "2016-01-13T16:14:44+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40588",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I would do it like this:\n[code:3cqpznpi]if (object = children) {\n  msg(&quot;You tell the children to keep quiet&#46; stuff happens&#46;&quot;)\n}\nelse if (object = woman) {\n  msg(&quot;'Quiet woman!' you say&#46;&quot;)\n}\nelse {\n  msg(&quot;You tell the &quot; + GetDisplayName(object) + &quot; to be quiet&#46; Not that it was talking much anyway&#46;&quot;)\n}[/code:3cqpznpi]",
      "EditableFormat": "bbcode",
      "HTML": "I would do it like this:<br/><pre><code>if (object = children) {<br/>  msg(&quot;You tell the children to keep quiet&#46; stuff happens&#46;&quot;)<br/>}<br/>else if (object = woman) {<br/>  msg(&quot;'Quiet woman!' you say&#46;&quot;)<br/>}<br/>else {<br/>  msg(&quot;You tell the &quot; + GetDisplayName(object) + &quot; to be quiet&#46; Not that it was talking much anyway&#46;&quot;)<br/>}</code></pre>",
      "PostDate": "2016-01-13T20:10:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40733",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Got the above working just fine.  Thanks!  But...\n\nJust testing some stuff out here for my tutorial game.  What is wrong with this code?\n\n^(cover|fill) (the |) (?&lt;object_hole&gt;.*) (with|into|over|onto) (the |) (?&lt;object_dirt pile&gt;.*)$\n\nI get the following error - Error running script&#058; Error evaluating expression 'IsRegexMatch(cmd.pattern, command, cmd.name)': parsing &quot;^(cover|fill) (the |) (?&lt;object_hole&gt;.*) (with|into|over|onto) (the |) (?&lt;object_dirt pile&gt;.*)$&quot; - Invalid group name: Group names must begin with a word character.\n\n...and that happens as soon as I type anything.\n\nWhereas, this regular command expression gives the results I want.  ^(tell|ask) (?&lt;object&gt;.*) to (be quiet|keep quiet|shut up|hush|be silent)$\n\nI assumed it would equate cover and fill to the hole with/into/onto/over dirt pile.\n\nThanks!",
      "EditableFormat": "bbcode",
      "HTML": "Got the above working just fine.  Thanks!  But...<br/><br/>Just testing some stuff out here for my tutorial game.  What is wrong with this code?<br/><br/>^(cover|fill) (the |) (?&lt;object_hole&gt;.*) (with|into|over|onto) (the |) (?&lt;object_dirt pile&gt;.*)$<br/><br/>I get the following error - Error running script&#058; Error evaluating expression 'IsRegexMatch(cmd.pattern, command, cmd.name)': parsing &quot;^(cover|fill) (the |) (?&lt;object_hole&gt;.*) (with|into|over|onto) (the |) (?&lt;object_dirt pile&gt;.*)$&quot; - Invalid group name: Group names must begin with a word character.<br/><br/>...and that happens as soon as I type anything.<br/><br/>Whereas, this regular command expression gives the results I want.  ^(tell|ask) (?&lt;object&gt;.*) to (be quiet|keep quiet|shut up|hush|be silent)$<br/><br/>I assumed it would equate cover and fill to the hole with/into/onto/over dirt pile.<br/><br/>Thanks!",
      "PostDate": "2016-01-17T23:49:04+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "40750",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I would guess it does not like the space in:\n(?&lt;object_dirt pile&gt;.*)\nThe difference is that the underlying code will try to convert &quot;object_dirt pile&quot; to the name of a variable. While Quest itself does not mind spaces in variables, the underlying code does.",
      "EditableFormat": "bbcode",
      "HTML": "I would guess it does not like the space in:<br/>(?&lt;object_dirt pile&gt;.*)<br/>The difference is that the underlying code will try to convert &quot;object_dirt pile&quot; to the name of a variable. While Quest itself does not mind spaces in variables, the underlying code does.",
      "PostDate": "2016-01-18T08:01:57+00:00",
      "LastEditDate": null
    }
  ]
}
