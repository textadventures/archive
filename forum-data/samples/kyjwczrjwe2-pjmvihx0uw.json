{
  "Topic": {
    "TopicId": "kyjwczrjwe2-pjmvihx0uw",
    "ForumId": "18",
    "Title": "Detecting Game Played on a Mobile Phone",
    "LastUpdated": "2018-12-08T19:10:32.9322543Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "11877b84-1282-4db9-86b6-2a5724614fb6",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have dynamic game panes, map and hyperlinks in my recent game (http://textadventures.co.uk/games/view/m4a7-u7kyukbtvhaqtxq-g/sir-loin-and-the-coming-of-age-too) and want to switch all of these off by default, except use hyperlinks when the game is played on a mobile phone. I found a two year old discussion on the Forum on this topic. Is it the most up to date position or is there an easier way to detect mobile phone use now?\r\nhttps://textadventures.co.uk/forum/quest/topic/zr75mcavwk_ezxmpdwgg9w/detecting-device-or-screen-size",
      "EditableFormat": "markdown",
      "HTML": "<p>I have dynamic game panes, map and hyperlinks in my recent game (http://textadventures.co.uk/games/view/m4a7-u7kyukbtvhaqtxq-g/sir-loin-and-the-coming-of-age-too) and want to switch all of these off by default, except use hyperlinks when the game is played on a mobile phone. I found a two year old discussion on the Forum on this topic. Is it the most up to date position or is there an easier way to detect mobile phone use now?<br>\nhttps://textadventures.co.uk/forum/quest/topic/zr75mcavwk_ezxmpdwgg9w/detecting-device-or-screen-size</p>\n\n",
      "PostDate": "2018-12-08T19:10:32.9322543Z",
      "LastEditDate": "2018-12-08T20:00:22.5235707Z",
      "link": null
    },
    {
      "PostId": "218ac6f2-0dd6-471f-8d12-1925275bed71",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is a JS ```platform```variable as of Quest 5.8. It will return the string \"mobile\" in the mobile player.\r\n\r\nIt seems like Pixie set up a Quest function to easily check that, but I am away from my computer and can't check that.  I will be home soon, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>There is a JS <code>platform</code>variable as of Quest 5.8. It will return the string \"mobile\" in the mobile player.</p>\n<p>It seems like Pixie set up a Quest function to easily check that, but I am away from my computer and can't check that.  I will be home soon, though.</p>\n\n",
      "PostDate": "2018-12-09T01:11:11.5071893Z",
      "LastEditDate": "2018-12-09T15:23:35.3744022Z",
      "link": null
    },
    {
      "PostId": "7fe0d112-4cca-4ffa-ab74-2f0c67b02c85",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here we are:\r\n\r\n```\r\n// This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\r\n// I put it in the User Interface Initialisation script, so it runs when a new game OR a saved game is loaded.\r\nJS.whereAmI ()\r\n// Give Quest a few seconds to receive the info from JS\r\nSetTimeout (3) {\r\n  // For debugging:\r\n  msg (\"PLATFORM: \" + game.questplatform)\r\n}\r\n```\r\n\r\n---\r\nhttps://github.com/textadventures/quest/blob/f9605fd47fe9a2e9ff00f211df3ee97179c3ac89/docs/js/whereami.md\r\n\r\n---\r\nNOTE TO PIXIE\r\n\r\n<details>\r\n\r\nThe \"Javascript functions\" link is bad.\r\n![image](https://user-images.githubusercontent.com/30656341/49699951-681d7b80-fb9d-11e8-80b3-4a73faa7c506.png)\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Here we are:</p>\n<pre><code>// This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\n// I put it in the User Interface Initialisation script, so it runs when a new game OR a saved game is loaded.\nJS.whereAmI ()\n// Give Quest a few seconds to receive the info from JS\nSetTimeout (3) {\n  // For debugging:\n  msg (\"PLATFORM: \" + game.questplatform)\n}\n</code></pre>\n<hr>\n<p>https://github.com/textadventures/quest/blob/f9605fd47fe9a2e9ff00f211df3ee97179c3ac89/docs/js/whereami.md</p>\n<hr>\n<p>NOTE TO PIXIE</p>\n<details>\n<p>The \"Javascript functions\" link is bad.<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/49699951-681d7b80-fb9d-11e8-80b3-4a73faa7c506.png\" alt=\"image\"></p>\n</details>\n\n",
      "PostDate": "2018-12-09T16:31:36.8115043Z",
      "LastEditDate": "2018-12-09T16:33:07.3453338Z",
      "link": null
    },
    {
      "PostId": "37e0fe3a-20a3-4363-9fca-e9db951e5539",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks K.V., that code worked in a test game but when I used it in the game itself there is a problem. I've been experimenting but I'm perhaps missing something important in my understanding of how this works. Can I execute this code more than once in a game? Is it okay if I define the 'questplatform' attribute in advance (in this case giving it 'mobile' as a default)? Is the timed wait necessary if there is a continue wait before the attribute is examined? In the following test code there is a command 'detect' that uses your code above, allowing a 5 second wait; why does it not work?\r\nhttp://play2.textadventures.co.uk/Play.aspx?id=wvjqmlnedu6g_brvapmb6a\r\n\r\nDetecting the platform is useful for me as my first two games can't be played to completion on a phone and it would be good to provide that warning initially.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks K.V., that code worked in a test game but when I used it in the game itself there is a problem. I've been experimenting but I'm perhaps missing something important in my understanding of how this works. Can I execute this code more than once in a game? Is it okay if I define the 'questplatform' attribute in advance (in this case giving it 'mobile' as a default)? Is the timed wait necessary if there is a continue wait before the attribute is examined? In the following test code there is a command 'detect' that uses your code above, allowing a 5 second wait; why does it not work?<br>\nhttp://play2.textadventures.co.uk/Play.aspx?id=wvjqmlnedu6g_brvapmb6a</p>\n<p>Detecting the platform is useful for me as my first two games can't be played to completion on a phone and it would be good to provide that warning initially.</p>\n\n",
      "PostDate": "2018-12-10T11:16:25.5765224Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e4d1b53b-ffed-471a-ab2a-aa9004cc53df",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Can I execute this code more than once in a game?\r\n\r\nWhy would you want to?\r\nIf you run it in UI initialisation then it is run every time the game starts or is loaded. A game shouldn't change from mobile to desktop without being saved and reloaded, so the value of `game.questplatform` will always be correct.\r\n\r\n> Is it okay if I define the 'questplatform' attribute in advance?\r\n\r\nAgain, why would you want to? If the code runs as soon as the game starts, you should never need to access that variable before it is set.\r\n\r\n> Is the timed wait necessary if there is a continue wait before the attribute is examined?\r\n\r\nThe timed wait is just for debugging. You would never do that in a real game.\r\n\r\nIn a real game you would set a script attribute `game.changedquestplatform`, so that the message is displayed as soon as we hear back from the javascript component. I'm guessing that a timer is used when debugging so that it shows something even if the javascript fails somehow.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Can I execute this code more than once in a game?</p>\n</blockquote>\n<p>Why would you want to?<br>\nIf you run it in UI initialisation then it is run every time the game starts or is loaded. A game shouldn't change from mobile to desktop without being saved and reloaded, so the value of <code>game.questplatform</code> will always be correct.</p>\n<blockquote>\n<p>Is it okay if I define the 'questplatform' attribute in advance?</p>\n</blockquote>\n<p>Again, why would you want to? If the code runs as soon as the game starts, you should never need to access that variable before it is set.</p>\n<blockquote>\n<p>Is the timed wait necessary if there is a continue wait before the attribute is examined?</p>\n</blockquote>\n<p>The timed wait is just for debugging. You would never do that in a real game.</p>\n<p>In a real game you would set a script attribute <code>game.changedquestplatform</code>, so that the message is displayed as soon as we hear back from the javascript component. I'm guessing that a timer is used when debugging so that it shows something even if the javascript fails somehow.</p>\n\n",
      "PostDate": "2018-12-10T11:43:39.4328095Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "104ba531-be22-46ef-a2f4-3c2580304dbc",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> In a real game you would set a script attribute ```game.changedquestplatform```, so that the message is displayed as soon as we hear back from the javascript component. \r\n\r\nDoh!\r\n\r\nHonestly, I was only using the timer because I never thought of this.\r\n\r\n...seems like a no-brainer in retrospect.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>In a real game you would set a script attribute <code>game.changedquestplatform</code>, so that the message is displayed as soon as we hear back from the javascript component.</p>\n</blockquote>\n<p>Doh!</p>\n<p>Honestly, I was only using the timer because I never thought of this.</p>\n<p>...seems like a no-brainer in retrospect.</p>\n\n",
      "PostDate": "2018-12-10T12:25:13.1743648Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "84c7f5ec-f9e2-4784-8046-df7def462227",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's an updated script:\r\n\r\n```\r\n// Setting game.questplatform to \"undefined\" because the attribute does not exist before play begins (although I believe it should to avoid scripting errors).\r\ngame.questplatform = \"undefined\"\r\n// Just for debugging purposes:\r\nmsg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\r\n// Now, following mrangel's advice, I'm setting up a change script:\r\ngame.changedquestplatform => {\r\n  // This is where the settings should be changed for specific platforms.\r\n  msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\r\n}\r\n// This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\r\n// I put this all in the User Interface Initialisation script so it runs when a new game OR a saved game is loaded.\r\nJS.whereAmI ()\r\n```\r\n\r\n---\r\n>Can I execute this code more than once in a game?\r\n\r\nIt won't hurt anything, but (as mrangel pointed out) I put it in the UI Init script, so it runs when the game loads whether it's a new game or a saved game.\r\n\r\nThe only thing I could imagine that a player might do during play is to change their mobile browser to desktop view during play (or vice versa), which would not trigger a change unless you had something set up in Javascript that kept track of something... or something.  I don't know what could be done for that.  As a player, if changing from mobile view to desktop view during play messed something up, I'd blame myself instead of the game.\r\n\r\n> Is it okay if I define the 'questplatform' attribute in advance (in this case giving it 'mobile' as a default)?\r\n\r\nYou could set it to anything, but it would change within seconds.\r\n\r\nI assume you want to do this to avoid scripting errors?  Depending on what you're scripting for the mobile player, this may or may not negatively effect anything.  If you're tinkering with display settings, though, the player might see things quickly change back and forth if they weren't playing on mobile when the script ran.\r\n\r\n>Is the timed wait necessary if there is a continue wait before the attribute is examined? \r\n\r\nIt usually takes Javascript 2 to 4 seconds to pass something to Quest.  That's why I used it. \r\n\r\nWithout a delay in the first script I posted, the attribute would not exist yet when the second line of code ran.  So, I added the timer to avoid errors.  From now on, I will be using change scripts.  I learned something today!  Yippee!!!\r\n\r\nThanks to everyone involved (especially mrangel)!  Whoo-hoo!\r\n\r\n---\r\nDavyB, post your script (unless you've fixed at this point).\r\n\r\nI'd guess you are manually setting it to \"mobile\" somewhere in that script.  It behaves strangely when I tinker with it through the JS console online.  I can run ```whereAmI()``` from the console, then enter DETECT, and it will display \"PLATFORM: webplayer\" as it should.  The first time it prints \"mobile\", though.  And I am not on mobile.",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's an updated script:</p>\n<pre><code>// Setting game.questplatform to \"undefined\" because the attribute does not exist before play begins (although I believe it should to avoid scripting errors).\ngame.questplatform = \"undefined\"\n// Just for debugging purposes:\nmsg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\n// Now, following mrangel's advice, I'm setting up a change script:\ngame.changedquestplatform =&gt; {\n  // This is where the settings should be changed for specific platforms.\n  msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\n}\n// This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\n// I put this all in the User Interface Initialisation script so it runs when a new game OR a saved game is loaded.\nJS.whereAmI ()\n</code></pre>\n<hr>\n<blockquote>\n<p>Can I execute this code more than once in a game?</p>\n</blockquote>\n<p>It won't hurt anything, but (as mrangel pointed out) I put it in the UI Init script, so it runs when the game loads whether it's a new game or a saved game.</p>\n<p>The only thing I could imagine that a player might do during play is to change their mobile browser to desktop view during play (or vice versa), which would not trigger a change unless you had something set up in Javascript that kept track of something... or something.  I don't know what could be done for that.  As a player, if changing from mobile view to desktop view during play messed something up, I'd blame myself instead of the game.</p>\n<blockquote>\n<p>Is it okay if I define the 'questplatform' attribute in advance (in this case giving it 'mobile' as a default)?</p>\n</blockquote>\n<p>You could set it to anything, but it would change within seconds.</p>\n<p>I assume you want to do this to avoid scripting errors?  Depending on what you're scripting for the mobile player, this may or may not negatively effect anything.  If you're tinkering with display settings, though, the player might see things quickly change back and forth if they weren't playing on mobile when the script ran.</p>\n<blockquote>\n<p>Is the timed wait necessary if there is a continue wait before the attribute is examined?</p>\n</blockquote>\n<p>It usually takes Javascript 2 to 4 seconds to pass something to Quest.  That's why I used it.</p>\n<p>Without a delay in the first script I posted, the attribute would not exist yet when the second line of code ran.  So, I added the timer to avoid errors.  From now on, I will be using change scripts.  I learned something today!  Yippee!!!</p>\n<p>Thanks to everyone involved (especially mrangel)!  Whoo-hoo!</p>\n<hr>\n<p>DavyB, post your script (unless you've fixed at this point).</p>\n<p>I'd guess you are manually setting it to \"mobile\" somewhere in that script.  It behaves strangely when I tinker with it through the JS console online.  I can run <code>whereAmI()</code> from the console, then enter DETECT, and it will display \"PLATFORM: webplayer\" as it should.  The first time it prints \"mobile\", though.  And I am not on mobile.</p>\n\n",
      "PostDate": "2018-12-10T14:17:27.8452254Z",
      "LastEditDate": "2018-12-10T14:21:17.7226065Z",
      "link": null
    },
    {
      "PostId": "8ce5f66f-10cc-4744-9bb1-9fa10188884e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The only thing I could imagine that a player might do during play is to change their mobile browser to desktop view during play (or vice versa),\r\n\r\nEvery browser I've tried it on, this causes a page refresh so the game would be loaded anyway.\r\n\r\nThe `platform` variable in Quest's javascript is set based on whether `playerweb.js` or `playermobile.js` is loaded. So if there's some browser which allows mobile/desktop mode switching without a reload, WhereAmI would still report what kind of browser it was when the game started, and Quest's layout would not change at all.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The only thing I could imagine that a player might do during play is to change their mobile browser to desktop view during play (or vice versa),</p>\n</blockquote>\n<p>Every browser I've tried it on, this causes a page refresh so the game would be loaded anyway.</p>\n<p>The <code>platform</code> variable in Quest's javascript is set based on whether <code>playerweb.js</code> or <code>playermobile.js</code> is loaded. So if there's some browser which allows mobile/desktop mode switching without a reload, WhereAmI would still report what kind of browser it was when the game started, and Quest's layout would not change at all.</p>\n\n",
      "PostDate": "2018-12-10T16:00:35.9830994Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "504028e8-ba3d-4a79-b49d-e9f2b81382db",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for any confusion! My questions were to help me to try to work out why the code was not working. I've now updated the test program with K.V.'s code and unfortunately it's still not recognising that it is working online. Below is the full script. It shows the patches that have built up in handling dynamic panes, links and map and other tweaks. Hope you can make sense of it.\r\n\r\nThanks!\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"UnresolvedObject\">Sorry, I can't see that.</template>\r\n  <game name=\"Test\">\r\n    <gameid>0e1e8167-0c69-4d58-900a-90d86f8a9452</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <attr name=\"panes_on\" type=\"boolean\">false</attr>\r\n    <gridmap type=\"boolean\">false</gridmap>\r\n    <showpanes type=\"boolean\">false</showpanes>\r\n    <attr name=\"autodescription_description\" type=\"int\">0</attr>\r\n    <attr name=\"autodescription_youcango\" type=\"int\">0</attr>\r\n    <feature_advancedscripts />\r\n    <autodescription type=\"boolean\">false</autodescription>\r\n    <attr name=\"links_on\" type=\"boolean\">false</attr>\r\n    <attr name=\"map_on\" type=\"boolean\">false</attr>\r\n    <questplatform>mobile</questplatform>\r\n    <roomenter type=\"script\">\r\n    </roomenter>\r\n    <start type=\"script\"><![CDATA[\r\n      JS.ShowGrid (0)\r\n      msg (\"IN THE BEGINNING...<br/><br/>A long, long time ago, somewhere between the dark ages and the light ages...in some sort of dawny age... Come-Here-A-Lot Castle sat proudly on English soil, somewhere near Bognor Regis. That was where King Arnold reigned, aided by his loyal and self-righteous Knights of the Brown Table.\")\r\n      wait {\r\n        msg (\"<br/>Many people longed to become Knights of the Brown Table. One such person was Loin, a small orphan boy brought to the castle by the kindly Quartermaster, Stan.<br/><br/>As Loin lies sleeping in the hay in the Royal Stable, he dreams that one day he will wield the sword of the Knights and serve his King.\")\r\n        wait {\r\n          msg (\"<br/>And today may just be the day...or perhaps tomorrow?\")\r\n          wait {\r\n            msg (\"<br/><center><b>Day One: Helping the King</b><br/><br/>[Type {command:options:<i>options</i>} for initial set up and {command:help:<i>help</i>} for general guidance]</center><br/><br/>You awake in the stable, the place where you have lived since moving into Come-Here-A-Lot Castle.<br/>\")\r\n          }\r\n        }\r\n      }\r\n    ]]></start>\r\n    <inituserinterface type=\"script\"><![CDATA[\r\n      // Fix for nested wait operations\r\n      JS.eval (\"$(window).on('keydown',function(e){ if(_waitMode){endWait(); e.preventDefault(); e.stopPropagation();}}); $(window).on('click',function(e){if(_waitMode){endWait(); e.preventDefault(); e.stopPropagation(); }});\")\r\n      // Stop resizing of map\r\n      JS.eval (\"gridApi.zoomIn = function(){};\")\r\n      // Stop movement of map\r\n      JS.eval (\"paper.getTool().off('mousedrag');\")\r\n      // Set map as necessary\r\n      if (game.map_on) {\r\n        JS.ShowGrid (300)\r\n        // Centre map\r\n        Grid_DrawPlayerInRoom (game.pov.parent)\r\n      }\r\n      else {\r\n        JS.ShowGrid (0)\r\n      }\r\n      // Set game panes as necessary\r\n      if (game.panes_on) {\r\n        JS.uiShow (\"#gamePanes\")\r\n      }\r\n      else {\r\n        JS.uiHide (\"#gamePanes\")\r\n      }\r\n      if (game.map_on) {\r\n        Grid_DrawPlayerInRoom (game.pov.parent)\r\n      }\r\n      // Setting game.questplatform to \"undefined\" because the attribute does not exist before play begins (although I believe it should to avoid scripting errors).\r\n      game.questplatform = \"undefined\"\r\n      // Just for debugging purposes:\r\n      msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\r\n      // Now, following mrangel's advice, I'm setting up a change script:\r\n      game.changedquestplatform => {\r\n        // This is where the settings should be changed for specific platforms.\r\n        if (game.questplatform = \"mobile\") {\r\n          game.links_on = true\r\n        }\r\n        msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\r\n      }\r\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\r\n      // I put this all in the User Interface Initialisation script so it runs when a new game OR a saved game is loaded.\r\n      JS.whereAmI ()\r\n      // Set hyperlinks as necessary\r\n      SetHyperlinkStatus (game.links_on)\r\n      // The next bit controlling hyperlinks could be pasted into an included JS file, but works just as well in JS.eval()\r\n      JS.eval (\"if (typeof(linksEnabled)=='undefined'){var linksEnabled = true;} function updateCommandLinks(data) {     $('.commandlink').each(function (index, e) {         var $e = $(e);         if (!$(e).data('deactivated')) {             var elementid = $e.data('elementid');             var available = $.inArray(elementid, data) > -1 || elementid.length == 0;             if (available) {                 if (linksEnabled) {$e.removeClass('disabled');}             } else {                 $e.addClass('disabled');             }         }     });$('.cmdlink').each(function(){\tif (!linksEnabled) {\t\t$(this).addClass('disabled');\t}});};\")\r\n    ]]></inituserinterface>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <alias>almost empty room</alias>\r\n    <description type=\"script\">\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"male\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"platform\">\r\n    <pattern>platform</pattern>\r\n    <script>\r\n      msg (game.questplatform)\r\n    </script>\r\n  </command>\r\n  <command name=\"detect\">\r\n    <pattern>detect</pattern>\r\n    <script>\r\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\r\n      // I put it in the User Interface Initialisation script, so it runs when a new game OR a saved game is loaded.\r\n      JS.whereAmI ()\r\n      // Give Quest a few seconds to receive the info from JS\r\n      SetTimeout (5) {\r\n        // For debugging:\r\n        msg (\"PLATFORM: \" + game.questplatform)\r\n      }\r\n    </script>\r\n  </command>\r\n  <function name=\"SetHyperlinkStatus\" parameters=\"setting\">\r\n    if (setting) {\r\n      bool = \"true\"\r\n    }\r\n    else {\r\n      bool = \"false\"\r\n    }\r\n    JS.eval (\"var linksEnabled = \"+bool+\";\")\r\n    if (bool = \"false\") {\r\n      game.suppresshyperlinks = true\r\n      game.links_on = false\r\n      JS.eval (\"$('.cmdlink,.commandlink').each(function(){$(this).addClass('disabled');});\")\r\n    }\r\n    else {\r\n      game.suppresshyperlinks = false\r\n      game.links_on = true\r\n    }\r\n  </function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for any confusion! My questions were to help me to try to work out why the code was not working. I've now updated the test program with K.V.'s code and unfortunately it's still not recognising that it is working online. Below is the full script. It shows the patches that have built up in handling dynamic panes, links and map and other tweaks. Hope you can make sense of it.</p>\n<p>Thanks!</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"UnresolvedObject\"&gt;Sorry, I can't see that.&lt;/template&gt;\n  &lt;game name=\"Test\"&gt;\n    &lt;gameid&gt;0e1e8167-0c69-4d58-900a-90d86f8a9452&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;attr name=\"panes_on\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;gridmap type=\"boolean\"&gt;false&lt;/gridmap&gt;\n    &lt;showpanes type=\"boolean\"&gt;false&lt;/showpanes&gt;\n    &lt;attr name=\"autodescription_description\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;attr name=\"autodescription_youcango\" type=\"int\"&gt;0&lt;/attr&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;autodescription type=\"boolean\"&gt;false&lt;/autodescription&gt;\n    &lt;attr name=\"links_on\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;attr name=\"map_on\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;questplatform&gt;mobile&lt;/questplatform&gt;\n    &lt;roomenter type=\"script\"&gt;\n    &lt;/roomenter&gt;\n    &lt;start type=\"script\"&gt;&lt;![CDATA[\n      JS.ShowGrid (0)\n      msg (\"IN THE BEGINNING...&lt;br/&gt;&lt;br/&gt;A long, long time ago, somewhere between the dark ages and the light ages...in some sort of dawny age... Come-Here-A-Lot Castle sat proudly on English soil, somewhere near Bognor Regis. That was where King Arnold reigned, aided by his loyal and self-righteous Knights of the Brown Table.\")\n      wait {\n        msg (\"&lt;br/&gt;Many people longed to become Knights of the Brown Table. One such person was Loin, a small orphan boy brought to the castle by the kindly Quartermaster, Stan.&lt;br/&gt;&lt;br/&gt;As Loin lies sleeping in the hay in the Royal Stable, he dreams that one day he will wield the sword of the Knights and serve his King.\")\n        wait {\n          msg (\"&lt;br/&gt;And today may just be the day...or perhaps tomorrow?\")\n          wait {\n            msg (\"&lt;br/&gt;&lt;center&gt;&lt;b&gt;Day One: Helping the King&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[Type {command:options:&lt;i&gt;options&lt;/i&gt;} for initial set up and {command:help:&lt;i&gt;help&lt;/i&gt;} for general guidance]&lt;/center&gt;&lt;br/&gt;&lt;br/&gt;You awake in the stable, the place where you have lived since moving into Come-Here-A-Lot Castle.&lt;br/&gt;\")\n          }\n        }\n      }\n    ]]&gt;&lt;/start&gt;\n    &lt;inituserinterface type=\"script\"&gt;&lt;![CDATA[\n      // Fix for nested wait operations\n      JS.eval (\"$(window).on('keydown',function(e){ if(_waitMode){endWait(); e.preventDefault(); e.stopPropagation();}}); $(window).on('click',function(e){if(_waitMode){endWait(); e.preventDefault(); e.stopPropagation(); }});\")\n      // Stop resizing of map\n      JS.eval (\"gridApi.zoomIn = function(){};\")\n      // Stop movement of map\n      JS.eval (\"paper.getTool().off('mousedrag');\")\n      // Set map as necessary\n      if (game.map_on) {\n        JS.ShowGrid (300)\n        // Centre map\n        Grid_DrawPlayerInRoom (game.pov.parent)\n      }\n      else {\n        JS.ShowGrid (0)\n      }\n      // Set game panes as necessary\n      if (game.panes_on) {\n        JS.uiShow (\"#gamePanes\")\n      }\n      else {\n        JS.uiHide (\"#gamePanes\")\n      }\n      if (game.map_on) {\n        Grid_DrawPlayerInRoom (game.pov.parent)\n      }\n      // Setting game.questplatform to \"undefined\" because the attribute does not exist before play begins (although I believe it should to avoid scripting errors).\n      game.questplatform = \"undefined\"\n      // Just for debugging purposes:\n      msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\n      // Now, following mrangel's advice, I'm setting up a change script:\n      game.changedquestplatform =&gt; {\n        // This is where the settings should be changed for specific platforms.\n        if (game.questplatform = \"mobile\") {\n          game.links_on = true\n        }\n        msg (\"{i:DEBUGGING MESSAGE:} PLATFORM: \" + game.questplatform)\n      }\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\n      // I put this all in the User Interface Initialisation script so it runs when a new game OR a saved game is loaded.\n      JS.whereAmI ()\n      // Set hyperlinks as necessary\n      SetHyperlinkStatus (game.links_on)\n      // The next bit controlling hyperlinks could be pasted into an included JS file, but works just as well in JS.eval()\n      JS.eval (\"if (typeof(linksEnabled)=='undefined'){var linksEnabled = true;} function updateCommandLinks(data) {     $('.commandlink').each(function (index, e) {         var $e = $(e);         if (!$(e).data('deactivated')) {             var elementid = $e.data('elementid');             var available = $.inArray(elementid, data) &gt; -1 || elementid.length == 0;             if (available) {                 if (linksEnabled) {$e.removeClass('disabled');}             } else {                 $e.addClass('disabled');             }         }     });$('.cmdlink').each(function(){\tif (!linksEnabled) {\t\t$(this).addClass('disabled');\t}});};\")\n    ]]&gt;&lt;/inituserinterface&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;alias&gt;almost empty room&lt;/alias&gt;\n    &lt;description type=\"script\"&gt;\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"male\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"platform\"&gt;\n    &lt;pattern&gt;platform&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (game.questplatform)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"detect\"&gt;\n    &lt;pattern&gt;detect&lt;/pattern&gt;\n    &lt;script&gt;\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\n      // I put it in the User Interface Initialisation script, so it runs when a new game OR a saved game is loaded.\n      JS.whereAmI ()\n      // Give Quest a few seconds to receive the info from JS\n      SetTimeout (5) {\n        // For debugging:\n        msg (\"PLATFORM: \" + game.questplatform)\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;function name=\"SetHyperlinkStatus\" parameters=\"setting\"&gt;\n    if (setting) {\n      bool = \"true\"\n    }\n    else {\n      bool = \"false\"\n    }\n    JS.eval (\"var linksEnabled = \"+bool+\";\")\n    if (bool = \"false\") {\n      game.suppresshyperlinks = true\n      game.links_on = false\n      JS.eval (\"$('.cmdlink,.commandlink').each(function(){$(this).addClass('disabled');});\")\n    }\n    else {\n      game.suppresshyperlinks = false\n      game.links_on = true\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2018-12-10T16:42:27.8225259Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4ccf3c9f-50ed-401a-852c-6c6624220afa",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I would expect that to say \"DEBUGGING MESSAGE: PLATFORM: undefined\" followed by one of \"DEBUGGING MESSAGE: PLATFORM: webplayer\" (or desktop, or mobile).\r\n\r\nNote that this code:\r\n>      // Set hyperlinks as necessary\r\n>      SetHyperlinkStatus (game.links_on)\r\nwill be run on initialisation. The `changedquestplatform` script will run *after* this. So if you want this to run differently because the game is on mobile, you need to either move this line into a `game.changedlinks_on` script (so it runs whenever `game.links_on` is changed), or move it into the `game.changedquestplatform` script.\r\n\r\nThe following JS.eval call refers to a variable which is set by the SetHyperlinkStatus script. So you need to move this into the `changedquestplatform` script as well. Either that or have it check if the variable `platform` (which already exists in Javascript) is set to `\"mobile\"`.\r\n\r\nThe reason you need to wait for a response is that calling `JS.eval` (or any other `JS.` function) adds a javascript command to a *queue* to be sent to the browser. These commands are then all sent at once, as soon as all Quest scripts have finished running. So after your UI initialisation script has finished, and the start script has finished, and the room enter script for the first room has finished, all these commands are sent to the javascript engine.\r\n\r\nThe javascript whereAmI function is simple. It looks at the javascript variable `platform`, and sends it back to Quest. This is then placed in a queue again, if Quest is already doing something. If some other javascript has sent an ASLEvent back, or if a timer has triggered before the browser's response got back (which could happen in the web version), they will be queued up because only one Quest function can run at a time; and anything that these functions send via `msg`, or via `JS.`, will also be put in a queue so it's all sent at once the next time Quest doesn't have anything to do.\r\n\r\nSo the response to any `JS.` command will only happen *after* everything else in the script that called it has finished.",
      "EditableFormat": "markdown",
      "HTML": "<p>I would expect that to say \"DEBUGGING MESSAGE: PLATFORM: undefined\" followed by one of \"DEBUGGING MESSAGE: PLATFORM: webplayer\" (or desktop, or mobile).</p>\n<p>Note that this code:</p>\n<blockquote>\n<pre><code> // Set hyperlinks as necessary\n SetHyperlinkStatus (game.links_on)\n</code></pre>\n</blockquote>\n<p>will be run on initialisation. The <code>changedquestplatform</code> script will run <em>after</em> this. So if you want this to run differently because the game is on mobile, you need to either move this line into a <code>game.changedlinks_on</code> script (so it runs whenever <code>game.links_on</code> is changed), or move it into the <code>game.changedquestplatform</code> script.</p>\n<p>The following JS.eval call refers to a variable which is set by the SetHyperlinkStatus script. So you need to move this into the <code>changedquestplatform</code> script as well. Either that or have it check if the variable <code>platform</code> (which already exists in Javascript) is set to <code>\"mobile\"</code>.</p>\n<p>The reason you need to wait for a response is that calling <code>JS.eval</code> (or any other <code>JS.</code> function) adds a javascript command to a <em>queue</em> to be sent to the browser. These commands are then all sent at once, as soon as all Quest scripts have finished running. So after your UI initialisation script has finished, and the start script has finished, and the room enter script for the first room has finished, all these commands are sent to the javascript engine.</p>\n<p>The javascript whereAmI function is simple. It looks at the javascript variable <code>platform</code>, and sends it back to Quest. This is then placed in a queue again, if Quest is already doing something. If some other javascript has sent an ASLEvent back, or if a timer has triggered before the browser's response got back (which could happen in the web version), they will be queued up because only one Quest function can run at a time; and anything that these functions send via <code>msg</code>, or via <code>JS.</code>, will also be put in a queue so it's all sent at once the next time Quest doesn't have anything to do.</p>\n<p>So the response to any <code>JS.</code> command will only happen <em>after</em> everything else in the script that called it has finished.</p>\n\n",
      "PostDate": "2018-12-10T20:02:01.2975649Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e17a9911-d241-4501-9551-9bcf3bf0bad7",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep.  What mrangel said.\r\n\r\nThat's why I have the timer before the debugging message, but neither the start script nor the UI Init script seem to be the culprits here.\r\n\r\nWhen testing in the desktop, it works as expected.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49772452-f8011980-fcb2-11e8-9325-14591ef8c4ad.png)\r\n\r\n---\r\nIt does not work online though.\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49772421-ddc73b80-fcb2-11e8-9cac-bebfeca8a9ee.png)\r\n\r\n---\r\n It is stuck on \"undefined\", even when using the DETECT command, but I can open the HTML console and run ```whereAmI()```, and it returns \"webplayer\".\r\n\r\n![image](https://user-images.githubusercontent.com/30656341/49772565-575f2980-fcb3-11e8-8359-a36c24097a78.png)\r\n\r\n---\r\nHrmm...\r\n\r\n---\r\nhttp://play2.textadventures.co.uk/Play.aspx?id=_khdf--kyuyrtiaw5zoiia",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep.  What mrangel said.</p>\n<p>That's why I have the timer before the debugging message, but neither the start script nor the UI Init script seem to be the culprits here.</p>\n<p>When testing in the desktop, it works as expected.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49772452-f8011980-fcb2-11e8-9325-14591ef8c4ad.png\" alt=\"image\"></p>\n<hr>\n<p>It does not work online though.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49772421-ddc73b80-fcb2-11e8-9cac-bebfeca8a9ee.png\" alt=\"image\"></p>\n<hr>\n<p>It is stuck on \"undefined\", even when using the DETECT command, but I can open the HTML console and run <code>whereAmI()</code>, and it returns \"webplayer\".</p>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/49772565-575f2980-fcb3-11e8-8359-a36c24097a78.png\" alt=\"image\"></p>\n<hr>\n<p>Hrmm...</p>\n<hr>\n<p>http://play2.textadventures.co.uk/Play.aspx?id=_khdf--kyuyrtiaw5zoiia</p>\n\n",
      "PostDate": "2018-12-11T01:41:02.2129784Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7913b89e-d991-4ce9-8e0f-58b198939d89",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know what the problem is online.\r\n\r\nI made a bare bones game and tried all sorts of different approaches.  If I call ```JS.whereAmI()``` from the UI Init script online, it works.  If I try to call ```JS.whereAmI()``` at any other time during play online, it does not set ```game.questplatform```.  But I can call ```whereAmI()``` from the console, and it will set ```game.questplatform```.\r\n\r\nSo it behaves pretty much the same way in a bare bones test game as it does in DavyB's example.\r\n\r\nThis is beyond my comprehension.  In fact, it's possible that mrangel has already explained why this doesn't work online.  (Maybe something to do with a JS queue gone bananas?)\r\n\r\nSorry.  I tried for quite a while.  It's beyond me.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know what the problem is online.</p>\n<p>I made a bare bones game and tried all sorts of different approaches.  If I call <code>JS.whereAmI()</code> from the UI Init script online, it works.  If I try to call <code>JS.whereAmI()</code> at any other time during play online, it does not set <code>game.questplatform</code>.  But I can call <code>whereAmI()</code> from the console, and it will set <code>game.questplatform</code>.</p>\n<p>So it behaves pretty much the same way in a bare bones test game as it does in DavyB's example.</p>\n<p>This is beyond my comprehension.  In fact, it's possible that mrangel has already explained why this doesn't work online.  (Maybe something to do with a JS queue gone bananas?)</p>\n<p>Sorry.  I tried for quite a while.  It's beyond me.</p>\n\n",
      "PostDate": "2018-12-11T03:11:07.5483287Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6eae6598-d4b7-487d-b6cf-6af37f564a06",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I need to take a closer look at this.\r\nI took a quick look over the source, but can't find the relevant bits (as usual). I always seem to end up unable to find the source for the playerUI object.\r\n\r\nIs it that `JS.whereAmI()` fails on web but `JS.eval(\"whereAmI()\")` works? How about `JS.whereAmI(\"foo\")`?",
      "EditableFormat": "markdown",
      "HTML": "<p>I need to take a closer look at this.<br>\nI took a quick look over the source, but can't find the relevant bits (as usual). I always seem to end up unable to find the source for the playerUI object.</p>\n<p>Is it that <code>JS.whereAmI()</code> fails on web but <code>JS.eval(\"whereAmI()\")</code> works? How about <code>JS.whereAmI(\"foo\")</code>?</p>\n\n",
      "PostDate": "2018-12-11T10:16:47.9761688Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b0a28b34-8999-4898-84d5-926631543a4a",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Perhaps hold back a little mrangel until I can clarify the problem? ...though seeing the source of the function would help. From experimenting this morning, I notice that _JS.whereAmI()_ only changes _game.questplatform_ if there is a difference between the recorded platform value and the actual platform.",
      "EditableFormat": "markdown",
      "HTML": "<p>Perhaps hold back a little mrangel until I can clarify the problem? ...though seeing the source of the function would help. From experimenting this morning, I notice that <em>JS.whereAmI()</em> only changes <em>game.questplatform</em> if there is a difference between the recorded platform value and the actual platform.</p>\n\n",
      "PostDate": "2018-12-11T11:27:47.6372444Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "858044c1-4b7e-4bb4-9340-d061fea032dd",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">Is it that ```JS.whereAmI()``` fails on web but ```JS.eval(\"whereAmI()\")``` works? \r\n\r\nWhen calling ```JS.whereAmI()``` from the UI Init script online, it works.  (So does ```JS.eval(\"whereAmI();\")```.)\r\n\r\nIf you try to call it during play online, it does not work when called from Quest.  But it does work when called directly from the HTML console.\r\n\r\nIn the desktop, it always works.\r\n\r\n\r\n>How about ```JS.whereAmI(\"foo\")```?\r\n\r\nTried this, too.  It made no difference.\r\n\r\n---\r\n>From experimenting this morning, I notice that JS.whereAmI() only changes game.questplatform if there is a difference between the recorded platform value and the actual platform.\r\n\r\nSo it only changes it when necessary.\r\n\r\n---\r\nHere is the bare bones example game.  It does not call ```JS.whereAmI()``` from the UI Init script in this example.\r\n\r\nThere are 2 commands:  PLATFORM and DETECT (following DavyB's model).\r\n\r\nPLATFORM simply prints the value of ```game.questplatform``` if it exists.\r\n\r\nDETECT simply calls ```JS.whereAmI()```, and this only works correctly in the desktop player.\r\n\r\n```\r\n<!--Saved by Quest 5.8.6794.35054-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"PLATFORM Test 2\">\r\n    <gameid>13db3f83-ddf3-4ae5-a6f7-79ce8e09716b</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <menufont>Georgia, serif</menufont>\r\n    <feature_advancedscripts />\r\n    <inituserinterface type=\"script\"><![CDATA[\r\n      game.changedquestplatform => {\r\n        msg (game.questplatform)\r\n      }\r\n      // JS.whereAmI ()\r\n    ]]></inituserinterface>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n  </object>\r\n  <command name=\"detect\">\r\n    <pattern>detect</pattern>\r\n    <script>\r\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\r\n      JS.whereAmI ()\r\n    </script>\r\n  </command>\r\n  <command name=\"platform\">\r\n    <pattern>platform</pattern>\r\n    <script>\r\n      if (HasAttribute(game, \"questplatform\")) {\r\n        msg (game.questplatform)\r\n      }\r\n      else {\r\n        msg (\"game.questplatform is not defined.\")\r\n      }\r\n    </script>\r\n  </command>\r\n</asl>\r\n```\r\n\r\n---\r\nNOTE:\r\n\r\nIf I uncomment the ```JS.whereAmI()``` line in the UI Init script, that works correctly online, but the DETECT command never works online.\r\n\r\n\r\nHere is the link to play with this online:\r\nhttps://play2.textadventures.co.uk/Play.aspx?id=editor/05dcae04-b0bb-4e19-895a-2e22a03348bf%2fPLATFORM+Test+2.aslx\r\n\r\nNote that you can open the HTML console and call ```whereAmI()``` and it will work correctly.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Is it that <code>JS.whereAmI()</code> fails on web but <code>JS.eval(\"whereAmI()\")</code> works?</p>\n</blockquote>\n<p>When calling <code>JS.whereAmI()</code> from the UI Init script online, it works.  (So does <code>JS.eval(\"whereAmI();\")</code>.)</p>\n<p>If you try to call it during play online, it does not work when called from Quest.  But it does work when called directly from the HTML console.</p>\n<p>In the desktop, it always works.</p>\n<blockquote>\n<p>How about <code>JS.whereAmI(\"foo\")</code>?</p>\n</blockquote>\n<p>Tried this, too.  It made no difference.</p>\n<hr>\n<blockquote>\n<p>From experimenting this morning, I notice that JS.whereAmI() only changes game.questplatform if there is a difference between the recorded platform value and the actual platform.</p>\n</blockquote>\n<p>So it only changes it when necessary.</p>\n<hr>\n<p>Here is the bare bones example game.  It does not call <code>JS.whereAmI()</code> from the UI Init script in this example.</p>\n<p>There are 2 commands:  PLATFORM and DETECT (following DavyB's model).</p>\n<p>PLATFORM simply prints the value of <code>game.questplatform</code> if it exists.</p>\n<p>DETECT simply calls <code>JS.whereAmI()</code>, and this only works correctly in the desktop player.</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6794.35054--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"PLATFORM Test 2\"&gt;\n    &lt;gameid&gt;13db3f83-ddf3-4ae5-a6f7-79ce8e09716b&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;menufont&gt;Georgia, serif&lt;/menufont&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;inituserinterface type=\"script\"&gt;&lt;![CDATA[\n      game.changedquestplatform =&gt; {\n        msg (game.questplatform)\n      }\n      // JS.whereAmI ()\n    ]]&gt;&lt;/inituserinterface&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"detect\"&gt;\n    &lt;pattern&gt;detect&lt;/pattern&gt;\n    &lt;script&gt;\n      // This will set game.questplatform to \"desktop\", \"webplayer\", or \"mobile\".\n      JS.whereAmI ()\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"platform\"&gt;\n    &lt;pattern&gt;platform&lt;/pattern&gt;\n    &lt;script&gt;\n      if (HasAttribute(game, \"questplatform\")) {\n        msg (game.questplatform)\n      }\n      else {\n        msg (\"game.questplatform is not defined.\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n&lt;/asl&gt;\n</code></pre>\n<hr>\n<p>NOTE:</p>\n<p>If I uncomment the <code>JS.whereAmI()</code> line in the UI Init script, that works correctly online, but the DETECT command never works online.</p>\n<p>Here is the link to play with this online:<br>\nhttps://play2.textadventures.co.uk/Play.aspx?id=editor/05dcae04-b0bb-4e19-895a-2e22a03348bf%2fPLATFORM+Test+2.aslx</p>\n<p>Note that you can open the HTML console and call <code>whereAmI()</code> and it will work correctly.</p>\n\n",
      "PostDate": "2018-12-11T13:36:13.612638Z",
      "LastEditDate": "2018-12-11T13:38:01.9855621Z",
      "link": null
    },
    {
      "PostId": "29f7d3bd-f666-497e-bd7a-29a8a0be4ff0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nI even tried ```JS.eval (\"whereAmI();addTextAndScroll('Done.');\")```\r\n\r\nThe message prints, but ```game.questplatform``` was not set when playing online.",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>I even tried <code>JS.eval (\"whereAmI();addTextAndScroll('Done.');\")</code></p>\n<p>The message prints, but <code>game.questplatform</code> was not set when playing online.</p>\n\n",
      "PostDate": "2018-12-11T13:44:15.461414Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c618a95c-0e54-43c7-b5b3-3d72428a5675",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't know what is under the bonnet here, but the problem seems to be connected with Quest moving on from inituseinterface before whereAmI has finished and the completion then being mishandled later on. Specifically, in the game itself, which I've updated (http://textadventures.co.uk/games/view/m4a7-u7kyukbtvhaqtxq-g/sir-loin-and-the-coming-of-age-too) you will notice that the start script has a series of blocks of text separated by three continues. On playing, the first wait is skipped as if triggered by some internal event. Could that be the completion of whereAmI being mishandled?\r\n\r\nAfter the second wait, I've put in:\r\n```\r\nif (game.questplatform = \"unset\") {\r\n      JS.whereAmI ()\r\n    }\r\n```\r\nThe execution of this code then causes the final wait to be triggered though we do end up with questplatform finally being set correctly (type platform to see it).",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't know what is under the bonnet here, but the problem seems to be connected with Quest moving on from inituseinterface before whereAmI has finished and the completion then being mishandled later on. Specifically, in the game itself, which I've updated (http://textadventures.co.uk/games/view/m4a7-u7kyukbtvhaqtxq-g/sir-loin-and-the-coming-of-age-too) you will notice that the start script has a series of blocks of text separated by three continues. On playing, the first wait is skipped as if triggered by some internal event. Could that be the completion of whereAmI being mishandled?</p>\n<p>After the second wait, I've put in:</p>\n<pre><code>if (game.questplatform = \"unset\") {\n      JS.whereAmI ()\n    }\n</code></pre>\n<p>The execution of this code then causes the final wait to be triggered though we do end up with questplatform finally being set correctly (type platform to see it).</p>\n\n",
      "PostDate": "2018-12-11T14:34:18.6142508Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0d6e9da5-f63a-4a95-8aae-d8981eca302a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hrmm...\r\n\r\nThere seem to be multiple things going on.\r\n\r\nOne is that ```JS.whereAmI()``` calls ```ASLEvent(\"WhereAmI\", platform)``` from Javascript.  This causes a turn to finish, unless we use...\r\n\r\nEgad!  What is that new function to suppress the turn script?\r\n\r\nUPDATE:  It is ```SuppressTurnscripts```. (Duh!)\r\n\r\n---\r\nAnyway, most of the same issues exist in the bare bones game.  We can use it to isolate the problem with ```JS.whereAmI()``` before moving on to the other issues in the larger example game.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hrmm...</p>\n<p>There seem to be multiple things going on.</p>\n<p>One is that <code>JS.whereAmI()</code> calls <code>ASLEvent(\"WhereAmI\", platform)</code> from Javascript.  This causes a turn to finish, unless we use...</p>\n<p>Egad!  What is that new function to suppress the turn script?</p>\n<p>UPDATE:  It is <code>SuppressTurnscripts</code>. (Duh!)</p>\n<hr>\n<p>Anyway, most of the same issues exist in the bare bones game.  We can use it to isolate the problem with <code>JS.whereAmI()</code> before moving on to the other issues in the larger example game.</p>\n\n",
      "PostDate": "2018-12-11T14:58:55.781399Z",
      "LastEditDate": "2018-12-11T15:05:17.4082633Z",
      "link": null
    },
    {
      "PostId": "e6d270c6-d4da-4ee4-9464-6633505ac7a6",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try this, DavyB, but be ready to undo the change (just in case):\r\n\r\n```\r\n    if (game.questplatform = \"unset\") {\r\n      SuppressTurnscripts\r\n      JS.whereAmI ()\r\n    }\r\n```\r\n\r\n---\r\nThat might fix the issue with that first Continue link getting skipped over.",
      "EditableFormat": "markdown",
      "HTML": "<p>Try this, DavyB, but be ready to undo the change (just in case):</p>\n<pre><code>    if (game.questplatform = \"unset\") {\n      SuppressTurnscripts\n      JS.whereAmI ()\n    }\n</code></pre>\n<hr>\n<p>That might fix the issue with that first Continue link getting skipped over.</p>\n\n",
      "PostDate": "2018-12-11T15:04:33.7590805Z",
      "LastEditDate": "2018-12-11T15:06:04.8805745Z",
      "link": null
    },
    {
      "PostId": "40c98dcc-29bb-45d5-96f4-572e107e7af0",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> the problem seems to be connected with Quest moving on from inituseinterface before whereAmI has finished and the completion then being mishandled later on. \r\n\r\nI don't think so.  ```JS.whereAmI()``` does not work outside of the UI Init script for me when playing online, even if the UI Init script is empty.  (Meaning it fails even when ```JS.whereAmI()``` isn't called when play begins.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>the problem seems to be connected with Quest moving on from inituseinterface before whereAmI has finished and the completion then being mishandled later on.</p>\n</blockquote>\n<p>I don't think so.  <code>JS.whereAmI()</code> does not work outside of the UI Init script for me when playing online, even if the UI Init script is empty.  (Meaning it fails even when <code>JS.whereAmI()</code> isn't called when play begins.)</p>\n\n",
      "PostDate": "2018-12-11T15:08:16.2271425Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b0d9d36a-2e4e-4b48-9322-481fbcffb57d",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've kept experimenting and found that the problem seems to be connected with the 'wait' operations. The version of the game that I have put up has just one call to JS.whereAmI(), and that is in the script to be executed before entry to the first location of the game. It isn't quite working properly as the links only appear after the description of the first location. I tried to put in a 'wait' to give time for  JS.whereAmI() to work but then found that it failed completely! Feels like progress but does it help you?",
      "EditableFormat": "markdown",
      "HTML": "<p>I've kept experimenting and found that the problem seems to be connected with the 'wait' operations. The version of the game that I have put up has just one call to JS.whereAmI(), and that is in the script to be executed before entry to the first location of the game. It isn't quite working properly as the links only appear after the description of the first location. I tried to put in a 'wait' to give time for  JS.whereAmI() to work but then found that it failed completely! Feels like progress but does it help you?</p>\n\n",
      "PostDate": "2018-12-11T21:41:22.5489341Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7896d9d5-ce5e-482a-8883-9ba2b3c22c7c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think there was something about `wait` working oddly, so that it might be messed up by an ASLEvent (as the Quest engine is in a different state waiting for a `wait` response than it is when it's expecting any other response).\r\n\r\nIn this case, the only thing I can suggest is making the script that includes the wait not run until after the ASLEvent has fired back. For example, have a temporary pre-starting room with the player object in. Then have your `changedquestplatform` script check if the player is still there, and if so move them to the actual starting room, firing that room's onenter scripts which can display the game intro and use `wait` as much as they want.\r\n\r\nEither that or modify the ASLEvent function on the javascript side (which would be a pain because web and desktop have completely separate versions of that function) and make it queue responses until the server is ready to accept a normal response.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think there was something about <code>wait</code> working oddly, so that it might be messed up by an ASLEvent (as the Quest engine is in a different state waiting for a <code>wait</code> response than it is when it's expecting any other response).</p>\n<p>In this case, the only thing I can suggest is making the script that includes the wait not run until after the ASLEvent has fired back. For example, have a temporary pre-starting room with the player object in. Then have your <code>changedquestplatform</code> script check if the player is still there, and if so move them to the actual starting room, firing that room's onenter scripts which can display the game intro and use <code>wait</code> as much as they want.</p>\n<p>Either that or modify the ASLEvent function on the javascript side (which would be a pain because web and desktop have completely separate versions of that function) and make it queue responses until the server is ready to accept a normal response.</p>\n\n",
      "PostDate": "2018-12-11T23:52:01.665566Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "245a6c2c-9882-4920-bfe3-c0d6fd0c1dd0",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the suggestion mrangel. I think it makes sense for the initial game description that includes the nested wait operations to appear in the start script. Until the wait issue is resolved, it means putting the \"whereAmI ()\" call after that and making adjustments as appropriate when the event fires. The only slight problem is that when I switch hyperlinks on after the event fires, they don't appear until the player has entered a command. It will, however, be fine until the wait problem has been sorted out.\r\n\r\nIf I use a dummy starting room it shows up on the game map, and is a bit confusing.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the suggestion mrangel. I think it makes sense for the initial game description that includes the nested wait operations to appear in the start script. Until the wait issue is resolved, it means putting the \"whereAmI ()\" call after that and making adjustments as appropriate when the event fires. The only slight problem is that when I switch hyperlinks on after the event fires, they don't appear until the player has entered a command. It will, however, be fine until the wait problem has been sorted out.</p>\n<p>If I use a dummy starting room it shows up on the game map, and is a bit confusing.</p>\n\n",
      "PostDate": "2018-12-19T14:54:53.2324805Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2bf82a9-8c9c-490c-8c02-1c4f46bfdce4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You could always postpone the start script until the javascript has done its thing.\r\n\r\nSomething like, In UI Initialisation script:\r\n```\r\nJS.whereAmI()\r\nif (HasScript (game, \"start\")) {\r\n  game.postponed_start_script = game.start\r\n  game.start = null\r\n}\r\nelse {\r\n  // If we're loading a saved game, the variable is already set.\r\n  // In that case, we set it back to \"test in progress\" so that\r\n  // the changed script will still be called, in case there's any state that\r\n  // needs setting up on the JS side\r\n  game.questplatform = \"test in progress\"\r\n}\r\ngame.changedquestplatform => {\r\n  switch (this.questplatform) {\r\n    case (\"webplayer\") {\r\n      // insert relevant code here\r\n    }\r\n    case (\"desktop\") {\r\n      // insert relevant code here\r\n    }\r\n    case (\"mobile\") {\r\n      // insert relevant code here\r\n    }\r\n  }\r\n  // Once everything is set up, we run the start script if necessary\r\n  if (HasScript (this, \"postponed_start_script\")) {\r\n    do (this, \"postponed_start_script\")\r\n    // then delete our copy of the start script so it doesn't run again on reload.\r\n    this.postponed_start_script = null\r\n  }\r\n  // stop this script from running when we change it back to \"test in progress\" if a saved game is loaded\r\n  this.changedquestplatform = null\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You could always postpone the start script until the javascript has done its thing.</p>\n<p>Something like, In UI Initialisation script:</p>\n<pre><code>JS.whereAmI()\nif (HasScript (game, \"start\")) {\n  game.postponed_start_script = game.start\n  game.start = null\n}\nelse {\n  // If we're loading a saved game, the variable is already set.\n  // In that case, we set it back to \"test in progress\" so that\n  // the changed script will still be called, in case there's any state that\n  // needs setting up on the JS side\n  game.questplatform = \"test in progress\"\n}\ngame.changedquestplatform =&gt; {\n  switch (this.questplatform) {\n    case (\"webplayer\") {\n      // insert relevant code here\n    }\n    case (\"desktop\") {\n      // insert relevant code here\n    }\n    case (\"mobile\") {\n      // insert relevant code here\n    }\n  }\n  // Once everything is set up, we run the start script if necessary\n  if (HasScript (this, \"postponed_start_script\")) {\n    do (this, \"postponed_start_script\")\n    // then delete our copy of the start script so it doesn't run again on reload.\n    this.postponed_start_script = null\n  }\n  // stop this script from running when we change it back to \"test in progress\" if a saved game is loaded\n  this.changedquestplatform = null\n}\n</code></pre>\n\n",
      "PostDate": "2018-12-19T20:22:24.3424724Z",
      "LastEditDate": "2018-12-19T20:31:05.7802698Z",
      "link": null
    },
    {
      "PostId": "e7d25455-fd11-452c-9bf0-4f7ed8c84b72",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel, I'll try this out but it feels like I'm getting into deeper water! Looking at the problem another way, as 'questplatform' is only needed when a game is loaded could it be set before any code of the game is executed? ...and remove  'JS.whereAmI()'?",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel, I'll try this out but it feels like I'm getting into deeper water! Looking at the problem another way, as 'questplatform' is only needed when a game is loaded could it be set before any code of the game is executed? ...and remove  'JS.whereAmI()'?</p>\n\n",
      "PostDate": "2018-12-20T09:40:17.4910422Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dce4838d-7f7f-424d-984c-2ac6cb465cc0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's why I put it in the UI initialisation script, and postponed the 'start' script until after the JS call has returned.\r\n\r\nThe javascript runs in the browser, so it can just look at the browser and see if it's mobile or not. But you can't set a Quest variable from that without giving the browser a fraction of a second to report that information back to Quest. And it's that callback that's causing the problem here - Quest doesn't expect any messages from the browser during a wait.\r\n\r\nEven if you could remove the call to `JS.whereAmI()`, you'd have exactly the same problem. The javascript has the information you need, the Quest backend doesn't, and you can't pass information between them while a script is running.\r\n\r\nWhen can JS safely report that data back to the Quest backend?\r\n1. **Before** the wait - To do this, you just need to postpone the start script until after the wait is finished; which my script above does.\r\n2. **During** the wait - Breaks on the web version due to the really messy way `wait` is implemented. Fixing this is not realistic.\r\n3. **After** the wait - You found some problems with this method. You could work around some of them by having your script call `FinishTurn` when it's done. I still think it's neater to force the JS magic to run first, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>That's why I put it in the UI initialisation script, and postponed the 'start' script until after the JS call has returned.</p>\n<p>The javascript runs in the browser, so it can just look at the browser and see if it's mobile or not. But you can't set a Quest variable from that without giving the browser a fraction of a second to report that information back to Quest. And it's that callback that's causing the problem here - Quest doesn't expect any messages from the browser during a wait.</p>\n<p>Even if you could remove the call to <code>JS.whereAmI()</code>, you'd have exactly the same problem. The javascript has the information you need, the Quest backend doesn't, and you can't pass information between them while a script is running.</p>\n<p>When can JS safely report that data back to the Quest backend?</p>\n<ol>\n<li><strong>Before</strong> the wait - To do this, you just need to postpone the start script until after the wait is finished; which my script above does.</li>\n<li><strong>During</strong> the wait - Breaks on the web version due to the really messy way <code>wait</code> is implemented. Fixing this is not realistic.</li>\n<li><strong>After</strong> the wait - You found some problems with this method. You could work around some of them by having your script call <code>FinishTurn</code> when it's done. I still think it's neater to force the JS magic to run first, though.</li>\n</ol>\n\n",
      "PostDate": "2018-12-20T10:07:46.3044942Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9c7f57a8-c022-4fcf-8313-123976a23ce1",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry mrangel, I don't know enough about the code involved but I was hoping that the platform could be detected before any game code is executed, and the result inserted into the platform game attribute, ready immediately when the inituserinterface code is executed? This would avoid any patch and make it available to all existing games...but as I say, that is just hand waving!\r\n\r\nIn the code you provided to delay the 'start' script, it is now running after the script for the first location? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry mrangel, I don't know enough about the code involved but I was hoping that the platform could be detected before any game code is executed, and the result inserted into the platform game attribute, ready immediately when the inituserinterface code is executed? This would avoid any patch and make it available to all existing games...but as I say, that is just hand waving!</p>\n<p>In the code you provided to delay the 'start' script, it is now running after the script for the first location?</p>\n\n",
      "PostDate": "2018-12-23T12:51:20.2785046Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9e1fcd41-029a-494d-bff2-3ee878eaf193",
      "UserId": 25543,
      "Username": "Silver",
      "AvatarUrl": "https://i.imgur.com/LMGdoqRb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I wouldn’t even bother making Quest work on a mobile, it barely works online with a desktop. \r\n\r\nSo you’re left with a simple check of whether it’s online or offline. Which creates a Boolean between the two. \r\n\r\nSo, if it doesn’t work online that’s the default and otherwise it checks for offline which we know works.",
      "EditableFormat": "markdown",
      "HTML": "<p>I wouldn’t even bother making Quest work on a mobile, it barely works online with a desktop.</p>\n<p>So you’re left with a simple check of whether it’s online or offline. Which creates a Boolean between the two.</p>\n<p>So, if it doesn’t work online that’s the default and otherwise it checks for offline which we know works.</p>\n\n",
      "PostDate": "2019-01-28T22:13:04.1381932Z",
      "LastEditDate": "2019-01-28T22:20:49.3884551Z",
      "link": null
    },
    {
      "PostId": "cba93305-df11-4986-bbef-73d242261959",
      "UserId": 25543,
      "Username": "Silver",
      "AvatarUrl": "https://i.imgur.com/LMGdoqRb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Actually that’s a load of nonsense XD \r\nNever mind.",
      "EditableFormat": "markdown",
      "HTML": "<p>Actually that’s a load of nonsense XD<br>\nNever mind.</p>\n\n",
      "PostDate": "2019-01-28T22:23:12.4109736Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
