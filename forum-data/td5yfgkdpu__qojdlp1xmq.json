{
  "Topic": {
    "TopicId": "td5yfgkdpu__qojdlp1xmq",
    "ForumId": "10",
    "Title": "[Solved] The Compass doesn't show diagonal exits/directions",
    "LastUpdated": "2021-12-21T10:29:59.0137318Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0295603d-f635-450e-b3e2-28a6c55fcf90",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm playing around with random room generations. As the player moves rooms generate in all 8 directions: N, S, E, W, NE, SE, NW, SW\r\n\r\nProblem is, the compass don't show: NE, SE, NW, SW\r\nThey stay grayed out.\r\n\r\nAlso weird, the Places and Objects pane doesn't show: N, S, E, W\r\n... but it shows: NE, SE, NW, SW\r\n(Though I don't plan to use that pane. Just activated it to see if it is the same as the compass)\r\n\r\nThe exit list in the automatic room description shows all 8 directions.\r\n\r\n<b>My main problem is the compass!</b>\r\n\r\nHere is how the rooms and exits are generated and connected:\r\n\r\nBefore first enter script:\r\n```\r\n// ### CHECKS IF the room to the NORTH is already created and creates it if not.\r\ngen_n = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x) {\r\n    gen_n = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"north\", this, ar, \"northdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"south\", ar, this, \"southdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the NORTH is Not EXISTING.\r\n  if (gen_n = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_n\")\r\n    gen_n = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the SOUTH is already created and creates it if not.\r\ngen_s = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x) {\r\n    gen_s = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"south\", this, ar, \"southdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"north\", ar, this, \"northdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the SOUTH is Not EXISTING.\r\n  if (gen_s = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_s\")\r\n    gen_s = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the EAST is already created and creates it if not.\r\ngen_e = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y and ar.coord_x = this.coord_x + 1) {\r\n    gen_e = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"east\", this, ar, \"eastdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"west\", ar, this, \"westdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the EAST is Not EXISTING.\r\n  if (gen_e = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_e\")\r\n    gen_e = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the WEST is already created and creates it if not.\r\ngen_w = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y and ar.coord_x = this.coord_x - 1) {\r\n    gen_w = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"west\", this, ar, \"westdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"east\", ar, this, \"eastdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the WEST is Not EXISTING.\r\n  if (gen_w = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_w\")\r\n    gen_w = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the NORTH-EAST is already created and creates it if not.\r\ngen_ne = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x + 1) {\r\n    gen_ne = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north-east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south-west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"north-east\", this, ar, \"northeastdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"south-west\", ar, this, \"southwestdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the NORTH-EAST is Not EXISTING.\r\n  if (gen_ne = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_ne\")\r\n    gen_ne = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the SOUTH-EAST is already created and creates it if not.\r\ngen_se = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x + 1) {\r\n    gen_se = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south-east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north-west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"south-east\", this, ar, \"southeastdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"north-west\", ar, this, \"northwestdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the SOUTH-EAST is Not EXISTING.\r\n  if (gen_se = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_se\")\r\n    gen_se = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the NORTH-WEST is already created and creates it if not.\r\ngen_nw = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x - 1) {\r\n    gen_nw = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north-west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south-east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"north-west\", this, ar, \"northwestdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"south-east\", ar, this, \"southeastdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the NORTH-WEST is Not EXISTING.\r\n  if (gen_nw = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_nw\")\r\n    gen_nw = false\r\n  }\r\n}\r\n// ### CHECKS IF the room to the SOUTH-WEST is already created and creates it if not.\r\ngen_sw = true\r\nforeach (ar, GetDirectChildren(z_world_map_1)) {\r\n  // ### CHECKS X/Y\r\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x - 1) {\r\n    gen_sw = false\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south-west\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north-east\")) {\r\n      RemoveObject (xt)\r\n    }\r\n    create exit (\"south-west\", this, ar, \"southwestdirection\")\r\n    newexit = GetObject(GetExitByLink(this, ar))\r\n    newexit.grid_length = 0\r\n    create exit (\"north-east\", ar, this, \"northeastdirection\")\r\n    newexit = GetObject(GetExitByLink(ar, this))\r\n    newexit.grid_length = 0\r\n  }\r\n  // ### CREATES A ROOM IF the room to the SOUTH is Not EXISTING.\r\n  if (gen_sw = true) {\r\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\r\n    do (new_area, \"gen_sw\")\r\n    gen_sw = false\r\n  }\r\n}\r\n````\r\nScript Attributes that runs after a random room is cloned.\r\n```\r\nthis.gen_n => {\r\n  this.coord_x = player.parent.coord_x\r\n  this.coord_y = player.parent.coord_y + 1\r\n  create exit (\"north\", player.parent, this, \"northdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"south\", this, player.parent, \"southdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_s => {\r\n  this.coord_x = player.parent.coord_x\r\n  this.coord_y = player.parent.coord_y - 1\r\n  create exit (\"south\", player.parent, this, \"southdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"north\", this, player.parent, \"northdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_e => {\r\n  this.coord_x = player.parent.coord_x + 1\r\n  this.coord_y = player.parent.coord_y\r\n  create exit (\"east\", player.parent, this, \"eastdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"west\", this, player.parent, \"westdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_w => {\r\n  this.coord_x = player.parent.coord_x - 1\r\n  this.coord_y = player.parent.coord_y\r\n  create exit (\"west\", player.parent, this, \"westdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"east\", this, player.parent, \"eastdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_ne => {\r\n  this.coord_x = player.parent.coord_x + 1\r\n  this.coord_y = player.parent.coord_y + 1\r\n  create exit (\"north-east\", player.parent, this, \"northeastdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"south-west\", this, player.parent, \"southwestdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_se => {\r\n  this.coord_x = player.parent.coord_x + 1\r\n  this.coord_y = player.parent.coord_y - 1\r\n  create exit (\"south-east\", player.parent, this, \"southeastdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"north-west\", this, player.parent, \"northwestdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_nw => {\r\n  this.coord_x = player.parent.coord_x - 1\r\n  this.coord_y = player.parent.coord_y + 1\r\n  create exit (\"north-west\", player.parent, this, \"northwestdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"south-east\", this, player.parent, \"southeastdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\nthis.gen_sw => {\r\n  this.coord_x = player.parent.coord_x - 1\r\n  this.coord_y = player.parent.coord_y - 1\r\n  create exit (\"south-west\", player.parent, this, \"southwestdirection\")\r\n  newexit = GetObject(GetExitByLink(player.parent, this))\r\n  newexit.grid_length = 0\r\n  create exit (\"north-east\", this, player.parent, \"northeastdirection\")\r\n  newexit = GetObject(GetExitByLink(this, player.parent))\r\n  newexit.grid_length = 0\r\n  do (this, \"set_alias\")\r\n}\r\n```\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm playing around with random room generations. As the player moves rooms generate in all 8 directions: N, S, E, W, NE, SE, NW, SW</p>\n<p>Problem is, the compass don't show: NE, SE, NW, SW<br>\nThey stay grayed out.</p>\n<p>Also weird, the Places and Objects pane doesn't show: N, S, E, W<br>\n... but it shows: NE, SE, NW, SW<br>\n(Though I don't plan to use that pane. Just activated it to see if it is the same as the compass)</p>\n<p>The exit list in the automatic room description shows all 8 directions.</p>\n<p><b>My main problem is the compass!</b></p>\n<p>Here is how the rooms and exits are generated and connected:</p>\n<p>Before first enter script:</p>\n<pre><code>// ### CHECKS IF the room to the NORTH is already created and creates it if not.\ngen_n = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x) {\n    gen_n = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"north\", this, ar, \"northdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"south\", ar, this, \"southdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the NORTH is Not EXISTING.\n  if (gen_n = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_n\")\n    gen_n = false\n  }\n}\n// ### CHECKS IF the room to the SOUTH is already created and creates it if not.\ngen_s = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x) {\n    gen_s = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"south\", this, ar, \"southdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"north\", ar, this, \"northdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the SOUTH is Not EXISTING.\n  if (gen_s = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_s\")\n    gen_s = false\n  }\n}\n// ### CHECKS IF the room to the EAST is already created and creates it if not.\ngen_e = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y and ar.coord_x = this.coord_x + 1) {\n    gen_e = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"east\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"west\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"east\", this, ar, \"eastdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"west\", ar, this, \"westdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the EAST is Not EXISTING.\n  if (gen_e = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_e\")\n    gen_e = false\n  }\n}\n// ### CHECKS IF the room to the WEST is already created and creates it if not.\ngen_w = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y and ar.coord_x = this.coord_x - 1) {\n    gen_w = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"west\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"east\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"west\", this, ar, \"westdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"east\", ar, this, \"eastdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the WEST is Not EXISTING.\n  if (gen_w = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_w\")\n    gen_w = false\n  }\n}\n// ### CHECKS IF the room to the NORTH-EAST is already created and creates it if not.\ngen_ne = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x + 1) {\n    gen_ne = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north-east\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south-west\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"north-east\", this, ar, \"northeastdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"south-west\", ar, this, \"southwestdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the NORTH-EAST is Not EXISTING.\n  if (gen_ne = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_ne\")\n    gen_ne = false\n  }\n}\n// ### CHECKS IF the room to the SOUTH-EAST is already created and creates it if not.\ngen_se = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x + 1) {\n    gen_se = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south-east\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north-west\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"south-east\", this, ar, \"southeastdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"north-west\", ar, this, \"northwestdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the SOUTH-EAST is Not EXISTING.\n  if (gen_se = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_se\")\n    gen_se = false\n  }\n}\n// ### CHECKS IF the room to the NORTH-WEST is already created and creates it if not.\ngen_nw = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y + 1 and ar.coord_x = this.coord_x - 1) {\n    gen_nw = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"north-west\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"south-east\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"north-west\", this, ar, \"northwestdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"south-east\", ar, this, \"southeastdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the NORTH-WEST is Not EXISTING.\n  if (gen_nw = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_nw\")\n    gen_nw = false\n  }\n}\n// ### CHECKS IF the room to the SOUTH-WEST is already created and creates it if not.\ngen_sw = true\nforeach (ar, GetDirectChildren(z_world_map_1)) {\n  // ### CHECKS X/Y\n  if (ar.coord_y = this.coord_y - 1 and ar.coord_x = this.coord_x - 1) {\n    gen_sw = false\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(this), \"alias\", \"south-west\")) {\n      RemoveObject (xt)\n    }\n    foreach (xt, FilterByAttribute (ScopeExitsForRoom(ar), \"alias\", \"north-east\")) {\n      RemoveObject (xt)\n    }\n    create exit (\"south-west\", this, ar, \"southwestdirection\")\n    newexit = GetObject(GetExitByLink(this, ar))\n    newexit.grid_length = 0\n    create exit (\"north-east\", ar, this, \"northeastdirection\")\n    newexit = GetObject(GetExitByLink(ar, this))\n    newexit.grid_length = 0\n  }\n  // ### CREATES A ROOM IF the room to the SOUTH is Not EXISTING.\n  if (gen_sw = true) {\n    new_area = CloneObjectAndMove (PickOneObject(GetDirectChildren(z_random_room_generation)), z_world_map_1)\n    do (new_area, \"gen_sw\")\n    gen_sw = false\n  }\n}\n</code></pre>\n<p>Script Attributes that runs after a random room is cloned.</p>\n<pre><code>this.gen_n =&gt; {\n  this.coord_x = player.parent.coord_x\n  this.coord_y = player.parent.coord_y + 1\n  create exit (\"north\", player.parent, this, \"northdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"south\", this, player.parent, \"southdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_s =&gt; {\n  this.coord_x = player.parent.coord_x\n  this.coord_y = player.parent.coord_y - 1\n  create exit (\"south\", player.parent, this, \"southdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"north\", this, player.parent, \"northdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_e =&gt; {\n  this.coord_x = player.parent.coord_x + 1\n  this.coord_y = player.parent.coord_y\n  create exit (\"east\", player.parent, this, \"eastdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"west\", this, player.parent, \"westdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_w =&gt; {\n  this.coord_x = player.parent.coord_x - 1\n  this.coord_y = player.parent.coord_y\n  create exit (\"west\", player.parent, this, \"westdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"east\", this, player.parent, \"eastdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_ne =&gt; {\n  this.coord_x = player.parent.coord_x + 1\n  this.coord_y = player.parent.coord_y + 1\n  create exit (\"north-east\", player.parent, this, \"northeastdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"south-west\", this, player.parent, \"southwestdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_se =&gt; {\n  this.coord_x = player.parent.coord_x + 1\n  this.coord_y = player.parent.coord_y - 1\n  create exit (\"south-east\", player.parent, this, \"southeastdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"north-west\", this, player.parent, \"northwestdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_nw =&gt; {\n  this.coord_x = player.parent.coord_x - 1\n  this.coord_y = player.parent.coord_y + 1\n  create exit (\"north-west\", player.parent, this, \"northwestdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"south-east\", this, player.parent, \"southeastdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\nthis.gen_sw =&gt; {\n  this.coord_x = player.parent.coord_x - 1\n  this.coord_y = player.parent.coord_y - 1\n  create exit (\"south-west\", player.parent, this, \"southwestdirection\")\n  newexit = GetObject(GetExitByLink(player.parent, this))\n  newexit.grid_length = 0\n  create exit (\"north-east\", this, player.parent, \"northeastdirection\")\n  newexit = GetObject(GetExitByLink(this, player.parent))\n  newexit.grid_length = 0\n  do (this, \"set_alias\")\n}\n</code></pre>\n\n",
      "PostDate": "2021-12-21T10:29:59.0137318Z",
      "LastEditDate": "2021-12-22T20:20:57.447029Z",
      "link": null
    },
    {
      "PostId": "734bf6e8-2b7c-4ed6-bd1f-8fa4a59246ce",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe the decision on whether to display an exit in the \"compass\" or \"placesandobjects\" pane is determined by whether its alias is in this JS array:\r\n```\r\nvar _compassDirs = [\"northwest\", \"north\", \"northeast\", \"west\", \"east\", \"southwest\", \"south\", \"southeast\", \"up\", \"down\", \"in\", \"out\"];\r\n```\r\n\r\nYou seem to be creating exits with aliases like \"north-east\", which isn't in the list.\r\n\r\nYou can change this array by doing (presumably in your UI initialisation script):\r\n```\r\nJS.setCompassDirections (\"north-west;north;north-east;west;east;south-west;south;south-east;up;down;in;out\")\r\n```\r\n(EDIT: corrected the separator symbol)\r\nI've not tested this method; so I could be missing something, but I think it should work.",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe the decision on whether to display an exit in the \"compass\" or \"placesandobjects\" pane is determined by whether its alias is in this JS array:</p>\n<pre><code>var _compassDirs = [\"northwest\", \"north\", \"northeast\", \"west\", \"east\", \"southwest\", \"south\", \"southeast\", \"up\", \"down\", \"in\", \"out\"];\n</code></pre>\n<p>You seem to be creating exits with aliases like \"north-east\", which isn't in the list.</p>\n<p>You can change this array by doing (presumably in your UI initialisation script):</p>\n<pre><code>JS.setCompassDirections (\"north-west;north;north-east;west;east;south-west;south;south-east;up;down;in;out\")\n</code></pre>\n<p>(EDIT: corrected the separator symbol)<br>\nI've not tested this method; so I could be missing something, but I think it should work.</p>\n\n",
      "PostDate": "2021-12-22T09:06:33.7705119Z",
      "LastEditDate": "2021-12-22T14:15:34.2460184Z",
      "link": null
    },
    {
      "PostId": "3c0bbfd1-c27f-49a2-8191-03be6de15384",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> You can change this array by doing (presumably in your UI initialisation script):\r\n> <code>JS.setCompassDirections (\"north-west/north/north-east/west/east/south-west/south/south-east/up/down/in/out\")</code>\r\n> I've not tested this method; so I could be missing something, but I think it should work.\r\n\r\nThis script made all directions in the Compass disappear (grayed out) \r\nbut now all directions appear in the Places and Objects Pane. (before it showed only the 4 missing directions from the Compass.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>You can change this array by doing (presumably in your UI initialisation script):<br>\n<code>JS.setCompassDirections (\"north-west/north/north-east/west/east/south-west/south/south-east/up/down/in/out\")</code><br>\nI've not tested this method; so I could be missing something, but I think it should work.</p>\n</blockquote>\n<p>This script made all directions in the Compass disappear (grayed out)<br>\nbut now all directions appear in the Places and Objects Pane. (before it showed only the 4 missing directions from the Compass.)</p>\n\n",
      "PostDate": "2021-12-22T11:08:22.0029634Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a08dd24a-3a63-4f49-9c9b-c80cd43ec2ee",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, should be `;` rather than `/` in the list.\r\n\r\nThe argument to `setCompassDirections` is a string containing all direction names (in that specific order) with `;` between them. The argument to `updateCompass` (automatically called by Quest) is a string containing the aliases of all currently visible exits, with `/` between them.\r\nIt's hard to remember what the separator is for all the JS functions; sorry about that.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, should be <code>;</code> rather than <code>/</code> in the list.</p>\n<p>The argument to <code>setCompassDirections</code> is a string containing all direction names (in that specific order) with <code>;</code> between them. The argument to <code>updateCompass</code> (automatically called by Quest) is a string containing the aliases of all currently visible exits, with <code>/</code> between them.<br>\nIt's hard to remember what the separator is for all the JS functions; sorry about that.</p>\n\n",
      "PostDate": "2021-12-22T12:10:30.163247Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "88d4a3b1-b5ba-45b1-ab45-5af86fd73af5",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Sorry, should be <code>;</code> rather than <code>/</code> in the list.\r\n\r\nThanks, that's a bit closer... \r\nNow the compass shows all directions, but when clicking on NW, SW, NE, SE, the game says: \"I don't understand your command.\"",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Sorry, should be <code>;</code> rather than <code>/</code> in the list.</p>\n</blockquote>\n<p>Thanks, that's a bit closer...<br>\nNow the compass shows all directions, but when clicking on NW, SW, NE, SE, the game says: \"I don't understand your command.\"</p>\n\n",
      "PostDate": "2021-12-22T16:55:28.733931Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28a83ed2-e886-4a6f-abf0-2c6d38aaeac1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's because \"north-west\" isn't a command.\r\nYou'll need to change the pattern of the `go` command if you want to use nonstandard direction names.\r\n\r\nOr replace the function:\r\n```\r\nJS.eval(\"compassClick = function(direction) {sendCommand('go '+direction)};\")\r\n```\r\n(off the top of my head)",
      "EditableFormat": "markdown",
      "HTML": "<p>That's because \"north-west\" isn't a command.<br>\nYou'll need to change the pattern of the <code>go</code> command if you want to use nonstandard direction names.</p>\n<p>Or replace the function:</p>\n<pre><code>JS.eval(\"compassClick = function(direction) {sendCommand('go '+direction)};\")\n</code></pre>\n<p>(off the top of my head)</p>\n\n",
      "PostDate": "2021-12-22T19:13:24.6871554Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f9c34d84-067b-4b3f-8454-42781b16b50f",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> ...if you want to use nonstandard direction names.\r\n\r\nFunny, now when I think about it, I don't need to keep the nonstandard names. I'm not going to use the room description's exit list, anyway.\r\n\r\n> Or replace the function:\r\n>\r\n> <code>JS.eval(\"compassClick = function(direction) {sendCommand('go '+direction)};\")</code>\r\n\r\nThis script is working, too. Though, I think I just gonna change the names to the standard names. May mess less things up down the road.\r\n\r\n> You'll need to change the pattern of the go command... \r\n\r\nBTW, earlier I used the expression <code>{command:go north-east:NE}</code> and it worked. A bit weird that it doesn't work for the UI.. ",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>...if you want to use nonstandard direction names.</p>\n</blockquote>\n<p>Funny, now when I think about it, I don't need to keep the nonstandard names. I'm not going to use the room description's exit list, anyway.</p>\n<blockquote>\n<p>Or replace the function:</p>\n<p><code>JS.eval(\"compassClick = function(direction) {sendCommand('go '+direction)};\")</code></p>\n</blockquote>\n<p>This script is working, too. Though, I think I just gonna change the names to the standard names. May mess less things up down the road.</p>\n<blockquote>\n<p>You'll need to change the pattern of the go command...</p>\n</blockquote>\n<p>BTW, earlier I used the expression <code>{command:go north-east:NE}</code> and it worked. A bit weird that it doesn't work for the UI..</p>\n\n",
      "PostDate": "2021-12-22T20:14:07.7371104Z",
      "LastEditDate": "2021-12-22T20:20:04.02655Z",
      "link": null
    }
  ]
}
