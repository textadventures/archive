{
  "Topic": {
    "TopicId": "1212",
    "ForumId": "10",
    "Title": "Objects & Commands (split from \"Court of Games&quot",
    "LastUpdated": "2006-07-10T12:14:14+01:00",
    "ReplyCount": 25
  },
  "Posts": [
    {
      "PostId": "9340",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "[quote=&quot;Overcat&quot;:3tia2ly5][quote:3tia2ly5]Basic technical competence is a useful gauge: when large numbers of games made with a system have the same problems, it's a sign that either 1) the system is not capable of creating technically adequate games or 2) it requires a good deal of effort just to get the normal stuff working. Neither is too attractive for a user when there are alternatives where 3) basic technical competence is automatic.[/quote:3tia2ly5] \n\nAn excellent argument for more built-in commands, which has been a point of small contention.  Couple that with a sound manual and the games will improve.\n\nOn the other hand, the easier a system is to use, the larger a group of people will use it.  The intellectual scope of the users broadens to include, well, [i:3tia2ly5]less technically-minded[/i:3tia2ly5] individuals.  And that's saying it nice.  Nothing wrong with that.  But this is where the Court of Games could step in as a regulatory screen.[/quote:3tia2ly5]\n\nI think part of the problem is that Quest makes it very easy to do things wrong.  For example, if you add a new verb in an Inform game, you'll get sensible behavior for some fallthrough cases.  In Quest, it seems to require a fair amount of effort to handle those ordinary cases, if it's even possible.\n\nMore specifically, Inform will give a game-level response if you try an action which it could understand, but was not specifically overriden (&quot;COOK THE ROCK&quot;, when the rock is held), and will give a system-level error if you try an action it couldn't understand (&quot;COOK THE ROCK&quot;, when the rock is in another room, or &quot;COOK THE ZRBLM&quot;).\n\nIs there a way in Quest to determine whether the command can be understood, which does not require manually handling each object?\n\nSo something like:\n[code:3tia2ly5]\nfor each object x\n  if x is present and text maches x&#46;vocabulary\n    say &quot;You can't cook the &quot;, x, &quot;&#46;&quot;;\nsay &quot;I can't understand what you want to cook&#46;&quot;\n[/code:3tia2ly5]\nwould be fine; it would be possible to write that part of the code before creating any object and not have to revise it afterwards.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Overcat wrote:</cite><blockquote><p>Basic technical competence is a useful gauge: when large numbers of games made with a system have the same problems, it's a sign that either 1) the system is not capable of creating technically adequate games or 2) it requires a good deal of effort just to get the normal stuff working. Neither is too attractive for a user when there are alternatives where 3) basic technical competence is automatic.</blockquote> <br/><br/>An excellent argument for more built-in commands, which has been a point of small contention.  Couple that with a sound manual and the games will improve.<br/><br/>On the other hand, the easier a system is to use, the larger a group of people will use it.  The intellectual scope of the users broadens to include, well, <span style=\"font-style:italic;\">less technically-minded</span> individuals.  And that's saying it nice.  Nothing wrong with that.  But this is where the Court of Games could step in as a regulatory screen.</p></blockquote><br/><br/>I think part of the problem is that Quest makes it very easy to do things wrong.  For example, if you add a new verb in an Inform game, you'll get sensible behavior for some fallthrough cases.  In Quest, it seems to require a fair amount of effort to handle those ordinary cases, if it's even possible.<br/><br/>More specifically, Inform will give a game-level response if you try an action which it could understand, but was not specifically overriden (&quot;COOK THE ROCK&quot;, when the rock is held), and will give a system-level error if you try an action it couldn't understand (&quot;COOK THE ROCK&quot;, when the rock is in another room, or &quot;COOK THE ZRBLM&quot;).<br/><br/>Is there a way in Quest to determine whether the command can be understood, which does not require manually handling each object?<br/><br/>So something like:<br/><pre><code><br/>for each object x<br/>  if x is present and text maches x&#46;vocabulary<br/>    say &quot;You can't cook the &quot;, x, &quot;&#46;&quot;;<br/>say &quot;I can't understand what you want to cook&#46;&quot;<br/></code></pre><br/>would be fine; it would be possible to write that part of the code before creating any object and not have to revise it afterwards.",
      "PostDate": "2006-07-07T17:36:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9342",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:1xqsk1h2]Is there a way in Quest to determine whether the command can be understood, which does not require manually handling each object? [/quote:1xqsk1h2]\n\nAbsolutely.  This very easily done in a command definition block.  Check if the object is present.  If not, output A.  If so, is the object cook-able?  If not, output B, else output C and perform the object's COOK action.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>Is there a way in Quest to determine whether the command can be understood, which does not require manually handling each object? </p></blockquote><br/><br/>Absolutely.  This very easily done in a command definition block.  Check if the object is present.  If not, output A.  If so, is the object cook-able?  If not, output B, else output C and perform the object's COOK action.",
      "PostDate": "2006-07-07T17:44:06+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9346",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "Could you give the exact source needed?",
      "EditableFormat": "bbcode",
      "HTML": "Could you give the exact source needed?",
      "PostDate": "2006-07-07T18:42:36+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9351",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Yes.  Gimme' some time.  For clarification:\n\n1) Check if the object referred to is in the current room/inventory, based on its vocabulary (ie, names/aliases)\n2) If the object is in the current room/inventory, check if it can be cooked\n3) If the object is not in the current inventory, print &quot;I can't understand what you want to cook.&quot;\n4) If the object can be cooked, print &quot;You cook it.&quot;\n5) If the object cannot be cooked, print &quot;You cannot cook this object.&quot;\n\nOr you could have a quick go at it, tr0n.",
      "EditableFormat": "bbcode",
      "HTML": "Yes.  Gimme' some time.  For clarification:<br/><br/>1) Check if the object referred to is in the current room/inventory, based on its vocabulary (ie, names/aliases)<br/>2) If the object is in the current room/inventory, check if it can be cooked<br/>3) If the object is not in the current inventory, print &quot;I can't understand what you want to cook.&quot;<br/>4) If the object can be cooked, print &quot;You cook it.&quot;<br/>5) If the object cannot be cooked, print &quot;You cannot cook this object.&quot;<br/><br/>Or you could have a quick go at it, tr0n.",
      "PostDate": "2006-07-07T19:01:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9358",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Erm, x.vocabulary?\nDo you mean it [i:2un8b7bd]doesn't[/i:2un8b7bd] match?\n\nI take it x.vocabulary is actually verbs/actions which can be taken on that object?\nAnd how does that work exactly - because there could be multiple actions that could be done on that on object.\n\nerm right, this bit would launch off the &quot;cook&quot; command;\n[code:2un8b7bd]command &lt;cook #object#&gt; &#123;\n&#125;[/code:2un8b7bd]\n\nNow, inside the {}'s would go the code which would be kicked off if &quot;cook the rock&quot; was typed in. (I'm gonna take it that &quot;the&quot; is ignored, as overcat has previously said in another topic).\n\n[code:2un8b7bd]if here &lt;#object#&gt; then &#123;\n    if action &lt;#object#;cook&gt; then doaction &lt;#object#;cook&gt; else msg &lt;You can't cook the #object#!&gt;\n&#125;\nelse msg &quot;I can't understand what you want to cook&#46;&quot;[/code:2un8b7bd]",
      "EditableFormat": "bbcode",
      "HTML": "Erm, x.vocabulary?<br/>Do you mean it <span style=\"font-style:italic;\">doesn't</span> match?<br/><br/>I take it x.vocabulary is actually verbs/actions which can be taken on that object?<br/>And how does that work exactly - because there could be multiple actions that could be done on that on object.<br/><br/>erm right, this bit would launch off the &quot;cook&quot; command;<br/><pre><code>command &lt;cook #object#&gt; &#123;<br/>&#125;</code></pre><br/><br/>Now, inside the {}'s would go the code which would be kicked off if &quot;cook the rock&quot; was typed in. (I'm gonna take it that &quot;the&quot; is ignored, as overcat has previously said in another topic).<br/><br/><pre><code>if here &lt;#object#&gt; then &#123;<br/>    if action &lt;#object#;cook&gt; then doaction &lt;#object#;cook&gt; else msg &lt;You can't cook the #object#!&gt;<br/>&#125;<br/>else msg &quot;I can't understand what you want to cook&#46;&quot;</code></pre>",
      "PostDate": "2006-07-07T19:41:26+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9359",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "If my pseudocode isn't very Quest-like, it's because I don't know ASL.\n\n(Those games I've played in Quest have struck me as being low in technical quality, the manual is not written in a very inviting style, and those ASL files I've looked at seem not to share the features which made clean handling in Inform / TADS possible.  That's not very encouraging towards putting in the effort to learn the language.)\n\n'xvocabulary' was intended to be a list of all single words that can refer to 'x'.",
      "EditableFormat": "bbcode",
      "HTML": "If my pseudocode isn't very Quest-like, it's because I don't know ASL.<br/><br/>(Those games I've played in Quest have struck me as being low in technical quality, the manual is not written in a very inviting style, and those ASL files I've looked at seem not to share the features which made clean handling in Inform / TADS possible.  That's not very encouraging towards putting in the effort to learn the language.)<br/><br/>'xvocabulary' was intended to be a list of all single words that can refer to 'x'.",
      "PostDate": "2006-07-07T20:04:29+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9360",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[code:2hklcclv]\tcommand &lt;cook #@object#&gt; &#123;\n\t\n\t\tif here &lt;#object#&gt; then &#123;\n\t\t\tif action &lt;#object#; cook&gt; then &#123;\n\t\t\t\tif not property &lt;#object#; cooked&gt; then &#123;\n\t\t\t\t\tdoaction &lt;#object#; cook&gt;\n\t\t\t\t\tproperty &lt;#object#; cooked&gt;\n\t\t\t\t&#125;\n\t\t\t\telse &#123;\n\t\t\t\t\tmsg &lt;That is already cooked&#46;&gt;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\telse &#123;\n\t\t\t\tmsg &lt;You can't cook that&#46;&gt;\n\t\t\t&#125;\n\t\t&#125;\n\t\telse &#123;\n\t\t\tmsg &lt;That object is not here to cook&#46;&gt;\n\t\t&#125;\n\t&#125;[/code:2hklcclv]\n\nThe problem is that the last message, 'msg &lt;That object is not here to cook.&gt;' will never show, since if the object is not present then Quest will display a standard error message, never running through the code in this command.  To remedy, we can change the very first line from 'command &lt;cook #@object#&gt; {' to 'command &lt;cook #object#&gt; {', omitting the @.  This causes the code within the command to execute, regardless if the object is present or not (because it is searching for text, I presume, not an object).  Including the @ makes Quest search explicitly for an object that is present.  If it doesn't find one, the code in the command does not execute.  If we omit the @, however, we render the alt property of the object defunct.\n\nI have coded my way around this by re-inventing the wheel, so to speak.  I never use the @ in commands:  instead I search for objects within the locale (inventory and current room) that match the text input, by alt or otherwise.  The alt property cannot be read as a string, so I slapped on another 'alts' property to each object that contains alternate names/synonyms.\n\n[b:2hklcclv]Pseudo-code:[/b:2hklcclv]\n[code:2hklcclv]For each object in locale &#123;\n\tIf instr&#40;#&#40;quest&#46;thing&#41;&#58;alts#; #text#&#41; &gt; 0&#41; then &#123;\n\t\tfound object\n\t\tadd to found_objects array\n\t\tdisambiguate if array size &gt; 1\n\t\t&#125;                    \n\treturn object\n&#125;[/code:2hklcclv]",
      "EditableFormat": "bbcode",
      "HTML": "<pre><code>\tcommand &lt;cook #@object#&gt; &#123;<br/>\t<br/>\t\tif here &lt;#object#&gt; then &#123;<br/>\t\t\tif action &lt;#object#; cook&gt; then &#123;<br/>\t\t\t\tif not property &lt;#object#; cooked&gt; then &#123;<br/>\t\t\t\t\tdoaction &lt;#object#; cook&gt;<br/>\t\t\t\t\tproperty &lt;#object#; cooked&gt;<br/>\t\t\t\t&#125;<br/>\t\t\t\telse &#123;<br/>\t\t\t\t\tmsg &lt;That is already cooked&#46;&gt;<br/>\t\t\t\t&#125;<br/>\t\t\t&#125;<br/>\t\t\telse &#123;<br/>\t\t\t\tmsg &lt;You can't cook that&#46;&gt;<br/>\t\t\t&#125;<br/>\t\t&#125;<br/>\t\telse &#123;<br/>\t\t\tmsg &lt;That object is not here to cook&#46;&gt;<br/>\t\t&#125;<br/>\t&#125;</code></pre><br/><br/>The problem is that the last message, 'msg &lt;That object is not here to cook.&gt;' will never show, since if the object is not present then Quest will display a standard error message, never running through the code in this command.  To remedy, we can change the very first line from 'command &lt;cook #@object#&gt; {' to 'command &lt;cook #object#&gt; {', omitting the @.  This causes the code within the command to execute, regardless if the object is present or not (because it is searching for text, I presume, not an object).  Including the @ makes Quest search explicitly for an object that is present.  If it doesn't find one, the code in the command does not execute.  If we omit the @, however, we render the alt property of the object defunct.<br/><br/>I have coded my way around this by re-inventing the wheel, so to speak.  I never use the @ in commands:  instead I search for objects within the locale (inventory and current room) that match the text input, by alt or otherwise.  The alt property cannot be read as a string, so I slapped on another 'alts' property to each object that contains alternate names/synonyms.<br/><br/><span style=\"font-weight:bold;\">Pseudo-code:</span><br/><pre><code>For each object in locale &#123;<br/>\tIf instr&#40;#&#40;quest&#46;thing&#41;&#58;alts#; #text#&#41; &gt; 0&#41; then &#123;<br/>\t\tfound object<br/>\t\tadd to found_objects array<br/>\t\tdisambiguate if array size &gt; 1<br/>\t\t&#125;                    <br/>\treturn object<br/>&#125;</code></pre>",
      "PostDate": "2006-07-07T20:19:34+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9362",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "quest deals with command structure totally differently from other sytems if I'm reading things like this right.\nTADS/inform use a verb-pronoun-noun-whatever language structure system, which is built-in.\n\nQues see's it as &quot;oh that's a line -does it match any command line which the programmer has entered?\nIf it does, than it goes off and executes the code.\nIf not, then it doesn't match any line and it gives out a &quot;I do not recognise that command&quot; line - which you can change.\n\nAlso, why go through all the objects in a room and compare them to the text?\nCan you not just refer to any part of the text entered as an object straight off?\n\nSo entering &quot;key&quot; would automatically link back to &quot;old key&quot; instead of having to go through each object trying to find &quot;key&quot;.",
      "EditableFormat": "bbcode",
      "HTML": "quest deals with command structure totally differently from other sytems if I'm reading things like this right.<br/>TADS/inform use a verb-pronoun-noun-whatever language structure system, which is built-in.<br/><br/>Ques see's it as &quot;oh that's a line -does it match any command line which the programmer has entered?<br/>If it does, than it goes off and executes the code.<br/>If not, then it doesn't match any line and it gives out a &quot;I do not recognise that command&quot; line - which you can change.<br/><br/>Also, why go through all the objects in a room and compare them to the text?<br/>Can you not just refer to any part of the text entered as an object straight off?<br/><br/>So entering &quot;key&quot; would automatically link back to &quot;old key&quot; instead of having to go through each object trying to find &quot;key&quot;.",
      "PostDate": "2006-07-07T20:26:16+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9369",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:1qydc9p7]If we omit the @, however, we render the alt property of the object defunct. [/quote:1qydc9p7]\n\nI still want to use alt functionality.  That's why I loop through all of the objects to find any with alts matching the inputted text.  And I omit the @ because I want to be able to print different messages other than the standard for different objects/commands.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>If we omit the @, however, we render the alt property of the object defunct. </p></blockquote><br/><br/>I still want to use alt functionality.  That's why I loop through all of the objects to find any with alts matching the inputted text.  And I omit the @ because I want to be able to print different messages other than the standard for different objects/commands.",
      "PostDate": "2006-07-07T20:45:01+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9370",
      "UserId": 0,
      "Username": "steve the gaming guy",
      "UserAvatar": null,
      "UserGravatar": "6577a0affcb6ea711c75baf052ffd08a",
      "EditableText": "[quote=&quot;Tr0n&quot;:1u6to9nq]...So entering &quot;key&quot; would automatically link back to &quot;old key&quot; instead of having to go through each object trying to find &quot;key&quot;.[/quote:1u6to9nq]\n\nAmen",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Tr0n wrote:</cite>...So entering &quot;key&quot; would automatically link back to &quot;old key&quot; instead of having to go through each object trying to find &quot;key&quot;.</blockquote><br/><br/>Amen",
      "PostDate": "2006-07-07T20:46:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9376",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "#@object# has always worked for me...\nI may try and check this out in a spare few mins tomorrow.\n\nI thought it searched the game for that object - BUT, the solution would be to simply move the @ - not remove it.\n\nMove the @ from command &lt;cook #@object#&gt; to if here &lt;#@object#&gt; etc.\nIt's a little more typing I guess, but one letter saves so much time looping through all the objects.\n\nAlso, all of object properties are strings AFAIK.. I'll check this out, but I find it confusing that it doesn't come out.\nDoes the alt tag use ;'s as seperators?\n\nOvercat, I wasn't refering to you with the looping through all objects, I was refering to Freak.. I understand if the alt tag doesn't work.\n\nI didn't include a check for &quot;cookability&quot;, as the fact it has a &quot;cook&quot; action is enough IMO.. I also didn't like to check for any 'cooked', as that should be on a per-object basis under the 'cook' action..\nAlthough I'd do it slightly seperately, and have a 2-teir system. Having a default &quot;cookable&quot; property, &quot;cooked&quot; property (as you've shown above) and a default cook action - inside an else statement. The then would be launched it the object had a cook action - in which the default wouldn't get executed.. Which allows me to go idly by adding objects with a plain property - or fill out an explosion technique of a fork in a microwave (or something).",
      "EditableFormat": "bbcode",
      "HTML": "#@object# has always worked for me...<br/>I may try and check this out in a spare few mins tomorrow.<br/><br/>I thought it searched the game for that object - BUT, the solution would be to simply move the @ - not remove it.<br/><br/>Move the @ from command &lt;cook #@object#&gt; to if here &lt;#@object#&gt; etc.<br/>It's a little more typing I guess, but one letter saves so much time looping through all the objects.<br/><br/>Also, all of object properties are strings AFAIK.. I'll check this out, but I find it confusing that it doesn't come out.<br/>Does the alt tag use ;'s as seperators?<br/><br/>Overcat, I wasn't refering to you with the looping through all objects, I was refering to Freak.. I understand if the alt tag doesn't work.<br/><br/>I didn't include a check for &quot;cookability&quot;, as the fact it has a &quot;cook&quot; action is enough IMO.. I also didn't like to check for any 'cooked', as that should be on a per-object basis under the 'cook' action..<br/>Although I'd do it slightly seperately, and have a 2-teir system. Having a default &quot;cookable&quot; property, &quot;cooked&quot; property (as you've shown above) and a default cook action - inside an else statement. The then would be launched it the object had a cook action - in which the default wouldn't get executed.. Which allows me to go idly by adding objects with a plain property - or fill out an explosion technique of a fork in a microwave (or something).",
      "PostDate": "2006-07-08T00:53:31+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9384",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:qr9s8vnu]#@object# has always worked for me... \nI may try and check this out in a spare few mins tomorrow.[/quote:qr9s8vnu]\n\nIn what sense does it work for you and not me again?  My problem was that it doesn't fire the rest of the code in the command if it cannot find #@object#.  Oh yeah.  Your solution works if the object is referred to by its alias/name.\n\nWait a sec.  Lemme' test that.\n\nHoly.\n\n[code:qr9s8vnu]command &lt;wield #object#&gt; &#123;\n\t\t\t\n\t\tif here &lt;#@object#&gt; then &#123;\n\t\t\tmsg &lt;    Object is here&#46;&gt;\n\t\t&#125;\n&#125;[/code:qr9s8vnu]\nThis only works if the alias AND the object name are identical to the input string #object#...odd.  In other words, if I type 'wield apple', both the actual object name and the alias have to be 'apple'.  If one or the other is 'apple2', the object is not found.  Huh.\n\nIn any case, objects can't be accessed via their alt properties with this method either.  For instance, if I give the apple the alt 'fruit', and then type 'wield fruit', the object is not found.\n\n[quote:qr9s8vnu]Does the alt tag use ;'s as seperators?[/quote:qr9s8vnu]\n\nYeah.\n\n[code:qr9s8vnu]command &lt;alt #@object#&gt; &#123;\t\t\n\t\tmsg &lt;   Alt = #&#40;object&#41;&#58;alt#&gt;\n\t\tstring &lt;objectalt; #&#40;object&#41;&#58;alt#&gt;\n\t\tmsg &lt;   Alt = #objectalt#&gt;\n&#125;[/code:qr9s8vnu]\n\nThe above produces\n\n[code:qr9s8vnu]Alt = !\nAlt = [/code:qr9s8vnu]\n\n[quote:qr9s8vnu]I didn't include a check for &quot;cookability&quot;, as the fact it has a &quot;cook&quot; action is enough IMO[/quote:qr9s8vnu]\n\nYes, the fact that it has a cook action is good enough.\n\n[quote:qr9s8vnu]I also didn't like to check for any 'cooked', as that should be on a per-object basis under the 'cook' action.[/quote:qr9s8vnu]\n\nYes, I thought this too, but for ease of example it was put in one block of code.\n\n[quote:qr9s8vnu]Although I'd do it slightly seperately, and have a 2-teir system. Having a default &quot;cookable&quot; property, &quot;cooked&quot; property (as you've shown above) and a default cook action - inside an else statement. The then would be launched it the object had a cook action - in which the default wouldn't get executed.. Which allows me to go idly by adding objects with a plain property - or fill out an explosion technique of a fork in a microwave (or something).[/quote:qr9s8vnu]\n\nYep.  Generally setting up type's is the way to go!",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>#@object# has always worked for me... <br/>I may try and check this out in a spare few mins tomorrow.</p></blockquote><br/><br/>In what sense does it work for you and not me again?  My problem was that it doesn't fire the rest of the code in the command if it cannot find #@object#.  Oh yeah.  Your solution works if the object is referred to by its alias/name.<br/><br/>Wait a sec.  Lemme' test that.<br/><br/>Holy.<br/><br/><pre><code>command &lt;wield #object#&gt; &#123;<br/>\t\t\t<br/>\t\tif here &lt;#@object#&gt; then &#123;<br/>\t\t\tmsg &lt;    Object is here&#46;&gt;<br/>\t\t&#125;<br/>&#125;</code></pre><br/>This only works if the alias AND the object name are identical to the input string #object#...odd.  In other words, if I type 'wield apple', both the actual object name and the alias have to be 'apple'.  If one or the other is 'apple2', the object is not found.  Huh.<br/><br/>In any case, objects can't be accessed via their alt properties with this method either.  For instance, if I give the apple the alt 'fruit', and then type 'wield fruit', the object is not found.<br/><br/><blockquote><p>Does the alt tag use ;'s as seperators?</p></blockquote><br/><br/>Yeah.<br/><br/><pre><code>command &lt;alt #@object#&gt; &#123;\t\t<br/>\t\tmsg &lt;   Alt = #&#40;object&#41;&#58;alt#&gt;<br/>\t\tstring &lt;objectalt; #&#40;object&#41;&#58;alt#&gt;<br/>\t\tmsg &lt;   Alt = #objectalt#&gt;<br/>&#125;</code></pre><br/><br/>The above produces<br/><br/><pre><code>Alt = !<br/>Alt = </code></pre><br/><br/><blockquote><p>I didn't include a check for &quot;cookability&quot;, as the fact it has a &quot;cook&quot; action is enough IMO</p></blockquote><br/><br/>Yes, the fact that it has a cook action is good enough.<br/><br/><blockquote><p>I also didn't like to check for any 'cooked', as that should be on a per-object basis under the 'cook' action.</p></blockquote><br/><br/>Yes, I thought this too, but for ease of example it was put in one block of code.<br/><br/><blockquote><p>Although I'd do it slightly seperately, and have a 2-teir system. Having a default &quot;cookable&quot; property, &quot;cooked&quot; property (as you've shown above) and a default cook action - inside an else statement. The then would be launched it the object had a cook action - in which the default wouldn't get executed.. Which allows me to go idly by adding objects with a plain property - or fill out an explosion technique of a fork in a microwave (or something).</p></blockquote><br/><br/>Yep.  Generally setting up type's is the way to go!",
      "PostDate": "2006-07-08T02:58:46+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9391",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Oh My God - you're totally correct.\n\n#@object# only works in objects in the current room...\n\nI've uploaded a demo to;\n[url:150pg00q]http&#58;//www&#46;compwhizz&#46;freeserve&#46;co&#46;uk/asldemos/alias&#46;asl[/url:150pg00q]\n\nThere's 2 objects;\n[b:150pg00q]one[/b:150pg00q] and [b:150pg00q]five[/b:150pg00q].\nOne is alias'd to [b:150pg00q]two[/b:150pg00q]. And alt'd to [b:150pg00q]three[/b:150pg00q] &amp; [b:150pg00q]four[/b:150pg00q].\nFive is alias'd to [b:150pg00q]six[/b:150pg00q]. And alt'd to [b:150pg00q]seven[/b:150pg00q] &amp; [b:150pg00q]eight[/b:150pg00q].\n[i:150pg00q](one is in the room - five is not)[/i:150pg00q]\n\nYou can execute look #object# and it'll run just fine, it'll output in the following order:\n#object#\n#@object#\n$getobjectname(#object#;game)$\n$objectproperty(#object#;alt)$\n\nFunny thing is, the #@object# doesn't get the real object name - while the $getobjectname()$ function [i:150pg00q]does[/i:150pg00q]..\nEven though, in the Quest help file, it describes the function as superceeded by #@object# (which should both resolve alt's/alias' -&gt; real names [b:150pg00q]OR[/b:150pg00q] real name -&gt; alias) .\n\nAlso the way Quest totally flakes out of the command when #@object# isn't in the current room is a bit flaky..\nI'm looking up the info on #@object# at the mo.\n\nAlso, the alias and name don't have to be the same here - although you can't resolve the alias -&gt; real name (type 'look two'), real name -&gt; alias [i:150pg00q]DOES[/i:150pg00q] work (type 'look one').\n\nAnd also;\n$getobjectname(#object#;game)$ returns a ! if #object# is the object name... This is surely wrong!\nHow do you know if the object actually exists or the user has typed something totally screwy like &quot;look wibblywob&quot; ?\n\n... Oh, and one last thing - if the alt tag uses ;'s, then it's understandable that it is kinda screwy as properties are seperated by ;'s.\nI would have prefered ,'s or |'s to seperate the alt's myself.\n\n.... Oh-oh-oh, and I don't really [i:150pg00q]like[/i:150pg00q] types, but understand that they can be useful in a runtime situation (assigning different stuff to objects on-the-fly during game, instead of having to give each property/whatever).\nCould be quite useful in multi-player games, where you just create a few types (clans/monsters/etc) and you can mix&amp;match different objects on the fly inside the game.\n\n.. Right, done.",
      "EditableFormat": "bbcode",
      "HTML": "Oh My God - you're totally correct.<br/><br/>#@object# only works in objects in the current room...<br/><br/>I've uploaded a demo to;<br/><a href=\"http&#58;//www&#46;compwhizz&#46;freeserve&#46;co&#46;uk/asldemos/alias&#46;asl\" rel=\"nofollow\">http&#58;//www&#46;compwhizz&#46;freeserve&#46;co&#46;uk/asldemos/alias&#46;asl</a><br/><br/>There's 2 objects;<br/><span style=\"font-weight:bold;\">one</span> and <span style=\"font-weight:bold;\">five</span>.<br/>One is alias'd to <span style=\"font-weight:bold;\">two</span>. And alt'd to <span style=\"font-weight:bold;\">three</span> &amp; <span style=\"font-weight:bold;\">four</span>.<br/>Five is alias'd to <span style=\"font-weight:bold;\">six</span>. And alt'd to <span style=\"font-weight:bold;\">seven</span> &amp; <span style=\"font-weight:bold;\">eight</span>.<br/><span style=\"font-style:italic;\">(one is in the room - five is not)</span><br/><br/>You can execute look #object# and it'll run just fine, it'll output in the following order:<br/>#object#<br/>#@object#<br/>$getobjectname(#object#;game)$<br/>$objectproperty(#object#;alt)$<br/><br/>Funny thing is, the #@object# doesn't get the real object name - while the $getobjectname()$ function <span style=\"font-style:italic;\">does</span>..<br/>Even though, in the Quest help file, it describes the function as superceeded by #@object# (which should both resolve alt's/alias' -&gt; real names <span style=\"font-weight:bold;\">OR</span> real name -&gt; alias) .<br/><br/>Also the way Quest totally flakes out of the command when #@object# isn't in the current room is a bit flaky..<br/>I'm looking up the info on #@object# at the mo.<br/><br/>Also, the alias and name don't have to be the same here - although you can't resolve the alias -&gt; real name (type 'look two'), real name -&gt; alias <span style=\"font-style:italic;\">DOES</span> work (type 'look one').<br/><br/>And also;<br/>$getobjectname(#object#;game)$ returns a ! if #object# is the object name... This is surely wrong!<br/>How do you know if the object actually exists or the user has typed something totally screwy like &quot;look wibblywob&quot; ?<br/><br/>... Oh, and one last thing - if the alt tag uses ;'s, then it's understandable that it is kinda screwy as properties are seperated by ;'s.<br/>I would have prefered ,'s or |'s to seperate the alt's myself.<br/><br/>.... Oh-oh-oh, and I don't really <span style=\"font-style:italic;\">like</span> types, but understand that they can be useful in a runtime situation (assigning different stuff to objects on-the-fly during game, instead of having to give each property/whatever).<br/>Could be quite useful in multi-player games, where you just create a few types (clans/monsters/etc) and you can mix&amp;match different objects on the fly inside the game.<br/><br/>.. Right, done.",
      "PostDate": "2006-07-08T10:59:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9396",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "I downloaded your asl.  Here's my output:\n\n[code:1xgnuys0]A Simple start room&#46; Plain white walls, and no doors&#46;\nYou have a feeling you will never see anything other than these 6 white sides to this cubist's heaven!\n\n&gt; look one\none\ntwo\n!\n!\n\n&gt; look two\ntwo\n\none\n!\n\n&gt; look five\nfive\nsix\n!\n!\n\n&gt; look six\nsix\n\nfive\n!\n\n&gt; look seven\nseven\n\nfive\n!\n\n&gt; look nine\nnine\n\n!\n!\n[/code:1xgnuys0]\n\nHuh.\n\nI never thought of using $getobjectname$.  Will have to fool around with this.\n\n[quote:1xgnuys0].... Oh-oh-oh, and I don't really like types, but understand that they can be useful in a runtime situation [/quote:1xgnuys0]\n\nThese are just [url=http&#58;//en&#46;wikipedia&#46;org/wiki/Class-based_OOP:1xgnuys0]classes[/url:1xgnuys0].  And they allow  [url=http&#58;//en&#46;wikipedia&#46;org/wiki/Inheritance_%28computer_science%29:1xgnuys0]inheritance[/url:1xgnuys0].  &quot;Object-Oriented Design (OOD) is a design method in which a system is modeled as a collection of cooperating objects and individual objects are treated as instances of a class within a class hierarchy.&quot; - Wiki.  Types are simply classes.  I guess it's all in the way you like to code.",
      "EditableFormat": "bbcode",
      "HTML": "I downloaded your asl.  Here's my output:<br/><br/><pre><code>A Simple start room&#46; Plain white walls, and no doors&#46;<br/>You have a feeling you will never see anything other than these 6 white sides to this cubist's heaven!<br/><br/>&gt; look one<br/>one<br/>two<br/>!<br/>!<br/><br/>&gt; look two<br/>two<br/><br/>one<br/>!<br/><br/>&gt; look five<br/>five<br/>six<br/>!<br/>!<br/><br/>&gt; look six<br/>six<br/><br/>five<br/>!<br/><br/>&gt; look seven<br/>seven<br/><br/>five<br/>!<br/><br/>&gt; look nine<br/>nine<br/><br/>!<br/>!<br/></code></pre><br/><br/>Huh.<br/><br/>I never thought of using $getobjectname$.  Will have to fool around with this.<br/><br/><blockquote><p>.... Oh-oh-oh, and I don't really like types, but understand that they can be useful in a runtime situation </p></blockquote><br/><br/>These are just <a href=\"http&#58;//en&#46;wikipedia&#46;org/wiki/Class-based_OOP\" rel=\"nofollow\">classes</a>.  And they allow  <a href=\"http&#58;//en&#46;wikipedia&#46;org/wiki/Inheritance_%28computer_science%29\" rel=\"nofollow\">inheritance</a>.  &quot;Object-Oriented Design (OOD) is a design method in which a system is modeled as a collection of cooperating objects and individual objects are treated as instances of a class within a class hierarchy.&quot; - Wiki.  Types are simply classes.  I guess it's all in the way you like to code.",
      "PostDate": "2006-07-08T12:19:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9402",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I didn't think Quest supported inheritance?\n\nI haven't really been able to find a use for types in Quest yet.. As I say, I don't really like them - i think they over-generalise the use of propeties/actions, in which case I'd have a default action and just one a property as a flag... Although, as I said before, I suppose it'd be good to create objects during run-time to follow certain other types of objects etc.\n\nYeah, now if you type 'grab one', 'grab two', 'grab five' and 'grab six' you'll see that five and six crap out because the object isn't in the current room - one doesn't work (because it's trying to find Alias' - and two properly works (except I used $objectalias()$ which doesn't work - it should be $displayname()$ .. I've updated the file correctly).",
      "EditableFormat": "bbcode",
      "HTML": "I didn't think Quest supported inheritance?<br/><br/>I haven't really been able to find a use for types in Quest yet.. As I say, I don't really like them - i think they over-generalise the use of propeties/actions, in which case I'd have a default action and just one a property as a flag... Although, as I said before, I suppose it'd be good to create objects during run-time to follow certain other types of objects etc.<br/><br/>Yeah, now if you type 'grab one', 'grab two', 'grab five' and 'grab six' you'll see that five and six crap out because the object isn't in the current room - one doesn't work (because it's trying to find Alias' - and two properly works (except I used $objectalias()$ which doesn't work - it should be $displayname()$ .. I've updated the file correctly).",
      "PostDate": "2006-07-08T13:26:59+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9404",
      "UserId": 0,
      "Username": "Freak",
      "UserAvatar": null,
      "UserGravatar": "325ed9ac125e00c9937be0d3aea0916d",
      "EditableText": "[quote=&quot;Tr0n&quot;:3se1onyg]quest deals with command structure totally differently from other sytems if I'm reading things like this right.\nTADS/inform use a verb-pronoun-noun-whatever language structure system, which is built-in.\n\nQues see's it as &quot;oh that's a line -does it match any command line which the programmer has entered?\nIf it does, than it goes off and executes the code.\nIf not, then it doesn't match any line and it gives out a &quot;I do not recognise that command&quot; line - which you can change.[/quote:3se1onyg]\n\nWell, ADRIFT uses a similar &quot;does it match any command line?&quot; process.\n\nThe parser is built into TADS2, but it's part of the library, and fully replacable, in TADS 3 / Inform 6 / Inform 7.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Tr0n wrote:</cite>quest deals with command structure totally differently from other sytems if I'm reading things like this right.<br/>TADS/inform use a verb-pronoun-noun-whatever language structure system, which is built-in.<br/><br/>Ques see's it as &quot;oh that's a line -does it match any command line which the programmer has entered?<br/>If it does, than it goes off and executes the code.<br/>If not, then it doesn't match any line and it gives out a &quot;I do not recognise that command&quot; line - which you can change.</blockquote><br/><br/>Well, ADRIFT uses a similar &quot;does it match any command line?&quot; process.<br/><br/>The parser is built into TADS2, but it's part of the library, and fully replacable, in TADS 3 / Inform 6 / Inform 7.",
      "PostDate": "2006-07-08T14:10:15+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9407",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "[quote:2krwmpdo]I didn't think Quest supported inheritance?[/quote:2krwmpdo]\n\nInheritance, as a concept, it certainly does.\n\n[quote:2krwmpdo]Inheritance â€” a mechanism for creating subclasses, inheritance provides a way to define a (sub)class as a specialization or subtype or extension of a more general class: Dog is a subclass of Canidae, and Collie is a subclass of the (sub)class Dog. A subclass inherits all the members of its superclass(es), but it can extend their behaviour and add new members. Inheritance is the &quot;is-a&quot; relationship: a Dog is a Canidae. This is in contrast to composition, the &quot;has-a&quot; relationship: a Dog has a mother (another Dog) and has a father, etc. -Wiki[/quote:2krwmpdo]\n\nYou don't create the subclass from the class (the object from the type), but it inherits all of the properties and actions of a type when you declare it belongs to that type in the definition block.\n\nThe fundamental concepts of OOP, besides inheritance (again Wiki):\n\n[quote:2krwmpdo]Class â€” the unit of definition of data and behavior (functionality) for some kind-of-thing. For example, the 'class of Dogs' might be a set which includes the various breeds of dogs. A class is the basis of modularity and structure in an object-oriented computer program. A class should typically be recognizable to a non-programmer familiar with the problem domain, and the code for a class should be (relatively) self-contained and independent (as should the code for any good non-OOP function). With such modularity, the structure of a program will correspond to the aspects of the problem that the program is intended to solve. This simplifies the mapping to and from the problem and program. [/quote:2krwmpdo]\n\nThese are asl Types.\n\n[quote:2krwmpdo]Object â€” an instance of a class, an object (for example, &quot;Lassie&quot; the Dog) is the run-time manifestation (instantiation) of a particular exemplar of a class. (For the class of dogs which contains breed types, an acceptable exemplar would only be the subclass 'collie'; &quot;Lassie&quot; would then be an object in that subclass.) Each object has its own data, though the code within a class (or a subclass or an object) may be shared for economy. [/quote:2krwmpdo]\n\nAny object that has at least one Type.\n\n[quote:2krwmpdo]Method (also known as message) â€” how code can use an object of some class. A method is a form of subroutine operating on a single object. Methods may be divided into queries returning the current state and commands changing it: a Dog could have a query Age to say how old it is, and command chase (Rabbit target) to start it chasing a rabbit. A method may also do both, but some authorities (e.g. Bertrand Meyer) recommend they be kept separate. Sometimes access to the data of an object is restricted to the methods of its class.[/quote:2krwmpdo] \n\nThese are asl Actions.\n\n[quote:2krwmpdo]Multiple inheritance â€“ a Dog is both a Pet and a Canidae â€“ is not always supported, as it can be hard both to implement and to use well. [/quote:2krwmpdo]\n\nAny object that has more than one Type.\n\n[quote:2krwmpdo]Encapsulation â€” ensuring that code outside a class sees only functional details of that class, but not implementation details. The latter are liable to change, and could allow a user to put an object in an inappropriate state. Encapsulation is achieved by specifying which classes may use the members of an object. The result is that each object exposes to any class a certain interface â€” those members accessible to that class. For example, an interface can ensure that puppies can only be added to an object of the class Dog by code in that class. Members are often specified as public, protected and private, determining whether they are available to all classes, sub-classes or only the defining class. Some languages go further: Java uses the protected keyword to restrict access also to classes in the same package, C# and VB.NET reserve some members to classes in the same assembly using keywords internal (C#) or Friend (VB.NET), and Eiffel allows one to specify which classes may access any member. [/quote:2krwmpdo]\n\nDon't think this is supported, in principle.\n\n[quote:2krwmpdo]Abstraction â€” the ability of a program to ignore the details of an object's (sub)class and work at a more generic level when appropriate; For example, &quot;Lassie&quot; the Dog may be treated as a Dog much of the time, but when appropriate she is abstracted to the level of Canidae (superclass of Dog) or Carnivora (superclass of Canidae), and so on. [/quote:2krwmpdo]\n\nWe can do this.\n\n[quote:2krwmpdo]Polymorphism â€” polymorphism is behavior that varies depending on the class in which the behavior is invoked, that is, two or more classes can react differently to the same message. For example, if Dog is commanded to speak this may elicit a Bark; if Pig is commanded to speak this may elicit an Oink. [/quote:2krwmpdo]\n\nWe can do this also.\n\n[quote:2krwmpdo]An object-based language is a language that has most of the properties of an object-oriented language, but may lack some. For example Visual Basic lacks inheritance, while a Prototype-based programming language relies on prototypes instead of classes to create objects.[/quote:2krwmpdo]\n\nQuest is an object-based language.\n\nIn OOP, &quot;Each object is capable of receiving messages, processing data, and sending messages to other objects. Each object can be viewed as an independent little machine or actor with a distinct role or responsibility.&quot; - Wiki\n\nIn an earlier post on [url=http&#58;//www&#46;axeuk&#46;com/phpBB2/viewtopic&#46;php?t=954&amp;highlight=:2krwmpdo]object interaction[/url:2krwmpdo], I was trying to achieve this by 'emitting actions' from one object to another.  This is really a messaging/information processing system, where each object is an independent little machine, responding to and manipulating information.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><p>I didn't think Quest supported inheritance?</p></blockquote><br/><br/>Inheritance, as a concept, it certainly does.<br/><br/><blockquote><p>Inheritance â€” a mechanism for creating subclasses, inheritance provides a way to define a (sub)class as a specialization or subtype or extension of a more general class: Dog is a subclass of Canidae, and Collie is a subclass of the (sub)class Dog. A subclass inherits all the members of its superclass(es), but it can extend their behaviour and add new members. Inheritance is the &quot;is-a&quot; relationship: a Dog is a Canidae. This is in contrast to composition, the &quot;has-a&quot; relationship: a Dog has a mother (another Dog) and has a father, etc. -Wiki</p></blockquote><br/><br/>You don't create the subclass from the class (the object from the type), but it inherits all of the properties and actions of a type when you declare it belongs to that type in the definition block.<br/><br/>The fundamental concepts of OOP, besides inheritance (again Wiki):<br/><br/><blockquote><p>Class â€” the unit of definition of data and behavior (functionality) for some kind-of-thing. For example, the 'class of Dogs' might be a set which includes the various breeds of dogs. A class is the basis of modularity and structure in an object-oriented computer program. A class should typically be recognizable to a non-programmer familiar with the problem domain, and the code for a class should be (relatively) self-contained and independent (as should the code for any good non-OOP function). With such modularity, the structure of a program will correspond to the aspects of the problem that the program is intended to solve. This simplifies the mapping to and from the problem and program. </p></blockquote><br/><br/>These are asl Types.<br/><br/><blockquote><p>Object â€” an instance of a class, an object (for example, &quot;Lassie&quot; the Dog) is the run-time manifestation (instantiation) of a particular exemplar of a class. (For the class of dogs which contains breed types, an acceptable exemplar would only be the subclass 'collie'; &quot;Lassie&quot; would then be an object in that subclass.) Each object has its own data, though the code within a class (or a subclass or an object) may be shared for economy. </p></blockquote><br/><br/>Any object that has at least one Type.<br/><br/><blockquote><p>Method (also known as message) â€” how code can use an object of some class. A method is a form of subroutine operating on a single object. Methods may be divided into queries returning the current state and commands changing it: a Dog could have a query Age to say how old it is, and command chase (Rabbit target) to start it chasing a rabbit. A method may also do both, but some authorities (e.g. Bertrand Meyer) recommend they be kept separate. Sometimes access to the data of an object is restricted to the methods of its class.</p></blockquote> <br/><br/>These are asl Actions.<br/><br/><blockquote><p>Multiple inheritance â€“ a Dog is both a Pet and a Canidae â€“ is not always supported, as it can be hard both to implement and to use well. </p></blockquote><br/><br/>Any object that has more than one Type.<br/><br/><blockquote><p>Encapsulation â€” ensuring that code outside a class sees only functional details of that class, but not implementation details. The latter are liable to change, and could allow a user to put an object in an inappropriate state. Encapsulation is achieved by specifying which classes may use the members of an object. The result is that each object exposes to any class a certain interface â€” those members accessible to that class. For example, an interface can ensure that puppies can only be added to an object of the class Dog by code in that class. Members are often specified as public, protected and private, determining whether they are available to all classes, sub-classes or only the defining class. Some languages go further: Java uses the protected keyword to restrict access also to classes in the same package, C# and VB.NET reserve some members to classes in the same assembly using keywords internal (C#) or Friend (VB.NET), and Eiffel allows one to specify which classes may access any member. </p></blockquote><br/><br/>Don't think this is supported, in principle.<br/><br/><blockquote><p>Abstraction â€” the ability of a program to ignore the details of an object's (sub)class and work at a more generic level when appropriate; For example, &quot;Lassie&quot; the Dog may be treated as a Dog much of the time, but when appropriate she is abstracted to the level of Canidae (superclass of Dog) or Carnivora (superclass of Canidae), and so on. </p></blockquote><br/><br/>We can do this.<br/><br/><blockquote><p>Polymorphism â€” polymorphism is behavior that varies depending on the class in which the behavior is invoked, that is, two or more classes can react differently to the same message. For example, if Dog is commanded to speak this may elicit a Bark; if Pig is commanded to speak this may elicit an Oink. </p></blockquote><br/><br/>We can do this also.<br/><br/><blockquote><p>An object-based language is a language that has most of the properties of an object-oriented language, but may lack some. For example Visual Basic lacks inheritance, while a Prototype-based programming language relies on prototypes instead of classes to create objects.</p></blockquote><br/><br/>Quest is an object-based language.<br/><br/>In OOP, &quot;Each object is capable of receiving messages, processing data, and sending messages to other objects. Each object can be viewed as an independent little machine or actor with a distinct role or responsibility.&quot; - Wiki<br/><br/>In an earlier post on <a href=\"http&#58;//www&#46;axeuk&#46;com/phpBB2/viewtopic&#46;php?t=954&amp;highlight=\" rel=\"nofollow\">object interaction</a>, I was trying to achieve this by 'emitting actions' from one object to another.  This is really a messaging/information processing system, where each object is an independent little machine, responding to and manipulating information.",
      "PostDate": "2006-07-08T14:53:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9422",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "I know what object types/classes are <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P --> .\nI know what OOP is.\nI program ([i:100530c3]normally[/i:100530c3]) in C++.\n\nI thought type-inheritance was where you could have one type 'inheriting' the actions/properties (methods/properties/the-other-third-thing which might only be in VB but is like methods) of another type - but then further defines that type... Just like it says in your quote.\n\nIe, you have a generic &quot;techer&quot; type, and then a &quot;headmaster&quot; type - inheriting that of the normal teacher and then further defining extra properties.\n\nQuest doesn't allow types to be made from previous types.\n\nEncapsulation in Quest isn't supported - no.\nThere is no 'private' area to hide things in. Quest makes everything globally accessible.\n\nHow did you turn my question about Quest's support for inheritance and the fact I don't find use for them into explaining classes/methods/properties/that-other-one-I-can't-remember?",
      "EditableFormat": "bbcode",
      "HTML": "I know what object types/classes are <!-- s:P --><img src=\"{SMILIES_PATH}/icon_razz.gif\" alt=\":P\" title=\"Razz\" /><!-- s:P --> .<br/>I know what OOP is.<br/>I program (<span style=\"font-style:italic;\">normally</span>) in C++.<br/><br/>I thought type-inheritance was where you could have one type 'inheriting' the actions/properties (methods/properties/the-other-third-thing which might only be in VB but is like methods) of another type - but then further defines that type... Just like it says in your quote.<br/><br/>Ie, you have a generic &quot;techer&quot; type, and then a &quot;headmaster&quot; type - inheriting that of the normal teacher and then further defining extra properties.<br/><br/>Quest doesn't allow types to be made from previous types.<br/><br/>Encapsulation in Quest isn't supported - no.<br/>There is no 'private' area to hide things in. Quest makes everything globally accessible.<br/><br/>How did you turn my question about Quest's support for inheritance and the fact I don't find use for them into explaining classes/methods/properties/that-other-one-I-can't-remember?",
      "PostDate": "2006-07-09T00:24:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9448",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Well, I just thought I'd put inheritance in context.  I never presumed you did not know OOP or its fundamentals, just that it is so easy to get confused with contextual distinctions.  This way, we have the same definitions to go off.  Trust me - I've been in too many discussions where it turned out both parties were saying the exact same thing.\n\n[quote:27yiwijr]I thought type-inheritance was where you could have one type 'inheriting' the actions/properties (methods/properties/the-other-third-thing which might only be in VB but is like methods) of another type - but then further defines that type... Just like it says in your quote.[/quote:27yiwijr] \n\nI have been doing this.  Perhaps I should check if it's working.  A backpack is a Container type and a Wearable type; a Container type is a MassObject type; a Wearable type is an ItemObject type; an ItemObject type is a MassObject type.",
      "EditableFormat": "bbcode",
      "HTML": "Well, I just thought I'd put inheritance in context.  I never presumed you did not know OOP or its fundamentals, just that it is so easy to get confused with contextual distinctions.  This way, we have the same definitions to go off.  Trust me - I've been in too many discussions where it turned out both parties were saying the exact same thing.<br/><br/><blockquote><p>I thought type-inheritance was where you could have one type 'inheriting' the actions/properties (methods/properties/the-other-third-thing which might only be in VB but is like methods) of another type - but then further defines that type... Just like it says in your quote.</p></blockquote> <br/><br/>I have been doing this.  Perhaps I should check if it's working.  A backpack is a Container type and a Wearable type; a Container type is a MassObject type; a Wearable type is an ItemObject type; an ItemObject type is a MassObject type.",
      "PostDate": "2006-07-09T13:32:37+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9452",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Hi\n\n[quote:3njt9l3y]Quest doesn't allow types to be made from previous types. [/quote:3njt9l3y]\n\nUnless I'm completely missing what you mean, I'd have to say that's wrong!\n\nMy typelib uses types that are derived from other types and inherit actions / properties etc.  All the clothing types for instance are derived from the basic TLTclothing type.\n\nAl",
      "EditableFormat": "bbcode",
      "HTML": "Hi<br/><br/><blockquote><p>Quest doesn't allow types to be made from previous types. </p></blockquote><br/><br/>Unless I'm completely missing what you mean, I'd have to say that's wrong!<br/><br/>My typelib uses types that are derived from other types and inherit actions / properties etc.  All the clothing types for instance are derived from the basic TLTclothing type.<br/><br/>Al",
      "PostDate": "2006-07-09T14:01:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9472",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "What version of Quest did that functionality get added?\nLast time I remember, Quest didn't support inheritance! <!-- s:shock: --><img src=\"{SMILIES_PATH}/icon_eek.gif\" alt=\":shock:\" title=\"Shocked\" /><!-- s:shock: -->",
      "EditableFormat": "bbcode",
      "HTML": "What version of Quest did that functionality get added?<br/>Last time I remember, Quest didn't support inheritance! <!-- s:shock: --><img src=\"{SMILIES_PATH}/icon_eek.gif\" alt=\":shock:\" title=\"Shocked\" /><!-- s:shock: -->",
      "PostDate": "2006-07-09T19:06:05+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9473",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "It's probably just that it supports inheritance [i:3qy8rway]in principle[/i:3qy8rway], but has never explicitly been touted as doing so.",
      "EditableFormat": "bbcode",
      "HTML": "It's probably just that it supports inheritance <span style=\"font-style:italic;\">in principle</span>, but has never explicitly been touted as doing so.",
      "PostDate": "2006-07-09T19:13:59+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9510",
      "UserId": 0,
      "Username": "Arbutus",
      "UserAvatar": null,
      "UserGravatar": "8592c0fe872d1d1e7468550ad6cf381c",
      "EditableText": "[url:1xgtfb4t]http&#58;//www&#46;axeuk&#46;com/quest/developer/asl/qdk-types&#46;htm[/url:1xgtfb4t]\n\n[quote:1xgtfb4t]Types: Specify here any types you want to inherit. We've discussed inheriting types in objects, but you can also inherit types into other types. For example, we might make a &quot;poison&quot; type, which would inherit everything from &quot;edible&quot; but provide its own &quot;eat&quot; action which would kill the player or decrease the player's health.[/quote:1xgtfb4t]\n\nI've used inherited sub-types and they work fine.",
      "EditableFormat": "bbcode",
      "HTML": "<a href=\"http&#58;//www&#46;axeuk&#46;com/quest/developer/asl/qdk-types&#46;htm\" rel=\"nofollow\">http&#58;//www&#46;axeuk&#46;com/quest/developer/asl/qdk-types&#46;htm</a><br/><br/><blockquote><p>Types: Specify here any types you want to inherit. We've discussed inheriting types in objects, but you can also inherit types into other types. For example, we might make a &quot;poison&quot; type, which would inherit everything from &quot;edible&quot; but provide its own &quot;eat&quot; action which would kill the player or decrease the player's health.</p></blockquote><br/><br/>I've used inherited sub-types and they work fine.",
      "PostDate": "2006-07-10T01:52:02+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9512",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "And there you have it.",
      "EditableFormat": "bbcode",
      "HTML": "And there you have it.",
      "PostDate": "2006-07-10T02:04:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9528",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Well blow me down, and call me Mary Elby!",
      "EditableFormat": "bbcode",
      "HTML": "Well blow me down, and call me Mary Elby!",
      "PostDate": "2006-07-10T11:12:55+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "9534",
      "UserId": 0,
      "Username": "Overcat",
      "UserAvatar": null,
      "UserGravatar": "3958f867d73b44faed6e01f35e74c093",
      "EditableText": "Nice to meet you, Mary.",
      "EditableFormat": "bbcode",
      "HTML": "Nice to meet you, Mary.",
      "PostDate": "2006-07-10T12:14:14+01:00",
      "LastEditDate": null
    }
  ]
}
