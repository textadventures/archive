{
  "Topic": {
    "TopicId": "avmhzihj8ewfz03jth8dmw",
    "ForumId": "10",
    "Title": "How to check for a \"weapon\" attribute in a combat scenario?",
    "LastUpdated": "2021-03-13T02:54:35.414602Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e968ad3d-19ec-4761-b585-2aae9a5c7ec7",
      "UserId": 532780,
      "Username": "originOfcarmetry",
      "AvatarUrl": "https://i.imgur.com/ZTcPqWxb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello, I'm very new to Quest and have been setting up a very simple combat scenario to play around with that's mostly based off of the \"How to use commands\" page (only using the GUI editor, not entirely ready to dive into the coding part yet). I don't understand the expression ```player.weapon=null``` (forgive my post formatting if that's incorrect), mainly because I don't understand what allows an object to apply to it as a weapon. Is it attribute related?\r\n\r\nThanks in advance",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello, I'm very new to Quest and have been setting up a very simple combat scenario to play around with that's mostly based off of the \"How to use commands\" page (only using the GUI editor, not entirely ready to dive into the coding part yet). I don't understand the expression <code>player.weapon=null</code> (forgive my post formatting if that's incorrect), mainly because I don't understand what allows an object to apply to it as a weapon. Is it attribute related?</p>\n<p>Thanks in advance</p>\n\n",
      "PostDate": "2021-03-13T02:54:35.414602Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0bd68232-54b2-42a5-833e-486ae625a176",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK… `player.weapon` just means the `weapon` attribute of the object named `player`.\r\n\r\n<small>This is actually a bad habit to get into (`game.pov.weapon` would be better), but it probably won't make a difference on your first game. Basically, `game.pov` means \"the character the player is currently controlling\", even if that character's name isn't \"player\"</small>\r\n\r\n`null` is a special value which technically counts as an object. If you look at an attribute which hasn't been set, you'll get the value `null`  back.\r\n\r\nAnd the `=` operator in an expression comparest the things on either side of it to see if they're the same.\r\n\r\nSo, the expression `player.weapon = null` will return:\r\n* `true` if the player's `weapon` attribute is not set\r\n* `false` if the player's `weapon` attribute is an object\r\n* an error if the player has a `weapon` attribute which is a number, string, list, or anything else that isn't an object (because `null` is technically an object, and `=` tends to have problems comparing things that are different types).\r\n\r\nThat's assuming that the expression you gave is actually an expression (something that appears in the GUI in a box that says it's an expression). If you had `player.weapon = null` on a line of code on its own, then that is an *assignment* not an *expression*, so the `=` works differently. In this case, it sets the player's `weapon` attribute to the result of the expression `null`; which basically deletes that attribute.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK… <code>player.weapon</code> just means the <code>weapon</code> attribute of the object named <code>player</code>.</p>\n<p><small>This is actually a bad habit to get into (<code>game.pov.weapon</code> would be better), but it probably won't make a difference on your first game. Basically, <code>game.pov</code> means \"the character the player is currently controlling\", even if that character's name isn't \"player\"</small></p>\n<p><code>null</code> is a special value which technically counts as an object. If you look at an attribute which hasn't been set, you'll get the value <code>null</code>  back.</p>\n<p>And the <code>=</code> operator in an expression comparest the things on either side of it to see if they're the same.</p>\n<p>So, the expression <code>player.weapon = null</code> will return:</p>\n<ul>\n<li><code>true</code> if the player's <code>weapon</code> attribute is not set</li>\n<li><code>false</code> if the player's <code>weapon</code> attribute is an object</li>\n<li>an error if the player has a <code>weapon</code> attribute which is a number, string, list, or anything else that isn't an object (because <code>null</code> is technically an object, and <code>=</code> tends to have problems comparing things that are different types).</li>\n</ul>\n<p>That's assuming that the expression you gave is actually an expression (something that appears in the GUI in a box that says it's an expression). If you had <code>player.weapon = null</code> on a line of code on its own, then that is an <em>assignment</em> not an <em>expression</em>, so the <code>=</code> works differently. In this case, it sets the player's <code>weapon</code> attribute to the result of the expression <code>null</code>; which basically deletes that attribute.</p>\n\n",
      "PostDate": "2021-03-13T16:09:34.64062Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
