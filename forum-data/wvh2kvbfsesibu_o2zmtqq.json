{
  "Topic": {
    "TopicId": "wvh2kvbfsesibu_o2zmtqq",
    "ForumId": "18",
    "Title": "Removing those Pesky Utility rooms from lists results! Using Room-Types to clean things up a bit.",
    "LastUpdated": "2023-06-11T05:37:23.6343011Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "1d635cbb-41c0-4e72-985b-fe537a6336a4",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you're like me, you owe a lot to previous coders like Pixie and Mrangel et al for coming up with great innovations and libraries, then sharing them with us.  Many of these great innovations include having rooms \"outside the game\" for storing stuff, making weather, having conversations, etc.\r\n\r\nBut then if you go to get a list of AllRooms for some reason, they all show up.  One easy example is K.V.'s  \"Real XYZZY\" posted years ago below.  Super useful bit of Zork ingenuity for testing out your game and being able to go anywhere instantly. \r\n\r\nDo you really want your player to see all those rooms in the teleport list while you're testing out your game?  Does he have to go to \"x_shopinventory\" or \"Kobold_conversations\"?\r\n\r\nSo I decided to type all these rooms and call them \"gamestorage\"\r\n\r\ntype name=\"gamestorage\">\r\n    descprefix type=\"string\"></descprefix>\r\n    objectslistprefix>storing</objectslistprefix>\r\n    dark />\r\n    exitslistprefix type=\"string\"></exitslistprefix>\r\n    gamestorageme type=\"script\">\r\n      list add (game.gamestorage, this)\r\n    /gamestorageme>\r\n    attr name=\"grid_fill\">Black</attr>\r\n    usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    attr name=\"grid_label\">{this.name}</attr>\r\n  /type>\r\n\r\nAnd you can see in there that the new type has a convenient script attribute to add it to the gamestorage list if called.  It's named gamestorageme.  It's part of an older idea I had, before I saw I could filter the lists by type.  Maybe it can still prove useful for random room generation or something.\r\n\r\nI added this in the  Game's start script:\r\n\r\ngame.gamestorage = NewObjectList()\r\nforeach (obj, FilterByType (AllRooms(), \"gamestorage\")) {\r\n  list add (game.gamestorage, obj)\r\n}\r\n\r\n\r\nSo now, modifying the XYZZY command can exclude the gamestorage type from the rooms list!  \r\n\r\nNow that I can do this, I'm wondering if it can be used to filter \"noise\" from some of the library dropdowns in CombatLib?\r\n\r\nThere are two options I found for modifying Pixie's XYZZY code from K.V's forum post so that it now filters out those gamestorage type rooms:\r\n\r\nroom = ListExclude(AllRooms(), FilterByType (AllRooms(), \"gamestorage\"))\r\nShowMenu (\"{once:Surprisingly, a menu appears.<br/><br/>}Where to?\", room, true) {\r\n  MoveObject (game.pov, GetObject(result))\r\n}\r\n\r\nor cleaner after the list is made\r\n\r\nroom = ListExclude(AllRooms(), game.gamestorage)\r\nShowMenu (\"{once:Surprisingly, a menu appears.<br/><br/>}Where to?\", room, true) {\r\n  MoveObject (game.pov, GetObject(result))\r\n}\r\n\r\n\r\nSo now that the gamestorage rooms are typed, and listed, they can be removed from results when they're just clutter.  Or added somewhere if needed.\r\n\r\nWith the gamescript auto-listing them, you don't have to filter the rooms list by type if you simply want a list of rooms with that type.\r\n\r\nSo the opposite, an XYZZY command that would only produce gamestorage type rooms looks like.\r\n\r\nShowMenu (\"{once:Surprisingly, a menu appears.<br/><br/>}Where to?\", game.gamestorage, true) {\r\n  MoveObject (game.pov, GetObject(result))\r\n}\r\n\r\nIt's exciting and useful to me, I'm already planning to work out other implications for other types I'm going to make.\r\n\r\nBut hopefully it turns out useful to you.  Of course, to my Heros here in the quest forums, it probably just reads like a tutorial on common sense haha.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If you're like me, you owe a lot to previous coders like Pixie and Mrangel et al for coming up with great innovations and libraries, then sharing them with us.  Many of these great innovations include having rooms \"outside the game\" for storing stuff, making weather, having conversations, etc.</p>\n<p>But then if you go to get a list of AllRooms for some reason, they all show up.  One easy example is K.V.'s  \"Real XYZZY\" posted years ago below.  Super useful bit of Zork ingenuity for testing out your game and being able to go anywhere instantly.</p>\n<p>Do you really want your player to see all those rooms in the teleport list while you're testing out your game?  Does he have to go to \"x_shopinventory\" or \"Kobold_conversations\"?</p>\n<p>So I decided to type all these rooms and call them \"gamestorage\"</p>\n<p>type name=\"gamestorage\"&gt;<br>\ndescprefix type=\"string\"&gt;<br>\nobjectslistprefix&gt;storing<br>\ndark /&gt;<br>\nexitslistprefix type=\"string\"&gt;<br>\ngamestorageme type=\"script\"&gt;<br>\nlist add (game.gamestorage, this)<br>\n/gamestorageme&gt;<br>\nattr name=\"grid_fill\"&gt;Black<br>\nusedefaultprefix type=\"boolean\"&gt;false<br>\nattr name=\"grid_label\"&gt;{this.name}<br>\n/type&gt;</p>\n<p>And you can see in there that the new type has a convenient script attribute to add it to the gamestorage list if called.  It's named gamestorageme.  It's part of an older idea I had, before I saw I could filter the lists by type.  Maybe it can still prove useful for random room generation or something.</p>\n<p>I added this in the  Game's start script:</p>\n<p>game.gamestorage = NewObjectList()<br>\nforeach (obj, FilterByType (AllRooms(), \"gamestorage\")) {<br>\nlist add (game.gamestorage, obj)<br>\n}</p>\n<p>So now, modifying the XYZZY command can exclude the gamestorage type from the rooms list!</p>\n<p>Now that I can do this, I'm wondering if it can be used to filter \"noise\" from some of the library dropdowns in CombatLib?</p>\n<p>There are two options I found for modifying Pixie's XYZZY code from K.V's forum post so that it now filters out those gamestorage type rooms:</p>\n<p>room = ListExclude(AllRooms(), FilterByType (AllRooms(), \"gamestorage\"))<br>\nShowMenu (\"{once:Surprisingly, a menu appears.<br><br>}Where to?\", room, true) {<br>\nMoveObject (game.pov, GetObject(result))<br>\n}</p>\n<p>or cleaner after the list is made</p>\n<p>room = ListExclude(AllRooms(), game.gamestorage)<br>\nShowMenu (\"{once:Surprisingly, a menu appears.<br><br>}Where to?\", room, true) {<br>\nMoveObject (game.pov, GetObject(result))<br>\n}</p>\n<p>So now that the gamestorage rooms are typed, and listed, they can be removed from results when they're just clutter.  Or added somewhere if needed.</p>\n<p>With the gamescript auto-listing them, you don't have to filter the rooms list by type if you simply want a list of rooms with that type.</p>\n<p>So the opposite, an XYZZY command that would only produce gamestorage type rooms looks like.</p>\n<p>ShowMenu (\"{once:Surprisingly, a menu appears.<br><br>}Where to?\", game.gamestorage, true) {<br>\nMoveObject (game.pov, GetObject(result))<br>\n}</p>\n<p>It's exciting and useful to me, I'm already planning to work out other implications for other types I'm going to make.</p>\n<p>But hopefully it turns out useful to you.  Of course, to my Heros here in the quest forums, it probably just reads like a tutorial on common sense haha.</p>\n\n",
      "PostDate": "2023-06-11T05:37:23.6343011Z",
      "LastEditDate": "2023-06-11T06:11:03.3392031Z",
      "link": null
    },
    {
      "PostId": "321ad85d-db87-458e-956c-a9b711e5017f",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Clean command from the test game:\r\n\r\n> XYZZY\r\nSurprisingly, a menu appears.\r\n\r\nWhere to?\r\n1: room\r\n2: shop\r\n3: shop stockroom\r\n4: frontyard\r\n5: backyard\r\n6: charactergeneration\r\n\r\nOr its opposite:\r\n\r\n> XYZZYgamestorage\r\nWhere to?\r\n1: weathers\r\n2: the gale of the thunderstorm pushes you now, as the downpour reaches its strongest yet, and there is frequent lighnting. you cannot hear anything except frequent peals of thunder.\r\n3: lesswindts\r\n4: a shaft of sunlight breaks through the clouds of this thunderstorm. is that? yes! you'd better believe that there's now a rainbow visible amidtst the lightning.\r\n5: questroom\r\n6: verses_known\r\n7: verses_forgotten\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Clean command from the test game:</p>\n<blockquote>\n<p>XYZZY<br>\nSurprisingly, a menu appears.</p>\n</blockquote>\n<p>Where to?<br>\n1: room<br>\n2: shop<br>\n3: shop stockroom<br>\n4: frontyard<br>\n5: backyard<br>\n6: charactergeneration</p>\n<p>Or its opposite:</p>\n<blockquote>\n<p>XYZZYgamestorage<br>\nWhere to?<br>\n1: weathers<br>\n2: the gale of the thunderstorm pushes you now, as the downpour reaches its strongest yet, and there is frequent lighnting. you cannot hear anything except frequent peals of thunder.<br>\n3: lesswindts<br>\n4: a shaft of sunlight breaks through the clouds of this thunderstorm. is that? yes! you'd better believe that there's now a rainbow visible amidtst the lightning.<br>\n5: questroom<br>\n6: verses_known<br>\n7: verses_forgotten</p>\n</blockquote>\n\n",
      "PostDate": "2023-06-11T05:51:05.7315511Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c256573c-6f33-4148-b507-188e5a681033",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "AllRooms is already doing a filter to exclude everything that doesn't have `isroom` true.\r\n\r\nRather than creating a whole new attribute, wouldn't it be simpler to set those containers to type \"Object\" rather than \"Room\"? Or if they must be rooms for some reason, just set their `isroom` attribute to false",
      "EditableFormat": "markdown",
      "HTML": "<p>AllRooms is already doing a filter to exclude everything that doesn't have <code>isroom</code> true.</p>\n<p>Rather than creating a whole new attribute, wouldn't it be simpler to set those containers to type \"Object\" rather than \"Room\"? Or if they must be rooms for some reason, just set their <code>isroom</code> attribute to false</p>\n\n",
      "PostDate": "2023-06-11T15:20:13.9716107Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b7abbb60-d0ee-40fd-b53e-d54d9f1e4bce",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You know, Mr. Angel....  I had never considered it.\r\n\r\nI just used the \"room\" method as it came because that's how Pixie introduced it and uses it in libraries.  I never considered what might happen if \"isroom\" were set to false or if I had decided to use containers instead... hmmm.\r\n\r\nIf \"isroom\" is false, will the object still have exits and will they work?  One of the things Pixie's weather library does is have a turnscript that sort of travels from room to room to get the different weather descriptions by randomly using an exit.  So exits would be a must, or else changing the script to move from container to container I suppose.  But it would be harder to \"lock the door\" to certain weather patterns mid-game if using containers and a move script.\r\n\r\nCan you scope the descriptions on objects in containers to make lookable weather for a player?  I suppose you probably could, huh?\r\n\r\nYeah, that one would just look differently. hmmm.\r\n\r\nI honestly never thought to have a room that wasn't an \"isroom.\"\r\n\r\nI'm still excited that I learned how to do this with the code.  Using lists and eventually dictionaries I think is going to be something very helpful as I move more and more from concept to actually growing and building the game.\r\n\r\nI figured it would be pretty simple to you veteran folks though! Mrangel is probably right, it could be simpler to remove your utility rooms out of \"AllRooms()\" by removing \"isroom.\"  Still, I'm liking types and lists for sorting all my stuff during the \"developer\" phase.\r\n\r\nIf nothing else, when I'm looking to build a conversation, and forgot where the repository happens to be for a certain situation, or forgot where I'm hiding this or that type of thing, I could do my XYZZYgamestorage and pull up a quick list of just those rooms to look through haha.  Since I've already coded it all anyway.\r\n\r\nIn my \"real\" game, the list is much bigger and currently looks like the below and will grow exponentially from here I think.\r\n\r\nWhere to?\r\n1: progrooms\r\n2: convlibtopics\r\n3: she_topics\r\n4: holy spirit_topics\r\n5: francois frederick_topics\r\n6: nino caposki cat_topics\r\n7: gamemaster_topics\r\n8: uptopicsstore\r\n9: combadge_topics\r\n10: apothecarykeyworld_topics\r\n11: vagabond_topics\r\n12: topics wings\r\n13: twgamemaster\r\n14: climate\r\n15: the sun is shining, the sky is blue, the grass is green.\r\n16: the weather is pleasant. a few white clouds dot the sky.\r\n17: thewings\r\n18: shopstocks\r\n19: she stockroom\r\n20: apothecaryshop stockroom\r\n21: gamestorage\r\n22: exits room\r\n23: gamequests\r\n24: keyworldquests\r\n25: islandworldquests\r\n26: sheolquests\r\n27: faithworldquests\r\n28: invpanestuff\r\n29: verses_known\r\n30: verses_forgotten\r\n31: verses_waiting\r\n32: sheol\r\n33: keyworld\r\n34: islandworld\r\n35: faithland\r\n\r\nThere are still several worlds to add, myriads of talking folks, and at least a couple of different systems for interacting with book types.  The verses sections here are Bible ones, but I'm also going to be adding Qur'an type verses, Jewish Bible type verses, and a type for Hindu Scriptures.  Etc, Etc, and onward.  I might decide to develop each world separately as it's own game to a point while building them, but they're really each meant to be discoverable from the Keyworld depending your choices and type of player you are, whether you find the key objects, etc.  Anyway, all that rambling to say that I'm going to have a lot of these \"other\" kinds of rooms and objects, so this type of coding is at least an interesting crutch/milestone for me.\r\n\r\nIt might be easy and smart just before publication to set this particular type's \"isroom\" to false, and then remove these extra little bits of code. \r\n\r\nI heard somewhere once that the really expert coders are engineer minded and make the most efficient codes and there's less risk of conflict.\r\n\r\nI think you strike me as one of those with a great head for finding a simpler way to do things Mrangel.  Thanks for that!",
      "EditableFormat": "markdown",
      "HTML": "<p>You know, Mr. Angel....  I had never considered it.</p>\n<p>I just used the \"room\" method as it came because that's how Pixie introduced it and uses it in libraries.  I never considered what might happen if \"isroom\" were set to false or if I had decided to use containers instead... hmmm.</p>\n<p>If \"isroom\" is false, will the object still have exits and will they work?  One of the things Pixie's weather library does is have a turnscript that sort of travels from room to room to get the different weather descriptions by randomly using an exit.  So exits would be a must, or else changing the script to move from container to container I suppose.  But it would be harder to \"lock the door\" to certain weather patterns mid-game if using containers and a move script.</p>\n<p>Can you scope the descriptions on objects in containers to make lookable weather for a player?  I suppose you probably could, huh?</p>\n<p>Yeah, that one would just look differently. hmmm.</p>\n<p>I honestly never thought to have a room that wasn't an \"isroom.\"</p>\n<p>I'm still excited that I learned how to do this with the code.  Using lists and eventually dictionaries I think is going to be something very helpful as I move more and more from concept to actually growing and building the game.</p>\n<p>I figured it would be pretty simple to you veteran folks though! Mrangel is probably right, it could be simpler to remove your utility rooms out of \"AllRooms()\" by removing \"isroom.\"  Still, I'm liking types and lists for sorting all my stuff during the \"developer\" phase.</p>\n<p>If nothing else, when I'm looking to build a conversation, and forgot where the repository happens to be for a certain situation, or forgot where I'm hiding this or that type of thing, I could do my XYZZYgamestorage and pull up a quick list of just those rooms to look through haha.  Since I've already coded it all anyway.</p>\n<p>In my \"real\" game, the list is much bigger and currently looks like the below and will grow exponentially from here I think.</p>\n<p>Where to?<br>\n1: progrooms<br>\n2: convlibtopics<br>\n3: she_topics<br>\n4: holy spirit_topics<br>\n5: francois frederick_topics<br>\n6: nino caposki cat_topics<br>\n7: gamemaster_topics<br>\n8: uptopicsstore<br>\n9: combadge_topics<br>\n10: apothecarykeyworld_topics<br>\n11: vagabond_topics<br>\n12: topics wings<br>\n13: twgamemaster<br>\n14: climate<br>\n15: the sun is shining, the sky is blue, the grass is green.<br>\n16: the weather is pleasant. a few white clouds dot the sky.<br>\n17: thewings<br>\n18: shopstocks<br>\n19: she stockroom<br>\n20: apothecaryshop stockroom<br>\n21: gamestorage<br>\n22: exits room<br>\n23: gamequests<br>\n24: keyworldquests<br>\n25: islandworldquests<br>\n26: sheolquests<br>\n27: faithworldquests<br>\n28: invpanestuff<br>\n29: verses_known<br>\n30: verses_forgotten<br>\n31: verses_waiting<br>\n32: sheol<br>\n33: keyworld<br>\n34: islandworld<br>\n35: faithland</p>\n<p>There are still several worlds to add, myriads of talking folks, and at least a couple of different systems for interacting with book types.  The verses sections here are Bible ones, but I'm also going to be adding Qur'an type verses, Jewish Bible type verses, and a type for Hindu Scriptures.  Etc, Etc, and onward.  I might decide to develop each world separately as it's own game to a point while building them, but they're really each meant to be discoverable from the Keyworld depending your choices and type of player you are, whether you find the key objects, etc.  Anyway, all that rambling to say that I'm going to have a lot of these \"other\" kinds of rooms and objects, so this type of coding is at least an interesting crutch/milestone for me.</p>\n<p>It might be easy and smart just before publication to set this particular type's \"isroom\" to false, and then remove these extra little bits of code.</p>\n<p>I heard somewhere once that the really expert coders are engineer minded and make the most efficient codes and there's less risk of conflict.</p>\n<p>I think you strike me as one of those with a great head for finding a simpler way to do things Mrangel.  Thanks for that!</p>\n\n",
      "PostDate": "2023-06-11T21:36:15.281315Z",
      "LastEditDate": "2023-06-11T21:42:41.7035331Z",
      "link": null
    },
    {
      "PostId": "76970929-424a-417d-b3c2-5a0c1d9dda79",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> If \"isroom\" is false, will the object still have exits and will they work?\r\n\r\nYes. `isroom` is a recent addition, which is only used by the `AllRooms` function.\r\n\r\nThere is nowhere in the core code that cares if something is an object is a room. (The core code treats any object the player is inside as a room, and anything the player isn't inside as an object; prior to the addition of the `isroom` attribute in Quest 5.7.2, the \"Room\"/\"Object\" drop down in the editor only controlled which tabs were shown in the editor)\r\n\r\nBut in the examples you give, like the stock room for the store, weather, conversation trees etc… do they need to have exits? Hmm… I can see a way you could use exits for conversation trees; it's not the way I would do it, but I guess you could. In that case, you could just manually override the `isroom` attribute to make it false, so that you see the \"Exits\" tab in the editor, but it isn't treated as a room by `AllRooms`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>If \"isroom\" is false, will the object still have exits and will they work?</p>\n</blockquote>\n<p>Yes. <code>isroom</code> is a recent addition, which is only used by the <code>AllRooms</code> function.</p>\n<p>There is nowhere in the core code that cares if something is an object is a room. (The core code treats any object the player is inside as a room, and anything the player isn't inside as an object; prior to the addition of the <code>isroom</code> attribute in Quest 5.7.2, the \"Room\"/\"Object\" drop down in the editor only controlled which tabs were shown in the editor)</p>\n<p>But in the examples you give, like the stock room for the store, weather, conversation trees etc… do they need to have exits? Hmm… I can see a way you could use exits for conversation trees; it's not the way I would do it, but I guess you could. In that case, you could just manually override the <code>isroom</code> attribute to make it false, so that you see the \"Exits\" tab in the editor, but it isn't treated as a room by <code>AllRooms</code>.</p>\n\n",
      "PostDate": "2023-06-12T11:28:48.5399443Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eec4171e-9930-47e4-8f0c-550eb127d558",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the info Mrangel.\r\n\r\nThe only library truly dependent on the exits is the Weather one that I can think of.  It determines which weather the player sees by scoping the current room the weatherscript is in.  It then travels through a randomly chosen exit to another connected weather room depending upon how often you want it to, or whether you specifically tell it to move.  But if it travels through an exit, the description on using the exit is used.  So you get \"the wind dies down a bit\" as the script moves from the very windy weather room to a room which is going to show whatever you said for the less windy.\r\n\r\nSo it would take a bit of redoing to make WeatherLib work differently, but could be done.\r\n\r\nThis all makes me curious if there's an easier way to work with types as if they were lists though.\r\n\r\nIn the documentation/tutorial I see that we can do \r\n\r\nIf (doesInherit (objectname, \"typename\") \r\n\r\nTo check whether something is generally a part of a type before running whatever script.\r\n\r\nBut what if I want to have my game look through all things of a certain type to find a match for what was entered and then run a script based on the result?\r\n\r\nIs there an easier way to do that than running something like the system I made above?\r\n\r\nAre there already lists of objects by type?\r\n\r\nOne example I can think of is auto-hiding everything that's \"Pervert\" type when a player selects \"minor\".\r\nOr making a command that looks for all \"Fairyland\" types in the room to react to them in a certain way.\r\nAlso specific uses, like checking the type for objects that have a certain script on them, and running that script.\r\n       That's where my mind went when I first made the Gamestorage type with Gamestorageme on it.  I'd thought, \"I could make the game run that script automatically for everything with the Gamestorage type.  But then realized there was an easier way to get them into a list.    But what if it was \"Sheol\" types that have a \"revivecorpse\" script on them where we don't want that happening to the Fairyland types who happen to also have that script?\r\n\r\nHmmm... I'm sorry.  This went from being about something very specific to accidentally asking you to brainstorm how to program my whole game with me!  I definitely don't mean to impose on that level!\r\n\r\nBut if you can point me to anywhere that might let me know about functions for types, how the game handles types, etc. that would be awesome.  If these don't exist yet, hold on to your horses, because I'm going to be working with types a lot and probably building these sorts of things to get them listed, functioned, and accessible for programing.\r\n\r\nForgive if I'm asking something that I just haven't read in the documentation yet, or that seems like a stupid question. haha.\r\n\r\nI hope I never forget to remind you how much I appreciate you Mrangel.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the info Mrangel.</p>\n<p>The only library truly dependent on the exits is the Weather one that I can think of.  It determines which weather the player sees by scoping the current room the weatherscript is in.  It then travels through a randomly chosen exit to another connected weather room depending upon how often you want it to, or whether you specifically tell it to move.  But if it travels through an exit, the description on using the exit is used.  So you get \"the wind dies down a bit\" as the script moves from the very windy weather room to a room which is going to show whatever you said for the less windy.</p>\n<p>So it would take a bit of redoing to make WeatherLib work differently, but could be done.</p>\n<p>This all makes me curious if there's an easier way to work with types as if they were lists though.</p>\n<p>In the documentation/tutorial I see that we can do</p>\n<p>If (doesInherit (objectname, \"typename\")</p>\n<p>To check whether something is generally a part of a type before running whatever script.</p>\n<p>But what if I want to have my game look through all things of a certain type to find a match for what was entered and then run a script based on the result?</p>\n<p>Is there an easier way to do that than running something like the system I made above?</p>\n<p>Are there already lists of objects by type?</p>\n<p>One example I can think of is auto-hiding everything that's \"Pervert\" type when a player selects \"minor\".<br>\nOr making a command that looks for all \"Fairyland\" types in the room to react to them in a certain way.<br>\nAlso specific uses, like checking the type for objects that have a certain script on them, and running that script.<br>\nThat's where my mind went when I first made the Gamestorage type with Gamestorageme on it.  I'd thought, \"I could make the game run that script automatically for everything with the Gamestorage type.  But then realized there was an easier way to get them into a list.    But what if it was \"Sheol\" types that have a \"revivecorpse\" script on them where we don't want that happening to the Fairyland types who happen to also have that script?</p>\n<p>Hmmm... I'm sorry.  This went from being about something very specific to accidentally asking you to brainstorm how to program my whole game with me!  I definitely don't mean to impose on that level!</p>\n<p>But if you can point me to anywhere that might let me know about functions for types, how the game handles types, etc. that would be awesome.  If these don't exist yet, hold on to your horses, because I'm going to be working with types a lot and probably building these sorts of things to get them listed, functioned, and accessible for programing.</p>\n<p>Forgive if I'm asking something that I just haven't read in the documentation yet, or that seems like a stupid question. haha.</p>\n<p>I hope I never forget to remind you how much I appreciate you Mrangel.</p>\n\n",
      "PostDate": "2023-06-12T17:25:35.9873572Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "09250621-1eb1-4b61-95d8-6b24931bd847",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Doh!\r\n\r\nI could set each type to have  flags with it's typenames, couldn't I?\r\n\r\nWould that essentially make them all accessible in the above way?",
      "EditableFormat": "markdown",
      "HTML": "<p>Doh!</p>\n<p>I could set each type to have  flags with it's typenames, couldn't I?</p>\n<p>Would that essentially make them all accessible in the above way?</p>\n\n",
      "PostDate": "2023-06-12T17:33:26.6750633Z",
      "LastEditDate": "2023-06-12T17:34:14.2355776Z",
      "link": null
    },
    {
      "PostId": "d93907b7-1006-4063-8831-7b567d839b30",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The only library truly dependent on the exits is the Weather one that I can think of. It determines which weather the player sees by scoping the current room the weatherscript is in. It then travels through a randomly chosen exit to another connected weather room depending upon how often you want it to, or whether you specifically tell it to move. But if it travels through an exit, the description on using the exit is used. So you get \"the wind dies down a bit\" as the script moves from the very windy weather room to a room which is going to show whatever you said for the less windy.\r\n\r\nAh, I hadn't come across that one. That's an interesting way to do it. I suspect that it would be relatively easy to edit that library so that the \"Exits\" tab is shown in the editor even if weather rooms aren't actually rooms; or (if the library creates a type for its rooms) to set `isroom` to false and exclude them from `AllRooms`.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The only library truly dependent on the exits is the Weather one that I can think of. It determines which weather the player sees by scoping the current room the weatherscript is in. It then travels through a randomly chosen exit to another connected weather room depending upon how often you want it to, or whether you specifically tell it to move. But if it travels through an exit, the description on using the exit is used. So you get \"the wind dies down a bit\" as the script moves from the very windy weather room to a room which is going to show whatever you said for the less windy.</p>\n</blockquote>\n<p>Ah, I hadn't come across that one. That's an interesting way to do it. I suspect that it would be relatively easy to edit that library so that the \"Exits\" tab is shown in the editor even if weather rooms aren't actually rooms; or (if the library creates a type for its rooms) to set <code>isroom</code> to false and exclude them from <code>AllRooms</code>.</p>\n\n",
      "PostDate": "2023-06-13T11:59:22.0987396Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
