{
  "Topic": {
    "TopicId": "2pwcb_0rikapdrldyr2yva",
    "ForumId": "10",
    "Title": "Push #object# direction",
    "LastUpdated": "2018-03-21T22:23:38.8318864Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fe90ca2e-1467-4cf3-99bd-6a045dd36e6a",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I first asked this question in August last year.\r\nSee here for that thread: https://textadventures.co.uk/forum/quest/topic/guvemyyxheio3tiogk6m9q/push-object-direction\r\nWith a great deal of help from KV, The Pixie, and a few others, the coding worked. Thankyou.\r\n\r\nRecently, I thought of updating the command so that a 'Npc' could 'Pull, Push or Move' the object.\r\nThis then caused a bit of head-scratching as to make the exit message display the correct syntax in all cases, and the creation of three new functions to achieve this. ```WriteVerb2```, ```Conjugate2``` and ```Conjugate3``` (all of which are Pixie inspired), also a very poor attempt at a template ```FormatCmdVerb```.\r\n\r\nI am however having problems with one of my commands, '```CmdNpcPushObjDir```', it's not taking the correct input as I thought it would, and I'm hoping someone can help fix it. I've put a little note in the ```CmdPush Object1 Direction```, so you can test out how it should behave.\r\n\r\nI'm attaching a little game, so you can see it all in action.\r\n\r\n```\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"You\">You</template>\r\n  <template name=\"the\">the</template>\r\n  <dynamictemplate name=\"FullInventory\">WriteVerb(object, \"be\") + \" too heavy to be taken.\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectNotOpen\">CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultAsk\">WriteVerb(object, \"do\") + \" not reply.\"</dynamictemplate>\r\n  <game name=\"Test - Npc Move\">\r\n    <gameid>d59aebb9-33bb-4b95-8719-89a67c44c6c0</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_lightdark />\r\n    <attr name=\"feature_limitinventory\" type=\"boolean\">false</attr>\r\n    <feature_advancedscripts />\r\n    <marginscolour type=\"string\"></marginscolour>\r\n    <inituserinterface type=\"script\">\r\n    </inituserinterface>\r\n    <clearscreenonroomenter />\r\n  </game>\r\n  <command name=\"go\">\r\n    <pattern type=\"string\"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <unresolved>You can't go there.</unresolved>\r\n    <script>\r\n      if (HasString (player, \"immobilisedmessage\")) {\r\n        msg (player.immobilisedmessage)\r\n      }\r\n      else if (exit.visible) {\r\n        if (exit.locked) {\r\n          msg (exit.lockmessage)\r\n        }\r\n        else if (exit.runscript) {\r\n          if (HasScript(exit, \"script\")) {\r\n            do (exit, \"script\")\r\n          }\r\n        }\r\n        else if (exit.lookonly) {\r\n          msg (\"You can't go there.\")\r\n        }\r\n        else {\r\n          if (HasString(exit, \"message\")) {\r\n            if (not exit.message = \"\") {\r\n              if (game.clearscreenonroomenter) {\r\n                game.currentexitmessage = exit.message\r\n              }\r\n              else {\r\n                msg (exit.message)\r\n              }\r\n            }\r\n          }\r\n          game.pov.parent = exit.to\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You can't go there.\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\r\n      if (not Got(object1)) {\r\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\r\n        // 2: Check if you are carrying object1.\r\n      }\r\n      else if (GetBoolean(object1, \"tie_able\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\r\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 4: Check if you can attach object1 to anything.\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached to anything.\r\n      }\r\n      else {\r\n        // 3: Unattach object1 from what?\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1 from Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*) from (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached.\r\n      }\r\n      else if (not HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 3: Check if object2 is attached.\r\n      }\r\n      else {\r\n        // 4: Unattach objects and reset variables.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = false\r\n        object1.attachedto = null\r\n        object2.attachedto = null\r\n        object1.take = true\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1 to Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*) to (?<object2>.*)$]]></pattern>\r\n    <unresolved type=\"string\"></unresolved>\r\n    <script>\r\n      cc = player.currentcommand\r\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\r\n        msg (\"You've already done that.\")\r\n        // 2: Check if object1 is already attached to object2.\r\n      }\r\n      else if (GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\r\n        // 3: Check if object1 is attached.\r\n      }\r\n      else if (HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\r\n        // 4: Check if object2 is attached.\r\n      }\r\n      else if (not object1.parent = player) {\r\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\r\n        // 5: Check if you are carrying object1.\r\n      }\r\n      else if (not GetBoolean(object1, \"tie_able\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 6: Check if object1 can be attached.\r\n      }\r\n      else if (not GetBoolean(object2, \"attachable\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\r\n        // 7: Check if object2 can be attached.\r\n      }\r\n      else {\r\n        // 8: Success. Attach the two objects.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = true\r\n        object1.attachedto = object2\r\n        object2.attachedto = object1\r\n        object1.parent = player.parent\r\n        object1.take = false\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1 Direction\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\r\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\r\n      }\r\n      else if (HasAttribute(object1, \"moveable\")) {\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n        do (object1, \"moveable\")\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <maxobjects type=\"int\">0</maxobjects>\r\n      <volume type=\"int\">0</volume>\r\n      <maxvolume type=\"int\">1</maxvolume>\r\n    </object>\r\n    <exit alias=\"east\" to=\"room2\">\r\n      <inherit name=\"eastdirection\" />\r\n      <locked type=\"boolean\">false</locked>\r\n    </exit>\r\n    <object name=\"pen\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <volume type=\"int\">0</volume>\r\n    </object>\r\n    <object name=\"stone block\">\r\n      <inherit name=\"editor_object\" />\r\n      <alt type=\"stringlist\">\r\n        <value>block</value>\r\n      </alt>\r\n      <pushable />\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n      <climbup type=\"script\">\r\n        msg (\"You climb up onto the top of the stone block.\")\r\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\r\n        SetObjectFlagOn (player, \"stand\")\r\n        MakeObjectVisible (lamp)\r\n      </climbup>\r\n      <climbdown type=\"script\">\r\n        msg (\"You climb down from the top of the stone block.\")\r\n        player.immobilisedmessage = null\r\n        SetObjectFlagOff (player, \"stand\")\r\n        if (not Got(lamp)) {\r\n          MakeObjectInvisible (lamp)\r\n        }\r\n      </climbdown>\r\n    </object>\r\n    <object name=\"quinn\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"male\" />\r\n      <alias>Quinn</alias>\r\n      <look>A mighty Eskimo, of immense stature.</look>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    </object>\r\n    <object name=\"branch\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A oak branch.</look>\r\n    </object>\r\n    <object name=\"rope\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <tie_able />\r\n      <look>A long length of rope.</look>\r\n    </object>\r\n    <object name=\"hook\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A plain looking hook.</look>\r\n    </object>\r\n    <object name=\"cord\">\r\n      <inherit name=\"editor_object\" />\r\n      <tie_able />\r\n      <take />\r\n      <look type=\"string\"></look>\r\n    </object>\r\n    <object name=\"rug\">\r\n      <inherit name=\"editor_object\" />\r\n      <look>A very plain looking rug carpet.</look>\r\n      <alt type=\"stringlist\">\r\n        <value>carpet</value>\r\n      </alt>\r\n      <moveable type=\"script\">\r\n        msg (\"A key is revealed.\")\r\n      </moveable>\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n    </object>\r\n    <object name=\"lucy\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <alias>Lucy</alias>\r\n      <look>A girl with kaleidoscope eyes, wearing a diamond.</look>\r\n    </object>\r\n    <object name=\"olivers army\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"maleplural\" />\r\n      <alias>Oliver's Army</alias>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <look><![CDATA[They're here to stay.<br/>They're on their way.]]></look>\r\n      <alt type=\"stringlist\">\r\n        <value>army</value>\r\n        <value>goblins</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <dark type=\"boolean\">false</dark>\r\n    <exit alias=\"west\" to=\"room\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n    <object name=\"shelf\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"surface\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <look type=\"script\"><![CDATA[\r\n        if (GetBoolean(player, \"stand\")) {\r\n          msg (\"A wooden shelf.\")\r\n        }\r\n        else {\r\n          msg (\"A wooden shelf.<br/>The shelf is too high for you to see what, if anything is on it.\")\r\n        }\r\n      ]]></look>\r\n      <object name=\"lamp\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"switchable\" />\r\n        <take />\r\n        <feature_switchable />\r\n        <feature_lightdark />\r\n        <lightstrength>strong</lightstrength>\r\n        <volume type=\"int\">0</volume>\r\n        <onswitchon type=\"script\">\r\n          this.lightsource = true\r\n        </onswitchon>\r\n        <onswitchoff type=\"script\">\r\n          this.lightsource = false\r\n        </onswitchoff>\r\n        <visible type=\"boolean\">false</visible>\r\n        <ontake type=\"script\">\r\n        </ontake>\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <command name=\"CmdNpcPushObjDir\">\r\n    <pattern type=\"string\"><![CDATA[^(?<object2>.*):(push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      input = Split(player.currentcommand, \":\")\r\n      obj = GetObject(StringListItem(input,0))\r\n      input1 = Split(StringListItem(input,1), \" \")\r\n      cc = StringListItem(input1,0)\r\n      n = ListCount(Input1) -2\r\n      object1 = GetObject(StringListItem(input1, n))\r\n      exit = StringListItem(input1, ListCount(input1) -1)\r\n      msg (obj)\r\n      msg (cc)\r\n      msg (object1)\r\n      PushPullMoveObjDir (cc, obj, object1, exit)\r\n    </script>\r\n  </command>\r\n  <verb>\r\n    <property>climbup</property>\r\n    <pattern>climb up; climb on; stand; stand on; get on</pattern>\r\n    <defaultexpression>\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>climbdown</property>\r\n    <pattern>climb down; climb off; get off</pattern>\r\n    <defaultexpression>\"You can't climb down; climb off; get off \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\">\r\n    // Doctor Agon. GetCmdVerb Inspired by KV.\r\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\r\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"push\")) {\r\n      return (\"push\")\r\n    }\r\n    else if (StartsWith(cc, \"pull\")) {\r\n      return (\"pull\")\r\n    }\r\n    else if (StartsWith(cc, \"move\")) {\r\n      return (\"move\")\r\n    }\r\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"tie\")) {\r\n      return (\"tie\")\r\n    }\r\n    else if (StartsWith(cc, \"attach\")) {\r\n      return (\"attach\")\r\n    }\r\n    else if (StartsWith(cc, \"fasten\")) {\r\n      return (\"fasten\")\r\n    }\r\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"untie\")) {\r\n      return (\"untie\")\r\n    }\r\n    else if (StartsWith(cc, \"unattach\")) {\r\n      return (\"unattach\")\r\n    }\r\n    else if (StartsWith(cc, \"unfasten\")) {\r\n      return (\"unfasten\")\r\n    }\r\n  </function>\r\n  <function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\">\r\n    result = pre + \" \" + con + \" \"\r\n    result = result + mid + \" \"\r\n    result = result + GetDisplayAlias(obj) + \" \"\r\n    result = result + dir.alias\r\n    result = result + post\r\n    return (result)\r\n  </function>\r\n  <function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    return (CapFirst(obj.gender))\r\n  </function>\r\n  <function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    gender = obj.gender\r\n    if (gender = \"he\" or gender = \"she\") {\r\n      gender = \"it\"\r\n    }\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"push\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"es\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"pull\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"move\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Conjugate3\" parameters=\"cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"tie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"attach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"fasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      case (\"untie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"unattach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"unfasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"PushPullMoveObjDir\" parameters=\"cc, obj, object1, exit\">\r\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n    cc = player.currentcommand\r\n    object2 = obj\r\n    // 2: Check to see if player is immobilised.\r\n    if (player.immobilisedmessage = null) {\r\n      // 3: Checks if the object1 has the attribute 'pushable'.\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        if (game.unresolvedcommand = null) {\r\n          // 4: Check if exit is locked.\r\n          if (exit.locked) {\r\n            msg (exit.lockmessage)\r\n          }\r\n          else {\r\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\r\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\r\n            object1.parent = exit.to\r\n            if (object2 = player) {\r\n              HandleSingleCommand (\"go \" + exit.alias)\r\n            }\r\n            else {\r\n              MoveObject (object2, exit.to)\r\n              msg (exit.message)\r\n            }\r\n          }\r\n          exit.message = null\r\n        }\r\n      }\r\n      else {\r\n        // 6: Immovable object message.\r\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\r\n      }\r\n    }\r\n    else {\r\n      // 7: Player is immobilised message.\r\n      msg (player.immobilisedmessage)\r\n    }\r\n  </function>\r\n</asl>\r\n```\r\nOops, maybe not so little.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I first asked this question in August last year.<br>\nSee here for that thread: https://textadventures.co.uk/forum/quest/topic/guvemyyxheio3tiogk6m9q/push-object-direction<br>\nWith a great deal of help from KV, The Pixie, and a few others, the coding worked. Thankyou.</p>\n<p>Recently, I thought of updating the command so that a 'Npc' could 'Pull, Push or Move' the object.<br>\nThis then caused a bit of head-scratching as to make the exit message display the correct syntax in all cases, and the creation of three new functions to achieve this. <code>WriteVerb2</code>, <code>Conjugate2</code> and <code>Conjugate3</code> (all of which are Pixie inspired), also a very poor attempt at a template <code>FormatCmdVerb</code>.</p>\n<p>I am however having problems with one of my commands, '<code>CmdNpcPushObjDir</code>', it's not taking the correct input as I thought it would, and I'm hoping someone can help fix it. I've put a little note in the <code>CmdPush Object1 Direction</code>, so you can test out how it should behave.</p>\n<p>I'm attaching a little game, so you can see it all in action.</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"You\"&gt;You&lt;/template&gt;\n  &lt;template name=\"the\"&gt;the&lt;/template&gt;\n  &lt;dynamictemplate name=\"FullInventory\"&gt;WriteVerb(object, \"be\") + \" too heavy to be taken.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"ObjectNotOpen\"&gt;CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"DefaultAsk\"&gt;WriteVerb(object, \"do\") + \" not reply.\"&lt;/dynamictemplate&gt;\n  &lt;game name=\"Test - Npc Move\"&gt;\n    &lt;gameid&gt;d59aebb9-33bb-4b95-8719-89a67c44c6c0&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_lightdark /&gt;\n    &lt;attr name=\"feature_limitinventory\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;marginscolour type=\"string\"&gt;&lt;/marginscolour&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n    &lt;/inituserinterface&gt;\n    &lt;clearscreenonroomenter /&gt;\n  &lt;/game&gt;\n  &lt;command name=\"go\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^go to (?&lt;exit&gt;.*)$|^go (?&lt;exit&gt;.*)$|^(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved&gt;You can't go there.&lt;/unresolved&gt;\n    &lt;script&gt;\n      if (HasString (player, \"immobilisedmessage\")) {\n        msg (player.immobilisedmessage)\n      }\n      else if (exit.visible) {\n        if (exit.locked) {\n          msg (exit.lockmessage)\n        }\n        else if (exit.runscript) {\n          if (HasScript(exit, \"script\")) {\n            do (exit, \"script\")\n          }\n        }\n        else if (exit.lookonly) {\n          msg (\"You can't go there.\")\n        }\n        else {\n          if (HasString(exit, \"message\")) {\n            if (not exit.message = \"\") {\n              if (game.clearscreenonroomenter) {\n                game.currentexitmessage = exit.message\n              }\n              else {\n                msg (exit.message)\n              }\n            }\n          }\n          game.pov.parent = exit.to\n        }\n      }\n      else {\n        msg (\"You can't go there.\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\n      if (not Got(object1)) {\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\n        // 2: Check if you are carrying object1.\n      }\n      else if (GetBoolean(object1, \"tie_able\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 4: Check if you can attach object1 to anything.\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached to anything.\n      }\n      else {\n        // 3: Unattach object1 from what?\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1 from Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*) from (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached.\n      }\n      else if (not HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 3: Check if object2 is attached.\n      }\n      else {\n        // 4: Unattach objects and reset variables.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = false\n        object1.attachedto = null\n        object2.attachedto = null\n        object1.take = true\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1 to Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*) to (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved type=\"string\"&gt;&lt;/unresolved&gt;\n    &lt;script&gt;\n      cc = player.currentcommand\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\n        msg (\"You've already done that.\")\n        // 2: Check if object1 is already attached to object2.\n      }\n      else if (GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\n        // 3: Check if object1 is attached.\n      }\n      else if (HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\n        // 4: Check if object2 is attached.\n      }\n      else if (not object1.parent = player) {\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\n        // 5: Check if you are carrying object1.\n      }\n      else if (not GetBoolean(object1, \"tie_able\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 6: Check if object1 can be attached.\n      }\n      else if (not GetBoolean(object2, \"attachable\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\n        // 7: Check if object2 can be attached.\n      }\n      else {\n        // 8: Success. Attach the two objects.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = true\n        object1.attachedto = object2\n        object2.attachedto = object1\n        object1.parent = player.parent\n        object1.take = false\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1 Direction\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      if (HasAttribute(object1, \"pushable\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\n      }\n      else if (HasAttribute(object1, \"moveable\")) {\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n        do (object1, \"moveable\")\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;maxobjects type=\"int\"&gt;0&lt;/maxobjects&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n      &lt;maxvolume type=\"int\"&gt;1&lt;/maxvolume&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"east\" to=\"room2\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;locked type=\"boolean\"&gt;false&lt;/locked&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"pen\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stone block\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;block&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;pushable /&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n      &lt;climbup type=\"script\"&gt;\n        msg (\"You climb up onto the top of the stone block.\")\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\n        SetObjectFlagOn (player, \"stand\")\n        MakeObjectVisible (lamp)\n      &lt;/climbup&gt;\n      &lt;climbdown type=\"script\"&gt;\n        msg (\"You climb down from the top of the stone block.\")\n        player.immobilisedmessage = null\n        SetObjectFlagOff (player, \"stand\")\n        if (not Got(lamp)) {\n          MakeObjectInvisible (lamp)\n        }\n      &lt;/climbdown&gt;\n    &lt;/object&gt;\n    &lt;object name=\"quinn\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"male\" /&gt;\n      &lt;alias&gt;Quinn&lt;/alias&gt;\n      &lt;look&gt;A mighty Eskimo, of immense stature.&lt;/look&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;/object&gt;\n    &lt;object name=\"branch\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A oak branch.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rope\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;tie_able /&gt;\n      &lt;look&gt;A long length of rope.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"hook\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A plain looking hook.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"cord\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;tie_able /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"string\"&gt;&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rug\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;A very plain looking rug carpet.&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;carpet&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;moveable type=\"script\"&gt;\n        msg (\"A key is revealed.\")\n      &lt;/moveable&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n    &lt;/object&gt;\n    &lt;object name=\"lucy\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;alias&gt;Lucy&lt;/alias&gt;\n      &lt;look&gt;A girl with kaleidoscope eyes, wearing a diamond.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"olivers army\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"maleplural\" /&gt;\n      &lt;alias&gt;Oliver's Army&lt;/alias&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;look&gt;&lt;![CDATA[They're here to stay.&lt;br/&gt;They're on their way.]]&gt;&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;army&lt;/value&gt;\n        &lt;value&gt;goblins&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;dark type=\"boolean\"&gt;false&lt;/dark&gt;\n    &lt;exit alias=\"west\" to=\"room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"shelf\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"surface\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;look type=\"script\"&gt;&lt;![CDATA[\n        if (GetBoolean(player, \"stand\")) {\n          msg (\"A wooden shelf.\")\n        }\n        else {\n          msg (\"A wooden shelf.&lt;br/&gt;The shelf is too high for you to see what, if anything is on it.\")\n        }\n      ]]&gt;&lt;/look&gt;\n      &lt;object name=\"lamp\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"switchable\" /&gt;\n        &lt;take /&gt;\n        &lt;feature_switchable /&gt;\n        &lt;feature_lightdark /&gt;\n        &lt;lightstrength&gt;strong&lt;/lightstrength&gt;\n        &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n        &lt;onswitchon type=\"script\"&gt;\n          this.lightsource = true\n        &lt;/onswitchon&gt;\n        &lt;onswitchoff type=\"script\"&gt;\n          this.lightsource = false\n        &lt;/onswitchoff&gt;\n        &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n        &lt;ontake type=\"script\"&gt;\n        &lt;/ontake&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"CmdNpcPushObjDir\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*):(push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      input = Split(player.currentcommand, \":\")\n      obj = GetObject(StringListItem(input,0))\n      input1 = Split(StringListItem(input,1), \" \")\n      cc = StringListItem(input1,0)\n      n = ListCount(Input1) -2\n      object1 = GetObject(StringListItem(input1, n))\n      exit = StringListItem(input1, ListCount(input1) -1)\n      msg (obj)\n      msg (cc)\n      msg (object1)\n      PushPullMoveObjDir (cc, obj, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbup&lt;/property&gt;\n    &lt;pattern&gt;climb up; climb on; stand; stand on; get on&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbdown&lt;/property&gt;\n    &lt;pattern&gt;climb down; climb off; get off&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb down; climb off; get off \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\"&gt;\n    // Doctor Agon. GetCmdVerb Inspired by KV.\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"push\")) {\n      return (\"push\")\n    }\n    else if (StartsWith(cc, \"pull\")) {\n      return (\"pull\")\n    }\n    else if (StartsWith(cc, \"move\")) {\n      return (\"move\")\n    }\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"tie\")) {\n      return (\"tie\")\n    }\n    else if (StartsWith(cc, \"attach\")) {\n      return (\"attach\")\n    }\n    else if (StartsWith(cc, \"fasten\")) {\n      return (\"fasten\")\n    }\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"untie\")) {\n      return (\"untie\")\n    }\n    else if (StartsWith(cc, \"unattach\")) {\n      return (\"unattach\")\n    }\n    else if (StartsWith(cc, \"unfasten\")) {\n      return (\"unfasten\")\n    }\n  &lt;/function&gt;\n  &lt;function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\"&gt;\n    result = pre + \" \" + con + \" \"\n    result = result + mid + \" \"\n    result = result + GetDisplayAlias(obj) + \" \"\n    result = result + dir.alias\n    result = result + post\n    return (result)\n  &lt;/function&gt;\n  &lt;function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    return (CapFirst(obj.gender))\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    gender = obj.gender\n    if (gender = \"he\" or gender = \"she\") {\n      gender = \"it\"\n    }\n    switch (GetCmdVerb(cc)) {\n      case (\"push\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"es\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"pull\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"move\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate3\" parameters=\"cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    switch (GetCmdVerb(cc)) {\n      case (\"tie\") {\n        return (\"tied\")\n      }\n      case (\"attach\") {\n        return (\"attached\")\n      }\n      case (\"fasten\") {\n        return (\"fastened\")\n      }\n      case (\"untie\") {\n        return (\"tied\")\n      }\n      case (\"unattach\") {\n        return (\"attached\")\n      }\n      case (\"unfasten\") {\n        return (\"fastened\")\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"PushPullMoveObjDir\" parameters=\"cc, obj, object1, exit\"&gt;\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n    cc = player.currentcommand\n    object2 = obj\n    // 2: Check to see if player is immobilised.\n    if (player.immobilisedmessage = null) {\n      // 3: Checks if the object1 has the attribute 'pushable'.\n      if (HasAttribute(object1, \"pushable\")) {\n        if (game.unresolvedcommand = null) {\n          // 4: Check if exit is locked.\n          if (exit.locked) {\n            msg (exit.lockmessage)\n          }\n          else {\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\n            object1.parent = exit.to\n            if (object2 = player) {\n              HandleSingleCommand (\"go \" + exit.alias)\n            }\n            else {\n              MoveObject (object2, exit.to)\n              msg (exit.message)\n            }\n          }\n          exit.message = null\n        }\n      }\n      else {\n        // 6: Immovable object message.\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\n      }\n    }\n    else {\n      // 7: Player is immobilised message.\n      msg (player.immobilisedmessage)\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>Oops, maybe not so little.</p>\n\n",
      "PostDate": "2018-03-21T22:23:38.8318864Z",
      "LastEditDate": "2018-03-21T22:29:38.9163737Z",
      "link": null
    },
    {
      "PostId": "50f37cb5-0001-4acc-a10e-5f323314eb87",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It works for me with these changes:\r\n\r\n```\r\n  <command name=\"CmdNpcPushObjDir\">\r\n    <pattern type=\"string\"><![CDATA[^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      PushPullMoveObjDir (text, object2, object1, exit)\r\n    </script>\r\n  </command>\r\n```\r\n\r\n\r\n```\r\n  <function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\">\r\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n    //cc = player.currentcommand\r\n    //object2 = obj\r\n    // 2: Check to see if player is immobilised.\r\n    if (player.immobilisedmessage = null) {\r\n      // 3: Checks if the object1 has the attribute 'pushable'.\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        if (game.unresolvedcommand = null) {\r\n          // 4: Check if exit is locked.\r\n          if (exit.locked) {\r\n            msg (exit.lockmessage)\r\n          }\r\n          else {\r\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\r\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\r\n            object1.parent = exit.to\r\n            if (object2 = player) {\r\n              HandleSingleCommand (\"go \" + exit.alias)\r\n            }\r\n            else {\r\n              MoveObject (object2, exit.to)\r\n              msg (exit.message)\r\n            }\r\n          }\r\n          exit.message = null\r\n        }\r\n      }\r\n      else {\r\n        // 6: Immovable object message.\r\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\r\n      }\r\n    }\r\n    else {\r\n      // 7: Player is immobilised message.\r\n      msg (player.immobilisedmessage)\r\n    }\r\n  </function>\r\n```\r\n\r\n---\r\n\\> quinn, push the branch east\r\nHe cannot push the branch east.\r\n\r\n\\> quinn, push the block east\r\nHe pushes the stone block east.",
      "EditableFormat": "markdown",
      "HTML": "<p>It works for me with these changes:</p>\n<pre><code>  &lt;command name=\"CmdNpcPushObjDir\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      PushPullMoveObjDir (text, object2, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n</code></pre>\n<pre><code>  &lt;function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\"&gt;\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n    //cc = player.currentcommand\n    //object2 = obj\n    // 2: Check to see if player is immobilised.\n    if (player.immobilisedmessage = null) {\n      // 3: Checks if the object1 has the attribute 'pushable'.\n      if (HasAttribute(object1, \"pushable\")) {\n        if (game.unresolvedcommand = null) {\n          // 4: Check if exit is locked.\n          if (exit.locked) {\n            msg (exit.lockmessage)\n          }\n          else {\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\n            object1.parent = exit.to\n            if (object2 = player) {\n              HandleSingleCommand (\"go \" + exit.alias)\n            }\n            else {\n              MoveObject (object2, exit.to)\n              msg (exit.message)\n            }\n          }\n          exit.message = null\n        }\n      }\n      else {\n        // 6: Immovable object message.\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\n      }\n    }\n    else {\n      // 7: Player is immobilised message.\n      msg (player.immobilisedmessage)\n    }\n  &lt;/function&gt;\n</code></pre>\n<hr>\n<p>&gt; quinn, push the branch east<br>\nHe cannot push the branch east.</p>\n<p>&gt; quinn, push the block east<br>\nHe pushes the stone block east.</p>\n\n",
      "PostDate": "2018-03-22T00:25:27.7725575Z",
      "LastEditDate": "2018-03-22T14:54:56.1526104Z",
      "link": null
    },
    {
      "PostId": "6b8859d6-c159-4b1c-ae7d-4e0f56e1e79c",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmmm, Still doesn't work KV, keeps putting out an error message. ```Object not set to instance of an object```, or something like that.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmmm, Still doesn't work KV, keeps putting out an error message. <code>Object not set to instance of an object</code>, or something like that.</p>\n\n",
      "PostDate": "2018-03-22T08:20:24.0396655Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82c64960-a43e-4144-b943-2e4c666ace48",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It works for me.\r\n\r\nHere's the proof:\r\n\r\n<details>\r\n\r\n\r\n![move_object_east](https://user-images.githubusercontent.com/30656341/37778322-a2f3901e-2db7-11e8-941e-7b3a279516c5.gif)\r\n\r\n</details>\r\n\r\n---\r\n\r\nDid you change both scripts I posted?  I don't know why I put \"Hack 1\" and \"Hack 2\"...  You need to change them both.\r\n\r\nHere's the whole game\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"You\">You</template>\r\n  <template name=\"the\">the</template>\r\n  <dynamictemplate name=\"FullInventory\">WriteVerb(object, \"be\") + \" too heavy to be taken.\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectNotOpen\">CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultAsk\">WriteVerb(object, \"do\") + \" not reply.\"</dynamictemplate>\r\n  <game name=\"Test - Npc Move\">\r\n    <gameid>d59aebb9-33bb-4b95-8719-89a67c44c6c0</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_lightdark />\r\n    <attr name=\"feature_limitinventory\" type=\"boolean\">false</attr>\r\n    <feature_advancedscripts />\r\n    <marginscolour type=\"string\"></marginscolour>\r\n    <clearscreenonroomenter />\r\n    <inituserinterface type=\"script\">\r\n    </inituserinterface>\r\n  </game>\r\n  <command name=\"go\">\r\n    <pattern type=\"string\"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <unresolved>You can't go there.</unresolved>\r\n    <script>\r\n      if (HasString (player, \"immobilisedmessage\")) {\r\n        msg (player.immobilisedmessage)\r\n      }\r\n      else if (exit.visible) {\r\n        if (exit.locked) {\r\n          msg (exit.lockmessage)\r\n        }\r\n        else if (exit.runscript) {\r\n          if (HasScript(exit, \"script\")) {\r\n            do (exit, \"script\")\r\n          }\r\n        }\r\n        else if (exit.lookonly) {\r\n          msg (\"You can't go there.\")\r\n        }\r\n        else {\r\n          if (HasString(exit, \"message\")) {\r\n            if (not exit.message = \"\") {\r\n              if (game.clearscreenonroomenter) {\r\n                game.currentexitmessage = exit.message\r\n              }\r\n              else {\r\n                msg (exit.message)\r\n              }\r\n            }\r\n          }\r\n          game.pov.parent = exit.to\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You can't go there.\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\r\n      if (not Got(object1)) {\r\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\r\n        // 2: Check if you are carrying object1.\r\n      }\r\n      else if (GetBoolean(object1, \"tie_able\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\r\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 4: Check if you can attach object1 to anything.\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached to anything.\r\n      }\r\n      else {\r\n        // 3: Unattach object1 from what?\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1 from Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*) from (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached.\r\n      }\r\n      else if (not HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 3: Check if object2 is attached.\r\n      }\r\n      else {\r\n        // 4: Unattach objects and reset variables.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = false\r\n        object1.attachedto = null\r\n        object2.attachedto = null\r\n        object1.take = true\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1 to Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*) to (?<object2>.*)$]]></pattern>\r\n    <unresolved type=\"string\"></unresolved>\r\n    <script>\r\n      cc = player.currentcommand\r\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\r\n        msg (\"You've already done that.\")\r\n        // 2: Check if object1 is already attached to object2.\r\n      }\r\n      else if (GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\r\n        // 3: Check if object1 is attached.\r\n      }\r\n      else if (HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\r\n        // 4: Check if object2 is attached.\r\n      }\r\n      else if (not object1.parent = player) {\r\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\r\n        // 5: Check if you are carrying object1.\r\n      }\r\n      else if (not GetBoolean(object1, \"tie_able\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 6: Check if object1 can be attached.\r\n      }\r\n      else if (not GetBoolean(object2, \"attachable\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\r\n        // 7: Check if object2 can be attached.\r\n      }\r\n      else {\r\n        // 8: Success. Attach the two objects.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = true\r\n        object1.attachedto = object2\r\n        object2.attachedto = object1\r\n        object1.parent = player.parent\r\n        object1.take = false\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1 Direction\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\r\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\r\n      }\r\n      else if (HasAttribute(object1, \"moveable\")) {\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n        do (object1, \"moveable\")\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <maxobjects type=\"int\">0</maxobjects>\r\n      <volume type=\"int\">0</volume>\r\n      <maxvolume type=\"int\">1</maxvolume>\r\n    </object>\r\n    <exit alias=\"east\" to=\"room2\">\r\n      <inherit name=\"eastdirection\" />\r\n      <locked type=\"boolean\">false</locked>\r\n    </exit>\r\n    <object name=\"pen\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <volume type=\"int\">0</volume>\r\n    </object>\r\n    <object name=\"stone block\">\r\n      <inherit name=\"editor_object\" />\r\n      <alt type=\"stringlist\">\r\n        <value>block</value>\r\n      </alt>\r\n      <pushable />\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n      <climbup type=\"script\">\r\n        msg (\"You climb up onto the top of the stone block.\")\r\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\r\n        SetObjectFlagOn (player, \"stand\")\r\n        MakeObjectVisible (lamp)\r\n      </climbup>\r\n      <climbdown type=\"script\">\r\n        msg (\"You climb down from the top of the stone block.\")\r\n        player.immobilisedmessage = null\r\n        SetObjectFlagOff (player, \"stand\")\r\n        if (not Got(lamp)) {\r\n          MakeObjectInvisible (lamp)\r\n        }\r\n      </climbdown>\r\n    </object>\r\n    <object name=\"quinn\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"male\" />\r\n      <alias>Quinn</alias>\r\n      <look>A mighty Eskimo, of immense stature.</look>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    </object>\r\n    <object name=\"branch\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A oak branch.</look>\r\n    </object>\r\n    <object name=\"rope\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <tie_able />\r\n      <look>A long length of rope.</look>\r\n    </object>\r\n    <object name=\"hook\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A plain looking hook.</look>\r\n    </object>\r\n    <object name=\"cord\">\r\n      <inherit name=\"editor_object\" />\r\n      <tie_able />\r\n      <take />\r\n      <look type=\"string\"></look>\r\n    </object>\r\n    <object name=\"rug\">\r\n      <inherit name=\"editor_object\" />\r\n      <look>A very plain looking rug carpet.</look>\r\n      <alt type=\"stringlist\">\r\n        <value>carpet</value>\r\n      </alt>\r\n      <moveable type=\"script\">\r\n        msg (\"A key is revealed.\")\r\n      </moveable>\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n    </object>\r\n    <object name=\"lucy\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <alias>Lucy</alias>\r\n      <look>A girl with kaleidoscope eyes, wearing a diamond.</look>\r\n    </object>\r\n    <object name=\"olivers army\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"maleplural\" />\r\n      <alias>Oliver's Army</alias>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <look><![CDATA[They're here to stay.<br/>They're on their way.]]></look>\r\n      <alt type=\"stringlist\">\r\n        <value>army</value>\r\n        <value>goblins</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <dark type=\"boolean\">false</dark>\r\n    <exit alias=\"west\" to=\"room\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n    <object name=\"shelf\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"surface\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <look type=\"script\"><![CDATA[\r\n        if (GetBoolean(player, \"stand\")) {\r\n          msg (\"A wooden shelf.\")\r\n        }\r\n        else {\r\n          msg (\"A wooden shelf.<br/>The shelf is too high for you to see what, if anything is on it.\")\r\n        }\r\n      ]]></look>\r\n      <object name=\"lamp\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"switchable\" />\r\n        <take />\r\n        <feature_switchable />\r\n        <feature_lightdark />\r\n        <lightstrength>strong</lightstrength>\r\n        <volume type=\"int\">0</volume>\r\n        <visible type=\"boolean\">false</visible>\r\n        <onswitchon type=\"script\">\r\n          this.lightsource = true\r\n        </onswitchon>\r\n        <onswitchoff type=\"script\">\r\n          this.lightsource = false\r\n        </onswitchoff>\r\n        <ontake type=\"script\">\r\n        </ontake>\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <command name=\"CmdNpcPushObjDir\">\r\n    <pattern type=\"string\"><![CDATA[^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      PushPullMoveObjDir (text, object2, object1, exit)\r\n    </script>\r\n  </command>\r\n  <verb>\r\n    <property>climbup</property>\r\n    <pattern>climb up; climb on; stand; stand on; get on</pattern>\r\n    <defaultexpression>\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>climbdown</property>\r\n    <pattern>climb down; climb off; get off</pattern>\r\n    <defaultexpression>\"You can't climb down; climb off; get off \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\">\r\n    // Doctor Agon. GetCmdVerb Inspired by KV.\r\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\r\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"push\")) {\r\n      return (\"push\")\r\n    }\r\n    else if (StartsWith(cc, \"pull\")) {\r\n      return (\"pull\")\r\n    }\r\n    else if (StartsWith(cc, \"move\")) {\r\n      return (\"move\")\r\n    }\r\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"tie\")) {\r\n      return (\"tie\")\r\n    }\r\n    else if (StartsWith(cc, \"attach\")) {\r\n      return (\"attach\")\r\n    }\r\n    else if (StartsWith(cc, \"fasten\")) {\r\n      return (\"fasten\")\r\n    }\r\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"untie\")) {\r\n      return (\"untie\")\r\n    }\r\n    else if (StartsWith(cc, \"unattach\")) {\r\n      return (\"unattach\")\r\n    }\r\n    else if (StartsWith(cc, \"unfasten\")) {\r\n      return (\"unfasten\")\r\n    }\r\n  </function>\r\n  <function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\">\r\n    result = pre + \" \" + con + \" \"\r\n    result = result + mid + \" \"\r\n    result = result + GetDisplayAlias(obj) + \" \"\r\n    result = result + dir.alias\r\n    result = result + post\r\n    return (result)\r\n  </function>\r\n  <function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    return (CapFirst(obj.gender))\r\n  </function>\r\n  <function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    gender = obj.gender\r\n    if (gender = \"he\" or gender = \"she\") {\r\n      gender = \"it\"\r\n    }\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"push\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"es\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"pull\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"move\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Conjugate3\" parameters=\"cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"tie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"attach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"fasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      case (\"untie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"unattach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"unfasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\">\r\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n    //cc = player.currentcommand\r\n    //object2 = obj\r\n    // 2: Check to see if player is immobilised.\r\n    if (player.immobilisedmessage = null) {\r\n      // 3: Checks if the object1 has the attribute 'pushable'.\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        if (game.unresolvedcommand = null) {\r\n          // 4: Check if exit is locked.\r\n          if (exit.locked) {\r\n            msg (exit.lockmessage)\r\n          }\r\n          else {\r\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\r\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\r\n            object1.parent = exit.to\r\n            if (object2 = player) {\r\n              HandleSingleCommand (\"go \" + exit.alias)\r\n            }\r\n            else {\r\n              MoveObject (object2, exit.to)\r\n              msg (exit.message)\r\n            }\r\n          }\r\n          exit.message = null\r\n        }\r\n      }\r\n      else {\r\n        // 6: Immovable object message.\r\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\r\n      }\r\n    }\r\n    else {\r\n      // 7: Player is immobilised message.\r\n      msg (player.immobilisedmessage)\r\n    }\r\n  </function>\r\n</asl>\r\n\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>It works for me.</p>\n<p>Here's the proof:</p>\n<details>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/37778322-a2f3901e-2db7-11e8-941e-7b3a279516c5.gif\" alt=\"move_object_east\"></p>\n</details>\n<hr>\n<p>Did you change both scripts I posted?  I don't know why I put \"Hack 1\" and \"Hack 2\"...  You need to change them both.</p>\n<p>Here's the whole game</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"You\"&gt;You&lt;/template&gt;\n  &lt;template name=\"the\"&gt;the&lt;/template&gt;\n  &lt;dynamictemplate name=\"FullInventory\"&gt;WriteVerb(object, \"be\") + \" too heavy to be taken.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"ObjectNotOpen\"&gt;CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"DefaultAsk\"&gt;WriteVerb(object, \"do\") + \" not reply.\"&lt;/dynamictemplate&gt;\n  &lt;game name=\"Test - Npc Move\"&gt;\n    &lt;gameid&gt;d59aebb9-33bb-4b95-8719-89a67c44c6c0&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_lightdark /&gt;\n    &lt;attr name=\"feature_limitinventory\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;marginscolour type=\"string\"&gt;&lt;/marginscolour&gt;\n    &lt;clearscreenonroomenter /&gt;\n    &lt;inituserinterface type=\"script\"&gt;\n    &lt;/inituserinterface&gt;\n  &lt;/game&gt;\n  &lt;command name=\"go\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^go to (?&lt;exit&gt;.*)$|^go (?&lt;exit&gt;.*)$|^(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved&gt;You can't go there.&lt;/unresolved&gt;\n    &lt;script&gt;\n      if (HasString (player, \"immobilisedmessage\")) {\n        msg (player.immobilisedmessage)\n      }\n      else if (exit.visible) {\n        if (exit.locked) {\n          msg (exit.lockmessage)\n        }\n        else if (exit.runscript) {\n          if (HasScript(exit, \"script\")) {\n            do (exit, \"script\")\n          }\n        }\n        else if (exit.lookonly) {\n          msg (\"You can't go there.\")\n        }\n        else {\n          if (HasString(exit, \"message\")) {\n            if (not exit.message = \"\") {\n              if (game.clearscreenonroomenter) {\n                game.currentexitmessage = exit.message\n              }\n              else {\n                msg (exit.message)\n              }\n            }\n          }\n          game.pov.parent = exit.to\n        }\n      }\n      else {\n        msg (\"You can't go there.\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\n      if (not Got(object1)) {\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\n        // 2: Check if you are carrying object1.\n      }\n      else if (GetBoolean(object1, \"tie_able\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 4: Check if you can attach object1 to anything.\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached to anything.\n      }\n      else {\n        // 3: Unattach object1 from what?\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1 from Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*) from (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached.\n      }\n      else if (not HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 3: Check if object2 is attached.\n      }\n      else {\n        // 4: Unattach objects and reset variables.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = false\n        object1.attachedto = null\n        object2.attachedto = null\n        object1.take = true\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1 to Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*) to (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved type=\"string\"&gt;&lt;/unresolved&gt;\n    &lt;script&gt;\n      cc = player.currentcommand\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\n        msg (\"You've already done that.\")\n        // 2: Check if object1 is already attached to object2.\n      }\n      else if (GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\n        // 3: Check if object1 is attached.\n      }\n      else if (HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\n        // 4: Check if object2 is attached.\n      }\n      else if (not object1.parent = player) {\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\n        // 5: Check if you are carrying object1.\n      }\n      else if (not GetBoolean(object1, \"tie_able\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 6: Check if object1 can be attached.\n      }\n      else if (not GetBoolean(object2, \"attachable\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\n        // 7: Check if object2 can be attached.\n      }\n      else {\n        // 8: Success. Attach the two objects.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = true\n        object1.attachedto = object2\n        object2.attachedto = object1\n        object1.parent = player.parent\n        object1.take = false\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1 Direction\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      if (HasAttribute(object1, \"pushable\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\n      }\n      else if (HasAttribute(object1, \"moveable\")) {\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n        do (object1, \"moveable\")\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;maxobjects type=\"int\"&gt;0&lt;/maxobjects&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n      &lt;maxvolume type=\"int\"&gt;1&lt;/maxvolume&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"east\" to=\"room2\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;locked type=\"boolean\"&gt;false&lt;/locked&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"pen\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stone block\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;block&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;pushable /&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n      &lt;climbup type=\"script\"&gt;\n        msg (\"You climb up onto the top of the stone block.\")\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\n        SetObjectFlagOn (player, \"stand\")\n        MakeObjectVisible (lamp)\n      &lt;/climbup&gt;\n      &lt;climbdown type=\"script\"&gt;\n        msg (\"You climb down from the top of the stone block.\")\n        player.immobilisedmessage = null\n        SetObjectFlagOff (player, \"stand\")\n        if (not Got(lamp)) {\n          MakeObjectInvisible (lamp)\n        }\n      &lt;/climbdown&gt;\n    &lt;/object&gt;\n    &lt;object name=\"quinn\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"male\" /&gt;\n      &lt;alias&gt;Quinn&lt;/alias&gt;\n      &lt;look&gt;A mighty Eskimo, of immense stature.&lt;/look&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;/object&gt;\n    &lt;object name=\"branch\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A oak branch.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rope\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;tie_able /&gt;\n      &lt;look&gt;A long length of rope.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"hook\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A plain looking hook.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"cord\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;tie_able /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"string\"&gt;&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rug\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;A very plain looking rug carpet.&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;carpet&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;moveable type=\"script\"&gt;\n        msg (\"A key is revealed.\")\n      &lt;/moveable&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n    &lt;/object&gt;\n    &lt;object name=\"lucy\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;alias&gt;Lucy&lt;/alias&gt;\n      &lt;look&gt;A girl with kaleidoscope eyes, wearing a diamond.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"olivers army\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"maleplural\" /&gt;\n      &lt;alias&gt;Oliver's Army&lt;/alias&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;look&gt;&lt;![CDATA[They're here to stay.&lt;br/&gt;They're on their way.]]&gt;&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;army&lt;/value&gt;\n        &lt;value&gt;goblins&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;dark type=\"boolean\"&gt;false&lt;/dark&gt;\n    &lt;exit alias=\"west\" to=\"room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"shelf\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"surface\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;look type=\"script\"&gt;&lt;![CDATA[\n        if (GetBoolean(player, \"stand\")) {\n          msg (\"A wooden shelf.\")\n        }\n        else {\n          msg (\"A wooden shelf.&lt;br/&gt;The shelf is too high for you to see what, if anything is on it.\")\n        }\n      ]]&gt;&lt;/look&gt;\n      &lt;object name=\"lamp\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"switchable\" /&gt;\n        &lt;take /&gt;\n        &lt;feature_switchable /&gt;\n        &lt;feature_lightdark /&gt;\n        &lt;lightstrength&gt;strong&lt;/lightstrength&gt;\n        &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n        &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n        &lt;onswitchon type=\"script\"&gt;\n          this.lightsource = true\n        &lt;/onswitchon&gt;\n        &lt;onswitchoff type=\"script\"&gt;\n          this.lightsource = false\n        &lt;/onswitchoff&gt;\n        &lt;ontake type=\"script\"&gt;\n        &lt;/ontake&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"CmdNpcPushObjDir\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      PushPullMoveObjDir (text, object2, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbup&lt;/property&gt;\n    &lt;pattern&gt;climb up; climb on; stand; stand on; get on&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbdown&lt;/property&gt;\n    &lt;pattern&gt;climb down; climb off; get off&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb down; climb off; get off \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\"&gt;\n    // Doctor Agon. GetCmdVerb Inspired by KV.\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"push\")) {\n      return (\"push\")\n    }\n    else if (StartsWith(cc, \"pull\")) {\n      return (\"pull\")\n    }\n    else if (StartsWith(cc, \"move\")) {\n      return (\"move\")\n    }\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"tie\")) {\n      return (\"tie\")\n    }\n    else if (StartsWith(cc, \"attach\")) {\n      return (\"attach\")\n    }\n    else if (StartsWith(cc, \"fasten\")) {\n      return (\"fasten\")\n    }\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"untie\")) {\n      return (\"untie\")\n    }\n    else if (StartsWith(cc, \"unattach\")) {\n      return (\"unattach\")\n    }\n    else if (StartsWith(cc, \"unfasten\")) {\n      return (\"unfasten\")\n    }\n  &lt;/function&gt;\n  &lt;function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\"&gt;\n    result = pre + \" \" + con + \" \"\n    result = result + mid + \" \"\n    result = result + GetDisplayAlias(obj) + \" \"\n    result = result + dir.alias\n    result = result + post\n    return (result)\n  &lt;/function&gt;\n  &lt;function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    return (CapFirst(obj.gender))\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    gender = obj.gender\n    if (gender = \"he\" or gender = \"she\") {\n      gender = \"it\"\n    }\n    switch (GetCmdVerb(cc)) {\n      case (\"push\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"es\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"pull\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"move\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate3\" parameters=\"cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    switch (GetCmdVerb(cc)) {\n      case (\"tie\") {\n        return (\"tied\")\n      }\n      case (\"attach\") {\n        return (\"attached\")\n      }\n      case (\"fasten\") {\n        return (\"fastened\")\n      }\n      case (\"untie\") {\n        return (\"tied\")\n      }\n      case (\"unattach\") {\n        return (\"attached\")\n      }\n      case (\"unfasten\") {\n        return (\"fastened\")\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\"&gt;\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n    //cc = player.currentcommand\n    //object2 = obj\n    // 2: Check to see if player is immobilised.\n    if (player.immobilisedmessage = null) {\n      // 3: Checks if the object1 has the attribute 'pushable'.\n      if (HasAttribute(object1, \"pushable\")) {\n        if (game.unresolvedcommand = null) {\n          // 4: Check if exit is locked.\n          if (exit.locked) {\n            msg (exit.lockmessage)\n          }\n          else {\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\n            object1.parent = exit.to\n            if (object2 = player) {\n              HandleSingleCommand (\"go \" + exit.alias)\n            }\n            else {\n              MoveObject (object2, exit.to)\n              msg (exit.message)\n            }\n          }\n          exit.message = null\n        }\n      }\n      else {\n        // 6: Immovable object message.\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\n      }\n    }\n    else {\n      // 7: Player is immobilised message.\n      msg (player.immobilisedmessage)\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-03-22T15:02:53.1240566Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f51c736e-40fa-48a4-81cf-0f629c35ea4f",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks again KV, the first time I saw your 'hacks', I thought it was just the coding you'd changed. Didn't realise you'd changed the parameters too. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks again KV, the first time I saw your 'hacks', I thought it was just the coding you'd changed. Didn't realise you'd changed the parameters too.</p>\n\n",
      "PostDate": "2018-03-23T07:47:54.6889245Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3911fe02-d97a-4fc2-9ae4-149230e9c73d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry about that, DrAgon!\r\n\r\nI normally make sure I point out any parameter changes.  That was my fault.\r\n\r\nYou have NPC slaves now, though.  So, that's a silver lining.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry about that, DrAgon!</p>\n<p>I normally make sure I point out any parameter changes.  That was my fault.</p>\n<p>You have NPC slaves now, though.  So, that's a silver lining.</p>\n\n",
      "PostDate": "2018-03-24T18:15:38.5440778Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "80ff942b-8c9d-4308-8dc3-42a6bb788d39",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Whilst testing this out, I entered the command: **Quinn, push block**\r\nThe game then produced an unexpected error message.\r\n\r\nError running script: Error evaluating expression 'DynamicTemplate(defaulttemplate, object)': No template named 'DefaultTellTo'\r\n\r\nThere is a ```^tell (?<object>.*) about (?<text>.*)$```, which picks up a 'DefaultTell' script.\r\nBut, ```^(tell|ask) (?<object>.*) to (?<text>.*)$```, picks up 'DefaultTellTo' instead.\r\n\r\nIs it the same message 'DefaultTell', or are they two different messages? \r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Whilst testing this out, I entered the command: <strong>Quinn, push block</strong><br>\nThe game then produced an unexpected error message.</p>\n<p>Error running script: Error evaluating expression 'DynamicTemplate(defaulttemplate, object)': No template named 'DefaultTellTo'</p>\n<p>There is a <code>^tell (?&lt;object&gt;.*) about (?&lt;text&gt;.*)$</code>, which picks up a 'DefaultTell' script.<br>\nBut, <code>^(tell|ask) (?&lt;object&gt;.*) to (?&lt;text&gt;.*)$</code>, picks up 'DefaultTellTo' instead.</p>\n<p>Is it the same message 'DefaultTell', or are they two different messages?</p>\n\n",
      "PostDate": "2018-03-25T18:42:55.5810089Z",
      "LastEditDate": "2018-03-25T19:05:03.7130992Z",
      "link": null
    },
    {
      "PostId": "6d28014d-a24e-4f93-ad51-98fe0392e9d3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Did you change the command pattern?  (I did.)\r\n\r\nYou originally had this:\r\n\r\n```\r\n<pattern type=\"string\"><![CDATA[^(?<object2>.*):(push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n```\r\n\r\n---\r\nThat only handled \"Quinn:push the thing east\"\r\n\r\n...so I changed it to this:\r\n\r\n```\r\n<pattern type=\"string\"><![CDATA[^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Did you change the command pattern?  (I did.)</p>\n<p>You originally had this:</p>\n<pre><code>&lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*):(push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n</code></pre>\n<hr>\n<p>That only handled \"Quinn:push the thing east\"</p>\n<p>...so I changed it to this:</p>\n<pre><code>&lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-25T20:05:31.5686748Z",
      "LastEditDate": "2018-03-25T20:26:51.1395271Z",
      "link": null
    },
    {
      "PostId": "e727603f-2032-412f-bc72-51810788efa5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Upon reflection, I'd make that:\r\n\r\n\r\n**EDITED (and tested)**\r\n```\r\n^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (towards the |to the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?<object2>.*) to (?<text>push|pull|move) (?<object1>.*) (towards the |to the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Upon reflection, I'd make that:</p>\n<p><strong>EDITED (and tested)</strong></p>\n<pre><code>^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (towards the |to the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?&lt;object2&gt;.*) to (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (towards the |to the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$\n</code></pre>\n\n",
      "PostDate": "2018-03-25T20:07:42.6484372Z",
      "LastEditDate": "2018-03-25T20:21:08.5235725Z",
      "link": null
    },
    {
      "PostId": "19bde8d5-a226-4f39-9969-9b085dec1543",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The entire game:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <template name=\"You\">You</template>\r\n  <template name=\"the\">the</template>\r\n  <dynamictemplate name=\"FullInventory\">WriteVerb(object, \"be\") + \" too heavy to be taken.\"</dynamictemplate>\r\n  <dynamictemplate name=\"ObjectNotOpen\">CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"</dynamictemplate>\r\n  <dynamictemplate name=\"DefaultAsk\">WriteVerb(object, \"do\") + \" not reply.\"</dynamictemplate>\r\n  <game name=\"Test - Npc Move\">\r\n    <gameid>d59aebb9-33bb-4b95-8719-89a67c44c6c0</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <feature_lightdark />\r\n    <attr name=\"feature_limitinventory\" type=\"boolean\">false</attr>\r\n    <feature_advancedscripts />\r\n    <marginscolour type=\"string\"></marginscolour>\r\n    <clearscreenonroomenter />\r\n  </game>\r\n  <command name=\"go\">\r\n    <pattern type=\"string\"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <unresolved>You can't go there.</unresolved>\r\n    <script>\r\n      if (HasString (player, \"immobilisedmessage\")) {\r\n        msg (player.immobilisedmessage)\r\n      }\r\n      else if (exit.visible) {\r\n        if (exit.locked) {\r\n          msg (exit.lockmessage)\r\n        }\r\n        else if (exit.runscript) {\r\n          if (HasScript(exit, \"script\")) {\r\n            do (exit, \"script\")\r\n          }\r\n        }\r\n        else if (exit.lookonly) {\r\n          msg (\"You can't go there.\")\r\n        }\r\n        else {\r\n          if (HasString(exit, \"message\")) {\r\n            if (not exit.message = \"\") {\r\n              if (game.clearscreenonroomenter) {\r\n                game.currentexitmessage = exit.message\r\n              }\r\n              else {\r\n                msg (exit.message)\r\n              }\r\n            }\r\n          }\r\n          game.pov.parent = exit.to\r\n        }\r\n      }\r\n      else {\r\n        msg (\"You can't go there.\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\r\n      if (not Got(object1)) {\r\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\r\n        // 2: Check if you are carrying object1.\r\n      }\r\n      else if (GetBoolean(object1, \"tie_able\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\r\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 4: Check if you can attach object1 to anything.\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached to anything.\r\n      }\r\n      else {\r\n        // 3: Unattach object1 from what?\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdUntie Object1 from Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(untie|unattach|unfasten) (?<object1>.*) from (?<object2>.*)$]]></pattern>\r\n    <script>\r\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\r\n      if (not GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 2: Check if object1 is attached.\r\n      }\r\n      else if (not HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\r\n        // 3: Check if object2 is attached.\r\n      }\r\n      else {\r\n        // 4: Unattach objects and reset variables.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = false\r\n        object1.attachedto = null\r\n        object2.attachedto = null\r\n        object1.take = true\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdTie Object1 to Object2\">\r\n    <pattern type=\"string\"><![CDATA[^(tie|attach|fasten) (?<object1>.*) to (?<object2>.*)$]]></pattern>\r\n    <unresolved type=\"string\"></unresolved>\r\n    <script>\r\n      cc = player.currentcommand\r\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\r\n        msg (\"You've already done that.\")\r\n        // 2: Check if object1 is already attached to object2.\r\n      }\r\n      else if (GetBoolean(object1, \"tiedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\r\n        // 3: Check if object1 is attached.\r\n      }\r\n      else if (HasAttribute(object2, \"attachedto\")) {\r\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\r\n        // 4: Check if object2 is attached.\r\n      }\r\n      else if (not object1.parent = player) {\r\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\r\n        // 5: Check if you are carrying object1.\r\n      }\r\n      else if (not GetBoolean(object1, \"tie_able\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\r\n        // 6: Check if object1 can be attached.\r\n      }\r\n      else if (not GetBoolean(object2, \"attachable\")) {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\r\n        // 7: Check if object2 can be attached.\r\n      }\r\n      else {\r\n        // 8: Success. Attach the two objects.\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\r\n        object1.tiedto = true\r\n        object1.attachedto = object2\r\n        object2.attachedto = object1\r\n        object1.parent = player.parent\r\n        object1.take = false\r\n      }\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1 Direction\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\r\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\r\n    </script>\r\n  </command>\r\n  <command name=\"CmdPush Object1\">\r\n    <pattern type=\"string\"><![CDATA[^(push|pull|move) (?<object1>.*)$]]></pattern>\r\n    <script>\r\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n      cc = player.currentcommand\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\r\n      }\r\n      else if (HasAttribute(object1, \"moveable\")) {\r\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n        do (object1, \"moveable\")\r\n      }\r\n      else {\r\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\r\n      }\r\n    </script>\r\n  </command>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <maxobjects type=\"int\">0</maxobjects>\r\n      <volume type=\"int\">0</volume>\r\n      <maxvolume type=\"int\">1</maxvolume>\r\n    </object>\r\n    <exit alias=\"east\" to=\"room2\">\r\n      <inherit name=\"eastdirection\" />\r\n      <locked type=\"boolean\">false</locked>\r\n    </exit>\r\n    <object name=\"pen\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <volume type=\"int\">0</volume>\r\n    </object>\r\n    <object name=\"stone block\">\r\n      <inherit name=\"editor_object\" />\r\n      <alt type=\"stringlist\">\r\n        <value>block</value>\r\n      </alt>\r\n      <pushable />\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n      <climbup type=\"script\">\r\n        msg (\"You climb up onto the top of the stone block.\")\r\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\r\n        SetObjectFlagOn (player, \"stand\")\r\n        MakeObjectVisible (lamp)\r\n      </climbup>\r\n      <climbdown type=\"script\">\r\n        msg (\"You climb down from the top of the stone block.\")\r\n        player.immobilisedmessage = null\r\n        SetObjectFlagOff (player, \"stand\")\r\n        if (not Got(lamp)) {\r\n          MakeObjectInvisible (lamp)\r\n        }\r\n      </climbdown>\r\n    </object>\r\n    <object name=\"quinn\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"male\" />\r\n      <alias>Quinn</alias>\r\n      <look>A mighty Eskimo, of immense stature.</look>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    </object>\r\n    <object name=\"branch\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A oak branch.</look>\r\n    </object>\r\n    <object name=\"rope\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <tie_able />\r\n      <look>A long length of rope.</look>\r\n    </object>\r\n    <object name=\"hook\">\r\n      <inherit name=\"editor_object\" />\r\n      <attachable />\r\n      <look>A plain looking hook.</look>\r\n    </object>\r\n    <object name=\"cord\">\r\n      <inherit name=\"editor_object\" />\r\n      <tie_able />\r\n      <take />\r\n      <look type=\"string\"></look>\r\n    </object>\r\n    <object name=\"rug\">\r\n      <inherit name=\"editor_object\" />\r\n      <look>A very plain looking rug carpet.</look>\r\n      <alt type=\"stringlist\">\r\n        <value>carpet</value>\r\n      </alt>\r\n      <moveable type=\"script\">\r\n        msg (\"A key is revealed.\")\r\n      </moveable>\r\n      <push type=\"script\">\r\n        cc = player.currentcommand\r\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\r\n      </push>\r\n      <pull type=\"script\">\r\n        do (this, \"push\")\r\n      </pull>\r\n      <move type=\"script\">\r\n        do (this, \"push\")\r\n      </move>\r\n    </object>\r\n    <object name=\"lucy\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <alias>Lucy</alias>\r\n      <look>A girl with kaleidoscope eyes, wearing a diamond.</look>\r\n    </object>\r\n    <object name=\"olivers army\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"maleplural\" />\r\n      <alias>Oliver's Army</alias>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <look><![CDATA[They're here to stay.<br/>They're on their way.]]></look>\r\n      <alt type=\"stringlist\">\r\n        <value>army</value>\r\n        <value>goblins</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n  <object name=\"room2\">\r\n    <inherit name=\"editor_room\" />\r\n    <dark type=\"boolean\">false</dark>\r\n    <exit alias=\"west\" to=\"room\">\r\n      <inherit name=\"westdirection\" />\r\n    </exit>\r\n    <object name=\"shelf\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"surface\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <look type=\"script\"><![CDATA[\r\n        if (GetBoolean(player, \"stand\")) {\r\n          msg (\"A wooden shelf.\")\r\n        }\r\n        else {\r\n          msg (\"A wooden shelf.<br/>The shelf is too high for you to see what, if anything is on it.\")\r\n        }\r\n      ]]></look>\r\n      <object name=\"lamp\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"switchable\" />\r\n        <take />\r\n        <feature_switchable />\r\n        <feature_lightdark />\r\n        <lightstrength>strong</lightstrength>\r\n        <volume type=\"int\">0</volume>\r\n        <visible type=\"boolean\">false</visible>\r\n        <onswitchon type=\"script\">\r\n          this.lightsource = true\r\n        </onswitchon>\r\n        <onswitchoff type=\"script\">\r\n          this.lightsource = false\r\n        </onswitchoff>\r\n        <ontake type=\"script\">\r\n        </ontake>\r\n      </object>\r\n    </object>\r\n  </object>\r\n  <command name=\"CmdNpcPushObjDir\">\r\n    <pattern type=\"string\"><![CDATA[^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (towards the |to the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?<object2>.*) to (?<text>push|pull|move) (?<object1>.*) (towards the |to the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>\r\n    <script>\r\n      PushPullMoveObjDir (text, object2, object1, exit)\r\n    </script>\r\n  </command>\r\n  <verb>\r\n    <property>climbup</property>\r\n    <pattern>climb up; climb on; stand; stand on; get on</pattern>\r\n    <defaultexpression>\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>climbdown</property>\r\n    <pattern>climb down; climb off; get off</pattern>\r\n    <defaultexpression>\"You can't climb down; climb off; get off \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\">\r\n    // Doctor Agon. GetCmdVerb Inspired by KV.\r\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\r\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"push\")) {\r\n      return (\"push\")\r\n    }\r\n    else if (StartsWith(cc, \"pull\")) {\r\n      return (\"pull\")\r\n    }\r\n    else if (StartsWith(cc, \"move\")) {\r\n      return (\"move\")\r\n    }\r\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"tie\")) {\r\n      return (\"tie\")\r\n    }\r\n    else if (StartsWith(cc, \"attach\")) {\r\n      return (\"attach\")\r\n    }\r\n    else if (StartsWith(cc, \"fasten\")) {\r\n      return (\"fasten\")\r\n    }\r\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\r\n    if (StartsWith(cc, \"untie\")) {\r\n      return (\"untie\")\r\n    }\r\n    else if (StartsWith(cc, \"unattach\")) {\r\n      return (\"unattach\")\r\n    }\r\n    else if (StartsWith(cc, \"unfasten\")) {\r\n      return (\"unfasten\")\r\n    }\r\n  </function>\r\n  <function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\">\r\n    result = pre + \" \" + con + \" \"\r\n    result = result + mid + \" \"\r\n    result = result + GetDisplayAlias(obj) + \" \"\r\n    result = result + dir.alias\r\n    result = result + post\r\n    return (result)\r\n  </function>\r\n  <function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    return (CapFirst(obj.gender))\r\n  </function>\r\n  <function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    gender = obj.gender\r\n    if (gender = \"he\" or gender = \"she\") {\r\n      gender = \"it\"\r\n    }\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"push\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"es\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"pull\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      case (\"move\") {\r\n        switch (gender) {\r\n          case (\"it\") {\r\n            return (GetCmdVerb(cc)+\"s\")\r\n          }\r\n          default {\r\n            return (GetCmdVerb(cc))\r\n          }\r\n        }\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"Conjugate3\" parameters=\"cc\" type=\"string\">\r\n    // Pixie inspired coding.\r\n    switch (GetCmdVerb(cc)) {\r\n      case (\"tie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"attach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"fasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      case (\"untie\") {\r\n        return (\"tied\")\r\n      }\r\n      case (\"unattach\") {\r\n        return (\"attached\")\r\n      }\r\n      case (\"unfasten\") {\r\n        return (\"fastened\")\r\n      }\r\n      default {\r\n        return (GetCmdVerb(cc))\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\">\r\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\r\n    // cc = player.currentcommand\r\n    // object2 = obj\r\n    // 2: Check to see if player is immobilised.\r\n    if (player.immobilisedmessage = null) {\r\n      // 3: Checks if the object1 has the attribute 'pushable'.\r\n      if (HasAttribute(object1, \"pushable\")) {\r\n        if (game.unresolvedcommand = null) {\r\n          // 4: Check if exit is locked.\r\n          if (exit.locked) {\r\n            msg (exit.lockmessage)\r\n          }\r\n          else {\r\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\r\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\r\n            object1.parent = exit.to\r\n            if (object2 = player) {\r\n              HandleSingleCommand (\"go \" + exit.alias)\r\n            }\r\n            else {\r\n              MoveObject (object2, exit.to)\r\n              msg (exit.message)\r\n            }\r\n          }\r\n          exit.message = null\r\n        }\r\n      }\r\n      else {\r\n        // 6: Immovable object message.\r\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\r\n      }\r\n    }\r\n    else {\r\n      // 7: Player is immobilised message.\r\n      msg (player.immobilisedmessage)\r\n    }\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>The entire game:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.7.6606.27193--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;template name=\"You\"&gt;You&lt;/template&gt;\n  &lt;template name=\"the\"&gt;the&lt;/template&gt;\n  &lt;dynamictemplate name=\"FullInventory\"&gt;WriteVerb(object, \"be\") + \" too heavy to be taken.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"ObjectNotOpen\"&gt;CapFirst(GetDisplayAlias(object)) + \" \" + Conjugate(object, \"be\") + \" not open.\"&lt;/dynamictemplate&gt;\n  &lt;dynamictemplate name=\"DefaultAsk\"&gt;WriteVerb(object, \"do\") + \" not reply.\"&lt;/dynamictemplate&gt;\n  &lt;game name=\"Test - Npc Move\"&gt;\n    &lt;gameid&gt;d59aebb9-33bb-4b95-8719-89a67c44c6c0&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;feature_lightdark /&gt;\n    &lt;attr name=\"feature_limitinventory\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;marginscolour type=\"string\"&gt;&lt;/marginscolour&gt;\n    &lt;clearscreenonroomenter /&gt;\n  &lt;/game&gt;\n  &lt;command name=\"go\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^go to (?&lt;exit&gt;.*)$|^go (?&lt;exit&gt;.*)$|^(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved&gt;You can't go there.&lt;/unresolved&gt;\n    &lt;script&gt;\n      if (HasString (player, \"immobilisedmessage\")) {\n        msg (player.immobilisedmessage)\n      }\n      else if (exit.visible) {\n        if (exit.locked) {\n          msg (exit.lockmessage)\n        }\n        else if (exit.runscript) {\n          if (HasScript(exit, \"script\")) {\n            do (exit, \"script\")\n          }\n        }\n        else if (exit.lookonly) {\n          msg (\"You can't go there.\")\n        }\n        else {\n          if (HasString(exit, \"message\")) {\n            if (not exit.message = \"\") {\n              if (game.clearscreenonroomenter) {\n                game.currentexitmessage = exit.message\n              }\n              else {\n                msg (exit.message)\n              }\n            }\n          }\n          game.pov.parent = exit.to\n        }\n      }\n      else {\n        msg (\"You can't go there.\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (tie/attach/fasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (tie/attach/fasten).\n      if (not Got(object1)) {\n        msg (\"You are not carrying the \" + GetDisplayAlias(object1) + \".\")\n        // 2: Check if you are carrying object1.\n      }\n      else if (GetBoolean(object1, \"tie_able\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" to what?\")\n        // 3: Check if you can attach object1 to anything. What do you want it attached to?\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 4: Check if you can attach object1 to anything.\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached to anything.\n      }\n      else {\n        // 3: Unattach object1 from what?\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" from what?\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdUntie Object1 from Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(untie|unattach|unfasten) (?&lt;object1&gt;.*) from (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: Checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      // The function GetCmdVerb(cc) is used to display (untie/unattach/unfasten).\n      if (not GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 2: Check if object1 is attached.\n      }\n      else if (not HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is not \" + Conjugate3(cc) + \" to anything.\")\n        // 3: Check if object2 is attached.\n      }\n      else {\n        // 4: Unattach objects and reset variables.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" from the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = false\n        object1.attachedto = null\n        object2.attachedto = null\n        object1.take = true\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdTie Object1 to Object2\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(tie|attach|fasten) (?&lt;object1&gt;.*) to (?&lt;object2&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;unresolved type=\"string\"&gt;&lt;/unresolved&gt;\n    &lt;script&gt;\n      cc = player.currentcommand\n      if (GetBoolean(object1, \"tiedto\") and (object1.attachedto = object2)) {\n        msg (\"You've already done that.\")\n        // 2: Check if object1 is already attached to object2.\n      }\n      else if (GetBoolean(object1, \"tiedto\")) {\n        msg (\"The \" + GetDisplayAlias(object1) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object1.attachedto) + \".\")\n        // 3: Check if object1 is attached.\n      }\n      else if (HasAttribute(object2, \"attachedto\")) {\n        msg (\"The \" + GetDisplayAlias(object2) + \" is already \" + Conjugate3(cc) + \" to the \" + GetDisplayAlias(object2.attachedto) + \".\")\n        // 4: Check if object2 is attached.\n      }\n      else if (not object1.parent = player) {\n        msg (\"You are not holding \" + GetDisplayName(object1) + \".\")\n        // 5: Check if you are carrying object1.\n      }\n      else if (not GetBoolean(object1, \"tie_able\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to anything.\")\n        // 6: Check if object1 can be attached.\n      }\n      else if (not GetBoolean(object2, \"attachable\")) {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" anything to the \" + GetDisplayAlias(object2) + \".\")\n        // 7: Check if object2 can be attached.\n      }\n      else {\n        // 8: Success. Attach the two objects.\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" to the \" + GetDisplayAlias(object2) + \".\")\n        object1.tiedto = true\n        object1.attachedto = object2\n        object2.attachedto = object1\n        object1.parent = player.parent\n        object1.take = false\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1 Direction\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // Testing: Change 'player' to 'quinn', 'lucy' or 'olivers army' to get an idea of how CmdNpcPushObjDir should work.\n      PushPullMoveObjDir (player.currentcommand, player, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"CmdPush Object1\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(push|pull|move) (?&lt;object1&gt;.*)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n      cc = player.currentcommand\n      if (HasAttribute(object1, \"pushable\")) {\n        msg (GetCmdVerb(cc) + \" \" + GetDisplayAlias(object1) + \" where?\")\n      }\n      else if (HasAttribute(object1, \"moveable\")) {\n        msg (\"You \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n        do (object1, \"moveable\")\n      }\n      else {\n        msg (\"You cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \".\")\n      }\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;maxobjects type=\"int\"&gt;0&lt;/maxobjects&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n      &lt;maxvolume type=\"int\"&gt;1&lt;/maxvolume&gt;\n    &lt;/object&gt;\n    &lt;exit alias=\"east\" to=\"room2\"&gt;\n      &lt;inherit name=\"eastdirection\" /&gt;\n      &lt;locked type=\"boolean\"&gt;false&lt;/locked&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"pen\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stone block\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;block&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;pushable /&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n      &lt;climbup type=\"script\"&gt;\n        msg (\"You climb up onto the top of the stone block.\")\n        player.immobilisedmessage = \"You cannot move whilst standing on top of a stone block.\"\n        SetObjectFlagOn (player, \"stand\")\n        MakeObjectVisible (lamp)\n      &lt;/climbup&gt;\n      &lt;climbdown type=\"script\"&gt;\n        msg (\"You climb down from the top of the stone block.\")\n        player.immobilisedmessage = null\n        SetObjectFlagOff (player, \"stand\")\n        if (not Got(lamp)) {\n          MakeObjectInvisible (lamp)\n        }\n      &lt;/climbdown&gt;\n    &lt;/object&gt;\n    &lt;object name=\"quinn\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"male\" /&gt;\n      &lt;alias&gt;Quinn&lt;/alias&gt;\n      &lt;look&gt;A mighty Eskimo, of immense stature.&lt;/look&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;/object&gt;\n    &lt;object name=\"branch\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A oak branch.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rope\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;tie_able /&gt;\n      &lt;look&gt;A long length of rope.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"hook\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;attachable /&gt;\n      &lt;look&gt;A plain looking hook.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"cord\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;tie_able /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"string\"&gt;&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"rug\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look&gt;A very plain looking rug carpet.&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;carpet&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;moveable type=\"script\"&gt;\n        msg (\"A key is revealed.\")\n      &lt;/moveable&gt;\n      &lt;push type=\"script\"&gt;\n        cc = player.currentcommand\n        HandleSingleCommand (\"CmdPush Object1\" + cc)\n      &lt;/push&gt;\n      &lt;pull type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/pull&gt;\n      &lt;move type=\"script\"&gt;\n        do (this, \"push\")\n      &lt;/move&gt;\n    &lt;/object&gt;\n    &lt;object name=\"lucy\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;alias&gt;Lucy&lt;/alias&gt;\n      &lt;look&gt;A girl with kaleidoscope eyes, wearing a diamond.&lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"olivers army\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"maleplural\" /&gt;\n      &lt;alias&gt;Oliver's Army&lt;/alias&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;look&gt;&lt;![CDATA[They're here to stay.&lt;br/&gt;They're on their way.]]&gt;&lt;/look&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;army&lt;/value&gt;\n        &lt;value&gt;goblins&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"room2\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;dark type=\"boolean\"&gt;false&lt;/dark&gt;\n    &lt;exit alias=\"west\" to=\"room\"&gt;\n      &lt;inherit name=\"westdirection\" /&gt;\n    &lt;/exit&gt;\n    &lt;object name=\"shelf\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"surface\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;look type=\"script\"&gt;&lt;![CDATA[\n        if (GetBoolean(player, \"stand\")) {\n          msg (\"A wooden shelf.\")\n        }\n        else {\n          msg (\"A wooden shelf.&lt;br/&gt;The shelf is too high for you to see what, if anything is on it.\")\n        }\n      ]]&gt;&lt;/look&gt;\n      &lt;object name=\"lamp\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"switchable\" /&gt;\n        &lt;take /&gt;\n        &lt;feature_switchable /&gt;\n        &lt;feature_lightdark /&gt;\n        &lt;lightstrength&gt;strong&lt;/lightstrength&gt;\n        &lt;volume type=\"int\"&gt;0&lt;/volume&gt;\n        &lt;visible type=\"boolean\"&gt;false&lt;/visible&gt;\n        &lt;onswitchon type=\"script\"&gt;\n          this.lightsource = true\n        &lt;/onswitchon&gt;\n        &lt;onswitchoff type=\"script\"&gt;\n          this.lightsource = false\n        &lt;/onswitchoff&gt;\n        &lt;ontake type=\"script\"&gt;\n        &lt;/ontake&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"CmdNpcPushObjDir\"&gt;\n    &lt;pattern type=\"string\"&gt;&lt;![CDATA[^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (towards the |to the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?&lt;object2&gt;.*) to (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (towards the |to the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]&gt;&lt;/pattern&gt;\n    &lt;script&gt;\n      PushPullMoveObjDir (text, object2, object1, exit)\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbup&lt;/property&gt;\n    &lt;pattern&gt;climb up; climb on; stand; stand on; get on&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb up; climb on; stand; stand on; get on \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;climbdown&lt;/property&gt;\n    &lt;pattern&gt;climb down; climb off; get off&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't climb down; climb off; get off \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;function name=\"GetCmdVerb\" parameters=\"cc\" type=\"string\"&gt;\n    // Doctor Agon. GetCmdVerb Inspired by KV.\n    // 1: Set Variable cc=player.currentcommand. Use GetCmdVerb(cc) in script calling function.\n    // 2: This section checks for the command used (push/pull/move) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"push\")) {\n      return (\"push\")\n    }\n    else if (StartsWith(cc, \"pull\")) {\n      return (\"pull\")\n    }\n    else if (StartsWith(cc, \"move\")) {\n      return (\"move\")\n    }\n    // 3: This section checks for the command used (tie/attach/fasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"tie\")) {\n      return (\"tie\")\n    }\n    else if (StartsWith(cc, \"attach\")) {\n      return (\"attach\")\n    }\n    else if (StartsWith(cc, \"fasten\")) {\n      return (\"fasten\")\n    }\n    // 4: This section checks for the command used (untie/unattach/unfasten) and puts it into the variable 'cmdverb'.\n    if (StartsWith(cc, \"untie\")) {\n      return (\"untie\")\n    }\n    else if (StartsWith(cc, \"unattach\")) {\n      return (\"unattach\")\n    }\n    else if (StartsWith(cc, \"unfasten\")) {\n      return (\"unfasten\")\n    }\n  &lt;/function&gt;\n  &lt;function name=\"FormatCmdVerb\" parameters=\"pre, con, mid, obj, dir, post\" type=\"string\"&gt;\n    result = pre + \" \" + con + \" \"\n    result = result + mid + \" \"\n    result = result + GetDisplayAlias(obj) + \" \"\n    result = result + dir.alias\n    result = result + post\n    return (result)\n  &lt;/function&gt;\n  &lt;function name=\"WriteVerb2\" parameters=\"obj\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    return (CapFirst(obj.gender))\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate2\" parameters=\"obj, cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    gender = obj.gender\n    if (gender = \"he\" or gender = \"she\") {\n      gender = \"it\"\n    }\n    switch (GetCmdVerb(cc)) {\n      case (\"push\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"es\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"pull\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      case (\"move\") {\n        switch (gender) {\n          case (\"it\") {\n            return (GetCmdVerb(cc)+\"s\")\n          }\n          default {\n            return (GetCmdVerb(cc))\n          }\n        }\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"Conjugate3\" parameters=\"cc\" type=\"string\"&gt;\n    // Pixie inspired coding.\n    switch (GetCmdVerb(cc)) {\n      case (\"tie\") {\n        return (\"tied\")\n      }\n      case (\"attach\") {\n        return (\"attached\")\n      }\n      case (\"fasten\") {\n        return (\"fastened\")\n      }\n      case (\"untie\") {\n        return (\"tied\")\n      }\n      case (\"unattach\") {\n        return (\"attached\")\n      }\n      case (\"unfasten\") {\n        return (\"fastened\")\n      }\n      default {\n        return (GetCmdVerb(cc))\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"PushPullMoveObjDir\" parameters=\"cc, object2, object1, exit\"&gt;\n    // 1: This section checks for the command used (push/pull/move) and puts it into the variable 'cc'.\n    // cc = player.currentcommand\n    // object2 = obj\n    // 2: Check to see if player is immobilised.\n    if (player.immobilisedmessage = null) {\n      // 3: Checks if the object1 has the attribute 'pushable'.\n      if (HasAttribute(object1, \"pushable\")) {\n        if (game.unresolvedcommand = null) {\n          // 4: Check if exit is locked.\n          if (exit.locked) {\n            msg (exit.lockmessage)\n          }\n          else {\n            // 5: Sets the exit.message, moves the object in the direction indicated, moves object2(player/npc) in the direction indicated, resets exit.message.\n            exit.message = FormatCmdVerb(WriteVerb2(object2),Conjugate2(object2,cc),Template(\"the\"),object1,exit,\".\")\n            object1.parent = exit.to\n            if (object2 = player) {\n              HandleSingleCommand (\"go \" + exit.alias)\n            }\n            else {\n              MoveObject (object2, exit.to)\n              msg (exit.message)\n            }\n          }\n          exit.message = null\n        }\n      }\n      else {\n        // 6: Immovable object message.\n        msg (WriteVerb2(object2) + \" cannot \" + GetCmdVerb(cc) + \" the \" + GetDisplayAlias(object1) + \" \" + exit.alias + \".\")\n      }\n    }\n    else {\n      // 7: Player is immobilised message.\n      msg (player.immobilisedmessage)\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-03-25T20:24:02.5970358Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1519c6d1-1c66-49ba-ac18-9bf364fb467b",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Doing ```tell Quinn to push stone block towards the east```, results in a message \"I can't see that(stone block towards the)\".\r\n\r\nEven tried typing ```tell Quinn to push block```, received same error message as before.\r\n```Tell Quinn to kick``` or ```Tell Quinn to move``` all result in the same error message.\r\n\r\nThere is no Dynamic Template for ```'DefaultTellTo'```.\r\n\r\nSetting this up in the game will be the following template, which solves the problem\r\n\r\n```\r\n<dynamictemplate name=\"DefaultTellTo\">WriteVerb(object, \"do\") + \" nothing.\"</dynamictemplate>\r\n```\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Doing <code>tell Quinn to push stone block towards the east</code>, results in a message \"I can't see that(stone block towards the)\".</p>\n<p>Even tried typing <code>tell Quinn to push block</code>, received same error message as before.<br>\n<code>Tell Quinn to kick</code> or <code>Tell Quinn to move</code> all result in the same error message.</p>\n<p>There is no Dynamic Template for <code>'DefaultTellTo'</code>.</p>\n<p>Setting this up in the game will be the following template, which solves the problem</p>\n<pre><code>&lt;dynamictemplate name=\"DefaultTellTo\"&gt;WriteVerb(object, \"do\") + \" nothing.\"&lt;/dynamictemplate&gt;\n</code></pre>\n\n",
      "PostDate": "2018-03-25T22:27:15.656834Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "73f9f786-c90e-4be6-b189-d6214968120e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "\\> quinn, move the block to the east\r\nI can't see that. (the block to the)\r\n\r\n\\> tell quinn to move the block to the east\r\nI can't see that. (the block to the)\r\n\r\n\\> tell quinn to move block east\r\nHe moves the stone block east.\r\n\r\n\\> undo\r\nUndo: tell quinn to move block east\r\n\r\n\\> quinn, move the block east\r\nHe moves the stone block east.\r\n\r\n---\r\nHrmm...\r\n\r\nThe Regex matching is trying to include the text after object1.  I may be able to fix that.\r\n\r\n---\r\nDefaultTellTo (which doesn't exist by default, but I think the pull request has already been merged) will take over if the command doesn't match the pattern (like when we leave off a direction at the end).\r\n\r\nYou can add a template to handle that, or add the default script to each NPC.  (The template would be easier.)\r\n\r\nUPDATE:  Whoops!  I see your other post now.  You've already got the template down.",
      "EditableFormat": "markdown",
      "HTML": "<p>&gt; quinn, move the block to the east<br>\nI can't see that. (the block to the)</p>\n<p>&gt; tell quinn to move the block to the east<br>\nI can't see that. (the block to the)</p>\n<p>&gt; tell quinn to move block east<br>\nHe moves the stone block east.</p>\n<p>&gt; undo<br>\nUndo: tell quinn to move block east</p>\n<p>&gt; quinn, move the block east<br>\nHe moves the stone block east.</p>\n<hr>\n<p>Hrmm...</p>\n<p>The Regex matching is trying to include the text after object1.  I may be able to fix that.</p>\n<hr>\n<p>DefaultTellTo (which doesn't exist by default, but I think the pull request has already been merged) will take over if the command doesn't match the pattern (like when we leave off a direction at the end).</p>\n<p>You can add a template to handle that, or add the default script to each NPC.  (The template would be easier.)</p>\n<p>UPDATE:  Whoops!  I see your other post now.  You've already got the template down.</p>\n\n",
      "PostDate": "2018-03-26T00:11:09.0517466Z",
      "LastEditDate": "2018-03-26T00:44:32.7567324Z",
      "link": null
    },
    {
      "PostId": "57f943be-2eef-429c-9be0-8a81cd8eeed5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay:\r\n\r\n```\r\n^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) to(wards|) (the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(?<object2>.*), (?<text>push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?<object2>.*) to (?<text>push|pull|move) (?<object1>.*) to(wards|) (the |)(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?<object2>.*) (towards|to) (?<text>push|pull|move) (?<object1>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$\r\n```\r\n\r\n---\r\n```\r\n\r\n> quinn, move block east\r\nHe moves the stone block east.\r\n\r\n> undo\r\nUndo: quinn, move block east\r\n\r\n> quinn, move block to the east\r\nHe moves the stone block east.\r\n\r\n> undo\r\nUndo: quinn, move block to the east\r\n\r\n> quinn, move block towards the east\r\nHe moves the stone block east.\r\n\r\n> undo\r\nUndo: quinn, move block towards the east\r\n\r\n> tell quinn to move the block towards the east\r\nHe moves the stone block east.\r\n\r\n> undo\r\nUndo: tell quinn to move the block towards the east\r\n\r\n> tell quinn to move the block east\r\nHe moves the stone block east.ne block east.\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay:</p>\n<pre><code>^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) to(wards|) (the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(?&lt;object2&gt;.*), (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?&lt;object2&gt;.*) to (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) to(wards|) (the |)(?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$|^(ask|tell|order|command) (?&lt;object2&gt;.*) (towards|to) (?&lt;text&gt;push|pull|move) (?&lt;object1&gt;.*) (?&lt;exit&gt;north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$\n</code></pre>\n<hr>\n<pre><code>\n&gt; quinn, move block east\nHe moves the stone block east.\n\n&gt; undo\nUndo: quinn, move block east\n\n&gt; quinn, move block to the east\nHe moves the stone block east.\n\n&gt; undo\nUndo: quinn, move block to the east\n\n&gt; quinn, move block towards the east\nHe moves the stone block east.\n\n&gt; undo\nUndo: quinn, move block towards the east\n\n&gt; tell quinn to move the block towards the east\nHe moves the stone block east.\n\n&gt; undo\nUndo: tell quinn to move the block towards the east\n\n&gt; tell quinn to move the block east\nHe moves the stone block east.ne block east.\n\n</code></pre>\n\n",
      "PostDate": "2018-03-26T00:36:18.9123057Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a2d1fd0b-5e74-4ced-9adc-b1bb48239bdb",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How about pushing the block at/toward/on a monster. Using the block as a crushing weapon? Yeah, uh huh, what about that?",
      "EditableFormat": "markdown",
      "HTML": "<p>How about pushing the block at/toward/on a monster. Using the block as a crushing weapon? Yeah, uh huh, what about that?</p>\n\n",
      "PostDate": "2018-03-26T12:42:20.9969416Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d3568b9-96e6-4150-b203-d27acccc67cd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Doing tell Quinn to push stone block towards the east, results in a message \"I can't see that(stone block towards the)\".\r\n\r\nIf you have optional words immediately after a `(?<object>.*)`, they won't work. Because `.*`matches as many characters as possible, and only backs off if the next part of the pattern can't match.\r\nYou want to  make it *non greedy*, as `(?<object1>.*?)` ... so the string that Quest checks against the scope is the *shortest* string possible so that the rest of the string matches the rest of the pattern.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Doing tell Quinn to push stone block towards the east, results in a message \"I can't see that(stone block towards the)\".</p>\n</blockquote>\n<p>If you have optional words immediately after a <code>(?&lt;object&gt;.*)</code>, they won't work. Because <code>.*</code>matches as many characters as possible, and only backs off if the next part of the pattern can't match.<br>\nYou want to  make it <em>non greedy</em>, as <code>(?&lt;object1&gt;.*?)</code> ... so the string that Quest checks against the scope is the <em>shortest</em> string possible so that the rest of the string matches the rest of the pattern.</p>\n\n",
      "PostDate": "2018-03-26T13:10:01.5138459Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d71e3ff0-b946-4cf5-824f-e905c26b95e8",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@Forgewright: Never thought of that. I've just been using the block as something to stand on, the idea being that it's located in an adjacent room, and moving the block, and then standing on it, enables you to pick up an object that was out of reach.\r\n\r\n@mrangel: Thanks for the info, as always.",
      "EditableFormat": "markdown",
      "HTML": "<p>@Forgewright: Never thought of that. I've just been using the block as something to stand on, the idea being that it's located in an adjacent room, and moving the block, and then standing on it, enables you to pick up an object that was out of reach.</p>\n<p>@mrangel: Thanks for the info, as always.</p>\n\n",
      "PostDate": "2018-03-26T19:55:46.133543Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "560c3290-b633-49e4-8540-01fd99037869",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It seems there's a number of people having issues with the way patterns match. Maybe I should try offering a kind of beginner's guide to regular expression priority. Feel free to share with anyone else having similar issues.\r\n\r\nThere's often more than one set of characters that a regular expression will match. And if you stick several blocks together, there's several ways they could share the string between them. For example, `(.* )` could match `\"block \"`, `\"block to \"`, or `\"block to the \"`. While `(to(wards)? the )?` would match `\"to the \"` or `\"\"`.\r\n\r\nThe leftmost part of the expression takes priority. So the first part of the pattern gets first choice of which bit it wants, and then the remaining parts of the expression have to share out what's left between them. The first part of the expression will take the longest thing it can, as long as the remainder can still possibly match.\r\n\r\nBut what's its \"first choice\"? With an expression that can match a couple of different things, which one will it prefer?\r\n\r\n* `x*` matches zero or more copies of `x`. `x?` matches either a single copy of `x`, or nothing. `x+` matches one or more copies of `x`. `x{2,5}` matches between 2 and 5 copies of `x` (inclusive). In all of these, `x` can either be a single character, an expression in parentheses, or a characters class. These are the **greedy** quantifiers - they will take as many characters as they can, as long as the rest of the string can still match.\r\n* `(fish|chips|lemons)` will match any of the patterns between its `|`s. It will try to match them in order - if the **first** one both matches the string and allows the remainder of the pattern to match, it will use that one. That's why if you're doing something like `(an|a|the|)` you put `an` before `a`, and the empty pattern at the end, unless the expression after it would fail match a string that started with `\"n apple\"`.\r\n* The greedy quantifiers all have **non-greedy** versions. These are `x*?`, `x??`, `x+?`, and `x{2,4}?`. These will match the *smallest* number of copies of `x` that still allows the rest of the pattern to match. (the numbers in the `x{n,m}?` one are just for example; you can use any number you want. Omitting either number makes it unbounded; for example `a{3,}?` will match at least 3 \"a\"s in a row.)\r\n* There are also **possessive** expressions, but you rarely want to use them. These are `x*+`, `x?+`, and `x++`. They will \"claim\" as many instances of 'x' as there are at that point in the string, and will not let the rest of the expression have them. So `(.++) etc` will never match. The `(.++)` will match *all of the string*, leaving nothing for the `etc` to match against, so the match always fails.",
      "EditableFormat": "markdown",
      "HTML": "<p>It seems there's a number of people having issues with the way patterns match. Maybe I should try offering a kind of beginner's guide to regular expression priority. Feel free to share with anyone else having similar issues.</p>\n<p>There's often more than one set of characters that a regular expression will match. And if you stick several blocks together, there's several ways they could share the string between them. For example, <code>(.* )</code> could match <code>\"block \"</code>, <code>\"block to \"</code>, or <code>\"block to the \"</code>. While <code>(to(wards)? the )?</code> would match <code>\"to the \"</code> or <code>\"\"</code>.</p>\n<p>The leftmost part of the expression takes priority. So the first part of the pattern gets first choice of which bit it wants, and then the remaining parts of the expression have to share out what's left between them. The first part of the expression will take the longest thing it can, as long as the remainder can still possibly match.</p>\n<p>But what's its \"first choice\"? With an expression that can match a couple of different things, which one will it prefer?</p>\n<ul>\n<li><code>x*</code> matches zero or more copies of <code>x</code>. <code>x?</code> matches either a single copy of <code>x</code>, or nothing. <code>x+</code> matches one or more copies of <code>x</code>. <code>x{2,5}</code> matches between 2 and 5 copies of <code>x</code> (inclusive). In all of these, <code>x</code> can either be a single character, an expression in parentheses, or a characters class. These are the <strong>greedy</strong> quantifiers - they will take as many characters as they can, as long as the rest of the string can still match.</li>\n<li><code>(fish|chips|lemons)</code> will match any of the patterns between its <code>|</code>s. It will try to match them in order - if the <strong>first</strong> one both matches the string and allows the remainder of the pattern to match, it will use that one. That's why if you're doing something like <code>(an|a|the|)</code> you put <code>an</code> before <code>a</code>, and the empty pattern at the end, unless the expression after it would fail match a string that started with <code>\"n apple\"</code>.</li>\n<li>The greedy quantifiers all have <strong>non-greedy</strong> versions. These are <code>x*?</code>, <code>x??</code>, <code>x+?</code>, and <code>x{2,4}?</code>. These will match the <em>smallest</em> number of copies of <code>x</code> that still allows the rest of the pattern to match. (the numbers in the <code>x{n,m}?</code> one are just for example; you can use any number you want. Omitting either number makes it unbounded; for example <code>a{3,}?</code> will match at least 3 \"a\"s in a row.)</li>\n<li>There are also <strong>possessive</strong> expressions, but you rarely want to use them. These are <code>x*+</code>, <code>x?+</code>, and <code>x++</code>. They will \"claim\" as many instances of 'x' as there are at that point in the string, and will not let the rest of the expression have them. So <code>(.++) etc</code> will never match. The <code>(.++)</code> will match <em>all of the string</em>, leaving nothing for the <code>etc</code> to match against, so the match always fails.</li>\n</ul>\n\n",
      "PostDate": "2018-03-27T09:30:57.7375599Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6f1a3798-804f-42d0-bfca-b188f42bfa35",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Arraghhh. Having to do another re-write. I changed my mind, whilst still wanting an Npc character to move the object, I also want the player to have the ability to be able to move the object later in the game, which necessitated a Boolean attribute and hence a re-write.\r\n\r\nAlso, upon further testing of the original scripting above, I discovered I can type ```pen, push block e```, and received the message, ```'It pushes the block e'```. How can I check if an object has an inherited type. \r\nIn this case ```If object 2 has inherited type(NpcType)```",
      "EditableFormat": "markdown",
      "HTML": "<p>Arraghhh. Having to do another re-write. I changed my mind, whilst still wanting an Npc character to move the object, I also want the player to have the ability to be able to move the object later in the game, which necessitated a Boolean attribute and hence a re-write.</p>\n<p>Also, upon further testing of the original scripting above, I discovered I can type <code>pen, push block e</code>, and received the message, <code>'It pushes the block e'</code>. How can I check if an object has an inherited type.<br>\nIn this case <code>If object 2 has inherited type(NpcType)</code></p>\n\n",
      "PostDate": "2018-03-29T20:35:52.9675846Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7ffa8261-d210-4dfc-957d-e0e65b6351fe",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nif (DoesInherit (NAME_OF_OBJECT, \"NAME_OF_OBJECT_TYPE\")) {\r\n  // scripting\r\n}\r\n// optional:\r\nelse if {\r\n  // scripting\r\n}\r\n// optional:\r\nelse {\r\n  // scripting\r\n}\r\n```\r\n\r\nhere's the link\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/doesinherit.html\r\n\r\n--------------\r\n\r\nObject Type = Inherited Attribute // they're the same thing",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>if (DoesInherit (NAME_OF_OBJECT, \"NAME_OF_OBJECT_TYPE\")) {\n  // scripting\n}\n// optional:\nelse if {\n  // scripting\n}\n// optional:\nelse {\n  // scripting\n}\n</code></pre>\n<p>here's the link</p>\n<p>http://docs.textadventures.co.uk/quest/functions/doesinherit.html</p>\n<hr>\n<p>Object Type = Inherited Attribute // they're the same thing</p>\n\n",
      "PostDate": "2018-03-29T20:44:47.7658758Z",
      "LastEditDate": "2018-03-29T20:47:59.6174593Z",
      "link": null
    },
    {
      "PostId": "9f115672-8d62-4ef6-b084-b9948389fd6e",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks HK, I'll check out the link.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks HK, I'll check out the link.</p>\n\n",
      "PostDate": "2018-03-30T07:14:40.2261364Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "079c938c-dfe0-47c5-92bb-07a50d1ebfaf",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "While doing further testing, I was not getting the expected response when trying to get a group of characters to move the object. \r\nI have it on the object's setup tab as being 'Male Character (plural)' or 'Female Character (plural)'. Their is no 'Inherited Type' for such groups of characters, so had to add 'npc_type' to the list of Inherited Types. Is there a reason behind this?",
      "EditableFormat": "markdown",
      "HTML": "<p>While doing further testing, I was not getting the expected response when trying to get a group of characters to move the object.<br>\nI have it on the object's setup tab as being 'Male Character (plural)' or 'Female Character (plural)'. Their is no 'Inherited Type' for such groups of characters, so had to add 'npc_type' to the list of Inherited Types. Is there a reason behind this?</p>\n\n",
      "PostDate": "2018-03-31T06:49:55.5410364Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "473f7cb3-3e4d-420c-b6e7-4a4ca6f82520",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "not sure on the built-in stuff, though there should be these Object Types:\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/object.html (scroll down to the very bottom, to the 'Object types defined by Core.aslx' section/category) (as well using any of the rest of the Object's built-in Attributes above too, though you'd NOT use the 'DoesInherit' for them of course, as they're not: Inherited Attributes / Object Types)\r\n\r\nfemale\r\nfemaleplural\r\nmale\r\nmaleplural\r\nnamedmale\r\nnamedfemale\r\n\r\nif quest is not recognizing them via:\r\n\r\nif (DoesInherit (NAME_OF_OBJECT, \"NAME_OF_OBJECT_TYPE\")) { /*scripting */ }\r\n\r\nthen, someone who knows quest better, can hopefully explain why it's not working, as I don't know why it'd not be working\r\n\r\nthough, you can always make and use your own Object Types\r\n\r\n(as remember, the 'editor_room', 'editor_object', and 'editor_player', are just for the GUI/Editor's controls/features/options/tabs/etc, they're destroyed when you actually play/start the game, so you can't use them within any scripting, such as with 'if does inherit', so, you'll have to make your own such Object Types, in order to use them within scripting during actual game play usage)",
      "EditableFormat": "markdown",
      "HTML": "<p>not sure on the built-in stuff, though there should be these Object Types:</p>\n<p>http://docs.textadventures.co.uk/quest/elements/object.html (scroll down to the very bottom, to the 'Object types defined by Core.aslx' section/category) (as well using any of the rest of the Object's built-in Attributes above too, though you'd NOT use the 'DoesInherit' for them of course, as they're not: Inherited Attributes / Object Types)</p>\n<p>female<br>\nfemaleplural<br>\nmale<br>\nmaleplural<br>\nnamedmale<br>\nnamedfemale</p>\n<p>if quest is not recognizing them via:</p>\n<p>if (DoesInherit (NAME_OF_OBJECT, \"NAME_OF_OBJECT_TYPE\")) { /*scripting */ }</p>\n<p>then, someone who knows quest better, can hopefully explain why it's not working, as I don't know why it'd not be working</p>\n<p>though, you can always make and use your own Object Types</p>\n<p>(as remember, the 'editor_room', 'editor_object', and 'editor_player', are just for the GUI/Editor's controls/features/options/tabs/etc, they're destroyed when you actually play/start the game, so you can't use them within any scripting, such as with 'if does inherit', so, you'll have to make your own such Object Types, in order to use them within scripting during actual game play usage)</p>\n\n",
      "PostDate": "2018-03-31T13:03:12.6054666Z",
      "LastEditDate": "2018-03-31T13:05:56.6203941Z",
      "link": null
    }
  ]
}
