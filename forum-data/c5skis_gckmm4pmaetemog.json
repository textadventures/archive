{
  "Topic": {
    "TopicId": "c5skis_gckmm4pmaetemog",
    "ForumId": "18",
    "Title": "My take on an achievement system",
    "LastUpdated": "2017-09-03T14:22:24.5228598Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "e32bfbd2-0c1a-4b02-a46a-89e27f730082",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the game I want to create, I needed an achievement system. Seeing as this is something that other people could also need, I want to share it here - unfortunately, I don't have the time to turn this into a proper library, so I can only provide you guys with my little sandbox example. With a little bit of work, you should be able to incorporate it into your game.  \r\n\r\nI'd be happy if someone actually went and turned this into a library.\r\n\r\n**Details**\r\n* The custom status pane is used to display your progress in terms of achievements. Clicking on 'Achievements' will allow you to list all achievements you have earned\r\n* In this example, you will get a code representing your achievements at the end of the game (it ends at the end of the day, just type `wait 60`\r\n* You can enter that code at the start of the game to unlock these achievements\r\n* You earn the achievements by talking to the girl\r\n* Internally, achievements are objects extended from the custom type `achievement`(Although it does not have to extend from the type). Unearned achievements reside in the room `achievements`, earned ones in the room `earned achievements`. This room is added to the extended scope so that verbs for the achievements and object links will work\r\n* In this example, every achievement has the verb `image`. This could be used e.g. for rewarding the player with an image for unlocking the achievement. However, this can be changed or extended easily and you can have different verbs per achievement\r\n* Theoretically, you could extend this so that achievements give rewards (items, statuses, buffs...)\r\n\r\nThe code below contains some unrelated stuff that you can ignore (related to ClockLib and ConvLib, which you will need for this example to run).\r\n\r\nP.S.: I tried putting `<details>...</details>` around the code but that destroyed the code formatting.\r\n```<!--Saved by Quest 5.7.6404.15496-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <include ref=\"ClockLib.aslx\" />\r\n  <include ref=\"ConvLib.aslx\" />\r\n  <game name=\"Achievement Example\">\r\n    <inherit name=\"theme_typewriter\" />\r\n    <gameid>4890e3d7-3676-4567-926f-c53abd25fc2e</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2017</firstpublished>\r\n    <notarealturn type=\"boolean\">false</notarealturn>\r\n    <statusattributes type=\"stringdictionary\">\r\n      <item>\r\n        <key>clock</key>\r\n        <value>Time: !</value>\r\n      </item>\r\n    </statusattributes>\r\n    <feature_advancedscripts />\r\n    <customstatuspane />\r\n    <borderlesscursor type=\"boolean\">false</borderlesscursor>\r\n    <attr name=\"feature_pictureframe\" type=\"boolean\">false</attr>\r\n    <clearframe type=\"boolean\">false</clearframe>\r\n    <panestheme>Classic</panestheme>\r\n    <gridmap type=\"boolean\">false</gridmap>\r\n    <turnoffplacesandobjects type=\"boolean\">false</turnoffplacesandobjects>\r\n    <showpanes />\r\n    <setcustomwidth type=\"boolean\">false</setcustomwidth>\r\n    <unresolvedcommandhandler type=\"script\">\r\n      game.notarealturn = true\r\n      msg (Template(\"UnrecognisedCommand\"))\r\n    </unresolvedcommandhandler>\r\n    <start type=\"script\">\r\n      CalcAchievementCodes\r\n      skip = false\r\n      msg (\"Please enter your name:\")\r\n      get input {\r\n        player.alias = result\r\n        ask (\"Do you have an achievement code from a previous playthrough?\") {\r\n          if (result) {\r\n            msg (\"Please enter the code:\")\r\n            get input {\r\n              RedeemAchievements (result)\r\n              msg (\"\")\r\n              msg (\"\")\r\n              msg (\"\")\r\n            }\r\n          }\r\n        }\r\n        msg (\"\")\r\n        msg (\"\")\r\n        msg (\"\")\r\n      }\r\n      SetTime (\"01:23:00\")\r\n      game.clock = TimeAsString()\r\n      game.notarealturn = true\r\n    </start>\r\n    <scopebackdrop type=\"script\">\r\n      foreach (obj, GetDirectChildren(earned achievements)) {\r\n        list add (items, obj)\r\n      }\r\n    </scopebackdrop>\r\n  </game>\r\n  <command name=\"look\">\r\n    <pattern type=\"string\">^look$|^l$</pattern>\r\n    <script>\r\n      ShowRoomDescription\r\n      game.notarealturn = true\r\n    </script>\r\n  </command>\r\n  <command name=\"help\">\r\n    <pattern type=\"string\">^help$|^\\?$</pattern>\r\n    <script>\r\n      msg (Template(\"DefaultHelp\"))\r\n      game.notarealturn = true\r\n    </script>\r\n  </command>\r\n  <command name=\"clock\">\r\n    <pattern>clock;time;watch</pattern>\r\n    <script>\r\n      P (Replace(game_clock.clockmsg, \"###\", TimeAsString()))\r\n      game.notarealturn = true\r\n    </script>\r\n  </command>\r\n  <command name=\"waitfor\">\r\n    <pattern>wait #text#; z #text#</pattern>\r\n    <script><![CDATA[\r\n      if (isNumeric(text)) {\r\n        minutes = ToInt(text)\r\n        if (minutes > 0) {\r\n          WaitForMinutes (ToInt (text))\r\n        }\r\n        else {\r\n          P (\"I don't understand how many minutes you want to wait.\")\r\n        }\r\n      }\r\n      else {\r\n        P (\"I don't understand how many minutes you want to wait.\")\r\n      }\r\n      game.notarealturn = true\r\n    ]]></script>\r\n  </command>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n    <prefix>your</prefix>\r\n    <object name=\"girl\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedfemale\" />\r\n      <inherit name=\"talkingchar\" />\r\n      <alias>girl</alias>\r\n      <usedefaultprefix type=\"boolean\">false</usedefaultprefix>\r\n      <prefix>the</prefix>\r\n      <object name=\"girl hi\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"startingtopic\" />\r\n        <alias>Hi</alias>\r\n        <exchange>\"I'm the friendly achievement giver. Just ask me for an achievement and you will get it.\", the girl says.</exchange>\r\n        <nowshow type=\"stringlist\">\r\n          <value>girl one</value>\r\n          <value>girl two</value>\r\n          <value>girl three</value>\r\n        </nowshow>\r\n      </object>\r\n      <object name=\"girl one\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"topic\" />\r\n        <hideafter />\r\n        <exchange>\"Here you go!\", she says.</exchange>\r\n        <alias>Achievement #1</alias>\r\n        <talk type=\"script\">\r\n          EarnAchievement (pointlessone)\r\n        </talk>\r\n      </object>\r\n      <object name=\"girl two\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"topic\" />\r\n        <hideafter />\r\n        <exchange>\"Very well.\", the girl says.</exchange>\r\n        <alias>Achievement #2</alias>\r\n        <talk type=\"script\">\r\n          EarnAchievement (pointlesstwo)\r\n        </talk>\r\n      </object>\r\n      <object name=\"girl three\">\r\n        <inherit name=\"editor_object\" />\r\n        <inherit name=\"topic\" />\r\n        <exchange>\"Of course.\", she says.</exchange>\r\n        <hideafter />\r\n        <alias>Achievement #3</alias>\r\n        <talk type=\"script\">\r\n          EarnAchievement (pointlessthree)\r\n        </talk>\r\n      </object>\r\n    </object>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <alias>Tom</alias>\r\n    </object>\r\n  </object>\r\n  <object name=\"events\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"event_01_23_59\">\r\n      <inherit name=\"editor_object\" />\r\n      <look type=\"script\">\r\n        EvaluateGame\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"wait\">\r\n    <pattern>wait;z</pattern>\r\n    <script>\r\n      WaitForMinutes (game_clock.waittime)\r\n      game.notarealturn = true\r\n    </script>\r\n  </command>\r\n  <object name=\"achievements\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"pointlessone\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"achievement\" />\r\n      <alias>pointless achievement</alias>\r\n      <look>Earned by talking to the girl.</look>\r\n      <image type=\"script\">\r\n        msg (\"This achievement doesn't have an image.\")\r\n        game.notarealturn = true\r\n      </image>\r\n    </object>\r\n    <object name=\"pointlesstwo\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"achievement\" />\r\n      <look>Earned by talking to the girl.</look>\r\n      <alias>yet another pointless achievement</alias>\r\n      <image type=\"script\">\r\n        msg (\"This achievement doesn't have an image.\")\r\n        game.notarealturn = true\r\n      </image>\r\n    </object>\r\n    <object name=\"pointlessthree\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"achievement\" />\r\n      <drop type=\"boolean\">false</drop>\r\n      <look>Earned by talking to the girl.</look>\r\n      <alias>the final pointless achievement</alias>\r\n      <usestandardverblist />\r\n      <inventoryverbs type=\"stringlist\">\r\n        <value>Image</value>\r\n      </inventoryverbs>\r\n      <displayverbs type=\"stringlist\">\r\n        <value>Image</value>\r\n      </displayverbs>\r\n      <scenery />\r\n      <image type=\"script\">\r\n        msg (\"This achievement doesn't have an image.\")\r\n        game.notarealturn = true\r\n      </image>\r\n    </object>\r\n  </object>\r\n  <verb>\r\n    <property>hide</property>\r\n    <pattern>hide</pattern>\r\n    <defaultexpression>\"You can't hide \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>info</property>\r\n    <pattern>info</pattern>\r\n    <defaultexpression>\"You can't info \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>image</property>\r\n    <pattern>image</pattern>\r\n    <defaultexpression>\"You can't image \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <verb>\r\n    <property>list</property>\r\n    <pattern>list</pattern>\r\n    <defaultexpression>\"You can't list \" + object.article + \".\"</defaultexpression>\r\n  </verb>\r\n  <object name=\"messy room\">\r\n    <inherit name=\"editor_room\" />\r\n    <descprefix>You are in</descprefix>\r\n  </object>\r\n  <object name=\"earned achievements\">\r\n    <inherit name=\"editor_room\" />\r\n  </object>\r\n  <type name=\"achievement\">\r\n    <drop type=\"boolean\">false</drop>\r\n    <look>Earned by WIP.</look>\r\n    <alias>WIP</alias>\r\n    <usestandardverblist />\r\n    <inventoryverbs type=\"stringlist\">\r\n      <value>Image</value>\r\n    </inventoryverbs>\r\n    <displayverbs type=\"stringlist\">\r\n      <value>Image</value>\r\n    </displayverbs>\r\n    <scenery />\r\n    <code type=\"string\"></code>\r\n    <image type=\"script\">\r\n      picture (\"\")\r\n      game.notarealturn = true\r\n    </image>\r\n  </type>\r\n  <function name=\"InitUserInterface\"><![CDATA[\r\n    s = \"<table width=\\\"100%\\\"><tr>\"\r\n    s = s + \"   <td style=\\\"text-align:right;\\\" width=\\\"50%\\\"><a href=\\\"javascript:void(0);\\\" onclick=\\\"ASLEvent('ListAchievements', '');\\\" style=\\\"text-decoration:underline\\\">Achievements:</a></td>\"\r\n    s = s + \"   <td style=\\\"text-align:left;\\\" width=\\\"50%\\\"><span id=\\\"achv-span\\\">---</span></td>\"\r\n    s = s + \" </tr>\"\r\n    s = s + \" <tr>\"\r\n    s = s + \"   <td colspan=\\\"2\\\" style=\\\"border: thin solid;background:white;text-align:left;\\\">\"\r\n    s = s + \"   <span id=\\\"achv-indicator\\\" style=\\\"background-color:black;padding-right:200px;\\\"></span>\"\r\n    s = s + \"   </td>\"\r\n    s = s + \" </tr>\"\r\n    s = s + \"</table>\"\r\n    JS.setCustomStatus (s)\r\n  ]]></function>\r\n  <function name=\"EvaluateGame\">\r\n    SetTime (\"02:23:00\")\r\n    msg (\"Your achievement code is: {b:\" + GetAchievementCode() + \"}\")\r\n    finish\r\n  </function>\r\n  <function name=\"WaitForMinutes\" parameters=\"minutes\"><![CDATA[\r\n    count = minutes\r\n    game_clock.event = false\r\n    while (count > 0 and not game_clock.event) {\r\n      // msg(\"count = \" + count)\r\n      // msg(\"game_clock.event = \" + game_clock.event)\r\n      count = count - 1\r\n      IncTime\r\n    }\r\n    if (not game_clock.event) {\r\n      plural = \" minutes\"\r\n      if (minutes < 2) {\r\n        plural = \" minute\"\r\n      }\r\n      P (\"You wait \" + minutes + plural + \", but nothing happens.\")\r\n    }\r\n  ]]></function>\r\n  <function name=\"EarnAchievement\" parameters=\"achvmnt\">\r\n    if (achvmnt.parent = achievements) {\r\n      MoveObject (achvmnt, earned achievements)\r\n      msg (\"{b:You earned a new achievement: }\" + \"\\\"\" + ObjectLink(achvmnt) + \"\\\" (\" + \"{i:\" + achvmnt.look + \"}\" + \")\")\r\n    }\r\n    UpdateAchievementStatus\r\n  </function>\r\n  <function name=\"CalcAchievementCodes\">\r\n    foreach (item, GetDirectChildren(achievements)) {\r\n      request (RunScript, \"hashFnv32a;\" + item.name)\r\n      msg (item.code)\r\n    }\r\n    UpdateAchievementStatus\r\n  </function>\r\n  <function name=\"SetAchievementCode\" parameters=\"obj\">\r\n    strlist = Split(obj, \";\")\r\n    item = GetObject(StringListItem(strlist, 0))\r\n    item.code = StringListItem(strlist, 1)\r\n  </function>\r\n  <function name=\"RedeemAchievements\" parameters=\"str\">\r\n    strlist = Split(str, \";\")\r\n    foreach (achvmnt, strlist) {\r\n      foreach (item, GetDirectChildren(achievements)) {\r\n        if (item.code = achvmnt) {\r\n          EarnAchievement (item)\r\n        }\r\n      }\r\n    }\r\n  </function>\r\n  <function name=\"GetAchievementCode\" type=\"string\">\r\n    code = \"\"\r\n    foreach (item, GetDirectChildren(earned achievements)) {\r\n      code = code + item.code + \";\"\r\n    }\r\n    if (code = \"\") {\r\n      return (\"Unfortunately, you do not have any achievements!\")\r\n    }\r\n    return (code)\r\n  </function>\r\n  <function name=\"UpdateAchievementStatus\">\r\n    num_achievements = ListCount(GetDirectChildren(earned achievements))\r\n    num_total = ListCount(GetDirectChildren(achievements)) + num_achievements\r\n    percentage = 100 * (1.0 * num_achievements/num_total)\r\n    split_value_list = NewStringList()\r\n    string_value = ToString (percentage)\r\n    split_value_list = split(string_value,\".\")\r\n    string_integer = ListItem(split_value_list,0)\r\n    result = ToInt(string_integer)\r\n    JS.eval (\"$('#achv-span').html('\" + num_achievements + \"/\" + num_total + \" (\" + result + \"%)\" + \"');\")\r\n    JS.eval (\"$('#achv-indicator').css('padding-right', '\" + (1 + 199 * num_achievements / num_total) + \"px');\")\r\n  </function>\r\n  <function name=\"ListAchievements\" parameters=\"notaparameter\">\r\n    Ask (\"Do you want to list your achievements?\") {\r\n      if (result) {\r\n        index = 1\r\n        foreach (item, GetDirectChildren(earned achievements)) {\r\n          msg (\"{b:\" + DisplayNumber(index, \"3.0\") + \"}\" + \" \" + ObjectLink(item) + \":\")\r\n          msg (\"{i:\" + item.look + \"}\")\r\n          index = index + 1\r\n        }\r\n        if (index = 1) {\r\n          msg (\"{b:You don't have any achievements yet!}\")\r\n        }\r\n      }\r\n      game.notarealturn = true\r\n    }\r\n  </function>\r\n  <javascript src=\"achievements.js\" />\r\n</asl>\r\n```\r\nachievements.js:\r\n```\r\n/**\r\n * Calculate a 32 bit FNV-1a hash\r\n * Found here: https://gist.github.com/vaiorabbit/5657561\r\n * Ref.: http://isthe.com/chongo/tech/comp/fnv/\r\n *\r\n * @param {string} str the input value\r\n */\r\nfunction hashFnv32a(str/*, asString*/) {\r\n    /*jshint bitwise:false */\r\n    var i, l,\r\n        hval = 0x811c9dc5;\r\n\r\n    for (i = 0, l = str.length; i < l; i++) {\r\n        hval ^= str.charCodeAt(i);\r\n        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);\r\n    }\r\n\t\r\n\tASLEvent(\"SetAchievementCode\", str + \";\" + (\"0000000\" + (hval >>> 0).toString(16)).substr(-8));\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>For the game I want to create, I needed an achievement system. Seeing as this is something that other people could also need, I want to share it here - unfortunately, I don't have the time to turn this into a proper library, so I can only provide you guys with my little sandbox example. With a little bit of work, you should be able to incorporate it into your game.</p>\n<p>I'd be happy if someone actually went and turned this into a library.</p>\n<p><strong>Details</strong></p>\n<ul>\n<li>The custom status pane is used to display your progress in terms of achievements. Clicking on 'Achievements' will allow you to list all achievements you have earned</li>\n<li>In this example, you will get a code representing your achievements at the end of the game (it ends at the end of the day, just type <code>wait 60</code></li>\n<li>You can enter that code at the start of the game to unlock these achievements</li>\n<li>You earn the achievements by talking to the girl</li>\n<li>Internally, achievements are objects extended from the custom type <code>achievement</code>(Although it does not have to extend from the type). Unearned achievements reside in the room <code>achievements</code>, earned ones in the room <code>earned achievements</code>. This room is added to the extended scope so that verbs for the achievements and object links will work</li>\n<li>In this example, every achievement has the verb <code>image</code>. This could be used e.g. for rewarding the player with an image for unlocking the achievement. However, this can be changed or extended easily and you can have different verbs per achievement</li>\n<li>Theoretically, you could extend this so that achievements give rewards (items, statuses, buffs...)</li>\n</ul>\n<p>The code below contains some unrelated stuff that you can ignore (related to ClockLib and ConvLib, which you will need for this example to run).</p>\n<p>P.S.: I tried putting <code>&lt;details&gt;...&lt;/details&gt;</code> around the code but that destroyed the code formatting.</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;include ref=\"ClockLib.aslx\" /&gt;\n  &lt;include ref=\"ConvLib.aslx\" /&gt;\n  &lt;game name=\"Achievement Example\"&gt;\n    &lt;inherit name=\"theme_typewriter\" /&gt;\n    &lt;gameid&gt;4890e3d7-3676-4567-926f-c53abd25fc2e&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2017&lt;/firstpublished&gt;\n    &lt;notarealturn type=\"boolean\"&gt;false&lt;/notarealturn&gt;\n    &lt;statusattributes type=\"stringdictionary\"&gt;\n      &lt;item&gt;\n        &lt;key&gt;clock&lt;/key&gt;\n        &lt;value&gt;Time: !&lt;/value&gt;\n      &lt;/item&gt;\n    &lt;/statusattributes&gt;\n    &lt;feature_advancedscripts /&gt;\n    &lt;customstatuspane /&gt;\n    &lt;borderlesscursor type=\"boolean\"&gt;false&lt;/borderlesscursor&gt;\n    &lt;attr name=\"feature_pictureframe\" type=\"boolean\"&gt;false&lt;/attr&gt;\n    &lt;clearframe type=\"boolean\"&gt;false&lt;/clearframe&gt;\n    &lt;panestheme&gt;Classic&lt;/panestheme&gt;\n    &lt;gridmap type=\"boolean\"&gt;false&lt;/gridmap&gt;\n    &lt;turnoffplacesandobjects type=\"boolean\"&gt;false&lt;/turnoffplacesandobjects&gt;\n    &lt;showpanes /&gt;\n    &lt;setcustomwidth type=\"boolean\"&gt;false&lt;/setcustomwidth&gt;\n    &lt;unresolvedcommandhandler type=\"script\"&gt;\n      game.notarealturn = true\n      msg (Template(\"UnrecognisedCommand\"))\n    &lt;/unresolvedcommandhandler&gt;\n    &lt;start type=\"script\"&gt;\n      CalcAchievementCodes\n      skip = false\n      msg (\"Please enter your name:\")\n      get input {\n        player.alias = result\n        ask (\"Do you have an achievement code from a previous playthrough?\") {\n          if (result) {\n            msg (\"Please enter the code:\")\n            get input {\n              RedeemAchievements (result)\n              msg (\"\")\n              msg (\"\")\n              msg (\"\")\n            }\n          }\n        }\n        msg (\"\")\n        msg (\"\")\n        msg (\"\")\n      }\n      SetTime (\"01:23:00\")\n      game.clock = TimeAsString()\n      game.notarealturn = true\n    &lt;/start&gt;\n    &lt;scopebackdrop type=\"script\"&gt;\n      foreach (obj, GetDirectChildren(earned achievements)) {\n        list add (items, obj)\n      }\n    &lt;/scopebackdrop&gt;\n  &lt;/game&gt;\n  &lt;command name=\"look\"&gt;\n    &lt;pattern type=\"string\"&gt;^look$|^l$&lt;/pattern&gt;\n    &lt;script&gt;\n      ShowRoomDescription\n      game.notarealturn = true\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"help\"&gt;\n    &lt;pattern type=\"string\"&gt;^help$|^\\?$&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (Template(\"DefaultHelp\"))\n      game.notarealturn = true\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"clock\"&gt;\n    &lt;pattern&gt;clock;time;watch&lt;/pattern&gt;\n    &lt;script&gt;\n      P (Replace(game_clock.clockmsg, \"###\", TimeAsString()))\n      game.notarealturn = true\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;command name=\"waitfor\"&gt;\n    &lt;pattern&gt;wait #text#; z #text#&lt;/pattern&gt;\n    &lt;script&gt;&lt;![CDATA[\n      if (isNumeric(text)) {\n        minutes = ToInt(text)\n        if (minutes &gt; 0) {\n          WaitForMinutes (ToInt (text))\n        }\n        else {\n          P (\"I don't understand how many minutes you want to wait.\")\n        }\n      }\n      else {\n        P (\"I don't understand how many minutes you want to wait.\")\n      }\n      game.notarealturn = true\n    ]]&gt;&lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n    &lt;prefix&gt;your&lt;/prefix&gt;\n    &lt;object name=\"girl\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedfemale\" /&gt;\n      &lt;inherit name=\"talkingchar\" /&gt;\n      &lt;alias&gt;girl&lt;/alias&gt;\n      &lt;usedefaultprefix type=\"boolean\"&gt;false&lt;/usedefaultprefix&gt;\n      &lt;prefix&gt;the&lt;/prefix&gt;\n      &lt;object name=\"girl hi\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"startingtopic\" /&gt;\n        &lt;alias&gt;Hi&lt;/alias&gt;\n        &lt;exchange&gt;\"I'm the friendly achievement giver. Just ask me for an achievement and you will get it.\", the girl says.&lt;/exchange&gt;\n        &lt;nowshow type=\"stringlist\"&gt;\n          &lt;value&gt;girl one&lt;/value&gt;\n          &lt;value&gt;girl two&lt;/value&gt;\n          &lt;value&gt;girl three&lt;/value&gt;\n        &lt;/nowshow&gt;\n      &lt;/object&gt;\n      &lt;object name=\"girl one\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"topic\" /&gt;\n        &lt;hideafter /&gt;\n        &lt;exchange&gt;\"Here you go!\", she says.&lt;/exchange&gt;\n        &lt;alias&gt;Achievement #1&lt;/alias&gt;\n        &lt;talk type=\"script\"&gt;\n          EarnAchievement (pointlessone)\n        &lt;/talk&gt;\n      &lt;/object&gt;\n      &lt;object name=\"girl two\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"topic\" /&gt;\n        &lt;hideafter /&gt;\n        &lt;exchange&gt;\"Very well.\", the girl says.&lt;/exchange&gt;\n        &lt;alias&gt;Achievement #2&lt;/alias&gt;\n        &lt;talk type=\"script\"&gt;\n          EarnAchievement (pointlesstwo)\n        &lt;/talk&gt;\n      &lt;/object&gt;\n      &lt;object name=\"girl three\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;inherit name=\"topic\" /&gt;\n        &lt;exchange&gt;\"Of course.\", she says.&lt;/exchange&gt;\n        &lt;hideafter /&gt;\n        &lt;alias&gt;Achievement #3&lt;/alias&gt;\n        &lt;talk type=\"script\"&gt;\n          EarnAchievement (pointlessthree)\n        &lt;/talk&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;alias&gt;Tom&lt;/alias&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;object name=\"events\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"event_01_23_59\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;look type=\"script\"&gt;\n        EvaluateGame\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"wait\"&gt;\n    &lt;pattern&gt;wait;z&lt;/pattern&gt;\n    &lt;script&gt;\n      WaitForMinutes (game_clock.waittime)\n      game.notarealturn = true\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;object name=\"achievements\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"pointlessone\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"achievement\" /&gt;\n      &lt;alias&gt;pointless achievement&lt;/alias&gt;\n      &lt;look&gt;Earned by talking to the girl.&lt;/look&gt;\n      &lt;image type=\"script\"&gt;\n        msg (\"This achievement doesn't have an image.\")\n        game.notarealturn = true\n      &lt;/image&gt;\n    &lt;/object&gt;\n    &lt;object name=\"pointlesstwo\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"achievement\" /&gt;\n      &lt;look&gt;Earned by talking to the girl.&lt;/look&gt;\n      &lt;alias&gt;yet another pointless achievement&lt;/alias&gt;\n      &lt;image type=\"script\"&gt;\n        msg (\"This achievement doesn't have an image.\")\n        game.notarealturn = true\n      &lt;/image&gt;\n    &lt;/object&gt;\n    &lt;object name=\"pointlessthree\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"achievement\" /&gt;\n      &lt;drop type=\"boolean\"&gt;false&lt;/drop&gt;\n      &lt;look&gt;Earned by talking to the girl.&lt;/look&gt;\n      &lt;alias&gt;the final pointless achievement&lt;/alias&gt;\n      &lt;usestandardverblist /&gt;\n      &lt;inventoryverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Image&lt;/value&gt;\n      &lt;/inventoryverbs&gt;\n      &lt;displayverbs type=\"stringlist\"&gt;\n        &lt;value&gt;Image&lt;/value&gt;\n      &lt;/displayverbs&gt;\n      &lt;scenery /&gt;\n      &lt;image type=\"script\"&gt;\n        msg (\"This achievement doesn't have an image.\")\n        game.notarealturn = true\n      &lt;/image&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;verb&gt;\n    &lt;property&gt;hide&lt;/property&gt;\n    &lt;pattern&gt;hide&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't hide \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;info&lt;/property&gt;\n    &lt;pattern&gt;info&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't info \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;image&lt;/property&gt;\n    &lt;pattern&gt;image&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't image \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;verb&gt;\n    &lt;property&gt;list&lt;/property&gt;\n    &lt;pattern&gt;list&lt;/pattern&gt;\n    &lt;defaultexpression&gt;\"You can't list \" + object.article + \".\"&lt;/defaultexpression&gt;\n  &lt;/verb&gt;\n  &lt;object name=\"messy room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;descprefix&gt;You are in&lt;/descprefix&gt;\n  &lt;/object&gt;\n  &lt;object name=\"earned achievements\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n  &lt;/object&gt;\n  &lt;type name=\"achievement\"&gt;\n    &lt;drop type=\"boolean\"&gt;false&lt;/drop&gt;\n    &lt;look&gt;Earned by WIP.&lt;/look&gt;\n    &lt;alias&gt;WIP&lt;/alias&gt;\n    &lt;usestandardverblist /&gt;\n    &lt;inventoryverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Image&lt;/value&gt;\n    &lt;/inventoryverbs&gt;\n    &lt;displayverbs type=\"stringlist\"&gt;\n      &lt;value&gt;Image&lt;/value&gt;\n    &lt;/displayverbs&gt;\n    &lt;scenery /&gt;\n    &lt;code type=\"string\"&gt;&lt;/code&gt;\n    &lt;image type=\"script\"&gt;\n      picture (\"\")\n      game.notarealturn = true\n    &lt;/image&gt;\n  &lt;/type&gt;\n  &lt;function name=\"InitUserInterface\"&gt;&lt;![CDATA[\n    s = \"&lt;table width=\\\"100%\\\"&gt;&lt;tr&gt;\"\n    s = s + \"   &lt;td style=\\\"text-align:right;\\\" width=\\\"50%\\\"&gt;&lt;a href=\\\"javascript:void(0);\\\" onclick=\\\"ASLEvent('ListAchievements', '');\\\" style=\\\"text-decoration:underline\\\"&gt;Achievements:&lt;/a&gt;&lt;/td&gt;\"\n    s = s + \"   &lt;td style=\\\"text-align:left;\\\" width=\\\"50%\\\"&gt;&lt;span id=\\\"achv-span\\\"&gt;---&lt;/span&gt;&lt;/td&gt;\"\n    s = s + \" &lt;/tr&gt;\"\n    s = s + \" &lt;tr&gt;\"\n    s = s + \"   &lt;td colspan=\\\"2\\\" style=\\\"border: thin solid;background:white;text-align:left;\\\"&gt;\"\n    s = s + \"   &lt;span id=\\\"achv-indicator\\\" style=\\\"background-color:black;padding-right:200px;\\\"&gt;&lt;/span&gt;\"\n    s = s + \"   &lt;/td&gt;\"\n    s = s + \" &lt;/tr&gt;\"\n    s = s + \"&lt;/table&gt;\"\n    JS.setCustomStatus (s)\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"EvaluateGame\"&gt;\n    SetTime (\"02:23:00\")\n    msg (\"Your achievement code is: {b:\" + GetAchievementCode() + \"}\")\n    finish\n  &lt;/function&gt;\n  &lt;function name=\"WaitForMinutes\" parameters=\"minutes\"&gt;&lt;![CDATA[\n    count = minutes\n    game_clock.event = false\n    while (count &gt; 0 and not game_clock.event) {\n      // msg(\"count = \" + count)\n      // msg(\"game_clock.event = \" + game_clock.event)\n      count = count - 1\n      IncTime\n    }\n    if (not game_clock.event) {\n      plural = \" minutes\"\n      if (minutes &lt; 2) {\n        plural = \" minute\"\n      }\n      P (\"You wait \" + minutes + plural + \", but nothing happens.\")\n    }\n  ]]&gt;&lt;/function&gt;\n  &lt;function name=\"EarnAchievement\" parameters=\"achvmnt\"&gt;\n    if (achvmnt.parent = achievements) {\n      MoveObject (achvmnt, earned achievements)\n      msg (\"{b:You earned a new achievement: }\" + \"\\\"\" + ObjectLink(achvmnt) + \"\\\" (\" + \"{i:\" + achvmnt.look + \"}\" + \")\")\n    }\n    UpdateAchievementStatus\n  &lt;/function&gt;\n  &lt;function name=\"CalcAchievementCodes\"&gt;\n    foreach (item, GetDirectChildren(achievements)) {\n      request (RunScript, \"hashFnv32a;\" + item.name)\n      msg (item.code)\n    }\n    UpdateAchievementStatus\n  &lt;/function&gt;\n  &lt;function name=\"SetAchievementCode\" parameters=\"obj\"&gt;\n    strlist = Split(obj, \";\")\n    item = GetObject(StringListItem(strlist, 0))\n    item.code = StringListItem(strlist, 1)\n  &lt;/function&gt;\n  &lt;function name=\"RedeemAchievements\" parameters=\"str\"&gt;\n    strlist = Split(str, \";\")\n    foreach (achvmnt, strlist) {\n      foreach (item, GetDirectChildren(achievements)) {\n        if (item.code = achvmnt) {\n          EarnAchievement (item)\n        }\n      }\n    }\n  &lt;/function&gt;\n  &lt;function name=\"GetAchievementCode\" type=\"string\"&gt;\n    code = \"\"\n    foreach (item, GetDirectChildren(earned achievements)) {\n      code = code + item.code + \";\"\n    }\n    if (code = \"\") {\n      return (\"Unfortunately, you do not have any achievements!\")\n    }\n    return (code)\n  &lt;/function&gt;\n  &lt;function name=\"UpdateAchievementStatus\"&gt;\n    num_achievements = ListCount(GetDirectChildren(earned achievements))\n    num_total = ListCount(GetDirectChildren(achievements)) + num_achievements\n    percentage = 100 * (1.0 * num_achievements/num_total)\n    split_value_list = NewStringList()\n    string_value = ToString (percentage)\n    split_value_list = split(string_value,\".\")\n    string_integer = ListItem(split_value_list,0)\n    result = ToInt(string_integer)\n    JS.eval (\"$('#achv-span').html('\" + num_achievements + \"/\" + num_total + \" (\" + result + \"%)\" + \"');\")\n    JS.eval (\"$('#achv-indicator').css('padding-right', '\" + (1 + 199 * num_achievements / num_total) + \"px');\")\n  &lt;/function&gt;\n  &lt;function name=\"ListAchievements\" parameters=\"notaparameter\"&gt;\n    Ask (\"Do you want to list your achievements?\") {\n      if (result) {\n        index = 1\n        foreach (item, GetDirectChildren(earned achievements)) {\n          msg (\"{b:\" + DisplayNumber(index, \"3.0\") + \"}\" + \" \" + ObjectLink(item) + \":\")\n          msg (\"{i:\" + item.look + \"}\")\n          index = index + 1\n        }\n        if (index = 1) {\n          msg (\"{b:You don't have any achievements yet!}\")\n        }\n      }\n      game.notarealturn = true\n    }\n  &lt;/function&gt;\n  &lt;javascript src=\"achievements.js\" /&gt;\n&lt;/asl&gt;\n</code></pre>\n<p>achievements.js:</p>\n<pre><code>/**\n * Calculate a 32 bit FNV-1a hash\n * Found here: https://gist.github.com/vaiorabbit/5657561\n * Ref.: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param {string} str the input value\n */\nfunction hashFnv32a(str/*, asString*/) {\n    /*jshint bitwise:false */\n    var i, l,\n        hval = 0x811c9dc5;\n\n    for (i = 0, l = str.length; i &lt; l; i++) {\n        hval ^= str.charCodeAt(i);\n        hval += (hval &lt;&lt; 1) + (hval &lt;&lt; 4) + (hval &lt;&lt; 7) + (hval &lt;&lt; 8) + (hval &lt;&lt; 24);\n    }\n\t\n\tASLEvent(\"SetAchievementCode\", str + \";\" + (\"0000000\" + (hval &gt;&gt;&gt; 0).toString(16)).substr(-8));\n}\n</code></pre>\n\n",
      "PostDate": "2017-09-03T14:22:24.5228598Z",
      "LastEditDate": "2017-09-03T22:24:08.1948061Z",
      "link": null
    },
    {
      "PostId": "b6d409dd-a89b-4bc5-a43a-d5de01a5c349",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I guess that's cool. Looks rather complicated, really.",
      "EditableFormat": "markdown",
      "HTML": "<p>I guess that's cool. Looks rather complicated, really.</p>\n\n",
      "PostDate": "2017-09-03T21:01:06.7824132Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c4351df4-8bee-4f5e-a8c9-0925d0853ae7",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I guess that's cool. Looks rather complicated, really.\r\n\r\nWell, it does use many of the more advanced features of quest.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I guess that's cool. Looks rather complicated, really.</p>\n</blockquote>\n<p>Well, it does use many of the more advanced features of quest.</p>\n\n",
      "PostDate": "2017-09-03T21:16:38.1974405Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "587f5eb9-c8ef-4aa2-a288-4f2a22b57709",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "awesome library !!!! thanks for making it and providing it to us!\r\n\r\n-------------------\r\n\r\nI'm still a coding noob, so I'd create something just using list/dictionary Attributes:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/vlpnofgpquokwe_s2yvc9g/quest-task-mission-award-trophy-etc-system\r\n(I'm lazy, so it's just the beginnings/skeleton of it, I think, and/or it's actually completed but very simplistic. My simple attempt at such a system using only list/dictionary attributes, as I'm just a code noob, no fancy data structures and etc advanced designs that you did in your library)\r\n\r\n----------------------\r\n\r\n(I'm still stuck on Data Structures/Management, failed the programming class on this type of stuff, sighs: linked lists, trees, maps, stacks, queues, dictionaries, etc. The coding is simple in hindsight, but my brain just gets confused/lost, it's not used to thinking in this structural way, sighs)\r\n\r\n(and Assembly Language and the basics of computer architecture: circuitry/digital-design/logic-gates/half-adders/full-adders/encoders/decoders/registers/flip-flops/mutex'es-multiplexors/combinational-circuits/sequential-circuits/etc-etc-etc, last two programming classes, data structures/management and assembly_language+computer_architecture, that I got to pass to finish up lower division programming classes, grr... and than I'll likely have more trouble with the upper division programming classes... lol... sighs)",
      "EditableFormat": "markdown",
      "HTML": "<p>awesome library !!!! thanks for making it and providing it to us!</p>\n<hr>\n<p>I'm still a coding noob, so I'd create something just using list/dictionary Attributes:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/vlpnofgpquokwe_s2yvc9g/quest-task-mission-award-trophy-etc-system<br>\n(I'm lazy, so it's just the beginnings/skeleton of it, I think, and/or it's actually completed but very simplistic. My simple attempt at such a system using only list/dictionary attributes, as I'm just a code noob, no fancy data structures and etc advanced designs that you did in your library)</p>\n<hr>\n<p>(I'm still stuck on Data Structures/Management, failed the programming class on this type of stuff, sighs: linked lists, trees, maps, stacks, queues, dictionaries, etc. The coding is simple in hindsight, but my brain just gets confused/lost, it's not used to thinking in this structural way, sighs)</p>\n<p>(and Assembly Language and the basics of computer architecture: circuitry/digital-design/logic-gates/half-adders/full-adders/encoders/decoders/registers/flip-flops/mutex'es-multiplexors/combinational-circuits/sequential-circuits/etc-etc-etc, last two programming classes, data structures/management and assembly_language+computer_architecture, that I got to pass to finish up lower division programming classes, grr... and than I'll likely have more trouble with the upper division programming classes... lol... sighs)</p>\n\n",
      "PostDate": "2017-09-03T23:25:23.078162Z",
      "LastEditDate": "2017-09-03T23:32:45.7064587Z",
      "link": null
    },
    {
      "PostId": "0ef45550-cf38-4320-a59b-2aa9ec70fb15",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">awesome library !!!! thanks for making it and providing it to us!\r\n\r\nGlad that you like it.\r\n\r\n>I'm still a coding noob, so I'd create something just using list/dictionary Attributes:\r\n>http://textadventures.co.uk/forum/samples/topic/vlpnofgpquokwe_s2yvc9g/quest-task-mission-award-trophy-etc-system\r\n(I'm lazy, so it's just the beginnings/skeleton of it, I think, and/or it's actually completed but very simplistic. My simple attempt at such a system using only list/dictionary attributes, as I'm just a code noob, no fancy data structures and etc advanced designs that you did in your library)\r\n\r\nWell in this case I didn't actually use any datastructures. What I did was make use of Quest's objects and rooms. Basically, they are the datastructure. And this works quite well with Quest. Maybe you can try this approach too, having custom types for quests, tasks, trophys etc. and then simply creating them as objects in the GUI with the necessary  attributes and scripts plus some functions that help you along the way.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>awesome library !!!! thanks for making it and providing it to us!</p>\n</blockquote>\n<p>Glad that you like it.</p>\n<blockquote>\n<p>I'm still a coding noob, so I'd create something just using list/dictionary Attributes:<br>\nhttp://textadventures.co.uk/forum/samples/topic/vlpnofgpquokwe_s2yvc9g/quest-task-mission-award-trophy-etc-system<br>\n(I'm lazy, so it's just the beginnings/skeleton of it, I think, and/or it's actually completed but very simplistic. My simple attempt at such a system using only list/dictionary attributes, as I'm just a code noob, no fancy data structures and etc advanced designs that you did in your library)</p>\n</blockquote>\n<p>Well in this case I didn't actually use any datastructures. What I did was make use of Quest's objects and rooms. Basically, they are the datastructure. And this works quite well with Quest. Maybe you can try this approach too, having custom types for quests, tasks, trophys etc. and then simply creating them as objects in the GUI with the necessary  attributes and scripts plus some functions that help you along the way.</p>\n\n",
      "PostDate": "2017-09-04T00:41:22.8238337Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "25c9dc82-7c2f-4752-a696-dc4ce95407c1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "ya, I was just speaking in general, if you had a big or complex enough system, then maybe an advanced data structure design would be useful.\r\n\r\nI know you used Objects for your design, and with quest, they work very well, especially as you can use Delegates with Script Attributes to give them the same functionalities of 'returning a value' and 'Arguments/Parameters' as Functions have:\r\n\r\n```\r\n// ----------------\r\n\r\n// this can kind of be seen as a (it's similar to a) 'prototype', except its for Script Attributes, and not Functions:\r\n\r\n<delegate name=\"return_sum_of_two_integers_delegate\" parameters=\"integer_1_parameter, integer_2_parameter\" type=\"int\" />\r\n\r\n// -----------------\r\n\r\n<object name=\"sum_of_two_integers_object\">\r\n  <attr name=\"sum_integer_attribute\" type=\"int\">0</attr>\r\n  <attr name=\"set_sum_script_attribute\" type=\"script\">\r\n    this.sum_integer_attribute = do (this, \"return_sum_of_two_integers_script_attribute\", 7, 4)\r\n  </attr>\r\n  <attr name=\"return_sum_of_two_integers_script_attribute\" type=\"return_sum_of_two_integers_delegate\">\r\n    if (IsInt (integer_1_parameter) and IsInt (integer_2_parameter)) {\r\n      return (return integer_1_parameter + integer_2_parameter)\r\n    } else {\r\n      msg (\"Error: both of your inputs must be integer values)\")\r\n    }\r\n  </attr>\r\n</object>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>ya, I was just speaking in general, if you had a big or complex enough system, then maybe an advanced data structure design would be useful.</p>\n<p>I know you used Objects for your design, and with quest, they work very well, especially as you can use Delegates with Script Attributes to give them the same functionalities of 'returning a value' and 'Arguments/Parameters' as Functions have:</p>\n<pre><code>// ----------------\n\n// this can kind of be seen as a (it's similar to a) 'prototype', except its for Script Attributes, and not Functions:\n\n&lt;delegate name=\"return_sum_of_two_integers_delegate\" parameters=\"integer_1_parameter, integer_2_parameter\" type=\"int\" /&gt;\n\n// -----------------\n\n&lt;object name=\"sum_of_two_integers_object\"&gt;\n  &lt;attr name=\"sum_integer_attribute\" type=\"int\"&gt;0&lt;/attr&gt;\n  &lt;attr name=\"set_sum_script_attribute\" type=\"script\"&gt;\n    this.sum_integer_attribute = do (this, \"return_sum_of_two_integers_script_attribute\", 7, 4)\n  &lt;/attr&gt;\n  &lt;attr name=\"return_sum_of_two_integers_script_attribute\" type=\"return_sum_of_two_integers_delegate\"&gt;\n    if (IsInt (integer_1_parameter) and IsInt (integer_2_parameter)) {\n      return (return integer_1_parameter + integer_2_parameter)\n    } else {\n      msg (\"Error: both of your inputs must be integer values)\")\n    }\n  &lt;/attr&gt;\n&lt;/object&gt;\n</code></pre>\n\n",
      "PostDate": "2017-09-04T06:25:07.4312233Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ba605d30-2925-42af-9f99-6f28e684ab63",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What I did was make use of Quest's objects and rooms. Basically, they are the datastructure. And this works quite well with Quest.\r\n\r\nThis is what I do a lot!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What I did was make use of Quest's objects and rooms. Basically, they are the datastructure. And this works quite well with Quest.</p>\n</blockquote>\n<p>This is what I do a lot!</p>\n\n",
      "PostDate": "2017-09-04T07:23:18.3368818Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3e4b1e19-2e70-4970-9014-8dae5f3096f7",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For info, I've created two educational games that use the same general achievement approach (Giantkiller Too and L Too). In my approach, the player carries an achievement certificate, which can be consulted at any time (and can't be dropped). There are two types of achievement: (i) number of locations covered; and (ii) puzzles completed, with accompanying score. At the beginning of the game, the number of locations, number of puzzles and the possible total score are shown on the certificate. There is also allowance for 'hints', which reduce the score, and an assumption that a 'reward sound' is played when puzzles are completed. It's probably easier to just play one of the games to see how it works out.\r\n\r\nI'm happy to share the code if anyone is interested.",
      "EditableFormat": "markdown",
      "HTML": "<p>For info, I've created two educational games that use the same general achievement approach (Giantkiller Too and L Too). In my approach, the player carries an achievement certificate, which can be consulted at any time (and can't be dropped). There are two types of achievement: (i) number of locations covered; and (ii) puzzles completed, with accompanying score. At the beginning of the game, the number of locations, number of puzzles and the possible total score are shown on the certificate. There is also allowance for 'hints', which reduce the score, and an assumption that a 'reward sound' is played when puzzles are completed. It's probably easier to just play one of the games to see how it works out.</p>\n<p>I'm happy to share the code if anyone is interested.</p>\n\n",
      "PostDate": "2017-09-05T09:26:24.9458251Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "057f5a77-d884-4388-90f8-02972af2c311",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My first attempt used an object in the Inventory as well, but then I changed it to this variant where it is part of the custom status pane.\r\nHowever, the most important aspect of my achievement system is the ability to restore achievements for the next playthrough. This is something that many people asked and struggled with. The rest of my system is still only basic (and I will probably extend it while creating my game).",
      "EditableFormat": "markdown",
      "HTML": "<p>My first attempt used an object in the Inventory as well, but then I changed it to this variant where it is part of the custom status pane.<br>\nHowever, the most important aspect of my achievement system is the ability to restore achievements for the next playthrough. This is something that many people asked and struggled with. The rest of my system is still only basic (and I will probably extend it while creating my game).</p>\n\n",
      "PostDate": "2017-09-05T13:41:57.9583506Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d06cb3c1-6658-4b8c-a74b-ec8c8581226a",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi Clocktown, I don't understand what you mean by \"restoring achievements\"? Why are the built-in facilities to save a game and restore it insufficient? ",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi Clocktown, I don't understand what you mean by \"restoring achievements\"? Why are the built-in facilities to save a game and restore it insufficient?</p>\n\n",
      "PostDate": "2017-09-05T20:32:34.8386224Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c3815189-d016-4c08-b65c-4705224df8a1",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think maybe Clocktown is refering to doing a 'new game', but wanting to preserve game/character stats/etc from the previous game, for the new game. There's quite a few games like this, where you can replay the game, while still keeping all your stats/equipment/etc\r\n\r\nfor example, not every achievement or whatever can be done within a single playthrough / game, so you have to do multiple play throughs / games, to get a 100% achievement and/or whatever.\r\n\r\nmy guess anyways",
      "EditableFormat": "markdown",
      "HTML": "<p>I think maybe Clocktown is refering to doing a 'new game', but wanting to preserve game/character stats/etc from the previous game, for the new game. There's quite a few games like this, where you can replay the game, while still keeping all your stats/equipment/etc</p>\n<p>for example, not every achievement or whatever can be done within a single playthrough / game, so you have to do multiple play throughs / games, to get a 100% achievement and/or whatever.</p>\n<p>my guess anyways</p>\n\n",
      "PostDate": "2017-09-05T20:44:53.2745764Z",
      "LastEditDate": "2017-09-05T20:47:48.8166045Z",
      "link": null
    },
    {
      "PostId": "a320a206-4a1e-40bb-8a31-06aa43bd83fd",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I assume it loads the saved stats  via JS functions and ASLEvents?",
      "EditableFormat": "markdown",
      "HTML": "<p>I assume it loads the saved stats  via JS functions and ASLEvents?</p>\n\n",
      "PostDate": "2017-09-05T23:08:42.9574516Z",
      "LastEditDate": "2017-09-05T23:09:10.96345Z",
      "link": null
    },
    {
      "PostId": "ec6de714-7edb-4a73-85de-77fbb4ec25e2",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "hegemonkhan got it right. It's meant for games that would have to be played multiple times to get all achievements.\r\n\r\n>I assume it loads the saved stats via JS functions and ASLEvents?\r\n\r\nIt uses JS functions, ASLEvents and Callbacks, yes. However, all it does is compute Hashes of the achievement names at the beginning of the game. Once the game ends, you will basically get these Hashes of your earned achievements, separated with a semicolon. When you enter this code at the beginning of the game, these hashes are simply compared to the computed hashes and the respective achievements  are earned again.",
      "EditableFormat": "markdown",
      "HTML": "<p>hegemonkhan got it right. It's meant for games that would have to be played multiple times to get all achievements.</p>\n<blockquote>\n<p>I assume it loads the saved stats via JS functions and ASLEvents?</p>\n</blockquote>\n<p>It uses JS functions, ASLEvents and Callbacks, yes. However, all it does is compute Hashes of the achievement names at the beginning of the game. Once the game ends, you will basically get these Hashes of your earned achievements, separated with a semicolon. When you enter this code at the beginning of the game, these hashes are simply compared to the computed hashes and the respective achievements  are earned again.</p>\n\n",
      "PostDate": "2017-09-06T17:40:41.705248Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c7d063bc-dbdc-48af-bbd5-c8721e48c975",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "you can preserve whatever: character stats/equipment, achievements/trophies, team-party-members, whatever else. Just threw out some options/ideas of what some games preserve for multiple playthroughs / games.\r\n\r\nI think clocktown is just doing achievements/trophies, not character stats/equipment, nor whatever else. I just mentioned those other things, as examples of other things that multiple-playthrough games can/do preserve (depending on the game of course).",
      "EditableFormat": "markdown",
      "HTML": "<p>you can preserve whatever: character stats/equipment, achievements/trophies, team-party-members, whatever else. Just threw out some options/ideas of what some games preserve for multiple playthroughs / games.</p>\n<p>I think clocktown is just doing achievements/trophies, not character stats/equipment, nor whatever else. I just mentioned those other things, as examples of other things that multiple-playthrough games can/do preserve (depending on the game of course).</p>\n\n",
      "PostDate": "2017-09-06T23:40:44.5441558Z",
      "LastEditDate": "2017-09-06T23:41:48.902825Z",
      "link": null
    },
    {
      "PostId": "c7653cd8-41f6-473e-bbb4-789b90aa9d31",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, still scratching my head here! I'm probably better waiting to see this idea in operation in a full game...or can you point out some existing games where the facility would be useful?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, still scratching my head here! I'm probably better waiting to see this idea in operation in a full game...or can you point out some existing games where the facility would be useful?</p>\n\n",
      "PostDate": "2017-09-07T08:02:54.6341389Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3327f0e5-a8a3-4280-a367-53081dd5a058",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "DavyB, e.g. think about some Dating-kind-of game. Depending on your actions, you'll get on the route for character X, and depending on further actions, you might get a bad or a good ending. One possibility to track the overall completion would be Achievements. These could also unlock images in a gallery. However, seeing as the player will always start anew, you somehow need to track this progress across multiple sessions.  In my case, I chose this code system. You could of course also save this information in a file and load it on startup. This is entirely different from the built-in save system, which does simply not serve this purpose.",
      "EditableFormat": "markdown",
      "HTML": "<p>DavyB, e.g. think about some Dating-kind-of game. Depending on your actions, you'll get on the route for character X, and depending on further actions, you might get a bad or a good ending. One possibility to track the overall completion would be Achievements. These could also unlock images in a gallery. However, seeing as the player will always start anew, you somehow need to track this progress across multiple sessions.  In my case, I chose this code system. You could of course also save this information in a file and load it on startup. This is entirely different from the built-in save system, which does simply not serve this purpose.</p>\n\n",
      "PostDate": "2017-09-07T13:54:32.6593216Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a61b7f94-60bd-4d35-93ea-ed46bedd31da",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm wondering if rather than displaying a code, you could use the Javascript cookie functions (for the web version, at least). Not sure if Quest already uses cookies, but if you can put that code in a cookie, you could have achievements persist transparently between multiple attempts at a game.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm wondering if rather than displaying a code, you could use the Javascript cookie functions (for the web version, at least). Not sure if Quest already uses cookies, but if you can put that code in a cookie, you could have achievements persist transparently between multiple attempts at a game.</p>\n\n",
      "PostDate": "2017-09-09T17:01:54.6802289Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a6b39677-9a0e-46e7-81f0-8b9bfac52a1b",
      "UserId": 321893,
      "Username": "Clocktown",
      "AvatarUrl": "https://secure.gravatar.com/avatar/43629596f41b356af372b412ad66ef49?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I'm wondering if rather than displaying a code, you could use the Javascript cookie functions (for the web version, at least). Not sure if Quest already uses cookies, but if you can put that code in a cookie, you could have achievements persist transparently between multiple attempts at a game.\r\n\r\nIf anything, I'd probably include both the code and the cookie system. So if someone accidentally eats the cookies, he still might have the code available.\r\nHowever, as for the Desktop Version; I think it uses Chrome or something as it's base anyway, so maybe cookies work even there? Maybe someone can shed some light on this.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm wondering if rather than displaying a code, you could use the Javascript cookie functions (for the web version, at least). Not sure if Quest already uses cookies, but if you can put that code in a cookie, you could have achievements persist transparently between multiple attempts at a game.</p>\n</blockquote>\n<p>If anything, I'd probably include both the code and the cookie system. So if someone accidentally eats the cookies, he still might have the code available.<br>\nHowever, as for the Desktop Version; I think it uses Chrome or something as it's base anyway, so maybe cookies work even there? Maybe someone can shed some light on this.</p>\n\n",
      "PostDate": "2017-09-09T17:58:25.6535341Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e5ef874c-ac30-4fde-aaf6-f6dbd0d51427",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It might be something as simple as `JS.eval(\"if(typeof(localStorage) !== \\\"undefined\\\") { localStorage.setItem(\\\"gamename_achievements\\\",\\\"\"+GetAchievementHash()+\"\\\"); }\")` in the function that awards a new achievement; and a matching getItem() in the init script to retrieve them again. Noting that for the item name includes the game name; because (on the web version; not sure about offline) all games on the same server would share a localStorage object.\r\n\r\nOr, of course, you could define a javascript function for gaining an achievement. Which would make it pop up in the corner of the screen, play a tinny little fanfare, and also save the achievement to local storage if possible. If your list of achievements gained is stored in both the game object, and in a javascript object, web users could look through the list and see which ones they've got without having to wait for a server response … and presumably, a sequel could give you bonus gear if you've got all the endings to the first instalment.",
      "EditableFormat": "markdown",
      "HTML": "<p>It might be something as simple as <code>JS.eval(\"if(typeof(localStorage) !== \\\"undefined\\\") { localStorage.setItem(\\\"gamename_achievements\\\",\\\"\"+GetAchievementHash()+\"\\\"); }\")</code> in the function that awards a new achievement; and a matching getItem() in the init script to retrieve them again. Noting that for the item name includes the game name; because (on the web version; not sure about offline) all games on the same server would share a localStorage object.</p>\n<p>Or, of course, you could define a javascript function for gaining an achievement. Which would make it pop up in the corner of the screen, play a tinny little fanfare, and also save the achievement to local storage if possible. If your list of achievements gained is stored in both the game object, and in a javascript object, web users could look through the list and see which ones they've got without having to wait for a server response … and presumably, a sequel could give you bonus gear if you've got all the endings to the first instalment.</p>\n\n",
      "PostDate": "2017-09-10T09:38:34.7567223Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
