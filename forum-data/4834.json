{
  "Topic": {
    "TopicId": "4834",
    "ForumId": "15",
    "Title": "File format",
    "LastUpdated": "2014-11-30T21:12:29+00:00",
    "ReplyCount": 21
  },
  "Posts": [
    {
      "PostId": "32129",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Here's my idea for the file format for QuestKit.\n\nIt aims to have as little markup as possible, so it can be read and edited by a human.\n\nHere's a sample based on some of the Quest 5 Tutorial Game:\n\n[code:owjxz65b]\ntitle&#58; Test Game\n\ncommand&#58;\npattern&#58; say #text#\nscript&#058;\n\tfunction(text) {\n\t\tmsg (&quot;You say '&quot; + text + &quot;', but nobody replies&#46;&quot;);\n\t}\n\nlocation&#58; lounge\ndescription&#58; This is quite a plain lounge with an old beige carpet and peeling wallpaper&#46;\nsouth&#58; kitchen\n\nobject&#58; TV\nswitchable&#58; true\nalt&#58;\n\t&#91;&quot;television&quot;, &quot;telly&quot;&#93;\nlook&#58; The TV is an old model, possibly 20 years old&#46; {if TV&#46;switchedon&#58;It is currently showing an old western&#46;}{else&#58;It is currently switched off&#46;}\nwatch&#58; You watch for a few minutes&#46; As your will to live slowly ebbs away, you remember that you’ve always hated watching westerns&#46;\n\ncharacter&#58; Bob\ntype&#58; male\nlook&#58; {if Bob&#46;alive&#58;Bob is sitting up, appearing to feel somewhat under the weather&#46;}{else&#58;Bob is lying on the floor, a lot more still than usual&#46;}\nuse&#91;defibrillator&#93;&#58;\n\tfunction() {\n\t\tif (get(&quot;Bob&#46;alive&quot;)) {\n\t\t\tmsg (&quot;Bob is alive so you don't need to use the defibrilltor again&#46;&quot;)\n\t\t}\n\t\telse {\n\t\t\tmsg (&quot;Miraculously, the defibrillator lived up to its promise, and Bob is now alive again&#46; He says his head feels kind of fuzzy&#46;&quot;);\n\t\t\tset (&quot;Bob&#46;alive&quot;, true);\n\t\t}\n\t}\n\nobject&#58; table\nsurface&#58; true\n\nobject&#58; newspaper\nparent&#58; table\ntake&#58; true\ntakemsg&#58; You fold the newspaper and place it neatly under your arm&#46;\n\nobject&#58; defibrillator\nlook&#58; A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed&#46;\ntake&#58; true\n\nlocation&#58; kitchen\ndescription&#58; Just an ordinary kitchen&#46;\n\nobject&#58; eggs\nweight&#58; 250\nprefix&#58; some\nlook&#58;\n\tfunction() {\n\t\tmsg (&quot;A box of eggs, weighing &quot; + get(&quot;eggs&#46;weight&quot;) + &quot; grams&#46;&quot;);\n\t}\n\ncommand&#58;\npattern&#58; weigh #object#\nscript&#058;\n\tfunction(object) {\n\t\tmsg (&quot;It weighs &quot; + get(object, &quot;weight&quot;) + &quot; grams&#46;&quot;);\n\t}\n\nobject&#58; fridge\ncontainer&#58; true\nclosed&#58; true\n\nobject&#58; milk\nparent&#58; fridge\nprefix&#58; some\n\nobject&#58; cheese\nparent&#58; fridge\nprefix&#58; some\n\nobject&#58; beer\nparent&#58; fridge\nprefix&#58; some\n[/code:owjxz65b]\n\nThe general format is &quot;attribute: value&quot;. If the value is tab-indented on the following line, if it begins with &quot;function&quot; then it's a function, otherwise it's interpreted as JSON. (This is how we define &quot;TV.alt&quot; as an array).\n\nQuestKit objects are not exposed as objects in JavaScript, which is why you need to use &quot;set&quot; and &quot;get&quot; to access attributes. Scripts themselves are not attributes - you won't be able to set an object's script at run-time, but you can still get it using the same dotted string syntax (e.g. &quot;eggs.look&quot;). There are no script dictionaries, but you can refer to a script called &quot;Bob.use[defibrillator]&quot;.\n\nSome notes...\n\n- If an attribute can be evaluated as a number, then it is a number. Otherwise it's a string. (To force a number to be a string, use JSON - so tab-indent it and surround with quotes)\n- When a location is defined, the objects that follow will be in that location, unless they have a parent set separately. (Note that locations are still &quot;just&quot; objects, the same way they are in Quest 5)\n- Setting an directional attribute name on a location (e.g. &quot;south: some room&quot;) automatically defines a two-way exit\n\nSome open questions:\n\n- I defined Bob using &quot;character:&quot; - he's still just an object. Not sure if setting something as a character would automatically set some attributes. Or maybe just make it appear differently in the editor. Could there be a use for this?\n- It would be nice to have a way to write long-ish passages of text including linebreaks without having to worry about escaping quotes. Maybe tab-indented again, but then we need a way to distinguish between plain text (Markdown?) and JSON. Maybe adding an asterisk before the attribute name or something, but that seems like a kludge.\n\nWhat do you think?\n\nPlease do rip this apart - let me know if anything seems stupid, let me know what doesn't make sense, let me know what you would change...",
      "EditableFormat": "bbcode",
      "HTML": "Here's my idea for the file format for QuestKit.<br/><br/>It aims to have as little markup as possible, so it can be read and edited by a human.<br/><br/>Here's a sample based on some of the Quest 5 Tutorial Game:<br/><br/><pre><code><br/>title&#58; Test Game<br/><br/>command&#58;<br/>pattern&#58; say #text#<br/>script&#058;<br/>\tfunction(text) {<br/>\t\tmsg (&quot;You say '&quot; + text + &quot;', but nobody replies&#46;&quot;);<br/>\t}<br/><br/>location&#58; lounge<br/>description&#58; This is quite a plain lounge with an old beige carpet and peeling wallpaper&#46;<br/>south&#58; kitchen<br/><br/>object&#58; TV<br/>switchable&#58; true<br/>alt&#58;<br/>\t&#91;&quot;television&quot;, &quot;telly&quot;&#93;<br/>look&#58; The TV is an old model, possibly 20 years old&#46; {if TV&#46;switchedon&#58;It is currently showing an old western&#46;}{else&#58;It is currently switched off&#46;}<br/>watch&#58; You watch for a few minutes&#46; As your will to live slowly ebbs away, you remember that you’ve always hated watching westerns&#46;<br/><br/>character&#58; Bob<br/>type&#58; male<br/>look&#58; {if Bob&#46;alive&#58;Bob is sitting up, appearing to feel somewhat under the weather&#46;}{else&#58;Bob is lying on the floor, a lot more still than usual&#46;}<br/>use&#91;defibrillator&#93;&#58;<br/>\tfunction() {<br/>\t\tif (get(&quot;Bob&#46;alive&quot;)) {<br/>\t\t\tmsg (&quot;Bob is alive so you don't need to use the defibrilltor again&#46;&quot;)<br/>\t\t}<br/>\t\telse {<br/>\t\t\tmsg (&quot;Miraculously, the defibrillator lived up to its promise, and Bob is now alive again&#46; He says his head feels kind of fuzzy&#46;&quot;);<br/>\t\t\tset (&quot;Bob&#46;alive&quot;, true);<br/>\t\t}<br/>\t}<br/><br/>object&#58; table<br/>surface&#58; true<br/><br/>object&#58; newspaper<br/>parent&#58; table<br/>take&#58; true<br/>takemsg&#58; You fold the newspaper and place it neatly under your arm&#46;<br/><br/>object&#58; defibrillator<br/>look&#58; A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed&#46;<br/>take&#58; true<br/><br/>location&#58; kitchen<br/>description&#58; Just an ordinary kitchen&#46;<br/><br/>object&#58; eggs<br/>weight&#58; 250<br/>prefix&#58; some<br/>look&#58;<br/>\tfunction() {<br/>\t\tmsg (&quot;A box of eggs, weighing &quot; + get(&quot;eggs&#46;weight&quot;) + &quot; grams&#46;&quot;);<br/>\t}<br/><br/>command&#58;<br/>pattern&#58; weigh #object#<br/>script&#058;<br/>\tfunction(object) {<br/>\t\tmsg (&quot;It weighs &quot; + get(object, &quot;weight&quot;) + &quot; grams&#46;&quot;);<br/>\t}<br/><br/>object&#58; fridge<br/>container&#58; true<br/>closed&#58; true<br/><br/>object&#58; milk<br/>parent&#58; fridge<br/>prefix&#58; some<br/><br/>object&#58; cheese<br/>parent&#58; fridge<br/>prefix&#58; some<br/><br/>object&#58; beer<br/>parent&#58; fridge<br/>prefix&#58; some<br/></code></pre><br/><br/>The general format is &quot;attribute: value&quot;. If the value is tab-indented on the following line, if it begins with &quot;function&quot; then it's a function, otherwise it's interpreted as JSON. (This is how we define &quot;TV.alt&quot; as an array).<br/><br/>QuestKit objects are not exposed as objects in JavaScript, which is why you need to use &quot;set&quot; and &quot;get&quot; to access attributes. Scripts themselves are not attributes - you won't be able to set an object's script at run-time, but you can still get it using the same dotted string syntax (e.g. &quot;eggs.look&quot;). There are no script dictionaries, but you can refer to a script called &quot;Bob.use[defibrillator]&quot;.<br/><br/>Some notes...<br/><br/>- If an attribute can be evaluated as a number, then it is a number. Otherwise it's a string. (To force a number to be a string, use JSON - so tab-indent it and surround with quotes)<br/>- When a location is defined, the objects that follow will be in that location, unless they have a parent set separately. (Note that locations are still &quot;just&quot; objects, the same way they are in Quest 5)<br/>- Setting an directional attribute name on a location (e.g. &quot;south: some room&quot;) automatically defines a two-way exit<br/><br/>Some open questions:<br/><br/>- I defined Bob using &quot;character:&quot; - he's still just an object. Not sure if setting something as a character would automatically set some attributes. Or maybe just make it appear differently in the editor. Could there be a use for this?<br/>- It would be nice to have a way to write long-ish passages of text including linebreaks without having to worry about escaping quotes. Maybe tab-indented again, but then we need a way to distinguish between plain text (Markdown?) and JSON. Maybe adding an asterisk before the attribute name or something, but that seems like a kludge.<br/><br/>What do you think?<br/><br/>Please do rip this apart - let me know if anything seems stupid, let me know what doesn't make sense, let me know what you would change...",
      "PostDate": "2014-11-28T18:21:45+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32136",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "Cool, some thoughts on this:\n\n* If a function always has the function keyword, are tab indents necessary for other values?\n\n* How do extensions/namespaces work, both for QuestKit extensions and JS libraries?\n\n* is it necessary to have both a 'description' and a 'look' attribute?\n\n* do the object designations ('location', 'character') imply a class hierarchy/inheritance of any kind? \n\n* how will QK represent threaded conversations in the file format (i.e. conversation node objects nested in other node objects)? By giving a child node a parent of another node? Can a node then have multiple parents? What does that say about the object model? Does this need to be special-cased?\n\n* could we triple quote long passages of text?",
      "EditableFormat": "bbcode",
      "HTML": "Cool, some thoughts on this:<br/><br/>* If a function always has the function keyword, are tab indents necessary for other values?<br/><br/>* How do extensions/namespaces work, both for QuestKit extensions and JS libraries?<br/><br/>* is it necessary to have both a 'description' and a 'look' attribute?<br/><br/>* do the object designations ('location', 'character') imply a class hierarchy/inheritance of any kind? <br/><br/>* how will QK represent threaded conversations in the file format (i.e. conversation node objects nested in other node objects)? By giving a child node a parent of another node? Can a node then have multiple parents? What does that say about the object model? Does this need to be special-cased?<br/><br/>* could we triple quote long passages of text?",
      "PostDate": "2014-11-28T19:23:31+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32152",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Looks a lot like YAML, which I like. A lot less typing that XML.",
      "EditableFormat": "bbcode",
      "HTML": "Looks a lot like YAML, which I like. A lot less typing that XML.",
      "PostDate": "2014-11-28T23:02:35+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32159",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Ah, YAML - thanks The Pixie! It will make things much easier if we reuse an existing format. I'll come up with an example and post that in a bit.\n\nTo answer George's questions:\n\n1. re: tab indents - the question might not be relevant if we use YAML\n2. extensions/namespaces - I don't think we need to specify anything JS-wise. In general, let's not clutter up the global namespace. Extensions and JS libraries can do what they like, but it's probably advisable if they only add one global object (or perhaps even better, if they extend QuestKit's?). Hard to know yet until we flesh out how QuestKit's own core library works.\n3. &quot;Description&quot; is for rooms, &quot;look&quot; is for objects when you look at them - the same as it is in Quest. I'm open to all ideas though if there might be a better way.\n4. No, there are no class hierarchies or inheritance at all - I want to get away from that. &quot;Location&quot; or &quot;character&quot; are just a convenience for the editor. They also make implications - by defining a new location, all objects that occur after it have that location set as their parent.\n5. For conversation nodes, I think it will work just like Squiffy. Nodes have names, and link to other nodes by name. They won't have parents, so it's easy for multiple nodes to link to the same one.\n6. We certainly can do something like this with YAML...",
      "EditableFormat": "bbcode",
      "HTML": "Ah, YAML - thanks The Pixie! It will make things much easier if we reuse an existing format. I'll come up with an example and post that in a bit.<br/><br/>To answer George's questions:<br/><br/>1. re: tab indents - the question might not be relevant if we use YAML<br/>2. extensions/namespaces - I don't think we need to specify anything JS-wise. In general, let's not clutter up the global namespace. Extensions and JS libraries can do what they like, but it's probably advisable if they only add one global object (or perhaps even better, if they extend QuestKit's?). Hard to know yet until we flesh out how QuestKit's own core library works.<br/>3. &quot;Description&quot; is for rooms, &quot;look&quot; is for objects when you look at them - the same as it is in Quest. I'm open to all ideas though if there might be a better way.<br/>4. No, there are no class hierarchies or inheritance at all - I want to get away from that. &quot;Location&quot; or &quot;character&quot; are just a convenience for the editor. They also make implications - by defining a new location, all objects that occur after it have that location set as their parent.<br/>5. For conversation nodes, I think it will work just like Squiffy. Nodes have names, and link to other nodes by name. They won't have parents, so it's easy for multiple nodes to link to the same one.<br/>6. We certainly can do something like this with YAML...",
      "PostDate": "2014-11-29T10:23:46+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32161",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Here we go, this version uses YAML!\n\n[code:299uvuvn]\ntitle&#58; Test Game\n\n---\ncommand&#58;\npattern&#58; &quot;say #text#&quot;\naction&#58;\n    script&#058; |\n        function(text) {\n            msg (&quot;You say '&quot; + text + &quot;', but nobody replies&#46;&quot;);\n        }\n\n---\nlocation&#58; lounge\ndescription&#58; This is quite a plain lounge with an old beige carpet and peeling wallpaper&#46;\nsouth&#58; kitchen\n\n---\nobject&#58; TV\nswitchable&#58; true\nalt&#58;\n    - television\n    - telly\nlook&#58; The TV is an old model, possibly 20 years old&#46; {if TV&#46;switchedon&#58;It is currently showing an old western&#46;}{else&#58;It is currently switched off&#46;}\nwatch&#58; You watch for a few minutes&#46; As your will to live slowly ebbs away, you remember that you’ve always hated watching westerns&#46;\n\n---\ncharacter&#58; Bob\ntype&#58; male\nlook&#58; &quot;{if Bob&#46;alive&#58;Bob is sitting up, appearing to feel somewhat under the weather&#46;}{else&#58;Bob is lying on the floor, a lot more still than usual&#46;}&quot;\nuse&#91;defibrillator&#93;&#58;\n    script&#058; |\n        function() {\n            if (get(&quot;Bob&#46;alive&quot;)) {\n                msg (&quot;Bob is alive so you don't need to use the defibrilltor again&#46;&quot;)\n            }\n            else {\n                msg (&quot;Miraculously, the defibrillator lived up to its promise, and Bob is now alive again&#46; He says his head feels kind of fuzzy&#46;&quot;);\n                set (&quot;Bob&#46;alive&quot;, true);\n            }\n        }\n\n---\nobject&#58; table\nsurface&#58; true\n\n---\nobject&#58; newspaper\nparent&#58; table\ntake&#58; true\ntakemsg&#58; You fold the newspaper and place it neatly under your arm&#46;\n\n---\nobject&#58; defibrillator\nlook&#58; A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed&#46;\ntake&#58; true\n\n---\nlocation&#58; kitchen\ndescription&#58; Just an ordinary kitchen&#46;\n\n---\nobject&#58; eggs\nweight&#58; 250\nprefix&#58; some\nlook&#58;\n    script&#058; |\n        function() {\n            msg (&quot;A box of eggs, weighing &quot; + get(&quot;eggs&#46;weight&quot;) + &quot; grams&#46;&quot;);\n        }\n\n---\ncommand&#58;\npattern&#58; &quot;weigh #object#&quot;\naction&#58;\n    script&#058; |\n        function(object) {\n            msg (&quot;It weighs &quot; + get(object, &quot;weight&quot;) + &quot; grams&#46;&quot;);\n        }\n\n---\nobject&#58; fridge\ncontainer&#58; true\nclosed&#58; true\n\n---\nobject&#58; milk\nparent&#58; fridge\nprefix&#58; some\n\n---\nobject&#58; cheese\nparent&#58; fridge\nprefix&#58; some\n\n---\nobject&#58; beer\nparent&#58; fridge\nprefix&#58; some\n[/code:299uvuvn]\n\nNotes:\n\n- Each object here is a separate YAML document. I think this is neater than the alternative which would be having one document with a list of objects - then every object would need to be indented.\n- I tripped up over YAML not allowing tabs for indentation - you must uses spaces instead, so watch out for that.\n- Bob.look needs quotes around it, otherwise having it start with the brace character triggers parsing the value as JSON.\n- command patterns need quotes around them, otherwise the # and everything that follows it is treated as a comment.\n\nI've been thinking about what Jay said <!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=15&amp;t=4835#p32135\">viewtopic.php?f=15&amp;t=4835#p32135</a><!-- l --> about having a unified approach to combining text and scripts. So in this version of the format, a command has an &quot;action&quot;. This [i:299uvuvn]can[/i:299uvuvn] contain a script, but could also contain a &quot;text&quot; attribute. Similarly, an object's &quot;look&quot; can have the same structure.\n\nIf we don't do this, we won't actually be able to distinguish between scripts and strings, as they're all just strings according to the YAML parser. If we adopt a convention where scripts are always called &quot;script&quot;, it's easy to work it out.",
      "EditableFormat": "bbcode",
      "HTML": "Here we go, this version uses YAML!<br/><br/><pre><code><br/>title&#58; Test Game<br/><br/>---<br/>command&#58;<br/>pattern&#58; &quot;say #text#&quot;<br/>action&#58;<br/>    script&#058; |<br/>        function(text) {<br/>            msg (&quot;You say '&quot; + text + &quot;', but nobody replies&#46;&quot;);<br/>        }<br/><br/>---<br/>location&#58; lounge<br/>description&#58; This is quite a plain lounge with an old beige carpet and peeling wallpaper&#46;<br/>south&#58; kitchen<br/><br/>---<br/>object&#58; TV<br/>switchable&#58; true<br/>alt&#58;<br/>    - television<br/>    - telly<br/>look&#58; The TV is an old model, possibly 20 years old&#46; {if TV&#46;switchedon&#58;It is currently showing an old western&#46;}{else&#58;It is currently switched off&#46;}<br/>watch&#58; You watch for a few minutes&#46; As your will to live slowly ebbs away, you remember that you’ve always hated watching westerns&#46;<br/><br/>---<br/>character&#58; Bob<br/>type&#58; male<br/>look&#58; &quot;{if Bob&#46;alive&#58;Bob is sitting up, appearing to feel somewhat under the weather&#46;}{else&#58;Bob is lying on the floor, a lot more still than usual&#46;}&quot;<br/>use&#91;defibrillator&#93;&#58;<br/>    script&#058; |<br/>        function() {<br/>            if (get(&quot;Bob&#46;alive&quot;)) {<br/>                msg (&quot;Bob is alive so you don't need to use the defibrilltor again&#46;&quot;)<br/>            }<br/>            else {<br/>                msg (&quot;Miraculously, the defibrillator lived up to its promise, and Bob is now alive again&#46; He says his head feels kind of fuzzy&#46;&quot;);<br/>                set (&quot;Bob&#46;alive&quot;, true);<br/>            }<br/>        }<br/><br/>---<br/>object&#58; table<br/>surface&#58; true<br/><br/>---<br/>object&#58; newspaper<br/>parent&#58; table<br/>take&#58; true<br/>takemsg&#58; You fold the newspaper and place it neatly under your arm&#46;<br/><br/>---<br/>object&#58; defibrillator<br/>look&#58; A heart defibrillator can magically revive a dead person, if all those hospital dramas are to be believed&#46;<br/>take&#58; true<br/><br/>---<br/>location&#58; kitchen<br/>description&#58; Just an ordinary kitchen&#46;<br/><br/>---<br/>object&#58; eggs<br/>weight&#58; 250<br/>prefix&#58; some<br/>look&#58;<br/>    script&#058; |<br/>        function() {<br/>            msg (&quot;A box of eggs, weighing &quot; + get(&quot;eggs&#46;weight&quot;) + &quot; grams&#46;&quot;);<br/>        }<br/><br/>---<br/>command&#58;<br/>pattern&#58; &quot;weigh #object#&quot;<br/>action&#58;<br/>    script&#058; |<br/>        function(object) {<br/>            msg (&quot;It weighs &quot; + get(object, &quot;weight&quot;) + &quot; grams&#46;&quot;);<br/>        }<br/><br/>---<br/>object&#58; fridge<br/>container&#58; true<br/>closed&#58; true<br/><br/>---<br/>object&#58; milk<br/>parent&#58; fridge<br/>prefix&#58; some<br/><br/>---<br/>object&#58; cheese<br/>parent&#58; fridge<br/>prefix&#58; some<br/><br/>---<br/>object&#58; beer<br/>parent&#58; fridge<br/>prefix&#58; some<br/></code></pre><br/><br/>Notes:<br/><br/>- Each object here is a separate YAML document. I think this is neater than the alternative which would be having one document with a list of objects - then every object would need to be indented.<br/>- I tripped up over YAML not allowing tabs for indentation - you must uses spaces instead, so watch out for that.<br/>- Bob.look needs quotes around it, otherwise having it start with the brace character triggers parsing the value as JSON.<br/>- command patterns need quotes around them, otherwise the # and everything that follows it is treated as a comment.<br/><br/>I've been thinking about what Jay said <!-- l --><a class=\"postlink-local\" href=\"http://forum.textadventures.co.uk/viewtopic.php?f=15&amp;t=4835#p32135\">viewtopic.php?f=15&amp;t=4835#p32135</a><!-- l --> about having a unified approach to combining text and scripts. So in this version of the format, a command has an &quot;action&quot;. This <span style=\"font-style:italic;\">can</span> contain a script, but could also contain a &quot;text&quot; attribute. Similarly, an object's &quot;look&quot; can have the same structure.<br/><br/>If we don't do this, we won't actually be able to distinguish between scripts and strings, as they're all just strings according to the YAML parser. If we adopt a convention where scripts are always called &quot;script&quot;, it's easy to work it out.",
      "PostDate": "2014-11-29T10:51:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32165",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I hate when I waffle on so much, going different directions, that the person I'm talking to ends up agreeing to something I've moved on from mentally. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> \n\nI've been thinking a bit more, and I'd like to propose a different approach. I would appreciate your patience. First, the different text/script attributes worked well for my response code because &quot;if&quot;s and things were effected by having multiple responses. We don't really want that here. And having separate text and script attributes has the same separation of things I want to avoid. So let's see how this new idea might work... Keep in mind I haven't worked out all the details. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nI like having it possible to have simple text for descriptions. It's the leap from text to conditionals and things that seems to cause grief. Someone says, &quot;I have this room description, but now I want to have it sometimes say something else, based on something else I did elsewhere in the game.&quot; And it becomes such that even with this proposed format that you need to erase the text from the &quot;text&quot; field and create an &quot;msg&quot; command with that text in the &quot;script&quot; field as a first step. It's rewriting what you have, and it's all so different.\n\nWhat if we adopt an approach where text is primary and scripting secondary (but still important)? I'm thinking of an approach like what you do with (now, don't laugh or groan) ASP pages, where the scripting is added as markup. But the markup would be Javsascript or macro statements or both.\n\nThe initial description could be like this:\n\n[code:l7ef9brv]location&#58; a city street\ndescription&#58; You are on a deserted city street in the dark of night&#46;[/code:l7ef9brv]\n\nThe game author now wants two descriptions, one for night time and one for day time, determined by an attribute (maybe &quot;city.time&quot;). Then we could have markup like this:\n\n[code:l7ef9brv]location&#58; a city street\ndescription&#58; {$if (GetValue(&quot;city&#46;time&quot;) == &quot;night&quot;) $} \n\t\t\tYou are on a deserted city street in the dark of night&#46;\n\t\t   {$ else $}\n\t\t\tYou are on a busy city street in the dark of night&#46;\n\t\t   {$ endif $}\n[/code:l7ef9brv]\n\nThere are two things I like about this:\n1) You're doing the same thing you did before but extending it. You have the same description field and the same text, but now you've simply added in conditionals and more text.\n2) Any string not inside the funny braces is output as is. This allows you not have to put text inside quotes for an msg, worry about how to quote quote characters, etc.\n\nI know this is basically the text processor, or a souped up version of the same. But I think people can deal with markup much more readily than script, and it makes handing some code to someone else trivial. They just copy and paste it where it needs to go, as they would text.\n\nA call to Javascript could simply be:\n\n[code:l7ef9brv]{$ someFunction(); $}[/code:l7ef9brv]\nIts text value would be nothing, so it would contribute nothing to the output. Or maybe it does have a value that is output. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nAnd to get to the other thing I had mentioned in my email, we could enable user defined macros as well - with the same text markup usage.\n\n[code:l7ef9brv]macro&#58; authorname\ntext&#58; Jay Nabonne\n\nmacro&#58; gametitle\ntext&#58; My Special Game\n\nlocation&#58; about\ndescription&#58; This special game named &quot;{$gametitle$}&quot; is brought to you by {$ authorname $}[/code:l7ef9brv]\n\nNow that could be done with attributes. Where it gains power is when you use the same conditionals you use for other text.\n\n[code:l7ef9brv]macro&#58; sunset\ndescription&#58; {$ switch (GetValue(&quot;sunset&#46;state&quot;)) $}\n                        {$ case &quot;approaching&quot; $}\n                                The sky outside is bathed in lovely colors as sunset approaches&#46;\n                        {$ end $}\n                        {$ case &quot;set&quot; $}\n                               The sun has set&#46;\n                        {$ end $}\n                    {$ end $}\n\nobject&#58; window\ndescription&#58; The window is grimy and in need of repair&#46; {$ sunset $}[/code:l7ef9brv]\n\nOne disadvantage this has is that you need to bracket everything. If you wanted the various strings to only be printed the first time, you could put a &quot;{$ firsrtime $} marker around the text - but you'd need to close it. Perhaps there's a way around that. But it leaves the text itself more or less alone and allows people to have curly braces, semicolons, and whatever else might in a current text processor markup, as long as it's not {$ or $}. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->\n\nI'm not sure if this seems extreme or makes sense. I like the consistent treatment of text and the incremental addition of scripting without having to switch paradigms. Also, it doesn't have to be things like &quot;end&quot; and the like. I originally had it with actual Javascript (which might be cool to support) and it looked like:\n\n[code:l7ef9brv]{$ switch (GetValue(&quot;sunset&#46;state&quot;)) {\n          case &quot;approaching&quot;&#58; { $}\n                The sky outside is bathed in lovely colors as sunset approaches&#46;\n                        {$ }\n          case &quot;set&quot;&#58; { $}\n                 The sun has set&#46;\n           {$ }\n     } $}[/code:l7ef9brv]\nwhich seemed better in some ways and absolutely awful in others (unless we change the markers to not use curly braces as well).\n\nSome more thoughts. Not sure what you think, but I think the text processor and use of markup in descriptions is one of the best recent additions to Quest, since it eliminates a need for scripting of many small things. Extending it to cover more general purpose scripting needs could make it fantastic and get rid of the need for a separate scripting mode (no offense to Blockly - or perhaps it can all just generate JS code and be used by Blockly anyway. We're talking about simple blocks here anyway)/",
      "EditableFormat": "bbcode",
      "HTML": "I hate when I waffle on so much, going different directions, that the person I'm talking to ends up agreeing to something I've moved on from mentally. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> <br/><br/>I've been thinking a bit more, and I'd like to propose a different approach. I would appreciate your patience. First, the different text/script attributes worked well for my response code because &quot;if&quot;s and things were effected by having multiple responses. We don't really want that here. And having separate text and script attributes has the same separation of things I want to avoid. So let's see how this new idea might work... Keep in mind I haven't worked out all the details. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>I like having it possible to have simple text for descriptions. It's the leap from text to conditionals and things that seems to cause grief. Someone says, &quot;I have this room description, but now I want to have it sometimes say something else, based on something else I did elsewhere in the game.&quot; And it becomes such that even with this proposed format that you need to erase the text from the &quot;text&quot; field and create an &quot;msg&quot; command with that text in the &quot;script&quot; field as a first step. It's rewriting what you have, and it's all so different.<br/><br/>What if we adopt an approach where text is primary and scripting secondary (but still important)? I'm thinking of an approach like what you do with (now, don't laugh or groan) ASP pages, where the scripting is added as markup. But the markup would be Javsascript or macro statements or both.<br/><br/>The initial description could be like this:<br/><br/><pre><code>location&#58; a city street<br/>description&#58; You are on a deserted city street in the dark of night&#46;</code></pre><br/><br/>The game author now wants two descriptions, one for night time and one for day time, determined by an attribute (maybe &quot;city.time&quot;). Then we could have markup like this:<br/><br/><pre><code>location&#58; a city street<br/>description&#58; {$if (GetValue(&quot;city&#46;time&quot;) == &quot;night&quot;) $} <br/>\t\t\tYou are on a deserted city street in the dark of night&#46;<br/>\t\t   {$ else $}<br/>\t\t\tYou are on a busy city street in the dark of night&#46;<br/>\t\t   {$ endif $}<br/></code></pre><br/><br/>There are two things I like about this:<br/>1) You're doing the same thing you did before but extending it. You have the same description field and the same text, but now you've simply added in conditionals and more text.<br/>2) Any string not inside the funny braces is output as is. This allows you not have to put text inside quotes for an msg, worry about how to quote quote characters, etc.<br/><br/>I know this is basically the text processor, or a souped up version of the same. But I think people can deal with markup much more readily than script, and it makes handing some code to someone else trivial. They just copy and paste it where it needs to go, as they would text.<br/><br/>A call to Javascript could simply be:<br/><br/><pre><code>{$ someFunction(); $}</code></pre><br/>Its text value would be nothing, so it would contribute nothing to the output. Or maybe it does have a value that is output. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>And to get to the other thing I had mentioned in my email, we could enable user defined macros as well - with the same text markup usage.<br/><br/><pre><code>macro&#58; authorname<br/>text&#58; Jay Nabonne<br/><br/>macro&#58; gametitle<br/>text&#58; My Special Game<br/><br/>location&#58; about<br/>description&#58; This special game named &quot;{$gametitle$}&quot; is brought to you by {$ authorname $}</code></pre><br/><br/>Now that could be done with attributes. Where it gains power is when you use the same conditionals you use for other text.<br/><br/><pre><code>macro&#58; sunset<br/>description&#58; {$ switch (GetValue(&quot;sunset&#46;state&quot;)) $}<br/>                        {$ case &quot;approaching&quot; $}<br/>                                The sky outside is bathed in lovely colors as sunset approaches&#46;<br/>                        {$ end $}<br/>                        {$ case &quot;set&quot; $}<br/>                               The sun has set&#46;<br/>                        {$ end $}<br/>                    {$ end $}<br/><br/>object&#58; window<br/>description&#58; The window is grimy and in need of repair&#46; {$ sunset $}</code></pre><br/><br/>One disadvantage this has is that you need to bracket everything. If you wanted the various strings to only be printed the first time, you could put a &quot;{$ firsrtime $} marker around the text - but you'd need to close it. Perhaps there's a way around that. But it leaves the text itself more or less alone and allows people to have curly braces, semicolons, and whatever else might in a current text processor markup, as long as it's not {$ or $}. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --><br/><br/>I'm not sure if this seems extreme or makes sense. I like the consistent treatment of text and the incremental addition of scripting without having to switch paradigms. Also, it doesn't have to be things like &quot;end&quot; and the like. I originally had it with actual Javascript (which might be cool to support) and it looked like:<br/><br/><pre><code>{$ switch (GetValue(&quot;sunset&#46;state&quot;)) {<br/>          case &quot;approaching&quot;&#58; { $}<br/>                The sky outside is bathed in lovely colors as sunset approaches&#46;<br/>                        {$ }<br/>          case &quot;set&quot;&#58; { $}<br/>                 The sun has set&#46;<br/>           {$ }<br/>     } $}</code></pre><br/>which seemed better in some ways and absolutely awful in others (unless we change the markers to not use curly braces as well).<br/><br/>Some more thoughts. Not sure what you think, but I think the text processor and use of markup in descriptions is one of the best recent additions to Quest, since it eliminates a need for scripting of many small things. Extending it to cover more general purpose scripting needs could make it fantastic and get rid of the need for a separate scripting mode (no offense to Blockly - or perhaps it can all just generate JS code and be used by Blockly anyway. We're talking about simple blocks here anyway)/",
      "PostDate": "2014-11-29T12:45:13+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32166",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "OK, so this is really just a (much) more sophisticated text processor - which is certainly an idea I can get behind.\n\nWe still need scripting though, to handle things such as freezing the player when they look at Medusa or whatever...\n\nGood point about being able to call JS functions directly from the text processor though - that should be easy to implement.\n\nSo I don't think this changes the approach in the short term - and I think for the initial release of QuestKit we'll have a text processor that is similar to what Quest has now. (Well, it all depends on what kind of pull requests we get I suppose!)",
      "EditableFormat": "bbcode",
      "HTML": "OK, so this is really just a (much) more sophisticated text processor - which is certainly an idea I can get behind.<br/><br/>We still need scripting though, to handle things such as freezing the player when they look at Medusa or whatever...<br/><br/>Good point about being able to call JS functions directly from the text processor though - that should be easy to implement.<br/><br/>So I don't think this changes the approach in the short term - and I think for the initial release of QuestKit we'll have a text processor that is similar to what Quest has now. (Well, it all depends on what kind of pull requests we get I suppose!)",
      "PostDate": "2014-11-29T13:03:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32167",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "What I had in mind is not so much Javascript functions as much as Javascript *code*. That the text plus markup turns into script when compiled, always. The text turns into msg's. The rest passes through as JS (or generates JS). Random example follows. (I'm making this up as I go along, so don't think I mean this to be final form. I'm just trying to get across the idea.)\n\n[code:2ipvx5yy]location&#58; TrickyRoom\nonenter&#58; You enter a dimly lot room with strange markings on the wall&#46;\n{firsttime}\n{$ \n    var markings = getRandomMarkings();\n    SetValue(&quot;TrickyRoom&#46;marking1&quot;, markings&#91;0&#93;);\n    SetValue(&quot;TrickyRoom&#46;marking2&quot;, markings&#91;1&#93;);\n    SetValue(&quot;TrickyRoom&#46;marking3&quot;, markings&#91;2&#93;);\n    SetValue(&quot;TrickyRoom&#46;marking4&quot;, markings&#91;3&#93;);\n$}\n{end}\nThe first is a {TrickyRoom&#46;marking1}&#46; Right beside it is one that looks like {TrickyRoom&#46;marking2}&#46; There are two more, {TrickyRoom&#46;marking3} and {TrickyRoom&#46;marking4}&#46; There is an elevator button on the wall&#46;\n[/code:2ipvx5yy]\n\n[code:2ipvx5yy]command&#58;\npattern&#58; push elevator button\ndescription&#58; \n{$ if (!GetBoolean(&quot;button&#46;pressed&quot;)) $}\n    {$ SetFlag(&quot;button&#46;pressed&quot;) $}\n    You press the button, and it lights up&#46;\n{$ else $}\n    The button has already been pressed&#46;\n{$ end $}\n[/code:2ipvx5yy]\nThe idea is that with something like this, we wouldn't need dedicated scripting, unless people want to write function. It's all just markup. I know it's a world apart from how it's done now with  text-plus-text-processor and separate script blocks that do things, but I think it's interesting to think about anyway.",
      "EditableFormat": "bbcode",
      "HTML": "What I had in mind is not so much Javascript functions as much as Javascript *code*. That the text plus markup turns into script when compiled, always. The text turns into msg's. The rest passes through as JS (or generates JS). Random example follows. (I'm making this up as I go along, so don't think I mean this to be final form. I'm just trying to get across the idea.)<br/><br/><pre><code>location&#58; TrickyRoom<br/>onenter&#58; You enter a dimly lot room with strange markings on the wall&#46;<br/>{firsttime}<br/>{$ <br/>    var markings = getRandomMarkings();<br/>    SetValue(&quot;TrickyRoom&#46;marking1&quot;, markings&#91;0&#93;);<br/>    SetValue(&quot;TrickyRoom&#46;marking2&quot;, markings&#91;1&#93;);<br/>    SetValue(&quot;TrickyRoom&#46;marking3&quot;, markings&#91;2&#93;);<br/>    SetValue(&quot;TrickyRoom&#46;marking4&quot;, markings&#91;3&#93;);<br/>$}<br/>{end}<br/>The first is a {TrickyRoom&#46;marking1}&#46; Right beside it is one that looks like {TrickyRoom&#46;marking2}&#46; There are two more, {TrickyRoom&#46;marking3} and {TrickyRoom&#46;marking4}&#46; There is an elevator button on the wall&#46;<br/></code></pre><br/><br/><pre><code>command&#58;<br/>pattern&#58; push elevator button<br/>description&#58; <br/>{$ if (!GetBoolean(&quot;button&#46;pressed&quot;)) $}<br/>    {$ SetFlag(&quot;button&#46;pressed&quot;) $}<br/>    You press the button, and it lights up&#46;<br/>{$ else $}<br/>    The button has already been pressed&#46;<br/>{$ end $}<br/></code></pre><br/>The idea is that with something like this, we wouldn't need dedicated scripting, unless people want to write function. It's all just markup. I know it's a world apart from how it's done now with  text-plus-text-processor and separate script blocks that do things, but I think it's interesting to think about anyway.",
      "PostDate": "2014-11-29T13:20:41+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32168",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "The generated code for the latter would be:\n\n[code:2p6612ou]if (!GetBoolean(&quot;button&#46;pressed&quot;)) {\n    SetFlag(&quot;button&#46;pressed&quot;);\n    msg(&quot;You press the button, and it lights up&#46;&quot;);\n} else {\n    msg(&quot;The button has already been pressed&#46;&quot;);\n}[/code:2p6612ou]\nI'm talking about merging text and scripting into a single thing.",
      "EditableFormat": "bbcode",
      "HTML": "The generated code for the latter would be:<br/><br/><pre><code>if (!GetBoolean(&quot;button&#46;pressed&quot;)) {<br/>    SetFlag(&quot;button&#46;pressed&quot;);<br/>    msg(&quot;You press the button, and it lights up&#46;&quot;);<br/>} else {<br/>    msg(&quot;The button has already been pressed&#46;&quot;);<br/>}</code></pre><br/>I'm talking about merging text and scripting into a single thing.",
      "PostDate": "2014-11-29T13:25:05+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32169",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Ah right, I understand now. Interesting! I'll have a think...",
      "EditableFormat": "bbcode",
      "HTML": "Ah right, I understand now. Interesting! I'll have a think...",
      "PostDate": "2014-11-29T13:27:19+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32170",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?",
      "EditableFormat": "bbcode",
      "HTML": "One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?",
      "PostDate": "2014-11-29T13:48:38+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32171",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Thinking about it more... I think it's fine not to be able to change the description definition at run-time. It means all the potential descriptions an object might show are defined by its original object definition, which is nice and straightforward.",
      "EditableFormat": "bbcode",
      "HTML": "Thinking about it more... I think it's fine not to be able to change the description definition at run-time. It means all the potential descriptions an object might show are defined by its original object definition, which is nice and straightforward.",
      "PostDate": "2014-11-29T13:55:20+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32172",
      "UserId": 0,
      "Username": "Richard",
      "UserAvatar": null,
      "UserGravatar": "eba577bec819bfbb3a2cecf130cd6df0",
      "EditableText": "Hi Alex and Jay,  I am new to this forum but I have been watching Quest for quite some time. I am excited that you are starting on a new version and would like to add my idea. Instead of using the funny braces I would suggest using the ASP.NET Razor Markup. See the following link: [url:1hizt882]http&#58;//www&#46;w3schools&#46;com/aspnet/razor_intro&#46;asp[/url:1hizt882].\n\nHere is an example:\n[code:1hizt882]\ncommand&#58;\npattern&#58; push elevator button\ndescription&#58; \n@if (!GetBoolean(&quot;button&#46;pressed&quot;))\n    @SetFlag(&quot;button&#46;pressed&quot;)\n    You press the button, and it lights up&#46;\n@else\n    The button has already been pressed&#46;\n@end\n[/code:1hizt882]\n\nI think this will make the code much easier to read and modify.\nLet me know what you think.",
      "EditableFormat": "bbcode",
      "HTML": "Hi Alex and Jay,  I am new to this forum but I have been watching Quest for quite some time. I am excited that you are starting on a new version and would like to add my idea. Instead of using the funny braces I would suggest using the ASP.NET Razor Markup. See the following link: <a href=\"http&#58;//www&#46;w3schools&#46;com/aspnet/razor_intro&#46;asp\" rel=\"nofollow\">http&#58;//www&#46;w3schools&#46;com/aspnet/razor_intro&#46;asp</a>.<br/><br/>Here is an example:<br/><pre><code><br/>command&#58;<br/>pattern&#58; push elevator button<br/>description&#58; <br/>@if (!GetBoolean(&quot;button&#46;pressed&quot;))<br/>    @SetFlag(&quot;button&#46;pressed&quot;)<br/>    You press the button, and it lights up&#46;<br/>@else<br/>    The button has already been pressed&#46;<br/>@end<br/></code></pre><br/><br/>I think this will make the code much easier to read and modify.<br/>Let me know what you think.",
      "PostDate": "2014-11-29T15:12:02+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32173",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote=&quot;Alex&quot;:3oxl7d9t]Thinking about it more... I think it's fine not to be able to change the description definition at run-time. It means all the potential descriptions an object might show are defined by its original object definition, which is nice and straightforward.[/quote:3oxl7d9t]\n\nYou could always have the marked up text reference attributes as well. And then change the attributes dynamically. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Alex wrote:</cite>Thinking about it more... I think it's fine not to be able to change the description definition at run-time. It means all the potential descriptions an object might show are defined by its original object definition, which is nice and straightforward.</blockquote><br/><br/>You could always have the marked up text reference attributes as well. And then change the attributes dynamically. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2014-11-29T15:13:11+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32174",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Richard, it does look cleaner, especially in those examples. If the goal was to have Javascript blocks as well, I wonder how that could be extended where you're not putting an &quot;@&quot; on the front of each line.",
      "EditableFormat": "bbcode",
      "HTML": "Richard, it does look cleaner, especially in those examples. If the goal was to have Javascript blocks as well, I wonder how that could be extended where you're not putting an &quot;@&quot; on the front of each line.",
      "PostDate": "2014-11-29T15:14:15+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32175",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "[quote=&quot;Alex&quot;:5i2i1hiu]One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?[/quote:5i2i1hiu]\n\nÄhhmm,yes. Perhaps this feature is not used but the average Quest-User but I often change descriptions at runtime. I don't want to have a script testing lots of boolean values, I just change the description.\n\nThinking about Jays suggestions: I am a bit confused. So you will have two scripting languages in Quest: Javascript and &quot;Jayscript&quot;? ( <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ) I don't think this would be a good idea. The normal Quest user has problems with asl, now he should know two languages?",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Alex wrote:</cite>One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?</blockquote><br/><br/>Ähhmm,yes. Perhaps this feature is not used but the average Quest-User but I often change descriptions at runtime. I don't want to have a script testing lots of boolean values, I just change the description.<br/><br/>Thinking about Jays suggestions: I am a bit confused. So you will have two scripting languages in Quest: Javascript and &quot;Jayscript&quot;? ( <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ) I don't think this would be a good idea. The normal Quest user has problems with asl, now he should know two languages?",
      "PostDate": "2014-11-29T15:41:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32177",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "One other thing I want to mention: Please choose clear seperarators and identifier. I feel bad if i have to think about &quot;Here you need a space, here you have to use a tab, this must be quoted, move this into the next line.&quot; If you have to write games with text editors, you will get lots of errors without editorsupport.\n\nFor example:\n[quote:2nhz016g]location: forest\ndescription: There are several exits leading away from this\n location: west ans east\n[/quote:2nhz016g]",
      "EditableFormat": "bbcode",
      "HTML": "One other thing I want to mention: Please choose clear seperarators and identifier. I feel bad if i have to think about &quot;Here you need a space, here you have to use a tab, this must be quoted, move this into the next line.&quot; If you have to write games with text editors, you will get lots of errors without editorsupport.<br/><br/>For example:<br/><blockquote><p>location: forest<br/>description: There are several exits leading away from this<br/> location: west ans east<br/></p></blockquote>",
      "PostDate": "2014-11-29T15:51:23+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32179",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Jay makes an excellent point - if you want to be able to change the entire look description, just make the look description print some other attribute. Then you can change that. Simple!\n\nI like Razor syntax. That got me to thinking, why not just use an off-the-shelf JS template engine? That way there's even less code to write!\n\nI think we should try using Underscore's template engine: <!-- m --><a class=\"postlink\" href=\"http://documentcloud.github.io/underscore/#template\">http://documentcloud.github.io/underscore/#template</a><!-- m -->",
      "EditableFormat": "bbcode",
      "HTML": "Jay makes an excellent point - if you want to be able to change the entire look description, just make the look description print some other attribute. Then you can change that. Simple!<br/><br/>I like Razor syntax. That got me to thinking, why not just use an off-the-shelf JS template engine? That way there's even less code to write!<br/><br/>I think we should try using Underscore's template engine: <!-- m --><a class=\"postlink\" href=\"http://documentcloud.github.io/underscore/#template\">http://documentcloud.github.io/underscore/#template</a><!-- m -->",
      "PostDate": "2014-11-29T16:07:18+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32181",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote=&quot;Pertex&quot;:9gbqesrf][quote=&quot;Alex&quot;:9gbqesrf]One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?[/quote:9gbqesrf]\n\nÄhhmm,yes. Perhaps this feature is not used but the average Quest-User but I often change descriptions at runtime. I don't want to have a script testing lots of boolean values, I just change the description.\n[/quote:9gbqesrf]\n\nSince Javascript is flexible about types, it could be that if the description attribute is an script, it runs it. Otherwise, if it's a string, it prints it, etc. I'm more concerned with keeping the top-level source consistent. The code that it compiles to (and the underlying code to execute) could do things behind the scenes to make things &quot;just work&quot;.\n\n[quote=&quot;Pertex&quot;:9gbqesrf]\n\nThinking about Jays suggestions: I am a bit confused. So you will have two scripting languages in Quest: Javascript and &quot;Jayscript&quot;? ( <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ) I don't think this would be a good idea. The normal Quest user has problems with asl, now he should know two languages?[/quote:9gbqesrf]\n\nI think ideally, it would all just be Javascript. But I could see there being some &quot;syntactic sugar&quot; for common cases. The vast majority of the code would be Javascript. It's just things like delimiting blocks that might benefit from being made easier.\n\nI also have to admit that I've been less than rigorous so far about what things look like in the interest of getting the ideas out. I think making it consistent should be a goal.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Pertex wrote:</cite><blockquote><p><b>&quot;Alex&quot;</b></p><p>One thing that occurs to me, if all &quot;look&quot; descriptions were scripts, you wouldn't be able to change it at run-time. I wonder if that would be limiting?</blockquote><br/><br/>Ähhmm,yes. Perhaps this feature is not used but the average Quest-User but I often change descriptions at runtime. I don't want to have a script testing lots of boolean values, I just change the description.<br/></p></blockquote><br/><br/>Since Javascript is flexible about types, it could be that if the description attribute is an script, it runs it. Otherwise, if it's a string, it prints it, etc. I'm more concerned with keeping the top-level source consistent. The code that it compiles to (and the underlying code to execute) could do things behind the scenes to make things &quot;just work&quot;.<br/><br/><blockquote><cite>Pertex wrote:</cite><br/><br/>Thinking about Jays suggestions: I am a bit confused. So you will have two scripting languages in Quest: Javascript and &quot;Jayscript&quot;? ( <!-- s:D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":D\" title=\"Very Happy\" /><!-- s:D --> ) I don't think this would be a good idea. The normal Quest user has problems with asl, now he should know two languages?</blockquote><br/><br/>I think ideally, it would all just be Javascript. But I could see there being some &quot;syntactic sugar&quot; for common cases. The vast majority of the code would be Javascript. It's just things like delimiting blocks that might benefit from being made easier.<br/><br/>I also have to admit that I've been less than rigorous so far about what things look like in the interest of getting the ideas out. I think making it consistent should be a goal.",
      "PostDate": "2014-11-29T16:09:46+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32186",
      "UserId": 0,
      "Username": "george",
      "UserAvatar": null,
      "UserGravatar": "dc6fe8e6172303d85249a13c9a49c1ff",
      "EditableText": "I like how Underscore is flexible about its template delimiters. When you're mixing code and prose I think you want syntax to be as out-of-the-way as can be. \n\nOne thing I don't think should get lost in the weeds here is to what extent this file format is meant to be user-facing, or just the base format that the later QK IDE will use. For the former it should be as clean as possible -- if you look at examples like Twine with its twisted macro system you see a lot of complaints from end users when they're trying to do anything complicated. But for the latter, as long as the format is clean yaml or whatever, then it doesn't have to be as user friendly.",
      "EditableFormat": "bbcode",
      "HTML": "I like how Underscore is flexible about its template delimiters. When you're mixing code and prose I think you want syntax to be as out-of-the-way as can be. <br/><br/>One thing I don't think should get lost in the weeds here is to what extent this file format is meant to be user-facing, or just the base format that the later QK IDE will use. For the former it should be as clean as possible -- if you look at examples like Twine with its twisted macro system you see a lot of complaints from end users when they're trying to do anything complicated. But for the latter, as long as the format is clean yaml or whatever, then it doesn't have to be as user friendly.",
      "PostDate": "2014-11-29T19:01:02+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32191",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "I assume that it will be easier to implement audio/media files into games if it's JS rather than HTML dealing with it?  Also would the files be client side as that would  obviously make more sense too.",
      "EditableFormat": "bbcode",
      "HTML": "I assume that it will be easier to implement audio/media files into games if it's JS rather than HTML dealing with it?  Also would the files be client side as that would  obviously make more sense too.",
      "PostDate": "2014-11-30T13:35:26+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32215",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "I was looking at this page about underscore templates:  <!-- m --><a class=\"postlink\" href=\"http://www.bennadel.com/blog/2411-using-underscore-js-templates-to-render-html-partials.htm\">http://www.bennadel.com/blog/2411-using ... rtials.htm</a><!-- m -->\n\nand it's almost exactly one variant I had in mind (short of syntactical differences). <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Javascript code intertwined in the text.",
      "EditableFormat": "bbcode",
      "HTML": "I was looking at this page about underscore templates:  <!-- m --><a class=\"postlink\" href=\"http://www.bennadel.com/blog/2411-using-underscore-js-templates-to-render-html-partials.htm\">http://www.bennadel.com/blog/2411-using ... rtials.htm</a><!-- m --><br/><br/>and it's almost exactly one variant I had in mind (short of syntactical differences). <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> Javascript code intertwined in the text.",
      "PostDate": "2014-11-30T21:12:29+00:00",
      "LastEditDate": null
    }
  ]
}
