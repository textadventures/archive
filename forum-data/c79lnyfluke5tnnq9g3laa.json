{
  "Topic": {
    "TopicId": "c79lnyfluke5tnnq9g3laa",
    "ForumId": "18",
    "Title": "modified OnEnterRoom",
    "LastUpdated": "2017-10-15T15:32:52.8963283Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "a23bb703-69d8-4441-b930-ee5c56a6ff37",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi!\r\nKind of dreading the response now, sure there'll be someone telling me it's easier to use the built-in one, and suggesting bodges to make it work as I intended. But, I want to share just in case anyone is interested in this.\r\n\r\nI've modified the OnEnterRoom script (called from `game.pov.changedparent`, it runs all the onexit/onenter/ShowRoomDescription/etc scripts). My version is arranged differently, but should do exactly the same things as the core one in most circumstances.\r\n\r\nWhere it's different:\r\n* If `beforeexit`, `onexit`, `beforefirstenter`, or `beforeenter` scripts move the player back to the room they came from, it stops. It doesn't run the `onenter` scripts for that room, which seems rational to me because they never really left.\r\n* If any of those scripts moves the player somewhere else, it continues running the enter-scripts for the new destination (but only runs them once)\r\n* If `description`, `firstenter`, `enter`, or `roomenter` scripts move the player somewhere else, it will abort running the remaining scripts, and continue with the `beforeexit` script for the original destination. Scripts will not be run twice (I thought about having it complete the scripts anyway; but figured that in most cases I wouldn't want it to).\r\n* `ShowRoomDescription` and `game.roomenter` are not run if you do `RemoveObject (player)`. I would assume that any script that removes the active player object is going to put them back before they get a turn, so we can rely on a description being output when they're returned to normal player space.\r\n\r\nThe code is pretty ugly right now, and may be a bit difficult to understand. But… would anyone else find this useful or interesting?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi!<br>\nKind of dreading the response now, sure there'll be someone telling me it's easier to use the built-in one, and suggesting bodges to make it work as I intended. But, I want to share just in case anyone is interested in this.</p>\n<p>I've modified the OnEnterRoom script (called from <code>game.pov.changedparent</code>, it runs all the onexit/onenter/ShowRoomDescription/etc scripts). My version is arranged differently, but should do exactly the same things as the core one in most circumstances.</p>\n<p>Where it's different:</p>\n<ul>\n<li>If <code>beforeexit</code>, <code>onexit</code>, <code>beforefirstenter</code>, or <code>beforeenter</code> scripts move the player back to the room they came from, it stops. It doesn't run the <code>onenter</code> scripts for that room, which seems rational to me because they never really left.</li>\n<li>If any of those scripts moves the player somewhere else, it continues running the enter-scripts for the new destination (but only runs them once)</li>\n<li>If <code>description</code>, <code>firstenter</code>, <code>enter</code>, or <code>roomenter</code> scripts move the player somewhere else, it will abort running the remaining scripts, and continue with the <code>beforeexit</code> script for the original destination. Scripts will not be run twice (I thought about having it complete the scripts anyway; but figured that in most cases I wouldn't want it to).</li>\n<li><code>ShowRoomDescription</code> and <code>game.roomenter</code> are not run if you do <code>RemoveObject (player)</code>. I would assume that any script that removes the active player object is going to put them back before they get a turn, so we can rely on a description being output when they're returned to normal player space.</li>\n</ul>\n<p>The code is pretty ugly right now, and may be a bit difficult to understand. But… would anyone else find this useful or interesting?</p>\n\n",
      "PostDate": "2017-10-15T15:32:52.8963283Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "17fcecbb-8449-4f08-adf2-54ff18cc9582",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I surely would!\r\n\r\n---\r\nWhat happens when you remove the active player?",
      "EditableFormat": "markdown",
      "HTML": "<p>I surely would!</p>\n<hr>\n<p>What happens when you remove the active player?</p>\n\n",
      "PostDate": "2017-10-15T15:57:06.5760711Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "50fe75ce-eb6c-40b9-9c76-c90272603ed5",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That does sound good. We do get people having issues when they try to move the player in an onenter script - which seems quite a reasonable thing to do. Anything to make these things just work would be good.",
      "EditableFormat": "markdown",
      "HTML": "<p>That does sound good. We do get people having issues when they try to move the player in an onenter script - which seems quite a reasonable thing to do. Anything to make these things just work would be good.</p>\n\n",
      "PostDate": "2017-10-15T16:09:26.1383051Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8da9907d-94c0-4043-9dce-35418dd58719",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> What happens when you remove the active player?\r\n\r\nMy experiments with other games suggest that setting the player's parent to `null` (which is what RemoveObject does) sometimes calls exit scripts for the current room and sometimes doesn't, and I hadn't been able to figure out what made the difference; then sometimes generates an error from within OnEnterRoom because it tries to check if game.pov.parent has script attributes without checking if it's null.\r\n\r\nI don't know if `changedparent` is supposed to be called when the value is set to null; but it seems to be inconsistent. So my thought was that the best option is to make an explicit check and do nothing. That way, you could use:\r\n```\r\nRemoveObject (player)\r\nMoveObject (player, roomA)\r\n```\r\nas a quick way to bypass the current room's exit script(s).\r\n\r\nActually, there's a better way to do that. I'm still fiddling with the code since I posted last, and I think I'm going to modify 2 lines so that calling it directly will work.\r\n(So you could do `mod_OnEnterRoom(roomA, roomB)` and it will move the player to roomB, calling all the exit scripts for roomA and the entry scripts for roomB, even if roomA isn't actually the room they were in previously)\r\n\r\nMy original intention was just duplicating the OnEnterRoom script to call my `mod_ShowRoomDescription(room)`, which doesn't add blank lines if an empty section has a line break both before and after, and also allows me to easily add extra sections to the description.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>What happens when you remove the active player?</p>\n</blockquote>\n<p>My experiments with other games suggest that setting the player's parent to <code>null</code> (which is what RemoveObject does) sometimes calls exit scripts for the current room and sometimes doesn't, and I hadn't been able to figure out what made the difference; then sometimes generates an error from within OnEnterRoom because it tries to check if game.pov.parent has script attributes without checking if it's null.</p>\n<p>I don't know if <code>changedparent</code> is supposed to be called when the value is set to null; but it seems to be inconsistent. So my thought was that the best option is to make an explicit check and do nothing. That way, you could use:</p>\n<pre><code>RemoveObject (player)\nMoveObject (player, roomA)\n</code></pre>\n<p>as a quick way to bypass the current room's exit script(s).</p>\n<p>Actually, there's a better way to do that. I'm still fiddling with the code since I posted last, and I think I'm going to modify 2 lines so that calling it directly will work.<br>\n(So you could do <code>mod_OnEnterRoom(roomA, roomB)</code> and it will move the player to roomB, calling all the exit scripts for roomA and the entry scripts for roomB, even if roomA isn't actually the room they were in previously)</p>\n<p>My original intention was just duplicating the OnEnterRoom script to call my <code>mod_ShowRoomDescription(room)</code>, which doesn't add blank lines if an empty section has a line break both before and after, and also allows me to easily add extra sections to the description.</p>\n\n",
      "PostDate": "2017-10-15T18:13:36.1193446Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71c03efc-0456-4fee-b585-ab927e4b9395",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I thought I had a finished version, then started changing things.\r\n\r\nHere's my modified function `mod_OnEnterRoom(oldRoom, newRoom)` as it stands; not fully tested yet, but feedback welcome.\r\n```\r\n// The following line copied from the core version of this function\r\n// I'm assuming this may be set to true in the editor, and is set false here rather than needing to check somehow if this is the first room we're entering\r\ngame.displayroomdescriptiononstart = false\r\n//\r\nif (not HasString(game.pov, \"onenter_state\")) {\r\n  // Not currently entering a room, so we set up state\r\n  game.pov.onenter_state = \"beforeexit\"\r\n  game.pov.onenter_entering = newRoom\r\n  if (not IsDefined(\"oldRoom\")) {\r\n    oldRoom = null\r\n  }\r\n  if (oldRoom = null) {\r\n    game.pov.onenter_leaving = null\r\n  }\r\n  else {\r\n    if (game.clearscreenonroomenter) {\r\n      ClearScreen\r\n      if (not game.currentexitmessage = null) {\r\n        msg (game.currentexitmessage)\r\n        game.currentexitmessage = null\r\n      }\r\n    }\r\n    game.pov.onenter_leaving = oldRoom\r\n  }\r\n}\r\nstate = game.pov.onenter_state\r\nwasstate = state     // So we can check if any of those enter/exit scripts wants to mess around with our progress.\r\n// The following variable is used in exactly one place; but web editor falls over if asked to parse `if((A = B) and (X = Y))` when they've got dots in, and fails to save correctly\r\n//\r\nentering = game.pov.onenter_entering\r\nif ((state = \"finish\") or (not entering = newRoom)) {\r\n  // we've been called by game.pov.changedparent from an onenter/etc script.\r\n  // Just change the variables ready for next time\r\n  // OR\r\n  // The only way we can get here when state is \"finish\" is if this script called `game.pov.parent = newRoom`\r\n  //   so we need to do nothing\r\n  //\r\n  // The frame that called that script will notice the changes after we return\r\n  game.pov.onenter_entering = newRoom\r\n  game.pov.onenter_leaving = oldRoom\r\n}\r\nelse {\r\n  // We've been called by a previous iteration of ourselves\r\n  switch (state) {\r\n    case (\"beforeexit\") {\r\n      if (oldRoom = null) {\r\n        // If oldRoom is null, we skip straight to entering the new room\r\n        state = \"beforefirstenter\"\r\n      }\r\n      else {\r\n        if (HasScript(oldRoom, \"beforeexit\")) {\r\n          do (oldRoom, \"beforeexit\")\r\n        }\r\n        // If 'beforeexit' changes the target room, we never reached the original target room,\r\n        // so just change the target and then proceed with 'onexit'\r\n        // unless it resets us to the original room, in which case stop\r\n        if (game.pov.onenter_entering = oldRoom) {\r\n          state = \"finish\"\r\n        }\r\n        else {\r\n          newRoom = game.pov.onenter_entering\r\n          state = \"onexit\"\r\n        }\r\n      }\r\n    }\r\n    case (\"onexit\") {\r\n      if (HasScript(oldRoom, \"onexit\")) {\r\n        do (oldRoom, \"onexit\")\r\n      }\r\n      // If 'onexit' changes the target room, we never reached the original target room, so just change the target and then proceed with 'onexit'\r\n      // unless it resets us to the original room, in which case stop\r\n      if (game.pov.onenter_entering = oldRoom) {\r\n        state = \"finish\"\r\n      }\r\n      else {\r\n        newRoom = game.pov.onenter_entering\r\n        state = \"beforefirstenter\"\r\n      }\r\n    }\r\n    case (\"beforefirstenter\") {\r\n      if (newRoom = null) {\r\n        // If the player is being moved to 'null', we can only assume a script is doing something weird.\r\n        // In this case, there's no need to check for scripts or even show a description.\r\n        state = \"finish\"\r\n      }\r\n      else {\r\n        if (not GetBoolean(newRoom, \"visited\")) {\r\n          if (HasScript(newRoom, \"beforefirstenter\")) {\r\n            do (newRoom, \"beforefirstenter\")\r\n          }\r\n        }\r\n        // If 'beforefirstenter' changes the target room, we never reached the target room,\r\n        // so run this script for the new target instead\r\n        if (game.pov.onenter_entering = newRoom) {\r\n          state = \"beforeenter\"\r\n        }\r\n        else {\r\n          newRoom = game.pov.onenter_entering\r\n        }\r\n      }\r\n    }\r\n    case (\"beforeenter\") {\r\n      if (HasScript(newRoom, \"beforeenter\")) {\r\n        do (newRoom, \"beforeenter\")\r\n      }\r\n      // If 'beforeenter' changes the target room, we never reached the target room,\r\n      // so go back to 'beforefirstenter' for the new target instead\r\n      if (game.pov.onenter_entering = newRoom) {\r\n        state = \"description\"\r\n      }\r\n      else {\r\n        state = \"beforefirstenter\"\r\n        newRoom = game.pov.onenter_entering\r\n      }\r\n    }\r\n    case (\"description\") {\r\n      // following code copied wholesale from the original OnEnterRoom\r\n      // hope I've not broken it somehow\r\n      if (game.gridmap) {\r\n        Grid_CalculateMapCoordinates (newRoom, game.pov)\r\n        Grid_DrawPlayerInRoom (newRoom)\r\n      }\r\n      if (IsDefined(\"oldRoom\")) {\r\n        if (oldRoom <> null and game.changeroom_newline and not game.command_newline) {\r\n          msg (\"\")\r\n        }\r\n      }\r\n      request (UpdateLocation, CapFirst(GetDisplayName(newRoom)))\r\n      roomFrameExists = false\r\n      if (HasString(newRoom, \"picture\")) {\r\n        if (LengthOf(newRoom.picture) > 0) {\r\n          roomFrameExists = true\r\n          SetFramePicture (newRoom.picture)\r\n        }\r\n      }\r\n      if (game.clearframe and not roomFrameExists) {\r\n        ClearFramePicture\r\n      }\r\n      if (game.showdescriptiononenter) {\r\n        ShowRoomDescription\r\n      }\r\n      // If ShowRoomDescription evicts us from a room (why would you do that‽ WHY?!)\r\n      // then we 'have entered'; so we have to run this room's exit scripts\r\n      if (newRoom = game.pov.onenter_entering) {\r\n        state = \"roomenter\"\r\n      }\r\n      else {\r\n        oldRoom = game.pov.onenter_leaving\r\n        newRoom = game.pov.onenter_entering\r\n        state = \"beforeexit\"\r\n        newRoom.visited = true\r\n      }\r\n    }\r\n    case (\"roomenter\") {\r\n      if (HasScript(game, \"roomenter\")) {\r\n        do (game, \"roomenter\")\r\n      }\r\n      // If any 'enter' script changes the target room, we reached the target room,\r\n      // so go back to the beginning of the process\r\n      if (newRoom = game.pov.onenter_entering) {\r\n        if (GetBoolean(newRoom, \"visited\")) {\r\n          state = \"enter\"\r\n        }\r\n        else {\r\n          state = \"firstenter\"\r\n        }\r\n      }\r\n      else {\r\n        oldRoom = game.pov.onenter_leaving\r\n        newRoom = game.pov.onenter_entering\r\n        state = \"beforeexit\"\r\n      }\r\n      newRoom.visited = true\r\n    }\r\n    case (\"firstenter\") {\r\n      if (HasScript(newRoom, \"firstenter\")) {\r\n        do (newRoom, \"firstenter\")\r\n      }\r\n      // If any 'enter' script changes the target room, we reached the target room,\r\n      // so go back to the beginning of the process\r\n      if (newRoom = game.pov.onenter_entering) {\r\n        state = \"enter\"\r\n      }\r\n      else {\r\n        oldRoom = game.pov.onenter_leaving\r\n        newRoom = game.pov.onenter_entering\r\n        state = \"beforeexit\"\r\n      }\r\n    }\r\n    case (\"enter\") {\r\n      if (HasScript(newRoom, \"enter\")) {\r\n        do (newRoom, \"enter\")\r\n      }\r\n      // If any 'enter' script changes the target room, we reached the target room,\r\n      // so go back to the beginning of the process\r\n      if (newRoom = game.pov.onenter_entering) {\r\n        state = \"finish\"\r\n      }\r\n      else {\r\n        oldRoom = game.pov.onenter_leaving\r\n        newRoom = game.pov.onenter_entering\r\n        state = \"beforeexit\"\r\n      }\r\n    }\r\n    default {\r\n      msg (\"{b:ERROR!} Unexpected state in mod_OnEnterRoom:\"+state)\r\n      state = \"finish\"\r\n    }\r\n  }\r\n  if (not wasstate = game.pov.onenter_state) {\r\n    // If an enter/exit script manually changes `game.pov.onenter_state`, we let\r\n    //   it do whatever it wants with the next step, overriding the logic above.\r\n    state = game.pov.onenter_state\r\n    oldRoom = game.pov.onenter_leaving\r\n    newRoom = game.pov.onenter_entering\r\n  }\r\n  if (state = \"finish\") {\r\n    // Finished!\r\n    game.pov.parent = newRoom\r\n    game.pov.onenter_state = null\r\n    game.pov.onenter_entering = null\r\n    game.pov.onenter_leaving = null\r\n    if (game.gridmap) {\r\n      MergePOVCoordinates\r\n    }\r\n  }\r\n  else {\r\n    // I know tail recursion is inefficient, but it seems better than many, many nested 'on ready's\r\n    on ready {\r\n      game.pov.onenter_state = state\r\n      mod_OnEnterRoom (oldRoom, newRoom)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd the `player.changedparent` script to call it:\r\n```\r\n  if (game.pov = this) {\r\n    if (IsDefined(\"oldvalue\")) {\r\n      mod_OnEnterRoom (oldvalue, this.parent)\r\n    }\r\n    else {\r\n      mod_OnEnterRoom (null, this.parent)\r\n    }\r\n  }\r\n  this.hasbeenmoved = true\r\n```\r\n\r\nEditing in progress; so there may be oddities and bits in there that are no longer relevant. But hopefully you can see what I was aiming for.",
      "EditableFormat": "markdown",
      "HTML": "<p>I thought I had a finished version, then started changing things.</p>\n<p>Here's my modified function <code>mod_OnEnterRoom(oldRoom, newRoom)</code> as it stands; not fully tested yet, but feedback welcome.</p>\n<pre><code>// The following line copied from the core version of this function\n// I'm assuming this may be set to true in the editor, and is set false here rather than needing to check somehow if this is the first room we're entering\ngame.displayroomdescriptiononstart = false\n//\nif (not HasString(game.pov, \"onenter_state\")) {\n  // Not currently entering a room, so we set up state\n  game.pov.onenter_state = \"beforeexit\"\n  game.pov.onenter_entering = newRoom\n  if (not IsDefined(\"oldRoom\")) {\n    oldRoom = null\n  }\n  if (oldRoom = null) {\n    game.pov.onenter_leaving = null\n  }\n  else {\n    if (game.clearscreenonroomenter) {\n      ClearScreen\n      if (not game.currentexitmessage = null) {\n        msg (game.currentexitmessage)\n        game.currentexitmessage = null\n      }\n    }\n    game.pov.onenter_leaving = oldRoom\n  }\n}\nstate = game.pov.onenter_state\nwasstate = state     // So we can check if any of those enter/exit scripts wants to mess around with our progress.\n// The following variable is used in exactly one place; but web editor falls over if asked to parse `if((A = B) and (X = Y))` when they've got dots in, and fails to save correctly\n//\nentering = game.pov.onenter_entering\nif ((state = \"finish\") or (not entering = newRoom)) {\n  // we've been called by game.pov.changedparent from an onenter/etc script.\n  // Just change the variables ready for next time\n  // OR\n  // The only way we can get here when state is \"finish\" is if this script called `game.pov.parent = newRoom`\n  //   so we need to do nothing\n  //\n  // The frame that called that script will notice the changes after we return\n  game.pov.onenter_entering = newRoom\n  game.pov.onenter_leaving = oldRoom\n}\nelse {\n  // We've been called by a previous iteration of ourselves\n  switch (state) {\n    case (\"beforeexit\") {\n      if (oldRoom = null) {\n        // If oldRoom is null, we skip straight to entering the new room\n        state = \"beforefirstenter\"\n      }\n      else {\n        if (HasScript(oldRoom, \"beforeexit\")) {\n          do (oldRoom, \"beforeexit\")\n        }\n        // If 'beforeexit' changes the target room, we never reached the original target room,\n        // so just change the target and then proceed with 'onexit'\n        // unless it resets us to the original room, in which case stop\n        if (game.pov.onenter_entering = oldRoom) {\n          state = \"finish\"\n        }\n        else {\n          newRoom = game.pov.onenter_entering\n          state = \"onexit\"\n        }\n      }\n    }\n    case (\"onexit\") {\n      if (HasScript(oldRoom, \"onexit\")) {\n        do (oldRoom, \"onexit\")\n      }\n      // If 'onexit' changes the target room, we never reached the original target room, so just change the target and then proceed with 'onexit'\n      // unless it resets us to the original room, in which case stop\n      if (game.pov.onenter_entering = oldRoom) {\n        state = \"finish\"\n      }\n      else {\n        newRoom = game.pov.onenter_entering\n        state = \"beforefirstenter\"\n      }\n    }\n    case (\"beforefirstenter\") {\n      if (newRoom = null) {\n        // If the player is being moved to 'null', we can only assume a script is doing something weird.\n        // In this case, there's no need to check for scripts or even show a description.\n        state = \"finish\"\n      }\n      else {\n        if (not GetBoolean(newRoom, \"visited\")) {\n          if (HasScript(newRoom, \"beforefirstenter\")) {\n            do (newRoom, \"beforefirstenter\")\n          }\n        }\n        // If 'beforefirstenter' changes the target room, we never reached the target room,\n        // so run this script for the new target instead\n        if (game.pov.onenter_entering = newRoom) {\n          state = \"beforeenter\"\n        }\n        else {\n          newRoom = game.pov.onenter_entering\n        }\n      }\n    }\n    case (\"beforeenter\") {\n      if (HasScript(newRoom, \"beforeenter\")) {\n        do (newRoom, \"beforeenter\")\n      }\n      // If 'beforeenter' changes the target room, we never reached the target room,\n      // so go back to 'beforefirstenter' for the new target instead\n      if (game.pov.onenter_entering = newRoom) {\n        state = \"description\"\n      }\n      else {\n        state = \"beforefirstenter\"\n        newRoom = game.pov.onenter_entering\n      }\n    }\n    case (\"description\") {\n      // following code copied wholesale from the original OnEnterRoom\n      // hope I've not broken it somehow\n      if (game.gridmap) {\n        Grid_CalculateMapCoordinates (newRoom, game.pov)\n        Grid_DrawPlayerInRoom (newRoom)\n      }\n      if (IsDefined(\"oldRoom\")) {\n        if (oldRoom &lt;&gt; null and game.changeroom_newline and not game.command_newline) {\n          msg (\"\")\n        }\n      }\n      request (UpdateLocation, CapFirst(GetDisplayName(newRoom)))\n      roomFrameExists = false\n      if (HasString(newRoom, \"picture\")) {\n        if (LengthOf(newRoom.picture) &gt; 0) {\n          roomFrameExists = true\n          SetFramePicture (newRoom.picture)\n        }\n      }\n      if (game.clearframe and not roomFrameExists) {\n        ClearFramePicture\n      }\n      if (game.showdescriptiononenter) {\n        ShowRoomDescription\n      }\n      // If ShowRoomDescription evicts us from a room (why would you do that‽ WHY?!)\n      // then we 'have entered'; so we have to run this room's exit scripts\n      if (newRoom = game.pov.onenter_entering) {\n        state = \"roomenter\"\n      }\n      else {\n        oldRoom = game.pov.onenter_leaving\n        newRoom = game.pov.onenter_entering\n        state = \"beforeexit\"\n        newRoom.visited = true\n      }\n    }\n    case (\"roomenter\") {\n      if (HasScript(game, \"roomenter\")) {\n        do (game, \"roomenter\")\n      }\n      // If any 'enter' script changes the target room, we reached the target room,\n      // so go back to the beginning of the process\n      if (newRoom = game.pov.onenter_entering) {\n        if (GetBoolean(newRoom, \"visited\")) {\n          state = \"enter\"\n        }\n        else {\n          state = \"firstenter\"\n        }\n      }\n      else {\n        oldRoom = game.pov.onenter_leaving\n        newRoom = game.pov.onenter_entering\n        state = \"beforeexit\"\n      }\n      newRoom.visited = true\n    }\n    case (\"firstenter\") {\n      if (HasScript(newRoom, \"firstenter\")) {\n        do (newRoom, \"firstenter\")\n      }\n      // If any 'enter' script changes the target room, we reached the target room,\n      // so go back to the beginning of the process\n      if (newRoom = game.pov.onenter_entering) {\n        state = \"enter\"\n      }\n      else {\n        oldRoom = game.pov.onenter_leaving\n        newRoom = game.pov.onenter_entering\n        state = \"beforeexit\"\n      }\n    }\n    case (\"enter\") {\n      if (HasScript(newRoom, \"enter\")) {\n        do (newRoom, \"enter\")\n      }\n      // If any 'enter' script changes the target room, we reached the target room,\n      // so go back to the beginning of the process\n      if (newRoom = game.pov.onenter_entering) {\n        state = \"finish\"\n      }\n      else {\n        oldRoom = game.pov.onenter_leaving\n        newRoom = game.pov.onenter_entering\n        state = \"beforeexit\"\n      }\n    }\n    default {\n      msg (\"{b:ERROR!} Unexpected state in mod_OnEnterRoom:\"+state)\n      state = \"finish\"\n    }\n  }\n  if (not wasstate = game.pov.onenter_state) {\n    // If an enter/exit script manually changes `game.pov.onenter_state`, we let\n    //   it do whatever it wants with the next step, overriding the logic above.\n    state = game.pov.onenter_state\n    oldRoom = game.pov.onenter_leaving\n    newRoom = game.pov.onenter_entering\n  }\n  if (state = \"finish\") {\n    // Finished!\n    game.pov.parent = newRoom\n    game.pov.onenter_state = null\n    game.pov.onenter_entering = null\n    game.pov.onenter_leaving = null\n    if (game.gridmap) {\n      MergePOVCoordinates\n    }\n  }\n  else {\n    // I know tail recursion is inefficient, but it seems better than many, many nested 'on ready's\n    on ready {\n      game.pov.onenter_state = state\n      mod_OnEnterRoom (oldRoom, newRoom)\n    }\n  }\n}\n</code></pre>\n<p>And the <code>player.changedparent</code> script to call it:</p>\n<pre><code>  if (game.pov = this) {\n    if (IsDefined(\"oldvalue\")) {\n      mod_OnEnterRoom (oldvalue, this.parent)\n    }\n    else {\n      mod_OnEnterRoom (null, this.parent)\n    }\n  }\n  this.hasbeenmoved = true\n</code></pre>\n<p>Editing in progress; so there may be oddities and bits in there that are no longer relevant. But hopefully you can see what I was aiming for.</p>\n\n",
      "PostDate": "2017-10-15T19:02:18.0483185Z",
      "LastEditDate": "2017-10-15T19:41:17.8209912Z",
      "link": null
    },
    {
      "PostId": "c31dcd60-84c3-4280-801a-2738da3b6a90",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you'd rather see it in action, here's a test game with these functions.\r\n\r\nhttp://textadventures.co.uk/games/view/luz7uwwsuuqfmk-pmtnx8w/disposable-game\r\n\r\nWould love to see if other people can find any bugs I'm not  working on yet.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you'd rather see it in action, here's a test game with these functions.</p>\n<p>http://textadventures.co.uk/games/view/luz7uwwsuuqfmk-pmtnx8w/disposable-game</p>\n<p>Would love to see if other people can find any bugs I'm not  working on yet.</p>\n\n",
      "PostDate": "2017-10-16T15:39:55.7231459Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3ee614b8-ec71-4f97-9b60-a6433b41e0b6",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Very, very nice!\r\n\r\n---\r\nThis is the only thing I noticed (I assume this is precisely the sort of thing you're looking for. ):\r\n\r\n<samp>\r\n\r\nYou can see two [fishs](#this-may-be-quest \"This may just be because of Quest, but I assume this is precisely the sort of thing you're looking out for.  Should be 'fishes', of course.\") and a [stone](#no-problem-here \"No problem here!\").\r\n\r\n</samp>",
      "EditableFormat": "markdown",
      "HTML": "<p>Very, very nice!</p>\n<hr>\n<p>This is the only thing I noticed (I assume this is precisely the sort of thing you're looking for. ):</p>\n<samp>\n<p>You can see two <a href=\"#this-may-be-quest\" title=\"This may just be because of Quest, but I assume this is precisely the sort of thing you're looking out for.  Should be 'fishes', of course.\">fishs</a> and a <a href=\"#no-problem-here\" title=\"No problem here!\">stone</a>.</p>\n</samp>\n\n",
      "PostDate": "2017-10-16T19:34:53.2917351Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ef8171e6-d3bb-4e40-ae79-33646754e7bb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, I saw that but I can't figure out…\r\n\r\nUgh. The \"beforefirstenter\" script for the first room is getting run before the initialisation scripts for the objects in other rooms.\r\nI realised that the stock `ShowRoomDescription` would get run once on startup, so I disabled room description on startup and set the player object to run mod_OnRoomEnter at the end of it's initialisation.\r\n\r\nWhich means that the \"onenter\" script for the start room runs, and clones any fish in the starting room *before* the initialisation script that sets their `pluralalias` attributes.\r\n\r\nSo how do I fix that?\r\n\r\n\r\nEdit: I'm an idiot.\r\nTo fix that, I move the player object to the very end of the object list, and put `mod_OnRoomEnter(null, startroom)` in its initialisation script. Putting it at the end of the list ensures that it's the last initialise script to run.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, I saw that but I can't figure out…</p>\n<p>Ugh. The \"beforefirstenter\" script for the first room is getting run before the initialisation scripts for the objects in other rooms.<br>\nI realised that the stock <code>ShowRoomDescription</code> would get run once on startup, so I disabled room description on startup and set the player object to run mod_OnRoomEnter at the end of it's initialisation.</p>\n<p>Which means that the \"onenter\" script for the start room runs, and clones any fish in the starting room <em>before</em> the initialisation script that sets their <code>pluralalias</code> attributes.</p>\n<p>So how do I fix that?</p>\n<p>Edit: I'm an idiot.<br>\nTo fix that, I move the player object to the very end of the object list, and put <code>mod_OnRoomEnter(null, startroom)</code> in its initialisation script. Putting it at the end of the list ensures that it's the last initialise script to run.</p>\n\n",
      "PostDate": "2017-10-16T20:06:26.8018397Z",
      "LastEditDate": "2017-10-16T20:21:03.1438189Z",
      "link": null
    },
    {
      "PostId": "cbc9fa58-41c9-4c53-a9f7-1f22c45e6a53",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "http://i.imgur.com/FOIjtApb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">I'm an idiot.\r\n\r\nI don't think it counts as idiocy when you catch your own mistake.  (Ha!  I hope that's true, anyway!  Or I'm screwed!)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I'm an idiot.</p>\n</blockquote>\n<p>I don't think it counts as idiocy when you catch your own mistake.  (Ha!  I hope that's true, anyway!  Or I'm screwed!)</p>\n\n",
      "PostDate": "2017-10-17T02:30:32.4751598Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
