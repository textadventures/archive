{
  "Topic": {
    "TopicId": "fgtymb1bv0irljmmf4r2bg",
    "ForumId": "10",
    "Title": "Water, water, everywhere, And all the brains did shrink...",
    "LastUpdated": "2017-03-26T13:32:41.6848437Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7d6c1f1a-2f1a-4738-ba19-e6769ba5b7ca",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, I cannot quite wrap my head around this.\r\n\r\nI have 10 rooms (about 25%) in the first third of my game that are adjacent to or are a \"lake room\".\r\n\r\nAt some point, the player needs to 'get water' in their cup.\r\n\r\nI want the player to be able to get any lake water.  I plan on adding water as scenery to each of the 10 rooms and swapping out a full cup (in storage) with the empty cup in inventory.  No problemo.\r\n\r\nProblemo:  There is a fisherman in one of my lake rooms who has a bucket of stagnant water.  Also, once the player successfully has water, the cup in the inventory fills with water.  There will be potentially three 'water' objects in one room and two in most.  Once the player successfully \"uses\" the water, the cup will empty, but can be refilled for later use.  And, I considered using some other clever name for the water, but... that just won't work.\r\n\r\nIf a player types 'x water' or 'drink water' I will get the dreaded \"Which water do you mean?\" response.  Is there any way to avoid this in these situations?  Or, do I just need to suck it up in those rooms and force the player to answer the built-in response?",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, I cannot quite wrap my head around this.</p>\n<p>I have 10 rooms (about 25%) in the first third of my game that are adjacent to or are a \"lake room\".</p>\n<p>At some point, the player needs to 'get water' in their cup.</p>\n<p>I want the player to be able to get any lake water.  I plan on adding water as scenery to each of the 10 rooms and swapping out a full cup (in storage) with the empty cup in inventory.  No problemo.</p>\n<p>Problemo:  There is a fisherman in one of my lake rooms who has a bucket of stagnant water.  Also, once the player successfully has water, the cup in the inventory fills with water.  There will be potentially three 'water' objects in one room and two in most.  Once the player successfully \"uses\" the water, the cup will empty, but can be refilled for later use.  And, I considered using some other clever name for the water, but... that just won't work.</p>\n<p>If a player types 'x water' or 'drink water' I will get the dreaded \"Which water do you mean?\" response.  Is there any way to avoid this in these situations?  Or, do I just need to suck it up in those rooms and force the player to answer the built-in response?</p>\n\n",
      "PostDate": "2017-03-26T13:32:41.6848437Z",
      "LastEditDate": null
    },
    {
      "PostId": "0e36b964-a19c-4c7f-87e0-2877c98e01cc",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think the easiest fix would be to do this:\r\n\r\n1. don't use/allow the water Object's actual names to be used by the person playing the game/inputting-for-the-\r\nCommand (keep them hidden and unknown, so they don't get used in the Command, as otherwise, I think it's impossible for quest to know clairovoyantly which 'water' the person meant, thankfully computers aren't able to be clairovoyant, just as humans aren't able to be, lol): aka do NOT use the '#object#' Argument/Parameter VARIABLE for the Command's 'pattern' box\r\n2. use/allow the water Object's 'alias' to be used by the person playing the game/inputting-for-the-Command: aka using the '#text#' Argument/Parameter VARIABLE for the Command's 'pattern' box\r\n3. the trick then is in the Command's scripting, as you got to handle the 'alias', determining what water Object they meant by the alias.\r\n\r\nhere's an example:\r\n\r\n```\r\n<command name=\"drink_water_command\">\r\n  <pattern>drink #text#</pattern>\r\n  <script>\r\n    if (text = \"water\") { // or: if (not Instr (text, \"water\") = 0) { // or: if (not InstrRev (text, \"water\") = 0) {\r\n      terminator_boolean_variable = false\r\n      foreach (object_variable, AllObjects ()) {\r\n        while (not terminator_boolean_variable) {\r\n          if (object_variable.alias = text) {\r\n            // code for what water you're after/needing for your design for your various water objects: if (...object_variable...) { /* scripting */ }\r\n            /*\r\n            // for example:\r\n\r\n            if (Got (object_variable)) {\r\n              terminator_boolean_variable = true\r\n              if (object_variable.name = \"stagnant_water_object\") {\r\n                msg (\"You drink the water... but it's stagnant, fully of parsites, and you die a 1-3 week long slow agonizing death.\")\r\n                msg (\"GAME OVER\")\r\n                // this is probably not needed (due to the 'finish' below), but oh well: terminator_boolean_variable = true\r\n                finish\r\n              } else {\r\n                msg (\"You drink the fresh cool water. Never has water tasted so good!\")\r\n              }\r\n            }\r\n            */\r\n          }\r\n        }\r\n      }\r\n    }\r\n  </script>\r\n</commamnd>\r\n```\r\n\r\n----------\r\n\r\nalternatively... you could jsut do:\r\n\r\nno '#text/object#' Argument/Parameter VARIABLE in the Command's 'pattern' box: drink water\r\n\r\nwhich, would simplify the scripting for it a bit... for example:\r\n\r\n```\r\n<command name=\"drink_water_command\">\r\n  <pattern>drink water</pattern>\r\n  <script>\r\n    foreach (object_variable, ScopeInventory ()) {\r\n      terminator_boolean_variable = false\r\n      while (not terminator_boolean-variable) {\r\n        if (object_variable.alias = \"water\") {\r\n          terminator_boolean_variable = true\r\n          if (object_variable.name = \"stagnant_water_object\") {\r\n            // blah scripting\r\n          } else {\r\n            blah scripting\r\n          }\r\n      }\r\n    }\r\n  </script>\r\n</command>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I think the easiest fix would be to do this:</p>\n<ol>\n<li>don't use/allow the water Object's actual names to be used by the person playing the game/inputting-for-the-<br>\nCommand (keep them hidden and unknown, so they don't get used in the Command, as otherwise, I think it's impossible for quest to know clairovoyantly which 'water' the person meant, thankfully computers aren't able to be clairovoyant, just as humans aren't able to be, lol): aka do NOT use the '#object#' Argument/Parameter VARIABLE for the Command's 'pattern' box</li>\n<li>use/allow the water Object's 'alias' to be used by the person playing the game/inputting-for-the-Command: aka using the '#text#' Argument/Parameter VARIABLE for the Command's 'pattern' box</li>\n<li>the trick then is in the Command's scripting, as you got to handle the 'alias', determining what water Object they meant by the alias.</li>\n</ol>\n<p>here's an example:</p>\n<pre><code>&lt;command name=\"drink_water_command\"&gt;\n  &lt;pattern&gt;drink #text#&lt;/pattern&gt;\n  &lt;script&gt;\n    if (text = \"water\") { // or: if (not Instr (text, \"water\") = 0) { // or: if (not InstrRev (text, \"water\") = 0) {\n      terminator_boolean_variable = false\n      foreach (object_variable, AllObjects ()) {\n        while (not terminator_boolean_variable) {\n          if (object_variable.alias = text) {\n            // code for what water you're after/needing for your design for your various water objects: if (...object_variable...) { /* scripting */ }\n            /*\n            // for example:\n\n            if (Got (object_variable)) {\n              terminator_boolean_variable = true\n              if (object_variable.name = \"stagnant_water_object\") {\n                msg (\"You drink the water... but it's stagnant, fully of parsites, and you die a 1-3 week long slow agonizing death.\")\n                msg (\"GAME OVER\")\n                // this is probably not needed (due to the 'finish' below), but oh well: terminator_boolean_variable = true\n                finish\n              } else {\n                msg (\"You drink the fresh cool water. Never has water tasted so good!\")\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n  &lt;/script&gt;\n&lt;/commamnd&gt;\n</code></pre>\n<hr>\n<p>alternatively... you could jsut do:</p>\n<p>no '#text/object#' Argument/Parameter VARIABLE in the Command's 'pattern' box: drink water</p>\n<p>which, would simplify the scripting for it a bit... for example:</p>\n<pre><code>&lt;command name=\"drink_water_command\"&gt;\n  &lt;pattern&gt;drink water&lt;/pattern&gt;\n  &lt;script&gt;\n    foreach (object_variable, ScopeInventory ()) {\n      terminator_boolean_variable = false\n      while (not terminator_boolean-variable) {\n        if (object_variable.alias = \"water\") {\n          terminator_boolean_variable = true\n          if (object_variable.name = \"stagnant_water_object\") {\n            // blah scripting\n          } else {\n            blah scripting\n          }\n      }\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n</code></pre>\n\n",
      "PostDate": "2017-03-26T14:29:17.0193659Z",
      "LastEditDate": "2017-03-26T14:31:09.8100324Z"
    }
  ]
}
