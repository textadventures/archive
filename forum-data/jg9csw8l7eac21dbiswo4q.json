{
  "Topic": {
    "TopicId": "jg9csw8l7eac21dbiswo4q",
    "ForumId": "20",
    "Title": "Compiling gamebooks",
    "LastUpdated": "2020-04-07T16:42:40.6834605Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4a86a12d-139d-4b4c-a7a8-306fd5f1861a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi folks!\r\n\r\nI've had this story sitting on my hard disk for years now, and never got around to doing the code for it. I'm pretty sure the code will be a PITA to work with; so I wondered if I could run the algorithm past a few pairs of eyes first; so I'm not throwing a whole lot of time into something with flaws that I've overlooked.\r\n\r\nI've got a file format I've been using with the intention of writing the code to go with it later. It would be designed to output a Kindle book, with all the options being internal links.\r\nIn ePub, I can include javascript code to handle flags and simple variables. (variables would be strictly bounded; for example I have one var where there's a check [[if dd>3]] a check elsewhere [[if dd<5]]. As the variable is only ever incremented, its only valid values are 0, 1, 2, 3, 4, and 5+)\r\n\r\nIn the Kindle file format, there's no way of scripting. So I was thinking I could duplicate the pages. Foe example, if I have a variable that goes 0 to 3, and two flags, the script would create a set of \"alternates\":\r\n\r\n* Page1-true-true-0\r\n* Page1-true-true-1\r\n* Page1-true-true-2\r\n* Page1-true-true-3+\r\n* Page1-true-false-0\r\n* Page1-true-false-1\r\n* Page1-true-false-2\r\n* Page1-true-false-3+\r\n* Page1-false-true-0\r\n* Page1-false-true-1\r\n* Page1-false-true-2\r\n* Page1-false-true-3+\r\n* Page1-false-false-0\r\n* Page1-false-false-1\r\n* Page1-false-false-2\r\n* Page1-false-false-3+\r\n\r\nThat basically creates 16 copies of every page in the book. If I use something like `[[random red|green|blue]]` in a page, each of these copies would get one allocated at random.\r\nSo a page which increases a variable or sets a flag wouldn't need to set a variable - if Page3 increments the variable, then `Page3-false-false-0` would have a link that points to `Page4-false-false-1`; and similar for the flags.\r\n\r\nAfter creating all these pages, I can go through removing them again. Pseudocode:\r\n```\r\nnumpages = 0\r\nwhile (numpages <> total number of variants) {\r\n  numpages = total number of variants\r\n  for each page {\r\n    for each variant {\r\n      If no pages link here:\r\n        remove this variant\r\n    }\r\n  }\r\n}\r\nnumpages = 0\r\nwhile (numpages <> total number of variants) {\r\n  numpages = total number of variants\r\n  for each page {\r\n    for each possible combination of the values for vars used in [[if]] blocks on this page {\r\n      outputpages = new array\r\n      for each variant {\r\n        make a list of the output pages that it links to (a string like \"Page3-false-false-0/Page4-false-false-0\")\r\n        if this string is in the \"outputpages\" list:\r\n          remove this variant\r\n          Loop over all pages that link to this variant:\r\n            change them to point to the previous one that had the same outputs\r\n        otherwise:\r\n          add the string to the \"outputpages\" list\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThe first loop removes pages like `Page1-true-true-1` - because you can't have those flags set before reaching the first page. If it's removed any pages, it needs to run again to remove the pages that they link to. This should cut out a lot of the different pages.\r\n\r\nThe second loop: The \"output pages\" for any \"The End\" page will be the same: a \"Try again\" link back to `Page1-false-false-0`.\r\nSo that means that if Page23 is a game over, all links to Page23 will be changed to point to `Page23-false-false-0` regardless of the previous value of the flags; because those pages are equivalent.\r\n\r\nIf Page17 sends the player a different direction based on the value of the first flag, but neither it nor any of the pages after it look at the second flag, then it will end up silently clearing the second flag; we don't need that data. \r\n\r\n**Does that algorithm look sane to you?**\r\n\r\n(I'm also writing a script to convert my files into a Quest gamebook for online play; but I think it would be really nice to output my gamebook as a static text that can be used as a Kindle book, or even a print CYOA. Would that be cool?)",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi folks!</p>\n<p>I've had this story sitting on my hard disk for years now, and never got around to doing the code for it. I'm pretty sure the code will be a PITA to work with; so I wondered if I could run the algorithm past a few pairs of eyes first; so I'm not throwing a whole lot of time into something with flaws that I've overlooked.</p>\n<p>I've got a file format I've been using with the intention of writing the code to go with it later. It would be designed to output a Kindle book, with all the options being internal links.<br>\nIn ePub, I can include javascript code to handle flags and simple variables. (variables would be strictly bounded; for example I have one var where there's a check [[if dd&gt;3]] a check elsewhere [[if dd&lt;5]]. As the variable is only ever incremented, its only valid values are 0, 1, 2, 3, 4, and 5+)</p>\n<p>In the Kindle file format, there's no way of scripting. So I was thinking I could duplicate the pages. Foe example, if I have a variable that goes 0 to 3, and two flags, the script would create a set of \"alternates\":</p>\n<ul>\n<li>Page1-true-true-0</li>\n<li>Page1-true-true-1</li>\n<li>Page1-true-true-2</li>\n<li>Page1-true-true-3+</li>\n<li>Page1-true-false-0</li>\n<li>Page1-true-false-1</li>\n<li>Page1-true-false-2</li>\n<li>Page1-true-false-3+</li>\n<li>Page1-false-true-0</li>\n<li>Page1-false-true-1</li>\n<li>Page1-false-true-2</li>\n<li>Page1-false-true-3+</li>\n<li>Page1-false-false-0</li>\n<li>Page1-false-false-1</li>\n<li>Page1-false-false-2</li>\n<li>Page1-false-false-3+</li>\n</ul>\n<p>That basically creates 16 copies of every page in the book. If I use something like <code>[[random red|green|blue]]</code> in a page, each of these copies would get one allocated at random.<br>\nSo a page which increases a variable or sets a flag wouldn't need to set a variable - if Page3 increments the variable, then <code>Page3-false-false-0</code> would have a link that points to <code>Page4-false-false-1</code>; and similar for the flags.</p>\n<p>After creating all these pages, I can go through removing them again. Pseudocode:</p>\n<pre><code>numpages = 0\nwhile (numpages &lt;&gt; total number of variants) {\n  numpages = total number of variants\n  for each page {\n    for each variant {\n      If no pages link here:\n        remove this variant\n    }\n  }\n}\nnumpages = 0\nwhile (numpages &lt;&gt; total number of variants) {\n  numpages = total number of variants\n  for each page {\n    for each possible combination of the values for vars used in [[if]] blocks on this page {\n      outputpages = new array\n      for each variant {\n        make a list of the output pages that it links to (a string like \"Page3-false-false-0/Page4-false-false-0\")\n        if this string is in the \"outputpages\" list:\n          remove this variant\n          Loop over all pages that link to this variant:\n            change them to point to the previous one that had the same outputs\n        otherwise:\n          add the string to the \"outputpages\" list\n      }\n    }\n  }\n}\n</code></pre>\n<p>The first loop removes pages like <code>Page1-true-true-1</code> - because you can't have those flags set before reaching the first page. If it's removed any pages, it needs to run again to remove the pages that they link to. This should cut out a lot of the different pages.</p>\n<p>The second loop: The \"output pages\" for any \"The End\" page will be the same: a \"Try again\" link back to <code>Page1-false-false-0</code>.<br>\nSo that means that if Page23 is a game over, all links to Page23 will be changed to point to <code>Page23-false-false-0</code> regardless of the previous value of the flags; because those pages are equivalent.</p>\n<p>If Page17 sends the player a different direction based on the value of the first flag, but neither it nor any of the pages after it look at the second flag, then it will end up silently clearing the second flag; we don't need that data.</p>\n<p><strong>Does that algorithm look sane to you?</strong></p>\n<p>(I'm also writing a script to convert my files into a Quest gamebook for online play; but I think it would be really nice to output my gamebook as a static text that can be used as a Kindle book, or even a print CYOA. Would that be cool?)</p>\n\n",
      "PostDate": "2020-04-07T16:42:40.6834605Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
