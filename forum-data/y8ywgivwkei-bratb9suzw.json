{
  "Topic": {
    "TopicId": "y8ywgivwkei-bratb9suzw",
    "ForumId": "10",
    "Title": "NPC factions?",
    "LastUpdated": "2018-07-11T04:35:38.2671049Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f8c55f42-1e68-46b3-a812-00e506ab5ade",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry if this has been asked before - a quick search didn't turn it up. Like my name says, scripting isn't my strong point though I'm slowly getting the hang of it (and shamelessly exploiting pix's libraries) for a lot of basic fundamentals and I can do most of what I need as is.\r\n\r\nThe current exception is a tricky one, though. I want to have NPCs dynamically fight each other, based on factional allegiance - or monster type, e.g. vampires not otherwise flagged will always fight werewolves not otherwise flagged - to set up things like the PC being able to lure enemies into an ambush. I'm using CombatLib as the basis for the RPG system I have in place and I understand spawning random mobs etc. The issue I'm running into is in creating a simple set of dictionaries or lists that will interact with each other. I did briefly manage to set one up but it was extremely rudimentary and resulted in every NPC attacking every other NPC in the enemy list!\r\n\r\nAny suggestions?",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry if this has been asked before - a quick search didn't turn it up. Like my name says, scripting isn't my strong point though I'm slowly getting the hang of it (and shamelessly exploiting pix's libraries) for a lot of basic fundamentals and I can do most of what I need as is.</p>\n<p>The current exception is a tricky one, though. I want to have NPCs dynamically fight each other, based on factional allegiance - or monster type, e.g. vampires not otherwise flagged will always fight werewolves not otherwise flagged - to set up things like the PC being able to lure enemies into an ambush. I'm using CombatLib as the basis for the RPG system I have in place and I understand spawning random mobs etc. The issue I'm running into is in creating a simple set of dictionaries or lists that will interact with each other. I did briefly manage to set one up but it was extremely rudimentary and resulted in every NPC attacking every other NPC in the enemy list!</p>\n<p>Any suggestions?</p>\n\n",
      "PostDate": "2018-07-11T04:35:38.2671049Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2def54fe-823c-4a5e-83be-c6374c122371",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "My first thought was that you could give each player a list of factions, and have a dictionary on the game object for which of those attack each other.\r\n\r\nProbably not explaining it too well.\r\n\r\nHere's some example code, a function to check if enemy X is willing to attack enemy Y. Not sure how to integrate this into CombatLib, as I've not used that. But it should be relatively simple.\r\n```\r\n<function name=\"willXattackY\" type=\"boolean\" parameters=\"enemyX, enemyY\">\r\n  if (HasAttribute (enemyX, \"has_been_attacked_by\")) {\r\n    if (ListContains (enemyX.has_been_attacked_by, enemyY)) {\r\n      return (true)\r\n    }\r\n  }\r\n  if (HasAttribute (enemyX, \"factions\") and HasAttribute (enemyY, \"factions\")) {\r\n    foreach (factionX, enemyX.factions) {\r\n      foreach (factionY, enemyY.factions + \"*\") {\r\n        if (DictionaryContains (game.faction_will_attack, factionX+factionY)) {\r\n          result = Eval (ProcessText(DictionaryItem(game.faction_will_attack, factionX+factionY)))\r\n          if (IsBoolean (result)) {\r\n            return (result)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (false)\r\n</function>\r\n```\r\nSo then you can have the stringdictionary `game.faction_will_attack`, with keys like \"vampirewerewolf\" or similar, and the values \"true\" or \"false\". You could also allow more complex rivalries, such as the key \"werewolf*\" and value \"{either IsFullMoon():true:null}\" to indicate that werewolves will attack everyone during a full moon.\r\nThe value can be \"true\" (attack), false (don't attack), or null (check other values, so that each enemy can be a member of more than one faction).\r\n\r\nI also allowed for an objectlist attribute has_been_attacked_by, because I think in most circumstances an enemy will strike back at someone who's previously attacked them regardless of their normal preferences.",
      "EditableFormat": "markdown",
      "HTML": "<p>My first thought was that you could give each player a list of factions, and have a dictionary on the game object for which of those attack each other.</p>\n<p>Probably not explaining it too well.</p>\n<p>Here's some example code, a function to check if enemy X is willing to attack enemy Y. Not sure how to integrate this into CombatLib, as I've not used that. But it should be relatively simple.</p>\n<pre><code>&lt;function name=\"willXattackY\" type=\"boolean\" parameters=\"enemyX, enemyY\"&gt;\n  if (HasAttribute (enemyX, \"has_been_attacked_by\")) {\n    if (ListContains (enemyX.has_been_attacked_by, enemyY)) {\n      return (true)\n    }\n  }\n  if (HasAttribute (enemyX, \"factions\") and HasAttribute (enemyY, \"factions\")) {\n    foreach (factionX, enemyX.factions) {\n      foreach (factionY, enemyY.factions + \"*\") {\n        if (DictionaryContains (game.faction_will_attack, factionX+factionY)) {\n          result = Eval (ProcessText(DictionaryItem(game.faction_will_attack, factionX+factionY)))\n          if (IsBoolean (result)) {\n            return (result)\n          }\n        }\n      }\n    }\n  }\n  return (false)\n&lt;/function&gt;\n</code></pre>\n<p>So then you can have the stringdictionary <code>game.faction_will_attack</code>, with keys like \"vampirewerewolf\" or similar, and the values \"true\" or \"false\". You could also allow more complex rivalries, such as the key \"werewolf*\" and value \"{either IsFullMoon():true:null}\" to indicate that werewolves will attack everyone during a full moon.<br>\nThe value can be \"true\" (attack), false (don't attack), or null (check other values, so that each enemy can be a member of more than one faction).</p>\n<p>I also allowed for an objectlist attribute has_been_attacked_by, because I think in most circumstances an enemy will strike back at someone who's previously attacked them regardless of their normal preferences.</p>\n\n",
      "PostDate": "2018-07-11T08:47:09.7131877Z",
      "LastEditDate": "2018-07-11T08:48:35.016378Z",
      "link": null
    },
    {
      "PostId": "92fe38d5-4af8-4557-8a72-920fe5a20dd0",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n(again, filler for getting my edited post, updated/posted)\r\n\r\n---------------------\r\n\r\nPixie's (opposing spells / spell damage types, handling) spell library can be used for factions as well (though it's basic form is limited for faction usage):\r\n\r\nmrangel can probably help/explain/code this for you faster than I can, lol\r\n\r\n(just have mrangel look at this post, and I think he'll understand what I'm talking about)\r\n\r\n(mrangel also crafted code that is scripting that will find the opposite value that you can use instead of manually writing/adding it to a string dictionary)\r\n\r\n```\r\nOpposing Faction String Dictionary:\r\n\r\nitem1:\r\n\r\nkey (input): vampire\r\nvalue (output): werewolf\r\n\r\nitem2:\r\n\r\nkey (input): werewolf\r\nvalue (output): vampire\r\n\r\nitem3:\r\n\r\nkey (input): elf\r\nvalue (output): dwarf\r\n\r\nitem4:\r\n\r\nkey (input): dwarf\r\nvalue (output): elf\r\n\r\n// ------------------------------------------------\r\n\r\n// example:\r\n\r\nfaction_stringlist_variable (\"vampire;werewolf;elf;dwarf\", \";\")\r\n\r\nnpc1.faction_string_attribute = StringListItem (faction_stringlist_variable, GetRandomInt (0, ListCount (faction_stringlist_variable) - 1))\r\n\r\nnpc2.faction_string_attribute = StringListItem (faction_stringlist_variable, GetRandomInt (0, ListCount (faction_stringlist_variable) - 1))\r\n\r\nif (npc1.faction_string_attribute = npc2.faction_string_attribute) {\r\n  msg (\"Being members of the same faction, they're cordial to each other\")\r\n} else if (npc1.faction_string_attribute = StringDictionaryItem (OPPOSING_FACTION_STRINGDICTIONARY, npc2.faction_string_attribute)) {\r\n  msg (\"Being members of their opposing factions, they immediately attack each other!\")\r\n} else {\r\n  msg (\"being members of neither the same faction nor their opposing factions, they maintain a cautious neutral state with each other\")\r\n}\r\n```\r\n\r\n----------------\r\n\r\nas can see though, as this is in its basic form, you can only have these 3 states (same, opposite, neither same nor opposite ), but I'm sure it can be modified to handle more complexity, without too much work (or mrangel's code in his post above does this already and especially if more/most efficiently, and thus you can just use his code, in that case, lol)\r\n\r\n--------------------------\r\n\r\nfurther mechanics if curious/interested, is have a table of relationships amongst the factions, and use those as modifiers multiplied/divided/added/subtracted/etc-arithmetic-operations-equations-formulas to your 'personality' Integer Attribute, to give you a base 'disposition' integer attribute for that specific faction member and do whatever other stuff that can be built upon this...\r\n\r\naka, see TES:Morrowind mechanics:\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Factions (scroll down to near bottom to see the table)\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Personality\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Disposition\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Speechcraft\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Commerce\r\n\r\nhttp://en.uesp.net/wiki/Morrowind:Mercantile",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)<br>\n(again, filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>Pixie's (opposing spells / spell damage types, handling) spell library can be used for factions as well (though it's basic form is limited for faction usage):</p>\n<p>mrangel can probably help/explain/code this for you faster than I can, lol</p>\n<p>(just have mrangel look at this post, and I think he'll understand what I'm talking about)</p>\n<p>(mrangel also crafted code that is scripting that will find the opposite value that you can use instead of manually writing/adding it to a string dictionary)</p>\n<pre><code>Opposing Faction String Dictionary:\n\nitem1:\n\nkey (input): vampire\nvalue (output): werewolf\n\nitem2:\n\nkey (input): werewolf\nvalue (output): vampire\n\nitem3:\n\nkey (input): elf\nvalue (output): dwarf\n\nitem4:\n\nkey (input): dwarf\nvalue (output): elf\n\n// ------------------------------------------------\n\n// example:\n\nfaction_stringlist_variable (\"vampire;werewolf;elf;dwarf\", \";\")\n\nnpc1.faction_string_attribute = StringListItem (faction_stringlist_variable, GetRandomInt (0, ListCount (faction_stringlist_variable) - 1))\n\nnpc2.faction_string_attribute = StringListItem (faction_stringlist_variable, GetRandomInt (0, ListCount (faction_stringlist_variable) - 1))\n\nif (npc1.faction_string_attribute = npc2.faction_string_attribute) {\n  msg (\"Being members of the same faction, they're cordial to each other\")\n} else if (npc1.faction_string_attribute = StringDictionaryItem (OPPOSING_FACTION_STRINGDICTIONARY, npc2.faction_string_attribute)) {\n  msg (\"Being members of their opposing factions, they immediately attack each other!\")\n} else {\n  msg (\"being members of neither the same faction nor their opposing factions, they maintain a cautious neutral state with each other\")\n}\n</code></pre>\n<hr>\n<p>as can see though, as this is in its basic form, you can only have these 3 states (same, opposite, neither same nor opposite ), but I'm sure it can be modified to handle more complexity, without too much work (or mrangel's code in his post above does this already and especially if more/most efficiently, and thus you can just use his code, in that case, lol)</p>\n<hr>\n<p>further mechanics if curious/interested, is have a table of relationships amongst the factions, and use those as modifiers multiplied/divided/added/subtracted/etc-arithmetic-operations-equations-formulas to your 'personality' Integer Attribute, to give you a base 'disposition' integer attribute for that specific faction member and do whatever other stuff that can be built upon this...</p>\n<p>aka, see TES:Morrowind mechanics:</p>\n<p>http://en.uesp.net/wiki/Morrowind:Factions (scroll down to near bottom to see the table)</p>\n<p>http://en.uesp.net/wiki/Morrowind:Personality</p>\n<p>http://en.uesp.net/wiki/Morrowind:Disposition</p>\n<p>http://en.uesp.net/wiki/Morrowind:Speechcraft</p>\n<p>http://en.uesp.net/wiki/Morrowind:Commerce</p>\n<p>http://en.uesp.net/wiki/Morrowind:Mercantile</p>\n\n",
      "PostDate": "2018-07-11T10:16:19.7610039Z",
      "LastEditDate": "2018-07-11T10:53:34.6987635Z",
      "link": null
    },
    {
      "PostId": "e960a5e8-dd17-40d3-a68e-069a363891d5",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\n@ ScriptingIsHard:\r\n\r\nhere's some links (if you're still new to coding/scripting) that can help you learn to code/script better with quest and learn quest a bit more too:\r\n\r\nhttp://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c\r\n\r\n(especially see the 'attributes and if script usage guide' link and the 'list and dictionary attribute guide' link)",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>@ ScriptingIsHard:</p>\n<p>here's some links (if you're still new to coding/scripting) that can help you learn to code/script better with quest and learn quest a bit more too:</p>\n<p>http://textadventures.co.uk/forum/general/topic/ljjm32av4e2t9ot49k478g/help#710be61e-eae1-4af1-8363-520cc718ba1c</p>\n<p>(especially see the 'attributes and if script usage guide' link and the 'list and dictionary attribute guide' link)</p>\n\n",
      "PostDate": "2018-07-11T10:46:32.4196099Z",
      "LastEditDate": "2018-07-11T10:47:57.9902801Z",
      "link": null
    },
    {
      "PostId": "0ffe0244-1ab5-41f3-8891-48377e48bc13",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Looking at CombatLib now, you'd probably want to modify the `monster_attack` type, changing its `selecttarget` script to something like:\r\n```\r\n    <selecttarget type=\"script\">\r\n      // Is the current target dead? If so reset\r\n      if (not this.target = null) {\r\n        if (this.target.dead) {\r\n          this.target = null\r\n        }\r\n      }\r\n      // Is no target set? If so, find one.\r\n      if (this.target = null) {\r\n        allmonsters = ListCombine (game.friends, game.attackers)\r\n        targets = NewObjectList()\r\n        foreach (monster, allmonsters) {\r\n          if (monster = this) {\r\n            monster = game.pov\r\n          }\r\n          if (Contains (this.parent, monster)) {\r\n            if (willXattackY (this, monster)) {\r\n              list add (targets, monster)\r\n            }\r\n          }\r\n        }\r\n        this.target = PickOneObject (targets)\r\n      }\r\n    </selecttarget>\r\n```\r\n\r\nActually, I'm wondering if it might be better to have a kind of 'anger score' for each pair of enemies. So a vampire might attack a werewolf if there's one in the room, but dwarves _really_ hate elves, and will attack one as soon as it walks into the room, even ignoring the guy they were previously fighting. Rather than just true or false, you'd have a numeric value. Factions who hate each other more would have a greater chance of attacking each other (but not guaranteed)/",
      "EditableFormat": "markdown",
      "HTML": "<p>Looking at CombatLib now, you'd probably want to modify the <code>monster_attack</code> type, changing its <code>selecttarget</code> script to something like:</p>\n<pre><code>    &lt;selecttarget type=\"script\"&gt;\n      // Is the current target dead? If so reset\n      if (not this.target = null) {\n        if (this.target.dead) {\n          this.target = null\n        }\n      }\n      // Is no target set? If so, find one.\n      if (this.target = null) {\n        allmonsters = ListCombine (game.friends, game.attackers)\n        targets = NewObjectList()\n        foreach (monster, allmonsters) {\n          if (monster = this) {\n            monster = game.pov\n          }\n          if (Contains (this.parent, monster)) {\n            if (willXattackY (this, monster)) {\n              list add (targets, monster)\n            }\n          }\n        }\n        this.target = PickOneObject (targets)\n      }\n    &lt;/selecttarget&gt;\n</code></pre>\n<p>Actually, I'm wondering if it might be better to have a kind of 'anger score' for each pair of enemies. So a vampire might attack a werewolf if there's one in the room, but dwarves <em>really</em> hate elves, and will attack one as soon as it walks into the room, even ignoring the guy they were previously fighting. Rather than just true or false, you'd have a numeric value. Factions who hate each other more would have a greater chance of attacking each other (but not guaranteed)/</p>\n\n",
      "PostDate": "2018-07-11T11:11:27.1057142Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6f8a3b47-3062-4d3a-a2f6-cba05ade096b",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I believe you need to give every object an attribute, something like:\r\n\r\norc.alliance = \"Enemy\"\r\nTodd.alliance = \"NPC\"\r\nor\r\norc.faction = \"Enemy\"\r\nTodd.faction = \"NPC\"\r\n\r\nI can't remember exactly though.",
      "EditableFormat": "markdown",
      "HTML": "<p>I believe you need to give every object an attribute, something like:</p>\n<p>orc.alliance = \"Enemy\"<br>\nTodd.alliance = \"NPC\"<br>\nor<br>\norc.faction = \"Enemy\"<br>\nTodd.faction = \"NPC\"</p>\n<p>I can't remember exactly though.</p>\n\n",
      "PostDate": "2018-07-11T11:43:56.1041864Z",
      "LastEditDate": "2018-07-11T11:48:33.2211475Z",
      "link": null
    },
    {
      "PostId": "da21f717-6e23-417b-9451-04cea42a92aa",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Wow, you guys work fast! I'll sit down and try and wrap my head around the underlying logic of the code before I get to implementing it (it's why my reliance on Pix's libraries is a mixed bag - on the one hand, it's great not to have to understand it and reap the rewards, but on the other, taking the time to learn to do it myself would be much more useful in the long run) and then tweak it as needed. The idea about variable hate scores is super neat, especially since I'm working on a game with a complex orcish clan system where it'd be a neat way to implement tensions. If I can figure out a way to make it refer to a clan object variable - I think I can just about wrangle that as is - then I can have it be fairly dynamic without needing to call and update every clan orc every time the PC does something to change the balance of tension.",
      "EditableFormat": "markdown",
      "HTML": "<p>Wow, you guys work fast! I'll sit down and try and wrap my head around the underlying logic of the code before I get to implementing it (it's why my reliance on Pix's libraries is a mixed bag - on the one hand, it's great not to have to understand it and reap the rewards, but on the other, taking the time to learn to do it myself would be much more useful in the long run) and then tweak it as needed. The idea about variable hate scores is super neat, especially since I'm working on a game with a complex orcish clan system where it'd be a neat way to implement tensions. If I can figure out a way to make it refer to a clan object variable - I think I can just about wrangle that as is - then I can have it be fairly dynamic without needing to call and update every clan orc every time the PC does something to change the balance of tension.</p>\n\n",
      "PostDate": "2018-07-11T11:56:23.0923184Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "715c4282-924a-42db-b1a9-4eadf1dd5c82",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can give NPCs a script called \"selecttarget\" (or modify the existing one) to set the \"target\" attribute of the NPC. For a werewolf it could check if \"target\" is already set, and if not, set it to a randomly chosen vampire. \r\n\r\nETA: I see MrAngel has already said that.",
      "EditableFormat": "markdown",
      "HTML": "<p>You can give NPCs a script called \"selecttarget\" (or modify the existing one) to set the \"target\" attribute of the NPC. For a werewolf it could check if \"target\" is already set, and if not, set it to a randomly chosen vampire.</p>\n<p>ETA: I see MrAngel has already said that.</p>\n\n",
      "PostDate": "2018-07-11T12:04:54.2441383Z",
      "LastEditDate": "2018-07-11T12:06:47.5479238Z",
      "link": null
    },
    {
      "PostId": "ee0bd52d-bb25-4eb6-9c8a-5f8213352cb3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Off the top of my head, this is how I'd do factions with some kind of probability balance:\r\n\r\n```\r\n<function name=\"GetAttackChance\" type=\"int\" parameters=\"attacker, target\">\r\n  score = 0\r\n  if (HasAttribute (attacker, \"attackedby\")) {\r\n    foreach (att, attacker.attackedby) {\r\n      if (att = target) {\r\n        score = score + 10\r\n      }\r\n    }\r\n  }\r\n  if (HasAttribute (attacker, \"factions\") and HasAttribute (target, \"factions\")) {\r\n    foreach (i, attacker.factions) {\r\n      foreach (j, target.factions + \"*\") {\r\n        if (DictionaryContains (game.faction_aggression, i+\"/\"+j)) {\r\n          result = Eval (ProcessText(DictionaryItem(game.faction_aggression, i+\"/\"+j)))\r\n          if (TypeOf (result) = \"int\") {\r\n            score = score + result\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (score)\r\n</function>\r\n```\r\nand the selecttarget script:\r\n```\r\n<selecttarget type=\"script\">\r\n  allmonsters = ListCombine (game.friends, game.attackers)\r\n  targets = NewObjectList()\r\n  foreach (monster, allmonsters) {\r\n    if (Contains (this.parent, monster) and not monster = this) {\r\n      score = GetAttackChance (this, monster)\r\n      if (monster = this.target) {\r\n        // increase chance the monster will keep attacking the same target\r\n        score = GetRandomInt (score, score * 2)\r\n      }\r\n      if (score > 0) {\r\n        // if the score is greater than zero, add to the list of targets to choose from\r\n        // higher score gets added to the list multiple times, so has a higher chance of getting chosen.\r\n        for (i, 0, score) {\r\n          list add (targets, monster)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  this.target = PickOneObject (targets)\r\n  // add ourselves to the target's \"attackedby\" list, making them more likely to attack back on their turn\r\n  if (not this.target = null) {\r\n    if (not HasAttribute (this.target, \"attackedby\")) {\r\n      this.target.attackedby = NewObjectList()\r\n    }\r\n    list add (this.target.attackedby, this)\r\n  }\r\n</selecttarget>\r\n```\r\n\r\nThen you configure that by giving each enemy type a set of factions. This is a stringlist.\r\neg: `<factions type=\"simplestringlist\">red team;zombie;undead</factions>`\r\n\r\nAnd the game object has a string dictionary.\r\nFor example: `<attr name=\"faction_aggression\" type=\"simplestringdictionary\">vampire/werewolf=4;red team/blue team=9;blue team/red team=9;priest/vampire=5;berserker/*=99;pacifist/*=-16</attr>`\r\n\r\n(The berserker has +99 change to attack everybody, which means he pretty much picks a target at random each turn; and the 'pacifist' faction means that a monster probably won't attack at all unless somebody attacks him first)",
      "EditableFormat": "markdown",
      "HTML": "<p>Off the top of my head, this is how I'd do factions with some kind of probability balance:</p>\n<pre><code>&lt;function name=\"GetAttackChance\" type=\"int\" parameters=\"attacker, target\"&gt;\n  score = 0\n  if (HasAttribute (attacker, \"attackedby\")) {\n    foreach (att, attacker.attackedby) {\n      if (att = target) {\n        score = score + 10\n      }\n    }\n  }\n  if (HasAttribute (attacker, \"factions\") and HasAttribute (target, \"factions\")) {\n    foreach (i, attacker.factions) {\n      foreach (j, target.factions + \"*\") {\n        if (DictionaryContains (game.faction_aggression, i+\"/\"+j)) {\n          result = Eval (ProcessText(DictionaryItem(game.faction_aggression, i+\"/\"+j)))\n          if (TypeOf (result) = \"int\") {\n            score = score + result\n          }\n        }\n      }\n    }\n  }\n  return (score)\n&lt;/function&gt;\n</code></pre>\n<p>and the selecttarget script:</p>\n<pre><code>&lt;selecttarget type=\"script\"&gt;\n  allmonsters = ListCombine (game.friends, game.attackers)\n  targets = NewObjectList()\n  foreach (monster, allmonsters) {\n    if (Contains (this.parent, monster) and not monster = this) {\n      score = GetAttackChance (this, monster)\n      if (monster = this.target) {\n        // increase chance the monster will keep attacking the same target\n        score = GetRandomInt (score, score * 2)\n      }\n      if (score &gt; 0) {\n        // if the score is greater than zero, add to the list of targets to choose from\n        // higher score gets added to the list multiple times, so has a higher chance of getting chosen.\n        for (i, 0, score) {\n          list add (targets, monster)\n        }\n      }\n    }\n  }\n  this.target = PickOneObject (targets)\n  // add ourselves to the target's \"attackedby\" list, making them more likely to attack back on their turn\n  if (not this.target = null) {\n    if (not HasAttribute (this.target, \"attackedby\")) {\n      this.target.attackedby = NewObjectList()\n    }\n    list add (this.target.attackedby, this)\n  }\n&lt;/selecttarget&gt;\n</code></pre>\n<p>Then you configure that by giving each enemy type a set of factions. This is a stringlist.<br>\neg: <code>&lt;factions type=\"simplestringlist\"&gt;red team;zombie;undead&lt;/factions&gt;</code></p>\n<p>And the game object has a string dictionary.<br>\nFor example: <code>&lt;attr name=\"faction_aggression\" type=\"simplestringdictionary\"&gt;vampire/werewolf=4;red team/blue team=9;blue team/red team=9;priest/vampire=5;berserker/*=99;pacifist/*=-16&lt;/attr&gt;</code></p>\n<p>(The berserker has +99 change to attack everybody, which means he pretty much picks a target at random each turn; and the 'pacifist' faction means that a monster probably won't attack at all unless somebody attacks him first)</p>\n\n",
      "PostDate": "2018-07-11T12:31:53.115594Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5188feec-6e77-4abf-847b-560041b2f5e4",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I've implemented MrAngel's suggestions, and they work great with the exception that every NPC seems to decide that suicide is the way to go when combat starts. I suspect I've managed to execute it wrongly somehow, since my test is two generic enemies with opposing factions. When combat starts, they start attacking themselves, but when one dies the other stops trying to commit suicide for lack of a target. I'm not sure where the issue's stemming from, but I think it should be reproducible by anyone running CombatLib and this code.",
      "EditableFormat": "markdown",
      "HTML": "<p>I've implemented MrAngel's suggestions, and they work great with the exception that every NPC seems to decide that suicide is the way to go when combat starts. I suspect I've managed to execute it wrongly somehow, since my test is two generic enemies with opposing factions. When combat starts, they start attacking themselves, but when one dies the other stops trying to commit suicide for lack of a target. I'm not sure where the issue's stemming from, but I think it should be reproducible by anyone running CombatLib and this code.</p>\n\n",
      "PostDate": "2018-07-12T12:41:48.5493845Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "770ae779-bb03-49b5-bcd3-da80d9e6728f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm... I can't see how it's managing that.\r\nCould you share the game so I can take a look and see where it's not going as I expected?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm... I can't see how it's managing that.<br>\nCould you share the game so I can take a look and see where it's not going as I expected?</p>\n\n",
      "PostDate": "2018-07-12T13:58:27.9693616Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "995b8cee-c0f0-4bae-8941-3faf7cfab057",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sure thing - I'm using an extremely basic testing game setup (quite literally just combatlib and your scripts and functions) for this so I can actually pop the entire code (except the combatlib .xmls) in here, if that'd work for you, or upload it somewhere if that's a better option. I've also noticed that they don't die unless I've struck the killing blow, so something in the mix isn't communicating damage correctly either.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sure thing - I'm using an extremely basic testing game setup (quite literally just combatlib and your scripts and functions) for this so I can actually pop the entire code (except the combatlib .xmls) in here, if that'd work for you, or upload it somewhere if that's a better option. I've also noticed that they don't die unless I've struck the killing blow, so something in the mix isn't communicating damage correctly either.</p>\n\n",
      "PostDate": "2018-07-12T14:34:54.3599479Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a78fd08c-e5ee-497a-9f34-fa3f76bffb47",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If anyone wants to take a shot, I'm throwing it on in here just as rawcode. The only thing missing is pix's combatlib xmls. As you can see, it's about as basic a testing setup as they come so it shouldn't be interference from any other variables.\r\n\r\n\r\n```<!--Saved by Quest 5.7.6606.27193-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <include ref=\"CombatLib.aslx\" />\r\n  <game name=\"factionalcombattestbed\">\r\n    <gameid>60ec50a9-86ea-44fa-b2b8-74f02d56c7d1</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <faction_aggression type=\"stringdictionary\">\r\n      <item>\r\n        <key>vampire/werewolf</key>\r\n        <value>4</value>\r\n      </item>\r\n      <item>\r\n        <key>red team/blue team</key>\r\n        <value>9</value>\r\n      </item>\r\n      <item>\r\n        <key>blue team/red team</key>\r\n        <value>9</value>\r\n      </item>\r\n      <item>\r\n        <key>priest/vampire</key>\r\n        <value>5</value>\r\n      </item>\r\n      <item>\r\n        <key>berserker/*</key>\r\n        <value>99</value>\r\n      </item>\r\n      <item>\r\n        <key>pacifist/*</key>\r\n        <value>-16</value>\r\n      </item>\r\n    </faction_aggression>\r\n    <start type=\"script\">\r\n      CombatInitialise\r\n    </start>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"mob1\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"monster\" />\r\n      <factions type=\"stringlist\">\r\n        <value>red team</value>\r\n      </factions>\r\n      <monstertype>Goblinoid</monstertype>\r\n    </object>\r\n    <object name=\"mob2\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"monster\" />\r\n      <monstertype>Human</monstertype>\r\n      <factions type=\"stringlist\">\r\n        <value>blue team</value>\r\n      </factions>\r\n    </object>\r\n  </object>\r\n  <function name=\"willXattackY\" parameters=\"enemyX, enemyY\" type=\"boolean\">\r\n    if (HasAttribute (enemyX, \"has_been_attacked_by\")) {\r\n      if (ListContains (enemyX.has_been_attacked_by, enemyY)) {\r\n        return (true)\r\n      }\r\n    }\r\n    if (HasAttribute (enemyX, \"factions\") and HasAttribute (enemyY, \"factions\")) {\r\n      foreach (factionX, enemyX.factions) {\r\n        foreach (factionY, enemyY.factions + \"*\") {\r\n          if (DictionaryContains (game.faction_will_attack, factionX+factionY)) {\r\n            result = Eval (ProcessText(DictionaryItem(game.faction_will_attack, factionX+factionY)))\r\n            if (IsBoolean (result)) {\r\n              return (result)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (false)\r\n  </function>\r\n  <function name=\"GetAttackChance\" parameters=\"attacker, target\" type=\"int\">\r\n    score = 0\r\n    if (HasAttribute (attacker, \"attackedby\")) {\r\n      foreach (att, attacker.attackedby) {\r\n        if (att = target) {\r\n          score = score + 10\r\n        }\r\n      }\r\n    }\r\n    if (HasAttribute (attacker, \"factions\") and HasAttribute (target, \"factions\")) {\r\n      foreach (i, attacker.factions) {\r\n        foreach (j, target.factions + \"*\") {\r\n          if (DictionaryContains (game.faction_aggression, i+\"/\"+j)) {\r\n            result = Eval (ProcessText(DictionaryItem(game.faction_aggression, i+\"/\"+j)))\r\n            if (TypeOf (result) = \"int\") {\r\n              score = score + result\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (score)\r\n  </function>\r\n</asl>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>If anyone wants to take a shot, I'm throwing it on in here just as rawcode. The only thing missing is pix's combatlib xmls. As you can see, it's about as basic a testing setup as they come so it shouldn't be interference from any other variables.</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;include ref=\"CombatLib.aslx\" /&gt;\n  &lt;game name=\"factionalcombattestbed\"&gt;\n    &lt;gameid&gt;60ec50a9-86ea-44fa-b2b8-74f02d56c7d1&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;faction_aggression type=\"stringdictionary\"&gt;\n      &lt;item&gt;\n        &lt;key&gt;vampire/werewolf&lt;/key&gt;\n        &lt;value&gt;4&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;red team/blue team&lt;/key&gt;\n        &lt;value&gt;9&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;blue team/red team&lt;/key&gt;\n        &lt;value&gt;9&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;priest/vampire&lt;/key&gt;\n        &lt;value&gt;5&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;berserker/*&lt;/key&gt;\n        &lt;value&gt;99&lt;/value&gt;\n      &lt;/item&gt;\n      &lt;item&gt;\n        &lt;key&gt;pacifist/*&lt;/key&gt;\n        &lt;value&gt;-16&lt;/value&gt;\n      &lt;/item&gt;\n    &lt;/faction_aggression&gt;\n    &lt;start type=\"script\"&gt;\n      CombatInitialise\n    &lt;/start&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"mob1\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"monster\" /&gt;\n      &lt;factions type=\"stringlist\"&gt;\n        &lt;value&gt;red team&lt;/value&gt;\n      &lt;/factions&gt;\n      &lt;monstertype&gt;Goblinoid&lt;/monstertype&gt;\n    &lt;/object&gt;\n    &lt;object name=\"mob2\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"monster\" /&gt;\n      &lt;monstertype&gt;Human&lt;/monstertype&gt;\n      &lt;factions type=\"stringlist\"&gt;\n        &lt;value&gt;blue team&lt;/value&gt;\n      &lt;/factions&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"willXattackY\" parameters=\"enemyX, enemyY\" type=\"boolean\"&gt;\n    if (HasAttribute (enemyX, \"has_been_attacked_by\")) {\n      if (ListContains (enemyX.has_been_attacked_by, enemyY)) {\n        return (true)\n      }\n    }\n    if (HasAttribute (enemyX, \"factions\") and HasAttribute (enemyY, \"factions\")) {\n      foreach (factionX, enemyX.factions) {\n        foreach (factionY, enemyY.factions + \"*\") {\n          if (DictionaryContains (game.faction_will_attack, factionX+factionY)) {\n            result = Eval (ProcessText(DictionaryItem(game.faction_will_attack, factionX+factionY)))\n            if (IsBoolean (result)) {\n              return (result)\n            }\n          }\n        }\n      }\n    }\n    return (false)\n  &lt;/function&gt;\n  &lt;function name=\"GetAttackChance\" parameters=\"attacker, target\" type=\"int\"&gt;\n    score = 0\n    if (HasAttribute (attacker, \"attackedby\")) {\n      foreach (att, attacker.attackedby) {\n        if (att = target) {\n          score = score + 10\n        }\n      }\n    }\n    if (HasAttribute (attacker, \"factions\") and HasAttribute (target, \"factions\")) {\n      foreach (i, attacker.factions) {\n        foreach (j, target.factions + \"*\") {\n          if (DictionaryContains (game.faction_aggression, i+\"/\"+j)) {\n            result = Eval (ProcessText(DictionaryItem(game.faction_aggression, i+\"/\"+j)))\n            if (TypeOf (result) = \"int\") {\n              score = score + result\n            }\n          }\n        }\n      }\n    }\n    return (score)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2018-07-14T08:20:38.3977519Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e846cd8f-579f-4679-962a-18caa3dde4f5",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm ... I wonder if I messed up using \"monster\" as a variable name when it's also a type name. Not sure if that could be a problem.\r\n\r\nI'm just looking at the code here; I can't test it out because I don't have a Windows machine.\r\nI'd say the next step in debugging would be to find out whether the problem is in `GetAttackChance` or `selecttarget`.\r\nBefore the line `return (score)`, try adding a debug statement: `msg (\"Chance of \"+attacker.name+\" attacking \"+target.name+\": \"+score)`.\r\n\r\nThat *should* come up with:\r\n```\r\nChance of mob1 attacking player: 0\r\nChance of mob1 attacking mob2: 9\r\nChance of mob2 attacking player: 0\r\nChance of mob2 attacking mob1: 9\r\n```\r\nIf it returns something else, then the results should give a clue where the problem lies.\r\nHoping Pixie/KV/someone can chip in to point out what I've missed, because I've looked over the code several times and I can't spot it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm ... I wonder if I messed up using \"monster\" as a variable name when it's also a type name. Not sure if that could be a problem.</p>\n<p>I'm just looking at the code here; I can't test it out because I don't have a Windows machine.<br>\nI'd say the next step in debugging would be to find out whether the problem is in <code>GetAttackChance</code> or <code>selecttarget</code>.<br>\nBefore the line <code>return (score)</code>, try adding a debug statement: <code>msg (\"Chance of \"+attacker.name+\" attacking \"+target.name+\": \"+score)</code>.</p>\n<p>That <em>should</em> come up with:</p>\n<pre><code>Chance of mob1 attacking player: 0\nChance of mob1 attacking mob2: 9\nChance of mob2 attacking player: 0\nChance of mob2 attacking mob1: 9\n</code></pre>\n<p>If it returns something else, then the results should give a clue where the problem lies.<br>\nHoping Pixie/KV/someone can chip in to point out what I've missed, because I've looked over the code several times and I can't spot it.</p>\n\n",
      "PostDate": "2018-07-14T08:43:26.4089289Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8fd24609-9462-446b-89e3-64a4792e32fb",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yep, we're getting what we're after there once I initiate combat by taking a swing at both mobs - \r\nChance of mob1 attacking player: 0\r\nChance of mob1 attacking mob2: 9",
      "EditableFormat": "markdown",
      "HTML": "<p>Yep, we're getting what we're after there once I initiate combat by taking a swing at both mobs -<br>\nChance of mob1 attacking player: 0<br>\nChance of mob1 attacking mob2: 9</p>\n\n",
      "PostDate": "2018-07-14T09:17:43.9466894Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e94570b0-9068-48e2-9dd1-105bfca549b3",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm ... the code to add to the `attackedby` list should probably be moved to the actual attack function; because if you've just hit a monster, it should be more likely to go for you than its traditional rival. But that's a secondary concern if they're misbehaving.\r\n\r\nMy next thought would be to check that the `selecttarget` script is doing the right thing.\r\nSo where we have the line `this.target = PickOneObject (targets)`, change that to:\r\n\r\n```\r\n  msg (this.name+\" picking a target. Previous target was: \"+this.target)\r\n  msg (\"Possible targets: \"+FormatList(targets, \", \", \", \", \"none\"))\r\n  this.target = PickOneObject (targets)\r\n  msg (\"Chose: \"+this.target)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm ... the code to add to the <code>attackedby</code> list should probably be moved to the actual attack function; because if you've just hit a monster, it should be more likely to go for you than its traditional rival. But that's a secondary concern if they're misbehaving.</p>\n<p>My next thought would be to check that the <code>selecttarget</code> script is doing the right thing.<br>\nSo where we have the line <code>this.target = PickOneObject (targets)</code>, change that to:</p>\n<pre><code>  msg (this.name+\" picking a target. Previous target was: \"+this.target)\n  msg (\"Possible targets: \"+FormatList(targets, \", \", \", \", \"none\"))\n  this.target = PickOneObject (targets)\n  msg (\"Chose: \"+this.target)\n</code></pre>\n\n",
      "PostDate": "2018-07-14T09:30:48.5094382Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "25d7ab9e-5398-4103-bc2c-8d14869733ff",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nforeach (factionY, enemyY.factions + \"*\") {\r\n```\r\n\r\n---\r\nI don't understand what this bit is doing:  ``` + \"*\"```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>foreach (factionY, enemyY.factions + \"*\") {\n</code></pre>\n<hr>\n<p>I don't understand what this bit is doing:  <code>+ \"*\"</code></p>\n\n",
      "PostDate": "2018-07-14T09:32:50.9971309Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4fb88b98-c75a-4574-be23-9f51052698df",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, I think I see the problem.\r\n\r\nI _think_ my code is fine.\r\nThe `attackplayer` script in CombatLib has a bug.\r\n\r\nIt generates a string like \"Mob1 swings at you and hits, doing 9 damage.\"\r\n\r\nThen if the target isn't the player, it does a string search-and-replace to change \"you\" to the name of the attacking monster. So it's actually doing damage to mob2, it's just the message that seems to be wrong.\r\n\r\nIn `Monsters.xml`, look for the line:\r\n```\r\n            s = Replace(s, \" you\", \" \" + GetDisplayAlias (this))\r\n```\r\nI think that should be:\r\n```\r\n            s = Replace(s, \" you\", \" \" + GetDisplayAlias (this.target))\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, I think I see the problem.</p>\n<p>I <em>think</em> my code is fine.<br>\nThe <code>attackplayer</code> script in CombatLib has a bug.</p>\n<p>It generates a string like \"Mob1 swings at you and hits, doing 9 damage.\"</p>\n<p>Then if the target isn't the player, it does a string search-and-replace to change \"you\" to the name of the attacking monster. So it's actually doing damage to mob2, it's just the message that seems to be wrong.</p>\n<p>In <code>Monsters.xml</code>, look for the line:</p>\n<pre><code>            s = Replace(s, \" you\", \" \" + GetDisplayAlias (this))\n</code></pre>\n<p>I think that should be:</p>\n<pre><code>            s = Replace(s, \" you\", \" \" + GetDisplayAlias (this.target))\n</code></pre>\n\n",
      "PostDate": "2018-07-14T09:51:33.5154898Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91c3f799-b7ef-4e17-8b88-08e470b9b204",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@KV\r\n> I don't understand what this bit is doing: `+ \"*\"`\r\n\r\nAdds the wildcard faction \"&#42;\" to the list. So that you can have faction animosity like \"pacifist/&#42;\" or \"berserker/&#42;\"; gives a faction an increase/decrease to their chance to attack against all targets.\r\nI think that works, but it's off the top of my head so maybe I got the syntax wrong.\r\n\r\nIf a `red team;vampire` is in a room with a `blue team;werewolf`, its chance of attacking that target will be the sum of the values for `red team/blue team`, `red team/werewolf`, `red team/*`, `vampire/blue team`, `vampire/werewolf`, and `vampire/*`.",
      "EditableFormat": "markdown",
      "HTML": "<p>@KV</p>\n<blockquote>\n<p>I don't understand what this bit is doing: <code>+ \"*\"</code></p>\n</blockquote>\n<p>Adds the wildcard faction \"*\" to the list. So that you can have faction animosity like \"pacifist/*\" or \"berserker/*\"; gives a faction an increase/decrease to their chance to attack against all targets.<br>\nI think that works, but it's off the top of my head so maybe I got the syntax wrong.</p>\n<p>If a <code>red team;vampire</code> is in a room with a <code>blue team;werewolf</code>, its chance of attacking that target will be the sum of the values for <code>red team/blue team</code>, <code>red team/werewolf</code>, <code>red team/*</code>, <code>vampire/blue team</code>, <code>vampire/werewolf</code>, and <code>vampire/*</code>.</p>\n\n",
      "PostDate": "2018-07-14T09:57:22.4788774Z",
      "LastEditDate": "2018-07-14T09:58:09.7825765Z",
      "link": null
    },
    {
      "PostId": "e52a1bcd-b7e2-47d8-a0b4-d1d5918ce16c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(note that this script will not work for the `monsterarcher` type, which selects a target and then attacks the player regardless of which target it picked)",
      "EditableFormat": "markdown",
      "HTML": "<p>(note that this script will not work for the <code>monsterarcher</code> type, which selects a target and then attacks the player regardless of which target it picked)</p>\n\n",
      "PostDate": "2018-07-14T10:01:47.9053164Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a7104176-fd1f-4b1b-bcd8-0b7a9bc04705",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I've also noticed that they don't die unless I've struck the killing blow, so something in the mix isn't communicating damage correctly either.\r\n\r\nYeah; it only checks if a monster is dead when the player attacks it.\r\n\r\nIn the `attackplayer` script for the `monster_attack` type, you could add at the end:\r\n```\r\n  if (this.target.hitpoints <= 0) {\r\n    do (this.target, \"makedead\")\r\n  }\r\n```\r\nI think it would make more sense for this to be done in the monster's `changedhitpoints` script; but as the monster's hit points are changed before generating the attack message, that would result in the messages appearing out of order.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I've also noticed that they don't die unless I've struck the killing blow, so something in the mix isn't communicating damage correctly either.</p>\n</blockquote>\n<p>Yeah; it only checks if a monster is dead when the player attacks it.</p>\n<p>In the <code>attackplayer</code> script for the <code>monster_attack</code> type, you could add at the end:</p>\n<pre><code>  if (this.target.hitpoints &lt;= 0) {\n    do (this.target, \"makedead\")\n  }\n</code></pre>\n<p>I think it would make more sense for this to be done in the monster's <code>changedhitpoints</code> script; but as the monster's hit points are changed before generating the attack message, that would result in the messages appearing out of order.</p>\n\n",
      "PostDate": "2018-07-14T10:23:03.8563791Z",
      "LastEditDate": "2018-07-14T10:26:25.6609075Z",
      "link": null
    },
    {
      "PostId": "96bfc405-3227-46f0-b5a9-ce5a26d1caa7",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll take a look in myself once I implement those fixes and try to work out where in the scripting the mobs aren't dying until struck a deathblow by the player, too, and let people know what I find. Debugging stuff like this is a good way to wrap my head around the surrounding code. They're definitely getting damaged, but the death script isn't triggering, so I'm going to guess it's checking independently for either a reference to the player or the limited ally set-up already in combatlib.\r\n\r\nEDIT:\r\nDamn you you helpful monster!",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll take a look in myself once I implement those fixes and try to work out where in the scripting the mobs aren't dying until struck a deathblow by the player, too, and let people know what I find. Debugging stuff like this is a good way to wrap my head around the surrounding code. They're definitely getting damaged, but the death script isn't triggering, so I'm going to guess it's checking independently for either a reference to the player or the limited ally set-up already in combatlib.</p>\n<p>EDIT:<br>\nDamn you you helpful monster!</p>\n\n",
      "PostDate": "2018-07-14T10:24:21.5494121Z",
      "LastEditDate": "2018-07-14T10:25:55.6313642Z",
      "link": null
    },
    {
      "PostId": "ec2897d4-25c5-4020-bc86-2942c67046a7",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The good news is the attack names are fixed. The bad news is that I can't get that piece of code for triggering death scripts in without it refusing to run due to nested XML, which I'm pretty sure is down to my inexperience. This is the case regardless of where in the script I try and insert it.",
      "EditableFormat": "markdown",
      "HTML": "<p>The good news is the attack names are fixed. The bad news is that I can't get that piece of code for triggering death scripts in without it refusing to run due to nested XML, which I'm pretty sure is down to my inexperience. This is the case regardless of where in the script I try and insert it.</p>\n\n",
      "PostDate": "2018-07-14T10:54:06.3011868Z",
      "LastEditDate": "2018-07-14T10:54:50.2871134Z",
      "link": null
    },
    {
      "PostId": "8f1bc88b-c551-46ad-9087-3891b3cde534",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, because it thinks the `<=` sign is an XML element.\r\n\r\nYou could change it to `if (not this.target.hitpoints > 0)`, or `if (0 >= this.target.hitpoints)`. Or put `<![CDATA[` at the start of the script and `]]>` after, which tells it to ignore any other `<` within that block.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, because it thinks the <code>&lt;=</code> sign is an XML element.</p>\n<p>You could change it to <code>if (not this.target.hitpoints &gt; 0)</code>, or <code>if (0 &gt;= this.target.hitpoints)</code>. Or put <code>&lt;![CDATA[</code> at the start of the script and <code>]]&gt;</code> after, which tells it to ignore any other <code>&lt;</code> within that block.</p>\n\n",
      "PostDate": "2018-07-14T11:07:55.5239708Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9463c2b5-a82d-4062-ad81-f64d582754ce",
      "UserId": 367757,
      "Username": "ScriptingIsHard",
      "AvatarUrl": "https://secure.gravatar.com/avatar/aa8196a12464bf7c443488a22d853587?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's sorted it, so I think I can proceed now and dig myself into all kinds of traps of boolean states and string lists. Thanks, MrAngel!",
      "EditableFormat": "markdown",
      "HTML": "<p>That's sorted it, so I think I can proceed now and dig myself into all kinds of traps of boolean states and string lists. Thanks, MrAngel!</p>\n\n",
      "PostDate": "2018-07-14T11:31:36.2045257Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
