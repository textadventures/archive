{
  "Topic": {
    "TopicId": "3755",
    "ForumId": "10",
    "Title": "dictionarys of integers?",
    "LastUpdated": "2013-06-27T06:03:21+01:00",
    "ReplyCount": 8
  },
  "Posts": [
    {
      "PostId": "25143",
      "UserId": 0,
      "Username": "shadowphile",
      "UserAvatar": null,
      "UserGravatar": "e3cc24e20c3199b383451c382c2c0b17",
      "EditableText": "Can I create a dictionary that returns an integer?  \nI'm trying to use a key value and get an integer back.\n\nInstead, for now, I created a script dictionary with each script just 'return (n)' where n varies for each key.\nI tried ScriptDictionaryItem(game.mydictionary, &quot;tomato&quot;) but &quot;tomato&quot; or tomato without the quotes causes an error, even though it's one of the keys I've defined.\n\nAnd if it did work, what command do I use to run a script?\n\nSuch a simple task in other languages...  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? -->",
      "EditableFormat": "bbcode",
      "HTML": "Can I create a dictionary that returns an integer?  <br/>I'm trying to use a key value and get an integer back.<br/><br/>Instead, for now, I created a script dictionary with each script just 'return (n)' where n varies for each key.<br/>I tried ScriptDictionaryItem(game.mydictionary, &quot;tomato&quot;) but &quot;tomato&quot; or tomato without the quotes causes an error, even though it's one of the keys I've defined.<br/><br/>And if it did work, what command do I use to run a script?<br/><br/>Such a simple task in other languages...  <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? -->",
      "PostDate": "2013-06-25T08:48:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25146",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "Yes, the dictionary type lets you store any kind of value: <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Dictionary\">http://quest5.net/wiki/Dictionary</a><!-- m -->\n\nBefore Quest 5.4 there were only stringdictionary and scriptdictionary types, but you can use the new dictionary type to store integers.\n\nThere's no attribute editor for it yet, so you have to either create it using the code view, or use a script to populate it.",
      "EditableFormat": "bbcode",
      "HTML": "Yes, the dictionary type lets you store any kind of value: <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Dictionary\">http://quest5.net/wiki/Dictionary</a><!-- m --><br/><br/>Before Quest 5.4 there were only stringdictionary and scriptdictionary types, but you can use the new dictionary type to store integers.<br/><br/>There's no attribute editor for it yet, so you have to either create it using the code view, or use a script to populate it.",
      "PostDate": "2013-06-25T10:02:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25148",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "Another workaround is the ToInt function which would allow you to store the numbers in a string dictionary, then convert them to integers when you need to call on them.\n\n[url:26iy5nep]http&#58;//quest5&#46;net/wiki/ToInt[/url:26iy5nep]\n\ne.g. ToInt(StringDictionaryItem(dictionaryName,Key))",
      "EditableFormat": "bbcode",
      "HTML": "Another workaround is the ToInt function which would allow you to store the numbers in a string dictionary, then convert them to integers when you need to call on them.<br/><br/><a href=\"http&#58;//quest5&#46;net/wiki/ToInt\" rel=\"nofollow\">http&#58;//quest5&#46;net/wiki/ToInt</a><br/><br/>e.g. ToInt(StringDictionaryItem(dictionaryName,Key))",
      "PostDate": "2013-06-25T21:47:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25150",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "and to call it, I think it's &quot;invoke&quot;, so:\n\ninvoke (ToInt(StringDictionaryItem(dictionaryName,Key)))\n\nerr... maybe invoke only works for a scriptdictionary, you can figure it out though, as I'm too lazy to do so myself, lol.",
      "EditableFormat": "bbcode",
      "HTML": "and to call it, I think it's &quot;invoke&quot;, so:<br/><br/>invoke (ToInt(StringDictionaryItem(dictionaryName,Key)))<br/><br/>err... maybe invoke only works for a scriptdictionary, you can figure it out though, as I'm too lazy to do so myself, lol.",
      "PostDate": "2013-06-26T02:40:48+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25151",
      "UserId": 0,
      "Username": "shadowphile",
      "UserAvatar": null,
      "UserGravatar": "e3cc24e20c3199b383451c382c2c0b17",
      "EditableText": "ToInt requires an object and attribute and wont' take a string!  Is there a basic string to number function?  Can't find one listed in the wiki, might be unlisted function? (ie IsDefined)",
      "EditableFormat": "bbcode",
      "HTML": "ToInt requires an object and attribute and wont' take a string!  Is there a basic string to number function?  Can't find one listed in the wiki, might be unlisted function? (ie IsDefined)",
      "PostDate": "2013-06-26T05:04:22+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25153",
      "UserId": 0,
      "Username": "Pertex",
      "UserAvatar": "5940_1369854251.gif",
      "UserGravatar": "4cc1e52f99452e841ecf4cbee9eadde9",
      "EditableText": "[quote=&quot;shadowphile&quot;:10ontlna]ToInt requires an object and attribute and wont' take a string!  [/quote:10ontlna]\nThats not true. ToInt is the right function",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>shadowphile wrote:</cite>ToInt requires an object and attribute and wont' take a string!  </blockquote><br/>Thats not true. ToInt is the right function",
      "PostDate": "2013-06-26T07:42:47+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25172",
      "UserId": 0,
      "Username": "shadowphile",
      "UserAvatar": null,
      "UserGravatar": "e3cc24e20c3199b383451c382c2c0b17",
      "EditableText": "Sorry, got GetInt and ToInt confused.\nToInt still doesn't work.\n\nHere's the script and output.\n\n[code:3th52osv]result = ToInt(&quot;three&quot;)\nmsg (result)\n\n\nYou are in a room&#46;\nError running script&#058; Error evaluating expression 'ToInt(&quot;three&quot;)'&#58; Input string was not in a correct format&#46;\n[/code:3th52osv]\n\nthanks",
      "EditableFormat": "bbcode",
      "HTML": "Sorry, got GetInt and ToInt confused.<br/>ToInt still doesn't work.<br/><br/>Here's the script and output.<br/><br/><pre><code>result = ToInt(&quot;three&quot;)<br/>msg (result)<br/><br/><br/>You are in a room&#46;<br/>Error running script&#058; Error evaluating expression 'ToInt(&quot;three&quot;)'&#58; Input string was not in a correct format&#46;<br/></code></pre><br/><br/>thanks",
      "PostDate": "2013-06-27T00:46:12+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25173",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "This is how it's used:\n\n[code:3uhcp136]result = ToInt(&quot;3&quot;)\nmsg (result)[/code:3uhcp136]\n\nThe string must represent the numeric form of a number, but as a string. You would need to parse the string into a number form using language-specific rules if you wanted to handle things like &quot;three&quot;, &quot;twenty-five&quot; or &quot;one hundred.&quot;",
      "EditableFormat": "bbcode",
      "HTML": "This is how it's used:<br/><br/><pre><code>result = ToInt(&quot;3&quot;)<br/>msg (result)</code></pre><br/><br/>The string must represent the numeric form of a number, but as a string. You would need to parse the string into a number form using language-specific rules if you wanted to handle things like &quot;three&quot;, &quot;twenty-five&quot; or &quot;one hundred.&quot;",
      "PostDate": "2013-06-27T01:35:42+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "25175",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I wasn't sure myself if the &quot; ToInt &quot; could convert the textual string VALUE of &quot;three&quot; into the numerical &quot; 3 &quot;, so Jaynebonne already beat me to it.\n\nnow that I know myself, thanks to Jaynebonne's post, let me just echo what he said:\n\nunfortunately, the converting command functions (or whatever they're actually called, meh), such as the &quot; ToInt &quot;, only convert the TYPE of the attribute, NOT the abc~word characters VALUE itself (like &quot;three&quot;) of a string attribute into a numerical VALUE (like &quot;3&quot;).\n\nif (STRING type attribute = INTEGER type attribute) { script } -&gt; error, as a STRING is not an INTEGER\n\nif (STRING type attribute = STRING type attribute) { script } -&gt; no error\n\nif (INTEGER type attribute = INTEGER type attribute) { script } -&gt; no error\n\nif (ToInt (STRING type attribute = INTEGER type attribute)) { script  } -&gt; no error\nif (INTEGER type attribute = INTEGER type attribute) { script } -&gt; no error\n\nAn Attribute creation and its own attributes:\n\nName:\nType:\nValue:\n\nsome examples:\n\nName: strength\nType: int (integer)\nValue: 50\n\nName: attack\nType: script (making a verb; or a command though its not via an attribute creation)\nValue: (your direct script block or a call function to a function's script block, I don't want to write out a script block for attack)\n\nName: health_status\nType: string\nValue: wounded\n\nName: physical_damage\nType: double\nValue: 0.0\n\nName: dead\nType: boolean\nValue: false\n\n-------\n\nthe problem lies in~with the scripting, often when you use an attribute, the script (such as the &quot;if (object.attribute = ...) &quot; returns it as a string type, while on the other side of the equals is an integer type or return integer type, so often you need to add the &quot; ToInt &quot; to get the left side of the equals into an INTEGER type too.\n\nalso, the problem lies in that:\n\nthe character value of a numeric, such as &quot;0&quot; or &quot;100&quot;, (is ~ can be) both a string and an integer, so quest needs to know whether, that &quot;5&quot; VALUE is the STRING TYPE or the INTEGER TYPE, as it needs to know this, as that's how its logic works, by comparing an attribute type to another attribute type, if they're not the same type such as when they're suppose to be, like in the case with an equal sign, then quest is unable to do it, displaying an error, as to its logic, STRING (&quot;Y&quot;) TYPE NOT EQUAL TO INT (&quot;X&quot;) TYPE, when you specified for it that it needs to be &quot;X&quot; TYPE = &quot;X&quot; TYPE or &quot;Y&quot; TYPE = &quot;Y&quot; TYPE.\n\nquest's engine's logic basically works like this:\n\nyour scripting: \n\n[code:1wnz8qsb]if (object_1&#46;attribute = object_2&#46;attribute) {\n  do_this_script_1\n} else {\n  do_this_script_2\n}[/code:1wnz8qsb]\n\nquest then checks your scripting like this (it automatically does the additional check of the attributes' TYPES for you):\n\n[code:1wnz8qsb]if (object_1&#46;attribute&#46;type = X and object_2&#46;attribute&#46;type = X) {\n  if (object_2&#46;attribute&#46;value = Y and object_2&#46;attribute&#46;value = Y) {\n    (then, do_this_script_1)\n  } else {\n    (then, do_this_script_2)\n  }\n} else {\n  ERROR, ~ &quot;quest doesn't recognize function&#58; expression type STRING_32 and expression type INT_32&quot;\n}[/code:1wnz8qsb]\n\nso, this is why you may have to manually add in the &quot;converters&quot; (such as ToInt), to your own script, to get quest to be able to pass its own automatic check of the TYPES of your attributes.\n\n----------------------------------\n\nAttributes\n\nName: strength\nType: string (sorry for doing this as my stupid example, as I don't know of nor can find an actual example of where you need to plug in the ToInt, grr)\nValue: 100\n\nName: endurance\nType: int\nValue: 100\n\nso, basically:\n\nif (HK.strength = 99) { HK.physical_damage=49.5 } -&gt; NO error, as quest can recognize the &quot; 100 &quot; as an INT type to make up with the &quot; strength &quot; INTEGER type's value (ie the characters: &quot;100&quot;)\n\nhowever, if you got:\n\nif (HK.strength = orc.endurance) { msg (&quot;HK does zero damage to the orc&quot;) } -&gt; error, as STRING TYPE is not equal to INTEGER TYPE (as can be seen, quest doesn't care that both of the VALUES are numerical)\n\nif (ToInt (HK.strength) = orc.endurance) { msg (&quot;HK does zero damage to the orc&quot;) } -&gt; no error",
      "EditableFormat": "bbcode",
      "HTML": "I wasn't sure myself if the &quot; ToInt &quot; could convert the textual string VALUE of &quot;three&quot; into the numerical &quot; 3 &quot;, so Jaynebonne already beat me to it.<br/><br/>now that I know myself, thanks to Jaynebonne's post, let me just echo what he said:<br/><br/>unfortunately, the converting command functions (or whatever they're actually called, meh), such as the &quot; ToInt &quot;, only convert the TYPE of the attribute, NOT the abc~word characters VALUE itself (like &quot;three&quot;) of a string attribute into a numerical VALUE (like &quot;3&quot;).<br/><br/>if (STRING type attribute = INTEGER type attribute) { script } -&gt; error, as a STRING is not an INTEGER<br/><br/>if (STRING type attribute = STRING type attribute) { script } -&gt; no error<br/><br/>if (INTEGER type attribute = INTEGER type attribute) { script } -&gt; no error<br/><br/>if (ToInt (STRING type attribute = INTEGER type attribute)) { script  } -&gt; no error<br/>if (INTEGER type attribute = INTEGER type attribute) { script } -&gt; no error<br/><br/>An Attribute creation and its own attributes:<br/><br/>Name:<br/>Type:<br/>Value:<br/><br/>some examples:<br/><br/>Name: strength<br/>Type: int (integer)<br/>Value: 50<br/><br/>Name: attack<br/>Type: script (making a verb; or a command though its not via an attribute creation)<br/>Value: (your direct script block or a call function to a function's script block, I don't want to write out a script block for attack)<br/><br/>Name: health_status<br/>Type: string<br/>Value: wounded<br/><br/>Name: physical_damage<br/>Type: double<br/>Value: 0.0<br/><br/>Name: dead<br/>Type: boolean<br/>Value: false<br/><br/>-------<br/><br/>the problem lies in~with the scripting, often when you use an attribute, the script (such as the &quot;if (object.attribute = ...) &quot; returns it as a string type, while on the other side of the equals is an integer type or return integer type, so often you need to add the &quot; ToInt &quot; to get the left side of the equals into an INTEGER type too.<br/><br/>also, the problem lies in that:<br/><br/>the character value of a numeric, such as &quot;0&quot; or &quot;100&quot;, (is ~ can be) both a string and an integer, so quest needs to know whether, that &quot;5&quot; VALUE is the STRING TYPE or the INTEGER TYPE, as it needs to know this, as that's how its logic works, by comparing an attribute type to another attribute type, if they're not the same type such as when they're suppose to be, like in the case with an equal sign, then quest is unable to do it, displaying an error, as to its logic, STRING (&quot;Y&quot;) TYPE NOT EQUAL TO INT (&quot;X&quot;) TYPE, when you specified for it that it needs to be &quot;X&quot; TYPE = &quot;X&quot; TYPE or &quot;Y&quot; TYPE = &quot;Y&quot; TYPE.<br/><br/>quest's engine's logic basically works like this:<br/><br/>your scripting: <br/><br/><pre><code>if (object_1&#46;attribute = object_2&#46;attribute) {<br/>  do_this_script_1<br/>} else {<br/>  do_this_script_2<br/>}</code></pre><br/><br/>quest then checks your scripting like this (it automatically does the additional check of the attributes' TYPES for you):<br/><br/><pre><code>if (object_1&#46;attribute&#46;type = X and object_2&#46;attribute&#46;type = X) {<br/>  if (object_2&#46;attribute&#46;value = Y and object_2&#46;attribute&#46;value = Y) {<br/>    (then, do_this_script_1)<br/>  } else {<br/>    (then, do_this_script_2)<br/>  }<br/>} else {<br/>  ERROR, ~ &quot;quest doesn't recognize function&#58; expression type STRING_32 and expression type INT_32&quot;<br/>}</code></pre><br/><br/>so, this is why you may have to manually add in the &quot;converters&quot; (such as ToInt), to your own script, to get quest to be able to pass its own automatic check of the TYPES of your attributes.<br/><br/>----------------------------------<br/><br/>Attributes<br/><br/>Name: strength<br/>Type: string (sorry for doing this as my stupid example, as I don't know of nor can find an actual example of where you need to plug in the ToInt, grr)<br/>Value: 100<br/><br/>Name: endurance<br/>Type: int<br/>Value: 100<br/><br/>so, basically:<br/><br/>if (HK.strength = 99) { HK.physical_damage=49.5 } -&gt; NO error, as quest can recognize the &quot; 100 &quot; as an INT type to make up with the &quot; strength &quot; INTEGER type's value (ie the characters: &quot;100&quot;)<br/><br/>however, if you got:<br/><br/>if (HK.strength = orc.endurance) { msg (&quot;HK does zero damage to the orc&quot;) } -&gt; error, as STRING TYPE is not equal to INTEGER TYPE (as can be seen, quest doesn't care that both of the VALUES are numerical)<br/><br/>if (ToInt (HK.strength) = orc.endurance) { msg (&quot;HK does zero damage to the orc&quot;) } -&gt; no error",
      "PostDate": "2013-06-27T06:03:21+01:00",
      "LastEditDate": null
    }
  ]
}
