{
  "Topic": {
    "TopicId": "3986",
    "ForumId": "10",
    "Title": "Best Practices",
    "LastUpdated": "2013-11-01T06:27:03+00:00",
    "ReplyCount": 10
  },
  "Posts": [
    {
      "PostId": "26759",
      "UserId": 0,
      "Username": "tbritton",
      "UserAvatar": null,
      "UserGravatar": "aa3d953baab30b778c1351a982d82eb8",
      "EditableText": "I'm interested in the best practices in regards to performance when coding a game.  Here's a couple I've come across.\n\n1. Make items invisible rather than destroying them.\n2. Don't use GetBoolean\n\nAlso is there any advantage in using the text processor for simple if's rather than using a script (room description, for example)?   Is case/switch better than if/else?  Is firstime or just setting a flag more effecient.  Flags vs attributes?\n\nAny other input is appreciated.",
      "EditableFormat": "bbcode",
      "HTML": "I'm interested in the best practices in regards to performance when coding a game.  Here's a couple I've come across.<br/><br/>1. Make items invisible rather than destroying them.<br/>2. Don't use GetBoolean<br/><br/>Also is there any advantage in using the text processor for simple if's rather than using a script (room description, for example)?   Is case/switch better than if/else?  Is firstime or just setting a flag more effecient.  Flags vs attributes?<br/><br/>Any other input is appreciated.",
      "PostDate": "2013-10-29T18:20:37+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26762",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "So then have you seen a performance problem with GetBoolean?",
      "EditableFormat": "bbcode",
      "HTML": "So then have you seen a performance problem with GetBoolean?",
      "PostDate": "2013-10-30T00:57:00+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26763",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "I would say that creating a &quot;recycle bin&quot; style room and moving objects to it is better than making objects invisible, just because you're removing them from active game areas and making sure there's absolutely no chance they interfere with any functions.\n\nUsing boolean attributes is far superior to flags for two reasons:\nFirst is that it's easier to check for an attribute name if you forget what it is and need to reference it later on. Setting flags means you  have to comb the code searching for what you wrote, but with attributes you can just go to the tab and check.\nSecond is that it's much simpler to refer to when writing, e.g. if (object.attribute) is quick and easy as opposed to all the faffing with flags.\n\nFirstTime is more efficient than setting flags if the first instance will always happen.\n\nThere's no advantage in using the text processor for simple ifs, other than it looks a bit tidier on the screen, and is perhaps a bit quicker than lining up a bunch of print message (no line break) scripts.\n\nA switch is advantageous when you have a large number of else if statements. Especially if you use the GUI rather than code view. If you have 4 or more cases in total I would tend to go with a switch.\n\nHere's a couple I'd wish I'd known when starting.\nGive all objects a systematic name, use an alias to label them how you'd like to appear in the actual game.\nNever duplicate scripts. Either create a function or use the do or invoke scripts to reference the original. This way future editing becomes much, much simpler.",
      "EditableFormat": "bbcode",
      "HTML": "I would say that creating a &quot;recycle bin&quot; style room and moving objects to it is better than making objects invisible, just because you're removing them from active game areas and making sure there's absolutely no chance they interfere with any functions.<br/><br/>Using boolean attributes is far superior to flags for two reasons:<br/>First is that it's easier to check for an attribute name if you forget what it is and need to reference it later on. Setting flags means you  have to comb the code searching for what you wrote, but with attributes you can just go to the tab and check.<br/>Second is that it's much simpler to refer to when writing, e.g. if (object.attribute) is quick and easy as opposed to all the faffing with flags.<br/><br/>FirstTime is more efficient than setting flags if the first instance will always happen.<br/><br/>There's no advantage in using the text processor for simple ifs, other than it looks a bit tidier on the screen, and is perhaps a bit quicker than lining up a bunch of print message (no line break) scripts.<br/><br/>A switch is advantageous when you have a large number of else if statements. Especially if you use the GUI rather than code view. If you have 4 or more cases in total I would tend to go with a switch.<br/><br/>Here's a couple I'd wish I'd known when starting.<br/>Give all objects a systematic name, use an alias to label them how you'd like to appear in the actual game.<br/>Never duplicate scripts. Either create a function or use the do or invoke scripts to reference the original. This way future editing becomes much, much simpler.",
      "PostDate": "2013-10-30T01:45:21+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26765",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm not quite clear on what the difference is between flags and booleans. If you wouldn't mind explaining this difference to me, I'd be appreciate.\n\nTaking a guess, by &quot;flags&quot;, you mean using the &quot;=true~false&quot;, and by booleans, you use: GetBoolean(Object.Attribute ~ no Value is a shortened and understood by quest engine as meaning that it is &quot;=true&quot;) instead, is my guess even somewhat on the mark, or no?",
      "EditableFormat": "bbcode",
      "HTML": "I'm not quite clear on what the difference is between flags and booleans. If you wouldn't mind explaining this difference to me, I'd be appreciate.<br/><br/>Taking a guess, by &quot;flags&quot;, you mean using the &quot;=true~false&quot;, and by booleans, you use: GetBoolean(Object.Attribute ~ no Value is a shortened and understood by quest engine as meaning that it is &quot;=true&quot;) instead, is my guess even somewhat on the mark, or no?",
      "PostDate": "2013-10-30T02:39:06+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26768",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "They are essentially the same thing. A flag is a boolean attribute, the difference being that it is only &quot;created&quot; as far as the game is concerned when it is first mentioned in the code, whereas a boolean attribute is a permanent feature of the object.\n\nAs an example, I have objectA, I create a custom attribute called turnedon and set it to false. At some point in the game I write some script that sets it to true. It doesn't matter at what point in the game that happens, objectA.turnedon will always exist as a true or false statement, and I can reference it in other scripts in that way.\n\nA flag on the other hand does not exist from the start. At some point in the game I write a script that sets a flag called &quot;turnedon&quot; on objectA, but until that script runs the turnedon attribute doesn't exist, and if I try to reference it before it is set I will get an error. (I should point out this doesn't really happen in practice as you would use the &quot;if object has flag&quot; i.e. GetBoolean(objectA,&quot;turnedon&quot;) condition.) \n\nGetBoolean is what is used when there is a possibility of a non-boolean result (e.g. if a flag doesn't exist), thus it is the function used in conjunction with flags. It is unnecessary in cases where you have made a boolean attribute, as it always exists and is already true or false by definition. objectA.turnedon will evaluate as true or false without sticking the GetBoolean in front of it.\n\nThere are no real practical differences when the game is being played that I am aware of, it is more about your own convenience when writing. An attribute that exists permanently is both easier to check for if you forget what you called it, and it makes for neater looking and easier to read code when scanning through what you've written.\n\nI feel like I've rambled a bit and repeated myself without actually making anything any clearer, but hopefully this explains it.",
      "EditableFormat": "bbcode",
      "HTML": "They are essentially the same thing. A flag is a boolean attribute, the difference being that it is only &quot;created&quot; as far as the game is concerned when it is first mentioned in the code, whereas a boolean attribute is a permanent feature of the object.<br/><br/>As an example, I have objectA, I create a custom attribute called turnedon and set it to false. At some point in the game I write some script that sets it to true. It doesn't matter at what point in the game that happens, objectA.turnedon will always exist as a true or false statement, and I can reference it in other scripts in that way.<br/><br/>A flag on the other hand does not exist from the start. At some point in the game I write a script that sets a flag called &quot;turnedon&quot; on objectA, but until that script runs the turnedon attribute doesn't exist, and if I try to reference it before it is set I will get an error. (I should point out this doesn't really happen in practice as you would use the &quot;if object has flag&quot; i.e. GetBoolean(objectA,&quot;turnedon&quot;) condition.) <br/><br/>GetBoolean is what is used when there is a possibility of a non-boolean result (e.g. if a flag doesn't exist), thus it is the function used in conjunction with flags. It is unnecessary in cases where you have made a boolean attribute, as it always exists and is already true or false by definition. objectA.turnedon will evaluate as true or false without sticking the GetBoolean in front of it.<br/><br/>There are no real practical differences when the game is being played that I am aware of, it is more about your own convenience when writing. An attribute that exists permanently is both easier to check for if you forget what you called it, and it makes for neater looking and easier to read code when scanning through what you've written.<br/><br/>I feel like I've rambled a bit and repeated myself without actually making anything any clearer, but hopefully this explains it.",
      "PostDate": "2013-10-30T05:56:24+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26770",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "I'm still not quite clear... my apologies\n\nare &quot;flags&quot; created in scripts? ... off-hand I don't remember there being a &quot;CreateAttribute&quot;, only a &quot;CreateObject&quot; (my memory is bad, there's neither in label, only the &quot;create&quot; label, though it does seem to Create an Object, at least):\n\n<!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Create\">http://quest5.net/wiki/Create</a><!-- m -->\n\n------\n\nhow do you create an attribute (Object.Attribute ~ permanent-global attribute) within a script? Don't you have to have the actual Attribute existing (attached to some Object) ???\n\ndoes the Set ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Set\">http://quest5.net/wiki/Set</a><!-- m --> ), SetObjectFlagOn ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/SetObjectFlagOn\">http://quest5.net/wiki/SetObjectFlagOn</a><!-- m --> ), SetObjectFlagOff ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/SetObjectFlagOff\">http://quest5.net/wiki/SetObjectFlagOff</a><!-- m --> ), and~or Setting Variables ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Setting_variables\">http://quest5.net/wiki/Setting_variables</a><!-- m --> ), create (it'll actually exist ~ once the script is run, of course) an Attribute on an Object?\n\n------\n\nyou're not talking about &quot;Variables&quot;, right?:\n\n&lt;fight type=&quot;script&quot;&gt;\n-&gt; you_go_first=false // Variable? = no attachment to an Object, only exists locally ?~ for this script and it's parameter-nested scripts ?\n-&gt; if (player.speed &gt; orc.speed) {\n-&gt;-&gt; you_go_first=true\n-&gt; }\n-&gt; if (you_go_first=true) {\n-&gt;-&gt; msg (&quot;you attack the orc&quot;)\n-&gt;-&gt; orc.hp = orc.hp - player.damage\n-&gt; } else {\n-&gt;-&gt; msg (&quot;the orc attacks you&quot;)\n-&gt;-&gt; player.hp = player.hp - orc.damage\n-&gt; }\n&lt;/fight&gt;",
      "EditableFormat": "bbcode",
      "HTML": "I'm still not quite clear... my apologies<br/><br/>are &quot;flags&quot; created in scripts? ... off-hand I don't remember there being a &quot;CreateAttribute&quot;, only a &quot;CreateObject&quot; (my memory is bad, there's neither in label, only the &quot;create&quot; label, though it does seem to Create an Object, at least):<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Create\">http://quest5.net/wiki/Create</a><!-- m --><br/><br/>------<br/><br/>how do you create an attribute (Object.Attribute ~ permanent-global attribute) within a script? Don't you have to have the actual Attribute existing (attached to some Object) ???<br/><br/>does the Set ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Set\">http://quest5.net/wiki/Set</a><!-- m --> ), SetObjectFlagOn ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/SetObjectFlagOn\">http://quest5.net/wiki/SetObjectFlagOn</a><!-- m --> ), SetObjectFlagOff ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/SetObjectFlagOff\">http://quest5.net/wiki/SetObjectFlagOff</a><!-- m --> ), and~or Setting Variables ( <!-- m --><a class=\"postlink\" href=\"http://quest5.net/wiki/Setting_variables\">http://quest5.net/wiki/Setting_variables</a><!-- m --> ), create (it'll actually exist ~ once the script is run, of course) an Attribute on an Object?<br/><br/>------<br/><br/>you're not talking about &quot;Variables&quot;, right?:<br/><br/>&lt;fight type=&quot;script&quot;&gt;<br/>-&gt; you_go_first=false // Variable? = no attachment to an Object, only exists locally ?~ for this script and it's parameter-nested scripts ?<br/>-&gt; if (player.speed &gt; orc.speed) {<br/>-&gt;-&gt; you_go_first=true<br/>-&gt; }<br/>-&gt; if (you_go_first=true) {<br/>-&gt;-&gt; msg (&quot;you attack the orc&quot;)<br/>-&gt;-&gt; orc.hp = orc.hp - player.damage<br/>-&gt; } else {<br/>-&gt;-&gt; msg (&quot;the orc attacks you&quot;)<br/>-&gt;-&gt; player.hp = player.hp - orc.damage<br/>-&gt; }<br/>&lt;/fight&gt;",
      "PostDate": "2013-10-30T06:33:50+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26773",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "My take on this:\n\nFirst, I would *not* create a distinction between &quot;boolean&quot; and &quot;flag&quot;. It's confusing enough that Quest uses two names for the same thing (I can guess why it evolved that way, but it's unfortunate). Adding a semantic distinction between two things that are actually the same is only going to confuse things even further.\n\nSo, &quot;flag&quot; equals &quot;boolean attribute&quot;, exactly. No difference. The APIs use the word &quot;flag&quot; to be more non-techie friendly, but that's all it is, a difference in a term. There is no semantic difference, and (in my opinion) it's dangerous and confusing to assign one.\n\nOk, terminology out of the way... what are we really talking about here? Basically: do I pre-define my attributes (of any kind) or not? And the answer, as with all things, is &quot;it depends&quot;.\n\nI think for the purposes that most people use attributes for, it's better to define them up front. They are part of the &quot;static type&quot; of the object (to the extent that Quest has that). There is also a *big* gain, which is that using functions like GetBoolean, GetInt, etc. opens you up to untold grief with typos. If I get the name of an attribute wrong when I reference it directly, Quest will tell me right away. If I get the name wrong in &quot;GetBoolean&quot; without realizing it, then I'm probably going to lose a good chunk of my hair trying to figure out why things aren't working, and I'll really hate myself when I figure out why.\n\nSo I would say: only use “on-the-fly” attributes when it makes sense to from a design point of view.\n\n(An aside: Performance? I'd be really interested to see the code where GetBoolean over direct access makes a noticeable difference in the performance of some code. (And please, don't contrive one: I know it's possible. I'm just saying, it's of such minor concern, that I wouldn't even go there.) Per Knuth: &quot;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of *noncritical* parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.&quot; Or more to the point: only optimize after measuring. If you have a problem, then optimize. Otherwise, don't worry about it. Even something like &quot;first time&quot; vs setting and checking flags - we're probably talking about milliseconds difference here. Focus on what makes sense to you from a code style point of view, leave efficiency for those rare times where it actually makes a difference, and be at peace. <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) --> )\n\nTo go the other way, when does it make sense to not pre-define attributes, to define them “on-the-fly”? That is a design question, and as such, there are no hard-and-fast rules. Given the above problem with the Get* APIs regarding typos, I'd say you'd want to have good reason to not. But there are good reasons.\n\nAs an example: in my “response library”, I use a good number of on-the-fly attributes within the response objects. And the reason why is that I'm trying to make the code easier for people to use. There could potentially be so many response objects that I wanted to keep them as simple as possible, with a minimal footprint. All those attributes I'd be using were *internal bookkeeping* for the object, not a part of the fundamental definition of a response object. I wanted people to focus on defining the parts of the objects that needed it, not worry about adding in all the internal attributes the library needed. (That can be overcome with a type, to inject the attributes into the object, but I didn't even want to clutter up an object with that. I wanted the objects to be purely data.)\n\nSo I can think of several reasons to define attributes as needed:\n1) They are not a fundamental part of the object but are used only in special case situations.\n2) They correspond to “hidden” internal state which is best kept private. If I had said to those using my response objects, “You need to define these attributes in your objects” and then with a later rev, I found I needed more and said, “Now you have to go to each of your hundreds of objects and all these additional ones in, not for your use but for mine”, then people would have found out where I lived and hunted me down.\n3) You are operating on a heterogeneous set of objects with no common base type. Quest is similar to JavaScript in that it supports “duck typing” (“if it walks like a duck and talks like a duck...”) where objects don't really have types but are measured by the attributes they possess. On-the-fly attributes allow you to &quot;make ducks&quot; dynamically. Let's say I want to create some code to operate across all Quest objects, regardless of what they are (room, player, apple, sword). It would be very inconvenient to a user of my code if I said, “For every object you pass to this function, you need to make sure these attributes are defined.” It's just too cumbersome, and it exposes users of my code to the internal workings. It's much more preferable to simply create the attributes on-the-fly as needed. It allows the code to inject its own personal state into the object without the user of the code needing to be aware of what is being done. It allows for encapsulation and data hiding, both good things in object-oriented design.\n4) It could also be stylistic. I can imagine some wanting minimal objects, with attributes appearing only as needed. Why take up a slot for an attribute that's not needed? That really comes down to design and style. (But given the grief you can have with the Get* methods and typos, you'd have to really be dedicated to that approach.)\n\nI hope I didn't waffle on too much. The short version is: you generally want to pre-define your attributes, of all kinds. It makes for a saner world in the common cases. And there is good company for that: there are languages like C, C++, Pascal, Ada, etc where you *must* define attributes in the static definition of an object. \n\nBut there are also really valid cases where you want to define attributes on-the-fly. As with many things, it all comes down to design.\n\n(A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)",
      "EditableFormat": "bbcode",
      "HTML": "My take on this:<br/><br/>First, I would *not* create a distinction between &quot;boolean&quot; and &quot;flag&quot;. It's confusing enough that Quest uses two names for the same thing (I can guess why it evolved that way, but it's unfortunate). Adding a semantic distinction between two things that are actually the same is only going to confuse things even further.<br/><br/>So, &quot;flag&quot; equals &quot;boolean attribute&quot;, exactly. No difference. The APIs use the word &quot;flag&quot; to be more non-techie friendly, but that's all it is, a difference in a term. There is no semantic difference, and (in my opinion) it's dangerous and confusing to assign one.<br/><br/>Ok, terminology out of the way... what are we really talking about here? Basically: do I pre-define my attributes (of any kind) or not? And the answer, as with all things, is &quot;it depends&quot;.<br/><br/>I think for the purposes that most people use attributes for, it's better to define them up front. They are part of the &quot;static type&quot; of the object (to the extent that Quest has that). There is also a *big* gain, which is that using functions like GetBoolean, GetInt, etc. opens you up to untold grief with typos. If I get the name of an attribute wrong when I reference it directly, Quest will tell me right away. If I get the name wrong in &quot;GetBoolean&quot; without realizing it, then I'm probably going to lose a good chunk of my hair trying to figure out why things aren't working, and I'll really hate myself when I figure out why.<br/><br/>So I would say: only use “on-the-fly” attributes when it makes sense to from a design point of view.<br/><br/>(An aside: Performance? I'd be really interested to see the code where GetBoolean over direct access makes a noticeable difference in the performance of some code. (And please, don't contrive one: I know it's possible. I'm just saying, it's of such minor concern, that I wouldn't even go there.) Per Knuth: &quot;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of *noncritical* parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.&quot; Or more to the point: only optimize after measuring. If you have a problem, then optimize. Otherwise, don't worry about it. Even something like &quot;first time&quot; vs setting and checking flags - we're probably talking about milliseconds difference here. Focus on what makes sense to you from a code style point of view, leave efficiency for those rare times where it actually makes a difference, and be at peace. <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) --> )<br/><br/>To go the other way, when does it make sense to not pre-define attributes, to define them “on-the-fly”? That is a design question, and as such, there are no hard-and-fast rules. Given the above problem with the Get* APIs regarding typos, I'd say you'd want to have good reason to not. But there are good reasons.<br/><br/>As an example: in my “response library”, I use a good number of on-the-fly attributes within the response objects. And the reason why is that I'm trying to make the code easier for people to use. There could potentially be so many response objects that I wanted to keep them as simple as possible, with a minimal footprint. All those attributes I'd be using were *internal bookkeeping* for the object, not a part of the fundamental definition of a response object. I wanted people to focus on defining the parts of the objects that needed it, not worry about adding in all the internal attributes the library needed. (That can be overcome with a type, to inject the attributes into the object, but I didn't even want to clutter up an object with that. I wanted the objects to be purely data.)<br/><br/>So I can think of several reasons to define attributes as needed:<br/>1) They are not a fundamental part of the object but are used only in special case situations.<br/>2) They correspond to “hidden” internal state which is best kept private. If I had said to those using my response objects, “You need to define these attributes in your objects” and then with a later rev, I found I needed more and said, “Now you have to go to each of your hundreds of objects and all these additional ones in, not for your use but for mine”, then people would have found out where I lived and hunted me down.<br/>3) You are operating on a heterogeneous set of objects with no common base type. Quest is similar to JavaScript in that it supports “duck typing” (“if it walks like a duck and talks like a duck...”) where objects don't really have types but are measured by the attributes they possess. On-the-fly attributes allow you to &quot;make ducks&quot; dynamically. Let's say I want to create some code to operate across all Quest objects, regardless of what they are (room, player, apple, sword). It would be very inconvenient to a user of my code if I said, “For every object you pass to this function, you need to make sure these attributes are defined.” It's just too cumbersome, and it exposes users of my code to the internal workings. It's much more preferable to simply create the attributes on-the-fly as needed. It allows the code to inject its own personal state into the object without the user of the code needing to be aware of what is being done. It allows for encapsulation and data hiding, both good things in object-oriented design.<br/>4) It could also be stylistic. I can imagine some wanting minimal objects, with attributes appearing only as needed. Why take up a slot for an attribute that's not needed? That really comes down to design and style. (But given the grief you can have with the Get* methods and typos, you'd have to really be dedicated to that approach.)<br/><br/>I hope I didn't waffle on too much. The short version is: you generally want to pre-define your attributes, of all kinds. It makes for a saner world in the common cases. And there is good company for that: there are languages like C, C++, Pascal, Ada, etc where you *must* define attributes in the static definition of an object. <br/><br/>But there are also really valid cases where you want to define attributes on-the-fly. As with many things, it all comes down to design.<br/><br/>(A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)",
      "PostDate": "2013-10-30T09:56:01+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26776",
      "UserId": 0,
      "Username": "Alex",
      "UserAvatar": null,
      "UserGravatar": "188b72c5e13327f4fde3989dca7d7d53",
      "EditableText": "[quote=&quot;jaynabonne&quot;:sjqpb3rl](A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)[/quote:sjqpb3rl]\n\nYou could define your own GetIntOrDefault, GetStringOrDefault functions easily enough (and I'll happily accept a pull request for these if you think they should be part of Core).",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>(A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)</blockquote><br/><br/>You could define your own GetIntOrDefault, GetStringOrDefault functions easily enough (and I'll happily accept a pull request for these if you think they should be part of Core).",
      "PostDate": "2013-10-30T17:39:30+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26777",
      "UserId": 0,
      "Username": "tbritton",
      "UserAvatar": null,
      "UserGravatar": "aa3d953baab30b778c1351a982d82eb8",
      "EditableText": "Thanks for the input guys, that helped clarify things a lot.",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for the input guys, that helped clarify things a lot.",
      "PostDate": "2013-10-30T17:46:55+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26778",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "[quote=&quot;Alex&quot;:34h5ym8d][quote=&quot;jaynabonne&quot;:34h5ym8d](A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)[/quote:34h5ym8d]\n\nYou could define your own GetIntOrDefault, GetStringOrDefault functions easily enough (and I'll happily accept a pull request for these if you think they should be part of Core).[/quote:34h5ym8d]\n\nSounds like a good idea. I'll think about that. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (As they say, put my money where my mouth is...)",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>Alex wrote:</cite><blockquote><p><b>&quot;jaynabonne&quot;</b></p><p>(A minor note: GetBoolean returns false if the attribute doesn't exist, not null. I wish the other “Get” functions also returned reasonable defaults instead of null. It would make life so much easier.)</blockquote><br/><br/>You could define your own GetIntOrDefault, GetStringOrDefault functions easily enough (and I'll happily accept a pull request for these if you think they should be part of Core).</p></blockquote><br/><br/>Sounds like a good idea. I'll think about that. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) --> (As they say, put my money where my mouth is...)",
      "PostDate": "2013-10-30T18:53:07+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "26787",
      "UserId": 0,
      "Username": "Liam315",
      "UserAvatar": null,
      "UserGravatar": "ded290a24d340d761d42c897d08111aa",
      "EditableText": "[quote=&quot;jaynabonne&quot;:vkumnk5e]A minor note: GetBoolean returns false if the attribute doesn't exist, not null.[/quote:vkumnk5e]\n\nThanks for that, reading back I realised what I wrote wasn't very clear, I've corrected that point in my post. Although for anyone else reading, Jay's summary is on the money and it's well worth your time reading through and making sure you understand the distinctions.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>jaynabonne wrote:</cite>A minor note: GetBoolean returns false if the attribute doesn't exist, not null.</blockquote><br/><br/>Thanks for that, reading back I realised what I wrote wasn't very clear, I've corrected that point in my post. Although for anyone else reading, Jay's summary is on the money and it's well worth your time reading through and making sure you understand the distinctions.",
      "PostDate": "2013-11-01T06:27:03+00:00",
      "LastEditDate": null
    }
  ]
}
