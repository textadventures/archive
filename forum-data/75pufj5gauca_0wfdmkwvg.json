{
  "Topic": {
    "TopicId": "75pufj5gauca_0wfdmkwvg",
    "ForumId": "10",
    "Title": "Player selects number for player attribute",
    "LastUpdated": "2018-03-21T10:13:16.3998704Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "df8b7150-85c0-4fbc-809b-992145996464",
      "UserId": 262169,
      "Username": "Laraqua",
      "AvatarUrl": "https://secure.gravatar.com/avatar/62e7b4391dc6f205a4820699c027a564?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd like to allow players to select the number of shooters and melee fighters they have in their party.  At this stage something really simple like Add Shooter / Add Melee is fine as a command.  However, both of those two options affect their attack, defence, damage scores differently.  How can I make it so that instead of setting the variable player.defence to a set amount, it will increase by a certain amount depending on how many shooters or melee folks are picked?\r\n\r\nIn other words, if melee adds plus 1 defence and plus 1 damage, while firearms adds plus 1 to player.attack and plus 1 to player.damage, how do I write a Command that will stack these player.defence and player.damage rather than just setting the variable to a specific and static amount?",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd like to allow players to select the number of shooters and melee fighters they have in their party.  At this stage something really simple like Add Shooter / Add Melee is fine as a command.  However, both of those two options affect their attack, defence, damage scores differently.  How can I make it so that instead of setting the variable player.defence to a set amount, it will increase by a certain amount depending on how many shooters or melee folks are picked?</p>\n<p>In other words, if melee adds plus 1 defence and plus 1 damage, while firearms adds plus 1 to player.attack and plus 1 to player.damage, how do I write a Command that will stack these player.defence and player.damage rather than just setting the variable to a specific and static amount?</p>\n\n",
      "PostDate": "2018-03-21T10:13:16.3998704Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "72e00d01-50bc-4c09-bfd0-089942069b5f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "in programming (unlike in math), there's the 'Assignment' operator/operation:\r\n\r\nVARIABLE = VALUE_OR_EXPRESSION // NO error\r\n\r\nthe 'VALUE_OR_EXPRESSION' ON THE RIGHT SIDE OF THE ASSIGNMENT OPERATOR is STORED in the 'VARIABLE' ON THE LEFT SIDE OF THE ASSIGNMENT OPERATOR\r\n\r\nVALUE_OR_EXPRESSION = VARIABLE // ERROR!\r\n\r\nwhereas, in math, you're actually using a comparison operation/operator ('equal to'), which unfortunately, often is not taught/explained to you in math classes, lol:\r\n\r\nis the LEFT SIDE OF THE EQUAL-TO OPERATOR and the RIGHT SIDE OF THE EQUAL-TO OPERATOR, the same?\r\n\r\n// is: n = 2?\r\n// (NO error):\r\n5n = 10\r\n5 * (2) = 10\r\n10 = 10\r\n// yes, both sides are the same, so yes, n=2\r\n\r\n// is: n = 2?\r\n// (NO error):\r\n10 = 5n\r\n10 = 5 * (2)\r\n10 = 10\r\n// yes, both sides are the same, so yes, n=2\r\n\r\n------------\r\n\r\nso, to just directly 'set' a Value for a VARIABLE:\r\n\r\nplayer.strength = 0 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '0'\r\nplayer.strength = 100 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '100'\r\nplayer.strength = 50 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '50'\r\nplayer.strength = 77 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '77'\r\nplayer.strength = 22 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '22'\r\n\r\nto do arithmetic (increase-increment/decrease-decrement):\r\n\r\nplayer.strength = 0 // our initially 'set' value, for this example\r\n\r\nAddition: +\r\n\r\n// how it conceptually is working:\r\n// old value: player.strength = 0\r\n\r\nplayer.strength = player.strength + 5\r\n\r\n// how it conceptually is working:\r\n// player.strength (new) = player.strength (old: 0) + 5\r\n// player.strength (new) = (0) + 5\r\n// player.strength (new) = 5\r\n\r\n// new value: player.strength = 5\r\n\r\n// old value: player.strength = 5\r\n\r\nplayer.strength = player.strength + 5\r\n\r\n// how it conceptually is working:\r\n// player.strength (new) = player.strength (old: 5) + 5\r\n// player.strength (new) = (5) + 5\r\n// player.strength (new) = 10\r\n\r\n// new value: player.strength = 10\r\n\r\n// old value: player.strength = 10\r\n\r\nplayer.strength = player.strength + 5\r\n\r\n// how it conceptually is working:\r\n// player.strength (new) = player.strength (old: 10) + 5\r\n// player.strength (new) = (10) + 5\r\n// player.strength (new) = 15\r\n\r\n// new value: player.strength = 15\r\n\r\netc etc etc\r\n\r\n---------\r\n\r\nAddition: +\r\nSubtraction: -\r\nMultiplication: *\r\nDivision: /\r\n\r\nModulus (Division, but instead, it finds/gets/returns the REMAINDER): %\r\n\r\n(programming has to do the integer calculations and decimal calculations separately, and then concatenate them back together, along with the dot/period in the correct location, using normalized scientific notation works best for it)\r\n\r\n--------\r\n\r\nnow, the 'EXPRESSION' part (remember: the 'VALUE_OR_EXPRESSION' **HAS TO BE** on the right side of the Assignment operator) works exactly like a math equation (order of operations, inner then outer, etc etc etc):\r\n\r\nplayer.strength = player.strength + 5 // NO error\r\nplayer.strength = 5 + player.strength // NO error\r\n\r\ncreate (\"katana\")\r\nkatana.damage = 50\r\nplayer.weapon = katana\r\nplayer.strength = 50\r\n\r\nplayer.damage = player.weapon.damage + player.weapon.damage * player.strength / 100\r\n// the multiplication and division is done before the addition, just like in math, so...\r\n// player.damage = 50 + 50 * 50 / 100\r\n// player.damage = 50 + 50 * 1/2\r\n// player.damage = 50 + 25\r\n// player.damage = 75\r\n\r\nplayer.damage = (player.weapon.damage + player.weapon.damage) * player.strength / 100\r\n// now, the addition is done first, as the parenthesis (inner) takes priority over the outer (non-parenthesis), just like in math, so...\r\n// player.damage = (50 + 50) * 50 / 100\r\n// player.damage = 100 * 50 / 100\r\n// player.damage = 100 * 1/2\r\n// player.damage = 50\r\n\r\n---------\r\n\r\nin quest's programming, the Assignment operator and the 'comparison (equal to)' operator are both: =\r\n\r\nthe difference is how/where the Expression is used:\r\n\r\nplayer.strength = 100 // Assignment\r\n\r\nplayer.strength = GetRandomInt (0,100) // Assignment again\r\nif (player.strength = 100) { /* scripting */ } // Comparison (equal to)\r\n\r\n// and within whatever other Scripts'/Functions' that are able to evaluate the expression/condition within its parenthesis\r\n\r\n-------\r\n\r\nP.S.\r\n\r\nwithin the 'GUI/Editor' the script options (increase/decrease object counter, or something like this) only do '+1' and '-1', so to do a different Value and/or different arithmetic operation, you need to choose the 'EXPRESSION' script option, which let's you type in the expression yourself:\r\n\r\nan example (using 'x3'):\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable player.strength = [EXPRESSION] 1 // I don't know what the normal [XXX] is for it off hand (so, I'm just using the '{EXPRESSION]' again)... I don't use the GUI/Editor much... Anyways, this is setting it's initial value of '1', as if we used '0', the value would never be increased as this example is using multiplication (anything x 0 = 0), lol\r\n\r\nrun as script -> add new script -> 'variables' section/category -> 'set a variable or attribute' Script -> (see below)\r\n\r\nset variable player.strength = [EXPRESSION] player.strength * 3",
      "EditableFormat": "markdown",
      "HTML": "<p>in programming (unlike in math), there's the 'Assignment' operator/operation:</p>\n<p>VARIABLE = VALUE_OR_EXPRESSION // NO error</p>\n<p>the 'VALUE_OR_EXPRESSION' ON THE RIGHT SIDE OF THE ASSIGNMENT OPERATOR is STORED in the 'VARIABLE' ON THE LEFT SIDE OF THE ASSIGNMENT OPERATOR</p>\n<p>VALUE_OR_EXPRESSION = VARIABLE // ERROR!</p>\n<p>whereas, in math, you're actually using a comparison operation/operator ('equal to'), which unfortunately, often is not taught/explained to you in math classes, lol:</p>\n<p>is the LEFT SIDE OF THE EQUAL-TO OPERATOR and the RIGHT SIDE OF THE EQUAL-TO OPERATOR, the same?</p>\n<p>// is: n = 2?<br>\n// (NO error):<br>\n5n = 10<br>\n5 * (2) = 10<br>\n10 = 10<br>\n// yes, both sides are the same, so yes, n=2</p>\n<p>// is: n = 2?<br>\n// (NO error):<br>\n10 = 5n<br>\n10 = 5 * (2)<br>\n10 = 10<br>\n// yes, both sides are the same, so yes, n=2</p>\n<hr>\n<p>so, to just directly 'set' a Value for a VARIABLE:</p>\n<p>player.strength = 0 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '0'<br>\nplayer.strength = 100 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '100'<br>\nplayer.strength = 50 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '50'<br>\nplayer.strength = 77 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '77'<br>\nplayer.strength = 22 // the 'player' Object's 'strength' Integer Attribute's 'Value' is now '22'</p>\n<p>to do arithmetic (increase-increment/decrease-decrement):</p>\n<p>player.strength = 0 // our initially 'set' value, for this example</p>\n<p>Addition: +</p>\n<p>// how it conceptually is working:<br>\n// old value: player.strength = 0</p>\n<p>player.strength = player.strength + 5</p>\n<p>// how it conceptually is working:<br>\n// player.strength (new) = player.strength (old: 0) + 5<br>\n// player.strength (new) = (0) + 5<br>\n// player.strength (new) = 5</p>\n<p>// new value: player.strength = 5</p>\n<p>// old value: player.strength = 5</p>\n<p>player.strength = player.strength + 5</p>\n<p>// how it conceptually is working:<br>\n// player.strength (new) = player.strength (old: 5) + 5<br>\n// player.strength (new) = (5) + 5<br>\n// player.strength (new) = 10</p>\n<p>// new value: player.strength = 10</p>\n<p>// old value: player.strength = 10</p>\n<p>player.strength = player.strength + 5</p>\n<p>// how it conceptually is working:<br>\n// player.strength (new) = player.strength (old: 10) + 5<br>\n// player.strength (new) = (10) + 5<br>\n// player.strength (new) = 15</p>\n<p>// new value: player.strength = 15</p>\n<p>etc etc etc</p>\n<hr>\n<p>Addition: +<br>\nSubtraction: -<br>\nMultiplication: *<br>\nDivision: /</p>\n<p>Modulus (Division, but instead, it finds/gets/returns the REMAINDER): %</p>\n<p>(programming has to do the integer calculations and decimal calculations separately, and then concatenate them back together, along with the dot/period in the correct location, using normalized scientific notation works best for it)</p>\n<hr>\n<p>now, the 'EXPRESSION' part (remember: the 'VALUE_OR_EXPRESSION' <strong>HAS TO BE</strong> on the right side of the Assignment operator) works exactly like a math equation (order of operations, inner then outer, etc etc etc):</p>\n<p>player.strength = player.strength + 5 // NO error<br>\nplayer.strength = 5 + player.strength // NO error</p>\n<p>create (\"katana\")<br>\nkatana.damage = 50<br>\nplayer.weapon = katana<br>\nplayer.strength = 50</p>\n<p>player.damage = player.weapon.damage + player.weapon.damage * player.strength / 100<br>\n// the multiplication and division is done before the addition, just like in math, so...<br>\n// player.damage = 50 + 50 * 50 / 100<br>\n// player.damage = 50 + 50 * 1/2<br>\n// player.damage = 50 + 25<br>\n// player.damage = 75</p>\n<p>player.damage = (player.weapon.damage + player.weapon.damage) * player.strength / 100<br>\n// now, the addition is done first, as the parenthesis (inner) takes priority over the outer (non-parenthesis), just like in math, so...<br>\n// player.damage = (50 + 50) * 50 / 100<br>\n// player.damage = 100 * 50 / 100<br>\n// player.damage = 100 * 1/2<br>\n// player.damage = 50</p>\n<hr>\n<p>in quest's programming, the Assignment operator and the 'comparison (equal to)' operator are both: =</p>\n<p>the difference is how/where the Expression is used:</p>\n<p>player.strength = 100 // Assignment</p>\n<p>player.strength = GetRandomInt (0,100) // Assignment again<br>\nif (player.strength = 100) { /* scripting */ } // Comparison (equal to)</p>\n<p>// and within whatever other Scripts'/Functions' that are able to evaluate the expression/condition within its parenthesis</p>\n<hr>\n<p>P.S.</p>\n<p>within the 'GUI/Editor' the script options (increase/decrease object counter, or something like this) only do '+1' and '-1', so to do a different Value and/or different arithmetic operation, you need to choose the 'EXPRESSION' script option, which let's you type in the expression yourself:</p>\n<p>an example (using 'x3'):</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable player.strength = [EXPRESSION] 1 // I don't know what the normal [XXX] is for it off hand (so, I'm just using the '{EXPRESSION]' again)... I don't use the GUI/Editor much... Anyways, this is setting it's initial value of '1', as if we used '0', the value would never be increased as this example is using multiplication (anything x 0 = 0), lol</p>\n<p>run as script -&gt; add new script -&gt; 'variables' section/category -&gt; 'set a variable or attribute' Script -&gt; (see below)</p>\n<p>set variable player.strength = [EXPRESSION] player.strength * 3</p>\n\n",
      "PostDate": "2018-03-21T11:13:56.3605566Z",
      "LastEditDate": "2018-03-21T11:26:57.0956145Z",
      "link": null
    },
    {
      "PostId": "922fc8e0-1ce1-43d0-afa8-08668082851d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "here's a more detailed guide:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk\r\n\r\n(scroll down about half-way to 'THE TWO SUPER SCRIPTS' sections to get to Attribute and the 'if' Script usage, where I explain how to do arithmetic operations, and at the near the bottom of how to do transactions: buying/selling)",
      "EditableFormat": "markdown",
      "HTML": "<p>here's a more detailed guide:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5559/attributes-and-if-script-guide-by-hk</p>\n<p>(scroll down about half-way to 'THE TWO SUPER SCRIPTS' sections to get to Attribute and the 'if' Script usage, where I explain how to do arithmetic operations, and at the near the bottom of how to do transactions: buying/selling)</p>\n\n",
      "PostDate": "2018-03-21T11:33:06.3218854Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7114fed5-6039-48bd-8b15-922dbae5f817",
      "UserId": 262169,
      "Username": "Laraqua",
      "AvatarUrl": "https://secure.gravatar.com/avatar/62e7b4391dc6f205a4820699c027a564?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks!</p>\n\n",
      "PostDate": "2018-03-23T01:22:40.5752769Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
