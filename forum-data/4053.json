{
  "Topic": {
    "TopicId": "4053",
    "ForumId": "10",
    "Title": "List of default commands",
    "LastUpdated": "2014-12-04T13:39:10+00:00",
    "ReplyCount": 5
  },
  "Posts": [
    {
      "PostId": "27123",
      "UserId": 0,
      "Username": "Avantar",
      "UserAvatar": "7009_1418309433.jpg",
      "UserGravatar": "86de2b95c147252a1c38b8d3996da855",
      "EditableText": "Hi all!\n\nI was just wondering if there is somewhere where I can find a list of all the standard commands you can use in quest like:\nlook at, put...in.., take and so forth\nMaybe I haven't looked hard enough, but I can't find it. \n\nI am struggling in particular with the 'look in direction of' command - I have tried lookdir, but either I am using it wrong or it is not a command; since it states that it does not understand my command.\n\nThank you in advance\n\nLet me amend my question a bit: Yes I would like a list of commands, but also: Can I have these commands work for both the object name and alias?\nIf I say: take letter or take Summons letter (which is the name of the letter), they should both work. This should apply for all standard commands. I believe that if you change your exit alias to something other than compass directions, it won't work either for 'Look'",
      "EditableFormat": "bbcode",
      "HTML": "Hi all!<br/><br/>I was just wondering if there is somewhere where I can find a list of all the standard commands you can use in quest like:<br/>look at, put...in.., take and so forth<br/>Maybe I haven't looked hard enough, but I can't find it. <br/><br/>I am struggling in particular with the 'look in direction of' command - I have tried lookdir, but either I am using it wrong or it is not a command; since it states that it does not understand my command.<br/><br/>Thank you in advance<br/><br/>Let me amend my question a bit: Yes I would like a list of commands, but also: Can I have these commands work for both the object name and alias?<br/>If I say: take letter or take Summons letter (which is the name of the letter), they should both work. This should apply for all standard commands. I believe that if you change your exit alias to something other than compass directions, it won't work either for 'Look'",
      "PostDate": "2013-12-17T06:27:52+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27124",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "Have a look in the English.aslx file in this folder to see what is there (not all commands will actually do anything):\n\nC:\\Program Files (x86)\\Quest 5\\Core\\Languages\n\nFor looking in a certain direction, create an exit, then click on the exit itself. There is an option there to have it as only a look direction and also somewhere to type the text the player will see. The command (if to the north) is LOOK NORTH or LOOK N.",
      "EditableFormat": "bbcode",
      "HTML": "Have a look in the English.aslx file in this folder to see what is there (not all commands will actually do anything):<br/><br/>C:\\Program Files (x86)\\Quest 5\\Core\\Languages<br/><br/>For looking in a certain direction, create an exit, then click on the exit itself. There is an option there to have it as only a look direction and also somewhere to type the text the player will see. The command (if to the north) is LOOK NORTH or LOOK N.",
      "PostDate": "2013-12-17T08:02:56+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27125",
      "UserId": 0,
      "Username": "Avantar",
      "UserAvatar": "7009_1418309433.jpg",
      "UserGravatar": "86de2b95c147252a1c38b8d3996da855",
      "EditableText": "Thank you Pixie,\n\nI was not sure where to look in the core files.",
      "EditableFormat": "bbcode",
      "HTML": "Thank you Pixie,<br/><br/>I was not sure where to look in the core files.",
      "PostDate": "2013-12-17T08:04:58+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27137",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "you can see all of the default~&quot;core&quot; codings (commands, functions, and etc) in two ways:\n\n1. the safe way:\n\nusing the GUI~Editor, on the left side in the &quot;tree of stuff&quot; (or just the lower left corner of the entire screen, lol), is the &quot;filter&quot; button. Either, move your mouse pointer over it or click on it, to make it pop up the &quot;show library elements&quot; button, which you click on (it's a bit difficult to do so, due to it's &quot;flashing&quot; pop up and disappear nature ~ at least on my computer anyways, lol).\n\nFilter -&gt; Show Library Elements\n\nwhat this does is to reveal (unhide) the default coding (the default libraries: English.aslx and Core.aslx, actually it reveals all of your included libraries' code contents, such as if you included~added Pixie's numerous libraries, along with the default two libraries).\n\njust look again in the &quot;tree of stuff&quot;, as now you'll see a lot of light-grey text~font new stuff, this is the code content from your libraries, such as the default commands, functions, object types, and etc.\n\nit's similar to how you can see the &quot;inherited&quot; attributes (also in light grey text~font) on the right side detail panels of objects.\n\n2. UNsafe way (Pixie already mentions this way):\n\nopen up the actual library files of~from the actual quest program folder.\n\n---------------------------\n\nthis default code content, is Alex' underlying code, that allows quest to work, such as your &quot;take&quot; command, and etc things. The &quot;core&quot; coding of quest, as it is aptly named.\n\nI believe that the &quot;core.aslx&quot; library file, compiles all of the other (individual) library (.aslx) files into itself, so quest only has to load that single &quot;core.aslx&quot; library file, for quicker initialization of quest.\n\nbut, I don't really understand about how software programming works, as there's also the &quot;.dll&quot; files too. I'm just starting to learn quest's in-game coding, lol. Eventually~hopefully, I'll be able to learn about software progamming, and etc programming.\n\n-------------------------\n\nit would be very convenient~nice for this default code content to be on the wiki, but that is A LOT of work for someone to do.\n\n------------------------\n\nAlex does have a forum~board~site for open coding development of his quest software, but I haven't looked at it myself yet. So, I don't don't if Alex might have the core quest coding up for people to view, or if it's just the fancy software coding stuff.",
      "EditableFormat": "bbcode",
      "HTML": "you can see all of the default~&quot;core&quot; codings (commands, functions, and etc) in two ways:<br/><br/>1. the safe way:<br/><br/>using the GUI~Editor, on the left side in the &quot;tree of stuff&quot; (or just the lower left corner of the entire screen, lol), is the &quot;filter&quot; button. Either, move your mouse pointer over it or click on it, to make it pop up the &quot;show library elements&quot; button, which you click on (it's a bit difficult to do so, due to it's &quot;flashing&quot; pop up and disappear nature ~ at least on my computer anyways, lol).<br/><br/>Filter -&gt; Show Library Elements<br/><br/>what this does is to reveal (unhide) the default coding (the default libraries: English.aslx and Core.aslx, actually it reveals all of your included libraries' code contents, such as if you included~added Pixie's numerous libraries, along with the default two libraries).<br/><br/>just look again in the &quot;tree of stuff&quot;, as now you'll see a lot of light-grey text~font new stuff, this is the code content from your libraries, such as the default commands, functions, object types, and etc.<br/><br/>it's similar to how you can see the &quot;inherited&quot; attributes (also in light grey text~font) on the right side detail panels of objects.<br/><br/>2. UNsafe way (Pixie already mentions this way):<br/><br/>open up the actual library files of~from the actual quest program folder.<br/><br/>---------------------------<br/><br/>this default code content, is Alex' underlying code, that allows quest to work, such as your &quot;take&quot; command, and etc things. The &quot;core&quot; coding of quest, as it is aptly named.<br/><br/>I believe that the &quot;core.aslx&quot; library file, compiles all of the other (individual) library (.aslx) files into itself, so quest only has to load that single &quot;core.aslx&quot; library file, for quicker initialization of quest.<br/><br/>but, I don't really understand about how software programming works, as there's also the &quot;.dll&quot; files too. I'm just starting to learn quest's in-game coding, lol. Eventually~hopefully, I'll be able to learn about software progamming, and etc programming.<br/><br/>-------------------------<br/><br/>it would be very convenient~nice for this default code content to be on the wiki, but that is A LOT of work for someone to do.<br/><br/>------------------------<br/><br/>Alex does have a forum~board~site for open coding development of his quest software, but I haven't looked at it myself yet. So, I don't don't if Alex might have the core quest coding up for people to view, or if it's just the fancy software coding stuff.",
      "PostDate": "2013-12-18T06:41:48+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "27141",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "There is actually two types of &quot;core&quot; code. One is the program itself, consisting of the quest.exe file and various .dll files. These are written using .NET in C# and Visual Basic, and then compiled into the .exe and .dll that you download. You can see the code here (good luck working out what it is doing!):\n\n<!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/SourceControl/latest#README.md\">http://quest.codeplex.com/SourceControl ... #README.md</a><!-- m -->\n\nThen there is the Quest code. This is written in the same language that your game is, and is all on your hard drive in the program files folder (and can be viewed as HegemonKhan says from within Quest). What core.aslx does is to tell Quest to load in the other files Quest needs. I do not think it compiles anything. When you publish a game, all the code you have created is combioned with all the libraries that core pulls in and any others to make one big text file, which is compressed just as a .zip file (and I think you can even change the name so it ends .zip, and then open it up as any other .zip file).\n\nIn general script commands are defined in C#/Visual Basic to do the low level (fundamental) things. &quot;Quest Functions&quot; (as the Wiki calls them) are also defined in C#/Visual Basic, but &quot;Core Functions&quot; are defined in Quest code. You can overwrite Quest Functions and Core Functions, but not script commands, by the way.",
      "EditableFormat": "bbcode",
      "HTML": "There is actually two types of &quot;core&quot; code. One is the program itself, consisting of the quest.exe file and various .dll files. These are written using .NET in C# and Visual Basic, and then compiled into the .exe and .dll that you download. You can see the code here (good luck working out what it is doing!):<br/><br/><!-- m --><a class=\"postlink\" href=\"http://quest.codeplex.com/SourceControl/latest#README.md\">http://quest.codeplex.com/SourceControl ... #README.md</a><!-- m --><br/><br/>Then there is the Quest code. This is written in the same language that your game is, and is all on your hard drive in the program files folder (and can be viewed as HegemonKhan says from within Quest). What core.aslx does is to tell Quest to load in the other files Quest needs. I do not think it compiles anything. When you publish a game, all the code you have created is combioned with all the libraries that core pulls in and any others to make one big text file, which is compressed just as a .zip file (and I think you can even change the name so it ends .zip, and then open it up as any other .zip file).<br/><br/>In general script commands are defined in C#/Visual Basic to do the low level (fundamental) things. &quot;Quest Functions&quot; (as the Wiki calls them) are also defined in C#/Visual Basic, but &quot;Core Functions&quot; are defined in Quest code. You can overwrite Quest Functions and Core Functions, but not script commands, by the way.",
      "PostDate": "2013-12-18T08:30:57+00:00",
      "LastEditDate": null
    },
    {
      "PostId": "32420",
      "UserId": 0,
      "Username": "Silver",
      "UserAvatar": null,
      "UserGravatar": "13024be5ccbb463906b024d5bd3cb5e8",
      "EditableText": "[quote=&quot;HegemonKhan&quot;:gtdsyyom]you can see all of the default~&quot;core&quot; codings (commands, functions, and etc) in two ways:\n\n1. the safe way:\n\nusing the GUI~Editor, on the left side in the &quot;tree of stuff&quot; (or just the lower left corner of the entire screen, lol), is the &quot;filter&quot; button. Either, move your mouse pointer over it or click on it, to make it pop up the &quot;show library elements&quot; button, which you click on (it's a bit difficult to do so, due to it's &quot;flashing&quot; pop up and disappear nature ~ at least on my computer anyways, lol).\n\nFilter -&gt; Show Library Elements\n\nwhat this does is to reveal (unhide) the default coding (the default libraries: English.aslx and Core.aslx, actually it reveals all of your included libraries' code contents, such as if you included~added Pixie's numerous libraries, along with the default two libraries).\n\njust look again in the &quot;tree of stuff&quot;, as now you'll see a lot of light-grey text~font new stuff, this is the code content from your libraries, such as the default commands, functions, object types, and etc.\n\nit's similar to how you can see the &quot;inherited&quot; attributes (also in light grey text~font) on the right side detail panels of objects.[/quote:gtdsyyom]\n\nWow, there's a lot of them. I wasn't expecting that many.  <!-- s:shock: --><img src=\"{SMILIES_PATH}/icon_eek.gif\" alt=\":shock:\" title=\"Shocked\" /><!-- s:shock: -->",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>HegemonKhan wrote:</cite>you can see all of the default~&quot;core&quot; codings (commands, functions, and etc) in two ways:<br/><br/>1. the safe way:<br/><br/>using the GUI~Editor, on the left side in the &quot;tree of stuff&quot; (or just the lower left corner of the entire screen, lol), is the &quot;filter&quot; button. Either, move your mouse pointer over it or click on it, to make it pop up the &quot;show library elements&quot; button, which you click on (it's a bit difficult to do so, due to it's &quot;flashing&quot; pop up and disappear nature ~ at least on my computer anyways, lol).<br/><br/>Filter -&gt; Show Library Elements<br/><br/>what this does is to reveal (unhide) the default coding (the default libraries: English.aslx and Core.aslx, actually it reveals all of your included libraries' code contents, such as if you included~added Pixie's numerous libraries, along with the default two libraries).<br/><br/>just look again in the &quot;tree of stuff&quot;, as now you'll see a lot of light-grey text~font new stuff, this is the code content from your libraries, such as the default commands, functions, object types, and etc.<br/><br/>it's similar to how you can see the &quot;inherited&quot; attributes (also in light grey text~font) on the right side detail panels of objects.</blockquote><br/><br/>Wow, there's a lot of them. I wasn't expecting that many.  <!-- s:shock: --><img src=\"{SMILIES_PATH}/icon_eek.gif\" alt=\":shock:\" title=\"Shocked\" /><!-- s:shock: -->",
      "PostDate": "2014-12-04T13:39:10+00:00",
      "LastEditDate": null
    }
  ]
}
