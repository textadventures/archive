{
  "Topic": {
    "TopicId": "3222",
    "ForumId": "10",
    "Title": "A \"Parent\" Object?",
    "LastUpdated": "2012-09-28T21:05:39+01:00",
    "ReplyCount": 4
  },
  "Posts": [
    {
      "PostId": "21471",
      "UserId": 0,
      "Username": "Xyore",
      "UserAvatar": null,
      "UserGravatar": "dc0b786b58ede9bca65ce13df77a075f",
      "EditableText": "I'm trying to create a room that detects for any enemies. When there are no enemies in a room, an event occurs, e.g., the battle music stops, a door opens, or a message appears. The only object I have that's an enemy is a stalfos. Now, my problems is, how would I detect for different enemies without having to list them all?\n\nLet's say there's a room with a spider, a lizard, and a goblin while there is battle music playing in the background. Instead of checking if 'spider', 'lizard', and 'goblin' are in the room, is there a way for me to classify them as 'enemies' and refer to them as such for when I have a variety of monsters in a room and I want to stop the music when there are no monsters?\n\nAlso, how can I make a sort of loop for checking whether or not there are any monsters in the room? In my demo game, when you kill all the monsters in the room, the music doesn't automatically stop. It's only set so it checks for monsters 'after you enter the room'. Where can I put this check so it will constantly check for enemies and stop the music when there are no more enemies?",
      "EditableFormat": "bbcode",
      "HTML": "I'm trying to create a room that detects for any enemies. When there are no enemies in a room, an event occurs, e.g., the battle music stops, a door opens, or a message appears. The only object I have that's an enemy is a stalfos. Now, my problems is, how would I detect for different enemies without having to list them all?<br/><br/>Let's say there's a room with a spider, a lizard, and a goblin while there is battle music playing in the background. Instead of checking if 'spider', 'lizard', and 'goblin' are in the room, is there a way for me to classify them as 'enemies' and refer to them as such for when I have a variety of monsters in a room and I want to stop the music when there are no monsters?<br/><br/>Also, how can I make a sort of loop for checking whether or not there are any monsters in the room? In my demo game, when you kill all the monsters in the room, the music doesn't automatically stop. It's only set so it checks for monsters 'after you enter the room'. Where can I put this check so it will constantly check for enemies and stop the music when there are no more enemies?",
      "PostDate": "2012-09-28T15:53:18+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21472",
      "UserId": 0,
      "Username": "Xyore",
      "UserAvatar": null,
      "UserGravatar": "dc0b786b58ede9bca65ce13df77a075f",
      "EditableText": "I'm not able to attach the game file, sorry.",
      "EditableFormat": "bbcode",
      "HTML": "I'm not able to attach the game file, sorry.",
      "PostDate": "2012-09-28T16:02:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21474",
      "UserId": 0,
      "Username": "sgreig",
      "UserAvatar": null,
      "UserGravatar": "9117185af66d72729b195384e3a446f0",
      "EditableText": "You could put the check in a turnscript so it will do the check every time the player takes an action. That's probably the best bet. \n\nAs for your other question, Quest doesn't have built-in support for that kind of thing. Parent objects in Quest are essentially containers. i.e. if you place an object in your inventory, you become that objects parent. The room you're in is the player's parent, etc.\n\nThere is the option of using types in Quest, which allows you to pass common attributes to objects. There was another thread about this recently in the forum and some people (Pertex I think) gave some code samples on how to do checks for an object's type.",
      "EditableFormat": "bbcode",
      "HTML": "You could put the check in a turnscript so it will do the check every time the player takes an action. That's probably the best bet. <br/><br/>As for your other question, Quest doesn't have built-in support for that kind of thing. Parent objects in Quest are essentially containers. i.e. if you place an object in your inventory, you become that objects parent. The room you're in is the player's parent, etc.<br/><br/>There is the option of using types in Quest, which allows you to pass common attributes to objects. There was another thread about this recently in the forum and some people (Pertex I think) gave some code samples on how to do checks for an object's type.",
      "PostDate": "2012-09-28T19:51:53+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21478",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "To expand on that, i would set up a new type &quot;monster&quot;, and then have the monsters all inherit from that (on the attributes tab).\n\nThen you can check for the room in a turnscript, get a list of objects, go though the list, and see if any inherit the monster type. In code, something like this:\n[code:12os2a3f]list = GetDirectChildren(playerparent)\nflag = false\nforeach (obj, list) {\n  if (DoesInherit (obj, &quot;monster&quot;)) {\n    flag = true\n  }\n}[/code:12os2a3f]",
      "EditableFormat": "bbcode",
      "HTML": "To expand on that, i would set up a new type &quot;monster&quot;, and then have the monsters all inherit from that (on the attributes tab).<br/><br/>Then you can check for the room in a turnscript, get a list of objects, go though the list, and see if any inherit the monster type. In code, something like this:<br/><pre><code>list = GetDirectChildren(playerparent)<br/>flag = false<br/>foreach (obj, list) {<br/>  if (DoesInherit (obj, &quot;monster&quot;)) {<br/>    flag = true<br/>  }<br/>}</code></pre>",
      "PostDate": "2012-09-28T20:33:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "21480",
      "UserId": 0,
      "Username": "Xyore",
      "UserAvatar": null,
      "UserGravatar": "dc0b786b58ede9bca65ce13df77a075f",
      "EditableText": "[quote=&quot;sgreig&quot;:13twspuy]You could put the check in a turnscript so it will do the check every time the player takes an action. That's probably the best bet. \n\nAs for your other question, Quest doesn't have built-in support for that kind of thing. Parent objects in Quest are essentially containers. i.e. if you place an object in your inventory, you become that objects parent. The room you're in is the player's parent, etc.\n\nThere is the option of using types in Quest, which allows you to pass common attributes to objects. There was another thread about this recently in the forum and some people (Pertex I think) gave some code samples on how to do checks for an object's type.[/quote:13twspuy]\n\nI did manage to make a turn script that checks for any existing enemies, thank you.\n\n[quote=&quot;The Pixie&quot;:13twspuy]To expand on that, i would set up a new type &quot;monster&quot;, and then have the monsters all inherit from that (on the attributes tab).\n\nThen you can check for the room in a turnscript, get a list of objects, go though the list, and see if any inherit the monster type. In code, something like this:\n[code:13twspuy]list = GetDirectChildren(playerparent)\nflag = false\nforeach (obj, list) {\n  if (DoesInherit (obj, &quot;monster&quot;)) {\n    flag = true\n  }\n}[/code:13twspuy][/quote:13twspuy]\nThat was actually very helpful. Thank you very much.",
      "EditableFormat": "bbcode",
      "HTML": "<blockquote><cite>sgreig wrote:</cite>You could put the check in a turnscript so it will do the check every time the player takes an action. That's probably the best bet. <br/><br/>As for your other question, Quest doesn't have built-in support for that kind of thing. Parent objects in Quest are essentially containers. i.e. if you place an object in your inventory, you become that objects parent. The room you're in is the player's parent, etc.<br/><br/>There is the option of using types in Quest, which allows you to pass common attributes to objects. There was another thread about this recently in the forum and some people (Pertex I think) gave some code samples on how to do checks for an object's type.</blockquote><br/><br/>I did manage to make a turn script that checks for any existing enemies, thank you.<br/><br/><blockquote><cite>The Pixie wrote:</cite>To expand on that, i would set up a new type &quot;monster&quot;, and then have the monsters all inherit from that (on the attributes tab).<br/><br/>Then you can check for the room in a turnscript, get a list of objects, go though the list, and see if any inherit the monster type. In code, something like this:<br/><pre><code>list = GetDirectChildren(playerparent)<br/>flag = false<br/>foreach (obj, list) {<br/>  if (DoesInherit (obj, &quot;monster&quot;)) {<br/>    flag = true<br/>  }<br/>}</code></pre></blockquote><br/>That was actually very helpful. Thank you very much.",
      "PostDate": "2012-09-28T21:05:39+01:00",
      "LastEditDate": null
    }
  ]
}
