{
  "Topic": {
    "TopicId": "gjm2adbdq0oxj8mm8fgl4w",
    "ForumId": "15",
    "Title": "Arrays of arrays and the Q6 Save/Load system",
    "LastUpdated": "2023-01-23T22:31:28.4047361Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "2bb78a44-8440-4039-b251-c8985098b0e8",
      "UserId": 438905,
      "Username": "Honoriam",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b865620f96adee94a79fceb9f25fed3d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A few more trials and tribulations... \r\nSo as it turns out, arrays of arrays are not currently supported in QJS (NOTE: my game is built off of a heavily modified v0.7 that I didn't want to update to newer versions because of said edits, but this is, as far as I can tell, still true in v1.1) - they simply aren't retained across loads or even undos and become undefined. That was a bit of a bummer.\r\n\r\nJust in case this helps anyone else, I created a few edits to the SaveLoad system to make 2D arrays of strings supported. If anyone wants 2D arrays of numbers, this could be extended to those as well with a few tweaks. These are the modifications I had to make (all in _saveload.js):\r\n\r\n1) In the encode(key, value) function, I added a check for 2D arrays and a new attType to recognize 2D arrays:\r\n```\r\nif (Array.isArray(value)) {\r\n      if (value.length === 0) return key + \":emptyarray;\";\r\n      //NEXT LINE ADDED\r\n      if (Array.isArray(value[0])) return key + \":2darray:\"+saveLoad.encode2DArray(value) + \";\";\r\n      if (typeof value[0] === 'string') return key + \":array:\" + saveLoad.encodeArray(value) + \";\";\r\n      if (typeof value[0] === 'number') return key + \":numberarray:\" + saveLoad.encodeNumberArray(value) + \";\";\r\n      return '';\r\n    }\r\n```\r\n2) I created functions that can encode and decode 2D arrays, using the '%' symbol as a new identifier for separating the second array dimension:\r\n```\r\n  encode2DArray:function(ary) {\r\n\tlet ary2d = [];\r\n\tfor(let i=0;i < ary.length;i++){\r\n\t  ary2d.push(saveLoad.encodeArray(ary[i]));\r\n\t}\r\n    return ary2d.join('%');\r\n  },\r\n\r\n  decode2DArray:function(s) {\r\n\t  let ary1d = s.split('%');\r\n\t  let ary2d = [];\r\n\t  for(let i = 0; i < ary1d.length;i++){\r\n\t\t  ary2d.push(ary1d[i].split('~'));\r\n\t  }\r\n\t  return ary2d;\r\n  },\r\n```\r\n3) In the decode(hash, str) function, I added an element to properly call the decode2DArray function for \"2darray\" type attributes:\r\n```\r\nelse if (attType === \"2darray\") {\r\n\t  hash[key] = saveLoad.decode2DArray(s)\r\n}\r\n```\r\n4) I added an escape for '%' characters in text:\r\n```\r\n  replacements:[\r\n    { unescaped:':', escaped:'cln'},\r\n    { unescaped:';', escaped:'scln'},\r\n    { unescaped:'!', escaped:'exm'},\r\n    { unescaped:'=', escaped:'eqs'},\r\n    { unescaped:'~', escaped:'tld'},\r\n    //NEXT LINE ADDED\r\n    { unescaped:'%', escaped:'prc'},\r\n  ],\r\n```\r\n\r\nAnd there you go! Now you can save / load 2D arrays of strings. ",
      "EditableFormat": "markdown",
      "HTML": "<p>A few more trials and tribulations...<br>\nSo as it turns out, arrays of arrays are not currently supported in QJS (NOTE: my game is built off of a heavily modified v0.7 that I didn't want to update to newer versions because of said edits, but this is, as far as I can tell, still true in v1.1) - they simply aren't retained across loads or even undos and become undefined. That was a bit of a bummer.</p>\n<p>Just in case this helps anyone else, I created a few edits to the SaveLoad system to make 2D arrays of strings supported. If anyone wants 2D arrays of numbers, this could be extended to those as well with a few tweaks. These are the modifications I had to make (all in _saveload.js):</p>\n<ol>\n<li>In the encode(key, value) function, I added a check for 2D arrays and a new attType to recognize 2D arrays:</li>\n</ol>\n<pre><code>if (Array.isArray(value)) {\n      if (value.length === 0) return key + \":emptyarray;\";\n      //NEXT LINE ADDED\n      if (Array.isArray(value[0])) return key + \":2darray:\"+saveLoad.encode2DArray(value) + \";\";\n      if (typeof value[0] === 'string') return key + \":array:\" + saveLoad.encodeArray(value) + \";\";\n      if (typeof value[0] === 'number') return key + \":numberarray:\" + saveLoad.encodeNumberArray(value) + \";\";\n      return '';\n    }\n</code></pre>\n<ol start=\"2\">\n<li>I created functions that can encode and decode 2D arrays, using the '%' symbol as a new identifier for separating the second array dimension:</li>\n</ol>\n<pre><code>  encode2DArray:function(ary) {\n\tlet ary2d = [];\n\tfor(let i=0;i &lt; ary.length;i++){\n\t  ary2d.push(saveLoad.encodeArray(ary[i]));\n\t}\n    return ary2d.join('%');\n  },\n\n  decode2DArray:function(s) {\n\t  let ary1d = s.split('%');\n\t  let ary2d = [];\n\t  for(let i = 0; i &lt; ary1d.length;i++){\n\t\t  ary2d.push(ary1d[i].split('~'));\n\t  }\n\t  return ary2d;\n  },\n</code></pre>\n<ol start=\"3\">\n<li>In the decode(hash, str) function, I added an element to properly call the decode2DArray function for \"2darray\" type attributes:</li>\n</ol>\n<pre><code>else if (attType === \"2darray\") {\n\t  hash[key] = saveLoad.decode2DArray(s)\n}\n</code></pre>\n<ol start=\"4\">\n<li>I added an escape for '%' characters in text:</li>\n</ol>\n<pre><code>  replacements:[\n    { unescaped:':', escaped:'cln'},\n    { unescaped:';', escaped:'scln'},\n    { unescaped:'!', escaped:'exm'},\n    { unescaped:'=', escaped:'eqs'},\n    { unescaped:'~', escaped:'tld'},\n    //NEXT LINE ADDED\n    { unescaped:'%', escaped:'prc'},\n  ],\n</code></pre>\n<p>And there you go! Now you can save / load 2D arrays of strings.</p>\n\n",
      "PostDate": "2023-01-23T22:31:28.4047361Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
