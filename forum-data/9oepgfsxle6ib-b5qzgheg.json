{
  "Topic": {
    "TopicId": "9oepgfsxle6ib-b5qzgheg",
    "ForumId": "3",
    "Title": "Weighted chances? ",
    "LastUpdated": "2019-10-19T00:15:47.2746025Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "fd65c08f-fbfe-4b43-a2da-1bbf5abe0bd7",
      "UserId": 306960,
      "Username": "FevixDarkwatch",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there a way to use weighted chances in Quest? EG., I want to give one thing a weight of 100, and another thing a weight of 200, so that out of a total of 300 rolls there's 100 results of A and 200 results of B.\r\n\r\nI'd like to have it such that I can later go in and add C with a weight of 1, D with a weight of 80, etc etc with minimal extra work. \r\n\r\nThe current random commands don't seem up to the task. Randomint seems more fit for things with equal chance, RandomChance doesn't exactly stack well (elseifs have less than the listed value, as they aren't even evaluated if a previous randomchance evals true)...\r\n\r\nI don't mind making my own function for it and hardcoding a list/dictionary of values, but I'd rather have the values be softcoded.",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there a way to use weighted chances in Quest? EG., I want to give one thing a weight of 100, and another thing a weight of 200, so that out of a total of 300 rolls there's 100 results of A and 200 results of B.</p>\n<p>I'd like to have it such that I can later go in and add C with a weight of 1, D with a weight of 80, etc etc with minimal extra work.</p>\n<p>The current random commands don't seem up to the task. Randomint seems more fit for things with equal chance, RandomChance doesn't exactly stack well (elseifs have less than the listed value, as they aren't even evaluated if a previous randomchance evals true)...</p>\n<p>I don't mind making my own function for it and hardcoding a list/dictionary of values, but I'd rather have the values be softcoded.</p>\n\n",
      "PostDate": "2019-10-19T00:15:47.2746025Z",
      "LastEditDate": "2019-10-19T00:17:27.5191129Z",
      "link": null
    },
    {
      "PostId": "f01a7e97-cbd1-41b9-a9d5-a057c2b41267",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Like this?\r\n\r\n```\r\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\r\n```\r\nAs in...?\r\n```\r\nif (firearm) {\r\n  damageatt = \"firearmdamage\"\r\n  attackatt = \"firearmattack\"\r\n  weapon.ammo = weapon.ammo - 1\r\n}\r\nelse {\r\n  damageatt = \"damage\"\r\n  attackatt = \"attack\"\r\n}\r\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\r\nif (HasInt(weapon, damageatt)) {\r\n  damage = GetInt(weapon, damageatt)\r\n}\r\nelse {\r\n  damage = DiceRoll(GetString(weapon, damageatt))\r\n}\r\ndamage = damage * (100 - target.armour) / 100\r\nif (damage < 1) {\r\n  damage = 1\r\n}\r\nif (roll > 15) {\r\n  damage = damage * 2\r\n  AttackReport (weapon.critdesc, attacker, target, damage)\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse if (roll > 5) {\r\n  AttackReport (weapon.attackdesc, attacker, target, damage)\r\n  target.hitpoints = target.hitpoints - damage\r\n}\r\nelse {\r\n  AttackReport (weapon.missdesc, attacker, target, 0)\r\n}\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Like this?</p>\n<pre><code>roll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\n</code></pre>\n<p>As in...?</p>\n<pre><code>if (firearm) {\n  damageatt = \"firearmdamage\"\n  attackatt = \"firearmattack\"\n  weapon.ammo = weapon.ammo - 1\n}\nelse {\n  damageatt = \"damage\"\n  attackatt = \"attack\"\n}\nroll = GetRandomInt(1, 20) + GetInt(weapon, attackatt) - target.defence\nif (HasInt(weapon, damageatt)) {\n  damage = GetInt(weapon, damageatt)\n}\nelse {\n  damage = DiceRoll(GetString(weapon, damageatt))\n}\ndamage = damage * (100 - target.armour) / 100\nif (damage &lt; 1) {\n  damage = 1\n}\nif (roll &gt; 15) {\n  damage = damage * 2\n  AttackReport (weapon.critdesc, attacker, target, damage)\n  target.hitpoints = target.hitpoints - damage\n}\nelse if (roll &gt; 5) {\n  AttackReport (weapon.attackdesc, attacker, target, damage)\n  target.hitpoints = target.hitpoints - damage\n}\nelse {\n  AttackReport (weapon.missdesc, attacker, target, 0)\n}\n</code></pre>\n\n",
      "PostDate": "2019-10-19T01:03:30.4217194Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "21398f15-7fb2-4f16-a56d-e2da5b71ed1f",
      "UserId": 306960,
      "Username": "FevixDarkwatch",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's.... a lot simpler than I thought it would be. ",
      "EditableFormat": "markdown",
      "HTML": "<p>That's.... a lot simpler than I thought it would be.</p>\n\n",
      "PostDate": "2019-10-19T01:27:05.3743359Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "73b7fec0-dfef-489e-851d-19b0036079e4",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I might be confused, but that doesn't look like it does what you asked for.\r\n\r\nThe simplest way to do a weighted chance for small numbers of things is to use a list.\r\n```\r\nresult = PickOneString (Split (\"optionA;optionA;optionB\"))\r\n```\r\nhas a ⅔ chance of being option A and ⅓ option B.\r\n\r\nIf the relative probabilities are larger and that isn't practical, you can use `RandomChance` - but it involves some maths to work out the target numbers, so it isn't perfect.\r\n\r\nHere's a function which will take a dictionary; the key will be returned, and the value is the weight.\r\n(off the top of my head, I'm typing on my phone here, so this might have mistakes)\r\n```\r\n<function name=\"WeightedPickOne\" parameters=\"options\" type=\"string\">\r\n  weight = 0;\r\n  foreach (item, options) {\r\n    weight = weight + DictionaryItem (options, item)\r\n  }\r\n  choice = GetRandomInt (1, weight)\r\n  foreach (item, options) {\r\n    choice = choice - DictionaryItem (options, item)\r\n    if (0 >= choice) {\r\n      return (item)\r\n    }\r\n  }\r\n</function>\r\n```\r\n\r\nIf you're using it to choose a branch, you'd use it like this:\r\n```\r\noptions = NewDictionary()\r\ndictionary add (options, \"A\", 100)\r\ndictionary add (options, \"B\", 200)\r\ndictionary add (options, \"C\", 1)\r\ndictionary add (options, \"D\", 80)\r\nswitch (WeightedPickOne (options)) {\r\n  case (\"A\") {\r\n    // code goes here\r\n  }\r\n  case (\"B\") {\r\n    // code goes here\r\n  }\r\n  case (\"C\") {\r\n    // code goes here\r\n  }\r\n  case (\"D\") {\r\n    // code goes here\r\n  }\r\n}\r\n```\r\n\r\nor if there's only a few options, you could use QuickParams:\r\n```\r\nswitch (WeightedPickOne (QuickParams (\"A\", 100, \"B\", 200, \"C\", 1))) {\r\n  case (\"A\") {\r\n    // code goes here\r\n  }\r\n  case (\"B\") {\r\n    // code goes here\r\n  }\r\n  case (\"C\") {\r\n    // code goes here\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I might be confused, but that doesn't look like it does what you asked for.</p>\n<p>The simplest way to do a weighted chance for small numbers of things is to use a list.</p>\n<pre><code>result = PickOneString (Split (\"optionA;optionA;optionB\"))\n</code></pre>\n<p>has a ⅔ chance of being option A and ⅓ option B.</p>\n<p>If the relative probabilities are larger and that isn't practical, you can use <code>RandomChance</code> - but it involves some maths to work out the target numbers, so it isn't perfect.</p>\n<p>Here's a function which will take a dictionary; the key will be returned, and the value is the weight.<br>\n(off the top of my head, I'm typing on my phone here, so this might have mistakes)</p>\n<pre><code>&lt;function name=\"WeightedPickOne\" parameters=\"options\" type=\"string\"&gt;\n  weight = 0;\n  foreach (item, options) {\n    weight = weight + DictionaryItem (options, item)\n  }\n  choice = GetRandomInt (1, weight)\n  foreach (item, options) {\n    choice = choice - DictionaryItem (options, item)\n    if (0 &gt;= choice) {\n      return (item)\n    }\n  }\n&lt;/function&gt;\n</code></pre>\n<p>If you're using it to choose a branch, you'd use it like this:</p>\n<pre><code>options = NewDictionary()\ndictionary add (options, \"A\", 100)\ndictionary add (options, \"B\", 200)\ndictionary add (options, \"C\", 1)\ndictionary add (options, \"D\", 80)\nswitch (WeightedPickOne (options)) {\n  case (\"A\") {\n    // code goes here\n  }\n  case (\"B\") {\n    // code goes here\n  }\n  case (\"C\") {\n    // code goes here\n  }\n  case (\"D\") {\n    // code goes here\n  }\n}\n</code></pre>\n<p>or if there's only a few options, you could use QuickParams:</p>\n<pre><code>switch (WeightedPickOne (QuickParams (\"A\", 100, \"B\", 200, \"C\", 1))) {\n  case (\"A\") {\n    // code goes here\n  }\n  case (\"B\") {\n    // code goes here\n  }\n  case (\"C\") {\n    // code goes here\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2019-10-19T10:09:42.7669621Z",
      "LastEditDate": "2019-10-21T10:06:06.2100691Z",
      "link": null
    },
    {
      "PostId": "338e3bdd-ef6b-458e-9f07-65b8b379579b",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hold up....\r\n\r\n```\r\nA.weight = 1\r\nB.weight = 2\r\nC.weight = 3\r\nD.weight = 4\r\n```\r\nAnd then this...\r\n```\r\nroll = GetRandomInt(1, 20) + this.weight\r\n```\r\nAnd then this...\r\n```\r\nif (roll > 5) {\r\n  msg (\"6\")\r\n}\r\nelse if (roll > 4) {\r\n  msg (\"5\")\r\n}\r\nelse if (roll > 3) {\r\n  msg (\"4\")\r\n}\r\nelse if (roll > 2) {\r\n  msg (\"3\")\r\nelse {\r\n  msg (\"This is not enough.\")\r\n}\r\n```\r\nIs this what you wanted?",
      "EditableFormat": "markdown",
      "HTML": "<p>Hold up....</p>\n<pre><code>A.weight = 1\nB.weight = 2\nC.weight = 3\nD.weight = 4\n</code></pre>\n<p>And then this...</p>\n<pre><code>roll = GetRandomInt(1, 20) + this.weight\n</code></pre>\n<p>And then this...</p>\n<pre><code>if (roll &gt; 5) {\n  msg (\"6\")\n}\nelse if (roll &gt; 4) {\n  msg (\"5\")\n}\nelse if (roll &gt; 3) {\n  msg (\"4\")\n}\nelse if (roll &gt; 2) {\n  msg (\"3\")\nelse {\n  msg (\"This is not enough.\")\n}\n</code></pre>\n<p>Is this what you wanted?</p>\n\n",
      "PostDate": "2019-10-21T01:04:01.4203708Z",
      "LastEditDate": "2019-10-21T01:04:18.9196366Z",
      "link": null
    },
    {
      "PostId": "23b17f17-949b-40ee-9b39-42197de42975",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Try this...\r\n(Just winging it...)\r\nA=100\r\nB=200\r\nTotal=A+B\r\nR=DiceRoll(\"1d Total\")\r\nlater...\r\nC=1\r\nD=80\r\nTotal=A+B+C+D\r\nR=DiceRoll(\"1d\" +T)\r\nDrop \"B\"\r\nTotal=A+C+D\r\nR=DiceRoll(\"1d\" +T)\r\nBut I don't know if a variable could be used in DiceRoll()\r\nUpdate: It will work...\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Try this...<br>\n(Just winging it...)<br>\nA=100<br>\nB=200<br>\nTotal=A+B<br>\nR=DiceRoll(\"1d Total\")<br>\nlater...<br>\nC=1<br>\nD=80<br>\nTotal=A+B+C+D<br>\nR=DiceRoll(\"1d\" +T)<br>\nDrop \"B\"<br>\nTotal=A+C+D<br>\nR=DiceRoll(\"1d\" +T)<br>\nBut I don't know if a variable could be used in DiceRoll()<br>\nUpdate: It will work...</p>\n\n",
      "PostDate": "2019-10-21T02:47:59.6170707Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28823f04-13a0-4e85-9db6-7993fe40fc2e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "@DarkLizerd\r\nThat's what I suggested; but I gave a function whose parameters are a dictionary of options and their weights, to automate the process.\r\n\r\nAlso, `DiceRoll` is an inefficient function. You're turning an int into a string, passing it to that function, which then has to walk over the string one character at a time to break it down into numbers before calling `GetRandomInt` to do the actual dice roll.\r\n\r\n`DiceRoll (\"1d\" + total)` has exactly the same effect as `GetRandomInt (1, total)`, but the DiceRoll version puts a much higher load on the server. And given the number of times people have complained here about the server being down, or games unexpectedly ending, I think that it's probably better to encourage efficient code where possible. Maybe it's a small thing, but if new coders get into good habits, then it's a small thing that will be repeated hundreds of times in dozens of games.\r\n\r\n(DiceRoll is convenient and useful if you might have a sword whose damage is \"2d6\" and a bow whose damage is \"1d8+4\", so that you can store the damage rating in a single string attribute. That's where the additional load might be justified)",
      "EditableFormat": "markdown",
      "HTML": "<p>@DarkLizerd<br>\nThat's what I suggested; but I gave a function whose parameters are a dictionary of options and their weights, to automate the process.</p>\n<p>Also, <code>DiceRoll</code> is an inefficient function. You're turning an int into a string, passing it to that function, which then has to walk over the string one character at a time to break it down into numbers before calling <code>GetRandomInt</code> to do the actual dice roll.</p>\n<p><code>DiceRoll (\"1d\" + total)</code> has exactly the same effect as <code>GetRandomInt (1, total)</code>, but the DiceRoll version puts a much higher load on the server. And given the number of times people have complained here about the server being down, or games unexpectedly ending, I think that it's probably better to encourage efficient code where possible. Maybe it's a small thing, but if new coders get into good habits, then it's a small thing that will be repeated hundreds of times in dozens of games.</p>\n<p>(DiceRoll is convenient and useful if you might have a sword whose damage is \"2d6\" and a bow whose damage is \"1d8+4\", so that you can store the damage rating in a single string attribute. That's where the additional load might be justified)</p>\n\n",
      "PostDate": "2019-10-21T10:03:24.8755671Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9abec649-5061-4824-92b8-c0297a034f55",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Didn't know that... Thanks.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Didn't know that... Thanks.</p>\n\n",
      "PostDate": "2019-10-22T02:22:50.4533585Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
