{
  "Topic": {
    "TopicId": "l-1sm78sb0yg1onejxaiwq",
    "ForumId": "3",
    "Title": "Hypothetical Q: Could you make a game with a 10,000 level (RPG) and 1,000,000 HP?",
    "LastUpdated": "2017-04-16T21:01:39.3967143Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7e3e2f46-779f-40c5-9137-182c41d7d15f",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is just hypothetical, as I doubt the system even has enough memory for this. But can you make a game RPG with 1,000,000 HP? (Any system)",
      "EditableFormat": "markdown",
      "HTML": "<p>This is just hypothetical, as I doubt the system even has enough memory for this. But can you make a game RPG with 1,000,000 HP? (Any system)</p>\n\n",
      "PostDate": "2017-04-16T21:01:39.3967143Z",
      "LastEditDate": null
    },
    {
      "PostId": "6f577b39-1c99-481a-bb50-d8f8f1a71bee",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I just edited my The Pixie's zombie game and entered 1,000,000 hp. I thought it would show up an error or something. But it worked. lol.",
      "EditableFormat": "markdown",
      "HTML": "<p>I just edited my The Pixie's zombie game and entered 1,000,000 hp. I thought it would show up an error or something. But it worked. lol.</p>\n\n",
      "PostDate": "2017-04-16T21:31:48.9222854Z",
      "LastEditDate": null
    },
    {
      "PostId": "2dd1ce2e-7f83-41b1-abbc-0bfa545074cb",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "http://i.imgur.com/BXvaaIub.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Playing DnD... I would hate to come across a creature with 1,000,000 HP!!!\r\nUnless it is one of those pseudo-DnD one, where the player with a big sword could deal 50,000 hp damage...\r\n( LOL)\r\nQuest uses Int32... That comes out to a REALLY!!!! big number\r\n10,000 levels??? (10,000 rooms!) That would take a while to explore just a small percent... \r\nBut I bet you were just wondering about the upper limit on some variables...",
      "EditableFormat": "markdown",
      "HTML": "<p>Playing DnD... I would hate to come across a creature with 1,000,000 HP!!!<br>\nUnless it is one of those pseudo-DnD one, where the player with a big sword could deal 50,000 hp damage...<br>\n( LOL)<br>\nQuest uses Int32... That comes out to a REALLY!!!! big number<br>\n10,000 levels??? (10,000 rooms!) That would take a while to explore just a small percent...<br>\nBut I bet you were just wondering about the upper limit on some variables...</p>\n\n",
      "PostDate": "2017-04-17T03:01:39.4427981Z",
      "LastEditDate": null
    },
    {
      "PostId": "a06d10a7-e2fe-4b5a-81bd-e8409705d967",
      "UserId": 236857,
      "Username": "felixp7",
      "AvatarUrl": "http://i.imgur.com/KMhOzNPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah, a number is a number. You can just as easily have a billion hitpoints -- or two billion -- with any modern, 32-bit authoring system. But is it really more fun than having just 10 hitpoints and adjusting damage rates accordingly? People who play a lot of D&D claim the game is only interesting up to level 6, and indeed there is a variant that stops there, because past that point you largely stop getting cool new powers and tactical options, and the only thing left is numeric increases.\r\n\r\nAs for the size of the game itself, say how many rooms you could have in a dungeon, I dunno about Quest but other modern authoring systems have no hard limit. But do you really want to subject your players to a 10000-room dungeon? What are you going to put in it to keep it fun over the dozens of hours it will take to clear?\r\n\r\nFor what it's worth, in my latest roguelike the protagonist usually grows from 24 to 40 hitpoints over a playthrough, with other creatures ranging from 12 to 48, and there are maybe 100 rooms total -- 10 per dungeon level, on average. Admittedly it's a short game, intended to be won in 40 minutes. But you can always give players more things to do per room, instead of lots and lots of empty rooms.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah, a number is a number. You can just as easily have a billion hitpoints -- or two billion -- with any modern, 32-bit authoring system. But is it really more fun than having just 10 hitpoints and adjusting damage rates accordingly? People who play a lot of D&amp;D claim the game is only interesting up to level 6, and indeed there is a variant that stops there, because past that point you largely stop getting cool new powers and tactical options, and the only thing left is numeric increases.</p>\n<p>As for the size of the game itself, say how many rooms you could have in a dungeon, I dunno about Quest but other modern authoring systems have no hard limit. But do you really want to subject your players to a 10000-room dungeon? What are you going to put in it to keep it fun over the dozens of hours it will take to clear?</p>\n<p>For what it's worth, in my latest roguelike the protagonist usually grows from 24 to 40 hitpoints over a playthrough, with other creatures ranging from 12 to 48, and there are maybe 100 rooms total -- 10 per dungeon level, on average. Admittedly it's a short game, intended to be won in 40 minutes. But you can always give players more things to do per room, instead of lots and lots of empty rooms.</p>\n\n",
      "PostDate": "2017-04-17T07:11:59.0216846Z",
      "LastEditDate": null
    },
    {
      "PostId": "163751e9-4f33-4f3d-8e10-6d390fbe0c0f",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "it depends on the data types (and thus their sizes) used by quest and/or used from your computer system, as to their size, so if you're curious... you can start testing sizes, lol\r\n\r\n(just google search: data type sizes)\r\n\r\nhttps://en.wikipedia.org/wiki/Data_type\r\nhttps://www.tutorialspoint.com/cprogramming/c_data_types.htm\r\nhttps://msdn.microsoft.com/en-us/library/s3f49ktz.aspx\r\nhttps://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html (this is a good link on data types)\r\nhttps://chortle.ccsu.edu/java5/Notes/chap11/ch11_2.html",
      "EditableFormat": "markdown",
      "HTML": "<p>it depends on the data types (and thus their sizes) used by quest and/or used from your computer system, as to their size, so if you're curious... you can start testing sizes, lol</p>\n<p>(just google search: data type sizes)</p>\n<p>https://en.wikipedia.org/wiki/Data_type<br>\nhttps://www.tutorialspoint.com/cprogramming/c_data_types.htm<br>\nhttps://msdn.microsoft.com/en-us/library/s3f49ktz.aspx<br>\nhttps://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html (this is a good link on data types)<br>\nhttps://chortle.ccsu.edu/java5/Notes/chap11/ch11_2.html</p>\n\n",
      "PostDate": "2017-04-17T21:05:55.422914Z",
      "LastEditDate": null
    },
    {
      "PostId": "15e1310a-5b54-4910-b562-29c0abeffcdb",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks. I was only thinking of the system, not making a game like that. lol\r\n\r\nI was thinking of Final Fantasy. Although the earlier games are much more simpler/more general, the games 7 & up get into levels in the 4 digits. It's quite possible to get to level 9999 by the end of the game. Of course Final Fantasy just has the player level up faster. lol",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks. I was only thinking of the system, not making a game like that. lol</p>\n<p>I was thinking of Final Fantasy. Although the earlier games are much more simpler/more general, the games 7 &amp; up get into levels in the 4 digits. It's quite possible to get to level 9999 by the end of the game. Of course Final Fantasy just has the player level up faster. lol</p>\n\n",
      "PostDate": "2017-04-18T05:48:56.2833576Z",
      "LastEditDate": null
    },
    {
      "PostId": "25b44916-fc0e-4968-892e-5a2f64871f92",
      "UserId": 236857,
      "Username": "felixp7",
      "AvatarUrl": "http://i.imgur.com/KMhOzNPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, yeah, but Final Fantasy is a JRPG. Those are a different breed of game, made for people who don't realize shouts of \"it's over nine thousaaand!\" aren't supposed to be taken seriously. :P",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, yeah, but Final Fantasy is a JRPG. Those are a different breed of game, made for people who don't realize shouts of \"it's over nine thousaaand!\" aren't supposed to be taken seriously. :P</p>\n\n",
      "PostDate": "2017-04-18T07:53:43.7030768Z",
      "LastEditDate": null
    },
    {
      "PostId": "a9eb853d-2cfa-4ed4-a560-884528c86a5d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "data types are based upon teh size of their memory, and computer memory works on base 2 as that works directly with the digital ('0' and '1' bit) circuitry of the memory parts:\r\n\r\nNumber Systems: binary (base 2), octal (base 8), decimal (base 10, what we know: 0-9 digits: 0-9, 10-99, 100-999, etc), hexadecimal (base 16)\r\n\r\n1 byte (8 bits):\r\n\r\nthese are the digit placeholder columns, such as with decimal (0 to 9) of 'ones' column (10^0 x N), 'tens' column (10^1 x N), 'hundreds' column (10^2 x N), except this is binary (base 2, not base 10 of decimal):\r\n2^0 = 1\r\n2^1 = 2\r\n2^2 = 4\r\n2^3 = 8\r\n2^4 = 16\r\n2^5 = 32\r\n2^6 = 64\r\n2^7 = 128\r\n\r\n2^7----2^0\r\n0000-0000 = 0 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 0) + (2^0 x 0)\r\n0000-0001 = 1 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 0) + (2^0 x 1)\r\n0000-0010 = 2 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 1) + (2^0 x 0)\r\n0000-0011 = 3 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 1) + (2^0 x 1)\r\n0000-0100 = 4 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 1) + (2^1 x 0) + (2^0 x 0)\r\n....\r\n1111-1111 = 255 = (2^7 x 1) + (2^6 x 1) + (2^5 x 1) + (2^4 x 1) + (2^3 x 1) + (2^2 x 1) + (2^1 x 1) + (2^0 x 1\r\n\r\n2^8 = 256 = 0 to 255\r\n2^9 = 512\r\n2^10 = 1024\r\n2^11 = 2028\r\n2^12 = 4056\r\netc etc etc\r\n\r\nthe early games were only able use 'words' (16 bits: 0000-0000-0000-0000, the first/leftmost 8 bits are for the address: the location in memory that holds the data: the last/rightmost 8 bits) as they didn't have much memory.\r\n\r\nmemory is physically like a long chain of boxes, which can store values in them (called registers):\r\n\r\nbox1 -> box2 -> box3 -> box4 -> etc\r\n\r\nso, for example, here's our memory (the 'b' is for binary digit):\r\n\r\nbbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb.....\r\n\r\nbbbb-bbbb: this is our 'box1', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box1' holds\r\n\r\nxxxx-xxxx-bbbb-bbbb: this (2nd set of 8 'bs', I used the 'xs' to mask the first set of 8 'bs') is our 'box2', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box2' holds\r\n\r\nxxxx-xxxx-xxxx-xxxx-bbbb-bbbb: this (23rd set of 8 'bs', I used the 'xs' to mask the first and second sets of 8 'bs') is our 'box3', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box3' holds\r\n\r\nso, for example:\r\n\r\n0000-0000---0001-0000---0010-0000---bbbb-bbbb\r\n\r\n0000 (of 0000-0000): is our box1, and it holds the value of: 0 (0000)\r\n0001 (of 0001-0000): is our box2, and it holds the value of: 0 (0000)\r\n0002 (of 0001-0000): is our box3, and it holds the value of: 0 (0000)\r\nbbbb (of bbbb-bbbb): would be our box4, but I'm not going further, as if I was, I'd use the '0' or '1', as that's how computers work (there's no 'b', digital/memory is just a long series of a pattern of: '0s' and '1s')\r\n\r\nso, you specify the box (addressing):\r\n\r\n0001 (box2)\r\n\r\nthen you specify the value that it stores/holds: 1111 = 15 = (2^3 x 1) + (2^2 x 1) + (2^1 x 1) + (2^0 x 1) = (8) + (4) + (2) + (1) = 15\r\n\r\n0001-1111 ---> 'box2' has the value of '15' stored/held in it\r\n\r\n------\r\n\r\n0001-0100 ---> 'box2' has the value of '4' stored/held in it\r\n\r\n0000-1000 ---> 'box1' has the value of '8' stored/held in it\r\n\r\n0010-0010 ---> 'box3' has the value of '2' stored/held in it\r\n\r\nand thus, now our memory would be this in machine language:\r\n\r\n000010000001010000100010.....\r\n(0000-1000---0001-0100---0010-0010......) \r\n(box1: 8 --- box2: 4 --- box3: 2 --- ....)\r\n\r\nanyways, that's why lots of old games only use 255 as their max stat, and if the programming doesn't handle it, going over 255, causes it to return and start from 0 again. maybe you've played some games where this has happened...\r\n\r\njust a brief conceptual 'toe-dipping' into Assembly language (which is what the \"hexadecimal game hacking editors\" are doing/using)\r\n\r\nso, if you're interested in Assembly (do NOT try/mess-with this stuff unless you know what you're doing as you're messing around with the memory of your computer, and can ruin your computer):\r\n\r\nhttp://www.plantation-productions.com/Webster/www.artofasm.com/DOS/index.html\r\nhttp://www.c-jump.com/CIS77/CIS77syllabus.htm\r\n(and many other links, there's different types of Assembly Languages too, we learned the original intel one: MASM32: M:microsoft ASM:assembly 32:bits)\r\n\r\n-------\r\n\r\nhere's a quick 'rosetta stone' for number systems:\r\n\r\nvalue vs decimal vs binary vs octal vs hexadecimal\r\n0 vs 00 vs 0000-0000 vs 000 vs 00 \r\n1 vs 01 vs 0000-0001 vs 001 vs 01\r\n2 vs 02 vs 0000-0010 vs 002 vs 02\r\n3 vs 03 vs 0000-0011 vs 003 vs 03\r\n4 vs 04 vs 0000-0100 vs 004 vs 04\r\n5 vs 05 vs 0000-0101 vs 005 vs 05\r\n6 vs 06 vs 0000-0110 vs 006 vs 06\r\n7 vs 07 vs 0000-0111 vs 007 vs 07\r\n8 vs 08 vs 0000-1000 vs 010 vs 08\r\n9 vs 09 vs 0000-1001 vs 011 vs 09\r\n10 vs 10 vs 0000-1010 vs 012 vs 0A\r\n11 vs 11 vs 0000-1011 vs 013 vs 0B\r\n12 vs 12 vs 0000-1100 vs 014 vs 0C\r\n13 vs 13 vs 0000-1101 vs 015 vs 0D\r\n14 vs 14 vs 0000-1110 vs 016 vs 0E\r\n15 vs 15 vs 0000-1111 vs 017 vs 0F\r\n16 vs 16 vs 0001-0000 vs 020 vs 10\r\n17 vs 17 vs 0001-0001 vs 021 vs 11\r\n...\r\n100 vs 100 vs 0110-0100 vs 144 vs 64\r\n\r\nor just use an online converter, such as: http://coderstoolbox.net/number/\r\n\r\nusing programming to do the number system conversions for us, hehe :D",
      "EditableFormat": "markdown",
      "HTML": "<p>data types are based upon teh size of their memory, and computer memory works on base 2 as that works directly with the digital ('0' and '1' bit) circuitry of the memory parts:</p>\n<p>Number Systems: binary (base 2), octal (base 8), decimal (base 10, what we know: 0-9 digits: 0-9, 10-99, 100-999, etc), hexadecimal (base 16)</p>\n<p>1 byte (8 bits):</p>\n<p>these are the digit placeholder columns, such as with decimal (0 to 9) of 'ones' column (10^0 x N), 'tens' column (10^1 x N), 'hundreds' column (10^2 x N), except this is binary (base 2, not base 10 of decimal):<br>\n2^0 = 1<br>\n2^1 = 2<br>\n2^2 = 4<br>\n2^3 = 8<br>\n2^4 = 16<br>\n2^5 = 32<br>\n2^6 = 64<br>\n2^7 = 128</p>\n<p>2^7----2^0<br>\n0000-0000 = 0 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 0) + (2^0 x 0)<br>\n0000-0001 = 1 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 0) + (2^0 x 1)<br>\n0000-0010 = 2 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 1) + (2^0 x 0)<br>\n0000-0011 = 3 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 0) + (2^1 x 1) + (2^0 x 1)<br>\n0000-0100 = 4 = (2^7 x 0) + (2^6 x 0) + (2^5 x 0) + (2^4 x 0) + (2^3 x 0) + (2^2 x 1) + (2^1 x 0) + (2^0 x 0)<br>\n....<br>\n1111-1111 = 255 = (2^7 x 1) + (2^6 x 1) + (2^5 x 1) + (2^4 x 1) + (2^3 x 1) + (2^2 x 1) + (2^1 x 1) + (2^0 x 1</p>\n<p>2^8 = 256 = 0 to 255<br>\n2^9 = 512<br>\n2^10 = 1024<br>\n2^11 = 2028<br>\n2^12 = 4056<br>\netc etc etc</p>\n<p>the early games were only able use 'words' (16 bits: 0000-0000-0000-0000, the first/leftmost 8 bits are for the address: the location in memory that holds the data: the last/rightmost 8 bits) as they didn't have much memory.</p>\n<p>memory is physically like a long chain of boxes, which can store values in them (called registers):</p>\n<p>box1 -&gt; box2 -&gt; box3 -&gt; box4 -&gt; etc</p>\n<p>so, for example, here's our memory (the 'b' is for binary digit):</p>\n<p>bbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb-bbbb.....</p>\n<p>bbbb-bbbb: this is our 'box1', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box1' holds</p>\n<p>xxxx-xxxx-bbbb-bbbb: this (2nd set of 8 'bs', I used the 'xs' to mask the first set of 8 'bs') is our 'box2', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box2' holds</p>\n<p>xxxx-xxxx-xxxx-xxxx-bbbb-bbbb: this (23rd set of 8 'bs', I used the 'xs' to mask the first and second sets of 8 'bs') is our 'box3', the left 4 'bs' is the box, and the right 4 'bs' is the data that the 'box3' holds</p>\n<p>so, for example:</p>\n<p>0000-0000---0001-0000---0010-0000---bbbb-bbbb</p>\n<p>0000 (of 0000-0000): is our box1, and it holds the value of: 0 (0000)<br>\n0001 (of 0001-0000): is our box2, and it holds the value of: 0 (0000)<br>\n0002 (of 0001-0000): is our box3, and it holds the value of: 0 (0000)<br>\nbbbb (of bbbb-bbbb): would be our box4, but I'm not going further, as if I was, I'd use the '0' or '1', as that's how computers work (there's no 'b', digital/memory is just a long series of a pattern of: '0s' and '1s')</p>\n<p>so, you specify the box (addressing):</p>\n<p>0001 (box2)</p>\n<p>then you specify the value that it stores/holds: 1111 = 15 = (2^3 x 1) + (2^2 x 1) + (2^1 x 1) + (2^0 x 1) = (8) + (4) + (2) + (1) = 15</p>\n<p>0001-1111 ---&gt; 'box2' has the value of '15' stored/held in it</p>\n<hr>\n<p>0001-0100 ---&gt; 'box2' has the value of '4' stored/held in it</p>\n<p>0000-1000 ---&gt; 'box1' has the value of '8' stored/held in it</p>\n<p>0010-0010 ---&gt; 'box3' has the value of '2' stored/held in it</p>\n<p>and thus, now our memory would be this in machine language:</p>\n<p>000010000001010000100010.....<br>\n(0000-1000---0001-0100---0010-0010......)<br>\n(box1: 8 --- box2: 4 --- box3: 2 --- ....)</p>\n<p>anyways, that's why lots of old games only use 255 as their max stat, and if the programming doesn't handle it, going over 255, causes it to return and start from 0 again. maybe you've played some games where this has happened...</p>\n<p>just a brief conceptual 'toe-dipping' into Assembly language (which is what the \"hexadecimal game hacking editors\" are doing/using)</p>\n<p>so, if you're interested in Assembly (do NOT try/mess-with this stuff unless you know what you're doing as you're messing around with the memory of your computer, and can ruin your computer):</p>\n<p>http://www.plantation-productions.com/Webster/www.artofasm.com/DOS/index.html<br>\nhttp://www.c-jump.com/CIS77/CIS77syllabus.htm<br>\n(and many other links, there's different types of Assembly Languages too, we learned the original intel one: MASM32: M:microsoft ASM:assembly 32:bits)</p>\n<hr>\n<p>here's a quick 'rosetta stone' for number systems:</p>\n<p>value vs decimal vs binary vs octal vs hexadecimal<br>\n0 vs 00 vs 0000-0000 vs 000 vs 00<br>\n1 vs 01 vs 0000-0001 vs 001 vs 01<br>\n2 vs 02 vs 0000-0010 vs 002 vs 02<br>\n3 vs 03 vs 0000-0011 vs 003 vs 03<br>\n4 vs 04 vs 0000-0100 vs 004 vs 04<br>\n5 vs 05 vs 0000-0101 vs 005 vs 05<br>\n6 vs 06 vs 0000-0110 vs 006 vs 06<br>\n7 vs 07 vs 0000-0111 vs 007 vs 07<br>\n8 vs 08 vs 0000-1000 vs 010 vs 08<br>\n9 vs 09 vs 0000-1001 vs 011 vs 09<br>\n10 vs 10 vs 0000-1010 vs 012 vs 0A<br>\n11 vs 11 vs 0000-1011 vs 013 vs 0B<br>\n12 vs 12 vs 0000-1100 vs 014 vs 0C<br>\n13 vs 13 vs 0000-1101 vs 015 vs 0D<br>\n14 vs 14 vs 0000-1110 vs 016 vs 0E<br>\n15 vs 15 vs 0000-1111 vs 017 vs 0F<br>\n16 vs 16 vs 0001-0000 vs 020 vs 10<br>\n17 vs 17 vs 0001-0001 vs 021 vs 11<br>\n...<br>\n100 vs 100 vs 0110-0100 vs 144 vs 64</p>\n<p>or just use an online converter, such as: http://coderstoolbox.net/number/</p>\n<p>using programming to do the number system conversions for us, hehe :D</p>\n\n",
      "PostDate": "2017-04-18T12:08:30.6144993Z",
      "LastEditDate": "2017-04-18T12:49:35.1056046Z"
    },
    {
      "PostId": "1ffafc5d-7399-4298-a9c6-d52493f06841",
      "UserId": 288307,
      "Username": "crystalwizard",
      "AvatarUrl": "http://i.imgur.com/3AxpbN7b.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's a memory consideration. How many bits are you reserving for the level or the hit points? Do you really NEED to reserve that much space? Is anything really accomplished in a game that lets you have 9999 hp that isn't accomplished in a game that lets you have 999 hp?",
      "EditableFormat": "markdown",
      "HTML": "<p>It's a memory consideration. How many bits are you reserving for the level or the hit points? Do you really NEED to reserve that much space? Is anything really accomplished in a game that lets you have 9999 hp that isn't accomplished in a game that lets you have 999 hp?</p>\n\n",
      "PostDate": "2017-04-23T02:52:15.0333511Z",
      "LastEditDate": "2017-04-23T02:52:48.4817908Z"
    }
  ]
}
