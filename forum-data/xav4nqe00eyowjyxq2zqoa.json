{
  "Topic": {
    "TopicId": "xav4nqe00eyowjyxq2zqoa",
    "ForumId": "10",
    "Title": "Is Flag the same thing as string? (solved)",
    "LastUpdated": "2019-06-07T04:03:40.100534Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "f08f1341-adf0-4c37-86d6-91eb6a86555a",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd like to put a string skinnable on a creature so i can skin it, does it mean flag in the code? If not im a bit confused... I'm not advanced yet for coding much so i like to use the events system thank you ;)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd like to put a string skinnable on a creature so i can skin it, does it mean flag in the code? If not im a bit confused... I'm not advanced yet for coding much so i like to use the events system thank you ;)</p>\n\n",
      "PostDate": "2019-06-07T04:03:40.100534Z",
      "LastEditDate": "2019-06-07T14:31:58.6683072Z",
      "link": null
    },
    {
      "PostId": "51babe5b-7807-43ab-a2c2-d9ab1901d2cd",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n-------------------\r\n\r\ndifference between using Strings, Booleans (\"flags\"), and Lists/Dictionaries\r\n\r\n(using the common conditions / status effects within rpgs for the conceptual example of the differences between the Attribute Types)\r\n\r\n-------------------------\r\n\r\nStrings:\r\n\r\n(Only able to have a single Value/Effect at a time, but able to have multiple effects to select from, per String Attribute, but don't need a lot of Attributes, like you do if using Boolean Attributes)\r\n\r\n(err, maybe this is more clear way of describing Strings: a single String Attribute can have multiple different effects/Values, but only one effect/Value of them at a time)\r\n\r\nplayer.condition_string_attribute = \"normal\"\r\n// or:\r\n// player.condition_string_attribute = \"dead\"\r\n// player.condition_string_attribute = \"poisoned\"\r\n// player.condition_string_attribute = \"paralyzed\"\r\n// player.condition_string_attribute = \"asleep\"\r\n\r\n```\r\nif (player.condition_string_attribute = \"normal\") {\r\n  msg (\"NORMAL\")\r\n} else if (player.condition_string_attribute = \"dead\") {\r\n  msg (\"DEAD\")\r\n} else if (player.condition_string_attribute = \"asleep\") {\r\n  msg (\"ASLEEP\")\r\n} else if (player.condition_string_attribute = \"poisoned\") {\r\n  msg (\"POISONED\")\r\n} else if (player.condition_string_attribute = \"paralyzed\") {\r\n  msg (\"PARALYZED\")\r\n}\r\n```\r\n-------\r\n\r\nBooleans (\"flags\"):\r\n\r\nthink of them as \"light switches\" which you can \"flip/flag/toggle\" on/off, but they use the special/reserved values of 'true' and 'false'\r\n\r\neasiest to understand their usage, able to have multiple effects at the same time, but very cumbersome (need lots of Boolean Attributes, as you need a Boolean Attribute for each desired effect, and have to adjust some/all of them every time, you want to change the effect):\r\n\r\n// player is 'normal' conditioned:\r\n\r\nplayer.normal_boolean_attribute = true\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = false\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = false\r\n\r\n// player is 'dead' conditioned:\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = true\r\nplayer.poisoned_boolean_attribute = false\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = false\r\n\r\n// player is 'poisoned' conditioned:\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = true\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = false\r\n\r\n// player is 'asleep' conditioned:\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = false\r\nplayer.asleep_boolean_attribute = true\r\nplayer.paralyzed_boolean_attribute = false\r\n\r\n// player is 'paralyzed' conditioned:\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = false\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = true\r\n\r\n// player is both 'poisoned' and 'paralyzed' conditioned:\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = true\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = true\r\n\r\n// player is \"all of them\" conditioned (doesn't make logical sense for this case/example I'm using, but this is just an example for you, lol):\r\n\r\nplayer.normal_boolean_attribute = true\r\nplayer.dead_boolean_attribute = true\r\nplayer.poisoned_boolean_attribute = true\r\nplayer.asleep_boolean_attribute = true\r\nplayer.paralyzed_boolean_attribute = true\r\n\r\n// player is \"none of them\" conditioned (doesn't make logical sense for this case/example I'm using, but this is just an example for you, lol):\r\n\r\nplayer.normal_boolean_attribute = false\r\nplayer.dead_boolean_attribute = false\r\nplayer.poisoned_boolean_attribute = false\r\nplayer.asleep_boolean_attribute = false\r\nplayer.paralyzed_boolean_attribute = false\r\n\r\n```\r\nif (player.normal_boolean_attribute) {\r\n  msg (\"NORMAL\")\r\n} else {\r\n  msg (\"NOT NORMAL\")\r\n}\r\n\r\nif (player.dead_boolean_attribute) {\r\n  msg (\"DEAD\")\r\n} else {\r\n  msg (\"NOT DEAD\")\r\n}\r\n\r\nif (player.asleep_boolean_attribute) {\r\n  msg (\"ASLEEP\")\r\n} else {\r\n  msg (\"NOT ASLEEP\")\r\n}\r\n\r\nif (player.poisoned_boolean_attribute) {\r\n  msg (\"POISONED\")\r\n} else {\r\n  msg (\"NOT POISONED\")\r\n}\r\n\r\nif (player.paralyzed_boolean_attribute) {\r\n  msg (\"PARALYZED\")\r\n} else {\r\n  msg (\"NOT PARALYZED\")\r\n}\r\n```\r\n\r\n---------\r\n\r\nLists/Dictionaries:\r\n\r\n(too tired/lazy, so no Dictionary examples)\r\n\r\npretty much the same as Strings, except can hold multiple values at the same time unlike a String\r\n\r\n(a bit more code work and more code complexity, but is more efficient than using Strings and Booleans, for larger/greater scale/complexity of game design/mechanics/systems)\r\n\r\nplayer.condition_stringlist_attribute = NewStringList ()\r\n\r\nlist add (player.condition_stringlist_attribute, \"normal\")\r\n// player is only 'normal' conditioned\r\n\r\n// (continuing from the above state)\r\nlist remove (player.condition_stringlist_attribute, \"normal\")\r\nlist add (player.condition_stringlist_attribute, \"dead\")\r\n// player is only 'dead' conditioned\r\n\r\n// (continuing from the above state)\r\nlist remove (player.condition_stringlist_attribute, \"dead\")\r\nlist add (player.condition_stringlist_attribute, \"poisoned\")\r\nlist add (player.condition_stringlist_attribute, \"paralyzed\")\r\n// player is both 'poisoned' and 'paralyzed' conditioned\r\n\r\n// (continuing from the above state)\r\nlist remove (player.condition_stringlist_attribute, \"poisoned\")\r\nlist remove (player.condition_stringlist_attribute, \"paralyzed\")\r\nlist add (player.condition_stringlist_attribute, \"asleep\")\r\n// player is only 'asleep' conditioned\r\n\r\n// (continuing from the above state)\r\nlist add (player.condition_stringlist_attribute, \"normal\")\r\nlist add (player.condition_stringlist_attribute, \"dead\")\r\nlist add (player.condition_stringlist_attribute, \"paralyzed\")\r\nlist add (player.condition_stringlist_attribute, \"poisoned\")\r\n// player is \"all of them\" (normal, asleep, dead, paralyzed, poisoned) conditioned\r\n\r\n// (continuing from the above state)\r\nlist remove (player.condition_stringlist_attribute, \"normal\")\r\nlist remove (player.condition_stringlist_attribute, \"dead\")\r\nlist remove (player.condition_stringlist_attribute, \"paralyzed\")\r\nlist remove (player.condition_stringlist_attribute, \"poisoned\")\r\nlist remove (player.condition_stringlist_attribute, \"asleep\")\r\n// player is \"none of them\" conditioned\r\n\r\n```\r\n// for a numbered/ordered list:\r\n\r\nDisplayList (player.condition_stringlist_attribute, 1)\r\n// or (not sure on the 2nd argument/parameter type):\r\nDisplayList (player.condition_stringlist_attribute, true)\r\n\r\n1 <===> true <===> yes <===> on <===> + (for example positive polarity/electrical charges in chemistry/physics)\r\n\r\n// for a NOT numbered/ordered list:\r\n\r\nDisplayList (player.condition_stringlist_attribute, 0)\r\n// or (not sure on the 2nd argument/parameter type):\r\nDisplayList (player.condition_stringlist_attribute, false)\r\n\r\n0 <===> false <===> no <===> off <===> - (for example negative polarity/electrical charges in chemistry/physics)\r\n```\r\n\r\nand/or:\r\n\r\n```\r\nif (ListContains (player.condition_stringlist_attribute, \"normal\")) {\r\n  msg (\"NORMAL\")\r\n} else {\r\n  msg (\"NOT NORMAL\")\r\n}\r\n\r\nif (ListContains (player.condition_stringlist_attribute, \"dead\")) {\r\n  msg (\"DEAD\")\r\n} else {\r\n  msg (\"NOT DEAD\")\r\n}\r\n\r\nif (ListContains (player.condition_stringlist_attribute, \"asleep\")) {\r\n  msg (\"ASLEEP\")\r\n} else {\r\n  msg (\"NOT ASLEEP\")\r\n}\r\n\r\nif (ListContains (player.condition_stringlist_attribute, \"poisoned\")) {\r\n  msg (\"POISONED\")\r\n} else {\r\n  msg (\"NOT POISONED\")\r\n}\r\n\r\nif (ListContains (player.condition_stringlist_attribute, \"paralyzed\")) {\r\n  msg (\"PARALYZED\")\r\n} else {\r\n  msg (\"NOT PARALYZED\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>difference between using Strings, Booleans (\"flags\"), and Lists/Dictionaries</p>\n<p>(using the common conditions / status effects within rpgs for the conceptual example of the differences between the Attribute Types)</p>\n<hr>\n<p>Strings:</p>\n<p>(Only able to have a single Value/Effect at a time, but able to have multiple effects to select from, per String Attribute, but don't need a lot of Attributes, like you do if using Boolean Attributes)</p>\n<p>(err, maybe this is more clear way of describing Strings: a single String Attribute can have multiple different effects/Values, but only one effect/Value of them at a time)</p>\n<p>player.condition_string_attribute = \"normal\"<br>\n// or:<br>\n// player.condition_string_attribute = \"dead\"<br>\n// player.condition_string_attribute = \"poisoned\"<br>\n// player.condition_string_attribute = \"paralyzed\"<br>\n// player.condition_string_attribute = \"asleep\"</p>\n<pre><code>if (player.condition_string_attribute = \"normal\") {\n  msg (\"NORMAL\")\n} else if (player.condition_string_attribute = \"dead\") {\n  msg (\"DEAD\")\n} else if (player.condition_string_attribute = \"asleep\") {\n  msg (\"ASLEEP\")\n} else if (player.condition_string_attribute = \"poisoned\") {\n  msg (\"POISONED\")\n} else if (player.condition_string_attribute = \"paralyzed\") {\n  msg (\"PARALYZED\")\n}\n</code></pre>\n<hr>\n<p>Booleans (\"flags\"):</p>\n<p>think of them as \"light switches\" which you can \"flip/flag/toggle\" on/off, but they use the special/reserved values of 'true' and 'false'</p>\n<p>easiest to understand their usage, able to have multiple effects at the same time, but very cumbersome (need lots of Boolean Attributes, as you need a Boolean Attribute for each desired effect, and have to adjust some/all of them every time, you want to change the effect):</p>\n<p>// player is 'normal' conditioned:</p>\n<p>player.normal_boolean_attribute = true<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = false<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = false</p>\n<p>// player is 'dead' conditioned:</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = true<br>\nplayer.poisoned_boolean_attribute = false<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = false</p>\n<p>// player is 'poisoned' conditioned:</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = true<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = false</p>\n<p>// player is 'asleep' conditioned:</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = false<br>\nplayer.asleep_boolean_attribute = true<br>\nplayer.paralyzed_boolean_attribute = false</p>\n<p>// player is 'paralyzed' conditioned:</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = false<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = true</p>\n<p>// player is both 'poisoned' and 'paralyzed' conditioned:</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = true<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = true</p>\n<p>// player is \"all of them\" conditioned (doesn't make logical sense for this case/example I'm using, but this is just an example for you, lol):</p>\n<p>player.normal_boolean_attribute = true<br>\nplayer.dead_boolean_attribute = true<br>\nplayer.poisoned_boolean_attribute = true<br>\nplayer.asleep_boolean_attribute = true<br>\nplayer.paralyzed_boolean_attribute = true</p>\n<p>// player is \"none of them\" conditioned (doesn't make logical sense for this case/example I'm using, but this is just an example for you, lol):</p>\n<p>player.normal_boolean_attribute = false<br>\nplayer.dead_boolean_attribute = false<br>\nplayer.poisoned_boolean_attribute = false<br>\nplayer.asleep_boolean_attribute = false<br>\nplayer.paralyzed_boolean_attribute = false</p>\n<pre><code>if (player.normal_boolean_attribute) {\n  msg (\"NORMAL\")\n} else {\n  msg (\"NOT NORMAL\")\n}\n\nif (player.dead_boolean_attribute) {\n  msg (\"DEAD\")\n} else {\n  msg (\"NOT DEAD\")\n}\n\nif (player.asleep_boolean_attribute) {\n  msg (\"ASLEEP\")\n} else {\n  msg (\"NOT ASLEEP\")\n}\n\nif (player.poisoned_boolean_attribute) {\n  msg (\"POISONED\")\n} else {\n  msg (\"NOT POISONED\")\n}\n\nif (player.paralyzed_boolean_attribute) {\n  msg (\"PARALYZED\")\n} else {\n  msg (\"NOT PARALYZED\")\n}\n</code></pre>\n<hr>\n<p>Lists/Dictionaries:</p>\n<p>(too tired/lazy, so no Dictionary examples)</p>\n<p>pretty much the same as Strings, except can hold multiple values at the same time unlike a String</p>\n<p>(a bit more code work and more code complexity, but is more efficient than using Strings and Booleans, for larger/greater scale/complexity of game design/mechanics/systems)</p>\n<p>player.condition_stringlist_attribute = NewStringList ()</p>\n<p>list add (player.condition_stringlist_attribute, \"normal\")<br>\n// player is only 'normal' conditioned</p>\n<p>// (continuing from the above state)<br>\nlist remove (player.condition_stringlist_attribute, \"normal\")<br>\nlist add (player.condition_stringlist_attribute, \"dead\")<br>\n// player is only 'dead' conditioned</p>\n<p>// (continuing from the above state)<br>\nlist remove (player.condition_stringlist_attribute, \"dead\")<br>\nlist add (player.condition_stringlist_attribute, \"poisoned\")<br>\nlist add (player.condition_stringlist_attribute, \"paralyzed\")<br>\n// player is both 'poisoned' and 'paralyzed' conditioned</p>\n<p>// (continuing from the above state)<br>\nlist remove (player.condition_stringlist_attribute, \"poisoned\")<br>\nlist remove (player.condition_stringlist_attribute, \"paralyzed\")<br>\nlist add (player.condition_stringlist_attribute, \"asleep\")<br>\n// player is only 'asleep' conditioned</p>\n<p>// (continuing from the above state)<br>\nlist add (player.condition_stringlist_attribute, \"normal\")<br>\nlist add (player.condition_stringlist_attribute, \"dead\")<br>\nlist add (player.condition_stringlist_attribute, \"paralyzed\")<br>\nlist add (player.condition_stringlist_attribute, \"poisoned\")<br>\n// player is \"all of them\" (normal, asleep, dead, paralyzed, poisoned) conditioned</p>\n<p>// (continuing from the above state)<br>\nlist remove (player.condition_stringlist_attribute, \"normal\")<br>\nlist remove (player.condition_stringlist_attribute, \"dead\")<br>\nlist remove (player.condition_stringlist_attribute, \"paralyzed\")<br>\nlist remove (player.condition_stringlist_attribute, \"poisoned\")<br>\nlist remove (player.condition_stringlist_attribute, \"asleep\")<br>\n// player is \"none of them\" conditioned</p>\n<pre><code>// for a numbered/ordered list:\n\nDisplayList (player.condition_stringlist_attribute, 1)\n// or (not sure on the 2nd argument/parameter type):\nDisplayList (player.condition_stringlist_attribute, true)\n\n1 &lt;===&gt; true &lt;===&gt; yes &lt;===&gt; on &lt;===&gt; + (for example positive polarity/electrical charges in chemistry/physics)\n\n// for a NOT numbered/ordered list:\n\nDisplayList (player.condition_stringlist_attribute, 0)\n// or (not sure on the 2nd argument/parameter type):\nDisplayList (player.condition_stringlist_attribute, false)\n\n0 &lt;===&gt; false &lt;===&gt; no &lt;===&gt; off &lt;===&gt; - (for example negative polarity/electrical charges in chemistry/physics)\n</code></pre>\n<p>and/or:</p>\n<pre><code>if (ListContains (player.condition_stringlist_attribute, \"normal\")) {\n  msg (\"NORMAL\")\n} else {\n  msg (\"NOT NORMAL\")\n}\n\nif (ListContains (player.condition_stringlist_attribute, \"dead\")) {\n  msg (\"DEAD\")\n} else {\n  msg (\"NOT DEAD\")\n}\n\nif (ListContains (player.condition_stringlist_attribute, \"asleep\")) {\n  msg (\"ASLEEP\")\n} else {\n  msg (\"NOT ASLEEP\")\n}\n\nif (ListContains (player.condition_stringlist_attribute, \"poisoned\")) {\n  msg (\"POISONED\")\n} else {\n  msg (\"NOT POISONED\")\n}\n\nif (ListContains (player.condition_stringlist_attribute, \"paralyzed\")) {\n  msg (\"PARALYZED\")\n} else {\n  msg (\"NOT PARALYZED\")\n}\n</code></pre>\n\n",
      "PostDate": "2019-06-07T08:01:59.795445Z",
      "LastEditDate": "2019-06-07T08:40:52.7139802Z",
      "link": null
    },
    {
      "PostId": "9e0d72f8-df57-4cd1-a455-17818a5a2b65",
      "UserId": 56551,
      "Username": "XanMag",
      "AvatarUrl": "https://secure.gravatar.com/avatar/4b45a3afd18077f76f6569225c422bdb?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Easiest for me is...\r\n\r\nIf you need to kill this thing first to skin it, just add flag (flagname ‘skin1’ (or something like that)) upon the things death.  Then add a verb ‘skin’ to the thing.  Finally, if thing has flag ‘skin1’, then add whatever scripts you want to happen while skinning.  Also, add an else script here to print a message like “You can’t skin that thing.  It’s still alive!”  \r\n\r\nI’ve also had luck with removing the “living object” from the game once it is dead and replacing it with a “carcass” once it’s killed.  That way it keeps your scripts totally separate and the player will never know a difference!\r\n\r\nOr... if skinning it is killing it, then just add a flag to the critter right off the bat and add your skin scripts to the verb.\r\n\r\nIf you’d like a simple example, I’ll be glad to provide.",
      "EditableFormat": "markdown",
      "HTML": "<p>Easiest for me is...</p>\n<p>If you need to kill this thing first to skin it, just add flag (flagname ‘skin1’ (or something like that)) upon the things death.  Then add a verb ‘skin’ to the thing.  Finally, if thing has flag ‘skin1’, then add whatever scripts you want to happen while skinning.  Also, add an else script here to print a message like “You can’t skin that thing.  It’s still alive!”</p>\n<p>I’ve also had luck with removing the “living object” from the game once it is dead and replacing it with a “carcass” once it’s killed.  That way it keeps your scripts totally separate and the player will never know a difference!</p>\n<p>Or... if skinning it is killing it, then just add a flag to the critter right off the bat and add your skin scripts to the verb.</p>\n<p>If you’d like a simple example, I’ll be glad to provide.</p>\n\n",
      "PostDate": "2019-06-07T14:14:48.9497939Z",
      "LastEditDate": "2019-06-07T14:15:45.8281445Z",
      "link": null
    },
    {
      "PostId": "e44f056b-4e81-4bd4-bc09-1bfc3fb50f7f",
      "UserId": 422289,
      "Username": "Vitokin",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes that works great ty ;)!!!",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes that works great ty ;)!!!</p>\n\n",
      "PostDate": "2019-06-07T14:31:42.0826902Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
