{
  "Topic": {
    "TopicId": "bxjgjipfduobp49hwqiooq",
    "ForumId": "10",
    "Title": "Hiding and Showing \"Verbs\"",
    "LastUpdated": "2016-07-20T00:22:58.4871338Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "ad461088-2227-4a0c-add5-4b8bc76c83bc",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was also wondering, how you \"hide\" and \"show\" verbs once certain parameters are met....either in conversation or whatever other variables you can think of. Is that even possible?",
      "EditableFormat": "markdown",
      "HTML": "<p>I was also wondering, how you \"hide\" and \"show\" verbs once certain parameters are met....either in conversation or whatever other variables you can think of. Is that even possible?</p>\n\n",
      "PostDate": "2016-07-20T00:22:58.4871338Z",
      "LastEditDate": null
    },
    {
      "PostId": "a6e448a4-d94b-4685-9da5-ab4a195be484",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm not sure of how the built-in system works with the hyperlinks (there's more toggle options and etc stufff involved I think), but for  at least th button aspect of Verbs:\r\n\r\nthey're displayed in the 'object and places' pane via that Object's 'displayverbs' (when the Object is not in your inventory) and 'inventoryverbs' (when the Object is in your inventory) String List Attributes.\r\n\r\nfor example (using a Command to demonstrate it):\r\n\r\n```\r\n<command name=\"add_remove_fight_verb_command\">\r\n  <pattern>togglefight</pattern>\r\n  <script>\r\n    if (not ListContains (player.displayverbs, \"fight\")) {\r\n      list add (player.displayverbs, \"fight\")\r\n    } else if (ListContains (player.displayverbs, \"fight\")) {\r\n      list remove (player.displayverbs, \"fight\")\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<command name=\"add_remove_talk_verb_command\">\r\n  <pattern>toggletalk</pattern>\r\n  <script>\r\n    if (ListContains (player.displayverbs, \"talk\")) {\r\n      list remove (player.displayverbs, \"talk\")\r\n    } else if (not ListContains (player.displayverbs, \"talk\")) {\r\n      list add (player.displayverbs, \"talk\")\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<command name=\"add_remove_look_verb_command\">\r\n  <pattern>togglelook</pattern>\r\n  <script>\r\n    if (ListContains (player.displayverbs, \"look\")) {\r\n      list remove (player.displayverbs, \"look\")\r\n    } else if (not ListContains (player.displayverbs, \"look\")) {\r\n      list add (player.displayverbs, \"look\")\r\n    }\r\n  </script>\r\n</command>\r\n\r\n<object name=\"orc\">\r\n  <attr name=\"talk\" type=\"script\">\r\n   msg (\"You talk to the orc.\")\r\n  </attr>\r\n  <attr name=\"look\" type=\"script\">\r\n    msg (\"You look at the orc.\")\r\n  </attr>\r\n  <attr name=\"fight\" type=\"script\">\r\n    msg (\"You fight the orc.\")\r\n  </attr>\r\n  <attr name=\"displayverbs\" type=\"simplestringlist\">talk;look</attr>\r\n</object>\r\n\r\n<verb>\r\n  <property>talk</property>\r\n  <pattern>talk</pattern>\r\n  <defaultexpression>You can't talk to that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>look</property>\r\n  <pattern>look</pattern>\r\n  <defaultexpression>You can't look at that!</defaultexpression>\r\n</verb>\r\n\r\n<verb>\r\n  <property>fight</property>\r\n  <pattern>fight</pattern>\r\n  <defaultexpression>You can't fight that!</defaultexpression>\r\n</verb>\r\n```\r\n\r\n-----------\r\n\r\nif you create a new List Attribute (with same name for same object of course), it over-rides (effectively erases) the old one, which can be sometimes better than just adding/removing items from the List Attribute, and other times, the adding/removing items is better than creating a new List Attribute (again, with same name for same object, of course) that overrides the old one.\r\n\r\none way to over-ride an existing list:\r\n\r\n// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")\r\norc.displayverbs = split (\"loot;eat;burn\", \";\")\r\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"loot;eat;burn\", \";\")\r\n\r\n// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")\r\norc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")\r\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")\r\n\r\n// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")\r\norc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")\r\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")\r\n\r\nand the other way to over-ride an existing List (whatever items it had, will be wiped out/removed/erased, it's wiped clean):\r\n\r\n// old List example: orc.displayverbs = split (\"talk;look;fight\", \";\")\r\norc.displayverbs = NewStringList ()\r\n// new (over-ridden) List conceptually: orc.displayverbs = split (\"{blank/empty};{blank/empty};{etc etc etc blank/empty}, \";\")\r\n\r\nto then add your items to the blank item'ed new (over-ridden) List:\r\n\r\nlist add (orc.displayverbs, \"loot\")\r\nlist add (orc.displayverbs, \"eat\")\r\nlist add (orc.displayverbs, \"burn\")\r\n// now the List, in code would look like this, conceptually: orc.displayverbs = split (\"loot; eat; burn\", \";\")\r\n// notice how there's no 'talk', 'chat', and nor 'fight' items\r\n\r\nif we want to add those back into the new list:\r\n\r\n// (now as) old list: orc.displayverbs = split (\"loot; eat; burn\", \";\")\r\nlist add (orc.displayverbs, \"talk\")\r\nlist add (orc.displayverbs, \"look\")\r\nlist add (orc.displayverbs, \"fight\")\r\n// new list, in code would look like this conceptually: orc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")\r\n\r\nif we wanted to include those old items with the new items in one go through creating a new (over-riding) list, we'd have done this:\r\n\r\n// old List example: orc.displayverbs = split (\"talk;look;fight\", \";\")\r\norc.displayverbs = NewStringList ()\r\nlist add (orc.displayverbs, \"talk\")\r\nlist add (orc.displayverbs, \"look\")\r\nlist add (orc.displayverbs, \"fight\")\r\nlist add (orc.displayverbs, \"loot\")\r\nlist add (orc.displayverbs, \"eat\")\r\nlist add (orc.displayverbs, \"burn\")\r\n// new list, in code it would look like this conceptually: orc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm not sure of how the built-in system works with the hyperlinks (there's more toggle options and etc stufff involved I think), but for  at least th button aspect of Verbs:</p>\n<p>they're displayed in the 'object and places' pane via that Object's 'displayverbs' (when the Object is not in your inventory) and 'inventoryverbs' (when the Object is in your inventory) String List Attributes.</p>\n<p>for example (using a Command to demonstrate it):</p>\n<pre><code>&lt;command name=\"add_remove_fight_verb_command\"&gt;\n  &lt;pattern&gt;togglefight&lt;/pattern&gt;\n  &lt;script&gt;\n    if (not ListContains (player.displayverbs, \"fight\")) {\n      list add (player.displayverbs, \"fight\")\n    } else if (ListContains (player.displayverbs, \"fight\")) {\n      list remove (player.displayverbs, \"fight\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=\"add_remove_talk_verb_command\"&gt;\n  &lt;pattern&gt;toggletalk&lt;/pattern&gt;\n  &lt;script&gt;\n    if (ListContains (player.displayverbs, \"talk\")) {\n      list remove (player.displayverbs, \"talk\")\n    } else if (not ListContains (player.displayverbs, \"talk\")) {\n      list add (player.displayverbs, \"talk\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;command name=\"add_remove_look_verb_command\"&gt;\n  &lt;pattern&gt;togglelook&lt;/pattern&gt;\n  &lt;script&gt;\n    if (ListContains (player.displayverbs, \"look\")) {\n      list remove (player.displayverbs, \"look\")\n    } else if (not ListContains (player.displayverbs, \"look\")) {\n      list add (player.displayverbs, \"look\")\n    }\n  &lt;/script&gt;\n&lt;/command&gt;\n\n&lt;object name=\"orc\"&gt;\n  &lt;attr name=\"talk\" type=\"script\"&gt;\n   msg (\"You talk to the orc.\")\n  &lt;/attr&gt;\n  &lt;attr name=\"look\" type=\"script\"&gt;\n    msg (\"You look at the orc.\")\n  &lt;/attr&gt;\n  &lt;attr name=\"fight\" type=\"script\"&gt;\n    msg (\"You fight the orc.\")\n  &lt;/attr&gt;\n  &lt;attr name=\"displayverbs\" type=\"simplestringlist\"&gt;talk;look&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;talk&lt;/property&gt;\n  &lt;pattern&gt;talk&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't talk to that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;look&lt;/property&gt;\n  &lt;pattern&gt;look&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't look at that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n\n&lt;verb&gt;\n  &lt;property&gt;fight&lt;/property&gt;\n  &lt;pattern&gt;fight&lt;/pattern&gt;\n  &lt;defaultexpression&gt;You can't fight that!&lt;/defaultexpression&gt;\n&lt;/verb&gt;\n</code></pre>\n<hr>\n<p>if you create a new List Attribute (with same name for same object of course), it over-rides (effectively erases) the old one, which can be sometimes better than just adding/removing items from the List Attribute, and other times, the adding/removing items is better than creating a new List Attribute (again, with same name for same object, of course) that overrides the old one.</p>\n<p>one way to over-ride an existing list:</p>\n<p>// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")<br>\norc.displayverbs = split (\"loot;eat;burn\", \";\")<br>\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"loot;eat;burn\", \";\")</p>\n<p>// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")<br>\norc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")<br>\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")</p>\n<p>// old list: orc.displayverbs = split (\"talk;look;fight\", \";\")<br>\norc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")<br>\n// new (over-ridden) list in code would conceptually look like this: orc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")</p>\n<p>and the other way to over-ride an existing List (whatever items it had, will be wiped out/removed/erased, it's wiped clean):</p>\n<p>// old List example: orc.displayverbs = split (\"talk;look;fight\", \";\")<br>\norc.displayverbs = NewStringList ()<br>\n// new (over-ridden) List conceptually: orc.displayverbs = split (\"{blank/empty};{blank/empty};{etc etc etc blank/empty}, \";\")</p>\n<p>to then add your items to the blank item'ed new (over-ridden) List:</p>\n<p>list add (orc.displayverbs, \"loot\")<br>\nlist add (orc.displayverbs, \"eat\")<br>\nlist add (orc.displayverbs, \"burn\")<br>\n// now the List, in code would look like this, conceptually: orc.displayverbs = split (\"loot; eat; burn\", \";\")<br>\n// notice how there's no 'talk', 'chat', and nor 'fight' items</p>\n<p>if we want to add those back into the new list:</p>\n<p>// (now as) old list: orc.displayverbs = split (\"loot; eat; burn\", \";\")<br>\nlist add (orc.displayverbs, \"talk\")<br>\nlist add (orc.displayverbs, \"look\")<br>\nlist add (orc.displayverbs, \"fight\")<br>\n// new list, in code would look like this conceptually: orc.displayverbs = split (\"loot;eat;burn;talk;look;fight\", \";\")</p>\n<p>if we wanted to include those old items with the new items in one go through creating a new (over-riding) list, we'd have done this:</p>\n<p>// old List example: orc.displayverbs = split (\"talk;look;fight\", \";\")<br>\norc.displayverbs = NewStringList ()<br>\nlist add (orc.displayverbs, \"talk\")<br>\nlist add (orc.displayverbs, \"look\")<br>\nlist add (orc.displayverbs, \"fight\")<br>\nlist add (orc.displayverbs, \"loot\")<br>\nlist add (orc.displayverbs, \"eat\")<br>\nlist add (orc.displayverbs, \"burn\")<br>\n// new list, in code it would look like this conceptually: orc.displayverbs = split (\"talk;look;fight;loot;eat;burn\", \";\")</p>\n\n",
      "PostDate": "2016-07-20T01:48:19.9332511Z",
      "LastEditDate": "2016-07-20T02:58:37.3464674Z"
    },
    {
      "PostId": "3abb0add-8ebd-4acb-b611-18890c924686",
      "UserId": 248029,
      "Username": "Anonynn",
      "AvatarUrl": "http://i.imgur.com/28lV6nMb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, so you can use commands then. Thanks HK! :D :D",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, so you can use commands then. Thanks HK! :D :D</p>\n\n",
      "PostDate": "2016-07-20T02:05:17.4170815Z",
      "LastEditDate": null
    },
    {
      "PostId": "11325fb4-3983-44a8-ab2a-87ddd5b5e07a",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can use any Element (Function, Object's Verb / Object's Script Attribute, Command, Turnscript, Timer, Object Type,  etc etc) that can have scripting, as you can use the List usage scripting to add/remove items, and/or create a new  list and/or over-ride an existing one.\r\n\r\nthe display of  your Object's Verbs (Script Attributes that also have the 'Verb' creation tags with them in the game code --- or just use the GUI~Editor to create/add your Verbs and then use this scripting to manipulate them) in your pane, is controlled via what's inside of these built-in List Attributes:\r\n\r\nOBJECT_NAME.displayverbs\r\nOBJECT_NAME.inventoryverbs",
      "EditableFormat": "markdown",
      "HTML": "<p>You can use any Element (Function, Object's Verb / Object's Script Attribute, Command, Turnscript, Timer, Object Type,  etc etc) that can have scripting, as you can use the List usage scripting to add/remove items, and/or create a new  list and/or over-ride an existing one.</p>\n<p>the display of  your Object's Verbs (Script Attributes that also have the 'Verb' creation tags with them in the game code --- or just use the GUI~Editor to create/add your Verbs and then use this scripting to manipulate them) in your pane, is controlled via what's inside of these built-in List Attributes:</p>\n<p>OBJECT_NAME.displayverbs<br>\nOBJECT_NAME.inventoryverbs</p>\n\n",
      "PostDate": "2016-07-20T02:12:56.6627926Z",
      "LastEditDate": "2016-07-20T02:22:52.7190613Z"
    },
    {
      "PostId": "5352103e-4f25-49ab-967b-d47d323c8aa4",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "P.S.\r\n\r\nPixie has a guide on all of this stuff (using/manipulating its items/adding items/removing items/creating/over-riding of the built-in 'displayverbs' and 'inventoryverbs' (as well as for any other built-in List Attributes and also your own custom List Attributes you create too) String List Attributes) here:\r\n\r\nhttp://textadventures.co.uk/forum/samples/topic/5023/how-to-use-display-verbs-and-inventory-verbs-effectively",
      "EditableFormat": "markdown",
      "HTML": "<p>P.S.</p>\n<p>Pixie has a guide on all of this stuff (using/manipulating its items/adding items/removing items/creating/over-riding of the built-in 'displayverbs' and 'inventoryverbs' (as well as for any other built-in List Attributes and also your own custom List Attributes you create too) String List Attributes) here:</p>\n<p>http://textadventures.co.uk/forum/samples/topic/5023/how-to-use-display-verbs-and-inventory-verbs-effectively</p>\n\n",
      "PostDate": "2016-07-20T02:14:54.5112226Z",
      "LastEditDate": "2016-07-20T02:57:19.6859669Z"
    }
  ]
}
