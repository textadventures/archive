{
  "Topic": {
    "TopicId": "reagzwmdgk6wesjc3lx4ua",
    "ForumId": "10",
    "Title": "Reset Displayverbs Ingame",
    "LastUpdated": "2021-12-08T14:54:36.5958666Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "4c0b1ec1-cbad-47e9-a469-dcbdc6369349",
      "UserId": 569662,
      "Username": "Dongers",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I have an Object that has its verbs changed multiple times during my game. I know mostly how this works, but I would like if someone could confirm the following for me:\r\n\r\nIf I use\r\n```name_of_object.displayverbs = name_of_object.displayverbs```\r\n\r\nThen it removes all the added displayverbs that weren't originally in the list at the beginning of the game, right?\r\nSo if my object started with only \"Look at\" and throughout the game gained a \"Bend\" \"Shatter\" \"Break\" etc. displayverb it would return to just \"Look at\", right?\r\nOr would I still need to manually remove the other displayverbs from the list?",
      "EditableFormat": "markdown",
      "HTML": "<p>So I have an Object that has its verbs changed multiple times during my game. I know mostly how this works, but I would like if someone could confirm the following for me:</p>\n<p>If I use<br>\n<code>name_of_object.displayverbs = name_of_object.displayverbs</code></p>\n<p>Then it removes all the added displayverbs that weren't originally in the list at the beginning of the game, right?<br>\nSo if my object started with only \"Look at\" and throughout the game gained a \"Bend\" \"Shatter\" \"Break\" etc. displayverb it would return to just \"Look at\", right?<br>\nOr would I still need to manually remove the other displayverbs from the list?</p>\n\n",
      "PostDate": "2021-12-08T14:54:36.5958666Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "877cf33d-c08f-47a9-9692-ef467b9a8d59",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "<details style=\"border: 1px dotted grey\"><summary>==> Click here for details on what that line actually does</summary>\r\nSimplified a little… Quest has both concrete and abstract attributes.\r\n\r\nWhen you type `name_of_object.name_of_attribute`, first Quest looks if the object has an attribute with that name. That's a \"concrete\" or \"direct\" attribute.\r\n\r\nIf there isn't one, it will look at the object's *types* (\"container\", \"wearable\", \"male\", etc) instead. If any of those has the requested attribute, it uses that. This is called an \"abstract\" or \"inherited\" attibute.\r\n\r\nTypes can't be modified while the game is running; so adding items to an abstract list will give an error.\r\n\r\n`objectname.attributename = some_value` always creates a concrete attribute, and sets it to that value.\r\n\r\nSo `name_of_object.displayverbs = name_of_object.displayverbs` is to replace an abstract attribute with a concrete one.</details>\r\n\r\nNo; that line just makes the displayverbs editable; it won't  change it at all.\r\n\r\nYou *might* be able to use:\r\n```\r\nname_of_object.displayverbs = null\r\n```\r\nThis deletes the attribute, which causes it to go back to its default value. That is, the list of displayverbs that all objects have by default (equal to `Split(\"Look at;Take\")`), plus any that are added by types such as \"npc\", \"wearable\", or \"lockable\". It won't recreate any that you added to that particular object in the editor.\r\n\r\nIf you're returning it to just \"Look at\", the easiest way would be:\r\n```\r\nname_of_object.displayverbs = Split(\"Look at\")\r\n```\r\n(note that you can use `Split` like that to get a list with one item in it. You do this because `displayverbs` has to be a list)",
      "EditableFormat": "markdown",
      "HTML": "<details style=\"border: 1px dotted grey\"><summary>==&gt; Click here for details on what that line actually does</summary>\nSimplified a little… Quest has both concrete and abstract attributes.\n<p>When you type <code>name_of_object.name_of_attribute</code>, first Quest looks if the object has an attribute with that name. That's a \"concrete\" or \"direct\" attribute.</p>\n<p>If there isn't one, it will look at the object's <em>types</em> (\"container\", \"wearable\", \"male\", etc) instead. If any of those has the requested attribute, it uses that. This is called an \"abstract\" or \"inherited\" attibute.</p>\n<p>Types can't be modified while the game is running; so adding items to an abstract list will give an error.</p>\n<p><code>objectname.attributename = some_value</code> always creates a concrete attribute, and sets it to that value.</p>\n<p>So <code>name_of_object.displayverbs = name_of_object.displayverbs</code> is to replace an abstract attribute with a concrete one.</p></details><p></p>\n<p>No; that line just makes the displayverbs editable; it won't  change it at all.</p>\n<p>You <em>might</em> be able to use:</p>\n<pre><code>name_of_object.displayverbs = null\n</code></pre>\n<p>This deletes the attribute, which causes it to go back to its default value. That is, the list of displayverbs that all objects have by default (equal to <code>Split(\"Look at;Take\")</code>), plus any that are added by types such as \"npc\", \"wearable\", or \"lockable\". It won't recreate any that you added to that particular object in the editor.</p>\n<p>If you're returning it to just \"Look at\", the easiest way would be:</p>\n<pre><code>name_of_object.displayverbs = Split(\"Look at\")\n</code></pre>\n<p>(note that you can use <code>Split</code> like that to get a list with one item in it. You do this because <code>displayverbs</code> has to be a list)</p>\n\n",
      "PostDate": "2021-12-08T16:27:07.0491268Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
