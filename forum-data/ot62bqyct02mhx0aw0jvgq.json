{
  "Topic": {
    "TopicId": "ot62bqyct02mhx0aw0jvgq",
    "ForumId": "10",
    "Title": "Default container message",
    "LastUpdated": "2020-09-26T07:39:10.8660116Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "3eee2765-36ec-487e-91a5-b589438c5b73",
      "UserId": 497177,
      "Username": "Jonathan O",
      "AvatarUrl": "https://secure.gravatar.com/avatar/132db8a5bac291ae51f5b4b3f20cbf8c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is it possible to change the default message when taking something out of a container?",
      "EditableFormat": "markdown",
      "HTML": "<p>Is it possible to change the default message when taking something out of a container?</p>\n\n",
      "PostDate": "2020-09-26T07:39:10.8660116Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2a22554c-1eda-4645-aff2-ea0de572ebe1",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oddly enough, this isn't easy.\r\n\r\nThe template `TakeSuccessful` is the default message for taking an object, and you can modify it as easily as any other template (as in, you can do it using the desktop editor but not on the web).\r\n\r\nHowever, specifying 'when taking it out of a container' means it would be somewhat different. This means you'd need to check whether the object is in a container or not and change the message depending on that.\r\n\r\nI can think of 3 ways to do that. Either by having a turnscript that modifies the `takemsg` of objects that are in reachable containers (complex, but can be used on the wweb version), by having objects automatically set their `takemsg` when they're moved, or by modifying the `DoTake` function itself (simpler on desktop version, not on the web version)\r\n\r\n**Changing `takemsg` (by turnscript)**\r\nGiving each object a boolean attribute `changed_takemsg` to indicate whether we've modified its takemsg. This version also allows containers to have an attribute `takefrommsg` for taking objects out of them, and objects to have an attribute `takemsgfromcontainer` for taking them out of a container.\r\nYou might want to change the order of some parts of this, depending which message you want to take priority\r\n```\r\nforeach (object, ScopeReachableNotHeld()) {\r\n  if (not object.parent = game.pov.parent) {\r\n    // it's in a container\r\n    if ((HasString (object, \"takemsgfromcontainer\") or not HasString (object, \"takemsg\")) and not GetBoolean (object, \"changed_takemsg\")) {\r\n      object.changed_takemsg = true\r\n      object.original_takemsg = object.takemsg\r\n    }\r\n    if (GetBoolean (object, \"changed_takemsg\")) {\r\n      if (HasString (object.parent, \"takefrommsg\")) {\r\n        object.takemsg = object.parent.takefrommsg\r\n      }\r\n      else if (HasString (object, \"takemsgfromcontainer\")) {\r\n        object.takemsg = object.takemsgfromcontainer\r\n      }\r\n      else {\r\n        object.takemsg = CapFirst (WriteVerb (game.pov, \"take\")) + \" \" + object.article + \" out of the {object:\" + object.parent.name + \"}.\"\r\n      }\r\n    }\r\n  }\r\n  else if (GetBoolean (object, \"changed_takemsg\")) {\r\n    // it's not in a container, but we've already changed its takemsg. So change it back\r\n    object.changed_takemsg = false\r\n    object.takemsg = object.original_takemsg\r\n  }\r\n}\r\n```\r\n\r\nOff the top of my head, not tested yet, but I think it should work.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oddly enough, this isn't easy.</p>\n<p>The template <code>TakeSuccessful</code> is the default message for taking an object, and you can modify it as easily as any other template (as in, you can do it using the desktop editor but not on the web).</p>\n<p>However, specifying 'when taking it out of a container' means it would be somewhat different. This means you'd need to check whether the object is in a container or not and change the message depending on that.</p>\n<p>I can think of 3 ways to do that. Either by having a turnscript that modifies the <code>takemsg</code> of objects that are in reachable containers (complex, but can be used on the wweb version), by having objects automatically set their <code>takemsg</code> when they're moved, or by modifying the <code>DoTake</code> function itself (simpler on desktop version, not on the web version)</p>\n<p><strong>Changing <code>takemsg</code> (by turnscript)</strong><br>\nGiving each object a boolean attribute <code>changed_takemsg</code> to indicate whether we've modified its takemsg. This version also allows containers to have an attribute <code>takefrommsg</code> for taking objects out of them, and objects to have an attribute <code>takemsgfromcontainer</code> for taking them out of a container.<br>\nYou might want to change the order of some parts of this, depending which message you want to take priority</p>\n<pre><code>foreach (object, ScopeReachableNotHeld()) {\n  if (not object.parent = game.pov.parent) {\n    // it's in a container\n    if ((HasString (object, \"takemsgfromcontainer\") or not HasString (object, \"takemsg\")) and not GetBoolean (object, \"changed_takemsg\")) {\n      object.changed_takemsg = true\n      object.original_takemsg = object.takemsg\n    }\n    if (GetBoolean (object, \"changed_takemsg\")) {\n      if (HasString (object.parent, \"takefrommsg\")) {\n        object.takemsg = object.parent.takefrommsg\n      }\n      else if (HasString (object, \"takemsgfromcontainer\")) {\n        object.takemsg = object.takemsgfromcontainer\n      }\n      else {\n        object.takemsg = CapFirst (WriteVerb (game.pov, \"take\")) + \" \" + object.article + \" out of the {object:\" + object.parent.name + \"}.\"\n      }\n    }\n  }\n  else if (GetBoolean (object, \"changed_takemsg\")) {\n    // it's not in a container, but we've already changed its takemsg. So change it back\n    object.changed_takemsg = false\n    object.takemsg = object.original_takemsg\n  }\n}\n</code></pre>\n<p>Off the top of my head, not tested yet, but I think it should work.</p>\n\n",
      "PostDate": "2020-09-26T09:28:24.6861234Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a7cfdc30-6d10-44ed-ae4a-d03fee1dac4f",
      "UserId": 497177,
      "Username": "Jonathan O",
      "AvatarUrl": "https://secure.gravatar.com/avatar/132db8a5bac291ae51f5b4b3f20cbf8c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks - as it's a minor point of a slightly inappropriate message, I'll leave it for the moment.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks - as it's a minor point of a slightly inappropriate message, I'll leave it for the moment.</p>\n\n",
      "PostDate": "2020-09-26T13:42:44.2338877Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
