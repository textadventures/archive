{
  "Topic": {
    "TopicId": "vsk670cn7ksakgkgs7jdsw",
    "ForumId": "10",
    "Title": "Look Non-Directional Exit",
    "LastUpdated": "2018-10-31T02:39:32.1496672Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "8f254abc-7173-4575-b7be-54aa0ff94a53",
      "UserId": 382197,
      "Username": "James Spaid",
      "AvatarUrl": "https://i.imgur.com/dCTlbZSb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry for the probably easy question, but I feel like I'm taking crazy pills. I'm in the process of making some escape room games, and already published two. A comment yesterday suggested that I allow looking at the directions in the room (one room, multiple parts, made for an easier scenario). Fair enough. Only I can't seem to figure out how to \"look\" at non-directional exits, and my searching the forums and code has proved fruitless so far, because I'm not sure what I'm missing.\r\n\r\nFirst, I don't know the easy way to do this in the program. I saw a forum post ( http://textadventures.co.uk/forum/quest/topic/5979/look-in-this-direction ) from 2016 about a similar question, and then someone offered this advice:\r\n\r\n_Click the exit you want in the pane on the left. At the very bottom of this screen there is an option to 'Look (in this direction)'. Run your script in there. If you are in a car, for example, and typed 'look out' (if out is your exit direction), the print message script will give the player a description of outside the car._\r\n\r\nI've looked everywhere (heh) that I thought appropriate, like the tabs for the individual exit objects, or the room object Exit tab, but I cannot find any sort of selection for a \"Look in this direction\" option. \r\n\r\nThat said, I know that the code is generally just adding a \"look\" attribute with a text string of what you want printed when the player types \"look _direction_\" That works all well and fine when the exits are general directions, like east, west, etc. I've made some dummy exits, added the look attribute with the text I wanted, and everything worked fine.\r\n\r\nBut when I did the same thing for a non-directional exit, the program always returns that the object cannot be seen. Same settings (Scenery not checked, Visible, etc - I've both copied a current exit and created new ones with the same outcome) as the directional exit and everything, so the only thing that I can perceive is different is the alias and setting that it is a non-directional exit, which means it does not have any inherited attributes.\r\n\r\nFor example, if I am at the \"entrance\" of my speakeasy, there is a visible exit with an alias \"bar\", and you can go to it by either clicking on the hyperlink in the side panel or main screen, or typing \"go bar\". So I KNOW that there is an object with that alias there. But when I add the \"look\" attribute, and type \"look bar\", I simply get the return \"I can't see that\". \r\n\r\nSorry for the wall of text, I'm just frustrated and tired and really want to not feel dumb about this. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry for the probably easy question, but I feel like I'm taking crazy pills. I'm in the process of making some escape room games, and already published two. A comment yesterday suggested that I allow looking at the directions in the room (one room, multiple parts, made for an easier scenario). Fair enough. Only I can't seem to figure out how to \"look\" at non-directional exits, and my searching the forums and code has proved fruitless so far, because I'm not sure what I'm missing.</p>\n<p>First, I don't know the easy way to do this in the program. I saw a forum post ( http://textadventures.co.uk/forum/quest/topic/5979/look-in-this-direction ) from 2016 about a similar question, and then someone offered this advice:</p>\n<p><em>Click the exit you want in the pane on the left. At the very bottom of this screen there is an option to 'Look (in this direction)'. Run your script in there. If you are in a car, for example, and typed 'look out' (if out is your exit direction), the print message script will give the player a description of outside the car.</em></p>\n<p>I've looked everywhere (heh) that I thought appropriate, like the tabs for the individual exit objects, or the room object Exit tab, but I cannot find any sort of selection for a \"Look in this direction\" option.</p>\n<p>That said, I know that the code is generally just adding a \"look\" attribute with a text string of what you want printed when the player types \"look <em>direction</em>\" That works all well and fine when the exits are general directions, like east, west, etc. I've made some dummy exits, added the look attribute with the text I wanted, and everything worked fine.</p>\n<p>But when I did the same thing for a non-directional exit, the program always returns that the object cannot be seen. Same settings (Scenery not checked, Visible, etc - I've both copied a current exit and created new ones with the same outcome) as the directional exit and everything, so the only thing that I can perceive is different is the alias and setting that it is a non-directional exit, which means it does not have any inherited attributes.</p>\n<p>For example, if I am at the \"entrance\" of my speakeasy, there is a visible exit with an alias \"bar\", and you can go to it by either clicking on the hyperlink in the side panel or main screen, or typing \"go bar\". So I KNOW that there is an object with that alias there. But when I add the \"look\" attribute, and type \"look bar\", I simply get the return \"I can't see that\".</p>\n<p>Sorry for the wall of text, I'm just frustrated and tired and really want to not feel dumb about this.</p>\n\n",
      "PostDate": "2018-10-31T02:39:32.1496672Z",
      "LastEditDate": "2018-10-31T07:55:59.0654807Z",
      "link": null
    },
    {
      "PostId": "cd9878d1-06db-45d0-8569-b236d586e5a0",
      "UserId": 25543,
      "Username": "Silver",
      "AvatarUrl": "https://i.imgur.com/LMGdoqRb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If it’s typed commands then simply create a scenery object called bar or whatever and put the description in there. \r\nHmm this might cause problems. I never implement the interface as you inevitably come up against stuff like this. ",
      "EditableFormat": "markdown",
      "HTML": "<p>If it’s typed commands then simply create a scenery object called bar or whatever and put the description in there.<br>\nHmm this might cause problems. I never implement the interface as you inevitably come up against stuff like this.</p>\n\n",
      "PostDate": "2018-11-01T11:53:49.5475922Z",
      "LastEditDate": "2018-11-01T11:57:52.3687909Z",
      "link": null
    },
    {
      "PostId": "cea98441-1766-4f58-bcdd-307d248aed4c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK ... there are two commands. \"lookat\" looks at an object, and \"lookdir\" deals with the special strings \"look north\", \"look east\" and so on.\r\n\r\nlookdir's pattern matches the specific names of the directions, so can't be used for non-directional exits, and lookat only handles objects.\r\n\r\n*However*, under Quest 5.8 I think you could make this work properly by giving the lookat command a script attribute.\r\nSomething like:\r\n```\r\nlookat.changecommandscope => {\r\n  foreach (exit, ScopeExits()) {\r\n    list add (items, exit)\r\n  }\r\n}\r\n```\r\n\r\nThis should then force the exits (including non-directional exits) to be in scope for the lookat command, which would treat them as objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>OK ... there are two commands. \"lookat\" looks at an object, and \"lookdir\" deals with the special strings \"look north\", \"look east\" and so on.</p>\n<p>lookdir's pattern matches the specific names of the directions, so can't be used for non-directional exits, and lookat only handles objects.</p>\n<p><em>However</em>, under Quest 5.8 I think you could make this work properly by giving the lookat command a script attribute.<br>\nSomething like:</p>\n<pre><code>lookat.changecommandscope =&gt; {\n  foreach (exit, ScopeExits()) {\n    list add (items, exit)\n  }\n}\n</code></pre>\n<p>This should then force the exits (including non-directional exits) to be in scope for the lookat command, which would treat them as objects.</p>\n\n",
      "PostDate": "2018-11-01T23:09:36.9629883Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "55ac2315-8b4a-4939-a64d-84f95a8f339f",
      "UserId": 382197,
      "Username": "James Spaid",
      "AvatarUrl": "https://i.imgur.com/dCTlbZSb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Silver, I was attempting to do that at first as well, but it was becoming quite cumbersome, and I had to be careful with how I named certain objects. It WAS working to an extent, though.\r\n\r\nmrangel, the script you provided one hundred percent worked! And it makes so much sense, too. I'm just afraid that I'm such a novice at scripting that such a thing didn't occur to me. I placed the script into my custom lookat command and it worked perfectly! Thank you so much!",
      "EditableFormat": "markdown",
      "HTML": "<p>Silver, I was attempting to do that at first as well, but it was becoming quite cumbersome, and I had to be careful with how I named certain objects. It WAS working to an extent, though.</p>\n<p>mrangel, the script you provided one hundred percent worked! And it makes so much sense, too. I'm just afraid that I'm such a novice at scripting that such a thing didn't occur to me. I placed the script into my custom lookat command and it worked perfectly! Thank you so much!</p>\n\n",
      "PostDate": "2018-11-01T23:42:16.8247346Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "71a21fed-5172-4f04-bd8a-b11180f08d3d",
      "UserId": 142763,
      "Username": "Forgewright",
      "AvatarUrl": "http://i.imgur.com/Ea6HecZb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "That's pretty dang cool.",
      "EditableFormat": "markdown",
      "HTML": "<p>That's pretty dang cool.</p>\n\n",
      "PostDate": "2018-11-05T04:02:46.8678707Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "870aaee7-f35a-4912-846f-f891ee1e13ad",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(It's worth noting that you can use `changecommandscope` to put anything you want into scope. So you could theoretically have a command where `#object#` can match objects, exits, turnscripts, or commands. I can't think of many uses for the latter; except maybe some kind of magic system that uses commands for its spells, and gives the player commands to rename/upgrade/forget them)",
      "EditableFormat": "markdown",
      "HTML": "<p>(It's worth noting that you can use <code>changecommandscope</code> to put anything you want into scope. So you could theoretically have a command where <code>#object#</code> can match objects, exits, turnscripts, or commands. I can't think of many uses for the latter; except maybe some kind of magic system that uses commands for its spells, and gives the player commands to rename/upgrade/forget them)</p>\n\n",
      "PostDate": "2018-11-05T09:38:36.2585256Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
