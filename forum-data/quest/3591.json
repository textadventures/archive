{
  "Topic": {
    "TopicId": "3591",
    "ForumId": "10",
    "Title": "How to ask: If attribute 'take' = True",
    "LastUpdated": "2013-04-01T23:37:31+01:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "23825",
      "UserId": 0,
      "Username": "psymann",
      "UserAvatar": "6819_1364769382.jpg",
      "UserGravatar": "2d1e5da4ff4691a75d40742f904764d1",
      "EditableText": "Hello all,\n\nSo I want to print one of three messages when I do a particular action (an action that is not 'take') to an object:\n\n1) [If the object has a &quot;take&quot; attribute of &quot;false&quot; - ie it can't be taken]\n- Print &quot;Leave it where it is.&quot;\n\n2) [If the object has a &quot;take&quot; attribute of &quot;true&quot; - ie it can be taken]\n- Print &quot;Try picking it up.&quot;\n\n3) [If the object has a &quot;take&quot; attribute of some sort of scripty thing - ie it's not easy to work out if it can be taken or not]\n- Print &quot;Take it or leave it.&quot;\n\nWhen I try to put  in\nIf [object attribute equals] object [myobject] Attribute [take] = false\n- Print &quot;Leave it where it is.&quot;\nElse if [object attribute equals] object [myobject] Attribute [take] = true\n- Print &quot;Try picking it up.&quot;\nElse\n- Print &quot;Take it or leave it.&quot;\n\n[code:3av38ets]\nif (myobject&#46;take = false) {\n  msg (&quot;Leave it where it is&#46;&quot;)\n}\nelse if (myobject&#46;take = true) {\n  msg (&quot;Try picking it up&#46;&quot;)\n}\nelse {\n  msg (&quot;Take it or leave it&#46;&quot;)\n}\n[/code:3av38ets]\n\nThen I get the in-game error message &quot;Operation 'Equal' is not defined for types 'LazyLoadScript' and 'Boolean'&quot;.\n\nThat seems a bit odd - why can't I test whether Take is equal to True or not?  Or am I just doing it the wrong way?   <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? --> \n\npsymann",
      "EditableFormat": "bbcode",
      "HTML": "Hello all,<br/><br/>So I want to print one of three messages when I do a particular action (an action that is not 'take') to an object:<br/><br/>1) [If the object has a &quot;take&quot; attribute of &quot;false&quot; - ie it can't be taken]<br/>- Print &quot;Leave it where it is.&quot;<br/><br/>2) [If the object has a &quot;take&quot; attribute of &quot;true&quot; - ie it can be taken]<br/>- Print &quot;Try picking it up.&quot;<br/><br/>3) [If the object has a &quot;take&quot; attribute of some sort of scripty thing - ie it's not easy to work out if it can be taken or not]<br/>- Print &quot;Take it or leave it.&quot;<br/><br/>When I try to put  in<br/>If [object attribute equals] object [myobject] Attribute [take] = false<br/>- Print &quot;Leave it where it is.&quot;<br/>Else if [object attribute equals] object [myobject] Attribute [take] = true<br/>- Print &quot;Try picking it up.&quot;<br/>Else<br/>- Print &quot;Take it or leave it.&quot;<br/><br/><pre><code><br/>if (myobject&#46;take = false) {<br/>  msg (&quot;Leave it where it is&#46;&quot;)<br/>}<br/>else if (myobject&#46;take = true) {<br/>  msg (&quot;Try picking it up&#46;&quot;)<br/>}<br/>else {<br/>  msg (&quot;Take it or leave it&#46;&quot;)<br/>}<br/></code></pre><br/><br/>Then I get the in-game error message &quot;Operation 'Equal' is not defined for types 'LazyLoadScript' and 'Boolean'&quot;.<br/><br/>That seems a bit odd - why can't I test whether Take is equal to True or not?  Or am I just doing it the wrong way?   <!-- s:? --><img src=\"{SMILIES_PATH}/icon_confused.gif\" alt=\":?\" title=\"Confused\" /><!-- s:? --> <br/><br/>psymann",
      "PostDate": "2013-04-01T12:15:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23827",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "You're running into the case where &quot;take&quot; is a script. You can't compare that to true, as they are different types. I'd do something like:\n\n[code:30zcct2o]if (HasBoolean(myobject, &quot;take&quot;)) {\n  if (myobject&#46;take) {\n    msg (&quot;Try picking it up&#46;&quot;)\n  }\n  else {\n    msg (&quot;Leave it where it is&#46;&quot;)\n  }\n} else {\n  msg (&quot;Take it or leave it&#46;&quot;)\n}[/code:30zcct2o]\nYou only treat &quot;take&quot; as a boolean if it, in fact, is a boolean. You can also use &quot;HasScript&quot; to see if the attribute is a script.\n\nA stylistic thing: there isn't really any need to compare a boolean value to true or false, as &quot;if (somebool = true)&quot; is equivalent to &quot;if (somebool)&quot;. (Does Quest insert that into scripts? I see that a lot. Just use &quot;object has flag&quot;, which maps to GetBoolean) Also, you don't need to check for both true and false, as if it's not one, it's the other.",
      "EditableFormat": "bbcode",
      "HTML": "You're running into the case where &quot;take&quot; is a script. You can't compare that to true, as they are different types. I'd do something like:<br/><br/><pre><code>if (HasBoolean(myobject, &quot;take&quot;)) {<br/>  if (myobject&#46;take) {<br/>    msg (&quot;Try picking it up&#46;&quot;)<br/>  }<br/>  else {<br/>    msg (&quot;Leave it where it is&#46;&quot;)<br/>  }<br/>} else {<br/>  msg (&quot;Take it or leave it&#46;&quot;)<br/>}</code></pre><br/>You only treat &quot;take&quot; as a boolean if it, in fact, is a boolean. You can also use &quot;HasScript&quot; to see if the attribute is a script.<br/><br/>A stylistic thing: there isn't really any need to compare a boolean value to true or false, as &quot;if (somebool = true)&quot; is equivalent to &quot;if (somebool)&quot;. (Does Quest insert that into scripts? I see that a lot. Just use &quot;object has flag&quot;, which maps to GetBoolean) Also, you don't need to check for both true and false, as if it's not one, it's the other.",
      "PostDate": "2013-04-01T14:43:33+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23829",
      "UserId": 0,
      "Username": "psymann",
      "UserAvatar": "6819_1364769382.jpg",
      "UserGravatar": "2d1e5da4ff4691a75d40742f904764d1",
      "EditableText": "Thanks, jay, that makes sense <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nAnd I've just tested it out in my code and works perfectly, thanks!\n\nAnother bit of code overcome, so another bit of story/puzzle can be written <!-- s:-D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":-D\" title=\"Very Happy\" /><!-- s:-D -->\n\nAnd to think all that was just so I can give an appropriate &quot;you can't do that&quot; message for a different verb <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) -->",
      "EditableFormat": "bbcode",
      "HTML": "Thanks, jay, that makes sense <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>And I've just tested it out in my code and works perfectly, thanks!<br/><br/>Another bit of code overcome, so another bit of story/puzzle can be written <!-- s:-D --><img src=\"{SMILIES_PATH}/icon_biggrin.gif\" alt=\":-D\" title=\"Very Happy\" /><!-- s:-D --><br/><br/>And to think all that was just so I can give an appropriate &quot;you can't do that&quot; message for a different verb <!-- s;-) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";-)\" title=\"Wink\" /><!-- s;-) -->",
      "PostDate": "2013-04-01T17:05:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23837",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "just a bit of additional comments to add to jaynabonne's comments:\n\n&quot;take&quot; is a core (pre-set) verb, and it's type is &quot;SCRIPT&quot;. This is because, most of the core stuff in very complicated for it to work (so simply for us users, lol), so lots of the core stuff is of the SCRIPT type as it requires all that complex coding which goes on hidden from us users as we use such core stuff, such as the &quot;take&quot; verb.\n\nI'd have to check, if the core has a boolean type of~for &quot;take&quot;, such as maybe &quot;takeable&quot;, (usually -able or -ed or -ing are used for boolean's names*, but these suffixes aren't the only words used for booleans, as for example, &quot;dead&quot;, is a common boolean that is used for npcs or monsters when making an rpg like game, but it doesn't use any suffixes. &quot;Human&quot; could be another boolean, if you're working with races, again common with rpg like games ~ HK loves rpgs lol, though booleans aren't the only ways of &quot;flag referencing&quot; something, as there is also the inherited object types, and a creative way is to use integers too: if whatever = 0, then do this_0; if whatever = 1, then do this_1; etc etc etc. Booleans are a quick and useful way however to do most things that people want to do, with &quot;flag referencing&quot; and most coding. In my limited experience, use of &quot;boolean type attributes&quot; and &quot;integer type attributes&quot; and &quot;set a variable or attribute scripts&quot; and &quot;IF scripts&quot;, are the four main codings for doing almost anything that you need done. They're very powerful, you can do A LOT of stuff with just these four code things).\n\n*see below:\nIf (object.flying = true), then...\nif (object.equipped = true), then...\nif (object.equipable = true), then...\n\nso, if you want to set something to be &quot;= to true or false&quot;, then it has to be a boolean type (or maybe you could use a string type too)**\n\nan error that has been popping up a lot on this forum by posters is the:\n\n~ &quot;Error: &quot;string&quot; and &quot;int32&quot;\n\nthis means that you've got:\n\nstring type = integer type (and thus since a string is not an integer, and vice-versa, you get the error)\n\na way to match them up:\n\nstring type = ToString (integer type)\n\n&quot;ToString&quot; converts an integer type into a string type\n\nattribute types:\n\nstring = string : no error\ninteger = integer : no error\nboolean = boolean : no error\nboolean = true/false only string : no error\netc etc etc\n\nstring = integer : ERROR\nscript = boolean : ERROR\netc etc etc",
      "EditableFormat": "bbcode",
      "HTML": "just a bit of additional comments to add to jaynabonne's comments:<br/><br/>&quot;take&quot; is a core (pre-set) verb, and it's type is &quot;SCRIPT&quot;. This is because, most of the core stuff in very complicated for it to work (so simply for us users, lol), so lots of the core stuff is of the SCRIPT type as it requires all that complex coding which goes on hidden from us users as we use such core stuff, such as the &quot;take&quot; verb.<br/><br/>I'd have to check, if the core has a boolean type of~for &quot;take&quot;, such as maybe &quot;takeable&quot;, (usually -able or -ed or -ing are used for boolean's names*, but these suffixes aren't the only words used for booleans, as for example, &quot;dead&quot;, is a common boolean that is used for npcs or monsters when making an rpg like game, but it doesn't use any suffixes. &quot;Human&quot; could be another boolean, if you're working with races, again common with rpg like games ~ HK loves rpgs lol, though booleans aren't the only ways of &quot;flag referencing&quot; something, as there is also the inherited object types, and a creative way is to use integers too: if whatever = 0, then do this_0; if whatever = 1, then do this_1; etc etc etc. Booleans are a quick and useful way however to do most things that people want to do, with &quot;flag referencing&quot; and most coding. In my limited experience, use of &quot;boolean type attributes&quot; and &quot;integer type attributes&quot; and &quot;set a variable or attribute scripts&quot; and &quot;IF scripts&quot;, are the four main codings for doing almost anything that you need done. They're very powerful, you can do A LOT of stuff with just these four code things).<br/><br/>*see below:<br/>If (object.flying = true), then...<br/>if (object.equipped = true), then...<br/>if (object.equipable = true), then...<br/><br/>so, if you want to set something to be &quot;= to true or false&quot;, then it has to be a boolean type (or maybe you could use a string type too)**<br/><br/>an error that has been popping up a lot on this forum by posters is the:<br/><br/>~ &quot;Error: &quot;string&quot; and &quot;int32&quot;<br/><br/>this means that you've got:<br/><br/>string type = integer type (and thus since a string is not an integer, and vice-versa, you get the error)<br/><br/>a way to match them up:<br/><br/>string type = ToString (integer type)<br/><br/>&quot;ToString&quot; converts an integer type into a string type<br/><br/>attribute types:<br/><br/>string = string : no error<br/>integer = integer : no error<br/>boolean = boolean : no error<br/>boolean = true/false only string : no error<br/>etc etc etc<br/><br/>string = integer : ERROR<br/>script = boolean : ERROR<br/>etc etc etc",
      "PostDate": "2013-04-01T22:42:25+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23840",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "Keep in mind two things:\n\n1) true and false are built-in, atomic values, like null or numbers (e.g. 0, 2.5, -3.14159, etc). If you had a string value, you would have to use &quot;true&quot; and &quot;false&quot; (with quotes) to make them strings.\n\n2) Assigning an attribute sets its type. (I really hate in these discussions that Quest overloads '=' based on context - sometimes it's assignment, and sometimes it's an equality operator, so it can be confusing here on the forum to always be sure.) So if you have an attribute defined in your object:\n\n[code:2d7d1mur]\n&lt;object name=&quot;myobject&quot;&gt;\n  &lt;take type=&quot;script&quot;&gt;\n  &#46;&#46;&#46;\n  &lt;/take&gt;\n&lt;/object&gt;[/code:2d7d1mur]\n\nand then do the assignment:\n\n[code:2d7d1mur]myobject&#46;take = true[/code:2d7d1mur]\n\nthen the &quot;take&quot; attribute of &quot;myobject&quot; will now be of type boolean.\n\nI had an interesting case once where I was concatenating a bunch of values onto a string, and I made the mistake of trying to append a string list to it, and suddenly my string variable had turned, itself, into a string list... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "Keep in mind two things:<br/><br/>1) true and false are built-in, atomic values, like null or numbers (e.g. 0, 2.5, -3.14159, etc). If you had a string value, you would have to use &quot;true&quot; and &quot;false&quot; (with quotes) to make them strings.<br/><br/>2) Assigning an attribute sets its type. (I really hate in these discussions that Quest overloads '=' based on context - sometimes it's assignment, and sometimes it's an equality operator, so it can be confusing here on the forum to always be sure.) So if you have an attribute defined in your object:<br/><br/><pre><code><br/>&lt;object name=&quot;myobject&quot;&gt;<br/>  &lt;take type=&quot;script&quot;&gt;<br/>  &#46;&#46;&#46;<br/>  &lt;/take&gt;<br/>&lt;/object&gt;</code></pre><br/><br/>and then do the assignment:<br/><br/><pre><code>myobject&#46;take = true</code></pre><br/><br/>then the &quot;take&quot; attribute of &quot;myobject&quot; will now be of type boolean.<br/><br/>I had an interesting case once where I was concatenating a bunch of values onto a string, and I made the mistake of trying to append a string list to it, and suddenly my string variable had turned, itself, into a string list... <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-04-01T22:51:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23842",
      "UserId": 0,
      "Username": "psymann",
      "UserAvatar": "6819_1364769382.jpg",
      "UserGravatar": "2d1e5da4ff4691a75d40742f904764d1",
      "EditableText": "Sounds as if I'll have to be at least as careful when checking type mismatches on here as I do at work with excel <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->  Thanks for the tips.",
      "EditableFormat": "bbcode",
      "HTML": "Sounds as if I'll have to be at least as careful when checking type mismatches on here as I do at work with excel <!-- s;) --><img src=\"{SMILIES_PATH}/icon_wink.gif\" alt=\";)\" title=\"Wink\" /><!-- s;) -->  Thanks for the tips.",
      "PostDate": "2013-04-01T22:58:14+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23844",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "could this be remedied, by braking apart the operations, such as doing this (if alex wanted to change with with quest and~or if it was easy or even possible to do so and~or if it doesn't cause other problems as well):\n\n&quot;==&quot; &lt;-&gt; &quot;equality operator&quot;\n\n&quot;=&quot;  &lt;-&gt; &quot;an assignment&quot;\n\nthat way, you wouldn't have a single symbol~character (&quot;=&quot;) doing both operations.",
      "EditableFormat": "bbcode",
      "HTML": "could this be remedied, by braking apart the operations, such as doing this (if alex wanted to change with with quest and~or if it was easy or even possible to do so and~or if it doesn't cause other problems as well):<br/><br/>&quot;==&quot; &lt;-&gt; &quot;equality operator&quot;<br/><br/>&quot;=&quot;  &lt;-&gt; &quot;an assignment&quot;<br/><br/>that way, you wouldn't have a single symbol~character (&quot;=&quot;) doing both operations.",
      "PostDate": "2013-04-01T23:05:39+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "23845",
      "UserId": 0,
      "Username": "jaynabonne",
      "UserAvatar": "6579_1344778256.jpg",
      "UserGravatar": "379859a7f1952a65399fc63997e68f0b",
      "EditableText": "That's the way it's done in some other language (e.g. C, C++, Java, Javascript). Some languages do it the other way; for example, Pascal uses '=' for equaily and ':=' for assignment. \n\nI'm sure Alex could change it if he wanted to. I do understand to some extent why it is the way it is - people are more used to '=' than something exotic like '==', so if he's targetting a less coding-savvy audience, keeping it with a more intuitive symbol makes sense. And generally it works fine, as '=' morphs within context to do the right thing.\n\nIt's just when we try to talk about it that it can get confusing. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "EditableFormat": "bbcode",
      "HTML": "That's the way it's done in some other language (e.g. C, C++, Java, Javascript). Some languages do it the other way; for example, Pascal uses '=' for equaily and ':=' for assignment. <br/><br/>I'm sure Alex could change it if he wanted to. I do understand to some extent why it is the way it is - people are more used to '=' than something exotic like '==', so if he's targetting a less coding-savvy audience, keeping it with a more intuitive symbol makes sense. And generally it works fine, as '=' morphs within context to do the right thing.<br/><br/>It's just when we try to talk about it that it can get confusing. <!-- s:) --><img src=\"{SMILIES_PATH}/icon_smile.gif\" alt=\":)\" title=\"Smile\" /><!-- s:) -->",
      "PostDate": "2013-04-01T23:37:31+01:00",
      "LastEditDate": null
    }
  ]
}
