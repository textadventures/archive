{
  "Topic": {
    "TopicId": "m9qfmdgfbuyoujxloeo06a",
    "ForumId": "10",
    "Title": "Cloning Problem",
    "LastUpdated": "2021-02-28T17:47:04.5959287Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "539ecaf6-1f49-4e04-8b5e-661c983d3b30",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hi all,\r\n\r\nI was initially helped out by mrangel on the following thread:\r\nhttp://textadventures.co.uk/forum/quest/topic/edt56jljtuqcchq2g_cazq/multiple-objects-numbered-description\r\n\r\nI now want help with another problem that I cannot simply get my head around.\r\n\r\nI will use the same object as the the previous thread for simplicity using 'Heavy Ball'. I now want four such 'Heavy Balls' in different locations specified as follows.\r\n\r\n```\r\nObject: Heavy_Ball1 - Alias: heavy ball\r\nObject: Heavy_Ball2 - Alias: heavy ball\r\nObject: Heavy_Ball3 - Alias: heavy ball\r\nObject: Heavy_Ball4 - Alias: heavy ball\r\n```\r\n\r\n**Scenario 1**\r\nThe balls are still too heavy to carry all at once. My problem is when I'm carrying '```Heavy_Ball1```' for instance and drop it where '```Heavy_Ball2```' is located, I want it to read '```2 balls```'.\r\n\r\n**Scenario 2**\r\nThe balls are now light enough that the player can now carry all four balls, (probably having drunk a secret magic potion brewed by a druid found in Gaul, still holding out against the romans (_I digress_)). So the inventory will have to say that you are carrying 4 balls(or however many you are carrying). Also again, if the player was to drop one of the balls where another ball is located, I want it to read you can see ```2 balls```, or whatever.\r\n\r\nIf anyone can help, it would be much appreciated.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hi all,</p>\n<p>I was initially helped out by mrangel on the following thread:<br>\nhttp://textadventures.co.uk/forum/quest/topic/edt56jljtuqcchq2g_cazq/multiple-objects-numbered-description</p>\n<p>I now want help with another problem that I cannot simply get my head around.</p>\n<p>I will use the same object as the the previous thread for simplicity using 'Heavy Ball'. I now want four such 'Heavy Balls' in different locations specified as follows.</p>\n<pre><code>Object: Heavy_Ball1 - Alias: heavy ball\nObject: Heavy_Ball2 - Alias: heavy ball\nObject: Heavy_Ball3 - Alias: heavy ball\nObject: Heavy_Ball4 - Alias: heavy ball\n</code></pre>\n<p><strong>Scenario 1</strong><br>\nThe balls are still too heavy to carry all at once. My problem is when I'm carrying '<code>Heavy_Ball1</code>' for instance and drop it where '<code>Heavy_Ball2</code>' is located, I want it to read '<code>2 balls</code>'.</p>\n<p><strong>Scenario 2</strong><br>\nThe balls are now light enough that the player can now carry all four balls, (probably having drunk a secret magic potion brewed by a druid found in Gaul, still holding out against the romans (<em>I digress</em>)). So the inventory will have to say that you are carrying 4 balls(or however many you are carrying). Also again, if the player was to drop one of the balls where another ball is located, I want it to read you can see <code>2 balls</code>, or whatever.</p>\n<p>If anyone can help, it would be much appreciated.</p>\n\n",
      "PostDate": "2021-02-28T17:47:04.5959287Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d73410ed-9452-4810-8f30-e977727d7bbf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think if you haven't got a special case for being carried, you don't need a non-stacked ball object. So every object in this case is now a pile, even if it's a pile of 1 ball.\r\n\r\nA lot of the difference here will be whether you want the player to take/drop one ball at a time, or all of them. I think the simplest way to implement it would be to have the basic commands moving the whole pile. So, you'd check if there's already balls at the target location, and if so merge the two piles together. So the `changedparent` script would be:\r\n```\r\npiles = FilterByAttribute (GetDirectChildren (this.parent), \"prototype\", this.prototype)\r\nlist remove (piles, this)\r\nif (ListCount (piles) > 0) {\r\n  pile = ListItem (piles, 0)\r\n  this.count = this.count + pile.count\r\n  pile.count = 0\r\n}\r\n```\r\nIn this case, when two piles/balls are moved into the same location I'm destroying the other one rather than 'this', in order to avoid the foreach bug with destroying objects.\r\n\r\nThen we have the `changedcount` script:\r\n```\r\nif (this.count = 0) {\r\n  destroy (this.name)\r\n}\r\nelse if (this.count = 1) {\r\n  this.alias = \"heavy ball\"\r\n}\r\nelse {\r\n  this.alias = this.count + \" balls\"\r\n}\r\n```\r\n\r\nFor separating the piles, you could add \"take one\" and \"drop one\" verbs.\r\nSomething like `take one`:\r\n```\r\nif (not ListCountains (ScopeReaachable(), this)) {\r\n  msg (\"You can't reach it.\")\r\n}\r\nelse if (this.count = 1) {\r\n  this.parent = game.pov\r\n}\r\nelse {\r\n  piles = FilterByAttribute (GetDirectChildren (game.pov), \"prototype\", this.prototype)\r\n  if (ListCount (piles) = 0) {\r\n    CloneObjectAndMove (this.prototype, game.pov)\r\n  }\r\n  else {\r\n    pile = ListItem (piles, 0)\r\n    pile.count = pile.count + 1\r\n  }\r\n  this.count = this.count - 1\r\n}\r\n```\r\n\r\nand for `drop one`, you'd have:\r\n```\r\ndestination = game.pov.parent\r\nif (not ListCountains (ScopeReaachableInvantory(), this)) {\r\n  msg (\"You aren't carrying it, or it's in a box.\")\r\n}\r\nelse if (this.count = 1) {\r\n  this.parent = destination\r\n}\r\nelse {\r\n  piles = FilterByAttribute (GetDirectChildren (destination), \"prototype\", this.prototype)\r\n  if (ListCount (piles) = 0) {\r\n    CloneObjectAndMove (this.prototype, destination)\r\n  }\r\n  else {\r\n    pile = ListItem (piles, 0)\r\n    pile.count = pile.count + 1\r\n  }\r\n  this.count = this.count - 1\r\n}\r\n```\r\n\r\n(in this case, you would have an original 'ball' object somewhere that the player can't reach it, and any others would have their `prototype` attribute set to that one; if you create them by cloning the original, this will be done automatically)\r\n\r\nThere are other ways to do it. My favourite is having multiple objects. So if you have 3 balls in a room, they are named \"3 balls\", \"2 balls\", and \"ball\"; and \"2 balls\" and \"ball\" are scenery so they don't show up in the objects list. This means that the player can still type \"get 2 balls\" if they want to, and it works mostly intuitively. Then, the `changedparent` script just needs to check for any in the same location with a lower number, move them too, and then change the aliases; no need to create or destroy extra clones. But that system is a bit weird, and I think most people around here didn't like it when I mentioned it in the past.",
      "EditableFormat": "markdown",
      "HTML": "<p>I think if you haven't got a special case for being carried, you don't need a non-stacked ball object. So every object in this case is now a pile, even if it's a pile of 1 ball.</p>\n<p>A lot of the difference here will be whether you want the player to take/drop one ball at a time, or all of them. I think the simplest way to implement it would be to have the basic commands moving the whole pile. So, you'd check if there's already balls at the target location, and if so merge the two piles together. So the <code>changedparent</code> script would be:</p>\n<pre><code>piles = FilterByAttribute (GetDirectChildren (this.parent), \"prototype\", this.prototype)\nlist remove (piles, this)\nif (ListCount (piles) &gt; 0) {\n  pile = ListItem (piles, 0)\n  this.count = this.count + pile.count\n  pile.count = 0\n}\n</code></pre>\n<p>In this case, when two piles/balls are moved into the same location I'm destroying the other one rather than 'this', in order to avoid the foreach bug with destroying objects.</p>\n<p>Then we have the <code>changedcount</code> script:</p>\n<pre><code>if (this.count = 0) {\n  destroy (this.name)\n}\nelse if (this.count = 1) {\n  this.alias = \"heavy ball\"\n}\nelse {\n  this.alias = this.count + \" balls\"\n}\n</code></pre>\n<p>For separating the piles, you could add \"take one\" and \"drop one\" verbs.<br>\nSomething like <code>take one</code>:</p>\n<pre><code>if (not ListCountains (ScopeReaachable(), this)) {\n  msg (\"You can't reach it.\")\n}\nelse if (this.count = 1) {\n  this.parent = game.pov\n}\nelse {\n  piles = FilterByAttribute (GetDirectChildren (game.pov), \"prototype\", this.prototype)\n  if (ListCount (piles) = 0) {\n    CloneObjectAndMove (this.prototype, game.pov)\n  }\n  else {\n    pile = ListItem (piles, 0)\n    pile.count = pile.count + 1\n  }\n  this.count = this.count - 1\n}\n</code></pre>\n<p>and for <code>drop one</code>, you'd have:</p>\n<pre><code>destination = game.pov.parent\nif (not ListCountains (ScopeReaachableInvantory(), this)) {\n  msg (\"You aren't carrying it, or it's in a box.\")\n}\nelse if (this.count = 1) {\n  this.parent = destination\n}\nelse {\n  piles = FilterByAttribute (GetDirectChildren (destination), \"prototype\", this.prototype)\n  if (ListCount (piles) = 0) {\n    CloneObjectAndMove (this.prototype, destination)\n  }\n  else {\n    pile = ListItem (piles, 0)\n    pile.count = pile.count + 1\n  }\n  this.count = this.count - 1\n}\n</code></pre>\n<p>(in this case, you would have an original 'ball' object somewhere that the player can't reach it, and any others would have their <code>prototype</code> attribute set to that one; if you create them by cloning the original, this will be done automatically)</p>\n<p>There are other ways to do it. My favourite is having multiple objects. So if you have 3 balls in a room, they are named \"3 balls\", \"2 balls\", and \"ball\"; and \"2 balls\" and \"ball\" are scenery so they don't show up in the objects list. This means that the player can still type \"get 2 balls\" if they want to, and it works mostly intuitively. Then, the <code>changedparent</code> script just needs to check for any in the same location with a lower number, move them too, and then change the aliases; no need to create or destroy extra clones. But that system is a bit weird, and I think most people around here didn't like it when I mentioned it in the past.</p>\n\n",
      "PostDate": "2021-02-28T22:36:38.2751466Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2932994c-c4b5-424e-86a0-be9c5972e2f7",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Edit: Sorry, I think I misread your post.\r\n\r\nReimplementing the \"too heavy to carry more than one\" thing wouldn't be too hard. Two ways to do that spring to mind.\r\n\r\nSimplest, just make a 'take' script:\r\n```\r\nif (player.can_carry_multiple_balls) {\r\n  msg (\"You pick them up.\")\r\n  this.parent = game.pov\r\n}\r\nelse {\r\n  piles = FilterByAttribute (ScopeInventory(), \"prototype\", this.prototype)\r\n  if (ListCount (piles) = 0 and this.count = 1) {\r\n    // there's only one ball here, so just move it\r\n    this.parent = game.pov\r\n    msg (\"You pick it up.\")\r\n  }\r\n  else if (ListCount (piles) = 0) {\r\n    // the player doesn't have one, but there's multiple here\r\n    msg (\"You manage to lift one of the heavy balls.\")\r\n    CloneObjectAndMove (this.prototype, game.pov)\r\n    this.count = this.count - 1\r\n  }\r\n  else {\r\n    // the player already has one\r\n    msg (\"You can't carry more than one of these.\")\r\n  }\r\n}\r\n```\r\n\r\nIn the later case, where the player has gained the ability to lift more, it might be better to change the displayed verbs. So the `changedcount` script would be something like:\r\n```\r\nif (HasAttribute (this, \"generatedverbslist\")) {\r\n  if (ListCountains (this.generatedverbslist, \"take one\")) {\r\n    list remove (this.generatedverbslist, \"take one\")\r\n  }\r\n  if (ListCountains (this.generatedverbslist, \"drop one\")) {\r\n    list remove (this.generatedverbslist, \"drop one\")\r\n  }\r\n}\r\nfirsttime {\r\n  this.displayverbs = this.displayverbs\r\n  this.inventoryverbs = this.inventoryverbs\r\n}\r\nif (this.count = 0) {\r\n  destroy (this.name)\r\n}\r\nelse if (this.count = 1) {\r\n  this.gender = \"it\"\r\n  this.article = \"it\"\r\n  this.possessive = \"its\"\r\n  this.usedefaultprefix = true\r\n  this.alias = \"heavy ball\"\r\n  if (ListCountains (this.displayverbs, \"take one\")) {\r\n    list remove (this.displayverbs, \"take one\")\r\n  }\r\n  if (ListCountains (this.inventoryverbs, \"drop one\")) {\r\n    list remove (this.inventoryverbs, \"drop one\")\r\n  }\r\n}\r\nelse {\r\n  this.gender = \"they\"\r\n  this.article = \"them\"\r\n  this.possessive = \"their\"\r\n  this.usedefaultprefix = false\r\n  this.prefix = this.count\r\n  this.alias = \"heavy balls\"\r\n  if (not ListCountains (this.displayverbs, \"take one\")) {\r\n    list add (this.displayverbs, \"take one\")\r\n  }\r\n  if (not ListCountains (this.inventoryverbs, \"drop one\")) {\r\n    list add (this.inventoryverbs, \"drop one\")\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Edit: Sorry, I think I misread your post.</p>\n<p>Reimplementing the \"too heavy to carry more than one\" thing wouldn't be too hard. Two ways to do that spring to mind.</p>\n<p>Simplest, just make a 'take' script:</p>\n<pre><code>if (player.can_carry_multiple_balls) {\n  msg (\"You pick them up.\")\n  this.parent = game.pov\n}\nelse {\n  piles = FilterByAttribute (ScopeInventory(), \"prototype\", this.prototype)\n  if (ListCount (piles) = 0 and this.count = 1) {\n    // there's only one ball here, so just move it\n    this.parent = game.pov\n    msg (\"You pick it up.\")\n  }\n  else if (ListCount (piles) = 0) {\n    // the player doesn't have one, but there's multiple here\n    msg (\"You manage to lift one of the heavy balls.\")\n    CloneObjectAndMove (this.prototype, game.pov)\n    this.count = this.count - 1\n  }\n  else {\n    // the player already has one\n    msg (\"You can't carry more than one of these.\")\n  }\n}\n</code></pre>\n<p>In the later case, where the player has gained the ability to lift more, it might be better to change the displayed verbs. So the <code>changedcount</code> script would be something like:</p>\n<pre><code>if (HasAttribute (this, \"generatedverbslist\")) {\n  if (ListCountains (this.generatedverbslist, \"take one\")) {\n    list remove (this.generatedverbslist, \"take one\")\n  }\n  if (ListCountains (this.generatedverbslist, \"drop one\")) {\n    list remove (this.generatedverbslist, \"drop one\")\n  }\n}\nfirsttime {\n  this.displayverbs = this.displayverbs\n  this.inventoryverbs = this.inventoryverbs\n}\nif (this.count = 0) {\n  destroy (this.name)\n}\nelse if (this.count = 1) {\n  this.gender = \"it\"\n  this.article = \"it\"\n  this.possessive = \"its\"\n  this.usedefaultprefix = true\n  this.alias = \"heavy ball\"\n  if (ListCountains (this.displayverbs, \"take one\")) {\n    list remove (this.displayverbs, \"take one\")\n  }\n  if (ListCountains (this.inventoryverbs, \"drop one\")) {\n    list remove (this.inventoryverbs, \"drop one\")\n  }\n}\nelse {\n  this.gender = \"they\"\n  this.article = \"them\"\n  this.possessive = \"their\"\n  this.usedefaultprefix = false\n  this.prefix = this.count\n  this.alias = \"heavy balls\"\n  if (not ListCountains (this.displayverbs, \"take one\")) {\n    list add (this.displayverbs, \"take one\")\n  }\n  if (not ListCountains (this.inventoryverbs, \"drop one\")) {\n    list add (this.inventoryverbs, \"drop one\")\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2021-02-28T23:08:26.5473094Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "af7fb597-ffb3-4498-811a-b86d7bf417d9",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Not sure if I fully understand the ```changedparent``` and ```changedcount``` scripts listed above.\r\n\r\nI've created 4 objects; 'Heavy_Ball', numbered 1 - 4. ```Heavy_Ball1```, ```Heavy_Ball2```, etc. All with the same alias, '```heavy ball```'.\r\nThen each of those four objects, has the ```changedparent``` and the ```changedcount``` script. I'm also running the objects initialisation script and setting ```this.count = 1```.  Then each of the four ```Heavy_Ball``` objects has the same ```take``` script listed above.\r\n\r\nI must be doing something wrong. I'm able to pick up all the objects and drop them all in the same place, but they are listed;\r\n```You see a heavy ball, a heavy ball, a heavy ball and ...```",
      "EditableFormat": "markdown",
      "HTML": "<p>Not sure if I fully understand the <code>changedparent</code> and <code>changedcount</code> scripts listed above.</p>\n<p>I've created 4 objects; 'Heavy_Ball', numbered 1 - 4. <code>Heavy_Ball1</code>, <code>Heavy_Ball2</code>, etc. All with the same alias, '<code>heavy ball</code>'.<br>\nThen each of those four objects, has the <code>changedparent</code> and the <code>changedcount</code> script. I'm also running the objects initialisation script and setting <code>this.count = 1</code>.  Then each of the four <code>Heavy_Ball</code> objects has the same <code>take</code> script listed above.</p>\n<p>I must be doing something wrong. I'm able to pick up all the objects and drop them all in the same place, but they are listed;<br>\n<code>You see a heavy ball, a heavy ball, a heavy ball and ...</code></p>\n\n",
      "PostDate": "2021-03-01T21:10:07.4040145Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "81b06e3e-707b-4fab-906e-3b8bc4c49f32",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Have you set the `prototype`?\r\n\r\nIt's used to keep track of objects that are the same. If you create them manually, you'll need to set the prototype too.\r\n\r\nAn alternative would be replacing `prototype` with `alias` in all the scripts, which should work in your case. (but if you clone one, you'd have to change that)",
      "EditableFormat": "markdown",
      "HTML": "<p>Have you set the <code>prototype</code>?</p>\n<p>It's used to keep track of objects that are the same. If you create them manually, you'll need to set the prototype too.</p>\n<p>An alternative would be replacing <code>prototype</code> with <code>alias</code> in all the scripts, which should work in your case. (but if you clone one, you'd have to change that)</p>\n\n",
      "PostDate": "2021-03-02T00:44:50.0327247Z",
      "LastEditDate": "2021-03-02T00:47:34.7620399Z",
      "link": null
    },
    {
      "PostId": "accc1d61-35d2-4d5e-8fdc-7f0217245159",
      "UserId": 304102,
      "Username": "Doctor Agon",
      "AvatarUrl": "http://i.imgur.com/Lzd3mOwb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I set the prototype on all of them.",
      "EditableFormat": "markdown",
      "HTML": "<p>I set the prototype on all of them.</p>\n\n",
      "PostDate": "2021-03-02T07:20:41.7753494Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
