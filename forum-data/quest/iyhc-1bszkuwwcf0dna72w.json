{
  "Topic": {
    "TopicId": "iyhc-1bszkuwwcf0dna72w",
    "ForumId": "10",
    "Title": "Handling ask in situations",
    "LastUpdated": "2024-04-09T05:52:39.9758391Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "cf91e7fe-6a20-4b78-b336-5f46e660a090",
      "UserId": 614339,
      "Username": "TheCrystalRiver52",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b628718461473be119f798e2882f27ae?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In my game, I'd like the player to be able to ask an npc using the \"ask [npc] about [topic]\"\r\nHowever, the trouble I have is when the player asks the question when the npc has a certain flag. I want, if the flag is true, to produce an output.\r\nLet's say the npc is asleep; if the player asks the npc a question, I want it to respond with \"They are sleeping\".\r\nI can do the tedious time of having each question check if the npc has the flag, but I'd prefer to simplify this by having it check in... say, the attributes tab.\r\n\r\nAgain, by not using the if function in each ask answer.\r\n\r\nIn short, if the npc is asleep, I want it to respond with \"They're sleeping\". If they aren't sleeping, I want it to respond with the actual answer. How do i get the game to recognize the ask command on this character and the flag?",
      "EditableFormat": "markdown",
      "HTML": "<p>In my game, I'd like the player to be able to ask an npc using the \"ask [npc] about [topic]\"<br>\nHowever, the trouble I have is when the player asks the question when the npc has a certain flag. I want, if the flag is true, to produce an output.<br>\nLet's say the npc is asleep; if the player asks the npc a question, I want it to respond with \"They are sleeping\".<br>\nI can do the tedious time of having each question check if the npc has the flag, but I'd prefer to simplify this by having it check in... say, the attributes tab.</p>\n<p>Again, by not using the if function in each ask answer.</p>\n<p>In short, if the npc is asleep, I want it to respond with \"They're sleeping\". If they aren't sleeping, I want it to respond with the actual answer. How do i get the game to recognize the ask command on this character and the flag?</p>\n\n",
      "PostDate": "2024-04-09T05:52:39.9758391Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e93be5ae-29e6-4fec-a431-55d932757f89",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm also interested in hearing a good way to handle such situations. The workaround I've used recently is to have two npcs and flip between them, but looking back that feels worse than putting a condition on each response.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm also interested in hearing a good way to handle such situations. The workaround I've used recently is to have two npcs and flip between them, but looking back that feels worse than putting a condition on each response.</p>\n\n",
      "PostDate": "2024-04-09T06:48:18.2070293Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "76de3f93-0bee-4a89-9b07-e72980be151b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… I think I see two ways of handling this. Both off the top of my head, so may or may not work.\r\n\r\nClick to expand:\r\n<details style=\"border: 1px solid green\"><summary style=\"cursor: pointer; text-decoration: underline\">Better option - desktop editor only</summary>\r\nThe best way of handling this would probably be modifying the function which handles Ask/Tell a little. If you have the desktop editor, you could change it like this (off the top of my head):\r\n<pre><code>  &lt;function name=\"DoAskTell\" parameters=\"object, text, property, defaultscript, defaulttemplate\">\r\n    &lt;![CDATA[\r\n    handled = false\r\n    maxstrength = 0\r\n    match = null\r\n    text = LCase(text)\r\n<b style=\"color: blue\">    if (not HasAttribute (game, \"text_processor_variables\")) {\r\n      game.text_processor_variables = NewDictionary()\r\n    }\r\n    DictionaryAdd (game.text_processor_variables, \"npc\", object)\r\n    DictionaryAdd (game.text_processor_variables, \"topic\", text)\r\n    if (HasScript (game.pov, \"canttalk\")) {\r\n      do (game.pov, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\r\n      handled = true\r\n    }\r\n    else if (HasString (game.pov, \"canttalk\")) {\r\n      msg (game.pov.canttalk.)\r\n      handled = true\r\n    }\r\n    else if (HasScript (object, \"canttalk\")) {\r\n      do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\r\n      handled = true\r\n    }\r\n    else if (HasString (object, \"canttalk\")) {\r\n      msg (object.canttalk)\r\n      handled = true\r\n    }\r\n    else if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\r\n      // use the default text\r\n      handled = false\r\n    }\r\n    else</b> if (TypeOf(object, property) = \"scriptdictionary\") {\r\n      dictionary = GetAttribute(object, property)\r\n      foreach (keywords, dictionary) {\r\n        strength = GetKeywordsMatchStrength(LCase(keywords), text)\r\n        if (strength >= maxstrength and strength>0) {\r\n          match = ScriptDictionaryItem(dictionary, keywords)\r\n          maxstrength = strength\r\n        }\r\n      }\r\n      if (not match = null) {\r\n        parameters = NewObjectDictionary()\r\n        dictionary add(parameters, \"this\", object)\r\n        invoke (match, parameters)\r\n        handled = true\r\n      }\r\n    }\r\n    if (not handled) {\r\n      if (HasScript(object, defaultscript)) {\r\n        d = NewDictionary()\r\n        dictionary add(d, \"text\", text)\r\n        do (object, defaultscript, d)\r\n      } else {\r\n        msg (DynamicTemplate(defaulttemplate, object))\r\n      }\r\n    }\r\n    ]]>\r\n  &lt;/function></code></pre>\r\n\r\nThis allows you to give either the NPC or the player an attribute \"canttalk\" which will prevent them talking.\r\n\r\nFor example, you could do:\r\n```\r\ndave.canttalk = \"Dave isn't going to tell you anything about {topic} while he's asleep.\"\r\n```\r\nand this will override all the ask/tell functions.\r\nWhen he wakes up, you would just do:\r\n```\r\ndave.canttalk = null\r\n```\r\nYou can set `canttalk` to be a script (which will be run), a text string (which will be printed), or `true` (in which case it will do the default behaviour as if the NPC doesn't have anything to say about that.\r\n\r\nAnd if the player is gagged or something so they can't talk, in the same way you could do:\r\n```\r\nplayer.canttalk = \"You try talking to {object:npc} but {npc.gender} can't hear you.\"\r\n```\r\n</details>\r\n\r\nor…\r\n<details style=\"border: 1px solid brown\"><summary style=\"cursor: pointer; text-decoration: underline\">Alternate option - ugly workaround</summary>\r\nYou could temporarily remove a character's conversation topics when they fall asleep, by moving them to a different attribute.\r\n\r\nSo, when they fall asleep, you could do:\r\n```\r\ndefaultscript => {\r\n  msg (\"Dave can't talk right now, he's asleep.\")\r\n}\r\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\r\n  set (dave, \"backup_\" + attr, GetAttribute(dave, attr))\r\n  set (dave, \"backup_\" + attr + \"default\", GetAttribute(dave, attr + \"default\"))\r\n  set (dave, attr, false)\r\n  set (dave, attr + \"default\", defaultscript)\r\n}\r\n```\r\nand then to wake him up again, you would do:\r\n```\r\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\r\n  set (dave, attr, GetAttribute(dave, \"backup_\" + attr))\r\n  set (dave, attr + \"default\", GetAttribute(dave, \"backup_\" + attr + \"default\"))\r\n}\r\n```\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… I think I see two ways of handling this. Both off the top of my head, so may or may not work.</p>\n<p>Click to expand:</p>\n<details style=\"border: 1px solid green\"><summary style=\"cursor: pointer; text-decoration: underline\">Better option - desktop editor only</summary>\nThe best way of handling this would probably be modifying the function which handles Ask/Tell a little. If you have the desktop editor, you could change it like this (off the top of my head):\n<pre><code>  &lt;function name=\"DoAskTell\" parameters=\"object, text, property, defaultscript, defaulttemplate\"&gt;\n    &lt;![CDATA[\n    handled = false\n    maxstrength = 0\n    match = null\n    text = LCase(text)\n<b style=\"color: blue\">    if (not HasAttribute (game, \"text_processor_variables\")) {\n      game.text_processor_variables = NewDictionary()\n    }\n    DictionaryAdd (game.text_processor_variables, \"npc\", object)\n    DictionaryAdd (game.text_processor_variables, \"topic\", text)\n    if (HasScript (game.pov, \"canttalk\")) {\n      do (game.pov, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\n      handled = true\n    }\n    else if (HasString (game.pov, \"canttalk\")) {\n      msg (game.pov.canttalk.)\n      handled = true\n    }\n    else if (HasScript (object, \"canttalk\")) {\n      do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\n      handled = true\n    }\n    else if (HasString (object, \"canttalk\")) {\n      msg (object.canttalk)\n      handled = true\n    }\n    else if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\n      // use the default text\n      handled = false\n    }\n    else</b> if (TypeOf(object, property) = \"scriptdictionary\") {\n      dictionary = GetAttribute(object, property)\n      foreach (keywords, dictionary) {\n        strength = GetKeywordsMatchStrength(LCase(keywords), text)\n        if (strength &gt;= maxstrength and strength&gt;0) {\n          match = ScriptDictionaryItem(dictionary, keywords)\n          maxstrength = strength\n        }\n      }\n      if (not match = null) {\n        parameters = NewObjectDictionary()\n        dictionary add(parameters, \"this\", object)\n        invoke (match, parameters)\n        handled = true\n      }\n    }\n    if (not handled) {\n      if (HasScript(object, defaultscript)) {\n        d = NewDictionary()\n        dictionary add(d, \"text\", text)\n        do (object, defaultscript, d)\n      } else {\n        msg (DynamicTemplate(defaulttemplate, object))\n      }\n    }\n    ]]&gt;\n  &lt;/function&gt;</code></pre>\n<p>This allows you to give either the NPC or the player an attribute \"canttalk\" which will prevent them talking.</p>\n<p>For example, you could do:</p>\n<pre><code>dave.canttalk = \"Dave isn't going to tell you anything about {topic} while he's asleep.\"\n</code></pre>\n<p>and this will override all the ask/tell functions.<br>\nWhen he wakes up, you would just do:</p>\n<pre><code>dave.canttalk = null\n</code></pre>\n<p>You can set <code>canttalk</code> to be a script (which will be run), a text string (which will be printed), or <code>true</code> (in which case it will do the default behaviour as if the NPC doesn't have anything to say about that.</p>\n<p>And if the player is gagged or something so they can't talk, in the same way you could do:</p>\n<pre><code>player.canttalk = \"You try talking to {object:npc} but {npc.gender} can't hear you.\"\n</code></pre>\n</details>\n<p>or…</p>\n<details style=\"border: 1px solid brown\"><summary style=\"cursor: pointer; text-decoration: underline\">Alternate option - ugly workaround</summary>\nYou could temporarily remove a character's conversation topics when they fall asleep, by moving them to a different attribute.\n<p>So, when they fall asleep, you could do:</p>\n<pre><code>defaultscript =&gt; {\n  msg (\"Dave can't talk right now, he's asleep.\")\n}\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\n  set (dave, \"backup_\" + attr, GetAttribute(dave, attr))\n  set (dave, \"backup_\" + attr + \"default\", GetAttribute(dave, attr + \"default\"))\n  set (dave, attr, false)\n  set (dave, attr + \"default\", defaultscript)\n}\n</code></pre>\n<p>and then to wake him up again, you would do:</p>\n<pre><code>foreach (attr, Split(\"ask;tell;askto;tellto\")) {\n  set (dave, attr, GetAttribute(dave, \"backup_\" + attr))\n  set (dave, attr + \"default\", GetAttribute(dave, \"backup_\" + attr + \"default\"))\n}\n</code></pre>\n</details>\n\n",
      "PostDate": "2024-04-09T08:57:17.7307495Z",
      "LastEditDate": "2024-04-15T21:21:00.3517037Z",
      "link": null
    },
    {
      "PostId": "652ab100-42eb-4871-939d-8a8c452d2f93",
      "UserId": 614339,
      "Username": "TheCrystalRiver52",
      "AvatarUrl": "https://secure.gravatar.com/avatar/b628718461473be119f798e2882f27ae?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I see! Thank you very much",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I see! Thank you very much</p>\n\n",
      "PostDate": "2024-04-09T09:02:27.1950633Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a74f7f2d-c895-4260-aaac-f3b01cdcf4a6",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks mrangel. I was helping someone who had to use the online editor and unfortunately it doesn't seem to allow built-in functions to be replaced? The 'ugly' version is still an improvement!",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks mrangel. I was helping someone who had to use the online editor and unfortunately it doesn't seem to allow built-in functions to be replaced? The 'ugly' version is still an improvement!</p>\n\n",
      "PostDate": "2024-04-09T11:08:54.8916209Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "6da40c42-c00c-4ad9-b616-a7ceeafd3092",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Mr. angel! those collapsable menus are so cool!  How did you make them?",
      "EditableFormat": "markdown",
      "HTML": "<p>Mr. angel! those collapsable menus are so cool!  How did you make them?</p>\n\n",
      "PostDate": "2024-04-10T01:45:35.9775478Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "36fa3c06-f256-4321-bb96-503ad0876e42",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Mr. angel! those collapsable menus are so cool! How did you make them?\r\n\r\nYou mean for the code snippets? They're details/summary blocks. Like this:\r\n```\r\n<details><summary>Click to expand</summary>\r\nThis text will be hidden until you click on it\r\n</details>\r\n```\r\nAlthough I usually make the link underlined and change the cursor, so people recognise it's clickable. And in this case, I put borders around them to separate the two options from each other. So:\r\n```\r\n<details style=\"border: 1px solid green\">\r\n<summary style=\"cursor: pointer; text-decoration: underline\">Click to expand</summary>\r\nThis text will be hidden until you click on it\r\n</details>\r\n```\r\nWorth noting, however, that some forum-specific markup (like <code>```</code>) doesn't work on the first line of the contents, and sometimes on the line after an expanded block.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Mr. angel! those collapsable menus are so cool! How did you make them?</p>\n</blockquote>\n<p>You mean for the code snippets? They're details/summary blocks. Like this:</p>\n<pre><code>&lt;details&gt;&lt;summary&gt;Click to expand&lt;/summary&gt;\nThis text will be hidden until you click on it\n&lt;/details&gt;\n</code></pre>\n<p>Although I usually make the link underlined and change the cursor, so people recognise it's clickable. And in this case, I put borders around them to separate the two options from each other. So:</p>\n<pre><code>&lt;details style=\"border: 1px solid green\"&gt;\n&lt;summary style=\"cursor: pointer; text-decoration: underline\"&gt;Click to expand&lt;/summary&gt;\nThis text will be hidden until you click on it\n&lt;/details&gt;\n</code></pre>\n<p>Worth noting, however, that some forum-specific markup (like <code>```</code>) doesn't work on the first line of the contents, and sometimes on the line after an expanded block.</p>\n\n",
      "PostDate": "2024-04-10T10:16:27.7238779Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "eb6f84c4-6b95-4880-bf86-12ae25220fd0",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...'ugly' solution can be made less ugly by putting the code sections into functions so that they can be used for multiple npcs, i.e.\r\n```\r\nfunction ask_off (npc, response)\r\nnpc.off_response = response\r\ndefaultscript => {\r\n  msg (this.off_response)\r\n}\r\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\r\n  set (npc, \"backup_\" + attr, GetAttribute(npc, attr))\r\n  set (npc, \"backup_\" + attr + \"default\", GetAttribute(npc, attr + \"default\"))\r\n  set (npc, attr, false)\r\n  set (npc, attr + \"default\", defaultscript)\r\n}\r\n```\r\nand \r\n```\r\nfunction ask_on (npc)\r\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\r\n  set (npc, attr, GetAttribute(npc, \"backup_\" + attr))\r\n  set (npc, attr + \"default\", GetAttribute(npc, \"backup_\" + attr + \"default\"))\r\n}\r\n```\r\nwith calls\r\n```\r\nask_off (dave, \"Dave can't talk right now, he's asleep.\")\r\nask_on (dave)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>...'ugly' solution can be made less ugly by putting the code sections into functions so that they can be used for multiple npcs, i.e.</p>\n<pre><code>function ask_off (npc, response)\nnpc.off_response = response\ndefaultscript =&gt; {\n  msg (this.off_response)\n}\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\n  set (npc, \"backup_\" + attr, GetAttribute(npc, attr))\n  set (npc, \"backup_\" + attr + \"default\", GetAttribute(npc, attr + \"default\"))\n  set (npc, attr, false)\n  set (npc, attr + \"default\", defaultscript)\n}\n</code></pre>\n<p>and</p>\n<pre><code>function ask_on (npc)\nforeach (attr, Split(\"ask;tell;askto;tellto\")) {\n  set (npc, attr, GetAttribute(npc, \"backup_\" + attr))\n  set (npc, attr + \"default\", GetAttribute(npc, \"backup_\" + attr + \"default\"))\n}\n</code></pre>\n<p>with calls</p>\n<pre><code>ask_off (dave, \"Dave can't talk right now, he's asleep.\")\nask_on (dave)\n</code></pre>\n\n",
      "PostDate": "2024-04-10T10:58:00.1321881Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "444f3101-5d60-4e17-a517-c69821e2d0fb",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> 'ugly' solution can be made less ugly by putting the code sections into functions so that they can be used for multiple npcs\r\n\r\nYep, I thought about including that.\r\n\r\nAnother point of ugliness with it would be that if you have a script somewhere which adds responses to an NPC (for example, if they learn about something new), you would have to make it check whether they are asleep or not, and add it to `backup_ask` rather than `ask`.\r\n\r\nHowever, I realised that there's a slightly less clunky way to do the same thing.\r\nYou can't edit the core functions in the web editor, but you can change *commands* at runtime. So on the web editor, you could put this in your start script:\r\n```\r\nasktellhandler => {\r\n  if (not HasAttribute (game, \"text_processor_variables\")) {\r\n    game.text_processor_variables = NewDictionary()\r\n  }\r\n  DictionaryAdd (game.text_processor_variables, \"object\", object)\r\n  DictionaryAdd (game.text_processor_variables, \"npc\", object)\r\n  DictionaryAdd (game.text_processor_variables, \"text\", text)\r\n  DictionaryAdd (game.text_processor_variables, \"topic\", text)\r\n  if (HasScript (game.pov, \"canttalk\")) {\r\n    do (game.pov, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\r\n  }\r\n  else if (HasString (game.pov, \"canttalk\")) {\r\n    msg (game.pov.canttalk)\r\n  }\r\n  else if (HasScript (object, \"canttalk\")) {\r\n    do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\r\n  }\r\n  else if (HasString (object, \"canttalk\")) {\r\n    msg (object.canttalk)\r\n  }\r\n  else {\r\n    if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\r\n      override = \"disabled_\"\r\n    }\r\n    else {\r\n      override = \"\"\r\n    }\r\n    switch (this.name) {\r\n      case (\"tellto\", \"alttellto\") {\r\n        DoAskTell (object, text, override + \"tellto\", \"telltodefault\", \"DefaultTellTo\")\r\n      }\r\n      default {\r\n        DoAskTell (object, text, override + this.name, this.name + \"default\", \"Default\" + CapFirst (this.name))\r\n      }\r\n    }\r\n  }\r\n}\r\nask.script = asktellhandler\r\ntell.script = asktellhandler\r\ntellto.script = asktellhandler\r\nalttellto.script = asktellhandler\r\n```\r\nThen you've got the same `donttalk` attribute as in the first solution.\r\nIn this case, you can also create an alternate question dictionary named `disabled_ask`, `disabled_tell`, in case you want to have some questions you can still ask an NPC when they/you are asleep.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>'ugly' solution can be made less ugly by putting the code sections into functions so that they can be used for multiple npcs</p>\n</blockquote>\n<p>Yep, I thought about including that.</p>\n<p>Another point of ugliness with it would be that if you have a script somewhere which adds responses to an NPC (for example, if they learn about something new), you would have to make it check whether they are asleep or not, and add it to <code>backup_ask</code> rather than <code>ask</code>.</p>\n<p>However, I realised that there's a slightly less clunky way to do the same thing.<br>\nYou can't edit the core functions in the web editor, but you can change <em>commands</em> at runtime. So on the web editor, you could put this in your start script:</p>\n<pre><code>asktellhandler =&gt; {\n  if (not HasAttribute (game, \"text_processor_variables\")) {\n    game.text_processor_variables = NewDictionary()\n  }\n  DictionaryAdd (game.text_processor_variables, \"object\", object)\n  DictionaryAdd (game.text_processor_variables, \"npc\", object)\n  DictionaryAdd (game.text_processor_variables, \"text\", text)\n  DictionaryAdd (game.text_processor_variables, \"topic\", text)\n  if (HasScript (game.pov, \"canttalk\")) {\n    do (game.pov, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\n  }\n  else if (HasString (game.pov, \"canttalk\")) {\n    msg (game.pov.canttalk)\n  }\n  else if (HasScript (object, \"canttalk\")) {\n    do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\n  }\n  else if (HasString (object, \"canttalk\")) {\n    msg (object.canttalk)\n  }\n  else {\n    if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\n      override = \"disabled_\"\n    }\n    else {\n      override = \"\"\n    }\n    switch (this.name) {\n      case (\"tellto\", \"alttellto\") {\n        DoAskTell (object, text, override + \"tellto\", \"telltodefault\", \"DefaultTellTo\")\n      }\n      default {\n        DoAskTell (object, text, override + this.name, this.name + \"default\", \"Default\" + CapFirst (this.name))\n      }\n    }\n  }\n}\nask.script = asktellhandler\ntell.script = asktellhandler\ntellto.script = asktellhandler\nalttellto.script = asktellhandler\n</code></pre>\n<p>Then you've got the same <code>donttalk</code> attribute as in the first solution.<br>\nIn this case, you can also create an alternate question dictionary named <code>disabled_ask</code>, <code>disabled_tell</code>, in case you want to have some questions you can still ask an NPC when they/you are asleep.</p>\n\n",
      "PostDate": "2024-04-11T09:04:25.2586395Z",
      "LastEditDate": "2024-04-15T21:22:31.4593341Z",
      "link": null
    },
    {
      "PostId": "acf9c506-86aa-4a80-a011-b7efe714a240",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Interesting mrangel! I'm away from home at the moment but will try it out when I get back.",
      "EditableFormat": "markdown",
      "HTML": "<p>Interesting mrangel! I'm away from home at the moment but will try it out when I get back.</p>\n\n",
      "PostDate": "2024-04-11T13:24:07.5335209Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "52a92114-faca-4f3f-b35a-c2818c13366b",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "...tried out the your code in the start script mrangel but the editor complained about three lines (\"Failed to load script\"). These are marked with \"->>\".\r\n```\r\n  else if (HasString (game.pov, \"canttalk\")) {\r\n->>    msg (game.pov, \"canttalk\")\r\n  }\r\n  else if (HasScript (object, \"canttalk\")) {\r\n    do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\r\n  }\r\n  else if (HasString (object, \"canttalk\")) {\r\n->>    msg (object, \"canttalk\")\r\n  }\r\n  else {\r\n    if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\r\n      override = \"disabled_\"\r\n    }\r\n    else {\r\n      override = \"\"\r\n    }\r\n    switch (this.name) {\r\n      case (\"tellto\", \"alttellto\") {\r\n        DoAskTell (object, text, override + \"tellto\", \"telltodefault\", \"DefaultTellTo\")\r\n      }\r\n      default {\r\n        DoAskTell (object, text, override + this.name, this.name + \"default\", \"Default\" + CapFirst (this.name))\r\n      }\r\n    }\r\n  }\r\n}\r\n->> ask.script = asktellhandler\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>...tried out the your code in the start script mrangel but the editor complained about three lines (\"Failed to load script\"). These are marked with \"-&gt;&gt;\".</p>\n<pre><code>  else if (HasString (game.pov, \"canttalk\")) {\n-&gt;&gt;    msg (game.pov, \"canttalk\")\n  }\n  else if (HasScript (object, \"canttalk\")) {\n    do (object, \"canttalk\", QuickParams (\"topic\", text, \"npc\", object))\n  }\n  else if (HasString (object, \"canttalk\")) {\n-&gt;&gt;    msg (object, \"canttalk\")\n  }\n  else {\n    if (GetBoolean (game.pov, \"canttalk\") or GetBoolean (object, \"canttalk\")) {\n      override = \"disabled_\"\n    }\n    else {\n      override = \"\"\n    }\n    switch (this.name) {\n      case (\"tellto\", \"alttellto\") {\n        DoAskTell (object, text, override + \"tellto\", \"telltodefault\", \"DefaultTellTo\")\n      }\n      default {\n        DoAskTell (object, text, override + this.name, this.name + \"default\", \"Default\" + CapFirst (this.name))\n      }\n    }\n  }\n}\n-&gt;&gt; ask.script = asktellhandler\n</code></pre>\n\n",
      "PostDate": "2024-04-14T13:25:25.4578452Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ee4874d5-1d40-4c6a-91d8-0a68e73410b0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK, my brain must have been on strike when I wrote that. Sorry, there shouldn't be two parameters to `msg`.\r\n\r\nEditing above to fix that",
      "EditableFormat": "markdown",
      "HTML": "<p>OK, my brain must have been on strike when I wrote that. Sorry, there shouldn't be two parameters to <code>msg</code>.</p>\n<p>Editing above to fix that</p>\n\n",
      "PostDate": "2024-04-15T21:19:56.9503816Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d26b9b9-5154-47a9-83c0-16ce419f8989",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry mrangel, there is a third line causing a problem ```ask.script = asktellhandler```.",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry mrangel, there is a third line causing a problem <code>ask.script = asktellhandler</code>.</p>\n\n",
      "PostDate": "2024-04-16T08:09:01.3468571Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "019ebbe9-fea1-4908-8d37-ac2f6584013e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, wonderful! Weird editor bug.\r\n\r\nTry changing that line to:\r\n```\r\nset (ask, \"script\", asktellhandler)\r\n```\r\n\r\nBecause although the core code includes an object named `ask` (a command), a line of code starting with `ask` is assumed to be referring to the *function* `ask`. This is why you're not allowed to have an object and a function with the same name… except that you can if one of them is built-in and the other is provided by the core library.",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, wonderful! Weird editor bug.</p>\n<p>Try changing that line to:</p>\n<pre><code>set (ask, \"script\", asktellhandler)\n</code></pre>\n<p>Because although the core code includes an object named <code>ask</code> (a command), a line of code starting with <code>ask</code> is assumed to be referring to the <em>function</em> <code>ask</code>. This is why you're not allowed to have an object and a function with the same name… except that you can if one of them is built-in and the other is provided by the core library.</p>\n\n",
      "PostDate": "2024-04-16T14:58:51.8422232Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9a271bbb-8c8e-4e57-aaa6-9f8d943b674e",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yup! that's now working. I did the same with tell, tellto and alttellto. Job done!",
      "EditableFormat": "markdown",
      "HTML": "<p>Yup! that's now working. I did the same with tell, tellto and alttellto. Job done!</p>\n\n",
      "PostDate": "2024-04-16T16:30:01.9427271Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1ee279bb-bc05-4613-9e14-222ef5706142",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Yup! that's now working. I did the same with tell, tellto and alttellto. Job done!\r\n\r\nThe others shouldn't need changing; the problem is specifically with commands whose name is a reserved word.\r\n\r\n(The editor won't actually allow you to create a command/verb/object named `foreach` or `msg`, but if you use a text editor to add them to a library it causes the same issue with not being able to do `objectname.attributename = value` on them)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Yup! that's now working. I did the same with tell, tellto and alttellto. Job done!</p>\n</blockquote>\n<p>The others shouldn't need changing; the problem is specifically with commands whose name is a reserved word.</p>\n<p>(The editor won't actually allow you to create a command/verb/object named <code>foreach</code> or <code>msg</code>, but if you use a text editor to add them to a library it causes the same issue with not being able to do <code>objectname.attributename = value</code> on them)</p>\n\n",
      "PostDate": "2024-04-17T09:04:38.9499875Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c8d7c3ea-3828-4c8f-9890-52fb1d471b48",
      "UserId": 199273,
      "Username": "DavyB",
      "AvatarUrl": "http://i.imgur.com/8BcaZCyb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> The others shouldn't need changing; the problem is specifically with commands whose name is a reserved word.\r\n\r\nYes, but it looks tidier to have them all in the same form ;)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>The others shouldn't need changing; the problem is specifically with commands whose name is a reserved word.</p>\n</blockquote>\n<p>Yes, but it looks tidier to have them all in the same form ;)</p>\n\n",
      "PostDate": "2024-04-18T07:26:17.1349401Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5a1c60f7-368c-4520-978d-720046bcf518",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I should thank you, too :p\r\n\r\nI've been trying to put together a pure javascript port of the Quest engine, to reduce the reliance on the server. But avoiding this bug would involve a lot of work.\r\n\r\nIf Quest doesn't avoid this bug, I guess I don't need to either.",
      "EditableFormat": "markdown",
      "HTML": "<p>I should thank you, too :p</p>\n<p>I've been trying to put together a pure javascript port of the Quest engine, to reduce the reliance on the server. But avoiding this bug would involve a lot of work.</p>\n<p>If Quest doesn't avoid this bug, I guess I don't need to either.</p>\n\n",
      "PostDate": "2024-04-19T00:23:24.1118759Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
