{
  "Topic": {
    "TopicId": "6283",
    "ForumId": "10",
    "Title": "Move object to random adjacent room.",
    "LastUpdated": "2016-05-01T09:10:26+01:00",
    "ReplyCount": 7
  },
  "Posts": [
    {
      "PostId": "42570",
      "UserId": 0,
      "Username": "mhoffman",
      "UserAvatar": null,
      "UserGravatar": "7613b8847e2a5b139fab6640a0c1f17d",
      "EditableText": "I'm new to Quest but I am trying to think of a way to create a strategic 'zombie apocalypse'. Each zombie is its own object and as the player spends time with each move, each zombie will move to a random adjacent room and eventually disseminate throughout the map. This would help the gameplay to be different every time and make it more immersive than multiple scripted events. I need to have each object (zombie) move to a random adjacent room every turn.",
      "EditableFormat": "bbcode",
      "HTML": "I'm new to Quest but I am trying to think of a way to create a strategic 'zombie apocalypse'. Each zombie is its own object and as the player spends time with each move, each zombie will move to a random adjacent room and eventually disseminate throughout the map. This would help the gameplay to be different every time and make it more immersive than multiple scripted events. I need to have each object (zombie) move to a random adjacent room every turn.",
      "PostDate": "2016-04-30T23:50:32+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42571",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Are you cloning the zombies after each move and adding them to rooms or do you have a set number of zombies scattered on your map and moving that set number around?\n\nIn other words is it add a zombie after each turn and move it somewhere random? Or is it there are 10 total zombies and they all get randomly moved after each turn?",
      "EditableFormat": "bbcode",
      "HTML": "Are you cloning the zombies after each move and adding them to rooms or do you have a set number of zombies scattered on your map and moving that set number around?<br/><br/>In other words is it add a zombie after each turn and move it somewhere random? Or is it there are 10 total zombies and they all get randomly moved after each turn?",
      "PostDate": "2016-05-01T01:00:44+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42572",
      "UserId": 0,
      "Username": "XanMag",
      "UserAvatar": "7161_1436827710.jpg",
      "UserGravatar": "4b45a3afd18077f76f6569225c422bdb",
      "EditableText": "Either way... I'd put a turn script in for each zombie. If this doesn't make sense I'll clarify with an example:\n\n1.  In the game tab add a script that runs after every turn.\n2.  'Set a variable or attribute'.\n3. To keep it simple, set the variable 'x' = random number between number 1 and number y (where y = # of rooms you want zombie A to move to).\n4. Now, add another new script. Add an 'If' script (can be clicked at top right of box).\n5. In the 'If' of this script, it should look like this --&gt; If expression x = 1\n6. For the Then part, add a move object script and move zombie A to whatever room you want.\n7.  Repeat steps 4-6 except change the value of x to 2.\n8.  Copy and paste this and change the Zombie A to Zombie B, c,d,e,f, etc...\n9. You can control the zombie spawns this way too.  If you want safe rooms, simply never move any zombie to that room.  You only want 1 per room, give each zombie a sector that they can patrol.\n\nWARNING!!  There will be problems doing this.  What do you do if your player is in a room that a zombie enters? You'll need a message to print I would think?  What happens if the player wants to kill a zombie, attacks one and it disappears to another room?\n\nI just offer this as a suggestion.  Not sure if it is the best option, but it's the only one my little brain can think of.  What you want to do is a lot more complicated than it sounds.  Good luck!\n\nEdit:  I'm sure there's an easy way to keep a zombie in the room with the player.  Something like if zombie is visible, then set variable = 0, where 0 is a blank then (zombie doesn't move).",
      "EditableFormat": "bbcode",
      "HTML": "Either way... I'd put a turn script in for each zombie. If this doesn't make sense I'll clarify with an example:<br/><br/>1.  In the game tab add a script that runs after every turn.<br/>2.  'Set a variable or attribute'.<br/>3. To keep it simple, set the variable 'x' = random number between number 1 and number y (where y = # of rooms you want zombie A to move to).<br/>4. Now, add another new script. Add an 'If' script (can be clicked at top right of box).<br/>5. In the 'If' of this script, it should look like this --&gt; If expression x = 1<br/>6. For the Then part, add a move object script and move zombie A to whatever room you want.<br/>7.  Repeat steps 4-6 except change the value of x to 2.<br/>8.  Copy and paste this and change the Zombie A to Zombie B, c,d,e,f, etc...<br/>9. You can control the zombie spawns this way too.  If you want safe rooms, simply never move any zombie to that room.  You only want 1 per room, give each zombie a sector that they can patrol.<br/><br/>WARNING!!  There will be problems doing this.  What do you do if your player is in a room that a zombie enters? You'll need a message to print I would think?  What happens if the player wants to kill a zombie, attacks one and it disappears to another room?<br/><br/>I just offer this as a suggestion.  Not sure if it is the best option, but it's the only one my little brain can think of.  What you want to do is a lot more complicated than it sounds.  Good luck!<br/><br/>Edit:  I'm sure there's an easy way to keep a zombie in the room with the player.  Something like if zombie is visible, then set variable = 0, where 0 is a blank then (zombie doesn't move).",
      "PostDate": "2016-05-01T01:21:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42574",
      "UserId": 0,
      "Username": "mhoffman",
      "UserAvatar": null,
      "UserGravatar": "7613b8847e2a5b139fab6640a0c1f17d",
      "EditableText": "This is a great idea! I'm thinking of using 100 zombies and each moves individually so this will be quite monotonous but definitely worth it. I figure I could get over that problem by having the script you described under the &quot;If object is reachable/not reachable&quot; rule. Then it could behave differently if the player was in the same room and I could remove the zombie1, 2, 3 etc if it was 'killed'. However this method you described would move a zombie to any room on the map relative to the zombie's location. But I suppose it makes no difference. It only would if I could find a way to have the player discern how many 'zombies' or if there even were any in a certain room by 'looking around a corner', &quot;out the window&quot;, or &quot;looking at a home security camera.&quot; Until I figure out if I can do that and how, this is a perfect solution! Thank you so much!",
      "EditableFormat": "bbcode",
      "HTML": "This is a great idea! I'm thinking of using 100 zombies and each moves individually so this will be quite monotonous but definitely worth it. I figure I could get over that problem by having the script you described under the &quot;If object is reachable/not reachable&quot; rule. Then it could behave differently if the player was in the same room and I could remove the zombie1, 2, 3 etc if it was 'killed'. However this method you described would move a zombie to any room on the map relative to the zombie's location. But I suppose it makes no difference. It only would if I could find a way to have the player discern how many 'zombies' or if there even were any in a certain room by 'looking around a corner', &quot;out the window&quot;, or &quot;looking at a home security camera.&quot; Until I figure out if I can do that and how, this is a perfect solution! Thank you so much!",
      "PostDate": "2016-05-01T01:58:30+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42575",
      "UserId": 0,
      "Username": "mhoffman",
      "UserAvatar": null,
      "UserGravatar": "7613b8847e2a5b139fab6640a0c1f17d",
      "EditableText": "Actually there is another issue. If the player finds himself in a room with 15 zombies and decides to run to a different room, those fifteen zombies should be scripted to then follow the player to that room instead of randomly moving. Is it possible to have an object 'follow' the player without it being in his inventory?&quot;",
      "EditableFormat": "bbcode",
      "HTML": "Actually there is another issue. If the player finds himself in a room with 15 zombies and decides to run to a different room, those fifteen zombies should be scripted to then follow the player to that room instead of randomly moving. Is it possible to have an object 'follow' the player without it being in his inventory?&quot;",
      "PostDate": "2016-05-01T02:11:41+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42576",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "this is not simple stuff... but here's an example of how it can be done (probably not the most efficient, meh, I'm not at Pixie's, Jay's, Pertex', etc levels of coding ability, lol):\n\n[code:2eupzi9v]&lt;object name=&quot;global_data_object&quot;&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_3&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_6&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_9&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_4&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;3&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_8&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;room_12&quot;&gt;\n  &lt;inherit name=&quot;room_object_type&quot; /&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;4&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;zombie_1&quot;&gt;\n  &lt;inherit name=&quot;monster_object_type&quot; /&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room_9&lt;/attr&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;zombie&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;\n  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;\n  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;true&lt;/attr&gt;\n  &lt;attr name=&quot;room_object_list&quot; type=&quot;simpleobjectlist&quot;&gt;room_3; room_6; room_9&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=&quot;orc_1&quot;&gt;\n  &lt;inherit name=&quot;monster_object_type&quot; /&gt;\n  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room_12&lt;/attr&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;\n  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;\n  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;\n  &lt;attr name=&quot;defense&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;\n  &lt;attr name=&quot;room_object_list&quot; type=&quot;simpleobjectlist&quot;&gt;room_4; room_8; room_12&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;type name=&quot;monster_object_type&quot;&gt;\n  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;\n  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;\n  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;\n  &lt;attr name=&quot;defense&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;type name=&quot;room_object_type&quot;&gt;\n  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;room&lt;/attr&gt;\n  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;\n  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;\n  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;\n  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;room&lt;/attr&gt;\n&lt;/type&gt;\n\n&lt;function name=&quot;room_adjacency_function&quot; type=&quot;boolean&quot; parameters=&quot;room_parameter&quot;&gt;\n  foreach (room_variable, global_data_object&#46;all_rooms_object_list) {\n    if (room_variable&#46;x_coordinate &gt;= room_parameter&#46;x_coordinate - 1 and room_variable&#46;x_coordinate &lt;= room_parameter&#46;x_coordinate + 1) {\n      return true\n    } else if (room_variable&#46;y_coordinate &gt;= room_parameter&#46;y_coordinate - 1 and room_variable&#46;y_coordinate &lt;= room_parameter&#46;y_coordinate + 1) {\n      return true\n    } else if (room_variable&#46;z_coordinate &gt;= room_parameter&#46;z_coordinate - 1 and room_variable&#46;z_coordinate &lt;= room_parameter&#46;z_coordinate + 1) {\n      return true\n    } else {\n      return false\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=&quot;populate_room_adjaceny_object_list_function&quot;&gt;\n  if (HasAttribute (global_data_object, &quot;room_adjaceny_object_list&quot;)) {\n    foreach (object_variable, global_data_object&#46;room_adjaceny_object_list) {\n      list remove (global_data_object&#46;room_adjaceny_object_list, object_variable)\n    }\n  } else {\n    global_data_object&#46;room_adjaceny_object_list = NewObjectList ()\n  }\n  foreach (room_variable, global_data_object&#46;all_rooms_object_list) {\n    if (room_adjacency_function (room_variable) and not ListContains (global_data_object&#46;room_adjaceny_object_list, room_variable)) {\n      list add (global_data_object&#46;room_adjaceny_object_list, room_variable)\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=&quot;populate_all_rooms_object_list_function&quot;&gt;\n  global_data_object&#46;all_rooms_object_list = NewObjectList ()\n  foreach (object_variable, AllObjects()) {\n    if (GetString (object_variable, &quot;type_of_object&quot;) = &quot;room&quot;) {\n      list add (global_data_object&#46;all_rooms_object_list, object_variable)\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=&quot;populate_all_monsters_object_list_function&quot;&gt;\n  global_data_object&#46;all_monsters_object_list = NewObjectList ()\n  foreach (object_variable, AllObjects()) {\n    if (GetString (object_variable, &quot;type_of_object&quot;) = &quot;monster&quot;) {\n      list add (global_data_object&#46;all_monsters_object_list, object_variable)\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=&quot;all_monster_movement_function&quot;&gt;\n  foreach (monster_variable, global_data_object&#46;all_monsters_object_list) {\n    if (not monster_variable&#46;dead) {\n      removed_room = monster_variable&#46;parent\n      list remove (monster_variable&#46;room_object_list, monster_variable&#46;parent)\n      monster_variable&#46;parent = ObjectListItem (monster_variable&#46;room_object_list, GetRandomInt (0, ListCount (monster_variable&#46;room_object_list) - 1))\n      list add (monster_variable&#46;room_object_list, removed_room)\n    }\n  }\n&lt;/function&gt;[/code:2eupzi9v]\n\nI'm tired... someone else can take what I've done and help you with implementing it and/or explaining it...\n\n-------\n\nHK edit:\n\nmy logic with the adjacency-coordinate handling is wrong, as it's not quite that simple, lol. Can you see/understand why it is wrong?",
      "EditableFormat": "bbcode",
      "HTML": "this is not simple stuff... but here's an example of how it can be done (probably not the most efficient, meh, I'm not at Pixie's, Jay's, Pertex', etc levels of coding ability, lol):<br/><br/><pre><code>&lt;object name=&quot;global_data_object&quot;&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_3&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_6&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_9&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_4&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;3&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_8&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;room_12&quot;&gt;<br/>  &lt;inherit name=&quot;room_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;4&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;zombie_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room_9&lt;/attr&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;zombie&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;2&lt;/attr&gt;<br/>  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;<br/>  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;true&lt;/attr&gt;<br/>  &lt;attr name=&quot;room_object_list&quot; type=&quot;simpleobjectlist&quot;&gt;room_3; room_6; room_9&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;object name=&quot;orc_1&quot;&gt;<br/>  &lt;inherit name=&quot;monster_object_type&quot; /&gt;<br/>  &lt;attr name=&quot;parent&quot; type=&quot;object&quot;&gt;room_12&lt;/attr&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;orc&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;50&lt;/attr&gt;<br/>  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;25&lt;/attr&gt;<br/>  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;10&lt;/attr&gt;<br/>  &lt;attr name=&quot;defense&quot; type=&quot;int&quot;&gt;5&lt;/attr&gt;<br/>  &lt;attr name=&quot;room_object_list&quot; type=&quot;simpleobjectlist&quot;&gt;room_4; room_8; room_12&lt;/attr&gt;<br/>&lt;/object&gt;<br/><br/>&lt;type name=&quot;monster_object_type&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;monster&lt;/attr&gt;<br/>  &lt;attr name=&quot;current_life&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;maximum_life&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;experience&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>  &lt;attr name=&quot;cash&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>  &lt;attr name=&quot;dead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>  &lt;attr name=&quot;undead&quot; type=&quot;boolean&quot;&gt;false&lt;/attr&gt;<br/>  &lt;attr name=&quot;damage&quot; type=&quot;int&quot;&gt;1&lt;/attr&gt;<br/>  &lt;attr name=&quot;defense&quot; type=&quot;int&quot;&gt;0&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;type name=&quot;room_object_type&quot;&gt;<br/>  &lt;attr name=&quot;type_of_object&quot; type=&quot;string&quot;&gt;room&lt;/attr&gt;<br/>  &lt;attr name=&quot;x_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;<br/>  &lt;attr name=&quot;y_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;<br/>  &lt;attr name=&quot;z_coordinate&quot; type=&quot;int&quot;&gt;-1&lt;/attr&gt;<br/>  &lt;attr name=&quot;alias&quot; type=&quot;string&quot;&gt;room&lt;/attr&gt;<br/>&lt;/type&gt;<br/><br/>&lt;function name=&quot;room_adjacency_function&quot; type=&quot;boolean&quot; parameters=&quot;room_parameter&quot;&gt;<br/>  foreach (room_variable, global_data_object&#46;all_rooms_object_list) {<br/>    if (room_variable&#46;x_coordinate &gt;= room_parameter&#46;x_coordinate - 1 and room_variable&#46;x_coordinate &lt;= room_parameter&#46;x_coordinate + 1) {<br/>      return true<br/>    } else if (room_variable&#46;y_coordinate &gt;= room_parameter&#46;y_coordinate - 1 and room_variable&#46;y_coordinate &lt;= room_parameter&#46;y_coordinate + 1) {<br/>      return true<br/>    } else if (room_variable&#46;z_coordinate &gt;= room_parameter&#46;z_coordinate - 1 and room_variable&#46;z_coordinate &lt;= room_parameter&#46;z_coordinate + 1) {<br/>      return true<br/>    } else {<br/>      return false<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;populate_room_adjaceny_object_list_function&quot;&gt;<br/>  if (HasAttribute (global_data_object, &quot;room_adjaceny_object_list&quot;)) {<br/>    foreach (object_variable, global_data_object&#46;room_adjaceny_object_list) {<br/>      list remove (global_data_object&#46;room_adjaceny_object_list, object_variable)<br/>    }<br/>  } else {<br/>    global_data_object&#46;room_adjaceny_object_list = NewObjectList ()<br/>  }<br/>  foreach (room_variable, global_data_object&#46;all_rooms_object_list) {<br/>    if (room_adjacency_function (room_variable) and not ListContains (global_data_object&#46;room_adjaceny_object_list, room_variable)) {<br/>      list add (global_data_object&#46;room_adjaceny_object_list, room_variable)<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;populate_all_rooms_object_list_function&quot;&gt;<br/>  global_data_object&#46;all_rooms_object_list = NewObjectList ()<br/>  foreach (object_variable, AllObjects()) {<br/>    if (GetString (object_variable, &quot;type_of_object&quot;) = &quot;room&quot;) {<br/>      list add (global_data_object&#46;all_rooms_object_list, object_variable)<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;populate_all_monsters_object_list_function&quot;&gt;<br/>  global_data_object&#46;all_monsters_object_list = NewObjectList ()<br/>  foreach (object_variable, AllObjects()) {<br/>    if (GetString (object_variable, &quot;type_of_object&quot;) = &quot;monster&quot;) {<br/>      list add (global_data_object&#46;all_monsters_object_list, object_variable)<br/>    }<br/>  }<br/>&lt;/function&gt;<br/><br/>&lt;function name=&quot;all_monster_movement_function&quot;&gt;<br/>  foreach (monster_variable, global_data_object&#46;all_monsters_object_list) {<br/>    if (not monster_variable&#46;dead) {<br/>      removed_room = monster_variable&#46;parent<br/>      list remove (monster_variable&#46;room_object_list, monster_variable&#46;parent)<br/>      monster_variable&#46;parent = ObjectListItem (monster_variable&#46;room_object_list, GetRandomInt (0, ListCount (monster_variable&#46;room_object_list) - 1))<br/>      list add (monster_variable&#46;room_object_list, removed_room)<br/>    }<br/>  }<br/>&lt;/function&gt;</code></pre><br/><br/>I'm tired... someone else can take what I've done and help you with implementing it and/or explaining it...<br/><br/>-------<br/><br/>HK edit:<br/><br/>my logic with the adjacency-coordinate handling is wrong, as it's not quite that simple, lol. Can you see/understand why it is wrong?",
      "PostDate": "2016-05-01T02:24:43+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42577",
      "UserId": 0,
      "Username": "HegemonKhan",
      "UserAvatar": null,
      "UserGravatar": "a96cf34d8d97c57de38f54ee22b1759b",
      "EditableText": "Sgrieg's Following Code, an example for you:\n\n[code:2w29kvf6]if (not zombie&#46;parent = player&#46;parent) {\n  zombie&#46;parent = player&#46;parent\n}[/code:2w29kvf6]\n\nthe 'parent' Object Attribute is the exact same thing as the GUI~Editor's 'MoveObject()' Script/Function\n\nplayer.parent = room // the 'player' Player Object is (contained/set/moved/placed) in(within) the 'room' Room Object\n~ is the same as ~\nMoveObject (player, room) // the 'player' Player Object is (contained/set/moved/placed) in(within) the 'room' Room Object\n\ngold_coins.parent = treasure_chest // the 'gold_coins' Object is (contained/set) in(within) the 'treasure_chest' Object\n~ is the same as ~\nMoveObject (gold_coins, treasure_chest) // the 'gold_coins' Object is (contained/set/moved/placed) in(within) the 'treasure_chest' Object\n\nso... if...\n\nzombie.parent = roomX\nand\nplayer.parent = roomX\nthen\n// zombie.parent = roomX = player.parent // they're both in the same room\n// zombie.parent = player.parent // they're in the same room\n// roomX = roomX // true, they're in the same room\n\nso... explaining how Sgreig's Following code works:\n\nif (zombie isn't in the same room as the player), then (move/put/set/contain the zombie within the same room as the player)\nif (not zombie.parent = player.parent) /* then */ { (zombie.parent = player.parent) }",
      "EditableFormat": "bbcode",
      "HTML": "Sgrieg's Following Code, an example for you:<br/><br/><pre><code>if (not zombie&#46;parent = player&#46;parent) {<br/>  zombie&#46;parent = player&#46;parent<br/>}</code></pre><br/><br/>the 'parent' Object Attribute is the exact same thing as the GUI~Editor's 'MoveObject()' Script/Function<br/><br/>player.parent = room // the 'player' Player Object is (contained/set/moved/placed) in(within) the 'room' Room Object<br/>~ is the same as ~<br/>MoveObject (player, room) // the 'player' Player Object is (contained/set/moved/placed) in(within) the 'room' Room Object<br/><br/>gold_coins.parent = treasure_chest // the 'gold_coins' Object is (contained/set) in(within) the 'treasure_chest' Object<br/>~ is the same as ~<br/>MoveObject (gold_coins, treasure_chest) // the 'gold_coins' Object is (contained/set/moved/placed) in(within) the 'treasure_chest' Object<br/><br/>so... if...<br/><br/>zombie.parent = roomX<br/>and<br/>player.parent = roomX<br/>then<br/>// zombie.parent = roomX = player.parent // they're both in the same room<br/>// zombie.parent = player.parent // they're in the same room<br/>// roomX = roomX // true, they're in the same room<br/><br/>so... explaining how Sgreig's Following code works:<br/><br/>if (zombie isn't in the same room as the player), then (move/put/set/contain the zombie within the same room as the player)<br/>if (not zombie.parent = player.parent) /* then */ { (zombie.parent = player.parent) }",
      "PostDate": "2016-05-01T02:37:52+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "42580",
      "UserId": 0,
      "Username": "The Pixie",
      "UserAvatar": null,
      "UserGravatar": "cfa37e927f96177bcf6053ae8f108f77",
      "EditableText": "I will assume you are working offline, and can edit attributes. If you are having a lot of zombies, you should either set up one and clone it, or have a zombie type. \n\nSo there are two modes for each zombie, moving at random, or following. I would therefore set up a Boolean attribute on each zombie called &quot;zombiefollowing&quot;. Then give it a script, called &quot;zombiemove&quot;, to handle the movement. The way I would do it is to get the exits for the room the zombie is currently in, and pick one at random.\n[code:16jjsjh5]if (this&#46;parent = player&#46;parent) {\n  // If in the same room as the player start following\n  this&#46;zombiefollowing= true\n}\nif (this&#46;zombiefollowing) {\n  // If following just go to the room the player is in\n  this&#46;parent = player&#46;parent\n}\nelse {\n  // Get all exits for the current room\n  l = ScopeExitsForRoom(this&#46;parent)\n  //pick one at random\n  ex = ObjectListItem(l, GetRandomInt(0, ListCount(l) - 1)\n  // move to its destination\n  this&#46;parent = ex&#46;to\n}[/code:16jjsjh5]\nFinally you will need a turn script that iterates through each zombie, and calling that script. One way would be to go though all objects and see if it has the &quot;zombiefollowing&quot; attribute. If it does, it is a zombie and needs to move.\n[code:16jjsjh5]foreach (o, AllObjects()) {\n  if (HasBoolean(o, &quot;zombiefollowing&quot;)) {\n    do(o, &quot;zombiemove&quot;)\n  }\n}[/code:16jjsjh5]\nIf all that works, you can think about handling exits zombies cannot get through (locked doors, etc.).",
      "EditableFormat": "bbcode",
      "HTML": "I will assume you are working offline, and can edit attributes. If you are having a lot of zombies, you should either set up one and clone it, or have a zombie type. <br/><br/>So there are two modes for each zombie, moving at random, or following. I would therefore set up a Boolean attribute on each zombie called &quot;zombiefollowing&quot;. Then give it a script, called &quot;zombiemove&quot;, to handle the movement. The way I would do it is to get the exits for the room the zombie is currently in, and pick one at random.<br/><pre><code>if (this&#46;parent = player&#46;parent) {<br/>  // If in the same room as the player start following<br/>  this&#46;zombiefollowing= true<br/>}<br/>if (this&#46;zombiefollowing) {<br/>  // If following just go to the room the player is in<br/>  this&#46;parent = player&#46;parent<br/>}<br/>else {<br/>  // Get all exits for the current room<br/>  l = ScopeExitsForRoom(this&#46;parent)<br/>  //pick one at random<br/>  ex = ObjectListItem(l, GetRandomInt(0, ListCount(l) - 1)<br/>  // move to its destination<br/>  this&#46;parent = ex&#46;to<br/>}</code></pre><br/>Finally you will need a turn script that iterates through each zombie, and calling that script. One way would be to go though all objects and see if it has the &quot;zombiefollowing&quot; attribute. If it does, it is a zombie and needs to move.<br/><pre><code>foreach (o, AllObjects()) {<br/>  if (HasBoolean(o, &quot;zombiefollowing&quot;)) {<br/>    do(o, &quot;zombiemove&quot;)<br/>  }<br/>}</code></pre><br/>If all that works, you can think about handling exits zombies cannot get through (locked doors, etc.).",
      "PostDate": "2016-05-01T09:10:26+01:00",
      "LastEditDate": null
    }
  ]
}
