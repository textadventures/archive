{
  "Topic": {
    "TopicId": "scrxnnsd20yjpexaqabeea",
    "ForumId": "10",
    "Title": "Statuses",
    "LastUpdated": "2019-02-14T20:28:00.7292674Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "22b6b509-84c0-47d1-8733-95a16942f194",
      "UserId": 398146,
      "Username": "DrIcyStein",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "How would one go about making statuses? Like bleeding and poison? Like in my game my hero is bleeding and they have to find a way to patch up before their pain reaches max... How would I go about doing that? Like how would I create the multiple conditions like 1- doing fine to 5- about to die? Also how would I create the bleeding effect? Thanks for any help. (Also I changed games I'm working on I didn't want an only adult game so I'm toning down my content for teens and the like.)",
      "EditableFormat": "markdown",
      "HTML": "<p>How would one go about making statuses? Like bleeding and poison? Like in my game my hero is bleeding and they have to find a way to patch up before their pain reaches max... How would I go about doing that? Like how would I create the multiple conditions like 1- doing fine to 5- about to die? Also how would I create the bleeding effect? Thanks for any help. (Also I changed games I'm working on I didn't want an only adult game so I'm toning down my content for teens and the like.)</p>\n\n",
      "PostDate": "2019-02-14T20:28:00.7292674Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "5d642e70-c46f-49a9-ad92-dc432b2aff64",
      "UserId": 282833,
      "Username": "Io",
      "AvatarUrl": "http://i.imgur.com/XVmdocTb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "There is a METRIC TON of ways to do this.\r\n\r\nThere is, built into Quest, a 'Health' mechanic. I don't use that, though - generating your own systems to do things is both good programming practice, and lets you know better what you can and can't do.\r\n\r\nSo for 'how close are you to dead', you can create a custom Health attribute for the player, of Double (Decimal numbers) type. Pardon my psuedocode, but it could look like this:\r\n```\r\nPlayer.Health=56\r\n```\r\nEven have a Max Health, if you have healing mechanics and don't want to go over the max:\r\n```\r\nPlayer.MaxHealth=100\r\n#Which then leads into, whenever you heal the player:\r\nif Player.Health>Player.MaxHealth:\r\nPlayer.Health=Player.MaxHealth\r\n```\r\nAs for making statuses, there's a lot of ways to do this. One way like before is to give the player an attribute for every possible status.\r\n```\r\nPlayer.PoisonStrength=0\r\nPlayer.BleedingStrength=5\r\n```\r\nAnd you can do stuff like:\r\n```\r\nPlayer.Health=Player.Health-Player.PoisonStrength-Player.BleedingStrength\r\nif Player.Health<=0:\r\nprint(\"You died!\")\r\n```\r\nto damage the player.\r\n\r\nThis isn't a VERY flexible method, because you have to go back and add a new attribute to the player every time you think of a new attribute - \"Oh, I also want the player to be able to get cold! Oh, or get too hot! Also... etc\". There is, again, a lot of ways to do this, but I've solved this problem in my current indev game and here's my solution:\r\n\r\nThe way I'd THAT problem is, in a hidden DebugRoom, I create an Invisible Object called EffectBase. EffectBase has lots of attributes itself. An alias, to call it \"Cold\" \"Broken Bone\" etc. EffectStrength, so the bleed you get from a papercut can be EffectStrength of 1 but from being stabbed with a sword EffectStrength of 10. Duration, Permanent (Duration only ticks down if Permanent is false) etc etc.\r\n\r\nThe use of this is, whenever I need to make a new effect, I simply set EffectBase's attributes to whatever I want, then _clone a copy and move it to the player_. I don't need to know every status ahead of time, I can make them up on the fly. It's invisible, too, so the player doesn't see. So for example, if I walk out into a floor and step on shattered glass, psuedocode might look like this:\r\n```\r\nEffectBase.alias=\"Bleeding\"\r\nEffectBase.Permanent=True\r\nEffectBase.EffectStrength=10\r\nClone EffectBase and move to Player\r\nprint(\"Ouch! You're bleeding! Better get some bandages fast!\")\r\n```\r\nAnd any time a 'turn' passes, you can search for all the EffectBase clones the player currently has with ForEach, with an If to look for the _right_ status:\r\n```\r\nforeach (Status, FilterByAttribute(GetDirectChildren(Player), \"prototype\", EffectBase)){\r\nif (Status.alias=\"Bleeding){\r\nPlayer.Health=Player.Health-Status.EffectStrength\r\nmsg(\"Blood drips from your wound!\")\r\n}\r\n}\r\n```\r\nHope this helps.",
      "EditableFormat": "markdown",
      "HTML": "<p>There is a METRIC TON of ways to do this.</p>\n<p>There is, built into Quest, a 'Health' mechanic. I don't use that, though - generating your own systems to do things is both good programming practice, and lets you know better what you can and can't do.</p>\n<p>So for 'how close are you to dead', you can create a custom Health attribute for the player, of Double (Decimal numbers) type. Pardon my psuedocode, but it could look like this:</p>\n<pre><code>Player.Health=56\n</code></pre>\n<p>Even have a Max Health, if you have healing mechanics and don't want to go over the max:</p>\n<pre><code>Player.MaxHealth=100\n#Which then leads into, whenever you heal the player:\nif Player.Health&gt;Player.MaxHealth:\nPlayer.Health=Player.MaxHealth\n</code></pre>\n<p>As for making statuses, there's a lot of ways to do this. One way like before is to give the player an attribute for every possible status.</p>\n<pre><code>Player.PoisonStrength=0\nPlayer.BleedingStrength=5\n</code></pre>\n<p>And you can do stuff like:</p>\n<pre><code>Player.Health=Player.Health-Player.PoisonStrength-Player.BleedingStrength\nif Player.Health&lt;=0:\nprint(\"You died!\")\n</code></pre>\n<p>to damage the player.</p>\n<p>This isn't a VERY flexible method, because you have to go back and add a new attribute to the player every time you think of a new attribute - \"Oh, I also want the player to be able to get cold! Oh, or get too hot! Also... etc\". There is, again, a lot of ways to do this, but I've solved this problem in my current indev game and here's my solution:</p>\n<p>The way I'd THAT problem is, in a hidden DebugRoom, I create an Invisible Object called EffectBase. EffectBase has lots of attributes itself. An alias, to call it \"Cold\" \"Broken Bone\" etc. EffectStrength, so the bleed you get from a papercut can be EffectStrength of 1 but from being stabbed with a sword EffectStrength of 10. Duration, Permanent (Duration only ticks down if Permanent is false) etc etc.</p>\n<p>The use of this is, whenever I need to make a new effect, I simply set EffectBase's attributes to whatever I want, then <em>clone a copy and move it to the player</em>. I don't need to know every status ahead of time, I can make them up on the fly. It's invisible, too, so the player doesn't see. So for example, if I walk out into a floor and step on shattered glass, psuedocode might look like this:</p>\n<pre><code>EffectBase.alias=\"Bleeding\"\nEffectBase.Permanent=True\nEffectBase.EffectStrength=10\nClone EffectBase and move to Player\nprint(\"Ouch! You're bleeding! Better get some bandages fast!\")\n</code></pre>\n<p>And any time a 'turn' passes, you can search for all the EffectBase clones the player currently has with ForEach, with an If to look for the <em>right</em> status:</p>\n<pre><code>foreach (Status, FilterByAttribute(GetDirectChildren(Player), \"prototype\", EffectBase)){\nif (Status.alias=\"Bleeding){\nPlayer.Health=Player.Health-Status.EffectStrength\nmsg(\"Blood drips from your wound!\")\n}\n}\n</code></pre>\n<p>Hope this helps.</p>\n\n",
      "PostDate": "2019-02-14T22:22:58.299131Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "f5f0eb0f-4c75-40bf-8280-6377c92f4501",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "the \"simple\" concepts are...\r\n\r\n-----------------\r\n\r\nif you only want/need a single status at a time, use a String Attribute:\r\n\r\nplayer.condition = \"normal\" // you're normal\r\nplayer.condition = \"poisoned\" // you're no longer normal, and now you're poisoned\r\nplayer.condition = \"normal\" // you're no longer poisoned, and back to normal\r\nplayer.condition = \"bleeding\" // you're no longer normal, and now you're bleeding\r\nplayer.condition = \"dead\" // you're no longer bleeding, and now you're dead\r\n\r\nand then a simple example of handling it:\r\n\r\nusing either:\r\n\r\n1. a 'Turnscript' Element\r\n2. a 'Timer' Element\r\n3. the special 'changed' Script Attribute\r\n4. a specific action, such as via a Verb or Command\r\n\r\nand for the scripting within:\r\n\r\n```\r\nif (player.condition = \"normal\") {\r\n  // scripting\r\n} else if (player.condition = \"poisoned\") {\r\n  // scripting\r\n} else if (player.condition = \"bleeding\") {\r\n  // scripting\r\n} else if (player.condition = \"dead\") {\r\n  // scripting\r\n} else if (player.condition = \"confused\") {\r\n  // scripting\r\n}\r\n// etc etc etc 'else ifs' of more or less statuses\r\n```\r\n\r\n----------\r\n\r\nif you want/need to have multiple statuses at the same time, then use a List/Dictionary Attribute:\r\n\r\nplayer.condition_list = NewStringList () // creates a new (and blank/empty) Stringlist Attribute\r\n\r\nlist add (player.condition_list, \"normal\") // you're normal\r\n\r\nlist remove (player.condition_list, \"normal\") // you're no longer normal\r\nlist add (player.condition_list, \"poisoned\") // you're now poisoned\r\n\r\nlist remove (player.condition_list, \"poisoned\") // you're no longer poisoned\r\nlist add (player.condition_list, \"normal\") // you're now normal\r\n\r\nlist remove (player.condition_list, \"normal\") // you're no longer normal\r\nlist add (player.condition_list, \"poisoned\") // you're now poisoned\r\nlist add (player.condition_list, \"bleeding\") // you're now bleeding too (you're poisoned and bleeding)\r\n\r\nand then a simple example of handling it:\r\n\r\nusing either:\r\n\r\n1. a 'Turnscript' Element\r\n2. a 'Timer' Element\r\n3. the special 'changed' Script Attribute\r\n4. a specific action, such as via a Verb or Command\r\n\r\nand for the scripting within:\r\n\r\n```\r\nif (ListContains (player.condition_list, \"normal\")) {\r\n  // scripting\r\n} else if (ListContains (player.condition_list, \"dead\")) {\r\n  // scripting\r\n} else {\r\n  if (ListContains (player.condition_list, \"poisoned\")) {\r\n    // scripting\r\n  }\r\n  if (ListContains (player.condition_list, \"confused\")) {\r\n    // scripting\r\n  }\r\n  if (ListContains (player.condition_list, \"bleeding\")) {\r\n    // scripting\r\n  }\r\n}\r\n```\r\n\r\n---------------\r\n\r\nif you want/need to have multiple statuses at the same time, then alternatively (if using Lists/Dictionaries is too complicated/confusing), you can use Boolean Attributes:\r\n\r\nplayer.normal = true\r\nplayer.poisoned = false\r\nplayer.bleeding = false\r\nplayer.dead = false\r\nplayer.confused = false\r\n// you're normal\r\n\r\nplayer.normal = false\r\nplayer.poisoned = false\r\nplayer.bleeding = false\r\nplayer.dead = true\r\nplayer.confused = false\r\n// you're dead\r\n\r\nplayer.normal = false\r\nplayer.poisoned = true\r\nplayer.bleeding = true\r\nplayer.dead = false\r\nplayer.confused = false\r\n// you're poisoned and bleeding\r\n\r\nplayer.normal = false\r\nplayer.poisoned = true\r\nplayer.bleeding = true\r\nplayer.dead = true\r\nplayer.confused = true\r\n// you're dead, poisoned, bleeding, and confused (despite being dead, you still also have the statuses of poisoned, bleeding, and confused, so for example, if you got revived back to life, you'd still suffer from poisoning, bleeding, and confusion)\r\n\r\nand then a simple example of handling it:\r\n\r\nusing either:\r\n\r\n1. a 'Turnscript' Element\r\n2. a 'Timer' Element\r\n3. the special 'changed' Script Attribute\r\n4. a specific action, such as via a Verb or Command\r\n\r\nand for the scripting within:\r\n\r\n(using a design structure for if you don't allow being dead and having another status)\r\n(same as with the List/Dictionary example above)\r\n\r\n```\r\nif (player.normal) {\r\n  // scripting\r\n} else if (player.dead) {\r\n  // scripting\r\n} else {\r\n  if (player.poisoned) {\r\n  // scripting\r\n  }\r\n  if (player.confused) {\r\n  // scripting\r\n  }\r\n  if (player.bleeding) {\r\n  // scripting\r\n  }\r\n}\r\n```\r\n\r\n-----------------\r\n\r\nif any of your statuses cause/do an equation/formula or whatever else that needs to be undone to return to normal, for its action, then you got to have another instance/action that does the reverse, to be able to return it back to normal (the \"cancel\" effect):\r\n\r\nsee pixie's libraries, such as reading about the \"cancel effects / secondary actions\"\r\n\r\nhttps://github.com/ThePix/quest/wiki/CombatLib-Part-08:-Lasting-Spells\r\nhttps://github.com/ThePix/quest/wiki/CombatLib-Part-09:-Instant-Spells\r\n(and probably more sections as well)\r\n\r\nhere's pixie's home page: https://github.com/ThePix/quest/wiki\r\n\r\n--------------\r\n\r\nand for any statuses with a scale, simply also have an Integer Attribute for it (and possibly you'd also want/need a String Attribute too), here's an simple example:\r\n\r\nplayer.condition = \"radiation\"\r\n\r\nplayer.radiation_integer_attribute = 0\r\n\r\nplayer.radiation_string_attribute = \"zero radiation\"\r\n\r\n```\r\n// if you want/need max/min bounds (for this example: 0 to 100):\r\n\r\nif (player.radiation_integer_attribute > 100) {\r\n  player.radiation_integer_attribute = 100\r\n} else if (player.radiation_integer_attribute < 0) {\r\n  player.radiation_integer_attribute = 0\r\n} \r\n\r\n------------\r\n\r\n// not the best design (redundant code), but I think/hope it'll be easier for you to understand:\r\n\r\n// (also, I'm skipping some scale amounts, as I don't want to do that much work, lol)\r\n\r\nif (player.radiation_integer_attribute = 100) {\r\n  msg (\"You're dead, killed from your radiation sickness\")\r\n  msg (\"GAME OVER\")\r\n  finish\r\n} else if (player.radiation_integer_attribute > 90) {\r\n  player.radiation_string_attribute = \"You're on the verge of death from radiation sickness\"\r\n  foreach (stat_string_attribute, stat_object.stat_list) {\r\n    if (player.stat_string_attribute >= player.radiation_integer_attribute) {\r\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\r\n      //\r\n      // example:\r\n      //\r\n      // player.strength_integer_attribute = 100\r\n      // player.radiation_integer_attribute = 93\r\n      // player.strength_integer_attribute = player.strength_integer_attribute - player.radiation_integer_attribute\r\n      // player.strength_integer_attribute = [100] - [93]\r\n      // player.strength_integer_attribute = 7\r\n      //\r\n      // player.endurance_integer_attribute = 99\r\n      // player.radiation_integer_attribute = 95\r\n      // player.endurance_integer_attribute = player.endurance_integer_attribute - player.radiation_integer_attribute\r\n      // player.endurance_integer_attribute = [99] - [95]\r\n      // player.endurance_integer_attribute = 4\r\n      //\r\n      // etc etc etc (all/every stat = for*EACH*)\r\n      //\r\n    } else {\r\n      player.stat_string_attribute = 0\r\n      //\r\n      // example:\r\n      //\r\n      // player.strength_integer_attribute = 30\r\n      // player.radiation_integer_attribute = 93\r\n      // player.strength_integer_attribute = 0\r\n      //\r\n    }\r\n  }\r\n} else if (player.radiation_integer_attribute > 70) {\r\n  player.radiation_string_attribute = \"You're severly suffering from your radiation sickness\"\r\n  foreach (stat_string_attribute, stat_object.stat_list) {\r\n    if (player.stat_string_attribute >= player.radiation_integer_attribute) {\r\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\r\n    } else {\r\n      player.stat_string_attribute = 0\r\n    }\r\n  }\r\n} else if (player.radiation_integer_attribute > 10) {\r\n  player.radiation_string_attribute = \"You're just starting to feel the symptoms of radiation sickness\"\r\n  foreach (stat_string_attribute, stat_object.stat_list) {\r\n    if (player.stat_string_attribute >= player.radiation_integer_attribute) {\r\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\r\n    } else {\r\n      player.stat_string_attribute = 0\r\n    }\r\n  }\r\n} else {\r\n  player.radiation_string_attribute = \"You're clean (zero radiation count)\"\r\n}\r\n\r\nmsg (player.radiation_string_attribute)\r\n```\r\n\r\na more simple example:\r\n\r\nalignment:\r\n\r\n0-33: evil\r\n34-66: neutral\r\n67-100: good\r\n\r\n// initial/starting Attributes:\r\nplayer.alignment_integer_attribute = 50\r\nplayer.alignment_string_attribute = \"neutral\"\r\n\r\n```\r\n<object name=\"player\">\r\n\r\n  <attr name=\"alignment_string_attribute\" type=\"string\">neutral</attr>\r\n\r\n  <attr name=\"alignment_integer_attribute\" type=\"int\">50</attr>\r\n\r\n  <attr name=\"changedalignment_integer_attribute\" type=\"script\">\r\n\r\n    <![CDATA[\r\n\r\n      if (this.alignment_integer_attribute > 66) {\r\n        this.alignment_string_attribute = \"good\"\r\n      } else if (this.alignment_integer_attribute > 33) {\r\n        this.alignment_string_attribute = \"neutral\"\r\n      } else {\r\n        this.alignment_string_attribute = \"evil\"\r\n      }\r\n\r\n    ]]>\r\n\r\n  </attr>\r\n\r\n</object>\r\n```\r\n\r\n-----------\r\n\r\n```\r\n// high to low example:\r\n\r\nif (test.score >= 90) {\r\n  test.grade = \"A\"\r\n} else if (test.score >= 80) {\r\n  test.grade = \"B\"\r\n} else if (test.score >= 70) {\r\n  test.grade = \"C\"\r\n} else if (test.score >= 60) {\r\n  test.grade = \"D\"\r\n} else {\r\n  test.grade = \"F\"\r\n}\r\n\r\n----------------\r\n\r\n// high to low alternative (fewer operations, more efficient) example:\r\n\r\nif (test.score > 89) {\r\n  test.grade = \"A\"\r\n} else if (test.score > 79) {\r\n  test.grade = \"B\"\r\n} else if (test.score > 69) {\r\n  test.grade = \"C\"\r\n} else if (test.score > 59) {\r\n  test.grade = \"D\"\r\n} else {\r\n  test.grade = \"F\"\r\n}\r\n\r\n-----------------\r\n\r\n// low to high example:\r\n\r\nif (test.score < 60) {\r\n  test.grade = \"F\"\r\n} else if (test.score < 70) {\r\n  test.grade = \"D\"\r\n} else if (test.score < 80) {\r\n  test.grade = \"C\"\r\n} else if (test.score < 90) {\r\n  test.grade = \"B\"\r\n} else {\r\n  test.grade = \"A\"\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>the \"simple\" concepts are...</p>\n<hr>\n<p>if you only want/need a single status at a time, use a String Attribute:</p>\n<p>player.condition = \"normal\" // you're normal<br>\nplayer.condition = \"poisoned\" // you're no longer normal, and now you're poisoned<br>\nplayer.condition = \"normal\" // you're no longer poisoned, and back to normal<br>\nplayer.condition = \"bleeding\" // you're no longer normal, and now you're bleeding<br>\nplayer.condition = \"dead\" // you're no longer bleeding, and now you're dead</p>\n<p>and then a simple example of handling it:</p>\n<p>using either:</p>\n<ol>\n<li>a 'Turnscript' Element</li>\n<li>a 'Timer' Element</li>\n<li>the special 'changed' Script Attribute</li>\n<li>a specific action, such as via a Verb or Command</li>\n</ol>\n<p>and for the scripting within:</p>\n<pre><code>if (player.condition = \"normal\") {\n  // scripting\n} else if (player.condition = \"poisoned\") {\n  // scripting\n} else if (player.condition = \"bleeding\") {\n  // scripting\n} else if (player.condition = \"dead\") {\n  // scripting\n} else if (player.condition = \"confused\") {\n  // scripting\n}\n// etc etc etc 'else ifs' of more or less statuses\n</code></pre>\n<hr>\n<p>if you want/need to have multiple statuses at the same time, then use a List/Dictionary Attribute:</p>\n<p>player.condition_list = NewStringList () // creates a new (and blank/empty) Stringlist Attribute</p>\n<p>list add (player.condition_list, \"normal\") // you're normal</p>\n<p>list remove (player.condition_list, \"normal\") // you're no longer normal<br>\nlist add (player.condition_list, \"poisoned\") // you're now poisoned</p>\n<p>list remove (player.condition_list, \"poisoned\") // you're no longer poisoned<br>\nlist add (player.condition_list, \"normal\") // you're now normal</p>\n<p>list remove (player.condition_list, \"normal\") // you're no longer normal<br>\nlist add (player.condition_list, \"poisoned\") // you're now poisoned<br>\nlist add (player.condition_list, \"bleeding\") // you're now bleeding too (you're poisoned and bleeding)</p>\n<p>and then a simple example of handling it:</p>\n<p>using either:</p>\n<ol>\n<li>a 'Turnscript' Element</li>\n<li>a 'Timer' Element</li>\n<li>the special 'changed' Script Attribute</li>\n<li>a specific action, such as via a Verb or Command</li>\n</ol>\n<p>and for the scripting within:</p>\n<pre><code>if (ListContains (player.condition_list, \"normal\")) {\n  // scripting\n} else if (ListContains (player.condition_list, \"dead\")) {\n  // scripting\n} else {\n  if (ListContains (player.condition_list, \"poisoned\")) {\n    // scripting\n  }\n  if (ListContains (player.condition_list, \"confused\")) {\n    // scripting\n  }\n  if (ListContains (player.condition_list, \"bleeding\")) {\n    // scripting\n  }\n}\n</code></pre>\n<hr>\n<p>if you want/need to have multiple statuses at the same time, then alternatively (if using Lists/Dictionaries is too complicated/confusing), you can use Boolean Attributes:</p>\n<p>player.normal = true<br>\nplayer.poisoned = false<br>\nplayer.bleeding = false<br>\nplayer.dead = false<br>\nplayer.confused = false<br>\n// you're normal</p>\n<p>player.normal = false<br>\nplayer.poisoned = false<br>\nplayer.bleeding = false<br>\nplayer.dead = true<br>\nplayer.confused = false<br>\n// you're dead</p>\n<p>player.normal = false<br>\nplayer.poisoned = true<br>\nplayer.bleeding = true<br>\nplayer.dead = false<br>\nplayer.confused = false<br>\n// you're poisoned and bleeding</p>\n<p>player.normal = false<br>\nplayer.poisoned = true<br>\nplayer.bleeding = true<br>\nplayer.dead = true<br>\nplayer.confused = true<br>\n// you're dead, poisoned, bleeding, and confused (despite being dead, you still also have the statuses of poisoned, bleeding, and confused, so for example, if you got revived back to life, you'd still suffer from poisoning, bleeding, and confusion)</p>\n<p>and then a simple example of handling it:</p>\n<p>using either:</p>\n<ol>\n<li>a 'Turnscript' Element</li>\n<li>a 'Timer' Element</li>\n<li>the special 'changed' Script Attribute</li>\n<li>a specific action, such as via a Verb or Command</li>\n</ol>\n<p>and for the scripting within:</p>\n<p>(using a design structure for if you don't allow being dead and having another status)<br>\n(same as with the List/Dictionary example above)</p>\n<pre><code>if (player.normal) {\n  // scripting\n} else if (player.dead) {\n  // scripting\n} else {\n  if (player.poisoned) {\n  // scripting\n  }\n  if (player.confused) {\n  // scripting\n  }\n  if (player.bleeding) {\n  // scripting\n  }\n}\n</code></pre>\n<hr>\n<p>if any of your statuses cause/do an equation/formula or whatever else that needs to be undone to return to normal, for its action, then you got to have another instance/action that does the reverse, to be able to return it back to normal (the \"cancel\" effect):</p>\n<p>see pixie's libraries, such as reading about the \"cancel effects / secondary actions\"</p>\n<p>https://github.com/ThePix/quest/wiki/CombatLib-Part-08:-Lasting-Spells<br>\nhttps://github.com/ThePix/quest/wiki/CombatLib-Part-09:-Instant-Spells<br>\n(and probably more sections as well)</p>\n<p>here's pixie's home page: https://github.com/ThePix/quest/wiki</p>\n<hr>\n<p>and for any statuses with a scale, simply also have an Integer Attribute for it (and possibly you'd also want/need a String Attribute too), here's an simple example:</p>\n<p>player.condition = \"radiation\"</p>\n<p>player.radiation_integer_attribute = 0</p>\n<p>player.radiation_string_attribute = \"zero radiation\"</p>\n<pre><code>// if you want/need max/min bounds (for this example: 0 to 100):\n\nif (player.radiation_integer_attribute &gt; 100) {\n  player.radiation_integer_attribute = 100\n} else if (player.radiation_integer_attribute &lt; 0) {\n  player.radiation_integer_attribute = 0\n} \n\n------------\n\n// not the best design (redundant code), but I think/hope it'll be easier for you to understand:\n\n// (also, I'm skipping some scale amounts, as I don't want to do that much work, lol)\n\nif (player.radiation_integer_attribute = 100) {\n  msg (\"You're dead, killed from your radiation sickness\")\n  msg (\"GAME OVER\")\n  finish\n} else if (player.radiation_integer_attribute &gt; 90) {\n  player.radiation_string_attribute = \"You're on the verge of death from radiation sickness\"\n  foreach (stat_string_attribute, stat_object.stat_list) {\n    if (player.stat_string_attribute &gt;= player.radiation_integer_attribute) {\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\n      //\n      // example:\n      //\n      // player.strength_integer_attribute = 100\n      // player.radiation_integer_attribute = 93\n      // player.strength_integer_attribute = player.strength_integer_attribute - player.radiation_integer_attribute\n      // player.strength_integer_attribute = [100] - [93]\n      // player.strength_integer_attribute = 7\n      //\n      // player.endurance_integer_attribute = 99\n      // player.radiation_integer_attribute = 95\n      // player.endurance_integer_attribute = player.endurance_integer_attribute - player.radiation_integer_attribute\n      // player.endurance_integer_attribute = [99] - [95]\n      // player.endurance_integer_attribute = 4\n      //\n      // etc etc etc (all/every stat = for*EACH*)\n      //\n    } else {\n      player.stat_string_attribute = 0\n      //\n      // example:\n      //\n      // player.strength_integer_attribute = 30\n      // player.radiation_integer_attribute = 93\n      // player.strength_integer_attribute = 0\n      //\n    }\n  }\n} else if (player.radiation_integer_attribute &gt; 70) {\n  player.radiation_string_attribute = \"You're severly suffering from your radiation sickness\"\n  foreach (stat_string_attribute, stat_object.stat_list) {\n    if (player.stat_string_attribute &gt;= player.radiation_integer_attribute) {\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\n    } else {\n      player.stat_string_attribute = 0\n    }\n  }\n} else if (player.radiation_integer_attribute &gt; 10) {\n  player.radiation_string_attribute = \"You're just starting to feel the symptoms of radiation sickness\"\n  foreach (stat_string_attribute, stat_object.stat_list) {\n    if (player.stat_string_attribute &gt;= player.radiation_integer_attribute) {\n      player.stat_string_attribute = player.stat_string_attribute - player.radiation_integer_attribute\n    } else {\n      player.stat_string_attribute = 0\n    }\n  }\n} else {\n  player.radiation_string_attribute = \"You're clean (zero radiation count)\"\n}\n\nmsg (player.radiation_string_attribute)\n</code></pre>\n<p>a more simple example:</p>\n<p>alignment:</p>\n<p>0-33: evil<br>\n34-66: neutral<br>\n67-100: good</p>\n<p>// initial/starting Attributes:<br>\nplayer.alignment_integer_attribute = 50<br>\nplayer.alignment_string_attribute = \"neutral\"</p>\n<pre><code>&lt;object name=\"player\"&gt;\n\n  &lt;attr name=\"alignment_string_attribute\" type=\"string\"&gt;neutral&lt;/attr&gt;\n\n  &lt;attr name=\"alignment_integer_attribute\" type=\"int\"&gt;50&lt;/attr&gt;\n\n  &lt;attr name=\"changedalignment_integer_attribute\" type=\"script\"&gt;\n\n    &lt;![CDATA[\n\n      if (this.alignment_integer_attribute &gt; 66) {\n        this.alignment_string_attribute = \"good\"\n      } else if (this.alignment_integer_attribute &gt; 33) {\n        this.alignment_string_attribute = \"neutral\"\n      } else {\n        this.alignment_string_attribute = \"evil\"\n      }\n\n    ]]&gt;\n\n  &lt;/attr&gt;\n\n&lt;/object&gt;\n</code></pre>\n<hr>\n<pre><code>// high to low example:\n\nif (test.score &gt;= 90) {\n  test.grade = \"A\"\n} else if (test.score &gt;= 80) {\n  test.grade = \"B\"\n} else if (test.score &gt;= 70) {\n  test.grade = \"C\"\n} else if (test.score &gt;= 60) {\n  test.grade = \"D\"\n} else {\n  test.grade = \"F\"\n}\n\n----------------\n\n// high to low alternative (fewer operations, more efficient) example:\n\nif (test.score &gt; 89) {\n  test.grade = \"A\"\n} else if (test.score &gt; 79) {\n  test.grade = \"B\"\n} else if (test.score &gt; 69) {\n  test.grade = \"C\"\n} else if (test.score &gt; 59) {\n  test.grade = \"D\"\n} else {\n  test.grade = \"F\"\n}\n\n-----------------\n\n// low to high example:\n\nif (test.score &lt; 60) {\n  test.grade = \"F\"\n} else if (test.score &lt; 70) {\n  test.grade = \"D\"\n} else if (test.score &lt; 80) {\n  test.grade = \"C\"\n} else if (test.score &lt; 90) {\n  test.grade = \"B\"\n} else {\n  test.grade = \"A\"\n}\n</code></pre>\n\n",
      "PostDate": "2019-02-15T17:57:39.5761401Z",
      "LastEditDate": "2019-02-15T18:14:24.698693Z",
      "link": null
    }
  ]
}
