{
  "Topic": {
    "TopicId": "854",
    "ForumId": "10",
    "Title": "NPC Dialogs",
    "LastUpdated": "2005-07-13T21:09:40+01:00",
    "ReplyCount": 6
  },
  "Posts": [
    {
      "PostId": "6640",
      "UserId": 0,
      "Username": "The Stalker",
      "UserAvatar": null,
      "UserGravatar": "d742b4c4e23cb9f4e92282d16ac67586",
      "EditableText": "I am attempting to have NPCs have a dialog path that results in diffrent outcomes, or just general information/fluff.  I want to give the player options to choose from but I don't wish the player to type out exactly what thier character says, just simply a number (ie: if an NPC has 3 dialog options, and the third options went: \"3. Where did you last see detective Ashly?\" the player can simply type in 3) to futher the dialog.\n\nBelow is what I have tried so far with no success.\n\n[code:307g919p]Print &quot;Hi how can I help you?&#91;NEW LINE&#93;&#91;NEW LINE&#93;1&#46; Option One&#91;NEW LINE&#93;2&#46; Option Two&#91;NEW LINE&#93;3&#46; Option Three&quot;;\nWait for the player to press a key with prompt &quot;Choice?&quot;;\nPut what the player types next into the &quot;dialogchoice&quot; string variable;\nIf &quot;dialogchoice&quot; is equal to &quot;1&quot; Then Print &quot;You Chose Option One!&quot;;\nIf &quot;dialogchoice&quot; is equal to &quot;2&quot; Then Print &quot;You have Chosen Option Two!&quot;;\nIf &quot;dialogchoice&quot; is equal to &quot;3&quot; Then Print &quot;You have Chosen Option Three!&quot;\n[/code:307g919p]\n\nI belive the issue has to do with inputing what the player types; into the variable.  Upon testing, once \"Choice?\" appears, entering a number and hitting enter produces no result (or new line), typing in the same or another number then hitting enter has the same result, upon the third time a new line with the number appears.  However the script does not produce any results.\n\nWhat am I missing (or am doing wrong) to passdata to a variable (from the player) and refrencing it for use?",
      "EditableFormat": "bbcode",
      "HTML": "I am attempting to have NPCs have a dialog path that results in diffrent outcomes, or just general information/fluff.  I want to give the player options to choose from but I don't wish the player to type out exactly what thier character says, just simply a number (ie: if an NPC has 3 dialog options, and the third options went: \"3. Where did you last see detective Ashly?\" the player can simply type in 3) to futher the dialog.<br/><br/>Below is what I have tried so far with no success.<br/><br/><pre><code>Print &quot;Hi how can I help you?&#91;NEW LINE&#93;&#91;NEW LINE&#93;1&#46; Option One&#91;NEW LINE&#93;2&#46; Option Two&#91;NEW LINE&#93;3&#46; Option Three&quot;;<br/>Wait for the player to press a key with prompt &quot;Choice?&quot;;<br/>Put what the player types next into the &quot;dialogchoice&quot; string variable;<br/>If &quot;dialogchoice&quot; is equal to &quot;1&quot; Then Print &quot;You Chose Option One!&quot;;<br/>If &quot;dialogchoice&quot; is equal to &quot;2&quot; Then Print &quot;You have Chosen Option Two!&quot;;<br/>If &quot;dialogchoice&quot; is equal to &quot;3&quot; Then Print &quot;You have Chosen Option Three!&quot;<br/></code></pre><br/><br/>I belive the issue has to do with inputing what the player types; into the variable.  Upon testing, once \"Choice?\" appears, entering a number and hitting enter produces no result (or new line), typing in the same or another number then hitting enter has the same result, upon the third time a new line with the number appears.  However the script does not produce any results.<br/><br/>What am I missing (or am doing wrong) to passdata to a variable (from the player) and refrencing it for use?",
      "PostDate": "2005-07-13T05:09:17+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6641",
      "UserId": 0,
      "Username": "The Stalker",
      "UserAvatar": null,
      "UserGravatar": "d742b4c4e23cb9f4e92282d16ac67586",
      "EditableText": "After poking around I discoverd I can use Menus to perform this!  I can perfome branching selections by creating a submenu for each menu selection for further path choices, however I can see that even a simple conversation of two paths deep can become monolithic :/",
      "EditableFormat": "bbcode",
      "HTML": "After poking around I discoverd I can use Menus to perform this!  I can perfome branching selections by creating a submenu for each menu selection for further path choices, however I can see that even a simple conversation of two paths deep can become monolithic :/",
      "PostDate": "2005-07-13T05:50:57+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6644",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Well, the first error is that you don't have to wait for the player to press a key. That more like saying:\n'Print this message, wait for a key-press, then ask for the players input'\n\nWhen what you want is:\n'Print this message and ask for the players choice'\n\nYour second error is that the variable (dialogchoice) in your \"conditional\" isn't infact checking the variable.\n\nWhen you're saying 'If \"dialogchoice\" is equal to \"1\"' you are infact asking if [b:2lwlj1xf]dialogchoice[/b:2lwlj1xf] = [b:2lwlj1xf]1[/b:2lwlj1xf], which it never will.\nWhat you need to do is put #'s around dialogchoice, so it replaces it with the value of the variable. Like so:\n'If \"#dialogchoice#\" is equal to \"1\"' This will ask if [b:2lwlj1xf]1[/b:2lwlj1xf] = [b:2lwlj1xf]1[/b:2lwlj1xf] etc...\n\nAnd yes, I think menu's were a nice little idea, but they aren't implemented quite 'correctly'.",
      "EditableFormat": "bbcode",
      "HTML": "Well, the first error is that you don't have to wait for the player to press a key. That more like saying:<br/>'Print this message, wait for a key-press, then ask for the players input'<br/><br/>When what you want is:<br/>'Print this message and ask for the players choice'<br/><br/>Your second error is that the variable (dialogchoice) in your \"conditional\" isn't infact checking the variable.<br/><br/>When you're saying 'If \"dialogchoice\" is equal to \"1\"' you are infact asking if <span style=\"font-weight:bold;\">dialogchoice</span> = <span style=\"font-weight:bold;\">1</span>, which it never will.<br/>What you need to do is put #'s around dialogchoice, so it replaces it with the value of the variable. Like so:<br/>'If \"#dialogchoice#\" is equal to \"1\"' This will ask if <span style=\"font-weight:bold;\">1</span> = <span style=\"font-weight:bold;\">1</span> etc...<br/><br/>And yes, I think menu's were a nice little idea, but they aren't implemented quite 'correctly'.",
      "PostDate": "2005-07-13T10:36:58+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6646",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Hi 'Stalker'\n\nFirstly, let me establish that I understand the requirement here.\n\nYou want to create a menu 'tree' to simulate conversation between the player and an NPC, where you have a single start menu and potentially a few layers of sub menus.\n\nIf that's what you are trying to do, I would suggest you put all your menu options into an array and write a procedure which displays sub-sections of your array as a menu of choices.  You'd need to make a control variable to keep the player 'in the menu loop' until he has navigated to a conclusion.\n\nThe coding of 'proper' Quest menus is too restrictive for this, but you can 'brew your own' and ought to be able to wrap loads of on screen menu choices up into one quite small procedure.  You'll still have to test for and action lots of possible results of course, but that is inevitable.\n\nAl (MaDbRiT)",
      "EditableFormat": "bbcode",
      "HTML": "Hi 'Stalker'<br/><br/>Firstly, let me establish that I understand the requirement here.<br/><br/>You want to create a menu 'tree' to simulate conversation between the player and an NPC, where you have a single start menu and potentially a few layers of sub menus.<br/><br/>If that's what you are trying to do, I would suggest you put all your menu options into an array and write a procedure which displays sub-sections of your array as a menu of choices.  You'd need to make a control variable to keep the player 'in the menu loop' until he has navigated to a conclusion.<br/><br/>The coding of 'proper' Quest menus is too restrictive for this, but you can 'brew your own' and ought to be able to wrap loads of on screen menu choices up into one quite small procedure.  You'll still have to test for and action lots of possible results of course, but that is inevitable.<br/><br/>Al (MaDbRiT)",
      "PostDate": "2005-07-13T11:25:13+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6647",
      "UserId": 0,
      "Username": "paul_one",
      "UserAvatar": null,
      "UserGravatar": "fef8a1875028f4300bb683f29c432894",
      "EditableText": "Thanks for that Al.\n\nI just remembered an old tree-navigation lesson somewhere. Might look into coding it in ASL. Very interesting...\n\n[EDIT]\nActually Al, I'd be very interested in your way of doing things, because I started looking into variables and about 5 minutes in (planning stage) I remembered that 'node's (in tree's) need 3 basic properties. [b:3krgdi46]Their name[/b:3krgdi46](index)=link to data, [b:3krgdi46]their children[/b:3krgdi46]=other nodes coming from them, and [b:3krgdi46]their parent[/b:3krgdi46] so you can navigate back up the tree when you propogate (right choice?) it.\n\nYet a variable can only hold 2 - it's name and it's children - and I don't fancy 2 tree's, one with children and one with var's.\n\nI reckon objects would be a good idea. Each object with 2 properties (3 if you want to hold the data in the object). You can then use a \"control\" variable to control the form of the tree,and use properties from there.\n\nYour opinion?",
      "EditableFormat": "bbcode",
      "HTML": "Thanks for that Al.<br/><br/>I just remembered an old tree-navigation lesson somewhere. Might look into coding it in ASL. Very interesting...<br/><br/>[EDIT]<br/>Actually Al, I'd be very interested in your way of doing things, because I started looking into variables and about 5 minutes in (planning stage) I remembered that 'node's (in tree's) need 3 basic properties. <span style=\"font-weight:bold;\">Their name</span>(index)=link to data, <span style=\"font-weight:bold;\">their children</span>=other nodes coming from them, and <span style=\"font-weight:bold;\">their parent</span> so you can navigate back up the tree when you propogate (right choice?) it.<br/><br/>Yet a variable can only hold 2 - it's name and it's children - and I don't fancy 2 tree's, one with children and one with var's.<br/><br/>I reckon objects would be a good idea. Each object with 2 properties (3 if you want to hold the data in the object). You can then use a \"control\" variable to control the form of the tree,and use properties from there.<br/><br/>Your opinion?",
      "PostDate": "2005-07-13T15:12:38+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6650",
      "UserId": 0,
      "Username": "The Stalker",
      "UserAvatar": null,
      "UserGravatar": "d742b4c4e23cb9f4e92282d16ac67586",
      "EditableText": "Using # and % are new to me, I just examined what they are used for.  # is used around strings variables, while % is around numric variables. Now I did quick check for arrays and found some info.\n\n[code:1gzw8gjg]\nChange the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 1!&quot;\nChange the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 2!&quot;\nChange the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 3!&quot;\nPrint &quot;Hi how can I help you?&#91;NEW LINE&#93;&#91;NEW LINE&#93;1&#46; Option One&#91;NEW LINE&#93;2&#46; Option Two&#91;NEW LINE&#93;3&#46; Option Three&quot;;\nPut what the player types next into the &quot;dialogchoice&quot; string variable;\nIf &quot;#dialogchoice#&quot; is equal to &quot;1&quot; Then Print &quot;#bobdialog&#91;1&#93;#!&quot;;\nIf &quot;#dialogchoice#&quot; is equal to &quot;2&quot; Then Print &quot;#bobdialog&#91;2&#93;#!&quot;;\nIf &quot;#dialogchoice#&quot; is equal to &quot;3&quot; Then Print &quot;#bobdialog&#91;3&#93;#!&quot;;\n[/code:1gzw8gjg]\n\nOn another note \"Wait for the player to press a key with prompt\" would be simply used as a delay only?  For example to break up alot of text, the prompt could say \"Press anykey to continue\", so the player has time to digest the current block of text before the next one is created?",
      "EditableFormat": "bbcode",
      "HTML": "Using # and % are new to me, I just examined what they are used for.  # is used around strings variables, while % is around numric variables. Now I did quick check for arrays and found some info.<br/><br/><pre><code><br/>Change the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 1!&quot;<br/>Change the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 2!&quot;<br/>Change the contents of string &quot;bobdialog&#91;1&#93;&quot; to &quot;You've picked option 3!&quot;<br/>Print &quot;Hi how can I help you?&#91;NEW LINE&#93;&#91;NEW LINE&#93;1&#46; Option One&#91;NEW LINE&#93;2&#46; Option Two&#91;NEW LINE&#93;3&#46; Option Three&quot;;<br/>Put what the player types next into the &quot;dialogchoice&quot; string variable;<br/>If &quot;#dialogchoice#&quot; is equal to &quot;1&quot; Then Print &quot;#bobdialog&#91;1&#93;#!&quot;;<br/>If &quot;#dialogchoice#&quot; is equal to &quot;2&quot; Then Print &quot;#bobdialog&#91;2&#93;#!&quot;;<br/>If &quot;#dialogchoice#&quot; is equal to &quot;3&quot; Then Print &quot;#bobdialog&#91;3&#93;#!&quot;;<br/></code></pre><br/><br/>On another note \"Wait for the player to press a key with prompt\" would be simply used as a delay only?  For example to break up alot of text, the prompt could say \"Press anykey to continue\", so the player has time to digest the current block of text before the next one is created?",
      "PostDate": "2005-07-13T20:18:27+01:00",
      "LastEditDate": null
    },
    {
      "PostId": "6652",
      "UserId": 0,
      "Username": "MaDbRiT",
      "UserAvatar": null,
      "UserGravatar": "c3dda772bea28be252abe6e4a646a54a",
      "EditableText": "Tron,\n\nI'm sure you could do it with objects and properties, but I think I'd like to try to do it with an array of strings because it makes presenting subsets of elements to the player as a menu, and making selections just an exercise in simple loops and maths.\n\nDon't flame me if this isn't fully thought through, I'm winging it here, but I envisage something like the following.\n\nHave an array (strings) called 'menu[index]'\n\nNow logically these strings would hold the menu item description. I still propose they would do that, but I'd have the description start at the 12th character position in each element. \n\ne.g.\n\nmenu[1]=\"ppp-aaa-cccChoice #1\"\n\nppp would then be used to hold the parent group for this element, aaa  to hold the element's actual group and ccc would hold either the child group or a code to actually DO something rather than present another menu. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) -->\n\nSo we'd actually have something like;\n\nFirst Menu presented (actually array elements 1-4 but 'found' by looping through the array and looking for elements belonging to group 000)\n\nmenu[1]=\"000-000-001Choice #1\"   'Obviously, we'd only show 'Choice #1' on the actual menu \nmenu[2]=\"000-000-002Choice #2\" \nmenu[2]=\"000-000-003Choice #3\" \nmenu[4]=\"000-000-004Choice #4\"\n\nA selection of '2' would cause us to check the ccc (child/target - third batch of 3) section, this returns \"002\" which means we need to call the 'display a menu loop' again but finding those elements that have element group = \"002\". This might find the following subset...\n\nmenu[9]=\"000-002-020Choice #1\"\nmenu[10]=\"000-002-025Choice #2\" \nmenu[11]=\"000-002-030Choice #3\" \nmenu[12]=\"000-002-999Choice #4\"\n\nBasically the 'target' part of the chosen element from the first menu is being used to point at its 'children'.  As you can see more easily in this second menu, each element is also carrying information for its 'parent' (group 000 in this case) and so going back up the tree is just a case of reading the parent section of an array element, call the 'display a menu loop' and so on.\n\nOf course this second level menu can also have children, which would point at it as a parent, for instance\n\nmenu[91]=\"002-030-080Choice #1\"\n\nNow I threw in menu[12] with a child/target value of 999.  I would use this as an indicator that the player has chosen to do something that takes him out of the menu. This could be tested for and action taken depending on the index value of the element (or by varying the 'exit menu' value)\n\nFor the above to work, the menu structure would need to be prepared on paper first (it ought to be anyway!), but once 'encoded' the actual presentation and selection loops - and maths required to make this all function - ought to be relatively easy stuff unless I've missed something.  \n\nAl",
      "EditableFormat": "bbcode",
      "HTML": "Tron,<br/><br/>I'm sure you could do it with objects and properties, but I think I'd like to try to do it with an array of strings because it makes presenting subsets of elements to the player as a menu, and making selections just an exercise in simple loops and maths.<br/><br/>Don't flame me if this isn't fully thought through, I'm winging it here, but I envisage something like the following.<br/><br/>Have an array (strings) called 'menu[index]'<br/><br/>Now logically these strings would hold the menu item description. I still propose they would do that, but I'd have the description start at the 12th character position in each element. <br/><br/>e.g.<br/><br/>menu[1]=\"ppp-aaa-cccChoice #1\"<br/><br/>ppp would then be used to hold the parent group for this element, aaa  to hold the element's actual group and ccc would hold either the child group or a code to actually DO something rather than present another menu. <!-- s:-) --><img src=\"{SMILIES_PATH}/icon_e_smile.gif\" alt=\":-)\" title=\"Smile\" /><!-- s:-) --><br/><br/>So we'd actually have something like;<br/><br/>First Menu presented (actually array elements 1-4 but 'found' by looping through the array and looking for elements belonging to group 000)<br/><br/>menu[1]=\"000-000-001Choice #1\"   'Obviously, we'd only show 'Choice #1' on the actual menu <br/>menu[2]=\"000-000-002Choice #2\" <br/>menu[2]=\"000-000-003Choice #3\" <br/>menu[4]=\"000-000-004Choice #4\"<br/><br/>A selection of '2' would cause us to check the ccc (child/target - third batch of 3) section, this returns \"002\" which means we need to call the 'display a menu loop' again but finding those elements that have element group = \"002\". This might find the following subset...<br/><br/>menu[9]=\"000-002-020Choice #1\"<br/>menu[10]=\"000-002-025Choice #2\" <br/>menu[11]=\"000-002-030Choice #3\" <br/>menu[12]=\"000-002-999Choice #4\"<br/><br/>Basically the 'target' part of the chosen element from the first menu is being used to point at its 'children'.  As you can see more easily in this second menu, each element is also carrying information for its 'parent' (group 000 in this case) and so going back up the tree is just a case of reading the parent section of an array element, call the 'display a menu loop' and so on.<br/><br/>Of course this second level menu can also have children, which would point at it as a parent, for instance<br/><br/>menu[91]=\"002-030-080Choice #1\"<br/><br/>Now I threw in menu[12] with a child/target value of 999.  I would use this as an indicator that the player has chosen to do something that takes him out of the menu. This could be tested for and action taken depending on the index value of the element (or by varying the 'exit menu' value)<br/><br/>For the above to work, the menu structure would need to be prepared on paper first (it ought to be anyway!), but once 'encoded' the actual presentation and selection loops - and maths required to make this all function - ought to be relatively easy stuff unless I've missed something.  <br/><br/>Al",
      "PostDate": "2005-07-13T21:09:40+01:00",
      "LastEditDate": null
    }
  ]
}
