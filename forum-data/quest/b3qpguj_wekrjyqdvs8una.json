{
  "Topic": {
    "TopicId": "b3qpguj_wekrjyqdvs8una",
    "ForumId": "10",
    "Title": "How do I add number of verbs besides alias like donkey (3)?",
    "LastUpdated": "2024-04-28T14:19:24.1870185Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7e2efbc4-fb72-47b0-b69f-24ba1b845eba",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I like to decorate my games with uninteractable objects, which is also referred as scenery\r\nThis becomes a problem quickly, when you have 100 scenery objects in your game, your players are just mindlessly clicking everything to search for the objects that actually have any verbs to interact with.\r\n\r\nThere are a few ways of design to solve this problem, even though I like the (3) idea most as it shows how many possible interactions there are.\r\n1. Number of verbs besides alias like donkey (3)\r\n2. Change the font color of the object names, black = uninteractable, green = interactable, as you might have thought, not everyone likes the game to be too colorful and everyone likes different color\r\n3. Skip making scenery objects, and add a print message on describing the scenery of that room\r\n4. A separate container at the bottom of player's inventory and at the bottom of map inventory, create a new custom box, all objects in this box are automatically classified as scenery objects, so players will not waste time to click on them\r\n\r\nUnderstand that I want a code that automatically shows objects are interactable in the whole game at all rooms, my games can have like 100 rooms, and it would be chore to write codes for all of them.\r\nFrom  the above design solutions, there are actually further complications:\r\n\r\n1. When you add verbs besides alias like donkey level 2, it might overwrite any alias coding you have done before, including gameplay codes which checks for alias, when you change the alias, donkey level 2 becomes donkey (3), and any existing codes that requires that exact alias may fail, or that you are erasing away helpful aliases like level 2\r\n2. Font color have no problems, just that some people can't see colors clearly enough\r\n3. This is probably my plan b, if nobody helps me to code, the thing is that objects on right hand side feels more intuitive while messages seems skippable unnecessaries according to my playstyle though\r\n4. This is possibly the most ideal solution, there are no flaws, but it probably requires advanced coding knowledge",
      "EditableFormat": "markdown",
      "HTML": "<p>So I like to decorate my games with uninteractable objects, which is also referred as scenery<br>\nThis becomes a problem quickly, when you have 100 scenery objects in your game, your players are just mindlessly clicking everything to search for the objects that actually have any verbs to interact with.</p>\n<p>There are a few ways of design to solve this problem, even though I like the (3) idea most as it shows how many possible interactions there are.</p>\n<ol>\n<li>Number of verbs besides alias like donkey (3)</li>\n<li>Change the font color of the object names, black = uninteractable, green = interactable, as you might have thought, not everyone likes the game to be too colorful and everyone likes different color</li>\n<li>Skip making scenery objects, and add a print message on describing the scenery of that room</li>\n<li>A separate container at the bottom of player's inventory and at the bottom of map inventory, create a new custom box, all objects in this box are automatically classified as scenery objects, so players will not waste time to click on them</li>\n</ol>\n<p>Understand that I want a code that automatically shows objects are interactable in the whole game at all rooms, my games can have like 100 rooms, and it would be chore to write codes for all of them.<br>\nFrom  the above design solutions, there are actually further complications:</p>\n<ol>\n<li>When you add verbs besides alias like donkey level 2, it might overwrite any alias coding you have done before, including gameplay codes which checks for alias, when you change the alias, donkey level 2 becomes donkey (3), and any existing codes that requires that exact alias may fail, or that you are erasing away helpful aliases like level 2</li>\n<li>Font color have no problems, just that some people can't see colors clearly enough</li>\n<li>This is probably my plan b, if nobody helps me to code, the thing is that objects on right hand side feels more intuitive while messages seems skippable unnecessaries according to my playstyle though</li>\n<li>This is possibly the most ideal solution, there are no flaws, but it probably requires advanced coding knowledge</li>\n</ol>\n\n",
      "PostDate": "2024-04-28T14:19:24.1870185Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3cc5fd86-1436-4f01-9d50-90f2ff2f4c44",
      "UserId": 643545,
      "Username": "Ip Man",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3ca198fe75de39041c2e4cd0a8852e3c?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "But, you can mark objects as scenery objects, and then they're not shown as links to click on in the quest engine...   So that already existing system could work with what you said about adding a print message mentioning them.  Then people would read them in the description, and if they choose to type \"look sceneryobject\" they would get whatever more detailed description you gave the object.  or the default \"it looks ordinary\" whatever that is in your game.    So every object where you choose \"scenery\" on the object's setup tab will not show up as a link, but is reachable and visible.  You'd just add it to your room description text.       \r\n\r\nHowever, I think it's also a fun idea to make a separate \"inventory\" window to display the scenery objects.  You could use the existing Second Inventory library by Pixie https://github.com/ThePix/quest/wiki/Library:-Second-inventory and then, rather than having just one room that you'd \"set\" as the inventory room, you would do something like make the game's \"before room enter\" script switch to whatever scenery room corresponds to the room your player is entering.  This then would mean you'd make 2 rooms for every room.  \"Library\" and \"Libraryscenery\" where those objects would end up in Inventory pane 2.\r\n\r\nIn one of my games, I have an Inv2 and Inv3 because one pane houses magic and the other houses verses.  So you can create as many extra panes as you need with Pixie's lib, just changing the names in a couple of places on the base code.\r\n\r\nHere's hoping this helps you narrow down from your options.   Also, If you're lucky, MrAngel will help you brainstorm.  He's a Quest Genius and almost always has the best solutions.",
      "EditableFormat": "markdown",
      "HTML": "<p>But, you can mark objects as scenery objects, and then they're not shown as links to click on in the quest engine...   So that already existing system could work with what you said about adding a print message mentioning them.  Then people would read them in the description, and if they choose to type \"look sceneryobject\" they would get whatever more detailed description you gave the object.  or the default \"it looks ordinary\" whatever that is in your game.    So every object where you choose \"scenery\" on the object's setup tab will not show up as a link, but is reachable and visible.  You'd just add it to your room description text.</p>\n<p>However, I think it's also a fun idea to make a separate \"inventory\" window to display the scenery objects.  You could use the existing Second Inventory library by Pixie https://github.com/ThePix/quest/wiki/Library:-Second-inventory and then, rather than having just one room that you'd \"set\" as the inventory room, you would do something like make the game's \"before room enter\" script switch to whatever scenery room corresponds to the room your player is entering.  This then would mean you'd make 2 rooms for every room.  \"Library\" and \"Libraryscenery\" where those objects would end up in Inventory pane 2.</p>\n<p>In one of my games, I have an Inv2 and Inv3 because one pane houses magic and the other houses verses.  So you can create as many extra panes as you need with Pixie's lib, just changing the names in a couple of places on the base code.</p>\n<p>Here's hoping this helps you narrow down from your options.   Also, If you're lucky, MrAngel will help you brainstorm.  He's a Quest Genius and almost always has the best solutions.</p>\n\n",
      "PostDate": "2024-04-28T18:01:51.0512585Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ada16fe9-7581-409f-93aa-91e1a2f36c39",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thanks for the help Ip Man\r\n\r\nI still like the idea of number of verbs besides alias, because if the code is doable, you only need one code for the whole game,\r\nalso that it might be able to automatically update objects that were previously uninteractable/0 verbs, but due to a game event, it is now interactable/3 verbs\r\nThe main worry still exist, that it might override any existing game coding that makes use of alias like \r\n1. donkey level 2, 70% hp \r\n(When overiden, it becomes donkey (3), the level 2 and 70% hp disappeared)\r\n2. if rng = 3, donkey.alias = \"donkey kong\"\r\n(When overiden, it becomes donkey (3), the kong disappeared)\r\n3. donkey.name = \"donkey\" but donkey.alias = \"\", game creator was lazy to write out donkey alias, because it is basically the same words as the donkey name, and it would take a lot of effort to write out same alias = name for all objects\r\n\r\n>But, you can mark objects as scenery objects, and then they're not shown as links to click on in the quest engine... So that already existing system could work with what you said about adding a print message mentioning them. Then people would read them in the description, and if they choose to type \"look sceneryobject\" they would get whatever more detailed description you gave the object. or the default \"it looks ordinary\" whatever that is in your game. So every object where you choose \"scenery\" on the object's setup tab will not show up as a link, but is reachable and visible. You'd just add it to your room description text.\r\n\r\nGenerally I am a lazy game creator and expect my players to be lazy as well, so nobody will click at look at verb or type in look at command parser for most of my mundane objects\r\nSo generally, I use a scenery generator, to randomize each room's outlook to make travelling more fun, while the players doesn't really have to interact it, but this would be an issue for players unfamiliar with my game, they will probably be clicking all of the room objects trying to find out which object is interactable\r\n\r\n>However, I think it's also a fun idea to make a separate \"inventory\" window to display the scenery objects. You could use the existing Second Inventory library by Pixie https://github.com/ThePix/quest/wiki/Library:-Second-inventory and then, rather than having just one room that you'd \"set\" as the inventory room, you would do something like make the game's \"before room enter\" script switch to whatever scenery room corresponds to the room your player is entering. This then would mean you'd make 2 rooms for every room. \"Library\" and \"Libraryscenery\" where those objects would end up in Inventory pane 2.\r\n\r\nAs usual, I had a hard time dealing with library\r\nAfter a long time, generally the fix was to create a room named \"spells_known\" (Yeah I might be english blind, have some problems with reading)\r\nThe second fix was to move objects out of the room \"spells_known\" rather than making them invisible, because hiding them does not do anything, they still appear\r\n\r\nSo rather than making 2 rooms for every room, which sounds like self abuse, I had something like this\r\nThis code is placed at when entering a new room\r\n```\r\nif (game.pov.parent = room) {\r\n  if (RandomChance(50)) {\r\n    MoveObject (kangaroo, spells_unknown)\r\n  }\r\n  else {\r\n    MoveObject (kangaroo, spells_known)\r\n  }\r\n}\r\nUpdateInv2\r\n```\r\nYeah, dun forget about UpdateInv2 at the end of code, I already know you will forget about it, daeun\r\nAnd before the code, you need to move all available scenery objects out of the room to hide them\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Thanks for the help Ip Man</p>\n<p>I still like the idea of number of verbs besides alias, because if the code is doable, you only need one code for the whole game,<br>\nalso that it might be able to automatically update objects that were previously uninteractable/0 verbs, but due to a game event, it is now interactable/3 verbs<br>\nThe main worry still exist, that it might override any existing game coding that makes use of alias like</p>\n<ol>\n<li>donkey level 2, 70% hp<br>\n(When overiden, it becomes donkey (3), the level 2 and 70% hp disappeared)</li>\n<li>if rng = 3, donkey.alias = \"donkey kong\"<br>\n(When overiden, it becomes donkey (3), the kong disappeared)</li>\n<li>donkey.name = \"donkey\" but donkey.alias = \"\", game creator was lazy to write out donkey alias, because it is basically the same words as the donkey name, and it would take a lot of effort to write out same alias = name for all objects</li>\n</ol>\n<blockquote>\n<p>But, you can mark objects as scenery objects, and then they're not shown as links to click on in the quest engine... So that already existing system could work with what you said about adding a print message mentioning them. Then people would read them in the description, and if they choose to type \"look sceneryobject\" they would get whatever more detailed description you gave the object. or the default \"it looks ordinary\" whatever that is in your game. So every object where you choose \"scenery\" on the object's setup tab will not show up as a link, but is reachable and visible. You'd just add it to your room description text.</p>\n</blockquote>\n<p>Generally I am a lazy game creator and expect my players to be lazy as well, so nobody will click at look at verb or type in look at command parser for most of my mundane objects<br>\nSo generally, I use a scenery generator, to randomize each room's outlook to make travelling more fun, while the players doesn't really have to interact it, but this would be an issue for players unfamiliar with my game, they will probably be clicking all of the room objects trying to find out which object is interactable</p>\n<blockquote>\n<p>However, I think it's also a fun idea to make a separate \"inventory\" window to display the scenery objects. You could use the existing Second Inventory library by Pixie https://github.com/ThePix/quest/wiki/Library:-Second-inventory and then, rather than having just one room that you'd \"set\" as the inventory room, you would do something like make the game's \"before room enter\" script switch to whatever scenery room corresponds to the room your player is entering. This then would mean you'd make 2 rooms for every room. \"Library\" and \"Libraryscenery\" where those objects would end up in Inventory pane 2.</p>\n</blockquote>\n<p>As usual, I had a hard time dealing with library<br>\nAfter a long time, generally the fix was to create a room named \"spells_known\" (Yeah I might be english blind, have some problems with reading)<br>\nThe second fix was to move objects out of the room \"spells_known\" rather than making them invisible, because hiding them does not do anything, they still appear</p>\n<p>So rather than making 2 rooms for every room, which sounds like self abuse, I had something like this<br>\nThis code is placed at when entering a new room</p>\n<pre><code>if (game.pov.parent = room) {\n  if (RandomChance(50)) {\n    MoveObject (kangaroo, spells_unknown)\n  }\n  else {\n    MoveObject (kangaroo, spells_known)\n  }\n}\nUpdateInv2\n</code></pre>\n<p>Yeah, dun forget about UpdateInv2 at the end of code, I already know you will forget about it, daeun<br>\nAnd before the code, you need to move all available scenery objects out of the room to hide them</p>\n\n",
      "PostDate": "2024-04-29T03:48:33.5412982Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "1d30fab3-1956-4c11-8dfc-3b5f6ad7569f",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Another walkaround solution is to create an object named scenery in the required rooms\r\nCopy and paste the following code on entering specific rooms\r\n\r\n<details>\r\n\r\n```\r\nscenery.alias = scenery.name+ \": \"\r\nif (RandomChance(100)) {\r\n  scenery.alias = scenery.alias+ \"floor\"\r\n}\r\nif (RandomChance(40)) {\r\n  scenery.alias = scenery.alias+ \",table\"\r\n}\r\nif (RandomChance(40)) {\r\n  scenery.alias = scenery.alias+ \",windows\"\r\n}\r\nif (RandomChance(40)) {\r\n  scenery.alias = scenery.alias+ \",coffee\"\r\n}\r\nif (RandomChance(40)) {\r\n  scenery.alias = scenery.alias+ \",madam\"\r\n}\r\nif (RandomChance(40)) {\r\n  scenery.alias = scenery.alias+ \",table\"\r\n}\r\n```\r\n</details>\r\n.\r\n\r\nAlthough I dun like this, it does have its positive qualities\r\n1. Easy to code and modify\r\n2. New players that dunno will still click on it, but they will at most be clicking only 1 scenery object per room, which is better than 5 scenery objects per room\r\n3. Does not conflict with existing game codes, as it is only attributed towards that 1 scenery object\r\n4. It uses up less slots on the right hand panel, unlike multiple objects which uses 1 horizontal slot for each object\r\n\r\nThe limitations\r\n1. Players still can't easily see the number of verbs before clicking on objects, as the code only modifies that 1 scenery object while leaving all of the other objects untouched and unupgraded\r\n\r\n_______________\r\n\r\nSo the code to access the number of verbs, whether a certain verb exists and changing of the verb can create a list of intermediate coding solutions like\r\n\r\nPseudo code\r\n1. Checking for all objects in the game, if number of verb = 0, it is a scenery object,\r\nthen if player is a balrog, he is allowed to destroy any of these objects, resulting in \"destroyed table\" from the original object \"table\".\r\n2. Automatically reduce the number of verbs to players, if player is an archer, \"melee fight\" and \"block\" verb are automatically removed\r\nIf player switch his bow to an elven longsword, add in the verbs \"melee fight\" and \"block\"\r\n3. So if a boss enemy appeared, disable all verbs and exits in the room, so the players will not leave the room, get health potions, switch weapons, get an npc ally and return back to fight the boss, so unrealistic, lol\r\n4. If a player is much lower level than the enemy like 20 or more levels, automatically disable the verb \"fight\"\r\n(I know that computer games have level 40 over the enemy's forehead, but this feels unrealistic for me, when you see a crocodile in real life, it is not going ot have a level 20 over its forehead to tell you that it is dangerous, lol)\r\n5. If a player becomes better at the game and unlock more milestones, automatically increase the number of risky verbs available like \"mount on the dragon enemy\", \"persuade the lich enemy that you are not their enemy\" and \"bargain for 50% for this shop item\"\r\n6. One code shortcut for inputting verbs into all npc and enemies objects, if npc level 1 , input \"basic shop\" verb, if npc level 2, input \"weaponry shop\" verb, if npc level 3, input \"spell and stat tome shop\" verb, if objects have hp, it becomes an enemy, and it gains \"fight\" verb for players to fight with\r\n7. If a player allies with any 1 of the four factions, he will be unable to do \"trading\" verb with enemy factions and will be instead be given \"fight\" verb to force them to battle\r\n8. Depending on a player's light source, the player will be able to see more and more verbs, on light source 1, player can see \"look at\" verb on catapult, on light source 2, player can see \"place rock\" verb on catapult, on light source 3, player can see \"kill assassin hiding behind\" verb on catapult\r\n\r\nIn short, this is just to convince you to help me write out the code to access the number of verbs, whether a certain verb already exists and changing of the verb",
      "EditableFormat": "markdown",
      "HTML": "<p>Another walkaround solution is to create an object named scenery in the required rooms<br>\nCopy and paste the following code on entering specific rooms</p>\n<details>\n<pre><code>scenery.alias = scenery.name+ \": \"\nif (RandomChance(100)) {\n  scenery.alias = scenery.alias+ \"floor\"\n}\nif (RandomChance(40)) {\n  scenery.alias = scenery.alias+ \",table\"\n}\nif (RandomChance(40)) {\n  scenery.alias = scenery.alias+ \",windows\"\n}\nif (RandomChance(40)) {\n  scenery.alias = scenery.alias+ \",coffee\"\n}\nif (RandomChance(40)) {\n  scenery.alias = scenery.alias+ \",madam\"\n}\nif (RandomChance(40)) {\n  scenery.alias = scenery.alias+ \",table\"\n}\n</code></pre>\n</details>\n.\n<p>Although I dun like this, it does have its positive qualities</p>\n<ol>\n<li>Easy to code and modify</li>\n<li>New players that dunno will still click on it, but they will at most be clicking only 1 scenery object per room, which is better than 5 scenery objects per room</li>\n<li>Does not conflict with existing game codes, as it is only attributed towards that 1 scenery object</li>\n<li>It uses up less slots on the right hand panel, unlike multiple objects which uses 1 horizontal slot for each object</li>\n</ol>\n<p>The limitations</p>\n<ol>\n<li>Players still can't easily see the number of verbs before clicking on objects, as the code only modifies that 1 scenery object while leaving all of the other objects untouched and unupgraded</li>\n</ol>\n<hr>\n<p>So the code to access the number of verbs, whether a certain verb exists and changing of the verb can create a list of intermediate coding solutions like</p>\n<p>Pseudo code</p>\n<ol>\n<li>Checking for all objects in the game, if number of verb = 0, it is a scenery object,<br>\nthen if player is a balrog, he is allowed to destroy any of these objects, resulting in \"destroyed table\" from the original object \"table\".</li>\n<li>Automatically reduce the number of verbs to players, if player is an archer, \"melee fight\" and \"block\" verb are automatically removed<br>\nIf player switch his bow to an elven longsword, add in the verbs \"melee fight\" and \"block\"</li>\n<li>So if a boss enemy appeared, disable all verbs and exits in the room, so the players will not leave the room, get health potions, switch weapons, get an npc ally and return back to fight the boss, so unrealistic, lol</li>\n<li>If a player is much lower level than the enemy like 20 or more levels, automatically disable the verb \"fight\"<br>\n(I know that computer games have level 40 over the enemy's forehead, but this feels unrealistic for me, when you see a crocodile in real life, it is not going ot have a level 20 over its forehead to tell you that it is dangerous, lol)</li>\n<li>If a player becomes better at the game and unlock more milestones, automatically increase the number of risky verbs available like \"mount on the dragon enemy\", \"persuade the lich enemy that you are not their enemy\" and \"bargain for 50% for this shop item\"</li>\n<li>One code shortcut for inputting verbs into all npc and enemies objects, if npc level 1 , input \"basic shop\" verb, if npc level 2, input \"weaponry shop\" verb, if npc level 3, input \"spell and stat tome shop\" verb, if objects have hp, it becomes an enemy, and it gains \"fight\" verb for players to fight with</li>\n<li>If a player allies with any 1 of the four factions, he will be unable to do \"trading\" verb with enemy factions and will be instead be given \"fight\" verb to force them to battle</li>\n<li>Depending on a player's light source, the player will be able to see more and more verbs, on light source 1, player can see \"look at\" verb on catapult, on light source 2, player can see \"place rock\" verb on catapult, on light source 3, player can see \"kill assassin hiding behind\" verb on catapult</li>\n</ol>\n<p>In short, this is just to convince you to help me write out the code to access the number of verbs, whether a certain verb already exists and changing of the verb</p>\n\n",
      "PostDate": "2024-04-29T04:37:11.1878931Z",
      "LastEditDate": "2024-04-29T08:58:54.0376665Z",
      "link": null
    },
    {
      "PostId": "feaa5795-d9ec-4123-b450-9868a039cfa6",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I had a small success\r\n\r\n>Verbs are just script attributes\r\n\r\nbased on https://docs.textadventures.co.uk/quest/using_verbs.html\r\n\r\n>object.displayverbs = ListCombine(object.displayverbs, Split(\"Attack\"))\r\n\r\nhttps://docs.textadventures.co.uk/quest/display_verbs.html\r\n\r\n______\r\n\r\nScript when entering a room:\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  if (HasAttribute(objectx, \"fight\")) {\r\n  }\r\n  else {\r\n    if (HasAttribute(objectx, \"hp stat\")) {\r\n      objectx.displayverbs = ListCombine(objectx.displayverbs, Split(\"fight\"))\r\n      objectx.fight => {\r\n        msg (\"You deal 1 damage to donkey<br/>Donkey retaliates with 2 damage\")\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n_______________\r\n\r\nI now have a moderate success\r\n\r\nScript when entering a room:\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  objectx.verbcountstat = 0\r\n  if (HasAttribute(objectx, \"fight\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"trade\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"ride\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  objectx.alias = objectx.name+\" (\"+ objectx.verbcountstat+\")\"\r\n}\r\n```\r\nThe issue with this, is that if I have too many verbs like 100 different verbs, I probably have to write a long code as well, so if someone can help directly source the verb names from the verb folder, that would be great, I am guess this have to do with for each loop and dictionary, which I am unfamiliar with\r\n\r\nAlso, as stated previously, this can conflict with internal game codes like\r\n\r\n<details>\r\n\r\n*Copied and pasted from previous statement*\r\n1. donkey level 2, 70% hp\r\n(When overiden, it becomes donkey (3), the level 2 and 70% hp disappeared)\r\n2. if rng = 3, donkey.alias = \"donkey kong\"\r\n(When overiden, it becomes donkey (3), the kong disappeared)\r\n3. donkey.name = \"donkey\" but donkey.alias = \"\", game creator was lazy to write out donkey alias, because it is basically the same words as the donkey name, and it would take a lot of effort to write out same alias = name for all objects\r\n</details>\r\n4. Also, that if you have multiple objects of the same name, the quest app will force you to use goblin, goblin2, goblin3, thus this code becomes ugly as it will show it as goblin3 (3) instead of the better one: goblin (3)\r\n\r\nIf you use objectx.alias = objectx.alias + verbcount = it will show it correctly as goblin (3),\r\nbut the next time you enter the room, it will become goblin (3) (3), and it will keep adding on and on, which is hard to interpret\r\n\r\n____________________________________________________\r\n\r\nI might have solved the problem the way I want it to be,\r\nrather than putting number of verbs to all objects like donkey (3),\r\nI will only put number of verbs to scenery objects, objects that do not have a single verb,\r\nand let the players automatically realise that the others are interactable,\r\n\r\nIn short it should be like this:\r\nFlower (0)\r\nDirt path (0)\r\nNPC Jerry (0)\r\nDog\r\nShovel\r\n\r\nThus, the player will eventually find out that (0) means it have no verbs, and that dog and shovel are interactable, because I do not change their aliases, their in game code stays untouched, so I guess, problem solved?",
      "EditableFormat": "markdown",
      "HTML": "<p>I had a small success</p>\n<blockquote>\n<p>Verbs are just script attributes</p>\n</blockquote>\n<p>based on https://docs.textadventures.co.uk/quest/using_verbs.html</p>\n<blockquote>\n<p>object.displayverbs = ListCombine(object.displayverbs, Split(\"Attack\"))</p>\n</blockquote>\n<p>https://docs.textadventures.co.uk/quest/display_verbs.html</p>\n<hr>\n<p>Script when entering a room:</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  if (HasAttribute(objectx, \"fight\")) {\n  }\n  else {\n    if (HasAttribute(objectx, \"hp stat\")) {\n      objectx.displayverbs = ListCombine(objectx.displayverbs, Split(\"fight\"))\n      objectx.fight =&gt; {\n        msg (\"You deal 1 damage to donkey&lt;br/&gt;Donkey retaliates with 2 damage\")\n      }\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>I now have a moderate success</p>\n<p>Script when entering a room:</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  objectx.verbcountstat = 0\n  if (HasAttribute(objectx, \"fight\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"trade\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"ride\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  objectx.alias = objectx.name+\" (\"+ objectx.verbcountstat+\")\"\n}\n</code></pre>\n<p>The issue with this, is that if I have too many verbs like 100 different verbs, I probably have to write a long code as well, so if someone can help directly source the verb names from the verb folder, that would be great, I am guess this have to do with for each loop and dictionary, which I am unfamiliar with</p>\n<p>Also, as stated previously, this can conflict with internal game codes like</p>\n<details>\n<p><em>Copied and pasted from previous statement</em></p>\n<ol>\n<li>donkey level 2, 70% hp<br>\n(When overiden, it becomes donkey (3), the level 2 and 70% hp disappeared)</li>\n<li>if rng = 3, donkey.alias = \"donkey kong\"<br>\n(When overiden, it becomes donkey (3), the kong disappeared)</li>\n<li>donkey.name = \"donkey\" but donkey.alias = \"\", game creator was lazy to write out donkey alias, because it is basically the same words as the donkey name, and it would take a lot of effort to write out same alias = name for all objects</li>\n</ol>\n</details>\n4. Also, that if you have multiple objects of the same name, the quest app will force you to use goblin, goblin2, goblin3, thus this code becomes ugly as it will show it as goblin3 (3) instead of the better one: goblin (3)\n<p>If you use objectx.alias = objectx.alias + verbcount = it will show it correctly as goblin (3),<br>\nbut the next time you enter the room, it will become goblin (3) (3), and it will keep adding on and on, which is hard to interpret</p>\n<hr>\n<p>I might have solved the problem the way I want it to be,<br>\nrather than putting number of verbs to all objects like donkey (3),<br>\nI will only put number of verbs to scenery objects, objects that do not have a single verb,<br>\nand let the players automatically realise that the others are interactable,</p>\n<p>In short it should be like this:<br>\nFlower (0)<br>\nDirt path (0)<br>\nNPC Jerry (0)<br>\nDog<br>\nShovel</p>\n<p>Thus, the player will eventually find out that (0) means it have no verbs, and that dog and shovel are interactable, because I do not change their aliases, their in game code stays untouched, so I guess, problem solved?</p>\n\n",
      "PostDate": "2024-04-29T10:10:31.7641084Z",
      "LastEditDate": "2024-04-29T14:04:03.2142794Z",
      "link": null
    },
    {
      "PostId": "50595d2e-9a41-4ad1-b33d-8746694606ee",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So the below code looks like it works, but it still conflicts with 2 issues\r\n1. Residential area1 (0), Residential area2 (0), Residential area3 (0), Residential area4 (0)\r\n(Because the game code takes objectx.name and that objects can't have two of the same names, automatically applying a number beside it, which makes it looks ugly.)\r\n2. It conflicts with scenery generator, I am not sure what is happening, but random stuffs are spawning instead\r\n\r\nScript when entering a new room\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  objectx.verbcountstat = 0\r\n  if (ListContains(objectx.displayverbs, \"Take\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"speak\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"look\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"buy\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (objectx.feature_usegive = true) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"catch\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"hunt\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (objectx.verbcountstat=0) {\r\n    objectx.alias = objectx.name+\" (\"+ objectx.verbcountstat+\")\"\r\n  }\r\n}\r\n```\r\n\r\nScenery generator that got conflicted\r\n```\r\nforeach (object, GetDirectChildren (game.pov.parent)) {\r\n  if (object.alias = \"red squirrel\") {\r\n    object.parent = null\r\n  }\r\n  if (object.alias = \"swaying grass\") {\r\n    object.parent = null\r\n  }\r\n  if (object.alias = \"girl in dress\") {\r\n    object.parent = null\r\n  }\r\n}\r\nMakeObjectVisible (picnic object)\r\nif (RandomChance(12)) {\r\n  picnic object.alias = \"red squirrel\"\r\n  CloneObjectAndMoveHere (picnic object)\r\n}\r\nif (RandomChance(12)) {\r\n  picnic object.alias = \"swaying grass\"\r\n  CloneObjectAndMoveHere (picnic object)\r\n}\r\nif (RandomChance(12)) {\r\n  picnic object.alias = \"girl in dress\"\r\n  CloneObjectAndMoveHere (picnic object)\r\n}\r\n```\r\nThe original code of the scenery generator is 50 times longer, so perhaps the longness is creating trouble\r\nIf you look at it, both scenery generator and numberofverbs generator generates when entering a room, \r\nwhile the long code is triggering, it accidentally conflicts with numberofverbs generator creating random stuffs\r\n\r\nBut I am still not sure what is the fix, how do I control a code to load before the other code?\r\nScenery generators loads when entering specific room\r\nNumberofverbs generator loads when entering all rooms\r\n\r\n____________________________\r\n\r\nDelaying the scenery generator for 2 seconds seems to give some insights on what is happening, \r\nbasically the second time the player enters the room, the numberofverbs generator changes the aliases of the scenery objects, therefore the scenery generator was not able to clear those objects\r\n\r\nSo how am I going to clear those objects with random names?\r\n\r\nI tried a lot of methods, and realized the issue is not about clearing random names, or rather to disable random names from appearing in the first place, which random names are being generated because clone generator makes use of object.names + \"\" and numberofverbs makes use of object.names + \"\", therefore they override each other\r\nSo despite all the attempts, there is only one true solution which is to directly write (0) on the clone generator for each objects, and have it not being targeted by numberofverbs generator\r\n\r\nSame goes for the Residential area1 (0), Residential area2 (0), Residential area3 (0), Residential area4 (0),\r\nwe need to give it a made up attribute like object.skipverbstat, and modify numberofverbs generator to skip any objects that have skipverbstat\r\n\r\nOverall, this seems like a lot of work compared to just manually add (0) to aliases to objects",
      "EditableFormat": "markdown",
      "HTML": "<p>So the below code looks like it works, but it still conflicts with 2 issues</p>\n<ol>\n<li>Residential area1 (0), Residential area2 (0), Residential area3 (0), Residential area4 (0)<br>\n(Because the game code takes objectx.name and that objects can't have two of the same names, automatically applying a number beside it, which makes it looks ugly.)</li>\n<li>It conflicts with scenery generator, I am not sure what is happening, but random stuffs are spawning instead</li>\n</ol>\n<p>Script when entering a new room</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  objectx.verbcountstat = 0\n  if (ListContains(objectx.displayverbs, \"Take\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"speak\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"look\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"buy\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (objectx.feature_usegive = true) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"catch\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"hunt\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (objectx.verbcountstat=0) {\n    objectx.alias = objectx.name+\" (\"+ objectx.verbcountstat+\")\"\n  }\n}\n</code></pre>\n<p>Scenery generator that got conflicted</p>\n<pre><code>foreach (object, GetDirectChildren (game.pov.parent)) {\n  if (object.alias = \"red squirrel\") {\n    object.parent = null\n  }\n  if (object.alias = \"swaying grass\") {\n    object.parent = null\n  }\n  if (object.alias = \"girl in dress\") {\n    object.parent = null\n  }\n}\nMakeObjectVisible (picnic object)\nif (RandomChance(12)) {\n  picnic object.alias = \"red squirrel\"\n  CloneObjectAndMoveHere (picnic object)\n}\nif (RandomChance(12)) {\n  picnic object.alias = \"swaying grass\"\n  CloneObjectAndMoveHere (picnic object)\n}\nif (RandomChance(12)) {\n  picnic object.alias = \"girl in dress\"\n  CloneObjectAndMoveHere (picnic object)\n}\n</code></pre>\n<p>The original code of the scenery generator is 50 times longer, so perhaps the longness is creating trouble<br>\nIf you look at it, both scenery generator and numberofverbs generator generates when entering a room,<br>\nwhile the long code is triggering, it accidentally conflicts with numberofverbs generator creating random stuffs</p>\n<p>But I am still not sure what is the fix, how do I control a code to load before the other code?<br>\nScenery generators loads when entering specific room<br>\nNumberofverbs generator loads when entering all rooms</p>\n<hr>\n<p>Delaying the scenery generator for 2 seconds seems to give some insights on what is happening,<br>\nbasically the second time the player enters the room, the numberofverbs generator changes the aliases of the scenery objects, therefore the scenery generator was not able to clear those objects</p>\n<p>So how am I going to clear those objects with random names?</p>\n<p>I tried a lot of methods, and realized the issue is not about clearing random names, or rather to disable random names from appearing in the first place, which random names are being generated because clone generator makes use of object.names + \"\" and numberofverbs makes use of object.names + \"\", therefore they override each other<br>\nSo despite all the attempts, there is only one true solution which is to directly write (0) on the clone generator for each objects, and have it not being targeted by numberofverbs generator</p>\n<p>Same goes for the Residential area1 (0), Residential area2 (0), Residential area3 (0), Residential area4 (0),<br>\nwe need to give it a made up attribute like object.skipverbstat, and modify numberofverbs generator to skip any objects that have skipverbstat</p>\n<p>Overall, this seems like a lot of work compared to just manually add (0) to aliases to objects</p>\n\n",
      "PostDate": "2024-04-29T15:18:05.7556989Z",
      "LastEditDate": "2024-04-29T20:24:25.8198243Z",
      "link": null
    },
    {
      "PostId": "43047ff7-ce96-414b-960e-b90544ad70bf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you just want to find out the number of verbs that can be used on an object, you can do that quite easily. You could do something like: \r\n```\r\nverbcount = 0\r\nforeach (verb, game.verbattributes) {\r\n  if (HasAttribute (object, verb)) {\r\n    verbcount = verbcount + 1\r\n  }\r\n}\r\n```\r\nHowever, this won't tell you if an object is really interactable or not, because it only checks verbs – it doesn't check for commands like \"take\" or \"look at\".\r\nYou could make those special cases – but then, would you want it to include objects that you can't take but the player might try to? There might be objects in a game that aren't supposed to be taken because that would be silly (maybe scenery objects like trees), but also objects that can't be taken because they're nailed down; where *trying* to take them gives the player information. So should \"Take\" be included in the number of verbs or not?\r\n\r\nOne way to do this would be modifying the built-in javascript function `updateObjectLinks`, which is responsible for building the pop-up menu of verbs for clickable object links. Then, the number would just show how many items will appear in that little menu, but I think that might be what you want. Then, if you don't want \"Take\" and \"Look at\" to be counted, you can just remove them from an object's displayverbs.\r\n\r\nThe function would look something like:\r\n<pre><code>function updateObjectLinks(data) {\r\n    $(\".elementmenu\").each(function (index, e) {\r\n        var $e = $(e);\r\n        <em style=\"color: green\">$e.children(\".verbcount\").remove();</em>\r\n        var verbs = data[$e.data(\"elementid\")];\r\n        if (verbs) {\r\n            $e.removeClass(\"disabled\");\r\n            $e.data(\"verbs\", verbs);\r\n            $e.attr(\"data-verbs\", verbs);\r\n            <em style=\"color: green\">$(\"&lt;small>\", {class: \"verbcount\"}).text(\" (\"+verbs.split(\"/\").length+\")\").appendTo($e);</em>\r\n        } else {\r\n            $e.addClass(\"disabled\");\r\n        }\r\n    });\r\n}</code></pre>\r\nOr, in a form you can just paste into Quest's UI Initialisation script:\r\n```\r\nJS.eval(\"updateObjectLinks=function(d){$('.elementmenu').each(function(e,a){var t=$(a);t.children('.verbcount').remove();a=d[t.data('elementid')];a?(t.removeClass('disabled'),t.data('verbs',a),t.attr('data-verbs',a),$('<small>',{class:'verbcount'}).text(' ('+a.split('/').length+')').appendTo(t)):t.addClass('disabled')})};\")\r\n```\r\n\r\nThat's off the top of my head, but it might do something like what you want.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you just want to find out the number of verbs that can be used on an object, you can do that quite easily. You could do something like:</p>\n<pre><code>verbcount = 0\nforeach (verb, game.verbattributes) {\n  if (HasAttribute (object, verb)) {\n    verbcount = verbcount + 1\n  }\n}\n</code></pre>\n<p>However, this won't tell you if an object is really interactable or not, because it only checks verbs – it doesn't check for commands like \"take\" or \"look at\".<br>\nYou could make those special cases – but then, would you want it to include objects that you can't take but the player might try to? There might be objects in a game that aren't supposed to be taken because that would be silly (maybe scenery objects like trees), but also objects that can't be taken because they're nailed down; where <em>trying</em> to take them gives the player information. So should \"Take\" be included in the number of verbs or not?</p>\n<p>One way to do this would be modifying the built-in javascript function <code>updateObjectLinks</code>, which is responsible for building the pop-up menu of verbs for clickable object links. Then, the number would just show how many items will appear in that little menu, but I think that might be what you want. Then, if you don't want \"Take\" and \"Look at\" to be counted, you can just remove them from an object's displayverbs.</p>\n<p>The function would look something like:</p>\n<pre><code>function updateObjectLinks(data) {\n    $(\".elementmenu\").each(function (index, e) {\n        var $e = $(e);\n        <em style=\"color: green\">$e.children(\".verbcount\").remove();</em>\n        var verbs = data[$e.data(\"elementid\")];\n        if (verbs) {\n            $e.removeClass(\"disabled\");\n            $e.data(\"verbs\", verbs);\n            $e.attr(\"data-verbs\", verbs);\n            <em style=\"color: green\">$(\"&lt;small&gt;\", {class: \"verbcount\"}).text(\" (\"+verbs.split(\"/\").length+\")\").appendTo($e);</em>\n        } else {\n            $e.addClass(\"disabled\");\n        }\n    });\n}</code></pre>\n<p>Or, in a form you can just paste into Quest's UI Initialisation script:</p>\n<pre><code>JS.eval(\"updateObjectLinks=function(d){$('.elementmenu').each(function(e,a){var t=$(a);t.children('.verbcount').remove();a=d[t.data('elementid')];a?(t.removeClass('disabled'),t.data('verbs',a),t.attr('data-verbs',a),$('&lt;small&gt;',{class:'verbcount'}).text(' ('+a.split('/').length+')').appendTo(t)):t.addClass('disabled')})};\")\n</code></pre>\n<p>That's off the top of my head, but it might do something like what you want.</p>\n\n",
      "PostDate": "2024-04-30T13:08:26.3548997Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e1daa7f0-de7b-4eda-aca6-f9fdfcd2f48c",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I combine your first code into a working minimalist code\r\n\r\nScript when entering a room\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  verbcount = 0\r\n  foreach (verb, game.verbattributes) {\r\n    if (HasAttribute (objectx, verb)) {\r\n      verbcount = verbcount + 1\r\n    }\r\n  }\r\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\r\n}\r\n```\r\n\r\nThe following code seems to work on my current game, but somehow it failed to combine with your code\r\n```\r\n  if (ListContains(objectx.displayverbs, \"Take\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"speak\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"look\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (HasAttribute(objectx, \"buy\")) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n  if (objectx.feature_usegive = true) {\r\n    objectx.verbcountstat = objectx.verbcountstat+1\r\n  }\r\n```\r\n\r\n>There might be objects in a game that aren't supposed to be taken because that would be silly (maybe scenery objects like trees), but also objects that can't be taken because they're nailed down; where trying to take them gives the player information. So should \"Take\" be included in the number of verbs or not?\r\n\r\nI guess you are talking about change of situation, from my perspective, I would like it to be like an example scenario 1. Scenery Tree (0) can't be interacted 2. Player gets an axe from another room, and return to this room 3. Scenery tree becomes (1), and it now have a \"chop tree\" verb 4. (I purposefully require player to move to another room as I know the verb only updates on enter room.)\r\n\r\nYour second code can't be used, it might be due to my coding inexperience\r\n1. I tried creating a custom function\r\n2. Copy and paste into main game's code view\r\n3. Copy over updateObjectLinks from internal function and edit it to your code\r\nAlso my updateObjectLinks looks really different from yours,\r\nconsidering if you are asking me to just add in green text from your code,\r\nbut I did tried copying everything over as well\r\n```\r\nif (game.enablehyperlinks) {\r\n  data = NewStringDictionary()\r\n  foreach (object, ScopeVisible()) {\r\n    dictionary add (data, object.name, Join(GetDisplayVerbs(object), \"/\"))\r\n  }\r\n  JS.updateObjectLinks (data)\r\n  exits = NewStringList()\r\n  foreach (exit, ScopeExits()) {\r\n    list add (exits, exit.name)\r\n  }\r\n  JS.updateExitLinks (exits)\r\n  commands = NewStringList()\r\n  foreach (cmd, ScopeCommands()) {\r\n    list add (commands, cmd.name)\r\n  }\r\n  JS.updateCommandLinks (commands)\r\n}\r\n```\r\n\r\nYour last code works brilliantly, but it is giving a message rather than changing the objects aliases, or perhaps that is the intention? Since this might probably stops it from interfering with any in game codes that makes use of aliases",
      "EditableFormat": "markdown",
      "HTML": "<p>I combine your first code into a working minimalist code</p>\n<p>Script when entering a room</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  verbcount = 0\n  foreach (verb, game.verbattributes) {\n    if (HasAttribute (objectx, verb)) {\n      verbcount = verbcount + 1\n    }\n  }\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\n}\n</code></pre>\n<p>The following code seems to work on my current game, but somehow it failed to combine with your code</p>\n<pre><code>  if (ListContains(objectx.displayverbs, \"Take\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"speak\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"look\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (HasAttribute(objectx, \"buy\")) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n  if (objectx.feature_usegive = true) {\n    objectx.verbcountstat = objectx.verbcountstat+1\n  }\n</code></pre>\n<blockquote>\n<p>There might be objects in a game that aren't supposed to be taken because that would be silly (maybe scenery objects like trees), but also objects that can't be taken because they're nailed down; where trying to take them gives the player information. So should \"Take\" be included in the number of verbs or not?</p>\n</blockquote>\n<p>I guess you are talking about change of situation, from my perspective, I would like it to be like an example scenario 1. Scenery Tree (0) can't be interacted 2. Player gets an axe from another room, and return to this room 3. Scenery tree becomes (1), and it now have a \"chop tree\" verb 4. (I purposefully require player to move to another room as I know the verb only updates on enter room.)</p>\n<p>Your second code can't be used, it might be due to my coding inexperience</p>\n<ol>\n<li>I tried creating a custom function</li>\n<li>Copy and paste into main game's code view</li>\n<li>Copy over updateObjectLinks from internal function and edit it to your code<br>\nAlso my updateObjectLinks looks really different from yours,<br>\nconsidering if you are asking me to just add in green text from your code,<br>\nbut I did tried copying everything over as well</li>\n</ol>\n<pre><code>if (game.enablehyperlinks) {\n  data = NewStringDictionary()\n  foreach (object, ScopeVisible()) {\n    dictionary add (data, object.name, Join(GetDisplayVerbs(object), \"/\"))\n  }\n  JS.updateObjectLinks (data)\n  exits = NewStringList()\n  foreach (exit, ScopeExits()) {\n    list add (exits, exit.name)\n  }\n  JS.updateExitLinks (exits)\n  commands = NewStringList()\n  foreach (cmd, ScopeCommands()) {\n    list add (commands, cmd.name)\n  }\n  JS.updateCommandLinks (commands)\n}\n</code></pre>\n<p>Your last code works brilliantly, but it is giving a message rather than changing the objects aliases, or perhaps that is the intention? Since this might probably stops it from interfering with any in game codes that makes use of aliases</p>\n\n",
      "PostDate": "2024-04-30T14:01:37.2589259Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a1813562-44cb-4e81-979f-ee9bef3e29f1",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "This is probably my final favourite code, although if new commands pops up, I might meet into potential problems again\r\n1. On first try, we can see only apple (1), despite the default look at and take, two verbs\r\n2. On removal of take verb, it is now apple (0)\r\n3. This means look at verb, requires stuffs to be written on before it becomes apple (2), which is why my current game work\r\n4. Clicking and unclicking use verb feature, increases and decreases, thus we now have apple (3)\r\nBut display verb of use is not shown on outside of inventory, use verb is only show in inventory, which may confuse player, but I am going to continue onwards\r\n5. Unfortunately buy verb gives 2 extra verbs, because it automatically adds in purchase verb as well which is not being displayed, this does looks confusing even to me\r\n6. Speak from convlib seems to add 2 new extra verbs as well, the other verb is talk which is not shown and confusing even to me\r\n\r\nThis just makes me wants to return to my alternative walkaround, which is to just add (0) to scenery objects,\r\nbut if anyone wants a code that can calculate the number of verbs, you might want this final code\r\n\r\n\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  verbcount = 0\r\n  foreach (verb, game.verbattributes) {\r\n    if (HasAttribute (objectx, verb)) {\r\n      verbcount = verbcount + 1\r\n    }\r\n  }\r\n  if (ListContains(objectx.displayverbs, \"Take\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (HasAttribute(objectx, \"speak\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (HasAttribute(objectx, \"look\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (HasAttribute(objectx, \"buy\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (objectx.feature_usegive = true) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\r\n}\r\n```\r\n\r\n_________________________________________________________\r\n\r\nFor mrangel's last code\r\nI get\r\n\r\nYou can see an apple (1), an apple1 (2), an apple2 (2), an apple3 (2), an apple4 (3) and apple5 (4).\r\n\r\nIt is almost accurate until the apple3, the code does not counts in the use verb",
      "EditableFormat": "markdown",
      "HTML": "<p>This is probably my final favourite code, although if new commands pops up, I might meet into potential problems again</p>\n<ol>\n<li>On first try, we can see only apple (1), despite the default look at and take, two verbs</li>\n<li>On removal of take verb, it is now apple (0)</li>\n<li>This means look at verb, requires stuffs to be written on before it becomes apple (2), which is why my current game work</li>\n<li>Clicking and unclicking use verb feature, increases and decreases, thus we now have apple (3)<br>\nBut display verb of use is not shown on outside of inventory, use verb is only show in inventory, which may confuse player, but I am going to continue onwards</li>\n<li>Unfortunately buy verb gives 2 extra verbs, because it automatically adds in purchase verb as well which is not being displayed, this does looks confusing even to me</li>\n<li>Speak from convlib seems to add 2 new extra verbs as well, the other verb is talk which is not shown and confusing even to me</li>\n</ol>\n<p>This just makes me wants to return to my alternative walkaround, which is to just add (0) to scenery objects,<br>\nbut if anyone wants a code that can calculate the number of verbs, you might want this final code</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  verbcount = 0\n  foreach (verb, game.verbattributes) {\n    if (HasAttribute (objectx, verb)) {\n      verbcount = verbcount + 1\n    }\n  }\n  if (ListContains(objectx.displayverbs, \"Take\")) {\n    verbcount = verbcount + 1\n  }\n  if (HasAttribute(objectx, \"speak\")) {\n    verbcount = verbcount + 1\n  }\n  if (HasAttribute(objectx, \"look\")) {\n    verbcount = verbcount + 1\n  }\n  if (HasAttribute(objectx, \"buy\")) {\n    verbcount = verbcount + 1\n  }\n  if (objectx.feature_usegive = true) {\n    verbcount = verbcount + 1\n  }\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\n}\n</code></pre>\n<hr>\n<p>For mrangel's last code<br>\nI get</p>\n<p>You can see an apple (1), an apple1 (2), an apple2 (2), an apple3 (2), an apple4 (3) and apple5 (4).</p>\n<p>It is almost accurate until the apple3, the code does not counts in the use verb</p>\n\n",
      "PostDate": "2024-04-30T14:39:35.8480411Z",
      "LastEditDate": "2024-04-30T14:46:08.6240131Z",
      "link": null
    },
    {
      "PostId": "d79f9358-09e6-4479-be01-aa8bcd322f1b",
      "UserId": 31991,
      "Username": "daeun",
      "AvatarUrl": "https://i.imgur.com/Xvt8zzBb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "After a good night's sleep, my brain seems to work better\r\nThis final code be better\r\n\r\n```\r\nforeach (objectx, ScopeVisible()) {\r\n  verbcount = 0\r\n  foreach (verb, game.verbattributes) {\r\n    if (HasAttribute (objectx, verb)) {\r\n      verbcount = verbcount + 1\r\n    }\r\n  }\r\n  if (ListContains(objectx.displayverbs, \"Take\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (HasAttribute(objectx, \"look\")) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  if (objectx.feature_usegive = true) {\r\n    verbcount = verbcount + 1\r\n  }\r\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\r\n}\r\n```\r\n\r\nI am going to guess mrangel's foreach verb game code loop already counts in Speak verb and Buy verb, even though it does not appears on the quest app's left hand side inside the Verbs folder\r\n\r\n\r\n_______________________________________\r\n\r\nBut of course, this game code is going to interfere with in game codes that makes use of objects.aliases, so apparently my refreshed mind have a new idea\r\nPseudocode\r\nMain code gives us alias1\r\nNumberofverbs generator gives us alias2\r\n\r\nWhen entering all rooms,\r\nall objects.alias = all objects.alias1 + all objects.alias2\r\n\r\nBut yeah, it is hard to redo my current game with 100+ rooms for now, so both of these codes will have to be delayed to the future, while currently I just use the scenery objects = (0) trick first\r\nBut if you run into any issue, maybe you can post it first and let the amazing mrangel take a look\r\n\r\n________________________________\r\n\r\nSmall demostration available at\r\nhttps://textadventures.co.uk/games/view/57zl3sqjdeoeuqwqok9r5q/test",
      "EditableFormat": "markdown",
      "HTML": "<p>After a good night's sleep, my brain seems to work better<br>\nThis final code be better</p>\n<pre><code>foreach (objectx, ScopeVisible()) {\n  verbcount = 0\n  foreach (verb, game.verbattributes) {\n    if (HasAttribute (objectx, verb)) {\n      verbcount = verbcount + 1\n    }\n  }\n  if (ListContains(objectx.displayverbs, \"Take\")) {\n    verbcount = verbcount + 1\n  }\n  if (HasAttribute(objectx, \"look\")) {\n    verbcount = verbcount + 1\n  }\n  if (objectx.feature_usegive = true) {\n    verbcount = verbcount + 1\n  }\n  objectx.alias = objectx.name+\" (\"+ verbcount+\")\"\n}\n</code></pre>\n<p>I am going to guess mrangel's foreach verb game code loop already counts in Speak verb and Buy verb, even though it does not appears on the quest app's left hand side inside the Verbs folder</p>\n<hr>\n<p>But of course, this game code is going to interfere with in game codes that makes use of objects.aliases, so apparently my refreshed mind have a new idea<br>\nPseudocode<br>\nMain code gives us alias1<br>\nNumberofverbs generator gives us alias2</p>\n<p>When entering all rooms,<br>\nall objects.alias = all objects.alias1 + all objects.alias2</p>\n<p>But yeah, it is hard to redo my current game with 100+ rooms for now, so both of these codes will have to be delayed to the future, while currently I just use the scenery objects = (0) trick first<br>\nBut if you run into any issue, maybe you can post it first and let the amazing mrangel take a look</p>\n<hr>\n<p>Small demostration available at<br>\nhttps://textadventures.co.uk/games/view/57zl3sqjdeoeuqwqok9r5q/test</p>\n\n",
      "PostDate": "2024-05-01T00:36:34.8579647Z",
      "LastEditDate": "2024-05-05T12:12:48.2436153Z",
      "link": null
    }
  ]
}
