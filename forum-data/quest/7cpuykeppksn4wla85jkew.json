{
  "Topic": {
    "TopicId": "7cpuykeppksn4wla85jkew",
    "ForumId": "10",
    "Title": "Parsing inline string attributes not working?",
    "LastUpdated": "2018-10-07T08:35:06.8346502Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "400b250e-15cc-4979-8afe-c8e74008b3a2",
      "UserId": 379732,
      "Username": "SmohnJith",
      "AvatarUrl": "https://secure.gravatar.com/avatar/acae4c279109b24545c5ccb21f32f68e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have a template of sorts for an NPC called \"Soldier\". I want to scatter a few around some rooms randomly, so I make copies of the Soldier object and place them as I want. Now, a soldier can be male or female (assigned when spawned), so when I write the dialogue, I want to be able to do something along the lines of...\r\n\r\n    \"(He / She) has nothing to say to you right now.\"\r\n\r\nSo, I write a print statement...\r\n\r\n    {this.article} has nothing to say to you right now.\r\n\r\nBut it doesn't work. {Soldier.article} works, but that grabs the generic article of the template \"it\", and not the article of the current soldier you are talking to who has had their gender set. Am I missing something really simple? Seems like there should be a way to do this without an inline if statement for _every_ article usage, or separate prints for each gender!",
      "EditableFormat": "markdown",
      "HTML": "<p>I have a template of sorts for an NPC called \"Soldier\". I want to scatter a few around some rooms randomly, so I make copies of the Soldier object and place them as I want. Now, a soldier can be male or female (assigned when spawned), so when I write the dialogue, I want to be able to do something along the lines of...</p>\n<pre><code>\"(He / She) has nothing to say to you right now.\"\n</code></pre>\n<p>So, I write a print statement...</p>\n<pre><code>{this.article} has nothing to say to you right now.\n</code></pre>\n<p>But it doesn't work. {Soldier.article} works, but that grabs the generic article of the template \"it\", and not the article of the current soldier you are talking to who has had their gender set. Am I missing something really simple? Seems like there should be a way to do this without an inline if statement for <em>every</em> article usage, or separate prints for each gender!</p>\n\n",
      "PostDate": "2018-10-07T08:35:06.8346502Z",
      "LastEditDate": "2018-10-07T08:37:01.4690218Z",
      "link": null
    },
    {
      "PostId": "99cf4038-1bb7-4390-8dae-8193f868bc7f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Are you sure you've set the article of the soldier correctly?\r\n\r\nIf you make the newly created soldiers inherit the types `male` or `female`, the article should be set automatically.\r\n\r\nIf you clone a \"prototype\" soldier or create a new object inheriting a soldier type, then you will have to manually set its `gender`, `article`, and `possessive` attributes. Changing gender does not automatically change the others.",
      "EditableFormat": "markdown",
      "HTML": "<p>Are you sure you've set the article of the soldier correctly?</p>\n<p>If you make the newly created soldiers inherit the types <code>male</code> or <code>female</code>, the article should be set automatically.</p>\n<p>If you clone a \"prototype\" soldier or create a new object inheriting a soldier type, then you will have to manually set its <code>gender</code>, <code>article</code>, and <code>possessive</code> attributes. Changing gender does not automatically change the others.</p>\n\n",
      "PostDate": "2018-10-07T15:11:54.137106Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0e1b26fd-0916-4fb7-834f-27ee9487082d",
      "UserId": 379732,
      "Username": "SmohnJith",
      "AvatarUrl": "https://secure.gravatar.com/avatar/acae4c279109b24545c5ccb21f32f68e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes, I'm changing the articles manually during spawn code. But I think you misunderstand my dilemma. for the sake of this example, pretend I spawned a copy of Soldier, and in the look at code of Soldier (and therefore my new copy), I put...\r\n\r\n    \"{this.article} has nothing to say to you right now.\"\r\n\r\nLiterally evaluates to...\r\n\r\n    {this.article} has nothing to say to you right now.\r\n\r\nThe desired output would be (ignore capitalization for sake of simplicity)...\r\n\r\n    he has nothing to say to you right now.\r\n\r\nNow, I can of course print an expression like...\r\n\r\n    this.article + \" has nothing to say to you right now.\"\r\n\r\n... and that works as desired, but I really don't want to write 5 paragraphs of text in this way when I could be using the article variable 20 or 30 times! So why does this not evaluate inline properly?",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes, I'm changing the articles manually during spawn code. But I think you misunderstand my dilemma. for the sake of this example, pretend I spawned a copy of Soldier, and in the look at code of Soldier (and therefore my new copy), I put...</p>\n<pre><code>\"{this.article} has nothing to say to you right now.\"\n</code></pre>\n<p>Literally evaluates to...</p>\n<pre><code>{this.article} has nothing to say to you right now.\n</code></pre>\n<p>The desired output would be (ignore capitalization for sake of simplicity)...</p>\n<pre><code>he has nothing to say to you right now.\n</code></pre>\n<p>Now, I can of course print an expression like...</p>\n<pre><code>this.article + \" has nothing to say to you right now.\"\n</code></pre>\n<p>... and that works as desired, but I really don't want to write 5 paragraphs of text in this way when I could be using the article variable 20 or 30 times! So why does this not evaluate inline properly?</p>\n\n",
      "PostDate": "2018-10-09T08:47:05.1212246Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "90e28889-690e-4b2e-a6c5-61d76c939afe",
      "UserId": 277074,
      "Username": "Dcoder",
      "AvatarUrl": "http://i.imgur.com/d9UrZ6lb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm guessing that should be:\r\n```\r\n\"{=this.article} has nothing to say to you right now.\"\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm guessing that should be:</p>\n<pre><code>\"{=this.article} has nothing to say to you right now.\"\n</code></pre>\n\n",
      "PostDate": "2018-10-09T08:59:37.4570361Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a5bc61c1-94c7-4afd-af08-26e72f77e745",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ugh ... I just wrote a response, but I wasn't paying attention and assumed it was in the object's \"look\" description.\r\n\r\nThe same issue seems to exist for all verbs: If the verb runs a script, it is invoked using `do()`, which creates the special variable `this`.\r\n\r\nIf the verb's response is a string, `this` is not created. You can only use expressions like `{this.someattribute}` in the text processor if you first set the attribute `game.text_processor_this` to be the object.\r\n\r\nHere's a few options to deal with the problem:\r\n\r\n**Option 1 - Replace `{this.` with an object name when making a clone**\r\nOne (rather ugly) solution would be to replace \"this\" with the actual name of the object. So after creating a new clone (assuming `obj` is a variable containing the new clone) you would do:\r\n```\r\nreplacetext = \"{\" + obj.name + \".\"\r\nforeach (attr, GetAttributeNames (obj, true)) {\r\n  if (TypeOf (obj, attr) = \"string\") {\r\n    value = GetAttribute (obj, attr)\r\n    value = Replace (value, \"{this.\", replacetext)\r\n    set (obj, attr, value)\r\n  }\r\n}\r\n```\r\n\r\nThis would change the clone's verb responses, for example replacing `\"{this.article}\"` with `\"{soldier26.article}\"`.\r\n\r\nThe problem with this method is that it will cause problems if you then try to make a clone from a clone (which is unlikely); and it could also be slow.\r\n\r\n**Option 2 - Make Quest set text_processor_this when running a verb**\r\nFix the default verb. This is only possible in the desktop version of Quest, not the web version.\r\nOpen the type `defaultverb` (which should be there, but may be hidden. I'm not sure how easy editing types is).\r\n\r\nThat type will have a script attribute which contains quite a bit of code. Look for the lines:\r\n```\r\n        case (\"string\") {\r\n          if (object2 = null) {\r\n            msg (GetString(object, this.property))\r\n          }\r\n```\r\nand change that to:\r\n```\r\n        case (\"string\") {\r\n          if (object2 = null) {\r\n            game.text_processor_this = object\r\n            msg (GetString(object, this.property))\r\n          }\r\n```\r\nThat will make the special variable `this` available in all verb responses.\r\n\r\nYou may also want to modify the lookat command, inserting the line `game.text_processor_this = object` before the line `msg (lookdesc)` so that you can use `this` in an object's \"look at\" response.\r\n\r\n**Option 3 - make your verb set text_processor_this itself**\r\n`this` is always defined in script attributes. So you could make the verb a script that looks like:\r\n```\r\ngame.text_processor_this = this\r\nmsg (\"{this.article} has nothing to say to you right now.\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Ugh ... I just wrote a response, but I wasn't paying attention and assumed it was in the object's \"look\" description.</p>\n<p>The same issue seems to exist for all verbs: If the verb runs a script, it is invoked using <code>do()</code>, which creates the special variable <code>this</code>.</p>\n<p>If the verb's response is a string, <code>this</code> is not created. You can only use expressions like <code>{this.someattribute}</code> in the text processor if you first set the attribute <code>game.text_processor_this</code> to be the object.</p>\n<p>Here's a few options to deal with the problem:</p>\n<p><strong>Option 1 - Replace <code>{this.</code> with an object name when making a clone</strong><br>\nOne (rather ugly) solution would be to replace \"this\" with the actual name of the object. So after creating a new clone (assuming <code>obj</code> is a variable containing the new clone) you would do:</p>\n<pre><code>replacetext = \"{\" + obj.name + \".\"\nforeach (attr, GetAttributeNames (obj, true)) {\n  if (TypeOf (obj, attr) = \"string\") {\n    value = GetAttribute (obj, attr)\n    value = Replace (value, \"{this.\", replacetext)\n    set (obj, attr, value)\n  }\n}\n</code></pre>\n<p>This would change the clone's verb responses, for example replacing <code>\"{this.article}\"</code> with <code>\"{soldier26.article}\"</code>.</p>\n<p>The problem with this method is that it will cause problems if you then try to make a clone from a clone (which is unlikely); and it could also be slow.</p>\n<p><strong>Option 2 - Make Quest set text_processor_this when running a verb</strong><br>\nFix the default verb. This is only possible in the desktop version of Quest, not the web version.<br>\nOpen the type <code>defaultverb</code> (which should be there, but may be hidden. I'm not sure how easy editing types is).</p>\n<p>That type will have a script attribute which contains quite a bit of code. Look for the lines:</p>\n<pre><code>        case (\"string\") {\n          if (object2 = null) {\n            msg (GetString(object, this.property))\n          }\n</code></pre>\n<p>and change that to:</p>\n<pre><code>        case (\"string\") {\n          if (object2 = null) {\n            game.text_processor_this = object\n            msg (GetString(object, this.property))\n          }\n</code></pre>\n<p>That will make the special variable <code>this</code> available in all verb responses.</p>\n<p>You may also want to modify the lookat command, inserting the line <code>game.text_processor_this = object</code> before the line <code>msg (lookdesc)</code> so that you can use <code>this</code> in an object's \"look at\" response.</p>\n<p><strong>Option 3 - make your verb set text_processor_this itself</strong><br>\n<code>this</code> is always defined in script attributes. So you could make the verb a script that looks like:</p>\n<pre><code>game.text_processor_this = this\nmsg (\"{this.article} has nothing to say to you right now.\")\n</code></pre>\n\n",
      "PostDate": "2018-10-09T12:33:38.3835323Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8f0cd3d7-d304-47e3-98a2-e3fb1ca562bf",
      "UserId": 379732,
      "Username": "SmohnJith",
      "AvatarUrl": "https://secure.gravatar.com/avatar/acae4c279109b24545c5ccb21f32f68e?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For the sake of ease, I decided to use a function to evaluate character's attitude towards you and pick appropriate responses. Sticking \"game.text_processor_this = currentCharacter\", currentCharacter being the person you are talking to supplied as a function argument, just before the response code seems to be working like a charm. Thanks for helping me clear this up. Quite an unusual corner case to run into.",
      "EditableFormat": "markdown",
      "HTML": "<p>For the sake of ease, I decided to use a function to evaluate character's attitude towards you and pick appropriate responses. Sticking \"game.text_processor_this = currentCharacter\", currentCharacter being the person you are talking to supplied as a function argument, just before the response code seems to be working like a charm. Thanks for helping me clear this up. Quite an unusual corner case to run into.</p>\n\n",
      "PostDate": "2018-10-09T20:18:24.0065144Z",
      "LastEditDate": "2018-10-09T20:18:57.754786Z",
      "link": null
    },
    {
      "PostId": "a0fac0c3-0fce-411d-ab56-0d4469212bc6",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It's something that comes up a lot; because variables are only available in the function or script they're declared in, not any other functions it calls, and that includes built in functions like the text processor.\r\n\r\nIf you want to make other variables available to the text processor, you can make `game.text_processor_variables` a dictionary. If you're using the text processor to display more complex text, this can save you a lot of time.",
      "EditableFormat": "markdown",
      "HTML": "<p>It's something that comes up a lot; because variables are only available in the function or script they're declared in, not any other functions it calls, and that includes built in functions like the text processor.</p>\n<p>If you want to make other variables available to the text processor, you can make <code>game.text_processor_variables</code> a dictionary. If you're using the text processor to display more complex text, this can save you a lot of time.</p>\n\n",
      "PostDate": "2018-10-09T20:48:50.4605874Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
