{
  "Topic": {
    "TopicId": "wtlgo6zkaeqhdxrugsai3w",
    "ForumId": "10",
    "Title": "Random objects/encounters in different areas of the game ",
    "LastUpdated": "2018-04-22T14:45:59.2824237Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "7f2effa6-0258-4880-9e8a-8fd65927800d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "this involves using the 'list/dictionary' Attribute (+ GetRandomInt/GetRandomDouble/RandomChance/DiceRoll for the randomness), if you need help with using lists/dictionaries, let me know.\r\n\r\n-------------\r\n\r\nthe 'GetRandomInt' and 'RandomChance' work especially well together too:\r\n\r\nfor example (an item) drop system:\r\n\r\nthe 'GetRandomInt' selects the (type of) item\r\n\r\nand the 'RandomChance' determines whether that selected item, is actually dropped (successful) or not (failed)\r\n\r\n```\r\ncreate (\"example_object\")\r\n\r\ncreate (\"sword\")\r\ncreate (\"candy\")\r\ncreate (\"axe\")\r\ncreate (\"chocolate\")\r\n\r\nexample_object.example_objectlist_attribute = NewObjectList ()\r\nlist add (example_object.example_objectlist_attribute, sword)\r\nlist add (example_object.example_objectlist_attribute, candy)\r\nlist add (example_object.example_objectlist_attribute, axe)\r\nlist add (example_object.example_objectlist_attribute, chocolate)\r\n\r\nlist_count_integer_variable = ListCount (example_object.example_objectlist_attribute)\r\n\r\nlast_index_number_integer_variable = list_count_integer_variable - 1\r\n\r\nviable_randomly_selected_index_number_integer_variable = GetRandomInt (0, last_index_number_integer_variable)\r\n\r\nviable_randomly_selected_list_item_object_variable = ObjectListItem (example_object.example_objectlist_attribute, viable_randomly_selected_index_number_integer_variable)\r\n\r\n// you can use 'if' too, instead of the 'switch' below, as 'if' and 'switch' are functionally the same, though the syntax for them is a bit different, of course\r\n\r\n// though, if you got a lot of items in your list, then it'd be better to use a Script Dictionary, or to have each item Object have the 'drop' script on it, and call/do/use that 'drop' script, but this is a bit more advanced design... so not showing it here... showing the 'switch' instead as seen below\r\n\r\nswitch (viable_randomly_selected_list_item_object_variable) {\r\n  case (sword) {\r\n    if (RandomChance (10)) {\r\n      CloneObjectAndMove (sword, player)\r\n    }\r\n  }\r\n  case (candy) {\r\n    if (RandomChance (90)) { // 90% (a high) chance of dropping (getting) it // common item drop\r\n      CloneObjectAndMove (candy, player)\r\n    }\r\n  }\r\n  case (axe) {\r\n    if (RandomChance (10)) { // 10% (a low) chance of dropping (getting) it // rare item drop\r\n      CloneObjectAndMove (axe, player)\r\n    }\r\n  }\r\n  case (chocolate) {\r\n    if (RandomChance (50)) { // 50% (1/2) chance of dropping (getting) it // a 1/2 (which is still quite good odds, lol) item drop\r\n      CloneObjectAndMove (chocolate, player)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---------------\r\n\r\nas for controlled randomness (lol), as far as I know, the only way to enforce a probability is to directly control it:\r\n\r\nfor example, if you want a '1/6' odd/chance/probability, then you got to literally have it happen on the 6th time, which means a 'counter' to track it:\r\n\r\n```\r\ncreate (\"example_object\")\r\n\r\nexample_object.counter_integer_attribute = 0\r\n\r\nexample_object.flag_boolean_attribute = false\r\n\r\n// ---------\r\n\r\n// if the 'example_object.counter_integer_attribute = 0' causes the 'changed' script to fire, then you need this code:\r\n\r\nexample_object.changedcounter_integer_attribute => {\r\n  if (example_object.counter_integer_attribute = 6) {\r\n    example_object.flag_boolean_attribute = true // this is needed to happen before this 'changed' script fires again by the 'example_object.counter_integer_attribute = 0' line below, lol\r\n    msg (\"BLAH ACTION/EVENT\") // and this too, as well, lol\r\n    example_object.counter_integer_attribute = 0\r\n  } else if (example_object.flag_boolean_attribute) {\r\n    example_object.flag_boolean_attribute = false\r\n  } else {\r\n    example_object.counter_integer_attribute = example_object.counter_integer_attribute + 1\r\n  }\r\n}\r\n\r\n// otherwise / if-not, you can just use this code:\r\n\r\nexample_object.changedcounter_integer_attribute => {\r\n  if (example_object.counter_integer_attribute = 6) {\r\n    example_object.counter_integer_attribute = 0\r\n    msg (\"BLAH ACTION/EVENT\")\r\n  } else {\r\n    example_object.counter_integer_attribute = example_object.counter_integer_attribute + 1\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>this involves using the 'list/dictionary' Attribute (+ GetRandomInt/GetRandomDouble/RandomChance/DiceRoll for the randomness), if you need help with using lists/dictionaries, let me know.</p>\n<hr>\n<p>the 'GetRandomInt' and 'RandomChance' work especially well together too:</p>\n<p>for example (an item) drop system:</p>\n<p>the 'GetRandomInt' selects the (type of) item</p>\n<p>and the 'RandomChance' determines whether that selected item, is actually dropped (successful) or not (failed)</p>\n<pre><code>create (\"example_object\")\n\ncreate (\"sword\")\ncreate (\"candy\")\ncreate (\"axe\")\ncreate (\"chocolate\")\n\nexample_object.example_objectlist_attribute = NewObjectList ()\nlist add (example_object.example_objectlist_attribute, sword)\nlist add (example_object.example_objectlist_attribute, candy)\nlist add (example_object.example_objectlist_attribute, axe)\nlist add (example_object.example_objectlist_attribute, chocolate)\n\nlist_count_integer_variable = ListCount (example_object.example_objectlist_attribute)\n\nlast_index_number_integer_variable = list_count_integer_variable - 1\n\nviable_randomly_selected_index_number_integer_variable = GetRandomInt (0, last_index_number_integer_variable)\n\nviable_randomly_selected_list_item_object_variable = ObjectListItem (example_object.example_objectlist_attribute, viable_randomly_selected_index_number_integer_variable)\n\n// you can use 'if' too, instead of the 'switch' below, as 'if' and 'switch' are functionally the same, though the syntax for them is a bit different, of course\n\n// though, if you got a lot of items in your list, then it'd be better to use a Script Dictionary, or to have each item Object have the 'drop' script on it, and call/do/use that 'drop' script, but this is a bit more advanced design... so not showing it here... showing the 'switch' instead as seen below\n\nswitch (viable_randomly_selected_list_item_object_variable) {\n  case (sword) {\n    if (RandomChance (10)) {\n      CloneObjectAndMove (sword, player)\n    }\n  }\n  case (candy) {\n    if (RandomChance (90)) { // 90% (a high) chance of dropping (getting) it // common item drop\n      CloneObjectAndMove (candy, player)\n    }\n  }\n  case (axe) {\n    if (RandomChance (10)) { // 10% (a low) chance of dropping (getting) it // rare item drop\n      CloneObjectAndMove (axe, player)\n    }\n  }\n  case (chocolate) {\n    if (RandomChance (50)) { // 50% (1/2) chance of dropping (getting) it // a 1/2 (which is still quite good odds, lol) item drop\n      CloneObjectAndMove (chocolate, player)\n    }\n  }\n}\n</code></pre>\n<hr>\n<p>as for controlled randomness (lol), as far as I know, the only way to enforce a probability is to directly control it:</p>\n<p>for example, if you want a '1/6' odd/chance/probability, then you got to literally have it happen on the 6th time, which means a 'counter' to track it:</p>\n<pre><code>create (\"example_object\")\n\nexample_object.counter_integer_attribute = 0\n\nexample_object.flag_boolean_attribute = false\n\n// ---------\n\n// if the 'example_object.counter_integer_attribute = 0' causes the 'changed' script to fire, then you need this code:\n\nexample_object.changedcounter_integer_attribute =&gt; {\n  if (example_object.counter_integer_attribute = 6) {\n    example_object.flag_boolean_attribute = true // this is needed to happen before this 'changed' script fires again by the 'example_object.counter_integer_attribute = 0' line below, lol\n    msg (\"BLAH ACTION/EVENT\") // and this too, as well, lol\n    example_object.counter_integer_attribute = 0\n  } else if (example_object.flag_boolean_attribute) {\n    example_object.flag_boolean_attribute = false\n  } else {\n    example_object.counter_integer_attribute = example_object.counter_integer_attribute + 1\n  }\n}\n\n// otherwise / if-not, you can just use this code:\n\nexample_object.changedcounter_integer_attribute =&gt; {\n  if (example_object.counter_integer_attribute = 6) {\n    example_object.counter_integer_attribute = 0\n    msg (\"BLAH ACTION/EVENT\")\n  } else {\n    example_object.counter_integer_attribute = example_object.counter_integer_attribute + 1\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-04-22T16:23:21.9970155Z",
      "LastEditDate": "2018-04-22T17:10:56.4988463Z",
      "link": null
    },
    {
      "PostId": "9a41e07e-a00b-4a4d-95bf-dea651ba1c93",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "if you want all items to be tried (if the first item fails, try for the next item, and so forth)... the best design (if you got a lot of items) would be recursion usage (see diablo 2's recursion, item drop / treasure class, system)",
      "EditableFormat": "markdown",
      "HTML": "<p>if you want all items to be tried (if the first item fails, try for the next item, and so forth)... the best design (if you got a lot of items) would be recursion usage (see diablo 2's recursion, item drop / treasure class, system)</p>\n\n",
      "PostDate": "2018-04-22T17:13:23.9578437Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "376f9033-73cc-4db6-a6c1-b466e81c4eb9",
      "UserId": 260569,
      "Username": "DarkLizerd",
      "AvatarUrl": "https://i.imgur.com/vjdH3t6b.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "HK: \"as for controlled randomness (lol), as far as I know, the only way to enforce a probability is to directly control it:\r\nfor example, if you want a '1/6' odd/chance/probability, then you got to literally have it happen on the 6th time, which means a 'counter' to track it:\"\r\n\r\nNope... just go with a GetRandomInt (0, 6) to make it random...\r\nFor you randomness...\r\nDo you want a selected random items in the room? Or scattered throughout your maze of rooms?\r\nFor the first:\r\nYou could add a bit of code in the \"on first enter\":\r\nRoom_01\r\n// no creature\r\n// no items\r\n\r\nRoom_02\r\nSwitch(GetRandomInt (0, 6))\r\nCase 1,2,3: no creature\r\ncase 4: Bat\r\ncase 5: lost explorer\r\ncase 6: Giant spider\r\nswitch (0,3)\r\ncase 1: Bag of coins\r\ncase 2: rusty sword\r\ncase 3: Heal potion\r\n\r\nRoom_03\r\nanything else\r\n...\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>HK: \"as for controlled randomness (lol), as far as I know, the only way to enforce a probability is to directly control it:<br>\nfor example, if you want a '1/6' odd/chance/probability, then you got to literally have it happen on the 6th time, which means a 'counter' to track it:\"</p>\n<p>Nope... just go with a GetRandomInt (0, 6) to make it random...<br>\nFor you randomness...<br>\nDo you want a selected random items in the room? Or scattered throughout your maze of rooms?<br>\nFor the first:<br>\nYou could add a bit of code in the \"on first enter\":<br>\nRoom_01<br>\n// no creature<br>\n// no items</p>\n<p>Room_02<br>\nSwitch(GetRandomInt (0, 6))<br>\nCase 1,2,3: no creature<br>\ncase 4: Bat<br>\ncase 5: lost explorer<br>\ncase 6: Giant spider<br>\nswitch (0,3)<br>\ncase 1: Bag of coins<br>\ncase 2: rusty sword<br>\ncase 3: Heal potion</p>\n<p>Room_03<br>\nanything else<br>\n...</p>\n\n",
      "PostDate": "2018-04-22T17:35:56.7850097Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "b7532030-536b-4b24-81ba-7eb7e9c3fd98",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'd previously considered making a collection of containers for the various events/encounters. This system would allow moving monsters or items to the player's location, or running a script.\r\n\r\nThese are basically unreachable rooms, each representing a random encounter. Any objects inside the 'encounter' are moved to the player's location when it is triggered. It also can have attributes `encounter_script` (a script that is run when the encounter triggers), `encounter_probability` (an int; higher numbers are more likely), `encounter_enabled` (boolean), `encounter_repeats` (boolean), `encounter_locations` (objectlist of rooms where where the encounter can happen), and `encounter_test` (script that can modify the values above, in case it's more likely in some places than others for example).\r\n\r\nA script something like:\r\n```\r\npossible_encounters = NewObjectList()\r\ntotal_probability = 0\r\nforeach (enc, GetDirectChildren(ENCOUNTERS)) {\r\n  if (HasScript(enc, \"encounter_test\")) {\r\n    do (enc, \"encounter_test\")\r\n  }\r\n  if (GetBoolean(enc, \"encounter_enabled\")) {\r\n    found_room = true\r\n    if (HasAtribute (enc, \"encounter_locations\")) {\r\n      found_room = false\r\n      foreach (room, enc.encounter_locations) {\r\n        if (Contains (room, game.pov)) {\r\n          found_room = true\r\n        }\r\n      }\r\n    }\r\n    if (found_room) {\r\n      if (not HasInt (enc, \"encounter_probability\")) {\r\n        enc.encounter_probability = 10\r\n      }\r\n      list add (possible_encounters, enc)\r\n      total_probability = total_probability + enc.encounter_probability\r\n    }\r\n  }\r\n}\r\nif (total_probability < 100) {\r\n  total_probability = 100\r\n}\r\nchosen = GetRandomInt (1, total_probability)\r\nwhile (ListCount(possible_encounters) > 0) {\r\n  encounter = ListItem (possible_encounters, 0)\r\n  list remove (possible_encounters, encounter)\r\n  chosen = chosen - encounter.encounter_probability\r\n  if (chosen < 0) {\r\n    possible_encounters = NewObjectList()\r\n    encounter_children = NewObjectList()\r\n    foreach (o, GetDirectChildren (encounter)) {\r\n      if (GetBoolean (encounter, \"encounter_repeats\")) {\r\n        list add (encounter_children, CloneObjectAndMove (o, game.pov.parent))\r\n      }\r\n      else {\r\n        list add (encounter_children, o)\r\n        o.parent = game.pov.parent\r\n      }\r\n    }\r\n    if (HasScript (encounter, \"encounter_script\")) {\r\n      // the \"room\" and \"children\" variables give the encounter script an easy way to find the\r\n      //   room it's happening in, and the objects moved/cloned there (for example monsters)\r\n      params = NewDictionary()\r\n      dictionary add (params, \"room\", game.pov.parent)\r\n      dictionary add (params, \"children\", encounter_children)\r\n      do (encounter, \"encounter_script\", params)\r\n    }\r\n    if (not GetBoolean (encounter, \"encounter_repeats\")) {\r\n      RemoveObject (encounter)\r\n    }\r\n  }\r\n}\r\n```\r\nYou could run that from the enterroom script, or when visiting a new room for the first time, or something like that. Depending if you want random encounters to only occur in new rooms.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'd previously considered making a collection of containers for the various events/encounters. This system would allow moving monsters or items to the player's location, or running a script.</p>\n<p>These are basically unreachable rooms, each representing a random encounter. Any objects inside the 'encounter' are moved to the player's location when it is triggered. It also can have attributes <code>encounter_script</code> (a script that is run when the encounter triggers), <code>encounter_probability</code> (an int; higher numbers are more likely), <code>encounter_enabled</code> (boolean), <code>encounter_repeats</code> (boolean), <code>encounter_locations</code> (objectlist of rooms where where the encounter can happen), and <code>encounter_test</code> (script that can modify the values above, in case it's more likely in some places than others for example).</p>\n<p>A script something like:</p>\n<pre><code>possible_encounters = NewObjectList()\ntotal_probability = 0\nforeach (enc, GetDirectChildren(ENCOUNTERS)) {\n  if (HasScript(enc, \"encounter_test\")) {\n    do (enc, \"encounter_test\")\n  }\n  if (GetBoolean(enc, \"encounter_enabled\")) {\n    found_room = true\n    if (HasAtribute (enc, \"encounter_locations\")) {\n      found_room = false\n      foreach (room, enc.encounter_locations) {\n        if (Contains (room, game.pov)) {\n          found_room = true\n        }\n      }\n    }\n    if (found_room) {\n      if (not HasInt (enc, \"encounter_probability\")) {\n        enc.encounter_probability = 10\n      }\n      list add (possible_encounters, enc)\n      total_probability = total_probability + enc.encounter_probability\n    }\n  }\n}\nif (total_probability &lt; 100) {\n  total_probability = 100\n}\nchosen = GetRandomInt (1, total_probability)\nwhile (ListCount(possible_encounters) &gt; 0) {\n  encounter = ListItem (possible_encounters, 0)\n  list remove (possible_encounters, encounter)\n  chosen = chosen - encounter.encounter_probability\n  if (chosen &lt; 0) {\n    possible_encounters = NewObjectList()\n    encounter_children = NewObjectList()\n    foreach (o, GetDirectChildren (encounter)) {\n      if (GetBoolean (encounter, \"encounter_repeats\")) {\n        list add (encounter_children, CloneObjectAndMove (o, game.pov.parent))\n      }\n      else {\n        list add (encounter_children, o)\n        o.parent = game.pov.parent\n      }\n    }\n    if (HasScript (encounter, \"encounter_script\")) {\n      // the \"room\" and \"children\" variables give the encounter script an easy way to find the\n      //   room it's happening in, and the objects moved/cloned there (for example monsters)\n      params = NewDictionary()\n      dictionary add (params, \"room\", game.pov.parent)\n      dictionary add (params, \"children\", encounter_children)\n      do (encounter, \"encounter_script\", params)\n    }\n    if (not GetBoolean (encounter, \"encounter_repeats\")) {\n      RemoveObject (encounter)\n    }\n  }\n}\n</code></pre>\n<p>You could run that from the enterroom script, or when visiting a new room for the first time, or something like that. Depending if you want random encounters to only occur in new rooms.</p>\n\n",
      "PostDate": "2018-04-22T21:03:09.350618Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
