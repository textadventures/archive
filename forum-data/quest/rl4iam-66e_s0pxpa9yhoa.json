{
  "Topic": {
    "TopicId": "rl4iam-66e_s0pxpa9yhoa",
    "ForumId": "10",
    "Title": "Adding an article to string?",
    "LastUpdated": "2024-01-13T05:21:04.8461735Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "5ca4a2a3-c9f3-40b4-94d0-03ba0def8f0c",
      "UserId": 343762,
      "Username": "Heroman3003",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b11688a9dd1218fe54be555c3bcae8d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Is there some way to add an automatically chosen a/an article to a string, rather than an object? Specifically, a string attribute of an object. I dug through forum and documentation, but every instance of articles refers to pronoun instead, and prefixes, which is what articles seem to be called, are exclusive to objects.",
      "EditableFormat": "markdown",
      "HTML": "<p>Is there some way to add an automatically chosen a/an article to a string, rather than an object? Specifically, a string attribute of an object. I dug through forum and documentation, but every instance of articles refers to pronoun instead, and prefixes, which is what articles seem to be called, are exclusive to objects.</p>\n\n",
      "PostDate": "2024-01-13T05:21:04.8461735Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "734cc871-c042-458b-b596-e2f34ca41139",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Off the top of my head, you could make a function like this:\r\n\r\n```\r\n<function name=\"PrefixForString\" parameters=\"word,prepend\" type=\"string\">\r\n  output = \"\"\r\n  if (IsDefined(\"prepend\")) {\r\n    if (prepend) {\r\n      if (IsRegexMatch(\"^\\\\s\", word)) {\r\n        output = word\r\n      }\r\n      else {\r\n        output = \" \" + word\r\n      }\r\n    }\r\n  }\r\n  if (IsRegexMatch (\"^\\\\W*[aeiou]\", word)) {\r\n    return (\"an\" + output)\r\n  }\r\n  else {\r\n    return (\"a\" + output)\r\n  }\r\n</function>\r\n```\r\n\r\nThen you could do stuff like:\r\n* `PrefixForString (\"banana\")` - returns `a`\r\n* `PrefixForString (\"overcoat\")` - returns `an`\r\n* `PrefixForString (\"tortoise\", true)` - returns `a tortoise`\r\n* `PrefixForString (\"aubergine\", true)` - returns `an aubergine`\r\n\r\n(I wasn't sure if you would want the function to return just the prefix, or the prefix and the word; so I tried to make it do either)",
      "EditableFormat": "markdown",
      "HTML": "<p>Off the top of my head, you could make a function like this:</p>\n<pre><code>&lt;function name=\"PrefixForString\" parameters=\"word,prepend\" type=\"string\"&gt;\n  output = \"\"\n  if (IsDefined(\"prepend\")) {\n    if (prepend) {\n      if (IsRegexMatch(\"^\\\\s\", word)) {\n        output = word\n      }\n      else {\n        output = \" \" + word\n      }\n    }\n  }\n  if (IsRegexMatch (\"^\\\\W*[aeiou]\", word)) {\n    return (\"an\" + output)\n  }\n  else {\n    return (\"a\" + output)\n  }\n&lt;/function&gt;\n</code></pre>\n<p>Then you could do stuff like:</p>\n<ul>\n<li><code>PrefixForString (\"banana\")</code> - returns <code>a</code></li>\n<li><code>PrefixForString (\"overcoat\")</code> - returns <code>an</code></li>\n<li><code>PrefixForString (\"tortoise\", true)</code> - returns <code>a tortoise</code></li>\n<li><code>PrefixForString (\"aubergine\", true)</code> - returns <code>an aubergine</code></li>\n</ul>\n<p>(I wasn't sure if you would want the function to return just the prefix, or the prefix and the word; so I tried to make it do either)</p>\n\n",
      "PostDate": "2024-01-13T10:14:07.7305554Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "810c4851-38c8-4685-a332-856296cde3ff",
      "UserId": 343762,
      "Username": "Heroman3003",
      "AvatarUrl": "https://secure.gravatar.com/avatar/3b11688a9dd1218fe54be555c3bcae8d?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you, much appreciated! I am very much not good with regex, so that helps a bunch.",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you, much appreciated! I am very much not good with regex, so that helps a bunch.</p>\n\n",
      "PostDate": "2024-01-14T00:30:56.1923428Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "482bee8b-7869-4dda-9806-6af52c4413c0",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I used a regex rather than just checking the first character (like the English `GetDefaultPrefix` function does), because it's possible for an object name to start with an apostrophe or hyphen. Rare in English, but it happens, and I prefer my code to Just Work in as many situations as possible without the user needing to think about it. So I used the regex `\\\\W*` to make it ignore non-letter characters at the beginning.\r\n\r\nBut now I realised there's another rare case that I should deal with.\r\n```\r\n<function name=\"PrefixForString\" parameters=\"word,prepend\" type=\"string\">\r\n  output = \"\"\r\n  if (IsDefined(\"prepend\")) {\r\n    if (prepend) {\r\n      if (IsRegexMatch(\"^\\\\s\", word)) {\r\n        output = word\r\n      }\r\n      else {\r\n        output = \" \" + word\r\n      }\r\n    }\r\n  }\r\n  if (IsRegexMatch (\"^[^a-zA-Z]\\\\d\", word)) {\r\n    parts = Populate (\"^\\\\D*(?<number>\\\\d{1,3})(,?\\\\d{3})*(?![,\\\\s]*\\\\d)\", word)\r\n    number = StringDictionaryItem (parts, \"number\")\r\n    if (number = \"1\") {\r\n      word = \"first\"\r\n    }\r\n    else {\r\n      word = ToWords (ToInt (number))\r\n    }\r\n  }\r\n  if (IsRegexMatch (\"^\\\\W*[aeiou]\", word)) {\r\n    return (\"an\" + output)\r\n  }\r\n  else {\r\n    return (\"a\" + output)\r\n  }\r\n</function>\r\n```\r\n\r\nThat's a lot of work… and probably redundant for most people. But it should mean that the function will behave when you want to talk about `a 1-cent coin`, `a 3rd place medal`, `an 8 dollar bill`, or similar things.\r\n\r\n(If the string contains a digit before the first letter, it uses a more complex regex to pull out the number and convert it to words before working out whether the string starts with a vowel. It makes a special case for \"1\", because it's one of very few English words that takes \"a\" while starting with a vowel. The function will still say \"an one inch banana\" if the number is written as words; which seems wrong but it would be a lot harder to find and account for all the exceptions. At least it gets it right with digits)\r\n\r\nNote that this will only work if you have the game's language set to English, because the function `ToWords` is included in `English.aslx`. But I don't think anyone would be using this in a non-English game anyway. I also made the regex discard groups of 3 digits from the end of the number, because ToWords only works for numbers less than 2000. So a 64000-dollar question would pass \"64\" to `ToWords`, and get \"sixty-four\" back. Which is good enough in this case because it has the right first letter.",
      "EditableFormat": "markdown",
      "HTML": "<p>I used a regex rather than just checking the first character (like the English <code>GetDefaultPrefix</code> function does), because it's possible for an object name to start with an apostrophe or hyphen. Rare in English, but it happens, and I prefer my code to Just Work in as many situations as possible without the user needing to think about it. So I used the regex <code>\\\\W*</code> to make it ignore non-letter characters at the beginning.</p>\n<p>But now I realised there's another rare case that I should deal with.</p>\n<pre><code>&lt;function name=\"PrefixForString\" parameters=\"word,prepend\" type=\"string\"&gt;\n  output = \"\"\n  if (IsDefined(\"prepend\")) {\n    if (prepend) {\n      if (IsRegexMatch(\"^\\\\s\", word)) {\n        output = word\n      }\n      else {\n        output = \" \" + word\n      }\n    }\n  }\n  if (IsRegexMatch (\"^[^a-zA-Z]\\\\d\", word)) {\n    parts = Populate (\"^\\\\D*(?&lt;number&gt;\\\\d{1,3})(,?\\\\d{3})*(?![,\\\\s]*\\\\d)\", word)\n    number = StringDictionaryItem (parts, \"number\")\n    if (number = \"1\") {\n      word = \"first\"\n    }\n    else {\n      word = ToWords (ToInt (number))\n    }\n  }\n  if (IsRegexMatch (\"^\\\\W*[aeiou]\", word)) {\n    return (\"an\" + output)\n  }\n  else {\n    return (\"a\" + output)\n  }\n&lt;/function&gt;\n</code></pre>\n<p>That's a lot of work… and probably redundant for most people. But it should mean that the function will behave when you want to talk about <code>a 1-cent coin</code>, <code>a 3rd place medal</code>, <code>an 8 dollar bill</code>, or similar things.</p>\n<p>(If the string contains a digit before the first letter, it uses a more complex regex to pull out the number and convert it to words before working out whether the string starts with a vowel. It makes a special case for \"1\", because it's one of very few English words that takes \"a\" while starting with a vowel. The function will still say \"an one inch banana\" if the number is written as words; which seems wrong but it would be a lot harder to find and account for all the exceptions. At least it gets it right with digits)</p>\n<p>Note that this will only work if you have the game's language set to English, because the function <code>ToWords</code> is included in <code>English.aslx</code>. But I don't think anyone would be using this in a non-English game anyway. I also made the regex discard groups of 3 digits from the end of the number, because ToWords only works for numbers less than 2000. So a 64000-dollar question would pass \"64\" to <code>ToWords</code>, and get \"sixty-four\" back. Which is good enough in this case because it has the right first letter.</p>\n\n",
      "PostDate": "2024-01-14T11:43:22.6514676Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
