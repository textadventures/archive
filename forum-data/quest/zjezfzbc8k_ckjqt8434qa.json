{
  "Topic": {
    "TopicId": "zjezfzbc8k_ckjqt8434qa",
    "ForumId": "10",
    "Title": "A different way to do menus",
    "LastUpdated": "2018-10-08T09:18:21.349181Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "b879ac14-3249-4cb8-a78e-7c8bb8b8112b",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Just something I've been thinking about. A couple of functions:\r\n```\r\n<function name=\"ScriptDictMenu\" parameters=\"title, options, allowCancel\">\r\n  optionslist = NewStringList()\r\n  foreach (opt, options) {\r\n    list add (optionslist, opt)\r\n  }\r\n  game.menudictcallbacks = options\r\n  ShowMenu (title, optionslist, allowCancel) {\r\n    dict = game.menudictcallbacks\r\n    if (not DictionaryContains (dict, result)) {\r\n      error (\"Unexpected menu callback: \\\"\"+result+\"\\\".\")\r\n    }\r\n    callback = DictionaryItem (dict, result)\r\n    if (TypeOf (callback) = \"string\") callback = eval (callback)\r\n    if (TypeOf (callback) = \"script\") invoke (callback)\r\n    if (not HasScript (game, \"menucallback\")) {\r\n      game.menudictcallbacks = null\r\n    }\r\n  }\r\n</function>\r\n\r\n<function name=\"RedoMenu\" parameters=\"title, options, allowCancel\">\r\n  dict = game.menudictcallbacks\r\n  switch (TypeOf (options)) {\r\n    case (\"scriptdictionary\", \"dictionary\", \"stringdictionary\") {\r\n      foreach (key, options) {\r\n        if (DictionaryContains (dict, key)) dictionary remove (dict, key)\r\n        value = DictionaryItem(options, key)\r\n        dictionary add (dict, key, value)\r\n      }\r\n    }\r\n    case (\"stringlist\", \"list\") {\r\n      filtered = NewDictionary()\r\n      foreach (key, options) {\r\n        if (not DictionaryContains (filtered, key)) dictionary add (filtered, key, DictionaryItem (dict, key))\r\n      }\r\n      dict = filtered\r\n    }\r\n  }\r\n  ScriptDictMenu (title, dict, allowCancel)\r\n  game.menudictcallbacks = dict\r\n</function>\r\n```\r\n\r\nWith this, instead of the usual pattern of having a `switch` statement inside the menu, you pass the menu a scriptdictionary - the keys are the text the player sees on the menu, and the script that matches their choice is run.\r\n(Note - it doesn't have to be a scriptdictionary. If you want, you can make it a stringdictionary whose keys will be evaluated. So your options list could be: `QuickParams (\"red\", \"SetPlayerHairColor(\\\"red\\\")\", \"green\", \"SetPlayerHairColor(\\\"green\\\")\", \"none\", \"player.makebald_scriptattribute\")`)\r\n\r\n`RedoMenu` can be called from within the menu callback to run the menu again. Its `options` parameter can either be a scriptdictionary (which is added to the existing options, so it's easy to modify a menu on the fly), or a stringlist, which is taken as a list of options to display (with those options keeping the same scripts they did last time; so you can display a subset of the options without having to create a new dictionary). If `options` is null, it will just use the same options as last time.",
      "EditableFormat": "markdown",
      "HTML": "<p>Just something I've been thinking about. A couple of functions:</p>\n<pre><code>&lt;function name=\"ScriptDictMenu\" parameters=\"title, options, allowCancel\"&gt;\n  optionslist = NewStringList()\n  foreach (opt, options) {\n    list add (optionslist, opt)\n  }\n  game.menudictcallbacks = options\n  ShowMenu (title, optionslist, allowCancel) {\n    dict = game.menudictcallbacks\n    if (not DictionaryContains (dict, result)) {\n      error (\"Unexpected menu callback: \\\"\"+result+\"\\\".\")\n    }\n    callback = DictionaryItem (dict, result)\n    if (TypeOf (callback) = \"string\") callback = eval (callback)\n    if (TypeOf (callback) = \"script\") invoke (callback)\n    if (not HasScript (game, \"menucallback\")) {\n      game.menudictcallbacks = null\n    }\n  }\n&lt;/function&gt;\n\n&lt;function name=\"RedoMenu\" parameters=\"title, options, allowCancel\"&gt;\n  dict = game.menudictcallbacks\n  switch (TypeOf (options)) {\n    case (\"scriptdictionary\", \"dictionary\", \"stringdictionary\") {\n      foreach (key, options) {\n        if (DictionaryContains (dict, key)) dictionary remove (dict, key)\n        value = DictionaryItem(options, key)\n        dictionary add (dict, key, value)\n      }\n    }\n    case (\"stringlist\", \"list\") {\n      filtered = NewDictionary()\n      foreach (key, options) {\n        if (not DictionaryContains (filtered, key)) dictionary add (filtered, key, DictionaryItem (dict, key))\n      }\n      dict = filtered\n    }\n  }\n  ScriptDictMenu (title, dict, allowCancel)\n  game.menudictcallbacks = dict\n&lt;/function&gt;\n</code></pre>\n<p>With this, instead of the usual pattern of having a <code>switch</code> statement inside the menu, you pass the menu a scriptdictionary - the keys are the text the player sees on the menu, and the script that matches their choice is run.<br>\n(Note - it doesn't have to be a scriptdictionary. If you want, you can make it a stringdictionary whose keys will be evaluated. So your options list could be: <code>QuickParams (\"red\", \"SetPlayerHairColor(\\\"red\\\")\", \"green\", \"SetPlayerHairColor(\\\"green\\\")\", \"none\", \"player.makebald_scriptattribute\")</code>)</p>\n<p><code>RedoMenu</code> can be called from within the menu callback to run the menu again. Its <code>options</code> parameter can either be a scriptdictionary (which is added to the existing options, so it's easy to modify a menu on the fly), or a stringlist, which is taken as a list of options to display (with those options keeping the same scripts they did last time; so you can display a subset of the options without having to create a new dictionary). If <code>options</code> is null, it will just use the same options as last time.</p>\n\n",
      "PostDate": "2018-10-08T09:18:21.349181Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d9c6afb-3789-41d7-8b70-a17817d378c6",
      "UserId": 378821,
      "Username": "Svarii",
      "AvatarUrl": "https://i.imgur.com/cJ10zyPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I don't need this yet.  But it looks like something I will need later.\r\nThanks for sharing.\r\nI'm sure this will come in handy in the future.",
      "EditableFormat": "markdown",
      "HTML": "<p>I don't need this yet.  But it looks like something I will need later.<br>\nThanks for sharing.<br>\nI'm sure this will come in handy in the future.</p>\n\n",
      "PostDate": "2018-10-08T17:46:15.3165485Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7e115357-e7e3-4865-811e-badc60a52c8d",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "thank you mrangel!\r\n\r\nI've been working on figuring out  a menu system, so this is of great help for me to study and learn more, as I've been struggling with crafting a good menu system, so this code design is again of great help for me to learn more about coding design and the logic involved",
      "EditableFormat": "markdown",
      "HTML": "<p>thank you mrangel!</p>\n<p>I've been working on figuring out  a menu system, so this is of great help for me to study and learn more, as I've been struggling with crafting a good menu system, so this code design is again of great help for me to learn more about coding design and the logic involved</p>\n\n",
      "PostDate": "2018-10-08T21:50:28.6351492Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8e1b58de-5b90-4af6-a078-6d44dae97e3e",
      "UserId": 267336,
      "Username": "jmnevil54",
      "AvatarUrl": "https://secure.gravatar.com/avatar/5d73d7ec1dbe20a5cb46f02a6d53f187?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried it. I'm not sure how this works.",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried it. I'm not sure how this works.</p>\n\n",
      "PostDate": "2018-10-09T02:03:35.4461696Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
