{
  "Topic": {
    "TopicId": "om-1tmx2c0gssr-8fxh6sw",
    "ForumId": "10",
    "Title": "Control computer",
    "LastUpdated": "2018-10-04T05:27:20.7678783Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "0f049115-92b3-4a69-9049-e7bb5ccb4249",
      "UserId": 378821,
      "Username": "Svarii",
      "AvatarUrl": "https://i.imgur.com/cJ10zyPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(Desktop Version)\r\nI have a room with some stasis pods in it.\r\nI just added an object called computer.\r\nEnabled the feature use/give on the object 'computer'\r\nOn the object 'computer' under the use/give tab i checked the box 'display menu of objects this can be used on'\r\nUnder \"Use this on (other object)\" i changed action to handle object individually and added what i wanted in there.  \r\n\r\nEverything's working great except for one small detail.\r\n\r\nMy character is wearing an object i created (jumpsuit).\r\n\r\nWhen i type use computer.  The first object on the list is the jumpsuit i'm wearing.  Then after that is all of the stasis pods.\r\n\r\nHow do I get the clothes off the auto generated menu?  How is this menu generated?  I was actually surprised it listed all the stasis pod in room without telling it to do so somehow.\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>(Desktop Version)<br>\nI have a room with some stasis pods in it.<br>\nI just added an object called computer.<br>\nEnabled the feature use/give on the object 'computer'<br>\nOn the object 'computer' under the use/give tab i checked the box 'display menu of objects this can be used on'<br>\nUnder \"Use this on (other object)\" i changed action to handle object individually and added what i wanted in there.</p>\n<p>Everything's working great except for one small detail.</p>\n<p>My character is wearing an object i created (jumpsuit).</p>\n<p>When i type use computer.  The first object on the list is the jumpsuit i'm wearing.  Then after that is all of the stasis pods.</p>\n<p>How do I get the clothes off the auto generated menu?  How is this menu generated?  I was actually surprised it listed all the stasis pod in room without telling it to do so somehow.</p>\n\n",
      "PostDate": "2018-10-04T05:27:20.7678783Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "34fb378e-c181-4c7e-8bb6-7933555e2aae",
      "UserId": 378821,
      "Username": "Svarii",
      "AvatarUrl": "https://i.imgur.com/cJ10zyPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I was looking through the code and found:\r\nselfuseon type=\"scriptdictionary\"\r\n\r\nI image this is where the menu is coming from?\r\n\r\nHow do I mod this to not include my clothes or any other object in the room other than the pods?\r\n\r\nI want it to only list the 6 stasis pods in the room.",
      "EditableFormat": "markdown",
      "HTML": "<p>I was looking through the code and found:<br>\nselfuseon type=\"scriptdictionary\"</p>\n<p>I image this is where the menu is coming from?</p>\n<p>How do I mod this to not include my clothes or any other object in the room other than the pods?</p>\n<p>I want it to only list the 6 stasis pods in the room.</p>\n\n",
      "PostDate": "2018-10-04T07:08:14.2763023Z",
      "LastEditDate": "2018-10-04T07:09:12.5441533Z",
      "link": null
    },
    {
      "PostId": "e8d429b1-a216-44f6-b42d-91b64b1831f8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You need to [override](http://docs.textadventures.co.uk/quest/overriding.html) the `CreateUseMenuList` function. This will be sent the object being used (the computer) and needs to return an object list with each pod. I would suggest the code checks if the object is the computer first. If it is, return the list of pods. If not, do the default code.\r\n\r\n```\r\nobjectlist = NewObjectList()\r\nif (object = computer) {\r\n  list add (objectlist, pod1)\r\n  list add (objectlist, pod1)\r\n  return (objectlist)\r\n}\r\nobjectlist = ScopeReachableInventory()\r\nobjectlist = ListCombine (objectlist, ScopeReachableNotHeld())\r\nexcludelist = NewObjectList()\r\nlist add (excludelist, game.pov)\r\nlist add (excludelist, object)\r\ncandidates = NewObjectList()\r\ncandidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\r\nreturn (candidates)",
      "EditableFormat": "markdown",
      "HTML": "<p>You need to <a href=\"http://docs.textadventures.co.uk/quest/overriding.html\">override</a> the <code>CreateUseMenuList</code> function. This will be sent the object being used (the computer) and needs to return an object list with each pod. I would suggest the code checks if the object is the computer first. If it is, return the list of pods. If not, do the default code.</p>\n<pre><code>objectlist = NewObjectList()\nif (object = computer) {\n  list add (objectlist, pod1)\n  list add (objectlist, pod1)\n  return (objectlist)\n}\nobjectlist = ScopeReachableInventory()\nobjectlist = ListCombine (objectlist, ScopeReachableNotHeld())\nexcludelist = NewObjectList()\nlist add (excludelist, game.pov)\nlist add (excludelist, object)\ncandidates = NewObjectList()\ncandidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)\nreturn (candidates)\n</code></pre>\n\n",
      "PostDate": "2018-10-04T08:13:37.4895975Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4bcc182c-2df9-447c-9fb9-578f8e317759",
      "UserId": 378821,
      "Username": "Svarii",
      "AvatarUrl": "https://i.imgur.com/cJ10zyPb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It works!!\r\n\r\n\\o/\r\n\r\nYou're the best.  :]  Thank you",
      "EditableFormat": "markdown",
      "HTML": "<p>It works!!</p>\n<p>\\o/</p>\n<p>You're the best.  :]  Thank you</p>\n\n",
      "PostDate": "2018-10-04T08:51:28.3971113Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "294643e9-7fef-480e-9e3c-7be6d0ef223e",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It does, however, seem a little awkward having a special case for that one room.\r\n\r\nI'm wondering if it might not be advantageous for the default \"use\" command to include this type of functionality. Perhaps calling `GetScope()` to get the list of valid objects? (which would work better if the `changecommandscope` script on object1 was run when determining the scope for object2)\r\n\r\nThis is why I thought the relation between GetScope and GetScoping is backwards; but at the time I couldn't think of an example. I think it should be possible for an object to have an attribute which overrides the command's scope for \"use X on Y\" or \"give X to Y\" commands. Maybe `scopefor_use` or something?\r\n\r\nI'm kind of rambling here. But I think I can see some benefit in something like this:\r\n\r\n```\r\n  <function name=\"GetScope\" parameters=\"variable, value, objtype\" type=\"objectlist\"><![CDATA[\r\n    items = NewObjectList()\r\n// changes start here\r\n    scopestrings = NewStringList()\r\n    if (HasAttribute (game.pov, \"currentcommandresolvedelements\")) {\r\n      foreach (key, game.pov.currentcommandresolvedelements) {\r\n        value = DictionaryItem (game.pov.currentcommandresolvedelements, key)\r\n        if (TypeOf (value) = \"object\") {\r\n          if (HasString (value, \"scopefor_\"+game.pov.currentcommandpattern.name)) {\r\n            list add (scopestrings, GetString (value, \"scopefor_\"+game.pov.currentcommandpattern.name))\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (HasString(game.pov.currentcommandpattern, \"scope\")) {\r\n      list add (scopestrings, game.pov.currentcommandpattern.scope)\r\n    }\r\n    if (ListCount(scopestrings) > 0) {\r\n      scoping = GetScoping(Join (scopestrings, \"|\"), variable)\r\n// changes end here\r\n      foreach (partscope, Split(scoping, \";\")) {\r\n        switch (partscope) {\r\n```\r\n\r\nThis would mean that if you type \"use spanner on br\", and the spanner has an attribute \"scopefor_use\" with the value \"inventory\", the disambiguation menu would only consider objects in the inventory starting with \"br\".\r\n\r\nNot sure how easy it would be to have `CreateUseMenuList()` just call `GetScope()` so that this menu works the same way. Would the `game.pov.currentcommand*` variables still be in scope?",
      "EditableFormat": "markdown",
      "HTML": "<p>It does, however, seem a little awkward having a special case for that one room.</p>\n<p>I'm wondering if it might not be advantageous for the default \"use\" command to include this type of functionality. Perhaps calling <code>GetScope()</code> to get the list of valid objects? (which would work better if the <code>changecommandscope</code> script on object1 was run when determining the scope for object2)</p>\n<p>This is why I thought the relation between GetScope and GetScoping is backwards; but at the time I couldn't think of an example. I think it should be possible for an object to have an attribute which overrides the command's scope for \"use X on Y\" or \"give X to Y\" commands. Maybe <code>scopefor_use</code> or something?</p>\n<p>I'm kind of rambling here. But I think I can see some benefit in something like this:</p>\n<pre><code>  &lt;function name=\"GetScope\" parameters=\"variable, value, objtype\" type=\"objectlist\"&gt;&lt;![CDATA[\n    items = NewObjectList()\n// changes start here\n    scopestrings = NewStringList()\n    if (HasAttribute (game.pov, \"currentcommandresolvedelements\")) {\n      foreach (key, game.pov.currentcommandresolvedelements) {\n        value = DictionaryItem (game.pov.currentcommandresolvedelements, key)\n        if (TypeOf (value) = \"object\") {\n          if (HasString (value, \"scopefor_\"+game.pov.currentcommandpattern.name)) {\n            list add (scopestrings, GetString (value, \"scopefor_\"+game.pov.currentcommandpattern.name))\n          }\n        }\n      }\n    }\n    if (HasString(game.pov.currentcommandpattern, \"scope\")) {\n      list add (scopestrings, game.pov.currentcommandpattern.scope)\n    }\n    if (ListCount(scopestrings) &gt; 0) {\n      scoping = GetScoping(Join (scopestrings, \"|\"), variable)\n// changes end here\n      foreach (partscope, Split(scoping, \";\")) {\n        switch (partscope) {\n</code></pre>\n<p>This would mean that if you type \"use spanner on br\", and the spanner has an attribute \"scopefor_use\" with the value \"inventory\", the disambiguation menu would only consider objects in the inventory starting with \"br\".</p>\n<p>Not sure how easy it would be to have <code>CreateUseMenuList()</code> just call <code>GetScope()</code> so that this menu works the same way. Would the <code>game.pov.currentcommand*</code> variables still be in scope?</p>\n\n",
      "PostDate": "2018-10-06T11:42:55.4007683Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e8c8dfc0-c909-4e6c-9889-9c6cd838b3b8",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Would it not be easier for `CreateUseMenuList` to check if the object has a `scopeforuse` script, and if it does, use that to get an object list, other do the default?\r\n\r\nSame for `CreateGiveMenuList`.",
      "EditableFormat": "markdown",
      "HTML": "<p>Would it not be easier for <code>CreateUseMenuList</code> to check if the object has a <code>scopeforuse</code> script, and if it does, use that to get an object list, other do the default?</p>\n<p>Same for <code>CreateGiveMenuList</code>.</p>\n\n",
      "PostDate": "2018-10-10T09:11:41.0292847Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f9ed332-f865-41e0-a2e9-421662c68281",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want `scopeforuse` to be a script, yes. I was thinking that for most users (and most use cases), a string formatted like the command's `scope` string would be more intuitive. But as it's currently set up, GetScope takes `game.pov.currentcommandpattern.scope` directly, meaning that you can't run it on a string from somewhere else.",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want <code>scopeforuse</code> to be a script, yes. I was thinking that for most users (and most use cases), a string formatted like the command's <code>scope</code> string would be more intuitive. But as it's currently set up, GetScope takes <code>game.pov.currentcommandpattern.scope</code> directly, meaning that you can't run it on a string from somewhere else.</p>\n\n",
      "PostDate": "2018-10-10T09:28:59.6245371Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
