{
  "Topic": {
    "TopicId": "trletgfuzu2uho13yfa_ug",
    "ForumId": "10",
    "Title": "Clone NPC - Updating code to include clone.",
    "LastUpdated": "2018-04-28T12:27:37.4690634Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9d0094a6-8038-44e0-86ff-d1f817b08386",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good day everyone,\r\nI have run into an issue with clones that I cannot seem to get around. I have 5 different monsters, each has an Attack verb which displays the attack options when selected. Of course I don't want players to continue attacking a \"dead\" creature, so the verb itself checks to see if the monster's current_hp > 0 (if it is, then the attack options are displayed, otherwise a message is shown stating the monster is dead).\r\n\r\nAll of these monsters are stored in a room players cannot access. There is a spawn script set to run before the player enters each room, so any of the 5 different types of monsters could spawn in any of the rooms. The spawn is handled by using clones and then moving them to the room.\r\n\r\nHere is the problem:\r\nIn order to check for the current_hp > 0, the object must be set to the correct monster. Cloned monsters are not changing the code to include their new name.\r\n\r\n```\r\noptions = Split(\"<span id='spvf_1'>Vas Flam</span>;<span id='spcp_1'>Corp Por</span>;<span id='spkvv_1'>Kal Vas Vlam<span>;<span id='spvof_1'>Vas Ort Flam</span>\", \";\")\r\nobject = bat1\r\nif (GetInt(object, \"current_hp\") > 0) {\r\n  ShowMenu (\"Attack:\", options, false) {\r\n    object = bat1\r\n    switch (result) {\r\n      case (\"<span id='spvf_1'>Vas Flam</span>\") {\r\n        msg (CommandLink(\"vas flam \" + object.alias + \"\", \"Vas Flam the \" + object.alias + \"?\"))\r\n      }\r\n      case (\"<span id='spcp_1'>Corp Por</span>\") {\r\n        msg (CommandLink(\"corp por \" + object.alias + \"\", \"Corp Por the \" + object.alias + \"?\"))\r\n       }\r\n      default {\r\n        PrintCentered (\"Your attack failed.\")\r\n      }\r\n    }\r\n  }\r\n}\r\nelse {\r\n  PrintCentered (\"The poor \" + object.alias + \" has been killed already. You cannot kill it twice.\")\r\n}\r\n```\r\n\r\nWhen bat1 is cloned, it becomes bat6 (because bat2 through bat5 already exist). How do I update the object to adopt whatever the clone name is after it has been cloned?\r\n\r\nThanks,\r\nRaist",
      "EditableFormat": "markdown",
      "HTML": "<p>Good day everyone,<br>\nI have run into an issue with clones that I cannot seem to get around. I have 5 different monsters, each has an Attack verb which displays the attack options when selected. Of course I don't want players to continue attacking a \"dead\" creature, so the verb itself checks to see if the monster's current_hp &gt; 0 (if it is, then the attack options are displayed, otherwise a message is shown stating the monster is dead).</p>\n<p>All of these monsters are stored in a room players cannot access. There is a spawn script set to run before the player enters each room, so any of the 5 different types of monsters could spawn in any of the rooms. The spawn is handled by using clones and then moving them to the room.</p>\n<p>Here is the problem:<br>\nIn order to check for the current_hp &gt; 0, the object must be set to the correct monster. Cloned monsters are not changing the code to include their new name.</p>\n<pre><code>options = Split(\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;;&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;;&lt;span id='spkvv_1'&gt;Kal Vas Vlam&lt;span&gt;;&lt;span id='spvof_1'&gt;Vas Ort Flam&lt;/span&gt;\", \";\")\nobject = bat1\nif (GetInt(object, \"current_hp\") &gt; 0) {\n  ShowMenu (\"Attack:\", options, false) {\n    object = bat1\n    switch (result) {\n      case (\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;\") {\n        msg (CommandLink(\"vas flam \" + object.alias + \"\", \"Vas Flam the \" + object.alias + \"?\"))\n      }\n      case (\"&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;\") {\n        msg (CommandLink(\"corp por \" + object.alias + \"\", \"Corp Por the \" + object.alias + \"?\"))\n       }\n      default {\n        PrintCentered (\"Your attack failed.\")\n      }\n    }\n  }\n}\nelse {\n  PrintCentered (\"The poor \" + object.alias + \" has been killed already. You cannot kill it twice.\")\n}\n</code></pre>\n<p>When bat1 is cloned, it becomes bat6 (because bat2 through bat5 already exist). How do I update the object to adopt whatever the clone name is after it has been cloned?</p>\n<p>Thanks,<br>\nRaist</p>\n\n",
      "PostDate": "2018-04-28T12:27:37.4690634Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "0ebe8808-adc3-42ca-b7e4-b66bf42fe760",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest should handle all of that automatically.\r\n\r\nIs the problem in Quest, or Quest JS?",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest should handle all of that automatically.</p>\n<p>Is the problem in Quest, or Quest JS?</p>\n\n",
      "PostDate": "2018-04-28T13:28:07.5422608Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "03ec7f44-b686-44a3-be4d-7d7897fec9de",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you are NOT planning to convert this with Quest JS, use this script for bat1:\r\n\r\n```\r\n        options = Split(\"<span id='spvf_1'>Vas Flam</span>;<span id='spcp_1'>Corp Por</span>;<span id='spkvv_1'>Kal Vas Vlam<span>;<span id='spvof_1'>Vas Ort Flam</span>\", \";\")\r\n        if (GetInt(this, \"current_hp\") > 0) {\r\n          ShowMenu (\"Attack:\", options, false) {\r\n            switch (result) {\r\n              case (\"<span id='spvf_1'>Vas Flam</span>\") {\r\n                msg (CommandLink(\"vas flam \" + GetDisplayAlias(this) + \"\", \"Vas Flam the \" + GetDisplayAlias(this) + \"?\"))\r\n              }\r\n              case (\"<span id='spcp_1'>Corp Por</span>\") {\r\n                msg (CommandLink(\"corp por \" + GetDisplayAlias(this) + \"\", \"Corp Por the \" + GetDisplayAlias(this) + \"?\"))\r\n              }\r\n              default {\r\n                PrintCentered (\"Your attack failed.\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          PrintCentered (\"The poor \" + GetDisplayAlias(this) + \" has been killed already. You cannot kill it twice.\")\r\n        }\r\n```\r\n\r\n---\r\nIn a verb script, ```this``` will point to the object.  (This will mess up when using Quest JS!!!)\r\n\r\nAlso, I use ```GetDisplayAlias(object)``` rather than ```object.alias```, because ```GetDisplayAlias(object)``` will return the object's name if an alias is not set up.  (This avoids possible errors.)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you are NOT planning to convert this with Quest JS, use this script for bat1:</p>\n<pre><code>        options = Split(\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;;&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;;&lt;span id='spkvv_1'&gt;Kal Vas Vlam&lt;span&gt;;&lt;span id='spvof_1'&gt;Vas Ort Flam&lt;/span&gt;\", \";\")\n        if (GetInt(this, \"current_hp\") &gt; 0) {\n          ShowMenu (\"Attack:\", options, false) {\n            switch (result) {\n              case (\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;\") {\n                msg (CommandLink(\"vas flam \" + GetDisplayAlias(this) + \"\", \"Vas Flam the \" + GetDisplayAlias(this) + \"?\"))\n              }\n              case (\"&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;\") {\n                msg (CommandLink(\"corp por \" + GetDisplayAlias(this) + \"\", \"Corp Por the \" + GetDisplayAlias(this) + \"?\"))\n              }\n              default {\n                PrintCentered (\"Your attack failed.\")\n              }\n            }\n          }\n        }\n        else {\n          PrintCentered (\"The poor \" + GetDisplayAlias(this) + \" has been killed already. You cannot kill it twice.\")\n        }\n</code></pre>\n<hr>\n<p>In a verb script, <code>this</code> will point to the object.  (This will mess up when using Quest JS!!!)</p>\n<p>Also, I use <code>GetDisplayAlias(object)</code> rather than <code>object.alias</code>, because <code>GetDisplayAlias(object)</code> will return the object's name if an alias is not set up.  (This avoids possible errors.)</p>\n\n",
      "PostDate": "2018-04-28T13:41:26.4867103Z",
      "LastEditDate": "2018-04-28T19:00:02.0971392Z",
      "link": null
    },
    {
      "PostId": "5a504633-5aae-4ae7-b2a2-5aa7df9d107c",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "For Quest JS, it needs to be scripted to find the object in the current command (this will still work in Quest, as well):\r\n\r\n```\r\n        // This is safe to find this object, because the pattern will definitely include 'object' and cannot include 'object1' and 'object2'\r\n        object = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\r\n        options = Split(\"<span id='spvf_1'>Vas Flam</span>;<span id='spcp_1'>Corp Por</span>;<span id='spkvv_1'>Kal Vas Vlam<span>;<span id='spvof_1'>Vas Ort Flam</span>\", \";\")\r\n        if (GetInt(object, \"current_hp\") > 0) {\r\n        \r\n          ShowMenu (\"Attack:\", options, false) {\r\n            // Must also add this to ShowMenu because it does not recognize local variables outside of this block\r\n            object = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\r\n            switch (result) {\r\n              case (\"<span id='spvf_1'>Vas Flam</span>\") {\r\n                msg (CommandLink(\"vas flam \" + GetDisplayAlias(object) + \"\", \"Vas Flam the \" + GetDisplayAlias(object) + \"?\"))\r\n              }\r\n              case (\"<span id='spcp_1'>Corp Por</span>\") {\r\n                msg (CommandLink(\"corp por \" + GetDisplayAlias(object) + \"\", \"Corp Por the \" + GetDisplayAlias(object) + \"?\"))\r\n              }\r\n              default {\r\n                PrintCentered (\"Your attack failed.\")\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          PrintCentered (\"The poor \" + GetDisplayAlias(object) + \" has been killed already. You cannot kill it twice.\")\r\n        }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>For Quest JS, it needs to be scripted to find the object in the current command (this will still work in Quest, as well):</p>\n<pre><code>        // This is safe to find this object, because the pattern will definitely include 'object' and cannot include 'object1' and 'object2'\n        object = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\n        options = Split(\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;;&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;;&lt;span id='spkvv_1'&gt;Kal Vas Vlam&lt;span&gt;;&lt;span id='spvof_1'&gt;Vas Ort Flam&lt;/span&gt;\", \";\")\n        if (GetInt(object, \"current_hp\") &gt; 0) {\n        \n          ShowMenu (\"Attack:\", options, false) {\n            // Must also add this to ShowMenu because it does not recognize local variables outside of this block\n            object = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\n            switch (result) {\n              case (\"&lt;span id='spvf_1'&gt;Vas Flam&lt;/span&gt;\") {\n                msg (CommandLink(\"vas flam \" + GetDisplayAlias(object) + \"\", \"Vas Flam the \" + GetDisplayAlias(object) + \"?\"))\n              }\n              case (\"&lt;span id='spcp_1'&gt;Corp Por&lt;/span&gt;\") {\n                msg (CommandLink(\"corp por \" + GetDisplayAlias(object) + \"\", \"Corp Por the \" + GetDisplayAlias(object) + \"?\"))\n              }\n              default {\n                PrintCentered (\"Your attack failed.\")\n              }\n            }\n          }\n        }\n        else {\n          PrintCentered (\"The poor \" + GetDisplayAlias(object) + \" has been killed already. You cannot kill it twice.\")\n        }\n</code></pre>\n\n",
      "PostDate": "2018-04-28T13:50:08.5339548Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "611f567d-0ca3-4d08-bdf1-fd1fba8aab8b",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> For Quest JS, it needs to be scripted to find the object in the current command (this will still work in Quest, as well):\r\n\r\n`this` is just a local variable. Is it not possible to create it before running any script in QuestJS?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>For Quest JS, it needs to be scripted to find the object in the current command (this will still work in Quest, as well):</p>\n</blockquote>\n<p><code>this</code> is just a local variable. Is it not possible to create it before running any script in QuestJS?</p>\n\n",
      "PostDate": "2018-04-28T14:30:54.3761651Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4a55c1a6-6d8f-4998-ac7f-1bca47a0a2e5",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> ```this``` is just a local variable. Is it not possible to create it before running any script in QuestJS?\r\n\r\nI just sent you a detailed email regarding this, but for the sake of anyone else, ```this``` is only a problem in some scripts in Quest JS.\r\n\r\nBy the time the script gets to the script dictionary on the object, ```this``` points to the DOM object's main ```window``` object.\r\n\r\nThis is probably because of the way I am cloning objects in QuestJS.  The function did not exist when I began trying to make QuestJS work.\r\n\r\n---\r\nSpeaking of QuestJS, check this out, Pixie:\r\n\r\nhttps://github.com/KVonGit/quest-js/wiki/Disambiguation-Menu-Fix",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p><code>this</code> is just a local variable. Is it not possible to create it before running any script in QuestJS?</p>\n</blockquote>\n<p>I just sent you a detailed email regarding this, but for the sake of anyone else, <code>this</code> is only a problem in some scripts in Quest JS.</p>\n<p>By the time the script gets to the script dictionary on the object, <code>this</code> points to the DOM object's main <code>window</code> object.</p>\n<p>This is probably because of the way I am cloning objects in QuestJS.  The function did not exist when I began trying to make QuestJS work.</p>\n<hr>\n<p>Speaking of QuestJS, check this out, Pixie:</p>\n<p>https://github.com/KVonGit/quest-js/wiki/Disambiguation-Menu-Fix</p>\n\n",
      "PostDate": "2018-04-28T14:43:45.8073268Z",
      "LastEditDate": "2018-04-28T19:01:10.3494508Z",
      "link": null
    },
    {
      "PostId": "35c41bad-c720-4732-8272-cd7fb00373ca",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's the detailed message I sent Pixie, in case anyone else is interested:\r\n\r\nI first thought \"this\" was messing up simply because of the way JS uses \"this\", but \"this\" works fine some script attributes, such as look.\r\n\r\nThis is the order of operations when I try to give the stick to Ralph.  Everything is okay until invoke calls the script from the object's giveto dictionary.\r\n\r\nsendCommand/<\r\n\r\nsendCommandInternal\r\n\r\nHandleCommand\r\n\r\nHandleSingleCommand\r\n\r\nHandleSingleCommandPattern\r\n\r\nResolveNextName\r\n\r\nAddToResolvedNames\r\n\r\nResolveNextName\r\n\r\nAddToResolvedNames\r\n\r\nResolveNextName\r\n\r\nrunscriptattribute3\r\n\r\nscript\r\n\r\nHandleGiveTo\r\n\r\ninvoke  (At this point, \"this\" still points to object1 as it should.)\r\n\r\n<font color='red'>Ralph  (At this point, \"this\" points to the DOM's window object)\r\n\r\nMoveObject  (Nothing happens in-game and no errors are thrown.)\r\n\r\nset  (The DOM's window object now shows object2 as its parent!)",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's the detailed message I sent Pixie, in case anyone else is interested:</p>\n<p>I first thought \"this\" was messing up simply because of the way JS uses \"this\", but \"this\" works fine some script attributes, such as look.</p>\n<p>This is the order of operations when I try to give the stick to Ralph.  Everything is okay until invoke calls the script from the object's giveto dictionary.</p>\n<p>sendCommand/&lt;</p>\n<p>sendCommandInternal</p>\n<p>HandleCommand</p>\n<p>HandleSingleCommand</p>\n<p>HandleSingleCommandPattern</p>\n<p>ResolveNextName</p>\n<p>AddToResolvedNames</p>\n<p>ResolveNextName</p>\n<p>AddToResolvedNames</p>\n<p>ResolveNextName</p>\n<p>runscriptattribute3</p>\n<p>script</p>\n<p>HandleGiveTo</p>\n<p>invoke  (At this point, \"this\" still points to object1 as it should.)</p>\n<p><font color=\"red\">Ralph  (At this point, \"this\" points to the DOM's window object)</font></p><font color=\"red\">\n<p>MoveObject  (Nothing happens in-game and no errors are thrown.)</p>\n<p>set  (The DOM's window object now shows object2 as its parent!)</p>\n\n</font>",
      "PostDate": "2018-04-28T14:49:38.50852Z",
      "LastEditDate": "2018-04-28T19:02:15.6400305Z",
      "link": null
    },
    {
      "PostId": "4d8493a6-8854-4837-89c2-8dbd5470def1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT**\r\n\r\nI thought ```this``` only had issues when using clones and certain scripts in QuestJS, but it does not matter if the object is a clone.  In a \"giveto\" script in a game converted by QuestJS, ```this``` will cause problem whether or not the object is a clone.",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT</strong></p>\n<p>I thought <code>this</code> only had issues when using clones and certain scripts in QuestJS, but it does not matter if the object is a clone.  In a \"giveto\" script in a game converted by QuestJS, <code>this</code> will cause problem whether or not the object is a clone.</p>\n\n",
      "PostDate": "2018-04-28T15:04:35.1899094Z",
      "LastEditDate": "2018-04-28T19:04:00.0370353Z",
      "link": null
    },
    {
      "PostId": "85a23016-90c4-43da-ade6-d390f8cf538d",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In a game compiled with QuestJS, everything is in line until after ```invoke()```.\r\n\r\nI added ```console.log()``` entries to HandleGiveTo, invoke, and the actual giveto script:\r\n![image](https://user-images.githubusercontent.com/30656341/39398339-dc7fe738-4ad1-11e8-9242-0735ca6dcc9d.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>In a game compiled with QuestJS, everything is in line until after <code>invoke()</code>.</p>\n<p>I added <code>console.log()</code> entries to HandleGiveTo, invoke, and the actual giveto script:<br>\n<img src=\"https://user-images.githubusercontent.com/30656341/39398339-dc7fe738-4ad1-11e8-9242-0735ca6dcc9d.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-28T15:41:14.8296401Z",
      "LastEditDate": "2018-04-28T19:04:25.0440532Z",
      "link": null
    },
    {
      "PostId": "5e956833-2ce9-4b33-8e65-93e776d94538",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Here's the bit that concerns this from HandleGiveTo:\r\n\r\n```\r\nvar parameters = NewObjectDictionary();\r\ndictionaryadd (parameters, \"this\", object1);\r\ndictionaryadd (parameters, \"object\", object2);\r\n// Added to debug\r\nconsole.log(\"Runing HandleGiveTo\");\r\nconsole.log(\"object1\");\r\nconsole.log(object1);\r\nconsole.log(\"object2\");\r\nconsole.log(object2);\r\nconsole.log(\"parameters\");\r\nconsole.log(parameters);\r\n// END OF ADDED TO DEBUG\r\ninvoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters);\r\nvar handled = true;\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Here's the bit that concerns this from HandleGiveTo:</p>\n<pre><code>var parameters = NewObjectDictionary();\ndictionaryadd (parameters, \"this\", object1);\ndictionaryadd (parameters, \"object\", object2);\n// Added to debug\nconsole.log(\"Runing HandleGiveTo\");\nconsole.log(\"object1\");\nconsole.log(object1);\nconsole.log(\"object2\");\nconsole.log(object2);\nconsole.log(\"parameters\");\nconsole.log(parameters);\n// END OF ADDED TO DEBUG\ninvoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters);\nvar handled = true;\n</code></pre>\n\n",
      "PostDate": "2018-04-28T15:54:25.6343233Z",
      "LastEditDate": "2018-04-28T15:55:49.197201Z",
      "link": null
    },
    {
      "PostId": "94a32bb7-0362-42d0-bc98-58e8dbb4d077",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "NOTE:\r\n\r\nIt may seem that I have derailed this thread, but Raist is the main person helping me out with QuestJS and is definitely using QuestJS to compile this game.  \r\n\r\n---\r\nALSO NOTE:\r\n\r\nI think it should be questJs.",
      "EditableFormat": "markdown",
      "HTML": "<p>NOTE:</p>\n<p>It may seem that I have derailed this thread, but Raist is the main person helping me out with QuestJS and is definitely using QuestJS to compile this game.</p>\n<hr>\n<p>ALSO NOTE:</p>\n<p>I think it should be questJs.</p>\n\n",
      "PostDate": "2018-04-28T16:00:26.5620403Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "65490a7a-8aa6-4204-9cbd-c3411d09ebb6",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**EDIT**\r\n\r\nAgain, I though ```this``` was only a clone-related issue, but this is not the case.  It just depends on which script attribute, and I think what REALLY matters is if the attribute is a script dictionary.",
      "EditableFormat": "markdown",
      "HTML": "<p><strong>EDIT</strong></p>\n<p>Again, I though <code>this</code> was only a clone-related issue, but this is not the case.  It just depends on which script attribute, and I think what REALLY matters is if the attribute is a script dictionary.</p>\n\n",
      "PostDate": "2018-04-28T16:15:56.8184729Z",
      "LastEditDate": "2018-04-28T19:05:58.2489417Z",
      "link": null
    },
    {
      "PostId": "753db10d-208b-4265-8eaf-4a84e4705f91",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried putting this at the beginning of the giveto script:\r\n```\r\nthis = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\r\n```\r\n\r\n---\r\nThat throws this error, which completely breaks the game on loading:\r\n\r\n```SyntaxError: missing variable name```\r\n\r\n\r\n---\r\nBUT this makes it all okay:\r\n\r\n```\r\nobj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\r\nJS.console.log (\"Running the 'giveto' script':\")\r\nmsg (\"You give \"+obj.article+\" to Ralph.\")\r\nJS.console.log (obj)\r\nMoveObject (obj, Ralph)\r\n```\r\n---\r\n![image](https://user-images.githubusercontent.com/30656341/39398743-c8d2fcce-4ad7-11e8-9d92-6b2db3d228ea.png)",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried putting this at the beginning of the giveto script:</p>\n<pre><code>this = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\n</code></pre>\n<hr>\n<p>That throws this error, which completely breaks the game on loading:</p>\n<p><code>SyntaxError: missing variable name</code></p>\n<hr>\n<p>BUT this makes it all okay:</p>\n<pre><code>obj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\nJS.console.log (\"Running the 'giveto' script':\")\nmsg (\"You give \"+obj.article+\" to Ralph.\")\nJS.console.log (obj)\nMoveObject (obj, Ralph)\n</code></pre>\n<hr>\n<p><img src=\"https://user-images.githubusercontent.com/30656341/39398743-c8d2fcce-4ad7-11e8-9d92-6b2db3d228ea.png\" alt=\"image\"></p>\n\n",
      "PostDate": "2018-04-28T16:32:24.3375865Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "bab1be68-71bb-4839-9d7e-ff599df57e71",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You've basically run into the wall I found , KV. I'm following the logic of your derailment though (I am indeed compiling with questJS, folks, but this could still apply to those that are not).\r\n\r\nMaybe we should step back and ask: What makes a Clone?\r\n\r\nWhat exactly is the code in Quest doing? Is there a way that Quest can be set up to Find/Replace instances of bat1 with bat1_1 in all the code associated with the original target, when a clone is created, instead of what is currently happening (can that then be replicated in questJS)?\r\n\r\nQuest is already providing bat6 (bat7, bat8, bat9, etc) as new clones are created, so some of that code already exists, it just needs to go deeper than just the object->name (I noticed that none of the objects the bats were carrying got cloned either). I suppose the catch would be if you have to include the children or if you can exclude them during a Find/Replace.",
      "EditableFormat": "markdown",
      "HTML": "<p>You've basically run into the wall I found , KV. I'm following the logic of your derailment though (I am indeed compiling with questJS, folks, but this could still apply to those that are not).</p>\n<p>Maybe we should step back and ask: What makes a Clone?</p>\n<p>What exactly is the code in Quest doing? Is there a way that Quest can be set up to Find/Replace instances of bat1 with bat1_1 in all the code associated with the original target, when a clone is created, instead of what is currently happening (can that then be replicated in questJS)?</p>\n<p>Quest is already providing bat6 (bat7, bat8, bat9, etc) as new clones are created, so some of that code already exists, it just needs to go deeper than just the object-&gt;name (I noticed that none of the objects the bats were carrying got cloned either). I suppose the catch would be if you have to include the children or if you can exclude them during a Find/Replace.</p>\n\n",
      "PostDate": "2018-04-28T16:39:59.5395362Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9d4fb4b5-1afb-4e40-9fcf-64ea198a9d81",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I have none of these issues in Quest.  You just have to use ```this``` instead of ```object``` in a verb's script for Quest to find the right object.\r\n\r\nI have posted way too much stuff on this thread, so it is buried, but this is how to use ```this``` in the verb scripts (to handle original objects AND clones) in the normal version of Quest:\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/trletgfuzu2uho13yfa_ug/clone-npc-updating-code-to-include-clone#03ec7f44-b686-44a3-be4d-7d7897fec9de\r\n\r\n---\r\nBUT, for the QuestJS conversion, try replacing your script with this, Raist (it should work in both Quest and a QuestJS compiled game):\r\n\r\nhttp://textadventures.co.uk/forum/quest/topic/trletgfuzu2uho13yfa_ug/clone-npc-updating-code-to-include-clone#5a504633-5aae-4ae7-b2a2-5aa7df9d107c\r\n\r\n---\r\nhttps://github.com/KVonGit/quest-js/releases\r\n\r\n**EDIT**\r\n\r\nI am on 6.2.3-alpha2 right now.  It clones objects inside of objects.  \r\n\r\n(Sorry, but QuestJS has recently become bleeding edge.)",
      "EditableFormat": "markdown",
      "HTML": "<p>I have none of these issues in Quest.  You just have to use <code>this</code> instead of <code>object</code> in a verb's script for Quest to find the right object.</p>\n<p>I have posted way too much stuff on this thread, so it is buried, but this is how to use <code>this</code> in the verb scripts (to handle original objects AND clones) in the normal version of Quest:</p>\n<p>http://textadventures.co.uk/forum/quest/topic/trletgfuzu2uho13yfa_ug/clone-npc-updating-code-to-include-clone#03ec7f44-b686-44a3-be4d-7d7897fec9de</p>\n<hr>\n<p>BUT, for the QuestJS conversion, try replacing your script with this, Raist (it should work in both Quest and a QuestJS compiled game):</p>\n<p>http://textadventures.co.uk/forum/quest/topic/trletgfuzu2uho13yfa_ug/clone-npc-updating-code-to-include-clone#5a504633-5aae-4ae7-b2a2-5aa7df9d107c</p>\n<hr>\n<p>https://github.com/KVonGit/quest-js/releases</p>\n<p><strong>EDIT</strong></p>\n<p>I am on 6.2.3-alpha2 right now.  It clones objects inside of objects.</p>\n<p>(Sorry, but QuestJS has recently become bleeding edge.)</p>\n\n",
      "PostDate": "2018-04-28T17:07:33.7303508Z",
      "LastEditDate": "2018-04-28T17:37:22.9952307Z",
      "link": null
    },
    {
      "PostId": "2d7b1141-6ce7-4b85-9805-37b9aec7eafe",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "The only (minor) issue Quest has when cloning an object with child objects is when a child object does not have an alias.  In these instances, the child object's alias will become the clone name (so a \"note\" in a box would become \"note1\").\r\n\r\nAn example game:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6689.24908-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Give JS\">\r\n    <gameid>3c14ac9d-9851-4690-af4f-9b397b95f7cb</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <feature_usegive />\r\n      <giveto type=\"scriptdictionary\">\r\n        <item key=\"Ralph\">\r\n          // obj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\r\n          JS.console.log (\"Running the 'giveto' script':\")\r\n          msg (\"You give \"+this.article+\" to Ralph.\")\r\n          JS.console.log (this)\r\n          MoveObject (this, Ralph)\r\n        </item>\r\n      </giveto>\r\n    </object>\r\n    <object name=\"box\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <take />\r\n      <look type=\"script\">\r\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\r\n      </look>\r\n      <object name=\"note\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n        <look>If you can read this, the clone function (kind of) works!</look>\r\n      </object>\r\n    </object>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforefirstenter type=\"script\">\r\n      CloneObjectAndMoveHere (stick)\r\n      CloneObjectAndMoveHere (box)\r\n    </beforefirstenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"Ralph\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <alt type=\"stringlist\">\r\n        <value>rp</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nBUT giving each object an alias before cloning keeps this from happening.\r\n\r\nExample game (I only added an alias to the note object):\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6689.24908-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Give JS\">\r\n    <gameid>3c14ac9d-9851-4690-af4f-9b397b95f7cb</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <feature_usegive />\r\n      <giveto type=\"scriptdictionary\">\r\n        <item key=\"Ralph\">\r\n          // obj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\r\n          JS.console.log (\"Running the 'giveto' script':\")\r\n          msg (\"You give \"+this.article+\" to Ralph.\")\r\n          JS.console.log (this)\r\n          MoveObject (this, Ralph)\r\n        </item>\r\n      </giveto>\r\n    </object>\r\n    <object name=\"box\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <take />\r\n      <look type=\"script\">\r\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\r\n      </look>\r\n      <object name=\"note\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n        <look>If you can read this, the clone function (kind of) works!</look>\r\n        <alias>note</alias>\r\n      </object>\r\n    </object>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforefirstenter type=\"script\">\r\n      CloneObjectAndMoveHere (stick)\r\n      CloneObjectAndMoveHere (box)\r\n    </beforefirstenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"Ralph\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <alt type=\"stringlist\">\r\n        <value>rp</value>\r\n      </alt>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nI like to put this in my start scripts, to cover any issues concerning the lack of an alias:\r\n\r\n```\r\nforeach (o, AllObjects()){\r\n  if (not HasAttribute(o,\"alias\")){\r\n    o.alias = o.name\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>The only (minor) issue Quest has when cloning an object with child objects is when a child object does not have an alias.  In these instances, the child object's alias will become the clone name (so a \"note\" in a box would become \"note1\").</p>\n<p>An example game:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6689.24908--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Give JS\"&gt;\n    &lt;gameid&gt;3c14ac9d-9851-4690-af4f-9b397b95f7cb&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;feature_usegive /&gt;\n      &lt;giveto type=\"scriptdictionary\"&gt;\n        &lt;item key=\"Ralph\"&gt;\n          // obj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\n          JS.console.log (\"Running the 'giveto' script':\")\n          msg (\"You give \"+this.article+\" to Ralph.\")\n          JS.console.log (this)\n          MoveObject (this, Ralph)\n        &lt;/item&gt;\n      &lt;/giveto&gt;\n    &lt;/object&gt;\n    &lt;object name=\"box\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\n      &lt;/look&gt;\n      &lt;object name=\"note\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n        &lt;look&gt;If you can read this, the clone function (kind of) works!&lt;/look&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforefirstenter type=\"script\"&gt;\n      CloneObjectAndMoveHere (stick)\n      CloneObjectAndMoveHere (box)\n    &lt;/beforefirstenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Ralph\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;rp&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>BUT giving each object an alias before cloning keeps this from happening.</p>\n<p>Example game (I only added an alias to the note object):</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6689.24908--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Give JS\"&gt;\n    &lt;gameid&gt;3c14ac9d-9851-4690-af4f-9b397b95f7cb&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;feature_usegive /&gt;\n      &lt;giveto type=\"scriptdictionary\"&gt;\n        &lt;item key=\"Ralph\"&gt;\n          // obj = ObjectDictionaryItem(game.pov.currentcommandresolvedelements,\"object1\")\n          JS.console.log (\"Running the 'giveto' script':\")\n          msg (\"You give \"+this.article+\" to Ralph.\")\n          JS.console.log (this)\n          MoveObject (this, Ralph)\n        &lt;/item&gt;\n      &lt;/giveto&gt;\n    &lt;/object&gt;\n    &lt;object name=\"box\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;take /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\n      &lt;/look&gt;\n      &lt;object name=\"note\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n        &lt;look&gt;If you can read this, the clone function (kind of) works!&lt;/look&gt;\n        &lt;alias&gt;note&lt;/alias&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforefirstenter type=\"script\"&gt;\n      CloneObjectAndMoveHere (stick)\n      CloneObjectAndMoveHere (box)\n    &lt;/beforefirstenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Ralph\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;rp&lt;/value&gt;\n      &lt;/alt&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>I like to put this in my start scripts, to cover any issues concerning the lack of an alias:</p>\n<pre><code>foreach (o, AllObjects()){\n  if (not HasAttribute(o,\"alias\")){\n    o.alias = o.name\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-04-28T17:16:59.2277526Z",
      "LastEditDate": "2018-04-28T17:17:31.2562356Z",
      "link": null
    },
    {
      "PostId": "0aba3896-7eeb-4674-8653-03a29a34645a",
      "UserId": 341201,
      "Username": "Raist",
      "AvatarUrl": "https://i.imgur.com/0UTKrlab.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay that worked, aces KV ;)\r\nStrange though, as I remember trying THIS before and I received an error about THIS being an invalid object. It might just have been the location THIS was in that made it invalid though. I did not realize at the time the variable was not global within the entire box of code (instead of just that one section), so I only had it in one spot possibly.\r\n\r\nI am actually using THIS as the object to change how the bat looks when you look at it depending on what state it is in.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay that worked, aces KV ;)<br>\nStrange though, as I remember trying THIS before and I received an error about THIS being an invalid object. It might just have been the location THIS was in that made it invalid though. I did not realize at the time the variable was not global within the entire box of code (instead of just that one section), so I only had it in one spot possibly.</p>\n<p>I am actually using THIS as the object to change how the bat looks when you look at it depending on what state it is in.</p>\n\n",
      "PostDate": "2018-04-28T17:49:17.1338596Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "74841b88-528b-46ac-adde-4d07f25f37b3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You can use ```this``` in the \"look\" script in a game converted with QuestJS, but not on a \"giveto\" script.  (I don't know why.)\r\n\r\nThis is what I go by:\r\n\r\nIf my script will be called during a command with only one object, I add this to the beginning of my script attribute and use ```obj``` in place of ```this```:\r\n\r\n```\r\nobj = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\r\n```\r\n\r\n---\r\nIf I know the command will have two objects (```object1``` and ```object2```), I change that first line I add to this:\r\n\r\n```\r\nobj = DictionaryItem(game.pov.currentcommandresolvedelements, \"object1\")\r\nobj2 = DictionaryItem(game.pov.currentcommandresolvedelements, \"object2\")\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>You can use <code>this</code> in the \"look\" script in a game converted with QuestJS, but not on a \"giveto\" script.  (I don't know why.)</p>\n<p>This is what I go by:</p>\n<p>If my script will be called during a command with only one object, I add this to the beginning of my script attribute and use <code>obj</code> in place of <code>this</code>:</p>\n<pre><code>obj = DictionaryItem(game.pov.currentcommandresolvedelements, \"object\")\n</code></pre>\n<hr>\n<p>If I know the command will have two objects (<code>object1</code> and <code>object2</code>), I change that first line I add to this:</p>\n<pre><code>obj = DictionaryItem(game.pov.currentcommandresolvedelements, \"object1\")\nobj2 = DictionaryItem(game.pov.currentcommandresolvedelements, \"object2\")\n</code></pre>\n\n",
      "PostDate": "2018-04-28T17:59:48.8522233Z",
      "LastEditDate": "2018-04-28T19:06:48.1876778Z",
      "link": null
    },
    {
      "PostId": "e5b30dab-837e-4288-b88f-a74efff8b605",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "UPDATE\r\n \r\nI originally though ```this``` only had problems in games converted by QuestJS when dealing with clones, but this is not the case.  (I have updated this thread accordingly.)\r\n\r\nI now theorize that ```this``` only has problems in games converted by QuestJS when dealing with script dictionary attributes.",
      "EditableFormat": "markdown",
      "HTML": "<p>UPDATE</p>\n<p>I originally though <code>this</code> only had problems in games converted by QuestJS when dealing with clones, but this is not the case.  (I have updated this thread accordingly.)</p>\n<p>I now theorize that <code>this</code> only has problems in games converted by QuestJS when dealing with script dictionary attributes.</p>\n\n",
      "PostDate": "2018-04-28T19:08:16.3557212Z",
      "LastEditDate": "2018-04-28T19:10:42.7356785Z",
      "link": null
    },
    {
      "PostId": "0ca8bf8b-b434-415d-8ea7-36a8020554ac",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "KV: Is your \"this\" variable colliding with the JS \"this\"?\r\nSounds like an interesting problem, but I don't have the time at present. Promo is always a few days of panic for me.",
      "EditableFormat": "markdown",
      "HTML": "<p>KV: Is your \"this\" variable colliding with the JS \"this\"?<br>\nSounds like an interesting problem, but I don't have the time at present. Promo is always a few days of panic for me.</p>\n\n",
      "PostDate": "2018-04-28T21:20:30.0740765Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "cbbee4cc-4b3c-4a06-aaf6-d326f632b529",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yes it is, mrangel, but only when dealing with script dictionary attributes like \"giveto\".  In fact, \"giveto\" is the only time I've seen this happen.\r\n\r\nI am having fun trying to find a good fix, even if I'm failing miserably.  (I'm learning other good stuff along the way.  You know how it is.)  There may not be a fix.  It may just be that you can't use ```this``` in script dictionary attributes.  (Sucks for cloners!)\r\n\r\nJS decides ```this``` is the window object just before the very last script (which is the actual \"giveto\" script).  (The window object's parent is Ralph!  Pretty funny!)\r\n\r\n\r\n---\r\nI think this is the last major issue with QuestJS, with the exception of the in-game map, which isn't necessary for game play (but I will try to add the functionality in once everything else is in working order).\r\n\r\n\r\n---\r\nI also just found a really funny thing with lists.  (It drove me insane at first, until I found what the actual issue was.  Now, I think it's funny.)\r\n\r\nHow about an example?\r\n\r\n```\r\nlist1 = Split(\"Dasher;Dancer;Prancer\", \";\")\r\nlist2 = Split(\"Vixen;Comet;Cupid\", \";\")\r\n```\r\n\r\nIn Quest, we can do ```list1 + list2```, which will produce:  \"Dasher;Dancer;Prancer;Vixen;Comet;Cupid\"\r\n\r\nBUT, when JS is in charge of concatenation, ```list1 + list2``` will output: \"Dasher,Dancer,PrancerVixen,Comet,Cupid\", which is a STRING (dum, Dum, DUM!!!).\r\n\r\nThis messes up the disambiguation menu, but it's a one-line change in one function (ResolveNameFromList).  One only need replace ```list1 + list2``` with ```ListCombine(list1, list2)``` and all is well.\r\n\r\nhttps://github.com/KVonGit/quest-js/wiki/Disambiguation-Menu-Fix\r\n\r\n---\r\nWhenever things calm down, and if you're also bored, you can check out what we've got going on in the fork: https://github.com/KVonGit/quest-js\r\n\r\nJust like Quest, though, this won't run under anything but Windows, even with WINE in Linux.  I am not sure about Macs.",
      "EditableFormat": "markdown",
      "HTML": "<p>Yes it is, mrangel, but only when dealing with script dictionary attributes like \"giveto\".  In fact, \"giveto\" is the only time I've seen this happen.</p>\n<p>I am having fun trying to find a good fix, even if I'm failing miserably.  (I'm learning other good stuff along the way.  You know how it is.)  There may not be a fix.  It may just be that you can't use <code>this</code> in script dictionary attributes.  (Sucks for cloners!)</p>\n<p>JS decides <code>this</code> is the window object just before the very last script (which is the actual \"giveto\" script).  (The window object's parent is Ralph!  Pretty funny!)</p>\n<hr>\n<p>I think this is the last major issue with QuestJS, with the exception of the in-game map, which isn't necessary for game play (but I will try to add the functionality in once everything else is in working order).</p>\n<hr>\n<p>I also just found a really funny thing with lists.  (It drove me insane at first, until I found what the actual issue was.  Now, I think it's funny.)</p>\n<p>How about an example?</p>\n<pre><code>list1 = Split(\"Dasher;Dancer;Prancer\", \";\")\nlist2 = Split(\"Vixen;Comet;Cupid\", \";\")\n</code></pre>\n<p>In Quest, we can do <code>list1 + list2</code>, which will produce:  \"Dasher;Dancer;Prancer;Vixen;Comet;Cupid\"</p>\n<p>BUT, when JS is in charge of concatenation, <code>list1 + list2</code> will output: \"Dasher,Dancer,PrancerVixen,Comet,Cupid\", which is a STRING (dum, Dum, DUM!!!).</p>\n<p>This messes up the disambiguation menu, but it's a one-line change in one function (ResolveNameFromList).  One only need replace <code>list1 + list2</code> with <code>ListCombine(list1, list2)</code> and all is well.</p>\n<p>https://github.com/KVonGit/quest-js/wiki/Disambiguation-Menu-Fix</p>\n<hr>\n<p>Whenever things calm down, and if you're also bored, you can check out what we've got going on in the fork: https://github.com/KVonGit/quest-js</p>\n<p>Just like Quest, though, this won't run under anything but Windows, even with WINE in Linux.  I am not sure about Macs.</p>\n\n",
      "PostDate": "2018-04-28T21:46:15.2814372Z",
      "LastEditDate": "2018-04-28T23:29:01.6550548Z",
      "link": null
    },
    {
      "PostId": "a6bc278a-f21b-40e8-a453-a455ee3d1387",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can see why that would happen.\r\nNot sure of an easy way to fix it, though.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can see why that would happen.<br>\nNot sure of an easy way to fix it, though.</p>\n\n",
      "PostDate": "2018-04-28T21:59:48.6033592Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "04c3aaec-826b-4d2f-a930-88eba14c4bec",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well, if you didn't think of one, and neither Pixie nor Pertex has chimed in, I'm thinking that the author should avoid ```this``` in script dictionary attributes (such as \"giveto\").\r\n\r\nI briefly thought of replacing \"this\" with the required code, but I decided against it before I even wrote any code.\r\n\r\nI can check the scripts for the string \"this\" during conversion.  I can even be sure I'm only checking a \"giveto\" script, but what if the script was like this:\r\n\r\n```\r\nmsg (\"\\\"Well, this is just fabulous!\\\"  The NPC seems overjoyed.  \\\"I mean this... this is just the best thing that ever happened to me!  Thank you, for this \" + GetDisplayAlias(this) + \"!\")\r\nMoveObject(this,npc)\r\n```\r\n\r\n---\r\nI guess if someone is converting their game to a website, they're going to have to know how to do a little fiddling with code anyway...\r\n\r\nThe script can be edited in the Quest editor before publishing, or in the **game.js** file which QuestJS will output, or on the fly after play begins (as long the function isn't called during the start script).\r\n\r\nYeah...  I think this will just be one of those things.  I display a popup concerning ```this``` when opening QuestJS, so...  it should be okay.",
      "EditableFormat": "markdown",
      "HTML": "<p>Well, if you didn't think of one, and neither Pixie nor Pertex has chimed in, I'm thinking that the author should avoid <code>this</code> in script dictionary attributes (such as \"giveto\").</p>\n<p>I briefly thought of replacing \"this\" with the required code, but I decided against it before I even wrote any code.</p>\n<p>I can check the scripts for the string \"this\" during conversion.  I can even be sure I'm only checking a \"giveto\" script, but what if the script was like this:</p>\n<pre><code>msg (\"\\\"Well, this is just fabulous!\\\"  The NPC seems overjoyed.  \\\"I mean this... this is just the best thing that ever happened to me!  Thank you, for this \" + GetDisplayAlias(this) + \"!\")\nMoveObject(this,npc)\n</code></pre>\n<hr>\n<p>I guess if someone is converting their game to a website, they're going to have to know how to do a little fiddling with code anyway...</p>\n<p>The script can be edited in the Quest editor before publishing, or in the <strong>game.js</strong> file which QuestJS will output, or on the fly after play begins (as long the function isn't called during the start script).</p>\n<p>Yeah...  I think this will just be one of those things.  I display a popup concerning <code>this</code> when opening QuestJS, so...  it should be okay.</p>\n\n",
      "PostDate": "2018-04-28T23:27:42.0060701Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "28d59907-2199-45fb-b2f4-d4bb37f197dd",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'm struggling to get my head around all the C# code. Are there any example converted games out there?\r\n\r\nI think I see the problem; but not entirely sure. I'd like to see what a function that calls `invoke` with parameters looks like after JS conversion. (Is there an `invoke` function in your output game.js? If I'm reading the code correctly I'd expect there to be; I'd like to see that code)\r\n\r\n(As far as I can understand, in Quest `this` is a variable, but is assigned . In javascript, `this` is a keyword that behaves like a veriable in a lot of cases, but really isn't one. In particular, it does not obey normal scope rules. If you're used to programming in C, it might be more practical to imagine that the `this` keyword is implemented as a compiler macro, and be suitably cautious when assigning it to anything)",
      "EditableFormat": "markdown",
      "HTML": "<p>I'm struggling to get my head around all the C# code. Are there any example converted games out there?</p>\n<p>I think I see the problem; but not entirely sure. I'd like to see what a function that calls <code>invoke</code> with parameters looks like after JS conversion. (Is there an <code>invoke</code> function in your output game.js? If I'm reading the code correctly I'd expect there to be; I'd like to see that code)</p>\n<p>(As far as I can understand, in Quest <code>this</code> is a variable, but is assigned . In javascript, <code>this</code> is a keyword that behaves like a veriable in a lot of cases, but really isn't one. In particular, it does not obey normal scope rules. If you're used to programming in C, it might be more practical to imagine that the <code>this</code> keyword is implemented as a compiler macro, and be suitably cautious when assigning it to anything)</p>\n\n",
      "PostDate": "2018-04-30T16:47:26.8233715Z",
      "LastEditDate": "2018-04-30T16:53:32.1241466Z",
      "link": null
    },
    {
      "PostId": "9e9013c0-9a52-4a3f-b178-e23992f0bbee",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I'll post a game in an hour or two.",
      "EditableFormat": "markdown",
      "HTML": "<p>I'll post a game in an hour or two.</p>\n\n",
      "PostDate": "2018-04-30T17:27:25.4985644Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d27bb16e-bc09-4101-aef0-22976123ce1e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "It may be another hour before I get to my computer, but I will post code and theories.",
      "EditableFormat": "markdown",
      "HTML": "<p>It may be another hour before I get to my computer, but I will post code and theories.</p>\n\n",
      "PostDate": "2018-04-30T19:17:00.1326936Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8ce61338-0604-4552-9ed2-d23115c5efd6",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay...\r\n\r\nHere is the .aslx, just for completion's sake:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6689.24908-->\r\n<asl version=\"550\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Give JS\">\r\n    <gameid>3c14ac9d-9851-4690-af4f-9b397b95f7cb</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2018</firstpublished>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <take />\r\n      <feature_usegive />\r\n      <givesingle />\r\n      <look type=\"script\">\r\n        msg (\"You see nothing special about \"+this.article+\".\")\r\n      </look>\r\n      <giveto type=\"scriptdictionary\">\r\n        <item key=\"Ralph\">\r\n          JS.console.log (\"Running the 'giveto' script':\")\r\n          msg (\"You give \"+this.article+\" to Ralph.\")\r\n          JS.console.log (this)\r\n          MoveObject (this, Ralph)\r\n        </item>\r\n      </giveto>\r\n    </object>\r\n    <object name=\"box\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"container_closed\" />\r\n      <feature_container />\r\n      <listchildren />\r\n      <take />\r\n      <feature_usegive />\r\n      <givesingle />\r\n      <look type=\"script\">\r\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\r\n      </look>\r\n      <giveto type=\"scriptdictionary\">\r\n        <item key=\"Ralph\">\r\n          obj = This()\r\n          msg (\"You give \"+obj.article+\" to Ralph.\")\r\n          MoveObject (obj, Ralph)\r\n        </item>\r\n      </giveto>\r\n      <object name=\"note\">\r\n        <inherit name=\"editor_object\" />\r\n        <take />\r\n        <look>If you can read this, the clone function (kind of) works!</look>\r\n        <alias>note</alias>\r\n      </object>\r\n    </object>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <beforefirstenter type=\"script\">\r\n      CloneObjectAndMoveHere (stick)\r\n      CloneObjectAndMoveHere (box)\r\n    </beforefirstenter>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"Ralph\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"namedmale\" />\r\n      <inherit name=\"surface\" />\r\n      <alt type=\"stringlist\">\r\n        <value>rp</value>\r\n      </alt>\r\n      <feature_container />\r\n      <contentsprefix>who is carrying</contentsprefix>\r\n      <listchildren />\r\n      <listchildrenprefix>He is carrying</listchildrenprefix>\r\n    </object>\r\n  </object>\r\n  <function name=\"This\" type=\"object\">\r\n    if (DictionaryContains(game.pov.currentcommandresolvedelements,\"object\")) {\r\n      return (DictionaryItem(game.pov.currentcommandresolvedelements,\"object\"))\r\n    }\r\n    else if (DictionaryContains(game.pov.currentcommandresolvedelements,\"object1\")) {\r\n      return (DictionaryItem(game.pov.currentcommandresolvedelements,\"object1\"))\r\n    }\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nThe stick has ```this``` in the giveto script, but the box is checking for ```object``` or ```object1``` in game.currentcommandresolvedelements (this is the best workaround I could think of).\r\n\r\nSo, you can give the box to Ralph, but giving the stick to him will fail.\r\n\r\nAlso, when examining either object, I use a script with ```this``` in each one, just to show that it will work when the attribute is not a script dictionary.\r\n\r\n---\r\nHere is the game after converting it:\r\n\r\nhttp://textadventures.co.uk/games/view/pn49r_pudugw57axvilpgg/givejs\r\n\r\nIf you enter MENU (or just click the button at the top-right to open the menu), you will see a button which will download all the game files in a ZIP.",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay...</p>\n<p>Here is the .aslx, just for completion's sake:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6689.24908--&gt;\n&lt;asl version=\"550\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Give JS\"&gt;\n    &lt;gameid&gt;3c14ac9d-9851-4690-af4f-9b397b95f7cb&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2018&lt;/firstpublished&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;take /&gt;\n      &lt;feature_usegive /&gt;\n      &lt;givesingle /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"You see nothing special about \"+this.article+\".\")\n      &lt;/look&gt;\n      &lt;giveto type=\"scriptdictionary\"&gt;\n        &lt;item key=\"Ralph\"&gt;\n          JS.console.log (\"Running the 'giveto' script':\")\n          msg (\"You give \"+this.article+\" to Ralph.\")\n          JS.console.log (this)\n          MoveObject (this, Ralph)\n        &lt;/item&gt;\n      &lt;/giveto&gt;\n    &lt;/object&gt;\n    &lt;object name=\"box\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"container_closed\" /&gt;\n      &lt;feature_container /&gt;\n      &lt;listchildren /&gt;\n      &lt;take /&gt;\n      &lt;feature_usegive /&gt;\n      &lt;givesingle /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"It is \"+GetDisplayName(this)+\", silly!\")\n      &lt;/look&gt;\n      &lt;giveto type=\"scriptdictionary\"&gt;\n        &lt;item key=\"Ralph\"&gt;\n          obj = This()\n          msg (\"You give \"+obj.article+\" to Ralph.\")\n          MoveObject (obj, Ralph)\n        &lt;/item&gt;\n      &lt;/giveto&gt;\n      &lt;object name=\"note\"&gt;\n        &lt;inherit name=\"editor_object\" /&gt;\n        &lt;take /&gt;\n        &lt;look&gt;If you can read this, the clone function (kind of) works!&lt;/look&gt;\n        &lt;alias&gt;note&lt;/alias&gt;\n      &lt;/object&gt;\n    &lt;/object&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;beforefirstenter type=\"script\"&gt;\n      CloneObjectAndMoveHere (stick)\n      CloneObjectAndMoveHere (box)\n    &lt;/beforefirstenter&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"Ralph\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"namedmale\" /&gt;\n      &lt;inherit name=\"surface\" /&gt;\n      &lt;alt type=\"stringlist\"&gt;\n        &lt;value&gt;rp&lt;/value&gt;\n      &lt;/alt&gt;\n      &lt;feature_container /&gt;\n      &lt;contentsprefix&gt;who is carrying&lt;/contentsprefix&gt;\n      &lt;listchildren /&gt;\n      &lt;listchildrenprefix&gt;He is carrying&lt;/listchildrenprefix&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;function name=\"This\" type=\"object\"&gt;\n    if (DictionaryContains(game.pov.currentcommandresolvedelements,\"object\")) {\n      return (DictionaryItem(game.pov.currentcommandresolvedelements,\"object\"))\n    }\n    else if (DictionaryContains(game.pov.currentcommandresolvedelements,\"object1\")) {\n      return (DictionaryItem(game.pov.currentcommandresolvedelements,\"object1\"))\n    }\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>The stick has <code>this</code> in the giveto script, but the box is checking for <code>object</code> or <code>object1</code> in game.currentcommandresolvedelements (this is the best workaround I could think of).</p>\n<p>So, you can give the box to Ralph, but giving the stick to him will fail.</p>\n<p>Also, when examining either object, I use a script with <code>this</code> in each one, just to show that it will work when the attribute is not a script dictionary.</p>\n<hr>\n<p>Here is the game after converting it:</p>\n<p>http://textadventures.co.uk/games/view/pn49r_pudugw57axvilpgg/givejs</p>\n<p>If you enter MENU (or just click the button at the top-right to open the menu), you will see a button which will download all the game files in a ZIP.</p>\n\n",
      "PostDate": "2018-04-30T21:45:10.1996783Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "8feeb92d-d752-4b3a-ad5b-a3e2d1032e3f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Also, when examining either object, I use a script with `this` in each one, just to show that it will work when the attribute is not a script dictionary.\r\n\r\nI don't think it matters that it's a script dictionary. I think your implementation of `invoke` is broken.\r\nExamining an object doesn't use invoke, it uses `runscriptattribute2`, which seems to be equivalent to Quest's `do`.\r\n\r\nYou have:\r\n```\r\nfunction invoke(script, parameters) {\r\n    if (parameters) {\r\n        script.apply(null, [parameters[\"result\"]]);\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\nThis seems to be called by HandleGiveTo, so I'd expect it to be similar to Quest's `invoke`. But in this case, the parameters array contains two items: \"this\" and \"object\".  `invoke` seems to ignore any parameter that isn't named \"result\".\r\n\r\nIf it's passing \"object\" but not \"this\", then I'm extremely confused.\r\n\r\nI was expecting to see something more like:\r\n```\r\nfunction invoke(script, parameters) {\r\n    if (parameters) {\r\n        script.call(parameters[\"this\"], parameters);\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\nBut the presence of \"result\" specifically makes me think that \"invoke\" has been turned into a special case for use with Ask, ShowMenu, etc … thus breaking any other cases where it might be used (such as useon, giveto, etc).\r\n\r\n\r\nBut… you said it's only \"this\" that is a problem. So what am I missing?",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Also, when examining either object, I use a script with <code>this</code> in each one, just to show that it will work when the attribute is not a script dictionary.</p>\n</blockquote>\n<p>I don't think it matters that it's a script dictionary. I think your implementation of <code>invoke</code> is broken.<br>\nExamining an object doesn't use invoke, it uses <code>runscriptattribute2</code>, which seems to be equivalent to Quest's <code>do</code>.</p>\n<p>You have:</p>\n<pre><code>function invoke(script, parameters) {\n    if (parameters) {\n        script.apply(null, [parameters[\"result\"]]);\n    } else {\n        script();\n    }\n}\n</code></pre>\n<p>This seems to be called by HandleGiveTo, so I'd expect it to be similar to Quest's <code>invoke</code>. But in this case, the parameters array contains two items: \"this\" and \"object\".  <code>invoke</code> seems to ignore any parameter that isn't named \"result\".</p>\n<p>If it's passing \"object\" but not \"this\", then I'm extremely confused.</p>\n<p>I was expecting to see something more like:</p>\n<pre><code>function invoke(script, parameters) {\n    if (parameters) {\n        script.call(parameters[\"this\"], parameters);\n    } else {\n        script();\n    }\n}\n</code></pre>\n<p>But the presence of \"result\" specifically makes me think that \"invoke\" has been turned into a special case for use with Ask, ShowMenu, etc … thus breaking any other cases where it might be used (such as useon, giveto, etc).</p>\n<p>But… you said it's only \"this\" that is a problem. So what am I missing?</p>\n\n",
      "PostDate": "2018-05-01T09:59:44.5964782Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "7ab1130e-e197-4585-9142-9e45900c1254",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "OK ... a script attribute gets compiled to a Javascript function which takes a plain object as its parameter, and has a few lines stuck on the beginning to extract local variables out of that object. This effectively means that at the time it's compiled, a script attribute needs to know all the attributes that can be passed to it.\r\n\r\nThe `runscriptattribute` functions pass on a plain object in this way.\r\n_However_, the function passed to ShowMenu expecting a single argument, the \"result\" variable.\r\n\r\nSo there's two different ways in which Quest scripts are converted to javascript functions, and they're not interoperable.\r\n\r\nIt's not just script dictionaries. The `invoke (script, parameters)` syntax discards all parameters not named \"result\".\r\n\r\nUnless I'm really missing something, this is going to be a horrible job to fix. But it's going to keep causing problems right through development. I can see *many* issues, which QuestJS will be unable to deal with because it has no way of knowing what the player expects. The only way I can think of is to make the conversion of Quest script into JS functions consistent. And the only way I can see to do that is some rather hairy use of `eval`, to inspect the keys in the parameters dictionary at runtime.\r\n\r\nI tried poking many different ways of doing this at compile time, and for all of them I found some edge case that I could reasonably expect a Quest user to do.\r\n\r\nI'm thinking now of an invoke that looks more like…\r\n```\r\nfunction invoke (script, parameters) {\r\n  if (parameters) {\r\n    var fn = script.toString();\r\n    if (fn.match(/^[\\s\\w]*\\(\\)\\s*\\{/)) {\r\n      fn.replace(/^[\\s\\w]*\\(\\)/, \"function (\"+parameters.keys().join(\",\")+\")\");\r\n      eval(\"(\"+fn+\")\")(parameters.values());\r\n    } else {\r\n      // It's a proper JS function that's expecting arguments\r\n      script.call(parameters[\"this\"] || null, parameters);\r\n    }\r\n  } else {\r\n    script();\r\n  }\r\n}\r\n```\r\n\r\nUgly, but it should work with all code that currently works in Quest.\r\n(note - this will behave oddly with QuestJS ShowMenu at present; because the compiler currently handles the conversion of a script to JS differently if it's the script argument to ShowMenu)",
      "EditableFormat": "markdown",
      "HTML": "<p>OK ... a script attribute gets compiled to a Javascript function which takes a plain object as its parameter, and has a few lines stuck on the beginning to extract local variables out of that object. This effectively means that at the time it's compiled, a script attribute needs to know all the attributes that can be passed to it.</p>\n<p>The <code>runscriptattribute</code> functions pass on a plain object in this way.<br>\n<em>However</em>, the function passed to ShowMenu expecting a single argument, the \"result\" variable.</p>\n<p>So there's two different ways in which Quest scripts are converted to javascript functions, and they're not interoperable.</p>\n<p>It's not just script dictionaries. The <code>invoke (script, parameters)</code> syntax discards all parameters not named \"result\".</p>\n<p>Unless I'm really missing something, this is going to be a horrible job to fix. But it's going to keep causing problems right through development. I can see <em>many</em> issues, which QuestJS will be unable to deal with because it has no way of knowing what the player expects. The only way I can think of is to make the conversion of Quest script into JS functions consistent. And the only way I can see to do that is some rather hairy use of <code>eval</code>, to inspect the keys in the parameters dictionary at runtime.</p>\n<p>I tried poking many different ways of doing this at compile time, and for all of them I found some edge case that I could reasonably expect a Quest user to do.</p>\n<p>I'm thinking now of an invoke that looks more like…</p>\n<pre><code>function invoke (script, parameters) {\n  if (parameters) {\n    var fn = script.toString();\n    if (fn.match(/^[\\s\\w]*\\(\\)\\s*\\{/)) {\n      fn.replace(/^[\\s\\w]*\\(\\)/, \"function (\"+parameters.keys().join(\",\")+\")\");\n      eval(\"(\"+fn+\")\")(parameters.values());\n    } else {\n      // It's a proper JS function that's expecting arguments\n      script.call(parameters[\"this\"] || null, parameters);\n    }\n  } else {\n    script();\n  }\n}\n</code></pre>\n<p>Ugly, but it should work with all code that currently works in Quest.<br>\n(note - this will behave oddly with QuestJS ShowMenu at present; because the compiler currently handles the conversion of a script to JS differently if it's the script argument to ShowMenu)</p>\n\n",
      "PostDate": "2018-05-01T11:39:57.1940624Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2956f4a0-518c-4c8f-b8dc-ef0035ed88a4",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```TypeError: parameters.keys is not a function```\r\n\r\n---\r\nIf I can get that to work, I think I can handle ShowMenu (maybe).\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p><code>TypeError: parameters.keys is not a function</code></p>\n<hr>\n<p>If I can get that to work, I think I can handle ShowMenu (maybe).</p>\n\n",
      "PostDate": "2018-05-01T12:05:26.6740053Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "474a4a94-181c-48a2-98ac-718316470030",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh, I was being careless there trying to get my thoughts across. I assumed that the dictionary parameters was a plain object (which is the JS structure closest to a Quest dictionary). In which case `keys()` and `values()` will return arrays of keys and values respectively.\r\n\r\nMy version of invoke converts a JS function back to its scope, uses a regexp replace to change `function () {` to `function (object1, object2) {` based on the keys in the parameters dictionary, evals that function, and then calls the returned function with the values of the parameters object.\r\n\r\nWait... one silly error. \r\n`eval(\"(\"+fn+\")\")(parameters.values());` should be `eval(\"(\"+fn+\")\").apply(null, parameters.values());`\r\n\r\nBut you need to mess about a little to make 'this' work.\r\n```\r\nfunction invoke (script, parameters) {\r\n  if (parameters) {\r\n    var fn = script.toString();\r\n    var call_this = null;\r\n    if (parameters[\"this\"]) {\r\n      call_this = parameters[\"this\"];\r\n      delete parameters[\"this\"];\r\n    }\r\n    if (fn.match(/^[\\s\\w]*\\(\\)\\s*\\{/)) {\r\n      fn.replace(/^[\\s\\w]*\\(\\)/, \"function (\"+parameters.keys().join(\",\")+\")\");\r\n      eval(\"(\"+fn+\")\").apply(call_this, parameters.values());\r\n    } else {\r\n      // It's a proper JS function that's expecting arguments\r\n      script.call(call_this, parameters);\r\n    }\r\n  } else {\r\n    script();\r\n  }\r\n}\r\n```\r\n(still needs tweaking to handle parameters properly. Maybe looping over it, if keys() and values() aren't working.\r\n\r\n\r\nOne thing I notice with the existing code is that:\r\n```\r\nShowMenu ( ...other arguments....) {\r\n  msg (\"You chose \"+result)\r\n}\r\n```\r\nwill be turned into:\r\n```\r\nShowMenu (blah blah blah, function (result) {\r\n  msg(result);\r\n});\r\n```\r\n\r\nBut\r\n```\r\ncallback => {\r\n  msg (result)\r\n}\r\nShowMenu (arguments, callback)\r\n```\r\nwill compile as (as far as I can tell)\r\n```\r\nvar callback = function () {\r\n  msg(result);\r\n}\r\nShowMenu (blah blah blah, callback);\r\n```\r\nWhich will not work, because 'result' is undefined within the function.\r\n\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh, I was being careless there trying to get my thoughts across. I assumed that the dictionary parameters was a plain object (which is the JS structure closest to a Quest dictionary). In which case <code>keys()</code> and <code>values()</code> will return arrays of keys and values respectively.</p>\n<p>My version of invoke converts a JS function back to its scope, uses a regexp replace to change <code>function () {</code> to <code>function (object1, object2) {</code> based on the keys in the parameters dictionary, evals that function, and then calls the returned function with the values of the parameters object.</p>\n<p>Wait... one silly error.<br>\n<code>eval(\"(\"+fn+\")\")(parameters.values());</code> should be <code>eval(\"(\"+fn+\")\").apply(null, parameters.values());</code></p>\n<p>But you need to mess about a little to make 'this' work.</p>\n<pre><code>function invoke (script, parameters) {\n  if (parameters) {\n    var fn = script.toString();\n    var call_this = null;\n    if (parameters[\"this\"]) {\n      call_this = parameters[\"this\"];\n      delete parameters[\"this\"];\n    }\n    if (fn.match(/^[\\s\\w]*\\(\\)\\s*\\{/)) {\n      fn.replace(/^[\\s\\w]*\\(\\)/, \"function (\"+parameters.keys().join(\",\")+\")\");\n      eval(\"(\"+fn+\")\").apply(call_this, parameters.values());\n    } else {\n      // It's a proper JS function that's expecting arguments\n      script.call(call_this, parameters);\n    }\n  } else {\n    script();\n  }\n}\n</code></pre>\n<p>(still needs tweaking to handle parameters properly. Maybe looping over it, if keys() and values() aren't working.</p>\n<p>One thing I notice with the existing code is that:</p>\n<pre><code>ShowMenu ( ...other arguments....) {\n  msg (\"You chose \"+result)\n}\n</code></pre>\n<p>will be turned into:</p>\n<pre><code>ShowMenu (blah blah blah, function (result) {\n  msg(result);\n});\n</code></pre>\n<p>But</p>\n<pre><code>callback =&gt; {\n  msg (result)\n}\nShowMenu (arguments, callback)\n</code></pre>\n<p>will compile as (as far as I can tell)</p>\n<pre><code>var callback = function () {\n  msg(result);\n}\nShowMenu (blah blah blah, callback);\n</code></pre>\n<p>Which will not work, because 'result' is undefined within the function.</p>\n\n",
      "PostDate": "2018-05-01T13:55:10.9615645Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "82e6c2e3-430a-48a4-9c31-190d3f372aa3",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Yeah... This stuff is crazy, huh, mrangel?  (Perhaps that's why Alex never completed it!)",
      "EditableFormat": "markdown",
      "HTML": "<p>Yeah... This stuff is crazy, huh, mrangel?  (Perhaps that's why Alex never completed it!)</p>\n\n",
      "PostDate": "2018-05-01T13:58:17.5532606Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "880b8b23-197d-4667-aef9-efcc22af4741",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I think this may be important code:\r\n\r\n<details>\r\n\r\n```\r\n            public override void Save(GameWriter writer, Element element, string attribute, object value, bool isFinal)\r\n            {\r\n                IScript script = (IScript)value;\r\n                string savedScript = script.Save(new Context());\r\n                if (savedScript.Trim().Length > 0)\r\n                {\r\n                    // TO DO: Will need to extract variables for parameters to a \"useanything\" script in the same way\r\n\r\n                    if (element.Type == ObjectType.Command)\r\n                    {\r\n                        List<string> variables = GetCommandPatternVariableNames(element);\r\n                        string commandVariables = string.Empty;\r\n\r\n                        foreach (string variable in variables)\r\n                        {\r\n                            commandVariables += string.Format(\"var {0} = parameters['{0}'];\\n\", variable);\r\n                        }\r\n\r\n                        savedScript = commandVariables + savedScript;\r\n                        base.WriteAttribute(writer, element, attribute, string.Format(\"function(parameters) {{ {0} }}\", savedScript), isFinal);\r\n                    }\r\n                    else\r\n                    {\r\n                        string parameters = string.Empty;\r\n                        if (attribute.StartsWith(\"changed\"))\r\n                        {\r\n                            parameters = \"oldvalue\";\r\n                        }\r\n                        base.WriteAttribute(writer, element, attribute, string.Format(\"function({1}) {{ {0} }}\", savedScript, parameters), isFinal);\r\n                    }\r\n                }\r\n            }\r\n```\r\n\r\n---\r\nThis maybe even more so:\r\n\r\n```\r\n        private class ScriptDictionarySaver : DictionarySaverBase<IScript>\r\n        {\r\n            public override Type AppliesTo\r\n            {\r\n                get { return typeof(QuestDictionary<IScript>); }\r\n            }\r\n\r\n            protected override string ValueSaver(IScript value)\r\n            {\r\n                return string.Format(\"function() {{ {0} }}\", value == null ? string.Empty : value.Save(new Context()));\r\n            }\r\n        }\r\n\r\n        private class ObjectReferenceSaver : FieldSaverBase\r\n        {\r\n            public override Type AppliesTo\r\n            {\r\n                get { return typeof(Element); }\r\n            }\r\n\r\n            public override void Save(GameWriter writer, Element element, string attribute, object value, bool isFinal)\r\n            {\r\n                Element reference = (Element)value;\r\n                if (writer.IsElementWritten(reference))\r\n                {\r\n                    base.WriteAttribute(writer, element, attribute, ((Element)value).MetaFields[MetaFieldDefinitions.MappedName], isFinal);\r\n                }\r\n                else\r\n                {\r\n                    writer.AddPostElementScript(element, string.Format(\"objectReferences.push([\\\"{0}\\\", \\\"{1}\\\", \\\"{2}\\\"]);\",\r\n                        element.MetaFields[MetaFieldDefinitions.MappedName],\r\n                        attribute,\r\n                        reference.MetaFields[MetaFieldDefinitions.MappedName]));\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\n</details>\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I think this may be important code:</p>\n<details>\n<pre><code>            public override void Save(GameWriter writer, Element element, string attribute, object value, bool isFinal)\n            {\n                IScript script = (IScript)value;\n                string savedScript = script.Save(new Context());\n                if (savedScript.Trim().Length &gt; 0)\n                {\n                    // TO DO: Will need to extract variables for parameters to a \"useanything\" script in the same way\n\n                    if (element.Type == ObjectType.Command)\n                    {\n                        List&lt;string&gt; variables = GetCommandPatternVariableNames(element);\n                        string commandVariables = string.Empty;\n\n                        foreach (string variable in variables)\n                        {\n                            commandVariables += string.Format(\"var {0} = parameters['{0}'];\\n\", variable);\n                        }\n\n                        savedScript = commandVariables + savedScript;\n                        base.WriteAttribute(writer, element, attribute, string.Format(\"function(parameters) {{ {0} }}\", savedScript), isFinal);\n                    }\n                    else\n                    {\n                        string parameters = string.Empty;\n                        if (attribute.StartsWith(\"changed\"))\n                        {\n                            parameters = \"oldvalue\";\n                        }\n                        base.WriteAttribute(writer, element, attribute, string.Format(\"function({1}) {{ {0} }}\", savedScript, parameters), isFinal);\n                    }\n                }\n            }\n</code></pre>\n<hr>\n<p>This maybe even more so:</p>\n<pre><code>        private class ScriptDictionarySaver : DictionarySaverBase&lt;IScript&gt;\n        {\n            public override Type AppliesTo\n            {\n                get { return typeof(QuestDictionary&lt;IScript&gt;); }\n            }\n\n            protected override string ValueSaver(IScript value)\n            {\n                return string.Format(\"function() {{ {0} }}\", value == null ? string.Empty : value.Save(new Context()));\n            }\n        }\n\n        private class ObjectReferenceSaver : FieldSaverBase\n        {\n            public override Type AppliesTo\n            {\n                get { return typeof(Element); }\n            }\n\n            public override void Save(GameWriter writer, Element element, string attribute, object value, bool isFinal)\n            {\n                Element reference = (Element)value;\n                if (writer.IsElementWritten(reference))\n                {\n                    base.WriteAttribute(writer, element, attribute, ((Element)value).MetaFields[MetaFieldDefinitions.MappedName], isFinal);\n                }\n                else\n                {\n                    writer.AddPostElementScript(element, string.Format(\"objectReferences.push([\\\"{0}\\\", \\\"{1}\\\", \\\"{2}\\\"]);\",\n                        element.MetaFields[MetaFieldDefinitions.MappedName],\n                        attribute,\n                        reference.MetaFields[MetaFieldDefinitions.MappedName]));\n                }\n            }\n        }\n</code></pre>\n</details>\n\n",
      "PostDate": "2018-05-04T00:22:41.0183405Z",
      "LastEditDate": "2018-05-05T01:58:06.0681315Z",
      "link": null
    },
    {
      "PostId": "53270203-50dc-480b-be8c-80159e6bb732",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ugh ... I thought it might be doing that, but really hoped it wasn't.\r\n\r\nSo, the \"do\" and \"invoke\" methods only work with specific parameter names; and the names that work with each are different. It's a whole bunch of special cases stacked on top of each other; and worse, evaluated at a point where the full information isn't available.\r\n\r\nThanks, I know where I need to be looking now. I think I can see my way around that, but working in an unfamiliar language, so... don't hold your breath. I think it should be determining what parameters a script expects based on the script (referencing local variables) rather than the attribute name or element type.",
      "EditableFormat": "markdown",
      "HTML": "<p>Ugh ... I thought it might be doing that, but really hoped it wasn't.</p>\n<p>So, the \"do\" and \"invoke\" methods only work with specific parameter names; and the names that work with each are different. It's a whole bunch of special cases stacked on top of each other; and worse, evaluated at a point where the full information isn't available.</p>\n<p>Thanks, I know where I need to be looking now. I think I can see my way around that, but working in an unfamiliar language, so... don't hold your breath. I think it should be determining what parameters a script expects based on the script (referencing local variables) rather than the attribute name or element type.</p>\n\n",
      "PostDate": "2018-05-04T01:18:57.5379233Z",
      "LastEditDate": "2018-05-04T01:40:20.9342388Z",
      "link": null
    },
    {
      "PostId": "f8e7123f-cd88-4c79-8639-7188337a89ee",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">  I think it should be determining what parameters a script expects based on the script (referencing local variables) rather than the attribute name or element type.\r\n\r\nThis is what I was thinking too.  \r\n\r\nAlex uses this to do it in the command's scripts (which explains why \"this\" works in normal script attributes):\r\n\r\n```\r\nList<string> variables = GetCommandPatternVariableNames(element);\r\n```\r\n\r\nI'm going to try adding this into the script dictionary bit.\r\n\r\nWhat is there?  ask, tell, use, give...  I'm missing at least one...\r\n\r\n---\r\nAlso, now that the text processor uses a dictionary, games made with the recent build of Quest don't work at all after the conversion.\r\n\r\n---\r\nAnother ISSUE (all-caps) with QuestJS is how it will deal with errors in the game's code in the .quest file.  Let's say you forget to add a closing quotation mark... Yeah.  EVERYTHING that's written to the game.js file after that point is messed up.  (I assume this is due to the way JS files are read by the browser.)\r\n\r\n...and the lists in the panes and the functions which go along with then are different than what's in Quest.\r\n\r\n...and anything added to playercore.js or desktopplayer.js throws an error.  Quest depends on those files being global (or in Quest's directory, if that's the wrong terminology), so they aren't copied into the .quest file.\r\n\r\n---\r\nSo...\r\n\r\nFirst, I thought we could fix QuestJS, but now I'm thinking that even if we do get it working, we'll just have to keep applying patches every time something changes in Quest.  \r\n\r\nMaybe Alex was right to abandon the project.  Heck, I think using NodeJS to parse the .aslx then converting that would be a better option.  This would be cross-platform, and it would work pretty much just like QuestJS, except it would ACTUALLY work.\r\n\r\nI had a half-fast prototype halfway written that I had packaged in Electron, but Electron apps are like 100MB when your source files are less than 100KB, so now I'm thinking maybe GTK might be the way to go.  As long as it's something that can handle embedded Chromium so we can use the same GUI Quest has now in the end.  (I figure once we have it where it will actually convert a game it would be easy to just make Quest write to websites, which the GTK Quest would run in your browser.)",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I think it should be determining what parameters a script expects based on the script (referencing local variables) rather than the attribute name or element type.</p>\n</blockquote>\n<p>This is what I was thinking too.</p>\n<p>Alex uses this to do it in the command's scripts (which explains why \"this\" works in normal script attributes):</p>\n<pre><code>List&lt;string&gt; variables = GetCommandPatternVariableNames(element);\n</code></pre>\n<p>I'm going to try adding this into the script dictionary bit.</p>\n<p>What is there?  ask, tell, use, give...  I'm missing at least one...</p>\n<hr>\n<p>Also, now that the text processor uses a dictionary, games made with the recent build of Quest don't work at all after the conversion.</p>\n<hr>\n<p>Another ISSUE (all-caps) with QuestJS is how it will deal with errors in the game's code in the .quest file.  Let's say you forget to add a closing quotation mark... Yeah.  EVERYTHING that's written to the game.js file after that point is messed up.  (I assume this is due to the way JS files are read by the browser.)</p>\n<p>...and the lists in the panes and the functions which go along with then are different than what's in Quest.</p>\n<p>...and anything added to playercore.js or desktopplayer.js throws an error.  Quest depends on those files being global (or in Quest's directory, if that's the wrong terminology), so they aren't copied into the .quest file.</p>\n<hr>\n<p>So...</p>\n<p>First, I thought we could fix QuestJS, but now I'm thinking that even if we do get it working, we'll just have to keep applying patches every time something changes in Quest.</p>\n<p>Maybe Alex was right to abandon the project.  Heck, I think using NodeJS to parse the .aslx then converting that would be a better option.  This would be cross-platform, and it would work pretty much just like QuestJS, except it would ACTUALLY work.</p>\n<p>I had a half-fast prototype halfway written that I had packaged in Electron, but Electron apps are like 100MB when your source files are less than 100KB, so now I'm thinking maybe GTK might be the way to go.  As long as it's something that can handle embedded Chromium so we can use the same GUI Quest has now in the end.  (I figure once we have it where it will actually convert a game it would be easy to just make Quest write to websites, which the GTK Quest would run in your browser.)</p>\n\n",
      "PostDate": "2018-05-04T02:25:58.9145712Z",
      "LastEditDate": "2018-05-04T02:43:59.407323Z",
      "link": null
    },
    {
      "PostId": "1e0c6871-a436-4970-b02c-7568d4cf758f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">  (which explains why \"this\" works in normal script attributes):\r\n\r\n'this' is a special case, and isn't passed as a parameter. That line's responsible for the other parameters that work, though.\r\n\r\nQuest's \"do\" command converts into a JS function which sets the context correctly, so you can pass 'this'. It will also pass other parameters correctly, _if_ the script attribute is on a Command element and the parameters in the dictionary are the same as the named expressions in the command's pattern.\r\n\r\nQuest's \"invoke\" command converts into a JS function which passes the single parameter \"results\" and discards the rest. If the script was originally defined using the `variable => {` syntax it won't be expecting any parameters, so won't even receive \"result\". If the script was created on the end of an Ask/ShowMenu/etc line, it will accept \"result\". If it was created as a script attribute on a command script, it will be expecting a dictionary of parameters rather than a single result.\r\n\r\nSo… if your params dictionary contains the key \"result\", then `invoke (lookat.script, params)` will give an error complaining that parameters is not a dictionary. That could be very confusing for any users who attempt it.\r\n\r\nI'm still running the .cs code through in my head, jumping around between the different files to work out what it will do, as I can't run it on my system.\r\nWhat I'm currently looking for is a piece of code which adds `var` statements to the JS. Unfortunately, flaky net connection currently prevents me from checking out the project. Looking at your converted game, it seems that \"var\" is inserted before the name of each local variable before it is first assigned. I'm hoping this is generated by the code that _should_ be in the `Context` object, in which case we could build a list of local variables that are referenced anywhere in the script, and then use that list to load them all from the parameters dictionary at the start.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>(which explains why \"this\" works in normal script attributes):</p>\n</blockquote>\n<p>'this' is a special case, and isn't passed as a parameter. That line's responsible for the other parameters that work, though.</p>\n<p>Quest's \"do\" command converts into a JS function which sets the context correctly, so you can pass 'this'. It will also pass other parameters correctly, <em>if</em> the script attribute is on a Command element and the parameters in the dictionary are the same as the named expressions in the command's pattern.</p>\n<p>Quest's \"invoke\" command converts into a JS function which passes the single parameter \"results\" and discards the rest. If the script was originally defined using the <code>variable =&gt; {</code> syntax it won't be expecting any parameters, so won't even receive \"result\". If the script was created on the end of an Ask/ShowMenu/etc line, it will accept \"result\". If it was created as a script attribute on a command script, it will be expecting a dictionary of parameters rather than a single result.</p>\n<p>So… if your params dictionary contains the key \"result\", then <code>invoke (lookat.script, params)</code> will give an error complaining that parameters is not a dictionary. That could be very confusing for any users who attempt it.</p>\n<p>I'm still running the .cs code through in my head, jumping around between the different files to work out what it will do, as I can't run it on my system.<br>\nWhat I'm currently looking for is a piece of code which adds <code>var</code> statements to the JS. Unfortunately, flaky net connection currently prevents me from checking out the project. Looking at your converted game, it seems that \"var\" is inserted before the name of each local variable before it is first assigned. I'm hoping this is generated by the code that <em>should</em> be in the <code>Context</code> object, in which case we could build a list of local variables that are referenced anywhere in the script, and then use that list to load them all from the parameters dictionary at the start.</p>\n\n",
      "PostDate": "2018-05-04T08:45:01.2058093Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c487d0df-9ef7-4788-80e1-fc21d28363be",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(sorry, idiotic mistake in the JS quoted above;\r\n\r\n`parameters.keys()` should be `Object.keys(parameters)`. And the same for `values()`.\r\n\r\nIf I can make sure there's no bugs in it, this alternate form of `invoke` (and a corresponding change to the two `do` functions) should make the code above (the special case for ShowMenu, the special case for commands, and all the cases that don't actually work) redundant. It's a *lot* easier to do this with JS code that knows what variables it has, rather than C# code that's pretty much guessing what variables the JS code might have.",
      "EditableFormat": "markdown",
      "HTML": "<p>(sorry, idiotic mistake in the JS quoted above;</p>\n<p><code>parameters.keys()</code> should be <code>Object.keys(parameters)</code>. And the same for <code>values()</code>.</p>\n<p>If I can make sure there's no bugs in it, this alternate form of <code>invoke</code> (and a corresponding change to the two <code>do</code> functions) should make the code above (the special case for ShowMenu, the special case for commands, and all the cases that don't actually work) redundant. It's a <em>lot</em> easier to do this with JS code that knows what variables it has, rather than C# code that's pretty much guessing what variables the JS code might have.</p>\n\n",
      "PostDate": "2018-05-04T16:46:27.5577225Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "877ebd30-8ab1-4bdd-b439-48f1a137ce83",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> It's a lot easier to do this with JS code that knows what variables it has, rather than C# code that's pretty much guessing what variables the JS code might have.\r\n\r\nDoes the compiler need know to add the parameter to the script?\r\n\r\nRight now, it prints this:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(){ MoveObject(this,Ralph);}}\r\n```\r\n\r\nDoesn't it need to print this?\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(this){ MoveObject(this,Ralph);}}\r\n```\r\n\r\n...and if so, wouldn't ```this``` as a variable cause JS to throw an error, without running the script?\r\n\r\nI don't know.  \"this\" is confusing me when trying to think about it from two perspectives.  I'm just throwing theories out there.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>It's a lot easier to do this with JS code that knows what variables it has, rather than C# code that's pretty much guessing what variables the JS code might have.</p>\n</blockquote>\n<p>Does the compiler need know to add the parameter to the script?</p>\n<p>Right now, it prints this:</p>\n<pre><code>\"giveto\": {\"Ralph\": function(){ MoveObject(this,Ralph);}}\n</code></pre>\n<p>Doesn't it need to print this?</p>\n<pre><code>\"giveto\": {\"Ralph\": function(this){ MoveObject(this,Ralph);}}\n</code></pre>\n<p>...and if so, wouldn't <code>this</code> as a variable cause JS to throw an error, without running the script?</p>\n<p>I don't know.  \"this\" is confusing me when trying to think about it from two perspectives.  I'm just throwing theories out there.</p>\n\n",
      "PostDate": "2018-05-04T22:49:24.6553443Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "d79d2766-568a-4528-93fa-7bcfc03ca5a9",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I can change ```invoke()``` to this:\r\n\r\n```\r\nfunction invoke(script, parameters) {\r\n\tconsole.log(script.toString());\r\n    if (parameters) {\r\n        if(parameters[\"result\"]){\r\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\r\n\t\t}else if(parameters[\"this\"]){\r\n\t\t\tscript.apply(null, [parameters[\"this\"]]);\r\n\t\t}\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\n\r\n\r\n...and change the ```giveto``` script to this:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(result) { console.log (\"Running the 'giveto' script':\")\r\nOutputText (\"You give \"+result.article+\" to Ralph.\");\r\nconsole.log (result)\r\nMoveObject (result, _obj364); } },\r\n```\r\n\r\n---\r\nI think every ```this``` in the script will have to be changed to something else for this to work.\r\n\r\nWhen I change the code to this:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(this) \r\n```\r\n\r\nI get this error:  ```SyntaxError: missing formal parameter```\r\n\r\n\r\n---\r\nChanging it to this:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(result) { var this = result; \r\n```\r\n\r\nthrows this: ```SyntaxError: missing variable name```.\r\n\r\n---\r\nAnd, just to be thorough:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function(result) { this = result;\r\n```\r\n\r\nthrows this:  ```ReferenceError: invalid assignment left-hand side```.\r\n\r\n\r\n---\r\nSo, we'd have to use replace() on every instance of \"this\" which was a variable, but how could we tell that from dialog?\r\n\r\n```\r\nmsg (\"You give \" + this.article + \" to Ralph.<br/><br/>\\\"Thanks!\\\"  Ralph grins from ear to ear.  \\\"I've been looking all over for this!!!\\\"\")\r\nMoveObject(this, Ralph)\r\n```\r\n\r\n---\r\nThis is what makes me think this is a lost cause as far as ANYONE AND EVERYONE being able to convert a game with it.  It seems that you'd have to know to not use ```this```, which requires some dictionary knowledge when dealing with clones.\r\n\r\n---\r\nI'd still like to get it working besides ```this```, though.  And I think I have learned how from your suggestions. \r\n\r\nMore on this as it comes in.",
      "EditableFormat": "markdown",
      "HTML": "<p>I can change <code>invoke()</code> to this:</p>\n<pre><code>function invoke(script, parameters) {\n\tconsole.log(script.toString());\n    if (parameters) {\n        if(parameters[\"result\"]){\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\n\t\t}else if(parameters[\"this\"]){\n\t\t\tscript.apply(null, [parameters[\"this\"]]);\n\t\t}\n    } else {\n        script();\n    }\n}\n</code></pre>\n<p>...and change the <code>giveto</code> script to this:</p>\n<pre><code>\"giveto\": {\"Ralph\": function(result) { console.log (\"Running the 'giveto' script':\")\nOutputText (\"You give \"+result.article+\" to Ralph.\");\nconsole.log (result)\nMoveObject (result, _obj364); } },\n</code></pre>\n<hr>\n<p>I think every <code>this</code> in the script will have to be changed to something else for this to work.</p>\n<p>When I change the code to this:</p>\n<pre><code>\"giveto\": {\"Ralph\": function(this) \n</code></pre>\n<p>I get this error:  <code>SyntaxError: missing formal parameter</code></p>\n<hr>\n<p>Changing it to this:</p>\n<pre><code>\"giveto\": {\"Ralph\": function(result) { var this = result; \n</code></pre>\n<p>throws this: <code>SyntaxError: missing variable name</code>.</p>\n<hr>\n<p>And, just to be thorough:</p>\n<pre><code>\"giveto\": {\"Ralph\": function(result) { this = result;\n</code></pre>\n<p>throws this:  <code>ReferenceError: invalid assignment left-hand side</code>.</p>\n<hr>\n<p>So, we'd have to use replace() on every instance of \"this\" which was a variable, but how could we tell that from dialog?</p>\n<pre><code>msg (\"You give \" + this.article + \" to Ralph.&lt;br/&gt;&lt;br/&gt;\\\"Thanks!\\\"  Ralph grins from ear to ear.  \\\"I've been looking all over for this!!!\\\"\")\nMoveObject(this, Ralph)\n</code></pre>\n<hr>\n<p>This is what makes me think this is a lost cause as far as ANYONE AND EVERYONE being able to convert a game with it.  It seems that you'd have to know to not use <code>this</code>, which requires some dictionary knowledge when dealing with clones.</p>\n<hr>\n<p>I'd still like to get it working besides <code>this</code>, though.  And I think I have learned how from your suggestions.</p>\n<p>More on this as it comes in.</p>\n\n",
      "PostDate": "2018-05-04T23:07:05.8577138Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4d3f4293-a48c-4056-8980-2619d7f8711c",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Stop trying to treat `this` as a variable.\r\n\r\nIn your \"invoke\" script, you'll see that the first parameter to `script.apply()` is `null`.\r\nIf you specify a non-null variable there (such as `parameters[\"this\"]`), you will be able to use `this` within the function and it will work properly.\r\n\r\nSo your invoke function would be:\r\n```\r\nfunction invoke(script, parameters) {\r\n\tconsole.log(script.toString());\r\n    if (parameters) {\r\n        if(parameters[\"result\"]){\r\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\r\n\t\t} else if(parameters[\"this\"]){\r\n\t\t\tscript.apply(parameters[\"this\"], [parameters]);\r\n\t\t}\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Stop trying to treat <code>this</code> as a variable.</p>\n<p>In your \"invoke\" script, you'll see that the first parameter to <code>script.apply()</code> is <code>null</code>.<br>\nIf you specify a non-null variable there (such as <code>parameters[\"this\"]</code>), you will be able to use <code>this</code> within the function and it will work properly.</p>\n<p>So your invoke function would be:</p>\n<pre><code>function invoke(script, parameters) {\n\tconsole.log(script.toString());\n    if (parameters) {\n        if(parameters[\"result\"]){\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\n\t\t} else if(parameters[\"this\"]){\n\t\t\tscript.apply(parameters[\"this\"], [parameters]);\n\t\t}\n    } else {\n        script();\n    }\n}\n</code></pre>\n\n",
      "PostDate": "2018-05-05T00:01:29.6646713Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "91723dac-c5a3-4f7f-adee-7e30f75e6e59",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Does the compiler need know to add the parameter to the script?\r\n\r\nNo. But that's what it's currently trying to do, and failing.\r\n\r\n>Right now, it prints this:\r\n`\"giveto\": {\"Ralph\": function(){ MoveObject(this,Ralph);}}`\r\nDoesn't it need to print this?\r\n`\"giveto\": {\"Ralph\": function(this){ MoveObject(this,Ralph);}}`\r\n...and if so, wouldn't this as a variable cause JS to throw an error, without running the script?\r\n\r\nYes. What we want is for it to do that for every parameter *except* for `this`.\r\n\r\nBut the compiler cannot do that correctly. There is no way for it to determine what parameters will be passed to that functionAny attempt to make it work will result in more edge cases, and more specific variables that don't work. By trying to make the compiler generate those lines, you are adding a lot of complexity to handle a lot of different cases.\r\n\r\nYou could find the function which adds the `var` keyword to the function's local variables, get it to record a list of them in an internal data structure, and then use that list to determine the parameters for the generated JS function. That would be a lot better, but it would also be a lot of added complexity.\r\n\r\nThat's why I suggested modifying `invoke` so that it modifies the function *when the code is running*, so that the function accepts the parameters that were actually passed. This will generate error messages in the exact same circumstances Quest does. (assuming that the JS version of `IsDefined` works correctly)\r\n\r\nSorry, got to dash, RL calls.\r\nYou probably gather by now that I'm not very good at explaining what I mean in English.",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Does the compiler need know to add the parameter to the script?</p>\n</blockquote>\n<p>No. But that's what it's currently trying to do, and failing.</p>\n<blockquote>\n<p>Right now, it prints this:<br>\n<code>\"giveto\": {\"Ralph\": function(){ MoveObject(this,Ralph);}}</code><br>\nDoesn't it need to print this?<br>\n<code>\"giveto\": {\"Ralph\": function(this){ MoveObject(this,Ralph);}}</code><br>\n...and if so, wouldn't this as a variable cause JS to throw an error, without running the script?</p>\n</blockquote>\n<p>Yes. What we want is for it to do that for every parameter <em>except</em> for <code>this</code>.</p>\n<p>But the compiler cannot do that correctly. There is no way for it to determine what parameters will be passed to that functionAny attempt to make it work will result in more edge cases, and more specific variables that don't work. By trying to make the compiler generate those lines, you are adding a lot of complexity to handle a lot of different cases.</p>\n<p>You could find the function which adds the <code>var</code> keyword to the function's local variables, get it to record a list of them in an internal data structure, and then use that list to determine the parameters for the generated JS function. That would be a lot better, but it would also be a lot of added complexity.</p>\n<p>That's why I suggested modifying <code>invoke</code> so that it modifies the function <em>when the code is running</em>, so that the function accepts the parameters that were actually passed. This will generate error messages in the exact same circumstances Quest does. (assuming that the JS version of <code>IsDefined</code> works correctly)</p>\n<p>Sorry, got to dash, RL calls.<br>\nYou probably gather by now that I'm not very good at explaining what I mean in English.</p>\n\n",
      "PostDate": "2018-05-05T00:14:04.8651863Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "056506ee-7e8e-4bff-9c45-bbad2bf38570",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ha!\r\n\r\nYou got it!\r\n\r\nChanging only this fixed the giveto script!!!\r\n\r\n```\r\nfunction invoke(script, parameters) {\r\n\tconsole.log(script.toString());\r\n    if (parameters) {\r\n        if(parameters[\"result\"]){\r\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\r\n\t\t} else if(parameters[\"this\"]){\r\n\t\t\tscript.apply(parameters[\"this\"], [parameters]);\r\n\t\t}\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\n\r\n\r\n---\r\nThe \"giveto\" script, just like QuestJS printed it:\r\n\r\n```\r\n\"giveto\": {\"Ralph\": function() {console.log (\"Running the 'giveto' script':\")\r\nOutputText (\"You give \"+this.article+\" to Ralph.\");\r\nconsole.log (this)\r\nMoveObject (this, _obj364); } },\r\n```\r\n\r\n---\r\n...and I was thinking of ```this``` as a variable.\r\n\r\n...but I am ***much*** better now!",
      "EditableFormat": "markdown",
      "HTML": "<p>Ha!</p>\n<p>You got it!</p>\n<p>Changing only this fixed the giveto script!!!</p>\n<pre><code>function invoke(script, parameters) {\n\tconsole.log(script.toString());\n    if (parameters) {\n        if(parameters[\"result\"]){\n\t\t\tscript.apply(null, [parameters[\"result\"]]);\n\t\t} else if(parameters[\"this\"]){\n\t\t\tscript.apply(parameters[\"this\"], [parameters]);\n\t\t}\n    } else {\n        script();\n    }\n}\n</code></pre>\n<hr>\n<p>The \"giveto\" script, just like QuestJS printed it:</p>\n<pre><code>\"giveto\": {\"Ralph\": function() {console.log (\"Running the 'giveto' script':\")\nOutputText (\"You give \"+this.article+\" to Ralph.\");\nconsole.log (this)\nMoveObject (this, _obj364); } },\n</code></pre>\n<hr>\n<p>...and I was thinking of <code>this</code> as a variable.</p>\n<p>...but I am <strong><em>much</em></strong> better now!</p>\n\n",
      "PostDate": "2018-05-05T01:20:41.6124111Z",
      "LastEditDate": "2018-05-05T01:23:18.2237595Z",
      "link": null
    },
    {
      "PostId": "a1600f3a-fc98-4ecf-9082-241d1cf5049b",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You rock, mrangel!!!\r\n\r\n---\r\nHey, everybody!\r\n\r\nCheck out some of mrangel's books!!!\r\n\r\nhttps://www.amazon.com/Angel-Wedge/e/B00N5Q5XIK/ref=dp_byline_cont_ebooks_1",
      "EditableFormat": "markdown",
      "HTML": "<p>You rock, mrangel!!!</p>\n<hr>\n<p>Hey, everybody!</p>\n<p>Check out some of mrangel's books!!!</p>\n<p>https://www.amazon.com/Angel-Wedge/e/B00N5Q5XIK/ref=dp_byline_cont_ebooks_1</p>\n\n",
      "PostDate": "2018-05-05T03:21:13.8733278Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "25e8f196-dc99-473b-bd4b-d728adb97e85",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hrmm...\r\n\r\n```\r\n// line 4511\r\n\"textprocessorcommands\": {\"if \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_If (section, data)); }, \"either \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Either (section, data)); }, \"here \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Here (section, data)); }, \"nothere \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Here (section, data)); }, \"popup:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Popup (section, data)); }, \"i:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"b:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"s:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"u:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"colour:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"color:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"back:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"object:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Object (section, data)); }, \"command:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Command (section, data)); }, \"page:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Command (section, data)); }, \"exit:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Exit (section, data)); }, \"once:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Once (section, data)); }, \"notfirst:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_NotFirst (section, data)); }, \"random:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Random (section, data)); }, \"rndalt:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_RandomAlias (section, data)); }, \"img:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Img (section, data)); }, \"counter:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Counter (section, data)); }, \"select:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Select (section, data)); }, \"eval:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Eval (section, data)); }, \"=\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Eval (section, data)); } }\r\n};\r\n```\r\n\r\n---\r\nHere's the ```invoke()``` I'm testing in this game:\r\n\r\n```\r\n// begins at line 1997\r\nfunction invoke(script, parameters) {\r\n    console.log(script.toString());\r\n    if (parameters) {\r\n        if (parameters[\"result\"]) {\r\n\t\t\tconsole.log(\"result\");\r\n\t\t\tconsole.log(parameters);\r\n\t\t\tconsole.log(parameters[\"result\"]);\r\n            script.apply(null, [parameters[\"result\"]]);\r\n        } else if (parameters[\"this\"]) {\r\n\t\t\tconsole.log(\"this\");\r\n\t\t\tconsole.log(parameters);\r\n\t\t\tconsole.log(parameters[\"this\"]);\r\n            script.apply(parameters[\"this\"], [parameters]);\r\n        } else if (parameters[\"section\"]) {\r\n\t\t\tconsole.log(\"section\");\r\n\t\t\tconsole.log(parameters);\r\n\t\t\tconsole.log(parameters[\"section\"]);\r\n            script.apply(parameters[\"section\"], [parameters]);\r\n        }\r\n\t\telse {\r\n\t\t\tconsole.log(\"else\");\r\n\t\t\tconsole.log(parameters);\r\n\t\t\tconsole.log(parameters[Object.keys(parameters)[0]]);\r\n            script.apply(parameters[Object.keys(parameters)[0]], [parameters]);\r\n        }\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\n\r\n\r\n---\r\nAnd:\r\n\r\n```\r\nfunction() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Object (section, data)); }\r\ngame.js:1981:5\r\nsection\r\ngame.js:1994:4\r\nObject { section: \"object:stick\", data: {…} }\r\ngame.js:1995:4\r\nobject:stick\r\n\r\nReferenceError: section is not defined[Learn More] game.js:3511:1381\r\n\tobject: file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:3511:1381\r\n\tinvoke file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:1997:13\r\n\tProcessTextCommand file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11281:1\r\n\tProcessTextSection file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11266:13\r\n\tProcessText file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11230:12\r\n\tOutputText file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11133:16\r\n\tShowRoomDescription file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10612:1\r\n\tOnEnterRoom/</</< file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10716:1\r\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\r\n\tOnEnterRoom/</< file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10695:1\r\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\r\n\tOnEnterRoom/< file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10692:1\r\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\r\n\tOnEnterRoom file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10689:1\r\n\tStartGame/< file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:13570:1\r\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\r\n\tStartGame file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:13566:1\r\n\tworldModelBeginGame file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:1562:5\r\n\tinit file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:131:9\r\n\tonBodyLoad file:///C:/Users/keega/Documents/qjs/580testtesttest/index.html:29:13\r\n\tonload file:///C:/Users/keega/Documents/qjs/580testtesttest/index.html:1:1\r\n\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Hrmm...</p>\n<pre><code>// line 4511\n\"textprocessorcommands\": {\"if \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_If (section, data)); }, \"either \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Either (section, data)); }, \"here \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Here (section, data)); }, \"nothere \": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Here (section, data)); }, \"popup:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Popup (section, data)); }, \"i:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"b:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"s:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"u:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Format (section, data)); }, \"colour:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"color:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"back:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Colour (section, data)); }, \"object:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Object (section, data)); }, \"command:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Command (section, data)); }, \"page:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Command (section, data)); }, \"exit:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Exit (section, data)); }, \"once:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Once (section, data)); }, \"notfirst:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_NotFirst (section, data)); }, \"random:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Random (section, data)); }, \"rndalt:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_RandomAlias (section, data)); }, \"img:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Img (section, data)); }, \"counter:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Counter (section, data)); }, \"select:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Select (section, data)); }, \"eval:\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Eval (section, data)); }, \"=\": function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Eval (section, data)); } }\n};\n</code></pre>\n<hr>\n<p>Here's the <code>invoke()</code> I'm testing in this game:</p>\n<pre><code>// begins at line 1997\nfunction invoke(script, parameters) {\n    console.log(script.toString());\n    if (parameters) {\n        if (parameters[\"result\"]) {\n\t\t\tconsole.log(\"result\");\n\t\t\tconsole.log(parameters);\n\t\t\tconsole.log(parameters[\"result\"]);\n            script.apply(null, [parameters[\"result\"]]);\n        } else if (parameters[\"this\"]) {\n\t\t\tconsole.log(\"this\");\n\t\t\tconsole.log(parameters);\n\t\t\tconsole.log(parameters[\"this\"]);\n            script.apply(parameters[\"this\"], [parameters]);\n        } else if (parameters[\"section\"]) {\n\t\t\tconsole.log(\"section\");\n\t\t\tconsole.log(parameters);\n\t\t\tconsole.log(parameters[\"section\"]);\n            script.apply(parameters[\"section\"], [parameters]);\n        }\n\t\telse {\n\t\t\tconsole.log(\"else\");\n\t\t\tconsole.log(parameters);\n\t\t\tconsole.log(parameters[Object.keys(parameters)[0]]);\n            script.apply(parameters[Object.keys(parameters)[0]], [parameters]);\n        }\n    } else {\n        script();\n    }\n}\n</code></pre>\n<hr>\n<p>And:</p>\n<pre><code>function() { set(_obj294, \"textprocessorcommandresult\", ProcessTextCommand_Object (section, data)); }\ngame.js:1981:5\nsection\ngame.js:1994:4\nObject { section: \"object:stick\", data: {…} }\ngame.js:1995:4\nobject:stick\n\nReferenceError: section is not defined[Learn More] game.js:3511:1381\n\tobject: file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:3511:1381\n\tinvoke file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:1997:13\n\tProcessTextCommand file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11281:1\n\tProcessTextSection file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11266:13\n\tProcessText file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11230:12\n\tOutputText file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:11133:16\n\tShowRoomDescription file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10612:1\n\tOnEnterRoom/&lt;/&lt;/&lt; file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10716:1\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\n\tOnEnterRoom/&lt;/&lt; file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10695:1\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\n\tOnEnterRoom/&lt; file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10692:1\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\n\tOnEnterRoom file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:10689:1\n\tStartGame/&lt; file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:13570:1\n\ton_ready file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:2423:9\n\tStartGame file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:13566:1\n\tworldModelBeginGame file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:1562:5\n\tinit file:///C:/Users/keega/Documents/qjs/580testtesttest/game.js:131:9\n\tonBodyLoad file:///C:/Users/keega/Documents/qjs/580testtesttest/index.html:29:13\n\tonload file:///C:/Users/keega/Documents/qjs/580testtesttest/index.html:1:1\n\n</code></pre>\n\n",
      "PostDate": "2018-05-05T15:54:33.24207Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "be5f602d-1e46-4b67-8aca-e87507c5a86a",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "KV: I'm not sure why you're doing that.\r\n\r\nI just wrote a big post, but under a lot of stress right now and it ended up sounding too condescending and argumentative, so I deleted that.\r\n\r\nCan you tell me what's wrong with my method, please?\r\nIt's an interesting enough problem trying to make it work; but we seem to be aiming for different goals.\r\n\r\nThis is what I got so far, off the top of my head. After debugging and fixing the inevitable typos, this should make `invoke` work exactly as it does in Quest (including giving errors in the same circumstances). Unlike my previous attempt, it should work around the existing \"special cases\" in QuestJS.\r\n```\r\nfunction invoke (script, parameters) {\r\n  if (parameters) {\r\n    var apply_this = null;\r\n    if (parameters[\"this\"]) {\r\n      apply_this = parameters[\"this\"];\r\n      delete parameters[\"this\"];\r\n    }\r\n\r\n    var parsed = script.toString().match(/^\\s*function \\((.*?)\\)\\s*\\{(.*)\\}\\s*$/);\r\n    if (!parsed) {\r\n      // FIXME: \"script\" parameter to invoke is not a script.\r\n      // How does QuestJS do error handling?\r\n    } elsif (parsed[2]) {\r\n      var formal_params = parsed[1];\r\n      if (formal_params) {\r\n        formal_params = formal_params.split(/\\s*,\\s*/);\r\n      } else {\r\n        formal_params = Object.keys(parameters);\r\n        script = eval(\"( function (\"+formal_params.join()+\") {\"+parsed[2]+\"\\n})\");\r\n      }\r\n      var actual_params = [];\r\n      $.each(actual_params, function (i, key) {\r\n        if ((key == \"parameters\") && !paramteres[\"parameters\"]) {\r\n          actual_params.push(parameters);\r\n        } else {\r\n          actual_params.push(parameters[key]);\r\n        }\r\n      });\r\n      script.apply(apply_this, actual_params);\r\n    }\r\n  } else {\r\n    // no parameters. Easy.\r\n    script();\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>KV: I'm not sure why you're doing that.</p>\n<p>I just wrote a big post, but under a lot of stress right now and it ended up sounding too condescending and argumentative, so I deleted that.</p>\n<p>Can you tell me what's wrong with my method, please?<br>\nIt's an interesting enough problem trying to make it work; but we seem to be aiming for different goals.</p>\n<p>This is what I got so far, off the top of my head. After debugging and fixing the inevitable typos, this should make <code>invoke</code> work exactly as it does in Quest (including giving errors in the same circumstances). Unlike my previous attempt, it should work around the existing \"special cases\" in QuestJS.</p>\n<pre><code>function invoke (script, parameters) {\n  if (parameters) {\n    var apply_this = null;\n    if (parameters[\"this\"]) {\n      apply_this = parameters[\"this\"];\n      delete parameters[\"this\"];\n    }\n\n    var parsed = script.toString().match(/^\\s*function \\((.*?)\\)\\s*\\{(.*)\\}\\s*$/);\n    if (!parsed) {\n      // FIXME: \"script\" parameter to invoke is not a script.\n      // How does QuestJS do error handling?\n    } elsif (parsed[2]) {\n      var formal_params = parsed[1];\n      if (formal_params) {\n        formal_params = formal_params.split(/\\s*,\\s*/);\n      } else {\n        formal_params = Object.keys(parameters);\n        script = eval(\"( function (\"+formal_params.join()+\") {\"+parsed[2]+\"\\n})\");\n      }\n      var actual_params = [];\n      $.each(actual_params, function (i, key) {\n        if ((key == \"parameters\") &amp;&amp; !paramteres[\"parameters\"]) {\n          actual_params.push(parameters);\n        } else {\n          actual_params.push(parameters[key]);\n        }\n      });\n      script.apply(apply_this, actual_params);\n    }\n  } else {\n    // no parameters. Easy.\n    script();\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-05-05T17:17:56.1294867Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "ff68d695-f09a-4641-a55e-8836582a413a",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I just wrote a big post, but under a lot of stress right now and it ended up sounding too condescending and argumentative, so I deleted that.\r\n\r\nSorry about the stress.\r\n\r\nDon't worry about feelings, because I'm cool, I promise.  If I'm doing something that makes no sense, put me in check (unless that causes extra stress).  Or ignore me.  (Basically, my primary concern is to not create any stress.)\r\n\r\n---\r\n> Can you tell me what's wrong with my method, please?\r\n\r\nThere are too many posts (which is my doing), and I didn't know which was the most recent method. (In fact, I thought I was barely changing your most recent method.)\r\n\r\nI'm going to plug your code in now.\r\n\r\nSorry again, and don't hold back on me.  I can take it.  You can message me things you feel may be taken offensively, just so everyone else doesn't thing we're arguing or something. But I'm cool.  I need to be yelled at sometimes.  Unless that would stress you out further, in which case don't yell at me.  \r\n\r\nAh... Now I'm just babbling.  You get the drift. I appreciate the help, and I learn from it (sometimes slowly).  I'm not saying don't help me, I'm just saying I'd rather it not be detrimental to your well-being.  And that there is no need to be polite or politically correct when I need to be put in check.\r\n\r\n---\r\n**EDIT**\r\n\r\nIn case it helps to solve some mystery, I've been using this, which seems to work in almost every case, except for text processor stuff:\r\n\r\n```\r\nfunction invoke(script, parameters) {\r\n    console.log(script.toString());\r\n    if (parameters) {\r\n        if (parameters[\"result\"]) {\r\n            script.apply(null, [parameters[\"result\"]]);\r\n        } else if (parameters[Object.keys(parameters)[0]]) {\r\n\t\t\tconsole.log(parameters[parameters[Object.keys(parameters)[0]]]);\r\n            script.apply(parameters[parameters[Object.keys(parameters)[0]]], [parameters]);\r\n        }\r\n    } else {\r\n        script();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n...and I'm off to try that code!",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I just wrote a big post, but under a lot of stress right now and it ended up sounding too condescending and argumentative, so I deleted that.</p>\n</blockquote>\n<p>Sorry about the stress.</p>\n<p>Don't worry about feelings, because I'm cool, I promise.  If I'm doing something that makes no sense, put me in check (unless that causes extra stress).  Or ignore me.  (Basically, my primary concern is to not create any stress.)</p>\n<hr>\n<blockquote>\n<p>Can you tell me what's wrong with my method, please?</p>\n</blockquote>\n<p>There are too many posts (which is my doing), and I didn't know which was the most recent method. (In fact, I thought I was barely changing your most recent method.)</p>\n<p>I'm going to plug your code in now.</p>\n<p>Sorry again, and don't hold back on me.  I can take it.  You can message me things you feel may be taken offensively, just so everyone else doesn't thing we're arguing or something. But I'm cool.  I need to be yelled at sometimes.  Unless that would stress you out further, in which case don't yell at me.</p>\n<p>Ah... Now I'm just babbling.  You get the drift. I appreciate the help, and I learn from it (sometimes slowly).  I'm not saying don't help me, I'm just saying I'd rather it not be detrimental to your well-being.  And that there is no need to be polite or politically correct when I need to be put in check.</p>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>In case it helps to solve some mystery, I've been using this, which seems to work in almost every case, except for text processor stuff:</p>\n<pre><code>function invoke(script, parameters) {\n    console.log(script.toString());\n    if (parameters) {\n        if (parameters[\"result\"]) {\n            script.apply(null, [parameters[\"result\"]]);\n        } else if (parameters[Object.keys(parameters)[0]]) {\n\t\t\tconsole.log(parameters[parameters[Object.keys(parameters)[0]]]);\n            script.apply(parameters[parameters[Object.keys(parameters)[0]]], [parameters]);\n        }\n    } else {\n        script();\n    }\n}\n</code></pre>\n<hr>\n<p>...and I'm off to try that code!</p>\n\n",
      "PostDate": "2018-05-05T18:22:12.0999821Z",
      "LastEditDate": "2018-05-05T18:36:39.3057426Z",
      "link": null
    },
    {
      "PostId": "51043728-9b3f-4eca-a603-c91498a27893",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "**fingers crossed* *\r\n\r\nI hope that code isn't too hard to follow :S\r\nThe intention is that if you do something like:\r\n```\r\nparams = NewDictionary()\r\ndictionary add (params, \"this\", someObject)\r\ndictionary add (params, \"that\", \"What's that?\")\r\ndictionary add (params, \"object\", anotherObject)\r\ninvoke (someScript, params)\r\n```\r\nif will look at someScript, and search-replace `function () {` at the start with `function (that, object) {`.\r\nThen it calls `script.apply(someObject, [\"What's that\",anotherObject])` on the newly eval'ed script, so that \"this\", \"that\", and \"object\" within that script all have their correct meanings.\r\n\r\nIt's more complex than the original version I posted above, so that if the script already starts with `function (some, params)` it will (hopefully) pull the right items out of the parameters dictionary, stick them in the array, and pass them to the script. This is for the benefit of any scripts (such as the ShowMenu script) that already have formal parameters.\r\n\r\nIf this works properly (probably best to test it in a few contexts. Try creating script attributes, script dictionaries, and scripts created using the `=>` operator, and then use `invoke` on all of them. With the parameters they expect, with the wrong parameters, with no parameters, and with extra parameters), then we should probably do the same to the two scripts that `do` maps onto, so they handle parameters that aren't necessarily the same as the command's arguments.\r\n\r\nAnd once that works, it might be possible to remove some of the special cases (which I think will at least partially break the advanced scope scripts, and possibly other things as well)",
      "EditableFormat": "markdown",
      "HTML": "<p>*<em>fingers crossed</em> *</p>\n<p>I hope that code isn't too hard to follow :S<br>\nThe intention is that if you do something like:</p>\n<pre><code>params = NewDictionary()\ndictionary add (params, \"this\", someObject)\ndictionary add (params, \"that\", \"What's that?\")\ndictionary add (params, \"object\", anotherObject)\ninvoke (someScript, params)\n</code></pre>\n<p>if will look at someScript, and search-replace <code>function () {</code> at the start with <code>function (that, object) {</code>.<br>\nThen it calls <code>script.apply(someObject, [\"What's that\",anotherObject])</code> on the newly eval'ed script, so that \"this\", \"that\", and \"object\" within that script all have their correct meanings.</p>\n<p>It's more complex than the original version I posted above, so that if the script already starts with <code>function (some, params)</code> it will (hopefully) pull the right items out of the parameters dictionary, stick them in the array, and pass them to the script. This is for the benefit of any scripts (such as the ShowMenu script) that already have formal parameters.</p>\n<p>If this works properly (probably best to test it in a few contexts. Try creating script attributes, script dictionaries, and scripts created using the <code>=&gt;</code> operator, and then use <code>invoke</code> on all of them. With the parameters they expect, with the wrong parameters, with no parameters, and with extra parameters), then we should probably do the same to the two scripts that <code>do</code> maps onto, so they handle parameters that aren't necessarily the same as the command's arguments.</p>\n<p>And once that works, it might be possible to remove some of the special cases (which I think will at least partially break the advanced scope scripts, and possibly other things as well)</p>\n\n",
      "PostDate": "2018-05-05T19:42:29.9715337Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a8d2e33c-a283-4192-8f6a-18ac241a9e39",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Ah, I see.  \r\n\r\nMaking some progress now.\r\n\r\nIt writes the functions it converts like this:\r\n\r\n```\r\nfunction GetScore()\r\n{\r\nreturn (_obj414.score);\r\n}\r\n```\r\n\r\n...so I had to change this line to this:\r\n```var parsed = script.toString().match(/^\\s*function \\((.*?)\\)\\n*\\{(.*)\\}\\n*$/);```\r\n\r\nI may have messed it up, but this gets the closest to making things work. This is what prints to the screen:\r\n\r\n\r\n```\r\nYou can see a {object:spellbook1} and the Glorious Lady {object:lady1} the Legendary Ranger.\r\n\r\nYou can go {exit:k14} to the teleporter.\r\n```\r\n\r\n---\r\nThe entire invoke() script:\r\n\r\n**EDITED (version 2)**\r\n```\r\nfunction invoke (script, parameters) {\r\n  if (parameters) {\r\n    var apply_this = null;\r\n    if (parameters[\"this\"]) {\r\n      script.apply(parameters[\"this\"], [parameters]);\r\n\t  return;\r\n    }\r\n    var parsed = script.toString().match(/^(\\s*|)function(\\s*|)\\((.*?)\\)\\s*\\n*\\{(.*)\\}\\n*$/);\r\n    if (!parsed) {\r\n      // FIXME: \"script\" parameter to invoke is not a script.\r\n      // How does QuestJS do error handling?\r\n\t  console.log(script);\r\n\t  error (\"FIXME: \\\"script\\\" parameter to invoke is not a script.\");\r\n    } else if (parsed[2]) {\r\n      var formal_params = parsed[1];\r\n      if (formal_params) {\r\n        formal_params = formal_params.split(/\\s*,\\s*/);\r\n      } else {\r\n        formal_params = Object.keys(parameters);\r\n        script = eval(\"( function (\"+formal_params.join()+\") {\"+parsed[2]+\"\\n})\");\r\n      }\r\n      var actual_params = [];\r\n      $.each(actual_params, function (i, key) {\r\n        if ((key == \"parameters\") && !paramteres[\"parameters\"]) {\r\n          actual_params.push(parameters);\r\n        } else {\r\n          actual_params.push(parameters[key]);\r\n        }\r\n      });\r\n      script.apply(apply_this, actual_params);\r\n    }\r\n  } else {\r\n    // no parameters. Easy.\r\n    script();\r\n  }\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Ah, I see.</p>\n<p>Making some progress now.</p>\n<p>It writes the functions it converts like this:</p>\n<pre><code>function GetScore()\n{\nreturn (_obj414.score);\n}\n</code></pre>\n<p>...so I had to change this line to this:<br>\n<code>var parsed = script.toString().match(/^\\s*function \\((.*?)\\)\\n*\\{(.*)\\}\\n*$/);</code></p>\n<p>I may have messed it up, but this gets the closest to making things work. This is what prints to the screen:</p>\n<pre><code>You can see a {object:spellbook1} and the Glorious Lady {object:lady1} the Legendary Ranger.\n\nYou can go {exit:k14} to the teleporter.\n</code></pre>\n<hr>\n<p>The entire invoke() script:</p>\n<p><strong>EDITED (version 2)</strong></p>\n<pre><code>function invoke (script, parameters) {\n  if (parameters) {\n    var apply_this = null;\n    if (parameters[\"this\"]) {\n      script.apply(parameters[\"this\"], [parameters]);\n\t  return;\n    }\n    var parsed = script.toString().match(/^(\\s*|)function(\\s*|)\\((.*?)\\)\\s*\\n*\\{(.*)\\}\\n*$/);\n    if (!parsed) {\n      // FIXME: \"script\" parameter to invoke is not a script.\n      // How does QuestJS do error handling?\n\t  console.log(script);\n\t  error (\"FIXME: \\\"script\\\" parameter to invoke is not a script.\");\n    } else if (parsed[2]) {\n      var formal_params = parsed[1];\n      if (formal_params) {\n        formal_params = formal_params.split(/\\s*,\\s*/);\n      } else {\n        formal_params = Object.keys(parameters);\n        script = eval(\"( function (\"+formal_params.join()+\") {\"+parsed[2]+\"\\n})\");\n      }\n      var actual_params = [];\n      $.each(actual_params, function (i, key) {\n        if ((key == \"parameters\") &amp;&amp; !paramteres[\"parameters\"]) {\n          actual_params.push(parameters);\n        } else {\n          actual_params.push(parameters[key]);\n        }\n      });\n      script.apply(apply_this, actual_params);\n    }\n  } else {\n    // no parameters. Easy.\n    script();\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2018-05-05T20:25:11.0138689Z",
      "LastEditDate": "2018-05-06T03:49:31.4051256Z",
      "link": null
    },
    {
      "PostId": "ed583f9c-3c9c-413b-8585-3a37e394657e",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Don't worry with this anymore, unless you just want to for yourself, mrangel.\r\n\r\nFixing each issue just leads to another problem.\r\n\r\nI declare my fork of QuestJS officially abandoned (for at least 5 minutes).\r\n\r\nThank you for all of the help, mrangel.  I do sincerely appreciate it, and I think I may have learned how to make a GTK app to do what QuestJS is supposed to be doing.  (I'll post about that if it isn't just a pipe dream.)\r\n\r\nThanks so much, again!  I really, really do appreciate it.",
      "EditableFormat": "markdown",
      "HTML": "<p>Don't worry with this anymore, unless you just want to for yourself, mrangel.</p>\n<p>Fixing each issue just leads to another problem.</p>\n<p>I declare my fork of QuestJS officially abandoned (for at least 5 minutes).</p>\n<p>Thank you for all of the help, mrangel.  I do sincerely appreciate it, and I think I may have learned how to make a GTK app to do what QuestJS is supposed to be doing.  (I'll post about that if it isn't just a pipe dream.)</p>\n<p>Thanks so much, again!  I really, really do appreciate it.</p>\n\n",
      "PostDate": "2018-05-05T22:32:30.1284008Z",
      "LastEditDate": "2018-05-06T03:49:59.0490188Z",
      "link": null
    },
    {
      "PostId": "82f07575-d6f1-429e-8982-d9949a06c1d1",
      "UserId": 318253,
      "Username": "K.V.",
      "AvatarUrl": "https://i.imgur.com/mBf7TBeb.png",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "### For archival purposes\r\n\r\nHere is a link to the entire JS file:\r\n\r\nhttps://gist.github.com/KVonGit/c033fd1b60d7f12026563ac04de4d780\r\n\r\n\r\nThe 'core' of the file ends at line 3112.  Everything after that is what is added by QuestJS during the conversion.\r\n\r\n---\r\nA link to either play online or download a ZIP containing all of the game's files.\r\n\r\nhttp://media.textadventures.co.uk/games/86x5feL9bk_pCkQm90uRFQ/index.html",
      "EditableFormat": "markdown",
      "HTML": "<h3>For archival purposes</h3>\n<p>Here is a link to the entire JS file:</p>\n<p>https://gist.github.com/KVonGit/c033fd1b60d7f12026563ac04de4d780</p>\n<p>The 'core' of the file ends at line 3112.  Everything after that is what is added by QuestJS during the conversion.</p>\n<hr>\n<p>A link to either play online or download a ZIP containing all of the game's files.</p>\n<p>http://media.textadventures.co.uk/games/86x5feL9bk_pCkQm90uRFQ/index.html</p>\n\n",
      "PostDate": "2018-05-06T03:47:49.6157054Z",
      "LastEditDate": "2018-05-06T05:49:08.3417542Z",
      "link": null
    }
  ]
}
