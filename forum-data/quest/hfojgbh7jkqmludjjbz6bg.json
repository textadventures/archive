{
  "Topic": {
    "TopicId": "hfojgbh7jkqmludjjbz6bg",
    "ForumId": "10",
    "Title": "Say command",
    "LastUpdated": "2019-01-05T15:16:04.9052854Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "da96e7e1-f92c-4abb-b0eb-30243c2b6ed5",
      "UserId": 394357,
      "Username": "questspidey2",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a632dc376e48dfbd7294f239e847767b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Sorry, I'm not sure how to search the forum.  I would like to do a simple Say command, which acts on the words spoken by the player, such as a spell. I am not sure how to set this up, it's going to be room specific. Thank you for any help!",
      "EditableFormat": "markdown",
      "HTML": "<p>Sorry, I'm not sure how to search the forum.  I would like to do a simple Say command, which acts on the words spoken by the player, such as a spell. I am not sure how to set this up, it's going to be room specific. Thank you for any help!</p>\n\n",
      "PostDate": "2019-01-05T15:16:04.9052854Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "c92ade36-f4eb-4605-adaf-13470ac83d40",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "(filler for getting my edited post, updated/posted)\r\n\r\n---------------\r\n\r\nquest doc site main page:\r\n\r\nhttp://docs.textadventures.co.uk/quest/\r\n\r\nthe 'Command' Element uses/takes-in/gets user input (as does the 'get input' Script/Function, as some of the few ways of getting/using the users input):\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/ (the Elements, to find this link, its at the bottom of the main page of the doc, in/under the 'reference' section/category, so its a bit hidden/hard-to-find, lots of other useful links are in/under the 'reference' section/category as well, like the Attribute Types, and etc stuff)\r\n\r\nhttp://docs.textadventures.co.uk/quest/elements/command.html (the 'Command' Element)\r\n\r\nhere's the tutorial main page:\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/\r\n\r\nhere's the 'Command' section on the tutorial:\r\n\r\nhttp://docs.textadventures.co.uk/quest/tutorial/custom_commands.html\r\n\r\n---------\r\n\r\nso, about Commands:\r\n\r\nthe 'pattern' String Attribute of a 'Command' Element, is what is used to match-up/parse with what the user types in as their input\r\n\r\nfor example\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help</pattern>\r\n\r\n</command>\r\n```\r\n\r\nwhen someone playing the game, types in 'help', this activates/runs my 'custom_help_command' Command\r\n\r\nthis first word in the 'pattern' String Attribute of a Command, must be unique, so that quest can identify which Command it is that you want, which is why I like calling this first word as the 'activator' word\r\n\r\nfor example of why it must be unique\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help</pattern>\r\n\r\n</command>\r\n\r\n<command name=\"custom_help_command_2\">\r\n\r\n  <pattern>help</pattern>\r\n\r\n</command>\r\n```\r\n\r\nwe type in 'help', but what Command does it activate? The 'custom_help_command' Command or the 'custom_help_command_2' Command?\r\n\r\n------\r\n\r\nnow, just having a single 'activator' word as your Command's pattern, doesn't take in any input data from the user, for it to use within its scripting (we'll get to the Command's scripting/actions later on / further down, so let's just ignore it for now) \r\n\r\nso, if we want to get/use the user's typed-in input data:\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text#</pattern>\r\n\r\n</command>\r\n```\r\n\r\nnow, the person playing the game can type this in (an example):\r\n\r\nhelp controls // help[SPACE]controls\r\n\r\nwhich matches up with the Command's pattern:\r\n\r\nactivator word (help), [SPACE], user input (controls)\r\n\r\nif we typed-in this, it wouldn't match up with the Command's pattern:\r\n\r\nhelpcontrols\r\n\r\nas our Command's pattern, has a [SPACE] between its activator word (help) and its user input part/segment/section of its pattern (which for this example, we type-in input: controls), but our typed-in input does NOT have that [SPACE] in it\r\n\r\nwe can get/use multiple inputs as well:\r\n\r\n```\r\n<command name=\"custom_mix_command\">\r\n\r\n  <pattern>mix #text# with #text# and #text#</pattern>\r\n\r\n</command>\r\n```\r\n\r\nyou type in (for example):\r\n\r\nmix water with sugar and vitamins\r\n\r\n------\r\n\r\nyou can generally use whatever structure/pattern you want for the Command's pattern, for example:\r\n\r\n```\r\n<command name=\"custom_mix_command\">\r\n\r\n  <pattern>mix #text# #text# #text#</pattern>\r\n\r\n</command>\r\n```\r\n\r\nand typing in (for example): mix water sugar vitamins, would work fine too\r\n\r\nI myself personally, like having my Command's pattern be at least somewhat similar to normal (american english) grammered sentences, but that's my own personal preference\r\n\r\n------\r\n\r\nalright, now about how the input matching works:\r\n\r\nthe '#XXX#' in a Command's pattern is telling quest that, that segment/part/section of the user's input is to be taken and stored as an 'argument (data)' into its own special built-in 'Parameter' Variable VARIABLES (which I'm going to cover right now, as I've not done so yet, lol), which the Command's scripting can then use within it\r\n\r\nthe names/labels of the \"Parameter' Variable VARIABLES, *MUST* be:\r\n\r\ntext\r\nor\r\ntextXXX\r\n\r\nthe 'XXX' can be whatever you want, in other words, it must start with 'text'\r\n\r\nsome quick examples:\r\n\r\ntext\r\ntext2\r\ntext_2\r\ntextparameter\r\ntext_parameter\r\n\r\nbut within the Command's pattern, you MUST encase the 'text' Parameter with the hashtags, examples:\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text#</pattern>\r\n\r\n</command>\r\n\r\n--------\r\n\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text2#</pattern>\r\n\r\n</command>\r\n\r\n----------\r\n\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text_2#</pattern>\r\n\r\n</command>\r\n\r\n------\r\n\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text_parameter_2#</pattern>\r\n\r\n</command>\r\n\r\n-----\r\n\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text_abcdefghijklmnopqrstuvwxyz#</pattern>\r\n\r\n</command>\r\n```\r\n\r\n--------------\r\n\r\nnow, there's another type of special built-in Parameter for Commands, as well:\r\n\r\nobject\r\nor\r\nobjectXXX\r\n\r\nand within the Command's pattern, remember it needs to be encased in the hashtags:\r\n\r\n#object#\r\nor\r\n#objectXXX#\r\n\r\nso, what's the difference between using: text vs object, ???\r\n\r\nwell, using 'text', means that quest will take the user's input as simply being a String Value Data Type (aka, as \"text\")\r\n\r\nwhereas, using 'object' means that quest will look for an 'Object' of that input, within the room you're currently within, when the user types in their input command, which if it finds such an Object, that Object's address/reference/pointer will be stored into its 'object' Variable VARIABLE for use by the Command's scripting\r\n\r\nso, there's a quite a bit of a difference between using 'text' vs 'object', but this is getting into a bit more complex stuff, that will be hard to explain in more detail, so I'm not going to try doing here for this post.\r\n\r\nAlso, you can use both 'text' and 'object' Parameters in the same Command, as well\r\n\r\n-----\r\n\r\nAlso, you can have multiple patterns as well, via using the semicolon in your Command's 'pattern' String Attribute:\r\n\r\n(this gets a bit into the complexity/issues of parsing-logic, which in simple guidance, start with the most complex pattern to the least complex pattern)\r\n\r\nan example (with the scripting):\r\n\r\n(see a bit further below, past this part/section, for the explanation of how the scripting and its use of the inputs works)\r\n\r\nyou can type in (for example, for this example Command):\r\n\r\n'help controls' // or: 'help stats' // or: 'help combat' // or: etc etc etc of my example help topics\r\nor\r\n'help'\r\nor\r\n'h'\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text#;help;h</pattern>\r\n\r\n  <script>\r\n\r\n    if (text = null) {\r\n      show menu (\"Help Topic?\", Split (\"controls;stats;combat;magic;stealth;diplomacy;items;equipment\", \";\"), false) {\r\n        switch (result) {\r\n          case (\"controls\") {\r\n            msg (\"blah blah blah about the game's controls\")\r\n          }\r\n          case (\"stats\") {\r\n            msg (\"blah blah blah about the game's stats\")\r\n          }\r\n          // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\r\n        }\r\n      }\r\n    } else {\r\n      switch (text) {\r\n        case (\"controls\") {\r\n          msg (\"blah blah blah about the game's controls\")\r\n        } case (\"stats\") {\r\n          msg (\"blah blah blah about the game's stats\")\r\n        }\r\n        // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\r\n        default {\r\n          msg (\"wrong input: your input doesn't match up with any of the help topics (controls, stats, combat, magic, stealth, diplomacy, items, and equipment) available, try again\")\r\n        }\r\n      }\r\n    }\r\n\r\n  </script>\r\n\r\n</command>\r\n```\r\n\r\n----\r\n\r\nanyways, now let's get to the Command's scripting itself and how it uses those inputs (if you got them for the Command)\r\n\r\nhere's some examples (using just the 'text' Parameter type):\r\n\r\n```\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help</pattern>\r\n\r\n  <script>\r\n\r\n    show menu (\"Help Topic?\", Split (\"controls;stats;combat;magic;stealth;diplomacy;items;equipment\", \";\"), false) {\r\n      switch (result) {\r\n        case (\"controls\") {\r\n          msg (\"blah blah blah about the game's controls\")\r\n        }\r\n        case (\"stats\") {\r\n          msg (\"blah blah blah about the game's stats\")\r\n        }\r\n        // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\r\n      }\r\n    }\r\n\r\n  </script>\r\n\r\n</command>\r\n\r\n// you type in 'help'\r\n// output: a pop-up menu of help topic choices\r\n// you select the 'controls' help topic menu item\r\n// output: blah blah blah about the game's controls\r\n\r\n-----------------------------------------\r\n\r\n<command name=\"custom_help_command\">\r\n\r\n  <pattern>help #text_topic_parameter#</pattern>\r\n\r\n  <script>\r\n\r\n    switch (text_topic_parameter) {\r\n      case (\"controls\") {\r\n        msg (\"blah blah blah about the game's controls\")\r\n      } case (\"stats\") {\r\n        msg (\"blah blah blah about the game's stats\")\r\n      }\r\n      // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\r\n      default {\r\n        msg (\"wrong input: your input doesn't match up with any of the help topics (controls, stats, combat, magic, stealth, diplomacy, items, and equipment) available, try again\")\r\n      }\r\n    }\r\n\r\n  </script>\r\n\r\n</command>\r\n\r\n// you type in: help controls\r\n// output: blah blah blah about the game's controls\r\n```\r\n\r\n-----------\r\n\r\nlastly:\r\n\r\nthere's global Commands (which can be activated from any where within your game) and there's local Commands (which will ONLY activate if you're within the same room as the Command that you want to activate)\r\n\r\nif you add/create a Command to a specific room, then it's that room's local Command\r\n\r\nif you add/create a Command NOT to a specific room, then it's a global (game wide) Command\r\n\r\nI'm not sure exactly how this is done with the GUI/Editor, as I hardly ever use it (and am too lazy to do so), but hopefully you can figure it out\r\n\r\nhere's how it looks within the entire game code (within the simple default new game code, for an example):\r\n\r\n```\r\n<asl version=\"550\">\r\n\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n\r\n  <game name=\"NAME_OF_GAME\">\r\n\r\n    <!--\r\n    blah Attributes (gameid, author, version, firstpublished, category, description, subtitle, difficulty, cruelty, start, pov, etc etc etc)\r\n    -->\r\n\r\n  </game>\r\n\r\n  <object name=\"room\">\r\n\r\n    <inherit name=\"editor_room\" />\r\n\r\n    <command name=\"example_local_command\">\r\n\r\n      <pattern>local</pattern>\r\n\r\n      <script>\r\n\r\n        msg (\"EXAMPLE LOCAL COMMAND\")\r\n\r\n      </script>\r\n\r\n    </command>\r\n\r\n  </object>\r\n\r\n  <object name=\"player\">\r\n\r\n    <inherit name=\"editor_object\" />\r\n    <inherit name=\"editor_player\" />\r\n\r\n    <attr name=\"parent\" type=\"object\">room</attr>\r\n\r\n  </object>\r\n\r\n  <command name=\"example_global_command\">\r\n\r\n    <pattern>global</pattern>\r\n\r\n    <script>\r\n\r\n      msg (\"EXAMPLE GLOBAL COMMAND\")\r\n\r\n    </script>\r\n\r\n  </command>\r\n\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>(filler for getting my edited post, updated/posted)</p>\n<hr>\n<p>quest doc site main page:</p>\n<p>http://docs.textadventures.co.uk/quest/</p>\n<p>the 'Command' Element uses/takes-in/gets user input (as does the 'get input' Script/Function, as some of the few ways of getting/using the users input):</p>\n<p>http://docs.textadventures.co.uk/quest/elements/ (the Elements, to find this link, its at the bottom of the main page of the doc, in/under the 'reference' section/category, so its a bit hidden/hard-to-find, lots of other useful links are in/under the 'reference' section/category as well, like the Attribute Types, and etc stuff)</p>\n<p>http://docs.textadventures.co.uk/quest/elements/command.html (the 'Command' Element)</p>\n<p>here's the tutorial main page:</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/</p>\n<p>here's the 'Command' section on the tutorial:</p>\n<p>http://docs.textadventures.co.uk/quest/tutorial/custom_commands.html</p>\n<hr>\n<p>so, about Commands:</p>\n<p>the 'pattern' String Attribute of a 'Command' Element, is what is used to match-up/parse with what the user types in as their input</p>\n<p>for example</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>when someone playing the game, types in 'help', this activates/runs my 'custom_help_command' Command</p>\n<p>this first word in the 'pattern' String Attribute of a Command, must be unique, so that quest can identify which Command it is that you want, which is why I like calling this first word as the 'activator' word</p>\n<p>for example of why it must be unique</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n&lt;command name=\"custom_help_command_2\"&gt;\n\n  &lt;pattern&gt;help&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>we type in 'help', but what Command does it activate? The 'custom_help_command' Command or the 'custom_help_command_2' Command?</p>\n<hr>\n<p>now, just having a single 'activator' word as your Command's pattern, doesn't take in any input data from the user, for it to use within its scripting (we'll get to the Command's scripting/actions later on / further down, so let's just ignore it for now)</p>\n<p>so, if we want to get/use the user's typed-in input data:</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>now, the person playing the game can type this in (an example):</p>\n<p>help controls // help[SPACE]controls</p>\n<p>which matches up with the Command's pattern:</p>\n<p>activator word (help), [SPACE], user input (controls)</p>\n<p>if we typed-in this, it wouldn't match up with the Command's pattern:</p>\n<p>helpcontrols</p>\n<p>as our Command's pattern, has a [SPACE] between its activator word (help) and its user input part/segment/section of its pattern (which for this example, we type-in input: controls), but our typed-in input does NOT have that [SPACE] in it</p>\n<p>we can get/use multiple inputs as well:</p>\n<pre><code>&lt;command name=\"custom_mix_command\"&gt;\n\n  &lt;pattern&gt;mix #text# with #text# and #text#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>you type in (for example):</p>\n<p>mix water with sugar and vitamins</p>\n<hr>\n<p>you can generally use whatever structure/pattern you want for the Command's pattern, for example:</p>\n<pre><code>&lt;command name=\"custom_mix_command\"&gt;\n\n  &lt;pattern&gt;mix #text# #text# #text#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<p>and typing in (for example): mix water sugar vitamins, would work fine too</p>\n<p>I myself personally, like having my Command's pattern be at least somewhat similar to normal (american english) grammered sentences, but that's my own personal preference</p>\n<hr>\n<p>alright, now about how the input matching works:</p>\n<p>the '#XXX#' in a Command's pattern is telling quest that, that segment/part/section of the user's input is to be taken and stored as an 'argument (data)' into its own special built-in 'Parameter' Variable VARIABLES (which I'm going to cover right now, as I've not done so yet, lol), which the Command's scripting can then use within it</p>\n<p>the names/labels of the \"Parameter' Variable VARIABLES, <em>MUST</em> be:</p>\n<p>text<br>\nor<br>\ntextXXX</p>\n<p>the 'XXX' can be whatever you want, in other words, it must start with 'text'</p>\n<p>some quick examples:</p>\n<p>text<br>\ntext2<br>\ntext_2<br>\ntextparameter<br>\ntext_parameter</p>\n<p>but within the Command's pattern, you MUST encase the 'text' Parameter with the hashtags, examples:</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text#&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n--------\n\n&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text2#&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n----------\n\n&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text_2#&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n------\n\n&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text_parameter_2#&lt;/pattern&gt;\n\n&lt;/command&gt;\n\n-----\n\n&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text_abcdefghijklmnopqrstuvwxyz#&lt;/pattern&gt;\n\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>now, there's another type of special built-in Parameter for Commands, as well:</p>\n<p>object<br>\nor<br>\nobjectXXX</p>\n<p>and within the Command's pattern, remember it needs to be encased in the hashtags:</p>\n<p>#object#<br>\nor<br>\n#objectXXX#</p>\n<p>so, what's the difference between using: text vs object, ???</p>\n<p>well, using 'text', means that quest will take the user's input as simply being a String Value Data Type (aka, as \"text\")</p>\n<p>whereas, using 'object' means that quest will look for an 'Object' of that input, within the room you're currently within, when the user types in their input command, which if it finds such an Object, that Object's address/reference/pointer will be stored into its 'object' Variable VARIABLE for use by the Command's scripting</p>\n<p>so, there's a quite a bit of a difference between using 'text' vs 'object', but this is getting into a bit more complex stuff, that will be hard to explain in more detail, so I'm not going to try doing here for this post.</p>\n<p>Also, you can use both 'text' and 'object' Parameters in the same Command, as well</p>\n<hr>\n<p>Also, you can have multiple patterns as well, via using the semicolon in your Command's 'pattern' String Attribute:</p>\n<p>(this gets a bit into the complexity/issues of parsing-logic, which in simple guidance, start with the most complex pattern to the least complex pattern)</p>\n<p>an example (with the scripting):</p>\n<p>(see a bit further below, past this part/section, for the explanation of how the scripting and its use of the inputs works)</p>\n<p>you can type in (for example, for this example Command):</p>\n<p>'help controls' // or: 'help stats' // or: 'help combat' // or: etc etc etc of my example help topics<br>\nor<br>\n'help'<br>\nor<br>\n'h'</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text#;help;h&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    if (text = null) {\n      show menu (\"Help Topic?\", Split (\"controls;stats;combat;magic;stealth;diplomacy;items;equipment\", \";\"), false) {\n        switch (result) {\n          case (\"controls\") {\n            msg (\"blah blah blah about the game's controls\")\n          }\n          case (\"stats\") {\n            msg (\"blah blah blah about the game's stats\")\n          }\n          // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\n        }\n      }\n    } else {\n      switch (text) {\n        case (\"controls\") {\n          msg (\"blah blah blah about the game's controls\")\n        } case (\"stats\") {\n          msg (\"blah blah blah about the game's stats\")\n        }\n        // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\n        default {\n          msg (\"wrong input: your input doesn't match up with any of the help topics (controls, stats, combat, magic, stealth, diplomacy, items, and equipment) available, try again\")\n        }\n      }\n    }\n\n  &lt;/script&gt;\n\n&lt;/command&gt;\n</code></pre>\n<hr>\n<p>anyways, now let's get to the Command's scripting itself and how it uses those inputs (if you got them for the Command)</p>\n<p>here's some examples (using just the 'text' Parameter type):</p>\n<pre><code>&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    show menu (\"Help Topic?\", Split (\"controls;stats;combat;magic;stealth;diplomacy;items;equipment\", \";\"), false) {\n      switch (result) {\n        case (\"controls\") {\n          msg (\"blah blah blah about the game's controls\")\n        }\n        case (\"stats\") {\n          msg (\"blah blah blah about the game's stats\")\n        }\n        // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\n      }\n    }\n\n  &lt;/script&gt;\n\n&lt;/command&gt;\n\n// you type in 'help'\n// output: a pop-up menu of help topic choices\n// you select the 'controls' help topic menu item\n// output: blah blah blah about the game's controls\n\n-----------------------------------------\n\n&lt;command name=\"custom_help_command\"&gt;\n\n  &lt;pattern&gt;help #text_topic_parameter#&lt;/pattern&gt;\n\n  &lt;script&gt;\n\n    switch (text_topic_parameter) {\n      case (\"controls\") {\n        msg (\"blah blah blah about the game's controls\")\n      } case (\"stats\") {\n        msg (\"blah blah blah about the game's stats\")\n      }\n      // ETC ETC ETC 'cases' (combat, magic, stealth, diplomacy, items, equipment)\n      default {\n        msg (\"wrong input: your input doesn't match up with any of the help topics (controls, stats, combat, magic, stealth, diplomacy, items, and equipment) available, try again\")\n      }\n    }\n\n  &lt;/script&gt;\n\n&lt;/command&gt;\n\n// you type in: help controls\n// output: blah blah blah about the game's controls\n</code></pre>\n<hr>\n<p>lastly:</p>\n<p>there's global Commands (which can be activated from any where within your game) and there's local Commands (which will ONLY activate if you're within the same room as the Command that you want to activate)</p>\n<p>if you add/create a Command to a specific room, then it's that room's local Command</p>\n<p>if you add/create a Command NOT to a specific room, then it's a global (game wide) Command</p>\n<p>I'm not sure exactly how this is done with the GUI/Editor, as I hardly ever use it (and am too lazy to do so), but hopefully you can figure it out</p>\n<p>here's how it looks within the entire game code (within the simple default new game code, for an example):</p>\n<pre><code>&lt;asl version=\"550\"&gt;\n\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n\n  &lt;game name=\"NAME_OF_GAME\"&gt;\n\n    &lt;!--\n    blah Attributes (gameid, author, version, firstpublished, category, description, subtitle, difficulty, cruelty, start, pov, etc etc etc)\n    --&gt;\n\n  &lt;/game&gt;\n\n  &lt;object name=\"room\"&gt;\n\n    &lt;inherit name=\"editor_room\" /&gt;\n\n    &lt;command name=\"example_local_command\"&gt;\n\n      &lt;pattern&gt;local&lt;/pattern&gt;\n\n      &lt;script&gt;\n\n        msg (\"EXAMPLE LOCAL COMMAND\")\n\n      &lt;/script&gt;\n\n    &lt;/command&gt;\n\n  &lt;/object&gt;\n\n  &lt;object name=\"player\"&gt;\n\n    &lt;inherit name=\"editor_object\" /&gt;\n    &lt;inherit name=\"editor_player\" /&gt;\n\n    &lt;attr name=\"parent\" type=\"object\"&gt;room&lt;/attr&gt;\n\n  &lt;/object&gt;\n\n  &lt;command name=\"example_global_command\"&gt;\n\n    &lt;pattern&gt;global&lt;/pattern&gt;\n\n    &lt;script&gt;\n\n      msg (\"EXAMPLE GLOBAL COMMAND\")\n\n    &lt;/script&gt;\n\n  &lt;/command&gt;\n\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2019-01-05T22:56:35.4211704Z",
      "LastEditDate": "2019-01-05T23:32:41.9073957Z",
      "link": null
    },
    {
      "PostId": "cf320d0b-e4b0-4dd8-b338-93121d4bf921",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "A proper say command that does something useful is very difficult as your NPCs have to understand anything the player may choose to type. However, it sounds like your requirements are more modest if you want to cast spells; all you need to do is have a command for each spell. \r\n\r\nSo you could have one command with the pattern \"say lumos\", when the player types that, light happens.\r\n\r\nTake a look here too:\r\nhttp://docs.textadventures.co.uk/quest/zombie-apocalypse-spells.html",
      "EditableFormat": "markdown",
      "HTML": "<p>A proper say command that does something useful is very difficult as your NPCs have to understand anything the player may choose to type. However, it sounds like your requirements are more modest if you want to cast spells; all you need to do is have a command for each spell.</p>\n<p>So you could have one command with the pattern \"say lumos\", when the player types that, light happens.</p>\n<p>Take a look here too:<br>\nhttp://docs.textadventures.co.uk/quest/zombie-apocalypse-spells.html</p>\n\n",
      "PostDate": "2019-01-06T20:19:19.2926815Z",
      "LastEditDate": "2019-01-06T20:20:26.3750297Z",
      "link": null
    }
  ]
}
