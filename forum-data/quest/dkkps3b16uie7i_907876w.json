{
  "Topic": {
    "TopicId": "dkkps3b16uie7i_907876w",
    "ForumId": "10",
    "Title": "Random Object Spawn in player specific rooms? ",
    "LastUpdated": "2016-08-26T00:56:50.3299223Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "d77ef43e-3b01-4bab-a924-86a22b1cf302",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello all Mike here and its been awhile. Any way getting back in flow of things been really making things alot easier on myself by cloning and moving objects to rooms before first entry. So I want every room(forest area) to have this function but have no idea how to call the room the player is entering without being specific and saying room1 but problem its only 1 room.  How could I make this function that when called it would clone and move to player specific room? Any help is appreciated and btw im worker in the d&d scripting.\r\n\r\nThanks \r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello all Mike here and its been awhile. Any way getting back in flow of things been really making things alot easier on myself by cloning and moving objects to rooms before first entry. So I want every room(forest area) to have this function but have no idea how to call the room the player is entering without being specific and saying room1 but problem its only 1 room.  How could I make this function that when called it would clone and move to player specific room? Any help is appreciated and btw im worker in the d&amp;d scripting.</p>\n<p>Thanks<br>\nMike</p>\n\n",
      "PostDate": "2016-08-26T00:56:50.3299223Z",
      "LastEditDate": "2016-08-26T00:57:08.906538Z"
    },
    {
      "PostId": "3c0fcc3e-f32b-4f6e-895b-a678e383b0aa",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nthe 'parent-child containment heirarchy' design/concept:\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->->-> grandson\r\n\r\n'grandfather' is the main (root) parent of 'father', 'son', and 'grandson'\r\n'grandfather' is the direct parent of 'father'\r\n'grandfather' is the indirect parent of 'son' and 'grandson'\r\n\r\n'father' is the direct child of 'grandfather'\r\n'father' is the direct parent of 'son'\r\n'father' is the indirect parent of 'grandson'\r\n\r\n'son' is the indirect child of 'grandfather'\r\n'son' is the direct child of 'father'\r\n'son' is the direct parent of 'grandson'\r\n\r\n'grandson' is the indirect child of 'grandfather' and 'father'\r\n'grandson' is the direct child of 'son'\r\n\r\nhere, would be the same structure in quest:\r\n\r\n<object name=\"grandfather\">\r\n\r\n  <object name=\"father\">\r\n\r\n    <object name=\"son\">\r\n\r\n      <object name=\"grandson\">\r\n      </object>\r\n\r\n    </object>\r\n\r\n  </object>\r\n\r\n</object>\r\n\r\nand here is the exact same structure in quest too:\r\n\r\n<object name=\"grandfather\">\r\n</object>\r\n\r\n<object name=\"father\">\r\n  <attr name=\"parent\" type=\"object\">grandfather</attr>\r\n</object>\r\n\r\n<object name=\"son\">\r\n  <attr name=\"parent\" type=\"object\">father</attr>\r\n</object>\r\n\r\n<object name=\"grandson\">\r\n  <attr name=\"parent\" type=\"object\">son</attr>\r\n</object>\r\n\r\nquest uses the built-in 'parent' Object Attribute to determine the location of Objects\r\n\r\nthe same structure can be created through scripting in quest:\r\n\r\ncreate (\"grandfather\")\r\ncreate (\"father\")\r\ncreate (\"son\")\r\ncreate (\"grandson\")\r\n\r\nfather.parent = grandfather\r\nson.parent = father\r\ngrandson.parent = son\r\n\r\n-----------\r\n\r\nlet's go back to this real fast, for a quick quiz:\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->->-> grandson\r\n\r\nif I did this:\r\n\r\ngrandson.parent = father\r\n\r\nhow would containment heirarchy look/change?\r\n\r\nAnswer:\r\n\r\ngrandfather\r\n-> father\r\n->-> son\r\n->-> grandson\r\n\r\nwhat if I now do this:\r\n\r\nson.parent = grandson\r\n\r\nanswer:\r\n\r\ngrandfather\r\n-> father\r\n->-> grandson\r\n->->-> son\r\n\r\nwhat if I now do this:\r\n\r\ngrandson.parent = grandfather\r\n\r\nanswer:\r\n\r\ngrandfather\r\n-> father\r\n-> grandson\r\n->-> son\r\n\r\nwhat if I now do this:\r\n\r\nfather.parent = son\r\n\r\nanswer:\r\n\r\ngrandfather\r\n-> grandson\r\n->-> son\r\n->->-> father\r\n\r\nthe built-in 'parent' Object Attribute is (probably) how the 'MoveObject' Script/Function actually works:\r\n\r\n<function name=\"MoveObject\" parameters=\"moving_object_parameter,destination_object_parameter\">\r\n  moving_object_parameter.parent = destination_object_parameter\r\n</function\r\n\r\n-----------\r\n\r\nanyways, a trick (which is what you're asking for) with using the 'parent' Object Attribute, is that you can do this, an example:\r\n\r\nI.parent = room3\r\nyou.parent = I.parent\r\n\r\nthink of it like this:\r\nif 'I' am in 'room3',\r\nand 'you' are in the room that 'I' am in,\r\nwhat room are 'you' in?\r\nAnswer: room3 // you.parent = room3\r\n\r\nteam_member.parent = player.parent\r\n\r\nfor explanation of what this is doing and how it works:\r\n\r\nplayer.parent = room\r\n// you ('player') are in 'room', and 'room' is STORED/SAVED into the 'parent' Attribute VARIABLE of the 'player' Player Object\r\n\r\nteam_member.parent = player.parent\r\n// 'team_member' is in the room that the 'player' is in (which is: room), so: team_member.parent = room, which is done by STORING/SAVING whatever the stored/saved Value of 'player.parent' (which is: room) into the 'parent' Attribute VARIABLE of the 'team_member' Object. This also tells quest to set/put/move the 'team_member' Object to be in that same room (which is: room)\r\n// team_member.parent = player.parent = room // team_member.parent <--- player.parent <---- room\r\n// team_member.parent = room // team_member.parent <---- room\r\n\r\nlet's say you (move to / are now in) 'room2' :\r\nplayer.parent = room2\r\n\r\nteam_member.parent = player.parent\r\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room2\r\n// team_member.parent = player.parent = room2\r\n// team_member.parent = room2\r\n\r\nlet's say you (move to / are now in) 'room99' :\r\nplayer.parent = room99\r\n\r\nteam_member.parent = player.parent\r\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room99\r\n// team_member.parent = player.parent = room99\r\n// team_member.parent = room99\r\n\r\nlet's say you (move to / are now in) 'room2' :\r\nplayer.parent = room2\r\n\r\nteam_member.parent = player.parent\r\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room2\r\n// team_member.parent = player.parent = room2\r\n// team_member.parent = room2\r\n\r\nand thus, we got a 'following' effect taking place, regardless of what room the 'player' moves to or is put/set within, the 'team_member' will also move/be-put-set-into the same room as the 'player'\r\n\r\n--------------\r\n\r\nthis, can be or maybe-probably, is technically wrong/off, as I don't know quest's underlying structure (and am still in the early stages of learning programming), but in general, this is how programming works, underneath what quest has given to us to use at the user-level)\r\n\r\nactually every quest game is a parent-child heirarchy:\r\n\r\nOBJECT-ORIENTED PROGRAMMING (OOP) / OBJECT-ORIENTED DESIGN (OOD)\r\n\r\n(my capitolized 'OBJECT' is not to be confused with Quest's user-level 'Object' Element)\r\n\r\n(all of quest's 'Elements': Verbs, Commands, Functions, Exits, Objects, Turnscripts, Timers, Object Types / Types, and etc : are OBJECTS)\r\n\r\nsimple example:\r\n'asl' OBJECT // root parent OBJECT // your actual/true game OBJECT (all other OBJECTS must be inside of here: your game, obviously, lol)\r\n-> 'game' OBJECT // actually this is just your: game/global settings OBJECT\r\n-> 'room' OBJECT\r\n->-> 'player' OBJECT\r\n-> 'Verb' OBJECTS\r\n-> 'Function' OBJECTS\r\n-> 'Command' OBJECTS\r\n-> 'Exit' OBJECTS\r\n-> 'Turnscript' OBJECTS\r\n-> 'Timer' OBJECTS\r\n-> 'Object Type / Type' OBJECTS\r\n-> etc etc etc OBJECTS",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>the 'parent-child containment heirarchy' design/concept:\n\ngrandfather\n-&gt; father\n-&gt;-&gt; son\n-&gt;-&gt;-&gt; grandson\n\n'grandfather' is the main (root) parent of 'father', 'son', and 'grandson'\n'grandfather' is the direct parent of 'father'\n'grandfather' is the indirect parent of 'son' and 'grandson'\n\n'father' is the direct child of 'grandfather'\n'father' is the direct parent of 'son'\n'father' is the indirect parent of 'grandson'\n\n'son' is the indirect child of 'grandfather'\n'son' is the direct child of 'father'\n'son' is the direct parent of 'grandson'\n\n'grandson' is the indirect child of 'grandfather' and 'father'\n'grandson' is the direct child of 'son'\n\nhere, would be the same structure in quest:\n\n&lt;object name=\"grandfather\"&gt;\n\n  &lt;object name=\"father\"&gt;\n\n    &lt;object name=\"son\"&gt;\n\n      &lt;object name=\"grandson\"&gt;\n      &lt;/object&gt;\n\n    &lt;/object&gt;\n\n  &lt;/object&gt;\n\n&lt;/object&gt;\n\nand here is the exact same structure in quest too:\n\n&lt;object name=\"grandfather\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"father\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;grandfather&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"son\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;father&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"grandson\"&gt;\n  &lt;attr name=\"parent\" type=\"object\"&gt;son&lt;/attr&gt;\n&lt;/object&gt;\n\nquest uses the built-in 'parent' Object Attribute to determine the location of Objects\n\nthe same structure can be created through scripting in quest:\n\ncreate (\"grandfather\")\ncreate (\"father\")\ncreate (\"son\")\ncreate (\"grandson\")\n\nfather.parent = grandfather\nson.parent = father\ngrandson.parent = son\n\n-----------\n\nlet's go back to this real fast, for a quick quiz:\n\ngrandfather\n-&gt; father\n-&gt;-&gt; son\n-&gt;-&gt;-&gt; grandson\n\nif I did this:\n\ngrandson.parent = father\n\nhow would containment heirarchy look/change?\n\nAnswer:\n\ngrandfather\n-&gt; father\n-&gt;-&gt; son\n-&gt;-&gt; grandson\n\nwhat if I now do this:\n\nson.parent = grandson\n\nanswer:\n\ngrandfather\n-&gt; father\n-&gt;-&gt; grandson\n-&gt;-&gt;-&gt; son\n\nwhat if I now do this:\n\ngrandson.parent = grandfather\n\nanswer:\n\ngrandfather\n-&gt; father\n-&gt; grandson\n-&gt;-&gt; son\n\nwhat if I now do this:\n\nfather.parent = son\n\nanswer:\n\ngrandfather\n-&gt; grandson\n-&gt;-&gt; son\n-&gt;-&gt;-&gt; father\n\nthe built-in 'parent' Object Attribute is (probably) how the 'MoveObject' Script/Function actually works:\n\n&lt;function name=\"MoveObject\" parameters=\"moving_object_parameter,destination_object_parameter\"&gt;\n  moving_object_parameter.parent = destination_object_parameter\n&lt;/function\n\n-----------\n\nanyways, a trick (which is what you're asking for) with using the 'parent' Object Attribute, is that you can do this, an example:\n\nI.parent = room3\nyou.parent = I.parent\n\nthink of it like this:\nif 'I' am in 'room3',\nand 'you' are in the room that 'I' am in,\nwhat room are 'you' in?\nAnswer: room3 // you.parent = room3\n\nteam_member.parent = player.parent\n\nfor explanation of what this is doing and how it works:\n\nplayer.parent = room\n// you ('player') are in 'room', and 'room' is STORED/SAVED into the 'parent' Attribute VARIABLE of the 'player' Player Object\n\nteam_member.parent = player.parent\n// 'team_member' is in the room that the 'player' is in (which is: room), so: team_member.parent = room, which is done by STORING/SAVING whatever the stored/saved Value of 'player.parent' (which is: room) into the 'parent' Attribute VARIABLE of the 'team_member' Object. This also tells quest to set/put/move the 'team_member' Object to be in that same room (which is: room)\n// team_member.parent = player.parent = room // team_member.parent &lt;--- player.parent &lt;---- room\n// team_member.parent = room // team_member.parent &lt;---- room\n\nlet's say you (move to / are now in) 'room2' :\nplayer.parent = room2\n\nteam_member.parent = player.parent\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room2\n// team_member.parent = player.parent = room2\n// team_member.parent = room2\n\nlet's say you (move to / are now in) 'room99' :\nplayer.parent = room99\n\nteam_member.parent = player.parent\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room99\n// team_member.parent = player.parent = room99\n// team_member.parent = room99\n\nlet's say you (move to / are now in) 'room2' :\nplayer.parent = room2\n\nteam_member.parent = player.parent\n// 'team_member' is in the room that the 'player' is in (which is: room2), so: team_member.parent = room2\n// team_member.parent = player.parent = room2\n// team_member.parent = room2\n\nand thus, we got a 'following' effect taking place, regardless of what room the 'player' moves to or is put/set within, the 'team_member' will also move/be-put-set-into the same room as the 'player'\n\n--------------\n\nthis, can be or maybe-probably, is technically wrong/off, as I don't know quest's underlying structure (and am still in the early stages of learning programming), but in general, this is how programming works, underneath what quest has given to us to use at the user-level)\n\nactually every quest game is a parent-child heirarchy:\n\nOBJECT-ORIENTED PROGRAMMING (OOP) / OBJECT-ORIENTED DESIGN (OOD)\n\n(my capitolized 'OBJECT' is not to be confused with Quest's user-level 'Object' Element)\n\n(all of quest's 'Elements': Verbs, Commands, Functions, Exits, Objects, Turnscripts, Timers, Object Types / Types, and etc : are OBJECTS)\n\nsimple example:\n'asl' OBJECT // root parent OBJECT // your actual/true game OBJECT (all other OBJECTS must be inside of here: your game, obviously, lol)\n-&gt; 'game' OBJECT // actually this is just your: game/global settings OBJECT\n-&gt; 'room' OBJECT\n-&gt;-&gt; 'player' OBJECT\n-&gt; 'Verb' OBJECTS\n-&gt; 'Function' OBJECTS\n-&gt; 'Command' OBJECTS\n-&gt; 'Exit' OBJECTS\n-&gt; 'Turnscript' OBJECTS\n-&gt; 'Timer' OBJECTS\n-&gt; 'Object Type / Type' OBJECTS\n-&gt; etc etc etc OBJECTS\n</code></pre>\n\n",
      "PostDate": "2016-08-26T05:37:03.0311427Z",
      "LastEditDate": "2016-08-26T06:10:02.5527523Z"
    },
    {
      "PostId": "a2c7f0d5-e2a8-4441-98ce-8d651763af68",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "You have three options. As HK says above, you can use `player.parent`, which will be the current room.\r\n\r\nYou can also use `this`, which is the object that the script is attached to, which will be the room for the _on first entry_ script.\r\n\r\nSo the second option is to have a function called, say, SetUpForestRoom, with a single parameter, \"currentroom\". In the function,  use`currentroom`. Call the function in the _on first entry_ script:\r\n```\r\nSetUpForestRoom(this)\r\n```\r\nThirdly, if you are using the offline editor, you could set up a \"forestroom\" type, and set all rooms in the forest to be of that type. Then you can put code in the _on first entry_ of the type, and all the rooms will have it. In this case use `this` to refer to the current room, because the script will be on the room.\r\n\r\nI personally would do the third. It is a bit more tricky to get your head round, but the actual coding is about the same, and once you have set up a \"forestroom\" type, you can use it for other things, such as checking if the player is in a forest, with minimal effort, because all the rooms ion the forest have already been given that type.",
      "EditableFormat": "markdown",
      "HTML": "<p>You have three options. As HK says above, you can use <code>player.parent</code>, which will be the current room.</p>\n<p>You can also use <code>this</code>, which is the object that the script is attached to, which will be the room for the <em>on first entry</em> script.</p>\n<p>So the second option is to have a function called, say, SetUpForestRoom, with a single parameter, \"currentroom\". In the function,  use<code>currentroom</code>. Call the function in the <em>on first entry</em> script:</p>\n<pre><code>SetUpForestRoom(this)\n</code></pre>\n<p>Thirdly, if you are using the offline editor, you could set up a \"forestroom\" type, and set all rooms in the forest to be of that type. Then you can put code in the <em>on first entry</em> of the type, and all the rooms will have it. In this case use <code>this</code> to refer to the current room, because the script will be on the room.</p>\n<p>I personally would do the third. It is a bit more tricky to get your head round, but the actual coding is about the same, and once you have set up a \"forestroom\" type, you can use it for other things, such as checking if the player is in a forest, with minimal effort, because all the rooms ion the forest have already been given that type.</p>\n\n",
      "PostDate": "2016-08-26T07:01:48.7578847Z",
      "LastEditDate": null
    },
    {
      "PostId": "cd956ac5-3785-4a3d-9c22-4cc65b379d2e",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Well thank you both but I must be pretty dumb cause I can not seem to figure out what your saying lol sorry! I made a Function called 'RandomResourceSpawner' (I know long name) but inside I set a random chance to spawn objects like trees, stones, ponds etc. So then I made a Object Type called it 'ForestRoomType' then attach to all rooms that are forest types. Then in before enter room first time I run scripts attribute but nothing it just says Object reference not set to an instance of an object. \r\n\r\n*if (RandomChance(40)) {\r\n  CloneObjectAndMove (Boulder, current.room)\r\n}\r\nif (RandomChance(75)) {\r\n  CloneObjectAndMove (Grass, current.room)\r\n}\r\nif (RandomChance(55)) {\r\n  CloneObjectAndMove (Tree, current.room)\r\n}*\r\n\r\nThat is my function above and I know current.room is not right but just not understanding sorry again.\r\n\r\nSorry guys I fixed it in the Function instead of above I used this \r\n\r\n**if (RandomChance(40)) {\r\n  CloneObjectAndMove (Boulder, player.parent)\r\n}\r\nif (RandomChance(75)) {\r\n  CloneObjectAndMove (Grass, player.parent)\r\n}\r\nif (RandomChance(55)) {\r\n  CloneObjectAndMove (Tree, player.parent)\r\n}**\r\n\r\nand all seems to be working well, thank you both again very much. Also one more thing , ok so I can call reference to a cloned item in itself by calling \"this\" but how do I call a reference to another cloned object from different object like: In my main Tree object i created a Verb 'Chop' which requires object 'Stone Axe' in this verb it calls this script\r\n\r\n*if (Got(Stone Axe)) {\r\n  DecreaseObjectCounter (Stone Axe, \"Durability\")\r\n  DecreaseObjectCounter (this, \"Health\")\r\n  if (GetInt(this, \"Health\") <= 0) {\r\n    RemoveObject (this)\r\n    CloneObjectAndMove (Sticks, player)\r\n  }\r\n}\r\nelse if (not Got(Stone Axe)) {\r\n  msg (\"Not Carrying an Axe<br/><br/>\")\r\n}*\r\n\r\nSo when calling my if statement for Stone Axe how do I use a clone reference on it instead of stone axe itself so i can just use clones and not have to reset all values each time a new one is made?\r\nAgain I am using GUI Editor just get code for easy posting :)\r\nThanks Again\r\nMike\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Well thank you both but I must be pretty dumb cause I can not seem to figure out what your saying lol sorry! I made a Function called 'RandomResourceSpawner' (I know long name) but inside I set a random chance to spawn objects like trees, stones, ponds etc. So then I made a Object Type called it 'ForestRoomType' then attach to all rooms that are forest types. Then in before enter room first time I run scripts attribute but nothing it just says Object reference not set to an instance of an object.</p>\n<p><em>if (RandomChance(40)) {<br>\nCloneObjectAndMove (Boulder, current.room)<br>\n}<br>\nif (RandomChance(75)) {<br>\nCloneObjectAndMove (Grass, current.room)<br>\n}<br>\nif (RandomChance(55)) {<br>\nCloneObjectAndMove (Tree, current.room)<br>\n}</em></p>\n<p>That is my function above and I know current.room is not right but just not understanding sorry again.</p>\n<p>Sorry guys I fixed it in the Function instead of above I used this</p>\n<p><strong>if (RandomChance(40)) {<br>\nCloneObjectAndMove (Boulder, player.parent)<br>\n}<br>\nif (RandomChance(75)) {<br>\nCloneObjectAndMove (Grass, player.parent)<br>\n}<br>\nif (RandomChance(55)) {<br>\nCloneObjectAndMove (Tree, player.parent)<br>\n}</strong></p>\n<p>and all seems to be working well, thank you both again very much. Also one more thing , ok so I can call reference to a cloned item in itself by calling \"this\" but how do I call a reference to another cloned object from different object like: In my main Tree object i created a Verb 'Chop' which requires object 'Stone Axe' in this verb it calls this script</p>\n<p><em>if (Got(Stone Axe)) {<br>\nDecreaseObjectCounter (Stone Axe, \"Durability\")<br>\nDecreaseObjectCounter (this, \"Health\")<br>\nif (GetInt(this, \"Health\") &lt;= 0) {<br>\nRemoveObject (this)<br>\nCloneObjectAndMove (Sticks, player)<br>\n}<br>\n}<br>\nelse if (not Got(Stone Axe)) {<br>\nmsg (\"Not Carrying an Axe<br><br>\")<br>\n}</em></p>\n<p>So when calling my if statement for Stone Axe how do I use a clone reference on it instead of stone axe itself so i can just use clones and not have to reset all values each time a new one is made?<br>\nAgain I am using GUI Editor just get code for easy posting :)<br>\nThanks Again<br>\nMike</p>\n\n",
      "PostDate": "2016-08-26T14:07:47.7047518Z",
      "LastEditDate": "2016-08-26T16:13:21.5220554Z"
    },
    {
      "PostId": "70371a72-6ea7-46ba-a148-4cd5dbc7f733",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "'this' is a special keyword/keycommand that GETS/RETURNS the Object (well, technically it returns its name/reference of the Object for you to use it) that contains your script using it (the 'this'), which makes it (the 'this') useful:\r\n\r\nfor example, instead of doing this (no pun intended, lol. I don't know of any alternative word to use, lol):\r\n\r\n```\r\n<object name=\"player1\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    player1.life_displayment = player1.current_life + \"/\" + player1.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    player1.life_displayment = player1.current_life + \"/\" + player1.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n\r\n<object name=\"player2\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    player2.life_displayment = player2.current_life + \"/\" + player2.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    player2.life_displayment = player2.current_life + \"/\" + player2.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n\r\n<object name=\"player3\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    player3.life_displayment = player3.current_life + \"/\" + player3.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    player3.life_displayment = player3.current_life + \"/\" + player3.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n```\r\n\r\nwe can use 'this.ATRTIBUTE_NAME' instead of having to specifically use 'player.ATTRIBUTE_NAME', 'player2.ATTRIBUTE_NAME, and 'player3.ATTRIBUTE_NAME' for each of our Player Objects:\r\n\r\n```\r\n<object name=\"player1\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n\r\n<object name=\"player2\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n\r\n<object name=\"player3\">\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</object>\r\n```\r\n\r\nand we can reduce the amount of code further, by using Object Types:\r\n\r\n```\r\n<object name=\"player1\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<object name=\"player2\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<object name=\"player3\">\r\n  <inherit name=\"player_type\" />\r\n</object>\r\n\r\n<type name=\"player_type\"\r\n  <attr name=\"current_life\" type=\"int\">999</attr>\r\n  <attr name=\"maximum_life\" type=\"int\">999</attr>\r\n  <attr name=\"life_displayment\" type=\"string\">999/999</attr>\r\n  <attr name=\"changedcurrent_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <attr name=\"changedmaximum_life\" type=\"script\">\r\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\r\n  </attr>\r\n  <statusattributes type=\"simplestringdictionary\">life_displayment = Life: !</statusattributes>\r\n</type>\r\n```\r\n\r\n------------------------\r\n\r\nunfortunately, when you create Clones, they've got different names (original Object: axe, Clone Object 1: axe1, Clone Object 2: axe2, etc etc etc)\r\n\r\nso, you need an 'indicator/flag' to identify each of your clones...\r\n\r\nthere's a few (well, many ways actually, lol) ways of doing this:\r\n\r\n1. you can have your original Object have a normal Attribute (String, Boolean, Integer, etc) as its indicator/flag (which all of the clones will have too):\r\n\r\n(I'll use a String Attribute for the example below, as it's the most useful one to use, for a simple game design anyways)\r\n\r\n```\r\n<object name=\"katana\">\r\n  <attr name=\"our_type_of_object_indicator_flag\" type=\"string\">sword</attr>\r\n</object>\r\n\r\n<object name=\"claymore\">\r\n  <attr name=\"our_type_of_object_indicator_flag\" type=\"string\">sword</attr>\r\n</object>\r\n\r\n<object name=\"hand_axe\">\r\n  <attr name=\"our_type_of_object_indicator_flag\" type=\"string\">axe</attr>\r\n</object>\r\n\r\n<object name=\"npc1\">\r\n  <attr name=\"our_type_of_object_indicator_flag\" type=\"string\">npc</attr>\r\n</object>\r\n\r\n<object name=\"monster1\">\r\n  <attr name=\"our_type_of_object_indicator_flag\" type=\"string\">monster</attr>\r\n</object>\r\n\r\n// and your scripting (at where-ever you want it used), an example:\r\n\r\nif (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"sword\") {\r\n  // whatever script(s) you want here\r\n  // stupid example: msg (\"This is a sword.\")\r\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"axe\") {\r\n  // whatever script(s) you want here\r\n  // stupid example: msg (\"This is an axe.\")\r\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"npc\") {\r\n  // whatever script(s) you want here\r\n  // stupid example: msg (\"This is a NPC.\")\r\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"monster\") {\r\n  // whatever script(s) you want here\r\n  // stupid example: msg (\"This is a monster.\")\r\n}\r\n```\r\n\r\n2. you can have your original Object have an Inherited Attribute (Object Type / Type) as its indicator/flag (which all of the clones will have too):\r\n\r\n```\r\n(this is just a quick limited example for this method, see #1 for seeing how a more expanded example looks - though you' use this code design instead of course) \r\n\r\n<object name=\"katana\">\r\n</object>\r\n\r\n<type name=\"sword_type\">\r\n</type>\r\n\r\n// scripting:\r\n\r\nif (DoesInherit (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"sword_type\")) {\r\n  msg (\"This is a sword.\")\r\n}\r\n```\r\n\r\n3. and there's this method too, using the Object's name itself as the indicator/flag and using the string manipulation Functions with it:\r\n\r\nhttp://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom, to the 'string functions' section)\r\n\r\n(since, for example, 'katana' clones names are all like this: katana1 katana2 katana3 etc etc etc: they all start with 'katana' in their names. You can 'check' for if their names start with 'katana' to see if they're indeed your 'katana' clones, to do whatever you want with them, and likewise for all your other clone types: 'claymore' clones, 'tavern_maid' clones, 'giant_spider' clones, etc etc etc clones)\r\n\r\n```\r\n<object name=\"katana\">\r\n</object>\r\n\r\n<object name=\"claymore\">\r\n</object>\r\n\r\n<object name=\"tavern_maid\">\r\n</object>\r\n\r\n<object name=\"giant_spider\">\r\n</object>\r\n\r\n// scripting:\r\n\r\nif (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"katana\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name > LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\r\n  msg (\"This is a katana clone\")\r\n  // we needed the 'OBJECT_NAME_OR_this.name > LengthOf (OBJECT_NAME_OR_this)' because we don't want to include the original object. Since the clones have numbers on their names, they're longer than the original object's name ('katana2' is longer than 'katana'), and thus if we check that the object's name is longer than the original object's name, we know that object is a clone of our original object.\r\n  // if you do want to include the original object along with its clones, then do not have this second condition of checking the length of the object's name.\r\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"claymore\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name > LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\r\n  msg (\"This is a claymore clone\")\r\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"tavern_maid\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name > LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\r\n  msg (\"This is a tavern maid clone\")\r\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"giant_spider\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name > LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\r\n  msg (\"This is a giant spider clone\")\r\n}\r\n```\r\n\r\nand there's probably many more ways of using your clones, but these are generally the main ways of doing so",
      "EditableFormat": "markdown",
      "HTML": "<p>'this' is a special keyword/keycommand that GETS/RETURNS the Object (well, technically it returns its name/reference of the Object for you to use it) that contains your script using it (the 'this'), which makes it (the 'this') useful:</p>\n<p>for example, instead of doing this (no pun intended, lol. I don't know of any alternative word to use, lol):</p>\n<pre><code>&lt;object name=\"player1\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    player1.life_displayment = player1.current_life + \"/\" + player1.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    player1.life_displayment = player1.current_life + \"/\" + player1.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player2\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    player2.life_displayment = player2.current_life + \"/\" + player2.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    player2.life_displayment = player2.current_life + \"/\" + player2.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player3\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    player3.life_displayment = player3.current_life + \"/\" + player3.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    player3.life_displayment = player3.current_life + \"/\" + player3.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n</code></pre>\n<p>we can use 'this.ATRTIBUTE_NAME' instead of having to specifically use 'player.ATTRIBUTE_NAME', 'player2.ATTRIBUTE_NAME, and 'player3.ATTRIBUTE_NAME' for each of our Player Objects:</p>\n<pre><code>&lt;object name=\"player1\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player2\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player3\"&gt;\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/object&gt;\n</code></pre>\n<p>and we can reduce the amount of code further, by using Object Types:</p>\n<pre><code>&lt;object name=\"player1\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player2\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;object name=\"player3\"&gt;\n  &lt;inherit name=\"player_type\" /&gt;\n&lt;/object&gt;\n\n&lt;type name=\"player_type\"\n  &lt;attr name=\"current_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"maximum_life\" type=\"int\"&gt;999&lt;/attr&gt;\n  &lt;attr name=\"life_displayment\" type=\"string\"&gt;999/999&lt;/attr&gt;\n  &lt;attr name=\"changedcurrent_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;attr name=\"changedmaximum_life\" type=\"script\"&gt;\n    this.life_displayment = this.current_life + \"/\" + this.maximum_life\n  &lt;/attr&gt;\n  &lt;statusattributes type=\"simplestringdictionary\"&gt;life_displayment = Life: !&lt;/statusattributes&gt;\n&lt;/type&gt;\n</code></pre>\n<hr>\n<p>unfortunately, when you create Clones, they've got different names (original Object: axe, Clone Object 1: axe1, Clone Object 2: axe2, etc etc etc)</p>\n<p>so, you need an 'indicator/flag' to identify each of your clones...</p>\n<p>there's a few (well, many ways actually, lol) ways of doing this:</p>\n<ol>\n<li>you can have your original Object have a normal Attribute (String, Boolean, Integer, etc) as its indicator/flag (which all of the clones will have too):</li>\n</ol>\n<p>(I'll use a String Attribute for the example below, as it's the most useful one to use, for a simple game design anyways)</p>\n<pre><code>&lt;object name=\"katana\"&gt;\n  &lt;attr name=\"our_type_of_object_indicator_flag\" type=\"string\"&gt;sword&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"claymore\"&gt;\n  &lt;attr name=\"our_type_of_object_indicator_flag\" type=\"string\"&gt;sword&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"hand_axe\"&gt;\n  &lt;attr name=\"our_type_of_object_indicator_flag\" type=\"string\"&gt;axe&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"npc1\"&gt;\n  &lt;attr name=\"our_type_of_object_indicator_flag\" type=\"string\"&gt;npc&lt;/attr&gt;\n&lt;/object&gt;\n\n&lt;object name=\"monster1\"&gt;\n  &lt;attr name=\"our_type_of_object_indicator_flag\" type=\"string\"&gt;monster&lt;/attr&gt;\n&lt;/object&gt;\n\n// and your scripting (at where-ever you want it used), an example:\n\nif (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"sword\") {\n  // whatever script(s) you want here\n  // stupid example: msg (\"This is a sword.\")\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"axe\") {\n  // whatever script(s) you want here\n  // stupid example: msg (\"This is an axe.\")\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"npc\") {\n  // whatever script(s) you want here\n  // stupid example: msg (\"This is a NPC.\")\n} else if (GetString (DEPENDS_USE_OBJECT_NAME_OR_USE_this, our_type_of_object_indicator_flag) = \"monster\") {\n  // whatever script(s) you want here\n  // stupid example: msg (\"This is a monster.\")\n}\n</code></pre>\n<ol start=\"2\">\n<li>you can have your original Object have an Inherited Attribute (Object Type / Type) as its indicator/flag (which all of the clones will have too):</li>\n</ol>\n<pre><code>(this is just a quick limited example for this method, see #1 for seeing how a more expanded example looks - though you' use this code design instead of course) \n\n&lt;object name=\"katana\"&gt;\n&lt;/object&gt;\n\n&lt;type name=\"sword_type\"&gt;\n&lt;/type&gt;\n\n// scripting:\n\nif (DoesInherit (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"sword_type\")) {\n  msg (\"This is a sword.\")\n}\n</code></pre>\n<ol start=\"3\">\n<li>and there's this method too, using the Object's name itself as the indicator/flag and using the string manipulation Functions with it:</li>\n</ol>\n<p>http://docs.textadventures.co.uk/quest/functions/ (scroll down to the very bottom, to the 'string functions' section)</p>\n<p>(since, for example, 'katana' clones names are all like this: katana1 katana2 katana3 etc etc etc: they all start with 'katana' in their names. You can 'check' for if their names start with 'katana' to see if they're indeed your 'katana' clones, to do whatever you want with them, and likewise for all your other clone types: 'claymore' clones, 'tavern_maid' clones, 'giant_spider' clones, etc etc etc clones)</p>\n<pre><code>&lt;object name=\"katana\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"claymore\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"tavern_maid\"&gt;\n&lt;/object&gt;\n\n&lt;object name=\"giant_spider\"&gt;\n&lt;/object&gt;\n\n// scripting:\n\nif (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"katana\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name &gt; LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\n  msg (\"This is a katana clone\")\n  // we needed the 'OBJECT_NAME_OR_this.name &gt; LengthOf (OBJECT_NAME_OR_this)' because we don't want to include the original object. Since the clones have numbers on their names, they're longer than the original object's name ('katana2' is longer than 'katana'), and thus if we check that the object's name is longer than the original object's name, we know that object is a clone of our original object.\n  // if you do want to include the original object along with its clones, then do not have this second condition of checking the length of the object's name.\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"claymore\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name &gt; LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\n  msg (\"This is a claymore clone\")\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"tavern_maid\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name &gt; LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\n  msg (\"This is a tavern maid clone\")\n} else if  (StartsWith (DEPENDS_USE_OBJECT_NAME_OR_USE_this, \"giant_spider\") and DEPENDS_USE_OBJECT_NAME_OR_USE_this.name &gt; LengthOf (DEPENDS_USE_OBJECT_NAME_OR_USE_this)) {\n  msg (\"This is a giant spider clone\")\n}\n</code></pre>\n<p>and there's probably many more ways of using your clones, but these are generally the main ways of doing so</p>\n\n",
      "PostDate": "2016-08-26T18:30:27.138102Z",
      "LastEditDate": "2016-08-26T18:43:48.6200305Z"
    },
    {
      "PostId": "b9c20c2c-4565-42eb-8c05-0947d3bf8df7",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello HK thanks again for all the info but I cannot for the life of me reference the clone other then \"this\" in the object or like you said Stone Axe1, Stone Axe2, etc. I do have Object Type made and inherited called Basic Item Data which holds Boolan, Strings, Int and so on but can not figure out how to just call an Attribute reference without call Stone Axe itself. \r\nLike I tried pretty much every way I can think of following your examples, I know im probably messing things up but just not understanding it lol sorry.\r\n\r\n\r\nEDIT: Ok seems I found a temp fix by just destroying the cloned actor before making a new one, I been reading around and found this post kinda same issues http://textadventures.co.uk/forum/quest/topic/3647/expression-this-in-functions cloning is a little more difficult then I expected lol. Would still like to understand better about clones and referencing them and loops, I am reading docs some is confusing while some is very short. Thanks Again\r\nMike",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello HK thanks again for all the info but I cannot for the life of me reference the clone other then \"this\" in the object or like you said Stone Axe1, Stone Axe2, etc. I do have Object Type made and inherited called Basic Item Data which holds Boolan, Strings, Int and so on but can not figure out how to just call an Attribute reference without call Stone Axe itself.<br>\nLike I tried pretty much every way I can think of following your examples, I know im probably messing things up but just not understanding it lol sorry.</p>\n<p>EDIT: Ok seems I found a temp fix by just destroying the cloned actor before making a new one, I been reading around and found this post kinda same issues http://textadventures.co.uk/forum/quest/topic/3647/expression-this-in-functions cloning is a little more difficult then I expected lol. Would still like to understand better about clones and referencing them and loops, I am reading docs some is confusing while some is very short. Thanks Again<br>\nMike</p>\n\n",
      "PostDate": "2016-08-27T01:13:16.772498Z",
      "LastEditDate": "2016-08-27T05:35:25.8815403Z"
    },
    {
      "PostId": "b8e83652-b032-4a11-86a6-b085d8bed281",
      "UserId": 247325,
      "Username": "hegemonkhan",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a96cf34d8d97c57de38f54ee22b1759b?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\nyou can use an Object Attribute (or an Objectlist Attribute if you want to store/hold multiple references/pointers of Objects / clone Objects) to store/hold the (just like a pointer if you know programming, a reference to the) clone object, which you can then use for whatever, for a simple example:\r\n\r\ndata_object.example_clone_pointer_object_attribute = Clone (axe)\r\nmsg (\"Clone's Name: \" + data_object.example_clone_pointer_object_attribute.name)\r\ndestroy (data_object.example_clone_pointer_object_attributer.name)\r\n\r\n// output: Clone's Name: axe2 // or whatever number the clone function starts with, lol (I've never used cloning yet, laughs)\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>you can use an Object Attribute (or an Objectlist Attribute if you want to store/hold multiple references/pointers of Objects / clone Objects) to store/hold the (just like a pointer if you know programming, a reference to the) clone object, which you can then use for whatever, for a simple example:\n\ndata_object.example_clone_pointer_object_attribute = Clone (axe)\nmsg (\"Clone's Name: \" + data_object.example_clone_pointer_object_attribute.name)\ndestroy (data_object.example_clone_pointer_object_attributer.name)\n\n// output: Clone's Name: axe2 // or whatever number the clone function starts with, lol (I've never used cloning yet, laughs)\n</code></pre>\n\n",
      "PostDate": "2016-08-27T06:19:31.1375472Z",
      "LastEditDate": "2016-08-27T06:26:02.8899883Z"
    },
    {
      "PostId": "134a4816-79f2-4c9b-8157-aec54ee6eacb",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "In the script that you create the clone, you can assign it to a local variable, and do stuff with that.\r\n```\r\nnew_object = Clone(axe)\r\nnew_object.alias = axe.name\r\nnew_object.parent = player.parent\r\n```\r\nAs it happens, there is a helper function that does all that.\r\n```\r\nnew_object = CloneObjectAndMove(axe, player.parent)\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>In the script that you create the clone, you can assign it to a local variable, and do stuff with that.</p>\n<pre><code>new_object = Clone(axe)\nnew_object.alias = axe.name\nnew_object.parent = player.parent\n</code></pre>\n<p>As it happens, there is a helper function that does all that.</p>\n<pre><code>new_object = CloneObjectAndMove(axe, player.parent)\n</code></pre>\n\n",
      "PostDate": "2016-08-27T07:50:35.2364863Z",
      "LastEditDate": null
    },
    {
      "PostId": "7641c479-aa25-49a5-9b91-1e7e017c6cc5",
      "UserId": 26011,
      "Username": "onimike",
      "AvatarUrl": "https://secure.gravatar.com/avatar/81a1a7d9be523aa5ac1d92fa2660b397?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Thank you HK and Pixie sorry for my noobness lol I think I can get it now ;)",
      "EditableFormat": "markdown",
      "HTML": "<p>Thank you HK and Pixie sorry for my noobness lol I think I can get it now ;)</p>\n\n",
      "PostDate": "2016-08-27T15:18:33.5183214Z",
      "LastEditDate": null
    }
  ]
}
