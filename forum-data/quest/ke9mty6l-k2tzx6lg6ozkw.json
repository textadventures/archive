{
  "Topic": {
    "TopicId": "ke9mty6l-k2tzx6lg6ozkw",
    "ForumId": "10",
    "Title": "SolvedCannot convert type 'String' to expression result of 'IScript'. Calling vs Invoking Functions and using variables.",
    "LastUpdated": "2021-07-21T16:44:36.4539351Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "9a2a3d07-e8ff-405d-b86b-4bf6aa554f5d",
      "UserId": 327530,
      "Username": "D4r4dragon",
      "AvatarUrl": "https://i.imgur.com/wvI4YAtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "So I had another off the wall idea about combat menus that then call scripts based off the ```result```. But the regular script function doesn't do it, but then I saw the invoking one and tried it but got the above Error. I'm guessing something is off similar to with doing this with objects, but I can't find anything about turning a string to a function like with ```GetObject()```.\r\n\r\nAlso, I've been poking about Quest's core files to try and learn how they work and been wondering where ```GetObject()``` is.\r\n\r\nIn the end I'm using eval, and my errors were caused by trying to invoke things when I didn't need and it messed things up.",
      "EditableFormat": "markdown",
      "HTML": "<p>So I had another off the wall idea about combat menus that then call scripts based off the <code>result</code>. But the regular script function doesn't do it, but then I saw the invoking one and tried it but got the above Error. I'm guessing something is off similar to with doing this with objects, but I can't find anything about turning a string to a function like with <code>GetObject()</code>.</p>\n<p>Also, I've been poking about Quest's core files to try and learn how they work and been wondering where <code>GetObject()</code> is.</p>\n<p>In the end I'm using eval, and my errors were caused by trying to invoke things when I didn't need and it messed things up.</p>\n\n",
      "PostDate": "2021-07-21T16:44:36.4539351Z",
      "LastEditDate": "2021-07-30T21:36:05.2971162Z",
      "link": null
    },
    {
      "PostId": "9677ae31-b10d-422f-874e-4f07f4065dc3",
      "UserId": 1346,
      "Username": "The Pixie",
      "AvatarUrl": "https://secure.gravatar.com/avatar/cfa37e927f96177bcf6053ae8f108f77?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Quest 5 is written in C#, and some of the functions only exist there, rather than in the .aslx files, so that is where getObject() is.\r\nhttp://docs.textadventures.co.uk/quest/functions/hardcoded.html\r\n\r\nThe error you have is also from C#, and means something at that level; not so much at the Quest level. More on that towards the end of this page:\r\nhttp://docs.textadventures.co.uk/quest/problems.html\r\n\r\nI am not sure quite what you want to do, but `Eval` may be the way forward. \r\nhttp://docs.textadventures.co.uk/quest/functions/eval.html",
      "EditableFormat": "markdown",
      "HTML": "<p>Quest 5 is written in C#, and some of the functions only exist there, rather than in the .aslx files, so that is where getObject() is.<br>\nhttp://docs.textadventures.co.uk/quest/functions/hardcoded.html</p>\n<p>The error you have is also from C#, and means something at that level; not so much at the Quest level. More on that towards the end of this page:<br>\nhttp://docs.textadventures.co.uk/quest/problems.html</p>\n<p>I am not sure quite what you want to do, but <code>Eval</code> may be the way forward.<br>\nhttp://docs.textadventures.co.uk/quest/functions/eval.html</p>\n\n",
      "PostDate": "2021-07-21T17:36:22.7888054Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "46be0fa5-616b-41e9-835c-464833636b2d",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hello.\r\n\r\n>  I've been poking about Quest's core files to try and learn how they work and been wondering where GetObject() is.\r\n\r\n```GetObject``` is not in a Quest library. It is a C# thing:\r\n\r\nhttps://github.com/textadventures/quest/blob/28b466b83125efdaf9bcdec1013b81e207cbfe09/WorldModel/WorldModel/Fields.cs#L731\r\n\r\n\r\n---\r\n> So I had another off the wall idea about combat menus that then call scripts based off the result. But the regular script function doesn't do it, but then I saw the invoking one and tried it but got the above Error.\r\n\r\n>> ```then I saw the invoking one and tried it but got the above Error```\r\n\r\nDo you have any code to post, so we can see how we might help?\r\n\r\nI'm assuming you're talking about using ```invoke```.\r\n\r\nhttps://docs.textadventures.co.uk/quest/scripts/invoke.html\r\n\r\n---\r\nIf the script is an object attribute, I prefer using ```do```, which is mostly the same, except the script being invoked can use ```this``` if the script is an object's attribute (this also applies to verbs).\r\n\r\nhttps://docs.textadventures.co.uk/quest/scripts/do.html\r\n\r\n---\r\nSince you are dealing with combat menus, I assume you are attempting to invoke scripts which are an object's script attributes (or verbs), but I'm not certain.\r\n\r\nThis may or may not help (click \"Details\" to view example game):\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.7753.35184-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"do the object's script attribute\">\r\n    <gameid>d0c51440-955c-479e-8fdb-e63b64422353</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n    </object>\r\n    <object name=\"frob\">\r\n      <inherit name=\"editor_object\" />\r\n      <test1 type=\"script\">\r\n        msg (\"This is frob.test1.\")\r\n      </test1>\r\n      <test2 type=\"script\">\r\n        msg (\"This is frob.test2.\")\r\n      </test2>\r\n      <look type=\"script\">\r\n        choices = NewStringList()\r\n        list add (choices, \"test1\")\r\n        list add (choices, \"test2\")\r\n        game.tempObj = this\r\n        ShowMenu (\"Pick one.\", choices, false) {\r\n          result = LCase(Trim(result))\r\n          do (game.tempObj, result)\r\n          game.tempObj = null\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\n**EDIT**\r\n\r\nPixie posted while I was writing. Pixie knows more about Quest than I could ever learn. Heed the Pixie's advice.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hello.</p>\n<blockquote>\n<p>I've been poking about Quest's core files to try and learn how they work and been wondering where GetObject() is.</p>\n</blockquote>\n<p><code>GetObject</code> is not in a Quest library. It is a C# thing:</p>\n<p>https://github.com/textadventures/quest/blob/28b466b83125efdaf9bcdec1013b81e207cbfe09/WorldModel/WorldModel/Fields.cs#L731</p>\n<hr>\n<blockquote>\n<p>So I had another off the wall idea about combat menus that then call scripts based off the result. But the regular script function doesn't do it, but then I saw the invoking one and tried it but got the above Error.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><code>then I saw the invoking one and tried it but got the above Error</code></p>\n</blockquote>\n</blockquote>\n<p>Do you have any code to post, so we can see how we might help?</p>\n<p>I'm assuming you're talking about using <code>invoke</code>.</p>\n<p>https://docs.textadventures.co.uk/quest/scripts/invoke.html</p>\n<hr>\n<p>If the script is an object attribute, I prefer using <code>do</code>, which is mostly the same, except the script being invoked can use <code>this</code> if the script is an object's attribute (this also applies to verbs).</p>\n<p>https://docs.textadventures.co.uk/quest/scripts/do.html</p>\n<hr>\n<p>Since you are dealing with combat menus, I assume you are attempting to invoke scripts which are an object's script attributes (or verbs), but I'm not certain.</p>\n<p>This may or may not help (click \"Details\" to view example game):</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.7753.35184--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"do the object's script attribute\"&gt;\n    &lt;gameid&gt;d0c51440-955c-479e-8fdb-e63b64422353&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n    &lt;/object&gt;\n    &lt;object name=\"frob\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;test1 type=\"script\"&gt;\n        msg (\"This is frob.test1.\")\n      &lt;/test1&gt;\n      &lt;test2 type=\"script\"&gt;\n        msg (\"This is frob.test2.\")\n      &lt;/test2&gt;\n      &lt;look type=\"script\"&gt;\n        choices = NewStringList()\n        list add (choices, \"test1\")\n        list add (choices, \"test2\")\n        game.tempObj = this\n        ShowMenu (\"Pick one.\", choices, false) {\n          result = LCase(Trim(result))\n          do (game.tempObj, result)\n          game.tempObj = null\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>Pixie posted while I was writing. Pixie knows more about Quest than I could ever learn. Heed the Pixie's advice.</p>\n\n",
      "PostDate": "2021-07-21T17:42:21.2669133Z",
      "LastEditDate": "2021-07-21T23:06:30.9134734Z",
      "link": null
    },
    {
      "PostId": "ed123fd1-b321-4426-8e2e-15298d5f49bc",
      "UserId": 327530,
      "Username": "D4r4dragon",
      "AvatarUrl": "https://i.imgur.com/wvI4YAtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Close, but no, I do have that somewhere else in the system, but I was wanting to just let players get a string list of actions they can take in combat, aka, skills and stuff, which are displayed in a menu easily. Then I wanted to take the result and just turn it to a function rather then have an if else train.\r\n\r\nI also knew this was going to be a sideways thing and made a new game to test around with this idea.\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        ShowMenu (\"do what\", options, true) {\r\n          invoke (result)\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n  <function name=\"Attack\">\r\n    msg (\"You attacked\")\r\n  </function>\r\n  <function name=\"Defend\">\r\n    msg (\"you defended\")\r\n  </function>\r\n  <function name=\"Flee\">\r\n    msg (\"you ran away\")\r\n  </function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Close, but no, I do have that somewhere else in the system, but I was wanting to just let players get a string list of actions they can take in combat, aka, skills and stuff, which are displayed in a menu easily. Then I wanted to take the result and just turn it to a function rather then have an if else train.</p>\n<p>I also knew this was going to be a sideways thing and made a new game to test around with this idea.</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        ShowMenu (\"do what\", options, true) {\n          invoke (result)\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n  &lt;function name=\"Attack\"&gt;\n    msg (\"You attacked\")\n  &lt;/function&gt;\n  &lt;function name=\"Defend\"&gt;\n    msg (\"you defended\")\n  &lt;/function&gt;\n  &lt;function name=\"Flee\"&gt;\n    msg (\"you ran away\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2021-07-21T18:19:06.4402703Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "9f58aa43-e6a1-4a8b-b5fa-1e53afe3e323",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Close, but no?\r\n\r\nI was *very* close, considering I hadn't seen your code.\r\n\r\n... especially considering I just modified your code using my method to make stuff actually work. :)\r\n\r\nAlso, I didn't use any ```if``` statements, nor did I advise that anyone use any ```if``` statements (yet).\r\n\r\nTry this modified version of the example you just posted:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <Attack type=\"script\">Attack</Attack>\r\n      <Defend type=\"script\">Defend</Defend>\r\n      <Flee type=\"script\">Flee</Flee>\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        game.tempObject = this\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        ShowMenu (\"do what\", options, true) {\r\n\r\n          do (game.tempObject, result)\r\n          game.tempObject = null\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n  <function name=\"Attack\">\r\n    msg (\"You attacked\")\r\n  </function>\r\n  <function name=\"Defend\">\r\n    msg (\"you defended\")\r\n  </function>\r\n  <function name=\"Flee\">\r\n    msg (\"you ran away\")\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nYou could also do it without the standalone functions, like this:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <Attack type=\"script\">\r\n        msg (\"You attacked\")\r\n      </Attack>\r\n      <Defend type=\"script\">\r\n        msg (\"you defended\")\r\n      </Defend>\r\n      <Flee type=\"script\">\r\n        msg (\"you ran away\")\r\n      </Flee>\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        game.tempObject = this\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        ShowMenu (\"do what\", options, true) {\r\n\r\n          do (game.tempObject, result)\r\n          game.tempObject = null\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n</asl>\r\n```\r\n\r\n</details>\r\n\r\n---\r\nYou could also do it several other ways.",
      "EditableFormat": "markdown",
      "HTML": "<p>Close, but no?</p>\n<p>I was <em>very</em> close, considering I hadn't seen your code.</p>\n<p>... especially considering I just modified your code using my method to make stuff actually work. :)</p>\n<p>Also, I didn't use any <code>if</code> statements, nor did I advise that anyone use any <code>if</code> statements (yet).</p>\n<p>Try this modified version of the example you just posted:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;Attack type=\"script\"&gt;Attack&lt;/Attack&gt;\n      &lt;Defend type=\"script\"&gt;Defend&lt;/Defend&gt;\n      &lt;Flee type=\"script\"&gt;Flee&lt;/Flee&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        game.tempObject = this\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        ShowMenu (\"do what\", options, true) {\n\n          do (game.tempObject, result)\n          game.tempObject = null\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n  &lt;function name=\"Attack\"&gt;\n    msg (\"You attacked\")\n  &lt;/function&gt;\n  &lt;function name=\"Defend\"&gt;\n    msg (\"you defended\")\n  &lt;/function&gt;\n  &lt;function name=\"Flee\"&gt;\n    msg (\"you ran away\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>You could also do it without the standalone functions, like this:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;Attack type=\"script\"&gt;\n        msg (\"You attacked\")\n      &lt;/Attack&gt;\n      &lt;Defend type=\"script\"&gt;\n        msg (\"you defended\")\n      &lt;/Defend&gt;\n      &lt;Flee type=\"script\"&gt;\n        msg (\"you ran away\")\n      &lt;/Flee&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        game.tempObject = this\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        ShowMenu (\"do what\", options, true) {\n\n          do (game.tempObject, result)\n          game.tempObject = null\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n<hr>\n<p>You could also do it several other ways.</p>\n\n",
      "PostDate": "2021-07-21T19:13:01.2607072Z",
      "LastEditDate": "2021-07-21T19:42:07.8457141Z",
      "link": null
    },
    {
      "PostId": "f4a9ca97-ed17-4e90-92c5-6119ce600564",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> I wanted to take the result and just turn it to a function rather then have an if else train.\r\n\r\nYou can't directly refer to a function in this way, because a Quest variable can't hold a function (and there is no way to get any kind of reference to a function into a variable).\r\n\r\nYou can do it with *scripts*, but not functions. Two common ways to do something like this would be…\r\n\r\n**1. Using an object**\r\nIf you have an object, you can use `do` or `invoke` to activate its script attributes.\r\nFrom the error message in the topic, I guess that you're passing a string to `invoke`.\r\n\r\nYou would need to make the actual script a script attribute of some object, and then either use the result selected by the player to choose the object, or the attribute. For example:\r\n```\r\n<object name=\"CombatActions\">\r\n  <attack type=\"script\">\r\n    msg (\"You attacked\")\r\n  </attack>\r\n  <defend type=\"script\">\r\n    msg (\"you defended\")\r\n  </defend>\r\n  <flee type=\"script\">\r\n    msg (\"you ran away\")\r\n  </flee>\r\n</object>\r\n```\r\nand then your script would look like:\r\n```\r\n  options = NewStringList()\r\n  foreach (action, this.CombatActions) {\r\n    if (HasScript (CombatActions, action)) {\r\n      list add (options, LCase (action))\r\n    }\r\n  }\r\n  ShowMenu (\"do what\", options, true) {\r\n    do (CombatActions, result)\r\n  }\r\n```\r\n\r\n**2. Using a scriptdictionary**\r\nYou can also create a scriptdictionary; which is a dictionary whose elements are scripts. You can then use `ScriptDictionaryItem` to extract the script that matches your string.\r\n\r\nOr there is a third option:\r\n**3. Using `eval`**\r\n`eval` treats a string as a Quest *expression*, so it will kind of work.\r\n\r\nThis is the only method that works with functions rather than scripts – but I think one of the oddities of Quest is that void functions aren't valid in expressions. In other words, you need to give all of your functions a type, and make them return something, even if you don't want to use the return value.\r\n\r\nSo you could do something like:\r\n```\r\nShowMenu (\"Do what?\", options, true) {\r\n  somevariable = eval (result + \"()\")\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>I wanted to take the result and just turn it to a function rather then have an if else train.</p>\n</blockquote>\n<p>You can't directly refer to a function in this way, because a Quest variable can't hold a function (and there is no way to get any kind of reference to a function into a variable).</p>\n<p>You can do it with <em>scripts</em>, but not functions. Two common ways to do something like this would be…</p>\n<p><strong>1. Using an object</strong><br>\nIf you have an object, you can use <code>do</code> or <code>invoke</code> to activate its script attributes.<br>\nFrom the error message in the topic, I guess that you're passing a string to <code>invoke</code>.</p>\n<p>You would need to make the actual script a script attribute of some object, and then either use the result selected by the player to choose the object, or the attribute. For example:</p>\n<pre><code>&lt;object name=\"CombatActions\"&gt;\n  &lt;attack type=\"script\"&gt;\n    msg (\"You attacked\")\n  &lt;/attack&gt;\n  &lt;defend type=\"script\"&gt;\n    msg (\"you defended\")\n  &lt;/defend&gt;\n  &lt;flee type=\"script\"&gt;\n    msg (\"you ran away\")\n  &lt;/flee&gt;\n&lt;/object&gt;\n</code></pre>\n<p>and then your script would look like:</p>\n<pre><code>  options = NewStringList()\n  foreach (action, this.CombatActions) {\n    if (HasScript (CombatActions, action)) {\n      list add (options, LCase (action))\n    }\n  }\n  ShowMenu (\"do what\", options, true) {\n    do (CombatActions, result)\n  }\n</code></pre>\n<p><strong>2. Using a scriptdictionary</strong><br>\nYou can also create a scriptdictionary; which is a dictionary whose elements are scripts. You can then use <code>ScriptDictionaryItem</code> to extract the script that matches your string.</p>\n<p>Or there is a third option:<br>\n<strong>3. Using <code>eval</code></strong><br>\n<code>eval</code> treats a string as a Quest <em>expression</em>, so it will kind of work.</p>\n<p>This is the only method that works with functions rather than scripts – but I think one of the oddities of Quest is that void functions aren't valid in expressions. In other words, you need to give all of your functions a type, and make them return something, even if you don't want to use the return value.</p>\n<p>So you could do something like:</p>\n<pre><code>ShowMenu (\"Do what?\", options, true) {\n  somevariable = eval (result + \"()\")\n}\n</code></pre>\n\n",
      "PostDate": "2021-07-21T19:20:19.9899154Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "03d1be94-aefa-437f-87af-75150110825f",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nYour ```Explore``` command's pattern is all messed up, unless you want the player to have to actually enter this:\r\n\r\n```\r\n> look, seek, explore, check\r\nYou look around\r\n\r\n```\r\n\r\n---\r\nI would change the pattern to ```seek;explore;check```.\r\n\r\nI excluded the word \"look\", because that would override the default ```look``` command, which would make most adventurers immediately dislike the game.\r\n\r\nAnyway, if you change the pattern to ```seek;explore;check```, it works like this:\r\n\r\n```\r\n> seek\r\nYou look around\r\n\r\n> explore\r\nYou look around\r\n\r\n> check\r\nYou look around\r\n\r\n> look\r\nYou are in a room.\r\nYou can see a stick.\r\nYou are in room.\r\n\r\n```\r\n\r\n---\r\nhttps://docs.textadventures.co.uk/quest/tutorial/custom_commands.html#alternative-command-patterns",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>Your <code>Explore</code> command's pattern is all messed up, unless you want the player to have to actually enter this:</p>\n<pre><code>&gt; look, seek, explore, check\nYou look around\n\n</code></pre>\n<hr>\n<p>I would change the pattern to <code>seek;explore;check</code>.</p>\n<p>I excluded the word \"look\", because that would override the default <code>look</code> command, which would make most adventurers immediately dislike the game.</p>\n<p>Anyway, if you change the pattern to <code>seek;explore;check</code>, it works like this:</p>\n<pre><code>&gt; seek\nYou look around\n\n&gt; explore\nYou look around\n\n&gt; check\nYou look around\n\n&gt; look\nYou are in a room.\nYou can see a stick.\nYou are in room.\n\n</code></pre>\n<hr>\n<p>https://docs.textadventures.co.uk/quest/tutorial/custom_commands.html#alternative-command-patterns</p>\n\n",
      "PostDate": "2021-07-21T19:20:39.4959972Z",
      "LastEditDate": "2021-07-21T19:23:26.3799661Z",
      "link": null
    },
    {
      "PostId": "b51774c7-1688-449c-ad4b-757f76ff0313",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PPS\r\n\r\nI see mrangel was writing a post at the same time I was writing mine.\r\n\r\nI always defer to mrangel, and everyone else should do the same.\r\n\r\n:o)",
      "EditableFormat": "markdown",
      "HTML": "<p>PPS</p>\n<p>I see mrangel was writing a post at the same time I was writing mine.</p>\n<p>I always defer to mrangel, and everyone else should do the same.</p>\n<p>:o)</p>\n\n",
      "PostDate": "2021-07-21T19:22:25.6754708Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "2fb94c7f-6569-4b9d-8131-e28c0891da29",
      "UserId": 327530,
      "Username": "D4r4dragon",
      "AvatarUrl": "https://i.imgur.com/wvI4YAtb.jpg",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "mrangle has helped me several times already with my inquiries.\r\n\r\nAnd eval seems to be what I want, but I have no idea what I'm doing and I'm getting the same error in int32 verson and a new one ```Error running script: Error evaluating expression 'eval (result + \"()\")': Error evaluating expression 'Attack()': Value type of 'QuestList`1' is not assignable to required type of 'QuestList`1'``` Which is a bunch of words, yes.\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        ShowMenu (\"do what\", options, true) {\r\n          dothis = eval (result + \"()\") //this is eval thing\r\n          invoke (dothis, work)\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n  <function name=\"Attack\" type=\"list\"> //changing this thing's type makes new errors...\r\n    msg (\"You attacked\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n  <function name=\"Defend\">\r\n    msg (\"you defended\")\r\n  </function>\r\n  <function name=\"Flee\">\r\n    msg (\"you ran away\")\r\n  </function>\r\n</asl>\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>mrangle has helped me several times already with my inquiries.</p>\n<p>And eval seems to be what I want, but I have no idea what I'm doing and I'm getting the same error in int32 verson and a new one <code>Error running script: Error evaluating expression 'eval (result + \"()\")': Error evaluating expression 'Attack()': Value type of 'QuestList`1' is not assignable to required type of 'QuestList`1'</code> Which is a bunch of words, yes.</p>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        ShowMenu (\"do what\", options, true) {\n          dothis = eval (result + \"()\") //this is eval thing\n          invoke (dothis, work)\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n  &lt;function name=\"Attack\" type=\"list\"&gt; //changing this thing's type makes new errors...\n    msg (\"You attacked\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n  &lt;function name=\"Defend\"&gt;\n    msg (\"you defended\")\n  &lt;/function&gt;\n  &lt;function name=\"Flee\"&gt;\n    msg (\"you ran away\")\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n\n",
      "PostDate": "2021-07-22T16:51:14.3461624Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4793cd6b-0766-4752-9b4a-b753cd06871b",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Your ```Attack``` function's **type** is \"list\" when it should be \"stringlist\".\r\n\r\nYou didn't have ```Defend``` and ```Flee``` coded the same way as ```Attack```, either, but I'm guessing this is because you were just testing ```Attack``` to get it working first.\r\n\r\nAlso, you don't need the ```invoke (dothis, work)``` line of code at all.\r\n\r\nI made those changes, and it works for me.\r\n\r\nExample:\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.0</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        ShowMenu (\"do what\", options, true) {\r\n          dothis = eval (result + \"()\") //this is eval thing\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n  <function name=\"Attack\" type=\"stringlist\"> //changing this thing's type makes new errors...\r\n    msg (\"You attacked\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n  <function name=\"Defend\" type=\"stringlist\">\r\n    msg (\"you defended\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n  <function name=\"Flee\" type=\"stringlist\">\r\n    msg (\"you ran away\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>Your <code>Attack</code> function's <strong>type</strong> is \"list\" when it should be \"stringlist\".</p>\n<p>You didn't have <code>Defend</code> and <code>Flee</code> coded the same way as <code>Attack</code>, either, but I'm guessing this is because you were just testing <code>Attack</code> to get it working first.</p>\n<p>Also, you don't need the <code>invoke (dothis, work)</code> line of code at all.</p>\n<p>I made those changes, and it works for me.</p>\n<p>Example:</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        ShowMenu (\"do what\", options, true) {\n          dothis = eval (result + \"()\") //this is eval thing\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n  &lt;function name=\"Attack\" type=\"stringlist\"&gt; //changing this thing's type makes new errors...\n    msg (\"You attacked\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n  &lt;function name=\"Defend\" type=\"stringlist\"&gt;\n    msg (\"you defended\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n  &lt;function name=\"Flee\" type=\"stringlist\"&gt;\n    msg (\"you ran away\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-07-22T19:13:40.8302481Z",
      "LastEditDate": "2021-07-22T19:22:28.9911061Z",
      "link": null
    },
    {
      "PostId": "2351d2b9-4d84-4ff9-a3cf-c69a150fefad",
      "UserId": 518866,
      "Username": "K.V.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/a97688aadc8152436180b511021e94a7?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "PS\r\n\r\nIf you change it like the following example, your functions will know which object they are dealing with.\r\n\r\n<details>\r\n\r\n```\r\n<!--Saved by Quest 5.8.6836.13983-->\r\n<asl version=\"580\">\r\n  <include ref=\"English.aslx\" />\r\n  <include ref=\"Core.aslx\" />\r\n  <game name=\"Syntaxing\">\r\n    <gameid>1caf0f1c-ceee-49d4-b6d1-236bacb0a368</gameid>\r\n    <version>1.1</version>\r\n    <firstpublished>2021</firstpublished>\r\n  </game>\r\n  <object name=\"room\">\r\n    <inherit name=\"editor_room\" />\r\n    <isroom />\r\n    <description type=\"script\">\r\n      msg (\"You are in \" + this.name + \".\")\r\n    </description>\r\n    <object name=\"player\">\r\n      <inherit name=\"editor_object\" />\r\n      <inherit name=\"editor_player\" />\r\n      <look type=\"script\">\r\n        msg (\"you are \" + this.name + \".\")\r\n        this = GetScript (result)\r\n      </look>\r\n    </object>\r\n    <object name=\"stick\">\r\n      <inherit name=\"editor_object\" />\r\n      <CombatActions type=\"stringlist\">\r\n        <value>Attack</value>\r\n        <value>Defend</value>\r\n        <value>Flee</value>\r\n      </CombatActions>\r\n      <look type=\"script\">\r\n        options = NewStringList()\r\n        foreach (action, this.CombatActions) {\r\n          list add (options, action)\r\n        }\r\n        game.tempObj = this.name\r\n        ShowMenu (\"do what\", options, true) {\r\n          dothis = eval (result + \"(\"+ game.tempObj + \")\") //this is eval thing\r\n          game.tempObj = null\r\n        }\r\n      </look>\r\n    </object>\r\n  </object>\r\n  <command name=\"Explore\">\r\n    <pattern>Look, seek, explore, check</pattern>\r\n    <script>\r\n      msg (\"You look around\")\r\n    </script>\r\n  </command>\r\n  <verb />\r\n  <type name=\"ggg\" />\r\n  <function name=\"Attack\" parameters=\"obj\" type=\"stringlist\"> //changing this thing's type makes new errors...\r\n    msg (\"You attacked \" + GetDefiniteName(obj) + \".\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n  <function name=\"Defend\" parameters=\"obj\" type=\"stringlist\">\r\n    msg (\"You defended yourself from \" + GetDefiniteName(obj) + \".\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n  <function name=\"Flee\" parameters=\"obj\" type=\"stringlist\">\r\n    msg (\"You ran away from \" + GetDefiniteName(obj) + \".\")\r\n    work = NewStringList()\r\n    return (work)\r\n  </function>\r\n</asl>\r\n```\r\n\r\n</details>",
      "EditableFormat": "markdown",
      "HTML": "<p>PS</p>\n<p>If you change it like the following example, your functions will know which object they are dealing with.</p>\n<details>\n<pre><code>&lt;!--Saved by Quest 5.8.6836.13983--&gt;\n&lt;asl version=\"580\"&gt;\n  &lt;include ref=\"English.aslx\" /&gt;\n  &lt;include ref=\"Core.aslx\" /&gt;\n  &lt;game name=\"Syntaxing\"&gt;\n    &lt;gameid&gt;1caf0f1c-ceee-49d4-b6d1-236bacb0a368&lt;/gameid&gt;\n    &lt;version&gt;1.1&lt;/version&gt;\n    &lt;firstpublished&gt;2021&lt;/firstpublished&gt;\n  &lt;/game&gt;\n  &lt;object name=\"room\"&gt;\n    &lt;inherit name=\"editor_room\" /&gt;\n    &lt;isroom /&gt;\n    &lt;description type=\"script\"&gt;\n      msg (\"You are in \" + this.name + \".\")\n    &lt;/description&gt;\n    &lt;object name=\"player\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;inherit name=\"editor_player\" /&gt;\n      &lt;look type=\"script\"&gt;\n        msg (\"you are \" + this.name + \".\")\n        this = GetScript (result)\n      &lt;/look&gt;\n    &lt;/object&gt;\n    &lt;object name=\"stick\"&gt;\n      &lt;inherit name=\"editor_object\" /&gt;\n      &lt;CombatActions type=\"stringlist\"&gt;\n        &lt;value&gt;Attack&lt;/value&gt;\n        &lt;value&gt;Defend&lt;/value&gt;\n        &lt;value&gt;Flee&lt;/value&gt;\n      &lt;/CombatActions&gt;\n      &lt;look type=\"script\"&gt;\n        options = NewStringList()\n        foreach (action, this.CombatActions) {\n          list add (options, action)\n        }\n        game.tempObj = this.name\n        ShowMenu (\"do what\", options, true) {\n          dothis = eval (result + \"(\"+ game.tempObj + \")\") //this is eval thing\n          game.tempObj = null\n        }\n      &lt;/look&gt;\n    &lt;/object&gt;\n  &lt;/object&gt;\n  &lt;command name=\"Explore\"&gt;\n    &lt;pattern&gt;Look, seek, explore, check&lt;/pattern&gt;\n    &lt;script&gt;\n      msg (\"You look around\")\n    &lt;/script&gt;\n  &lt;/command&gt;\n  &lt;verb /&gt;\n  &lt;type name=\"ggg\" /&gt;\n  &lt;function name=\"Attack\" parameters=\"obj\" type=\"stringlist\"&gt; //changing this thing's type makes new errors...\n    msg (\"You attacked \" + GetDefiniteName(obj) + \".\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n  &lt;function name=\"Defend\" parameters=\"obj\" type=\"stringlist\"&gt;\n    msg (\"You defended yourself from \" + GetDefiniteName(obj) + \".\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n  &lt;function name=\"Flee\" parameters=\"obj\" type=\"stringlist\"&gt;\n    msg (\"You ran away from \" + GetDefiniteName(obj) + \".\")\n    work = NewStringList()\n    return (work)\n  &lt;/function&gt;\n&lt;/asl&gt;\n</code></pre>\n</details>\n\n",
      "PostDate": "2021-07-22T19:21:57.76232Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "21a29bb6-d8e7-4a7f-b9d2-b9d4df7a2408",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "KV beat me to it  :)\r\n\r\nThough I have no idea why stringlist and list aren't assignable. As far as I remember, a stringlist is internally a `QuestList<String>`, in which case testing if it's a QuestList should work.\r\n\r\n(when doing stuff like this, I normally make the type boolean; so I can just do `return (true)` without needing to create a temporary variable)",
      "EditableFormat": "markdown",
      "HTML": "<p>KV beat me to it  :)</p>\n<p>Though I have no idea why stringlist and list aren't assignable. As far as I remember, a stringlist is internally a <code>QuestList&lt;String&gt;</code>, in which case testing if it's a QuestList should work.</p>\n<p>(when doing stuff like this, I normally make the type boolean; so I can just do <code>return (true)</code> without needing to create a temporary variable)</p>\n\n",
      "PostDate": "2021-07-22T22:34:48.5875884Z",
      "LastEditDate": null,
      "link": null
    }
  ]
}
