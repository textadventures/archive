{
  "Topic": {
    "TopicId": "9cdg16kmhuo52ijizyfdgg",
    "ForumId": "10",
    "Title": "[Solved] Can't figure why this script isn't working",
    "LastUpdated": "2021-11-15T10:10:15.1562012Z",
    "ReplyCount": 0
  },
  "Posts": [
    {
      "PostId": "199ef216-e585-4a00-90b3-b78d75647534",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I give two examples. One is working perfectly, the other one doesn't.\r\n\r\n**This works perfectly:**\r\n```\r\ngame.minute = 0\r\ngame.minute_string = \"0\" + ToString(game.minute)\r\ngame.changedminute => {\r\n  if (game.minute > 59) {\r\n    game.hour = game.hour + 1\r\n    game.minute = 0\r\n  }\r\n  if (game.minute < 10) {\r\n    game.minute_string = \"0\" + ToString(game.minute)\r\n  }\r\n  if (game.minute > 9) {\r\n    game.minute_string = ToString(game.minute)\r\n  }\r\n}\r\ngame.changedminute_string => {\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\ngame.minute_increase = 0\r\ngame.changedminute_increase => {\r\n  if (game.minute_increase > 0) {\r\n    game.minute = game.minute + 1\r\n    game.minute_increase = game.minute_increase - 1\r\n  }\r\n  if (game.minute_increase < 1) {\r\n    game.minute_increase = 0\r\n  }\r\n}\r\n```\r\n\r\n**But this is not working:**\r\n```\r\ngame.second = 0\r\ngame.second_string = \"0\" + ToString(game.second)\r\ngame.changedsecond => {\r\n  if (game.second > 59) {\r\n    game.minute = game.minute + 1\r\n    game.second = 0\r\n  }\r\n  if (game.second < 10) {\r\n    game.second_string = \"0\" + ToString(game.second)\r\n  }\r\n  if (game.second > 9) {\r\n    game.second_string = ToString(game.second)\r\n  }\r\n}\r\ngame.changedsecond_string => {\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\ngame.second_increase = 0\r\ngame.changedsecond_increase => {\r\n  if (game.second_increase > 0) {\r\n    game.second = game.second + 1\r\n    game.second_increase = game.second_increase - 1\r\n  }\r\n  if (game.second_increase < 1) {\r\n    game.second_increase = 0\r\n  }\r\n}\r\n```\r\n\r\nSo, even my debugging command shows that, \r\nif I change the value of \r\n**game.second_increase**\r\nthe value of \r\n**game.second**\r\nwill not change despite having the changed-script,\r\n**game.changedsecond_increase**\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>I give two examples. One is working perfectly, the other one doesn't.</p>\n<p><strong>This works perfectly:</strong></p>\n<pre><code>game.minute = 0\ngame.minute_string = \"0\" + ToString(game.minute)\ngame.changedminute =&gt; {\n  if (game.minute &gt; 59) {\n    game.hour = game.hour + 1\n    game.minute = 0\n  }\n  if (game.minute &lt; 10) {\n    game.minute_string = \"0\" + ToString(game.minute)\n  }\n  if (game.minute &gt; 9) {\n    game.minute_string = ToString(game.minute)\n  }\n}\ngame.changedminute_string =&gt; {\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\ngame.minute_increase = 0\ngame.changedminute_increase =&gt; {\n  if (game.minute_increase &gt; 0) {\n    game.minute = game.minute + 1\n    game.minute_increase = game.minute_increase - 1\n  }\n  if (game.minute_increase &lt; 1) {\n    game.minute_increase = 0\n  }\n}\n</code></pre>\n<p><strong>But this is not working:</strong></p>\n<pre><code>game.second = 0\ngame.second_string = \"0\" + ToString(game.second)\ngame.changedsecond =&gt; {\n  if (game.second &gt; 59) {\n    game.minute = game.minute + 1\n    game.second = 0\n  }\n  if (game.second &lt; 10) {\n    game.second_string = \"0\" + ToString(game.second)\n  }\n  if (game.second &gt; 9) {\n    game.second_string = ToString(game.second)\n  }\n}\ngame.changedsecond_string =&gt; {\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\ngame.second_increase = 0\ngame.changedsecond_increase =&gt; {\n  if (game.second_increase &gt; 0) {\n    game.second = game.second + 1\n    game.second_increase = game.second_increase - 1\n  }\n  if (game.second_increase &lt; 1) {\n    game.second_increase = 0\n  }\n}\n</code></pre>\n<p>So, even my debugging command shows that,<br>\nif I change the value of<br>\n<strong>game.second_increase</strong><br>\nthe value of<br>\n<strong>game.second</strong><br>\nwill not change despite having the changed-script,<br>\n<strong>game.changedsecond_increase</strong></p>\n\n",
      "PostDate": "2021-11-15T10:10:15.1562012Z",
      "LastEditDate": "2021-11-16T07:47:20.6336732Z",
      "link": null
    },
    {
      "PostId": "796ad651-d4f8-4a60-9cde-b1741819773f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Hmm… I can't see a problem in the code there.\r\n\r\nThings to check:\r\n1. Has this code run before you increased `second_increase`? I assume this is running at the start of the game, but it's something to check just in case.\r\n1. Are you sure that `game.second` isn't changing? It might be worth temporarily making a command that displays the current values of all the variables; so for example you can check whether it's `second`, `second_string`, or `clock_string` that isn't updating as required.\r\n2. Have you checked that you didn't mistype `second_increase` in whichever script changes its value? We've all spent hours trying to debug a piece of code, only to find out that it's not even being run because of a typo. (Including `second_increase` in the debug function I mentioned above would help with this as well)\r\n\r\nIf this doesn't help, do you have a link to the game? People might spot something else if looking at the full code.",
      "EditableFormat": "markdown",
      "HTML": "<p>Hmm… I can't see a problem in the code there.</p>\n<p>Things to check:</p>\n<ol>\n<li>Has this code run before you increased <code>second_increase</code>? I assume this is running at the start of the game, but it's something to check just in case.</li>\n<li>Are you sure that <code>game.second</code> isn't changing? It might be worth temporarily making a command that displays the current values of all the variables; so for example you can check whether it's <code>second</code>, <code>second_string</code>, or <code>clock_string</code> that isn't updating as required.</li>\n<li>Have you checked that you didn't mistype <code>second_increase</code> in whichever script changes its value? We've all spent hours trying to debug a piece of code, only to find out that it's not even being run because of a typo. (Including <code>second_increase</code> in the debug function I mentioned above would help with this as well)</li>\n</ol>\n<p>If this doesn't help, do you have a link to the game? People might spot something else if looking at the full code.</p>\n\n",
      "PostDate": "2021-11-15T14:01:47.5213478Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "3cec9537-f7af-4047-9669-cab57641dbf7",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "*(the captcha to post a reply wasn't loading several hours yesterday. Different browsers. Would have replied earlier.)*\r\n\r\n> Has this code run before you increased second_increase? I assume this is running at the start of the game, but it's something to check just in case.\r\n\r\nYes, the scripts run in the start script, called by a function. Both, minute and second second are in the same functions. \r\n\r\n> Are you sure that game.second isn't changing? It might be worth temporarily making a command that displays the current values of all the variables; so for example you can check whether it's second, second_string, or clock_string that isn't updating as required.\r\n\r\nYes, I already tested it debugging commands which prints **ToString(game.second)**, and it does not change.\r\n\r\nI look at this script since yesterday and I don't find any reason that the changed-script doesn't do anything? I don't get any errors. \r\n\r\n> Have you checked that you didn't mistype second_increase in whichever script changes its value? We've all spent hours trying to debug a piece of code, only to find out that it's not even being run because of a typo. (Including second_increase in the debug function I mentioned above would help with this as well)\r\n\r\nI don't have access to Quest for Windows anymore, and there is no debug feature. (Or not?) \r\n\r\n> If this doesn't help, do you have a link to the game? People might spot something else if looking at the full code.\r\n\r\nHow can I do that?",
      "EditableFormat": "markdown",
      "HTML": "<p><em>(the captcha to post a reply wasn't loading several hours yesterday. Different browsers. Would have replied earlier.)</em></p>\n<blockquote>\n<p>Has this code run before you increased second_increase? I assume this is running at the start of the game, but it's something to check just in case.</p>\n</blockquote>\n<p>Yes, the scripts run in the start script, called by a function. Both, minute and second second are in the same functions.</p>\n<blockquote>\n<p>Are you sure that game.second isn't changing? It might be worth temporarily making a command that displays the current values of all the variables; so for example you can check whether it's second, second_string, or clock_string that isn't updating as required.</p>\n</blockquote>\n<p>Yes, I already tested it debugging commands which prints <strong>ToString(game.second)</strong>, and it does not change.</p>\n<p>I look at this script since yesterday and I don't find any reason that the changed-script doesn't do anything? I don't get any errors.</p>\n<blockquote>\n<p>Have you checked that you didn't mistype second_increase in whichever script changes its value? We've all spent hours trying to debug a piece of code, only to find out that it's not even being run because of a typo. (Including second_increase in the debug function I mentioned above would help with this as well)</p>\n</blockquote>\n<p>I don't have access to Quest for Windows anymore, and there is no debug feature. (Or not?)</p>\n<blockquote>\n<p>If this doesn't help, do you have a link to the game? People might spot something else if looking at the full code.</p>\n</blockquote>\n<p>How can I do that?</p>\n\n",
      "PostDate": "2021-11-16T06:05:33.2605315Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "a13dfc26-1b88-4aa0-aab3-81807d642ec5",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I found the problem!\r\n\r\nI replaced the changed-script, **game.changedsecond_increase**, a little bit further down in the code...\r\n\r\n```\r\ngame.hour_increase = 0\r\ngame.changedsecond_increase => { \r\n  if (game.hour_increase > 0) {\r\n    game.hour = game.hour + 1\r\n    game.hour_increase = game.hour_increase - 1\r\n  }\r\n\r\n// Should be \r\n\r\ngame.hour_increase = 0\r\ngame.changedhour_increase => {\r\n  if (game.hour_increase > 0) {\r\n    game.hour = game.hour + 1\r\n    game.hour_increase = game.hour_increase - 1\r\n  }\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I found the problem!</p>\n<p>I replaced the changed-script, <strong>game.changedsecond_increase</strong>, a little bit further down in the code...</p>\n<pre><code>game.hour_increase = 0\ngame.changedsecond_increase =&gt; { \n  if (game.hour_increase &gt; 0) {\n    game.hour = game.hour + 1\n    game.hour_increase = game.hour_increase - 1\n  }\n\n// Should be \n\ngame.hour_increase = 0\ngame.changedhour_increase =&gt; {\n  if (game.hour_increase &gt; 0) {\n    game.hour = game.hour + 1\n    game.hour_increase = game.hour_increase - 1\n  }\n</code></pre>\n\n",
      "PostDate": "2021-11-16T07:43:52.4320205Z",
      "LastEditDate": "2021-11-16T07:52:04.5074357Z",
      "link": null
    },
    {
      "PostId": "832e400e-79cf-4faf-aee3-e57a9692ba48",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Good that you caught it :)\r\nSomething to take away here is that if you can't see the problem in a piece of code, there's a good chance that something somewhere else is messing with it.\r\n\r\n<hr/>\r\n\r\nOne other thing that puzzled me a little was this script:\r\n```\r\ngame.changedsecond_increase => {\r\n  if (game.second_increase > 0) {\r\n    game.second = game.second + 1\r\n    game.second_increase = game.second_increase - 1\r\n  }\r\n  if (game.second_increase < 1) {\r\n    game.second_increase = 0\r\n  }\r\n}\r\n```\r\n\r\nWhich seems to be a rather inefficient way of creating the same effect as:\r\n```\r\ngame.changedsecond_increase => {\r\n  if (game.second_increase > 0) {\r\n    game.second = game.second + game.second_increase\r\n  }\r\n  game.second_increase = 0\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>Good that you caught it :)<br>\nSomething to take away here is that if you can't see the problem in a piece of code, there's a good chance that something somewhere else is messing with it.</p>\n<hr>\n<p>One other thing that puzzled me a little was this script:</p>\n<pre><code>game.changedsecond_increase =&gt; {\n  if (game.second_increase &gt; 0) {\n    game.second = game.second + 1\n    game.second_increase = game.second_increase - 1\n  }\n  if (game.second_increase &lt; 1) {\n    game.second_increase = 0\n  }\n}\n</code></pre>\n<p>Which seems to be a rather inefficient way of creating the same effect as:</p>\n<pre><code>game.changedsecond_increase =&gt; {\n  if (game.second_increase &gt; 0) {\n    game.second = game.second + game.second_increase\n  }\n  game.second_increase = 0\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-16T10:22:00.9931382Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "647b7e4a-c07d-4ef7-a9a4-2d0119108649",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> One other thing that puzzled me a little was this script: \r\n>\r\n> Which seems to be a rather inefficient way of creating the same effect as: \r\n\r\nI think it less complicated on the long run... Because If I run scripts that determine higher values of second_increase I have to do the math for the higher units. \r\nIf the current time is (hh:mm:ss) 12:00:45\r\nthen an second_increase of 30 would affect the next higher unit, to 12:01:15.\r\nIn the most extreme case, if it's 23:59:59, \r\nThe increase of just 1 second would change every single time unit. If it's more than 1 second, there need to be additional math, which would make the code much longer. \r\n\r\nTo keep it easy, if I limit the maximum second_increase to maximum 60, it would start like this:\r\n```\r\ngame.changedsecond_increase => {\r\n  if (game.second_increase > 0) {\r\n    if (game.second + game.second_increase > 60) {\r\n      game.second = game.second + game.second_increase - 60\r\n      game.minute = game.minute + 1\r\n      game.second_increase = 0\r\n```\r\n...and more math for some other complicated cases and\r\nMuch more things to mess up with. My current attempt seems like save way to as long as I run the increased time in order: seconds > minutes > hours > days",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>One other thing that puzzled me a little was this script:</p>\n<p>Which seems to be a rather inefficient way of creating the same effect as:</p>\n</blockquote>\n<p>I think it less complicated on the long run... Because If I run scripts that determine higher values of second_increase I have to do the math for the higher units.<br>\nIf the current time is (hh:mm:ss) 12:00:45<br>\nthen an second_increase of 30 would affect the next higher unit, to 12:01:15.<br>\nIn the most extreme case, if it's 23:59:59,<br>\nThe increase of just 1 second would change every single time unit. If it's more than 1 second, there need to be additional math, which would make the code much longer.</p>\n<p>To keep it easy, if I limit the maximum second_increase to maximum 60, it would start like this:</p>\n<pre><code>game.changedsecond_increase =&gt; {\n  if (game.second_increase &gt; 0) {\n    if (game.second + game.second_increase &gt; 60) {\n      game.second = game.second + game.second_increase - 60\n      game.minute = game.minute + 1\n      game.second_increase = 0\n</code></pre>\n<p>...and more math for some other complicated cases and<br>\nMuch more things to mess up with. My current attempt seems like save way to as long as I run the increased time in order: seconds &gt; minutes &gt; hours &gt; days</p>\n\n",
      "PostDate": "2021-11-16T12:07:37.8739117Z",
      "LastEditDate": "2021-11-16T12:09:36.8966068Z",
      "link": null
    },
    {
      "PostId": "406a2546-05b9-44b2-9c31-647fc51a6e6f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Oh yeah … increasing by more than 60 seconds at a time, you'd also have to change:\r\n```\r\ngame.changedsecond => {\r\n  if (game.second > 59) {\r\n    game.minute = game.minute + 1\r\n    game.second = 0\r\n  }\r\n```\r\nto:\r\n```\r\ngame.changedsecond => {\r\n  game.minute = game.minute + game.second/60\r\n  game.second = game.second % 60\r\n```\r\n",
      "EditableFormat": "markdown",
      "HTML": "<p>Oh yeah … increasing by more than 60 seconds at a time, you'd also have to change:</p>\n<pre><code>game.changedsecond =&gt; {\n  if (game.second &gt; 59) {\n    game.minute = game.minute + 1\n    game.second = 0\n  }\n</code></pre>\n<p>to:</p>\n<pre><code>game.changedsecond =&gt; {\n  game.minute = game.minute + game.second/60\n  game.second = game.second % 60\n</code></pre>\n\n",
      "PostDate": "2021-11-16T14:01:54.309515Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "4be76c0c-1189-4a3d-96c4-63becd545b60",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "```\r\ngame.second = game.second % 60\r\n```\r\nPlease explain, what happens there?\r\n\r\n----\r\n\r\nThis is the code at the moment. I plan to add to the changed-scripts a scope/filter function that reduces completion- or waiting times for different events.\r\n\r\n```\r\n// Function in the start script to initiate the clock\r\n\r\ngame.day = 1\r\ngame.hour = 10\r\ngame.minute = 0\r\ngame.second = 0\r\ngame.hour_string = ToString(game.hour)\r\ngame.minute_string = \"0\" + ToString(game.minute)\r\ngame.second_string = \"0\" + ToString(game.second)\r\ngame.day_string = \"day \" + ToString(game.day)\r\ngame.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\ngame.changedsecond => {\r\n  if (game.second > 59) {\r\n    game.minute = game.minute + 1\r\n    game.second = 0\r\n  }\r\n  if (game.second < 10) {\r\n    game.second_string = \"0\" + ToString(game.second)\r\n  }\r\n  if (game.second > 9) {\r\n    game.second_string = ToString(game.second)\r\n  }\r\n}\r\ngame.changedminute => {\r\n  if (game.minute > 59) {\r\n    game.hour = game.hour + 1\r\n    game.minute = 0\r\n  }\r\n  if (game.minute < 10) {\r\n    game.minute_string = \"0\" + ToString(game.minute)\r\n  }\r\n  if (game.minute > 9) {\r\n    game.minute_string = ToString(game.minute)\r\n  }\r\n}\r\ngame.changedhour => {\r\n  if (game.hour > 23) {\r\n    game.day = game.day + 1\r\n    game.hour = 0\r\n  }\r\n  if (game.second < 10) {\r\n    game.hour_string = \"0\" + ToString(game.hour)\r\n  }\r\n  if (game.hour > 9) {\r\n    game.hour_string = ToString(game.hour)\r\n  }\r\n}\r\ngame.changedday => {\r\n  game.day_string = ToString(game.day)\r\n}\r\ngame.changedsecond_string => {\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\ngame.changedminute_string => {\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\ngame.changedhour_string => {\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\n\r\n// Function to change the time in the start script \r\n\r\ngame.second_increase = 0\r\ngame.changedsecond_increase => {\r\n  if (game.second_increase > 0) {\r\n    game.second = game.second + 1\r\n    game.second_increase = game.second_increase - 1\r\n  }\r\n  if (game.second_increase < 1) {\r\n    game.second_increase = 0\r\n  }\r\n}\r\ngame.minute_increase = 0\r\ngame.changedminute_increase => {\r\n  if (game.minute_increase > 0) {\r\n    game.minute = game.minute + 1\r\n    game.minute_increase = game.minute_increase - 1\r\n  }\r\n  if (game.minute_increase < 1) {\r\n    game.minute_increase = 0\r\n  }\r\n}\r\ngame.hour_increase = 0\r\ngame.changedhour_increase => {\r\n  if (game.hour_increase > 0) {\r\n    game.hour = game.hour + 1\r\n    game.hour_increase = game.hour_increase - 1\r\n  }\r\n  if (game.hour_increase < 1) {\r\n    game.hour_increase = 0\r\n  }\r\n}\r\ngame.day_increase = 0\r\ngame.changedday_increase => {\r\n  if (game.day_increase > 0) {\r\n    game.day = game.day + 1\r\n    game.day_increase = game.day_increase - 1\r\n  }\r\n  if (game.day_increase < 1) {\r\n    game.day_increase = 0\r\n  }\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<pre><code>game.second = game.second % 60\n</code></pre>\n<p>Please explain, what happens there?</p>\n<hr>\n<p>This is the code at the moment. I plan to add to the changed-scripts a scope/filter function that reduces completion- or waiting times for different events.</p>\n<pre><code>// Function in the start script to initiate the clock\n\ngame.day = 1\ngame.hour = 10\ngame.minute = 0\ngame.second = 0\ngame.hour_string = ToString(game.hour)\ngame.minute_string = \"0\" + ToString(game.minute)\ngame.second_string = \"0\" + ToString(game.second)\ngame.day_string = \"day \" + ToString(game.day)\ngame.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\ngame.changedsecond =&gt; {\n  if (game.second &gt; 59) {\n    game.minute = game.minute + 1\n    game.second = 0\n  }\n  if (game.second &lt; 10) {\n    game.second_string = \"0\" + ToString(game.second)\n  }\n  if (game.second &gt; 9) {\n    game.second_string = ToString(game.second)\n  }\n}\ngame.changedminute =&gt; {\n  if (game.minute &gt; 59) {\n    game.hour = game.hour + 1\n    game.minute = 0\n  }\n  if (game.minute &lt; 10) {\n    game.minute_string = \"0\" + ToString(game.minute)\n  }\n  if (game.minute &gt; 9) {\n    game.minute_string = ToString(game.minute)\n  }\n}\ngame.changedhour =&gt; {\n  if (game.hour &gt; 23) {\n    game.day = game.day + 1\n    game.hour = 0\n  }\n  if (game.second &lt; 10) {\n    game.hour_string = \"0\" + ToString(game.hour)\n  }\n  if (game.hour &gt; 9) {\n    game.hour_string = ToString(game.hour)\n  }\n}\ngame.changedday =&gt; {\n  game.day_string = ToString(game.day)\n}\ngame.changedsecond_string =&gt; {\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\ngame.changedminute_string =&gt; {\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\ngame.changedhour_string =&gt; {\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\n\n// Function to change the time in the start script \n\ngame.second_increase = 0\ngame.changedsecond_increase =&gt; {\n  if (game.second_increase &gt; 0) {\n    game.second = game.second + 1\n    game.second_increase = game.second_increase - 1\n  }\n  if (game.second_increase &lt; 1) {\n    game.second_increase = 0\n  }\n}\ngame.minute_increase = 0\ngame.changedminute_increase =&gt; {\n  if (game.minute_increase &gt; 0) {\n    game.minute = game.minute + 1\n    game.minute_increase = game.minute_increase - 1\n  }\n  if (game.minute_increase &lt; 1) {\n    game.minute_increase = 0\n  }\n}\ngame.hour_increase = 0\ngame.changedhour_increase =&gt; {\n  if (game.hour_increase &gt; 0) {\n    game.hour = game.hour + 1\n    game.hour_increase = game.hour_increase - 1\n  }\n  if (game.hour_increase &lt; 1) {\n    game.hour_increase = 0\n  }\n}\ngame.day_increase = 0\ngame.changedday_increase =&gt; {\n  if (game.day_increase &gt; 0) {\n    game.day = game.day + 1\n    game.day_increase = game.day_increase - 1\n  }\n  if (game.day_increase &lt; 1) {\n    game.day_increase = 0\n  }\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-16T16:14:40.719065Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "de5e8e16-992a-4097-964a-f5cfc1f7ebc8",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": ">      game.second = game.second % 60\r\n> Please explain, what happens there?\r\n\r\nThe modulo operator `%` gives the remainder of a division. So for example `17 % 10` will give you 7, and `100 % 60` will give you 40. Makes the code a lot simpler, because you don't need any if/else logic.\r\n\r\n<hr/>\r\n\r\nA more common way to handle time is just using an 'epoch' time value, where you store the number of seconds after a given start point; then you only need to use `%` and `/` to extract the current time. The advantage of this method is that everything that deals with the passage of time involves changing the epoch time, so So your scripts would look like:\r\n```\r\ngame.changedepoch => {\r\n  game.second = game.epoch % 60\r\n  game.minute = (game.epoch / 60) % 60\r\n  game.hour = (game.epoch / 60 / 60) % 24\r\n  game.day = game.epoch / 60 / 60 / 24\r\n\r\n  game.second_string = Right(\"0\" + game.second, 2)\r\n  game.minute_string = Right(\"0\" + game.minute, 2)\r\n  game.hour_string = Right(\"0\" + game.hour, 2)\r\n  game.day_string = \"day \" + game.day\r\n\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.hour_string\r\n}\r\ngame.epoch= 0\r\n\r\n// and if you find it easier to use these:\r\n\r\ngame.changedincrease_second => {\r\n  game.epoch = game.epoch + game.increase_second\r\n  game.increase_second = 0\r\n}\r\ngame.changedincrease_minute => {\r\n  game.epoch = game.epoch + game.increase_minute * 60\r\n  game.increase_minute = 0\r\n}\r\ngame.changedincrease_hour => {\r\n  game.epoch = game.epoch + game.increase_hour * 60 * 60\r\n  game.increase_hour = 0\r\n}\r\ngame.changedincrease_day => {\r\n  game.epoch = game.epoch + game.increase_day * 60 * 60 * 24\r\n  game.increase_day = 0\r\n}\r\n```\r\n\r\n(Technically, the 'epoch' is the time you use as 0. The `game.epoch` attribute in that example is the number of seconds since the epoch, but it's common to refer to it as an epoch time. For the clock on your computer, the real-world time is probably stored as the number of seconds since midnight (GMT) Jan 1st 1970 - currently 1637089325, and almost every app that uses it will be relying on the same set of `%` operations to turn that into a human-readable number as needed)\r\n\r\n(You could replace the 60 * 60 with 3600, of course… I just figured it's easier to understand if you can see where the numbers come from)\r\n\r\nAn alternative way of doing the calculations without `%` would be:\r\n```\r\n  game.day = game.epoch / 60 / 60 / 24\r\n  game.hour = game.epoch / 60 / 60 - 24 * game.day\r\n  game.minute = game.epoch / 60 - 60 * (game.hour + 24 * game.day)\r\n  game.second = game.epoch - 60 * (game.minute + 60 * (game.hour + 24 * game.day))\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<pre><code> game.second = game.second % 60\n</code></pre>\n<p>Please explain, what happens there?</p>\n</blockquote>\n<p>The modulo operator <code>%</code> gives the remainder of a division. So for example <code>17 % 10</code> will give you 7, and <code>100 % 60</code> will give you 40. Makes the code a lot simpler, because you don't need any if/else logic.</p>\n<hr>\n<p>A more common way to handle time is just using an 'epoch' time value, where you store the number of seconds after a given start point; then you only need to use <code>%</code> and <code>/</code> to extract the current time. The advantage of this method is that everything that deals with the passage of time involves changing the epoch time, so So your scripts would look like:</p>\n<pre><code>game.changedepoch =&gt; {\n  game.second = game.epoch % 60\n  game.minute = (game.epoch / 60) % 60\n  game.hour = (game.epoch / 60 / 60) % 24\n  game.day = game.epoch / 60 / 60 / 24\n\n  game.second_string = Right(\"0\" + game.second, 2)\n  game.minute_string = Right(\"0\" + game.minute, 2)\n  game.hour_string = Right(\"0\" + game.hour, 2)\n  game.day_string = \"day \" + game.day\n\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.hour_string\n}\ngame.epoch= 0\n\n// and if you find it easier to use these:\n\ngame.changedincrease_second =&gt; {\n  game.epoch = game.epoch + game.increase_second\n  game.increase_second = 0\n}\ngame.changedincrease_minute =&gt; {\n  game.epoch = game.epoch + game.increase_minute * 60\n  game.increase_minute = 0\n}\ngame.changedincrease_hour =&gt; {\n  game.epoch = game.epoch + game.increase_hour * 60 * 60\n  game.increase_hour = 0\n}\ngame.changedincrease_day =&gt; {\n  game.epoch = game.epoch + game.increase_day * 60 * 60 * 24\n  game.increase_day = 0\n}\n</code></pre>\n<p>(Technically, the 'epoch' is the time you use as 0. The <code>game.epoch</code> attribute in that example is the number of seconds since the epoch, but it's common to refer to it as an epoch time. For the clock on your computer, the real-world time is probably stored as the number of seconds since midnight (GMT) Jan 1st 1970 - currently 1637089325, and almost every app that uses it will be relying on the same set of <code>%</code> operations to turn that into a human-readable number as needed)</p>\n<p>(You could replace the 60 * 60 with 3600, of course… I just figured it's easier to understand if you can see where the numbers come from)</p>\n<p>An alternative way of doing the calculations without <code>%</code> would be:</p>\n<pre><code>  game.day = game.epoch / 60 / 60 / 24\n  game.hour = game.epoch / 60 / 60 - 24 * game.day\n  game.minute = game.epoch / 60 - 60 * (game.hour + 24 * game.day)\n  game.second = game.epoch - 60 * (game.minute + 60 * (game.hour + 24 * game.day))\n</code></pre>\n\n",
      "PostDate": "2021-11-16T19:05:02.8821667Z",
      "LastEditDate": "2021-11-17T10:01:28.6193898Z",
      "link": null
    },
    {
      "PostId": "aca4c405-f696-4a12-ac95-3aa95bf42b28",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I tried to try this out today and I don't understand it fully, which makes it hard to implement. Some things in Quest I need explained slowly step-by-step until I can use it (like For Each last year).\r\n\r\nFirst question. How would set a duration, for example, when the player moves to another area and it takes 30 minutes. How would I get from **game.epoch = 30** to your suggested script?\r\n\r\n```\r\ngame.changedepoch => {\r\n  game.second = game.epoch % 60\r\n  game.minute = (game.epoch / 60) % 60\r\n  game.hour = (game.epoch / 60 / 60) % 24\r\n  game.day = game.epoch / 60 / 60 / 24\r\n\r\n  game.second_string = Right(\"0\" + game.second, 2)\r\n  game.minute_string = Right(\"0\" + game.minute, 2)\r\n  game.hour_string = Right(\"0\" + game.hour, 2)\r\n  game.day_string = \"day \" + game.day \r\n\r\ngame.epoch = 0 \r\n```",
      "EditableFormat": "markdown",
      "HTML": "<p>I tried to try this out today and I don't understand it fully, which makes it hard to implement. Some things in Quest I need explained slowly step-by-step until I can use it (like For Each last year).</p>\n<p>First question. How would set a duration, for example, when the player moves to another area and it takes 30 minutes. How would I get from <strong>game.epoch = 30</strong> to your suggested script?</p>\n<pre><code>game.changedepoch =&gt; {\n  game.second = game.epoch % 60\n  game.minute = (game.epoch / 60) % 60\n  game.hour = (game.epoch / 60 / 60) % 24\n  game.day = game.epoch / 60 / 60 / 24\n\n  game.second_string = Right(\"0\" + game.second, 2)\n  game.minute_string = Right(\"0\" + game.minute, 2)\n  game.hour_string = Right(\"0\" + game.hour, 2)\n  game.day_string = \"day \" + game.day \n\ngame.epoch = 0 \n</code></pre>\n\n",
      "PostDate": "2021-11-17T15:26:57.7684114Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "93d17d14-8591-4e02-9414-a9c997e9bacf",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "If you want to advance the clock, you just add the number of seconds onto the epoch time. So for 30 minutes you'd do one  of:\r\n* `game.epoch = game.epoch + 30 * 60` (easier to read - work out how many seconds it is when you're writing it)\r\n* `game.epoch = game.epoch + 1800` (simpler for the computer to run)\r\n* `game.increase_minute = 30` (if you included the optional parts of that script)",
      "EditableFormat": "markdown",
      "HTML": "<p>If you want to advance the clock, you just add the number of seconds onto the epoch time. So for 30 minutes you'd do one  of:</p>\n<ul>\n<li><code>game.epoch = game.epoch + 30 * 60</code> (easier to read - work out how many seconds it is when you're writing it)</li>\n<li><code>game.epoch = game.epoch + 1800</code> (simpler for the computer to run)</li>\n<li><code>game.increase_minute = 30</code> (if you included the optional parts of that script)</li>\n</ul>\n\n",
      "PostDate": "2021-11-17T17:06:42.6625712Z",
      "LastEditDate": "2021-11-17T17:11:04.0352948Z",
      "link": null
    },
    {
      "PostId": "63951a8d-6f7a-4b2b-b166-9aea9211f192",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Okay, if I go for 10 seconds it's \r\n**game.epoch = game.epoch + 10**\r\n\r\n10 minutes\r\n**game.epoch = game.epoch + 10 * 60**\r\n\r\n10 hours \r\n**game.epoch = game.epoch + 10 * 3600**\r\n\r\n---\r\n> game.increase_minute = 30 (if you included the optional parts of that script)\r\n\r\nI can't see how the optional part would affect the the other units, for example if an increase of minutes would also increase the hour value. (To use it while coding certain events would be much easier, though.)\r\n\r\n**Edit:** Sorry, got it! I have to use both parts. ",
      "EditableFormat": "markdown",
      "HTML": "<p>Okay, if I go for 10 seconds it's<br>\n<strong>game.epoch = game.epoch + 10</strong></p>\n<p>10 minutes<br>\n<strong>game.epoch = game.epoch + 10 * 60</strong></p>\n<p>10 hours<br>\n<strong>game.epoch = game.epoch + 10 * 3600</strong></p>\n<hr>\n<blockquote>\n<p>game.increase_minute = 30 (if you included the optional parts of that script)</p>\n</blockquote>\n<p>I can't see how the optional part would affect the the other units, for example if an increase of minutes would also increase the hour value. (To use it while coding certain events would be much easier, though.)</p>\n<p><strong>Edit:</strong> Sorry, got it! I have to use both parts.</p>\n\n",
      "PostDate": "2021-11-18T06:34:28.1597939Z",
      "LastEditDate": "2021-11-18T06:57:27.0420982Z",
      "link": null
    },
    {
      "PostId": "a0962828-0461-4fc4-80d8-f5b875b7af95",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "Trying to get it to work. The clock is all over the place with times like **10:70:66**. \r\nSo far, the actual values of seconds, minutes, and hours go up into infinity. With only the last two digits visible\r\nThe higher units only go up if, the increase is big enough:\r\n**12:00:00** \r\nadding 35 seconds results in \r\n**12:00:35**\r\nadding another 35 seconds is\r\n**12:00:70**\r\n\r\nBut...\r\n**12:00:00** \r\nadding 70 seconds results in \r\n**12:01:70**\r\n\r\nI still need to insert somewhere the math for these cases.\r\n\r\n---\r\n```\r\ngame.second = 0\r\ngame.minute = 0\r\ngame.hour = 10\r\ngame.day = 1\r\n```\r\n---\r\nThe Right() function is a neat hack, didn't know to use it so efficient.\r\nAlso, it's new to me that ToString() isn't needed to print an integer. Surprised that it works.\r\n```\r\ngame.second_string = Right(\"0\" + game.second, 2)\r\ngame.minute_string = Right(\"0\" + game.minute, 2)\r\ngame.hour_string = Right(\"0\" + game.hour, 2)\r\ngame.day_string = \"day \" + game.day\r\ngame.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\ngame.epoch = 0\r\n```\r\n---\r\nI think this should have been \r\n**game.second = game.second + game.epoch % 60**\r\nand not\r\n**game.second = game.epoch % 60**\r\nbecause the time wasn't adding up:\r\n```\r\ngame.changedepoch => {\r\n  game.second = game.second + game.epoch % 60\r\n  game.minute = game.minute + (game.epoch / 60) % 60\r\n  game.hour = game.hour + (game.epoch / 60 / 60) % 24\r\n  game.day = game.day + game.epoch / 60 / 60 / 24\r\n  game.second_string = Right(\"0\" + game.second, 2)\r\n  game.minute_string = Right(\"0\" + game.minute, 2)\r\n  game.hour_string = Right(\"0\" + game.hour, 2)\r\n  game.day_string = \"day \" + game.day\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n  game.epoch = 0\r\n}\r\n```\r\n```\r\ngame.second_increase = 0\r\ngame.minute_increase = 0\r\ngame.hour_increase = 0\r\ngame.day_increase = 0\r\ngame.changedsecond_increase => {\r\n  game.epoch = game.epoch + game.second_increase\r\n  game.second_increase = 0\r\n}\r\ngame.changedminute_increase => {\r\n  game.epoch = game.epoch + game.minute_increase * 60\r\n  game.minute_increase = 0\r\n}\r\ngame.changedhour_increase => {\r\n  game.epoch = game.epoch + game.hour_increase * 60 * 60\r\n  game.hour_increase = 0\r\n}\r\ngame.changedday_increase => {\r\n  game.epoch = game.epoch + game.day_increase * 60 * 60 * 24\r\n  game.day_increase = 0\r\n}",
      "EditableFormat": "markdown",
      "HTML": "<p>Trying to get it to work. The clock is all over the place with times like <strong>10:70:66</strong>.<br>\nSo far, the actual values of seconds, minutes, and hours go up into infinity. With only the last two digits visible<br>\nThe higher units only go up if, the increase is big enough:<br>\n<strong>12:00:00</strong><br>\nadding 35 seconds results in<br>\n<strong>12:00:35</strong><br>\nadding another 35 seconds is<br>\n<strong>12:00:70</strong></p>\n<p>But...<br>\n<strong>12:00:00</strong><br>\nadding 70 seconds results in<br>\n<strong>12:01:70</strong></p>\n<p>I still need to insert somewhere the math for these cases.</p>\n<hr>\n<pre><code>game.second = 0\ngame.minute = 0\ngame.hour = 10\ngame.day = 1\n</code></pre>\n<hr>\n<p>The Right() function is a neat hack, didn't know to use it so efficient.<br>\nAlso, it's new to me that ToString() isn't needed to print an integer. Surprised that it works.</p>\n<pre><code>game.second_string = Right(\"0\" + game.second, 2)\ngame.minute_string = Right(\"0\" + game.minute, 2)\ngame.hour_string = Right(\"0\" + game.hour, 2)\ngame.day_string = \"day \" + game.day\ngame.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\ngame.epoch = 0\n</code></pre>\n<hr>\n<p>I think this should have been<br>\n<strong>game.second = game.second + game.epoch % 60</strong><br>\nand not<br>\n<strong>game.second = game.epoch % 60</strong><br>\nbecause the time wasn't adding up:</p>\n<pre><code>game.changedepoch =&gt; {\n  game.second = game.second + game.epoch % 60\n  game.minute = game.minute + (game.epoch / 60) % 60\n  game.hour = game.hour + (game.epoch / 60 / 60) % 24\n  game.day = game.day + game.epoch / 60 / 60 / 24\n  game.second_string = Right(\"0\" + game.second, 2)\n  game.minute_string = Right(\"0\" + game.minute, 2)\n  game.hour_string = Right(\"0\" + game.hour, 2)\n  game.day_string = \"day \" + game.day\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n  game.epoch = 0\n}\n</code></pre>\n<pre><code>game.second_increase = 0\ngame.minute_increase = 0\ngame.hour_increase = 0\ngame.day_increase = 0\ngame.changedsecond_increase =&gt; {\n  game.epoch = game.epoch + game.second_increase\n  game.second_increase = 0\n}\ngame.changedminute_increase =&gt; {\n  game.epoch = game.epoch + game.minute_increase * 60\n  game.minute_increase = 0\n}\ngame.changedhour_increase =&gt; {\n  game.epoch = game.epoch + game.hour_increase * 60 * 60\n  game.hour_increase = 0\n}\ngame.changedday_increase =&gt; {\n  game.epoch = game.epoch + game.day_increase * 60 * 60 * 24\n  game.day_increase = 0\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-18T10:50:52.9704648Z",
      "LastEditDate": "2021-11-18T11:34:10.8350701Z",
      "link": null
    },
    {
      "PostId": "88e923b1-b9ed-43d7-94af-d1babc1c7712",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "> Trying to get it to work. The clock is all over the place with times like 10:70:66.\r\n\r\nI can't see how that could happen. But just to check, I I pasted the code from my previous post into a new game and created a command that lets you add numbers onto the `increase` attributes, and then displays the value of the variables.\r\n\r\nIt seems to work fine for me (after fixing the typo where I had `game_hour` instead of `game_second` in the clock string):\r\n<img src=\"https://photos.mrangel.info/Screenshots/Quest_20211118_time.png\" alt=\"Screenshot of a time command working as intended\" style=\"border: 1px solid green\"/>\r\n\r\n> Also, it's new to me that ToString() isn't needed to print an integer.\r\n\r\nIt's called implicit conversion. Some operators (like `+`) behave differently depending what type of data you give them. In the case of `string + other value` the other value is automatically converted to a string (although if it's an object, it gives a string like `Object: bucket`). Adding a string to a number is a quick way to convert it (and because of the way it's implemented, `\"\" + somevariable` is often faster than `ToString (somevariable)` to get the same result.)\r\n\r\nI get into this habit more because of javascript, where `(\"\" + a)` and `(0 + b)` are the standard ways to force something to be a string or an int.\r\n\r\n> I think this should have been\r\n**game.second = game.second + game.epoch % 60**\r\nand not\r\n**game.second = game.epoch % 60**\r\nbecause the time wasn't adding up:\r\n\r\nWhy? Then you're adding the seconds of the new time onto the seconds of the old time, so you'll end up with the values continually going up towards infinity.\r\n\r\nIf `game.epoch` is the number of seconds since the start of the game, `game.epoch / 60` is the number of minutes since the start of the game, and `game.epoch % 60` is the number of seconds since the start of the last minute.\r\n\r\n`epoch % 60` gives the number of seconds since the last minute, not since the old value. If you wanted to use it as a relative time, you would have to do more calculations including `oldvalue`; but that's making the function much more complex again for no real reason.\r\n\r\nThe epoch date is *not* how much the date has changed by; that causes all kinds of confusion and values going outside the normal ranges. The epoch is just the number of seconds since midnight on day 0, so you don't want `changedepoch` to reset it to zero.\r\n\r\n>     game.second = 0\r\n>     game.minute = 0\r\n>     game.hour = 10\r\n>     game.day = 1\r\n\r\nThese won't do anything; the other values are calculated from the epoch every time it is used.\r\nI put `game.epoch = 0` *after* the `changedepoch` script so that it would immediately set `day`, `hour`, `minute`, and `second` to zero as well.\r\n\r\nIf you want to change it so that the day is numbered from 1 instead of 0, you would change:\r\n```\r\n  game.day = game.epoch / 60 / 60 / 24\r\n```\r\nto\r\n```\r\n  game.day = 1 + game.epoch / 60 / 60 / 24\r\n```\r\nand to make it start  at 10:00, you just change the starting time:\r\n```\r\ngame.epoch = 10 * 3600\r\n```\r\n\r\nSo the full script would be:\r\n```\r\ngame.changedepoch => {\r\n  game.second = game.epoch % 60\r\n  game.minute = (game.epoch / 60) % 60\r\n  game.hour = (game.epoch / 60 / 60) % 24\r\n  game.day = 1 + game.epoch / 60 / 60 / 24\r\n\r\n  game.second_string = Right(\"0\" + game.second, 2)\r\n  game.minute_string = Right(\"0\" + game.minute, 2)\r\n  game.hour_string = Right(\"0\" + game.hour, 2)\r\n  game.day_string = \"day \" + game.day\r\n\r\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\r\n}\r\n\r\n// This line sets the initial time to 10 AM\r\ngame.epoch = 10 * 3600\r\n\r\ngame.changedincrease_second => {\r\n  game.epoch = game.epoch + game.increase_second\r\n  game.increase_second = 0\r\n}\r\ngame.changedincrease_minute => {\r\n  game.epoch = game.epoch + game.increase_minute * 60\r\n  game.increase_minute = 0\r\n}\r\ngame.changedincrease_hour => {\r\n  game.epoch = game.epoch + game.increase_hour * 60 * 60\r\n  game.increase_hour = 0\r\n}\r\ngame.changedincrease_day => {\r\n  game.epoch = game.epoch + game.increase_day * 60 * 60 * 24\r\n  game.increase_day = 0\r\n}\r\n```",
      "EditableFormat": "markdown",
      "HTML": "<blockquote>\n<p>Trying to get it to work. The clock is all over the place with times like 10:70:66.</p>\n</blockquote>\n<p>I can't see how that could happen. But just to check, I I pasted the code from my previous post into a new game and created a command that lets you add numbers onto the <code>increase</code> attributes, and then displays the value of the variables.</p>\n<p>It seems to work fine for me (after fixing the typo where I had <code>game_hour</code> instead of <code>game_second</code> in the clock string):<br>\n<img src=\"https://photos.mrangel.info/Screenshots/Quest_20211118_time.png\" alt=\"Screenshot of a time command working as intended\" style=\"border: 1px solid green\"></p>\n<blockquote>\n<p>Also, it's new to me that ToString() isn't needed to print an integer.</p>\n</blockquote>\n<p>It's called implicit conversion. Some operators (like <code>+</code>) behave differently depending what type of data you give them. In the case of <code>string + other value</code> the other value is automatically converted to a string (although if it's an object, it gives a string like <code>Object: bucket</code>). Adding a string to a number is a quick way to convert it (and because of the way it's implemented, <code>\"\" + somevariable</code> is often faster than <code>ToString (somevariable)</code> to get the same result.)</p>\n<p>I get into this habit more because of javascript, where <code>(\"\" + a)</code> and <code>(0 + b)</code> are the standard ways to force something to be a string or an int.</p>\n<blockquote>\n<p>I think this should have been<br>\n<strong>game.second = game.second + game.epoch % 60</strong><br>\nand not<br>\n<strong>game.second = game.epoch % 60</strong><br>\nbecause the time wasn't adding up:</p>\n</blockquote>\n<p>Why? Then you're adding the seconds of the new time onto the seconds of the old time, so you'll end up with the values continually going up towards infinity.</p>\n<p>If <code>game.epoch</code> is the number of seconds since the start of the game, <code>game.epoch / 60</code> is the number of minutes since the start of the game, and <code>game.epoch % 60</code> is the number of seconds since the start of the last minute.</p>\n<p><code>epoch % 60</code> gives the number of seconds since the last minute, not since the old value. If you wanted to use it as a relative time, you would have to do more calculations including <code>oldvalue</code>; but that's making the function much more complex again for no real reason.</p>\n<p>The epoch date is <em>not</em> how much the date has changed by; that causes all kinds of confusion and values going outside the normal ranges. The epoch is just the number of seconds since midnight on day 0, so you don't want <code>changedepoch</code> to reset it to zero.</p>\n<blockquote>\n<pre><code>game.second = 0\ngame.minute = 0\ngame.hour = 10\ngame.day = 1\n</code></pre>\n</blockquote>\n<p>These won't do anything; the other values are calculated from the epoch every time it is used.<br>\nI put <code>game.epoch = 0</code> <em>after</em> the <code>changedepoch</code> script so that it would immediately set <code>day</code>, <code>hour</code>, <code>minute</code>, and <code>second</code> to zero as well.</p>\n<p>If you want to change it so that the day is numbered from 1 instead of 0, you would change:</p>\n<pre><code>  game.day = game.epoch / 60 / 60 / 24\n</code></pre>\n<p>to</p>\n<pre><code>  game.day = 1 + game.epoch / 60 / 60 / 24\n</code></pre>\n<p>and to make it start  at 10:00, you just change the starting time:</p>\n<pre><code>game.epoch = 10 * 3600\n</code></pre>\n<p>So the full script would be:</p>\n<pre><code>game.changedepoch =&gt; {\n  game.second = game.epoch % 60\n  game.minute = (game.epoch / 60) % 60\n  game.hour = (game.epoch / 60 / 60) % 24\n  game.day = 1 + game.epoch / 60 / 60 / 24\n\n  game.second_string = Right(\"0\" + game.second, 2)\n  game.minute_string = Right(\"0\" + game.minute, 2)\n  game.hour_string = Right(\"0\" + game.hour, 2)\n  game.day_string = \"day \" + game.day\n\n  game.clock_string = game.hour_string + \":\" + game.minute_string + \":\" + game.second_string\n}\n\n// This line sets the initial time to 10 AM\ngame.epoch = 10 * 3600\n\ngame.changedincrease_second =&gt; {\n  game.epoch = game.epoch + game.increase_second\n  game.increase_second = 0\n}\ngame.changedincrease_minute =&gt; {\n  game.epoch = game.epoch + game.increase_minute * 60\n  game.increase_minute = 0\n}\ngame.changedincrease_hour =&gt; {\n  game.epoch = game.epoch + game.increase_hour * 60 * 60\n  game.increase_hour = 0\n}\ngame.changedincrease_day =&gt; {\n  game.epoch = game.epoch + game.increase_day * 60 * 60 * 24\n  game.increase_day = 0\n}\n</code></pre>\n\n",
      "PostDate": "2021-11-18T12:19:45.5659004Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "dfa62469-0e99-4bb1-9058-05ad654c389f",
      "UserId": 319917,
      "Username": "mrangel",
      "AvatarUrl": "https://secure.gravatar.com/avatar/?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "One advantage of storing the time in a single attribute, and just creating others to display it, is that it's easier to change the format later if you want. For example, you could change to:\r\n```\r\ngame.clock_string = ToString((game.hour - 1) % 12 + 1) + \":\" + game.minute_string + \":\" + game.second_string + StringListItem(Split(\" AM; PM\"), game.hour/12)\r\n```\r\n(Yeah, that's a bit unwieldy. But you get the idea. Storing one bit of information in one attribute makes it easier to change how you deal with it)",
      "EditableFormat": "markdown",
      "HTML": "<p>One advantage of storing the time in a single attribute, and just creating others to display it, is that it's easier to change the format later if you want. For example, you could change to:</p>\n<pre><code>game.clock_string = ToString((game.hour - 1) % 12 + 1) + \":\" + game.minute_string + \":\" + game.second_string + StringListItem(Split(\" AM; PM\"), game.hour/12)\n</code></pre>\n<p>(Yeah, that's a bit unwieldy. But you get the idea. Storing one bit of information in one attribute makes it easier to change how you deal with it)</p>\n\n",
      "PostDate": "2021-11-18T12:41:01.0319298Z",
      "LastEditDate": null,
      "link": null
    },
    {
      "PostId": "e3bd8c53-7788-46b7-a795-28d3992ce75c",
      "UserId": 326173,
      "Username": "Curt A. P.",
      "AvatarUrl": "https://secure.gravatar.com/avatar/bc1d5d57408cf4d13f9d9f23c1e3dc56?d=retro",
      "UserAvatar": null,
      "UserGravatar": null,
      "EditableText": "I did a mistake by thinking that the last line in **game.changedepoch** script was\r\n**game.epoch = 0**\r\n\r\nMakes much more sense now. Thanks.\r\n\r\n---\r\n**Edit:** It's up and running. Pretty slick this code. Thank you very much.",
      "EditableFormat": "markdown",
      "HTML": "<p>I did a mistake by thinking that the last line in <strong>game.changedepoch</strong> script was<br>\n<strong>game.epoch = 0</strong></p>\n<p>Makes much more sense now. Thanks.</p>\n<hr>\n<p><strong>Edit:</strong> It's up and running. Pretty slick this code. Thank you very much.</p>\n\n",
      "PostDate": "2021-11-19T07:45:12.2679262Z",
      "LastEditDate": "2021-11-19T10:10:12.9545805Z",
      "link": null
    }
  ]
}
